
NucleoF411RE_WFM200_Intan.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001d55c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0004fcd8  0801d700  0801d700  0002d700  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0806d3d8  0806d3d8  0008029c  2**0
                  CONTENTS
  4 .ARM          00000008  0806d3d8  0806d3d8  0007d3d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0806d3e0  0806d3e0  0008029c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0806d3e0  0806d3e0  0007d3e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0806d3e4  0806d3e4  0007d3e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000029c  20000000  0806d3e8  00080000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00013a80  2000029c  0806d684  0008029c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20013d1c  0806d684  00083d1c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0008029c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000342cc  00000000  00000000  000802cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000958d  00000000  00000000  000b4598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002420  00000000  00000000  000bdb28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002268  00000000  00000000  000bff48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a4fe  00000000  00000000  000c21b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003a435  00000000  00000000  000ec6ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b70bb  00000000  00000000  00126ae3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001ddb9e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a104  00000000  00000000  001ddbf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000029c 	.word	0x2000029c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0801d6e4 	.word	0x0801d6e4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002a0 	.word	0x200002a0
 80001dc:	0801d6e4 	.word	0x0801d6e4

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bec:	f000 b974 	b.w	8000ed8 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9d08      	ldr	r5, [sp, #32]
 8000c0e:	4604      	mov	r4, r0
 8000c10:	468e      	mov	lr, r1
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d14d      	bne.n	8000cb2 <__udivmoddi4+0xaa>
 8000c16:	428a      	cmp	r2, r1
 8000c18:	4694      	mov	ip, r2
 8000c1a:	d969      	bls.n	8000cf0 <__udivmoddi4+0xe8>
 8000c1c:	fab2 f282 	clz	r2, r2
 8000c20:	b152      	cbz	r2, 8000c38 <__udivmoddi4+0x30>
 8000c22:	fa01 f302 	lsl.w	r3, r1, r2
 8000c26:	f1c2 0120 	rsb	r1, r2, #32
 8000c2a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c2e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c32:	ea41 0e03 	orr.w	lr, r1, r3
 8000c36:	4094      	lsls	r4, r2
 8000c38:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c3c:	0c21      	lsrs	r1, r4, #16
 8000c3e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c42:	fa1f f78c 	uxth.w	r7, ip
 8000c46:	fb08 e316 	mls	r3, r8, r6, lr
 8000c4a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c4e:	fb06 f107 	mul.w	r1, r6, r7
 8000c52:	4299      	cmp	r1, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x64>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c5e:	f080 811f 	bcs.w	8000ea0 <__udivmoddi4+0x298>
 8000c62:	4299      	cmp	r1, r3
 8000c64:	f240 811c 	bls.w	8000ea0 <__udivmoddi4+0x298>
 8000c68:	3e02      	subs	r6, #2
 8000c6a:	4463      	add	r3, ip
 8000c6c:	1a5b      	subs	r3, r3, r1
 8000c6e:	b2a4      	uxth	r4, r4
 8000c70:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c74:	fb08 3310 	mls	r3, r8, r0, r3
 8000c78:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c7c:	fb00 f707 	mul.w	r7, r0, r7
 8000c80:	42a7      	cmp	r7, r4
 8000c82:	d90a      	bls.n	8000c9a <__udivmoddi4+0x92>
 8000c84:	eb1c 0404 	adds.w	r4, ip, r4
 8000c88:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c8c:	f080 810a 	bcs.w	8000ea4 <__udivmoddi4+0x29c>
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	f240 8107 	bls.w	8000ea4 <__udivmoddi4+0x29c>
 8000c96:	4464      	add	r4, ip
 8000c98:	3802      	subs	r0, #2
 8000c9a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c9e:	1be4      	subs	r4, r4, r7
 8000ca0:	2600      	movs	r6, #0
 8000ca2:	b11d      	cbz	r5, 8000cac <__udivmoddi4+0xa4>
 8000ca4:	40d4      	lsrs	r4, r2
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cac:	4631      	mov	r1, r6
 8000cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d909      	bls.n	8000cca <__udivmoddi4+0xc2>
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	f000 80ef 	beq.w	8000e9a <__udivmoddi4+0x292>
 8000cbc:	2600      	movs	r6, #0
 8000cbe:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc2:	4630      	mov	r0, r6
 8000cc4:	4631      	mov	r1, r6
 8000cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cca:	fab3 f683 	clz	r6, r3
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	d14a      	bne.n	8000d68 <__udivmoddi4+0x160>
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d302      	bcc.n	8000cdc <__udivmoddi4+0xd4>
 8000cd6:	4282      	cmp	r2, r0
 8000cd8:	f200 80f9 	bhi.w	8000ece <__udivmoddi4+0x2c6>
 8000cdc:	1a84      	subs	r4, r0, r2
 8000cde:	eb61 0303 	sbc.w	r3, r1, r3
 8000ce2:	2001      	movs	r0, #1
 8000ce4:	469e      	mov	lr, r3
 8000ce6:	2d00      	cmp	r5, #0
 8000ce8:	d0e0      	beq.n	8000cac <__udivmoddi4+0xa4>
 8000cea:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cee:	e7dd      	b.n	8000cac <__udivmoddi4+0xa4>
 8000cf0:	b902      	cbnz	r2, 8000cf4 <__udivmoddi4+0xec>
 8000cf2:	deff      	udf	#255	; 0xff
 8000cf4:	fab2 f282 	clz	r2, r2
 8000cf8:	2a00      	cmp	r2, #0
 8000cfa:	f040 8092 	bne.w	8000e22 <__udivmoddi4+0x21a>
 8000cfe:	eba1 010c 	sub.w	r1, r1, ip
 8000d02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d06:	fa1f fe8c 	uxth.w	lr, ip
 8000d0a:	2601      	movs	r6, #1
 8000d0c:	0c20      	lsrs	r0, r4, #16
 8000d0e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d12:	fb07 1113 	mls	r1, r7, r3, r1
 8000d16:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d1a:	fb0e f003 	mul.w	r0, lr, r3
 8000d1e:	4288      	cmp	r0, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x12c>
 8000d22:	eb1c 0101 	adds.w	r1, ip, r1
 8000d26:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x12a>
 8000d2c:	4288      	cmp	r0, r1
 8000d2e:	f200 80cb 	bhi.w	8000ec8 <__udivmoddi4+0x2c0>
 8000d32:	4643      	mov	r3, r8
 8000d34:	1a09      	subs	r1, r1, r0
 8000d36:	b2a4      	uxth	r4, r4
 8000d38:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d3c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d40:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d44:	fb0e fe00 	mul.w	lr, lr, r0
 8000d48:	45a6      	cmp	lr, r4
 8000d4a:	d908      	bls.n	8000d5e <__udivmoddi4+0x156>
 8000d4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d50:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d54:	d202      	bcs.n	8000d5c <__udivmoddi4+0x154>
 8000d56:	45a6      	cmp	lr, r4
 8000d58:	f200 80bb 	bhi.w	8000ed2 <__udivmoddi4+0x2ca>
 8000d5c:	4608      	mov	r0, r1
 8000d5e:	eba4 040e 	sub.w	r4, r4, lr
 8000d62:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d66:	e79c      	b.n	8000ca2 <__udivmoddi4+0x9a>
 8000d68:	f1c6 0720 	rsb	r7, r6, #32
 8000d6c:	40b3      	lsls	r3, r6
 8000d6e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d72:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d76:	fa20 f407 	lsr.w	r4, r0, r7
 8000d7a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d7e:	431c      	orrs	r4, r3
 8000d80:	40f9      	lsrs	r1, r7
 8000d82:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d86:	fa00 f306 	lsl.w	r3, r0, r6
 8000d8a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d8e:	0c20      	lsrs	r0, r4, #16
 8000d90:	fa1f fe8c 	uxth.w	lr, ip
 8000d94:	fb09 1118 	mls	r1, r9, r8, r1
 8000d98:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9c:	fb08 f00e 	mul.w	r0, r8, lr
 8000da0:	4288      	cmp	r0, r1
 8000da2:	fa02 f206 	lsl.w	r2, r2, r6
 8000da6:	d90b      	bls.n	8000dc0 <__udivmoddi4+0x1b8>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f108 3aff 	add.w	sl, r8, #4294967295
 8000db0:	f080 8088 	bcs.w	8000ec4 <__udivmoddi4+0x2bc>
 8000db4:	4288      	cmp	r0, r1
 8000db6:	f240 8085 	bls.w	8000ec4 <__udivmoddi4+0x2bc>
 8000dba:	f1a8 0802 	sub.w	r8, r8, #2
 8000dbe:	4461      	add	r1, ip
 8000dc0:	1a09      	subs	r1, r1, r0
 8000dc2:	b2a4      	uxth	r4, r4
 8000dc4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dc8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dcc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dd0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dd4:	458e      	cmp	lr, r1
 8000dd6:	d908      	bls.n	8000dea <__udivmoddi4+0x1e2>
 8000dd8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ddc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000de0:	d26c      	bcs.n	8000ebc <__udivmoddi4+0x2b4>
 8000de2:	458e      	cmp	lr, r1
 8000de4:	d96a      	bls.n	8000ebc <__udivmoddi4+0x2b4>
 8000de6:	3802      	subs	r0, #2
 8000de8:	4461      	add	r1, ip
 8000dea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dee:	fba0 9402 	umull	r9, r4, r0, r2
 8000df2:	eba1 010e 	sub.w	r1, r1, lr
 8000df6:	42a1      	cmp	r1, r4
 8000df8:	46c8      	mov	r8, r9
 8000dfa:	46a6      	mov	lr, r4
 8000dfc:	d356      	bcc.n	8000eac <__udivmoddi4+0x2a4>
 8000dfe:	d053      	beq.n	8000ea8 <__udivmoddi4+0x2a0>
 8000e00:	b15d      	cbz	r5, 8000e1a <__udivmoddi4+0x212>
 8000e02:	ebb3 0208 	subs.w	r2, r3, r8
 8000e06:	eb61 010e 	sbc.w	r1, r1, lr
 8000e0a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e0e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e12:	40f1      	lsrs	r1, r6
 8000e14:	431f      	orrs	r7, r3
 8000e16:	e9c5 7100 	strd	r7, r1, [r5]
 8000e1a:	2600      	movs	r6, #0
 8000e1c:	4631      	mov	r1, r6
 8000e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e22:	f1c2 0320 	rsb	r3, r2, #32
 8000e26:	40d8      	lsrs	r0, r3
 8000e28:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e2c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e30:	4091      	lsls	r1, r2
 8000e32:	4301      	orrs	r1, r0
 8000e34:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e38:	fa1f fe8c 	uxth.w	lr, ip
 8000e3c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e40:	fb07 3610 	mls	r6, r7, r0, r3
 8000e44:	0c0b      	lsrs	r3, r1, #16
 8000e46:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e4a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e4e:	429e      	cmp	r6, r3
 8000e50:	fa04 f402 	lsl.w	r4, r4, r2
 8000e54:	d908      	bls.n	8000e68 <__udivmoddi4+0x260>
 8000e56:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e5e:	d22f      	bcs.n	8000ec0 <__udivmoddi4+0x2b8>
 8000e60:	429e      	cmp	r6, r3
 8000e62:	d92d      	bls.n	8000ec0 <__udivmoddi4+0x2b8>
 8000e64:	3802      	subs	r0, #2
 8000e66:	4463      	add	r3, ip
 8000e68:	1b9b      	subs	r3, r3, r6
 8000e6a:	b289      	uxth	r1, r1
 8000e6c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e70:	fb07 3316 	mls	r3, r7, r6, r3
 8000e74:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e78:	fb06 f30e 	mul.w	r3, r6, lr
 8000e7c:	428b      	cmp	r3, r1
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x28a>
 8000e80:	eb1c 0101 	adds.w	r1, ip, r1
 8000e84:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e88:	d216      	bcs.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	d914      	bls.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e8e:	3e02      	subs	r6, #2
 8000e90:	4461      	add	r1, ip
 8000e92:	1ac9      	subs	r1, r1, r3
 8000e94:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e98:	e738      	b.n	8000d0c <__udivmoddi4+0x104>
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e705      	b.n	8000cac <__udivmoddi4+0xa4>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e3      	b.n	8000c6c <__udivmoddi4+0x64>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6f8      	b.n	8000c9a <__udivmoddi4+0x92>
 8000ea8:	454b      	cmp	r3, r9
 8000eaa:	d2a9      	bcs.n	8000e00 <__udivmoddi4+0x1f8>
 8000eac:	ebb9 0802 	subs.w	r8, r9, r2
 8000eb0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7a3      	b.n	8000e00 <__udivmoddi4+0x1f8>
 8000eb8:	4646      	mov	r6, r8
 8000eba:	e7ea      	b.n	8000e92 <__udivmoddi4+0x28a>
 8000ebc:	4620      	mov	r0, r4
 8000ebe:	e794      	b.n	8000dea <__udivmoddi4+0x1e2>
 8000ec0:	4640      	mov	r0, r8
 8000ec2:	e7d1      	b.n	8000e68 <__udivmoddi4+0x260>
 8000ec4:	46d0      	mov	r8, sl
 8000ec6:	e77b      	b.n	8000dc0 <__udivmoddi4+0x1b8>
 8000ec8:	3b02      	subs	r3, #2
 8000eca:	4461      	add	r1, ip
 8000ecc:	e732      	b.n	8000d34 <__udivmoddi4+0x12c>
 8000ece:	4630      	mov	r0, r6
 8000ed0:	e709      	b.n	8000ce6 <__udivmoddi4+0xde>
 8000ed2:	4464      	add	r4, ip
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	e742      	b.n	8000d5e <__udivmoddi4+0x156>

08000ed8 <__aeabi_idiv0>:
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop

08000edc <misosplit>:
#include <stdlib.h>
#include <math.h>
#include "Task_Apps_Start.h"

void misosplit(uint16_t data, uint8_t* a, uint8_t* b)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b089      	sub	sp, #36	; 0x24
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	60b9      	str	r1, [r7, #8]
 8000ee6:	607a      	str	r2, [r7, #4]
 8000ee8:	81fb      	strh	r3, [r7, #14]
	uint8_t aa = 0;
 8000eea:	2300      	movs	r3, #0
 8000eec:	77fb      	strb	r3, [r7, #31]
	uint8_t bb = 0;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	77bb      	strb	r3, [r7, #30]
	uint16_t mask_a = 0b1010101010101010;
 8000ef2:	f64a 23aa 	movw	r3, #43690	; 0xaaaa
 8000ef6:	82fb      	strh	r3, [r7, #22]
	uint16_t mask_b = 0b0101010101010101;
 8000ef8:	f245 5355 	movw	r3, #21845	; 0x5555
 8000efc:	82bb      	strh	r3, [r7, #20]

	uint16_t masked_a = data & mask_a;
 8000efe:	89fa      	ldrh	r2, [r7, #14]
 8000f00:	8afb      	ldrh	r3, [r7, #22]
 8000f02:	4013      	ands	r3, r2
 8000f04:	827b      	strh	r3, [r7, #18]
	masked_a >>= 1;
 8000f06:	8a7b      	ldrh	r3, [r7, #18]
 8000f08:	085b      	lsrs	r3, r3, #1
 8000f0a:	827b      	strh	r3, [r7, #18]
	uint16_t masked_b = data & mask_b;
 8000f0c:	89fa      	ldrh	r2, [r7, #14]
 8000f0e:	8abb      	ldrh	r3, [r7, #20]
 8000f10:	4013      	ands	r3, r2
 8000f12:	823b      	strh	r3, [r7, #16]

	for(int i=0; i<8; i++)
 8000f14:	2300      	movs	r3, #0
 8000f16:	61bb      	str	r3, [r7, #24]
 8000f18:	e022      	b.n	8000f60 <misosplit+0x84>
	{
		aa += (0b1<<i & masked_a>>i);
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	69bb      	ldr	r3, [r7, #24]
 8000f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f22:	b25a      	sxtb	r2, r3
 8000f24:	8a79      	ldrh	r1, [r7, #18]
 8000f26:	69bb      	ldr	r3, [r7, #24]
 8000f28:	fa41 f303 	asr.w	r3, r1, r3
 8000f2c:	b25b      	sxtb	r3, r3
 8000f2e:	4013      	ands	r3, r2
 8000f30:	b25b      	sxtb	r3, r3
 8000f32:	b2da      	uxtb	r2, r3
 8000f34:	7ffb      	ldrb	r3, [r7, #31]
 8000f36:	4413      	add	r3, r2
 8000f38:	77fb      	strb	r3, [r7, #31]
		bb += (0b1<<i & masked_b>>i);
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	69bb      	ldr	r3, [r7, #24]
 8000f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f42:	b25a      	sxtb	r2, r3
 8000f44:	8a39      	ldrh	r1, [r7, #16]
 8000f46:	69bb      	ldr	r3, [r7, #24]
 8000f48:	fa41 f303 	asr.w	r3, r1, r3
 8000f4c:	b25b      	sxtb	r3, r3
 8000f4e:	4013      	ands	r3, r2
 8000f50:	b25b      	sxtb	r3, r3
 8000f52:	b2da      	uxtb	r2, r3
 8000f54:	7fbb      	ldrb	r3, [r7, #30]
 8000f56:	4413      	add	r3, r2
 8000f58:	77bb      	strb	r3, [r7, #30]
	for(int i=0; i<8; i++)
 8000f5a:	69bb      	ldr	r3, [r7, #24]
 8000f5c:	3301      	adds	r3, #1
 8000f5e:	61bb      	str	r3, [r7, #24]
 8000f60:	69bb      	ldr	r3, [r7, #24]
 8000f62:	2b07      	cmp	r3, #7
 8000f64:	ddd9      	ble.n	8000f1a <misosplit+0x3e>
	}
	*a = aa << 1;
 8000f66:	7ffb      	ldrb	r3, [r7, #31]
 8000f68:	005b      	lsls	r3, r3, #1
 8000f6a:	b2da      	uxtb	r2, r3
 8000f6c:	68bb      	ldr	r3, [r7, #8]
 8000f6e:	701a      	strb	r2, [r3, #0]
	*b = bb;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	7fba      	ldrb	r2, [r7, #30]
 8000f74:	701a      	strb	r2, [r3, #0]
}
 8000f76:	bf00      	nop
 8000f78:	3724      	adds	r7, #36	; 0x24
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
	...

08000f84 <SPI_SEND_RECV_32>:

#include "Task_Apps_Start.h"
#include "SPI_communication.h"


void SPI_SEND_RECV_32(SPI_HandleTypeDef *hspi, uint16_t *tx_ptr, uint16_t *rx_ptr, uint8_t *last_bit){
 8000f84:	b480      	push	{r7}
 8000f86:	b087      	sub	sp, #28
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	60f8      	str	r0, [r7, #12]
 8000f8c:	60b9      	str	r1, [r7, #8]
 8000f8e:	607a      	str	r2, [r7, #4]
 8000f90:	603b      	str	r3, [r7, #0]
	uint16_t Size = 2;
 8000f92:	2302      	movs	r3, #2
 8000f94:	827b      	strh	r3, [r7, #18]

	/* Variable used to alternate Rx and Tx during transfer */
	uint32_t             txallowed = 1U;
 8000f96:	2301      	movs	r3, #1
 8000f98:	617b      	str	r3, [r7, #20]


	/* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
	if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	2b04      	cmp	r3, #4
 8000fa4:	d003      	beq.n	8000fae <SPI_SEND_RECV_32+0x2a>
	{
		hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	2205      	movs	r2, #5
 8000faa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	}

	/* Set the transaction information */
	hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	655a      	str	r2, [r3, #84]	; 0x54
	hspi->pRxBuffPtr  = (uint8_t *)rx_ptr;
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	687a      	ldr	r2, [r7, #4]
 8000fb8:	639a      	str	r2, [r3, #56]	; 0x38
	hspi->RxXferCount = Size;
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	8a7a      	ldrh	r2, [r7, #18]
 8000fbe:	87da      	strh	r2, [r3, #62]	; 0x3e
	hspi->RxXferSize  = Size;
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	8a7a      	ldrh	r2, [r7, #18]
 8000fc4:	879a      	strh	r2, [r3, #60]	; 0x3c
	hspi->pTxBuffPtr  = (uint8_t *)tx_ptr;
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	68ba      	ldr	r2, [r7, #8]
 8000fca:	631a      	str	r2, [r3, #48]	; 0x30
	hspi->TxXferCount = Size;
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	8a7a      	ldrh	r2, [r7, #18]
 8000fd0:	86da      	strh	r2, [r3, #54]	; 0x36
	hspi->TxXferSize  = Size;
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	8a7a      	ldrh	r2, [r7, #18]
 8000fd6:	869a      	strh	r2, [r3, #52]	; 0x34

	/*Init field not used in handle to zero */
	hspi->RxISR       = NULL;
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	2200      	movs	r2, #0
 8000fdc:	641a      	str	r2, [r3, #64]	; 0x40
	hspi->TxISR       = NULL;
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	645a      	str	r2, [r3, #68]	; 0x44


	/* Check if the SPI is already enabled */
	if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fee:	2b40      	cmp	r3, #64	; 0x40
 8000ff0:	d007      	beq.n	8001002 <SPI_SEND_RECV_32+0x7e>
	{
	/* Enable SPI peripheral */
		__HAL_SPI_ENABLE(hspi);
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	681a      	ldr	r2, [r3, #0]
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001000:	601a      	str	r2, [r3, #0]
	}

	//RESET CS_PIN
	RHD_SPI_CS_Port->BSRR = (uint32_t)RHD_SPI_CS_Pin << 16U;
 8001002:	4b2e      	ldr	r3, [pc, #184]	; (80010bc <SPI_SEND_RECV_32+0x138>)
 8001004:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001008:	619a      	str	r2, [r3, #24]

	while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800100a:	e043      	b.n	8001094 <SPI_SEND_RECV_32+0x110>
	{
		/* Check TXE flag */
		if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	689b      	ldr	r3, [r3, #8]
 8001012:	f003 0302 	and.w	r3, r3, #2
 8001016:	2b02      	cmp	r3, #2
 8001018:	d11b      	bne.n	8001052 <SPI_SEND_RECV_32+0xce>
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800101e:	b29b      	uxth	r3, r3
 8001020:	2b00      	cmp	r3, #0
 8001022:	d016      	beq.n	8001052 <SPI_SEND_RECV_32+0xce>
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	2b01      	cmp	r3, #1
 8001028:	d113      	bne.n	8001052 <SPI_SEND_RECV_32+0xce>
		{
			hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102e:	881a      	ldrh	r2, [r3, #0]
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	60da      	str	r2, [r3, #12]
			hspi->pTxBuffPtr += sizeof(uint16_t);
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103a:	1c9a      	adds	r2, r3, #2
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	631a      	str	r2, [r3, #48]	; 0x30
			hspi->TxXferCount--;
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001044:	b29b      	uxth	r3, r3
 8001046:	3b01      	subs	r3, #1
 8001048:	b29a      	uxth	r2, r3
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	86da      	strh	r2, [r3, #54]	; 0x36
			/* Next Data is a reception (Rx). Tx not allowed */
			txallowed = 0U;
 800104e:	2300      	movs	r3, #0
 8001050:	617b      	str	r3, [r7, #20]
		}

		/* Check RXNE flag */
		if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	689b      	ldr	r3, [r3, #8]
 8001058:	f003 0301 	and.w	r3, r3, #1
 800105c:	2b01      	cmp	r3, #1
 800105e:	d119      	bne.n	8001094 <SPI_SEND_RECV_32+0x110>
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001064:	b29b      	uxth	r3, r3
 8001066:	2b00      	cmp	r3, #0
 8001068:	d014      	beq.n	8001094 <SPI_SEND_RECV_32+0x110>
		{
			*((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	68da      	ldr	r2, [r3, #12]
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001074:	b292      	uxth	r2, r2
 8001076:	801a      	strh	r2, [r3, #0]
			hspi->pRxBuffPtr += sizeof(uint16_t);
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800107c:	1c9a      	adds	r2, r3, #2
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	639a      	str	r2, [r3, #56]	; 0x38
			hspi->RxXferCount--;
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001086:	b29b      	uxth	r3, r3
 8001088:	3b01      	subs	r3, #1
 800108a:	b29a      	uxth	r2, r3
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	87da      	strh	r2, [r3, #62]	; 0x3e
			/* Next Data is a Transmission (Tx). Tx is allowed */
			txallowed = 1U;
 8001090:	2301      	movs	r3, #1
 8001092:	617b      	str	r3, [r7, #20]
	while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001098:	b29b      	uxth	r3, r3
 800109a:	2b00      	cmp	r3, #0
 800109c:	d1b6      	bne.n	800100c <SPI_SEND_RECV_32+0x88>
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80010a2:	b29b      	uxth	r3, r3
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d1b1      	bne.n	800100c <SPI_SEND_RECV_32+0x88>
		}
	}
	//SET CS_PIN
	RHD_SPI_CS_Port->BSRR = RHD_SPI_CS_Pin;
 80010a8:	4b04      	ldr	r3, [pc, #16]	; (80010bc <SPI_SEND_RECV_32+0x138>)
 80010aa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80010ae:	619a      	str	r2, [r3, #24]


}
 80010b0:	bf00      	nop
 80010b2:	371c      	adds	r7, #28
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr
 80010bc:	40020400 	.word	0x40020400

080010c0 <start_app_task>:




void start_app_task(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
	INIT_UPD();
 80010c4:	f000 fb68 	bl	8001798 <INIT_UPD>


//	osTimerDef(periodicTimer, PTCallback);
//	periodicTimerHandle = osTimerCreate(osTimer(periodicTimer), osTimerPeriodic, NULL);

	spi_to_wifi_queue = xQueueCreate(SPI_EVENTS_NB_MAX, sizeof(spi_to_udp_t));
 80010c8:	2200      	movs	r2, #0
 80010ca:	210c      	movs	r1, #12
 80010cc:	2014      	movs	r0, #20
 80010ce:	f009 fb79 	bl	800a7c4 <xQueueGenericCreate>
 80010d2:	4603      	mov	r3, r0
 80010d4:	4a0a      	ldr	r2, [pc, #40]	; (8001100 <start_app_task+0x40>)
 80010d6:	6013      	str	r3, [r2, #0]
  	if (spi_to_wifi_queue == NULL){
 80010d8:	4b09      	ldr	r3, [pc, #36]	; (8001100 <start_app_task+0x40>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d102      	bne.n	80010e6 <start_app_task+0x26>
  		printf("booboo Queue \r\n");
 80010e0:	4808      	ldr	r0, [pc, #32]	; (8001104 <start_app_task+0x44>)
 80010e2:	f01a fa53 	bl	801b58c <puts>
  	}


  	//osTimerStart(periodicTimerHandle, UDP_FREQUENCY);
  	TASK_UDP_TRANSMIT_INIT((void*) spi_to_wifi_queue);
 80010e6:	4b06      	ldr	r3, [pc, #24]	; (8001100 <start_app_task+0x40>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4618      	mov	r0, r3
 80010ec:	f000 fba2 	bl	8001834 <TASK_UDP_TRANSMIT_INIT>
  	TASK_RHD64_SPI_COMMUNICATION_INIT((void*) spi_to_wifi_queue);
 80010f0:	4b03      	ldr	r3, [pc, #12]	; (8001100 <start_app_task+0x40>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4618      	mov	r0, r3
 80010f6:	f000 fa65 	bl	80015c4 <TASK_RHD64_SPI_COMMUNICATION_INIT>

}
 80010fa:	bf00      	nop
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	200002b8 	.word	0x200002b8
 8001104:	0801d700 	.word	0x0801d700

08001108 <INIT_RHD64>:

void RHD64_SPI_COMMUNICATION_task_entry(void const *p_arg);



void INIT_RHD64(SPI_HandleTypeDef *hspi){
 8001108:	b580      	push	{r7, lr}
 800110a:	b08a      	sub	sp, #40	; 0x28
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
	uint8_t misosplit_a[2];
	uint8_t misosplit_b[2];
	uint8_t last_bit[1];


	for (int i = 0; i<3 ; i++){
 8001110:	2300      	movs	r3, #0
 8001112:	627b      	str	r3, [r7, #36]	; 0x24
 8001114:	e010      	b.n	8001138 <INIT_RHD64+0x30>
		// Register 63 for DUMMY READ on BOOT
		tx_vector[0] = 0b1111111111111111;
 8001116:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800111a:	833b      	strh	r3, [r7, #24]
		tx_vector[1] = 0b0000000000000000;
 800111c:	2300      	movs	r3, #0
 800111e:	837b      	strh	r3, [r7, #26]
		SPI_SEND_RECV_32(hspi, tx_vector, rx_vector, last_bit);
 8001120:	f107 0308 	add.w	r3, r7, #8
 8001124:	f107 0214 	add.w	r2, r7, #20
 8001128:	f107 0118 	add.w	r1, r7, #24
 800112c:	6878      	ldr	r0, [r7, #4]
 800112e:	f7ff ff29 	bl	8000f84 <SPI_SEND_RECV_32>
	for (int i = 0; i<3 ; i++){
 8001132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001134:	3301      	adds	r3, #1
 8001136:	627b      	str	r3, [r7, #36]	; 0x24
 8001138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800113a:	2b02      	cmp	r3, #2
 800113c:	ddeb      	ble.n	8001116 <INIT_RHD64+0xe>

	}

	// Register 0 - ADC config.
	tx_vector[0] = 0b1100000000000000;
 800113e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001142:	833b      	strh	r3, [r7, #24]
	tx_vector[1] = 0b1111001111111100;
 8001144:	f24f 33fc 	movw	r3, #62460	; 0xf3fc
 8001148:	837b      	strh	r3, [r7, #26]
	SPI_SEND_RECV_32(hspi, tx_vector, rx_vector, last_bit);
 800114a:	f107 0308 	add.w	r3, r7, #8
 800114e:	f107 0214 	add.w	r2, r7, #20
 8001152:	f107 0118 	add.w	r1, r7, #24
 8001156:	6878      	ldr	r0, [r7, #4]
 8001158:	f7ff ff14 	bl	8000f84 <SPI_SEND_RECV_32>

	// Register 1 - Supply sensor & ADC buffer bias current
	tx_vector[0] = 0b1100000000000011;
 800115c:	f24c 0303 	movw	r3, #49155	; 0xc003
 8001160:	833b      	strh	r3, [r7, #24]
	tx_vector[1] = 0b0000110000000000; //(ADC BUFFER BIAS AT 32)
 8001162:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001166:	837b      	strh	r3, [r7, #26]
	SPI_SEND_RECV_32(hspi, tx_vector, rx_vector, last_bit);
 8001168:	f107 0308 	add.w	r3, r7, #8
 800116c:	f107 0214 	add.w	r2, r7, #20
 8001170:	f107 0118 	add.w	r1, r7, #24
 8001174:	6878      	ldr	r0, [r7, #4]
 8001176:	f7ff ff05 	bl	8000f84 <SPI_SEND_RECV_32>

	// Register 2 - MUX bias current
	tx_vector[0] = 0b1100000000001100;
 800117a:	f24c 030c 	movw	r3, #49164	; 0xc00c
 800117e:	833b      	strh	r3, [r7, #24]
	tx_vector[1] = 0b0000110011000000; //(MUX BIAS AT 40)
 8001180:	f44f 634c 	mov.w	r3, #3264	; 0xcc0
 8001184:	837b      	strh	r3, [r7, #26]
	SPI_SEND_RECV_32(hspi, tx_vector, rx_vector, last_bit);
 8001186:	f107 0308 	add.w	r3, r7, #8
 800118a:	f107 0214 	add.w	r2, r7, #20
 800118e:	f107 0118 	add.w	r1, r7, #24
 8001192:	6878      	ldr	r0, [r7, #4]
 8001194:	f7ff fef6 	bl	8000f84 <SPI_SEND_RECV_32>

	// Register 3 - MUX Load, Temp sensor, Aux digital output
	tx_vector[0] = 0b1100000000001111;
 8001198:	f24c 030f 	movw	r3, #49167	; 0xc00f
 800119c:	833b      	strh	r3, [r7, #24]
	tx_vector[1] = 0b0000000000001100;
 800119e:	230c      	movs	r3, #12
 80011a0:	837b      	strh	r3, [r7, #26]
	SPI_SEND_RECV_32(hspi, tx_vector, rx_vector, last_bit);
 80011a2:	f107 0308 	add.w	r3, r7, #8
 80011a6:	f107 0214 	add.w	r2, r7, #20
 80011aa:	f107 0118 	add.w	r1, r7, #24
 80011ae:	6878      	ldr	r0, [r7, #4]
 80011b0:	f7ff fee8 	bl	8000f84 <SPI_SEND_RECV_32>

	// Register 4 - ADC output format & DSP offset removal
	tx_vector[0] = 0b1100000000110000;
 80011b4:	f24c 0330 	movw	r3, #49200	; 0xc030
 80011b8:	833b      	strh	r3, [r7, #24]
	tx_vector[1] = 0b1111001100111100;
 80011ba:	f24f 333c 	movw	r3, #62268	; 0xf33c
 80011be:	837b      	strh	r3, [r7, #26]
	SPI_SEND_RECV_32(hspi, tx_vector, rx_vector, last_bit);
 80011c0:	f107 0308 	add.w	r3, r7, #8
 80011c4:	f107 0214 	add.w	r2, r7, #20
 80011c8:	f107 0118 	add.w	r1, r7, #24
 80011cc:	6878      	ldr	r0, [r7, #4]
 80011ce:	f7ff fed9 	bl	8000f84 <SPI_SEND_RECV_32>

	// Register 5 - Impedance check control
	tx_vector[0] = 0b1100000000110011;
 80011d2:	f24c 0333 	movw	r3, #49203	; 0xc033
 80011d6:	833b      	strh	r3, [r7, #24]
	tx_vector[1] = 0b0000000000000000;
 80011d8:	2300      	movs	r3, #0
 80011da:	837b      	strh	r3, [r7, #26]
	SPI_SEND_RECV_32(hspi, tx_vector, rx_vector, last_bit);
 80011dc:	f107 0308 	add.w	r3, r7, #8
 80011e0:	f107 0214 	add.w	r2, r7, #20
 80011e4:	f107 0118 	add.w	r1, r7, #24
 80011e8:	6878      	ldr	r0, [r7, #4]
 80011ea:	f7ff fecb 	bl	8000f84 <SPI_SEND_RECV_32>

	// Register 6 - Impedance check DAC [unchanged]
	tx_vector[0] = 0b1100000000111100;
 80011ee:	f24c 033c 	movw	r3, #49212	; 0xc03c
 80011f2:	833b      	strh	r3, [r7, #24]
	tx_vector[1] = 0b0000000000000000;
 80011f4:	2300      	movs	r3, #0
 80011f6:	837b      	strh	r3, [r7, #26]
	SPI_SEND_RECV_32(hspi, tx_vector, rx_vector, last_bit);
 80011f8:	f107 0308 	add.w	r3, r7, #8
 80011fc:	f107 0214 	add.w	r2, r7, #20
 8001200:	f107 0118 	add.w	r1, r7, #24
 8001204:	6878      	ldr	r0, [r7, #4]
 8001206:	f7ff febd 	bl	8000f84 <SPI_SEND_RECV_32>

	// Register 7 - Impedance check amplifier select [unchanged]
	tx_vector[0] = 0b1100000000111111;
 800120a:	f24c 033f 	movw	r3, #49215	; 0xc03f
 800120e:	833b      	strh	r3, [r7, #24]
	tx_vector[1] = 0b0000000000000000;
 8001210:	2300      	movs	r3, #0
 8001212:	837b      	strh	r3, [r7, #26]
	SPI_SEND_RECV_32(hspi, tx_vector, rx_vector, last_bit);
 8001214:	f107 0308 	add.w	r3, r7, #8
 8001218:	f107 0214 	add.w	r2, r7, #20
 800121c:	f107 0118 	add.w	r1, r7, #24
 8001220:	6878      	ldr	r0, [r7, #4]
 8001222:	f7ff feaf 	bl	8000f84 <SPI_SEND_RECV_32>

	// Register 8-13 - On-chip amplifier bandwidth select
	// 	Reg. 8 -> 30
	tx_vector[0] = 0b1100000011000000;
 8001226:	f24c 03c0 	movw	r3, #49344	; 0xc0c0
 800122a:	833b      	strh	r3, [r7, #24]
	tx_vector[1] = 0b0000001111111100;
 800122c:	f44f 737f 	mov.w	r3, #1020	; 0x3fc
 8001230:	837b      	strh	r3, [r7, #26]
	SPI_SEND_RECV_32(hspi, tx_vector, rx_vector, last_bit);
 8001232:	f107 0308 	add.w	r3, r7, #8
 8001236:	f107 0214 	add.w	r2, r7, #20
 800123a:	f107 0118 	add.w	r1, r7, #24
 800123e:	6878      	ldr	r0, [r7, #4]
 8001240:	f7ff fea0 	bl	8000f84 <SPI_SEND_RECV_32>
	// 	Reg. 9 -> 5
	tx_vector[0] = 0b1100000011000011;
 8001244:	f24c 03c3 	movw	r3, #49347	; 0xc0c3
 8001248:	833b      	strh	r3, [r7, #24]
	tx_vector[1] = 0b0000000000110011;
 800124a:	2333      	movs	r3, #51	; 0x33
 800124c:	837b      	strh	r3, [r7, #26]
	SPI_SEND_RECV_32(hspi, tx_vector, rx_vector, last_bit);
 800124e:	f107 0308 	add.w	r3, r7, #8
 8001252:	f107 0214 	add.w	r2, r7, #20
 8001256:	f107 0118 	add.w	r1, r7, #24
 800125a:	6878      	ldr	r0, [r7, #4]
 800125c:	f7ff fe92 	bl	8000f84 <SPI_SEND_RECV_32>
	//	Reg. 10 -> 43
	tx_vector[0] = 0b1100000011001100;
 8001260:	f24c 03cc 	movw	r3, #49356	; 0xc0cc
 8001264:	833b      	strh	r3, [r7, #24]
	tx_vector[1] = 0b0000110011001111;
 8001266:	f640 43cf 	movw	r3, #3279	; 0xccf
 800126a:	837b      	strh	r3, [r7, #26]
	SPI_SEND_RECV_32(hspi, tx_vector, rx_vector, last_bit);
 800126c:	f107 0308 	add.w	r3, r7, #8
 8001270:	f107 0214 	add.w	r2, r7, #20
 8001274:	f107 0118 	add.w	r1, r7, #24
 8001278:	6878      	ldr	r0, [r7, #4]
 800127a:	f7ff fe83 	bl	8000f84 <SPI_SEND_RECV_32>
	//	Reg. 11 -> 6
	tx_vector[0] = 0b1100000011001111;
 800127e:	f24c 03cf 	movw	r3, #49359	; 0xc0cf
 8001282:	833b      	strh	r3, [r7, #24]
	tx_vector[1] = 0b0000000000111100;
 8001284:	233c      	movs	r3, #60	; 0x3c
 8001286:	837b      	strh	r3, [r7, #26]
	SPI_SEND_RECV_32(hspi, tx_vector, rx_vector, last_bit);
 8001288:	f107 0308 	add.w	r3, r7, #8
 800128c:	f107 0214 	add.w	r2, r7, #20
 8001290:	f107 0118 	add.w	r1, r7, #24
 8001294:	6878      	ldr	r0, [r7, #4]
 8001296:	f7ff fe75 	bl	8000f84 <SPI_SEND_RECV_32>
	// 	Reg. 12 -> 54
	tx_vector[0] = 0b1100000011110000;
 800129a:	f24c 03f0 	movw	r3, #49392	; 0xc0f0
 800129e:	833b      	strh	r3, [r7, #24]
	tx_vector[1] = 0b0000111100111100;
 80012a0:	f640 733c 	movw	r3, #3900	; 0xf3c
 80012a4:	837b      	strh	r3, [r7, #26]
	SPI_SEND_RECV_32(hspi, tx_vector, rx_vector, last_bit);
 80012a6:	f107 0308 	add.w	r3, r7, #8
 80012aa:	f107 0214 	add.w	r2, r7, #20
 80012ae:	f107 0118 	add.w	r1, r7, #24
 80012b2:	6878      	ldr	r0, [r7, #4]
 80012b4:	f7ff fe66 	bl	8000f84 <SPI_SEND_RECV_32>
	// 	Reg. 13 -> 0
	tx_vector[0] = 0b1100000011110011;
 80012b8:	f24c 03f3 	movw	r3, #49395	; 0xc0f3
 80012bc:	833b      	strh	r3, [r7, #24]
	tx_vector[1] = 0b0000000000000000;
 80012be:	2300      	movs	r3, #0
 80012c0:	837b      	strh	r3, [r7, #26]
	SPI_SEND_RECV_32(hspi, tx_vector, rx_vector, last_bit);
 80012c2:	f107 0308 	add.w	r3, r7, #8
 80012c6:	f107 0214 	add.w	r2, r7, #20
 80012ca:	f107 0118 	add.w	r1, r7, #24
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	f7ff fe58 	bl	8000f84 <SPI_SEND_RECV_32>

	// Register 14-21 - Individual amplifier power
	//	Reg. 14
	tx_vector[0] = 0b1100000011111100;
 80012d4:	f24c 03fc 	movw	r3, #49404	; 0xc0fc
 80012d8:	833b      	strh	r3, [r7, #24]
	tx_vector[1] = 0b1111111111111111;
 80012da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012de:	837b      	strh	r3, [r7, #26]
	SPI_SEND_RECV_32(hspi, tx_vector, rx_vector, last_bit);
 80012e0:	f107 0308 	add.w	r3, r7, #8
 80012e4:	f107 0214 	add.w	r2, r7, #20
 80012e8:	f107 0118 	add.w	r1, r7, #24
 80012ec:	6878      	ldr	r0, [r7, #4]
 80012ee:	f7ff fe49 	bl	8000f84 <SPI_SEND_RECV_32>
	//	Reg. 15
	tx_vector[0] = 0b1100000011111111;
 80012f2:	f24c 03ff 	movw	r3, #49407	; 0xc0ff
 80012f6:	833b      	strh	r3, [r7, #24]
	tx_vector[1] = 0b1111111111111111;
 80012f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012fc:	837b      	strh	r3, [r7, #26]
	SPI_SEND_RECV_32(hspi, tx_vector, rx_vector, last_bit);
 80012fe:	f107 0308 	add.w	r3, r7, #8
 8001302:	f107 0214 	add.w	r2, r7, #20
 8001306:	f107 0118 	add.w	r1, r7, #24
 800130a:	6878      	ldr	r0, [r7, #4]
 800130c:	f7ff fe3a 	bl	8000f84 <SPI_SEND_RECV_32>
	//	Reg. 16
	tx_vector[0] = 0b1100001100000000;
 8001310:	f44f 4343 	mov.w	r3, #49920	; 0xc300
 8001314:	833b      	strh	r3, [r7, #24]
	tx_vector[1] = 0b1111111111111111;
 8001316:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800131a:	837b      	strh	r3, [r7, #26]
	SPI_SEND_RECV_32(hspi, tx_vector, rx_vector, last_bit);
 800131c:	f107 0308 	add.w	r3, r7, #8
 8001320:	f107 0214 	add.w	r2, r7, #20
 8001324:	f107 0118 	add.w	r1, r7, #24
 8001328:	6878      	ldr	r0, [r7, #4]
 800132a:	f7ff fe2b 	bl	8000f84 <SPI_SEND_RECV_32>
	//	Reg. 17
	tx_vector[0] = 0b1100001100000011;
 800132e:	f24c 3303 	movw	r3, #49923	; 0xc303
 8001332:	833b      	strh	r3, [r7, #24]
	tx_vector[1] = 0b1111111111111111;
 8001334:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001338:	837b      	strh	r3, [r7, #26]
	SPI_SEND_RECV_32(hspi, tx_vector, rx_vector, last_bit);
 800133a:	f107 0308 	add.w	r3, r7, #8
 800133e:	f107 0214 	add.w	r2, r7, #20
 8001342:	f107 0118 	add.w	r1, r7, #24
 8001346:	6878      	ldr	r0, [r7, #4]
 8001348:	f7ff fe1c 	bl	8000f84 <SPI_SEND_RECV_32>
	//	Reg. 18
	tx_vector[0] = 0b1100001100001100;
 800134c:	f24c 330c 	movw	r3, #49932	; 0xc30c
 8001350:	833b      	strh	r3, [r7, #24]
	tx_vector[1] = 0b1111111111111111;
 8001352:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001356:	837b      	strh	r3, [r7, #26]
	SPI_SEND_RECV_32(hspi, tx_vector, rx_vector, last_bit);
 8001358:	f107 0308 	add.w	r3, r7, #8
 800135c:	f107 0214 	add.w	r2, r7, #20
 8001360:	f107 0118 	add.w	r1, r7, #24
 8001364:	6878      	ldr	r0, [r7, #4]
 8001366:	f7ff fe0d 	bl	8000f84 <SPI_SEND_RECV_32>
	//	Reg. 19
	tx_vector[0] = 0b1100001100001111;
 800136a:	f24c 330f 	movw	r3, #49935	; 0xc30f
 800136e:	833b      	strh	r3, [r7, #24]
	tx_vector[1] = 0b1111111111111111;
 8001370:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001374:	837b      	strh	r3, [r7, #26]
	SPI_SEND_RECV_32(hspi, tx_vector, rx_vector, last_bit);
 8001376:	f107 0308 	add.w	r3, r7, #8
 800137a:	f107 0214 	add.w	r2, r7, #20
 800137e:	f107 0118 	add.w	r1, r7, #24
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f7ff fdfe 	bl	8000f84 <SPI_SEND_RECV_32>
	//	Reg. 20
	tx_vector[0] = 0b1100001100110000;
 8001388:	f24c 3330 	movw	r3, #49968	; 0xc330
 800138c:	833b      	strh	r3, [r7, #24]
	tx_vector[1] = 0b1111111111111111;
 800138e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001392:	837b      	strh	r3, [r7, #26]
	SPI_SEND_RECV_32(hspi, tx_vector, rx_vector, last_bit);
 8001394:	f107 0308 	add.w	r3, r7, #8
 8001398:	f107 0214 	add.w	r2, r7, #20
 800139c:	f107 0118 	add.w	r1, r7, #24
 80013a0:	6878      	ldr	r0, [r7, #4]
 80013a2:	f7ff fdef 	bl	8000f84 <SPI_SEND_RECV_32>
	//	Reg. 21
	tx_vector[0] = 0b1100001100110011;
 80013a6:	f24c 3333 	movw	r3, #49971	; 0xc333
 80013aa:	833b      	strh	r3, [r7, #24]
	tx_vector[1] = 0b1111111111111111;
 80013ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013b0:	837b      	strh	r3, [r7, #26]
	SPI_SEND_RECV_32(hspi, tx_vector, rx_vector, last_bit);
 80013b2:	f107 0308 	add.w	r3, r7, #8
 80013b6:	f107 0214 	add.w	r2, r7, #20
 80013ba:	f107 0118 	add.w	r1, r7, #24
 80013be:	6878      	ldr	r0, [r7, #4]
 80013c0:	f7ff fde0 	bl	8000f84 <SPI_SEND_RECV_32>

	// Calibrate ADC
	HAL_Delay(100);
 80013c4:	2064      	movs	r0, #100	; 0x64
 80013c6:	f003 f89b 	bl	8004500 <HAL_Delay>
	tx_vector[0] = 0b0011001100110011;
 80013ca:	f243 3333 	movw	r3, #13107	; 0x3333
 80013ce:	833b      	strh	r3, [r7, #24]
	tx_vector[1] = 0b0000000000000000;
 80013d0:	2300      	movs	r3, #0
 80013d2:	837b      	strh	r3, [r7, #26]
	SPI_SEND_RECV_32(hspi, tx_vector, rx_vector, last_bit);
 80013d4:	f107 0308 	add.w	r3, r7, #8
 80013d8:	f107 0214 	add.w	r2, r7, #20
 80013dc:	f107 0118 	add.w	r1, r7, #24
 80013e0:	6878      	ldr	r0, [r7, #4]
 80013e2:	f7ff fdcf 	bl	8000f84 <SPI_SEND_RECV_32>



	for (int i = 0; i<9 ; i++){
 80013e6:	2300      	movs	r3, #0
 80013e8:	623b      	str	r3, [r7, #32]
 80013ea:	e010      	b.n	800140e <INIT_RHD64+0x306>
		// Register 63 for DUMMY READ on BOOT
		tx_vector[0] = 0b1111111111111111;
 80013ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013f0:	833b      	strh	r3, [r7, #24]
		tx_vector[1] = 0b0000000000000000;
 80013f2:	2300      	movs	r3, #0
 80013f4:	837b      	strh	r3, [r7, #26]
		SPI_SEND_RECV_32(hspi, tx_vector, rx_vector, last_bit);
 80013f6:	f107 0308 	add.w	r3, r7, #8
 80013fa:	f107 0214 	add.w	r2, r7, #20
 80013fe:	f107 0118 	add.w	r1, r7, #24
 8001402:	6878      	ldr	r0, [r7, #4]
 8001404:	f7ff fdbe 	bl	8000f84 <SPI_SEND_RECV_32>
	for (int i = 0; i<9 ; i++){
 8001408:	6a3b      	ldr	r3, [r7, #32]
 800140a:	3301      	adds	r3, #1
 800140c:	623b      	str	r3, [r7, #32]
 800140e:	6a3b      	ldr	r3, [r7, #32]
 8001410:	2b08      	cmp	r3, #8
 8001412:	ddeb      	ble.n	80013ec <INIT_RHD64+0x2e4>

	}


	//Read Register 40
	tx_vector[0] = 0b1111110011000000;
 8001414:	f64f 43c0 	movw	r3, #64704	; 0xfcc0
 8001418:	833b      	strh	r3, [r7, #24]
	tx_vector[1] = 0b0000000000000000;
 800141a:	2300      	movs	r3, #0
 800141c:	837b      	strh	r3, [r7, #26]
	SPI_SEND_RECV_32(hspi, tx_vector, rx_vector, last_bit);
 800141e:	f107 0308 	add.w	r3, r7, #8
 8001422:	f107 0214 	add.w	r2, r7, #20
 8001426:	f107 0118 	add.w	r1, r7, #24
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	f7ff fdaa 	bl	8000f84 <SPI_SEND_RECV_32>

	//Read Register 41
	tx_vector[0] = 0b1111110011000011;
 8001430:	f64f 43c3 	movw	r3, #64707	; 0xfcc3
 8001434:	833b      	strh	r3, [r7, #24]
	tx_vector[1] = 0b0000000000000000;
 8001436:	2300      	movs	r3, #0
 8001438:	837b      	strh	r3, [r7, #26]
	SPI_SEND_RECV_32(hspi, tx_vector, rx_vector, last_bit);
 800143a:	f107 0308 	add.w	r3, r7, #8
 800143e:	f107 0214 	add.w	r2, r7, #20
 8001442:	f107 0118 	add.w	r1, r7, #24
 8001446:	6878      	ldr	r0, [r7, #4]
 8001448:	f7ff fd9c 	bl	8000f84 <SPI_SEND_RECV_32>

	//Read Register 42
	tx_vector[0] = 0b1111110011001100;
 800144c:	f64f 43cc 	movw	r3, #64716	; 0xfccc
 8001450:	833b      	strh	r3, [r7, #24]
	tx_vector[1] = 0b0000000000000000;
 8001452:	2300      	movs	r3, #0
 8001454:	837b      	strh	r3, [r7, #26]
	SPI_SEND_RECV_32(hspi, tx_vector, rx_vector, last_bit);
 8001456:	f107 0308 	add.w	r3, r7, #8
 800145a:	f107 0214 	add.w	r2, r7, #20
 800145e:	f107 0118 	add.w	r1, r7, #24
 8001462:	6878      	ldr	r0, [r7, #4]
 8001464:	f7ff fd8e 	bl	8000f84 <SPI_SEND_RECV_32>

	misosplit(rx_vector[1], &misosplit_a[0], &misosplit_b[0]);
 8001468:	8afb      	ldrh	r3, [r7, #22]
 800146a:	f107 020c 	add.w	r2, r7, #12
 800146e:	f107 0110 	add.w	r1, r7, #16
 8001472:	4618      	mov	r0, r3
 8001474:	f7ff fd32 	bl	8000edc <misosplit>
//	printf("Sending Data to read Reg40: %x - %x \r\n",  tx_vector[0], tx_vector[1]);
//	printf("Receving Data: %x - %c / %x \r\n",  rx_vector[0],data, misosplit_b[0]);



	char data_a = misosplit_a[0];
 8001478:	7c3b      	ldrb	r3, [r7, #16]
 800147a:	77fb      	strb	r3, [r7, #31]
	char data_b = misosplit_b[0];
 800147c:	7b3b      	ldrb	r3, [r7, #12]
 800147e:	77bb      	strb	r3, [r7, #30]
//	printf("Char Receving Data: %c %c \r\n", data_a, data_b);
	printf("Char Receving Data:        %c \r\n", data_b);
 8001480:	7fbb      	ldrb	r3, [r7, #30]
 8001482:	4619      	mov	r1, r3
 8001484:	484c      	ldr	r0, [pc, #304]	; (80015b8 <INIT_RHD64+0x4b0>)
 8001486:	f019 fffb 	bl	801b480 <iprintf>
	printf("Hex  Receving Data: 0x%x 0x%x \r\n", data_a, data_b);
 800148a:	7ffb      	ldrb	r3, [r7, #31]
 800148c:	7fba      	ldrb	r2, [r7, #30]
 800148e:	4619      	mov	r1, r3
 8001490:	484a      	ldr	r0, [pc, #296]	; (80015bc <INIT_RHD64+0x4b4>)
 8001492:	f019 fff5 	bl	801b480 <iprintf>


	//Read Register 43
	tx_vector[0] = 0b1111110011001111;
 8001496:	f64f 43cf 	movw	r3, #64719	; 0xfccf
 800149a:	833b      	strh	r3, [r7, #24]
	tx_vector[1] = 0b0000000000000000;
 800149c:	2300      	movs	r3, #0
 800149e:	837b      	strh	r3, [r7, #26]
	SPI_SEND_RECV_32(hspi, tx_vector, rx_vector, last_bit);
 80014a0:	f107 0308 	add.w	r3, r7, #8
 80014a4:	f107 0214 	add.w	r2, r7, #20
 80014a8:	f107 0118 	add.w	r1, r7, #24
 80014ac:	6878      	ldr	r0, [r7, #4]
 80014ae:	f7ff fd69 	bl	8000f84 <SPI_SEND_RECV_32>
	misosplit(rx_vector[1], &misosplit_a[0], &misosplit_b[0]);
 80014b2:	8afb      	ldrh	r3, [r7, #22]
 80014b4:	f107 020c 	add.w	r2, r7, #12
 80014b8:	f107 0110 	add.w	r1, r7, #16
 80014bc:	4618      	mov	r0, r3
 80014be:	f7ff fd0d 	bl	8000edc <misosplit>
	data_a = misosplit_a[0];
 80014c2:	7c3b      	ldrb	r3, [r7, #16]
 80014c4:	77fb      	strb	r3, [r7, #31]
	data_b = misosplit_b[0];
 80014c6:	7b3b      	ldrb	r3, [r7, #12]
 80014c8:	77bb      	strb	r3, [r7, #30]
//	printf("Char Receving Data: %c %c \r\n", data_a, data_b);
	printf("Char Receving Data:        %c \r\n", data_b);
 80014ca:	7fbb      	ldrb	r3, [r7, #30]
 80014cc:	4619      	mov	r1, r3
 80014ce:	483a      	ldr	r0, [pc, #232]	; (80015b8 <INIT_RHD64+0x4b0>)
 80014d0:	f019 ffd6 	bl	801b480 <iprintf>
	printf("Hex  Receving Data: 0x%x 0x%x \r\n", data_a, data_b);
 80014d4:	7ffb      	ldrb	r3, [r7, #31]
 80014d6:	7fba      	ldrb	r2, [r7, #30]
 80014d8:	4619      	mov	r1, r3
 80014da:	4838      	ldr	r0, [pc, #224]	; (80015bc <INIT_RHD64+0x4b4>)
 80014dc:	f019 ffd0 	bl	801b480 <iprintf>


	//Read Register 44
	tx_vector[0] = 0b1111110011110000;
 80014e0:	f64f 43f0 	movw	r3, #64752	; 0xfcf0
 80014e4:	833b      	strh	r3, [r7, #24]
	tx_vector[1] = 0b0000000000000000;
 80014e6:	2300      	movs	r3, #0
 80014e8:	837b      	strh	r3, [r7, #26]
	SPI_SEND_RECV_32(hspi, tx_vector, rx_vector, last_bit);
 80014ea:	f107 0308 	add.w	r3, r7, #8
 80014ee:	f107 0214 	add.w	r2, r7, #20
 80014f2:	f107 0118 	add.w	r1, r7, #24
 80014f6:	6878      	ldr	r0, [r7, #4]
 80014f8:	f7ff fd44 	bl	8000f84 <SPI_SEND_RECV_32>
	misosplit(rx_vector[1], &misosplit_a[0], &misosplit_b[0]);
 80014fc:	8afb      	ldrh	r3, [r7, #22]
 80014fe:	f107 020c 	add.w	r2, r7, #12
 8001502:	f107 0110 	add.w	r1, r7, #16
 8001506:	4618      	mov	r0, r3
 8001508:	f7ff fce8 	bl	8000edc <misosplit>
	data_a = misosplit_a[0];
 800150c:	7c3b      	ldrb	r3, [r7, #16]
 800150e:	77fb      	strb	r3, [r7, #31]
	data_b = misosplit_b[0];
 8001510:	7b3b      	ldrb	r3, [r7, #12]
 8001512:	77bb      	strb	r3, [r7, #30]
//	printf("Char Receving Data: %c %c \r\n", data_a, data_b);
	printf("Char Receving Data:        %c \r\n", data_b);
 8001514:	7fbb      	ldrb	r3, [r7, #30]
 8001516:	4619      	mov	r1, r3
 8001518:	4827      	ldr	r0, [pc, #156]	; (80015b8 <INIT_RHD64+0x4b0>)
 800151a:	f019 ffb1 	bl	801b480 <iprintf>
	printf("Hex  Receving Data: 0x%x 0x%x \r\n", data_a, data_b);
 800151e:	7ffb      	ldrb	r3, [r7, #31]
 8001520:	7fba      	ldrb	r2, [r7, #30]
 8001522:	4619      	mov	r1, r3
 8001524:	4825      	ldr	r0, [pc, #148]	; (80015bc <INIT_RHD64+0x4b4>)
 8001526:	f019 ffab 	bl	801b480 <iprintf>



	SPI_SEND_RECV_32(hspi, tx_vector, rx_vector, last_bit);
 800152a:	f107 0308 	add.w	r3, r7, #8
 800152e:	f107 0214 	add.w	r2, r7, #20
 8001532:	f107 0118 	add.w	r1, r7, #24
 8001536:	6878      	ldr	r0, [r7, #4]
 8001538:	f7ff fd24 	bl	8000f84 <SPI_SEND_RECV_32>
	misosplit(rx_vector[1], &misosplit_a[0], &misosplit_b[0]);
 800153c:	8afb      	ldrh	r3, [r7, #22]
 800153e:	f107 020c 	add.w	r2, r7, #12
 8001542:	f107 0110 	add.w	r1, r7, #16
 8001546:	4618      	mov	r0, r3
 8001548:	f7ff fcc8 	bl	8000edc <misosplit>
	data_a = misosplit_a[0];
 800154c:	7c3b      	ldrb	r3, [r7, #16]
 800154e:	77fb      	strb	r3, [r7, #31]
	data_b = misosplit_b[0];
 8001550:	7b3b      	ldrb	r3, [r7, #12]
 8001552:	77bb      	strb	r3, [r7, #30]
//	printf("Char Receving Data: %c %c \r\n", data_a, data_b);
	printf("Char Receving Data:        %c \r\n", data_b);
 8001554:	7fbb      	ldrb	r3, [r7, #30]
 8001556:	4619      	mov	r1, r3
 8001558:	4817      	ldr	r0, [pc, #92]	; (80015b8 <INIT_RHD64+0x4b0>)
 800155a:	f019 ff91 	bl	801b480 <iprintf>
	printf("Hex  Receving Data: 0x%x 0x%x \r\n", data_a, data_b);
 800155e:	7ffb      	ldrb	r3, [r7, #31]
 8001560:	7fba      	ldrb	r2, [r7, #30]
 8001562:	4619      	mov	r1, r3
 8001564:	4815      	ldr	r0, [pc, #84]	; (80015bc <INIT_RHD64+0x4b4>)
 8001566:	f019 ff8b 	bl	801b480 <iprintf>


	SPI_SEND_RECV_32(hspi, tx_vector, rx_vector, &last_bit);
 800156a:	f107 0308 	add.w	r3, r7, #8
 800156e:	f107 0214 	add.w	r2, r7, #20
 8001572:	f107 0118 	add.w	r1, r7, #24
 8001576:	6878      	ldr	r0, [r7, #4]
 8001578:	f7ff fd04 	bl	8000f84 <SPI_SEND_RECV_32>
	misosplit(rx_vector[1], &misosplit_a[0], &misosplit_b[0]);
 800157c:	8afb      	ldrh	r3, [r7, #22]
 800157e:	f107 020c 	add.w	r2, r7, #12
 8001582:	f107 0110 	add.w	r1, r7, #16
 8001586:	4618      	mov	r0, r3
 8001588:	f7ff fca8 	bl	8000edc <misosplit>



	data_a = misosplit_a[0];
 800158c:	7c3b      	ldrb	r3, [r7, #16]
 800158e:	77fb      	strb	r3, [r7, #31]
	data_b = misosplit_b[0];
 8001590:	7b3b      	ldrb	r3, [r7, #12]
 8001592:	77bb      	strb	r3, [r7, #30]
	//printf("Char Receving Data: %c %c \r\n", data_a, data_b);
	printf("Char Receving Data:        %c \r\n", data_b);
 8001594:	7fbb      	ldrb	r3, [r7, #30]
 8001596:	4619      	mov	r1, r3
 8001598:	4807      	ldr	r0, [pc, #28]	; (80015b8 <INIT_RHD64+0x4b0>)
 800159a:	f019 ff71 	bl	801b480 <iprintf>
	printf("Hex  Receving Data: 0x%x 0x%x \r\n", data_a, data_b);
 800159e:	7ffb      	ldrb	r3, [r7, #31]
 80015a0:	7fba      	ldrb	r2, [r7, #30]
 80015a2:	4619      	mov	r1, r3
 80015a4:	4805      	ldr	r0, [pc, #20]	; (80015bc <INIT_RHD64+0x4b4>)
 80015a6:	f019 ff6b 	bl	801b480 <iprintf>



	printf("FUCK OFF CA MARCHE !!!! \r\n");
 80015aa:	4805      	ldr	r0, [pc, #20]	; (80015c0 <INIT_RHD64+0x4b8>)
 80015ac:	f019 ffee 	bl	801b58c <puts>

 }
 80015b0:	bf00      	nop
 80015b2:	3728      	adds	r7, #40	; 0x28
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	0801d724 	.word	0x0801d724
 80015bc:	0801d748 	.word	0x0801d748
 80015c0:	0801d76c 	.word	0x0801d76c

080015c4 <TASK_RHD64_SPI_COMMUNICATION_INIT>:




void TASK_RHD64_SPI_COMMUNICATION_INIT (void *arg) {
 80015c4:	b5b0      	push	{r4, r5, r7, lr}
 80015c6:	b088      	sub	sp, #32
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
	//CREATE xQueue
	osThreadDef(RHD64_SPI_handle, RHD64_SPI_COMMUNICATION_task_entry, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*10);
 80015cc:	4b0b      	ldr	r3, [pc, #44]	; (80015fc <TASK_RHD64_SPI_COMMUNICATION_INIT+0x38>)
 80015ce:	f107 040c 	add.w	r4, r7, #12
 80015d2:	461d      	mov	r5, r3
 80015d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015d8:	682b      	ldr	r3, [r5, #0]
 80015da:	6023      	str	r3, [r4, #0]

	if (osThreadCreate(osThread(RHD64_SPI_handle), (void *)arg) == NULL){
 80015dc:	f107 030c 	add.w	r3, r7, #12
 80015e0:	6879      	ldr	r1, [r7, #4]
 80015e2:	4618      	mov	r0, r3
 80015e4:	f008 fc73 	bl	8009ece <osThreadCreate>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d102      	bne.n	80015f4 <TASK_RHD64_SPI_COMMUNICATION_INIT+0x30>
		printf("Booboo created SPI task \r\n");
 80015ee:	4804      	ldr	r0, [pc, #16]	; (8001600 <TASK_RHD64_SPI_COMMUNICATION_INIT+0x3c>)
 80015f0:	f019 ffcc 	bl	801b58c <puts>
	}
}
 80015f4:	bf00      	nop
 80015f6:	3720      	adds	r7, #32
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bdb0      	pop	{r4, r5, r7, pc}
 80015fc:	0801d7a4 	.word	0x0801d7a4
 8001600:	0801d788 	.word	0x0801d788

08001604 <RHD64_SPI_COMMUNICATION_task_entry>:

void RHD64_SPI_COMMUNICATION_task_entry(void const *arg){
 8001604:	b580      	push	{r7, lr}
 8001606:	b0f8      	sub	sp, #480	; 0x1e0
 8001608:	af00      	add	r7, sp, #0
 800160a:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800160e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001612:	6018      	str	r0, [r3, #0]



	uint16_t UDP_vector[32][2];

	uint16_t counter = 0;
 8001614:	2300      	movs	r3, #0
 8001616:	f8a7 31de 	strh.w	r3, [r7, #478]	; 0x1de

	spi_to_udp_t spi_message = {0};
 800161a:	f507 739a 	add.w	r3, r7, #308	; 0x134
 800161e:	2200      	movs	r2, #0
 8001620:	601a      	str	r2, [r3, #0]
 8001622:	605a      	str	r2, [r3, #4]
 8001624:	609a      	str	r2, [r3, #8]

	SPI_HandleTypeDef *hspi;
	hspi = &hspi4;
 8001626:	4b57      	ldr	r3, [pc, #348]	; (8001784 <RHD64_SPI_COMMUNICATION_task_entry+0x180>)
 8001628:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4

	//Activate SPI
	SET_BIT(hspi->Instance->CR1, SPI_CR1_SPE);
 800162c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800163e:	601a      	str	r2, [r3, #0]

	//Activating the 16bit data mode
	SPI4->CR1 |= 0x800;
 8001640:	4b51      	ldr	r3, [pc, #324]	; (8001788 <RHD64_SPI_COMMUNICATION_task_entry+0x184>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a50      	ldr	r2, [pc, #320]	; (8001788 <RHD64_SPI_COMMUNICATION_task_entry+0x184>)
 8001646:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800164a:	6013      	str	r3, [r2, #0]
//			tx_vector[i] = i;
//			tx_vector[i+1] = i+1;
//		}
//	}

	INIT_RHD64(hspi);
 800164c:	f8d7 01d4 	ldr.w	r0, [r7, #468]	; 0x1d4
 8001650:	f7ff fd5a 	bl	8001108 <INIT_RHD64>


#ifndef udp_mode_only

#ifdef spi_master_mode
	spi_flag = true;
 8001654:	4b4d      	ldr	r3, [pc, #308]	; (800178c <RHD64_SPI_COMMUNICATION_task_entry+0x188>)
 8001656:	2201      	movs	r2, #1
 8001658:	701a      	strb	r2, [r3, #0]
//	uint32_t tx_32b[1];
//	tx_16b[0] = 0b1110101100000000;
//	mosimerge(tx_16b[0], tx_32b[0]);
//	printf("Sending Data: %x Receiving %x \r\n",  tx_16b[0], tx_32b[0]);

	spi_message.spi_task_id = 1;
 800165a:	2301      	movs	r3, #1
 800165c:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
	spi_message.message_lenght = sizeof(rx_vector)/2;
 8001660:	2302      	movs	r3, #2
 8001662:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c

	uint16_t convert0_cmd[2];
	convert0_cmd[0] = 0b0000000000000000;
 8001666:	2300      	movs	r3, #0
 8001668:	f8a7 312c 	strh.w	r3, [r7, #300]	; 0x12c
	convert0_cmd[1] = 0b0000000000000000;
 800166c:	2300      	movs	r3, #0
 800166e:	f8a7 312e 	strh.w	r3, [r7, #302]	; 0x12e
	SPI_SEND_RECV_32(hspi, convert0_cmd, rx_vector, last_bit_testing);
 8001672:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001676:	f507 72e6 	add.w	r2, r7, #460	; 0x1cc
 800167a:	f507 7196 	add.w	r1, r7, #300	; 0x12c
 800167e:	f8d7 01d4 	ldr.w	r0, [r7, #468]	; 0x1d4
 8001682:	f7ff fc7f 	bl	8000f84 <SPI_SEND_RECV_32>

	uint16_t convert63_cmd[2];
	convert63_cmd[0] = 0b0000111111111111;
 8001686:	f640 73ff 	movw	r3, #4095	; 0xfff
 800168a:	f8a7 3128 	strh.w	r3, [r7, #296]	; 0x128
	convert63_cmd[1] = 0b0000000000000000;
 800168e:	2300      	movs	r3, #0
 8001690:	f8a7 312a 	strh.w	r3, [r7, #298]	; 0x12a


	tx_vector[0] = 0b1111110011001100;
 8001694:	f64f 43cc 	movw	r3, #64716	; 0xfccc
 8001698:	f8a7 31d0 	strh.w	r3, [r7, #464]	; 0x1d0
	tx_vector[1] = 0b0000000000000000;
 800169c:	2300      	movs	r3, #0
 800169e:	f8a7 31d2 	strh.w	r3, [r7, #466]	; 0x1d2

	uint16_t intan_cmd[5][2];
	intan_cmd[0][0] = 0b1111110011001100;
 80016a2:	f64f 43cc 	movw	r3, #64716	; 0xfccc
 80016a6:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
	intan_cmd[0][1] = 0b0000000000000000;
 80016aa:	2300      	movs	r3, #0
 80016ac:	f8a7 3116 	strh.w	r3, [r7, #278]	; 0x116

	intan_cmd[1][0] = 0b1111110011001111;
 80016b0:	f64f 43cf 	movw	r3, #64719	; 0xfccf
 80016b4:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
	intan_cmd[1][1] = 0b0000000000000000;
 80016b8:	2300      	movs	r3, #0
 80016ba:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
	float temp_value_0;
	float temp_value_32;

    while(1)
	{
    	if (spi_flag){
 80016be:	4b33      	ldr	r3, [pc, #204]	; (800178c <RHD64_SPI_COMMUNICATION_task_entry+0x188>)
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d059      	beq.n	800177a <RHD64_SPI_COMMUNICATION_task_entry+0x176>
    		spi_flag = false;
 80016c6:	4b31      	ldr	r3, [pc, #196]	; (800178c <RHD64_SPI_COMMUNICATION_task_entry+0x188>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	701a      	strb	r2, [r3, #0]
			//SET FULL_TASK_Scope_Pin
			FULL_TASK_SCOPE_Port->BSRR = FULL_TASK_SCOPE_Pin;
 80016cc:	4b30      	ldr	r3, [pc, #192]	; (8001790 <RHD64_SPI_COMMUNICATION_task_entry+0x18c>)
 80016ce:	2220      	movs	r2, #32
 80016d0:	619a      	str	r2, [r3, #24]
			//SET SPI_TASK_Scope_Pin
			SPI_TASK_SCOPE_Port->BSRR = SPI_TASK_SCOPE_Pin;
 80016d2:	4b2f      	ldr	r3, [pc, #188]	; (8001790 <RHD64_SPI_COMMUNICATION_task_entry+0x18c>)
 80016d4:	2240      	movs	r2, #64	; 0x40
 80016d6:	619a      	str	r2, [r3, #24]


			for (int i = 0; i< 32; i++){
 80016d8:	2300      	movs	r3, #0
 80016da:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 80016de:	e022      	b.n	8001726 <RHD64_SPI_COMMUNICATION_task_entry+0x122>
				SPI_SEND_RECV_32(hspi, convert63_cmd, rx_vector, last_bit_testing);
 80016e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80016e4:	f507 72e6 	add.w	r2, r7, #460	; 0x1cc
 80016e8:	f507 7194 	add.w	r1, r7, #296	; 0x128
 80016ec:	f8d7 01d4 	ldr.w	r0, [r7, #468]	; 0x1d4
 80016f0:	f7ff fc48 	bl	8000f84 <SPI_SEND_RECV_32>
				//MSB
				misosplit(rx_vector[0], &DATA_CH32[0], &DATA_CH0[0]);
 80016f4:	f8b7 31cc 	ldrh.w	r3, [r7, #460]	; 0x1cc
 80016f8:	f507 72e2 	add.w	r2, r7, #452	; 0x1c4
 80016fc:	f507 71e0 	add.w	r1, r7, #448	; 0x1c0
 8001700:	4618      	mov	r0, r3
 8001702:	f7ff fbeb 	bl	8000edc <misosplit>
				//LSB
				misosplit(rx_vector[1], &DATA_CH32[1], &DATA_CH0[1]);
 8001706:	f8b7 01ce 	ldrh.w	r0, [r7, #462]	; 0x1ce
 800170a:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 800170e:	1c5a      	adds	r2, r3, #1
 8001710:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8001714:	3301      	adds	r3, #1
 8001716:	4619      	mov	r1, r3
 8001718:	f7ff fbe0 	bl	8000edc <misosplit>
			for (int i = 0; i< 32; i++){
 800171c:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 8001720:	3301      	adds	r3, #1
 8001722:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 8001726:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 800172a:	2b1f      	cmp	r3, #31
 800172c:	ddd8      	ble.n	80016e0 <RHD64_SPI_COMMUNICATION_task_entry+0xdc>
//			printf("CH32 Data: %x - %x | %c \r\n",  DATA_CH32[0], DATA_CH32[1], data_intan);




			spi_message.buffer = (void*)tx_vector;
 800172e:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8001732:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
			if (arg != 0){
 8001736:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800173a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d010      	beq.n	8001766 <RHD64_SPI_COMMUNICATION_task_entry+0x162>
				if(xQueueSend((QueueHandle_t)arg,
 8001744:	f507 719a 	add.w	r1, r7, #308	; 0x134
 8001748:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800174c:	f5a3 70ee 	sub.w	r0, r3, #476	; 0x1dc
 8001750:	2300      	movs	r3, #0
 8001752:	2202      	movs	r2, #2
 8001754:	6800      	ldr	r0, [r0, #0]
 8001756:	f009 f8bd 	bl	800a8d4 <xQueueGenericSend>
 800175a:	4603      	mov	r3, r0
 800175c:	2b01      	cmp	r3, #1
 800175e:	d002      	beq.n	8001766 <RHD64_SPI_COMMUNICATION_task_entry+0x162>
							 (void *)&spi_message,
							 (TickType_t)2) != pdPASS)
				{
					printf("problem in queueSend \r\n");
 8001760:	480c      	ldr	r0, [pc, #48]	; (8001794 <RHD64_SPI_COMMUNICATION_task_entry+0x190>)
 8001762:	f019 ff13 	bl	801b58c <puts>
				}
		  }
		  counter ++;
 8001766:	f8b7 31de 	ldrh.w	r3, [r7, #478]	; 0x1de
 800176a:	3301      	adds	r3, #1
 800176c:	f8a7 31de 	strh.w	r3, [r7, #478]	; 0x1de
		 // printf("%lu \r\n", counter);

		  //RESET SPI_TASK_Scope_Pin
		  SPI_TASK_SCOPE_Port->BSRR = (uint32_t)SPI_TASK_SCOPE_Pin << 16U;
 8001770:	4b07      	ldr	r3, [pc, #28]	; (8001790 <RHD64_SPI_COMMUNICATION_task_entry+0x18c>)
 8001772:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001776:	619a      	str	r2, [r3, #24]
 8001778:	e7a1      	b.n	80016be <RHD64_SPI_COMMUNICATION_task_entry+0xba>
    	}
		else{
			vTaskDelay(1);
 800177a:	2001      	movs	r0, #1
 800177c:	f00a f8cc 	bl	800b918 <vTaskDelay>
    	if (spi_flag){
 8001780:	e79d      	b.n	80016be <RHD64_SPI_COMMUNICATION_task_entry+0xba>
 8001782:	bf00      	nop
 8001784:	20000838 	.word	0x20000838
 8001788:	40013400 	.word	0x40013400
 800178c:	20000000 	.word	0x20000000
 8001790:	40020800 	.word	0x40020800
 8001794:	0801d7b8 	.word	0x0801d7b8

08001798 <INIT_UPD>:



void UDP_TRANSMIT_task_entry(void const *arg);

int INIT_UPD(void){
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0

  res = ipaddr_aton(ip_str_server, &server_addr);
 800179c:	4b1d      	ldr	r3, [pc, #116]	; (8001814 <INIT_UPD+0x7c>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	491d      	ldr	r1, [pc, #116]	; (8001818 <INIT_UPD+0x80>)
 80017a2:	4618      	mov	r0, r3
 80017a4:	f017 ff48 	bl	8019638 <ip4addr_aton>
 80017a8:	4603      	mov	r3, r0
 80017aa:	4a1c      	ldr	r2, [pc, #112]	; (800181c <INIT_UPD+0x84>)
 80017ac:	6013      	str	r3, [r2, #0]

  if (res == 0){
 80017ae:	4b1b      	ldr	r3, [pc, #108]	; (800181c <INIT_UPD+0x84>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d105      	bne.n	80017c2 <INIT_UPD+0x2a>
      printf("Failed to convert string (%s) to IP \r\n", ip_str_server);
 80017b6:	4b17      	ldr	r3, [pc, #92]	; (8001814 <INIT_UPD+0x7c>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4619      	mov	r1, r3
 80017bc:	4818      	ldr	r0, [pc, #96]	; (8001820 <INIT_UPD+0x88>)
 80017be:	f019 fe5f 	bl	801b480 <iprintf>
      //return SL_STATUS_FAIL;
  }
  upcb = udp_new();
 80017c2:	f014 fb5f 	bl	8015e84 <udp_new>
 80017c6:	4603      	mov	r3, r0
 80017c8:	4a16      	ldr	r2, [pc, #88]	; (8001824 <INIT_UPD+0x8c>)
 80017ca:	6013      	str	r3, [r2, #0]

  if (upcb == NULL){
 80017cc:	4b15      	ldr	r3, [pc, #84]	; (8001824 <INIT_UPD+0x8c>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d102      	bne.n	80017da <INIT_UPD+0x42>
      printf("UDP PCB creation failed \r\n");
 80017d4:	4814      	ldr	r0, [pc, #80]	; (8001828 <INIT_UPD+0x90>)
 80017d6:	f019 fed9 	bl	801b58c <puts>
      //return SL_STATUS_FAIL;
  }

  err = udp_connect(upcb, &server_addr, UDP_SERVER_PORT_DEFAULT);
 80017da:	4b12      	ldr	r3, [pc, #72]	; (8001824 <INIT_UPD+0x8c>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f242 7210 	movw	r2, #10000	; 0x2710
 80017e2:	490d      	ldr	r1, [pc, #52]	; (8001818 <INIT_UPD+0x80>)
 80017e4:	4618      	mov	r0, r3
 80017e6:	f014 fa55 	bl	8015c94 <udp_connect>
 80017ea:	4603      	mov	r3, r0
 80017ec:	461a      	mov	r2, r3
 80017ee:	4b0f      	ldr	r3, [pc, #60]	; (800182c <INIT_UPD+0x94>)
 80017f0:	701a      	strb	r2, [r3, #0]

  if (err == ERR_OK){
 80017f2:	4b0e      	ldr	r3, [pc, #56]	; (800182c <INIT_UPD+0x94>)
 80017f4:	f993 3000 	ldrsb.w	r3, [r3]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d105      	bne.n	8001808 <INIT_UPD+0x70>
        printf("Client UDP connected to %s \r\n", ip_str_server);
 80017fc:	4b05      	ldr	r3, [pc, #20]	; (8001814 <INIT_UPD+0x7c>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4619      	mov	r1, r3
 8001802:	480b      	ldr	r0, [pc, #44]	; (8001830 <INIT_UPD+0x98>)
 8001804:	f019 fe3c 	bl	801b480 <iprintf>
  }

  return err;
 8001808:	4b08      	ldr	r3, [pc, #32]	; (800182c <INIT_UPD+0x94>)
 800180a:	f993 3000 	ldrsb.w	r3, [r3]
}
 800180e:	4618      	mov	r0, r3
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	20000004 	.word	0x20000004
 8001818:	200002c0 	.word	0x200002c0
 800181c:	20000008 	.word	0x20000008
 8001820:	0801d7f0 	.word	0x0801d7f0
 8001824:	200002bc 	.word	0x200002bc
 8001828:	0801d818 	.word	0x0801d818
 800182c:	200002c4 	.word	0x200002c4
 8001830:	0801d834 	.word	0x0801d834

08001834 <TASK_UDP_TRANSMIT_INIT>:



void TASK_UDP_TRANSMIT_INIT(void *arg){
 8001834:	b5b0      	push	{r4, r5, r7, lr}
 8001836:	b088      	sub	sp, #32
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]

//	udp_ready = xSemaphoreCreateBinary();

	osThreadDef(UDP_Tx_handle, UDP_TRANSMIT_task_entry, osPriorityAboveNormal, 0, configMINIMAL_STACK_SIZE*10);
 800183c:	4b0b      	ldr	r3, [pc, #44]	; (800186c <TASK_UDP_TRANSMIT_INIT+0x38>)
 800183e:	f107 040c 	add.w	r4, r7, #12
 8001842:	461d      	mov	r5, r3
 8001844:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001846:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001848:	682b      	ldr	r3, [r5, #0]
 800184a:	6023      	str	r3, [r4, #0]

	if (osThreadCreate(osThread(UDP_Tx_handle), (void *) arg) == NULL){
 800184c:	f107 030c 	add.w	r3, r7, #12
 8001850:	6879      	ldr	r1, [r7, #4]
 8001852:	4618      	mov	r0, r3
 8001854:	f008 fb3b 	bl	8009ece <osThreadCreate>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d102      	bne.n	8001864 <TASK_UDP_TRANSMIT_INIT+0x30>
		printf("Booboo creating UDP task \r\n");
 800185e:	4804      	ldr	r0, [pc, #16]	; (8001870 <TASK_UDP_TRANSMIT_INIT+0x3c>)
 8001860:	f019 fe94 	bl	801b58c <puts>
	}


}
 8001864:	bf00      	nop
 8001866:	3720      	adds	r7, #32
 8001868:	46bd      	mov	sp, r7
 800186a:	bdb0      	pop	{r4, r5, r7, pc}
 800186c:	0801d870 	.word	0x0801d870
 8001870:	0801d854 	.word	0x0801d854

08001874 <UDP_TRANSMIT_task_entry>:




void UDP_TRANSMIT_task_entry(void const *arg){
 8001874:	b580      	push	{r7, lr}
 8001876:	b088      	sub	sp, #32
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]

	  struct pbuf *p;
	  uint32_t counter = 0;
 800187c:	2300      	movs	r3, #0
 800187e:	61bb      	str	r3, [r7, #24]
	  spi_to_udp_t udp_message = {0};
 8001880:	f107 030c 	add.w	r3, r7, #12
 8001884:	2200      	movs	r2, #0
 8001886:	601a      	str	r2, [r3, #0]
 8001888:	605a      	str	r2, [r3, #4]
 800188a:	609a      	str	r2, [r3, #8]


	  p = pbuf_alloc(PBUF_TRANSPORT, SPI_DMA_BUFFER_SIZE, PBUF_RAM);
 800188c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8001890:	2140      	movs	r1, #64	; 0x40
 8001892:	2036      	movs	r0, #54	; 0x36
 8001894:	f00d fb50 	bl	800ef38 <pbuf_alloc>
 8001898:	61f8      	str	r0, [r7, #28]

	  while(1){
		if(xQueueReceive((QueueHandle_t)arg, (void *)&udp_message , (TickType_t)1) == pdPASS){
 800189a:	f107 030c 	add.w	r3, r7, #12
 800189e:	2201      	movs	r2, #1
 80018a0:	4619      	mov	r1, r3
 80018a2:	6878      	ldr	r0, [r7, #4]
 80018a4:	f009 fa3c 	bl	800ad20 <xQueueReceive>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	d12b      	bne.n	8001906 <UDP_TRANSMIT_task_entry+0x92>

//			printf("%u \r\n", counter);
//			printf("%02x %02x %02x \r\n",udp_message.data0, udp_message.data1, udp_message.data2);

			 //SET UDP_TASK_Scope_Pin
			UDP_TASK_SCOPE_Port->BSRR = UDP_TASK_SCOPE_Pin;
 80018ae:	4b18      	ldr	r3, [pc, #96]	; (8001910 <UDP_TRANSMIT_task_entry+0x9c>)
 80018b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018b4:	619a      	str	r2, [r3, #24]

			if (p == NULL){
 80018b6:	69fb      	ldr	r3, [r7, #28]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d109      	bne.n	80018d0 <UDP_TRANSMIT_task_entry+0x5c>
				p = pbuf_alloc(PBUF_TRANSPORT, SPI_DMA_BUFFER_SIZE, PBUF_RAM);
 80018bc:	f44f 7220 	mov.w	r2, #640	; 0x280
 80018c0:	2140      	movs	r1, #64	; 0x40
 80018c2:	2036      	movs	r0, #54	; 0x36
 80018c4:	f00d fb38 	bl	800ef38 <pbuf_alloc>
 80018c8:	61f8      	str	r0, [r7, #28]
				printf("p is NULL \r\n");
 80018ca:	4812      	ldr	r0, [pc, #72]	; (8001914 <UDP_TRANSMIT_task_entry+0xa0>)
 80018cc:	f019 fe5e 	bl	801b58c <puts>
			}


			counter ++;
 80018d0:	69bb      	ldr	r3, [r7, #24]
 80018d2:	3301      	adds	r3, #1
 80018d4:	61bb      	str	r3, [r7, #24]
			//pbuf_take_at(p, counter, 2, SPI_DMA_BUFFER_SIZE);
			pbuf_take_at(p, (const void *)udp_message.buffer, SPI_DMA_BUFFER_SIZE, 0);
 80018d6:	6939      	ldr	r1, [r7, #16]
 80018d8:	2300      	movs	r3, #0
 80018da:	2240      	movs	r2, #64	; 0x40
 80018dc:	69f8      	ldr	r0, [r7, #28]
 80018de:	f00e f959 	bl	800fb94 <pbuf_take_at>
//				printf("0x%08x \r\n", ((uint16_t*)udp_message.buffer)[i]);
//			}

			//printf("0x%08x - 0x%08x - 0x%08x\r\n", *(uint16_t*)udp_message.buffer, *(uint16_t*)udp_message.buffer+2, *(uint16_t*)udp_message.buffer+udp_message.message_lenght-1);

			udp_send(upcb, p);
 80018e2:	4b0d      	ldr	r3, [pc, #52]	; (8001918 <UDP_TRANSMIT_task_entry+0xa4>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	69f9      	ldr	r1, [r7, #28]
 80018e8:	4618      	mov	r0, r3
 80018ea:	f013 ff47 	bl	801577c <udp_send>

			//printf("%d \r\n",p->len);

			//RESET UDP_TASK_Scope_Pin
			UDP_TASK_SCOPE_Port->BSRR = (uint32_t)UDP_TASK_SCOPE_Pin << 16U;
 80018ee:	4b08      	ldr	r3, [pc, #32]	; (8001910 <UDP_TRANSMIT_task_entry+0x9c>)
 80018f0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80018f4:	619a      	str	r2, [r3, #24]

			//RESET FULL_TASK_Scope_Pin
			FULL_TASK_SCOPE_Port->BSRR = (uint32_t)FULL_TASK_SCOPE_Pin << 16U;
 80018f6:	4b06      	ldr	r3, [pc, #24]	; (8001910 <UDP_TRANSMIT_task_entry+0x9c>)
 80018f8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80018fc:	619a      	str	r2, [r3, #24]

			//printf("%u \r8n", counter);

			spi_flag = true;
 80018fe:	4b07      	ldr	r3, [pc, #28]	; (800191c <UDP_TRANSMIT_task_entry+0xa8>)
 8001900:	2201      	movs	r2, #1
 8001902:	701a      	strb	r2, [r3, #0]
 8001904:	e7c9      	b.n	800189a <UDP_TRANSMIT_task_entry+0x26>
		}else{
			vTaskDelay(1);
 8001906:	2001      	movs	r0, #1
 8001908:	f00a f806 	bl	800b918 <vTaskDelay>
		if(xQueueReceive((QueueHandle_t)arg, (void *)&udp_message , (TickType_t)1) == pdPASS){
 800190c:	e7c5      	b.n	800189a <UDP_TRANSMIT_task_entry+0x26>
 800190e:	bf00      	nop
 8001910:	40020800 	.word	0x40020800
 8001914:	0801d884 	.word	0x0801d884
 8001918:	200002bc 	.word	0x200002bc
 800191c:	20000000 	.word	0x20000000

08001920 <from_hex>:
 *
 * @param ch Character to convert to integer.
 * @returns Returns integer result.
 ******************************************************************************/
char from_hex(char ch)
{
 8001920:	b480      	push	{r7}
 8001922:	b085      	sub	sp, #20
 8001924:	af00      	add	r7, sp, #0
 8001926:	4603      	mov	r3, r0
 8001928:	71fb      	strb	r3, [r7, #7]
  return isdigit(ch) ? ch - '0' : tolower(ch) - 'a' + 10;
 800192a:	79fb      	ldrb	r3, [r7, #7]
 800192c:	3301      	adds	r3, #1
 800192e:	4a11      	ldr	r2, [pc, #68]	; (8001974 <from_hex+0x54>)
 8001930:	4413      	add	r3, r2
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	f003 0304 	and.w	r3, r3, #4
 8001938:	2b00      	cmp	r3, #0
 800193a:	d003      	beq.n	8001944 <from_hex+0x24>
 800193c:	79fb      	ldrb	r3, [r7, #7]
 800193e:	3b30      	subs	r3, #48	; 0x30
 8001940:	b2db      	uxtb	r3, r3
 8001942:	e011      	b.n	8001968 <from_hex+0x48>
 8001944:	79fb      	ldrb	r3, [r7, #7]
 8001946:	73fb      	strb	r3, [r7, #15]
 8001948:	7bfb      	ldrb	r3, [r7, #15]
 800194a:	3301      	adds	r3, #1
 800194c:	4a09      	ldr	r2, [pc, #36]	; (8001974 <from_hex+0x54>)
 800194e:	4413      	add	r3, r2
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	f003 0303 	and.w	r3, r3, #3
 8001956:	2b01      	cmp	r3, #1
 8001958:	d102      	bne.n	8001960 <from_hex+0x40>
 800195a:	7bfb      	ldrb	r3, [r7, #15]
 800195c:	3320      	adds	r3, #32
 800195e:	e000      	b.n	8001962 <from_hex+0x42>
 8001960:	7bfb      	ldrb	r3, [r7, #15]
 8001962:	b2db      	uxtb	r3, r3
 8001964:	3b57      	subs	r3, #87	; 0x57
 8001966:	b2db      	uxtb	r3, r3
}
 8001968:	4618      	mov	r0, r3
 800196a:	3714      	adds	r7, #20
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr
 8001974:	0806cf9c 	.word	0x0806cf9c

08001978 <url_decode>:
 *
 * @param str String to decode.
 * @returns Success or fail.
 ******************************************************************************/
sl_status_t url_decode(char *str)
{
 8001978:	b590      	push	{r4, r7, lr}
 800197a:	b095      	sub	sp, #84	; 0x54
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  char *pstr = str, rstr[64];
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	64fb      	str	r3, [r7, #76]	; 0x4c
  int i = 0;
 8001984:	2300      	movs	r3, #0
 8001986:	64bb      	str	r3, [r7, #72]	; 0x48

  if (strlen(str) > 64) {
 8001988:	6878      	ldr	r0, [r7, #4]
 800198a:	f7fe fc33 	bl	80001f4 <strlen>
 800198e:	4603      	mov	r3, r0
 8001990:	2b40      	cmp	r3, #64	; 0x40
 8001992:	d947      	bls.n	8001a24 <url_decode+0xac>
    return SL_STATUS_FAIL;
 8001994:	2301      	movs	r3, #1
 8001996:	e056      	b.n	8001a46 <url_decode+0xce>
  }

  while (*pstr) {
    if (*pstr == '%') {
 8001998:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	2b25      	cmp	r3, #37	; 0x25
 800199e:	d128      	bne.n	80019f2 <url_decode+0x7a>
      if (pstr[1] && pstr[2]) {
 80019a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019a2:	3301      	adds	r3, #1
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d039      	beq.n	8001a1e <url_decode+0xa6>
 80019aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019ac:	3302      	adds	r3, #2
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d034      	beq.n	8001a1e <url_decode+0xa6>
        rstr[i++] = from_hex(pstr[1]) << 4 | from_hex(pstr[2]);
 80019b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019b6:	3301      	adds	r3, #1
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	4618      	mov	r0, r3
 80019bc:	f7ff ffb0 	bl	8001920 <from_hex>
 80019c0:	4603      	mov	r3, r0
 80019c2:	011b      	lsls	r3, r3, #4
 80019c4:	b25c      	sxtb	r4, r3
 80019c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019c8:	3302      	adds	r3, #2
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	4618      	mov	r0, r3
 80019ce:	f7ff ffa7 	bl	8001920 <from_hex>
 80019d2:	4603      	mov	r3, r0
 80019d4:	b25b      	sxtb	r3, r3
 80019d6:	4323      	orrs	r3, r4
 80019d8:	b259      	sxtb	r1, r3
 80019da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80019dc:	1c5a      	adds	r2, r3, #1
 80019de:	64ba      	str	r2, [r7, #72]	; 0x48
 80019e0:	b2ca      	uxtb	r2, r1
 80019e2:	3350      	adds	r3, #80	; 0x50
 80019e4:	443b      	add	r3, r7
 80019e6:	f803 2c48 	strb.w	r2, [r3, #-72]
        pstr += 2;
 80019ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019ec:	3302      	adds	r3, #2
 80019ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80019f0:	e015      	b.n	8001a1e <url_decode+0xa6>
      }
    } else if (*pstr == '+') {
 80019f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	2b2b      	cmp	r3, #43	; 0x2b
 80019f8:	d108      	bne.n	8001a0c <url_decode+0x94>
      rstr[i++]  = ' ';
 80019fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80019fc:	1c5a      	adds	r2, r3, #1
 80019fe:	64ba      	str	r2, [r7, #72]	; 0x48
 8001a00:	3350      	adds	r3, #80	; 0x50
 8001a02:	443b      	add	r3, r7
 8001a04:	2220      	movs	r2, #32
 8001a06:	f803 2c48 	strb.w	r2, [r3, #-72]
 8001a0a:	e008      	b.n	8001a1e <url_decode+0xa6>
    } else {
      rstr[i++] = *pstr;
 8001a0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a0e:	1c5a      	adds	r2, r3, #1
 8001a10:	64ba      	str	r2, [r7, #72]	; 0x48
 8001a12:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001a14:	7812      	ldrb	r2, [r2, #0]
 8001a16:	3350      	adds	r3, #80	; 0x50
 8001a18:	443b      	add	r3, r7
 8001a1a:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
    pstr++;
 8001a1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a20:	3301      	adds	r3, #1
 8001a22:	64fb      	str	r3, [r7, #76]	; 0x4c
  while (*pstr) {
 8001a24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d1b5      	bne.n	8001998 <url_decode+0x20>
  }
  rstr[i] = '\0';
 8001a2c:	f107 0208 	add.w	r2, r7, #8
 8001a30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a32:	4413      	add	r3, r2
 8001a34:	2200      	movs	r2, #0
 8001a36:	701a      	strb	r2, [r3, #0]
  strcpy(str, &rstr[0]);
 8001a38:	f107 0308 	add.w	r3, r7, #8
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	f019 fdfa 	bl	801b638 <strcpy>
  return SL_STATUS_OK;
 8001a44:	2300      	movs	r3, #0
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3754      	adds	r7, #84	; 0x54
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd90      	pop	{r4, r7, pc}
	...

08001a50 <wifi_autoconnexion_init>:



void wifi_autoconnexion_init(void)
{
 8001a50:	b5b0      	push	{r4, r5, r7, lr}
 8001a52:	b086      	sub	sp, #24
 8001a54:	af00      	add	r7, sp, #0

	osThreadDef(autoconnect_task, wifi_station_connect_task_entry, osPriorityBelowNormal, 0, 1024);
 8001a56:	4b08      	ldr	r3, [pc, #32]	; (8001a78 <wifi_autoconnexion_init+0x28>)
 8001a58:	1d3c      	adds	r4, r7, #4
 8001a5a:	461d      	mov	r5, r3
 8001a5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a60:	682b      	ldr	r3, [r5, #0]
 8001a62:	6023      	str	r3, [r4, #0]
	osThreadCreate(osThread(autoconnect_task), NULL);
 8001a64:	1d3b      	adds	r3, r7, #4
 8001a66:	2100      	movs	r1, #0
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f008 fa30 	bl	8009ece <osThreadCreate>

}
 8001a6e:	bf00      	nop
 8001a70:	3718      	adds	r7, #24
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bdb0      	pop	{r4, r5, r7, pc}
 8001a76:	bf00      	nop
 8001a78:	0801d8dc 	.word	0x0801d8dc

08001a7c <wifi_station_connect_task_entry>:

/***************************************************************************//**
 * @brief Web server CGI handler to start the station interface.
 ******************************************************************************/
void wifi_station_connect_task_entry(const void *args)
{
 8001a7c:	b590      	push	{r4, r7, lr}
 8001a7e:	b097      	sub	sp, #92	; 0x5c
 8001a80:	af08      	add	r7, sp, #32
 8001a82:	6078      	str	r0, [r7, #4]
  sl_status_t status;
  int num_params = 3;
 8001a84:	2303      	movs	r3, #3
 8001a86:	62fb      	str	r3, [r7, #44]	; 0x2c
  char *pc_param[] ={"ssid", "pwd", "secu"," "};
 8001a88:	4b58      	ldr	r3, [pc, #352]	; (8001bec <wifi_station_connect_task_entry+0x170>)
 8001a8a:	f107 0418 	add.w	r4, r7, #24
 8001a8e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a90:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  char *pc_value[] ={WLAN_SSID_DEFAULT, WLAN_PASSKEY_DEFAULT, "WPA2"," "};
 8001a94:	4b56      	ldr	r3, [pc, #344]	; (8001bf0 <wifi_station_connect_task_entry+0x174>)
 8001a96:	f107 0408 	add.w	r4, r7, #8
 8001a9a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a9c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  int ssid_length = 0, passkey_length = 0;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	637b      	str	r3, [r7, #52]	; 0x34
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	633b      	str	r3, [r7, #48]	; 0x30

  if (num_params == 3) {
 8001aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001aaa:	2b03      	cmp	r3, #3
 8001aac:	f040 8096 	bne.w	8001bdc <wifi_station_connect_task_entry+0x160>
    if (strcmp(pc_param[0], "ssid") == 0)
 8001ab0:	69bb      	ldr	r3, [r7, #24]
 8001ab2:	4950      	ldr	r1, [pc, #320]	; (8001bf4 <wifi_station_connect_task_entry+0x178>)
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f7fe fb93 	bl	80001e0 <strcmp>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d114      	bne.n	8001aea <wifi_station_connect_task_entry+0x6e>
    {
      url_decode(pc_value[0]);
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f7ff ff58 	bl	8001978 <url_decode>
      ssid_length = strlen(pc_value[0]);
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	4618      	mov	r0, r3
 8001acc:	f7fe fb92 	bl	80001f4 <strlen>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	637b      	str	r3, [r7, #52]	; 0x34
      memset(wlan_ssid, 0, 32);
 8001ad4:	2220      	movs	r2, #32
 8001ad6:	2100      	movs	r1, #0
 8001ad8:	4847      	ldr	r0, [pc, #284]	; (8001bf8 <wifi_station_connect_task_entry+0x17c>)
 8001ada:	f018 ff69 	bl	801a9b0 <memset>
      strncpy(wlan_ssid, pc_value[0], ssid_length);
 8001ade:	68bb      	ldr	r3, [r7, #8]
 8001ae0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	4844      	ldr	r0, [pc, #272]	; (8001bf8 <wifi_station_connect_task_entry+0x17c>)
 8001ae6:	f019 fdc3 	bl	801b670 <strncpy>
    }
    if (strcmp(pc_param[1], "pwd") == 0)
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	4943      	ldr	r1, [pc, #268]	; (8001bfc <wifi_station_connect_task_entry+0x180>)
 8001aee:	4618      	mov	r0, r3
 8001af0:	f7fe fb76 	bl	80001e0 <strcmp>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d114      	bne.n	8001b24 <wifi_station_connect_task_entry+0xa8>
    {
      url_decode(pc_value[1]);
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7ff ff3b 	bl	8001978 <url_decode>
      passkey_length = strlen(pc_value[1]);
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	4618      	mov	r0, r3
 8001b06:	f7fe fb75 	bl	80001f4 <strlen>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	633b      	str	r3, [r7, #48]	; 0x30
      memset(wlan_passkey, 0, 64);
 8001b0e:	2240      	movs	r2, #64	; 0x40
 8001b10:	2100      	movs	r1, #0
 8001b12:	483b      	ldr	r0, [pc, #236]	; (8001c00 <wifi_station_connect_task_entry+0x184>)
 8001b14:	f018 ff4c 	bl	801a9b0 <memset>
      strncpy(wlan_passkey, pc_value[1], passkey_length);
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	4838      	ldr	r0, [pc, #224]	; (8001c00 <wifi_station_connect_task_entry+0x184>)
 8001b20:	f019 fda6 	bl	801b670 <strncpy>
    }
    if (strcmp(pc_param[2], "secu") == 0)
 8001b24:	6a3b      	ldr	r3, [r7, #32]
 8001b26:	4937      	ldr	r1, [pc, #220]	; (8001c04 <wifi_station_connect_task_entry+0x188>)
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f7fe fb59 	bl	80001e0 <strcmp>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d12e      	bne.n	8001b92 <wifi_station_connect_task_entry+0x116>
    {
      url_decode(pc_value[2]);
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	4618      	mov	r0, r3
 8001b38:	f7ff ff1e 	bl	8001978 <url_decode>
      if ((strcmp(pc_value[2], "WPA2") == 0) || (strcmp(pc_value[2], "WPA") == 0))
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	4932      	ldr	r1, [pc, #200]	; (8001c08 <wifi_station_connect_task_entry+0x18c>)
 8001b40:	4618      	mov	r0, r3
 8001b42:	f7fe fb4d 	bl	80001e0 <strcmp>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d007      	beq.n	8001b5c <wifi_station_connect_task_entry+0xe0>
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	492f      	ldr	r1, [pc, #188]	; (8001c0c <wifi_station_connect_task_entry+0x190>)
 8001b50:	4618      	mov	r0, r3
 8001b52:	f7fe fb45 	bl	80001e0 <strcmp>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d103      	bne.n	8001b64 <wifi_station_connect_task_entry+0xe8>
      {
        wlan_security = WFM_SECURITY_MODE_WPA2_WPA1_PSK;
 8001b5c:	4b2c      	ldr	r3, [pc, #176]	; (8001c10 <wifi_station_connect_task_entry+0x194>)
 8001b5e:	2202      	movs	r2, #2
 8001b60:	701a      	strb	r2, [r3, #0]
 8001b62:	e016      	b.n	8001b92 <wifi_station_connect_task_entry+0x116>
      }else if (strcmp(pc_value[2], "WEP") == 0)
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	492b      	ldr	r1, [pc, #172]	; (8001c14 <wifi_station_connect_task_entry+0x198>)
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f7fe fb39 	bl	80001e0 <strcmp>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d103      	bne.n	8001b7c <wifi_station_connect_task_entry+0x100>
      {
        wlan_security = WFM_SECURITY_MODE_WEP;
 8001b74:	4b26      	ldr	r3, [pc, #152]	; (8001c10 <wifi_station_connect_task_entry+0x194>)
 8001b76:	2201      	movs	r2, #1
 8001b78:	701a      	strb	r2, [r3, #0]
 8001b7a:	e00a      	b.n	8001b92 <wifi_station_connect_task_entry+0x116>
      }else if (strcmp(pc_value[2], "OPEN") == 0)
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	4926      	ldr	r1, [pc, #152]	; (8001c18 <wifi_station_connect_task_entry+0x19c>)
 8001b80:	4618      	mov	r0, r3
 8001b82:	f7fe fb2d 	bl	80001e0 <strcmp>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d102      	bne.n	8001b92 <wifi_station_connect_task_entry+0x116>
      {
        wlan_security = WFM_SECURITY_MODE_OPEN;
 8001b8c:	4b20      	ldr	r3, [pc, #128]	; (8001c10 <wifi_station_connect_task_entry+0x194>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	701a      	strb	r2, [r3, #0]
      }
    }
    if (!(wifi.state & SL_WFX_STA_INTERFACE_CONNECTED))
 8001b92:	4b22      	ldr	r3, [pc, #136]	; (8001c1c <wifi_station_connect_task_entry+0x1a0>)
 8001b94:	f893 3222 	ldrb.w	r3, [r3, #546]	; 0x222
 8001b98:	f003 0302 	and.w	r3, r3, #2
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d120      	bne.n	8001be2 <wifi_station_connect_task_entry+0x166>
    {

      status = sl_wfx_send_join_command((uint8_t*) wlan_ssid, ssid_length,
 8001ba0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001ba2:	4b1b      	ldr	r3, [pc, #108]	; (8001c10 <wifi_station_connect_task_entry+0x194>)
 8001ba4:	781b      	ldrb	r3, [r3, #0]
 8001ba6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001ba8:	b292      	uxth	r2, r2
 8001baa:	2000      	movs	r0, #0
 8001bac:	9006      	str	r0, [sp, #24]
 8001bae:	2000      	movs	r0, #0
 8001bb0:	9005      	str	r0, [sp, #20]
 8001bb2:	9204      	str	r2, [sp, #16]
 8001bb4:	4a12      	ldr	r2, [pc, #72]	; (8001c00 <wifi_station_connect_task_entry+0x184>)
 8001bb6:	9203      	str	r2, [sp, #12]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	9202      	str	r2, [sp, #8]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	9201      	str	r2, [sp, #4]
 8001bc0:	9300      	str	r3, [sp, #0]
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	480c      	ldr	r0, [pc, #48]	; (8001bf8 <wifi_station_connect_task_entry+0x17c>)
 8001bc8:	f006 f8a8 	bl	8007d1c <sl_wfx_send_join_command>
 8001bcc:	62b8      	str	r0, [r7, #40]	; 0x28
                                        NULL, 0, wlan_security, 0, 0,
                                        (uint8_t*) wlan_passkey, passkey_length,
                                        NULL, 0);\

      if(status != SL_STATUS_OK)
 8001bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d006      	beq.n	8001be2 <wifi_station_connect_task_entry+0x166>
      {
        printf("Connection command error\r\n");
 8001bd4:	4812      	ldr	r0, [pc, #72]	; (8001c20 <wifi_station_connect_task_entry+0x1a4>)
 8001bd6:	f019 fcd9 	bl	801b58c <puts>
 8001bda:	e002      	b.n	8001be2 <wifi_station_connect_task_entry+0x166>
        //strcpy(event_log, "Connection command error");
      }
    }
  }else{
    printf("Invalid Connection Request\r\n");
 8001bdc:	4811      	ldr	r0, [pc, #68]	; (8001c24 <wifi_station_connect_task_entry+0x1a8>)
 8001bde:	f019 fcd5 	bl	801b58c <puts>
  }

  // Delete the init thread.
  while(1){
	  osThreadTerminate(NULL);
 8001be2:	2000      	movs	r0, #0
 8001be4:	f008 f99a 	bl	8009f1c <osThreadTerminate>
 8001be8:	e7fb      	b.n	8001be2 <wifi_station_connect_task_entry+0x166>
 8001bea:	bf00      	nop
 8001bec:	0801d938 	.word	0x0801d938
 8001bf0:	0801d948 	.word	0x0801d948
 8001bf4:	0801d8a4 	.word	0x0801d8a4
 8001bf8:	2000000c 	.word	0x2000000c
 8001bfc:	0801d8ac 	.word	0x0801d8ac
 8001c00:	20000030 	.word	0x20000030
 8001c04:	0801d8b0 	.word	0x0801d8b0
 8001c08:	0801d8d4 	.word	0x0801d8d4
 8001c0c:	0801d8f0 	.word	0x0801d8f0
 8001c10:	20000071 	.word	0x20000071
 8001c14:	0801d8f4 	.word	0x0801d8f4
 8001c18:	0801d8f8 	.word	0x0801d8f8
 8001c1c:	200002c8 	.word	0x200002c8
 8001c20:	0801d900 	.word	0x0801d900
 8001c24:	0801d91c 	.word	0x0801d91c

08001c28 <dhcpclient_set_link_state>:
 * Notify DHCP client task about the wifi status
 *
 * @param link_up link status
 ******************************************************************************/
void dhcpclient_set_link_state(int link_up)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  if (link_up) {
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d003      	beq.n	8001c3e <dhcpclient_set_link_state+0x16>
    dhcp_state = DHCP_START;
 8001c36:	4b06      	ldr	r3, [pc, #24]	; (8001c50 <dhcpclient_set_link_state+0x28>)
 8001c38:	2201      	movs	r2, #1
 8001c3a:	701a      	strb	r2, [r3, #0]
  } else {
    /* Update DHCP state machine */
    dhcp_state = DHCP_LINK_DOWN;
  }
}
 8001c3c:	e002      	b.n	8001c44 <dhcpclient_set_link_state+0x1c>
    dhcp_state = DHCP_LINK_DOWN;
 8001c3e:	4b04      	ldr	r3, [pc, #16]	; (8001c50 <dhcpclient_set_link_state+0x28>)
 8001c40:	2205      	movs	r2, #5
 8001c42:	701a      	strb	r2, [r3, #0]
}
 8001c44:	bf00      	nop
 8001c46:	370c      	adds	r7, #12
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr
 8001c50:	200004ec 	.word	0x200004ec

08001c54 <dhcpclient_start>:
 * DHCP client task.
 *
 * @param arg Network interface
 ******************************************************************************/
void dhcpclient_start(void const * argument)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b08a      	sub	sp, #40	; 0x28
 8001c58:	af02      	add	r7, sp, #8
 8001c5a:	6078      	str	r0, [r7, #4]
  struct netif *netif = (struct netif *) argument;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	61fb      	str	r3, [r7, #28]
  struct dhcp *dhcp;

  for (;;)
  {

    switch (dhcp_state)
 8001c60:	4b9a      	ldr	r3, [pc, #616]	; (8001ecc <dhcpclient_start+0x278>)
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	b2db      	uxtb	r3, r3
 8001c66:	2b05      	cmp	r3, #5
 8001c68:	f000 811f 	beq.w	8001eaa <dhcpclient_start+0x256>
 8001c6c:	2b05      	cmp	r3, #5
 8001c6e:	f300 8125 	bgt.w	8001ebc <dhcpclient_start+0x268>
 8001c72:	2b01      	cmp	r3, #1
 8001c74:	d002      	beq.n	8001c7c <dhcpclient_start+0x28>
 8001c76:	2b02      	cmp	r3, #2
 8001c78:	d012      	beq.n	8001ca0 <dhcpclient_start+0x4c>
      /* Stop DHCP */
      netifapi_dhcp_stop(netif);
      dhcp_state = DHCP_OFF; 
    }
    break;
    default: break;
 8001c7a:	e11f      	b.n	8001ebc <dhcpclient_start+0x268>
        ip_addr_set_zero_ip4(&netif->ip_addr);
 8001c7c:	69fb      	ldr	r3, [r7, #28]
 8001c7e:	2200      	movs	r2, #0
 8001c80:	605a      	str	r2, [r3, #4]
        ip_addr_set_zero_ip4(&netif->netmask);
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	2200      	movs	r2, #0
 8001c86:	609a      	str	r2, [r3, #8]
        ip_addr_set_zero_ip4(&netif->gw);       
 8001c88:	69fb      	ldr	r3, [r7, #28]
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	60da      	str	r2, [r3, #12]
        netifapi_dhcp_start(netif);
 8001c8e:	4a90      	ldr	r2, [pc, #576]	; (8001ed0 <dhcpclient_start+0x27c>)
 8001c90:	2100      	movs	r1, #0
 8001c92:	69f8      	ldr	r0, [r7, #28]
 8001c94:	f00b fd08 	bl	800d6a8 <netifapi_netif_common>
        dhcp_state = DHCP_WAIT_ADDRESS;
 8001c98:	4b8c      	ldr	r3, [pc, #560]	; (8001ecc <dhcpclient_start+0x278>)
 8001c9a:	2202      	movs	r2, #2
 8001c9c:	701a      	strb	r2, [r3, #0]
      break;
 8001c9e:	e110      	b.n	8001ec2 <dhcpclient_start+0x26e>
        if (dhcp_supplied_address(netif)) 
 8001ca0:	69f8      	ldr	r0, [r7, #28]
 8001ca2:	f015 ffbb 	bl	8017c1c <dhcp_supplied_address>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d018      	beq.n	8001cde <dhcpclient_start+0x8a>
          dhcp_state = DHCP_ADDRESS_ASSIGNED;	
 8001cac:	4b87      	ldr	r3, [pc, #540]	; (8001ecc <dhcpclient_start+0x278>)
 8001cae:	2203      	movs	r2, #3
 8001cb0:	701a      	strb	r2, [r3, #0]
                  sta_netif.ip_addr.addr & 0xff,
 8001cb2:	4b88      	ldr	r3, [pc, #544]	; (8001ed4 <dhcpclient_start+0x280>)
 8001cb4:	685b      	ldr	r3, [r3, #4]
          printf("IP address : %lu.%lu.%lu.%lu\r\n",
 8001cb6:	b2d9      	uxtb	r1, r3
                  (sta_netif.ip_addr.addr >> 8) & 0xff,
 8001cb8:	4b86      	ldr	r3, [pc, #536]	; (8001ed4 <dhcpclient_start+0x280>)
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	0a1b      	lsrs	r3, r3, #8
          printf("IP address : %lu.%lu.%lu.%lu\r\n",
 8001cbe:	b2da      	uxtb	r2, r3
                  (sta_netif.ip_addr.addr >> 16) & 0xff,
 8001cc0:	4b84      	ldr	r3, [pc, #528]	; (8001ed4 <dhcpclient_start+0x280>)
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	0c1b      	lsrs	r3, r3, #16
          printf("IP address : %lu.%lu.%lu.%lu\r\n",
 8001cc6:	b2d8      	uxtb	r0, r3
                  (sta_netif.ip_addr.addr >> 24) & 0xff);
 8001cc8:	4b82      	ldr	r3, [pc, #520]	; (8001ed4 <dhcpclient_start+0x280>)
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	0e1b      	lsrs	r3, r3, #24
          printf("IP address : %lu.%lu.%lu.%lu\r\n",
 8001cce:	9300      	str	r3, [sp, #0]
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	4881      	ldr	r0, [pc, #516]	; (8001ed8 <dhcpclient_start+0x284>)
 8001cd4:	f019 fbd4 	bl	801b480 <iprintf>
          start_app_task();
 8001cd8:	f7ff f9f2 	bl	80010c0 <start_app_task>
      break;
 8001cdc:	e0f0      	b.n	8001ec0 <dhcpclient_start+0x26c>
          dhcp = (struct dhcp *)netif_get_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP);
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce2:	61bb      	str	r3, [r7, #24]
          if (dhcp->tries > MAX_DHCP_TRIES)
 8001ce4:	69bb      	ldr	r3, [r7, #24]
 8001ce6:	799b      	ldrb	r3, [r3, #6]
 8001ce8:	2b04      	cmp	r3, #4
 8001cea:	f240 80e9 	bls.w	8001ec0 <dhcpclient_start+0x26c>
            dhcp_state = DHCP_TIMEOUT;
 8001cee:	4b77      	ldr	r3, [pc, #476]	; (8001ecc <dhcpclient_start+0x278>)
 8001cf0:	2204      	movs	r2, #4
 8001cf2:	701a      	strb	r2, [r3, #0]
            netifapi_dhcp_stop(netif);
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	4979      	ldr	r1, [pc, #484]	; (8001edc <dhcpclient_start+0x288>)
 8001cf8:	69f8      	ldr	r0, [r7, #28]
 8001cfa:	f00b fcd5 	bl	800d6a8 <netifapi_netif_common>
            IP_ADDR4(&ipaddr, sta_ip_addr0 , sta_ip_addr1 , sta_ip_addr2 , sta_ip_addr3 );
 8001cfe:	4b78      	ldr	r3, [pc, #480]	; (8001ee0 <dhcpclient_start+0x28c>)
 8001d00:	781b      	ldrb	r3, [r3, #0]
 8001d02:	061a      	lsls	r2, r3, #24
 8001d04:	4b77      	ldr	r3, [pc, #476]	; (8001ee4 <dhcpclient_start+0x290>)
 8001d06:	781b      	ldrb	r3, [r3, #0]
 8001d08:	041b      	lsls	r3, r3, #16
 8001d0a:	431a      	orrs	r2, r3
 8001d0c:	4b76      	ldr	r3, [pc, #472]	; (8001ee8 <dhcpclient_start+0x294>)
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	021b      	lsls	r3, r3, #8
 8001d12:	4313      	orrs	r3, r2
 8001d14:	4a75      	ldr	r2, [pc, #468]	; (8001eec <dhcpclient_start+0x298>)
 8001d16:	7812      	ldrb	r2, [r2, #0]
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	061a      	lsls	r2, r3, #24
 8001d1c:	4b70      	ldr	r3, [pc, #448]	; (8001ee0 <dhcpclient_start+0x28c>)
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	0619      	lsls	r1, r3, #24
 8001d22:	4b70      	ldr	r3, [pc, #448]	; (8001ee4 <dhcpclient_start+0x290>)
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	041b      	lsls	r3, r3, #16
 8001d28:	4319      	orrs	r1, r3
 8001d2a:	4b6f      	ldr	r3, [pc, #444]	; (8001ee8 <dhcpclient_start+0x294>)
 8001d2c:	781b      	ldrb	r3, [r3, #0]
 8001d2e:	021b      	lsls	r3, r3, #8
 8001d30:	430b      	orrs	r3, r1
 8001d32:	496e      	ldr	r1, [pc, #440]	; (8001eec <dhcpclient_start+0x298>)
 8001d34:	7809      	ldrb	r1, [r1, #0]
 8001d36:	430b      	orrs	r3, r1
 8001d38:	021b      	lsls	r3, r3, #8
 8001d3a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001d3e:	431a      	orrs	r2, r3
 8001d40:	4b67      	ldr	r3, [pc, #412]	; (8001ee0 <dhcpclient_start+0x28c>)
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	0619      	lsls	r1, r3, #24
 8001d46:	4b67      	ldr	r3, [pc, #412]	; (8001ee4 <dhcpclient_start+0x290>)
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	041b      	lsls	r3, r3, #16
 8001d4c:	4319      	orrs	r1, r3
 8001d4e:	4b66      	ldr	r3, [pc, #408]	; (8001ee8 <dhcpclient_start+0x294>)
 8001d50:	781b      	ldrb	r3, [r3, #0]
 8001d52:	021b      	lsls	r3, r3, #8
 8001d54:	430b      	orrs	r3, r1
 8001d56:	4965      	ldr	r1, [pc, #404]	; (8001eec <dhcpclient_start+0x298>)
 8001d58:	7809      	ldrb	r1, [r1, #0]
 8001d5a:	430b      	orrs	r3, r1
 8001d5c:	0a1b      	lsrs	r3, r3, #8
 8001d5e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8001d62:	431a      	orrs	r2, r3
 8001d64:	4b5e      	ldr	r3, [pc, #376]	; (8001ee0 <dhcpclient_start+0x28c>)
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	0619      	lsls	r1, r3, #24
 8001d6a:	4b5e      	ldr	r3, [pc, #376]	; (8001ee4 <dhcpclient_start+0x290>)
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	041b      	lsls	r3, r3, #16
 8001d70:	4319      	orrs	r1, r3
 8001d72:	4b5d      	ldr	r3, [pc, #372]	; (8001ee8 <dhcpclient_start+0x294>)
 8001d74:	781b      	ldrb	r3, [r3, #0]
 8001d76:	021b      	lsls	r3, r3, #8
 8001d78:	430b      	orrs	r3, r1
 8001d7a:	495c      	ldr	r1, [pc, #368]	; (8001eec <dhcpclient_start+0x298>)
 8001d7c:	7809      	ldrb	r1, [r1, #0]
 8001d7e:	430b      	orrs	r3, r1
 8001d80:	0e1b      	lsrs	r3, r3, #24
 8001d82:	4313      	orrs	r3, r2
 8001d84:	617b      	str	r3, [r7, #20]
            IP_ADDR4(&netmask, sta_netmask_addr0, sta_netmask_addr1, sta_netmask_addr2, sta_netmask_addr3);
 8001d86:	4b5a      	ldr	r3, [pc, #360]	; (8001ef0 <dhcpclient_start+0x29c>)
 8001d88:	781b      	ldrb	r3, [r3, #0]
 8001d8a:	061a      	lsls	r2, r3, #24
 8001d8c:	4b59      	ldr	r3, [pc, #356]	; (8001ef4 <dhcpclient_start+0x2a0>)
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	041b      	lsls	r3, r3, #16
 8001d92:	431a      	orrs	r2, r3
 8001d94:	4b58      	ldr	r3, [pc, #352]	; (8001ef8 <dhcpclient_start+0x2a4>)
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	021b      	lsls	r3, r3, #8
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	4a57      	ldr	r2, [pc, #348]	; (8001efc <dhcpclient_start+0x2a8>)
 8001d9e:	7812      	ldrb	r2, [r2, #0]
 8001da0:	4313      	orrs	r3, r2
 8001da2:	061a      	lsls	r2, r3, #24
 8001da4:	4b52      	ldr	r3, [pc, #328]	; (8001ef0 <dhcpclient_start+0x29c>)
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	0619      	lsls	r1, r3, #24
 8001daa:	4b52      	ldr	r3, [pc, #328]	; (8001ef4 <dhcpclient_start+0x2a0>)
 8001dac:	781b      	ldrb	r3, [r3, #0]
 8001dae:	041b      	lsls	r3, r3, #16
 8001db0:	4319      	orrs	r1, r3
 8001db2:	4b51      	ldr	r3, [pc, #324]	; (8001ef8 <dhcpclient_start+0x2a4>)
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	021b      	lsls	r3, r3, #8
 8001db8:	430b      	orrs	r3, r1
 8001dba:	4950      	ldr	r1, [pc, #320]	; (8001efc <dhcpclient_start+0x2a8>)
 8001dbc:	7809      	ldrb	r1, [r1, #0]
 8001dbe:	430b      	orrs	r3, r1
 8001dc0:	021b      	lsls	r3, r3, #8
 8001dc2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001dc6:	431a      	orrs	r2, r3
 8001dc8:	4b49      	ldr	r3, [pc, #292]	; (8001ef0 <dhcpclient_start+0x29c>)
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	0619      	lsls	r1, r3, #24
 8001dce:	4b49      	ldr	r3, [pc, #292]	; (8001ef4 <dhcpclient_start+0x2a0>)
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	041b      	lsls	r3, r3, #16
 8001dd4:	4319      	orrs	r1, r3
 8001dd6:	4b48      	ldr	r3, [pc, #288]	; (8001ef8 <dhcpclient_start+0x2a4>)
 8001dd8:	781b      	ldrb	r3, [r3, #0]
 8001dda:	021b      	lsls	r3, r3, #8
 8001ddc:	430b      	orrs	r3, r1
 8001dde:	4947      	ldr	r1, [pc, #284]	; (8001efc <dhcpclient_start+0x2a8>)
 8001de0:	7809      	ldrb	r1, [r1, #0]
 8001de2:	430b      	orrs	r3, r1
 8001de4:	0a1b      	lsrs	r3, r3, #8
 8001de6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8001dea:	431a      	orrs	r2, r3
 8001dec:	4b40      	ldr	r3, [pc, #256]	; (8001ef0 <dhcpclient_start+0x29c>)
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	0619      	lsls	r1, r3, #24
 8001df2:	4b40      	ldr	r3, [pc, #256]	; (8001ef4 <dhcpclient_start+0x2a0>)
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	041b      	lsls	r3, r3, #16
 8001df8:	4319      	orrs	r1, r3
 8001dfa:	4b3f      	ldr	r3, [pc, #252]	; (8001ef8 <dhcpclient_start+0x2a4>)
 8001dfc:	781b      	ldrb	r3, [r3, #0]
 8001dfe:	021b      	lsls	r3, r3, #8
 8001e00:	430b      	orrs	r3, r1
 8001e02:	493e      	ldr	r1, [pc, #248]	; (8001efc <dhcpclient_start+0x2a8>)
 8001e04:	7809      	ldrb	r1, [r1, #0]
 8001e06:	430b      	orrs	r3, r1
 8001e08:	0e1b      	lsrs	r3, r3, #24
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	613b      	str	r3, [r7, #16]
            IP_ADDR4(&gw, sta_gw_addr0, sta_gw_addr1, sta_gw_addr2, sta_gw_addr3);
 8001e0e:	4b3c      	ldr	r3, [pc, #240]	; (8001f00 <dhcpclient_start+0x2ac>)
 8001e10:	781b      	ldrb	r3, [r3, #0]
 8001e12:	061a      	lsls	r2, r3, #24
 8001e14:	4b3b      	ldr	r3, [pc, #236]	; (8001f04 <dhcpclient_start+0x2b0>)
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	041b      	lsls	r3, r3, #16
 8001e1a:	431a      	orrs	r2, r3
 8001e1c:	4b3a      	ldr	r3, [pc, #232]	; (8001f08 <dhcpclient_start+0x2b4>)
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	021b      	lsls	r3, r3, #8
 8001e22:	4313      	orrs	r3, r2
 8001e24:	4a39      	ldr	r2, [pc, #228]	; (8001f0c <dhcpclient_start+0x2b8>)
 8001e26:	7812      	ldrb	r2, [r2, #0]
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	061a      	lsls	r2, r3, #24
 8001e2c:	4b34      	ldr	r3, [pc, #208]	; (8001f00 <dhcpclient_start+0x2ac>)
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	0619      	lsls	r1, r3, #24
 8001e32:	4b34      	ldr	r3, [pc, #208]	; (8001f04 <dhcpclient_start+0x2b0>)
 8001e34:	781b      	ldrb	r3, [r3, #0]
 8001e36:	041b      	lsls	r3, r3, #16
 8001e38:	4319      	orrs	r1, r3
 8001e3a:	4b33      	ldr	r3, [pc, #204]	; (8001f08 <dhcpclient_start+0x2b4>)
 8001e3c:	781b      	ldrb	r3, [r3, #0]
 8001e3e:	021b      	lsls	r3, r3, #8
 8001e40:	430b      	orrs	r3, r1
 8001e42:	4932      	ldr	r1, [pc, #200]	; (8001f0c <dhcpclient_start+0x2b8>)
 8001e44:	7809      	ldrb	r1, [r1, #0]
 8001e46:	430b      	orrs	r3, r1
 8001e48:	021b      	lsls	r3, r3, #8
 8001e4a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001e4e:	431a      	orrs	r2, r3
 8001e50:	4b2b      	ldr	r3, [pc, #172]	; (8001f00 <dhcpclient_start+0x2ac>)
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	0619      	lsls	r1, r3, #24
 8001e56:	4b2b      	ldr	r3, [pc, #172]	; (8001f04 <dhcpclient_start+0x2b0>)
 8001e58:	781b      	ldrb	r3, [r3, #0]
 8001e5a:	041b      	lsls	r3, r3, #16
 8001e5c:	4319      	orrs	r1, r3
 8001e5e:	4b2a      	ldr	r3, [pc, #168]	; (8001f08 <dhcpclient_start+0x2b4>)
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	021b      	lsls	r3, r3, #8
 8001e64:	430b      	orrs	r3, r1
 8001e66:	4929      	ldr	r1, [pc, #164]	; (8001f0c <dhcpclient_start+0x2b8>)
 8001e68:	7809      	ldrb	r1, [r1, #0]
 8001e6a:	430b      	orrs	r3, r1
 8001e6c:	0a1b      	lsrs	r3, r3, #8
 8001e6e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8001e72:	431a      	orrs	r2, r3
 8001e74:	4b22      	ldr	r3, [pc, #136]	; (8001f00 <dhcpclient_start+0x2ac>)
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	0619      	lsls	r1, r3, #24
 8001e7a:	4b22      	ldr	r3, [pc, #136]	; (8001f04 <dhcpclient_start+0x2b0>)
 8001e7c:	781b      	ldrb	r3, [r3, #0]
 8001e7e:	041b      	lsls	r3, r3, #16
 8001e80:	4319      	orrs	r1, r3
 8001e82:	4b21      	ldr	r3, [pc, #132]	; (8001f08 <dhcpclient_start+0x2b4>)
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	021b      	lsls	r3, r3, #8
 8001e88:	430b      	orrs	r3, r1
 8001e8a:	4920      	ldr	r1, [pc, #128]	; (8001f0c <dhcpclient_start+0x2b8>)
 8001e8c:	7809      	ldrb	r1, [r1, #0]
 8001e8e:	430b      	orrs	r3, r1
 8001e90:	0e1b      	lsrs	r3, r3, #24
 8001e92:	4313      	orrs	r3, r2
 8001e94:	60fb      	str	r3, [r7, #12]
            netif_set_addr(netif, ip_2_ip4(&ipaddr), ip_2_ip4(&netmask), ip_2_ip4(&gw));
 8001e96:	f107 030c 	add.w	r3, r7, #12
 8001e9a:	f107 0210 	add.w	r2, r7, #16
 8001e9e:	f107 0114 	add.w	r1, r7, #20
 8001ea2:	69f8      	ldr	r0, [r7, #28]
 8001ea4:	f00c fe30 	bl	800eb08 <netif_set_addr>
      break;
 8001ea8:	e00a      	b.n	8001ec0 <dhcpclient_start+0x26c>
      netifapi_dhcp_stop(netif);
 8001eaa:	2200      	movs	r2, #0
 8001eac:	490b      	ldr	r1, [pc, #44]	; (8001edc <dhcpclient_start+0x288>)
 8001eae:	69f8      	ldr	r0, [r7, #28]
 8001eb0:	f00b fbfa 	bl	800d6a8 <netifapi_netif_common>
      dhcp_state = DHCP_OFF; 
 8001eb4:	4b05      	ldr	r3, [pc, #20]	; (8001ecc <dhcpclient_start+0x278>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	701a      	strb	r2, [r3, #0]
    break;
 8001eba:	e002      	b.n	8001ec2 <dhcpclient_start+0x26e>
    default: break;
 8001ebc:	bf00      	nop
 8001ebe:	e000      	b.n	8001ec2 <dhcpclient_start+0x26e>
      break;
 8001ec0:	bf00      	nop
    }
    
    /* wait 1000 ms THIS IS AN INTERRUPT THAT COULD BE DELETED*/
    vTaskDelay(1000);
 8001ec2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001ec6:	f009 fd27 	bl	800b918 <vTaskDelay>
    switch (dhcp_state)
 8001eca:	e6c9      	b.n	8001c60 <dhcpclient_start+0xc>
 8001ecc:	200004ec 	.word	0x200004ec
 8001ed0:	0801660d 	.word	0x0801660d
 8001ed4:	20000748 	.word	0x20000748
 8001ed8:	0801d958 	.word	0x0801d958
 8001edc:	080170cd 	.word	0x080170cd
 8001ee0:	2000009c 	.word	0x2000009c
 8001ee4:	2000009d 	.word	0x2000009d
 8001ee8:	200007ea 	.word	0x200007ea
 8001eec:	2000009e 	.word	0x2000009e
 8001ef0:	2000009f 	.word	0x2000009f
 8001ef4:	200000a0 	.word	0x200000a0
 8001ef8:	200000a1 	.word	0x200000a1
 8001efc:	200007eb 	.word	0x200007eb
 8001f00:	200007ec 	.word	0x200007ec
 8001f04:	200007ed 	.word	0x200007ed
 8001f08:	200007ee 	.word	0x200007ee
 8001f0c:	200007ef 	.word	0x200007ef

08001f10 <dhcpserver_remove_mac>:
 * Remove mac address from list of clients.
 *
 * @param mac MAC address to remove.
 ******************************************************************************/
void dhcpserver_remove_mac(struct eth_addr *mac)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b085      	sub	sp, #20
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  for (uint32_t i = 0; i < DHCPS_MAX_CLIENT; ++i) {
 8001f18:	2300      	movs	r3, #0
 8001f1a:	60fb      	str	r3, [r7, #12]
 8001f1c:	e08a      	b.n	8002034 <dhcpserver_remove_mac+0x124>
    if (saved_mac[i].addr[0] == mac->addr[0] && saved_mac[i].addr[1] == mac->addr[1]
 8001f1e:	494b      	ldr	r1, [pc, #300]	; (800204c <dhcpserver_remove_mac+0x13c>)
 8001f20:	68fa      	ldr	r2, [r7, #12]
 8001f22:	4613      	mov	r3, r2
 8001f24:	005b      	lsls	r3, r3, #1
 8001f26:	4413      	add	r3, r2
 8001f28:	005b      	lsls	r3, r3, #1
 8001f2a:	440b      	add	r3, r1
 8001f2c:	781a      	ldrb	r2, [r3, #0]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	781b      	ldrb	r3, [r3, #0]
 8001f32:	429a      	cmp	r2, r3
 8001f34:	d17b      	bne.n	800202e <dhcpserver_remove_mac+0x11e>
 8001f36:	4945      	ldr	r1, [pc, #276]	; (800204c <dhcpserver_remove_mac+0x13c>)
 8001f38:	68fa      	ldr	r2, [r7, #12]
 8001f3a:	4613      	mov	r3, r2
 8001f3c:	005b      	lsls	r3, r3, #1
 8001f3e:	4413      	add	r3, r2
 8001f40:	005b      	lsls	r3, r3, #1
 8001f42:	440b      	add	r3, r1
 8001f44:	3301      	adds	r3, #1
 8001f46:	781a      	ldrb	r2, [r3, #0]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	785b      	ldrb	r3, [r3, #1]
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d16e      	bne.n	800202e <dhcpserver_remove_mac+0x11e>
        && saved_mac[i].addr[2] == mac->addr[2] && saved_mac[i].addr[3] == mac->addr[3]
 8001f50:	493e      	ldr	r1, [pc, #248]	; (800204c <dhcpserver_remove_mac+0x13c>)
 8001f52:	68fa      	ldr	r2, [r7, #12]
 8001f54:	4613      	mov	r3, r2
 8001f56:	005b      	lsls	r3, r3, #1
 8001f58:	4413      	add	r3, r2
 8001f5a:	005b      	lsls	r3, r3, #1
 8001f5c:	440b      	add	r3, r1
 8001f5e:	3302      	adds	r3, #2
 8001f60:	781a      	ldrb	r2, [r3, #0]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	789b      	ldrb	r3, [r3, #2]
 8001f66:	429a      	cmp	r2, r3
 8001f68:	d161      	bne.n	800202e <dhcpserver_remove_mac+0x11e>
 8001f6a:	4938      	ldr	r1, [pc, #224]	; (800204c <dhcpserver_remove_mac+0x13c>)
 8001f6c:	68fa      	ldr	r2, [r7, #12]
 8001f6e:	4613      	mov	r3, r2
 8001f70:	005b      	lsls	r3, r3, #1
 8001f72:	4413      	add	r3, r2
 8001f74:	005b      	lsls	r3, r3, #1
 8001f76:	440b      	add	r3, r1
 8001f78:	3303      	adds	r3, #3
 8001f7a:	781a      	ldrb	r2, [r3, #0]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	78db      	ldrb	r3, [r3, #3]
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d154      	bne.n	800202e <dhcpserver_remove_mac+0x11e>
        && saved_mac[i].addr[4] == mac->addr[4] && saved_mac[i].addr[5] == mac->addr[5]) {
 8001f84:	4931      	ldr	r1, [pc, #196]	; (800204c <dhcpserver_remove_mac+0x13c>)
 8001f86:	68fa      	ldr	r2, [r7, #12]
 8001f88:	4613      	mov	r3, r2
 8001f8a:	005b      	lsls	r3, r3, #1
 8001f8c:	4413      	add	r3, r2
 8001f8e:	005b      	lsls	r3, r3, #1
 8001f90:	440b      	add	r3, r1
 8001f92:	3304      	adds	r3, #4
 8001f94:	781a      	ldrb	r2, [r3, #0]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	791b      	ldrb	r3, [r3, #4]
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	d147      	bne.n	800202e <dhcpserver_remove_mac+0x11e>
 8001f9e:	492b      	ldr	r1, [pc, #172]	; (800204c <dhcpserver_remove_mac+0x13c>)
 8001fa0:	68fa      	ldr	r2, [r7, #12]
 8001fa2:	4613      	mov	r3, r2
 8001fa4:	005b      	lsls	r3, r3, #1
 8001fa6:	4413      	add	r3, r2
 8001fa8:	005b      	lsls	r3, r3, #1
 8001faa:	440b      	add	r3, r1
 8001fac:	3305      	adds	r3, #5
 8001fae:	781a      	ldrb	r2, [r3, #0]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	795b      	ldrb	r3, [r3, #5]
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d13a      	bne.n	800202e <dhcpserver_remove_mac+0x11e>
      saved_mac[i].addr[0] = 0;
 8001fb8:	4924      	ldr	r1, [pc, #144]	; (800204c <dhcpserver_remove_mac+0x13c>)
 8001fba:	68fa      	ldr	r2, [r7, #12]
 8001fbc:	4613      	mov	r3, r2
 8001fbe:	005b      	lsls	r3, r3, #1
 8001fc0:	4413      	add	r3, r2
 8001fc2:	005b      	lsls	r3, r3, #1
 8001fc4:	440b      	add	r3, r1
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	701a      	strb	r2, [r3, #0]
      saved_mac[i].addr[1] = 0;
 8001fca:	4920      	ldr	r1, [pc, #128]	; (800204c <dhcpserver_remove_mac+0x13c>)
 8001fcc:	68fa      	ldr	r2, [r7, #12]
 8001fce:	4613      	mov	r3, r2
 8001fd0:	005b      	lsls	r3, r3, #1
 8001fd2:	4413      	add	r3, r2
 8001fd4:	005b      	lsls	r3, r3, #1
 8001fd6:	440b      	add	r3, r1
 8001fd8:	3301      	adds	r3, #1
 8001fda:	2200      	movs	r2, #0
 8001fdc:	701a      	strb	r2, [r3, #0]
      saved_mac[i].addr[2] = 0;
 8001fde:	491b      	ldr	r1, [pc, #108]	; (800204c <dhcpserver_remove_mac+0x13c>)
 8001fe0:	68fa      	ldr	r2, [r7, #12]
 8001fe2:	4613      	mov	r3, r2
 8001fe4:	005b      	lsls	r3, r3, #1
 8001fe6:	4413      	add	r3, r2
 8001fe8:	005b      	lsls	r3, r3, #1
 8001fea:	440b      	add	r3, r1
 8001fec:	3302      	adds	r3, #2
 8001fee:	2200      	movs	r2, #0
 8001ff0:	701a      	strb	r2, [r3, #0]
      saved_mac[i].addr[3] = 0;
 8001ff2:	4916      	ldr	r1, [pc, #88]	; (800204c <dhcpserver_remove_mac+0x13c>)
 8001ff4:	68fa      	ldr	r2, [r7, #12]
 8001ff6:	4613      	mov	r3, r2
 8001ff8:	005b      	lsls	r3, r3, #1
 8001ffa:	4413      	add	r3, r2
 8001ffc:	005b      	lsls	r3, r3, #1
 8001ffe:	440b      	add	r3, r1
 8002000:	3303      	adds	r3, #3
 8002002:	2200      	movs	r2, #0
 8002004:	701a      	strb	r2, [r3, #0]
      saved_mac[i].addr[4] = 0;
 8002006:	4911      	ldr	r1, [pc, #68]	; (800204c <dhcpserver_remove_mac+0x13c>)
 8002008:	68fa      	ldr	r2, [r7, #12]
 800200a:	4613      	mov	r3, r2
 800200c:	005b      	lsls	r3, r3, #1
 800200e:	4413      	add	r3, r2
 8002010:	005b      	lsls	r3, r3, #1
 8002012:	440b      	add	r3, r1
 8002014:	3304      	adds	r3, #4
 8002016:	2200      	movs	r2, #0
 8002018:	701a      	strb	r2, [r3, #0]
      saved_mac[i].addr[5] = 0;
 800201a:	490c      	ldr	r1, [pc, #48]	; (800204c <dhcpserver_remove_mac+0x13c>)
 800201c:	68fa      	ldr	r2, [r7, #12]
 800201e:	4613      	mov	r3, r2
 8002020:	005b      	lsls	r3, r3, #1
 8002022:	4413      	add	r3, r2
 8002024:	005b      	lsls	r3, r3, #1
 8002026:	440b      	add	r3, r1
 8002028:	3305      	adds	r3, #5
 800202a:	2200      	movs	r2, #0
 800202c:	701a      	strb	r2, [r3, #0]
  for (uint32_t i = 0; i < DHCPS_MAX_CLIENT; ++i) {
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	3301      	adds	r3, #1
 8002032:	60fb      	str	r3, [r7, #12]
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	2b07      	cmp	r3, #7
 8002038:	f67f af71 	bls.w	8001f1e <dhcpserver_remove_mac+0xe>
    }
  }
}
 800203c:	bf00      	nop
 800203e:	bf00      	nop
 8002040:	3714      	adds	r7, #20
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr
 800204a:	bf00      	nop
 800204c:	200004f4 	.word	0x200004f4

08002050 <dhcpserver_save_mac>:

/***************************************************************************//**
 * Save mac address in list of clients.
 ******************************************************************************/
static void dhcpserver_save_mac(struct eth_addr *mac)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b084      	sub	sp, #16
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  // Remove previous listing of MAC.
  dhcpserver_remove_mac(mac);
 8002058:	6878      	ldr	r0, [r7, #4]
 800205a:	f7ff ff59 	bl	8001f10 <dhcpserver_remove_mac>

  for (uint8_t i = 0; i < DHCPS_MAX_CLIENT; ++i) {
 800205e:	2300      	movs	r3, #0
 8002060:	73fb      	strb	r3, [r7, #15]
 8002062:	e08b      	b.n	800217c <dhcpserver_save_mac+0x12c>
    if (saved_mac[i].addr[0] == 0 && saved_mac[i].addr[1] == 0
 8002064:	7bfa      	ldrb	r2, [r7, #15]
 8002066:	494a      	ldr	r1, [pc, #296]	; (8002190 <dhcpserver_save_mac+0x140>)
 8002068:	4613      	mov	r3, r2
 800206a:	005b      	lsls	r3, r3, #1
 800206c:	4413      	add	r3, r2
 800206e:	005b      	lsls	r3, r3, #1
 8002070:	440b      	add	r3, r1
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d17e      	bne.n	8002176 <dhcpserver_save_mac+0x126>
 8002078:	7bfa      	ldrb	r2, [r7, #15]
 800207a:	4945      	ldr	r1, [pc, #276]	; (8002190 <dhcpserver_save_mac+0x140>)
 800207c:	4613      	mov	r3, r2
 800207e:	005b      	lsls	r3, r3, #1
 8002080:	4413      	add	r3, r2
 8002082:	005b      	lsls	r3, r3, #1
 8002084:	440b      	add	r3, r1
 8002086:	3301      	adds	r3, #1
 8002088:	781b      	ldrb	r3, [r3, #0]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d173      	bne.n	8002176 <dhcpserver_save_mac+0x126>
        && saved_mac[i].addr[2] == 0 && saved_mac[i].addr[3] == 0
 800208e:	7bfa      	ldrb	r2, [r7, #15]
 8002090:	493f      	ldr	r1, [pc, #252]	; (8002190 <dhcpserver_save_mac+0x140>)
 8002092:	4613      	mov	r3, r2
 8002094:	005b      	lsls	r3, r3, #1
 8002096:	4413      	add	r3, r2
 8002098:	005b      	lsls	r3, r3, #1
 800209a:	440b      	add	r3, r1
 800209c:	3302      	adds	r3, #2
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d168      	bne.n	8002176 <dhcpserver_save_mac+0x126>
 80020a4:	7bfa      	ldrb	r2, [r7, #15]
 80020a6:	493a      	ldr	r1, [pc, #232]	; (8002190 <dhcpserver_save_mac+0x140>)
 80020a8:	4613      	mov	r3, r2
 80020aa:	005b      	lsls	r3, r3, #1
 80020ac:	4413      	add	r3, r2
 80020ae:	005b      	lsls	r3, r3, #1
 80020b0:	440b      	add	r3, r1
 80020b2:	3303      	adds	r3, #3
 80020b4:	781b      	ldrb	r3, [r3, #0]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d15d      	bne.n	8002176 <dhcpserver_save_mac+0x126>
        && saved_mac[i].addr[4] == 0 && saved_mac[i].addr[5] == 0) {
 80020ba:	7bfa      	ldrb	r2, [r7, #15]
 80020bc:	4934      	ldr	r1, [pc, #208]	; (8002190 <dhcpserver_save_mac+0x140>)
 80020be:	4613      	mov	r3, r2
 80020c0:	005b      	lsls	r3, r3, #1
 80020c2:	4413      	add	r3, r2
 80020c4:	005b      	lsls	r3, r3, #1
 80020c6:	440b      	add	r3, r1
 80020c8:	3304      	adds	r3, #4
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d152      	bne.n	8002176 <dhcpserver_save_mac+0x126>
 80020d0:	7bfa      	ldrb	r2, [r7, #15]
 80020d2:	492f      	ldr	r1, [pc, #188]	; (8002190 <dhcpserver_save_mac+0x140>)
 80020d4:	4613      	mov	r3, r2
 80020d6:	005b      	lsls	r3, r3, #1
 80020d8:	4413      	add	r3, r2
 80020da:	005b      	lsls	r3, r3, #1
 80020dc:	440b      	add	r3, r1
 80020de:	3305      	adds	r3, #5
 80020e0:	781b      	ldrb	r3, [r3, #0]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d147      	bne.n	8002176 <dhcpserver_save_mac+0x126>
      saved_mac[i].addr[0] = mac->addr[0];
 80020e6:	7bfa      	ldrb	r2, [r7, #15]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	7818      	ldrb	r0, [r3, #0]
 80020ec:	4928      	ldr	r1, [pc, #160]	; (8002190 <dhcpserver_save_mac+0x140>)
 80020ee:	4613      	mov	r3, r2
 80020f0:	005b      	lsls	r3, r3, #1
 80020f2:	4413      	add	r3, r2
 80020f4:	005b      	lsls	r3, r3, #1
 80020f6:	440b      	add	r3, r1
 80020f8:	4602      	mov	r2, r0
 80020fa:	701a      	strb	r2, [r3, #0]
      saved_mac[i].addr[1] = mac->addr[1];
 80020fc:	7bfa      	ldrb	r2, [r7, #15]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	7858      	ldrb	r0, [r3, #1]
 8002102:	4923      	ldr	r1, [pc, #140]	; (8002190 <dhcpserver_save_mac+0x140>)
 8002104:	4613      	mov	r3, r2
 8002106:	005b      	lsls	r3, r3, #1
 8002108:	4413      	add	r3, r2
 800210a:	005b      	lsls	r3, r3, #1
 800210c:	440b      	add	r3, r1
 800210e:	3301      	adds	r3, #1
 8002110:	4602      	mov	r2, r0
 8002112:	701a      	strb	r2, [r3, #0]
      saved_mac[i].addr[2] = mac->addr[2];
 8002114:	7bfa      	ldrb	r2, [r7, #15]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	7898      	ldrb	r0, [r3, #2]
 800211a:	491d      	ldr	r1, [pc, #116]	; (8002190 <dhcpserver_save_mac+0x140>)
 800211c:	4613      	mov	r3, r2
 800211e:	005b      	lsls	r3, r3, #1
 8002120:	4413      	add	r3, r2
 8002122:	005b      	lsls	r3, r3, #1
 8002124:	440b      	add	r3, r1
 8002126:	3302      	adds	r3, #2
 8002128:	4602      	mov	r2, r0
 800212a:	701a      	strb	r2, [r3, #0]
      saved_mac[i].addr[3] = mac->addr[3];
 800212c:	7bfa      	ldrb	r2, [r7, #15]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	78d8      	ldrb	r0, [r3, #3]
 8002132:	4917      	ldr	r1, [pc, #92]	; (8002190 <dhcpserver_save_mac+0x140>)
 8002134:	4613      	mov	r3, r2
 8002136:	005b      	lsls	r3, r3, #1
 8002138:	4413      	add	r3, r2
 800213a:	005b      	lsls	r3, r3, #1
 800213c:	440b      	add	r3, r1
 800213e:	3303      	adds	r3, #3
 8002140:	4602      	mov	r2, r0
 8002142:	701a      	strb	r2, [r3, #0]
      saved_mac[i].addr[4] = mac->addr[4];
 8002144:	7bfa      	ldrb	r2, [r7, #15]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	7918      	ldrb	r0, [r3, #4]
 800214a:	4911      	ldr	r1, [pc, #68]	; (8002190 <dhcpserver_save_mac+0x140>)
 800214c:	4613      	mov	r3, r2
 800214e:	005b      	lsls	r3, r3, #1
 8002150:	4413      	add	r3, r2
 8002152:	005b      	lsls	r3, r3, #1
 8002154:	440b      	add	r3, r1
 8002156:	3304      	adds	r3, #4
 8002158:	4602      	mov	r2, r0
 800215a:	701a      	strb	r2, [r3, #0]
      saved_mac[i].addr[5] = mac->addr[5];
 800215c:	7bfa      	ldrb	r2, [r7, #15]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	7958      	ldrb	r0, [r3, #5]
 8002162:	490b      	ldr	r1, [pc, #44]	; (8002190 <dhcpserver_save_mac+0x140>)
 8002164:	4613      	mov	r3, r2
 8002166:	005b      	lsls	r3, r3, #1
 8002168:	4413      	add	r3, r2
 800216a:	005b      	lsls	r3, r3, #1
 800216c:	440b      	add	r3, r1
 800216e:	3305      	adds	r3, #5
 8002170:	4602      	mov	r2, r0
 8002172:	701a      	strb	r2, [r3, #0]
      break;
 8002174:	e007      	b.n	8002186 <dhcpserver_save_mac+0x136>
  for (uint8_t i = 0; i < DHCPS_MAX_CLIENT; ++i) {
 8002176:	7bfb      	ldrb	r3, [r7, #15]
 8002178:	3301      	adds	r3, #1
 800217a:	73fb      	strb	r3, [r7, #15]
 800217c:	7bfb      	ldrb	r3, [r7, #15]
 800217e:	2b07      	cmp	r3, #7
 8002180:	f67f af70 	bls.w	8002064 <dhcpserver_save_mac+0x14>
    }
  }
}
 8002184:	bf00      	nop
 8002186:	bf00      	nop
 8002188:	3710      	adds	r7, #16
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	200004f4 	.word	0x200004f4

08002194 <dhcpserver_get_ip>:
 *
 * @param mac MAC address of client.
 * @returns IP address
 ******************************************************************************/
ip_addr_t dhcpserver_get_ip(struct eth_addr *mac)
{
 8002194:	b480      	push	{r7}
 8002196:	b085      	sub	sp, #20
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  ip_addr_t offer_ip = { 0 };
 800219c:	2300      	movs	r3, #0
 800219e:	60bb      	str	r3, [r7, #8]

  for (uint32_t i = 0; i < DHCPS_MAX_CLIENT; ++i) {
 80021a0:	2300      	movs	r3, #0
 80021a2:	60fb      	str	r3, [r7, #12]
 80021a4:	e060      	b.n	8002268 <dhcpserver_get_ip+0xd4>
    if (saved_mac[i].addr[0] == mac->addr[0] && saved_mac[i].addr[1] == mac->addr[1]
 80021a6:	4935      	ldr	r1, [pc, #212]	; (800227c <dhcpserver_get_ip+0xe8>)
 80021a8:	68fa      	ldr	r2, [r7, #12]
 80021aa:	4613      	mov	r3, r2
 80021ac:	005b      	lsls	r3, r3, #1
 80021ae:	4413      	add	r3, r2
 80021b0:	005b      	lsls	r3, r3, #1
 80021b2:	440b      	add	r3, r1
 80021b4:	781a      	ldrb	r2, [r3, #0]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	781b      	ldrb	r3, [r3, #0]
 80021ba:	429a      	cmp	r2, r3
 80021bc:	d151      	bne.n	8002262 <dhcpserver_get_ip+0xce>
 80021be:	492f      	ldr	r1, [pc, #188]	; (800227c <dhcpserver_get_ip+0xe8>)
 80021c0:	68fa      	ldr	r2, [r7, #12]
 80021c2:	4613      	mov	r3, r2
 80021c4:	005b      	lsls	r3, r3, #1
 80021c6:	4413      	add	r3, r2
 80021c8:	005b      	lsls	r3, r3, #1
 80021ca:	440b      	add	r3, r1
 80021cc:	3301      	adds	r3, #1
 80021ce:	781a      	ldrb	r2, [r3, #0]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	785b      	ldrb	r3, [r3, #1]
 80021d4:	429a      	cmp	r2, r3
 80021d6:	d144      	bne.n	8002262 <dhcpserver_get_ip+0xce>
        && saved_mac[i].addr[2] == mac->addr[2] && saved_mac[i].addr[3] == mac->addr[3]
 80021d8:	4928      	ldr	r1, [pc, #160]	; (800227c <dhcpserver_get_ip+0xe8>)
 80021da:	68fa      	ldr	r2, [r7, #12]
 80021dc:	4613      	mov	r3, r2
 80021de:	005b      	lsls	r3, r3, #1
 80021e0:	4413      	add	r3, r2
 80021e2:	005b      	lsls	r3, r3, #1
 80021e4:	440b      	add	r3, r1
 80021e6:	3302      	adds	r3, #2
 80021e8:	781a      	ldrb	r2, [r3, #0]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	789b      	ldrb	r3, [r3, #2]
 80021ee:	429a      	cmp	r2, r3
 80021f0:	d137      	bne.n	8002262 <dhcpserver_get_ip+0xce>
 80021f2:	4922      	ldr	r1, [pc, #136]	; (800227c <dhcpserver_get_ip+0xe8>)
 80021f4:	68fa      	ldr	r2, [r7, #12]
 80021f6:	4613      	mov	r3, r2
 80021f8:	005b      	lsls	r3, r3, #1
 80021fa:	4413      	add	r3, r2
 80021fc:	005b      	lsls	r3, r3, #1
 80021fe:	440b      	add	r3, r1
 8002200:	3303      	adds	r3, #3
 8002202:	781a      	ldrb	r2, [r3, #0]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	78db      	ldrb	r3, [r3, #3]
 8002208:	429a      	cmp	r2, r3
 800220a:	d12a      	bne.n	8002262 <dhcpserver_get_ip+0xce>
        && saved_mac[i].addr[4] == mac->addr[4] && saved_mac[i].addr[5] == mac->addr[5]) {
 800220c:	491b      	ldr	r1, [pc, #108]	; (800227c <dhcpserver_get_ip+0xe8>)
 800220e:	68fa      	ldr	r2, [r7, #12]
 8002210:	4613      	mov	r3, r2
 8002212:	005b      	lsls	r3, r3, #1
 8002214:	4413      	add	r3, r2
 8002216:	005b      	lsls	r3, r3, #1
 8002218:	440b      	add	r3, r1
 800221a:	3304      	adds	r3, #4
 800221c:	781a      	ldrb	r2, [r3, #0]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	791b      	ldrb	r3, [r3, #4]
 8002222:	429a      	cmp	r2, r3
 8002224:	d11d      	bne.n	8002262 <dhcpserver_get_ip+0xce>
 8002226:	4915      	ldr	r1, [pc, #84]	; (800227c <dhcpserver_get_ip+0xe8>)
 8002228:	68fa      	ldr	r2, [r7, #12]
 800222a:	4613      	mov	r3, r2
 800222c:	005b      	lsls	r3, r3, #1
 800222e:	4413      	add	r3, r2
 8002230:	005b      	lsls	r3, r3, #1
 8002232:	440b      	add	r3, r1
 8002234:	3305      	adds	r3, #5
 8002236:	781a      	ldrb	r2, [r3, #0]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	795b      	ldrb	r3, [r3, #5]
 800223c:	429a      	cmp	r2, r3
 800223e:	d110      	bne.n	8002262 <dhcpserver_get_ip+0xce>
      /* index is used to increment IP address. */
      offer_ip.addr = ((10 + i) << 24) + ap_ip_addr0 + (ap_ip_addr1 << 8) + (ap_ip_addr2 << 16);
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	330a      	adds	r3, #10
 8002244:	061b      	lsls	r3, r3, #24
 8002246:	4a0e      	ldr	r2, [pc, #56]	; (8002280 <dhcpserver_get_ip+0xec>)
 8002248:	7812      	ldrb	r2, [r2, #0]
 800224a:	4413      	add	r3, r2
 800224c:	4a0d      	ldr	r2, [pc, #52]	; (8002284 <dhcpserver_get_ip+0xf0>)
 800224e:	7812      	ldrb	r2, [r2, #0]
 8002250:	0212      	lsls	r2, r2, #8
 8002252:	4413      	add	r3, r2
 8002254:	4a0c      	ldr	r2, [pc, #48]	; (8002288 <dhcpserver_get_ip+0xf4>)
 8002256:	7812      	ldrb	r2, [r2, #0]
 8002258:	0412      	lsls	r2, r2, #16
 800225a:	4413      	add	r3, r2
 800225c:	60bb      	str	r3, [r7, #8]
      return offer_ip;
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	e006      	b.n	8002270 <dhcpserver_get_ip+0xdc>
  for (uint32_t i = 0; i < DHCPS_MAX_CLIENT; ++i) {
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	3301      	adds	r3, #1
 8002266:	60fb      	str	r3, [r7, #12]
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	2b07      	cmp	r3, #7
 800226c:	d99b      	bls.n	80021a6 <dhcpserver_get_ip+0x12>
    }
  }

  return offer_ip;
 800226e:	68bb      	ldr	r3, [r7, #8]
}
 8002270:	4618      	mov	r0, r3
 8002272:	3714      	adds	r7, #20
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr
 800227c:	200004f4 	.word	0x200004f4
 8002280:	200000a2 	.word	0x200000a2
 8002284:	200000a3 	.word	0x200000a3
 8002288:	200000a4 	.word	0x200000a4

0800228c <dhcpserver_clear_stored_mac>:

/***************************************************************************//**
 * Clear stored mac addresses in client list.
 ******************************************************************************/
void dhcpserver_clear_stored_mac(void)
{
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
  //clear saved mac addresses
  for (uint32_t i = 0; i < DHCPS_MAX_CLIENT; ++i) {
 8002292:	2300      	movs	r3, #0
 8002294:	607b      	str	r3, [r7, #4]
 8002296:	e03d      	b.n	8002314 <dhcpserver_clear_stored_mac+0x88>
    saved_mac[i].addr[0] = 0;
 8002298:	4923      	ldr	r1, [pc, #140]	; (8002328 <dhcpserver_clear_stored_mac+0x9c>)
 800229a:	687a      	ldr	r2, [r7, #4]
 800229c:	4613      	mov	r3, r2
 800229e:	005b      	lsls	r3, r3, #1
 80022a0:	4413      	add	r3, r2
 80022a2:	005b      	lsls	r3, r3, #1
 80022a4:	440b      	add	r3, r1
 80022a6:	2200      	movs	r2, #0
 80022a8:	701a      	strb	r2, [r3, #0]
    saved_mac[i].addr[1] = 0;
 80022aa:	491f      	ldr	r1, [pc, #124]	; (8002328 <dhcpserver_clear_stored_mac+0x9c>)
 80022ac:	687a      	ldr	r2, [r7, #4]
 80022ae:	4613      	mov	r3, r2
 80022b0:	005b      	lsls	r3, r3, #1
 80022b2:	4413      	add	r3, r2
 80022b4:	005b      	lsls	r3, r3, #1
 80022b6:	440b      	add	r3, r1
 80022b8:	3301      	adds	r3, #1
 80022ba:	2200      	movs	r2, #0
 80022bc:	701a      	strb	r2, [r3, #0]
    saved_mac[i].addr[2] = 0;
 80022be:	491a      	ldr	r1, [pc, #104]	; (8002328 <dhcpserver_clear_stored_mac+0x9c>)
 80022c0:	687a      	ldr	r2, [r7, #4]
 80022c2:	4613      	mov	r3, r2
 80022c4:	005b      	lsls	r3, r3, #1
 80022c6:	4413      	add	r3, r2
 80022c8:	005b      	lsls	r3, r3, #1
 80022ca:	440b      	add	r3, r1
 80022cc:	3302      	adds	r3, #2
 80022ce:	2200      	movs	r2, #0
 80022d0:	701a      	strb	r2, [r3, #0]
    saved_mac[i].addr[3] = 0;
 80022d2:	4915      	ldr	r1, [pc, #84]	; (8002328 <dhcpserver_clear_stored_mac+0x9c>)
 80022d4:	687a      	ldr	r2, [r7, #4]
 80022d6:	4613      	mov	r3, r2
 80022d8:	005b      	lsls	r3, r3, #1
 80022da:	4413      	add	r3, r2
 80022dc:	005b      	lsls	r3, r3, #1
 80022de:	440b      	add	r3, r1
 80022e0:	3303      	adds	r3, #3
 80022e2:	2200      	movs	r2, #0
 80022e4:	701a      	strb	r2, [r3, #0]
    saved_mac[i].addr[4] = 0;
 80022e6:	4910      	ldr	r1, [pc, #64]	; (8002328 <dhcpserver_clear_stored_mac+0x9c>)
 80022e8:	687a      	ldr	r2, [r7, #4]
 80022ea:	4613      	mov	r3, r2
 80022ec:	005b      	lsls	r3, r3, #1
 80022ee:	4413      	add	r3, r2
 80022f0:	005b      	lsls	r3, r3, #1
 80022f2:	440b      	add	r3, r1
 80022f4:	3304      	adds	r3, #4
 80022f6:	2200      	movs	r2, #0
 80022f8:	701a      	strb	r2, [r3, #0]
    saved_mac[i].addr[5] = 0;
 80022fa:	490b      	ldr	r1, [pc, #44]	; (8002328 <dhcpserver_clear_stored_mac+0x9c>)
 80022fc:	687a      	ldr	r2, [r7, #4]
 80022fe:	4613      	mov	r3, r2
 8002300:	005b      	lsls	r3, r3, #1
 8002302:	4413      	add	r3, r2
 8002304:	005b      	lsls	r3, r3, #1
 8002306:	440b      	add	r3, r1
 8002308:	3305      	adds	r3, #5
 800230a:	2200      	movs	r2, #0
 800230c:	701a      	strb	r2, [r3, #0]
  for (uint32_t i = 0; i < DHCPS_MAX_CLIENT; ++i) {
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	3301      	adds	r3, #1
 8002312:	607b      	str	r3, [r7, #4]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2b07      	cmp	r3, #7
 8002318:	d9be      	bls.n	8002298 <dhcpserver_clear_stored_mac+0xc>
  }
}
 800231a:	bf00      	nop
 800231c:	bf00      	nop
 800231e:	370c      	adds	r7, #12
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr
 8002328:	200004f4 	.word	0x200004f4

0800232c <dhcpserver_find_requested_ip>:
 * @param pbuf_in The pbuf containing the a DHCP packet.
 * @param ipaddr IP address result.
 * @returns 1 if found, 0 if not found.
 ******************************************************************************/
static uint16_t dhcpserver_find_requested_ip(struct pbuf * pbuf_in, uint8_t * ipaddr)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b086      	sub	sp, #24
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
 8002334:	6039      	str	r1, [r7, #0]
  uint32_t index = UDP_DHCP_OPTIONS_OFS;
 8002336:	23f0      	movs	r3, #240	; 0xf0
 8002338:	617b      	str	r3, [r7, #20]
  uint8_t optionID = DHCP_OPTION_REQUESTED_IP;
 800233a:	2332      	movs	r3, #50	; 0x32
 800233c:	743b      	strb	r3, [r7, #16]
  uint16_t found = 0;
 800233e:	2300      	movs	r3, #0
 8002340:	827b      	strh	r3, [r7, #18]
  uint8_t val = 0;
 8002342:	2300      	movs	r3, #0
 8002344:	747b      	strb	r3, [r7, #17]
  uint8_t size;

  while ((val != 0xff) && (index < pbuf_in->tot_len)) {
 8002346:	e036      	b.n	80023b6 <dhcpserver_find_requested_ip+0x8a>
    val = pbuf_get_at(pbuf_in, index);
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	b29b      	uxth	r3, r3
 800234c:	4619      	mov	r1, r3
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	f00d fcbc 	bl	800fccc <pbuf_get_at>
 8002354:	4603      	mov	r3, r0
 8002356:	747b      	strb	r3, [r7, #17]
    if (val == optionID) {
 8002358:	7c7a      	ldrb	r2, [r7, #17]
 800235a:	7c3b      	ldrb	r3, [r7, #16]
 800235c:	429a      	cmp	r2, r3
 800235e:	d11b      	bne.n	8002398 <dhcpserver_find_requested_ip+0x6c>
      index++;
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	3301      	adds	r3, #1
 8002364:	617b      	str	r3, [r7, #20]
      size = pbuf_get_at(pbuf_in, index);
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	b29b      	uxth	r3, r3
 800236a:	4619      	mov	r1, r3
 800236c:	6878      	ldr	r0, [r7, #4]
 800236e:	f00d fcad 	bl	800fccc <pbuf_get_at>
 8002372:	4603      	mov	r3, r0
 8002374:	73fb      	strb	r3, [r7, #15]
      index++;
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	3301      	adds	r3, #1
 800237a:	617b      	str	r3, [r7, #20]
      pbuf_copy_partial(pbuf_in, ipaddr, size, index);
 800237c:	7bfb      	ldrb	r3, [r7, #15]
 800237e:	b29a      	uxth	r2, r3
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	b29b      	uxth	r3, r3
 8002384:	6839      	ldr	r1, [r7, #0]
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	f00d fac4 	bl	800f914 <pbuf_copy_partial>
      index += size;
 800238c:	7bfb      	ldrb	r3, [r7, #15]
 800238e:	697a      	ldr	r2, [r7, #20]
 8002390:	4413      	add	r3, r2
 8002392:	617b      	str	r3, [r7, #20]
      found = 1;
 8002394:	2301      	movs	r3, #1
 8002396:	827b      	strh	r3, [r7, #18]
    }
    index++;
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	3301      	adds	r3, #1
 800239c:	617b      	str	r3, [r7, #20]
    index += ((pbuf_get_at(pbuf_in, index)) + 1);
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	b29b      	uxth	r3, r3
 80023a2:	4619      	mov	r1, r3
 80023a4:	6878      	ldr	r0, [r7, #4]
 80023a6:	f00d fc91 	bl	800fccc <pbuf_get_at>
 80023aa:	4603      	mov	r3, r0
 80023ac:	3301      	adds	r3, #1
 80023ae:	461a      	mov	r2, r3
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	4413      	add	r3, r2
 80023b4:	617b      	str	r3, [r7, #20]
  while ((val != 0xff) && (index < pbuf_in->tot_len)) {
 80023b6:	7c7b      	ldrb	r3, [r7, #17]
 80023b8:	2bff      	cmp	r3, #255	; 0xff
 80023ba:	d005      	beq.n	80023c8 <dhcpserver_find_requested_ip+0x9c>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	891b      	ldrh	r3, [r3, #8]
 80023c0:	461a      	mov	r2, r3
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d3bf      	bcc.n	8002348 <dhcpserver_find_requested_ip+0x1c>
  }

  return found;
 80023c8:	8a7b      	ldrh	r3, [r7, #18]
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3718      	adds	r7, #24
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
	...

080023d4 <dhcpserver_fn>:
/***************************************************************************//**
 * DHCP server main function.
 ******************************************************************************/
static void dhcpserver_fn(void *arg, struct udp_pcb *dhcp_pcb_recv,
		struct pbuf *pbuf_in, const ip_addr_t *client_addr, uint16_t port)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b08c      	sub	sp, #48	; 0x30
 80023d8:	af00      	add	r7, sp, #0
 80023da:	60f8      	str	r0, [r7, #12]
 80023dc:	60b9      	str	r1, [r7, #8]
 80023de:	607a      	str	r2, [r7, #4]
 80023e0:	603b      	str	r3, [r7, #0]
  struct pbuf * pbuf_out = 0;
 80023e2:	2300      	movs	r3, #0
 80023e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t i;
  uint8_t flags = 0;
 80023e6:	2300      	movs	r3, #0
 80023e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  struct eth_addr ethaddr;

  uint32_t options_offset = 0;
 80023ec:	2300      	movs	r3, #0
 80023ee:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t client_requested_addr = 0;
 80023f0:	2300      	movs	r3, #0
 80023f2:	61bb      	str	r3, [r7, #24]
  uint8_t val = 0;
 80023f4:	2300      	movs	r3, #0
 80023f6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  ip_addr_t client_ip_addr;
  ip_addr_t r;

  if ((NULL == pbuf_in) || ((pbuf_in->tot_len) <= UDP_DHCP_OPTIONS_OFS)) {
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	f000 85b8 	beq.w	8002f72 <dhcpserver_fn+0xb9e>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	891b      	ldrh	r3, [r3, #8]
 8002406:	2bf0      	cmp	r3, #240	; 0xf0
 8002408:	f240 85b3 	bls.w	8002f72 <dhcpserver_fn+0xb9e>
    goto end_of_fcn;
  }

  pbuf_out = pbuf_alloc(PBUF_TRANSPORT, DHCP_RESPONSE_DEFAULT_SIZE, PBUF_POOL);
 800240c:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8002410:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002414:	2036      	movs	r0, #54	; 0x36
 8002416:	f00c fd8f 	bl	800ef38 <pbuf_alloc>
 800241a:	62f8      	str	r0, [r7, #44]	; 0x2c

  if ((NULL == pbuf_out) || ((pbuf_out->tot_len) < UDP_DHCP_OPTIONS_OFS)) {
 800241c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800241e:	2b00      	cmp	r3, #0
 8002420:	f000 85a9 	beq.w	8002f76 <dhcpserver_fn+0xba2>
 8002424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002426:	891b      	ldrh	r3, [r3, #8]
 8002428:	2bef      	cmp	r3, #239	; 0xef
 800242a:	f240 85a4 	bls.w	8002f76 <dhcpserver_fn+0xba2>
    goto end_of_fcn;
  }
  pbuf_copy(pbuf_out, pbuf_in);
 800242e:	6879      	ldr	r1, [r7, #4]
 8002430:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002432:	f00d f99d 	bl	800f770 <pbuf_copy>

#if DHCPS_DBG
  printf("mac ");
#endif
  // Read MAC address.
  for (i = 0; i < 6; ++i) {
 8002436:	2300      	movs	r3, #0
 8002438:	62bb      	str	r3, [r7, #40]	; 0x28
 800243a:	e014      	b.n	8002466 <dhcpserver_fn+0x92>
    val = pbuf_get_at(pbuf_in, DHCP_CHADDR_OFS + i);
 800243c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800243e:	b29b      	uxth	r3, r3
 8002440:	331c      	adds	r3, #28
 8002442:	b29b      	uxth	r3, r3
 8002444:	4619      	mov	r1, r3
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	f00d fc40 	bl	800fccc <pbuf_get_at>
 800244c:	4603      	mov	r3, r0
 800244e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    ethaddr.addr[i] = val;
 8002452:	f107 021c 	add.w	r2, r7, #28
 8002456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002458:	4413      	add	r3, r2
 800245a:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800245e:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < 6; ++i) {
 8002460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002462:	3301      	adds	r3, #1
 8002464:	62bb      	str	r3, [r7, #40]	; 0x28
 8002466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002468:	2b05      	cmp	r3, #5
 800246a:	d9e7      	bls.n	800243c <dhcpserver_fn+0x68>
  }
#if DHCPS_DBG
  printf("\r\n");
#endif
  // Register MAC address and get an IP address.
  dhcpserver_save_mac(&ethaddr);
 800246c:	f107 031c 	add.w	r3, r7, #28
 8002470:	4618      	mov	r0, r3
 8002472:	f7ff fded 	bl	8002050 <dhcpserver_save_mac>
  client_ip_addr = dhcpserver_get_ip(&ethaddr);
 8002476:	f107 031c 	add.w	r3, r7, #28
 800247a:	4618      	mov	r0, r3
 800247c:	f7ff fe8a 	bl	8002194 <dhcpserver_get_ip>
 8002480:	4603      	mov	r3, r0
 8002482:	617b      	str	r3, [r7, #20]
  if (0 == client_ip_addr.addr) {
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	2b00      	cmp	r3, #0
 8002488:	f000 8577 	beq.w	8002f7a <dhcpserver_fn+0xba6>
    goto end_of_fcn;
  }
#if DHCPS_DBG
  printf("ip %d.%d.%d.%d\r\n", client_ip_addr.addr & 0xff, (client_ip_addr.addr >> 8) & 0xff, (client_ip_addr.addr >> 16) & 0xff, (client_ip_addr.addr >> 24) & 0xff);
#endif
  etharp_add_static_entry(&client_ip_addr, &ethaddr);   //add ARP table entry
 800248c:	f107 021c 	add.w	r2, r7, #28
 8002490:	f107 0314 	add.w	r3, r7, #20
 8002494:	4611      	mov	r1, r2
 8002496:	4618      	mov	r0, r3
 8002498:	f015 ff32 	bl	8018300 <etharp_add_static_entry>
  /* request type. */
  val = pbuf_get_at(pbuf_in, UDP_DHCP_OPTIONS_OFS + 2);
 800249c:	21f2      	movs	r1, #242	; 0xf2
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f00d fc14 	bl	800fccc <pbuf_get_at>
 80024a4:	4603      	mov	r3, r0
 80024a6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  switch (val) {
 80024aa:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d004      	beq.n	80024bc <dhcpserver_fn+0xe8>
 80024b2:	2b03      	cmp	r3, #3
 80024b4:	f000 826a 	beq.w	800298c <dhcpserver_fn+0x5b8>
      }

      break;
    // do nothing if not defined above
    default:
      break;
 80024b8:	f000 bd62 	b.w	8002f80 <dhcpserver_fn+0xbac>
      pbuf_put_at(pbuf_out, DHCP_OP_OFS, DHCP_BOOTREPLY);
 80024bc:	2202      	movs	r2, #2
 80024be:	2100      	movs	r1, #0
 80024c0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80024c2:	f00d fc3c 	bl	800fd3e <pbuf_put_at>
      pbuf_put_at(pbuf_out, DHCP_SECS_OFS, 0);
 80024c6:	2200      	movs	r2, #0
 80024c8:	2108      	movs	r1, #8
 80024ca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80024cc:	f00d fc37 	bl	800fd3e <pbuf_put_at>
      pbuf_put_at(pbuf_out, DHCP_FLAGS_OFS, 0x0);       //unicast
 80024d0:	2200      	movs	r2, #0
 80024d2:	210a      	movs	r1, #10
 80024d4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80024d6:	f00d fc32 	bl	800fd3e <pbuf_put_at>
      pbuf_put_at(pbuf_out, DHCP_YIADDR_OFS, client_ip_addr.addr & 0xff);
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	461a      	mov	r2, r3
 80024e0:	2110      	movs	r1, #16
 80024e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80024e4:	f00d fc2b 	bl	800fd3e <pbuf_put_at>
      pbuf_put_at(pbuf_out, DHCP_YIADDR_OFS + 1, (client_ip_addr.addr >> 8) & 0xff);
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	0a1b      	lsrs	r3, r3, #8
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	461a      	mov	r2, r3
 80024f0:	2111      	movs	r1, #17
 80024f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80024f4:	f00d fc23 	bl	800fd3e <pbuf_put_at>
      pbuf_put_at(pbuf_out, DHCP_YIADDR_OFS + 2, (client_ip_addr.addr >> 16) & 0xff);
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	0c1b      	lsrs	r3, r3, #16
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	461a      	mov	r2, r3
 8002500:	2112      	movs	r1, #18
 8002502:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002504:	f00d fc1b 	bl	800fd3e <pbuf_put_at>
      pbuf_put_at(pbuf_out, DHCP_YIADDR_OFS + 3, (client_ip_addr.addr >> 24) & 0xff);
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	0e1b      	lsrs	r3, r3, #24
 800250c:	b2db      	uxtb	r3, r3
 800250e:	461a      	mov	r2, r3
 8002510:	2113      	movs	r1, #19
 8002512:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002514:	f00d fc13 	bl	800fd3e <pbuf_put_at>
      pbuf_put_at(pbuf_out, DHCP_SIADDR_OFS, 0);
 8002518:	2200      	movs	r2, #0
 800251a:	2114      	movs	r1, #20
 800251c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800251e:	f00d fc0e 	bl	800fd3e <pbuf_put_at>
      pbuf_put_at(pbuf_out, DHCP_SIADDR_OFS + 1, 0);
 8002522:	2200      	movs	r2, #0
 8002524:	2115      	movs	r1, #21
 8002526:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002528:	f00d fc09 	bl	800fd3e <pbuf_put_at>
      pbuf_put_at(pbuf_out, DHCP_SIADDR_OFS + 2, 0);
 800252c:	2200      	movs	r2, #0
 800252e:	2116      	movs	r1, #22
 8002530:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002532:	f00d fc04 	bl	800fd3e <pbuf_put_at>
      pbuf_put_at(pbuf_out, DHCP_SIADDR_OFS + 3, 0);
 8002536:	2200      	movs	r2, #0
 8002538:	2117      	movs	r1, #23
 800253a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800253c:	f00d fbff 	bl	800fd3e <pbuf_put_at>
      pbuf_put_at(pbuf_out, DHCP_COOKIE_OFS, (DHCP_MAGIC_COOKIE >> 24) & 0xff);
 8002540:	2263      	movs	r2, #99	; 0x63
 8002542:	21ec      	movs	r1, #236	; 0xec
 8002544:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002546:	f00d fbfa 	bl	800fd3e <pbuf_put_at>
      pbuf_put_at(pbuf_out, DHCP_COOKIE_OFS + 1, (DHCP_MAGIC_COOKIE >> 16) & 0xff);
 800254a:	2282      	movs	r2, #130	; 0x82
 800254c:	21ed      	movs	r1, #237	; 0xed
 800254e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002550:	f00d fbf5 	bl	800fd3e <pbuf_put_at>
      pbuf_put_at(pbuf_out, DHCP_COOKIE_OFS + 2, (DHCP_MAGIC_COOKIE >> 8) & 0xff);
 8002554:	2253      	movs	r2, #83	; 0x53
 8002556:	21ee      	movs	r1, #238	; 0xee
 8002558:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800255a:	f00d fbf0 	bl	800fd3e <pbuf_put_at>
      pbuf_put_at(pbuf_out, DHCP_COOKIE_OFS + 3, (DHCP_MAGIC_COOKIE) & 0xff);
 800255e:	2263      	movs	r2, #99	; 0x63
 8002560:	21ef      	movs	r1, #239	; 0xef
 8002562:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002564:	f00d fbeb 	bl	800fd3e <pbuf_put_at>
      options_offset = UDP_DHCP_OPTIONS_OFS;
 8002568:	23f0      	movs	r3, #240	; 0xf0
 800256a:	627b      	str	r3, [r7, #36]	; 0x24
      pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_MESSAGE_TYPE);
 800256c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256e:	b29b      	uxth	r3, r3
 8002570:	2235      	movs	r2, #53	; 0x35
 8002572:	4619      	mov	r1, r3
 8002574:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002576:	f00d fbe2 	bl	800fd3e <pbuf_put_at>
      options_offset++;
 800257a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257c:	3301      	adds	r3, #1
 800257e:	627b      	str	r3, [r7, #36]	; 0x24
      pbuf_put_at(pbuf_out, options_offset, 1);
 8002580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002582:	b29b      	uxth	r3, r3
 8002584:	2201      	movs	r2, #1
 8002586:	4619      	mov	r1, r3
 8002588:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800258a:	f00d fbd8 	bl	800fd3e <pbuf_put_at>
      options_offset++;
 800258e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002590:	3301      	adds	r3, #1
 8002592:	627b      	str	r3, [r7, #36]	; 0x24
      pbuf_put_at(pbuf_out, options_offset, DHCP_OFFER);
 8002594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002596:	b29b      	uxth	r3, r3
 8002598:	2202      	movs	r2, #2
 800259a:	4619      	mov	r1, r3
 800259c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800259e:	f00d fbce 	bl	800fd3e <pbuf_put_at>
      options_offset++;
 80025a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a4:	3301      	adds	r3, #1
 80025a6:	627b      	str	r3, [r7, #36]	; 0x24
      pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_SUBNET_MASK);
 80025a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025aa:	b29b      	uxth	r3, r3
 80025ac:	2201      	movs	r2, #1
 80025ae:	4619      	mov	r1, r3
 80025b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80025b2:	f00d fbc4 	bl	800fd3e <pbuf_put_at>
      options_offset++;
 80025b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b8:	3301      	adds	r3, #1
 80025ba:	627b      	str	r3, [r7, #36]	; 0x24
      pbuf_put_at(pbuf_out, options_offset, 4);
 80025bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025be:	b29b      	uxth	r3, r3
 80025c0:	2204      	movs	r2, #4
 80025c2:	4619      	mov	r1, r3
 80025c4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80025c6:	f00d fbba 	bl	800fd3e <pbuf_put_at>
      options_offset++;
 80025ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025cc:	3301      	adds	r3, #1
 80025ce:	627b      	str	r3, [r7, #36]	; 0x24
      IP4_ADDR(&r, ap_netmask_addr0, ap_netmask_addr1, ap_netmask_addr2, ap_netmask_addr3);
 80025d0:	4ba8      	ldr	r3, [pc, #672]	; (8002874 <dhcpserver_fn+0x4a0>)
 80025d2:	781b      	ldrb	r3, [r3, #0]
 80025d4:	061a      	lsls	r2, r3, #24
 80025d6:	4ba8      	ldr	r3, [pc, #672]	; (8002878 <dhcpserver_fn+0x4a4>)
 80025d8:	781b      	ldrb	r3, [r3, #0]
 80025da:	041b      	lsls	r3, r3, #16
 80025dc:	431a      	orrs	r2, r3
 80025de:	4ba7      	ldr	r3, [pc, #668]	; (800287c <dhcpserver_fn+0x4a8>)
 80025e0:	781b      	ldrb	r3, [r3, #0]
 80025e2:	021b      	lsls	r3, r3, #8
 80025e4:	4313      	orrs	r3, r2
 80025e6:	4aa6      	ldr	r2, [pc, #664]	; (8002880 <dhcpserver_fn+0x4ac>)
 80025e8:	7812      	ldrb	r2, [r2, #0]
 80025ea:	4313      	orrs	r3, r2
 80025ec:	061a      	lsls	r2, r3, #24
 80025ee:	4ba1      	ldr	r3, [pc, #644]	; (8002874 <dhcpserver_fn+0x4a0>)
 80025f0:	781b      	ldrb	r3, [r3, #0]
 80025f2:	0619      	lsls	r1, r3, #24
 80025f4:	4ba0      	ldr	r3, [pc, #640]	; (8002878 <dhcpserver_fn+0x4a4>)
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	041b      	lsls	r3, r3, #16
 80025fa:	4319      	orrs	r1, r3
 80025fc:	4b9f      	ldr	r3, [pc, #636]	; (800287c <dhcpserver_fn+0x4a8>)
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	021b      	lsls	r3, r3, #8
 8002602:	430b      	orrs	r3, r1
 8002604:	499e      	ldr	r1, [pc, #632]	; (8002880 <dhcpserver_fn+0x4ac>)
 8002606:	7809      	ldrb	r1, [r1, #0]
 8002608:	430b      	orrs	r3, r1
 800260a:	021b      	lsls	r3, r3, #8
 800260c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002610:	431a      	orrs	r2, r3
 8002612:	4b98      	ldr	r3, [pc, #608]	; (8002874 <dhcpserver_fn+0x4a0>)
 8002614:	781b      	ldrb	r3, [r3, #0]
 8002616:	0619      	lsls	r1, r3, #24
 8002618:	4b97      	ldr	r3, [pc, #604]	; (8002878 <dhcpserver_fn+0x4a4>)
 800261a:	781b      	ldrb	r3, [r3, #0]
 800261c:	041b      	lsls	r3, r3, #16
 800261e:	4319      	orrs	r1, r3
 8002620:	4b96      	ldr	r3, [pc, #600]	; (800287c <dhcpserver_fn+0x4a8>)
 8002622:	781b      	ldrb	r3, [r3, #0]
 8002624:	021b      	lsls	r3, r3, #8
 8002626:	430b      	orrs	r3, r1
 8002628:	4995      	ldr	r1, [pc, #596]	; (8002880 <dhcpserver_fn+0x4ac>)
 800262a:	7809      	ldrb	r1, [r1, #0]
 800262c:	430b      	orrs	r3, r1
 800262e:	0a1b      	lsrs	r3, r3, #8
 8002630:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002634:	431a      	orrs	r2, r3
 8002636:	4b8f      	ldr	r3, [pc, #572]	; (8002874 <dhcpserver_fn+0x4a0>)
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	0619      	lsls	r1, r3, #24
 800263c:	4b8e      	ldr	r3, [pc, #568]	; (8002878 <dhcpserver_fn+0x4a4>)
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	041b      	lsls	r3, r3, #16
 8002642:	4319      	orrs	r1, r3
 8002644:	4b8d      	ldr	r3, [pc, #564]	; (800287c <dhcpserver_fn+0x4a8>)
 8002646:	781b      	ldrb	r3, [r3, #0]
 8002648:	021b      	lsls	r3, r3, #8
 800264a:	430b      	orrs	r3, r1
 800264c:	498c      	ldr	r1, [pc, #560]	; (8002880 <dhcpserver_fn+0x4ac>)
 800264e:	7809      	ldrb	r1, [r1, #0]
 8002650:	430b      	orrs	r3, r1
 8002652:	0e1b      	lsrs	r3, r3, #24
 8002654:	4313      	orrs	r3, r2
 8002656:	613b      	str	r3, [r7, #16]
      pbuf_put_at(pbuf_out, options_offset, r.addr & 0xff);
 8002658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265a:	b29b      	uxth	r3, r3
 800265c:	693a      	ldr	r2, [r7, #16]
 800265e:	b2d2      	uxtb	r2, r2
 8002660:	4619      	mov	r1, r3
 8002662:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002664:	f00d fb6b 	bl	800fd3e <pbuf_put_at>
      pbuf_put_at(pbuf_out, options_offset + 1, (r.addr >> 8) & 0xff);
 8002668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266a:	b29b      	uxth	r3, r3
 800266c:	3301      	adds	r3, #1
 800266e:	b299      	uxth	r1, r3
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	0a1b      	lsrs	r3, r3, #8
 8002674:	b2db      	uxtb	r3, r3
 8002676:	461a      	mov	r2, r3
 8002678:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800267a:	f00d fb60 	bl	800fd3e <pbuf_put_at>
      pbuf_put_at(pbuf_out, options_offset + 2, (r.addr >> 16) & 0xff);
 800267e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002680:	b29b      	uxth	r3, r3
 8002682:	3302      	adds	r3, #2
 8002684:	b299      	uxth	r1, r3
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	0c1b      	lsrs	r3, r3, #16
 800268a:	b2db      	uxtb	r3, r3
 800268c:	461a      	mov	r2, r3
 800268e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002690:	f00d fb55 	bl	800fd3e <pbuf_put_at>
      pbuf_put_at(pbuf_out, options_offset + 3, (r.addr >> 24) & 0xff);
 8002694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002696:	b29b      	uxth	r3, r3
 8002698:	3303      	adds	r3, #3
 800269a:	b299      	uxth	r1, r3
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	0e1b      	lsrs	r3, r3, #24
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	461a      	mov	r2, r3
 80026a4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80026a6:	f00d fb4a 	bl	800fd3e <pbuf_put_at>
      options_offset += 4;
 80026aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ac:	3304      	adds	r3, #4
 80026ae:	627b      	str	r3, [r7, #36]	; 0x24
      pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_ROUTER);
 80026b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b2:	b29b      	uxth	r3, r3
 80026b4:	2203      	movs	r2, #3
 80026b6:	4619      	mov	r1, r3
 80026b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80026ba:	f00d fb40 	bl	800fd3e <pbuf_put_at>
      options_offset++;
 80026be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c0:	3301      	adds	r3, #1
 80026c2:	627b      	str	r3, [r7, #36]	; 0x24
      pbuf_put_at(pbuf_out, options_offset, 4);
 80026c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c6:	b29b      	uxth	r3, r3
 80026c8:	2204      	movs	r2, #4
 80026ca:	4619      	mov	r1, r3
 80026cc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80026ce:	f00d fb36 	bl	800fd3e <pbuf_put_at>
      options_offset++;
 80026d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d4:	3301      	adds	r3, #1
 80026d6:	627b      	str	r3, [r7, #36]	; 0x24
      IP4_ADDR(&r, ap_ip_addr0, ap_ip_addr1, ap_ip_addr2, ap_ip_addr3);
 80026d8:	4b6a      	ldr	r3, [pc, #424]	; (8002884 <dhcpserver_fn+0x4b0>)
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	061a      	lsls	r2, r3, #24
 80026de:	4b6a      	ldr	r3, [pc, #424]	; (8002888 <dhcpserver_fn+0x4b4>)
 80026e0:	781b      	ldrb	r3, [r3, #0]
 80026e2:	041b      	lsls	r3, r3, #16
 80026e4:	431a      	orrs	r2, r3
 80026e6:	4b69      	ldr	r3, [pc, #420]	; (800288c <dhcpserver_fn+0x4b8>)
 80026e8:	781b      	ldrb	r3, [r3, #0]
 80026ea:	021b      	lsls	r3, r3, #8
 80026ec:	4313      	orrs	r3, r2
 80026ee:	4a68      	ldr	r2, [pc, #416]	; (8002890 <dhcpserver_fn+0x4bc>)
 80026f0:	7812      	ldrb	r2, [r2, #0]
 80026f2:	4313      	orrs	r3, r2
 80026f4:	061a      	lsls	r2, r3, #24
 80026f6:	4b63      	ldr	r3, [pc, #396]	; (8002884 <dhcpserver_fn+0x4b0>)
 80026f8:	781b      	ldrb	r3, [r3, #0]
 80026fa:	0619      	lsls	r1, r3, #24
 80026fc:	4b62      	ldr	r3, [pc, #392]	; (8002888 <dhcpserver_fn+0x4b4>)
 80026fe:	781b      	ldrb	r3, [r3, #0]
 8002700:	041b      	lsls	r3, r3, #16
 8002702:	4319      	orrs	r1, r3
 8002704:	4b61      	ldr	r3, [pc, #388]	; (800288c <dhcpserver_fn+0x4b8>)
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	021b      	lsls	r3, r3, #8
 800270a:	430b      	orrs	r3, r1
 800270c:	4960      	ldr	r1, [pc, #384]	; (8002890 <dhcpserver_fn+0x4bc>)
 800270e:	7809      	ldrb	r1, [r1, #0]
 8002710:	430b      	orrs	r3, r1
 8002712:	021b      	lsls	r3, r3, #8
 8002714:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002718:	431a      	orrs	r2, r3
 800271a:	4b5a      	ldr	r3, [pc, #360]	; (8002884 <dhcpserver_fn+0x4b0>)
 800271c:	781b      	ldrb	r3, [r3, #0]
 800271e:	0619      	lsls	r1, r3, #24
 8002720:	4b59      	ldr	r3, [pc, #356]	; (8002888 <dhcpserver_fn+0x4b4>)
 8002722:	781b      	ldrb	r3, [r3, #0]
 8002724:	041b      	lsls	r3, r3, #16
 8002726:	4319      	orrs	r1, r3
 8002728:	4b58      	ldr	r3, [pc, #352]	; (800288c <dhcpserver_fn+0x4b8>)
 800272a:	781b      	ldrb	r3, [r3, #0]
 800272c:	021b      	lsls	r3, r3, #8
 800272e:	430b      	orrs	r3, r1
 8002730:	4957      	ldr	r1, [pc, #348]	; (8002890 <dhcpserver_fn+0x4bc>)
 8002732:	7809      	ldrb	r1, [r1, #0]
 8002734:	430b      	orrs	r3, r1
 8002736:	0a1b      	lsrs	r3, r3, #8
 8002738:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800273c:	431a      	orrs	r2, r3
 800273e:	4b51      	ldr	r3, [pc, #324]	; (8002884 <dhcpserver_fn+0x4b0>)
 8002740:	781b      	ldrb	r3, [r3, #0]
 8002742:	0619      	lsls	r1, r3, #24
 8002744:	4b50      	ldr	r3, [pc, #320]	; (8002888 <dhcpserver_fn+0x4b4>)
 8002746:	781b      	ldrb	r3, [r3, #0]
 8002748:	041b      	lsls	r3, r3, #16
 800274a:	4319      	orrs	r1, r3
 800274c:	4b4f      	ldr	r3, [pc, #316]	; (800288c <dhcpserver_fn+0x4b8>)
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	021b      	lsls	r3, r3, #8
 8002752:	430b      	orrs	r3, r1
 8002754:	494e      	ldr	r1, [pc, #312]	; (8002890 <dhcpserver_fn+0x4bc>)
 8002756:	7809      	ldrb	r1, [r1, #0]
 8002758:	430b      	orrs	r3, r1
 800275a:	0e1b      	lsrs	r3, r3, #24
 800275c:	4313      	orrs	r3, r2
 800275e:	613b      	str	r3, [r7, #16]
      pbuf_put_at(pbuf_out, options_offset, r.addr & 0xff);
 8002760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002762:	b29b      	uxth	r3, r3
 8002764:	693a      	ldr	r2, [r7, #16]
 8002766:	b2d2      	uxtb	r2, r2
 8002768:	4619      	mov	r1, r3
 800276a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800276c:	f00d fae7 	bl	800fd3e <pbuf_put_at>
      pbuf_put_at(pbuf_out, options_offset + 1, (r.addr >> 8) & 0xff);
 8002770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002772:	b29b      	uxth	r3, r3
 8002774:	3301      	adds	r3, #1
 8002776:	b299      	uxth	r1, r3
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	0a1b      	lsrs	r3, r3, #8
 800277c:	b2db      	uxtb	r3, r3
 800277e:	461a      	mov	r2, r3
 8002780:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002782:	f00d fadc 	bl	800fd3e <pbuf_put_at>
      pbuf_put_at(pbuf_out, options_offset + 2, (r.addr >> 16) & 0xff);
 8002786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002788:	b29b      	uxth	r3, r3
 800278a:	3302      	adds	r3, #2
 800278c:	b299      	uxth	r1, r3
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	0c1b      	lsrs	r3, r3, #16
 8002792:	b2db      	uxtb	r3, r3
 8002794:	461a      	mov	r2, r3
 8002796:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002798:	f00d fad1 	bl	800fd3e <pbuf_put_at>
      pbuf_put_at(pbuf_out, options_offset + 3, (r.addr >> 24) & 0xff);
 800279c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279e:	b29b      	uxth	r3, r3
 80027a0:	3303      	adds	r3, #3
 80027a2:	b299      	uxth	r1, r3
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	0e1b      	lsrs	r3, r3, #24
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	461a      	mov	r2, r3
 80027ac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80027ae:	f00d fac6 	bl	800fd3e <pbuf_put_at>
      options_offset += 4;
 80027b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b4:	3304      	adds	r3, #4
 80027b6:	627b      	str	r3, [r7, #36]	; 0x24
      pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_LEASE_TIME);
 80027b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ba:	b29b      	uxth	r3, r3
 80027bc:	2233      	movs	r2, #51	; 0x33
 80027be:	4619      	mov	r1, r3
 80027c0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80027c2:	f00d fabc 	bl	800fd3e <pbuf_put_at>
      options_offset++;
 80027c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c8:	3301      	adds	r3, #1
 80027ca:	627b      	str	r3, [r7, #36]	; 0x24
      pbuf_put_at(pbuf_out, options_offset, 4);
 80027cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ce:	b29b      	uxth	r3, r3
 80027d0:	2204      	movs	r2, #4
 80027d2:	4619      	mov	r1, r3
 80027d4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80027d6:	f00d fab2 	bl	800fd3e <pbuf_put_at>
      options_offset++;
 80027da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027dc:	3301      	adds	r3, #1
 80027de:	627b      	str	r3, [r7, #36]	; 0x24
      pbuf_put_at(pbuf_out, options_offset, (LEASE_TIME_1DAY >> 24) & 0xff);
 80027e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e2:	b29b      	uxth	r3, r3
 80027e4:	2200      	movs	r2, #0
 80027e6:	4619      	mov	r1, r3
 80027e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80027ea:	f00d faa8 	bl	800fd3e <pbuf_put_at>
      pbuf_put_at(pbuf_out, options_offset + 1, (LEASE_TIME_1DAY >> 16) & 0xff);
 80027ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f0:	b29b      	uxth	r3, r3
 80027f2:	3301      	adds	r3, #1
 80027f4:	b29b      	uxth	r3, r3
 80027f6:	2201      	movs	r2, #1
 80027f8:	4619      	mov	r1, r3
 80027fa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80027fc:	f00d fa9f 	bl	800fd3e <pbuf_put_at>
      pbuf_put_at(pbuf_out, options_offset + 2, (LEASE_TIME_1DAY >> 8) & 0xff);
 8002800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002802:	b29b      	uxth	r3, r3
 8002804:	3302      	adds	r3, #2
 8002806:	b29b      	uxth	r3, r3
 8002808:	2251      	movs	r2, #81	; 0x51
 800280a:	4619      	mov	r1, r3
 800280c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800280e:	f00d fa96 	bl	800fd3e <pbuf_put_at>
      pbuf_put_at(pbuf_out, options_offset + 3, (LEASE_TIME_1DAY) & 0xff);
 8002812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002814:	b29b      	uxth	r3, r3
 8002816:	3303      	adds	r3, #3
 8002818:	b29b      	uxth	r3, r3
 800281a:	2280      	movs	r2, #128	; 0x80
 800281c:	4619      	mov	r1, r3
 800281e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002820:	f00d fa8d 	bl	800fd3e <pbuf_put_at>
      options_offset += 4;
 8002824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002826:	3304      	adds	r3, #4
 8002828:	627b      	str	r3, [r7, #36]	; 0x24
      pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_SERVER_ID);
 800282a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800282c:	b29b      	uxth	r3, r3
 800282e:	2236      	movs	r2, #54	; 0x36
 8002830:	4619      	mov	r1, r3
 8002832:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002834:	f00d fa83 	bl	800fd3e <pbuf_put_at>
      options_offset++;
 8002838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283a:	3301      	adds	r3, #1
 800283c:	627b      	str	r3, [r7, #36]	; 0x24
      pbuf_put_at(pbuf_out, options_offset, 4);
 800283e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002840:	b29b      	uxth	r3, r3
 8002842:	2204      	movs	r2, #4
 8002844:	4619      	mov	r1, r3
 8002846:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002848:	f00d fa79 	bl	800fd3e <pbuf_put_at>
      options_offset++;
 800284c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284e:	3301      	adds	r3, #1
 8002850:	627b      	str	r3, [r7, #36]	; 0x24
      IP4_ADDR(&r, ap_ip_addr0, ap_ip_addr1, ap_ip_addr2, ap_ip_addr3);
 8002852:	4b0c      	ldr	r3, [pc, #48]	; (8002884 <dhcpserver_fn+0x4b0>)
 8002854:	781b      	ldrb	r3, [r3, #0]
 8002856:	061a      	lsls	r2, r3, #24
 8002858:	4b0b      	ldr	r3, [pc, #44]	; (8002888 <dhcpserver_fn+0x4b4>)
 800285a:	781b      	ldrb	r3, [r3, #0]
 800285c:	041b      	lsls	r3, r3, #16
 800285e:	431a      	orrs	r2, r3
 8002860:	4b0a      	ldr	r3, [pc, #40]	; (800288c <dhcpserver_fn+0x4b8>)
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	021b      	lsls	r3, r3, #8
 8002866:	4313      	orrs	r3, r2
 8002868:	4a09      	ldr	r2, [pc, #36]	; (8002890 <dhcpserver_fn+0x4bc>)
 800286a:	7812      	ldrb	r2, [r2, #0]
 800286c:	4313      	orrs	r3, r2
 800286e:	061a      	lsls	r2, r3, #24
 8002870:	e010      	b.n	8002894 <dhcpserver_fn+0x4c0>
 8002872:	bf00      	nop
 8002874:	200000a6 	.word	0x200000a6
 8002878:	200000a7 	.word	0x200000a7
 800287c:	200000a8 	.word	0x200000a8
 8002880:	200007f0 	.word	0x200007f0
 8002884:	200000a2 	.word	0x200000a2
 8002888:	200000a3 	.word	0x200000a3
 800288c:	200000a4 	.word	0x200000a4
 8002890:	200000a5 	.word	0x200000a5
 8002894:	4b54      	ldr	r3, [pc, #336]	; (80029e8 <dhcpserver_fn+0x614>)
 8002896:	781b      	ldrb	r3, [r3, #0]
 8002898:	0619      	lsls	r1, r3, #24
 800289a:	4b54      	ldr	r3, [pc, #336]	; (80029ec <dhcpserver_fn+0x618>)
 800289c:	781b      	ldrb	r3, [r3, #0]
 800289e:	041b      	lsls	r3, r3, #16
 80028a0:	4319      	orrs	r1, r3
 80028a2:	4b53      	ldr	r3, [pc, #332]	; (80029f0 <dhcpserver_fn+0x61c>)
 80028a4:	781b      	ldrb	r3, [r3, #0]
 80028a6:	021b      	lsls	r3, r3, #8
 80028a8:	430b      	orrs	r3, r1
 80028aa:	4952      	ldr	r1, [pc, #328]	; (80029f4 <dhcpserver_fn+0x620>)
 80028ac:	7809      	ldrb	r1, [r1, #0]
 80028ae:	430b      	orrs	r3, r1
 80028b0:	021b      	lsls	r3, r3, #8
 80028b2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80028b6:	431a      	orrs	r2, r3
 80028b8:	4b4b      	ldr	r3, [pc, #300]	; (80029e8 <dhcpserver_fn+0x614>)
 80028ba:	781b      	ldrb	r3, [r3, #0]
 80028bc:	0619      	lsls	r1, r3, #24
 80028be:	4b4b      	ldr	r3, [pc, #300]	; (80029ec <dhcpserver_fn+0x618>)
 80028c0:	781b      	ldrb	r3, [r3, #0]
 80028c2:	041b      	lsls	r3, r3, #16
 80028c4:	4319      	orrs	r1, r3
 80028c6:	4b4a      	ldr	r3, [pc, #296]	; (80029f0 <dhcpserver_fn+0x61c>)
 80028c8:	781b      	ldrb	r3, [r3, #0]
 80028ca:	021b      	lsls	r3, r3, #8
 80028cc:	430b      	orrs	r3, r1
 80028ce:	4949      	ldr	r1, [pc, #292]	; (80029f4 <dhcpserver_fn+0x620>)
 80028d0:	7809      	ldrb	r1, [r1, #0]
 80028d2:	430b      	orrs	r3, r1
 80028d4:	0a1b      	lsrs	r3, r3, #8
 80028d6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80028da:	431a      	orrs	r2, r3
 80028dc:	4b42      	ldr	r3, [pc, #264]	; (80029e8 <dhcpserver_fn+0x614>)
 80028de:	781b      	ldrb	r3, [r3, #0]
 80028e0:	0619      	lsls	r1, r3, #24
 80028e2:	4b42      	ldr	r3, [pc, #264]	; (80029ec <dhcpserver_fn+0x618>)
 80028e4:	781b      	ldrb	r3, [r3, #0]
 80028e6:	041b      	lsls	r3, r3, #16
 80028e8:	4319      	orrs	r1, r3
 80028ea:	4b41      	ldr	r3, [pc, #260]	; (80029f0 <dhcpserver_fn+0x61c>)
 80028ec:	781b      	ldrb	r3, [r3, #0]
 80028ee:	021b      	lsls	r3, r3, #8
 80028f0:	430b      	orrs	r3, r1
 80028f2:	4940      	ldr	r1, [pc, #256]	; (80029f4 <dhcpserver_fn+0x620>)
 80028f4:	7809      	ldrb	r1, [r1, #0]
 80028f6:	430b      	orrs	r3, r1
 80028f8:	0e1b      	lsrs	r3, r3, #24
 80028fa:	4313      	orrs	r3, r2
 80028fc:	613b      	str	r3, [r7, #16]
      pbuf_put_at(pbuf_out, options_offset, r.addr & 0xff);
 80028fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002900:	b29b      	uxth	r3, r3
 8002902:	693a      	ldr	r2, [r7, #16]
 8002904:	b2d2      	uxtb	r2, r2
 8002906:	4619      	mov	r1, r3
 8002908:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800290a:	f00d fa18 	bl	800fd3e <pbuf_put_at>
      pbuf_put_at(pbuf_out, options_offset + 1, (r.addr >> 8) & 0xff);
 800290e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002910:	b29b      	uxth	r3, r3
 8002912:	3301      	adds	r3, #1
 8002914:	b299      	uxth	r1, r3
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	0a1b      	lsrs	r3, r3, #8
 800291a:	b2db      	uxtb	r3, r3
 800291c:	461a      	mov	r2, r3
 800291e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002920:	f00d fa0d 	bl	800fd3e <pbuf_put_at>
      pbuf_put_at(pbuf_out, options_offset + 2, (r.addr >> 16) & 0xff);
 8002924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002926:	b29b      	uxth	r3, r3
 8002928:	3302      	adds	r3, #2
 800292a:	b299      	uxth	r1, r3
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	0c1b      	lsrs	r3, r3, #16
 8002930:	b2db      	uxtb	r3, r3
 8002932:	461a      	mov	r2, r3
 8002934:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002936:	f00d fa02 	bl	800fd3e <pbuf_put_at>
      pbuf_put_at(pbuf_out, options_offset + 3, (r.addr >> 24) & 0xff);
 800293a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293c:	b29b      	uxth	r3, r3
 800293e:	3303      	adds	r3, #3
 8002940:	b299      	uxth	r1, r3
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	0e1b      	lsrs	r3, r3, #24
 8002946:	b2db      	uxtb	r3, r3
 8002948:	461a      	mov	r2, r3
 800294a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800294c:	f00d f9f7 	bl	800fd3e <pbuf_put_at>
      options_offset += 4;
 8002950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002952:	3304      	adds	r3, #4
 8002954:	627b      	str	r3, [r7, #36]	; 0x24
      pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_END);
 8002956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002958:	b29b      	uxth	r3, r3
 800295a:	22ff      	movs	r2, #255	; 0xff
 800295c:	4619      	mov	r1, r3
 800295e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002960:	f00d f9ed 	bl	800fd3e <pbuf_put_at>
      options_offset++;
 8002964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002966:	3301      	adds	r3, #1
 8002968:	627b      	str	r3, [r7, #36]	; 0x24
      pbuf_realloc(pbuf_out, options_offset);
 800296a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296c:	b29b      	uxth	r3, r3
 800296e:	4619      	mov	r1, r3
 8002970:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002972:	f00c fc43 	bl	800f1fc <pbuf_realloc>
      if (ERR_OK != udp_sendto(dhcp_pcb, pbuf_out, &client_ip_addr, DHCP_CLIENT_PORT)) {
 8002976:	4b20      	ldr	r3, [pc, #128]	; (80029f8 <dhcpserver_fn+0x624>)
 8002978:	6818      	ldr	r0, [r3, #0]
 800297a:	f107 0214 	add.w	r2, r7, #20
 800297e:	2344      	movs	r3, #68	; 0x44
 8002980:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002982:	f012 ff2f 	bl	80157e4 <udp_sendto>
 8002986:	4603      	mov	r3, r0
 8002988:	2b00      	cmp	r3, #0
      break;
 800298a:	e2f9      	b.n	8002f80 <dhcpserver_fn+0xbac>
      pbuf_put_at(pbuf_out, DHCP_OP_OFS, DHCP_BOOTREPLY);
 800298c:	2202      	movs	r2, #2
 800298e:	2100      	movs	r1, #0
 8002990:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002992:	f00d f9d4 	bl	800fd3e <pbuf_put_at>
      pbuf_put_at(pbuf_out, DHCP_SECS_OFS, 0);
 8002996:	2200      	movs	r2, #0
 8002998:	2108      	movs	r1, #8
 800299a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800299c:	f00d f9cf 	bl	800fd3e <pbuf_put_at>
      flags = 0;
 80029a0:	2300      	movs	r3, #0
 80029a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      flags = pbuf_get_at(pbuf_in, DHCP_FLAGS_OFS);
 80029a6:	210a      	movs	r1, #10
 80029a8:	6878      	ldr	r0, [r7, #4]
 80029aa:	f00d f98f 	bl	800fccc <pbuf_get_at>
 80029ae:	4603      	mov	r3, r0
 80029b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      if (flags & 0x80) {
 80029b4:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	da1f      	bge.n	80029fc <dhcpserver_fn+0x628>
        flags = pbuf_get_at(pbuf_out, DHCP_FLAGS_OFS);
 80029bc:	210a      	movs	r1, #10
 80029be:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80029c0:	f00d f984 	bl	800fccc <pbuf_get_at>
 80029c4:	4603      	mov	r3, r0
 80029c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        flags |= 0x80;
 80029ca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80029ce:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80029d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        pbuf_put_at(pbuf_out, DHCP_FLAGS_OFS, flags);
 80029d6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80029da:	461a      	mov	r2, r3
 80029dc:	210a      	movs	r1, #10
 80029de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80029e0:	f00d f9ad 	bl	800fd3e <pbuf_put_at>
 80029e4:	e01e      	b.n	8002a24 <dhcpserver_fn+0x650>
 80029e6:	bf00      	nop
 80029e8:	200000a2 	.word	0x200000a2
 80029ec:	200000a3 	.word	0x200000a3
 80029f0:	200000a4 	.word	0x200000a4
 80029f4:	200000a5 	.word	0x200000a5
 80029f8:	200004f0 	.word	0x200004f0
        flags = pbuf_get_at(pbuf_out, DHCP_FLAGS_OFS);
 80029fc:	210a      	movs	r1, #10
 80029fe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002a00:	f00d f964 	bl	800fccc <pbuf_get_at>
 8002a04:	4603      	mov	r3, r0
 8002a06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        flags &= ~0x80;
 8002a0a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002a0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        pbuf_put_at(pbuf_out, DHCP_FLAGS_OFS, flags);
 8002a16:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	210a      	movs	r1, #10
 8002a1e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002a20:	f00d f98d 	bl	800fd3e <pbuf_put_at>
      if (0 == dhcpserver_find_requested_ip(pbuf_in, (uint8_t *)&client_requested_addr)) {
 8002a24:	f107 0318 	add.w	r3, r7, #24
 8002a28:	4619      	mov	r1, r3
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f7ff fc7e 	bl	800232c <dhcpserver_find_requested_ip>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	f000 82a3 	beq.w	8002f7e <dhcpserver_fn+0xbaa>
      if (client_requested_addr == client_ip_addr.addr) {
 8002a38:	697a      	ldr	r2, [r7, #20]
 8002a3a:	69bb      	ldr	r3, [r7, #24]
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	f040 8249 	bne.w	8002ed4 <dhcpserver_fn+0xb00>
        pbuf_put_at(pbuf_out, DHCP_YIADDR_OFS, client_ip_addr.addr & 0xff);
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	461a      	mov	r2, r3
 8002a48:	2110      	movs	r1, #16
 8002a4a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002a4c:	f00d f977 	bl	800fd3e <pbuf_put_at>
        pbuf_put_at(pbuf_out, DHCP_YIADDR_OFS + 1, (client_ip_addr.addr >> 8) & 0xff);
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	0a1b      	lsrs	r3, r3, #8
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	461a      	mov	r2, r3
 8002a58:	2111      	movs	r1, #17
 8002a5a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002a5c:	f00d f96f 	bl	800fd3e <pbuf_put_at>
        pbuf_put_at(pbuf_out, DHCP_YIADDR_OFS + 2, (client_ip_addr.addr >> 16) & 0xff);
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	0c1b      	lsrs	r3, r3, #16
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	461a      	mov	r2, r3
 8002a68:	2112      	movs	r1, #18
 8002a6a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002a6c:	f00d f967 	bl	800fd3e <pbuf_put_at>
        pbuf_put_at(pbuf_out, DHCP_YIADDR_OFS + 3, (client_ip_addr.addr >> 24) & 0xff);
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	0e1b      	lsrs	r3, r3, #24
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	461a      	mov	r2, r3
 8002a78:	2113      	movs	r1, #19
 8002a7a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002a7c:	f00d f95f 	bl	800fd3e <pbuf_put_at>
        pbuf_put_at(pbuf_out, DHCP_SIADDR_OFS, 0);
 8002a80:	2200      	movs	r2, #0
 8002a82:	2114      	movs	r1, #20
 8002a84:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002a86:	f00d f95a 	bl	800fd3e <pbuf_put_at>
        pbuf_put_at(pbuf_out, DHCP_SIADDR_OFS + 1, 0);
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	2115      	movs	r1, #21
 8002a8e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002a90:	f00d f955 	bl	800fd3e <pbuf_put_at>
        pbuf_put_at(pbuf_out, DHCP_SIADDR_OFS + 2, 0);
 8002a94:	2200      	movs	r2, #0
 8002a96:	2116      	movs	r1, #22
 8002a98:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002a9a:	f00d f950 	bl	800fd3e <pbuf_put_at>
        pbuf_put_at(pbuf_out, DHCP_SIADDR_OFS + 3, 0);
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	2117      	movs	r1, #23
 8002aa2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002aa4:	f00d f94b 	bl	800fd3e <pbuf_put_at>
        pbuf_put_at(pbuf_out, DHCP_COOKIE_OFS, (DHCP_MAGIC_COOKIE >> 24) & 0xff);
 8002aa8:	2263      	movs	r2, #99	; 0x63
 8002aaa:	21ec      	movs	r1, #236	; 0xec
 8002aac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002aae:	f00d f946 	bl	800fd3e <pbuf_put_at>
        pbuf_put_at(pbuf_out, DHCP_COOKIE_OFS + 1, (DHCP_MAGIC_COOKIE >> 16) & 0xff);
 8002ab2:	2282      	movs	r2, #130	; 0x82
 8002ab4:	21ed      	movs	r1, #237	; 0xed
 8002ab6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002ab8:	f00d f941 	bl	800fd3e <pbuf_put_at>
        pbuf_put_at(pbuf_out, DHCP_COOKIE_OFS + 2, (DHCP_MAGIC_COOKIE >> 8) & 0xff);
 8002abc:	2253      	movs	r2, #83	; 0x53
 8002abe:	21ee      	movs	r1, #238	; 0xee
 8002ac0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002ac2:	f00d f93c 	bl	800fd3e <pbuf_put_at>
        pbuf_put_at(pbuf_out, DHCP_COOKIE_OFS + 3, (DHCP_MAGIC_COOKIE) & 0xff);
 8002ac6:	2263      	movs	r2, #99	; 0x63
 8002ac8:	21ef      	movs	r1, #239	; 0xef
 8002aca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002acc:	f00d f937 	bl	800fd3e <pbuf_put_at>
        options_offset = UDP_DHCP_OPTIONS_OFS;
 8002ad0:	23f0      	movs	r3, #240	; 0xf0
 8002ad2:	627b      	str	r3, [r7, #36]	; 0x24
        pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_MESSAGE_TYPE);
 8002ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad6:	b29b      	uxth	r3, r3
 8002ad8:	2235      	movs	r2, #53	; 0x35
 8002ada:	4619      	mov	r1, r3
 8002adc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002ade:	f00d f92e 	bl	800fd3e <pbuf_put_at>
        options_offset++;
 8002ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae4:	3301      	adds	r3, #1
 8002ae6:	627b      	str	r3, [r7, #36]	; 0x24
        pbuf_put_at(pbuf_out, options_offset, 1);
 8002ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aea:	b29b      	uxth	r3, r3
 8002aec:	2201      	movs	r2, #1
 8002aee:	4619      	mov	r1, r3
 8002af0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002af2:	f00d f924 	bl	800fd3e <pbuf_put_at>
        options_offset++;
 8002af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af8:	3301      	adds	r3, #1
 8002afa:	627b      	str	r3, [r7, #36]	; 0x24
        pbuf_put_at(pbuf_out, options_offset, DHCP_ACK);
 8002afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002afe:	b29b      	uxth	r3, r3
 8002b00:	2205      	movs	r2, #5
 8002b02:	4619      	mov	r1, r3
 8002b04:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002b06:	f00d f91a 	bl	800fd3e <pbuf_put_at>
        options_offset++;
 8002b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b0c:	3301      	adds	r3, #1
 8002b0e:	627b      	str	r3, [r7, #36]	; 0x24
        pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_SUBNET_MASK);
 8002b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b12:	b29b      	uxth	r3, r3
 8002b14:	2201      	movs	r2, #1
 8002b16:	4619      	mov	r1, r3
 8002b18:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002b1a:	f00d f910 	bl	800fd3e <pbuf_put_at>
        options_offset++;
 8002b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b20:	3301      	adds	r3, #1
 8002b22:	627b      	str	r3, [r7, #36]	; 0x24
        pbuf_put_at(pbuf_out, options_offset, 4);
 8002b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b26:	b29b      	uxth	r3, r3
 8002b28:	2204      	movs	r2, #4
 8002b2a:	4619      	mov	r1, r3
 8002b2c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002b2e:	f00d f906 	bl	800fd3e <pbuf_put_at>
        options_offset++;
 8002b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b34:	3301      	adds	r3, #1
 8002b36:	627b      	str	r3, [r7, #36]	; 0x24
        IP4_ADDR(&r, ap_netmask_addr0, ap_netmask_addr1, ap_netmask_addr2, ap_netmask_addr3);
 8002b38:	4ba8      	ldr	r3, [pc, #672]	; (8002ddc <dhcpserver_fn+0xa08>)
 8002b3a:	781b      	ldrb	r3, [r3, #0]
 8002b3c:	061a      	lsls	r2, r3, #24
 8002b3e:	4ba8      	ldr	r3, [pc, #672]	; (8002de0 <dhcpserver_fn+0xa0c>)
 8002b40:	781b      	ldrb	r3, [r3, #0]
 8002b42:	041b      	lsls	r3, r3, #16
 8002b44:	431a      	orrs	r2, r3
 8002b46:	4ba7      	ldr	r3, [pc, #668]	; (8002de4 <dhcpserver_fn+0xa10>)
 8002b48:	781b      	ldrb	r3, [r3, #0]
 8002b4a:	021b      	lsls	r3, r3, #8
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	4aa6      	ldr	r2, [pc, #664]	; (8002de8 <dhcpserver_fn+0xa14>)
 8002b50:	7812      	ldrb	r2, [r2, #0]
 8002b52:	4313      	orrs	r3, r2
 8002b54:	061a      	lsls	r2, r3, #24
 8002b56:	4ba1      	ldr	r3, [pc, #644]	; (8002ddc <dhcpserver_fn+0xa08>)
 8002b58:	781b      	ldrb	r3, [r3, #0]
 8002b5a:	0619      	lsls	r1, r3, #24
 8002b5c:	4ba0      	ldr	r3, [pc, #640]	; (8002de0 <dhcpserver_fn+0xa0c>)
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	041b      	lsls	r3, r3, #16
 8002b62:	4319      	orrs	r1, r3
 8002b64:	4b9f      	ldr	r3, [pc, #636]	; (8002de4 <dhcpserver_fn+0xa10>)
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	021b      	lsls	r3, r3, #8
 8002b6a:	430b      	orrs	r3, r1
 8002b6c:	499e      	ldr	r1, [pc, #632]	; (8002de8 <dhcpserver_fn+0xa14>)
 8002b6e:	7809      	ldrb	r1, [r1, #0]
 8002b70:	430b      	orrs	r3, r1
 8002b72:	021b      	lsls	r3, r3, #8
 8002b74:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002b78:	431a      	orrs	r2, r3
 8002b7a:	4b98      	ldr	r3, [pc, #608]	; (8002ddc <dhcpserver_fn+0xa08>)
 8002b7c:	781b      	ldrb	r3, [r3, #0]
 8002b7e:	0619      	lsls	r1, r3, #24
 8002b80:	4b97      	ldr	r3, [pc, #604]	; (8002de0 <dhcpserver_fn+0xa0c>)
 8002b82:	781b      	ldrb	r3, [r3, #0]
 8002b84:	041b      	lsls	r3, r3, #16
 8002b86:	4319      	orrs	r1, r3
 8002b88:	4b96      	ldr	r3, [pc, #600]	; (8002de4 <dhcpserver_fn+0xa10>)
 8002b8a:	781b      	ldrb	r3, [r3, #0]
 8002b8c:	021b      	lsls	r3, r3, #8
 8002b8e:	430b      	orrs	r3, r1
 8002b90:	4995      	ldr	r1, [pc, #596]	; (8002de8 <dhcpserver_fn+0xa14>)
 8002b92:	7809      	ldrb	r1, [r1, #0]
 8002b94:	430b      	orrs	r3, r1
 8002b96:	0a1b      	lsrs	r3, r3, #8
 8002b98:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002b9c:	431a      	orrs	r2, r3
 8002b9e:	4b8f      	ldr	r3, [pc, #572]	; (8002ddc <dhcpserver_fn+0xa08>)
 8002ba0:	781b      	ldrb	r3, [r3, #0]
 8002ba2:	0619      	lsls	r1, r3, #24
 8002ba4:	4b8e      	ldr	r3, [pc, #568]	; (8002de0 <dhcpserver_fn+0xa0c>)
 8002ba6:	781b      	ldrb	r3, [r3, #0]
 8002ba8:	041b      	lsls	r3, r3, #16
 8002baa:	4319      	orrs	r1, r3
 8002bac:	4b8d      	ldr	r3, [pc, #564]	; (8002de4 <dhcpserver_fn+0xa10>)
 8002bae:	781b      	ldrb	r3, [r3, #0]
 8002bb0:	021b      	lsls	r3, r3, #8
 8002bb2:	430b      	orrs	r3, r1
 8002bb4:	498c      	ldr	r1, [pc, #560]	; (8002de8 <dhcpserver_fn+0xa14>)
 8002bb6:	7809      	ldrb	r1, [r1, #0]
 8002bb8:	430b      	orrs	r3, r1
 8002bba:	0e1b      	lsrs	r3, r3, #24
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	613b      	str	r3, [r7, #16]
        pbuf_put_at(pbuf_out, options_offset, r.addr & 0xff);
 8002bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc2:	b29b      	uxth	r3, r3
 8002bc4:	693a      	ldr	r2, [r7, #16]
 8002bc6:	b2d2      	uxtb	r2, r2
 8002bc8:	4619      	mov	r1, r3
 8002bca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002bcc:	f00d f8b7 	bl	800fd3e <pbuf_put_at>
        pbuf_put_at(pbuf_out, options_offset + 1, (r.addr >> 8) & 0xff);
 8002bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd2:	b29b      	uxth	r3, r3
 8002bd4:	3301      	adds	r3, #1
 8002bd6:	b299      	uxth	r1, r3
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	0a1b      	lsrs	r3, r3, #8
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	461a      	mov	r2, r3
 8002be0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002be2:	f00d f8ac 	bl	800fd3e <pbuf_put_at>
        pbuf_put_at(pbuf_out, options_offset + 2, (r.addr >> 16) & 0xff);
 8002be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be8:	b29b      	uxth	r3, r3
 8002bea:	3302      	adds	r3, #2
 8002bec:	b299      	uxth	r1, r3
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	0c1b      	lsrs	r3, r3, #16
 8002bf2:	b2db      	uxtb	r3, r3
 8002bf4:	461a      	mov	r2, r3
 8002bf6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002bf8:	f00d f8a1 	bl	800fd3e <pbuf_put_at>
        pbuf_put_at(pbuf_out, options_offset + 3, (r.addr >> 24) & 0xff);
 8002bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bfe:	b29b      	uxth	r3, r3
 8002c00:	3303      	adds	r3, #3
 8002c02:	b299      	uxth	r1, r3
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	0e1b      	lsrs	r3, r3, #24
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002c0e:	f00d f896 	bl	800fd3e <pbuf_put_at>
        options_offset += 4;
 8002c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c14:	3304      	adds	r3, #4
 8002c16:	627b      	str	r3, [r7, #36]	; 0x24
        pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_ROUTER);
 8002c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c1a:	b29b      	uxth	r3, r3
 8002c1c:	2203      	movs	r2, #3
 8002c1e:	4619      	mov	r1, r3
 8002c20:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002c22:	f00d f88c 	bl	800fd3e <pbuf_put_at>
        options_offset++;
 8002c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c28:	3301      	adds	r3, #1
 8002c2a:	627b      	str	r3, [r7, #36]	; 0x24
        pbuf_put_at(pbuf_out, options_offset, 4);
 8002c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c2e:	b29b      	uxth	r3, r3
 8002c30:	2204      	movs	r2, #4
 8002c32:	4619      	mov	r1, r3
 8002c34:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002c36:	f00d f882 	bl	800fd3e <pbuf_put_at>
        options_offset++;
 8002c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3c:	3301      	adds	r3, #1
 8002c3e:	627b      	str	r3, [r7, #36]	; 0x24
        IP4_ADDR(&r, ap_ip_addr0, ap_ip_addr1, ap_ip_addr2, ap_ip_addr3);
 8002c40:	4b6a      	ldr	r3, [pc, #424]	; (8002dec <dhcpserver_fn+0xa18>)
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	061a      	lsls	r2, r3, #24
 8002c46:	4b6a      	ldr	r3, [pc, #424]	; (8002df0 <dhcpserver_fn+0xa1c>)
 8002c48:	781b      	ldrb	r3, [r3, #0]
 8002c4a:	041b      	lsls	r3, r3, #16
 8002c4c:	431a      	orrs	r2, r3
 8002c4e:	4b69      	ldr	r3, [pc, #420]	; (8002df4 <dhcpserver_fn+0xa20>)
 8002c50:	781b      	ldrb	r3, [r3, #0]
 8002c52:	021b      	lsls	r3, r3, #8
 8002c54:	4313      	orrs	r3, r2
 8002c56:	4a68      	ldr	r2, [pc, #416]	; (8002df8 <dhcpserver_fn+0xa24>)
 8002c58:	7812      	ldrb	r2, [r2, #0]
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	061a      	lsls	r2, r3, #24
 8002c5e:	4b63      	ldr	r3, [pc, #396]	; (8002dec <dhcpserver_fn+0xa18>)
 8002c60:	781b      	ldrb	r3, [r3, #0]
 8002c62:	0619      	lsls	r1, r3, #24
 8002c64:	4b62      	ldr	r3, [pc, #392]	; (8002df0 <dhcpserver_fn+0xa1c>)
 8002c66:	781b      	ldrb	r3, [r3, #0]
 8002c68:	041b      	lsls	r3, r3, #16
 8002c6a:	4319      	orrs	r1, r3
 8002c6c:	4b61      	ldr	r3, [pc, #388]	; (8002df4 <dhcpserver_fn+0xa20>)
 8002c6e:	781b      	ldrb	r3, [r3, #0]
 8002c70:	021b      	lsls	r3, r3, #8
 8002c72:	430b      	orrs	r3, r1
 8002c74:	4960      	ldr	r1, [pc, #384]	; (8002df8 <dhcpserver_fn+0xa24>)
 8002c76:	7809      	ldrb	r1, [r1, #0]
 8002c78:	430b      	orrs	r3, r1
 8002c7a:	021b      	lsls	r3, r3, #8
 8002c7c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002c80:	431a      	orrs	r2, r3
 8002c82:	4b5a      	ldr	r3, [pc, #360]	; (8002dec <dhcpserver_fn+0xa18>)
 8002c84:	781b      	ldrb	r3, [r3, #0]
 8002c86:	0619      	lsls	r1, r3, #24
 8002c88:	4b59      	ldr	r3, [pc, #356]	; (8002df0 <dhcpserver_fn+0xa1c>)
 8002c8a:	781b      	ldrb	r3, [r3, #0]
 8002c8c:	041b      	lsls	r3, r3, #16
 8002c8e:	4319      	orrs	r1, r3
 8002c90:	4b58      	ldr	r3, [pc, #352]	; (8002df4 <dhcpserver_fn+0xa20>)
 8002c92:	781b      	ldrb	r3, [r3, #0]
 8002c94:	021b      	lsls	r3, r3, #8
 8002c96:	430b      	orrs	r3, r1
 8002c98:	4957      	ldr	r1, [pc, #348]	; (8002df8 <dhcpserver_fn+0xa24>)
 8002c9a:	7809      	ldrb	r1, [r1, #0]
 8002c9c:	430b      	orrs	r3, r1
 8002c9e:	0a1b      	lsrs	r3, r3, #8
 8002ca0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002ca4:	431a      	orrs	r2, r3
 8002ca6:	4b51      	ldr	r3, [pc, #324]	; (8002dec <dhcpserver_fn+0xa18>)
 8002ca8:	781b      	ldrb	r3, [r3, #0]
 8002caa:	0619      	lsls	r1, r3, #24
 8002cac:	4b50      	ldr	r3, [pc, #320]	; (8002df0 <dhcpserver_fn+0xa1c>)
 8002cae:	781b      	ldrb	r3, [r3, #0]
 8002cb0:	041b      	lsls	r3, r3, #16
 8002cb2:	4319      	orrs	r1, r3
 8002cb4:	4b4f      	ldr	r3, [pc, #316]	; (8002df4 <dhcpserver_fn+0xa20>)
 8002cb6:	781b      	ldrb	r3, [r3, #0]
 8002cb8:	021b      	lsls	r3, r3, #8
 8002cba:	430b      	orrs	r3, r1
 8002cbc:	494e      	ldr	r1, [pc, #312]	; (8002df8 <dhcpserver_fn+0xa24>)
 8002cbe:	7809      	ldrb	r1, [r1, #0]
 8002cc0:	430b      	orrs	r3, r1
 8002cc2:	0e1b      	lsrs	r3, r3, #24
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	613b      	str	r3, [r7, #16]
        pbuf_put_at(pbuf_out, options_offset, r.addr & 0xff);
 8002cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cca:	b29b      	uxth	r3, r3
 8002ccc:	693a      	ldr	r2, [r7, #16]
 8002cce:	b2d2      	uxtb	r2, r2
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002cd4:	f00d f833 	bl	800fd3e <pbuf_put_at>
        pbuf_put_at(pbuf_out, options_offset + 1, (r.addr >> 8) & 0xff);
 8002cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cda:	b29b      	uxth	r3, r3
 8002cdc:	3301      	adds	r3, #1
 8002cde:	b299      	uxth	r1, r3
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	0a1b      	lsrs	r3, r3, #8
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	461a      	mov	r2, r3
 8002ce8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002cea:	f00d f828 	bl	800fd3e <pbuf_put_at>
        pbuf_put_at(pbuf_out, options_offset + 2, (r.addr >> 16) & 0xff);
 8002cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf0:	b29b      	uxth	r3, r3
 8002cf2:	3302      	adds	r3, #2
 8002cf4:	b299      	uxth	r1, r3
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	0c1b      	lsrs	r3, r3, #16
 8002cfa:	b2db      	uxtb	r3, r3
 8002cfc:	461a      	mov	r2, r3
 8002cfe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002d00:	f00d f81d 	bl	800fd3e <pbuf_put_at>
        pbuf_put_at(pbuf_out, options_offset + 3, (r.addr >> 24) & 0xff);
 8002d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d06:	b29b      	uxth	r3, r3
 8002d08:	3303      	adds	r3, #3
 8002d0a:	b299      	uxth	r1, r3
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	0e1b      	lsrs	r3, r3, #24
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	461a      	mov	r2, r3
 8002d14:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002d16:	f00d f812 	bl	800fd3e <pbuf_put_at>
        options_offset += 4;
 8002d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d1c:	3304      	adds	r3, #4
 8002d1e:	627b      	str	r3, [r7, #36]	; 0x24
        pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_LEASE_TIME);
 8002d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d22:	b29b      	uxth	r3, r3
 8002d24:	2233      	movs	r2, #51	; 0x33
 8002d26:	4619      	mov	r1, r3
 8002d28:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002d2a:	f00d f808 	bl	800fd3e <pbuf_put_at>
        options_offset++;
 8002d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d30:	3301      	adds	r3, #1
 8002d32:	627b      	str	r3, [r7, #36]	; 0x24
        pbuf_put_at(pbuf_out, options_offset, 4);
 8002d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d36:	b29b      	uxth	r3, r3
 8002d38:	2204      	movs	r2, #4
 8002d3a:	4619      	mov	r1, r3
 8002d3c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002d3e:	f00c fffe 	bl	800fd3e <pbuf_put_at>
        options_offset++;
 8002d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d44:	3301      	adds	r3, #1
 8002d46:	627b      	str	r3, [r7, #36]	; 0x24
        pbuf_put_at(pbuf_out, options_offset, (LEASE_TIME_1DAY >> 24) & 0xff);
 8002d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d4a:	b29b      	uxth	r3, r3
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	4619      	mov	r1, r3
 8002d50:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002d52:	f00c fff4 	bl	800fd3e <pbuf_put_at>
        pbuf_put_at(pbuf_out, options_offset + 1, (LEASE_TIME_1DAY >> 16) & 0xff);
 8002d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d58:	b29b      	uxth	r3, r3
 8002d5a:	3301      	adds	r3, #1
 8002d5c:	b29b      	uxth	r3, r3
 8002d5e:	2201      	movs	r2, #1
 8002d60:	4619      	mov	r1, r3
 8002d62:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002d64:	f00c ffeb 	bl	800fd3e <pbuf_put_at>
        pbuf_put_at(pbuf_out, options_offset + 2, (LEASE_TIME_1DAY >> 8) & 0xff);
 8002d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d6a:	b29b      	uxth	r3, r3
 8002d6c:	3302      	adds	r3, #2
 8002d6e:	b29b      	uxth	r3, r3
 8002d70:	2251      	movs	r2, #81	; 0x51
 8002d72:	4619      	mov	r1, r3
 8002d74:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002d76:	f00c ffe2 	bl	800fd3e <pbuf_put_at>
        pbuf_put_at(pbuf_out, options_offset + 3, (LEASE_TIME_1DAY) & 0xff);
 8002d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d7c:	b29b      	uxth	r3, r3
 8002d7e:	3303      	adds	r3, #3
 8002d80:	b29b      	uxth	r3, r3
 8002d82:	2280      	movs	r2, #128	; 0x80
 8002d84:	4619      	mov	r1, r3
 8002d86:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002d88:	f00c ffd9 	bl	800fd3e <pbuf_put_at>
        options_offset += 4;
 8002d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d8e:	3304      	adds	r3, #4
 8002d90:	627b      	str	r3, [r7, #36]	; 0x24
        pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_SERVER_ID);
 8002d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d94:	b29b      	uxth	r3, r3
 8002d96:	2236      	movs	r2, #54	; 0x36
 8002d98:	4619      	mov	r1, r3
 8002d9a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002d9c:	f00c ffcf 	bl	800fd3e <pbuf_put_at>
        options_offset++;
 8002da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da2:	3301      	adds	r3, #1
 8002da4:	627b      	str	r3, [r7, #36]	; 0x24
        pbuf_put_at(pbuf_out, options_offset, 4);
 8002da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da8:	b29b      	uxth	r3, r3
 8002daa:	2204      	movs	r2, #4
 8002dac:	4619      	mov	r1, r3
 8002dae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002db0:	f00c ffc5 	bl	800fd3e <pbuf_put_at>
        options_offset++;
 8002db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db6:	3301      	adds	r3, #1
 8002db8:	627b      	str	r3, [r7, #36]	; 0x24
        IP4_ADDR(&r, ap_ip_addr0, ap_ip_addr1, ap_ip_addr2, ap_ip_addr3);
 8002dba:	4b0c      	ldr	r3, [pc, #48]	; (8002dec <dhcpserver_fn+0xa18>)
 8002dbc:	781b      	ldrb	r3, [r3, #0]
 8002dbe:	061a      	lsls	r2, r3, #24
 8002dc0:	4b0b      	ldr	r3, [pc, #44]	; (8002df0 <dhcpserver_fn+0xa1c>)
 8002dc2:	781b      	ldrb	r3, [r3, #0]
 8002dc4:	041b      	lsls	r3, r3, #16
 8002dc6:	431a      	orrs	r2, r3
 8002dc8:	4b0a      	ldr	r3, [pc, #40]	; (8002df4 <dhcpserver_fn+0xa20>)
 8002dca:	781b      	ldrb	r3, [r3, #0]
 8002dcc:	021b      	lsls	r3, r3, #8
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	4a09      	ldr	r2, [pc, #36]	; (8002df8 <dhcpserver_fn+0xa24>)
 8002dd2:	7812      	ldrb	r2, [r2, #0]
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	061a      	lsls	r2, r3, #24
 8002dd8:	e010      	b.n	8002dfc <dhcpserver_fn+0xa28>
 8002dda:	bf00      	nop
 8002ddc:	200000a6 	.word	0x200000a6
 8002de0:	200000a7 	.word	0x200000a7
 8002de4:	200000a8 	.word	0x200000a8
 8002de8:	200007f0 	.word	0x200007f0
 8002dec:	200000a2 	.word	0x200000a2
 8002df0:	200000a3 	.word	0x200000a3
 8002df4:	200000a4 	.word	0x200000a4
 8002df8:	200000a5 	.word	0x200000a5
 8002dfc:	4b67      	ldr	r3, [pc, #412]	; (8002f9c <dhcpserver_fn+0xbc8>)
 8002dfe:	781b      	ldrb	r3, [r3, #0]
 8002e00:	0619      	lsls	r1, r3, #24
 8002e02:	4b67      	ldr	r3, [pc, #412]	; (8002fa0 <dhcpserver_fn+0xbcc>)
 8002e04:	781b      	ldrb	r3, [r3, #0]
 8002e06:	041b      	lsls	r3, r3, #16
 8002e08:	4319      	orrs	r1, r3
 8002e0a:	4b66      	ldr	r3, [pc, #408]	; (8002fa4 <dhcpserver_fn+0xbd0>)
 8002e0c:	781b      	ldrb	r3, [r3, #0]
 8002e0e:	021b      	lsls	r3, r3, #8
 8002e10:	430b      	orrs	r3, r1
 8002e12:	4965      	ldr	r1, [pc, #404]	; (8002fa8 <dhcpserver_fn+0xbd4>)
 8002e14:	7809      	ldrb	r1, [r1, #0]
 8002e16:	430b      	orrs	r3, r1
 8002e18:	021b      	lsls	r3, r3, #8
 8002e1a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002e1e:	431a      	orrs	r2, r3
 8002e20:	4b5e      	ldr	r3, [pc, #376]	; (8002f9c <dhcpserver_fn+0xbc8>)
 8002e22:	781b      	ldrb	r3, [r3, #0]
 8002e24:	0619      	lsls	r1, r3, #24
 8002e26:	4b5e      	ldr	r3, [pc, #376]	; (8002fa0 <dhcpserver_fn+0xbcc>)
 8002e28:	781b      	ldrb	r3, [r3, #0]
 8002e2a:	041b      	lsls	r3, r3, #16
 8002e2c:	4319      	orrs	r1, r3
 8002e2e:	4b5d      	ldr	r3, [pc, #372]	; (8002fa4 <dhcpserver_fn+0xbd0>)
 8002e30:	781b      	ldrb	r3, [r3, #0]
 8002e32:	021b      	lsls	r3, r3, #8
 8002e34:	430b      	orrs	r3, r1
 8002e36:	495c      	ldr	r1, [pc, #368]	; (8002fa8 <dhcpserver_fn+0xbd4>)
 8002e38:	7809      	ldrb	r1, [r1, #0]
 8002e3a:	430b      	orrs	r3, r1
 8002e3c:	0a1b      	lsrs	r3, r3, #8
 8002e3e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002e42:	431a      	orrs	r2, r3
 8002e44:	4b55      	ldr	r3, [pc, #340]	; (8002f9c <dhcpserver_fn+0xbc8>)
 8002e46:	781b      	ldrb	r3, [r3, #0]
 8002e48:	0619      	lsls	r1, r3, #24
 8002e4a:	4b55      	ldr	r3, [pc, #340]	; (8002fa0 <dhcpserver_fn+0xbcc>)
 8002e4c:	781b      	ldrb	r3, [r3, #0]
 8002e4e:	041b      	lsls	r3, r3, #16
 8002e50:	4319      	orrs	r1, r3
 8002e52:	4b54      	ldr	r3, [pc, #336]	; (8002fa4 <dhcpserver_fn+0xbd0>)
 8002e54:	781b      	ldrb	r3, [r3, #0]
 8002e56:	021b      	lsls	r3, r3, #8
 8002e58:	430b      	orrs	r3, r1
 8002e5a:	4953      	ldr	r1, [pc, #332]	; (8002fa8 <dhcpserver_fn+0xbd4>)
 8002e5c:	7809      	ldrb	r1, [r1, #0]
 8002e5e:	430b      	orrs	r3, r1
 8002e60:	0e1b      	lsrs	r3, r3, #24
 8002e62:	4313      	orrs	r3, r2
 8002e64:	613b      	str	r3, [r7, #16]
        pbuf_put_at(pbuf_out, options_offset, r.addr & 0xff);
 8002e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e68:	b29b      	uxth	r3, r3
 8002e6a:	693a      	ldr	r2, [r7, #16]
 8002e6c:	b2d2      	uxtb	r2, r2
 8002e6e:	4619      	mov	r1, r3
 8002e70:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002e72:	f00c ff64 	bl	800fd3e <pbuf_put_at>
        pbuf_put_at(pbuf_out, options_offset + 1, (r.addr >> 8) & 0xff);
 8002e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e78:	b29b      	uxth	r3, r3
 8002e7a:	3301      	adds	r3, #1
 8002e7c:	b299      	uxth	r1, r3
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	0a1b      	lsrs	r3, r3, #8
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	461a      	mov	r2, r3
 8002e86:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002e88:	f00c ff59 	bl	800fd3e <pbuf_put_at>
        pbuf_put_at(pbuf_out, options_offset + 2, (r.addr >> 16) & 0xff);
 8002e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e8e:	b29b      	uxth	r3, r3
 8002e90:	3302      	adds	r3, #2
 8002e92:	b299      	uxth	r1, r3
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	0c1b      	lsrs	r3, r3, #16
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	461a      	mov	r2, r3
 8002e9c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002e9e:	f00c ff4e 	bl	800fd3e <pbuf_put_at>
        pbuf_put_at(pbuf_out, options_offset + 3, (r.addr >> 24) & 0xff);
 8002ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea4:	b29b      	uxth	r3, r3
 8002ea6:	3303      	adds	r3, #3
 8002ea8:	b299      	uxth	r1, r3
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	0e1b      	lsrs	r3, r3, #24
 8002eae:	b2db      	uxtb	r3, r3
 8002eb0:	461a      	mov	r2, r3
 8002eb2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002eb4:	f00c ff43 	bl	800fd3e <pbuf_put_at>
        options_offset += 4;
 8002eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eba:	3304      	adds	r3, #4
 8002ebc:	627b      	str	r3, [r7, #36]	; 0x24
        pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_END);
 8002ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec0:	b29b      	uxth	r3, r3
 8002ec2:	22ff      	movs	r2, #255	; 0xff
 8002ec4:	4619      	mov	r1, r3
 8002ec6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002ec8:	f00c ff39 	bl	800fd3e <pbuf_put_at>
        options_offset++;
 8002ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ece:	3301      	adds	r3, #1
 8002ed0:	627b      	str	r3, [r7, #36]	; 0x24
 8002ed2:	e03d      	b.n	8002f50 <dhcpserver_fn+0xb7c>
        pbuf_put_at(pbuf_out, DHCP_COOKIE_OFS, (DHCP_MAGIC_COOKIE >> 24) & 0xff);
 8002ed4:	2263      	movs	r2, #99	; 0x63
 8002ed6:	21ec      	movs	r1, #236	; 0xec
 8002ed8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002eda:	f00c ff30 	bl	800fd3e <pbuf_put_at>
        pbuf_put_at(pbuf_out, DHCP_COOKIE_OFS + 1, (DHCP_MAGIC_COOKIE >> 16) & 0xff);
 8002ede:	2282      	movs	r2, #130	; 0x82
 8002ee0:	21ed      	movs	r1, #237	; 0xed
 8002ee2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002ee4:	f00c ff2b 	bl	800fd3e <pbuf_put_at>
        pbuf_put_at(pbuf_out, DHCP_COOKIE_OFS + 2, (DHCP_MAGIC_COOKIE >> 8) & 0xff);
 8002ee8:	2253      	movs	r2, #83	; 0x53
 8002eea:	21ee      	movs	r1, #238	; 0xee
 8002eec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002eee:	f00c ff26 	bl	800fd3e <pbuf_put_at>
        pbuf_put_at(pbuf_out, DHCP_COOKIE_OFS + 3, (DHCP_MAGIC_COOKIE) & 0xff);
 8002ef2:	2263      	movs	r2, #99	; 0x63
 8002ef4:	21ef      	movs	r1, #239	; 0xef
 8002ef6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002ef8:	f00c ff21 	bl	800fd3e <pbuf_put_at>
        options_offset = UDP_DHCP_OPTIONS_OFS;
 8002efc:	23f0      	movs	r3, #240	; 0xf0
 8002efe:	627b      	str	r3, [r7, #36]	; 0x24
        pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_MESSAGE_TYPE);
 8002f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f02:	b29b      	uxth	r3, r3
 8002f04:	2235      	movs	r2, #53	; 0x35
 8002f06:	4619      	mov	r1, r3
 8002f08:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002f0a:	f00c ff18 	bl	800fd3e <pbuf_put_at>
        options_offset++;
 8002f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f10:	3301      	adds	r3, #1
 8002f12:	627b      	str	r3, [r7, #36]	; 0x24
        pbuf_put_at(pbuf_out, options_offset, 1);
 8002f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f16:	b29b      	uxth	r3, r3
 8002f18:	2201      	movs	r2, #1
 8002f1a:	4619      	mov	r1, r3
 8002f1c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002f1e:	f00c ff0e 	bl	800fd3e <pbuf_put_at>
        options_offset++;
 8002f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f24:	3301      	adds	r3, #1
 8002f26:	627b      	str	r3, [r7, #36]	; 0x24
        pbuf_put_at(pbuf_out, options_offset, DHCP_NAK);
 8002f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f2a:	b29b      	uxth	r3, r3
 8002f2c:	2206      	movs	r2, #6
 8002f2e:	4619      	mov	r1, r3
 8002f30:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002f32:	f00c ff04 	bl	800fd3e <pbuf_put_at>
        options_offset++;
 8002f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f38:	3301      	adds	r3, #1
 8002f3a:	627b      	str	r3, [r7, #36]	; 0x24
        pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_END);
 8002f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f3e:	b29b      	uxth	r3, r3
 8002f40:	22ff      	movs	r2, #255	; 0xff
 8002f42:	4619      	mov	r1, r3
 8002f44:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002f46:	f00c fefa 	bl	800fd3e <pbuf_put_at>
        options_offset++;
 8002f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f4c:	3301      	adds	r3, #1
 8002f4e:	627b      	str	r3, [r7, #36]	; 0x24
      pbuf_realloc(pbuf_out, options_offset);
 8002f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f52:	b29b      	uxth	r3, r3
 8002f54:	4619      	mov	r1, r3
 8002f56:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002f58:	f00c f950 	bl	800f1fc <pbuf_realloc>
      if (ERR_OK != udp_sendto(dhcp_pcb, pbuf_out, &client_ip_addr, DHCP_CLIENT_PORT)) {
 8002f5c:	4b13      	ldr	r3, [pc, #76]	; (8002fac <dhcpserver_fn+0xbd8>)
 8002f5e:	6818      	ldr	r0, [r3, #0]
 8002f60:	f107 0214 	add.w	r2, r7, #20
 8002f64:	2344      	movs	r3, #68	; 0x44
 8002f66:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002f68:	f012 fc3c 	bl	80157e4 <udp_sendto>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	2b00      	cmp	r3, #0
      break;
 8002f70:	e006      	b.n	8002f80 <dhcpserver_fn+0xbac>
    goto end_of_fcn;
 8002f72:	bf00      	nop
 8002f74:	e004      	b.n	8002f80 <dhcpserver_fn+0xbac>
    goto end_of_fcn;
 8002f76:	bf00      	nop
 8002f78:	e002      	b.n	8002f80 <dhcpserver_fn+0xbac>
    goto end_of_fcn;
 8002f7a:	bf00      	nop
 8002f7c:	e000      	b.n	8002f80 <dhcpserver_fn+0xbac>
        goto end_of_fcn;
 8002f7e:	bf00      	nop
  }

  end_of_fcn:
  if (pbuf_out) {
 8002f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d002      	beq.n	8002f8c <dhcpserver_fn+0xbb8>
    pbuf_free(pbuf_out);
 8002f86:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002f88:	f00c fabe 	bl	800f508 <pbuf_free>
  }
  pbuf_free(pbuf_in);
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	f00c fabb 	bl	800f508 <pbuf_free>
}
 8002f92:	bf00      	nop
 8002f94:	3730      	adds	r7, #48	; 0x30
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	bf00      	nop
 8002f9c:	200000a2 	.word	0x200000a2
 8002fa0:	200000a3 	.word	0x200000a3
 8002fa4:	200000a4 	.word	0x200000a4
 8002fa8:	200000a5 	.word	0x200000a5
 8002fac:	200004f0 	.word	0x200004f0

08002fb0 <dhcpserver_start_prv>:

/***************************************************************************//**
 * Start DHCP server callback.
 ******************************************************************************/
static void dhcpserver_start_prv(void * arg)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b084      	sub	sp, #16
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  //clear saved mac addresses
  for (uint32_t i = 0; i < DHCPS_MAX_CLIENT; ++i) {
 8002fb8:	2300      	movs	r3, #0
 8002fba:	60fb      	str	r3, [r7, #12]
 8002fbc:	e03d      	b.n	800303a <dhcpserver_start_prv+0x8a>
    saved_mac[i].addr[0] = 0;
 8002fbe:	4933      	ldr	r1, [pc, #204]	; (800308c <dhcpserver_start_prv+0xdc>)
 8002fc0:	68fa      	ldr	r2, [r7, #12]
 8002fc2:	4613      	mov	r3, r2
 8002fc4:	005b      	lsls	r3, r3, #1
 8002fc6:	4413      	add	r3, r2
 8002fc8:	005b      	lsls	r3, r3, #1
 8002fca:	440b      	add	r3, r1
 8002fcc:	2200      	movs	r2, #0
 8002fce:	701a      	strb	r2, [r3, #0]
    saved_mac[i].addr[1] = 0;
 8002fd0:	492e      	ldr	r1, [pc, #184]	; (800308c <dhcpserver_start_prv+0xdc>)
 8002fd2:	68fa      	ldr	r2, [r7, #12]
 8002fd4:	4613      	mov	r3, r2
 8002fd6:	005b      	lsls	r3, r3, #1
 8002fd8:	4413      	add	r3, r2
 8002fda:	005b      	lsls	r3, r3, #1
 8002fdc:	440b      	add	r3, r1
 8002fde:	3301      	adds	r3, #1
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	701a      	strb	r2, [r3, #0]
    saved_mac[i].addr[2] = 0;
 8002fe4:	4929      	ldr	r1, [pc, #164]	; (800308c <dhcpserver_start_prv+0xdc>)
 8002fe6:	68fa      	ldr	r2, [r7, #12]
 8002fe8:	4613      	mov	r3, r2
 8002fea:	005b      	lsls	r3, r3, #1
 8002fec:	4413      	add	r3, r2
 8002fee:	005b      	lsls	r3, r3, #1
 8002ff0:	440b      	add	r3, r1
 8002ff2:	3302      	adds	r3, #2
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	701a      	strb	r2, [r3, #0]
    saved_mac[i].addr[3] = 0;
 8002ff8:	4924      	ldr	r1, [pc, #144]	; (800308c <dhcpserver_start_prv+0xdc>)
 8002ffa:	68fa      	ldr	r2, [r7, #12]
 8002ffc:	4613      	mov	r3, r2
 8002ffe:	005b      	lsls	r3, r3, #1
 8003000:	4413      	add	r3, r2
 8003002:	005b      	lsls	r3, r3, #1
 8003004:	440b      	add	r3, r1
 8003006:	3303      	adds	r3, #3
 8003008:	2200      	movs	r2, #0
 800300a:	701a      	strb	r2, [r3, #0]
    saved_mac[i].addr[4] = 0;
 800300c:	491f      	ldr	r1, [pc, #124]	; (800308c <dhcpserver_start_prv+0xdc>)
 800300e:	68fa      	ldr	r2, [r7, #12]
 8003010:	4613      	mov	r3, r2
 8003012:	005b      	lsls	r3, r3, #1
 8003014:	4413      	add	r3, r2
 8003016:	005b      	lsls	r3, r3, #1
 8003018:	440b      	add	r3, r1
 800301a:	3304      	adds	r3, #4
 800301c:	2200      	movs	r2, #0
 800301e:	701a      	strb	r2, [r3, #0]
    saved_mac[i].addr[5] = 0;
 8003020:	491a      	ldr	r1, [pc, #104]	; (800308c <dhcpserver_start_prv+0xdc>)
 8003022:	68fa      	ldr	r2, [r7, #12]
 8003024:	4613      	mov	r3, r2
 8003026:	005b      	lsls	r3, r3, #1
 8003028:	4413      	add	r3, r2
 800302a:	005b      	lsls	r3, r3, #1
 800302c:	440b      	add	r3, r1
 800302e:	3305      	adds	r3, #5
 8003030:	2200      	movs	r2, #0
 8003032:	701a      	strb	r2, [r3, #0]
  for (uint32_t i = 0; i < DHCPS_MAX_CLIENT; ++i) {
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	3301      	adds	r3, #1
 8003038:	60fb      	str	r3, [r7, #12]
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	2b07      	cmp	r3, #7
 800303e:	d9be      	bls.n	8002fbe <dhcpserver_start_prv+0xe>
  }

  if (NULL == dhcp_pcb) {
 8003040:	4b13      	ldr	r3, [pc, #76]	; (8003090 <dhcpserver_start_prv+0xe0>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d11e      	bne.n	8003086 <dhcpserver_start_prv+0xd6>
    dhcp_pcb = udp_new();
 8003048:	f012 ff1c 	bl	8015e84 <udp_new>
 800304c:	4603      	mov	r3, r0
 800304e:	4a10      	ldr	r2, [pc, #64]	; (8003090 <dhcpserver_start_prv+0xe0>)
 8003050:	6013      	str	r3, [r2, #0]
    if (NULL == dhcp_pcb) {
 8003052:	4b0f      	ldr	r3, [pc, #60]	; (8003090 <dhcpserver_start_prv+0xe0>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d014      	beq.n	8003084 <dhcpserver_start_prv+0xd4>
      return;
    }

    udp_bind(dhcp_pcb, IP_ADDR_ANY, DHCP_SERVER_PORT);
 800305a:	4b0d      	ldr	r3, [pc, #52]	; (8003090 <dhcpserver_start_prv+0xe0>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	2243      	movs	r2, #67	; 0x43
 8003060:	490c      	ldr	r1, [pc, #48]	; (8003094 <dhcpserver_start_prv+0xe4>)
 8003062:	4618      	mov	r0, r3
 8003064:	f012 fd74 	bl	8015b50 <udp_bind>
    udp_bind_netif(dhcp_pcb, &ap_netif);
 8003068:	4b09      	ldr	r3, [pc, #36]	; (8003090 <dhcpserver_start_prv+0xe0>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	490a      	ldr	r1, [pc, #40]	; (8003098 <dhcpserver_start_prv+0xe8>)
 800306e:	4618      	mov	r0, r3
 8003070:	f012 fdf6 	bl	8015c60 <udp_bind_netif>
    udp_recv(dhcp_pcb, dhcpserver_fn, 0);
 8003074:	4b06      	ldr	r3, [pc, #24]	; (8003090 <dhcpserver_start_prv+0xe0>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	2200      	movs	r2, #0
 800307a:	4908      	ldr	r1, [pc, #32]	; (800309c <dhcpserver_start_prv+0xec>)
 800307c:	4618      	mov	r0, r3
 800307e:	f012 fe9f 	bl	8015dc0 <udp_recv>
 8003082:	e000      	b.n	8003086 <dhcpserver_start_prv+0xd6>
      return;
 8003084:	bf00      	nop
  }
}
 8003086:	3710      	adds	r7, #16
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}
 800308c:	200004f4 	.word	0x200004f4
 8003090:	200004f0 	.word	0x200004f0
 8003094:	0806cf80 	.word	0x0806cf80
 8003098:	20000780 	.word	0x20000780
 800309c:	080023d5 	.word	0x080023d5

080030a0 <dhcpserver_start>:

/***************************************************************************//**
 * Start DHCP server.
 ******************************************************************************/
void dhcpserver_start(void)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	af00      	add	r7, sp, #0
  tcpip_callback(dhcpserver_start_prv, 0);
 80030a4:	2100      	movs	r1, #0
 80030a6:	4802      	ldr	r0, [pc, #8]	; (80030b0 <dhcpserver_start+0x10>)
 80030a8:	f00a fc34 	bl	800d914 <tcpip_callback>
}
 80030ac:	bf00      	nop
 80030ae:	bd80      	pop	{r7, pc}
 80030b0:	08002fb1 	.word	0x08002fb1

080030b4 <dhcpserver_stop_prv>:

/***************************************************************************//**
 * Stop DHCP server callback.
 ******************************************************************************/
static void dhcpserver_stop_prv(void * arg)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b082      	sub	sp, #8
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  if (dhcp_pcb != NULL) {
 80030bc:	4b0a      	ldr	r3, [pc, #40]	; (80030e8 <dhcpserver_stop_prv+0x34>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d00c      	beq.n	80030de <dhcpserver_stop_prv+0x2a>
    udp_disconnect(dhcp_pcb);
 80030c4:	4b08      	ldr	r3, [pc, #32]	; (80030e8 <dhcpserver_stop_prv+0x34>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4618      	mov	r0, r3
 80030ca:	f012 fe51 	bl	8015d70 <udp_disconnect>
    udp_remove(dhcp_pcb);
 80030ce:	4b06      	ldr	r3, [pc, #24]	; (80030e8 <dhcpserver_stop_prv+0x34>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4618      	mov	r0, r3
 80030d4:	f012 fe94 	bl	8015e00 <udp_remove>
    dhcp_pcb = NULL;
 80030d8:	4b03      	ldr	r3, [pc, #12]	; (80030e8 <dhcpserver_stop_prv+0x34>)
 80030da:	2200      	movs	r2, #0
 80030dc:	601a      	str	r2, [r3, #0]
  }
}
 80030de:	bf00      	nop
 80030e0:	3708      	adds	r7, #8
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}
 80030e6:	bf00      	nop
 80030e8:	200004f0 	.word	0x200004f0

080030ec <dhcpserver_stop>:

/***************************************************************************//**
 * Stop DHCP server.
 ******************************************************************************/
void dhcpserver_stop(void)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	af00      	add	r7, sp, #0
  tcpip_callback(dhcpserver_stop_prv, 0);
 80030f0:	2100      	movs	r1, #0
 80030f2:	4802      	ldr	r0, [pc, #8]	; (80030fc <dhcpserver_stop+0x10>)
 80030f4:	f00a fc0e 	bl	800d914 <tcpip_callback>
}
 80030f8:	bf00      	nop
 80030fa:	bd80      	pop	{r7, pc}
 80030fc:	080030b5 	.word	0x080030b5

08003100 <low_level_init>:
 * @param[in] netif: the already initialized lwip network interface structure
 *
 * @return
 *    None
 ******************************************************************************/
static void low_level_init (struct netif *netif) {
 8003100:	b580      	push	{r7, lr}
 8003102:	b082      	sub	sp, #8
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  /* set netif MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2206      	movs	r2, #6
 800310c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  
  /* Check which netif is initialized and set netif MAC hardware address */
  if (memcmp(netif->name, STATION_NETIF, 2) == 0) {
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	3332      	adds	r3, #50	; 0x32
 8003114:	2202      	movs	r2, #2
 8003116:	491b      	ldr	r1, [pc, #108]	; (8003184 <low_level_init+0x84>)
 8003118:	4618      	mov	r0, r3
 800311a:	f017 fc2b 	bl	801a974 <memcmp>
 800311e:	4603      	mov	r3, r0
 8003120:	2b00      	cmp	r3, #0
 8003122:	d10a      	bne.n	800313a <low_level_init+0x3a>
    memcpy(netif->hwaddr, wifi_context.mac_addr_0.octet, 6);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 800312a:	4b17      	ldr	r3, [pc, #92]	; (8003188 <low_level_init+0x88>)
 800312c:	f203 2316 	addw	r3, r3, #534	; 0x216
 8003130:	6819      	ldr	r1, [r3, #0]
 8003132:	6011      	str	r1, [r2, #0]
 8003134:	889b      	ldrh	r3, [r3, #4]
 8003136:	8093      	strh	r3, [r2, #4]
 8003138:	e009      	b.n	800314e <low_level_init+0x4e>
  } else {
    memcpy(netif->hwaddr, wifi_context.mac_addr_1.octet, 6);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8003140:	4b11      	ldr	r3, [pc, #68]	; (8003188 <low_level_init+0x88>)
 8003142:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8003146:	6818      	ldr	r0, [r3, #0]
 8003148:	6010      	str	r0, [r2, #0]
 800314a:	889b      	ldrh	r3, [r3, #4]
 800314c:	8093      	strh	r3, [r2, #4]
  }

  /* Set netif maximum transfer unit */
  netif->mtu = 1500;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8003154:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800315c:	f043 030a 	orr.w	r3, r3, #10
 8003160:	b2da      	uxtb	r2, r3
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  /* Set netif link flag */
  netif->flags |= NETIF_FLAG_LINK_UP;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800316e:	f043 0304 	orr.w	r3, r3, #4
 8003172:	b2da      	uxtb	r2, r3
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
}
 800317a:	bf00      	nop
 800317c:	3708      	adds	r7, #8
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}
 8003182:	bf00      	nop
 8003184:	0801d978 	.word	0x0801d978
 8003188:	20000524 	.word	0x20000524

0800318c <low_level_output>:
 * @param[in] p: the packet to send
 *
 * @return
 *    ERR_OK if successful
 ******************************************************************************/
static err_t low_level_output (struct netif *netif, struct pbuf *p) {
 800318c:	b580      	push	{r7, lr}
 800318e:	b086      	sub	sp, #24
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
 8003194:	6039      	str	r1, [r7, #0]
  uint8_t *buffer;
  sl_wfx_packet_queue_item_t *queue_item;
  sl_status_t result;
  
  /* Take TX queue mutex */
  xSemaphoreTake(sl_wfx_tx_queue_mutex, portMAX_DELAY);
 8003196:	4b37      	ldr	r3, [pc, #220]	; (8003274 <low_level_output+0xe8>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f04f 31ff 	mov.w	r1, #4294967295
 800319e:	4618      	mov	r0, r3
 80031a0:	f007 fe9e 	bl	800aee0 <xQueueSemaphoreTake>

  /* Allocate a buffer for a queue item */
  result = sl_wfx_allocate_command_buffer((sl_wfx_generic_message_t**)(&queue_item),
                                          SL_WFX_SEND_FRAME_REQ_ID,
                                          SL_WFX_TX_FRAME_BUFFER,
                                          p->tot_len + sizeof(sl_wfx_packet_queue_item_t));
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	891b      	ldrh	r3, [r3, #8]
 80031a8:	3318      	adds	r3, #24
  result = sl_wfx_allocate_command_buffer((sl_wfx_generic_message_t**)(&queue_item),
 80031aa:	f107 0008 	add.w	r0, r7, #8
 80031ae:	2200      	movs	r2, #0
 80031b0:	214a      	movs	r1, #74	; 0x4a
 80031b2:	f005 fd23 	bl	8008bfc <sl_wfx_allocate_command_buffer>
 80031b6:	60f8      	str	r0, [r7, #12]
  
  if ((result != SL_STATUS_OK) || (queue_item == NULL)) {
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d102      	bne.n	80031c4 <low_level_output+0x38>
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d109      	bne.n	80031d8 <low_level_output+0x4c>
	  /* Release TX queue mutex */
	    xSemaphoreGive(sl_wfx_tx_queue_mutex);
 80031c4:	4b2b      	ldr	r3, [pc, #172]	; (8003274 <low_level_output+0xe8>)
 80031c6:	6818      	ldr	r0, [r3, #0]
 80031c8:	2300      	movs	r3, #0
 80031ca:	2200      	movs	r2, #0
 80031cc:	2100      	movs	r1, #0
 80031ce:	f007 fb81 	bl	800a8d4 <xQueueGenericSend>
    return ERR_MEM;
 80031d2:	f04f 33ff 	mov.w	r3, #4294967295
 80031d6:	e049      	b.n	800326c <low_level_output+0xe0>
  }

  buffer = queue_item->buffer.body.packet_data;
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	3318      	adds	r3, #24
 80031dc:	613b      	str	r3, [r7, #16]
  
  for (q = p; q != NULL; q = q->next) {
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	617b      	str	r3, [r7, #20]
 80031e2:	e010      	b.n	8003206 <low_level_output+0x7a>
    /* Copy the bytes */
    memcpy(buffer, q->payload, q->len);
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	6859      	ldr	r1, [r3, #4]
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	895b      	ldrh	r3, [r3, #10]
 80031ec:	461a      	mov	r2, r3
 80031ee:	6938      	ldr	r0, [r7, #16]
 80031f0:	f017 fbd0 	bl	801a994 <memcpy>
    buffer += q->len;
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	895b      	ldrh	r3, [r3, #10]
 80031f8:	461a      	mov	r2, r3
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	4413      	add	r3, r2
 80031fe:	613b      	str	r3, [r7, #16]
  for (q = p; q != NULL; q = q->next) {
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	617b      	str	r3, [r7, #20]
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d1eb      	bne.n	80031e4 <low_level_output+0x58>
  }

  /* Provide the data length the interface information to the pbuf */
  queue_item->interface = (memcmp(netif->name, STATION_NETIF, 2) == 0)?  SL_WFX_STA_INTERFACE : SL_WFX_SOFTAP_INTERFACE;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	3332      	adds	r3, #50	; 0x32
 8003210:	2202      	movs	r2, #2
 8003212:	4919      	ldr	r1, [pc, #100]	; (8003278 <low_level_output+0xec>)
 8003214:	4618      	mov	r0, r3
 8003216:	f017 fbad 	bl	801a974 <memcmp>
 800321a:	4603      	mov	r3, r0
 800321c:	2b00      	cmp	r3, #0
 800321e:	bf14      	ite	ne
 8003220:	2301      	movne	r3, #1
 8003222:	2300      	moveq	r3, #0
 8003224:	b2da      	uxtb	r2, r3
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	711a      	strb	r2, [r3, #4]
  queue_item->data_length = p->tot_len;
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	891a      	ldrh	r2, [r3, #8]
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	609a      	str	r2, [r3, #8]
  
  /* Determine if there is anything on the tx packet queue */
  if (sl_wfx_tx_queue_context.head_ptr != NULL) {
 8003232:	4b12      	ldr	r3, [pc, #72]	; (800327c <low_level_output+0xf0>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d004      	beq.n	8003244 <low_level_output+0xb8>
    sl_wfx_tx_queue_context.tail_ptr->next = queue_item;
 800323a:	4b10      	ldr	r3, [pc, #64]	; (800327c <low_level_output+0xf0>)
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	68ba      	ldr	r2, [r7, #8]
 8003240:	601a      	str	r2, [r3, #0]
 8003242:	e002      	b.n	800324a <low_level_output+0xbe>
  } else {
    /* If tx packet queue is empty, setup head & tail pointers */
    sl_wfx_tx_queue_context.head_ptr = queue_item;
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	4a0d      	ldr	r2, [pc, #52]	; (800327c <low_level_output+0xf0>)
 8003248:	6013      	str	r3, [r2, #0]
  }
  
  /* Update the tail pointer */
  sl_wfx_tx_queue_context.tail_ptr = queue_item;
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	4a0b      	ldr	r2, [pc, #44]	; (800327c <low_level_output+0xf0>)
 800324e:	6053      	str	r3, [r2, #4]
  
  /* Notify that a TX frame is ready */
  xEventGroupSetBits(sl_wfx_event_group, SL_WFX_TX_PACKET_AVAILABLE);
 8003250:	4b0b      	ldr	r3, [pc, #44]	; (8003280 <low_level_output+0xf4>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	2101      	movs	r1, #1
 8003256:	4618      	mov	r0, r3
 8003258:	f007 f8de 	bl	800a418 <xEventGroupSetBits>
  
  /* Release TX queue mutex */
  xSemaphoreGive(sl_wfx_tx_queue_mutex);
 800325c:	4b05      	ldr	r3, [pc, #20]	; (8003274 <low_level_output+0xe8>)
 800325e:	6818      	ldr	r0, [r3, #0]
 8003260:	2300      	movs	r3, #0
 8003262:	2200      	movs	r2, #0
 8003264:	2100      	movs	r1, #0
 8003266:	f007 fb35 	bl	800a8d4 <xQueueGenericSend>
  
  return ERR_OK;
 800326a:	2300      	movs	r3, #0
}
 800326c:	4618      	mov	r0, r3
 800326e:	3718      	adds	r7, #24
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}
 8003274:	20001314 	.word	0x20001314
 8003278:	0801d978 	.word	0x0801d978
 800327c:	20001318 	.word	0x20001318
 8003280:	20001310 	.word	0x20001310

08003284 <low_level_input>:
 * @param[in] rx_buffer: the ethernet frame received by the wf200
 *
 * @return
 *    LwIP pbuf filled with received packet, or NULL on error
 ******************************************************************************/
static struct pbuf *low_level_input (struct netif *netif, sl_wfx_received_ind_t* rx_buffer) {
 8003284:	b580      	push	{r7, lr}
 8003286:	b086      	sub	sp, #24
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
 800328c:	6039      	str	r1, [r7, #0]
  struct pbuf *p, *q;
  uint8_t *buffer;
  
  /* Obtain the packet by removing the padding. */
  buffer = (uint8_t *)&(rx_buffer->body.frame[rx_buffer->body.frame_padding]);
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	795b      	ldrb	r3, [r3, #5]
 8003292:	461a      	mov	r2, r3
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	4413      	add	r3, r2
 8003298:	3308      	adds	r3, #8
 800329a:	60fb      	str	r3, [r7, #12]
 
  if (rx_buffer->body.frame_length > 0) {
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	88db      	ldrh	r3, [r3, #6]
 80032a0:	b29b      	uxth	r3, r3
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d009      	beq.n	80032ba <low_level_input+0x36>
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, rx_buffer->body.frame_length, PBUF_POOL);
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	88db      	ldrh	r3, [r3, #6]
 80032aa:	b29b      	uxth	r3, r3
 80032ac:	f44f 72c1 	mov.w	r2, #386	; 0x182
 80032b0:	4619      	mov	r1, r3
 80032b2:	2000      	movs	r0, #0
 80032b4:	f00b fe40 	bl	800ef38 <pbuf_alloc>
 80032b8:	6178      	str	r0, [r7, #20]
  }
  
  if (p != NULL) {
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d016      	beq.n	80032ee <low_level_input+0x6a>
    for (q = p; q != NULL; q = q->next) {
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	613b      	str	r3, [r7, #16]
 80032c4:	e010      	b.n	80032e8 <low_level_input+0x64>
      /* Copy remaining data in pbuf */
      memcpy(q->payload, buffer, q->len);
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	6858      	ldr	r0, [r3, #4]
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	895b      	ldrh	r3, [r3, #10]
 80032ce:	461a      	mov	r2, r3
 80032d0:	68f9      	ldr	r1, [r7, #12]
 80032d2:	f017 fb5f 	bl	801a994 <memcpy>
      buffer += q->len;
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	895b      	ldrh	r3, [r3, #10]
 80032da:	461a      	mov	r2, r3
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	4413      	add	r3, r2
 80032e0:	60fb      	str	r3, [r7, #12]
    for (q = p; q != NULL; q = q->next) {
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	613b      	str	r3, [r7, #16]
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d1eb      	bne.n	80032c6 <low_level_input+0x42>
    }
  }  
   
  return p;
 80032ee:	697b      	ldr	r3, [r7, #20]
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3718      	adds	r7, #24
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}

080032f8 <sl_wfx_host_received_frame_callback>:
 * @param[in] rx_buffer: the ethernet frame received by the wf200
 *
 * @return
 *    None
******************************************************************************/
void sl_wfx_host_received_frame_callback (sl_wfx_received_ind_t* rx_buffer) {
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b084      	sub	sp, #16
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif;
  
  /* Check packet interface to send to AP or STA interface */
  if ((rx_buffer->header.info & SL_WFX_MSG_INFO_INTERFACE_MASK) == 
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	78db      	ldrb	r3, [r3, #3]
 8003304:	f003 0306 	and.w	r3, r3, #6
 8003308:	2b00      	cmp	r3, #0
 800330a:	d102      	bne.n	8003312 <sl_wfx_host_received_frame_callback+0x1a>
     (SL_WFX_STA_INTERFACE << SL_WFX_MSG_INFO_INTERFACE_OFFSET)) {
    /* Send to station interface */
    netif = &sta_netif;
 800330c:	4b0f      	ldr	r3, [pc, #60]	; (800334c <sl_wfx_host_received_frame_callback+0x54>)
 800330e:	60fb      	str	r3, [r7, #12]
 8003310:	e001      	b.n	8003316 <sl_wfx_host_received_frame_callback+0x1e>
  } else {
    /* Send to softAP interface */
    netif = &ap_netif;
 8003312:	4b0f      	ldr	r3, [pc, #60]	; (8003350 <sl_wfx_host_received_frame_callback+0x58>)
 8003314:	60fb      	str	r3, [r7, #12]
  }

  if (netif != NULL) {
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d012      	beq.n	8003342 <sl_wfx_host_received_frame_callback+0x4a>
    p = low_level_input(netif, rx_buffer);
 800331c:	6879      	ldr	r1, [r7, #4]
 800331e:	68f8      	ldr	r0, [r7, #12]
 8003320:	f7ff ffb0 	bl	8003284 <low_level_input>
 8003324:	60b8      	str	r0, [r7, #8]
    if (p != NULL) {
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d00a      	beq.n	8003342 <sl_wfx_host_received_frame_callback+0x4a>
      if (netif->input(p, netif) != ERR_OK) {
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	691b      	ldr	r3, [r3, #16]
 8003330:	68f9      	ldr	r1, [r7, #12]
 8003332:	68b8      	ldr	r0, [r7, #8]
 8003334:	4798      	blx	r3
 8003336:	4603      	mov	r3, r0
 8003338:	2b00      	cmp	r3, #0
 800333a:	d002      	beq.n	8003342 <sl_wfx_host_received_frame_callback+0x4a>
        pbuf_free(p);
 800333c:	68b8      	ldr	r0, [r7, #8]
 800333e:	f00c f8e3 	bl	800f508 <pbuf_free>
      }
    }
  }
}
 8003342:	bf00      	nop
 8003344:	3710      	adds	r7, #16
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}
 800334a:	bf00      	nop
 800334c:	20000748 	.word	0x20000748
 8003350:	20000780 	.word	0x20000780

08003354 <sta_ethernetif_init>:
 * @param[in] netif: the lwip network interface structure
 *
 * @return
 *    ERR_OK if successful
 ******************************************************************************/
err_t sta_ethernetif_init (struct netif *netif) {
 8003354:	b580      	push	{r7, lr}
 8003356:	b082      	sub	sp, #8
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d105      	bne.n	800336e <sta_ethernetif_init+0x1a>
 8003362:	4b0d      	ldr	r3, [pc, #52]	; (8003398 <sta_ethernetif_init+0x44>)
 8003364:	22dc      	movs	r2, #220	; 0xdc
 8003366:	490d      	ldr	r1, [pc, #52]	; (800339c <sta_ethernetif_init+0x48>)
 8003368:	480d      	ldr	r0, [pc, #52]	; (80033a0 <sta_ethernetif_init+0x4c>)
 800336a:	f018 f889 	bl	801b480 <iprintf>

  /* Set the netif name to identify the interface */
  memcpy(netif->name, STATION_NETIF, 2);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	3332      	adds	r3, #50	; 0x32
 8003372:	2202      	movs	r2, #2
 8003374:	490b      	ldr	r1, [pc, #44]	; (80033a4 <sta_ethernetif_init+0x50>)
 8003376:	4618      	mov	r0, r3
 8003378:	f017 fb0c 	bl	801a994 <memcpy>

  netif->output = etharp_output;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	4a0a      	ldr	r2, [pc, #40]	; (80033a8 <sta_ethernetif_init+0x54>)
 8003380:	615a      	str	r2, [r3, #20]
  netif->linkoutput = low_level_output;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	4a09      	ldr	r2, [pc, #36]	; (80033ac <sta_ethernetif_init+0x58>)
 8003386:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8003388:	6878      	ldr	r0, [r7, #4]
 800338a:	f7ff feb9 	bl	8003100 <low_level_init>
  
  return ERR_OK;
 800338e:	2300      	movs	r3, #0
}
 8003390:	4618      	mov	r0, r3
 8003392:	3708      	adds	r7, #8
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}
 8003398:	0801d97c 	.word	0x0801d97c
 800339c:	0801d998 	.word	0x0801d998
 80033a0:	0801d9a8 	.word	0x0801d9a8
 80033a4:	0801d978 	.word	0x0801d978
 80033a8:	080185e5 	.word	0x080185e5
 80033ac:	0800318d 	.word	0x0800318d

080033b0 <sys_now>:
  low_level_init(netif);
  
  return ERR_OK;
}

u32_t sys_now (void) {
 80033b0:	b580      	push	{r7, lr}
 80033b2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80033b4:	f001 f898 	bl	80044e8 <HAL_GetTick>
 80033b8:	4603      	mov	r3, r0
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	bd80      	pop	{r7, pc}
	...

080033c0 <lwip_start_task_entry>:
 *    not used
 *
 * @return
 *    none
 ******************************************************************************/
static void lwip_start_task_entry (void const * argument) {
 80033c0:	b5b0      	push	{r4, r5, r7, lr}
 80033c2:	b088      	sub	sp, #32
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  /* Create tcp_ip stack thread */
  tcpip_init(NULL, NULL);
 80033c8:	2100      	movs	r1, #0
 80033ca:	2000      	movs	r0, #0
 80033cc:	f00a fb30 	bl	800da30 <tcpip_init>

  /* Initialize the LwIP stack */
  netif_config();
 80033d0:	f000 f886 	bl	80034e0 <netif_config>
#endif
#ifdef LWIP_IPERF_SERVER
  lwiperf_start_tcp_server_default(lwip_iperf_results,0);
#endif

  if (use_dhcp_client) {
 80033d4:	4b0b      	ldr	r3, [pc, #44]	; (8003404 <lwip_start_task_entry+0x44>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d00d      	beq.n	80033f8 <lwip_start_task_entry+0x38>
    /* Start DHCP Client */
    osThreadDef(DHCP, dhcpclient_start, osPriorityLow, 0, configMINIMAL_STACK_SIZE * 2);
 80033dc:	4b0a      	ldr	r3, [pc, #40]	; (8003408 <lwip_start_task_entry+0x48>)
 80033de:	f107 040c 	add.w	r4, r7, #12
 80033e2:	461d      	mov	r5, r3
 80033e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80033e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80033e8:	682b      	ldr	r3, [r5, #0]
 80033ea:	6023      	str	r3, [r4, #0]
    osThreadCreate (osThread(DHCP), &sta_netif);
 80033ec:	f107 030c 	add.w	r3, r7, #12
 80033f0:	4906      	ldr	r1, [pc, #24]	; (800340c <lwip_start_task_entry+0x4c>)
 80033f2:	4618      	mov	r0, r3
 80033f4:	f006 fd6b 	bl	8009ece <osThreadCreate>
  }

  wifi_autoconnexion_init();
 80033f8:	f7fe fb2a 	bl	8001a50 <wifi_autoconnexion_init>

	while(1) {
    /* Delete the Init Thread */
    osThreadTerminate(NULL);
 80033fc:	2000      	movs	r0, #0
 80033fe:	f006 fd8d 	bl	8009f1c <osThreadTerminate>
 8003402:	e7fb      	b.n	80033fc <lwip_start_task_entry+0x3c>
 8003404:	20000098 	.word	0x20000098
 8003408:	0801d9e8 	.word	0x0801d9e8
 800340c:	20000748 	.word	0x20000748

08003410 <lwip_set_sta_link_up>:
 *    none
 *
 * @return
 *    none
 ******************************************************************************/
void lwip_set_sta_link_up (void) {
 8003410:	b580      	push	{r7, lr}
 8003412:	af00      	add	r7, sp, #0
  netifapi_netif_set_up(&sta_netif);
 8003414:	2200      	movs	r2, #0
 8003416:	4909      	ldr	r1, [pc, #36]	; (800343c <lwip_set_sta_link_up+0x2c>)
 8003418:	4809      	ldr	r0, [pc, #36]	; (8003440 <lwip_set_sta_link_up+0x30>)
 800341a:	f00a f945 	bl	800d6a8 <netifapi_netif_common>
  netifapi_netif_set_link_up(&sta_netif);
 800341e:	2200      	movs	r2, #0
 8003420:	4908      	ldr	r1, [pc, #32]	; (8003444 <lwip_set_sta_link_up+0x34>)
 8003422:	4807      	ldr	r0, [pc, #28]	; (8003440 <lwip_set_sta_link_up+0x30>)
 8003424:	f00a f940 	bl	800d6a8 <netifapi_netif_common>
  if (use_dhcp_client) {
 8003428:	4b07      	ldr	r3, [pc, #28]	; (8003448 <lwip_set_sta_link_up+0x38>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d002      	beq.n	8003436 <lwip_set_sta_link_up+0x26>
    dhcpclient_set_link_state(1);
 8003430:	2001      	movs	r0, #1
 8003432:	f7fe fbf9 	bl	8001c28 <dhcpclient_set_link_state>
  }
}
 8003436:	bf00      	nop
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop
 800343c:	0800ebbd 	.word	0x0800ebbd
 8003440:	20000748 	.word	0x20000748
 8003444:	0800ecf9 	.word	0x0800ecf9
 8003448:	20000098 	.word	0x20000098

0800344c <lwip_set_sta_link_down>:
 *    none
 *
 * @return
 *    none
******************************************************************************/
void lwip_set_sta_link_down (void) {
 800344c:	b580      	push	{r7, lr}
 800344e:	af00      	add	r7, sp, #0
  if (use_dhcp_client) {
 8003450:	4b09      	ldr	r3, [pc, #36]	; (8003478 <lwip_set_sta_link_down+0x2c>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d002      	beq.n	800345e <lwip_set_sta_link_down+0x12>
    dhcpclient_set_link_state(0);
 8003458:	2000      	movs	r0, #0
 800345a:	f7fe fbe5 	bl	8001c28 <dhcpclient_set_link_state>
  }
  netifapi_netif_set_link_down(&sta_netif);
 800345e:	2200      	movs	r2, #0
 8003460:	4906      	ldr	r1, [pc, #24]	; (800347c <lwip_set_sta_link_down+0x30>)
 8003462:	4807      	ldr	r0, [pc, #28]	; (8003480 <lwip_set_sta_link_down+0x34>)
 8003464:	f00a f920 	bl	800d6a8 <netifapi_netif_common>
  netifapi_netif_set_down(&sta_netif);
 8003468:	2200      	movs	r2, #0
 800346a:	4906      	ldr	r1, [pc, #24]	; (8003484 <lwip_set_sta_link_down+0x38>)
 800346c:	4804      	ldr	r0, [pc, #16]	; (8003480 <lwip_set_sta_link_down+0x34>)
 800346e:	f00a f91b 	bl	800d6a8 <netifapi_netif_common>
}
 8003472:	bf00      	nop
 8003474:	bd80      	pop	{r7, pc}
 8003476:	bf00      	nop
 8003478:	20000098 	.word	0x20000098
 800347c:	0800ed69 	.word	0x0800ed69
 8003480:	20000748 	.word	0x20000748
 8003484:	0800ec95 	.word	0x0800ec95

08003488 <lwip_set_ap_link_up>:
 *    none
 *
 * @return
 *    none
 ******************************************************************************/
void lwip_set_ap_link_up (void) {
 8003488:	b580      	push	{r7, lr}
 800348a:	af00      	add	r7, sp, #0
  netifapi_netif_set_up(&ap_netif);
 800348c:	2200      	movs	r2, #0
 800348e:	4906      	ldr	r1, [pc, #24]	; (80034a8 <lwip_set_ap_link_up+0x20>)
 8003490:	4806      	ldr	r0, [pc, #24]	; (80034ac <lwip_set_ap_link_up+0x24>)
 8003492:	f00a f909 	bl	800d6a8 <netifapi_netif_common>
  netifapi_netif_set_link_up(&ap_netif);
 8003496:	2200      	movs	r2, #0
 8003498:	4905      	ldr	r1, [pc, #20]	; (80034b0 <lwip_set_ap_link_up+0x28>)
 800349a:	4804      	ldr	r0, [pc, #16]	; (80034ac <lwip_set_ap_link_up+0x24>)
 800349c:	f00a f904 	bl	800d6a8 <netifapi_netif_common>
  dhcpserver_start();
 80034a0:	f7ff fdfe 	bl	80030a0 <dhcpserver_start>
}
 80034a4:	bf00      	nop
 80034a6:	bd80      	pop	{r7, pc}
 80034a8:	0800ebbd 	.word	0x0800ebbd
 80034ac:	20000780 	.word	0x20000780
 80034b0:	0800ecf9 	.word	0x0800ecf9

080034b4 <lwip_set_ap_link_down>:
 *    none
 *
 * @return
 *    none
 ******************************************************************************/
void lwip_set_ap_link_down (void) {
 80034b4:	b580      	push	{r7, lr}
 80034b6:	af00      	add	r7, sp, #0
  dhcpserver_stop();
 80034b8:	f7ff fe18 	bl	80030ec <dhcpserver_stop>
  netifapi_netif_set_link_down(&ap_netif);
 80034bc:	2200      	movs	r2, #0
 80034be:	4905      	ldr	r1, [pc, #20]	; (80034d4 <lwip_set_ap_link_down+0x20>)
 80034c0:	4805      	ldr	r0, [pc, #20]	; (80034d8 <lwip_set_ap_link_down+0x24>)
 80034c2:	f00a f8f1 	bl	800d6a8 <netifapi_netif_common>
  netifapi_netif_set_down(&ap_netif);
 80034c6:	2200      	movs	r2, #0
 80034c8:	4904      	ldr	r1, [pc, #16]	; (80034dc <lwip_set_ap_link_down+0x28>)
 80034ca:	4803      	ldr	r0, [pc, #12]	; (80034d8 <lwip_set_ap_link_down+0x24>)
 80034cc:	f00a f8ec 	bl	800d6a8 <netifapi_netif_common>
}
 80034d0:	bf00      	nop
 80034d2:	bd80      	pop	{r7, pc}
 80034d4:	0800ed69 	.word	0x0800ed69
 80034d8:	20000780 	.word	0x20000780
 80034dc:	0800ec95 	.word	0x0800ec95

080034e0 <netif_config>:
 *    none
 *
 * @return
*    0: initialization success, -1: an error occurred
 ******************************************************************************/
static int netif_config(void) {
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b08a      	sub	sp, #40	; 0x28
 80034e4:	af04      	add	r7, sp, #16
  sl_status_t status;
  ip_addr_t sta_ipaddr;
  ip_addr_t sta_netmask;
  ip_addr_t sta_gw;
  int res = -1;
 80034e6:	f04f 33ff 	mov.w	r3, #4294967295
 80034ea:	617b      	str	r3, [r7, #20]
  /* Initialize the Station information */
  if (use_dhcp_client) {
 80034ec:	4b9e      	ldr	r3, [pc, #632]	; (8003768 <netif_config+0x288>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d006      	beq.n	8003502 <netif_config+0x22>
    ip_addr_set_zero_ip4(&sta_ipaddr);
 80034f4:	2300      	movs	r3, #0
 80034f6:	60fb      	str	r3, [r7, #12]
    ip_addr_set_zero_ip4(&sta_netmask);
 80034f8:	2300      	movs	r3, #0
 80034fa:	60bb      	str	r3, [r7, #8]
    ip_addr_set_zero_ip4(&sta_gw);
 80034fc:	2300      	movs	r3, #0
 80034fe:	607b      	str	r3, [r7, #4]
 8003500:	e0cb      	b.n	800369a <netif_config+0x1ba>
  } else {
    IP_ADDR4(&sta_ipaddr,sta_ip_addr0,sta_ip_addr1,sta_ip_addr2,sta_ip_addr3);
 8003502:	4b9a      	ldr	r3, [pc, #616]	; (800376c <netif_config+0x28c>)
 8003504:	781b      	ldrb	r3, [r3, #0]
 8003506:	061a      	lsls	r2, r3, #24
 8003508:	4b99      	ldr	r3, [pc, #612]	; (8003770 <netif_config+0x290>)
 800350a:	781b      	ldrb	r3, [r3, #0]
 800350c:	041b      	lsls	r3, r3, #16
 800350e:	431a      	orrs	r2, r3
 8003510:	4b98      	ldr	r3, [pc, #608]	; (8003774 <netif_config+0x294>)
 8003512:	781b      	ldrb	r3, [r3, #0]
 8003514:	021b      	lsls	r3, r3, #8
 8003516:	4313      	orrs	r3, r2
 8003518:	4a97      	ldr	r2, [pc, #604]	; (8003778 <netif_config+0x298>)
 800351a:	7812      	ldrb	r2, [r2, #0]
 800351c:	4313      	orrs	r3, r2
 800351e:	061a      	lsls	r2, r3, #24
 8003520:	4b92      	ldr	r3, [pc, #584]	; (800376c <netif_config+0x28c>)
 8003522:	781b      	ldrb	r3, [r3, #0]
 8003524:	0619      	lsls	r1, r3, #24
 8003526:	4b92      	ldr	r3, [pc, #584]	; (8003770 <netif_config+0x290>)
 8003528:	781b      	ldrb	r3, [r3, #0]
 800352a:	041b      	lsls	r3, r3, #16
 800352c:	4319      	orrs	r1, r3
 800352e:	4b91      	ldr	r3, [pc, #580]	; (8003774 <netif_config+0x294>)
 8003530:	781b      	ldrb	r3, [r3, #0]
 8003532:	021b      	lsls	r3, r3, #8
 8003534:	430b      	orrs	r3, r1
 8003536:	4990      	ldr	r1, [pc, #576]	; (8003778 <netif_config+0x298>)
 8003538:	7809      	ldrb	r1, [r1, #0]
 800353a:	430b      	orrs	r3, r1
 800353c:	021b      	lsls	r3, r3, #8
 800353e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003542:	431a      	orrs	r2, r3
 8003544:	4b89      	ldr	r3, [pc, #548]	; (800376c <netif_config+0x28c>)
 8003546:	781b      	ldrb	r3, [r3, #0]
 8003548:	0619      	lsls	r1, r3, #24
 800354a:	4b89      	ldr	r3, [pc, #548]	; (8003770 <netif_config+0x290>)
 800354c:	781b      	ldrb	r3, [r3, #0]
 800354e:	041b      	lsls	r3, r3, #16
 8003550:	4319      	orrs	r1, r3
 8003552:	4b88      	ldr	r3, [pc, #544]	; (8003774 <netif_config+0x294>)
 8003554:	781b      	ldrb	r3, [r3, #0]
 8003556:	021b      	lsls	r3, r3, #8
 8003558:	430b      	orrs	r3, r1
 800355a:	4987      	ldr	r1, [pc, #540]	; (8003778 <netif_config+0x298>)
 800355c:	7809      	ldrb	r1, [r1, #0]
 800355e:	430b      	orrs	r3, r1
 8003560:	0a1b      	lsrs	r3, r3, #8
 8003562:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003566:	431a      	orrs	r2, r3
 8003568:	4b80      	ldr	r3, [pc, #512]	; (800376c <netif_config+0x28c>)
 800356a:	781b      	ldrb	r3, [r3, #0]
 800356c:	0619      	lsls	r1, r3, #24
 800356e:	4b80      	ldr	r3, [pc, #512]	; (8003770 <netif_config+0x290>)
 8003570:	781b      	ldrb	r3, [r3, #0]
 8003572:	041b      	lsls	r3, r3, #16
 8003574:	4319      	orrs	r1, r3
 8003576:	4b7f      	ldr	r3, [pc, #508]	; (8003774 <netif_config+0x294>)
 8003578:	781b      	ldrb	r3, [r3, #0]
 800357a:	021b      	lsls	r3, r3, #8
 800357c:	430b      	orrs	r3, r1
 800357e:	497e      	ldr	r1, [pc, #504]	; (8003778 <netif_config+0x298>)
 8003580:	7809      	ldrb	r1, [r1, #0]
 8003582:	430b      	orrs	r3, r1
 8003584:	0e1b      	lsrs	r3, r3, #24
 8003586:	4313      	orrs	r3, r2
 8003588:	60fb      	str	r3, [r7, #12]
    IP_ADDR4(&sta_netmask,sta_netmask_addr0,sta_netmask_addr1,sta_netmask_addr2,sta_netmask_addr3);
 800358a:	4b7c      	ldr	r3, [pc, #496]	; (800377c <netif_config+0x29c>)
 800358c:	781b      	ldrb	r3, [r3, #0]
 800358e:	061a      	lsls	r2, r3, #24
 8003590:	4b7b      	ldr	r3, [pc, #492]	; (8003780 <netif_config+0x2a0>)
 8003592:	781b      	ldrb	r3, [r3, #0]
 8003594:	041b      	lsls	r3, r3, #16
 8003596:	431a      	orrs	r2, r3
 8003598:	4b7a      	ldr	r3, [pc, #488]	; (8003784 <netif_config+0x2a4>)
 800359a:	781b      	ldrb	r3, [r3, #0]
 800359c:	021b      	lsls	r3, r3, #8
 800359e:	4313      	orrs	r3, r2
 80035a0:	4a79      	ldr	r2, [pc, #484]	; (8003788 <netif_config+0x2a8>)
 80035a2:	7812      	ldrb	r2, [r2, #0]
 80035a4:	4313      	orrs	r3, r2
 80035a6:	061a      	lsls	r2, r3, #24
 80035a8:	4b74      	ldr	r3, [pc, #464]	; (800377c <netif_config+0x29c>)
 80035aa:	781b      	ldrb	r3, [r3, #0]
 80035ac:	0619      	lsls	r1, r3, #24
 80035ae:	4b74      	ldr	r3, [pc, #464]	; (8003780 <netif_config+0x2a0>)
 80035b0:	781b      	ldrb	r3, [r3, #0]
 80035b2:	041b      	lsls	r3, r3, #16
 80035b4:	4319      	orrs	r1, r3
 80035b6:	4b73      	ldr	r3, [pc, #460]	; (8003784 <netif_config+0x2a4>)
 80035b8:	781b      	ldrb	r3, [r3, #0]
 80035ba:	021b      	lsls	r3, r3, #8
 80035bc:	430b      	orrs	r3, r1
 80035be:	4972      	ldr	r1, [pc, #456]	; (8003788 <netif_config+0x2a8>)
 80035c0:	7809      	ldrb	r1, [r1, #0]
 80035c2:	430b      	orrs	r3, r1
 80035c4:	021b      	lsls	r3, r3, #8
 80035c6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80035ca:	431a      	orrs	r2, r3
 80035cc:	4b6b      	ldr	r3, [pc, #428]	; (800377c <netif_config+0x29c>)
 80035ce:	781b      	ldrb	r3, [r3, #0]
 80035d0:	0619      	lsls	r1, r3, #24
 80035d2:	4b6b      	ldr	r3, [pc, #428]	; (8003780 <netif_config+0x2a0>)
 80035d4:	781b      	ldrb	r3, [r3, #0]
 80035d6:	041b      	lsls	r3, r3, #16
 80035d8:	4319      	orrs	r1, r3
 80035da:	4b6a      	ldr	r3, [pc, #424]	; (8003784 <netif_config+0x2a4>)
 80035dc:	781b      	ldrb	r3, [r3, #0]
 80035de:	021b      	lsls	r3, r3, #8
 80035e0:	430b      	orrs	r3, r1
 80035e2:	4969      	ldr	r1, [pc, #420]	; (8003788 <netif_config+0x2a8>)
 80035e4:	7809      	ldrb	r1, [r1, #0]
 80035e6:	430b      	orrs	r3, r1
 80035e8:	0a1b      	lsrs	r3, r3, #8
 80035ea:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80035ee:	431a      	orrs	r2, r3
 80035f0:	4b62      	ldr	r3, [pc, #392]	; (800377c <netif_config+0x29c>)
 80035f2:	781b      	ldrb	r3, [r3, #0]
 80035f4:	0619      	lsls	r1, r3, #24
 80035f6:	4b62      	ldr	r3, [pc, #392]	; (8003780 <netif_config+0x2a0>)
 80035f8:	781b      	ldrb	r3, [r3, #0]
 80035fa:	041b      	lsls	r3, r3, #16
 80035fc:	4319      	orrs	r1, r3
 80035fe:	4b61      	ldr	r3, [pc, #388]	; (8003784 <netif_config+0x2a4>)
 8003600:	781b      	ldrb	r3, [r3, #0]
 8003602:	021b      	lsls	r3, r3, #8
 8003604:	430b      	orrs	r3, r1
 8003606:	4960      	ldr	r1, [pc, #384]	; (8003788 <netif_config+0x2a8>)
 8003608:	7809      	ldrb	r1, [r1, #0]
 800360a:	430b      	orrs	r3, r1
 800360c:	0e1b      	lsrs	r3, r3, #24
 800360e:	4313      	orrs	r3, r2
 8003610:	60bb      	str	r3, [r7, #8]
    IP_ADDR4(&sta_gw,sta_gw_addr0,sta_gw_addr1,sta_gw_addr2,sta_gw_addr3);
 8003612:	4b5e      	ldr	r3, [pc, #376]	; (800378c <netif_config+0x2ac>)
 8003614:	781b      	ldrb	r3, [r3, #0]
 8003616:	061a      	lsls	r2, r3, #24
 8003618:	4b5d      	ldr	r3, [pc, #372]	; (8003790 <netif_config+0x2b0>)
 800361a:	781b      	ldrb	r3, [r3, #0]
 800361c:	041b      	lsls	r3, r3, #16
 800361e:	431a      	orrs	r2, r3
 8003620:	4b5c      	ldr	r3, [pc, #368]	; (8003794 <netif_config+0x2b4>)
 8003622:	781b      	ldrb	r3, [r3, #0]
 8003624:	021b      	lsls	r3, r3, #8
 8003626:	4313      	orrs	r3, r2
 8003628:	4a5b      	ldr	r2, [pc, #364]	; (8003798 <netif_config+0x2b8>)
 800362a:	7812      	ldrb	r2, [r2, #0]
 800362c:	4313      	orrs	r3, r2
 800362e:	061a      	lsls	r2, r3, #24
 8003630:	4b56      	ldr	r3, [pc, #344]	; (800378c <netif_config+0x2ac>)
 8003632:	781b      	ldrb	r3, [r3, #0]
 8003634:	0619      	lsls	r1, r3, #24
 8003636:	4b56      	ldr	r3, [pc, #344]	; (8003790 <netif_config+0x2b0>)
 8003638:	781b      	ldrb	r3, [r3, #0]
 800363a:	041b      	lsls	r3, r3, #16
 800363c:	4319      	orrs	r1, r3
 800363e:	4b55      	ldr	r3, [pc, #340]	; (8003794 <netif_config+0x2b4>)
 8003640:	781b      	ldrb	r3, [r3, #0]
 8003642:	021b      	lsls	r3, r3, #8
 8003644:	430b      	orrs	r3, r1
 8003646:	4954      	ldr	r1, [pc, #336]	; (8003798 <netif_config+0x2b8>)
 8003648:	7809      	ldrb	r1, [r1, #0]
 800364a:	430b      	orrs	r3, r1
 800364c:	021b      	lsls	r3, r3, #8
 800364e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003652:	431a      	orrs	r2, r3
 8003654:	4b4d      	ldr	r3, [pc, #308]	; (800378c <netif_config+0x2ac>)
 8003656:	781b      	ldrb	r3, [r3, #0]
 8003658:	0619      	lsls	r1, r3, #24
 800365a:	4b4d      	ldr	r3, [pc, #308]	; (8003790 <netif_config+0x2b0>)
 800365c:	781b      	ldrb	r3, [r3, #0]
 800365e:	041b      	lsls	r3, r3, #16
 8003660:	4319      	orrs	r1, r3
 8003662:	4b4c      	ldr	r3, [pc, #304]	; (8003794 <netif_config+0x2b4>)
 8003664:	781b      	ldrb	r3, [r3, #0]
 8003666:	021b      	lsls	r3, r3, #8
 8003668:	430b      	orrs	r3, r1
 800366a:	494b      	ldr	r1, [pc, #300]	; (8003798 <netif_config+0x2b8>)
 800366c:	7809      	ldrb	r1, [r1, #0]
 800366e:	430b      	orrs	r3, r1
 8003670:	0a1b      	lsrs	r3, r3, #8
 8003672:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003676:	431a      	orrs	r2, r3
 8003678:	4b44      	ldr	r3, [pc, #272]	; (800378c <netif_config+0x2ac>)
 800367a:	781b      	ldrb	r3, [r3, #0]
 800367c:	0619      	lsls	r1, r3, #24
 800367e:	4b44      	ldr	r3, [pc, #272]	; (8003790 <netif_config+0x2b0>)
 8003680:	781b      	ldrb	r3, [r3, #0]
 8003682:	041b      	lsls	r3, r3, #16
 8003684:	4319      	orrs	r1, r3
 8003686:	4b43      	ldr	r3, [pc, #268]	; (8003794 <netif_config+0x2b4>)
 8003688:	781b      	ldrb	r3, [r3, #0]
 800368a:	021b      	lsls	r3, r3, #8
 800368c:	430b      	orrs	r3, r1
 800368e:	4942      	ldr	r1, [pc, #264]	; (8003798 <netif_config+0x2b8>)
 8003690:	7809      	ldrb	r1, [r1, #0]
 8003692:	430b      	orrs	r3, r1
 8003694:	0e1b      	lsrs	r3, r3, #24
 8003696:	4313      	orrs	r3, r2
 8003698:	607b      	str	r3, [r7, #4]
  }


  /* Initialize the WF200 used by the two interfaces */
  status = sl_wfx_init(&wifi_context);
 800369a:	4840      	ldr	r0, [pc, #256]	; (800379c <netif_config+0x2bc>)
 800369c:	f004 fa58 	bl	8007b50 <sl_wfx_init>
 80036a0:	6138      	str	r0, [r7, #16]
  switch (status) {
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	f640 3202 	movw	r2, #2818	; 0xb02
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d034      	beq.n	8003716 <netif_config+0x236>
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	f640 3202 	movw	r2, #2818	; 0xb02
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d83b      	bhi.n	800372e <netif_config+0x24e>
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	f640 3201 	movw	r2, #2817	; 0xb01
 80036bc:	4293      	cmp	r3, r2
 80036be:	d026      	beq.n	800370e <netif_config+0x22e>
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	f640 3201 	movw	r2, #2817	; 0xb01
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d831      	bhi.n	800372e <netif_config+0x24e>
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	2b07      	cmp	r3, #7
 80036ce:	d026      	beq.n	800371e <netif_config+0x23e>
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	2b07      	cmp	r3, #7
 80036d4:	d82b      	bhi.n	800372e <netif_config+0x24e>
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d003      	beq.n	80036e4 <netif_config+0x204>
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	2b01      	cmp	r3, #1
 80036e0:	d021      	beq.n	8003726 <netif_config+0x246>
 80036e2:	e024      	b.n	800372e <netif_config+0x24e>
  case SL_STATUS_OK:
    wifi_context.state = SL_WFX_STARTED;
 80036e4:	4b2d      	ldr	r3, [pc, #180]	; (800379c <netif_config+0x2bc>)
 80036e6:	2201      	movs	r2, #1
 80036e8:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222
    printf("WF200 initialization successful V%d.%d.%d\r\n", wifi_context.firmware_major,
 80036ec:	4b2b      	ldr	r3, [pc, #172]	; (800379c <netif_config+0x2bc>)
 80036ee:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80036f2:	4619      	mov	r1, r3
    		wifi_context.firmware_minor,
 80036f4:	4b29      	ldr	r3, [pc, #164]	; (800379c <netif_config+0x2bc>)
 80036f6:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
    printf("WF200 initialization successful V%d.%d.%d\r\n", wifi_context.firmware_major,
 80036fa:	461a      	mov	r2, r3
			wifi_context.firmware_build);
 80036fc:	4b27      	ldr	r3, [pc, #156]	; (800379c <netif_config+0x2bc>)
 80036fe:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
    printf("WF200 initialization successful V%d.%d.%d\r\n", wifi_context.firmware_major,
 8003702:	4827      	ldr	r0, [pc, #156]	; (80037a0 <netif_config+0x2c0>)
 8003704:	f017 febc 	bl	801b480 <iprintf>
    res = 0;
 8003708:	2300      	movs	r3, #0
 800370a:	617b      	str	r3, [r7, #20]
    break;
 800370c:	e012      	b.n	8003734 <netif_config+0x254>
  case SL_STATUS_WIFI_INVALID_KEY:
    printf("Failed to init WF200: Firmware keyset invalid\r\n");
 800370e:	4825      	ldr	r0, [pc, #148]	; (80037a4 <netif_config+0x2c4>)
 8003710:	f017 ff3c 	bl	801b58c <puts>
    break;
 8003714:	e00e      	b.n	8003734 <netif_config+0x254>
  case SL_STATUS_WIFI_FIRMWARE_DOWNLOAD_TIMEOUT:
    printf("Failed to init WF200: Firmware download timeout\r\n");
 8003716:	4824      	ldr	r0, [pc, #144]	; (80037a8 <netif_config+0x2c8>)
 8003718:	f017 ff38 	bl	801b58c <puts>
    break;
 800371c:	e00a      	b.n	8003734 <netif_config+0x254>
  case SL_STATUS_TIMEOUT:
    printf("Failed to init WF200: Poll for value timeout\r\n");
 800371e:	4823      	ldr	r0, [pc, #140]	; (80037ac <netif_config+0x2cc>)
 8003720:	f017 ff34 	bl	801b58c <puts>
    break;
 8003724:	e006      	b.n	8003734 <netif_config+0x254>
  case SL_STATUS_FAIL:
    printf("Failed to init WF200: Error\r\n");
 8003726:	4822      	ldr	r0, [pc, #136]	; (80037b0 <netif_config+0x2d0>)
 8003728:	f017 ff30 	bl	801b58c <puts>
    break;
 800372c:	e002      	b.n	8003734 <netif_config+0x254>
  default :
    printf("Failed to init WF200: Unknown error\r\n");
 800372e:	4821      	ldr	r0, [pc, #132]	; (80037b4 <netif_config+0x2d4>)
 8003730:	f017 ff2c 	bl	801b58c <puts>
  }

  if (res == 0) {
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d110      	bne.n	800375c <netif_config+0x27c>
    /* Add station and softAP interfaces */
    netif_add(&sta_netif, &sta_ipaddr, &sta_netmask, &sta_gw, NULL, &sta_ethernetif_init, &tcpip_input);
 800373a:	1d3b      	adds	r3, r7, #4
 800373c:	f107 0208 	add.w	r2, r7, #8
 8003740:	f107 010c 	add.w	r1, r7, #12
 8003744:	481c      	ldr	r0, [pc, #112]	; (80037b8 <netif_config+0x2d8>)
 8003746:	9002      	str	r0, [sp, #8]
 8003748:	481c      	ldr	r0, [pc, #112]	; (80037bc <netif_config+0x2dc>)
 800374a:	9001      	str	r0, [sp, #4]
 800374c:	2000      	movs	r0, #0
 800374e:	9000      	str	r0, [sp, #0]
 8003750:	481b      	ldr	r0, [pc, #108]	; (80037c0 <netif_config+0x2e0>)
 8003752:	f00b f869 	bl	800e828 <netif_add>
    //netif_add(&ap_netif, &ap_ipaddr, &ap_netmask, &ap_gw, NULL, &ap_ethernetif_init, &tcpip_input);

    /* Registers the default network interface */
    netif_set_default(&sta_netif);
 8003756:	481a      	ldr	r0, [pc, #104]	; (80037c0 <netif_config+0x2e0>)
 8003758:	f00b fa20 	bl	800eb9c <netif_set_default>
  wifi_cli_cfg_dialog();
#else
  //sl_wfx_start_ap_command(softap_channel, (uint8_t*) softap_ssid, strlen(softap_ssid), 0, 0, softap_security, 0, (uint8_t*) softap_passkey, strlen(softap_passkey), NULL, 0, NULL, 0);
#endif
  
  return res;
 800375c:	697b      	ldr	r3, [r7, #20]
}
 800375e:	4618      	mov	r0, r3
 8003760:	3718      	adds	r7, #24
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}
 8003766:	bf00      	nop
 8003768:	20000098 	.word	0x20000098
 800376c:	2000009c 	.word	0x2000009c
 8003770:	2000009d 	.word	0x2000009d
 8003774:	200007ea 	.word	0x200007ea
 8003778:	2000009e 	.word	0x2000009e
 800377c:	2000009f 	.word	0x2000009f
 8003780:	200000a0 	.word	0x200000a0
 8003784:	200000a1 	.word	0x200000a1
 8003788:	200007eb 	.word	0x200007eb
 800378c:	200007ec 	.word	0x200007ec
 8003790:	200007ed 	.word	0x200007ed
 8003794:	200007ee 	.word	0x200007ee
 8003798:	200007ef 	.word	0x200007ef
 800379c:	20000524 	.word	0x20000524
 80037a0:	0801d9fc 	.word	0x0801d9fc
 80037a4:	0801da28 	.word	0x0801da28
 80037a8:	0801da58 	.word	0x0801da58
 80037ac:	0801da8c 	.word	0x0801da8c
 80037b0:	0801dabc 	.word	0x0801dabc
 80037b4:	0801dadc 	.word	0x0801dadc
 80037b8:	0800d8d1 	.word	0x0800d8d1
 80037bc:	08003355 	.word	0x08003355
 80037c0:	20000748 	.word	0x20000748

080037c4 <lwip_start>:
 *    none
 *
 * @return
 *    none
 ******************************************************************************/
void lwip_start (void) {
 80037c4:	b5b0      	push	{r4, r5, r7, lr}
 80037c6:	b086      	sub	sp, #24
 80037c8:	af00      	add	r7, sp, #0
  osThreadDef(lwip_start, lwip_start_task_entry, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*5);
 80037ca:	4b08      	ldr	r3, [pc, #32]	; (80037ec <lwip_start+0x28>)
 80037cc:	1d3c      	adds	r4, r7, #4
 80037ce:	461d      	mov	r5, r3
 80037d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80037d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80037d4:	682b      	ldr	r3, [r5, #0]
 80037d6:	6023      	str	r3, [r4, #0]
  osThreadCreate(osThread(lwip_start), NULL);
 80037d8:	1d3b      	adds	r3, r7, #4
 80037da:	2100      	movs	r1, #0
 80037dc:	4618      	mov	r0, r3
 80037de:	f006 fb76 	bl	8009ece <osThreadCreate>
}
 80037e2:	bf00      	nop
 80037e4:	3718      	adds	r7, #24
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bdb0      	pop	{r4, r5, r7, pc}
 80037ea:	bf00      	nop
 80037ec:	0801db04 	.word	0x0801db04

080037f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	af00      	add	r7, sp, #0
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80037f4:	f000 fe12 	bl	800441c <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 80037f8:	f000 f820 	bl	800383c <SystemClock_Config>

    /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80037fc:	f000 f926 	bl	8003a4c <MX_GPIO_Init>
  MX_DMA_Init();
 8003800:	f000 f8fc 	bl	80039fc <MX_DMA_Init>
  MX_USART2_UART_Init();
 8003804:	f000 f8d0 	bl	80039a8 <MX_USART2_UART_Init>
  //MX_SPI1_Init(); THIS WILL BE HANDLE BY THE SL_WFX_DRIVER --> SL_WFX_INIT()

  //THIS INIT TAKES CARE OF MOSI,MISO AND CLK GPIO
  MX_SPI4_Init();
 8003808:	f000 f896 	bl	8003938 <MX_SPI4_Init>
  /* Clear the console and buffer */
  printf("\033\143");
 800380c:	4808      	ldr	r0, [pc, #32]	; (8003830 <main+0x40>)
 800380e:	f017 fe37 	bl	801b480 <iprintf>
  printf("\033[3J");
 8003812:	4808      	ldr	r0, [pc, #32]	; (8003834 <main+0x44>)
 8003814:	f017 fe34 	bl	801b480 <iprintf>
  printf("Hello, welcome to the WFM200 driver \r\n");
 8003818:	4807      	ldr	r0, [pc, #28]	; (8003838 <main+0x48>)
 800381a:	f017 feb7 	bl	801b58c <puts>


#ifndef spi_mode_only
  /* Task init */
//  vTraceEnable(TRC_START);
  sl_wfx_task_start();
 800381e:	f006 fa3d 	bl	8009c9c <sl_wfx_task_start>
  wifi_events_start();
 8003822:	f006 f8cd 	bl	80099c0 <wifi_events_start>
  //wifi_cli_start();					/*NOT GOING TO USE THE CLI SINCE THERE WILL NOT BE ANY USART CONNECTION*/
  lwip_start();
 8003826:	f7ff ffcd 	bl	80037c4 <lwip_start>

#endif


  /* Start scheduler */
  osKernelStart();
 800382a:	f006 fb39 	bl	8009ea0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800382e:	e7fe      	b.n	800382e <main+0x3e>
 8003830:	0801db18 	.word	0x0801db18
 8003834:	0801db1c 	.word	0x0801db1c
 8003838:	0801db24 	.word	0x0801db24

0800383c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b094      	sub	sp, #80	; 0x50
 8003840:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003842:	f107 0320 	add.w	r3, r7, #32
 8003846:	2230      	movs	r2, #48	; 0x30
 8003848:	2100      	movs	r1, #0
 800384a:	4618      	mov	r0, r3
 800384c:	f017 f8b0 	bl	801a9b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003850:	f107 030c 	add.w	r3, r7, #12
 8003854:	2200      	movs	r2, #0
 8003856:	601a      	str	r2, [r3, #0]
 8003858:	605a      	str	r2, [r3, #4]
 800385a:	609a      	str	r2, [r3, #8]
 800385c:	60da      	str	r2, [r3, #12]
 800385e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003860:	2300      	movs	r3, #0
 8003862:	60bb      	str	r3, [r7, #8]
 8003864:	4b31      	ldr	r3, [pc, #196]	; (800392c <SystemClock_Config+0xf0>)
 8003866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003868:	4a30      	ldr	r2, [pc, #192]	; (800392c <SystemClock_Config+0xf0>)
 800386a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800386e:	6413      	str	r3, [r2, #64]	; 0x40
 8003870:	4b2e      	ldr	r3, [pc, #184]	; (800392c <SystemClock_Config+0xf0>)
 8003872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003874:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003878:	60bb      	str	r3, [r7, #8]
 800387a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800387c:	2300      	movs	r3, #0
 800387e:	607b      	str	r3, [r7, #4]
 8003880:	4b2b      	ldr	r3, [pc, #172]	; (8003930 <SystemClock_Config+0xf4>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a2a      	ldr	r2, [pc, #168]	; (8003930 <SystemClock_Config+0xf4>)
 8003886:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800388a:	6013      	str	r3, [r2, #0]
 800388c:	4b28      	ldr	r3, [pc, #160]	; (8003930 <SystemClock_Config+0xf4>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003894:	607b      	str	r3, [r7, #4]
 8003896:	687b      	ldr	r3, [r7, #4]
//  RCC_OscInitStruct.PLL.PLLN = 400;
//  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
//  RCC_OscInitStruct.PLL.PLLQ = 4;

  //SETUP FOR 96MHz
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003898:	2301      	movs	r3, #1
 800389a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800389c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80038a0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80038a2:	2302      	movs	r3, #2
 80038a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80038a6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80038aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80038ac:	2308      	movs	r3, #8
 80038ae:	643b      	str	r3, [r7, #64]	; 0x40
//  RCC_OscInitStruct.PLL.PLLN = 280; //70MHz
//  RCC_OscInitStruct.PLL.PLLN = 260; //65MHz
//  RCC_OscInitStruct.PLL.PLLN = 240; //60MHz
//  RCC_OscInitStruct.PLL.PLLN = 200; //55MHz

  RCC_OscInitStruct.PLL.PLLN = 400;
 80038b0:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80038b4:	647b      	str	r3, [r7, #68]	; 0x44

  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80038b6:	2304      	movs	r3, #4
 80038b8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80038ba:	2308      	movs	r3, #8
 80038bc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80038be:	f107 0320 	add.w	r3, r7, #32
 80038c2:	4618      	mov	r0, r3
 80038c4:	f001 fe36 	bl	8005534 <HAL_RCC_OscConfig>
 80038c8:	4603      	mov	r3, r0
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d001      	beq.n	80038d2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80038ce:	f000 f9b3 	bl	8003c38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80038d2:	230f      	movs	r3, #15
 80038d4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80038d6:	2302      	movs	r3, #2
 80038d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80038da:	2300      	movs	r3, #0
 80038dc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80038de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80038e2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80038e4:	2300      	movs	r3, #0
 80038e6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80038e8:	f107 030c 	add.w	r3, r7, #12
 80038ec:	2103      	movs	r1, #3
 80038ee:	4618      	mov	r0, r3
 80038f0:	f002 f898 	bl	8005a24 <HAL_RCC_ClockConfig>
 80038f4:	4603      	mov	r3, r0
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d001      	beq.n	80038fe <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80038fa:	f000 f99d 	bl	8003c38 <Error_Handler>
  }

  /**Configure the Systick interrupt time*/
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80038fe:	f002 fa7d 	bl	8005dfc <HAL_RCC_GetHCLKFreq>
 8003902:	4603      	mov	r3, r0
 8003904:	4a0b      	ldr	r2, [pc, #44]	; (8003934 <SystemClock_Config+0xf8>)
 8003906:	fba2 2303 	umull	r2, r3, r2, r3
 800390a:	099b      	lsrs	r3, r3, #6
 800390c:	4618      	mov	r0, r3
 800390e:	f000 ff52 	bl	80047b6 <HAL_SYSTICK_Config>
	  /**Configure the Systick */
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8003912:	2004      	movs	r0, #4
 8003914:	f000 ff5c 	bl	80047d0 <HAL_SYSTICK_CLKSourceConfig>
	/* SysTick_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8003918:	2200      	movs	r2, #0
 800391a:	210f      	movs	r1, #15
 800391c:	f04f 30ff 	mov.w	r0, #4294967295
 8003920:	f000 ff11 	bl	8004746 <HAL_NVIC_SetPriority>

}
 8003924:	bf00      	nop
 8003926:	3750      	adds	r7, #80	; 0x50
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}
 800392c:	40023800 	.word	0x40023800
 8003930:	40007000 	.word	0x40007000
 8003934:	10624dd3 	.word	0x10624dd3

08003938 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	af00      	add	r7, sp, #0

  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 800393c:	4b18      	ldr	r3, [pc, #96]	; (80039a0 <MX_SPI4_Init+0x68>)
 800393e:	4a19      	ldr	r2, [pc, #100]	; (80039a4 <MX_SPI4_Init+0x6c>)
 8003940:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8003942:	4b17      	ldr	r3, [pc, #92]	; (80039a0 <MX_SPI4_Init+0x68>)
 8003944:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003948:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 800394a:	4b15      	ldr	r3, [pc, #84]	; (80039a0 <MX_SPI4_Init+0x68>)
 800394c:	2200      	movs	r2, #0
 800394e:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_16BIT;
 8003950:	4b13      	ldr	r3, [pc, #76]	; (80039a0 <MX_SPI4_Init+0x68>)
 8003952:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003956:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003958:	4b11      	ldr	r3, [pc, #68]	; (80039a0 <MX_SPI4_Init+0x68>)
 800395a:	2200      	movs	r2, #0
 800395c:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 800395e:	4b10      	ldr	r3, [pc, #64]	; (80039a0 <MX_SPI4_Init+0x68>)
 8003960:	2200      	movs	r2, #0
 8003962:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8003964:	4b0e      	ldr	r3, [pc, #56]	; (80039a0 <MX_SPI4_Init+0x68>)
 8003966:	f44f 7200 	mov.w	r2, #512	; 0x200
 800396a:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800396c:	4b0c      	ldr	r3, [pc, #48]	; (80039a0 <MX_SPI4_Init+0x68>)
 800396e:	2218      	movs	r2, #24
 8003970:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003972:	4b0b      	ldr	r3, [pc, #44]	; (80039a0 <MX_SPI4_Init+0x68>)
 8003974:	2200      	movs	r2, #0
 8003976:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8003978:	4b09      	ldr	r3, [pc, #36]	; (80039a0 <MX_SPI4_Init+0x68>)
 800397a:	2200      	movs	r2, #0
 800397c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800397e:	4b08      	ldr	r3, [pc, #32]	; (80039a0 <MX_SPI4_Init+0x68>)
 8003980:	2200      	movs	r2, #0
 8003982:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 8003984:	4b06      	ldr	r3, [pc, #24]	; (80039a0 <MX_SPI4_Init+0x68>)
 8003986:	220a      	movs	r2, #10
 8003988:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 800398a:	4805      	ldr	r0, [pc, #20]	; (80039a0 <MX_SPI4_Init+0x68>)
 800398c:	f002 fa6a 	bl	8005e64 <HAL_SPI_Init>
 8003990:	4603      	mov	r3, r0
 8003992:	2b00      	cmp	r3, #0
 8003994:	d001      	beq.n	800399a <MX_SPI4_Init+0x62>
  {
	Error_Handler();
 8003996:	f000 f94f 	bl	8003c38 <Error_Handler>
  }
}
 800399a:	bf00      	nop
 800399c:	bd80      	pop	{r7, pc}
 800399e:	bf00      	nop
 80039a0:	20000838 	.word	0x20000838
 80039a4:	40013400 	.word	0x40013400

080039a8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80039ac:	4b11      	ldr	r3, [pc, #68]	; (80039f4 <MX_USART2_UART_Init+0x4c>)
 80039ae:	4a12      	ldr	r2, [pc, #72]	; (80039f8 <MX_USART2_UART_Init+0x50>)
 80039b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 921600;
 80039b2:	4b10      	ldr	r3, [pc, #64]	; (80039f4 <MX_USART2_UART_Init+0x4c>)
 80039b4:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 80039b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80039ba:	4b0e      	ldr	r3, [pc, #56]	; (80039f4 <MX_USART2_UART_Init+0x4c>)
 80039bc:	2200      	movs	r2, #0
 80039be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80039c0:	4b0c      	ldr	r3, [pc, #48]	; (80039f4 <MX_USART2_UART_Init+0x4c>)
 80039c2:	2200      	movs	r2, #0
 80039c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80039c6:	4b0b      	ldr	r3, [pc, #44]	; (80039f4 <MX_USART2_UART_Init+0x4c>)
 80039c8:	2200      	movs	r2, #0
 80039ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80039cc:	4b09      	ldr	r3, [pc, #36]	; (80039f4 <MX_USART2_UART_Init+0x4c>)
 80039ce:	220c      	movs	r2, #12
 80039d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80039d2:	4b08      	ldr	r3, [pc, #32]	; (80039f4 <MX_USART2_UART_Init+0x4c>)
 80039d4:	2200      	movs	r2, #0
 80039d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80039d8:	4b06      	ldr	r3, [pc, #24]	; (80039f4 <MX_USART2_UART_Init+0x4c>)
 80039da:	2200      	movs	r2, #0
 80039dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80039de:	4805      	ldr	r0, [pc, #20]	; (80039f4 <MX_USART2_UART_Init+0x4c>)
 80039e0:	f003 fa58 	bl	8006e94 <HAL_UART_Init>
 80039e4:	4603      	mov	r3, r0
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d001      	beq.n	80039ee <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80039ea:	f000 f925 	bl	8003c38 <Error_Handler>
  }
}
 80039ee:	bf00      	nop
 80039f0:	bd80      	pop	{r7, pc}
 80039f2:	bf00      	nop
 80039f4:	200007f4 	.word	0x200007f4
 80039f8:	40004400 	.word	0x40004400

080039fc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b082      	sub	sp, #8
 8003a00:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003a02:	2300      	movs	r3, #0
 8003a04:	607b      	str	r3, [r7, #4]
 8003a06:	4b10      	ldr	r3, [pc, #64]	; (8003a48 <MX_DMA_Init+0x4c>)
 8003a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a0a:	4a0f      	ldr	r2, [pc, #60]	; (8003a48 <MX_DMA_Init+0x4c>)
 8003a0c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003a10:	6313      	str	r3, [r2, #48]	; 0x30
 8003a12:	4b0d      	ldr	r3, [pc, #52]	; (8003a48 <MX_DMA_Init+0x4c>)
 8003a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a1a:	607b      	str	r3, [r7, #4]
 8003a1c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */

  /* SPI4 */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8003a1e:	2200      	movs	r2, #0
 8003a20:	2100      	movs	r1, #0
 8003a22:	2039      	movs	r0, #57	; 0x39
 8003a24:	f000 fe8f 	bl	8004746 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8003a28:	2039      	movs	r0, #57	; 0x39
 8003a2a:	f000 fea8 	bl	800477e <HAL_NVIC_EnableIRQ>

  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8003a2e:	2200      	movs	r2, #0
 8003a30:	2100      	movs	r1, #0
 8003a32:	203b      	movs	r0, #59	; 0x3b
 8003a34:	f000 fe87 	bl	8004746 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8003a38:	203b      	movs	r0, #59	; 0x3b
 8003a3a:	f000 fea0 	bl	800477e <HAL_NVIC_EnableIRQ>


}
 8003a3e:	bf00      	nop
 8003a40:	3708      	adds	r7, #8
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	bf00      	nop
 8003a48:	40023800 	.word	0x40023800

08003a4c <MX_GPIO_Init>:


//INIT THE WFM PINs THAT ARE NOT SPI RELATED
static void MX_GPIO_Init(void)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b08a      	sub	sp, #40	; 0x28
 8003a50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a52:	f107 0314 	add.w	r3, r7, #20
 8003a56:	2200      	movs	r2, #0
 8003a58:	601a      	str	r2, [r3, #0]
 8003a5a:	605a      	str	r2, [r3, #4]
 8003a5c:	609a      	str	r2, [r3, #8]
 8003a5e:	60da      	str	r2, [r3, #12]
 8003a60:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a62:	2300      	movs	r3, #0
 8003a64:	613b      	str	r3, [r7, #16]
 8003a66:	4b67      	ldr	r3, [pc, #412]	; (8003c04 <MX_GPIO_Init+0x1b8>)
 8003a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a6a:	4a66      	ldr	r2, [pc, #408]	; (8003c04 <MX_GPIO_Init+0x1b8>)
 8003a6c:	f043 0304 	orr.w	r3, r3, #4
 8003a70:	6313      	str	r3, [r2, #48]	; 0x30
 8003a72:	4b64      	ldr	r3, [pc, #400]	; (8003c04 <MX_GPIO_Init+0x1b8>)
 8003a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a76:	f003 0304 	and.w	r3, r3, #4
 8003a7a:	613b      	str	r3, [r7, #16]
 8003a7c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003a7e:	2300      	movs	r3, #0
 8003a80:	60fb      	str	r3, [r7, #12]
 8003a82:	4b60      	ldr	r3, [pc, #384]	; (8003c04 <MX_GPIO_Init+0x1b8>)
 8003a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a86:	4a5f      	ldr	r2, [pc, #380]	; (8003c04 <MX_GPIO_Init+0x1b8>)
 8003a88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8003a8e:	4b5d      	ldr	r3, [pc, #372]	; (8003c04 <MX_GPIO_Init+0x1b8>)
 8003a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a96:	60fb      	str	r3, [r7, #12]
 8003a98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	60bb      	str	r3, [r7, #8]
 8003a9e:	4b59      	ldr	r3, [pc, #356]	; (8003c04 <MX_GPIO_Init+0x1b8>)
 8003aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aa2:	4a58      	ldr	r2, [pc, #352]	; (8003c04 <MX_GPIO_Init+0x1b8>)
 8003aa4:	f043 0301 	orr.w	r3, r3, #1
 8003aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8003aaa:	4b56      	ldr	r3, [pc, #344]	; (8003c04 <MX_GPIO_Init+0x1b8>)
 8003aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aae:	f003 0301 	and.w	r3, r3, #1
 8003ab2:	60bb      	str	r3, [r7, #8]
 8003ab4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	607b      	str	r3, [r7, #4]
 8003aba:	4b52      	ldr	r3, [pc, #328]	; (8003c04 <MX_GPIO_Init+0x1b8>)
 8003abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003abe:	4a51      	ldr	r2, [pc, #324]	; (8003c04 <MX_GPIO_Init+0x1b8>)
 8003ac0:	f043 0302 	orr.w	r3, r3, #2
 8003ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8003ac6:	4b4f      	ldr	r3, [pc, #316]	; (8003c04 <MX_GPIO_Init+0x1b8>)
 8003ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aca:	f003 0302 	and.w	r3, r3, #2
 8003ace:	607b      	str	r3, [r7, #4]
 8003ad0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WFM_NSS_GPIO_Port, WFM_NSS_Pin, GPIO_PIN_SET);
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	2110      	movs	r1, #16
 8003ad6:	484c      	ldr	r0, [pc, #304]	; (8003c08 <MX_GPIO_Init+0x1bc>)
 8003ad8:	f001 fcee 	bl	80054b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WFM_RESET_GPIO_Port, WFM_RESET_Pin, GPIO_PIN_RESET);
 8003adc:	2200      	movs	r2, #0
 8003ade:	2101      	movs	r1, #1
 8003ae0:	484a      	ldr	r0, [pc, #296]	; (8003c0c <MX_GPIO_Init+0x1c0>)
 8003ae2:	f001 fce9 	bl	80054b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RHD_SPI_CS_Port, RHD_SPI_CS_Pin, GPIO_PIN_SET);
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003aec:	4848      	ldr	r0, [pc, #288]	; (8003c10 <MX_GPIO_Init+0x1c4>)
 8003aee:	f001 fce3 	bl	80054b8 <HAL_GPIO_WritePin>

  //  /*Configure GPIO pin Output Level */
//  HAL_GPIO_WritePin(WFM_GPIO_WIRQ_Port, WFM_GPIO_WIRQ_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : WFM_NSS_Pin */
  GPIO_InitStruct.Pin = WFM_NSS_Pin;
 8003af2:	2310      	movs	r3, #16
 8003af4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003af6:	2301      	movs	r3, #1
 8003af8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003afa:	2300      	movs	r3, #0
 8003afc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003afe:	2303      	movs	r3, #3
 8003b00:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(WFM_NSS_GPIO_Port, &GPIO_InitStruct);
 8003b02:	f107 0314 	add.w	r3, r7, #20
 8003b06:	4619      	mov	r1, r3
 8003b08:	483f      	ldr	r0, [pc, #252]	; (8003c08 <MX_GPIO_Init+0x1bc>)
 8003b0a:	f001 fa6d 	bl	8004fe8 <HAL_GPIO_Init>

  /*Configure GPIO pin : WFM_RESET_Pin */
  GPIO_InitStruct.Pin = WFM_RESET_Pin;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b12:	2301      	movs	r3, #1
 8003b14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b16:	2300      	movs	r3, #0
 8003b18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(WFM_RESET_GPIO_Port, &GPIO_InitStruct);
 8003b1e:	f107 0314 	add.w	r3, r7, #20
 8003b22:	4619      	mov	r1, r3
 8003b24:	4839      	ldr	r0, [pc, #228]	; (8003c0c <MX_GPIO_Init+0x1c0>)
 8003b26:	f001 fa5f 	bl	8004fe8 <HAL_GPIO_Init>

  /*Configure GPIO pin : WFM_RESET_Pin */
   GPIO_InitStruct.Pin = WFM_WUP_Pin;
 8003b2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b2e:	617b      	str	r3, [r7, #20]
   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b30:	2301      	movs	r3, #1
 8003b32:	61bb      	str	r3, [r7, #24]
   GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b34:	2300      	movs	r3, #0
 8003b36:	61fb      	str	r3, [r7, #28]
   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b38:	2303      	movs	r3, #3
 8003b3a:	623b      	str	r3, [r7, #32]
   HAL_GPIO_Init(WFM_WUP_GPIO_Port, &GPIO_InitStruct);
 8003b3c:	f107 0314 	add.w	r3, r7, #20
 8003b40:	4619      	mov	r1, r3
 8003b42:	4833      	ldr	r0, [pc, #204]	; (8003c10 <MX_GPIO_Init+0x1c4>)
 8003b44:	f001 fa50 	bl	8004fe8 <HAL_GPIO_Init>

  /*Configure GPIO pin : WFM_SPI_WIRQ_Pin */
  GPIO_InitStruct.Pin = WFM_SPI_WIRQ_Pin;
 8003b48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003b4e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003b52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b54:	2300      	movs	r3, #0
 8003b56:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(WFM_SPI_WIRQ_Port, &GPIO_InitStruct);
 8003b58:	f107 0314 	add.w	r3, r7, #20
 8003b5c:	4619      	mov	r1, r3
 8003b5e:	482c      	ldr	r0, [pc, #176]	; (8003c10 <MX_GPIO_Init+0x1c4>)
 8003b60:	f001 fa42 	bl	8004fe8 <HAL_GPIO_Init>


  /*Configure GPIO pin: RHD_CS */
  GPIO_InitStruct.Pin = UDP_TASK_SCOPE_Pin;
 8003b64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b72:	2303      	movs	r3, #3
 8003b74:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(UDP_TASK_SCOPE_Port, &GPIO_InitStruct);
 8003b76:	f107 0314 	add.w	r3, r7, #20
 8003b7a:	4619      	mov	r1, r3
 8003b7c:	4823      	ldr	r0, [pc, #140]	; (8003c0c <MX_GPIO_Init+0x1c0>)
 8003b7e:	f001 fa33 	bl	8004fe8 <HAL_GPIO_Init>

  /*Configure GPIO pin: RHD_CS */
  GPIO_InitStruct.Pin = SPI_TASK_SCOPE_Pin;
 8003b82:	2340      	movs	r3, #64	; 0x40
 8003b84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b86:	2301      	movs	r3, #1
 8003b88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b8e:	2303      	movs	r3, #3
 8003b90:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_TASK_SCOPE_Port, &GPIO_InitStruct);
 8003b92:	f107 0314 	add.w	r3, r7, #20
 8003b96:	4619      	mov	r1, r3
 8003b98:	481c      	ldr	r0, [pc, #112]	; (8003c0c <MX_GPIO_Init+0x1c0>)
 8003b9a:	f001 fa25 	bl	8004fe8 <HAL_GPIO_Init>

  /*Configure GPIO pin: RHD_CS */
  GPIO_InitStruct.Pin = FULL_TASK_SCOPE_Pin;
 8003b9e:	2320      	movs	r3, #32
 8003ba0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003baa:	2303      	movs	r3, #3
 8003bac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(FULL_TASK_SCOPE_Port, &GPIO_InitStruct);
 8003bae:	f107 0314 	add.w	r3, r7, #20
 8003bb2:	4619      	mov	r1, r3
 8003bb4:	4815      	ldr	r0, [pc, #84]	; (8003c0c <MX_GPIO_Init+0x1c0>)
 8003bb6:	f001 fa17 	bl	8004fe8 <HAL_GPIO_Init>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UDP_TASK_SCOPE_Port, UDP_TASK_SCOPE_Pin, GPIO_PIN_RESET);
 8003bba:	2200      	movs	r2, #0
 8003bbc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003bc0:	4812      	ldr	r0, [pc, #72]	; (8003c0c <MX_GPIO_Init+0x1c0>)
 8003bc2:	f001 fc79 	bl	80054b8 <HAL_GPIO_WritePin>
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UDP_TASK_SCOPE_Port, UDP_TASK_SCOPE_Pin, GPIO_PIN_SET);
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003bcc:	480f      	ldr	r0, [pc, #60]	; (8003c0c <MX_GPIO_Init+0x1c0>)
 8003bce:	f001 fc73 	bl	80054b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_TASK_SCOPE_Port, SPI_TASK_SCOPE_Pin, GPIO_PIN_RESET);
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	2140      	movs	r1, #64	; 0x40
 8003bd6:	480d      	ldr	r0, [pc, #52]	; (8003c0c <MX_GPIO_Init+0x1c0>)
 8003bd8:	f001 fc6e 	bl	80054b8 <HAL_GPIO_WritePin>
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_TASK_SCOPE_Port, SPI_TASK_SCOPE_Pin, GPIO_PIN_SET);
 8003bdc:	2201      	movs	r2, #1
 8003bde:	2140      	movs	r1, #64	; 0x40
 8003be0:	480a      	ldr	r0, [pc, #40]	; (8003c0c <MX_GPIO_Init+0x1c0>)
 8003be2:	f001 fc69 	bl	80054b8 <HAL_GPIO_WritePin>


  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FULL_TASK_SCOPE_Port, FULL_TASK_SCOPE_Pin, GPIO_PIN_RESET);
 8003be6:	2200      	movs	r2, #0
 8003be8:	2120      	movs	r1, #32
 8003bea:	4808      	ldr	r0, [pc, #32]	; (8003c0c <MX_GPIO_Init+0x1c0>)
 8003bec:	f001 fc64 	bl	80054b8 <HAL_GPIO_WritePin>
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FULL_TASK_SCOPE_Port, FULL_TASK_SCOPE_Pin, GPIO_PIN_SET);
 8003bf0:	2201      	movs	r2, #1
 8003bf2:	2120      	movs	r1, #32
 8003bf4:	4805      	ldr	r0, [pc, #20]	; (8003c0c <MX_GPIO_Init+0x1c0>)
 8003bf6:	f001 fc5f 	bl	80054b8 <HAL_GPIO_WritePin>

  /* EXTI interrupt init*/
//  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 10, 0);
//  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);

}
 8003bfa:	bf00      	nop
 8003bfc:	3728      	adds	r7, #40	; 0x28
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}
 8003c02:	bf00      	nop
 8003c04:	40023800 	.word	0x40023800
 8003c08:	40020000 	.word	0x40020000
 8003c0c:	40020800 	.word	0x40020800
 8003c10:	40020400 	.word	0x40020400

08003c14 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b082      	sub	sp, #8
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8003c1c:	1d39      	adds	r1, r7, #4
 8003c1e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003c22:	2201      	movs	r2, #1
 8003c24:	4803      	ldr	r0, [pc, #12]	; (8003c34 <__io_putchar+0x20>)
 8003c26:	f003 f982 	bl	8006f2e <HAL_UART_Transmit>

  return ch;
 8003c2a:	687b      	ldr	r3, [r7, #4]
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	3708      	adds	r7, #8
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}
 8003c34:	200007f4 	.word	0x200007f4

08003c38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003c3c:	b672      	cpsid	i
}
 8003c3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003c40:	e7fe      	b.n	8003c40 <Error_Handler+0x8>
	...

08003c44 <HAL_MspInit>:
extern DMA_HandleTypeDef hdma_spi1_tx;



void HAL_MspInit(void)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b082      	sub	sp, #8
 8003c48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

	  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	607b      	str	r3, [r7, #4]
 8003c4e:	4b25      	ldr	r3, [pc, #148]	; (8003ce4 <HAL_MspInit+0xa0>)
 8003c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c52:	4a24      	ldr	r2, [pc, #144]	; (8003ce4 <HAL_MspInit+0xa0>)
 8003c54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c58:	6453      	str	r3, [r2, #68]	; 0x44
 8003c5a:	4b22      	ldr	r3, [pc, #136]	; (8003ce4 <HAL_MspInit+0xa0>)
 8003c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c62:	607b      	str	r3, [r7, #4]
 8003c64:	687b      	ldr	r3, [r7, #4]
	  __HAL_RCC_PWR_CLK_ENABLE();
 8003c66:	2300      	movs	r3, #0
 8003c68:	603b      	str	r3, [r7, #0]
 8003c6a:	4b1e      	ldr	r3, [pc, #120]	; (8003ce4 <HAL_MspInit+0xa0>)
 8003c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c6e:	4a1d      	ldr	r2, [pc, #116]	; (8003ce4 <HAL_MspInit+0xa0>)
 8003c70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c74:	6413      	str	r3, [r2, #64]	; 0x40
 8003c76:	4b1b      	ldr	r3, [pc, #108]	; (8003ce4 <HAL_MspInit+0xa0>)
 8003c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c7e:	603b      	str	r3, [r7, #0]
 8003c80:	683b      	ldr	r3, [r7, #0]

	  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c82:	2003      	movs	r0, #3
 8003c84:	f000 fd54 	bl	8004730 <HAL_NVIC_SetPriorityGrouping>

	  /* System interrupt init*/
	  /* MemoryManagement_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8003c88:	2200      	movs	r2, #0
 8003c8a:	2100      	movs	r1, #0
 8003c8c:	f06f 000b 	mvn.w	r0, #11
 8003c90:	f000 fd59 	bl	8004746 <HAL_NVIC_SetPriority>
	  /* BusFault_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8003c94:	2200      	movs	r2, #0
 8003c96:	2100      	movs	r1, #0
 8003c98:	f06f 000a 	mvn.w	r0, #10
 8003c9c:	f000 fd53 	bl	8004746 <HAL_NVIC_SetPriority>
	  /* UsageFault_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	2100      	movs	r1, #0
 8003ca4:	f06f 0009 	mvn.w	r0, #9
 8003ca8:	f000 fd4d 	bl	8004746 <HAL_NVIC_SetPriority>
	  /* SVCall_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8003cac:	2200      	movs	r2, #0
 8003cae:	2100      	movs	r1, #0
 8003cb0:	f06f 0004 	mvn.w	r0, #4
 8003cb4:	f000 fd47 	bl	8004746 <HAL_NVIC_SetPriority>
	  /* DebugMonitor_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8003cb8:	2200      	movs	r2, #0
 8003cba:	2100      	movs	r1, #0
 8003cbc:	f06f 0003 	mvn.w	r0, #3
 8003cc0:	f000 fd41 	bl	8004746 <HAL_NVIC_SetPriority>
	  /* PendSV_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	210f      	movs	r1, #15
 8003cc8:	f06f 0001 	mvn.w	r0, #1
 8003ccc:	f000 fd3b 	bl	8004746 <HAL_NVIC_SetPriority>
	  /* SysTick_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	210f      	movs	r1, #15
 8003cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8003cd8:	f000 fd35 	bl	8004746 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003cdc:	bf00      	nop
 8003cde:	3708      	adds	r7, #8
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}
 8003ce4:	40023800 	.word	0x40023800

08003ce8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b08c      	sub	sp, #48	; 0x30
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cf0:	f107 031c 	add.w	r3, r7, #28
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	601a      	str	r2, [r3, #0]
 8003cf8:	605a      	str	r2, [r3, #4]
 8003cfa:	609a      	str	r2, [r3, #8]
 8003cfc:	60da      	str	r2, [r3, #12]
 8003cfe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a92      	ldr	r2, [pc, #584]	; (8003f50 <HAL_SPI_MspInit+0x268>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	f040 80a1 	bne.w	8003e4e <HAL_SPI_MspInit+0x166>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	61bb      	str	r3, [r7, #24]
 8003d10:	4b90      	ldr	r3, [pc, #576]	; (8003f54 <HAL_SPI_MspInit+0x26c>)
 8003d12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d14:	4a8f      	ldr	r2, [pc, #572]	; (8003f54 <HAL_SPI_MspInit+0x26c>)
 8003d16:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003d1a:	6453      	str	r3, [r2, #68]	; 0x44
 8003d1c:	4b8d      	ldr	r3, [pc, #564]	; (8003f54 <HAL_SPI_MspInit+0x26c>)
 8003d1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d24:	61bb      	str	r3, [r7, #24]
 8003d26:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d28:	2300      	movs	r3, #0
 8003d2a:	617b      	str	r3, [r7, #20]
 8003d2c:	4b89      	ldr	r3, [pc, #548]	; (8003f54 <HAL_SPI_MspInit+0x26c>)
 8003d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d30:	4a88      	ldr	r2, [pc, #544]	; (8003f54 <HAL_SPI_MspInit+0x26c>)
 8003d32:	f043 0301 	orr.w	r3, r3, #1
 8003d36:	6313      	str	r3, [r2, #48]	; 0x30
 8003d38:	4b86      	ldr	r3, [pc, #536]	; (8003f54 <HAL_SPI_MspInit+0x26c>)
 8003d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d3c:	f003 0301 	and.w	r3, r3, #1
 8003d40:	617b      	str	r3, [r7, #20]
 8003d42:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = WFM_SCK_Pin|WFM_MISO_Pin|WFM_MOSI_Pin;
 8003d44:	23e0      	movs	r3, #224	; 0xe0
 8003d46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d48:	2302      	movs	r3, #2
 8003d4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d50:	2303      	movs	r3, #3
 8003d52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003d54:	2305      	movs	r3, #5
 8003d56:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d58:	f107 031c 	add.w	r3, r7, #28
 8003d5c:	4619      	mov	r1, r3
 8003d5e:	487e      	ldr	r0, [pc, #504]	; (8003f58 <HAL_SPI_MspInit+0x270>)
 8003d60:	f001 f942 	bl	8004fe8 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8003d64:	4b7d      	ldr	r3, [pc, #500]	; (8003f5c <HAL_SPI_MspInit+0x274>)
 8003d66:	4a7e      	ldr	r2, [pc, #504]	; (8003f60 <HAL_SPI_MspInit+0x278>)
 8003d68:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8003d6a:	4b7c      	ldr	r3, [pc, #496]	; (8003f5c <HAL_SPI_MspInit+0x274>)
 8003d6c:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8003d70:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003d72:	4b7a      	ldr	r3, [pc, #488]	; (8003f5c <HAL_SPI_MspInit+0x274>)
 8003d74:	2200      	movs	r2, #0
 8003d76:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003d78:	4b78      	ldr	r3, [pc, #480]	; (8003f5c <HAL_SPI_MspInit+0x274>)
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003d7e:	4b77      	ldr	r3, [pc, #476]	; (8003f5c <HAL_SPI_MspInit+0x274>)
 8003d80:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003d84:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003d86:	4b75      	ldr	r3, [pc, #468]	; (8003f5c <HAL_SPI_MspInit+0x274>)
 8003d88:	2200      	movs	r2, #0
 8003d8a:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003d8c:	4b73      	ldr	r3, [pc, #460]	; (8003f5c <HAL_SPI_MspInit+0x274>)
 8003d8e:	2200      	movs	r2, #0
 8003d90:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8003d92:	4b72      	ldr	r3, [pc, #456]	; (8003f5c <HAL_SPI_MspInit+0x274>)
 8003d94:	2200      	movs	r2, #0
 8003d96:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003d98:	4b70      	ldr	r3, [pc, #448]	; (8003f5c <HAL_SPI_MspInit+0x274>)
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003d9e:	4b6f      	ldr	r3, [pc, #444]	; (8003f5c <HAL_SPI_MspInit+0x274>)
 8003da0:	2200      	movs	r2, #0
 8003da2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8003da4:	486d      	ldr	r0, [pc, #436]	; (8003f5c <HAL_SPI_MspInit+0x274>)
 8003da6:	f000 fd2f 	bl	8004808 <HAL_DMA_Init>
 8003daa:	4603      	mov	r3, r0
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d001      	beq.n	8003db4 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 8003db0:	f7ff ff42 	bl	8003c38 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	4a69      	ldr	r2, [pc, #420]	; (8003f5c <HAL_SPI_MspInit+0x274>)
 8003db8:	64da      	str	r2, [r3, #76]	; 0x4c
 8003dba:	4a68      	ldr	r2, [pc, #416]	; (8003f5c <HAL_SPI_MspInit+0x274>)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream2;
 8003dc0:	4b68      	ldr	r3, [pc, #416]	; (8003f64 <HAL_SPI_MspInit+0x27c>)
 8003dc2:	4a69      	ldr	r2, [pc, #420]	; (8003f68 <HAL_SPI_MspInit+0x280>)
 8003dc4:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_2;
 8003dc6:	4b67      	ldr	r3, [pc, #412]	; (8003f64 <HAL_SPI_MspInit+0x27c>)
 8003dc8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003dcc:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003dce:	4b65      	ldr	r3, [pc, #404]	; (8003f64 <HAL_SPI_MspInit+0x27c>)
 8003dd0:	2240      	movs	r2, #64	; 0x40
 8003dd2:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003dd4:	4b63      	ldr	r3, [pc, #396]	; (8003f64 <HAL_SPI_MspInit+0x27c>)
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003dda:	4b62      	ldr	r3, [pc, #392]	; (8003f64 <HAL_SPI_MspInit+0x27c>)
 8003ddc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003de0:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003de2:	4b60      	ldr	r3, [pc, #384]	; (8003f64 <HAL_SPI_MspInit+0x27c>)
 8003de4:	2200      	movs	r2, #0
 8003de6:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003de8:	4b5e      	ldr	r3, [pc, #376]	; (8003f64 <HAL_SPI_MspInit+0x27c>)
 8003dea:	2200      	movs	r2, #0
 8003dec:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8003dee:	4b5d      	ldr	r3, [pc, #372]	; (8003f64 <HAL_SPI_MspInit+0x27c>)
 8003df0:	2200      	movs	r2, #0
 8003df2:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003df4:	4b5b      	ldr	r3, [pc, #364]	; (8003f64 <HAL_SPI_MspInit+0x27c>)
 8003df6:	2200      	movs	r2, #0
 8003df8:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003dfa:	4b5a      	ldr	r3, [pc, #360]	; (8003f64 <HAL_SPI_MspInit+0x27c>)
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8003e00:	4858      	ldr	r0, [pc, #352]	; (8003f64 <HAL_SPI_MspInit+0x27c>)
 8003e02:	f000 fd01 	bl	8004808 <HAL_DMA_Init>
 8003e06:	4603      	mov	r3, r0
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d001      	beq.n	8003e10 <HAL_SPI_MspInit+0x128>
    {
      Error_Handler();
 8003e0c:	f7ff ff14 	bl	8003c38 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	4a54      	ldr	r2, [pc, #336]	; (8003f64 <HAL_SPI_MspInit+0x27c>)
 8003e14:	649a      	str	r2, [r3, #72]	; 0x48
 8003e16:	4a53      	ldr	r2, [pc, #332]	; (8003f64 <HAL_SPI_MspInit+0x27c>)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6393      	str	r3, [r2, #56]	; 0x38

    /* DMA interrupt init */
    /* DMA2_Stream0_IRQn RX interrupt configuration */
    HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 10, 1);
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	210a      	movs	r1, #10
 8003e20:	2038      	movs	r0, #56	; 0x38
 8003e22:	f000 fc90 	bl	8004746 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8003e26:	2038      	movs	r0, #56	; 0x38
 8003e28:	f000 fca9 	bl	800477e <HAL_NVIC_EnableIRQ>

    /* DMA2_Stream3_IRQn TX interrupt configuration */
    HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 10, 0);
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	210a      	movs	r1, #10
 8003e30:	203a      	movs	r0, #58	; 0x3a
 8003e32:	f000 fc88 	bl	8004746 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8003e36:	203a      	movs	r0, #58	; 0x3a
 8003e38:	f000 fca1 	bl	800477e <HAL_NVIC_EnableIRQ>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 10, 2);
 8003e3c:	2202      	movs	r2, #2
 8003e3e:	210a      	movs	r1, #10
 8003e40:	2023      	movs	r0, #35	; 0x23
 8003e42:	f000 fc80 	bl	8004746 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8003e46:	2023      	movs	r0, #35	; 0x23
 8003e48:	f000 fc99 	bl	800477e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8003e4c:	e07b      	b.n	8003f46 <HAL_SPI_MspInit+0x25e>
  else if(hspi->Instance==SPI4)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a46      	ldr	r2, [pc, #280]	; (8003f6c <HAL_SPI_MspInit+0x284>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d176      	bne.n	8003f46 <HAL_SPI_MspInit+0x25e>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8003e58:	2300      	movs	r3, #0
 8003e5a:	613b      	str	r3, [r7, #16]
 8003e5c:	4b3d      	ldr	r3, [pc, #244]	; (8003f54 <HAL_SPI_MspInit+0x26c>)
 8003e5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e60:	4a3c      	ldr	r2, [pc, #240]	; (8003f54 <HAL_SPI_MspInit+0x26c>)
 8003e62:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003e66:	6453      	str	r3, [r2, #68]	; 0x44
 8003e68:	4b3a      	ldr	r3, [pc, #232]	; (8003f54 <HAL_SPI_MspInit+0x26c>)
 8003e6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e70:	613b      	str	r3, [r7, #16]
 8003e72:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e74:	2300      	movs	r3, #0
 8003e76:	60fb      	str	r3, [r7, #12]
 8003e78:	4b36      	ldr	r3, [pc, #216]	; (8003f54 <HAL_SPI_MspInit+0x26c>)
 8003e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e7c:	4a35      	ldr	r2, [pc, #212]	; (8003f54 <HAL_SPI_MspInit+0x26c>)
 8003e7e:	f043 0301 	orr.w	r3, r3, #1
 8003e82:	6313      	str	r3, [r2, #48]	; 0x30
 8003e84:	4b33      	ldr	r3, [pc, #204]	; (8003f54 <HAL_SPI_MspInit+0x26c>)
 8003e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e88:	f003 0301 	and.w	r3, r3, #1
 8003e8c:	60fb      	str	r3, [r7, #12]
 8003e8e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e90:	2300      	movs	r3, #0
 8003e92:	60bb      	str	r3, [r7, #8]
 8003e94:	4b2f      	ldr	r3, [pc, #188]	; (8003f54 <HAL_SPI_MspInit+0x26c>)
 8003e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e98:	4a2e      	ldr	r2, [pc, #184]	; (8003f54 <HAL_SPI_MspInit+0x26c>)
 8003e9a:	f043 0302 	orr.w	r3, r3, #2
 8003e9e:	6313      	str	r3, [r2, #48]	; 0x30
 8003ea0:	4b2c      	ldr	r3, [pc, #176]	; (8003f54 <HAL_SPI_MspInit+0x26c>)
 8003ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ea4:	f003 0302 	and.w	r3, r3, #2
 8003ea8:	60bb      	str	r3, [r7, #8]
 8003eaa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = RHD_SPI_MOSI_Pin;
 8003eac:	2302      	movs	r3, #2
 8003eae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003eb0:	2302      	movs	r3, #2
 8003eb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003eb8:	2303      	movs	r3, #3
 8003eba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8003ebc:	2305      	movs	r3, #5
 8003ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(RHD_SPI_MOSI_Port, &GPIO_InitStruct);
 8003ec0:	f107 031c 	add.w	r3, r7, #28
 8003ec4:	4619      	mov	r1, r3
 8003ec6:	4824      	ldr	r0, [pc, #144]	; (8003f58 <HAL_SPI_MspInit+0x270>)
 8003ec8:	f001 f88e 	bl	8004fe8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RHD_SPI_MISO_Pin;
 8003ecc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003ed0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ed2:	2302      	movs	r3, #2
 8003ed4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003eda:	2303      	movs	r3, #3
 8003edc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI4;
 8003ede:	2306      	movs	r3, #6
 8003ee0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(RHD_SPI_MISO_Port, &GPIO_InitStruct);
 8003ee2:	f107 031c 	add.w	r3, r7, #28
 8003ee6:	4619      	mov	r1, r3
 8003ee8:	481b      	ldr	r0, [pc, #108]	; (8003f58 <HAL_SPI_MspInit+0x270>)
 8003eea:	f001 f87d 	bl	8004fe8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RHD_SPI_CLK_Pin;
 8003eee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003ef2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ef4:	2302      	movs	r3, #2
 8003ef6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003efc:	2303      	movs	r3, #3
 8003efe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI4;
 8003f00:	2306      	movs	r3, #6
 8003f02:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(RHD_SPI_CLK_Port, &GPIO_InitStruct);
 8003f04:	f107 031c 	add.w	r3, r7, #28
 8003f08:	4619      	mov	r1, r3
 8003f0a:	4819      	ldr	r0, [pc, #100]	; (8003f70 <HAL_SPI_MspInit+0x288>)
 8003f0c:	f001 f86c 	bl	8004fe8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RHD_SPI_CS_Pin;
 8003f10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f16:	2301      	movs	r3, #1
 8003f18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f1e:	2303      	movs	r3, #3
 8003f20:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(RHD_SPI_CS_Port, &GPIO_InitStruct);
 8003f22:	f107 031c 	add.w	r3, r7, #28
 8003f26:	4619      	mov	r1, r3
 8003f28:	4811      	ldr	r0, [pc, #68]	; (8003f70 <HAL_SPI_MspInit+0x288>)
 8003f2a:	f001 f85d 	bl	8004fe8 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(RHD_SPI_CS_Port, RHD_SPI_CS_Pin, GPIO_PIN_RESET);
 8003f2e:	2200      	movs	r2, #0
 8003f30:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003f34:	480e      	ldr	r0, [pc, #56]	; (8003f70 <HAL_SPI_MspInit+0x288>)
 8003f36:	f001 fabf 	bl	80054b8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RHD_SPI_CS_Port, RHD_SPI_CS_Pin, GPIO_PIN_SET);
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003f40:	480b      	ldr	r0, [pc, #44]	; (8003f70 <HAL_SPI_MspInit+0x288>)
 8003f42:	f001 fab9 	bl	80054b8 <HAL_GPIO_WritePin>
}
 8003f46:	bf00      	nop
 8003f48:	3730      	adds	r7, #48	; 0x30
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}
 8003f4e:	bf00      	nop
 8003f50:	40013000 	.word	0x40013000
 8003f54:	40023800 	.word	0x40023800
 8003f58:	40020000 	.word	0x40020000
 8003f5c:	200012a8 	.word	0x200012a8
 8003f60:	40026410 	.word	0x40026410
 8003f64:	20001248 	.word	0x20001248
 8003f68:	40026440 	.word	0x40026440
 8003f6c:	40013400 	.word	0x40013400
 8003f70:	40020400 	.word	0x40020400

08003f74 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b082      	sub	sp, #8
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI1)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a18      	ldr	r2, [pc, #96]	; (8003fe4 <HAL_SPI_MspDeInit+0x70>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d114      	bne.n	8003fb0 <HAL_SPI_MspDeInit+0x3c>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 8003f86:	4b18      	ldr	r3, [pc, #96]	; (8003fe8 <HAL_SPI_MspDeInit+0x74>)
 8003f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f8a:	4a17      	ldr	r2, [pc, #92]	; (8003fe8 <HAL_SPI_MspDeInit+0x74>)
 8003f8c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003f90:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, WFM_SCK_Pin|WFM_MISO_Pin|WFM_MOSI_Pin);
 8003f92:	21e0      	movs	r1, #224	; 0xe0
 8003f94:	4815      	ldr	r0, [pc, #84]	; (8003fec <HAL_SPI_MspDeInit+0x78>)
 8003f96:	f001 f9ab 	bl	80052f0 <HAL_GPIO_DeInit>

    /* SPI1 DMA DeInit */
    HAL_DMA_DeInit(hspi->hdmarx);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f000 fce0 	bl	8004964 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(hspi->hdmatx);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f000 fcdb 	bl	8004964 <HAL_DMA_DeInit>
  /* USER CODE BEGIN SPI4_MspDeInit 1 */

  /* USER CODE END SPI4_MspDeInit 1 */
  }

}
 8003fae:	e014      	b.n	8003fda <HAL_SPI_MspDeInit+0x66>
  else if(hspi->Instance==SPI4)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a0e      	ldr	r2, [pc, #56]	; (8003ff0 <HAL_SPI_MspDeInit+0x7c>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d10f      	bne.n	8003fda <HAL_SPI_MspDeInit+0x66>
    __HAL_RCC_SPI4_CLK_DISABLE();
 8003fba:	4b0b      	ldr	r3, [pc, #44]	; (8003fe8 <HAL_SPI_MspDeInit+0x74>)
 8003fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fbe:	4a0a      	ldr	r2, [pc, #40]	; (8003fe8 <HAL_SPI_MspDeInit+0x74>)
 8003fc0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003fc4:	6453      	str	r3, [r2, #68]	; 0x44
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_1|GPIO_PIN_11);
 8003fc6:	f640 0102 	movw	r1, #2050	; 0x802
 8003fca:	4808      	ldr	r0, [pc, #32]	; (8003fec <HAL_SPI_MspDeInit+0x78>)
 8003fcc:	f001 f990 	bl	80052f0 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_12|GPIO_PIN_13);
 8003fd0:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8003fd4:	4807      	ldr	r0, [pc, #28]	; (8003ff4 <HAL_SPI_MspDeInit+0x80>)
 8003fd6:	f001 f98b 	bl	80052f0 <HAL_GPIO_DeInit>
}
 8003fda:	bf00      	nop
 8003fdc:	3708      	adds	r7, #8
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}
 8003fe2:	bf00      	nop
 8003fe4:	40013000 	.word	0x40013000
 8003fe8:	40023800 	.word	0x40023800
 8003fec:	40020000 	.word	0x40020000
 8003ff0:	40013400 	.word	0x40013400
 8003ff4:	40020400 	.word	0x40020400

08003ff8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b08a      	sub	sp, #40	; 0x28
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004000:	f107 0314 	add.w	r3, r7, #20
 8004004:	2200      	movs	r2, #0
 8004006:	601a      	str	r2, [r3, #0]
 8004008:	605a      	str	r2, [r3, #4]
 800400a:	609a      	str	r2, [r3, #8]
 800400c:	60da      	str	r2, [r3, #12]
 800400e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a19      	ldr	r2, [pc, #100]	; (800407c <HAL_UART_MspInit+0x84>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d12b      	bne.n	8004072 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800401a:	2300      	movs	r3, #0
 800401c:	613b      	str	r3, [r7, #16]
 800401e:	4b18      	ldr	r3, [pc, #96]	; (8004080 <HAL_UART_MspInit+0x88>)
 8004020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004022:	4a17      	ldr	r2, [pc, #92]	; (8004080 <HAL_UART_MspInit+0x88>)
 8004024:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004028:	6413      	str	r3, [r2, #64]	; 0x40
 800402a:	4b15      	ldr	r3, [pc, #84]	; (8004080 <HAL_UART_MspInit+0x88>)
 800402c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800402e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004032:	613b      	str	r3, [r7, #16]
 8004034:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004036:	2300      	movs	r3, #0
 8004038:	60fb      	str	r3, [r7, #12]
 800403a:	4b11      	ldr	r3, [pc, #68]	; (8004080 <HAL_UART_MspInit+0x88>)
 800403c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800403e:	4a10      	ldr	r2, [pc, #64]	; (8004080 <HAL_UART_MspInit+0x88>)
 8004040:	f043 0301 	orr.w	r3, r3, #1
 8004044:	6313      	str	r3, [r2, #48]	; 0x30
 8004046:	4b0e      	ldr	r3, [pc, #56]	; (8004080 <HAL_UART_MspInit+0x88>)
 8004048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800404a:	f003 0301 	and.w	r3, r3, #1
 800404e:	60fb      	str	r3, [r7, #12]
 8004050:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8004052:	230c      	movs	r3, #12
 8004054:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004056:	2302      	movs	r3, #2
 8004058:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800405a:	2300      	movs	r3, #0
 800405c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800405e:	2303      	movs	r3, #3
 8004060:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004062:	2307      	movs	r3, #7
 8004064:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004066:	f107 0314 	add.w	r3, r7, #20
 800406a:	4619      	mov	r1, r3
 800406c:	4805      	ldr	r0, [pc, #20]	; (8004084 <HAL_UART_MspInit+0x8c>)
 800406e:	f000 ffbb 	bl	8004fe8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004072:	bf00      	nop
 8004074:	3728      	adds	r7, #40	; 0x28
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}
 800407a:	bf00      	nop
 800407c:	40004400 	.word	0x40004400
 8004080:	40023800 	.word	0x40023800
 8004084:	40020000 	.word	0x40020000

08004088 <SPI1_IRQHandler>:

/* USER CODE BEGIN EV */
/**************************************************************************//**
 * Handle SPI1 global interrupt
 *****************************************************************************/
void SPI1_IRQHandler (void) {
 8004088:	b580      	push	{r7, lr}
 800408a:	af00      	add	r7, sp, #0
  HAL_SPI_IRQHandler(&hspi1);
 800408c:	4802      	ldr	r0, [pc, #8]	; (8004098 <SPI1_IRQHandler+0x10>)
 800408e:	f002 fb51 	bl	8006734 <HAL_SPI_IRQHandler>
}
 8004092:	bf00      	nop
 8004094:	bd80      	pop	{r7, pc}
 8004096:	bf00      	nop
 8004098:	200011f0 	.word	0x200011f0

0800409c <HAL_SPI_TxCpltCallback>:


/**************************************************************************//**
 * SPI transmit complete callback
 *****************************************************************************/
void HAL_SPI_TxCpltCallback (SPI_HandleTypeDef *hspi) {
 800409c:	b580      	push	{r7, lr}
 800409e:	b084      	sub	sp, #16
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80040a4:	2300      	movs	r3, #0
 80040a6:	60fb      	str	r3, [r7, #12]
  xSemaphoreGiveFromISR(spiDMASemaphore, &xHigherPriorityTaskWoken);
 80040a8:	4b0b      	ldr	r3, [pc, #44]	; (80040d8 <HAL_SPI_TxCpltCallback+0x3c>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f107 020c 	add.w	r2, r7, #12
 80040b0:	4611      	mov	r1, r2
 80040b2:	4618      	mov	r0, r3
 80040b4:	f006 fda7 	bl	800ac06 <xQueueGiveFromISR>
  portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d007      	beq.n	80040ce <HAL_SPI_TxCpltCallback+0x32>
 80040be:	4b07      	ldr	r3, [pc, #28]	; (80040dc <HAL_SPI_TxCpltCallback+0x40>)
 80040c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040c4:	601a      	str	r2, [r3, #0]
 80040c6:	f3bf 8f4f 	dsb	sy
 80040ca:	f3bf 8f6f 	isb	sy
}
 80040ce:	bf00      	nop
 80040d0:	3710      	adds	r7, #16
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}
 80040d6:	bf00      	nop
 80040d8:	20001308 	.word	0x20001308
 80040dc:	e000ed04 	.word	0xe000ed04

080040e0 <HAL_SPI_RxCpltCallback>:

/**************************************************************************//**
 * SPI receive complete callback
 *****************************************************************************/
void HAL_SPI_RxCpltCallback (SPI_HandleTypeDef *hspi) {
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b084      	sub	sp, #16
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]

	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80040e8:	2300      	movs	r3, #0
 80040ea:	60fb      	str	r3, [r7, #12]
	if(hspi->Instance==SPI1){
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a0c      	ldr	r2, [pc, #48]	; (8004124 <HAL_SPI_RxCpltCallback+0x44>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d112      	bne.n	800411c <HAL_SPI_RxCpltCallback+0x3c>
		  xSemaphoreGiveFromISR(spiDMASemaphore, &xHigherPriorityTaskWoken);
 80040f6:	4b0c      	ldr	r3, [pc, #48]	; (8004128 <HAL_SPI_RxCpltCallback+0x48>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f107 020c 	add.w	r2, r7, #12
 80040fe:	4611      	mov	r1, r2
 8004100:	4618      	mov	r0, r3
 8004102:	f006 fd80 	bl	800ac06 <xQueueGiveFromISR>
		  portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d007      	beq.n	800411c <HAL_SPI_RxCpltCallback+0x3c>
 800410c:	4b07      	ldr	r3, [pc, #28]	; (800412c <HAL_SPI_RxCpltCallback+0x4c>)
 800410e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004112:	601a      	str	r2, [r3, #0]
 8004114:	f3bf 8f4f 	dsb	sy
 8004118:	f3bf 8f6f 	isb	sy
	}
}
 800411c:	bf00      	nop
 800411e:	3710      	adds	r7, #16
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}
 8004124:	40013000 	.word	0x40013000
 8004128:	20001308 	.word	0x20001308
 800412c:	e000ed04 	.word	0xe000ed04

08004130 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004130:	b480      	push	{r7}
 8004132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004134:	e7fe      	b.n	8004134 <NMI_Handler+0x4>

08004136 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004136:	b480      	push	{r7}
 8004138:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800413a:	e7fe      	b.n	800413a <HardFault_Handler+0x4>

0800413c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800413c:	b480      	push	{r7}
 800413e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004140:	e7fe      	b.n	8004140 <MemManage_Handler+0x4>

08004142 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004142:	b480      	push	{r7}
 8004144:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004146:	e7fe      	b.n	8004146 <BusFault_Handler+0x4>

08004148 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004148:	b480      	push	{r7}
 800414a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800414c:	e7fe      	b.n	800414c <UsageFault_Handler+0x4>

0800414e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800414e:	b480      	push	{r7}
 8004150:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004152:	bf00      	nop
 8004154:	46bd      	mov	sp, r7
 8004156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415a:	4770      	bx	lr

0800415c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004160:	f000 f9ae 	bl	80044c0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8004164:	f008 f8c4 	bl	800c2f0 <xTaskGetSchedulerState>
 8004168:	4603      	mov	r3, r0
 800416a:	2b01      	cmp	r3, #1
 800416c:	d001      	beq.n	8004172 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800416e:	f009 f803 	bl	800d178 <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */
  osSystickHandler();
 8004172:	f006 f861 	bl	800a238 <osSystickHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 8004176:	bf00      	nop
 8004178:	bd80      	pop	{r7, pc}
	...

0800417c <EXTI15_10_IRQHandler>:
/* For the available peripheral interrupt handler names,                      */
/* please refer to the startup file (startup_stm32f4xx.s).                    */
/******************************************************************************/

void EXTI15_10_IRQHandler(void)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b082      	sub	sp, #8
 8004180:	af00      	add	r7, sp, #0

  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8004182:	2300      	movs	r3, #0
 8004184:	607b      	str	r3, [r7, #4]

  if (__HAL_GPIO_EXTI_GET_IT(WFM_SPI_WIRQ_Pin) != RESET) {
 8004186:	4b15      	ldr	r3, [pc, #84]	; (80041dc <EXTI15_10_IRQHandler+0x60>)
 8004188:	695b      	ldr	r3, [r3, #20]
 800418a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800418e:	2b00      	cmp	r3, #0
 8004190:	d011      	beq.n	80041b6 <EXTI15_10_IRQHandler+0x3a>
	  if(sl_wfx_wake_up_sem){
 8004192:	4b13      	ldr	r3, [pc, #76]	; (80041e0 <EXTI15_10_IRQHandler+0x64>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d006      	beq.n	80041a8 <EXTI15_10_IRQHandler+0x2c>
		  xSemaphoreGiveFromISR(sl_wfx_wake_up_sem, &xHigherPriorityTaskWoken);
 800419a:	4b11      	ldr	r3, [pc, #68]	; (80041e0 <EXTI15_10_IRQHandler+0x64>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	1d3a      	adds	r2, r7, #4
 80041a0:	4611      	mov	r1, r2
 80041a2:	4618      	mov	r0, r3
 80041a4:	f006 fd2f 	bl	800ac06 <xQueueGiveFromISR>
	   }

	xEventGroupSetBitsFromISR(sl_wfx_event_group,
 80041a8:	4b0e      	ldr	r3, [pc, #56]	; (80041e4 <EXTI15_10_IRQHandler+0x68>)
 80041aa:	6819      	ldr	r1, [r3, #0]
 80041ac:	1d3b      	adds	r3, r7, #4
 80041ae:	2202      	movs	r2, #2
 80041b0:	480d      	ldr	r0, [pc, #52]	; (80041e8 <EXTI15_10_IRQHandler+0x6c>)
 80041b2:	f008 fe05 	bl	800cdc0 <xTimerPendFunctionCallFromISR>
							  SL_WFX_RX_PACKET_AVAILABLE,
							  &xHigherPriorityTaskWoken);
  }

  HAL_GPIO_EXTI_IRQHandler(WFM_SPI_WIRQ_Pin);
 80041b6:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80041ba:	f001 f997 	bl	80054ec <HAL_GPIO_EXTI_IRQHandler>
  portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d007      	beq.n	80041d4 <EXTI15_10_IRQHandler+0x58>
 80041c4:	4b09      	ldr	r3, [pc, #36]	; (80041ec <EXTI15_10_IRQHandler+0x70>)
 80041c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041ca:	601a      	str	r2, [r3, #0]
 80041cc:	f3bf 8f4f 	dsb	sy
 80041d0:	f3bf 8f6f 	isb	sy

}
 80041d4:	bf00      	nop
 80041d6:	3708      	adds	r7, #8
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}
 80041dc:	40013c00 	.word	0x40013c00
 80041e0:	200011d4 	.word	0x200011d4
 80041e4:	20001310 	.word	0x20001310
 80041e8:	0800a52f 	.word	0x0800a52f
 80041ec:	e000ed04 	.word	0xe000ed04

080041f0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80041f4:	4802      	ldr	r0, [pc, #8]	; (8004200 <DMA2_Stream0_IRQHandler+0x10>)
 80041f6:	f000 fc8d 	bl	8004b14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80041fa:	bf00      	nop
 80041fc:	bd80      	pop	{r7, pc}
 80041fe:	bf00      	nop
 8004200:	200012a8 	.word	0x200012a8

08004204 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8004208:	4802      	ldr	r0, [pc, #8]	; (8004214 <DMA2_Stream2_IRQHandler+0x10>)
 800420a:	f000 fc83 	bl	8004b14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800420e:	bf00      	nop
 8004210:	bd80      	pop	{r7, pc}
 8004212:	bf00      	nop
 8004214:	20001248 	.word	0x20001248

08004218 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004218:	b480      	push	{r7}
 800421a:	af00      	add	r7, sp, #0
	return 1;
 800421c:	2301      	movs	r3, #1
}
 800421e:	4618      	mov	r0, r3
 8004220:	46bd      	mov	sp, r7
 8004222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004226:	4770      	bx	lr

08004228 <_kill>:

int _kill(int pid, int sig)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b082      	sub	sp, #8
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
 8004230:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004232:	f016 fb6d 	bl	801a910 <__errno>
 8004236:	4603      	mov	r3, r0
 8004238:	2216      	movs	r2, #22
 800423a:	601a      	str	r2, [r3, #0]
	return -1;
 800423c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004240:	4618      	mov	r0, r3
 8004242:	3708      	adds	r7, #8
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}

08004248 <_exit>:

void _exit (int status)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b082      	sub	sp, #8
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004250:	f04f 31ff 	mov.w	r1, #4294967295
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	f7ff ffe7 	bl	8004228 <_kill>
	while (1) {}		/* Make sure we hang here */
 800425a:	e7fe      	b.n	800425a <_exit+0x12>

0800425c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b086      	sub	sp, #24
 8004260:	af00      	add	r7, sp, #0
 8004262:	60f8      	str	r0, [r7, #12]
 8004264:	60b9      	str	r1, [r7, #8]
 8004266:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004268:	2300      	movs	r3, #0
 800426a:	617b      	str	r3, [r7, #20]
 800426c:	e00a      	b.n	8004284 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800426e:	f3af 8000 	nop.w
 8004272:	4601      	mov	r1, r0
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	1c5a      	adds	r2, r3, #1
 8004278:	60ba      	str	r2, [r7, #8]
 800427a:	b2ca      	uxtb	r2, r1
 800427c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	3301      	adds	r3, #1
 8004282:	617b      	str	r3, [r7, #20]
 8004284:	697a      	ldr	r2, [r7, #20]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	429a      	cmp	r2, r3
 800428a:	dbf0      	blt.n	800426e <_read+0x12>
	}

return len;
 800428c:	687b      	ldr	r3, [r7, #4]
}
 800428e:	4618      	mov	r0, r3
 8004290:	3718      	adds	r7, #24
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}

08004296 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004296:	b580      	push	{r7, lr}
 8004298:	b086      	sub	sp, #24
 800429a:	af00      	add	r7, sp, #0
 800429c:	60f8      	str	r0, [r7, #12]
 800429e:	60b9      	str	r1, [r7, #8]
 80042a0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80042a2:	2300      	movs	r3, #0
 80042a4:	617b      	str	r3, [r7, #20]
 80042a6:	e009      	b.n	80042bc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	1c5a      	adds	r2, r3, #1
 80042ac:	60ba      	str	r2, [r7, #8]
 80042ae:	781b      	ldrb	r3, [r3, #0]
 80042b0:	4618      	mov	r0, r3
 80042b2:	f7ff fcaf 	bl	8003c14 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	3301      	adds	r3, #1
 80042ba:	617b      	str	r3, [r7, #20]
 80042bc:	697a      	ldr	r2, [r7, #20]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	429a      	cmp	r2, r3
 80042c2:	dbf1      	blt.n	80042a8 <_write+0x12>
	}
	return len;
 80042c4:	687b      	ldr	r3, [r7, #4]
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	3718      	adds	r7, #24
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}

080042ce <_close>:

int _close(int file)
{
 80042ce:	b480      	push	{r7}
 80042d0:	b083      	sub	sp, #12
 80042d2:	af00      	add	r7, sp, #0
 80042d4:	6078      	str	r0, [r7, #4]
	return -1;
 80042d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80042da:	4618      	mov	r0, r3
 80042dc:	370c      	adds	r7, #12
 80042de:	46bd      	mov	sp, r7
 80042e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e4:	4770      	bx	lr

080042e6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80042e6:	b480      	push	{r7}
 80042e8:	b083      	sub	sp, #12
 80042ea:	af00      	add	r7, sp, #0
 80042ec:	6078      	str	r0, [r7, #4]
 80042ee:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80042f6:	605a      	str	r2, [r3, #4]
	return 0;
 80042f8:	2300      	movs	r3, #0
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	370c      	adds	r7, #12
 80042fe:	46bd      	mov	sp, r7
 8004300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004304:	4770      	bx	lr

08004306 <_isatty>:

int _isatty(int file)
{
 8004306:	b480      	push	{r7}
 8004308:	b083      	sub	sp, #12
 800430a:	af00      	add	r7, sp, #0
 800430c:	6078      	str	r0, [r7, #4]
	return 1;
 800430e:	2301      	movs	r3, #1
}
 8004310:	4618      	mov	r0, r3
 8004312:	370c      	adds	r7, #12
 8004314:	46bd      	mov	sp, r7
 8004316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431a:	4770      	bx	lr

0800431c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800431c:	b480      	push	{r7}
 800431e:	b085      	sub	sp, #20
 8004320:	af00      	add	r7, sp, #0
 8004322:	60f8      	str	r0, [r7, #12]
 8004324:	60b9      	str	r1, [r7, #8]
 8004326:	607a      	str	r2, [r7, #4]
	return 0;
 8004328:	2300      	movs	r3, #0
}
 800432a:	4618      	mov	r0, r3
 800432c:	3714      	adds	r7, #20
 800432e:	46bd      	mov	sp, r7
 8004330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004334:	4770      	bx	lr
	...

08004338 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b086      	sub	sp, #24
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004340:	4a14      	ldr	r2, [pc, #80]	; (8004394 <_sbrk+0x5c>)
 8004342:	4b15      	ldr	r3, [pc, #84]	; (8004398 <_sbrk+0x60>)
 8004344:	1ad3      	subs	r3, r2, r3
 8004346:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800434c:	4b13      	ldr	r3, [pc, #76]	; (800439c <_sbrk+0x64>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d102      	bne.n	800435a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004354:	4b11      	ldr	r3, [pc, #68]	; (800439c <_sbrk+0x64>)
 8004356:	4a12      	ldr	r2, [pc, #72]	; (80043a0 <_sbrk+0x68>)
 8004358:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800435a:	4b10      	ldr	r3, [pc, #64]	; (800439c <_sbrk+0x64>)
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	4413      	add	r3, r2
 8004362:	693a      	ldr	r2, [r7, #16]
 8004364:	429a      	cmp	r2, r3
 8004366:	d207      	bcs.n	8004378 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004368:	f016 fad2 	bl	801a910 <__errno>
 800436c:	4603      	mov	r3, r0
 800436e:	220c      	movs	r2, #12
 8004370:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004372:	f04f 33ff 	mov.w	r3, #4294967295
 8004376:	e009      	b.n	800438c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004378:	4b08      	ldr	r3, [pc, #32]	; (800439c <_sbrk+0x64>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800437e:	4b07      	ldr	r3, [pc, #28]	; (800439c <_sbrk+0x64>)
 8004380:	681a      	ldr	r2, [r3, #0]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	4413      	add	r3, r2
 8004386:	4a05      	ldr	r2, [pc, #20]	; (800439c <_sbrk+0x64>)
 8004388:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800438a:	68fb      	ldr	r3, [r7, #12]
}
 800438c:	4618      	mov	r0, r3
 800438e:	3718      	adds	r7, #24
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}
 8004394:	20020000 	.word	0x20020000
 8004398:	00000400 	.word	0x00000400
 800439c:	20000890 	.word	0x20000890
 80043a0:	20013d20 	.word	0x20013d20

080043a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80043a4:	b480      	push	{r7}
 80043a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80043a8:	4b06      	ldr	r3, [pc, #24]	; (80043c4 <SystemInit+0x20>)
 80043aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043ae:	4a05      	ldr	r2, [pc, #20]	; (80043c4 <SystemInit+0x20>)
 80043b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80043b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80043b8:	bf00      	nop
 80043ba:	46bd      	mov	sp, r7
 80043bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c0:	4770      	bx	lr
 80043c2:	bf00      	nop
 80043c4:	e000ed00 	.word	0xe000ed00

080043c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80043c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004400 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80043cc:	480d      	ldr	r0, [pc, #52]	; (8004404 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80043ce:	490e      	ldr	r1, [pc, #56]	; (8004408 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80043d0:	4a0e      	ldr	r2, [pc, #56]	; (800440c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80043d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80043d4:	e002      	b.n	80043dc <LoopCopyDataInit>

080043d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80043d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80043d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80043da:	3304      	adds	r3, #4

080043dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80043dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80043de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80043e0:	d3f9      	bcc.n	80043d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80043e2:	4a0b      	ldr	r2, [pc, #44]	; (8004410 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80043e4:	4c0b      	ldr	r4, [pc, #44]	; (8004414 <LoopFillZerobss+0x26>)
  movs r3, #0
 80043e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80043e8:	e001      	b.n	80043ee <LoopFillZerobss>

080043ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80043ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80043ec:	3204      	adds	r2, #4

080043ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80043ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80043f0:	d3fb      	bcc.n	80043ea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80043f2:	f7ff ffd7 	bl	80043a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80043f6:	f016 fa91 	bl	801a91c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80043fa:	f7ff f9f9 	bl	80037f0 <main>
  bx  lr    
 80043fe:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8004400:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004404:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004408:	2000029c 	.word	0x2000029c
  ldr r2, =_sidata
 800440c:	0806d3e8 	.word	0x0806d3e8
  ldr r2, =_sbss
 8004410:	2000029c 	.word	0x2000029c
  ldr r4, =_ebss
 8004414:	20013d1c 	.word	0x20013d1c

08004418 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004418:	e7fe      	b.n	8004418 <ADC_IRQHandler>
	...

0800441c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004420:	4b0e      	ldr	r3, [pc, #56]	; (800445c <HAL_Init+0x40>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a0d      	ldr	r2, [pc, #52]	; (800445c <HAL_Init+0x40>)
 8004426:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800442a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800442c:	4b0b      	ldr	r3, [pc, #44]	; (800445c <HAL_Init+0x40>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a0a      	ldr	r2, [pc, #40]	; (800445c <HAL_Init+0x40>)
 8004432:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004436:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004438:	4b08      	ldr	r3, [pc, #32]	; (800445c <HAL_Init+0x40>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a07      	ldr	r2, [pc, #28]	; (800445c <HAL_Init+0x40>)
 800443e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004442:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004444:	2003      	movs	r0, #3
 8004446:	f000 f973 	bl	8004730 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800444a:	200f      	movs	r0, #15
 800444c:	f000 f808 	bl	8004460 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004450:	f7ff fbf8 	bl	8003c44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004454:	2300      	movs	r3, #0
}
 8004456:	4618      	mov	r0, r3
 8004458:	bd80      	pop	{r7, pc}
 800445a:	bf00      	nop
 800445c:	40023c00 	.word	0x40023c00

08004460 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b082      	sub	sp, #8
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004468:	4b12      	ldr	r3, [pc, #72]	; (80044b4 <HAL_InitTick+0x54>)
 800446a:	681a      	ldr	r2, [r3, #0]
 800446c:	4b12      	ldr	r3, [pc, #72]	; (80044b8 <HAL_InitTick+0x58>)
 800446e:	781b      	ldrb	r3, [r3, #0]
 8004470:	4619      	mov	r1, r3
 8004472:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004476:	fbb3 f3f1 	udiv	r3, r3, r1
 800447a:	fbb2 f3f3 	udiv	r3, r2, r3
 800447e:	4618      	mov	r0, r3
 8004480:	f000 f999 	bl	80047b6 <HAL_SYSTICK_Config>
 8004484:	4603      	mov	r3, r0
 8004486:	2b00      	cmp	r3, #0
 8004488:	d001      	beq.n	800448e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	e00e      	b.n	80044ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2b0f      	cmp	r3, #15
 8004492:	d80a      	bhi.n	80044aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004494:	2200      	movs	r2, #0
 8004496:	6879      	ldr	r1, [r7, #4]
 8004498:	f04f 30ff 	mov.w	r0, #4294967295
 800449c:	f000 f953 	bl	8004746 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80044a0:	4a06      	ldr	r2, [pc, #24]	; (80044bc <HAL_InitTick+0x5c>)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80044a6:	2300      	movs	r3, #0
 80044a8:	e000      	b.n	80044ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	3708      	adds	r7, #8
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd80      	pop	{r7, pc}
 80044b4:	200000ac 	.word	0x200000ac
 80044b8:	200000b4 	.word	0x200000b4
 80044bc:	200000b0 	.word	0x200000b0

080044c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80044c0:	b480      	push	{r7}
 80044c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80044c4:	4b06      	ldr	r3, [pc, #24]	; (80044e0 <HAL_IncTick+0x20>)
 80044c6:	781b      	ldrb	r3, [r3, #0]
 80044c8:	461a      	mov	r2, r3
 80044ca:	4b06      	ldr	r3, [pc, #24]	; (80044e4 <HAL_IncTick+0x24>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4413      	add	r3, r2
 80044d0:	4a04      	ldr	r2, [pc, #16]	; (80044e4 <HAL_IncTick+0x24>)
 80044d2:	6013      	str	r3, [r2, #0]
}
 80044d4:	bf00      	nop
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr
 80044de:	bf00      	nop
 80044e0:	200000b4 	.word	0x200000b4
 80044e4:	20000894 	.word	0x20000894

080044e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80044e8:	b480      	push	{r7}
 80044ea:	af00      	add	r7, sp, #0
  return uwTick;
 80044ec:	4b03      	ldr	r3, [pc, #12]	; (80044fc <HAL_GetTick+0x14>)
 80044ee:	681b      	ldr	r3, [r3, #0]
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	46bd      	mov	sp, r7
 80044f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f8:	4770      	bx	lr
 80044fa:	bf00      	nop
 80044fc:	20000894 	.word	0x20000894

08004500 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b084      	sub	sp, #16
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004508:	f7ff ffee 	bl	80044e8 <HAL_GetTick>
 800450c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004518:	d005      	beq.n	8004526 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800451a:	4b0a      	ldr	r3, [pc, #40]	; (8004544 <HAL_Delay+0x44>)
 800451c:	781b      	ldrb	r3, [r3, #0]
 800451e:	461a      	mov	r2, r3
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	4413      	add	r3, r2
 8004524:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004526:	bf00      	nop
 8004528:	f7ff ffde 	bl	80044e8 <HAL_GetTick>
 800452c:	4602      	mov	r2, r0
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	1ad3      	subs	r3, r2, r3
 8004532:	68fa      	ldr	r2, [r7, #12]
 8004534:	429a      	cmp	r2, r3
 8004536:	d8f7      	bhi.n	8004528 <HAL_Delay+0x28>
  {
  }
}
 8004538:	bf00      	nop
 800453a:	bf00      	nop
 800453c:	3710      	adds	r7, #16
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}
 8004542:	bf00      	nop
 8004544:	200000b4 	.word	0x200000b4

08004548 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004548:	b480      	push	{r7}
 800454a:	b085      	sub	sp, #20
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	f003 0307 	and.w	r3, r3, #7
 8004556:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004558:	4b0c      	ldr	r3, [pc, #48]	; (800458c <__NVIC_SetPriorityGrouping+0x44>)
 800455a:	68db      	ldr	r3, [r3, #12]
 800455c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800455e:	68ba      	ldr	r2, [r7, #8]
 8004560:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004564:	4013      	ands	r3, r2
 8004566:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004570:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004574:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004578:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800457a:	4a04      	ldr	r2, [pc, #16]	; (800458c <__NVIC_SetPriorityGrouping+0x44>)
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	60d3      	str	r3, [r2, #12]
}
 8004580:	bf00      	nop
 8004582:	3714      	adds	r7, #20
 8004584:	46bd      	mov	sp, r7
 8004586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458a:	4770      	bx	lr
 800458c:	e000ed00 	.word	0xe000ed00

08004590 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004590:	b480      	push	{r7}
 8004592:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004594:	4b04      	ldr	r3, [pc, #16]	; (80045a8 <__NVIC_GetPriorityGrouping+0x18>)
 8004596:	68db      	ldr	r3, [r3, #12]
 8004598:	0a1b      	lsrs	r3, r3, #8
 800459a:	f003 0307 	and.w	r3, r3, #7
}
 800459e:	4618      	mov	r0, r3
 80045a0:	46bd      	mov	sp, r7
 80045a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a6:	4770      	bx	lr
 80045a8:	e000ed00 	.word	0xe000ed00

080045ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b083      	sub	sp, #12
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	4603      	mov	r3, r0
 80045b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	db0b      	blt.n	80045d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80045be:	79fb      	ldrb	r3, [r7, #7]
 80045c0:	f003 021f 	and.w	r2, r3, #31
 80045c4:	4907      	ldr	r1, [pc, #28]	; (80045e4 <__NVIC_EnableIRQ+0x38>)
 80045c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045ca:	095b      	lsrs	r3, r3, #5
 80045cc:	2001      	movs	r0, #1
 80045ce:	fa00 f202 	lsl.w	r2, r0, r2
 80045d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80045d6:	bf00      	nop
 80045d8:	370c      	adds	r7, #12
 80045da:	46bd      	mov	sp, r7
 80045dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e0:	4770      	bx	lr
 80045e2:	bf00      	nop
 80045e4:	e000e100 	.word	0xe000e100

080045e8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b083      	sub	sp, #12
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	4603      	mov	r3, r0
 80045f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	db12      	blt.n	8004620 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80045fa:	79fb      	ldrb	r3, [r7, #7]
 80045fc:	f003 021f 	and.w	r2, r3, #31
 8004600:	490a      	ldr	r1, [pc, #40]	; (800462c <__NVIC_DisableIRQ+0x44>)
 8004602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004606:	095b      	lsrs	r3, r3, #5
 8004608:	2001      	movs	r0, #1
 800460a:	fa00 f202 	lsl.w	r2, r0, r2
 800460e:	3320      	adds	r3, #32
 8004610:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004614:	f3bf 8f4f 	dsb	sy
}
 8004618:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800461a:	f3bf 8f6f 	isb	sy
}
 800461e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004620:	bf00      	nop
 8004622:	370c      	adds	r7, #12
 8004624:	46bd      	mov	sp, r7
 8004626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462a:	4770      	bx	lr
 800462c:	e000e100 	.word	0xe000e100

08004630 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004630:	b480      	push	{r7}
 8004632:	b083      	sub	sp, #12
 8004634:	af00      	add	r7, sp, #0
 8004636:	4603      	mov	r3, r0
 8004638:	6039      	str	r1, [r7, #0]
 800463a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800463c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004640:	2b00      	cmp	r3, #0
 8004642:	db0a      	blt.n	800465a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	b2da      	uxtb	r2, r3
 8004648:	490c      	ldr	r1, [pc, #48]	; (800467c <__NVIC_SetPriority+0x4c>)
 800464a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800464e:	0112      	lsls	r2, r2, #4
 8004650:	b2d2      	uxtb	r2, r2
 8004652:	440b      	add	r3, r1
 8004654:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004658:	e00a      	b.n	8004670 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	b2da      	uxtb	r2, r3
 800465e:	4908      	ldr	r1, [pc, #32]	; (8004680 <__NVIC_SetPriority+0x50>)
 8004660:	79fb      	ldrb	r3, [r7, #7]
 8004662:	f003 030f 	and.w	r3, r3, #15
 8004666:	3b04      	subs	r3, #4
 8004668:	0112      	lsls	r2, r2, #4
 800466a:	b2d2      	uxtb	r2, r2
 800466c:	440b      	add	r3, r1
 800466e:	761a      	strb	r2, [r3, #24]
}
 8004670:	bf00      	nop
 8004672:	370c      	adds	r7, #12
 8004674:	46bd      	mov	sp, r7
 8004676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467a:	4770      	bx	lr
 800467c:	e000e100 	.word	0xe000e100
 8004680:	e000ed00 	.word	0xe000ed00

08004684 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004684:	b480      	push	{r7}
 8004686:	b089      	sub	sp, #36	; 0x24
 8004688:	af00      	add	r7, sp, #0
 800468a:	60f8      	str	r0, [r7, #12]
 800468c:	60b9      	str	r1, [r7, #8]
 800468e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	f003 0307 	and.w	r3, r3, #7
 8004696:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004698:	69fb      	ldr	r3, [r7, #28]
 800469a:	f1c3 0307 	rsb	r3, r3, #7
 800469e:	2b04      	cmp	r3, #4
 80046a0:	bf28      	it	cs
 80046a2:	2304      	movcs	r3, #4
 80046a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80046a6:	69fb      	ldr	r3, [r7, #28]
 80046a8:	3304      	adds	r3, #4
 80046aa:	2b06      	cmp	r3, #6
 80046ac:	d902      	bls.n	80046b4 <NVIC_EncodePriority+0x30>
 80046ae:	69fb      	ldr	r3, [r7, #28]
 80046b0:	3b03      	subs	r3, #3
 80046b2:	e000      	b.n	80046b6 <NVIC_EncodePriority+0x32>
 80046b4:	2300      	movs	r3, #0
 80046b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046b8:	f04f 32ff 	mov.w	r2, #4294967295
 80046bc:	69bb      	ldr	r3, [r7, #24]
 80046be:	fa02 f303 	lsl.w	r3, r2, r3
 80046c2:	43da      	mvns	r2, r3
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	401a      	ands	r2, r3
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80046cc:	f04f 31ff 	mov.w	r1, #4294967295
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	fa01 f303 	lsl.w	r3, r1, r3
 80046d6:	43d9      	mvns	r1, r3
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046dc:	4313      	orrs	r3, r2
         );
}
 80046de:	4618      	mov	r0, r3
 80046e0:	3724      	adds	r7, #36	; 0x24
 80046e2:	46bd      	mov	sp, r7
 80046e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e8:	4770      	bx	lr
	...

080046ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b082      	sub	sp, #8
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	3b01      	subs	r3, #1
 80046f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80046fc:	d301      	bcc.n	8004702 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80046fe:	2301      	movs	r3, #1
 8004700:	e00f      	b.n	8004722 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004702:	4a0a      	ldr	r2, [pc, #40]	; (800472c <SysTick_Config+0x40>)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	3b01      	subs	r3, #1
 8004708:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800470a:	210f      	movs	r1, #15
 800470c:	f04f 30ff 	mov.w	r0, #4294967295
 8004710:	f7ff ff8e 	bl	8004630 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004714:	4b05      	ldr	r3, [pc, #20]	; (800472c <SysTick_Config+0x40>)
 8004716:	2200      	movs	r2, #0
 8004718:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800471a:	4b04      	ldr	r3, [pc, #16]	; (800472c <SysTick_Config+0x40>)
 800471c:	2207      	movs	r2, #7
 800471e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004720:	2300      	movs	r3, #0
}
 8004722:	4618      	mov	r0, r3
 8004724:	3708      	adds	r7, #8
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}
 800472a:	bf00      	nop
 800472c:	e000e010 	.word	0xe000e010

08004730 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b082      	sub	sp, #8
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004738:	6878      	ldr	r0, [r7, #4]
 800473a:	f7ff ff05 	bl	8004548 <__NVIC_SetPriorityGrouping>
}
 800473e:	bf00      	nop
 8004740:	3708      	adds	r7, #8
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}

08004746 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004746:	b580      	push	{r7, lr}
 8004748:	b086      	sub	sp, #24
 800474a:	af00      	add	r7, sp, #0
 800474c:	4603      	mov	r3, r0
 800474e:	60b9      	str	r1, [r7, #8]
 8004750:	607a      	str	r2, [r7, #4]
 8004752:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004754:	2300      	movs	r3, #0
 8004756:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004758:	f7ff ff1a 	bl	8004590 <__NVIC_GetPriorityGrouping>
 800475c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800475e:	687a      	ldr	r2, [r7, #4]
 8004760:	68b9      	ldr	r1, [r7, #8]
 8004762:	6978      	ldr	r0, [r7, #20]
 8004764:	f7ff ff8e 	bl	8004684 <NVIC_EncodePriority>
 8004768:	4602      	mov	r2, r0
 800476a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800476e:	4611      	mov	r1, r2
 8004770:	4618      	mov	r0, r3
 8004772:	f7ff ff5d 	bl	8004630 <__NVIC_SetPriority>
}
 8004776:	bf00      	nop
 8004778:	3718      	adds	r7, #24
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}

0800477e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800477e:	b580      	push	{r7, lr}
 8004780:	b082      	sub	sp, #8
 8004782:	af00      	add	r7, sp, #0
 8004784:	4603      	mov	r3, r0
 8004786:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004788:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800478c:	4618      	mov	r0, r3
 800478e:	f7ff ff0d 	bl	80045ac <__NVIC_EnableIRQ>
}
 8004792:	bf00      	nop
 8004794:	3708      	adds	r7, #8
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}

0800479a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800479a:	b580      	push	{r7, lr}
 800479c:	b082      	sub	sp, #8
 800479e:	af00      	add	r7, sp, #0
 80047a0:	4603      	mov	r3, r0
 80047a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80047a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047a8:	4618      	mov	r0, r3
 80047aa:	f7ff ff1d 	bl	80045e8 <__NVIC_DisableIRQ>
}
 80047ae:	bf00      	nop
 80047b0:	3708      	adds	r7, #8
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}

080047b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80047b6:	b580      	push	{r7, lr}
 80047b8:	b082      	sub	sp, #8
 80047ba:	af00      	add	r7, sp, #0
 80047bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	f7ff ff94 	bl	80046ec <SysTick_Config>
 80047c4:	4603      	mov	r3, r0
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	3708      	adds	r7, #8
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}
	...

080047d0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b083      	sub	sp, #12
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2b04      	cmp	r3, #4
 80047dc:	d106      	bne.n	80047ec <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80047de:	4b09      	ldr	r3, [pc, #36]	; (8004804 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a08      	ldr	r2, [pc, #32]	; (8004804 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80047e4:	f043 0304 	orr.w	r3, r3, #4
 80047e8:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 80047ea:	e005      	b.n	80047f8 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80047ec:	4b05      	ldr	r3, [pc, #20]	; (8004804 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a04      	ldr	r2, [pc, #16]	; (8004804 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80047f2:	f023 0304 	bic.w	r3, r3, #4
 80047f6:	6013      	str	r3, [r2, #0]
}
 80047f8:	bf00      	nop
 80047fa:	370c      	adds	r7, #12
 80047fc:	46bd      	mov	sp, r7
 80047fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004802:	4770      	bx	lr
 8004804:	e000e010 	.word	0xe000e010

08004808 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b086      	sub	sp, #24
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004810:	2300      	movs	r3, #0
 8004812:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004814:	f7ff fe68 	bl	80044e8 <HAL_GetTick>
 8004818:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d101      	bne.n	8004824 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004820:	2301      	movs	r3, #1
 8004822:	e099      	b.n	8004958 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2202      	movs	r2, #2
 8004828:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2200      	movs	r2, #0
 8004830:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f022 0201 	bic.w	r2, r2, #1
 8004842:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004844:	e00f      	b.n	8004866 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004846:	f7ff fe4f 	bl	80044e8 <HAL_GetTick>
 800484a:	4602      	mov	r2, r0
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	1ad3      	subs	r3, r2, r3
 8004850:	2b05      	cmp	r3, #5
 8004852:	d908      	bls.n	8004866 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2220      	movs	r2, #32
 8004858:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2203      	movs	r2, #3
 800485e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004862:	2303      	movs	r3, #3
 8004864:	e078      	b.n	8004958 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f003 0301 	and.w	r3, r3, #1
 8004870:	2b00      	cmp	r3, #0
 8004872:	d1e8      	bne.n	8004846 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800487c:	697a      	ldr	r2, [r7, #20]
 800487e:	4b38      	ldr	r3, [pc, #224]	; (8004960 <HAL_DMA_Init+0x158>)
 8004880:	4013      	ands	r3, r2
 8004882:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	685a      	ldr	r2, [r3, #4]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004892:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	691b      	ldr	r3, [r3, #16]
 8004898:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800489e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	699b      	ldr	r3, [r3, #24]
 80048a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80048aa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6a1b      	ldr	r3, [r3, #32]
 80048b0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80048b2:	697a      	ldr	r2, [r7, #20]
 80048b4:	4313      	orrs	r3, r2
 80048b6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048bc:	2b04      	cmp	r3, #4
 80048be:	d107      	bne.n	80048d0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048c8:	4313      	orrs	r3, r2
 80048ca:	697a      	ldr	r2, [r7, #20]
 80048cc:	4313      	orrs	r3, r2
 80048ce:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	697a      	ldr	r2, [r7, #20]
 80048d6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	695b      	ldr	r3, [r3, #20]
 80048de:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	f023 0307 	bic.w	r3, r3, #7
 80048e6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ec:	697a      	ldr	r2, [r7, #20]
 80048ee:	4313      	orrs	r3, r2
 80048f0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f6:	2b04      	cmp	r3, #4
 80048f8:	d117      	bne.n	800492a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048fe:	697a      	ldr	r2, [r7, #20]
 8004900:	4313      	orrs	r3, r2
 8004902:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004908:	2b00      	cmp	r3, #0
 800490a:	d00e      	beq.n	800492a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800490c:	6878      	ldr	r0, [r7, #4]
 800490e:	f000 faef 	bl	8004ef0 <DMA_CheckFifoParam>
 8004912:	4603      	mov	r3, r0
 8004914:	2b00      	cmp	r3, #0
 8004916:	d008      	beq.n	800492a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2240      	movs	r2, #64	; 0x40
 800491c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2201      	movs	r2, #1
 8004922:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004926:	2301      	movs	r3, #1
 8004928:	e016      	b.n	8004958 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	697a      	ldr	r2, [r7, #20]
 8004930:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f000 faa6 	bl	8004e84 <DMA_CalcBaseAndBitshift>
 8004938:	4603      	mov	r3, r0
 800493a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004940:	223f      	movs	r2, #63	; 0x3f
 8004942:	409a      	lsls	r2, r3
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2200      	movs	r2, #0
 800494c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2201      	movs	r2, #1
 8004952:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004956:	2300      	movs	r3, #0
}
 8004958:	4618      	mov	r0, r3
 800495a:	3718      	adds	r7, #24
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}
 8004960:	f010803f 	.word	0xf010803f

08004964 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b084      	sub	sp, #16
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d101      	bne.n	8004976 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	e050      	b.n	8004a18 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800497c:	b2db      	uxtb	r3, r3
 800497e:	2b02      	cmp	r3, #2
 8004980:	d101      	bne.n	8004986 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8004982:	2302      	movs	r3, #2
 8004984:	e048      	b.n	8004a18 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	681a      	ldr	r2, [r3, #0]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f022 0201 	bic.w	r2, r2, #1
 8004994:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	2200      	movs	r2, #0
 800499c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	2200      	movs	r2, #0
 80049a4:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	2200      	movs	r2, #0
 80049ac:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	2200      	movs	r2, #0
 80049b4:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	2200      	movs	r2, #0
 80049bc:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	2221      	movs	r2, #33	; 0x21
 80049c4:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f000 fa5c 	bl	8004e84 <DMA_CalcBaseAndBitshift>
 80049cc:	4603      	mov	r3, r0
 80049ce:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2200      	movs	r2, #0
 80049d4:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2200      	movs	r2, #0
 80049da:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2200      	movs	r2, #0
 80049e0:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2200      	movs	r2, #0
 80049e6:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2200      	movs	r2, #0
 80049ec:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2200      	movs	r2, #0
 80049f2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049f8:	223f      	movs	r2, #63	; 0x3f
 80049fa:	409a      	lsls	r2, r3
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2200      	movs	r2, #0
 8004a04:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2200      	movs	r2, #0
 8004a12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004a16:	2300      	movs	r3, #0
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	3710      	adds	r7, #16
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}

08004a20 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b086      	sub	sp, #24
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	60f8      	str	r0, [r7, #12]
 8004a28:	60b9      	str	r1, [r7, #8]
 8004a2a:	607a      	str	r2, [r7, #4]
 8004a2c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a2e:	2300      	movs	r3, #0
 8004a30:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a36:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004a3e:	2b01      	cmp	r3, #1
 8004a40:	d101      	bne.n	8004a46 <HAL_DMA_Start_IT+0x26>
 8004a42:	2302      	movs	r3, #2
 8004a44:	e040      	b.n	8004ac8 <HAL_DMA_Start_IT+0xa8>
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2201      	movs	r2, #1
 8004a4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004a54:	b2db      	uxtb	r3, r3
 8004a56:	2b01      	cmp	r3, #1
 8004a58:	d12f      	bne.n	8004aba <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2202      	movs	r2, #2
 8004a5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	2200      	movs	r2, #0
 8004a66:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	687a      	ldr	r2, [r7, #4]
 8004a6c:	68b9      	ldr	r1, [r7, #8]
 8004a6e:	68f8      	ldr	r0, [r7, #12]
 8004a70:	f000 f9da 	bl	8004e28 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a78:	223f      	movs	r2, #63	; 0x3f
 8004a7a:	409a      	lsls	r2, r3
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f042 0216 	orr.w	r2, r2, #22
 8004a8e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d007      	beq.n	8004aa8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f042 0208 	orr.w	r2, r2, #8
 8004aa6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f042 0201 	orr.w	r2, r2, #1
 8004ab6:	601a      	str	r2, [r3, #0]
 8004ab8:	e005      	b.n	8004ac6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	2200      	movs	r2, #0
 8004abe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004ac2:	2302      	movs	r3, #2
 8004ac4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004ac6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	3718      	adds	r7, #24
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}

08004ad0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b083      	sub	sp, #12
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004ade:	b2db      	uxtb	r3, r3
 8004ae0:	2b02      	cmp	r3, #2
 8004ae2:	d004      	beq.n	8004aee <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2280      	movs	r2, #128	; 0x80
 8004ae8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004aea:	2301      	movs	r3, #1
 8004aec:	e00c      	b.n	8004b08 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2205      	movs	r2, #5
 8004af2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f022 0201 	bic.w	r2, r2, #1
 8004b04:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004b06:	2300      	movs	r3, #0
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	370c      	adds	r7, #12
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b12:	4770      	bx	lr

08004b14 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b086      	sub	sp, #24
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004b20:	4b8e      	ldr	r3, [pc, #568]	; (8004d5c <HAL_DMA_IRQHandler+0x248>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a8e      	ldr	r2, [pc, #568]	; (8004d60 <HAL_DMA_IRQHandler+0x24c>)
 8004b26:	fba2 2303 	umull	r2, r3, r2, r3
 8004b2a:	0a9b      	lsrs	r3, r3, #10
 8004b2c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b32:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b3e:	2208      	movs	r2, #8
 8004b40:	409a      	lsls	r2, r3
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	4013      	ands	r3, r2
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d01a      	beq.n	8004b80 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f003 0304 	and.w	r3, r3, #4
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d013      	beq.n	8004b80 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	681a      	ldr	r2, [r3, #0]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f022 0204 	bic.w	r2, r2, #4
 8004b66:	601a      	str	r2, [r3, #0]

      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b6c:	2208      	movs	r2, #8
 8004b6e:	409a      	lsls	r2, r3
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b78:	f043 0201 	orr.w	r2, r3, #1
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b84:	2201      	movs	r2, #1
 8004b86:	409a      	lsls	r2, r3
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	4013      	ands	r3, r2
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d012      	beq.n	8004bb6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	695b      	ldr	r3, [r3, #20]
 8004b96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d00b      	beq.n	8004bb6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	409a      	lsls	r2, r3
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bae:	f043 0202 	orr.w	r2, r3, #2
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bba:	2204      	movs	r2, #4
 8004bbc:	409a      	lsls	r2, r3
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	4013      	ands	r3, r2
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d012      	beq.n	8004bec <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 0302 	and.w	r3, r3, #2
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d00b      	beq.n	8004bec <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bd8:	2204      	movs	r2, #4
 8004bda:	409a      	lsls	r2, r3
 8004bdc:	693b      	ldr	r3, [r7, #16]
 8004bde:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004be4:	f043 0204 	orr.w	r2, r3, #4
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bf0:	2210      	movs	r2, #16
 8004bf2:	409a      	lsls	r2, r3
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	4013      	ands	r3, r2
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d043      	beq.n	8004c84 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f003 0308 	and.w	r3, r3, #8
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d03c      	beq.n	8004c84 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c0e:	2210      	movs	r2, #16
 8004c10:	409a      	lsls	r2, r3
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	609a      	str	r2, [r3, #8]

      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d018      	beq.n	8004c56 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d108      	bne.n	8004c44 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d024      	beq.n	8004c84 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	4798      	blx	r3
 8004c42:	e01f      	b.n	8004c84 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d01b      	beq.n	8004c84 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c50:	6878      	ldr	r0, [r7, #4]
 8004c52:	4798      	blx	r3
 8004c54:	e016      	b.n	8004c84 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d107      	bne.n	8004c74 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	681a      	ldr	r2, [r3, #0]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f022 0208 	bic.w	r2, r2, #8
 8004c72:	601a      	str	r2, [r3, #0]
        }

        if(hdma->XferHalfCpltCallback != NULL)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d003      	beq.n	8004c84 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c80:	6878      	ldr	r0, [r7, #4]
 8004c82:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c88:	2220      	movs	r2, #32
 8004c8a:	409a      	lsls	r2, r3
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	4013      	ands	r3, r2
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	f000 808f 	beq.w	8004db4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f003 0310 	and.w	r3, r3, #16
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	f000 8087 	beq.w	8004db4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004caa:	2220      	movs	r2, #32
 8004cac:	409a      	lsls	r2, r3
 8004cae:	693b      	ldr	r3, [r7, #16]
 8004cb0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004cb8:	b2db      	uxtb	r3, r3
 8004cba:	2b05      	cmp	r3, #5
 8004cbc:	d136      	bne.n	8004d2c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	681a      	ldr	r2, [r3, #0]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f022 0216 	bic.w	r2, r2, #22
 8004ccc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	695a      	ldr	r2, [r3, #20]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004cdc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d103      	bne.n	8004cee <HAL_DMA_IRQHandler+0x1da>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d007      	beq.n	8004cfe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f022 0208 	bic.w	r2, r2, #8
 8004cfc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d02:	223f      	movs	r2, #63	; 0x3f
 8004d04:	409a      	lsls	r2, r3
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2201      	movs	r2, #1
 8004d0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2200      	movs	r2, #0
 8004d16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d07e      	beq.n	8004e20 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	4798      	blx	r3
        }
        return;
 8004d2a:	e079      	b.n	8004e20 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d01d      	beq.n	8004d76 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d10d      	bne.n	8004d64 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d031      	beq.n	8004db4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d54:	6878      	ldr	r0, [r7, #4]
 8004d56:	4798      	blx	r3
 8004d58:	e02c      	b.n	8004db4 <HAL_DMA_IRQHandler+0x2a0>
 8004d5a:	bf00      	nop
 8004d5c:	200000ac 	.word	0x200000ac
 8004d60:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d023      	beq.n	8004db4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d70:	6878      	ldr	r0, [r7, #4]
 8004d72:	4798      	blx	r3
 8004d74:	e01e      	b.n	8004db4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d10f      	bne.n	8004da4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f022 0210 	bic.w	r2, r2, #16
 8004d92:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2201      	movs	r2, #1
 8004d98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d003      	beq.n	8004db4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004db0:	6878      	ldr	r0, [r7, #4]
 8004db2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d032      	beq.n	8004e22 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dc0:	f003 0301 	and.w	r3, r3, #1
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d022      	beq.n	8004e0e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2205      	movs	r2, #5
 8004dcc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	681a      	ldr	r2, [r3, #0]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f022 0201 	bic.w	r2, r2, #1
 8004dde:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	3301      	adds	r3, #1
 8004de4:	60bb      	str	r3, [r7, #8]
 8004de6:	697a      	ldr	r2, [r7, #20]
 8004de8:	429a      	cmp	r2, r3
 8004dea:	d307      	bcc.n	8004dfc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f003 0301 	and.w	r3, r3, #1
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d1f2      	bne.n	8004de0 <HAL_DMA_IRQHandler+0x2cc>
 8004dfa:	e000      	b.n	8004dfe <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004dfc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2201      	movs	r2, #1
 8004e02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d005      	beq.n	8004e22 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	4798      	blx	r3
 8004e1e:	e000      	b.n	8004e22 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004e20:	bf00      	nop
    }
  }
}
 8004e22:	3718      	adds	r7, #24
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd80      	pop	{r7, pc}

08004e28 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b085      	sub	sp, #20
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	60f8      	str	r0, [r7, #12]
 8004e30:	60b9      	str	r1, [r7, #8]
 8004e32:	607a      	str	r2, [r7, #4]
 8004e34:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	681a      	ldr	r2, [r3, #0]
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004e44:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	683a      	ldr	r2, [r7, #0]
 8004e4c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	689b      	ldr	r3, [r3, #8]
 8004e52:	2b40      	cmp	r3, #64	; 0x40
 8004e54:	d108      	bne.n	8004e68 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	687a      	ldr	r2, [r7, #4]
 8004e5c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	68ba      	ldr	r2, [r7, #8]
 8004e64:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004e66:	e007      	b.n	8004e78 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	68ba      	ldr	r2, [r7, #8]
 8004e6e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	687a      	ldr	r2, [r7, #4]
 8004e76:	60da      	str	r2, [r3, #12]
}
 8004e78:	bf00      	nop
 8004e7a:	3714      	adds	r7, #20
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e82:	4770      	bx	lr

08004e84 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b085      	sub	sp, #20
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	b2db      	uxtb	r3, r3
 8004e92:	3b10      	subs	r3, #16
 8004e94:	4a14      	ldr	r2, [pc, #80]	; (8004ee8 <DMA_CalcBaseAndBitshift+0x64>)
 8004e96:	fba2 2303 	umull	r2, r3, r2, r3
 8004e9a:	091b      	lsrs	r3, r3, #4
 8004e9c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004e9e:	4a13      	ldr	r2, [pc, #76]	; (8004eec <DMA_CalcBaseAndBitshift+0x68>)
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	4413      	add	r3, r2
 8004ea4:	781b      	ldrb	r3, [r3, #0]
 8004ea6:	461a      	mov	r2, r3
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	2b03      	cmp	r3, #3
 8004eb0:	d909      	bls.n	8004ec6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004eba:	f023 0303 	bic.w	r3, r3, #3
 8004ebe:	1d1a      	adds	r2, r3, #4
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	659a      	str	r2, [r3, #88]	; 0x58
 8004ec4:	e007      	b.n	8004ed6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004ece:	f023 0303 	bic.w	r3, r3, #3
 8004ed2:	687a      	ldr	r2, [r7, #4]
 8004ed4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	3714      	adds	r7, #20
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee4:	4770      	bx	lr
 8004ee6:	bf00      	nop
 8004ee8:	aaaaaaab 	.word	0xaaaaaaab
 8004eec:	080211a4 	.word	0x080211a4

08004ef0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b085      	sub	sp, #20
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ef8:	2300      	movs	r3, #0
 8004efa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f00:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	699b      	ldr	r3, [r3, #24]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d11f      	bne.n	8004f4a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	2b03      	cmp	r3, #3
 8004f0e:	d856      	bhi.n	8004fbe <DMA_CheckFifoParam+0xce>
 8004f10:	a201      	add	r2, pc, #4	; (adr r2, 8004f18 <DMA_CheckFifoParam+0x28>)
 8004f12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f16:	bf00      	nop
 8004f18:	08004f29 	.word	0x08004f29
 8004f1c:	08004f3b 	.word	0x08004f3b
 8004f20:	08004f29 	.word	0x08004f29
 8004f24:	08004fbf 	.word	0x08004fbf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d046      	beq.n	8004fc2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004f34:	2301      	movs	r3, #1
 8004f36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f38:	e043      	b.n	8004fc2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f3e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004f42:	d140      	bne.n	8004fc6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004f44:	2301      	movs	r3, #1
 8004f46:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f48:	e03d      	b.n	8004fc6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	699b      	ldr	r3, [r3, #24]
 8004f4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f52:	d121      	bne.n	8004f98 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	2b03      	cmp	r3, #3
 8004f58:	d837      	bhi.n	8004fca <DMA_CheckFifoParam+0xda>
 8004f5a:	a201      	add	r2, pc, #4	; (adr r2, 8004f60 <DMA_CheckFifoParam+0x70>)
 8004f5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f60:	08004f71 	.word	0x08004f71
 8004f64:	08004f77 	.word	0x08004f77
 8004f68:	08004f71 	.word	0x08004f71
 8004f6c:	08004f89 	.word	0x08004f89
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004f70:	2301      	movs	r3, #1
 8004f72:	73fb      	strb	r3, [r7, #15]
      break;
 8004f74:	e030      	b.n	8004fd8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f7a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d025      	beq.n	8004fce <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004f82:	2301      	movs	r3, #1
 8004f84:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f86:	e022      	b.n	8004fce <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f8c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004f90:	d11f      	bne.n	8004fd2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004f92:	2301      	movs	r3, #1
 8004f94:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004f96:	e01c      	b.n	8004fd2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	2b02      	cmp	r3, #2
 8004f9c:	d903      	bls.n	8004fa6 <DMA_CheckFifoParam+0xb6>
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	2b03      	cmp	r3, #3
 8004fa2:	d003      	beq.n	8004fac <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004fa4:	e018      	b.n	8004fd8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	73fb      	strb	r3, [r7, #15]
      break;
 8004faa:	e015      	b.n	8004fd8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fb0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d00e      	beq.n	8004fd6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004fb8:	2301      	movs	r3, #1
 8004fba:	73fb      	strb	r3, [r7, #15]
      break;
 8004fbc:	e00b      	b.n	8004fd6 <DMA_CheckFifoParam+0xe6>
      break;
 8004fbe:	bf00      	nop
 8004fc0:	e00a      	b.n	8004fd8 <DMA_CheckFifoParam+0xe8>
      break;
 8004fc2:	bf00      	nop
 8004fc4:	e008      	b.n	8004fd8 <DMA_CheckFifoParam+0xe8>
      break;
 8004fc6:	bf00      	nop
 8004fc8:	e006      	b.n	8004fd8 <DMA_CheckFifoParam+0xe8>
      break;
 8004fca:	bf00      	nop
 8004fcc:	e004      	b.n	8004fd8 <DMA_CheckFifoParam+0xe8>
      break;
 8004fce:	bf00      	nop
 8004fd0:	e002      	b.n	8004fd8 <DMA_CheckFifoParam+0xe8>
      break;   
 8004fd2:	bf00      	nop
 8004fd4:	e000      	b.n	8004fd8 <DMA_CheckFifoParam+0xe8>
      break;
 8004fd6:	bf00      	nop
    }
  } 
  
  return status; 
 8004fd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3714      	adds	r7, #20
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe4:	4770      	bx	lr
 8004fe6:	bf00      	nop

08004fe8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b089      	sub	sp, #36	; 0x24
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
 8004ff0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004ffe:	2300      	movs	r3, #0
 8005000:	61fb      	str	r3, [r7, #28]
 8005002:	e159      	b.n	80052b8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005004:	2201      	movs	r2, #1
 8005006:	69fb      	ldr	r3, [r7, #28]
 8005008:	fa02 f303 	lsl.w	r3, r2, r3
 800500c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	697a      	ldr	r2, [r7, #20]
 8005014:	4013      	ands	r3, r2
 8005016:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005018:	693a      	ldr	r2, [r7, #16]
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	429a      	cmp	r2, r3
 800501e:	f040 8148 	bne.w	80052b2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	f003 0303 	and.w	r3, r3, #3
 800502a:	2b01      	cmp	r3, #1
 800502c:	d005      	beq.n	800503a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005036:	2b02      	cmp	r3, #2
 8005038:	d130      	bne.n	800509c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005040:	69fb      	ldr	r3, [r7, #28]
 8005042:	005b      	lsls	r3, r3, #1
 8005044:	2203      	movs	r2, #3
 8005046:	fa02 f303 	lsl.w	r3, r2, r3
 800504a:	43db      	mvns	r3, r3
 800504c:	69ba      	ldr	r2, [r7, #24]
 800504e:	4013      	ands	r3, r2
 8005050:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	68da      	ldr	r2, [r3, #12]
 8005056:	69fb      	ldr	r3, [r7, #28]
 8005058:	005b      	lsls	r3, r3, #1
 800505a:	fa02 f303 	lsl.w	r3, r2, r3
 800505e:	69ba      	ldr	r2, [r7, #24]
 8005060:	4313      	orrs	r3, r2
 8005062:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	69ba      	ldr	r2, [r7, #24]
 8005068:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005070:	2201      	movs	r2, #1
 8005072:	69fb      	ldr	r3, [r7, #28]
 8005074:	fa02 f303 	lsl.w	r3, r2, r3
 8005078:	43db      	mvns	r3, r3
 800507a:	69ba      	ldr	r2, [r7, #24]
 800507c:	4013      	ands	r3, r2
 800507e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	091b      	lsrs	r3, r3, #4
 8005086:	f003 0201 	and.w	r2, r3, #1
 800508a:	69fb      	ldr	r3, [r7, #28]
 800508c:	fa02 f303 	lsl.w	r3, r2, r3
 8005090:	69ba      	ldr	r2, [r7, #24]
 8005092:	4313      	orrs	r3, r2
 8005094:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	69ba      	ldr	r2, [r7, #24]
 800509a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	f003 0303 	and.w	r3, r3, #3
 80050a4:	2b03      	cmp	r3, #3
 80050a6:	d017      	beq.n	80050d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	68db      	ldr	r3, [r3, #12]
 80050ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80050ae:	69fb      	ldr	r3, [r7, #28]
 80050b0:	005b      	lsls	r3, r3, #1
 80050b2:	2203      	movs	r2, #3
 80050b4:	fa02 f303 	lsl.w	r3, r2, r3
 80050b8:	43db      	mvns	r3, r3
 80050ba:	69ba      	ldr	r2, [r7, #24]
 80050bc:	4013      	ands	r3, r2
 80050be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	689a      	ldr	r2, [r3, #8]
 80050c4:	69fb      	ldr	r3, [r7, #28]
 80050c6:	005b      	lsls	r3, r3, #1
 80050c8:	fa02 f303 	lsl.w	r3, r2, r3
 80050cc:	69ba      	ldr	r2, [r7, #24]
 80050ce:	4313      	orrs	r3, r2
 80050d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	69ba      	ldr	r2, [r7, #24]
 80050d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	f003 0303 	and.w	r3, r3, #3
 80050e0:	2b02      	cmp	r3, #2
 80050e2:	d123      	bne.n	800512c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80050e4:	69fb      	ldr	r3, [r7, #28]
 80050e6:	08da      	lsrs	r2, r3, #3
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	3208      	adds	r2, #8
 80050ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80050f2:	69fb      	ldr	r3, [r7, #28]
 80050f4:	f003 0307 	and.w	r3, r3, #7
 80050f8:	009b      	lsls	r3, r3, #2
 80050fa:	220f      	movs	r2, #15
 80050fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005100:	43db      	mvns	r3, r3
 8005102:	69ba      	ldr	r2, [r7, #24]
 8005104:	4013      	ands	r3, r2
 8005106:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	691a      	ldr	r2, [r3, #16]
 800510c:	69fb      	ldr	r3, [r7, #28]
 800510e:	f003 0307 	and.w	r3, r3, #7
 8005112:	009b      	lsls	r3, r3, #2
 8005114:	fa02 f303 	lsl.w	r3, r2, r3
 8005118:	69ba      	ldr	r2, [r7, #24]
 800511a:	4313      	orrs	r3, r2
 800511c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800511e:	69fb      	ldr	r3, [r7, #28]
 8005120:	08da      	lsrs	r2, r3, #3
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	3208      	adds	r2, #8
 8005126:	69b9      	ldr	r1, [r7, #24]
 8005128:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005132:	69fb      	ldr	r3, [r7, #28]
 8005134:	005b      	lsls	r3, r3, #1
 8005136:	2203      	movs	r2, #3
 8005138:	fa02 f303 	lsl.w	r3, r2, r3
 800513c:	43db      	mvns	r3, r3
 800513e:	69ba      	ldr	r2, [r7, #24]
 8005140:	4013      	ands	r3, r2
 8005142:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	f003 0203 	and.w	r2, r3, #3
 800514c:	69fb      	ldr	r3, [r7, #28]
 800514e:	005b      	lsls	r3, r3, #1
 8005150:	fa02 f303 	lsl.w	r3, r2, r3
 8005154:	69ba      	ldr	r2, [r7, #24]
 8005156:	4313      	orrs	r3, r2
 8005158:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	69ba      	ldr	r2, [r7, #24]
 800515e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005168:	2b00      	cmp	r3, #0
 800516a:	f000 80a2 	beq.w	80052b2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800516e:	2300      	movs	r3, #0
 8005170:	60fb      	str	r3, [r7, #12]
 8005172:	4b57      	ldr	r3, [pc, #348]	; (80052d0 <HAL_GPIO_Init+0x2e8>)
 8005174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005176:	4a56      	ldr	r2, [pc, #344]	; (80052d0 <HAL_GPIO_Init+0x2e8>)
 8005178:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800517c:	6453      	str	r3, [r2, #68]	; 0x44
 800517e:	4b54      	ldr	r3, [pc, #336]	; (80052d0 <HAL_GPIO_Init+0x2e8>)
 8005180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005182:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005186:	60fb      	str	r3, [r7, #12]
 8005188:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800518a:	4a52      	ldr	r2, [pc, #328]	; (80052d4 <HAL_GPIO_Init+0x2ec>)
 800518c:	69fb      	ldr	r3, [r7, #28]
 800518e:	089b      	lsrs	r3, r3, #2
 8005190:	3302      	adds	r3, #2
 8005192:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005196:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005198:	69fb      	ldr	r3, [r7, #28]
 800519a:	f003 0303 	and.w	r3, r3, #3
 800519e:	009b      	lsls	r3, r3, #2
 80051a0:	220f      	movs	r2, #15
 80051a2:	fa02 f303 	lsl.w	r3, r2, r3
 80051a6:	43db      	mvns	r3, r3
 80051a8:	69ba      	ldr	r2, [r7, #24]
 80051aa:	4013      	ands	r3, r2
 80051ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	4a49      	ldr	r2, [pc, #292]	; (80052d8 <HAL_GPIO_Init+0x2f0>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d019      	beq.n	80051ea <HAL_GPIO_Init+0x202>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	4a48      	ldr	r2, [pc, #288]	; (80052dc <HAL_GPIO_Init+0x2f4>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d013      	beq.n	80051e6 <HAL_GPIO_Init+0x1fe>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	4a47      	ldr	r2, [pc, #284]	; (80052e0 <HAL_GPIO_Init+0x2f8>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d00d      	beq.n	80051e2 <HAL_GPIO_Init+0x1fa>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	4a46      	ldr	r2, [pc, #280]	; (80052e4 <HAL_GPIO_Init+0x2fc>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d007      	beq.n	80051de <HAL_GPIO_Init+0x1f6>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	4a45      	ldr	r2, [pc, #276]	; (80052e8 <HAL_GPIO_Init+0x300>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d101      	bne.n	80051da <HAL_GPIO_Init+0x1f2>
 80051d6:	2304      	movs	r3, #4
 80051d8:	e008      	b.n	80051ec <HAL_GPIO_Init+0x204>
 80051da:	2307      	movs	r3, #7
 80051dc:	e006      	b.n	80051ec <HAL_GPIO_Init+0x204>
 80051de:	2303      	movs	r3, #3
 80051e0:	e004      	b.n	80051ec <HAL_GPIO_Init+0x204>
 80051e2:	2302      	movs	r3, #2
 80051e4:	e002      	b.n	80051ec <HAL_GPIO_Init+0x204>
 80051e6:	2301      	movs	r3, #1
 80051e8:	e000      	b.n	80051ec <HAL_GPIO_Init+0x204>
 80051ea:	2300      	movs	r3, #0
 80051ec:	69fa      	ldr	r2, [r7, #28]
 80051ee:	f002 0203 	and.w	r2, r2, #3
 80051f2:	0092      	lsls	r2, r2, #2
 80051f4:	4093      	lsls	r3, r2
 80051f6:	69ba      	ldr	r2, [r7, #24]
 80051f8:	4313      	orrs	r3, r2
 80051fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80051fc:	4935      	ldr	r1, [pc, #212]	; (80052d4 <HAL_GPIO_Init+0x2ec>)
 80051fe:	69fb      	ldr	r3, [r7, #28]
 8005200:	089b      	lsrs	r3, r3, #2
 8005202:	3302      	adds	r3, #2
 8005204:	69ba      	ldr	r2, [r7, #24]
 8005206:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800520a:	4b38      	ldr	r3, [pc, #224]	; (80052ec <HAL_GPIO_Init+0x304>)
 800520c:	689b      	ldr	r3, [r3, #8]
 800520e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	43db      	mvns	r3, r3
 8005214:	69ba      	ldr	r2, [r7, #24]
 8005216:	4013      	ands	r3, r2
 8005218:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005222:	2b00      	cmp	r3, #0
 8005224:	d003      	beq.n	800522e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8005226:	69ba      	ldr	r2, [r7, #24]
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	4313      	orrs	r3, r2
 800522c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800522e:	4a2f      	ldr	r2, [pc, #188]	; (80052ec <HAL_GPIO_Init+0x304>)
 8005230:	69bb      	ldr	r3, [r7, #24]
 8005232:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005234:	4b2d      	ldr	r3, [pc, #180]	; (80052ec <HAL_GPIO_Init+0x304>)
 8005236:	68db      	ldr	r3, [r3, #12]
 8005238:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800523a:	693b      	ldr	r3, [r7, #16]
 800523c:	43db      	mvns	r3, r3
 800523e:	69ba      	ldr	r2, [r7, #24]
 8005240:	4013      	ands	r3, r2
 8005242:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800524c:	2b00      	cmp	r3, #0
 800524e:	d003      	beq.n	8005258 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005250:	69ba      	ldr	r2, [r7, #24]
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	4313      	orrs	r3, r2
 8005256:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005258:	4a24      	ldr	r2, [pc, #144]	; (80052ec <HAL_GPIO_Init+0x304>)
 800525a:	69bb      	ldr	r3, [r7, #24]
 800525c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800525e:	4b23      	ldr	r3, [pc, #140]	; (80052ec <HAL_GPIO_Init+0x304>)
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	43db      	mvns	r3, r3
 8005268:	69ba      	ldr	r2, [r7, #24]
 800526a:	4013      	ands	r3, r2
 800526c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005276:	2b00      	cmp	r3, #0
 8005278:	d003      	beq.n	8005282 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800527a:	69ba      	ldr	r2, [r7, #24]
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	4313      	orrs	r3, r2
 8005280:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005282:	4a1a      	ldr	r2, [pc, #104]	; (80052ec <HAL_GPIO_Init+0x304>)
 8005284:	69bb      	ldr	r3, [r7, #24]
 8005286:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005288:	4b18      	ldr	r3, [pc, #96]	; (80052ec <HAL_GPIO_Init+0x304>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	43db      	mvns	r3, r3
 8005292:	69ba      	ldr	r2, [r7, #24]
 8005294:	4013      	ands	r3, r2
 8005296:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d003      	beq.n	80052ac <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80052a4:	69ba      	ldr	r2, [r7, #24]
 80052a6:	693b      	ldr	r3, [r7, #16]
 80052a8:	4313      	orrs	r3, r2
 80052aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80052ac:	4a0f      	ldr	r2, [pc, #60]	; (80052ec <HAL_GPIO_Init+0x304>)
 80052ae:	69bb      	ldr	r3, [r7, #24]
 80052b0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80052b2:	69fb      	ldr	r3, [r7, #28]
 80052b4:	3301      	adds	r3, #1
 80052b6:	61fb      	str	r3, [r7, #28]
 80052b8:	69fb      	ldr	r3, [r7, #28]
 80052ba:	2b0f      	cmp	r3, #15
 80052bc:	f67f aea2 	bls.w	8005004 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80052c0:	bf00      	nop
 80052c2:	bf00      	nop
 80052c4:	3724      	adds	r7, #36	; 0x24
 80052c6:	46bd      	mov	sp, r7
 80052c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052cc:	4770      	bx	lr
 80052ce:	bf00      	nop
 80052d0:	40023800 	.word	0x40023800
 80052d4:	40013800 	.word	0x40013800
 80052d8:	40020000 	.word	0x40020000
 80052dc:	40020400 	.word	0x40020400
 80052e0:	40020800 	.word	0x40020800
 80052e4:	40020c00 	.word	0x40020c00
 80052e8:	40021000 	.word	0x40021000
 80052ec:	40013c00 	.word	0x40013c00

080052f0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80052f0:	b480      	push	{r7}
 80052f2:	b087      	sub	sp, #28
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
 80052f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80052fa:	2300      	movs	r3, #0
 80052fc:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80052fe:	2300      	movs	r3, #0
 8005300:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8005302:	2300      	movs	r3, #0
 8005304:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005306:	2300      	movs	r3, #0
 8005308:	617b      	str	r3, [r7, #20]
 800530a:	e0bb      	b.n	8005484 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800530c:	2201      	movs	r2, #1
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	fa02 f303 	lsl.w	r3, r2, r3
 8005314:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8005316:	683a      	ldr	r2, [r7, #0]
 8005318:	693b      	ldr	r3, [r7, #16]
 800531a:	4013      	ands	r3, r2
 800531c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800531e:	68fa      	ldr	r2, [r7, #12]
 8005320:	693b      	ldr	r3, [r7, #16]
 8005322:	429a      	cmp	r2, r3
 8005324:	f040 80ab 	bne.w	800547e <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8005328:	4a5c      	ldr	r2, [pc, #368]	; (800549c <HAL_GPIO_DeInit+0x1ac>)
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	089b      	lsrs	r3, r3, #2
 800532e:	3302      	adds	r3, #2
 8005330:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005334:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	f003 0303 	and.w	r3, r3, #3
 800533c:	009b      	lsls	r3, r3, #2
 800533e:	220f      	movs	r2, #15
 8005340:	fa02 f303 	lsl.w	r3, r2, r3
 8005344:	68ba      	ldr	r2, [r7, #8]
 8005346:	4013      	ands	r3, r2
 8005348:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	4a54      	ldr	r2, [pc, #336]	; (80054a0 <HAL_GPIO_DeInit+0x1b0>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d019      	beq.n	8005386 <HAL_GPIO_DeInit+0x96>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	4a53      	ldr	r2, [pc, #332]	; (80054a4 <HAL_GPIO_DeInit+0x1b4>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d013      	beq.n	8005382 <HAL_GPIO_DeInit+0x92>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	4a52      	ldr	r2, [pc, #328]	; (80054a8 <HAL_GPIO_DeInit+0x1b8>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d00d      	beq.n	800537e <HAL_GPIO_DeInit+0x8e>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	4a51      	ldr	r2, [pc, #324]	; (80054ac <HAL_GPIO_DeInit+0x1bc>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d007      	beq.n	800537a <HAL_GPIO_DeInit+0x8a>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	4a50      	ldr	r2, [pc, #320]	; (80054b0 <HAL_GPIO_DeInit+0x1c0>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d101      	bne.n	8005376 <HAL_GPIO_DeInit+0x86>
 8005372:	2304      	movs	r3, #4
 8005374:	e008      	b.n	8005388 <HAL_GPIO_DeInit+0x98>
 8005376:	2307      	movs	r3, #7
 8005378:	e006      	b.n	8005388 <HAL_GPIO_DeInit+0x98>
 800537a:	2303      	movs	r3, #3
 800537c:	e004      	b.n	8005388 <HAL_GPIO_DeInit+0x98>
 800537e:	2302      	movs	r3, #2
 8005380:	e002      	b.n	8005388 <HAL_GPIO_DeInit+0x98>
 8005382:	2301      	movs	r3, #1
 8005384:	e000      	b.n	8005388 <HAL_GPIO_DeInit+0x98>
 8005386:	2300      	movs	r3, #0
 8005388:	697a      	ldr	r2, [r7, #20]
 800538a:	f002 0203 	and.w	r2, r2, #3
 800538e:	0092      	lsls	r2, r2, #2
 8005390:	4093      	lsls	r3, r2
 8005392:	68ba      	ldr	r2, [r7, #8]
 8005394:	429a      	cmp	r2, r3
 8005396:	d132      	bne.n	80053fe <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005398:	4b46      	ldr	r3, [pc, #280]	; (80054b4 <HAL_GPIO_DeInit+0x1c4>)
 800539a:	681a      	ldr	r2, [r3, #0]
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	43db      	mvns	r3, r3
 80053a0:	4944      	ldr	r1, [pc, #272]	; (80054b4 <HAL_GPIO_DeInit+0x1c4>)
 80053a2:	4013      	ands	r3, r2
 80053a4:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80053a6:	4b43      	ldr	r3, [pc, #268]	; (80054b4 <HAL_GPIO_DeInit+0x1c4>)
 80053a8:	685a      	ldr	r2, [r3, #4]
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	43db      	mvns	r3, r3
 80053ae:	4941      	ldr	r1, [pc, #260]	; (80054b4 <HAL_GPIO_DeInit+0x1c4>)
 80053b0:	4013      	ands	r3, r2
 80053b2:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80053b4:	4b3f      	ldr	r3, [pc, #252]	; (80054b4 <HAL_GPIO_DeInit+0x1c4>)
 80053b6:	68da      	ldr	r2, [r3, #12]
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	43db      	mvns	r3, r3
 80053bc:	493d      	ldr	r1, [pc, #244]	; (80054b4 <HAL_GPIO_DeInit+0x1c4>)
 80053be:	4013      	ands	r3, r2
 80053c0:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80053c2:	4b3c      	ldr	r3, [pc, #240]	; (80054b4 <HAL_GPIO_DeInit+0x1c4>)
 80053c4:	689a      	ldr	r2, [r3, #8]
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	43db      	mvns	r3, r3
 80053ca:	493a      	ldr	r1, [pc, #232]	; (80054b4 <HAL_GPIO_DeInit+0x1c4>)
 80053cc:	4013      	ands	r3, r2
 80053ce:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80053d0:	697b      	ldr	r3, [r7, #20]
 80053d2:	f003 0303 	and.w	r3, r3, #3
 80053d6:	009b      	lsls	r3, r3, #2
 80053d8:	220f      	movs	r2, #15
 80053da:	fa02 f303 	lsl.w	r3, r2, r3
 80053de:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80053e0:	4a2e      	ldr	r2, [pc, #184]	; (800549c <HAL_GPIO_DeInit+0x1ac>)
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	089b      	lsrs	r3, r3, #2
 80053e6:	3302      	adds	r3, #2
 80053e8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	43da      	mvns	r2, r3
 80053f0:	482a      	ldr	r0, [pc, #168]	; (800549c <HAL_GPIO_DeInit+0x1ac>)
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	089b      	lsrs	r3, r3, #2
 80053f6:	400a      	ands	r2, r1
 80053f8:	3302      	adds	r3, #2
 80053fa:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681a      	ldr	r2, [r3, #0]
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	005b      	lsls	r3, r3, #1
 8005406:	2103      	movs	r1, #3
 8005408:	fa01 f303 	lsl.w	r3, r1, r3
 800540c:	43db      	mvns	r3, r3
 800540e:	401a      	ands	r2, r3
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005414:	697b      	ldr	r3, [r7, #20]
 8005416:	08da      	lsrs	r2, r3, #3
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	3208      	adds	r2, #8
 800541c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005420:	697b      	ldr	r3, [r7, #20]
 8005422:	f003 0307 	and.w	r3, r3, #7
 8005426:	009b      	lsls	r3, r3, #2
 8005428:	220f      	movs	r2, #15
 800542a:	fa02 f303 	lsl.w	r3, r2, r3
 800542e:	43db      	mvns	r3, r3
 8005430:	697a      	ldr	r2, [r7, #20]
 8005432:	08d2      	lsrs	r2, r2, #3
 8005434:	4019      	ands	r1, r3
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	3208      	adds	r2, #8
 800543a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	68da      	ldr	r2, [r3, #12]
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	005b      	lsls	r3, r3, #1
 8005446:	2103      	movs	r1, #3
 8005448:	fa01 f303 	lsl.w	r3, r1, r3
 800544c:	43db      	mvns	r3, r3
 800544e:	401a      	ands	r2, r3
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	685a      	ldr	r2, [r3, #4]
 8005458:	2101      	movs	r1, #1
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	fa01 f303 	lsl.w	r3, r1, r3
 8005460:	43db      	mvns	r3, r3
 8005462:	401a      	ands	r2, r3
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	689a      	ldr	r2, [r3, #8]
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	005b      	lsls	r3, r3, #1
 8005470:	2103      	movs	r1, #3
 8005472:	fa01 f303 	lsl.w	r3, r1, r3
 8005476:	43db      	mvns	r3, r3
 8005478:	401a      	ands	r2, r3
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	3301      	adds	r3, #1
 8005482:	617b      	str	r3, [r7, #20]
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	2b0f      	cmp	r3, #15
 8005488:	f67f af40 	bls.w	800530c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800548c:	bf00      	nop
 800548e:	bf00      	nop
 8005490:	371c      	adds	r7, #28
 8005492:	46bd      	mov	sp, r7
 8005494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005498:	4770      	bx	lr
 800549a:	bf00      	nop
 800549c:	40013800 	.word	0x40013800
 80054a0:	40020000 	.word	0x40020000
 80054a4:	40020400 	.word	0x40020400
 80054a8:	40020800 	.word	0x40020800
 80054ac:	40020c00 	.word	0x40020c00
 80054b0:	40021000 	.word	0x40021000
 80054b4:	40013c00 	.word	0x40013c00

080054b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80054b8:	b480      	push	{r7}
 80054ba:	b083      	sub	sp, #12
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
 80054c0:	460b      	mov	r3, r1
 80054c2:	807b      	strh	r3, [r7, #2]
 80054c4:	4613      	mov	r3, r2
 80054c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80054c8:	787b      	ldrb	r3, [r7, #1]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d003      	beq.n	80054d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80054ce:	887a      	ldrh	r2, [r7, #2]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80054d4:	e003      	b.n	80054de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80054d6:	887b      	ldrh	r3, [r7, #2]
 80054d8:	041a      	lsls	r2, r3, #16
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	619a      	str	r2, [r3, #24]
}
 80054de:	bf00      	nop
 80054e0:	370c      	adds	r7, #12
 80054e2:	46bd      	mov	sp, r7
 80054e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e8:	4770      	bx	lr
	...

080054ec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b082      	sub	sp, #8
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	4603      	mov	r3, r0
 80054f4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80054f6:	4b08      	ldr	r3, [pc, #32]	; (8005518 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80054f8:	695a      	ldr	r2, [r3, #20]
 80054fa:	88fb      	ldrh	r3, [r7, #6]
 80054fc:	4013      	ands	r3, r2
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d006      	beq.n	8005510 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005502:	4a05      	ldr	r2, [pc, #20]	; (8005518 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005504:	88fb      	ldrh	r3, [r7, #6]
 8005506:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005508:	88fb      	ldrh	r3, [r7, #6]
 800550a:	4618      	mov	r0, r3
 800550c:	f000 f806 	bl	800551c <HAL_GPIO_EXTI_Callback>
  }
}
 8005510:	bf00      	nop
 8005512:	3708      	adds	r7, #8
 8005514:	46bd      	mov	sp, r7
 8005516:	bd80      	pop	{r7, pc}
 8005518:	40013c00 	.word	0x40013c00

0800551c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800551c:	b480      	push	{r7}
 800551e:	b083      	sub	sp, #12
 8005520:	af00      	add	r7, sp, #0
 8005522:	4603      	mov	r3, r0
 8005524:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005526:	bf00      	nop
 8005528:	370c      	adds	r7, #12
 800552a:	46bd      	mov	sp, r7
 800552c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005530:	4770      	bx	lr
	...

08005534 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b086      	sub	sp, #24
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d101      	bne.n	8005546 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005542:	2301      	movs	r3, #1
 8005544:	e267      	b.n	8005a16 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f003 0301 	and.w	r3, r3, #1
 800554e:	2b00      	cmp	r3, #0
 8005550:	d075      	beq.n	800563e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005552:	4b88      	ldr	r3, [pc, #544]	; (8005774 <HAL_RCC_OscConfig+0x240>)
 8005554:	689b      	ldr	r3, [r3, #8]
 8005556:	f003 030c 	and.w	r3, r3, #12
 800555a:	2b04      	cmp	r3, #4
 800555c:	d00c      	beq.n	8005578 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800555e:	4b85      	ldr	r3, [pc, #532]	; (8005774 <HAL_RCC_OscConfig+0x240>)
 8005560:	689b      	ldr	r3, [r3, #8]
 8005562:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005566:	2b08      	cmp	r3, #8
 8005568:	d112      	bne.n	8005590 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800556a:	4b82      	ldr	r3, [pc, #520]	; (8005774 <HAL_RCC_OscConfig+0x240>)
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005572:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005576:	d10b      	bne.n	8005590 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005578:	4b7e      	ldr	r3, [pc, #504]	; (8005774 <HAL_RCC_OscConfig+0x240>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005580:	2b00      	cmp	r3, #0
 8005582:	d05b      	beq.n	800563c <HAL_RCC_OscConfig+0x108>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d157      	bne.n	800563c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800558c:	2301      	movs	r3, #1
 800558e:	e242      	b.n	8005a16 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005598:	d106      	bne.n	80055a8 <HAL_RCC_OscConfig+0x74>
 800559a:	4b76      	ldr	r3, [pc, #472]	; (8005774 <HAL_RCC_OscConfig+0x240>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a75      	ldr	r2, [pc, #468]	; (8005774 <HAL_RCC_OscConfig+0x240>)
 80055a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055a4:	6013      	str	r3, [r2, #0]
 80055a6:	e01d      	b.n	80055e4 <HAL_RCC_OscConfig+0xb0>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80055b0:	d10c      	bne.n	80055cc <HAL_RCC_OscConfig+0x98>
 80055b2:	4b70      	ldr	r3, [pc, #448]	; (8005774 <HAL_RCC_OscConfig+0x240>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4a6f      	ldr	r2, [pc, #444]	; (8005774 <HAL_RCC_OscConfig+0x240>)
 80055b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80055bc:	6013      	str	r3, [r2, #0]
 80055be:	4b6d      	ldr	r3, [pc, #436]	; (8005774 <HAL_RCC_OscConfig+0x240>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a6c      	ldr	r2, [pc, #432]	; (8005774 <HAL_RCC_OscConfig+0x240>)
 80055c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055c8:	6013      	str	r3, [r2, #0]
 80055ca:	e00b      	b.n	80055e4 <HAL_RCC_OscConfig+0xb0>
 80055cc:	4b69      	ldr	r3, [pc, #420]	; (8005774 <HAL_RCC_OscConfig+0x240>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4a68      	ldr	r2, [pc, #416]	; (8005774 <HAL_RCC_OscConfig+0x240>)
 80055d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055d6:	6013      	str	r3, [r2, #0]
 80055d8:	4b66      	ldr	r3, [pc, #408]	; (8005774 <HAL_RCC_OscConfig+0x240>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a65      	ldr	r2, [pc, #404]	; (8005774 <HAL_RCC_OscConfig+0x240>)
 80055de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80055e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	685b      	ldr	r3, [r3, #4]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d013      	beq.n	8005614 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055ec:	f7fe ff7c 	bl	80044e8 <HAL_GetTick>
 80055f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055f2:	e008      	b.n	8005606 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80055f4:	f7fe ff78 	bl	80044e8 <HAL_GetTick>
 80055f8:	4602      	mov	r2, r0
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	1ad3      	subs	r3, r2, r3
 80055fe:	2b64      	cmp	r3, #100	; 0x64
 8005600:	d901      	bls.n	8005606 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005602:	2303      	movs	r3, #3
 8005604:	e207      	b.n	8005a16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005606:	4b5b      	ldr	r3, [pc, #364]	; (8005774 <HAL_RCC_OscConfig+0x240>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800560e:	2b00      	cmp	r3, #0
 8005610:	d0f0      	beq.n	80055f4 <HAL_RCC_OscConfig+0xc0>
 8005612:	e014      	b.n	800563e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005614:	f7fe ff68 	bl	80044e8 <HAL_GetTick>
 8005618:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800561a:	e008      	b.n	800562e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800561c:	f7fe ff64 	bl	80044e8 <HAL_GetTick>
 8005620:	4602      	mov	r2, r0
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	1ad3      	subs	r3, r2, r3
 8005626:	2b64      	cmp	r3, #100	; 0x64
 8005628:	d901      	bls.n	800562e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800562a:	2303      	movs	r3, #3
 800562c:	e1f3      	b.n	8005a16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800562e:	4b51      	ldr	r3, [pc, #324]	; (8005774 <HAL_RCC_OscConfig+0x240>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005636:	2b00      	cmp	r3, #0
 8005638:	d1f0      	bne.n	800561c <HAL_RCC_OscConfig+0xe8>
 800563a:	e000      	b.n	800563e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800563c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f003 0302 	and.w	r3, r3, #2
 8005646:	2b00      	cmp	r3, #0
 8005648:	d063      	beq.n	8005712 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800564a:	4b4a      	ldr	r3, [pc, #296]	; (8005774 <HAL_RCC_OscConfig+0x240>)
 800564c:	689b      	ldr	r3, [r3, #8]
 800564e:	f003 030c 	and.w	r3, r3, #12
 8005652:	2b00      	cmp	r3, #0
 8005654:	d00b      	beq.n	800566e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005656:	4b47      	ldr	r3, [pc, #284]	; (8005774 <HAL_RCC_OscConfig+0x240>)
 8005658:	689b      	ldr	r3, [r3, #8]
 800565a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800565e:	2b08      	cmp	r3, #8
 8005660:	d11c      	bne.n	800569c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005662:	4b44      	ldr	r3, [pc, #272]	; (8005774 <HAL_RCC_OscConfig+0x240>)
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800566a:	2b00      	cmp	r3, #0
 800566c:	d116      	bne.n	800569c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800566e:	4b41      	ldr	r3, [pc, #260]	; (8005774 <HAL_RCC_OscConfig+0x240>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f003 0302 	and.w	r3, r3, #2
 8005676:	2b00      	cmp	r3, #0
 8005678:	d005      	beq.n	8005686 <HAL_RCC_OscConfig+0x152>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	68db      	ldr	r3, [r3, #12]
 800567e:	2b01      	cmp	r3, #1
 8005680:	d001      	beq.n	8005686 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005682:	2301      	movs	r3, #1
 8005684:	e1c7      	b.n	8005a16 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005686:	4b3b      	ldr	r3, [pc, #236]	; (8005774 <HAL_RCC_OscConfig+0x240>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	691b      	ldr	r3, [r3, #16]
 8005692:	00db      	lsls	r3, r3, #3
 8005694:	4937      	ldr	r1, [pc, #220]	; (8005774 <HAL_RCC_OscConfig+0x240>)
 8005696:	4313      	orrs	r3, r2
 8005698:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800569a:	e03a      	b.n	8005712 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	68db      	ldr	r3, [r3, #12]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d020      	beq.n	80056e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80056a4:	4b34      	ldr	r3, [pc, #208]	; (8005778 <HAL_RCC_OscConfig+0x244>)
 80056a6:	2201      	movs	r2, #1
 80056a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056aa:	f7fe ff1d 	bl	80044e8 <HAL_GetTick>
 80056ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056b0:	e008      	b.n	80056c4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80056b2:	f7fe ff19 	bl	80044e8 <HAL_GetTick>
 80056b6:	4602      	mov	r2, r0
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	1ad3      	subs	r3, r2, r3
 80056bc:	2b02      	cmp	r3, #2
 80056be:	d901      	bls.n	80056c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80056c0:	2303      	movs	r3, #3
 80056c2:	e1a8      	b.n	8005a16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056c4:	4b2b      	ldr	r3, [pc, #172]	; (8005774 <HAL_RCC_OscConfig+0x240>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f003 0302 	and.w	r3, r3, #2
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d0f0      	beq.n	80056b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056d0:	4b28      	ldr	r3, [pc, #160]	; (8005774 <HAL_RCC_OscConfig+0x240>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	691b      	ldr	r3, [r3, #16]
 80056dc:	00db      	lsls	r3, r3, #3
 80056de:	4925      	ldr	r1, [pc, #148]	; (8005774 <HAL_RCC_OscConfig+0x240>)
 80056e0:	4313      	orrs	r3, r2
 80056e2:	600b      	str	r3, [r1, #0]
 80056e4:	e015      	b.n	8005712 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80056e6:	4b24      	ldr	r3, [pc, #144]	; (8005778 <HAL_RCC_OscConfig+0x244>)
 80056e8:	2200      	movs	r2, #0
 80056ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056ec:	f7fe fefc 	bl	80044e8 <HAL_GetTick>
 80056f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80056f2:	e008      	b.n	8005706 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80056f4:	f7fe fef8 	bl	80044e8 <HAL_GetTick>
 80056f8:	4602      	mov	r2, r0
 80056fa:	693b      	ldr	r3, [r7, #16]
 80056fc:	1ad3      	subs	r3, r2, r3
 80056fe:	2b02      	cmp	r3, #2
 8005700:	d901      	bls.n	8005706 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005702:	2303      	movs	r3, #3
 8005704:	e187      	b.n	8005a16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005706:	4b1b      	ldr	r3, [pc, #108]	; (8005774 <HAL_RCC_OscConfig+0x240>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f003 0302 	and.w	r3, r3, #2
 800570e:	2b00      	cmp	r3, #0
 8005710:	d1f0      	bne.n	80056f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f003 0308 	and.w	r3, r3, #8
 800571a:	2b00      	cmp	r3, #0
 800571c:	d036      	beq.n	800578c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	695b      	ldr	r3, [r3, #20]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d016      	beq.n	8005754 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005726:	4b15      	ldr	r3, [pc, #84]	; (800577c <HAL_RCC_OscConfig+0x248>)
 8005728:	2201      	movs	r2, #1
 800572a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800572c:	f7fe fedc 	bl	80044e8 <HAL_GetTick>
 8005730:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005732:	e008      	b.n	8005746 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005734:	f7fe fed8 	bl	80044e8 <HAL_GetTick>
 8005738:	4602      	mov	r2, r0
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	1ad3      	subs	r3, r2, r3
 800573e:	2b02      	cmp	r3, #2
 8005740:	d901      	bls.n	8005746 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005742:	2303      	movs	r3, #3
 8005744:	e167      	b.n	8005a16 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005746:	4b0b      	ldr	r3, [pc, #44]	; (8005774 <HAL_RCC_OscConfig+0x240>)
 8005748:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800574a:	f003 0302 	and.w	r3, r3, #2
 800574e:	2b00      	cmp	r3, #0
 8005750:	d0f0      	beq.n	8005734 <HAL_RCC_OscConfig+0x200>
 8005752:	e01b      	b.n	800578c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005754:	4b09      	ldr	r3, [pc, #36]	; (800577c <HAL_RCC_OscConfig+0x248>)
 8005756:	2200      	movs	r2, #0
 8005758:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800575a:	f7fe fec5 	bl	80044e8 <HAL_GetTick>
 800575e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005760:	e00e      	b.n	8005780 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005762:	f7fe fec1 	bl	80044e8 <HAL_GetTick>
 8005766:	4602      	mov	r2, r0
 8005768:	693b      	ldr	r3, [r7, #16]
 800576a:	1ad3      	subs	r3, r2, r3
 800576c:	2b02      	cmp	r3, #2
 800576e:	d907      	bls.n	8005780 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005770:	2303      	movs	r3, #3
 8005772:	e150      	b.n	8005a16 <HAL_RCC_OscConfig+0x4e2>
 8005774:	40023800 	.word	0x40023800
 8005778:	42470000 	.word	0x42470000
 800577c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005780:	4b88      	ldr	r3, [pc, #544]	; (80059a4 <HAL_RCC_OscConfig+0x470>)
 8005782:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005784:	f003 0302 	and.w	r3, r3, #2
 8005788:	2b00      	cmp	r3, #0
 800578a:	d1ea      	bne.n	8005762 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f003 0304 	and.w	r3, r3, #4
 8005794:	2b00      	cmp	r3, #0
 8005796:	f000 8097 	beq.w	80058c8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800579a:	2300      	movs	r3, #0
 800579c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800579e:	4b81      	ldr	r3, [pc, #516]	; (80059a4 <HAL_RCC_OscConfig+0x470>)
 80057a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d10f      	bne.n	80057ca <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80057aa:	2300      	movs	r3, #0
 80057ac:	60bb      	str	r3, [r7, #8]
 80057ae:	4b7d      	ldr	r3, [pc, #500]	; (80059a4 <HAL_RCC_OscConfig+0x470>)
 80057b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057b2:	4a7c      	ldr	r2, [pc, #496]	; (80059a4 <HAL_RCC_OscConfig+0x470>)
 80057b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057b8:	6413      	str	r3, [r2, #64]	; 0x40
 80057ba:	4b7a      	ldr	r3, [pc, #488]	; (80059a4 <HAL_RCC_OscConfig+0x470>)
 80057bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057c2:	60bb      	str	r3, [r7, #8]
 80057c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80057c6:	2301      	movs	r3, #1
 80057c8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057ca:	4b77      	ldr	r3, [pc, #476]	; (80059a8 <HAL_RCC_OscConfig+0x474>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d118      	bne.n	8005808 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80057d6:	4b74      	ldr	r3, [pc, #464]	; (80059a8 <HAL_RCC_OscConfig+0x474>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	4a73      	ldr	r2, [pc, #460]	; (80059a8 <HAL_RCC_OscConfig+0x474>)
 80057dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80057e2:	f7fe fe81 	bl	80044e8 <HAL_GetTick>
 80057e6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057e8:	e008      	b.n	80057fc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057ea:	f7fe fe7d 	bl	80044e8 <HAL_GetTick>
 80057ee:	4602      	mov	r2, r0
 80057f0:	693b      	ldr	r3, [r7, #16]
 80057f2:	1ad3      	subs	r3, r2, r3
 80057f4:	2b02      	cmp	r3, #2
 80057f6:	d901      	bls.n	80057fc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80057f8:	2303      	movs	r3, #3
 80057fa:	e10c      	b.n	8005a16 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057fc:	4b6a      	ldr	r3, [pc, #424]	; (80059a8 <HAL_RCC_OscConfig+0x474>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005804:	2b00      	cmp	r3, #0
 8005806:	d0f0      	beq.n	80057ea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	689b      	ldr	r3, [r3, #8]
 800580c:	2b01      	cmp	r3, #1
 800580e:	d106      	bne.n	800581e <HAL_RCC_OscConfig+0x2ea>
 8005810:	4b64      	ldr	r3, [pc, #400]	; (80059a4 <HAL_RCC_OscConfig+0x470>)
 8005812:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005814:	4a63      	ldr	r2, [pc, #396]	; (80059a4 <HAL_RCC_OscConfig+0x470>)
 8005816:	f043 0301 	orr.w	r3, r3, #1
 800581a:	6713      	str	r3, [r2, #112]	; 0x70
 800581c:	e01c      	b.n	8005858 <HAL_RCC_OscConfig+0x324>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	689b      	ldr	r3, [r3, #8]
 8005822:	2b05      	cmp	r3, #5
 8005824:	d10c      	bne.n	8005840 <HAL_RCC_OscConfig+0x30c>
 8005826:	4b5f      	ldr	r3, [pc, #380]	; (80059a4 <HAL_RCC_OscConfig+0x470>)
 8005828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800582a:	4a5e      	ldr	r2, [pc, #376]	; (80059a4 <HAL_RCC_OscConfig+0x470>)
 800582c:	f043 0304 	orr.w	r3, r3, #4
 8005830:	6713      	str	r3, [r2, #112]	; 0x70
 8005832:	4b5c      	ldr	r3, [pc, #368]	; (80059a4 <HAL_RCC_OscConfig+0x470>)
 8005834:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005836:	4a5b      	ldr	r2, [pc, #364]	; (80059a4 <HAL_RCC_OscConfig+0x470>)
 8005838:	f043 0301 	orr.w	r3, r3, #1
 800583c:	6713      	str	r3, [r2, #112]	; 0x70
 800583e:	e00b      	b.n	8005858 <HAL_RCC_OscConfig+0x324>
 8005840:	4b58      	ldr	r3, [pc, #352]	; (80059a4 <HAL_RCC_OscConfig+0x470>)
 8005842:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005844:	4a57      	ldr	r2, [pc, #348]	; (80059a4 <HAL_RCC_OscConfig+0x470>)
 8005846:	f023 0301 	bic.w	r3, r3, #1
 800584a:	6713      	str	r3, [r2, #112]	; 0x70
 800584c:	4b55      	ldr	r3, [pc, #340]	; (80059a4 <HAL_RCC_OscConfig+0x470>)
 800584e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005850:	4a54      	ldr	r2, [pc, #336]	; (80059a4 <HAL_RCC_OscConfig+0x470>)
 8005852:	f023 0304 	bic.w	r3, r3, #4
 8005856:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	689b      	ldr	r3, [r3, #8]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d015      	beq.n	800588c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005860:	f7fe fe42 	bl	80044e8 <HAL_GetTick>
 8005864:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005866:	e00a      	b.n	800587e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005868:	f7fe fe3e 	bl	80044e8 <HAL_GetTick>
 800586c:	4602      	mov	r2, r0
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	1ad3      	subs	r3, r2, r3
 8005872:	f241 3288 	movw	r2, #5000	; 0x1388
 8005876:	4293      	cmp	r3, r2
 8005878:	d901      	bls.n	800587e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800587a:	2303      	movs	r3, #3
 800587c:	e0cb      	b.n	8005a16 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800587e:	4b49      	ldr	r3, [pc, #292]	; (80059a4 <HAL_RCC_OscConfig+0x470>)
 8005880:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005882:	f003 0302 	and.w	r3, r3, #2
 8005886:	2b00      	cmp	r3, #0
 8005888:	d0ee      	beq.n	8005868 <HAL_RCC_OscConfig+0x334>
 800588a:	e014      	b.n	80058b6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800588c:	f7fe fe2c 	bl	80044e8 <HAL_GetTick>
 8005890:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005892:	e00a      	b.n	80058aa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005894:	f7fe fe28 	bl	80044e8 <HAL_GetTick>
 8005898:	4602      	mov	r2, r0
 800589a:	693b      	ldr	r3, [r7, #16]
 800589c:	1ad3      	subs	r3, r2, r3
 800589e:	f241 3288 	movw	r2, #5000	; 0x1388
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d901      	bls.n	80058aa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80058a6:	2303      	movs	r3, #3
 80058a8:	e0b5      	b.n	8005a16 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80058aa:	4b3e      	ldr	r3, [pc, #248]	; (80059a4 <HAL_RCC_OscConfig+0x470>)
 80058ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058ae:	f003 0302 	and.w	r3, r3, #2
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d1ee      	bne.n	8005894 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80058b6:	7dfb      	ldrb	r3, [r7, #23]
 80058b8:	2b01      	cmp	r3, #1
 80058ba:	d105      	bne.n	80058c8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80058bc:	4b39      	ldr	r3, [pc, #228]	; (80059a4 <HAL_RCC_OscConfig+0x470>)
 80058be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058c0:	4a38      	ldr	r2, [pc, #224]	; (80059a4 <HAL_RCC_OscConfig+0x470>)
 80058c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80058c6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	699b      	ldr	r3, [r3, #24]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	f000 80a1 	beq.w	8005a14 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80058d2:	4b34      	ldr	r3, [pc, #208]	; (80059a4 <HAL_RCC_OscConfig+0x470>)
 80058d4:	689b      	ldr	r3, [r3, #8]
 80058d6:	f003 030c 	and.w	r3, r3, #12
 80058da:	2b08      	cmp	r3, #8
 80058dc:	d05c      	beq.n	8005998 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	699b      	ldr	r3, [r3, #24]
 80058e2:	2b02      	cmp	r3, #2
 80058e4:	d141      	bne.n	800596a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058e6:	4b31      	ldr	r3, [pc, #196]	; (80059ac <HAL_RCC_OscConfig+0x478>)
 80058e8:	2200      	movs	r2, #0
 80058ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058ec:	f7fe fdfc 	bl	80044e8 <HAL_GetTick>
 80058f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058f2:	e008      	b.n	8005906 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058f4:	f7fe fdf8 	bl	80044e8 <HAL_GetTick>
 80058f8:	4602      	mov	r2, r0
 80058fa:	693b      	ldr	r3, [r7, #16]
 80058fc:	1ad3      	subs	r3, r2, r3
 80058fe:	2b02      	cmp	r3, #2
 8005900:	d901      	bls.n	8005906 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005902:	2303      	movs	r3, #3
 8005904:	e087      	b.n	8005a16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005906:	4b27      	ldr	r3, [pc, #156]	; (80059a4 <HAL_RCC_OscConfig+0x470>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800590e:	2b00      	cmp	r3, #0
 8005910:	d1f0      	bne.n	80058f4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	69da      	ldr	r2, [r3, #28]
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6a1b      	ldr	r3, [r3, #32]
 800591a:	431a      	orrs	r2, r3
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005920:	019b      	lsls	r3, r3, #6
 8005922:	431a      	orrs	r2, r3
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005928:	085b      	lsrs	r3, r3, #1
 800592a:	3b01      	subs	r3, #1
 800592c:	041b      	lsls	r3, r3, #16
 800592e:	431a      	orrs	r2, r3
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005934:	061b      	lsls	r3, r3, #24
 8005936:	491b      	ldr	r1, [pc, #108]	; (80059a4 <HAL_RCC_OscConfig+0x470>)
 8005938:	4313      	orrs	r3, r2
 800593a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800593c:	4b1b      	ldr	r3, [pc, #108]	; (80059ac <HAL_RCC_OscConfig+0x478>)
 800593e:	2201      	movs	r2, #1
 8005940:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005942:	f7fe fdd1 	bl	80044e8 <HAL_GetTick>
 8005946:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005948:	e008      	b.n	800595c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800594a:	f7fe fdcd 	bl	80044e8 <HAL_GetTick>
 800594e:	4602      	mov	r2, r0
 8005950:	693b      	ldr	r3, [r7, #16]
 8005952:	1ad3      	subs	r3, r2, r3
 8005954:	2b02      	cmp	r3, #2
 8005956:	d901      	bls.n	800595c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005958:	2303      	movs	r3, #3
 800595a:	e05c      	b.n	8005a16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800595c:	4b11      	ldr	r3, [pc, #68]	; (80059a4 <HAL_RCC_OscConfig+0x470>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005964:	2b00      	cmp	r3, #0
 8005966:	d0f0      	beq.n	800594a <HAL_RCC_OscConfig+0x416>
 8005968:	e054      	b.n	8005a14 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800596a:	4b10      	ldr	r3, [pc, #64]	; (80059ac <HAL_RCC_OscConfig+0x478>)
 800596c:	2200      	movs	r2, #0
 800596e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005970:	f7fe fdba 	bl	80044e8 <HAL_GetTick>
 8005974:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005976:	e008      	b.n	800598a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005978:	f7fe fdb6 	bl	80044e8 <HAL_GetTick>
 800597c:	4602      	mov	r2, r0
 800597e:	693b      	ldr	r3, [r7, #16]
 8005980:	1ad3      	subs	r3, r2, r3
 8005982:	2b02      	cmp	r3, #2
 8005984:	d901      	bls.n	800598a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005986:	2303      	movs	r3, #3
 8005988:	e045      	b.n	8005a16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800598a:	4b06      	ldr	r3, [pc, #24]	; (80059a4 <HAL_RCC_OscConfig+0x470>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005992:	2b00      	cmp	r3, #0
 8005994:	d1f0      	bne.n	8005978 <HAL_RCC_OscConfig+0x444>
 8005996:	e03d      	b.n	8005a14 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	699b      	ldr	r3, [r3, #24]
 800599c:	2b01      	cmp	r3, #1
 800599e:	d107      	bne.n	80059b0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80059a0:	2301      	movs	r3, #1
 80059a2:	e038      	b.n	8005a16 <HAL_RCC_OscConfig+0x4e2>
 80059a4:	40023800 	.word	0x40023800
 80059a8:	40007000 	.word	0x40007000
 80059ac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80059b0:	4b1b      	ldr	r3, [pc, #108]	; (8005a20 <HAL_RCC_OscConfig+0x4ec>)
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	699b      	ldr	r3, [r3, #24]
 80059ba:	2b01      	cmp	r3, #1
 80059bc:	d028      	beq.n	8005a10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80059c8:	429a      	cmp	r2, r3
 80059ca:	d121      	bne.n	8005a10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059d6:	429a      	cmp	r2, r3
 80059d8:	d11a      	bne.n	8005a10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80059da:	68fa      	ldr	r2, [r7, #12]
 80059dc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80059e0:	4013      	ands	r3, r2
 80059e2:	687a      	ldr	r2, [r7, #4]
 80059e4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80059e6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d111      	bne.n	8005a10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059f6:	085b      	lsrs	r3, r3, #1
 80059f8:	3b01      	subs	r3, #1
 80059fa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80059fc:	429a      	cmp	r2, r3
 80059fe:	d107      	bne.n	8005a10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a0a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005a0c:	429a      	cmp	r2, r3
 8005a0e:	d001      	beq.n	8005a14 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005a10:	2301      	movs	r3, #1
 8005a12:	e000      	b.n	8005a16 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005a14:	2300      	movs	r3, #0
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	3718      	adds	r7, #24
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}
 8005a1e:	bf00      	nop
 8005a20:	40023800 	.word	0x40023800

08005a24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b084      	sub	sp, #16
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
 8005a2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d101      	bne.n	8005a38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005a34:	2301      	movs	r3, #1
 8005a36:	e0cc      	b.n	8005bd2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005a38:	4b68      	ldr	r3, [pc, #416]	; (8005bdc <HAL_RCC_ClockConfig+0x1b8>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f003 0307 	and.w	r3, r3, #7
 8005a40:	683a      	ldr	r2, [r7, #0]
 8005a42:	429a      	cmp	r2, r3
 8005a44:	d90c      	bls.n	8005a60 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a46:	4b65      	ldr	r3, [pc, #404]	; (8005bdc <HAL_RCC_ClockConfig+0x1b8>)
 8005a48:	683a      	ldr	r2, [r7, #0]
 8005a4a:	b2d2      	uxtb	r2, r2
 8005a4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a4e:	4b63      	ldr	r3, [pc, #396]	; (8005bdc <HAL_RCC_ClockConfig+0x1b8>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f003 0307 	and.w	r3, r3, #7
 8005a56:	683a      	ldr	r2, [r7, #0]
 8005a58:	429a      	cmp	r2, r3
 8005a5a:	d001      	beq.n	8005a60 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	e0b8      	b.n	8005bd2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f003 0302 	and.w	r3, r3, #2
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d020      	beq.n	8005aae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f003 0304 	and.w	r3, r3, #4
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d005      	beq.n	8005a84 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005a78:	4b59      	ldr	r3, [pc, #356]	; (8005be0 <HAL_RCC_ClockConfig+0x1bc>)
 8005a7a:	689b      	ldr	r3, [r3, #8]
 8005a7c:	4a58      	ldr	r2, [pc, #352]	; (8005be0 <HAL_RCC_ClockConfig+0x1bc>)
 8005a7e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005a82:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f003 0308 	and.w	r3, r3, #8
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d005      	beq.n	8005a9c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005a90:	4b53      	ldr	r3, [pc, #332]	; (8005be0 <HAL_RCC_ClockConfig+0x1bc>)
 8005a92:	689b      	ldr	r3, [r3, #8]
 8005a94:	4a52      	ldr	r2, [pc, #328]	; (8005be0 <HAL_RCC_ClockConfig+0x1bc>)
 8005a96:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005a9a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a9c:	4b50      	ldr	r3, [pc, #320]	; (8005be0 <HAL_RCC_ClockConfig+0x1bc>)
 8005a9e:	689b      	ldr	r3, [r3, #8]
 8005aa0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	689b      	ldr	r3, [r3, #8]
 8005aa8:	494d      	ldr	r1, [pc, #308]	; (8005be0 <HAL_RCC_ClockConfig+0x1bc>)
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f003 0301 	and.w	r3, r3, #1
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d044      	beq.n	8005b44 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	2b01      	cmp	r3, #1
 8005ac0:	d107      	bne.n	8005ad2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ac2:	4b47      	ldr	r3, [pc, #284]	; (8005be0 <HAL_RCC_ClockConfig+0x1bc>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d119      	bne.n	8005b02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ace:	2301      	movs	r3, #1
 8005ad0:	e07f      	b.n	8005bd2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	2b02      	cmp	r3, #2
 8005ad8:	d003      	beq.n	8005ae2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005ade:	2b03      	cmp	r3, #3
 8005ae0:	d107      	bne.n	8005af2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ae2:	4b3f      	ldr	r3, [pc, #252]	; (8005be0 <HAL_RCC_ClockConfig+0x1bc>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d109      	bne.n	8005b02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005aee:	2301      	movs	r3, #1
 8005af0:	e06f      	b.n	8005bd2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005af2:	4b3b      	ldr	r3, [pc, #236]	; (8005be0 <HAL_RCC_ClockConfig+0x1bc>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f003 0302 	and.w	r3, r3, #2
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d101      	bne.n	8005b02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005afe:	2301      	movs	r3, #1
 8005b00:	e067      	b.n	8005bd2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005b02:	4b37      	ldr	r3, [pc, #220]	; (8005be0 <HAL_RCC_ClockConfig+0x1bc>)
 8005b04:	689b      	ldr	r3, [r3, #8]
 8005b06:	f023 0203 	bic.w	r2, r3, #3
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	685b      	ldr	r3, [r3, #4]
 8005b0e:	4934      	ldr	r1, [pc, #208]	; (8005be0 <HAL_RCC_ClockConfig+0x1bc>)
 8005b10:	4313      	orrs	r3, r2
 8005b12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005b14:	f7fe fce8 	bl	80044e8 <HAL_GetTick>
 8005b18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b1a:	e00a      	b.n	8005b32 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b1c:	f7fe fce4 	bl	80044e8 <HAL_GetTick>
 8005b20:	4602      	mov	r2, r0
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	1ad3      	subs	r3, r2, r3
 8005b26:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d901      	bls.n	8005b32 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005b2e:	2303      	movs	r3, #3
 8005b30:	e04f      	b.n	8005bd2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b32:	4b2b      	ldr	r3, [pc, #172]	; (8005be0 <HAL_RCC_ClockConfig+0x1bc>)
 8005b34:	689b      	ldr	r3, [r3, #8]
 8005b36:	f003 020c 	and.w	r2, r3, #12
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	685b      	ldr	r3, [r3, #4]
 8005b3e:	009b      	lsls	r3, r3, #2
 8005b40:	429a      	cmp	r2, r3
 8005b42:	d1eb      	bne.n	8005b1c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005b44:	4b25      	ldr	r3, [pc, #148]	; (8005bdc <HAL_RCC_ClockConfig+0x1b8>)
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f003 0307 	and.w	r3, r3, #7
 8005b4c:	683a      	ldr	r2, [r7, #0]
 8005b4e:	429a      	cmp	r2, r3
 8005b50:	d20c      	bcs.n	8005b6c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b52:	4b22      	ldr	r3, [pc, #136]	; (8005bdc <HAL_RCC_ClockConfig+0x1b8>)
 8005b54:	683a      	ldr	r2, [r7, #0]
 8005b56:	b2d2      	uxtb	r2, r2
 8005b58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b5a:	4b20      	ldr	r3, [pc, #128]	; (8005bdc <HAL_RCC_ClockConfig+0x1b8>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f003 0307 	and.w	r3, r3, #7
 8005b62:	683a      	ldr	r2, [r7, #0]
 8005b64:	429a      	cmp	r2, r3
 8005b66:	d001      	beq.n	8005b6c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005b68:	2301      	movs	r3, #1
 8005b6a:	e032      	b.n	8005bd2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f003 0304 	and.w	r3, r3, #4
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d008      	beq.n	8005b8a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b78:	4b19      	ldr	r3, [pc, #100]	; (8005be0 <HAL_RCC_ClockConfig+0x1bc>)
 8005b7a:	689b      	ldr	r3, [r3, #8]
 8005b7c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	68db      	ldr	r3, [r3, #12]
 8005b84:	4916      	ldr	r1, [pc, #88]	; (8005be0 <HAL_RCC_ClockConfig+0x1bc>)
 8005b86:	4313      	orrs	r3, r2
 8005b88:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f003 0308 	and.w	r3, r3, #8
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d009      	beq.n	8005baa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005b96:	4b12      	ldr	r3, [pc, #72]	; (8005be0 <HAL_RCC_ClockConfig+0x1bc>)
 8005b98:	689b      	ldr	r3, [r3, #8]
 8005b9a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	691b      	ldr	r3, [r3, #16]
 8005ba2:	00db      	lsls	r3, r3, #3
 8005ba4:	490e      	ldr	r1, [pc, #56]	; (8005be0 <HAL_RCC_ClockConfig+0x1bc>)
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005baa:	f000 f821 	bl	8005bf0 <HAL_RCC_GetSysClockFreq>
 8005bae:	4602      	mov	r2, r0
 8005bb0:	4b0b      	ldr	r3, [pc, #44]	; (8005be0 <HAL_RCC_ClockConfig+0x1bc>)
 8005bb2:	689b      	ldr	r3, [r3, #8]
 8005bb4:	091b      	lsrs	r3, r3, #4
 8005bb6:	f003 030f 	and.w	r3, r3, #15
 8005bba:	490a      	ldr	r1, [pc, #40]	; (8005be4 <HAL_RCC_ClockConfig+0x1c0>)
 8005bbc:	5ccb      	ldrb	r3, [r1, r3]
 8005bbe:	fa22 f303 	lsr.w	r3, r2, r3
 8005bc2:	4a09      	ldr	r2, [pc, #36]	; (8005be8 <HAL_RCC_ClockConfig+0x1c4>)
 8005bc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005bc6:	4b09      	ldr	r3, [pc, #36]	; (8005bec <HAL_RCC_ClockConfig+0x1c8>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4618      	mov	r0, r3
 8005bcc:	f7fe fc48 	bl	8004460 <HAL_InitTick>

  return HAL_OK;
 8005bd0:	2300      	movs	r3, #0
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	3710      	adds	r7, #16
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd80      	pop	{r7, pc}
 8005bda:	bf00      	nop
 8005bdc:	40023c00 	.word	0x40023c00
 8005be0:	40023800 	.word	0x40023800
 8005be4:	0802118c 	.word	0x0802118c
 8005be8:	200000ac 	.word	0x200000ac
 8005bec:	200000b0 	.word	0x200000b0

08005bf0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005bf0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005bf4:	b094      	sub	sp, #80	; 0x50
 8005bf6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	647b      	str	r3, [r7, #68]	; 0x44
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c00:	2300      	movs	r3, #0
 8005c02:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005c04:	2300      	movs	r3, #0
 8005c06:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005c08:	4b79      	ldr	r3, [pc, #484]	; (8005df0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005c0a:	689b      	ldr	r3, [r3, #8]
 8005c0c:	f003 030c 	and.w	r3, r3, #12
 8005c10:	2b08      	cmp	r3, #8
 8005c12:	d00d      	beq.n	8005c30 <HAL_RCC_GetSysClockFreq+0x40>
 8005c14:	2b08      	cmp	r3, #8
 8005c16:	f200 80e1 	bhi.w	8005ddc <HAL_RCC_GetSysClockFreq+0x1ec>
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d002      	beq.n	8005c24 <HAL_RCC_GetSysClockFreq+0x34>
 8005c1e:	2b04      	cmp	r3, #4
 8005c20:	d003      	beq.n	8005c2a <HAL_RCC_GetSysClockFreq+0x3a>
 8005c22:	e0db      	b.n	8005ddc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005c24:	4b73      	ldr	r3, [pc, #460]	; (8005df4 <HAL_RCC_GetSysClockFreq+0x204>)
 8005c26:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005c28:	e0db      	b.n	8005de2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005c2a:	4b73      	ldr	r3, [pc, #460]	; (8005df8 <HAL_RCC_GetSysClockFreq+0x208>)
 8005c2c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005c2e:	e0d8      	b.n	8005de2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005c30:	4b6f      	ldr	r3, [pc, #444]	; (8005df0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005c32:	685b      	ldr	r3, [r3, #4]
 8005c34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005c38:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005c3a:	4b6d      	ldr	r3, [pc, #436]	; (8005df0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d063      	beq.n	8005d0e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c46:	4b6a      	ldr	r3, [pc, #424]	; (8005df0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	099b      	lsrs	r3, r3, #6
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005c50:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005c52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c58:	633b      	str	r3, [r7, #48]	; 0x30
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	637b      	str	r3, [r7, #52]	; 0x34
 8005c5e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005c62:	4622      	mov	r2, r4
 8005c64:	462b      	mov	r3, r5
 8005c66:	f04f 0000 	mov.w	r0, #0
 8005c6a:	f04f 0100 	mov.w	r1, #0
 8005c6e:	0159      	lsls	r1, r3, #5
 8005c70:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005c74:	0150      	lsls	r0, r2, #5
 8005c76:	4602      	mov	r2, r0
 8005c78:	460b      	mov	r3, r1
 8005c7a:	4621      	mov	r1, r4
 8005c7c:	1a51      	subs	r1, r2, r1
 8005c7e:	6139      	str	r1, [r7, #16]
 8005c80:	4629      	mov	r1, r5
 8005c82:	eb63 0301 	sbc.w	r3, r3, r1
 8005c86:	617b      	str	r3, [r7, #20]
 8005c88:	f04f 0200 	mov.w	r2, #0
 8005c8c:	f04f 0300 	mov.w	r3, #0
 8005c90:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005c94:	4659      	mov	r1, fp
 8005c96:	018b      	lsls	r3, r1, #6
 8005c98:	4651      	mov	r1, sl
 8005c9a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005c9e:	4651      	mov	r1, sl
 8005ca0:	018a      	lsls	r2, r1, #6
 8005ca2:	4651      	mov	r1, sl
 8005ca4:	ebb2 0801 	subs.w	r8, r2, r1
 8005ca8:	4659      	mov	r1, fp
 8005caa:	eb63 0901 	sbc.w	r9, r3, r1
 8005cae:	f04f 0200 	mov.w	r2, #0
 8005cb2:	f04f 0300 	mov.w	r3, #0
 8005cb6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005cba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005cbe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005cc2:	4690      	mov	r8, r2
 8005cc4:	4699      	mov	r9, r3
 8005cc6:	4623      	mov	r3, r4
 8005cc8:	eb18 0303 	adds.w	r3, r8, r3
 8005ccc:	60bb      	str	r3, [r7, #8]
 8005cce:	462b      	mov	r3, r5
 8005cd0:	eb49 0303 	adc.w	r3, r9, r3
 8005cd4:	60fb      	str	r3, [r7, #12]
 8005cd6:	f04f 0200 	mov.w	r2, #0
 8005cda:	f04f 0300 	mov.w	r3, #0
 8005cde:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005ce2:	4629      	mov	r1, r5
 8005ce4:	024b      	lsls	r3, r1, #9
 8005ce6:	4621      	mov	r1, r4
 8005ce8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005cec:	4621      	mov	r1, r4
 8005cee:	024a      	lsls	r2, r1, #9
 8005cf0:	4610      	mov	r0, r2
 8005cf2:	4619      	mov	r1, r3
 8005cf4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	62bb      	str	r3, [r7, #40]	; 0x28
 8005cfa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005cfc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005d00:	f7fa ff6a 	bl	8000bd8 <__aeabi_uldivmod>
 8005d04:	4602      	mov	r2, r0
 8005d06:	460b      	mov	r3, r1
 8005d08:	4613      	mov	r3, r2
 8005d0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d0c:	e058      	b.n	8005dc0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d0e:	4b38      	ldr	r3, [pc, #224]	; (8005df0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	099b      	lsrs	r3, r3, #6
 8005d14:	2200      	movs	r2, #0
 8005d16:	4618      	mov	r0, r3
 8005d18:	4611      	mov	r1, r2
 8005d1a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005d1e:	623b      	str	r3, [r7, #32]
 8005d20:	2300      	movs	r3, #0
 8005d22:	627b      	str	r3, [r7, #36]	; 0x24
 8005d24:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005d28:	4642      	mov	r2, r8
 8005d2a:	464b      	mov	r3, r9
 8005d2c:	f04f 0000 	mov.w	r0, #0
 8005d30:	f04f 0100 	mov.w	r1, #0
 8005d34:	0159      	lsls	r1, r3, #5
 8005d36:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005d3a:	0150      	lsls	r0, r2, #5
 8005d3c:	4602      	mov	r2, r0
 8005d3e:	460b      	mov	r3, r1
 8005d40:	4641      	mov	r1, r8
 8005d42:	ebb2 0a01 	subs.w	sl, r2, r1
 8005d46:	4649      	mov	r1, r9
 8005d48:	eb63 0b01 	sbc.w	fp, r3, r1
 8005d4c:	f04f 0200 	mov.w	r2, #0
 8005d50:	f04f 0300 	mov.w	r3, #0
 8005d54:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005d58:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005d5c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005d60:	ebb2 040a 	subs.w	r4, r2, sl
 8005d64:	eb63 050b 	sbc.w	r5, r3, fp
 8005d68:	f04f 0200 	mov.w	r2, #0
 8005d6c:	f04f 0300 	mov.w	r3, #0
 8005d70:	00eb      	lsls	r3, r5, #3
 8005d72:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005d76:	00e2      	lsls	r2, r4, #3
 8005d78:	4614      	mov	r4, r2
 8005d7a:	461d      	mov	r5, r3
 8005d7c:	4643      	mov	r3, r8
 8005d7e:	18e3      	adds	r3, r4, r3
 8005d80:	603b      	str	r3, [r7, #0]
 8005d82:	464b      	mov	r3, r9
 8005d84:	eb45 0303 	adc.w	r3, r5, r3
 8005d88:	607b      	str	r3, [r7, #4]
 8005d8a:	f04f 0200 	mov.w	r2, #0
 8005d8e:	f04f 0300 	mov.w	r3, #0
 8005d92:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005d96:	4629      	mov	r1, r5
 8005d98:	028b      	lsls	r3, r1, #10
 8005d9a:	4621      	mov	r1, r4
 8005d9c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005da0:	4621      	mov	r1, r4
 8005da2:	028a      	lsls	r2, r1, #10
 8005da4:	4610      	mov	r0, r2
 8005da6:	4619      	mov	r1, r3
 8005da8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005daa:	2200      	movs	r2, #0
 8005dac:	61bb      	str	r3, [r7, #24]
 8005dae:	61fa      	str	r2, [r7, #28]
 8005db0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005db4:	f7fa ff10 	bl	8000bd8 <__aeabi_uldivmod>
 8005db8:	4602      	mov	r2, r0
 8005dba:	460b      	mov	r3, r1
 8005dbc:	4613      	mov	r3, r2
 8005dbe:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005dc0:	4b0b      	ldr	r3, [pc, #44]	; (8005df0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	0c1b      	lsrs	r3, r3, #16
 8005dc6:	f003 0303 	and.w	r3, r3, #3
 8005dca:	3301      	adds	r3, #1
 8005dcc:	005b      	lsls	r3, r3, #1
 8005dce:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005dd0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005dd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005dd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dd8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005dda:	e002      	b.n	8005de2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005ddc:	4b05      	ldr	r3, [pc, #20]	; (8005df4 <HAL_RCC_GetSysClockFreq+0x204>)
 8005dde:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005de0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005de2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005de4:	4618      	mov	r0, r3
 8005de6:	3750      	adds	r7, #80	; 0x50
 8005de8:	46bd      	mov	sp, r7
 8005dea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005dee:	bf00      	nop
 8005df0:	40023800 	.word	0x40023800
 8005df4:	00f42400 	.word	0x00f42400
 8005df8:	007a1200 	.word	0x007a1200

08005dfc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005e00:	4b03      	ldr	r3, [pc, #12]	; (8005e10 <HAL_RCC_GetHCLKFreq+0x14>)
 8005e02:	681b      	ldr	r3, [r3, #0]
}
 8005e04:	4618      	mov	r0, r3
 8005e06:	46bd      	mov	sp, r7
 8005e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0c:	4770      	bx	lr
 8005e0e:	bf00      	nop
 8005e10:	200000ac 	.word	0x200000ac

08005e14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005e18:	f7ff fff0 	bl	8005dfc <HAL_RCC_GetHCLKFreq>
 8005e1c:	4602      	mov	r2, r0
 8005e1e:	4b05      	ldr	r3, [pc, #20]	; (8005e34 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005e20:	689b      	ldr	r3, [r3, #8]
 8005e22:	0a9b      	lsrs	r3, r3, #10
 8005e24:	f003 0307 	and.w	r3, r3, #7
 8005e28:	4903      	ldr	r1, [pc, #12]	; (8005e38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005e2a:	5ccb      	ldrb	r3, [r1, r3]
 8005e2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e30:	4618      	mov	r0, r3
 8005e32:	bd80      	pop	{r7, pc}
 8005e34:	40023800 	.word	0x40023800
 8005e38:	0802119c 	.word	0x0802119c

08005e3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005e40:	f7ff ffdc 	bl	8005dfc <HAL_RCC_GetHCLKFreq>
 8005e44:	4602      	mov	r2, r0
 8005e46:	4b05      	ldr	r3, [pc, #20]	; (8005e5c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005e48:	689b      	ldr	r3, [r3, #8]
 8005e4a:	0b5b      	lsrs	r3, r3, #13
 8005e4c:	f003 0307 	and.w	r3, r3, #7
 8005e50:	4903      	ldr	r1, [pc, #12]	; (8005e60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005e52:	5ccb      	ldrb	r3, [r1, r3]
 8005e54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e58:	4618      	mov	r0, r3
 8005e5a:	bd80      	pop	{r7, pc}
 8005e5c:	40023800 	.word	0x40023800
 8005e60:	0802119c 	.word	0x0802119c

08005e64 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b082      	sub	sp, #8
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d101      	bne.n	8005e76 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005e72:	2301      	movs	r3, #1
 8005e74:	e07b      	b.n	8005f6e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d108      	bne.n	8005e90 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	685b      	ldr	r3, [r3, #4]
 8005e82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e86:	d009      	beq.n	8005e9c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	61da      	str	r2, [r3, #28]
 8005e8e:	e005      	b.n	8005e9c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2200      	movs	r2, #0
 8005e94:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005ea8:	b2db      	uxtb	r3, r3
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d106      	bne.n	8005ebc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005eb6:	6878      	ldr	r0, [r7, #4]
 8005eb8:	f7fd ff16 	bl	8003ce8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2202      	movs	r2, #2
 8005ec0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	681a      	ldr	r2, [r3, #0]
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ed2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	689b      	ldr	r3, [r3, #8]
 8005ee0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005ee4:	431a      	orrs	r2, r3
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	68db      	ldr	r3, [r3, #12]
 8005eea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005eee:	431a      	orrs	r2, r3
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	691b      	ldr	r3, [r3, #16]
 8005ef4:	f003 0302 	and.w	r3, r3, #2
 8005ef8:	431a      	orrs	r2, r3
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	695b      	ldr	r3, [r3, #20]
 8005efe:	f003 0301 	and.w	r3, r3, #1
 8005f02:	431a      	orrs	r2, r3
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	699b      	ldr	r3, [r3, #24]
 8005f08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f0c:	431a      	orrs	r2, r3
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	69db      	ldr	r3, [r3, #28]
 8005f12:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005f16:	431a      	orrs	r2, r3
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6a1b      	ldr	r3, [r3, #32]
 8005f1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f20:	ea42 0103 	orr.w	r1, r2, r3
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f28:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	430a      	orrs	r2, r1
 8005f32:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	699b      	ldr	r3, [r3, #24]
 8005f38:	0c1b      	lsrs	r3, r3, #16
 8005f3a:	f003 0104 	and.w	r1, r3, #4
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f42:	f003 0210 	and.w	r2, r3, #16
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	430a      	orrs	r2, r1
 8005f4c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	69da      	ldr	r2, [r3, #28]
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005f5c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2200      	movs	r2, #0
 8005f62:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2201      	movs	r2, #1
 8005f68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005f6c:	2300      	movs	r3, #0
}
 8005f6e:	4618      	mov	r0, r3
 8005f70:	3708      	adds	r7, #8
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bd80      	pop	{r7, pc}

08005f76 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8005f76:	b580      	push	{r7, lr}
 8005f78:	b082      	sub	sp, #8
 8005f7a:	af00      	add	r7, sp, #0
 8005f7c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d101      	bne.n	8005f88 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8005f84:	2301      	movs	r3, #1
 8005f86:	e01a      	b.n	8005fbe <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2202      	movs	r2, #2
 8005f8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	681a      	ldr	r2, [r3, #0]
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f9e:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8005fa0:	6878      	ldr	r0, [r7, #4]
 8005fa2:	f7fd ffe7 	bl	8003f74 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005fbc:	2300      	movs	r3, #0
}
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	3708      	adds	r7, #8
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bd80      	pop	{r7, pc}

08005fc6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005fc6:	b580      	push	{r7, lr}
 8005fc8:	b088      	sub	sp, #32
 8005fca:	af00      	add	r7, sp, #0
 8005fcc:	60f8      	str	r0, [r7, #12]
 8005fce:	60b9      	str	r1, [r7, #8]
 8005fd0:	603b      	str	r3, [r7, #0]
 8005fd2:	4613      	mov	r3, r2
 8005fd4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005fe0:	2b01      	cmp	r3, #1
 8005fe2:	d101      	bne.n	8005fe8 <HAL_SPI_Transmit+0x22>
 8005fe4:	2302      	movs	r3, #2
 8005fe6:	e126      	b.n	8006236 <HAL_SPI_Transmit+0x270>
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	2201      	movs	r2, #1
 8005fec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005ff0:	f7fe fa7a 	bl	80044e8 <HAL_GetTick>
 8005ff4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005ff6:	88fb      	ldrh	r3, [r7, #6]
 8005ff8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006000:	b2db      	uxtb	r3, r3
 8006002:	2b01      	cmp	r3, #1
 8006004:	d002      	beq.n	800600c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006006:	2302      	movs	r3, #2
 8006008:	77fb      	strb	r3, [r7, #31]
    goto error;
 800600a:	e10b      	b.n	8006224 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d002      	beq.n	8006018 <HAL_SPI_Transmit+0x52>
 8006012:	88fb      	ldrh	r3, [r7, #6]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d102      	bne.n	800601e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006018:	2301      	movs	r3, #1
 800601a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800601c:	e102      	b.n	8006224 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	2203      	movs	r2, #3
 8006022:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	2200      	movs	r2, #0
 800602a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	68ba      	ldr	r2, [r7, #8]
 8006030:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	88fa      	ldrh	r2, [r7, #6]
 8006036:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	88fa      	ldrh	r2, [r7, #6]
 800603c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	2200      	movs	r2, #0
 8006042:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	2200      	movs	r2, #0
 8006048:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	2200      	movs	r2, #0
 800604e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	2200      	movs	r2, #0
 8006054:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	2200      	movs	r2, #0
 800605a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	689b      	ldr	r3, [r3, #8]
 8006060:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006064:	d10f      	bne.n	8006086 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	681a      	ldr	r2, [r3, #0]
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006074:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	681a      	ldr	r2, [r3, #0]
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006084:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006090:	2b40      	cmp	r3, #64	; 0x40
 8006092:	d007      	beq.n	80060a4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	681a      	ldr	r2, [r3, #0]
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80060a2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	68db      	ldr	r3, [r3, #12]
 80060a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060ac:	d14b      	bne.n	8006146 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	685b      	ldr	r3, [r3, #4]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d002      	beq.n	80060bc <HAL_SPI_Transmit+0xf6>
 80060b6:	8afb      	ldrh	r3, [r7, #22]
 80060b8:	2b01      	cmp	r3, #1
 80060ba:	d13e      	bne.n	800613a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060c0:	881a      	ldrh	r2, [r3, #0]
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060cc:	1c9a      	adds	r2, r3, #2
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80060d6:	b29b      	uxth	r3, r3
 80060d8:	3b01      	subs	r3, #1
 80060da:	b29a      	uxth	r2, r3
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80060e0:	e02b      	b.n	800613a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	689b      	ldr	r3, [r3, #8]
 80060e8:	f003 0302 	and.w	r3, r3, #2
 80060ec:	2b02      	cmp	r3, #2
 80060ee:	d112      	bne.n	8006116 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060f4:	881a      	ldrh	r2, [r3, #0]
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006100:	1c9a      	adds	r2, r3, #2
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800610a:	b29b      	uxth	r3, r3
 800610c:	3b01      	subs	r3, #1
 800610e:	b29a      	uxth	r2, r3
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	86da      	strh	r2, [r3, #54]	; 0x36
 8006114:	e011      	b.n	800613a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006116:	f7fe f9e7 	bl	80044e8 <HAL_GetTick>
 800611a:	4602      	mov	r2, r0
 800611c:	69bb      	ldr	r3, [r7, #24]
 800611e:	1ad3      	subs	r3, r2, r3
 8006120:	683a      	ldr	r2, [r7, #0]
 8006122:	429a      	cmp	r2, r3
 8006124:	d803      	bhi.n	800612e <HAL_SPI_Transmit+0x168>
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	f1b3 3fff 	cmp.w	r3, #4294967295
 800612c:	d102      	bne.n	8006134 <HAL_SPI_Transmit+0x16e>
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d102      	bne.n	800613a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006134:	2303      	movs	r3, #3
 8006136:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006138:	e074      	b.n	8006224 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800613e:	b29b      	uxth	r3, r3
 8006140:	2b00      	cmp	r3, #0
 8006142:	d1ce      	bne.n	80060e2 <HAL_SPI_Transmit+0x11c>
 8006144:	e04c      	b.n	80061e0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	685b      	ldr	r3, [r3, #4]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d002      	beq.n	8006154 <HAL_SPI_Transmit+0x18e>
 800614e:	8afb      	ldrh	r3, [r7, #22]
 8006150:	2b01      	cmp	r3, #1
 8006152:	d140      	bne.n	80061d6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	330c      	adds	r3, #12
 800615e:	7812      	ldrb	r2, [r2, #0]
 8006160:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006166:	1c5a      	adds	r2, r3, #1
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006170:	b29b      	uxth	r3, r3
 8006172:	3b01      	subs	r3, #1
 8006174:	b29a      	uxth	r2, r3
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800617a:	e02c      	b.n	80061d6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	689b      	ldr	r3, [r3, #8]
 8006182:	f003 0302 	and.w	r3, r3, #2
 8006186:	2b02      	cmp	r3, #2
 8006188:	d113      	bne.n	80061b2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	330c      	adds	r3, #12
 8006194:	7812      	ldrb	r2, [r2, #0]
 8006196:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800619c:	1c5a      	adds	r2, r3, #1
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061a6:	b29b      	uxth	r3, r3
 80061a8:	3b01      	subs	r3, #1
 80061aa:	b29a      	uxth	r2, r3
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	86da      	strh	r2, [r3, #54]	; 0x36
 80061b0:	e011      	b.n	80061d6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80061b2:	f7fe f999 	bl	80044e8 <HAL_GetTick>
 80061b6:	4602      	mov	r2, r0
 80061b8:	69bb      	ldr	r3, [r7, #24]
 80061ba:	1ad3      	subs	r3, r2, r3
 80061bc:	683a      	ldr	r2, [r7, #0]
 80061be:	429a      	cmp	r2, r3
 80061c0:	d803      	bhi.n	80061ca <HAL_SPI_Transmit+0x204>
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061c8:	d102      	bne.n	80061d0 <HAL_SPI_Transmit+0x20a>
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d102      	bne.n	80061d6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80061d0:	2303      	movs	r3, #3
 80061d2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80061d4:	e026      	b.n	8006224 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061da:	b29b      	uxth	r3, r3
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d1cd      	bne.n	800617c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80061e0:	69ba      	ldr	r2, [r7, #24]
 80061e2:	6839      	ldr	r1, [r7, #0]
 80061e4:	68f8      	ldr	r0, [r7, #12]
 80061e6:	f000 fe13 	bl	8006e10 <SPI_EndRxTxTransaction>
 80061ea:	4603      	mov	r3, r0
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d002      	beq.n	80061f6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	2220      	movs	r2, #32
 80061f4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	689b      	ldr	r3, [r3, #8]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d10a      	bne.n	8006214 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80061fe:	2300      	movs	r3, #0
 8006200:	613b      	str	r3, [r7, #16]
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	68db      	ldr	r3, [r3, #12]
 8006208:	613b      	str	r3, [r7, #16]
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	689b      	ldr	r3, [r3, #8]
 8006210:	613b      	str	r3, [r7, #16]
 8006212:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006218:	2b00      	cmp	r3, #0
 800621a:	d002      	beq.n	8006222 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800621c:	2301      	movs	r3, #1
 800621e:	77fb      	strb	r3, [r7, #31]
 8006220:	e000      	b.n	8006224 <HAL_SPI_Transmit+0x25e>
  }

error:
 8006222:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	2201      	movs	r2, #1
 8006228:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	2200      	movs	r2, #0
 8006230:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006234:	7ffb      	ldrb	r3, [r7, #31]
}
 8006236:	4618      	mov	r0, r3
 8006238:	3720      	adds	r7, #32
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}
	...

08006240 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b086      	sub	sp, #24
 8006244:	af00      	add	r7, sp, #0
 8006246:	60f8      	str	r0, [r7, #12]
 8006248:	60b9      	str	r1, [r7, #8]
 800624a:	4613      	mov	r3, r2
 800624c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800624e:	2300      	movs	r3, #0
 8006250:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006258:	2b01      	cmp	r3, #1
 800625a:	d101      	bne.n	8006260 <HAL_SPI_Transmit_DMA+0x20>
 800625c:	2302      	movs	r3, #2
 800625e:	e09b      	b.n	8006398 <HAL_SPI_Transmit_DMA+0x158>
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	2201      	movs	r2, #1
 8006264:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800626e:	b2db      	uxtb	r3, r3
 8006270:	2b01      	cmp	r3, #1
 8006272:	d002      	beq.n	800627a <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8006274:	2302      	movs	r3, #2
 8006276:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006278:	e089      	b.n	800638e <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d002      	beq.n	8006286 <HAL_SPI_Transmit_DMA+0x46>
 8006280:	88fb      	ldrh	r3, [r7, #6]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d102      	bne.n	800628c <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8006286:	2301      	movs	r3, #1
 8006288:	75fb      	strb	r3, [r7, #23]
    goto error;
 800628a:	e080      	b.n	800638e <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	2203      	movs	r2, #3
 8006290:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	2200      	movs	r2, #0
 8006298:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	68ba      	ldr	r2, [r7, #8]
 800629e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	88fa      	ldrh	r2, [r7, #6]
 80062a4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	88fa      	ldrh	r2, [r7, #6]
 80062aa:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	2200      	movs	r2, #0
 80062b0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2200      	movs	r2, #0
 80062b6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	2200      	movs	r2, #0
 80062bc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	2200      	movs	r2, #0
 80062c2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	2200      	movs	r2, #0
 80062c8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	689b      	ldr	r3, [r3, #8]
 80062ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062d2:	d10f      	bne.n	80062f4 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	681a      	ldr	r2, [r3, #0]
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062e2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	681a      	ldr	r2, [r3, #0]
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80062f2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80062f8:	4a29      	ldr	r2, [pc, #164]	; (80063a0 <HAL_SPI_Transmit_DMA+0x160>)
 80062fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006300:	4a28      	ldr	r2, [pc, #160]	; (80063a4 <HAL_SPI_Transmit_DMA+0x164>)
 8006302:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006308:	4a27      	ldr	r2, [pc, #156]	; (80063a8 <HAL_SPI_Transmit_DMA+0x168>)
 800630a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006310:	2200      	movs	r2, #0
 8006312:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800631c:	4619      	mov	r1, r3
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	330c      	adds	r3, #12
 8006324:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800632a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800632c:	f7fe fb78 	bl	8004a20 <HAL_DMA_Start_IT>
 8006330:	4603      	mov	r3, r0
 8006332:	2b00      	cmp	r3, #0
 8006334:	d00c      	beq.n	8006350 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800633a:	f043 0210 	orr.w	r2, r3, #16
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8006342:	2301      	movs	r3, #1
 8006344:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	2201      	movs	r2, #1
 800634a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800634e:	e01e      	b.n	800638e <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800635a:	2b40      	cmp	r3, #64	; 0x40
 800635c:	d007      	beq.n	800636e <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	681a      	ldr	r2, [r3, #0]
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800636c:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	685a      	ldr	r2, [r3, #4]
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f042 0220 	orr.w	r2, r2, #32
 800637c:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	685a      	ldr	r2, [r3, #4]
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f042 0202 	orr.w	r2, r2, #2
 800638c:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	2200      	movs	r2, #0
 8006392:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006396:	7dfb      	ldrb	r3, [r7, #23]
}
 8006398:	4618      	mov	r0, r3
 800639a:	3718      	adds	r7, #24
 800639c:	46bd      	mov	sp, r7
 800639e:	bd80      	pop	{r7, pc}
 80063a0:	08006b79 	.word	0x08006b79
 80063a4:	08006999 	.word	0x08006999
 80063a8:	08006bcd 	.word	0x08006bcd

080063ac <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b086      	sub	sp, #24
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	60f8      	str	r0, [r7, #12]
 80063b4:	60b9      	str	r1, [r7, #8]
 80063b6:	4613      	mov	r3, r2
 80063b8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80063ba:	2300      	movs	r3, #0
 80063bc:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	689b      	ldr	r3, [r3, #8]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d110      	bne.n	80063e8 <HAL_SPI_Receive_DMA+0x3c>
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	685b      	ldr	r3, [r3, #4]
 80063ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80063ce:	d10b      	bne.n	80063e8 <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	2204      	movs	r2, #4
 80063d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 80063d8:	88fb      	ldrh	r3, [r7, #6]
 80063da:	68ba      	ldr	r2, [r7, #8]
 80063dc:	68b9      	ldr	r1, [r7, #8]
 80063de:	68f8      	ldr	r0, [r7, #12]
 80063e0:	f000 f8a6 	bl	8006530 <HAL_SPI_TransmitReceive_DMA>
 80063e4:	4603      	mov	r3, r0
 80063e6:	e09b      	b.n	8006520 <HAL_SPI_Receive_DMA+0x174>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80063ee:	2b01      	cmp	r3, #1
 80063f0:	d101      	bne.n	80063f6 <HAL_SPI_Receive_DMA+0x4a>
 80063f2:	2302      	movs	r3, #2
 80063f4:	e094      	b.n	8006520 <HAL_SPI_Receive_DMA+0x174>
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	2201      	movs	r2, #1
 80063fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006404:	b2db      	uxtb	r3, r3
 8006406:	2b01      	cmp	r3, #1
 8006408:	d002      	beq.n	8006410 <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 800640a:	2302      	movs	r3, #2
 800640c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800640e:	e082      	b.n	8006516 <HAL_SPI_Receive_DMA+0x16a>
  }

  if ((pData == NULL) || (Size == 0U))
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d002      	beq.n	800641c <HAL_SPI_Receive_DMA+0x70>
 8006416:	88fb      	ldrh	r3, [r7, #6]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d102      	bne.n	8006422 <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 800641c:	2301      	movs	r3, #1
 800641e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006420:	e079      	b.n	8006516 <HAL_SPI_Receive_DMA+0x16a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	2204      	movs	r2, #4
 8006426:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	2200      	movs	r2, #0
 800642e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	68ba      	ldr	r2, [r7, #8]
 8006434:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	88fa      	ldrh	r2, [r7, #6]
 800643a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	88fa      	ldrh	r2, [r7, #6]
 8006440:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	2200      	movs	r2, #0
 8006446:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	2200      	movs	r2, #0
 800644c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->TxXferSize  = 0U;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	2200      	movs	r2, #0
 8006452:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	2200      	movs	r2, #0
 8006458:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	689b      	ldr	r3, [r3, #8]
 800645e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006462:	d10f      	bne.n	8006484 <HAL_SPI_Receive_DMA+0xd8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	681a      	ldr	r2, [r3, #0]
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006472:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	681a      	ldr	r2, [r3, #0]
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006482:	601a      	str	r2, [r3, #0]

//  /* Set the SPI RxDMA Half transfer complete callback */
//  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006488:	4a27      	ldr	r2, [pc, #156]	; (8006528 <HAL_SPI_Receive_DMA+0x17c>)
 800648a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006490:	4a26      	ldr	r2, [pc, #152]	; (800652c <HAL_SPI_Receive_DMA+0x180>)
 8006492:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006498:	2200      	movs	r2, #0
 800649a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	330c      	adds	r3, #12
 80064a6:	4619      	mov	r1, r3
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064ac:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064b2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80064b4:	f7fe fab4 	bl	8004a20 <HAL_DMA_Start_IT>
 80064b8:	4603      	mov	r3, r0
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d00c      	beq.n	80064d8 <HAL_SPI_Receive_DMA+0x12c>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064c2:	f043 0210 	orr.w	r2, r3, #16
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80064ca:	2301      	movs	r3, #1
 80064cc:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	2201      	movs	r2, #1
 80064d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 80064d6:	e01e      	b.n	8006516 <HAL_SPI_Receive_DMA+0x16a>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064e2:	2b40      	cmp	r3, #64	; 0x40
 80064e4:	d007      	beq.n	80064f6 <HAL_SPI_Receive_DMA+0x14a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	681a      	ldr	r2, [r3, #0]
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80064f4:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	685a      	ldr	r2, [r3, #4]
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f042 0220 	orr.w	r2, r2, #32
 8006504:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	685a      	ldr	r2, [r3, #4]
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f042 0201 	orr.w	r2, r2, #1
 8006514:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	2200      	movs	r2, #0
 800651a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800651e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006520:	4618      	mov	r0, r3
 8006522:	3718      	adds	r7, #24
 8006524:	46bd      	mov	sp, r7
 8006526:	bd80      	pop	{r7, pc}
 8006528:	08006a41 	.word	0x08006a41
 800652c:	08006bcd 	.word	0x08006bcd

08006530 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b086      	sub	sp, #24
 8006534:	af00      	add	r7, sp, #0
 8006536:	60f8      	str	r0, [r7, #12]
 8006538:	60b9      	str	r1, [r7, #8]
 800653a:	607a      	str	r2, [r7, #4]
 800653c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800653e:	2300      	movs	r3, #0
 8006540:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006548:	2b01      	cmp	r3, #1
 800654a:	d101      	bne.n	8006550 <HAL_SPI_TransmitReceive_DMA+0x20>
 800654c:	2302      	movs	r3, #2
 800654e:	e0e3      	b.n	8006718 <HAL_SPI_TransmitReceive_DMA+0x1e8>
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	2201      	movs	r2, #1
 8006554:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800655e:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	685b      	ldr	r3, [r3, #4]
 8006564:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8006566:	7dbb      	ldrb	r3, [r7, #22]
 8006568:	2b01      	cmp	r3, #1
 800656a:	d00d      	beq.n	8006588 <HAL_SPI_TransmitReceive_DMA+0x58>
 800656c:	693b      	ldr	r3, [r7, #16]
 800656e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006572:	d106      	bne.n	8006582 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	689b      	ldr	r3, [r3, #8]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d102      	bne.n	8006582 <HAL_SPI_TransmitReceive_DMA+0x52>
 800657c:	7dbb      	ldrb	r3, [r7, #22]
 800657e:	2b04      	cmp	r3, #4
 8006580:	d002      	beq.n	8006588 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8006582:	2302      	movs	r3, #2
 8006584:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006586:	e0c2      	b.n	800670e <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d005      	beq.n	800659a <HAL_SPI_TransmitReceive_DMA+0x6a>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d002      	beq.n	800659a <HAL_SPI_TransmitReceive_DMA+0x6a>
 8006594:	887b      	ldrh	r3, [r7, #2]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d102      	bne.n	80065a0 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 800659a:	2301      	movs	r3, #1
 800659c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800659e:	e0b6      	b.n	800670e <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80065a6:	b2db      	uxtb	r3, r3
 80065a8:	2b04      	cmp	r3, #4
 80065aa:	d003      	beq.n	80065b4 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	2205      	movs	r2, #5
 80065b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	2200      	movs	r2, #0
 80065b8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	68ba      	ldr	r2, [r7, #8]
 80065be:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	887a      	ldrh	r2, [r7, #2]
 80065c4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	887a      	ldrh	r2, [r7, #2]
 80065ca:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	687a      	ldr	r2, [r7, #4]
 80065d0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	887a      	ldrh	r2, [r7, #2]
 80065d6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	887a      	ldrh	r2, [r7, #2]
 80065dc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	2200      	movs	r2, #0
 80065e2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	2200      	movs	r2, #0
 80065e8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80065f0:	b2db      	uxtb	r3, r3
 80065f2:	2b04      	cmp	r3, #4
 80065f4:	d108      	bne.n	8006608 <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065fa:	4a49      	ldr	r2, [pc, #292]	; (8006720 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 80065fc:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006602:	4a48      	ldr	r2, [pc, #288]	; (8006724 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 8006604:	63da      	str	r2, [r3, #60]	; 0x3c
 8006606:	e007      	b.n	8006618 <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800660c:	4a46      	ldr	r2, [pc, #280]	; (8006728 <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 800660e:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006614:	4a45      	ldr	r2, [pc, #276]	; (800672c <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 8006616:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800661c:	4a44      	ldr	r2, [pc, #272]	; (8006730 <HAL_SPI_TransmitReceive_DMA+0x200>)
 800661e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006624:	2200      	movs	r2, #0
 8006626:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	330c      	adds	r3, #12
 8006632:	4619      	mov	r1, r3
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006638:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800663e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8006640:	f7fe f9ee 	bl	8004a20 <HAL_DMA_Start_IT>
 8006644:	4603      	mov	r3, r0
 8006646:	2b00      	cmp	r3, #0
 8006648:	d00c      	beq.n	8006664 <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800664e:	f043 0210 	orr.w	r2, r3, #16
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8006656:	2301      	movs	r3, #1
 8006658:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	2201      	movs	r2, #1
 800665e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8006662:	e054      	b.n	800670e <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	685a      	ldr	r2, [r3, #4]
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f042 0201 	orr.w	r2, r2, #1
 8006672:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006678:	2200      	movs	r2, #0
 800667a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006680:	2200      	movs	r2, #0
 8006682:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006688:	2200      	movs	r2, #0
 800668a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006690:	2200      	movs	r2, #0
 8006692:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800669c:	4619      	mov	r1, r3
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	330c      	adds	r3, #12
 80066a4:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80066aa:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80066ac:	f7fe f9b8 	bl	8004a20 <HAL_DMA_Start_IT>
 80066b0:	4603      	mov	r3, r0
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d00c      	beq.n	80066d0 <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066ba:	f043 0210 	orr.w	r2, r3, #16
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80066c2:	2301      	movs	r3, #1
 80066c4:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	2201      	movs	r2, #1
 80066ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 80066ce:	e01e      	b.n	800670e <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066da:	2b40      	cmp	r3, #64	; 0x40
 80066dc:	d007      	beq.n	80066ee <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	681a      	ldr	r2, [r3, #0]
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80066ec:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	685a      	ldr	r2, [r3, #4]
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f042 0220 	orr.w	r2, r2, #32
 80066fc:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	685a      	ldr	r2, [r3, #4]
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f042 0202 	orr.w	r2, r2, #2
 800670c:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	2200      	movs	r2, #0
 8006712:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006716:	7dfb      	ldrb	r3, [r7, #23]
}
 8006718:	4618      	mov	r0, r3
 800671a:	3718      	adds	r7, #24
 800671c:	46bd      	mov	sp, r7
 800671e:	bd80      	pop	{r7, pc}
 8006720:	08006b95 	.word	0x08006b95
 8006724:	08006a41 	.word	0x08006a41
 8006728:	08006bb1 	.word	0x08006bb1
 800672c:	08006ae9 	.word	0x08006ae9
 8006730:	08006bcd 	.word	0x08006bcd

08006734 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b088      	sub	sp, #32
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	685b      	ldr	r3, [r3, #4]
 8006742:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	689b      	ldr	r3, [r3, #8]
 800674a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800674c:	69bb      	ldr	r3, [r7, #24]
 800674e:	099b      	lsrs	r3, r3, #6
 8006750:	f003 0301 	and.w	r3, r3, #1
 8006754:	2b00      	cmp	r3, #0
 8006756:	d10f      	bne.n	8006778 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006758:	69bb      	ldr	r3, [r7, #24]
 800675a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800675e:	2b00      	cmp	r3, #0
 8006760:	d00a      	beq.n	8006778 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006762:	69fb      	ldr	r3, [r7, #28]
 8006764:	099b      	lsrs	r3, r3, #6
 8006766:	f003 0301 	and.w	r3, r3, #1
 800676a:	2b00      	cmp	r3, #0
 800676c:	d004      	beq.n	8006778 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006772:	6878      	ldr	r0, [r7, #4]
 8006774:	4798      	blx	r3
    return;
 8006776:	e0d7      	b.n	8006928 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006778:	69bb      	ldr	r3, [r7, #24]
 800677a:	085b      	lsrs	r3, r3, #1
 800677c:	f003 0301 	and.w	r3, r3, #1
 8006780:	2b00      	cmp	r3, #0
 8006782:	d00a      	beq.n	800679a <HAL_SPI_IRQHandler+0x66>
 8006784:	69fb      	ldr	r3, [r7, #28]
 8006786:	09db      	lsrs	r3, r3, #7
 8006788:	f003 0301 	and.w	r3, r3, #1
 800678c:	2b00      	cmp	r3, #0
 800678e:	d004      	beq.n	800679a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006794:	6878      	ldr	r0, [r7, #4]
 8006796:	4798      	blx	r3
    return;
 8006798:	e0c6      	b.n	8006928 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800679a:	69bb      	ldr	r3, [r7, #24]
 800679c:	095b      	lsrs	r3, r3, #5
 800679e:	f003 0301 	and.w	r3, r3, #1
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d10c      	bne.n	80067c0 <HAL_SPI_IRQHandler+0x8c>
 80067a6:	69bb      	ldr	r3, [r7, #24]
 80067a8:	099b      	lsrs	r3, r3, #6
 80067aa:	f003 0301 	and.w	r3, r3, #1
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d106      	bne.n	80067c0 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80067b2:	69bb      	ldr	r3, [r7, #24]
 80067b4:	0a1b      	lsrs	r3, r3, #8
 80067b6:	f003 0301 	and.w	r3, r3, #1
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	f000 80b4 	beq.w	8006928 <HAL_SPI_IRQHandler+0x1f4>
 80067c0:	69fb      	ldr	r3, [r7, #28]
 80067c2:	095b      	lsrs	r3, r3, #5
 80067c4:	f003 0301 	and.w	r3, r3, #1
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	f000 80ad 	beq.w	8006928 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80067ce:	69bb      	ldr	r3, [r7, #24]
 80067d0:	099b      	lsrs	r3, r3, #6
 80067d2:	f003 0301 	and.w	r3, r3, #1
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d023      	beq.n	8006822 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80067e0:	b2db      	uxtb	r3, r3
 80067e2:	2b03      	cmp	r3, #3
 80067e4:	d011      	beq.n	800680a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067ea:	f043 0204 	orr.w	r2, r3, #4
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80067f2:	2300      	movs	r3, #0
 80067f4:	617b      	str	r3, [r7, #20]
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	68db      	ldr	r3, [r3, #12]
 80067fc:	617b      	str	r3, [r7, #20]
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	689b      	ldr	r3, [r3, #8]
 8006804:	617b      	str	r3, [r7, #20]
 8006806:	697b      	ldr	r3, [r7, #20]
 8006808:	e00b      	b.n	8006822 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800680a:	2300      	movs	r3, #0
 800680c:	613b      	str	r3, [r7, #16]
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	68db      	ldr	r3, [r3, #12]
 8006814:	613b      	str	r3, [r7, #16]
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	689b      	ldr	r3, [r3, #8]
 800681c:	613b      	str	r3, [r7, #16]
 800681e:	693b      	ldr	r3, [r7, #16]
        return;
 8006820:	e082      	b.n	8006928 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006822:	69bb      	ldr	r3, [r7, #24]
 8006824:	095b      	lsrs	r3, r3, #5
 8006826:	f003 0301 	and.w	r3, r3, #1
 800682a:	2b00      	cmp	r3, #0
 800682c:	d014      	beq.n	8006858 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006832:	f043 0201 	orr.w	r2, r3, #1
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800683a:	2300      	movs	r3, #0
 800683c:	60fb      	str	r3, [r7, #12]
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	689b      	ldr	r3, [r3, #8]
 8006844:	60fb      	str	r3, [r7, #12]
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	681a      	ldr	r2, [r3, #0]
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006854:	601a      	str	r2, [r3, #0]
 8006856:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006858:	69bb      	ldr	r3, [r7, #24]
 800685a:	0a1b      	lsrs	r3, r3, #8
 800685c:	f003 0301 	and.w	r3, r3, #1
 8006860:	2b00      	cmp	r3, #0
 8006862:	d00c      	beq.n	800687e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006868:	f043 0208 	orr.w	r2, r3, #8
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006870:	2300      	movs	r3, #0
 8006872:	60bb      	str	r3, [r7, #8]
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	689b      	ldr	r3, [r3, #8]
 800687a:	60bb      	str	r3, [r7, #8]
 800687c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006882:	2b00      	cmp	r3, #0
 8006884:	d04f      	beq.n	8006926 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	685a      	ldr	r2, [r3, #4]
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006894:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2201      	movs	r2, #1
 800689a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800689e:	69fb      	ldr	r3, [r7, #28]
 80068a0:	f003 0302 	and.w	r3, r3, #2
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d104      	bne.n	80068b2 <HAL_SPI_IRQHandler+0x17e>
 80068a8:	69fb      	ldr	r3, [r7, #28]
 80068aa:	f003 0301 	and.w	r3, r3, #1
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d034      	beq.n	800691c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	685a      	ldr	r2, [r3, #4]
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f022 0203 	bic.w	r2, r2, #3
 80068c0:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d011      	beq.n	80068ee <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068ce:	4a18      	ldr	r2, [pc, #96]	; (8006930 <HAL_SPI_IRQHandler+0x1fc>)
 80068d0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068d6:	4618      	mov	r0, r3
 80068d8:	f7fe f8fa 	bl	8004ad0 <HAL_DMA_Abort_IT>
 80068dc:	4603      	mov	r3, r0
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d005      	beq.n	80068ee <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068e6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d016      	beq.n	8006924 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068fa:	4a0d      	ldr	r2, [pc, #52]	; (8006930 <HAL_SPI_IRQHandler+0x1fc>)
 80068fc:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006902:	4618      	mov	r0, r3
 8006904:	f7fe f8e4 	bl	8004ad0 <HAL_DMA_Abort_IT>
 8006908:	4603      	mov	r3, r0
 800690a:	2b00      	cmp	r3, #0
 800690c:	d00a      	beq.n	8006924 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006912:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800691a:	e003      	b.n	8006924 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800691c:	6878      	ldr	r0, [r7, #4]
 800691e:	f000 f831 	bl	8006984 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006922:	e000      	b.n	8006926 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8006924:	bf00      	nop
    return;
 8006926:	bf00      	nop
  }
}
 8006928:	3720      	adds	r7, #32
 800692a:	46bd      	mov	sp, r7
 800692c:	bd80      	pop	{r7, pc}
 800692e:	bf00      	nop
 8006930:	08006c0d 	.word	0x08006c0d

08006934 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006934:	b480      	push	{r7}
 8006936:	b083      	sub	sp, #12
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800693c:	bf00      	nop
 800693e:	370c      	adds	r7, #12
 8006940:	46bd      	mov	sp, r7
 8006942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006946:	4770      	bx	lr

08006948 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006948:	b480      	push	{r7}
 800694a:	b083      	sub	sp, #12
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8006950:	bf00      	nop
 8006952:	370c      	adds	r7, #12
 8006954:	46bd      	mov	sp, r7
 8006956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695a:	4770      	bx	lr

0800695c <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800695c:	b480      	push	{r7}
 800695e:	b083      	sub	sp, #12
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8006964:	bf00      	nop
 8006966:	370c      	adds	r7, #12
 8006968:	46bd      	mov	sp, r7
 800696a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696e:	4770      	bx	lr

08006970 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006970:	b480      	push	{r7}
 8006972:	b083      	sub	sp, #12
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8006978:	bf00      	nop
 800697a:	370c      	adds	r7, #12
 800697c:	46bd      	mov	sp, r7
 800697e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006982:	4770      	bx	lr

08006984 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006984:	b480      	push	{r7}
 8006986:	b083      	sub	sp, #12
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800698c:	bf00      	nop
 800698e:	370c      	adds	r7, #12
 8006990:	46bd      	mov	sp, r7
 8006992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006996:	4770      	bx	lr

08006998 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b086      	sub	sp, #24
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069a4:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80069a6:	f7fd fd9f 	bl	80044e8 <HAL_GetTick>
 80069aa:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069ba:	d03b      	beq.n	8006a34 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80069bc:	697b      	ldr	r3, [r7, #20]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	685a      	ldr	r2, [r3, #4]
 80069c2:	697b      	ldr	r3, [r7, #20]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f022 0220 	bic.w	r2, r2, #32
 80069ca:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80069cc:	697b      	ldr	r3, [r7, #20]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	685a      	ldr	r2, [r3, #4]
 80069d2:	697b      	ldr	r3, [r7, #20]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f022 0202 	bic.w	r2, r2, #2
 80069da:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80069dc:	693a      	ldr	r2, [r7, #16]
 80069de:	2164      	movs	r1, #100	; 0x64
 80069e0:	6978      	ldr	r0, [r7, #20]
 80069e2:	f000 fa15 	bl	8006e10 <SPI_EndRxTxTransaction>
 80069e6:	4603      	mov	r3, r0
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d005      	beq.n	80069f8 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069f0:	f043 0220 	orr.w	r2, r3, #32
 80069f4:	697b      	ldr	r3, [r7, #20]
 80069f6:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80069f8:	697b      	ldr	r3, [r7, #20]
 80069fa:	689b      	ldr	r3, [r3, #8]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d10a      	bne.n	8006a16 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006a00:	2300      	movs	r3, #0
 8006a02:	60fb      	str	r3, [r7, #12]
 8006a04:	697b      	ldr	r3, [r7, #20]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	68db      	ldr	r3, [r3, #12]
 8006a0a:	60fb      	str	r3, [r7, #12]
 8006a0c:	697b      	ldr	r3, [r7, #20]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	689b      	ldr	r3, [r3, #8]
 8006a12:	60fb      	str	r3, [r7, #12]
 8006a14:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8006a16:	697b      	ldr	r3, [r7, #20]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8006a1c:	697b      	ldr	r3, [r7, #20]
 8006a1e:	2201      	movs	r2, #1
 8006a20:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006a24:	697b      	ldr	r3, [r7, #20]
 8006a26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d003      	beq.n	8006a34 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006a2c:	6978      	ldr	r0, [r7, #20]
 8006a2e:	f7ff ffa9 	bl	8006984 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006a32:	e002      	b.n	8006a3a <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8006a34:	6978      	ldr	r0, [r7, #20]
 8006a36:	f7fd fb31 	bl	800409c <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006a3a:	3718      	adds	r7, #24
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	bd80      	pop	{r7, pc}

08006a40 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b084      	sub	sp, #16
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a4c:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006a4e:	f7fd fd4b 	bl	80044e8 <HAL_GetTick>
 8006a52:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a62:	d03b      	beq.n	8006adc <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	685a      	ldr	r2, [r3, #4]
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f022 0220 	bic.w	r2, r2, #32
 8006a72:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	689b      	ldr	r3, [r3, #8]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d10d      	bne.n	8006a98 <SPI_DMAReceiveCplt+0x58>
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	685b      	ldr	r3, [r3, #4]
 8006a80:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a84:	d108      	bne.n	8006a98 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	685a      	ldr	r2, [r3, #4]
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f022 0203 	bic.w	r2, r2, #3
 8006a94:	605a      	str	r2, [r3, #4]
 8006a96:	e007      	b.n	8006aa8 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	685a      	ldr	r2, [r3, #4]
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f022 0201 	bic.w	r2, r2, #1
 8006aa6:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006aa8:	68ba      	ldr	r2, [r7, #8]
 8006aaa:	2164      	movs	r1, #100	; 0x64
 8006aac:	68f8      	ldr	r0, [r7, #12]
 8006aae:	f000 f949 	bl	8006d44 <SPI_EndRxTransaction>
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d002      	beq.n	8006abe <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	2220      	movs	r2, #32
 8006abc:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	2201      	movs	r2, #1
 8006ac8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d003      	beq.n	8006adc <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006ad4:	68f8      	ldr	r0, [r7, #12]
 8006ad6:	f7ff ff55 	bl	8006984 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006ada:	e002      	b.n	8006ae2 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8006adc:	68f8      	ldr	r0, [r7, #12]
 8006ade:	f7fd faff 	bl	80040e0 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006ae2:	3710      	adds	r7, #16
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bd80      	pop	{r7, pc}

08006ae8 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b084      	sub	sp, #16
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006af4:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006af6:	f7fd fcf7 	bl	80044e8 <HAL_GetTick>
 8006afa:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b0a:	d02f      	beq.n	8006b6c <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	685a      	ldr	r2, [r3, #4]
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f022 0220 	bic.w	r2, r2, #32
 8006b1a:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006b1c:	68ba      	ldr	r2, [r7, #8]
 8006b1e:	2164      	movs	r1, #100	; 0x64
 8006b20:	68f8      	ldr	r0, [r7, #12]
 8006b22:	f000 f975 	bl	8006e10 <SPI_EndRxTxTransaction>
 8006b26:	4603      	mov	r3, r0
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d005      	beq.n	8006b38 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b30:	f043 0220 	orr.w	r2, r3, #32
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	685a      	ldr	r2, [r3, #4]
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f022 0203 	bic.w	r2, r2, #3
 8006b46:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	2200      	movs	r2, #0
 8006b52:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	2201      	movs	r2, #1
 8006b58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d003      	beq.n	8006b6c <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006b64:	68f8      	ldr	r0, [r7, #12]
 8006b66:	f7ff ff0d 	bl	8006984 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006b6a:	e002      	b.n	8006b72 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8006b6c:	68f8      	ldr	r0, [r7, #12]
 8006b6e:	f7ff fee1 	bl	8006934 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006b72:	3710      	adds	r7, #16
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bd80      	pop	{r7, pc}

08006b78 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b084      	sub	sp, #16
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b84:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8006b86:	68f8      	ldr	r0, [r7, #12]
 8006b88:	f7ff fede 	bl	8006948 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006b8c:	bf00      	nop
 8006b8e:	3710      	adds	r7, #16
 8006b90:	46bd      	mov	sp, r7
 8006b92:	bd80      	pop	{r7, pc}

08006b94 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b084      	sub	sp, #16
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ba0:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8006ba2:	68f8      	ldr	r0, [r7, #12]
 8006ba4:	f7ff feda 	bl	800695c <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006ba8:	bf00      	nop
 8006baa:	3710      	adds	r7, #16
 8006bac:	46bd      	mov	sp, r7
 8006bae:	bd80      	pop	{r7, pc}

08006bb0 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b084      	sub	sp, #16
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bbc:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8006bbe:	68f8      	ldr	r0, [r7, #12]
 8006bc0:	f7ff fed6 	bl	8006970 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006bc4:	bf00      	nop
 8006bc6:	3710      	adds	r7, #16
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	bd80      	pop	{r7, pc}

08006bcc <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b084      	sub	sp, #16
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bd8:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	685a      	ldr	r2, [r3, #4]
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f022 0203 	bic.w	r2, r2, #3
 8006be8:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bee:	f043 0210 	orr.w	r2, r3, #16
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	2201      	movs	r2, #1
 8006bfa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006bfe:	68f8      	ldr	r0, [r7, #12]
 8006c00:	f7ff fec0 	bl	8006984 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006c04:	bf00      	nop
 8006c06:	3710      	adds	r7, #16
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	bd80      	pop	{r7, pc}

08006c0c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b084      	sub	sp, #16
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c18:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	2200      	movs	r2, #0
 8006c24:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006c26:	68f8      	ldr	r0, [r7, #12]
 8006c28:	f7ff feac 	bl	8006984 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006c2c:	bf00      	nop
 8006c2e:	3710      	adds	r7, #16
 8006c30:	46bd      	mov	sp, r7
 8006c32:	bd80      	pop	{r7, pc}

08006c34 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b088      	sub	sp, #32
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	60f8      	str	r0, [r7, #12]
 8006c3c:	60b9      	str	r1, [r7, #8]
 8006c3e:	603b      	str	r3, [r7, #0]
 8006c40:	4613      	mov	r3, r2
 8006c42:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006c44:	f7fd fc50 	bl	80044e8 <HAL_GetTick>
 8006c48:	4602      	mov	r2, r0
 8006c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c4c:	1a9b      	subs	r3, r3, r2
 8006c4e:	683a      	ldr	r2, [r7, #0]
 8006c50:	4413      	add	r3, r2
 8006c52:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006c54:	f7fd fc48 	bl	80044e8 <HAL_GetTick>
 8006c58:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006c5a:	4b39      	ldr	r3, [pc, #228]	; (8006d40 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	015b      	lsls	r3, r3, #5
 8006c60:	0d1b      	lsrs	r3, r3, #20
 8006c62:	69fa      	ldr	r2, [r7, #28]
 8006c64:	fb02 f303 	mul.w	r3, r2, r3
 8006c68:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006c6a:	e054      	b.n	8006d16 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c72:	d050      	beq.n	8006d16 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006c74:	f7fd fc38 	bl	80044e8 <HAL_GetTick>
 8006c78:	4602      	mov	r2, r0
 8006c7a:	69bb      	ldr	r3, [r7, #24]
 8006c7c:	1ad3      	subs	r3, r2, r3
 8006c7e:	69fa      	ldr	r2, [r7, #28]
 8006c80:	429a      	cmp	r2, r3
 8006c82:	d902      	bls.n	8006c8a <SPI_WaitFlagStateUntilTimeout+0x56>
 8006c84:	69fb      	ldr	r3, [r7, #28]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d13d      	bne.n	8006d06 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	685a      	ldr	r2, [r3, #4]
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006c98:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	685b      	ldr	r3, [r3, #4]
 8006c9e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006ca2:	d111      	bne.n	8006cc8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	689b      	ldr	r3, [r3, #8]
 8006ca8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006cac:	d004      	beq.n	8006cb8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	689b      	ldr	r3, [r3, #8]
 8006cb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006cb6:	d107      	bne.n	8006cc8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	681a      	ldr	r2, [r3, #0]
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006cc6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ccc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006cd0:	d10f      	bne.n	8006cf2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	681a      	ldr	r2, [r3, #0]
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006ce0:	601a      	str	r2, [r3, #0]
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	681a      	ldr	r2, [r3, #0]
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006cf0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	2201      	movs	r2, #1
 8006cf6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006d02:	2303      	movs	r3, #3
 8006d04:	e017      	b.n	8006d36 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006d06:	697b      	ldr	r3, [r7, #20]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d101      	bne.n	8006d10 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006d10:	697b      	ldr	r3, [r7, #20]
 8006d12:	3b01      	subs	r3, #1
 8006d14:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	689a      	ldr	r2, [r3, #8]
 8006d1c:	68bb      	ldr	r3, [r7, #8]
 8006d1e:	4013      	ands	r3, r2
 8006d20:	68ba      	ldr	r2, [r7, #8]
 8006d22:	429a      	cmp	r2, r3
 8006d24:	bf0c      	ite	eq
 8006d26:	2301      	moveq	r3, #1
 8006d28:	2300      	movne	r3, #0
 8006d2a:	b2db      	uxtb	r3, r3
 8006d2c:	461a      	mov	r2, r3
 8006d2e:	79fb      	ldrb	r3, [r7, #7]
 8006d30:	429a      	cmp	r2, r3
 8006d32:	d19b      	bne.n	8006c6c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006d34:	2300      	movs	r3, #0
}
 8006d36:	4618      	mov	r0, r3
 8006d38:	3720      	adds	r7, #32
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	bd80      	pop	{r7, pc}
 8006d3e:	bf00      	nop
 8006d40:	200000ac 	.word	0x200000ac

08006d44 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b086      	sub	sp, #24
 8006d48:	af02      	add	r7, sp, #8
 8006d4a:	60f8      	str	r0, [r7, #12]
 8006d4c:	60b9      	str	r1, [r7, #8]
 8006d4e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	685b      	ldr	r3, [r3, #4]
 8006d54:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006d58:	d111      	bne.n	8006d7e <SPI_EndRxTransaction+0x3a>
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	689b      	ldr	r3, [r3, #8]
 8006d5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d62:	d004      	beq.n	8006d6e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	689b      	ldr	r3, [r3, #8]
 8006d68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d6c:	d107      	bne.n	8006d7e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	681a      	ldr	r2, [r3, #0]
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d7c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	685b      	ldr	r3, [r3, #4]
 8006d82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006d86:	d12a      	bne.n	8006dde <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	689b      	ldr	r3, [r3, #8]
 8006d8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d90:	d012      	beq.n	8006db8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	9300      	str	r3, [sp, #0]
 8006d96:	68bb      	ldr	r3, [r7, #8]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	2180      	movs	r1, #128	; 0x80
 8006d9c:	68f8      	ldr	r0, [r7, #12]
 8006d9e:	f7ff ff49 	bl	8006c34 <SPI_WaitFlagStateUntilTimeout>
 8006da2:	4603      	mov	r3, r0
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d02d      	beq.n	8006e04 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dac:	f043 0220 	orr.w	r2, r3, #32
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006db4:	2303      	movs	r3, #3
 8006db6:	e026      	b.n	8006e06 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	9300      	str	r3, [sp, #0]
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	2101      	movs	r1, #1
 8006dc2:	68f8      	ldr	r0, [r7, #12]
 8006dc4:	f7ff ff36 	bl	8006c34 <SPI_WaitFlagStateUntilTimeout>
 8006dc8:	4603      	mov	r3, r0
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d01a      	beq.n	8006e04 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dd2:	f043 0220 	orr.w	r2, r3, #32
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006dda:	2303      	movs	r3, #3
 8006ddc:	e013      	b.n	8006e06 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	9300      	str	r3, [sp, #0]
 8006de2:	68bb      	ldr	r3, [r7, #8]
 8006de4:	2200      	movs	r2, #0
 8006de6:	2101      	movs	r1, #1
 8006de8:	68f8      	ldr	r0, [r7, #12]
 8006dea:	f7ff ff23 	bl	8006c34 <SPI_WaitFlagStateUntilTimeout>
 8006dee:	4603      	mov	r3, r0
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d007      	beq.n	8006e04 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006df8:	f043 0220 	orr.w	r2, r3, #32
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006e00:	2303      	movs	r3, #3
 8006e02:	e000      	b.n	8006e06 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006e04:	2300      	movs	r3, #0
}
 8006e06:	4618      	mov	r0, r3
 8006e08:	3710      	adds	r7, #16
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	bd80      	pop	{r7, pc}
	...

08006e10 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b088      	sub	sp, #32
 8006e14:	af02      	add	r7, sp, #8
 8006e16:	60f8      	str	r0, [r7, #12]
 8006e18:	60b9      	str	r1, [r7, #8]
 8006e1a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006e1c:	4b1b      	ldr	r3, [pc, #108]	; (8006e8c <SPI_EndRxTxTransaction+0x7c>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	4a1b      	ldr	r2, [pc, #108]	; (8006e90 <SPI_EndRxTxTransaction+0x80>)
 8006e22:	fba2 2303 	umull	r2, r3, r2, r3
 8006e26:	0d5b      	lsrs	r3, r3, #21
 8006e28:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006e2c:	fb02 f303 	mul.w	r3, r2, r3
 8006e30:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	685b      	ldr	r3, [r3, #4]
 8006e36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006e3a:	d112      	bne.n	8006e62 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	9300      	str	r3, [sp, #0]
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	2200      	movs	r2, #0
 8006e44:	2180      	movs	r1, #128	; 0x80
 8006e46:	68f8      	ldr	r0, [r7, #12]
 8006e48:	f7ff fef4 	bl	8006c34 <SPI_WaitFlagStateUntilTimeout>
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d016      	beq.n	8006e80 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e56:	f043 0220 	orr.w	r2, r3, #32
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006e5e:	2303      	movs	r3, #3
 8006e60:	e00f      	b.n	8006e82 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006e62:	697b      	ldr	r3, [r7, #20]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d00a      	beq.n	8006e7e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006e68:	697b      	ldr	r3, [r7, #20]
 8006e6a:	3b01      	subs	r3, #1
 8006e6c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	689b      	ldr	r3, [r3, #8]
 8006e74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e78:	2b80      	cmp	r3, #128	; 0x80
 8006e7a:	d0f2      	beq.n	8006e62 <SPI_EndRxTxTransaction+0x52>
 8006e7c:	e000      	b.n	8006e80 <SPI_EndRxTxTransaction+0x70>
        break;
 8006e7e:	bf00      	nop
  }

  return HAL_OK;
 8006e80:	2300      	movs	r3, #0
}
 8006e82:	4618      	mov	r0, r3
 8006e84:	3718      	adds	r7, #24
 8006e86:	46bd      	mov	sp, r7
 8006e88:	bd80      	pop	{r7, pc}
 8006e8a:	bf00      	nop
 8006e8c:	200000ac 	.word	0x200000ac
 8006e90:	165e9f81 	.word	0x165e9f81

08006e94 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b082      	sub	sp, #8
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d101      	bne.n	8006ea6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006ea2:	2301      	movs	r3, #1
 8006ea4:	e03f      	b.n	8006f26 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006eac:	b2db      	uxtb	r3, r3
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d106      	bne.n	8006ec0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f7fd f89c 	bl	8003ff8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2224      	movs	r2, #36	; 0x24
 8006ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	68da      	ldr	r2, [r3, #12]
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006ed6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006ed8:	6878      	ldr	r0, [r7, #4]
 8006eda:	f000 f929 	bl	8007130 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	691a      	ldr	r2, [r3, #16]
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006eec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	695a      	ldr	r2, [r3, #20]
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006efc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	68da      	ldr	r2, [r3, #12]
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006f0c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2200      	movs	r2, #0
 8006f12:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2220      	movs	r2, #32
 8006f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2220      	movs	r2, #32
 8006f20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006f24:	2300      	movs	r3, #0
}
 8006f26:	4618      	mov	r0, r3
 8006f28:	3708      	adds	r7, #8
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bd80      	pop	{r7, pc}

08006f2e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f2e:	b580      	push	{r7, lr}
 8006f30:	b08a      	sub	sp, #40	; 0x28
 8006f32:	af02      	add	r7, sp, #8
 8006f34:	60f8      	str	r0, [r7, #12]
 8006f36:	60b9      	str	r1, [r7, #8]
 8006f38:	603b      	str	r3, [r7, #0]
 8006f3a:	4613      	mov	r3, r2
 8006f3c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006f3e:	2300      	movs	r3, #0
 8006f40:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f48:	b2db      	uxtb	r3, r3
 8006f4a:	2b20      	cmp	r3, #32
 8006f4c:	d17c      	bne.n	8007048 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d002      	beq.n	8006f5a <HAL_UART_Transmit+0x2c>
 8006f54:	88fb      	ldrh	r3, [r7, #6]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d101      	bne.n	8006f5e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	e075      	b.n	800704a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f64:	2b01      	cmp	r3, #1
 8006f66:	d101      	bne.n	8006f6c <HAL_UART_Transmit+0x3e>
 8006f68:	2302      	movs	r3, #2
 8006f6a:	e06e      	b.n	800704a <HAL_UART_Transmit+0x11c>
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	2201      	movs	r2, #1
 8006f70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	2200      	movs	r2, #0
 8006f78:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	2221      	movs	r2, #33	; 0x21
 8006f7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006f82:	f7fd fab1 	bl	80044e8 <HAL_GetTick>
 8006f86:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	88fa      	ldrh	r2, [r7, #6]
 8006f8c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	88fa      	ldrh	r2, [r7, #6]
 8006f92:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	689b      	ldr	r3, [r3, #8]
 8006f98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f9c:	d108      	bne.n	8006fb0 <HAL_UART_Transmit+0x82>
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	691b      	ldr	r3, [r3, #16]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d104      	bne.n	8006fb0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006faa:	68bb      	ldr	r3, [r7, #8]
 8006fac:	61bb      	str	r3, [r7, #24]
 8006fae:	e003      	b.n	8006fb8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	2200      	movs	r2, #0
 8006fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006fc0:	e02a      	b.n	8007018 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	9300      	str	r3, [sp, #0]
 8006fc6:	697b      	ldr	r3, [r7, #20]
 8006fc8:	2200      	movs	r2, #0
 8006fca:	2180      	movs	r1, #128	; 0x80
 8006fcc:	68f8      	ldr	r0, [r7, #12]
 8006fce:	f000 f840 	bl	8007052 <UART_WaitOnFlagUntilTimeout>
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d001      	beq.n	8006fdc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006fd8:	2303      	movs	r3, #3
 8006fda:	e036      	b.n	800704a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006fdc:	69fb      	ldr	r3, [r7, #28]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d10b      	bne.n	8006ffa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006fe2:	69bb      	ldr	r3, [r7, #24]
 8006fe4:	881b      	ldrh	r3, [r3, #0]
 8006fe6:	461a      	mov	r2, r3
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006ff0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006ff2:	69bb      	ldr	r3, [r7, #24]
 8006ff4:	3302      	adds	r3, #2
 8006ff6:	61bb      	str	r3, [r7, #24]
 8006ff8:	e007      	b.n	800700a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006ffa:	69fb      	ldr	r3, [r7, #28]
 8006ffc:	781a      	ldrb	r2, [r3, #0]
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007004:	69fb      	ldr	r3, [r7, #28]
 8007006:	3301      	adds	r3, #1
 8007008:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800700e:	b29b      	uxth	r3, r3
 8007010:	3b01      	subs	r3, #1
 8007012:	b29a      	uxth	r2, r3
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800701c:	b29b      	uxth	r3, r3
 800701e:	2b00      	cmp	r3, #0
 8007020:	d1cf      	bne.n	8006fc2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	9300      	str	r3, [sp, #0]
 8007026:	697b      	ldr	r3, [r7, #20]
 8007028:	2200      	movs	r2, #0
 800702a:	2140      	movs	r1, #64	; 0x40
 800702c:	68f8      	ldr	r0, [r7, #12]
 800702e:	f000 f810 	bl	8007052 <UART_WaitOnFlagUntilTimeout>
 8007032:	4603      	mov	r3, r0
 8007034:	2b00      	cmp	r3, #0
 8007036:	d001      	beq.n	800703c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007038:	2303      	movs	r3, #3
 800703a:	e006      	b.n	800704a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	2220      	movs	r2, #32
 8007040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007044:	2300      	movs	r3, #0
 8007046:	e000      	b.n	800704a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007048:	2302      	movs	r3, #2
  }
}
 800704a:	4618      	mov	r0, r3
 800704c:	3720      	adds	r7, #32
 800704e:	46bd      	mov	sp, r7
 8007050:	bd80      	pop	{r7, pc}

08007052 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007052:	b580      	push	{r7, lr}
 8007054:	b090      	sub	sp, #64	; 0x40
 8007056:	af00      	add	r7, sp, #0
 8007058:	60f8      	str	r0, [r7, #12]
 800705a:	60b9      	str	r1, [r7, #8]
 800705c:	603b      	str	r3, [r7, #0]
 800705e:	4613      	mov	r3, r2
 8007060:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007062:	e050      	b.n	8007106 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007064:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007066:	f1b3 3fff 	cmp.w	r3, #4294967295
 800706a:	d04c      	beq.n	8007106 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800706c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800706e:	2b00      	cmp	r3, #0
 8007070:	d007      	beq.n	8007082 <UART_WaitOnFlagUntilTimeout+0x30>
 8007072:	f7fd fa39 	bl	80044e8 <HAL_GetTick>
 8007076:	4602      	mov	r2, r0
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	1ad3      	subs	r3, r2, r3
 800707c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800707e:	429a      	cmp	r2, r3
 8007080:	d241      	bcs.n	8007106 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	330c      	adds	r3, #12
 8007088:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800708a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800708c:	e853 3f00 	ldrex	r3, [r3]
 8007090:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007094:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007098:	63fb      	str	r3, [r7, #60]	; 0x3c
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	330c      	adds	r3, #12
 80070a0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80070a2:	637a      	str	r2, [r7, #52]	; 0x34
 80070a4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070a6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80070a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80070aa:	e841 2300 	strex	r3, r2, [r1]
 80070ae:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80070b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d1e5      	bne.n	8007082 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	3314      	adds	r3, #20
 80070bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070be:	697b      	ldr	r3, [r7, #20]
 80070c0:	e853 3f00 	ldrex	r3, [r3]
 80070c4:	613b      	str	r3, [r7, #16]
   return(result);
 80070c6:	693b      	ldr	r3, [r7, #16]
 80070c8:	f023 0301 	bic.w	r3, r3, #1
 80070cc:	63bb      	str	r3, [r7, #56]	; 0x38
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	3314      	adds	r3, #20
 80070d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80070d6:	623a      	str	r2, [r7, #32]
 80070d8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070da:	69f9      	ldr	r1, [r7, #28]
 80070dc:	6a3a      	ldr	r2, [r7, #32]
 80070de:	e841 2300 	strex	r3, r2, [r1]
 80070e2:	61bb      	str	r3, [r7, #24]
   return(result);
 80070e4:	69bb      	ldr	r3, [r7, #24]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d1e5      	bne.n	80070b6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	2220      	movs	r2, #32
 80070ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	2220      	movs	r2, #32
 80070f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	2200      	movs	r2, #0
 80070fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007102:	2303      	movs	r3, #3
 8007104:	e00f      	b.n	8007126 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	681a      	ldr	r2, [r3, #0]
 800710c:	68bb      	ldr	r3, [r7, #8]
 800710e:	4013      	ands	r3, r2
 8007110:	68ba      	ldr	r2, [r7, #8]
 8007112:	429a      	cmp	r2, r3
 8007114:	bf0c      	ite	eq
 8007116:	2301      	moveq	r3, #1
 8007118:	2300      	movne	r3, #0
 800711a:	b2db      	uxtb	r3, r3
 800711c:	461a      	mov	r2, r3
 800711e:	79fb      	ldrb	r3, [r7, #7]
 8007120:	429a      	cmp	r2, r3
 8007122:	d09f      	beq.n	8007064 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007124:	2300      	movs	r3, #0
}
 8007126:	4618      	mov	r0, r3
 8007128:	3740      	adds	r7, #64	; 0x40
 800712a:	46bd      	mov	sp, r7
 800712c:	bd80      	pop	{r7, pc}
	...

08007130 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007130:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007134:	b0c0      	sub	sp, #256	; 0x100
 8007136:	af00      	add	r7, sp, #0
 8007138:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800713c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	691b      	ldr	r3, [r3, #16]
 8007144:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007148:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800714c:	68d9      	ldr	r1, [r3, #12]
 800714e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007152:	681a      	ldr	r2, [r3, #0]
 8007154:	ea40 0301 	orr.w	r3, r0, r1
 8007158:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800715a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800715e:	689a      	ldr	r2, [r3, #8]
 8007160:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007164:	691b      	ldr	r3, [r3, #16]
 8007166:	431a      	orrs	r2, r3
 8007168:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800716c:	695b      	ldr	r3, [r3, #20]
 800716e:	431a      	orrs	r2, r3
 8007170:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007174:	69db      	ldr	r3, [r3, #28]
 8007176:	4313      	orrs	r3, r2
 8007178:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800717c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	68db      	ldr	r3, [r3, #12]
 8007184:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007188:	f021 010c 	bic.w	r1, r1, #12
 800718c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007190:	681a      	ldr	r2, [r3, #0]
 8007192:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007196:	430b      	orrs	r3, r1
 8007198:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800719a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	695b      	ldr	r3, [r3, #20]
 80071a2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80071a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071aa:	6999      	ldr	r1, [r3, #24]
 80071ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071b0:	681a      	ldr	r2, [r3, #0]
 80071b2:	ea40 0301 	orr.w	r3, r0, r1
 80071b6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80071b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071bc:	681a      	ldr	r2, [r3, #0]
 80071be:	4b8f      	ldr	r3, [pc, #572]	; (80073fc <UART_SetConfig+0x2cc>)
 80071c0:	429a      	cmp	r2, r3
 80071c2:	d005      	beq.n	80071d0 <UART_SetConfig+0xa0>
 80071c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071c8:	681a      	ldr	r2, [r3, #0]
 80071ca:	4b8d      	ldr	r3, [pc, #564]	; (8007400 <UART_SetConfig+0x2d0>)
 80071cc:	429a      	cmp	r2, r3
 80071ce:	d104      	bne.n	80071da <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80071d0:	f7fe fe34 	bl	8005e3c <HAL_RCC_GetPCLK2Freq>
 80071d4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80071d8:	e003      	b.n	80071e2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80071da:	f7fe fe1b 	bl	8005e14 <HAL_RCC_GetPCLK1Freq>
 80071de:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80071e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071e6:	69db      	ldr	r3, [r3, #28]
 80071e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80071ec:	f040 810c 	bne.w	8007408 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80071f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80071f4:	2200      	movs	r2, #0
 80071f6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80071fa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80071fe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007202:	4622      	mov	r2, r4
 8007204:	462b      	mov	r3, r5
 8007206:	1891      	adds	r1, r2, r2
 8007208:	65b9      	str	r1, [r7, #88]	; 0x58
 800720a:	415b      	adcs	r3, r3
 800720c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800720e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007212:	4621      	mov	r1, r4
 8007214:	eb12 0801 	adds.w	r8, r2, r1
 8007218:	4629      	mov	r1, r5
 800721a:	eb43 0901 	adc.w	r9, r3, r1
 800721e:	f04f 0200 	mov.w	r2, #0
 8007222:	f04f 0300 	mov.w	r3, #0
 8007226:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800722a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800722e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007232:	4690      	mov	r8, r2
 8007234:	4699      	mov	r9, r3
 8007236:	4623      	mov	r3, r4
 8007238:	eb18 0303 	adds.w	r3, r8, r3
 800723c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007240:	462b      	mov	r3, r5
 8007242:	eb49 0303 	adc.w	r3, r9, r3
 8007246:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800724a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800724e:	685b      	ldr	r3, [r3, #4]
 8007250:	2200      	movs	r2, #0
 8007252:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007256:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800725a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800725e:	460b      	mov	r3, r1
 8007260:	18db      	adds	r3, r3, r3
 8007262:	653b      	str	r3, [r7, #80]	; 0x50
 8007264:	4613      	mov	r3, r2
 8007266:	eb42 0303 	adc.w	r3, r2, r3
 800726a:	657b      	str	r3, [r7, #84]	; 0x54
 800726c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007270:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007274:	f7f9 fcb0 	bl	8000bd8 <__aeabi_uldivmod>
 8007278:	4602      	mov	r2, r0
 800727a:	460b      	mov	r3, r1
 800727c:	4b61      	ldr	r3, [pc, #388]	; (8007404 <UART_SetConfig+0x2d4>)
 800727e:	fba3 2302 	umull	r2, r3, r3, r2
 8007282:	095b      	lsrs	r3, r3, #5
 8007284:	011c      	lsls	r4, r3, #4
 8007286:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800728a:	2200      	movs	r2, #0
 800728c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007290:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007294:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007298:	4642      	mov	r2, r8
 800729a:	464b      	mov	r3, r9
 800729c:	1891      	adds	r1, r2, r2
 800729e:	64b9      	str	r1, [r7, #72]	; 0x48
 80072a0:	415b      	adcs	r3, r3
 80072a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80072a4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80072a8:	4641      	mov	r1, r8
 80072aa:	eb12 0a01 	adds.w	sl, r2, r1
 80072ae:	4649      	mov	r1, r9
 80072b0:	eb43 0b01 	adc.w	fp, r3, r1
 80072b4:	f04f 0200 	mov.w	r2, #0
 80072b8:	f04f 0300 	mov.w	r3, #0
 80072bc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80072c0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80072c4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80072c8:	4692      	mov	sl, r2
 80072ca:	469b      	mov	fp, r3
 80072cc:	4643      	mov	r3, r8
 80072ce:	eb1a 0303 	adds.w	r3, sl, r3
 80072d2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80072d6:	464b      	mov	r3, r9
 80072d8:	eb4b 0303 	adc.w	r3, fp, r3
 80072dc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80072e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072e4:	685b      	ldr	r3, [r3, #4]
 80072e6:	2200      	movs	r2, #0
 80072e8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80072ec:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80072f0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80072f4:	460b      	mov	r3, r1
 80072f6:	18db      	adds	r3, r3, r3
 80072f8:	643b      	str	r3, [r7, #64]	; 0x40
 80072fa:	4613      	mov	r3, r2
 80072fc:	eb42 0303 	adc.w	r3, r2, r3
 8007300:	647b      	str	r3, [r7, #68]	; 0x44
 8007302:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007306:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800730a:	f7f9 fc65 	bl	8000bd8 <__aeabi_uldivmod>
 800730e:	4602      	mov	r2, r0
 8007310:	460b      	mov	r3, r1
 8007312:	4611      	mov	r1, r2
 8007314:	4b3b      	ldr	r3, [pc, #236]	; (8007404 <UART_SetConfig+0x2d4>)
 8007316:	fba3 2301 	umull	r2, r3, r3, r1
 800731a:	095b      	lsrs	r3, r3, #5
 800731c:	2264      	movs	r2, #100	; 0x64
 800731e:	fb02 f303 	mul.w	r3, r2, r3
 8007322:	1acb      	subs	r3, r1, r3
 8007324:	00db      	lsls	r3, r3, #3
 8007326:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800732a:	4b36      	ldr	r3, [pc, #216]	; (8007404 <UART_SetConfig+0x2d4>)
 800732c:	fba3 2302 	umull	r2, r3, r3, r2
 8007330:	095b      	lsrs	r3, r3, #5
 8007332:	005b      	lsls	r3, r3, #1
 8007334:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007338:	441c      	add	r4, r3
 800733a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800733e:	2200      	movs	r2, #0
 8007340:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007344:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007348:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800734c:	4642      	mov	r2, r8
 800734e:	464b      	mov	r3, r9
 8007350:	1891      	adds	r1, r2, r2
 8007352:	63b9      	str	r1, [r7, #56]	; 0x38
 8007354:	415b      	adcs	r3, r3
 8007356:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007358:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800735c:	4641      	mov	r1, r8
 800735e:	1851      	adds	r1, r2, r1
 8007360:	6339      	str	r1, [r7, #48]	; 0x30
 8007362:	4649      	mov	r1, r9
 8007364:	414b      	adcs	r3, r1
 8007366:	637b      	str	r3, [r7, #52]	; 0x34
 8007368:	f04f 0200 	mov.w	r2, #0
 800736c:	f04f 0300 	mov.w	r3, #0
 8007370:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007374:	4659      	mov	r1, fp
 8007376:	00cb      	lsls	r3, r1, #3
 8007378:	4651      	mov	r1, sl
 800737a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800737e:	4651      	mov	r1, sl
 8007380:	00ca      	lsls	r2, r1, #3
 8007382:	4610      	mov	r0, r2
 8007384:	4619      	mov	r1, r3
 8007386:	4603      	mov	r3, r0
 8007388:	4642      	mov	r2, r8
 800738a:	189b      	adds	r3, r3, r2
 800738c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007390:	464b      	mov	r3, r9
 8007392:	460a      	mov	r2, r1
 8007394:	eb42 0303 	adc.w	r3, r2, r3
 8007398:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800739c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073a0:	685b      	ldr	r3, [r3, #4]
 80073a2:	2200      	movs	r2, #0
 80073a4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80073a8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80073ac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80073b0:	460b      	mov	r3, r1
 80073b2:	18db      	adds	r3, r3, r3
 80073b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80073b6:	4613      	mov	r3, r2
 80073b8:	eb42 0303 	adc.w	r3, r2, r3
 80073bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80073be:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80073c2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80073c6:	f7f9 fc07 	bl	8000bd8 <__aeabi_uldivmod>
 80073ca:	4602      	mov	r2, r0
 80073cc:	460b      	mov	r3, r1
 80073ce:	4b0d      	ldr	r3, [pc, #52]	; (8007404 <UART_SetConfig+0x2d4>)
 80073d0:	fba3 1302 	umull	r1, r3, r3, r2
 80073d4:	095b      	lsrs	r3, r3, #5
 80073d6:	2164      	movs	r1, #100	; 0x64
 80073d8:	fb01 f303 	mul.w	r3, r1, r3
 80073dc:	1ad3      	subs	r3, r2, r3
 80073de:	00db      	lsls	r3, r3, #3
 80073e0:	3332      	adds	r3, #50	; 0x32
 80073e2:	4a08      	ldr	r2, [pc, #32]	; (8007404 <UART_SetConfig+0x2d4>)
 80073e4:	fba2 2303 	umull	r2, r3, r2, r3
 80073e8:	095b      	lsrs	r3, r3, #5
 80073ea:	f003 0207 	and.w	r2, r3, #7
 80073ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	4422      	add	r2, r4
 80073f6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80073f8:	e105      	b.n	8007606 <UART_SetConfig+0x4d6>
 80073fa:	bf00      	nop
 80073fc:	40011000 	.word	0x40011000
 8007400:	40011400 	.word	0x40011400
 8007404:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007408:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800740c:	2200      	movs	r2, #0
 800740e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007412:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007416:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800741a:	4642      	mov	r2, r8
 800741c:	464b      	mov	r3, r9
 800741e:	1891      	adds	r1, r2, r2
 8007420:	6239      	str	r1, [r7, #32]
 8007422:	415b      	adcs	r3, r3
 8007424:	627b      	str	r3, [r7, #36]	; 0x24
 8007426:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800742a:	4641      	mov	r1, r8
 800742c:	1854      	adds	r4, r2, r1
 800742e:	4649      	mov	r1, r9
 8007430:	eb43 0501 	adc.w	r5, r3, r1
 8007434:	f04f 0200 	mov.w	r2, #0
 8007438:	f04f 0300 	mov.w	r3, #0
 800743c:	00eb      	lsls	r3, r5, #3
 800743e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007442:	00e2      	lsls	r2, r4, #3
 8007444:	4614      	mov	r4, r2
 8007446:	461d      	mov	r5, r3
 8007448:	4643      	mov	r3, r8
 800744a:	18e3      	adds	r3, r4, r3
 800744c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007450:	464b      	mov	r3, r9
 8007452:	eb45 0303 	adc.w	r3, r5, r3
 8007456:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800745a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800745e:	685b      	ldr	r3, [r3, #4]
 8007460:	2200      	movs	r2, #0
 8007462:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007466:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800746a:	f04f 0200 	mov.w	r2, #0
 800746e:	f04f 0300 	mov.w	r3, #0
 8007472:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007476:	4629      	mov	r1, r5
 8007478:	008b      	lsls	r3, r1, #2
 800747a:	4621      	mov	r1, r4
 800747c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007480:	4621      	mov	r1, r4
 8007482:	008a      	lsls	r2, r1, #2
 8007484:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007488:	f7f9 fba6 	bl	8000bd8 <__aeabi_uldivmod>
 800748c:	4602      	mov	r2, r0
 800748e:	460b      	mov	r3, r1
 8007490:	4b60      	ldr	r3, [pc, #384]	; (8007614 <UART_SetConfig+0x4e4>)
 8007492:	fba3 2302 	umull	r2, r3, r3, r2
 8007496:	095b      	lsrs	r3, r3, #5
 8007498:	011c      	lsls	r4, r3, #4
 800749a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800749e:	2200      	movs	r2, #0
 80074a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80074a4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80074a8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80074ac:	4642      	mov	r2, r8
 80074ae:	464b      	mov	r3, r9
 80074b0:	1891      	adds	r1, r2, r2
 80074b2:	61b9      	str	r1, [r7, #24]
 80074b4:	415b      	adcs	r3, r3
 80074b6:	61fb      	str	r3, [r7, #28]
 80074b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80074bc:	4641      	mov	r1, r8
 80074be:	1851      	adds	r1, r2, r1
 80074c0:	6139      	str	r1, [r7, #16]
 80074c2:	4649      	mov	r1, r9
 80074c4:	414b      	adcs	r3, r1
 80074c6:	617b      	str	r3, [r7, #20]
 80074c8:	f04f 0200 	mov.w	r2, #0
 80074cc:	f04f 0300 	mov.w	r3, #0
 80074d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80074d4:	4659      	mov	r1, fp
 80074d6:	00cb      	lsls	r3, r1, #3
 80074d8:	4651      	mov	r1, sl
 80074da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80074de:	4651      	mov	r1, sl
 80074e0:	00ca      	lsls	r2, r1, #3
 80074e2:	4610      	mov	r0, r2
 80074e4:	4619      	mov	r1, r3
 80074e6:	4603      	mov	r3, r0
 80074e8:	4642      	mov	r2, r8
 80074ea:	189b      	adds	r3, r3, r2
 80074ec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80074f0:	464b      	mov	r3, r9
 80074f2:	460a      	mov	r2, r1
 80074f4:	eb42 0303 	adc.w	r3, r2, r3
 80074f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80074fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007500:	685b      	ldr	r3, [r3, #4]
 8007502:	2200      	movs	r2, #0
 8007504:	67bb      	str	r3, [r7, #120]	; 0x78
 8007506:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007508:	f04f 0200 	mov.w	r2, #0
 800750c:	f04f 0300 	mov.w	r3, #0
 8007510:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007514:	4649      	mov	r1, r9
 8007516:	008b      	lsls	r3, r1, #2
 8007518:	4641      	mov	r1, r8
 800751a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800751e:	4641      	mov	r1, r8
 8007520:	008a      	lsls	r2, r1, #2
 8007522:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007526:	f7f9 fb57 	bl	8000bd8 <__aeabi_uldivmod>
 800752a:	4602      	mov	r2, r0
 800752c:	460b      	mov	r3, r1
 800752e:	4b39      	ldr	r3, [pc, #228]	; (8007614 <UART_SetConfig+0x4e4>)
 8007530:	fba3 1302 	umull	r1, r3, r3, r2
 8007534:	095b      	lsrs	r3, r3, #5
 8007536:	2164      	movs	r1, #100	; 0x64
 8007538:	fb01 f303 	mul.w	r3, r1, r3
 800753c:	1ad3      	subs	r3, r2, r3
 800753e:	011b      	lsls	r3, r3, #4
 8007540:	3332      	adds	r3, #50	; 0x32
 8007542:	4a34      	ldr	r2, [pc, #208]	; (8007614 <UART_SetConfig+0x4e4>)
 8007544:	fba2 2303 	umull	r2, r3, r2, r3
 8007548:	095b      	lsrs	r3, r3, #5
 800754a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800754e:	441c      	add	r4, r3
 8007550:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007554:	2200      	movs	r2, #0
 8007556:	673b      	str	r3, [r7, #112]	; 0x70
 8007558:	677a      	str	r2, [r7, #116]	; 0x74
 800755a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800755e:	4642      	mov	r2, r8
 8007560:	464b      	mov	r3, r9
 8007562:	1891      	adds	r1, r2, r2
 8007564:	60b9      	str	r1, [r7, #8]
 8007566:	415b      	adcs	r3, r3
 8007568:	60fb      	str	r3, [r7, #12]
 800756a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800756e:	4641      	mov	r1, r8
 8007570:	1851      	adds	r1, r2, r1
 8007572:	6039      	str	r1, [r7, #0]
 8007574:	4649      	mov	r1, r9
 8007576:	414b      	adcs	r3, r1
 8007578:	607b      	str	r3, [r7, #4]
 800757a:	f04f 0200 	mov.w	r2, #0
 800757e:	f04f 0300 	mov.w	r3, #0
 8007582:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007586:	4659      	mov	r1, fp
 8007588:	00cb      	lsls	r3, r1, #3
 800758a:	4651      	mov	r1, sl
 800758c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007590:	4651      	mov	r1, sl
 8007592:	00ca      	lsls	r2, r1, #3
 8007594:	4610      	mov	r0, r2
 8007596:	4619      	mov	r1, r3
 8007598:	4603      	mov	r3, r0
 800759a:	4642      	mov	r2, r8
 800759c:	189b      	adds	r3, r3, r2
 800759e:	66bb      	str	r3, [r7, #104]	; 0x68
 80075a0:	464b      	mov	r3, r9
 80075a2:	460a      	mov	r2, r1
 80075a4:	eb42 0303 	adc.w	r3, r2, r3
 80075a8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80075aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075ae:	685b      	ldr	r3, [r3, #4]
 80075b0:	2200      	movs	r2, #0
 80075b2:	663b      	str	r3, [r7, #96]	; 0x60
 80075b4:	667a      	str	r2, [r7, #100]	; 0x64
 80075b6:	f04f 0200 	mov.w	r2, #0
 80075ba:	f04f 0300 	mov.w	r3, #0
 80075be:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80075c2:	4649      	mov	r1, r9
 80075c4:	008b      	lsls	r3, r1, #2
 80075c6:	4641      	mov	r1, r8
 80075c8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80075cc:	4641      	mov	r1, r8
 80075ce:	008a      	lsls	r2, r1, #2
 80075d0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80075d4:	f7f9 fb00 	bl	8000bd8 <__aeabi_uldivmod>
 80075d8:	4602      	mov	r2, r0
 80075da:	460b      	mov	r3, r1
 80075dc:	4b0d      	ldr	r3, [pc, #52]	; (8007614 <UART_SetConfig+0x4e4>)
 80075de:	fba3 1302 	umull	r1, r3, r3, r2
 80075e2:	095b      	lsrs	r3, r3, #5
 80075e4:	2164      	movs	r1, #100	; 0x64
 80075e6:	fb01 f303 	mul.w	r3, r1, r3
 80075ea:	1ad3      	subs	r3, r2, r3
 80075ec:	011b      	lsls	r3, r3, #4
 80075ee:	3332      	adds	r3, #50	; 0x32
 80075f0:	4a08      	ldr	r2, [pc, #32]	; (8007614 <UART_SetConfig+0x4e4>)
 80075f2:	fba2 2303 	umull	r2, r3, r2, r3
 80075f6:	095b      	lsrs	r3, r3, #5
 80075f8:	f003 020f 	and.w	r2, r3, #15
 80075fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	4422      	add	r2, r4
 8007604:	609a      	str	r2, [r3, #8]
}
 8007606:	bf00      	nop
 8007608:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800760c:	46bd      	mov	sp, r7
 800760e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007612:	bf00      	nop
 8007614:	51eb851f 	.word	0x51eb851f

08007618 <uint32_identity>:
{
  return x;
}

static inline uint32_t uint32_identity(uint32_t x)
{
 8007618:	b480      	push	{r7}
 800761a:	b083      	sub	sp, #12
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
  return x;
 8007620:	687b      	ldr	r3, [r7, #4]
}
 8007622:	4618      	mov	r0, r3
 8007624:	370c      	adds	r7, #12
 8007626:	46bd      	mov	sp, r7
 8007628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762c:	4770      	bx	lr

0800762e <sl_wfx_reg_read_16>:
                                     sl_wfx_register_address_t address,
                                     void *buffer,
                                     uint32_t length);

sl_status_t sl_wfx_reg_read_16(sl_wfx_register_address_t address, uint16_t *value_out)
{
 800762e:	b580      	push	{r7, lr}
 8007630:	b084      	sub	sp, #16
 8007632:	af00      	add	r7, sp, #0
 8007634:	4603      	mov	r3, r0
 8007636:	6039      	str	r1, [r7, #0]
 8007638:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp[4];
  sl_status_t result = sl_wfx_bus_access(SL_WFX_BUS_READ, address, tmp, sizeof(tmp));
 800763a:	f107 0208 	add.w	r2, r7, #8
 800763e:	79f9      	ldrb	r1, [r7, #7]
 8007640:	2304      	movs	r3, #4
 8007642:	2002      	movs	r0, #2
 8007644:	f000 f8f8 	bl	8007838 <sl_wfx_bus_access>
 8007648:	60f8      	str	r0, [r7, #12]

  *value_out = sl_wfx_unpack_16bit_little_endian(tmp);
 800764a:	7a3b      	ldrb	r3, [r7, #8]
 800764c:	b29a      	uxth	r2, r3
 800764e:	7a7b      	ldrb	r3, [r7, #9]
 8007650:	b29b      	uxth	r3, r3
 8007652:	021b      	lsls	r3, r3, #8
 8007654:	b29b      	uxth	r3, r3
 8007656:	4313      	orrs	r3, r2
 8007658:	b29a      	uxth	r2, r3
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	801a      	strh	r2, [r3, #0]
                  address,
                  (*value_out >> 8) & 0xFF,
                  *value_out & 0xFF);
#endif

  return result;
 800765e:	68fb      	ldr	r3, [r7, #12]
}
 8007660:	4618      	mov	r0, r3
 8007662:	3710      	adds	r7, #16
 8007664:	46bd      	mov	sp, r7
 8007666:	bd80      	pop	{r7, pc}

08007668 <sl_wfx_reg_write_16>:

sl_status_t sl_wfx_reg_write_16(sl_wfx_register_address_t address, uint16_t value_in)
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b084      	sub	sp, #16
 800766c:	af00      	add	r7, sp, #0
 800766e:	4603      	mov	r3, r0
 8007670:	460a      	mov	r2, r1
 8007672:	71fb      	strb	r3, [r7, #7]
 8007674:	4613      	mov	r3, r2
 8007676:	80bb      	strh	r3, [r7, #4]
                  address,
                  (value_in >> 8) & 0xFF,
                  value_in & 0xFF);
#endif

  sl_wfx_pack_16bit_little_endian(tmp, value_in);
 8007678:	88bb      	ldrh	r3, [r7, #4]
 800767a:	b2db      	uxtb	r3, r3
 800767c:	733b      	strb	r3, [r7, #12]
 800767e:	88bb      	ldrh	r3, [r7, #4]
 8007680:	0a1b      	lsrs	r3, r3, #8
 8007682:	b29b      	uxth	r3, r3
 8007684:	b2db      	uxtb	r3, r3
 8007686:	737b      	strb	r3, [r7, #13]
  tmp[2] = 0;
 8007688:	2300      	movs	r3, #0
 800768a:	73bb      	strb	r3, [r7, #14]
  tmp[3] = 0;
 800768c:	2300      	movs	r3, #0
 800768e:	73fb      	strb	r3, [r7, #15]

  return sl_wfx_bus_access(SL_WFX_BUS_WRITE, address, tmp, sizeof(tmp));
 8007690:	f107 020c 	add.w	r2, r7, #12
 8007694:	79f9      	ldrb	r1, [r7, #7]
 8007696:	2304      	movs	r3, #4
 8007698:	2001      	movs	r0, #1
 800769a:	f000 f8cd 	bl	8007838 <sl_wfx_bus_access>
 800769e:	4603      	mov	r3, r0
}
 80076a0:	4618      	mov	r0, r3
 80076a2:	3710      	adds	r7, #16
 80076a4:	46bd      	mov	sp, r7
 80076a6:	bd80      	pop	{r7, pc}

080076a8 <sl_wfx_reg_read_32>:

sl_status_t sl_wfx_reg_read_32(sl_wfx_register_address_t address, uint32_t *value_out)
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b084      	sub	sp, #16
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	4603      	mov	r3, r0
 80076b0:	6039      	str	r1, [r7, #0]
 80076b2:	71fb      	strb	r3, [r7, #7]
  sl_status_t result = sl_wfx_bus_access(SL_WFX_BUS_READ, address, value_out, sizeof(*value_out));
 80076b4:	79f9      	ldrb	r1, [r7, #7]
 80076b6:	2304      	movs	r3, #4
 80076b8:	683a      	ldr	r2, [r7, #0]
 80076ba:	2002      	movs	r0, #2
 80076bc:	f000 f8bc 	bl	8007838 <sl_wfx_bus_access>
 80076c0:	60f8      	str	r0, [r7, #12]

  *value_out = sl_wfx_htole32(*value_out);
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	4618      	mov	r0, r3
 80076c8:	f7ff ffa6 	bl	8007618 <uint32_identity>
 80076cc:	4602      	mov	r2, r0
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	601a      	str	r2, [r3, #0]
                  (*value_out >> 16) & 0xFF,
                  (*value_out >> 8) & 0xFF,
                  *value_out & 0xFF);
#endif

  return result;
 80076d2:	68fb      	ldr	r3, [r7, #12]
}
 80076d4:	4618      	mov	r0, r3
 80076d6:	3710      	adds	r7, #16
 80076d8:	46bd      	mov	sp, r7
 80076da:	bd80      	pop	{r7, pc}

080076dc <sl_wfx_reg_write_32>:

sl_status_t sl_wfx_reg_write_32(sl_wfx_register_address_t address, uint32_t value_in)
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b082      	sub	sp, #8
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	4603      	mov	r3, r0
 80076e4:	6039      	str	r1, [r7, #0]
 80076e6:	71fb      	strb	r3, [r7, #7]
                  (value_in >> 16) & 0xFF,
                  (value_in >> 8) & 0xFF,
                  value_in & 0xFF);
#endif

  value_in = sl_wfx_htole32(value_in);
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	4618      	mov	r0, r3
 80076ec:	f7ff ff94 	bl	8007618 <uint32_identity>
 80076f0:	4603      	mov	r3, r0
 80076f2:	603b      	str	r3, [r7, #0]

  return sl_wfx_bus_access(SL_WFX_BUS_WRITE, address, &value_in, sizeof(value_in));
 80076f4:	463a      	mov	r2, r7
 80076f6:	79f9      	ldrb	r1, [r7, #7]
 80076f8:	2304      	movs	r3, #4
 80076fa:	2001      	movs	r0, #1
 80076fc:	f000 f89c 	bl	8007838 <sl_wfx_bus_access>
 8007700:	4603      	mov	r3, r0
}
 8007702:	4618      	mov	r0, r3
 8007704:	3708      	adds	r7, #8
 8007706:	46bd      	mov	sp, r7
 8007708:	bd80      	pop	{r7, pc}

0800770a <sl_wfx_data_read>:

sl_status_t sl_wfx_data_read(void *buffer, uint32_t length)
{
 800770a:	b580      	push	{r7, lr}
 800770c:	b084      	sub	sp, #16
 800770e:	af00      	add	r7, sp, #0
 8007710:	6078      	str	r0, [r7, #4]
 8007712:	6039      	str	r1, [r7, #0]
  sl_status_t result;

  result = sl_wfx_bus_access(SL_WFX_BUS_READ, SL_WFX_IN_OUT_QUEUE_REG_ID, buffer, length);
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	687a      	ldr	r2, [r7, #4]
 8007718:	2102      	movs	r1, #2
 800771a:	2002      	movs	r0, #2
 800771c:	f000 f88c 	bl	8007838 <sl_wfx_bus_access>
 8007720:	60f8      	str	r0, [r7, #12]
  }
#endif
  sl_wfx_host_log("\r\n");
#endif

  return result;
 8007722:	68fb      	ldr	r3, [r7, #12]
}
 8007724:	4618      	mov	r0, r3
 8007726:	3710      	adds	r7, #16
 8007728:	46bd      	mov	sp, r7
 800772a:	bd80      	pop	{r7, pc}

0800772c <sl_wfx_data_write>:

sl_status_t sl_wfx_data_write(const void *buffer, uint32_t length)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b084      	sub	sp, #16
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
 8007734:	6039      	str	r1, [r7, #0]
  }
#endif
  sl_wfx_host_log("\r\n");
#endif

  result = sl_wfx_bus_access(SL_WFX_BUS_WRITE, SL_WFX_IN_OUT_QUEUE_REG_ID, (void*) buffer, length);
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	687a      	ldr	r2, [r7, #4]
 800773a:	2102      	movs	r1, #2
 800773c:	2001      	movs	r0, #1
 800773e:	f000 f87b 	bl	8007838 <sl_wfx_bus_access>
 8007742:	60f8      	str	r0, [r7, #12]

  return result;
 8007744:	68fb      	ldr	r3, [r7, #12]
}
 8007746:	4618      	mov	r0, r3
 8007748:	3710      	adds	r7, #16
 800774a:	46bd      	mov	sp, r7
 800774c:	bd80      	pop	{r7, pc}

0800774e <sl_wfx_apb_write>:

sl_status_t sl_wfx_apb_write(uint32_t address, const void *buffer, uint32_t length)
{
 800774e:	b580      	push	{r7, lr}
 8007750:	b086      	sub	sp, #24
 8007752:	af00      	add	r7, sp, #0
 8007754:	60f8      	str	r0, [r7, #12]
 8007756:	60b9      	str	r1, [r7, #8]
 8007758:	607a      	str	r2, [r7, #4]
  sl_status_t result;
  if (length / 2 >= 0x1000) {
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007760:	d301      	bcc.n	8007766 <sl_wfx_apb_write+0x18>
    return SL_STATUS_INVALID_PARAMETER;
 8007762:	2321      	movs	r3, #33	; 0x21
 8007764:	e00f      	b.n	8007786 <sl_wfx_apb_write+0x38>
  }

  result = sl_wfx_reg_write_32(SL_WFX_SRAM_BASE_ADDR_REG_ID, address);
 8007766:	68f9      	ldr	r1, [r7, #12]
 8007768:	2004      	movs	r0, #4
 800776a:	f7ff ffb7 	bl	80076dc <sl_wfx_reg_write_32>
 800776e:	6178      	str	r0, [r7, #20]

  if (result == SL_STATUS_OK) {
 8007770:	697b      	ldr	r3, [r7, #20]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d106      	bne.n	8007784 <sl_wfx_apb_write+0x36>
    result = sl_wfx_bus_access(SL_WFX_BUS_WRITE, SL_WFX_SRAM_DPORT_REG_ID, (void*) buffer, length);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	68ba      	ldr	r2, [r7, #8]
 800777a:	2105      	movs	r1, #5
 800777c:	2001      	movs	r0, #1
 800777e:	f000 f85b 	bl	8007838 <sl_wfx_bus_access>
 8007782:	6178      	str	r0, [r7, #20]
  }

  return result;
 8007784:	697b      	ldr	r3, [r7, #20]
}
 8007786:	4618      	mov	r0, r3
 8007788:	3718      	adds	r7, #24
 800778a:	46bd      	mov	sp, r7
 800778c:	bd80      	pop	{r7, pc}

0800778e <sl_wfx_apb_write_32>:

sl_status_t sl_wfx_apb_write_32(uint32_t address, uint32_t value_in)
{
 800778e:	b580      	push	{r7, lr}
 8007790:	b084      	sub	sp, #16
 8007792:	af00      	add	r7, sp, #0
 8007794:	6078      	str	r0, [r7, #4]
 8007796:	6039      	str	r1, [r7, #0]
  sl_status_t result;

  result = sl_wfx_reg_write_32(SL_WFX_SRAM_BASE_ADDR_REG_ID, address);
 8007798:	6879      	ldr	r1, [r7, #4]
 800779a:	2004      	movs	r0, #4
 800779c:	f7ff ff9e 	bl	80076dc <sl_wfx_reg_write_32>
 80077a0:	60f8      	str	r0, [r7, #12]

  if (result == SL_STATUS_OK) {
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d104      	bne.n	80077b2 <sl_wfx_apb_write_32+0x24>
    result = sl_wfx_reg_write_32(SL_WFX_SRAM_DPORT_REG_ID, value_in);
 80077a8:	6839      	ldr	r1, [r7, #0]
 80077aa:	2005      	movs	r0, #5
 80077ac:	f7ff ff96 	bl	80076dc <sl_wfx_reg_write_32>
 80077b0:	60f8      	str	r0, [r7, #12]
  }

  return result;
 80077b2:	68fb      	ldr	r3, [r7, #12]
}
 80077b4:	4618      	mov	r0, r3
 80077b6:	3710      	adds	r7, #16
 80077b8:	46bd      	mov	sp, r7
 80077ba:	bd80      	pop	{r7, pc}

080077bc <sl_wfx_apb_read_32>:

sl_status_t sl_wfx_apb_read_32(uint32_t address, uint32_t *value_out)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b086      	sub	sp, #24
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
 80077c4:	6039      	str	r1, [r7, #0]
  uint32_t value32;
  sl_status_t result;

  // write address
  result = sl_wfx_reg_write_32(SL_WFX_SRAM_BASE_ADDR_REG_ID, address);
 80077c6:	6879      	ldr	r1, [r7, #4]
 80077c8:	2004      	movs	r0, #4
 80077ca:	f7ff ff87 	bl	80076dc <sl_wfx_reg_write_32>
 80077ce:	6138      	str	r0, [r7, #16]

  // set the "prefetch" bit
  result = sl_wfx_reg_read_32(SL_WFX_CONFIG_REG_ID, &value32);
 80077d0:	f107 030c 	add.w	r3, r7, #12
 80077d4:	4619      	mov	r1, r3
 80077d6:	2000      	movs	r0, #0
 80077d8:	f7ff ff66 	bl	80076a8 <sl_wfx_reg_read_32>
 80077dc:	6138      	str	r0, [r7, #16]
  result = sl_wfx_reg_write_32(SL_WFX_CONFIG_REG_ID, value32 | CONFIG_PREFETCH_BIT);
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80077e4:	4619      	mov	r1, r3
 80077e6:	2000      	movs	r0, #0
 80077e8:	f7ff ff78 	bl	80076dc <sl_wfx_reg_write_32>
 80077ec:	6138      	str	r0, [r7, #16]

  // and wait for the prefetch bit to clear
  for (uint32_t i = 0; i < 20; i++) {
 80077ee:	2300      	movs	r3, #0
 80077f0:	617b      	str	r3, [r7, #20]
 80077f2:	e011      	b.n	8007818 <sl_wfx_apb_read_32+0x5c>
    result = sl_wfx_reg_read_32(SL_WFX_CONFIG_REG_ID, &value32);
 80077f4:	f107 030c 	add.w	r3, r7, #12
 80077f8:	4619      	mov	r1, r3
 80077fa:	2000      	movs	r0, #0
 80077fc:	f7ff ff54 	bl	80076a8 <sl_wfx_reg_read_32>
 8007800:	6138      	str	r0, [r7, #16]
    if ((value32 & CONFIG_PREFETCH_BIT) == 0) {
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007808:	2b00      	cmp	r3, #0
 800780a:	d009      	beq.n	8007820 <sl_wfx_apb_read_32+0x64>
      break;
    }

    sl_wfx_host_wait(1);
 800780c:	2001      	movs	r0, #1
 800780e:	f001 fb7f 	bl	8008f10 <sl_wfx_host_wait>
  for (uint32_t i = 0; i < 20; i++) {
 8007812:	697b      	ldr	r3, [r7, #20]
 8007814:	3301      	adds	r3, #1
 8007816:	617b      	str	r3, [r7, #20]
 8007818:	697b      	ldr	r3, [r7, #20]
 800781a:	2b13      	cmp	r3, #19
 800781c:	d9ea      	bls.n	80077f4 <sl_wfx_apb_read_32+0x38>
 800781e:	e000      	b.n	8007822 <sl_wfx_apb_read_32+0x66>
      break;
 8007820:	bf00      	nop
  }

  // and data is ready
  result = sl_wfx_reg_read_32(SL_WFX_SRAM_DPORT_REG_ID, value_out);
 8007822:	6839      	ldr	r1, [r7, #0]
 8007824:	2005      	movs	r0, #5
 8007826:	f7ff ff3f 	bl	80076a8 <sl_wfx_reg_read_32>
 800782a:	6138      	str	r0, [r7, #16]

  return result;
 800782c:	693b      	ldr	r3, [r7, #16]
}
 800782e:	4618      	mov	r0, r3
 8007830:	3718      	adds	r7, #24
 8007832:	46bd      	mov	sp, r7
 8007834:	bd80      	pop	{r7, pc}
	...

08007838 <sl_wfx_bus_access>:

static sl_status_t sl_wfx_bus_access(sl_wfx_host_bus_transfer_type_t type,
                                     sl_wfx_register_address_t address,
                                     void *buffer,
                                     uint32_t length)
{
 8007838:	b580      	push	{r7, lr}
 800783a:	b086      	sub	sp, #24
 800783c:	af00      	add	r7, sp, #0
 800783e:	60ba      	str	r2, [r7, #8]
 8007840:	607b      	str	r3, [r7, #4]
 8007842:	4603      	mov	r3, r0
 8007844:	73fb      	strb	r3, [r7, #15]
 8007846:	460b      	mov	r3, r1
 8007848:	73bb      	strb	r3, [r7, #14]
  sl_status_t result;

  /* If the WFx is sleeping, wake it up */
  if (sl_wfx_context->state & SL_WFX_SLEEPING) {
 800784a:	4b46      	ldr	r3, [pc, #280]	; (8007964 <sl_wfx_bus_access+0x12c>)
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f893 3222 	ldrb.w	r3, [r3, #546]	; 0x222
 8007852:	f003 0308 	and.w	r3, r3, #8
 8007856:	2b00      	cmp	r3, #0
 8007858:	d01a      	beq.n	8007890 <sl_wfx_bus_access+0x58>
    result = sl_wfx_host_set_wake_up_pin(1);
 800785a:	2001      	movs	r0, #1
 800785c:	f001 fad2 	bl	8008e04 <sl_wfx_host_set_wake_up_pin>
 8007860:	6178      	str	r0, [r7, #20]
    SL_WFX_ERROR_CHECK(result);
 8007862:	697b      	ldr	r3, [r7, #20]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d171      	bne.n	800794c <sl_wfx_bus_access+0x114>
    /* If the command is of read type, consider the WFx awake */
    if (type == SL_WFX_BUS_WRITE) {
 8007868:	7bfb      	ldrb	r3, [r7, #15]
 800786a:	2b01      	cmp	r3, #1
 800786c:	d105      	bne.n	800787a <sl_wfx_bus_access+0x42>
      result = sl_wfx_host_wait_for_wake_up();
 800786e:	f001 fae5 	bl	8008e3c <sl_wfx_host_wait_for_wake_up>
 8007872:	6178      	str	r0, [r7, #20]
      SL_WFX_ERROR_CHECK(result);
 8007874:	697b      	ldr	r3, [r7, #20]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d16a      	bne.n	8007950 <sl_wfx_bus_access+0x118>
    }
    sl_wfx_context->state &= ~SL_WFX_SLEEPING;
 800787a:	4b3a      	ldr	r3, [pc, #232]	; (8007964 <sl_wfx_bus_access+0x12c>)
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f893 2222 	ldrb.w	r2, [r3, #546]	; 0x222
 8007882:	4b38      	ldr	r3, [pc, #224]	; (8007964 <sl_wfx_bus_access+0x12c>)
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f022 0208 	bic.w	r2, r2, #8
 800788a:	b2d2      	uxtb	r2, r2
 800788c:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222
    sl_wfx_host_log("WFx awake\r\n");
#endif
  }

  /* Send the communication on the bus */
  if (type == SL_WFX_BUS_READ) {
 8007890:	7bfb      	ldrb	r3, [r7, #15]
 8007892:	2b02      	cmp	r3, #2
 8007894:	d107      	bne.n	80078a6 <sl_wfx_bus_access+0x6e>
    result = sl_wfx_reg_read(address, buffer, length);
 8007896:	7bbb      	ldrb	r3, [r7, #14]
 8007898:	687a      	ldr	r2, [r7, #4]
 800789a:	68b9      	ldr	r1, [r7, #8]
 800789c:	4618      	mov	r0, r3
 800789e:	f000 f863 	bl	8007968 <sl_wfx_reg_read>
 80078a2:	6178      	str	r0, [r7, #20]
 80078a4:	e00c      	b.n	80078c0 <sl_wfx_bus_access+0x88>
  } else if (type == SL_WFX_BUS_WRITE) {
 80078a6:	7bfb      	ldrb	r3, [r7, #15]
 80078a8:	2b01      	cmp	r3, #1
 80078aa:	d107      	bne.n	80078bc <sl_wfx_bus_access+0x84>
    result = sl_wfx_reg_write(address, buffer, length);
 80078ac:	7bbb      	ldrb	r3, [r7, #14]
 80078ae:	687a      	ldr	r2, [r7, #4]
 80078b0:	68b9      	ldr	r1, [r7, #8]
 80078b2:	4618      	mov	r0, r3
 80078b4:	f000 f8a4 	bl	8007a00 <sl_wfx_reg_write>
 80078b8:	6178      	str	r0, [r7, #20]
 80078ba:	e001      	b.n	80078c0 <sl_wfx_bus_access+0x88>
  } else {
    result = SL_STATUS_INVALID_PARAMETER;
 80078bc:	2321      	movs	r3, #33	; 0x21
 80078be:	617b      	str	r3, [r7, #20]
  }
  SL_WFX_ERROR_CHECK(result);
 80078c0:	697b      	ldr	r3, [r7, #20]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d146      	bne.n	8007954 <sl_wfx_bus_access+0x11c>

  /* If the power save is active and there is no confirmation pending, put
     the WFx back to sleep */
  if ((sl_wfx_context->state & SL_WFX_POWER_SAVE_ACTIVE)
 80078c6:	4b27      	ldr	r3, [pc, #156]	; (8007964 <sl_wfx_bus_access+0x12c>)
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f893 3222 	ldrb.w	r3, [r3, #546]	; 0x222
 80078ce:	f003 0310 	and.w	r3, r3, #16
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d040      	beq.n	8007958 <sl_wfx_bus_access+0x120>
      && (type == SL_WFX_BUS_READ)
 80078d6:	7bfb      	ldrb	r3, [r7, #15]
 80078d8:	2b02      	cmp	r3, #2
 80078da:	d13d      	bne.n	8007958 <sl_wfx_bus_access+0x120>
      && ((address != SL_WFX_CONTROL_REG_ID)
 80078dc:	7bbb      	ldrb	r3, [r7, #14]
 80078de:	2b01      	cmp	r3, #1
 80078e0:	d108      	bne.n	80078f4 <sl_wfx_bus_access+0xbc>
          || ((address == SL_WFX_CONTROL_REG_ID) && ((*(uint16_t *)buffer & SL_WFX_CONT_NEXT_LEN_MASK) == 0)))
 80078e2:	7bbb      	ldrb	r3, [r7, #14]
 80078e4:	2b01      	cmp	r3, #1
 80078e6:	d137      	bne.n	8007958 <sl_wfx_bus_access+0x120>
 80078e8:	68bb      	ldr	r3, [r7, #8]
 80078ea:	881b      	ldrh	r3, [r3, #0]
 80078ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d131      	bne.n	8007958 <sl_wfx_bus_access+0x120>
      && (sl_wfx_context->used_buffers <= 1)
 80078f4:	4b1b      	ldr	r3, [pc, #108]	; (8007964 <sl_wfx_bus_access+0x12c>)
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
 80078fc:	2b01      	cmp	r3, #1
 80078fe:	d82b      	bhi.n	8007958 <sl_wfx_bus_access+0x120>
      && ((*((uint16_t *)((uint8_t *)buffer + length - SL_WFX_CONT_REGISTER_SIZE)) & SL_WFX_CONT_NEXT_LEN_MASK) == 0)) {
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	3b02      	subs	r3, #2
 8007904:	68ba      	ldr	r2, [r7, #8]
 8007906:	4413      	add	r3, r2
 8007908:	881b      	ldrh	r3, [r3, #0]
 800790a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800790e:	2b00      	cmp	r3, #0
 8007910:	d122      	bne.n	8007958 <sl_wfx_bus_access+0x120>
    /* Ask the host opinion on whether the WFx should be put back to sleep or
       not*/
    if (sl_wfx_host_sleep_grant(type, address, length) == SL_STATUS_WIFI_SLEEP_GRANTED) {
 8007912:	7bb9      	ldrb	r1, [r7, #14]
 8007914:	7bfb      	ldrb	r3, [r7, #15]
 8007916:	687a      	ldr	r2, [r7, #4]
 8007918:	4618      	mov	r0, r3
 800791a:	f001 faa3 	bl	8008e64 <sl_wfx_host_sleep_grant>
 800791e:	4603      	mov	r3, r0
 8007920:	f640 3208 	movw	r2, #2824	; 0xb08
 8007924:	4293      	cmp	r3, r2
 8007926:	d117      	bne.n	8007958 <sl_wfx_bus_access+0x120>
      sl_wfx_context->state |= SL_WFX_SLEEPING;
 8007928:	4b0e      	ldr	r3, [pc, #56]	; (8007964 <sl_wfx_bus_access+0x12c>)
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f893 2222 	ldrb.w	r2, [r3, #546]	; 0x222
 8007930:	4b0c      	ldr	r3, [pc, #48]	; (8007964 <sl_wfx_bus_access+0x12c>)
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f042 0208 	orr.w	r2, r2, #8
 8007938:	b2d2      	uxtb	r2, r2
 800793a:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222
      result = sl_wfx_host_set_wake_up_pin(0);
 800793e:	2000      	movs	r0, #0
 8007940:	f001 fa60 	bl	8008e04 <sl_wfx_host_set_wake_up_pin>
 8007944:	6178      	str	r0, [r7, #20]
      SL_WFX_ERROR_CHECK(result);
 8007946:	697b      	ldr	r3, [r7, #20]
 8007948:	2b00      	cmp	r3, #0
      sl_wfx_host_log("WFx sleeping\r\n");
#endif
    }
  }

  error_handler:
 800794a:	e005      	b.n	8007958 <sl_wfx_bus_access+0x120>
    SL_WFX_ERROR_CHECK(result);
 800794c:	bf00      	nop
 800794e:	e004      	b.n	800795a <sl_wfx_bus_access+0x122>
      SL_WFX_ERROR_CHECK(result);
 8007950:	bf00      	nop
 8007952:	e002      	b.n	800795a <sl_wfx_bus_access+0x122>
  SL_WFX_ERROR_CHECK(result);
 8007954:	bf00      	nop
 8007956:	e000      	b.n	800795a <sl_wfx_bus_access+0x122>
  error_handler:
 8007958:	bf00      	nop
  return result;
 800795a:	697b      	ldr	r3, [r7, #20]
}
 800795c:	4618      	mov	r0, r3
 800795e:	3718      	adds	r7, #24
 8007960:	46bd      	mov	sp, r7
 8007962:	bd80      	pop	{r7, pc}
 8007964:	20000898 	.word	0x20000898

08007968 <sl_wfx_reg_read>:

#define SET_WRITE 0x7FFF /* usage: and operation */
#define SET_READ 0x8000  /* usage: or operation */

sl_status_t sl_wfx_reg_read(sl_wfx_register_address_t address, void *buffer, uint32_t length)
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b08a      	sub	sp, #40	; 0x28
 800796c:	af02      	add	r7, sp, #8
 800796e:	4603      	mov	r3, r0
 8007970:	60b9      	str	r1, [r7, #8]
 8007972:	607a      	str	r2, [r7, #4]
 8007974:	73fb      	strb	r3, [r7, #15]
  uint16_t header = SET_READ | (address << 12) | (length / 2);
 8007976:	7bfb      	ldrb	r3, [r7, #15]
 8007978:	b29b      	uxth	r3, r3
 800797a:	031b      	lsls	r3, r3, #12
 800797c:	b29a      	uxth	r2, r3
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	085b      	lsrs	r3, r3, #1
 8007982:	b29b      	uxth	r3, r3
 8007984:	4313      	orrs	r3, r2
 8007986:	b29b      	uxth	r3, r3
 8007988:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800798c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007990:	83fb      	strh	r3, [r7, #30]

  uint8_t header_as_bytes[2];
  sl_wfx_pack_16bit_big_endian(header_as_bytes, header);
 8007992:	8bfb      	ldrh	r3, [r7, #30]
 8007994:	0a1b      	lsrs	r3, r3, #8
 8007996:	b29b      	uxth	r3, r3
 8007998:	b2db      	uxtb	r3, r3
 800799a:	753b      	strb	r3, [r7, #20]
 800799c:	8bfb      	ldrh	r3, [r7, #30]
 800799e:	b2db      	uxtb	r3, r3
 80079a0:	757b      	strb	r3, [r7, #21]

  sl_wfx_host_spi_cs_assert();
 80079a2:	f002 f8ab 	bl	8009afc <sl_wfx_host_spi_cs_assert>
  sl_wfx_host_spi_transfer_no_cs_assert(SL_WFX_BUS_READ, header_as_bytes, 2, (uint8_t *)buffer, length);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	b29b      	uxth	r3, r3
 80079aa:	f107 0114 	add.w	r1, r7, #20
 80079ae:	9300      	str	r3, [sp, #0]
 80079b0:	68bb      	ldr	r3, [r7, #8]
 80079b2:	2202      	movs	r2, #2
 80079b4:	2002      	movs	r0, #2
 80079b6:	f002 f8b9 	bl	8009b2c <sl_wfx_host_spi_transfer_no_cs_assert>
  sl_wfx_host_spi_cs_deassert();
 80079ba:	f002 f8ab 	bl	8009b14 <sl_wfx_host_spi_cs_deassert>

  if (address == SL_WFX_CONFIG_REG_ID) {
 80079be:	7bfb      	ldrb	r3, [r7, #15]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d118      	bne.n	80079f6 <sl_wfx_reg_read+0x8e>
    // Config always read/written in "word mode 0"
    // that is, its byte-order looks like that
    // B1 B0 B3 B2
    // here is this rearrangement
    uint8_t *tmp = (uint8_t *)buffer;
 80079c4:	68bb      	ldr	r3, [r7, #8]
 80079c6:	61bb      	str	r3, [r7, #24]
    uint8_t byte_swap = tmp[0];
 80079c8:	69bb      	ldr	r3, [r7, #24]
 80079ca:	781b      	ldrb	r3, [r3, #0]
 80079cc:	75fb      	strb	r3, [r7, #23]
    tmp[0] = tmp[1];
 80079ce:	69bb      	ldr	r3, [r7, #24]
 80079d0:	785a      	ldrb	r2, [r3, #1]
 80079d2:	69bb      	ldr	r3, [r7, #24]
 80079d4:	701a      	strb	r2, [r3, #0]
    tmp[1] = byte_swap;
 80079d6:	69bb      	ldr	r3, [r7, #24]
 80079d8:	3301      	adds	r3, #1
 80079da:	7dfa      	ldrb	r2, [r7, #23]
 80079dc:	701a      	strb	r2, [r3, #0]

    byte_swap = tmp[2];
 80079de:	69bb      	ldr	r3, [r7, #24]
 80079e0:	789b      	ldrb	r3, [r3, #2]
 80079e2:	75fb      	strb	r3, [r7, #23]
    tmp[2] = tmp[3];
 80079e4:	69bb      	ldr	r3, [r7, #24]
 80079e6:	3302      	adds	r3, #2
 80079e8:	69ba      	ldr	r2, [r7, #24]
 80079ea:	78d2      	ldrb	r2, [r2, #3]
 80079ec:	701a      	strb	r2, [r3, #0]
    tmp[3] = byte_swap;
 80079ee:	69bb      	ldr	r3, [r7, #24]
 80079f0:	3303      	adds	r3, #3
 80079f2:	7dfa      	ldrb	r2, [r7, #23]
 80079f4:	701a      	strb	r2, [r3, #0]
  }

  return SL_STATUS_OK;
 80079f6:	2300      	movs	r3, #0
}
 80079f8:	4618      	mov	r0, r3
 80079fa:	3720      	adds	r7, #32
 80079fc:	46bd      	mov	sp, r7
 80079fe:	bd80      	pop	{r7, pc}

08007a00 <sl_wfx_reg_write>:

sl_status_t sl_wfx_reg_write(sl_wfx_register_address_t address, const void *buffer, uint32_t length)
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b08a      	sub	sp, #40	; 0x28
 8007a04:	af02      	add	r7, sp, #8
 8007a06:	4603      	mov	r3, r0
 8007a08:	60b9      	str	r1, [r7, #8]
 8007a0a:	607a      	str	r2, [r7, #4]
 8007a0c:	73fb      	strb	r3, [r7, #15]
  if (address == SL_WFX_CONFIG_REG_ID) {
 8007a0e:	7bfb      	ldrb	r3, [r7, #15]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d118      	bne.n	8007a46 <sl_wfx_reg_write+0x46>
    // Config always read/written in "word mode 0"
    // that is, its byte-order looks like that
    // B1 B0 B3 B2
    // here is this rearrangement
    uint8_t *tmp = (uint8_t *)buffer;
 8007a14:	68bb      	ldr	r3, [r7, #8]
 8007a16:	61fb      	str	r3, [r7, #28]
    uint8_t byte_swap = tmp[0];
 8007a18:	69fb      	ldr	r3, [r7, #28]
 8007a1a:	781b      	ldrb	r3, [r3, #0]
 8007a1c:	76fb      	strb	r3, [r7, #27]
    tmp[0] = tmp[1];
 8007a1e:	69fb      	ldr	r3, [r7, #28]
 8007a20:	785a      	ldrb	r2, [r3, #1]
 8007a22:	69fb      	ldr	r3, [r7, #28]
 8007a24:	701a      	strb	r2, [r3, #0]
    tmp[1] = byte_swap;
 8007a26:	69fb      	ldr	r3, [r7, #28]
 8007a28:	3301      	adds	r3, #1
 8007a2a:	7efa      	ldrb	r2, [r7, #27]
 8007a2c:	701a      	strb	r2, [r3, #0]

    byte_swap = tmp[2];
 8007a2e:	69fb      	ldr	r3, [r7, #28]
 8007a30:	789b      	ldrb	r3, [r3, #2]
 8007a32:	76fb      	strb	r3, [r7, #27]
    tmp[2] = tmp[3];
 8007a34:	69fb      	ldr	r3, [r7, #28]
 8007a36:	3302      	adds	r3, #2
 8007a38:	69fa      	ldr	r2, [r7, #28]
 8007a3a:	78d2      	ldrb	r2, [r2, #3]
 8007a3c:	701a      	strb	r2, [r3, #0]
    tmp[3] = byte_swap;
 8007a3e:	69fb      	ldr	r3, [r7, #28]
 8007a40:	3303      	adds	r3, #3
 8007a42:	7efa      	ldrb	r2, [r7, #27]
 8007a44:	701a      	strb	r2, [r3, #0]
  }

  uint16_t header = /* write flag = 0*/ (address << 12) | (length / 2);
 8007a46:	7bfb      	ldrb	r3, [r7, #15]
 8007a48:	b29b      	uxth	r3, r3
 8007a4a:	031b      	lsls	r3, r3, #12
 8007a4c:	b29a      	uxth	r2, r3
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	085b      	lsrs	r3, r3, #1
 8007a52:	b29b      	uxth	r3, r3
 8007a54:	4313      	orrs	r3, r2
 8007a56:	833b      	strh	r3, [r7, #24]

  uint8_t header_as_bytes[2];
  sl_wfx_pack_16bit_big_endian(header_as_bytes, header);
 8007a58:	8b3b      	ldrh	r3, [r7, #24]
 8007a5a:	0a1b      	lsrs	r3, r3, #8
 8007a5c:	b29b      	uxth	r3, r3
 8007a5e:	b2db      	uxtb	r3, r3
 8007a60:	753b      	strb	r3, [r7, #20]
 8007a62:	8b3b      	ldrh	r3, [r7, #24]
 8007a64:	b2db      	uxtb	r3, r3
 8007a66:	757b      	strb	r3, [r7, #21]

  sl_wfx_host_spi_cs_assert();
 8007a68:	f002 f848 	bl	8009afc <sl_wfx_host_spi_cs_assert>
  /* Note: sl_wfx_host_spi_transfer_no_cs_assert() does not modify the buffer when doing SL_WFX_BUS_WRITE */
  sl_wfx_host_spi_transfer_no_cs_assert(SL_WFX_BUS_WRITE, header_as_bytes, 2, (uint8_t *)buffer, length);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	b29b      	uxth	r3, r3
 8007a70:	f107 0114 	add.w	r1, r7, #20
 8007a74:	9300      	str	r3, [sp, #0]
 8007a76:	68bb      	ldr	r3, [r7, #8]
 8007a78:	2202      	movs	r2, #2
 8007a7a:	2001      	movs	r0, #1
 8007a7c:	f002 f856 	bl	8009b2c <sl_wfx_host_spi_transfer_no_cs_assert>
  sl_wfx_host_spi_cs_deassert();
 8007a80:	f002 f848 	bl	8009b14 <sl_wfx_host_spi_cs_deassert>

  return SL_STATUS_OK;
 8007a84:	2300      	movs	r3, #0
}
 8007a86:	4618      	mov	r0, r3
 8007a88:	3720      	adds	r7, #32
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	bd80      	pop	{r7, pc}
	...

08007a90 <sl_wfx_init_bus>:

sl_status_t sl_wfx_init_bus(void)
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b082      	sub	sp, #8
 8007a94:	af00      	add	r7, sp, #0
  sl_status_t status;
  uint32_t value32;

  status = sl_wfx_host_init_bus();
 8007a96:	f002 f80b 	bl	8009ab0 <sl_wfx_host_init_bus>
 8007a9a:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(status);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d12b      	bne.n	8007afa <sl_wfx_init_bus+0x6a>

  sl_wfx_host_reset_chip();
 8007aa2:	f001 f997 	bl	8008dd4 <sl_wfx_host_reset_chip>

  status = sl_wfx_reg_read_32(SL_WFX_CONFIG_REG_ID, &value32);
 8007aa6:	463b      	mov	r3, r7
 8007aa8:	4619      	mov	r1, r3
 8007aaa:	2000      	movs	r0, #0
 8007aac:	f7ff fdfc 	bl	80076a8 <sl_wfx_reg_read_32>
 8007ab0:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(status);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d122      	bne.n	8007afe <sl_wfx_init_bus+0x6e>

  if (value32 == 0 || value32 == 0xFFFFFFFF) {
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d003      	beq.n	8007ac6 <sl_wfx_init_bus+0x36>
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ac4:	d104      	bne.n	8007ad0 <sl_wfx_init_bus+0x40>
    status = SL_STATUS_FAIL;
 8007ac6:	2301      	movs	r3, #1
 8007ac8:	607b      	str	r3, [r7, #4]
    SL_WFX_ERROR_CHECK(status);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d118      	bne.n	8007b02 <sl_wfx_init_bus+0x72>
  }

  // setting up "word mode = b10", this means that data on SPI bus
  // is sent as B0, B1, B2, B3 , ....
  value32 &= ~SL_WFX_CONFIG_WORD_MODE_BITS;
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ad6:	603b      	str	r3, [r7, #0]
  value32 |= SL_WFX_CONFIG_WORD_MODE_2;
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007ade:	603b      	str	r3, [r7, #0]

  /* Write CONFIG Register to configure SPI clock edge to support high frequency*/
  value32 |= 0x04045400;
 8007ae0:	683a      	ldr	r2, [r7, #0]
 8007ae2:	4b0b      	ldr	r3, [pc, #44]	; (8007b10 <sl_wfx_init_bus+0x80>)
 8007ae4:	4313      	orrs	r3, r2
 8007ae6:	603b      	str	r3, [r7, #0]

  status = sl_wfx_reg_write_32(SL_WFX_CONFIG_REG_ID, value32);
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	4619      	mov	r1, r3
 8007aec:	2000      	movs	r0, #0
 8007aee:	f7ff fdf5 	bl	80076dc <sl_wfx_reg_write_32>
 8007af2:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(status);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2b00      	cmp	r3, #0

  error_handler:
 8007af8:	e004      	b.n	8007b04 <sl_wfx_init_bus+0x74>
  SL_WFX_ERROR_CHECK(status);
 8007afa:	bf00      	nop
 8007afc:	e002      	b.n	8007b04 <sl_wfx_init_bus+0x74>
  SL_WFX_ERROR_CHECK(status);
 8007afe:	bf00      	nop
 8007b00:	e000      	b.n	8007b04 <sl_wfx_init_bus+0x74>
    SL_WFX_ERROR_CHECK(status);
 8007b02:	bf00      	nop
  return status;
 8007b04:	687b      	ldr	r3, [r7, #4]
}
 8007b06:	4618      	mov	r0, r3
 8007b08:	3708      	adds	r7, #8
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	bd80      	pop	{r7, pc}
 8007b0e:	bf00      	nop
 8007b10:	04045400 	.word	0x04045400

08007b14 <sl_wfx_deinit_bus>:

sl_status_t sl_wfx_deinit_bus(void)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	af00      	add	r7, sp, #0
  return sl_wfx_host_deinit_bus();
 8007b18:	f001 ffe2 	bl	8009ae0 <sl_wfx_host_deinit_bus>
 8007b1c:	4603      	mov	r3, r0
}
 8007b1e:	4618      	mov	r0, r3
 8007b20:	bd80      	pop	{r7, pc}

08007b22 <uint16_identity>:
{
 8007b22:	b480      	push	{r7}
 8007b24:	b083      	sub	sp, #12
 8007b26:	af00      	add	r7, sp, #0
 8007b28:	4603      	mov	r3, r0
 8007b2a:	80fb      	strh	r3, [r7, #6]
  return x;
 8007b2c:	88fb      	ldrh	r3, [r7, #6]
}
 8007b2e:	4618      	mov	r0, r3
 8007b30:	370c      	adds	r7, #12
 8007b32:	46bd      	mov	sp, r7
 8007b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b38:	4770      	bx	lr

08007b3a <uint32_identity>:
{
 8007b3a:	b480      	push	{r7}
 8007b3c:	b083      	sub	sp, #12
 8007b3e:	af00      	add	r7, sp, #0
 8007b40:	6078      	str	r0, [r7, #4]
  return x;
 8007b42:	687b      	ldr	r3, [r7, #4]
}
 8007b44:	4618      	mov	r0, r3
 8007b46:	370c      	adds	r7, #12
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4e:	4770      	bx	lr

08007b50 <sl_wfx_init>:
 * SL_STATUS_FAIL otherwise
 *
 * @note Actions performed by sl_wfx_init(): Reset -> load firmware -> send PDS
 *****************************************************************************/
sl_status_t sl_wfx_init(sl_wfx_context_t *context)
{
 8007b50:	b590      	push	{r4, r7, lr}
 8007b52:	b089      	sub	sp, #36	; 0x24
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
  const char           *pds_data;
#ifdef SL_WFX_USE_SECURE_LINK
  sl_wfx_secure_link_mode_t link_mode;
#endif

  memset(context, 0, sizeof(*context) );
 8007b58:	f44f 7209 	mov.w	r2, #548	; 0x224
 8007b5c:	2100      	movs	r1, #0
 8007b5e:	6878      	ldr	r0, [r7, #4]
 8007b60:	f012 ff26 	bl	801a9b0 <memset>

  sl_wfx_context = context;
 8007b64:	4a6b      	ldr	r2, [pc, #428]	; (8007d14 <sl_wfx_init+0x1c4>)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	6013      	str	r3, [r2, #0]
  sl_wfx_context->used_buffers = 0;
 8007b6a:	4b6a      	ldr	r3, [pc, #424]	; (8007d14 <sl_wfx_init+0x1c4>)
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	2200      	movs	r2, #0
 8007b70:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206

  result = sl_wfx_init_bus(  );
 8007b74:	f7ff ff8c 	bl	8007a90 <sl_wfx_init_bus>
 8007b78:	61f8      	str	r0, [r7, #28]
  SL_WFX_ERROR_CHECK(result);
 8007b7a:	69fb      	ldr	r3, [r7, #28]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	f040 80a5 	bne.w	8007ccc <sl_wfx_init+0x17c>
#if (SL_WFX_DEBUG_MASK & SL_WFX_DEBUG_INIT)
  sl_wfx_host_log("--Bus initialized--\r\n");
#endif

  result = sl_wfx_init_chip( );
 8007b82:	f000 fc2d 	bl	80083e0 <sl_wfx_init_chip>
 8007b86:	61f8      	str	r0, [r7, #28]
  SL_WFX_ERROR_CHECK(result);
 8007b88:	69fb      	ldr	r3, [r7, #28]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	f040 80a0 	bne.w	8007cd0 <sl_wfx_init+0x180>
#if (SL_WFX_DEBUG_MASK & SL_WFX_DEBUG_INIT)
  sl_wfx_host_log("--Chip initialized--\r\n");
#endif

  result = sl_wfx_download_run_bootloader();
 8007b90:	f000 fcd0 	bl	8008534 <sl_wfx_download_run_bootloader>
 8007b94:	61f8      	str	r0, [r7, #28]
  SL_WFX_ERROR_CHECK(result);
 8007b96:	69fb      	ldr	r3, [r7, #28]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	f040 809b 	bne.w	8007cd4 <sl_wfx_init+0x184>
#if (SL_WFX_DEBUG_MASK & SL_WFX_DEBUG_INIT)
  sl_wfx_host_log("--Bootloader running--\r\n");
#endif

  result = sl_wfx_host_setup_waited_event(SL_WFX_STARTUP_IND_ID);
 8007b9e:	20e1      	movs	r0, #225	; 0xe1
 8007ba0:	f001 f970 	bl	8008e84 <sl_wfx_host_setup_waited_event>
 8007ba4:	61f8      	str	r0, [r7, #28]
  SL_WFX_ERROR_CHECK(result);
 8007ba6:	69fb      	ldr	r3, [r7, #28]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	f040 8095 	bne.w	8007cd8 <sl_wfx_init+0x188>

  /* Downloading Wi-Fi chip firmware */
  result = sl_wfx_download_run_firmware( );
 8007bae:	f000 fd13 	bl	80085d8 <sl_wfx_download_run_firmware>
 8007bb2:	61f8      	str	r0, [r7, #28]
  SL_WFX_ERROR_CHECK(result);
 8007bb4:	69fb      	ldr	r3, [r7, #28]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	f040 8090 	bne.w	8007cdc <sl_wfx_init+0x18c>
#if (SL_WFX_DEBUG_MASK & SL_WFX_DEBUG_INIT)
  sl_wfx_host_log("--Firmware downloaded--\r\n");
#endif

  result = sl_wfx_enable_irq(  );
 8007bbc:	f000 fba4 	bl	8008308 <sl_wfx_enable_irq>
 8007bc0:	61f8      	str	r0, [r7, #28]
  SL_WFX_ERROR_CHECK(result);
 8007bc2:	69fb      	ldr	r3, [r7, #28]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	f040 808b 	bne.w	8007ce0 <sl_wfx_init+0x190>

  result = sl_wfx_set_access_mode_message(  );
 8007bca:	f000 fbeb 	bl	80083a4 <sl_wfx_set_access_mode_message>
 8007bce:	61f8      	str	r0, [r7, #28]
  SL_WFX_ERROR_CHECK(result);
 8007bd0:	69fb      	ldr	r3, [r7, #28]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	f040 8086 	bne.w	8007ce4 <sl_wfx_init+0x194>
#if (SL_WFX_DEBUG_MASK & SL_WFX_DEBUG_INIT)
  sl_wfx_host_log("--Message mode set--\r\n");
#endif

  /* Waiting for the startup indication from Wi-Fi chip, SL_WFX_STARTUP_IND_ID */
  result = sl_wfx_host_wait_for_confirmation(SL_WFX_STARTUP_IND_ID,
 8007bd8:	f107 0314 	add.w	r3, r7, #20
 8007bdc:	461a      	mov	r2, r3
 8007bde:	f241 3188 	movw	r1, #5000	; 0x1388
 8007be2:	20e1      	movs	r0, #225	; 0xe1
 8007be4:	f001 f960 	bl	8008ea8 <sl_wfx_host_wait_for_confirmation>
 8007be8:	61f8      	str	r0, [r7, #28]
                                             SL_WFX_DEFAULT_REQUEST_TIMEOUT_MS,
                                             (void **)&startup_info);
  SL_WFX_ERROR_CHECK(result);
 8007bea:	69fb      	ldr	r3, [r7, #28]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d17b      	bne.n	8007ce8 <sl_wfx_init+0x198>

  /* Store the firware version in the context */
  context->firmware_build = startup_info->body.firmware_build;
 8007bf0:	697b      	ldr	r3, [r7, #20]
 8007bf2:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  context->firmware_minor = startup_info->body.firmware_minor;
 8007bfc:	697b      	ldr	r3, [r7, #20]
 8007bfe:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
  context->firmware_major = startup_info->body.firmware_major;
 8007c08:	697b      	ldr	r3, [r7, #20]
 8007c0a:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	f883 2202 	strb.w	r2, [r3, #514]	; 0x202

  /* Storing mac addresses from Wi-Fi chip in the context  */
  memcpy(&(context->mac_addr_0.octet),
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	f203 2016 	addw	r0, r3, #534	; 0x216
         startup_info->body.mac_addr[0],
 8007c1a:	697b      	ldr	r3, [r7, #20]
 8007c1c:	3326      	adds	r3, #38	; 0x26
  memcpy(&(context->mac_addr_0.octet),
 8007c1e:	2206      	movs	r2, #6
 8007c20:	4619      	mov	r1, r3
 8007c22:	f012 feb7 	bl	801a994 <memcpy>
         sizeof(sl_wfx_mac_address_t));
  memcpy(&(context->mac_addr_1.octet),
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	f503 7007 	add.w	r0, r3, #540	; 0x21c
         startup_info->body.mac_addr[1],
 8007c2c:	697b      	ldr	r3, [r7, #20]
 8007c2e:	332c      	adds	r3, #44	; 0x2c
  memcpy(&(context->mac_addr_1.octet),
 8007c30:	2206      	movs	r2, #6
 8007c32:	4619      	mov	r1, r3
 8007c34:	f012 feae 	bl	801a994 <memcpy>
         sizeof(sl_wfx_mac_address_t));

  /* Storing input buffer limit from Wi-Fi chip */
  sl_wfx_input_buffer_number = sl_wfx_htole16(startup_info->body.num_inp_ch_bufs);
 8007c38:	697b      	ldr	r3, [r7, #20]
 8007c3a:	8c1b      	ldrh	r3, [r3, #32]
 8007c3c:	b29b      	uxth	r3, r3
 8007c3e:	4618      	mov	r0, r3
 8007c40:	f7ff ff6f 	bl	8007b22 <uint16_identity>
 8007c44:	4603      	mov	r3, r0
 8007c46:	461a      	mov	r2, r3
 8007c48:	4b33      	ldr	r3, [pc, #204]	; (8007d18 <sl_wfx_init+0x1c8>)
 8007c4a:	801a      	strh	r2, [r3, #0]

  /* Store the OPN */
  memcpy(context->wfx_opn, startup_info->body.opn, SL_WFX_OPN_SIZE);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	f503 7002 	add.w	r0, r3, #520	; 0x208
 8007c52:	697b      	ldr	r3, [r7, #20]
 8007c54:	330a      	adds	r3, #10
 8007c56:	220e      	movs	r2, #14
 8007c58:	4619      	mov	r1, r3
 8007c5a:	f012 fe9b 	bl	801a994 <memcpy>

  /* Set the wake up pin of the host */
  sl_wfx_host_set_wake_up_pin(1);
 8007c5e:	2001      	movs	r0, #1
 8007c60:	f001 f8d0 	bl	8008e04 <sl_wfx_host_set_wake_up_pin>
        goto error_handler;
    }
  }
#endif //SL_WFX_USE_SECURE_LINK

  result = sl_wfx_host_get_pds_size(&pds_size);
 8007c64:	f107 0312 	add.w	r3, r7, #18
 8007c68:	4618      	mov	r0, r3
 8007c6a:	f001 f88b 	bl	8008d84 <sl_wfx_host_get_pds_size>
 8007c6e:	61f8      	str	r0, [r7, #28]
  SL_WFX_ERROR_CHECK(result);
 8007c70:	69fb      	ldr	r3, [r7, #28]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d13a      	bne.n	8007cec <sl_wfx_init+0x19c>
  /* Sending to Wi-Fi chip PDS configuration (Platform data set) */
  for (uint8_t a = 0; a < pds_size; a++) {
 8007c76:	2300      	movs	r3, #0
 8007c78:	76fb      	strb	r3, [r7, #27]
 8007c7a:	e01c      	b.n	8007cb6 <sl_wfx_init+0x166>
    result = sl_wfx_host_get_pds_data(&pds_data, a);
 8007c7c:	7efb      	ldrb	r3, [r7, #27]
 8007c7e:	b29a      	uxth	r2, r3
 8007c80:	f107 030c 	add.w	r3, r7, #12
 8007c84:	4611      	mov	r1, r2
 8007c86:	4618      	mov	r0, r3
 8007c88:	f001 f850 	bl	8008d2c <sl_wfx_host_get_pds_data>
 8007c8c:	61f8      	str	r0, [r7, #28]
    SL_WFX_ERROR_CHECK(result);
 8007c8e:	69fb      	ldr	r3, [r7, #28]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d12d      	bne.n	8007cf0 <sl_wfx_init+0x1a0>
    result = sl_wfx_send_configuration(pds_data, strlen(pds_data));
 8007c94:	68fc      	ldr	r4, [r7, #12]
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	4618      	mov	r0, r3
 8007c9a:	f7f8 faab 	bl	80001f4 <strlen>
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	4619      	mov	r1, r3
 8007ca2:	4620      	mov	r0, r4
 8007ca4:	f000 f96c 	bl	8007f80 <sl_wfx_send_configuration>
 8007ca8:	61f8      	str	r0, [r7, #28]
    SL_WFX_ERROR_CHECK(result);
 8007caa:	69fb      	ldr	r3, [r7, #28]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d121      	bne.n	8007cf4 <sl_wfx_init+0x1a4>
  for (uint8_t a = 0; a < pds_size; a++) {
 8007cb0:	7efb      	ldrb	r3, [r7, #27]
 8007cb2:	3301      	adds	r3, #1
 8007cb4:	76fb      	strb	r3, [r7, #27]
 8007cb6:	7efb      	ldrb	r3, [r7, #27]
 8007cb8:	b29a      	uxth	r2, r3
 8007cba:	8a7b      	ldrh	r3, [r7, #18]
 8007cbc:	429a      	cmp	r2, r3
 8007cbe:	d3dd      	bcc.n	8007c7c <sl_wfx_init+0x12c>

#if (SL_WFX_DEBUG_MASK & SL_WFX_DEBUG_INIT)
  sl_wfx_host_log("--PDS configured--\r\n");
#endif

  sl_wfx_context->state = SL_WFX_STARTED;
 8007cc0:	4b14      	ldr	r3, [pc, #80]	; (8007d14 <sl_wfx_init+0x1c4>)
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	2201      	movs	r2, #1
 8007cc6:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222
 8007cca:	e014      	b.n	8007cf6 <sl_wfx_init+0x1a6>
  SL_WFX_ERROR_CHECK(result);
 8007ccc:	bf00      	nop
 8007cce:	e012      	b.n	8007cf6 <sl_wfx_init+0x1a6>
  SL_WFX_ERROR_CHECK(result);
 8007cd0:	bf00      	nop
 8007cd2:	e010      	b.n	8007cf6 <sl_wfx_init+0x1a6>
  SL_WFX_ERROR_CHECK(result);
 8007cd4:	bf00      	nop
 8007cd6:	e00e      	b.n	8007cf6 <sl_wfx_init+0x1a6>
  SL_WFX_ERROR_CHECK(result);
 8007cd8:	bf00      	nop
 8007cda:	e00c      	b.n	8007cf6 <sl_wfx_init+0x1a6>
  SL_WFX_ERROR_CHECK(result);
 8007cdc:	bf00      	nop
 8007cde:	e00a      	b.n	8007cf6 <sl_wfx_init+0x1a6>
  SL_WFX_ERROR_CHECK(result);
 8007ce0:	bf00      	nop
 8007ce2:	e008      	b.n	8007cf6 <sl_wfx_init+0x1a6>
  SL_WFX_ERROR_CHECK(result);
 8007ce4:	bf00      	nop
 8007ce6:	e006      	b.n	8007cf6 <sl_wfx_init+0x1a6>
  SL_WFX_ERROR_CHECK(result);
 8007ce8:	bf00      	nop
 8007cea:	e004      	b.n	8007cf6 <sl_wfx_init+0x1a6>
  SL_WFX_ERROR_CHECK(result);
 8007cec:	bf00      	nop
 8007cee:	e002      	b.n	8007cf6 <sl_wfx_init+0x1a6>
    SL_WFX_ERROR_CHECK(result);
 8007cf0:	bf00      	nop
 8007cf2:	e000      	b.n	8007cf6 <sl_wfx_init+0x1a6>
    SL_WFX_ERROR_CHECK(result);
 8007cf4:	bf00      	nop

  error_handler:
  if (result != SL_STATUS_OK) {
 8007cf6:	69fb      	ldr	r3, [r7, #28]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d005      	beq.n	8007d08 <sl_wfx_init+0x1b8>
    sl_wfx_disable_irq( );
 8007cfc:	f000 fb2b 	bl	8008356 <sl_wfx_disable_irq>
    sl_wfx_deinit_bus();
 8007d00:	f7ff ff08 	bl	8007b14 <sl_wfx_deinit_bus>
    sl_wfx_host_deinit();
 8007d04:	f001 f85e 	bl	8008dc4 <sl_wfx_host_deinit>
  }

  return result;
 8007d08:	69fb      	ldr	r3, [r7, #28]
}
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	3724      	adds	r7, #36	; 0x24
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	bd90      	pop	{r4, r7, pc}
 8007d12:	bf00      	nop
 8007d14:	20000898 	.word	0x20000898
 8007d18:	2000089e 	.word	0x2000089e

08007d1c <sl_wfx_send_join_command>:
                                     uint16_t        management_frame_protection,
                                     const uint8_t  *passkey,
                                     uint16_t        passkey_length,
                                     const uint8_t  *ie_data,
                                     uint16_t        ie_data_length)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b08a      	sub	sp, #40	; 0x28
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	60f8      	str	r0, [r7, #12]
 8007d24:	60b9      	str	r1, [r7, #8]
 8007d26:	607a      	str	r2, [r7, #4]
 8007d28:	807b      	strh	r3, [r7, #2]
  sl_status_t               result           = SL_STATUS_OK;
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	627b      	str	r3, [r7, #36]	; 0x24
  sl_wfx_generic_message_t  *frame           = NULL;
 8007d2e:	2300      	movs	r3, #0
 8007d30:	61bb      	str	r3, [r7, #24]
  sl_wfx_connect_cnf_t      *reply           = NULL;
 8007d32:	2300      	movs	r3, #0
 8007d34:	617b      	str	r3, [r7, #20]
  sl_wfx_connect_req_body_t *connect_request = NULL;
 8007d36:	2300      	movs	r3, #0
 8007d38:	623b      	str	r3, [r7, #32]
  uint32_t request_length  = SL_WFX_ROUND_UP_EVEN(sizeof(sl_wfx_connect_req_t) + ie_data_length);
 8007d3a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8007d3e:	3301      	adds	r3, #1
 8007d40:	f023 0301 	bic.w	r3, r3, #1
 8007d44:	3378      	adds	r3, #120	; 0x78
 8007d46:	61fb      	str	r3, [r7, #28]

  result = sl_wfx_allocate_command_buffer(&frame, SL_WFX_CONNECT_REQ_ID, SL_WFX_CONTROL_BUFFER, request_length);
 8007d48:	f107 0018 	add.w	r0, r7, #24
 8007d4c:	69fb      	ldr	r3, [r7, #28]
 8007d4e:	2202      	movs	r2, #2
 8007d50:	2143      	movs	r1, #67	; 0x43
 8007d52:	f000 ff53 	bl	8008bfc <sl_wfx_allocate_command_buffer>
 8007d56:	6278      	str	r0, [r7, #36]	; 0x24
  SL_WFX_ERROR_CHECK(result);
 8007d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	f040 8093 	bne.w	8007e86 <sl_wfx_send_join_command+0x16a>

  frame->header.info = SL_WFX_STA_INTERFACE << SL_WFX_MSG_INFO_INTERFACE_OFFSET;
 8007d60:	69bb      	ldr	r3, [r7, #24]
 8007d62:	2200      	movs	r2, #0
 8007d64:	70da      	strb	r2, [r3, #3]

  connect_request                        = (sl_wfx_connect_req_body_t *)&frame->body;
 8007d66:	69bb      	ldr	r3, [r7, #24]
 8007d68:	3304      	adds	r3, #4
 8007d6a:	623b      	str	r3, [r7, #32]
  connect_request->ssid_def.ssid_length  = sl_wfx_htole32(ssid_length);
 8007d6c:	68b8      	ldr	r0, [r7, #8]
 8007d6e:	f7ff fee4 	bl	8007b3a <uint32_identity>
 8007d72:	4602      	mov	r2, r0
 8007d74:	6a3b      	ldr	r3, [r7, #32]
 8007d76:	601a      	str	r2, [r3, #0]
  connect_request->channel               = sl_wfx_htole16(channel);
 8007d78:	887b      	ldrh	r3, [r7, #2]
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	f7ff fed1 	bl	8007b22 <uint16_identity>
 8007d80:	4603      	mov	r3, r0
 8007d82:	461a      	mov	r2, r3
 8007d84:	6a3b      	ldr	r3, [r7, #32]
 8007d86:	855a      	strh	r2, [r3, #42]	; 0x2a
  connect_request->security_mode         = security_mode;
 8007d88:	6a3b      	ldr	r3, [r7, #32]
 8007d8a:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8007d8e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  connect_request->prevent_roaming       = prevent_roaming;
 8007d92:	6a3b      	ldr	r3, [r7, #32]
 8007d94:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8007d98:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  if (security_mode == WFM_SECURITY_MODE_WPA3_SAE) {
 8007d9c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8007da0:	2b06      	cmp	r3, #6
 8007da2:	d109      	bne.n	8007db8 <sl_wfx_send_join_command+0x9c>
    connect_request->mgmt_frame_protection = WFM_MGMT_FRAME_PROTECTION_MANDATORY;
 8007da4:	6a3b      	ldr	r3, [r7, #32]
 8007da6:	2200      	movs	r2, #0
 8007da8:	f042 0202 	orr.w	r2, r2, #2
 8007dac:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 8007db0:	2200      	movs	r2, #0
 8007db2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
 8007db6:	e007      	b.n	8007dc8 <sl_wfx_send_join_command+0xac>
  } else {
    connect_request->mgmt_frame_protection = sl_wfx_htole16(management_frame_protection);
 8007db8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007dba:	4618      	mov	r0, r3
 8007dbc:	f7ff feb1 	bl	8007b22 <uint16_identity>
 8007dc0:	4603      	mov	r3, r0
 8007dc2:	461a      	mov	r2, r3
 8007dc4:	6a3b      	ldr	r3, [r7, #32]
 8007dc6:	85da      	strh	r2, [r3, #46]	; 0x2e
  }
  connect_request->password_length       = sl_wfx_htole16(passkey_length);
 8007dc8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007dcc:	4618      	mov	r0, r3
 8007dce:	f7ff fea8 	bl	8007b22 <uint16_identity>
 8007dd2:	4603      	mov	r3, r0
 8007dd4:	461a      	mov	r2, r3
 8007dd6:	6a3b      	ldr	r3, [r7, #32]
 8007dd8:	861a      	strh	r2, [r3, #48]	; 0x30
  connect_request->ie_data_length        = sl_wfx_htole16(ie_data_length);
 8007dda:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8007dde:	4618      	mov	r0, r3
 8007de0:	f7ff fe9f 	bl	8007b22 <uint16_identity>
 8007de4:	4603      	mov	r3, r0
 8007de6:	461a      	mov	r2, r3
 8007de8:	6a3b      	ldr	r3, [r7, #32]
 8007dea:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
  memcpy(connect_request->ssid_def.ssid, ssid, ssid_length);
 8007dee:	6a3b      	ldr	r3, [r7, #32]
 8007df0:	3304      	adds	r3, #4
 8007df2:	68ba      	ldr	r2, [r7, #8]
 8007df4:	68f9      	ldr	r1, [r7, #12]
 8007df6:	4618      	mov	r0, r3
 8007df8:	f012 fdcc 	bl	801a994 <memcpy>
  memcpy(connect_request->password, passkey, passkey_length);
 8007dfc:	6a3b      	ldr	r3, [r7, #32]
 8007dfe:	3332      	adds	r3, #50	; 0x32
 8007e00:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8007e04:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007e06:	4618      	mov	r0, r3
 8007e08:	f012 fdc4 	bl	801a994 <memcpy>
  memcpy(connect_request + 1, ie_data, ie_data_length);
 8007e0c:	6a3b      	ldr	r3, [r7, #32]
 8007e0e:	3374      	adds	r3, #116	; 0x74
 8007e10:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8007e14:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007e16:	4618      	mov	r0, r3
 8007e18:	f012 fdbc 	bl	801a994 <memcpy>
  if (bssid != NULL) {
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d007      	beq.n	8007e32 <sl_wfx_send_join_command+0x116>
    memcpy(connect_request->bssid, &bssid->octet, SL_WFX_BSSID_SIZE);
 8007e22:	6a3b      	ldr	r3, [r7, #32]
 8007e24:	3324      	adds	r3, #36	; 0x24
 8007e26:	6879      	ldr	r1, [r7, #4]
 8007e28:	2206      	movs	r2, #6
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	f012 fdb2 	bl	801a994 <memcpy>
 8007e30:	e006      	b.n	8007e40 <sl_wfx_send_join_command+0x124>
  } else {
    memset(connect_request->bssid, 0xFF, SL_WFX_BSSID_SIZE);
 8007e32:	6a3b      	ldr	r3, [r7, #32]
 8007e34:	3324      	adds	r3, #36	; 0x24
 8007e36:	2206      	movs	r2, #6
 8007e38:	21ff      	movs	r1, #255	; 0xff
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	f012 fdb8 	bl	801a9b0 <memset>
  }

  result = sl_wfx_send_request(SL_WFX_CONNECT_REQ_ID, frame, request_length);
 8007e40:	69bb      	ldr	r3, [r7, #24]
 8007e42:	69fa      	ldr	r2, [r7, #28]
 8007e44:	b292      	uxth	r2, r2
 8007e46:	4619      	mov	r1, r3
 8007e48:	2043      	movs	r0, #67	; 0x43
 8007e4a:	f000 f917 	bl	800807c <sl_wfx_send_request>
 8007e4e:	6278      	str	r0, [r7, #36]	; 0x24
  SL_WFX_ERROR_CHECK(result);
 8007e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d119      	bne.n	8007e8a <sl_wfx_send_join_command+0x16e>

  result = sl_wfx_host_wait_for_confirmation(SL_WFX_CONNECT_REQ_ID, SL_WFX_DEFAULT_REQUEST_TIMEOUT_MS, (void **)&reply);
 8007e56:	f107 0314 	add.w	r3, r7, #20
 8007e5a:	461a      	mov	r2, r3
 8007e5c:	f241 3188 	movw	r1, #5000	; 0x1388
 8007e60:	2043      	movs	r0, #67	; 0x43
 8007e62:	f001 f821 	bl	8008ea8 <sl_wfx_host_wait_for_confirmation>
 8007e66:	6278      	str	r0, [r7, #36]	; 0x24
  SL_WFX_ERROR_CHECK(result);
 8007e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d10f      	bne.n	8007e8e <sl_wfx_send_join_command+0x172>

  result = sl_wfx_get_status_code(sl_wfx_htole32(reply->body.status), SL_WFX_CONNECT_REQ_ID);
 8007e6e:	697b      	ldr	r3, [r7, #20]
 8007e70:	685b      	ldr	r3, [r3, #4]
 8007e72:	4618      	mov	r0, r3
 8007e74:	f7ff fe61 	bl	8007b3a <uint32_identity>
 8007e78:	4603      	mov	r3, r0
 8007e7a:	2143      	movs	r1, #67	; 0x43
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	f000 fddd 	bl	8008a3c <sl_wfx_get_status_code>
 8007e82:	6278      	str	r0, [r7, #36]	; 0x24
 8007e84:	e004      	b.n	8007e90 <sl_wfx_send_join_command+0x174>
  SL_WFX_ERROR_CHECK(result);
 8007e86:	bf00      	nop
 8007e88:	e002      	b.n	8007e90 <sl_wfx_send_join_command+0x174>
  SL_WFX_ERROR_CHECK(result);
 8007e8a:	bf00      	nop
 8007e8c:	e000      	b.n	8007e90 <sl_wfx_send_join_command+0x174>
  SL_WFX_ERROR_CHECK(result);
 8007e8e:	bf00      	nop

  error_handler:
  if (result == SL_STATUS_TIMEOUT) {
 8007e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e92:	2b07      	cmp	r3, #7
 8007e94:	d10d      	bne.n	8007eb2 <sl_wfx_send_join_command+0x196>
    if (sl_wfx_context->used_buffers > 0) {
 8007e96:	4b0e      	ldr	r3, [pc, #56]	; (8007ed0 <sl_wfx_send_join_command+0x1b4>)
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d007      	beq.n	8007eb2 <sl_wfx_send_join_command+0x196>
      sl_wfx_context->used_buffers--;
 8007ea2:	4b0b      	ldr	r3, [pc, #44]	; (8007ed0 <sl_wfx_send_join_command+0x1b4>)
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 8007eaa:	3a01      	subs	r2, #1
 8007eac:	b292      	uxth	r2, r2
 8007eae:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
    }
  }
  if (frame != NULL) {
 8007eb2:	69bb      	ldr	r3, [r7, #24]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d005      	beq.n	8007ec4 <sl_wfx_send_join_command+0x1a8>
    sl_wfx_free_command_buffer(frame, SL_WFX_CONNECT_REQ_ID, SL_WFX_CONTROL_BUFFER);
 8007eb8:	69bb      	ldr	r3, [r7, #24]
 8007eba:	2202      	movs	r2, #2
 8007ebc:	2143      	movs	r1, #67	; 0x43
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	f000 febc 	bl	8008c3c <sl_wfx_free_command_buffer>
  }
  return result;
 8007ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	3728      	adds	r7, #40	; 0x28
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	bd80      	pop	{r7, pc}
 8007ece:	bf00      	nop
 8007ed0:	20000898 	.word	0x20000898

08007ed4 <sl_wfx_send_ethernet_frame>:
 *****************************************************************************/
sl_status_t sl_wfx_send_ethernet_frame(sl_wfx_send_frame_req_t *frame,
                                       uint32_t data_length,
                                       sl_wfx_interface_t interface,
                                       uint8_t priority)
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b086      	sub	sp, #24
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	60f8      	str	r0, [r7, #12]
 8007edc:	60b9      	str	r1, [r7, #8]
 8007ede:	4611      	mov	r1, r2
 8007ee0:	461a      	mov	r2, r3
 8007ee2:	460b      	mov	r3, r1
 8007ee4:	71fb      	strb	r3, [r7, #7]
 8007ee6:	4613      	mov	r3, r2
 8007ee8:	71bb      	strb	r3, [r7, #6]
  sl_status_t result;
  uint32_t request_length = SL_WFX_ROUND_UP_EVEN(sizeof(sl_wfx_send_frame_req_t) + data_length);
 8007eea:	68bb      	ldr	r3, [r7, #8]
 8007eec:	3301      	adds	r3, #1
 8007eee:	f023 0301 	bic.w	r3, r3, #1
 8007ef2:	330c      	adds	r3, #12
 8007ef4:	617b      	str	r3, [r7, #20]

  sl_wfx_context->data_frame_id++;
 8007ef6:	4b21      	ldr	r3, [pc, #132]	; (8007f7c <sl_wfx_send_ethernet_frame+0xa8>)
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f8b3 2204 	ldrh.w	r2, [r3, #516]	; 0x204
 8007efe:	3201      	adds	r2, #1
 8007f00:	b292      	uxth	r2, r2
 8007f02:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204

  frame->header.length           = sl_wfx_htole16(data_length + sizeof(sl_wfx_send_frame_req_t));
 8007f06:	68bb      	ldr	r3, [r7, #8]
 8007f08:	b29b      	uxth	r3, r3
 8007f0a:	330c      	adds	r3, #12
 8007f0c:	b29b      	uxth	r3, r3
 8007f0e:	4618      	mov	r0, r3
 8007f10:	f7ff fe07 	bl	8007b22 <uint16_identity>
 8007f14:	4603      	mov	r3, r0
 8007f16:	461a      	mov	r2, r3
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	801a      	strh	r2, [r3, #0]
  frame->header.id               = SL_WFX_SEND_FRAME_REQ_ID;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	224a      	movs	r2, #74	; 0x4a
 8007f20:	709a      	strb	r2, [r3, #2]
  frame->header.info             = (interface << SL_WFX_MSG_INFO_INTERFACE_OFFSET) & SL_WFX_MSG_INFO_INTERFACE_MASK;
 8007f22:	79fb      	ldrb	r3, [r7, #7]
 8007f24:	005b      	lsls	r3, r3, #1
 8007f26:	b2db      	uxtb	r3, r3
 8007f28:	f003 0306 	and.w	r3, r3, #6
 8007f2c:	b2da      	uxtb	r2, r3
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	70da      	strb	r2, [r3, #3]
  frame->body.frame_type         = WFM_FRAME_TYPE_DATA;
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	2208      	movs	r2, #8
 8007f36:	711a      	strb	r2, [r3, #4]
  frame->body.priority           = priority;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	79ba      	ldrb	r2, [r7, #6]
 8007f3c:	715a      	strb	r2, [r3, #5]
  frame->body.packet_id          = sl_wfx_htole16(sl_wfx_context->data_frame_id);
 8007f3e:	4b0f      	ldr	r3, [pc, #60]	; (8007f7c <sl_wfx_send_ethernet_frame+0xa8>)
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
 8007f46:	4618      	mov	r0, r3
 8007f48:	f7ff fdeb 	bl	8007b22 <uint16_identity>
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	461a      	mov	r2, r3
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	80da      	strh	r2, [r3, #6]
  frame->body.packet_data_length = sl_wfx_htole32(data_length);
 8007f54:	68b8      	ldr	r0, [r7, #8]
 8007f56:	f7ff fdf0 	bl	8007b3a <uint32_identity>
 8007f5a:	4602      	mov	r2, r0
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	609a      	str	r2, [r3, #8]

  result = sl_wfx_send_request(SL_WFX_SEND_FRAME_REQ_ID, (sl_wfx_generic_message_t*) frame, request_length);
 8007f60:	697b      	ldr	r3, [r7, #20]
 8007f62:	b29b      	uxth	r3, r3
 8007f64:	461a      	mov	r2, r3
 8007f66:	68f9      	ldr	r1, [r7, #12]
 8007f68:	204a      	movs	r0, #74	; 0x4a
 8007f6a:	f000 f887 	bl	800807c <sl_wfx_send_request>
 8007f6e:	6138      	str	r0, [r7, #16]

  return result;
 8007f70:	693b      	ldr	r3, [r7, #16]
}
 8007f72:	4618      	mov	r0, r3
 8007f74:	3718      	adds	r7, #24
 8007f76:	46bd      	mov	sp, r7
 8007f78:	bd80      	pop	{r7, pc}
 8007f7a:	bf00      	nop
 8007f7c:	20000898 	.word	0x20000898

08007f80 <sl_wfx_send_configuration>:
 * SL_STATUS_FAIL otherwise
 *
 * @note The PDS (Platform Data Set) file contains the WF200 settings
 *****************************************************************************/
sl_status_t sl_wfx_send_configuration(const char *pds_data, uint32_t pds_data_length)
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b088      	sub	sp, #32
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
 8007f88:	6039      	str	r1, [r7, #0]
  sl_status_t                      result         = SL_STATUS_OK;
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	61fb      	str	r3, [r7, #28]
  sl_wfx_generic_message_t        *frame          = NULL;
 8007f8e:	2300      	movs	r3, #0
 8007f90:	613b      	str	r3, [r7, #16]
  sl_wfx_configuration_cnf_t      *reply          = NULL;
 8007f92:	2300      	movs	r3, #0
 8007f94:	60fb      	str	r3, [r7, #12]
  sl_wfx_configuration_req_body_t *config_request = NULL;
 8007f96:	2300      	movs	r3, #0
 8007f98:	61bb      	str	r3, [r7, #24]
  uint32_t request_length = SL_WFX_ROUND_UP_EVEN(sizeof(sl_wfx_configuration_req_t) + pds_data_length);
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	3301      	adds	r3, #1
 8007f9e:	f023 0301 	bic.w	r3, r3, #1
 8007fa2:	3306      	adds	r3, #6
 8007fa4:	617b      	str	r3, [r7, #20]

  result = sl_wfx_allocate_command_buffer(&frame, SL_WFX_CONFIGURATION_REQ_ID, SL_WFX_CONTROL_BUFFER, request_length);
 8007fa6:	f107 0010 	add.w	r0, r7, #16
 8007faa:	697b      	ldr	r3, [r7, #20]
 8007fac:	2202      	movs	r2, #2
 8007fae:	2109      	movs	r1, #9
 8007fb0:	f000 fe24 	bl	8008bfc <sl_wfx_allocate_command_buffer>
 8007fb4:	61f8      	str	r0, [r7, #28]
  SL_WFX_ERROR_CHECK(result);
 8007fb6:	69fb      	ldr	r3, [r7, #28]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d138      	bne.n	800802e <sl_wfx_send_configuration+0xae>

  frame->header.info = SL_WFX_STA_INTERFACE << SL_WFX_MSG_INFO_INTERFACE_OFFSET;
 8007fbc:	693b      	ldr	r3, [r7, #16]
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	70da      	strb	r2, [r3, #3]

  config_request = (sl_wfx_configuration_req_body_t *)&frame->body;
 8007fc2:	693b      	ldr	r3, [r7, #16]
 8007fc4:	3304      	adds	r3, #4
 8007fc6:	61bb      	str	r3, [r7, #24]
  config_request->length = sl_wfx_htole16(pds_data_length);
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	b29b      	uxth	r3, r3
 8007fcc:	4618      	mov	r0, r3
 8007fce:	f7ff fda8 	bl	8007b22 <uint16_identity>
 8007fd2:	4603      	mov	r3, r0
 8007fd4:	461a      	mov	r2, r3
 8007fd6:	69bb      	ldr	r3, [r7, #24]
 8007fd8:	801a      	strh	r2, [r3, #0]

  memcpy(config_request->pds_data, pds_data, pds_data_length);
 8007fda:	69bb      	ldr	r3, [r7, #24]
 8007fdc:	3302      	adds	r3, #2
 8007fde:	683a      	ldr	r2, [r7, #0]
 8007fe0:	6879      	ldr	r1, [r7, #4]
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	f012 fcd6 	bl	801a994 <memcpy>

  result = sl_wfx_send_request(SL_WFX_CONFIGURATION_REQ_ID, frame, request_length);
 8007fe8:	693b      	ldr	r3, [r7, #16]
 8007fea:	697a      	ldr	r2, [r7, #20]
 8007fec:	b292      	uxth	r2, r2
 8007fee:	4619      	mov	r1, r3
 8007ff0:	2009      	movs	r0, #9
 8007ff2:	f000 f843 	bl	800807c <sl_wfx_send_request>
 8007ff6:	61f8      	str	r0, [r7, #28]
  SL_WFX_ERROR_CHECK(result);
 8007ff8:	69fb      	ldr	r3, [r7, #28]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d119      	bne.n	8008032 <sl_wfx_send_configuration+0xb2>

  result = sl_wfx_host_wait_for_confirmation(SL_WFX_CONFIGURATION_REQ_ID, SL_WFX_DEFAULT_REQUEST_TIMEOUT_MS, (void **)&reply);
 8007ffe:	f107 030c 	add.w	r3, r7, #12
 8008002:	461a      	mov	r2, r3
 8008004:	f241 3188 	movw	r1, #5000	; 0x1388
 8008008:	2009      	movs	r0, #9
 800800a:	f000 ff4d 	bl	8008ea8 <sl_wfx_host_wait_for_confirmation>
 800800e:	61f8      	str	r0, [r7, #28]
  SL_WFX_ERROR_CHECK(result);
 8008010:	69fb      	ldr	r3, [r7, #28]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d10f      	bne.n	8008036 <sl_wfx_send_configuration+0xb6>

  result = sl_wfx_get_status_code(sl_wfx_htole32(reply->body.status), SL_WFX_CONFIGURATION_REQ_ID);
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	685b      	ldr	r3, [r3, #4]
 800801a:	4618      	mov	r0, r3
 800801c:	f7ff fd8d 	bl	8007b3a <uint32_identity>
 8008020:	4603      	mov	r3, r0
 8008022:	2109      	movs	r1, #9
 8008024:	4618      	mov	r0, r3
 8008026:	f000 fd09 	bl	8008a3c <sl_wfx_get_status_code>
 800802a:	61f8      	str	r0, [r7, #28]
 800802c:	e004      	b.n	8008038 <sl_wfx_send_configuration+0xb8>
  SL_WFX_ERROR_CHECK(result);
 800802e:	bf00      	nop
 8008030:	e002      	b.n	8008038 <sl_wfx_send_configuration+0xb8>
  SL_WFX_ERROR_CHECK(result);
 8008032:	bf00      	nop
 8008034:	e000      	b.n	8008038 <sl_wfx_send_configuration+0xb8>
  SL_WFX_ERROR_CHECK(result);
 8008036:	bf00      	nop

  error_handler:
  if (result == SL_STATUS_TIMEOUT) {
 8008038:	69fb      	ldr	r3, [r7, #28]
 800803a:	2b07      	cmp	r3, #7
 800803c:	d10d      	bne.n	800805a <sl_wfx_send_configuration+0xda>
    if (sl_wfx_context->used_buffers > 0) {
 800803e:	4b0e      	ldr	r3, [pc, #56]	; (8008078 <sl_wfx_send_configuration+0xf8>)
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
 8008046:	2b00      	cmp	r3, #0
 8008048:	d007      	beq.n	800805a <sl_wfx_send_configuration+0xda>
      sl_wfx_context->used_buffers--;
 800804a:	4b0b      	ldr	r3, [pc, #44]	; (8008078 <sl_wfx_send_configuration+0xf8>)
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 8008052:	3a01      	subs	r2, #1
 8008054:	b292      	uxth	r2, r2
 8008056:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
    }
  }
  if (frame != NULL) {
 800805a:	693b      	ldr	r3, [r7, #16]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d005      	beq.n	800806c <sl_wfx_send_configuration+0xec>
    sl_wfx_free_command_buffer(frame, SL_WFX_CONFIGURATION_REQ_ID, SL_WFX_CONTROL_BUFFER);
 8008060:	693b      	ldr	r3, [r7, #16]
 8008062:	2202      	movs	r2, #2
 8008064:	2109      	movs	r1, #9
 8008066:	4618      	mov	r0, r3
 8008068:	f000 fde8 	bl	8008c3c <sl_wfx_free_command_buffer>
  }
  return result;
 800806c:	69fb      	ldr	r3, [r7, #28]
}
 800806e:	4618      	mov	r0, r3
 8008070:	3720      	adds	r7, #32
 8008072:	46bd      	mov	sp, r7
 8008074:	bd80      	pop	{r7, pc}
 8008076:	bf00      	nop
 8008078:	20000898 	.word	0x20000898

0800807c <sl_wfx_send_request>:
 * @returns SL_STATUS_OK if the command is sent correctly,
 * SL_STATUS_WOULD_OVERFLOW if the HIF queue is full,
 * SL_STATUS_FAIL otherwise
 *****************************************************************************/
sl_status_t sl_wfx_send_request(uint8_t command_id, sl_wfx_generic_message_t *request, uint16_t request_length)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b084      	sub	sp, #16
 8008080:	af00      	add	r7, sp, #0
 8008082:	4603      	mov	r3, r0
 8008084:	6039      	str	r1, [r7, #0]
 8008086:	71fb      	strb	r3, [r7, #7]
 8008088:	4613      	mov	r3, r2
 800808a:	80bb      	strh	r3, [r7, #4]
  sl_status_t result;
  sl_status_t unlock_result;

  result = sl_wfx_host_lock();
 800808c:	f001 f8bc 	bl	8009208 <sl_wfx_host_lock>
 8008090:	60f8      	str	r0, [r7, #12]

  if (result != SL_STATUS_OK) {
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d005      	beq.n	80080a4 <sl_wfx_send_request+0x28>
#if (SL_WFX_DEBUG_MASK & SL_WFX_DEBUG_ERROR)
    sl_wfx_host_log("Send request lock error %u\n", result);
 8008098:	68f9      	ldr	r1, [r7, #12]
 800809a:	4832      	ldr	r0, [pc, #200]	; (8008164 <sl_wfx_send_request+0xe8>)
 800809c:	f001 f8a2 	bl	80091e4 <sl_wfx_host_log>
#endif
    //if driver lock is not successful, return
    return result;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	e05a      	b.n	800815a <sl_wfx_send_request+0xde>
  }

  if (sl_wfx_context->used_buffers >= sl_wfx_input_buffer_number) {
 80080a4:	4b30      	ldr	r3, [pc, #192]	; (8008168 <sl_wfx_send_request+0xec>)
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 80080ac:	4b2f      	ldr	r3, [pc, #188]	; (800816c <sl_wfx_send_request+0xf0>)
 80080ae:	881b      	ldrh	r3, [r3, #0]
 80080b0:	429a      	cmp	r2, r3
 80080b2:	d304      	bcc.n	80080be <sl_wfx_send_request+0x42>
    result = SL_STATUS_WOULD_OVERFLOW;
 80080b4:	231d      	movs	r3, #29
 80080b6:	60fb      	str	r3, [r7, #12]
    SL_WFX_ERROR_CHECK(result);
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d138      	bne.n	8008130 <sl_wfx_send_request+0xb4>
  }

  // Write the buffer header
  request->header.id     = command_id;
 80080be:	683b      	ldr	r3, [r7, #0]
 80080c0:	79fa      	ldrb	r2, [r7, #7]
 80080c2:	709a      	strb	r2, [r3, #2]
  request->header.length = sl_wfx_htole16(request_length);
 80080c4:	88bb      	ldrh	r3, [r7, #4]
 80080c6:	4618      	mov	r0, r3
 80080c8:	f7ff fd2b 	bl	8007b22 <uint16_identity>
 80080cc:	4603      	mov	r3, r0
 80080ce:	461a      	mov	r2, r3
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	801a      	strh	r2, [r3, #0]

#ifdef SL_WFX_USE_SECURE_LINK
  result = sl_wfx_secure_link_send(command_id, &request, &request_length);
  SL_WFX_ERROR_CHECK(result);
#endif //SL_WFX_USE_SECURE_LINK
  if (command_id != SL_WFX_SEND_FRAME_REQ_ID
 80080d4:	79fb      	ldrb	r3, [r7, #7]
 80080d6:	2b4a      	cmp	r3, #74	; 0x4a
 80080d8:	d00a      	beq.n	80080f0 <sl_wfx_send_request+0x74>
      && command_id != SL_WFX_SHUT_DOWN_REQ_ID) {
 80080da:	79fb      	ldrb	r3, [r7, #7]
 80080dc:	2b32      	cmp	r3, #50	; 0x32
 80080de:	d007      	beq.n	80080f0 <sl_wfx_send_request+0x74>
    result = sl_wfx_host_setup_waited_event(command_id);
 80080e0:	79fb      	ldrb	r3, [r7, #7]
 80080e2:	4618      	mov	r0, r3
 80080e4:	f000 fece 	bl	8008e84 <sl_wfx_host_setup_waited_event>
 80080e8:	60f8      	str	r0, [r7, #12]
    SL_WFX_ERROR_CHECK(result);
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d121      	bne.n	8008134 <sl_wfx_send_request+0xb8>
  }

  if (result != SL_STATUS_OK) {
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d003      	beq.n	80080fe <sl_wfx_send_request+0x82>
    sl_wfx_host_log("Send request error %u\r\n", result);
 80080f6:	68f9      	ldr	r1, [r7, #12]
 80080f8:	481d      	ldr	r0, [pc, #116]	; (8008170 <sl_wfx_send_request+0xf4>)
 80080fa:	f001 f873 	bl	80091e4 <sl_wfx_host_log>
  }

  result = sl_wfx_host_transmit_frame(request, request_length);
 80080fe:	88bb      	ldrh	r3, [r7, #4]
 8008100:	4619      	mov	r1, r3
 8008102:	6838      	ldr	r0, [r7, #0]
 8008104:	f001 f860 	bl	80091c8 <sl_wfx_host_transmit_frame>
 8008108:	60f8      	str	r0, [r7, #12]
  SL_WFX_ERROR_CHECK(result);
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d113      	bne.n	8008138 <sl_wfx_send_request+0xbc>

  if (result != SL_STATUS_OK) {
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d003      	beq.n	800811e <sl_wfx_send_request+0xa2>
    sl_wfx_host_log("Send request error %u\r\n", result);
 8008116:	68f9      	ldr	r1, [r7, #12]
 8008118:	4815      	ldr	r0, [pc, #84]	; (8008170 <sl_wfx_send_request+0xf4>)
 800811a:	f001 f863 	bl	80091e4 <sl_wfx_host_log>
  }

  sl_wfx_context->used_buffers++;
 800811e:	4b12      	ldr	r3, [pc, #72]	; (8008168 <sl_wfx_send_request+0xec>)
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 8008126:	3201      	adds	r2, #1
 8008128:	b292      	uxth	r2, r2
 800812a:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
 800812e:	e004      	b.n	800813a <sl_wfx_send_request+0xbe>
    SL_WFX_ERROR_CHECK(result);
 8008130:	bf00      	nop
 8008132:	e002      	b.n	800813a <sl_wfx_send_request+0xbe>
    SL_WFX_ERROR_CHECK(result);
 8008134:	bf00      	nop
 8008136:	e000      	b.n	800813a <sl_wfx_send_request+0xbe>
  SL_WFX_ERROR_CHECK(result);
 8008138:	bf00      	nop

  error_handler:
  unlock_result = sl_wfx_host_unlock();
 800813a:	f001 f885 	bl	8009248 <sl_wfx_host_unlock>
 800813e:	60b8      	str	r0, [r7, #8]
  if (unlock_result != SL_STATUS_OK) {
 8008140:	68bb      	ldr	r3, [r7, #8]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d001      	beq.n	800814a <sl_wfx_send_request+0xce>
    result = unlock_result;
 8008146:	68bb      	ldr	r3, [r7, #8]
 8008148:	60fb      	str	r3, [r7, #12]
  }

#if (SL_WFX_DEBUG_MASK & SL_WFX_DEBUG_ERROR)
  if (result != SL_STATUS_OK) {
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d003      	beq.n	8008158 <sl_wfx_send_request+0xdc>
    sl_wfx_host_log("Send request error %u\r\n", result);
 8008150:	68f9      	ldr	r1, [r7, #12]
 8008152:	4807      	ldr	r0, [pc, #28]	; (8008170 <sl_wfx_send_request+0xf4>)
 8008154:	f001 f846 	bl	80091e4 <sl_wfx_host_log>
  }
#endif
  return result;
 8008158:	68fb      	ldr	r3, [r7, #12]
}
 800815a:	4618      	mov	r0, r3
 800815c:	3710      	adds	r7, #16
 800815e:	46bd      	mov	sp, r7
 8008160:	bd80      	pop	{r7, pc}
 8008162:	bf00      	nop
 8008164:	0801db4c 	.word	0x0801db4c
 8008168:	20000898 	.word	0x20000898
 800816c:	2000089e 	.word	0x2000089e
 8008170:	0801db68 	.word	0x0801db68

08008174 <sl_wfx_receive_frame>:
 * @returns SL_STATUS_OK if the frame has been received correctly,
 * SL_STATUS_WIFI_NO_PACKET_TO_RECEIVE if no frame are pending inside the Wi-Fi chip
 * SL_STATUS_FAIL otherwise
 *****************************************************************************/
sl_status_t sl_wfx_receive_frame(uint16_t *ctrl_reg)
{
 8008174:	b590      	push	{r4, r7, lr}
 8008176:	b08b      	sub	sp, #44	; 0x2c
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
  sl_status_t               result;
  sl_status_t               unlock_result;
  sl_wfx_generic_message_t *network_rx_buffer = NULL;
 800817c:	2300      	movs	r3, #0
 800817e:	60fb      	str	r3, [r7, #12]
  sl_wfx_received_message_type_t message_type;
  sl_wfx_buffer_type_t      buffer_type = SL_WFX_RX_FRAME_BUFFER;
 8008180:	2301      	movs	r3, #1
 8008182:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t                  read_length, frame_size;

  result = sl_wfx_host_lock();
 8008186:	f001 f83f 	bl	8009208 <sl_wfx_host_lock>
 800818a:	6278      	str	r0, [r7, #36]	; 0x24

  if (result != SL_STATUS_OK) {
 800818c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800818e:	2b00      	cmp	r3, #0
 8008190:	d005      	beq.n	800819e <sl_wfx_receive_frame+0x2a>
#if (SL_WFX_DEBUG_MASK & SL_WFX_DEBUG_ERROR)
    sl_wfx_host_log("Receive frame lock error %u\n", result);
 8008192:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008194:	4859      	ldr	r0, [pc, #356]	; (80082fc <sl_wfx_receive_frame+0x188>)
 8008196:	f001 f825 	bl	80091e4 <sl_wfx_host_log>
#endif
    //if driver lock is not successful, return immediatly
    return result;
 800819a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800819c:	e0aa      	b.n	80082f4 <sl_wfx_receive_frame+0x180>
  }

  frame_size = (*ctrl_reg & SL_WFX_CONT_NEXT_LEN_MASK) * 2;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	881b      	ldrh	r3, [r3, #0]
 80081a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80081a6:	005b      	lsls	r3, r3, #1
 80081a8:	61fb      	str	r3, [r7, #28]
  /* if frame_size is equal to 0, read the control register to know the frame size */
  if (frame_size == 0) {
 80081aa:	69fb      	ldr	r3, [r7, #28]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d116      	bne.n	80081de <sl_wfx_receive_frame+0x6a>
    /* Read the control register */
    result = sl_wfx_reg_read_16(SL_WFX_CONTROL_REG_ID, ctrl_reg);
 80081b0:	6879      	ldr	r1, [r7, #4]
 80081b2:	2001      	movs	r0, #1
 80081b4:	f7ff fa3b 	bl	800762e <sl_wfx_reg_read_16>
 80081b8:	6278      	str	r0, [r7, #36]	; 0x24
    SL_WFX_ERROR_CHECK(result);
 80081ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d176      	bne.n	80082ae <sl_wfx_receive_frame+0x13a>
    frame_size = (*ctrl_reg & SL_WFX_CONT_NEXT_LEN_MASK) * 2;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	881b      	ldrh	r3, [r3, #0]
 80081c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80081c8:	005b      	lsls	r3, r3, #1
 80081ca:	61fb      	str	r3, [r7, #28]
    /* At this point, if frame_size is equal to zero, nothing to be read by the host */
    if (frame_size == 0) {
 80081cc:	69fb      	ldr	r3, [r7, #28]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d105      	bne.n	80081de <sl_wfx_receive_frame+0x6a>
      result = SL_STATUS_WIFI_NO_PACKET_TO_RECEIVE;
 80081d2:	f640 3305 	movw	r3, #2821	; 0xb05
 80081d6:	627b      	str	r3, [r7, #36]	; 0x24
      SL_WFX_ERROR_CHECK(result);
 80081d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d169      	bne.n	80082b2 <sl_wfx_receive_frame+0x13e>
    }
  }

  /* retrieve the message type from the control register*/
  message_type = (sl_wfx_received_message_type_t)((*ctrl_reg & SL_WFX_CONT_FRAME_TYPE_INFO) >> SL_WFX_CONT_FRAME_TYPE_OFFSET);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	881b      	ldrh	r3, [r3, #0]
 80081e2:	0b9b      	lsrs	r3, r3, #14
 80081e4:	b29b      	uxth	r3, r3
 80081e6:	76fb      	strb	r3, [r7, #27]

  /* critical : '+SL_WFX_CONT_REGISTER_SIZE' is to read the piggy-back value at
     the end of the control register. */
  read_length = frame_size + SL_WFX_CONT_REGISTER_SIZE;
 80081e8:	69fb      	ldr	r3, [r7, #28]
 80081ea:	3302      	adds	r3, #2
 80081ec:	617b      	str	r3, [r7, #20]

  /* Depending on the message type provided by the control register, allocate a
     control buffer or a ethernet RX frame */
  buffer_type = (message_type == SL_WFX_ETHERNET_DATA_MESSAGE) ? SL_WFX_RX_FRAME_BUFFER : SL_WFX_CONTROL_BUFFER;
 80081ee:	7efb      	ldrb	r3, [r7, #27]
 80081f0:	2b03      	cmp	r3, #3
 80081f2:	d101      	bne.n	80081f8 <sl_wfx_receive_frame+0x84>
 80081f4:	2301      	movs	r3, #1
 80081f6:	e000      	b.n	80081fa <sl_wfx_receive_frame+0x86>
 80081f8:	2302      	movs	r3, #2
 80081fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  result = sl_wfx_host_allocate_buffer((void **)&network_rx_buffer,
                                       buffer_type,
                                       SL_WFX_ROUND_UP(read_length, SL_WFX_ROUND_UP_VALUE));
 80081fe:	697b      	ldr	r3, [r7, #20]
 8008200:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  result = sl_wfx_host_allocate_buffer((void **)&network_rx_buffer,
 8008204:	2b00      	cmp	r3, #0
 8008206:	d004      	beq.n	8008212 <sl_wfx_receive_frame+0x9e>
                                       SL_WFX_ROUND_UP(read_length, SL_WFX_ROUND_UP_VALUE));
 8008208:	697b      	ldr	r3, [r7, #20]
 800820a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
  result = sl_wfx_host_allocate_buffer((void **)&network_rx_buffer,
 800820e:	3340      	adds	r3, #64	; 0x40
 8008210:	e000      	b.n	8008214 <sl_wfx_receive_frame+0xa0>
 8008212:	697b      	ldr	r3, [r7, #20]
 8008214:	f897 1023 	ldrb.w	r1, [r7, #35]	; 0x23
 8008218:	f107 000c 	add.w	r0, r7, #12
 800821c:	461a      	mov	r2, r3
 800821e:	f000 ffb3 	bl	8009188 <sl_wfx_host_allocate_buffer>
 8008222:	6278      	str	r0, [r7, #36]	; 0x24
  SL_WFX_ERROR_CHECK(result);
 8008224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008226:	2b00      	cmp	r3, #0
 8008228:	d145      	bne.n	80082b6 <sl_wfx_receive_frame+0x142>

  memset(network_rx_buffer, 0, read_length);
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	697a      	ldr	r2, [r7, #20]
 800822e:	2100      	movs	r1, #0
 8008230:	4618      	mov	r0, r3
 8008232:	f012 fbbd 	bl	801a9b0 <memset>

  /* Read the frame from WF200 */
  result = sl_wfx_data_read(network_rx_buffer, read_length);
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	6979      	ldr	r1, [r7, #20]
 800823a:	4618      	mov	r0, r3
 800823c:	f7ff fa65 	bl	800770a <sl_wfx_data_read>
 8008240:	6278      	str	r0, [r7, #36]	; 0x24
  SL_WFX_ERROR_CHECK(result);
 8008242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008244:	2b00      	cmp	r3, #0
 8008246:	d138      	bne.n	80082ba <sl_wfx_receive_frame+0x146>

  /* if the frame is a confirmation, decrease used_buffers value */
  if ((sl_wfx_context->used_buffers > 0)
 8008248:	4b2d      	ldr	r3, [pc, #180]	; (8008300 <sl_wfx_receive_frame+0x18c>)
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
 8008250:	2b00      	cmp	r3, #0
 8008252:	d00c      	beq.n	800826e <sl_wfx_receive_frame+0xfa>
      && (!(network_rx_buffer->header.id & SL_WFX_IND_BASE))) {
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	789b      	ldrb	r3, [r3, #2]
 8008258:	b25b      	sxtb	r3, r3
 800825a:	2b00      	cmp	r3, #0
 800825c:	db07      	blt.n	800826e <sl_wfx_receive_frame+0xfa>
    sl_wfx_context->used_buffers--;
 800825e:	4b28      	ldr	r3, [pc, #160]	; (8008300 <sl_wfx_receive_frame+0x18c>)
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 8008266:	3a01      	subs	r2, #1
 8008268:	b292      	uxth	r2, r2
 800826a:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
  }

  /* read the control register value in the piggy back and pass it to the host */
  *ctrl_reg = sl_wfx_unpack_16bit_little_endian(((uint8_t *)network_rx_buffer) + frame_size);
 800826e:	68fa      	ldr	r2, [r7, #12]
 8008270:	69fb      	ldr	r3, [r7, #28]
 8008272:	4413      	add	r3, r2
 8008274:	781b      	ldrb	r3, [r3, #0]
 8008276:	b29a      	uxth	r2, r3
 8008278:	68f9      	ldr	r1, [r7, #12]
 800827a:	69fb      	ldr	r3, [r7, #28]
 800827c:	3301      	adds	r3, #1
 800827e:	440b      	add	r3, r1
 8008280:	781b      	ldrb	r3, [r3, #0]
 8008282:	b29b      	uxth	r3, r3
 8008284:	021b      	lsls	r3, r3, #8
 8008286:	b29b      	uxth	r3, r3
 8008288:	4313      	orrs	r3, r2
 800828a:	b29a      	uxth	r2, r3
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	801a      	strh	r2, [r3, #0]
#ifdef SL_WFX_USE_SECURE_LINK
  result = sl_wfx_secure_link_receive(&network_rx_buffer, read_length);
  SL_WFX_ERROR_CHECK(result);
#endif //SL_WFX_USE_SECURE_LINK

  network_rx_buffer->header.length = sl_wfx_htole16(network_rx_buffer->header.length);
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	881b      	ldrh	r3, [r3, #0]
 8008294:	b29b      	uxth	r3, r3
 8008296:	68fc      	ldr	r4, [r7, #12]
 8008298:	4618      	mov	r0, r3
 800829a:	f7ff fc42 	bl	8007b22 <uint16_identity>
 800829e:	4603      	mov	r3, r0
 80082a0:	8023      	strh	r3, [r4, #0]

  /* send the information to the host */
  result = sl_wfx_host_post_event(network_rx_buffer);
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	4618      	mov	r0, r3
 80082a6:	f000 fe3f 	bl	8008f28 <sl_wfx_host_post_event>
 80082aa:	6278      	str	r0, [r7, #36]	; 0x24
 80082ac:	e006      	b.n	80082bc <sl_wfx_receive_frame+0x148>
    SL_WFX_ERROR_CHECK(result);
 80082ae:	bf00      	nop
 80082b0:	e004      	b.n	80082bc <sl_wfx_receive_frame+0x148>
      SL_WFX_ERROR_CHECK(result);
 80082b2:	bf00      	nop
 80082b4:	e002      	b.n	80082bc <sl_wfx_receive_frame+0x148>
  SL_WFX_ERROR_CHECK(result);
 80082b6:	bf00      	nop
 80082b8:	e000      	b.n	80082bc <sl_wfx_receive_frame+0x148>
  SL_WFX_ERROR_CHECK(result);
 80082ba:	bf00      	nop

  error_handler:
  if (network_rx_buffer != NULL) {
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d008      	beq.n	80082d4 <sl_wfx_receive_frame+0x160>
    sl_wfx_free_command_buffer(network_rx_buffer, network_rx_buffer->header.id, buffer_type);
 80082c2:	68f8      	ldr	r0, [r7, #12]
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	789b      	ldrb	r3, [r3, #2]
 80082c8:	4619      	mov	r1, r3
 80082ca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80082ce:	461a      	mov	r2, r3
 80082d0:	f000 fcb4 	bl	8008c3c <sl_wfx_free_command_buffer>
  }
#ifdef SL_WFX_USE_SECURE_LINK
  result = sl_wfx_secure_link_renegotiate();
#endif //SL_WFX_USE_SECURE_LINK

  unlock_result = sl_wfx_host_unlock();
 80082d4:	f000 ffb8 	bl	8009248 <sl_wfx_host_unlock>
 80082d8:	6138      	str	r0, [r7, #16]
  if (unlock_result != SL_STATUS_OK) {
 80082da:	693b      	ldr	r3, [r7, #16]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d001      	beq.n	80082e4 <sl_wfx_receive_frame+0x170>
    result = unlock_result;
 80082e0:	693b      	ldr	r3, [r7, #16]
 80082e2:	627b      	str	r3, [r7, #36]	; 0x24
  }

#if (SL_WFX_DEBUG_MASK & SL_WFX_DEBUG_ERROR)
  if (result != SL_STATUS_OK) {
 80082e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d003      	beq.n	80082f2 <sl_wfx_receive_frame+0x17e>
    sl_wfx_host_log("Receive frame error %u\n", result);
 80082ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80082ec:	4805      	ldr	r0, [pc, #20]	; (8008304 <sl_wfx_receive_frame+0x190>)
 80082ee:	f000 ff79 	bl	80091e4 <sl_wfx_host_log>
  }
#endif
  return result;
 80082f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80082f4:	4618      	mov	r0, r3
 80082f6:	372c      	adds	r7, #44	; 0x2c
 80082f8:	46bd      	mov	sp, r7
 80082fa:	bd90      	pop	{r4, r7, pc}
 80082fc:	0801db80 	.word	0x0801db80
 8008300:	20000898 	.word	0x20000898
 8008304:	0801dba0 	.word	0x0801dba0

08008308 <sl_wfx_enable_irq>:
 * @return SL_STATUS_OK if the irq is enabled correctly, SL_STATUS_FAIL otherwise
 *
 * @note Enable the host irq and set the Wi-Fi chip register accordingly
 *****************************************************************************/
sl_status_t sl_wfx_enable_irq(void)
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b082      	sub	sp, #8
 800830c:	af00      	add	r7, sp, #0
  uint32_t    value32;
  sl_status_t result;

  result = sl_wfx_host_enable_platform_interrupt();
 800830e:	f001 fc65 	bl	8009bdc <sl_wfx_host_enable_platform_interrupt>
 8008312:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(result);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d115      	bne.n	8008346 <sl_wfx_enable_irq+0x3e>

  result = sl_wfx_reg_read_32(SL_WFX_CONFIG_REG_ID, &value32);
 800831a:	463b      	mov	r3, r7
 800831c:	4619      	mov	r1, r3
 800831e:	2000      	movs	r0, #0
 8008320:	f7ff f9c2 	bl	80076a8 <sl_wfx_reg_read_32>
 8008324:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(result);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d10e      	bne.n	800834a <sl_wfx_enable_irq+0x42>

  value32 |= SL_WFX_CONFIG_DATA_IRQ_ENABLE;
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008332:	603b      	str	r3, [r7, #0]

  result = sl_wfx_reg_write_32(SL_WFX_CONFIG_REG_ID, value32);
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	4619      	mov	r1, r3
 8008338:	2000      	movs	r0, #0
 800833a:	f7ff f9cf 	bl	80076dc <sl_wfx_reg_write_32>
 800833e:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(result);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2b00      	cmp	r3, #0

  error_handler:
 8008344:	e002      	b.n	800834c <sl_wfx_enable_irq+0x44>
  SL_WFX_ERROR_CHECK(result);
 8008346:	bf00      	nop
 8008348:	e000      	b.n	800834c <sl_wfx_enable_irq+0x44>
  SL_WFX_ERROR_CHECK(result);
 800834a:	bf00      	nop
  return result;
 800834c:	687b      	ldr	r3, [r7, #4]
}
 800834e:	4618      	mov	r0, r3
 8008350:	3708      	adds	r7, #8
 8008352:	46bd      	mov	sp, r7
 8008354:	bd80      	pop	{r7, pc}

08008356 <sl_wfx_disable_irq>:
 * @return SL_STATUS_OK if the irq is disabled correctly, SL_STATUS_FAIL otherwise
 *
 * @note Disable the host irq and set the Wi-Fi chip register accordingly
 *****************************************************************************/
sl_status_t sl_wfx_disable_irq(void)
{
 8008356:	b580      	push	{r7, lr}
 8008358:	b082      	sub	sp, #8
 800835a:	af00      	add	r7, sp, #0
  uint32_t    value32;
  sl_status_t result;

  result = sl_wfx_reg_read_32(SL_WFX_CONFIG_REG_ID, &value32);
 800835c:	463b      	mov	r3, r7
 800835e:	4619      	mov	r1, r3
 8008360:	2000      	movs	r0, #0
 8008362:	f7ff f9a1 	bl	80076a8 <sl_wfx_reg_read_32>
 8008366:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(result);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d112      	bne.n	8008394 <sl_wfx_disable_irq+0x3e>

  value32 &= ~SL_WFX_CONFIG_DATA_IRQ_ENABLE;
 800836e:	683b      	ldr	r3, [r7, #0]
 8008370:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008374:	603b      	str	r3, [r7, #0]

  result = sl_wfx_reg_write_32(SL_WFX_CONFIG_REG_ID, value32);
 8008376:	683b      	ldr	r3, [r7, #0]
 8008378:	4619      	mov	r1, r3
 800837a:	2000      	movs	r0, #0
 800837c:	f7ff f9ae 	bl	80076dc <sl_wfx_reg_write_32>
 8008380:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(result);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d107      	bne.n	8008398 <sl_wfx_disable_irq+0x42>

  result = sl_wfx_host_disable_platform_interrupt();
 8008388:	f001 fc35 	bl	8009bf6 <sl_wfx_host_disable_platform_interrupt>
 800838c:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(result);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	2b00      	cmp	r3, #0

  error_handler:
 8008392:	e002      	b.n	800839a <sl_wfx_disable_irq+0x44>
  SL_WFX_ERROR_CHECK(result);
 8008394:	bf00      	nop
 8008396:	e000      	b.n	800839a <sl_wfx_disable_irq+0x44>
  SL_WFX_ERROR_CHECK(result);
 8008398:	bf00      	nop
  return result;
 800839a:	687b      	ldr	r3, [r7, #4]
}
 800839c:	4618      	mov	r0, r3
 800839e:	3708      	adds	r7, #8
 80083a0:	46bd      	mov	sp, r7
 80083a2:	bd80      	pop	{r7, pc}

080083a4 <sl_wfx_set_access_mode_message>:
 *
 * @return SL_STATUS_OK if the message mode is enabled correctly,
 * SL_STATUS_FAIL otherwise
 *****************************************************************************/
sl_status_t sl_wfx_set_access_mode_message(void)
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b082      	sub	sp, #8
 80083a8:	af00      	add	r7, sp, #0
  /* Configure device for MESSAGE MODE */
  sl_status_t result;
  uint32_t    val32;

  result = sl_wfx_reg_read_32(SL_WFX_CONFIG_REG_ID, &val32);
 80083aa:	463b      	mov	r3, r7
 80083ac:	4619      	mov	r1, r3
 80083ae:	2000      	movs	r0, #0
 80083b0:	f7ff f97a 	bl	80076a8 <sl_wfx_reg_read_32>
 80083b4:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(result);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d10a      	bne.n	80083d2 <sl_wfx_set_access_mode_message+0x2e>

  result = sl_wfx_reg_write_32(SL_WFX_CONFIG_REG_ID, val32 & ~SL_WFX_CONFIG_ACCESS_MODE_BIT);
 80083bc:	683b      	ldr	r3, [r7, #0]
 80083be:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80083c2:	4619      	mov	r1, r3
 80083c4:	2000      	movs	r0, #0
 80083c6:	f7ff f989 	bl	80076dc <sl_wfx_reg_write_32>
 80083ca:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(result);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2b00      	cmp	r3, #0

  error_handler:
 80083d0:	e000      	b.n	80083d4 <sl_wfx_set_access_mode_message+0x30>
  SL_WFX_ERROR_CHECK(result);
 80083d2:	bf00      	nop
  return result;
 80083d4:	687b      	ldr	r3, [r7, #4]
}
 80083d6:	4618      	mov	r0, r3
 80083d8:	3708      	adds	r7, #8
 80083da:	46bd      	mov	sp, r7
 80083dc:	bd80      	pop	{r7, pc}
	...

080083e0 <sl_wfx_init_chip>:
 * @brief Init the Wi-Fi chip
 *
 * @return SL_STATUS_OK if the initialization is successful, SL_STATUS_FAIL otherwise
 *****************************************************************************/
static sl_status_t sl_wfx_init_chip(void)
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b084      	sub	sp, #16
 80083e4:	af00      	add	r7, sp, #0
  sl_status_t result;
  uint32_t    value32;
  uint16_t    value16;

  result = sl_wfx_reg_read_32(SL_WFX_CONFIG_REG_ID, &value32);
 80083e6:	1d3b      	adds	r3, r7, #4
 80083e8:	4619      	mov	r1, r3
 80083ea:	2000      	movs	r0, #0
 80083ec:	f7ff f95c 	bl	80076a8 <sl_wfx_reg_read_32>
 80083f0:	60f8      	str	r0, [r7, #12]
  SL_WFX_ERROR_CHECK(result);
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d177      	bne.n	80084e8 <sl_wfx_init_chip+0x108>

  /* General purpose registers setting */
  result = sl_wfx_reg_write_32(SL_WFX_TSET_GEN_R_W_REG_ID, 0x07208775);
 80083f8:	4949      	ldr	r1, [pc, #292]	; (8008520 <sl_wfx_init_chip+0x140>)
 80083fa:	2006      	movs	r0, #6
 80083fc:	f7ff f96e 	bl	80076dc <sl_wfx_reg_write_32>
 8008400:	60f8      	str	r0, [r7, #12]
  SL_WFX_ERROR_CHECK(result);
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d171      	bne.n	80084ec <sl_wfx_init_chip+0x10c>
  result = sl_wfx_reg_write_32(SL_WFX_TSET_GEN_R_W_REG_ID, 0x082ec020);
 8008408:	4946      	ldr	r1, [pc, #280]	; (8008524 <sl_wfx_init_chip+0x144>)
 800840a:	2006      	movs	r0, #6
 800840c:	f7ff f966 	bl	80076dc <sl_wfx_reg_write_32>
 8008410:	60f8      	str	r0, [r7, #12]
  SL_WFX_ERROR_CHECK(result);
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d16b      	bne.n	80084f0 <sl_wfx_init_chip+0x110>
  result = sl_wfx_reg_write_32(SL_WFX_TSET_GEN_R_W_REG_ID, 0x093c3c3c);
 8008418:	4943      	ldr	r1, [pc, #268]	; (8008528 <sl_wfx_init_chip+0x148>)
 800841a:	2006      	movs	r0, #6
 800841c:	f7ff f95e 	bl	80076dc <sl_wfx_reg_write_32>
 8008420:	60f8      	str	r0, [r7, #12]
  SL_WFX_ERROR_CHECK(result);
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d165      	bne.n	80084f4 <sl_wfx_init_chip+0x114>
  result = sl_wfx_reg_write_32(SL_WFX_TSET_GEN_R_W_REG_ID, 0x0b322c44);
 8008428:	4940      	ldr	r1, [pc, #256]	; (800852c <sl_wfx_init_chip+0x14c>)
 800842a:	2006      	movs	r0, #6
 800842c:	f7ff f956 	bl	80076dc <sl_wfx_reg_write_32>
 8008430:	60f8      	str	r0, [r7, #12]
  SL_WFX_ERROR_CHECK(result);
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d15f      	bne.n	80084f8 <sl_wfx_init_chip+0x118>
  result = sl_wfx_reg_write_32(SL_WFX_TSET_GEN_R_W_REG_ID, 0x0ca06497);
 8008438:	493d      	ldr	r1, [pc, #244]	; (8008530 <sl_wfx_init_chip+0x150>)
 800843a:	2006      	movs	r0, #6
 800843c:	f7ff f94e 	bl	80076dc <sl_wfx_reg_write_32>
 8008440:	60f8      	str	r0, [r7, #12]
  SL_WFX_ERROR_CHECK(result);
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d159      	bne.n	80084fc <sl_wfx_init_chip+0x11c>

  /* set wake-up bit */
  result = sl_wfx_reg_read_16(SL_WFX_CONTROL_REG_ID, &value16);
 8008448:	1cbb      	adds	r3, r7, #2
 800844a:	4619      	mov	r1, r3
 800844c:	2001      	movs	r0, #1
 800844e:	f7ff f8ee 	bl	800762e <sl_wfx_reg_read_16>
 8008452:	60f8      	str	r0, [r7, #12]
  SL_WFX_ERROR_CHECK(result);
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d152      	bne.n	8008500 <sl_wfx_init_chip+0x120>
  value16 |= SL_WFX_CONT_WUP_BIT;
 800845a:	887b      	ldrh	r3, [r7, #2]
 800845c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008460:	b29b      	uxth	r3, r3
 8008462:	807b      	strh	r3, [r7, #2]
  result = sl_wfx_reg_write_16(SL_WFX_CONTROL_REG_ID, value16);
 8008464:	887b      	ldrh	r3, [r7, #2]
 8008466:	4619      	mov	r1, r3
 8008468:	2001      	movs	r0, #1
 800846a:	f7ff f8fd 	bl	8007668 <sl_wfx_reg_write_16>
 800846e:	60f8      	str	r0, [r7, #12]
  SL_WFX_ERROR_CHECK(result);
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d146      	bne.n	8008504 <sl_wfx_init_chip+0x124>

  /* .. and wait for wake-up */
  for (uint32_t i = 0; i < 200; ++i) {
 8008476:	2300      	movs	r3, #0
 8008478:	60bb      	str	r3, [r7, #8]
 800847a:	e013      	b.n	80084a4 <sl_wfx_init_chip+0xc4>
    result = sl_wfx_reg_read_16(SL_WFX_CONTROL_REG_ID, &value16);
 800847c:	1cbb      	adds	r3, r7, #2
 800847e:	4619      	mov	r1, r3
 8008480:	2001      	movs	r0, #1
 8008482:	f7ff f8d4 	bl	800762e <sl_wfx_reg_read_16>
 8008486:	60f8      	str	r0, [r7, #12]
    SL_WFX_ERROR_CHECK(result);
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d13c      	bne.n	8008508 <sl_wfx_init_chip+0x128>

    if ((value16 & SL_WFX_CONT_RDY_BIT) == SL_WFX_CONT_RDY_BIT) {
 800848e:	887b      	ldrh	r3, [r7, #2]
 8008490:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008494:	2b00      	cmp	r3, #0
 8008496:	d109      	bne.n	80084ac <sl_wfx_init_chip+0xcc>
      break;
    } else {
      sl_wfx_host_wait(1);
 8008498:	2001      	movs	r0, #1
 800849a:	f000 fd39 	bl	8008f10 <sl_wfx_host_wait>
  for (uint32_t i = 0; i < 200; ++i) {
 800849e:	68bb      	ldr	r3, [r7, #8]
 80084a0:	3301      	adds	r3, #1
 80084a2:	60bb      	str	r3, [r7, #8]
 80084a4:	68bb      	ldr	r3, [r7, #8]
 80084a6:	2bc7      	cmp	r3, #199	; 0xc7
 80084a8:	d9e8      	bls.n	800847c <sl_wfx_init_chip+0x9c>
 80084aa:	e000      	b.n	80084ae <sl_wfx_init_chip+0xce>
      break;
 80084ac:	bf00      	nop
    }
  }

  if ((value16 & SL_WFX_CONT_RDY_BIT) != SL_WFX_CONT_RDY_BIT) {
 80084ae:	887b      	ldrh	r3, [r7, #2]
 80084b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d104      	bne.n	80084c2 <sl_wfx_init_chip+0xe2>
    result = SL_STATUS_TIMEOUT;
 80084b8:	2307      	movs	r3, #7
 80084ba:	60fb      	str	r3, [r7, #12]
    SL_WFX_ERROR_CHECK(result);
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d124      	bne.n	800850c <sl_wfx_init_chip+0x12c>
  }

  /* check for access mode bit */
  result = sl_wfx_reg_read_32(SL_WFX_CONFIG_REG_ID, &value32);
 80084c2:	1d3b      	adds	r3, r7, #4
 80084c4:	4619      	mov	r1, r3
 80084c6:	2000      	movs	r0, #0
 80084c8:	f7ff f8ee 	bl	80076a8 <sl_wfx_reg_read_32>
 80084cc:	60f8      	str	r0, [r7, #12]
  SL_WFX_ERROR_CHECK(result);
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d11d      	bne.n	8008510 <sl_wfx_init_chip+0x130>
  if ((value32 & SL_WFX_CONFIG_ACCESS_MODE_BIT) == 0) {
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d11a      	bne.n	8008514 <sl_wfx_init_chip+0x134>
    result = SL_STATUS_FAIL;
 80084de:	2301      	movs	r3, #1
 80084e0:	60fb      	str	r3, [r7, #12]
    SL_WFX_ERROR_CHECK(result);
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	2b00      	cmp	r3, #0
  }

  error_handler:
 80084e6:	e015      	b.n	8008514 <sl_wfx_init_chip+0x134>
  SL_WFX_ERROR_CHECK(result);
 80084e8:	bf00      	nop
 80084ea:	e014      	b.n	8008516 <sl_wfx_init_chip+0x136>
  SL_WFX_ERROR_CHECK(result);
 80084ec:	bf00      	nop
 80084ee:	e012      	b.n	8008516 <sl_wfx_init_chip+0x136>
  SL_WFX_ERROR_CHECK(result);
 80084f0:	bf00      	nop
 80084f2:	e010      	b.n	8008516 <sl_wfx_init_chip+0x136>
  SL_WFX_ERROR_CHECK(result);
 80084f4:	bf00      	nop
 80084f6:	e00e      	b.n	8008516 <sl_wfx_init_chip+0x136>
  SL_WFX_ERROR_CHECK(result);
 80084f8:	bf00      	nop
 80084fa:	e00c      	b.n	8008516 <sl_wfx_init_chip+0x136>
  SL_WFX_ERROR_CHECK(result);
 80084fc:	bf00      	nop
 80084fe:	e00a      	b.n	8008516 <sl_wfx_init_chip+0x136>
  SL_WFX_ERROR_CHECK(result);
 8008500:	bf00      	nop
 8008502:	e008      	b.n	8008516 <sl_wfx_init_chip+0x136>
  SL_WFX_ERROR_CHECK(result);
 8008504:	bf00      	nop
 8008506:	e006      	b.n	8008516 <sl_wfx_init_chip+0x136>
    SL_WFX_ERROR_CHECK(result);
 8008508:	bf00      	nop
 800850a:	e004      	b.n	8008516 <sl_wfx_init_chip+0x136>
    SL_WFX_ERROR_CHECK(result);
 800850c:	bf00      	nop
 800850e:	e002      	b.n	8008516 <sl_wfx_init_chip+0x136>
  SL_WFX_ERROR_CHECK(result);
 8008510:	bf00      	nop
 8008512:	e000      	b.n	8008516 <sl_wfx_init_chip+0x136>
  error_handler:
 8008514:	bf00      	nop
  return result;
 8008516:	68fb      	ldr	r3, [r7, #12]
}
 8008518:	4618      	mov	r0, r3
 800851a:	3710      	adds	r7, #16
 800851c:	46bd      	mov	sp, r7
 800851e:	bd80      	pop	{r7, pc}
 8008520:	07208775 	.word	0x07208775
 8008524:	082ec020 	.word	0x082ec020
 8008528:	093c3c3c 	.word	0x093c3c3c
 800852c:	0b322c44 	.word	0x0b322c44
 8008530:	0ca06497 	.word	0x0ca06497

08008534 <sl_wfx_download_run_bootloader>:
 * @brief run the Wi-Fi chip bootloader
 *
 * @return SL_STATUS_OK if the bootloader runs correctly, SL_STATUS_FAIL otherwise
 *****************************************************************************/
static sl_status_t sl_wfx_download_run_bootloader(void)
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b082      	sub	sp, #8
 8008538:	af00      	add	r7, sp, #0
  sl_status_t result;
  uint32_t    value32;

  result = sl_wfx_apb_read_32(ADDR_DWL_CTRL_AREA_NCP_STATUS, &value32);
 800853a:	463b      	mov	r3, r7
 800853c:	4619      	mov	r1, r3
 800853e:	4823      	ldr	r0, [pc, #140]	; (80085cc <sl_wfx_download_run_bootloader+0x98>)
 8008540:	f7ff f93c 	bl	80077bc <sl_wfx_apb_read_32>
 8008544:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(result);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d12f      	bne.n	80085ac <sl_wfx_download_run_bootloader+0x78>

  /* release CPU from reset and enable clock */
  result = sl_wfx_reg_read_32(SL_WFX_CONFIG_REG_ID, &value32);
 800854c:	463b      	mov	r3, r7
 800854e:	4619      	mov	r1, r3
 8008550:	2000      	movs	r0, #0
 8008552:	f7ff f8a9 	bl	80076a8 <sl_wfx_reg_read_32>
 8008556:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(result);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d128      	bne.n	80085b0 <sl_wfx_download_run_bootloader+0x7c>
  value32 &= ~(SL_WFX_CONFIG_CPU_RESET_BIT | SL_WFX_CONFIG_CPU_CLK_DIS_BIT);
 800855e:	683b      	ldr	r3, [r7, #0]
 8008560:	f423 43a0 	bic.w	r3, r3, #20480	; 0x5000
 8008564:	603b      	str	r3, [r7, #0]
  result = sl_wfx_reg_write_32(SL_WFX_CONFIG_REG_ID, value32);
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	4619      	mov	r1, r3
 800856a:	2000      	movs	r0, #0
 800856c:	f7ff f8b6 	bl	80076dc <sl_wfx_reg_write_32>
 8008570:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(result);
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d11d      	bne.n	80085b4 <sl_wfx_download_run_bootloader+0x80>

  /* Testing SRAM access */
  result = sl_wfx_apb_write_32(ADDR_DOWNLOAD_FIFO_BASE, 0x23abc88e);
 8008578:	4915      	ldr	r1, [pc, #84]	; (80085d0 <sl_wfx_download_run_bootloader+0x9c>)
 800857a:	4816      	ldr	r0, [pc, #88]	; (80085d4 <sl_wfx_download_run_bootloader+0xa0>)
 800857c:	f7ff f907 	bl	800778e <sl_wfx_apb_write_32>
 8008580:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(result);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d117      	bne.n	80085b8 <sl_wfx_download_run_bootloader+0x84>

  /* Check if the write command is successful */
  result = sl_wfx_apb_read_32(ADDR_DOWNLOAD_FIFO_BASE, &value32);
 8008588:	463b      	mov	r3, r7
 800858a:	4619      	mov	r1, r3
 800858c:	4811      	ldr	r0, [pc, #68]	; (80085d4 <sl_wfx_download_run_bootloader+0xa0>)
 800858e:	f7ff f915 	bl	80077bc <sl_wfx_apb_read_32>
 8008592:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(result);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d110      	bne.n	80085bc <sl_wfx_download_run_bootloader+0x88>
  if (value32 != 0x23abc88e) {
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	4a0c      	ldr	r2, [pc, #48]	; (80085d0 <sl_wfx_download_run_bootloader+0x9c>)
 800859e:	4293      	cmp	r3, r2
 80085a0:	d00e      	beq.n	80085c0 <sl_wfx_download_run_bootloader+0x8c>
    result = SL_STATUS_FAIL;
 80085a2:	2301      	movs	r3, #1
 80085a4:	607b      	str	r3, [r7, #4]
    SL_WFX_ERROR_CHECK(result);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	2b00      	cmp	r3, #0
  }

  error_handler:
 80085aa:	e009      	b.n	80085c0 <sl_wfx_download_run_bootloader+0x8c>
  SL_WFX_ERROR_CHECK(result);
 80085ac:	bf00      	nop
 80085ae:	e008      	b.n	80085c2 <sl_wfx_download_run_bootloader+0x8e>
  SL_WFX_ERROR_CHECK(result);
 80085b0:	bf00      	nop
 80085b2:	e006      	b.n	80085c2 <sl_wfx_download_run_bootloader+0x8e>
  SL_WFX_ERROR_CHECK(result);
 80085b4:	bf00      	nop
 80085b6:	e004      	b.n	80085c2 <sl_wfx_download_run_bootloader+0x8e>
  SL_WFX_ERROR_CHECK(result);
 80085b8:	bf00      	nop
 80085ba:	e002      	b.n	80085c2 <sl_wfx_download_run_bootloader+0x8e>
  SL_WFX_ERROR_CHECK(result);
 80085bc:	bf00      	nop
 80085be:	e000      	b.n	80085c2 <sl_wfx_download_run_bootloader+0x8e>
  error_handler:
 80085c0:	bf00      	nop
  return result;
 80085c2:	687b      	ldr	r3, [r7, #4]
}
 80085c4:	4618      	mov	r0, r3
 80085c6:	3708      	adds	r7, #8
 80085c8:	46bd      	mov	sp, r7
 80085ca:	bd80      	pop	{r7, pc}
 80085cc:	0900c010 	.word	0x0900c010
 80085d0:	23abc88e 	.word	0x23abc88e
 80085d4:	09004000 	.word	0x09004000

080085d8 <sl_wfx_download_run_firmware>:
 * SL_STATUS_WIFI_INVALID_KEY if the firmware keyset does not match the chip one,
 * SL_STATUS_WIFI_FIRMWARE_DOWNLOAD_TIMEOUT or SL_STATUS_TIMEOUT if the process times out,
 * SL_STATUS_FAIL otherwise
 *****************************************************************************/
static sl_status_t sl_wfx_download_run_firmware(void)
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b08c      	sub	sp, #48	; 0x30
 80085dc:	af00      	add	r7, sp, #0
  uint32_t       i;
  uint32_t       value32;
  uint32_t       image_length;
  uint32_t       block;
  uint32_t       num_blocks;
  uint32_t       put = 0;
 80085de:	2300      	movs	r3, #0
 80085e0:	623b      	str	r3, [r7, #32]
  uint32_t       get = 0;
 80085e2:	2300      	movs	r3, #0
 80085e4:	60bb      	str	r3, [r7, #8]
  const uint8_t *buffer;

  result = sl_wfx_host_init();
 80085e6:	f000 fb3b 	bl	8008c60 <sl_wfx_host_init>
 80085ea:	62f8      	str	r0, [r7, #44]	; 0x2c
  SL_WFX_ERROR_CHECK(result);
 80085ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	f040 8185 	bne.w	80088fe <sl_wfx_download_run_firmware+0x326>

  result = sl_wfx_apb_write_32(ADDR_DWL_CTRL_AREA_HOST_STATUS, HOST_STATE_NOT_READY);
 80085f4:	4984      	ldr	r1, [pc, #528]	; (8008808 <sl_wfx_download_run_firmware+0x230>)
 80085f6:	4885      	ldr	r0, [pc, #532]	; (800880c <sl_wfx_download_run_firmware+0x234>)
 80085f8:	f7ff f8c9 	bl	800778e <sl_wfx_apb_write_32>
 80085fc:	62f8      	str	r0, [r7, #44]	; 0x2c
  SL_WFX_ERROR_CHECK(result);
 80085fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008600:	2b00      	cmp	r3, #0
 8008602:	f040 817e 	bne.w	8008902 <sl_wfx_download_run_firmware+0x32a>
  result = sl_wfx_apb_write_32(ADDR_DWL_CTRL_AREA_PUT, 0);
 8008606:	2100      	movs	r1, #0
 8008608:	4881      	ldr	r0, [pc, #516]	; (8008810 <sl_wfx_download_run_firmware+0x238>)
 800860a:	f7ff f8c0 	bl	800778e <sl_wfx_apb_write_32>
 800860e:	62f8      	str	r0, [r7, #44]	; 0x2c
  SL_WFX_ERROR_CHECK(result);
 8008610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008612:	2b00      	cmp	r3, #0
 8008614:	f040 8177 	bne.w	8008906 <sl_wfx_download_run_firmware+0x32e>
  result = sl_wfx_apb_write_32(ADDR_DWL_CTRL_AREA_GET, 0);
 8008618:	2100      	movs	r1, #0
 800861a:	487e      	ldr	r0, [pc, #504]	; (8008814 <sl_wfx_download_run_firmware+0x23c>)
 800861c:	f7ff f8b7 	bl	800778e <sl_wfx_apb_write_32>
 8008620:	62f8      	str	r0, [r7, #44]	; 0x2c
  SL_WFX_ERROR_CHECK(result);
 8008622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008624:	2b00      	cmp	r3, #0
 8008626:	f040 8170 	bne.w	800890a <sl_wfx_download_run_firmware+0x332>
  result = sl_wfx_apb_write_32(ADDR_DWL_CTRL_AREA_HOST_STATUS, HOST_STATE_READY);
 800862a:	497b      	ldr	r1, [pc, #492]	; (8008818 <sl_wfx_download_run_firmware+0x240>)
 800862c:	4877      	ldr	r0, [pc, #476]	; (800880c <sl_wfx_download_run_firmware+0x234>)
 800862e:	f7ff f8ae 	bl	800778e <sl_wfx_apb_write_32>
 8008632:	62f8      	str	r0, [r7, #44]	; 0x2c
  SL_WFX_ERROR_CHECK(result);
 8008634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008636:	2b00      	cmp	r3, #0
 8008638:	f040 8169 	bne.w	800890e <sl_wfx_download_run_firmware+0x336>

  // wait for INFO_READ state
  result = sl_wfx_poll_for_value(ADDR_DWL_CTRL_AREA_NCP_STATUS, NCP_STATE_INFO_READY, 100);
 800863c:	2264      	movs	r2, #100	; 0x64
 800863e:	4977      	ldr	r1, [pc, #476]	; (800881c <sl_wfx_download_run_firmware+0x244>)
 8008640:	4877      	ldr	r0, [pc, #476]	; (8008820 <sl_wfx_download_run_firmware+0x248>)
 8008642:	f000 f9a3 	bl	800898c <sl_wfx_poll_for_value>
 8008646:	62f8      	str	r0, [r7, #44]	; 0x2c
  SL_WFX_ERROR_CHECK(result);
 8008648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800864a:	2b00      	cmp	r3, #0
 800864c:	f040 8161 	bne.w	8008912 <sl_wfx_download_run_firmware+0x33a>

  // read info
  result = sl_wfx_apb_read_32(0x0900C080, &value32);
 8008650:	f107 0310 	add.w	r3, r7, #16
 8008654:	4619      	mov	r1, r3
 8008656:	4873      	ldr	r0, [pc, #460]	; (8008824 <sl_wfx_download_run_firmware+0x24c>)
 8008658:	f7ff f8b0 	bl	80077bc <sl_wfx_apb_read_32>
 800865c:	62f8      	str	r0, [r7, #44]	; 0x2c
  SL_WFX_ERROR_CHECK(result);
 800865e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008660:	2b00      	cmp	r3, #0
 8008662:	f040 8158 	bne.w	8008916 <sl_wfx_download_run_firmware+0x33e>

  // retrieve WF200 keyset
  result = sl_wfx_apb_read_32(SL_WFX_PTE_INFO + 12, &value32);
 8008666:	f107 0310 	add.w	r3, r7, #16
 800866a:	4619      	mov	r1, r3
 800866c:	486e      	ldr	r0, [pc, #440]	; (8008828 <sl_wfx_download_run_firmware+0x250>)
 800866e:	f7ff f8a5 	bl	80077bc <sl_wfx_apb_read_32>
 8008672:	62f8      	str	r0, [r7, #44]	; 0x2c
  SL_WFX_ERROR_CHECK(result);
 8008674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008676:	2b00      	cmp	r3, #0
 8008678:	f040 814f 	bne.w	800891a <sl_wfx_download_run_firmware+0x342>
  encryption_keyset = (value32 >> 8);
 800867c:	693b      	ldr	r3, [r7, #16]
 800867e:	0a1b      	lsrs	r3, r3, #8
 8008680:	b2da      	uxtb	r2, r3
 8008682:	4b6a      	ldr	r3, [pc, #424]	; (800882c <sl_wfx_download_run_firmware+0x254>)
 8008684:	701a      	strb	r2, [r3, #0]

  // report that info is read
  result = sl_wfx_apb_write_32(ADDR_DWL_CTRL_AREA_HOST_STATUS, HOST_STATE_HOST_INFO_READ);
 8008686:	496a      	ldr	r1, [pc, #424]	; (8008830 <sl_wfx_download_run_firmware+0x258>)
 8008688:	4860      	ldr	r0, [pc, #384]	; (800880c <sl_wfx_download_run_firmware+0x234>)
 800868a:	f7ff f880 	bl	800778e <sl_wfx_apb_write_32>
 800868e:	62f8      	str	r0, [r7, #44]	; 0x2c
  SL_WFX_ERROR_CHECK(result);
 8008690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008692:	2b00      	cmp	r3, #0
 8008694:	f040 8143 	bne.w	800891e <sl_wfx_download_run_firmware+0x346>

  // wait for READY state
  result = sl_wfx_poll_for_value(ADDR_DWL_CTRL_AREA_NCP_STATUS, NCP_STATE_READY, 100);
 8008698:	2264      	movs	r2, #100	; 0x64
 800869a:	495f      	ldr	r1, [pc, #380]	; (8008818 <sl_wfx_download_run_firmware+0x240>)
 800869c:	4860      	ldr	r0, [pc, #384]	; (8008820 <sl_wfx_download_run_firmware+0x248>)
 800869e:	f000 f975 	bl	800898c <sl_wfx_poll_for_value>
 80086a2:	62f8      	str	r0, [r7, #44]	; 0x2c
  SL_WFX_ERROR_CHECK(result);
 80086a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	f040 813b 	bne.w	8008922 <sl_wfx_download_run_firmware+0x34a>

  // SB misc initialization. Work around for chips < A2.
  result = sl_wfx_apb_write_32(ADDR_DOWNLOAD_FIFO_BASE, 0xFFFFFFFF);
 80086ac:	f04f 31ff 	mov.w	r1, #4294967295
 80086b0:	4860      	ldr	r0, [pc, #384]	; (8008834 <sl_wfx_download_run_firmware+0x25c>)
 80086b2:	f7ff f86c 	bl	800778e <sl_wfx_apb_write_32>
 80086b6:	62f8      	str	r0, [r7, #44]	; 0x2c
  SL_WFX_ERROR_CHECK(result);
 80086b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	f040 8133 	bne.w	8008926 <sl_wfx_download_run_firmware+0x34e>

  // write image length
  sl_wfx_host_get_firmware_size(&image_length);
 80086c0:	f107 030c 	add.w	r3, r7, #12
 80086c4:	4618      	mov	r0, r3
 80086c6:	f000 fb21 	bl	8008d0c <sl_wfx_host_get_firmware_size>
  result = sl_wfx_apb_write_32(ADDR_DWL_CTRL_AREA_IMAGE_SIZE, image_length - FW_HASH_SIZE - FW_SIGNATURE_SIZE - FW_KEYSET_SIZE);
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	3b50      	subs	r3, #80	; 0x50
 80086ce:	4619      	mov	r1, r3
 80086d0:	4859      	ldr	r0, [pc, #356]	; (8008838 <sl_wfx_download_run_firmware+0x260>)
 80086d2:	f7ff f85c 	bl	800778e <sl_wfx_apb_write_32>
 80086d6:	62f8      	str	r0, [r7, #44]	; 0x2c
  SL_WFX_ERROR_CHECK(result);
 80086d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086da:	2b00      	cmp	r3, #0
 80086dc:	f040 8125 	bne.w	800892a <sl_wfx_download_run_firmware+0x352>

  // get firmware keyset, which is the first FW_KEYSET_SIZE of given image
  result = sl_wfx_host_get_firmware_data(&buffer, FW_KEYSET_SIZE);
 80086e0:	1d3b      	adds	r3, r7, #4
 80086e2:	2108      	movs	r1, #8
 80086e4:	4618      	mov	r0, r3
 80086e6:	f000 faf5 	bl	8008cd4 <sl_wfx_host_get_firmware_data>
 80086ea:	62f8      	str	r0, [r7, #44]	; 0x2c
  SL_WFX_ERROR_CHECK(result);
 80086ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	f040 811d 	bne.w	800892e <sl_wfx_download_run_firmware+0x356>

  // check if the firmware keyset corresponds to the chip keyset
  result = sl_wfx_compare_keysets(encryption_keyset, (char *)buffer);
 80086f4:	4b4d      	ldr	r3, [pc, #308]	; (800882c <sl_wfx_download_run_firmware+0x254>)
 80086f6:	781b      	ldrb	r3, [r3, #0]
 80086f8:	687a      	ldr	r2, [r7, #4]
 80086fa:	4611      	mov	r1, r2
 80086fc:	4618      	mov	r0, r3
 80086fe:	f000 f976 	bl	80089ee <sl_wfx_compare_keysets>
 8008702:	62f8      	str	r0, [r7, #44]	; 0x2c
  SL_WFX_ERROR_CHECK(result);
 8008704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008706:	2b00      	cmp	r3, #0
 8008708:	f040 8113 	bne.w	8008932 <sl_wfx_download_run_firmware+0x35a>

  // write image signature, which is the next FW_SIGNATURE_SIZE of given image
  result = sl_wfx_host_get_firmware_data(&buffer, FW_SIGNATURE_SIZE);
 800870c:	1d3b      	adds	r3, r7, #4
 800870e:	2140      	movs	r1, #64	; 0x40
 8008710:	4618      	mov	r0, r3
 8008712:	f000 fadf 	bl	8008cd4 <sl_wfx_host_get_firmware_data>
 8008716:	62f8      	str	r0, [r7, #44]	; 0x2c
  SL_WFX_ERROR_CHECK(result);
 8008718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800871a:	2b00      	cmp	r3, #0
 800871c:	f040 810b 	bne.w	8008936 <sl_wfx_download_run_firmware+0x35e>
  result = sl_wfx_apb_write(ADDR_DWL_CTRL_AREA_SIGNATURE, buffer, FW_SIGNATURE_SIZE);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2240      	movs	r2, #64	; 0x40
 8008724:	4619      	mov	r1, r3
 8008726:	4845      	ldr	r0, [pc, #276]	; (800883c <sl_wfx_download_run_firmware+0x264>)
 8008728:	f7ff f811 	bl	800774e <sl_wfx_apb_write>
 800872c:	62f8      	str	r0, [r7, #44]	; 0x2c
  SL_WFX_ERROR_CHECK(result);
 800872e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008730:	2b00      	cmp	r3, #0
 8008732:	f040 8102 	bne.w	800893a <sl_wfx_download_run_firmware+0x362>

  // write image hash, which is the next  FW_HASH_SIZE of given image
  result = sl_wfx_host_get_firmware_data(&buffer, FW_HASH_SIZE);
 8008736:	1d3b      	adds	r3, r7, #4
 8008738:	2108      	movs	r1, #8
 800873a:	4618      	mov	r0, r3
 800873c:	f000 faca 	bl	8008cd4 <sl_wfx_host_get_firmware_data>
 8008740:	62f8      	str	r0, [r7, #44]	; 0x2c
  SL_WFX_ERROR_CHECK(result);
 8008742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008744:	2b00      	cmp	r3, #0
 8008746:	f040 80fa 	bne.w	800893e <sl_wfx_download_run_firmware+0x366>
  result = sl_wfx_apb_write(ADDR_DWL_CTRL_AREA_FW_HASH, buffer, FW_HASH_SIZE);
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	2208      	movs	r2, #8
 800874e:	4619      	mov	r1, r3
 8008750:	483b      	ldr	r0, [pc, #236]	; (8008840 <sl_wfx_download_run_firmware+0x268>)
 8008752:	f7fe fffc 	bl	800774e <sl_wfx_apb_write>
 8008756:	62f8      	str	r0, [r7, #44]	; 0x2c
  SL_WFX_ERROR_CHECK(result);
 8008758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800875a:	2b00      	cmp	r3, #0
 800875c:	f040 80f1 	bne.w	8008942 <sl_wfx_download_run_firmware+0x36a>

  // write version, this is a pre-defined value (?)
  result = sl_wfx_apb_write_32(ADDR_DWL_CTRL_AREA_FW_VERSION, FW_VERSION_VALUE);
 8008760:	2101      	movs	r1, #1
 8008762:	4838      	ldr	r0, [pc, #224]	; (8008844 <sl_wfx_download_run_firmware+0x26c>)
 8008764:	f7ff f813 	bl	800778e <sl_wfx_apb_write_32>
 8008768:	62f8      	str	r0, [r7, #44]	; 0x2c
  SL_WFX_ERROR_CHECK(result);
 800876a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800876c:	2b00      	cmp	r3, #0
 800876e:	f040 80ea 	bne.w	8008946 <sl_wfx_download_run_firmware+0x36e>

  // notify NCP that upload is starting
  result = sl_wfx_apb_write_32(ADDR_DWL_CTRL_AREA_HOST_STATUS, HOST_STATE_UPLOAD_PENDING);
 8008772:	4935      	ldr	r1, [pc, #212]	; (8008848 <sl_wfx_download_run_firmware+0x270>)
 8008774:	4825      	ldr	r0, [pc, #148]	; (800880c <sl_wfx_download_run_firmware+0x234>)
 8008776:	f7ff f80a 	bl	800778e <sl_wfx_apb_write_32>
 800877a:	62f8      	str	r0, [r7, #44]	; 0x2c
  SL_WFX_ERROR_CHECK(result);
 800877c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800877e:	2b00      	cmp	r3, #0
 8008780:	f040 80e3 	bne.w	800894a <sl_wfx_download_run_firmware+0x372>

  // skip signature and hash from image length
  image_length -= (FW_HASH_SIZE + FW_SIGNATURE_SIZE + FW_KEYSET_SIZE);
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	3b50      	subs	r3, #80	; 0x50
 8008788:	60fb      	str	r3, [r7, #12]

  /* Calculate number of download blocks */
  num_blocks = (image_length - 1) / DOWNLOAD_BLOCK_SIZE + 1;
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	3b01      	subs	r3, #1
 800878e:	0a9b      	lsrs	r3, r3, #10
 8008790:	3301      	adds	r3, #1
 8008792:	61bb      	str	r3, [r7, #24]

  /* Firmware downloading loop */
  for ( block = 0; block < num_blocks; block++ ) {
 8008794:	2300      	movs	r3, #0
 8008796:	627b      	str	r3, [r7, #36]	; 0x24
 8008798:	e093      	b.n	80088c2 <sl_wfx_download_run_firmware+0x2ea>
    /* loop until put - get <= 24K */
    for ( i = 0; i < 100; i++ ) {
 800879a:	2300      	movs	r3, #0
 800879c:	62bb      	str	r3, [r7, #40]	; 0x28
 800879e:	e015      	b.n	80087cc <sl_wfx_download_run_firmware+0x1f4>
      if ((put - get) <= (DOWNLOAD_FIFO_SIZE - DOWNLOAD_BLOCK_SIZE)) {
 80087a0:	68bb      	ldr	r3, [r7, #8]
 80087a2:	6a3a      	ldr	r2, [r7, #32]
 80087a4:	1ad3      	subs	r3, r2, r3
 80087a6:	f5b3 4ff8 	cmp.w	r3, #31744	; 0x7c00
 80087aa:	d913      	bls.n	80087d4 <sl_wfx_download_run_firmware+0x1fc>
        break;
      }

      get = 0;
 80087ac:	2300      	movs	r3, #0
 80087ae:	60bb      	str	r3, [r7, #8]
      result = sl_wfx_apb_read_32(ADDR_DWL_CTRL_AREA_GET, &get);
 80087b0:	f107 0308 	add.w	r3, r7, #8
 80087b4:	4619      	mov	r1, r3
 80087b6:	4817      	ldr	r0, [pc, #92]	; (8008814 <sl_wfx_download_run_firmware+0x23c>)
 80087b8:	f7ff f800 	bl	80077bc <sl_wfx_apb_read_32>
 80087bc:	62f8      	str	r0, [r7, #44]	; 0x2c
      SL_WFX_ERROR_CHECK(result);
 80087be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	f040 80c4 	bne.w	800894e <sl_wfx_download_run_firmware+0x376>
    for ( i = 0; i < 100; i++ ) {
 80087c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087c8:	3301      	adds	r3, #1
 80087ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80087cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087ce:	2b63      	cmp	r3, #99	; 0x63
 80087d0:	d9e6      	bls.n	80087a0 <sl_wfx_download_run_firmware+0x1c8>
 80087d2:	e000      	b.n	80087d6 <sl_wfx_download_run_firmware+0x1fe>
        break;
 80087d4:	bf00      	nop
    }

    if ((put - get) > (DOWNLOAD_FIFO_SIZE - DOWNLOAD_BLOCK_SIZE)) {
 80087d6:	68bb      	ldr	r3, [r7, #8]
 80087d8:	6a3a      	ldr	r2, [r7, #32]
 80087da:	1ad3      	subs	r3, r2, r3
 80087dc:	f5b3 4ff8 	cmp.w	r3, #31744	; 0x7c00
 80087e0:	d93a      	bls.n	8008858 <sl_wfx_download_run_firmware+0x280>
      /* check the download status in NCP */
      result = sl_wfx_apb_read_32(ADDR_DWL_CTRL_AREA_NCP_STATUS, &value32);
 80087e2:	f107 0310 	add.w	r3, r7, #16
 80087e6:	4619      	mov	r1, r3
 80087e8:	480d      	ldr	r0, [pc, #52]	; (8008820 <sl_wfx_download_run_firmware+0x248>)
 80087ea:	f7fe ffe7 	bl	80077bc <sl_wfx_apb_read_32>
 80087ee:	62f8      	str	r0, [r7, #44]	; 0x2c
      SL_WFX_ERROR_CHECK(result);
 80087f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	f040 80ad 	bne.w	8008952 <sl_wfx_download_run_firmware+0x37a>

      if (value32 != NCP_STATE_DOWNLOAD_PENDING) {
 80087f8:	693b      	ldr	r3, [r7, #16]
 80087fa:	4a13      	ldr	r2, [pc, #76]	; (8008848 <sl_wfx_download_run_firmware+0x270>)
 80087fc:	4293      	cmp	r3, r2
 80087fe:	d025      	beq.n	800884c <sl_wfx_download_run_firmware+0x274>
        result = SL_STATUS_FAIL;
 8008800:	2301      	movs	r3, #1
 8008802:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008804:	e025      	b.n	8008852 <sl_wfx_download_run_firmware+0x27a>
 8008806:	bf00      	nop
 8008808:	12345678 	.word	0x12345678
 800880c:	0900c00c 	.word	0x0900c00c
 8008810:	0900c004 	.word	0x0900c004
 8008814:	0900c008 	.word	0x0900c008
 8008818:	87654321 	.word	0x87654321
 800881c:	bd53ef99 	.word	0xbd53ef99
 8008820:	0900c010 	.word	0x0900c010
 8008824:	0900c080 	.word	0x0900c080
 8008828:	0900c0cc 	.word	0x0900c0cc
 800882c:	2000089c 	.word	0x2000089c
 8008830:	a753bd99 	.word	0xa753bd99
 8008834:	09004000 	.word	0x09004000
 8008838:	0900c000 	.word	0x0900c000
 800883c:	0900c014 	.word	0x0900c014
 8008840:	0900c054 	.word	0x0900c054
 8008844:	0900c05c 	.word	0x0900c05c
 8008848:	abcddcba 	.word	0xabcddcba
      } else {
        result = SL_STATUS_WIFI_FIRMWARE_DOWNLOAD_TIMEOUT;
 800884c:	f640 3302 	movw	r3, #2818	; 0xb02
 8008850:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      SL_WFX_ERROR_CHECK(result);
 8008852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008854:	2b00      	cmp	r3, #0
 8008856:	d17e      	bne.n	8008956 <sl_wfx_download_run_firmware+0x37e>
    }

    /* calculate the block size */
    uint32_t block_size = image_length - put;
 8008858:	68fa      	ldr	r2, [r7, #12]
 800885a:	6a3b      	ldr	r3, [r7, #32]
 800885c:	1ad3      	subs	r3, r2, r3
 800885e:	61fb      	str	r3, [r7, #28]
    if (block_size > DOWNLOAD_BLOCK_SIZE) {
 8008860:	69fb      	ldr	r3, [r7, #28]
 8008862:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008866:	d902      	bls.n	800886e <sl_wfx_download_run_firmware+0x296>
      block_size = DOWNLOAD_BLOCK_SIZE;
 8008868:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800886c:	61fb      	str	r3, [r7, #28]
    }

    /* send the block to SRAM */
    result = sl_wfx_host_get_firmware_data(&buffer, block_size);
 800886e:	1d3b      	adds	r3, r7, #4
 8008870:	69f9      	ldr	r1, [r7, #28]
 8008872:	4618      	mov	r0, r3
 8008874:	f000 fa2e 	bl	8008cd4 <sl_wfx_host_get_firmware_data>
 8008878:	62f8      	str	r0, [r7, #44]	; 0x2c
    SL_WFX_ERROR_CHECK(result);
 800887a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800887c:	2b00      	cmp	r3, #0
 800887e:	d16c      	bne.n	800895a <sl_wfx_download_run_firmware+0x382>
    uint32_t block_address = ADDR_DOWNLOAD_FIFO_BASE + (put % DOWNLOAD_FIFO_SIZE);
 8008880:	6a3b      	ldr	r3, [r7, #32]
 8008882:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8008886:	f103 6310 	add.w	r3, r3, #150994944	; 0x9000000
 800888a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800888e:	617b      	str	r3, [r7, #20]
    result = sl_wfx_apb_write(block_address, buffer, block_size);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	69fa      	ldr	r2, [r7, #28]
 8008894:	4619      	mov	r1, r3
 8008896:	6978      	ldr	r0, [r7, #20]
 8008898:	f7fe ff59 	bl	800774e <sl_wfx_apb_write>
 800889c:	62f8      	str	r0, [r7, #44]	; 0x2c
    SL_WFX_ERROR_CHECK(result);
 800889e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d15c      	bne.n	800895e <sl_wfx_download_run_firmware+0x386>
#if (SL_WFX_DEBUG_MASK & SL_WFX_DEBUG_FW_LOAD)
    sl_wfx_host_log("FW> %d/%d \n\r", put, image_length);
#endif

    /* update the put register */
    put += block_size;
 80088a4:	6a3a      	ldr	r2, [r7, #32]
 80088a6:	69fb      	ldr	r3, [r7, #28]
 80088a8:	4413      	add	r3, r2
 80088aa:	623b      	str	r3, [r7, #32]

    result = sl_wfx_apb_write_32(ADDR_DWL_CTRL_AREA_PUT, put);
 80088ac:	6a39      	ldr	r1, [r7, #32]
 80088ae:	4832      	ldr	r0, [pc, #200]	; (8008978 <sl_wfx_download_run_firmware+0x3a0>)
 80088b0:	f7fe ff6d 	bl	800778e <sl_wfx_apb_write_32>
 80088b4:	62f8      	str	r0, [r7, #44]	; 0x2c
    SL_WFX_ERROR_CHECK(result);
 80088b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d152      	bne.n	8008962 <sl_wfx_download_run_firmware+0x38a>
  for ( block = 0; block < num_blocks; block++ ) {
 80088bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088be:	3301      	adds	r3, #1
 80088c0:	627b      	str	r3, [r7, #36]	; 0x24
 80088c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088c4:	69bb      	ldr	r3, [r7, #24]
 80088c6:	429a      	cmp	r2, r3
 80088c8:	f4ff af67 	bcc.w	800879a <sl_wfx_download_run_firmware+0x1c2>
  }   /* End of firmware download loop */

  // notify NCP that upload ended
  result = sl_wfx_apb_write_32(ADDR_DWL_CTRL_AREA_HOST_STATUS, HOST_STATE_UPLOAD_COMPLETE);
 80088cc:	492b      	ldr	r1, [pc, #172]	; (800897c <sl_wfx_download_run_firmware+0x3a4>)
 80088ce:	482c      	ldr	r0, [pc, #176]	; (8008980 <sl_wfx_download_run_firmware+0x3a8>)
 80088d0:	f7fe ff5d 	bl	800778e <sl_wfx_apb_write_32>
 80088d4:	62f8      	str	r0, [r7, #44]	; 0x2c
  SL_WFX_ERROR_CHECK(result);
 80088d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d144      	bne.n	8008966 <sl_wfx_download_run_firmware+0x38e>

  // wait for authentication result
  result = sl_wfx_poll_for_value(ADDR_DWL_CTRL_AREA_NCP_STATUS, NCP_STATE_AUTH_OK, 100);
 80088dc:	2264      	movs	r2, #100	; 0x64
 80088de:	4927      	ldr	r1, [pc, #156]	; (800897c <sl_wfx_download_run_firmware+0x3a4>)
 80088e0:	4828      	ldr	r0, [pc, #160]	; (8008984 <sl_wfx_download_run_firmware+0x3ac>)
 80088e2:	f000 f853 	bl	800898c <sl_wfx_poll_for_value>
 80088e6:	62f8      	str	r0, [r7, #44]	; 0x2c
  SL_WFX_ERROR_CHECK(result);
 80088e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d13d      	bne.n	800896a <sl_wfx_download_run_firmware+0x392>

  // notify NCP that we are happy to run firmware
  result = sl_wfx_apb_write_32(ADDR_DWL_CTRL_AREA_HOST_STATUS, HOST_STATE_OK_TO_JUMP);
 80088ee:	4926      	ldr	r1, [pc, #152]	; (8008988 <sl_wfx_download_run_firmware+0x3b0>)
 80088f0:	4823      	ldr	r0, [pc, #140]	; (8008980 <sl_wfx_download_run_firmware+0x3a8>)
 80088f2:	f7fe ff4c 	bl	800778e <sl_wfx_apb_write_32>
 80088f6:	62f8      	str	r0, [r7, #44]	; 0x2c
  SL_WFX_ERROR_CHECK(result);
 80088f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088fa:	2b00      	cmp	r3, #0

  error_handler:
 80088fc:	e036      	b.n	800896c <sl_wfx_download_run_firmware+0x394>
  SL_WFX_ERROR_CHECK(result);
 80088fe:	bf00      	nop
 8008900:	e034      	b.n	800896c <sl_wfx_download_run_firmware+0x394>
  SL_WFX_ERROR_CHECK(result);
 8008902:	bf00      	nop
 8008904:	e032      	b.n	800896c <sl_wfx_download_run_firmware+0x394>
  SL_WFX_ERROR_CHECK(result);
 8008906:	bf00      	nop
 8008908:	e030      	b.n	800896c <sl_wfx_download_run_firmware+0x394>
  SL_WFX_ERROR_CHECK(result);
 800890a:	bf00      	nop
 800890c:	e02e      	b.n	800896c <sl_wfx_download_run_firmware+0x394>
  SL_WFX_ERROR_CHECK(result);
 800890e:	bf00      	nop
 8008910:	e02c      	b.n	800896c <sl_wfx_download_run_firmware+0x394>
  SL_WFX_ERROR_CHECK(result);
 8008912:	bf00      	nop
 8008914:	e02a      	b.n	800896c <sl_wfx_download_run_firmware+0x394>
  SL_WFX_ERROR_CHECK(result);
 8008916:	bf00      	nop
 8008918:	e028      	b.n	800896c <sl_wfx_download_run_firmware+0x394>
  SL_WFX_ERROR_CHECK(result);
 800891a:	bf00      	nop
 800891c:	e026      	b.n	800896c <sl_wfx_download_run_firmware+0x394>
  SL_WFX_ERROR_CHECK(result);
 800891e:	bf00      	nop
 8008920:	e024      	b.n	800896c <sl_wfx_download_run_firmware+0x394>
  SL_WFX_ERROR_CHECK(result);
 8008922:	bf00      	nop
 8008924:	e022      	b.n	800896c <sl_wfx_download_run_firmware+0x394>
  SL_WFX_ERROR_CHECK(result);
 8008926:	bf00      	nop
 8008928:	e020      	b.n	800896c <sl_wfx_download_run_firmware+0x394>
  SL_WFX_ERROR_CHECK(result);
 800892a:	bf00      	nop
 800892c:	e01e      	b.n	800896c <sl_wfx_download_run_firmware+0x394>
  SL_WFX_ERROR_CHECK(result);
 800892e:	bf00      	nop
 8008930:	e01c      	b.n	800896c <sl_wfx_download_run_firmware+0x394>
  SL_WFX_ERROR_CHECK(result);
 8008932:	bf00      	nop
 8008934:	e01a      	b.n	800896c <sl_wfx_download_run_firmware+0x394>
  SL_WFX_ERROR_CHECK(result);
 8008936:	bf00      	nop
 8008938:	e018      	b.n	800896c <sl_wfx_download_run_firmware+0x394>
  SL_WFX_ERROR_CHECK(result);
 800893a:	bf00      	nop
 800893c:	e016      	b.n	800896c <sl_wfx_download_run_firmware+0x394>
  SL_WFX_ERROR_CHECK(result);
 800893e:	bf00      	nop
 8008940:	e014      	b.n	800896c <sl_wfx_download_run_firmware+0x394>
  SL_WFX_ERROR_CHECK(result);
 8008942:	bf00      	nop
 8008944:	e012      	b.n	800896c <sl_wfx_download_run_firmware+0x394>
  SL_WFX_ERROR_CHECK(result);
 8008946:	bf00      	nop
 8008948:	e010      	b.n	800896c <sl_wfx_download_run_firmware+0x394>
  SL_WFX_ERROR_CHECK(result);
 800894a:	bf00      	nop
 800894c:	e00e      	b.n	800896c <sl_wfx_download_run_firmware+0x394>
      SL_WFX_ERROR_CHECK(result);
 800894e:	bf00      	nop
 8008950:	e00c      	b.n	800896c <sl_wfx_download_run_firmware+0x394>
      SL_WFX_ERROR_CHECK(result);
 8008952:	bf00      	nop
 8008954:	e00a      	b.n	800896c <sl_wfx_download_run_firmware+0x394>
      SL_WFX_ERROR_CHECK(result);
 8008956:	bf00      	nop
 8008958:	e008      	b.n	800896c <sl_wfx_download_run_firmware+0x394>
    SL_WFX_ERROR_CHECK(result);
 800895a:	bf00      	nop
 800895c:	e006      	b.n	800896c <sl_wfx_download_run_firmware+0x394>
    SL_WFX_ERROR_CHECK(result);
 800895e:	bf00      	nop
 8008960:	e004      	b.n	800896c <sl_wfx_download_run_firmware+0x394>
    SL_WFX_ERROR_CHECK(result);
 8008962:	bf00      	nop
 8008964:	e002      	b.n	800896c <sl_wfx_download_run_firmware+0x394>
  SL_WFX_ERROR_CHECK(result);
 8008966:	bf00      	nop
 8008968:	e000      	b.n	800896c <sl_wfx_download_run_firmware+0x394>
  SL_WFX_ERROR_CHECK(result);
 800896a:	bf00      	nop
  return result;
 800896c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800896e:	4618      	mov	r0, r3
 8008970:	3730      	adds	r7, #48	; 0x30
 8008972:	46bd      	mov	sp, r7
 8008974:	bd80      	pop	{r7, pc}
 8008976:	bf00      	nop
 8008978:	0900c004 	.word	0x0900c004
 800897c:	d4c64a99 	.word	0xd4c64a99
 8008980:	0900c00c 	.word	0x0900c00c
 8008984:	0900c010 	.word	0x0900c010
 8008988:	174fc882 	.word	0x174fc882

0800898c <sl_wfx_poll_for_value>:
 * @return SL_STATUS_OK if the value is received correctly,
 * SL_STATUS_TIMEOUT if the value is not found in time,
 * SL_STATUS_FAIL if not able to poll the value from the Wi-Fi chip
 *****************************************************************************/
static sl_status_t sl_wfx_poll_for_value(uint32_t address, uint32_t polled_value, uint32_t max_retries)
{
 800898c:	b580      	push	{r7, lr}
 800898e:	b086      	sub	sp, #24
 8008990:	af00      	add	r7, sp, #0
 8008992:	60f8      	str	r0, [r7, #12]
 8008994:	60b9      	str	r1, [r7, #8]
 8008996:	607a      	str	r2, [r7, #4]
  uint32_t    value;
  sl_status_t result = SL_STATUS_OK;
 8008998:	2300      	movs	r3, #0
 800899a:	617b      	str	r3, [r7, #20]

  for (; max_retries > 0; max_retries--) {
 800899c:	e013      	b.n	80089c6 <sl_wfx_poll_for_value+0x3a>
    result = sl_wfx_apb_read_32(address, &value);
 800899e:	f107 0310 	add.w	r3, r7, #16
 80089a2:	4619      	mov	r1, r3
 80089a4:	68f8      	ldr	r0, [r7, #12]
 80089a6:	f7fe ff09 	bl	80077bc <sl_wfx_apb_read_32>
 80089aa:	6178      	str	r0, [r7, #20]
    SL_WFX_ERROR_CHECK(result);
 80089ac:	697b      	ldr	r3, [r7, #20]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d115      	bne.n	80089de <sl_wfx_poll_for_value+0x52>
    if (value == polled_value) {
 80089b2:	693b      	ldr	r3, [r7, #16]
 80089b4:	68ba      	ldr	r2, [r7, #8]
 80089b6:	429a      	cmp	r2, r3
 80089b8:	d009      	beq.n	80089ce <sl_wfx_poll_for_value+0x42>
      break;
    } else {
      sl_wfx_host_wait(1);
 80089ba:	2001      	movs	r0, #1
 80089bc:	f000 faa8 	bl	8008f10 <sl_wfx_host_wait>
  for (; max_retries > 0; max_retries--) {
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	3b01      	subs	r3, #1
 80089c4:	607b      	str	r3, [r7, #4]
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d1e8      	bne.n	800899e <sl_wfx_poll_for_value+0x12>
 80089cc:	e000      	b.n	80089d0 <sl_wfx_poll_for_value+0x44>
      break;
 80089ce:	bf00      	nop
    }
  }
  if (value != polled_value) {
 80089d0:	693b      	ldr	r3, [r7, #16]
 80089d2:	68ba      	ldr	r2, [r7, #8]
 80089d4:	429a      	cmp	r2, r3
 80089d6:	d004      	beq.n	80089e2 <sl_wfx_poll_for_value+0x56>
    result = SL_STATUS_TIMEOUT;
 80089d8:	2307      	movs	r3, #7
 80089da:	617b      	str	r3, [r7, #20]
 80089dc:	e002      	b.n	80089e4 <sl_wfx_poll_for_value+0x58>
    SL_WFX_ERROR_CHECK(result);
 80089de:	bf00      	nop
 80089e0:	e000      	b.n	80089e4 <sl_wfx_poll_for_value+0x58>
  }

  error_handler:
 80089e2:	bf00      	nop
  return result;
 80089e4:	697b      	ldr	r3, [r7, #20]
}
 80089e6:	4618      	mov	r0, r3
 80089e8:	3718      	adds	r7, #24
 80089ea:	46bd      	mov	sp, r7
 80089ec:	bd80      	pop	{r7, pc}

080089ee <sl_wfx_compare_keysets>:
 * @param firmware_keyset is the 8 first bytes of the firmware
 * @return SL_STATUS_OK if the firmware is compatible with the WF200,
 * SL_STATUS_WIFI_INVALID_KEY otherwise
 *****************************************************************************/
static sl_status_t sl_wfx_compare_keysets(uint8_t chip_keyset, char *firmware_keyset)
{
 80089ee:	b580      	push	{r7, lr}
 80089f0:	b084      	sub	sp, #16
 80089f2:	af00      	add	r7, sp, #0
 80089f4:	4603      	mov	r3, r0
 80089f6:	6039      	str	r1, [r7, #0]
 80089f8:	71fb      	strb	r3, [r7, #7]
  sl_status_t result;
  char        keyset_string[3];
  uint8_t     keyset_value;

  keyset_string[0] = *(firmware_keyset + 6);
 80089fa:	683b      	ldr	r3, [r7, #0]
 80089fc:	799b      	ldrb	r3, [r3, #6]
 80089fe:	723b      	strb	r3, [r7, #8]
  keyset_string[1] = *(firmware_keyset + 7);
 8008a00:	683b      	ldr	r3, [r7, #0]
 8008a02:	79db      	ldrb	r3, [r3, #7]
 8008a04:	727b      	strb	r3, [r7, #9]
  keyset_string[2] = '\0';
 8008a06:	2300      	movs	r3, #0
 8008a08:	72bb      	strb	r3, [r7, #10]
  keyset_value     = (uint8_t)strtoul(keyset_string, NULL, 16);
 8008a0a:	f107 0308 	add.w	r3, r7, #8
 8008a0e:	2210      	movs	r2, #16
 8008a10:	2100      	movs	r1, #0
 8008a12:	4618      	mov	r0, r3
 8008a14:	f012 feb2 	bl	801b77c <strtoul>
 8008a18:	4603      	mov	r3, r0
 8008a1a:	72fb      	strb	r3, [r7, #11]

  if (keyset_value == chip_keyset) {
 8008a1c:	7afa      	ldrb	r2, [r7, #11]
 8008a1e:	79fb      	ldrb	r3, [r7, #7]
 8008a20:	429a      	cmp	r2, r3
 8008a22:	d102      	bne.n	8008a2a <sl_wfx_compare_keysets+0x3c>
    result = SL_STATUS_OK;
 8008a24:	2300      	movs	r3, #0
 8008a26:	60fb      	str	r3, [r7, #12]
 8008a28:	e002      	b.n	8008a30 <sl_wfx_compare_keysets+0x42>
  } else {
    result = SL_STATUS_WIFI_INVALID_KEY;
 8008a2a:	f640 3301 	movw	r3, #2817	; 0xb01
 8008a2e:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8008a30:	68fb      	ldr	r3, [r7, #12]
}
 8008a32:	4618      	mov	r0, r3
 8008a34:	3710      	adds	r7, #16
 8008a36:	46bd      	mov	sp, r7
 8008a38:	bd80      	pop	{r7, pc}
	...

08008a3c <sl_wfx_get_status_code>:
 * @param wfx_status is the status returned by the WFx
 * @param command_id is the ID of the command
 * @return corresponding driver status code enumerated in sl_status_t
 *****************************************************************************/
sl_status_t sl_wfx_get_status_code(uint32_t wfx_status, uint8_t command_id)
{
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	b084      	sub	sp, #16
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
 8008a44:	460b      	mov	r3, r1
 8008a46:	70fb      	strb	r3, [r7, #3]
  sl_status_t result;

  if (command_id & SL_WFX_MSG_ID_GENERAL_API_MASK) {
 8008a48:	78fb      	ldrb	r3, [r7, #3]
 8008a4a:	f003 0320 	and.w	r3, r3, #32
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d05b      	beq.n	8008b0a <sl_wfx_get_status_code+0xce>
    switch (wfx_status) {
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	f241 2256 	movw	r2, #4694	; 0x1256
 8008a58:	4293      	cmp	r3, r2
 8008a5a:	d045      	beq.n	8008ae8 <sl_wfx_get_status_code+0xac>
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	f241 2256 	movw	r2, #4694	; 0x1256
 8008a62:	4293      	cmp	r3, r2
 8008a64:	d84e      	bhi.n	8008b04 <sl_wfx_get_status_code+0xc8>
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	f241 2234 	movw	r2, #4660	; 0x1234
 8008a6c:	4293      	cmp	r3, r2
 8008a6e:	d038      	beq.n	8008ae2 <sl_wfx_get_status_code+0xa6>
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	f241 2234 	movw	r2, #4660	; 0x1234
 8008a76:	4293      	cmp	r3, r2
 8008a78:	d844      	bhi.n	8008b04 <sl_wfx_get_status_code+0xc8>
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	2baf      	cmp	r3, #175	; 0xaf
 8008a7e:	d033      	beq.n	8008ae8 <sl_wfx_get_status_code+0xac>
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	2baf      	cmp	r3, #175	; 0xaf
 8008a84:	d83e      	bhi.n	8008b04 <sl_wfx_get_status_code+0xc8>
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	2b9e      	cmp	r3, #158	; 0x9e
 8008a8a:	d02a      	beq.n	8008ae2 <sl_wfx_get_status_code+0xa6>
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	2b9e      	cmp	r3, #158	; 0x9e
 8008a90:	d838      	bhi.n	8008b04 <sl_wfx_get_status_code+0xc8>
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	2b8d      	cmp	r3, #141	; 0x8d
 8008a96:	d027      	beq.n	8008ae8 <sl_wfx_get_status_code+0xac>
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	2b8d      	cmp	r3, #141	; 0x8d
 8008a9c:	d832      	bhi.n	8008b04 <sl_wfx_get_status_code+0xc8>
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	2b7c      	cmp	r3, #124	; 0x7c
 8008aa2:	d021      	beq.n	8008ae8 <sl_wfx_get_status_code+0xac>
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	2b7c      	cmp	r3, #124	; 0x7c
 8008aa8:	d82c      	bhi.n	8008b04 <sl_wfx_get_status_code+0xc8>
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	2b6b      	cmp	r3, #107	; 0x6b
 8008aae:	d01b      	beq.n	8008ae8 <sl_wfx_get_status_code+0xac>
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	2b6b      	cmp	r3, #107	; 0x6b
 8008ab4:	d826      	bhi.n	8008b04 <sl_wfx_get_status_code+0xc8>
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	2b04      	cmp	r3, #4
 8008aba:	d80f      	bhi.n	8008adc <sl_wfx_get_status_code+0xa0>
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2b04      	cmp	r3, #4
 8008ac0:	d820      	bhi.n	8008b04 <sl_wfx_get_status_code+0xc8>
 8008ac2:	a201      	add	r2, pc, #4	; (adr r2, 8008ac8 <sl_wfx_get_status_code+0x8c>)
 8008ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ac8:	08008ae3 	.word	0x08008ae3
 8008acc:	08008ae9 	.word	0x08008ae9
 8008ad0:	08008aef 	.word	0x08008aef
 8008ad4:	08008af5 	.word	0x08008af5
 8008ad8:	08008afd 	.word	0x08008afd
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2b5a      	cmp	r3, #90	; 0x5a
 8008ae0:	d110      	bne.n	8008b04 <sl_wfx_get_status_code+0xc8>
      case SL_WFX_STATUS_SUCCESS:
      case SL_WFX_MAC_KEY_STATUS_SUCCESS:
      case SL_WFX_PUB_KEY_EXCHANGE_STATUS_SUCCESS:
      case SL_WFX_PREVENT_ROLLBACK_CNF_SUCCESS:
        result = SL_STATUS_OK;
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	60fb      	str	r3, [r7, #12]
        break;
 8008ae6:	e075      	b.n	8008bd4 <sl_wfx_get_status_code+0x198>
      case SL_WFX_MAC_KEY_STATUS_FAILED_KEY_ALREADY_BURNED:
      case SL_WFX_MAC_KEY_STATUS_FAILED_RAM_MODE_NOT_ALLOWED:
      case SL_WFX_MAC_KEY_STATUS_FAILED_UNKNOWN_MODE:
      case SL_WFX_PUB_KEY_EXCHANGE_STATUS_FAILED:
      case SL_WFX_PREVENT_ROLLBACK_CNF_WRONG_MAGIC_WORD:
        result = SL_STATUS_FAIL;
 8008ae8:	2301      	movs	r3, #1
 8008aea:	60fb      	str	r3, [r7, #12]
        break;
 8008aec:	e072      	b.n	8008bd4 <sl_wfx_get_status_code+0x198>
      case SL_WFX_INVALID_PARAMETER:
        result = SL_STATUS_INVALID_PARAMETER;
 8008aee:	2321      	movs	r3, #33	; 0x21
 8008af0:	60fb      	str	r3, [r7, #12]
        break;
 8008af2:	e06f      	b.n	8008bd4 <sl_wfx_get_status_code+0x198>
      case SL_WFX_STATUS_GPIO_WARNING:
        result = SL_STATUS_WIFI_WARNING;
 8008af4:	f640 3304 	movw	r3, #2820	; 0xb04
 8008af8:	60fb      	str	r3, [r7, #12]
        break;
 8008afa:	e06b      	b.n	8008bd4 <sl_wfx_get_status_code+0x198>
      case SL_WFX_ERROR_UNSUPPORTED_MSG_ID:
        result = SL_STATUS_WIFI_UNSUPPORTED_MESSAGE_ID;
 8008afc:	f640 3303 	movw	r3, #2819	; 0xb03
 8008b00:	60fb      	str	r3, [r7, #12]
        break;
 8008b02:	e067      	b.n	8008bd4 <sl_wfx_get_status_code+0x198>
      default:
        result = SL_STATUS_FAIL;
 8008b04:	2301      	movs	r3, #1
 8008b06:	60fb      	str	r3, [r7, #12]
        break;
 8008b08:	e064      	b.n	8008bd4 <sl_wfx_get_status_code+0x198>
    }
  } else {
    switch (wfx_status) {
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	2b14      	cmp	r3, #20
 8008b0e:	d85e      	bhi.n	8008bce <sl_wfx_get_status_code+0x192>
 8008b10:	a201      	add	r2, pc, #4	; (adr r2, 8008b18 <sl_wfx_get_status_code+0xdc>)
 8008b12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b16:	bf00      	nop
 8008b18:	08008b6d 	.word	0x08008b6d
 8008b1c:	08008b73 	.word	0x08008b73
 8008b20:	08008b79 	.word	0x08008b79
 8008b24:	08008b81 	.word	0x08008b81
 8008b28:	08008b87 	.word	0x08008b87
 8008b2c:	08008b8f 	.word	0x08008b8f
 8008b30:	08008b97 	.word	0x08008b97
 8008b34:	08008b9f 	.word	0x08008b9f
 8008b38:	08008ba7 	.word	0x08008ba7
 8008b3c:	08008baf 	.word	0x08008baf
 8008b40:	08008bb7 	.word	0x08008bb7
 8008b44:	08008bcf 	.word	0x08008bcf
 8008b48:	08008bcf 	.word	0x08008bcf
 8008b4c:	08008bcf 	.word	0x08008bcf
 8008b50:	08008bcf 	.word	0x08008bcf
 8008b54:	08008bcf 	.word	0x08008bcf
 8008b58:	08008bcf 	.word	0x08008bcf
 8008b5c:	08008bcf 	.word	0x08008bcf
 8008b60:	08008bcf 	.word	0x08008bcf
 8008b64:	08008bbf 	.word	0x08008bbf
 8008b68:	08008bc7 	.word	0x08008bc7
      case WFM_STATUS_SUCCESS:
        result = SL_STATUS_OK;
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	60fb      	str	r3, [r7, #12]
        break;
 8008b70:	e030      	b.n	8008bd4 <sl_wfx_get_status_code+0x198>
      case WFM_STATUS_INVALID_PARAMETER:
        result = SL_STATUS_INVALID_PARAMETER;
 8008b72:	2321      	movs	r3, #33	; 0x21
 8008b74:	60fb      	str	r3, [r7, #12]
        break;
 8008b76:	e02d      	b.n	8008bd4 <sl_wfx_get_status_code+0x198>
      case WFM_STATUS_WRONG_STATE:
        result = SL_STATUS_WIFI_WRONG_STATE;
 8008b78:	f640 3318 	movw	r3, #2840	; 0xb18
 8008b7c:	60fb      	str	r3, [r7, #12]
        break;
 8008b7e:	e029      	b.n	8008bd4 <sl_wfx_get_status_code+0x198>
      case WFM_STATUS_GENERAL_FAILURE:
        result = SL_STATUS_FAIL;
 8008b80:	2301      	movs	r3, #1
 8008b82:	60fb      	str	r3, [r7, #12]
        break;
 8008b84:	e026      	b.n	8008bd4 <sl_wfx_get_status_code+0x198>
      case WFM_STATUS_CHANNEL_NOT_ALLOWED:
        result = SL_STATUS_WIFI_CHANNEL_NOT_ALLOWED;
 8008b86:	f640 3319 	movw	r3, #2841	; 0xb19
 8008b8a:	60fb      	str	r3, [r7, #12]
        break;
 8008b8c:	e022      	b.n	8008bd4 <sl_wfx_get_status_code+0x198>
      case WFM_STATUS_WARNING:
        result = SL_STATUS_WIFI_WARNING;
 8008b8e:	f640 3304 	movw	r3, #2820	; 0xb04
 8008b92:	60fb      	str	r3, [r7, #12]
        break;
 8008b94:	e01e      	b.n	8008bd4 <sl_wfx_get_status_code+0x198>
      case WFM_STATUS_NO_MATCHING_AP:
        result = SL_STATUS_WIFI_NO_MATCHING_AP;
 8008b96:	f640 331a 	movw	r3, #2842	; 0xb1a
 8008b9a:	60fb      	str	r3, [r7, #12]
        break;
 8008b9c:	e01a      	b.n	8008bd4 <sl_wfx_get_status_code+0x198>
      case WFM_STATUS_CONNECTION_ABORTED:
        result = SL_STATUS_WIFI_CONNECTION_ABORTED;
 8008b9e:	f640 331b 	movw	r3, #2843	; 0xb1b
 8008ba2:	60fb      	str	r3, [r7, #12]
        break;
 8008ba4:	e016      	b.n	8008bd4 <sl_wfx_get_status_code+0x198>
      case WFM_STATUS_CONNECTION_TIMEOUT:
        result = SL_STATUS_WIFI_CONNECTION_TIMEOUT;
 8008ba6:	f640 331c 	movw	r3, #2844	; 0xb1c
 8008baa:	60fb      	str	r3, [r7, #12]
        break;
 8008bac:	e012      	b.n	8008bd4 <sl_wfx_get_status_code+0x198>
      case WFM_STATUS_CONNECTION_REJECTED_BY_AP:
        result = SL_STATUS_WIFI_CONNECTION_REJECTED_BY_AP;
 8008bae:	f640 331d 	movw	r3, #2845	; 0xb1d
 8008bb2:	60fb      	str	r3, [r7, #12]
        break;
 8008bb4:	e00e      	b.n	8008bd4 <sl_wfx_get_status_code+0x198>
      case WFM_STATUS_CONNECTION_AUTH_FAILURE:
        result = SL_STATUS_WIFI_CONNECTION_AUTH_FAILURE;
 8008bb6:	f640 331e 	movw	r3, #2846	; 0xb1e
 8008bba:	60fb      	str	r3, [r7, #12]
        break;
 8008bbc:	e00a      	b.n	8008bd4 <sl_wfx_get_status_code+0x198>
      case WFM_STATUS_RETRY_EXCEEDED:
        result = SL_STATUS_WIFI_RETRY_EXCEEDED;
 8008bbe:	f640 331f 	movw	r3, #2847	; 0xb1f
 8008bc2:	60fb      	str	r3, [r7, #12]
        break;
 8008bc4:	e006      	b.n	8008bd4 <sl_wfx_get_status_code+0x198>
      case WFM_STATUS_TX_LIFETIME_EXCEEDED:
        result = SL_STATUS_WIFI_TX_LIFETIME_EXCEEDED;
 8008bc6:	f44f 6332 	mov.w	r3, #2848	; 0xb20
 8008bca:	60fb      	str	r3, [r7, #12]
        break;
 8008bcc:	e002      	b.n	8008bd4 <sl_wfx_get_status_code+0x198>
      default:
        result = SL_STATUS_FAIL;
 8008bce:	2301      	movs	r3, #1
 8008bd0:	60fb      	str	r3, [r7, #12]
        break;
 8008bd2:	bf00      	nop
    }
  }

#if (SL_WFX_DEBUG_MASK & SL_WFX_DEBUG_ERROR)
  if (result != SL_STATUS_OK && result != SL_STATUS_WIFI_WARNING) {
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d008      	beq.n	8008bec <sl_wfx_get_status_code+0x1b0>
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	f640 3204 	movw	r2, #2820	; 0xb04
 8008be0:	4293      	cmp	r3, r2
 8008be2:	d003      	beq.n	8008bec <sl_wfx_get_status_code+0x1b0>
    sl_wfx_host_log("Cnf status %u\n", result);
 8008be4:	68f9      	ldr	r1, [r7, #12]
 8008be6:	4804      	ldr	r0, [pc, #16]	; (8008bf8 <sl_wfx_get_status_code+0x1bc>)
 8008be8:	f000 fafc 	bl	80091e4 <sl_wfx_host_log>
  }
#endif
  return result;
 8008bec:	68fb      	ldr	r3, [r7, #12]
}
 8008bee:	4618      	mov	r0, r3
 8008bf0:	3710      	adds	r7, #16
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	bd80      	pop	{r7, pc}
 8008bf6:	bf00      	nop
 8008bf8:	0801dc24 	.word	0x0801dc24

08008bfc <sl_wfx_allocate_command_buffer>:
 *****************************************************************************/
sl_status_t sl_wfx_allocate_command_buffer(sl_wfx_generic_message_t **buffer,
                                           uint32_t command_id,
                                           sl_wfx_buffer_type_t type,
                                           uint32_t buffer_size)
{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b086      	sub	sp, #24
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	60f8      	str	r0, [r7, #12]
 8008c04:	60b9      	str	r1, [r7, #8]
 8008c06:	603b      	str	r3, [r7, #0]
 8008c08:	4613      	mov	r3, r2
 8008c0a:	71fb      	strb	r3, [r7, #7]
    *buffer = (sl_wfx_generic_message_t *)(((uint8_t *)*buffer) + SL_WFX_SECURE_LINK_HEADER_SIZE);
  } else
#endif //SL_WFX_USE_SECURE_LINK
  {
    SL_WFX_UNUSED_PARAMETER(command_id);
    result = sl_wfx_host_allocate_buffer((void **)buffer,
 8008c0c:	79fb      	ldrb	r3, [r7, #7]
 8008c0e:	683a      	ldr	r2, [r7, #0]
 8008c10:	4619      	mov	r1, r3
 8008c12:	68f8      	ldr	r0, [r7, #12]
 8008c14:	f000 fab8 	bl	8009188 <sl_wfx_host_allocate_buffer>
 8008c18:	6178      	str	r0, [r7, #20]
                                         type,
                                         buffer_size);
    SL_WFX_ERROR_CHECK(result);
 8008c1a:	697b      	ldr	r3, [r7, #20]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d107      	bne.n	8008c30 <sl_wfx_allocate_command_buffer+0x34>

    memset((*buffer), 0, buffer_size);
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	683a      	ldr	r2, [r7, #0]
 8008c26:	2100      	movs	r1, #0
 8008c28:	4618      	mov	r0, r3
 8008c2a:	f011 fec1 	bl	801a9b0 <memset>
 8008c2e:	e000      	b.n	8008c32 <sl_wfx_allocate_command_buffer+0x36>
    SL_WFX_ERROR_CHECK(result);
 8008c30:	bf00      	nop
  }

  error_handler:
  return result;
 8008c32:	697b      	ldr	r3, [r7, #20]
}
 8008c34:	4618      	mov	r0, r3
 8008c36:	3718      	adds	r7, #24
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	bd80      	pop	{r7, pc}

08008c3c <sl_wfx_free_command_buffer>:
 * @param command_id is the ID of the command to check if encryption is required
 * @param type of the buffer to allocate
 * @return SL_STATUS_OK if the values are retrieved correctly, SL_STATUS_FAIL otherwise
 *****************************************************************************/
sl_status_t sl_wfx_free_command_buffer(sl_wfx_generic_message_t *buffer, uint32_t command_id, sl_wfx_buffer_type_t type)
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b084      	sub	sp, #16
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	60f8      	str	r0, [r7, #12]
 8008c44:	60b9      	str	r1, [r7, #8]
 8008c46:	4613      	mov	r3, r2
 8008c48:	71fb      	strb	r3, [r7, #7]
    return sl_wfx_host_free_buffer((uint8_t *)buffer - SL_WFX_SECURE_LINK_HEADER_SIZE, type);
  } else
#endif //SL_WFX_USE_SECURE_LINK
  {
    SL_WFX_UNUSED_PARAMETER(command_id);
    return sl_wfx_host_free_buffer(buffer, type);
 8008c4a:	79fb      	ldrb	r3, [r7, #7]
 8008c4c:	4619      	mov	r1, r3
 8008c4e:	68f8      	ldr	r0, [r7, #12]
 8008c50:	f000 faac 	bl	80091ac <sl_wfx_host_free_buffer>
 8008c54:	4603      	mov	r3, r0
  }
}
 8008c56:	4618      	mov	r0, r3
 8008c58:	3710      	adds	r7, #16
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	bd80      	pop	{r7, pc}
	...

08008c60 <sl_wfx_host_init>:
}host_context;

/**************************************************************************//**
 * Initialize the host resources
 *****************************************************************************/
sl_status_t sl_wfx_host_init (void) {
 8008c60:	b580      	push	{r7, lr}
 8008c62:	af00      	add	r7, sp, #0
  host_context.sl_wfx_firmware_download_progress = 0;
 8008c64:	4b16      	ldr	r3, [pc, #88]	; (8008cc0 <sl_wfx_host_init+0x60>)
 8008c66:	2200      	movs	r2, #0
 8008c68:	601a      	str	r2, [r3, #0]
  wifi_scan_sem = xSemaphoreCreateBinary();
 8008c6a:	2203      	movs	r2, #3
 8008c6c:	2100      	movs	r1, #0
 8008c6e:	2001      	movs	r0, #1
 8008c70:	f001 fda8 	bl	800a7c4 <xQueueGenericCreate>
 8008c74:	4603      	mov	r3, r0
 8008c76:	4a13      	ldr	r2, [pc, #76]	; (8008cc4 <sl_wfx_host_init+0x64>)
 8008c78:	6013      	str	r3, [r2, #0]
  sl_wfx_driver_mutex = xSemaphoreCreateBinary();
 8008c7a:	2203      	movs	r2, #3
 8008c7c:	2100      	movs	r1, #0
 8008c7e:	2001      	movs	r0, #1
 8008c80:	f001 fda0 	bl	800a7c4 <xQueueGenericCreate>
 8008c84:	4603      	mov	r3, r0
 8008c86:	4a10      	ldr	r2, [pc, #64]	; (8008cc8 <sl_wfx_host_init+0x68>)
 8008c88:	6013      	str	r3, [r2, #0]
  xSemaphoreGive(sl_wfx_driver_mutex);
 8008c8a:	4b0f      	ldr	r3, [pc, #60]	; (8008cc8 <sl_wfx_host_init+0x68>)
 8008c8c:	6818      	ldr	r0, [r3, #0]
 8008c8e:	2300      	movs	r3, #0
 8008c90:	2200      	movs	r2, #0
 8008c92:	2100      	movs	r1, #0
 8008c94:	f001 fe1e 	bl	800a8d4 <xQueueGenericSend>
//  sl_wfx_driver_mutex = true;
  sl_wfx_wake_up_sem = xSemaphoreCreateBinary();
 8008c98:	2203      	movs	r2, #3
 8008c9a:	2100      	movs	r1, #0
 8008c9c:	2001      	movs	r0, #1
 8008c9e:	f001 fd91 	bl	800a7c4 <xQueueGenericCreate>
 8008ca2:	4603      	mov	r3, r0
 8008ca4:	4a09      	ldr	r2, [pc, #36]	; (8008ccc <sl_wfx_host_init+0x6c>)
 8008ca6:	6013      	str	r3, [r2, #0]
  sl_wfx_confirmation_queue = xQueueCreate(1, sizeof(uint8_t));
 8008ca8:	2200      	movs	r2, #0
 8008caa:	2101      	movs	r1, #1
 8008cac:	2001      	movs	r0, #1
 8008cae:	f001 fd89 	bl	800a7c4 <xQueueGenericCreate>
 8008cb2:	4603      	mov	r3, r0
 8008cb4:	4a06      	ldr	r2, [pc, #24]	; (8008cd0 <sl_wfx_host_init+0x70>)
 8008cb6:	6013      	str	r3, [r2, #0]

  return SL_STATUS_OK;
 8008cb8:	2300      	movs	r3, #0
}
 8008cba:	4618      	mov	r0, r3
 8008cbc:	bd80      	pop	{r7, pc}
 8008cbe:	bf00      	nop
 8008cc0:	200011e0 	.word	0x200011e0
 8008cc4:	200011dc 	.word	0x200011dc
 8008cc8:	200011d8 	.word	0x200011d8
 8008ccc:	200011d4 	.word	0x200011d4
 8008cd0:	200011d0 	.word	0x200011d0

08008cd4 <sl_wfx_host_get_firmware_data>:

/**************************************************************************//**
 * Get a firmware chunk
 *****************************************************************************/
sl_status_t sl_wfx_host_get_firmware_data (const uint8_t** data, uint32_t data_size) {
 8008cd4:	b480      	push	{r7}
 8008cd6:	b083      	sub	sp, #12
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
 8008cdc:	6039      	str	r1, [r7, #0]
  *data = &sl_wfx_firmware[host_context.sl_wfx_firmware_download_progress];
 8008cde:	4b09      	ldr	r3, [pc, #36]	; (8008d04 <sl_wfx_host_get_firmware_data+0x30>)
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	4a09      	ldr	r2, [pc, #36]	; (8008d08 <sl_wfx_host_get_firmware_data+0x34>)
 8008ce4:	441a      	add	r2, r3
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	601a      	str	r2, [r3, #0]
  host_context.sl_wfx_firmware_download_progress += data_size;
 8008cea:	4b06      	ldr	r3, [pc, #24]	; (8008d04 <sl_wfx_host_get_firmware_data+0x30>)
 8008cec:	681a      	ldr	r2, [r3, #0]
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	4413      	add	r3, r2
 8008cf2:	4a04      	ldr	r2, [pc, #16]	; (8008d04 <sl_wfx_host_get_firmware_data+0x30>)
 8008cf4:	6013      	str	r3, [r2, #0]
  
  return SL_STATUS_OK;
 8008cf6:	2300      	movs	r3, #0
}
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	370c      	adds	r7, #12
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d02:	4770      	bx	lr
 8008d04:	200011e0 	.word	0x200011e0
 8008d08:	080211dc 	.word	0x080211dc

08008d0c <sl_wfx_host_get_firmware_size>:

/**************************************************************************//**
 * Get the firmware size
 *****************************************************************************/
sl_status_t sl_wfx_host_get_firmware_size (uint32_t* firmware_size) {
 8008d0c:	b480      	push	{r7}
 8008d0e:	b083      	sub	sp, #12
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
  *firmware_size = sizeof(sl_wfx_firmware);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	4a04      	ldr	r2, [pc, #16]	; (8008d28 <sl_wfx_host_get_firmware_size+0x1c>)
 8008d18:	601a      	str	r2, [r3, #0]
  
  return SL_STATUS_OK;
 8008d1a:	2300      	movs	r3, #0
}
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	370c      	adds	r7, #12
 8008d20:	46bd      	mov	sp, r7
 8008d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d26:	4770      	bx	lr
 8008d28:	0004bc50 	.word	0x0004bc50

08008d2c <sl_wfx_host_get_pds_data>:

/**************************************************************************//**
 * Get a PDS chunk
 *****************************************************************************/
sl_status_t sl_wfx_host_get_pds_data (const char **pds_data, uint16_t index) {
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	b082      	sub	sp, #8
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
 8008d34:	460b      	mov	r3, r1
 8008d36:	807b      	strh	r3, [r7, #2]
  /* Manage dynamically the PDS in function of the chip connected */
  if (strncmp("WFM200", (char *)sl_wfx_context->wfx_opn, 6) == 0) {
 8008d38:	4b0e      	ldr	r3, [pc, #56]	; (8008d74 <sl_wfx_host_get_pds_data+0x48>)
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008d40:	2206      	movs	r2, #6
 8008d42:	4619      	mov	r1, r3
 8008d44:	480c      	ldr	r0, [pc, #48]	; (8008d78 <sl_wfx_host_get_pds_data+0x4c>)
 8008d46:	f012 fc7f 	bl	801b648 <strncmp>
 8008d4a:	4603      	mov	r3, r0
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d106      	bne.n	8008d5e <sl_wfx_host_get_pds_data+0x32>
    *pds_data = pds_table_brd8023a[index];
 8008d50:	887b      	ldrh	r3, [r7, #2]
 8008d52:	4a0a      	ldr	r2, [pc, #40]	; (8008d7c <sl_wfx_host_get_pds_data+0x50>)
 8008d54:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	601a      	str	r2, [r3, #0]
 8008d5c:	e005      	b.n	8008d6a <sl_wfx_host_get_pds_data+0x3e>
  } else {
    *pds_data = pds_table_brd8022a[index];
 8008d5e:	887b      	ldrh	r3, [r7, #2]
 8008d60:	4a07      	ldr	r2, [pc, #28]	; (8008d80 <sl_wfx_host_get_pds_data+0x54>)
 8008d62:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	601a      	str	r2, [r3, #0]
  }
  
  return SL_STATUS_OK;
 8008d6a:	2300      	movs	r3, #0
}
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	3708      	adds	r7, #8
 8008d70:	46bd      	mov	sp, r7
 8008d72:	bd80      	pop	{r7, pc}
 8008d74:	20000898 	.word	0x20000898
 8008d78:	0801dec0 	.word	0x0801dec0
 8008d7c:	080211c4 	.word	0x080211c4
 8008d80:	080211ac 	.word	0x080211ac

08008d84 <sl_wfx_host_get_pds_size>:

/**************************************************************************//**
 * Get PDS size
 *****************************************************************************/
sl_status_t sl_wfx_host_get_pds_size(uint16_t *pds_size)
{
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b082      	sub	sp, #8
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
  /* Manage dynamically the PDS in function of the chip connected */
  if (strncmp("WFM200", (char *)sl_wfx_context->wfx_opn, 6) == 0) {
 8008d8c:	4b0b      	ldr	r3, [pc, #44]	; (8008dbc <sl_wfx_host_get_pds_size+0x38>)
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008d94:	2206      	movs	r2, #6
 8008d96:	4619      	mov	r1, r3
 8008d98:	4809      	ldr	r0, [pc, #36]	; (8008dc0 <sl_wfx_host_get_pds_size+0x3c>)
 8008d9a:	f012 fc55 	bl	801b648 <strncmp>
 8008d9e:	4603      	mov	r3, r0
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d103      	bne.n	8008dac <sl_wfx_host_get_pds_size+0x28>
    *pds_size = SL_WFX_ARRAY_COUNT(pds_table_brd8023a);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2206      	movs	r2, #6
 8008da8:	801a      	strh	r2, [r3, #0]
 8008daa:	e002      	b.n	8008db2 <sl_wfx_host_get_pds_size+0x2e>
  } else {
    *pds_size = SL_WFX_ARRAY_COUNT(pds_table_brd8022a);
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	2206      	movs	r2, #6
 8008db0:	801a      	strh	r2, [r3, #0]
  }
  
  return SL_STATUS_OK;
 8008db2:	2300      	movs	r3, #0
}
 8008db4:	4618      	mov	r0, r3
 8008db6:	3708      	adds	r7, #8
 8008db8:	46bd      	mov	sp, r7
 8008dba:	bd80      	pop	{r7, pc}
 8008dbc:	20000898 	.word	0x20000898
 8008dc0:	0801dec0 	.word	0x0801dec0

08008dc4 <sl_wfx_host_deinit>:

/**************************************************************************//**
 * Deinit the host resources
 *****************************************************************************/
sl_status_t sl_wfx_host_deinit (void) {
 8008dc4:	b480      	push	{r7}
 8008dc6:	af00      	add	r7, sp, #0
  //Commented for now, waiting for driver fix
  //vQueueDelete(wifi_event_queue);
  //vSemaphoreDelete(sl_wfx_driver_mutex);
  //vSemaphoreDelete(sl_wfx_wake_up_sem);

  return SL_STATUS_OK;
 8008dc8:	2300      	movs	r3, #0
}
 8008dca:	4618      	mov	r0, r3
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd2:	4770      	bx	lr

08008dd4 <sl_wfx_host_reset_chip>:

/**************************************************************************//**
 * Reset the Wi-Fi device
 *****************************************************************************/
sl_status_t sl_wfx_host_reset_chip(void) {
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(WFM_RESET_GPIO_Port, WFM_RESET_Pin, GPIO_PIN_RESET);
 8008dd8:	2200      	movs	r2, #0
 8008dda:	2101      	movs	r1, #1
 8008ddc:	4808      	ldr	r0, [pc, #32]	; (8008e00 <sl_wfx_host_reset_chip+0x2c>)
 8008dde:	f7fc fb6b 	bl	80054b8 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8008de2:	200a      	movs	r0, #10
 8008de4:	f7fb fb8c 	bl	8004500 <HAL_Delay>
  HAL_GPIO_WritePin(WFM_RESET_GPIO_Port, WFM_RESET_Pin, GPIO_PIN_SET);
 8008de8:	2201      	movs	r2, #1
 8008dea:	2101      	movs	r1, #1
 8008dec:	4804      	ldr	r0, [pc, #16]	; (8008e00 <sl_wfx_host_reset_chip+0x2c>)
 8008dee:	f7fc fb63 	bl	80054b8 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8008df2:	200a      	movs	r0, #10
 8008df4:	f7fb fb84 	bl	8004500 <HAL_Delay>

  return SL_STATUS_OK;
 8008df8:	2300      	movs	r3, #0
}
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	bd80      	pop	{r7, pc}
 8008dfe:	bf00      	nop
 8008e00:	40020800 	.word	0x40020800

08008e04 <sl_wfx_host_set_wake_up_pin>:
}

/**************************************************************************//**
 * Set or reset the wake-up pin 
 *****************************************************************************/
sl_status_t sl_wfx_host_set_wake_up_pin (uint8_t state) {
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b082      	sub	sp, #8
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	4603      	mov	r3, r0
 8008e0c:	71fb      	strb	r3, [r7, #7]
  if (state > 0) {
 8008e0e:	79fb      	ldrb	r3, [r7, #7]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d006      	beq.n	8008e22 <sl_wfx_host_set_wake_up_pin+0x1e>
    HAL_GPIO_WritePin(WFM_WUP_GPIO_Port, WFM_WUP_Pin, GPIO_PIN_SET);
 8008e14:	2201      	movs	r2, #1
 8008e16:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008e1a:	4807      	ldr	r0, [pc, #28]	; (8008e38 <sl_wfx_host_set_wake_up_pin+0x34>)
 8008e1c:	f7fc fb4c 	bl	80054b8 <HAL_GPIO_WritePin>
 8008e20:	e005      	b.n	8008e2e <sl_wfx_host_set_wake_up_pin+0x2a>
  } else {
    HAL_GPIO_WritePin(WFM_WUP_GPIO_Port, WFM_WUP_Pin, GPIO_PIN_RESET);
 8008e22:	2200      	movs	r2, #0
 8008e24:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008e28:	4803      	ldr	r0, [pc, #12]	; (8008e38 <sl_wfx_host_set_wake_up_pin+0x34>)
 8008e2a:	f7fc fb45 	bl	80054b8 <HAL_GPIO_WritePin>
  }
  
  return SL_STATUS_OK;
 8008e2e:	2300      	movs	r3, #0
}
 8008e30:	4618      	mov	r0, r3
 8008e32:	3708      	adds	r7, #8
 8008e34:	46bd      	mov	sp, r7
 8008e36:	bd80      	pop	{r7, pc}
 8008e38:	40020400 	.word	0x40020400

08008e3c <sl_wfx_host_wait_for_wake_up>:

/**************************************************************************//**
 * Wait for a wake-up
 *****************************************************************************/
sl_status_t sl_wfx_host_wait_for_wake_up (void) {
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	af00      	add	r7, sp, #0
  xSemaphoreTake(sl_wfx_wake_up_sem, 0);
 8008e40:	4b07      	ldr	r3, [pc, #28]	; (8008e60 <sl_wfx_host_wait_for_wake_up+0x24>)
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	2100      	movs	r1, #0
 8008e46:	4618      	mov	r0, r3
 8008e48:	f002 f84a 	bl	800aee0 <xQueueSemaphoreTake>
  xSemaphoreTake(sl_wfx_wake_up_sem, 3/portTICK_PERIOD_MS);
 8008e4c:	4b04      	ldr	r3, [pc, #16]	; (8008e60 <sl_wfx_host_wait_for_wake_up+0x24>)
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	2101      	movs	r1, #1
 8008e52:	4618      	mov	r0, r3
 8008e54:	f002 f844 	bl	800aee0 <xQueueSemaphoreTake>

  return SL_STATUS_OK;
 8008e58:	2300      	movs	r3, #0
}
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	bd80      	pop	{r7, pc}
 8008e5e:	bf00      	nop
 8008e60:	200011d4 	.word	0x200011d4

08008e64 <sl_wfx_host_sleep_grant>:
/**************************************************************************//**
 * Grant the Wi-Fi device to go to sleep mode
 *****************************************************************************/
sl_status_t sl_wfx_host_sleep_grant (sl_wfx_host_bus_transfer_type_t type,
                                     sl_wfx_register_address_t address,
                                     uint32_t length) {
 8008e64:	b480      	push	{r7}
 8008e66:	b083      	sub	sp, #12
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	4603      	mov	r3, r0
 8008e6c:	603a      	str	r2, [r7, #0]
 8008e6e:	71fb      	strb	r3, [r7, #7]
 8008e70:	460b      	mov	r3, r1
 8008e72:	71bb      	strb	r3, [r7, #6]
  /* To be implemented depending on the application */ 
  return SL_STATUS_WIFI_SLEEP_GRANTED;
 8008e74:	f640 3308 	movw	r3, #2824	; 0xb08
}
 8008e78:	4618      	mov	r0, r3
 8008e7a:	370c      	adds	r7, #12
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e82:	4770      	bx	lr

08008e84 <sl_wfx_host_setup_waited_event>:

/**************************************************************************//**
 * Set up a waited event
 *****************************************************************************/
sl_status_t sl_wfx_host_setup_waited_event (uint8_t event_id) {
 8008e84:	b480      	push	{r7}
 8008e86:	b083      	sub	sp, #12
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	4603      	mov	r3, r0
 8008e8c:	71fb      	strb	r3, [r7, #7]
  host_context.waited_event_id = event_id;
 8008e8e:	4a05      	ldr	r2, [pc, #20]	; (8008ea4 <sl_wfx_host_setup_waited_event+0x20>)
 8008e90:	79fb      	ldrb	r3, [r7, #7]
 8008e92:	7113      	strb	r3, [r2, #4]
  
  return SL_STATUS_OK;
 8008e94:	2300      	movs	r3, #0
}
 8008e96:	4618      	mov	r0, r3
 8008e98:	370c      	adds	r7, #12
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea0:	4770      	bx	lr
 8008ea2:	bf00      	nop
 8008ea4:	200011e0 	.word	0x200011e0

08008ea8 <sl_wfx_host_wait_for_confirmation>:
/**************************************************************************//**
 * Wait for a confirmation
 *****************************************************************************/
sl_status_t sl_wfx_host_wait_for_confirmation (uint8_t confirmation_id,
                                               uint32_t timeout_ms,
                                               void **event_payload_out) {
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b086      	sub	sp, #24
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	4603      	mov	r3, r0
 8008eb0:	60b9      	str	r1, [r7, #8]
 8008eb2:	607a      	str	r2, [r7, #4]
 8008eb4:	73fb      	strb	r3, [r7, #15]
  uint8_t posted_event_id;
  
  for (uint32_t i = 0; i < timeout_ms; i++) {
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	617b      	str	r3, [r7, #20]
 8008eba:	e01b      	b.n	8008ef4 <sl_wfx_host_wait_for_confirmation+0x4c>
    /* Wait for an event posted by the function sl_wfx_host_post_event() */
    if (xQueueReceive(sl_wfx_confirmation_queue, &posted_event_id, 1) == pdTRUE) {
 8008ebc:	4b12      	ldr	r3, [pc, #72]	; (8008f08 <sl_wfx_host_wait_for_confirmation+0x60>)
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	f107 0113 	add.w	r1, r7, #19
 8008ec4:	2201      	movs	r2, #1
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	f001 ff2a 	bl	800ad20 <xQueueReceive>
 8008ecc:	4603      	mov	r3, r0
 8008ece:	2b01      	cmp	r3, #1
 8008ed0:	d10d      	bne.n	8008eee <sl_wfx_host_wait_for_confirmation+0x46>
      /* Once a message is received, check if it is the expected ID */
      if (confirmation_id == posted_event_id) {
 8008ed2:	7cfb      	ldrb	r3, [r7, #19]
 8008ed4:	7bfa      	ldrb	r2, [r7, #15]
 8008ed6:	429a      	cmp	r2, r3
 8008ed8:	d109      	bne.n	8008eee <sl_wfx_host_wait_for_confirmation+0x46>
        /* Pass the confirmation reply and return*/
        if (event_payload_out != NULL) {
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d004      	beq.n	8008eea <sl_wfx_host_wait_for_confirmation+0x42>
          *event_payload_out = sl_wfx_context->event_payload_buffer;
 8008ee0:	4b0a      	ldr	r3, [pc, #40]	; (8008f0c <sl_wfx_host_wait_for_confirmation+0x64>)
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	461a      	mov	r2, r3
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	601a      	str	r2, [r3, #0]
        }
        return SL_STATUS_OK;
 8008eea:	2300      	movs	r3, #0
 8008eec:	e007      	b.n	8008efe <sl_wfx_host_wait_for_confirmation+0x56>
  for (uint32_t i = 0; i < timeout_ms; i++) {
 8008eee:	697b      	ldr	r3, [r7, #20]
 8008ef0:	3301      	adds	r3, #1
 8008ef2:	617b      	str	r3, [r7, #20]
 8008ef4:	697a      	ldr	r2, [r7, #20]
 8008ef6:	68bb      	ldr	r3, [r7, #8]
 8008ef8:	429a      	cmp	r2, r3
 8008efa:	d3df      	bcc.n	8008ebc <sl_wfx_host_wait_for_confirmation+0x14>
      }
    }
  }
  
  /* The wait for the confirmation timed out, return */
  return SL_STATUS_TIMEOUT;
 8008efc:	2307      	movs	r3, #7
}
 8008efe:	4618      	mov	r0, r3
 8008f00:	3718      	adds	r7, #24
 8008f02:	46bd      	mov	sp, r7
 8008f04:	bd80      	pop	{r7, pc}
 8008f06:	bf00      	nop
 8008f08:	200011d0 	.word	0x200011d0
 8008f0c:	20000898 	.word	0x20000898

08008f10 <sl_wfx_host_wait>:

/**************************************************************************//**
 * Wait function
 *****************************************************************************/
sl_status_t sl_wfx_host_wait (uint32_t wait_time) {
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b082      	sub	sp, #8
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
  osDelay(wait_time);
 8008f18:	6878      	ldr	r0, [r7, #4]
 8008f1a:	f001 f80b 	bl	8009f34 <osDelay>
  
  return SL_STATUS_OK;
 8008f1e:	2300      	movs	r3, #0
}
 8008f20:	4618      	mov	r0, r3
 8008f22:	3708      	adds	r7, #8
 8008f24:	46bd      	mov	sp, r7
 8008f26:	bd80      	pop	{r7, pc}

08008f28 <sl_wfx_host_post_event>:

/**************************************************************************//**
 * Post an event comming from the Wi-Fi device
 *****************************************************************************/
sl_status_t sl_wfx_host_post_event (sl_wfx_generic_message_t *event_payload) {
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	b08a      	sub	sp, #40	; 0x28
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
  
  switch (event_payload->header.id) {
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	789b      	ldrb	r3, [r3, #2]
 8008f34:	3bc3      	subs	r3, #195	; 0xc3
 8008f36:	2b21      	cmp	r3, #33	; 0x21
 8008f38:	f200 80f3 	bhi.w	8009122 <sl_wfx_host_post_event+0x1fa>
 8008f3c:	a201      	add	r2, pc, #4	; (adr r2, 8008f44 <sl_wfx_host_post_event+0x1c>)
 8008f3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f42:	bf00      	nop
 8008f44:	08008fcd 	.word	0x08008fcd
 8008f48:	08008fd5 	.word	0x08008fd5
 8008f4c:	08008fdd 	.word	0x08008fdd
 8008f50:	08009123 	.word	0x08009123
 8008f54:	08008fe5 	.word	0x08008fe5
 8008f58:	08009123 	.word	0x08009123
 8008f5c:	08009123 	.word	0x08009123
 8008f60:	08008fed 	.word	0x08008fed
 8008f64:	08009003 	.word	0x08009003
 8008f68:	0800900b 	.word	0x0800900b
 8008f6c:	08009013 	.word	0x08009013
 8008f70:	0800901b 	.word	0x0800901b
 8008f74:	08009023 	.word	0x08009023
 8008f78:	08009123 	.word	0x08009123
 8008f7c:	08009123 	.word	0x08009123
 8008f80:	0800902b 	.word	0x0800902b
 8008f84:	08009123 	.word	0x08009123
 8008f88:	08009123 	.word	0x08009123
 8008f8c:	08009123 	.word	0x08009123
 8008f90:	08009123 	.word	0x08009123
 8008f94:	08009123 	.word	0x08009123
 8008f98:	08009123 	.word	0x08009123
 8008f9c:	08009123 	.word	0x08009123
 8008fa0:	08009123 	.word	0x08009123
 8008fa4:	08009123 	.word	0x08009123
 8008fa8:	08009123 	.word	0x08009123
 8008fac:	08009123 	.word	0x08009123
 8008fb0:	08009123 	.word	0x08009123
 8008fb4:	08009123 	.word	0x08009123
 8008fb8:	08009033 	.word	0x08009033
 8008fbc:	08009123 	.word	0x08009123
 8008fc0:	08009123 	.word	0x08009123
 8008fc4:	08009123 	.word	0x08009123
 8008fc8:	080090af 	.word	0x080090af
    /******** INDICATION ********/
  case SL_WFX_CONNECT_IND_ID:
    {
      sl_wfx_connect_callback((sl_wfx_connect_ind_t*) event_payload);
 8008fcc:	6878      	ldr	r0, [r7, #4]
 8008fce:	f000 fa41 	bl	8009454 <sl_wfx_connect_callback>
      break;
 8008fd2:	e0a6      	b.n	8009122 <sl_wfx_host_post_event+0x1fa>
    }
  case SL_WFX_DISCONNECT_IND_ID:
    {
      sl_wfx_disconnect_callback((sl_wfx_disconnect_ind_t*) event_payload);
 8008fd4:	6878      	ldr	r0, [r7, #4]
 8008fd6:	f000 fb4d 	bl	8009674 <sl_wfx_disconnect_callback>
      break;
 8008fda:	e0a2      	b.n	8009122 <sl_wfx_host_post_event+0x1fa>
    }
  case SL_WFX_START_AP_IND_ID:
    {
      sl_wfx_start_ap_callback((sl_wfx_start_ap_ind_t*) event_payload);
 8008fdc:	6878      	ldr	r0, [r7, #4]
 8008fde:	f000 fb87 	bl	80096f0 <sl_wfx_start_ap_callback>
      break;
 8008fe2:	e09e      	b.n	8009122 <sl_wfx_host_post_event+0x1fa>
    }
  case SL_WFX_STOP_AP_IND_ID:
    {
      sl_wfx_stop_ap_callback((sl_wfx_stop_ap_ind_t*) event_payload);
 8008fe4:	6878      	ldr	r0, [r7, #4]
 8008fe6:	f000 fbdd 	bl	80097a4 <sl_wfx_stop_ap_callback>
      break;
 8008fea:	e09a      	b.n	8009122 <sl_wfx_host_post_event+0x1fa>
    }
  case SL_WFX_RECEIVED_IND_ID:
    {
      sl_wfx_received_ind_t* ethernet_frame = (sl_wfx_received_ind_t*) event_payload;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	60fb      	str	r3, [r7, #12]
      if ( ethernet_frame->body.frame_type == 0 )
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	791b      	ldrb	r3, [r3, #4]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	f040 8093 	bne.w	8009120 <sl_wfx_host_post_event+0x1f8>
      {
        sl_wfx_host_received_frame_callback(ethernet_frame);
 8008ffa:	68f8      	ldr	r0, [r7, #12]
 8008ffc:	f7fa f97c 	bl	80032f8 <sl_wfx_host_received_frame_callback>
      }
      break;
 8009000:	e08e      	b.n	8009120 <sl_wfx_host_post_event+0x1f8>
    }
  case SL_WFX_SCAN_RESULT_IND_ID:
    {
      sl_wfx_scan_result_callback((sl_wfx_scan_result_ind_t*) event_payload);
 8009002:	6878      	ldr	r0, [r7, #4]
 8009004:	f000 f92e 	bl	8009264 <sl_wfx_scan_result_callback>
      break;
 8009008:	e08b      	b.n	8009122 <sl_wfx_host_post_event+0x1fa>
    }
  case SL_WFX_SCAN_COMPLETE_IND_ID:
    {
      sl_wfx_scan_complete_callback((sl_wfx_scan_complete_ind_t*) event_payload);
 800900a:	6878      	ldr	r0, [r7, #4]
 800900c:	f000 f9ee 	bl	80093ec <sl_wfx_scan_complete_callback>
      break;
 8009010:	e087      	b.n	8009122 <sl_wfx_host_post_event+0x1fa>
    }
  case SL_WFX_AP_CLIENT_CONNECTED_IND_ID:
    {
      sl_wfx_ap_client_connected_callback((sl_wfx_ap_client_connected_ind_t*) event_payload);
 8009012:	6878      	ldr	r0, [r7, #4]
 8009014:	f000 fc02 	bl	800981c <sl_wfx_ap_client_connected_callback>
      break;
 8009018:	e083      	b.n	8009122 <sl_wfx_host_post_event+0x1fa>
    }
  case SL_WFX_AP_CLIENT_REJECTED_IND_ID:
    {
      sl_wfx_ap_client_rejected_callback((sl_wfx_ap_client_rejected_ind_t*) event_payload);
 800901a:	6878      	ldr	r0, [r7, #4]
 800901c:	f000 fc3c 	bl	8009898 <sl_wfx_ap_client_rejected_callback>
      break;
 8009020:	e07f      	b.n	8009122 <sl_wfx_host_post_event+0x1fa>
    }
  case SL_WFX_AP_CLIENT_DISCONNECTED_IND_ID:
    {
      sl_wfx_ap_client_disconnected_callback((sl_wfx_ap_client_disconnected_ind_t*) event_payload);
 8009022:	6878      	ldr	r0, [r7, #4]
 8009024:	f000 fc6e 	bl	8009904 <sl_wfx_ap_client_disconnected_callback>
      break;
 8009028:	e07b      	b.n	8009122 <sl_wfx_host_post_event+0x1fa>
    }
  case SL_WFX_EXT_AUTH_IND_ID:
    {
      sl_wfx_ext_auth_callback((sl_wfx_ext_auth_ind_t*) event_payload);
 800902a:	6878      	ldr	r0, [r7, #4]
 800902c:	f000 fca0 	bl	8009970 <sl_wfx_ext_auth_callback>
      break;
 8009030:	e077      	b.n	8009122 <sl_wfx_host_post_event+0x1fa>
    {
      break;
    }
  case SL_WFX_EXCEPTION_IND_ID:
    {
      sl_wfx_exception_ind_t *firmware_exception = (sl_wfx_exception_ind_t*)event_payload;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	613b      	str	r3, [r7, #16]
      uint8_t *exception_tmp = (uint8_t *) firmware_exception;
 8009036:	693b      	ldr	r3, [r7, #16]
 8009038:	627b      	str	r3, [r7, #36]	; 0x24
      printf("firmware exception %lu\r\n", firmware_exception->body.reason);
 800903a:	693b      	ldr	r3, [r7, #16]
 800903c:	685b      	ldr	r3, [r3, #4]
 800903e:	4619      	mov	r1, r3
 8009040:	4849      	ldr	r0, [pc, #292]	; (8009168 <sl_wfx_host_post_event+0x240>)
 8009042:	f012 fa1d 	bl	801b480 <iprintf>
      for (uint16_t i = 0; i < firmware_exception->header.length; i += 16) {
 8009046:	2300      	movs	r3, #0
 8009048:	847b      	strh	r3, [r7, #34]	; 0x22
 800904a:	e029      	b.n	80090a0 <sl_wfx_host_post_event+0x178>
        printf("hif: %.8x:", i);
 800904c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800904e:	4619      	mov	r1, r3
 8009050:	4846      	ldr	r0, [pc, #280]	; (800916c <sl_wfx_host_post_event+0x244>)
 8009052:	f012 fa15 	bl	801b480 <iprintf>
        for (uint8_t j = 0; (j < 16) && ((i + j) < firmware_exception->header.length); j ++) {
 8009056:	2300      	movs	r3, #0
 8009058:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 800905c:	e00d      	b.n	800907a <sl_wfx_host_post_event+0x152>
            printf(" %.2x", *exception_tmp);
 800905e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009060:	781b      	ldrb	r3, [r3, #0]
 8009062:	4619      	mov	r1, r3
 8009064:	4842      	ldr	r0, [pc, #264]	; (8009170 <sl_wfx_host_post_event+0x248>)
 8009066:	f012 fa0b 	bl	801b480 <iprintf>
            exception_tmp++;
 800906a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800906c:	3301      	adds	r3, #1
 800906e:	627b      	str	r3, [r7, #36]	; 0x24
        for (uint8_t j = 0; (j < 16) && ((i + j) < firmware_exception->header.length); j ++) {
 8009070:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8009074:	3301      	adds	r3, #1
 8009076:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 800907a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800907e:	2b0f      	cmp	r3, #15
 8009080:	d808      	bhi.n	8009094 <sl_wfx_host_post_event+0x16c>
 8009082:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8009084:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8009088:	4413      	add	r3, r2
 800908a:	693a      	ldr	r2, [r7, #16]
 800908c:	8812      	ldrh	r2, [r2, #0]
 800908e:	b292      	uxth	r2, r2
 8009090:	4293      	cmp	r3, r2
 8009092:	dbe4      	blt.n	800905e <sl_wfx_host_post_event+0x136>
        }
        printf("\r\n");
 8009094:	4837      	ldr	r0, [pc, #220]	; (8009174 <sl_wfx_host_post_event+0x24c>)
 8009096:	f012 fa79 	bl	801b58c <puts>
      for (uint16_t i = 0; i < firmware_exception->header.length; i += 16) {
 800909a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800909c:	3310      	adds	r3, #16
 800909e:	847b      	strh	r3, [r7, #34]	; 0x22
 80090a0:	693b      	ldr	r3, [r7, #16]
 80090a2:	881b      	ldrh	r3, [r3, #0]
 80090a4:	b29b      	uxth	r3, r3
 80090a6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80090a8:	429a      	cmp	r2, r3
 80090aa:	d3cf      	bcc.n	800904c <sl_wfx_host_post_event+0x124>
      }
      break;
 80090ac:	e039      	b.n	8009122 <sl_wfx_host_post_event+0x1fa>
    }
  case SL_WFX_ERROR_IND_ID:
    {
      sl_wfx_error_ind_t *firmware_error = (sl_wfx_error_ind_t*)event_payload;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	617b      	str	r3, [r7, #20]
      uint8_t *error_tmp = (uint8_t *) firmware_error;
 80090b2:	697b      	ldr	r3, [r7, #20]
 80090b4:	61fb      	str	r3, [r7, #28]
      printf("firmware error %lu\r\n", firmware_error->body.type);
 80090b6:	697b      	ldr	r3, [r7, #20]
 80090b8:	685b      	ldr	r3, [r3, #4]
 80090ba:	4619      	mov	r1, r3
 80090bc:	482e      	ldr	r0, [pc, #184]	; (8009178 <sl_wfx_host_post_event+0x250>)
 80090be:	f012 f9df 	bl	801b480 <iprintf>
      for (uint16_t i = 0; i < firmware_error->header.length; i += 16) {
 80090c2:	2300      	movs	r3, #0
 80090c4:	837b      	strh	r3, [r7, #26]
 80090c6:	e024      	b.n	8009112 <sl_wfx_host_post_event+0x1ea>
        printf("hif: %.8x:", i);
 80090c8:	8b7b      	ldrh	r3, [r7, #26]
 80090ca:	4619      	mov	r1, r3
 80090cc:	4827      	ldr	r0, [pc, #156]	; (800916c <sl_wfx_host_post_event+0x244>)
 80090ce:	f012 f9d7 	bl	801b480 <iprintf>
        for (uint8_t j = 0; (j < 16) && ((i + j) < firmware_error->header.length); j ++) {
 80090d2:	2300      	movs	r3, #0
 80090d4:	767b      	strb	r3, [r7, #25]
 80090d6:	e00b      	b.n	80090f0 <sl_wfx_host_post_event+0x1c8>
            printf(" %.2x", *error_tmp);
 80090d8:	69fb      	ldr	r3, [r7, #28]
 80090da:	781b      	ldrb	r3, [r3, #0]
 80090dc:	4619      	mov	r1, r3
 80090de:	4824      	ldr	r0, [pc, #144]	; (8009170 <sl_wfx_host_post_event+0x248>)
 80090e0:	f012 f9ce 	bl	801b480 <iprintf>
            error_tmp++;
 80090e4:	69fb      	ldr	r3, [r7, #28]
 80090e6:	3301      	adds	r3, #1
 80090e8:	61fb      	str	r3, [r7, #28]
        for (uint8_t j = 0; (j < 16) && ((i + j) < firmware_error->header.length); j ++) {
 80090ea:	7e7b      	ldrb	r3, [r7, #25]
 80090ec:	3301      	adds	r3, #1
 80090ee:	767b      	strb	r3, [r7, #25]
 80090f0:	7e7b      	ldrb	r3, [r7, #25]
 80090f2:	2b0f      	cmp	r3, #15
 80090f4:	d807      	bhi.n	8009106 <sl_wfx_host_post_event+0x1de>
 80090f6:	8b7a      	ldrh	r2, [r7, #26]
 80090f8:	7e7b      	ldrb	r3, [r7, #25]
 80090fa:	4413      	add	r3, r2
 80090fc:	697a      	ldr	r2, [r7, #20]
 80090fe:	8812      	ldrh	r2, [r2, #0]
 8009100:	b292      	uxth	r2, r2
 8009102:	4293      	cmp	r3, r2
 8009104:	dbe8      	blt.n	80090d8 <sl_wfx_host_post_event+0x1b0>
        }
        printf("\r\n");
 8009106:	481b      	ldr	r0, [pc, #108]	; (8009174 <sl_wfx_host_post_event+0x24c>)
 8009108:	f012 fa40 	bl	801b58c <puts>
      for (uint16_t i = 0; i < firmware_error->header.length; i += 16) {
 800910c:	8b7b      	ldrh	r3, [r7, #26]
 800910e:	3310      	adds	r3, #16
 8009110:	837b      	strh	r3, [r7, #26]
 8009112:	697b      	ldr	r3, [r7, #20]
 8009114:	881b      	ldrh	r3, [r3, #0]
 8009116:	b29b      	uxth	r3, r3
 8009118:	8b7a      	ldrh	r2, [r7, #26]
 800911a:	429a      	cmp	r2, r3
 800911c:	d3d4      	bcc.n	80090c8 <sl_wfx_host_post_event+0x1a0>
      }
      break;
 800911e:	e000      	b.n	8009122 <sl_wfx_host_post_event+0x1fa>
      break;
 8009120:	bf00      	nop
    }
  }

  if (host_context.waited_event_id == event_payload->header.id) {
 8009122:	4b16      	ldr	r3, [pc, #88]	; (800917c <sl_wfx_host_post_event+0x254>)
 8009124:	791a      	ldrb	r2, [r3, #4]
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	789b      	ldrb	r3, [r3, #2]
 800912a:	429a      	cmp	r2, r3
 800912c:	d117      	bne.n	800915e <sl_wfx_host_post_event+0x236>
    if (event_payload->header.length < SL_WFX_EVENT_MAX_SIZE) {
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	881b      	ldrh	r3, [r3, #0]
 8009132:	b29b      	uxth	r3, r3
 8009134:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009138:	d211      	bcs.n	800915e <sl_wfx_host_post_event+0x236>
      /* Post the event in the queue */
      memcpy(sl_wfx_context->event_payload_buffer,
 800913a:	4b11      	ldr	r3, [pc, #68]	; (8009180 <sl_wfx_host_post_event+0x258>)
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	4618      	mov	r0, r3
             (void*) event_payload,
             event_payload->header.length);
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	881b      	ldrh	r3, [r3, #0]
 8009144:	b29b      	uxth	r3, r3
      memcpy(sl_wfx_context->event_payload_buffer,
 8009146:	461a      	mov	r2, r3
 8009148:	6879      	ldr	r1, [r7, #4]
 800914a:	f011 fc23 	bl	801a994 <memcpy>
      xQueueOverwrite(sl_wfx_confirmation_queue, (void *) &event_payload->header.id);
 800914e:	4b0d      	ldr	r3, [pc, #52]	; (8009184 <sl_wfx_host_post_event+0x25c>)
 8009150:	6818      	ldr	r0, [r3, #0]
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	1c99      	adds	r1, r3, #2
 8009156:	2302      	movs	r3, #2
 8009158:	2200      	movs	r2, #0
 800915a:	f001 fbbb 	bl	800a8d4 <xQueueGenericSend>


    }
  }

  return SL_STATUS_OK;
 800915e:	2300      	movs	r3, #0
}
 8009160:	4618      	mov	r0, r3
 8009162:	3728      	adds	r7, #40	; 0x28
 8009164:	46bd      	mov	sp, r7
 8009166:	bd80      	pop	{r7, pc}
 8009168:	0801dec8 	.word	0x0801dec8
 800916c:	0801dee4 	.word	0x0801dee4
 8009170:	0801def0 	.word	0x0801def0
 8009174:	0801def8 	.word	0x0801def8
 8009178:	0801defc 	.word	0x0801defc
 800917c:	200011e0 	.word	0x200011e0
 8009180:	20000898 	.word	0x20000898
 8009184:	200011d0 	.word	0x200011d0

08009188 <sl_wfx_host_allocate_buffer>:
/**************************************************************************//**
 * Allocate a buffer
 *****************************************************************************/
sl_status_t sl_wfx_host_allocate_buffer (void** buffer,
                                         sl_wfx_buffer_type_t type,
                                         uint32_t buffer_size) {
 8009188:	b580      	push	{r7, lr}
 800918a:	b084      	sub	sp, #16
 800918c:	af00      	add	r7, sp, #0
 800918e:	60f8      	str	r0, [r7, #12]
 8009190:	460b      	mov	r3, r1
 8009192:	607a      	str	r2, [r7, #4]
 8009194:	72fb      	strb	r3, [r7, #11]
  *buffer = pvPortMalloc( buffer_size);
 8009196:	6878      	ldr	r0, [r7, #4]
 8009198:	f004 f87e 	bl	800d298 <pvPortMalloc>
 800919c:	4602      	mov	r2, r0
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	601a      	str	r2, [r3, #0]
  
  return SL_STATUS_OK;
 80091a2:	2300      	movs	r3, #0
}
 80091a4:	4618      	mov	r0, r3
 80091a6:	3710      	adds	r7, #16
 80091a8:	46bd      	mov	sp, r7
 80091aa:	bd80      	pop	{r7, pc}

080091ac <sl_wfx_host_free_buffer>:

/**************************************************************************//**
 * Free a buffer
 *****************************************************************************/
sl_status_t sl_wfx_host_free_buffer (void* buffer, sl_wfx_buffer_type_t type) {
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b082      	sub	sp, #8
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
 80091b4:	460b      	mov	r3, r1
 80091b6:	70fb      	strb	r3, [r7, #3]
  vPortFree(buffer);
 80091b8:	6878      	ldr	r0, [r7, #4]
 80091ba:	f004 f939 	bl	800d430 <vPortFree>
  
  return SL_STATUS_OK;
 80091be:	2300      	movs	r3, #0
}
 80091c0:	4618      	mov	r0, r3
 80091c2:	3708      	adds	r7, #8
 80091c4:	46bd      	mov	sp, r7
 80091c6:	bd80      	pop	{r7, pc}

080091c8 <sl_wfx_host_transmit_frame>:

/**************************************************************************//**
 * Host transmit frame
 *****************************************************************************/
sl_status_t sl_wfx_host_transmit_frame (void* frame, uint32_t frame_len) {
 80091c8:	b580      	push	{r7, lr}
 80091ca:	b082      	sub	sp, #8
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
 80091d0:	6039      	str	r1, [r7, #0]
  return sl_wfx_data_write(frame, frame_len);
 80091d2:	6839      	ldr	r1, [r7, #0]
 80091d4:	6878      	ldr	r0, [r7, #4]
 80091d6:	f7fe faa9 	bl	800772c <sl_wfx_data_write>
 80091da:	4603      	mov	r3, r0
}
 80091dc:	4618      	mov	r0, r3
 80091de:	3708      	adds	r7, #8
 80091e0:	46bd      	mov	sp, r7
 80091e2:	bd80      	pop	{r7, pc}

080091e4 <sl_wfx_host_log>:

/**************************************************************************//**
 * Output driver logs
 *****************************************************************************/
#if SL_WFX_DEBUG_MASK
void sl_wfx_host_log (const char *string, ...) {
 80091e4:	b40f      	push	{r0, r1, r2, r3}
 80091e6:	b580      	push	{r7, lr}
 80091e8:	b082      	sub	sp, #8
 80091ea:	af00      	add	r7, sp, #0
  va_list valist;

  va_start(valist, string);
 80091ec:	f107 0314 	add.w	r3, r7, #20
 80091f0:	607b      	str	r3, [r7, #4]
  vprintf(string, valist);
 80091f2:	6879      	ldr	r1, [r7, #4]
 80091f4:	6938      	ldr	r0, [r7, #16]
 80091f6:	f012 facb 	bl	801b790 <viprintf>
  va_end(valist);
}
 80091fa:	bf00      	nop
 80091fc:	3708      	adds	r7, #8
 80091fe:	46bd      	mov	sp, r7
 8009200:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009204:	b004      	add	sp, #16
 8009206:	4770      	bx	lr

08009208 <sl_wfx_host_lock>:
#endif

/**************************************************************************//**
 * Lock the driver mutex
 *****************************************************************************/
sl_status_t sl_wfx_host_lock (void) {
 8009208:	b580      	push	{r7, lr}
 800920a:	b082      	sub	sp, #8
 800920c:	af00      	add	r7, sp, #0
  sl_status_t status = SL_STATUS_TIMEOUT;
 800920e:	2307      	movs	r3, #7
 8009210:	607b      	str	r3, [r7, #4]

if (xSemaphoreTake(sl_wfx_driver_mutex, 500) == pdTRUE) {
 8009212:	4b0b      	ldr	r3, [pc, #44]	; (8009240 <sl_wfx_host_lock+0x38>)
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800921a:	4618      	mov	r0, r3
 800921c:	f001 fe60 	bl	800aee0 <xQueueSemaphoreTake>
 8009220:	4603      	mov	r3, r0
 8009222:	2b01      	cmp	r3, #1
 8009224:	d102      	bne.n	800922c <sl_wfx_host_lock+0x24>
//	  if (sl_wfx_driver_mutex) {
//		  sl_wfx_driver_mutex = false;
	      status = SL_STATUS_OK;
 8009226:	2300      	movs	r3, #0
 8009228:	607b      	str	r3, [r7, #4]
 800922a:	e004      	b.n	8009236 <sl_wfx_host_lock+0x2e>
	    } else {
	      printf("Wi-Fi driver mutex timeout\r\n");
 800922c:	4805      	ldr	r0, [pc, #20]	; (8009244 <sl_wfx_host_lock+0x3c>)
 800922e:	f012 f9ad 	bl	801b58c <puts>
	      status = SL_STATUS_TIMEOUT;
 8009232:	2307      	movs	r3, #7
 8009234:	607b      	str	r3, [r7, #4]
	    }

  return status;
 8009236:	687b      	ldr	r3, [r7, #4]
}
 8009238:	4618      	mov	r0, r3
 800923a:	3708      	adds	r7, #8
 800923c:	46bd      	mov	sp, r7
 800923e:	bd80      	pop	{r7, pc}
 8009240:	200011d8 	.word	0x200011d8
 8009244:	0801df14 	.word	0x0801df14

08009248 <sl_wfx_host_unlock>:

/**************************************************************************//**
 * Unlock the driver mutex
 *****************************************************************************/
sl_status_t sl_wfx_host_unlock (void) {
 8009248:	b580      	push	{r7, lr}
 800924a:	af00      	add	r7, sp, #0
	xSemaphoreGive(sl_wfx_driver_mutex);
 800924c:	4b04      	ldr	r3, [pc, #16]	; (8009260 <sl_wfx_host_unlock+0x18>)
 800924e:	6818      	ldr	r0, [r3, #0]
 8009250:	2300      	movs	r3, #0
 8009252:	2200      	movs	r2, #0
 8009254:	2100      	movs	r1, #0
 8009256:	f001 fb3d 	bl	800a8d4 <xQueueGenericSend>
	//sl_wfx_driver_mutex = true;
  return SL_STATUS_OK;
 800925a:	2300      	movs	r3, #0
}
 800925c:	4618      	mov	r0, r3
 800925e:	bd80      	pop	{r7, pc}
 8009260:	200011d8 	.word	0x200011d8

08009264 <sl_wfx_scan_result_callback>:


/**************************************************************************//**
 * Callback for individual scan result
 *****************************************************************************/
void sl_wfx_scan_result_callback (sl_wfx_scan_result_ind_t *scan_result) {
 8009264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009268:	b08a      	sub	sp, #40	; 0x28
 800926a:	af08      	add	r7, sp, #32
 800926c:	6078      	str	r0, [r7, #4]
  scan_count++;
 800926e:	4b5b      	ldr	r3, [pc, #364]	; (80093dc <sl_wfx_scan_result_callback+0x178>)
 8009270:	781b      	ldrb	r3, [r3, #0]
 8009272:	3301      	adds	r3, #1
 8009274:	b2da      	uxtb	r2, r3
 8009276:	4b59      	ldr	r3, [pc, #356]	; (80093dc <sl_wfx_scan_result_callback+0x178>)
 8009278:	701a      	strb	r2, [r3, #0]

  if (scan_verbose) {
 800927a:	4b59      	ldr	r3, [pc, #356]	; (80093e0 <sl_wfx_scan_result_callback+0x17c>)
 800927c:	781b      	ldrb	r3, [r3, #0]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d03e      	beq.n	8009300 <sl_wfx_scan_result_callback+0x9c>
    /*Report one AP information*/
    printf(
 8009282:	4b56      	ldr	r3, [pc, #344]	; (80093dc <sl_wfx_scan_result_callback+0x178>)
 8009284:	781b      	ldrb	r3, [r3, #0]
 8009286:	469c      	mov	ip, r3
        "# %2d %2d %02X %03d %02X:%02X:%02X:%02X:%02X:%02X  %s\r\n",
        scan_count,
        scan_result->body.channel,
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800928c:	b29b      	uxth	r3, r3
    printf(
 800928e:	469e      	mov	lr, r3
        *(uint8_t *)&scan_result->body.security_mode,
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	3330      	adds	r3, #48	; 0x30
 8009294:	781b      	ldrb	r3, [r3, #0]
    printf(
 8009296:	4698      	mov	r8, r3
        ((int16_t)(scan_result->body.rcpi - 220) / 2),
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800929c:	b29b      	uxth	r3, r3
 800929e:	3bdc      	subs	r3, #220	; 0xdc
 80092a0:	b29b      	uxth	r3, r3
 80092a2:	b21b      	sxth	r3, r3
    printf(
 80092a4:	0fda      	lsrs	r2, r3, #31
 80092a6:	4413      	add	r3, r2
 80092a8:	105b      	asrs	r3, r3, #1
 80092aa:	b21b      	sxth	r3, r3
 80092ac:	461a      	mov	r2, r3
        scan_result->body.mac[0], scan_result->body.mac[1],
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    printf(
 80092b4:	4619      	mov	r1, r3
        scan_result->body.mac[0], scan_result->body.mac[1],
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
    printf(
 80092bc:	4618      	mov	r0, r3
        scan_result->body.mac[2], scan_result->body.mac[3],
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
    printf(
 80092c4:	461c      	mov	r4, r3
        scan_result->body.mac[2], scan_result->body.mac[3],
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
    printf(
 80092cc:	461d      	mov	r5, r3
        scan_result->body.mac[4], scan_result->body.mac[5],
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    printf(
 80092d4:	461e      	mov	r6, r3
        scan_result->body.mac[4], scan_result->body.mac[5],
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
    printf(
 80092dc:	603b      	str	r3, [r7, #0]
        scan_result->body.ssid_def.ssid);
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	3308      	adds	r3, #8
    printf(
 80092e2:	9307      	str	r3, [sp, #28]
 80092e4:	683b      	ldr	r3, [r7, #0]
 80092e6:	9306      	str	r3, [sp, #24]
 80092e8:	9605      	str	r6, [sp, #20]
 80092ea:	9504      	str	r5, [sp, #16]
 80092ec:	9403      	str	r4, [sp, #12]
 80092ee:	9002      	str	r0, [sp, #8]
 80092f0:	9101      	str	r1, [sp, #4]
 80092f2:	9200      	str	r2, [sp, #0]
 80092f4:	4643      	mov	r3, r8
 80092f6:	4672      	mov	r2, lr
 80092f8:	4661      	mov	r1, ip
 80092fa:	483a      	ldr	r0, [pc, #232]	; (80093e4 <sl_wfx_scan_result_callback+0x180>)
 80092fc:	f012 f8c0 	bl	801b480 <iprintf>
  }

  if (scan_count <= SL_WFX_MAX_SCAN_RESULTS) {
 8009300:	4b36      	ldr	r3, [pc, #216]	; (80093dc <sl_wfx_scan_result_callback+0x178>)
 8009302:	781b      	ldrb	r3, [r3, #0]
 8009304:	2b32      	cmp	r3, #50	; 0x32
 8009306:	d863      	bhi.n	80093d0 <sl_wfx_scan_result_callback+0x16c>
    scan_list[scan_count - 1].ssid_def = scan_result->body.ssid_def;
 8009308:	4b34      	ldr	r3, [pc, #208]	; (80093dc <sl_wfx_scan_result_callback+0x178>)
 800930a:	781b      	ldrb	r3, [r3, #0]
 800930c:	1e5a      	subs	r2, r3, #1
 800930e:	4936      	ldr	r1, [pc, #216]	; (80093e8 <sl_wfx_scan_result_callback+0x184>)
 8009310:	4613      	mov	r3, r2
 8009312:	005b      	lsls	r3, r3, #1
 8009314:	4413      	add	r3, r2
 8009316:	011b      	lsls	r3, r3, #4
 8009318:	1a9b      	subs	r3, r3, r2
 800931a:	18ca      	adds	r2, r1, r3
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	3304      	adds	r3, #4
 8009320:	4610      	mov	r0, r2
 8009322:	f103 0420 	add.w	r4, r3, #32
 8009326:	4602      	mov	r2, r0
 8009328:	4619      	mov	r1, r3
 800932a:	f8d1 c000 	ldr.w	ip, [r1]
 800932e:	684e      	ldr	r6, [r1, #4]
 8009330:	688d      	ldr	r5, [r1, #8]
 8009332:	68c9      	ldr	r1, [r1, #12]
 8009334:	f8c2 c000 	str.w	ip, [r2]
 8009338:	6056      	str	r6, [r2, #4]
 800933a:	6095      	str	r5, [r2, #8]
 800933c:	60d1      	str	r1, [r2, #12]
 800933e:	3310      	adds	r3, #16
 8009340:	3010      	adds	r0, #16
 8009342:	42a3      	cmp	r3, r4
 8009344:	d1ef      	bne.n	8009326 <sl_wfx_scan_result_callback+0xc2>
 8009346:	4602      	mov	r2, r0
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	6013      	str	r3, [r2, #0]
    scan_list[scan_count - 1].channel = scan_result->body.channel;
 800934c:	4b23      	ldr	r3, [pc, #140]	; (80093dc <sl_wfx_scan_result_callback+0x178>)
 800934e:	781b      	ldrb	r3, [r3, #0]
 8009350:	1e5a      	subs	r2, r3, #1
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009356:	b298      	uxth	r0, r3
 8009358:	4923      	ldr	r1, [pc, #140]	; (80093e8 <sl_wfx_scan_result_callback+0x184>)
 800935a:	4613      	mov	r3, r2
 800935c:	005b      	lsls	r3, r3, #1
 800935e:	4413      	add	r3, r2
 8009360:	011b      	lsls	r3, r3, #4
 8009362:	1a9b      	subs	r3, r3, r2
 8009364:	440b      	add	r3, r1
 8009366:	332a      	adds	r3, #42	; 0x2a
 8009368:	4602      	mov	r2, r0
 800936a:	801a      	strh	r2, [r3, #0]
    scan_list[scan_count - 1].security_mode = scan_result->body.security_mode;
 800936c:	4b1b      	ldr	r3, [pc, #108]	; (80093dc <sl_wfx_scan_result_callback+0x178>)
 800936e:	781b      	ldrb	r3, [r3, #0]
 8009370:	1e5a      	subs	r2, r3, #1
 8009372:	491d      	ldr	r1, [pc, #116]	; (80093e8 <sl_wfx_scan_result_callback+0x184>)
 8009374:	4613      	mov	r3, r2
 8009376:	005b      	lsls	r3, r3, #1
 8009378:	4413      	add	r3, r2
 800937a:	011b      	lsls	r3, r3, #4
 800937c:	1a9b      	subs	r3, r3, r2
 800937e:	440b      	add	r3, r1
 8009380:	332c      	adds	r3, #44	; 0x2c
 8009382:	687a      	ldr	r2, [r7, #4]
 8009384:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 8009388:	701a      	strb	r2, [r3, #0]
    scan_list[scan_count - 1].rcpi = scan_result->body.rcpi;
 800938a:	4b14      	ldr	r3, [pc, #80]	; (80093dc <sl_wfx_scan_result_callback+0x178>)
 800938c:	781b      	ldrb	r3, [r3, #0]
 800938e:	1e5a      	subs	r2, r3, #1
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8009394:	b298      	uxth	r0, r3
 8009396:	4914      	ldr	r1, [pc, #80]	; (80093e8 <sl_wfx_scan_result_callback+0x184>)
 8009398:	4613      	mov	r3, r2
 800939a:	005b      	lsls	r3, r3, #1
 800939c:	4413      	add	r3, r2
 800939e:	011b      	lsls	r3, r3, #4
 80093a0:	1a9b      	subs	r3, r3, r2
 80093a2:	440b      	add	r3, r1
 80093a4:	3328      	adds	r3, #40	; 0x28
 80093a6:	4602      	mov	r2, r0
 80093a8:	f8a3 2005 	strh.w	r2, [r3, #5]
    memcpy(scan_list[scan_count - 1].mac, scan_result->body.mac, 6);
 80093ac:	4b0b      	ldr	r3, [pc, #44]	; (80093dc <sl_wfx_scan_result_callback+0x178>)
 80093ae:	781b      	ldrb	r3, [r3, #0]
 80093b0:	1e5a      	subs	r2, r3, #1
 80093b2:	4613      	mov	r3, r2
 80093b4:	005b      	lsls	r3, r3, #1
 80093b6:	4413      	add	r3, r2
 80093b8:	011b      	lsls	r3, r3, #4
 80093ba:	1a9b      	subs	r3, r3, r2
 80093bc:	3320      	adds	r3, #32
 80093be:	4a0a      	ldr	r2, [pc, #40]	; (80093e8 <sl_wfx_scan_result_callback+0x184>)
 80093c0:	4413      	add	r3, r2
 80093c2:	1d18      	adds	r0, r3, #4
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	3328      	adds	r3, #40	; 0x28
 80093c8:	2206      	movs	r2, #6
 80093ca:	4619      	mov	r1, r3
 80093cc:	f011 fae2 	bl	801a994 <memcpy>
  }
}
 80093d0:	bf00      	nop
 80093d2:	3708      	adds	r7, #8
 80093d4:	46bd      	mov	sp, r7
 80093d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093da:	bf00      	nop
 80093dc:	200011ce 	.word	0x200011ce
 80093e0:	200000b5 	.word	0x200000b5
 80093e4:	0801df30 	.word	0x0801df30
 80093e8:	200008a0 	.word	0x200008a0

080093ec <sl_wfx_scan_complete_callback>:

/**************************************************************************//**
 * Callback for scan complete
 *****************************************************************************/
void sl_wfx_scan_complete_callback (sl_wfx_scan_complete_ind_t *scan_complete) {
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b084      	sub	sp, #16
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
  void * buffer;
  sl_status_t status;

  scan_count_web = scan_count;
 80093f4:	4b14      	ldr	r3, [pc, #80]	; (8009448 <sl_wfx_scan_complete_callback+0x5c>)
 80093f6:	781a      	ldrb	r2, [r3, #0]
 80093f8:	4b14      	ldr	r3, [pc, #80]	; (800944c <sl_wfx_scan_complete_callback+0x60>)
 80093fa:	701a      	strb	r2, [r3, #0]
  scan_count = 0;
 80093fc:	4b12      	ldr	r3, [pc, #72]	; (8009448 <sl_wfx_scan_complete_callback+0x5c>)
 80093fe:	2200      	movs	r2, #0
 8009400:	701a      	strb	r2, [r3, #0]

  status = sl_wfx_host_allocate_buffer(&buffer,
                                       SL_WFX_RX_FRAME_BUFFER,
                                       scan_complete->header.length);
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	881b      	ldrh	r3, [r3, #0]
 8009406:	b29b      	uxth	r3, r3
  status = sl_wfx_host_allocate_buffer(&buffer,
 8009408:	461a      	mov	r2, r3
 800940a:	f107 0308 	add.w	r3, r7, #8
 800940e:	2101      	movs	r1, #1
 8009410:	4618      	mov	r0, r3
 8009412:	f7ff feb9 	bl	8009188 <sl_wfx_host_allocate_buffer>
 8009416:	60f8      	str	r0, [r7, #12]
  if (status == SL_STATUS_OK) {
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d10f      	bne.n	800943e <sl_wfx_scan_complete_callback+0x52>
    memcpy(buffer, (void *)scan_complete, scan_complete->header.length);
 800941e:	68b8      	ldr	r0, [r7, #8]
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	881b      	ldrh	r3, [r3, #0]
 8009424:	b29b      	uxth	r3, r3
 8009426:	461a      	mov	r2, r3
 8009428:	6879      	ldr	r1, [r7, #4]
 800942a:	f011 fab3 	bl	801a994 <memcpy>
    xQueueSend(wifi_event_queue, &buffer, 0);
 800942e:	4b08      	ldr	r3, [pc, #32]	; (8009450 <sl_wfx_scan_complete_callback+0x64>)
 8009430:	6818      	ldr	r0, [r3, #0]
 8009432:	f107 0108 	add.w	r1, r7, #8
 8009436:	2300      	movs	r3, #0
 8009438:	2200      	movs	r2, #0
 800943a:	f001 fa4b 	bl	800a8d4 <xQueueGenericSend>
  }
}
 800943e:	bf00      	nop
 8009440:	3710      	adds	r7, #16
 8009442:	46bd      	mov	sp, r7
 8009444:	bd80      	pop	{r7, pc}
 8009446:	bf00      	nop
 8009448:	200011ce 	.word	0x200011ce
 800944c:	200011cf 	.word	0x200011cf
 8009450:	200011e8 	.word	0x200011e8

08009454 <sl_wfx_connect_callback>:

/**************************************************************************//**
 * Callback when station connects
 *****************************************************************************/
void sl_wfx_connect_callback (sl_wfx_connect_ind_t *connect) {
 8009454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009456:	b085      	sub	sp, #20
 8009458:	af00      	add	r7, sp, #0
 800945a:	6078      	str	r0, [r7, #4]
  void *buffer;
  sl_status_t status;

  switch(connect->body.status){
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	685b      	ldr	r3, [r3, #4]
 8009460:	2b0a      	cmp	r3, #10
 8009462:	f200 80d3 	bhi.w	800960c <sl_wfx_connect_callback+0x1b8>
 8009466:	a201      	add	r2, pc, #4	; (adr r2, 800946c <sl_wfx_connect_callback+0x18>)
 8009468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800946c:	08009499 	.word	0x08009499
 8009470:	0800960d 	.word	0x0800960d
 8009474:	0800960d 	.word	0x0800960d
 8009478:	0800960d 	.word	0x0800960d
 800947c:	0800960d 	.word	0x0800960d
 8009480:	0800960d 	.word	0x0800960d
 8009484:	080094f7 	.word	0x080094f7
 8009488:	0800953b 	.word	0x0800953b
 800948c:	08009569 	.word	0x08009569
 8009490:	08009597 	.word	0x08009597
 8009494:	080095d3 	.word	0x080095d3
  case WFM_STATUS_SUCCESS:
    {
      printf("Connected to WiFi: %s \r\n", WLAN_SSID_DEFAULT);
 8009498:	496a      	ldr	r1, [pc, #424]	; (8009644 <sl_wfx_connect_callback+0x1f0>)
 800949a:	486b      	ldr	r0, [pc, #428]	; (8009648 <sl_wfx_connect_callback+0x1f4>)
 800949c:	f011 fff0 	bl	801b480 <iprintf>
      sl_wfx_context->state |= SL_WFX_STA_INTERFACE_CONNECTED;
 80094a0:	4b6a      	ldr	r3, [pc, #424]	; (800964c <sl_wfx_connect_callback+0x1f8>)
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	f893 2222 	ldrb.w	r2, [r3, #546]	; 0x222
 80094a8:	4b68      	ldr	r3, [pc, #416]	; (800964c <sl_wfx_connect_callback+0x1f8>)
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	f042 0202 	orr.w	r2, r2, #2
 80094b0:	b2d2      	uxtb	r2, r2
 80094b2:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222

      status = sl_wfx_host_allocate_buffer(&buffer,
                                           SL_WFX_RX_FRAME_BUFFER,
                                           connect->header.length);
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	881b      	ldrh	r3, [r3, #0]
 80094ba:	b29b      	uxth	r3, r3
      status = sl_wfx_host_allocate_buffer(&buffer,
 80094bc:	461a      	mov	r2, r3
 80094be:	f107 0308 	add.w	r3, r7, #8
 80094c2:	2101      	movs	r1, #1
 80094c4:	4618      	mov	r0, r3
 80094c6:	f7ff fe5f 	bl	8009188 <sl_wfx_host_allocate_buffer>
 80094ca:	60f8      	str	r0, [r7, #12]
      if (status == SL_STATUS_OK) {
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	f040 80b3 	bne.w	800963a <sl_wfx_connect_callback+0x1e6>
        memcpy(buffer, (void *)connect, connect->header.length);
 80094d4:	68b8      	ldr	r0, [r7, #8]
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	881b      	ldrh	r3, [r3, #0]
 80094da:	b29b      	uxth	r3, r3
 80094dc:	461a      	mov	r2, r3
 80094de:	6879      	ldr	r1, [r7, #4]
 80094e0:	f011 fa58 	bl	801a994 <memcpy>
        xQueueSend(wifi_event_queue, &buffer, 0);
 80094e4:	4b5a      	ldr	r3, [pc, #360]	; (8009650 <sl_wfx_connect_callback+0x1fc>)
 80094e6:	6818      	ldr	r0, [r3, #0]
 80094e8:	f107 0108 	add.w	r1, r7, #8
 80094ec:	2300      	movs	r3, #0
 80094ee:	2200      	movs	r2, #0
 80094f0:	f001 f9f0 	bl	800a8d4 <xQueueGenericSend>
      }
      break;
 80094f4:	e0a1      	b.n	800963a <sl_wfx_connect_callback+0x1e6>
    }
  case WFM_STATUS_NO_MATCHING_AP:
    {
      strcpy(event_log, "Connection failed, access point not found");
 80094f6:	4b57      	ldr	r3, [pc, #348]	; (8009654 <sl_wfx_connect_callback+0x200>)
 80094f8:	4a57      	ldr	r2, [pc, #348]	; (8009658 <sl_wfx_connect_callback+0x204>)
 80094fa:	4614      	mov	r4, r2
 80094fc:	469c      	mov	ip, r3
 80094fe:	f104 0e20 	add.w	lr, r4, #32
 8009502:	4665      	mov	r5, ip
 8009504:	4626      	mov	r6, r4
 8009506:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8009508:	6028      	str	r0, [r5, #0]
 800950a:	6069      	str	r1, [r5, #4]
 800950c:	60aa      	str	r2, [r5, #8]
 800950e:	60eb      	str	r3, [r5, #12]
 8009510:	3410      	adds	r4, #16
 8009512:	f10c 0c10 	add.w	ip, ip, #16
 8009516:	4574      	cmp	r4, lr
 8009518:	d1f3      	bne.n	8009502 <sl_wfx_connect_callback+0xae>
 800951a:	4662      	mov	r2, ip
 800951c:	4623      	mov	r3, r4
 800951e:	cb03      	ldmia	r3!, {r0, r1}
 8009520:	6010      	str	r0, [r2, #0]
 8009522:	6051      	str	r1, [r2, #4]
 8009524:	881b      	ldrh	r3, [r3, #0]
 8009526:	8113      	strh	r3, [r2, #8]
      printf(event_log);
 8009528:	484a      	ldr	r0, [pc, #296]	; (8009654 <sl_wfx_connect_callback+0x200>)
 800952a:	f011 ffa9 	bl	801b480 <iprintf>
      printf("\r\n");
 800952e:	484b      	ldr	r0, [pc, #300]	; (800965c <sl_wfx_connect_callback+0x208>)
 8009530:	f012 f82c 	bl	801b58c <puts>
      wifi_autoconnexion_init();
 8009534:	f7f8 fa8c 	bl	8001a50 <wifi_autoconnexion_init>
      break;
 8009538:	e080      	b.n	800963c <sl_wfx_connect_callback+0x1e8>
    }
  case WFM_STATUS_CONNECTION_ABORTED:
    {
      strcpy(event_log, "Connection aborted");
 800953a:	4a46      	ldr	r2, [pc, #280]	; (8009654 <sl_wfx_connect_callback+0x200>)
 800953c:	4b48      	ldr	r3, [pc, #288]	; (8009660 <sl_wfx_connect_callback+0x20c>)
 800953e:	4615      	mov	r5, r2
 8009540:	461c      	mov	r4, r3
 8009542:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009544:	6028      	str	r0, [r5, #0]
 8009546:	6069      	str	r1, [r5, #4]
 8009548:	60aa      	str	r2, [r5, #8]
 800954a:	60eb      	str	r3, [r5, #12]
 800954c:	8823      	ldrh	r3, [r4, #0]
 800954e:	78a2      	ldrb	r2, [r4, #2]
 8009550:	822b      	strh	r3, [r5, #16]
 8009552:	4613      	mov	r3, r2
 8009554:	74ab      	strb	r3, [r5, #18]
      printf(event_log);
 8009556:	483f      	ldr	r0, [pc, #252]	; (8009654 <sl_wfx_connect_callback+0x200>)
 8009558:	f011 ff92 	bl	801b480 <iprintf>
      printf("\r\n");
 800955c:	483f      	ldr	r0, [pc, #252]	; (800965c <sl_wfx_connect_callback+0x208>)
 800955e:	f012 f815 	bl	801b58c <puts>
      wifi_autoconnexion_init();
 8009562:	f7f8 fa75 	bl	8001a50 <wifi_autoconnexion_init>
      break;
 8009566:	e069      	b.n	800963c <sl_wfx_connect_callback+0x1e8>
    }
  case WFM_STATUS_CONNECTION_TIMEOUT:
    {
      strcpy(event_log, "Connection timeout");
 8009568:	4a3a      	ldr	r2, [pc, #232]	; (8009654 <sl_wfx_connect_callback+0x200>)
 800956a:	4b3e      	ldr	r3, [pc, #248]	; (8009664 <sl_wfx_connect_callback+0x210>)
 800956c:	4615      	mov	r5, r2
 800956e:	461c      	mov	r4, r3
 8009570:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009572:	6028      	str	r0, [r5, #0]
 8009574:	6069      	str	r1, [r5, #4]
 8009576:	60aa      	str	r2, [r5, #8]
 8009578:	60eb      	str	r3, [r5, #12]
 800957a:	8823      	ldrh	r3, [r4, #0]
 800957c:	78a2      	ldrb	r2, [r4, #2]
 800957e:	822b      	strh	r3, [r5, #16]
 8009580:	4613      	mov	r3, r2
 8009582:	74ab      	strb	r3, [r5, #18]
      printf(event_log);
 8009584:	4833      	ldr	r0, [pc, #204]	; (8009654 <sl_wfx_connect_callback+0x200>)
 8009586:	f011 ff7b 	bl	801b480 <iprintf>
      printf("\r\n");
 800958a:	4834      	ldr	r0, [pc, #208]	; (800965c <sl_wfx_connect_callback+0x208>)
 800958c:	f011 fffe 	bl	801b58c <puts>
      wifi_autoconnexion_init();
 8009590:	f7f8 fa5e 	bl	8001a50 <wifi_autoconnexion_init>
      break;
 8009594:	e052      	b.n	800963c <sl_wfx_connect_callback+0x1e8>
    }
  case WFM_STATUS_CONNECTION_REJECTED_BY_AP:
    {
      strcpy(event_log, "Connection rejected by the access point");
 8009596:	4b2f      	ldr	r3, [pc, #188]	; (8009654 <sl_wfx_connect_callback+0x200>)
 8009598:	4a33      	ldr	r2, [pc, #204]	; (8009668 <sl_wfx_connect_callback+0x214>)
 800959a:	4614      	mov	r4, r2
 800959c:	469c      	mov	ip, r3
 800959e:	f104 0e20 	add.w	lr, r4, #32
 80095a2:	4665      	mov	r5, ip
 80095a4:	4626      	mov	r6, r4
 80095a6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80095a8:	6028      	str	r0, [r5, #0]
 80095aa:	6069      	str	r1, [r5, #4]
 80095ac:	60aa      	str	r2, [r5, #8]
 80095ae:	60eb      	str	r3, [r5, #12]
 80095b0:	3410      	adds	r4, #16
 80095b2:	f10c 0c10 	add.w	ip, ip, #16
 80095b6:	4574      	cmp	r4, lr
 80095b8:	d1f3      	bne.n	80095a2 <sl_wfx_connect_callback+0x14e>
 80095ba:	4662      	mov	r2, ip
 80095bc:	4623      	mov	r3, r4
 80095be:	cb03      	ldmia	r3!, {r0, r1}
 80095c0:	6010      	str	r0, [r2, #0]
 80095c2:	6051      	str	r1, [r2, #4]
      printf(event_log);
 80095c4:	4823      	ldr	r0, [pc, #140]	; (8009654 <sl_wfx_connect_callback+0x200>)
 80095c6:	f011 ff5b 	bl	801b480 <iprintf>
      printf("\r\n");
 80095ca:	4824      	ldr	r0, [pc, #144]	; (800965c <sl_wfx_connect_callback+0x208>)
 80095cc:	f011 ffde 	bl	801b58c <puts>
      break;
 80095d0:	e034      	b.n	800963c <sl_wfx_connect_callback+0x1e8>
    }
  case WFM_STATUS_CONNECTION_AUTH_FAILURE:
    {
      strcpy(event_log, "Connection authentication failure");
 80095d2:	4b20      	ldr	r3, [pc, #128]	; (8009654 <sl_wfx_connect_callback+0x200>)
 80095d4:	4a25      	ldr	r2, [pc, #148]	; (800966c <sl_wfx_connect_callback+0x218>)
 80095d6:	4614      	mov	r4, r2
 80095d8:	469c      	mov	ip, r3
 80095da:	f104 0e20 	add.w	lr, r4, #32
 80095de:	4665      	mov	r5, ip
 80095e0:	4626      	mov	r6, r4
 80095e2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80095e4:	6028      	str	r0, [r5, #0]
 80095e6:	6069      	str	r1, [r5, #4]
 80095e8:	60aa      	str	r2, [r5, #8]
 80095ea:	60eb      	str	r3, [r5, #12]
 80095ec:	3410      	adds	r4, #16
 80095ee:	f10c 0c10 	add.w	ip, ip, #16
 80095f2:	4574      	cmp	r4, lr
 80095f4:	d1f3      	bne.n	80095de <sl_wfx_connect_callback+0x18a>
 80095f6:	4662      	mov	r2, ip
 80095f8:	4623      	mov	r3, r4
 80095fa:	881b      	ldrh	r3, [r3, #0]
 80095fc:	8013      	strh	r3, [r2, #0]
      printf(event_log);
 80095fe:	4815      	ldr	r0, [pc, #84]	; (8009654 <sl_wfx_connect_callback+0x200>)
 8009600:	f011 ff3e 	bl	801b480 <iprintf>
      printf("\r\n");
 8009604:	4815      	ldr	r0, [pc, #84]	; (800965c <sl_wfx_connect_callback+0x208>)
 8009606:	f011 ffc1 	bl	801b58c <puts>
      break;
 800960a:	e017      	b.n	800963c <sl_wfx_connect_callback+0x1e8>
    }
  default:
    {
      strcpy(event_log, "Connection attempt error");
 800960c:	4a11      	ldr	r2, [pc, #68]	; (8009654 <sl_wfx_connect_callback+0x200>)
 800960e:	4b18      	ldr	r3, [pc, #96]	; (8009670 <sl_wfx_connect_callback+0x21c>)
 8009610:	4615      	mov	r5, r2
 8009612:	461c      	mov	r4, r3
 8009614:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009616:	6028      	str	r0, [r5, #0]
 8009618:	6069      	str	r1, [r5, #4]
 800961a:	60aa      	str	r2, [r5, #8]
 800961c:	60eb      	str	r3, [r5, #12]
 800961e:	cc03      	ldmia	r4!, {r0, r1}
 8009620:	6128      	str	r0, [r5, #16]
 8009622:	6169      	str	r1, [r5, #20]
 8009624:	7823      	ldrb	r3, [r4, #0]
 8009626:	762b      	strb	r3, [r5, #24]
      printf(event_log);
 8009628:	480a      	ldr	r0, [pc, #40]	; (8009654 <sl_wfx_connect_callback+0x200>)
 800962a:	f011 ff29 	bl	801b480 <iprintf>
      printf("\r\n");
 800962e:	480b      	ldr	r0, [pc, #44]	; (800965c <sl_wfx_connect_callback+0x208>)
 8009630:	f011 ffac 	bl	801b58c <puts>
      wifi_autoconnexion_init();
 8009634:	f7f8 fa0c 	bl	8001a50 <wifi_autoconnexion_init>
    }
  }
}
 8009638:	e000      	b.n	800963c <sl_wfx_connect_callback+0x1e8>
      break;
 800963a:	bf00      	nop
}
 800963c:	bf00      	nop
 800963e:	3714      	adds	r7, #20
 8009640:	46bd      	mov	sp, r7
 8009642:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009644:	0801df68 	.word	0x0801df68
 8009648:	0801df70 	.word	0x0801df70
 800964c:	20000898 	.word	0x20000898
 8009650:	200011e8 	.word	0x200011e8
 8009654:	200007b8 	.word	0x200007b8
 8009658:	0801df8c 	.word	0x0801df8c
 800965c:	0801def8 	.word	0x0801def8
 8009660:	0801dfb8 	.word	0x0801dfb8
 8009664:	0801dfcc 	.word	0x0801dfcc
 8009668:	0801dfe0 	.word	0x0801dfe0
 800966c:	0801e008 	.word	0x0801e008
 8009670:	0801e02c 	.word	0x0801e02c

08009674 <sl_wfx_disconnect_callback>:

/**************************************************************************//**
 * Callback for station disconnect
 *****************************************************************************/
void sl_wfx_disconnect_callback (sl_wfx_disconnect_ind_t *disconnect) {
 8009674:	b580      	push	{r7, lr}
 8009676:	b084      	sub	sp, #16
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
  void *buffer;
  sl_status_t status;

  printf("Disconnected %d\r\n", disconnect->body.reason);
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	895b      	ldrh	r3, [r3, #10]
 8009680:	b29b      	uxth	r3, r3
 8009682:	4619      	mov	r1, r3
 8009684:	4817      	ldr	r0, [pc, #92]	; (80096e4 <sl_wfx_disconnect_callback+0x70>)
 8009686:	f011 fefb 	bl	801b480 <iprintf>
  sl_wfx_context->state &= ~SL_WFX_STA_INTERFACE_CONNECTED;
 800968a:	4b17      	ldr	r3, [pc, #92]	; (80096e8 <sl_wfx_disconnect_callback+0x74>)
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	f893 2222 	ldrb.w	r2, [r3, #546]	; 0x222
 8009692:	4b15      	ldr	r3, [pc, #84]	; (80096e8 <sl_wfx_disconnect_callback+0x74>)
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	f022 0202 	bic.w	r2, r2, #2
 800969a:	b2d2      	uxtb	r2, r2
 800969c:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222

  status = sl_wfx_host_allocate_buffer(&buffer,
                                       SL_WFX_RX_FRAME_BUFFER,
                                       disconnect->header.length);
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	881b      	ldrh	r3, [r3, #0]
 80096a4:	b29b      	uxth	r3, r3
  status = sl_wfx_host_allocate_buffer(&buffer,
 80096a6:	461a      	mov	r2, r3
 80096a8:	f107 0308 	add.w	r3, r7, #8
 80096ac:	2101      	movs	r1, #1
 80096ae:	4618      	mov	r0, r3
 80096b0:	f7ff fd6a 	bl	8009188 <sl_wfx_host_allocate_buffer>
 80096b4:	60f8      	str	r0, [r7, #12]
  if (status == SL_STATUS_OK) {
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d10f      	bne.n	80096dc <sl_wfx_disconnect_callback+0x68>
    memcpy(buffer, (void *)disconnect, disconnect->header.length);
 80096bc:	68b8      	ldr	r0, [r7, #8]
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	881b      	ldrh	r3, [r3, #0]
 80096c2:	b29b      	uxth	r3, r3
 80096c4:	461a      	mov	r2, r3
 80096c6:	6879      	ldr	r1, [r7, #4]
 80096c8:	f011 f964 	bl	801a994 <memcpy>
    xQueueSend(wifi_event_queue, &buffer, 0);
 80096cc:	4b07      	ldr	r3, [pc, #28]	; (80096ec <sl_wfx_disconnect_callback+0x78>)
 80096ce:	6818      	ldr	r0, [r3, #0]
 80096d0:	f107 0108 	add.w	r1, r7, #8
 80096d4:	2300      	movs	r3, #0
 80096d6:	2200      	movs	r2, #0
 80096d8:	f001 f8fc 	bl	800a8d4 <xQueueGenericSend>
  }
}
 80096dc:	bf00      	nop
 80096de:	3710      	adds	r7, #16
 80096e0:	46bd      	mov	sp, r7
 80096e2:	bd80      	pop	{r7, pc}
 80096e4:	0801e048 	.word	0x0801e048
 80096e8:	20000898 	.word	0x20000898
 80096ec:	200011e8 	.word	0x200011e8

080096f0 <sl_wfx_start_ap_callback>:

/**************************************************************************//**
 * Callback for AP started
 *****************************************************************************/
void sl_wfx_start_ap_callback (sl_wfx_start_ap_ind_t *start_ap) {
 80096f0:	b5b0      	push	{r4, r5, r7, lr}
 80096f2:	b084      	sub	sp, #16
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	6078      	str	r0, [r7, #4]
  void *buffer;
  sl_status_t status;

  if (start_ap->body.status == 0) {
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	685b      	ldr	r3, [r3, #4]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d130      	bne.n	8009762 <sl_wfx_start_ap_callback+0x72>
    printf("AP started\r\n");
 8009700:	4820      	ldr	r0, [pc, #128]	; (8009784 <sl_wfx_start_ap_callback+0x94>)
 8009702:	f011 ff43 	bl	801b58c <puts>
    printf("Join the AP with SSID: %s\r\n", softap_ssid);
 8009706:	4920      	ldr	r1, [pc, #128]	; (8009788 <sl_wfx_start_ap_callback+0x98>)
 8009708:	4820      	ldr	r0, [pc, #128]	; (800978c <sl_wfx_start_ap_callback+0x9c>)
 800970a:	f011 feb9 	bl	801b480 <iprintf>
    sl_wfx_context->state |= SL_WFX_AP_INTERFACE_UP;
 800970e:	4b20      	ldr	r3, [pc, #128]	; (8009790 <sl_wfx_start_ap_callback+0xa0>)
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	f893 2222 	ldrb.w	r2, [r3, #546]	; 0x222
 8009716:	4b1e      	ldr	r3, [pc, #120]	; (8009790 <sl_wfx_start_ap_callback+0xa0>)
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	f042 0204 	orr.w	r2, r2, #4
 800971e:	b2d2      	uxtb	r2, r2
 8009720:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222

    status = sl_wfx_host_allocate_buffer(&buffer,
                                         SL_WFX_RX_FRAME_BUFFER,
                                         start_ap->header.length);
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	881b      	ldrh	r3, [r3, #0]
 8009728:	b29b      	uxth	r3, r3
    status = sl_wfx_host_allocate_buffer(&buffer,
 800972a:	461a      	mov	r2, r3
 800972c:	f107 0308 	add.w	r3, r7, #8
 8009730:	2101      	movs	r1, #1
 8009732:	4618      	mov	r0, r3
 8009734:	f7ff fd28 	bl	8009188 <sl_wfx_host_allocate_buffer>
 8009738:	60f8      	str	r0, [r7, #12]
    if (status == SL_STATUS_OK) {
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	2b00      	cmp	r3, #0
 800973e:	d11c      	bne.n	800977a <sl_wfx_start_ap_callback+0x8a>
      memcpy(buffer, (void *)start_ap, start_ap->header.length);
 8009740:	68b8      	ldr	r0, [r7, #8]
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	881b      	ldrh	r3, [r3, #0]
 8009746:	b29b      	uxth	r3, r3
 8009748:	461a      	mov	r2, r3
 800974a:	6879      	ldr	r1, [r7, #4]
 800974c:	f011 f922 	bl	801a994 <memcpy>
      xQueueSend(wifi_event_queue, &buffer, 0);
 8009750:	4b10      	ldr	r3, [pc, #64]	; (8009794 <sl_wfx_start_ap_callback+0xa4>)
 8009752:	6818      	ldr	r0, [r3, #0]
 8009754:	f107 0108 	add.w	r1, r7, #8
 8009758:	2300      	movs	r3, #0
 800975a:	2200      	movs	r2, #0
 800975c:	f001 f8ba 	bl	800a8d4 <xQueueGenericSend>
    }
  } else {
    printf("AP start failed\r\n");
    strcpy(event_log, "AP start failed");
  }
}
 8009760:	e00b      	b.n	800977a <sl_wfx_start_ap_callback+0x8a>
    printf("AP start failed\r\n");
 8009762:	480d      	ldr	r0, [pc, #52]	; (8009798 <sl_wfx_start_ap_callback+0xa8>)
 8009764:	f011 ff12 	bl	801b58c <puts>
    strcpy(event_log, "AP start failed");
 8009768:	4a0c      	ldr	r2, [pc, #48]	; (800979c <sl_wfx_start_ap_callback+0xac>)
 800976a:	4b0d      	ldr	r3, [pc, #52]	; (80097a0 <sl_wfx_start_ap_callback+0xb0>)
 800976c:	4614      	mov	r4, r2
 800976e:	461d      	mov	r5, r3
 8009770:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009772:	6020      	str	r0, [r4, #0]
 8009774:	6061      	str	r1, [r4, #4]
 8009776:	60a2      	str	r2, [r4, #8]
 8009778:	60e3      	str	r3, [r4, #12]
}
 800977a:	bf00      	nop
 800977c:	3710      	adds	r7, #16
 800977e:	46bd      	mov	sp, r7
 8009780:	bdb0      	pop	{r4, r5, r7, pc}
 8009782:	bf00      	nop
 8009784:	0801e05c 	.word	0x0801e05c
 8009788:	20000074 	.word	0x20000074
 800978c:	0801e068 	.word	0x0801e068
 8009790:	20000898 	.word	0x20000898
 8009794:	200011e8 	.word	0x200011e8
 8009798:	0801e084 	.word	0x0801e084
 800979c:	200007b8 	.word	0x200007b8
 80097a0:	0801e098 	.word	0x0801e098

080097a4 <sl_wfx_stop_ap_callback>:


/**************************************************************************//**
 * Callback for AP stopped
 *****************************************************************************/
void sl_wfx_stop_ap_callback(sl_wfx_stop_ap_ind_t *stop_ap) {
 80097a4:	b580      	push	{r7, lr}
 80097a6:	b084      	sub	sp, #16
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	6078      	str	r0, [r7, #4]
  void *buffer;
  sl_status_t status;

  printf("SoftAP stopped\r\n");
 80097ac:	4818      	ldr	r0, [pc, #96]	; (8009810 <sl_wfx_stop_ap_callback+0x6c>)
 80097ae:	f011 feed 	bl	801b58c <puts>
  dhcpserver_clear_stored_mac();
 80097b2:	f7f8 fd6b 	bl	800228c <dhcpserver_clear_stored_mac>
  sl_wfx_context->state &= ~SL_WFX_AP_INTERFACE_UP;
 80097b6:	4b17      	ldr	r3, [pc, #92]	; (8009814 <sl_wfx_stop_ap_callback+0x70>)
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	f893 2222 	ldrb.w	r2, [r3, #546]	; 0x222
 80097be:	4b15      	ldr	r3, [pc, #84]	; (8009814 <sl_wfx_stop_ap_callback+0x70>)
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	f022 0204 	bic.w	r2, r2, #4
 80097c6:	b2d2      	uxtb	r2, r2
 80097c8:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222

  status = sl_wfx_host_allocate_buffer(&buffer,
                                       SL_WFX_RX_FRAME_BUFFER,
                                       stop_ap->length);
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	881b      	ldrh	r3, [r3, #0]
 80097d0:	b29b      	uxth	r3, r3
  status = sl_wfx_host_allocate_buffer(&buffer,
 80097d2:	461a      	mov	r2, r3
 80097d4:	f107 0308 	add.w	r3, r7, #8
 80097d8:	2101      	movs	r1, #1
 80097da:	4618      	mov	r0, r3
 80097dc:	f7ff fcd4 	bl	8009188 <sl_wfx_host_allocate_buffer>
 80097e0:	60f8      	str	r0, [r7, #12]
  if (status == SL_STATUS_OK) {
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d10f      	bne.n	8009808 <sl_wfx_stop_ap_callback+0x64>
    memcpy(buffer, (void *)stop_ap, stop_ap->length);
 80097e8:	68b8      	ldr	r0, [r7, #8]
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	881b      	ldrh	r3, [r3, #0]
 80097ee:	b29b      	uxth	r3, r3
 80097f0:	461a      	mov	r2, r3
 80097f2:	6879      	ldr	r1, [r7, #4]
 80097f4:	f011 f8ce 	bl	801a994 <memcpy>
    xQueueSend(wifi_event_queue, &buffer, 0);
 80097f8:	4b07      	ldr	r3, [pc, #28]	; (8009818 <sl_wfx_stop_ap_callback+0x74>)
 80097fa:	6818      	ldr	r0, [r3, #0]
 80097fc:	f107 0108 	add.w	r1, r7, #8
 8009800:	2300      	movs	r3, #0
 8009802:	2200      	movs	r2, #0
 8009804:	f001 f866 	bl	800a8d4 <xQueueGenericSend>
  }
}
 8009808:	bf00      	nop
 800980a:	3710      	adds	r7, #16
 800980c:	46bd      	mov	sp, r7
 800980e:	bd80      	pop	{r7, pc}
 8009810:	0801e0a8 	.word	0x0801e0a8
 8009814:	20000898 	.word	0x20000898
 8009818:	200011e8 	.word	0x200011e8

0800981c <sl_wfx_ap_client_connected_callback>:

/**************************************************************************//**
 * Callback for client connect to AP
 *****************************************************************************/
void sl_wfx_ap_client_connected_callback (sl_wfx_ap_client_connected_ind_t *ap_client_connected) {
 800981c:	b5b0      	push	{r4, r5, r7, lr}
 800981e:	b086      	sub	sp, #24
 8009820:	af04      	add	r7, sp, #16
 8009822:	6078      	str	r0, [r7, #4]
  printf("Client connected, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
         ap_client_connected->body.mac[0],
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	791b      	ldrb	r3, [r3, #4]
  printf("Client connected, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8009828:	4618      	mov	r0, r3
         ap_client_connected->body.mac[1],
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	795b      	ldrb	r3, [r3, #5]
  printf("Client connected, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800982e:	461c      	mov	r4, r3
         ap_client_connected->body.mac[2],
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	799b      	ldrb	r3, [r3, #6]
  printf("Client connected, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8009834:	461d      	mov	r5, r3
         ap_client_connected->body.mac[3],
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	79db      	ldrb	r3, [r3, #7]
  printf("Client connected, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800983a:	461a      	mov	r2, r3
         ap_client_connected->body.mac[4],
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	7a1b      	ldrb	r3, [r3, #8]
  printf("Client connected, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8009840:	4619      	mov	r1, r3
         ap_client_connected->body.mac[5]);
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	7a5b      	ldrb	r3, [r3, #9]
  printf("Client connected, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8009846:	9302      	str	r3, [sp, #8]
 8009848:	9101      	str	r1, [sp, #4]
 800984a:	9200      	str	r2, [sp, #0]
 800984c:	462b      	mov	r3, r5
 800984e:	4622      	mov	r2, r4
 8009850:	4601      	mov	r1, r0
 8009852:	480b      	ldr	r0, [pc, #44]	; (8009880 <sl_wfx_ap_client_connected_callback+0x64>)
 8009854:	f011 fe14 	bl	801b480 <iprintf>
  printf("Open a web browser and go to http://%d.%d.%d.%d\r\n",
 8009858:	4b0a      	ldr	r3, [pc, #40]	; (8009884 <sl_wfx_ap_client_connected_callback+0x68>)
 800985a:	781b      	ldrb	r3, [r3, #0]
 800985c:	4619      	mov	r1, r3
 800985e:	4b0a      	ldr	r3, [pc, #40]	; (8009888 <sl_wfx_ap_client_connected_callback+0x6c>)
 8009860:	781b      	ldrb	r3, [r3, #0]
 8009862:	461a      	mov	r2, r3
 8009864:	4b09      	ldr	r3, [pc, #36]	; (800988c <sl_wfx_ap_client_connected_callback+0x70>)
 8009866:	781b      	ldrb	r3, [r3, #0]
 8009868:	4618      	mov	r0, r3
 800986a:	4b09      	ldr	r3, [pc, #36]	; (8009890 <sl_wfx_ap_client_connected_callback+0x74>)
 800986c:	781b      	ldrb	r3, [r3, #0]
 800986e:	9300      	str	r3, [sp, #0]
 8009870:	4603      	mov	r3, r0
 8009872:	4808      	ldr	r0, [pc, #32]	; (8009894 <sl_wfx_ap_client_connected_callback+0x78>)
 8009874:	f011 fe04 	bl	801b480 <iprintf>
         ap_ip_addr0, ap_ip_addr1, ap_ip_addr2, ap_ip_addr3);
}
 8009878:	bf00      	nop
 800987a:	3708      	adds	r7, #8
 800987c:	46bd      	mov	sp, r7
 800987e:	bdb0      	pop	{r4, r5, r7, pc}
 8009880:	0801e0b8 	.word	0x0801e0b8
 8009884:	200000a2 	.word	0x200000a2
 8009888:	200000a3 	.word	0x200000a3
 800988c:	200000a4 	.word	0x200000a4
 8009890:	200000a5 	.word	0x200000a5
 8009894:	0801e0f0 	.word	0x0801e0f0

08009898 <sl_wfx_ap_client_rejected_callback>:

/**************************************************************************//**
 * Callback for client rejected from AP
 *****************************************************************************/
void sl_wfx_ap_client_rejected_callback (sl_wfx_ap_client_rejected_ind_t *ap_client_rejected) {
 8009898:	b5f0      	push	{r4, r5, r6, r7, lr}
 800989a:	b089      	sub	sp, #36	; 0x24
 800989c:	af04      	add	r7, sp, #16
 800989e:	6078      	str	r0, [r7, #4]
  struct eth_addr mac_addr;
  
  memcpy(&mac_addr, ap_client_rejected->body.mac, SL_WFX_BSSID_SIZE);
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	1d1a      	adds	r2, r3, #4
 80098a4:	f107 0308 	add.w	r3, r7, #8
 80098a8:	6810      	ldr	r0, [r2, #0]
 80098aa:	6018      	str	r0, [r3, #0]
 80098ac:	8892      	ldrh	r2, [r2, #4]
 80098ae:	809a      	strh	r2, [r3, #4]
  dhcpserver_remove_mac(&mac_addr);
 80098b0:	f107 0308 	add.w	r3, r7, #8
 80098b4:	4618      	mov	r0, r3
 80098b6:	f7f8 fb2b 	bl	8001f10 <dhcpserver_remove_mac>
  printf("Client rejected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
         ap_client_rejected->body.reason,
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	895b      	ldrh	r3, [r3, #10]
 80098be:	b29b      	uxth	r3, r3
  printf("Client rejected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 80098c0:	461c      	mov	r4, r3
         ap_client_rejected->body.mac[0],
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	791b      	ldrb	r3, [r3, #4]
  printf("Client rejected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 80098c6:	461d      	mov	r5, r3
         ap_client_rejected->body.mac[1],
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	795b      	ldrb	r3, [r3, #5]
  printf("Client rejected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 80098cc:	461e      	mov	r6, r3
         ap_client_rejected->body.mac[2],
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	799b      	ldrb	r3, [r3, #6]
  printf("Client rejected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 80098d2:	461a      	mov	r2, r3
         ap_client_rejected->body.mac[3],
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	79db      	ldrb	r3, [r3, #7]
  printf("Client rejected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 80098d8:	4619      	mov	r1, r3
         ap_client_rejected->body.mac[4],
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	7a1b      	ldrb	r3, [r3, #8]
  printf("Client rejected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 80098de:	4618      	mov	r0, r3
         ap_client_rejected->body.mac[5]);
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	7a5b      	ldrb	r3, [r3, #9]
  printf("Client rejected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 80098e4:	9303      	str	r3, [sp, #12]
 80098e6:	9002      	str	r0, [sp, #8]
 80098e8:	9101      	str	r1, [sp, #4]
 80098ea:	9200      	str	r2, [sp, #0]
 80098ec:	4633      	mov	r3, r6
 80098ee:	462a      	mov	r2, r5
 80098f0:	4621      	mov	r1, r4
 80098f2:	4803      	ldr	r0, [pc, #12]	; (8009900 <sl_wfx_ap_client_rejected_callback+0x68>)
 80098f4:	f011 fdc4 	bl	801b480 <iprintf>
}
 80098f8:	bf00      	nop
 80098fa:	3714      	adds	r7, #20
 80098fc:	46bd      	mov	sp, r7
 80098fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009900:	0801e124 	.word	0x0801e124

08009904 <sl_wfx_ap_client_disconnected_callback>:

/**************************************************************************//**
 * Callback for AP client disconnect
 *****************************************************************************/
void sl_wfx_ap_client_disconnected_callback (sl_wfx_ap_client_disconnected_ind_t *ap_client_disconnected) {
 8009904:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009906:	b089      	sub	sp, #36	; 0x24
 8009908:	af04      	add	r7, sp, #16
 800990a:	6078      	str	r0, [r7, #4]
  struct eth_addr mac_addr;
  
  memcpy(&mac_addr, ap_client_disconnected->body.mac, SL_WFX_BSSID_SIZE);
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	1d1a      	adds	r2, r3, #4
 8009910:	f107 0308 	add.w	r3, r7, #8
 8009914:	6810      	ldr	r0, [r2, #0]
 8009916:	6018      	str	r0, [r3, #0]
 8009918:	8892      	ldrh	r2, [r2, #4]
 800991a:	809a      	strh	r2, [r3, #4]
  dhcpserver_remove_mac(&mac_addr);
 800991c:	f107 0308 	add.w	r3, r7, #8
 8009920:	4618      	mov	r0, r3
 8009922:	f7f8 faf5 	bl	8001f10 <dhcpserver_remove_mac>
  printf("Client disconnected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
         ap_client_disconnected->body.reason,
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	895b      	ldrh	r3, [r3, #10]
 800992a:	b29b      	uxth	r3, r3
  printf("Client disconnected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800992c:	461c      	mov	r4, r3
         ap_client_disconnected->body.mac[0],
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	791b      	ldrb	r3, [r3, #4]
  printf("Client disconnected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8009932:	461d      	mov	r5, r3
         ap_client_disconnected->body.mac[1],
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	795b      	ldrb	r3, [r3, #5]
  printf("Client disconnected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8009938:	461e      	mov	r6, r3
         ap_client_disconnected->body.mac[2],
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	799b      	ldrb	r3, [r3, #6]
  printf("Client disconnected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800993e:	461a      	mov	r2, r3
         ap_client_disconnected->body.mac[3],
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	79db      	ldrb	r3, [r3, #7]
  printf("Client disconnected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8009944:	4619      	mov	r1, r3
         ap_client_disconnected->body.mac[4],
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	7a1b      	ldrb	r3, [r3, #8]
  printf("Client disconnected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800994a:	4618      	mov	r0, r3
         ap_client_disconnected->body.mac[5]);
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	7a5b      	ldrb	r3, [r3, #9]
  printf("Client disconnected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8009950:	9303      	str	r3, [sp, #12]
 8009952:	9002      	str	r0, [sp, #8]
 8009954:	9101      	str	r1, [sp, #4]
 8009956:	9200      	str	r2, [sp, #0]
 8009958:	4633      	mov	r3, r6
 800995a:	462a      	mov	r2, r5
 800995c:	4621      	mov	r1, r4
 800995e:	4803      	ldr	r0, [pc, #12]	; (800996c <sl_wfx_ap_client_disconnected_callback+0x68>)
 8009960:	f011 fd8e 	bl	801b480 <iprintf>
}
 8009964:	bf00      	nop
 8009966:	3714      	adds	r7, #20
 8009968:	46bd      	mov	sp, r7
 800996a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800996c:	0801e168 	.word	0x0801e168

08009970 <sl_wfx_ext_auth_callback>:

/**************************************************************************//**
 * Callback for External Authentication
 *****************************************************************************/
void sl_wfx_ext_auth_callback (sl_wfx_ext_auth_ind_t *ext_auth_indication) {
 8009970:	b580      	push	{r7, lr}
 8009972:	b084      	sub	sp, #16
 8009974:	af00      	add	r7, sp, #0
 8009976:	6078      	str	r0, [r7, #4]
  void *buffer;
  sl_status_t status;

  status = sl_wfx_host_allocate_buffer(&buffer,
                                       SL_WFX_RX_FRAME_BUFFER,
                                       ext_auth_indication->header.length);
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	881b      	ldrh	r3, [r3, #0]
 800997c:	b29b      	uxth	r3, r3
  status = sl_wfx_host_allocate_buffer(&buffer,
 800997e:	461a      	mov	r2, r3
 8009980:	f107 0308 	add.w	r3, r7, #8
 8009984:	2101      	movs	r1, #1
 8009986:	4618      	mov	r0, r3
 8009988:	f7ff fbfe 	bl	8009188 <sl_wfx_host_allocate_buffer>
 800998c:	60f8      	str	r0, [r7, #12]
  if (status == SL_STATUS_OK) {
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d10f      	bne.n	80099b4 <sl_wfx_ext_auth_callback+0x44>
    memcpy(buffer,
 8009994:	68b8      	ldr	r0, [r7, #8]
           (void *)ext_auth_indication,
           ext_auth_indication->header.length);
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	881b      	ldrh	r3, [r3, #0]
 800999a:	b29b      	uxth	r3, r3
    memcpy(buffer,
 800999c:	461a      	mov	r2, r3
 800999e:	6879      	ldr	r1, [r7, #4]
 80099a0:	f010 fff8 	bl	801a994 <memcpy>
    xQueueSend(wifi_event_queue, &buffer, 0);
 80099a4:	4b05      	ldr	r3, [pc, #20]	; (80099bc <sl_wfx_ext_auth_callback+0x4c>)
 80099a6:	6818      	ldr	r0, [r3, #0]
 80099a8:	f107 0108 	add.w	r1, r7, #8
 80099ac:	2300      	movs	r3, #0
 80099ae:	2200      	movs	r2, #0
 80099b0:	f000 ff90 	bl	800a8d4 <xQueueGenericSend>
  }
}
 80099b4:	bf00      	nop
 80099b6:	3710      	adds	r7, #16
 80099b8:	46bd      	mov	sp, r7
 80099ba:	bd80      	pop	{r7, pc}
 80099bc:	200011e8 	.word	0x200011e8

080099c0 <wifi_events_start>:
static void wifi_events_task_entry(void const * pvParameters);

/**************************************************************************//**
 * Start the Wi-Fi event handling task
 *****************************************************************************/
void wifi_events_start (void) {
 80099c0:	b5b0      	push	{r4, r5, r7, lr}
 80099c2:	b086      	sub	sp, #24
 80099c4:	af00      	add	r7, sp, #0
  sae_exch_sem = xSemaphoreCreateBinary();
 80099c6:	2203      	movs	r2, #3
 80099c8:	2100      	movs	r1, #0
 80099ca:	2001      	movs	r0, #1
 80099cc:	f000 fefa 	bl	800a7c4 <xQueueGenericCreate>
 80099d0:	4603      	mov	r3, r0
 80099d2:	4a0d      	ldr	r2, [pc, #52]	; (8009a08 <wifi_events_start+0x48>)
 80099d4:	6013      	str	r3, [r2, #0]
  osThreadDef(eventsTask, wifi_events_task_entry, osPriorityBelowNormal, 0, 1024);
 80099d6:	4b0d      	ldr	r3, [pc, #52]	; (8009a0c <wifi_events_start+0x4c>)
 80099d8:	1d3c      	adds	r4, r7, #4
 80099da:	461d      	mov	r5, r3
 80099dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80099de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80099e0:	682b      	ldr	r3, [r5, #0]
 80099e2:	6023      	str	r3, [r4, #0]
  osThreadCreate(osThread(eventsTask), NULL);
 80099e4:	1d3b      	adds	r3, r7, #4
 80099e6:	2100      	movs	r1, #0
 80099e8:	4618      	mov	r0, r3
 80099ea:	f000 fa70 	bl	8009ece <osThreadCreate>
  wifi_event_queue = xQueueCreate(SL_WFX_EVENTS_NB_MAX, sizeof(void *));
 80099ee:	2200      	movs	r2, #0
 80099f0:	2104      	movs	r1, #4
 80099f2:	200a      	movs	r0, #10
 80099f4:	f000 fee6 	bl	800a7c4 <xQueueGenericCreate>
 80099f8:	4603      	mov	r3, r0
 80099fa:	4a05      	ldr	r2, [pc, #20]	; (8009a10 <wifi_events_start+0x50>)
 80099fc:	6013      	str	r3, [r2, #0]
}
 80099fe:	bf00      	nop
 8009a00:	3718      	adds	r7, #24
 8009a02:	46bd      	mov	sp, r7
 8009a04:	bdb0      	pop	{r4, r5, r7, pc}
 8009a06:	bf00      	nop
 8009a08:	200011ec 	.word	0x200011ec
 8009a0c:	0801e1bc 	.word	0x0801e1bc
 8009a10:	200011e8 	.word	0x200011e8

08009a14 <wifi_events_task_entry>:

/**************************************************************************//**
 * Wi-Fi event handling task entry point
 *****************************************************************************/
static void wifi_events_task_entry (void const * pvParameters) {
 8009a14:	b580      	push	{r7, lr}
 8009a16:	b084      	sub	sp, #16
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]
  sl_wfx_generic_message_t *msg;
  BaseType_t ret;
  
	while(1) {

	ret = xQueueReceive(wifi_event_queue, (void *)&msg, portMAX_DELAY);
 8009a1c:	4b22      	ldr	r3, [pc, #136]	; (8009aa8 <wifi_events_task_entry+0x94>)
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	f107 0108 	add.w	r1, r7, #8
 8009a24:	f04f 32ff 	mov.w	r2, #4294967295
 8009a28:	4618      	mov	r0, r3
 8009a2a:	f001 f979 	bl	800ad20 <xQueueReceive>
 8009a2e:	60f8      	str	r0, [r7, #12]
     
    if ((ret == pdTRUE) && (msg != NULL)) {
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	2b01      	cmp	r3, #1
 8009a34:	d1f2      	bne.n	8009a1c <wifi_events_task_entry+0x8>
 8009a36:	68bb      	ldr	r3, [r7, #8]
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d0ef      	beq.n	8009a1c <wifi_events_task_entry+0x8>
      switch (msg->header.id) {
 8009a3c:	68bb      	ldr	r3, [r7, #8]
 8009a3e:	789b      	ldrb	r3, [r3, #2]
 8009a40:	3bc3      	subs	r3, #195	; 0xc3
 8009a42:	2b09      	cmp	r3, #9
 8009a44:	d82a      	bhi.n	8009a9c <wifi_events_task_entry+0x88>
 8009a46:	a201      	add	r2, pc, #4	; (adr r2, 8009a4c <wifi_events_task_entry+0x38>)
 8009a48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a4c:	08009a75 	.word	0x08009a75
 8009a50:	08009a7b 	.word	0x08009a7b
 8009a54:	08009a81 	.word	0x08009a81
 8009a58:	08009a9d 	.word	0x08009a9d
 8009a5c:	08009a87 	.word	0x08009a87
 8009a60:	08009a9d 	.word	0x08009a9d
 8009a64:	08009a9d 	.word	0x08009a9d
 8009a68:	08009a9d 	.word	0x08009a9d
 8009a6c:	08009a9d 	.word	0x08009a9d
 8009a70:	08009a8d 	.word	0x08009a8d
        case SL_WFX_CONNECT_IND_ID:
        {
          lwip_set_sta_link_up();
 8009a74:	f7f9 fccc 	bl	8003410 <lwip_set_sta_link_up>
            /* Enable the power save */
            sl_wfx_set_power_mode(WFM_PM_MODE_PS, WFM_PM_POLL_FAST_PS,1);
            sl_wfx_enable_device_power_save();
          }
#endif
          break;
 8009a78:	e010      	b.n	8009a9c <wifi_events_task_entry+0x88>
        }
        case SL_WFX_DISCONNECT_IND_ID:
        {
          lwip_set_sta_link_down();
 8009a7a:	f7f9 fce7 	bl	800344c <lwip_set_sta_link_down>
          break;
 8009a7e:	e00d      	b.n	8009a9c <wifi_events_task_entry+0x88>
        }
        case SL_WFX_START_AP_IND_ID:
        {
          lwip_set_ap_link_up();
 8009a80:	f7f9 fd02 	bl	8003488 <lwip_set_ap_link_up>
#ifdef SLEEP_ENABLED
          /* Power save always disabled when SoftAP mode enabled */
          sl_wfx_set_power_mode(WFM_PM_MODE_ACTIVE, WFM_PM_POLL_FAST_PS, 0);
          sl_wfx_disable_device_power_save();
#endif
          break;
 8009a84:	e00a      	b.n	8009a9c <wifi_events_task_entry+0x88>
        }
        case SL_WFX_STOP_AP_IND_ID:
        {
          lwip_set_ap_link_down();
 8009a86:	f7f9 fd15 	bl	80034b4 <lwip_set_ap_link_down>
            /* Enable the power save */
            sl_wfx_set_power_mode(WFM_PM_MODE_PS, WFM_PM_POLL_FAST_PS,1);
            sl_wfx_enable_device_power_save();
          }
#endif
          break;
 8009a8a:	e007      	b.n	8009a9c <wifi_events_task_entry+0x88>
        }
        case SL_WFX_SCAN_COMPLETE_IND_ID:
        {
          xSemaphoreGive(wifi_scan_sem);
 8009a8c:	4b07      	ldr	r3, [pc, #28]	; (8009aac <wifi_events_task_entry+0x98>)
 8009a8e:	6818      	ldr	r0, [r3, #0]
 8009a90:	2300      	movs	r3, #0
 8009a92:	2200      	movs	r2, #0
 8009a94:	2100      	movs	r1, #0
 8009a96:	f000 ff1d 	bl	800a8d4 <xQueueGenericSend>
          break;
 8009a9a:	bf00      	nop
        }
      }

      sl_wfx_host_free_buffer(msg, SL_WFX_RX_FRAME_BUFFER);
 8009a9c:	68bb      	ldr	r3, [r7, #8]
 8009a9e:	2101      	movs	r1, #1
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	f7ff fb83 	bl	80091ac <sl_wfx_host_free_buffer>
	ret = xQueueReceive(wifi_event_queue, (void *)&msg, portMAX_DELAY);
 8009aa6:	e7b9      	b.n	8009a1c <wifi_events_task_entry+0x8>
 8009aa8:	200011e8 	.word	0x200011e8
 8009aac:	200011dc 	.word	0x200011dc

08009ab0 <sl_wfx_host_init_bus>:
SemaphoreHandle_t spiDMASemaphore;

/**************************************************************************//**
 * Bus init function
 *****************************************************************************/
sl_status_t sl_wfx_host_init_bus (void) {
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	af00      	add	r7, sp, #0
  /* Init SPI interface */
  MX_SPI1_Init();
 8009ab4:	f000 f8a8 	bl	8009c08 <MX_SPI1_Init>

  /*Create semaphore to handle SPI*/
  spiDMASemaphore = xSemaphoreCreateBinary();
 8009ab8:	2203      	movs	r2, #3
 8009aba:	2100      	movs	r1, #0
 8009abc:	2001      	movs	r0, #1
 8009abe:	f000 fe81 	bl	800a7c4 <xQueueGenericCreate>
 8009ac2:	4603      	mov	r3, r0
 8009ac4:	4a05      	ldr	r2, [pc, #20]	; (8009adc <sl_wfx_host_init_bus+0x2c>)
 8009ac6:	6013      	str	r3, [r2, #0]
  xSemaphoreGive(spiDMASemaphore);
 8009ac8:	4b04      	ldr	r3, [pc, #16]	; (8009adc <sl_wfx_host_init_bus+0x2c>)
 8009aca:	6818      	ldr	r0, [r3, #0]
 8009acc:	2300      	movs	r3, #0
 8009ace:	2200      	movs	r2, #0
 8009ad0:	2100      	movs	r1, #0
 8009ad2:	f000 feff 	bl	800a8d4 <xQueueGenericSend>
  return SL_STATUS_OK;
 8009ad6:	2300      	movs	r3, #0
}
 8009ad8:	4618      	mov	r0, r3
 8009ada:	bd80      	pop	{r7, pc}
 8009adc:	20001308 	.word	0x20001308

08009ae0 <sl_wfx_host_deinit_bus>:

/**************************************************************************//**
 * Bus deinit function
 *****************************************************************************/
sl_status_t sl_wfx_host_deinit_bus (void) {
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	af00      	add	r7, sp, #0
  /* Delete the semaphore (No function implemented for semaphores, use mutex function) */
  osMutexDelete(spiDMASemaphore);
 8009ae4:	4b04      	ldr	r3, [pc, #16]	; (8009af8 <sl_wfx_host_deinit_bus+0x18>)
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	4618      	mov	r0, r3
 8009aea:	f000 fac9 	bl	800a080 <osMutexDelete>

  /* Deinit SPI interface */
  MX_SPI1_DeInit();
 8009aee:	f000 f8c1 	bl	8009c74 <MX_SPI1_DeInit>
  return SL_STATUS_OK;
 8009af2:	2300      	movs	r3, #0
}
 8009af4:	4618      	mov	r0, r3
 8009af6:	bd80      	pop	{r7, pc}
 8009af8:	20001308 	.word	0x20001308

08009afc <sl_wfx_host_spi_cs_assert>:

/**************************************************************************//**
 * Assert SPI chip select
 *****************************************************************************/
sl_status_t sl_wfx_host_spi_cs_assert (void) {
 8009afc:	b580      	push	{r7, lr}
 8009afe:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(WFM_NSS_GPIO_Port, WFM_NSS_Pin, GPIO_PIN_RESET);
 8009b00:	2200      	movs	r2, #0
 8009b02:	2110      	movs	r1, #16
 8009b04:	4802      	ldr	r0, [pc, #8]	; (8009b10 <sl_wfx_host_spi_cs_assert+0x14>)
 8009b06:	f7fb fcd7 	bl	80054b8 <HAL_GPIO_WritePin>
  return SL_STATUS_OK;
 8009b0a:	2300      	movs	r3, #0
}
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	bd80      	pop	{r7, pc}
 8009b10:	40020000 	.word	0x40020000

08009b14 <sl_wfx_host_spi_cs_deassert>:

/**************************************************************************//**
 * Deassert SPI chip select
 *****************************************************************************/
sl_status_t sl_wfx_host_spi_cs_deassert (void) {
 8009b14:	b580      	push	{r7, lr}
 8009b16:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(WFM_NSS_GPIO_Port, WFM_NSS_Pin, GPIO_PIN_SET);
 8009b18:	2201      	movs	r2, #1
 8009b1a:	2110      	movs	r1, #16
 8009b1c:	4802      	ldr	r0, [pc, #8]	; (8009b28 <sl_wfx_host_spi_cs_deassert+0x14>)
 8009b1e:	f7fb fccb 	bl	80054b8 <HAL_GPIO_WritePin>
  return SL_STATUS_OK;
 8009b22:	2300      	movs	r3, #0
}
 8009b24:	4618      	mov	r0, r3
 8009b26:	bd80      	pop	{r7, pc}
 8009b28:	40020000 	.word	0x40020000

08009b2c <sl_wfx_host_spi_transfer_no_cs_assert>:
 *****************************************************************************/
sl_status_t sl_wfx_host_spi_transfer_no_cs_assert (sl_wfx_host_bus_transfer_type_t type,
                                                   uint8_t *header,
                                                   uint16_t header_length,
                                                   uint8_t *buffer,
                                                   uint16_t buffer_length) {
 8009b2c:	b580      	push	{r7, lr}
 8009b2e:	b086      	sub	sp, #24
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	60b9      	str	r1, [r7, #8]
 8009b34:	607b      	str	r3, [r7, #4]
 8009b36:	4603      	mov	r3, r0
 8009b38:	73fb      	strb	r3, [r7, #15]
 8009b3a:	4613      	mov	r3, r2
 8009b3c:	81bb      	strh	r3, [r7, #12]
  sl_status_t    result  = SL_STATUS_FAIL;
 8009b3e:	2301      	movs	r3, #1
 8009b40:	617b      	str	r3, [r7, #20]
  const bool     is_read = ( type == SL_WFX_BUS_READ );
 8009b42:	7bfb      	ldrb	r3, [r7, #15]
 8009b44:	2b02      	cmp	r3, #2
 8009b46:	bf0c      	ite	eq
 8009b48:	2301      	moveq	r3, #1
 8009b4a:	2300      	movne	r3, #0
 8009b4c:	74fb      	strb	r3, [r7, #19]

  /* Wait for the DMA channels to be available */
  if (xSemaphoreTake(spiDMASemaphore, portMAX_DELAY) == pdTRUE ) {
 8009b4e:	4b21      	ldr	r3, [pc, #132]	; (8009bd4 <sl_wfx_host_spi_transfer_no_cs_assert+0xa8>)
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	f04f 31ff 	mov.w	r1, #4294967295
 8009b56:	4618      	mov	r0, r3
 8009b58:	f001 f9c2 	bl	800aee0 <xQueueSemaphoreTake>
 8009b5c:	4603      	mov	r3, r0
 8009b5e:	2b01      	cmp	r3, #1
 8009b60:	d120      	bne.n	8009ba4 <sl_wfx_host_spi_transfer_no_cs_assert+0x78>
	/* send the 2-byte header without DMA */

    HAL_SPI_Transmit(&hspi1, header, header_length, 1);
 8009b62:	89ba      	ldrh	r2, [r7, #12]
 8009b64:	2301      	movs	r3, #1
 8009b66:	68b9      	ldr	r1, [r7, #8]
 8009b68:	481b      	ldr	r0, [pc, #108]	; (8009bd8 <sl_wfx_host_spi_transfer_no_cs_assert+0xac>)
 8009b6a:	f7fc fa2c 	bl	8005fc6 <HAL_SPI_Transmit>
    if (is_read) {
 8009b6e:	7cfb      	ldrb	r3, [r7, #19]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d00b      	beq.n	8009b8c <sl_wfx_host_spi_transfer_no_cs_assert+0x60>
      if(HAL_SPI_Receive_DMA(&hspi1, buffer, buffer_length) == HAL_OK) result = SL_STATUS_OK;
 8009b74:	8c3b      	ldrh	r3, [r7, #32]
 8009b76:	461a      	mov	r2, r3
 8009b78:	6879      	ldr	r1, [r7, #4]
 8009b7a:	4817      	ldr	r0, [pc, #92]	; (8009bd8 <sl_wfx_host_spi_transfer_no_cs_assert+0xac>)
 8009b7c:	f7fc fc16 	bl	80063ac <HAL_SPI_Receive_DMA>
 8009b80:	4603      	mov	r3, r0
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d110      	bne.n	8009ba8 <sl_wfx_host_spi_transfer_no_cs_assert+0x7c>
 8009b86:	2300      	movs	r3, #0
 8009b88:	617b      	str	r3, [r7, #20]
 8009b8a:	e00d      	b.n	8009ba8 <sl_wfx_host_spi_transfer_no_cs_assert+0x7c>
    }
    else {
      if(HAL_SPI_Transmit_DMA(&hspi1, buffer, buffer_length) == HAL_OK) result = SL_STATUS_OK;
 8009b8c:	8c3b      	ldrh	r3, [r7, #32]
 8009b8e:	461a      	mov	r2, r3
 8009b90:	6879      	ldr	r1, [r7, #4]
 8009b92:	4811      	ldr	r0, [pc, #68]	; (8009bd8 <sl_wfx_host_spi_transfer_no_cs_assert+0xac>)
 8009b94:	f7fc fb54 	bl	8006240 <HAL_SPI_Transmit_DMA>
 8009b98:	4603      	mov	r3, r0
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d104      	bne.n	8009ba8 <sl_wfx_host_spi_transfer_no_cs_assert+0x7c>
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	617b      	str	r3, [r7, #20]
 8009ba2:	e001      	b.n	8009ba8 <sl_wfx_host_spi_transfer_no_cs_assert+0x7c>
    }
  } else {
    result = SL_STATUS_TIMEOUT;
 8009ba4:	2307      	movs	r3, #7
 8009ba6:	617b      	str	r3, [r7, #20]
  }

  /* Wait to receive the semaphore back from the DMA. In case of a read function, this means data is ready to be read*/
  if (xSemaphoreTake(spiDMASemaphore, portMAX_DELAY) == pdTRUE ) {
 8009ba8:	4b0a      	ldr	r3, [pc, #40]	; (8009bd4 <sl_wfx_host_spi_transfer_no_cs_assert+0xa8>)
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	f04f 31ff 	mov.w	r1, #4294967295
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	f001 f995 	bl	800aee0 <xQueueSemaphoreTake>
 8009bb6:	4603      	mov	r3, r0
 8009bb8:	2b01      	cmp	r3, #1
 8009bba:	d106      	bne.n	8009bca <sl_wfx_host_spi_transfer_no_cs_assert+0x9e>
    xSemaphoreGive(spiDMASemaphore);
 8009bbc:	4b05      	ldr	r3, [pc, #20]	; (8009bd4 <sl_wfx_host_spi_transfer_no_cs_assert+0xa8>)
 8009bbe:	6818      	ldr	r0, [r3, #0]
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	2200      	movs	r2, #0
 8009bc4:	2100      	movs	r1, #0
 8009bc6:	f000 fe85 	bl	800a8d4 <xQueueGenericSend>
  }

  return result;
 8009bca:	697b      	ldr	r3, [r7, #20]
}
 8009bcc:	4618      	mov	r0, r3
 8009bce:	3718      	adds	r7, #24
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	bd80      	pop	{r7, pc}
 8009bd4:	20001308 	.word	0x20001308
 8009bd8:	200011f0 	.word	0x200011f0

08009bdc <sl_wfx_host_enable_platform_interrupt>:

/**************************************************************************//**
 * Enable interrupt
 *****************************************************************************/
sl_status_t sl_wfx_host_enable_platform_interrupt (void) {
 8009bdc:	b580      	push	{r7, lr}
 8009bde:	af00      	add	r7, sp, #0
  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 10, 0);
 8009be0:	2200      	movs	r2, #0
 8009be2:	210a      	movs	r1, #10
 8009be4:	2028      	movs	r0, #40	; 0x28
 8009be6:	f7fa fdae 	bl	8004746 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8009bea:	2028      	movs	r0, #40	; 0x28
 8009bec:	f7fa fdc7 	bl	800477e <HAL_NVIC_EnableIRQ>
  return SL_STATUS_OK;
 8009bf0:	2300      	movs	r3, #0
}
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	bd80      	pop	{r7, pc}

08009bf6 <sl_wfx_host_disable_platform_interrupt>:

/**************************************************************************//**
 * Disable interrupt
 *****************************************************************************/
sl_status_t sl_wfx_host_disable_platform_interrupt (void) {
 8009bf6:	b580      	push	{r7, lr}
 8009bf8:	af00      	add	r7, sp, #0
  HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 8009bfa:	2028      	movs	r0, #40	; 0x28
 8009bfc:	f7fa fdcd 	bl	800479a <HAL_NVIC_DisableIRQ>
  return SL_STATUS_OK;
 8009c00:	2300      	movs	r3, #0
}
 8009c02:	4618      	mov	r0, r3
 8009c04:	bd80      	pop	{r7, pc}
	...

08009c08 <MX_SPI1_Init>:

/**************************************************************************//**
 * SPI1 init function
 *****************************************************************************/
static void MX_SPI1_Init (void) {
 8009c08:	b580      	push	{r7, lr}
 8009c0a:	af00      	add	r7, sp, #0
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8009c0c:	4b17      	ldr	r3, [pc, #92]	; (8009c6c <MX_SPI1_Init+0x64>)
 8009c0e:	4a18      	ldr	r2, [pc, #96]	; (8009c70 <MX_SPI1_Init+0x68>)
 8009c10:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8009c12:	4b16      	ldr	r3, [pc, #88]	; (8009c6c <MX_SPI1_Init+0x64>)
 8009c14:	f44f 7282 	mov.w	r2, #260	; 0x104
 8009c18:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8009c1a:	4b14      	ldr	r3, [pc, #80]	; (8009c6c <MX_SPI1_Init+0x64>)
 8009c1c:	2200      	movs	r2, #0
 8009c1e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8009c20:	4b12      	ldr	r3, [pc, #72]	; (8009c6c <MX_SPI1_Init+0x64>)
 8009c22:	2200      	movs	r2, #0
 8009c24:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8009c26:	4b11      	ldr	r3, [pc, #68]	; (8009c6c <MX_SPI1_Init+0x64>)
 8009c28:	2200      	movs	r2, #0
 8009c2a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8009c2c:	4b0f      	ldr	r3, [pc, #60]	; (8009c6c <MX_SPI1_Init+0x64>)
 8009c2e:	2200      	movs	r2, #0
 8009c30:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8009c32:	4b0e      	ldr	r3, [pc, #56]	; (8009c6c <MX_SPI1_Init+0x64>)
 8009c34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009c38:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009c3a:	4b0c      	ldr	r3, [pc, #48]	; (8009c6c <MX_SPI1_Init+0x64>)
 8009c3c:	2200      	movs	r2, #0
 8009c3e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8009c40:	4b0a      	ldr	r3, [pc, #40]	; (8009c6c <MX_SPI1_Init+0x64>)
 8009c42:	2200      	movs	r2, #0
 8009c44:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8009c46:	4b09      	ldr	r3, [pc, #36]	; (8009c6c <MX_SPI1_Init+0x64>)
 8009c48:	2200      	movs	r2, #0
 8009c4a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009c4c:	4b07      	ldr	r3, [pc, #28]	; (8009c6c <MX_SPI1_Init+0x64>)
 8009c4e:	2200      	movs	r2, #0
 8009c50:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8009c52:	4b06      	ldr	r3, [pc, #24]	; (8009c6c <MX_SPI1_Init+0x64>)
 8009c54:	220a      	movs	r2, #10
 8009c56:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8009c58:	4804      	ldr	r0, [pc, #16]	; (8009c6c <MX_SPI1_Init+0x64>)
 8009c5a:	f7fc f903 	bl	8005e64 <HAL_SPI_Init>
 8009c5e:	4603      	mov	r3, r0
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d001      	beq.n	8009c68 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8009c64:	f7f9 ffe8 	bl	8003c38 <Error_Handler>
  }
}
 8009c68:	bf00      	nop
 8009c6a:	bd80      	pop	{r7, pc}
 8009c6c:	200011f0 	.word	0x200011f0
 8009c70:	40013000 	.word	0x40013000

08009c74 <MX_SPI1_DeInit>:

/**************************************************************************//**
 * SPI1 deinit function
 *****************************************************************************/
static void MX_SPI1_DeInit (void) {
 8009c74:	b580      	push	{r7, lr}
 8009c76:	af00      	add	r7, sp, #0
  /* SPI DMA DeInit */
  HAL_DMA_DeInit(&hdma_spi1_rx);
 8009c78:	4805      	ldr	r0, [pc, #20]	; (8009c90 <MX_SPI1_DeInit+0x1c>)
 8009c7a:	f7fa fe73 	bl	8004964 <HAL_DMA_DeInit>
  HAL_DMA_DeInit(&hdma_spi1_tx);
 8009c7e:	4805      	ldr	r0, [pc, #20]	; (8009c94 <MX_SPI1_DeInit+0x20>)
 8009c80:	f7fa fe70 	bl	8004964 <HAL_DMA_DeInit>

  HAL_SPI_DeInit(&hspi1);
 8009c84:	4804      	ldr	r0, [pc, #16]	; (8009c98 <MX_SPI1_DeInit+0x24>)
 8009c86:	f7fc f976 	bl	8005f76 <HAL_SPI_DeInit>
}
 8009c8a:	bf00      	nop
 8009c8c:	bd80      	pop	{r7, pc}
 8009c8e:	bf00      	nop
 8009c90:	200012a8 	.word	0x200012a8
 8009c94:	20001248 	.word	0x20001248
 8009c98:	200011f0 	.word	0x200011f0

08009c9c <sl_wfx_task_start>:
static sl_status_t sl_wfx_tx_process (void);

/**************************************************************************//**
 * Init wfx process thread
 *****************************************************************************/
void sl_wfx_task_start (void) {
 8009c9c:	b5b0      	push	{r4, r5, r7, lr}
 8009c9e:	b086      	sub	sp, #24
 8009ca0:	af00      	add	r7, sp, #0

  sl_wfx_event_group = xEventGroupCreate();
 8009ca2:	f000 fad4 	bl	800a24e <xEventGroupCreate>
 8009ca6:	4603      	mov	r3, r0
 8009ca8:	4a10      	ldr	r2, [pc, #64]	; (8009cec <sl_wfx_task_start+0x50>)
 8009caa:	6013      	str	r3, [r2, #0]
  sl_wfx_tx_queue_mutex = xSemaphoreCreateMutex();
 8009cac:	2001      	movs	r0, #1
 8009cae:	f000 fdf8 	bl	800a8a2 <xQueueCreateMutex>
 8009cb2:	4603      	mov	r3, r0
 8009cb4:	4a0e      	ldr	r2, [pc, #56]	; (8009cf0 <sl_wfx_task_start+0x54>)
 8009cb6:	6013      	str	r3, [r2, #0]
  sl_wfx_tx_queue_context.head_ptr = NULL;
 8009cb8:	4b0e      	ldr	r3, [pc, #56]	; (8009cf4 <sl_wfx_task_start+0x58>)
 8009cba:	2200      	movs	r2, #0
 8009cbc:	601a      	str	r2, [r3, #0]
  sl_wfx_tx_queue_context.tail_ptr = NULL;
 8009cbe:	4b0d      	ldr	r3, [pc, #52]	; (8009cf4 <sl_wfx_task_start+0x58>)
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	605a      	str	r2, [r3, #4]
  osThreadDef(sl_wfx_task, sl_wfx_task_entry, osPriorityNormal , 0, configMINIMAL_STACK_SIZE*4);//osPriorityHigh
 8009cc4:	4b0c      	ldr	r3, [pc, #48]	; (8009cf8 <sl_wfx_task_start+0x5c>)
 8009cc6:	1d3c      	adds	r4, r7, #4
 8009cc8:	461d      	mov	r5, r3
 8009cca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009ccc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009cce:	682b      	ldr	r3, [r5, #0]
 8009cd0:	6023      	str	r3, [r4, #0]
  sl_wfx_task_handle = osThreadCreate(osThread(sl_wfx_task), NULL);
 8009cd2:	1d3b      	adds	r3, r7, #4
 8009cd4:	2100      	movs	r1, #0
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	f000 f8f9 	bl	8009ece <osThreadCreate>
 8009cdc:	4603      	mov	r3, r0
 8009cde:	4a07      	ldr	r2, [pc, #28]	; (8009cfc <sl_wfx_task_start+0x60>)
 8009ce0:	6013      	str	r3, [r2, #0]

}
 8009ce2:	bf00      	nop
 8009ce4:	3718      	adds	r7, #24
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	bdb0      	pop	{r4, r5, r7, pc}
 8009cea:	bf00      	nop
 8009cec:	20001310 	.word	0x20001310
 8009cf0:	20001314 	.word	0x20001314
 8009cf4:	20001318 	.word	0x20001318
 8009cf8:	0801e1dc 	.word	0x0801e1dc
 8009cfc:	2000130c 	.word	0x2000130c

08009d00 <sl_wfx_task_entry>:

/**************************************************************************//**
 * Wfx process task entry
 *****************************************************************************/
static void sl_wfx_task_entry (void const * pvParameters) {
 8009d00:	b580      	push	{r7, lr}
 8009d02:	b086      	sub	sp, #24
 8009d04:	af02      	add	r7, sp, #8
 8009d06:	6078      	str	r0, [r7, #4]
  uint16_t control_register = 0;
 8009d08:	2300      	movs	r3, #0
 8009d0a:	81fb      	strh	r3, [r7, #14]
  

  while(1) {

    /*Wait for an event*/
    wifi_event_bits = xEventGroupWaitBits(sl_wfx_event_group,
 8009d0c:	4b0d      	ldr	r3, [pc, #52]	; (8009d44 <sl_wfx_task_entry+0x44>)
 8009d0e:	6818      	ldr	r0, [r3, #0]
 8009d10:	f04f 33ff 	mov.w	r3, #4294967295
 8009d14:	9300      	str	r3, [sp, #0]
 8009d16:	2300      	movs	r3, #0
 8009d18:	2201      	movs	r2, #1
 8009d1a:	2103      	movs	r1, #3
 8009d1c:	f000 faae 	bl	800a27c <xEventGroupWaitBits>
 8009d20:	60b8      	str	r0, [r7, #8]
                                          SL_WFX_TX_PACKET_AVAILABLE | SL_WFX_RX_PACKET_AVAILABLE,
                                          pdTRUE,
                                          pdFALSE,
                                          portMAX_DELAY);

    if (wifi_event_bits & SL_WFX_TX_PACKET_AVAILABLE) {
 8009d22:	68bb      	ldr	r3, [r7, #8]
 8009d24:	f003 0301 	and.w	r3, r3, #1
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d001      	beq.n	8009d30 <sl_wfx_task_entry+0x30>
      /* Process TX packets */
      sl_wfx_tx_process();
 8009d2c:	f000 f834 	bl	8009d98 <sl_wfx_tx_process>
    }
    if (wifi_event_bits & SL_WFX_RX_PACKET_AVAILABLE) {
 8009d30:	68bb      	ldr	r3, [r7, #8]
 8009d32:	f003 0302 	and.w	r3, r3, #2
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d0e8      	beq.n	8009d0c <sl_wfx_task_entry+0xc>
      /* Process RX packets */
      sl_wfx_rx_process(control_register);
 8009d3a:	89fb      	ldrh	r3, [r7, #14]
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	f000 f803 	bl	8009d48 <sl_wfx_rx_process>
    wifi_event_bits = xEventGroupWaitBits(sl_wfx_event_group,
 8009d42:	e7e3      	b.n	8009d0c <sl_wfx_task_entry+0xc>
 8009d44:	20001310 	.word	0x20001310

08009d48 <sl_wfx_rx_process>:
}

/**************************************************************************//**
 * Wfx process receive frame
 *****************************************************************************/
static sl_status_t sl_wfx_rx_process (uint16_t control_register) {
 8009d48:	b580      	push	{r7, lr}
 8009d4a:	b084      	sub	sp, #16
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	4603      	mov	r3, r0
 8009d50:	80fb      	strh	r3, [r7, #6]
  sl_status_t result;

  sl_wfx_host_disable_platform_interrupt();
 8009d52:	f7ff ff50 	bl	8009bf6 <sl_wfx_host_disable_platform_interrupt>

  /* Receive a frame */
  result = sl_wfx_receive_frame(&control_register);
 8009d56:	1dbb      	adds	r3, r7, #6
 8009d58:	4618      	mov	r0, r3
 8009d5a:	f7fe fa0b 	bl	8008174 <sl_wfx_receive_frame>
 8009d5e:	60f8      	str	r0, [r7, #12]
  
  if (result) {
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d002      	beq.n	8009d6c <sl_wfx_rx_process+0x24>
    sl_wfx_host_enable_platform_interrupt();
 8009d66:	f7ff ff39 	bl	8009bdc <sl_wfx_host_enable_platform_interrupt>
 8009d6a:	e00d      	b.n	8009d88 <sl_wfx_rx_process+0x40>
  } else {
    if ((control_register & SL_WFX_CONT_NEXT_LEN_MASK) != 0) {
 8009d6c:	88fb      	ldrh	r3, [r7, #6]
 8009d6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d006      	beq.n	8009d84 <sl_wfx_rx_process+0x3c>
      
      /* if a packet is still available in the WF200, set an RX event */
      xEventGroupSetBits(sl_wfx_event_group, SL_WFX_RX_PACKET_AVAILABLE);
 8009d76:	4b07      	ldr	r3, [pc, #28]	; (8009d94 <sl_wfx_rx_process+0x4c>)
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	2102      	movs	r1, #2
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	f000 fb4b 	bl	800a418 <xEventGroupSetBits>
 8009d82:	e001      	b.n	8009d88 <sl_wfx_rx_process+0x40>
    } else {
      sl_wfx_host_enable_platform_interrupt();
 8009d84:	f7ff ff2a 	bl	8009bdc <sl_wfx_host_enable_platform_interrupt>
    }
  }

  return result;
 8009d88:	68fb      	ldr	r3, [r7, #12]
}
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	3710      	adds	r7, #16
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	bd80      	pop	{r7, pc}
 8009d92:	bf00      	nop
 8009d94:	20001310 	.word	0x20001310

08009d98 <sl_wfx_tx_process>:

/**************************************************************************//**
 * Wfx process tx queue
 *****************************************************************************/
static sl_status_t sl_wfx_tx_process (void) {
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	b082      	sub	sp, #8
 8009d9c:	af00      	add	r7, sp, #0
  sl_status_t result;
  sl_wfx_packet_queue_item_t *item_to_free;

  if (sl_wfx_tx_queue_context.head_ptr == NULL) {
 8009d9e:	4b28      	ldr	r3, [pc, #160]	; (8009e40 <sl_wfx_tx_process+0xa8>)
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d101      	bne.n	8009daa <sl_wfx_tx_process+0x12>
    return SL_STATUS_EMPTY;
 8009da6:	231b      	movs	r3, #27
 8009da8:	e045      	b.n	8009e36 <sl_wfx_tx_process+0x9e>
  }

  /* Take TX queue mutex */
  xSemaphoreTake(sl_wfx_tx_queue_mutex, portMAX_DELAY);
 8009daa:	4b26      	ldr	r3, [pc, #152]	; (8009e44 <sl_wfx_tx_process+0xac>)
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	f04f 31ff 	mov.w	r1, #4294967295
 8009db2:	4618      	mov	r0, r3
 8009db4:	f001 f894 	bl	800aee0 <xQueueSemaphoreTake>

  /* Send the packet */
  result = sl_wfx_send_ethernet_frame(&sl_wfx_tx_queue_context.head_ptr->buffer,
 8009db8:	4b21      	ldr	r3, [pc, #132]	; (8009e40 <sl_wfx_tx_process+0xa8>)
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	f103 000c 	add.w	r0, r3, #12
                                      sl_wfx_tx_queue_context.head_ptr->data_length,
 8009dc0:	4b1f      	ldr	r3, [pc, #124]	; (8009e40 <sl_wfx_tx_process+0xa8>)
 8009dc2:	681b      	ldr	r3, [r3, #0]
  result = sl_wfx_send_ethernet_frame(&sl_wfx_tx_queue_context.head_ptr->buffer,
 8009dc4:	6899      	ldr	r1, [r3, #8]
                                      sl_wfx_tx_queue_context.head_ptr->interface,
 8009dc6:	4b1e      	ldr	r3, [pc, #120]	; (8009e40 <sl_wfx_tx_process+0xa8>)
 8009dc8:	681b      	ldr	r3, [r3, #0]
  result = sl_wfx_send_ethernet_frame(&sl_wfx_tx_queue_context.head_ptr->buffer,
 8009dca:	791a      	ldrb	r2, [r3, #4]
 8009dcc:	2300      	movs	r3, #0
 8009dce:	f7fe f881 	bl	8007ed4 <sl_wfx_send_ethernet_frame>
 8009dd2:	6078      	str	r0, [r7, #4]
                                      WFM_PRIORITY_BE0);

  if (result != SL_STATUS_OK) {
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d00e      	beq.n	8009df8 <sl_wfx_tx_process+0x60>
    /* If the packet is not successfully sent, set the associated event and return */
    xEventGroupSetBits(sl_wfx_event_group, SL_WFX_TX_PACKET_AVAILABLE);
 8009dda:	4b1b      	ldr	r3, [pc, #108]	; (8009e48 <sl_wfx_tx_process+0xb0>)
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	2101      	movs	r1, #1
 8009de0:	4618      	mov	r0, r3
 8009de2:	f000 fb19 	bl	800a418 <xEventGroupSetBits>
    xSemaphoreGive(sl_wfx_tx_queue_mutex);
 8009de6:	4b17      	ldr	r3, [pc, #92]	; (8009e44 <sl_wfx_tx_process+0xac>)
 8009de8:	6818      	ldr	r0, [r3, #0]
 8009dea:	2300      	movs	r3, #0
 8009dec:	2200      	movs	r2, #0
 8009dee:	2100      	movs	r1, #0
 8009df0:	f000 fd70 	bl	800a8d4 <xQueueGenericSend>
    return SL_STATUS_FULL;
 8009df4:	231c      	movs	r3, #28
 8009df6:	e01e      	b.n	8009e36 <sl_wfx_tx_process+0x9e>
  }
  
  /* The packet has been successfully sent, free it  */
  item_to_free = sl_wfx_tx_queue_context.head_ptr;
 8009df8:	4b11      	ldr	r3, [pc, #68]	; (8009e40 <sl_wfx_tx_process+0xa8>)
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	603b      	str	r3, [r7, #0]
  
  /* Move the queue pointer to process the next packet */
  sl_wfx_tx_queue_context.head_ptr = sl_wfx_tx_queue_context.head_ptr->next;
 8009dfe:	4b10      	ldr	r3, [pc, #64]	; (8009e40 <sl_wfx_tx_process+0xa8>)
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	4a0e      	ldr	r2, [pc, #56]	; (8009e40 <sl_wfx_tx_process+0xa8>)
 8009e06:	6013      	str	r3, [r2, #0]

  /* The packet has been sent, release the packet  */
  sl_wfx_free_command_buffer((sl_wfx_generic_message_t*) item_to_free,
 8009e08:	2200      	movs	r2, #0
 8009e0a:	214a      	movs	r1, #74	; 0x4a
 8009e0c:	6838      	ldr	r0, [r7, #0]
 8009e0e:	f7fe ff15 	bl	8008c3c <sl_wfx_free_command_buffer>
                             SL_WFX_SEND_FRAME_REQ_ID,
                             SL_WFX_TX_FRAME_BUFFER);

  /* If a packet is available, set the associated event */
  if (sl_wfx_tx_queue_context.head_ptr != NULL) {
 8009e12:	4b0b      	ldr	r3, [pc, #44]	; (8009e40 <sl_wfx_tx_process+0xa8>)
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d005      	beq.n	8009e26 <sl_wfx_tx_process+0x8e>
    xEventGroupSetBits(sl_wfx_event_group, SL_WFX_TX_PACKET_AVAILABLE);
 8009e1a:	4b0b      	ldr	r3, [pc, #44]	; (8009e48 <sl_wfx_tx_process+0xb0>)
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	2101      	movs	r1, #1
 8009e20:	4618      	mov	r0, r3
 8009e22:	f000 faf9 	bl	800a418 <xEventGroupSetBits>
  }
  
  /* Release TX queue mutex */
  xSemaphoreGive(sl_wfx_tx_queue_mutex);
 8009e26:	4b07      	ldr	r3, [pc, #28]	; (8009e44 <sl_wfx_tx_process+0xac>)
 8009e28:	6818      	ldr	r0, [r3, #0]
 8009e2a:	2300      	movs	r3, #0
 8009e2c:	2200      	movs	r2, #0
 8009e2e:	2100      	movs	r1, #0
 8009e30:	f000 fd50 	bl	800a8d4 <xQueueGenericSend>

  return result;
 8009e34:	687b      	ldr	r3, [r7, #4]
}
 8009e36:	4618      	mov	r0, r3
 8009e38:	3708      	adds	r7, #8
 8009e3a:	46bd      	mov	sp, r7
 8009e3c:	bd80      	pop	{r7, pc}
 8009e3e:	bf00      	nop
 8009e40:	20001318 	.word	0x20001318
 8009e44:	20001314 	.word	0x20001314
 8009e48:	20001310 	.word	0x20001310

08009e4c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8009e4c:	b480      	push	{r7}
 8009e4e:	b085      	sub	sp, #20
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	4603      	mov	r3, r0
 8009e54:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8009e56:	2300      	movs	r3, #0
 8009e58:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8009e5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009e5e:	2b84      	cmp	r3, #132	; 0x84
 8009e60:	d005      	beq.n	8009e6e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8009e62:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	4413      	add	r3, r2
 8009e6a:	3303      	adds	r3, #3
 8009e6c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8009e6e:	68fb      	ldr	r3, [r7, #12]
}
 8009e70:	4618      	mov	r0, r3
 8009e72:	3714      	adds	r7, #20
 8009e74:	46bd      	mov	sp, r7
 8009e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7a:	4770      	bx	lr

08009e7c <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8009e7c:	b480      	push	{r7}
 8009e7e:	b083      	sub	sp, #12
 8009e80:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009e82:	f3ef 8305 	mrs	r3, IPSR
 8009e86:	607b      	str	r3, [r7, #4]
  return(result);
 8009e88:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	bf14      	ite	ne
 8009e8e:	2301      	movne	r3, #1
 8009e90:	2300      	moveq	r3, #0
 8009e92:	b2db      	uxtb	r3, r3
}
 8009e94:	4618      	mov	r0, r3
 8009e96:	370c      	adds	r7, #12
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9e:	4770      	bx	lr

08009ea0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8009ea0:	b580      	push	{r7, lr}
 8009ea2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8009ea4:	f001 fd6c 	bl	800b980 <vTaskStartScheduler>
  
  return osOK;
 8009ea8:	2300      	movs	r3, #0
}
 8009eaa:	4618      	mov	r0, r3
 8009eac:	bd80      	pop	{r7, pc}

08009eae <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8009eae:	b580      	push	{r7, lr}
 8009eb0:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8009eb2:	f7ff ffe3 	bl	8009e7c <inHandlerMode>
 8009eb6:	4603      	mov	r3, r0
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d003      	beq.n	8009ec4 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8009ebc:	f001 fe68 	bl	800bb90 <xTaskGetTickCountFromISR>
 8009ec0:	4603      	mov	r3, r0
 8009ec2:	e002      	b.n	8009eca <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8009ec4:	f001 fe54 	bl	800bb70 <xTaskGetTickCount>
 8009ec8:	4603      	mov	r3, r0
  }
}
 8009eca:	4618      	mov	r0, r3
 8009ecc:	bd80      	pop	{r7, pc}

08009ece <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8009ece:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009ed0:	b087      	sub	sp, #28
 8009ed2:	af02      	add	r7, sp, #8
 8009ed4:	6078      	str	r0, [r7, #4]
 8009ed6:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	685c      	ldr	r4, [r3, #4]
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009ee4:	b29e      	uxth	r6, r3
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009eec:	4618      	mov	r0, r3
 8009eee:	f7ff ffad 	bl	8009e4c <makeFreeRtosPriority>
 8009ef2:	4602      	mov	r2, r0
 8009ef4:	f107 030c 	add.w	r3, r7, #12
 8009ef8:	9301      	str	r3, [sp, #4]
 8009efa:	9200      	str	r2, [sp, #0]
 8009efc:	683b      	ldr	r3, [r7, #0]
 8009efe:	4632      	mov	r2, r6
 8009f00:	4629      	mov	r1, r5
 8009f02:	4620      	mov	r0, r4
 8009f04:	f001 fb46 	bl	800b594 <xTaskCreate>
 8009f08:	4603      	mov	r3, r0
 8009f0a:	2b01      	cmp	r3, #1
 8009f0c:	d001      	beq.n	8009f12 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8009f0e:	2300      	movs	r3, #0
 8009f10:	e000      	b.n	8009f14 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8009f12:	68fb      	ldr	r3, [r7, #12]
}
 8009f14:	4618      	mov	r0, r3
 8009f16:	3714      	adds	r7, #20
 8009f18:	46bd      	mov	sp, r7
 8009f1a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009f1c <osThreadTerminate>:
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadTerminate shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadTerminate (osThreadId thread_id)
{
 8009f1c:	b580      	push	{r7, lr}
 8009f1e:	b082      	sub	sp, #8
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskDelete == 1)
  vTaskDelete(thread_id);
 8009f24:	6878      	ldr	r0, [r7, #4]
 8009f26:	f001 fc67 	bl	800b7f8 <vTaskDelete>
  return osOK;
 8009f2a:	2300      	movs	r3, #0
#else
  return osErrorOS;
#endif
}
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	3708      	adds	r7, #8
 8009f30:	46bd      	mov	sp, r7
 8009f32:	bd80      	pop	{r7, pc}

08009f34 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8009f34:	b580      	push	{r7, lr}
 8009f36:	b084      	sub	sp, #16
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	085b      	lsrs	r3, r3, #1
 8009f40:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d001      	beq.n	8009f4c <osDelay+0x18>
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	e000      	b.n	8009f4e <osDelay+0x1a>
 8009f4c:	2301      	movs	r3, #1
 8009f4e:	4618      	mov	r0, r3
 8009f50:	f001 fce2 	bl	800b918 <vTaskDelay>
  
  return osOK;
 8009f54:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8009f56:	4618      	mov	r0, r3
 8009f58:	3710      	adds	r7, #16
 8009f5a:	46bd      	mov	sp, r7
 8009f5c:	bd80      	pop	{r7, pc}

08009f5e <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8009f5e:	b580      	push	{r7, lr}
 8009f60:	b082      	sub	sp, #8
 8009f62:	af00      	add	r7, sp, #0
 8009f64:	6078      	str	r0, [r7, #4]
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 8009f66:	2001      	movs	r0, #1
 8009f68:	f000 fc9b 	bl	800a8a2 <xQueueCreateMutex>
 8009f6c:	4603      	mov	r3, r0
#endif
#else
  return NULL;
#endif
}
 8009f6e:	4618      	mov	r0, r3
 8009f70:	3708      	adds	r7, #8
 8009f72:	46bd      	mov	sp, r7
 8009f74:	bd80      	pop	{r7, pc}
	...

08009f78 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8009f78:	b580      	push	{r7, lr}
 8009f7a:	b084      	sub	sp, #16
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	6078      	str	r0, [r7, #4]
 8009f80:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8009f82:	2300      	movs	r3, #0
 8009f84:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d101      	bne.n	8009f90 <osMutexWait+0x18>
    return osErrorParameter;
 8009f8c:	2380      	movs	r3, #128	; 0x80
 8009f8e:	e03b      	b.n	800a008 <osMutexWait+0x90>
  }
  
  ticks = 0;
 8009f90:	2300      	movs	r3, #0
 8009f92:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8009f94:	683b      	ldr	r3, [r7, #0]
 8009f96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f9a:	d103      	bne.n	8009fa4 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8009f9c:	f04f 33ff 	mov.w	r3, #4294967295
 8009fa0:	60fb      	str	r3, [r7, #12]
 8009fa2:	e00a      	b.n	8009fba <osMutexWait+0x42>
  }
  else if (millisec != 0) {
 8009fa4:	683b      	ldr	r3, [r7, #0]
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d007      	beq.n	8009fba <osMutexWait+0x42>
    ticks = millisec / portTICK_PERIOD_MS;
 8009faa:	683b      	ldr	r3, [r7, #0]
 8009fac:	085b      	lsrs	r3, r3, #1
 8009fae:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d101      	bne.n	8009fba <osMutexWait+0x42>
      ticks = 1;
 8009fb6:	2301      	movs	r3, #1
 8009fb8:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8009fba:	f7ff ff5f 	bl	8009e7c <inHandlerMode>
 8009fbe:	4603      	mov	r3, r0
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d017      	beq.n	8009ff4 <osMutexWait+0x7c>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8009fc4:	f107 0308 	add.w	r3, r7, #8
 8009fc8:	461a      	mov	r2, r3
 8009fca:	2100      	movs	r1, #0
 8009fcc:	6878      	ldr	r0, [r7, #4]
 8009fce:	f001 f893 	bl	800b0f8 <xQueueReceiveFromISR>
 8009fd2:	4603      	mov	r3, r0
 8009fd4:	2b01      	cmp	r3, #1
 8009fd6:	d001      	beq.n	8009fdc <osMutexWait+0x64>
      return osErrorOS;
 8009fd8:	23ff      	movs	r3, #255	; 0xff
 8009fda:	e015      	b.n	800a008 <osMutexWait+0x90>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8009fdc:	68bb      	ldr	r3, [r7, #8]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d011      	beq.n	800a006 <osMutexWait+0x8e>
 8009fe2:	4b0b      	ldr	r3, [pc, #44]	; (800a010 <osMutexWait+0x98>)
 8009fe4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009fe8:	601a      	str	r2, [r3, #0]
 8009fea:	f3bf 8f4f 	dsb	sy
 8009fee:	f3bf 8f6f 	isb	sy
 8009ff2:	e008      	b.n	800a006 <osMutexWait+0x8e>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8009ff4:	68f9      	ldr	r1, [r7, #12]
 8009ff6:	6878      	ldr	r0, [r7, #4]
 8009ff8:	f000 ff72 	bl	800aee0 <xQueueSemaphoreTake>
 8009ffc:	4603      	mov	r3, r0
 8009ffe:	2b01      	cmp	r3, #1
 800a000:	d001      	beq.n	800a006 <osMutexWait+0x8e>
    return osErrorOS;
 800a002:	23ff      	movs	r3, #255	; 0xff
 800a004:	e000      	b.n	800a008 <osMutexWait+0x90>
  }
  
  return osOK;
 800a006:	2300      	movs	r3, #0
}
 800a008:	4618      	mov	r0, r3
 800a00a:	3710      	adds	r7, #16
 800a00c:	46bd      	mov	sp, r7
 800a00e:	bd80      	pop	{r7, pc}
 800a010:	e000ed04 	.word	0xe000ed04

0800a014 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800a014:	b580      	push	{r7, lr}
 800a016:	b084      	sub	sp, #16
 800a018:	af00      	add	r7, sp, #0
 800a01a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800a01c:	2300      	movs	r3, #0
 800a01e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800a020:	2300      	movs	r3, #0
 800a022:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800a024:	f7ff ff2a 	bl	8009e7c <inHandlerMode>
 800a028:	4603      	mov	r3, r0
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d016      	beq.n	800a05c <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800a02e:	f107 0308 	add.w	r3, r7, #8
 800a032:	4619      	mov	r1, r3
 800a034:	6878      	ldr	r0, [r7, #4]
 800a036:	f000 fde6 	bl	800ac06 <xQueueGiveFromISR>
 800a03a:	4603      	mov	r3, r0
 800a03c:	2b01      	cmp	r3, #1
 800a03e:	d001      	beq.n	800a044 <osMutexRelease+0x30>
      return osErrorOS;
 800a040:	23ff      	movs	r3, #255	; 0xff
 800a042:	e017      	b.n	800a074 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a044:	68bb      	ldr	r3, [r7, #8]
 800a046:	2b00      	cmp	r3, #0
 800a048:	d013      	beq.n	800a072 <osMutexRelease+0x5e>
 800a04a:	4b0c      	ldr	r3, [pc, #48]	; (800a07c <osMutexRelease+0x68>)
 800a04c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a050:	601a      	str	r2, [r3, #0]
 800a052:	f3bf 8f4f 	dsb	sy
 800a056:	f3bf 8f6f 	isb	sy
 800a05a:	e00a      	b.n	800a072 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800a05c:	2300      	movs	r3, #0
 800a05e:	2200      	movs	r2, #0
 800a060:	2100      	movs	r1, #0
 800a062:	6878      	ldr	r0, [r7, #4]
 800a064:	f000 fc36 	bl	800a8d4 <xQueueGenericSend>
 800a068:	4603      	mov	r3, r0
 800a06a:	2b01      	cmp	r3, #1
 800a06c:	d001      	beq.n	800a072 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800a06e:	23ff      	movs	r3, #255	; 0xff
 800a070:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800a072:	68fb      	ldr	r3, [r7, #12]
}
 800a074:	4618      	mov	r0, r3
 800a076:	3710      	adds	r7, #16
 800a078:	46bd      	mov	sp, r7
 800a07a:	bd80      	pop	{r7, pc}
 800a07c:	e000ed04 	.word	0xe000ed04

0800a080 <osMutexDelete>:
* @param mutex_id  mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexDelete (osMutexId mutex_id)
{
 800a080:	b580      	push	{r7, lr}
 800a082:	b082      	sub	sp, #8
 800a084:	af00      	add	r7, sp, #0
 800a086:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800a088:	f7ff fef8 	bl	8009e7c <inHandlerMode>
 800a08c:	4603      	mov	r3, r0
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d001      	beq.n	800a096 <osMutexDelete+0x16>
    return osErrorISR;
 800a092:	2382      	movs	r3, #130	; 0x82
 800a094:	e003      	b.n	800a09e <osMutexDelete+0x1e>
  }

  vQueueDelete(mutex_id);
 800a096:	6878      	ldr	r0, [r7, #4]
 800a098:	f001 f8ae 	bl	800b1f8 <vQueueDelete>

  return osOK;
 800a09c:	2300      	movs	r3, #0
}
 800a09e:	4618      	mov	r0, r3
 800a0a0:	3708      	adds	r7, #8
 800a0a2:	46bd      	mov	sp, r7
 800a0a4:	bd80      	pop	{r7, pc}

0800a0a6 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800a0a6:	b580      	push	{r7, lr}
 800a0a8:	b082      	sub	sp, #8
 800a0aa:	af00      	add	r7, sp, #0
 800a0ac:	6078      	str	r0, [r7, #4]
 800a0ae:	6039      	str	r1, [r7, #0]
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	6818      	ldr	r0, [r3, #0]
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	685b      	ldr	r3, [r3, #4]
 800a0b8:	2200      	movs	r2, #0
 800a0ba:	4619      	mov	r1, r3
 800a0bc:	f000 fb82 	bl	800a7c4 <xQueueGenericCreate>
 800a0c0:	4603      	mov	r3, r0
#endif
}
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	3708      	adds	r7, #8
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	bd80      	pop	{r7, pc}
	...

0800a0cc <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800a0cc:	b580      	push	{r7, lr}
 800a0ce:	b086      	sub	sp, #24
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	60f8      	str	r0, [r7, #12]
 800a0d4:	60b9      	str	r1, [r7, #8]
 800a0d6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800a0d8:	2300      	movs	r3, #0
 800a0da:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	085b      	lsrs	r3, r3, #1
 800a0e0:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800a0e2:	697b      	ldr	r3, [r7, #20]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d101      	bne.n	800a0ec <osMessagePut+0x20>
    ticks = 1;
 800a0e8:	2301      	movs	r3, #1
 800a0ea:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800a0ec:	f7ff fec6 	bl	8009e7c <inHandlerMode>
 800a0f0:	4603      	mov	r3, r0
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d018      	beq.n	800a128 <osMessagePut+0x5c>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800a0f6:	f107 0210 	add.w	r2, r7, #16
 800a0fa:	f107 0108 	add.w	r1, r7, #8
 800a0fe:	2300      	movs	r3, #0
 800a100:	68f8      	ldr	r0, [r7, #12]
 800a102:	f000 fce5 	bl	800aad0 <xQueueGenericSendFromISR>
 800a106:	4603      	mov	r3, r0
 800a108:	2b01      	cmp	r3, #1
 800a10a:	d001      	beq.n	800a110 <osMessagePut+0x44>
      return osErrorOS;
 800a10c:	23ff      	movs	r3, #255	; 0xff
 800a10e:	e018      	b.n	800a142 <osMessagePut+0x76>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a110:	693b      	ldr	r3, [r7, #16]
 800a112:	2b00      	cmp	r3, #0
 800a114:	d014      	beq.n	800a140 <osMessagePut+0x74>
 800a116:	4b0d      	ldr	r3, [pc, #52]	; (800a14c <osMessagePut+0x80>)
 800a118:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a11c:	601a      	str	r2, [r3, #0]
 800a11e:	f3bf 8f4f 	dsb	sy
 800a122:	f3bf 8f6f 	isb	sy
 800a126:	e00b      	b.n	800a140 <osMessagePut+0x74>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800a128:	f107 0108 	add.w	r1, r7, #8
 800a12c:	2300      	movs	r3, #0
 800a12e:	697a      	ldr	r2, [r7, #20]
 800a130:	68f8      	ldr	r0, [r7, #12]
 800a132:	f000 fbcf 	bl	800a8d4 <xQueueGenericSend>
 800a136:	4603      	mov	r3, r0
 800a138:	2b01      	cmp	r3, #1
 800a13a:	d001      	beq.n	800a140 <osMessagePut+0x74>
      return osErrorOS;
 800a13c:	23ff      	movs	r3, #255	; 0xff
 800a13e:	e000      	b.n	800a142 <osMessagePut+0x76>
    }
  }
  
  return osOK;
 800a140:	2300      	movs	r3, #0
}
 800a142:	4618      	mov	r0, r3
 800a144:	3718      	adds	r7, #24
 800a146:	46bd      	mov	sp, r7
 800a148:	bd80      	pop	{r7, pc}
 800a14a:	bf00      	nop
 800a14c:	e000ed04 	.word	0xe000ed04

0800a150 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800a150:	b590      	push	{r4, r7, lr}
 800a152:	b08b      	sub	sp, #44	; 0x2c
 800a154:	af00      	add	r7, sp, #0
 800a156:	60f8      	str	r0, [r7, #12]
 800a158:	60b9      	str	r1, [r7, #8]
 800a15a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800a15c:	68bb      	ldr	r3, [r7, #8]
 800a15e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800a160:	2300      	movs	r3, #0
 800a162:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800a164:	68bb      	ldr	r3, [r7, #8]
 800a166:	2b00      	cmp	r3, #0
 800a168:	d10a      	bne.n	800a180 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800a16a:	2380      	movs	r3, #128	; 0x80
 800a16c:	617b      	str	r3, [r7, #20]
    return event;
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	461c      	mov	r4, r3
 800a172:	f107 0314 	add.w	r3, r7, #20
 800a176:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a17a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a17e:	e055      	b.n	800a22c <osMessageGet+0xdc>
  }
  
  taskWoken = pdFALSE;
 800a180:	2300      	movs	r3, #0
 800a182:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800a184:	2300      	movs	r3, #0
 800a186:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a18e:	d103      	bne.n	800a198 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800a190:	f04f 33ff 	mov.w	r3, #4294967295
 800a194:	627b      	str	r3, [r7, #36]	; 0x24
 800a196:	e00a      	b.n	800a1ae <osMessageGet+0x5e>
  }
  else if (millisec != 0) {
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d007      	beq.n	800a1ae <osMessageGet+0x5e>
    ticks = millisec / portTICK_PERIOD_MS;
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	085b      	lsrs	r3, r3, #1
 800a1a2:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800a1a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d101      	bne.n	800a1ae <osMessageGet+0x5e>
      ticks = 1;
 800a1aa:	2301      	movs	r3, #1
 800a1ac:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800a1ae:	f7ff fe65 	bl	8009e7c <inHandlerMode>
 800a1b2:	4603      	mov	r3, r0
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d01c      	beq.n	800a1f2 <osMessageGet+0xa2>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800a1b8:	f107 0220 	add.w	r2, r7, #32
 800a1bc:	f107 0314 	add.w	r3, r7, #20
 800a1c0:	3304      	adds	r3, #4
 800a1c2:	4619      	mov	r1, r3
 800a1c4:	68b8      	ldr	r0, [r7, #8]
 800a1c6:	f000 ff97 	bl	800b0f8 <xQueueReceiveFromISR>
 800a1ca:	4603      	mov	r3, r0
 800a1cc:	2b01      	cmp	r3, #1
 800a1ce:	d102      	bne.n	800a1d6 <osMessageGet+0x86>
      /* We have mail */
      event.status = osEventMessage;
 800a1d0:	2310      	movs	r3, #16
 800a1d2:	617b      	str	r3, [r7, #20]
 800a1d4:	e001      	b.n	800a1da <osMessageGet+0x8a>
    }
    else {
      event.status = osOK;
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a1da:	6a3b      	ldr	r3, [r7, #32]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d01d      	beq.n	800a21c <osMessageGet+0xcc>
 800a1e0:	4b14      	ldr	r3, [pc, #80]	; (800a234 <osMessageGet+0xe4>)
 800a1e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1e6:	601a      	str	r2, [r3, #0]
 800a1e8:	f3bf 8f4f 	dsb	sy
 800a1ec:	f3bf 8f6f 	isb	sy
 800a1f0:	e014      	b.n	800a21c <osMessageGet+0xcc>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800a1f2:	f107 0314 	add.w	r3, r7, #20
 800a1f6:	3304      	adds	r3, #4
 800a1f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1fa:	4619      	mov	r1, r3
 800a1fc:	68b8      	ldr	r0, [r7, #8]
 800a1fe:	f000 fd8f 	bl	800ad20 <xQueueReceive>
 800a202:	4603      	mov	r3, r0
 800a204:	2b01      	cmp	r3, #1
 800a206:	d102      	bne.n	800a20e <osMessageGet+0xbe>
      /* We have mail */
      event.status = osEventMessage;
 800a208:	2310      	movs	r3, #16
 800a20a:	617b      	str	r3, [r7, #20]
 800a20c:	e006      	b.n	800a21c <osMessageGet+0xcc>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800a20e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a210:	2b00      	cmp	r3, #0
 800a212:	d101      	bne.n	800a218 <osMessageGet+0xc8>
 800a214:	2300      	movs	r3, #0
 800a216:	e000      	b.n	800a21a <osMessageGet+0xca>
 800a218:	2340      	movs	r3, #64	; 0x40
 800a21a:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	461c      	mov	r4, r3
 800a220:	f107 0314 	add.w	r3, r7, #20
 800a224:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a228:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800a22c:	68f8      	ldr	r0, [r7, #12]
 800a22e:	372c      	adds	r7, #44	; 0x2c
 800a230:	46bd      	mov	sp, r7
 800a232:	bd90      	pop	{r4, r7, pc}
 800a234:	e000ed04 	.word	0xe000ed04

0800a238 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 800a238:	b580      	push	{r7, lr}
 800a23a:	af00      	add	r7, sp, #0

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800a23c:	f002 f858 	bl	800c2f0 <xTaskGetSchedulerState>
 800a240:	4603      	mov	r3, r0
 800a242:	2b01      	cmp	r3, #1
 800a244:	d001      	beq.n	800a24a <osSystickHandler+0x12>
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 800a246:	f002 ff97 	bl	800d178 <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 800a24a:	bf00      	nop
 800a24c:	bd80      	pop	{r7, pc}

0800a24e <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800a24e:	b580      	push	{r7, lr}
 800a250:	b082      	sub	sp, #8
 800a252:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 800a254:	2018      	movs	r0, #24
 800a256:	f003 f81f 	bl	800d298 <pvPortMalloc>
 800a25a:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d007      	beq.n	800a272 <xEventGroupCreate+0x24>
		{
			pxEventBits->uxEventBits = 0;
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	2200      	movs	r2, #0
 800a266:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	3304      	adds	r3, #4
 800a26c:	4618      	mov	r0, r3
 800a26e:	f000 f98d 	bl	800a58c <vListInitialise>
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 800a272:	687b      	ldr	r3, [r7, #4]
	}
 800a274:	4618      	mov	r0, r3
 800a276:	3708      	adds	r7, #8
 800a278:	46bd      	mov	sp, r7
 800a27a:	bd80      	pop	{r7, pc}

0800a27c <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 800a27c:	b580      	push	{r7, lr}
 800a27e:	b090      	sub	sp, #64	; 0x40
 800a280:	af00      	add	r7, sp, #0
 800a282:	60f8      	str	r0, [r7, #12]
 800a284:	60b9      	str	r1, [r7, #8]
 800a286:	607a      	str	r2, [r7, #4]
 800a288:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 800a28e:	2300      	movs	r3, #0
 800a290:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800a292:	2300      	movs	r3, #0
 800a294:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d10a      	bne.n	800a2b2 <xEventGroupWaitBits+0x36>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a29c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2a0:	f383 8811 	msr	BASEPRI, r3
 800a2a4:	f3bf 8f6f 	isb	sy
 800a2a8:	f3bf 8f4f 	dsb	sy
 800a2ac:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a2ae:	bf00      	nop
 800a2b0:	e7fe      	b.n	800a2b0 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800a2b2:	68bb      	ldr	r3, [r7, #8]
 800a2b4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d00a      	beq.n	800a2d2 <xEventGroupWaitBits+0x56>
	__asm volatile
 800a2bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2c0:	f383 8811 	msr	BASEPRI, r3
 800a2c4:	f3bf 8f6f 	isb	sy
 800a2c8:	f3bf 8f4f 	dsb	sy
 800a2cc:	61fb      	str	r3, [r7, #28]
}
 800a2ce:	bf00      	nop
 800a2d0:	e7fe      	b.n	800a2d0 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 800a2d2:	68bb      	ldr	r3, [r7, #8]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d10a      	bne.n	800a2ee <xEventGroupWaitBits+0x72>
	__asm volatile
 800a2d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2dc:	f383 8811 	msr	BASEPRI, r3
 800a2e0:	f3bf 8f6f 	isb	sy
 800a2e4:	f3bf 8f4f 	dsb	sy
 800a2e8:	61bb      	str	r3, [r7, #24]
}
 800a2ea:	bf00      	nop
 800a2ec:	e7fe      	b.n	800a2ec <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a2ee:	f001 ffff 	bl	800c2f0 <xTaskGetSchedulerState>
 800a2f2:	4603      	mov	r3, r0
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d102      	bne.n	800a2fe <xEventGroupWaitBits+0x82>
 800a2f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d101      	bne.n	800a302 <xEventGroupWaitBits+0x86>
 800a2fe:	2301      	movs	r3, #1
 800a300:	e000      	b.n	800a304 <xEventGroupWaitBits+0x88>
 800a302:	2300      	movs	r3, #0
 800a304:	2b00      	cmp	r3, #0
 800a306:	d10a      	bne.n	800a31e <xEventGroupWaitBits+0xa2>
	__asm volatile
 800a308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a30c:	f383 8811 	msr	BASEPRI, r3
 800a310:	f3bf 8f6f 	isb	sy
 800a314:	f3bf 8f4f 	dsb	sy
 800a318:	617b      	str	r3, [r7, #20]
}
 800a31a:	bf00      	nop
 800a31c:	e7fe      	b.n	800a31c <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 800a31e:	f001 fb7d 	bl	800ba1c <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800a322:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 800a328:	683a      	ldr	r2, [r7, #0]
 800a32a:	68b9      	ldr	r1, [r7, #8]
 800a32c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a32e:	f000 f90b 	bl	800a548 <prvTestWaitCondition>
 800a332:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 800a334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a336:	2b00      	cmp	r3, #0
 800a338:	d00e      	beq.n	800a358 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 800a33a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a33c:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 800a33e:	2300      	movs	r3, #0
 800a340:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	2b00      	cmp	r3, #0
 800a346:	d028      	beq.n	800a39a <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800a348:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a34a:	681a      	ldr	r2, [r3, #0]
 800a34c:	68bb      	ldr	r3, [r7, #8]
 800a34e:	43db      	mvns	r3, r3
 800a350:	401a      	ands	r2, r3
 800a352:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a354:	601a      	str	r2, [r3, #0]
 800a356:	e020      	b.n	800a39a <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 800a358:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d104      	bne.n	800a368 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 800a35e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a360:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 800a362:	2301      	movs	r3, #1
 800a364:	633b      	str	r3, [r7, #48]	; 0x30
 800a366:	e018      	b.n	800a39a <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d003      	beq.n	800a376 <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800a36e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a370:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a374:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 800a376:	683b      	ldr	r3, [r7, #0]
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d003      	beq.n	800a384 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 800a37c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a37e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a382:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 800a384:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a386:	1d18      	adds	r0, r3, #4
 800a388:	68ba      	ldr	r2, [r7, #8]
 800a38a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a38c:	4313      	orrs	r3, r2
 800a38e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a390:	4619      	mov	r1, r3
 800a392:	f001 fd47 	bl	800be24 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 800a396:	2300      	movs	r3, #0
 800a398:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 800a39a:	f001 fb4d 	bl	800ba38 <xTaskResumeAll>
 800a39e:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 800a3a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d031      	beq.n	800a40a <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 800a3a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d107      	bne.n	800a3bc <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 800a3ac:	4b19      	ldr	r3, [pc, #100]	; (800a414 <xEventGroupWaitBits+0x198>)
 800a3ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a3b2:	601a      	str	r2, [r3, #0]
 800a3b4:	f3bf 8f4f 	dsb	sy
 800a3b8:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 800a3bc:	f002 f940 	bl	800c640 <uxTaskResetEventItemValue>
 800a3c0:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800a3c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d11a      	bne.n	800a402 <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 800a3cc:	f002 fe42 	bl	800d054 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 800a3d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 800a3d6:	683a      	ldr	r2, [r7, #0]
 800a3d8:	68b9      	ldr	r1, [r7, #8]
 800a3da:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800a3dc:	f000 f8b4 	bl	800a548 <prvTestWaitCondition>
 800a3e0:	4603      	mov	r3, r0
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d009      	beq.n	800a3fa <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d006      	beq.n	800a3fa <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800a3ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3ee:	681a      	ldr	r2, [r3, #0]
 800a3f0:	68bb      	ldr	r3, [r7, #8]
 800a3f2:	43db      	mvns	r3, r3
 800a3f4:	401a      	ands	r2, r3
 800a3f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3f8:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 800a3fa:	2301      	movs	r3, #1
 800a3fc:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 800a3fe:	f002 fe59 	bl	800d0b4 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 800a402:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a404:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a408:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 800a40a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a40c:	4618      	mov	r0, r3
 800a40e:	3740      	adds	r7, #64	; 0x40
 800a410:	46bd      	mov	sp, r7
 800a412:	bd80      	pop	{r7, pc}
 800a414:	e000ed04 	.word	0xe000ed04

0800a418 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 800a418:	b580      	push	{r7, lr}
 800a41a:	b08e      	sub	sp, #56	; 0x38
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	6078      	str	r0, [r7, #4]
 800a420:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800a422:	2300      	movs	r3, #0
 800a424:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 800a42a:	2300      	movs	r3, #0
 800a42c:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	2b00      	cmp	r3, #0
 800a432:	d10a      	bne.n	800a44a <xEventGroupSetBits+0x32>
	__asm volatile
 800a434:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a438:	f383 8811 	msr	BASEPRI, r3
 800a43c:	f3bf 8f6f 	isb	sy
 800a440:	f3bf 8f4f 	dsb	sy
 800a444:	613b      	str	r3, [r7, #16]
}
 800a446:	bf00      	nop
 800a448:	e7fe      	b.n	800a448 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800a44a:	683b      	ldr	r3, [r7, #0]
 800a44c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800a450:	2b00      	cmp	r3, #0
 800a452:	d00a      	beq.n	800a46a <xEventGroupSetBits+0x52>
	__asm volatile
 800a454:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a458:	f383 8811 	msr	BASEPRI, r3
 800a45c:	f3bf 8f6f 	isb	sy
 800a460:	f3bf 8f4f 	dsb	sy
 800a464:	60fb      	str	r3, [r7, #12]
}
 800a466:	bf00      	nop
 800a468:	e7fe      	b.n	800a468 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 800a46a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a46c:	3304      	adds	r3, #4
 800a46e:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a472:	3308      	adds	r3, #8
 800a474:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 800a476:	f001 fad1 	bl	800ba1c <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 800a47a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a47c:	68db      	ldr	r3, [r3, #12]
 800a47e:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 800a480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a482:	681a      	ldr	r2, [r3, #0]
 800a484:	683b      	ldr	r3, [r7, #0]
 800a486:	431a      	orrs	r2, r3
 800a488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a48a:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 800a48c:	e03c      	b.n	800a508 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 800a48e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a490:	685b      	ldr	r3, [r3, #4]
 800a492:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 800a494:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 800a49a:	2300      	movs	r3, #0
 800a49c:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800a49e:	69bb      	ldr	r3, [r7, #24]
 800a4a0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800a4a4:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800a4a6:	69bb      	ldr	r3, [r7, #24]
 800a4a8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a4ac:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800a4ae:	697b      	ldr	r3, [r7, #20]
 800a4b0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d108      	bne.n	800a4ca <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 800a4b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4ba:	681a      	ldr	r2, [r3, #0]
 800a4bc:	69bb      	ldr	r3, [r7, #24]
 800a4be:	4013      	ands	r3, r2
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d00b      	beq.n	800a4dc <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 800a4c4:	2301      	movs	r3, #1
 800a4c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a4c8:	e008      	b.n	800a4dc <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800a4ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4cc:	681a      	ldr	r2, [r3, #0]
 800a4ce:	69bb      	ldr	r3, [r7, #24]
 800a4d0:	4013      	ands	r3, r2
 800a4d2:	69ba      	ldr	r2, [r7, #24]
 800a4d4:	429a      	cmp	r2, r3
 800a4d6:	d101      	bne.n	800a4dc <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 800a4d8:	2301      	movs	r3, #1
 800a4da:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 800a4dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d010      	beq.n	800a504 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800a4e2:	697b      	ldr	r3, [r7, #20]
 800a4e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d003      	beq.n	800a4f4 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 800a4ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a4ee:	69bb      	ldr	r3, [r7, #24]
 800a4f0:	4313      	orrs	r3, r2
 800a4f2:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800a4f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800a4fc:	4619      	mov	r1, r3
 800a4fe:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800a500:	f001 fd5a 	bl	800bfb8 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 800a504:	69fb      	ldr	r3, [r7, #28]
 800a506:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 800a508:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a50a:	6a3b      	ldr	r3, [r7, #32]
 800a50c:	429a      	cmp	r2, r3
 800a50e:	d1be      	bne.n	800a48e <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800a510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a512:	681a      	ldr	r2, [r3, #0]
 800a514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a516:	43db      	mvns	r3, r3
 800a518:	401a      	ands	r2, r3
 800a51a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a51c:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800a51e:	f001 fa8b 	bl	800ba38 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 800a522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a524:	681b      	ldr	r3, [r3, #0]
}
 800a526:	4618      	mov	r0, r3
 800a528:	3738      	adds	r7, #56	; 0x38
 800a52a:	46bd      	mov	sp, r7
 800a52c:	bd80      	pop	{r7, pc}

0800a52e <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 800a52e:	b580      	push	{r7, lr}
 800a530:	b082      	sub	sp, #8
 800a532:	af00      	add	r7, sp, #0
 800a534:	6078      	str	r0, [r7, #4]
 800a536:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 800a538:	6839      	ldr	r1, [r7, #0]
 800a53a:	6878      	ldr	r0, [r7, #4]
 800a53c:	f7ff ff6c 	bl	800a418 <xEventGroupSetBits>
}
 800a540:	bf00      	nop
 800a542:	3708      	adds	r7, #8
 800a544:	46bd      	mov	sp, r7
 800a546:	bd80      	pop	{r7, pc}

0800a548 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 800a548:	b480      	push	{r7}
 800a54a:	b087      	sub	sp, #28
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	60f8      	str	r0, [r7, #12]
 800a550:	60b9      	str	r1, [r7, #8]
 800a552:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 800a554:	2300      	movs	r3, #0
 800a556:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d107      	bne.n	800a56e <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800a55e:	68fa      	ldr	r2, [r7, #12]
 800a560:	68bb      	ldr	r3, [r7, #8]
 800a562:	4013      	ands	r3, r2
 800a564:	2b00      	cmp	r3, #0
 800a566:	d00a      	beq.n	800a57e <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800a568:	2301      	movs	r3, #1
 800a56a:	617b      	str	r3, [r7, #20]
 800a56c:	e007      	b.n	800a57e <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800a56e:	68fa      	ldr	r2, [r7, #12]
 800a570:	68bb      	ldr	r3, [r7, #8]
 800a572:	4013      	ands	r3, r2
 800a574:	68ba      	ldr	r2, [r7, #8]
 800a576:	429a      	cmp	r2, r3
 800a578:	d101      	bne.n	800a57e <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800a57a:	2301      	movs	r3, #1
 800a57c:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 800a57e:	697b      	ldr	r3, [r7, #20]
}
 800a580:	4618      	mov	r0, r3
 800a582:	371c      	adds	r7, #28
 800a584:	46bd      	mov	sp, r7
 800a586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58a:	4770      	bx	lr

0800a58c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a58c:	b480      	push	{r7}
 800a58e:	b083      	sub	sp, #12
 800a590:	af00      	add	r7, sp, #0
 800a592:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	f103 0208 	add.w	r2, r3, #8
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	f04f 32ff 	mov.w	r2, #4294967295
 800a5a4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	f103 0208 	add.w	r2, r3, #8
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	f103 0208 	add.w	r2, r3, #8
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	2200      	movs	r2, #0
 800a5be:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a5c0:	bf00      	nop
 800a5c2:	370c      	adds	r7, #12
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ca:	4770      	bx	lr

0800a5cc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a5cc:	b480      	push	{r7}
 800a5ce:	b083      	sub	sp, #12
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a5da:	bf00      	nop
 800a5dc:	370c      	adds	r7, #12
 800a5de:	46bd      	mov	sp, r7
 800a5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e4:	4770      	bx	lr

0800a5e6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a5e6:	b480      	push	{r7}
 800a5e8:	b085      	sub	sp, #20
 800a5ea:	af00      	add	r7, sp, #0
 800a5ec:	6078      	str	r0, [r7, #4]
 800a5ee:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	685b      	ldr	r3, [r3, #4]
 800a5f4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a5f6:	683b      	ldr	r3, [r7, #0]
 800a5f8:	68fa      	ldr	r2, [r7, #12]
 800a5fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	689a      	ldr	r2, [r3, #8]
 800a600:	683b      	ldr	r3, [r7, #0]
 800a602:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	689b      	ldr	r3, [r3, #8]
 800a608:	683a      	ldr	r2, [r7, #0]
 800a60a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	683a      	ldr	r2, [r7, #0]
 800a610:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a612:	683b      	ldr	r3, [r7, #0]
 800a614:	687a      	ldr	r2, [r7, #4]
 800a616:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	1c5a      	adds	r2, r3, #1
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	601a      	str	r2, [r3, #0]
}
 800a622:	bf00      	nop
 800a624:	3714      	adds	r7, #20
 800a626:	46bd      	mov	sp, r7
 800a628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a62c:	4770      	bx	lr

0800a62e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a62e:	b480      	push	{r7}
 800a630:	b085      	sub	sp, #20
 800a632:	af00      	add	r7, sp, #0
 800a634:	6078      	str	r0, [r7, #4]
 800a636:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a638:	683b      	ldr	r3, [r7, #0]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a63e:	68bb      	ldr	r3, [r7, #8]
 800a640:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a644:	d103      	bne.n	800a64e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	691b      	ldr	r3, [r3, #16]
 800a64a:	60fb      	str	r3, [r7, #12]
 800a64c:	e00c      	b.n	800a668 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	3308      	adds	r3, #8
 800a652:	60fb      	str	r3, [r7, #12]
 800a654:	e002      	b.n	800a65c <vListInsert+0x2e>
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	685b      	ldr	r3, [r3, #4]
 800a65a:	60fb      	str	r3, [r7, #12]
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	685b      	ldr	r3, [r3, #4]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	68ba      	ldr	r2, [r7, #8]
 800a664:	429a      	cmp	r2, r3
 800a666:	d2f6      	bcs.n	800a656 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	685a      	ldr	r2, [r3, #4]
 800a66c:	683b      	ldr	r3, [r7, #0]
 800a66e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a670:	683b      	ldr	r3, [r7, #0]
 800a672:	685b      	ldr	r3, [r3, #4]
 800a674:	683a      	ldr	r2, [r7, #0]
 800a676:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a678:	683b      	ldr	r3, [r7, #0]
 800a67a:	68fa      	ldr	r2, [r7, #12]
 800a67c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	683a      	ldr	r2, [r7, #0]
 800a682:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a684:	683b      	ldr	r3, [r7, #0]
 800a686:	687a      	ldr	r2, [r7, #4]
 800a688:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	1c5a      	adds	r2, r3, #1
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	601a      	str	r2, [r3, #0]
}
 800a694:	bf00      	nop
 800a696:	3714      	adds	r7, #20
 800a698:	46bd      	mov	sp, r7
 800a69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a69e:	4770      	bx	lr

0800a6a0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a6a0:	b480      	push	{r7}
 800a6a2:	b085      	sub	sp, #20
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	691b      	ldr	r3, [r3, #16]
 800a6ac:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	685b      	ldr	r3, [r3, #4]
 800a6b2:	687a      	ldr	r2, [r7, #4]
 800a6b4:	6892      	ldr	r2, [r2, #8]
 800a6b6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	689b      	ldr	r3, [r3, #8]
 800a6bc:	687a      	ldr	r2, [r7, #4]
 800a6be:	6852      	ldr	r2, [r2, #4]
 800a6c0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	685b      	ldr	r3, [r3, #4]
 800a6c6:	687a      	ldr	r2, [r7, #4]
 800a6c8:	429a      	cmp	r2, r3
 800a6ca:	d103      	bne.n	800a6d4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	689a      	ldr	r2, [r3, #8]
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	2200      	movs	r2, #0
 800a6d8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	1e5a      	subs	r2, r3, #1
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	681b      	ldr	r3, [r3, #0]
}
 800a6e8:	4618      	mov	r0, r3
 800a6ea:	3714      	adds	r7, #20
 800a6ec:	46bd      	mov	sp, r7
 800a6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f2:	4770      	bx	lr

0800a6f4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a6f4:	b580      	push	{r7, lr}
 800a6f6:	b084      	sub	sp, #16
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	6078      	str	r0, [r7, #4]
 800a6fc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	2b00      	cmp	r3, #0
 800a706:	d10a      	bne.n	800a71e <xQueueGenericReset+0x2a>
	__asm volatile
 800a708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a70c:	f383 8811 	msr	BASEPRI, r3
 800a710:	f3bf 8f6f 	isb	sy
 800a714:	f3bf 8f4f 	dsb	sy
 800a718:	60bb      	str	r3, [r7, #8]
}
 800a71a:	bf00      	nop
 800a71c:	e7fe      	b.n	800a71c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a71e:	f002 fc99 	bl	800d054 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	681a      	ldr	r2, [r3, #0]
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a72a:	68f9      	ldr	r1, [r7, #12]
 800a72c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a72e:	fb01 f303 	mul.w	r3, r1, r3
 800a732:	441a      	add	r2, r3
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	2200      	movs	r2, #0
 800a73c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	681a      	ldr	r2, [r3, #0]
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	681a      	ldr	r2, [r3, #0]
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a74e:	3b01      	subs	r3, #1
 800a750:	68f9      	ldr	r1, [r7, #12]
 800a752:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a754:	fb01 f303 	mul.w	r3, r1, r3
 800a758:	441a      	add	r2, r3
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	22ff      	movs	r2, #255	; 0xff
 800a762:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	22ff      	movs	r2, #255	; 0xff
 800a76a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a76e:	683b      	ldr	r3, [r7, #0]
 800a770:	2b00      	cmp	r3, #0
 800a772:	d114      	bne.n	800a79e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	691b      	ldr	r3, [r3, #16]
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d01a      	beq.n	800a7b2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	3310      	adds	r3, #16
 800a780:	4618      	mov	r0, r3
 800a782:	f001 fbb7 	bl	800bef4 <xTaskRemoveFromEventList>
 800a786:	4603      	mov	r3, r0
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d012      	beq.n	800a7b2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a78c:	4b0c      	ldr	r3, [pc, #48]	; (800a7c0 <xQueueGenericReset+0xcc>)
 800a78e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a792:	601a      	str	r2, [r3, #0]
 800a794:	f3bf 8f4f 	dsb	sy
 800a798:	f3bf 8f6f 	isb	sy
 800a79c:	e009      	b.n	800a7b2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	3310      	adds	r3, #16
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	f7ff fef2 	bl	800a58c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	3324      	adds	r3, #36	; 0x24
 800a7ac:	4618      	mov	r0, r3
 800a7ae:	f7ff feed 	bl	800a58c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a7b2:	f002 fc7f 	bl	800d0b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a7b6:	2301      	movs	r3, #1
}
 800a7b8:	4618      	mov	r0, r3
 800a7ba:	3710      	adds	r7, #16
 800a7bc:	46bd      	mov	sp, r7
 800a7be:	bd80      	pop	{r7, pc}
 800a7c0:	e000ed04 	.word	0xe000ed04

0800a7c4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a7c4:	b580      	push	{r7, lr}
 800a7c6:	b08a      	sub	sp, #40	; 0x28
 800a7c8:	af02      	add	r7, sp, #8
 800a7ca:	60f8      	str	r0, [r7, #12]
 800a7cc:	60b9      	str	r1, [r7, #8]
 800a7ce:	4613      	mov	r3, r2
 800a7d0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d10a      	bne.n	800a7ee <xQueueGenericCreate+0x2a>
	__asm volatile
 800a7d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7dc:	f383 8811 	msr	BASEPRI, r3
 800a7e0:	f3bf 8f6f 	isb	sy
 800a7e4:	f3bf 8f4f 	dsb	sy
 800a7e8:	613b      	str	r3, [r7, #16]
}
 800a7ea:	bf00      	nop
 800a7ec:	e7fe      	b.n	800a7ec <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	68ba      	ldr	r2, [r7, #8]
 800a7f2:	fb02 f303 	mul.w	r3, r2, r3
 800a7f6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a7f8:	69fb      	ldr	r3, [r7, #28]
 800a7fa:	3348      	adds	r3, #72	; 0x48
 800a7fc:	4618      	mov	r0, r3
 800a7fe:	f002 fd4b 	bl	800d298 <pvPortMalloc>
 800a802:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a804:	69bb      	ldr	r3, [r7, #24]
 800a806:	2b00      	cmp	r3, #0
 800a808:	d00d      	beq.n	800a826 <xQueueGenericCreate+0x62>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a80a:	69bb      	ldr	r3, [r7, #24]
 800a80c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a80e:	697b      	ldr	r3, [r7, #20]
 800a810:	3348      	adds	r3, #72	; 0x48
 800a812:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a814:	79fa      	ldrb	r2, [r7, #7]
 800a816:	69bb      	ldr	r3, [r7, #24]
 800a818:	9300      	str	r3, [sp, #0]
 800a81a:	4613      	mov	r3, r2
 800a81c:	697a      	ldr	r2, [r7, #20]
 800a81e:	68b9      	ldr	r1, [r7, #8]
 800a820:	68f8      	ldr	r0, [r7, #12]
 800a822:	f000 f805 	bl	800a830 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a826:	69bb      	ldr	r3, [r7, #24]
	}
 800a828:	4618      	mov	r0, r3
 800a82a:	3720      	adds	r7, #32
 800a82c:	46bd      	mov	sp, r7
 800a82e:	bd80      	pop	{r7, pc}

0800a830 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a830:	b580      	push	{r7, lr}
 800a832:	b084      	sub	sp, #16
 800a834:	af00      	add	r7, sp, #0
 800a836:	60f8      	str	r0, [r7, #12]
 800a838:	60b9      	str	r1, [r7, #8]
 800a83a:	607a      	str	r2, [r7, #4]
 800a83c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a83e:	68bb      	ldr	r3, [r7, #8]
 800a840:	2b00      	cmp	r3, #0
 800a842:	d103      	bne.n	800a84c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a844:	69bb      	ldr	r3, [r7, #24]
 800a846:	69ba      	ldr	r2, [r7, #24]
 800a848:	601a      	str	r2, [r3, #0]
 800a84a:	e002      	b.n	800a852 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a84c:	69bb      	ldr	r3, [r7, #24]
 800a84e:	687a      	ldr	r2, [r7, #4]
 800a850:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a852:	69bb      	ldr	r3, [r7, #24]
 800a854:	68fa      	ldr	r2, [r7, #12]
 800a856:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a858:	69bb      	ldr	r3, [r7, #24]
 800a85a:	68ba      	ldr	r2, [r7, #8]
 800a85c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a85e:	2101      	movs	r1, #1
 800a860:	69b8      	ldr	r0, [r7, #24]
 800a862:	f7ff ff47 	bl	800a6f4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a866:	bf00      	nop
 800a868:	3710      	adds	r7, #16
 800a86a:	46bd      	mov	sp, r7
 800a86c:	bd80      	pop	{r7, pc}

0800a86e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800a86e:	b580      	push	{r7, lr}
 800a870:	b082      	sub	sp, #8
 800a872:	af00      	add	r7, sp, #0
 800a874:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d00e      	beq.n	800a89a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	2200      	movs	r2, #0
 800a880:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	2200      	movs	r2, #0
 800a886:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	2200      	movs	r2, #0
 800a88c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800a88e:	2300      	movs	r3, #0
 800a890:	2200      	movs	r2, #0
 800a892:	2100      	movs	r1, #0
 800a894:	6878      	ldr	r0, [r7, #4]
 800a896:	f000 f81d 	bl	800a8d4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800a89a:	bf00      	nop
 800a89c:	3708      	adds	r7, #8
 800a89e:	46bd      	mov	sp, r7
 800a8a0:	bd80      	pop	{r7, pc}

0800a8a2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800a8a2:	b580      	push	{r7, lr}
 800a8a4:	b086      	sub	sp, #24
 800a8a6:	af00      	add	r7, sp, #0
 800a8a8:	4603      	mov	r3, r0
 800a8aa:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a8ac:	2301      	movs	r3, #1
 800a8ae:	617b      	str	r3, [r7, #20]
 800a8b0:	2300      	movs	r3, #0
 800a8b2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800a8b4:	79fb      	ldrb	r3, [r7, #7]
 800a8b6:	461a      	mov	r2, r3
 800a8b8:	6939      	ldr	r1, [r7, #16]
 800a8ba:	6978      	ldr	r0, [r7, #20]
 800a8bc:	f7ff ff82 	bl	800a7c4 <xQueueGenericCreate>
 800a8c0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a8c2:	68f8      	ldr	r0, [r7, #12]
 800a8c4:	f7ff ffd3 	bl	800a86e <prvInitialiseMutex>

		return xNewQueue;
 800a8c8:	68fb      	ldr	r3, [r7, #12]
	}
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	3718      	adds	r7, #24
 800a8ce:	46bd      	mov	sp, r7
 800a8d0:	bd80      	pop	{r7, pc}
	...

0800a8d4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a8d4:	b580      	push	{r7, lr}
 800a8d6:	b08e      	sub	sp, #56	; 0x38
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	60f8      	str	r0, [r7, #12]
 800a8dc:	60b9      	str	r1, [r7, #8]
 800a8de:	607a      	str	r2, [r7, #4]
 800a8e0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a8e2:	2300      	movs	r3, #0
 800a8e4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a8ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d10a      	bne.n	800a906 <xQueueGenericSend+0x32>
	__asm volatile
 800a8f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8f4:	f383 8811 	msr	BASEPRI, r3
 800a8f8:	f3bf 8f6f 	isb	sy
 800a8fc:	f3bf 8f4f 	dsb	sy
 800a900:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a902:	bf00      	nop
 800a904:	e7fe      	b.n	800a904 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a906:	68bb      	ldr	r3, [r7, #8]
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d103      	bne.n	800a914 <xQueueGenericSend+0x40>
 800a90c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a90e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a910:	2b00      	cmp	r3, #0
 800a912:	d101      	bne.n	800a918 <xQueueGenericSend+0x44>
 800a914:	2301      	movs	r3, #1
 800a916:	e000      	b.n	800a91a <xQueueGenericSend+0x46>
 800a918:	2300      	movs	r3, #0
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d10a      	bne.n	800a934 <xQueueGenericSend+0x60>
	__asm volatile
 800a91e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a922:	f383 8811 	msr	BASEPRI, r3
 800a926:	f3bf 8f6f 	isb	sy
 800a92a:	f3bf 8f4f 	dsb	sy
 800a92e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a930:	bf00      	nop
 800a932:	e7fe      	b.n	800a932 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a934:	683b      	ldr	r3, [r7, #0]
 800a936:	2b02      	cmp	r3, #2
 800a938:	d103      	bne.n	800a942 <xQueueGenericSend+0x6e>
 800a93a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a93c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a93e:	2b01      	cmp	r3, #1
 800a940:	d101      	bne.n	800a946 <xQueueGenericSend+0x72>
 800a942:	2301      	movs	r3, #1
 800a944:	e000      	b.n	800a948 <xQueueGenericSend+0x74>
 800a946:	2300      	movs	r3, #0
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d10a      	bne.n	800a962 <xQueueGenericSend+0x8e>
	__asm volatile
 800a94c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a950:	f383 8811 	msr	BASEPRI, r3
 800a954:	f3bf 8f6f 	isb	sy
 800a958:	f3bf 8f4f 	dsb	sy
 800a95c:	623b      	str	r3, [r7, #32]
}
 800a95e:	bf00      	nop
 800a960:	e7fe      	b.n	800a960 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a962:	f001 fcc5 	bl	800c2f0 <xTaskGetSchedulerState>
 800a966:	4603      	mov	r3, r0
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d102      	bne.n	800a972 <xQueueGenericSend+0x9e>
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d101      	bne.n	800a976 <xQueueGenericSend+0xa2>
 800a972:	2301      	movs	r3, #1
 800a974:	e000      	b.n	800a978 <xQueueGenericSend+0xa4>
 800a976:	2300      	movs	r3, #0
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d10a      	bne.n	800a992 <xQueueGenericSend+0xbe>
	__asm volatile
 800a97c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a980:	f383 8811 	msr	BASEPRI, r3
 800a984:	f3bf 8f6f 	isb	sy
 800a988:	f3bf 8f4f 	dsb	sy
 800a98c:	61fb      	str	r3, [r7, #28]
}
 800a98e:	bf00      	nop
 800a990:	e7fe      	b.n	800a990 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a992:	f002 fb5f 	bl	800d054 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a998:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a99a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a99c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a99e:	429a      	cmp	r2, r3
 800a9a0:	d302      	bcc.n	800a9a8 <xQueueGenericSend+0xd4>
 800a9a2:	683b      	ldr	r3, [r7, #0]
 800a9a4:	2b02      	cmp	r3, #2
 800a9a6:	d129      	bne.n	800a9fc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a9a8:	683a      	ldr	r2, [r7, #0]
 800a9aa:	68b9      	ldr	r1, [r7, #8]
 800a9ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a9ae:	f000 fc59 	bl	800b264 <prvCopyDataToQueue>
 800a9b2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a9b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d010      	beq.n	800a9de <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a9bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9be:	3324      	adds	r3, #36	; 0x24
 800a9c0:	4618      	mov	r0, r3
 800a9c2:	f001 fa97 	bl	800bef4 <xTaskRemoveFromEventList>
 800a9c6:	4603      	mov	r3, r0
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d013      	beq.n	800a9f4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a9cc:	4b3f      	ldr	r3, [pc, #252]	; (800aacc <xQueueGenericSend+0x1f8>)
 800a9ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a9d2:	601a      	str	r2, [r3, #0]
 800a9d4:	f3bf 8f4f 	dsb	sy
 800a9d8:	f3bf 8f6f 	isb	sy
 800a9dc:	e00a      	b.n	800a9f4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a9de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d007      	beq.n	800a9f4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a9e4:	4b39      	ldr	r3, [pc, #228]	; (800aacc <xQueueGenericSend+0x1f8>)
 800a9e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a9ea:	601a      	str	r2, [r3, #0]
 800a9ec:	f3bf 8f4f 	dsb	sy
 800a9f0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a9f4:	f002 fb5e 	bl	800d0b4 <vPortExitCritical>
				return pdPASS;
 800a9f8:	2301      	movs	r3, #1
 800a9fa:	e063      	b.n	800aac4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d103      	bne.n	800aa0a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800aa02:	f002 fb57 	bl	800d0b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800aa06:	2300      	movs	r3, #0
 800aa08:	e05c      	b.n	800aac4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800aa0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d106      	bne.n	800aa1e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800aa10:	f107 0314 	add.w	r3, r7, #20
 800aa14:	4618      	mov	r0, r3
 800aa16:	f001 fb31 	bl	800c07c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800aa1a:	2301      	movs	r3, #1
 800aa1c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800aa1e:	f002 fb49 	bl	800d0b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800aa22:	f000 fffb 	bl	800ba1c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800aa26:	f002 fb15 	bl	800d054 <vPortEnterCritical>
 800aa2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa2c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aa30:	b25b      	sxtb	r3, r3
 800aa32:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa36:	d103      	bne.n	800aa40 <xQueueGenericSend+0x16c>
 800aa38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa3a:	2200      	movs	r2, #0
 800aa3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aa40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa42:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aa46:	b25b      	sxtb	r3, r3
 800aa48:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa4c:	d103      	bne.n	800aa56 <xQueueGenericSend+0x182>
 800aa4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa50:	2200      	movs	r2, #0
 800aa52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aa56:	f002 fb2d 	bl	800d0b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800aa5a:	1d3a      	adds	r2, r7, #4
 800aa5c:	f107 0314 	add.w	r3, r7, #20
 800aa60:	4611      	mov	r1, r2
 800aa62:	4618      	mov	r0, r3
 800aa64:	f001 fb20 	bl	800c0a8 <xTaskCheckForTimeOut>
 800aa68:	4603      	mov	r3, r0
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d124      	bne.n	800aab8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800aa6e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aa70:	f000 fcf0 	bl	800b454 <prvIsQueueFull>
 800aa74:	4603      	mov	r3, r0
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d018      	beq.n	800aaac <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800aa7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa7c:	3310      	adds	r3, #16
 800aa7e:	687a      	ldr	r2, [r7, #4]
 800aa80:	4611      	mov	r1, r2
 800aa82:	4618      	mov	r0, r3
 800aa84:	f001 f9aa 	bl	800bddc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800aa88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aa8a:	f000 fc7b 	bl	800b384 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800aa8e:	f000 ffd3 	bl	800ba38 <xTaskResumeAll>
 800aa92:	4603      	mov	r3, r0
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	f47f af7c 	bne.w	800a992 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800aa9a:	4b0c      	ldr	r3, [pc, #48]	; (800aacc <xQueueGenericSend+0x1f8>)
 800aa9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aaa0:	601a      	str	r2, [r3, #0]
 800aaa2:	f3bf 8f4f 	dsb	sy
 800aaa6:	f3bf 8f6f 	isb	sy
 800aaaa:	e772      	b.n	800a992 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800aaac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aaae:	f000 fc69 	bl	800b384 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800aab2:	f000 ffc1 	bl	800ba38 <xTaskResumeAll>
 800aab6:	e76c      	b.n	800a992 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800aab8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aaba:	f000 fc63 	bl	800b384 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800aabe:	f000 ffbb 	bl	800ba38 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800aac2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800aac4:	4618      	mov	r0, r3
 800aac6:	3738      	adds	r7, #56	; 0x38
 800aac8:	46bd      	mov	sp, r7
 800aaca:	bd80      	pop	{r7, pc}
 800aacc:	e000ed04 	.word	0xe000ed04

0800aad0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800aad0:	b580      	push	{r7, lr}
 800aad2:	b090      	sub	sp, #64	; 0x40
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	60f8      	str	r0, [r7, #12]
 800aad8:	60b9      	str	r1, [r7, #8]
 800aada:	607a      	str	r2, [r7, #4]
 800aadc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800aae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d10a      	bne.n	800aafe <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800aae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaec:	f383 8811 	msr	BASEPRI, r3
 800aaf0:	f3bf 8f6f 	isb	sy
 800aaf4:	f3bf 8f4f 	dsb	sy
 800aaf8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800aafa:	bf00      	nop
 800aafc:	e7fe      	b.n	800aafc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aafe:	68bb      	ldr	r3, [r7, #8]
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d103      	bne.n	800ab0c <xQueueGenericSendFromISR+0x3c>
 800ab04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d101      	bne.n	800ab10 <xQueueGenericSendFromISR+0x40>
 800ab0c:	2301      	movs	r3, #1
 800ab0e:	e000      	b.n	800ab12 <xQueueGenericSendFromISR+0x42>
 800ab10:	2300      	movs	r3, #0
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d10a      	bne.n	800ab2c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800ab16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab1a:	f383 8811 	msr	BASEPRI, r3
 800ab1e:	f3bf 8f6f 	isb	sy
 800ab22:	f3bf 8f4f 	dsb	sy
 800ab26:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ab28:	bf00      	nop
 800ab2a:	e7fe      	b.n	800ab2a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ab2c:	683b      	ldr	r3, [r7, #0]
 800ab2e:	2b02      	cmp	r3, #2
 800ab30:	d103      	bne.n	800ab3a <xQueueGenericSendFromISR+0x6a>
 800ab32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab36:	2b01      	cmp	r3, #1
 800ab38:	d101      	bne.n	800ab3e <xQueueGenericSendFromISR+0x6e>
 800ab3a:	2301      	movs	r3, #1
 800ab3c:	e000      	b.n	800ab40 <xQueueGenericSendFromISR+0x70>
 800ab3e:	2300      	movs	r3, #0
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d10a      	bne.n	800ab5a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800ab44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab48:	f383 8811 	msr	BASEPRI, r3
 800ab4c:	f3bf 8f6f 	isb	sy
 800ab50:	f3bf 8f4f 	dsb	sy
 800ab54:	623b      	str	r3, [r7, #32]
}
 800ab56:	bf00      	nop
 800ab58:	e7fe      	b.n	800ab58 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ab5a:	f002 fb5d 	bl	800d218 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800ab5e:	f3ef 8211 	mrs	r2, BASEPRI
 800ab62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab66:	f383 8811 	msr	BASEPRI, r3
 800ab6a:	f3bf 8f6f 	isb	sy
 800ab6e:	f3bf 8f4f 	dsb	sy
 800ab72:	61fa      	str	r2, [r7, #28]
 800ab74:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800ab76:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ab78:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ab7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ab7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab82:	429a      	cmp	r2, r3
 800ab84:	d302      	bcc.n	800ab8c <xQueueGenericSendFromISR+0xbc>
 800ab86:	683b      	ldr	r3, [r7, #0]
 800ab88:	2b02      	cmp	r3, #2
 800ab8a:	d12f      	bne.n	800abec <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ab8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab8e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ab92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ab96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab9a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ab9c:	683a      	ldr	r2, [r7, #0]
 800ab9e:	68b9      	ldr	r1, [r7, #8]
 800aba0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800aba2:	f000 fb5f 	bl	800b264 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800aba6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800abaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abae:	d112      	bne.n	800abd6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800abb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d016      	beq.n	800abe6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800abb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abba:	3324      	adds	r3, #36	; 0x24
 800abbc:	4618      	mov	r0, r3
 800abbe:	f001 f999 	bl	800bef4 <xTaskRemoveFromEventList>
 800abc2:	4603      	mov	r3, r0
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d00e      	beq.n	800abe6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d00b      	beq.n	800abe6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	2201      	movs	r2, #1
 800abd2:	601a      	str	r2, [r3, #0]
 800abd4:	e007      	b.n	800abe6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800abd6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800abda:	3301      	adds	r3, #1
 800abdc:	b2db      	uxtb	r3, r3
 800abde:	b25a      	sxtb	r2, r3
 800abe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abe2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800abe6:	2301      	movs	r3, #1
 800abe8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800abea:	e001      	b.n	800abf0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800abec:	2300      	movs	r3, #0
 800abee:	63fb      	str	r3, [r7, #60]	; 0x3c
 800abf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abf2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800abf4:	697b      	ldr	r3, [r7, #20]
 800abf6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800abfa:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800abfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800abfe:	4618      	mov	r0, r3
 800ac00:	3740      	adds	r7, #64	; 0x40
 800ac02:	46bd      	mov	sp, r7
 800ac04:	bd80      	pop	{r7, pc}

0800ac06 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ac06:	b580      	push	{r7, lr}
 800ac08:	b08e      	sub	sp, #56	; 0x38
 800ac0a:	af00      	add	r7, sp, #0
 800ac0c:	6078      	str	r0, [r7, #4]
 800ac0e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800ac14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d10a      	bne.n	800ac30 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800ac1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac1e:	f383 8811 	msr	BASEPRI, r3
 800ac22:	f3bf 8f6f 	isb	sy
 800ac26:	f3bf 8f4f 	dsb	sy
 800ac2a:	623b      	str	r3, [r7, #32]
}
 800ac2c:	bf00      	nop
 800ac2e:	e7fe      	b.n	800ac2e <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ac30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d00a      	beq.n	800ac4e <xQueueGiveFromISR+0x48>
	__asm volatile
 800ac38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac3c:	f383 8811 	msr	BASEPRI, r3
 800ac40:	f3bf 8f6f 	isb	sy
 800ac44:	f3bf 8f4f 	dsb	sy
 800ac48:	61fb      	str	r3, [r7, #28]
}
 800ac4a:	bf00      	nop
 800ac4c:	e7fe      	b.n	800ac4c <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800ac4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d103      	bne.n	800ac5e <xQueueGiveFromISR+0x58>
 800ac56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac58:	689b      	ldr	r3, [r3, #8]
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d101      	bne.n	800ac62 <xQueueGiveFromISR+0x5c>
 800ac5e:	2301      	movs	r3, #1
 800ac60:	e000      	b.n	800ac64 <xQueueGiveFromISR+0x5e>
 800ac62:	2300      	movs	r3, #0
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d10a      	bne.n	800ac7e <xQueueGiveFromISR+0x78>
	__asm volatile
 800ac68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac6c:	f383 8811 	msr	BASEPRI, r3
 800ac70:	f3bf 8f6f 	isb	sy
 800ac74:	f3bf 8f4f 	dsb	sy
 800ac78:	61bb      	str	r3, [r7, #24]
}
 800ac7a:	bf00      	nop
 800ac7c:	e7fe      	b.n	800ac7c <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ac7e:	f002 facb 	bl	800d218 <vPortValidateInterruptPriority>
	__asm volatile
 800ac82:	f3ef 8211 	mrs	r2, BASEPRI
 800ac86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac8a:	f383 8811 	msr	BASEPRI, r3
 800ac8e:	f3bf 8f6f 	isb	sy
 800ac92:	f3bf 8f4f 	dsb	sy
 800ac96:	617a      	str	r2, [r7, #20]
 800ac98:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800ac9a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ac9c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ac9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aca2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800aca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aca6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aca8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800acaa:	429a      	cmp	r2, r3
 800acac:	d22b      	bcs.n	800ad06 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800acae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acb0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800acb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800acb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acba:	1c5a      	adds	r2, r3, #1
 800acbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acbe:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800acc0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800acc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acc8:	d112      	bne.n	800acf0 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800acca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800accc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d016      	beq.n	800ad00 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800acd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acd4:	3324      	adds	r3, #36	; 0x24
 800acd6:	4618      	mov	r0, r3
 800acd8:	f001 f90c 	bl	800bef4 <xTaskRemoveFromEventList>
 800acdc:	4603      	mov	r3, r0
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d00e      	beq.n	800ad00 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ace2:	683b      	ldr	r3, [r7, #0]
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d00b      	beq.n	800ad00 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ace8:	683b      	ldr	r3, [r7, #0]
 800acea:	2201      	movs	r2, #1
 800acec:	601a      	str	r2, [r3, #0]
 800acee:	e007      	b.n	800ad00 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800acf0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800acf4:	3301      	adds	r3, #1
 800acf6:	b2db      	uxtb	r3, r3
 800acf8:	b25a      	sxtb	r2, r3
 800acfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ad00:	2301      	movs	r3, #1
 800ad02:	637b      	str	r3, [r7, #52]	; 0x34
 800ad04:	e001      	b.n	800ad0a <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ad06:	2300      	movs	r3, #0
 800ad08:	637b      	str	r3, [r7, #52]	; 0x34
 800ad0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad0c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	f383 8811 	msr	BASEPRI, r3
}
 800ad14:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ad16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ad18:	4618      	mov	r0, r3
 800ad1a:	3738      	adds	r7, #56	; 0x38
 800ad1c:	46bd      	mov	sp, r7
 800ad1e:	bd80      	pop	{r7, pc}

0800ad20 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ad20:	b580      	push	{r7, lr}
 800ad22:	b08c      	sub	sp, #48	; 0x30
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	60f8      	str	r0, [r7, #12]
 800ad28:	60b9      	str	r1, [r7, #8]
 800ad2a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ad2c:	2300      	movs	r3, #0
 800ad2e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ad34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d10a      	bne.n	800ad50 <xQueueReceive+0x30>
	__asm volatile
 800ad3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad3e:	f383 8811 	msr	BASEPRI, r3
 800ad42:	f3bf 8f6f 	isb	sy
 800ad46:	f3bf 8f4f 	dsb	sy
 800ad4a:	623b      	str	r3, [r7, #32]
}
 800ad4c:	bf00      	nop
 800ad4e:	e7fe      	b.n	800ad4e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ad50:	68bb      	ldr	r3, [r7, #8]
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d103      	bne.n	800ad5e <xQueueReceive+0x3e>
 800ad56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d101      	bne.n	800ad62 <xQueueReceive+0x42>
 800ad5e:	2301      	movs	r3, #1
 800ad60:	e000      	b.n	800ad64 <xQueueReceive+0x44>
 800ad62:	2300      	movs	r3, #0
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d10a      	bne.n	800ad7e <xQueueReceive+0x5e>
	__asm volatile
 800ad68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad6c:	f383 8811 	msr	BASEPRI, r3
 800ad70:	f3bf 8f6f 	isb	sy
 800ad74:	f3bf 8f4f 	dsb	sy
 800ad78:	61fb      	str	r3, [r7, #28]
}
 800ad7a:	bf00      	nop
 800ad7c:	e7fe      	b.n	800ad7c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ad7e:	f001 fab7 	bl	800c2f0 <xTaskGetSchedulerState>
 800ad82:	4603      	mov	r3, r0
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d102      	bne.n	800ad8e <xQueueReceive+0x6e>
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d101      	bne.n	800ad92 <xQueueReceive+0x72>
 800ad8e:	2301      	movs	r3, #1
 800ad90:	e000      	b.n	800ad94 <xQueueReceive+0x74>
 800ad92:	2300      	movs	r3, #0
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d10a      	bne.n	800adae <xQueueReceive+0x8e>
	__asm volatile
 800ad98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad9c:	f383 8811 	msr	BASEPRI, r3
 800ada0:	f3bf 8f6f 	isb	sy
 800ada4:	f3bf 8f4f 	dsb	sy
 800ada8:	61bb      	str	r3, [r7, #24]
}
 800adaa:	bf00      	nop
 800adac:	e7fe      	b.n	800adac <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800adae:	f002 f951 	bl	800d054 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800adb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adb6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800adb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d01f      	beq.n	800adfe <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800adbe:	68b9      	ldr	r1, [r7, #8]
 800adc0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800adc2:	f000 fab9 	bl	800b338 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800adc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adc8:	1e5a      	subs	r2, r3, #1
 800adca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adcc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800adce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800add0:	691b      	ldr	r3, [r3, #16]
 800add2:	2b00      	cmp	r3, #0
 800add4:	d00f      	beq.n	800adf6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800add6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800add8:	3310      	adds	r3, #16
 800adda:	4618      	mov	r0, r3
 800addc:	f001 f88a 	bl	800bef4 <xTaskRemoveFromEventList>
 800ade0:	4603      	mov	r3, r0
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d007      	beq.n	800adf6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ade6:	4b3d      	ldr	r3, [pc, #244]	; (800aedc <xQueueReceive+0x1bc>)
 800ade8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800adec:	601a      	str	r2, [r3, #0]
 800adee:	f3bf 8f4f 	dsb	sy
 800adf2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800adf6:	f002 f95d 	bl	800d0b4 <vPortExitCritical>
				return pdPASS;
 800adfa:	2301      	movs	r3, #1
 800adfc:	e069      	b.n	800aed2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d103      	bne.n	800ae0c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ae04:	f002 f956 	bl	800d0b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ae08:	2300      	movs	r3, #0
 800ae0a:	e062      	b.n	800aed2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ae0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d106      	bne.n	800ae20 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ae12:	f107 0310 	add.w	r3, r7, #16
 800ae16:	4618      	mov	r0, r3
 800ae18:	f001 f930 	bl	800c07c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ae1c:	2301      	movs	r3, #1
 800ae1e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ae20:	f002 f948 	bl	800d0b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ae24:	f000 fdfa 	bl	800ba1c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ae28:	f002 f914 	bl	800d054 <vPortEnterCritical>
 800ae2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae2e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ae32:	b25b      	sxtb	r3, r3
 800ae34:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae38:	d103      	bne.n	800ae42 <xQueueReceive+0x122>
 800ae3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae3c:	2200      	movs	r2, #0
 800ae3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ae42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae44:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ae48:	b25b      	sxtb	r3, r3
 800ae4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae4e:	d103      	bne.n	800ae58 <xQueueReceive+0x138>
 800ae50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae52:	2200      	movs	r2, #0
 800ae54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ae58:	f002 f92c 	bl	800d0b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ae5c:	1d3a      	adds	r2, r7, #4
 800ae5e:	f107 0310 	add.w	r3, r7, #16
 800ae62:	4611      	mov	r1, r2
 800ae64:	4618      	mov	r0, r3
 800ae66:	f001 f91f 	bl	800c0a8 <xTaskCheckForTimeOut>
 800ae6a:	4603      	mov	r3, r0
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d123      	bne.n	800aeb8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ae70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ae72:	f000 fad9 	bl	800b428 <prvIsQueueEmpty>
 800ae76:	4603      	mov	r3, r0
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d017      	beq.n	800aeac <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ae7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae7e:	3324      	adds	r3, #36	; 0x24
 800ae80:	687a      	ldr	r2, [r7, #4]
 800ae82:	4611      	mov	r1, r2
 800ae84:	4618      	mov	r0, r3
 800ae86:	f000 ffa9 	bl	800bddc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ae8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ae8c:	f000 fa7a 	bl	800b384 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ae90:	f000 fdd2 	bl	800ba38 <xTaskResumeAll>
 800ae94:	4603      	mov	r3, r0
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d189      	bne.n	800adae <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800ae9a:	4b10      	ldr	r3, [pc, #64]	; (800aedc <xQueueReceive+0x1bc>)
 800ae9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aea0:	601a      	str	r2, [r3, #0]
 800aea2:	f3bf 8f4f 	dsb	sy
 800aea6:	f3bf 8f6f 	isb	sy
 800aeaa:	e780      	b.n	800adae <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800aeac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aeae:	f000 fa69 	bl	800b384 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800aeb2:	f000 fdc1 	bl	800ba38 <xTaskResumeAll>
 800aeb6:	e77a      	b.n	800adae <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800aeb8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aeba:	f000 fa63 	bl	800b384 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800aebe:	f000 fdbb 	bl	800ba38 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800aec2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aec4:	f000 fab0 	bl	800b428 <prvIsQueueEmpty>
 800aec8:	4603      	mov	r3, r0
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	f43f af6f 	beq.w	800adae <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800aed0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800aed2:	4618      	mov	r0, r3
 800aed4:	3730      	adds	r7, #48	; 0x30
 800aed6:	46bd      	mov	sp, r7
 800aed8:	bd80      	pop	{r7, pc}
 800aeda:	bf00      	nop
 800aedc:	e000ed04 	.word	0xe000ed04

0800aee0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800aee0:	b580      	push	{r7, lr}
 800aee2:	b08e      	sub	sp, #56	; 0x38
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	6078      	str	r0, [r7, #4]
 800aee8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800aeea:	2300      	movs	r3, #0
 800aeec:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800aef2:	2300      	movs	r3, #0
 800aef4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800aef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d10a      	bne.n	800af12 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800aefc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af00:	f383 8811 	msr	BASEPRI, r3
 800af04:	f3bf 8f6f 	isb	sy
 800af08:	f3bf 8f4f 	dsb	sy
 800af0c:	623b      	str	r3, [r7, #32]
}
 800af0e:	bf00      	nop
 800af10:	e7fe      	b.n	800af10 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800af12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af16:	2b00      	cmp	r3, #0
 800af18:	d00a      	beq.n	800af30 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800af1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af1e:	f383 8811 	msr	BASEPRI, r3
 800af22:	f3bf 8f6f 	isb	sy
 800af26:	f3bf 8f4f 	dsb	sy
 800af2a:	61fb      	str	r3, [r7, #28]
}
 800af2c:	bf00      	nop
 800af2e:	e7fe      	b.n	800af2e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800af30:	f001 f9de 	bl	800c2f0 <xTaskGetSchedulerState>
 800af34:	4603      	mov	r3, r0
 800af36:	2b00      	cmp	r3, #0
 800af38:	d102      	bne.n	800af40 <xQueueSemaphoreTake+0x60>
 800af3a:	683b      	ldr	r3, [r7, #0]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d101      	bne.n	800af44 <xQueueSemaphoreTake+0x64>
 800af40:	2301      	movs	r3, #1
 800af42:	e000      	b.n	800af46 <xQueueSemaphoreTake+0x66>
 800af44:	2300      	movs	r3, #0
 800af46:	2b00      	cmp	r3, #0
 800af48:	d10a      	bne.n	800af60 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800af4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af4e:	f383 8811 	msr	BASEPRI, r3
 800af52:	f3bf 8f6f 	isb	sy
 800af56:	f3bf 8f4f 	dsb	sy
 800af5a:	61bb      	str	r3, [r7, #24]
}
 800af5c:	bf00      	nop
 800af5e:	e7fe      	b.n	800af5e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800af60:	f002 f878 	bl	800d054 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800af64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af68:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800af6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d024      	beq.n	800afba <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800af70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af72:	1e5a      	subs	r2, r3, #1
 800af74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af76:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800af78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d104      	bne.n	800af8a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800af80:	f001 fb76 	bl	800c670 <pvTaskIncrementMutexHeldCount>
 800af84:	4602      	mov	r2, r0
 800af86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af88:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800af8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af8c:	691b      	ldr	r3, [r3, #16]
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d00f      	beq.n	800afb2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800af92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af94:	3310      	adds	r3, #16
 800af96:	4618      	mov	r0, r3
 800af98:	f000 ffac 	bl	800bef4 <xTaskRemoveFromEventList>
 800af9c:	4603      	mov	r3, r0
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d007      	beq.n	800afb2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800afa2:	4b54      	ldr	r3, [pc, #336]	; (800b0f4 <xQueueSemaphoreTake+0x214>)
 800afa4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800afa8:	601a      	str	r2, [r3, #0]
 800afaa:	f3bf 8f4f 	dsb	sy
 800afae:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800afb2:	f002 f87f 	bl	800d0b4 <vPortExitCritical>
				return pdPASS;
 800afb6:	2301      	movs	r3, #1
 800afb8:	e097      	b.n	800b0ea <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800afba:	683b      	ldr	r3, [r7, #0]
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d111      	bne.n	800afe4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800afc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d00a      	beq.n	800afdc <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800afc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afca:	f383 8811 	msr	BASEPRI, r3
 800afce:	f3bf 8f6f 	isb	sy
 800afd2:	f3bf 8f4f 	dsb	sy
 800afd6:	617b      	str	r3, [r7, #20]
}
 800afd8:	bf00      	nop
 800afda:	e7fe      	b.n	800afda <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800afdc:	f002 f86a 	bl	800d0b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800afe0:	2300      	movs	r3, #0
 800afe2:	e082      	b.n	800b0ea <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800afe4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d106      	bne.n	800aff8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800afea:	f107 030c 	add.w	r3, r7, #12
 800afee:	4618      	mov	r0, r3
 800aff0:	f001 f844 	bl	800c07c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800aff4:	2301      	movs	r3, #1
 800aff6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800aff8:	f002 f85c 	bl	800d0b4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800affc:	f000 fd0e 	bl	800ba1c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b000:	f002 f828 	bl	800d054 <vPortEnterCritical>
 800b004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b006:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b00a:	b25b      	sxtb	r3, r3
 800b00c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b010:	d103      	bne.n	800b01a <xQueueSemaphoreTake+0x13a>
 800b012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b014:	2200      	movs	r2, #0
 800b016:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b01a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b01c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b020:	b25b      	sxtb	r3, r3
 800b022:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b026:	d103      	bne.n	800b030 <xQueueSemaphoreTake+0x150>
 800b028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b02a:	2200      	movs	r2, #0
 800b02c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b030:	f002 f840 	bl	800d0b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b034:	463a      	mov	r2, r7
 800b036:	f107 030c 	add.w	r3, r7, #12
 800b03a:	4611      	mov	r1, r2
 800b03c:	4618      	mov	r0, r3
 800b03e:	f001 f833 	bl	800c0a8 <xTaskCheckForTimeOut>
 800b042:	4603      	mov	r3, r0
 800b044:	2b00      	cmp	r3, #0
 800b046:	d132      	bne.n	800b0ae <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b048:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b04a:	f000 f9ed 	bl	800b428 <prvIsQueueEmpty>
 800b04e:	4603      	mov	r3, r0
 800b050:	2b00      	cmp	r3, #0
 800b052:	d026      	beq.n	800b0a2 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d109      	bne.n	800b070 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800b05c:	f001 fffa 	bl	800d054 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b062:	689b      	ldr	r3, [r3, #8]
 800b064:	4618      	mov	r0, r3
 800b066:	f001 f961 	bl	800c32c <xTaskPriorityInherit>
 800b06a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800b06c:	f002 f822 	bl	800d0b4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b072:	3324      	adds	r3, #36	; 0x24
 800b074:	683a      	ldr	r2, [r7, #0]
 800b076:	4611      	mov	r1, r2
 800b078:	4618      	mov	r0, r3
 800b07a:	f000 feaf 	bl	800bddc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b07e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b080:	f000 f980 	bl	800b384 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b084:	f000 fcd8 	bl	800ba38 <xTaskResumeAll>
 800b088:	4603      	mov	r3, r0
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	f47f af68 	bne.w	800af60 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800b090:	4b18      	ldr	r3, [pc, #96]	; (800b0f4 <xQueueSemaphoreTake+0x214>)
 800b092:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b096:	601a      	str	r2, [r3, #0]
 800b098:	f3bf 8f4f 	dsb	sy
 800b09c:	f3bf 8f6f 	isb	sy
 800b0a0:	e75e      	b.n	800af60 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800b0a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b0a4:	f000 f96e 	bl	800b384 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b0a8:	f000 fcc6 	bl	800ba38 <xTaskResumeAll>
 800b0ac:	e758      	b.n	800af60 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800b0ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b0b0:	f000 f968 	bl	800b384 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b0b4:	f000 fcc0 	bl	800ba38 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b0b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b0ba:	f000 f9b5 	bl	800b428 <prvIsQueueEmpty>
 800b0be:	4603      	mov	r3, r0
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	f43f af4d 	beq.w	800af60 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800b0c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d00d      	beq.n	800b0e8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800b0cc:	f001 ffc2 	bl	800d054 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800b0d0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b0d2:	f000 f8af 	bl	800b234 <prvGetDisinheritPriorityAfterTimeout>
 800b0d6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800b0d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0da:	689b      	ldr	r3, [r3, #8]
 800b0dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b0de:	4618      	mov	r0, r3
 800b0e0:	f001 fa20 	bl	800c524 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800b0e4:	f001 ffe6 	bl	800d0b4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b0e8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b0ea:	4618      	mov	r0, r3
 800b0ec:	3738      	adds	r7, #56	; 0x38
 800b0ee:	46bd      	mov	sp, r7
 800b0f0:	bd80      	pop	{r7, pc}
 800b0f2:	bf00      	nop
 800b0f4:	e000ed04 	.word	0xe000ed04

0800b0f8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b0f8:	b580      	push	{r7, lr}
 800b0fa:	b08e      	sub	sp, #56	; 0x38
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	60f8      	str	r0, [r7, #12]
 800b100:	60b9      	str	r1, [r7, #8]
 800b102:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d10a      	bne.n	800b124 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800b10e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b112:	f383 8811 	msr	BASEPRI, r3
 800b116:	f3bf 8f6f 	isb	sy
 800b11a:	f3bf 8f4f 	dsb	sy
 800b11e:	623b      	str	r3, [r7, #32]
}
 800b120:	bf00      	nop
 800b122:	e7fe      	b.n	800b122 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b124:	68bb      	ldr	r3, [r7, #8]
 800b126:	2b00      	cmp	r3, #0
 800b128:	d103      	bne.n	800b132 <xQueueReceiveFromISR+0x3a>
 800b12a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b12c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d101      	bne.n	800b136 <xQueueReceiveFromISR+0x3e>
 800b132:	2301      	movs	r3, #1
 800b134:	e000      	b.n	800b138 <xQueueReceiveFromISR+0x40>
 800b136:	2300      	movs	r3, #0
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d10a      	bne.n	800b152 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800b13c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b140:	f383 8811 	msr	BASEPRI, r3
 800b144:	f3bf 8f6f 	isb	sy
 800b148:	f3bf 8f4f 	dsb	sy
 800b14c:	61fb      	str	r3, [r7, #28]
}
 800b14e:	bf00      	nop
 800b150:	e7fe      	b.n	800b150 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b152:	f002 f861 	bl	800d218 <vPortValidateInterruptPriority>
	__asm volatile
 800b156:	f3ef 8211 	mrs	r2, BASEPRI
 800b15a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b15e:	f383 8811 	msr	BASEPRI, r3
 800b162:	f3bf 8f6f 	isb	sy
 800b166:	f3bf 8f4f 	dsb	sy
 800b16a:	61ba      	str	r2, [r7, #24]
 800b16c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800b16e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b170:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b176:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d02f      	beq.n	800b1de <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800b17e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b180:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b184:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b188:	68b9      	ldr	r1, [r7, #8]
 800b18a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b18c:	f000 f8d4 	bl	800b338 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b192:	1e5a      	subs	r2, r3, #1
 800b194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b196:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800b198:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b19c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1a0:	d112      	bne.n	800b1c8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b1a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1a4:	691b      	ldr	r3, [r3, #16]
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d016      	beq.n	800b1d8 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b1aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1ac:	3310      	adds	r3, #16
 800b1ae:	4618      	mov	r0, r3
 800b1b0:	f000 fea0 	bl	800bef4 <xTaskRemoveFromEventList>
 800b1b4:	4603      	mov	r3, r0
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d00e      	beq.n	800b1d8 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d00b      	beq.n	800b1d8 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	2201      	movs	r2, #1
 800b1c4:	601a      	str	r2, [r3, #0]
 800b1c6:	e007      	b.n	800b1d8 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800b1c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b1cc:	3301      	adds	r3, #1
 800b1ce:	b2db      	uxtb	r3, r3
 800b1d0:	b25a      	sxtb	r2, r3
 800b1d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800b1d8:	2301      	movs	r3, #1
 800b1da:	637b      	str	r3, [r7, #52]	; 0x34
 800b1dc:	e001      	b.n	800b1e2 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800b1de:	2300      	movs	r3, #0
 800b1e0:	637b      	str	r3, [r7, #52]	; 0x34
 800b1e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1e4:	613b      	str	r3, [r7, #16]
	__asm volatile
 800b1e6:	693b      	ldr	r3, [r7, #16]
 800b1e8:	f383 8811 	msr	BASEPRI, r3
}
 800b1ec:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b1ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b1f0:	4618      	mov	r0, r3
 800b1f2:	3738      	adds	r7, #56	; 0x38
 800b1f4:	46bd      	mov	sp, r7
 800b1f6:	bd80      	pop	{r7, pc}

0800b1f8 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800b1f8:	b580      	push	{r7, lr}
 800b1fa:	b084      	sub	sp, #16
 800b1fc:	af00      	add	r7, sp, #0
 800b1fe:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	2b00      	cmp	r3, #0
 800b208:	d10a      	bne.n	800b220 <vQueueDelete+0x28>
	__asm volatile
 800b20a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b20e:	f383 8811 	msr	BASEPRI, r3
 800b212:	f3bf 8f6f 	isb	sy
 800b216:	f3bf 8f4f 	dsb	sy
 800b21a:	60bb      	str	r3, [r7, #8]
}
 800b21c:	bf00      	nop
 800b21e:	e7fe      	b.n	800b21e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800b220:	68f8      	ldr	r0, [r7, #12]
 800b222:	f000 f959 	bl	800b4d8 <vQueueUnregisterQueue>

	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
	{
		/* The queue can only have been allocated dynamically - free it
		again. */
		vPortFree( pxQueue );
 800b226:	68f8      	ldr	r0, [r7, #12]
 800b228:	f002 f902 	bl	800d430 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800b22c:	bf00      	nop
 800b22e:	3710      	adds	r7, #16
 800b230:	46bd      	mov	sp, r7
 800b232:	bd80      	pop	{r7, pc}

0800b234 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800b234:	b480      	push	{r7}
 800b236:	b085      	sub	sp, #20
 800b238:	af00      	add	r7, sp, #0
 800b23a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b240:	2b00      	cmp	r3, #0
 800b242:	d006      	beq.n	800b252 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	f1c3 0307 	rsb	r3, r3, #7
 800b24e:	60fb      	str	r3, [r7, #12]
 800b250:	e001      	b.n	800b256 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800b252:	2300      	movs	r3, #0
 800b254:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800b256:	68fb      	ldr	r3, [r7, #12]
	}
 800b258:	4618      	mov	r0, r3
 800b25a:	3714      	adds	r7, #20
 800b25c:	46bd      	mov	sp, r7
 800b25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b262:	4770      	bx	lr

0800b264 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b264:	b580      	push	{r7, lr}
 800b266:	b086      	sub	sp, #24
 800b268:	af00      	add	r7, sp, #0
 800b26a:	60f8      	str	r0, [r7, #12]
 800b26c:	60b9      	str	r1, [r7, #8]
 800b26e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b270:	2300      	movs	r3, #0
 800b272:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b278:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d10d      	bne.n	800b29e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	2b00      	cmp	r3, #0
 800b288:	d14d      	bne.n	800b326 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	689b      	ldr	r3, [r3, #8]
 800b28e:	4618      	mov	r0, r3
 800b290:	f001 f8c2 	bl	800c418 <xTaskPriorityDisinherit>
 800b294:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	2200      	movs	r2, #0
 800b29a:	609a      	str	r2, [r3, #8]
 800b29c:	e043      	b.n	800b326 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d119      	bne.n	800b2d8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	6858      	ldr	r0, [r3, #4]
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2ac:	461a      	mov	r2, r3
 800b2ae:	68b9      	ldr	r1, [r7, #8]
 800b2b0:	f00f fb70 	bl	801a994 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	685a      	ldr	r2, [r3, #4]
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2bc:	441a      	add	r2, r3
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	685a      	ldr	r2, [r3, #4]
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	689b      	ldr	r3, [r3, #8]
 800b2ca:	429a      	cmp	r2, r3
 800b2cc:	d32b      	bcc.n	800b326 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	681a      	ldr	r2, [r3, #0]
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	605a      	str	r2, [r3, #4]
 800b2d6:	e026      	b.n	800b326 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	68d8      	ldr	r0, [r3, #12]
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2e0:	461a      	mov	r2, r3
 800b2e2:	68b9      	ldr	r1, [r7, #8]
 800b2e4:	f00f fb56 	bl	801a994 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	68da      	ldr	r2, [r3, #12]
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2f0:	425b      	negs	r3, r3
 800b2f2:	441a      	add	r2, r3
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	68da      	ldr	r2, [r3, #12]
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	429a      	cmp	r2, r3
 800b302:	d207      	bcs.n	800b314 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	689a      	ldr	r2, [r3, #8]
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b30c:	425b      	negs	r3, r3
 800b30e:	441a      	add	r2, r3
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	2b02      	cmp	r3, #2
 800b318:	d105      	bne.n	800b326 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b31a:	693b      	ldr	r3, [r7, #16]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d002      	beq.n	800b326 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b320:	693b      	ldr	r3, [r7, #16]
 800b322:	3b01      	subs	r3, #1
 800b324:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b326:	693b      	ldr	r3, [r7, #16]
 800b328:	1c5a      	adds	r2, r3, #1
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b32e:	697b      	ldr	r3, [r7, #20]
}
 800b330:	4618      	mov	r0, r3
 800b332:	3718      	adds	r7, #24
 800b334:	46bd      	mov	sp, r7
 800b336:	bd80      	pop	{r7, pc}

0800b338 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b338:	b580      	push	{r7, lr}
 800b33a:	b082      	sub	sp, #8
 800b33c:	af00      	add	r7, sp, #0
 800b33e:	6078      	str	r0, [r7, #4]
 800b340:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b346:	2b00      	cmp	r3, #0
 800b348:	d018      	beq.n	800b37c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	68da      	ldr	r2, [r3, #12]
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b352:	441a      	add	r2, r3
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	68da      	ldr	r2, [r3, #12]
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	689b      	ldr	r3, [r3, #8]
 800b360:	429a      	cmp	r2, r3
 800b362:	d303      	bcc.n	800b36c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	681a      	ldr	r2, [r3, #0]
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	68d9      	ldr	r1, [r3, #12]
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b374:	461a      	mov	r2, r3
 800b376:	6838      	ldr	r0, [r7, #0]
 800b378:	f00f fb0c 	bl	801a994 <memcpy>
	}
}
 800b37c:	bf00      	nop
 800b37e:	3708      	adds	r7, #8
 800b380:	46bd      	mov	sp, r7
 800b382:	bd80      	pop	{r7, pc}

0800b384 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b384:	b580      	push	{r7, lr}
 800b386:	b084      	sub	sp, #16
 800b388:	af00      	add	r7, sp, #0
 800b38a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b38c:	f001 fe62 	bl	800d054 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b396:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b398:	e011      	b.n	800b3be <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d012      	beq.n	800b3c8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	3324      	adds	r3, #36	; 0x24
 800b3a6:	4618      	mov	r0, r3
 800b3a8:	f000 fda4 	bl	800bef4 <xTaskRemoveFromEventList>
 800b3ac:	4603      	mov	r3, r0
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d001      	beq.n	800b3b6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b3b2:	f000 fedb 	bl	800c16c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b3b6:	7bfb      	ldrb	r3, [r7, #15]
 800b3b8:	3b01      	subs	r3, #1
 800b3ba:	b2db      	uxtb	r3, r3
 800b3bc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b3be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	dce9      	bgt.n	800b39a <prvUnlockQueue+0x16>
 800b3c6:	e000      	b.n	800b3ca <prvUnlockQueue+0x46>
					break;
 800b3c8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	22ff      	movs	r2, #255	; 0xff
 800b3ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b3d2:	f001 fe6f 	bl	800d0b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b3d6:	f001 fe3d 	bl	800d054 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b3e0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b3e2:	e011      	b.n	800b408 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	691b      	ldr	r3, [r3, #16]
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d012      	beq.n	800b412 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	3310      	adds	r3, #16
 800b3f0:	4618      	mov	r0, r3
 800b3f2:	f000 fd7f 	bl	800bef4 <xTaskRemoveFromEventList>
 800b3f6:	4603      	mov	r3, r0
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d001      	beq.n	800b400 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b3fc:	f000 feb6 	bl	800c16c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b400:	7bbb      	ldrb	r3, [r7, #14]
 800b402:	3b01      	subs	r3, #1
 800b404:	b2db      	uxtb	r3, r3
 800b406:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b408:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	dce9      	bgt.n	800b3e4 <prvUnlockQueue+0x60>
 800b410:	e000      	b.n	800b414 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b412:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	22ff      	movs	r2, #255	; 0xff
 800b418:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b41c:	f001 fe4a 	bl	800d0b4 <vPortExitCritical>
}
 800b420:	bf00      	nop
 800b422:	3710      	adds	r7, #16
 800b424:	46bd      	mov	sp, r7
 800b426:	bd80      	pop	{r7, pc}

0800b428 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b428:	b580      	push	{r7, lr}
 800b42a:	b084      	sub	sp, #16
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b430:	f001 fe10 	bl	800d054 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d102      	bne.n	800b442 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b43c:	2301      	movs	r3, #1
 800b43e:	60fb      	str	r3, [r7, #12]
 800b440:	e001      	b.n	800b446 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b442:	2300      	movs	r3, #0
 800b444:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b446:	f001 fe35 	bl	800d0b4 <vPortExitCritical>

	return xReturn;
 800b44a:	68fb      	ldr	r3, [r7, #12]
}
 800b44c:	4618      	mov	r0, r3
 800b44e:	3710      	adds	r7, #16
 800b450:	46bd      	mov	sp, r7
 800b452:	bd80      	pop	{r7, pc}

0800b454 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b454:	b580      	push	{r7, lr}
 800b456:	b084      	sub	sp, #16
 800b458:	af00      	add	r7, sp, #0
 800b45a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b45c:	f001 fdfa 	bl	800d054 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b468:	429a      	cmp	r2, r3
 800b46a:	d102      	bne.n	800b472 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b46c:	2301      	movs	r3, #1
 800b46e:	60fb      	str	r3, [r7, #12]
 800b470:	e001      	b.n	800b476 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b472:	2300      	movs	r3, #0
 800b474:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b476:	f001 fe1d 	bl	800d0b4 <vPortExitCritical>

	return xReturn;
 800b47a:	68fb      	ldr	r3, [r7, #12]
}
 800b47c:	4618      	mov	r0, r3
 800b47e:	3710      	adds	r7, #16
 800b480:	46bd      	mov	sp, r7
 800b482:	bd80      	pop	{r7, pc}

0800b484 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b484:	b480      	push	{r7}
 800b486:	b085      	sub	sp, #20
 800b488:	af00      	add	r7, sp, #0
 800b48a:	6078      	str	r0, [r7, #4]
 800b48c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b48e:	2300      	movs	r3, #0
 800b490:	60fb      	str	r3, [r7, #12]
 800b492:	e014      	b.n	800b4be <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b494:	4a0f      	ldr	r2, [pc, #60]	; (800b4d4 <vQueueAddToRegistry+0x50>)
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d10b      	bne.n	800b4b8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b4a0:	490c      	ldr	r1, [pc, #48]	; (800b4d4 <vQueueAddToRegistry+0x50>)
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	683a      	ldr	r2, [r7, #0]
 800b4a6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b4aa:	4a0a      	ldr	r2, [pc, #40]	; (800b4d4 <vQueueAddToRegistry+0x50>)
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	00db      	lsls	r3, r3, #3
 800b4b0:	4413      	add	r3, r2
 800b4b2:	687a      	ldr	r2, [r7, #4]
 800b4b4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b4b6:	e006      	b.n	800b4c6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	3301      	adds	r3, #1
 800b4bc:	60fb      	str	r3, [r7, #12]
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	2b07      	cmp	r3, #7
 800b4c2:	d9e7      	bls.n	800b494 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b4c4:	bf00      	nop
 800b4c6:	bf00      	nop
 800b4c8:	3714      	adds	r7, #20
 800b4ca:	46bd      	mov	sp, r7
 800b4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d0:	4770      	bx	lr
 800b4d2:	bf00      	nop
 800b4d4:	20001320 	.word	0x20001320

0800b4d8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800b4d8:	b480      	push	{r7}
 800b4da:	b085      	sub	sp, #20
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b4e0:	2300      	movs	r3, #0
 800b4e2:	60fb      	str	r3, [r7, #12]
 800b4e4:	e016      	b.n	800b514 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800b4e6:	4a10      	ldr	r2, [pc, #64]	; (800b528 <vQueueUnregisterQueue+0x50>)
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	00db      	lsls	r3, r3, #3
 800b4ec:	4413      	add	r3, r2
 800b4ee:	685b      	ldr	r3, [r3, #4]
 800b4f0:	687a      	ldr	r2, [r7, #4]
 800b4f2:	429a      	cmp	r2, r3
 800b4f4:	d10b      	bne.n	800b50e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800b4f6:	4a0c      	ldr	r2, [pc, #48]	; (800b528 <vQueueUnregisterQueue+0x50>)
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	2100      	movs	r1, #0
 800b4fc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800b500:	4a09      	ldr	r2, [pc, #36]	; (800b528 <vQueueUnregisterQueue+0x50>)
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	00db      	lsls	r3, r3, #3
 800b506:	4413      	add	r3, r2
 800b508:	2200      	movs	r2, #0
 800b50a:	605a      	str	r2, [r3, #4]
				break;
 800b50c:	e006      	b.n	800b51c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	3301      	adds	r3, #1
 800b512:	60fb      	str	r3, [r7, #12]
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	2b07      	cmp	r3, #7
 800b518:	d9e5      	bls.n	800b4e6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800b51a:	bf00      	nop
 800b51c:	bf00      	nop
 800b51e:	3714      	adds	r7, #20
 800b520:	46bd      	mov	sp, r7
 800b522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b526:	4770      	bx	lr
 800b528:	20001320 	.word	0x20001320

0800b52c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b52c:	b580      	push	{r7, lr}
 800b52e:	b086      	sub	sp, #24
 800b530:	af00      	add	r7, sp, #0
 800b532:	60f8      	str	r0, [r7, #12]
 800b534:	60b9      	str	r1, [r7, #8]
 800b536:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b53c:	f001 fd8a 	bl	800d054 <vPortEnterCritical>
 800b540:	697b      	ldr	r3, [r7, #20]
 800b542:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b546:	b25b      	sxtb	r3, r3
 800b548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b54c:	d103      	bne.n	800b556 <vQueueWaitForMessageRestricted+0x2a>
 800b54e:	697b      	ldr	r3, [r7, #20]
 800b550:	2200      	movs	r2, #0
 800b552:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b556:	697b      	ldr	r3, [r7, #20]
 800b558:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b55c:	b25b      	sxtb	r3, r3
 800b55e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b562:	d103      	bne.n	800b56c <vQueueWaitForMessageRestricted+0x40>
 800b564:	697b      	ldr	r3, [r7, #20]
 800b566:	2200      	movs	r2, #0
 800b568:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b56c:	f001 fda2 	bl	800d0b4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b570:	697b      	ldr	r3, [r7, #20]
 800b572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b574:	2b00      	cmp	r3, #0
 800b576:	d106      	bne.n	800b586 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b578:	697b      	ldr	r3, [r7, #20]
 800b57a:	3324      	adds	r3, #36	; 0x24
 800b57c:	687a      	ldr	r2, [r7, #4]
 800b57e:	68b9      	ldr	r1, [r7, #8]
 800b580:	4618      	mov	r0, r3
 800b582:	f000 fc8b 	bl	800be9c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b586:	6978      	ldr	r0, [r7, #20]
 800b588:	f7ff fefc 	bl	800b384 <prvUnlockQueue>
	}
 800b58c:	bf00      	nop
 800b58e:	3718      	adds	r7, #24
 800b590:	46bd      	mov	sp, r7
 800b592:	bd80      	pop	{r7, pc}

0800b594 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b594:	b580      	push	{r7, lr}
 800b596:	b08c      	sub	sp, #48	; 0x30
 800b598:	af04      	add	r7, sp, #16
 800b59a:	60f8      	str	r0, [r7, #12]
 800b59c:	60b9      	str	r1, [r7, #8]
 800b59e:	603b      	str	r3, [r7, #0]
 800b5a0:	4613      	mov	r3, r2
 800b5a2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b5a4:	88fb      	ldrh	r3, [r7, #6]
 800b5a6:	009b      	lsls	r3, r3, #2
 800b5a8:	4618      	mov	r0, r3
 800b5aa:	f001 fe75 	bl	800d298 <pvPortMalloc>
 800b5ae:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b5b0:	697b      	ldr	r3, [r7, #20]
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d00e      	beq.n	800b5d4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b5b6:	2054      	movs	r0, #84	; 0x54
 800b5b8:	f001 fe6e 	bl	800d298 <pvPortMalloc>
 800b5bc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b5be:	69fb      	ldr	r3, [r7, #28]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d003      	beq.n	800b5cc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b5c4:	69fb      	ldr	r3, [r7, #28]
 800b5c6:	697a      	ldr	r2, [r7, #20]
 800b5c8:	631a      	str	r2, [r3, #48]	; 0x30
 800b5ca:	e005      	b.n	800b5d8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b5cc:	6978      	ldr	r0, [r7, #20]
 800b5ce:	f001 ff2f 	bl	800d430 <vPortFree>
 800b5d2:	e001      	b.n	800b5d8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b5d4:	2300      	movs	r3, #0
 800b5d6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b5d8:	69fb      	ldr	r3, [r7, #28]
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d013      	beq.n	800b606 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b5de:	88fa      	ldrh	r2, [r7, #6]
 800b5e0:	2300      	movs	r3, #0
 800b5e2:	9303      	str	r3, [sp, #12]
 800b5e4:	69fb      	ldr	r3, [r7, #28]
 800b5e6:	9302      	str	r3, [sp, #8]
 800b5e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5ea:	9301      	str	r3, [sp, #4]
 800b5ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5ee:	9300      	str	r3, [sp, #0]
 800b5f0:	683b      	ldr	r3, [r7, #0]
 800b5f2:	68b9      	ldr	r1, [r7, #8]
 800b5f4:	68f8      	ldr	r0, [r7, #12]
 800b5f6:	f000 f80e 	bl	800b616 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b5fa:	69f8      	ldr	r0, [r7, #28]
 800b5fc:	f000 f892 	bl	800b724 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b600:	2301      	movs	r3, #1
 800b602:	61bb      	str	r3, [r7, #24]
 800b604:	e002      	b.n	800b60c <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b606:	f04f 33ff 	mov.w	r3, #4294967295
 800b60a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b60c:	69bb      	ldr	r3, [r7, #24]
	}
 800b60e:	4618      	mov	r0, r3
 800b610:	3720      	adds	r7, #32
 800b612:	46bd      	mov	sp, r7
 800b614:	bd80      	pop	{r7, pc}

0800b616 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b616:	b580      	push	{r7, lr}
 800b618:	b088      	sub	sp, #32
 800b61a:	af00      	add	r7, sp, #0
 800b61c:	60f8      	str	r0, [r7, #12]
 800b61e:	60b9      	str	r1, [r7, #8]
 800b620:	607a      	str	r2, [r7, #4]
 800b622:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b626:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b62e:	3b01      	subs	r3, #1
 800b630:	009b      	lsls	r3, r3, #2
 800b632:	4413      	add	r3, r2
 800b634:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b636:	69bb      	ldr	r3, [r7, #24]
 800b638:	f023 0307 	bic.w	r3, r3, #7
 800b63c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b63e:	69bb      	ldr	r3, [r7, #24]
 800b640:	f003 0307 	and.w	r3, r3, #7
 800b644:	2b00      	cmp	r3, #0
 800b646:	d00a      	beq.n	800b65e <prvInitialiseNewTask+0x48>
	__asm volatile
 800b648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b64c:	f383 8811 	msr	BASEPRI, r3
 800b650:	f3bf 8f6f 	isb	sy
 800b654:	f3bf 8f4f 	dsb	sy
 800b658:	617b      	str	r3, [r7, #20]
}
 800b65a:	bf00      	nop
 800b65c:	e7fe      	b.n	800b65c <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b65e:	68bb      	ldr	r3, [r7, #8]
 800b660:	2b00      	cmp	r3, #0
 800b662:	d01f      	beq.n	800b6a4 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b664:	2300      	movs	r3, #0
 800b666:	61fb      	str	r3, [r7, #28]
 800b668:	e012      	b.n	800b690 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b66a:	68ba      	ldr	r2, [r7, #8]
 800b66c:	69fb      	ldr	r3, [r7, #28]
 800b66e:	4413      	add	r3, r2
 800b670:	7819      	ldrb	r1, [r3, #0]
 800b672:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b674:	69fb      	ldr	r3, [r7, #28]
 800b676:	4413      	add	r3, r2
 800b678:	3334      	adds	r3, #52	; 0x34
 800b67a:	460a      	mov	r2, r1
 800b67c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b67e:	68ba      	ldr	r2, [r7, #8]
 800b680:	69fb      	ldr	r3, [r7, #28]
 800b682:	4413      	add	r3, r2
 800b684:	781b      	ldrb	r3, [r3, #0]
 800b686:	2b00      	cmp	r3, #0
 800b688:	d006      	beq.n	800b698 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b68a:	69fb      	ldr	r3, [r7, #28]
 800b68c:	3301      	adds	r3, #1
 800b68e:	61fb      	str	r3, [r7, #28]
 800b690:	69fb      	ldr	r3, [r7, #28]
 800b692:	2b0f      	cmp	r3, #15
 800b694:	d9e9      	bls.n	800b66a <prvInitialiseNewTask+0x54>
 800b696:	e000      	b.n	800b69a <prvInitialiseNewTask+0x84>
			{
				break;
 800b698:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b69a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b69c:	2200      	movs	r2, #0
 800b69e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b6a2:	e003      	b.n	800b6ac <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b6a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6a6:	2200      	movs	r2, #0
 800b6a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b6ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6ae:	2b06      	cmp	r3, #6
 800b6b0:	d901      	bls.n	800b6b6 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b6b2:	2306      	movs	r3, #6
 800b6b4:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b6b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b6ba:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b6bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b6c0:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800b6c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6c4:	2200      	movs	r2, #0
 800b6c6:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b6c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6ca:	3304      	adds	r3, #4
 800b6cc:	4618      	mov	r0, r3
 800b6ce:	f7fe ff7d 	bl	800a5cc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b6d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6d4:	3318      	adds	r3, #24
 800b6d6:	4618      	mov	r0, r3
 800b6d8:	f7fe ff78 	bl	800a5cc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b6dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b6e0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b6e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6e4:	f1c3 0207 	rsb	r2, r3, #7
 800b6e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6ea:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b6ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b6f0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b6f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6f4:	2200      	movs	r2, #0
 800b6f6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b6f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6fa:	2200      	movs	r2, #0
 800b6fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b700:	683a      	ldr	r2, [r7, #0]
 800b702:	68f9      	ldr	r1, [r7, #12]
 800b704:	69b8      	ldr	r0, [r7, #24]
 800b706:	f001 fb7b 	bl	800ce00 <pxPortInitialiseStack>
 800b70a:	4602      	mov	r2, r0
 800b70c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b70e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b712:	2b00      	cmp	r3, #0
 800b714:	d002      	beq.n	800b71c <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b718:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b71a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b71c:	bf00      	nop
 800b71e:	3720      	adds	r7, #32
 800b720:	46bd      	mov	sp, r7
 800b722:	bd80      	pop	{r7, pc}

0800b724 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b724:	b580      	push	{r7, lr}
 800b726:	b082      	sub	sp, #8
 800b728:	af00      	add	r7, sp, #0
 800b72a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b72c:	f001 fc92 	bl	800d054 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b730:	4b2a      	ldr	r3, [pc, #168]	; (800b7dc <prvAddNewTaskToReadyList+0xb8>)
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	3301      	adds	r3, #1
 800b736:	4a29      	ldr	r2, [pc, #164]	; (800b7dc <prvAddNewTaskToReadyList+0xb8>)
 800b738:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b73a:	4b29      	ldr	r3, [pc, #164]	; (800b7e0 <prvAddNewTaskToReadyList+0xbc>)
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d109      	bne.n	800b756 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b742:	4a27      	ldr	r2, [pc, #156]	; (800b7e0 <prvAddNewTaskToReadyList+0xbc>)
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b748:	4b24      	ldr	r3, [pc, #144]	; (800b7dc <prvAddNewTaskToReadyList+0xb8>)
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	2b01      	cmp	r3, #1
 800b74e:	d110      	bne.n	800b772 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b750:	f000 fd30 	bl	800c1b4 <prvInitialiseTaskLists>
 800b754:	e00d      	b.n	800b772 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b756:	4b23      	ldr	r3, [pc, #140]	; (800b7e4 <prvAddNewTaskToReadyList+0xc0>)
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d109      	bne.n	800b772 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b75e:	4b20      	ldr	r3, [pc, #128]	; (800b7e0 <prvAddNewTaskToReadyList+0xbc>)
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b768:	429a      	cmp	r2, r3
 800b76a:	d802      	bhi.n	800b772 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b76c:	4a1c      	ldr	r2, [pc, #112]	; (800b7e0 <prvAddNewTaskToReadyList+0xbc>)
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b772:	4b1d      	ldr	r3, [pc, #116]	; (800b7e8 <prvAddNewTaskToReadyList+0xc4>)
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	3301      	adds	r3, #1
 800b778:	4a1b      	ldr	r2, [pc, #108]	; (800b7e8 <prvAddNewTaskToReadyList+0xc4>)
 800b77a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b780:	2201      	movs	r2, #1
 800b782:	409a      	lsls	r2, r3
 800b784:	4b19      	ldr	r3, [pc, #100]	; (800b7ec <prvAddNewTaskToReadyList+0xc8>)
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	4313      	orrs	r3, r2
 800b78a:	4a18      	ldr	r2, [pc, #96]	; (800b7ec <prvAddNewTaskToReadyList+0xc8>)
 800b78c:	6013      	str	r3, [r2, #0]
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b792:	4613      	mov	r3, r2
 800b794:	009b      	lsls	r3, r3, #2
 800b796:	4413      	add	r3, r2
 800b798:	009b      	lsls	r3, r3, #2
 800b79a:	4a15      	ldr	r2, [pc, #84]	; (800b7f0 <prvAddNewTaskToReadyList+0xcc>)
 800b79c:	441a      	add	r2, r3
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	3304      	adds	r3, #4
 800b7a2:	4619      	mov	r1, r3
 800b7a4:	4610      	mov	r0, r2
 800b7a6:	f7fe ff1e 	bl	800a5e6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b7aa:	f001 fc83 	bl	800d0b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b7ae:	4b0d      	ldr	r3, [pc, #52]	; (800b7e4 <prvAddNewTaskToReadyList+0xc0>)
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d00e      	beq.n	800b7d4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b7b6:	4b0a      	ldr	r3, [pc, #40]	; (800b7e0 <prvAddNewTaskToReadyList+0xbc>)
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7c0:	429a      	cmp	r2, r3
 800b7c2:	d207      	bcs.n	800b7d4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b7c4:	4b0b      	ldr	r3, [pc, #44]	; (800b7f4 <prvAddNewTaskToReadyList+0xd0>)
 800b7c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b7ca:	601a      	str	r2, [r3, #0]
 800b7cc:	f3bf 8f4f 	dsb	sy
 800b7d0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b7d4:	bf00      	nop
 800b7d6:	3708      	adds	r7, #8
 800b7d8:	46bd      	mov	sp, r7
 800b7da:	bd80      	pop	{r7, pc}
 800b7dc:	20001460 	.word	0x20001460
 800b7e0:	20001360 	.word	0x20001360
 800b7e4:	2000146c 	.word	0x2000146c
 800b7e8:	2000147c 	.word	0x2000147c
 800b7ec:	20001468 	.word	0x20001468
 800b7f0:	20001364 	.word	0x20001364
 800b7f4:	e000ed04 	.word	0xe000ed04

0800b7f8 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800b7f8:	b580      	push	{r7, lr}
 800b7fa:	b084      	sub	sp, #16
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800b800:	f001 fc28 	bl	800d054 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	2b00      	cmp	r3, #0
 800b808:	d102      	bne.n	800b810 <vTaskDelete+0x18>
 800b80a:	4b39      	ldr	r3, [pc, #228]	; (800b8f0 <vTaskDelete+0xf8>)
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	e000      	b.n	800b812 <vTaskDelete+0x1a>
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	3304      	adds	r3, #4
 800b818:	4618      	mov	r0, r3
 800b81a:	f7fe ff41 	bl	800a6a0 <uxListRemove>
 800b81e:	4603      	mov	r3, r0
 800b820:	2b00      	cmp	r3, #0
 800b822:	d115      	bne.n	800b850 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b828:	4932      	ldr	r1, [pc, #200]	; (800b8f4 <vTaskDelete+0xfc>)
 800b82a:	4613      	mov	r3, r2
 800b82c:	009b      	lsls	r3, r3, #2
 800b82e:	4413      	add	r3, r2
 800b830:	009b      	lsls	r3, r3, #2
 800b832:	440b      	add	r3, r1
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	2b00      	cmp	r3, #0
 800b838:	d10a      	bne.n	800b850 <vTaskDelete+0x58>
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b83e:	2201      	movs	r2, #1
 800b840:	fa02 f303 	lsl.w	r3, r2, r3
 800b844:	43da      	mvns	r2, r3
 800b846:	4b2c      	ldr	r3, [pc, #176]	; (800b8f8 <vTaskDelete+0x100>)
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	4013      	ands	r3, r2
 800b84c:	4a2a      	ldr	r2, [pc, #168]	; (800b8f8 <vTaskDelete+0x100>)
 800b84e:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b854:	2b00      	cmp	r3, #0
 800b856:	d004      	beq.n	800b862 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	3318      	adds	r3, #24
 800b85c:	4618      	mov	r0, r3
 800b85e:	f7fe ff1f 	bl	800a6a0 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800b862:	4b26      	ldr	r3, [pc, #152]	; (800b8fc <vTaskDelete+0x104>)
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	3301      	adds	r3, #1
 800b868:	4a24      	ldr	r2, [pc, #144]	; (800b8fc <vTaskDelete+0x104>)
 800b86a:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800b86c:	4b20      	ldr	r3, [pc, #128]	; (800b8f0 <vTaskDelete+0xf8>)
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	68fa      	ldr	r2, [r7, #12]
 800b872:	429a      	cmp	r2, r3
 800b874:	d10b      	bne.n	800b88e <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	3304      	adds	r3, #4
 800b87a:	4619      	mov	r1, r3
 800b87c:	4820      	ldr	r0, [pc, #128]	; (800b900 <vTaskDelete+0x108>)
 800b87e:	f7fe feb2 	bl	800a5e6 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800b882:	4b20      	ldr	r3, [pc, #128]	; (800b904 <vTaskDelete+0x10c>)
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	3301      	adds	r3, #1
 800b888:	4a1e      	ldr	r2, [pc, #120]	; (800b904 <vTaskDelete+0x10c>)
 800b88a:	6013      	str	r3, [r2, #0]
 800b88c:	e009      	b.n	800b8a2 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800b88e:	4b1e      	ldr	r3, [pc, #120]	; (800b908 <vTaskDelete+0x110>)
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	3b01      	subs	r3, #1
 800b894:	4a1c      	ldr	r2, [pc, #112]	; (800b908 <vTaskDelete+0x110>)
 800b896:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 800b898:	68f8      	ldr	r0, [r7, #12]
 800b89a:	f000 fcf9 	bl	800c290 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800b89e:	f000 fd07 	bl	800c2b0 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 800b8a2:	f001 fc07 	bl	800d0b4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800b8a6:	4b19      	ldr	r3, [pc, #100]	; (800b90c <vTaskDelete+0x114>)
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d01b      	beq.n	800b8e6 <vTaskDelete+0xee>
		{
			if( pxTCB == pxCurrentTCB )
 800b8ae:	4b10      	ldr	r3, [pc, #64]	; (800b8f0 <vTaskDelete+0xf8>)
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	68fa      	ldr	r2, [r7, #12]
 800b8b4:	429a      	cmp	r2, r3
 800b8b6:	d116      	bne.n	800b8e6 <vTaskDelete+0xee>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800b8b8:	4b15      	ldr	r3, [pc, #84]	; (800b910 <vTaskDelete+0x118>)
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d00a      	beq.n	800b8d6 <vTaskDelete+0xde>
	__asm volatile
 800b8c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8c4:	f383 8811 	msr	BASEPRI, r3
 800b8c8:	f3bf 8f6f 	isb	sy
 800b8cc:	f3bf 8f4f 	dsb	sy
 800b8d0:	60bb      	str	r3, [r7, #8]
}
 800b8d2:	bf00      	nop
 800b8d4:	e7fe      	b.n	800b8d4 <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 800b8d6:	4b0f      	ldr	r3, [pc, #60]	; (800b914 <vTaskDelete+0x11c>)
 800b8d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b8dc:	601a      	str	r2, [r3, #0]
 800b8de:	f3bf 8f4f 	dsb	sy
 800b8e2:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b8e6:	bf00      	nop
 800b8e8:	3710      	adds	r7, #16
 800b8ea:	46bd      	mov	sp, r7
 800b8ec:	bd80      	pop	{r7, pc}
 800b8ee:	bf00      	nop
 800b8f0:	20001360 	.word	0x20001360
 800b8f4:	20001364 	.word	0x20001364
 800b8f8:	20001468 	.word	0x20001468
 800b8fc:	2000147c 	.word	0x2000147c
 800b900:	20001434 	.word	0x20001434
 800b904:	20001448 	.word	0x20001448
 800b908:	20001460 	.word	0x20001460
 800b90c:	2000146c 	.word	0x2000146c
 800b910:	20001488 	.word	0x20001488
 800b914:	e000ed04 	.word	0xe000ed04

0800b918 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b918:	b580      	push	{r7, lr}
 800b91a:	b084      	sub	sp, #16
 800b91c:	af00      	add	r7, sp, #0
 800b91e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b920:	2300      	movs	r3, #0
 800b922:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	2b00      	cmp	r3, #0
 800b928:	d017      	beq.n	800b95a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b92a:	4b13      	ldr	r3, [pc, #76]	; (800b978 <vTaskDelay+0x60>)
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d00a      	beq.n	800b948 <vTaskDelay+0x30>
	__asm volatile
 800b932:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b936:	f383 8811 	msr	BASEPRI, r3
 800b93a:	f3bf 8f6f 	isb	sy
 800b93e:	f3bf 8f4f 	dsb	sy
 800b942:	60bb      	str	r3, [r7, #8]
}
 800b944:	bf00      	nop
 800b946:	e7fe      	b.n	800b946 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b948:	f000 f868 	bl	800ba1c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b94c:	2100      	movs	r1, #0
 800b94e:	6878      	ldr	r0, [r7, #4]
 800b950:	f000 fea2 	bl	800c698 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b954:	f000 f870 	bl	800ba38 <xTaskResumeAll>
 800b958:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d107      	bne.n	800b970 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b960:	4b06      	ldr	r3, [pc, #24]	; (800b97c <vTaskDelay+0x64>)
 800b962:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b966:	601a      	str	r2, [r3, #0]
 800b968:	f3bf 8f4f 	dsb	sy
 800b96c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b970:	bf00      	nop
 800b972:	3710      	adds	r7, #16
 800b974:	46bd      	mov	sp, r7
 800b976:	bd80      	pop	{r7, pc}
 800b978:	20001488 	.word	0x20001488
 800b97c:	e000ed04 	.word	0xe000ed04

0800b980 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b980:	b580      	push	{r7, lr}
 800b982:	b086      	sub	sp, #24
 800b984:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800b986:	4b1f      	ldr	r3, [pc, #124]	; (800ba04 <vTaskStartScheduler+0x84>)
 800b988:	9301      	str	r3, [sp, #4]
 800b98a:	2300      	movs	r3, #0
 800b98c:	9300      	str	r3, [sp, #0]
 800b98e:	2300      	movs	r3, #0
 800b990:	2280      	movs	r2, #128	; 0x80
 800b992:	491d      	ldr	r1, [pc, #116]	; (800ba08 <vTaskStartScheduler+0x88>)
 800b994:	481d      	ldr	r0, [pc, #116]	; (800ba0c <vTaskStartScheduler+0x8c>)
 800b996:	f7ff fdfd 	bl	800b594 <xTaskCreate>
 800b99a:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	2b01      	cmp	r3, #1
 800b9a0:	d102      	bne.n	800b9a8 <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 800b9a2:	f000 fedf 	bl	800c764 <xTimerCreateTimerTask>
 800b9a6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	2b01      	cmp	r3, #1
 800b9ac:	d116      	bne.n	800b9dc <vTaskStartScheduler+0x5c>
	__asm volatile
 800b9ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9b2:	f383 8811 	msr	BASEPRI, r3
 800b9b6:	f3bf 8f6f 	isb	sy
 800b9ba:	f3bf 8f4f 	dsb	sy
 800b9be:	60bb      	str	r3, [r7, #8]
}
 800b9c0:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b9c2:	4b13      	ldr	r3, [pc, #76]	; (800ba10 <vTaskStartScheduler+0x90>)
 800b9c4:	f04f 32ff 	mov.w	r2, #4294967295
 800b9c8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b9ca:	4b12      	ldr	r3, [pc, #72]	; (800ba14 <vTaskStartScheduler+0x94>)
 800b9cc:	2201      	movs	r2, #1
 800b9ce:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b9d0:	4b11      	ldr	r3, [pc, #68]	; (800ba18 <vTaskStartScheduler+0x98>)
 800b9d2:	2200      	movs	r2, #0
 800b9d4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b9d6:	f001 fa9b 	bl	800cf10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b9da:	e00e      	b.n	800b9fa <vTaskStartScheduler+0x7a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9e2:	d10a      	bne.n	800b9fa <vTaskStartScheduler+0x7a>
	__asm volatile
 800b9e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9e8:	f383 8811 	msr	BASEPRI, r3
 800b9ec:	f3bf 8f6f 	isb	sy
 800b9f0:	f3bf 8f4f 	dsb	sy
 800b9f4:	607b      	str	r3, [r7, #4]
}
 800b9f6:	bf00      	nop
 800b9f8:	e7fe      	b.n	800b9f8 <vTaskStartScheduler+0x78>
}
 800b9fa:	bf00      	nop
 800b9fc:	3710      	adds	r7, #16
 800b9fe:	46bd      	mov	sp, r7
 800ba00:	bd80      	pop	{r7, pc}
 800ba02:	bf00      	nop
 800ba04:	20001484 	.word	0x20001484
 800ba08:	0801e1f0 	.word	0x0801e1f0
 800ba0c:	0800c185 	.word	0x0800c185
 800ba10:	20001480 	.word	0x20001480
 800ba14:	2000146c 	.word	0x2000146c
 800ba18:	20001464 	.word	0x20001464

0800ba1c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ba1c:	b480      	push	{r7}
 800ba1e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800ba20:	4b04      	ldr	r3, [pc, #16]	; (800ba34 <vTaskSuspendAll+0x18>)
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	3301      	adds	r3, #1
 800ba26:	4a03      	ldr	r2, [pc, #12]	; (800ba34 <vTaskSuspendAll+0x18>)
 800ba28:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800ba2a:	bf00      	nop
 800ba2c:	46bd      	mov	sp, r7
 800ba2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba32:	4770      	bx	lr
 800ba34:	20001488 	.word	0x20001488

0800ba38 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ba38:	b580      	push	{r7, lr}
 800ba3a:	b084      	sub	sp, #16
 800ba3c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ba3e:	2300      	movs	r3, #0
 800ba40:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ba42:	2300      	movs	r3, #0
 800ba44:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ba46:	4b41      	ldr	r3, [pc, #260]	; (800bb4c <xTaskResumeAll+0x114>)
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d10a      	bne.n	800ba64 <xTaskResumeAll+0x2c>
	__asm volatile
 800ba4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba52:	f383 8811 	msr	BASEPRI, r3
 800ba56:	f3bf 8f6f 	isb	sy
 800ba5a:	f3bf 8f4f 	dsb	sy
 800ba5e:	603b      	str	r3, [r7, #0]
}
 800ba60:	bf00      	nop
 800ba62:	e7fe      	b.n	800ba62 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ba64:	f001 faf6 	bl	800d054 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ba68:	4b38      	ldr	r3, [pc, #224]	; (800bb4c <xTaskResumeAll+0x114>)
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	3b01      	subs	r3, #1
 800ba6e:	4a37      	ldr	r2, [pc, #220]	; (800bb4c <xTaskResumeAll+0x114>)
 800ba70:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ba72:	4b36      	ldr	r3, [pc, #216]	; (800bb4c <xTaskResumeAll+0x114>)
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d161      	bne.n	800bb3e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ba7a:	4b35      	ldr	r3, [pc, #212]	; (800bb50 <xTaskResumeAll+0x118>)
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d05d      	beq.n	800bb3e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ba82:	e02e      	b.n	800bae2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba84:	4b33      	ldr	r3, [pc, #204]	; (800bb54 <xTaskResumeAll+0x11c>)
 800ba86:	68db      	ldr	r3, [r3, #12]
 800ba88:	68db      	ldr	r3, [r3, #12]
 800ba8a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	3318      	adds	r3, #24
 800ba90:	4618      	mov	r0, r3
 800ba92:	f7fe fe05 	bl	800a6a0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	3304      	adds	r3, #4
 800ba9a:	4618      	mov	r0, r3
 800ba9c:	f7fe fe00 	bl	800a6a0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800baa4:	2201      	movs	r2, #1
 800baa6:	409a      	lsls	r2, r3
 800baa8:	4b2b      	ldr	r3, [pc, #172]	; (800bb58 <xTaskResumeAll+0x120>)
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	4313      	orrs	r3, r2
 800baae:	4a2a      	ldr	r2, [pc, #168]	; (800bb58 <xTaskResumeAll+0x120>)
 800bab0:	6013      	str	r3, [r2, #0]
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bab6:	4613      	mov	r3, r2
 800bab8:	009b      	lsls	r3, r3, #2
 800baba:	4413      	add	r3, r2
 800babc:	009b      	lsls	r3, r3, #2
 800babe:	4a27      	ldr	r2, [pc, #156]	; (800bb5c <xTaskResumeAll+0x124>)
 800bac0:	441a      	add	r2, r3
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	3304      	adds	r3, #4
 800bac6:	4619      	mov	r1, r3
 800bac8:	4610      	mov	r0, r2
 800baca:	f7fe fd8c 	bl	800a5e6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bad2:	4b23      	ldr	r3, [pc, #140]	; (800bb60 <xTaskResumeAll+0x128>)
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bad8:	429a      	cmp	r2, r3
 800bada:	d302      	bcc.n	800bae2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800badc:	4b21      	ldr	r3, [pc, #132]	; (800bb64 <xTaskResumeAll+0x12c>)
 800bade:	2201      	movs	r2, #1
 800bae0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bae2:	4b1c      	ldr	r3, [pc, #112]	; (800bb54 <xTaskResumeAll+0x11c>)
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d1cc      	bne.n	800ba84 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	2b00      	cmp	r3, #0
 800baee:	d001      	beq.n	800baf4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800baf0:	f000 fbde 	bl	800c2b0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800baf4:	4b1c      	ldr	r3, [pc, #112]	; (800bb68 <xTaskResumeAll+0x130>)
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d010      	beq.n	800bb22 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800bb00:	f000 f858 	bl	800bbb4 <xTaskIncrementTick>
 800bb04:	4603      	mov	r3, r0
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d002      	beq.n	800bb10 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800bb0a:	4b16      	ldr	r3, [pc, #88]	; (800bb64 <xTaskResumeAll+0x12c>)
 800bb0c:	2201      	movs	r2, #1
 800bb0e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	3b01      	subs	r3, #1
 800bb14:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d1f1      	bne.n	800bb00 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800bb1c:	4b12      	ldr	r3, [pc, #72]	; (800bb68 <xTaskResumeAll+0x130>)
 800bb1e:	2200      	movs	r2, #0
 800bb20:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800bb22:	4b10      	ldr	r3, [pc, #64]	; (800bb64 <xTaskResumeAll+0x12c>)
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d009      	beq.n	800bb3e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800bb2a:	2301      	movs	r3, #1
 800bb2c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800bb2e:	4b0f      	ldr	r3, [pc, #60]	; (800bb6c <xTaskResumeAll+0x134>)
 800bb30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb34:	601a      	str	r2, [r3, #0]
 800bb36:	f3bf 8f4f 	dsb	sy
 800bb3a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bb3e:	f001 fab9 	bl	800d0b4 <vPortExitCritical>

	return xAlreadyYielded;
 800bb42:	68bb      	ldr	r3, [r7, #8]
}
 800bb44:	4618      	mov	r0, r3
 800bb46:	3710      	adds	r7, #16
 800bb48:	46bd      	mov	sp, r7
 800bb4a:	bd80      	pop	{r7, pc}
 800bb4c:	20001488 	.word	0x20001488
 800bb50:	20001460 	.word	0x20001460
 800bb54:	20001420 	.word	0x20001420
 800bb58:	20001468 	.word	0x20001468
 800bb5c:	20001364 	.word	0x20001364
 800bb60:	20001360 	.word	0x20001360
 800bb64:	20001474 	.word	0x20001474
 800bb68:	20001470 	.word	0x20001470
 800bb6c:	e000ed04 	.word	0xe000ed04

0800bb70 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800bb70:	b480      	push	{r7}
 800bb72:	b083      	sub	sp, #12
 800bb74:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800bb76:	4b05      	ldr	r3, [pc, #20]	; (800bb8c <xTaskGetTickCount+0x1c>)
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800bb7c:	687b      	ldr	r3, [r7, #4]
}
 800bb7e:	4618      	mov	r0, r3
 800bb80:	370c      	adds	r7, #12
 800bb82:	46bd      	mov	sp, r7
 800bb84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb88:	4770      	bx	lr
 800bb8a:	bf00      	nop
 800bb8c:	20001464 	.word	0x20001464

0800bb90 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800bb90:	b580      	push	{r7, lr}
 800bb92:	b082      	sub	sp, #8
 800bb94:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bb96:	f001 fb3f 	bl	800d218 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800bb9a:	2300      	movs	r3, #0
 800bb9c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800bb9e:	4b04      	ldr	r3, [pc, #16]	; (800bbb0 <xTaskGetTickCountFromISR+0x20>)
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bba4:	683b      	ldr	r3, [r7, #0]
}
 800bba6:	4618      	mov	r0, r3
 800bba8:	3708      	adds	r7, #8
 800bbaa:	46bd      	mov	sp, r7
 800bbac:	bd80      	pop	{r7, pc}
 800bbae:	bf00      	nop
 800bbb0:	20001464 	.word	0x20001464

0800bbb4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800bbb4:	b580      	push	{r7, lr}
 800bbb6:	b086      	sub	sp, #24
 800bbb8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800bbba:	2300      	movs	r3, #0
 800bbbc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bbbe:	4b4e      	ldr	r3, [pc, #312]	; (800bcf8 <xTaskIncrementTick+0x144>)
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	f040 808e 	bne.w	800bce4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800bbc8:	4b4c      	ldr	r3, [pc, #304]	; (800bcfc <xTaskIncrementTick+0x148>)
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	3301      	adds	r3, #1
 800bbce:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800bbd0:	4a4a      	ldr	r2, [pc, #296]	; (800bcfc <xTaskIncrementTick+0x148>)
 800bbd2:	693b      	ldr	r3, [r7, #16]
 800bbd4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800bbd6:	693b      	ldr	r3, [r7, #16]
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d120      	bne.n	800bc1e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800bbdc:	4b48      	ldr	r3, [pc, #288]	; (800bd00 <xTaskIncrementTick+0x14c>)
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d00a      	beq.n	800bbfc <xTaskIncrementTick+0x48>
	__asm volatile
 800bbe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbea:	f383 8811 	msr	BASEPRI, r3
 800bbee:	f3bf 8f6f 	isb	sy
 800bbf2:	f3bf 8f4f 	dsb	sy
 800bbf6:	603b      	str	r3, [r7, #0]
}
 800bbf8:	bf00      	nop
 800bbfa:	e7fe      	b.n	800bbfa <xTaskIncrementTick+0x46>
 800bbfc:	4b40      	ldr	r3, [pc, #256]	; (800bd00 <xTaskIncrementTick+0x14c>)
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	60fb      	str	r3, [r7, #12]
 800bc02:	4b40      	ldr	r3, [pc, #256]	; (800bd04 <xTaskIncrementTick+0x150>)
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	4a3e      	ldr	r2, [pc, #248]	; (800bd00 <xTaskIncrementTick+0x14c>)
 800bc08:	6013      	str	r3, [r2, #0]
 800bc0a:	4a3e      	ldr	r2, [pc, #248]	; (800bd04 <xTaskIncrementTick+0x150>)
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	6013      	str	r3, [r2, #0]
 800bc10:	4b3d      	ldr	r3, [pc, #244]	; (800bd08 <xTaskIncrementTick+0x154>)
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	3301      	adds	r3, #1
 800bc16:	4a3c      	ldr	r2, [pc, #240]	; (800bd08 <xTaskIncrementTick+0x154>)
 800bc18:	6013      	str	r3, [r2, #0]
 800bc1a:	f000 fb49 	bl	800c2b0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800bc1e:	4b3b      	ldr	r3, [pc, #236]	; (800bd0c <xTaskIncrementTick+0x158>)
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	693a      	ldr	r2, [r7, #16]
 800bc24:	429a      	cmp	r2, r3
 800bc26:	d348      	bcc.n	800bcba <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bc28:	4b35      	ldr	r3, [pc, #212]	; (800bd00 <xTaskIncrementTick+0x14c>)
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d104      	bne.n	800bc3c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bc32:	4b36      	ldr	r3, [pc, #216]	; (800bd0c <xTaskIncrementTick+0x158>)
 800bc34:	f04f 32ff 	mov.w	r2, #4294967295
 800bc38:	601a      	str	r2, [r3, #0]
					break;
 800bc3a:	e03e      	b.n	800bcba <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc3c:	4b30      	ldr	r3, [pc, #192]	; (800bd00 <xTaskIncrementTick+0x14c>)
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	68db      	ldr	r3, [r3, #12]
 800bc42:	68db      	ldr	r3, [r3, #12]
 800bc44:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800bc46:	68bb      	ldr	r3, [r7, #8]
 800bc48:	685b      	ldr	r3, [r3, #4]
 800bc4a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800bc4c:	693a      	ldr	r2, [r7, #16]
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	429a      	cmp	r2, r3
 800bc52:	d203      	bcs.n	800bc5c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800bc54:	4a2d      	ldr	r2, [pc, #180]	; (800bd0c <xTaskIncrementTick+0x158>)
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800bc5a:	e02e      	b.n	800bcba <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bc5c:	68bb      	ldr	r3, [r7, #8]
 800bc5e:	3304      	adds	r3, #4
 800bc60:	4618      	mov	r0, r3
 800bc62:	f7fe fd1d 	bl	800a6a0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bc66:	68bb      	ldr	r3, [r7, #8]
 800bc68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d004      	beq.n	800bc78 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bc6e:	68bb      	ldr	r3, [r7, #8]
 800bc70:	3318      	adds	r3, #24
 800bc72:	4618      	mov	r0, r3
 800bc74:	f7fe fd14 	bl	800a6a0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800bc78:	68bb      	ldr	r3, [r7, #8]
 800bc7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc7c:	2201      	movs	r2, #1
 800bc7e:	409a      	lsls	r2, r3
 800bc80:	4b23      	ldr	r3, [pc, #140]	; (800bd10 <xTaskIncrementTick+0x15c>)
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	4313      	orrs	r3, r2
 800bc86:	4a22      	ldr	r2, [pc, #136]	; (800bd10 <xTaskIncrementTick+0x15c>)
 800bc88:	6013      	str	r3, [r2, #0]
 800bc8a:	68bb      	ldr	r3, [r7, #8]
 800bc8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc8e:	4613      	mov	r3, r2
 800bc90:	009b      	lsls	r3, r3, #2
 800bc92:	4413      	add	r3, r2
 800bc94:	009b      	lsls	r3, r3, #2
 800bc96:	4a1f      	ldr	r2, [pc, #124]	; (800bd14 <xTaskIncrementTick+0x160>)
 800bc98:	441a      	add	r2, r3
 800bc9a:	68bb      	ldr	r3, [r7, #8]
 800bc9c:	3304      	adds	r3, #4
 800bc9e:	4619      	mov	r1, r3
 800bca0:	4610      	mov	r0, r2
 800bca2:	f7fe fca0 	bl	800a5e6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bca6:	68bb      	ldr	r3, [r7, #8]
 800bca8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bcaa:	4b1b      	ldr	r3, [pc, #108]	; (800bd18 <xTaskIncrementTick+0x164>)
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcb0:	429a      	cmp	r2, r3
 800bcb2:	d3b9      	bcc.n	800bc28 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800bcb4:	2301      	movs	r3, #1
 800bcb6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bcb8:	e7b6      	b.n	800bc28 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800bcba:	4b17      	ldr	r3, [pc, #92]	; (800bd18 <xTaskIncrementTick+0x164>)
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bcc0:	4914      	ldr	r1, [pc, #80]	; (800bd14 <xTaskIncrementTick+0x160>)
 800bcc2:	4613      	mov	r3, r2
 800bcc4:	009b      	lsls	r3, r3, #2
 800bcc6:	4413      	add	r3, r2
 800bcc8:	009b      	lsls	r3, r3, #2
 800bcca:	440b      	add	r3, r1
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	2b01      	cmp	r3, #1
 800bcd0:	d901      	bls.n	800bcd6 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800bcd2:	2301      	movs	r3, #1
 800bcd4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800bcd6:	4b11      	ldr	r3, [pc, #68]	; (800bd1c <xTaskIncrementTick+0x168>)
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d007      	beq.n	800bcee <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800bcde:	2301      	movs	r3, #1
 800bce0:	617b      	str	r3, [r7, #20]
 800bce2:	e004      	b.n	800bcee <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800bce4:	4b0e      	ldr	r3, [pc, #56]	; (800bd20 <xTaskIncrementTick+0x16c>)
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	3301      	adds	r3, #1
 800bcea:	4a0d      	ldr	r2, [pc, #52]	; (800bd20 <xTaskIncrementTick+0x16c>)
 800bcec:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800bcee:	697b      	ldr	r3, [r7, #20]
}
 800bcf0:	4618      	mov	r0, r3
 800bcf2:	3718      	adds	r7, #24
 800bcf4:	46bd      	mov	sp, r7
 800bcf6:	bd80      	pop	{r7, pc}
 800bcf8:	20001488 	.word	0x20001488
 800bcfc:	20001464 	.word	0x20001464
 800bd00:	20001418 	.word	0x20001418
 800bd04:	2000141c 	.word	0x2000141c
 800bd08:	20001478 	.word	0x20001478
 800bd0c:	20001480 	.word	0x20001480
 800bd10:	20001468 	.word	0x20001468
 800bd14:	20001364 	.word	0x20001364
 800bd18:	20001360 	.word	0x20001360
 800bd1c:	20001474 	.word	0x20001474
 800bd20:	20001470 	.word	0x20001470

0800bd24 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800bd24:	b480      	push	{r7}
 800bd26:	b087      	sub	sp, #28
 800bd28:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800bd2a:	4b27      	ldr	r3, [pc, #156]	; (800bdc8 <vTaskSwitchContext+0xa4>)
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d003      	beq.n	800bd3a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800bd32:	4b26      	ldr	r3, [pc, #152]	; (800bdcc <vTaskSwitchContext+0xa8>)
 800bd34:	2201      	movs	r2, #1
 800bd36:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800bd38:	e03f      	b.n	800bdba <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800bd3a:	4b24      	ldr	r3, [pc, #144]	; (800bdcc <vTaskSwitchContext+0xa8>)
 800bd3c:	2200      	movs	r2, #0
 800bd3e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd40:	4b23      	ldr	r3, [pc, #140]	; (800bdd0 <vTaskSwitchContext+0xac>)
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	fab3 f383 	clz	r3, r3
 800bd4c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800bd4e:	7afb      	ldrb	r3, [r7, #11]
 800bd50:	f1c3 031f 	rsb	r3, r3, #31
 800bd54:	617b      	str	r3, [r7, #20]
 800bd56:	491f      	ldr	r1, [pc, #124]	; (800bdd4 <vTaskSwitchContext+0xb0>)
 800bd58:	697a      	ldr	r2, [r7, #20]
 800bd5a:	4613      	mov	r3, r2
 800bd5c:	009b      	lsls	r3, r3, #2
 800bd5e:	4413      	add	r3, r2
 800bd60:	009b      	lsls	r3, r3, #2
 800bd62:	440b      	add	r3, r1
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d10a      	bne.n	800bd80 <vTaskSwitchContext+0x5c>
	__asm volatile
 800bd6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd6e:	f383 8811 	msr	BASEPRI, r3
 800bd72:	f3bf 8f6f 	isb	sy
 800bd76:	f3bf 8f4f 	dsb	sy
 800bd7a:	607b      	str	r3, [r7, #4]
}
 800bd7c:	bf00      	nop
 800bd7e:	e7fe      	b.n	800bd7e <vTaskSwitchContext+0x5a>
 800bd80:	697a      	ldr	r2, [r7, #20]
 800bd82:	4613      	mov	r3, r2
 800bd84:	009b      	lsls	r3, r3, #2
 800bd86:	4413      	add	r3, r2
 800bd88:	009b      	lsls	r3, r3, #2
 800bd8a:	4a12      	ldr	r2, [pc, #72]	; (800bdd4 <vTaskSwitchContext+0xb0>)
 800bd8c:	4413      	add	r3, r2
 800bd8e:	613b      	str	r3, [r7, #16]
 800bd90:	693b      	ldr	r3, [r7, #16]
 800bd92:	685b      	ldr	r3, [r3, #4]
 800bd94:	685a      	ldr	r2, [r3, #4]
 800bd96:	693b      	ldr	r3, [r7, #16]
 800bd98:	605a      	str	r2, [r3, #4]
 800bd9a:	693b      	ldr	r3, [r7, #16]
 800bd9c:	685a      	ldr	r2, [r3, #4]
 800bd9e:	693b      	ldr	r3, [r7, #16]
 800bda0:	3308      	adds	r3, #8
 800bda2:	429a      	cmp	r2, r3
 800bda4:	d104      	bne.n	800bdb0 <vTaskSwitchContext+0x8c>
 800bda6:	693b      	ldr	r3, [r7, #16]
 800bda8:	685b      	ldr	r3, [r3, #4]
 800bdaa:	685a      	ldr	r2, [r3, #4]
 800bdac:	693b      	ldr	r3, [r7, #16]
 800bdae:	605a      	str	r2, [r3, #4]
 800bdb0:	693b      	ldr	r3, [r7, #16]
 800bdb2:	685b      	ldr	r3, [r3, #4]
 800bdb4:	68db      	ldr	r3, [r3, #12]
 800bdb6:	4a08      	ldr	r2, [pc, #32]	; (800bdd8 <vTaskSwitchContext+0xb4>)
 800bdb8:	6013      	str	r3, [r2, #0]
}
 800bdba:	bf00      	nop
 800bdbc:	371c      	adds	r7, #28
 800bdbe:	46bd      	mov	sp, r7
 800bdc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc4:	4770      	bx	lr
 800bdc6:	bf00      	nop
 800bdc8:	20001488 	.word	0x20001488
 800bdcc:	20001474 	.word	0x20001474
 800bdd0:	20001468 	.word	0x20001468
 800bdd4:	20001364 	.word	0x20001364
 800bdd8:	20001360 	.word	0x20001360

0800bddc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800bddc:	b580      	push	{r7, lr}
 800bdde:	b084      	sub	sp, #16
 800bde0:	af00      	add	r7, sp, #0
 800bde2:	6078      	str	r0, [r7, #4]
 800bde4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d10a      	bne.n	800be02 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800bdec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdf0:	f383 8811 	msr	BASEPRI, r3
 800bdf4:	f3bf 8f6f 	isb	sy
 800bdf8:	f3bf 8f4f 	dsb	sy
 800bdfc:	60fb      	str	r3, [r7, #12]
}
 800bdfe:	bf00      	nop
 800be00:	e7fe      	b.n	800be00 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800be02:	4b07      	ldr	r3, [pc, #28]	; (800be20 <vTaskPlaceOnEventList+0x44>)
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	3318      	adds	r3, #24
 800be08:	4619      	mov	r1, r3
 800be0a:	6878      	ldr	r0, [r7, #4]
 800be0c:	f7fe fc0f 	bl	800a62e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800be10:	2101      	movs	r1, #1
 800be12:	6838      	ldr	r0, [r7, #0]
 800be14:	f000 fc40 	bl	800c698 <prvAddCurrentTaskToDelayedList>
}
 800be18:	bf00      	nop
 800be1a:	3710      	adds	r7, #16
 800be1c:	46bd      	mov	sp, r7
 800be1e:	bd80      	pop	{r7, pc}
 800be20:	20001360 	.word	0x20001360

0800be24 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 800be24:	b580      	push	{r7, lr}
 800be26:	b086      	sub	sp, #24
 800be28:	af00      	add	r7, sp, #0
 800be2a:	60f8      	str	r0, [r7, #12]
 800be2c:	60b9      	str	r1, [r7, #8]
 800be2e:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	2b00      	cmp	r3, #0
 800be34:	d10a      	bne.n	800be4c <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 800be36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be3a:	f383 8811 	msr	BASEPRI, r3
 800be3e:	f3bf 8f6f 	isb	sy
 800be42:	f3bf 8f4f 	dsb	sy
 800be46:	617b      	str	r3, [r7, #20]
}
 800be48:	bf00      	nop
 800be4a:	e7fe      	b.n	800be4a <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 800be4c:	4b11      	ldr	r3, [pc, #68]	; (800be94 <vTaskPlaceOnUnorderedEventList+0x70>)
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	2b00      	cmp	r3, #0
 800be52:	d10a      	bne.n	800be6a <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 800be54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be58:	f383 8811 	msr	BASEPRI, r3
 800be5c:	f3bf 8f6f 	isb	sy
 800be60:	f3bf 8f4f 	dsb	sy
 800be64:	613b      	str	r3, [r7, #16]
}
 800be66:	bf00      	nop
 800be68:	e7fe      	b.n	800be68 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800be6a:	4b0b      	ldr	r3, [pc, #44]	; (800be98 <vTaskPlaceOnUnorderedEventList+0x74>)
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	68ba      	ldr	r2, [r7, #8]
 800be70:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800be74:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800be76:	4b08      	ldr	r3, [pc, #32]	; (800be98 <vTaskPlaceOnUnorderedEventList+0x74>)
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	3318      	adds	r3, #24
 800be7c:	4619      	mov	r1, r3
 800be7e:	68f8      	ldr	r0, [r7, #12]
 800be80:	f7fe fbb1 	bl	800a5e6 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800be84:	2101      	movs	r1, #1
 800be86:	6878      	ldr	r0, [r7, #4]
 800be88:	f000 fc06 	bl	800c698 <prvAddCurrentTaskToDelayedList>
}
 800be8c:	bf00      	nop
 800be8e:	3718      	adds	r7, #24
 800be90:	46bd      	mov	sp, r7
 800be92:	bd80      	pop	{r7, pc}
 800be94:	20001488 	.word	0x20001488
 800be98:	20001360 	.word	0x20001360

0800be9c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800be9c:	b580      	push	{r7, lr}
 800be9e:	b086      	sub	sp, #24
 800bea0:	af00      	add	r7, sp, #0
 800bea2:	60f8      	str	r0, [r7, #12]
 800bea4:	60b9      	str	r1, [r7, #8]
 800bea6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d10a      	bne.n	800bec4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800beae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800beb2:	f383 8811 	msr	BASEPRI, r3
 800beb6:	f3bf 8f6f 	isb	sy
 800beba:	f3bf 8f4f 	dsb	sy
 800bebe:	617b      	str	r3, [r7, #20]
}
 800bec0:	bf00      	nop
 800bec2:	e7fe      	b.n	800bec2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bec4:	4b0a      	ldr	r3, [pc, #40]	; (800bef0 <vTaskPlaceOnEventListRestricted+0x54>)
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	3318      	adds	r3, #24
 800beca:	4619      	mov	r1, r3
 800becc:	68f8      	ldr	r0, [r7, #12]
 800bece:	f7fe fb8a 	bl	800a5e6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d002      	beq.n	800bede <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800bed8:	f04f 33ff 	mov.w	r3, #4294967295
 800bedc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800bede:	6879      	ldr	r1, [r7, #4]
 800bee0:	68b8      	ldr	r0, [r7, #8]
 800bee2:	f000 fbd9 	bl	800c698 <prvAddCurrentTaskToDelayedList>
	}
 800bee6:	bf00      	nop
 800bee8:	3718      	adds	r7, #24
 800beea:	46bd      	mov	sp, r7
 800beec:	bd80      	pop	{r7, pc}
 800beee:	bf00      	nop
 800bef0:	20001360 	.word	0x20001360

0800bef4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800bef4:	b580      	push	{r7, lr}
 800bef6:	b086      	sub	sp, #24
 800bef8:	af00      	add	r7, sp, #0
 800befa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	68db      	ldr	r3, [r3, #12]
 800bf00:	68db      	ldr	r3, [r3, #12]
 800bf02:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800bf04:	693b      	ldr	r3, [r7, #16]
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d10a      	bne.n	800bf20 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800bf0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf0e:	f383 8811 	msr	BASEPRI, r3
 800bf12:	f3bf 8f6f 	isb	sy
 800bf16:	f3bf 8f4f 	dsb	sy
 800bf1a:	60fb      	str	r3, [r7, #12]
}
 800bf1c:	bf00      	nop
 800bf1e:	e7fe      	b.n	800bf1e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800bf20:	693b      	ldr	r3, [r7, #16]
 800bf22:	3318      	adds	r3, #24
 800bf24:	4618      	mov	r0, r3
 800bf26:	f7fe fbbb 	bl	800a6a0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bf2a:	4b1d      	ldr	r3, [pc, #116]	; (800bfa0 <xTaskRemoveFromEventList+0xac>)
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d11c      	bne.n	800bf6c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800bf32:	693b      	ldr	r3, [r7, #16]
 800bf34:	3304      	adds	r3, #4
 800bf36:	4618      	mov	r0, r3
 800bf38:	f7fe fbb2 	bl	800a6a0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800bf3c:	693b      	ldr	r3, [r7, #16]
 800bf3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf40:	2201      	movs	r2, #1
 800bf42:	409a      	lsls	r2, r3
 800bf44:	4b17      	ldr	r3, [pc, #92]	; (800bfa4 <xTaskRemoveFromEventList+0xb0>)
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	4313      	orrs	r3, r2
 800bf4a:	4a16      	ldr	r2, [pc, #88]	; (800bfa4 <xTaskRemoveFromEventList+0xb0>)
 800bf4c:	6013      	str	r3, [r2, #0]
 800bf4e:	693b      	ldr	r3, [r7, #16]
 800bf50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf52:	4613      	mov	r3, r2
 800bf54:	009b      	lsls	r3, r3, #2
 800bf56:	4413      	add	r3, r2
 800bf58:	009b      	lsls	r3, r3, #2
 800bf5a:	4a13      	ldr	r2, [pc, #76]	; (800bfa8 <xTaskRemoveFromEventList+0xb4>)
 800bf5c:	441a      	add	r2, r3
 800bf5e:	693b      	ldr	r3, [r7, #16]
 800bf60:	3304      	adds	r3, #4
 800bf62:	4619      	mov	r1, r3
 800bf64:	4610      	mov	r0, r2
 800bf66:	f7fe fb3e 	bl	800a5e6 <vListInsertEnd>
 800bf6a:	e005      	b.n	800bf78 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800bf6c:	693b      	ldr	r3, [r7, #16]
 800bf6e:	3318      	adds	r3, #24
 800bf70:	4619      	mov	r1, r3
 800bf72:	480e      	ldr	r0, [pc, #56]	; (800bfac <xTaskRemoveFromEventList+0xb8>)
 800bf74:	f7fe fb37 	bl	800a5e6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bf78:	693b      	ldr	r3, [r7, #16]
 800bf7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf7c:	4b0c      	ldr	r3, [pc, #48]	; (800bfb0 <xTaskRemoveFromEventList+0xbc>)
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf82:	429a      	cmp	r2, r3
 800bf84:	d905      	bls.n	800bf92 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800bf86:	2301      	movs	r3, #1
 800bf88:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800bf8a:	4b0a      	ldr	r3, [pc, #40]	; (800bfb4 <xTaskRemoveFromEventList+0xc0>)
 800bf8c:	2201      	movs	r2, #1
 800bf8e:	601a      	str	r2, [r3, #0]
 800bf90:	e001      	b.n	800bf96 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800bf92:	2300      	movs	r3, #0
 800bf94:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800bf96:	697b      	ldr	r3, [r7, #20]
}
 800bf98:	4618      	mov	r0, r3
 800bf9a:	3718      	adds	r7, #24
 800bf9c:	46bd      	mov	sp, r7
 800bf9e:	bd80      	pop	{r7, pc}
 800bfa0:	20001488 	.word	0x20001488
 800bfa4:	20001468 	.word	0x20001468
 800bfa8:	20001364 	.word	0x20001364
 800bfac:	20001420 	.word	0x20001420
 800bfb0:	20001360 	.word	0x20001360
 800bfb4:	20001474 	.word	0x20001474

0800bfb8 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 800bfb8:	b580      	push	{r7, lr}
 800bfba:	b086      	sub	sp, #24
 800bfbc:	af00      	add	r7, sp, #0
 800bfbe:	6078      	str	r0, [r7, #4]
 800bfc0:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800bfc2:	4b29      	ldr	r3, [pc, #164]	; (800c068 <vTaskRemoveFromUnorderedEventList+0xb0>)
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d10a      	bne.n	800bfe0 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 800bfca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfce:	f383 8811 	msr	BASEPRI, r3
 800bfd2:	f3bf 8f6f 	isb	sy
 800bfd6:	f3bf 8f4f 	dsb	sy
 800bfda:	613b      	str	r3, [r7, #16]
}
 800bfdc:	bf00      	nop
 800bfde:	e7fe      	b.n	800bfde <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800bfe0:	683b      	ldr	r3, [r7, #0]
 800bfe2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	68db      	ldr	r3, [r3, #12]
 800bfee:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 800bff0:	697b      	ldr	r3, [r7, #20]
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d10a      	bne.n	800c00c <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 800bff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bffa:	f383 8811 	msr	BASEPRI, r3
 800bffe:	f3bf 8f6f 	isb	sy
 800c002:	f3bf 8f4f 	dsb	sy
 800c006:	60fb      	str	r3, [r7, #12]
}
 800c008:	bf00      	nop
 800c00a:	e7fe      	b.n	800c00a <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 800c00c:	6878      	ldr	r0, [r7, #4]
 800c00e:	f7fe fb47 	bl	800a6a0 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c012:	697b      	ldr	r3, [r7, #20]
 800c014:	3304      	adds	r3, #4
 800c016:	4618      	mov	r0, r3
 800c018:	f7fe fb42 	bl	800a6a0 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800c01c:	697b      	ldr	r3, [r7, #20]
 800c01e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c020:	2201      	movs	r2, #1
 800c022:	409a      	lsls	r2, r3
 800c024:	4b11      	ldr	r3, [pc, #68]	; (800c06c <vTaskRemoveFromUnorderedEventList+0xb4>)
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	4313      	orrs	r3, r2
 800c02a:	4a10      	ldr	r2, [pc, #64]	; (800c06c <vTaskRemoveFromUnorderedEventList+0xb4>)
 800c02c:	6013      	str	r3, [r2, #0]
 800c02e:	697b      	ldr	r3, [r7, #20]
 800c030:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c032:	4613      	mov	r3, r2
 800c034:	009b      	lsls	r3, r3, #2
 800c036:	4413      	add	r3, r2
 800c038:	009b      	lsls	r3, r3, #2
 800c03a:	4a0d      	ldr	r2, [pc, #52]	; (800c070 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800c03c:	441a      	add	r2, r3
 800c03e:	697b      	ldr	r3, [r7, #20]
 800c040:	3304      	adds	r3, #4
 800c042:	4619      	mov	r1, r3
 800c044:	4610      	mov	r0, r2
 800c046:	f7fe face 	bl	800a5e6 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c04a:	697b      	ldr	r3, [r7, #20]
 800c04c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c04e:	4b09      	ldr	r3, [pc, #36]	; (800c074 <vTaskRemoveFromUnorderedEventList+0xbc>)
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c054:	429a      	cmp	r2, r3
 800c056:	d902      	bls.n	800c05e <vTaskRemoveFromUnorderedEventList+0xa6>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 800c058:	4b07      	ldr	r3, [pc, #28]	; (800c078 <vTaskRemoveFromUnorderedEventList+0xc0>)
 800c05a:	2201      	movs	r2, #1
 800c05c:	601a      	str	r2, [r3, #0]
	}
}
 800c05e:	bf00      	nop
 800c060:	3718      	adds	r7, #24
 800c062:	46bd      	mov	sp, r7
 800c064:	bd80      	pop	{r7, pc}
 800c066:	bf00      	nop
 800c068:	20001488 	.word	0x20001488
 800c06c:	20001468 	.word	0x20001468
 800c070:	20001364 	.word	0x20001364
 800c074:	20001360 	.word	0x20001360
 800c078:	20001474 	.word	0x20001474

0800c07c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c07c:	b480      	push	{r7}
 800c07e:	b083      	sub	sp, #12
 800c080:	af00      	add	r7, sp, #0
 800c082:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c084:	4b06      	ldr	r3, [pc, #24]	; (800c0a0 <vTaskInternalSetTimeOutState+0x24>)
 800c086:	681a      	ldr	r2, [r3, #0]
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c08c:	4b05      	ldr	r3, [pc, #20]	; (800c0a4 <vTaskInternalSetTimeOutState+0x28>)
 800c08e:	681a      	ldr	r2, [r3, #0]
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	605a      	str	r2, [r3, #4]
}
 800c094:	bf00      	nop
 800c096:	370c      	adds	r7, #12
 800c098:	46bd      	mov	sp, r7
 800c09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c09e:	4770      	bx	lr
 800c0a0:	20001478 	.word	0x20001478
 800c0a4:	20001464 	.word	0x20001464

0800c0a8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c0a8:	b580      	push	{r7, lr}
 800c0aa:	b088      	sub	sp, #32
 800c0ac:	af00      	add	r7, sp, #0
 800c0ae:	6078      	str	r0, [r7, #4]
 800c0b0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d10a      	bne.n	800c0ce <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800c0b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0bc:	f383 8811 	msr	BASEPRI, r3
 800c0c0:	f3bf 8f6f 	isb	sy
 800c0c4:	f3bf 8f4f 	dsb	sy
 800c0c8:	613b      	str	r3, [r7, #16]
}
 800c0ca:	bf00      	nop
 800c0cc:	e7fe      	b.n	800c0cc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c0ce:	683b      	ldr	r3, [r7, #0]
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d10a      	bne.n	800c0ea <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800c0d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0d8:	f383 8811 	msr	BASEPRI, r3
 800c0dc:	f3bf 8f6f 	isb	sy
 800c0e0:	f3bf 8f4f 	dsb	sy
 800c0e4:	60fb      	str	r3, [r7, #12]
}
 800c0e6:	bf00      	nop
 800c0e8:	e7fe      	b.n	800c0e8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800c0ea:	f000 ffb3 	bl	800d054 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c0ee:	4b1d      	ldr	r3, [pc, #116]	; (800c164 <xTaskCheckForTimeOut+0xbc>)
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	685b      	ldr	r3, [r3, #4]
 800c0f8:	69ba      	ldr	r2, [r7, #24]
 800c0fa:	1ad3      	subs	r3, r2, r3
 800c0fc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c0fe:	683b      	ldr	r3, [r7, #0]
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c106:	d102      	bne.n	800c10e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c108:	2300      	movs	r3, #0
 800c10a:	61fb      	str	r3, [r7, #28]
 800c10c:	e023      	b.n	800c156 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	681a      	ldr	r2, [r3, #0]
 800c112:	4b15      	ldr	r3, [pc, #84]	; (800c168 <xTaskCheckForTimeOut+0xc0>)
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	429a      	cmp	r2, r3
 800c118:	d007      	beq.n	800c12a <xTaskCheckForTimeOut+0x82>
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	685b      	ldr	r3, [r3, #4]
 800c11e:	69ba      	ldr	r2, [r7, #24]
 800c120:	429a      	cmp	r2, r3
 800c122:	d302      	bcc.n	800c12a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c124:	2301      	movs	r3, #1
 800c126:	61fb      	str	r3, [r7, #28]
 800c128:	e015      	b.n	800c156 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c12a:	683b      	ldr	r3, [r7, #0]
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	697a      	ldr	r2, [r7, #20]
 800c130:	429a      	cmp	r2, r3
 800c132:	d20b      	bcs.n	800c14c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c134:	683b      	ldr	r3, [r7, #0]
 800c136:	681a      	ldr	r2, [r3, #0]
 800c138:	697b      	ldr	r3, [r7, #20]
 800c13a:	1ad2      	subs	r2, r2, r3
 800c13c:	683b      	ldr	r3, [r7, #0]
 800c13e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c140:	6878      	ldr	r0, [r7, #4]
 800c142:	f7ff ff9b 	bl	800c07c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c146:	2300      	movs	r3, #0
 800c148:	61fb      	str	r3, [r7, #28]
 800c14a:	e004      	b.n	800c156 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800c14c:	683b      	ldr	r3, [r7, #0]
 800c14e:	2200      	movs	r2, #0
 800c150:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c152:	2301      	movs	r3, #1
 800c154:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c156:	f000 ffad 	bl	800d0b4 <vPortExitCritical>

	return xReturn;
 800c15a:	69fb      	ldr	r3, [r7, #28]
}
 800c15c:	4618      	mov	r0, r3
 800c15e:	3720      	adds	r7, #32
 800c160:	46bd      	mov	sp, r7
 800c162:	bd80      	pop	{r7, pc}
 800c164:	20001464 	.word	0x20001464
 800c168:	20001478 	.word	0x20001478

0800c16c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c16c:	b480      	push	{r7}
 800c16e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c170:	4b03      	ldr	r3, [pc, #12]	; (800c180 <vTaskMissedYield+0x14>)
 800c172:	2201      	movs	r2, #1
 800c174:	601a      	str	r2, [r3, #0]
}
 800c176:	bf00      	nop
 800c178:	46bd      	mov	sp, r7
 800c17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c17e:	4770      	bx	lr
 800c180:	20001474 	.word	0x20001474

0800c184 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c184:	b580      	push	{r7, lr}
 800c186:	b082      	sub	sp, #8
 800c188:	af00      	add	r7, sp, #0
 800c18a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c18c:	f000 f852 	bl	800c234 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c190:	4b06      	ldr	r3, [pc, #24]	; (800c1ac <prvIdleTask+0x28>)
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	2b01      	cmp	r3, #1
 800c196:	d9f9      	bls.n	800c18c <prvIdleTask+0x8>
			{
				taskYIELD();
 800c198:	4b05      	ldr	r3, [pc, #20]	; (800c1b0 <prvIdleTask+0x2c>)
 800c19a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c19e:	601a      	str	r2, [r3, #0]
 800c1a0:	f3bf 8f4f 	dsb	sy
 800c1a4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c1a8:	e7f0      	b.n	800c18c <prvIdleTask+0x8>
 800c1aa:	bf00      	nop
 800c1ac:	20001364 	.word	0x20001364
 800c1b0:	e000ed04 	.word	0xe000ed04

0800c1b4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c1b4:	b580      	push	{r7, lr}
 800c1b6:	b082      	sub	sp, #8
 800c1b8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c1ba:	2300      	movs	r3, #0
 800c1bc:	607b      	str	r3, [r7, #4]
 800c1be:	e00c      	b.n	800c1da <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c1c0:	687a      	ldr	r2, [r7, #4]
 800c1c2:	4613      	mov	r3, r2
 800c1c4:	009b      	lsls	r3, r3, #2
 800c1c6:	4413      	add	r3, r2
 800c1c8:	009b      	lsls	r3, r3, #2
 800c1ca:	4a12      	ldr	r2, [pc, #72]	; (800c214 <prvInitialiseTaskLists+0x60>)
 800c1cc:	4413      	add	r3, r2
 800c1ce:	4618      	mov	r0, r3
 800c1d0:	f7fe f9dc 	bl	800a58c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	3301      	adds	r3, #1
 800c1d8:	607b      	str	r3, [r7, #4]
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	2b06      	cmp	r3, #6
 800c1de:	d9ef      	bls.n	800c1c0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c1e0:	480d      	ldr	r0, [pc, #52]	; (800c218 <prvInitialiseTaskLists+0x64>)
 800c1e2:	f7fe f9d3 	bl	800a58c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c1e6:	480d      	ldr	r0, [pc, #52]	; (800c21c <prvInitialiseTaskLists+0x68>)
 800c1e8:	f7fe f9d0 	bl	800a58c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c1ec:	480c      	ldr	r0, [pc, #48]	; (800c220 <prvInitialiseTaskLists+0x6c>)
 800c1ee:	f7fe f9cd 	bl	800a58c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c1f2:	480c      	ldr	r0, [pc, #48]	; (800c224 <prvInitialiseTaskLists+0x70>)
 800c1f4:	f7fe f9ca 	bl	800a58c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c1f8:	480b      	ldr	r0, [pc, #44]	; (800c228 <prvInitialiseTaskLists+0x74>)
 800c1fa:	f7fe f9c7 	bl	800a58c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c1fe:	4b0b      	ldr	r3, [pc, #44]	; (800c22c <prvInitialiseTaskLists+0x78>)
 800c200:	4a05      	ldr	r2, [pc, #20]	; (800c218 <prvInitialiseTaskLists+0x64>)
 800c202:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c204:	4b0a      	ldr	r3, [pc, #40]	; (800c230 <prvInitialiseTaskLists+0x7c>)
 800c206:	4a05      	ldr	r2, [pc, #20]	; (800c21c <prvInitialiseTaskLists+0x68>)
 800c208:	601a      	str	r2, [r3, #0]
}
 800c20a:	bf00      	nop
 800c20c:	3708      	adds	r7, #8
 800c20e:	46bd      	mov	sp, r7
 800c210:	bd80      	pop	{r7, pc}
 800c212:	bf00      	nop
 800c214:	20001364 	.word	0x20001364
 800c218:	200013f0 	.word	0x200013f0
 800c21c:	20001404 	.word	0x20001404
 800c220:	20001420 	.word	0x20001420
 800c224:	20001434 	.word	0x20001434
 800c228:	2000144c 	.word	0x2000144c
 800c22c:	20001418 	.word	0x20001418
 800c230:	2000141c 	.word	0x2000141c

0800c234 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c234:	b580      	push	{r7, lr}
 800c236:	b082      	sub	sp, #8
 800c238:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c23a:	e019      	b.n	800c270 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c23c:	f000 ff0a 	bl	800d054 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c240:	4b10      	ldr	r3, [pc, #64]	; (800c284 <prvCheckTasksWaitingTermination+0x50>)
 800c242:	68db      	ldr	r3, [r3, #12]
 800c244:	68db      	ldr	r3, [r3, #12]
 800c246:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	3304      	adds	r3, #4
 800c24c:	4618      	mov	r0, r3
 800c24e:	f7fe fa27 	bl	800a6a0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c252:	4b0d      	ldr	r3, [pc, #52]	; (800c288 <prvCheckTasksWaitingTermination+0x54>)
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	3b01      	subs	r3, #1
 800c258:	4a0b      	ldr	r2, [pc, #44]	; (800c288 <prvCheckTasksWaitingTermination+0x54>)
 800c25a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c25c:	4b0b      	ldr	r3, [pc, #44]	; (800c28c <prvCheckTasksWaitingTermination+0x58>)
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	3b01      	subs	r3, #1
 800c262:	4a0a      	ldr	r2, [pc, #40]	; (800c28c <prvCheckTasksWaitingTermination+0x58>)
 800c264:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c266:	f000 ff25 	bl	800d0b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c26a:	6878      	ldr	r0, [r7, #4]
 800c26c:	f000 f810 	bl	800c290 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c270:	4b06      	ldr	r3, [pc, #24]	; (800c28c <prvCheckTasksWaitingTermination+0x58>)
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	2b00      	cmp	r3, #0
 800c276:	d1e1      	bne.n	800c23c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c278:	bf00      	nop
 800c27a:	bf00      	nop
 800c27c:	3708      	adds	r7, #8
 800c27e:	46bd      	mov	sp, r7
 800c280:	bd80      	pop	{r7, pc}
 800c282:	bf00      	nop
 800c284:	20001434 	.word	0x20001434
 800c288:	20001460 	.word	0x20001460
 800c28c:	20001448 	.word	0x20001448

0800c290 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c290:	b580      	push	{r7, lr}
 800c292:	b082      	sub	sp, #8
 800c294:	af00      	add	r7, sp, #0
 800c296:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c29c:	4618      	mov	r0, r3
 800c29e:	f001 f8c7 	bl	800d430 <vPortFree>
			vPortFree( pxTCB );
 800c2a2:	6878      	ldr	r0, [r7, #4]
 800c2a4:	f001 f8c4 	bl	800d430 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c2a8:	bf00      	nop
 800c2aa:	3708      	adds	r7, #8
 800c2ac:	46bd      	mov	sp, r7
 800c2ae:	bd80      	pop	{r7, pc}

0800c2b0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c2b0:	b480      	push	{r7}
 800c2b2:	b083      	sub	sp, #12
 800c2b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c2b6:	4b0c      	ldr	r3, [pc, #48]	; (800c2e8 <prvResetNextTaskUnblockTime+0x38>)
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d104      	bne.n	800c2ca <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c2c0:	4b0a      	ldr	r3, [pc, #40]	; (800c2ec <prvResetNextTaskUnblockTime+0x3c>)
 800c2c2:	f04f 32ff 	mov.w	r2, #4294967295
 800c2c6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c2c8:	e008      	b.n	800c2dc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c2ca:	4b07      	ldr	r3, [pc, #28]	; (800c2e8 <prvResetNextTaskUnblockTime+0x38>)
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	68db      	ldr	r3, [r3, #12]
 800c2d0:	68db      	ldr	r3, [r3, #12]
 800c2d2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	685b      	ldr	r3, [r3, #4]
 800c2d8:	4a04      	ldr	r2, [pc, #16]	; (800c2ec <prvResetNextTaskUnblockTime+0x3c>)
 800c2da:	6013      	str	r3, [r2, #0]
}
 800c2dc:	bf00      	nop
 800c2de:	370c      	adds	r7, #12
 800c2e0:	46bd      	mov	sp, r7
 800c2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e6:	4770      	bx	lr
 800c2e8:	20001418 	.word	0x20001418
 800c2ec:	20001480 	.word	0x20001480

0800c2f0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c2f0:	b480      	push	{r7}
 800c2f2:	b083      	sub	sp, #12
 800c2f4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c2f6:	4b0b      	ldr	r3, [pc, #44]	; (800c324 <xTaskGetSchedulerState+0x34>)
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d102      	bne.n	800c304 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c2fe:	2301      	movs	r3, #1
 800c300:	607b      	str	r3, [r7, #4]
 800c302:	e008      	b.n	800c316 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c304:	4b08      	ldr	r3, [pc, #32]	; (800c328 <xTaskGetSchedulerState+0x38>)
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d102      	bne.n	800c312 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c30c:	2302      	movs	r3, #2
 800c30e:	607b      	str	r3, [r7, #4]
 800c310:	e001      	b.n	800c316 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c312:	2300      	movs	r3, #0
 800c314:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c316:	687b      	ldr	r3, [r7, #4]
	}
 800c318:	4618      	mov	r0, r3
 800c31a:	370c      	adds	r7, #12
 800c31c:	46bd      	mov	sp, r7
 800c31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c322:	4770      	bx	lr
 800c324:	2000146c 	.word	0x2000146c
 800c328:	20001488 	.word	0x20001488

0800c32c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800c32c:	b580      	push	{r7, lr}
 800c32e:	b084      	sub	sp, #16
 800c330:	af00      	add	r7, sp, #0
 800c332:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800c338:	2300      	movs	r3, #0
 800c33a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d05e      	beq.n	800c400 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800c342:	68bb      	ldr	r3, [r7, #8]
 800c344:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c346:	4b31      	ldr	r3, [pc, #196]	; (800c40c <xTaskPriorityInherit+0xe0>)
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c34c:	429a      	cmp	r2, r3
 800c34e:	d24e      	bcs.n	800c3ee <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c350:	68bb      	ldr	r3, [r7, #8]
 800c352:	699b      	ldr	r3, [r3, #24]
 800c354:	2b00      	cmp	r3, #0
 800c356:	db06      	blt.n	800c366 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c358:	4b2c      	ldr	r3, [pc, #176]	; (800c40c <xTaskPriorityInherit+0xe0>)
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c35e:	f1c3 0207 	rsb	r2, r3, #7
 800c362:	68bb      	ldr	r3, [r7, #8]
 800c364:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800c366:	68bb      	ldr	r3, [r7, #8]
 800c368:	6959      	ldr	r1, [r3, #20]
 800c36a:	68bb      	ldr	r3, [r7, #8]
 800c36c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c36e:	4613      	mov	r3, r2
 800c370:	009b      	lsls	r3, r3, #2
 800c372:	4413      	add	r3, r2
 800c374:	009b      	lsls	r3, r3, #2
 800c376:	4a26      	ldr	r2, [pc, #152]	; (800c410 <xTaskPriorityInherit+0xe4>)
 800c378:	4413      	add	r3, r2
 800c37a:	4299      	cmp	r1, r3
 800c37c:	d12f      	bne.n	800c3de <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c37e:	68bb      	ldr	r3, [r7, #8]
 800c380:	3304      	adds	r3, #4
 800c382:	4618      	mov	r0, r3
 800c384:	f7fe f98c 	bl	800a6a0 <uxListRemove>
 800c388:	4603      	mov	r3, r0
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d10a      	bne.n	800c3a4 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800c38e:	68bb      	ldr	r3, [r7, #8]
 800c390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c392:	2201      	movs	r2, #1
 800c394:	fa02 f303 	lsl.w	r3, r2, r3
 800c398:	43da      	mvns	r2, r3
 800c39a:	4b1e      	ldr	r3, [pc, #120]	; (800c414 <xTaskPriorityInherit+0xe8>)
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	4013      	ands	r3, r2
 800c3a0:	4a1c      	ldr	r2, [pc, #112]	; (800c414 <xTaskPriorityInherit+0xe8>)
 800c3a2:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c3a4:	4b19      	ldr	r3, [pc, #100]	; (800c40c <xTaskPriorityInherit+0xe0>)
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c3aa:	68bb      	ldr	r3, [r7, #8]
 800c3ac:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800c3ae:	68bb      	ldr	r3, [r7, #8]
 800c3b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3b2:	2201      	movs	r2, #1
 800c3b4:	409a      	lsls	r2, r3
 800c3b6:	4b17      	ldr	r3, [pc, #92]	; (800c414 <xTaskPriorityInherit+0xe8>)
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	4313      	orrs	r3, r2
 800c3bc:	4a15      	ldr	r2, [pc, #84]	; (800c414 <xTaskPriorityInherit+0xe8>)
 800c3be:	6013      	str	r3, [r2, #0]
 800c3c0:	68bb      	ldr	r3, [r7, #8]
 800c3c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c3c4:	4613      	mov	r3, r2
 800c3c6:	009b      	lsls	r3, r3, #2
 800c3c8:	4413      	add	r3, r2
 800c3ca:	009b      	lsls	r3, r3, #2
 800c3cc:	4a10      	ldr	r2, [pc, #64]	; (800c410 <xTaskPriorityInherit+0xe4>)
 800c3ce:	441a      	add	r2, r3
 800c3d0:	68bb      	ldr	r3, [r7, #8]
 800c3d2:	3304      	adds	r3, #4
 800c3d4:	4619      	mov	r1, r3
 800c3d6:	4610      	mov	r0, r2
 800c3d8:	f7fe f905 	bl	800a5e6 <vListInsertEnd>
 800c3dc:	e004      	b.n	800c3e8 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c3de:	4b0b      	ldr	r3, [pc, #44]	; (800c40c <xTaskPriorityInherit+0xe0>)
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c3e4:	68bb      	ldr	r3, [r7, #8]
 800c3e6:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800c3e8:	2301      	movs	r3, #1
 800c3ea:	60fb      	str	r3, [r7, #12]
 800c3ec:	e008      	b.n	800c400 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800c3ee:	68bb      	ldr	r3, [r7, #8]
 800c3f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c3f2:	4b06      	ldr	r3, [pc, #24]	; (800c40c <xTaskPriorityInherit+0xe0>)
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3f8:	429a      	cmp	r2, r3
 800c3fa:	d201      	bcs.n	800c400 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800c3fc:	2301      	movs	r3, #1
 800c3fe:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c400:	68fb      	ldr	r3, [r7, #12]
	}
 800c402:	4618      	mov	r0, r3
 800c404:	3710      	adds	r7, #16
 800c406:	46bd      	mov	sp, r7
 800c408:	bd80      	pop	{r7, pc}
 800c40a:	bf00      	nop
 800c40c:	20001360 	.word	0x20001360
 800c410:	20001364 	.word	0x20001364
 800c414:	20001468 	.word	0x20001468

0800c418 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c418:	b580      	push	{r7, lr}
 800c41a:	b086      	sub	sp, #24
 800c41c:	af00      	add	r7, sp, #0
 800c41e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c424:	2300      	movs	r3, #0
 800c426:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d06e      	beq.n	800c50c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c42e:	4b3a      	ldr	r3, [pc, #232]	; (800c518 <xTaskPriorityDisinherit+0x100>)
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	693a      	ldr	r2, [r7, #16]
 800c434:	429a      	cmp	r2, r3
 800c436:	d00a      	beq.n	800c44e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800c438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c43c:	f383 8811 	msr	BASEPRI, r3
 800c440:	f3bf 8f6f 	isb	sy
 800c444:	f3bf 8f4f 	dsb	sy
 800c448:	60fb      	str	r3, [r7, #12]
}
 800c44a:	bf00      	nop
 800c44c:	e7fe      	b.n	800c44c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c44e:	693b      	ldr	r3, [r7, #16]
 800c450:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c452:	2b00      	cmp	r3, #0
 800c454:	d10a      	bne.n	800c46c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800c456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c45a:	f383 8811 	msr	BASEPRI, r3
 800c45e:	f3bf 8f6f 	isb	sy
 800c462:	f3bf 8f4f 	dsb	sy
 800c466:	60bb      	str	r3, [r7, #8]
}
 800c468:	bf00      	nop
 800c46a:	e7fe      	b.n	800c46a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800c46c:	693b      	ldr	r3, [r7, #16]
 800c46e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c470:	1e5a      	subs	r2, r3, #1
 800c472:	693b      	ldr	r3, [r7, #16]
 800c474:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c476:	693b      	ldr	r3, [r7, #16]
 800c478:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c47a:	693b      	ldr	r3, [r7, #16]
 800c47c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c47e:	429a      	cmp	r2, r3
 800c480:	d044      	beq.n	800c50c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c482:	693b      	ldr	r3, [r7, #16]
 800c484:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c486:	2b00      	cmp	r3, #0
 800c488:	d140      	bne.n	800c50c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c48a:	693b      	ldr	r3, [r7, #16]
 800c48c:	3304      	adds	r3, #4
 800c48e:	4618      	mov	r0, r3
 800c490:	f7fe f906 	bl	800a6a0 <uxListRemove>
 800c494:	4603      	mov	r3, r0
 800c496:	2b00      	cmp	r3, #0
 800c498:	d115      	bne.n	800c4c6 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800c49a:	693b      	ldr	r3, [r7, #16]
 800c49c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c49e:	491f      	ldr	r1, [pc, #124]	; (800c51c <xTaskPriorityDisinherit+0x104>)
 800c4a0:	4613      	mov	r3, r2
 800c4a2:	009b      	lsls	r3, r3, #2
 800c4a4:	4413      	add	r3, r2
 800c4a6:	009b      	lsls	r3, r3, #2
 800c4a8:	440b      	add	r3, r1
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d10a      	bne.n	800c4c6 <xTaskPriorityDisinherit+0xae>
 800c4b0:	693b      	ldr	r3, [r7, #16]
 800c4b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4b4:	2201      	movs	r2, #1
 800c4b6:	fa02 f303 	lsl.w	r3, r2, r3
 800c4ba:	43da      	mvns	r2, r3
 800c4bc:	4b18      	ldr	r3, [pc, #96]	; (800c520 <xTaskPriorityDisinherit+0x108>)
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	4013      	ands	r3, r2
 800c4c2:	4a17      	ldr	r2, [pc, #92]	; (800c520 <xTaskPriorityDisinherit+0x108>)
 800c4c4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c4c6:	693b      	ldr	r3, [r7, #16]
 800c4c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c4ca:	693b      	ldr	r3, [r7, #16]
 800c4cc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c4ce:	693b      	ldr	r3, [r7, #16]
 800c4d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4d2:	f1c3 0207 	rsb	r2, r3, #7
 800c4d6:	693b      	ldr	r3, [r7, #16]
 800c4d8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c4da:	693b      	ldr	r3, [r7, #16]
 800c4dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4de:	2201      	movs	r2, #1
 800c4e0:	409a      	lsls	r2, r3
 800c4e2:	4b0f      	ldr	r3, [pc, #60]	; (800c520 <xTaskPriorityDisinherit+0x108>)
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	4313      	orrs	r3, r2
 800c4e8:	4a0d      	ldr	r2, [pc, #52]	; (800c520 <xTaskPriorityDisinherit+0x108>)
 800c4ea:	6013      	str	r3, [r2, #0]
 800c4ec:	693b      	ldr	r3, [r7, #16]
 800c4ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4f0:	4613      	mov	r3, r2
 800c4f2:	009b      	lsls	r3, r3, #2
 800c4f4:	4413      	add	r3, r2
 800c4f6:	009b      	lsls	r3, r3, #2
 800c4f8:	4a08      	ldr	r2, [pc, #32]	; (800c51c <xTaskPriorityDisinherit+0x104>)
 800c4fa:	441a      	add	r2, r3
 800c4fc:	693b      	ldr	r3, [r7, #16]
 800c4fe:	3304      	adds	r3, #4
 800c500:	4619      	mov	r1, r3
 800c502:	4610      	mov	r0, r2
 800c504:	f7fe f86f 	bl	800a5e6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c508:	2301      	movs	r3, #1
 800c50a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c50c:	697b      	ldr	r3, [r7, #20]
	}
 800c50e:	4618      	mov	r0, r3
 800c510:	3718      	adds	r7, #24
 800c512:	46bd      	mov	sp, r7
 800c514:	bd80      	pop	{r7, pc}
 800c516:	bf00      	nop
 800c518:	20001360 	.word	0x20001360
 800c51c:	20001364 	.word	0x20001364
 800c520:	20001468 	.word	0x20001468

0800c524 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800c524:	b580      	push	{r7, lr}
 800c526:	b088      	sub	sp, #32
 800c528:	af00      	add	r7, sp, #0
 800c52a:	6078      	str	r0, [r7, #4]
 800c52c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800c532:	2301      	movs	r3, #1
 800c534:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d077      	beq.n	800c62c <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800c53c:	69bb      	ldr	r3, [r7, #24]
 800c53e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c540:	2b00      	cmp	r3, #0
 800c542:	d10a      	bne.n	800c55a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800c544:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c548:	f383 8811 	msr	BASEPRI, r3
 800c54c:	f3bf 8f6f 	isb	sy
 800c550:	f3bf 8f4f 	dsb	sy
 800c554:	60fb      	str	r3, [r7, #12]
}
 800c556:	bf00      	nop
 800c558:	e7fe      	b.n	800c558 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800c55a:	69bb      	ldr	r3, [r7, #24]
 800c55c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c55e:	683a      	ldr	r2, [r7, #0]
 800c560:	429a      	cmp	r2, r3
 800c562:	d902      	bls.n	800c56a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800c564:	683b      	ldr	r3, [r7, #0]
 800c566:	61fb      	str	r3, [r7, #28]
 800c568:	e002      	b.n	800c570 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800c56a:	69bb      	ldr	r3, [r7, #24]
 800c56c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c56e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800c570:	69bb      	ldr	r3, [r7, #24]
 800c572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c574:	69fa      	ldr	r2, [r7, #28]
 800c576:	429a      	cmp	r2, r3
 800c578:	d058      	beq.n	800c62c <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800c57a:	69bb      	ldr	r3, [r7, #24]
 800c57c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c57e:	697a      	ldr	r2, [r7, #20]
 800c580:	429a      	cmp	r2, r3
 800c582:	d153      	bne.n	800c62c <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800c584:	4b2b      	ldr	r3, [pc, #172]	; (800c634 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	69ba      	ldr	r2, [r7, #24]
 800c58a:	429a      	cmp	r2, r3
 800c58c:	d10a      	bne.n	800c5a4 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800c58e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c592:	f383 8811 	msr	BASEPRI, r3
 800c596:	f3bf 8f6f 	isb	sy
 800c59a:	f3bf 8f4f 	dsb	sy
 800c59e:	60bb      	str	r3, [r7, #8]
}
 800c5a0:	bf00      	nop
 800c5a2:	e7fe      	b.n	800c5a2 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800c5a4:	69bb      	ldr	r3, [r7, #24]
 800c5a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5a8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800c5aa:	69bb      	ldr	r3, [r7, #24]
 800c5ac:	69fa      	ldr	r2, [r7, #28]
 800c5ae:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c5b0:	69bb      	ldr	r3, [r7, #24]
 800c5b2:	699b      	ldr	r3, [r3, #24]
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	db04      	blt.n	800c5c2 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c5b8:	69fb      	ldr	r3, [r7, #28]
 800c5ba:	f1c3 0207 	rsb	r2, r3, #7
 800c5be:	69bb      	ldr	r3, [r7, #24]
 800c5c0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c5c2:	69bb      	ldr	r3, [r7, #24]
 800c5c4:	6959      	ldr	r1, [r3, #20]
 800c5c6:	693a      	ldr	r2, [r7, #16]
 800c5c8:	4613      	mov	r3, r2
 800c5ca:	009b      	lsls	r3, r3, #2
 800c5cc:	4413      	add	r3, r2
 800c5ce:	009b      	lsls	r3, r3, #2
 800c5d0:	4a19      	ldr	r2, [pc, #100]	; (800c638 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800c5d2:	4413      	add	r3, r2
 800c5d4:	4299      	cmp	r1, r3
 800c5d6:	d129      	bne.n	800c62c <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c5d8:	69bb      	ldr	r3, [r7, #24]
 800c5da:	3304      	adds	r3, #4
 800c5dc:	4618      	mov	r0, r3
 800c5de:	f7fe f85f 	bl	800a6a0 <uxListRemove>
 800c5e2:	4603      	mov	r3, r0
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d10a      	bne.n	800c5fe <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800c5e8:	69bb      	ldr	r3, [r7, #24]
 800c5ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5ec:	2201      	movs	r2, #1
 800c5ee:	fa02 f303 	lsl.w	r3, r2, r3
 800c5f2:	43da      	mvns	r2, r3
 800c5f4:	4b11      	ldr	r3, [pc, #68]	; (800c63c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	4013      	ands	r3, r2
 800c5fa:	4a10      	ldr	r2, [pc, #64]	; (800c63c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800c5fc:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800c5fe:	69bb      	ldr	r3, [r7, #24]
 800c600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c602:	2201      	movs	r2, #1
 800c604:	409a      	lsls	r2, r3
 800c606:	4b0d      	ldr	r3, [pc, #52]	; (800c63c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	4313      	orrs	r3, r2
 800c60c:	4a0b      	ldr	r2, [pc, #44]	; (800c63c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800c60e:	6013      	str	r3, [r2, #0]
 800c610:	69bb      	ldr	r3, [r7, #24]
 800c612:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c614:	4613      	mov	r3, r2
 800c616:	009b      	lsls	r3, r3, #2
 800c618:	4413      	add	r3, r2
 800c61a:	009b      	lsls	r3, r3, #2
 800c61c:	4a06      	ldr	r2, [pc, #24]	; (800c638 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800c61e:	441a      	add	r2, r3
 800c620:	69bb      	ldr	r3, [r7, #24]
 800c622:	3304      	adds	r3, #4
 800c624:	4619      	mov	r1, r3
 800c626:	4610      	mov	r0, r2
 800c628:	f7fd ffdd 	bl	800a5e6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c62c:	bf00      	nop
 800c62e:	3720      	adds	r7, #32
 800c630:	46bd      	mov	sp, r7
 800c632:	bd80      	pop	{r7, pc}
 800c634:	20001360 	.word	0x20001360
 800c638:	20001364 	.word	0x20001364
 800c63c:	20001468 	.word	0x20001468

0800c640 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 800c640:	b480      	push	{r7}
 800c642:	b083      	sub	sp, #12
 800c644:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800c646:	4b09      	ldr	r3, [pc, #36]	; (800c66c <uxTaskResetEventItemValue+0x2c>)
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	699b      	ldr	r3, [r3, #24]
 800c64c:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c64e:	4b07      	ldr	r3, [pc, #28]	; (800c66c <uxTaskResetEventItemValue+0x2c>)
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c654:	4b05      	ldr	r3, [pc, #20]	; (800c66c <uxTaskResetEventItemValue+0x2c>)
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	f1c2 0207 	rsb	r2, r2, #7
 800c65c:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800c65e:	687b      	ldr	r3, [r7, #4]
}
 800c660:	4618      	mov	r0, r3
 800c662:	370c      	adds	r7, #12
 800c664:	46bd      	mov	sp, r7
 800c666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c66a:	4770      	bx	lr
 800c66c:	20001360 	.word	0x20001360

0800c670 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800c670:	b480      	push	{r7}
 800c672:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800c674:	4b07      	ldr	r3, [pc, #28]	; (800c694 <pvTaskIncrementMutexHeldCount+0x24>)
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d004      	beq.n	800c686 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800c67c:	4b05      	ldr	r3, [pc, #20]	; (800c694 <pvTaskIncrementMutexHeldCount+0x24>)
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c682:	3201      	adds	r2, #1
 800c684:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800c686:	4b03      	ldr	r3, [pc, #12]	; (800c694 <pvTaskIncrementMutexHeldCount+0x24>)
 800c688:	681b      	ldr	r3, [r3, #0]
	}
 800c68a:	4618      	mov	r0, r3
 800c68c:	46bd      	mov	sp, r7
 800c68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c692:	4770      	bx	lr
 800c694:	20001360 	.word	0x20001360

0800c698 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c698:	b580      	push	{r7, lr}
 800c69a:	b084      	sub	sp, #16
 800c69c:	af00      	add	r7, sp, #0
 800c69e:	6078      	str	r0, [r7, #4]
 800c6a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c6a2:	4b29      	ldr	r3, [pc, #164]	; (800c748 <prvAddCurrentTaskToDelayedList+0xb0>)
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c6a8:	4b28      	ldr	r3, [pc, #160]	; (800c74c <prvAddCurrentTaskToDelayedList+0xb4>)
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	3304      	adds	r3, #4
 800c6ae:	4618      	mov	r0, r3
 800c6b0:	f7fd fff6 	bl	800a6a0 <uxListRemove>
 800c6b4:	4603      	mov	r3, r0
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d10b      	bne.n	800c6d2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800c6ba:	4b24      	ldr	r3, [pc, #144]	; (800c74c <prvAddCurrentTaskToDelayedList+0xb4>)
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6c0:	2201      	movs	r2, #1
 800c6c2:	fa02 f303 	lsl.w	r3, r2, r3
 800c6c6:	43da      	mvns	r2, r3
 800c6c8:	4b21      	ldr	r3, [pc, #132]	; (800c750 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	4013      	ands	r3, r2
 800c6ce:	4a20      	ldr	r2, [pc, #128]	; (800c750 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c6d0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6d8:	d10a      	bne.n	800c6f0 <prvAddCurrentTaskToDelayedList+0x58>
 800c6da:	683b      	ldr	r3, [r7, #0]
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d007      	beq.n	800c6f0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c6e0:	4b1a      	ldr	r3, [pc, #104]	; (800c74c <prvAddCurrentTaskToDelayedList+0xb4>)
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	3304      	adds	r3, #4
 800c6e6:	4619      	mov	r1, r3
 800c6e8:	481a      	ldr	r0, [pc, #104]	; (800c754 <prvAddCurrentTaskToDelayedList+0xbc>)
 800c6ea:	f7fd ff7c 	bl	800a5e6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c6ee:	e026      	b.n	800c73e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c6f0:	68fa      	ldr	r2, [r7, #12]
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	4413      	add	r3, r2
 800c6f6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c6f8:	4b14      	ldr	r3, [pc, #80]	; (800c74c <prvAddCurrentTaskToDelayedList+0xb4>)
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	68ba      	ldr	r2, [r7, #8]
 800c6fe:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c700:	68ba      	ldr	r2, [r7, #8]
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	429a      	cmp	r2, r3
 800c706:	d209      	bcs.n	800c71c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c708:	4b13      	ldr	r3, [pc, #76]	; (800c758 <prvAddCurrentTaskToDelayedList+0xc0>)
 800c70a:	681a      	ldr	r2, [r3, #0]
 800c70c:	4b0f      	ldr	r3, [pc, #60]	; (800c74c <prvAddCurrentTaskToDelayedList+0xb4>)
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	3304      	adds	r3, #4
 800c712:	4619      	mov	r1, r3
 800c714:	4610      	mov	r0, r2
 800c716:	f7fd ff8a 	bl	800a62e <vListInsert>
}
 800c71a:	e010      	b.n	800c73e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c71c:	4b0f      	ldr	r3, [pc, #60]	; (800c75c <prvAddCurrentTaskToDelayedList+0xc4>)
 800c71e:	681a      	ldr	r2, [r3, #0]
 800c720:	4b0a      	ldr	r3, [pc, #40]	; (800c74c <prvAddCurrentTaskToDelayedList+0xb4>)
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	3304      	adds	r3, #4
 800c726:	4619      	mov	r1, r3
 800c728:	4610      	mov	r0, r2
 800c72a:	f7fd ff80 	bl	800a62e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c72e:	4b0c      	ldr	r3, [pc, #48]	; (800c760 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	68ba      	ldr	r2, [r7, #8]
 800c734:	429a      	cmp	r2, r3
 800c736:	d202      	bcs.n	800c73e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800c738:	4a09      	ldr	r2, [pc, #36]	; (800c760 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c73a:	68bb      	ldr	r3, [r7, #8]
 800c73c:	6013      	str	r3, [r2, #0]
}
 800c73e:	bf00      	nop
 800c740:	3710      	adds	r7, #16
 800c742:	46bd      	mov	sp, r7
 800c744:	bd80      	pop	{r7, pc}
 800c746:	bf00      	nop
 800c748:	20001464 	.word	0x20001464
 800c74c:	20001360 	.word	0x20001360
 800c750:	20001468 	.word	0x20001468
 800c754:	2000144c 	.word	0x2000144c
 800c758:	2000141c 	.word	0x2000141c
 800c75c:	20001418 	.word	0x20001418
 800c760:	20001480 	.word	0x20001480

0800c764 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c764:	b580      	push	{r7, lr}
 800c766:	b084      	sub	sp, #16
 800c768:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 800c76a:	2300      	movs	r3, #0
 800c76c:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c76e:	f000 faf1 	bl	800cd54 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c772:	4b11      	ldr	r3, [pc, #68]	; (800c7b8 <xTimerCreateTimerTask+0x54>)
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	2b00      	cmp	r3, #0
 800c778:	d00a      	beq.n	800c790 <xTimerCreateTimerTask+0x2c>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 800c77a:	4b10      	ldr	r3, [pc, #64]	; (800c7bc <xTimerCreateTimerTask+0x58>)
 800c77c:	9301      	str	r3, [sp, #4]
 800c77e:	2306      	movs	r3, #6
 800c780:	9300      	str	r3, [sp, #0]
 800c782:	2300      	movs	r3, #0
 800c784:	2280      	movs	r2, #128	; 0x80
 800c786:	490e      	ldr	r1, [pc, #56]	; (800c7c0 <xTimerCreateTimerTask+0x5c>)
 800c788:	480e      	ldr	r0, [pc, #56]	; (800c7c4 <xTimerCreateTimerTask+0x60>)
 800c78a:	f7fe ff03 	bl	800b594 <xTaskCreate>
 800c78e:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	2b00      	cmp	r3, #0
 800c794:	d10a      	bne.n	800c7ac <xTimerCreateTimerTask+0x48>
	__asm volatile
 800c796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c79a:	f383 8811 	msr	BASEPRI, r3
 800c79e:	f3bf 8f6f 	isb	sy
 800c7a2:	f3bf 8f4f 	dsb	sy
 800c7a6:	603b      	str	r3, [r7, #0]
}
 800c7a8:	bf00      	nop
 800c7aa:	e7fe      	b.n	800c7aa <xTimerCreateTimerTask+0x46>
	return xReturn;
 800c7ac:	687b      	ldr	r3, [r7, #4]
}
 800c7ae:	4618      	mov	r0, r3
 800c7b0:	3708      	adds	r7, #8
 800c7b2:	46bd      	mov	sp, r7
 800c7b4:	bd80      	pop	{r7, pc}
 800c7b6:	bf00      	nop
 800c7b8:	200014bc 	.word	0x200014bc
 800c7bc:	200014c0 	.word	0x200014c0
 800c7c0:	0801e1f8 	.word	0x0801e1f8
 800c7c4:	0800c8fd 	.word	0x0800c8fd

0800c7c8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c7c8:	b580      	push	{r7, lr}
 800c7ca:	b08a      	sub	sp, #40	; 0x28
 800c7cc:	af00      	add	r7, sp, #0
 800c7ce:	60f8      	str	r0, [r7, #12]
 800c7d0:	60b9      	str	r1, [r7, #8]
 800c7d2:	607a      	str	r2, [r7, #4]
 800c7d4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c7d6:	2300      	movs	r3, #0
 800c7d8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d10a      	bne.n	800c7f6 <xTimerGenericCommand+0x2e>
	__asm volatile
 800c7e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7e4:	f383 8811 	msr	BASEPRI, r3
 800c7e8:	f3bf 8f6f 	isb	sy
 800c7ec:	f3bf 8f4f 	dsb	sy
 800c7f0:	623b      	str	r3, [r7, #32]
}
 800c7f2:	bf00      	nop
 800c7f4:	e7fe      	b.n	800c7f4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c7f6:	4b1a      	ldr	r3, [pc, #104]	; (800c860 <xTimerGenericCommand+0x98>)
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d02a      	beq.n	800c854 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c7fe:	68bb      	ldr	r3, [r7, #8]
 800c800:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c80a:	68bb      	ldr	r3, [r7, #8]
 800c80c:	2b05      	cmp	r3, #5
 800c80e:	dc18      	bgt.n	800c842 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c810:	f7ff fd6e 	bl	800c2f0 <xTaskGetSchedulerState>
 800c814:	4603      	mov	r3, r0
 800c816:	2b02      	cmp	r3, #2
 800c818:	d109      	bne.n	800c82e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c81a:	4b11      	ldr	r3, [pc, #68]	; (800c860 <xTimerGenericCommand+0x98>)
 800c81c:	6818      	ldr	r0, [r3, #0]
 800c81e:	f107 0110 	add.w	r1, r7, #16
 800c822:	2300      	movs	r3, #0
 800c824:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c826:	f7fe f855 	bl	800a8d4 <xQueueGenericSend>
 800c82a:	6278      	str	r0, [r7, #36]	; 0x24
 800c82c:	e012      	b.n	800c854 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c82e:	4b0c      	ldr	r3, [pc, #48]	; (800c860 <xTimerGenericCommand+0x98>)
 800c830:	6818      	ldr	r0, [r3, #0]
 800c832:	f107 0110 	add.w	r1, r7, #16
 800c836:	2300      	movs	r3, #0
 800c838:	2200      	movs	r2, #0
 800c83a:	f7fe f84b 	bl	800a8d4 <xQueueGenericSend>
 800c83e:	6278      	str	r0, [r7, #36]	; 0x24
 800c840:	e008      	b.n	800c854 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c842:	4b07      	ldr	r3, [pc, #28]	; (800c860 <xTimerGenericCommand+0x98>)
 800c844:	6818      	ldr	r0, [r3, #0]
 800c846:	f107 0110 	add.w	r1, r7, #16
 800c84a:	2300      	movs	r3, #0
 800c84c:	683a      	ldr	r2, [r7, #0]
 800c84e:	f7fe f93f 	bl	800aad0 <xQueueGenericSendFromISR>
 800c852:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c856:	4618      	mov	r0, r3
 800c858:	3728      	adds	r7, #40	; 0x28
 800c85a:	46bd      	mov	sp, r7
 800c85c:	bd80      	pop	{r7, pc}
 800c85e:	bf00      	nop
 800c860:	200014bc 	.word	0x200014bc

0800c864 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c864:	b580      	push	{r7, lr}
 800c866:	b088      	sub	sp, #32
 800c868:	af02      	add	r7, sp, #8
 800c86a:	6078      	str	r0, [r7, #4]
 800c86c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c86e:	4b22      	ldr	r3, [pc, #136]	; (800c8f8 <prvProcessExpiredTimer+0x94>)
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	68db      	ldr	r3, [r3, #12]
 800c874:	68db      	ldr	r3, [r3, #12]
 800c876:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c878:	697b      	ldr	r3, [r7, #20]
 800c87a:	3304      	adds	r3, #4
 800c87c:	4618      	mov	r0, r3
 800c87e:	f7fd ff0f 	bl	800a6a0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c882:	697b      	ldr	r3, [r7, #20]
 800c884:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c888:	f003 0304 	and.w	r3, r3, #4
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d022      	beq.n	800c8d6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c890:	697b      	ldr	r3, [r7, #20]
 800c892:	699a      	ldr	r2, [r3, #24]
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	18d1      	adds	r1, r2, r3
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	683a      	ldr	r2, [r7, #0]
 800c89c:	6978      	ldr	r0, [r7, #20]
 800c89e:	f000 f8d1 	bl	800ca44 <prvInsertTimerInActiveList>
 800c8a2:	4603      	mov	r3, r0
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d01f      	beq.n	800c8e8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c8a8:	2300      	movs	r3, #0
 800c8aa:	9300      	str	r3, [sp, #0]
 800c8ac:	2300      	movs	r3, #0
 800c8ae:	687a      	ldr	r2, [r7, #4]
 800c8b0:	2100      	movs	r1, #0
 800c8b2:	6978      	ldr	r0, [r7, #20]
 800c8b4:	f7ff ff88 	bl	800c7c8 <xTimerGenericCommand>
 800c8b8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c8ba:	693b      	ldr	r3, [r7, #16]
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d113      	bne.n	800c8e8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800c8c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8c4:	f383 8811 	msr	BASEPRI, r3
 800c8c8:	f3bf 8f6f 	isb	sy
 800c8cc:	f3bf 8f4f 	dsb	sy
 800c8d0:	60fb      	str	r3, [r7, #12]
}
 800c8d2:	bf00      	nop
 800c8d4:	e7fe      	b.n	800c8d4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c8d6:	697b      	ldr	r3, [r7, #20]
 800c8d8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c8dc:	f023 0301 	bic.w	r3, r3, #1
 800c8e0:	b2da      	uxtb	r2, r3
 800c8e2:	697b      	ldr	r3, [r7, #20]
 800c8e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c8e8:	697b      	ldr	r3, [r7, #20]
 800c8ea:	6a1b      	ldr	r3, [r3, #32]
 800c8ec:	6978      	ldr	r0, [r7, #20]
 800c8ee:	4798      	blx	r3
}
 800c8f0:	bf00      	nop
 800c8f2:	3718      	adds	r7, #24
 800c8f4:	46bd      	mov	sp, r7
 800c8f6:	bd80      	pop	{r7, pc}
 800c8f8:	200014b4 	.word	0x200014b4

0800c8fc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c8fc:	b580      	push	{r7, lr}
 800c8fe:	b084      	sub	sp, #16
 800c900:	af00      	add	r7, sp, #0
 800c902:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c904:	f107 0308 	add.w	r3, r7, #8
 800c908:	4618      	mov	r0, r3
 800c90a:	f000 f857 	bl	800c9bc <prvGetNextExpireTime>
 800c90e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c910:	68bb      	ldr	r3, [r7, #8]
 800c912:	4619      	mov	r1, r3
 800c914:	68f8      	ldr	r0, [r7, #12]
 800c916:	f000 f803 	bl	800c920 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c91a:	f000 f8d5 	bl	800cac8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c91e:	e7f1      	b.n	800c904 <prvTimerTask+0x8>

0800c920 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c920:	b580      	push	{r7, lr}
 800c922:	b084      	sub	sp, #16
 800c924:	af00      	add	r7, sp, #0
 800c926:	6078      	str	r0, [r7, #4]
 800c928:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c92a:	f7ff f877 	bl	800ba1c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c92e:	f107 0308 	add.w	r3, r7, #8
 800c932:	4618      	mov	r0, r3
 800c934:	f000 f866 	bl	800ca04 <prvSampleTimeNow>
 800c938:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c93a:	68bb      	ldr	r3, [r7, #8]
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d130      	bne.n	800c9a2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c940:	683b      	ldr	r3, [r7, #0]
 800c942:	2b00      	cmp	r3, #0
 800c944:	d10a      	bne.n	800c95c <prvProcessTimerOrBlockTask+0x3c>
 800c946:	687a      	ldr	r2, [r7, #4]
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	429a      	cmp	r2, r3
 800c94c:	d806      	bhi.n	800c95c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c94e:	f7ff f873 	bl	800ba38 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c952:	68f9      	ldr	r1, [r7, #12]
 800c954:	6878      	ldr	r0, [r7, #4]
 800c956:	f7ff ff85 	bl	800c864 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c95a:	e024      	b.n	800c9a6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c95c:	683b      	ldr	r3, [r7, #0]
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d008      	beq.n	800c974 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c962:	4b13      	ldr	r3, [pc, #76]	; (800c9b0 <prvProcessTimerOrBlockTask+0x90>)
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d101      	bne.n	800c970 <prvProcessTimerOrBlockTask+0x50>
 800c96c:	2301      	movs	r3, #1
 800c96e:	e000      	b.n	800c972 <prvProcessTimerOrBlockTask+0x52>
 800c970:	2300      	movs	r3, #0
 800c972:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c974:	4b0f      	ldr	r3, [pc, #60]	; (800c9b4 <prvProcessTimerOrBlockTask+0x94>)
 800c976:	6818      	ldr	r0, [r3, #0]
 800c978:	687a      	ldr	r2, [r7, #4]
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	1ad3      	subs	r3, r2, r3
 800c97e:	683a      	ldr	r2, [r7, #0]
 800c980:	4619      	mov	r1, r3
 800c982:	f7fe fdd3 	bl	800b52c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c986:	f7ff f857 	bl	800ba38 <xTaskResumeAll>
 800c98a:	4603      	mov	r3, r0
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d10a      	bne.n	800c9a6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c990:	4b09      	ldr	r3, [pc, #36]	; (800c9b8 <prvProcessTimerOrBlockTask+0x98>)
 800c992:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c996:	601a      	str	r2, [r3, #0]
 800c998:	f3bf 8f4f 	dsb	sy
 800c99c:	f3bf 8f6f 	isb	sy
}
 800c9a0:	e001      	b.n	800c9a6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c9a2:	f7ff f849 	bl	800ba38 <xTaskResumeAll>
}
 800c9a6:	bf00      	nop
 800c9a8:	3710      	adds	r7, #16
 800c9aa:	46bd      	mov	sp, r7
 800c9ac:	bd80      	pop	{r7, pc}
 800c9ae:	bf00      	nop
 800c9b0:	200014b8 	.word	0x200014b8
 800c9b4:	200014bc 	.word	0x200014bc
 800c9b8:	e000ed04 	.word	0xe000ed04

0800c9bc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c9bc:	b480      	push	{r7}
 800c9be:	b085      	sub	sp, #20
 800c9c0:	af00      	add	r7, sp, #0
 800c9c2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c9c4:	4b0e      	ldr	r3, [pc, #56]	; (800ca00 <prvGetNextExpireTime+0x44>)
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d101      	bne.n	800c9d2 <prvGetNextExpireTime+0x16>
 800c9ce:	2201      	movs	r2, #1
 800c9d0:	e000      	b.n	800c9d4 <prvGetNextExpireTime+0x18>
 800c9d2:	2200      	movs	r2, #0
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d105      	bne.n	800c9ec <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c9e0:	4b07      	ldr	r3, [pc, #28]	; (800ca00 <prvGetNextExpireTime+0x44>)
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	68db      	ldr	r3, [r3, #12]
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	60fb      	str	r3, [r7, #12]
 800c9ea:	e001      	b.n	800c9f0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c9ec:	2300      	movs	r3, #0
 800c9ee:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c9f0:	68fb      	ldr	r3, [r7, #12]
}
 800c9f2:	4618      	mov	r0, r3
 800c9f4:	3714      	adds	r7, #20
 800c9f6:	46bd      	mov	sp, r7
 800c9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9fc:	4770      	bx	lr
 800c9fe:	bf00      	nop
 800ca00:	200014b4 	.word	0x200014b4

0800ca04 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ca04:	b580      	push	{r7, lr}
 800ca06:	b084      	sub	sp, #16
 800ca08:	af00      	add	r7, sp, #0
 800ca0a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ca0c:	f7ff f8b0 	bl	800bb70 <xTaskGetTickCount>
 800ca10:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ca12:	4b0b      	ldr	r3, [pc, #44]	; (800ca40 <prvSampleTimeNow+0x3c>)
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	68fa      	ldr	r2, [r7, #12]
 800ca18:	429a      	cmp	r2, r3
 800ca1a:	d205      	bcs.n	800ca28 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ca1c:	f000 f936 	bl	800cc8c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	2201      	movs	r2, #1
 800ca24:	601a      	str	r2, [r3, #0]
 800ca26:	e002      	b.n	800ca2e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	2200      	movs	r2, #0
 800ca2c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ca2e:	4a04      	ldr	r2, [pc, #16]	; (800ca40 <prvSampleTimeNow+0x3c>)
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ca34:	68fb      	ldr	r3, [r7, #12]
}
 800ca36:	4618      	mov	r0, r3
 800ca38:	3710      	adds	r7, #16
 800ca3a:	46bd      	mov	sp, r7
 800ca3c:	bd80      	pop	{r7, pc}
 800ca3e:	bf00      	nop
 800ca40:	200014c4 	.word	0x200014c4

0800ca44 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ca44:	b580      	push	{r7, lr}
 800ca46:	b086      	sub	sp, #24
 800ca48:	af00      	add	r7, sp, #0
 800ca4a:	60f8      	str	r0, [r7, #12]
 800ca4c:	60b9      	str	r1, [r7, #8]
 800ca4e:	607a      	str	r2, [r7, #4]
 800ca50:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ca52:	2300      	movs	r3, #0
 800ca54:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	68ba      	ldr	r2, [r7, #8]
 800ca5a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	68fa      	ldr	r2, [r7, #12]
 800ca60:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ca62:	68ba      	ldr	r2, [r7, #8]
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	429a      	cmp	r2, r3
 800ca68:	d812      	bhi.n	800ca90 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ca6a:	687a      	ldr	r2, [r7, #4]
 800ca6c:	683b      	ldr	r3, [r7, #0]
 800ca6e:	1ad2      	subs	r2, r2, r3
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	699b      	ldr	r3, [r3, #24]
 800ca74:	429a      	cmp	r2, r3
 800ca76:	d302      	bcc.n	800ca7e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ca78:	2301      	movs	r3, #1
 800ca7a:	617b      	str	r3, [r7, #20]
 800ca7c:	e01b      	b.n	800cab6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ca7e:	4b10      	ldr	r3, [pc, #64]	; (800cac0 <prvInsertTimerInActiveList+0x7c>)
 800ca80:	681a      	ldr	r2, [r3, #0]
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	3304      	adds	r3, #4
 800ca86:	4619      	mov	r1, r3
 800ca88:	4610      	mov	r0, r2
 800ca8a:	f7fd fdd0 	bl	800a62e <vListInsert>
 800ca8e:	e012      	b.n	800cab6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ca90:	687a      	ldr	r2, [r7, #4]
 800ca92:	683b      	ldr	r3, [r7, #0]
 800ca94:	429a      	cmp	r2, r3
 800ca96:	d206      	bcs.n	800caa6 <prvInsertTimerInActiveList+0x62>
 800ca98:	68ba      	ldr	r2, [r7, #8]
 800ca9a:	683b      	ldr	r3, [r7, #0]
 800ca9c:	429a      	cmp	r2, r3
 800ca9e:	d302      	bcc.n	800caa6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800caa0:	2301      	movs	r3, #1
 800caa2:	617b      	str	r3, [r7, #20]
 800caa4:	e007      	b.n	800cab6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800caa6:	4b07      	ldr	r3, [pc, #28]	; (800cac4 <prvInsertTimerInActiveList+0x80>)
 800caa8:	681a      	ldr	r2, [r3, #0]
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	3304      	adds	r3, #4
 800caae:	4619      	mov	r1, r3
 800cab0:	4610      	mov	r0, r2
 800cab2:	f7fd fdbc 	bl	800a62e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800cab6:	697b      	ldr	r3, [r7, #20]
}
 800cab8:	4618      	mov	r0, r3
 800caba:	3718      	adds	r7, #24
 800cabc:	46bd      	mov	sp, r7
 800cabe:	bd80      	pop	{r7, pc}
 800cac0:	200014b8 	.word	0x200014b8
 800cac4:	200014b4 	.word	0x200014b4

0800cac8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800cac8:	b580      	push	{r7, lr}
 800caca:	b08e      	sub	sp, #56	; 0x38
 800cacc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800cace:	e0ca      	b.n	800cc66 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	da18      	bge.n	800cb08 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800cad6:	1d3b      	adds	r3, r7, #4
 800cad8:	3304      	adds	r3, #4
 800cada:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800cadc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d10a      	bne.n	800caf8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800cae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cae6:	f383 8811 	msr	BASEPRI, r3
 800caea:	f3bf 8f6f 	isb	sy
 800caee:	f3bf 8f4f 	dsb	sy
 800caf2:	61fb      	str	r3, [r7, #28]
}
 800caf4:	bf00      	nop
 800caf6:	e7fe      	b.n	800caf6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800caf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cafe:	6850      	ldr	r0, [r2, #4]
 800cb00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cb02:	6892      	ldr	r2, [r2, #8]
 800cb04:	4611      	mov	r1, r2
 800cb06:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	f2c0 80aa 	blt.w	800cc64 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800cb14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb16:	695b      	ldr	r3, [r3, #20]
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d004      	beq.n	800cb26 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cb1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb1e:	3304      	adds	r3, #4
 800cb20:	4618      	mov	r0, r3
 800cb22:	f7fd fdbd 	bl	800a6a0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800cb26:	463b      	mov	r3, r7
 800cb28:	4618      	mov	r0, r3
 800cb2a:	f7ff ff6b 	bl	800ca04 <prvSampleTimeNow>
 800cb2e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	2b09      	cmp	r3, #9
 800cb34:	f200 8097 	bhi.w	800cc66 <prvProcessReceivedCommands+0x19e>
 800cb38:	a201      	add	r2, pc, #4	; (adr r2, 800cb40 <prvProcessReceivedCommands+0x78>)
 800cb3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb3e:	bf00      	nop
 800cb40:	0800cb69 	.word	0x0800cb69
 800cb44:	0800cb69 	.word	0x0800cb69
 800cb48:	0800cb69 	.word	0x0800cb69
 800cb4c:	0800cbdd 	.word	0x0800cbdd
 800cb50:	0800cbf1 	.word	0x0800cbf1
 800cb54:	0800cc3b 	.word	0x0800cc3b
 800cb58:	0800cb69 	.word	0x0800cb69
 800cb5c:	0800cb69 	.word	0x0800cb69
 800cb60:	0800cbdd 	.word	0x0800cbdd
 800cb64:	0800cbf1 	.word	0x0800cbf1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800cb68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb6a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800cb6e:	f043 0301 	orr.w	r3, r3, #1
 800cb72:	b2da      	uxtb	r2, r3
 800cb74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800cb7a:	68ba      	ldr	r2, [r7, #8]
 800cb7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb7e:	699b      	ldr	r3, [r3, #24]
 800cb80:	18d1      	adds	r1, r2, r3
 800cb82:	68bb      	ldr	r3, [r7, #8]
 800cb84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cb86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cb88:	f7ff ff5c 	bl	800ca44 <prvInsertTimerInActiveList>
 800cb8c:	4603      	mov	r3, r0
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d069      	beq.n	800cc66 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cb92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb94:	6a1b      	ldr	r3, [r3, #32]
 800cb96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cb98:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cb9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb9c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800cba0:	f003 0304 	and.w	r3, r3, #4
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d05e      	beq.n	800cc66 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800cba8:	68ba      	ldr	r2, [r7, #8]
 800cbaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbac:	699b      	ldr	r3, [r3, #24]
 800cbae:	441a      	add	r2, r3
 800cbb0:	2300      	movs	r3, #0
 800cbb2:	9300      	str	r3, [sp, #0]
 800cbb4:	2300      	movs	r3, #0
 800cbb6:	2100      	movs	r1, #0
 800cbb8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cbba:	f7ff fe05 	bl	800c7c8 <xTimerGenericCommand>
 800cbbe:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800cbc0:	6a3b      	ldr	r3, [r7, #32]
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d14f      	bne.n	800cc66 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800cbc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbca:	f383 8811 	msr	BASEPRI, r3
 800cbce:	f3bf 8f6f 	isb	sy
 800cbd2:	f3bf 8f4f 	dsb	sy
 800cbd6:	61bb      	str	r3, [r7, #24]
}
 800cbd8:	bf00      	nop
 800cbda:	e7fe      	b.n	800cbda <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cbdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbde:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800cbe2:	f023 0301 	bic.w	r3, r3, #1
 800cbe6:	b2da      	uxtb	r2, r3
 800cbe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 800cbee:	e03a      	b.n	800cc66 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800cbf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbf2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800cbf6:	f043 0301 	orr.w	r3, r3, #1
 800cbfa:	b2da      	uxtb	r2, r3
 800cbfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbfe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800cc02:	68ba      	ldr	r2, [r7, #8]
 800cc04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc06:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800cc08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc0a:	699b      	ldr	r3, [r3, #24]
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d10a      	bne.n	800cc26 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800cc10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc14:	f383 8811 	msr	BASEPRI, r3
 800cc18:	f3bf 8f6f 	isb	sy
 800cc1c:	f3bf 8f4f 	dsb	sy
 800cc20:	617b      	str	r3, [r7, #20]
}
 800cc22:	bf00      	nop
 800cc24:	e7fe      	b.n	800cc24 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800cc26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc28:	699a      	ldr	r2, [r3, #24]
 800cc2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc2c:	18d1      	adds	r1, r2, r3
 800cc2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cc32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cc34:	f7ff ff06 	bl	800ca44 <prvInsertTimerInActiveList>
					break;
 800cc38:	e015      	b.n	800cc66 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800cc3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc3c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800cc40:	f003 0302 	and.w	r3, r3, #2
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d103      	bne.n	800cc50 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800cc48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cc4a:	f000 fbf1 	bl	800d430 <vPortFree>
 800cc4e:	e00a      	b.n	800cc66 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cc50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc52:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800cc56:	f023 0301 	bic.w	r3, r3, #1
 800cc5a:	b2da      	uxtb	r2, r3
 800cc5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800cc62:	e000      	b.n	800cc66 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800cc64:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800cc66:	4b08      	ldr	r3, [pc, #32]	; (800cc88 <prvProcessReceivedCommands+0x1c0>)
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	1d39      	adds	r1, r7, #4
 800cc6c:	2200      	movs	r2, #0
 800cc6e:	4618      	mov	r0, r3
 800cc70:	f7fe f856 	bl	800ad20 <xQueueReceive>
 800cc74:	4603      	mov	r3, r0
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	f47f af2a 	bne.w	800cad0 <prvProcessReceivedCommands+0x8>
	}
}
 800cc7c:	bf00      	nop
 800cc7e:	bf00      	nop
 800cc80:	3730      	adds	r7, #48	; 0x30
 800cc82:	46bd      	mov	sp, r7
 800cc84:	bd80      	pop	{r7, pc}
 800cc86:	bf00      	nop
 800cc88:	200014bc 	.word	0x200014bc

0800cc8c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800cc8c:	b580      	push	{r7, lr}
 800cc8e:	b088      	sub	sp, #32
 800cc90:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cc92:	e048      	b.n	800cd26 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cc94:	4b2d      	ldr	r3, [pc, #180]	; (800cd4c <prvSwitchTimerLists+0xc0>)
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	68db      	ldr	r3, [r3, #12]
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cc9e:	4b2b      	ldr	r3, [pc, #172]	; (800cd4c <prvSwitchTimerLists+0xc0>)
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	68db      	ldr	r3, [r3, #12]
 800cca4:	68db      	ldr	r3, [r3, #12]
 800cca6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	3304      	adds	r3, #4
 800ccac:	4618      	mov	r0, r3
 800ccae:	f7fd fcf7 	bl	800a6a0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	6a1b      	ldr	r3, [r3, #32]
 800ccb6:	68f8      	ldr	r0, [r7, #12]
 800ccb8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800ccc0:	f003 0304 	and.w	r3, r3, #4
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d02e      	beq.n	800cd26 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	699b      	ldr	r3, [r3, #24]
 800cccc:	693a      	ldr	r2, [r7, #16]
 800ccce:	4413      	add	r3, r2
 800ccd0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ccd2:	68ba      	ldr	r2, [r7, #8]
 800ccd4:	693b      	ldr	r3, [r7, #16]
 800ccd6:	429a      	cmp	r2, r3
 800ccd8:	d90e      	bls.n	800ccf8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	68ba      	ldr	r2, [r7, #8]
 800ccde:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	68fa      	ldr	r2, [r7, #12]
 800cce4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cce6:	4b19      	ldr	r3, [pc, #100]	; (800cd4c <prvSwitchTimerLists+0xc0>)
 800cce8:	681a      	ldr	r2, [r3, #0]
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	3304      	adds	r3, #4
 800ccee:	4619      	mov	r1, r3
 800ccf0:	4610      	mov	r0, r2
 800ccf2:	f7fd fc9c 	bl	800a62e <vListInsert>
 800ccf6:	e016      	b.n	800cd26 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ccf8:	2300      	movs	r3, #0
 800ccfa:	9300      	str	r3, [sp, #0]
 800ccfc:	2300      	movs	r3, #0
 800ccfe:	693a      	ldr	r2, [r7, #16]
 800cd00:	2100      	movs	r1, #0
 800cd02:	68f8      	ldr	r0, [r7, #12]
 800cd04:	f7ff fd60 	bl	800c7c8 <xTimerGenericCommand>
 800cd08:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d10a      	bne.n	800cd26 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800cd10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd14:	f383 8811 	msr	BASEPRI, r3
 800cd18:	f3bf 8f6f 	isb	sy
 800cd1c:	f3bf 8f4f 	dsb	sy
 800cd20:	603b      	str	r3, [r7, #0]
}
 800cd22:	bf00      	nop
 800cd24:	e7fe      	b.n	800cd24 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cd26:	4b09      	ldr	r3, [pc, #36]	; (800cd4c <prvSwitchTimerLists+0xc0>)
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d1b1      	bne.n	800cc94 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800cd30:	4b06      	ldr	r3, [pc, #24]	; (800cd4c <prvSwitchTimerLists+0xc0>)
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800cd36:	4b06      	ldr	r3, [pc, #24]	; (800cd50 <prvSwitchTimerLists+0xc4>)
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	4a04      	ldr	r2, [pc, #16]	; (800cd4c <prvSwitchTimerLists+0xc0>)
 800cd3c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800cd3e:	4a04      	ldr	r2, [pc, #16]	; (800cd50 <prvSwitchTimerLists+0xc4>)
 800cd40:	697b      	ldr	r3, [r7, #20]
 800cd42:	6013      	str	r3, [r2, #0]
}
 800cd44:	bf00      	nop
 800cd46:	3718      	adds	r7, #24
 800cd48:	46bd      	mov	sp, r7
 800cd4a:	bd80      	pop	{r7, pc}
 800cd4c:	200014b4 	.word	0x200014b4
 800cd50:	200014b8 	.word	0x200014b8

0800cd54 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800cd54:	b580      	push	{r7, lr}
 800cd56:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800cd58:	f000 f97c 	bl	800d054 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800cd5c:	4b12      	ldr	r3, [pc, #72]	; (800cda8 <prvCheckForValidListAndQueue+0x54>)
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d11d      	bne.n	800cda0 <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 800cd64:	4811      	ldr	r0, [pc, #68]	; (800cdac <prvCheckForValidListAndQueue+0x58>)
 800cd66:	f7fd fc11 	bl	800a58c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800cd6a:	4811      	ldr	r0, [pc, #68]	; (800cdb0 <prvCheckForValidListAndQueue+0x5c>)
 800cd6c:	f7fd fc0e 	bl	800a58c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800cd70:	4b10      	ldr	r3, [pc, #64]	; (800cdb4 <prvCheckForValidListAndQueue+0x60>)
 800cd72:	4a0e      	ldr	r2, [pc, #56]	; (800cdac <prvCheckForValidListAndQueue+0x58>)
 800cd74:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800cd76:	4b10      	ldr	r3, [pc, #64]	; (800cdb8 <prvCheckForValidListAndQueue+0x64>)
 800cd78:	4a0d      	ldr	r2, [pc, #52]	; (800cdb0 <prvCheckForValidListAndQueue+0x5c>)
 800cd7a:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800cd7c:	2200      	movs	r2, #0
 800cd7e:	2110      	movs	r1, #16
 800cd80:	2001      	movs	r0, #1
 800cd82:	f7fd fd1f 	bl	800a7c4 <xQueueGenericCreate>
 800cd86:	4603      	mov	r3, r0
 800cd88:	4a07      	ldr	r2, [pc, #28]	; (800cda8 <prvCheckForValidListAndQueue+0x54>)
 800cd8a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800cd8c:	4b06      	ldr	r3, [pc, #24]	; (800cda8 <prvCheckForValidListAndQueue+0x54>)
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d005      	beq.n	800cda0 <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800cd94:	4b04      	ldr	r3, [pc, #16]	; (800cda8 <prvCheckForValidListAndQueue+0x54>)
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	4908      	ldr	r1, [pc, #32]	; (800cdbc <prvCheckForValidListAndQueue+0x68>)
 800cd9a:	4618      	mov	r0, r3
 800cd9c:	f7fe fb72 	bl	800b484 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cda0:	f000 f988 	bl	800d0b4 <vPortExitCritical>
}
 800cda4:	bf00      	nop
 800cda6:	bd80      	pop	{r7, pc}
 800cda8:	200014bc 	.word	0x200014bc
 800cdac:	2000148c 	.word	0x2000148c
 800cdb0:	200014a0 	.word	0x200014a0
 800cdb4:	200014b4 	.word	0x200014b4
 800cdb8:	200014b8 	.word	0x200014b8
 800cdbc:	0801e200 	.word	0x0801e200

0800cdc0 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800cdc0:	b580      	push	{r7, lr}
 800cdc2:	b08a      	sub	sp, #40	; 0x28
 800cdc4:	af00      	add	r7, sp, #0
 800cdc6:	60f8      	str	r0, [r7, #12]
 800cdc8:	60b9      	str	r1, [r7, #8]
 800cdca:	607a      	str	r2, [r7, #4]
 800cdcc:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 800cdce:	f06f 0301 	mvn.w	r3, #1
 800cdd2:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 800cdd8:	68bb      	ldr	r3, [r7, #8]
 800cdda:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800cde0:	4b06      	ldr	r3, [pc, #24]	; (800cdfc <xTimerPendFunctionCallFromISR+0x3c>)
 800cde2:	6818      	ldr	r0, [r3, #0]
 800cde4:	f107 0114 	add.w	r1, r7, #20
 800cde8:	2300      	movs	r3, #0
 800cdea:	683a      	ldr	r2, [r7, #0]
 800cdec:	f7fd fe70 	bl	800aad0 <xQueueGenericSendFromISR>
 800cdf0:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 800cdf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800cdf4:	4618      	mov	r0, r3
 800cdf6:	3728      	adds	r7, #40	; 0x28
 800cdf8:	46bd      	mov	sp, r7
 800cdfa:	bd80      	pop	{r7, pc}
 800cdfc:	200014bc 	.word	0x200014bc

0800ce00 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ce00:	b480      	push	{r7}
 800ce02:	b085      	sub	sp, #20
 800ce04:	af00      	add	r7, sp, #0
 800ce06:	60f8      	str	r0, [r7, #12]
 800ce08:	60b9      	str	r1, [r7, #8]
 800ce0a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	3b04      	subs	r3, #4
 800ce10:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ce18:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	3b04      	subs	r3, #4
 800ce1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ce20:	68bb      	ldr	r3, [r7, #8]
 800ce22:	f023 0201 	bic.w	r2, r3, #1
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ce2a:	68fb      	ldr	r3, [r7, #12]
 800ce2c:	3b04      	subs	r3, #4
 800ce2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ce30:	4a0c      	ldr	r2, [pc, #48]	; (800ce64 <pxPortInitialiseStack+0x64>)
 800ce32:	68fb      	ldr	r3, [r7, #12]
 800ce34:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	3b14      	subs	r3, #20
 800ce3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ce3c:	687a      	ldr	r2, [r7, #4]
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ce42:	68fb      	ldr	r3, [r7, #12]
 800ce44:	3b04      	subs	r3, #4
 800ce46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ce48:	68fb      	ldr	r3, [r7, #12]
 800ce4a:	f06f 0202 	mvn.w	r2, #2
 800ce4e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	3b20      	subs	r3, #32
 800ce54:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ce56:	68fb      	ldr	r3, [r7, #12]
}
 800ce58:	4618      	mov	r0, r3
 800ce5a:	3714      	adds	r7, #20
 800ce5c:	46bd      	mov	sp, r7
 800ce5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce62:	4770      	bx	lr
 800ce64:	0800ce69 	.word	0x0800ce69

0800ce68 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ce68:	b480      	push	{r7}
 800ce6a:	b085      	sub	sp, #20
 800ce6c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ce6e:	2300      	movs	r3, #0
 800ce70:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ce72:	4b12      	ldr	r3, [pc, #72]	; (800cebc <prvTaskExitError+0x54>)
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce7a:	d00a      	beq.n	800ce92 <prvTaskExitError+0x2a>
	__asm volatile
 800ce7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce80:	f383 8811 	msr	BASEPRI, r3
 800ce84:	f3bf 8f6f 	isb	sy
 800ce88:	f3bf 8f4f 	dsb	sy
 800ce8c:	60fb      	str	r3, [r7, #12]
}
 800ce8e:	bf00      	nop
 800ce90:	e7fe      	b.n	800ce90 <prvTaskExitError+0x28>
	__asm volatile
 800ce92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce96:	f383 8811 	msr	BASEPRI, r3
 800ce9a:	f3bf 8f6f 	isb	sy
 800ce9e:	f3bf 8f4f 	dsb	sy
 800cea2:	60bb      	str	r3, [r7, #8]
}
 800cea4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800cea6:	bf00      	nop
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d0fc      	beq.n	800cea8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ceae:	bf00      	nop
 800ceb0:	bf00      	nop
 800ceb2:	3714      	adds	r7, #20
 800ceb4:	46bd      	mov	sp, r7
 800ceb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceba:	4770      	bx	lr
 800cebc:	200000b8 	.word	0x200000b8

0800cec0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800cec0:	4b07      	ldr	r3, [pc, #28]	; (800cee0 <pxCurrentTCBConst2>)
 800cec2:	6819      	ldr	r1, [r3, #0]
 800cec4:	6808      	ldr	r0, [r1, #0]
 800cec6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ceca:	f380 8809 	msr	PSP, r0
 800cece:	f3bf 8f6f 	isb	sy
 800ced2:	f04f 0000 	mov.w	r0, #0
 800ced6:	f380 8811 	msr	BASEPRI, r0
 800ceda:	4770      	bx	lr
 800cedc:	f3af 8000 	nop.w

0800cee0 <pxCurrentTCBConst2>:
 800cee0:	20001360 	.word	0x20001360
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800cee4:	bf00      	nop
 800cee6:	bf00      	nop

0800cee8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800cee8:	4808      	ldr	r0, [pc, #32]	; (800cf0c <prvPortStartFirstTask+0x24>)
 800ceea:	6800      	ldr	r0, [r0, #0]
 800ceec:	6800      	ldr	r0, [r0, #0]
 800ceee:	f380 8808 	msr	MSP, r0
 800cef2:	f04f 0000 	mov.w	r0, #0
 800cef6:	f380 8814 	msr	CONTROL, r0
 800cefa:	b662      	cpsie	i
 800cefc:	b661      	cpsie	f
 800cefe:	f3bf 8f4f 	dsb	sy
 800cf02:	f3bf 8f6f 	isb	sy
 800cf06:	df00      	svc	0
 800cf08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800cf0a:	bf00      	nop
 800cf0c:	e000ed08 	.word	0xe000ed08

0800cf10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800cf10:	b580      	push	{r7, lr}
 800cf12:	b086      	sub	sp, #24
 800cf14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800cf16:	4b46      	ldr	r3, [pc, #280]	; (800d030 <xPortStartScheduler+0x120>)
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	4a46      	ldr	r2, [pc, #280]	; (800d034 <xPortStartScheduler+0x124>)
 800cf1c:	4293      	cmp	r3, r2
 800cf1e:	d10a      	bne.n	800cf36 <xPortStartScheduler+0x26>
	__asm volatile
 800cf20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf24:	f383 8811 	msr	BASEPRI, r3
 800cf28:	f3bf 8f6f 	isb	sy
 800cf2c:	f3bf 8f4f 	dsb	sy
 800cf30:	613b      	str	r3, [r7, #16]
}
 800cf32:	bf00      	nop
 800cf34:	e7fe      	b.n	800cf34 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800cf36:	4b3e      	ldr	r3, [pc, #248]	; (800d030 <xPortStartScheduler+0x120>)
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	4a3f      	ldr	r2, [pc, #252]	; (800d038 <xPortStartScheduler+0x128>)
 800cf3c:	4293      	cmp	r3, r2
 800cf3e:	d10a      	bne.n	800cf56 <xPortStartScheduler+0x46>
	__asm volatile
 800cf40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf44:	f383 8811 	msr	BASEPRI, r3
 800cf48:	f3bf 8f6f 	isb	sy
 800cf4c:	f3bf 8f4f 	dsb	sy
 800cf50:	60fb      	str	r3, [r7, #12]
}
 800cf52:	bf00      	nop
 800cf54:	e7fe      	b.n	800cf54 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800cf56:	4b39      	ldr	r3, [pc, #228]	; (800d03c <xPortStartScheduler+0x12c>)
 800cf58:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800cf5a:	697b      	ldr	r3, [r7, #20]
 800cf5c:	781b      	ldrb	r3, [r3, #0]
 800cf5e:	b2db      	uxtb	r3, r3
 800cf60:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800cf62:	697b      	ldr	r3, [r7, #20]
 800cf64:	22ff      	movs	r2, #255	; 0xff
 800cf66:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800cf68:	697b      	ldr	r3, [r7, #20]
 800cf6a:	781b      	ldrb	r3, [r3, #0]
 800cf6c:	b2db      	uxtb	r3, r3
 800cf6e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800cf70:	78fb      	ldrb	r3, [r7, #3]
 800cf72:	b2db      	uxtb	r3, r3
 800cf74:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800cf78:	b2da      	uxtb	r2, r3
 800cf7a:	4b31      	ldr	r3, [pc, #196]	; (800d040 <xPortStartScheduler+0x130>)
 800cf7c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800cf7e:	4b31      	ldr	r3, [pc, #196]	; (800d044 <xPortStartScheduler+0x134>)
 800cf80:	2207      	movs	r2, #7
 800cf82:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cf84:	e009      	b.n	800cf9a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800cf86:	4b2f      	ldr	r3, [pc, #188]	; (800d044 <xPortStartScheduler+0x134>)
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	3b01      	subs	r3, #1
 800cf8c:	4a2d      	ldr	r2, [pc, #180]	; (800d044 <xPortStartScheduler+0x134>)
 800cf8e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800cf90:	78fb      	ldrb	r3, [r7, #3]
 800cf92:	b2db      	uxtb	r3, r3
 800cf94:	005b      	lsls	r3, r3, #1
 800cf96:	b2db      	uxtb	r3, r3
 800cf98:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cf9a:	78fb      	ldrb	r3, [r7, #3]
 800cf9c:	b2db      	uxtb	r3, r3
 800cf9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cfa2:	2b80      	cmp	r3, #128	; 0x80
 800cfa4:	d0ef      	beq.n	800cf86 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800cfa6:	4b27      	ldr	r3, [pc, #156]	; (800d044 <xPortStartScheduler+0x134>)
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	f1c3 0307 	rsb	r3, r3, #7
 800cfae:	2b04      	cmp	r3, #4
 800cfb0:	d00a      	beq.n	800cfc8 <xPortStartScheduler+0xb8>
	__asm volatile
 800cfb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfb6:	f383 8811 	msr	BASEPRI, r3
 800cfba:	f3bf 8f6f 	isb	sy
 800cfbe:	f3bf 8f4f 	dsb	sy
 800cfc2:	60bb      	str	r3, [r7, #8]
}
 800cfc4:	bf00      	nop
 800cfc6:	e7fe      	b.n	800cfc6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800cfc8:	4b1e      	ldr	r3, [pc, #120]	; (800d044 <xPortStartScheduler+0x134>)
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	021b      	lsls	r3, r3, #8
 800cfce:	4a1d      	ldr	r2, [pc, #116]	; (800d044 <xPortStartScheduler+0x134>)
 800cfd0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800cfd2:	4b1c      	ldr	r3, [pc, #112]	; (800d044 <xPortStartScheduler+0x134>)
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800cfda:	4a1a      	ldr	r2, [pc, #104]	; (800d044 <xPortStartScheduler+0x134>)
 800cfdc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	b2da      	uxtb	r2, r3
 800cfe2:	697b      	ldr	r3, [r7, #20]
 800cfe4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800cfe6:	4b18      	ldr	r3, [pc, #96]	; (800d048 <xPortStartScheduler+0x138>)
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	4a17      	ldr	r2, [pc, #92]	; (800d048 <xPortStartScheduler+0x138>)
 800cfec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800cff0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800cff2:	4b15      	ldr	r3, [pc, #84]	; (800d048 <xPortStartScheduler+0x138>)
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	4a14      	ldr	r2, [pc, #80]	; (800d048 <xPortStartScheduler+0x138>)
 800cff8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800cffc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800cffe:	f000 f8dd 	bl	800d1bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d002:	4b12      	ldr	r3, [pc, #72]	; (800d04c <xPortStartScheduler+0x13c>)
 800d004:	2200      	movs	r2, #0
 800d006:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d008:	f000 f8fc 	bl	800d204 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d00c:	4b10      	ldr	r3, [pc, #64]	; (800d050 <xPortStartScheduler+0x140>)
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	4a0f      	ldr	r2, [pc, #60]	; (800d050 <xPortStartScheduler+0x140>)
 800d012:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d016:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d018:	f7ff ff66 	bl	800cee8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d01c:	f7fe fe82 	bl	800bd24 <vTaskSwitchContext>
	prvTaskExitError();
 800d020:	f7ff ff22 	bl	800ce68 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d024:	2300      	movs	r3, #0
}
 800d026:	4618      	mov	r0, r3
 800d028:	3718      	adds	r7, #24
 800d02a:	46bd      	mov	sp, r7
 800d02c:	bd80      	pop	{r7, pc}
 800d02e:	bf00      	nop
 800d030:	e000ed00 	.word	0xe000ed00
 800d034:	410fc271 	.word	0x410fc271
 800d038:	410fc270 	.word	0x410fc270
 800d03c:	e000e400 	.word	0xe000e400
 800d040:	200014c8 	.word	0x200014c8
 800d044:	200014cc 	.word	0x200014cc
 800d048:	e000ed20 	.word	0xe000ed20
 800d04c:	200000b8 	.word	0x200000b8
 800d050:	e000ef34 	.word	0xe000ef34

0800d054 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d054:	b480      	push	{r7}
 800d056:	b083      	sub	sp, #12
 800d058:	af00      	add	r7, sp, #0
	__asm volatile
 800d05a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d05e:	f383 8811 	msr	BASEPRI, r3
 800d062:	f3bf 8f6f 	isb	sy
 800d066:	f3bf 8f4f 	dsb	sy
 800d06a:	607b      	str	r3, [r7, #4]
}
 800d06c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d06e:	4b0f      	ldr	r3, [pc, #60]	; (800d0ac <vPortEnterCritical+0x58>)
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	3301      	adds	r3, #1
 800d074:	4a0d      	ldr	r2, [pc, #52]	; (800d0ac <vPortEnterCritical+0x58>)
 800d076:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d078:	4b0c      	ldr	r3, [pc, #48]	; (800d0ac <vPortEnterCritical+0x58>)
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	2b01      	cmp	r3, #1
 800d07e:	d10f      	bne.n	800d0a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d080:	4b0b      	ldr	r3, [pc, #44]	; (800d0b0 <vPortEnterCritical+0x5c>)
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	b2db      	uxtb	r3, r3
 800d086:	2b00      	cmp	r3, #0
 800d088:	d00a      	beq.n	800d0a0 <vPortEnterCritical+0x4c>
	__asm volatile
 800d08a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d08e:	f383 8811 	msr	BASEPRI, r3
 800d092:	f3bf 8f6f 	isb	sy
 800d096:	f3bf 8f4f 	dsb	sy
 800d09a:	603b      	str	r3, [r7, #0]
}
 800d09c:	bf00      	nop
 800d09e:	e7fe      	b.n	800d09e <vPortEnterCritical+0x4a>
	}
}
 800d0a0:	bf00      	nop
 800d0a2:	370c      	adds	r7, #12
 800d0a4:	46bd      	mov	sp, r7
 800d0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0aa:	4770      	bx	lr
 800d0ac:	200000b8 	.word	0x200000b8
 800d0b0:	e000ed04 	.word	0xe000ed04

0800d0b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d0b4:	b480      	push	{r7}
 800d0b6:	b083      	sub	sp, #12
 800d0b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d0ba:	4b12      	ldr	r3, [pc, #72]	; (800d104 <vPortExitCritical+0x50>)
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d10a      	bne.n	800d0d8 <vPortExitCritical+0x24>
	__asm volatile
 800d0c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0c6:	f383 8811 	msr	BASEPRI, r3
 800d0ca:	f3bf 8f6f 	isb	sy
 800d0ce:	f3bf 8f4f 	dsb	sy
 800d0d2:	607b      	str	r3, [r7, #4]
}
 800d0d4:	bf00      	nop
 800d0d6:	e7fe      	b.n	800d0d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d0d8:	4b0a      	ldr	r3, [pc, #40]	; (800d104 <vPortExitCritical+0x50>)
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	3b01      	subs	r3, #1
 800d0de:	4a09      	ldr	r2, [pc, #36]	; (800d104 <vPortExitCritical+0x50>)
 800d0e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d0e2:	4b08      	ldr	r3, [pc, #32]	; (800d104 <vPortExitCritical+0x50>)
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d105      	bne.n	800d0f6 <vPortExitCritical+0x42>
 800d0ea:	2300      	movs	r3, #0
 800d0ec:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d0ee:	683b      	ldr	r3, [r7, #0]
 800d0f0:	f383 8811 	msr	BASEPRI, r3
}
 800d0f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d0f6:	bf00      	nop
 800d0f8:	370c      	adds	r7, #12
 800d0fa:	46bd      	mov	sp, r7
 800d0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d100:	4770      	bx	lr
 800d102:	bf00      	nop
 800d104:	200000b8 	.word	0x200000b8
	...

0800d110 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d110:	f3ef 8009 	mrs	r0, PSP
 800d114:	f3bf 8f6f 	isb	sy
 800d118:	4b15      	ldr	r3, [pc, #84]	; (800d170 <pxCurrentTCBConst>)
 800d11a:	681a      	ldr	r2, [r3, #0]
 800d11c:	f01e 0f10 	tst.w	lr, #16
 800d120:	bf08      	it	eq
 800d122:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d126:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d12a:	6010      	str	r0, [r2, #0]
 800d12c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d130:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d134:	f380 8811 	msr	BASEPRI, r0
 800d138:	f3bf 8f4f 	dsb	sy
 800d13c:	f3bf 8f6f 	isb	sy
 800d140:	f7fe fdf0 	bl	800bd24 <vTaskSwitchContext>
 800d144:	f04f 0000 	mov.w	r0, #0
 800d148:	f380 8811 	msr	BASEPRI, r0
 800d14c:	bc09      	pop	{r0, r3}
 800d14e:	6819      	ldr	r1, [r3, #0]
 800d150:	6808      	ldr	r0, [r1, #0]
 800d152:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d156:	f01e 0f10 	tst.w	lr, #16
 800d15a:	bf08      	it	eq
 800d15c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d160:	f380 8809 	msr	PSP, r0
 800d164:	f3bf 8f6f 	isb	sy
 800d168:	4770      	bx	lr
 800d16a:	bf00      	nop
 800d16c:	f3af 8000 	nop.w

0800d170 <pxCurrentTCBConst>:
 800d170:	20001360 	.word	0x20001360
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d174:	bf00      	nop
 800d176:	bf00      	nop

0800d178 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d178:	b580      	push	{r7, lr}
 800d17a:	b082      	sub	sp, #8
 800d17c:	af00      	add	r7, sp, #0
	__asm volatile
 800d17e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d182:	f383 8811 	msr	BASEPRI, r3
 800d186:	f3bf 8f6f 	isb	sy
 800d18a:	f3bf 8f4f 	dsb	sy
 800d18e:	607b      	str	r3, [r7, #4]
}
 800d190:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d192:	f7fe fd0f 	bl	800bbb4 <xTaskIncrementTick>
 800d196:	4603      	mov	r3, r0
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d003      	beq.n	800d1a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d19c:	4b06      	ldr	r3, [pc, #24]	; (800d1b8 <xPortSysTickHandler+0x40>)
 800d19e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d1a2:	601a      	str	r2, [r3, #0]
 800d1a4:	2300      	movs	r3, #0
 800d1a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d1a8:	683b      	ldr	r3, [r7, #0]
 800d1aa:	f383 8811 	msr	BASEPRI, r3
}
 800d1ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d1b0:	bf00      	nop
 800d1b2:	3708      	adds	r7, #8
 800d1b4:	46bd      	mov	sp, r7
 800d1b6:	bd80      	pop	{r7, pc}
 800d1b8:	e000ed04 	.word	0xe000ed04

0800d1bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d1bc:	b480      	push	{r7}
 800d1be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d1c0:	4b0b      	ldr	r3, [pc, #44]	; (800d1f0 <vPortSetupTimerInterrupt+0x34>)
 800d1c2:	2200      	movs	r2, #0
 800d1c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d1c6:	4b0b      	ldr	r3, [pc, #44]	; (800d1f4 <vPortSetupTimerInterrupt+0x38>)
 800d1c8:	2200      	movs	r2, #0
 800d1ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d1cc:	4b0a      	ldr	r3, [pc, #40]	; (800d1f8 <vPortSetupTimerInterrupt+0x3c>)
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	4a0a      	ldr	r2, [pc, #40]	; (800d1fc <vPortSetupTimerInterrupt+0x40>)
 800d1d2:	fba2 2303 	umull	r2, r3, r2, r3
 800d1d6:	099b      	lsrs	r3, r3, #6
 800d1d8:	4a09      	ldr	r2, [pc, #36]	; (800d200 <vPortSetupTimerInterrupt+0x44>)
 800d1da:	3b01      	subs	r3, #1
 800d1dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d1de:	4b04      	ldr	r3, [pc, #16]	; (800d1f0 <vPortSetupTimerInterrupt+0x34>)
 800d1e0:	2207      	movs	r2, #7
 800d1e2:	601a      	str	r2, [r3, #0]
}
 800d1e4:	bf00      	nop
 800d1e6:	46bd      	mov	sp, r7
 800d1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ec:	4770      	bx	lr
 800d1ee:	bf00      	nop
 800d1f0:	e000e010 	.word	0xe000e010
 800d1f4:	e000e018 	.word	0xe000e018
 800d1f8:	200000ac 	.word	0x200000ac
 800d1fc:	10624dd3 	.word	0x10624dd3
 800d200:	e000e014 	.word	0xe000e014

0800d204 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d204:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d214 <vPortEnableVFP+0x10>
 800d208:	6801      	ldr	r1, [r0, #0]
 800d20a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d20e:	6001      	str	r1, [r0, #0]
 800d210:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d212:	bf00      	nop
 800d214:	e000ed88 	.word	0xe000ed88

0800d218 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d218:	b480      	push	{r7}
 800d21a:	b085      	sub	sp, #20
 800d21c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d21e:	f3ef 8305 	mrs	r3, IPSR
 800d222:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	2b0f      	cmp	r3, #15
 800d228:	d914      	bls.n	800d254 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d22a:	4a17      	ldr	r2, [pc, #92]	; (800d288 <vPortValidateInterruptPriority+0x70>)
 800d22c:	68fb      	ldr	r3, [r7, #12]
 800d22e:	4413      	add	r3, r2
 800d230:	781b      	ldrb	r3, [r3, #0]
 800d232:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d234:	4b15      	ldr	r3, [pc, #84]	; (800d28c <vPortValidateInterruptPriority+0x74>)
 800d236:	781b      	ldrb	r3, [r3, #0]
 800d238:	7afa      	ldrb	r2, [r7, #11]
 800d23a:	429a      	cmp	r2, r3
 800d23c:	d20a      	bcs.n	800d254 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800d23e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d242:	f383 8811 	msr	BASEPRI, r3
 800d246:	f3bf 8f6f 	isb	sy
 800d24a:	f3bf 8f4f 	dsb	sy
 800d24e:	607b      	str	r3, [r7, #4]
}
 800d250:	bf00      	nop
 800d252:	e7fe      	b.n	800d252 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d254:	4b0e      	ldr	r3, [pc, #56]	; (800d290 <vPortValidateInterruptPriority+0x78>)
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d25c:	4b0d      	ldr	r3, [pc, #52]	; (800d294 <vPortValidateInterruptPriority+0x7c>)
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	429a      	cmp	r2, r3
 800d262:	d90a      	bls.n	800d27a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800d264:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d268:	f383 8811 	msr	BASEPRI, r3
 800d26c:	f3bf 8f6f 	isb	sy
 800d270:	f3bf 8f4f 	dsb	sy
 800d274:	603b      	str	r3, [r7, #0]
}
 800d276:	bf00      	nop
 800d278:	e7fe      	b.n	800d278 <vPortValidateInterruptPriority+0x60>
	}
 800d27a:	bf00      	nop
 800d27c:	3714      	adds	r7, #20
 800d27e:	46bd      	mov	sp, r7
 800d280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d284:	4770      	bx	lr
 800d286:	bf00      	nop
 800d288:	e000e3f0 	.word	0xe000e3f0
 800d28c:	200014c8 	.word	0x200014c8
 800d290:	e000ed0c 	.word	0xe000ed0c
 800d294:	200014cc 	.word	0x200014cc

0800d298 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d298:	b580      	push	{r7, lr}
 800d29a:	b08a      	sub	sp, #40	; 0x28
 800d29c:	af00      	add	r7, sp, #0
 800d29e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d2a0:	2300      	movs	r3, #0
 800d2a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d2a4:	f7fe fbba 	bl	800ba1c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d2a8:	4b5b      	ldr	r3, [pc, #364]	; (800d418 <pvPortMalloc+0x180>)
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d101      	bne.n	800d2b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d2b0:	f000 f920 	bl	800d4f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d2b4:	4b59      	ldr	r3, [pc, #356]	; (800d41c <pvPortMalloc+0x184>)
 800d2b6:	681a      	ldr	r2, [r3, #0]
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	4013      	ands	r3, r2
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	f040 8093 	bne.w	800d3e8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d01d      	beq.n	800d304 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800d2c8:	2208      	movs	r2, #8
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	4413      	add	r3, r2
 800d2ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	f003 0307 	and.w	r3, r3, #7
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d014      	beq.n	800d304 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	f023 0307 	bic.w	r3, r3, #7
 800d2e0:	3308      	adds	r3, #8
 800d2e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	f003 0307 	and.w	r3, r3, #7
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d00a      	beq.n	800d304 <pvPortMalloc+0x6c>
	__asm volatile
 800d2ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2f2:	f383 8811 	msr	BASEPRI, r3
 800d2f6:	f3bf 8f6f 	isb	sy
 800d2fa:	f3bf 8f4f 	dsb	sy
 800d2fe:	617b      	str	r3, [r7, #20]
}
 800d300:	bf00      	nop
 800d302:	e7fe      	b.n	800d302 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	2b00      	cmp	r3, #0
 800d308:	d06e      	beq.n	800d3e8 <pvPortMalloc+0x150>
 800d30a:	4b45      	ldr	r3, [pc, #276]	; (800d420 <pvPortMalloc+0x188>)
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	687a      	ldr	r2, [r7, #4]
 800d310:	429a      	cmp	r2, r3
 800d312:	d869      	bhi.n	800d3e8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d314:	4b43      	ldr	r3, [pc, #268]	; (800d424 <pvPortMalloc+0x18c>)
 800d316:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d318:	4b42      	ldr	r3, [pc, #264]	; (800d424 <pvPortMalloc+0x18c>)
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d31e:	e004      	b.n	800d32a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800d320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d322:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d32a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d32c:	685b      	ldr	r3, [r3, #4]
 800d32e:	687a      	ldr	r2, [r7, #4]
 800d330:	429a      	cmp	r2, r3
 800d332:	d903      	bls.n	800d33c <pvPortMalloc+0xa4>
 800d334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d1f1      	bne.n	800d320 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d33c:	4b36      	ldr	r3, [pc, #216]	; (800d418 <pvPortMalloc+0x180>)
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d342:	429a      	cmp	r2, r3
 800d344:	d050      	beq.n	800d3e8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d346:	6a3b      	ldr	r3, [r7, #32]
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	2208      	movs	r2, #8
 800d34c:	4413      	add	r3, r2
 800d34e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d352:	681a      	ldr	r2, [r3, #0]
 800d354:	6a3b      	ldr	r3, [r7, #32]
 800d356:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d35a:	685a      	ldr	r2, [r3, #4]
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	1ad2      	subs	r2, r2, r3
 800d360:	2308      	movs	r3, #8
 800d362:	005b      	lsls	r3, r3, #1
 800d364:	429a      	cmp	r2, r3
 800d366:	d91f      	bls.n	800d3a8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d368:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	4413      	add	r3, r2
 800d36e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d370:	69bb      	ldr	r3, [r7, #24]
 800d372:	f003 0307 	and.w	r3, r3, #7
 800d376:	2b00      	cmp	r3, #0
 800d378:	d00a      	beq.n	800d390 <pvPortMalloc+0xf8>
	__asm volatile
 800d37a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d37e:	f383 8811 	msr	BASEPRI, r3
 800d382:	f3bf 8f6f 	isb	sy
 800d386:	f3bf 8f4f 	dsb	sy
 800d38a:	613b      	str	r3, [r7, #16]
}
 800d38c:	bf00      	nop
 800d38e:	e7fe      	b.n	800d38e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d392:	685a      	ldr	r2, [r3, #4]
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	1ad2      	subs	r2, r2, r3
 800d398:	69bb      	ldr	r3, [r7, #24]
 800d39a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d39c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d39e:	687a      	ldr	r2, [r7, #4]
 800d3a0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d3a2:	69b8      	ldr	r0, [r7, #24]
 800d3a4:	f000 f908 	bl	800d5b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d3a8:	4b1d      	ldr	r3, [pc, #116]	; (800d420 <pvPortMalloc+0x188>)
 800d3aa:	681a      	ldr	r2, [r3, #0]
 800d3ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3ae:	685b      	ldr	r3, [r3, #4]
 800d3b0:	1ad3      	subs	r3, r2, r3
 800d3b2:	4a1b      	ldr	r2, [pc, #108]	; (800d420 <pvPortMalloc+0x188>)
 800d3b4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d3b6:	4b1a      	ldr	r3, [pc, #104]	; (800d420 <pvPortMalloc+0x188>)
 800d3b8:	681a      	ldr	r2, [r3, #0]
 800d3ba:	4b1b      	ldr	r3, [pc, #108]	; (800d428 <pvPortMalloc+0x190>)
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	429a      	cmp	r2, r3
 800d3c0:	d203      	bcs.n	800d3ca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d3c2:	4b17      	ldr	r3, [pc, #92]	; (800d420 <pvPortMalloc+0x188>)
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	4a18      	ldr	r2, [pc, #96]	; (800d428 <pvPortMalloc+0x190>)
 800d3c8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d3ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3cc:	685a      	ldr	r2, [r3, #4]
 800d3ce:	4b13      	ldr	r3, [pc, #76]	; (800d41c <pvPortMalloc+0x184>)
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	431a      	orrs	r2, r3
 800d3d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3d6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d3d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3da:	2200      	movs	r2, #0
 800d3dc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d3de:	4b13      	ldr	r3, [pc, #76]	; (800d42c <pvPortMalloc+0x194>)
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	3301      	adds	r3, #1
 800d3e4:	4a11      	ldr	r2, [pc, #68]	; (800d42c <pvPortMalloc+0x194>)
 800d3e6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d3e8:	f7fe fb26 	bl	800ba38 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d3ec:	69fb      	ldr	r3, [r7, #28]
 800d3ee:	f003 0307 	and.w	r3, r3, #7
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d00a      	beq.n	800d40c <pvPortMalloc+0x174>
	__asm volatile
 800d3f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3fa:	f383 8811 	msr	BASEPRI, r3
 800d3fe:	f3bf 8f6f 	isb	sy
 800d402:	f3bf 8f4f 	dsb	sy
 800d406:	60fb      	str	r3, [r7, #12]
}
 800d408:	bf00      	nop
 800d40a:	e7fe      	b.n	800d40a <pvPortMalloc+0x172>
	return pvReturn;
 800d40c:	69fb      	ldr	r3, [r7, #28]
}
 800d40e:	4618      	mov	r0, r3
 800d410:	3728      	adds	r7, #40	; 0x28
 800d412:	46bd      	mov	sp, r7
 800d414:	bd80      	pop	{r7, pc}
 800d416:	bf00      	nop
 800d418:	2000a0d8 	.word	0x2000a0d8
 800d41c:	2000a0ec 	.word	0x2000a0ec
 800d420:	2000a0dc 	.word	0x2000a0dc
 800d424:	2000a0d0 	.word	0x2000a0d0
 800d428:	2000a0e0 	.word	0x2000a0e0
 800d42c:	2000a0e4 	.word	0x2000a0e4

0800d430 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d430:	b580      	push	{r7, lr}
 800d432:	b086      	sub	sp, #24
 800d434:	af00      	add	r7, sp, #0
 800d436:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d04d      	beq.n	800d4de <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d442:	2308      	movs	r3, #8
 800d444:	425b      	negs	r3, r3
 800d446:	697a      	ldr	r2, [r7, #20]
 800d448:	4413      	add	r3, r2
 800d44a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d44c:	697b      	ldr	r3, [r7, #20]
 800d44e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d450:	693b      	ldr	r3, [r7, #16]
 800d452:	685a      	ldr	r2, [r3, #4]
 800d454:	4b24      	ldr	r3, [pc, #144]	; (800d4e8 <vPortFree+0xb8>)
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	4013      	ands	r3, r2
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d10a      	bne.n	800d474 <vPortFree+0x44>
	__asm volatile
 800d45e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d462:	f383 8811 	msr	BASEPRI, r3
 800d466:	f3bf 8f6f 	isb	sy
 800d46a:	f3bf 8f4f 	dsb	sy
 800d46e:	60fb      	str	r3, [r7, #12]
}
 800d470:	bf00      	nop
 800d472:	e7fe      	b.n	800d472 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d474:	693b      	ldr	r3, [r7, #16]
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d00a      	beq.n	800d492 <vPortFree+0x62>
	__asm volatile
 800d47c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d480:	f383 8811 	msr	BASEPRI, r3
 800d484:	f3bf 8f6f 	isb	sy
 800d488:	f3bf 8f4f 	dsb	sy
 800d48c:	60bb      	str	r3, [r7, #8]
}
 800d48e:	bf00      	nop
 800d490:	e7fe      	b.n	800d490 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d492:	693b      	ldr	r3, [r7, #16]
 800d494:	685a      	ldr	r2, [r3, #4]
 800d496:	4b14      	ldr	r3, [pc, #80]	; (800d4e8 <vPortFree+0xb8>)
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	4013      	ands	r3, r2
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d01e      	beq.n	800d4de <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d4a0:	693b      	ldr	r3, [r7, #16]
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d11a      	bne.n	800d4de <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d4a8:	693b      	ldr	r3, [r7, #16]
 800d4aa:	685a      	ldr	r2, [r3, #4]
 800d4ac:	4b0e      	ldr	r3, [pc, #56]	; (800d4e8 <vPortFree+0xb8>)
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	43db      	mvns	r3, r3
 800d4b2:	401a      	ands	r2, r3
 800d4b4:	693b      	ldr	r3, [r7, #16]
 800d4b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d4b8:	f7fe fab0 	bl	800ba1c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d4bc:	693b      	ldr	r3, [r7, #16]
 800d4be:	685a      	ldr	r2, [r3, #4]
 800d4c0:	4b0a      	ldr	r3, [pc, #40]	; (800d4ec <vPortFree+0xbc>)
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	4413      	add	r3, r2
 800d4c6:	4a09      	ldr	r2, [pc, #36]	; (800d4ec <vPortFree+0xbc>)
 800d4c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d4ca:	6938      	ldr	r0, [r7, #16]
 800d4cc:	f000 f874 	bl	800d5b8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d4d0:	4b07      	ldr	r3, [pc, #28]	; (800d4f0 <vPortFree+0xc0>)
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	3301      	adds	r3, #1
 800d4d6:	4a06      	ldr	r2, [pc, #24]	; (800d4f0 <vPortFree+0xc0>)
 800d4d8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d4da:	f7fe faad 	bl	800ba38 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d4de:	bf00      	nop
 800d4e0:	3718      	adds	r7, #24
 800d4e2:	46bd      	mov	sp, r7
 800d4e4:	bd80      	pop	{r7, pc}
 800d4e6:	bf00      	nop
 800d4e8:	2000a0ec 	.word	0x2000a0ec
 800d4ec:	2000a0dc 	.word	0x2000a0dc
 800d4f0:	2000a0e8 	.word	0x2000a0e8

0800d4f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d4f4:	b480      	push	{r7}
 800d4f6:	b085      	sub	sp, #20
 800d4f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d4fa:	f44f 430c 	mov.w	r3, #35840	; 0x8c00
 800d4fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d500:	4b27      	ldr	r3, [pc, #156]	; (800d5a0 <prvHeapInit+0xac>)
 800d502:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	f003 0307 	and.w	r3, r3, #7
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d00c      	beq.n	800d528 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	3307      	adds	r3, #7
 800d512:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d514:	68fb      	ldr	r3, [r7, #12]
 800d516:	f023 0307 	bic.w	r3, r3, #7
 800d51a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d51c:	68ba      	ldr	r2, [r7, #8]
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	1ad3      	subs	r3, r2, r3
 800d522:	4a1f      	ldr	r2, [pc, #124]	; (800d5a0 <prvHeapInit+0xac>)
 800d524:	4413      	add	r3, r2
 800d526:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d528:	68fb      	ldr	r3, [r7, #12]
 800d52a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d52c:	4a1d      	ldr	r2, [pc, #116]	; (800d5a4 <prvHeapInit+0xb0>)
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d532:	4b1c      	ldr	r3, [pc, #112]	; (800d5a4 <prvHeapInit+0xb0>)
 800d534:	2200      	movs	r2, #0
 800d536:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	68ba      	ldr	r2, [r7, #8]
 800d53c:	4413      	add	r3, r2
 800d53e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d540:	2208      	movs	r2, #8
 800d542:	68fb      	ldr	r3, [r7, #12]
 800d544:	1a9b      	subs	r3, r3, r2
 800d546:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d548:	68fb      	ldr	r3, [r7, #12]
 800d54a:	f023 0307 	bic.w	r3, r3, #7
 800d54e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d550:	68fb      	ldr	r3, [r7, #12]
 800d552:	4a15      	ldr	r2, [pc, #84]	; (800d5a8 <prvHeapInit+0xb4>)
 800d554:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d556:	4b14      	ldr	r3, [pc, #80]	; (800d5a8 <prvHeapInit+0xb4>)
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	2200      	movs	r2, #0
 800d55c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d55e:	4b12      	ldr	r3, [pc, #72]	; (800d5a8 <prvHeapInit+0xb4>)
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	2200      	movs	r2, #0
 800d564:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d56a:	683b      	ldr	r3, [r7, #0]
 800d56c:	68fa      	ldr	r2, [r7, #12]
 800d56e:	1ad2      	subs	r2, r2, r3
 800d570:	683b      	ldr	r3, [r7, #0]
 800d572:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d574:	4b0c      	ldr	r3, [pc, #48]	; (800d5a8 <prvHeapInit+0xb4>)
 800d576:	681a      	ldr	r2, [r3, #0]
 800d578:	683b      	ldr	r3, [r7, #0]
 800d57a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d57c:	683b      	ldr	r3, [r7, #0]
 800d57e:	685b      	ldr	r3, [r3, #4]
 800d580:	4a0a      	ldr	r2, [pc, #40]	; (800d5ac <prvHeapInit+0xb8>)
 800d582:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d584:	683b      	ldr	r3, [r7, #0]
 800d586:	685b      	ldr	r3, [r3, #4]
 800d588:	4a09      	ldr	r2, [pc, #36]	; (800d5b0 <prvHeapInit+0xbc>)
 800d58a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d58c:	4b09      	ldr	r3, [pc, #36]	; (800d5b4 <prvHeapInit+0xc0>)
 800d58e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d592:	601a      	str	r2, [r3, #0]
}
 800d594:	bf00      	nop
 800d596:	3714      	adds	r7, #20
 800d598:	46bd      	mov	sp, r7
 800d59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d59e:	4770      	bx	lr
 800d5a0:	200014d0 	.word	0x200014d0
 800d5a4:	2000a0d0 	.word	0x2000a0d0
 800d5a8:	2000a0d8 	.word	0x2000a0d8
 800d5ac:	2000a0e0 	.word	0x2000a0e0
 800d5b0:	2000a0dc 	.word	0x2000a0dc
 800d5b4:	2000a0ec 	.word	0x2000a0ec

0800d5b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d5b8:	b480      	push	{r7}
 800d5ba:	b085      	sub	sp, #20
 800d5bc:	af00      	add	r7, sp, #0
 800d5be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d5c0:	4b28      	ldr	r3, [pc, #160]	; (800d664 <prvInsertBlockIntoFreeList+0xac>)
 800d5c2:	60fb      	str	r3, [r7, #12]
 800d5c4:	e002      	b.n	800d5cc <prvInsertBlockIntoFreeList+0x14>
 800d5c6:	68fb      	ldr	r3, [r7, #12]
 800d5c8:	681b      	ldr	r3, [r3, #0]
 800d5ca:	60fb      	str	r3, [r7, #12]
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	687a      	ldr	r2, [r7, #4]
 800d5d2:	429a      	cmp	r2, r3
 800d5d4:	d8f7      	bhi.n	800d5c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	685b      	ldr	r3, [r3, #4]
 800d5de:	68ba      	ldr	r2, [r7, #8]
 800d5e0:	4413      	add	r3, r2
 800d5e2:	687a      	ldr	r2, [r7, #4]
 800d5e4:	429a      	cmp	r2, r3
 800d5e6:	d108      	bne.n	800d5fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d5e8:	68fb      	ldr	r3, [r7, #12]
 800d5ea:	685a      	ldr	r2, [r3, #4]
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	685b      	ldr	r3, [r3, #4]
 800d5f0:	441a      	add	r2, r3
 800d5f2:	68fb      	ldr	r3, [r7, #12]
 800d5f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d5f6:	68fb      	ldr	r3, [r7, #12]
 800d5f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	685b      	ldr	r3, [r3, #4]
 800d602:	68ba      	ldr	r2, [r7, #8]
 800d604:	441a      	add	r2, r3
 800d606:	68fb      	ldr	r3, [r7, #12]
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	429a      	cmp	r2, r3
 800d60c:	d118      	bne.n	800d640 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d60e:	68fb      	ldr	r3, [r7, #12]
 800d610:	681a      	ldr	r2, [r3, #0]
 800d612:	4b15      	ldr	r3, [pc, #84]	; (800d668 <prvInsertBlockIntoFreeList+0xb0>)
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	429a      	cmp	r2, r3
 800d618:	d00d      	beq.n	800d636 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	685a      	ldr	r2, [r3, #4]
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	681b      	ldr	r3, [r3, #0]
 800d622:	685b      	ldr	r3, [r3, #4]
 800d624:	441a      	add	r2, r3
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	681a      	ldr	r2, [r3, #0]
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	601a      	str	r2, [r3, #0]
 800d634:	e008      	b.n	800d648 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d636:	4b0c      	ldr	r3, [pc, #48]	; (800d668 <prvInsertBlockIntoFreeList+0xb0>)
 800d638:	681a      	ldr	r2, [r3, #0]
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	601a      	str	r2, [r3, #0]
 800d63e:	e003      	b.n	800d648 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	681a      	ldr	r2, [r3, #0]
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d648:	68fa      	ldr	r2, [r7, #12]
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	429a      	cmp	r2, r3
 800d64e:	d002      	beq.n	800d656 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d650:	68fb      	ldr	r3, [r7, #12]
 800d652:	687a      	ldr	r2, [r7, #4]
 800d654:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d656:	bf00      	nop
 800d658:	3714      	adds	r7, #20
 800d65a:	46bd      	mov	sp, r7
 800d65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d660:	4770      	bx	lr
 800d662:	bf00      	nop
 800d664:	2000a0d0 	.word	0x2000a0d0
 800d668:	2000a0d8 	.word	0x2000a0d8

0800d66c <netifapi_do_netif_common>:
 * Call the "errtfunc" (or the "voidfunc" if "errtfunc" is NULL) inside the
 * tcpip_thread context.
 */
static err_t
netifapi_do_netif_common(struct tcpip_api_call_data *m)
{
 800d66c:	b580      	push	{r7, lr}
 800d66e:	b084      	sub	sp, #16
 800d670:	af00      	add	r7, sp, #0
 800d672:	6078      	str	r0, [r7, #4]
  /* cast through void* to silence alignment warnings.
   * We know it works because the structs have been instantiated as struct netifapi_msg */
  struct netifapi_msg *msg = (struct netifapi_msg *)(void *)m;
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	60fb      	str	r3, [r7, #12]

  if (msg->msg.common.errtfunc != NULL) {
 800d678:	68fb      	ldr	r3, [r7, #12]
 800d67a:	68db      	ldr	r3, [r3, #12]
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d007      	beq.n	800d690 <netifapi_do_netif_common+0x24>
    return msg->msg.common.errtfunc(msg->netif);
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	68db      	ldr	r3, [r3, #12]
 800d684:	68fa      	ldr	r2, [r7, #12]
 800d686:	6852      	ldr	r2, [r2, #4]
 800d688:	4610      	mov	r0, r2
 800d68a:	4798      	blx	r3
 800d68c:	4603      	mov	r3, r0
 800d68e:	e006      	b.n	800d69e <netifapi_do_netif_common+0x32>
  } else {
    msg->msg.common.voidfunc(msg->netif);
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	689b      	ldr	r3, [r3, #8]
 800d694:	68fa      	ldr	r2, [r7, #12]
 800d696:	6852      	ldr	r2, [r2, #4]
 800d698:	4610      	mov	r0, r2
 800d69a:	4798      	blx	r3
    return ERR_OK;
 800d69c:	2300      	movs	r3, #0
  }
}
 800d69e:	4618      	mov	r0, r3
 800d6a0:	3710      	adds	r7, #16
 800d6a2:	46bd      	mov	sp, r7
 800d6a4:	bd80      	pop	{r7, pc}
	...

0800d6a8 <netifapi_netif_common>:
 * @note use only for functions where there is only "netif" parameter.
 */
err_t
netifapi_netif_common(struct netif *netif, netifapi_void_fn voidfunc,
                      netifapi_errt_fn errtfunc)
{
 800d6a8:	b580      	push	{r7, lr}
 800d6aa:	b08e      	sub	sp, #56	; 0x38
 800d6ac:	af00      	add	r7, sp, #0
 800d6ae:	60f8      	str	r0, [r7, #12]
 800d6b0:	60b9      	str	r1, [r7, #8]
 800d6b2:	607a      	str	r2, [r7, #4]
  err_t err;
  NETIFAPI_VAR_DECLARE(msg);
  NETIFAPI_VAR_ALLOC(msg);

  NETIFAPI_VAR_REF(msg).netif = netif;
 800d6b4:	68fb      	ldr	r3, [r7, #12]
 800d6b6:	61bb      	str	r3, [r7, #24]
  NETIFAPI_VAR_REF(msg).msg.common.voidfunc = voidfunc;
 800d6b8:	68bb      	ldr	r3, [r7, #8]
 800d6ba:	61fb      	str	r3, [r7, #28]
  NETIFAPI_VAR_REF(msg).msg.common.errtfunc = errtfunc;
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	623b      	str	r3, [r7, #32]
  err = tcpip_api_call(netifapi_do_netif_common, &API_VAR_REF(msg).call);
 800d6c0:	f107 0314 	add.w	r3, r7, #20
 800d6c4:	4619      	mov	r1, r3
 800d6c6:	4806      	ldr	r0, [pc, #24]	; (800d6e0 <netifapi_netif_common+0x38>)
 800d6c8:	f000 f99a 	bl	800da00 <tcpip_api_call>
 800d6cc:	4603      	mov	r3, r0
 800d6ce:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  NETIFAPI_VAR_FREE(msg);
  return err;
 800d6d2:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800d6d6:	4618      	mov	r0, r3
 800d6d8:	3738      	adds	r7, #56	; 0x38
 800d6da:	46bd      	mov	sp, r7
 800d6dc:	bd80      	pop	{r7, pc}
 800d6de:	bf00      	nop
 800d6e0:	0800d66d 	.word	0x0800d66d

0800d6e4 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800d6e4:	b580      	push	{r7, lr}
 800d6e6:	b084      	sub	sp, #16
 800d6e8:	af00      	add	r7, sp, #0
 800d6ea:	6078      	str	r0, [r7, #4]
 800d6ec:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800d6ee:	f007 fe33 	bl	8015358 <sys_timeouts_sleeptime>
 800d6f2:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800d6f4:	68fb      	ldr	r3, [r7, #12]
 800d6f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d6fa:	d10b      	bne.n	800d714 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800d6fc:	4813      	ldr	r0, [pc, #76]	; (800d74c <tcpip_timeouts_mbox_fetch+0x68>)
 800d6fe:	f00d f8be 	bl	801a87e <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800d702:	2200      	movs	r2, #0
 800d704:	6839      	ldr	r1, [r7, #0]
 800d706:	6878      	ldr	r0, [r7, #4]
 800d708:	f00d f832 	bl	801a770 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800d70c:	480f      	ldr	r0, [pc, #60]	; (800d74c <tcpip_timeouts_mbox_fetch+0x68>)
 800d70e:	f00d f8a7 	bl	801a860 <sys_mutex_lock>
    return;
 800d712:	e018      	b.n	800d746 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800d714:	68fb      	ldr	r3, [r7, #12]
 800d716:	2b00      	cmp	r3, #0
 800d718:	d102      	bne.n	800d720 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800d71a:	f007 fde3 	bl	80152e4 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800d71e:	e7e6      	b.n	800d6ee <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800d720:	480a      	ldr	r0, [pc, #40]	; (800d74c <tcpip_timeouts_mbox_fetch+0x68>)
 800d722:	f00d f8ac 	bl	801a87e <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800d726:	68fa      	ldr	r2, [r7, #12]
 800d728:	6839      	ldr	r1, [r7, #0]
 800d72a:	6878      	ldr	r0, [r7, #4]
 800d72c:	f00d f820 	bl	801a770 <sys_arch_mbox_fetch>
 800d730:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800d732:	4806      	ldr	r0, [pc, #24]	; (800d74c <tcpip_timeouts_mbox_fetch+0x68>)
 800d734:	f00d f894 	bl	801a860 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800d738:	68bb      	ldr	r3, [r7, #8]
 800d73a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d73e:	d102      	bne.n	800d746 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800d740:	f007 fdd0 	bl	80152e4 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800d744:	e7d3      	b.n	800d6ee <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800d746:	3710      	adds	r7, #16
 800d748:	46bd      	mov	sp, r7
 800d74a:	bd80      	pop	{r7, pc}
 800d74c:	2000a0fc 	.word	0x2000a0fc

0800d750 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800d750:	b580      	push	{r7, lr}
 800d752:	b084      	sub	sp, #16
 800d754:	af00      	add	r7, sp, #0
 800d756:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800d758:	4810      	ldr	r0, [pc, #64]	; (800d79c <tcpip_thread+0x4c>)
 800d75a:	f00d f881 	bl	801a860 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800d75e:	4b10      	ldr	r3, [pc, #64]	; (800d7a0 <tcpip_thread+0x50>)
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	2b00      	cmp	r3, #0
 800d764:	d005      	beq.n	800d772 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800d766:	4b0e      	ldr	r3, [pc, #56]	; (800d7a0 <tcpip_thread+0x50>)
 800d768:	681b      	ldr	r3, [r3, #0]
 800d76a:	4a0e      	ldr	r2, [pc, #56]	; (800d7a4 <tcpip_thread+0x54>)
 800d76c:	6812      	ldr	r2, [r2, #0]
 800d76e:	4610      	mov	r0, r2
 800d770:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800d772:	f107 030c 	add.w	r3, r7, #12
 800d776:	4619      	mov	r1, r3
 800d778:	480b      	ldr	r0, [pc, #44]	; (800d7a8 <tcpip_thread+0x58>)
 800d77a:	f7ff ffb3 	bl	800d6e4 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	2b00      	cmp	r3, #0
 800d782:	d106      	bne.n	800d792 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800d784:	4b09      	ldr	r3, [pc, #36]	; (800d7ac <tcpip_thread+0x5c>)
 800d786:	2291      	movs	r2, #145	; 0x91
 800d788:	4909      	ldr	r1, [pc, #36]	; (800d7b0 <tcpip_thread+0x60>)
 800d78a:	480a      	ldr	r0, [pc, #40]	; (800d7b4 <tcpip_thread+0x64>)
 800d78c:	f00d fe78 	bl	801b480 <iprintf>
      continue;
 800d790:	e003      	b.n	800d79a <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800d792:	68fb      	ldr	r3, [r7, #12]
 800d794:	4618      	mov	r0, r3
 800d796:	f000 f80f 	bl	800d7b8 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800d79a:	e7ea      	b.n	800d772 <tcpip_thread+0x22>
 800d79c:	2000a0fc 	.word	0x2000a0fc
 800d7a0:	2000a0f0 	.word	0x2000a0f0
 800d7a4:	2000a0f4 	.word	0x2000a0f4
 800d7a8:	2000a0f8 	.word	0x2000a0f8
 800d7ac:	0801e208 	.word	0x0801e208
 800d7b0:	0801e238 	.word	0x0801e238
 800d7b4:	0801e258 	.word	0x0801e258

0800d7b8 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800d7b8:	b580      	push	{r7, lr}
 800d7ba:	b082      	sub	sp, #8
 800d7bc:	af00      	add	r7, sp, #0
 800d7be:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	781b      	ldrb	r3, [r3, #0]
 800d7c4:	2b02      	cmp	r3, #2
 800d7c6:	d026      	beq.n	800d816 <tcpip_thread_handle_msg+0x5e>
 800d7c8:	2b02      	cmp	r3, #2
 800d7ca:	dc2b      	bgt.n	800d824 <tcpip_thread_handle_msg+0x6c>
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d002      	beq.n	800d7d6 <tcpip_thread_handle_msg+0x1e>
 800d7d0:	2b01      	cmp	r3, #1
 800d7d2:	d015      	beq.n	800d800 <tcpip_thread_handle_msg+0x48>
 800d7d4:	e026      	b.n	800d824 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	68db      	ldr	r3, [r3, #12]
 800d7da:	687a      	ldr	r2, [r7, #4]
 800d7dc:	6850      	ldr	r0, [r2, #4]
 800d7de:	687a      	ldr	r2, [r7, #4]
 800d7e0:	6892      	ldr	r2, [r2, #8]
 800d7e2:	4611      	mov	r1, r2
 800d7e4:	4798      	blx	r3
 800d7e6:	4603      	mov	r3, r0
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d004      	beq.n	800d7f6 <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	685b      	ldr	r3, [r3, #4]
 800d7f0:	4618      	mov	r0, r3
 800d7f2:	f001 fe89 	bl	800f508 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800d7f6:	6879      	ldr	r1, [r7, #4]
 800d7f8:	2009      	movs	r0, #9
 800d7fa:	f000 ffe3 	bl	800e7c4 <memp_free>
      break;
 800d7fe:	e018      	b.n	800d832 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	685b      	ldr	r3, [r3, #4]
 800d804:	687a      	ldr	r2, [r7, #4]
 800d806:	6892      	ldr	r2, [r2, #8]
 800d808:	4610      	mov	r0, r2
 800d80a:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800d80c:	6879      	ldr	r1, [r7, #4]
 800d80e:	2008      	movs	r0, #8
 800d810:	f000 ffd8 	bl	800e7c4 <memp_free>
      break;
 800d814:	e00d      	b.n	800d832 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	685b      	ldr	r3, [r3, #4]
 800d81a:	687a      	ldr	r2, [r7, #4]
 800d81c:	6892      	ldr	r2, [r2, #8]
 800d81e:	4610      	mov	r0, r2
 800d820:	4798      	blx	r3
      break;
 800d822:	e006      	b.n	800d832 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800d824:	4b05      	ldr	r3, [pc, #20]	; (800d83c <tcpip_thread_handle_msg+0x84>)
 800d826:	22cf      	movs	r2, #207	; 0xcf
 800d828:	4905      	ldr	r1, [pc, #20]	; (800d840 <tcpip_thread_handle_msg+0x88>)
 800d82a:	4806      	ldr	r0, [pc, #24]	; (800d844 <tcpip_thread_handle_msg+0x8c>)
 800d82c:	f00d fe28 	bl	801b480 <iprintf>
      break;
 800d830:	bf00      	nop
  }
}
 800d832:	bf00      	nop
 800d834:	3708      	adds	r7, #8
 800d836:	46bd      	mov	sp, r7
 800d838:	bd80      	pop	{r7, pc}
 800d83a:	bf00      	nop
 800d83c:	0801e208 	.word	0x0801e208
 800d840:	0801e238 	.word	0x0801e238
 800d844:	0801e258 	.word	0x0801e258

0800d848 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800d848:	b580      	push	{r7, lr}
 800d84a:	b086      	sub	sp, #24
 800d84c:	af00      	add	r7, sp, #0
 800d84e:	60f8      	str	r0, [r7, #12]
 800d850:	60b9      	str	r1, [r7, #8]
 800d852:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800d854:	481a      	ldr	r0, [pc, #104]	; (800d8c0 <tcpip_inpkt+0x78>)
 800d856:	f00c ffca 	bl	801a7ee <sys_mbox_valid>
 800d85a:	4603      	mov	r3, r0
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d105      	bne.n	800d86c <tcpip_inpkt+0x24>
 800d860:	4b18      	ldr	r3, [pc, #96]	; (800d8c4 <tcpip_inpkt+0x7c>)
 800d862:	22fc      	movs	r2, #252	; 0xfc
 800d864:	4918      	ldr	r1, [pc, #96]	; (800d8c8 <tcpip_inpkt+0x80>)
 800d866:	4819      	ldr	r0, [pc, #100]	; (800d8cc <tcpip_inpkt+0x84>)
 800d868:	f00d fe0a 	bl	801b480 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800d86c:	2009      	movs	r0, #9
 800d86e:	f000 ff57 	bl	800e720 <memp_malloc>
 800d872:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800d874:	697b      	ldr	r3, [r7, #20]
 800d876:	2b00      	cmp	r3, #0
 800d878:	d102      	bne.n	800d880 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800d87a:	f04f 33ff 	mov.w	r3, #4294967295
 800d87e:	e01a      	b.n	800d8b6 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800d880:	697b      	ldr	r3, [r7, #20]
 800d882:	2200      	movs	r2, #0
 800d884:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800d886:	697b      	ldr	r3, [r7, #20]
 800d888:	68fa      	ldr	r2, [r7, #12]
 800d88a:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800d88c:	697b      	ldr	r3, [r7, #20]
 800d88e:	68ba      	ldr	r2, [r7, #8]
 800d890:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800d892:	697b      	ldr	r3, [r7, #20]
 800d894:	687a      	ldr	r2, [r7, #4]
 800d896:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800d898:	6979      	ldr	r1, [r7, #20]
 800d89a:	4809      	ldr	r0, [pc, #36]	; (800d8c0 <tcpip_inpkt+0x78>)
 800d89c:	f00c ff4e 	bl	801a73c <sys_mbox_trypost>
 800d8a0:	4603      	mov	r3, r0
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	d006      	beq.n	800d8b4 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800d8a6:	6979      	ldr	r1, [r7, #20]
 800d8a8:	2009      	movs	r0, #9
 800d8aa:	f000 ff8b 	bl	800e7c4 <memp_free>
    return ERR_MEM;
 800d8ae:	f04f 33ff 	mov.w	r3, #4294967295
 800d8b2:	e000      	b.n	800d8b6 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800d8b4:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800d8b6:	4618      	mov	r0, r3
 800d8b8:	3718      	adds	r7, #24
 800d8ba:	46bd      	mov	sp, r7
 800d8bc:	bd80      	pop	{r7, pc}
 800d8be:	bf00      	nop
 800d8c0:	2000a0f8 	.word	0x2000a0f8
 800d8c4:	0801e208 	.word	0x0801e208
 800d8c8:	0801e280 	.word	0x0801e280
 800d8cc:	0801e258 	.word	0x0801e258

0800d8d0 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800d8d0:	b580      	push	{r7, lr}
 800d8d2:	b082      	sub	sp, #8
 800d8d4:	af00      	add	r7, sp, #0
 800d8d6:	6078      	str	r0, [r7, #4]
 800d8d8:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800d8da:	683b      	ldr	r3, [r7, #0]
 800d8dc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d8e0:	f003 0318 	and.w	r3, r3, #24
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d006      	beq.n	800d8f6 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800d8e8:	4a08      	ldr	r2, [pc, #32]	; (800d90c <tcpip_input+0x3c>)
 800d8ea:	6839      	ldr	r1, [r7, #0]
 800d8ec:	6878      	ldr	r0, [r7, #4]
 800d8ee:	f7ff ffab 	bl	800d848 <tcpip_inpkt>
 800d8f2:	4603      	mov	r3, r0
 800d8f4:	e005      	b.n	800d902 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800d8f6:	4a06      	ldr	r2, [pc, #24]	; (800d910 <tcpip_input+0x40>)
 800d8f8:	6839      	ldr	r1, [r7, #0]
 800d8fa:	6878      	ldr	r0, [r7, #4]
 800d8fc:	f7ff ffa4 	bl	800d848 <tcpip_inpkt>
 800d900:	4603      	mov	r3, r0
}
 800d902:	4618      	mov	r0, r3
 800d904:	3708      	adds	r7, #8
 800d906:	46bd      	mov	sp, r7
 800d908:	bd80      	pop	{r7, pc}
 800d90a:	bf00      	nop
 800d90c:	0801a529 	.word	0x0801a529
 800d910:	0801909d 	.word	0x0801909d

0800d914 <tcpip_callback>:
 *
 * @see tcpip_try_callback
 */
err_t
 tcpip_callback(tcpip_callback_fn function, void *ctx)
{
 800d914:	b580      	push	{r7, lr}
 800d916:	b084      	sub	sp, #16
 800d918:	af00      	add	r7, sp, #0
 800d91a:	6078      	str	r0, [r7, #4]
 800d91c:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800d91e:	4814      	ldr	r0, [pc, #80]	; (800d970 <tcpip_callback+0x5c>)
 800d920:	f00c ff65 	bl	801a7ee <sys_mbox_valid>
 800d924:	4603      	mov	r3, r0
 800d926:	2b00      	cmp	r3, #0
 800d928:	d106      	bne.n	800d938 <tcpip_callback+0x24>
 800d92a:	4b12      	ldr	r3, [pc, #72]	; (800d974 <tcpip_callback+0x60>)
 800d92c:	f240 1239 	movw	r2, #313	; 0x139
 800d930:	4911      	ldr	r1, [pc, #68]	; (800d978 <tcpip_callback+0x64>)
 800d932:	4812      	ldr	r0, [pc, #72]	; (800d97c <tcpip_callback+0x68>)
 800d934:	f00d fda4 	bl	801b480 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800d938:	2008      	movs	r0, #8
 800d93a:	f000 fef1 	bl	800e720 <memp_malloc>
 800d93e:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800d940:	68fb      	ldr	r3, [r7, #12]
 800d942:	2b00      	cmp	r3, #0
 800d944:	d102      	bne.n	800d94c <tcpip_callback+0x38>
    return ERR_MEM;
 800d946:	f04f 33ff 	mov.w	r3, #4294967295
 800d94a:	e00d      	b.n	800d968 <tcpip_callback+0x54>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	2201      	movs	r2, #1
 800d950:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800d952:	68fb      	ldr	r3, [r7, #12]
 800d954:	687a      	ldr	r2, [r7, #4]
 800d956:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	683a      	ldr	r2, [r7, #0]
 800d95c:	609a      	str	r2, [r3, #8]

  sys_mbox_post(&tcpip_mbox, msg);
 800d95e:	68f9      	ldr	r1, [r7, #12]
 800d960:	4803      	ldr	r0, [pc, #12]	; (800d970 <tcpip_callback+0x5c>)
 800d962:	f00c fed5 	bl	801a710 <sys_mbox_post>
  return ERR_OK;
 800d966:	2300      	movs	r3, #0
}
 800d968:	4618      	mov	r0, r3
 800d96a:	3710      	adds	r7, #16
 800d96c:	46bd      	mov	sp, r7
 800d96e:	bd80      	pop	{r7, pc}
 800d970:	2000a0f8 	.word	0x2000a0f8
 800d974:	0801e208 	.word	0x0801e208
 800d978:	0801e280 	.word	0x0801e280
 800d97c:	0801e258 	.word	0x0801e258

0800d980 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800d980:	b580      	push	{r7, lr}
 800d982:	b084      	sub	sp, #16
 800d984:	af00      	add	r7, sp, #0
 800d986:	6078      	str	r0, [r7, #4]
 800d988:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800d98a:	4819      	ldr	r0, [pc, #100]	; (800d9f0 <tcpip_try_callback+0x70>)
 800d98c:	f00c ff2f 	bl	801a7ee <sys_mbox_valid>
 800d990:	4603      	mov	r3, r0
 800d992:	2b00      	cmp	r3, #0
 800d994:	d106      	bne.n	800d9a4 <tcpip_try_callback+0x24>
 800d996:	4b17      	ldr	r3, [pc, #92]	; (800d9f4 <tcpip_try_callback+0x74>)
 800d998:	f240 125d 	movw	r2, #349	; 0x15d
 800d99c:	4916      	ldr	r1, [pc, #88]	; (800d9f8 <tcpip_try_callback+0x78>)
 800d99e:	4817      	ldr	r0, [pc, #92]	; (800d9fc <tcpip_try_callback+0x7c>)
 800d9a0:	f00d fd6e 	bl	801b480 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800d9a4:	2008      	movs	r0, #8
 800d9a6:	f000 febb 	bl	800e720 <memp_malloc>
 800d9aa:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800d9ac:	68fb      	ldr	r3, [r7, #12]
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d102      	bne.n	800d9b8 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800d9b2:	f04f 33ff 	mov.w	r3, #4294967295
 800d9b6:	e017      	b.n	800d9e8 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	2201      	movs	r2, #1
 800d9bc:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800d9be:	68fb      	ldr	r3, [r7, #12]
 800d9c0:	687a      	ldr	r2, [r7, #4]
 800d9c2:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800d9c4:	68fb      	ldr	r3, [r7, #12]
 800d9c6:	683a      	ldr	r2, [r7, #0]
 800d9c8:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800d9ca:	68f9      	ldr	r1, [r7, #12]
 800d9cc:	4808      	ldr	r0, [pc, #32]	; (800d9f0 <tcpip_try_callback+0x70>)
 800d9ce:	f00c feb5 	bl	801a73c <sys_mbox_trypost>
 800d9d2:	4603      	mov	r3, r0
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d006      	beq.n	800d9e6 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800d9d8:	68f9      	ldr	r1, [r7, #12]
 800d9da:	2008      	movs	r0, #8
 800d9dc:	f000 fef2 	bl	800e7c4 <memp_free>
    return ERR_MEM;
 800d9e0:	f04f 33ff 	mov.w	r3, #4294967295
 800d9e4:	e000      	b.n	800d9e8 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800d9e6:	2300      	movs	r3, #0
}
 800d9e8:	4618      	mov	r0, r3
 800d9ea:	3710      	adds	r7, #16
 800d9ec:	46bd      	mov	sp, r7
 800d9ee:	bd80      	pop	{r7, pc}
 800d9f0:	2000a0f8 	.word	0x2000a0f8
 800d9f4:	0801e208 	.word	0x0801e208
 800d9f8:	0801e280 	.word	0x0801e280
 800d9fc:	0801e258 	.word	0x0801e258

0800da00 <tcpip_api_call>:
 * @param call Call parameters
 * @return Return value from tcpip_api_call_fn
 */
err_t
tcpip_api_call(tcpip_api_call_fn fn, struct tcpip_api_call_data *call)
{
 800da00:	b580      	push	{r7, lr}
 800da02:	b084      	sub	sp, #16
 800da04:	af00      	add	r7, sp, #0
 800da06:	6078      	str	r0, [r7, #4]
 800da08:	6039      	str	r1, [r7, #0]
#if LWIP_TCPIP_CORE_LOCKING
  err_t err;
  LOCK_TCPIP_CORE();
 800da0a:	4808      	ldr	r0, [pc, #32]	; (800da2c <tcpip_api_call+0x2c>)
 800da0c:	f00c ff28 	bl	801a860 <sys_mutex_lock>
  err = fn(call);
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	6838      	ldr	r0, [r7, #0]
 800da14:	4798      	blx	r3
 800da16:	4603      	mov	r3, r0
 800da18:	73fb      	strb	r3, [r7, #15]
  UNLOCK_TCPIP_CORE();
 800da1a:	4804      	ldr	r0, [pc, #16]	; (800da2c <tcpip_api_call+0x2c>)
 800da1c:	f00c ff2f 	bl	801a87e <sys_mutex_unlock>
  return err;
 800da20:	f997 300f 	ldrsb.w	r3, [r7, #15]
  sys_sem_free(&call->sem);
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  return call->err;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800da24:	4618      	mov	r0, r3
 800da26:	3710      	adds	r7, #16
 800da28:	46bd      	mov	sp, r7
 800da2a:	bd80      	pop	{r7, pc}
 800da2c:	2000a0fc 	.word	0x2000a0fc

0800da30 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800da30:	b580      	push	{r7, lr}
 800da32:	b084      	sub	sp, #16
 800da34:	af02      	add	r7, sp, #8
 800da36:	6078      	str	r0, [r7, #4]
 800da38:	6039      	str	r1, [r7, #0]
  lwip_init();
 800da3a:	f000 f9ea 	bl	800de12 <lwip_init>

  tcpip_init_done = initfunc;
 800da3e:	4a17      	ldr	r2, [pc, #92]	; (800da9c <tcpip_init+0x6c>)
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800da44:	4a16      	ldr	r2, [pc, #88]	; (800daa0 <tcpip_init+0x70>)
 800da46:	683b      	ldr	r3, [r7, #0]
 800da48:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800da4a:	210a      	movs	r1, #10
 800da4c:	4815      	ldr	r0, [pc, #84]	; (800daa4 <tcpip_init+0x74>)
 800da4e:	f00c fe41 	bl	801a6d4 <sys_mbox_new>
 800da52:	4603      	mov	r3, r0
 800da54:	2b00      	cmp	r3, #0
 800da56:	d006      	beq.n	800da66 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800da58:	4b13      	ldr	r3, [pc, #76]	; (800daa8 <tcpip_init+0x78>)
 800da5a:	f240 2261 	movw	r2, #609	; 0x261
 800da5e:	4913      	ldr	r1, [pc, #76]	; (800daac <tcpip_init+0x7c>)
 800da60:	4813      	ldr	r0, [pc, #76]	; (800dab0 <tcpip_init+0x80>)
 800da62:	f00d fd0d 	bl	801b480 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800da66:	4813      	ldr	r0, [pc, #76]	; (800dab4 <tcpip_init+0x84>)
 800da68:	f00c fee0 	bl	801a82c <sys_mutex_new>
 800da6c:	4603      	mov	r3, r0
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d006      	beq.n	800da80 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800da72:	4b0d      	ldr	r3, [pc, #52]	; (800daa8 <tcpip_init+0x78>)
 800da74:	f240 2265 	movw	r2, #613	; 0x265
 800da78:	490f      	ldr	r1, [pc, #60]	; (800dab8 <tcpip_init+0x88>)
 800da7a:	480d      	ldr	r0, [pc, #52]	; (800dab0 <tcpip_init+0x80>)
 800da7c:	f00d fd00 	bl	801b480 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800da80:	f04f 33ff 	mov.w	r3, #4294967295
 800da84:	9300      	str	r3, [sp, #0]
 800da86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800da8a:	2200      	movs	r2, #0
 800da8c:	490b      	ldr	r1, [pc, #44]	; (800dabc <tcpip_init+0x8c>)
 800da8e:	480c      	ldr	r0, [pc, #48]	; (800dac0 <tcpip_init+0x90>)
 800da90:	f00c ff02 	bl	801a898 <sys_thread_new>
}
 800da94:	bf00      	nop
 800da96:	3708      	adds	r7, #8
 800da98:	46bd      	mov	sp, r7
 800da9a:	bd80      	pop	{r7, pc}
 800da9c:	2000a0f0 	.word	0x2000a0f0
 800daa0:	2000a0f4 	.word	0x2000a0f4
 800daa4:	2000a0f8 	.word	0x2000a0f8
 800daa8:	0801e208 	.word	0x0801e208
 800daac:	0801e290 	.word	0x0801e290
 800dab0:	0801e258 	.word	0x0801e258
 800dab4:	2000a0fc 	.word	0x2000a0fc
 800dab8:	0801e2b4 	.word	0x0801e2b4
 800dabc:	0800d751 	.word	0x0800d751
 800dac0:	0801e2d8 	.word	0x0801e2d8

0800dac4 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800dac4:	b480      	push	{r7}
 800dac6:	b083      	sub	sp, #12
 800dac8:	af00      	add	r7, sp, #0
 800daca:	4603      	mov	r3, r0
 800dacc:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800dace:	88fb      	ldrh	r3, [r7, #6]
 800dad0:	021b      	lsls	r3, r3, #8
 800dad2:	b21a      	sxth	r2, r3
 800dad4:	88fb      	ldrh	r3, [r7, #6]
 800dad6:	0a1b      	lsrs	r3, r3, #8
 800dad8:	b29b      	uxth	r3, r3
 800dada:	b21b      	sxth	r3, r3
 800dadc:	4313      	orrs	r3, r2
 800dade:	b21b      	sxth	r3, r3
 800dae0:	b29b      	uxth	r3, r3
}
 800dae2:	4618      	mov	r0, r3
 800dae4:	370c      	adds	r7, #12
 800dae6:	46bd      	mov	sp, r7
 800dae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daec:	4770      	bx	lr

0800daee <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800daee:	b480      	push	{r7}
 800daf0:	b083      	sub	sp, #12
 800daf2:	af00      	add	r7, sp, #0
 800daf4:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	061a      	lsls	r2, r3, #24
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	021b      	lsls	r3, r3, #8
 800dafe:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800db02:	431a      	orrs	r2, r3
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	0a1b      	lsrs	r3, r3, #8
 800db08:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800db0c:	431a      	orrs	r2, r3
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	0e1b      	lsrs	r3, r3, #24
 800db12:	4313      	orrs	r3, r2
}
 800db14:	4618      	mov	r0, r3
 800db16:	370c      	adds	r7, #12
 800db18:	46bd      	mov	sp, r7
 800db1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db1e:	4770      	bx	lr

0800db20 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 800db20:	b480      	push	{r7}
 800db22:	b089      	sub	sp, #36	; 0x24
 800db24:	af00      	add	r7, sp, #0
 800db26:	6078      	str	r0, [r7, #4]
 800db28:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 800db2e:	2300      	movs	r3, #0
 800db30:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 800db32:	2300      	movs	r3, #0
 800db34:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 800db36:	69fb      	ldr	r3, [r7, #28]
 800db38:	f003 0301 	and.w	r3, r3, #1
 800db3c:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 800db3e:	693b      	ldr	r3, [r7, #16]
 800db40:	2b00      	cmp	r3, #0
 800db42:	d00d      	beq.n	800db60 <lwip_standard_chksum+0x40>
 800db44:	683b      	ldr	r3, [r7, #0]
 800db46:	2b00      	cmp	r3, #0
 800db48:	dd0a      	ble.n	800db60 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 800db4a:	69fa      	ldr	r2, [r7, #28]
 800db4c:	1c53      	adds	r3, r2, #1
 800db4e:	61fb      	str	r3, [r7, #28]
 800db50:	f107 030e 	add.w	r3, r7, #14
 800db54:	3301      	adds	r3, #1
 800db56:	7812      	ldrb	r2, [r2, #0]
 800db58:	701a      	strb	r2, [r3, #0]
    len--;
 800db5a:	683b      	ldr	r3, [r7, #0]
 800db5c:	3b01      	subs	r3, #1
 800db5e:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 800db60:	69fb      	ldr	r3, [r7, #28]
 800db62:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 800db64:	e00a      	b.n	800db7c <lwip_standard_chksum+0x5c>
    sum += *ps++;
 800db66:	69bb      	ldr	r3, [r7, #24]
 800db68:	1c9a      	adds	r2, r3, #2
 800db6a:	61ba      	str	r2, [r7, #24]
 800db6c:	881b      	ldrh	r3, [r3, #0]
 800db6e:	461a      	mov	r2, r3
 800db70:	697b      	ldr	r3, [r7, #20]
 800db72:	4413      	add	r3, r2
 800db74:	617b      	str	r3, [r7, #20]
    len -= 2;
 800db76:	683b      	ldr	r3, [r7, #0]
 800db78:	3b02      	subs	r3, #2
 800db7a:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 800db7c:	683b      	ldr	r3, [r7, #0]
 800db7e:	2b01      	cmp	r3, #1
 800db80:	dcf1      	bgt.n	800db66 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 800db82:	683b      	ldr	r3, [r7, #0]
 800db84:	2b00      	cmp	r3, #0
 800db86:	dd04      	ble.n	800db92 <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 800db88:	f107 030e 	add.w	r3, r7, #14
 800db8c:	69ba      	ldr	r2, [r7, #24]
 800db8e:	7812      	ldrb	r2, [r2, #0]
 800db90:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 800db92:	89fb      	ldrh	r3, [r7, #14]
 800db94:	461a      	mov	r2, r3
 800db96:	697b      	ldr	r3, [r7, #20]
 800db98:	4413      	add	r3, r2
 800db9a:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 800db9c:	697b      	ldr	r3, [r7, #20]
 800db9e:	0c1a      	lsrs	r2, r3, #16
 800dba0:	697b      	ldr	r3, [r7, #20]
 800dba2:	b29b      	uxth	r3, r3
 800dba4:	4413      	add	r3, r2
 800dba6:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 800dba8:	697b      	ldr	r3, [r7, #20]
 800dbaa:	0c1a      	lsrs	r2, r3, #16
 800dbac:	697b      	ldr	r3, [r7, #20]
 800dbae:	b29b      	uxth	r3, r3
 800dbb0:	4413      	add	r3, r2
 800dbb2:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 800dbb4:	693b      	ldr	r3, [r7, #16]
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	d007      	beq.n	800dbca <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 800dbba:	697b      	ldr	r3, [r7, #20]
 800dbbc:	021b      	lsls	r3, r3, #8
 800dbbe:	b29a      	uxth	r2, r3
 800dbc0:	697b      	ldr	r3, [r7, #20]
 800dbc2:	0a1b      	lsrs	r3, r3, #8
 800dbc4:	b2db      	uxtb	r3, r3
 800dbc6:	4313      	orrs	r3, r2
 800dbc8:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 800dbca:	697b      	ldr	r3, [r7, #20]
 800dbcc:	b29b      	uxth	r3, r3
}
 800dbce:	4618      	mov	r0, r3
 800dbd0:	3724      	adds	r7, #36	; 0x24
 800dbd2:	46bd      	mov	sp, r7
 800dbd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbd8:	4770      	bx	lr

0800dbda <inet_cksum_pseudo_base>:
#endif

/** Parts of the pseudo checksum which are common to IPv4 and IPv6 */
static u16_t
inet_cksum_pseudo_base(struct pbuf *p, u8_t proto, u16_t proto_len, u32_t acc)
{
 800dbda:	b580      	push	{r7, lr}
 800dbdc:	b086      	sub	sp, #24
 800dbde:	af00      	add	r7, sp, #0
 800dbe0:	60f8      	str	r0, [r7, #12]
 800dbe2:	607b      	str	r3, [r7, #4]
 800dbe4:	460b      	mov	r3, r1
 800dbe6:	72fb      	strb	r3, [r7, #11]
 800dbe8:	4613      	mov	r3, r2
 800dbea:	813b      	strh	r3, [r7, #8]
  struct pbuf *q;
  int swapped = 0;
 800dbec:	2300      	movs	r3, #0
 800dbee:	613b      	str	r3, [r7, #16]

  /* iterate through all pbuf in chain */
  for (q = p; q != NULL; q = q->next) {
 800dbf0:	68fb      	ldr	r3, [r7, #12]
 800dbf2:	617b      	str	r3, [r7, #20]
 800dbf4:	e02b      	b.n	800dc4e <inet_cksum_pseudo_base+0x74>
    LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): checksumming pbuf %p (has next %p) \n",
                             (void *)q, (void *)q->next));
    acc += LWIP_CHKSUM(q->payload, q->len);
 800dbf6:	697b      	ldr	r3, [r7, #20]
 800dbf8:	685a      	ldr	r2, [r3, #4]
 800dbfa:	697b      	ldr	r3, [r7, #20]
 800dbfc:	895b      	ldrh	r3, [r3, #10]
 800dbfe:	4619      	mov	r1, r3
 800dc00:	4610      	mov	r0, r2
 800dc02:	f7ff ff8d 	bl	800db20 <lwip_standard_chksum>
 800dc06:	4603      	mov	r3, r0
 800dc08:	461a      	mov	r2, r3
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	4413      	add	r3, r2
 800dc0e:	607b      	str	r3, [r7, #4]
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): unwrapped lwip_chksum()=%"X32_F" \n", acc));*/
    /* just executing this next line is probably faster that the if statement needed
       to check whether we really need to execute it, and does no harm */
    acc = FOLD_U32T(acc);
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	0c1a      	lsrs	r2, r3, #16
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	b29b      	uxth	r3, r3
 800dc18:	4413      	add	r3, r2
 800dc1a:	607b      	str	r3, [r7, #4]
    if (q->len % 2 != 0) {
 800dc1c:	697b      	ldr	r3, [r7, #20]
 800dc1e:	895b      	ldrh	r3, [r3, #10]
 800dc20:	f003 0301 	and.w	r3, r3, #1
 800dc24:	b29b      	uxth	r3, r3
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d00e      	beq.n	800dc48 <inet_cksum_pseudo_base+0x6e>
      swapped = !swapped;
 800dc2a:	693b      	ldr	r3, [r7, #16]
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	bf0c      	ite	eq
 800dc30:	2301      	moveq	r3, #1
 800dc32:	2300      	movne	r3, #0
 800dc34:	b2db      	uxtb	r3, r3
 800dc36:	613b      	str	r3, [r7, #16]
      acc = SWAP_BYTES_IN_WORD(acc);
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	021b      	lsls	r3, r3, #8
 800dc3c:	b29a      	uxth	r2, r3
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	0a1b      	lsrs	r3, r3, #8
 800dc42:	b2db      	uxtb	r3, r3
 800dc44:	4313      	orrs	r3, r2
 800dc46:	607b      	str	r3, [r7, #4]
  for (q = p; q != NULL; q = q->next) {
 800dc48:	697b      	ldr	r3, [r7, #20]
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	617b      	str	r3, [r7, #20]
 800dc4e:	697b      	ldr	r3, [r7, #20]
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d1d0      	bne.n	800dbf6 <inet_cksum_pseudo_base+0x1c>
    }
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): wrapped lwip_chksum()=%"X32_F" \n", acc));*/
  }

  if (swapped) {
 800dc54:	693b      	ldr	r3, [r7, #16]
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d007      	beq.n	800dc6a <inet_cksum_pseudo_base+0x90>
    acc = SWAP_BYTES_IN_WORD(acc);
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	021b      	lsls	r3, r3, #8
 800dc5e:	b29a      	uxth	r2, r3
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	0a1b      	lsrs	r3, r3, #8
 800dc64:	b2db      	uxtb	r3, r3
 800dc66:	4313      	orrs	r3, r2
 800dc68:	607b      	str	r3, [r7, #4]
  }

  acc += (u32_t)lwip_htons((u16_t)proto);
 800dc6a:	7afb      	ldrb	r3, [r7, #11]
 800dc6c:	b29b      	uxth	r3, r3
 800dc6e:	4618      	mov	r0, r3
 800dc70:	f7ff ff28 	bl	800dac4 <lwip_htons>
 800dc74:	4603      	mov	r3, r0
 800dc76:	461a      	mov	r2, r3
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	4413      	add	r3, r2
 800dc7c:	607b      	str	r3, [r7, #4]
  acc += (u32_t)lwip_htons(proto_len);
 800dc7e:	893b      	ldrh	r3, [r7, #8]
 800dc80:	4618      	mov	r0, r3
 800dc82:	f7ff ff1f 	bl	800dac4 <lwip_htons>
 800dc86:	4603      	mov	r3, r0
 800dc88:	461a      	mov	r2, r3
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	4413      	add	r3, r2
 800dc8e:	607b      	str	r3, [r7, #4]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  acc = FOLD_U32T(acc);
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	0c1a      	lsrs	r2, r3, #16
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	b29b      	uxth	r3, r3
 800dc98:	4413      	add	r3, r2
 800dc9a:	607b      	str	r3, [r7, #4]
  acc = FOLD_U32T(acc);
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	0c1a      	lsrs	r2, r3, #16
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	b29b      	uxth	r3, r3
 800dca4:	4413      	add	r3, r2
 800dca6:	607b      	str	r3, [r7, #4]
  LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): pbuf chain lwip_chksum()=%"X32_F"\n", acc));
  return (u16_t)~(acc & 0xffffUL);
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	b29b      	uxth	r3, r3
 800dcac:	43db      	mvns	r3, r3
 800dcae:	b29b      	uxth	r3, r3
}
 800dcb0:	4618      	mov	r0, r3
 800dcb2:	3718      	adds	r7, #24
 800dcb4:	46bd      	mov	sp, r7
 800dcb6:	bd80      	pop	{r7, pc}

0800dcb8 <inet_chksum_pseudo>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
                   const ip4_addr_t *src, const ip4_addr_t *dest)
{
 800dcb8:	b580      	push	{r7, lr}
 800dcba:	b086      	sub	sp, #24
 800dcbc:	af00      	add	r7, sp, #0
 800dcbe:	60f8      	str	r0, [r7, #12]
 800dcc0:	607b      	str	r3, [r7, #4]
 800dcc2:	460b      	mov	r3, r1
 800dcc4:	72fb      	strb	r3, [r7, #11]
 800dcc6:	4613      	mov	r3, r2
 800dcc8:	813b      	strh	r3, [r7, #8]
  u32_t acc;
  u32_t addr;

  addr = ip4_addr_get_u32(src);
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	617b      	str	r3, [r7, #20]
  acc = (addr & 0xffffUL);
 800dcd0:	697b      	ldr	r3, [r7, #20]
 800dcd2:	b29b      	uxth	r3, r3
 800dcd4:	613b      	str	r3, [r7, #16]
  acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
 800dcd6:	697b      	ldr	r3, [r7, #20]
 800dcd8:	0c1b      	lsrs	r3, r3, #16
 800dcda:	693a      	ldr	r2, [r7, #16]
 800dcdc:	4413      	add	r3, r2
 800dcde:	613b      	str	r3, [r7, #16]
  addr = ip4_addr_get_u32(dest);
 800dce0:	6a3b      	ldr	r3, [r7, #32]
 800dce2:	681b      	ldr	r3, [r3, #0]
 800dce4:	617b      	str	r3, [r7, #20]
  acc = (u32_t)(acc + (addr & 0xffffUL));
 800dce6:	697b      	ldr	r3, [r7, #20]
 800dce8:	b29b      	uxth	r3, r3
 800dcea:	693a      	ldr	r2, [r7, #16]
 800dcec:	4413      	add	r3, r2
 800dcee:	613b      	str	r3, [r7, #16]
  acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
 800dcf0:	697b      	ldr	r3, [r7, #20]
 800dcf2:	0c1b      	lsrs	r3, r3, #16
 800dcf4:	693a      	ldr	r2, [r7, #16]
 800dcf6:	4413      	add	r3, r2
 800dcf8:	613b      	str	r3, [r7, #16]
  /* fold down to 16 bits */
  acc = FOLD_U32T(acc);
 800dcfa:	693b      	ldr	r3, [r7, #16]
 800dcfc:	0c1a      	lsrs	r2, r3, #16
 800dcfe:	693b      	ldr	r3, [r7, #16]
 800dd00:	b29b      	uxth	r3, r3
 800dd02:	4413      	add	r3, r2
 800dd04:	613b      	str	r3, [r7, #16]
  acc = FOLD_U32T(acc);
 800dd06:	693b      	ldr	r3, [r7, #16]
 800dd08:	0c1a      	lsrs	r2, r3, #16
 800dd0a:	693b      	ldr	r3, [r7, #16]
 800dd0c:	b29b      	uxth	r3, r3
 800dd0e:	4413      	add	r3, r2
 800dd10:	613b      	str	r3, [r7, #16]

  return inet_cksum_pseudo_base(p, proto, proto_len, acc);
 800dd12:	893a      	ldrh	r2, [r7, #8]
 800dd14:	7af9      	ldrb	r1, [r7, #11]
 800dd16:	693b      	ldr	r3, [r7, #16]
 800dd18:	68f8      	ldr	r0, [r7, #12]
 800dd1a:	f7ff ff5e 	bl	800dbda <inet_cksum_pseudo_base>
 800dd1e:	4603      	mov	r3, r0
}
 800dd20:	4618      	mov	r0, r3
 800dd22:	3718      	adds	r7, #24
 800dd24:	46bd      	mov	sp, r7
 800dd26:	bd80      	pop	{r7, pc}

0800dd28 <ip_chksum_pseudo>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
ip_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
                 const ip_addr_t *src, const ip_addr_t *dest)
{
 800dd28:	b580      	push	{r7, lr}
 800dd2a:	b086      	sub	sp, #24
 800dd2c:	af02      	add	r7, sp, #8
 800dd2e:	60f8      	str	r0, [r7, #12]
 800dd30:	607b      	str	r3, [r7, #4]
 800dd32:	460b      	mov	r3, r1
 800dd34:	72fb      	strb	r3, [r7, #11]
 800dd36:	4613      	mov	r3, r2
 800dd38:	813b      	strh	r3, [r7, #8]
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  {
    return inet_chksum_pseudo(p, proto, proto_len, ip_2_ip4(src), ip_2_ip4(dest));
 800dd3a:	893a      	ldrh	r2, [r7, #8]
 800dd3c:	7af9      	ldrb	r1, [r7, #11]
 800dd3e:	69bb      	ldr	r3, [r7, #24]
 800dd40:	9300      	str	r3, [sp, #0]
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	68f8      	ldr	r0, [r7, #12]
 800dd46:	f7ff ffb7 	bl	800dcb8 <inet_chksum_pseudo>
 800dd4a:	4603      	mov	r3, r0
  }
#endif /* LWIP_IPV4 */
}
 800dd4c:	4618      	mov	r0, r3
 800dd4e:	3710      	adds	r7, #16
 800dd50:	46bd      	mov	sp, r7
 800dd52:	bd80      	pop	{r7, pc}

0800dd54 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 800dd54:	b580      	push	{r7, lr}
 800dd56:	b082      	sub	sp, #8
 800dd58:	af00      	add	r7, sp, #0
 800dd5a:	6078      	str	r0, [r7, #4]
 800dd5c:	460b      	mov	r3, r1
 800dd5e:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 800dd60:	887b      	ldrh	r3, [r7, #2]
 800dd62:	4619      	mov	r1, r3
 800dd64:	6878      	ldr	r0, [r7, #4]
 800dd66:	f7ff fedb 	bl	800db20 <lwip_standard_chksum>
 800dd6a:	4603      	mov	r3, r0
 800dd6c:	43db      	mvns	r3, r3
 800dd6e:	b29b      	uxth	r3, r3
}
 800dd70:	4618      	mov	r0, r3
 800dd72:	3708      	adds	r7, #8
 800dd74:	46bd      	mov	sp, r7
 800dd76:	bd80      	pop	{r7, pc}

0800dd78 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 800dd78:	b580      	push	{r7, lr}
 800dd7a:	b086      	sub	sp, #24
 800dd7c:	af00      	add	r7, sp, #0
 800dd7e:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 800dd80:	2300      	movs	r3, #0
 800dd82:	60fb      	str	r3, [r7, #12]

  acc = 0;
 800dd84:	2300      	movs	r3, #0
 800dd86:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	613b      	str	r3, [r7, #16]
 800dd8c:	e02b      	b.n	800dde6 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 800dd8e:	693b      	ldr	r3, [r7, #16]
 800dd90:	685a      	ldr	r2, [r3, #4]
 800dd92:	693b      	ldr	r3, [r7, #16]
 800dd94:	895b      	ldrh	r3, [r3, #10]
 800dd96:	4619      	mov	r1, r3
 800dd98:	4610      	mov	r0, r2
 800dd9a:	f7ff fec1 	bl	800db20 <lwip_standard_chksum>
 800dd9e:	4603      	mov	r3, r0
 800dda0:	461a      	mov	r2, r3
 800dda2:	697b      	ldr	r3, [r7, #20]
 800dda4:	4413      	add	r3, r2
 800dda6:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 800dda8:	697b      	ldr	r3, [r7, #20]
 800ddaa:	0c1a      	lsrs	r2, r3, #16
 800ddac:	697b      	ldr	r3, [r7, #20]
 800ddae:	b29b      	uxth	r3, r3
 800ddb0:	4413      	add	r3, r2
 800ddb2:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 800ddb4:	693b      	ldr	r3, [r7, #16]
 800ddb6:	895b      	ldrh	r3, [r3, #10]
 800ddb8:	f003 0301 	and.w	r3, r3, #1
 800ddbc:	b29b      	uxth	r3, r3
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	d00e      	beq.n	800dde0 <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 800ddc2:	68fb      	ldr	r3, [r7, #12]
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	bf0c      	ite	eq
 800ddc8:	2301      	moveq	r3, #1
 800ddca:	2300      	movne	r3, #0
 800ddcc:	b2db      	uxtb	r3, r3
 800ddce:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 800ddd0:	697b      	ldr	r3, [r7, #20]
 800ddd2:	021b      	lsls	r3, r3, #8
 800ddd4:	b29a      	uxth	r2, r3
 800ddd6:	697b      	ldr	r3, [r7, #20]
 800ddd8:	0a1b      	lsrs	r3, r3, #8
 800ddda:	b2db      	uxtb	r3, r3
 800dddc:	4313      	orrs	r3, r2
 800ddde:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800dde0:	693b      	ldr	r3, [r7, #16]
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	613b      	str	r3, [r7, #16]
 800dde6:	693b      	ldr	r3, [r7, #16]
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d1d0      	bne.n	800dd8e <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 800ddec:	68fb      	ldr	r3, [r7, #12]
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	d007      	beq.n	800de02 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 800ddf2:	697b      	ldr	r3, [r7, #20]
 800ddf4:	021b      	lsls	r3, r3, #8
 800ddf6:	b29a      	uxth	r2, r3
 800ddf8:	697b      	ldr	r3, [r7, #20]
 800ddfa:	0a1b      	lsrs	r3, r3, #8
 800ddfc:	b2db      	uxtb	r3, r3
 800ddfe:	4313      	orrs	r3, r2
 800de00:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 800de02:	697b      	ldr	r3, [r7, #20]
 800de04:	b29b      	uxth	r3, r3
 800de06:	43db      	mvns	r3, r3
 800de08:	b29b      	uxth	r3, r3
}
 800de0a:	4618      	mov	r0, r3
 800de0c:	3718      	adds	r7, #24
 800de0e:	46bd      	mov	sp, r7
 800de10:	bd80      	pop	{r7, pc}

0800de12 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800de12:	b580      	push	{r7, lr}
 800de14:	b082      	sub	sp, #8
 800de16:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800de18:	2300      	movs	r3, #0
 800de1a:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800de1c:	f00c fcf8 	bl	801a810 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800de20:	f000 f8d4 	bl	800dfcc <mem_init>
  memp_init();
 800de24:	f000 fc30 	bl	800e688 <memp_init>
  pbuf_init();
  netif_init();
 800de28:	f000 fcf6 	bl	800e818 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800de2c:	f007 facc 	bl	80153c8 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800de30:	f001 ffa8 	bl	800fd84 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800de34:	f007 fa0e 	bl	8015254 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800de38:	bf00      	nop
 800de3a:	3708      	adds	r7, #8
 800de3c:	46bd      	mov	sp, r7
 800de3e:	bd80      	pop	{r7, pc}

0800de40 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800de40:	b480      	push	{r7}
 800de42:	b083      	sub	sp, #12
 800de44:	af00      	add	r7, sp, #0
 800de46:	4603      	mov	r3, r0
 800de48:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800de4a:	4b05      	ldr	r3, [pc, #20]	; (800de60 <ptr_to_mem+0x20>)
 800de4c:	681a      	ldr	r2, [r3, #0]
 800de4e:	88fb      	ldrh	r3, [r7, #6]
 800de50:	4413      	add	r3, r2
}
 800de52:	4618      	mov	r0, r3
 800de54:	370c      	adds	r7, #12
 800de56:	46bd      	mov	sp, r7
 800de58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de5c:	4770      	bx	lr
 800de5e:	bf00      	nop
 800de60:	2000f12c 	.word	0x2000f12c

0800de64 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800de64:	b480      	push	{r7}
 800de66:	b083      	sub	sp, #12
 800de68:	af00      	add	r7, sp, #0
 800de6a:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800de6c:	4b05      	ldr	r3, [pc, #20]	; (800de84 <mem_to_ptr+0x20>)
 800de6e:	681b      	ldr	r3, [r3, #0]
 800de70:	687a      	ldr	r2, [r7, #4]
 800de72:	1ad3      	subs	r3, r2, r3
 800de74:	b29b      	uxth	r3, r3
}
 800de76:	4618      	mov	r0, r3
 800de78:	370c      	adds	r7, #12
 800de7a:	46bd      	mov	sp, r7
 800de7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de80:	4770      	bx	lr
 800de82:	bf00      	nop
 800de84:	2000f12c 	.word	0x2000f12c

0800de88 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800de88:	b590      	push	{r4, r7, lr}
 800de8a:	b085      	sub	sp, #20
 800de8c:	af00      	add	r7, sp, #0
 800de8e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800de90:	4b45      	ldr	r3, [pc, #276]	; (800dfa8 <plug_holes+0x120>)
 800de92:	681b      	ldr	r3, [r3, #0]
 800de94:	687a      	ldr	r2, [r7, #4]
 800de96:	429a      	cmp	r2, r3
 800de98:	d206      	bcs.n	800dea8 <plug_holes+0x20>
 800de9a:	4b44      	ldr	r3, [pc, #272]	; (800dfac <plug_holes+0x124>)
 800de9c:	f240 12df 	movw	r2, #479	; 0x1df
 800dea0:	4943      	ldr	r1, [pc, #268]	; (800dfb0 <plug_holes+0x128>)
 800dea2:	4844      	ldr	r0, [pc, #272]	; (800dfb4 <plug_holes+0x12c>)
 800dea4:	f00d faec 	bl	801b480 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800dea8:	4b43      	ldr	r3, [pc, #268]	; (800dfb8 <plug_holes+0x130>)
 800deaa:	681b      	ldr	r3, [r3, #0]
 800deac:	687a      	ldr	r2, [r7, #4]
 800deae:	429a      	cmp	r2, r3
 800deb0:	d306      	bcc.n	800dec0 <plug_holes+0x38>
 800deb2:	4b3e      	ldr	r3, [pc, #248]	; (800dfac <plug_holes+0x124>)
 800deb4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800deb8:	4940      	ldr	r1, [pc, #256]	; (800dfbc <plug_holes+0x134>)
 800deba:	483e      	ldr	r0, [pc, #248]	; (800dfb4 <plug_holes+0x12c>)
 800debc:	f00d fae0 	bl	801b480 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	791b      	ldrb	r3, [r3, #4]
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d006      	beq.n	800ded6 <plug_holes+0x4e>
 800dec8:	4b38      	ldr	r3, [pc, #224]	; (800dfac <plug_holes+0x124>)
 800deca:	f240 12e1 	movw	r2, #481	; 0x1e1
 800dece:	493c      	ldr	r1, [pc, #240]	; (800dfc0 <plug_holes+0x138>)
 800ded0:	4838      	ldr	r0, [pc, #224]	; (800dfb4 <plug_holes+0x12c>)
 800ded2:	f00d fad5 	bl	801b480 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	881b      	ldrh	r3, [r3, #0]
 800deda:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800dede:	d906      	bls.n	800deee <plug_holes+0x66>
 800dee0:	4b32      	ldr	r3, [pc, #200]	; (800dfac <plug_holes+0x124>)
 800dee2:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800dee6:	4937      	ldr	r1, [pc, #220]	; (800dfc4 <plug_holes+0x13c>)
 800dee8:	4832      	ldr	r0, [pc, #200]	; (800dfb4 <plug_holes+0x12c>)
 800deea:	f00d fac9 	bl	801b480 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	881b      	ldrh	r3, [r3, #0]
 800def2:	4618      	mov	r0, r3
 800def4:	f7ff ffa4 	bl	800de40 <ptr_to_mem>
 800def8:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800defa:	687a      	ldr	r2, [r7, #4]
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	429a      	cmp	r2, r3
 800df00:	d024      	beq.n	800df4c <plug_holes+0xc4>
 800df02:	68fb      	ldr	r3, [r7, #12]
 800df04:	791b      	ldrb	r3, [r3, #4]
 800df06:	2b00      	cmp	r3, #0
 800df08:	d120      	bne.n	800df4c <plug_holes+0xc4>
 800df0a:	4b2b      	ldr	r3, [pc, #172]	; (800dfb8 <plug_holes+0x130>)
 800df0c:	681b      	ldr	r3, [r3, #0]
 800df0e:	68fa      	ldr	r2, [r7, #12]
 800df10:	429a      	cmp	r2, r3
 800df12:	d01b      	beq.n	800df4c <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800df14:	4b2c      	ldr	r3, [pc, #176]	; (800dfc8 <plug_holes+0x140>)
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	68fa      	ldr	r2, [r7, #12]
 800df1a:	429a      	cmp	r2, r3
 800df1c:	d102      	bne.n	800df24 <plug_holes+0x9c>
      lfree = mem;
 800df1e:	4a2a      	ldr	r2, [pc, #168]	; (800dfc8 <plug_holes+0x140>)
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	881a      	ldrh	r2, [r3, #0]
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800df2c:	68fb      	ldr	r3, [r7, #12]
 800df2e:	881b      	ldrh	r3, [r3, #0]
 800df30:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800df34:	d00a      	beq.n	800df4c <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800df36:	68fb      	ldr	r3, [r7, #12]
 800df38:	881b      	ldrh	r3, [r3, #0]
 800df3a:	4618      	mov	r0, r3
 800df3c:	f7ff ff80 	bl	800de40 <ptr_to_mem>
 800df40:	4604      	mov	r4, r0
 800df42:	6878      	ldr	r0, [r7, #4]
 800df44:	f7ff ff8e 	bl	800de64 <mem_to_ptr>
 800df48:	4603      	mov	r3, r0
 800df4a:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	885b      	ldrh	r3, [r3, #2]
 800df50:	4618      	mov	r0, r3
 800df52:	f7ff ff75 	bl	800de40 <ptr_to_mem>
 800df56:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800df58:	68ba      	ldr	r2, [r7, #8]
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	429a      	cmp	r2, r3
 800df5e:	d01f      	beq.n	800dfa0 <plug_holes+0x118>
 800df60:	68bb      	ldr	r3, [r7, #8]
 800df62:	791b      	ldrb	r3, [r3, #4]
 800df64:	2b00      	cmp	r3, #0
 800df66:	d11b      	bne.n	800dfa0 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800df68:	4b17      	ldr	r3, [pc, #92]	; (800dfc8 <plug_holes+0x140>)
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	687a      	ldr	r2, [r7, #4]
 800df6e:	429a      	cmp	r2, r3
 800df70:	d102      	bne.n	800df78 <plug_holes+0xf0>
      lfree = pmem;
 800df72:	4a15      	ldr	r2, [pc, #84]	; (800dfc8 <plug_holes+0x140>)
 800df74:	68bb      	ldr	r3, [r7, #8]
 800df76:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	881a      	ldrh	r2, [r3, #0]
 800df7c:	68bb      	ldr	r3, [r7, #8]
 800df7e:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	881b      	ldrh	r3, [r3, #0]
 800df84:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800df88:	d00a      	beq.n	800dfa0 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	881b      	ldrh	r3, [r3, #0]
 800df8e:	4618      	mov	r0, r3
 800df90:	f7ff ff56 	bl	800de40 <ptr_to_mem>
 800df94:	4604      	mov	r4, r0
 800df96:	68b8      	ldr	r0, [r7, #8]
 800df98:	f7ff ff64 	bl	800de64 <mem_to_ptr>
 800df9c:	4603      	mov	r3, r0
 800df9e:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800dfa0:	bf00      	nop
 800dfa2:	3714      	adds	r7, #20
 800dfa4:	46bd      	mov	sp, r7
 800dfa6:	bd90      	pop	{r4, r7, pc}
 800dfa8:	2000f12c 	.word	0x2000f12c
 800dfac:	0801e2e0 	.word	0x0801e2e0
 800dfb0:	0801e310 	.word	0x0801e310
 800dfb4:	0801e328 	.word	0x0801e328
 800dfb8:	2000f130 	.word	0x2000f130
 800dfbc:	0801e350 	.word	0x0801e350
 800dfc0:	0801e36c 	.word	0x0801e36c
 800dfc4:	0801e388 	.word	0x0801e388
 800dfc8:	2000f138 	.word	0x2000f138

0800dfcc <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800dfcc:	b580      	push	{r7, lr}
 800dfce:	b082      	sub	sp, #8
 800dfd0:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800dfd2:	4b1f      	ldr	r3, [pc, #124]	; (800e050 <mem_init+0x84>)
 800dfd4:	3303      	adds	r3, #3
 800dfd6:	f023 0303 	bic.w	r3, r3, #3
 800dfda:	461a      	mov	r2, r3
 800dfdc:	4b1d      	ldr	r3, [pc, #116]	; (800e054 <mem_init+0x88>)
 800dfde:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800dfe0:	4b1c      	ldr	r3, [pc, #112]	; (800e054 <mem_init+0x88>)
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
 800dfec:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	2200      	movs	r2, #0
 800dff2:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	2200      	movs	r2, #0
 800dff8:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800dffa:	f44f 40a0 	mov.w	r0, #20480	; 0x5000
 800dffe:	f7ff ff1f 	bl	800de40 <ptr_to_mem>
 800e002:	4603      	mov	r3, r0
 800e004:	4a14      	ldr	r2, [pc, #80]	; (800e058 <mem_init+0x8c>)
 800e006:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800e008:	4b13      	ldr	r3, [pc, #76]	; (800e058 <mem_init+0x8c>)
 800e00a:	681b      	ldr	r3, [r3, #0]
 800e00c:	2201      	movs	r2, #1
 800e00e:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800e010:	4b11      	ldr	r3, [pc, #68]	; (800e058 <mem_init+0x8c>)
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
 800e018:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800e01a:	4b0f      	ldr	r3, [pc, #60]	; (800e058 <mem_init+0x8c>)
 800e01c:	681b      	ldr	r3, [r3, #0]
 800e01e:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
 800e022:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800e024:	4b0b      	ldr	r3, [pc, #44]	; (800e054 <mem_init+0x88>)
 800e026:	681b      	ldr	r3, [r3, #0]
 800e028:	4a0c      	ldr	r2, [pc, #48]	; (800e05c <mem_init+0x90>)
 800e02a:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800e02c:	480c      	ldr	r0, [pc, #48]	; (800e060 <mem_init+0x94>)
 800e02e:	f00c fbfd 	bl	801a82c <sys_mutex_new>
 800e032:	4603      	mov	r3, r0
 800e034:	2b00      	cmp	r3, #0
 800e036:	d006      	beq.n	800e046 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800e038:	4b0a      	ldr	r3, [pc, #40]	; (800e064 <mem_init+0x98>)
 800e03a:	f240 221f 	movw	r2, #543	; 0x21f
 800e03e:	490a      	ldr	r1, [pc, #40]	; (800e068 <mem_init+0x9c>)
 800e040:	480a      	ldr	r0, [pc, #40]	; (800e06c <mem_init+0xa0>)
 800e042:	f00d fa1d 	bl	801b480 <iprintf>
  }
}
 800e046:	bf00      	nop
 800e048:	3708      	adds	r7, #8
 800e04a:	46bd      	mov	sp, r7
 800e04c:	bd80      	pop	{r7, pc}
 800e04e:	bf00      	nop
 800e050:	2000a118 	.word	0x2000a118
 800e054:	2000f12c 	.word	0x2000f12c
 800e058:	2000f130 	.word	0x2000f130
 800e05c:	2000f138 	.word	0x2000f138
 800e060:	2000f134 	.word	0x2000f134
 800e064:	0801e2e0 	.word	0x0801e2e0
 800e068:	0801e3b4 	.word	0x0801e3b4
 800e06c:	0801e328 	.word	0x0801e328

0800e070 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800e070:	b580      	push	{r7, lr}
 800e072:	b086      	sub	sp, #24
 800e074:	af00      	add	r7, sp, #0
 800e076:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800e078:	6878      	ldr	r0, [r7, #4]
 800e07a:	f7ff fef3 	bl	800de64 <mem_to_ptr>
 800e07e:	4603      	mov	r3, r0
 800e080:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	881b      	ldrh	r3, [r3, #0]
 800e086:	4618      	mov	r0, r3
 800e088:	f7ff feda 	bl	800de40 <ptr_to_mem>
 800e08c:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	885b      	ldrh	r3, [r3, #2]
 800e092:	4618      	mov	r0, r3
 800e094:	f7ff fed4 	bl	800de40 <ptr_to_mem>
 800e098:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	881b      	ldrh	r3, [r3, #0]
 800e09e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800e0a2:	d818      	bhi.n	800e0d6 <mem_link_valid+0x66>
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	885b      	ldrh	r3, [r3, #2]
 800e0a8:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800e0ac:	d813      	bhi.n	800e0d6 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800e0b2:	8afa      	ldrh	r2, [r7, #22]
 800e0b4:	429a      	cmp	r2, r3
 800e0b6:	d004      	beq.n	800e0c2 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800e0b8:	68fb      	ldr	r3, [r7, #12]
 800e0ba:	881b      	ldrh	r3, [r3, #0]
 800e0bc:	8afa      	ldrh	r2, [r7, #22]
 800e0be:	429a      	cmp	r2, r3
 800e0c0:	d109      	bne.n	800e0d6 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800e0c2:	4b08      	ldr	r3, [pc, #32]	; (800e0e4 <mem_link_valid+0x74>)
 800e0c4:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800e0c6:	693a      	ldr	r2, [r7, #16]
 800e0c8:	429a      	cmp	r2, r3
 800e0ca:	d006      	beq.n	800e0da <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800e0cc:	693b      	ldr	r3, [r7, #16]
 800e0ce:	885b      	ldrh	r3, [r3, #2]
 800e0d0:	8afa      	ldrh	r2, [r7, #22]
 800e0d2:	429a      	cmp	r2, r3
 800e0d4:	d001      	beq.n	800e0da <mem_link_valid+0x6a>
    return 0;
 800e0d6:	2300      	movs	r3, #0
 800e0d8:	e000      	b.n	800e0dc <mem_link_valid+0x6c>
  }
  return 1;
 800e0da:	2301      	movs	r3, #1
}
 800e0dc:	4618      	mov	r0, r3
 800e0de:	3718      	adds	r7, #24
 800e0e0:	46bd      	mov	sp, r7
 800e0e2:	bd80      	pop	{r7, pc}
 800e0e4:	2000f130 	.word	0x2000f130

0800e0e8 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800e0e8:	b580      	push	{r7, lr}
 800e0ea:	b088      	sub	sp, #32
 800e0ec:	af00      	add	r7, sp, #0
 800e0ee:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	d070      	beq.n	800e1d8 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	f003 0303 	and.w	r3, r3, #3
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	d00d      	beq.n	800e11c <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800e100:	4b37      	ldr	r3, [pc, #220]	; (800e1e0 <mem_free+0xf8>)
 800e102:	f240 2273 	movw	r2, #627	; 0x273
 800e106:	4937      	ldr	r1, [pc, #220]	; (800e1e4 <mem_free+0xfc>)
 800e108:	4837      	ldr	r0, [pc, #220]	; (800e1e8 <mem_free+0x100>)
 800e10a:	f00d f9b9 	bl	801b480 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800e10e:	f00c fbe1 	bl	801a8d4 <sys_arch_protect>
 800e112:	60f8      	str	r0, [r7, #12]
 800e114:	68f8      	ldr	r0, [r7, #12]
 800e116:	f00c fbeb 	bl	801a8f0 <sys_arch_unprotect>
    return;
 800e11a:	e05e      	b.n	800e1da <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	3b08      	subs	r3, #8
 800e120:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800e122:	4b32      	ldr	r3, [pc, #200]	; (800e1ec <mem_free+0x104>)
 800e124:	681b      	ldr	r3, [r3, #0]
 800e126:	69fa      	ldr	r2, [r7, #28]
 800e128:	429a      	cmp	r2, r3
 800e12a:	d306      	bcc.n	800e13a <mem_free+0x52>
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	f103 020c 	add.w	r2, r3, #12
 800e132:	4b2f      	ldr	r3, [pc, #188]	; (800e1f0 <mem_free+0x108>)
 800e134:	681b      	ldr	r3, [r3, #0]
 800e136:	429a      	cmp	r2, r3
 800e138:	d90d      	bls.n	800e156 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800e13a:	4b29      	ldr	r3, [pc, #164]	; (800e1e0 <mem_free+0xf8>)
 800e13c:	f240 227f 	movw	r2, #639	; 0x27f
 800e140:	492c      	ldr	r1, [pc, #176]	; (800e1f4 <mem_free+0x10c>)
 800e142:	4829      	ldr	r0, [pc, #164]	; (800e1e8 <mem_free+0x100>)
 800e144:	f00d f99c 	bl	801b480 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800e148:	f00c fbc4 	bl	801a8d4 <sys_arch_protect>
 800e14c:	6138      	str	r0, [r7, #16]
 800e14e:	6938      	ldr	r0, [r7, #16]
 800e150:	f00c fbce 	bl	801a8f0 <sys_arch_unprotect>
    return;
 800e154:	e041      	b.n	800e1da <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800e156:	4828      	ldr	r0, [pc, #160]	; (800e1f8 <mem_free+0x110>)
 800e158:	f00c fb82 	bl	801a860 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800e15c:	69fb      	ldr	r3, [r7, #28]
 800e15e:	791b      	ldrb	r3, [r3, #4]
 800e160:	2b00      	cmp	r3, #0
 800e162:	d110      	bne.n	800e186 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800e164:	4b1e      	ldr	r3, [pc, #120]	; (800e1e0 <mem_free+0xf8>)
 800e166:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800e16a:	4924      	ldr	r1, [pc, #144]	; (800e1fc <mem_free+0x114>)
 800e16c:	481e      	ldr	r0, [pc, #120]	; (800e1e8 <mem_free+0x100>)
 800e16e:	f00d f987 	bl	801b480 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800e172:	4821      	ldr	r0, [pc, #132]	; (800e1f8 <mem_free+0x110>)
 800e174:	f00c fb83 	bl	801a87e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800e178:	f00c fbac 	bl	801a8d4 <sys_arch_protect>
 800e17c:	6178      	str	r0, [r7, #20]
 800e17e:	6978      	ldr	r0, [r7, #20]
 800e180:	f00c fbb6 	bl	801a8f0 <sys_arch_unprotect>
    return;
 800e184:	e029      	b.n	800e1da <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800e186:	69f8      	ldr	r0, [r7, #28]
 800e188:	f7ff ff72 	bl	800e070 <mem_link_valid>
 800e18c:	4603      	mov	r3, r0
 800e18e:	2b00      	cmp	r3, #0
 800e190:	d110      	bne.n	800e1b4 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800e192:	4b13      	ldr	r3, [pc, #76]	; (800e1e0 <mem_free+0xf8>)
 800e194:	f240 2295 	movw	r2, #661	; 0x295
 800e198:	4919      	ldr	r1, [pc, #100]	; (800e200 <mem_free+0x118>)
 800e19a:	4813      	ldr	r0, [pc, #76]	; (800e1e8 <mem_free+0x100>)
 800e19c:	f00d f970 	bl	801b480 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800e1a0:	4815      	ldr	r0, [pc, #84]	; (800e1f8 <mem_free+0x110>)
 800e1a2:	f00c fb6c 	bl	801a87e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800e1a6:	f00c fb95 	bl	801a8d4 <sys_arch_protect>
 800e1aa:	61b8      	str	r0, [r7, #24]
 800e1ac:	69b8      	ldr	r0, [r7, #24]
 800e1ae:	f00c fb9f 	bl	801a8f0 <sys_arch_unprotect>
    return;
 800e1b2:	e012      	b.n	800e1da <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800e1b4:	69fb      	ldr	r3, [r7, #28]
 800e1b6:	2200      	movs	r2, #0
 800e1b8:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800e1ba:	4b12      	ldr	r3, [pc, #72]	; (800e204 <mem_free+0x11c>)
 800e1bc:	681b      	ldr	r3, [r3, #0]
 800e1be:	69fa      	ldr	r2, [r7, #28]
 800e1c0:	429a      	cmp	r2, r3
 800e1c2:	d202      	bcs.n	800e1ca <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800e1c4:	4a0f      	ldr	r2, [pc, #60]	; (800e204 <mem_free+0x11c>)
 800e1c6:	69fb      	ldr	r3, [r7, #28]
 800e1c8:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800e1ca:	69f8      	ldr	r0, [r7, #28]
 800e1cc:	f7ff fe5c 	bl	800de88 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800e1d0:	4809      	ldr	r0, [pc, #36]	; (800e1f8 <mem_free+0x110>)
 800e1d2:	f00c fb54 	bl	801a87e <sys_mutex_unlock>
 800e1d6:	e000      	b.n	800e1da <mem_free+0xf2>
    return;
 800e1d8:	bf00      	nop
}
 800e1da:	3720      	adds	r7, #32
 800e1dc:	46bd      	mov	sp, r7
 800e1de:	bd80      	pop	{r7, pc}
 800e1e0:	0801e2e0 	.word	0x0801e2e0
 800e1e4:	0801e3d0 	.word	0x0801e3d0
 800e1e8:	0801e328 	.word	0x0801e328
 800e1ec:	2000f12c 	.word	0x2000f12c
 800e1f0:	2000f130 	.word	0x2000f130
 800e1f4:	0801e3f4 	.word	0x0801e3f4
 800e1f8:	2000f134 	.word	0x2000f134
 800e1fc:	0801e410 	.word	0x0801e410
 800e200:	0801e438 	.word	0x0801e438
 800e204:	2000f138 	.word	0x2000f138

0800e208 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800e208:	b580      	push	{r7, lr}
 800e20a:	b088      	sub	sp, #32
 800e20c:	af00      	add	r7, sp, #0
 800e20e:	6078      	str	r0, [r7, #4]
 800e210:	460b      	mov	r3, r1
 800e212:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800e214:	887b      	ldrh	r3, [r7, #2]
 800e216:	3303      	adds	r3, #3
 800e218:	b29b      	uxth	r3, r3
 800e21a:	f023 0303 	bic.w	r3, r3, #3
 800e21e:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800e220:	8bfb      	ldrh	r3, [r7, #30]
 800e222:	2b0b      	cmp	r3, #11
 800e224:	d801      	bhi.n	800e22a <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800e226:	230c      	movs	r3, #12
 800e228:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800e22a:	8bfb      	ldrh	r3, [r7, #30]
 800e22c:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800e230:	d803      	bhi.n	800e23a <mem_trim+0x32>
 800e232:	8bfa      	ldrh	r2, [r7, #30]
 800e234:	887b      	ldrh	r3, [r7, #2]
 800e236:	429a      	cmp	r2, r3
 800e238:	d201      	bcs.n	800e23e <mem_trim+0x36>
    return NULL;
 800e23a:	2300      	movs	r3, #0
 800e23c:	e0d8      	b.n	800e3f0 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800e23e:	4b6e      	ldr	r3, [pc, #440]	; (800e3f8 <mem_trim+0x1f0>)
 800e240:	681b      	ldr	r3, [r3, #0]
 800e242:	687a      	ldr	r2, [r7, #4]
 800e244:	429a      	cmp	r2, r3
 800e246:	d304      	bcc.n	800e252 <mem_trim+0x4a>
 800e248:	4b6c      	ldr	r3, [pc, #432]	; (800e3fc <mem_trim+0x1f4>)
 800e24a:	681b      	ldr	r3, [r3, #0]
 800e24c:	687a      	ldr	r2, [r7, #4]
 800e24e:	429a      	cmp	r2, r3
 800e250:	d306      	bcc.n	800e260 <mem_trim+0x58>
 800e252:	4b6b      	ldr	r3, [pc, #428]	; (800e400 <mem_trim+0x1f8>)
 800e254:	f240 22d1 	movw	r2, #721	; 0x2d1
 800e258:	496a      	ldr	r1, [pc, #424]	; (800e404 <mem_trim+0x1fc>)
 800e25a:	486b      	ldr	r0, [pc, #428]	; (800e408 <mem_trim+0x200>)
 800e25c:	f00d f910 	bl	801b480 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800e260:	4b65      	ldr	r3, [pc, #404]	; (800e3f8 <mem_trim+0x1f0>)
 800e262:	681b      	ldr	r3, [r3, #0]
 800e264:	687a      	ldr	r2, [r7, #4]
 800e266:	429a      	cmp	r2, r3
 800e268:	d304      	bcc.n	800e274 <mem_trim+0x6c>
 800e26a:	4b64      	ldr	r3, [pc, #400]	; (800e3fc <mem_trim+0x1f4>)
 800e26c:	681b      	ldr	r3, [r3, #0]
 800e26e:	687a      	ldr	r2, [r7, #4]
 800e270:	429a      	cmp	r2, r3
 800e272:	d307      	bcc.n	800e284 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800e274:	f00c fb2e 	bl	801a8d4 <sys_arch_protect>
 800e278:	60b8      	str	r0, [r7, #8]
 800e27a:	68b8      	ldr	r0, [r7, #8]
 800e27c:	f00c fb38 	bl	801a8f0 <sys_arch_unprotect>
    return rmem;
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	e0b5      	b.n	800e3f0 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	3b08      	subs	r3, #8
 800e288:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800e28a:	69b8      	ldr	r0, [r7, #24]
 800e28c:	f7ff fdea 	bl	800de64 <mem_to_ptr>
 800e290:	4603      	mov	r3, r0
 800e292:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800e294:	69bb      	ldr	r3, [r7, #24]
 800e296:	881a      	ldrh	r2, [r3, #0]
 800e298:	8afb      	ldrh	r3, [r7, #22]
 800e29a:	1ad3      	subs	r3, r2, r3
 800e29c:	b29b      	uxth	r3, r3
 800e29e:	3b08      	subs	r3, #8
 800e2a0:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800e2a2:	8bfa      	ldrh	r2, [r7, #30]
 800e2a4:	8abb      	ldrh	r3, [r7, #20]
 800e2a6:	429a      	cmp	r2, r3
 800e2a8:	d906      	bls.n	800e2b8 <mem_trim+0xb0>
 800e2aa:	4b55      	ldr	r3, [pc, #340]	; (800e400 <mem_trim+0x1f8>)
 800e2ac:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800e2b0:	4956      	ldr	r1, [pc, #344]	; (800e40c <mem_trim+0x204>)
 800e2b2:	4855      	ldr	r0, [pc, #340]	; (800e408 <mem_trim+0x200>)
 800e2b4:	f00d f8e4 	bl	801b480 <iprintf>
  if (newsize > size) {
 800e2b8:	8bfa      	ldrh	r2, [r7, #30]
 800e2ba:	8abb      	ldrh	r3, [r7, #20]
 800e2bc:	429a      	cmp	r2, r3
 800e2be:	d901      	bls.n	800e2c4 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800e2c0:	2300      	movs	r3, #0
 800e2c2:	e095      	b.n	800e3f0 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800e2c4:	8bfa      	ldrh	r2, [r7, #30]
 800e2c6:	8abb      	ldrh	r3, [r7, #20]
 800e2c8:	429a      	cmp	r2, r3
 800e2ca:	d101      	bne.n	800e2d0 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	e08f      	b.n	800e3f0 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800e2d0:	484f      	ldr	r0, [pc, #316]	; (800e410 <mem_trim+0x208>)
 800e2d2:	f00c fac5 	bl	801a860 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800e2d6:	69bb      	ldr	r3, [r7, #24]
 800e2d8:	881b      	ldrh	r3, [r3, #0]
 800e2da:	4618      	mov	r0, r3
 800e2dc:	f7ff fdb0 	bl	800de40 <ptr_to_mem>
 800e2e0:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800e2e2:	693b      	ldr	r3, [r7, #16]
 800e2e4:	791b      	ldrb	r3, [r3, #4]
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d13f      	bne.n	800e36a <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800e2ea:	69bb      	ldr	r3, [r7, #24]
 800e2ec:	881b      	ldrh	r3, [r3, #0]
 800e2ee:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800e2f2:	d106      	bne.n	800e302 <mem_trim+0xfa>
 800e2f4:	4b42      	ldr	r3, [pc, #264]	; (800e400 <mem_trim+0x1f8>)
 800e2f6:	f240 22f5 	movw	r2, #757	; 0x2f5
 800e2fa:	4946      	ldr	r1, [pc, #280]	; (800e414 <mem_trim+0x20c>)
 800e2fc:	4842      	ldr	r0, [pc, #264]	; (800e408 <mem_trim+0x200>)
 800e2fe:	f00d f8bf 	bl	801b480 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800e302:	693b      	ldr	r3, [r7, #16]
 800e304:	881b      	ldrh	r3, [r3, #0]
 800e306:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800e308:	8afa      	ldrh	r2, [r7, #22]
 800e30a:	8bfb      	ldrh	r3, [r7, #30]
 800e30c:	4413      	add	r3, r2
 800e30e:	b29b      	uxth	r3, r3
 800e310:	3308      	adds	r3, #8
 800e312:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800e314:	4b40      	ldr	r3, [pc, #256]	; (800e418 <mem_trim+0x210>)
 800e316:	681b      	ldr	r3, [r3, #0]
 800e318:	693a      	ldr	r2, [r7, #16]
 800e31a:	429a      	cmp	r2, r3
 800e31c:	d106      	bne.n	800e32c <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800e31e:	89fb      	ldrh	r3, [r7, #14]
 800e320:	4618      	mov	r0, r3
 800e322:	f7ff fd8d 	bl	800de40 <ptr_to_mem>
 800e326:	4603      	mov	r3, r0
 800e328:	4a3b      	ldr	r2, [pc, #236]	; (800e418 <mem_trim+0x210>)
 800e32a:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800e32c:	89fb      	ldrh	r3, [r7, #14]
 800e32e:	4618      	mov	r0, r3
 800e330:	f7ff fd86 	bl	800de40 <ptr_to_mem>
 800e334:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800e336:	693b      	ldr	r3, [r7, #16]
 800e338:	2200      	movs	r2, #0
 800e33a:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800e33c:	693b      	ldr	r3, [r7, #16]
 800e33e:	89ba      	ldrh	r2, [r7, #12]
 800e340:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800e342:	693b      	ldr	r3, [r7, #16]
 800e344:	8afa      	ldrh	r2, [r7, #22]
 800e346:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800e348:	69bb      	ldr	r3, [r7, #24]
 800e34a:	89fa      	ldrh	r2, [r7, #14]
 800e34c:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800e34e:	693b      	ldr	r3, [r7, #16]
 800e350:	881b      	ldrh	r3, [r3, #0]
 800e352:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800e356:	d047      	beq.n	800e3e8 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800e358:	693b      	ldr	r3, [r7, #16]
 800e35a:	881b      	ldrh	r3, [r3, #0]
 800e35c:	4618      	mov	r0, r3
 800e35e:	f7ff fd6f 	bl	800de40 <ptr_to_mem>
 800e362:	4602      	mov	r2, r0
 800e364:	89fb      	ldrh	r3, [r7, #14]
 800e366:	8053      	strh	r3, [r2, #2]
 800e368:	e03e      	b.n	800e3e8 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800e36a:	8bfb      	ldrh	r3, [r7, #30]
 800e36c:	f103 0214 	add.w	r2, r3, #20
 800e370:	8abb      	ldrh	r3, [r7, #20]
 800e372:	429a      	cmp	r2, r3
 800e374:	d838      	bhi.n	800e3e8 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800e376:	8afa      	ldrh	r2, [r7, #22]
 800e378:	8bfb      	ldrh	r3, [r7, #30]
 800e37a:	4413      	add	r3, r2
 800e37c:	b29b      	uxth	r3, r3
 800e37e:	3308      	adds	r3, #8
 800e380:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800e382:	69bb      	ldr	r3, [r7, #24]
 800e384:	881b      	ldrh	r3, [r3, #0]
 800e386:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800e38a:	d106      	bne.n	800e39a <mem_trim+0x192>
 800e38c:	4b1c      	ldr	r3, [pc, #112]	; (800e400 <mem_trim+0x1f8>)
 800e38e:	f240 3216 	movw	r2, #790	; 0x316
 800e392:	4920      	ldr	r1, [pc, #128]	; (800e414 <mem_trim+0x20c>)
 800e394:	481c      	ldr	r0, [pc, #112]	; (800e408 <mem_trim+0x200>)
 800e396:	f00d f873 	bl	801b480 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800e39a:	89fb      	ldrh	r3, [r7, #14]
 800e39c:	4618      	mov	r0, r3
 800e39e:	f7ff fd4f 	bl	800de40 <ptr_to_mem>
 800e3a2:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800e3a4:	4b1c      	ldr	r3, [pc, #112]	; (800e418 <mem_trim+0x210>)
 800e3a6:	681b      	ldr	r3, [r3, #0]
 800e3a8:	693a      	ldr	r2, [r7, #16]
 800e3aa:	429a      	cmp	r2, r3
 800e3ac:	d202      	bcs.n	800e3b4 <mem_trim+0x1ac>
      lfree = mem2;
 800e3ae:	4a1a      	ldr	r2, [pc, #104]	; (800e418 <mem_trim+0x210>)
 800e3b0:	693b      	ldr	r3, [r7, #16]
 800e3b2:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800e3b4:	693b      	ldr	r3, [r7, #16]
 800e3b6:	2200      	movs	r2, #0
 800e3b8:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800e3ba:	69bb      	ldr	r3, [r7, #24]
 800e3bc:	881a      	ldrh	r2, [r3, #0]
 800e3be:	693b      	ldr	r3, [r7, #16]
 800e3c0:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800e3c2:	693b      	ldr	r3, [r7, #16]
 800e3c4:	8afa      	ldrh	r2, [r7, #22]
 800e3c6:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800e3c8:	69bb      	ldr	r3, [r7, #24]
 800e3ca:	89fa      	ldrh	r2, [r7, #14]
 800e3cc:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800e3ce:	693b      	ldr	r3, [r7, #16]
 800e3d0:	881b      	ldrh	r3, [r3, #0]
 800e3d2:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800e3d6:	d007      	beq.n	800e3e8 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800e3d8:	693b      	ldr	r3, [r7, #16]
 800e3da:	881b      	ldrh	r3, [r3, #0]
 800e3dc:	4618      	mov	r0, r3
 800e3de:	f7ff fd2f 	bl	800de40 <ptr_to_mem>
 800e3e2:	4602      	mov	r2, r0
 800e3e4:	89fb      	ldrh	r3, [r7, #14]
 800e3e6:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800e3e8:	4809      	ldr	r0, [pc, #36]	; (800e410 <mem_trim+0x208>)
 800e3ea:	f00c fa48 	bl	801a87e <sys_mutex_unlock>
  return rmem;
 800e3ee:	687b      	ldr	r3, [r7, #4]
}
 800e3f0:	4618      	mov	r0, r3
 800e3f2:	3720      	adds	r7, #32
 800e3f4:	46bd      	mov	sp, r7
 800e3f6:	bd80      	pop	{r7, pc}
 800e3f8:	2000f12c 	.word	0x2000f12c
 800e3fc:	2000f130 	.word	0x2000f130
 800e400:	0801e2e0 	.word	0x0801e2e0
 800e404:	0801e46c 	.word	0x0801e46c
 800e408:	0801e328 	.word	0x0801e328
 800e40c:	0801e484 	.word	0x0801e484
 800e410:	2000f134 	.word	0x2000f134
 800e414:	0801e4a4 	.word	0x0801e4a4
 800e418:	2000f138 	.word	0x2000f138

0800e41c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800e41c:	b580      	push	{r7, lr}
 800e41e:	b088      	sub	sp, #32
 800e420:	af00      	add	r7, sp, #0
 800e422:	4603      	mov	r3, r0
 800e424:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800e426:	88fb      	ldrh	r3, [r7, #6]
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d101      	bne.n	800e430 <mem_malloc+0x14>
    return NULL;
 800e42c:	2300      	movs	r3, #0
 800e42e:	e0e2      	b.n	800e5f6 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800e430:	88fb      	ldrh	r3, [r7, #6]
 800e432:	3303      	adds	r3, #3
 800e434:	b29b      	uxth	r3, r3
 800e436:	f023 0303 	bic.w	r3, r3, #3
 800e43a:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800e43c:	8bbb      	ldrh	r3, [r7, #28]
 800e43e:	2b0b      	cmp	r3, #11
 800e440:	d801      	bhi.n	800e446 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800e442:	230c      	movs	r3, #12
 800e444:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800e446:	8bbb      	ldrh	r3, [r7, #28]
 800e448:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800e44c:	d803      	bhi.n	800e456 <mem_malloc+0x3a>
 800e44e:	8bba      	ldrh	r2, [r7, #28]
 800e450:	88fb      	ldrh	r3, [r7, #6]
 800e452:	429a      	cmp	r2, r3
 800e454:	d201      	bcs.n	800e45a <mem_malloc+0x3e>
    return NULL;
 800e456:	2300      	movs	r3, #0
 800e458:	e0cd      	b.n	800e5f6 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800e45a:	4869      	ldr	r0, [pc, #420]	; (800e600 <mem_malloc+0x1e4>)
 800e45c:	f00c fa00 	bl	801a860 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800e460:	4b68      	ldr	r3, [pc, #416]	; (800e604 <mem_malloc+0x1e8>)
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	4618      	mov	r0, r3
 800e466:	f7ff fcfd 	bl	800de64 <mem_to_ptr>
 800e46a:	4603      	mov	r3, r0
 800e46c:	83fb      	strh	r3, [r7, #30]
 800e46e:	e0b7      	b.n	800e5e0 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800e470:	8bfb      	ldrh	r3, [r7, #30]
 800e472:	4618      	mov	r0, r3
 800e474:	f7ff fce4 	bl	800de40 <ptr_to_mem>
 800e478:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800e47a:	697b      	ldr	r3, [r7, #20]
 800e47c:	791b      	ldrb	r3, [r3, #4]
 800e47e:	2b00      	cmp	r3, #0
 800e480:	f040 80a7 	bne.w	800e5d2 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800e484:	697b      	ldr	r3, [r7, #20]
 800e486:	881b      	ldrh	r3, [r3, #0]
 800e488:	461a      	mov	r2, r3
 800e48a:	8bfb      	ldrh	r3, [r7, #30]
 800e48c:	1ad3      	subs	r3, r2, r3
 800e48e:	f1a3 0208 	sub.w	r2, r3, #8
 800e492:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800e494:	429a      	cmp	r2, r3
 800e496:	f0c0 809c 	bcc.w	800e5d2 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800e49a:	697b      	ldr	r3, [r7, #20]
 800e49c:	881b      	ldrh	r3, [r3, #0]
 800e49e:	461a      	mov	r2, r3
 800e4a0:	8bfb      	ldrh	r3, [r7, #30]
 800e4a2:	1ad3      	subs	r3, r2, r3
 800e4a4:	f1a3 0208 	sub.w	r2, r3, #8
 800e4a8:	8bbb      	ldrh	r3, [r7, #28]
 800e4aa:	3314      	adds	r3, #20
 800e4ac:	429a      	cmp	r2, r3
 800e4ae:	d333      	bcc.n	800e518 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800e4b0:	8bfa      	ldrh	r2, [r7, #30]
 800e4b2:	8bbb      	ldrh	r3, [r7, #28]
 800e4b4:	4413      	add	r3, r2
 800e4b6:	b29b      	uxth	r3, r3
 800e4b8:	3308      	adds	r3, #8
 800e4ba:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800e4bc:	8a7b      	ldrh	r3, [r7, #18]
 800e4be:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800e4c2:	d106      	bne.n	800e4d2 <mem_malloc+0xb6>
 800e4c4:	4b50      	ldr	r3, [pc, #320]	; (800e608 <mem_malloc+0x1ec>)
 800e4c6:	f240 3287 	movw	r2, #903	; 0x387
 800e4ca:	4950      	ldr	r1, [pc, #320]	; (800e60c <mem_malloc+0x1f0>)
 800e4cc:	4850      	ldr	r0, [pc, #320]	; (800e610 <mem_malloc+0x1f4>)
 800e4ce:	f00c ffd7 	bl	801b480 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800e4d2:	8a7b      	ldrh	r3, [r7, #18]
 800e4d4:	4618      	mov	r0, r3
 800e4d6:	f7ff fcb3 	bl	800de40 <ptr_to_mem>
 800e4da:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800e4dc:	68fb      	ldr	r3, [r7, #12]
 800e4de:	2200      	movs	r2, #0
 800e4e0:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800e4e2:	697b      	ldr	r3, [r7, #20]
 800e4e4:	881a      	ldrh	r2, [r3, #0]
 800e4e6:	68fb      	ldr	r3, [r7, #12]
 800e4e8:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800e4ea:	68fb      	ldr	r3, [r7, #12]
 800e4ec:	8bfa      	ldrh	r2, [r7, #30]
 800e4ee:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800e4f0:	697b      	ldr	r3, [r7, #20]
 800e4f2:	8a7a      	ldrh	r2, [r7, #18]
 800e4f4:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800e4f6:	697b      	ldr	r3, [r7, #20]
 800e4f8:	2201      	movs	r2, #1
 800e4fa:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800e4fc:	68fb      	ldr	r3, [r7, #12]
 800e4fe:	881b      	ldrh	r3, [r3, #0]
 800e500:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800e504:	d00b      	beq.n	800e51e <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800e506:	68fb      	ldr	r3, [r7, #12]
 800e508:	881b      	ldrh	r3, [r3, #0]
 800e50a:	4618      	mov	r0, r3
 800e50c:	f7ff fc98 	bl	800de40 <ptr_to_mem>
 800e510:	4602      	mov	r2, r0
 800e512:	8a7b      	ldrh	r3, [r7, #18]
 800e514:	8053      	strh	r3, [r2, #2]
 800e516:	e002      	b.n	800e51e <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800e518:	697b      	ldr	r3, [r7, #20]
 800e51a:	2201      	movs	r2, #1
 800e51c:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800e51e:	4b39      	ldr	r3, [pc, #228]	; (800e604 <mem_malloc+0x1e8>)
 800e520:	681b      	ldr	r3, [r3, #0]
 800e522:	697a      	ldr	r2, [r7, #20]
 800e524:	429a      	cmp	r2, r3
 800e526:	d127      	bne.n	800e578 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800e528:	4b36      	ldr	r3, [pc, #216]	; (800e604 <mem_malloc+0x1e8>)
 800e52a:	681b      	ldr	r3, [r3, #0]
 800e52c:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800e52e:	e005      	b.n	800e53c <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800e530:	69bb      	ldr	r3, [r7, #24]
 800e532:	881b      	ldrh	r3, [r3, #0]
 800e534:	4618      	mov	r0, r3
 800e536:	f7ff fc83 	bl	800de40 <ptr_to_mem>
 800e53a:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800e53c:	69bb      	ldr	r3, [r7, #24]
 800e53e:	791b      	ldrb	r3, [r3, #4]
 800e540:	2b00      	cmp	r3, #0
 800e542:	d004      	beq.n	800e54e <mem_malloc+0x132>
 800e544:	4b33      	ldr	r3, [pc, #204]	; (800e614 <mem_malloc+0x1f8>)
 800e546:	681b      	ldr	r3, [r3, #0]
 800e548:	69ba      	ldr	r2, [r7, #24]
 800e54a:	429a      	cmp	r2, r3
 800e54c:	d1f0      	bne.n	800e530 <mem_malloc+0x114>
          }
          lfree = cur;
 800e54e:	4a2d      	ldr	r2, [pc, #180]	; (800e604 <mem_malloc+0x1e8>)
 800e550:	69bb      	ldr	r3, [r7, #24]
 800e552:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800e554:	4b2b      	ldr	r3, [pc, #172]	; (800e604 <mem_malloc+0x1e8>)
 800e556:	681a      	ldr	r2, [r3, #0]
 800e558:	4b2e      	ldr	r3, [pc, #184]	; (800e614 <mem_malloc+0x1f8>)
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	429a      	cmp	r2, r3
 800e55e:	d00b      	beq.n	800e578 <mem_malloc+0x15c>
 800e560:	4b28      	ldr	r3, [pc, #160]	; (800e604 <mem_malloc+0x1e8>)
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	791b      	ldrb	r3, [r3, #4]
 800e566:	2b00      	cmp	r3, #0
 800e568:	d006      	beq.n	800e578 <mem_malloc+0x15c>
 800e56a:	4b27      	ldr	r3, [pc, #156]	; (800e608 <mem_malloc+0x1ec>)
 800e56c:	f240 32b5 	movw	r2, #949	; 0x3b5
 800e570:	4929      	ldr	r1, [pc, #164]	; (800e618 <mem_malloc+0x1fc>)
 800e572:	4827      	ldr	r0, [pc, #156]	; (800e610 <mem_malloc+0x1f4>)
 800e574:	f00c ff84 	bl	801b480 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800e578:	4821      	ldr	r0, [pc, #132]	; (800e600 <mem_malloc+0x1e4>)
 800e57a:	f00c f980 	bl	801a87e <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800e57e:	8bba      	ldrh	r2, [r7, #28]
 800e580:	697b      	ldr	r3, [r7, #20]
 800e582:	4413      	add	r3, r2
 800e584:	3308      	adds	r3, #8
 800e586:	4a23      	ldr	r2, [pc, #140]	; (800e614 <mem_malloc+0x1f8>)
 800e588:	6812      	ldr	r2, [r2, #0]
 800e58a:	4293      	cmp	r3, r2
 800e58c:	d906      	bls.n	800e59c <mem_malloc+0x180>
 800e58e:	4b1e      	ldr	r3, [pc, #120]	; (800e608 <mem_malloc+0x1ec>)
 800e590:	f240 32b9 	movw	r2, #953	; 0x3b9
 800e594:	4921      	ldr	r1, [pc, #132]	; (800e61c <mem_malloc+0x200>)
 800e596:	481e      	ldr	r0, [pc, #120]	; (800e610 <mem_malloc+0x1f4>)
 800e598:	f00c ff72 	bl	801b480 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800e59c:	697b      	ldr	r3, [r7, #20]
 800e59e:	f003 0303 	and.w	r3, r3, #3
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	d006      	beq.n	800e5b4 <mem_malloc+0x198>
 800e5a6:	4b18      	ldr	r3, [pc, #96]	; (800e608 <mem_malloc+0x1ec>)
 800e5a8:	f240 32bb 	movw	r2, #955	; 0x3bb
 800e5ac:	491c      	ldr	r1, [pc, #112]	; (800e620 <mem_malloc+0x204>)
 800e5ae:	4818      	ldr	r0, [pc, #96]	; (800e610 <mem_malloc+0x1f4>)
 800e5b0:	f00c ff66 	bl	801b480 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800e5b4:	697b      	ldr	r3, [r7, #20]
 800e5b6:	f003 0303 	and.w	r3, r3, #3
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	d006      	beq.n	800e5cc <mem_malloc+0x1b0>
 800e5be:	4b12      	ldr	r3, [pc, #72]	; (800e608 <mem_malloc+0x1ec>)
 800e5c0:	f240 32bd 	movw	r2, #957	; 0x3bd
 800e5c4:	4917      	ldr	r1, [pc, #92]	; (800e624 <mem_malloc+0x208>)
 800e5c6:	4812      	ldr	r0, [pc, #72]	; (800e610 <mem_malloc+0x1f4>)
 800e5c8:	f00c ff5a 	bl	801b480 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800e5cc:	697b      	ldr	r3, [r7, #20]
 800e5ce:	3308      	adds	r3, #8
 800e5d0:	e011      	b.n	800e5f6 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800e5d2:	8bfb      	ldrh	r3, [r7, #30]
 800e5d4:	4618      	mov	r0, r3
 800e5d6:	f7ff fc33 	bl	800de40 <ptr_to_mem>
 800e5da:	4603      	mov	r3, r0
 800e5dc:	881b      	ldrh	r3, [r3, #0]
 800e5de:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800e5e0:	8bfa      	ldrh	r2, [r7, #30]
 800e5e2:	8bbb      	ldrh	r3, [r7, #28]
 800e5e4:	f5c3 43a0 	rsb	r3, r3, #20480	; 0x5000
 800e5e8:	429a      	cmp	r2, r3
 800e5ea:	f4ff af41 	bcc.w	800e470 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800e5ee:	4804      	ldr	r0, [pc, #16]	; (800e600 <mem_malloc+0x1e4>)
 800e5f0:	f00c f945 	bl	801a87e <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800e5f4:	2300      	movs	r3, #0
}
 800e5f6:	4618      	mov	r0, r3
 800e5f8:	3720      	adds	r7, #32
 800e5fa:	46bd      	mov	sp, r7
 800e5fc:	bd80      	pop	{r7, pc}
 800e5fe:	bf00      	nop
 800e600:	2000f134 	.word	0x2000f134
 800e604:	2000f138 	.word	0x2000f138
 800e608:	0801e2e0 	.word	0x0801e2e0
 800e60c:	0801e4a4 	.word	0x0801e4a4
 800e610:	0801e328 	.word	0x0801e328
 800e614:	2000f130 	.word	0x2000f130
 800e618:	0801e4b8 	.word	0x0801e4b8
 800e61c:	0801e4d4 	.word	0x0801e4d4
 800e620:	0801e504 	.word	0x0801e504
 800e624:	0801e534 	.word	0x0801e534

0800e628 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800e628:	b480      	push	{r7}
 800e62a:	b085      	sub	sp, #20
 800e62c:	af00      	add	r7, sp, #0
 800e62e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	68db      	ldr	r3, [r3, #12]
 800e634:	2200      	movs	r2, #0
 800e636:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	689b      	ldr	r3, [r3, #8]
 800e63c:	3303      	adds	r3, #3
 800e63e:	f023 0303 	bic.w	r3, r3, #3
 800e642:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800e644:	2300      	movs	r3, #0
 800e646:	60fb      	str	r3, [r7, #12]
 800e648:	e011      	b.n	800e66e <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	68db      	ldr	r3, [r3, #12]
 800e64e:	681a      	ldr	r2, [r3, #0]
 800e650:	68bb      	ldr	r3, [r7, #8]
 800e652:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	68db      	ldr	r3, [r3, #12]
 800e658:	68ba      	ldr	r2, [r7, #8]
 800e65a:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	889b      	ldrh	r3, [r3, #4]
 800e660:	461a      	mov	r2, r3
 800e662:	68bb      	ldr	r3, [r7, #8]
 800e664:	4413      	add	r3, r2
 800e666:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800e668:	68fb      	ldr	r3, [r7, #12]
 800e66a:	3301      	adds	r3, #1
 800e66c:	60fb      	str	r3, [r7, #12]
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	88db      	ldrh	r3, [r3, #6]
 800e672:	461a      	mov	r2, r3
 800e674:	68fb      	ldr	r3, [r7, #12]
 800e676:	4293      	cmp	r3, r2
 800e678:	dbe7      	blt.n	800e64a <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800e67a:	bf00      	nop
 800e67c:	bf00      	nop
 800e67e:	3714      	adds	r7, #20
 800e680:	46bd      	mov	sp, r7
 800e682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e686:	4770      	bx	lr

0800e688 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800e688:	b580      	push	{r7, lr}
 800e68a:	b082      	sub	sp, #8
 800e68c:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800e68e:	2300      	movs	r3, #0
 800e690:	80fb      	strh	r3, [r7, #6]
 800e692:	e009      	b.n	800e6a8 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800e694:	88fb      	ldrh	r3, [r7, #6]
 800e696:	4a08      	ldr	r2, [pc, #32]	; (800e6b8 <memp_init+0x30>)
 800e698:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e69c:	4618      	mov	r0, r3
 800e69e:	f7ff ffc3 	bl	800e628 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800e6a2:	88fb      	ldrh	r3, [r7, #6]
 800e6a4:	3301      	adds	r3, #1
 800e6a6:	80fb      	strh	r3, [r7, #6]
 800e6a8:	88fb      	ldrh	r3, [r7, #6]
 800e6aa:	2b0c      	cmp	r3, #12
 800e6ac:	d9f2      	bls.n	800e694 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800e6ae:	bf00      	nop
 800e6b0:	bf00      	nop
 800e6b2:	3708      	adds	r7, #8
 800e6b4:	46bd      	mov	sp, r7
 800e6b6:	bd80      	pop	{r7, pc}
 800e6b8:	0806cefc 	.word	0x0806cefc

0800e6bc <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800e6bc:	b580      	push	{r7, lr}
 800e6be:	b084      	sub	sp, #16
 800e6c0:	af00      	add	r7, sp, #0
 800e6c2:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800e6c4:	f00c f906 	bl	801a8d4 <sys_arch_protect>
 800e6c8:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	68db      	ldr	r3, [r3, #12]
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800e6d2:	68bb      	ldr	r3, [r7, #8]
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d015      	beq.n	800e704 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	68db      	ldr	r3, [r3, #12]
 800e6dc:	68ba      	ldr	r2, [r7, #8]
 800e6de:	6812      	ldr	r2, [r2, #0]
 800e6e0:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800e6e2:	68bb      	ldr	r3, [r7, #8]
 800e6e4:	f003 0303 	and.w	r3, r3, #3
 800e6e8:	2b00      	cmp	r3, #0
 800e6ea:	d006      	beq.n	800e6fa <do_memp_malloc_pool+0x3e>
 800e6ec:	4b09      	ldr	r3, [pc, #36]	; (800e714 <do_memp_malloc_pool+0x58>)
 800e6ee:	f44f 728c 	mov.w	r2, #280	; 0x118
 800e6f2:	4909      	ldr	r1, [pc, #36]	; (800e718 <do_memp_malloc_pool+0x5c>)
 800e6f4:	4809      	ldr	r0, [pc, #36]	; (800e71c <do_memp_malloc_pool+0x60>)
 800e6f6:	f00c fec3 	bl	801b480 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800e6fa:	68f8      	ldr	r0, [r7, #12]
 800e6fc:	f00c f8f8 	bl	801a8f0 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800e700:	68bb      	ldr	r3, [r7, #8]
 800e702:	e003      	b.n	800e70c <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800e704:	68f8      	ldr	r0, [r7, #12]
 800e706:	f00c f8f3 	bl	801a8f0 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800e70a:	2300      	movs	r3, #0
}
 800e70c:	4618      	mov	r0, r3
 800e70e:	3710      	adds	r7, #16
 800e710:	46bd      	mov	sp, r7
 800e712:	bd80      	pop	{r7, pc}
 800e714:	0801e5f0 	.word	0x0801e5f0
 800e718:	0801e620 	.word	0x0801e620
 800e71c:	0801e644 	.word	0x0801e644

0800e720 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800e720:	b580      	push	{r7, lr}
 800e722:	b084      	sub	sp, #16
 800e724:	af00      	add	r7, sp, #0
 800e726:	4603      	mov	r3, r0
 800e728:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800e72a:	79fb      	ldrb	r3, [r7, #7]
 800e72c:	2b0c      	cmp	r3, #12
 800e72e:	d908      	bls.n	800e742 <memp_malloc+0x22>
 800e730:	4b0a      	ldr	r3, [pc, #40]	; (800e75c <memp_malloc+0x3c>)
 800e732:	f240 1257 	movw	r2, #343	; 0x157
 800e736:	490a      	ldr	r1, [pc, #40]	; (800e760 <memp_malloc+0x40>)
 800e738:	480a      	ldr	r0, [pc, #40]	; (800e764 <memp_malloc+0x44>)
 800e73a:	f00c fea1 	bl	801b480 <iprintf>
 800e73e:	2300      	movs	r3, #0
 800e740:	e008      	b.n	800e754 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800e742:	79fb      	ldrb	r3, [r7, #7]
 800e744:	4a08      	ldr	r2, [pc, #32]	; (800e768 <memp_malloc+0x48>)
 800e746:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e74a:	4618      	mov	r0, r3
 800e74c:	f7ff ffb6 	bl	800e6bc <do_memp_malloc_pool>
 800e750:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800e752:	68fb      	ldr	r3, [r7, #12]
}
 800e754:	4618      	mov	r0, r3
 800e756:	3710      	adds	r7, #16
 800e758:	46bd      	mov	sp, r7
 800e75a:	bd80      	pop	{r7, pc}
 800e75c:	0801e5f0 	.word	0x0801e5f0
 800e760:	0801e680 	.word	0x0801e680
 800e764:	0801e644 	.word	0x0801e644
 800e768:	0806cefc 	.word	0x0806cefc

0800e76c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800e76c:	b580      	push	{r7, lr}
 800e76e:	b084      	sub	sp, #16
 800e770:	af00      	add	r7, sp, #0
 800e772:	6078      	str	r0, [r7, #4]
 800e774:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800e776:	683b      	ldr	r3, [r7, #0]
 800e778:	f003 0303 	and.w	r3, r3, #3
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	d006      	beq.n	800e78e <do_memp_free_pool+0x22>
 800e780:	4b0d      	ldr	r3, [pc, #52]	; (800e7b8 <do_memp_free_pool+0x4c>)
 800e782:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800e786:	490d      	ldr	r1, [pc, #52]	; (800e7bc <do_memp_free_pool+0x50>)
 800e788:	480d      	ldr	r0, [pc, #52]	; (800e7c0 <do_memp_free_pool+0x54>)
 800e78a:	f00c fe79 	bl	801b480 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800e78e:	683b      	ldr	r3, [r7, #0]
 800e790:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800e792:	f00c f89f 	bl	801a8d4 <sys_arch_protect>
 800e796:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	68db      	ldr	r3, [r3, #12]
 800e79c:	681a      	ldr	r2, [r3, #0]
 800e79e:	68fb      	ldr	r3, [r7, #12]
 800e7a0:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	68db      	ldr	r3, [r3, #12]
 800e7a6:	68fa      	ldr	r2, [r7, #12]
 800e7a8:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800e7aa:	68b8      	ldr	r0, [r7, #8]
 800e7ac:	f00c f8a0 	bl	801a8f0 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800e7b0:	bf00      	nop
 800e7b2:	3710      	adds	r7, #16
 800e7b4:	46bd      	mov	sp, r7
 800e7b6:	bd80      	pop	{r7, pc}
 800e7b8:	0801e5f0 	.word	0x0801e5f0
 800e7bc:	0801e6a0 	.word	0x0801e6a0
 800e7c0:	0801e644 	.word	0x0801e644

0800e7c4 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800e7c4:	b580      	push	{r7, lr}
 800e7c6:	b082      	sub	sp, #8
 800e7c8:	af00      	add	r7, sp, #0
 800e7ca:	4603      	mov	r3, r0
 800e7cc:	6039      	str	r1, [r7, #0]
 800e7ce:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800e7d0:	79fb      	ldrb	r3, [r7, #7]
 800e7d2:	2b0c      	cmp	r3, #12
 800e7d4:	d907      	bls.n	800e7e6 <memp_free+0x22>
 800e7d6:	4b0c      	ldr	r3, [pc, #48]	; (800e808 <memp_free+0x44>)
 800e7d8:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800e7dc:	490b      	ldr	r1, [pc, #44]	; (800e80c <memp_free+0x48>)
 800e7de:	480c      	ldr	r0, [pc, #48]	; (800e810 <memp_free+0x4c>)
 800e7e0:	f00c fe4e 	bl	801b480 <iprintf>
 800e7e4:	e00c      	b.n	800e800 <memp_free+0x3c>

  if (mem == NULL) {
 800e7e6:	683b      	ldr	r3, [r7, #0]
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	d008      	beq.n	800e7fe <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800e7ec:	79fb      	ldrb	r3, [r7, #7]
 800e7ee:	4a09      	ldr	r2, [pc, #36]	; (800e814 <memp_free+0x50>)
 800e7f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e7f4:	6839      	ldr	r1, [r7, #0]
 800e7f6:	4618      	mov	r0, r3
 800e7f8:	f7ff ffb8 	bl	800e76c <do_memp_free_pool>
 800e7fc:	e000      	b.n	800e800 <memp_free+0x3c>
    return;
 800e7fe:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800e800:	3708      	adds	r7, #8
 800e802:	46bd      	mov	sp, r7
 800e804:	bd80      	pop	{r7, pc}
 800e806:	bf00      	nop
 800e808:	0801e5f0 	.word	0x0801e5f0
 800e80c:	0801e6c0 	.word	0x0801e6c0
 800e810:	0801e644 	.word	0x0801e644
 800e814:	0806cefc 	.word	0x0806cefc

0800e818 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800e818:	b480      	push	{r7}
 800e81a:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800e81c:	bf00      	nop
 800e81e:	46bd      	mov	sp, r7
 800e820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e824:	4770      	bx	lr
	...

0800e828 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800e828:	b580      	push	{r7, lr}
 800e82a:	b086      	sub	sp, #24
 800e82c:	af00      	add	r7, sp, #0
 800e82e:	60f8      	str	r0, [r7, #12]
 800e830:	60b9      	str	r1, [r7, #8]
 800e832:	607a      	str	r2, [r7, #4]
 800e834:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800e836:	68fb      	ldr	r3, [r7, #12]
 800e838:	2b00      	cmp	r3, #0
 800e83a:	d108      	bne.n	800e84e <netif_add+0x26>
 800e83c:	4b5b      	ldr	r3, [pc, #364]	; (800e9ac <netif_add+0x184>)
 800e83e:	f240 1227 	movw	r2, #295	; 0x127
 800e842:	495b      	ldr	r1, [pc, #364]	; (800e9b0 <netif_add+0x188>)
 800e844:	485b      	ldr	r0, [pc, #364]	; (800e9b4 <netif_add+0x18c>)
 800e846:	f00c fe1b 	bl	801b480 <iprintf>
 800e84a:	2300      	movs	r3, #0
 800e84c:	e0a9      	b.n	800e9a2 <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800e84e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e850:	2b00      	cmp	r3, #0
 800e852:	d108      	bne.n	800e866 <netif_add+0x3e>
 800e854:	4b55      	ldr	r3, [pc, #340]	; (800e9ac <netif_add+0x184>)
 800e856:	f44f 7294 	mov.w	r2, #296	; 0x128
 800e85a:	4957      	ldr	r1, [pc, #348]	; (800e9b8 <netif_add+0x190>)
 800e85c:	4855      	ldr	r0, [pc, #340]	; (800e9b4 <netif_add+0x18c>)
 800e85e:	f00c fe0f 	bl	801b480 <iprintf>
 800e862:	2300      	movs	r3, #0
 800e864:	e09d      	b.n	800e9a2 <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800e866:	68bb      	ldr	r3, [r7, #8]
 800e868:	2b00      	cmp	r3, #0
 800e86a:	d101      	bne.n	800e870 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800e86c:	4b53      	ldr	r3, [pc, #332]	; (800e9bc <netif_add+0x194>)
 800e86e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	2b00      	cmp	r3, #0
 800e874:	d101      	bne.n	800e87a <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800e876:	4b51      	ldr	r3, [pc, #324]	; (800e9bc <netif_add+0x194>)
 800e878:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800e87a:	683b      	ldr	r3, [r7, #0]
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d101      	bne.n	800e884 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800e880:	4b4e      	ldr	r3, [pc, #312]	; (800e9bc <netif_add+0x194>)
 800e882:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800e884:	68fb      	ldr	r3, [r7, #12]
 800e886:	2200      	movs	r2, #0
 800e888:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800e88a:	68fb      	ldr	r3, [r7, #12]
 800e88c:	2200      	movs	r2, #0
 800e88e:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800e890:	68fb      	ldr	r3, [r7, #12]
 800e892:	2200      	movs	r2, #0
 800e894:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800e896:	68fb      	ldr	r3, [r7, #12]
 800e898:	4a49      	ldr	r2, [pc, #292]	; (800e9c0 <netif_add+0x198>)
 800e89a:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800e89c:	68fb      	ldr	r3, [r7, #12]
 800e89e:	2200      	movs	r2, #0
 800e8a0:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 800e8a2:	68fb      	ldr	r3, [r7, #12]
 800e8a4:	2200      	movs	r2, #0
 800e8a6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800e8aa:	68fb      	ldr	r3, [r7, #12]
 800e8ac:	3324      	adds	r3, #36	; 0x24
 800e8ae:	2204      	movs	r2, #4
 800e8b0:	2100      	movs	r1, #0
 800e8b2:	4618      	mov	r0, r3
 800e8b4:	f00c f87c 	bl	801a9b0 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800e8b8:	68fb      	ldr	r3, [r7, #12]
 800e8ba:	2200      	movs	r2, #0
 800e8bc:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800e8be:	68fb      	ldr	r3, [r7, #12]
 800e8c0:	6a3a      	ldr	r2, [r7, #32]
 800e8c2:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800e8c4:	4b3f      	ldr	r3, [pc, #252]	; (800e9c4 <netif_add+0x19c>)
 800e8c6:	781a      	ldrb	r2, [r3, #0]
 800e8c8:	68fb      	ldr	r3, [r7, #12]
 800e8ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 800e8ce:	68fb      	ldr	r3, [r7, #12]
 800e8d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e8d2:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800e8d4:	683b      	ldr	r3, [r7, #0]
 800e8d6:	687a      	ldr	r2, [r7, #4]
 800e8d8:	68b9      	ldr	r1, [r7, #8]
 800e8da:	68f8      	ldr	r0, [r7, #12]
 800e8dc:	f000 f914 	bl	800eb08 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800e8e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8e2:	68f8      	ldr	r0, [r7, #12]
 800e8e4:	4798      	blx	r3
 800e8e6:	4603      	mov	r3, r0
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	d001      	beq.n	800e8f0 <netif_add+0xc8>
    return NULL;
 800e8ec:	2300      	movs	r3, #0
 800e8ee:	e058      	b.n	800e9a2 <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e8f6:	2bff      	cmp	r3, #255	; 0xff
 800e8f8:	d103      	bne.n	800e902 <netif_add+0xda>
        netif->num = 0;
 800e8fa:	68fb      	ldr	r3, [r7, #12]
 800e8fc:	2200      	movs	r2, #0
 800e8fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 800e902:	2300      	movs	r3, #0
 800e904:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800e906:	4b30      	ldr	r3, [pc, #192]	; (800e9c8 <netif_add+0x1a0>)
 800e908:	681b      	ldr	r3, [r3, #0]
 800e90a:	617b      	str	r3, [r7, #20]
 800e90c:	e02b      	b.n	800e966 <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800e90e:	697a      	ldr	r2, [r7, #20]
 800e910:	68fb      	ldr	r3, [r7, #12]
 800e912:	429a      	cmp	r2, r3
 800e914:	d106      	bne.n	800e924 <netif_add+0xfc>
 800e916:	4b25      	ldr	r3, [pc, #148]	; (800e9ac <netif_add+0x184>)
 800e918:	f240 128b 	movw	r2, #395	; 0x18b
 800e91c:	492b      	ldr	r1, [pc, #172]	; (800e9cc <netif_add+0x1a4>)
 800e91e:	4825      	ldr	r0, [pc, #148]	; (800e9b4 <netif_add+0x18c>)
 800e920:	f00c fdae 	bl	801b480 <iprintf>
        num_netifs++;
 800e924:	693b      	ldr	r3, [r7, #16]
 800e926:	3301      	adds	r3, #1
 800e928:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800e92a:	693b      	ldr	r3, [r7, #16]
 800e92c:	2bff      	cmp	r3, #255	; 0xff
 800e92e:	dd06      	ble.n	800e93e <netif_add+0x116>
 800e930:	4b1e      	ldr	r3, [pc, #120]	; (800e9ac <netif_add+0x184>)
 800e932:	f240 128d 	movw	r2, #397	; 0x18d
 800e936:	4926      	ldr	r1, [pc, #152]	; (800e9d0 <netif_add+0x1a8>)
 800e938:	481e      	ldr	r0, [pc, #120]	; (800e9b4 <netif_add+0x18c>)
 800e93a:	f00c fda1 	bl	801b480 <iprintf>
        if (netif2->num == netif->num) {
 800e93e:	697b      	ldr	r3, [r7, #20]
 800e940:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800e944:	68fb      	ldr	r3, [r7, #12]
 800e946:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e94a:	429a      	cmp	r2, r3
 800e94c:	d108      	bne.n	800e960 <netif_add+0x138>
          netif->num++;
 800e94e:	68fb      	ldr	r3, [r7, #12]
 800e950:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e954:	3301      	adds	r3, #1
 800e956:	b2da      	uxtb	r2, r3
 800e958:	68fb      	ldr	r3, [r7, #12]
 800e95a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 800e95e:	e005      	b.n	800e96c <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800e960:	697b      	ldr	r3, [r7, #20]
 800e962:	681b      	ldr	r3, [r3, #0]
 800e964:	617b      	str	r3, [r7, #20]
 800e966:	697b      	ldr	r3, [r7, #20]
 800e968:	2b00      	cmp	r3, #0
 800e96a:	d1d0      	bne.n	800e90e <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 800e96c:	697b      	ldr	r3, [r7, #20]
 800e96e:	2b00      	cmp	r3, #0
 800e970:	d1be      	bne.n	800e8f0 <netif_add+0xc8>
  }
  if (netif->num == 254) {
 800e972:	68fb      	ldr	r3, [r7, #12]
 800e974:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e978:	2bfe      	cmp	r3, #254	; 0xfe
 800e97a:	d103      	bne.n	800e984 <netif_add+0x15c>
    netif_num = 0;
 800e97c:	4b11      	ldr	r3, [pc, #68]	; (800e9c4 <netif_add+0x19c>)
 800e97e:	2200      	movs	r2, #0
 800e980:	701a      	strb	r2, [r3, #0]
 800e982:	e006      	b.n	800e992 <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e98a:	3301      	adds	r3, #1
 800e98c:	b2da      	uxtb	r2, r3
 800e98e:	4b0d      	ldr	r3, [pc, #52]	; (800e9c4 <netif_add+0x19c>)
 800e990:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800e992:	4b0d      	ldr	r3, [pc, #52]	; (800e9c8 <netif_add+0x1a0>)
 800e994:	681a      	ldr	r2, [r3, #0]
 800e996:	68fb      	ldr	r3, [r7, #12]
 800e998:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800e99a:	4a0b      	ldr	r2, [pc, #44]	; (800e9c8 <netif_add+0x1a0>)
 800e99c:	68fb      	ldr	r3, [r7, #12]
 800e99e:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800e9a0:	68fb      	ldr	r3, [r7, #12]
}
 800e9a2:	4618      	mov	r0, r3
 800e9a4:	3718      	adds	r7, #24
 800e9a6:	46bd      	mov	sp, r7
 800e9a8:	bd80      	pop	{r7, pc}
 800e9aa:	bf00      	nop
 800e9ac:	0801e6dc 	.word	0x0801e6dc
 800e9b0:	0801e770 	.word	0x0801e770
 800e9b4:	0801e72c 	.word	0x0801e72c
 800e9b8:	0801e78c 	.word	0x0801e78c
 800e9bc:	0806cf80 	.word	0x0806cf80
 800e9c0:	0800edc9 	.word	0x0800edc9
 800e9c4:	20013b70 	.word	0x20013b70
 800e9c8:	20013b68 	.word	0x20013b68
 800e9cc:	0801e7b0 	.word	0x0801e7b0
 800e9d0:	0801e7c4 	.word	0x0801e7c4

0800e9d4 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800e9d4:	b580      	push	{r7, lr}
 800e9d6:	b082      	sub	sp, #8
 800e9d8:	af00      	add	r7, sp, #0
 800e9da:	6078      	str	r0, [r7, #4]
 800e9dc:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800e9de:	6839      	ldr	r1, [r7, #0]
 800e9e0:	6878      	ldr	r0, [r7, #4]
 800e9e2:	f002 fd1b 	bl	801141c <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800e9e6:	6839      	ldr	r1, [r7, #0]
 800e9e8:	6878      	ldr	r0, [r7, #4]
 800e9ea:	f007 fa63 	bl	8015eb4 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800e9ee:	bf00      	nop
 800e9f0:	3708      	adds	r7, #8
 800e9f2:	46bd      	mov	sp, r7
 800e9f4:	bd80      	pop	{r7, pc}
	...

0800e9f8 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800e9f8:	b580      	push	{r7, lr}
 800e9fa:	b086      	sub	sp, #24
 800e9fc:	af00      	add	r7, sp, #0
 800e9fe:	60f8      	str	r0, [r7, #12]
 800ea00:	60b9      	str	r1, [r7, #8]
 800ea02:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800ea04:	68bb      	ldr	r3, [r7, #8]
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	d106      	bne.n	800ea18 <netif_do_set_ipaddr+0x20>
 800ea0a:	4b1d      	ldr	r3, [pc, #116]	; (800ea80 <netif_do_set_ipaddr+0x88>)
 800ea0c:	f240 12cb 	movw	r2, #459	; 0x1cb
 800ea10:	491c      	ldr	r1, [pc, #112]	; (800ea84 <netif_do_set_ipaddr+0x8c>)
 800ea12:	481d      	ldr	r0, [pc, #116]	; (800ea88 <netif_do_set_ipaddr+0x90>)
 800ea14:	f00c fd34 	bl	801b480 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	d106      	bne.n	800ea2c <netif_do_set_ipaddr+0x34>
 800ea1e:	4b18      	ldr	r3, [pc, #96]	; (800ea80 <netif_do_set_ipaddr+0x88>)
 800ea20:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800ea24:	4917      	ldr	r1, [pc, #92]	; (800ea84 <netif_do_set_ipaddr+0x8c>)
 800ea26:	4818      	ldr	r0, [pc, #96]	; (800ea88 <netif_do_set_ipaddr+0x90>)
 800ea28:	f00c fd2a 	bl	801b480 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800ea2c:	68bb      	ldr	r3, [r7, #8]
 800ea2e:	681a      	ldr	r2, [r3, #0]
 800ea30:	68fb      	ldr	r3, [r7, #12]
 800ea32:	3304      	adds	r3, #4
 800ea34:	681b      	ldr	r3, [r3, #0]
 800ea36:	429a      	cmp	r2, r3
 800ea38:	d01c      	beq.n	800ea74 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800ea3a:	68bb      	ldr	r3, [r7, #8]
 800ea3c:	681b      	ldr	r3, [r3, #0]
 800ea3e:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800ea40:	68fb      	ldr	r3, [r7, #12]
 800ea42:	3304      	adds	r3, #4
 800ea44:	681a      	ldr	r2, [r3, #0]
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800ea4a:	f107 0314 	add.w	r3, r7, #20
 800ea4e:	4619      	mov	r1, r3
 800ea50:	6878      	ldr	r0, [r7, #4]
 800ea52:	f7ff ffbf 	bl	800e9d4 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800ea56:	68bb      	ldr	r3, [r7, #8]
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	d002      	beq.n	800ea62 <netif_do_set_ipaddr+0x6a>
 800ea5c:	68bb      	ldr	r3, [r7, #8]
 800ea5e:	681b      	ldr	r3, [r3, #0]
 800ea60:	e000      	b.n	800ea64 <netif_do_set_ipaddr+0x6c>
 800ea62:	2300      	movs	r3, #0
 800ea64:	68fa      	ldr	r2, [r7, #12]
 800ea66:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800ea68:	2101      	movs	r1, #1
 800ea6a:	68f8      	ldr	r0, [r7, #12]
 800ea6c:	f000 f8d2 	bl	800ec14 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800ea70:	2301      	movs	r3, #1
 800ea72:	e000      	b.n	800ea76 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800ea74:	2300      	movs	r3, #0
}
 800ea76:	4618      	mov	r0, r3
 800ea78:	3718      	adds	r7, #24
 800ea7a:	46bd      	mov	sp, r7
 800ea7c:	bd80      	pop	{r7, pc}
 800ea7e:	bf00      	nop
 800ea80:	0801e6dc 	.word	0x0801e6dc
 800ea84:	0801e7f4 	.word	0x0801e7f4
 800ea88:	0801e72c 	.word	0x0801e72c

0800ea8c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800ea8c:	b480      	push	{r7}
 800ea8e:	b085      	sub	sp, #20
 800ea90:	af00      	add	r7, sp, #0
 800ea92:	60f8      	str	r0, [r7, #12]
 800ea94:	60b9      	str	r1, [r7, #8]
 800ea96:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800ea98:	68bb      	ldr	r3, [r7, #8]
 800ea9a:	681a      	ldr	r2, [r3, #0]
 800ea9c:	68fb      	ldr	r3, [r7, #12]
 800ea9e:	3308      	adds	r3, #8
 800eaa0:	681b      	ldr	r3, [r3, #0]
 800eaa2:	429a      	cmp	r2, r3
 800eaa4:	d00a      	beq.n	800eabc <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800eaa6:	68bb      	ldr	r3, [r7, #8]
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	d002      	beq.n	800eab2 <netif_do_set_netmask+0x26>
 800eaac:	68bb      	ldr	r3, [r7, #8]
 800eaae:	681b      	ldr	r3, [r3, #0]
 800eab0:	e000      	b.n	800eab4 <netif_do_set_netmask+0x28>
 800eab2:	2300      	movs	r3, #0
 800eab4:	68fa      	ldr	r2, [r7, #12]
 800eab6:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800eab8:	2301      	movs	r3, #1
 800eaba:	e000      	b.n	800eabe <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800eabc:	2300      	movs	r3, #0
}
 800eabe:	4618      	mov	r0, r3
 800eac0:	3714      	adds	r7, #20
 800eac2:	46bd      	mov	sp, r7
 800eac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eac8:	4770      	bx	lr

0800eaca <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800eaca:	b480      	push	{r7}
 800eacc:	b085      	sub	sp, #20
 800eace:	af00      	add	r7, sp, #0
 800ead0:	60f8      	str	r0, [r7, #12]
 800ead2:	60b9      	str	r1, [r7, #8]
 800ead4:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800ead6:	68bb      	ldr	r3, [r7, #8]
 800ead8:	681a      	ldr	r2, [r3, #0]
 800eada:	68fb      	ldr	r3, [r7, #12]
 800eadc:	330c      	adds	r3, #12
 800eade:	681b      	ldr	r3, [r3, #0]
 800eae0:	429a      	cmp	r2, r3
 800eae2:	d00a      	beq.n	800eafa <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800eae4:	68bb      	ldr	r3, [r7, #8]
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d002      	beq.n	800eaf0 <netif_do_set_gw+0x26>
 800eaea:	68bb      	ldr	r3, [r7, #8]
 800eaec:	681b      	ldr	r3, [r3, #0]
 800eaee:	e000      	b.n	800eaf2 <netif_do_set_gw+0x28>
 800eaf0:	2300      	movs	r3, #0
 800eaf2:	68fa      	ldr	r2, [r7, #12]
 800eaf4:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800eaf6:	2301      	movs	r3, #1
 800eaf8:	e000      	b.n	800eafc <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800eafa:	2300      	movs	r3, #0
}
 800eafc:	4618      	mov	r0, r3
 800eafe:	3714      	adds	r7, #20
 800eb00:	46bd      	mov	sp, r7
 800eb02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb06:	4770      	bx	lr

0800eb08 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800eb08:	b580      	push	{r7, lr}
 800eb0a:	b088      	sub	sp, #32
 800eb0c:	af00      	add	r7, sp, #0
 800eb0e:	60f8      	str	r0, [r7, #12]
 800eb10:	60b9      	str	r1, [r7, #8]
 800eb12:	607a      	str	r2, [r7, #4]
 800eb14:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800eb16:	2300      	movs	r3, #0
 800eb18:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800eb1a:	2300      	movs	r3, #0
 800eb1c:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800eb1e:	68bb      	ldr	r3, [r7, #8]
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	d101      	bne.n	800eb28 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800eb24:	4b1c      	ldr	r3, [pc, #112]	; (800eb98 <netif_set_addr+0x90>)
 800eb26:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	d101      	bne.n	800eb32 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800eb2e:	4b1a      	ldr	r3, [pc, #104]	; (800eb98 <netif_set_addr+0x90>)
 800eb30:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800eb32:	683b      	ldr	r3, [r7, #0]
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d101      	bne.n	800eb3c <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800eb38:	4b17      	ldr	r3, [pc, #92]	; (800eb98 <netif_set_addr+0x90>)
 800eb3a:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800eb3c:	68bb      	ldr	r3, [r7, #8]
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	d003      	beq.n	800eb4a <netif_set_addr+0x42>
 800eb42:	68bb      	ldr	r3, [r7, #8]
 800eb44:	681b      	ldr	r3, [r3, #0]
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	d101      	bne.n	800eb4e <netif_set_addr+0x46>
 800eb4a:	2301      	movs	r3, #1
 800eb4c:	e000      	b.n	800eb50 <netif_set_addr+0x48>
 800eb4e:	2300      	movs	r3, #0
 800eb50:	617b      	str	r3, [r7, #20]
  if (remove) {
 800eb52:	697b      	ldr	r3, [r7, #20]
 800eb54:	2b00      	cmp	r3, #0
 800eb56:	d006      	beq.n	800eb66 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800eb58:	f107 0310 	add.w	r3, r7, #16
 800eb5c:	461a      	mov	r2, r3
 800eb5e:	68b9      	ldr	r1, [r7, #8]
 800eb60:	68f8      	ldr	r0, [r7, #12]
 800eb62:	f7ff ff49 	bl	800e9f8 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800eb66:	69fa      	ldr	r2, [r7, #28]
 800eb68:	6879      	ldr	r1, [r7, #4]
 800eb6a:	68f8      	ldr	r0, [r7, #12]
 800eb6c:	f7ff ff8e 	bl	800ea8c <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800eb70:	69ba      	ldr	r2, [r7, #24]
 800eb72:	6839      	ldr	r1, [r7, #0]
 800eb74:	68f8      	ldr	r0, [r7, #12]
 800eb76:	f7ff ffa8 	bl	800eaca <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800eb7a:	697b      	ldr	r3, [r7, #20]
 800eb7c:	2b00      	cmp	r3, #0
 800eb7e:	d106      	bne.n	800eb8e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800eb80:	f107 0310 	add.w	r3, r7, #16
 800eb84:	461a      	mov	r2, r3
 800eb86:	68b9      	ldr	r1, [r7, #8]
 800eb88:	68f8      	ldr	r0, [r7, #12]
 800eb8a:	f7ff ff35 	bl	800e9f8 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800eb8e:	bf00      	nop
 800eb90:	3720      	adds	r7, #32
 800eb92:	46bd      	mov	sp, r7
 800eb94:	bd80      	pop	{r7, pc}
 800eb96:	bf00      	nop
 800eb98:	0806cf80 	.word	0x0806cf80

0800eb9c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800eb9c:	b480      	push	{r7}
 800eb9e:	b083      	sub	sp, #12
 800eba0:	af00      	add	r7, sp, #0
 800eba2:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800eba4:	4a04      	ldr	r2, [pc, #16]	; (800ebb8 <netif_set_default+0x1c>)
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800ebaa:	bf00      	nop
 800ebac:	370c      	adds	r7, #12
 800ebae:	46bd      	mov	sp, r7
 800ebb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebb4:	4770      	bx	lr
 800ebb6:	bf00      	nop
 800ebb8:	20013b6c 	.word	0x20013b6c

0800ebbc <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800ebbc:	b580      	push	{r7, lr}
 800ebbe:	b082      	sub	sp, #8
 800ebc0:	af00      	add	r7, sp, #0
 800ebc2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	d107      	bne.n	800ebda <netif_set_up+0x1e>
 800ebca:	4b0f      	ldr	r3, [pc, #60]	; (800ec08 <netif_set_up+0x4c>)
 800ebcc:	f44f 7254 	mov.w	r2, #848	; 0x350
 800ebd0:	490e      	ldr	r1, [pc, #56]	; (800ec0c <netif_set_up+0x50>)
 800ebd2:	480f      	ldr	r0, [pc, #60]	; (800ec10 <netif_set_up+0x54>)
 800ebd4:	f00c fc54 	bl	801b480 <iprintf>
 800ebd8:	e013      	b.n	800ec02 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ebe0:	f003 0301 	and.w	r3, r3, #1
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	d10c      	bne.n	800ec02 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ebee:	f043 0301 	orr.w	r3, r3, #1
 800ebf2:	b2da      	uxtb	r2, r3
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800ebfa:	2103      	movs	r1, #3
 800ebfc:	6878      	ldr	r0, [r7, #4]
 800ebfe:	f000 f809 	bl	800ec14 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800ec02:	3708      	adds	r7, #8
 800ec04:	46bd      	mov	sp, r7
 800ec06:	bd80      	pop	{r7, pc}
 800ec08:	0801e6dc 	.word	0x0801e6dc
 800ec0c:	0801e864 	.word	0x0801e864
 800ec10:	0801e72c 	.word	0x0801e72c

0800ec14 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800ec14:	b580      	push	{r7, lr}
 800ec16:	b082      	sub	sp, #8
 800ec18:	af00      	add	r7, sp, #0
 800ec1a:	6078      	str	r0, [r7, #4]
 800ec1c:	460b      	mov	r3, r1
 800ec1e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	d106      	bne.n	800ec34 <netif_issue_reports+0x20>
 800ec26:	4b18      	ldr	r3, [pc, #96]	; (800ec88 <netif_issue_reports+0x74>)
 800ec28:	f240 326d 	movw	r2, #877	; 0x36d
 800ec2c:	4917      	ldr	r1, [pc, #92]	; (800ec8c <netif_issue_reports+0x78>)
 800ec2e:	4818      	ldr	r0, [pc, #96]	; (800ec90 <netif_issue_reports+0x7c>)
 800ec30:	f00c fc26 	bl	801b480 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ec3a:	f003 0304 	and.w	r3, r3, #4
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	d01e      	beq.n	800ec80 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ec48:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d017      	beq.n	800ec80 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800ec50:	78fb      	ldrb	r3, [r7, #3]
 800ec52:	f003 0301 	and.w	r3, r3, #1
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	d013      	beq.n	800ec82 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	3304      	adds	r3, #4
 800ec5e:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800ec60:	2b00      	cmp	r3, #0
 800ec62:	d00e      	beq.n	800ec82 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ec6a:	f003 0308 	and.w	r3, r3, #8
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	d007      	beq.n	800ec82 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	3304      	adds	r3, #4
 800ec76:	4619      	mov	r1, r3
 800ec78:	6878      	ldr	r0, [r7, #4]
 800ec7a:	f009 ffa1 	bl	8018bc0 <etharp_request>
 800ec7e:	e000      	b.n	800ec82 <netif_issue_reports+0x6e>
    return;
 800ec80:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800ec82:	3708      	adds	r7, #8
 800ec84:	46bd      	mov	sp, r7
 800ec86:	bd80      	pop	{r7, pc}
 800ec88:	0801e6dc 	.word	0x0801e6dc
 800ec8c:	0801e880 	.word	0x0801e880
 800ec90:	0801e72c 	.word	0x0801e72c

0800ec94 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800ec94:	b580      	push	{r7, lr}
 800ec96:	b082      	sub	sp, #8
 800ec98:	af00      	add	r7, sp, #0
 800ec9a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	2b00      	cmp	r3, #0
 800eca0:	d107      	bne.n	800ecb2 <netif_set_down+0x1e>
 800eca2:	4b12      	ldr	r3, [pc, #72]	; (800ecec <netif_set_down+0x58>)
 800eca4:	f240 329b 	movw	r2, #923	; 0x39b
 800eca8:	4911      	ldr	r1, [pc, #68]	; (800ecf0 <netif_set_down+0x5c>)
 800ecaa:	4812      	ldr	r0, [pc, #72]	; (800ecf4 <netif_set_down+0x60>)
 800ecac:	f00c fbe8 	bl	801b480 <iprintf>
 800ecb0:	e019      	b.n	800ece6 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ecb8:	f003 0301 	and.w	r3, r3, #1
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	d012      	beq.n	800ece6 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ecc6:	f023 0301 	bic.w	r3, r3, #1
 800ecca:	b2da      	uxtb	r2, r3
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ecd8:	f003 0308 	and.w	r3, r3, #8
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	d002      	beq.n	800ece6 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800ece0:	6878      	ldr	r0, [r7, #4]
 800ece2:	f009 fb27 	bl	8018334 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800ece6:	3708      	adds	r7, #8
 800ece8:	46bd      	mov	sp, r7
 800ecea:	bd80      	pop	{r7, pc}
 800ecec:	0801e6dc 	.word	0x0801e6dc
 800ecf0:	0801e8a4 	.word	0x0801e8a4
 800ecf4:	0801e72c 	.word	0x0801e72c

0800ecf8 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800ecf8:	b580      	push	{r7, lr}
 800ecfa:	b082      	sub	sp, #8
 800ecfc:	af00      	add	r7, sp, #0
 800ecfe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	2b00      	cmp	r3, #0
 800ed04:	d107      	bne.n	800ed16 <netif_set_link_up+0x1e>
 800ed06:	4b15      	ldr	r3, [pc, #84]	; (800ed5c <netif_set_link_up+0x64>)
 800ed08:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800ed0c:	4914      	ldr	r1, [pc, #80]	; (800ed60 <netif_set_link_up+0x68>)
 800ed0e:	4815      	ldr	r0, [pc, #84]	; (800ed64 <netif_set_link_up+0x6c>)
 800ed10:	f00c fbb6 	bl	801b480 <iprintf>
 800ed14:	e01e      	b.n	800ed54 <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ed1c:	f003 0304 	and.w	r3, r3, #4
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	d117      	bne.n	800ed54 <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ed2a:	f043 0304 	orr.w	r3, r3, #4
 800ed2e:	b2da      	uxtb	r2, r3
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 800ed36:	6878      	ldr	r0, [r7, #4]
 800ed38:	f007 fce6 	bl	8016708 <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800ed3c:	2103      	movs	r1, #3
 800ed3e:	6878      	ldr	r0, [r7, #4]
 800ed40:	f7ff ff68 	bl	800ec14 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	69db      	ldr	r3, [r3, #28]
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d003      	beq.n	800ed54 <netif_set_link_up+0x5c>
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	69db      	ldr	r3, [r3, #28]
 800ed50:	6878      	ldr	r0, [r7, #4]
 800ed52:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800ed54:	3708      	adds	r7, #8
 800ed56:	46bd      	mov	sp, r7
 800ed58:	bd80      	pop	{r7, pc}
 800ed5a:	bf00      	nop
 800ed5c:	0801e6dc 	.word	0x0801e6dc
 800ed60:	0801e8c4 	.word	0x0801e8c4
 800ed64:	0801e72c 	.word	0x0801e72c

0800ed68 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800ed68:	b580      	push	{r7, lr}
 800ed6a:	b082      	sub	sp, #8
 800ed6c:	af00      	add	r7, sp, #0
 800ed6e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	d107      	bne.n	800ed86 <netif_set_link_down+0x1e>
 800ed76:	4b11      	ldr	r3, [pc, #68]	; (800edbc <netif_set_link_down+0x54>)
 800ed78:	f240 4206 	movw	r2, #1030	; 0x406
 800ed7c:	4910      	ldr	r1, [pc, #64]	; (800edc0 <netif_set_link_down+0x58>)
 800ed7e:	4811      	ldr	r0, [pc, #68]	; (800edc4 <netif_set_link_down+0x5c>)
 800ed80:	f00c fb7e 	bl	801b480 <iprintf>
 800ed84:	e017      	b.n	800edb6 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ed8c:	f003 0304 	and.w	r3, r3, #4
 800ed90:	2b00      	cmp	r3, #0
 800ed92:	d010      	beq.n	800edb6 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ed9a:	f023 0304 	bic.w	r3, r3, #4
 800ed9e:	b2da      	uxtb	r2, r3
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	69db      	ldr	r3, [r3, #28]
 800edaa:	2b00      	cmp	r3, #0
 800edac:	d003      	beq.n	800edb6 <netif_set_link_down+0x4e>
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	69db      	ldr	r3, [r3, #28]
 800edb2:	6878      	ldr	r0, [r7, #4]
 800edb4:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800edb6:	3708      	adds	r7, #8
 800edb8:	46bd      	mov	sp, r7
 800edba:	bd80      	pop	{r7, pc}
 800edbc:	0801e6dc 	.word	0x0801e6dc
 800edc0:	0801e8e8 	.word	0x0801e8e8
 800edc4:	0801e72c 	.word	0x0801e72c

0800edc8 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800edc8:	b480      	push	{r7}
 800edca:	b085      	sub	sp, #20
 800edcc:	af00      	add	r7, sp, #0
 800edce:	60f8      	str	r0, [r7, #12]
 800edd0:	60b9      	str	r1, [r7, #8]
 800edd2:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800edd4:	f06f 030b 	mvn.w	r3, #11
}
 800edd8:	4618      	mov	r0, r3
 800edda:	3714      	adds	r7, #20
 800eddc:	46bd      	mov	sp, r7
 800edde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ede2:	4770      	bx	lr

0800ede4 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800ede4:	b480      	push	{r7}
 800ede6:	b085      	sub	sp, #20
 800ede8:	af00      	add	r7, sp, #0
 800edea:	4603      	mov	r3, r0
 800edec:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800edee:	79fb      	ldrb	r3, [r7, #7]
 800edf0:	2b00      	cmp	r3, #0
 800edf2:	d013      	beq.n	800ee1c <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800edf4:	4b0d      	ldr	r3, [pc, #52]	; (800ee2c <netif_get_by_index+0x48>)
 800edf6:	681b      	ldr	r3, [r3, #0]
 800edf8:	60fb      	str	r3, [r7, #12]
 800edfa:	e00c      	b.n	800ee16 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800edfc:	68fb      	ldr	r3, [r7, #12]
 800edfe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ee02:	3301      	adds	r3, #1
 800ee04:	b2db      	uxtb	r3, r3
 800ee06:	79fa      	ldrb	r2, [r7, #7]
 800ee08:	429a      	cmp	r2, r3
 800ee0a:	d101      	bne.n	800ee10 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800ee0c:	68fb      	ldr	r3, [r7, #12]
 800ee0e:	e006      	b.n	800ee1e <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800ee10:	68fb      	ldr	r3, [r7, #12]
 800ee12:	681b      	ldr	r3, [r3, #0]
 800ee14:	60fb      	str	r3, [r7, #12]
 800ee16:	68fb      	ldr	r3, [r7, #12]
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	d1ef      	bne.n	800edfc <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800ee1c:	2300      	movs	r3, #0
}
 800ee1e:	4618      	mov	r0, r3
 800ee20:	3714      	adds	r7, #20
 800ee22:	46bd      	mov	sp, r7
 800ee24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee28:	4770      	bx	lr
 800ee2a:	bf00      	nop
 800ee2c:	20013b68 	.word	0x20013b68

0800ee30 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800ee30:	b580      	push	{r7, lr}
 800ee32:	b082      	sub	sp, #8
 800ee34:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800ee36:	f00b fd4d 	bl	801a8d4 <sys_arch_protect>
 800ee3a:	6038      	str	r0, [r7, #0]
 800ee3c:	4b0d      	ldr	r3, [pc, #52]	; (800ee74 <pbuf_free_ooseq+0x44>)
 800ee3e:	2200      	movs	r2, #0
 800ee40:	701a      	strb	r2, [r3, #0]
 800ee42:	6838      	ldr	r0, [r7, #0]
 800ee44:	f00b fd54 	bl	801a8f0 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800ee48:	4b0b      	ldr	r3, [pc, #44]	; (800ee78 <pbuf_free_ooseq+0x48>)
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	607b      	str	r3, [r7, #4]
 800ee4e:	e00a      	b.n	800ee66 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d003      	beq.n	800ee60 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800ee58:	6878      	ldr	r0, [r7, #4]
 800ee5a:	f002 fb1d 	bl	8011498 <tcp_free_ooseq>
      return;
 800ee5e:	e005      	b.n	800ee6c <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	68db      	ldr	r3, [r3, #12]
 800ee64:	607b      	str	r3, [r7, #4]
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	d1f1      	bne.n	800ee50 <pbuf_free_ooseq+0x20>
    }
  }
}
 800ee6c:	3708      	adds	r7, #8
 800ee6e:	46bd      	mov	sp, r7
 800ee70:	bd80      	pop	{r7, pc}
 800ee72:	bf00      	nop
 800ee74:	20013b71 	.word	0x20013b71
 800ee78:	20013b80 	.word	0x20013b80

0800ee7c <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800ee7c:	b580      	push	{r7, lr}
 800ee7e:	b082      	sub	sp, #8
 800ee80:	af00      	add	r7, sp, #0
 800ee82:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800ee84:	f7ff ffd4 	bl	800ee30 <pbuf_free_ooseq>
}
 800ee88:	bf00      	nop
 800ee8a:	3708      	adds	r7, #8
 800ee8c:	46bd      	mov	sp, r7
 800ee8e:	bd80      	pop	{r7, pc}

0800ee90 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800ee90:	b580      	push	{r7, lr}
 800ee92:	b082      	sub	sp, #8
 800ee94:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800ee96:	f00b fd1d 	bl	801a8d4 <sys_arch_protect>
 800ee9a:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800ee9c:	4b0f      	ldr	r3, [pc, #60]	; (800eedc <pbuf_pool_is_empty+0x4c>)
 800ee9e:	781b      	ldrb	r3, [r3, #0]
 800eea0:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800eea2:	4b0e      	ldr	r3, [pc, #56]	; (800eedc <pbuf_pool_is_empty+0x4c>)
 800eea4:	2201      	movs	r2, #1
 800eea6:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800eea8:	6878      	ldr	r0, [r7, #4]
 800eeaa:	f00b fd21 	bl	801a8f0 <sys_arch_unprotect>

  if (!queued) {
 800eeae:	78fb      	ldrb	r3, [r7, #3]
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	d10f      	bne.n	800eed4 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800eeb4:	2100      	movs	r1, #0
 800eeb6:	480a      	ldr	r0, [pc, #40]	; (800eee0 <pbuf_pool_is_empty+0x50>)
 800eeb8:	f7fe fd62 	bl	800d980 <tcpip_try_callback>
 800eebc:	4603      	mov	r3, r0
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	d008      	beq.n	800eed4 <pbuf_pool_is_empty+0x44>
 800eec2:	f00b fd07 	bl	801a8d4 <sys_arch_protect>
 800eec6:	6078      	str	r0, [r7, #4]
 800eec8:	4b04      	ldr	r3, [pc, #16]	; (800eedc <pbuf_pool_is_empty+0x4c>)
 800eeca:	2200      	movs	r2, #0
 800eecc:	701a      	strb	r2, [r3, #0]
 800eece:	6878      	ldr	r0, [r7, #4]
 800eed0:	f00b fd0e 	bl	801a8f0 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800eed4:	bf00      	nop
 800eed6:	3708      	adds	r7, #8
 800eed8:	46bd      	mov	sp, r7
 800eeda:	bd80      	pop	{r7, pc}
 800eedc:	20013b71 	.word	0x20013b71
 800eee0:	0800ee7d 	.word	0x0800ee7d

0800eee4 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800eee4:	b480      	push	{r7}
 800eee6:	b085      	sub	sp, #20
 800eee8:	af00      	add	r7, sp, #0
 800eeea:	60f8      	str	r0, [r7, #12]
 800eeec:	60b9      	str	r1, [r7, #8]
 800eeee:	4611      	mov	r1, r2
 800eef0:	461a      	mov	r2, r3
 800eef2:	460b      	mov	r3, r1
 800eef4:	80fb      	strh	r3, [r7, #6]
 800eef6:	4613      	mov	r3, r2
 800eef8:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800eefa:	68fb      	ldr	r3, [r7, #12]
 800eefc:	2200      	movs	r2, #0
 800eefe:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800ef00:	68fb      	ldr	r3, [r7, #12]
 800ef02:	68ba      	ldr	r2, [r7, #8]
 800ef04:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800ef06:	68fb      	ldr	r3, [r7, #12]
 800ef08:	88fa      	ldrh	r2, [r7, #6]
 800ef0a:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800ef0c:	68fb      	ldr	r3, [r7, #12]
 800ef0e:	88ba      	ldrh	r2, [r7, #4]
 800ef10:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800ef12:	8b3b      	ldrh	r3, [r7, #24]
 800ef14:	b2da      	uxtb	r2, r3
 800ef16:	68fb      	ldr	r3, [r7, #12]
 800ef18:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800ef1a:	68fb      	ldr	r3, [r7, #12]
 800ef1c:	7f3a      	ldrb	r2, [r7, #28]
 800ef1e:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800ef20:	68fb      	ldr	r3, [r7, #12]
 800ef22:	2201      	movs	r2, #1
 800ef24:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800ef26:	68fb      	ldr	r3, [r7, #12]
 800ef28:	2200      	movs	r2, #0
 800ef2a:	73da      	strb	r2, [r3, #15]
}
 800ef2c:	bf00      	nop
 800ef2e:	3714      	adds	r7, #20
 800ef30:	46bd      	mov	sp, r7
 800ef32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef36:	4770      	bx	lr

0800ef38 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800ef38:	b580      	push	{r7, lr}
 800ef3a:	b08c      	sub	sp, #48	; 0x30
 800ef3c:	af02      	add	r7, sp, #8
 800ef3e:	4603      	mov	r3, r0
 800ef40:	71fb      	strb	r3, [r7, #7]
 800ef42:	460b      	mov	r3, r1
 800ef44:	80bb      	strh	r3, [r7, #4]
 800ef46:	4613      	mov	r3, r2
 800ef48:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800ef4a:	79fb      	ldrb	r3, [r7, #7]
 800ef4c:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800ef4e:	887b      	ldrh	r3, [r7, #2]
 800ef50:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800ef54:	f000 8082 	beq.w	800f05c <pbuf_alloc+0x124>
 800ef58:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800ef5c:	f300 80ca 	bgt.w	800f0f4 <pbuf_alloc+0x1bc>
 800ef60:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800ef64:	d010      	beq.n	800ef88 <pbuf_alloc+0x50>
 800ef66:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800ef6a:	f300 80c3 	bgt.w	800f0f4 <pbuf_alloc+0x1bc>
 800ef6e:	2b01      	cmp	r3, #1
 800ef70:	d002      	beq.n	800ef78 <pbuf_alloc+0x40>
 800ef72:	2b41      	cmp	r3, #65	; 0x41
 800ef74:	f040 80be 	bne.w	800f0f4 <pbuf_alloc+0x1bc>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800ef78:	887a      	ldrh	r2, [r7, #2]
 800ef7a:	88bb      	ldrh	r3, [r7, #4]
 800ef7c:	4619      	mov	r1, r3
 800ef7e:	2000      	movs	r0, #0
 800ef80:	f000 f8d4 	bl	800f12c <pbuf_alloc_reference>
 800ef84:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800ef86:	e0bf      	b.n	800f108 <pbuf_alloc+0x1d0>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800ef88:	2300      	movs	r3, #0
 800ef8a:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800ef8c:	2300      	movs	r3, #0
 800ef8e:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800ef90:	88bb      	ldrh	r3, [r7, #4]
 800ef92:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800ef94:	200c      	movs	r0, #12
 800ef96:	f7ff fbc3 	bl	800e720 <memp_malloc>
 800ef9a:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800ef9c:	693b      	ldr	r3, [r7, #16]
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	d109      	bne.n	800efb6 <pbuf_alloc+0x7e>
          PBUF_POOL_IS_EMPTY();
 800efa2:	f7ff ff75 	bl	800ee90 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800efa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efa8:	2b00      	cmp	r3, #0
 800efaa:	d002      	beq.n	800efb2 <pbuf_alloc+0x7a>
            pbuf_free(p);
 800efac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800efae:	f000 faab 	bl	800f508 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800efb2:	2300      	movs	r3, #0
 800efb4:	e0a9      	b.n	800f10a <pbuf_alloc+0x1d2>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800efb6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800efb8:	3303      	adds	r3, #3
 800efba:	b29b      	uxth	r3, r3
 800efbc:	f023 0303 	bic.w	r3, r3, #3
 800efc0:	b29b      	uxth	r3, r3
 800efc2:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 800efc6:	3304      	adds	r3, #4
 800efc8:	b29b      	uxth	r3, r3
 800efca:	8b7a      	ldrh	r2, [r7, #26]
 800efcc:	4293      	cmp	r3, r2
 800efce:	bf28      	it	cs
 800efd0:	4613      	movcs	r3, r2
 800efd2:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800efd4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800efd6:	3310      	adds	r3, #16
 800efd8:	693a      	ldr	r2, [r7, #16]
 800efda:	4413      	add	r3, r2
 800efdc:	3303      	adds	r3, #3
 800efde:	f023 0303 	bic.w	r3, r3, #3
 800efe2:	4618      	mov	r0, r3
 800efe4:	89f9      	ldrh	r1, [r7, #14]
 800efe6:	8b7a      	ldrh	r2, [r7, #26]
 800efe8:	2300      	movs	r3, #0
 800efea:	9301      	str	r3, [sp, #4]
 800efec:	887b      	ldrh	r3, [r7, #2]
 800efee:	9300      	str	r3, [sp, #0]
 800eff0:	460b      	mov	r3, r1
 800eff2:	4601      	mov	r1, r0
 800eff4:	6938      	ldr	r0, [r7, #16]
 800eff6:	f7ff ff75 	bl	800eee4 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800effa:	693b      	ldr	r3, [r7, #16]
 800effc:	685b      	ldr	r3, [r3, #4]
 800effe:	f003 0303 	and.w	r3, r3, #3
 800f002:	2b00      	cmp	r3, #0
 800f004:	d006      	beq.n	800f014 <pbuf_alloc+0xdc>
 800f006:	4b43      	ldr	r3, [pc, #268]	; (800f114 <pbuf_alloc+0x1dc>)
 800f008:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f00c:	4942      	ldr	r1, [pc, #264]	; (800f118 <pbuf_alloc+0x1e0>)
 800f00e:	4843      	ldr	r0, [pc, #268]	; (800f11c <pbuf_alloc+0x1e4>)
 800f010:	f00c fa36 	bl	801b480 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800f014:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f016:	3303      	adds	r3, #3
 800f018:	f023 0303 	bic.w	r3, r3, #3
 800f01c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800f020:	4293      	cmp	r3, r2
 800f022:	d106      	bne.n	800f032 <pbuf_alloc+0xfa>
 800f024:	4b3b      	ldr	r3, [pc, #236]	; (800f114 <pbuf_alloc+0x1dc>)
 800f026:	f44f 7281 	mov.w	r2, #258	; 0x102
 800f02a:	493d      	ldr	r1, [pc, #244]	; (800f120 <pbuf_alloc+0x1e8>)
 800f02c:	483b      	ldr	r0, [pc, #236]	; (800f11c <pbuf_alloc+0x1e4>)
 800f02e:	f00c fa27 	bl	801b480 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800f032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f034:	2b00      	cmp	r3, #0
 800f036:	d102      	bne.n	800f03e <pbuf_alloc+0x106>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800f038:	693b      	ldr	r3, [r7, #16]
 800f03a:	627b      	str	r3, [r7, #36]	; 0x24
 800f03c:	e002      	b.n	800f044 <pbuf_alloc+0x10c>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800f03e:	69fb      	ldr	r3, [r7, #28]
 800f040:	693a      	ldr	r2, [r7, #16]
 800f042:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800f044:	693b      	ldr	r3, [r7, #16]
 800f046:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800f048:	8b7a      	ldrh	r2, [r7, #26]
 800f04a:	89fb      	ldrh	r3, [r7, #14]
 800f04c:	1ad3      	subs	r3, r2, r3
 800f04e:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800f050:	2300      	movs	r3, #0
 800f052:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800f054:	8b7b      	ldrh	r3, [r7, #26]
 800f056:	2b00      	cmp	r3, #0
 800f058:	d19c      	bne.n	800ef94 <pbuf_alloc+0x5c>
      break;
 800f05a:	e055      	b.n	800f108 <pbuf_alloc+0x1d0>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800f05c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f05e:	3303      	adds	r3, #3
 800f060:	b29b      	uxth	r3, r3
 800f062:	f023 0303 	bic.w	r3, r3, #3
 800f066:	b29a      	uxth	r2, r3
 800f068:	88bb      	ldrh	r3, [r7, #4]
 800f06a:	3303      	adds	r3, #3
 800f06c:	b29b      	uxth	r3, r3
 800f06e:	f023 0303 	bic.w	r3, r3, #3
 800f072:	b29b      	uxth	r3, r3
 800f074:	4413      	add	r3, r2
 800f076:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800f078:	8b3b      	ldrh	r3, [r7, #24]
 800f07a:	3310      	adds	r3, #16
 800f07c:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800f07e:	8b3a      	ldrh	r2, [r7, #24]
 800f080:	88bb      	ldrh	r3, [r7, #4]
 800f082:	3303      	adds	r3, #3
 800f084:	f023 0303 	bic.w	r3, r3, #3
 800f088:	429a      	cmp	r2, r3
 800f08a:	d306      	bcc.n	800f09a <pbuf_alloc+0x162>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800f08c:	8afa      	ldrh	r2, [r7, #22]
 800f08e:	88bb      	ldrh	r3, [r7, #4]
 800f090:	3303      	adds	r3, #3
 800f092:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800f096:	429a      	cmp	r2, r3
 800f098:	d201      	bcs.n	800f09e <pbuf_alloc+0x166>
        return NULL;
 800f09a:	2300      	movs	r3, #0
 800f09c:	e035      	b.n	800f10a <pbuf_alloc+0x1d2>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800f09e:	8afb      	ldrh	r3, [r7, #22]
 800f0a0:	4618      	mov	r0, r3
 800f0a2:	f7ff f9bb 	bl	800e41c <mem_malloc>
 800f0a6:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800f0a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0aa:	2b00      	cmp	r3, #0
 800f0ac:	d101      	bne.n	800f0b2 <pbuf_alloc+0x17a>
        return NULL;
 800f0ae:	2300      	movs	r3, #0
 800f0b0:	e02b      	b.n	800f10a <pbuf_alloc+0x1d2>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800f0b2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f0b4:	3310      	adds	r3, #16
 800f0b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f0b8:	4413      	add	r3, r2
 800f0ba:	3303      	adds	r3, #3
 800f0bc:	f023 0303 	bic.w	r3, r3, #3
 800f0c0:	4618      	mov	r0, r3
 800f0c2:	88b9      	ldrh	r1, [r7, #4]
 800f0c4:	88ba      	ldrh	r2, [r7, #4]
 800f0c6:	2300      	movs	r3, #0
 800f0c8:	9301      	str	r3, [sp, #4]
 800f0ca:	887b      	ldrh	r3, [r7, #2]
 800f0cc:	9300      	str	r3, [sp, #0]
 800f0ce:	460b      	mov	r3, r1
 800f0d0:	4601      	mov	r1, r0
 800f0d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f0d4:	f7ff ff06 	bl	800eee4 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800f0d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0da:	685b      	ldr	r3, [r3, #4]
 800f0dc:	f003 0303 	and.w	r3, r3, #3
 800f0e0:	2b00      	cmp	r3, #0
 800f0e2:	d010      	beq.n	800f106 <pbuf_alloc+0x1ce>
 800f0e4:	4b0b      	ldr	r3, [pc, #44]	; (800f114 <pbuf_alloc+0x1dc>)
 800f0e6:	f44f 7291 	mov.w	r2, #290	; 0x122
 800f0ea:	490e      	ldr	r1, [pc, #56]	; (800f124 <pbuf_alloc+0x1ec>)
 800f0ec:	480b      	ldr	r0, [pc, #44]	; (800f11c <pbuf_alloc+0x1e4>)
 800f0ee:	f00c f9c7 	bl	801b480 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800f0f2:	e008      	b.n	800f106 <pbuf_alloc+0x1ce>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800f0f4:	4b07      	ldr	r3, [pc, #28]	; (800f114 <pbuf_alloc+0x1dc>)
 800f0f6:	f240 1227 	movw	r2, #295	; 0x127
 800f0fa:	490b      	ldr	r1, [pc, #44]	; (800f128 <pbuf_alloc+0x1f0>)
 800f0fc:	4807      	ldr	r0, [pc, #28]	; (800f11c <pbuf_alloc+0x1e4>)
 800f0fe:	f00c f9bf 	bl	801b480 <iprintf>
      return NULL;
 800f102:	2300      	movs	r3, #0
 800f104:	e001      	b.n	800f10a <pbuf_alloc+0x1d2>
      break;
 800f106:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800f108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f10a:	4618      	mov	r0, r3
 800f10c:	3728      	adds	r7, #40	; 0x28
 800f10e:	46bd      	mov	sp, r7
 800f110:	bd80      	pop	{r7, pc}
 800f112:	bf00      	nop
 800f114:	0801e90c 	.word	0x0801e90c
 800f118:	0801e93c 	.word	0x0801e93c
 800f11c:	0801e96c 	.word	0x0801e96c
 800f120:	0801e994 	.word	0x0801e994
 800f124:	0801e9c8 	.word	0x0801e9c8
 800f128:	0801e9f4 	.word	0x0801e9f4

0800f12c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800f12c:	b580      	push	{r7, lr}
 800f12e:	b086      	sub	sp, #24
 800f130:	af02      	add	r7, sp, #8
 800f132:	6078      	str	r0, [r7, #4]
 800f134:	460b      	mov	r3, r1
 800f136:	807b      	strh	r3, [r7, #2]
 800f138:	4613      	mov	r3, r2
 800f13a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800f13c:	883b      	ldrh	r3, [r7, #0]
 800f13e:	2b41      	cmp	r3, #65	; 0x41
 800f140:	d009      	beq.n	800f156 <pbuf_alloc_reference+0x2a>
 800f142:	883b      	ldrh	r3, [r7, #0]
 800f144:	2b01      	cmp	r3, #1
 800f146:	d006      	beq.n	800f156 <pbuf_alloc_reference+0x2a>
 800f148:	4b0f      	ldr	r3, [pc, #60]	; (800f188 <pbuf_alloc_reference+0x5c>)
 800f14a:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800f14e:	490f      	ldr	r1, [pc, #60]	; (800f18c <pbuf_alloc_reference+0x60>)
 800f150:	480f      	ldr	r0, [pc, #60]	; (800f190 <pbuf_alloc_reference+0x64>)
 800f152:	f00c f995 	bl	801b480 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800f156:	200b      	movs	r0, #11
 800f158:	f7ff fae2 	bl	800e720 <memp_malloc>
 800f15c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800f15e:	68fb      	ldr	r3, [r7, #12]
 800f160:	2b00      	cmp	r3, #0
 800f162:	d101      	bne.n	800f168 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800f164:	2300      	movs	r3, #0
 800f166:	e00b      	b.n	800f180 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800f168:	8879      	ldrh	r1, [r7, #2]
 800f16a:	887a      	ldrh	r2, [r7, #2]
 800f16c:	2300      	movs	r3, #0
 800f16e:	9301      	str	r3, [sp, #4]
 800f170:	883b      	ldrh	r3, [r7, #0]
 800f172:	9300      	str	r3, [sp, #0]
 800f174:	460b      	mov	r3, r1
 800f176:	6879      	ldr	r1, [r7, #4]
 800f178:	68f8      	ldr	r0, [r7, #12]
 800f17a:	f7ff feb3 	bl	800eee4 <pbuf_init_alloced_pbuf>
  return p;
 800f17e:	68fb      	ldr	r3, [r7, #12]
}
 800f180:	4618      	mov	r0, r3
 800f182:	3710      	adds	r7, #16
 800f184:	46bd      	mov	sp, r7
 800f186:	bd80      	pop	{r7, pc}
 800f188:	0801e90c 	.word	0x0801e90c
 800f18c:	0801ea10 	.word	0x0801ea10
 800f190:	0801e96c 	.word	0x0801e96c

0800f194 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800f194:	b580      	push	{r7, lr}
 800f196:	b088      	sub	sp, #32
 800f198:	af02      	add	r7, sp, #8
 800f19a:	607b      	str	r3, [r7, #4]
 800f19c:	4603      	mov	r3, r0
 800f19e:	73fb      	strb	r3, [r7, #15]
 800f1a0:	460b      	mov	r3, r1
 800f1a2:	81bb      	strh	r3, [r7, #12]
 800f1a4:	4613      	mov	r3, r2
 800f1a6:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800f1a8:	7bfb      	ldrb	r3, [r7, #15]
 800f1aa:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800f1ac:	8a7b      	ldrh	r3, [r7, #18]
 800f1ae:	3303      	adds	r3, #3
 800f1b0:	f023 0203 	bic.w	r2, r3, #3
 800f1b4:	89bb      	ldrh	r3, [r7, #12]
 800f1b6:	441a      	add	r2, r3
 800f1b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f1ba:	429a      	cmp	r2, r3
 800f1bc:	d901      	bls.n	800f1c2 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800f1be:	2300      	movs	r3, #0
 800f1c0:	e018      	b.n	800f1f4 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800f1c2:	6a3b      	ldr	r3, [r7, #32]
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	d007      	beq.n	800f1d8 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800f1c8:	8a7b      	ldrh	r3, [r7, #18]
 800f1ca:	3303      	adds	r3, #3
 800f1cc:	f023 0303 	bic.w	r3, r3, #3
 800f1d0:	6a3a      	ldr	r2, [r7, #32]
 800f1d2:	4413      	add	r3, r2
 800f1d4:	617b      	str	r3, [r7, #20]
 800f1d6:	e001      	b.n	800f1dc <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800f1d8:	2300      	movs	r3, #0
 800f1da:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800f1dc:	6878      	ldr	r0, [r7, #4]
 800f1de:	89b9      	ldrh	r1, [r7, #12]
 800f1e0:	89ba      	ldrh	r2, [r7, #12]
 800f1e2:	2302      	movs	r3, #2
 800f1e4:	9301      	str	r3, [sp, #4]
 800f1e6:	897b      	ldrh	r3, [r7, #10]
 800f1e8:	9300      	str	r3, [sp, #0]
 800f1ea:	460b      	mov	r3, r1
 800f1ec:	6979      	ldr	r1, [r7, #20]
 800f1ee:	f7ff fe79 	bl	800eee4 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800f1f2:	687b      	ldr	r3, [r7, #4]
}
 800f1f4:	4618      	mov	r0, r3
 800f1f6:	3718      	adds	r7, #24
 800f1f8:	46bd      	mov	sp, r7
 800f1fa:	bd80      	pop	{r7, pc}

0800f1fc <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800f1fc:	b580      	push	{r7, lr}
 800f1fe:	b084      	sub	sp, #16
 800f200:	af00      	add	r7, sp, #0
 800f202:	6078      	str	r0, [r7, #4]
 800f204:	460b      	mov	r3, r1
 800f206:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	d106      	bne.n	800f21c <pbuf_realloc+0x20>
 800f20e:	4b3a      	ldr	r3, [pc, #232]	; (800f2f8 <pbuf_realloc+0xfc>)
 800f210:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800f214:	4939      	ldr	r1, [pc, #228]	; (800f2fc <pbuf_realloc+0x100>)
 800f216:	483a      	ldr	r0, [pc, #232]	; (800f300 <pbuf_realloc+0x104>)
 800f218:	f00c f932 	bl	801b480 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	891b      	ldrh	r3, [r3, #8]
 800f220:	887a      	ldrh	r2, [r7, #2]
 800f222:	429a      	cmp	r2, r3
 800f224:	d263      	bcs.n	800f2ee <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	891a      	ldrh	r2, [r3, #8]
 800f22a:	887b      	ldrh	r3, [r7, #2]
 800f22c:	1ad3      	subs	r3, r2, r3
 800f22e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800f230:	887b      	ldrh	r3, [r7, #2]
 800f232:	817b      	strh	r3, [r7, #10]
  q = p;
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800f238:	e018      	b.n	800f26c <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800f23a:	68fb      	ldr	r3, [r7, #12]
 800f23c:	895b      	ldrh	r3, [r3, #10]
 800f23e:	897a      	ldrh	r2, [r7, #10]
 800f240:	1ad3      	subs	r3, r2, r3
 800f242:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800f244:	68fb      	ldr	r3, [r7, #12]
 800f246:	891a      	ldrh	r2, [r3, #8]
 800f248:	893b      	ldrh	r3, [r7, #8]
 800f24a:	1ad3      	subs	r3, r2, r3
 800f24c:	b29a      	uxth	r2, r3
 800f24e:	68fb      	ldr	r3, [r7, #12]
 800f250:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800f252:	68fb      	ldr	r3, [r7, #12]
 800f254:	681b      	ldr	r3, [r3, #0]
 800f256:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800f258:	68fb      	ldr	r3, [r7, #12]
 800f25a:	2b00      	cmp	r3, #0
 800f25c:	d106      	bne.n	800f26c <pbuf_realloc+0x70>
 800f25e:	4b26      	ldr	r3, [pc, #152]	; (800f2f8 <pbuf_realloc+0xfc>)
 800f260:	f240 12af 	movw	r2, #431	; 0x1af
 800f264:	4927      	ldr	r1, [pc, #156]	; (800f304 <pbuf_realloc+0x108>)
 800f266:	4826      	ldr	r0, [pc, #152]	; (800f300 <pbuf_realloc+0x104>)
 800f268:	f00c f90a 	bl	801b480 <iprintf>
  while (rem_len > q->len) {
 800f26c:	68fb      	ldr	r3, [r7, #12]
 800f26e:	895b      	ldrh	r3, [r3, #10]
 800f270:	897a      	ldrh	r2, [r7, #10]
 800f272:	429a      	cmp	r2, r3
 800f274:	d8e1      	bhi.n	800f23a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800f276:	68fb      	ldr	r3, [r7, #12]
 800f278:	7b1b      	ldrb	r3, [r3, #12]
 800f27a:	f003 030f 	and.w	r3, r3, #15
 800f27e:	2b00      	cmp	r3, #0
 800f280:	d121      	bne.n	800f2c6 <pbuf_realloc+0xca>
 800f282:	68fb      	ldr	r3, [r7, #12]
 800f284:	895b      	ldrh	r3, [r3, #10]
 800f286:	897a      	ldrh	r2, [r7, #10]
 800f288:	429a      	cmp	r2, r3
 800f28a:	d01c      	beq.n	800f2c6 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800f28c:	68fb      	ldr	r3, [r7, #12]
 800f28e:	7b5b      	ldrb	r3, [r3, #13]
 800f290:	f003 0302 	and.w	r3, r3, #2
 800f294:	2b00      	cmp	r3, #0
 800f296:	d116      	bne.n	800f2c6 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800f298:	68fb      	ldr	r3, [r7, #12]
 800f29a:	685a      	ldr	r2, [r3, #4]
 800f29c:	68fb      	ldr	r3, [r7, #12]
 800f29e:	1ad3      	subs	r3, r2, r3
 800f2a0:	b29a      	uxth	r2, r3
 800f2a2:	897b      	ldrh	r3, [r7, #10]
 800f2a4:	4413      	add	r3, r2
 800f2a6:	b29b      	uxth	r3, r3
 800f2a8:	4619      	mov	r1, r3
 800f2aa:	68f8      	ldr	r0, [r7, #12]
 800f2ac:	f7fe ffac 	bl	800e208 <mem_trim>
 800f2b0:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800f2b2:	68fb      	ldr	r3, [r7, #12]
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	d106      	bne.n	800f2c6 <pbuf_realloc+0xca>
 800f2b8:	4b0f      	ldr	r3, [pc, #60]	; (800f2f8 <pbuf_realloc+0xfc>)
 800f2ba:	f240 12bd 	movw	r2, #445	; 0x1bd
 800f2be:	4912      	ldr	r1, [pc, #72]	; (800f308 <pbuf_realloc+0x10c>)
 800f2c0:	480f      	ldr	r0, [pc, #60]	; (800f300 <pbuf_realloc+0x104>)
 800f2c2:	f00c f8dd 	bl	801b480 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800f2c6:	68fb      	ldr	r3, [r7, #12]
 800f2c8:	897a      	ldrh	r2, [r7, #10]
 800f2ca:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800f2cc:	68fb      	ldr	r3, [r7, #12]
 800f2ce:	895a      	ldrh	r2, [r3, #10]
 800f2d0:	68fb      	ldr	r3, [r7, #12]
 800f2d2:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800f2d4:	68fb      	ldr	r3, [r7, #12]
 800f2d6:	681b      	ldr	r3, [r3, #0]
 800f2d8:	2b00      	cmp	r3, #0
 800f2da:	d004      	beq.n	800f2e6 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800f2dc:	68fb      	ldr	r3, [r7, #12]
 800f2de:	681b      	ldr	r3, [r3, #0]
 800f2e0:	4618      	mov	r0, r3
 800f2e2:	f000 f911 	bl	800f508 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800f2e6:	68fb      	ldr	r3, [r7, #12]
 800f2e8:	2200      	movs	r2, #0
 800f2ea:	601a      	str	r2, [r3, #0]
 800f2ec:	e000      	b.n	800f2f0 <pbuf_realloc+0xf4>
    return;
 800f2ee:	bf00      	nop

}
 800f2f0:	3710      	adds	r7, #16
 800f2f2:	46bd      	mov	sp, r7
 800f2f4:	bd80      	pop	{r7, pc}
 800f2f6:	bf00      	nop
 800f2f8:	0801e90c 	.word	0x0801e90c
 800f2fc:	0801ea24 	.word	0x0801ea24
 800f300:	0801e96c 	.word	0x0801e96c
 800f304:	0801ea3c 	.word	0x0801ea3c
 800f308:	0801ea54 	.word	0x0801ea54

0800f30c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800f30c:	b580      	push	{r7, lr}
 800f30e:	b086      	sub	sp, #24
 800f310:	af00      	add	r7, sp, #0
 800f312:	60f8      	str	r0, [r7, #12]
 800f314:	60b9      	str	r1, [r7, #8]
 800f316:	4613      	mov	r3, r2
 800f318:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800f31a:	68fb      	ldr	r3, [r7, #12]
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	d106      	bne.n	800f32e <pbuf_add_header_impl+0x22>
 800f320:	4b2b      	ldr	r3, [pc, #172]	; (800f3d0 <pbuf_add_header_impl+0xc4>)
 800f322:	f240 12df 	movw	r2, #479	; 0x1df
 800f326:	492b      	ldr	r1, [pc, #172]	; (800f3d4 <pbuf_add_header_impl+0xc8>)
 800f328:	482b      	ldr	r0, [pc, #172]	; (800f3d8 <pbuf_add_header_impl+0xcc>)
 800f32a:	f00c f8a9 	bl	801b480 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800f32e:	68fb      	ldr	r3, [r7, #12]
 800f330:	2b00      	cmp	r3, #0
 800f332:	d003      	beq.n	800f33c <pbuf_add_header_impl+0x30>
 800f334:	68bb      	ldr	r3, [r7, #8]
 800f336:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f33a:	d301      	bcc.n	800f340 <pbuf_add_header_impl+0x34>
    return 1;
 800f33c:	2301      	movs	r3, #1
 800f33e:	e043      	b.n	800f3c8 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800f340:	68bb      	ldr	r3, [r7, #8]
 800f342:	2b00      	cmp	r3, #0
 800f344:	d101      	bne.n	800f34a <pbuf_add_header_impl+0x3e>
    return 0;
 800f346:	2300      	movs	r3, #0
 800f348:	e03e      	b.n	800f3c8 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800f34a:	68bb      	ldr	r3, [r7, #8]
 800f34c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800f34e:	68fb      	ldr	r3, [r7, #12]
 800f350:	891a      	ldrh	r2, [r3, #8]
 800f352:	8a7b      	ldrh	r3, [r7, #18]
 800f354:	4413      	add	r3, r2
 800f356:	b29b      	uxth	r3, r3
 800f358:	8a7a      	ldrh	r2, [r7, #18]
 800f35a:	429a      	cmp	r2, r3
 800f35c:	d901      	bls.n	800f362 <pbuf_add_header_impl+0x56>
    return 1;
 800f35e:	2301      	movs	r3, #1
 800f360:	e032      	b.n	800f3c8 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800f362:	68fb      	ldr	r3, [r7, #12]
 800f364:	7b1b      	ldrb	r3, [r3, #12]
 800f366:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800f368:	8a3b      	ldrh	r3, [r7, #16]
 800f36a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f36e:	2b00      	cmp	r3, #0
 800f370:	d00c      	beq.n	800f38c <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800f372:	68fb      	ldr	r3, [r7, #12]
 800f374:	685a      	ldr	r2, [r3, #4]
 800f376:	68bb      	ldr	r3, [r7, #8]
 800f378:	425b      	negs	r3, r3
 800f37a:	4413      	add	r3, r2
 800f37c:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800f37e:	68fb      	ldr	r3, [r7, #12]
 800f380:	3310      	adds	r3, #16
 800f382:	697a      	ldr	r2, [r7, #20]
 800f384:	429a      	cmp	r2, r3
 800f386:	d20d      	bcs.n	800f3a4 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800f388:	2301      	movs	r3, #1
 800f38a:	e01d      	b.n	800f3c8 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800f38c:	79fb      	ldrb	r3, [r7, #7]
 800f38e:	2b00      	cmp	r3, #0
 800f390:	d006      	beq.n	800f3a0 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800f392:	68fb      	ldr	r3, [r7, #12]
 800f394:	685a      	ldr	r2, [r3, #4]
 800f396:	68bb      	ldr	r3, [r7, #8]
 800f398:	425b      	negs	r3, r3
 800f39a:	4413      	add	r3, r2
 800f39c:	617b      	str	r3, [r7, #20]
 800f39e:	e001      	b.n	800f3a4 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800f3a0:	2301      	movs	r3, #1
 800f3a2:	e011      	b.n	800f3c8 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800f3a4:	68fb      	ldr	r3, [r7, #12]
 800f3a6:	697a      	ldr	r2, [r7, #20]
 800f3a8:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800f3aa:	68fb      	ldr	r3, [r7, #12]
 800f3ac:	895a      	ldrh	r2, [r3, #10]
 800f3ae:	8a7b      	ldrh	r3, [r7, #18]
 800f3b0:	4413      	add	r3, r2
 800f3b2:	b29a      	uxth	r2, r3
 800f3b4:	68fb      	ldr	r3, [r7, #12]
 800f3b6:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800f3b8:	68fb      	ldr	r3, [r7, #12]
 800f3ba:	891a      	ldrh	r2, [r3, #8]
 800f3bc:	8a7b      	ldrh	r3, [r7, #18]
 800f3be:	4413      	add	r3, r2
 800f3c0:	b29a      	uxth	r2, r3
 800f3c2:	68fb      	ldr	r3, [r7, #12]
 800f3c4:	811a      	strh	r2, [r3, #8]


  return 0;
 800f3c6:	2300      	movs	r3, #0
}
 800f3c8:	4618      	mov	r0, r3
 800f3ca:	3718      	adds	r7, #24
 800f3cc:	46bd      	mov	sp, r7
 800f3ce:	bd80      	pop	{r7, pc}
 800f3d0:	0801e90c 	.word	0x0801e90c
 800f3d4:	0801ea70 	.word	0x0801ea70
 800f3d8:	0801e96c 	.word	0x0801e96c

0800f3dc <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800f3dc:	b580      	push	{r7, lr}
 800f3de:	b082      	sub	sp, #8
 800f3e0:	af00      	add	r7, sp, #0
 800f3e2:	6078      	str	r0, [r7, #4]
 800f3e4:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800f3e6:	2200      	movs	r2, #0
 800f3e8:	6839      	ldr	r1, [r7, #0]
 800f3ea:	6878      	ldr	r0, [r7, #4]
 800f3ec:	f7ff ff8e 	bl	800f30c <pbuf_add_header_impl>
 800f3f0:	4603      	mov	r3, r0
}
 800f3f2:	4618      	mov	r0, r3
 800f3f4:	3708      	adds	r7, #8
 800f3f6:	46bd      	mov	sp, r7
 800f3f8:	bd80      	pop	{r7, pc}
	...

0800f3fc <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800f3fc:	b580      	push	{r7, lr}
 800f3fe:	b084      	sub	sp, #16
 800f400:	af00      	add	r7, sp, #0
 800f402:	6078      	str	r0, [r7, #4]
 800f404:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	2b00      	cmp	r3, #0
 800f40a:	d106      	bne.n	800f41a <pbuf_remove_header+0x1e>
 800f40c:	4b20      	ldr	r3, [pc, #128]	; (800f490 <pbuf_remove_header+0x94>)
 800f40e:	f240 224b 	movw	r2, #587	; 0x24b
 800f412:	4920      	ldr	r1, [pc, #128]	; (800f494 <pbuf_remove_header+0x98>)
 800f414:	4820      	ldr	r0, [pc, #128]	; (800f498 <pbuf_remove_header+0x9c>)
 800f416:	f00c f833 	bl	801b480 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	d003      	beq.n	800f428 <pbuf_remove_header+0x2c>
 800f420:	683b      	ldr	r3, [r7, #0]
 800f422:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f426:	d301      	bcc.n	800f42c <pbuf_remove_header+0x30>
    return 1;
 800f428:	2301      	movs	r3, #1
 800f42a:	e02c      	b.n	800f486 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800f42c:	683b      	ldr	r3, [r7, #0]
 800f42e:	2b00      	cmp	r3, #0
 800f430:	d101      	bne.n	800f436 <pbuf_remove_header+0x3a>
    return 0;
 800f432:	2300      	movs	r3, #0
 800f434:	e027      	b.n	800f486 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800f436:	683b      	ldr	r3, [r7, #0]
 800f438:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	895b      	ldrh	r3, [r3, #10]
 800f43e:	89fa      	ldrh	r2, [r7, #14]
 800f440:	429a      	cmp	r2, r3
 800f442:	d908      	bls.n	800f456 <pbuf_remove_header+0x5a>
 800f444:	4b12      	ldr	r3, [pc, #72]	; (800f490 <pbuf_remove_header+0x94>)
 800f446:	f240 2255 	movw	r2, #597	; 0x255
 800f44a:	4914      	ldr	r1, [pc, #80]	; (800f49c <pbuf_remove_header+0xa0>)
 800f44c:	4812      	ldr	r0, [pc, #72]	; (800f498 <pbuf_remove_header+0x9c>)
 800f44e:	f00c f817 	bl	801b480 <iprintf>
 800f452:	2301      	movs	r3, #1
 800f454:	e017      	b.n	800f486 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	685b      	ldr	r3, [r3, #4]
 800f45a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	685a      	ldr	r2, [r3, #4]
 800f460:	683b      	ldr	r3, [r7, #0]
 800f462:	441a      	add	r2, r3
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	895a      	ldrh	r2, [r3, #10]
 800f46c:	89fb      	ldrh	r3, [r7, #14]
 800f46e:	1ad3      	subs	r3, r2, r3
 800f470:	b29a      	uxth	r2, r3
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	891a      	ldrh	r2, [r3, #8]
 800f47a:	89fb      	ldrh	r3, [r7, #14]
 800f47c:	1ad3      	subs	r3, r2, r3
 800f47e:	b29a      	uxth	r2, r3
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800f484:	2300      	movs	r3, #0
}
 800f486:	4618      	mov	r0, r3
 800f488:	3710      	adds	r7, #16
 800f48a:	46bd      	mov	sp, r7
 800f48c:	bd80      	pop	{r7, pc}
 800f48e:	bf00      	nop
 800f490:	0801e90c 	.word	0x0801e90c
 800f494:	0801ea70 	.word	0x0801ea70
 800f498:	0801e96c 	.word	0x0801e96c
 800f49c:	0801ea7c 	.word	0x0801ea7c

0800f4a0 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800f4a0:	b580      	push	{r7, lr}
 800f4a2:	b082      	sub	sp, #8
 800f4a4:	af00      	add	r7, sp, #0
 800f4a6:	6078      	str	r0, [r7, #4]
 800f4a8:	460b      	mov	r3, r1
 800f4aa:	807b      	strh	r3, [r7, #2]
 800f4ac:	4613      	mov	r3, r2
 800f4ae:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800f4b0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f4b4:	2b00      	cmp	r3, #0
 800f4b6:	da08      	bge.n	800f4ca <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800f4b8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f4bc:	425b      	negs	r3, r3
 800f4be:	4619      	mov	r1, r3
 800f4c0:	6878      	ldr	r0, [r7, #4]
 800f4c2:	f7ff ff9b 	bl	800f3fc <pbuf_remove_header>
 800f4c6:	4603      	mov	r3, r0
 800f4c8:	e007      	b.n	800f4da <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800f4ca:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f4ce:	787a      	ldrb	r2, [r7, #1]
 800f4d0:	4619      	mov	r1, r3
 800f4d2:	6878      	ldr	r0, [r7, #4]
 800f4d4:	f7ff ff1a 	bl	800f30c <pbuf_add_header_impl>
 800f4d8:	4603      	mov	r3, r0
  }
}
 800f4da:	4618      	mov	r0, r3
 800f4dc:	3708      	adds	r7, #8
 800f4de:	46bd      	mov	sp, r7
 800f4e0:	bd80      	pop	{r7, pc}

0800f4e2 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800f4e2:	b580      	push	{r7, lr}
 800f4e4:	b082      	sub	sp, #8
 800f4e6:	af00      	add	r7, sp, #0
 800f4e8:	6078      	str	r0, [r7, #4]
 800f4ea:	460b      	mov	r3, r1
 800f4ec:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800f4ee:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f4f2:	2201      	movs	r2, #1
 800f4f4:	4619      	mov	r1, r3
 800f4f6:	6878      	ldr	r0, [r7, #4]
 800f4f8:	f7ff ffd2 	bl	800f4a0 <pbuf_header_impl>
 800f4fc:	4603      	mov	r3, r0
}
 800f4fe:	4618      	mov	r0, r3
 800f500:	3708      	adds	r7, #8
 800f502:	46bd      	mov	sp, r7
 800f504:	bd80      	pop	{r7, pc}
	...

0800f508 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800f508:	b580      	push	{r7, lr}
 800f50a:	b088      	sub	sp, #32
 800f50c:	af00      	add	r7, sp, #0
 800f50e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	2b00      	cmp	r3, #0
 800f514:	d10b      	bne.n	800f52e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	2b00      	cmp	r3, #0
 800f51a:	d106      	bne.n	800f52a <pbuf_free+0x22>
 800f51c:	4b3b      	ldr	r3, [pc, #236]	; (800f60c <pbuf_free+0x104>)
 800f51e:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800f522:	493b      	ldr	r1, [pc, #236]	; (800f610 <pbuf_free+0x108>)
 800f524:	483b      	ldr	r0, [pc, #236]	; (800f614 <pbuf_free+0x10c>)
 800f526:	f00b ffab 	bl	801b480 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800f52a:	2300      	movs	r3, #0
 800f52c:	e069      	b.n	800f602 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800f52e:	2300      	movs	r3, #0
 800f530:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800f532:	e062      	b.n	800f5fa <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800f534:	f00b f9ce 	bl	801a8d4 <sys_arch_protect>
 800f538:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	7b9b      	ldrb	r3, [r3, #14]
 800f53e:	2b00      	cmp	r3, #0
 800f540:	d106      	bne.n	800f550 <pbuf_free+0x48>
 800f542:	4b32      	ldr	r3, [pc, #200]	; (800f60c <pbuf_free+0x104>)
 800f544:	f240 22f1 	movw	r2, #753	; 0x2f1
 800f548:	4933      	ldr	r1, [pc, #204]	; (800f618 <pbuf_free+0x110>)
 800f54a:	4832      	ldr	r0, [pc, #200]	; (800f614 <pbuf_free+0x10c>)
 800f54c:	f00b ff98 	bl	801b480 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	7b9b      	ldrb	r3, [r3, #14]
 800f554:	3b01      	subs	r3, #1
 800f556:	b2da      	uxtb	r2, r3
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	739a      	strb	r2, [r3, #14]
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	7b9b      	ldrb	r3, [r3, #14]
 800f560:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800f562:	69b8      	ldr	r0, [r7, #24]
 800f564:	f00b f9c4 	bl	801a8f0 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800f568:	7dfb      	ldrb	r3, [r7, #23]
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	d143      	bne.n	800f5f6 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	681b      	ldr	r3, [r3, #0]
 800f572:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	7b1b      	ldrb	r3, [r3, #12]
 800f578:	f003 030f 	and.w	r3, r3, #15
 800f57c:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	7b5b      	ldrb	r3, [r3, #13]
 800f582:	f003 0302 	and.w	r3, r3, #2
 800f586:	2b00      	cmp	r3, #0
 800f588:	d011      	beq.n	800f5ae <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800f58e:	68bb      	ldr	r3, [r7, #8]
 800f590:	691b      	ldr	r3, [r3, #16]
 800f592:	2b00      	cmp	r3, #0
 800f594:	d106      	bne.n	800f5a4 <pbuf_free+0x9c>
 800f596:	4b1d      	ldr	r3, [pc, #116]	; (800f60c <pbuf_free+0x104>)
 800f598:	f240 22ff 	movw	r2, #767	; 0x2ff
 800f59c:	491f      	ldr	r1, [pc, #124]	; (800f61c <pbuf_free+0x114>)
 800f59e:	481d      	ldr	r0, [pc, #116]	; (800f614 <pbuf_free+0x10c>)
 800f5a0:	f00b ff6e 	bl	801b480 <iprintf>
        pc->custom_free_function(p);
 800f5a4:	68bb      	ldr	r3, [r7, #8]
 800f5a6:	691b      	ldr	r3, [r3, #16]
 800f5a8:	6878      	ldr	r0, [r7, #4]
 800f5aa:	4798      	blx	r3
 800f5ac:	e01d      	b.n	800f5ea <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800f5ae:	7bfb      	ldrb	r3, [r7, #15]
 800f5b0:	2b02      	cmp	r3, #2
 800f5b2:	d104      	bne.n	800f5be <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800f5b4:	6879      	ldr	r1, [r7, #4]
 800f5b6:	200c      	movs	r0, #12
 800f5b8:	f7ff f904 	bl	800e7c4 <memp_free>
 800f5bc:	e015      	b.n	800f5ea <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800f5be:	7bfb      	ldrb	r3, [r7, #15]
 800f5c0:	2b01      	cmp	r3, #1
 800f5c2:	d104      	bne.n	800f5ce <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800f5c4:	6879      	ldr	r1, [r7, #4]
 800f5c6:	200b      	movs	r0, #11
 800f5c8:	f7ff f8fc 	bl	800e7c4 <memp_free>
 800f5cc:	e00d      	b.n	800f5ea <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800f5ce:	7bfb      	ldrb	r3, [r7, #15]
 800f5d0:	2b00      	cmp	r3, #0
 800f5d2:	d103      	bne.n	800f5dc <pbuf_free+0xd4>
          mem_free(p);
 800f5d4:	6878      	ldr	r0, [r7, #4]
 800f5d6:	f7fe fd87 	bl	800e0e8 <mem_free>
 800f5da:	e006      	b.n	800f5ea <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800f5dc:	4b0b      	ldr	r3, [pc, #44]	; (800f60c <pbuf_free+0x104>)
 800f5de:	f240 320f 	movw	r2, #783	; 0x30f
 800f5e2:	490f      	ldr	r1, [pc, #60]	; (800f620 <pbuf_free+0x118>)
 800f5e4:	480b      	ldr	r0, [pc, #44]	; (800f614 <pbuf_free+0x10c>)
 800f5e6:	f00b ff4b 	bl	801b480 <iprintf>
        }
      }
      count++;
 800f5ea:	7ffb      	ldrb	r3, [r7, #31]
 800f5ec:	3301      	adds	r3, #1
 800f5ee:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800f5f0:	693b      	ldr	r3, [r7, #16]
 800f5f2:	607b      	str	r3, [r7, #4]
 800f5f4:	e001      	b.n	800f5fa <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800f5f6:	2300      	movs	r3, #0
 800f5f8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	2b00      	cmp	r3, #0
 800f5fe:	d199      	bne.n	800f534 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800f600:	7ffb      	ldrb	r3, [r7, #31]
}
 800f602:	4618      	mov	r0, r3
 800f604:	3720      	adds	r7, #32
 800f606:	46bd      	mov	sp, r7
 800f608:	bd80      	pop	{r7, pc}
 800f60a:	bf00      	nop
 800f60c:	0801e90c 	.word	0x0801e90c
 800f610:	0801ea70 	.word	0x0801ea70
 800f614:	0801e96c 	.word	0x0801e96c
 800f618:	0801ea9c 	.word	0x0801ea9c
 800f61c:	0801eab4 	.word	0x0801eab4
 800f620:	0801ead8 	.word	0x0801ead8

0800f624 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800f624:	b480      	push	{r7}
 800f626:	b085      	sub	sp, #20
 800f628:	af00      	add	r7, sp, #0
 800f62a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800f62c:	2300      	movs	r3, #0
 800f62e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800f630:	e005      	b.n	800f63e <pbuf_clen+0x1a>
    ++len;
 800f632:	89fb      	ldrh	r3, [r7, #14]
 800f634:	3301      	adds	r3, #1
 800f636:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	681b      	ldr	r3, [r3, #0]
 800f63c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	2b00      	cmp	r3, #0
 800f642:	d1f6      	bne.n	800f632 <pbuf_clen+0xe>
  }
  return len;
 800f644:	89fb      	ldrh	r3, [r7, #14]
}
 800f646:	4618      	mov	r0, r3
 800f648:	3714      	adds	r7, #20
 800f64a:	46bd      	mov	sp, r7
 800f64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f650:	4770      	bx	lr
	...

0800f654 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800f654:	b580      	push	{r7, lr}
 800f656:	b084      	sub	sp, #16
 800f658:	af00      	add	r7, sp, #0
 800f65a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	2b00      	cmp	r3, #0
 800f660:	d016      	beq.n	800f690 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800f662:	f00b f937 	bl	801a8d4 <sys_arch_protect>
 800f666:	60f8      	str	r0, [r7, #12]
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	7b9b      	ldrb	r3, [r3, #14]
 800f66c:	3301      	adds	r3, #1
 800f66e:	b2da      	uxtb	r2, r3
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	739a      	strb	r2, [r3, #14]
 800f674:	68f8      	ldr	r0, [r7, #12]
 800f676:	f00b f93b 	bl	801a8f0 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	7b9b      	ldrb	r3, [r3, #14]
 800f67e:	2b00      	cmp	r3, #0
 800f680:	d106      	bne.n	800f690 <pbuf_ref+0x3c>
 800f682:	4b05      	ldr	r3, [pc, #20]	; (800f698 <pbuf_ref+0x44>)
 800f684:	f240 3242 	movw	r2, #834	; 0x342
 800f688:	4904      	ldr	r1, [pc, #16]	; (800f69c <pbuf_ref+0x48>)
 800f68a:	4805      	ldr	r0, [pc, #20]	; (800f6a0 <pbuf_ref+0x4c>)
 800f68c:	f00b fef8 	bl	801b480 <iprintf>
  }
}
 800f690:	bf00      	nop
 800f692:	3710      	adds	r7, #16
 800f694:	46bd      	mov	sp, r7
 800f696:	bd80      	pop	{r7, pc}
 800f698:	0801e90c 	.word	0x0801e90c
 800f69c:	0801eaec 	.word	0x0801eaec
 800f6a0:	0801e96c 	.word	0x0801e96c

0800f6a4 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800f6a4:	b580      	push	{r7, lr}
 800f6a6:	b084      	sub	sp, #16
 800f6a8:	af00      	add	r7, sp, #0
 800f6aa:	6078      	str	r0, [r7, #4]
 800f6ac:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	2b00      	cmp	r3, #0
 800f6b2:	d002      	beq.n	800f6ba <pbuf_cat+0x16>
 800f6b4:	683b      	ldr	r3, [r7, #0]
 800f6b6:	2b00      	cmp	r3, #0
 800f6b8:	d107      	bne.n	800f6ca <pbuf_cat+0x26>
 800f6ba:	4b20      	ldr	r3, [pc, #128]	; (800f73c <pbuf_cat+0x98>)
 800f6bc:	f240 3259 	movw	r2, #857	; 0x359
 800f6c0:	491f      	ldr	r1, [pc, #124]	; (800f740 <pbuf_cat+0x9c>)
 800f6c2:	4820      	ldr	r0, [pc, #128]	; (800f744 <pbuf_cat+0xa0>)
 800f6c4:	f00b fedc 	bl	801b480 <iprintf>
 800f6c8:	e034      	b.n	800f734 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	60fb      	str	r3, [r7, #12]
 800f6ce:	e00a      	b.n	800f6e6 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800f6d0:	68fb      	ldr	r3, [r7, #12]
 800f6d2:	891a      	ldrh	r2, [r3, #8]
 800f6d4:	683b      	ldr	r3, [r7, #0]
 800f6d6:	891b      	ldrh	r3, [r3, #8]
 800f6d8:	4413      	add	r3, r2
 800f6da:	b29a      	uxth	r2, r3
 800f6dc:	68fb      	ldr	r3, [r7, #12]
 800f6de:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800f6e0:	68fb      	ldr	r3, [r7, #12]
 800f6e2:	681b      	ldr	r3, [r3, #0]
 800f6e4:	60fb      	str	r3, [r7, #12]
 800f6e6:	68fb      	ldr	r3, [r7, #12]
 800f6e8:	681b      	ldr	r3, [r3, #0]
 800f6ea:	2b00      	cmp	r3, #0
 800f6ec:	d1f0      	bne.n	800f6d0 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800f6ee:	68fb      	ldr	r3, [r7, #12]
 800f6f0:	891a      	ldrh	r2, [r3, #8]
 800f6f2:	68fb      	ldr	r3, [r7, #12]
 800f6f4:	895b      	ldrh	r3, [r3, #10]
 800f6f6:	429a      	cmp	r2, r3
 800f6f8:	d006      	beq.n	800f708 <pbuf_cat+0x64>
 800f6fa:	4b10      	ldr	r3, [pc, #64]	; (800f73c <pbuf_cat+0x98>)
 800f6fc:	f240 3262 	movw	r2, #866	; 0x362
 800f700:	4911      	ldr	r1, [pc, #68]	; (800f748 <pbuf_cat+0xa4>)
 800f702:	4810      	ldr	r0, [pc, #64]	; (800f744 <pbuf_cat+0xa0>)
 800f704:	f00b febc 	bl	801b480 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800f708:	68fb      	ldr	r3, [r7, #12]
 800f70a:	681b      	ldr	r3, [r3, #0]
 800f70c:	2b00      	cmp	r3, #0
 800f70e:	d006      	beq.n	800f71e <pbuf_cat+0x7a>
 800f710:	4b0a      	ldr	r3, [pc, #40]	; (800f73c <pbuf_cat+0x98>)
 800f712:	f240 3263 	movw	r2, #867	; 0x363
 800f716:	490d      	ldr	r1, [pc, #52]	; (800f74c <pbuf_cat+0xa8>)
 800f718:	480a      	ldr	r0, [pc, #40]	; (800f744 <pbuf_cat+0xa0>)
 800f71a:	f00b feb1 	bl	801b480 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800f71e:	68fb      	ldr	r3, [r7, #12]
 800f720:	891a      	ldrh	r2, [r3, #8]
 800f722:	683b      	ldr	r3, [r7, #0]
 800f724:	891b      	ldrh	r3, [r3, #8]
 800f726:	4413      	add	r3, r2
 800f728:	b29a      	uxth	r2, r3
 800f72a:	68fb      	ldr	r3, [r7, #12]
 800f72c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800f72e:	68fb      	ldr	r3, [r7, #12]
 800f730:	683a      	ldr	r2, [r7, #0]
 800f732:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800f734:	3710      	adds	r7, #16
 800f736:	46bd      	mov	sp, r7
 800f738:	bd80      	pop	{r7, pc}
 800f73a:	bf00      	nop
 800f73c:	0801e90c 	.word	0x0801e90c
 800f740:	0801eb00 	.word	0x0801eb00
 800f744:	0801e96c 	.word	0x0801e96c
 800f748:	0801eb38 	.word	0x0801eb38
 800f74c:	0801eb68 	.word	0x0801eb68

0800f750 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800f750:	b580      	push	{r7, lr}
 800f752:	b082      	sub	sp, #8
 800f754:	af00      	add	r7, sp, #0
 800f756:	6078      	str	r0, [r7, #4]
 800f758:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800f75a:	6839      	ldr	r1, [r7, #0]
 800f75c:	6878      	ldr	r0, [r7, #4]
 800f75e:	f7ff ffa1 	bl	800f6a4 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800f762:	6838      	ldr	r0, [r7, #0]
 800f764:	f7ff ff76 	bl	800f654 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800f768:	bf00      	nop
 800f76a:	3708      	adds	r7, #8
 800f76c:	46bd      	mov	sp, r7
 800f76e:	bd80      	pop	{r7, pc}

0800f770 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800f770:	b580      	push	{r7, lr}
 800f772:	b086      	sub	sp, #24
 800f774:	af00      	add	r7, sp, #0
 800f776:	6078      	str	r0, [r7, #4]
 800f778:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800f77a:	2300      	movs	r3, #0
 800f77c:	617b      	str	r3, [r7, #20]
 800f77e:	2300      	movs	r3, #0
 800f780:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	2b00      	cmp	r3, #0
 800f786:	d008      	beq.n	800f79a <pbuf_copy+0x2a>
 800f788:	683b      	ldr	r3, [r7, #0]
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	d005      	beq.n	800f79a <pbuf_copy+0x2a>
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	891a      	ldrh	r2, [r3, #8]
 800f792:	683b      	ldr	r3, [r7, #0]
 800f794:	891b      	ldrh	r3, [r3, #8]
 800f796:	429a      	cmp	r2, r3
 800f798:	d209      	bcs.n	800f7ae <pbuf_copy+0x3e>
 800f79a:	4b57      	ldr	r3, [pc, #348]	; (800f8f8 <pbuf_copy+0x188>)
 800f79c:	f240 32c9 	movw	r2, #969	; 0x3c9
 800f7a0:	4956      	ldr	r1, [pc, #344]	; (800f8fc <pbuf_copy+0x18c>)
 800f7a2:	4857      	ldr	r0, [pc, #348]	; (800f900 <pbuf_copy+0x190>)
 800f7a4:	f00b fe6c 	bl	801b480 <iprintf>
 800f7a8:	f06f 030f 	mvn.w	r3, #15
 800f7ac:	e09f      	b.n	800f8ee <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	895b      	ldrh	r3, [r3, #10]
 800f7b2:	461a      	mov	r2, r3
 800f7b4:	697b      	ldr	r3, [r7, #20]
 800f7b6:	1ad2      	subs	r2, r2, r3
 800f7b8:	683b      	ldr	r3, [r7, #0]
 800f7ba:	895b      	ldrh	r3, [r3, #10]
 800f7bc:	4619      	mov	r1, r3
 800f7be:	693b      	ldr	r3, [r7, #16]
 800f7c0:	1acb      	subs	r3, r1, r3
 800f7c2:	429a      	cmp	r2, r3
 800f7c4:	d306      	bcc.n	800f7d4 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800f7c6:	683b      	ldr	r3, [r7, #0]
 800f7c8:	895b      	ldrh	r3, [r3, #10]
 800f7ca:	461a      	mov	r2, r3
 800f7cc:	693b      	ldr	r3, [r7, #16]
 800f7ce:	1ad3      	subs	r3, r2, r3
 800f7d0:	60fb      	str	r3, [r7, #12]
 800f7d2:	e005      	b.n	800f7e0 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	895b      	ldrh	r3, [r3, #10]
 800f7d8:	461a      	mov	r2, r3
 800f7da:	697b      	ldr	r3, [r7, #20]
 800f7dc:	1ad3      	subs	r3, r2, r3
 800f7de:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	685a      	ldr	r2, [r3, #4]
 800f7e4:	697b      	ldr	r3, [r7, #20]
 800f7e6:	18d0      	adds	r0, r2, r3
 800f7e8:	683b      	ldr	r3, [r7, #0]
 800f7ea:	685a      	ldr	r2, [r3, #4]
 800f7ec:	693b      	ldr	r3, [r7, #16]
 800f7ee:	4413      	add	r3, r2
 800f7f0:	68fa      	ldr	r2, [r7, #12]
 800f7f2:	4619      	mov	r1, r3
 800f7f4:	f00b f8ce 	bl	801a994 <memcpy>
    offset_to += len;
 800f7f8:	697a      	ldr	r2, [r7, #20]
 800f7fa:	68fb      	ldr	r3, [r7, #12]
 800f7fc:	4413      	add	r3, r2
 800f7fe:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800f800:	693a      	ldr	r2, [r7, #16]
 800f802:	68fb      	ldr	r3, [r7, #12]
 800f804:	4413      	add	r3, r2
 800f806:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	895b      	ldrh	r3, [r3, #10]
 800f80c:	461a      	mov	r2, r3
 800f80e:	697b      	ldr	r3, [r7, #20]
 800f810:	4293      	cmp	r3, r2
 800f812:	d906      	bls.n	800f822 <pbuf_copy+0xb2>
 800f814:	4b38      	ldr	r3, [pc, #224]	; (800f8f8 <pbuf_copy+0x188>)
 800f816:	f240 32d9 	movw	r2, #985	; 0x3d9
 800f81a:	493a      	ldr	r1, [pc, #232]	; (800f904 <pbuf_copy+0x194>)
 800f81c:	4838      	ldr	r0, [pc, #224]	; (800f900 <pbuf_copy+0x190>)
 800f81e:	f00b fe2f 	bl	801b480 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800f822:	683b      	ldr	r3, [r7, #0]
 800f824:	895b      	ldrh	r3, [r3, #10]
 800f826:	461a      	mov	r2, r3
 800f828:	693b      	ldr	r3, [r7, #16]
 800f82a:	4293      	cmp	r3, r2
 800f82c:	d906      	bls.n	800f83c <pbuf_copy+0xcc>
 800f82e:	4b32      	ldr	r3, [pc, #200]	; (800f8f8 <pbuf_copy+0x188>)
 800f830:	f240 32da 	movw	r2, #986	; 0x3da
 800f834:	4934      	ldr	r1, [pc, #208]	; (800f908 <pbuf_copy+0x198>)
 800f836:	4832      	ldr	r0, [pc, #200]	; (800f900 <pbuf_copy+0x190>)
 800f838:	f00b fe22 	bl	801b480 <iprintf>
    if (offset_from >= p_from->len) {
 800f83c:	683b      	ldr	r3, [r7, #0]
 800f83e:	895b      	ldrh	r3, [r3, #10]
 800f840:	461a      	mov	r2, r3
 800f842:	693b      	ldr	r3, [r7, #16]
 800f844:	4293      	cmp	r3, r2
 800f846:	d304      	bcc.n	800f852 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800f848:	2300      	movs	r3, #0
 800f84a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800f84c:	683b      	ldr	r3, [r7, #0]
 800f84e:	681b      	ldr	r3, [r3, #0]
 800f850:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	895b      	ldrh	r3, [r3, #10]
 800f856:	461a      	mov	r2, r3
 800f858:	697b      	ldr	r3, [r7, #20]
 800f85a:	4293      	cmp	r3, r2
 800f85c:	d114      	bne.n	800f888 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800f85e:	2300      	movs	r3, #0
 800f860:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	681b      	ldr	r3, [r3, #0]
 800f866:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	2b00      	cmp	r3, #0
 800f86c:	d10c      	bne.n	800f888 <pbuf_copy+0x118>
 800f86e:	683b      	ldr	r3, [r7, #0]
 800f870:	2b00      	cmp	r3, #0
 800f872:	d009      	beq.n	800f888 <pbuf_copy+0x118>
 800f874:	4b20      	ldr	r3, [pc, #128]	; (800f8f8 <pbuf_copy+0x188>)
 800f876:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800f87a:	4924      	ldr	r1, [pc, #144]	; (800f90c <pbuf_copy+0x19c>)
 800f87c:	4820      	ldr	r0, [pc, #128]	; (800f900 <pbuf_copy+0x190>)
 800f87e:	f00b fdff 	bl	801b480 <iprintf>
 800f882:	f06f 030f 	mvn.w	r3, #15
 800f886:	e032      	b.n	800f8ee <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800f888:	683b      	ldr	r3, [r7, #0]
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	d013      	beq.n	800f8b6 <pbuf_copy+0x146>
 800f88e:	683b      	ldr	r3, [r7, #0]
 800f890:	895a      	ldrh	r2, [r3, #10]
 800f892:	683b      	ldr	r3, [r7, #0]
 800f894:	891b      	ldrh	r3, [r3, #8]
 800f896:	429a      	cmp	r2, r3
 800f898:	d10d      	bne.n	800f8b6 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800f89a:	683b      	ldr	r3, [r7, #0]
 800f89c:	681b      	ldr	r3, [r3, #0]
 800f89e:	2b00      	cmp	r3, #0
 800f8a0:	d009      	beq.n	800f8b6 <pbuf_copy+0x146>
 800f8a2:	4b15      	ldr	r3, [pc, #84]	; (800f8f8 <pbuf_copy+0x188>)
 800f8a4:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800f8a8:	4919      	ldr	r1, [pc, #100]	; (800f910 <pbuf_copy+0x1a0>)
 800f8aa:	4815      	ldr	r0, [pc, #84]	; (800f900 <pbuf_copy+0x190>)
 800f8ac:	f00b fde8 	bl	801b480 <iprintf>
 800f8b0:	f06f 0305 	mvn.w	r3, #5
 800f8b4:	e01b      	b.n	800f8ee <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	2b00      	cmp	r3, #0
 800f8ba:	d013      	beq.n	800f8e4 <pbuf_copy+0x174>
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	895a      	ldrh	r2, [r3, #10]
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	891b      	ldrh	r3, [r3, #8]
 800f8c4:	429a      	cmp	r2, r3
 800f8c6:	d10d      	bne.n	800f8e4 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	681b      	ldr	r3, [r3, #0]
 800f8cc:	2b00      	cmp	r3, #0
 800f8ce:	d009      	beq.n	800f8e4 <pbuf_copy+0x174>
 800f8d0:	4b09      	ldr	r3, [pc, #36]	; (800f8f8 <pbuf_copy+0x188>)
 800f8d2:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800f8d6:	490e      	ldr	r1, [pc, #56]	; (800f910 <pbuf_copy+0x1a0>)
 800f8d8:	4809      	ldr	r0, [pc, #36]	; (800f900 <pbuf_copy+0x190>)
 800f8da:	f00b fdd1 	bl	801b480 <iprintf>
 800f8de:	f06f 0305 	mvn.w	r3, #5
 800f8e2:	e004      	b.n	800f8ee <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800f8e4:	683b      	ldr	r3, [r7, #0]
 800f8e6:	2b00      	cmp	r3, #0
 800f8e8:	f47f af61 	bne.w	800f7ae <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800f8ec:	2300      	movs	r3, #0
}
 800f8ee:	4618      	mov	r0, r3
 800f8f0:	3718      	adds	r7, #24
 800f8f2:	46bd      	mov	sp, r7
 800f8f4:	bd80      	pop	{r7, pc}
 800f8f6:	bf00      	nop
 800f8f8:	0801e90c 	.word	0x0801e90c
 800f8fc:	0801ebb4 	.word	0x0801ebb4
 800f900:	0801e96c 	.word	0x0801e96c
 800f904:	0801ebe4 	.word	0x0801ebe4
 800f908:	0801ebfc 	.word	0x0801ebfc
 800f90c:	0801ec18 	.word	0x0801ec18
 800f910:	0801ec28 	.word	0x0801ec28

0800f914 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800f914:	b580      	push	{r7, lr}
 800f916:	b088      	sub	sp, #32
 800f918:	af00      	add	r7, sp, #0
 800f91a:	60f8      	str	r0, [r7, #12]
 800f91c:	60b9      	str	r1, [r7, #8]
 800f91e:	4611      	mov	r1, r2
 800f920:	461a      	mov	r2, r3
 800f922:	460b      	mov	r3, r1
 800f924:	80fb      	strh	r3, [r7, #6]
 800f926:	4613      	mov	r3, r2
 800f928:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800f92a:	2300      	movs	r3, #0
 800f92c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800f92e:	2300      	movs	r3, #0
 800f930:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800f932:	68fb      	ldr	r3, [r7, #12]
 800f934:	2b00      	cmp	r3, #0
 800f936:	d108      	bne.n	800f94a <pbuf_copy_partial+0x36>
 800f938:	4b2b      	ldr	r3, [pc, #172]	; (800f9e8 <pbuf_copy_partial+0xd4>)
 800f93a:	f240 420a 	movw	r2, #1034	; 0x40a
 800f93e:	492b      	ldr	r1, [pc, #172]	; (800f9ec <pbuf_copy_partial+0xd8>)
 800f940:	482b      	ldr	r0, [pc, #172]	; (800f9f0 <pbuf_copy_partial+0xdc>)
 800f942:	f00b fd9d 	bl	801b480 <iprintf>
 800f946:	2300      	movs	r3, #0
 800f948:	e04a      	b.n	800f9e0 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800f94a:	68bb      	ldr	r3, [r7, #8]
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	d108      	bne.n	800f962 <pbuf_copy_partial+0x4e>
 800f950:	4b25      	ldr	r3, [pc, #148]	; (800f9e8 <pbuf_copy_partial+0xd4>)
 800f952:	f240 420b 	movw	r2, #1035	; 0x40b
 800f956:	4927      	ldr	r1, [pc, #156]	; (800f9f4 <pbuf_copy_partial+0xe0>)
 800f958:	4825      	ldr	r0, [pc, #148]	; (800f9f0 <pbuf_copy_partial+0xdc>)
 800f95a:	f00b fd91 	bl	801b480 <iprintf>
 800f95e:	2300      	movs	r3, #0
 800f960:	e03e      	b.n	800f9e0 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800f962:	68fb      	ldr	r3, [r7, #12]
 800f964:	61fb      	str	r3, [r7, #28]
 800f966:	e034      	b.n	800f9d2 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800f968:	88bb      	ldrh	r3, [r7, #4]
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	d00a      	beq.n	800f984 <pbuf_copy_partial+0x70>
 800f96e:	69fb      	ldr	r3, [r7, #28]
 800f970:	895b      	ldrh	r3, [r3, #10]
 800f972:	88ba      	ldrh	r2, [r7, #4]
 800f974:	429a      	cmp	r2, r3
 800f976:	d305      	bcc.n	800f984 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800f978:	69fb      	ldr	r3, [r7, #28]
 800f97a:	895b      	ldrh	r3, [r3, #10]
 800f97c:	88ba      	ldrh	r2, [r7, #4]
 800f97e:	1ad3      	subs	r3, r2, r3
 800f980:	80bb      	strh	r3, [r7, #4]
 800f982:	e023      	b.n	800f9cc <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800f984:	69fb      	ldr	r3, [r7, #28]
 800f986:	895a      	ldrh	r2, [r3, #10]
 800f988:	88bb      	ldrh	r3, [r7, #4]
 800f98a:	1ad3      	subs	r3, r2, r3
 800f98c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800f98e:	8b3a      	ldrh	r2, [r7, #24]
 800f990:	88fb      	ldrh	r3, [r7, #6]
 800f992:	429a      	cmp	r2, r3
 800f994:	d901      	bls.n	800f99a <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800f996:	88fb      	ldrh	r3, [r7, #6]
 800f998:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800f99a:	8b7b      	ldrh	r3, [r7, #26]
 800f99c:	68ba      	ldr	r2, [r7, #8]
 800f99e:	18d0      	adds	r0, r2, r3
 800f9a0:	69fb      	ldr	r3, [r7, #28]
 800f9a2:	685a      	ldr	r2, [r3, #4]
 800f9a4:	88bb      	ldrh	r3, [r7, #4]
 800f9a6:	4413      	add	r3, r2
 800f9a8:	8b3a      	ldrh	r2, [r7, #24]
 800f9aa:	4619      	mov	r1, r3
 800f9ac:	f00a fff2 	bl	801a994 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800f9b0:	8afa      	ldrh	r2, [r7, #22]
 800f9b2:	8b3b      	ldrh	r3, [r7, #24]
 800f9b4:	4413      	add	r3, r2
 800f9b6:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800f9b8:	8b7a      	ldrh	r2, [r7, #26]
 800f9ba:	8b3b      	ldrh	r3, [r7, #24]
 800f9bc:	4413      	add	r3, r2
 800f9be:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800f9c0:	88fa      	ldrh	r2, [r7, #6]
 800f9c2:	8b3b      	ldrh	r3, [r7, #24]
 800f9c4:	1ad3      	subs	r3, r2, r3
 800f9c6:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800f9c8:	2300      	movs	r3, #0
 800f9ca:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800f9cc:	69fb      	ldr	r3, [r7, #28]
 800f9ce:	681b      	ldr	r3, [r3, #0]
 800f9d0:	61fb      	str	r3, [r7, #28]
 800f9d2:	88fb      	ldrh	r3, [r7, #6]
 800f9d4:	2b00      	cmp	r3, #0
 800f9d6:	d002      	beq.n	800f9de <pbuf_copy_partial+0xca>
 800f9d8:	69fb      	ldr	r3, [r7, #28]
 800f9da:	2b00      	cmp	r3, #0
 800f9dc:	d1c4      	bne.n	800f968 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800f9de:	8afb      	ldrh	r3, [r7, #22]
}
 800f9e0:	4618      	mov	r0, r3
 800f9e2:	3720      	adds	r7, #32
 800f9e4:	46bd      	mov	sp, r7
 800f9e6:	bd80      	pop	{r7, pc}
 800f9e8:	0801e90c 	.word	0x0801e90c
 800f9ec:	0801ec54 	.word	0x0801ec54
 800f9f0:	0801e96c 	.word	0x0801e96c
 800f9f4:	0801ec74 	.word	0x0801ec74

0800f9f8 <pbuf_skip_const>:
#endif /* LWIP_TCP && TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

/* Actual implementation of pbuf_skip() but returning const pointer... */
static const struct pbuf *
pbuf_skip_const(const struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 800f9f8:	b480      	push	{r7}
 800f9fa:	b087      	sub	sp, #28
 800f9fc:	af00      	add	r7, sp, #0
 800f9fe:	60f8      	str	r0, [r7, #12]
 800fa00:	460b      	mov	r3, r1
 800fa02:	607a      	str	r2, [r7, #4]
 800fa04:	817b      	strh	r3, [r7, #10]
  u16_t offset_left = in_offset;
 800fa06:	897b      	ldrh	r3, [r7, #10]
 800fa08:	82fb      	strh	r3, [r7, #22]
  const struct pbuf *q = in;
 800fa0a:	68fb      	ldr	r3, [r7, #12]
 800fa0c:	613b      	str	r3, [r7, #16]

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
 800fa0e:	e007      	b.n	800fa20 <pbuf_skip_const+0x28>
    offset_left = (u16_t)(offset_left - q->len);
 800fa10:	693b      	ldr	r3, [r7, #16]
 800fa12:	895b      	ldrh	r3, [r3, #10]
 800fa14:	8afa      	ldrh	r2, [r7, #22]
 800fa16:	1ad3      	subs	r3, r2, r3
 800fa18:	82fb      	strh	r3, [r7, #22]
    q = q->next;
 800fa1a:	693b      	ldr	r3, [r7, #16]
 800fa1c:	681b      	ldr	r3, [r3, #0]
 800fa1e:	613b      	str	r3, [r7, #16]
  while ((q != NULL) && (q->len <= offset_left)) {
 800fa20:	693b      	ldr	r3, [r7, #16]
 800fa22:	2b00      	cmp	r3, #0
 800fa24:	d004      	beq.n	800fa30 <pbuf_skip_const+0x38>
 800fa26:	693b      	ldr	r3, [r7, #16]
 800fa28:	895b      	ldrh	r3, [r3, #10]
 800fa2a:	8afa      	ldrh	r2, [r7, #22]
 800fa2c:	429a      	cmp	r2, r3
 800fa2e:	d2ef      	bcs.n	800fa10 <pbuf_skip_const+0x18>
  }
  if (out_offset != NULL) {
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	2b00      	cmp	r3, #0
 800fa34:	d002      	beq.n	800fa3c <pbuf_skip_const+0x44>
    *out_offset = offset_left;
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	8afa      	ldrh	r2, [r7, #22]
 800fa3a:	801a      	strh	r2, [r3, #0]
  }
  return q;
 800fa3c:	693b      	ldr	r3, [r7, #16]
}
 800fa3e:	4618      	mov	r0, r3
 800fa40:	371c      	adds	r7, #28
 800fa42:	46bd      	mov	sp, r7
 800fa44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa48:	4770      	bx	lr

0800fa4a <pbuf_skip>:
 * @param out_offset resulting offset in the returned pbuf
 * @return the pbuf in the queue where the offset is
 */
struct pbuf *
pbuf_skip(struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 800fa4a:	b580      	push	{r7, lr}
 800fa4c:	b086      	sub	sp, #24
 800fa4e:	af00      	add	r7, sp, #0
 800fa50:	60f8      	str	r0, [r7, #12]
 800fa52:	460b      	mov	r3, r1
 800fa54:	607a      	str	r2, [r7, #4]
 800fa56:	817b      	strh	r3, [r7, #10]
  const struct pbuf *out = pbuf_skip_const(in, in_offset, out_offset);
 800fa58:	897b      	ldrh	r3, [r7, #10]
 800fa5a:	687a      	ldr	r2, [r7, #4]
 800fa5c:	4619      	mov	r1, r3
 800fa5e:	68f8      	ldr	r0, [r7, #12]
 800fa60:	f7ff ffca 	bl	800f9f8 <pbuf_skip_const>
 800fa64:	6178      	str	r0, [r7, #20]
  return LWIP_CONST_CAST(struct pbuf *, out);
 800fa66:	697b      	ldr	r3, [r7, #20]
}
 800fa68:	4618      	mov	r0, r3
 800fa6a:	3718      	adds	r7, #24
 800fa6c:	46bd      	mov	sp, r7
 800fa6e:	bd80      	pop	{r7, pc}

0800fa70 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 800fa70:	b580      	push	{r7, lr}
 800fa72:	b088      	sub	sp, #32
 800fa74:	af00      	add	r7, sp, #0
 800fa76:	60f8      	str	r0, [r7, #12]
 800fa78:	60b9      	str	r1, [r7, #8]
 800fa7a:	4613      	mov	r3, r2
 800fa7c:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 800fa7e:	88fb      	ldrh	r3, [r7, #6]
 800fa80:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 800fa82:	2300      	movs	r3, #0
 800fa84:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 800fa86:	68fb      	ldr	r3, [r7, #12]
 800fa88:	2b00      	cmp	r3, #0
 800fa8a:	d109      	bne.n	800faa0 <pbuf_take+0x30>
 800fa8c:	4b3a      	ldr	r3, [pc, #232]	; (800fb78 <pbuf_take+0x108>)
 800fa8e:	f240 42b3 	movw	r2, #1203	; 0x4b3
 800fa92:	493a      	ldr	r1, [pc, #232]	; (800fb7c <pbuf_take+0x10c>)
 800fa94:	483a      	ldr	r0, [pc, #232]	; (800fb80 <pbuf_take+0x110>)
 800fa96:	f00b fcf3 	bl	801b480 <iprintf>
 800fa9a:	f06f 030f 	mvn.w	r3, #15
 800fa9e:	e067      	b.n	800fb70 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800faa0:	68bb      	ldr	r3, [r7, #8]
 800faa2:	2b00      	cmp	r3, #0
 800faa4:	d109      	bne.n	800faba <pbuf_take+0x4a>
 800faa6:	4b34      	ldr	r3, [pc, #208]	; (800fb78 <pbuf_take+0x108>)
 800faa8:	f240 42b4 	movw	r2, #1204	; 0x4b4
 800faac:	4935      	ldr	r1, [pc, #212]	; (800fb84 <pbuf_take+0x114>)
 800faae:	4834      	ldr	r0, [pc, #208]	; (800fb80 <pbuf_take+0x110>)
 800fab0:	f00b fce6 	bl	801b480 <iprintf>
 800fab4:	f06f 030f 	mvn.w	r3, #15
 800fab8:	e05a      	b.n	800fb70 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 800faba:	68fb      	ldr	r3, [r7, #12]
 800fabc:	891b      	ldrh	r3, [r3, #8]
 800fabe:	88fa      	ldrh	r2, [r7, #6]
 800fac0:	429a      	cmp	r2, r3
 800fac2:	d909      	bls.n	800fad8 <pbuf_take+0x68>
 800fac4:	4b2c      	ldr	r3, [pc, #176]	; (800fb78 <pbuf_take+0x108>)
 800fac6:	f240 42b5 	movw	r2, #1205	; 0x4b5
 800faca:	492f      	ldr	r1, [pc, #188]	; (800fb88 <pbuf_take+0x118>)
 800facc:	482c      	ldr	r0, [pc, #176]	; (800fb80 <pbuf_take+0x110>)
 800face:	f00b fcd7 	bl	801b480 <iprintf>
 800fad2:	f04f 33ff 	mov.w	r3, #4294967295
 800fad6:	e04b      	b.n	800fb70 <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 800fad8:	68fb      	ldr	r3, [r7, #12]
 800fada:	2b00      	cmp	r3, #0
 800fadc:	d007      	beq.n	800faee <pbuf_take+0x7e>
 800fade:	68bb      	ldr	r3, [r7, #8]
 800fae0:	2b00      	cmp	r3, #0
 800fae2:	d004      	beq.n	800faee <pbuf_take+0x7e>
 800fae4:	68fb      	ldr	r3, [r7, #12]
 800fae6:	891b      	ldrh	r3, [r3, #8]
 800fae8:	88fa      	ldrh	r2, [r7, #6]
 800faea:	429a      	cmp	r2, r3
 800faec:	d902      	bls.n	800faf4 <pbuf_take+0x84>
    return ERR_ARG;
 800faee:	f06f 030f 	mvn.w	r3, #15
 800faf2:	e03d      	b.n	800fb70 <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 800faf4:	68fb      	ldr	r3, [r7, #12]
 800faf6:	61fb      	str	r3, [r7, #28]
 800faf8:	e028      	b.n	800fb4c <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 800fafa:	69fb      	ldr	r3, [r7, #28]
 800fafc:	2b00      	cmp	r3, #0
 800fafe:	d106      	bne.n	800fb0e <pbuf_take+0x9e>
 800fb00:	4b1d      	ldr	r3, [pc, #116]	; (800fb78 <pbuf_take+0x108>)
 800fb02:	f240 42bd 	movw	r2, #1213	; 0x4bd
 800fb06:	4921      	ldr	r1, [pc, #132]	; (800fb8c <pbuf_take+0x11c>)
 800fb08:	481d      	ldr	r0, [pc, #116]	; (800fb80 <pbuf_take+0x110>)
 800fb0a:	f00b fcb9 	bl	801b480 <iprintf>
    buf_copy_len = total_copy_len;
 800fb0e:	697b      	ldr	r3, [r7, #20]
 800fb10:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 800fb12:	69fb      	ldr	r3, [r7, #28]
 800fb14:	895b      	ldrh	r3, [r3, #10]
 800fb16:	461a      	mov	r2, r3
 800fb18:	69bb      	ldr	r3, [r7, #24]
 800fb1a:	4293      	cmp	r3, r2
 800fb1c:	d902      	bls.n	800fb24 <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 800fb1e:	69fb      	ldr	r3, [r7, #28]
 800fb20:	895b      	ldrh	r3, [r3, #10]
 800fb22:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 800fb24:	69fb      	ldr	r3, [r7, #28]
 800fb26:	6858      	ldr	r0, [r3, #4]
 800fb28:	68ba      	ldr	r2, [r7, #8]
 800fb2a:	693b      	ldr	r3, [r7, #16]
 800fb2c:	4413      	add	r3, r2
 800fb2e:	69ba      	ldr	r2, [r7, #24]
 800fb30:	4619      	mov	r1, r3
 800fb32:	f00a ff2f 	bl	801a994 <memcpy>
    total_copy_len -= buf_copy_len;
 800fb36:	697a      	ldr	r2, [r7, #20]
 800fb38:	69bb      	ldr	r3, [r7, #24]
 800fb3a:	1ad3      	subs	r3, r2, r3
 800fb3c:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 800fb3e:	693a      	ldr	r2, [r7, #16]
 800fb40:	69bb      	ldr	r3, [r7, #24]
 800fb42:	4413      	add	r3, r2
 800fb44:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 800fb46:	69fb      	ldr	r3, [r7, #28]
 800fb48:	681b      	ldr	r3, [r3, #0]
 800fb4a:	61fb      	str	r3, [r7, #28]
 800fb4c:	697b      	ldr	r3, [r7, #20]
 800fb4e:	2b00      	cmp	r3, #0
 800fb50:	d1d3      	bne.n	800fafa <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 800fb52:	697b      	ldr	r3, [r7, #20]
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	d103      	bne.n	800fb60 <pbuf_take+0xf0>
 800fb58:	88fb      	ldrh	r3, [r7, #6]
 800fb5a:	693a      	ldr	r2, [r7, #16]
 800fb5c:	429a      	cmp	r2, r3
 800fb5e:	d006      	beq.n	800fb6e <pbuf_take+0xfe>
 800fb60:	4b05      	ldr	r3, [pc, #20]	; (800fb78 <pbuf_take+0x108>)
 800fb62:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 800fb66:	490a      	ldr	r1, [pc, #40]	; (800fb90 <pbuf_take+0x120>)
 800fb68:	4805      	ldr	r0, [pc, #20]	; (800fb80 <pbuf_take+0x110>)
 800fb6a:	f00b fc89 	bl	801b480 <iprintf>
  return ERR_OK;
 800fb6e:	2300      	movs	r3, #0
}
 800fb70:	4618      	mov	r0, r3
 800fb72:	3720      	adds	r7, #32
 800fb74:	46bd      	mov	sp, r7
 800fb76:	bd80      	pop	{r7, pc}
 800fb78:	0801e90c 	.word	0x0801e90c
 800fb7c:	0801ece4 	.word	0x0801ece4
 800fb80:	0801e96c 	.word	0x0801e96c
 800fb84:	0801ecfc 	.word	0x0801ecfc
 800fb88:	0801ed18 	.word	0x0801ed18
 800fb8c:	0801ed38 	.word	0x0801ed38
 800fb90:	0801ed50 	.word	0x0801ed50

0800fb94 <pbuf_take_at>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take_at(struct pbuf *buf, const void *dataptr, u16_t len, u16_t offset)
{
 800fb94:	b580      	push	{r7, lr}
 800fb96:	b088      	sub	sp, #32
 800fb98:	af00      	add	r7, sp, #0
 800fb9a:	60f8      	str	r0, [r7, #12]
 800fb9c:	60b9      	str	r1, [r7, #8]
 800fb9e:	4611      	mov	r1, r2
 800fba0:	461a      	mov	r2, r3
 800fba2:	460b      	mov	r3, r1
 800fba4:	80fb      	strh	r3, [r7, #6]
 800fba6:	4613      	mov	r3, r2
 800fba8:	80bb      	strh	r3, [r7, #4]
  u16_t target_offset;
  struct pbuf *q = pbuf_skip(buf, offset, &target_offset);
 800fbaa:	f107 0210 	add.w	r2, r7, #16
 800fbae:	88bb      	ldrh	r3, [r7, #4]
 800fbb0:	4619      	mov	r1, r3
 800fbb2:	68f8      	ldr	r0, [r7, #12]
 800fbb4:	f7ff ff49 	bl	800fa4a <pbuf_skip>
 800fbb8:	61f8      	str	r0, [r7, #28]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->tot_len >= target_offset + len)) {
 800fbba:	69fb      	ldr	r3, [r7, #28]
 800fbbc:	2b00      	cmp	r3, #0
 800fbbe:	d047      	beq.n	800fc50 <pbuf_take_at+0xbc>
 800fbc0:	69fb      	ldr	r3, [r7, #28]
 800fbc2:	891b      	ldrh	r3, [r3, #8]
 800fbc4:	461a      	mov	r2, r3
 800fbc6:	8a3b      	ldrh	r3, [r7, #16]
 800fbc8:	4619      	mov	r1, r3
 800fbca:	88fb      	ldrh	r3, [r7, #6]
 800fbcc:	440b      	add	r3, r1
 800fbce:	429a      	cmp	r2, r3
 800fbd0:	db3e      	blt.n	800fc50 <pbuf_take_at+0xbc>
    u16_t remaining_len = len;
 800fbd2:	88fb      	ldrh	r3, [r7, #6]
 800fbd4:	837b      	strh	r3, [r7, #26]
    const u8_t *src_ptr = (const u8_t *)dataptr;
 800fbd6:	68bb      	ldr	r3, [r7, #8]
 800fbd8:	617b      	str	r3, [r7, #20]
    /* copy the part that goes into the first pbuf */
    u16_t first_copy_len;
    LWIP_ASSERT("check pbuf_skip result", target_offset < q->len);
 800fbda:	69fb      	ldr	r3, [r7, #28]
 800fbdc:	895a      	ldrh	r2, [r3, #10]
 800fbde:	8a3b      	ldrh	r3, [r7, #16]
 800fbe0:	429a      	cmp	r2, r3
 800fbe2:	d806      	bhi.n	800fbf2 <pbuf_take_at+0x5e>
 800fbe4:	4b1d      	ldr	r3, [pc, #116]	; (800fc5c <pbuf_take_at+0xc8>)
 800fbe6:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800fbea:	491d      	ldr	r1, [pc, #116]	; (800fc60 <pbuf_take_at+0xcc>)
 800fbec:	481d      	ldr	r0, [pc, #116]	; (800fc64 <pbuf_take_at+0xd0>)
 800fbee:	f00b fc47 	bl	801b480 <iprintf>
    first_copy_len = (u16_t)LWIP_MIN(q->len - target_offset, len);
 800fbf2:	69fb      	ldr	r3, [r7, #28]
 800fbf4:	895b      	ldrh	r3, [r3, #10]
 800fbf6:	461a      	mov	r2, r3
 800fbf8:	8a3b      	ldrh	r3, [r7, #16]
 800fbfa:	1ad2      	subs	r2, r2, r3
 800fbfc:	88fb      	ldrh	r3, [r7, #6]
 800fbfe:	429a      	cmp	r2, r3
 800fc00:	da05      	bge.n	800fc0e <pbuf_take_at+0x7a>
 800fc02:	69fb      	ldr	r3, [r7, #28]
 800fc04:	895a      	ldrh	r2, [r3, #10]
 800fc06:	8a3b      	ldrh	r3, [r7, #16]
 800fc08:	1ad3      	subs	r3, r2, r3
 800fc0a:	b29b      	uxth	r3, r3
 800fc0c:	e000      	b.n	800fc10 <pbuf_take_at+0x7c>
 800fc0e:	88fb      	ldrh	r3, [r7, #6]
 800fc10:	827b      	strh	r3, [r7, #18]
    MEMCPY(((u8_t *)q->payload) + target_offset, dataptr, first_copy_len);
 800fc12:	69fb      	ldr	r3, [r7, #28]
 800fc14:	685b      	ldr	r3, [r3, #4]
 800fc16:	8a3a      	ldrh	r2, [r7, #16]
 800fc18:	4413      	add	r3, r2
 800fc1a:	8a7a      	ldrh	r2, [r7, #18]
 800fc1c:	68b9      	ldr	r1, [r7, #8]
 800fc1e:	4618      	mov	r0, r3
 800fc20:	f00a feb8 	bl	801a994 <memcpy>
    remaining_len = (u16_t)(remaining_len - first_copy_len);
 800fc24:	8b7a      	ldrh	r2, [r7, #26]
 800fc26:	8a7b      	ldrh	r3, [r7, #18]
 800fc28:	1ad3      	subs	r3, r2, r3
 800fc2a:	837b      	strh	r3, [r7, #26]
    src_ptr += first_copy_len;
 800fc2c:	8a7b      	ldrh	r3, [r7, #18]
 800fc2e:	697a      	ldr	r2, [r7, #20]
 800fc30:	4413      	add	r3, r2
 800fc32:	617b      	str	r3, [r7, #20]
    if (remaining_len > 0) {
 800fc34:	8b7b      	ldrh	r3, [r7, #26]
 800fc36:	2b00      	cmp	r3, #0
 800fc38:	d008      	beq.n	800fc4c <pbuf_take_at+0xb8>
      return pbuf_take(q->next, src_ptr, remaining_len);
 800fc3a:	69fb      	ldr	r3, [r7, #28]
 800fc3c:	681b      	ldr	r3, [r3, #0]
 800fc3e:	8b7a      	ldrh	r2, [r7, #26]
 800fc40:	6979      	ldr	r1, [r7, #20]
 800fc42:	4618      	mov	r0, r3
 800fc44:	f7ff ff14 	bl	800fa70 <pbuf_take>
 800fc48:	4603      	mov	r3, r0
 800fc4a:	e003      	b.n	800fc54 <pbuf_take_at+0xc0>
    }
    return ERR_OK;
 800fc4c:	2300      	movs	r3, #0
 800fc4e:	e001      	b.n	800fc54 <pbuf_take_at+0xc0>
  }
  return ERR_MEM;
 800fc50:	f04f 33ff 	mov.w	r3, #4294967295
}
 800fc54:	4618      	mov	r0, r3
 800fc56:	3720      	adds	r7, #32
 800fc58:	46bd      	mov	sp, r7
 800fc5a:	bd80      	pop	{r7, pc}
 800fc5c:	0801e90c 	.word	0x0801e90c
 800fc60:	0801ed68 	.word	0x0801ed68
 800fc64:	0801e96c 	.word	0x0801e96c

0800fc68 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800fc68:	b580      	push	{r7, lr}
 800fc6a:	b084      	sub	sp, #16
 800fc6c:	af00      	add	r7, sp, #0
 800fc6e:	4603      	mov	r3, r0
 800fc70:	603a      	str	r2, [r7, #0]
 800fc72:	71fb      	strb	r3, [r7, #7]
 800fc74:	460b      	mov	r3, r1
 800fc76:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800fc78:	683b      	ldr	r3, [r7, #0]
 800fc7a:	8919      	ldrh	r1, [r3, #8]
 800fc7c:	88ba      	ldrh	r2, [r7, #4]
 800fc7e:	79fb      	ldrb	r3, [r7, #7]
 800fc80:	4618      	mov	r0, r3
 800fc82:	f7ff f959 	bl	800ef38 <pbuf_alloc>
 800fc86:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800fc88:	68fb      	ldr	r3, [r7, #12]
 800fc8a:	2b00      	cmp	r3, #0
 800fc8c:	d101      	bne.n	800fc92 <pbuf_clone+0x2a>
    return NULL;
 800fc8e:	2300      	movs	r3, #0
 800fc90:	e011      	b.n	800fcb6 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800fc92:	6839      	ldr	r1, [r7, #0]
 800fc94:	68f8      	ldr	r0, [r7, #12]
 800fc96:	f7ff fd6b 	bl	800f770 <pbuf_copy>
 800fc9a:	4603      	mov	r3, r0
 800fc9c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800fc9e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800fca2:	2b00      	cmp	r3, #0
 800fca4:	d006      	beq.n	800fcb4 <pbuf_clone+0x4c>
 800fca6:	4b06      	ldr	r3, [pc, #24]	; (800fcc0 <pbuf_clone+0x58>)
 800fca8:	f240 5224 	movw	r2, #1316	; 0x524
 800fcac:	4905      	ldr	r1, [pc, #20]	; (800fcc4 <pbuf_clone+0x5c>)
 800fcae:	4806      	ldr	r0, [pc, #24]	; (800fcc8 <pbuf_clone+0x60>)
 800fcb0:	f00b fbe6 	bl	801b480 <iprintf>
  return q;
 800fcb4:	68fb      	ldr	r3, [r7, #12]
}
 800fcb6:	4618      	mov	r0, r3
 800fcb8:	3710      	adds	r7, #16
 800fcba:	46bd      	mov	sp, r7
 800fcbc:	bd80      	pop	{r7, pc}
 800fcbe:	bf00      	nop
 800fcc0:	0801e90c 	.word	0x0801e90c
 800fcc4:	0801ed80 	.word	0x0801ed80
 800fcc8:	0801e96c 	.word	0x0801e96c

0800fccc <pbuf_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p OR ZERO IF 'offset' >= p->tot_len
 */
u8_t
pbuf_get_at(const struct pbuf *p, u16_t offset)
{
 800fccc:	b580      	push	{r7, lr}
 800fcce:	b084      	sub	sp, #16
 800fcd0:	af00      	add	r7, sp, #0
 800fcd2:	6078      	str	r0, [r7, #4]
 800fcd4:	460b      	mov	r3, r1
 800fcd6:	807b      	strh	r3, [r7, #2]
  int ret = pbuf_try_get_at(p, offset);
 800fcd8:	887b      	ldrh	r3, [r7, #2]
 800fcda:	4619      	mov	r1, r3
 800fcdc:	6878      	ldr	r0, [r7, #4]
 800fcde:	f000 f80c 	bl	800fcfa <pbuf_try_get_at>
 800fce2:	60f8      	str	r0, [r7, #12]
  if (ret >= 0) {
 800fce4:	68fb      	ldr	r3, [r7, #12]
 800fce6:	2b00      	cmp	r3, #0
 800fce8:	db02      	blt.n	800fcf0 <pbuf_get_at+0x24>
    return (u8_t)ret;
 800fcea:	68fb      	ldr	r3, [r7, #12]
 800fcec:	b2db      	uxtb	r3, r3
 800fcee:	e000      	b.n	800fcf2 <pbuf_get_at+0x26>
  }
  return 0;
 800fcf0:	2300      	movs	r3, #0
}
 800fcf2:	4618      	mov	r0, r3
 800fcf4:	3710      	adds	r7, #16
 800fcf6:	46bd      	mov	sp, r7
 800fcf8:	bd80      	pop	{r7, pc}

0800fcfa <pbuf_try_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p [0..0xFF] OR negative if 'offset' >= p->tot_len
 */
int
pbuf_try_get_at(const struct pbuf *p, u16_t offset)
{
 800fcfa:	b580      	push	{r7, lr}
 800fcfc:	b084      	sub	sp, #16
 800fcfe:	af00      	add	r7, sp, #0
 800fd00:	6078      	str	r0, [r7, #4]
 800fd02:	460b      	mov	r3, r1
 800fd04:	807b      	strh	r3, [r7, #2]
  u16_t q_idx;
  const struct pbuf *q = pbuf_skip_const(p, offset, &q_idx);
 800fd06:	f107 020a 	add.w	r2, r7, #10
 800fd0a:	887b      	ldrh	r3, [r7, #2]
 800fd0c:	4619      	mov	r1, r3
 800fd0e:	6878      	ldr	r0, [r7, #4]
 800fd10:	f7ff fe72 	bl	800f9f8 <pbuf_skip_const>
 800fd14:	60f8      	str	r0, [r7, #12]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 800fd16:	68fb      	ldr	r3, [r7, #12]
 800fd18:	2b00      	cmp	r3, #0
 800fd1a:	d00a      	beq.n	800fd32 <pbuf_try_get_at+0x38>
 800fd1c:	68fb      	ldr	r3, [r7, #12]
 800fd1e:	895a      	ldrh	r2, [r3, #10]
 800fd20:	897b      	ldrh	r3, [r7, #10]
 800fd22:	429a      	cmp	r2, r3
 800fd24:	d905      	bls.n	800fd32 <pbuf_try_get_at+0x38>
    return ((u8_t *)q->payload)[q_idx];
 800fd26:	68fb      	ldr	r3, [r7, #12]
 800fd28:	685b      	ldr	r3, [r3, #4]
 800fd2a:	897a      	ldrh	r2, [r7, #10]
 800fd2c:	4413      	add	r3, r2
 800fd2e:	781b      	ldrb	r3, [r3, #0]
 800fd30:	e001      	b.n	800fd36 <pbuf_try_get_at+0x3c>
  }
  return -1;
 800fd32:	f04f 33ff 	mov.w	r3, #4294967295
}
 800fd36:	4618      	mov	r0, r3
 800fd38:	3710      	adds	r7, #16
 800fd3a:	46bd      	mov	sp, r7
 800fd3c:	bd80      	pop	{r7, pc}

0800fd3e <pbuf_put_at>:
 * @param offset offset into p of the byte to write
 * @param data byte to write at an offset into p
 */
void
pbuf_put_at(struct pbuf *p, u16_t offset, u8_t data)
{
 800fd3e:	b580      	push	{r7, lr}
 800fd40:	b084      	sub	sp, #16
 800fd42:	af00      	add	r7, sp, #0
 800fd44:	6078      	str	r0, [r7, #4]
 800fd46:	460b      	mov	r3, r1
 800fd48:	807b      	strh	r3, [r7, #2]
 800fd4a:	4613      	mov	r3, r2
 800fd4c:	707b      	strb	r3, [r7, #1]
  u16_t q_idx;
  struct pbuf *q = pbuf_skip(p, offset, &q_idx);
 800fd4e:	f107 020a 	add.w	r2, r7, #10
 800fd52:	887b      	ldrh	r3, [r7, #2]
 800fd54:	4619      	mov	r1, r3
 800fd56:	6878      	ldr	r0, [r7, #4]
 800fd58:	f7ff fe77 	bl	800fa4a <pbuf_skip>
 800fd5c:	60f8      	str	r0, [r7, #12]

  /* write requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 800fd5e:	68fb      	ldr	r3, [r7, #12]
 800fd60:	2b00      	cmp	r3, #0
 800fd62:	d00a      	beq.n	800fd7a <pbuf_put_at+0x3c>
 800fd64:	68fb      	ldr	r3, [r7, #12]
 800fd66:	895a      	ldrh	r2, [r3, #10]
 800fd68:	897b      	ldrh	r3, [r7, #10]
 800fd6a:	429a      	cmp	r2, r3
 800fd6c:	d905      	bls.n	800fd7a <pbuf_put_at+0x3c>
    ((u8_t *)q->payload)[q_idx] = data;
 800fd6e:	68fb      	ldr	r3, [r7, #12]
 800fd70:	685b      	ldr	r3, [r3, #4]
 800fd72:	897a      	ldrh	r2, [r7, #10]
 800fd74:	4413      	add	r3, r2
 800fd76:	787a      	ldrb	r2, [r7, #1]
 800fd78:	701a      	strb	r2, [r3, #0]
  }
}
 800fd7a:	bf00      	nop
 800fd7c:	3710      	adds	r7, #16
 800fd7e:	46bd      	mov	sp, r7
 800fd80:	bd80      	pop	{r7, pc}
	...

0800fd84 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800fd84:	b580      	push	{r7, lr}
 800fd86:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800fd88:	f00b fc08 	bl	801b59c <rand>
 800fd8c:	4603      	mov	r3, r0
 800fd8e:	b29b      	uxth	r3, r3
 800fd90:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800fd94:	b29b      	uxth	r3, r3
 800fd96:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800fd9a:	b29a      	uxth	r2, r3
 800fd9c:	4b01      	ldr	r3, [pc, #4]	; (800fda4 <tcp_init+0x20>)
 800fd9e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800fda0:	bf00      	nop
 800fda2:	bd80      	pop	{r7, pc}
 800fda4:	200000bc 	.word	0x200000bc

0800fda8 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800fda8:	b580      	push	{r7, lr}
 800fdaa:	b082      	sub	sp, #8
 800fdac:	af00      	add	r7, sp, #0
 800fdae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	7d1b      	ldrb	r3, [r3, #20]
 800fdb4:	2b01      	cmp	r3, #1
 800fdb6:	d105      	bne.n	800fdc4 <tcp_free+0x1c>
 800fdb8:	4b06      	ldr	r3, [pc, #24]	; (800fdd4 <tcp_free+0x2c>)
 800fdba:	22d4      	movs	r2, #212	; 0xd4
 800fdbc:	4906      	ldr	r1, [pc, #24]	; (800fdd8 <tcp_free+0x30>)
 800fdbe:	4807      	ldr	r0, [pc, #28]	; (800fddc <tcp_free+0x34>)
 800fdc0:	f00b fb5e 	bl	801b480 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800fdc4:	6879      	ldr	r1, [r7, #4]
 800fdc6:	2001      	movs	r0, #1
 800fdc8:	f7fe fcfc 	bl	800e7c4 <memp_free>
}
 800fdcc:	bf00      	nop
 800fdce:	3708      	adds	r7, #8
 800fdd0:	46bd      	mov	sp, r7
 800fdd2:	bd80      	pop	{r7, pc}
 800fdd4:	0801ee0c 	.word	0x0801ee0c
 800fdd8:	0801ee3c 	.word	0x0801ee3c
 800fddc:	0801ee50 	.word	0x0801ee50

0800fde0 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800fde0:	b580      	push	{r7, lr}
 800fde2:	b082      	sub	sp, #8
 800fde4:	af00      	add	r7, sp, #0
 800fde6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	7d1b      	ldrb	r3, [r3, #20]
 800fdec:	2b01      	cmp	r3, #1
 800fdee:	d105      	bne.n	800fdfc <tcp_free_listen+0x1c>
 800fdf0:	4b06      	ldr	r3, [pc, #24]	; (800fe0c <tcp_free_listen+0x2c>)
 800fdf2:	22df      	movs	r2, #223	; 0xdf
 800fdf4:	4906      	ldr	r1, [pc, #24]	; (800fe10 <tcp_free_listen+0x30>)
 800fdf6:	4807      	ldr	r0, [pc, #28]	; (800fe14 <tcp_free_listen+0x34>)
 800fdf8:	f00b fb42 	bl	801b480 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800fdfc:	6879      	ldr	r1, [r7, #4]
 800fdfe:	2002      	movs	r0, #2
 800fe00:	f7fe fce0 	bl	800e7c4 <memp_free>
}
 800fe04:	bf00      	nop
 800fe06:	3708      	adds	r7, #8
 800fe08:	46bd      	mov	sp, r7
 800fe0a:	bd80      	pop	{r7, pc}
 800fe0c:	0801ee0c 	.word	0x0801ee0c
 800fe10:	0801ee78 	.word	0x0801ee78
 800fe14:	0801ee50 	.word	0x0801ee50

0800fe18 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800fe18:	b580      	push	{r7, lr}
 800fe1a:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800fe1c:	f000 fea4 	bl	8010b68 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800fe20:	4b07      	ldr	r3, [pc, #28]	; (800fe40 <tcp_tmr+0x28>)
 800fe22:	781b      	ldrb	r3, [r3, #0]
 800fe24:	3301      	adds	r3, #1
 800fe26:	b2da      	uxtb	r2, r3
 800fe28:	4b05      	ldr	r3, [pc, #20]	; (800fe40 <tcp_tmr+0x28>)
 800fe2a:	701a      	strb	r2, [r3, #0]
 800fe2c:	4b04      	ldr	r3, [pc, #16]	; (800fe40 <tcp_tmr+0x28>)
 800fe2e:	781b      	ldrb	r3, [r3, #0]
 800fe30:	f003 0301 	and.w	r3, r3, #1
 800fe34:	2b00      	cmp	r3, #0
 800fe36:	d001      	beq.n	800fe3c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800fe38:	f000 fb56 	bl	80104e8 <tcp_slowtmr>
  }
}
 800fe3c:	bf00      	nop
 800fe3e:	bd80      	pop	{r7, pc}
 800fe40:	20013b89 	.word	0x20013b89

0800fe44 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800fe44:	b580      	push	{r7, lr}
 800fe46:	b084      	sub	sp, #16
 800fe48:	af00      	add	r7, sp, #0
 800fe4a:	6078      	str	r0, [r7, #4]
 800fe4c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800fe4e:	683b      	ldr	r3, [r7, #0]
 800fe50:	2b00      	cmp	r3, #0
 800fe52:	d105      	bne.n	800fe60 <tcp_remove_listener+0x1c>
 800fe54:	4b0d      	ldr	r3, [pc, #52]	; (800fe8c <tcp_remove_listener+0x48>)
 800fe56:	22ff      	movs	r2, #255	; 0xff
 800fe58:	490d      	ldr	r1, [pc, #52]	; (800fe90 <tcp_remove_listener+0x4c>)
 800fe5a:	480e      	ldr	r0, [pc, #56]	; (800fe94 <tcp_remove_listener+0x50>)
 800fe5c:	f00b fb10 	bl	801b480 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	60fb      	str	r3, [r7, #12]
 800fe64:	e00a      	b.n	800fe7c <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800fe66:	68fb      	ldr	r3, [r7, #12]
 800fe68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fe6a:	683a      	ldr	r2, [r7, #0]
 800fe6c:	429a      	cmp	r2, r3
 800fe6e:	d102      	bne.n	800fe76 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800fe70:	68fb      	ldr	r3, [r7, #12]
 800fe72:	2200      	movs	r2, #0
 800fe74:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800fe76:	68fb      	ldr	r3, [r7, #12]
 800fe78:	68db      	ldr	r3, [r3, #12]
 800fe7a:	60fb      	str	r3, [r7, #12]
 800fe7c:	68fb      	ldr	r3, [r7, #12]
 800fe7e:	2b00      	cmp	r3, #0
 800fe80:	d1f1      	bne.n	800fe66 <tcp_remove_listener+0x22>
    }
  }
}
 800fe82:	bf00      	nop
 800fe84:	bf00      	nop
 800fe86:	3710      	adds	r7, #16
 800fe88:	46bd      	mov	sp, r7
 800fe8a:	bd80      	pop	{r7, pc}
 800fe8c:	0801ee0c 	.word	0x0801ee0c
 800fe90:	0801ee94 	.word	0x0801ee94
 800fe94:	0801ee50 	.word	0x0801ee50

0800fe98 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800fe98:	b580      	push	{r7, lr}
 800fe9a:	b084      	sub	sp, #16
 800fe9c:	af00      	add	r7, sp, #0
 800fe9e:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	2b00      	cmp	r3, #0
 800fea4:	d106      	bne.n	800feb4 <tcp_listen_closed+0x1c>
 800fea6:	4b14      	ldr	r3, [pc, #80]	; (800fef8 <tcp_listen_closed+0x60>)
 800fea8:	f240 1211 	movw	r2, #273	; 0x111
 800feac:	4913      	ldr	r1, [pc, #76]	; (800fefc <tcp_listen_closed+0x64>)
 800feae:	4814      	ldr	r0, [pc, #80]	; (800ff00 <tcp_listen_closed+0x68>)
 800feb0:	f00b fae6 	bl	801b480 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	7d1b      	ldrb	r3, [r3, #20]
 800feb8:	2b01      	cmp	r3, #1
 800feba:	d006      	beq.n	800feca <tcp_listen_closed+0x32>
 800febc:	4b0e      	ldr	r3, [pc, #56]	; (800fef8 <tcp_listen_closed+0x60>)
 800febe:	f44f 7289 	mov.w	r2, #274	; 0x112
 800fec2:	4910      	ldr	r1, [pc, #64]	; (800ff04 <tcp_listen_closed+0x6c>)
 800fec4:	480e      	ldr	r0, [pc, #56]	; (800ff00 <tcp_listen_closed+0x68>)
 800fec6:	f00b fadb 	bl	801b480 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800feca:	2301      	movs	r3, #1
 800fecc:	60fb      	str	r3, [r7, #12]
 800fece:	e00b      	b.n	800fee8 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800fed0:	4a0d      	ldr	r2, [pc, #52]	; (800ff08 <tcp_listen_closed+0x70>)
 800fed2:	68fb      	ldr	r3, [r7, #12]
 800fed4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fed8:	681b      	ldr	r3, [r3, #0]
 800feda:	6879      	ldr	r1, [r7, #4]
 800fedc:	4618      	mov	r0, r3
 800fede:	f7ff ffb1 	bl	800fe44 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800fee2:	68fb      	ldr	r3, [r7, #12]
 800fee4:	3301      	adds	r3, #1
 800fee6:	60fb      	str	r3, [r7, #12]
 800fee8:	68fb      	ldr	r3, [r7, #12]
 800feea:	2b03      	cmp	r3, #3
 800feec:	d9f0      	bls.n	800fed0 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800feee:	bf00      	nop
 800fef0:	bf00      	nop
 800fef2:	3710      	adds	r7, #16
 800fef4:	46bd      	mov	sp, r7
 800fef6:	bd80      	pop	{r7, pc}
 800fef8:	0801ee0c 	.word	0x0801ee0c
 800fefc:	0801eebc 	.word	0x0801eebc
 800ff00:	0801ee50 	.word	0x0801ee50
 800ff04:	0801eec8 	.word	0x0801eec8
 800ff08:	0806cf48 	.word	0x0806cf48

0800ff0c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800ff0c:	b5b0      	push	{r4, r5, r7, lr}
 800ff0e:	b088      	sub	sp, #32
 800ff10:	af04      	add	r7, sp, #16
 800ff12:	6078      	str	r0, [r7, #4]
 800ff14:	460b      	mov	r3, r1
 800ff16:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	2b00      	cmp	r3, #0
 800ff1c:	d106      	bne.n	800ff2c <tcp_close_shutdown+0x20>
 800ff1e:	4b63      	ldr	r3, [pc, #396]	; (80100ac <tcp_close_shutdown+0x1a0>)
 800ff20:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800ff24:	4962      	ldr	r1, [pc, #392]	; (80100b0 <tcp_close_shutdown+0x1a4>)
 800ff26:	4863      	ldr	r0, [pc, #396]	; (80100b4 <tcp_close_shutdown+0x1a8>)
 800ff28:	f00b faaa 	bl	801b480 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800ff2c:	78fb      	ldrb	r3, [r7, #3]
 800ff2e:	2b00      	cmp	r3, #0
 800ff30:	d067      	beq.n	8010002 <tcp_close_shutdown+0xf6>
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	7d1b      	ldrb	r3, [r3, #20]
 800ff36:	2b04      	cmp	r3, #4
 800ff38:	d003      	beq.n	800ff42 <tcp_close_shutdown+0x36>
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	7d1b      	ldrb	r3, [r3, #20]
 800ff3e:	2b07      	cmp	r3, #7
 800ff40:	d15f      	bne.n	8010002 <tcp_close_shutdown+0xf6>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ff46:	2b00      	cmp	r3, #0
 800ff48:	d105      	bne.n	800ff56 <tcp_close_shutdown+0x4a>
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ff4e:	f642 52a0 	movw	r2, #11680	; 0x2da0
 800ff52:	4293      	cmp	r3, r2
 800ff54:	d055      	beq.n	8010002 <tcp_close_shutdown+0xf6>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	8b5b      	ldrh	r3, [r3, #26]
 800ff5a:	f003 0310 	and.w	r3, r3, #16
 800ff5e:	2b00      	cmp	r3, #0
 800ff60:	d106      	bne.n	800ff70 <tcp_close_shutdown+0x64>
 800ff62:	4b52      	ldr	r3, [pc, #328]	; (80100ac <tcp_close_shutdown+0x1a0>)
 800ff64:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800ff68:	4953      	ldr	r1, [pc, #332]	; (80100b8 <tcp_close_shutdown+0x1ac>)
 800ff6a:	4852      	ldr	r0, [pc, #328]	; (80100b4 <tcp_close_shutdown+0x1a8>)
 800ff6c:	f00b fa88 	bl	801b480 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800ff78:	687d      	ldr	r5, [r7, #4]
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	3304      	adds	r3, #4
 800ff7e:	687a      	ldr	r2, [r7, #4]
 800ff80:	8ad2      	ldrh	r2, [r2, #22]
 800ff82:	6879      	ldr	r1, [r7, #4]
 800ff84:	8b09      	ldrh	r1, [r1, #24]
 800ff86:	9102      	str	r1, [sp, #8]
 800ff88:	9201      	str	r2, [sp, #4]
 800ff8a:	9300      	str	r3, [sp, #0]
 800ff8c:	462b      	mov	r3, r5
 800ff8e:	4622      	mov	r2, r4
 800ff90:	4601      	mov	r1, r0
 800ff92:	6878      	ldr	r0, [r7, #4]
 800ff94:	f004 fedc 	bl	8014d50 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800ff98:	6878      	ldr	r0, [r7, #4]
 800ff9a:	f001 f8c9 	bl	8011130 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800ff9e:	4b47      	ldr	r3, [pc, #284]	; (80100bc <tcp_close_shutdown+0x1b0>)
 800ffa0:	681b      	ldr	r3, [r3, #0]
 800ffa2:	687a      	ldr	r2, [r7, #4]
 800ffa4:	429a      	cmp	r2, r3
 800ffa6:	d105      	bne.n	800ffb4 <tcp_close_shutdown+0xa8>
 800ffa8:	4b44      	ldr	r3, [pc, #272]	; (80100bc <tcp_close_shutdown+0x1b0>)
 800ffaa:	681b      	ldr	r3, [r3, #0]
 800ffac:	68db      	ldr	r3, [r3, #12]
 800ffae:	4a43      	ldr	r2, [pc, #268]	; (80100bc <tcp_close_shutdown+0x1b0>)
 800ffb0:	6013      	str	r3, [r2, #0]
 800ffb2:	e013      	b.n	800ffdc <tcp_close_shutdown+0xd0>
 800ffb4:	4b41      	ldr	r3, [pc, #260]	; (80100bc <tcp_close_shutdown+0x1b0>)
 800ffb6:	681b      	ldr	r3, [r3, #0]
 800ffb8:	60fb      	str	r3, [r7, #12]
 800ffba:	e00c      	b.n	800ffd6 <tcp_close_shutdown+0xca>
 800ffbc:	68fb      	ldr	r3, [r7, #12]
 800ffbe:	68db      	ldr	r3, [r3, #12]
 800ffc0:	687a      	ldr	r2, [r7, #4]
 800ffc2:	429a      	cmp	r2, r3
 800ffc4:	d104      	bne.n	800ffd0 <tcp_close_shutdown+0xc4>
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	68da      	ldr	r2, [r3, #12]
 800ffca:	68fb      	ldr	r3, [r7, #12]
 800ffcc:	60da      	str	r2, [r3, #12]
 800ffce:	e005      	b.n	800ffdc <tcp_close_shutdown+0xd0>
 800ffd0:	68fb      	ldr	r3, [r7, #12]
 800ffd2:	68db      	ldr	r3, [r3, #12]
 800ffd4:	60fb      	str	r3, [r7, #12]
 800ffd6:	68fb      	ldr	r3, [r7, #12]
 800ffd8:	2b00      	cmp	r3, #0
 800ffda:	d1ef      	bne.n	800ffbc <tcp_close_shutdown+0xb0>
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	2200      	movs	r2, #0
 800ffe0:	60da      	str	r2, [r3, #12]
 800ffe2:	4b37      	ldr	r3, [pc, #220]	; (80100c0 <tcp_close_shutdown+0x1b4>)
 800ffe4:	2201      	movs	r2, #1
 800ffe6:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800ffe8:	4b36      	ldr	r3, [pc, #216]	; (80100c4 <tcp_close_shutdown+0x1b8>)
 800ffea:	681b      	ldr	r3, [r3, #0]
 800ffec:	687a      	ldr	r2, [r7, #4]
 800ffee:	429a      	cmp	r2, r3
 800fff0:	d102      	bne.n	800fff8 <tcp_close_shutdown+0xec>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800fff2:	f003 fd75 	bl	8013ae0 <tcp_trigger_input_pcb_close>
 800fff6:	e002      	b.n	800fffe <tcp_close_shutdown+0xf2>
      } else {
        tcp_free(pcb);
 800fff8:	6878      	ldr	r0, [r7, #4]
 800fffa:	f7ff fed5 	bl	800fda8 <tcp_free>
      }
      return ERR_OK;
 800fffe:	2300      	movs	r3, #0
 8010000:	e050      	b.n	80100a4 <tcp_close_shutdown+0x198>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	7d1b      	ldrb	r3, [r3, #20]
 8010006:	2b02      	cmp	r3, #2
 8010008:	d03b      	beq.n	8010082 <tcp_close_shutdown+0x176>
 801000a:	2b02      	cmp	r3, #2
 801000c:	dc44      	bgt.n	8010098 <tcp_close_shutdown+0x18c>
 801000e:	2b00      	cmp	r3, #0
 8010010:	d002      	beq.n	8010018 <tcp_close_shutdown+0x10c>
 8010012:	2b01      	cmp	r3, #1
 8010014:	d02a      	beq.n	801006c <tcp_close_shutdown+0x160>
 8010016:	e03f      	b.n	8010098 <tcp_close_shutdown+0x18c>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	8adb      	ldrh	r3, [r3, #22]
 801001c:	2b00      	cmp	r3, #0
 801001e:	d021      	beq.n	8010064 <tcp_close_shutdown+0x158>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8010020:	4b29      	ldr	r3, [pc, #164]	; (80100c8 <tcp_close_shutdown+0x1bc>)
 8010022:	681b      	ldr	r3, [r3, #0]
 8010024:	687a      	ldr	r2, [r7, #4]
 8010026:	429a      	cmp	r2, r3
 8010028:	d105      	bne.n	8010036 <tcp_close_shutdown+0x12a>
 801002a:	4b27      	ldr	r3, [pc, #156]	; (80100c8 <tcp_close_shutdown+0x1bc>)
 801002c:	681b      	ldr	r3, [r3, #0]
 801002e:	68db      	ldr	r3, [r3, #12]
 8010030:	4a25      	ldr	r2, [pc, #148]	; (80100c8 <tcp_close_shutdown+0x1bc>)
 8010032:	6013      	str	r3, [r2, #0]
 8010034:	e013      	b.n	801005e <tcp_close_shutdown+0x152>
 8010036:	4b24      	ldr	r3, [pc, #144]	; (80100c8 <tcp_close_shutdown+0x1bc>)
 8010038:	681b      	ldr	r3, [r3, #0]
 801003a:	60bb      	str	r3, [r7, #8]
 801003c:	e00c      	b.n	8010058 <tcp_close_shutdown+0x14c>
 801003e:	68bb      	ldr	r3, [r7, #8]
 8010040:	68db      	ldr	r3, [r3, #12]
 8010042:	687a      	ldr	r2, [r7, #4]
 8010044:	429a      	cmp	r2, r3
 8010046:	d104      	bne.n	8010052 <tcp_close_shutdown+0x146>
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	68da      	ldr	r2, [r3, #12]
 801004c:	68bb      	ldr	r3, [r7, #8]
 801004e:	60da      	str	r2, [r3, #12]
 8010050:	e005      	b.n	801005e <tcp_close_shutdown+0x152>
 8010052:	68bb      	ldr	r3, [r7, #8]
 8010054:	68db      	ldr	r3, [r3, #12]
 8010056:	60bb      	str	r3, [r7, #8]
 8010058:	68bb      	ldr	r3, [r7, #8]
 801005a:	2b00      	cmp	r3, #0
 801005c:	d1ef      	bne.n	801003e <tcp_close_shutdown+0x132>
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	2200      	movs	r2, #0
 8010062:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8010064:	6878      	ldr	r0, [r7, #4]
 8010066:	f7ff fe9f 	bl	800fda8 <tcp_free>
      break;
 801006a:	e01a      	b.n	80100a2 <tcp_close_shutdown+0x196>
    case LISTEN:
      tcp_listen_closed(pcb);
 801006c:	6878      	ldr	r0, [r7, #4]
 801006e:	f7ff ff13 	bl	800fe98 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8010072:	6879      	ldr	r1, [r7, #4]
 8010074:	4815      	ldr	r0, [pc, #84]	; (80100cc <tcp_close_shutdown+0x1c0>)
 8010076:	f001 f8ab 	bl	80111d0 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 801007a:	6878      	ldr	r0, [r7, #4]
 801007c:	f7ff feb0 	bl	800fde0 <tcp_free_listen>
      break;
 8010080:	e00f      	b.n	80100a2 <tcp_close_shutdown+0x196>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8010082:	6879      	ldr	r1, [r7, #4]
 8010084:	480d      	ldr	r0, [pc, #52]	; (80100bc <tcp_close_shutdown+0x1b0>)
 8010086:	f001 f8a3 	bl	80111d0 <tcp_pcb_remove>
 801008a:	4b0d      	ldr	r3, [pc, #52]	; (80100c0 <tcp_close_shutdown+0x1b4>)
 801008c:	2201      	movs	r2, #1
 801008e:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8010090:	6878      	ldr	r0, [r7, #4]
 8010092:	f7ff fe89 	bl	800fda8 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8010096:	e004      	b.n	80100a2 <tcp_close_shutdown+0x196>
    default:
      return tcp_close_shutdown_fin(pcb);
 8010098:	6878      	ldr	r0, [r7, #4]
 801009a:	f000 f819 	bl	80100d0 <tcp_close_shutdown_fin>
 801009e:	4603      	mov	r3, r0
 80100a0:	e000      	b.n	80100a4 <tcp_close_shutdown+0x198>
  }
  return ERR_OK;
 80100a2:	2300      	movs	r3, #0
}
 80100a4:	4618      	mov	r0, r3
 80100a6:	3710      	adds	r7, #16
 80100a8:	46bd      	mov	sp, r7
 80100aa:	bdb0      	pop	{r4, r5, r7, pc}
 80100ac:	0801ee0c 	.word	0x0801ee0c
 80100b0:	0801eee0 	.word	0x0801eee0
 80100b4:	0801ee50 	.word	0x0801ee50
 80100b8:	0801ef00 	.word	0x0801ef00
 80100bc:	20013b80 	.word	0x20013b80
 80100c0:	20013b88 	.word	0x20013b88
 80100c4:	20013bc4 	.word	0x20013bc4
 80100c8:	20013b78 	.word	0x20013b78
 80100cc:	20013b7c 	.word	0x20013b7c

080100d0 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 80100d0:	b580      	push	{r7, lr}
 80100d2:	b084      	sub	sp, #16
 80100d4:	af00      	add	r7, sp, #0
 80100d6:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	2b00      	cmp	r3, #0
 80100dc:	d106      	bne.n	80100ec <tcp_close_shutdown_fin+0x1c>
 80100de:	4b2e      	ldr	r3, [pc, #184]	; (8010198 <tcp_close_shutdown_fin+0xc8>)
 80100e0:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 80100e4:	492d      	ldr	r1, [pc, #180]	; (801019c <tcp_close_shutdown_fin+0xcc>)
 80100e6:	482e      	ldr	r0, [pc, #184]	; (80101a0 <tcp_close_shutdown_fin+0xd0>)
 80100e8:	f00b f9ca 	bl	801b480 <iprintf>

  switch (pcb->state) {
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	7d1b      	ldrb	r3, [r3, #20]
 80100f0:	2b07      	cmp	r3, #7
 80100f2:	d020      	beq.n	8010136 <tcp_close_shutdown_fin+0x66>
 80100f4:	2b07      	cmp	r3, #7
 80100f6:	dc2b      	bgt.n	8010150 <tcp_close_shutdown_fin+0x80>
 80100f8:	2b03      	cmp	r3, #3
 80100fa:	d002      	beq.n	8010102 <tcp_close_shutdown_fin+0x32>
 80100fc:	2b04      	cmp	r3, #4
 80100fe:	d00d      	beq.n	801011c <tcp_close_shutdown_fin+0x4c>
 8010100:	e026      	b.n	8010150 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8010102:	6878      	ldr	r0, [r7, #4]
 8010104:	f003 ff04 	bl	8013f10 <tcp_send_fin>
 8010108:	4603      	mov	r3, r0
 801010a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 801010c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010110:	2b00      	cmp	r3, #0
 8010112:	d11f      	bne.n	8010154 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	2205      	movs	r2, #5
 8010118:	751a      	strb	r2, [r3, #20]
      }
      break;
 801011a:	e01b      	b.n	8010154 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 801011c:	6878      	ldr	r0, [r7, #4]
 801011e:	f003 fef7 	bl	8013f10 <tcp_send_fin>
 8010122:	4603      	mov	r3, r0
 8010124:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8010126:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801012a:	2b00      	cmp	r3, #0
 801012c:	d114      	bne.n	8010158 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	2205      	movs	r2, #5
 8010132:	751a      	strb	r2, [r3, #20]
      }
      break;
 8010134:	e010      	b.n	8010158 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8010136:	6878      	ldr	r0, [r7, #4]
 8010138:	f003 feea 	bl	8013f10 <tcp_send_fin>
 801013c:	4603      	mov	r3, r0
 801013e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8010140:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010144:	2b00      	cmp	r3, #0
 8010146:	d109      	bne.n	801015c <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	2209      	movs	r2, #9
 801014c:	751a      	strb	r2, [r3, #20]
      }
      break;
 801014e:	e005      	b.n	801015c <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8010150:	2300      	movs	r3, #0
 8010152:	e01c      	b.n	801018e <tcp_close_shutdown_fin+0xbe>
      break;
 8010154:	bf00      	nop
 8010156:	e002      	b.n	801015e <tcp_close_shutdown_fin+0x8e>
      break;
 8010158:	bf00      	nop
 801015a:	e000      	b.n	801015e <tcp_close_shutdown_fin+0x8e>
      break;
 801015c:	bf00      	nop
  }

  if (err == ERR_OK) {
 801015e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010162:	2b00      	cmp	r3, #0
 8010164:	d103      	bne.n	801016e <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8010166:	6878      	ldr	r0, [r7, #4]
 8010168:	f004 f810 	bl	801418c <tcp_output>
 801016c:	e00d      	b.n	801018a <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 801016e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010172:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010176:	d108      	bne.n	801018a <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	8b5b      	ldrh	r3, [r3, #26]
 801017c:	f043 0308 	orr.w	r3, r3, #8
 8010180:	b29a      	uxth	r2, r3
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8010186:	2300      	movs	r3, #0
 8010188:	e001      	b.n	801018e <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 801018a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801018e:	4618      	mov	r0, r3
 8010190:	3710      	adds	r7, #16
 8010192:	46bd      	mov	sp, r7
 8010194:	bd80      	pop	{r7, pc}
 8010196:	bf00      	nop
 8010198:	0801ee0c 	.word	0x0801ee0c
 801019c:	0801eebc 	.word	0x0801eebc
 80101a0:	0801ee50 	.word	0x0801ee50

080101a4 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 80101a4:	b580      	push	{r7, lr}
 80101a6:	b082      	sub	sp, #8
 80101a8:	af00      	add	r7, sp, #0
 80101aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	2b00      	cmp	r3, #0
 80101b0:	d109      	bne.n	80101c6 <tcp_close+0x22>
 80101b2:	4b0f      	ldr	r3, [pc, #60]	; (80101f0 <tcp_close+0x4c>)
 80101b4:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 80101b8:	490e      	ldr	r1, [pc, #56]	; (80101f4 <tcp_close+0x50>)
 80101ba:	480f      	ldr	r0, [pc, #60]	; (80101f8 <tcp_close+0x54>)
 80101bc:	f00b f960 	bl	801b480 <iprintf>
 80101c0:	f06f 030f 	mvn.w	r3, #15
 80101c4:	e00f      	b.n	80101e6 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	7d1b      	ldrb	r3, [r3, #20]
 80101ca:	2b01      	cmp	r3, #1
 80101cc:	d006      	beq.n	80101dc <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	8b5b      	ldrh	r3, [r3, #26]
 80101d2:	f043 0310 	orr.w	r3, r3, #16
 80101d6:	b29a      	uxth	r2, r3
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 80101dc:	2101      	movs	r1, #1
 80101de:	6878      	ldr	r0, [r7, #4]
 80101e0:	f7ff fe94 	bl	800ff0c <tcp_close_shutdown>
 80101e4:	4603      	mov	r3, r0
}
 80101e6:	4618      	mov	r0, r3
 80101e8:	3708      	adds	r7, #8
 80101ea:	46bd      	mov	sp, r7
 80101ec:	bd80      	pop	{r7, pc}
 80101ee:	bf00      	nop
 80101f0:	0801ee0c 	.word	0x0801ee0c
 80101f4:	0801ef1c 	.word	0x0801ef1c
 80101f8:	0801ee50 	.word	0x0801ee50

080101fc <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 80101fc:	b580      	push	{r7, lr}
 80101fe:	b08e      	sub	sp, #56	; 0x38
 8010200:	af04      	add	r7, sp, #16
 8010202:	6078      	str	r0, [r7, #4]
 8010204:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	2b00      	cmp	r3, #0
 801020a:	d107      	bne.n	801021c <tcp_abandon+0x20>
 801020c:	4b52      	ldr	r3, [pc, #328]	; (8010358 <tcp_abandon+0x15c>)
 801020e:	f240 223d 	movw	r2, #573	; 0x23d
 8010212:	4952      	ldr	r1, [pc, #328]	; (801035c <tcp_abandon+0x160>)
 8010214:	4852      	ldr	r0, [pc, #328]	; (8010360 <tcp_abandon+0x164>)
 8010216:	f00b f933 	bl	801b480 <iprintf>
 801021a:	e099      	b.n	8010350 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	7d1b      	ldrb	r3, [r3, #20]
 8010220:	2b01      	cmp	r3, #1
 8010222:	d106      	bne.n	8010232 <tcp_abandon+0x36>
 8010224:	4b4c      	ldr	r3, [pc, #304]	; (8010358 <tcp_abandon+0x15c>)
 8010226:	f44f 7210 	mov.w	r2, #576	; 0x240
 801022a:	494e      	ldr	r1, [pc, #312]	; (8010364 <tcp_abandon+0x168>)
 801022c:	484c      	ldr	r0, [pc, #304]	; (8010360 <tcp_abandon+0x164>)
 801022e:	f00b f927 	bl	801b480 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	7d1b      	ldrb	r3, [r3, #20]
 8010236:	2b0a      	cmp	r3, #10
 8010238:	d107      	bne.n	801024a <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 801023a:	6879      	ldr	r1, [r7, #4]
 801023c:	484a      	ldr	r0, [pc, #296]	; (8010368 <tcp_abandon+0x16c>)
 801023e:	f000 ffc7 	bl	80111d0 <tcp_pcb_remove>
    tcp_free(pcb);
 8010242:	6878      	ldr	r0, [r7, #4]
 8010244:	f7ff fdb0 	bl	800fda8 <tcp_free>
 8010248:	e082      	b.n	8010350 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 801024a:	2300      	movs	r3, #0
 801024c:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 801024e:	2300      	movs	r3, #0
 8010250:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010256:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801025c:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010264:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	691b      	ldr	r3, [r3, #16]
 801026a:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	7d1b      	ldrb	r3, [r3, #20]
 8010270:	2b00      	cmp	r3, #0
 8010272:	d126      	bne.n	80102c2 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	8adb      	ldrh	r3, [r3, #22]
 8010278:	2b00      	cmp	r3, #0
 801027a:	d02e      	beq.n	80102da <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801027c:	4b3b      	ldr	r3, [pc, #236]	; (801036c <tcp_abandon+0x170>)
 801027e:	681b      	ldr	r3, [r3, #0]
 8010280:	687a      	ldr	r2, [r7, #4]
 8010282:	429a      	cmp	r2, r3
 8010284:	d105      	bne.n	8010292 <tcp_abandon+0x96>
 8010286:	4b39      	ldr	r3, [pc, #228]	; (801036c <tcp_abandon+0x170>)
 8010288:	681b      	ldr	r3, [r3, #0]
 801028a:	68db      	ldr	r3, [r3, #12]
 801028c:	4a37      	ldr	r2, [pc, #220]	; (801036c <tcp_abandon+0x170>)
 801028e:	6013      	str	r3, [r2, #0]
 8010290:	e013      	b.n	80102ba <tcp_abandon+0xbe>
 8010292:	4b36      	ldr	r3, [pc, #216]	; (801036c <tcp_abandon+0x170>)
 8010294:	681b      	ldr	r3, [r3, #0]
 8010296:	61fb      	str	r3, [r7, #28]
 8010298:	e00c      	b.n	80102b4 <tcp_abandon+0xb8>
 801029a:	69fb      	ldr	r3, [r7, #28]
 801029c:	68db      	ldr	r3, [r3, #12]
 801029e:	687a      	ldr	r2, [r7, #4]
 80102a0:	429a      	cmp	r2, r3
 80102a2:	d104      	bne.n	80102ae <tcp_abandon+0xb2>
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	68da      	ldr	r2, [r3, #12]
 80102a8:	69fb      	ldr	r3, [r7, #28]
 80102aa:	60da      	str	r2, [r3, #12]
 80102ac:	e005      	b.n	80102ba <tcp_abandon+0xbe>
 80102ae:	69fb      	ldr	r3, [r7, #28]
 80102b0:	68db      	ldr	r3, [r3, #12]
 80102b2:	61fb      	str	r3, [r7, #28]
 80102b4:	69fb      	ldr	r3, [r7, #28]
 80102b6:	2b00      	cmp	r3, #0
 80102b8:	d1ef      	bne.n	801029a <tcp_abandon+0x9e>
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	2200      	movs	r2, #0
 80102be:	60da      	str	r2, [r3, #12]
 80102c0:	e00b      	b.n	80102da <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 80102c2:	683b      	ldr	r3, [r7, #0]
 80102c4:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	8adb      	ldrh	r3, [r3, #22]
 80102ca:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80102cc:	6879      	ldr	r1, [r7, #4]
 80102ce:	4828      	ldr	r0, [pc, #160]	; (8010370 <tcp_abandon+0x174>)
 80102d0:	f000 ff7e 	bl	80111d0 <tcp_pcb_remove>
 80102d4:	4b27      	ldr	r3, [pc, #156]	; (8010374 <tcp_abandon+0x178>)
 80102d6:	2201      	movs	r2, #1
 80102d8:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80102de:	2b00      	cmp	r3, #0
 80102e0:	d004      	beq.n	80102ec <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80102e6:	4618      	mov	r0, r3
 80102e8:	f000 fd20 	bl	8010d2c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80102f0:	2b00      	cmp	r3, #0
 80102f2:	d004      	beq.n	80102fe <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80102f8:	4618      	mov	r0, r3
 80102fa:	f000 fd17 	bl	8010d2c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010302:	2b00      	cmp	r3, #0
 8010304:	d004      	beq.n	8010310 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801030a:	4618      	mov	r0, r3
 801030c:	f000 fd0e 	bl	8010d2c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8010310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010312:	2b00      	cmp	r3, #0
 8010314:	d00e      	beq.n	8010334 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8010316:	6879      	ldr	r1, [r7, #4]
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	3304      	adds	r3, #4
 801031c:	687a      	ldr	r2, [r7, #4]
 801031e:	8b12      	ldrh	r2, [r2, #24]
 8010320:	9202      	str	r2, [sp, #8]
 8010322:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8010324:	9201      	str	r2, [sp, #4]
 8010326:	9300      	str	r3, [sp, #0]
 8010328:	460b      	mov	r3, r1
 801032a:	697a      	ldr	r2, [r7, #20]
 801032c:	69b9      	ldr	r1, [r7, #24]
 801032e:	6878      	ldr	r0, [r7, #4]
 8010330:	f004 fd0e 	bl	8014d50 <tcp_rst>
    }
    last_state = pcb->state;
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	7d1b      	ldrb	r3, [r3, #20]
 8010338:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 801033a:	6878      	ldr	r0, [r7, #4]
 801033c:	f7ff fd34 	bl	800fda8 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8010340:	693b      	ldr	r3, [r7, #16]
 8010342:	2b00      	cmp	r3, #0
 8010344:	d004      	beq.n	8010350 <tcp_abandon+0x154>
 8010346:	693b      	ldr	r3, [r7, #16]
 8010348:	f06f 010c 	mvn.w	r1, #12
 801034c:	68f8      	ldr	r0, [r7, #12]
 801034e:	4798      	blx	r3
  }
}
 8010350:	3728      	adds	r7, #40	; 0x28
 8010352:	46bd      	mov	sp, r7
 8010354:	bd80      	pop	{r7, pc}
 8010356:	bf00      	nop
 8010358:	0801ee0c 	.word	0x0801ee0c
 801035c:	0801ef50 	.word	0x0801ef50
 8010360:	0801ee50 	.word	0x0801ee50
 8010364:	0801ef6c 	.word	0x0801ef6c
 8010368:	20013b84 	.word	0x20013b84
 801036c:	20013b78 	.word	0x20013b78
 8010370:	20013b80 	.word	0x20013b80
 8010374:	20013b88 	.word	0x20013b88

08010378 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8010378:	b580      	push	{r7, lr}
 801037a:	b082      	sub	sp, #8
 801037c:	af00      	add	r7, sp, #0
 801037e:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8010380:	2101      	movs	r1, #1
 8010382:	6878      	ldr	r0, [r7, #4]
 8010384:	f7ff ff3a 	bl	80101fc <tcp_abandon>
}
 8010388:	bf00      	nop
 801038a:	3708      	adds	r7, #8
 801038c:	46bd      	mov	sp, r7
 801038e:	bd80      	pop	{r7, pc}

08010390 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8010390:	b580      	push	{r7, lr}
 8010392:	b084      	sub	sp, #16
 8010394:	af00      	add	r7, sp, #0
 8010396:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	2b00      	cmp	r3, #0
 801039c:	d106      	bne.n	80103ac <tcp_update_rcv_ann_wnd+0x1c>
 801039e:	4b25      	ldr	r3, [pc, #148]	; (8010434 <tcp_update_rcv_ann_wnd+0xa4>)
 80103a0:	f240 32a6 	movw	r2, #934	; 0x3a6
 80103a4:	4924      	ldr	r1, [pc, #144]	; (8010438 <tcp_update_rcv_ann_wnd+0xa8>)
 80103a6:	4825      	ldr	r0, [pc, #148]	; (801043c <tcp_update_rcv_ann_wnd+0xac>)
 80103a8:	f00b f86a 	bl	801b480 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80103b0:	687a      	ldr	r2, [r7, #4]
 80103b2:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 80103b4:	4413      	add	r3, r2
 80103b6:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80103bc:	687a      	ldr	r2, [r7, #4]
 80103be:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 80103c0:	f241 61d0 	movw	r1, #5840	; 0x16d0
 80103c4:	428a      	cmp	r2, r1
 80103c6:	bf28      	it	cs
 80103c8:	460a      	movcs	r2, r1
 80103ca:	b292      	uxth	r2, r2
 80103cc:	4413      	add	r3, r2
 80103ce:	68fa      	ldr	r2, [r7, #12]
 80103d0:	1ad3      	subs	r3, r2, r3
 80103d2:	2b00      	cmp	r3, #0
 80103d4:	db08      	blt.n	80103e8 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80103e2:	68fa      	ldr	r2, [r7, #12]
 80103e4:	1ad3      	subs	r3, r2, r3
 80103e6:	e020      	b.n	801042a <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80103f0:	1ad3      	subs	r3, r2, r3
 80103f2:	2b00      	cmp	r3, #0
 80103f4:	dd03      	ble.n	80103fe <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	2200      	movs	r2, #0
 80103fa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80103fc:	e014      	b.n	8010428 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010406:	1ad3      	subs	r3, r2, r3
 8010408:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 801040a:	68bb      	ldr	r3, [r7, #8]
 801040c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010410:	d306      	bcc.n	8010420 <tcp_update_rcv_ann_wnd+0x90>
 8010412:	4b08      	ldr	r3, [pc, #32]	; (8010434 <tcp_update_rcv_ann_wnd+0xa4>)
 8010414:	f240 32b6 	movw	r2, #950	; 0x3b6
 8010418:	4909      	ldr	r1, [pc, #36]	; (8010440 <tcp_update_rcv_ann_wnd+0xb0>)
 801041a:	4808      	ldr	r0, [pc, #32]	; (801043c <tcp_update_rcv_ann_wnd+0xac>)
 801041c:	f00b f830 	bl	801b480 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8010420:	68bb      	ldr	r3, [r7, #8]
 8010422:	b29a      	uxth	r2, r3
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8010428:	2300      	movs	r3, #0
  }
}
 801042a:	4618      	mov	r0, r3
 801042c:	3710      	adds	r7, #16
 801042e:	46bd      	mov	sp, r7
 8010430:	bd80      	pop	{r7, pc}
 8010432:	bf00      	nop
 8010434:	0801ee0c 	.word	0x0801ee0c
 8010438:	0801f068 	.word	0x0801f068
 801043c:	0801ee50 	.word	0x0801ee50
 8010440:	0801f08c 	.word	0x0801f08c

08010444 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8010444:	b580      	push	{r7, lr}
 8010446:	b084      	sub	sp, #16
 8010448:	af00      	add	r7, sp, #0
 801044a:	6078      	str	r0, [r7, #4]
 801044c:	460b      	mov	r3, r1
 801044e:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	2b00      	cmp	r3, #0
 8010454:	d107      	bne.n	8010466 <tcp_recved+0x22>
 8010456:	4b20      	ldr	r3, [pc, #128]	; (80104d8 <tcp_recved+0x94>)
 8010458:	f240 32cf 	movw	r2, #975	; 0x3cf
 801045c:	491f      	ldr	r1, [pc, #124]	; (80104dc <tcp_recved+0x98>)
 801045e:	4820      	ldr	r0, [pc, #128]	; (80104e0 <tcp_recved+0x9c>)
 8010460:	f00b f80e 	bl	801b480 <iprintf>
 8010464:	e034      	b.n	80104d0 <tcp_recved+0x8c>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	7d1b      	ldrb	r3, [r3, #20]
 801046a:	2b01      	cmp	r3, #1
 801046c:	d106      	bne.n	801047c <tcp_recved+0x38>
 801046e:	4b1a      	ldr	r3, [pc, #104]	; (80104d8 <tcp_recved+0x94>)
 8010470:	f240 32d2 	movw	r2, #978	; 0x3d2
 8010474:	491b      	ldr	r1, [pc, #108]	; (80104e4 <tcp_recved+0xa0>)
 8010476:	481a      	ldr	r0, [pc, #104]	; (80104e0 <tcp_recved+0x9c>)
 8010478:	f00b f802 	bl	801b480 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 801047c:	687b      	ldr	r3, [r7, #4]
 801047e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010480:	887b      	ldrh	r3, [r7, #2]
 8010482:	4413      	add	r3, r2
 8010484:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8010486:	89fb      	ldrh	r3, [r7, #14]
 8010488:	f642 52a0 	movw	r2, #11680	; 0x2da0
 801048c:	4293      	cmp	r3, r2
 801048e:	d804      	bhi.n	801049a <tcp_recved+0x56>
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010494:	89fa      	ldrh	r2, [r7, #14]
 8010496:	429a      	cmp	r2, r3
 8010498:	d204      	bcs.n	80104a4 <tcp_recved+0x60>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	f642 52a0 	movw	r2, #11680	; 0x2da0
 80104a0:	851a      	strh	r2, [r3, #40]	; 0x28
 80104a2:	e002      	b.n	80104aa <tcp_recved+0x66>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	89fa      	ldrh	r2, [r7, #14]
 80104a8:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80104aa:	6878      	ldr	r0, [r7, #4]
 80104ac:	f7ff ff70 	bl	8010390 <tcp_update_rcv_ann_wnd>
 80104b0:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 80104b2:	68bb      	ldr	r3, [r7, #8]
 80104b4:	f640 3267 	movw	r2, #2919	; 0xb67
 80104b8:	4293      	cmp	r3, r2
 80104ba:	d909      	bls.n	80104d0 <tcp_recved+0x8c>
    tcp_ack_now(pcb);
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	8b5b      	ldrh	r3, [r3, #26]
 80104c0:	f043 0302 	orr.w	r3, r3, #2
 80104c4:	b29a      	uxth	r2, r3
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80104ca:	6878      	ldr	r0, [r7, #4]
 80104cc:	f003 fe5e 	bl	801418c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 80104d0:	3710      	adds	r7, #16
 80104d2:	46bd      	mov	sp, r7
 80104d4:	bd80      	pop	{r7, pc}
 80104d6:	bf00      	nop
 80104d8:	0801ee0c 	.word	0x0801ee0c
 80104dc:	0801f0a8 	.word	0x0801f0a8
 80104e0:	0801ee50 	.word	0x0801ee50
 80104e4:	0801f0c0 	.word	0x0801f0c0

080104e8 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 80104e8:	b5b0      	push	{r4, r5, r7, lr}
 80104ea:	b090      	sub	sp, #64	; 0x40
 80104ec:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 80104ee:	2300      	movs	r3, #0
 80104f0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 80104f4:	4b94      	ldr	r3, [pc, #592]	; (8010748 <tcp_slowtmr+0x260>)
 80104f6:	681b      	ldr	r3, [r3, #0]
 80104f8:	3301      	adds	r3, #1
 80104fa:	4a93      	ldr	r2, [pc, #588]	; (8010748 <tcp_slowtmr+0x260>)
 80104fc:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 80104fe:	4b93      	ldr	r3, [pc, #588]	; (801074c <tcp_slowtmr+0x264>)
 8010500:	781b      	ldrb	r3, [r3, #0]
 8010502:	3301      	adds	r3, #1
 8010504:	b2da      	uxtb	r2, r3
 8010506:	4b91      	ldr	r3, [pc, #580]	; (801074c <tcp_slowtmr+0x264>)
 8010508:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 801050a:	2300      	movs	r3, #0
 801050c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 801050e:	4b90      	ldr	r3, [pc, #576]	; (8010750 <tcp_slowtmr+0x268>)
 8010510:	681b      	ldr	r3, [r3, #0]
 8010512:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8010514:	e29f      	b.n	8010a56 <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8010516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010518:	7d1b      	ldrb	r3, [r3, #20]
 801051a:	2b00      	cmp	r3, #0
 801051c:	d106      	bne.n	801052c <tcp_slowtmr+0x44>
 801051e:	4b8d      	ldr	r3, [pc, #564]	; (8010754 <tcp_slowtmr+0x26c>)
 8010520:	f240 42be 	movw	r2, #1214	; 0x4be
 8010524:	498c      	ldr	r1, [pc, #560]	; (8010758 <tcp_slowtmr+0x270>)
 8010526:	488d      	ldr	r0, [pc, #564]	; (801075c <tcp_slowtmr+0x274>)
 8010528:	f00a ffaa 	bl	801b480 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 801052c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801052e:	7d1b      	ldrb	r3, [r3, #20]
 8010530:	2b01      	cmp	r3, #1
 8010532:	d106      	bne.n	8010542 <tcp_slowtmr+0x5a>
 8010534:	4b87      	ldr	r3, [pc, #540]	; (8010754 <tcp_slowtmr+0x26c>)
 8010536:	f240 42bf 	movw	r2, #1215	; 0x4bf
 801053a:	4989      	ldr	r1, [pc, #548]	; (8010760 <tcp_slowtmr+0x278>)
 801053c:	4887      	ldr	r0, [pc, #540]	; (801075c <tcp_slowtmr+0x274>)
 801053e:	f00a ff9f 	bl	801b480 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8010542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010544:	7d1b      	ldrb	r3, [r3, #20]
 8010546:	2b0a      	cmp	r3, #10
 8010548:	d106      	bne.n	8010558 <tcp_slowtmr+0x70>
 801054a:	4b82      	ldr	r3, [pc, #520]	; (8010754 <tcp_slowtmr+0x26c>)
 801054c:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8010550:	4984      	ldr	r1, [pc, #528]	; (8010764 <tcp_slowtmr+0x27c>)
 8010552:	4882      	ldr	r0, [pc, #520]	; (801075c <tcp_slowtmr+0x274>)
 8010554:	f00a ff94 	bl	801b480 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8010558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801055a:	7f9a      	ldrb	r2, [r3, #30]
 801055c:	4b7b      	ldr	r3, [pc, #492]	; (801074c <tcp_slowtmr+0x264>)
 801055e:	781b      	ldrb	r3, [r3, #0]
 8010560:	429a      	cmp	r2, r3
 8010562:	d105      	bne.n	8010570 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8010564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010566:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8010568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801056a:	68db      	ldr	r3, [r3, #12]
 801056c:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 801056e:	e272      	b.n	8010a56 <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 8010570:	4b76      	ldr	r3, [pc, #472]	; (801074c <tcp_slowtmr+0x264>)
 8010572:	781a      	ldrb	r2, [r3, #0]
 8010574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010576:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8010578:	2300      	movs	r3, #0
 801057a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 801057e:	2300      	movs	r3, #0
 8010580:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8010584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010586:	7d1b      	ldrb	r3, [r3, #20]
 8010588:	2b02      	cmp	r3, #2
 801058a:	d10a      	bne.n	80105a2 <tcp_slowtmr+0xba>
 801058c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801058e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010592:	2b05      	cmp	r3, #5
 8010594:	d905      	bls.n	80105a2 <tcp_slowtmr+0xba>
      ++pcb_remove;
 8010596:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801059a:	3301      	adds	r3, #1
 801059c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
 80105a0:	e11e      	b.n	80107e0 <tcp_slowtmr+0x2f8>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 80105a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105a4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80105a8:	2b0b      	cmp	r3, #11
 80105aa:	d905      	bls.n	80105b8 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 80105ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80105b0:	3301      	adds	r3, #1
 80105b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80105b6:	e113      	b.n	80107e0 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 80105b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105ba:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80105be:	2b00      	cmp	r3, #0
 80105c0:	d075      	beq.n	80106ae <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 80105c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80105c6:	2b00      	cmp	r3, #0
 80105c8:	d006      	beq.n	80105d8 <tcp_slowtmr+0xf0>
 80105ca:	4b62      	ldr	r3, [pc, #392]	; (8010754 <tcp_slowtmr+0x26c>)
 80105cc:	f240 42d4 	movw	r2, #1236	; 0x4d4
 80105d0:	4965      	ldr	r1, [pc, #404]	; (8010768 <tcp_slowtmr+0x280>)
 80105d2:	4862      	ldr	r0, [pc, #392]	; (801075c <tcp_slowtmr+0x274>)
 80105d4:	f00a ff54 	bl	801b480 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 80105d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80105dc:	2b00      	cmp	r3, #0
 80105de:	d106      	bne.n	80105ee <tcp_slowtmr+0x106>
 80105e0:	4b5c      	ldr	r3, [pc, #368]	; (8010754 <tcp_slowtmr+0x26c>)
 80105e2:	f240 42d5 	movw	r2, #1237	; 0x4d5
 80105e6:	4961      	ldr	r1, [pc, #388]	; (801076c <tcp_slowtmr+0x284>)
 80105e8:	485c      	ldr	r0, [pc, #368]	; (801075c <tcp_slowtmr+0x274>)
 80105ea:	f00a ff49 	bl	801b480 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 80105ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105f0:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80105f4:	2b0b      	cmp	r3, #11
 80105f6:	d905      	bls.n	8010604 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 80105f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80105fc:	3301      	adds	r3, #1
 80105fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010602:	e0ed      	b.n	80107e0 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8010604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010606:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801060a:	3b01      	subs	r3, #1
 801060c:	4a58      	ldr	r2, [pc, #352]	; (8010770 <tcp_slowtmr+0x288>)
 801060e:	5cd3      	ldrb	r3, [r2, r3]
 8010610:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8010612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010614:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8010618:	7c7a      	ldrb	r2, [r7, #17]
 801061a:	429a      	cmp	r2, r3
 801061c:	d907      	bls.n	801062e <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 801061e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010620:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8010624:	3301      	adds	r3, #1
 8010626:	b2da      	uxtb	r2, r3
 8010628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801062a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 801062e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010630:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8010634:	7c7a      	ldrb	r2, [r7, #17]
 8010636:	429a      	cmp	r2, r3
 8010638:	f200 80d2 	bhi.w	80107e0 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 801063c:	2301      	movs	r3, #1
 801063e:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8010640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010642:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010646:	2b00      	cmp	r3, #0
 8010648:	d108      	bne.n	801065c <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 801064a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801064c:	f004 fc74 	bl	8014f38 <tcp_zero_window_probe>
 8010650:	4603      	mov	r3, r0
 8010652:	2b00      	cmp	r3, #0
 8010654:	d014      	beq.n	8010680 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8010656:	2300      	movs	r3, #0
 8010658:	623b      	str	r3, [r7, #32]
 801065a:	e011      	b.n	8010680 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 801065c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801065e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010662:	4619      	mov	r1, r3
 8010664:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010666:	f003 fb07 	bl	8013c78 <tcp_split_unsent_seg>
 801066a:	4603      	mov	r3, r0
 801066c:	2b00      	cmp	r3, #0
 801066e:	d107      	bne.n	8010680 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8010670:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010672:	f003 fd8b 	bl	801418c <tcp_output>
 8010676:	4603      	mov	r3, r0
 8010678:	2b00      	cmp	r3, #0
 801067a:	d101      	bne.n	8010680 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 801067c:	2300      	movs	r3, #0
 801067e:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8010680:	6a3b      	ldr	r3, [r7, #32]
 8010682:	2b00      	cmp	r3, #0
 8010684:	f000 80ac 	beq.w	80107e0 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8010688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801068a:	2200      	movs	r2, #0
 801068c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8010690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010692:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8010696:	2b06      	cmp	r3, #6
 8010698:	f200 80a2 	bhi.w	80107e0 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 801069c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801069e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80106a2:	3301      	adds	r3, #1
 80106a4:	b2da      	uxtb	r2, r3
 80106a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106a8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 80106ac:	e098      	b.n	80107e0 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 80106ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106b0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80106b4:	2b00      	cmp	r3, #0
 80106b6:	db0f      	blt.n	80106d8 <tcp_slowtmr+0x1f0>
 80106b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106ba:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80106be:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80106c2:	4293      	cmp	r3, r2
 80106c4:	d008      	beq.n	80106d8 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 80106c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106c8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80106cc:	b29b      	uxth	r3, r3
 80106ce:	3301      	adds	r3, #1
 80106d0:	b29b      	uxth	r3, r3
 80106d2:	b21a      	sxth	r2, r3
 80106d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106d6:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 80106d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106da:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 80106de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106e0:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80106e4:	429a      	cmp	r2, r3
 80106e6:	db7b      	blt.n	80107e0 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 80106e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80106ea:	f004 f855 	bl	8014798 <tcp_rexmit_rto_prepare>
 80106ee:	4603      	mov	r3, r0
 80106f0:	2b00      	cmp	r3, #0
 80106f2:	d007      	beq.n	8010704 <tcp_slowtmr+0x21c>
 80106f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80106f8:	2b00      	cmp	r3, #0
 80106fa:	d171      	bne.n	80107e0 <tcp_slowtmr+0x2f8>
 80106fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010700:	2b00      	cmp	r3, #0
 8010702:	d06d      	beq.n	80107e0 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8010704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010706:	7d1b      	ldrb	r3, [r3, #20]
 8010708:	2b02      	cmp	r3, #2
 801070a:	d03a      	beq.n	8010782 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 801070c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801070e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010712:	2b0c      	cmp	r3, #12
 8010714:	bf28      	it	cs
 8010716:	230c      	movcs	r3, #12
 8010718:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 801071a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801071c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010720:	10db      	asrs	r3, r3, #3
 8010722:	b21b      	sxth	r3, r3
 8010724:	461a      	mov	r2, r3
 8010726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010728:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801072c:	4413      	add	r3, r2
 801072e:	7efa      	ldrb	r2, [r7, #27]
 8010730:	4910      	ldr	r1, [pc, #64]	; (8010774 <tcp_slowtmr+0x28c>)
 8010732:	5c8a      	ldrb	r2, [r1, r2]
 8010734:	4093      	lsls	r3, r2
 8010736:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8010738:	697b      	ldr	r3, [r7, #20]
 801073a:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 801073e:	4293      	cmp	r3, r2
 8010740:	dc1a      	bgt.n	8010778 <tcp_slowtmr+0x290>
 8010742:	697b      	ldr	r3, [r7, #20]
 8010744:	b21a      	sxth	r2, r3
 8010746:	e019      	b.n	801077c <tcp_slowtmr+0x294>
 8010748:	20013b74 	.word	0x20013b74
 801074c:	20013b8a 	.word	0x20013b8a
 8010750:	20013b80 	.word	0x20013b80
 8010754:	0801ee0c 	.word	0x0801ee0c
 8010758:	0801f150 	.word	0x0801f150
 801075c:	0801ee50 	.word	0x0801ee50
 8010760:	0801f17c 	.word	0x0801f17c
 8010764:	0801f1a8 	.word	0x0801f1a8
 8010768:	0801f1d8 	.word	0x0801f1d8
 801076c:	0801f20c 	.word	0x0801f20c
 8010770:	0806cf40 	.word	0x0806cf40
 8010774:	0806cf30 	.word	0x0806cf30
 8010778:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801077c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801077e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8010782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010784:	2200      	movs	r2, #0
 8010786:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8010788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801078a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801078e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010790:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010794:	4293      	cmp	r3, r2
 8010796:	bf28      	it	cs
 8010798:	4613      	movcs	r3, r2
 801079a:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 801079c:	8a7b      	ldrh	r3, [r7, #18]
 801079e:	085b      	lsrs	r3, r3, #1
 80107a0:	b29a      	uxth	r2, r3
 80107a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107a4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80107a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107aa:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80107ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107b0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80107b2:	005b      	lsls	r3, r3, #1
 80107b4:	b29b      	uxth	r3, r3
 80107b6:	429a      	cmp	r2, r3
 80107b8:	d206      	bcs.n	80107c8 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 80107ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107bc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80107be:	005b      	lsls	r3, r3, #1
 80107c0:	b29a      	uxth	r2, r3
 80107c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107c4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 80107c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107ca:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 80107cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107ce:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 80107d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107d4:	2200      	movs	r2, #0
 80107d6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 80107da:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80107dc:	f004 f856 	bl	801488c <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 80107e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107e2:	7d1b      	ldrb	r3, [r3, #20]
 80107e4:	2b06      	cmp	r3, #6
 80107e6:	d111      	bne.n	801080c <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 80107e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107ea:	8b5b      	ldrh	r3, [r3, #26]
 80107ec:	f003 0310 	and.w	r3, r3, #16
 80107f0:	2b00      	cmp	r3, #0
 80107f2:	d00b      	beq.n	801080c <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80107f4:	4b9d      	ldr	r3, [pc, #628]	; (8010a6c <tcp_slowtmr+0x584>)
 80107f6:	681a      	ldr	r2, [r3, #0]
 80107f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107fa:	6a1b      	ldr	r3, [r3, #32]
 80107fc:	1ad3      	subs	r3, r2, r3
 80107fe:	2b28      	cmp	r3, #40	; 0x28
 8010800:	d904      	bls.n	801080c <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8010802:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010806:	3301      	adds	r3, #1
 8010808:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 801080c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801080e:	7a5b      	ldrb	r3, [r3, #9]
 8010810:	f003 0308 	and.w	r3, r3, #8
 8010814:	2b00      	cmp	r3, #0
 8010816:	d04c      	beq.n	80108b2 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8010818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801081a:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 801081c:	2b04      	cmp	r3, #4
 801081e:	d003      	beq.n	8010828 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8010820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010822:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8010824:	2b07      	cmp	r3, #7
 8010826:	d144      	bne.n	80108b2 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8010828:	4b90      	ldr	r3, [pc, #576]	; (8010a6c <tcp_slowtmr+0x584>)
 801082a:	681a      	ldr	r2, [r3, #0]
 801082c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801082e:	6a1b      	ldr	r3, [r3, #32]
 8010830:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8010832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010834:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8010838:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 801083c:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 8010840:	498b      	ldr	r1, [pc, #556]	; (8010a70 <tcp_slowtmr+0x588>)
 8010842:	fba1 1303 	umull	r1, r3, r1, r3
 8010846:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8010848:	429a      	cmp	r2, r3
 801084a:	d90a      	bls.n	8010862 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 801084c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010850:	3301      	adds	r3, #1
 8010852:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8010856:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801085a:	3301      	adds	r3, #1
 801085c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8010860:	e027      	b.n	80108b2 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8010862:	4b82      	ldr	r3, [pc, #520]	; (8010a6c <tcp_slowtmr+0x584>)
 8010864:	681a      	ldr	r2, [r3, #0]
 8010866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010868:	6a1b      	ldr	r3, [r3, #32]
 801086a:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 801086c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801086e:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8010872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010874:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8010878:	4618      	mov	r0, r3
 801087a:	4b7e      	ldr	r3, [pc, #504]	; (8010a74 <tcp_slowtmr+0x58c>)
 801087c:	fb00 f303 	mul.w	r3, r0, r3
 8010880:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8010882:	497b      	ldr	r1, [pc, #492]	; (8010a70 <tcp_slowtmr+0x588>)
 8010884:	fba1 1303 	umull	r1, r3, r1, r3
 8010888:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801088a:	429a      	cmp	r2, r3
 801088c:	d911      	bls.n	80108b2 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 801088e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010890:	f004 fb12 	bl	8014eb8 <tcp_keepalive>
 8010894:	4603      	mov	r3, r0
 8010896:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 801089a:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 801089e:	2b00      	cmp	r3, #0
 80108a0:	d107      	bne.n	80108b2 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 80108a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108a4:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80108a8:	3301      	adds	r3, #1
 80108aa:	b2da      	uxtb	r2, r3
 80108ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108ae:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 80108b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80108b6:	2b00      	cmp	r3, #0
 80108b8:	d011      	beq.n	80108de <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 80108ba:	4b6c      	ldr	r3, [pc, #432]	; (8010a6c <tcp_slowtmr+0x584>)
 80108bc:	681a      	ldr	r2, [r3, #0]
 80108be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108c0:	6a1b      	ldr	r3, [r3, #32]
 80108c2:	1ad2      	subs	r2, r2, r3
 80108c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108c6:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80108ca:	4619      	mov	r1, r3
 80108cc:	460b      	mov	r3, r1
 80108ce:	005b      	lsls	r3, r3, #1
 80108d0:	440b      	add	r3, r1
 80108d2:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 80108d4:	429a      	cmp	r2, r3
 80108d6:	d302      	bcc.n	80108de <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 80108d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80108da:	f000 fddd 	bl	8011498 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 80108de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108e0:	7d1b      	ldrb	r3, [r3, #20]
 80108e2:	2b03      	cmp	r3, #3
 80108e4:	d10b      	bne.n	80108fe <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80108e6:	4b61      	ldr	r3, [pc, #388]	; (8010a6c <tcp_slowtmr+0x584>)
 80108e8:	681a      	ldr	r2, [r3, #0]
 80108ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108ec:	6a1b      	ldr	r3, [r3, #32]
 80108ee:	1ad3      	subs	r3, r2, r3
 80108f0:	2b28      	cmp	r3, #40	; 0x28
 80108f2:	d904      	bls.n	80108fe <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 80108f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80108f8:	3301      	adds	r3, #1
 80108fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 80108fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010900:	7d1b      	ldrb	r3, [r3, #20]
 8010902:	2b09      	cmp	r3, #9
 8010904:	d10b      	bne.n	801091e <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8010906:	4b59      	ldr	r3, [pc, #356]	; (8010a6c <tcp_slowtmr+0x584>)
 8010908:	681a      	ldr	r2, [r3, #0]
 801090a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801090c:	6a1b      	ldr	r3, [r3, #32]
 801090e:	1ad3      	subs	r3, r2, r3
 8010910:	2bf0      	cmp	r3, #240	; 0xf0
 8010912:	d904      	bls.n	801091e <tcp_slowtmr+0x436>
        ++pcb_remove;
 8010914:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010918:	3301      	adds	r3, #1
 801091a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 801091e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010922:	2b00      	cmp	r3, #0
 8010924:	d060      	beq.n	80109e8 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8010926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010928:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801092c:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 801092e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010930:	f000 fbfe 	bl	8011130 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8010934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010936:	2b00      	cmp	r3, #0
 8010938:	d010      	beq.n	801095c <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 801093a:	4b4f      	ldr	r3, [pc, #316]	; (8010a78 <tcp_slowtmr+0x590>)
 801093c:	681b      	ldr	r3, [r3, #0]
 801093e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010940:	429a      	cmp	r2, r3
 8010942:	d106      	bne.n	8010952 <tcp_slowtmr+0x46a>
 8010944:	4b4d      	ldr	r3, [pc, #308]	; (8010a7c <tcp_slowtmr+0x594>)
 8010946:	f240 526d 	movw	r2, #1389	; 0x56d
 801094a:	494d      	ldr	r1, [pc, #308]	; (8010a80 <tcp_slowtmr+0x598>)
 801094c:	484d      	ldr	r0, [pc, #308]	; (8010a84 <tcp_slowtmr+0x59c>)
 801094e:	f00a fd97 	bl	801b480 <iprintf>
        prev->next = pcb->next;
 8010952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010954:	68da      	ldr	r2, [r3, #12]
 8010956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010958:	60da      	str	r2, [r3, #12]
 801095a:	e00f      	b.n	801097c <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 801095c:	4b46      	ldr	r3, [pc, #280]	; (8010a78 <tcp_slowtmr+0x590>)
 801095e:	681b      	ldr	r3, [r3, #0]
 8010960:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010962:	429a      	cmp	r2, r3
 8010964:	d006      	beq.n	8010974 <tcp_slowtmr+0x48c>
 8010966:	4b45      	ldr	r3, [pc, #276]	; (8010a7c <tcp_slowtmr+0x594>)
 8010968:	f240 5271 	movw	r2, #1393	; 0x571
 801096c:	4946      	ldr	r1, [pc, #280]	; (8010a88 <tcp_slowtmr+0x5a0>)
 801096e:	4845      	ldr	r0, [pc, #276]	; (8010a84 <tcp_slowtmr+0x59c>)
 8010970:	f00a fd86 	bl	801b480 <iprintf>
        tcp_active_pcbs = pcb->next;
 8010974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010976:	68db      	ldr	r3, [r3, #12]
 8010978:	4a3f      	ldr	r2, [pc, #252]	; (8010a78 <tcp_slowtmr+0x590>)
 801097a:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 801097c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010980:	2b00      	cmp	r3, #0
 8010982:	d013      	beq.n	80109ac <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8010984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010986:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8010988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801098a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 801098c:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 801098e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010990:	3304      	adds	r3, #4
 8010992:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010994:	8ad2      	ldrh	r2, [r2, #22]
 8010996:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010998:	8b09      	ldrh	r1, [r1, #24]
 801099a:	9102      	str	r1, [sp, #8]
 801099c:	9201      	str	r2, [sp, #4]
 801099e:	9300      	str	r3, [sp, #0]
 80109a0:	462b      	mov	r3, r5
 80109a2:	4622      	mov	r2, r4
 80109a4:	4601      	mov	r1, r0
 80109a6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80109a8:	f004 f9d2 	bl	8014d50 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 80109ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109ae:	691b      	ldr	r3, [r3, #16]
 80109b0:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 80109b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109b4:	7d1b      	ldrb	r3, [r3, #20]
 80109b6:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 80109b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109ba:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 80109bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109be:	68db      	ldr	r3, [r3, #12]
 80109c0:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80109c2:	6838      	ldr	r0, [r7, #0]
 80109c4:	f7ff f9f0 	bl	800fda8 <tcp_free>

      tcp_active_pcbs_changed = 0;
 80109c8:	4b30      	ldr	r3, [pc, #192]	; (8010a8c <tcp_slowtmr+0x5a4>)
 80109ca:	2200      	movs	r2, #0
 80109cc:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 80109ce:	68fb      	ldr	r3, [r7, #12]
 80109d0:	2b00      	cmp	r3, #0
 80109d2:	d004      	beq.n	80109de <tcp_slowtmr+0x4f6>
 80109d4:	68fb      	ldr	r3, [r7, #12]
 80109d6:	f06f 010c 	mvn.w	r1, #12
 80109da:	68b8      	ldr	r0, [r7, #8]
 80109dc:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 80109de:	4b2b      	ldr	r3, [pc, #172]	; (8010a8c <tcp_slowtmr+0x5a4>)
 80109e0:	781b      	ldrb	r3, [r3, #0]
 80109e2:	2b00      	cmp	r3, #0
 80109e4:	d037      	beq.n	8010a56 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 80109e6:	e590      	b.n	801050a <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 80109e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109ea:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80109ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109ee:	68db      	ldr	r3, [r3, #12]
 80109f0:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 80109f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109f4:	7f1b      	ldrb	r3, [r3, #28]
 80109f6:	3301      	adds	r3, #1
 80109f8:	b2da      	uxtb	r2, r3
 80109fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109fc:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 80109fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a00:	7f1a      	ldrb	r2, [r3, #28]
 8010a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a04:	7f5b      	ldrb	r3, [r3, #29]
 8010a06:	429a      	cmp	r2, r3
 8010a08:	d325      	bcc.n	8010a56 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 8010a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a0c:	2200      	movs	r2, #0
 8010a0e:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8010a10:	4b1e      	ldr	r3, [pc, #120]	; (8010a8c <tcp_slowtmr+0x5a4>)
 8010a12:	2200      	movs	r2, #0
 8010a14:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8010a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010a1c:	2b00      	cmp	r3, #0
 8010a1e:	d00b      	beq.n	8010a38 <tcp_slowtmr+0x550>
 8010a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010a26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010a28:	6912      	ldr	r2, [r2, #16]
 8010a2a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010a2c:	4610      	mov	r0, r2
 8010a2e:	4798      	blx	r3
 8010a30:	4603      	mov	r3, r0
 8010a32:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8010a36:	e002      	b.n	8010a3e <tcp_slowtmr+0x556>
 8010a38:	2300      	movs	r3, #0
 8010a3a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8010a3e:	4b13      	ldr	r3, [pc, #76]	; (8010a8c <tcp_slowtmr+0x5a4>)
 8010a40:	781b      	ldrb	r3, [r3, #0]
 8010a42:	2b00      	cmp	r3, #0
 8010a44:	d000      	beq.n	8010a48 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 8010a46:	e560      	b.n	801050a <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8010a48:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8010a4c:	2b00      	cmp	r3, #0
 8010a4e:	d102      	bne.n	8010a56 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8010a50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010a52:	f003 fb9b 	bl	801418c <tcp_output>
  while (pcb != NULL) {
 8010a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a58:	2b00      	cmp	r3, #0
 8010a5a:	f47f ad5c 	bne.w	8010516 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8010a5e:	2300      	movs	r3, #0
 8010a60:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8010a62:	4b0b      	ldr	r3, [pc, #44]	; (8010a90 <tcp_slowtmr+0x5a8>)
 8010a64:	681b      	ldr	r3, [r3, #0]
 8010a66:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8010a68:	e067      	b.n	8010b3a <tcp_slowtmr+0x652>
 8010a6a:	bf00      	nop
 8010a6c:	20013b74 	.word	0x20013b74
 8010a70:	10624dd3 	.word	0x10624dd3
 8010a74:	000124f8 	.word	0x000124f8
 8010a78:	20013b80 	.word	0x20013b80
 8010a7c:	0801ee0c 	.word	0x0801ee0c
 8010a80:	0801f244 	.word	0x0801f244
 8010a84:	0801ee50 	.word	0x0801ee50
 8010a88:	0801f270 	.word	0x0801f270
 8010a8c:	20013b88 	.word	0x20013b88
 8010a90:	20013b84 	.word	0x20013b84
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8010a94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a96:	7d1b      	ldrb	r3, [r3, #20]
 8010a98:	2b0a      	cmp	r3, #10
 8010a9a:	d006      	beq.n	8010aaa <tcp_slowtmr+0x5c2>
 8010a9c:	4b2b      	ldr	r3, [pc, #172]	; (8010b4c <tcp_slowtmr+0x664>)
 8010a9e:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8010aa2:	492b      	ldr	r1, [pc, #172]	; (8010b50 <tcp_slowtmr+0x668>)
 8010aa4:	482b      	ldr	r0, [pc, #172]	; (8010b54 <tcp_slowtmr+0x66c>)
 8010aa6:	f00a fceb 	bl	801b480 <iprintf>
    pcb_remove = 0;
 8010aaa:	2300      	movs	r3, #0
 8010aac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8010ab0:	4b29      	ldr	r3, [pc, #164]	; (8010b58 <tcp_slowtmr+0x670>)
 8010ab2:	681a      	ldr	r2, [r3, #0]
 8010ab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ab6:	6a1b      	ldr	r3, [r3, #32]
 8010ab8:	1ad3      	subs	r3, r2, r3
 8010aba:	2bf0      	cmp	r3, #240	; 0xf0
 8010abc:	d904      	bls.n	8010ac8 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8010abe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010ac2:	3301      	adds	r3, #1
 8010ac4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8010ac8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010acc:	2b00      	cmp	r3, #0
 8010ace:	d02f      	beq.n	8010b30 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8010ad0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010ad2:	f000 fb2d 	bl	8011130 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8010ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ad8:	2b00      	cmp	r3, #0
 8010ada:	d010      	beq.n	8010afe <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8010adc:	4b1f      	ldr	r3, [pc, #124]	; (8010b5c <tcp_slowtmr+0x674>)
 8010ade:	681b      	ldr	r3, [r3, #0]
 8010ae0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010ae2:	429a      	cmp	r2, r3
 8010ae4:	d106      	bne.n	8010af4 <tcp_slowtmr+0x60c>
 8010ae6:	4b19      	ldr	r3, [pc, #100]	; (8010b4c <tcp_slowtmr+0x664>)
 8010ae8:	f240 52af 	movw	r2, #1455	; 0x5af
 8010aec:	491c      	ldr	r1, [pc, #112]	; (8010b60 <tcp_slowtmr+0x678>)
 8010aee:	4819      	ldr	r0, [pc, #100]	; (8010b54 <tcp_slowtmr+0x66c>)
 8010af0:	f00a fcc6 	bl	801b480 <iprintf>
        prev->next = pcb->next;
 8010af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010af6:	68da      	ldr	r2, [r3, #12]
 8010af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010afa:	60da      	str	r2, [r3, #12]
 8010afc:	e00f      	b.n	8010b1e <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8010afe:	4b17      	ldr	r3, [pc, #92]	; (8010b5c <tcp_slowtmr+0x674>)
 8010b00:	681b      	ldr	r3, [r3, #0]
 8010b02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010b04:	429a      	cmp	r2, r3
 8010b06:	d006      	beq.n	8010b16 <tcp_slowtmr+0x62e>
 8010b08:	4b10      	ldr	r3, [pc, #64]	; (8010b4c <tcp_slowtmr+0x664>)
 8010b0a:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8010b0e:	4915      	ldr	r1, [pc, #84]	; (8010b64 <tcp_slowtmr+0x67c>)
 8010b10:	4810      	ldr	r0, [pc, #64]	; (8010b54 <tcp_slowtmr+0x66c>)
 8010b12:	f00a fcb5 	bl	801b480 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8010b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b18:	68db      	ldr	r3, [r3, #12]
 8010b1a:	4a10      	ldr	r2, [pc, #64]	; (8010b5c <tcp_slowtmr+0x674>)
 8010b1c:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8010b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b20:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8010b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b24:	68db      	ldr	r3, [r3, #12]
 8010b26:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8010b28:	69f8      	ldr	r0, [r7, #28]
 8010b2a:	f7ff f93d 	bl	800fda8 <tcp_free>
 8010b2e:	e004      	b.n	8010b3a <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8010b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b32:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8010b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b36:	68db      	ldr	r3, [r3, #12]
 8010b38:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8010b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b3c:	2b00      	cmp	r3, #0
 8010b3e:	d1a9      	bne.n	8010a94 <tcp_slowtmr+0x5ac>
    }
  }
}
 8010b40:	bf00      	nop
 8010b42:	bf00      	nop
 8010b44:	3730      	adds	r7, #48	; 0x30
 8010b46:	46bd      	mov	sp, r7
 8010b48:	bdb0      	pop	{r4, r5, r7, pc}
 8010b4a:	bf00      	nop
 8010b4c:	0801ee0c 	.word	0x0801ee0c
 8010b50:	0801f29c 	.word	0x0801f29c
 8010b54:	0801ee50 	.word	0x0801ee50
 8010b58:	20013b74 	.word	0x20013b74
 8010b5c:	20013b84 	.word	0x20013b84
 8010b60:	0801f2cc 	.word	0x0801f2cc
 8010b64:	0801f2f4 	.word	0x0801f2f4

08010b68 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8010b68:	b580      	push	{r7, lr}
 8010b6a:	b082      	sub	sp, #8
 8010b6c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8010b6e:	4b2d      	ldr	r3, [pc, #180]	; (8010c24 <tcp_fasttmr+0xbc>)
 8010b70:	781b      	ldrb	r3, [r3, #0]
 8010b72:	3301      	adds	r3, #1
 8010b74:	b2da      	uxtb	r2, r3
 8010b76:	4b2b      	ldr	r3, [pc, #172]	; (8010c24 <tcp_fasttmr+0xbc>)
 8010b78:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8010b7a:	4b2b      	ldr	r3, [pc, #172]	; (8010c28 <tcp_fasttmr+0xc0>)
 8010b7c:	681b      	ldr	r3, [r3, #0]
 8010b7e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8010b80:	e048      	b.n	8010c14 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	7f9a      	ldrb	r2, [r3, #30]
 8010b86:	4b27      	ldr	r3, [pc, #156]	; (8010c24 <tcp_fasttmr+0xbc>)
 8010b88:	781b      	ldrb	r3, [r3, #0]
 8010b8a:	429a      	cmp	r2, r3
 8010b8c:	d03f      	beq.n	8010c0e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8010b8e:	4b25      	ldr	r3, [pc, #148]	; (8010c24 <tcp_fasttmr+0xbc>)
 8010b90:	781a      	ldrb	r2, [r3, #0]
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	8b5b      	ldrh	r3, [r3, #26]
 8010b9a:	f003 0301 	and.w	r3, r3, #1
 8010b9e:	2b00      	cmp	r3, #0
 8010ba0:	d010      	beq.n	8010bc4 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	8b5b      	ldrh	r3, [r3, #26]
 8010ba6:	f043 0302 	orr.w	r3, r3, #2
 8010baa:	b29a      	uxth	r2, r3
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8010bb0:	6878      	ldr	r0, [r7, #4]
 8010bb2:	f003 faeb 	bl	801418c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010bb6:	687b      	ldr	r3, [r7, #4]
 8010bb8:	8b5b      	ldrh	r3, [r3, #26]
 8010bba:	f023 0303 	bic.w	r3, r3, #3
 8010bbe:	b29a      	uxth	r2, r3
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8010bc4:	687b      	ldr	r3, [r7, #4]
 8010bc6:	8b5b      	ldrh	r3, [r3, #26]
 8010bc8:	f003 0308 	and.w	r3, r3, #8
 8010bcc:	2b00      	cmp	r3, #0
 8010bce:	d009      	beq.n	8010be4 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	8b5b      	ldrh	r3, [r3, #26]
 8010bd4:	f023 0308 	bic.w	r3, r3, #8
 8010bd8:	b29a      	uxth	r2, r3
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8010bde:	6878      	ldr	r0, [r7, #4]
 8010be0:	f7ff fa76 	bl	80100d0 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	68db      	ldr	r3, [r3, #12]
 8010be8:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010bee:	2b00      	cmp	r3, #0
 8010bf0:	d00a      	beq.n	8010c08 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8010bf2:	4b0e      	ldr	r3, [pc, #56]	; (8010c2c <tcp_fasttmr+0xc4>)
 8010bf4:	2200      	movs	r2, #0
 8010bf6:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8010bf8:	6878      	ldr	r0, [r7, #4]
 8010bfa:	f000 f819 	bl	8010c30 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8010bfe:	4b0b      	ldr	r3, [pc, #44]	; (8010c2c <tcp_fasttmr+0xc4>)
 8010c00:	781b      	ldrb	r3, [r3, #0]
 8010c02:	2b00      	cmp	r3, #0
 8010c04:	d000      	beq.n	8010c08 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8010c06:	e7b8      	b.n	8010b7a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8010c08:	683b      	ldr	r3, [r7, #0]
 8010c0a:	607b      	str	r3, [r7, #4]
 8010c0c:	e002      	b.n	8010c14 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	68db      	ldr	r3, [r3, #12]
 8010c12:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	2b00      	cmp	r3, #0
 8010c18:	d1b3      	bne.n	8010b82 <tcp_fasttmr+0x1a>
    }
  }
}
 8010c1a:	bf00      	nop
 8010c1c:	bf00      	nop
 8010c1e:	3708      	adds	r7, #8
 8010c20:	46bd      	mov	sp, r7
 8010c22:	bd80      	pop	{r7, pc}
 8010c24:	20013b8a 	.word	0x20013b8a
 8010c28:	20013b80 	.word	0x20013b80
 8010c2c:	20013b88 	.word	0x20013b88

08010c30 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8010c30:	b590      	push	{r4, r7, lr}
 8010c32:	b085      	sub	sp, #20
 8010c34:	af00      	add	r7, sp, #0
 8010c36:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	2b00      	cmp	r3, #0
 8010c3c:	d109      	bne.n	8010c52 <tcp_process_refused_data+0x22>
 8010c3e:	4b38      	ldr	r3, [pc, #224]	; (8010d20 <tcp_process_refused_data+0xf0>)
 8010c40:	f240 6209 	movw	r2, #1545	; 0x609
 8010c44:	4937      	ldr	r1, [pc, #220]	; (8010d24 <tcp_process_refused_data+0xf4>)
 8010c46:	4838      	ldr	r0, [pc, #224]	; (8010d28 <tcp_process_refused_data+0xf8>)
 8010c48:	f00a fc1a 	bl	801b480 <iprintf>
 8010c4c:	f06f 030f 	mvn.w	r3, #15
 8010c50:	e061      	b.n	8010d16 <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010c56:	7b5b      	ldrb	r3, [r3, #13]
 8010c58:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010c5e:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	2200      	movs	r2, #0
 8010c64:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010c6c:	2b00      	cmp	r3, #0
 8010c6e:	d00b      	beq.n	8010c88 <tcp_process_refused_data+0x58>
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8010c76:	687b      	ldr	r3, [r7, #4]
 8010c78:	6918      	ldr	r0, [r3, #16]
 8010c7a:	2300      	movs	r3, #0
 8010c7c:	68ba      	ldr	r2, [r7, #8]
 8010c7e:	6879      	ldr	r1, [r7, #4]
 8010c80:	47a0      	blx	r4
 8010c82:	4603      	mov	r3, r0
 8010c84:	73fb      	strb	r3, [r7, #15]
 8010c86:	e007      	b.n	8010c98 <tcp_process_refused_data+0x68>
 8010c88:	2300      	movs	r3, #0
 8010c8a:	68ba      	ldr	r2, [r7, #8]
 8010c8c:	6879      	ldr	r1, [r7, #4]
 8010c8e:	2000      	movs	r0, #0
 8010c90:	f000 f8a6 	bl	8010de0 <tcp_recv_null>
 8010c94:	4603      	mov	r3, r0
 8010c96:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8010c98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010c9c:	2b00      	cmp	r3, #0
 8010c9e:	d12b      	bne.n	8010cf8 <tcp_process_refused_data+0xc8>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8010ca0:	7bbb      	ldrb	r3, [r7, #14]
 8010ca2:	f003 0320 	and.w	r3, r3, #32
 8010ca6:	2b00      	cmp	r3, #0
 8010ca8:	d034      	beq.n	8010d14 <tcp_process_refused_data+0xe4>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010cae:	f642 52a0 	movw	r2, #11680	; 0x2da0
 8010cb2:	4293      	cmp	r3, r2
 8010cb4:	d005      	beq.n	8010cc2 <tcp_process_refused_data+0x92>
          pcb->rcv_wnd++;
 8010cb6:	687b      	ldr	r3, [r7, #4]
 8010cb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010cba:	3301      	adds	r3, #1
 8010cbc:	b29a      	uxth	r2, r3
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8010cc2:	687b      	ldr	r3, [r7, #4]
 8010cc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010cc8:	2b00      	cmp	r3, #0
 8010cca:	d00b      	beq.n	8010ce4 <tcp_process_refused_data+0xb4>
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	6918      	ldr	r0, [r3, #16]
 8010cd6:	2300      	movs	r3, #0
 8010cd8:	2200      	movs	r2, #0
 8010cda:	6879      	ldr	r1, [r7, #4]
 8010cdc:	47a0      	blx	r4
 8010cde:	4603      	mov	r3, r0
 8010ce0:	73fb      	strb	r3, [r7, #15]
 8010ce2:	e001      	b.n	8010ce8 <tcp_process_refused_data+0xb8>
 8010ce4:	2300      	movs	r3, #0
 8010ce6:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8010ce8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010cec:	f113 0f0d 	cmn.w	r3, #13
 8010cf0:	d110      	bne.n	8010d14 <tcp_process_refused_data+0xe4>
          return ERR_ABRT;
 8010cf2:	f06f 030c 	mvn.w	r3, #12
 8010cf6:	e00e      	b.n	8010d16 <tcp_process_refused_data+0xe6>
        }
      }
    } else if (err == ERR_ABRT) {
 8010cf8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010cfc:	f113 0f0d 	cmn.w	r3, #13
 8010d00:	d102      	bne.n	8010d08 <tcp_process_refused_data+0xd8>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8010d02:	f06f 030c 	mvn.w	r3, #12
 8010d06:	e006      	b.n	8010d16 <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8010d08:	687b      	ldr	r3, [r7, #4]
 8010d0a:	68ba      	ldr	r2, [r7, #8]
 8010d0c:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8010d0e:	f06f 0304 	mvn.w	r3, #4
 8010d12:	e000      	b.n	8010d16 <tcp_process_refused_data+0xe6>
    }
  }
  return ERR_OK;
 8010d14:	2300      	movs	r3, #0
}
 8010d16:	4618      	mov	r0, r3
 8010d18:	3714      	adds	r7, #20
 8010d1a:	46bd      	mov	sp, r7
 8010d1c:	bd90      	pop	{r4, r7, pc}
 8010d1e:	bf00      	nop
 8010d20:	0801ee0c 	.word	0x0801ee0c
 8010d24:	0801f31c 	.word	0x0801f31c
 8010d28:	0801ee50 	.word	0x0801ee50

08010d2c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8010d2c:	b580      	push	{r7, lr}
 8010d2e:	b084      	sub	sp, #16
 8010d30:	af00      	add	r7, sp, #0
 8010d32:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8010d34:	e007      	b.n	8010d46 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	681b      	ldr	r3, [r3, #0]
 8010d3a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8010d3c:	6878      	ldr	r0, [r7, #4]
 8010d3e:	f000 f80a 	bl	8010d56 <tcp_seg_free>
    seg = next;
 8010d42:	68fb      	ldr	r3, [r7, #12]
 8010d44:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	2b00      	cmp	r3, #0
 8010d4a:	d1f4      	bne.n	8010d36 <tcp_segs_free+0xa>
  }
}
 8010d4c:	bf00      	nop
 8010d4e:	bf00      	nop
 8010d50:	3710      	adds	r7, #16
 8010d52:	46bd      	mov	sp, r7
 8010d54:	bd80      	pop	{r7, pc}

08010d56 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8010d56:	b580      	push	{r7, lr}
 8010d58:	b082      	sub	sp, #8
 8010d5a:	af00      	add	r7, sp, #0
 8010d5c:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	2b00      	cmp	r3, #0
 8010d62:	d00c      	beq.n	8010d7e <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8010d64:	687b      	ldr	r3, [r7, #4]
 8010d66:	685b      	ldr	r3, [r3, #4]
 8010d68:	2b00      	cmp	r3, #0
 8010d6a:	d004      	beq.n	8010d76 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	685b      	ldr	r3, [r3, #4]
 8010d70:	4618      	mov	r0, r3
 8010d72:	f7fe fbc9 	bl	800f508 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8010d76:	6879      	ldr	r1, [r7, #4]
 8010d78:	2003      	movs	r0, #3
 8010d7a:	f7fd fd23 	bl	800e7c4 <memp_free>
  }
}
 8010d7e:	bf00      	nop
 8010d80:	3708      	adds	r7, #8
 8010d82:	46bd      	mov	sp, r7
 8010d84:	bd80      	pop	{r7, pc}
	...

08010d88 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8010d88:	b580      	push	{r7, lr}
 8010d8a:	b084      	sub	sp, #16
 8010d8c:	af00      	add	r7, sp, #0
 8010d8e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	2b00      	cmp	r3, #0
 8010d94:	d106      	bne.n	8010da4 <tcp_seg_copy+0x1c>
 8010d96:	4b0f      	ldr	r3, [pc, #60]	; (8010dd4 <tcp_seg_copy+0x4c>)
 8010d98:	f240 6282 	movw	r2, #1666	; 0x682
 8010d9c:	490e      	ldr	r1, [pc, #56]	; (8010dd8 <tcp_seg_copy+0x50>)
 8010d9e:	480f      	ldr	r0, [pc, #60]	; (8010ddc <tcp_seg_copy+0x54>)
 8010da0:	f00a fb6e 	bl	801b480 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8010da4:	2003      	movs	r0, #3
 8010da6:	f7fd fcbb 	bl	800e720 <memp_malloc>
 8010daa:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8010dac:	68fb      	ldr	r3, [r7, #12]
 8010dae:	2b00      	cmp	r3, #0
 8010db0:	d101      	bne.n	8010db6 <tcp_seg_copy+0x2e>
    return NULL;
 8010db2:	2300      	movs	r3, #0
 8010db4:	e00a      	b.n	8010dcc <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8010db6:	2214      	movs	r2, #20
 8010db8:	6879      	ldr	r1, [r7, #4]
 8010dba:	68f8      	ldr	r0, [r7, #12]
 8010dbc:	f009 fdea 	bl	801a994 <memcpy>
  pbuf_ref(cseg->p);
 8010dc0:	68fb      	ldr	r3, [r7, #12]
 8010dc2:	685b      	ldr	r3, [r3, #4]
 8010dc4:	4618      	mov	r0, r3
 8010dc6:	f7fe fc45 	bl	800f654 <pbuf_ref>
  return cseg;
 8010dca:	68fb      	ldr	r3, [r7, #12]
}
 8010dcc:	4618      	mov	r0, r3
 8010dce:	3710      	adds	r7, #16
 8010dd0:	46bd      	mov	sp, r7
 8010dd2:	bd80      	pop	{r7, pc}
 8010dd4:	0801ee0c 	.word	0x0801ee0c
 8010dd8:	0801f360 	.word	0x0801f360
 8010ddc:	0801ee50 	.word	0x0801ee50

08010de0 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8010de0:	b580      	push	{r7, lr}
 8010de2:	b084      	sub	sp, #16
 8010de4:	af00      	add	r7, sp, #0
 8010de6:	60f8      	str	r0, [r7, #12]
 8010de8:	60b9      	str	r1, [r7, #8]
 8010dea:	607a      	str	r2, [r7, #4]
 8010dec:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8010dee:	68bb      	ldr	r3, [r7, #8]
 8010df0:	2b00      	cmp	r3, #0
 8010df2:	d109      	bne.n	8010e08 <tcp_recv_null+0x28>
 8010df4:	4b12      	ldr	r3, [pc, #72]	; (8010e40 <tcp_recv_null+0x60>)
 8010df6:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8010dfa:	4912      	ldr	r1, [pc, #72]	; (8010e44 <tcp_recv_null+0x64>)
 8010dfc:	4812      	ldr	r0, [pc, #72]	; (8010e48 <tcp_recv_null+0x68>)
 8010dfe:	f00a fb3f 	bl	801b480 <iprintf>
 8010e02:	f06f 030f 	mvn.w	r3, #15
 8010e06:	e016      	b.n	8010e36 <tcp_recv_null+0x56>

  if (p != NULL) {
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	2b00      	cmp	r3, #0
 8010e0c:	d009      	beq.n	8010e22 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	891b      	ldrh	r3, [r3, #8]
 8010e12:	4619      	mov	r1, r3
 8010e14:	68b8      	ldr	r0, [r7, #8]
 8010e16:	f7ff fb15 	bl	8010444 <tcp_recved>
    pbuf_free(p);
 8010e1a:	6878      	ldr	r0, [r7, #4]
 8010e1c:	f7fe fb74 	bl	800f508 <pbuf_free>
 8010e20:	e008      	b.n	8010e34 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8010e22:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010e26:	2b00      	cmp	r3, #0
 8010e28:	d104      	bne.n	8010e34 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8010e2a:	68b8      	ldr	r0, [r7, #8]
 8010e2c:	f7ff f9ba 	bl	80101a4 <tcp_close>
 8010e30:	4603      	mov	r3, r0
 8010e32:	e000      	b.n	8010e36 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8010e34:	2300      	movs	r3, #0
}
 8010e36:	4618      	mov	r0, r3
 8010e38:	3710      	adds	r7, #16
 8010e3a:	46bd      	mov	sp, r7
 8010e3c:	bd80      	pop	{r7, pc}
 8010e3e:	bf00      	nop
 8010e40:	0801ee0c 	.word	0x0801ee0c
 8010e44:	0801f37c 	.word	0x0801f37c
 8010e48:	0801ee50 	.word	0x0801ee50

08010e4c <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8010e4c:	b580      	push	{r7, lr}
 8010e4e:	b086      	sub	sp, #24
 8010e50:	af00      	add	r7, sp, #0
 8010e52:	4603      	mov	r3, r0
 8010e54:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8010e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010e5a:	2b00      	cmp	r3, #0
 8010e5c:	db01      	blt.n	8010e62 <tcp_kill_prio+0x16>
 8010e5e:	79fb      	ldrb	r3, [r7, #7]
 8010e60:	e000      	b.n	8010e64 <tcp_kill_prio+0x18>
 8010e62:	237f      	movs	r3, #127	; 0x7f
 8010e64:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8010e66:	7afb      	ldrb	r3, [r7, #11]
 8010e68:	2b00      	cmp	r3, #0
 8010e6a:	d034      	beq.n	8010ed6 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8010e6c:	7afb      	ldrb	r3, [r7, #11]
 8010e6e:	3b01      	subs	r3, #1
 8010e70:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8010e72:	2300      	movs	r3, #0
 8010e74:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8010e76:	2300      	movs	r3, #0
 8010e78:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010e7a:	4b19      	ldr	r3, [pc, #100]	; (8010ee0 <tcp_kill_prio+0x94>)
 8010e7c:	681b      	ldr	r3, [r3, #0]
 8010e7e:	617b      	str	r3, [r7, #20]
 8010e80:	e01f      	b.n	8010ec2 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8010e82:	697b      	ldr	r3, [r7, #20]
 8010e84:	7d5b      	ldrb	r3, [r3, #21]
 8010e86:	7afa      	ldrb	r2, [r7, #11]
 8010e88:	429a      	cmp	r2, r3
 8010e8a:	d80c      	bhi.n	8010ea6 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8010e8c:	697b      	ldr	r3, [r7, #20]
 8010e8e:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8010e90:	7afa      	ldrb	r2, [r7, #11]
 8010e92:	429a      	cmp	r2, r3
 8010e94:	d112      	bne.n	8010ebc <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8010e96:	4b13      	ldr	r3, [pc, #76]	; (8010ee4 <tcp_kill_prio+0x98>)
 8010e98:	681a      	ldr	r2, [r3, #0]
 8010e9a:	697b      	ldr	r3, [r7, #20]
 8010e9c:	6a1b      	ldr	r3, [r3, #32]
 8010e9e:	1ad3      	subs	r3, r2, r3
 8010ea0:	68fa      	ldr	r2, [r7, #12]
 8010ea2:	429a      	cmp	r2, r3
 8010ea4:	d80a      	bhi.n	8010ebc <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8010ea6:	4b0f      	ldr	r3, [pc, #60]	; (8010ee4 <tcp_kill_prio+0x98>)
 8010ea8:	681a      	ldr	r2, [r3, #0]
 8010eaa:	697b      	ldr	r3, [r7, #20]
 8010eac:	6a1b      	ldr	r3, [r3, #32]
 8010eae:	1ad3      	subs	r3, r2, r3
 8010eb0:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8010eb2:	697b      	ldr	r3, [r7, #20]
 8010eb4:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8010eb6:	697b      	ldr	r3, [r7, #20]
 8010eb8:	7d5b      	ldrb	r3, [r3, #21]
 8010eba:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010ebc:	697b      	ldr	r3, [r7, #20]
 8010ebe:	68db      	ldr	r3, [r3, #12]
 8010ec0:	617b      	str	r3, [r7, #20]
 8010ec2:	697b      	ldr	r3, [r7, #20]
 8010ec4:	2b00      	cmp	r3, #0
 8010ec6:	d1dc      	bne.n	8010e82 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8010ec8:	693b      	ldr	r3, [r7, #16]
 8010eca:	2b00      	cmp	r3, #0
 8010ecc:	d004      	beq.n	8010ed8 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8010ece:	6938      	ldr	r0, [r7, #16]
 8010ed0:	f7ff fa52 	bl	8010378 <tcp_abort>
 8010ed4:	e000      	b.n	8010ed8 <tcp_kill_prio+0x8c>
    return;
 8010ed6:	bf00      	nop
  }
}
 8010ed8:	3718      	adds	r7, #24
 8010eda:	46bd      	mov	sp, r7
 8010edc:	bd80      	pop	{r7, pc}
 8010ede:	bf00      	nop
 8010ee0:	20013b80 	.word	0x20013b80
 8010ee4:	20013b74 	.word	0x20013b74

08010ee8 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8010ee8:	b580      	push	{r7, lr}
 8010eea:	b086      	sub	sp, #24
 8010eec:	af00      	add	r7, sp, #0
 8010eee:	4603      	mov	r3, r0
 8010ef0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8010ef2:	79fb      	ldrb	r3, [r7, #7]
 8010ef4:	2b08      	cmp	r3, #8
 8010ef6:	d009      	beq.n	8010f0c <tcp_kill_state+0x24>
 8010ef8:	79fb      	ldrb	r3, [r7, #7]
 8010efa:	2b09      	cmp	r3, #9
 8010efc:	d006      	beq.n	8010f0c <tcp_kill_state+0x24>
 8010efe:	4b1a      	ldr	r3, [pc, #104]	; (8010f68 <tcp_kill_state+0x80>)
 8010f00:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8010f04:	4919      	ldr	r1, [pc, #100]	; (8010f6c <tcp_kill_state+0x84>)
 8010f06:	481a      	ldr	r0, [pc, #104]	; (8010f70 <tcp_kill_state+0x88>)
 8010f08:	f00a faba 	bl	801b480 <iprintf>

  inactivity = 0;
 8010f0c:	2300      	movs	r3, #0
 8010f0e:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8010f10:	2300      	movs	r3, #0
 8010f12:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010f14:	4b17      	ldr	r3, [pc, #92]	; (8010f74 <tcp_kill_state+0x8c>)
 8010f16:	681b      	ldr	r3, [r3, #0]
 8010f18:	617b      	str	r3, [r7, #20]
 8010f1a:	e017      	b.n	8010f4c <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8010f1c:	697b      	ldr	r3, [r7, #20]
 8010f1e:	7d1b      	ldrb	r3, [r3, #20]
 8010f20:	79fa      	ldrb	r2, [r7, #7]
 8010f22:	429a      	cmp	r2, r3
 8010f24:	d10f      	bne.n	8010f46 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8010f26:	4b14      	ldr	r3, [pc, #80]	; (8010f78 <tcp_kill_state+0x90>)
 8010f28:	681a      	ldr	r2, [r3, #0]
 8010f2a:	697b      	ldr	r3, [r7, #20]
 8010f2c:	6a1b      	ldr	r3, [r3, #32]
 8010f2e:	1ad3      	subs	r3, r2, r3
 8010f30:	68fa      	ldr	r2, [r7, #12]
 8010f32:	429a      	cmp	r2, r3
 8010f34:	d807      	bhi.n	8010f46 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8010f36:	4b10      	ldr	r3, [pc, #64]	; (8010f78 <tcp_kill_state+0x90>)
 8010f38:	681a      	ldr	r2, [r3, #0]
 8010f3a:	697b      	ldr	r3, [r7, #20]
 8010f3c:	6a1b      	ldr	r3, [r3, #32]
 8010f3e:	1ad3      	subs	r3, r2, r3
 8010f40:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8010f42:	697b      	ldr	r3, [r7, #20]
 8010f44:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010f46:	697b      	ldr	r3, [r7, #20]
 8010f48:	68db      	ldr	r3, [r3, #12]
 8010f4a:	617b      	str	r3, [r7, #20]
 8010f4c:	697b      	ldr	r3, [r7, #20]
 8010f4e:	2b00      	cmp	r3, #0
 8010f50:	d1e4      	bne.n	8010f1c <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8010f52:	693b      	ldr	r3, [r7, #16]
 8010f54:	2b00      	cmp	r3, #0
 8010f56:	d003      	beq.n	8010f60 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8010f58:	2100      	movs	r1, #0
 8010f5a:	6938      	ldr	r0, [r7, #16]
 8010f5c:	f7ff f94e 	bl	80101fc <tcp_abandon>
  }
}
 8010f60:	bf00      	nop
 8010f62:	3718      	adds	r7, #24
 8010f64:	46bd      	mov	sp, r7
 8010f66:	bd80      	pop	{r7, pc}
 8010f68:	0801ee0c 	.word	0x0801ee0c
 8010f6c:	0801f398 	.word	0x0801f398
 8010f70:	0801ee50 	.word	0x0801ee50
 8010f74:	20013b80 	.word	0x20013b80
 8010f78:	20013b74 	.word	0x20013b74

08010f7c <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8010f7c:	b580      	push	{r7, lr}
 8010f7e:	b084      	sub	sp, #16
 8010f80:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8010f82:	2300      	movs	r3, #0
 8010f84:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8010f86:	2300      	movs	r3, #0
 8010f88:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010f8a:	4b12      	ldr	r3, [pc, #72]	; (8010fd4 <tcp_kill_timewait+0x58>)
 8010f8c:	681b      	ldr	r3, [r3, #0]
 8010f8e:	60fb      	str	r3, [r7, #12]
 8010f90:	e012      	b.n	8010fb8 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8010f92:	4b11      	ldr	r3, [pc, #68]	; (8010fd8 <tcp_kill_timewait+0x5c>)
 8010f94:	681a      	ldr	r2, [r3, #0]
 8010f96:	68fb      	ldr	r3, [r7, #12]
 8010f98:	6a1b      	ldr	r3, [r3, #32]
 8010f9a:	1ad3      	subs	r3, r2, r3
 8010f9c:	687a      	ldr	r2, [r7, #4]
 8010f9e:	429a      	cmp	r2, r3
 8010fa0:	d807      	bhi.n	8010fb2 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8010fa2:	4b0d      	ldr	r3, [pc, #52]	; (8010fd8 <tcp_kill_timewait+0x5c>)
 8010fa4:	681a      	ldr	r2, [r3, #0]
 8010fa6:	68fb      	ldr	r3, [r7, #12]
 8010fa8:	6a1b      	ldr	r3, [r3, #32]
 8010faa:	1ad3      	subs	r3, r2, r3
 8010fac:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8010fae:	68fb      	ldr	r3, [r7, #12]
 8010fb0:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010fb2:	68fb      	ldr	r3, [r7, #12]
 8010fb4:	68db      	ldr	r3, [r3, #12]
 8010fb6:	60fb      	str	r3, [r7, #12]
 8010fb8:	68fb      	ldr	r3, [r7, #12]
 8010fba:	2b00      	cmp	r3, #0
 8010fbc:	d1e9      	bne.n	8010f92 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8010fbe:	68bb      	ldr	r3, [r7, #8]
 8010fc0:	2b00      	cmp	r3, #0
 8010fc2:	d002      	beq.n	8010fca <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8010fc4:	68b8      	ldr	r0, [r7, #8]
 8010fc6:	f7ff f9d7 	bl	8010378 <tcp_abort>
  }
}
 8010fca:	bf00      	nop
 8010fcc:	3710      	adds	r7, #16
 8010fce:	46bd      	mov	sp, r7
 8010fd0:	bd80      	pop	{r7, pc}
 8010fd2:	bf00      	nop
 8010fd4:	20013b84 	.word	0x20013b84
 8010fd8:	20013b74 	.word	0x20013b74

08010fdc <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8010fdc:	b580      	push	{r7, lr}
 8010fde:	b082      	sub	sp, #8
 8010fe0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8010fe2:	4b10      	ldr	r3, [pc, #64]	; (8011024 <tcp_handle_closepend+0x48>)
 8010fe4:	681b      	ldr	r3, [r3, #0]
 8010fe6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8010fe8:	e014      	b.n	8011014 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8010fea:	687b      	ldr	r3, [r7, #4]
 8010fec:	68db      	ldr	r3, [r3, #12]
 8010fee:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8010ff0:	687b      	ldr	r3, [r7, #4]
 8010ff2:	8b5b      	ldrh	r3, [r3, #26]
 8010ff4:	f003 0308 	and.w	r3, r3, #8
 8010ff8:	2b00      	cmp	r3, #0
 8010ffa:	d009      	beq.n	8011010 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	8b5b      	ldrh	r3, [r3, #26]
 8011000:	f023 0308 	bic.w	r3, r3, #8
 8011004:	b29a      	uxth	r2, r3
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 801100a:	6878      	ldr	r0, [r7, #4]
 801100c:	f7ff f860 	bl	80100d0 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8011010:	683b      	ldr	r3, [r7, #0]
 8011012:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	2b00      	cmp	r3, #0
 8011018:	d1e7      	bne.n	8010fea <tcp_handle_closepend+0xe>
  }
}
 801101a:	bf00      	nop
 801101c:	bf00      	nop
 801101e:	3708      	adds	r7, #8
 8011020:	46bd      	mov	sp, r7
 8011022:	bd80      	pop	{r7, pc}
 8011024:	20013b80 	.word	0x20013b80

08011028 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8011028:	b580      	push	{r7, lr}
 801102a:	b084      	sub	sp, #16
 801102c:	af00      	add	r7, sp, #0
 801102e:	4603      	mov	r3, r0
 8011030:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011032:	2001      	movs	r0, #1
 8011034:	f7fd fb74 	bl	800e720 <memp_malloc>
 8011038:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 801103a:	68fb      	ldr	r3, [r7, #12]
 801103c:	2b00      	cmp	r3, #0
 801103e:	d126      	bne.n	801108e <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8011040:	f7ff ffcc 	bl	8010fdc <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8011044:	f7ff ff9a 	bl	8010f7c <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011048:	2001      	movs	r0, #1
 801104a:	f7fd fb69 	bl	800e720 <memp_malloc>
 801104e:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8011050:	68fb      	ldr	r3, [r7, #12]
 8011052:	2b00      	cmp	r3, #0
 8011054:	d11b      	bne.n	801108e <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8011056:	2009      	movs	r0, #9
 8011058:	f7ff ff46 	bl	8010ee8 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801105c:	2001      	movs	r0, #1
 801105e:	f7fd fb5f 	bl	800e720 <memp_malloc>
 8011062:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8011064:	68fb      	ldr	r3, [r7, #12]
 8011066:	2b00      	cmp	r3, #0
 8011068:	d111      	bne.n	801108e <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 801106a:	2008      	movs	r0, #8
 801106c:	f7ff ff3c 	bl	8010ee8 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011070:	2001      	movs	r0, #1
 8011072:	f7fd fb55 	bl	800e720 <memp_malloc>
 8011076:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8011078:	68fb      	ldr	r3, [r7, #12]
 801107a:	2b00      	cmp	r3, #0
 801107c:	d107      	bne.n	801108e <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 801107e:	79fb      	ldrb	r3, [r7, #7]
 8011080:	4618      	mov	r0, r3
 8011082:	f7ff fee3 	bl	8010e4c <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011086:	2001      	movs	r0, #1
 8011088:	f7fd fb4a 	bl	800e720 <memp_malloc>
 801108c:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 801108e:	68fb      	ldr	r3, [r7, #12]
 8011090:	2b00      	cmp	r3, #0
 8011092:	d03f      	beq.n	8011114 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8011094:	229c      	movs	r2, #156	; 0x9c
 8011096:	2100      	movs	r1, #0
 8011098:	68f8      	ldr	r0, [r7, #12]
 801109a:	f009 fc89 	bl	801a9b0 <memset>
    pcb->prio = prio;
 801109e:	68fb      	ldr	r3, [r7, #12]
 80110a0:	79fa      	ldrb	r2, [r7, #7]
 80110a2:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 80110a4:	68fb      	ldr	r3, [r7, #12]
 80110a6:	f642 52a0 	movw	r2, #11680	; 0x2da0
 80110aa:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80110ae:	68fb      	ldr	r3, [r7, #12]
 80110b0:	f642 52a0 	movw	r2, #11680	; 0x2da0
 80110b4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80110b6:	68fb      	ldr	r3, [r7, #12]
 80110b8:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80110ba:	68fb      	ldr	r3, [r7, #12]
 80110bc:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 80110be:	68fb      	ldr	r3, [r7, #12]
 80110c0:	22ff      	movs	r2, #255	; 0xff
 80110c2:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 80110c4:	68fb      	ldr	r3, [r7, #12]
 80110c6:	f44f 7206 	mov.w	r2, #536	; 0x218
 80110ca:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 80110cc:	68fb      	ldr	r3, [r7, #12]
 80110ce:	2206      	movs	r2, #6
 80110d0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 80110d4:	68fb      	ldr	r3, [r7, #12]
 80110d6:	2206      	movs	r2, #6
 80110d8:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 80110da:	68fb      	ldr	r3, [r7, #12]
 80110dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80110e0:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 80110e2:	68fb      	ldr	r3, [r7, #12]
 80110e4:	2201      	movs	r2, #1
 80110e6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 80110ea:	4b0d      	ldr	r3, [pc, #52]	; (8011120 <tcp_alloc+0xf8>)
 80110ec:	681a      	ldr	r2, [r3, #0]
 80110ee:	68fb      	ldr	r3, [r7, #12]
 80110f0:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 80110f2:	4b0c      	ldr	r3, [pc, #48]	; (8011124 <tcp_alloc+0xfc>)
 80110f4:	781a      	ldrb	r2, [r3, #0]
 80110f6:	68fb      	ldr	r3, [r7, #12]
 80110f8:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 80110fa:	68fb      	ldr	r3, [r7, #12]
 80110fc:	f642 52a0 	movw	r2, #11680	; 0x2da0
 8011100:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8011104:	68fb      	ldr	r3, [r7, #12]
 8011106:	4a08      	ldr	r2, [pc, #32]	; (8011128 <tcp_alloc+0x100>)
 8011108:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 801110c:	68fb      	ldr	r3, [r7, #12]
 801110e:	4a07      	ldr	r2, [pc, #28]	; (801112c <tcp_alloc+0x104>)
 8011110:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8011114:	68fb      	ldr	r3, [r7, #12]
}
 8011116:	4618      	mov	r0, r3
 8011118:	3710      	adds	r7, #16
 801111a:	46bd      	mov	sp, r7
 801111c:	bd80      	pop	{r7, pc}
 801111e:	bf00      	nop
 8011120:	20013b74 	.word	0x20013b74
 8011124:	20013b8a 	.word	0x20013b8a
 8011128:	08010de1 	.word	0x08010de1
 801112c:	006ddd00 	.word	0x006ddd00

08011130 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8011130:	b580      	push	{r7, lr}
 8011132:	b082      	sub	sp, #8
 8011134:	af00      	add	r7, sp, #0
 8011136:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8011138:	687b      	ldr	r3, [r7, #4]
 801113a:	2b00      	cmp	r3, #0
 801113c:	d107      	bne.n	801114e <tcp_pcb_purge+0x1e>
 801113e:	4b21      	ldr	r3, [pc, #132]	; (80111c4 <tcp_pcb_purge+0x94>)
 8011140:	f640 0251 	movw	r2, #2129	; 0x851
 8011144:	4920      	ldr	r1, [pc, #128]	; (80111c8 <tcp_pcb_purge+0x98>)
 8011146:	4821      	ldr	r0, [pc, #132]	; (80111cc <tcp_pcb_purge+0x9c>)
 8011148:	f00a f99a 	bl	801b480 <iprintf>
 801114c:	e037      	b.n	80111be <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	7d1b      	ldrb	r3, [r3, #20]
 8011152:	2b00      	cmp	r3, #0
 8011154:	d033      	beq.n	80111be <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8011156:	687b      	ldr	r3, [r7, #4]
 8011158:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 801115a:	2b0a      	cmp	r3, #10
 801115c:	d02f      	beq.n	80111be <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8011162:	2b01      	cmp	r3, #1
 8011164:	d02b      	beq.n	80111be <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8011166:	687b      	ldr	r3, [r7, #4]
 8011168:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801116a:	2b00      	cmp	r3, #0
 801116c:	d007      	beq.n	801117e <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011172:	4618      	mov	r0, r3
 8011174:	f7fe f9c8 	bl	800f508 <pbuf_free>
      pcb->refused_data = NULL;
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	2200      	movs	r2, #0
 801117c:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801117e:	687b      	ldr	r3, [r7, #4]
 8011180:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011182:	2b00      	cmp	r3, #0
 8011184:	d002      	beq.n	801118c <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8011186:	6878      	ldr	r0, [r7, #4]
 8011188:	f000 f986 	bl	8011498 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011192:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011198:	4618      	mov	r0, r3
 801119a:	f7ff fdc7 	bl	8010d2c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 801119e:	687b      	ldr	r3, [r7, #4]
 80111a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80111a2:	4618      	mov	r0, r3
 80111a4:	f7ff fdc2 	bl	8010d2c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	2200      	movs	r2, #0
 80111ac:	66da      	str	r2, [r3, #108]	; 0x6c
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	2200      	movs	r2, #0
 80111ba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 80111be:	3708      	adds	r7, #8
 80111c0:	46bd      	mov	sp, r7
 80111c2:	bd80      	pop	{r7, pc}
 80111c4:	0801ee0c 	.word	0x0801ee0c
 80111c8:	0801f458 	.word	0x0801f458
 80111cc:	0801ee50 	.word	0x0801ee50

080111d0 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 80111d0:	b580      	push	{r7, lr}
 80111d2:	b084      	sub	sp, #16
 80111d4:	af00      	add	r7, sp, #0
 80111d6:	6078      	str	r0, [r7, #4]
 80111d8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 80111da:	683b      	ldr	r3, [r7, #0]
 80111dc:	2b00      	cmp	r3, #0
 80111de:	d106      	bne.n	80111ee <tcp_pcb_remove+0x1e>
 80111e0:	4b3e      	ldr	r3, [pc, #248]	; (80112dc <tcp_pcb_remove+0x10c>)
 80111e2:	f640 0283 	movw	r2, #2179	; 0x883
 80111e6:	493e      	ldr	r1, [pc, #248]	; (80112e0 <tcp_pcb_remove+0x110>)
 80111e8:	483e      	ldr	r0, [pc, #248]	; (80112e4 <tcp_pcb_remove+0x114>)
 80111ea:	f00a f949 	bl	801b480 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	2b00      	cmp	r3, #0
 80111f2:	d106      	bne.n	8011202 <tcp_pcb_remove+0x32>
 80111f4:	4b39      	ldr	r3, [pc, #228]	; (80112dc <tcp_pcb_remove+0x10c>)
 80111f6:	f640 0284 	movw	r2, #2180	; 0x884
 80111fa:	493b      	ldr	r1, [pc, #236]	; (80112e8 <tcp_pcb_remove+0x118>)
 80111fc:	4839      	ldr	r0, [pc, #228]	; (80112e4 <tcp_pcb_remove+0x114>)
 80111fe:	f00a f93f 	bl	801b480 <iprintf>

  TCP_RMV(pcblist, pcb);
 8011202:	687b      	ldr	r3, [r7, #4]
 8011204:	681b      	ldr	r3, [r3, #0]
 8011206:	683a      	ldr	r2, [r7, #0]
 8011208:	429a      	cmp	r2, r3
 801120a:	d105      	bne.n	8011218 <tcp_pcb_remove+0x48>
 801120c:	687b      	ldr	r3, [r7, #4]
 801120e:	681b      	ldr	r3, [r3, #0]
 8011210:	68da      	ldr	r2, [r3, #12]
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	601a      	str	r2, [r3, #0]
 8011216:	e013      	b.n	8011240 <tcp_pcb_remove+0x70>
 8011218:	687b      	ldr	r3, [r7, #4]
 801121a:	681b      	ldr	r3, [r3, #0]
 801121c:	60fb      	str	r3, [r7, #12]
 801121e:	e00c      	b.n	801123a <tcp_pcb_remove+0x6a>
 8011220:	68fb      	ldr	r3, [r7, #12]
 8011222:	68db      	ldr	r3, [r3, #12]
 8011224:	683a      	ldr	r2, [r7, #0]
 8011226:	429a      	cmp	r2, r3
 8011228:	d104      	bne.n	8011234 <tcp_pcb_remove+0x64>
 801122a:	683b      	ldr	r3, [r7, #0]
 801122c:	68da      	ldr	r2, [r3, #12]
 801122e:	68fb      	ldr	r3, [r7, #12]
 8011230:	60da      	str	r2, [r3, #12]
 8011232:	e005      	b.n	8011240 <tcp_pcb_remove+0x70>
 8011234:	68fb      	ldr	r3, [r7, #12]
 8011236:	68db      	ldr	r3, [r3, #12]
 8011238:	60fb      	str	r3, [r7, #12]
 801123a:	68fb      	ldr	r3, [r7, #12]
 801123c:	2b00      	cmp	r3, #0
 801123e:	d1ef      	bne.n	8011220 <tcp_pcb_remove+0x50>
 8011240:	683b      	ldr	r3, [r7, #0]
 8011242:	2200      	movs	r2, #0
 8011244:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8011246:	6838      	ldr	r0, [r7, #0]
 8011248:	f7ff ff72 	bl	8011130 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 801124c:	683b      	ldr	r3, [r7, #0]
 801124e:	7d1b      	ldrb	r3, [r3, #20]
 8011250:	2b0a      	cmp	r3, #10
 8011252:	d013      	beq.n	801127c <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8011254:	683b      	ldr	r3, [r7, #0]
 8011256:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8011258:	2b01      	cmp	r3, #1
 801125a:	d00f      	beq.n	801127c <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 801125c:	683b      	ldr	r3, [r7, #0]
 801125e:	8b5b      	ldrh	r3, [r3, #26]
 8011260:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8011264:	2b00      	cmp	r3, #0
 8011266:	d009      	beq.n	801127c <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8011268:	683b      	ldr	r3, [r7, #0]
 801126a:	8b5b      	ldrh	r3, [r3, #26]
 801126c:	f043 0302 	orr.w	r3, r3, #2
 8011270:	b29a      	uxth	r2, r3
 8011272:	683b      	ldr	r3, [r7, #0]
 8011274:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8011276:	6838      	ldr	r0, [r7, #0]
 8011278:	f002 ff88 	bl	801418c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 801127c:	683b      	ldr	r3, [r7, #0]
 801127e:	7d1b      	ldrb	r3, [r3, #20]
 8011280:	2b01      	cmp	r3, #1
 8011282:	d020      	beq.n	80112c6 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8011284:	683b      	ldr	r3, [r7, #0]
 8011286:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011288:	2b00      	cmp	r3, #0
 801128a:	d006      	beq.n	801129a <tcp_pcb_remove+0xca>
 801128c:	4b13      	ldr	r3, [pc, #76]	; (80112dc <tcp_pcb_remove+0x10c>)
 801128e:	f640 0293 	movw	r2, #2195	; 0x893
 8011292:	4916      	ldr	r1, [pc, #88]	; (80112ec <tcp_pcb_remove+0x11c>)
 8011294:	4813      	ldr	r0, [pc, #76]	; (80112e4 <tcp_pcb_remove+0x114>)
 8011296:	f00a f8f3 	bl	801b480 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 801129a:	683b      	ldr	r3, [r7, #0]
 801129c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801129e:	2b00      	cmp	r3, #0
 80112a0:	d006      	beq.n	80112b0 <tcp_pcb_remove+0xe0>
 80112a2:	4b0e      	ldr	r3, [pc, #56]	; (80112dc <tcp_pcb_remove+0x10c>)
 80112a4:	f640 0294 	movw	r2, #2196	; 0x894
 80112a8:	4911      	ldr	r1, [pc, #68]	; (80112f0 <tcp_pcb_remove+0x120>)
 80112aa:	480e      	ldr	r0, [pc, #56]	; (80112e4 <tcp_pcb_remove+0x114>)
 80112ac:	f00a f8e8 	bl	801b480 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 80112b0:	683b      	ldr	r3, [r7, #0]
 80112b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80112b4:	2b00      	cmp	r3, #0
 80112b6:	d006      	beq.n	80112c6 <tcp_pcb_remove+0xf6>
 80112b8:	4b08      	ldr	r3, [pc, #32]	; (80112dc <tcp_pcb_remove+0x10c>)
 80112ba:	f640 0296 	movw	r2, #2198	; 0x896
 80112be:	490d      	ldr	r1, [pc, #52]	; (80112f4 <tcp_pcb_remove+0x124>)
 80112c0:	4808      	ldr	r0, [pc, #32]	; (80112e4 <tcp_pcb_remove+0x114>)
 80112c2:	f00a f8dd 	bl	801b480 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 80112c6:	683b      	ldr	r3, [r7, #0]
 80112c8:	2200      	movs	r2, #0
 80112ca:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 80112cc:	683b      	ldr	r3, [r7, #0]
 80112ce:	2200      	movs	r2, #0
 80112d0:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 80112d2:	bf00      	nop
 80112d4:	3710      	adds	r7, #16
 80112d6:	46bd      	mov	sp, r7
 80112d8:	bd80      	pop	{r7, pc}
 80112da:	bf00      	nop
 80112dc:	0801ee0c 	.word	0x0801ee0c
 80112e0:	0801f474 	.word	0x0801f474
 80112e4:	0801ee50 	.word	0x0801ee50
 80112e8:	0801f490 	.word	0x0801f490
 80112ec:	0801f4b0 	.word	0x0801f4b0
 80112f0:	0801f4c8 	.word	0x0801f4c8
 80112f4:	0801f4e4 	.word	0x0801f4e4

080112f8 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 80112f8:	b580      	push	{r7, lr}
 80112fa:	b082      	sub	sp, #8
 80112fc:	af00      	add	r7, sp, #0
 80112fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	2b00      	cmp	r3, #0
 8011304:	d106      	bne.n	8011314 <tcp_next_iss+0x1c>
 8011306:	4b0a      	ldr	r3, [pc, #40]	; (8011330 <tcp_next_iss+0x38>)
 8011308:	f640 02af 	movw	r2, #2223	; 0x8af
 801130c:	4909      	ldr	r1, [pc, #36]	; (8011334 <tcp_next_iss+0x3c>)
 801130e:	480a      	ldr	r0, [pc, #40]	; (8011338 <tcp_next_iss+0x40>)
 8011310:	f00a f8b6 	bl	801b480 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8011314:	4b09      	ldr	r3, [pc, #36]	; (801133c <tcp_next_iss+0x44>)
 8011316:	681a      	ldr	r2, [r3, #0]
 8011318:	4b09      	ldr	r3, [pc, #36]	; (8011340 <tcp_next_iss+0x48>)
 801131a:	681b      	ldr	r3, [r3, #0]
 801131c:	4413      	add	r3, r2
 801131e:	4a07      	ldr	r2, [pc, #28]	; (801133c <tcp_next_iss+0x44>)
 8011320:	6013      	str	r3, [r2, #0]
  return iss;
 8011322:	4b06      	ldr	r3, [pc, #24]	; (801133c <tcp_next_iss+0x44>)
 8011324:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8011326:	4618      	mov	r0, r3
 8011328:	3708      	adds	r7, #8
 801132a:	46bd      	mov	sp, r7
 801132c:	bd80      	pop	{r7, pc}
 801132e:	bf00      	nop
 8011330:	0801ee0c 	.word	0x0801ee0c
 8011334:	0801f4fc 	.word	0x0801f4fc
 8011338:	0801ee50 	.word	0x0801ee50
 801133c:	200000c0 	.word	0x200000c0
 8011340:	20013b74 	.word	0x20013b74

08011344 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8011344:	b580      	push	{r7, lr}
 8011346:	b086      	sub	sp, #24
 8011348:	af00      	add	r7, sp, #0
 801134a:	4603      	mov	r3, r0
 801134c:	60b9      	str	r1, [r7, #8]
 801134e:	607a      	str	r2, [r7, #4]
 8011350:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8011352:	687b      	ldr	r3, [r7, #4]
 8011354:	2b00      	cmp	r3, #0
 8011356:	d106      	bne.n	8011366 <tcp_eff_send_mss_netif+0x22>
 8011358:	4b14      	ldr	r3, [pc, #80]	; (80113ac <tcp_eff_send_mss_netif+0x68>)
 801135a:	f640 02c5 	movw	r2, #2245	; 0x8c5
 801135e:	4914      	ldr	r1, [pc, #80]	; (80113b0 <tcp_eff_send_mss_netif+0x6c>)
 8011360:	4814      	ldr	r0, [pc, #80]	; (80113b4 <tcp_eff_send_mss_netif+0x70>)
 8011362:	f00a f88d 	bl	801b480 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8011366:	68bb      	ldr	r3, [r7, #8]
 8011368:	2b00      	cmp	r3, #0
 801136a:	d101      	bne.n	8011370 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 801136c:	89fb      	ldrh	r3, [r7, #14]
 801136e:	e019      	b.n	80113a4 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8011370:	68bb      	ldr	r3, [r7, #8]
 8011372:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011374:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8011376:	8afb      	ldrh	r3, [r7, #22]
 8011378:	2b00      	cmp	r3, #0
 801137a:	d012      	beq.n	80113a2 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 801137c:	2328      	movs	r3, #40	; 0x28
 801137e:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8011380:	8afa      	ldrh	r2, [r7, #22]
 8011382:	8abb      	ldrh	r3, [r7, #20]
 8011384:	429a      	cmp	r2, r3
 8011386:	d904      	bls.n	8011392 <tcp_eff_send_mss_netif+0x4e>
 8011388:	8afa      	ldrh	r2, [r7, #22]
 801138a:	8abb      	ldrh	r3, [r7, #20]
 801138c:	1ad3      	subs	r3, r2, r3
 801138e:	b29b      	uxth	r3, r3
 8011390:	e000      	b.n	8011394 <tcp_eff_send_mss_netif+0x50>
 8011392:	2300      	movs	r3, #0
 8011394:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8011396:	8a7a      	ldrh	r2, [r7, #18]
 8011398:	89fb      	ldrh	r3, [r7, #14]
 801139a:	4293      	cmp	r3, r2
 801139c:	bf28      	it	cs
 801139e:	4613      	movcs	r3, r2
 80113a0:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 80113a2:	89fb      	ldrh	r3, [r7, #14]
}
 80113a4:	4618      	mov	r0, r3
 80113a6:	3718      	adds	r7, #24
 80113a8:	46bd      	mov	sp, r7
 80113aa:	bd80      	pop	{r7, pc}
 80113ac:	0801ee0c 	.word	0x0801ee0c
 80113b0:	0801f518 	.word	0x0801f518
 80113b4:	0801ee50 	.word	0x0801ee50

080113b8 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 80113b8:	b580      	push	{r7, lr}
 80113ba:	b084      	sub	sp, #16
 80113bc:	af00      	add	r7, sp, #0
 80113be:	6078      	str	r0, [r7, #4]
 80113c0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 80113c2:	683b      	ldr	r3, [r7, #0]
 80113c4:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	2b00      	cmp	r3, #0
 80113ca:	d119      	bne.n	8011400 <tcp_netif_ip_addr_changed_pcblist+0x48>
 80113cc:	4b10      	ldr	r3, [pc, #64]	; (8011410 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 80113ce:	f44f 6210 	mov.w	r2, #2304	; 0x900
 80113d2:	4910      	ldr	r1, [pc, #64]	; (8011414 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 80113d4:	4810      	ldr	r0, [pc, #64]	; (8011418 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 80113d6:	f00a f853 	bl	801b480 <iprintf>

  while (pcb != NULL) {
 80113da:	e011      	b.n	8011400 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80113dc:	68fb      	ldr	r3, [r7, #12]
 80113de:	681a      	ldr	r2, [r3, #0]
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	681b      	ldr	r3, [r3, #0]
 80113e4:	429a      	cmp	r2, r3
 80113e6:	d108      	bne.n	80113fa <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 80113e8:	68fb      	ldr	r3, [r7, #12]
 80113ea:	68db      	ldr	r3, [r3, #12]
 80113ec:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 80113ee:	68f8      	ldr	r0, [r7, #12]
 80113f0:	f7fe ffc2 	bl	8010378 <tcp_abort>
      pcb = next;
 80113f4:	68bb      	ldr	r3, [r7, #8]
 80113f6:	60fb      	str	r3, [r7, #12]
 80113f8:	e002      	b.n	8011400 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 80113fa:	68fb      	ldr	r3, [r7, #12]
 80113fc:	68db      	ldr	r3, [r3, #12]
 80113fe:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8011400:	68fb      	ldr	r3, [r7, #12]
 8011402:	2b00      	cmp	r3, #0
 8011404:	d1ea      	bne.n	80113dc <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8011406:	bf00      	nop
 8011408:	bf00      	nop
 801140a:	3710      	adds	r7, #16
 801140c:	46bd      	mov	sp, r7
 801140e:	bd80      	pop	{r7, pc}
 8011410:	0801ee0c 	.word	0x0801ee0c
 8011414:	0801f540 	.word	0x0801f540
 8011418:	0801ee50 	.word	0x0801ee50

0801141c <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801141c:	b580      	push	{r7, lr}
 801141e:	b084      	sub	sp, #16
 8011420:	af00      	add	r7, sp, #0
 8011422:	6078      	str	r0, [r7, #4]
 8011424:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8011426:	687b      	ldr	r3, [r7, #4]
 8011428:	2b00      	cmp	r3, #0
 801142a:	d02a      	beq.n	8011482 <tcp_netif_ip_addr_changed+0x66>
 801142c:	687b      	ldr	r3, [r7, #4]
 801142e:	681b      	ldr	r3, [r3, #0]
 8011430:	2b00      	cmp	r3, #0
 8011432:	d026      	beq.n	8011482 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8011434:	4b15      	ldr	r3, [pc, #84]	; (801148c <tcp_netif_ip_addr_changed+0x70>)
 8011436:	681b      	ldr	r3, [r3, #0]
 8011438:	4619      	mov	r1, r3
 801143a:	6878      	ldr	r0, [r7, #4]
 801143c:	f7ff ffbc 	bl	80113b8 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8011440:	4b13      	ldr	r3, [pc, #76]	; (8011490 <tcp_netif_ip_addr_changed+0x74>)
 8011442:	681b      	ldr	r3, [r3, #0]
 8011444:	4619      	mov	r1, r3
 8011446:	6878      	ldr	r0, [r7, #4]
 8011448:	f7ff ffb6 	bl	80113b8 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 801144c:	683b      	ldr	r3, [r7, #0]
 801144e:	2b00      	cmp	r3, #0
 8011450:	d017      	beq.n	8011482 <tcp_netif_ip_addr_changed+0x66>
 8011452:	683b      	ldr	r3, [r7, #0]
 8011454:	681b      	ldr	r3, [r3, #0]
 8011456:	2b00      	cmp	r3, #0
 8011458:	d013      	beq.n	8011482 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801145a:	4b0e      	ldr	r3, [pc, #56]	; (8011494 <tcp_netif_ip_addr_changed+0x78>)
 801145c:	681b      	ldr	r3, [r3, #0]
 801145e:	60fb      	str	r3, [r7, #12]
 8011460:	e00c      	b.n	801147c <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8011462:	68fb      	ldr	r3, [r7, #12]
 8011464:	681a      	ldr	r2, [r3, #0]
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	681b      	ldr	r3, [r3, #0]
 801146a:	429a      	cmp	r2, r3
 801146c:	d103      	bne.n	8011476 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 801146e:	683b      	ldr	r3, [r7, #0]
 8011470:	681a      	ldr	r2, [r3, #0]
 8011472:	68fb      	ldr	r3, [r7, #12]
 8011474:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8011476:	68fb      	ldr	r3, [r7, #12]
 8011478:	68db      	ldr	r3, [r3, #12]
 801147a:	60fb      	str	r3, [r7, #12]
 801147c:	68fb      	ldr	r3, [r7, #12]
 801147e:	2b00      	cmp	r3, #0
 8011480:	d1ef      	bne.n	8011462 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8011482:	bf00      	nop
 8011484:	3710      	adds	r7, #16
 8011486:	46bd      	mov	sp, r7
 8011488:	bd80      	pop	{r7, pc}
 801148a:	bf00      	nop
 801148c:	20013b80 	.word	0x20013b80
 8011490:	20013b78 	.word	0x20013b78
 8011494:	20013b7c 	.word	0x20013b7c

08011498 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8011498:	b580      	push	{r7, lr}
 801149a:	b082      	sub	sp, #8
 801149c:	af00      	add	r7, sp, #0
 801149e:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 80114a0:	687b      	ldr	r3, [r7, #4]
 80114a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80114a4:	2b00      	cmp	r3, #0
 80114a6:	d007      	beq.n	80114b8 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 80114a8:	687b      	ldr	r3, [r7, #4]
 80114aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80114ac:	4618      	mov	r0, r3
 80114ae:	f7ff fc3d 	bl	8010d2c <tcp_segs_free>
    pcb->ooseq = NULL;
 80114b2:	687b      	ldr	r3, [r7, #4]
 80114b4:	2200      	movs	r2, #0
 80114b6:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 80114b8:	bf00      	nop
 80114ba:	3708      	adds	r7, #8
 80114bc:	46bd      	mov	sp, r7
 80114be:	bd80      	pop	{r7, pc}

080114c0 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 80114c0:	b590      	push	{r4, r7, lr}
 80114c2:	b08d      	sub	sp, #52	; 0x34
 80114c4:	af04      	add	r7, sp, #16
 80114c6:	6078      	str	r0, [r7, #4]
 80114c8:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 80114ca:	687b      	ldr	r3, [r7, #4]
 80114cc:	2b00      	cmp	r3, #0
 80114ce:	d105      	bne.n	80114dc <tcp_input+0x1c>
 80114d0:	4b8b      	ldr	r3, [pc, #556]	; (8011700 <tcp_input+0x240>)
 80114d2:	2283      	movs	r2, #131	; 0x83
 80114d4:	498b      	ldr	r1, [pc, #556]	; (8011704 <tcp_input+0x244>)
 80114d6:	488c      	ldr	r0, [pc, #560]	; (8011708 <tcp_input+0x248>)
 80114d8:	f009 ffd2 	bl	801b480 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 80114dc:	687b      	ldr	r3, [r7, #4]
 80114de:	685b      	ldr	r3, [r3, #4]
 80114e0:	4a8a      	ldr	r2, [pc, #552]	; (801170c <tcp_input+0x24c>)
 80114e2:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	895b      	ldrh	r3, [r3, #10]
 80114e8:	2b13      	cmp	r3, #19
 80114ea:	f240 83e3 	bls.w	8011cb4 <tcp_input+0x7f4>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80114ee:	4b88      	ldr	r3, [pc, #544]	; (8011710 <tcp_input+0x250>)
 80114f0:	695b      	ldr	r3, [r3, #20]
 80114f2:	4a87      	ldr	r2, [pc, #540]	; (8011710 <tcp_input+0x250>)
 80114f4:	6812      	ldr	r2, [r2, #0]
 80114f6:	4611      	mov	r1, r2
 80114f8:	4618      	mov	r0, r3
 80114fa:	f008 f85b 	bl	80195b4 <ip4_addr_isbroadcast_u32>
 80114fe:	4603      	mov	r3, r0
 8011500:	2b00      	cmp	r3, #0
 8011502:	f040 83d9 	bne.w	8011cb8 <tcp_input+0x7f8>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8011506:	4b82      	ldr	r3, [pc, #520]	; (8011710 <tcp_input+0x250>)
 8011508:	695b      	ldr	r3, [r3, #20]
 801150a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801150e:	2be0      	cmp	r3, #224	; 0xe0
 8011510:	f000 83d2 	beq.w	8011cb8 <tcp_input+0x7f8>
  }

#if CHECKSUM_CHECK_TCP
  IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_TCP) {
    /* Verify TCP checksum. */
    u16_t chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	891a      	ldrh	r2, [r3, #8]
 8011518:	4b7e      	ldr	r3, [pc, #504]	; (8011714 <tcp_input+0x254>)
 801151a:	9300      	str	r3, [sp, #0]
 801151c:	4b7e      	ldr	r3, [pc, #504]	; (8011718 <tcp_input+0x258>)
 801151e:	2106      	movs	r1, #6
 8011520:	6878      	ldr	r0, [r7, #4]
 8011522:	f7fc fc01 	bl	800dd28 <ip_chksum_pseudo>
 8011526:	4603      	mov	r3, r0
 8011528:	823b      	strh	r3, [r7, #16]
                                    ip_current_src_addr(), ip_current_dest_addr());
    if (chksum != 0) {
 801152a:	8a3b      	ldrh	r3, [r7, #16]
 801152c:	2b00      	cmp	r3, #0
 801152e:	f040 83c5 	bne.w	8011cbc <tcp_input+0x7fc>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8011532:	4b76      	ldr	r3, [pc, #472]	; (801170c <tcp_input+0x24c>)
 8011534:	681b      	ldr	r3, [r3, #0]
 8011536:	899b      	ldrh	r3, [r3, #12]
 8011538:	b29b      	uxth	r3, r3
 801153a:	4618      	mov	r0, r3
 801153c:	f7fc fac2 	bl	800dac4 <lwip_htons>
 8011540:	4603      	mov	r3, r0
 8011542:	0b1b      	lsrs	r3, r3, #12
 8011544:	b29b      	uxth	r3, r3
 8011546:	b2db      	uxtb	r3, r3
 8011548:	009b      	lsls	r3, r3, #2
 801154a:	73fb      	strb	r3, [r7, #15]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 801154c:	7bfb      	ldrb	r3, [r7, #15]
 801154e:	2b13      	cmp	r3, #19
 8011550:	f240 83b6 	bls.w	8011cc0 <tcp_input+0x800>
 8011554:	7bfb      	ldrb	r3, [r7, #15]
 8011556:	b29a      	uxth	r2, r3
 8011558:	687b      	ldr	r3, [r7, #4]
 801155a:	891b      	ldrh	r3, [r3, #8]
 801155c:	429a      	cmp	r2, r3
 801155e:	f200 83af 	bhi.w	8011cc0 <tcp_input+0x800>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8011562:	7bfb      	ldrb	r3, [r7, #15]
 8011564:	b29b      	uxth	r3, r3
 8011566:	3b14      	subs	r3, #20
 8011568:	b29a      	uxth	r2, r3
 801156a:	4b6c      	ldr	r3, [pc, #432]	; (801171c <tcp_input+0x25c>)
 801156c:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 801156e:	4b6c      	ldr	r3, [pc, #432]	; (8011720 <tcp_input+0x260>)
 8011570:	2200      	movs	r2, #0
 8011572:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8011574:	687b      	ldr	r3, [r7, #4]
 8011576:	895a      	ldrh	r2, [r3, #10]
 8011578:	7bfb      	ldrb	r3, [r7, #15]
 801157a:	b29b      	uxth	r3, r3
 801157c:	429a      	cmp	r2, r3
 801157e:	d309      	bcc.n	8011594 <tcp_input+0xd4>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8011580:	4b66      	ldr	r3, [pc, #408]	; (801171c <tcp_input+0x25c>)
 8011582:	881a      	ldrh	r2, [r3, #0]
 8011584:	4b67      	ldr	r3, [pc, #412]	; (8011724 <tcp_input+0x264>)
 8011586:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8011588:	7bfb      	ldrb	r3, [r7, #15]
 801158a:	4619      	mov	r1, r3
 801158c:	6878      	ldr	r0, [r7, #4]
 801158e:	f7fd ff35 	bl	800f3fc <pbuf_remove_header>
 8011592:	e04e      	b.n	8011632 <tcp_input+0x172>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8011594:	687b      	ldr	r3, [r7, #4]
 8011596:	681b      	ldr	r3, [r3, #0]
 8011598:	2b00      	cmp	r3, #0
 801159a:	d105      	bne.n	80115a8 <tcp_input+0xe8>
 801159c:	4b58      	ldr	r3, [pc, #352]	; (8011700 <tcp_input+0x240>)
 801159e:	22c2      	movs	r2, #194	; 0xc2
 80115a0:	4961      	ldr	r1, [pc, #388]	; (8011728 <tcp_input+0x268>)
 80115a2:	4859      	ldr	r0, [pc, #356]	; (8011708 <tcp_input+0x248>)
 80115a4:	f009 ff6c 	bl	801b480 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 80115a8:	2114      	movs	r1, #20
 80115aa:	6878      	ldr	r0, [r7, #4]
 80115ac:	f7fd ff26 	bl	800f3fc <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 80115b0:	687b      	ldr	r3, [r7, #4]
 80115b2:	895a      	ldrh	r2, [r3, #10]
 80115b4:	4b5b      	ldr	r3, [pc, #364]	; (8011724 <tcp_input+0x264>)
 80115b6:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 80115b8:	4b58      	ldr	r3, [pc, #352]	; (801171c <tcp_input+0x25c>)
 80115ba:	881a      	ldrh	r2, [r3, #0]
 80115bc:	4b59      	ldr	r3, [pc, #356]	; (8011724 <tcp_input+0x264>)
 80115be:	881b      	ldrh	r3, [r3, #0]
 80115c0:	1ad3      	subs	r3, r2, r3
 80115c2:	81bb      	strh	r3, [r7, #12]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 80115c4:	4b57      	ldr	r3, [pc, #348]	; (8011724 <tcp_input+0x264>)
 80115c6:	881b      	ldrh	r3, [r3, #0]
 80115c8:	4619      	mov	r1, r3
 80115ca:	6878      	ldr	r0, [r7, #4]
 80115cc:	f7fd ff16 	bl	800f3fc <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 80115d0:	687b      	ldr	r3, [r7, #4]
 80115d2:	681b      	ldr	r3, [r3, #0]
 80115d4:	895b      	ldrh	r3, [r3, #10]
 80115d6:	89ba      	ldrh	r2, [r7, #12]
 80115d8:	429a      	cmp	r2, r3
 80115da:	f200 8373 	bhi.w	8011cc4 <tcp_input+0x804>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 80115de:	687b      	ldr	r3, [r7, #4]
 80115e0:	681b      	ldr	r3, [r3, #0]
 80115e2:	685b      	ldr	r3, [r3, #4]
 80115e4:	4a4e      	ldr	r2, [pc, #312]	; (8011720 <tcp_input+0x260>)
 80115e6:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 80115e8:	687b      	ldr	r3, [r7, #4]
 80115ea:	681b      	ldr	r3, [r3, #0]
 80115ec:	89ba      	ldrh	r2, [r7, #12]
 80115ee:	4611      	mov	r1, r2
 80115f0:	4618      	mov	r0, r3
 80115f2:	f7fd ff03 	bl	800f3fc <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 80115f6:	687b      	ldr	r3, [r7, #4]
 80115f8:	891a      	ldrh	r2, [r3, #8]
 80115fa:	89bb      	ldrh	r3, [r7, #12]
 80115fc:	1ad3      	subs	r3, r2, r3
 80115fe:	b29a      	uxth	r2, r3
 8011600:	687b      	ldr	r3, [r7, #4]
 8011602:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	895b      	ldrh	r3, [r3, #10]
 8011608:	2b00      	cmp	r3, #0
 801160a:	d005      	beq.n	8011618 <tcp_input+0x158>
 801160c:	4b3c      	ldr	r3, [pc, #240]	; (8011700 <tcp_input+0x240>)
 801160e:	22df      	movs	r2, #223	; 0xdf
 8011610:	4946      	ldr	r1, [pc, #280]	; (801172c <tcp_input+0x26c>)
 8011612:	483d      	ldr	r0, [pc, #244]	; (8011708 <tcp_input+0x248>)
 8011614:	f009 ff34 	bl	801b480 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	891a      	ldrh	r2, [r3, #8]
 801161c:	687b      	ldr	r3, [r7, #4]
 801161e:	681b      	ldr	r3, [r3, #0]
 8011620:	891b      	ldrh	r3, [r3, #8]
 8011622:	429a      	cmp	r2, r3
 8011624:	d005      	beq.n	8011632 <tcp_input+0x172>
 8011626:	4b36      	ldr	r3, [pc, #216]	; (8011700 <tcp_input+0x240>)
 8011628:	22e0      	movs	r2, #224	; 0xe0
 801162a:	4941      	ldr	r1, [pc, #260]	; (8011730 <tcp_input+0x270>)
 801162c:	4836      	ldr	r0, [pc, #216]	; (8011708 <tcp_input+0x248>)
 801162e:	f009 ff27 	bl	801b480 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8011632:	4b36      	ldr	r3, [pc, #216]	; (801170c <tcp_input+0x24c>)
 8011634:	681b      	ldr	r3, [r3, #0]
 8011636:	881b      	ldrh	r3, [r3, #0]
 8011638:	b29b      	uxth	r3, r3
 801163a:	4a34      	ldr	r2, [pc, #208]	; (801170c <tcp_input+0x24c>)
 801163c:	6814      	ldr	r4, [r2, #0]
 801163e:	4618      	mov	r0, r3
 8011640:	f7fc fa40 	bl	800dac4 <lwip_htons>
 8011644:	4603      	mov	r3, r0
 8011646:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8011648:	4b30      	ldr	r3, [pc, #192]	; (801170c <tcp_input+0x24c>)
 801164a:	681b      	ldr	r3, [r3, #0]
 801164c:	885b      	ldrh	r3, [r3, #2]
 801164e:	b29b      	uxth	r3, r3
 8011650:	4a2e      	ldr	r2, [pc, #184]	; (801170c <tcp_input+0x24c>)
 8011652:	6814      	ldr	r4, [r2, #0]
 8011654:	4618      	mov	r0, r3
 8011656:	f7fc fa35 	bl	800dac4 <lwip_htons>
 801165a:	4603      	mov	r3, r0
 801165c:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 801165e:	4b2b      	ldr	r3, [pc, #172]	; (801170c <tcp_input+0x24c>)
 8011660:	681b      	ldr	r3, [r3, #0]
 8011662:	685b      	ldr	r3, [r3, #4]
 8011664:	4a29      	ldr	r2, [pc, #164]	; (801170c <tcp_input+0x24c>)
 8011666:	6814      	ldr	r4, [r2, #0]
 8011668:	4618      	mov	r0, r3
 801166a:	f7fc fa40 	bl	800daee <lwip_htonl>
 801166e:	4603      	mov	r3, r0
 8011670:	6063      	str	r3, [r4, #4]
 8011672:	6863      	ldr	r3, [r4, #4]
 8011674:	4a2f      	ldr	r2, [pc, #188]	; (8011734 <tcp_input+0x274>)
 8011676:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8011678:	4b24      	ldr	r3, [pc, #144]	; (801170c <tcp_input+0x24c>)
 801167a:	681b      	ldr	r3, [r3, #0]
 801167c:	689b      	ldr	r3, [r3, #8]
 801167e:	4a23      	ldr	r2, [pc, #140]	; (801170c <tcp_input+0x24c>)
 8011680:	6814      	ldr	r4, [r2, #0]
 8011682:	4618      	mov	r0, r3
 8011684:	f7fc fa33 	bl	800daee <lwip_htonl>
 8011688:	4603      	mov	r3, r0
 801168a:	60a3      	str	r3, [r4, #8]
 801168c:	68a3      	ldr	r3, [r4, #8]
 801168e:	4a2a      	ldr	r2, [pc, #168]	; (8011738 <tcp_input+0x278>)
 8011690:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8011692:	4b1e      	ldr	r3, [pc, #120]	; (801170c <tcp_input+0x24c>)
 8011694:	681b      	ldr	r3, [r3, #0]
 8011696:	89db      	ldrh	r3, [r3, #14]
 8011698:	b29b      	uxth	r3, r3
 801169a:	4a1c      	ldr	r2, [pc, #112]	; (801170c <tcp_input+0x24c>)
 801169c:	6814      	ldr	r4, [r2, #0]
 801169e:	4618      	mov	r0, r3
 80116a0:	f7fc fa10 	bl	800dac4 <lwip_htons>
 80116a4:	4603      	mov	r3, r0
 80116a6:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 80116a8:	4b18      	ldr	r3, [pc, #96]	; (801170c <tcp_input+0x24c>)
 80116aa:	681b      	ldr	r3, [r3, #0]
 80116ac:	899b      	ldrh	r3, [r3, #12]
 80116ae:	b29b      	uxth	r3, r3
 80116b0:	4618      	mov	r0, r3
 80116b2:	f7fc fa07 	bl	800dac4 <lwip_htons>
 80116b6:	4603      	mov	r3, r0
 80116b8:	b2db      	uxtb	r3, r3
 80116ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80116be:	b2da      	uxtb	r2, r3
 80116c0:	4b1e      	ldr	r3, [pc, #120]	; (801173c <tcp_input+0x27c>)
 80116c2:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 80116c4:	687b      	ldr	r3, [r7, #4]
 80116c6:	891a      	ldrh	r2, [r3, #8]
 80116c8:	4b1d      	ldr	r3, [pc, #116]	; (8011740 <tcp_input+0x280>)
 80116ca:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 80116cc:	4b1b      	ldr	r3, [pc, #108]	; (801173c <tcp_input+0x27c>)
 80116ce:	781b      	ldrb	r3, [r3, #0]
 80116d0:	f003 0303 	and.w	r3, r3, #3
 80116d4:	2b00      	cmp	r3, #0
 80116d6:	d00c      	beq.n	80116f2 <tcp_input+0x232>
    tcplen++;
 80116d8:	4b19      	ldr	r3, [pc, #100]	; (8011740 <tcp_input+0x280>)
 80116da:	881b      	ldrh	r3, [r3, #0]
 80116dc:	3301      	adds	r3, #1
 80116de:	b29a      	uxth	r2, r3
 80116e0:	4b17      	ldr	r3, [pc, #92]	; (8011740 <tcp_input+0x280>)
 80116e2:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 80116e4:	687b      	ldr	r3, [r7, #4]
 80116e6:	891a      	ldrh	r2, [r3, #8]
 80116e8:	4b15      	ldr	r3, [pc, #84]	; (8011740 <tcp_input+0x280>)
 80116ea:	881b      	ldrh	r3, [r3, #0]
 80116ec:	429a      	cmp	r2, r3
 80116ee:	f200 82eb 	bhi.w	8011cc8 <tcp_input+0x808>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 80116f2:	2300      	movs	r3, #0
 80116f4:	61fb      	str	r3, [r7, #28]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80116f6:	4b13      	ldr	r3, [pc, #76]	; (8011744 <tcp_input+0x284>)
 80116f8:	681b      	ldr	r3, [r3, #0]
 80116fa:	61bb      	str	r3, [r7, #24]
 80116fc:	e09b      	b.n	8011836 <tcp_input+0x376>
 80116fe:	bf00      	nop
 8011700:	0801f574 	.word	0x0801f574
 8011704:	0801f5a8 	.word	0x0801f5a8
 8011708:	0801f5c0 	.word	0x0801f5c0
 801170c:	20013ba0 	.word	0x20013ba0
 8011710:	2000a100 	.word	0x2000a100
 8011714:	2000a114 	.word	0x2000a114
 8011718:	2000a110 	.word	0x2000a110
 801171c:	20013ba4 	.word	0x20013ba4
 8011720:	20013ba8 	.word	0x20013ba8
 8011724:	20013ba6 	.word	0x20013ba6
 8011728:	0801f5e8 	.word	0x0801f5e8
 801172c:	0801f5f8 	.word	0x0801f5f8
 8011730:	0801f604 	.word	0x0801f604
 8011734:	20013bb0 	.word	0x20013bb0
 8011738:	20013bb4 	.word	0x20013bb4
 801173c:	20013bbc 	.word	0x20013bbc
 8011740:	20013bba 	.word	0x20013bba
 8011744:	20013b80 	.word	0x20013b80
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8011748:	69bb      	ldr	r3, [r7, #24]
 801174a:	7d1b      	ldrb	r3, [r3, #20]
 801174c:	2b00      	cmp	r3, #0
 801174e:	d105      	bne.n	801175c <tcp_input+0x29c>
 8011750:	4b88      	ldr	r3, [pc, #544]	; (8011974 <tcp_input+0x4b4>)
 8011752:	22fb      	movs	r2, #251	; 0xfb
 8011754:	4988      	ldr	r1, [pc, #544]	; (8011978 <tcp_input+0x4b8>)
 8011756:	4889      	ldr	r0, [pc, #548]	; (801197c <tcp_input+0x4bc>)
 8011758:	f009 fe92 	bl	801b480 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 801175c:	69bb      	ldr	r3, [r7, #24]
 801175e:	7d1b      	ldrb	r3, [r3, #20]
 8011760:	2b0a      	cmp	r3, #10
 8011762:	d105      	bne.n	8011770 <tcp_input+0x2b0>
 8011764:	4b83      	ldr	r3, [pc, #524]	; (8011974 <tcp_input+0x4b4>)
 8011766:	22fc      	movs	r2, #252	; 0xfc
 8011768:	4985      	ldr	r1, [pc, #532]	; (8011980 <tcp_input+0x4c0>)
 801176a:	4884      	ldr	r0, [pc, #528]	; (801197c <tcp_input+0x4bc>)
 801176c:	f009 fe88 	bl	801b480 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8011770:	69bb      	ldr	r3, [r7, #24]
 8011772:	7d1b      	ldrb	r3, [r3, #20]
 8011774:	2b01      	cmp	r3, #1
 8011776:	d105      	bne.n	8011784 <tcp_input+0x2c4>
 8011778:	4b7e      	ldr	r3, [pc, #504]	; (8011974 <tcp_input+0x4b4>)
 801177a:	22fd      	movs	r2, #253	; 0xfd
 801177c:	4981      	ldr	r1, [pc, #516]	; (8011984 <tcp_input+0x4c4>)
 801177e:	487f      	ldr	r0, [pc, #508]	; (801197c <tcp_input+0x4bc>)
 8011780:	f009 fe7e 	bl	801b480 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011784:	69bb      	ldr	r3, [r7, #24]
 8011786:	7a1b      	ldrb	r3, [r3, #8]
 8011788:	2b00      	cmp	r3, #0
 801178a:	d00c      	beq.n	80117a6 <tcp_input+0x2e6>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801178c:	69bb      	ldr	r3, [r7, #24]
 801178e:	7a1a      	ldrb	r2, [r3, #8]
 8011790:	4b7d      	ldr	r3, [pc, #500]	; (8011988 <tcp_input+0x4c8>)
 8011792:	685b      	ldr	r3, [r3, #4]
 8011794:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8011798:	3301      	adds	r3, #1
 801179a:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801179c:	429a      	cmp	r2, r3
 801179e:	d002      	beq.n	80117a6 <tcp_input+0x2e6>
      prev = pcb;
 80117a0:	69bb      	ldr	r3, [r7, #24]
 80117a2:	61fb      	str	r3, [r7, #28]
      continue;
 80117a4:	e044      	b.n	8011830 <tcp_input+0x370>
    }

    if (pcb->remote_port == tcphdr->src &&
 80117a6:	69bb      	ldr	r3, [r7, #24]
 80117a8:	8b1a      	ldrh	r2, [r3, #24]
 80117aa:	4b78      	ldr	r3, [pc, #480]	; (801198c <tcp_input+0x4cc>)
 80117ac:	681b      	ldr	r3, [r3, #0]
 80117ae:	881b      	ldrh	r3, [r3, #0]
 80117b0:	b29b      	uxth	r3, r3
 80117b2:	429a      	cmp	r2, r3
 80117b4:	d13a      	bne.n	801182c <tcp_input+0x36c>
        pcb->local_port == tcphdr->dest &&
 80117b6:	69bb      	ldr	r3, [r7, #24]
 80117b8:	8ada      	ldrh	r2, [r3, #22]
 80117ba:	4b74      	ldr	r3, [pc, #464]	; (801198c <tcp_input+0x4cc>)
 80117bc:	681b      	ldr	r3, [r3, #0]
 80117be:	885b      	ldrh	r3, [r3, #2]
 80117c0:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 80117c2:	429a      	cmp	r2, r3
 80117c4:	d132      	bne.n	801182c <tcp_input+0x36c>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80117c6:	69bb      	ldr	r3, [r7, #24]
 80117c8:	685a      	ldr	r2, [r3, #4]
 80117ca:	4b6f      	ldr	r3, [pc, #444]	; (8011988 <tcp_input+0x4c8>)
 80117cc:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 80117ce:	429a      	cmp	r2, r3
 80117d0:	d12c      	bne.n	801182c <tcp_input+0x36c>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80117d2:	69bb      	ldr	r3, [r7, #24]
 80117d4:	681a      	ldr	r2, [r3, #0]
 80117d6:	4b6c      	ldr	r3, [pc, #432]	; (8011988 <tcp_input+0x4c8>)
 80117d8:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80117da:	429a      	cmp	r2, r3
 80117dc:	d126      	bne.n	801182c <tcp_input+0x36c>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 80117de:	69bb      	ldr	r3, [r7, #24]
 80117e0:	68db      	ldr	r3, [r3, #12]
 80117e2:	69ba      	ldr	r2, [r7, #24]
 80117e4:	429a      	cmp	r2, r3
 80117e6:	d106      	bne.n	80117f6 <tcp_input+0x336>
 80117e8:	4b62      	ldr	r3, [pc, #392]	; (8011974 <tcp_input+0x4b4>)
 80117ea:	f240 120d 	movw	r2, #269	; 0x10d
 80117ee:	4968      	ldr	r1, [pc, #416]	; (8011990 <tcp_input+0x4d0>)
 80117f0:	4862      	ldr	r0, [pc, #392]	; (801197c <tcp_input+0x4bc>)
 80117f2:	f009 fe45 	bl	801b480 <iprintf>
      if (prev != NULL) {
 80117f6:	69fb      	ldr	r3, [r7, #28]
 80117f8:	2b00      	cmp	r3, #0
 80117fa:	d00a      	beq.n	8011812 <tcp_input+0x352>
        prev->next = pcb->next;
 80117fc:	69bb      	ldr	r3, [r7, #24]
 80117fe:	68da      	ldr	r2, [r3, #12]
 8011800:	69fb      	ldr	r3, [r7, #28]
 8011802:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8011804:	4b63      	ldr	r3, [pc, #396]	; (8011994 <tcp_input+0x4d4>)
 8011806:	681a      	ldr	r2, [r3, #0]
 8011808:	69bb      	ldr	r3, [r7, #24]
 801180a:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 801180c:	4a61      	ldr	r2, [pc, #388]	; (8011994 <tcp_input+0x4d4>)
 801180e:	69bb      	ldr	r3, [r7, #24]
 8011810:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8011812:	69bb      	ldr	r3, [r7, #24]
 8011814:	68db      	ldr	r3, [r3, #12]
 8011816:	69ba      	ldr	r2, [r7, #24]
 8011818:	429a      	cmp	r2, r3
 801181a:	d110      	bne.n	801183e <tcp_input+0x37e>
 801181c:	4b55      	ldr	r3, [pc, #340]	; (8011974 <tcp_input+0x4b4>)
 801181e:	f240 1215 	movw	r2, #277	; 0x115
 8011822:	495d      	ldr	r1, [pc, #372]	; (8011998 <tcp_input+0x4d8>)
 8011824:	4855      	ldr	r0, [pc, #340]	; (801197c <tcp_input+0x4bc>)
 8011826:	f009 fe2b 	bl	801b480 <iprintf>
      break;
 801182a:	e008      	b.n	801183e <tcp_input+0x37e>
    }
    prev = pcb;
 801182c:	69bb      	ldr	r3, [r7, #24]
 801182e:	61fb      	str	r3, [r7, #28]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011830:	69bb      	ldr	r3, [r7, #24]
 8011832:	68db      	ldr	r3, [r3, #12]
 8011834:	61bb      	str	r3, [r7, #24]
 8011836:	69bb      	ldr	r3, [r7, #24]
 8011838:	2b00      	cmp	r3, #0
 801183a:	d185      	bne.n	8011748 <tcp_input+0x288>
 801183c:	e000      	b.n	8011840 <tcp_input+0x380>
      break;
 801183e:	bf00      	nop
  }

  if (pcb == NULL) {
 8011840:	69bb      	ldr	r3, [r7, #24]
 8011842:	2b00      	cmp	r3, #0
 8011844:	f040 80b0 	bne.w	80119a8 <tcp_input+0x4e8>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8011848:	4b54      	ldr	r3, [pc, #336]	; (801199c <tcp_input+0x4dc>)
 801184a:	681b      	ldr	r3, [r3, #0]
 801184c:	61bb      	str	r3, [r7, #24]
 801184e:	e03f      	b.n	80118d0 <tcp_input+0x410>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8011850:	69bb      	ldr	r3, [r7, #24]
 8011852:	7d1b      	ldrb	r3, [r3, #20]
 8011854:	2b0a      	cmp	r3, #10
 8011856:	d006      	beq.n	8011866 <tcp_input+0x3a6>
 8011858:	4b46      	ldr	r3, [pc, #280]	; (8011974 <tcp_input+0x4b4>)
 801185a:	f240 121f 	movw	r2, #287	; 0x11f
 801185e:	4950      	ldr	r1, [pc, #320]	; (80119a0 <tcp_input+0x4e0>)
 8011860:	4846      	ldr	r0, [pc, #280]	; (801197c <tcp_input+0x4bc>)
 8011862:	f009 fe0d 	bl	801b480 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011866:	69bb      	ldr	r3, [r7, #24]
 8011868:	7a1b      	ldrb	r3, [r3, #8]
 801186a:	2b00      	cmp	r3, #0
 801186c:	d009      	beq.n	8011882 <tcp_input+0x3c2>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801186e:	69bb      	ldr	r3, [r7, #24]
 8011870:	7a1a      	ldrb	r2, [r3, #8]
 8011872:	4b45      	ldr	r3, [pc, #276]	; (8011988 <tcp_input+0x4c8>)
 8011874:	685b      	ldr	r3, [r3, #4]
 8011876:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801187a:	3301      	adds	r3, #1
 801187c:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801187e:	429a      	cmp	r2, r3
 8011880:	d122      	bne.n	80118c8 <tcp_input+0x408>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8011882:	69bb      	ldr	r3, [r7, #24]
 8011884:	8b1a      	ldrh	r2, [r3, #24]
 8011886:	4b41      	ldr	r3, [pc, #260]	; (801198c <tcp_input+0x4cc>)
 8011888:	681b      	ldr	r3, [r3, #0]
 801188a:	881b      	ldrh	r3, [r3, #0]
 801188c:	b29b      	uxth	r3, r3
 801188e:	429a      	cmp	r2, r3
 8011890:	d11b      	bne.n	80118ca <tcp_input+0x40a>
          pcb->local_port == tcphdr->dest &&
 8011892:	69bb      	ldr	r3, [r7, #24]
 8011894:	8ada      	ldrh	r2, [r3, #22]
 8011896:	4b3d      	ldr	r3, [pc, #244]	; (801198c <tcp_input+0x4cc>)
 8011898:	681b      	ldr	r3, [r3, #0]
 801189a:	885b      	ldrh	r3, [r3, #2]
 801189c:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 801189e:	429a      	cmp	r2, r3
 80118a0:	d113      	bne.n	80118ca <tcp_input+0x40a>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80118a2:	69bb      	ldr	r3, [r7, #24]
 80118a4:	685a      	ldr	r2, [r3, #4]
 80118a6:	4b38      	ldr	r3, [pc, #224]	; (8011988 <tcp_input+0x4c8>)
 80118a8:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 80118aa:	429a      	cmp	r2, r3
 80118ac:	d10d      	bne.n	80118ca <tcp_input+0x40a>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80118ae:	69bb      	ldr	r3, [r7, #24]
 80118b0:	681a      	ldr	r2, [r3, #0]
 80118b2:	4b35      	ldr	r3, [pc, #212]	; (8011988 <tcp_input+0x4c8>)
 80118b4:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80118b6:	429a      	cmp	r2, r3
 80118b8:	d107      	bne.n	80118ca <tcp_input+0x40a>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 80118ba:	69b8      	ldr	r0, [r7, #24]
 80118bc:	f000 fb5e 	bl	8011f7c <tcp_timewait_input>
        }
        pbuf_free(p);
 80118c0:	6878      	ldr	r0, [r7, #4]
 80118c2:	f7fd fe21 	bl	800f508 <pbuf_free>
        return;
 80118c6:	e205      	b.n	8011cd4 <tcp_input+0x814>
        continue;
 80118c8:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80118ca:	69bb      	ldr	r3, [r7, #24]
 80118cc:	68db      	ldr	r3, [r3, #12]
 80118ce:	61bb      	str	r3, [r7, #24]
 80118d0:	69bb      	ldr	r3, [r7, #24]
 80118d2:	2b00      	cmp	r3, #0
 80118d4:	d1bc      	bne.n	8011850 <tcp_input+0x390>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 80118d6:	2300      	movs	r3, #0
 80118d8:	61fb      	str	r3, [r7, #28]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80118da:	4b32      	ldr	r3, [pc, #200]	; (80119a4 <tcp_input+0x4e4>)
 80118dc:	681b      	ldr	r3, [r3, #0]
 80118de:	617b      	str	r3, [r7, #20]
 80118e0:	e02a      	b.n	8011938 <tcp_input+0x478>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80118e2:	697b      	ldr	r3, [r7, #20]
 80118e4:	7a1b      	ldrb	r3, [r3, #8]
 80118e6:	2b00      	cmp	r3, #0
 80118e8:	d00c      	beq.n	8011904 <tcp_input+0x444>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80118ea:	697b      	ldr	r3, [r7, #20]
 80118ec:	7a1a      	ldrb	r2, [r3, #8]
 80118ee:	4b26      	ldr	r3, [pc, #152]	; (8011988 <tcp_input+0x4c8>)
 80118f0:	685b      	ldr	r3, [r3, #4]
 80118f2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80118f6:	3301      	adds	r3, #1
 80118f8:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80118fa:	429a      	cmp	r2, r3
 80118fc:	d002      	beq.n	8011904 <tcp_input+0x444>
        prev = (struct tcp_pcb *)lpcb;
 80118fe:	697b      	ldr	r3, [r7, #20]
 8011900:	61fb      	str	r3, [r7, #28]
        continue;
 8011902:	e016      	b.n	8011932 <tcp_input+0x472>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8011904:	697b      	ldr	r3, [r7, #20]
 8011906:	8ada      	ldrh	r2, [r3, #22]
 8011908:	4b20      	ldr	r3, [pc, #128]	; (801198c <tcp_input+0x4cc>)
 801190a:	681b      	ldr	r3, [r3, #0]
 801190c:	885b      	ldrh	r3, [r3, #2]
 801190e:	b29b      	uxth	r3, r3
 8011910:	429a      	cmp	r2, r3
 8011912:	d10c      	bne.n	801192e <tcp_input+0x46e>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8011914:	697b      	ldr	r3, [r7, #20]
 8011916:	681a      	ldr	r2, [r3, #0]
 8011918:	4b1b      	ldr	r3, [pc, #108]	; (8011988 <tcp_input+0x4c8>)
 801191a:	695b      	ldr	r3, [r3, #20]
 801191c:	429a      	cmp	r2, r3
 801191e:	d00f      	beq.n	8011940 <tcp_input+0x480>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8011920:	697b      	ldr	r3, [r7, #20]
 8011922:	2b00      	cmp	r3, #0
 8011924:	d00d      	beq.n	8011942 <tcp_input+0x482>
 8011926:	697b      	ldr	r3, [r7, #20]
 8011928:	681b      	ldr	r3, [r3, #0]
 801192a:	2b00      	cmp	r3, #0
 801192c:	d009      	beq.n	8011942 <tcp_input+0x482>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 801192e:	697b      	ldr	r3, [r7, #20]
 8011930:	61fb      	str	r3, [r7, #28]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8011932:	697b      	ldr	r3, [r7, #20]
 8011934:	68db      	ldr	r3, [r3, #12]
 8011936:	617b      	str	r3, [r7, #20]
 8011938:	697b      	ldr	r3, [r7, #20]
 801193a:	2b00      	cmp	r3, #0
 801193c:	d1d1      	bne.n	80118e2 <tcp_input+0x422>
 801193e:	e000      	b.n	8011942 <tcp_input+0x482>
            break;
 8011940:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8011942:	697b      	ldr	r3, [r7, #20]
 8011944:	2b00      	cmp	r3, #0
 8011946:	d02f      	beq.n	80119a8 <tcp_input+0x4e8>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8011948:	69fb      	ldr	r3, [r7, #28]
 801194a:	2b00      	cmp	r3, #0
 801194c:	d00a      	beq.n	8011964 <tcp_input+0x4a4>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 801194e:	697b      	ldr	r3, [r7, #20]
 8011950:	68da      	ldr	r2, [r3, #12]
 8011952:	69fb      	ldr	r3, [r7, #28]
 8011954:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8011956:	4b13      	ldr	r3, [pc, #76]	; (80119a4 <tcp_input+0x4e4>)
 8011958:	681a      	ldr	r2, [r3, #0]
 801195a:	697b      	ldr	r3, [r7, #20]
 801195c:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 801195e:	4a11      	ldr	r2, [pc, #68]	; (80119a4 <tcp_input+0x4e4>)
 8011960:	697b      	ldr	r3, [r7, #20]
 8011962:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8011964:	6978      	ldr	r0, [r7, #20]
 8011966:	f000 fa0b 	bl	8011d80 <tcp_listen_input>
      }
      pbuf_free(p);
 801196a:	6878      	ldr	r0, [r7, #4]
 801196c:	f7fd fdcc 	bl	800f508 <pbuf_free>
      return;
 8011970:	e1b0      	b.n	8011cd4 <tcp_input+0x814>
 8011972:	bf00      	nop
 8011974:	0801f574 	.word	0x0801f574
 8011978:	0801f624 	.word	0x0801f624
 801197c:	0801f5c0 	.word	0x0801f5c0
 8011980:	0801f64c 	.word	0x0801f64c
 8011984:	0801f678 	.word	0x0801f678
 8011988:	2000a100 	.word	0x2000a100
 801198c:	20013ba0 	.word	0x20013ba0
 8011990:	0801f6a0 	.word	0x0801f6a0
 8011994:	20013b80 	.word	0x20013b80
 8011998:	0801f6cc 	.word	0x0801f6cc
 801199c:	20013b84 	.word	0x20013b84
 80119a0:	0801f6f8 	.word	0x0801f6f8
 80119a4:	20013b7c 	.word	0x20013b7c
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 80119a8:	69bb      	ldr	r3, [r7, #24]
 80119aa:	2b00      	cmp	r3, #0
 80119ac:	f000 8158 	beq.w	8011c60 <tcp_input+0x7a0>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 80119b0:	4b95      	ldr	r3, [pc, #596]	; (8011c08 <tcp_input+0x748>)
 80119b2:	2200      	movs	r2, #0
 80119b4:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 80119b6:	687b      	ldr	r3, [r7, #4]
 80119b8:	891a      	ldrh	r2, [r3, #8]
 80119ba:	4b93      	ldr	r3, [pc, #588]	; (8011c08 <tcp_input+0x748>)
 80119bc:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 80119be:	4a92      	ldr	r2, [pc, #584]	; (8011c08 <tcp_input+0x748>)
 80119c0:	687b      	ldr	r3, [r7, #4]
 80119c2:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 80119c4:	4b91      	ldr	r3, [pc, #580]	; (8011c0c <tcp_input+0x74c>)
 80119c6:	681b      	ldr	r3, [r3, #0]
 80119c8:	4a8f      	ldr	r2, [pc, #572]	; (8011c08 <tcp_input+0x748>)
 80119ca:	6113      	str	r3, [r2, #16]

    recv_data = NULL;
 80119cc:	4b90      	ldr	r3, [pc, #576]	; (8011c10 <tcp_input+0x750>)
 80119ce:	2200      	movs	r2, #0
 80119d0:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 80119d2:	4b90      	ldr	r3, [pc, #576]	; (8011c14 <tcp_input+0x754>)
 80119d4:	2200      	movs	r2, #0
 80119d6:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 80119d8:	4b8f      	ldr	r3, [pc, #572]	; (8011c18 <tcp_input+0x758>)
 80119da:	2200      	movs	r2, #0
 80119dc:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 80119de:	4b8f      	ldr	r3, [pc, #572]	; (8011c1c <tcp_input+0x75c>)
 80119e0:	781b      	ldrb	r3, [r3, #0]
 80119e2:	f003 0308 	and.w	r3, r3, #8
 80119e6:	2b00      	cmp	r3, #0
 80119e8:	d006      	beq.n	80119f8 <tcp_input+0x538>
      p->flags |= PBUF_FLAG_PUSH;
 80119ea:	687b      	ldr	r3, [r7, #4]
 80119ec:	7b5b      	ldrb	r3, [r3, #13]
 80119ee:	f043 0301 	orr.w	r3, r3, #1
 80119f2:	b2da      	uxtb	r2, r3
 80119f4:	687b      	ldr	r3, [r7, #4]
 80119f6:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 80119f8:	69bb      	ldr	r3, [r7, #24]
 80119fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80119fc:	2b00      	cmp	r3, #0
 80119fe:	d017      	beq.n	8011a30 <tcp_input+0x570>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8011a00:	69b8      	ldr	r0, [r7, #24]
 8011a02:	f7ff f915 	bl	8010c30 <tcp_process_refused_data>
 8011a06:	4603      	mov	r3, r0
 8011a08:	f113 0f0d 	cmn.w	r3, #13
 8011a0c:	d007      	beq.n	8011a1e <tcp_input+0x55e>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8011a0e:	69bb      	ldr	r3, [r7, #24]
 8011a10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8011a12:	2b00      	cmp	r3, #0
 8011a14:	d00c      	beq.n	8011a30 <tcp_input+0x570>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8011a16:	4b82      	ldr	r3, [pc, #520]	; (8011c20 <tcp_input+0x760>)
 8011a18:	881b      	ldrh	r3, [r3, #0]
 8011a1a:	2b00      	cmp	r3, #0
 8011a1c:	d008      	beq.n	8011a30 <tcp_input+0x570>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8011a1e:	69bb      	ldr	r3, [r7, #24]
 8011a20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011a22:	2b00      	cmp	r3, #0
 8011a24:	f040 80e4 	bne.w	8011bf0 <tcp_input+0x730>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8011a28:	69b8      	ldr	r0, [r7, #24]
 8011a2a:	f003 f9e3 	bl	8014df4 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8011a2e:	e0df      	b.n	8011bf0 <tcp_input+0x730>
      }
    }
    tcp_input_pcb = pcb;
 8011a30:	4a7c      	ldr	r2, [pc, #496]	; (8011c24 <tcp_input+0x764>)
 8011a32:	69bb      	ldr	r3, [r7, #24]
 8011a34:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8011a36:	69b8      	ldr	r0, [r7, #24]
 8011a38:	f000 fb1a 	bl	8012070 <tcp_process>
 8011a3c:	4603      	mov	r3, r0
 8011a3e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8011a40:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011a44:	f113 0f0d 	cmn.w	r3, #13
 8011a48:	f000 80d4 	beq.w	8011bf4 <tcp_input+0x734>
      if (recv_flags & TF_RESET) {
 8011a4c:	4b71      	ldr	r3, [pc, #452]	; (8011c14 <tcp_input+0x754>)
 8011a4e:	781b      	ldrb	r3, [r3, #0]
 8011a50:	f003 0308 	and.w	r3, r3, #8
 8011a54:	2b00      	cmp	r3, #0
 8011a56:	d015      	beq.n	8011a84 <tcp_input+0x5c4>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8011a58:	69bb      	ldr	r3, [r7, #24]
 8011a5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011a5e:	2b00      	cmp	r3, #0
 8011a60:	d008      	beq.n	8011a74 <tcp_input+0x5b4>
 8011a62:	69bb      	ldr	r3, [r7, #24]
 8011a64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011a68:	69ba      	ldr	r2, [r7, #24]
 8011a6a:	6912      	ldr	r2, [r2, #16]
 8011a6c:	f06f 010d 	mvn.w	r1, #13
 8011a70:	4610      	mov	r0, r2
 8011a72:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8011a74:	69b9      	ldr	r1, [r7, #24]
 8011a76:	486c      	ldr	r0, [pc, #432]	; (8011c28 <tcp_input+0x768>)
 8011a78:	f7ff fbaa 	bl	80111d0 <tcp_pcb_remove>
        tcp_free(pcb);
 8011a7c:	69b8      	ldr	r0, [r7, #24]
 8011a7e:	f7fe f993 	bl	800fda8 <tcp_free>
 8011a82:	e0da      	b.n	8011c3a <tcp_input+0x77a>
      } else {
        err = ERR_OK;
 8011a84:	2300      	movs	r3, #0
 8011a86:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8011a88:	4b63      	ldr	r3, [pc, #396]	; (8011c18 <tcp_input+0x758>)
 8011a8a:	881b      	ldrh	r3, [r3, #0]
 8011a8c:	2b00      	cmp	r3, #0
 8011a8e:	d01d      	beq.n	8011acc <tcp_input+0x60c>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8011a90:	4b61      	ldr	r3, [pc, #388]	; (8011c18 <tcp_input+0x758>)
 8011a92:	881b      	ldrh	r3, [r3, #0]
 8011a94:	817b      	strh	r3, [r7, #10]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8011a96:	69bb      	ldr	r3, [r7, #24]
 8011a98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011a9c:	2b00      	cmp	r3, #0
 8011a9e:	d00a      	beq.n	8011ab6 <tcp_input+0x5f6>
 8011aa0:	69bb      	ldr	r3, [r7, #24]
 8011aa2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011aa6:	69ba      	ldr	r2, [r7, #24]
 8011aa8:	6910      	ldr	r0, [r2, #16]
 8011aaa:	897a      	ldrh	r2, [r7, #10]
 8011aac:	69b9      	ldr	r1, [r7, #24]
 8011aae:	4798      	blx	r3
 8011ab0:	4603      	mov	r3, r0
 8011ab2:	74fb      	strb	r3, [r7, #19]
 8011ab4:	e001      	b.n	8011aba <tcp_input+0x5fa>
 8011ab6:	2300      	movs	r3, #0
 8011ab8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8011aba:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011abe:	f113 0f0d 	cmn.w	r3, #13
 8011ac2:	f000 8099 	beq.w	8011bf8 <tcp_input+0x738>
              goto aborted;
            }
          }
          recv_acked = 0;
 8011ac6:	4b54      	ldr	r3, [pc, #336]	; (8011c18 <tcp_input+0x758>)
 8011ac8:	2200      	movs	r2, #0
 8011aca:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8011acc:	69b8      	ldr	r0, [r7, #24]
 8011ace:	f000 f917 	bl	8011d00 <tcp_input_delayed_close>
 8011ad2:	4603      	mov	r3, r0
 8011ad4:	2b00      	cmp	r3, #0
 8011ad6:	f040 8091 	bne.w	8011bfc <tcp_input+0x73c>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8011ada:	4b4d      	ldr	r3, [pc, #308]	; (8011c10 <tcp_input+0x750>)
 8011adc:	681b      	ldr	r3, [r3, #0]
 8011ade:	2b00      	cmp	r3, #0
 8011ae0:	d041      	beq.n	8011b66 <tcp_input+0x6a6>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8011ae2:	69bb      	ldr	r3, [r7, #24]
 8011ae4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011ae6:	2b00      	cmp	r3, #0
 8011ae8:	d006      	beq.n	8011af8 <tcp_input+0x638>
 8011aea:	4b50      	ldr	r3, [pc, #320]	; (8011c2c <tcp_input+0x76c>)
 8011aec:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8011af0:	494f      	ldr	r1, [pc, #316]	; (8011c30 <tcp_input+0x770>)
 8011af2:	4850      	ldr	r0, [pc, #320]	; (8011c34 <tcp_input+0x774>)
 8011af4:	f009 fcc4 	bl	801b480 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8011af8:	69bb      	ldr	r3, [r7, #24]
 8011afa:	8b5b      	ldrh	r3, [r3, #26]
 8011afc:	f003 0310 	and.w	r3, r3, #16
 8011b00:	2b00      	cmp	r3, #0
 8011b02:	d008      	beq.n	8011b16 <tcp_input+0x656>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8011b04:	4b42      	ldr	r3, [pc, #264]	; (8011c10 <tcp_input+0x750>)
 8011b06:	681b      	ldr	r3, [r3, #0]
 8011b08:	4618      	mov	r0, r3
 8011b0a:	f7fd fcfd 	bl	800f508 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8011b0e:	69b8      	ldr	r0, [r7, #24]
 8011b10:	f7fe fc32 	bl	8010378 <tcp_abort>
            goto aborted;
 8011b14:	e091      	b.n	8011c3a <tcp_input+0x77a>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8011b16:	69bb      	ldr	r3, [r7, #24]
 8011b18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011b1c:	2b00      	cmp	r3, #0
 8011b1e:	d00c      	beq.n	8011b3a <tcp_input+0x67a>
 8011b20:	69bb      	ldr	r3, [r7, #24]
 8011b22:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8011b26:	69bb      	ldr	r3, [r7, #24]
 8011b28:	6918      	ldr	r0, [r3, #16]
 8011b2a:	4b39      	ldr	r3, [pc, #228]	; (8011c10 <tcp_input+0x750>)
 8011b2c:	681a      	ldr	r2, [r3, #0]
 8011b2e:	2300      	movs	r3, #0
 8011b30:	69b9      	ldr	r1, [r7, #24]
 8011b32:	47a0      	blx	r4
 8011b34:	4603      	mov	r3, r0
 8011b36:	74fb      	strb	r3, [r7, #19]
 8011b38:	e008      	b.n	8011b4c <tcp_input+0x68c>
 8011b3a:	4b35      	ldr	r3, [pc, #212]	; (8011c10 <tcp_input+0x750>)
 8011b3c:	681a      	ldr	r2, [r3, #0]
 8011b3e:	2300      	movs	r3, #0
 8011b40:	69b9      	ldr	r1, [r7, #24]
 8011b42:	2000      	movs	r0, #0
 8011b44:	f7ff f94c 	bl	8010de0 <tcp_recv_null>
 8011b48:	4603      	mov	r3, r0
 8011b4a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8011b4c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011b50:	f113 0f0d 	cmn.w	r3, #13
 8011b54:	d054      	beq.n	8011c00 <tcp_input+0x740>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8011b56:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011b5a:	2b00      	cmp	r3, #0
 8011b5c:	d003      	beq.n	8011b66 <tcp_input+0x6a6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8011b5e:	4b2c      	ldr	r3, [pc, #176]	; (8011c10 <tcp_input+0x750>)
 8011b60:	681a      	ldr	r2, [r3, #0]
 8011b62:	69bb      	ldr	r3, [r7, #24]
 8011b64:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8011b66:	4b2b      	ldr	r3, [pc, #172]	; (8011c14 <tcp_input+0x754>)
 8011b68:	781b      	ldrb	r3, [r3, #0]
 8011b6a:	f003 0320 	and.w	r3, r3, #32
 8011b6e:	2b00      	cmp	r3, #0
 8011b70:	d031      	beq.n	8011bd6 <tcp_input+0x716>
          if (pcb->refused_data != NULL) {
 8011b72:	69bb      	ldr	r3, [r7, #24]
 8011b74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011b76:	2b00      	cmp	r3, #0
 8011b78:	d009      	beq.n	8011b8e <tcp_input+0x6ce>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8011b7a:	69bb      	ldr	r3, [r7, #24]
 8011b7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011b7e:	7b5a      	ldrb	r2, [r3, #13]
 8011b80:	69bb      	ldr	r3, [r7, #24]
 8011b82:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011b84:	f042 0220 	orr.w	r2, r2, #32
 8011b88:	b2d2      	uxtb	r2, r2
 8011b8a:	735a      	strb	r2, [r3, #13]
 8011b8c:	e023      	b.n	8011bd6 <tcp_input+0x716>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8011b8e:	69bb      	ldr	r3, [r7, #24]
 8011b90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011b92:	f642 52a0 	movw	r2, #11680	; 0x2da0
 8011b96:	4293      	cmp	r3, r2
 8011b98:	d005      	beq.n	8011ba6 <tcp_input+0x6e6>
              pcb->rcv_wnd++;
 8011b9a:	69bb      	ldr	r3, [r7, #24]
 8011b9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011b9e:	3301      	adds	r3, #1
 8011ba0:	b29a      	uxth	r2, r3
 8011ba2:	69bb      	ldr	r3, [r7, #24]
 8011ba4:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8011ba6:	69bb      	ldr	r3, [r7, #24]
 8011ba8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011bac:	2b00      	cmp	r3, #0
 8011bae:	d00b      	beq.n	8011bc8 <tcp_input+0x708>
 8011bb0:	69bb      	ldr	r3, [r7, #24]
 8011bb2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8011bb6:	69bb      	ldr	r3, [r7, #24]
 8011bb8:	6918      	ldr	r0, [r3, #16]
 8011bba:	2300      	movs	r3, #0
 8011bbc:	2200      	movs	r2, #0
 8011bbe:	69b9      	ldr	r1, [r7, #24]
 8011bc0:	47a0      	blx	r4
 8011bc2:	4603      	mov	r3, r0
 8011bc4:	74fb      	strb	r3, [r7, #19]
 8011bc6:	e001      	b.n	8011bcc <tcp_input+0x70c>
 8011bc8:	2300      	movs	r3, #0
 8011bca:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8011bcc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011bd0:	f113 0f0d 	cmn.w	r3, #13
 8011bd4:	d016      	beq.n	8011c04 <tcp_input+0x744>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8011bd6:	4b13      	ldr	r3, [pc, #76]	; (8011c24 <tcp_input+0x764>)
 8011bd8:	2200      	movs	r2, #0
 8011bda:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8011bdc:	69b8      	ldr	r0, [r7, #24]
 8011bde:	f000 f88f 	bl	8011d00 <tcp_input_delayed_close>
 8011be2:	4603      	mov	r3, r0
 8011be4:	2b00      	cmp	r3, #0
 8011be6:	d127      	bne.n	8011c38 <tcp_input+0x778>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8011be8:	69b8      	ldr	r0, [r7, #24]
 8011bea:	f002 facf 	bl	801418c <tcp_output>
 8011bee:	e024      	b.n	8011c3a <tcp_input+0x77a>
        goto aborted;
 8011bf0:	bf00      	nop
 8011bf2:	e022      	b.n	8011c3a <tcp_input+0x77a>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8011bf4:	bf00      	nop
 8011bf6:	e020      	b.n	8011c3a <tcp_input+0x77a>
              goto aborted;
 8011bf8:	bf00      	nop
 8011bfa:	e01e      	b.n	8011c3a <tcp_input+0x77a>
          goto aborted;
 8011bfc:	bf00      	nop
 8011bfe:	e01c      	b.n	8011c3a <tcp_input+0x77a>
            goto aborted;
 8011c00:	bf00      	nop
 8011c02:	e01a      	b.n	8011c3a <tcp_input+0x77a>
              goto aborted;
 8011c04:	bf00      	nop
 8011c06:	e018      	b.n	8011c3a <tcp_input+0x77a>
 8011c08:	20013b8c 	.word	0x20013b8c
 8011c0c:	20013ba0 	.word	0x20013ba0
 8011c10:	20013bc0 	.word	0x20013bc0
 8011c14:	20013bbd 	.word	0x20013bbd
 8011c18:	20013bb8 	.word	0x20013bb8
 8011c1c:	20013bbc 	.word	0x20013bbc
 8011c20:	20013bba 	.word	0x20013bba
 8011c24:	20013bc4 	.word	0x20013bc4
 8011c28:	20013b80 	.word	0x20013b80
 8011c2c:	0801f574 	.word	0x0801f574
 8011c30:	0801f728 	.word	0x0801f728
 8011c34:	0801f5c0 	.word	0x0801f5c0
          goto aborted;
 8011c38:	bf00      	nop
    tcp_input_pcb = NULL;
 8011c3a:	4b28      	ldr	r3, [pc, #160]	; (8011cdc <tcp_input+0x81c>)
 8011c3c:	2200      	movs	r2, #0
 8011c3e:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8011c40:	4b27      	ldr	r3, [pc, #156]	; (8011ce0 <tcp_input+0x820>)
 8011c42:	2200      	movs	r2, #0
 8011c44:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8011c46:	4b27      	ldr	r3, [pc, #156]	; (8011ce4 <tcp_input+0x824>)
 8011c48:	685b      	ldr	r3, [r3, #4]
 8011c4a:	2b00      	cmp	r3, #0
 8011c4c:	d041      	beq.n	8011cd2 <tcp_input+0x812>
      pbuf_free(inseg.p);
 8011c4e:	4b25      	ldr	r3, [pc, #148]	; (8011ce4 <tcp_input+0x824>)
 8011c50:	685b      	ldr	r3, [r3, #4]
 8011c52:	4618      	mov	r0, r3
 8011c54:	f7fd fc58 	bl	800f508 <pbuf_free>
      inseg.p = NULL;
 8011c58:	4b22      	ldr	r3, [pc, #136]	; (8011ce4 <tcp_input+0x824>)
 8011c5a:	2200      	movs	r2, #0
 8011c5c:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8011c5e:	e038      	b.n	8011cd2 <tcp_input+0x812>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8011c60:	4b21      	ldr	r3, [pc, #132]	; (8011ce8 <tcp_input+0x828>)
 8011c62:	681b      	ldr	r3, [r3, #0]
 8011c64:	899b      	ldrh	r3, [r3, #12]
 8011c66:	b29b      	uxth	r3, r3
 8011c68:	4618      	mov	r0, r3
 8011c6a:	f7fb ff2b 	bl	800dac4 <lwip_htons>
 8011c6e:	4603      	mov	r3, r0
 8011c70:	b2db      	uxtb	r3, r3
 8011c72:	f003 0304 	and.w	r3, r3, #4
 8011c76:	2b00      	cmp	r3, #0
 8011c78:	d118      	bne.n	8011cac <tcp_input+0x7ec>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011c7a:	4b1c      	ldr	r3, [pc, #112]	; (8011cec <tcp_input+0x82c>)
 8011c7c:	6819      	ldr	r1, [r3, #0]
 8011c7e:	4b1c      	ldr	r3, [pc, #112]	; (8011cf0 <tcp_input+0x830>)
 8011c80:	881b      	ldrh	r3, [r3, #0]
 8011c82:	461a      	mov	r2, r3
 8011c84:	4b1b      	ldr	r3, [pc, #108]	; (8011cf4 <tcp_input+0x834>)
 8011c86:	681b      	ldr	r3, [r3, #0]
 8011c88:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011c8a:	4b17      	ldr	r3, [pc, #92]	; (8011ce8 <tcp_input+0x828>)
 8011c8c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011c8e:	885b      	ldrh	r3, [r3, #2]
 8011c90:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011c92:	4a15      	ldr	r2, [pc, #84]	; (8011ce8 <tcp_input+0x828>)
 8011c94:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011c96:	8812      	ldrh	r2, [r2, #0]
 8011c98:	b292      	uxth	r2, r2
 8011c9a:	9202      	str	r2, [sp, #8]
 8011c9c:	9301      	str	r3, [sp, #4]
 8011c9e:	4b16      	ldr	r3, [pc, #88]	; (8011cf8 <tcp_input+0x838>)
 8011ca0:	9300      	str	r3, [sp, #0]
 8011ca2:	4b16      	ldr	r3, [pc, #88]	; (8011cfc <tcp_input+0x83c>)
 8011ca4:	4602      	mov	r2, r0
 8011ca6:	2000      	movs	r0, #0
 8011ca8:	f003 f852 	bl	8014d50 <tcp_rst>
    pbuf_free(p);
 8011cac:	6878      	ldr	r0, [r7, #4]
 8011cae:	f7fd fc2b 	bl	800f508 <pbuf_free>
  return;
 8011cb2:	e00e      	b.n	8011cd2 <tcp_input+0x812>
    goto dropped;
 8011cb4:	bf00      	nop
 8011cb6:	e008      	b.n	8011cca <tcp_input+0x80a>
    goto dropped;
 8011cb8:	bf00      	nop
 8011cba:	e006      	b.n	8011cca <tcp_input+0x80a>
      goto dropped;
 8011cbc:	bf00      	nop
 8011cbe:	e004      	b.n	8011cca <tcp_input+0x80a>
    goto dropped;
 8011cc0:	bf00      	nop
 8011cc2:	e002      	b.n	8011cca <tcp_input+0x80a>
      goto dropped;
 8011cc4:	bf00      	nop
 8011cc6:	e000      	b.n	8011cca <tcp_input+0x80a>
      goto dropped;
 8011cc8:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8011cca:	6878      	ldr	r0, [r7, #4]
 8011ccc:	f7fd fc1c 	bl	800f508 <pbuf_free>
 8011cd0:	e000      	b.n	8011cd4 <tcp_input+0x814>
  return;
 8011cd2:	bf00      	nop
}
 8011cd4:	3724      	adds	r7, #36	; 0x24
 8011cd6:	46bd      	mov	sp, r7
 8011cd8:	bd90      	pop	{r4, r7, pc}
 8011cda:	bf00      	nop
 8011cdc:	20013bc4 	.word	0x20013bc4
 8011ce0:	20013bc0 	.word	0x20013bc0
 8011ce4:	20013b8c 	.word	0x20013b8c
 8011ce8:	20013ba0 	.word	0x20013ba0
 8011cec:	20013bb4 	.word	0x20013bb4
 8011cf0:	20013bba 	.word	0x20013bba
 8011cf4:	20013bb0 	.word	0x20013bb0
 8011cf8:	2000a110 	.word	0x2000a110
 8011cfc:	2000a114 	.word	0x2000a114

08011d00 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8011d00:	b580      	push	{r7, lr}
 8011d02:	b082      	sub	sp, #8
 8011d04:	af00      	add	r7, sp, #0
 8011d06:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8011d08:	687b      	ldr	r3, [r7, #4]
 8011d0a:	2b00      	cmp	r3, #0
 8011d0c:	d106      	bne.n	8011d1c <tcp_input_delayed_close+0x1c>
 8011d0e:	4b17      	ldr	r3, [pc, #92]	; (8011d6c <tcp_input_delayed_close+0x6c>)
 8011d10:	f240 225a 	movw	r2, #602	; 0x25a
 8011d14:	4916      	ldr	r1, [pc, #88]	; (8011d70 <tcp_input_delayed_close+0x70>)
 8011d16:	4817      	ldr	r0, [pc, #92]	; (8011d74 <tcp_input_delayed_close+0x74>)
 8011d18:	f009 fbb2 	bl	801b480 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8011d1c:	4b16      	ldr	r3, [pc, #88]	; (8011d78 <tcp_input_delayed_close+0x78>)
 8011d1e:	781b      	ldrb	r3, [r3, #0]
 8011d20:	f003 0310 	and.w	r3, r3, #16
 8011d24:	2b00      	cmp	r3, #0
 8011d26:	d01c      	beq.n	8011d62 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8011d28:	687b      	ldr	r3, [r7, #4]
 8011d2a:	8b5b      	ldrh	r3, [r3, #26]
 8011d2c:	f003 0310 	and.w	r3, r3, #16
 8011d30:	2b00      	cmp	r3, #0
 8011d32:	d10d      	bne.n	8011d50 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8011d34:	687b      	ldr	r3, [r7, #4]
 8011d36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011d3a:	2b00      	cmp	r3, #0
 8011d3c:	d008      	beq.n	8011d50 <tcp_input_delayed_close+0x50>
 8011d3e:	687b      	ldr	r3, [r7, #4]
 8011d40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011d44:	687a      	ldr	r2, [r7, #4]
 8011d46:	6912      	ldr	r2, [r2, #16]
 8011d48:	f06f 010e 	mvn.w	r1, #14
 8011d4c:	4610      	mov	r0, r2
 8011d4e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8011d50:	6879      	ldr	r1, [r7, #4]
 8011d52:	480a      	ldr	r0, [pc, #40]	; (8011d7c <tcp_input_delayed_close+0x7c>)
 8011d54:	f7ff fa3c 	bl	80111d0 <tcp_pcb_remove>
    tcp_free(pcb);
 8011d58:	6878      	ldr	r0, [r7, #4]
 8011d5a:	f7fe f825 	bl	800fda8 <tcp_free>
    return 1;
 8011d5e:	2301      	movs	r3, #1
 8011d60:	e000      	b.n	8011d64 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8011d62:	2300      	movs	r3, #0
}
 8011d64:	4618      	mov	r0, r3
 8011d66:	3708      	adds	r7, #8
 8011d68:	46bd      	mov	sp, r7
 8011d6a:	bd80      	pop	{r7, pc}
 8011d6c:	0801f574 	.word	0x0801f574
 8011d70:	0801f744 	.word	0x0801f744
 8011d74:	0801f5c0 	.word	0x0801f5c0
 8011d78:	20013bbd 	.word	0x20013bbd
 8011d7c:	20013b80 	.word	0x20013b80

08011d80 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8011d80:	b590      	push	{r4, r7, lr}
 8011d82:	b08b      	sub	sp, #44	; 0x2c
 8011d84:	af04      	add	r7, sp, #16
 8011d86:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8011d88:	4b6f      	ldr	r3, [pc, #444]	; (8011f48 <tcp_listen_input+0x1c8>)
 8011d8a:	781b      	ldrb	r3, [r3, #0]
 8011d8c:	f003 0304 	and.w	r3, r3, #4
 8011d90:	2b00      	cmp	r3, #0
 8011d92:	f040 80d2 	bne.w	8011f3a <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8011d96:	687b      	ldr	r3, [r7, #4]
 8011d98:	2b00      	cmp	r3, #0
 8011d9a:	d106      	bne.n	8011daa <tcp_listen_input+0x2a>
 8011d9c:	4b6b      	ldr	r3, [pc, #428]	; (8011f4c <tcp_listen_input+0x1cc>)
 8011d9e:	f240 2281 	movw	r2, #641	; 0x281
 8011da2:	496b      	ldr	r1, [pc, #428]	; (8011f50 <tcp_listen_input+0x1d0>)
 8011da4:	486b      	ldr	r0, [pc, #428]	; (8011f54 <tcp_listen_input+0x1d4>)
 8011da6:	f009 fb6b 	bl	801b480 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8011daa:	4b67      	ldr	r3, [pc, #412]	; (8011f48 <tcp_listen_input+0x1c8>)
 8011dac:	781b      	ldrb	r3, [r3, #0]
 8011dae:	f003 0310 	and.w	r3, r3, #16
 8011db2:	2b00      	cmp	r3, #0
 8011db4:	d019      	beq.n	8011dea <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011db6:	4b68      	ldr	r3, [pc, #416]	; (8011f58 <tcp_listen_input+0x1d8>)
 8011db8:	6819      	ldr	r1, [r3, #0]
 8011dba:	4b68      	ldr	r3, [pc, #416]	; (8011f5c <tcp_listen_input+0x1dc>)
 8011dbc:	881b      	ldrh	r3, [r3, #0]
 8011dbe:	461a      	mov	r2, r3
 8011dc0:	4b67      	ldr	r3, [pc, #412]	; (8011f60 <tcp_listen_input+0x1e0>)
 8011dc2:	681b      	ldr	r3, [r3, #0]
 8011dc4:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011dc6:	4b67      	ldr	r3, [pc, #412]	; (8011f64 <tcp_listen_input+0x1e4>)
 8011dc8:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011dca:	885b      	ldrh	r3, [r3, #2]
 8011dcc:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011dce:	4a65      	ldr	r2, [pc, #404]	; (8011f64 <tcp_listen_input+0x1e4>)
 8011dd0:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011dd2:	8812      	ldrh	r2, [r2, #0]
 8011dd4:	b292      	uxth	r2, r2
 8011dd6:	9202      	str	r2, [sp, #8]
 8011dd8:	9301      	str	r3, [sp, #4]
 8011dda:	4b63      	ldr	r3, [pc, #396]	; (8011f68 <tcp_listen_input+0x1e8>)
 8011ddc:	9300      	str	r3, [sp, #0]
 8011dde:	4b63      	ldr	r3, [pc, #396]	; (8011f6c <tcp_listen_input+0x1ec>)
 8011de0:	4602      	mov	r2, r0
 8011de2:	6878      	ldr	r0, [r7, #4]
 8011de4:	f002 ffb4 	bl	8014d50 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8011de8:	e0a9      	b.n	8011f3e <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8011dea:	4b57      	ldr	r3, [pc, #348]	; (8011f48 <tcp_listen_input+0x1c8>)
 8011dec:	781b      	ldrb	r3, [r3, #0]
 8011dee:	f003 0302 	and.w	r3, r3, #2
 8011df2:	2b00      	cmp	r3, #0
 8011df4:	f000 80a3 	beq.w	8011f3e <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8011df8:	687b      	ldr	r3, [r7, #4]
 8011dfa:	7d5b      	ldrb	r3, [r3, #21]
 8011dfc:	4618      	mov	r0, r3
 8011dfe:	f7ff f913 	bl	8011028 <tcp_alloc>
 8011e02:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8011e04:	697b      	ldr	r3, [r7, #20]
 8011e06:	2b00      	cmp	r3, #0
 8011e08:	d111      	bne.n	8011e2e <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8011e0a:	687b      	ldr	r3, [r7, #4]
 8011e0c:	699b      	ldr	r3, [r3, #24]
 8011e0e:	2b00      	cmp	r3, #0
 8011e10:	d00a      	beq.n	8011e28 <tcp_listen_input+0xa8>
 8011e12:	687b      	ldr	r3, [r7, #4]
 8011e14:	699b      	ldr	r3, [r3, #24]
 8011e16:	687a      	ldr	r2, [r7, #4]
 8011e18:	6910      	ldr	r0, [r2, #16]
 8011e1a:	f04f 32ff 	mov.w	r2, #4294967295
 8011e1e:	2100      	movs	r1, #0
 8011e20:	4798      	blx	r3
 8011e22:	4603      	mov	r3, r0
 8011e24:	73bb      	strb	r3, [r7, #14]
      return;
 8011e26:	e08b      	b.n	8011f40 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8011e28:	23f0      	movs	r3, #240	; 0xf0
 8011e2a:	73bb      	strb	r3, [r7, #14]
      return;
 8011e2c:	e088      	b.n	8011f40 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8011e2e:	4b50      	ldr	r3, [pc, #320]	; (8011f70 <tcp_listen_input+0x1f0>)
 8011e30:	695a      	ldr	r2, [r3, #20]
 8011e32:	697b      	ldr	r3, [r7, #20]
 8011e34:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8011e36:	4b4e      	ldr	r3, [pc, #312]	; (8011f70 <tcp_listen_input+0x1f0>)
 8011e38:	691a      	ldr	r2, [r3, #16]
 8011e3a:	697b      	ldr	r3, [r7, #20]
 8011e3c:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8011e3e:	687b      	ldr	r3, [r7, #4]
 8011e40:	8ada      	ldrh	r2, [r3, #22]
 8011e42:	697b      	ldr	r3, [r7, #20]
 8011e44:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8011e46:	4b47      	ldr	r3, [pc, #284]	; (8011f64 <tcp_listen_input+0x1e4>)
 8011e48:	681b      	ldr	r3, [r3, #0]
 8011e4a:	881b      	ldrh	r3, [r3, #0]
 8011e4c:	b29a      	uxth	r2, r3
 8011e4e:	697b      	ldr	r3, [r7, #20]
 8011e50:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8011e52:	697b      	ldr	r3, [r7, #20]
 8011e54:	2203      	movs	r2, #3
 8011e56:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8011e58:	4b41      	ldr	r3, [pc, #260]	; (8011f60 <tcp_listen_input+0x1e0>)
 8011e5a:	681b      	ldr	r3, [r3, #0]
 8011e5c:	1c5a      	adds	r2, r3, #1
 8011e5e:	697b      	ldr	r3, [r7, #20]
 8011e60:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8011e62:	697b      	ldr	r3, [r7, #20]
 8011e64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011e66:	697b      	ldr	r3, [r7, #20]
 8011e68:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8011e6a:	6978      	ldr	r0, [r7, #20]
 8011e6c:	f7ff fa44 	bl	80112f8 <tcp_next_iss>
 8011e70:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8011e72:	697b      	ldr	r3, [r7, #20]
 8011e74:	693a      	ldr	r2, [r7, #16]
 8011e76:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8011e78:	697b      	ldr	r3, [r7, #20]
 8011e7a:	693a      	ldr	r2, [r7, #16]
 8011e7c:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8011e7e:	697b      	ldr	r3, [r7, #20]
 8011e80:	693a      	ldr	r2, [r7, #16]
 8011e82:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8011e84:	697b      	ldr	r3, [r7, #20]
 8011e86:	693a      	ldr	r2, [r7, #16]
 8011e88:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8011e8a:	4b35      	ldr	r3, [pc, #212]	; (8011f60 <tcp_listen_input+0x1e0>)
 8011e8c:	681b      	ldr	r3, [r3, #0]
 8011e8e:	1e5a      	subs	r2, r3, #1
 8011e90:	697b      	ldr	r3, [r7, #20]
 8011e92:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8011e94:	687b      	ldr	r3, [r7, #4]
 8011e96:	691a      	ldr	r2, [r3, #16]
 8011e98:	697b      	ldr	r3, [r7, #20]
 8011e9a:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8011e9c:	697b      	ldr	r3, [r7, #20]
 8011e9e:	687a      	ldr	r2, [r7, #4]
 8011ea0:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8011ea2:	687b      	ldr	r3, [r7, #4]
 8011ea4:	7a5b      	ldrb	r3, [r3, #9]
 8011ea6:	f003 030c 	and.w	r3, r3, #12
 8011eaa:	b2da      	uxtb	r2, r3
 8011eac:	697b      	ldr	r3, [r7, #20]
 8011eae:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8011eb0:	687b      	ldr	r3, [r7, #4]
 8011eb2:	7a1a      	ldrb	r2, [r3, #8]
 8011eb4:	697b      	ldr	r3, [r7, #20]
 8011eb6:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8011eb8:	4b2e      	ldr	r3, [pc, #184]	; (8011f74 <tcp_listen_input+0x1f4>)
 8011eba:	681a      	ldr	r2, [r3, #0]
 8011ebc:	697b      	ldr	r3, [r7, #20]
 8011ebe:	60da      	str	r2, [r3, #12]
 8011ec0:	4a2c      	ldr	r2, [pc, #176]	; (8011f74 <tcp_listen_input+0x1f4>)
 8011ec2:	697b      	ldr	r3, [r7, #20]
 8011ec4:	6013      	str	r3, [r2, #0]
 8011ec6:	f003 f905 	bl	80150d4 <tcp_timer_needed>
 8011eca:	4b2b      	ldr	r3, [pc, #172]	; (8011f78 <tcp_listen_input+0x1f8>)
 8011ecc:	2201      	movs	r2, #1
 8011ece:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8011ed0:	6978      	ldr	r0, [r7, #20]
 8011ed2:	f001 fd8f 	bl	80139f4 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8011ed6:	4b23      	ldr	r3, [pc, #140]	; (8011f64 <tcp_listen_input+0x1e4>)
 8011ed8:	681b      	ldr	r3, [r3, #0]
 8011eda:	89db      	ldrh	r3, [r3, #14]
 8011edc:	b29a      	uxth	r2, r3
 8011ede:	697b      	ldr	r3, [r7, #20]
 8011ee0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8011ee4:	697b      	ldr	r3, [r7, #20]
 8011ee6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8011eea:	697b      	ldr	r3, [r7, #20]
 8011eec:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8011ef0:	697b      	ldr	r3, [r7, #20]
 8011ef2:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8011ef4:	697b      	ldr	r3, [r7, #20]
 8011ef6:	3304      	adds	r3, #4
 8011ef8:	4618      	mov	r0, r3
 8011efa:	f007 f835 	bl	8018f68 <ip4_route>
 8011efe:	4601      	mov	r1, r0
 8011f00:	697b      	ldr	r3, [r7, #20]
 8011f02:	3304      	adds	r3, #4
 8011f04:	461a      	mov	r2, r3
 8011f06:	4620      	mov	r0, r4
 8011f08:	f7ff fa1c 	bl	8011344 <tcp_eff_send_mss_netif>
 8011f0c:	4603      	mov	r3, r0
 8011f0e:	461a      	mov	r2, r3
 8011f10:	697b      	ldr	r3, [r7, #20]
 8011f12:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8011f14:	2112      	movs	r1, #18
 8011f16:	6978      	ldr	r0, [r7, #20]
 8011f18:	f002 f84a 	bl	8013fb0 <tcp_enqueue_flags>
 8011f1c:	4603      	mov	r3, r0
 8011f1e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8011f20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011f24:	2b00      	cmp	r3, #0
 8011f26:	d004      	beq.n	8011f32 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8011f28:	2100      	movs	r1, #0
 8011f2a:	6978      	ldr	r0, [r7, #20]
 8011f2c:	f7fe f966 	bl	80101fc <tcp_abandon>
      return;
 8011f30:	e006      	b.n	8011f40 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8011f32:	6978      	ldr	r0, [r7, #20]
 8011f34:	f002 f92a 	bl	801418c <tcp_output>
  return;
 8011f38:	e001      	b.n	8011f3e <tcp_listen_input+0x1be>
    return;
 8011f3a:	bf00      	nop
 8011f3c:	e000      	b.n	8011f40 <tcp_listen_input+0x1c0>
  return;
 8011f3e:	bf00      	nop
}
 8011f40:	371c      	adds	r7, #28
 8011f42:	46bd      	mov	sp, r7
 8011f44:	bd90      	pop	{r4, r7, pc}
 8011f46:	bf00      	nop
 8011f48:	20013bbc 	.word	0x20013bbc
 8011f4c:	0801f574 	.word	0x0801f574
 8011f50:	0801f76c 	.word	0x0801f76c
 8011f54:	0801f5c0 	.word	0x0801f5c0
 8011f58:	20013bb4 	.word	0x20013bb4
 8011f5c:	20013bba 	.word	0x20013bba
 8011f60:	20013bb0 	.word	0x20013bb0
 8011f64:	20013ba0 	.word	0x20013ba0
 8011f68:	2000a110 	.word	0x2000a110
 8011f6c:	2000a114 	.word	0x2000a114
 8011f70:	2000a100 	.word	0x2000a100
 8011f74:	20013b80 	.word	0x20013b80
 8011f78:	20013b88 	.word	0x20013b88

08011f7c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8011f7c:	b580      	push	{r7, lr}
 8011f7e:	b086      	sub	sp, #24
 8011f80:	af04      	add	r7, sp, #16
 8011f82:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8011f84:	4b2f      	ldr	r3, [pc, #188]	; (8012044 <tcp_timewait_input+0xc8>)
 8011f86:	781b      	ldrb	r3, [r3, #0]
 8011f88:	f003 0304 	and.w	r3, r3, #4
 8011f8c:	2b00      	cmp	r3, #0
 8011f8e:	d153      	bne.n	8012038 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8011f90:	687b      	ldr	r3, [r7, #4]
 8011f92:	2b00      	cmp	r3, #0
 8011f94:	d106      	bne.n	8011fa4 <tcp_timewait_input+0x28>
 8011f96:	4b2c      	ldr	r3, [pc, #176]	; (8012048 <tcp_timewait_input+0xcc>)
 8011f98:	f240 22ee 	movw	r2, #750	; 0x2ee
 8011f9c:	492b      	ldr	r1, [pc, #172]	; (801204c <tcp_timewait_input+0xd0>)
 8011f9e:	482c      	ldr	r0, [pc, #176]	; (8012050 <tcp_timewait_input+0xd4>)
 8011fa0:	f009 fa6e 	bl	801b480 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8011fa4:	4b27      	ldr	r3, [pc, #156]	; (8012044 <tcp_timewait_input+0xc8>)
 8011fa6:	781b      	ldrb	r3, [r3, #0]
 8011fa8:	f003 0302 	and.w	r3, r3, #2
 8011fac:	2b00      	cmp	r3, #0
 8011fae:	d02a      	beq.n	8012006 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8011fb0:	4b28      	ldr	r3, [pc, #160]	; (8012054 <tcp_timewait_input+0xd8>)
 8011fb2:	681a      	ldr	r2, [r3, #0]
 8011fb4:	687b      	ldr	r3, [r7, #4]
 8011fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011fb8:	1ad3      	subs	r3, r2, r3
 8011fba:	2b00      	cmp	r3, #0
 8011fbc:	db2d      	blt.n	801201a <tcp_timewait_input+0x9e>
 8011fbe:	4b25      	ldr	r3, [pc, #148]	; (8012054 <tcp_timewait_input+0xd8>)
 8011fc0:	681a      	ldr	r2, [r3, #0]
 8011fc2:	687b      	ldr	r3, [r7, #4]
 8011fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011fc6:	6879      	ldr	r1, [r7, #4]
 8011fc8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011fca:	440b      	add	r3, r1
 8011fcc:	1ad3      	subs	r3, r2, r3
 8011fce:	2b00      	cmp	r3, #0
 8011fd0:	dc23      	bgt.n	801201a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011fd2:	4b21      	ldr	r3, [pc, #132]	; (8012058 <tcp_timewait_input+0xdc>)
 8011fd4:	6819      	ldr	r1, [r3, #0]
 8011fd6:	4b21      	ldr	r3, [pc, #132]	; (801205c <tcp_timewait_input+0xe0>)
 8011fd8:	881b      	ldrh	r3, [r3, #0]
 8011fda:	461a      	mov	r2, r3
 8011fdc:	4b1d      	ldr	r3, [pc, #116]	; (8012054 <tcp_timewait_input+0xd8>)
 8011fde:	681b      	ldr	r3, [r3, #0]
 8011fe0:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011fe2:	4b1f      	ldr	r3, [pc, #124]	; (8012060 <tcp_timewait_input+0xe4>)
 8011fe4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011fe6:	885b      	ldrh	r3, [r3, #2]
 8011fe8:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011fea:	4a1d      	ldr	r2, [pc, #116]	; (8012060 <tcp_timewait_input+0xe4>)
 8011fec:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011fee:	8812      	ldrh	r2, [r2, #0]
 8011ff0:	b292      	uxth	r2, r2
 8011ff2:	9202      	str	r2, [sp, #8]
 8011ff4:	9301      	str	r3, [sp, #4]
 8011ff6:	4b1b      	ldr	r3, [pc, #108]	; (8012064 <tcp_timewait_input+0xe8>)
 8011ff8:	9300      	str	r3, [sp, #0]
 8011ffa:	4b1b      	ldr	r3, [pc, #108]	; (8012068 <tcp_timewait_input+0xec>)
 8011ffc:	4602      	mov	r2, r0
 8011ffe:	6878      	ldr	r0, [r7, #4]
 8012000:	f002 fea6 	bl	8014d50 <tcp_rst>
      return;
 8012004:	e01b      	b.n	801203e <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8012006:	4b0f      	ldr	r3, [pc, #60]	; (8012044 <tcp_timewait_input+0xc8>)
 8012008:	781b      	ldrb	r3, [r3, #0]
 801200a:	f003 0301 	and.w	r3, r3, #1
 801200e:	2b00      	cmp	r3, #0
 8012010:	d003      	beq.n	801201a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8012012:	4b16      	ldr	r3, [pc, #88]	; (801206c <tcp_timewait_input+0xf0>)
 8012014:	681a      	ldr	r2, [r3, #0]
 8012016:	687b      	ldr	r3, [r7, #4]
 8012018:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 801201a:	4b10      	ldr	r3, [pc, #64]	; (801205c <tcp_timewait_input+0xe0>)
 801201c:	881b      	ldrh	r3, [r3, #0]
 801201e:	2b00      	cmp	r3, #0
 8012020:	d00c      	beq.n	801203c <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8012022:	687b      	ldr	r3, [r7, #4]
 8012024:	8b5b      	ldrh	r3, [r3, #26]
 8012026:	f043 0302 	orr.w	r3, r3, #2
 801202a:	b29a      	uxth	r2, r3
 801202c:	687b      	ldr	r3, [r7, #4]
 801202e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8012030:	6878      	ldr	r0, [r7, #4]
 8012032:	f002 f8ab 	bl	801418c <tcp_output>
  }
  return;
 8012036:	e001      	b.n	801203c <tcp_timewait_input+0xc0>
    return;
 8012038:	bf00      	nop
 801203a:	e000      	b.n	801203e <tcp_timewait_input+0xc2>
  return;
 801203c:	bf00      	nop
}
 801203e:	3708      	adds	r7, #8
 8012040:	46bd      	mov	sp, r7
 8012042:	bd80      	pop	{r7, pc}
 8012044:	20013bbc 	.word	0x20013bbc
 8012048:	0801f574 	.word	0x0801f574
 801204c:	0801f78c 	.word	0x0801f78c
 8012050:	0801f5c0 	.word	0x0801f5c0
 8012054:	20013bb0 	.word	0x20013bb0
 8012058:	20013bb4 	.word	0x20013bb4
 801205c:	20013bba 	.word	0x20013bba
 8012060:	20013ba0 	.word	0x20013ba0
 8012064:	2000a110 	.word	0x2000a110
 8012068:	2000a114 	.word	0x2000a114
 801206c:	20013b74 	.word	0x20013b74

08012070 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8012070:	b590      	push	{r4, r7, lr}
 8012072:	b08d      	sub	sp, #52	; 0x34
 8012074:	af04      	add	r7, sp, #16
 8012076:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8012078:	2300      	movs	r3, #0
 801207a:	77fb      	strb	r3, [r7, #31]
  err_t err;

  err = ERR_OK;
 801207c:	2300      	movs	r3, #0
 801207e:	77bb      	strb	r3, [r7, #30]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8012080:	687b      	ldr	r3, [r7, #4]
 8012082:	2b00      	cmp	r3, #0
 8012084:	d106      	bne.n	8012094 <tcp_process+0x24>
 8012086:	4b9d      	ldr	r3, [pc, #628]	; (80122fc <tcp_process+0x28c>)
 8012088:	f44f 7247 	mov.w	r2, #796	; 0x31c
 801208c:	499c      	ldr	r1, [pc, #624]	; (8012300 <tcp_process+0x290>)
 801208e:	489d      	ldr	r0, [pc, #628]	; (8012304 <tcp_process+0x294>)
 8012090:	f009 f9f6 	bl	801b480 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8012094:	4b9c      	ldr	r3, [pc, #624]	; (8012308 <tcp_process+0x298>)
 8012096:	781b      	ldrb	r3, [r3, #0]
 8012098:	f003 0304 	and.w	r3, r3, #4
 801209c:	2b00      	cmp	r3, #0
 801209e:	d04e      	beq.n	801213e <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 80120a0:	687b      	ldr	r3, [r7, #4]
 80120a2:	7d1b      	ldrb	r3, [r3, #20]
 80120a4:	2b02      	cmp	r3, #2
 80120a6:	d108      	bne.n	80120ba <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 80120a8:	687b      	ldr	r3, [r7, #4]
 80120aa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80120ac:	4b97      	ldr	r3, [pc, #604]	; (801230c <tcp_process+0x29c>)
 80120ae:	681b      	ldr	r3, [r3, #0]
 80120b0:	429a      	cmp	r2, r3
 80120b2:	d123      	bne.n	80120fc <tcp_process+0x8c>
        acceptable = 1;
 80120b4:	2301      	movs	r3, #1
 80120b6:	77fb      	strb	r3, [r7, #31]
 80120b8:	e020      	b.n	80120fc <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 80120ba:	687b      	ldr	r3, [r7, #4]
 80120bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80120be:	4b94      	ldr	r3, [pc, #592]	; (8012310 <tcp_process+0x2a0>)
 80120c0:	681b      	ldr	r3, [r3, #0]
 80120c2:	429a      	cmp	r2, r3
 80120c4:	d102      	bne.n	80120cc <tcp_process+0x5c>
        acceptable = 1;
 80120c6:	2301      	movs	r3, #1
 80120c8:	77fb      	strb	r3, [r7, #31]
 80120ca:	e017      	b.n	80120fc <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80120cc:	4b90      	ldr	r3, [pc, #576]	; (8012310 <tcp_process+0x2a0>)
 80120ce:	681a      	ldr	r2, [r3, #0]
 80120d0:	687b      	ldr	r3, [r7, #4]
 80120d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80120d4:	1ad3      	subs	r3, r2, r3
 80120d6:	2b00      	cmp	r3, #0
 80120d8:	db10      	blt.n	80120fc <tcp_process+0x8c>
 80120da:	4b8d      	ldr	r3, [pc, #564]	; (8012310 <tcp_process+0x2a0>)
 80120dc:	681a      	ldr	r2, [r3, #0]
 80120de:	687b      	ldr	r3, [r7, #4]
 80120e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80120e2:	6879      	ldr	r1, [r7, #4]
 80120e4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80120e6:	440b      	add	r3, r1
 80120e8:	1ad3      	subs	r3, r2, r3
 80120ea:	2b00      	cmp	r3, #0
 80120ec:	dc06      	bgt.n	80120fc <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 80120ee:	687b      	ldr	r3, [r7, #4]
 80120f0:	8b5b      	ldrh	r3, [r3, #26]
 80120f2:	f043 0302 	orr.w	r3, r3, #2
 80120f6:	b29a      	uxth	r2, r3
 80120f8:	687b      	ldr	r3, [r7, #4]
 80120fa:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 80120fc:	7ffb      	ldrb	r3, [r7, #31]
 80120fe:	2b00      	cmp	r3, #0
 8012100:	d01b      	beq.n	801213a <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8012102:	687b      	ldr	r3, [r7, #4]
 8012104:	7d1b      	ldrb	r3, [r3, #20]
 8012106:	2b00      	cmp	r3, #0
 8012108:	d106      	bne.n	8012118 <tcp_process+0xa8>
 801210a:	4b7c      	ldr	r3, [pc, #496]	; (80122fc <tcp_process+0x28c>)
 801210c:	f44f 724e 	mov.w	r2, #824	; 0x338
 8012110:	4980      	ldr	r1, [pc, #512]	; (8012314 <tcp_process+0x2a4>)
 8012112:	487c      	ldr	r0, [pc, #496]	; (8012304 <tcp_process+0x294>)
 8012114:	f009 f9b4 	bl	801b480 <iprintf>
      recv_flags |= TF_RESET;
 8012118:	4b7f      	ldr	r3, [pc, #508]	; (8012318 <tcp_process+0x2a8>)
 801211a:	781b      	ldrb	r3, [r3, #0]
 801211c:	f043 0308 	orr.w	r3, r3, #8
 8012120:	b2da      	uxtb	r2, r3
 8012122:	4b7d      	ldr	r3, [pc, #500]	; (8012318 <tcp_process+0x2a8>)
 8012124:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8012126:	687b      	ldr	r3, [r7, #4]
 8012128:	8b5b      	ldrh	r3, [r3, #26]
 801212a:	f023 0301 	bic.w	r3, r3, #1
 801212e:	b29a      	uxth	r2, r3
 8012130:	687b      	ldr	r3, [r7, #4]
 8012132:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8012134:	f06f 030d 	mvn.w	r3, #13
 8012138:	e37a      	b.n	8012830 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 801213a:	2300      	movs	r3, #0
 801213c:	e378      	b.n	8012830 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 801213e:	4b72      	ldr	r3, [pc, #456]	; (8012308 <tcp_process+0x298>)
 8012140:	781b      	ldrb	r3, [r3, #0]
 8012142:	f003 0302 	and.w	r3, r3, #2
 8012146:	2b00      	cmp	r3, #0
 8012148:	d010      	beq.n	801216c <tcp_process+0xfc>
 801214a:	687b      	ldr	r3, [r7, #4]
 801214c:	7d1b      	ldrb	r3, [r3, #20]
 801214e:	2b02      	cmp	r3, #2
 8012150:	d00c      	beq.n	801216c <tcp_process+0xfc>
 8012152:	687b      	ldr	r3, [r7, #4]
 8012154:	7d1b      	ldrb	r3, [r3, #20]
 8012156:	2b03      	cmp	r3, #3
 8012158:	d008      	beq.n	801216c <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 801215a:	687b      	ldr	r3, [r7, #4]
 801215c:	8b5b      	ldrh	r3, [r3, #26]
 801215e:	f043 0302 	orr.w	r3, r3, #2
 8012162:	b29a      	uxth	r2, r3
 8012164:	687b      	ldr	r3, [r7, #4]
 8012166:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8012168:	2300      	movs	r3, #0
 801216a:	e361      	b.n	8012830 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 801216c:	687b      	ldr	r3, [r7, #4]
 801216e:	8b5b      	ldrh	r3, [r3, #26]
 8012170:	f003 0310 	and.w	r3, r3, #16
 8012174:	2b00      	cmp	r3, #0
 8012176:	d103      	bne.n	8012180 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8012178:	4b68      	ldr	r3, [pc, #416]	; (801231c <tcp_process+0x2ac>)
 801217a:	681a      	ldr	r2, [r3, #0]
 801217c:	687b      	ldr	r3, [r7, #4]
 801217e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8012180:	687b      	ldr	r3, [r7, #4]
 8012182:	2200      	movs	r2, #0
 8012184:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8012188:	687b      	ldr	r3, [r7, #4]
 801218a:	2200      	movs	r2, #0
 801218c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8012190:	6878      	ldr	r0, [r7, #4]
 8012192:	f001 fc2f 	bl	80139f4 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8012196:	687b      	ldr	r3, [r7, #4]
 8012198:	7d1b      	ldrb	r3, [r3, #20]
 801219a:	3b02      	subs	r3, #2
 801219c:	2b07      	cmp	r3, #7
 801219e:	f200 8337 	bhi.w	8012810 <tcp_process+0x7a0>
 80121a2:	a201      	add	r2, pc, #4	; (adr r2, 80121a8 <tcp_process+0x138>)
 80121a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80121a8:	080121c9 	.word	0x080121c9
 80121ac:	080123f9 	.word	0x080123f9
 80121b0:	08012571 	.word	0x08012571
 80121b4:	0801259b 	.word	0x0801259b
 80121b8:	080126bf 	.word	0x080126bf
 80121bc:	08012571 	.word	0x08012571
 80121c0:	0801274b 	.word	0x0801274b
 80121c4:	080127db 	.word	0x080127db
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 80121c8:	4b4f      	ldr	r3, [pc, #316]	; (8012308 <tcp_process+0x298>)
 80121ca:	781b      	ldrb	r3, [r3, #0]
 80121cc:	f003 0310 	and.w	r3, r3, #16
 80121d0:	2b00      	cmp	r3, #0
 80121d2:	f000 80e4 	beq.w	801239e <tcp_process+0x32e>
 80121d6:	4b4c      	ldr	r3, [pc, #304]	; (8012308 <tcp_process+0x298>)
 80121d8:	781b      	ldrb	r3, [r3, #0]
 80121da:	f003 0302 	and.w	r3, r3, #2
 80121de:	2b00      	cmp	r3, #0
 80121e0:	f000 80dd 	beq.w	801239e <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 80121e4:	687b      	ldr	r3, [r7, #4]
 80121e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80121e8:	1c5a      	adds	r2, r3, #1
 80121ea:	4b48      	ldr	r3, [pc, #288]	; (801230c <tcp_process+0x29c>)
 80121ec:	681b      	ldr	r3, [r3, #0]
 80121ee:	429a      	cmp	r2, r3
 80121f0:	f040 80d5 	bne.w	801239e <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 80121f4:	4b46      	ldr	r3, [pc, #280]	; (8012310 <tcp_process+0x2a0>)
 80121f6:	681b      	ldr	r3, [r3, #0]
 80121f8:	1c5a      	adds	r2, r3, #1
 80121fa:	687b      	ldr	r3, [r7, #4]
 80121fc:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80121fe:	687b      	ldr	r3, [r7, #4]
 8012200:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012202:	687b      	ldr	r3, [r7, #4]
 8012204:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8012206:	4b41      	ldr	r3, [pc, #260]	; (801230c <tcp_process+0x29c>)
 8012208:	681a      	ldr	r2, [r3, #0]
 801220a:	687b      	ldr	r3, [r7, #4]
 801220c:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 801220e:	4b44      	ldr	r3, [pc, #272]	; (8012320 <tcp_process+0x2b0>)
 8012210:	681b      	ldr	r3, [r3, #0]
 8012212:	89db      	ldrh	r3, [r3, #14]
 8012214:	b29a      	uxth	r2, r3
 8012216:	687b      	ldr	r3, [r7, #4]
 8012218:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 801221c:	687b      	ldr	r3, [r7, #4]
 801221e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8012222:	687b      	ldr	r3, [r7, #4]
 8012224:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8012228:	4b39      	ldr	r3, [pc, #228]	; (8012310 <tcp_process+0x2a0>)
 801222a:	681b      	ldr	r3, [r3, #0]
 801222c:	1e5a      	subs	r2, r3, #1
 801222e:	687b      	ldr	r3, [r7, #4]
 8012230:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8012232:	687b      	ldr	r3, [r7, #4]
 8012234:	2204      	movs	r2, #4
 8012236:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8012238:	687b      	ldr	r3, [r7, #4]
 801223a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 801223c:	687b      	ldr	r3, [r7, #4]
 801223e:	3304      	adds	r3, #4
 8012240:	4618      	mov	r0, r3
 8012242:	f006 fe91 	bl	8018f68 <ip4_route>
 8012246:	4601      	mov	r1, r0
 8012248:	687b      	ldr	r3, [r7, #4]
 801224a:	3304      	adds	r3, #4
 801224c:	461a      	mov	r2, r3
 801224e:	4620      	mov	r0, r4
 8012250:	f7ff f878 	bl	8011344 <tcp_eff_send_mss_netif>
 8012254:	4603      	mov	r3, r0
 8012256:	461a      	mov	r2, r3
 8012258:	687b      	ldr	r3, [r7, #4]
 801225a:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801225c:	687b      	ldr	r3, [r7, #4]
 801225e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012260:	009a      	lsls	r2, r3, #2
 8012262:	687b      	ldr	r3, [r7, #4]
 8012264:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012266:	005b      	lsls	r3, r3, #1
 8012268:	f241 111c 	movw	r1, #4380	; 0x111c
 801226c:	428b      	cmp	r3, r1
 801226e:	bf38      	it	cc
 8012270:	460b      	movcc	r3, r1
 8012272:	429a      	cmp	r2, r3
 8012274:	d204      	bcs.n	8012280 <tcp_process+0x210>
 8012276:	687b      	ldr	r3, [r7, #4]
 8012278:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801227a:	009b      	lsls	r3, r3, #2
 801227c:	b29b      	uxth	r3, r3
 801227e:	e00d      	b.n	801229c <tcp_process+0x22c>
 8012280:	687b      	ldr	r3, [r7, #4]
 8012282:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012284:	005b      	lsls	r3, r3, #1
 8012286:	f241 121c 	movw	r2, #4380	; 0x111c
 801228a:	4293      	cmp	r3, r2
 801228c:	d904      	bls.n	8012298 <tcp_process+0x228>
 801228e:	687b      	ldr	r3, [r7, #4]
 8012290:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012292:	005b      	lsls	r3, r3, #1
 8012294:	b29b      	uxth	r3, r3
 8012296:	e001      	b.n	801229c <tcp_process+0x22c>
 8012298:	f241 131c 	movw	r3, #4380	; 0x111c
 801229c:	687a      	ldr	r2, [r7, #4]
 801229e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80122a2:	687b      	ldr	r3, [r7, #4]
 80122a4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80122a8:	2b00      	cmp	r3, #0
 80122aa:	d106      	bne.n	80122ba <tcp_process+0x24a>
 80122ac:	4b13      	ldr	r3, [pc, #76]	; (80122fc <tcp_process+0x28c>)
 80122ae:	f44f 725b 	mov.w	r2, #876	; 0x36c
 80122b2:	491c      	ldr	r1, [pc, #112]	; (8012324 <tcp_process+0x2b4>)
 80122b4:	4813      	ldr	r0, [pc, #76]	; (8012304 <tcp_process+0x294>)
 80122b6:	f009 f8e3 	bl	801b480 <iprintf>
        --pcb->snd_queuelen;
 80122ba:	687b      	ldr	r3, [r7, #4]
 80122bc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80122c0:	3b01      	subs	r3, #1
 80122c2:	b29a      	uxth	r2, r3
 80122c4:	687b      	ldr	r3, [r7, #4]
 80122c6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 80122ca:	687b      	ldr	r3, [r7, #4]
 80122cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80122ce:	617b      	str	r3, [r7, #20]
        if (rseg == NULL) {
 80122d0:	697b      	ldr	r3, [r7, #20]
 80122d2:	2b00      	cmp	r3, #0
 80122d4:	d12a      	bne.n	801232c <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 80122d6:	687b      	ldr	r3, [r7, #4]
 80122d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80122da:	617b      	str	r3, [r7, #20]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 80122dc:	697b      	ldr	r3, [r7, #20]
 80122de:	2b00      	cmp	r3, #0
 80122e0:	d106      	bne.n	80122f0 <tcp_process+0x280>
 80122e2:	4b06      	ldr	r3, [pc, #24]	; (80122fc <tcp_process+0x28c>)
 80122e4:	f44f 725d 	mov.w	r2, #884	; 0x374
 80122e8:	490f      	ldr	r1, [pc, #60]	; (8012328 <tcp_process+0x2b8>)
 80122ea:	4806      	ldr	r0, [pc, #24]	; (8012304 <tcp_process+0x294>)
 80122ec:	f009 f8c8 	bl	801b480 <iprintf>
          pcb->unsent = rseg->next;
 80122f0:	697b      	ldr	r3, [r7, #20]
 80122f2:	681a      	ldr	r2, [r3, #0]
 80122f4:	687b      	ldr	r3, [r7, #4]
 80122f6:	66da      	str	r2, [r3, #108]	; 0x6c
 80122f8:	e01c      	b.n	8012334 <tcp_process+0x2c4>
 80122fa:	bf00      	nop
 80122fc:	0801f574 	.word	0x0801f574
 8012300:	0801f7ac 	.word	0x0801f7ac
 8012304:	0801f5c0 	.word	0x0801f5c0
 8012308:	20013bbc 	.word	0x20013bbc
 801230c:	20013bb4 	.word	0x20013bb4
 8012310:	20013bb0 	.word	0x20013bb0
 8012314:	0801f7c8 	.word	0x0801f7c8
 8012318:	20013bbd 	.word	0x20013bbd
 801231c:	20013b74 	.word	0x20013b74
 8012320:	20013ba0 	.word	0x20013ba0
 8012324:	0801f7e8 	.word	0x0801f7e8
 8012328:	0801f800 	.word	0x0801f800
        } else {
          pcb->unacked = rseg->next;
 801232c:	697b      	ldr	r3, [r7, #20]
 801232e:	681a      	ldr	r2, [r3, #0]
 8012330:	687b      	ldr	r3, [r7, #4]
 8012332:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8012334:	6978      	ldr	r0, [r7, #20]
 8012336:	f7fe fd0e 	bl	8010d56 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 801233a:	687b      	ldr	r3, [r7, #4]
 801233c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801233e:	2b00      	cmp	r3, #0
 8012340:	d104      	bne.n	801234c <tcp_process+0x2dc>
          pcb->rtime = -1;
 8012342:	687b      	ldr	r3, [r7, #4]
 8012344:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012348:	861a      	strh	r2, [r3, #48]	; 0x30
 801234a:	e006      	b.n	801235a <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 801234c:	687b      	ldr	r3, [r7, #4]
 801234e:	2200      	movs	r2, #0
 8012350:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8012352:	687b      	ldr	r3, [r7, #4]
 8012354:	2200      	movs	r2, #0
 8012356:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 801235a:	687b      	ldr	r3, [r7, #4]
 801235c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012360:	2b00      	cmp	r3, #0
 8012362:	d00a      	beq.n	801237a <tcp_process+0x30a>
 8012364:	687b      	ldr	r3, [r7, #4]
 8012366:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801236a:	687a      	ldr	r2, [r7, #4]
 801236c:	6910      	ldr	r0, [r2, #16]
 801236e:	2200      	movs	r2, #0
 8012370:	6879      	ldr	r1, [r7, #4]
 8012372:	4798      	blx	r3
 8012374:	4603      	mov	r3, r0
 8012376:	77bb      	strb	r3, [r7, #30]
 8012378:	e001      	b.n	801237e <tcp_process+0x30e>
 801237a:	2300      	movs	r3, #0
 801237c:	77bb      	strb	r3, [r7, #30]
        if (err == ERR_ABRT) {
 801237e:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8012382:	f113 0f0d 	cmn.w	r3, #13
 8012386:	d102      	bne.n	801238e <tcp_process+0x31e>
          return ERR_ABRT;
 8012388:	f06f 030c 	mvn.w	r3, #12
 801238c:	e250      	b.n	8012830 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 801238e:	687b      	ldr	r3, [r7, #4]
 8012390:	8b5b      	ldrh	r3, [r3, #26]
 8012392:	f043 0302 	orr.w	r3, r3, #2
 8012396:	b29a      	uxth	r2, r3
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 801239c:	e23a      	b.n	8012814 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 801239e:	4b98      	ldr	r3, [pc, #608]	; (8012600 <tcp_process+0x590>)
 80123a0:	781b      	ldrb	r3, [r3, #0]
 80123a2:	f003 0310 	and.w	r3, r3, #16
 80123a6:	2b00      	cmp	r3, #0
 80123a8:	f000 8234 	beq.w	8012814 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80123ac:	4b95      	ldr	r3, [pc, #596]	; (8012604 <tcp_process+0x594>)
 80123ae:	6819      	ldr	r1, [r3, #0]
 80123b0:	4b95      	ldr	r3, [pc, #596]	; (8012608 <tcp_process+0x598>)
 80123b2:	881b      	ldrh	r3, [r3, #0]
 80123b4:	461a      	mov	r2, r3
 80123b6:	4b95      	ldr	r3, [pc, #596]	; (801260c <tcp_process+0x59c>)
 80123b8:	681b      	ldr	r3, [r3, #0]
 80123ba:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80123bc:	4b94      	ldr	r3, [pc, #592]	; (8012610 <tcp_process+0x5a0>)
 80123be:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80123c0:	885b      	ldrh	r3, [r3, #2]
 80123c2:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80123c4:	4a92      	ldr	r2, [pc, #584]	; (8012610 <tcp_process+0x5a0>)
 80123c6:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80123c8:	8812      	ldrh	r2, [r2, #0]
 80123ca:	b292      	uxth	r2, r2
 80123cc:	9202      	str	r2, [sp, #8]
 80123ce:	9301      	str	r3, [sp, #4]
 80123d0:	4b90      	ldr	r3, [pc, #576]	; (8012614 <tcp_process+0x5a4>)
 80123d2:	9300      	str	r3, [sp, #0]
 80123d4:	4b90      	ldr	r3, [pc, #576]	; (8012618 <tcp_process+0x5a8>)
 80123d6:	4602      	mov	r2, r0
 80123d8:	6878      	ldr	r0, [r7, #4]
 80123da:	f002 fcb9 	bl	8014d50 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 80123de:	687b      	ldr	r3, [r7, #4]
 80123e0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80123e4:	2b05      	cmp	r3, #5
 80123e6:	f200 8215 	bhi.w	8012814 <tcp_process+0x7a4>
          pcb->rtime = 0;
 80123ea:	687b      	ldr	r3, [r7, #4]
 80123ec:	2200      	movs	r2, #0
 80123ee:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 80123f0:	6878      	ldr	r0, [r7, #4]
 80123f2:	f002 fa73 	bl	80148dc <tcp_rexmit_rto>
      break;
 80123f6:	e20d      	b.n	8012814 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 80123f8:	4b81      	ldr	r3, [pc, #516]	; (8012600 <tcp_process+0x590>)
 80123fa:	781b      	ldrb	r3, [r3, #0]
 80123fc:	f003 0310 	and.w	r3, r3, #16
 8012400:	2b00      	cmp	r3, #0
 8012402:	f000 80a1 	beq.w	8012548 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8012406:	4b7f      	ldr	r3, [pc, #508]	; (8012604 <tcp_process+0x594>)
 8012408:	681a      	ldr	r2, [r3, #0]
 801240a:	687b      	ldr	r3, [r7, #4]
 801240c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801240e:	1ad3      	subs	r3, r2, r3
 8012410:	3b01      	subs	r3, #1
 8012412:	2b00      	cmp	r3, #0
 8012414:	db7e      	blt.n	8012514 <tcp_process+0x4a4>
 8012416:	4b7b      	ldr	r3, [pc, #492]	; (8012604 <tcp_process+0x594>)
 8012418:	681a      	ldr	r2, [r3, #0]
 801241a:	687b      	ldr	r3, [r7, #4]
 801241c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801241e:	1ad3      	subs	r3, r2, r3
 8012420:	2b00      	cmp	r3, #0
 8012422:	dc77      	bgt.n	8012514 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8012424:	687b      	ldr	r3, [r7, #4]
 8012426:	2204      	movs	r2, #4
 8012428:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 801242a:	687b      	ldr	r3, [r7, #4]
 801242c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801242e:	2b00      	cmp	r3, #0
 8012430:	d102      	bne.n	8012438 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8012432:	23fa      	movs	r3, #250	; 0xfa
 8012434:	77bb      	strb	r3, [r7, #30]
 8012436:	e01d      	b.n	8012474 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8012438:	687b      	ldr	r3, [r7, #4]
 801243a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801243c:	699b      	ldr	r3, [r3, #24]
 801243e:	2b00      	cmp	r3, #0
 8012440:	d106      	bne.n	8012450 <tcp_process+0x3e0>
 8012442:	4b76      	ldr	r3, [pc, #472]	; (801261c <tcp_process+0x5ac>)
 8012444:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8012448:	4975      	ldr	r1, [pc, #468]	; (8012620 <tcp_process+0x5b0>)
 801244a:	4876      	ldr	r0, [pc, #472]	; (8012624 <tcp_process+0x5b4>)
 801244c:	f009 f818 	bl	801b480 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8012450:	687b      	ldr	r3, [r7, #4]
 8012452:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012454:	699b      	ldr	r3, [r3, #24]
 8012456:	2b00      	cmp	r3, #0
 8012458:	d00a      	beq.n	8012470 <tcp_process+0x400>
 801245a:	687b      	ldr	r3, [r7, #4]
 801245c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801245e:	699b      	ldr	r3, [r3, #24]
 8012460:	687a      	ldr	r2, [r7, #4]
 8012462:	6910      	ldr	r0, [r2, #16]
 8012464:	2200      	movs	r2, #0
 8012466:	6879      	ldr	r1, [r7, #4]
 8012468:	4798      	blx	r3
 801246a:	4603      	mov	r3, r0
 801246c:	77bb      	strb	r3, [r7, #30]
 801246e:	e001      	b.n	8012474 <tcp_process+0x404>
 8012470:	23f0      	movs	r3, #240	; 0xf0
 8012472:	77bb      	strb	r3, [r7, #30]
          }
          if (err != ERR_OK) {
 8012474:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8012478:	2b00      	cmp	r3, #0
 801247a:	d00a      	beq.n	8012492 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 801247c:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8012480:	f113 0f0d 	cmn.w	r3, #13
 8012484:	d002      	beq.n	801248c <tcp_process+0x41c>
              tcp_abort(pcb);
 8012486:	6878      	ldr	r0, [r7, #4]
 8012488:	f7fd ff76 	bl	8010378 <tcp_abort>
            }
            return ERR_ABRT;
 801248c:	f06f 030c 	mvn.w	r3, #12
 8012490:	e1ce      	b.n	8012830 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8012492:	6878      	ldr	r0, [r7, #4]
 8012494:	f000 fae0 	bl	8012a58 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8012498:	4b63      	ldr	r3, [pc, #396]	; (8012628 <tcp_process+0x5b8>)
 801249a:	881b      	ldrh	r3, [r3, #0]
 801249c:	2b00      	cmp	r3, #0
 801249e:	d005      	beq.n	80124ac <tcp_process+0x43c>
            recv_acked--;
 80124a0:	4b61      	ldr	r3, [pc, #388]	; (8012628 <tcp_process+0x5b8>)
 80124a2:	881b      	ldrh	r3, [r3, #0]
 80124a4:	3b01      	subs	r3, #1
 80124a6:	b29a      	uxth	r2, r3
 80124a8:	4b5f      	ldr	r3, [pc, #380]	; (8012628 <tcp_process+0x5b8>)
 80124aa:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80124ac:	687b      	ldr	r3, [r7, #4]
 80124ae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80124b0:	009a      	lsls	r2, r3, #2
 80124b2:	687b      	ldr	r3, [r7, #4]
 80124b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80124b6:	005b      	lsls	r3, r3, #1
 80124b8:	f241 111c 	movw	r1, #4380	; 0x111c
 80124bc:	428b      	cmp	r3, r1
 80124be:	bf38      	it	cc
 80124c0:	460b      	movcc	r3, r1
 80124c2:	429a      	cmp	r2, r3
 80124c4:	d204      	bcs.n	80124d0 <tcp_process+0x460>
 80124c6:	687b      	ldr	r3, [r7, #4]
 80124c8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80124ca:	009b      	lsls	r3, r3, #2
 80124cc:	b29b      	uxth	r3, r3
 80124ce:	e00d      	b.n	80124ec <tcp_process+0x47c>
 80124d0:	687b      	ldr	r3, [r7, #4]
 80124d2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80124d4:	005b      	lsls	r3, r3, #1
 80124d6:	f241 121c 	movw	r2, #4380	; 0x111c
 80124da:	4293      	cmp	r3, r2
 80124dc:	d904      	bls.n	80124e8 <tcp_process+0x478>
 80124de:	687b      	ldr	r3, [r7, #4]
 80124e0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80124e2:	005b      	lsls	r3, r3, #1
 80124e4:	b29b      	uxth	r3, r3
 80124e6:	e001      	b.n	80124ec <tcp_process+0x47c>
 80124e8:	f241 131c 	movw	r3, #4380	; 0x111c
 80124ec:	687a      	ldr	r2, [r7, #4]
 80124ee:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 80124f2:	4b4e      	ldr	r3, [pc, #312]	; (801262c <tcp_process+0x5bc>)
 80124f4:	781b      	ldrb	r3, [r3, #0]
 80124f6:	f003 0320 	and.w	r3, r3, #32
 80124fa:	2b00      	cmp	r3, #0
 80124fc:	d037      	beq.n	801256e <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 80124fe:	687b      	ldr	r3, [r7, #4]
 8012500:	8b5b      	ldrh	r3, [r3, #26]
 8012502:	f043 0302 	orr.w	r3, r3, #2
 8012506:	b29a      	uxth	r2, r3
 8012508:	687b      	ldr	r3, [r7, #4]
 801250a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 801250c:	687b      	ldr	r3, [r7, #4]
 801250e:	2207      	movs	r2, #7
 8012510:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8012512:	e02c      	b.n	801256e <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012514:	4b3b      	ldr	r3, [pc, #236]	; (8012604 <tcp_process+0x594>)
 8012516:	6819      	ldr	r1, [r3, #0]
 8012518:	4b3b      	ldr	r3, [pc, #236]	; (8012608 <tcp_process+0x598>)
 801251a:	881b      	ldrh	r3, [r3, #0]
 801251c:	461a      	mov	r2, r3
 801251e:	4b3b      	ldr	r3, [pc, #236]	; (801260c <tcp_process+0x59c>)
 8012520:	681b      	ldr	r3, [r3, #0]
 8012522:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012524:	4b3a      	ldr	r3, [pc, #232]	; (8012610 <tcp_process+0x5a0>)
 8012526:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012528:	885b      	ldrh	r3, [r3, #2]
 801252a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801252c:	4a38      	ldr	r2, [pc, #224]	; (8012610 <tcp_process+0x5a0>)
 801252e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012530:	8812      	ldrh	r2, [r2, #0]
 8012532:	b292      	uxth	r2, r2
 8012534:	9202      	str	r2, [sp, #8]
 8012536:	9301      	str	r3, [sp, #4]
 8012538:	4b36      	ldr	r3, [pc, #216]	; (8012614 <tcp_process+0x5a4>)
 801253a:	9300      	str	r3, [sp, #0]
 801253c:	4b36      	ldr	r3, [pc, #216]	; (8012618 <tcp_process+0x5a8>)
 801253e:	4602      	mov	r2, r0
 8012540:	6878      	ldr	r0, [r7, #4]
 8012542:	f002 fc05 	bl	8014d50 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8012546:	e167      	b.n	8012818 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8012548:	4b2d      	ldr	r3, [pc, #180]	; (8012600 <tcp_process+0x590>)
 801254a:	781b      	ldrb	r3, [r3, #0]
 801254c:	f003 0302 	and.w	r3, r3, #2
 8012550:	2b00      	cmp	r3, #0
 8012552:	f000 8161 	beq.w	8012818 <tcp_process+0x7a8>
 8012556:	687b      	ldr	r3, [r7, #4]
 8012558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801255a:	1e5a      	subs	r2, r3, #1
 801255c:	4b2b      	ldr	r3, [pc, #172]	; (801260c <tcp_process+0x59c>)
 801255e:	681b      	ldr	r3, [r3, #0]
 8012560:	429a      	cmp	r2, r3
 8012562:	f040 8159 	bne.w	8012818 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8012566:	6878      	ldr	r0, [r7, #4]
 8012568:	f002 f9da 	bl	8014920 <tcp_rexmit>
      break;
 801256c:	e154      	b.n	8012818 <tcp_process+0x7a8>
 801256e:	e153      	b.n	8012818 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8012570:	6878      	ldr	r0, [r7, #4]
 8012572:	f000 fa71 	bl	8012a58 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8012576:	4b2d      	ldr	r3, [pc, #180]	; (801262c <tcp_process+0x5bc>)
 8012578:	781b      	ldrb	r3, [r3, #0]
 801257a:	f003 0320 	and.w	r3, r3, #32
 801257e:	2b00      	cmp	r3, #0
 8012580:	f000 814c 	beq.w	801281c <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8012584:	687b      	ldr	r3, [r7, #4]
 8012586:	8b5b      	ldrh	r3, [r3, #26]
 8012588:	f043 0302 	orr.w	r3, r3, #2
 801258c:	b29a      	uxth	r2, r3
 801258e:	687b      	ldr	r3, [r7, #4]
 8012590:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8012592:	687b      	ldr	r3, [r7, #4]
 8012594:	2207      	movs	r2, #7
 8012596:	751a      	strb	r2, [r3, #20]
      }
      break;
 8012598:	e140      	b.n	801281c <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 801259a:	6878      	ldr	r0, [r7, #4]
 801259c:	f000 fa5c 	bl	8012a58 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80125a0:	4b22      	ldr	r3, [pc, #136]	; (801262c <tcp_process+0x5bc>)
 80125a2:	781b      	ldrb	r3, [r3, #0]
 80125a4:	f003 0320 	and.w	r3, r3, #32
 80125a8:	2b00      	cmp	r3, #0
 80125aa:	d071      	beq.n	8012690 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80125ac:	4b14      	ldr	r3, [pc, #80]	; (8012600 <tcp_process+0x590>)
 80125ae:	781b      	ldrb	r3, [r3, #0]
 80125b0:	f003 0310 	and.w	r3, r3, #16
 80125b4:	2b00      	cmp	r3, #0
 80125b6:	d060      	beq.n	801267a <tcp_process+0x60a>
 80125b8:	687b      	ldr	r3, [r7, #4]
 80125ba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80125bc:	4b11      	ldr	r3, [pc, #68]	; (8012604 <tcp_process+0x594>)
 80125be:	681b      	ldr	r3, [r3, #0]
 80125c0:	429a      	cmp	r2, r3
 80125c2:	d15a      	bne.n	801267a <tcp_process+0x60a>
            pcb->unsent == NULL) {
 80125c4:	687b      	ldr	r3, [r7, #4]
 80125c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80125c8:	2b00      	cmp	r3, #0
 80125ca:	d156      	bne.n	801267a <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 80125cc:	687b      	ldr	r3, [r7, #4]
 80125ce:	8b5b      	ldrh	r3, [r3, #26]
 80125d0:	f043 0302 	orr.w	r3, r3, #2
 80125d4:	b29a      	uxth	r2, r3
 80125d6:	687b      	ldr	r3, [r7, #4]
 80125d8:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 80125da:	6878      	ldr	r0, [r7, #4]
 80125dc:	f7fe fda8 	bl	8011130 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 80125e0:	4b13      	ldr	r3, [pc, #76]	; (8012630 <tcp_process+0x5c0>)
 80125e2:	681b      	ldr	r3, [r3, #0]
 80125e4:	687a      	ldr	r2, [r7, #4]
 80125e6:	429a      	cmp	r2, r3
 80125e8:	d105      	bne.n	80125f6 <tcp_process+0x586>
 80125ea:	4b11      	ldr	r3, [pc, #68]	; (8012630 <tcp_process+0x5c0>)
 80125ec:	681b      	ldr	r3, [r3, #0]
 80125ee:	68db      	ldr	r3, [r3, #12]
 80125f0:	4a0f      	ldr	r2, [pc, #60]	; (8012630 <tcp_process+0x5c0>)
 80125f2:	6013      	str	r3, [r2, #0]
 80125f4:	e02e      	b.n	8012654 <tcp_process+0x5e4>
 80125f6:	4b0e      	ldr	r3, [pc, #56]	; (8012630 <tcp_process+0x5c0>)
 80125f8:	681b      	ldr	r3, [r3, #0]
 80125fa:	613b      	str	r3, [r7, #16]
 80125fc:	e027      	b.n	801264e <tcp_process+0x5de>
 80125fe:	bf00      	nop
 8012600:	20013bbc 	.word	0x20013bbc
 8012604:	20013bb4 	.word	0x20013bb4
 8012608:	20013bba 	.word	0x20013bba
 801260c:	20013bb0 	.word	0x20013bb0
 8012610:	20013ba0 	.word	0x20013ba0
 8012614:	2000a110 	.word	0x2000a110
 8012618:	2000a114 	.word	0x2000a114
 801261c:	0801f574 	.word	0x0801f574
 8012620:	0801f814 	.word	0x0801f814
 8012624:	0801f5c0 	.word	0x0801f5c0
 8012628:	20013bb8 	.word	0x20013bb8
 801262c:	20013bbd 	.word	0x20013bbd
 8012630:	20013b80 	.word	0x20013b80
 8012634:	693b      	ldr	r3, [r7, #16]
 8012636:	68db      	ldr	r3, [r3, #12]
 8012638:	687a      	ldr	r2, [r7, #4]
 801263a:	429a      	cmp	r2, r3
 801263c:	d104      	bne.n	8012648 <tcp_process+0x5d8>
 801263e:	687b      	ldr	r3, [r7, #4]
 8012640:	68da      	ldr	r2, [r3, #12]
 8012642:	693b      	ldr	r3, [r7, #16]
 8012644:	60da      	str	r2, [r3, #12]
 8012646:	e005      	b.n	8012654 <tcp_process+0x5e4>
 8012648:	693b      	ldr	r3, [r7, #16]
 801264a:	68db      	ldr	r3, [r3, #12]
 801264c:	613b      	str	r3, [r7, #16]
 801264e:	693b      	ldr	r3, [r7, #16]
 8012650:	2b00      	cmp	r3, #0
 8012652:	d1ef      	bne.n	8012634 <tcp_process+0x5c4>
 8012654:	687b      	ldr	r3, [r7, #4]
 8012656:	2200      	movs	r2, #0
 8012658:	60da      	str	r2, [r3, #12]
 801265a:	4b77      	ldr	r3, [pc, #476]	; (8012838 <tcp_process+0x7c8>)
 801265c:	2201      	movs	r2, #1
 801265e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8012660:	687b      	ldr	r3, [r7, #4]
 8012662:	220a      	movs	r2, #10
 8012664:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8012666:	4b75      	ldr	r3, [pc, #468]	; (801283c <tcp_process+0x7cc>)
 8012668:	681a      	ldr	r2, [r3, #0]
 801266a:	687b      	ldr	r3, [r7, #4]
 801266c:	60da      	str	r2, [r3, #12]
 801266e:	4a73      	ldr	r2, [pc, #460]	; (801283c <tcp_process+0x7cc>)
 8012670:	687b      	ldr	r3, [r7, #4]
 8012672:	6013      	str	r3, [r2, #0]
 8012674:	f002 fd2e 	bl	80150d4 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8012678:	e0d2      	b.n	8012820 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 801267a:	687b      	ldr	r3, [r7, #4]
 801267c:	8b5b      	ldrh	r3, [r3, #26]
 801267e:	f043 0302 	orr.w	r3, r3, #2
 8012682:	b29a      	uxth	r2, r3
 8012684:	687b      	ldr	r3, [r7, #4]
 8012686:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8012688:	687b      	ldr	r3, [r7, #4]
 801268a:	2208      	movs	r2, #8
 801268c:	751a      	strb	r2, [r3, #20]
      break;
 801268e:	e0c7      	b.n	8012820 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8012690:	4b6b      	ldr	r3, [pc, #428]	; (8012840 <tcp_process+0x7d0>)
 8012692:	781b      	ldrb	r3, [r3, #0]
 8012694:	f003 0310 	and.w	r3, r3, #16
 8012698:	2b00      	cmp	r3, #0
 801269a:	f000 80c1 	beq.w	8012820 <tcp_process+0x7b0>
 801269e:	687b      	ldr	r3, [r7, #4]
 80126a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80126a2:	4b68      	ldr	r3, [pc, #416]	; (8012844 <tcp_process+0x7d4>)
 80126a4:	681b      	ldr	r3, [r3, #0]
 80126a6:	429a      	cmp	r2, r3
 80126a8:	f040 80ba 	bne.w	8012820 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 80126ac:	687b      	ldr	r3, [r7, #4]
 80126ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80126b0:	2b00      	cmp	r3, #0
 80126b2:	f040 80b5 	bne.w	8012820 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 80126b6:	687b      	ldr	r3, [r7, #4]
 80126b8:	2206      	movs	r2, #6
 80126ba:	751a      	strb	r2, [r3, #20]
      break;
 80126bc:	e0b0      	b.n	8012820 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 80126be:	6878      	ldr	r0, [r7, #4]
 80126c0:	f000 f9ca 	bl	8012a58 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80126c4:	4b60      	ldr	r3, [pc, #384]	; (8012848 <tcp_process+0x7d8>)
 80126c6:	781b      	ldrb	r3, [r3, #0]
 80126c8:	f003 0320 	and.w	r3, r3, #32
 80126cc:	2b00      	cmp	r3, #0
 80126ce:	f000 80a9 	beq.w	8012824 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 80126d2:	687b      	ldr	r3, [r7, #4]
 80126d4:	8b5b      	ldrh	r3, [r3, #26]
 80126d6:	f043 0302 	orr.w	r3, r3, #2
 80126da:	b29a      	uxth	r2, r3
 80126dc:	687b      	ldr	r3, [r7, #4]
 80126de:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 80126e0:	6878      	ldr	r0, [r7, #4]
 80126e2:	f7fe fd25 	bl	8011130 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80126e6:	4b59      	ldr	r3, [pc, #356]	; (801284c <tcp_process+0x7dc>)
 80126e8:	681b      	ldr	r3, [r3, #0]
 80126ea:	687a      	ldr	r2, [r7, #4]
 80126ec:	429a      	cmp	r2, r3
 80126ee:	d105      	bne.n	80126fc <tcp_process+0x68c>
 80126f0:	4b56      	ldr	r3, [pc, #344]	; (801284c <tcp_process+0x7dc>)
 80126f2:	681b      	ldr	r3, [r3, #0]
 80126f4:	68db      	ldr	r3, [r3, #12]
 80126f6:	4a55      	ldr	r2, [pc, #340]	; (801284c <tcp_process+0x7dc>)
 80126f8:	6013      	str	r3, [r2, #0]
 80126fa:	e013      	b.n	8012724 <tcp_process+0x6b4>
 80126fc:	4b53      	ldr	r3, [pc, #332]	; (801284c <tcp_process+0x7dc>)
 80126fe:	681b      	ldr	r3, [r3, #0]
 8012700:	60fb      	str	r3, [r7, #12]
 8012702:	e00c      	b.n	801271e <tcp_process+0x6ae>
 8012704:	68fb      	ldr	r3, [r7, #12]
 8012706:	68db      	ldr	r3, [r3, #12]
 8012708:	687a      	ldr	r2, [r7, #4]
 801270a:	429a      	cmp	r2, r3
 801270c:	d104      	bne.n	8012718 <tcp_process+0x6a8>
 801270e:	687b      	ldr	r3, [r7, #4]
 8012710:	68da      	ldr	r2, [r3, #12]
 8012712:	68fb      	ldr	r3, [r7, #12]
 8012714:	60da      	str	r2, [r3, #12]
 8012716:	e005      	b.n	8012724 <tcp_process+0x6b4>
 8012718:	68fb      	ldr	r3, [r7, #12]
 801271a:	68db      	ldr	r3, [r3, #12]
 801271c:	60fb      	str	r3, [r7, #12]
 801271e:	68fb      	ldr	r3, [r7, #12]
 8012720:	2b00      	cmp	r3, #0
 8012722:	d1ef      	bne.n	8012704 <tcp_process+0x694>
 8012724:	687b      	ldr	r3, [r7, #4]
 8012726:	2200      	movs	r2, #0
 8012728:	60da      	str	r2, [r3, #12]
 801272a:	4b43      	ldr	r3, [pc, #268]	; (8012838 <tcp_process+0x7c8>)
 801272c:	2201      	movs	r2, #1
 801272e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8012730:	687b      	ldr	r3, [r7, #4]
 8012732:	220a      	movs	r2, #10
 8012734:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8012736:	4b41      	ldr	r3, [pc, #260]	; (801283c <tcp_process+0x7cc>)
 8012738:	681a      	ldr	r2, [r3, #0]
 801273a:	687b      	ldr	r3, [r7, #4]
 801273c:	60da      	str	r2, [r3, #12]
 801273e:	4a3f      	ldr	r2, [pc, #252]	; (801283c <tcp_process+0x7cc>)
 8012740:	687b      	ldr	r3, [r7, #4]
 8012742:	6013      	str	r3, [r2, #0]
 8012744:	f002 fcc6 	bl	80150d4 <tcp_timer_needed>
      }
      break;
 8012748:	e06c      	b.n	8012824 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 801274a:	6878      	ldr	r0, [r7, #4]
 801274c:	f000 f984 	bl	8012a58 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8012750:	4b3b      	ldr	r3, [pc, #236]	; (8012840 <tcp_process+0x7d0>)
 8012752:	781b      	ldrb	r3, [r3, #0]
 8012754:	f003 0310 	and.w	r3, r3, #16
 8012758:	2b00      	cmp	r3, #0
 801275a:	d065      	beq.n	8012828 <tcp_process+0x7b8>
 801275c:	687b      	ldr	r3, [r7, #4]
 801275e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012760:	4b38      	ldr	r3, [pc, #224]	; (8012844 <tcp_process+0x7d4>)
 8012762:	681b      	ldr	r3, [r3, #0]
 8012764:	429a      	cmp	r2, r3
 8012766:	d15f      	bne.n	8012828 <tcp_process+0x7b8>
 8012768:	687b      	ldr	r3, [r7, #4]
 801276a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801276c:	2b00      	cmp	r3, #0
 801276e:	d15b      	bne.n	8012828 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8012770:	6878      	ldr	r0, [r7, #4]
 8012772:	f7fe fcdd 	bl	8011130 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8012776:	4b35      	ldr	r3, [pc, #212]	; (801284c <tcp_process+0x7dc>)
 8012778:	681b      	ldr	r3, [r3, #0]
 801277a:	687a      	ldr	r2, [r7, #4]
 801277c:	429a      	cmp	r2, r3
 801277e:	d105      	bne.n	801278c <tcp_process+0x71c>
 8012780:	4b32      	ldr	r3, [pc, #200]	; (801284c <tcp_process+0x7dc>)
 8012782:	681b      	ldr	r3, [r3, #0]
 8012784:	68db      	ldr	r3, [r3, #12]
 8012786:	4a31      	ldr	r2, [pc, #196]	; (801284c <tcp_process+0x7dc>)
 8012788:	6013      	str	r3, [r2, #0]
 801278a:	e013      	b.n	80127b4 <tcp_process+0x744>
 801278c:	4b2f      	ldr	r3, [pc, #188]	; (801284c <tcp_process+0x7dc>)
 801278e:	681b      	ldr	r3, [r3, #0]
 8012790:	61bb      	str	r3, [r7, #24]
 8012792:	e00c      	b.n	80127ae <tcp_process+0x73e>
 8012794:	69bb      	ldr	r3, [r7, #24]
 8012796:	68db      	ldr	r3, [r3, #12]
 8012798:	687a      	ldr	r2, [r7, #4]
 801279a:	429a      	cmp	r2, r3
 801279c:	d104      	bne.n	80127a8 <tcp_process+0x738>
 801279e:	687b      	ldr	r3, [r7, #4]
 80127a0:	68da      	ldr	r2, [r3, #12]
 80127a2:	69bb      	ldr	r3, [r7, #24]
 80127a4:	60da      	str	r2, [r3, #12]
 80127a6:	e005      	b.n	80127b4 <tcp_process+0x744>
 80127a8:	69bb      	ldr	r3, [r7, #24]
 80127aa:	68db      	ldr	r3, [r3, #12]
 80127ac:	61bb      	str	r3, [r7, #24]
 80127ae:	69bb      	ldr	r3, [r7, #24]
 80127b0:	2b00      	cmp	r3, #0
 80127b2:	d1ef      	bne.n	8012794 <tcp_process+0x724>
 80127b4:	687b      	ldr	r3, [r7, #4]
 80127b6:	2200      	movs	r2, #0
 80127b8:	60da      	str	r2, [r3, #12]
 80127ba:	4b1f      	ldr	r3, [pc, #124]	; (8012838 <tcp_process+0x7c8>)
 80127bc:	2201      	movs	r2, #1
 80127be:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80127c0:	687b      	ldr	r3, [r7, #4]
 80127c2:	220a      	movs	r2, #10
 80127c4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80127c6:	4b1d      	ldr	r3, [pc, #116]	; (801283c <tcp_process+0x7cc>)
 80127c8:	681a      	ldr	r2, [r3, #0]
 80127ca:	687b      	ldr	r3, [r7, #4]
 80127cc:	60da      	str	r2, [r3, #12]
 80127ce:	4a1b      	ldr	r2, [pc, #108]	; (801283c <tcp_process+0x7cc>)
 80127d0:	687b      	ldr	r3, [r7, #4]
 80127d2:	6013      	str	r3, [r2, #0]
 80127d4:	f002 fc7e 	bl	80150d4 <tcp_timer_needed>
      }
      break;
 80127d8:	e026      	b.n	8012828 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 80127da:	6878      	ldr	r0, [r7, #4]
 80127dc:	f000 f93c 	bl	8012a58 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80127e0:	4b17      	ldr	r3, [pc, #92]	; (8012840 <tcp_process+0x7d0>)
 80127e2:	781b      	ldrb	r3, [r3, #0]
 80127e4:	f003 0310 	and.w	r3, r3, #16
 80127e8:	2b00      	cmp	r3, #0
 80127ea:	d01f      	beq.n	801282c <tcp_process+0x7bc>
 80127ec:	687b      	ldr	r3, [r7, #4]
 80127ee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80127f0:	4b14      	ldr	r3, [pc, #80]	; (8012844 <tcp_process+0x7d4>)
 80127f2:	681b      	ldr	r3, [r3, #0]
 80127f4:	429a      	cmp	r2, r3
 80127f6:	d119      	bne.n	801282c <tcp_process+0x7bc>
 80127f8:	687b      	ldr	r3, [r7, #4]
 80127fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80127fc:	2b00      	cmp	r3, #0
 80127fe:	d115      	bne.n	801282c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8012800:	4b11      	ldr	r3, [pc, #68]	; (8012848 <tcp_process+0x7d8>)
 8012802:	781b      	ldrb	r3, [r3, #0]
 8012804:	f043 0310 	orr.w	r3, r3, #16
 8012808:	b2da      	uxtb	r2, r3
 801280a:	4b0f      	ldr	r3, [pc, #60]	; (8012848 <tcp_process+0x7d8>)
 801280c:	701a      	strb	r2, [r3, #0]
      }
      break;
 801280e:	e00d      	b.n	801282c <tcp_process+0x7bc>
    default:
      break;
 8012810:	bf00      	nop
 8012812:	e00c      	b.n	801282e <tcp_process+0x7be>
      break;
 8012814:	bf00      	nop
 8012816:	e00a      	b.n	801282e <tcp_process+0x7be>
      break;
 8012818:	bf00      	nop
 801281a:	e008      	b.n	801282e <tcp_process+0x7be>
      break;
 801281c:	bf00      	nop
 801281e:	e006      	b.n	801282e <tcp_process+0x7be>
      break;
 8012820:	bf00      	nop
 8012822:	e004      	b.n	801282e <tcp_process+0x7be>
      break;
 8012824:	bf00      	nop
 8012826:	e002      	b.n	801282e <tcp_process+0x7be>
      break;
 8012828:	bf00      	nop
 801282a:	e000      	b.n	801282e <tcp_process+0x7be>
      break;
 801282c:	bf00      	nop
  }
  return ERR_OK;
 801282e:	2300      	movs	r3, #0
}
 8012830:	4618      	mov	r0, r3
 8012832:	3724      	adds	r7, #36	; 0x24
 8012834:	46bd      	mov	sp, r7
 8012836:	bd90      	pop	{r4, r7, pc}
 8012838:	20013b88 	.word	0x20013b88
 801283c:	20013b84 	.word	0x20013b84
 8012840:	20013bbc 	.word	0x20013bbc
 8012844:	20013bb4 	.word	0x20013bb4
 8012848:	20013bbd 	.word	0x20013bbd
 801284c:	20013b80 	.word	0x20013b80

08012850 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8012850:	b590      	push	{r4, r7, lr}
 8012852:	b085      	sub	sp, #20
 8012854:	af00      	add	r7, sp, #0
 8012856:	6078      	str	r0, [r7, #4]
 8012858:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801285a:	687b      	ldr	r3, [r7, #4]
 801285c:	2b00      	cmp	r3, #0
 801285e:	d106      	bne.n	801286e <tcp_oos_insert_segment+0x1e>
 8012860:	4b3b      	ldr	r3, [pc, #236]	; (8012950 <tcp_oos_insert_segment+0x100>)
 8012862:	f240 421f 	movw	r2, #1055	; 0x41f
 8012866:	493b      	ldr	r1, [pc, #236]	; (8012954 <tcp_oos_insert_segment+0x104>)
 8012868:	483b      	ldr	r0, [pc, #236]	; (8012958 <tcp_oos_insert_segment+0x108>)
 801286a:	f008 fe09 	bl	801b480 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801286e:	687b      	ldr	r3, [r7, #4]
 8012870:	691b      	ldr	r3, [r3, #16]
 8012872:	899b      	ldrh	r3, [r3, #12]
 8012874:	b29b      	uxth	r3, r3
 8012876:	4618      	mov	r0, r3
 8012878:	f7fb f924 	bl	800dac4 <lwip_htons>
 801287c:	4603      	mov	r3, r0
 801287e:	b2db      	uxtb	r3, r3
 8012880:	f003 0301 	and.w	r3, r3, #1
 8012884:	2b00      	cmp	r3, #0
 8012886:	d028      	beq.n	80128da <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8012888:	6838      	ldr	r0, [r7, #0]
 801288a:	f7fe fa4f 	bl	8010d2c <tcp_segs_free>
    next = NULL;
 801288e:	2300      	movs	r3, #0
 8012890:	603b      	str	r3, [r7, #0]
 8012892:	e056      	b.n	8012942 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8012894:	683b      	ldr	r3, [r7, #0]
 8012896:	691b      	ldr	r3, [r3, #16]
 8012898:	899b      	ldrh	r3, [r3, #12]
 801289a:	b29b      	uxth	r3, r3
 801289c:	4618      	mov	r0, r3
 801289e:	f7fb f911 	bl	800dac4 <lwip_htons>
 80128a2:	4603      	mov	r3, r0
 80128a4:	b2db      	uxtb	r3, r3
 80128a6:	f003 0301 	and.w	r3, r3, #1
 80128aa:	2b00      	cmp	r3, #0
 80128ac:	d00d      	beq.n	80128ca <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80128ae:	687b      	ldr	r3, [r7, #4]
 80128b0:	691b      	ldr	r3, [r3, #16]
 80128b2:	899b      	ldrh	r3, [r3, #12]
 80128b4:	b29c      	uxth	r4, r3
 80128b6:	2001      	movs	r0, #1
 80128b8:	f7fb f904 	bl	800dac4 <lwip_htons>
 80128bc:	4603      	mov	r3, r0
 80128be:	461a      	mov	r2, r3
 80128c0:	687b      	ldr	r3, [r7, #4]
 80128c2:	691b      	ldr	r3, [r3, #16]
 80128c4:	4322      	orrs	r2, r4
 80128c6:	b292      	uxth	r2, r2
 80128c8:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 80128ca:	683b      	ldr	r3, [r7, #0]
 80128cc:	60fb      	str	r3, [r7, #12]
      next = next->next;
 80128ce:	683b      	ldr	r3, [r7, #0]
 80128d0:	681b      	ldr	r3, [r3, #0]
 80128d2:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 80128d4:	68f8      	ldr	r0, [r7, #12]
 80128d6:	f7fe fa3e 	bl	8010d56 <tcp_seg_free>
    while (next &&
 80128da:	683b      	ldr	r3, [r7, #0]
 80128dc:	2b00      	cmp	r3, #0
 80128de:	d00e      	beq.n	80128fe <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 80128e0:	687b      	ldr	r3, [r7, #4]
 80128e2:	891b      	ldrh	r3, [r3, #8]
 80128e4:	461a      	mov	r2, r3
 80128e6:	4b1d      	ldr	r3, [pc, #116]	; (801295c <tcp_oos_insert_segment+0x10c>)
 80128e8:	681b      	ldr	r3, [r3, #0]
 80128ea:	441a      	add	r2, r3
 80128ec:	683b      	ldr	r3, [r7, #0]
 80128ee:	691b      	ldr	r3, [r3, #16]
 80128f0:	685b      	ldr	r3, [r3, #4]
 80128f2:	6839      	ldr	r1, [r7, #0]
 80128f4:	8909      	ldrh	r1, [r1, #8]
 80128f6:	440b      	add	r3, r1
 80128f8:	1ad3      	subs	r3, r2, r3
    while (next &&
 80128fa:	2b00      	cmp	r3, #0
 80128fc:	daca      	bge.n	8012894 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 80128fe:	683b      	ldr	r3, [r7, #0]
 8012900:	2b00      	cmp	r3, #0
 8012902:	d01e      	beq.n	8012942 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8012904:	687b      	ldr	r3, [r7, #4]
 8012906:	891b      	ldrh	r3, [r3, #8]
 8012908:	461a      	mov	r2, r3
 801290a:	4b14      	ldr	r3, [pc, #80]	; (801295c <tcp_oos_insert_segment+0x10c>)
 801290c:	681b      	ldr	r3, [r3, #0]
 801290e:	441a      	add	r2, r3
 8012910:	683b      	ldr	r3, [r7, #0]
 8012912:	691b      	ldr	r3, [r3, #16]
 8012914:	685b      	ldr	r3, [r3, #4]
 8012916:	1ad3      	subs	r3, r2, r3
    if (next &&
 8012918:	2b00      	cmp	r3, #0
 801291a:	dd12      	ble.n	8012942 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 801291c:	683b      	ldr	r3, [r7, #0]
 801291e:	691b      	ldr	r3, [r3, #16]
 8012920:	685b      	ldr	r3, [r3, #4]
 8012922:	b29a      	uxth	r2, r3
 8012924:	4b0d      	ldr	r3, [pc, #52]	; (801295c <tcp_oos_insert_segment+0x10c>)
 8012926:	681b      	ldr	r3, [r3, #0]
 8012928:	b29b      	uxth	r3, r3
 801292a:	1ad3      	subs	r3, r2, r3
 801292c:	b29a      	uxth	r2, r3
 801292e:	687b      	ldr	r3, [r7, #4]
 8012930:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8012932:	687b      	ldr	r3, [r7, #4]
 8012934:	685a      	ldr	r2, [r3, #4]
 8012936:	687b      	ldr	r3, [r7, #4]
 8012938:	891b      	ldrh	r3, [r3, #8]
 801293a:	4619      	mov	r1, r3
 801293c:	4610      	mov	r0, r2
 801293e:	f7fc fc5d 	bl	800f1fc <pbuf_realloc>
    }
  }
  cseg->next = next;
 8012942:	687b      	ldr	r3, [r7, #4]
 8012944:	683a      	ldr	r2, [r7, #0]
 8012946:	601a      	str	r2, [r3, #0]
}
 8012948:	bf00      	nop
 801294a:	3714      	adds	r7, #20
 801294c:	46bd      	mov	sp, r7
 801294e:	bd90      	pop	{r4, r7, pc}
 8012950:	0801f574 	.word	0x0801f574
 8012954:	0801f834 	.word	0x0801f834
 8012958:	0801f5c0 	.word	0x0801f5c0
 801295c:	20013bb0 	.word	0x20013bb0

08012960 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8012960:	b5b0      	push	{r4, r5, r7, lr}
 8012962:	b086      	sub	sp, #24
 8012964:	af00      	add	r7, sp, #0
 8012966:	60f8      	str	r0, [r7, #12]
 8012968:	60b9      	str	r1, [r7, #8]
 801296a:	607a      	str	r2, [r7, #4]
 801296c:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 801296e:	e03e      	b.n	80129ee <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8012970:	68bb      	ldr	r3, [r7, #8]
 8012972:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8012974:	68bb      	ldr	r3, [r7, #8]
 8012976:	681b      	ldr	r3, [r3, #0]
 8012978:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 801297a:	697b      	ldr	r3, [r7, #20]
 801297c:	685b      	ldr	r3, [r3, #4]
 801297e:	4618      	mov	r0, r3
 8012980:	f7fc fe50 	bl	800f624 <pbuf_clen>
 8012984:	4603      	mov	r3, r0
 8012986:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8012988:	68fb      	ldr	r3, [r7, #12]
 801298a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801298e:	8a7a      	ldrh	r2, [r7, #18]
 8012990:	429a      	cmp	r2, r3
 8012992:	d906      	bls.n	80129a2 <tcp_free_acked_segments+0x42>
 8012994:	4b2a      	ldr	r3, [pc, #168]	; (8012a40 <tcp_free_acked_segments+0xe0>)
 8012996:	f240 4257 	movw	r2, #1111	; 0x457
 801299a:	492a      	ldr	r1, [pc, #168]	; (8012a44 <tcp_free_acked_segments+0xe4>)
 801299c:	482a      	ldr	r0, [pc, #168]	; (8012a48 <tcp_free_acked_segments+0xe8>)
 801299e:	f008 fd6f 	bl	801b480 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80129a2:	68fb      	ldr	r3, [r7, #12]
 80129a4:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 80129a8:	8a7b      	ldrh	r3, [r7, #18]
 80129aa:	1ad3      	subs	r3, r2, r3
 80129ac:	b29a      	uxth	r2, r3
 80129ae:	68fb      	ldr	r3, [r7, #12]
 80129b0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80129b4:	697b      	ldr	r3, [r7, #20]
 80129b6:	891a      	ldrh	r2, [r3, #8]
 80129b8:	4b24      	ldr	r3, [pc, #144]	; (8012a4c <tcp_free_acked_segments+0xec>)
 80129ba:	881b      	ldrh	r3, [r3, #0]
 80129bc:	4413      	add	r3, r2
 80129be:	b29a      	uxth	r2, r3
 80129c0:	4b22      	ldr	r3, [pc, #136]	; (8012a4c <tcp_free_acked_segments+0xec>)
 80129c2:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 80129c4:	6978      	ldr	r0, [r7, #20]
 80129c6:	f7fe f9c6 	bl	8010d56 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 80129ca:	68fb      	ldr	r3, [r7, #12]
 80129cc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80129d0:	2b00      	cmp	r3, #0
 80129d2:	d00c      	beq.n	80129ee <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 80129d4:	68bb      	ldr	r3, [r7, #8]
 80129d6:	2b00      	cmp	r3, #0
 80129d8:	d109      	bne.n	80129ee <tcp_free_acked_segments+0x8e>
 80129da:	683b      	ldr	r3, [r7, #0]
 80129dc:	2b00      	cmp	r3, #0
 80129de:	d106      	bne.n	80129ee <tcp_free_acked_segments+0x8e>
 80129e0:	4b17      	ldr	r3, [pc, #92]	; (8012a40 <tcp_free_acked_segments+0xe0>)
 80129e2:	f240 4261 	movw	r2, #1121	; 0x461
 80129e6:	491a      	ldr	r1, [pc, #104]	; (8012a50 <tcp_free_acked_segments+0xf0>)
 80129e8:	4817      	ldr	r0, [pc, #92]	; (8012a48 <tcp_free_acked_segments+0xe8>)
 80129ea:	f008 fd49 	bl	801b480 <iprintf>
  while (seg_list != NULL &&
 80129ee:	68bb      	ldr	r3, [r7, #8]
 80129f0:	2b00      	cmp	r3, #0
 80129f2:	d020      	beq.n	8012a36 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 80129f4:	68bb      	ldr	r3, [r7, #8]
 80129f6:	691b      	ldr	r3, [r3, #16]
 80129f8:	685b      	ldr	r3, [r3, #4]
 80129fa:	4618      	mov	r0, r3
 80129fc:	f7fb f877 	bl	800daee <lwip_htonl>
 8012a00:	4604      	mov	r4, r0
 8012a02:	68bb      	ldr	r3, [r7, #8]
 8012a04:	891b      	ldrh	r3, [r3, #8]
 8012a06:	461d      	mov	r5, r3
 8012a08:	68bb      	ldr	r3, [r7, #8]
 8012a0a:	691b      	ldr	r3, [r3, #16]
 8012a0c:	899b      	ldrh	r3, [r3, #12]
 8012a0e:	b29b      	uxth	r3, r3
 8012a10:	4618      	mov	r0, r3
 8012a12:	f7fb f857 	bl	800dac4 <lwip_htons>
 8012a16:	4603      	mov	r3, r0
 8012a18:	b2db      	uxtb	r3, r3
 8012a1a:	f003 0303 	and.w	r3, r3, #3
 8012a1e:	2b00      	cmp	r3, #0
 8012a20:	d001      	beq.n	8012a26 <tcp_free_acked_segments+0xc6>
 8012a22:	2301      	movs	r3, #1
 8012a24:	e000      	b.n	8012a28 <tcp_free_acked_segments+0xc8>
 8012a26:	2300      	movs	r3, #0
 8012a28:	442b      	add	r3, r5
 8012a2a:	18e2      	adds	r2, r4, r3
 8012a2c:	4b09      	ldr	r3, [pc, #36]	; (8012a54 <tcp_free_acked_segments+0xf4>)
 8012a2e:	681b      	ldr	r3, [r3, #0]
 8012a30:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8012a32:	2b00      	cmp	r3, #0
 8012a34:	dd9c      	ble.n	8012970 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8012a36:	68bb      	ldr	r3, [r7, #8]
}
 8012a38:	4618      	mov	r0, r3
 8012a3a:	3718      	adds	r7, #24
 8012a3c:	46bd      	mov	sp, r7
 8012a3e:	bdb0      	pop	{r4, r5, r7, pc}
 8012a40:	0801f574 	.word	0x0801f574
 8012a44:	0801f85c 	.word	0x0801f85c
 8012a48:	0801f5c0 	.word	0x0801f5c0
 8012a4c:	20013bb8 	.word	0x20013bb8
 8012a50:	0801f884 	.word	0x0801f884
 8012a54:	20013bb4 	.word	0x20013bb4

08012a58 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8012a58:	b5b0      	push	{r4, r5, r7, lr}
 8012a5a:	b094      	sub	sp, #80	; 0x50
 8012a5c:	af00      	add	r7, sp, #0
 8012a5e:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8012a60:	2300      	movs	r3, #0
 8012a62:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8012a64:	687b      	ldr	r3, [r7, #4]
 8012a66:	2b00      	cmp	r3, #0
 8012a68:	d106      	bne.n	8012a78 <tcp_receive+0x20>
 8012a6a:	4b91      	ldr	r3, [pc, #580]	; (8012cb0 <tcp_receive+0x258>)
 8012a6c:	f240 427b 	movw	r2, #1147	; 0x47b
 8012a70:	4990      	ldr	r1, [pc, #576]	; (8012cb4 <tcp_receive+0x25c>)
 8012a72:	4891      	ldr	r0, [pc, #580]	; (8012cb8 <tcp_receive+0x260>)
 8012a74:	f008 fd04 	bl	801b480 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8012a78:	687b      	ldr	r3, [r7, #4]
 8012a7a:	7d1b      	ldrb	r3, [r3, #20]
 8012a7c:	2b03      	cmp	r3, #3
 8012a7e:	d806      	bhi.n	8012a8e <tcp_receive+0x36>
 8012a80:	4b8b      	ldr	r3, [pc, #556]	; (8012cb0 <tcp_receive+0x258>)
 8012a82:	f240 427c 	movw	r2, #1148	; 0x47c
 8012a86:	498d      	ldr	r1, [pc, #564]	; (8012cbc <tcp_receive+0x264>)
 8012a88:	488b      	ldr	r0, [pc, #556]	; (8012cb8 <tcp_receive+0x260>)
 8012a8a:	f008 fcf9 	bl	801b480 <iprintf>

  if (flags & TCP_ACK) {
 8012a8e:	4b8c      	ldr	r3, [pc, #560]	; (8012cc0 <tcp_receive+0x268>)
 8012a90:	781b      	ldrb	r3, [r3, #0]
 8012a92:	f003 0310 	and.w	r3, r3, #16
 8012a96:	2b00      	cmp	r3, #0
 8012a98:	f000 8264 	beq.w	8012f64 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8012a9c:	687b      	ldr	r3, [r7, #4]
 8012a9e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012aa2:	461a      	mov	r2, r3
 8012aa4:	687b      	ldr	r3, [r7, #4]
 8012aa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012aa8:	4413      	add	r3, r2
 8012aaa:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8012aac:	687b      	ldr	r3, [r7, #4]
 8012aae:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012ab0:	4b84      	ldr	r3, [pc, #528]	; (8012cc4 <tcp_receive+0x26c>)
 8012ab2:	681b      	ldr	r3, [r3, #0]
 8012ab4:	1ad3      	subs	r3, r2, r3
 8012ab6:	2b00      	cmp	r3, #0
 8012ab8:	db1b      	blt.n	8012af2 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8012aba:	687b      	ldr	r3, [r7, #4]
 8012abc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012abe:	4b81      	ldr	r3, [pc, #516]	; (8012cc4 <tcp_receive+0x26c>)
 8012ac0:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8012ac2:	429a      	cmp	r2, r3
 8012ac4:	d106      	bne.n	8012ad4 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8012ac6:	687b      	ldr	r3, [r7, #4]
 8012ac8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8012aca:	4b7f      	ldr	r3, [pc, #508]	; (8012cc8 <tcp_receive+0x270>)
 8012acc:	681b      	ldr	r3, [r3, #0]
 8012ace:	1ad3      	subs	r3, r2, r3
 8012ad0:	2b00      	cmp	r3, #0
 8012ad2:	db0e      	blt.n	8012af2 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8012ad4:	687b      	ldr	r3, [r7, #4]
 8012ad6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8012ad8:	4b7b      	ldr	r3, [pc, #492]	; (8012cc8 <tcp_receive+0x270>)
 8012ada:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8012adc:	429a      	cmp	r2, r3
 8012ade:	d125      	bne.n	8012b2c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8012ae0:	4b7a      	ldr	r3, [pc, #488]	; (8012ccc <tcp_receive+0x274>)
 8012ae2:	681b      	ldr	r3, [r3, #0]
 8012ae4:	89db      	ldrh	r3, [r3, #14]
 8012ae6:	b29a      	uxth	r2, r3
 8012ae8:	687b      	ldr	r3, [r7, #4]
 8012aea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012aee:	429a      	cmp	r2, r3
 8012af0:	d91c      	bls.n	8012b2c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8012af2:	4b76      	ldr	r3, [pc, #472]	; (8012ccc <tcp_receive+0x274>)
 8012af4:	681b      	ldr	r3, [r3, #0]
 8012af6:	89db      	ldrh	r3, [r3, #14]
 8012af8:	b29a      	uxth	r2, r3
 8012afa:	687b      	ldr	r3, [r7, #4]
 8012afc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8012b00:	687b      	ldr	r3, [r7, #4]
 8012b02:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8012b06:	687b      	ldr	r3, [r7, #4]
 8012b08:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012b0c:	429a      	cmp	r2, r3
 8012b0e:	d205      	bcs.n	8012b1c <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8012b10:	687b      	ldr	r3, [r7, #4]
 8012b12:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8012b16:	687b      	ldr	r3, [r7, #4]
 8012b18:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8012b1c:	4b69      	ldr	r3, [pc, #420]	; (8012cc4 <tcp_receive+0x26c>)
 8012b1e:	681a      	ldr	r2, [r3, #0]
 8012b20:	687b      	ldr	r3, [r7, #4]
 8012b22:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8012b24:	4b68      	ldr	r3, [pc, #416]	; (8012cc8 <tcp_receive+0x270>)
 8012b26:	681a      	ldr	r2, [r3, #0]
 8012b28:	687b      	ldr	r3, [r7, #4]
 8012b2a:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8012b2c:	4b66      	ldr	r3, [pc, #408]	; (8012cc8 <tcp_receive+0x270>)
 8012b2e:	681a      	ldr	r2, [r3, #0]
 8012b30:	687b      	ldr	r3, [r7, #4]
 8012b32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012b34:	1ad3      	subs	r3, r2, r3
 8012b36:	2b00      	cmp	r3, #0
 8012b38:	dc58      	bgt.n	8012bec <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8012b3a:	4b65      	ldr	r3, [pc, #404]	; (8012cd0 <tcp_receive+0x278>)
 8012b3c:	881b      	ldrh	r3, [r3, #0]
 8012b3e:	2b00      	cmp	r3, #0
 8012b40:	d14b      	bne.n	8012bda <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8012b42:	687b      	ldr	r3, [r7, #4]
 8012b44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012b46:	687a      	ldr	r2, [r7, #4]
 8012b48:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8012b4c:	4413      	add	r3, r2
 8012b4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012b50:	429a      	cmp	r2, r3
 8012b52:	d142      	bne.n	8012bda <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8012b54:	687b      	ldr	r3, [r7, #4]
 8012b56:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8012b5a:	2b00      	cmp	r3, #0
 8012b5c:	db3d      	blt.n	8012bda <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8012b5e:	687b      	ldr	r3, [r7, #4]
 8012b60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012b62:	4b59      	ldr	r3, [pc, #356]	; (8012cc8 <tcp_receive+0x270>)
 8012b64:	681b      	ldr	r3, [r3, #0]
 8012b66:	429a      	cmp	r2, r3
 8012b68:	d137      	bne.n	8012bda <tcp_receive+0x182>
              found_dupack = 1;
 8012b6a:	2301      	movs	r3, #1
 8012b6c:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8012b6e:	687b      	ldr	r3, [r7, #4]
 8012b70:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8012b74:	2bff      	cmp	r3, #255	; 0xff
 8012b76:	d007      	beq.n	8012b88 <tcp_receive+0x130>
                ++pcb->dupacks;
 8012b78:	687b      	ldr	r3, [r7, #4]
 8012b7a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8012b7e:	3301      	adds	r3, #1
 8012b80:	b2da      	uxtb	r2, r3
 8012b82:	687b      	ldr	r3, [r7, #4]
 8012b84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8012b88:	687b      	ldr	r3, [r7, #4]
 8012b8a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8012b8e:	2b03      	cmp	r3, #3
 8012b90:	d91b      	bls.n	8012bca <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8012b92:	687b      	ldr	r3, [r7, #4]
 8012b94:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012b98:	687b      	ldr	r3, [r7, #4]
 8012b9a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012b9c:	4413      	add	r3, r2
 8012b9e:	b29a      	uxth	r2, r3
 8012ba0:	687b      	ldr	r3, [r7, #4]
 8012ba2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012ba6:	429a      	cmp	r2, r3
 8012ba8:	d30a      	bcc.n	8012bc0 <tcp_receive+0x168>
 8012baa:	687b      	ldr	r3, [r7, #4]
 8012bac:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012bb0:	687b      	ldr	r3, [r7, #4]
 8012bb2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012bb4:	4413      	add	r3, r2
 8012bb6:	b29a      	uxth	r2, r3
 8012bb8:	687b      	ldr	r3, [r7, #4]
 8012bba:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8012bbe:	e004      	b.n	8012bca <tcp_receive+0x172>
 8012bc0:	687b      	ldr	r3, [r7, #4]
 8012bc2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012bc6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8012bca:	687b      	ldr	r3, [r7, #4]
 8012bcc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8012bd0:	2b02      	cmp	r3, #2
 8012bd2:	d902      	bls.n	8012bda <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8012bd4:	6878      	ldr	r0, [r7, #4]
 8012bd6:	f001 ff0f 	bl	80149f8 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8012bda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012bdc:	2b00      	cmp	r3, #0
 8012bde:	f040 8161 	bne.w	8012ea4 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8012be2:	687b      	ldr	r3, [r7, #4]
 8012be4:	2200      	movs	r2, #0
 8012be6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8012bea:	e15b      	b.n	8012ea4 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8012bec:	4b36      	ldr	r3, [pc, #216]	; (8012cc8 <tcp_receive+0x270>)
 8012bee:	681a      	ldr	r2, [r3, #0]
 8012bf0:	687b      	ldr	r3, [r7, #4]
 8012bf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012bf4:	1ad3      	subs	r3, r2, r3
 8012bf6:	3b01      	subs	r3, #1
 8012bf8:	2b00      	cmp	r3, #0
 8012bfa:	f2c0 814e 	blt.w	8012e9a <tcp_receive+0x442>
 8012bfe:	4b32      	ldr	r3, [pc, #200]	; (8012cc8 <tcp_receive+0x270>)
 8012c00:	681a      	ldr	r2, [r3, #0]
 8012c02:	687b      	ldr	r3, [r7, #4]
 8012c04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012c06:	1ad3      	subs	r3, r2, r3
 8012c08:	2b00      	cmp	r3, #0
 8012c0a:	f300 8146 	bgt.w	8012e9a <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8012c0e:	687b      	ldr	r3, [r7, #4]
 8012c10:	8b5b      	ldrh	r3, [r3, #26]
 8012c12:	f003 0304 	and.w	r3, r3, #4
 8012c16:	2b00      	cmp	r3, #0
 8012c18:	d010      	beq.n	8012c3c <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8012c1a:	687b      	ldr	r3, [r7, #4]
 8012c1c:	8b5b      	ldrh	r3, [r3, #26]
 8012c1e:	f023 0304 	bic.w	r3, r3, #4
 8012c22:	b29a      	uxth	r2, r3
 8012c24:	687b      	ldr	r3, [r7, #4]
 8012c26:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8012c28:	687b      	ldr	r3, [r7, #4]
 8012c2a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8012c2e:	687b      	ldr	r3, [r7, #4]
 8012c30:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8012c34:	687b      	ldr	r3, [r7, #4]
 8012c36:	2200      	movs	r2, #0
 8012c38:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8012c3c:	687b      	ldr	r3, [r7, #4]
 8012c3e:	2200      	movs	r2, #0
 8012c40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8012c44:	687b      	ldr	r3, [r7, #4]
 8012c46:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8012c4a:	10db      	asrs	r3, r3, #3
 8012c4c:	b21b      	sxth	r3, r3
 8012c4e:	b29a      	uxth	r2, r3
 8012c50:	687b      	ldr	r3, [r7, #4]
 8012c52:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8012c56:	b29b      	uxth	r3, r3
 8012c58:	4413      	add	r3, r2
 8012c5a:	b29b      	uxth	r3, r3
 8012c5c:	b21a      	sxth	r2, r3
 8012c5e:	687b      	ldr	r3, [r7, #4]
 8012c60:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8012c64:	4b18      	ldr	r3, [pc, #96]	; (8012cc8 <tcp_receive+0x270>)
 8012c66:	681b      	ldr	r3, [r3, #0]
 8012c68:	b29a      	uxth	r2, r3
 8012c6a:	687b      	ldr	r3, [r7, #4]
 8012c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012c6e:	b29b      	uxth	r3, r3
 8012c70:	1ad3      	subs	r3, r2, r3
 8012c72:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8012c74:	687b      	ldr	r3, [r7, #4]
 8012c76:	2200      	movs	r2, #0
 8012c78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8012c7c:	4b12      	ldr	r3, [pc, #72]	; (8012cc8 <tcp_receive+0x270>)
 8012c7e:	681a      	ldr	r2, [r3, #0]
 8012c80:	687b      	ldr	r3, [r7, #4]
 8012c82:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8012c84:	687b      	ldr	r3, [r7, #4]
 8012c86:	7d1b      	ldrb	r3, [r3, #20]
 8012c88:	2b03      	cmp	r3, #3
 8012c8a:	f240 8097 	bls.w	8012dbc <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8012c8e:	687b      	ldr	r3, [r7, #4]
 8012c90:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012c94:	687b      	ldr	r3, [r7, #4]
 8012c96:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8012c9a:	429a      	cmp	r2, r3
 8012c9c:	d245      	bcs.n	8012d2a <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8012c9e:	687b      	ldr	r3, [r7, #4]
 8012ca0:	8b5b      	ldrh	r3, [r3, #26]
 8012ca2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012ca6:	2b00      	cmp	r3, #0
 8012ca8:	d014      	beq.n	8012cd4 <tcp_receive+0x27c>
 8012caa:	2301      	movs	r3, #1
 8012cac:	e013      	b.n	8012cd6 <tcp_receive+0x27e>
 8012cae:	bf00      	nop
 8012cb0:	0801f574 	.word	0x0801f574
 8012cb4:	0801f8a4 	.word	0x0801f8a4
 8012cb8:	0801f5c0 	.word	0x0801f5c0
 8012cbc:	0801f8c0 	.word	0x0801f8c0
 8012cc0:	20013bbc 	.word	0x20013bbc
 8012cc4:	20013bb0 	.word	0x20013bb0
 8012cc8:	20013bb4 	.word	0x20013bb4
 8012ccc:	20013ba0 	.word	0x20013ba0
 8012cd0:	20013bba 	.word	0x20013bba
 8012cd4:	2302      	movs	r3, #2
 8012cd6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8012cda:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8012cde:	b29a      	uxth	r2, r3
 8012ce0:	687b      	ldr	r3, [r7, #4]
 8012ce2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012ce4:	fb12 f303 	smulbb	r3, r2, r3
 8012ce8:	b29b      	uxth	r3, r3
 8012cea:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8012cec:	4293      	cmp	r3, r2
 8012cee:	bf28      	it	cs
 8012cf0:	4613      	movcs	r3, r2
 8012cf2:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8012cf4:	687b      	ldr	r3, [r7, #4]
 8012cf6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012cfa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8012cfc:	4413      	add	r3, r2
 8012cfe:	b29a      	uxth	r2, r3
 8012d00:	687b      	ldr	r3, [r7, #4]
 8012d02:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012d06:	429a      	cmp	r2, r3
 8012d08:	d309      	bcc.n	8012d1e <tcp_receive+0x2c6>
 8012d0a:	687b      	ldr	r3, [r7, #4]
 8012d0c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012d10:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8012d12:	4413      	add	r3, r2
 8012d14:	b29a      	uxth	r2, r3
 8012d16:	687b      	ldr	r3, [r7, #4]
 8012d18:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8012d1c:	e04e      	b.n	8012dbc <tcp_receive+0x364>
 8012d1e:	687b      	ldr	r3, [r7, #4]
 8012d20:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012d24:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8012d28:	e048      	b.n	8012dbc <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8012d2a:	687b      	ldr	r3, [r7, #4]
 8012d2c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8012d30:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8012d32:	4413      	add	r3, r2
 8012d34:	b29a      	uxth	r2, r3
 8012d36:	687b      	ldr	r3, [r7, #4]
 8012d38:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8012d3c:	429a      	cmp	r2, r3
 8012d3e:	d309      	bcc.n	8012d54 <tcp_receive+0x2fc>
 8012d40:	687b      	ldr	r3, [r7, #4]
 8012d42:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8012d46:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8012d48:	4413      	add	r3, r2
 8012d4a:	b29a      	uxth	r2, r3
 8012d4c:	687b      	ldr	r3, [r7, #4]
 8012d4e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8012d52:	e004      	b.n	8012d5e <tcp_receive+0x306>
 8012d54:	687b      	ldr	r3, [r7, #4]
 8012d56:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012d5a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8012d5e:	687b      	ldr	r3, [r7, #4]
 8012d60:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8012d64:	687b      	ldr	r3, [r7, #4]
 8012d66:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012d6a:	429a      	cmp	r2, r3
 8012d6c:	d326      	bcc.n	8012dbc <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8012d6e:	687b      	ldr	r3, [r7, #4]
 8012d70:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8012d74:	687b      	ldr	r3, [r7, #4]
 8012d76:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012d7a:	1ad3      	subs	r3, r2, r3
 8012d7c:	b29a      	uxth	r2, r3
 8012d7e:	687b      	ldr	r3, [r7, #4]
 8012d80:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8012d84:	687b      	ldr	r3, [r7, #4]
 8012d86:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012d8a:	687b      	ldr	r3, [r7, #4]
 8012d8c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012d8e:	4413      	add	r3, r2
 8012d90:	b29a      	uxth	r2, r3
 8012d92:	687b      	ldr	r3, [r7, #4]
 8012d94:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012d98:	429a      	cmp	r2, r3
 8012d9a:	d30a      	bcc.n	8012db2 <tcp_receive+0x35a>
 8012d9c:	687b      	ldr	r3, [r7, #4]
 8012d9e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012da2:	687b      	ldr	r3, [r7, #4]
 8012da4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012da6:	4413      	add	r3, r2
 8012da8:	b29a      	uxth	r2, r3
 8012daa:	687b      	ldr	r3, [r7, #4]
 8012dac:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8012db0:	e004      	b.n	8012dbc <tcp_receive+0x364>
 8012db2:	687b      	ldr	r3, [r7, #4]
 8012db4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012db8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8012dbc:	687b      	ldr	r3, [r7, #4]
 8012dbe:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8012dc0:	687b      	ldr	r3, [r7, #4]
 8012dc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012dc4:	4a98      	ldr	r2, [pc, #608]	; (8013028 <tcp_receive+0x5d0>)
 8012dc6:	6878      	ldr	r0, [r7, #4]
 8012dc8:	f7ff fdca 	bl	8012960 <tcp_free_acked_segments>
 8012dcc:	4602      	mov	r2, r0
 8012dce:	687b      	ldr	r3, [r7, #4]
 8012dd0:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8012dd2:	687b      	ldr	r3, [r7, #4]
 8012dd4:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8012dd6:	687b      	ldr	r3, [r7, #4]
 8012dd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012dda:	4a94      	ldr	r2, [pc, #592]	; (801302c <tcp_receive+0x5d4>)
 8012ddc:	6878      	ldr	r0, [r7, #4]
 8012dde:	f7ff fdbf 	bl	8012960 <tcp_free_acked_segments>
 8012de2:	4602      	mov	r2, r0
 8012de4:	687b      	ldr	r3, [r7, #4]
 8012de6:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8012de8:	687b      	ldr	r3, [r7, #4]
 8012dea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012dec:	2b00      	cmp	r3, #0
 8012dee:	d104      	bne.n	8012dfa <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8012df0:	687b      	ldr	r3, [r7, #4]
 8012df2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012df6:	861a      	strh	r2, [r3, #48]	; 0x30
 8012df8:	e002      	b.n	8012e00 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8012dfa:	687b      	ldr	r3, [r7, #4]
 8012dfc:	2200      	movs	r2, #0
 8012dfe:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8012e00:	687b      	ldr	r3, [r7, #4]
 8012e02:	2200      	movs	r2, #0
 8012e04:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8012e06:	687b      	ldr	r3, [r7, #4]
 8012e08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012e0a:	2b00      	cmp	r3, #0
 8012e0c:	d103      	bne.n	8012e16 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8012e0e:	687b      	ldr	r3, [r7, #4]
 8012e10:	2200      	movs	r2, #0
 8012e12:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8012e16:	687b      	ldr	r3, [r7, #4]
 8012e18:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8012e1c:	4b84      	ldr	r3, [pc, #528]	; (8013030 <tcp_receive+0x5d8>)
 8012e1e:	881b      	ldrh	r3, [r3, #0]
 8012e20:	4413      	add	r3, r2
 8012e22:	b29a      	uxth	r2, r3
 8012e24:	687b      	ldr	r3, [r7, #4]
 8012e26:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8012e2a:	687b      	ldr	r3, [r7, #4]
 8012e2c:	8b5b      	ldrh	r3, [r3, #26]
 8012e2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012e32:	2b00      	cmp	r3, #0
 8012e34:	d035      	beq.n	8012ea2 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8012e36:	687b      	ldr	r3, [r7, #4]
 8012e38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012e3a:	2b00      	cmp	r3, #0
 8012e3c:	d118      	bne.n	8012e70 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8012e3e:	687b      	ldr	r3, [r7, #4]
 8012e40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012e42:	2b00      	cmp	r3, #0
 8012e44:	d00c      	beq.n	8012e60 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8012e46:	687b      	ldr	r3, [r7, #4]
 8012e48:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8012e4a:	687b      	ldr	r3, [r7, #4]
 8012e4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012e4e:	691b      	ldr	r3, [r3, #16]
 8012e50:	685b      	ldr	r3, [r3, #4]
 8012e52:	4618      	mov	r0, r3
 8012e54:	f7fa fe4b 	bl	800daee <lwip_htonl>
 8012e58:	4603      	mov	r3, r0
 8012e5a:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8012e5c:	2b00      	cmp	r3, #0
 8012e5e:	dc20      	bgt.n	8012ea2 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8012e60:	687b      	ldr	r3, [r7, #4]
 8012e62:	8b5b      	ldrh	r3, [r3, #26]
 8012e64:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8012e68:	b29a      	uxth	r2, r3
 8012e6a:	687b      	ldr	r3, [r7, #4]
 8012e6c:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8012e6e:	e018      	b.n	8012ea2 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8012e70:	687b      	ldr	r3, [r7, #4]
 8012e72:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8012e74:	687b      	ldr	r3, [r7, #4]
 8012e76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012e78:	691b      	ldr	r3, [r3, #16]
 8012e7a:	685b      	ldr	r3, [r3, #4]
 8012e7c:	4618      	mov	r0, r3
 8012e7e:	f7fa fe36 	bl	800daee <lwip_htonl>
 8012e82:	4603      	mov	r3, r0
 8012e84:	1ae3      	subs	r3, r4, r3
 8012e86:	2b00      	cmp	r3, #0
 8012e88:	dc0b      	bgt.n	8012ea2 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8012e8a:	687b      	ldr	r3, [r7, #4]
 8012e8c:	8b5b      	ldrh	r3, [r3, #26]
 8012e8e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8012e92:	b29a      	uxth	r2, r3
 8012e94:	687b      	ldr	r3, [r7, #4]
 8012e96:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8012e98:	e003      	b.n	8012ea2 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8012e9a:	6878      	ldr	r0, [r7, #4]
 8012e9c:	f001 ffaa 	bl	8014df4 <tcp_send_empty_ack>
 8012ea0:	e000      	b.n	8012ea4 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8012ea2:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8012ea4:	687b      	ldr	r3, [r7, #4]
 8012ea6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012ea8:	2b00      	cmp	r3, #0
 8012eaa:	d05b      	beq.n	8012f64 <tcp_receive+0x50c>
 8012eac:	687b      	ldr	r3, [r7, #4]
 8012eae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012eb0:	4b60      	ldr	r3, [pc, #384]	; (8013034 <tcp_receive+0x5dc>)
 8012eb2:	681b      	ldr	r3, [r3, #0]
 8012eb4:	1ad3      	subs	r3, r2, r3
 8012eb6:	2b00      	cmp	r3, #0
 8012eb8:	da54      	bge.n	8012f64 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8012eba:	4b5f      	ldr	r3, [pc, #380]	; (8013038 <tcp_receive+0x5e0>)
 8012ebc:	681b      	ldr	r3, [r3, #0]
 8012ebe:	b29a      	uxth	r2, r3
 8012ec0:	687b      	ldr	r3, [r7, #4]
 8012ec2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012ec4:	b29b      	uxth	r3, r3
 8012ec6:	1ad3      	subs	r3, r2, r3
 8012ec8:	b29b      	uxth	r3, r3
 8012eca:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8012ece:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8012ed2:	687b      	ldr	r3, [r7, #4]
 8012ed4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8012ed8:	10db      	asrs	r3, r3, #3
 8012eda:	b21b      	sxth	r3, r3
 8012edc:	b29b      	uxth	r3, r3
 8012ede:	1ad3      	subs	r3, r2, r3
 8012ee0:	b29b      	uxth	r3, r3
 8012ee2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8012ee6:	687b      	ldr	r3, [r7, #4]
 8012ee8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8012eec:	b29a      	uxth	r2, r3
 8012eee:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8012ef2:	4413      	add	r3, r2
 8012ef4:	b29b      	uxth	r3, r3
 8012ef6:	b21a      	sxth	r2, r3
 8012ef8:	687b      	ldr	r3, [r7, #4]
 8012efa:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8012efc:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8012f00:	2b00      	cmp	r3, #0
 8012f02:	da05      	bge.n	8012f10 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8012f04:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8012f08:	425b      	negs	r3, r3
 8012f0a:	b29b      	uxth	r3, r3
 8012f0c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8012f10:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8012f14:	687b      	ldr	r3, [r7, #4]
 8012f16:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8012f1a:	109b      	asrs	r3, r3, #2
 8012f1c:	b21b      	sxth	r3, r3
 8012f1e:	b29b      	uxth	r3, r3
 8012f20:	1ad3      	subs	r3, r2, r3
 8012f22:	b29b      	uxth	r3, r3
 8012f24:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8012f28:	687b      	ldr	r3, [r7, #4]
 8012f2a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8012f2e:	b29a      	uxth	r2, r3
 8012f30:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8012f34:	4413      	add	r3, r2
 8012f36:	b29b      	uxth	r3, r3
 8012f38:	b21a      	sxth	r2, r3
 8012f3a:	687b      	ldr	r3, [r7, #4]
 8012f3c:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8012f3e:	687b      	ldr	r3, [r7, #4]
 8012f40:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8012f44:	10db      	asrs	r3, r3, #3
 8012f46:	b21b      	sxth	r3, r3
 8012f48:	b29a      	uxth	r2, r3
 8012f4a:	687b      	ldr	r3, [r7, #4]
 8012f4c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8012f50:	b29b      	uxth	r3, r3
 8012f52:	4413      	add	r3, r2
 8012f54:	b29b      	uxth	r3, r3
 8012f56:	b21a      	sxth	r2, r3
 8012f58:	687b      	ldr	r3, [r7, #4]
 8012f5a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8012f5e:	687b      	ldr	r3, [r7, #4]
 8012f60:	2200      	movs	r2, #0
 8012f62:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8012f64:	4b35      	ldr	r3, [pc, #212]	; (801303c <tcp_receive+0x5e4>)
 8012f66:	881b      	ldrh	r3, [r3, #0]
 8012f68:	2b00      	cmp	r3, #0
 8012f6a:	f000 84e2 	beq.w	8013932 <tcp_receive+0xeda>
 8012f6e:	687b      	ldr	r3, [r7, #4]
 8012f70:	7d1b      	ldrb	r3, [r3, #20]
 8012f72:	2b06      	cmp	r3, #6
 8012f74:	f200 84dd 	bhi.w	8013932 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8012f78:	687b      	ldr	r3, [r7, #4]
 8012f7a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012f7c:	4b30      	ldr	r3, [pc, #192]	; (8013040 <tcp_receive+0x5e8>)
 8012f7e:	681b      	ldr	r3, [r3, #0]
 8012f80:	1ad3      	subs	r3, r2, r3
 8012f82:	3b01      	subs	r3, #1
 8012f84:	2b00      	cmp	r3, #0
 8012f86:	f2c0 808f 	blt.w	80130a8 <tcp_receive+0x650>
 8012f8a:	687b      	ldr	r3, [r7, #4]
 8012f8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012f8e:	4b2b      	ldr	r3, [pc, #172]	; (801303c <tcp_receive+0x5e4>)
 8012f90:	881b      	ldrh	r3, [r3, #0]
 8012f92:	4619      	mov	r1, r3
 8012f94:	4b2a      	ldr	r3, [pc, #168]	; (8013040 <tcp_receive+0x5e8>)
 8012f96:	681b      	ldr	r3, [r3, #0]
 8012f98:	440b      	add	r3, r1
 8012f9a:	1ad3      	subs	r3, r2, r3
 8012f9c:	3301      	adds	r3, #1
 8012f9e:	2b00      	cmp	r3, #0
 8012fa0:	f300 8082 	bgt.w	80130a8 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8012fa4:	4b27      	ldr	r3, [pc, #156]	; (8013044 <tcp_receive+0x5ec>)
 8012fa6:	685b      	ldr	r3, [r3, #4]
 8012fa8:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8012faa:	687b      	ldr	r3, [r7, #4]
 8012fac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012fae:	4b24      	ldr	r3, [pc, #144]	; (8013040 <tcp_receive+0x5e8>)
 8012fb0:	681b      	ldr	r3, [r3, #0]
 8012fb2:	1ad3      	subs	r3, r2, r3
 8012fb4:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8012fb6:	4b23      	ldr	r3, [pc, #140]	; (8013044 <tcp_receive+0x5ec>)
 8012fb8:	685b      	ldr	r3, [r3, #4]
 8012fba:	2b00      	cmp	r3, #0
 8012fbc:	d106      	bne.n	8012fcc <tcp_receive+0x574>
 8012fbe:	4b22      	ldr	r3, [pc, #136]	; (8013048 <tcp_receive+0x5f0>)
 8012fc0:	f240 5294 	movw	r2, #1428	; 0x594
 8012fc4:	4921      	ldr	r1, [pc, #132]	; (801304c <tcp_receive+0x5f4>)
 8012fc6:	4822      	ldr	r0, [pc, #136]	; (8013050 <tcp_receive+0x5f8>)
 8012fc8:	f008 fa5a 	bl	801b480 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8012fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012fce:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8012fd2:	4293      	cmp	r3, r2
 8012fd4:	d906      	bls.n	8012fe4 <tcp_receive+0x58c>
 8012fd6:	4b1c      	ldr	r3, [pc, #112]	; (8013048 <tcp_receive+0x5f0>)
 8012fd8:	f240 5295 	movw	r2, #1429	; 0x595
 8012fdc:	491d      	ldr	r1, [pc, #116]	; (8013054 <tcp_receive+0x5fc>)
 8012fde:	481c      	ldr	r0, [pc, #112]	; (8013050 <tcp_receive+0x5f8>)
 8012fe0:	f008 fa4e 	bl	801b480 <iprintf>
      off = (u16_t)off32;
 8012fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012fe6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8012fea:	4b16      	ldr	r3, [pc, #88]	; (8013044 <tcp_receive+0x5ec>)
 8012fec:	685b      	ldr	r3, [r3, #4]
 8012fee:	891b      	ldrh	r3, [r3, #8]
 8012ff0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012ff4:	429a      	cmp	r2, r3
 8012ff6:	d906      	bls.n	8013006 <tcp_receive+0x5ae>
 8012ff8:	4b13      	ldr	r3, [pc, #76]	; (8013048 <tcp_receive+0x5f0>)
 8012ffa:	f240 5297 	movw	r2, #1431	; 0x597
 8012ffe:	4916      	ldr	r1, [pc, #88]	; (8013058 <tcp_receive+0x600>)
 8013000:	4813      	ldr	r0, [pc, #76]	; (8013050 <tcp_receive+0x5f8>)
 8013002:	f008 fa3d 	bl	801b480 <iprintf>
      inseg.len -= off;
 8013006:	4b0f      	ldr	r3, [pc, #60]	; (8013044 <tcp_receive+0x5ec>)
 8013008:	891a      	ldrh	r2, [r3, #8]
 801300a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801300e:	1ad3      	subs	r3, r2, r3
 8013010:	b29a      	uxth	r2, r3
 8013012:	4b0c      	ldr	r3, [pc, #48]	; (8013044 <tcp_receive+0x5ec>)
 8013014:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8013016:	4b0b      	ldr	r3, [pc, #44]	; (8013044 <tcp_receive+0x5ec>)
 8013018:	685b      	ldr	r3, [r3, #4]
 801301a:	891a      	ldrh	r2, [r3, #8]
 801301c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013020:	1ad3      	subs	r3, r2, r3
 8013022:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8013024:	e02a      	b.n	801307c <tcp_receive+0x624>
 8013026:	bf00      	nop
 8013028:	0801f8dc 	.word	0x0801f8dc
 801302c:	0801f8e4 	.word	0x0801f8e4
 8013030:	20013bb8 	.word	0x20013bb8
 8013034:	20013bb4 	.word	0x20013bb4
 8013038:	20013b74 	.word	0x20013b74
 801303c:	20013bba 	.word	0x20013bba
 8013040:	20013bb0 	.word	0x20013bb0
 8013044:	20013b8c 	.word	0x20013b8c
 8013048:	0801f574 	.word	0x0801f574
 801304c:	0801f8ec 	.word	0x0801f8ec
 8013050:	0801f5c0 	.word	0x0801f5c0
 8013054:	0801f8fc 	.word	0x0801f8fc
 8013058:	0801f90c 	.word	0x0801f90c
        off -= p->len;
 801305c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801305e:	895b      	ldrh	r3, [r3, #10]
 8013060:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013064:	1ad3      	subs	r3, r2, r3
 8013066:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 801306a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801306c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801306e:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8013070:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013072:	2200      	movs	r2, #0
 8013074:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8013076:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013078:	681b      	ldr	r3, [r3, #0]
 801307a:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 801307c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801307e:	895b      	ldrh	r3, [r3, #10]
 8013080:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013084:	429a      	cmp	r2, r3
 8013086:	d8e9      	bhi.n	801305c <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8013088:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801308c:	4619      	mov	r1, r3
 801308e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8013090:	f7fc f9b4 	bl	800f3fc <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8013094:	687b      	ldr	r3, [r7, #4]
 8013096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013098:	4a91      	ldr	r2, [pc, #580]	; (80132e0 <tcp_receive+0x888>)
 801309a:	6013      	str	r3, [r2, #0]
 801309c:	4b91      	ldr	r3, [pc, #580]	; (80132e4 <tcp_receive+0x88c>)
 801309e:	691b      	ldr	r3, [r3, #16]
 80130a0:	4a8f      	ldr	r2, [pc, #572]	; (80132e0 <tcp_receive+0x888>)
 80130a2:	6812      	ldr	r2, [r2, #0]
 80130a4:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80130a6:	e00d      	b.n	80130c4 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 80130a8:	4b8d      	ldr	r3, [pc, #564]	; (80132e0 <tcp_receive+0x888>)
 80130aa:	681a      	ldr	r2, [r3, #0]
 80130ac:	687b      	ldr	r3, [r7, #4]
 80130ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80130b0:	1ad3      	subs	r3, r2, r3
 80130b2:	2b00      	cmp	r3, #0
 80130b4:	da06      	bge.n	80130c4 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 80130b6:	687b      	ldr	r3, [r7, #4]
 80130b8:	8b5b      	ldrh	r3, [r3, #26]
 80130ba:	f043 0302 	orr.w	r3, r3, #2
 80130be:	b29a      	uxth	r2, r3
 80130c0:	687b      	ldr	r3, [r7, #4]
 80130c2:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80130c4:	4b86      	ldr	r3, [pc, #536]	; (80132e0 <tcp_receive+0x888>)
 80130c6:	681a      	ldr	r2, [r3, #0]
 80130c8:	687b      	ldr	r3, [r7, #4]
 80130ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80130cc:	1ad3      	subs	r3, r2, r3
 80130ce:	2b00      	cmp	r3, #0
 80130d0:	f2c0 842a 	blt.w	8013928 <tcp_receive+0xed0>
 80130d4:	4b82      	ldr	r3, [pc, #520]	; (80132e0 <tcp_receive+0x888>)
 80130d6:	681a      	ldr	r2, [r3, #0]
 80130d8:	687b      	ldr	r3, [r7, #4]
 80130da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80130dc:	6879      	ldr	r1, [r7, #4]
 80130de:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80130e0:	440b      	add	r3, r1
 80130e2:	1ad3      	subs	r3, r2, r3
 80130e4:	3301      	adds	r3, #1
 80130e6:	2b00      	cmp	r3, #0
 80130e8:	f300 841e 	bgt.w	8013928 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 80130ec:	687b      	ldr	r3, [r7, #4]
 80130ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80130f0:	4b7b      	ldr	r3, [pc, #492]	; (80132e0 <tcp_receive+0x888>)
 80130f2:	681b      	ldr	r3, [r3, #0]
 80130f4:	429a      	cmp	r2, r3
 80130f6:	f040 829a 	bne.w	801362e <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 80130fa:	4b7a      	ldr	r3, [pc, #488]	; (80132e4 <tcp_receive+0x88c>)
 80130fc:	891c      	ldrh	r4, [r3, #8]
 80130fe:	4b79      	ldr	r3, [pc, #484]	; (80132e4 <tcp_receive+0x88c>)
 8013100:	691b      	ldr	r3, [r3, #16]
 8013102:	899b      	ldrh	r3, [r3, #12]
 8013104:	b29b      	uxth	r3, r3
 8013106:	4618      	mov	r0, r3
 8013108:	f7fa fcdc 	bl	800dac4 <lwip_htons>
 801310c:	4603      	mov	r3, r0
 801310e:	b2db      	uxtb	r3, r3
 8013110:	f003 0303 	and.w	r3, r3, #3
 8013114:	2b00      	cmp	r3, #0
 8013116:	d001      	beq.n	801311c <tcp_receive+0x6c4>
 8013118:	2301      	movs	r3, #1
 801311a:	e000      	b.n	801311e <tcp_receive+0x6c6>
 801311c:	2300      	movs	r3, #0
 801311e:	4423      	add	r3, r4
 8013120:	b29a      	uxth	r2, r3
 8013122:	4b71      	ldr	r3, [pc, #452]	; (80132e8 <tcp_receive+0x890>)
 8013124:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8013126:	687b      	ldr	r3, [r7, #4]
 8013128:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801312a:	4b6f      	ldr	r3, [pc, #444]	; (80132e8 <tcp_receive+0x890>)
 801312c:	881b      	ldrh	r3, [r3, #0]
 801312e:	429a      	cmp	r2, r3
 8013130:	d275      	bcs.n	801321e <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8013132:	4b6c      	ldr	r3, [pc, #432]	; (80132e4 <tcp_receive+0x88c>)
 8013134:	691b      	ldr	r3, [r3, #16]
 8013136:	899b      	ldrh	r3, [r3, #12]
 8013138:	b29b      	uxth	r3, r3
 801313a:	4618      	mov	r0, r3
 801313c:	f7fa fcc2 	bl	800dac4 <lwip_htons>
 8013140:	4603      	mov	r3, r0
 8013142:	b2db      	uxtb	r3, r3
 8013144:	f003 0301 	and.w	r3, r3, #1
 8013148:	2b00      	cmp	r3, #0
 801314a:	d01f      	beq.n	801318c <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 801314c:	4b65      	ldr	r3, [pc, #404]	; (80132e4 <tcp_receive+0x88c>)
 801314e:	691b      	ldr	r3, [r3, #16]
 8013150:	899b      	ldrh	r3, [r3, #12]
 8013152:	b29b      	uxth	r3, r3
 8013154:	b21b      	sxth	r3, r3
 8013156:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801315a:	b21c      	sxth	r4, r3
 801315c:	4b61      	ldr	r3, [pc, #388]	; (80132e4 <tcp_receive+0x88c>)
 801315e:	691b      	ldr	r3, [r3, #16]
 8013160:	899b      	ldrh	r3, [r3, #12]
 8013162:	b29b      	uxth	r3, r3
 8013164:	4618      	mov	r0, r3
 8013166:	f7fa fcad 	bl	800dac4 <lwip_htons>
 801316a:	4603      	mov	r3, r0
 801316c:	b2db      	uxtb	r3, r3
 801316e:	b29b      	uxth	r3, r3
 8013170:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8013174:	b29b      	uxth	r3, r3
 8013176:	4618      	mov	r0, r3
 8013178:	f7fa fca4 	bl	800dac4 <lwip_htons>
 801317c:	4603      	mov	r3, r0
 801317e:	b21b      	sxth	r3, r3
 8013180:	4323      	orrs	r3, r4
 8013182:	b21a      	sxth	r2, r3
 8013184:	4b57      	ldr	r3, [pc, #348]	; (80132e4 <tcp_receive+0x88c>)
 8013186:	691b      	ldr	r3, [r3, #16]
 8013188:	b292      	uxth	r2, r2
 801318a:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 801318c:	687b      	ldr	r3, [r7, #4]
 801318e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8013190:	4b54      	ldr	r3, [pc, #336]	; (80132e4 <tcp_receive+0x88c>)
 8013192:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8013194:	4b53      	ldr	r3, [pc, #332]	; (80132e4 <tcp_receive+0x88c>)
 8013196:	691b      	ldr	r3, [r3, #16]
 8013198:	899b      	ldrh	r3, [r3, #12]
 801319a:	b29b      	uxth	r3, r3
 801319c:	4618      	mov	r0, r3
 801319e:	f7fa fc91 	bl	800dac4 <lwip_htons>
 80131a2:	4603      	mov	r3, r0
 80131a4:	b2db      	uxtb	r3, r3
 80131a6:	f003 0302 	and.w	r3, r3, #2
 80131aa:	2b00      	cmp	r3, #0
 80131ac:	d005      	beq.n	80131ba <tcp_receive+0x762>
            inseg.len -= 1;
 80131ae:	4b4d      	ldr	r3, [pc, #308]	; (80132e4 <tcp_receive+0x88c>)
 80131b0:	891b      	ldrh	r3, [r3, #8]
 80131b2:	3b01      	subs	r3, #1
 80131b4:	b29a      	uxth	r2, r3
 80131b6:	4b4b      	ldr	r3, [pc, #300]	; (80132e4 <tcp_receive+0x88c>)
 80131b8:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 80131ba:	4b4a      	ldr	r3, [pc, #296]	; (80132e4 <tcp_receive+0x88c>)
 80131bc:	685b      	ldr	r3, [r3, #4]
 80131be:	4a49      	ldr	r2, [pc, #292]	; (80132e4 <tcp_receive+0x88c>)
 80131c0:	8912      	ldrh	r2, [r2, #8]
 80131c2:	4611      	mov	r1, r2
 80131c4:	4618      	mov	r0, r3
 80131c6:	f7fc f819 	bl	800f1fc <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 80131ca:	4b46      	ldr	r3, [pc, #280]	; (80132e4 <tcp_receive+0x88c>)
 80131cc:	891c      	ldrh	r4, [r3, #8]
 80131ce:	4b45      	ldr	r3, [pc, #276]	; (80132e4 <tcp_receive+0x88c>)
 80131d0:	691b      	ldr	r3, [r3, #16]
 80131d2:	899b      	ldrh	r3, [r3, #12]
 80131d4:	b29b      	uxth	r3, r3
 80131d6:	4618      	mov	r0, r3
 80131d8:	f7fa fc74 	bl	800dac4 <lwip_htons>
 80131dc:	4603      	mov	r3, r0
 80131de:	b2db      	uxtb	r3, r3
 80131e0:	f003 0303 	and.w	r3, r3, #3
 80131e4:	2b00      	cmp	r3, #0
 80131e6:	d001      	beq.n	80131ec <tcp_receive+0x794>
 80131e8:	2301      	movs	r3, #1
 80131ea:	e000      	b.n	80131ee <tcp_receive+0x796>
 80131ec:	2300      	movs	r3, #0
 80131ee:	4423      	add	r3, r4
 80131f0:	b29a      	uxth	r2, r3
 80131f2:	4b3d      	ldr	r3, [pc, #244]	; (80132e8 <tcp_receive+0x890>)
 80131f4:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80131f6:	4b3c      	ldr	r3, [pc, #240]	; (80132e8 <tcp_receive+0x890>)
 80131f8:	881b      	ldrh	r3, [r3, #0]
 80131fa:	461a      	mov	r2, r3
 80131fc:	4b38      	ldr	r3, [pc, #224]	; (80132e0 <tcp_receive+0x888>)
 80131fe:	681b      	ldr	r3, [r3, #0]
 8013200:	441a      	add	r2, r3
 8013202:	687b      	ldr	r3, [r7, #4]
 8013204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013206:	6879      	ldr	r1, [r7, #4]
 8013208:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801320a:	440b      	add	r3, r1
 801320c:	429a      	cmp	r2, r3
 801320e:	d006      	beq.n	801321e <tcp_receive+0x7c6>
 8013210:	4b36      	ldr	r3, [pc, #216]	; (80132ec <tcp_receive+0x894>)
 8013212:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8013216:	4936      	ldr	r1, [pc, #216]	; (80132f0 <tcp_receive+0x898>)
 8013218:	4836      	ldr	r0, [pc, #216]	; (80132f4 <tcp_receive+0x89c>)
 801321a:	f008 f931 	bl	801b480 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 801321e:	687b      	ldr	r3, [r7, #4]
 8013220:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013222:	2b00      	cmp	r3, #0
 8013224:	f000 80e7 	beq.w	80133f6 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8013228:	4b2e      	ldr	r3, [pc, #184]	; (80132e4 <tcp_receive+0x88c>)
 801322a:	691b      	ldr	r3, [r3, #16]
 801322c:	899b      	ldrh	r3, [r3, #12]
 801322e:	b29b      	uxth	r3, r3
 8013230:	4618      	mov	r0, r3
 8013232:	f7fa fc47 	bl	800dac4 <lwip_htons>
 8013236:	4603      	mov	r3, r0
 8013238:	b2db      	uxtb	r3, r3
 801323a:	f003 0301 	and.w	r3, r3, #1
 801323e:	2b00      	cmp	r3, #0
 8013240:	d010      	beq.n	8013264 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8013242:	e00a      	b.n	801325a <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8013244:	687b      	ldr	r3, [r7, #4]
 8013246:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013248:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 801324a:	687b      	ldr	r3, [r7, #4]
 801324c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801324e:	681a      	ldr	r2, [r3, #0]
 8013250:	687b      	ldr	r3, [r7, #4]
 8013252:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8013254:	68f8      	ldr	r0, [r7, #12]
 8013256:	f7fd fd7e 	bl	8010d56 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 801325a:	687b      	ldr	r3, [r7, #4]
 801325c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801325e:	2b00      	cmp	r3, #0
 8013260:	d1f0      	bne.n	8013244 <tcp_receive+0x7ec>
 8013262:	e0c8      	b.n	80133f6 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8013264:	687b      	ldr	r3, [r7, #4]
 8013266:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013268:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 801326a:	e052      	b.n	8013312 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801326c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801326e:	691b      	ldr	r3, [r3, #16]
 8013270:	899b      	ldrh	r3, [r3, #12]
 8013272:	b29b      	uxth	r3, r3
 8013274:	4618      	mov	r0, r3
 8013276:	f7fa fc25 	bl	800dac4 <lwip_htons>
 801327a:	4603      	mov	r3, r0
 801327c:	b2db      	uxtb	r3, r3
 801327e:	f003 0301 	and.w	r3, r3, #1
 8013282:	2b00      	cmp	r3, #0
 8013284:	d03d      	beq.n	8013302 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8013286:	4b17      	ldr	r3, [pc, #92]	; (80132e4 <tcp_receive+0x88c>)
 8013288:	691b      	ldr	r3, [r3, #16]
 801328a:	899b      	ldrh	r3, [r3, #12]
 801328c:	b29b      	uxth	r3, r3
 801328e:	4618      	mov	r0, r3
 8013290:	f7fa fc18 	bl	800dac4 <lwip_htons>
 8013294:	4603      	mov	r3, r0
 8013296:	b2db      	uxtb	r3, r3
 8013298:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801329c:	2b00      	cmp	r3, #0
 801329e:	d130      	bne.n	8013302 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 80132a0:	4b10      	ldr	r3, [pc, #64]	; (80132e4 <tcp_receive+0x88c>)
 80132a2:	691b      	ldr	r3, [r3, #16]
 80132a4:	899b      	ldrh	r3, [r3, #12]
 80132a6:	b29c      	uxth	r4, r3
 80132a8:	2001      	movs	r0, #1
 80132aa:	f7fa fc0b 	bl	800dac4 <lwip_htons>
 80132ae:	4603      	mov	r3, r0
 80132b0:	461a      	mov	r2, r3
 80132b2:	4b0c      	ldr	r3, [pc, #48]	; (80132e4 <tcp_receive+0x88c>)
 80132b4:	691b      	ldr	r3, [r3, #16]
 80132b6:	4322      	orrs	r2, r4
 80132b8:	b292      	uxth	r2, r2
 80132ba:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 80132bc:	4b09      	ldr	r3, [pc, #36]	; (80132e4 <tcp_receive+0x88c>)
 80132be:	891c      	ldrh	r4, [r3, #8]
 80132c0:	4b08      	ldr	r3, [pc, #32]	; (80132e4 <tcp_receive+0x88c>)
 80132c2:	691b      	ldr	r3, [r3, #16]
 80132c4:	899b      	ldrh	r3, [r3, #12]
 80132c6:	b29b      	uxth	r3, r3
 80132c8:	4618      	mov	r0, r3
 80132ca:	f7fa fbfb 	bl	800dac4 <lwip_htons>
 80132ce:	4603      	mov	r3, r0
 80132d0:	b2db      	uxtb	r3, r3
 80132d2:	f003 0303 	and.w	r3, r3, #3
 80132d6:	2b00      	cmp	r3, #0
 80132d8:	d00e      	beq.n	80132f8 <tcp_receive+0x8a0>
 80132da:	2301      	movs	r3, #1
 80132dc:	e00d      	b.n	80132fa <tcp_receive+0x8a2>
 80132de:	bf00      	nop
 80132e0:	20013bb0 	.word	0x20013bb0
 80132e4:	20013b8c 	.word	0x20013b8c
 80132e8:	20013bba 	.word	0x20013bba
 80132ec:	0801f574 	.word	0x0801f574
 80132f0:	0801f91c 	.word	0x0801f91c
 80132f4:	0801f5c0 	.word	0x0801f5c0
 80132f8:	2300      	movs	r3, #0
 80132fa:	4423      	add	r3, r4
 80132fc:	b29a      	uxth	r2, r3
 80132fe:	4b98      	ldr	r3, [pc, #608]	; (8013560 <tcp_receive+0xb08>)
 8013300:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8013302:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013304:	613b      	str	r3, [r7, #16]
              next = next->next;
 8013306:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013308:	681b      	ldr	r3, [r3, #0]
 801330a:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 801330c:	6938      	ldr	r0, [r7, #16]
 801330e:	f7fd fd22 	bl	8010d56 <tcp_seg_free>
            while (next &&
 8013312:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013314:	2b00      	cmp	r3, #0
 8013316:	d00e      	beq.n	8013336 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8013318:	4b91      	ldr	r3, [pc, #580]	; (8013560 <tcp_receive+0xb08>)
 801331a:	881b      	ldrh	r3, [r3, #0]
 801331c:	461a      	mov	r2, r3
 801331e:	4b91      	ldr	r3, [pc, #580]	; (8013564 <tcp_receive+0xb0c>)
 8013320:	681b      	ldr	r3, [r3, #0]
 8013322:	441a      	add	r2, r3
 8013324:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013326:	691b      	ldr	r3, [r3, #16]
 8013328:	685b      	ldr	r3, [r3, #4]
 801332a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801332c:	8909      	ldrh	r1, [r1, #8]
 801332e:	440b      	add	r3, r1
 8013330:	1ad3      	subs	r3, r2, r3
            while (next &&
 8013332:	2b00      	cmp	r3, #0
 8013334:	da9a      	bge.n	801326c <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8013336:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013338:	2b00      	cmp	r3, #0
 801333a:	d059      	beq.n	80133f0 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 801333c:	4b88      	ldr	r3, [pc, #544]	; (8013560 <tcp_receive+0xb08>)
 801333e:	881b      	ldrh	r3, [r3, #0]
 8013340:	461a      	mov	r2, r3
 8013342:	4b88      	ldr	r3, [pc, #544]	; (8013564 <tcp_receive+0xb0c>)
 8013344:	681b      	ldr	r3, [r3, #0]
 8013346:	441a      	add	r2, r3
 8013348:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801334a:	691b      	ldr	r3, [r3, #16]
 801334c:	685b      	ldr	r3, [r3, #4]
 801334e:	1ad3      	subs	r3, r2, r3
            if (next &&
 8013350:	2b00      	cmp	r3, #0
 8013352:	dd4d      	ble.n	80133f0 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8013354:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013356:	691b      	ldr	r3, [r3, #16]
 8013358:	685b      	ldr	r3, [r3, #4]
 801335a:	b29a      	uxth	r2, r3
 801335c:	4b81      	ldr	r3, [pc, #516]	; (8013564 <tcp_receive+0xb0c>)
 801335e:	681b      	ldr	r3, [r3, #0]
 8013360:	b29b      	uxth	r3, r3
 8013362:	1ad3      	subs	r3, r2, r3
 8013364:	b29a      	uxth	r2, r3
 8013366:	4b80      	ldr	r3, [pc, #512]	; (8013568 <tcp_receive+0xb10>)
 8013368:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801336a:	4b7f      	ldr	r3, [pc, #508]	; (8013568 <tcp_receive+0xb10>)
 801336c:	691b      	ldr	r3, [r3, #16]
 801336e:	899b      	ldrh	r3, [r3, #12]
 8013370:	b29b      	uxth	r3, r3
 8013372:	4618      	mov	r0, r3
 8013374:	f7fa fba6 	bl	800dac4 <lwip_htons>
 8013378:	4603      	mov	r3, r0
 801337a:	b2db      	uxtb	r3, r3
 801337c:	f003 0302 	and.w	r3, r3, #2
 8013380:	2b00      	cmp	r3, #0
 8013382:	d005      	beq.n	8013390 <tcp_receive+0x938>
                inseg.len -= 1;
 8013384:	4b78      	ldr	r3, [pc, #480]	; (8013568 <tcp_receive+0xb10>)
 8013386:	891b      	ldrh	r3, [r3, #8]
 8013388:	3b01      	subs	r3, #1
 801338a:	b29a      	uxth	r2, r3
 801338c:	4b76      	ldr	r3, [pc, #472]	; (8013568 <tcp_receive+0xb10>)
 801338e:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8013390:	4b75      	ldr	r3, [pc, #468]	; (8013568 <tcp_receive+0xb10>)
 8013392:	685b      	ldr	r3, [r3, #4]
 8013394:	4a74      	ldr	r2, [pc, #464]	; (8013568 <tcp_receive+0xb10>)
 8013396:	8912      	ldrh	r2, [r2, #8]
 8013398:	4611      	mov	r1, r2
 801339a:	4618      	mov	r0, r3
 801339c:	f7fb ff2e 	bl	800f1fc <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 80133a0:	4b71      	ldr	r3, [pc, #452]	; (8013568 <tcp_receive+0xb10>)
 80133a2:	891c      	ldrh	r4, [r3, #8]
 80133a4:	4b70      	ldr	r3, [pc, #448]	; (8013568 <tcp_receive+0xb10>)
 80133a6:	691b      	ldr	r3, [r3, #16]
 80133a8:	899b      	ldrh	r3, [r3, #12]
 80133aa:	b29b      	uxth	r3, r3
 80133ac:	4618      	mov	r0, r3
 80133ae:	f7fa fb89 	bl	800dac4 <lwip_htons>
 80133b2:	4603      	mov	r3, r0
 80133b4:	b2db      	uxtb	r3, r3
 80133b6:	f003 0303 	and.w	r3, r3, #3
 80133ba:	2b00      	cmp	r3, #0
 80133bc:	d001      	beq.n	80133c2 <tcp_receive+0x96a>
 80133be:	2301      	movs	r3, #1
 80133c0:	e000      	b.n	80133c4 <tcp_receive+0x96c>
 80133c2:	2300      	movs	r3, #0
 80133c4:	4423      	add	r3, r4
 80133c6:	b29a      	uxth	r2, r3
 80133c8:	4b65      	ldr	r3, [pc, #404]	; (8013560 <tcp_receive+0xb08>)
 80133ca:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 80133cc:	4b64      	ldr	r3, [pc, #400]	; (8013560 <tcp_receive+0xb08>)
 80133ce:	881b      	ldrh	r3, [r3, #0]
 80133d0:	461a      	mov	r2, r3
 80133d2:	4b64      	ldr	r3, [pc, #400]	; (8013564 <tcp_receive+0xb0c>)
 80133d4:	681b      	ldr	r3, [r3, #0]
 80133d6:	441a      	add	r2, r3
 80133d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80133da:	691b      	ldr	r3, [r3, #16]
 80133dc:	685b      	ldr	r3, [r3, #4]
 80133de:	429a      	cmp	r2, r3
 80133e0:	d006      	beq.n	80133f0 <tcp_receive+0x998>
 80133e2:	4b62      	ldr	r3, [pc, #392]	; (801356c <tcp_receive+0xb14>)
 80133e4:	f240 52fc 	movw	r2, #1532	; 0x5fc
 80133e8:	4961      	ldr	r1, [pc, #388]	; (8013570 <tcp_receive+0xb18>)
 80133ea:	4862      	ldr	r0, [pc, #392]	; (8013574 <tcp_receive+0xb1c>)
 80133ec:	f008 f848 	bl	801b480 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 80133f0:	687b      	ldr	r3, [r7, #4]
 80133f2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80133f4:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 80133f6:	4b5a      	ldr	r3, [pc, #360]	; (8013560 <tcp_receive+0xb08>)
 80133f8:	881b      	ldrh	r3, [r3, #0]
 80133fa:	461a      	mov	r2, r3
 80133fc:	4b59      	ldr	r3, [pc, #356]	; (8013564 <tcp_receive+0xb0c>)
 80133fe:	681b      	ldr	r3, [r3, #0]
 8013400:	441a      	add	r2, r3
 8013402:	687b      	ldr	r3, [r7, #4]
 8013404:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8013406:	687b      	ldr	r3, [r7, #4]
 8013408:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801340a:	4b55      	ldr	r3, [pc, #340]	; (8013560 <tcp_receive+0xb08>)
 801340c:	881b      	ldrh	r3, [r3, #0]
 801340e:	429a      	cmp	r2, r3
 8013410:	d206      	bcs.n	8013420 <tcp_receive+0x9c8>
 8013412:	4b56      	ldr	r3, [pc, #344]	; (801356c <tcp_receive+0xb14>)
 8013414:	f240 6207 	movw	r2, #1543	; 0x607
 8013418:	4957      	ldr	r1, [pc, #348]	; (8013578 <tcp_receive+0xb20>)
 801341a:	4856      	ldr	r0, [pc, #344]	; (8013574 <tcp_receive+0xb1c>)
 801341c:	f008 f830 	bl	801b480 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8013420:	687b      	ldr	r3, [r7, #4]
 8013422:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8013424:	4b4e      	ldr	r3, [pc, #312]	; (8013560 <tcp_receive+0xb08>)
 8013426:	881b      	ldrh	r3, [r3, #0]
 8013428:	1ad3      	subs	r3, r2, r3
 801342a:	b29a      	uxth	r2, r3
 801342c:	687b      	ldr	r3, [r7, #4]
 801342e:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8013430:	6878      	ldr	r0, [r7, #4]
 8013432:	f7fc ffad 	bl	8010390 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8013436:	4b4c      	ldr	r3, [pc, #304]	; (8013568 <tcp_receive+0xb10>)
 8013438:	685b      	ldr	r3, [r3, #4]
 801343a:	891b      	ldrh	r3, [r3, #8]
 801343c:	2b00      	cmp	r3, #0
 801343e:	d006      	beq.n	801344e <tcp_receive+0x9f6>
          recv_data = inseg.p;
 8013440:	4b49      	ldr	r3, [pc, #292]	; (8013568 <tcp_receive+0xb10>)
 8013442:	685b      	ldr	r3, [r3, #4]
 8013444:	4a4d      	ldr	r2, [pc, #308]	; (801357c <tcp_receive+0xb24>)
 8013446:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8013448:	4b47      	ldr	r3, [pc, #284]	; (8013568 <tcp_receive+0xb10>)
 801344a:	2200      	movs	r2, #0
 801344c:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801344e:	4b46      	ldr	r3, [pc, #280]	; (8013568 <tcp_receive+0xb10>)
 8013450:	691b      	ldr	r3, [r3, #16]
 8013452:	899b      	ldrh	r3, [r3, #12]
 8013454:	b29b      	uxth	r3, r3
 8013456:	4618      	mov	r0, r3
 8013458:	f7fa fb34 	bl	800dac4 <lwip_htons>
 801345c:	4603      	mov	r3, r0
 801345e:	b2db      	uxtb	r3, r3
 8013460:	f003 0301 	and.w	r3, r3, #1
 8013464:	2b00      	cmp	r3, #0
 8013466:	f000 80b8 	beq.w	80135da <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 801346a:	4b45      	ldr	r3, [pc, #276]	; (8013580 <tcp_receive+0xb28>)
 801346c:	781b      	ldrb	r3, [r3, #0]
 801346e:	f043 0320 	orr.w	r3, r3, #32
 8013472:	b2da      	uxtb	r2, r3
 8013474:	4b42      	ldr	r3, [pc, #264]	; (8013580 <tcp_receive+0xb28>)
 8013476:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8013478:	e0af      	b.n	80135da <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 801347a:	687b      	ldr	r3, [r7, #4]
 801347c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801347e:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8013480:	687b      	ldr	r3, [r7, #4]
 8013482:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013484:	691b      	ldr	r3, [r3, #16]
 8013486:	685b      	ldr	r3, [r3, #4]
 8013488:	4a36      	ldr	r2, [pc, #216]	; (8013564 <tcp_receive+0xb0c>)
 801348a:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801348c:	68bb      	ldr	r3, [r7, #8]
 801348e:	891b      	ldrh	r3, [r3, #8]
 8013490:	461c      	mov	r4, r3
 8013492:	68bb      	ldr	r3, [r7, #8]
 8013494:	691b      	ldr	r3, [r3, #16]
 8013496:	899b      	ldrh	r3, [r3, #12]
 8013498:	b29b      	uxth	r3, r3
 801349a:	4618      	mov	r0, r3
 801349c:	f7fa fb12 	bl	800dac4 <lwip_htons>
 80134a0:	4603      	mov	r3, r0
 80134a2:	b2db      	uxtb	r3, r3
 80134a4:	f003 0303 	and.w	r3, r3, #3
 80134a8:	2b00      	cmp	r3, #0
 80134aa:	d001      	beq.n	80134b0 <tcp_receive+0xa58>
 80134ac:	2301      	movs	r3, #1
 80134ae:	e000      	b.n	80134b2 <tcp_receive+0xa5a>
 80134b0:	2300      	movs	r3, #0
 80134b2:	191a      	adds	r2, r3, r4
 80134b4:	687b      	ldr	r3, [r7, #4]
 80134b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80134b8:	441a      	add	r2, r3
 80134ba:	687b      	ldr	r3, [r7, #4]
 80134bc:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80134be:	687b      	ldr	r3, [r7, #4]
 80134c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80134c2:	461c      	mov	r4, r3
 80134c4:	68bb      	ldr	r3, [r7, #8]
 80134c6:	891b      	ldrh	r3, [r3, #8]
 80134c8:	461d      	mov	r5, r3
 80134ca:	68bb      	ldr	r3, [r7, #8]
 80134cc:	691b      	ldr	r3, [r3, #16]
 80134ce:	899b      	ldrh	r3, [r3, #12]
 80134d0:	b29b      	uxth	r3, r3
 80134d2:	4618      	mov	r0, r3
 80134d4:	f7fa faf6 	bl	800dac4 <lwip_htons>
 80134d8:	4603      	mov	r3, r0
 80134da:	b2db      	uxtb	r3, r3
 80134dc:	f003 0303 	and.w	r3, r3, #3
 80134e0:	2b00      	cmp	r3, #0
 80134e2:	d001      	beq.n	80134e8 <tcp_receive+0xa90>
 80134e4:	2301      	movs	r3, #1
 80134e6:	e000      	b.n	80134ea <tcp_receive+0xa92>
 80134e8:	2300      	movs	r3, #0
 80134ea:	442b      	add	r3, r5
 80134ec:	429c      	cmp	r4, r3
 80134ee:	d206      	bcs.n	80134fe <tcp_receive+0xaa6>
 80134f0:	4b1e      	ldr	r3, [pc, #120]	; (801356c <tcp_receive+0xb14>)
 80134f2:	f240 622b 	movw	r2, #1579	; 0x62b
 80134f6:	4923      	ldr	r1, [pc, #140]	; (8013584 <tcp_receive+0xb2c>)
 80134f8:	481e      	ldr	r0, [pc, #120]	; (8013574 <tcp_receive+0xb1c>)
 80134fa:	f007 ffc1 	bl	801b480 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 80134fe:	68bb      	ldr	r3, [r7, #8]
 8013500:	891b      	ldrh	r3, [r3, #8]
 8013502:	461c      	mov	r4, r3
 8013504:	68bb      	ldr	r3, [r7, #8]
 8013506:	691b      	ldr	r3, [r3, #16]
 8013508:	899b      	ldrh	r3, [r3, #12]
 801350a:	b29b      	uxth	r3, r3
 801350c:	4618      	mov	r0, r3
 801350e:	f7fa fad9 	bl	800dac4 <lwip_htons>
 8013512:	4603      	mov	r3, r0
 8013514:	b2db      	uxtb	r3, r3
 8013516:	f003 0303 	and.w	r3, r3, #3
 801351a:	2b00      	cmp	r3, #0
 801351c:	d001      	beq.n	8013522 <tcp_receive+0xaca>
 801351e:	2301      	movs	r3, #1
 8013520:	e000      	b.n	8013524 <tcp_receive+0xacc>
 8013522:	2300      	movs	r3, #0
 8013524:	1919      	adds	r1, r3, r4
 8013526:	687b      	ldr	r3, [r7, #4]
 8013528:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801352a:	b28b      	uxth	r3, r1
 801352c:	1ad3      	subs	r3, r2, r3
 801352e:	b29a      	uxth	r2, r3
 8013530:	687b      	ldr	r3, [r7, #4]
 8013532:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8013534:	6878      	ldr	r0, [r7, #4]
 8013536:	f7fc ff2b 	bl	8010390 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 801353a:	68bb      	ldr	r3, [r7, #8]
 801353c:	685b      	ldr	r3, [r3, #4]
 801353e:	891b      	ldrh	r3, [r3, #8]
 8013540:	2b00      	cmp	r3, #0
 8013542:	d028      	beq.n	8013596 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8013544:	4b0d      	ldr	r3, [pc, #52]	; (801357c <tcp_receive+0xb24>)
 8013546:	681b      	ldr	r3, [r3, #0]
 8013548:	2b00      	cmp	r3, #0
 801354a:	d01d      	beq.n	8013588 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 801354c:	4b0b      	ldr	r3, [pc, #44]	; (801357c <tcp_receive+0xb24>)
 801354e:	681a      	ldr	r2, [r3, #0]
 8013550:	68bb      	ldr	r3, [r7, #8]
 8013552:	685b      	ldr	r3, [r3, #4]
 8013554:	4619      	mov	r1, r3
 8013556:	4610      	mov	r0, r2
 8013558:	f7fc f8a4 	bl	800f6a4 <pbuf_cat>
 801355c:	e018      	b.n	8013590 <tcp_receive+0xb38>
 801355e:	bf00      	nop
 8013560:	20013bba 	.word	0x20013bba
 8013564:	20013bb0 	.word	0x20013bb0
 8013568:	20013b8c 	.word	0x20013b8c
 801356c:	0801f574 	.word	0x0801f574
 8013570:	0801f954 	.word	0x0801f954
 8013574:	0801f5c0 	.word	0x0801f5c0
 8013578:	0801f990 	.word	0x0801f990
 801357c:	20013bc0 	.word	0x20013bc0
 8013580:	20013bbd 	.word	0x20013bbd
 8013584:	0801f9b0 	.word	0x0801f9b0
            } else {
              recv_data = cseg->p;
 8013588:	68bb      	ldr	r3, [r7, #8]
 801358a:	685b      	ldr	r3, [r3, #4]
 801358c:	4a70      	ldr	r2, [pc, #448]	; (8013750 <tcp_receive+0xcf8>)
 801358e:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8013590:	68bb      	ldr	r3, [r7, #8]
 8013592:	2200      	movs	r2, #0
 8013594:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8013596:	68bb      	ldr	r3, [r7, #8]
 8013598:	691b      	ldr	r3, [r3, #16]
 801359a:	899b      	ldrh	r3, [r3, #12]
 801359c:	b29b      	uxth	r3, r3
 801359e:	4618      	mov	r0, r3
 80135a0:	f7fa fa90 	bl	800dac4 <lwip_htons>
 80135a4:	4603      	mov	r3, r0
 80135a6:	b2db      	uxtb	r3, r3
 80135a8:	f003 0301 	and.w	r3, r3, #1
 80135ac:	2b00      	cmp	r3, #0
 80135ae:	d00d      	beq.n	80135cc <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 80135b0:	4b68      	ldr	r3, [pc, #416]	; (8013754 <tcp_receive+0xcfc>)
 80135b2:	781b      	ldrb	r3, [r3, #0]
 80135b4:	f043 0320 	orr.w	r3, r3, #32
 80135b8:	b2da      	uxtb	r2, r3
 80135ba:	4b66      	ldr	r3, [pc, #408]	; (8013754 <tcp_receive+0xcfc>)
 80135bc:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80135be:	687b      	ldr	r3, [r7, #4]
 80135c0:	7d1b      	ldrb	r3, [r3, #20]
 80135c2:	2b04      	cmp	r3, #4
 80135c4:	d102      	bne.n	80135cc <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 80135c6:	687b      	ldr	r3, [r7, #4]
 80135c8:	2207      	movs	r2, #7
 80135ca:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 80135cc:	68bb      	ldr	r3, [r7, #8]
 80135ce:	681a      	ldr	r2, [r3, #0]
 80135d0:	687b      	ldr	r3, [r7, #4]
 80135d2:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 80135d4:	68b8      	ldr	r0, [r7, #8]
 80135d6:	f7fd fbbe 	bl	8010d56 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 80135da:	687b      	ldr	r3, [r7, #4]
 80135dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80135de:	2b00      	cmp	r3, #0
 80135e0:	d008      	beq.n	80135f4 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80135e2:	687b      	ldr	r3, [r7, #4]
 80135e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80135e6:	691b      	ldr	r3, [r3, #16]
 80135e8:	685a      	ldr	r2, [r3, #4]
 80135ea:	687b      	ldr	r3, [r7, #4]
 80135ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 80135ee:	429a      	cmp	r2, r3
 80135f0:	f43f af43 	beq.w	801347a <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 80135f4:	687b      	ldr	r3, [r7, #4]
 80135f6:	8b5b      	ldrh	r3, [r3, #26]
 80135f8:	f003 0301 	and.w	r3, r3, #1
 80135fc:	2b00      	cmp	r3, #0
 80135fe:	d00e      	beq.n	801361e <tcp_receive+0xbc6>
 8013600:	687b      	ldr	r3, [r7, #4]
 8013602:	8b5b      	ldrh	r3, [r3, #26]
 8013604:	f023 0301 	bic.w	r3, r3, #1
 8013608:	b29a      	uxth	r2, r3
 801360a:	687b      	ldr	r3, [r7, #4]
 801360c:	835a      	strh	r2, [r3, #26]
 801360e:	687b      	ldr	r3, [r7, #4]
 8013610:	8b5b      	ldrh	r3, [r3, #26]
 8013612:	f043 0302 	orr.w	r3, r3, #2
 8013616:	b29a      	uxth	r2, r3
 8013618:	687b      	ldr	r3, [r7, #4]
 801361a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801361c:	e188      	b.n	8013930 <tcp_receive+0xed8>
        tcp_ack(pcb);
 801361e:	687b      	ldr	r3, [r7, #4]
 8013620:	8b5b      	ldrh	r3, [r3, #26]
 8013622:	f043 0301 	orr.w	r3, r3, #1
 8013626:	b29a      	uxth	r2, r3
 8013628:	687b      	ldr	r3, [r7, #4]
 801362a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801362c:	e180      	b.n	8013930 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801362e:	687b      	ldr	r3, [r7, #4]
 8013630:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013632:	2b00      	cmp	r3, #0
 8013634:	d106      	bne.n	8013644 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8013636:	4848      	ldr	r0, [pc, #288]	; (8013758 <tcp_receive+0xd00>)
 8013638:	f7fd fba6 	bl	8010d88 <tcp_seg_copy>
 801363c:	4602      	mov	r2, r0
 801363e:	687b      	ldr	r3, [r7, #4]
 8013640:	675a      	str	r2, [r3, #116]	; 0x74
 8013642:	e16d      	b.n	8013920 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8013644:	2300      	movs	r3, #0
 8013646:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8013648:	687b      	ldr	r3, [r7, #4]
 801364a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801364c:	63bb      	str	r3, [r7, #56]	; 0x38
 801364e:	e157      	b.n	8013900 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 8013650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013652:	691b      	ldr	r3, [r3, #16]
 8013654:	685a      	ldr	r2, [r3, #4]
 8013656:	4b41      	ldr	r3, [pc, #260]	; (801375c <tcp_receive+0xd04>)
 8013658:	681b      	ldr	r3, [r3, #0]
 801365a:	429a      	cmp	r2, r3
 801365c:	d11d      	bne.n	801369a <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801365e:	4b3e      	ldr	r3, [pc, #248]	; (8013758 <tcp_receive+0xd00>)
 8013660:	891a      	ldrh	r2, [r3, #8]
 8013662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013664:	891b      	ldrh	r3, [r3, #8]
 8013666:	429a      	cmp	r2, r3
 8013668:	f240 814f 	bls.w	801390a <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801366c:	483a      	ldr	r0, [pc, #232]	; (8013758 <tcp_receive+0xd00>)
 801366e:	f7fd fb8b 	bl	8010d88 <tcp_seg_copy>
 8013672:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8013674:	697b      	ldr	r3, [r7, #20]
 8013676:	2b00      	cmp	r3, #0
 8013678:	f000 8149 	beq.w	801390e <tcp_receive+0xeb6>
                  if (prev != NULL) {
 801367c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801367e:	2b00      	cmp	r3, #0
 8013680:	d003      	beq.n	801368a <tcp_receive+0xc32>
                    prev->next = cseg;
 8013682:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013684:	697a      	ldr	r2, [r7, #20]
 8013686:	601a      	str	r2, [r3, #0]
 8013688:	e002      	b.n	8013690 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 801368a:	687b      	ldr	r3, [r7, #4]
 801368c:	697a      	ldr	r2, [r7, #20]
 801368e:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8013690:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013692:	6978      	ldr	r0, [r7, #20]
 8013694:	f7ff f8dc 	bl	8012850 <tcp_oos_insert_segment>
                }
                break;
 8013698:	e139      	b.n	801390e <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 801369a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801369c:	2b00      	cmp	r3, #0
 801369e:	d117      	bne.n	80136d0 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80136a0:	4b2e      	ldr	r3, [pc, #184]	; (801375c <tcp_receive+0xd04>)
 80136a2:	681a      	ldr	r2, [r3, #0]
 80136a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80136a6:	691b      	ldr	r3, [r3, #16]
 80136a8:	685b      	ldr	r3, [r3, #4]
 80136aa:	1ad3      	subs	r3, r2, r3
 80136ac:	2b00      	cmp	r3, #0
 80136ae:	da57      	bge.n	8013760 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80136b0:	4829      	ldr	r0, [pc, #164]	; (8013758 <tcp_receive+0xd00>)
 80136b2:	f7fd fb69 	bl	8010d88 <tcp_seg_copy>
 80136b6:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 80136b8:	69bb      	ldr	r3, [r7, #24]
 80136ba:	2b00      	cmp	r3, #0
 80136bc:	f000 8129 	beq.w	8013912 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 80136c0:	687b      	ldr	r3, [r7, #4]
 80136c2:	69ba      	ldr	r2, [r7, #24]
 80136c4:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 80136c6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80136c8:	69b8      	ldr	r0, [r7, #24]
 80136ca:	f7ff f8c1 	bl	8012850 <tcp_oos_insert_segment>
                  }
                  break;
 80136ce:	e120      	b.n	8013912 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 80136d0:	4b22      	ldr	r3, [pc, #136]	; (801375c <tcp_receive+0xd04>)
 80136d2:	681a      	ldr	r2, [r3, #0]
 80136d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80136d6:	691b      	ldr	r3, [r3, #16]
 80136d8:	685b      	ldr	r3, [r3, #4]
 80136da:	1ad3      	subs	r3, r2, r3
 80136dc:	3b01      	subs	r3, #1
 80136de:	2b00      	cmp	r3, #0
 80136e0:	db3e      	blt.n	8013760 <tcp_receive+0xd08>
 80136e2:	4b1e      	ldr	r3, [pc, #120]	; (801375c <tcp_receive+0xd04>)
 80136e4:	681a      	ldr	r2, [r3, #0]
 80136e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80136e8:	691b      	ldr	r3, [r3, #16]
 80136ea:	685b      	ldr	r3, [r3, #4]
 80136ec:	1ad3      	subs	r3, r2, r3
 80136ee:	3301      	adds	r3, #1
 80136f0:	2b00      	cmp	r3, #0
 80136f2:	dc35      	bgt.n	8013760 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80136f4:	4818      	ldr	r0, [pc, #96]	; (8013758 <tcp_receive+0xd00>)
 80136f6:	f7fd fb47 	bl	8010d88 <tcp_seg_copy>
 80136fa:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 80136fc:	69fb      	ldr	r3, [r7, #28]
 80136fe:	2b00      	cmp	r3, #0
 8013700:	f000 8109 	beq.w	8013916 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8013704:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013706:	691b      	ldr	r3, [r3, #16]
 8013708:	685b      	ldr	r3, [r3, #4]
 801370a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801370c:	8912      	ldrh	r2, [r2, #8]
 801370e:	441a      	add	r2, r3
 8013710:	4b12      	ldr	r3, [pc, #72]	; (801375c <tcp_receive+0xd04>)
 8013712:	681b      	ldr	r3, [r3, #0]
 8013714:	1ad3      	subs	r3, r2, r3
 8013716:	2b00      	cmp	r3, #0
 8013718:	dd12      	ble.n	8013740 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801371a:	4b10      	ldr	r3, [pc, #64]	; (801375c <tcp_receive+0xd04>)
 801371c:	681b      	ldr	r3, [r3, #0]
 801371e:	b29a      	uxth	r2, r3
 8013720:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013722:	691b      	ldr	r3, [r3, #16]
 8013724:	685b      	ldr	r3, [r3, #4]
 8013726:	b29b      	uxth	r3, r3
 8013728:	1ad3      	subs	r3, r2, r3
 801372a:	b29a      	uxth	r2, r3
 801372c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801372e:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8013730:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013732:	685a      	ldr	r2, [r3, #4]
 8013734:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013736:	891b      	ldrh	r3, [r3, #8]
 8013738:	4619      	mov	r1, r3
 801373a:	4610      	mov	r0, r2
 801373c:	f7fb fd5e 	bl	800f1fc <pbuf_realloc>
                    }
                    prev->next = cseg;
 8013740:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013742:	69fa      	ldr	r2, [r7, #28]
 8013744:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8013746:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013748:	69f8      	ldr	r0, [r7, #28]
 801374a:	f7ff f881 	bl	8012850 <tcp_oos_insert_segment>
                  }
                  break;
 801374e:	e0e2      	b.n	8013916 <tcp_receive+0xebe>
 8013750:	20013bc0 	.word	0x20013bc0
 8013754:	20013bbd 	.word	0x20013bbd
 8013758:	20013b8c 	.word	0x20013b8c
 801375c:	20013bb0 	.word	0x20013bb0
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8013760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013762:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8013764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013766:	681b      	ldr	r3, [r3, #0]
 8013768:	2b00      	cmp	r3, #0
 801376a:	f040 80c6 	bne.w	80138fa <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801376e:	4b80      	ldr	r3, [pc, #512]	; (8013970 <tcp_receive+0xf18>)
 8013770:	681a      	ldr	r2, [r3, #0]
 8013772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013774:	691b      	ldr	r3, [r3, #16]
 8013776:	685b      	ldr	r3, [r3, #4]
 8013778:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801377a:	2b00      	cmp	r3, #0
 801377c:	f340 80bd 	ble.w	80138fa <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8013780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013782:	691b      	ldr	r3, [r3, #16]
 8013784:	899b      	ldrh	r3, [r3, #12]
 8013786:	b29b      	uxth	r3, r3
 8013788:	4618      	mov	r0, r3
 801378a:	f7fa f99b 	bl	800dac4 <lwip_htons>
 801378e:	4603      	mov	r3, r0
 8013790:	b2db      	uxtb	r3, r3
 8013792:	f003 0301 	and.w	r3, r3, #1
 8013796:	2b00      	cmp	r3, #0
 8013798:	f040 80bf 	bne.w	801391a <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 801379c:	4875      	ldr	r0, [pc, #468]	; (8013974 <tcp_receive+0xf1c>)
 801379e:	f7fd faf3 	bl	8010d88 <tcp_seg_copy>
 80137a2:	4602      	mov	r2, r0
 80137a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80137a6:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80137a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80137aa:	681b      	ldr	r3, [r3, #0]
 80137ac:	2b00      	cmp	r3, #0
 80137ae:	f000 80b6 	beq.w	801391e <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80137b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80137b4:	691b      	ldr	r3, [r3, #16]
 80137b6:	685b      	ldr	r3, [r3, #4]
 80137b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80137ba:	8912      	ldrh	r2, [r2, #8]
 80137bc:	441a      	add	r2, r3
 80137be:	4b6c      	ldr	r3, [pc, #432]	; (8013970 <tcp_receive+0xf18>)
 80137c0:	681b      	ldr	r3, [r3, #0]
 80137c2:	1ad3      	subs	r3, r2, r3
 80137c4:	2b00      	cmp	r3, #0
 80137c6:	dd12      	ble.n	80137ee <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80137c8:	4b69      	ldr	r3, [pc, #420]	; (8013970 <tcp_receive+0xf18>)
 80137ca:	681b      	ldr	r3, [r3, #0]
 80137cc:	b29a      	uxth	r2, r3
 80137ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80137d0:	691b      	ldr	r3, [r3, #16]
 80137d2:	685b      	ldr	r3, [r3, #4]
 80137d4:	b29b      	uxth	r3, r3
 80137d6:	1ad3      	subs	r3, r2, r3
 80137d8:	b29a      	uxth	r2, r3
 80137da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80137dc:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 80137de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80137e0:	685a      	ldr	r2, [r3, #4]
 80137e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80137e4:	891b      	ldrh	r3, [r3, #8]
 80137e6:	4619      	mov	r1, r3
 80137e8:	4610      	mov	r0, r2
 80137ea:	f7fb fd07 	bl	800f1fc <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80137ee:	4b62      	ldr	r3, [pc, #392]	; (8013978 <tcp_receive+0xf20>)
 80137f0:	881b      	ldrh	r3, [r3, #0]
 80137f2:	461a      	mov	r2, r3
 80137f4:	4b5e      	ldr	r3, [pc, #376]	; (8013970 <tcp_receive+0xf18>)
 80137f6:	681b      	ldr	r3, [r3, #0]
 80137f8:	441a      	add	r2, r3
 80137fa:	687b      	ldr	r3, [r7, #4]
 80137fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80137fe:	6879      	ldr	r1, [r7, #4]
 8013800:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8013802:	440b      	add	r3, r1
 8013804:	1ad3      	subs	r3, r2, r3
 8013806:	2b00      	cmp	r3, #0
 8013808:	f340 8089 	ble.w	801391e <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 801380c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801380e:	681b      	ldr	r3, [r3, #0]
 8013810:	691b      	ldr	r3, [r3, #16]
 8013812:	899b      	ldrh	r3, [r3, #12]
 8013814:	b29b      	uxth	r3, r3
 8013816:	4618      	mov	r0, r3
 8013818:	f7fa f954 	bl	800dac4 <lwip_htons>
 801381c:	4603      	mov	r3, r0
 801381e:	b2db      	uxtb	r3, r3
 8013820:	f003 0301 	and.w	r3, r3, #1
 8013824:	2b00      	cmp	r3, #0
 8013826:	d022      	beq.n	801386e <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8013828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801382a:	681b      	ldr	r3, [r3, #0]
 801382c:	691b      	ldr	r3, [r3, #16]
 801382e:	899b      	ldrh	r3, [r3, #12]
 8013830:	b29b      	uxth	r3, r3
 8013832:	b21b      	sxth	r3, r3
 8013834:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8013838:	b21c      	sxth	r4, r3
 801383a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801383c:	681b      	ldr	r3, [r3, #0]
 801383e:	691b      	ldr	r3, [r3, #16]
 8013840:	899b      	ldrh	r3, [r3, #12]
 8013842:	b29b      	uxth	r3, r3
 8013844:	4618      	mov	r0, r3
 8013846:	f7fa f93d 	bl	800dac4 <lwip_htons>
 801384a:	4603      	mov	r3, r0
 801384c:	b2db      	uxtb	r3, r3
 801384e:	b29b      	uxth	r3, r3
 8013850:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8013854:	b29b      	uxth	r3, r3
 8013856:	4618      	mov	r0, r3
 8013858:	f7fa f934 	bl	800dac4 <lwip_htons>
 801385c:	4603      	mov	r3, r0
 801385e:	b21b      	sxth	r3, r3
 8013860:	4323      	orrs	r3, r4
 8013862:	b21a      	sxth	r2, r3
 8013864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013866:	681b      	ldr	r3, [r3, #0]
 8013868:	691b      	ldr	r3, [r3, #16]
 801386a:	b292      	uxth	r2, r2
 801386c:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801386e:	687b      	ldr	r3, [r7, #4]
 8013870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013872:	b29a      	uxth	r2, r3
 8013874:	687b      	ldr	r3, [r7, #4]
 8013876:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013878:	4413      	add	r3, r2
 801387a:	b299      	uxth	r1, r3
 801387c:	4b3c      	ldr	r3, [pc, #240]	; (8013970 <tcp_receive+0xf18>)
 801387e:	681b      	ldr	r3, [r3, #0]
 8013880:	b29a      	uxth	r2, r3
 8013882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013884:	681b      	ldr	r3, [r3, #0]
 8013886:	1a8a      	subs	r2, r1, r2
 8013888:	b292      	uxth	r2, r2
 801388a:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 801388c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801388e:	681b      	ldr	r3, [r3, #0]
 8013890:	685a      	ldr	r2, [r3, #4]
 8013892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013894:	681b      	ldr	r3, [r3, #0]
 8013896:	891b      	ldrh	r3, [r3, #8]
 8013898:	4619      	mov	r1, r3
 801389a:	4610      	mov	r0, r2
 801389c:	f7fb fcae 	bl	800f1fc <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80138a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80138a2:	681b      	ldr	r3, [r3, #0]
 80138a4:	891c      	ldrh	r4, [r3, #8]
 80138a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80138a8:	681b      	ldr	r3, [r3, #0]
 80138aa:	691b      	ldr	r3, [r3, #16]
 80138ac:	899b      	ldrh	r3, [r3, #12]
 80138ae:	b29b      	uxth	r3, r3
 80138b0:	4618      	mov	r0, r3
 80138b2:	f7fa f907 	bl	800dac4 <lwip_htons>
 80138b6:	4603      	mov	r3, r0
 80138b8:	b2db      	uxtb	r3, r3
 80138ba:	f003 0303 	and.w	r3, r3, #3
 80138be:	2b00      	cmp	r3, #0
 80138c0:	d001      	beq.n	80138c6 <tcp_receive+0xe6e>
 80138c2:	2301      	movs	r3, #1
 80138c4:	e000      	b.n	80138c8 <tcp_receive+0xe70>
 80138c6:	2300      	movs	r3, #0
 80138c8:	4423      	add	r3, r4
 80138ca:	b29a      	uxth	r2, r3
 80138cc:	4b2a      	ldr	r3, [pc, #168]	; (8013978 <tcp_receive+0xf20>)
 80138ce:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80138d0:	4b29      	ldr	r3, [pc, #164]	; (8013978 <tcp_receive+0xf20>)
 80138d2:	881b      	ldrh	r3, [r3, #0]
 80138d4:	461a      	mov	r2, r3
 80138d6:	4b26      	ldr	r3, [pc, #152]	; (8013970 <tcp_receive+0xf18>)
 80138d8:	681b      	ldr	r3, [r3, #0]
 80138da:	441a      	add	r2, r3
 80138dc:	687b      	ldr	r3, [r7, #4]
 80138de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80138e0:	6879      	ldr	r1, [r7, #4]
 80138e2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80138e4:	440b      	add	r3, r1
 80138e6:	429a      	cmp	r2, r3
 80138e8:	d019      	beq.n	801391e <tcp_receive+0xec6>
 80138ea:	4b24      	ldr	r3, [pc, #144]	; (801397c <tcp_receive+0xf24>)
 80138ec:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 80138f0:	4923      	ldr	r1, [pc, #140]	; (8013980 <tcp_receive+0xf28>)
 80138f2:	4824      	ldr	r0, [pc, #144]	; (8013984 <tcp_receive+0xf2c>)
 80138f4:	f007 fdc4 	bl	801b480 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 80138f8:	e011      	b.n	801391e <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80138fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80138fc:	681b      	ldr	r3, [r3, #0]
 80138fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8013900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013902:	2b00      	cmp	r3, #0
 8013904:	f47f aea4 	bne.w	8013650 <tcp_receive+0xbf8>
 8013908:	e00a      	b.n	8013920 <tcp_receive+0xec8>
                break;
 801390a:	bf00      	nop
 801390c:	e008      	b.n	8013920 <tcp_receive+0xec8>
                break;
 801390e:	bf00      	nop
 8013910:	e006      	b.n	8013920 <tcp_receive+0xec8>
                  break;
 8013912:	bf00      	nop
 8013914:	e004      	b.n	8013920 <tcp_receive+0xec8>
                  break;
 8013916:	bf00      	nop
 8013918:	e002      	b.n	8013920 <tcp_receive+0xec8>
                  break;
 801391a:	bf00      	nop
 801391c:	e000      	b.n	8013920 <tcp_receive+0xec8>
                break;
 801391e:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8013920:	6878      	ldr	r0, [r7, #4]
 8013922:	f001 fa67 	bl	8014df4 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8013926:	e003      	b.n	8013930 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8013928:	6878      	ldr	r0, [r7, #4]
 801392a:	f001 fa63 	bl	8014df4 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801392e:	e01a      	b.n	8013966 <tcp_receive+0xf0e>
 8013930:	e019      	b.n	8013966 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8013932:	4b0f      	ldr	r3, [pc, #60]	; (8013970 <tcp_receive+0xf18>)
 8013934:	681a      	ldr	r2, [r3, #0]
 8013936:	687b      	ldr	r3, [r7, #4]
 8013938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801393a:	1ad3      	subs	r3, r2, r3
 801393c:	2b00      	cmp	r3, #0
 801393e:	db0a      	blt.n	8013956 <tcp_receive+0xefe>
 8013940:	4b0b      	ldr	r3, [pc, #44]	; (8013970 <tcp_receive+0xf18>)
 8013942:	681a      	ldr	r2, [r3, #0]
 8013944:	687b      	ldr	r3, [r7, #4]
 8013946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013948:	6879      	ldr	r1, [r7, #4]
 801394a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801394c:	440b      	add	r3, r1
 801394e:	1ad3      	subs	r3, r2, r3
 8013950:	3301      	adds	r3, #1
 8013952:	2b00      	cmp	r3, #0
 8013954:	dd07      	ble.n	8013966 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 8013956:	687b      	ldr	r3, [r7, #4]
 8013958:	8b5b      	ldrh	r3, [r3, #26]
 801395a:	f043 0302 	orr.w	r3, r3, #2
 801395e:	b29a      	uxth	r2, r3
 8013960:	687b      	ldr	r3, [r7, #4]
 8013962:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8013964:	e7ff      	b.n	8013966 <tcp_receive+0xf0e>
 8013966:	bf00      	nop
 8013968:	3750      	adds	r7, #80	; 0x50
 801396a:	46bd      	mov	sp, r7
 801396c:	bdb0      	pop	{r4, r5, r7, pc}
 801396e:	bf00      	nop
 8013970:	20013bb0 	.word	0x20013bb0
 8013974:	20013b8c 	.word	0x20013b8c
 8013978:	20013bba 	.word	0x20013bba
 801397c:	0801f574 	.word	0x0801f574
 8013980:	0801f91c 	.word	0x0801f91c
 8013984:	0801f5c0 	.word	0x0801f5c0

08013988 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8013988:	b480      	push	{r7}
 801398a:	b083      	sub	sp, #12
 801398c:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 801398e:	4b15      	ldr	r3, [pc, #84]	; (80139e4 <tcp_get_next_optbyte+0x5c>)
 8013990:	881b      	ldrh	r3, [r3, #0]
 8013992:	1c5a      	adds	r2, r3, #1
 8013994:	b291      	uxth	r1, r2
 8013996:	4a13      	ldr	r2, [pc, #76]	; (80139e4 <tcp_get_next_optbyte+0x5c>)
 8013998:	8011      	strh	r1, [r2, #0]
 801399a:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801399c:	4b12      	ldr	r3, [pc, #72]	; (80139e8 <tcp_get_next_optbyte+0x60>)
 801399e:	681b      	ldr	r3, [r3, #0]
 80139a0:	2b00      	cmp	r3, #0
 80139a2:	d004      	beq.n	80139ae <tcp_get_next_optbyte+0x26>
 80139a4:	4b11      	ldr	r3, [pc, #68]	; (80139ec <tcp_get_next_optbyte+0x64>)
 80139a6:	881b      	ldrh	r3, [r3, #0]
 80139a8:	88fa      	ldrh	r2, [r7, #6]
 80139aa:	429a      	cmp	r2, r3
 80139ac:	d208      	bcs.n	80139c0 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 80139ae:	4b10      	ldr	r3, [pc, #64]	; (80139f0 <tcp_get_next_optbyte+0x68>)
 80139b0:	681b      	ldr	r3, [r3, #0]
 80139b2:	3314      	adds	r3, #20
 80139b4:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 80139b6:	88fb      	ldrh	r3, [r7, #6]
 80139b8:	683a      	ldr	r2, [r7, #0]
 80139ba:	4413      	add	r3, r2
 80139bc:	781b      	ldrb	r3, [r3, #0]
 80139be:	e00b      	b.n	80139d8 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 80139c0:	88fb      	ldrh	r3, [r7, #6]
 80139c2:	b2da      	uxtb	r2, r3
 80139c4:	4b09      	ldr	r3, [pc, #36]	; (80139ec <tcp_get_next_optbyte+0x64>)
 80139c6:	881b      	ldrh	r3, [r3, #0]
 80139c8:	b2db      	uxtb	r3, r3
 80139ca:	1ad3      	subs	r3, r2, r3
 80139cc:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 80139ce:	4b06      	ldr	r3, [pc, #24]	; (80139e8 <tcp_get_next_optbyte+0x60>)
 80139d0:	681a      	ldr	r2, [r3, #0]
 80139d2:	797b      	ldrb	r3, [r7, #5]
 80139d4:	4413      	add	r3, r2
 80139d6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80139d8:	4618      	mov	r0, r3
 80139da:	370c      	adds	r7, #12
 80139dc:	46bd      	mov	sp, r7
 80139de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139e2:	4770      	bx	lr
 80139e4:	20013bac 	.word	0x20013bac
 80139e8:	20013ba8 	.word	0x20013ba8
 80139ec:	20013ba6 	.word	0x20013ba6
 80139f0:	20013ba0 	.word	0x20013ba0

080139f4 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 80139f4:	b580      	push	{r7, lr}
 80139f6:	b084      	sub	sp, #16
 80139f8:	af00      	add	r7, sp, #0
 80139fa:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 80139fc:	687b      	ldr	r3, [r7, #4]
 80139fe:	2b00      	cmp	r3, #0
 8013a00:	d106      	bne.n	8013a10 <tcp_parseopt+0x1c>
 8013a02:	4b32      	ldr	r3, [pc, #200]	; (8013acc <tcp_parseopt+0xd8>)
 8013a04:	f240 727d 	movw	r2, #1917	; 0x77d
 8013a08:	4931      	ldr	r1, [pc, #196]	; (8013ad0 <tcp_parseopt+0xdc>)
 8013a0a:	4832      	ldr	r0, [pc, #200]	; (8013ad4 <tcp_parseopt+0xe0>)
 8013a0c:	f007 fd38 	bl	801b480 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8013a10:	4b31      	ldr	r3, [pc, #196]	; (8013ad8 <tcp_parseopt+0xe4>)
 8013a12:	881b      	ldrh	r3, [r3, #0]
 8013a14:	2b00      	cmp	r3, #0
 8013a16:	d056      	beq.n	8013ac6 <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8013a18:	4b30      	ldr	r3, [pc, #192]	; (8013adc <tcp_parseopt+0xe8>)
 8013a1a:	2200      	movs	r2, #0
 8013a1c:	801a      	strh	r2, [r3, #0]
 8013a1e:	e046      	b.n	8013aae <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 8013a20:	f7ff ffb2 	bl	8013988 <tcp_get_next_optbyte>
 8013a24:	4603      	mov	r3, r0
 8013a26:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8013a28:	7bfb      	ldrb	r3, [r7, #15]
 8013a2a:	2b02      	cmp	r3, #2
 8013a2c:	d006      	beq.n	8013a3c <tcp_parseopt+0x48>
 8013a2e:	2b02      	cmp	r3, #2
 8013a30:	dc2c      	bgt.n	8013a8c <tcp_parseopt+0x98>
 8013a32:	2b00      	cmp	r3, #0
 8013a34:	d042      	beq.n	8013abc <tcp_parseopt+0xc8>
 8013a36:	2b01      	cmp	r3, #1
 8013a38:	d128      	bne.n	8013a8c <tcp_parseopt+0x98>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8013a3a:	e038      	b.n	8013aae <tcp_parseopt+0xba>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8013a3c:	f7ff ffa4 	bl	8013988 <tcp_get_next_optbyte>
 8013a40:	4603      	mov	r3, r0
 8013a42:	2b04      	cmp	r3, #4
 8013a44:	d13c      	bne.n	8013ac0 <tcp_parseopt+0xcc>
 8013a46:	4b25      	ldr	r3, [pc, #148]	; (8013adc <tcp_parseopt+0xe8>)
 8013a48:	881b      	ldrh	r3, [r3, #0]
 8013a4a:	3301      	adds	r3, #1
 8013a4c:	4a22      	ldr	r2, [pc, #136]	; (8013ad8 <tcp_parseopt+0xe4>)
 8013a4e:	8812      	ldrh	r2, [r2, #0]
 8013a50:	4293      	cmp	r3, r2
 8013a52:	da35      	bge.n	8013ac0 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8013a54:	f7ff ff98 	bl	8013988 <tcp_get_next_optbyte>
 8013a58:	4603      	mov	r3, r0
 8013a5a:	b29b      	uxth	r3, r3
 8013a5c:	021b      	lsls	r3, r3, #8
 8013a5e:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8013a60:	f7ff ff92 	bl	8013988 <tcp_get_next_optbyte>
 8013a64:	4603      	mov	r3, r0
 8013a66:	b29a      	uxth	r2, r3
 8013a68:	89bb      	ldrh	r3, [r7, #12]
 8013a6a:	4313      	orrs	r3, r2
 8013a6c:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8013a6e:	89bb      	ldrh	r3, [r7, #12]
 8013a70:	f240 52b4 	movw	r2, #1460	; 0x5b4
 8013a74:	4293      	cmp	r3, r2
 8013a76:	d804      	bhi.n	8013a82 <tcp_parseopt+0x8e>
 8013a78:	89bb      	ldrh	r3, [r7, #12]
 8013a7a:	2b00      	cmp	r3, #0
 8013a7c:	d001      	beq.n	8013a82 <tcp_parseopt+0x8e>
 8013a7e:	89ba      	ldrh	r2, [r7, #12]
 8013a80:	e001      	b.n	8013a86 <tcp_parseopt+0x92>
 8013a82:	f240 52b4 	movw	r2, #1460	; 0x5b4
 8013a86:	687b      	ldr	r3, [r7, #4]
 8013a88:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8013a8a:	e010      	b.n	8013aae <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8013a8c:	f7ff ff7c 	bl	8013988 <tcp_get_next_optbyte>
 8013a90:	4603      	mov	r3, r0
 8013a92:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8013a94:	7afb      	ldrb	r3, [r7, #11]
 8013a96:	2b01      	cmp	r3, #1
 8013a98:	d914      	bls.n	8013ac4 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8013a9a:	7afb      	ldrb	r3, [r7, #11]
 8013a9c:	b29a      	uxth	r2, r3
 8013a9e:	4b0f      	ldr	r3, [pc, #60]	; (8013adc <tcp_parseopt+0xe8>)
 8013aa0:	881b      	ldrh	r3, [r3, #0]
 8013aa2:	4413      	add	r3, r2
 8013aa4:	b29b      	uxth	r3, r3
 8013aa6:	3b02      	subs	r3, #2
 8013aa8:	b29a      	uxth	r2, r3
 8013aaa:	4b0c      	ldr	r3, [pc, #48]	; (8013adc <tcp_parseopt+0xe8>)
 8013aac:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8013aae:	4b0b      	ldr	r3, [pc, #44]	; (8013adc <tcp_parseopt+0xe8>)
 8013ab0:	881a      	ldrh	r2, [r3, #0]
 8013ab2:	4b09      	ldr	r3, [pc, #36]	; (8013ad8 <tcp_parseopt+0xe4>)
 8013ab4:	881b      	ldrh	r3, [r3, #0]
 8013ab6:	429a      	cmp	r2, r3
 8013ab8:	d3b2      	bcc.n	8013a20 <tcp_parseopt+0x2c>
 8013aba:	e004      	b.n	8013ac6 <tcp_parseopt+0xd2>
          return;
 8013abc:	bf00      	nop
 8013abe:	e002      	b.n	8013ac6 <tcp_parseopt+0xd2>
            return;
 8013ac0:	bf00      	nop
 8013ac2:	e000      	b.n	8013ac6 <tcp_parseopt+0xd2>
            return;
 8013ac4:	bf00      	nop
      }
    }
  }
}
 8013ac6:	3710      	adds	r7, #16
 8013ac8:	46bd      	mov	sp, r7
 8013aca:	bd80      	pop	{r7, pc}
 8013acc:	0801f574 	.word	0x0801f574
 8013ad0:	0801f9d8 	.word	0x0801f9d8
 8013ad4:	0801f5c0 	.word	0x0801f5c0
 8013ad8:	20013ba4 	.word	0x20013ba4
 8013adc:	20013bac 	.word	0x20013bac

08013ae0 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8013ae0:	b480      	push	{r7}
 8013ae2:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8013ae4:	4b05      	ldr	r3, [pc, #20]	; (8013afc <tcp_trigger_input_pcb_close+0x1c>)
 8013ae6:	781b      	ldrb	r3, [r3, #0]
 8013ae8:	f043 0310 	orr.w	r3, r3, #16
 8013aec:	b2da      	uxtb	r2, r3
 8013aee:	4b03      	ldr	r3, [pc, #12]	; (8013afc <tcp_trigger_input_pcb_close+0x1c>)
 8013af0:	701a      	strb	r2, [r3, #0]
}
 8013af2:	bf00      	nop
 8013af4:	46bd      	mov	sp, r7
 8013af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013afa:	4770      	bx	lr
 8013afc:	20013bbd 	.word	0x20013bbd

08013b00 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8013b00:	b580      	push	{r7, lr}
 8013b02:	b084      	sub	sp, #16
 8013b04:	af00      	add	r7, sp, #0
 8013b06:	60f8      	str	r0, [r7, #12]
 8013b08:	60b9      	str	r1, [r7, #8]
 8013b0a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8013b0c:	68fb      	ldr	r3, [r7, #12]
 8013b0e:	2b00      	cmp	r3, #0
 8013b10:	d00a      	beq.n	8013b28 <tcp_route+0x28>
 8013b12:	68fb      	ldr	r3, [r7, #12]
 8013b14:	7a1b      	ldrb	r3, [r3, #8]
 8013b16:	2b00      	cmp	r3, #0
 8013b18:	d006      	beq.n	8013b28 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8013b1a:	68fb      	ldr	r3, [r7, #12]
 8013b1c:	7a1b      	ldrb	r3, [r3, #8]
 8013b1e:	4618      	mov	r0, r3
 8013b20:	f7fb f960 	bl	800ede4 <netif_get_by_index>
 8013b24:	4603      	mov	r3, r0
 8013b26:	e003      	b.n	8013b30 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8013b28:	6878      	ldr	r0, [r7, #4]
 8013b2a:	f005 fa1d 	bl	8018f68 <ip4_route>
 8013b2e:	4603      	mov	r3, r0
  }
}
 8013b30:	4618      	mov	r0, r3
 8013b32:	3710      	adds	r7, #16
 8013b34:	46bd      	mov	sp, r7
 8013b36:	bd80      	pop	{r7, pc}

08013b38 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8013b38:	b590      	push	{r4, r7, lr}
 8013b3a:	b087      	sub	sp, #28
 8013b3c:	af00      	add	r7, sp, #0
 8013b3e:	60f8      	str	r0, [r7, #12]
 8013b40:	60b9      	str	r1, [r7, #8]
 8013b42:	603b      	str	r3, [r7, #0]
 8013b44:	4613      	mov	r3, r2
 8013b46:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8013b48:	68fb      	ldr	r3, [r7, #12]
 8013b4a:	2b00      	cmp	r3, #0
 8013b4c:	d105      	bne.n	8013b5a <tcp_create_segment+0x22>
 8013b4e:	4b45      	ldr	r3, [pc, #276]	; (8013c64 <tcp_create_segment+0x12c>)
 8013b50:	22a3      	movs	r2, #163	; 0xa3
 8013b52:	4945      	ldr	r1, [pc, #276]	; (8013c68 <tcp_create_segment+0x130>)
 8013b54:	4845      	ldr	r0, [pc, #276]	; (8013c6c <tcp_create_segment+0x134>)
 8013b56:	f007 fc93 	bl	801b480 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8013b5a:	68bb      	ldr	r3, [r7, #8]
 8013b5c:	2b00      	cmp	r3, #0
 8013b5e:	d105      	bne.n	8013b6c <tcp_create_segment+0x34>
 8013b60:	4b40      	ldr	r3, [pc, #256]	; (8013c64 <tcp_create_segment+0x12c>)
 8013b62:	22a4      	movs	r2, #164	; 0xa4
 8013b64:	4942      	ldr	r1, [pc, #264]	; (8013c70 <tcp_create_segment+0x138>)
 8013b66:	4841      	ldr	r0, [pc, #260]	; (8013c6c <tcp_create_segment+0x134>)
 8013b68:	f007 fc8a 	bl	801b480 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8013b6c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8013b70:	009b      	lsls	r3, r3, #2
 8013b72:	b2db      	uxtb	r3, r3
 8013b74:	f003 0304 	and.w	r3, r3, #4
 8013b78:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8013b7a:	2003      	movs	r0, #3
 8013b7c:	f7fa fdd0 	bl	800e720 <memp_malloc>
 8013b80:	6138      	str	r0, [r7, #16]
 8013b82:	693b      	ldr	r3, [r7, #16]
 8013b84:	2b00      	cmp	r3, #0
 8013b86:	d104      	bne.n	8013b92 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8013b88:	68b8      	ldr	r0, [r7, #8]
 8013b8a:	f7fb fcbd 	bl	800f508 <pbuf_free>
    return NULL;
 8013b8e:	2300      	movs	r3, #0
 8013b90:	e064      	b.n	8013c5c <tcp_create_segment+0x124>
  }
  seg->flags = optflags;
 8013b92:	693b      	ldr	r3, [r7, #16]
 8013b94:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8013b98:	731a      	strb	r2, [r3, #12]
  seg->next = NULL;
 8013b9a:	693b      	ldr	r3, [r7, #16]
 8013b9c:	2200      	movs	r2, #0
 8013b9e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8013ba0:	693b      	ldr	r3, [r7, #16]
 8013ba2:	68ba      	ldr	r2, [r7, #8]
 8013ba4:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8013ba6:	68bb      	ldr	r3, [r7, #8]
 8013ba8:	891a      	ldrh	r2, [r3, #8]
 8013baa:	7dfb      	ldrb	r3, [r7, #23]
 8013bac:	b29b      	uxth	r3, r3
 8013bae:	429a      	cmp	r2, r3
 8013bb0:	d205      	bcs.n	8013bbe <tcp_create_segment+0x86>
 8013bb2:	4b2c      	ldr	r3, [pc, #176]	; (8013c64 <tcp_create_segment+0x12c>)
 8013bb4:	22b0      	movs	r2, #176	; 0xb0
 8013bb6:	492f      	ldr	r1, [pc, #188]	; (8013c74 <tcp_create_segment+0x13c>)
 8013bb8:	482c      	ldr	r0, [pc, #176]	; (8013c6c <tcp_create_segment+0x134>)
 8013bba:	f007 fc61 	bl	801b480 <iprintf>
  seg->len = p->tot_len - optlen;
 8013bbe:	68bb      	ldr	r3, [r7, #8]
 8013bc0:	891a      	ldrh	r2, [r3, #8]
 8013bc2:	7dfb      	ldrb	r3, [r7, #23]
 8013bc4:	b29b      	uxth	r3, r3
 8013bc6:	1ad3      	subs	r3, r2, r3
 8013bc8:	b29a      	uxth	r2, r3
 8013bca:	693b      	ldr	r3, [r7, #16]
 8013bcc:	811a      	strh	r2, [r3, #8]
#if TCP_OVERSIZE_DBGCHECK
  seg->oversize_left = 0;
 8013bce:	693b      	ldr	r3, [r7, #16]
 8013bd0:	2200      	movs	r2, #0
 8013bd2:	815a      	strh	r2, [r3, #10]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8013bd4:	2114      	movs	r1, #20
 8013bd6:	68b8      	ldr	r0, [r7, #8]
 8013bd8:	f7fb fc00 	bl	800f3dc <pbuf_add_header>
 8013bdc:	4603      	mov	r3, r0
 8013bde:	2b00      	cmp	r3, #0
 8013be0:	d004      	beq.n	8013bec <tcp_create_segment+0xb4>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8013be2:	6938      	ldr	r0, [r7, #16]
 8013be4:	f7fd f8b7 	bl	8010d56 <tcp_seg_free>
    return NULL;
 8013be8:	2300      	movs	r3, #0
 8013bea:	e037      	b.n	8013c5c <tcp_create_segment+0x124>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8013bec:	693b      	ldr	r3, [r7, #16]
 8013bee:	685b      	ldr	r3, [r3, #4]
 8013bf0:	685a      	ldr	r2, [r3, #4]
 8013bf2:	693b      	ldr	r3, [r7, #16]
 8013bf4:	611a      	str	r2, [r3, #16]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8013bf6:	68fb      	ldr	r3, [r7, #12]
 8013bf8:	8ada      	ldrh	r2, [r3, #22]
 8013bfa:	693b      	ldr	r3, [r7, #16]
 8013bfc:	691c      	ldr	r4, [r3, #16]
 8013bfe:	4610      	mov	r0, r2
 8013c00:	f7f9 ff60 	bl	800dac4 <lwip_htons>
 8013c04:	4603      	mov	r3, r0
 8013c06:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8013c08:	68fb      	ldr	r3, [r7, #12]
 8013c0a:	8b1a      	ldrh	r2, [r3, #24]
 8013c0c:	693b      	ldr	r3, [r7, #16]
 8013c0e:	691c      	ldr	r4, [r3, #16]
 8013c10:	4610      	mov	r0, r2
 8013c12:	f7f9 ff57 	bl	800dac4 <lwip_htons>
 8013c16:	4603      	mov	r3, r0
 8013c18:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8013c1a:	693b      	ldr	r3, [r7, #16]
 8013c1c:	691c      	ldr	r4, [r3, #16]
 8013c1e:	6838      	ldr	r0, [r7, #0]
 8013c20:	f7f9 ff65 	bl	800daee <lwip_htonl>
 8013c24:	4603      	mov	r3, r0
 8013c26:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8013c28:	7dfb      	ldrb	r3, [r7, #23]
 8013c2a:	089b      	lsrs	r3, r3, #2
 8013c2c:	b2db      	uxtb	r3, r3
 8013c2e:	b29b      	uxth	r3, r3
 8013c30:	3305      	adds	r3, #5
 8013c32:	b29b      	uxth	r3, r3
 8013c34:	031b      	lsls	r3, r3, #12
 8013c36:	b29a      	uxth	r2, r3
 8013c38:	79fb      	ldrb	r3, [r7, #7]
 8013c3a:	b29b      	uxth	r3, r3
 8013c3c:	4313      	orrs	r3, r2
 8013c3e:	b29a      	uxth	r2, r3
 8013c40:	693b      	ldr	r3, [r7, #16]
 8013c42:	691c      	ldr	r4, [r3, #16]
 8013c44:	4610      	mov	r0, r2
 8013c46:	f7f9 ff3d 	bl	800dac4 <lwip_htons>
 8013c4a:	4603      	mov	r3, r0
 8013c4c:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8013c4e:	693b      	ldr	r3, [r7, #16]
 8013c50:	691b      	ldr	r3, [r3, #16]
 8013c52:	2200      	movs	r2, #0
 8013c54:	749a      	strb	r2, [r3, #18]
 8013c56:	2200      	movs	r2, #0
 8013c58:	74da      	strb	r2, [r3, #19]
  return seg;
 8013c5a:	693b      	ldr	r3, [r7, #16]
}
 8013c5c:	4618      	mov	r0, r3
 8013c5e:	371c      	adds	r7, #28
 8013c60:	46bd      	mov	sp, r7
 8013c62:	bd90      	pop	{r4, r7, pc}
 8013c64:	0801f9f4 	.word	0x0801f9f4
 8013c68:	0801fa28 	.word	0x0801fa28
 8013c6c:	0801fa48 	.word	0x0801fa48
 8013c70:	0801fa70 	.word	0x0801fa70
 8013c74:	0801fa94 	.word	0x0801fa94

08013c78 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8013c78:	b590      	push	{r4, r7, lr}
 8013c7a:	b08b      	sub	sp, #44	; 0x2c
 8013c7c:	af02      	add	r7, sp, #8
 8013c7e:	6078      	str	r0, [r7, #4]
 8013c80:	460b      	mov	r3, r1
 8013c82:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8013c84:	2300      	movs	r3, #0
 8013c86:	61bb      	str	r3, [r7, #24]
 8013c88:	2300      	movs	r3, #0
 8013c8a:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8013c8c:	2300      	movs	r3, #0
 8013c8e:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8013c90:	687b      	ldr	r3, [r7, #4]
 8013c92:	2b00      	cmp	r3, #0
 8013c94:	d106      	bne.n	8013ca4 <tcp_split_unsent_seg+0x2c>
 8013c96:	4b97      	ldr	r3, [pc, #604]	; (8013ef4 <tcp_split_unsent_seg+0x27c>)
 8013c98:	f240 324b 	movw	r2, #843	; 0x34b
 8013c9c:	4996      	ldr	r1, [pc, #600]	; (8013ef8 <tcp_split_unsent_seg+0x280>)
 8013c9e:	4897      	ldr	r0, [pc, #604]	; (8013efc <tcp_split_unsent_seg+0x284>)
 8013ca0:	f007 fbee 	bl	801b480 <iprintf>

  useg = pcb->unsent;
 8013ca4:	687b      	ldr	r3, [r7, #4]
 8013ca6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013ca8:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8013caa:	697b      	ldr	r3, [r7, #20]
 8013cac:	2b00      	cmp	r3, #0
 8013cae:	d102      	bne.n	8013cb6 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8013cb0:	f04f 33ff 	mov.w	r3, #4294967295
 8013cb4:	e119      	b.n	8013eea <tcp_split_unsent_seg+0x272>
  }

  if (split == 0) {
 8013cb6:	887b      	ldrh	r3, [r7, #2]
 8013cb8:	2b00      	cmp	r3, #0
 8013cba:	d109      	bne.n	8013cd0 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8013cbc:	4b8d      	ldr	r3, [pc, #564]	; (8013ef4 <tcp_split_unsent_seg+0x27c>)
 8013cbe:	f240 3253 	movw	r2, #851	; 0x353
 8013cc2:	498f      	ldr	r1, [pc, #572]	; (8013f00 <tcp_split_unsent_seg+0x288>)
 8013cc4:	488d      	ldr	r0, [pc, #564]	; (8013efc <tcp_split_unsent_seg+0x284>)
 8013cc6:	f007 fbdb 	bl	801b480 <iprintf>
    return ERR_VAL;
 8013cca:	f06f 0305 	mvn.w	r3, #5
 8013cce:	e10c      	b.n	8013eea <tcp_split_unsent_seg+0x272>
  }

  if (useg->len <= split) {
 8013cd0:	697b      	ldr	r3, [r7, #20]
 8013cd2:	891b      	ldrh	r3, [r3, #8]
 8013cd4:	887a      	ldrh	r2, [r7, #2]
 8013cd6:	429a      	cmp	r2, r3
 8013cd8:	d301      	bcc.n	8013cde <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8013cda:	2300      	movs	r3, #0
 8013cdc:	e105      	b.n	8013eea <tcp_split_unsent_seg+0x272>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8013cde:	687b      	ldr	r3, [r7, #4]
 8013ce0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013ce2:	887a      	ldrh	r2, [r7, #2]
 8013ce4:	429a      	cmp	r2, r3
 8013ce6:	d906      	bls.n	8013cf6 <tcp_split_unsent_seg+0x7e>
 8013ce8:	4b82      	ldr	r3, [pc, #520]	; (8013ef4 <tcp_split_unsent_seg+0x27c>)
 8013cea:	f240 325b 	movw	r2, #859	; 0x35b
 8013cee:	4985      	ldr	r1, [pc, #532]	; (8013f04 <tcp_split_unsent_seg+0x28c>)
 8013cf0:	4882      	ldr	r0, [pc, #520]	; (8013efc <tcp_split_unsent_seg+0x284>)
 8013cf2:	f007 fbc5 	bl	801b480 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8013cf6:	697b      	ldr	r3, [r7, #20]
 8013cf8:	891b      	ldrh	r3, [r3, #8]
 8013cfa:	2b00      	cmp	r3, #0
 8013cfc:	d106      	bne.n	8013d0c <tcp_split_unsent_seg+0x94>
 8013cfe:	4b7d      	ldr	r3, [pc, #500]	; (8013ef4 <tcp_split_unsent_seg+0x27c>)
 8013d00:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8013d04:	4980      	ldr	r1, [pc, #512]	; (8013f08 <tcp_split_unsent_seg+0x290>)
 8013d06:	487d      	ldr	r0, [pc, #500]	; (8013efc <tcp_split_unsent_seg+0x284>)
 8013d08:	f007 fbba 	bl	801b480 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8013d0c:	697b      	ldr	r3, [r7, #20]
 8013d0e:	7b1b      	ldrb	r3, [r3, #12]
 8013d10:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8013d12:	7bfb      	ldrb	r3, [r7, #15]
 8013d14:	009b      	lsls	r3, r3, #2
 8013d16:	b2db      	uxtb	r3, r3
 8013d18:	f003 0304 	and.w	r3, r3, #4
 8013d1c:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8013d1e:	697b      	ldr	r3, [r7, #20]
 8013d20:	891a      	ldrh	r2, [r3, #8]
 8013d22:	887b      	ldrh	r3, [r7, #2]
 8013d24:	1ad3      	subs	r3, r2, r3
 8013d26:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8013d28:	7bbb      	ldrb	r3, [r7, #14]
 8013d2a:	b29a      	uxth	r2, r3
 8013d2c:	89bb      	ldrh	r3, [r7, #12]
 8013d2e:	4413      	add	r3, r2
 8013d30:	b29b      	uxth	r3, r3
 8013d32:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013d36:	4619      	mov	r1, r3
 8013d38:	2036      	movs	r0, #54	; 0x36
 8013d3a:	f7fb f8fd 	bl	800ef38 <pbuf_alloc>
 8013d3e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013d40:	693b      	ldr	r3, [r7, #16]
 8013d42:	2b00      	cmp	r3, #0
 8013d44:	f000 80ba 	beq.w	8013ebc <tcp_split_unsent_seg+0x244>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8013d48:	697b      	ldr	r3, [r7, #20]
 8013d4a:	685b      	ldr	r3, [r3, #4]
 8013d4c:	891a      	ldrh	r2, [r3, #8]
 8013d4e:	697b      	ldr	r3, [r7, #20]
 8013d50:	891b      	ldrh	r3, [r3, #8]
 8013d52:	1ad3      	subs	r3, r2, r3
 8013d54:	b29a      	uxth	r2, r3
 8013d56:	887b      	ldrh	r3, [r7, #2]
 8013d58:	4413      	add	r3, r2
 8013d5a:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8013d5c:	697b      	ldr	r3, [r7, #20]
 8013d5e:	6858      	ldr	r0, [r3, #4]
 8013d60:	693b      	ldr	r3, [r7, #16]
 8013d62:	685a      	ldr	r2, [r3, #4]
 8013d64:	7bbb      	ldrb	r3, [r7, #14]
 8013d66:	18d1      	adds	r1, r2, r3
 8013d68:	897b      	ldrh	r3, [r7, #10]
 8013d6a:	89ba      	ldrh	r2, [r7, #12]
 8013d6c:	f7fb fdd2 	bl	800f914 <pbuf_copy_partial>
 8013d70:	4603      	mov	r3, r0
 8013d72:	461a      	mov	r2, r3
 8013d74:	89bb      	ldrh	r3, [r7, #12]
 8013d76:	4293      	cmp	r3, r2
 8013d78:	f040 80a2 	bne.w	8013ec0 <tcp_split_unsent_seg+0x248>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8013d7c:	697b      	ldr	r3, [r7, #20]
 8013d7e:	691b      	ldr	r3, [r3, #16]
 8013d80:	899b      	ldrh	r3, [r3, #12]
 8013d82:	b29b      	uxth	r3, r3
 8013d84:	4618      	mov	r0, r3
 8013d86:	f7f9 fe9d 	bl	800dac4 <lwip_htons>
 8013d8a:	4603      	mov	r3, r0
 8013d8c:	b2db      	uxtb	r3, r3
 8013d8e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013d92:	77fb      	strb	r3, [r7, #31]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8013d94:	2300      	movs	r3, #0
 8013d96:	77bb      	strb	r3, [r7, #30]

  if (split_flags & TCP_PSH) {
 8013d98:	7ffb      	ldrb	r3, [r7, #31]
 8013d9a:	f003 0308 	and.w	r3, r3, #8
 8013d9e:	2b00      	cmp	r3, #0
 8013da0:	d007      	beq.n	8013db2 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8013da2:	7ffb      	ldrb	r3, [r7, #31]
 8013da4:	f023 0308 	bic.w	r3, r3, #8
 8013da8:	77fb      	strb	r3, [r7, #31]
    remainder_flags |= TCP_PSH;
 8013daa:	7fbb      	ldrb	r3, [r7, #30]
 8013dac:	f043 0308 	orr.w	r3, r3, #8
 8013db0:	77bb      	strb	r3, [r7, #30]
  }
  if (split_flags & TCP_FIN) {
 8013db2:	7ffb      	ldrb	r3, [r7, #31]
 8013db4:	f003 0301 	and.w	r3, r3, #1
 8013db8:	2b00      	cmp	r3, #0
 8013dba:	d007      	beq.n	8013dcc <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8013dbc:	7ffb      	ldrb	r3, [r7, #31]
 8013dbe:	f023 0301 	bic.w	r3, r3, #1
 8013dc2:	77fb      	strb	r3, [r7, #31]
    remainder_flags |= TCP_FIN;
 8013dc4:	7fbb      	ldrb	r3, [r7, #30]
 8013dc6:	f043 0301 	orr.w	r3, r3, #1
 8013dca:	77bb      	strb	r3, [r7, #30]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8013dcc:	697b      	ldr	r3, [r7, #20]
 8013dce:	691b      	ldr	r3, [r3, #16]
 8013dd0:	685b      	ldr	r3, [r3, #4]
 8013dd2:	4618      	mov	r0, r3
 8013dd4:	f7f9 fe8b 	bl	800daee <lwip_htonl>
 8013dd8:	4602      	mov	r2, r0
 8013dda:	887b      	ldrh	r3, [r7, #2]
 8013ddc:	18d1      	adds	r1, r2, r3
 8013dde:	7fba      	ldrb	r2, [r7, #30]
 8013de0:	7bfb      	ldrb	r3, [r7, #15]
 8013de2:	9300      	str	r3, [sp, #0]
 8013de4:	460b      	mov	r3, r1
 8013de6:	6939      	ldr	r1, [r7, #16]
 8013de8:	6878      	ldr	r0, [r7, #4]
 8013dea:	f7ff fea5 	bl	8013b38 <tcp_create_segment>
 8013dee:	61b8      	str	r0, [r7, #24]
  if (seg == NULL) {
 8013df0:	69bb      	ldr	r3, [r7, #24]
 8013df2:	2b00      	cmp	r3, #0
 8013df4:	d066      	beq.n	8013ec4 <tcp_split_unsent_seg+0x24c>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8013df6:	697b      	ldr	r3, [r7, #20]
 8013df8:	685b      	ldr	r3, [r3, #4]
 8013dfa:	4618      	mov	r0, r3
 8013dfc:	f7fb fc12 	bl	800f624 <pbuf_clen>
 8013e00:	4603      	mov	r3, r0
 8013e02:	461a      	mov	r2, r3
 8013e04:	687b      	ldr	r3, [r7, #4]
 8013e06:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013e0a:	1a9b      	subs	r3, r3, r2
 8013e0c:	b29a      	uxth	r2, r3
 8013e0e:	687b      	ldr	r3, [r7, #4]
 8013e10:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8013e14:	697b      	ldr	r3, [r7, #20]
 8013e16:	6858      	ldr	r0, [r3, #4]
 8013e18:	697b      	ldr	r3, [r7, #20]
 8013e1a:	685b      	ldr	r3, [r3, #4]
 8013e1c:	891a      	ldrh	r2, [r3, #8]
 8013e1e:	89bb      	ldrh	r3, [r7, #12]
 8013e20:	1ad3      	subs	r3, r2, r3
 8013e22:	b29b      	uxth	r3, r3
 8013e24:	4619      	mov	r1, r3
 8013e26:	f7fb f9e9 	bl	800f1fc <pbuf_realloc>
  useg->len -= remainder;
 8013e2a:	697b      	ldr	r3, [r7, #20]
 8013e2c:	891a      	ldrh	r2, [r3, #8]
 8013e2e:	89bb      	ldrh	r3, [r7, #12]
 8013e30:	1ad3      	subs	r3, r2, r3
 8013e32:	b29a      	uxth	r2, r3
 8013e34:	697b      	ldr	r3, [r7, #20]
 8013e36:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8013e38:	697b      	ldr	r3, [r7, #20]
 8013e3a:	691b      	ldr	r3, [r3, #16]
 8013e3c:	899b      	ldrh	r3, [r3, #12]
 8013e3e:	b29c      	uxth	r4, r3
 8013e40:	7ffb      	ldrb	r3, [r7, #31]
 8013e42:	b29b      	uxth	r3, r3
 8013e44:	4618      	mov	r0, r3
 8013e46:	f7f9 fe3d 	bl	800dac4 <lwip_htons>
 8013e4a:	4603      	mov	r3, r0
 8013e4c:	461a      	mov	r2, r3
 8013e4e:	697b      	ldr	r3, [r7, #20]
 8013e50:	691b      	ldr	r3, [r3, #16]
 8013e52:	4322      	orrs	r2, r4
 8013e54:	b292      	uxth	r2, r2
 8013e56:	819a      	strh	r2, [r3, #12]
#if TCP_OVERSIZE_DBGCHECK
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
 8013e58:	697b      	ldr	r3, [r7, #20]
 8013e5a:	2200      	movs	r2, #0
 8013e5c:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8013e5e:	697b      	ldr	r3, [r7, #20]
 8013e60:	685b      	ldr	r3, [r3, #4]
 8013e62:	4618      	mov	r0, r3
 8013e64:	f7fb fbde 	bl	800f624 <pbuf_clen>
 8013e68:	4603      	mov	r3, r0
 8013e6a:	461a      	mov	r2, r3
 8013e6c:	687b      	ldr	r3, [r7, #4]
 8013e6e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013e72:	4413      	add	r3, r2
 8013e74:	b29a      	uxth	r2, r3
 8013e76:	687b      	ldr	r3, [r7, #4]
 8013e78:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8013e7c:	69bb      	ldr	r3, [r7, #24]
 8013e7e:	685b      	ldr	r3, [r3, #4]
 8013e80:	4618      	mov	r0, r3
 8013e82:	f7fb fbcf 	bl	800f624 <pbuf_clen>
 8013e86:	4603      	mov	r3, r0
 8013e88:	461a      	mov	r2, r3
 8013e8a:	687b      	ldr	r3, [r7, #4]
 8013e8c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013e90:	4413      	add	r3, r2
 8013e92:	b29a      	uxth	r2, r3
 8013e94:	687b      	ldr	r3, [r7, #4]
 8013e96:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8013e9a:	697b      	ldr	r3, [r7, #20]
 8013e9c:	681a      	ldr	r2, [r3, #0]
 8013e9e:	69bb      	ldr	r3, [r7, #24]
 8013ea0:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8013ea2:	697b      	ldr	r3, [r7, #20]
 8013ea4:	69ba      	ldr	r2, [r7, #24]
 8013ea6:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8013ea8:	69bb      	ldr	r3, [r7, #24]
 8013eaa:	681b      	ldr	r3, [r3, #0]
 8013eac:	2b00      	cmp	r3, #0
 8013eae:	d103      	bne.n	8013eb8 <tcp_split_unsent_seg+0x240>
    pcb->unsent_oversize = 0;
 8013eb0:	687b      	ldr	r3, [r7, #4]
 8013eb2:	2200      	movs	r2, #0
 8013eb4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8013eb8:	2300      	movs	r3, #0
 8013eba:	e016      	b.n	8013eea <tcp_split_unsent_seg+0x272>
    goto memerr;
 8013ebc:	bf00      	nop
 8013ebe:	e002      	b.n	8013ec6 <tcp_split_unsent_seg+0x24e>
    goto memerr;
 8013ec0:	bf00      	nop
 8013ec2:	e000      	b.n	8013ec6 <tcp_split_unsent_seg+0x24e>
    goto memerr;
 8013ec4:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8013ec6:	69bb      	ldr	r3, [r7, #24]
 8013ec8:	2b00      	cmp	r3, #0
 8013eca:	d006      	beq.n	8013eda <tcp_split_unsent_seg+0x262>
 8013ecc:	4b09      	ldr	r3, [pc, #36]	; (8013ef4 <tcp_split_unsent_seg+0x27c>)
 8013ece:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8013ed2:	490e      	ldr	r1, [pc, #56]	; (8013f0c <tcp_split_unsent_seg+0x294>)
 8013ed4:	4809      	ldr	r0, [pc, #36]	; (8013efc <tcp_split_unsent_seg+0x284>)
 8013ed6:	f007 fad3 	bl	801b480 <iprintf>
  if (p != NULL) {
 8013eda:	693b      	ldr	r3, [r7, #16]
 8013edc:	2b00      	cmp	r3, #0
 8013ede:	d002      	beq.n	8013ee6 <tcp_split_unsent_seg+0x26e>
    pbuf_free(p);
 8013ee0:	6938      	ldr	r0, [r7, #16]
 8013ee2:	f7fb fb11 	bl	800f508 <pbuf_free>
  }

  return ERR_MEM;
 8013ee6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013eea:	4618      	mov	r0, r3
 8013eec:	3724      	adds	r7, #36	; 0x24
 8013eee:	46bd      	mov	sp, r7
 8013ef0:	bd90      	pop	{r4, r7, pc}
 8013ef2:	bf00      	nop
 8013ef4:	0801f9f4 	.word	0x0801f9f4
 8013ef8:	0801fde4 	.word	0x0801fde4
 8013efc:	0801fa48 	.word	0x0801fa48
 8013f00:	0801fe08 	.word	0x0801fe08
 8013f04:	0801fe2c 	.word	0x0801fe2c
 8013f08:	0801fe3c 	.word	0x0801fe3c
 8013f0c:	0801fe4c 	.word	0x0801fe4c

08013f10 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8013f10:	b590      	push	{r4, r7, lr}
 8013f12:	b085      	sub	sp, #20
 8013f14:	af00      	add	r7, sp, #0
 8013f16:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8013f18:	687b      	ldr	r3, [r7, #4]
 8013f1a:	2b00      	cmp	r3, #0
 8013f1c:	d106      	bne.n	8013f2c <tcp_send_fin+0x1c>
 8013f1e:	4b21      	ldr	r3, [pc, #132]	; (8013fa4 <tcp_send_fin+0x94>)
 8013f20:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8013f24:	4920      	ldr	r1, [pc, #128]	; (8013fa8 <tcp_send_fin+0x98>)
 8013f26:	4821      	ldr	r0, [pc, #132]	; (8013fac <tcp_send_fin+0x9c>)
 8013f28:	f007 faaa 	bl	801b480 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8013f2c:	687b      	ldr	r3, [r7, #4]
 8013f2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013f30:	2b00      	cmp	r3, #0
 8013f32:	d02e      	beq.n	8013f92 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8013f34:	687b      	ldr	r3, [r7, #4]
 8013f36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013f38:	60fb      	str	r3, [r7, #12]
 8013f3a:	e002      	b.n	8013f42 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8013f3c:	68fb      	ldr	r3, [r7, #12]
 8013f3e:	681b      	ldr	r3, [r3, #0]
 8013f40:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8013f42:	68fb      	ldr	r3, [r7, #12]
 8013f44:	681b      	ldr	r3, [r3, #0]
 8013f46:	2b00      	cmp	r3, #0
 8013f48:	d1f8      	bne.n	8013f3c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8013f4a:	68fb      	ldr	r3, [r7, #12]
 8013f4c:	691b      	ldr	r3, [r3, #16]
 8013f4e:	899b      	ldrh	r3, [r3, #12]
 8013f50:	b29b      	uxth	r3, r3
 8013f52:	4618      	mov	r0, r3
 8013f54:	f7f9 fdb6 	bl	800dac4 <lwip_htons>
 8013f58:	4603      	mov	r3, r0
 8013f5a:	b2db      	uxtb	r3, r3
 8013f5c:	f003 0307 	and.w	r3, r3, #7
 8013f60:	2b00      	cmp	r3, #0
 8013f62:	d116      	bne.n	8013f92 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8013f64:	68fb      	ldr	r3, [r7, #12]
 8013f66:	691b      	ldr	r3, [r3, #16]
 8013f68:	899b      	ldrh	r3, [r3, #12]
 8013f6a:	b29c      	uxth	r4, r3
 8013f6c:	2001      	movs	r0, #1
 8013f6e:	f7f9 fda9 	bl	800dac4 <lwip_htons>
 8013f72:	4603      	mov	r3, r0
 8013f74:	461a      	mov	r2, r3
 8013f76:	68fb      	ldr	r3, [r7, #12]
 8013f78:	691b      	ldr	r3, [r3, #16]
 8013f7a:	4322      	orrs	r2, r4
 8013f7c:	b292      	uxth	r2, r2
 8013f7e:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8013f80:	687b      	ldr	r3, [r7, #4]
 8013f82:	8b5b      	ldrh	r3, [r3, #26]
 8013f84:	f043 0320 	orr.w	r3, r3, #32
 8013f88:	b29a      	uxth	r2, r3
 8013f8a:	687b      	ldr	r3, [r7, #4]
 8013f8c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8013f8e:	2300      	movs	r3, #0
 8013f90:	e004      	b.n	8013f9c <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8013f92:	2101      	movs	r1, #1
 8013f94:	6878      	ldr	r0, [r7, #4]
 8013f96:	f000 f80b 	bl	8013fb0 <tcp_enqueue_flags>
 8013f9a:	4603      	mov	r3, r0
}
 8013f9c:	4618      	mov	r0, r3
 8013f9e:	3714      	adds	r7, #20
 8013fa0:	46bd      	mov	sp, r7
 8013fa2:	bd90      	pop	{r4, r7, pc}
 8013fa4:	0801f9f4 	.word	0x0801f9f4
 8013fa8:	0801fe58 	.word	0x0801fe58
 8013fac:	0801fa48 	.word	0x0801fa48

08013fb0 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8013fb0:	b580      	push	{r7, lr}
 8013fb2:	b088      	sub	sp, #32
 8013fb4:	af02      	add	r7, sp, #8
 8013fb6:	6078      	str	r0, [r7, #4]
 8013fb8:	460b      	mov	r3, r1
 8013fba:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8013fbc:	2300      	movs	r3, #0
 8013fbe:	75fb      	strb	r3, [r7, #23]
  u8_t optlen = 0;
 8013fc0:	2300      	movs	r3, #0
 8013fc2:	75bb      	strb	r3, [r7, #22]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8013fc4:	78fb      	ldrb	r3, [r7, #3]
 8013fc6:	f003 0303 	and.w	r3, r3, #3
 8013fca:	2b00      	cmp	r3, #0
 8013fcc:	d106      	bne.n	8013fdc <tcp_enqueue_flags+0x2c>
 8013fce:	4b67      	ldr	r3, [pc, #412]	; (801416c <tcp_enqueue_flags+0x1bc>)
 8013fd0:	f240 4211 	movw	r2, #1041	; 0x411
 8013fd4:	4966      	ldr	r1, [pc, #408]	; (8014170 <tcp_enqueue_flags+0x1c0>)
 8013fd6:	4867      	ldr	r0, [pc, #412]	; (8014174 <tcp_enqueue_flags+0x1c4>)
 8013fd8:	f007 fa52 	bl	801b480 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8013fdc:	687b      	ldr	r3, [r7, #4]
 8013fde:	2b00      	cmp	r3, #0
 8013fe0:	d106      	bne.n	8013ff0 <tcp_enqueue_flags+0x40>
 8013fe2:	4b62      	ldr	r3, [pc, #392]	; (801416c <tcp_enqueue_flags+0x1bc>)
 8013fe4:	f240 4213 	movw	r2, #1043	; 0x413
 8013fe8:	4963      	ldr	r1, [pc, #396]	; (8014178 <tcp_enqueue_flags+0x1c8>)
 8013fea:	4862      	ldr	r0, [pc, #392]	; (8014174 <tcp_enqueue_flags+0x1c4>)
 8013fec:	f007 fa48 	bl	801b480 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8013ff0:	78fb      	ldrb	r3, [r7, #3]
 8013ff2:	f003 0302 	and.w	r3, r3, #2
 8013ff6:	2b00      	cmp	r3, #0
 8013ff8:	d001      	beq.n	8013ffe <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8013ffa:	2301      	movs	r3, #1
 8013ffc:	75fb      	strb	r3, [r7, #23]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8013ffe:	7dfb      	ldrb	r3, [r7, #23]
 8014000:	009b      	lsls	r3, r3, #2
 8014002:	b2db      	uxtb	r3, r3
 8014004:	f003 0304 	and.w	r3, r3, #4
 8014008:	75bb      	strb	r3, [r7, #22]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801400a:	7dbb      	ldrb	r3, [r7, #22]
 801400c:	b29b      	uxth	r3, r3
 801400e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014012:	4619      	mov	r1, r3
 8014014:	2036      	movs	r0, #54	; 0x36
 8014016:	f7fa ff8f 	bl	800ef38 <pbuf_alloc>
 801401a:	60f8      	str	r0, [r7, #12]
 801401c:	68fb      	ldr	r3, [r7, #12]
 801401e:	2b00      	cmp	r3, #0
 8014020:	d109      	bne.n	8014036 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8014022:	687b      	ldr	r3, [r7, #4]
 8014024:	8b5b      	ldrh	r3, [r3, #26]
 8014026:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801402a:	b29a      	uxth	r2, r3
 801402c:	687b      	ldr	r3, [r7, #4]
 801402e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8014030:	f04f 33ff 	mov.w	r3, #4294967295
 8014034:	e095      	b.n	8014162 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8014036:	68fb      	ldr	r3, [r7, #12]
 8014038:	895a      	ldrh	r2, [r3, #10]
 801403a:	7dbb      	ldrb	r3, [r7, #22]
 801403c:	b29b      	uxth	r3, r3
 801403e:	429a      	cmp	r2, r3
 8014040:	d206      	bcs.n	8014050 <tcp_enqueue_flags+0xa0>
 8014042:	4b4a      	ldr	r3, [pc, #296]	; (801416c <tcp_enqueue_flags+0x1bc>)
 8014044:	f240 4239 	movw	r2, #1081	; 0x439
 8014048:	494c      	ldr	r1, [pc, #304]	; (801417c <tcp_enqueue_flags+0x1cc>)
 801404a:	484a      	ldr	r0, [pc, #296]	; (8014174 <tcp_enqueue_flags+0x1c4>)
 801404c:	f007 fa18 	bl	801b480 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8014050:	687b      	ldr	r3, [r7, #4]
 8014052:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8014054:	78fa      	ldrb	r2, [r7, #3]
 8014056:	7dfb      	ldrb	r3, [r7, #23]
 8014058:	9300      	str	r3, [sp, #0]
 801405a:	460b      	mov	r3, r1
 801405c:	68f9      	ldr	r1, [r7, #12]
 801405e:	6878      	ldr	r0, [r7, #4]
 8014060:	f7ff fd6a 	bl	8013b38 <tcp_create_segment>
 8014064:	60b8      	str	r0, [r7, #8]
 8014066:	68bb      	ldr	r3, [r7, #8]
 8014068:	2b00      	cmp	r3, #0
 801406a:	d109      	bne.n	8014080 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801406c:	687b      	ldr	r3, [r7, #4]
 801406e:	8b5b      	ldrh	r3, [r3, #26]
 8014070:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014074:	b29a      	uxth	r2, r3
 8014076:	687b      	ldr	r3, [r7, #4]
 8014078:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801407a:	f04f 33ff 	mov.w	r3, #4294967295
 801407e:	e070      	b.n	8014162 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8014080:	68bb      	ldr	r3, [r7, #8]
 8014082:	691b      	ldr	r3, [r3, #16]
 8014084:	f003 0303 	and.w	r3, r3, #3
 8014088:	2b00      	cmp	r3, #0
 801408a:	d006      	beq.n	801409a <tcp_enqueue_flags+0xea>
 801408c:	4b37      	ldr	r3, [pc, #220]	; (801416c <tcp_enqueue_flags+0x1bc>)
 801408e:	f240 4242 	movw	r2, #1090	; 0x442
 8014092:	493b      	ldr	r1, [pc, #236]	; (8014180 <tcp_enqueue_flags+0x1d0>)
 8014094:	4837      	ldr	r0, [pc, #220]	; (8014174 <tcp_enqueue_flags+0x1c4>)
 8014096:	f007 f9f3 	bl	801b480 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801409a:	68bb      	ldr	r3, [r7, #8]
 801409c:	891b      	ldrh	r3, [r3, #8]
 801409e:	2b00      	cmp	r3, #0
 80140a0:	d006      	beq.n	80140b0 <tcp_enqueue_flags+0x100>
 80140a2:	4b32      	ldr	r3, [pc, #200]	; (801416c <tcp_enqueue_flags+0x1bc>)
 80140a4:	f240 4243 	movw	r2, #1091	; 0x443
 80140a8:	4936      	ldr	r1, [pc, #216]	; (8014184 <tcp_enqueue_flags+0x1d4>)
 80140aa:	4832      	ldr	r0, [pc, #200]	; (8014174 <tcp_enqueue_flags+0x1c4>)
 80140ac:	f007 f9e8 	bl	801b480 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 80140b0:	687b      	ldr	r3, [r7, #4]
 80140b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80140b4:	2b00      	cmp	r3, #0
 80140b6:	d103      	bne.n	80140c0 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 80140b8:	687b      	ldr	r3, [r7, #4]
 80140ba:	68ba      	ldr	r2, [r7, #8]
 80140bc:	66da      	str	r2, [r3, #108]	; 0x6c
 80140be:	e00d      	b.n	80140dc <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 80140c0:	687b      	ldr	r3, [r7, #4]
 80140c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80140c4:	613b      	str	r3, [r7, #16]
 80140c6:	e002      	b.n	80140ce <tcp_enqueue_flags+0x11e>
 80140c8:	693b      	ldr	r3, [r7, #16]
 80140ca:	681b      	ldr	r3, [r3, #0]
 80140cc:	613b      	str	r3, [r7, #16]
 80140ce:	693b      	ldr	r3, [r7, #16]
 80140d0:	681b      	ldr	r3, [r3, #0]
 80140d2:	2b00      	cmp	r3, #0
 80140d4:	d1f8      	bne.n	80140c8 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 80140d6:	693b      	ldr	r3, [r7, #16]
 80140d8:	68ba      	ldr	r2, [r7, #8]
 80140da:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 80140dc:	687b      	ldr	r3, [r7, #4]
 80140de:	2200      	movs	r2, #0
 80140e0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 80140e4:	78fb      	ldrb	r3, [r7, #3]
 80140e6:	f003 0302 	and.w	r3, r3, #2
 80140ea:	2b00      	cmp	r3, #0
 80140ec:	d104      	bne.n	80140f8 <tcp_enqueue_flags+0x148>
 80140ee:	78fb      	ldrb	r3, [r7, #3]
 80140f0:	f003 0301 	and.w	r3, r3, #1
 80140f4:	2b00      	cmp	r3, #0
 80140f6:	d004      	beq.n	8014102 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 80140f8:	687b      	ldr	r3, [r7, #4]
 80140fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80140fc:	1c5a      	adds	r2, r3, #1
 80140fe:	687b      	ldr	r3, [r7, #4]
 8014100:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8014102:	78fb      	ldrb	r3, [r7, #3]
 8014104:	f003 0301 	and.w	r3, r3, #1
 8014108:	2b00      	cmp	r3, #0
 801410a:	d006      	beq.n	801411a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 801410c:	687b      	ldr	r3, [r7, #4]
 801410e:	8b5b      	ldrh	r3, [r3, #26]
 8014110:	f043 0320 	orr.w	r3, r3, #32
 8014114:	b29a      	uxth	r2, r3
 8014116:	687b      	ldr	r3, [r7, #4]
 8014118:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801411a:	68bb      	ldr	r3, [r7, #8]
 801411c:	685b      	ldr	r3, [r3, #4]
 801411e:	4618      	mov	r0, r3
 8014120:	f7fb fa80 	bl	800f624 <pbuf_clen>
 8014124:	4603      	mov	r3, r0
 8014126:	461a      	mov	r2, r3
 8014128:	687b      	ldr	r3, [r7, #4]
 801412a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801412e:	4413      	add	r3, r2
 8014130:	b29a      	uxth	r2, r3
 8014132:	687b      	ldr	r3, [r7, #4]
 8014134:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8014138:	687b      	ldr	r3, [r7, #4]
 801413a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801413e:	2b00      	cmp	r3, #0
 8014140:	d00e      	beq.n	8014160 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8014142:	687b      	ldr	r3, [r7, #4]
 8014144:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014146:	2b00      	cmp	r3, #0
 8014148:	d10a      	bne.n	8014160 <tcp_enqueue_flags+0x1b0>
 801414a:	687b      	ldr	r3, [r7, #4]
 801414c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801414e:	2b00      	cmp	r3, #0
 8014150:	d106      	bne.n	8014160 <tcp_enqueue_flags+0x1b0>
 8014152:	4b06      	ldr	r3, [pc, #24]	; (801416c <tcp_enqueue_flags+0x1bc>)
 8014154:	f240 4265 	movw	r2, #1125	; 0x465
 8014158:	490b      	ldr	r1, [pc, #44]	; (8014188 <tcp_enqueue_flags+0x1d8>)
 801415a:	4806      	ldr	r0, [pc, #24]	; (8014174 <tcp_enqueue_flags+0x1c4>)
 801415c:	f007 f990 	bl	801b480 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8014160:	2300      	movs	r3, #0
}
 8014162:	4618      	mov	r0, r3
 8014164:	3718      	adds	r7, #24
 8014166:	46bd      	mov	sp, r7
 8014168:	bd80      	pop	{r7, pc}
 801416a:	bf00      	nop
 801416c:	0801f9f4 	.word	0x0801f9f4
 8014170:	0801fe74 	.word	0x0801fe74
 8014174:	0801fa48 	.word	0x0801fa48
 8014178:	0801fecc 	.word	0x0801fecc
 801417c:	0801feec 	.word	0x0801feec
 8014180:	0801ff28 	.word	0x0801ff28
 8014184:	0801ff40 	.word	0x0801ff40
 8014188:	0801ff6c 	.word	0x0801ff6c

0801418c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 801418c:	b5b0      	push	{r4, r5, r7, lr}
 801418e:	b08a      	sub	sp, #40	; 0x28
 8014190:	af00      	add	r7, sp, #0
 8014192:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8014194:	687b      	ldr	r3, [r7, #4]
 8014196:	2b00      	cmp	r3, #0
 8014198:	d106      	bne.n	80141a8 <tcp_output+0x1c>
 801419a:	4b8a      	ldr	r3, [pc, #552]	; (80143c4 <tcp_output+0x238>)
 801419c:	f240 42e1 	movw	r2, #1249	; 0x4e1
 80141a0:	4989      	ldr	r1, [pc, #548]	; (80143c8 <tcp_output+0x23c>)
 80141a2:	488a      	ldr	r0, [pc, #552]	; (80143cc <tcp_output+0x240>)
 80141a4:	f007 f96c 	bl	801b480 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 80141a8:	687b      	ldr	r3, [r7, #4]
 80141aa:	7d1b      	ldrb	r3, [r3, #20]
 80141ac:	2b01      	cmp	r3, #1
 80141ae:	d106      	bne.n	80141be <tcp_output+0x32>
 80141b0:	4b84      	ldr	r3, [pc, #528]	; (80143c4 <tcp_output+0x238>)
 80141b2:	f240 42e3 	movw	r2, #1251	; 0x4e3
 80141b6:	4986      	ldr	r1, [pc, #536]	; (80143d0 <tcp_output+0x244>)
 80141b8:	4884      	ldr	r0, [pc, #528]	; (80143cc <tcp_output+0x240>)
 80141ba:	f007 f961 	bl	801b480 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 80141be:	4b85      	ldr	r3, [pc, #532]	; (80143d4 <tcp_output+0x248>)
 80141c0:	681b      	ldr	r3, [r3, #0]
 80141c2:	687a      	ldr	r2, [r7, #4]
 80141c4:	429a      	cmp	r2, r3
 80141c6:	d101      	bne.n	80141cc <tcp_output+0x40>
    return ERR_OK;
 80141c8:	2300      	movs	r3, #0
 80141ca:	e1d1      	b.n	8014570 <tcp_output+0x3e4>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 80141cc:	687b      	ldr	r3, [r7, #4]
 80141ce:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80141d2:	687b      	ldr	r3, [r7, #4]
 80141d4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80141d8:	4293      	cmp	r3, r2
 80141da:	bf28      	it	cs
 80141dc:	4613      	movcs	r3, r2
 80141de:	b29b      	uxth	r3, r3
 80141e0:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 80141e2:	687b      	ldr	r3, [r7, #4]
 80141e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80141e6:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 80141e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141ea:	2b00      	cmp	r3, #0
 80141ec:	d10b      	bne.n	8014206 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 80141ee:	687b      	ldr	r3, [r7, #4]
 80141f0:	8b5b      	ldrh	r3, [r3, #26]
 80141f2:	f003 0302 	and.w	r3, r3, #2
 80141f6:	2b00      	cmp	r3, #0
 80141f8:	f000 81ad 	beq.w	8014556 <tcp_output+0x3ca>
      return tcp_send_empty_ack(pcb);
 80141fc:	6878      	ldr	r0, [r7, #4]
 80141fe:	f000 fdf9 	bl	8014df4 <tcp_send_empty_ack>
 8014202:	4603      	mov	r3, r0
 8014204:	e1b4      	b.n	8014570 <tcp_output+0x3e4>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8014206:	6879      	ldr	r1, [r7, #4]
 8014208:	687b      	ldr	r3, [r7, #4]
 801420a:	3304      	adds	r3, #4
 801420c:	461a      	mov	r2, r3
 801420e:	6878      	ldr	r0, [r7, #4]
 8014210:	f7ff fc76 	bl	8013b00 <tcp_route>
 8014214:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8014216:	697b      	ldr	r3, [r7, #20]
 8014218:	2b00      	cmp	r3, #0
 801421a:	d102      	bne.n	8014222 <tcp_output+0x96>
    return ERR_RTE;
 801421c:	f06f 0303 	mvn.w	r3, #3
 8014220:	e1a6      	b.n	8014570 <tcp_output+0x3e4>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8014222:	687b      	ldr	r3, [r7, #4]
 8014224:	2b00      	cmp	r3, #0
 8014226:	d003      	beq.n	8014230 <tcp_output+0xa4>
 8014228:	687b      	ldr	r3, [r7, #4]
 801422a:	681b      	ldr	r3, [r3, #0]
 801422c:	2b00      	cmp	r3, #0
 801422e:	d111      	bne.n	8014254 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8014230:	697b      	ldr	r3, [r7, #20]
 8014232:	2b00      	cmp	r3, #0
 8014234:	d002      	beq.n	801423c <tcp_output+0xb0>
 8014236:	697b      	ldr	r3, [r7, #20]
 8014238:	3304      	adds	r3, #4
 801423a:	e000      	b.n	801423e <tcp_output+0xb2>
 801423c:	2300      	movs	r3, #0
 801423e:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8014240:	693b      	ldr	r3, [r7, #16]
 8014242:	2b00      	cmp	r3, #0
 8014244:	d102      	bne.n	801424c <tcp_output+0xc0>
      return ERR_RTE;
 8014246:	f06f 0303 	mvn.w	r3, #3
 801424a:	e191      	b.n	8014570 <tcp_output+0x3e4>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801424c:	693b      	ldr	r3, [r7, #16]
 801424e:	681a      	ldr	r2, [r3, #0]
 8014250:	687b      	ldr	r3, [r7, #4]
 8014252:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8014254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014256:	691b      	ldr	r3, [r3, #16]
 8014258:	685b      	ldr	r3, [r3, #4]
 801425a:	4618      	mov	r0, r3
 801425c:	f7f9 fc47 	bl	800daee <lwip_htonl>
 8014260:	4602      	mov	r2, r0
 8014262:	687b      	ldr	r3, [r7, #4]
 8014264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014266:	1ad3      	subs	r3, r2, r3
 8014268:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801426a:	8912      	ldrh	r2, [r2, #8]
 801426c:	4413      	add	r3, r2
 801426e:	69ba      	ldr	r2, [r7, #24]
 8014270:	429a      	cmp	r2, r3
 8014272:	d227      	bcs.n	80142c4 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8014274:	687b      	ldr	r3, [r7, #4]
 8014276:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801427a:	461a      	mov	r2, r3
 801427c:	69bb      	ldr	r3, [r7, #24]
 801427e:	4293      	cmp	r3, r2
 8014280:	d114      	bne.n	80142ac <tcp_output+0x120>
 8014282:	687b      	ldr	r3, [r7, #4]
 8014284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014286:	2b00      	cmp	r3, #0
 8014288:	d110      	bne.n	80142ac <tcp_output+0x120>
 801428a:	687b      	ldr	r3, [r7, #4]
 801428c:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8014290:	2b00      	cmp	r3, #0
 8014292:	d10b      	bne.n	80142ac <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8014294:	687b      	ldr	r3, [r7, #4]
 8014296:	2200      	movs	r2, #0
 8014298:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 801429c:	687b      	ldr	r3, [r7, #4]
 801429e:	2201      	movs	r2, #1
 80142a0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 80142a4:	687b      	ldr	r3, [r7, #4]
 80142a6:	2200      	movs	r2, #0
 80142a8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 80142ac:	687b      	ldr	r3, [r7, #4]
 80142ae:	8b5b      	ldrh	r3, [r3, #26]
 80142b0:	f003 0302 	and.w	r3, r3, #2
 80142b4:	2b00      	cmp	r3, #0
 80142b6:	f000 8150 	beq.w	801455a <tcp_output+0x3ce>
      return tcp_send_empty_ack(pcb);
 80142ba:	6878      	ldr	r0, [r7, #4]
 80142bc:	f000 fd9a 	bl	8014df4 <tcp_send_empty_ack>
 80142c0:	4603      	mov	r3, r0
 80142c2:	e155      	b.n	8014570 <tcp_output+0x3e4>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 80142c4:	687b      	ldr	r3, [r7, #4]
 80142c6:	2200      	movs	r2, #0
 80142c8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 80142cc:	687b      	ldr	r3, [r7, #4]
 80142ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80142d0:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 80142d2:	6a3b      	ldr	r3, [r7, #32]
 80142d4:	2b00      	cmp	r3, #0
 80142d6:	f000 811f 	beq.w	8014518 <tcp_output+0x38c>
    for (; useg->next != NULL; useg = useg->next);
 80142da:	e002      	b.n	80142e2 <tcp_output+0x156>
 80142dc:	6a3b      	ldr	r3, [r7, #32]
 80142de:	681b      	ldr	r3, [r3, #0]
 80142e0:	623b      	str	r3, [r7, #32]
 80142e2:	6a3b      	ldr	r3, [r7, #32]
 80142e4:	681b      	ldr	r3, [r3, #0]
 80142e6:	2b00      	cmp	r3, #0
 80142e8:	d1f8      	bne.n	80142dc <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 80142ea:	e115      	b.n	8014518 <tcp_output+0x38c>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 80142ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142ee:	691b      	ldr	r3, [r3, #16]
 80142f0:	899b      	ldrh	r3, [r3, #12]
 80142f2:	b29b      	uxth	r3, r3
 80142f4:	4618      	mov	r0, r3
 80142f6:	f7f9 fbe5 	bl	800dac4 <lwip_htons>
 80142fa:	4603      	mov	r3, r0
 80142fc:	b2db      	uxtb	r3, r3
 80142fe:	f003 0304 	and.w	r3, r3, #4
 8014302:	2b00      	cmp	r3, #0
 8014304:	d006      	beq.n	8014314 <tcp_output+0x188>
 8014306:	4b2f      	ldr	r3, [pc, #188]	; (80143c4 <tcp_output+0x238>)
 8014308:	f240 5236 	movw	r2, #1334	; 0x536
 801430c:	4932      	ldr	r1, [pc, #200]	; (80143d8 <tcp_output+0x24c>)
 801430e:	482f      	ldr	r0, [pc, #188]	; (80143cc <tcp_output+0x240>)
 8014310:	f007 f8b6 	bl	801b480 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8014314:	687b      	ldr	r3, [r7, #4]
 8014316:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014318:	2b00      	cmp	r3, #0
 801431a:	d01f      	beq.n	801435c <tcp_output+0x1d0>
 801431c:	687b      	ldr	r3, [r7, #4]
 801431e:	8b5b      	ldrh	r3, [r3, #26]
 8014320:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8014324:	2b00      	cmp	r3, #0
 8014326:	d119      	bne.n	801435c <tcp_output+0x1d0>
 8014328:	687b      	ldr	r3, [r7, #4]
 801432a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801432c:	2b00      	cmp	r3, #0
 801432e:	d00b      	beq.n	8014348 <tcp_output+0x1bc>
 8014330:	687b      	ldr	r3, [r7, #4]
 8014332:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014334:	681b      	ldr	r3, [r3, #0]
 8014336:	2b00      	cmp	r3, #0
 8014338:	d110      	bne.n	801435c <tcp_output+0x1d0>
 801433a:	687b      	ldr	r3, [r7, #4]
 801433c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801433e:	891a      	ldrh	r2, [r3, #8]
 8014340:	687b      	ldr	r3, [r7, #4]
 8014342:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014344:	429a      	cmp	r2, r3
 8014346:	d209      	bcs.n	801435c <tcp_output+0x1d0>
 8014348:	687b      	ldr	r3, [r7, #4]
 801434a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801434e:	2b00      	cmp	r3, #0
 8014350:	d004      	beq.n	801435c <tcp_output+0x1d0>
 8014352:	687b      	ldr	r3, [r7, #4]
 8014354:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014358:	2b0f      	cmp	r3, #15
 801435a:	d901      	bls.n	8014360 <tcp_output+0x1d4>
 801435c:	2301      	movs	r3, #1
 801435e:	e000      	b.n	8014362 <tcp_output+0x1d6>
 8014360:	2300      	movs	r3, #0
 8014362:	2b00      	cmp	r3, #0
 8014364:	d106      	bne.n	8014374 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8014366:	687b      	ldr	r3, [r7, #4]
 8014368:	8b5b      	ldrh	r3, [r3, #26]
 801436a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801436e:	2b00      	cmp	r3, #0
 8014370:	f000 80e7 	beq.w	8014542 <tcp_output+0x3b6>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8014374:	687b      	ldr	r3, [r7, #4]
 8014376:	7d1b      	ldrb	r3, [r3, #20]
 8014378:	2b02      	cmp	r3, #2
 801437a:	d00d      	beq.n	8014398 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801437c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801437e:	691b      	ldr	r3, [r3, #16]
 8014380:	899b      	ldrh	r3, [r3, #12]
 8014382:	b29c      	uxth	r4, r3
 8014384:	2010      	movs	r0, #16
 8014386:	f7f9 fb9d 	bl	800dac4 <lwip_htons>
 801438a:	4603      	mov	r3, r0
 801438c:	461a      	mov	r2, r3
 801438e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014390:	691b      	ldr	r3, [r3, #16]
 8014392:	4322      	orrs	r2, r4
 8014394:	b292      	uxth	r2, r2
 8014396:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8014398:	697a      	ldr	r2, [r7, #20]
 801439a:	6879      	ldr	r1, [r7, #4]
 801439c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801439e:	f000 f90b 	bl	80145b8 <tcp_output_segment>
 80143a2:	4603      	mov	r3, r0
 80143a4:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80143a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80143aa:	2b00      	cmp	r3, #0
 80143ac:	d016      	beq.n	80143dc <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80143ae:	687b      	ldr	r3, [r7, #4]
 80143b0:	8b5b      	ldrh	r3, [r3, #26]
 80143b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80143b6:	b29a      	uxth	r2, r3
 80143b8:	687b      	ldr	r3, [r7, #4]
 80143ba:	835a      	strh	r2, [r3, #26]
      return err;
 80143bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80143c0:	e0d6      	b.n	8014570 <tcp_output+0x3e4>
 80143c2:	bf00      	nop
 80143c4:	0801f9f4 	.word	0x0801f9f4
 80143c8:	0801ff94 	.word	0x0801ff94
 80143cc:	0801fa48 	.word	0x0801fa48
 80143d0:	0801ffac 	.word	0x0801ffac
 80143d4:	20013bc4 	.word	0x20013bc4
 80143d8:	0801ffd4 	.word	0x0801ffd4
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
 80143dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143de:	2200      	movs	r2, #0
 80143e0:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 80143e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143e4:	681a      	ldr	r2, [r3, #0]
 80143e6:	687b      	ldr	r3, [r7, #4]
 80143e8:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 80143ea:	687b      	ldr	r3, [r7, #4]
 80143ec:	7d1b      	ldrb	r3, [r3, #20]
 80143ee:	2b02      	cmp	r3, #2
 80143f0:	d006      	beq.n	8014400 <tcp_output+0x274>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80143f2:	687b      	ldr	r3, [r7, #4]
 80143f4:	8b5b      	ldrh	r3, [r3, #26]
 80143f6:	f023 0303 	bic.w	r3, r3, #3
 80143fa:	b29a      	uxth	r2, r3
 80143fc:	687b      	ldr	r3, [r7, #4]
 80143fe:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8014400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014402:	691b      	ldr	r3, [r3, #16]
 8014404:	685b      	ldr	r3, [r3, #4]
 8014406:	4618      	mov	r0, r3
 8014408:	f7f9 fb71 	bl	800daee <lwip_htonl>
 801440c:	4604      	mov	r4, r0
 801440e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014410:	891b      	ldrh	r3, [r3, #8]
 8014412:	461d      	mov	r5, r3
 8014414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014416:	691b      	ldr	r3, [r3, #16]
 8014418:	899b      	ldrh	r3, [r3, #12]
 801441a:	b29b      	uxth	r3, r3
 801441c:	4618      	mov	r0, r3
 801441e:	f7f9 fb51 	bl	800dac4 <lwip_htons>
 8014422:	4603      	mov	r3, r0
 8014424:	b2db      	uxtb	r3, r3
 8014426:	f003 0303 	and.w	r3, r3, #3
 801442a:	2b00      	cmp	r3, #0
 801442c:	d001      	beq.n	8014432 <tcp_output+0x2a6>
 801442e:	2301      	movs	r3, #1
 8014430:	e000      	b.n	8014434 <tcp_output+0x2a8>
 8014432:	2300      	movs	r3, #0
 8014434:	442b      	add	r3, r5
 8014436:	4423      	add	r3, r4
 8014438:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801443a:	687b      	ldr	r3, [r7, #4]
 801443c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801443e:	68bb      	ldr	r3, [r7, #8]
 8014440:	1ad3      	subs	r3, r2, r3
 8014442:	2b00      	cmp	r3, #0
 8014444:	da02      	bge.n	801444c <tcp_output+0x2c0>
      pcb->snd_nxt = snd_nxt;
 8014446:	687b      	ldr	r3, [r7, #4]
 8014448:	68ba      	ldr	r2, [r7, #8]
 801444a:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801444c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801444e:	891b      	ldrh	r3, [r3, #8]
 8014450:	461c      	mov	r4, r3
 8014452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014454:	691b      	ldr	r3, [r3, #16]
 8014456:	899b      	ldrh	r3, [r3, #12]
 8014458:	b29b      	uxth	r3, r3
 801445a:	4618      	mov	r0, r3
 801445c:	f7f9 fb32 	bl	800dac4 <lwip_htons>
 8014460:	4603      	mov	r3, r0
 8014462:	b2db      	uxtb	r3, r3
 8014464:	f003 0303 	and.w	r3, r3, #3
 8014468:	2b00      	cmp	r3, #0
 801446a:	d001      	beq.n	8014470 <tcp_output+0x2e4>
 801446c:	2301      	movs	r3, #1
 801446e:	e000      	b.n	8014472 <tcp_output+0x2e6>
 8014470:	2300      	movs	r3, #0
 8014472:	4423      	add	r3, r4
 8014474:	2b00      	cmp	r3, #0
 8014476:	d049      	beq.n	801450c <tcp_output+0x380>
      seg->next = NULL;
 8014478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801447a:	2200      	movs	r2, #0
 801447c:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 801447e:	687b      	ldr	r3, [r7, #4]
 8014480:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014482:	2b00      	cmp	r3, #0
 8014484:	d105      	bne.n	8014492 <tcp_output+0x306>
        pcb->unacked = seg;
 8014486:	687b      	ldr	r3, [r7, #4]
 8014488:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801448a:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 801448c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801448e:	623b      	str	r3, [r7, #32]
 8014490:	e03f      	b.n	8014512 <tcp_output+0x386>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8014492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014494:	691b      	ldr	r3, [r3, #16]
 8014496:	685b      	ldr	r3, [r3, #4]
 8014498:	4618      	mov	r0, r3
 801449a:	f7f9 fb28 	bl	800daee <lwip_htonl>
 801449e:	4604      	mov	r4, r0
 80144a0:	6a3b      	ldr	r3, [r7, #32]
 80144a2:	691b      	ldr	r3, [r3, #16]
 80144a4:	685b      	ldr	r3, [r3, #4]
 80144a6:	4618      	mov	r0, r3
 80144a8:	f7f9 fb21 	bl	800daee <lwip_htonl>
 80144ac:	4603      	mov	r3, r0
 80144ae:	1ae3      	subs	r3, r4, r3
 80144b0:	2b00      	cmp	r3, #0
 80144b2:	da24      	bge.n	80144fe <tcp_output+0x372>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 80144b4:	687b      	ldr	r3, [r7, #4]
 80144b6:	3370      	adds	r3, #112	; 0x70
 80144b8:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80144ba:	e002      	b.n	80144c2 <tcp_output+0x336>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 80144bc:	69fb      	ldr	r3, [r7, #28]
 80144be:	681b      	ldr	r3, [r3, #0]
 80144c0:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80144c2:	69fb      	ldr	r3, [r7, #28]
 80144c4:	681b      	ldr	r3, [r3, #0]
 80144c6:	2b00      	cmp	r3, #0
 80144c8:	d011      	beq.n	80144ee <tcp_output+0x362>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80144ca:	69fb      	ldr	r3, [r7, #28]
 80144cc:	681b      	ldr	r3, [r3, #0]
 80144ce:	691b      	ldr	r3, [r3, #16]
 80144d0:	685b      	ldr	r3, [r3, #4]
 80144d2:	4618      	mov	r0, r3
 80144d4:	f7f9 fb0b 	bl	800daee <lwip_htonl>
 80144d8:	4604      	mov	r4, r0
 80144da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80144dc:	691b      	ldr	r3, [r3, #16]
 80144de:	685b      	ldr	r3, [r3, #4]
 80144e0:	4618      	mov	r0, r3
 80144e2:	f7f9 fb04 	bl	800daee <lwip_htonl>
 80144e6:	4603      	mov	r3, r0
 80144e8:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 80144ea:	2b00      	cmp	r3, #0
 80144ec:	dbe6      	blt.n	80144bc <tcp_output+0x330>
          }
          seg->next = (*cur_seg);
 80144ee:	69fb      	ldr	r3, [r7, #28]
 80144f0:	681a      	ldr	r2, [r3, #0]
 80144f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80144f4:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 80144f6:	69fb      	ldr	r3, [r7, #28]
 80144f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80144fa:	601a      	str	r2, [r3, #0]
 80144fc:	e009      	b.n	8014512 <tcp_output+0x386>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 80144fe:	6a3b      	ldr	r3, [r7, #32]
 8014500:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014502:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8014504:	6a3b      	ldr	r3, [r7, #32]
 8014506:	681b      	ldr	r3, [r3, #0]
 8014508:	623b      	str	r3, [r7, #32]
 801450a:	e002      	b.n	8014512 <tcp_output+0x386>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801450c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801450e:	f7fc fc22 	bl	8010d56 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8014512:	687b      	ldr	r3, [r7, #4]
 8014514:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014516:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8014518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801451a:	2b00      	cmp	r3, #0
 801451c:	d012      	beq.n	8014544 <tcp_output+0x3b8>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 801451e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014520:	691b      	ldr	r3, [r3, #16]
 8014522:	685b      	ldr	r3, [r3, #4]
 8014524:	4618      	mov	r0, r3
 8014526:	f7f9 fae2 	bl	800daee <lwip_htonl>
 801452a:	4602      	mov	r2, r0
 801452c:	687b      	ldr	r3, [r7, #4]
 801452e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014530:	1ad3      	subs	r3, r2, r3
 8014532:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014534:	8912      	ldrh	r2, [r2, #8]
 8014536:	4413      	add	r3, r2
  while (seg != NULL &&
 8014538:	69ba      	ldr	r2, [r7, #24]
 801453a:	429a      	cmp	r2, r3
 801453c:	f4bf aed6 	bcs.w	80142ec <tcp_output+0x160>
 8014540:	e000      	b.n	8014544 <tcp_output+0x3b8>
      break;
 8014542:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8014544:	687b      	ldr	r3, [r7, #4]
 8014546:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014548:	2b00      	cmp	r3, #0
 801454a:	d108      	bne.n	801455e <tcp_output+0x3d2>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801454c:	687b      	ldr	r3, [r7, #4]
 801454e:	2200      	movs	r2, #0
 8014550:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8014554:	e004      	b.n	8014560 <tcp_output+0x3d4>
    goto output_done;
 8014556:	bf00      	nop
 8014558:	e002      	b.n	8014560 <tcp_output+0x3d4>
    goto output_done;
 801455a:	bf00      	nop
 801455c:	e000      	b.n	8014560 <tcp_output+0x3d4>
  }
#endif /* TCP_OVERSIZE */

output_done:
 801455e:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8014560:	687b      	ldr	r3, [r7, #4]
 8014562:	8b5b      	ldrh	r3, [r3, #26]
 8014564:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8014568:	b29a      	uxth	r2, r3
 801456a:	687b      	ldr	r3, [r7, #4]
 801456c:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 801456e:	2300      	movs	r3, #0
}
 8014570:	4618      	mov	r0, r3
 8014572:	3728      	adds	r7, #40	; 0x28
 8014574:	46bd      	mov	sp, r7
 8014576:	bdb0      	pop	{r4, r5, r7, pc}

08014578 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8014578:	b580      	push	{r7, lr}
 801457a:	b082      	sub	sp, #8
 801457c:	af00      	add	r7, sp, #0
 801457e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8014580:	687b      	ldr	r3, [r7, #4]
 8014582:	2b00      	cmp	r3, #0
 8014584:	d106      	bne.n	8014594 <tcp_output_segment_busy+0x1c>
 8014586:	4b09      	ldr	r3, [pc, #36]	; (80145ac <tcp_output_segment_busy+0x34>)
 8014588:	f240 529a 	movw	r2, #1434	; 0x59a
 801458c:	4908      	ldr	r1, [pc, #32]	; (80145b0 <tcp_output_segment_busy+0x38>)
 801458e:	4809      	ldr	r0, [pc, #36]	; (80145b4 <tcp_output_segment_busy+0x3c>)
 8014590:	f006 ff76 	bl	801b480 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8014594:	687b      	ldr	r3, [r7, #4]
 8014596:	685b      	ldr	r3, [r3, #4]
 8014598:	7b9b      	ldrb	r3, [r3, #14]
 801459a:	2b01      	cmp	r3, #1
 801459c:	d001      	beq.n	80145a2 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801459e:	2301      	movs	r3, #1
 80145a0:	e000      	b.n	80145a4 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 80145a2:	2300      	movs	r3, #0
}
 80145a4:	4618      	mov	r0, r3
 80145a6:	3708      	adds	r7, #8
 80145a8:	46bd      	mov	sp, r7
 80145aa:	bd80      	pop	{r7, pc}
 80145ac:	0801f9f4 	.word	0x0801f9f4
 80145b0:	0801ffec 	.word	0x0801ffec
 80145b4:	0801fa48 	.word	0x0801fa48

080145b8 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 80145b8:	b5b0      	push	{r4, r5, r7, lr}
 80145ba:	b08c      	sub	sp, #48	; 0x30
 80145bc:	af04      	add	r7, sp, #16
 80145be:	60f8      	str	r0, [r7, #12]
 80145c0:	60b9      	str	r1, [r7, #8]
 80145c2:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 80145c4:	68fb      	ldr	r3, [r7, #12]
 80145c6:	2b00      	cmp	r3, #0
 80145c8:	d106      	bne.n	80145d8 <tcp_output_segment+0x20>
 80145ca:	4b6c      	ldr	r3, [pc, #432]	; (801477c <tcp_output_segment+0x1c4>)
 80145cc:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 80145d0:	496b      	ldr	r1, [pc, #428]	; (8014780 <tcp_output_segment+0x1c8>)
 80145d2:	486c      	ldr	r0, [pc, #432]	; (8014784 <tcp_output_segment+0x1cc>)
 80145d4:	f006 ff54 	bl	801b480 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 80145d8:	68bb      	ldr	r3, [r7, #8]
 80145da:	2b00      	cmp	r3, #0
 80145dc:	d106      	bne.n	80145ec <tcp_output_segment+0x34>
 80145de:	4b67      	ldr	r3, [pc, #412]	; (801477c <tcp_output_segment+0x1c4>)
 80145e0:	f240 52b9 	movw	r2, #1465	; 0x5b9
 80145e4:	4968      	ldr	r1, [pc, #416]	; (8014788 <tcp_output_segment+0x1d0>)
 80145e6:	4867      	ldr	r0, [pc, #412]	; (8014784 <tcp_output_segment+0x1cc>)
 80145e8:	f006 ff4a 	bl	801b480 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 80145ec:	687b      	ldr	r3, [r7, #4]
 80145ee:	2b00      	cmp	r3, #0
 80145f0:	d106      	bne.n	8014600 <tcp_output_segment+0x48>
 80145f2:	4b62      	ldr	r3, [pc, #392]	; (801477c <tcp_output_segment+0x1c4>)
 80145f4:	f240 52ba 	movw	r2, #1466	; 0x5ba
 80145f8:	4964      	ldr	r1, [pc, #400]	; (801478c <tcp_output_segment+0x1d4>)
 80145fa:	4862      	ldr	r0, [pc, #392]	; (8014784 <tcp_output_segment+0x1cc>)
 80145fc:	f006 ff40 	bl	801b480 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8014600:	68f8      	ldr	r0, [r7, #12]
 8014602:	f7ff ffb9 	bl	8014578 <tcp_output_segment_busy>
 8014606:	4603      	mov	r3, r0
 8014608:	2b00      	cmp	r3, #0
 801460a:	d001      	beq.n	8014610 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 801460c:	2300      	movs	r3, #0
 801460e:	e0b1      	b.n	8014774 <tcp_output_segment+0x1bc>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8014610:	68bb      	ldr	r3, [r7, #8]
 8014612:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014614:	68fb      	ldr	r3, [r7, #12]
 8014616:	691c      	ldr	r4, [r3, #16]
 8014618:	4610      	mov	r0, r2
 801461a:	f7f9 fa68 	bl	800daee <lwip_htonl>
 801461e:	4603      	mov	r3, r0
 8014620:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8014622:	68bb      	ldr	r3, [r7, #8]
 8014624:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8014626:	68fb      	ldr	r3, [r7, #12]
 8014628:	691c      	ldr	r4, [r3, #16]
 801462a:	4610      	mov	r0, r2
 801462c:	f7f9 fa4a 	bl	800dac4 <lwip_htons>
 8014630:	4603      	mov	r3, r0
 8014632:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8014634:	68bb      	ldr	r3, [r7, #8]
 8014636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014638:	68ba      	ldr	r2, [r7, #8]
 801463a:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801463c:	441a      	add	r2, r3
 801463e:	68bb      	ldr	r3, [r7, #8]
 8014640:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8014642:	68fb      	ldr	r3, [r7, #12]
 8014644:	691b      	ldr	r3, [r3, #16]
 8014646:	3314      	adds	r3, #20
 8014648:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801464a:	68fb      	ldr	r3, [r7, #12]
 801464c:	7b1b      	ldrb	r3, [r3, #12]
 801464e:	f003 0301 	and.w	r3, r3, #1
 8014652:	2b00      	cmp	r3, #0
 8014654:	d015      	beq.n	8014682 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8014656:	68bb      	ldr	r3, [r7, #8]
 8014658:	3304      	adds	r3, #4
 801465a:	461a      	mov	r2, r3
 801465c:	6879      	ldr	r1, [r7, #4]
 801465e:	f240 50b4 	movw	r0, #1460	; 0x5b4
 8014662:	f7fc fe6f 	bl	8011344 <tcp_eff_send_mss_netif>
 8014666:	4603      	mov	r3, r0
 8014668:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801466a:	8b7b      	ldrh	r3, [r7, #26]
 801466c:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8014670:	4618      	mov	r0, r3
 8014672:	f7f9 fa3c 	bl	800daee <lwip_htonl>
 8014676:	4602      	mov	r2, r0
 8014678:	69fb      	ldr	r3, [r7, #28]
 801467a:	601a      	str	r2, [r3, #0]
    opts += 1;
 801467c:	69fb      	ldr	r3, [r7, #28]
 801467e:	3304      	adds	r3, #4
 8014680:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8014682:	68bb      	ldr	r3, [r7, #8]
 8014684:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8014688:	2b00      	cmp	r3, #0
 801468a:	da02      	bge.n	8014692 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 801468c:	68bb      	ldr	r3, [r7, #8]
 801468e:	2200      	movs	r2, #0
 8014690:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8014692:	68bb      	ldr	r3, [r7, #8]
 8014694:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014696:	2b00      	cmp	r3, #0
 8014698:	d10c      	bne.n	80146b4 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801469a:	4b3d      	ldr	r3, [pc, #244]	; (8014790 <tcp_output_segment+0x1d8>)
 801469c:	681a      	ldr	r2, [r3, #0]
 801469e:	68bb      	ldr	r3, [r7, #8]
 80146a0:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80146a2:	68fb      	ldr	r3, [r7, #12]
 80146a4:	691b      	ldr	r3, [r3, #16]
 80146a6:	685b      	ldr	r3, [r3, #4]
 80146a8:	4618      	mov	r0, r3
 80146aa:	f7f9 fa20 	bl	800daee <lwip_htonl>
 80146ae:	4602      	mov	r2, r0
 80146b0:	68bb      	ldr	r3, [r7, #8]
 80146b2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80146b4:	68fb      	ldr	r3, [r7, #12]
 80146b6:	691a      	ldr	r2, [r3, #16]
 80146b8:	68fb      	ldr	r3, [r7, #12]
 80146ba:	685b      	ldr	r3, [r3, #4]
 80146bc:	685b      	ldr	r3, [r3, #4]
 80146be:	1ad3      	subs	r3, r2, r3
 80146c0:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 80146c2:	68fb      	ldr	r3, [r7, #12]
 80146c4:	685b      	ldr	r3, [r3, #4]
 80146c6:	8959      	ldrh	r1, [r3, #10]
 80146c8:	68fb      	ldr	r3, [r7, #12]
 80146ca:	685b      	ldr	r3, [r3, #4]
 80146cc:	8b3a      	ldrh	r2, [r7, #24]
 80146ce:	1a8a      	subs	r2, r1, r2
 80146d0:	b292      	uxth	r2, r2
 80146d2:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 80146d4:	68fb      	ldr	r3, [r7, #12]
 80146d6:	685b      	ldr	r3, [r3, #4]
 80146d8:	8919      	ldrh	r1, [r3, #8]
 80146da:	68fb      	ldr	r3, [r7, #12]
 80146dc:	685b      	ldr	r3, [r3, #4]
 80146de:	8b3a      	ldrh	r2, [r7, #24]
 80146e0:	1a8a      	subs	r2, r1, r2
 80146e2:	b292      	uxth	r2, r2
 80146e4:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 80146e6:	68fb      	ldr	r3, [r7, #12]
 80146e8:	685b      	ldr	r3, [r3, #4]
 80146ea:	68fa      	ldr	r2, [r7, #12]
 80146ec:	6912      	ldr	r2, [r2, #16]
 80146ee:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 80146f0:	68fb      	ldr	r3, [r7, #12]
 80146f2:	691b      	ldr	r3, [r3, #16]
 80146f4:	2200      	movs	r2, #0
 80146f6:	741a      	strb	r2, [r3, #16]
 80146f8:	2200      	movs	r2, #0
 80146fa:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 80146fc:	68fb      	ldr	r3, [r7, #12]
 80146fe:	691b      	ldr	r3, [r3, #16]
 8014700:	f103 0214 	add.w	r2, r3, #20
 8014704:	68fb      	ldr	r3, [r7, #12]
 8014706:	7b1b      	ldrb	r3, [r3, #12]
 8014708:	009b      	lsls	r3, r3, #2
 801470a:	f003 0304 	and.w	r3, r3, #4
 801470e:	4413      	add	r3, r2
 8014710:	69fa      	ldr	r2, [r7, #28]
 8014712:	429a      	cmp	r2, r3
 8014714:	d006      	beq.n	8014724 <tcp_output_segment+0x16c>
 8014716:	4b19      	ldr	r3, [pc, #100]	; (801477c <tcp_output_segment+0x1c4>)
 8014718:	f240 621c 	movw	r2, #1564	; 0x61c
 801471c:	491d      	ldr	r1, [pc, #116]	; (8014794 <tcp_output_segment+0x1dc>)
 801471e:	4819      	ldr	r0, [pc, #100]	; (8014784 <tcp_output_segment+0x1cc>)
 8014720:	f006 feae 	bl	801b480 <iprintf>
         seg->tcphdr->chksum, chksum_slow));
      seg->tcphdr->chksum = chksum_slow;
    }
#endif /* TCP_CHECKSUM_ON_COPY_SANITY_CHECK */
#else /* TCP_CHECKSUM_ON_COPY */
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 8014724:	68fb      	ldr	r3, [r7, #12]
 8014726:	6858      	ldr	r0, [r3, #4]
                                           seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
 8014728:	68fb      	ldr	r3, [r7, #12]
 801472a:	685b      	ldr	r3, [r3, #4]
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 801472c:	8919      	ldrh	r1, [r3, #8]
                                           seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
 801472e:	68bd      	ldr	r5, [r7, #8]
 8014730:	68bb      	ldr	r3, [r7, #8]
 8014732:	3304      	adds	r3, #4
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 8014734:	68fa      	ldr	r2, [r7, #12]
 8014736:	6914      	ldr	r4, [r2, #16]
 8014738:	9300      	str	r3, [sp, #0]
 801473a:	462b      	mov	r3, r5
 801473c:	460a      	mov	r2, r1
 801473e:	2106      	movs	r1, #6
 8014740:	f7f9 faf2 	bl	800dd28 <ip_chksum_pseudo>
 8014744:	4603      	mov	r3, r0
 8014746:	8223      	strh	r3, [r4, #16]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8014748:	68fb      	ldr	r3, [r7, #12]
 801474a:	6858      	ldr	r0, [r3, #4]
 801474c:	68b9      	ldr	r1, [r7, #8]
 801474e:	68bb      	ldr	r3, [r7, #8]
 8014750:	1d1c      	adds	r4, r3, #4
 8014752:	68bb      	ldr	r3, [r7, #8]
 8014754:	7add      	ldrb	r5, [r3, #11]
 8014756:	68bb      	ldr	r3, [r7, #8]
 8014758:	7a9b      	ldrb	r3, [r3, #10]
 801475a:	687a      	ldr	r2, [r7, #4]
 801475c:	9202      	str	r2, [sp, #8]
 801475e:	2206      	movs	r2, #6
 8014760:	9201      	str	r2, [sp, #4]
 8014762:	9300      	str	r3, [sp, #0]
 8014764:	462b      	mov	r3, r5
 8014766:	4622      	mov	r2, r4
 8014768:	f004 fde6 	bl	8019338 <ip4_output_if>
 801476c:	4603      	mov	r3, r0
 801476e:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8014770:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014774:	4618      	mov	r0, r3
 8014776:	3720      	adds	r7, #32
 8014778:	46bd      	mov	sp, r7
 801477a:	bdb0      	pop	{r4, r5, r7, pc}
 801477c:	0801f9f4 	.word	0x0801f9f4
 8014780:	08020014 	.word	0x08020014
 8014784:	0801fa48 	.word	0x0801fa48
 8014788:	08020034 	.word	0x08020034
 801478c:	08020054 	.word	0x08020054
 8014790:	20013b74 	.word	0x20013b74
 8014794:	08020078 	.word	0x08020078

08014798 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8014798:	b5b0      	push	{r4, r5, r7, lr}
 801479a:	b084      	sub	sp, #16
 801479c:	af00      	add	r7, sp, #0
 801479e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 80147a0:	687b      	ldr	r3, [r7, #4]
 80147a2:	2b00      	cmp	r3, #0
 80147a4:	d106      	bne.n	80147b4 <tcp_rexmit_rto_prepare+0x1c>
 80147a6:	4b36      	ldr	r3, [pc, #216]	; (8014880 <tcp_rexmit_rto_prepare+0xe8>)
 80147a8:	f240 6263 	movw	r2, #1635	; 0x663
 80147ac:	4935      	ldr	r1, [pc, #212]	; (8014884 <tcp_rexmit_rto_prepare+0xec>)
 80147ae:	4836      	ldr	r0, [pc, #216]	; (8014888 <tcp_rexmit_rto_prepare+0xf0>)
 80147b0:	f006 fe66 	bl	801b480 <iprintf>

  if (pcb->unacked == NULL) {
 80147b4:	687b      	ldr	r3, [r7, #4]
 80147b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80147b8:	2b00      	cmp	r3, #0
 80147ba:	d102      	bne.n	80147c2 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 80147bc:	f06f 0305 	mvn.w	r3, #5
 80147c0:	e059      	b.n	8014876 <tcp_rexmit_rto_prepare+0xde>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80147c2:	687b      	ldr	r3, [r7, #4]
 80147c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80147c6:	60fb      	str	r3, [r7, #12]
 80147c8:	e00b      	b.n	80147e2 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 80147ca:	68f8      	ldr	r0, [r7, #12]
 80147cc:	f7ff fed4 	bl	8014578 <tcp_output_segment_busy>
 80147d0:	4603      	mov	r3, r0
 80147d2:	2b00      	cmp	r3, #0
 80147d4:	d002      	beq.n	80147dc <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 80147d6:	f06f 0305 	mvn.w	r3, #5
 80147da:	e04c      	b.n	8014876 <tcp_rexmit_rto_prepare+0xde>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80147dc:	68fb      	ldr	r3, [r7, #12]
 80147de:	681b      	ldr	r3, [r3, #0]
 80147e0:	60fb      	str	r3, [r7, #12]
 80147e2:	68fb      	ldr	r3, [r7, #12]
 80147e4:	681b      	ldr	r3, [r3, #0]
 80147e6:	2b00      	cmp	r3, #0
 80147e8:	d1ef      	bne.n	80147ca <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 80147ea:	68f8      	ldr	r0, [r7, #12]
 80147ec:	f7ff fec4 	bl	8014578 <tcp_output_segment_busy>
 80147f0:	4603      	mov	r3, r0
 80147f2:	2b00      	cmp	r3, #0
 80147f4:	d002      	beq.n	80147fc <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 80147f6:	f06f 0305 	mvn.w	r3, #5
 80147fa:	e03c      	b.n	8014876 <tcp_rexmit_rto_prepare+0xde>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 80147fc:	687b      	ldr	r3, [r7, #4]
 80147fe:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8014800:	68fb      	ldr	r3, [r7, #12]
 8014802:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE_DBGCHECK
  /* if last unsent changed, we need to update unsent_oversize */
  if (pcb->unsent == NULL) {
 8014804:	687b      	ldr	r3, [r7, #4]
 8014806:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014808:	2b00      	cmp	r3, #0
 801480a:	d104      	bne.n	8014816 <tcp_rexmit_rto_prepare+0x7e>
    pcb->unsent_oversize = seg->oversize_left;
 801480c:	68fb      	ldr	r3, [r7, #12]
 801480e:	895a      	ldrh	r2, [r3, #10]
 8014810:	687b      	ldr	r3, [r7, #4]
 8014812:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8014816:	687b      	ldr	r3, [r7, #4]
 8014818:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801481a:	687b      	ldr	r3, [r7, #4]
 801481c:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 801481e:	687b      	ldr	r3, [r7, #4]
 8014820:	2200      	movs	r2, #0
 8014822:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8014824:	687b      	ldr	r3, [r7, #4]
 8014826:	8b5b      	ldrh	r3, [r3, #26]
 8014828:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801482c:	b29a      	uxth	r2, r3
 801482e:	687b      	ldr	r3, [r7, #4]
 8014830:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8014832:	68fb      	ldr	r3, [r7, #12]
 8014834:	691b      	ldr	r3, [r3, #16]
 8014836:	685b      	ldr	r3, [r3, #4]
 8014838:	4618      	mov	r0, r3
 801483a:	f7f9 f958 	bl	800daee <lwip_htonl>
 801483e:	4604      	mov	r4, r0
 8014840:	68fb      	ldr	r3, [r7, #12]
 8014842:	891b      	ldrh	r3, [r3, #8]
 8014844:	461d      	mov	r5, r3
 8014846:	68fb      	ldr	r3, [r7, #12]
 8014848:	691b      	ldr	r3, [r3, #16]
 801484a:	899b      	ldrh	r3, [r3, #12]
 801484c:	b29b      	uxth	r3, r3
 801484e:	4618      	mov	r0, r3
 8014850:	f7f9 f938 	bl	800dac4 <lwip_htons>
 8014854:	4603      	mov	r3, r0
 8014856:	b2db      	uxtb	r3, r3
 8014858:	f003 0303 	and.w	r3, r3, #3
 801485c:	2b00      	cmp	r3, #0
 801485e:	d001      	beq.n	8014864 <tcp_rexmit_rto_prepare+0xcc>
 8014860:	2301      	movs	r3, #1
 8014862:	e000      	b.n	8014866 <tcp_rexmit_rto_prepare+0xce>
 8014864:	2300      	movs	r3, #0
 8014866:	442b      	add	r3, r5
 8014868:	18e2      	adds	r2, r4, r3
 801486a:	687b      	ldr	r3, [r7, #4]
 801486c:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 801486e:	687b      	ldr	r3, [r7, #4]
 8014870:	2200      	movs	r2, #0
 8014872:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8014874:	2300      	movs	r3, #0
}
 8014876:	4618      	mov	r0, r3
 8014878:	3710      	adds	r7, #16
 801487a:	46bd      	mov	sp, r7
 801487c:	bdb0      	pop	{r4, r5, r7, pc}
 801487e:	bf00      	nop
 8014880:	0801f9f4 	.word	0x0801f9f4
 8014884:	0802008c 	.word	0x0802008c
 8014888:	0801fa48 	.word	0x0801fa48

0801488c <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 801488c:	b580      	push	{r7, lr}
 801488e:	b082      	sub	sp, #8
 8014890:	af00      	add	r7, sp, #0
 8014892:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8014894:	687b      	ldr	r3, [r7, #4]
 8014896:	2b00      	cmp	r3, #0
 8014898:	d106      	bne.n	80148a8 <tcp_rexmit_rto_commit+0x1c>
 801489a:	4b0d      	ldr	r3, [pc, #52]	; (80148d0 <tcp_rexmit_rto_commit+0x44>)
 801489c:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80148a0:	490c      	ldr	r1, [pc, #48]	; (80148d4 <tcp_rexmit_rto_commit+0x48>)
 80148a2:	480d      	ldr	r0, [pc, #52]	; (80148d8 <tcp_rexmit_rto_commit+0x4c>)
 80148a4:	f006 fdec 	bl	801b480 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 80148a8:	687b      	ldr	r3, [r7, #4]
 80148aa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80148ae:	2bff      	cmp	r3, #255	; 0xff
 80148b0:	d007      	beq.n	80148c2 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 80148b2:	687b      	ldr	r3, [r7, #4]
 80148b4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80148b8:	3301      	adds	r3, #1
 80148ba:	b2da      	uxtb	r2, r3
 80148bc:	687b      	ldr	r3, [r7, #4]
 80148be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 80148c2:	6878      	ldr	r0, [r7, #4]
 80148c4:	f7ff fc62 	bl	801418c <tcp_output>
}
 80148c8:	bf00      	nop
 80148ca:	3708      	adds	r7, #8
 80148cc:	46bd      	mov	sp, r7
 80148ce:	bd80      	pop	{r7, pc}
 80148d0:	0801f9f4 	.word	0x0801f9f4
 80148d4:	080200b0 	.word	0x080200b0
 80148d8:	0801fa48 	.word	0x0801fa48

080148dc <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80148dc:	b580      	push	{r7, lr}
 80148de:	b082      	sub	sp, #8
 80148e0:	af00      	add	r7, sp, #0
 80148e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 80148e4:	687b      	ldr	r3, [r7, #4]
 80148e6:	2b00      	cmp	r3, #0
 80148e8:	d106      	bne.n	80148f8 <tcp_rexmit_rto+0x1c>
 80148ea:	4b0a      	ldr	r3, [pc, #40]	; (8014914 <tcp_rexmit_rto+0x38>)
 80148ec:	f240 62ad 	movw	r2, #1709	; 0x6ad
 80148f0:	4909      	ldr	r1, [pc, #36]	; (8014918 <tcp_rexmit_rto+0x3c>)
 80148f2:	480a      	ldr	r0, [pc, #40]	; (801491c <tcp_rexmit_rto+0x40>)
 80148f4:	f006 fdc4 	bl	801b480 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 80148f8:	6878      	ldr	r0, [r7, #4]
 80148fa:	f7ff ff4d 	bl	8014798 <tcp_rexmit_rto_prepare>
 80148fe:	4603      	mov	r3, r0
 8014900:	2b00      	cmp	r3, #0
 8014902:	d102      	bne.n	801490a <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8014904:	6878      	ldr	r0, [r7, #4]
 8014906:	f7ff ffc1 	bl	801488c <tcp_rexmit_rto_commit>
  }
}
 801490a:	bf00      	nop
 801490c:	3708      	adds	r7, #8
 801490e:	46bd      	mov	sp, r7
 8014910:	bd80      	pop	{r7, pc}
 8014912:	bf00      	nop
 8014914:	0801f9f4 	.word	0x0801f9f4
 8014918:	080200d4 	.word	0x080200d4
 801491c:	0801fa48 	.word	0x0801fa48

08014920 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8014920:	b590      	push	{r4, r7, lr}
 8014922:	b085      	sub	sp, #20
 8014924:	af00      	add	r7, sp, #0
 8014926:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8014928:	687b      	ldr	r3, [r7, #4]
 801492a:	2b00      	cmp	r3, #0
 801492c:	d106      	bne.n	801493c <tcp_rexmit+0x1c>
 801492e:	4b2f      	ldr	r3, [pc, #188]	; (80149ec <tcp_rexmit+0xcc>)
 8014930:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8014934:	492e      	ldr	r1, [pc, #184]	; (80149f0 <tcp_rexmit+0xd0>)
 8014936:	482f      	ldr	r0, [pc, #188]	; (80149f4 <tcp_rexmit+0xd4>)
 8014938:	f006 fda2 	bl	801b480 <iprintf>

  if (pcb->unacked == NULL) {
 801493c:	687b      	ldr	r3, [r7, #4]
 801493e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014940:	2b00      	cmp	r3, #0
 8014942:	d102      	bne.n	801494a <tcp_rexmit+0x2a>
    return ERR_VAL;
 8014944:	f06f 0305 	mvn.w	r3, #5
 8014948:	e04c      	b.n	80149e4 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801494a:	687b      	ldr	r3, [r7, #4]
 801494c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801494e:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8014950:	68b8      	ldr	r0, [r7, #8]
 8014952:	f7ff fe11 	bl	8014578 <tcp_output_segment_busy>
 8014956:	4603      	mov	r3, r0
 8014958:	2b00      	cmp	r3, #0
 801495a:	d002      	beq.n	8014962 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 801495c:	f06f 0305 	mvn.w	r3, #5
 8014960:	e040      	b.n	80149e4 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8014962:	68bb      	ldr	r3, [r7, #8]
 8014964:	681a      	ldr	r2, [r3, #0]
 8014966:	687b      	ldr	r3, [r7, #4]
 8014968:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 801496a:	687b      	ldr	r3, [r7, #4]
 801496c:	336c      	adds	r3, #108	; 0x6c
 801496e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8014970:	e002      	b.n	8014978 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8014972:	68fb      	ldr	r3, [r7, #12]
 8014974:	681b      	ldr	r3, [r3, #0]
 8014976:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8014978:	68fb      	ldr	r3, [r7, #12]
 801497a:	681b      	ldr	r3, [r3, #0]
 801497c:	2b00      	cmp	r3, #0
 801497e:	d011      	beq.n	80149a4 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8014980:	68fb      	ldr	r3, [r7, #12]
 8014982:	681b      	ldr	r3, [r3, #0]
 8014984:	691b      	ldr	r3, [r3, #16]
 8014986:	685b      	ldr	r3, [r3, #4]
 8014988:	4618      	mov	r0, r3
 801498a:	f7f9 f8b0 	bl	800daee <lwip_htonl>
 801498e:	4604      	mov	r4, r0
 8014990:	68bb      	ldr	r3, [r7, #8]
 8014992:	691b      	ldr	r3, [r3, #16]
 8014994:	685b      	ldr	r3, [r3, #4]
 8014996:	4618      	mov	r0, r3
 8014998:	f7f9 f8a9 	bl	800daee <lwip_htonl>
 801499c:	4603      	mov	r3, r0
 801499e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 80149a0:	2b00      	cmp	r3, #0
 80149a2:	dbe6      	blt.n	8014972 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 80149a4:	68fb      	ldr	r3, [r7, #12]
 80149a6:	681a      	ldr	r2, [r3, #0]
 80149a8:	68bb      	ldr	r3, [r7, #8]
 80149aa:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 80149ac:	68fb      	ldr	r3, [r7, #12]
 80149ae:	68ba      	ldr	r2, [r7, #8]
 80149b0:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 80149b2:	68bb      	ldr	r3, [r7, #8]
 80149b4:	681b      	ldr	r3, [r3, #0]
 80149b6:	2b00      	cmp	r3, #0
 80149b8:	d103      	bne.n	80149c2 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80149ba:	687b      	ldr	r3, [r7, #4]
 80149bc:	2200      	movs	r2, #0
 80149be:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 80149c2:	687b      	ldr	r3, [r7, #4]
 80149c4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80149c8:	2bff      	cmp	r3, #255	; 0xff
 80149ca:	d007      	beq.n	80149dc <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 80149cc:	687b      	ldr	r3, [r7, #4]
 80149ce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80149d2:	3301      	adds	r3, #1
 80149d4:	b2da      	uxtb	r2, r3
 80149d6:	687b      	ldr	r3, [r7, #4]
 80149d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 80149dc:	687b      	ldr	r3, [r7, #4]
 80149de:	2200      	movs	r2, #0
 80149e0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 80149e2:	2300      	movs	r3, #0
}
 80149e4:	4618      	mov	r0, r3
 80149e6:	3714      	adds	r7, #20
 80149e8:	46bd      	mov	sp, r7
 80149ea:	bd90      	pop	{r4, r7, pc}
 80149ec:	0801f9f4 	.word	0x0801f9f4
 80149f0:	080200f0 	.word	0x080200f0
 80149f4:	0801fa48 	.word	0x0801fa48

080149f8 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 80149f8:	b580      	push	{r7, lr}
 80149fa:	b082      	sub	sp, #8
 80149fc:	af00      	add	r7, sp, #0
 80149fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8014a00:	687b      	ldr	r3, [r7, #4]
 8014a02:	2b00      	cmp	r3, #0
 8014a04:	d106      	bne.n	8014a14 <tcp_rexmit_fast+0x1c>
 8014a06:	4b2a      	ldr	r3, [pc, #168]	; (8014ab0 <tcp_rexmit_fast+0xb8>)
 8014a08:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8014a0c:	4929      	ldr	r1, [pc, #164]	; (8014ab4 <tcp_rexmit_fast+0xbc>)
 8014a0e:	482a      	ldr	r0, [pc, #168]	; (8014ab8 <tcp_rexmit_fast+0xc0>)
 8014a10:	f006 fd36 	bl	801b480 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8014a14:	687b      	ldr	r3, [r7, #4]
 8014a16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014a18:	2b00      	cmp	r3, #0
 8014a1a:	d044      	beq.n	8014aa6 <tcp_rexmit_fast+0xae>
 8014a1c:	687b      	ldr	r3, [r7, #4]
 8014a1e:	8b5b      	ldrh	r3, [r3, #26]
 8014a20:	f003 0304 	and.w	r3, r3, #4
 8014a24:	2b00      	cmp	r3, #0
 8014a26:	d13e      	bne.n	8014aa6 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8014a28:	6878      	ldr	r0, [r7, #4]
 8014a2a:	f7ff ff79 	bl	8014920 <tcp_rexmit>
 8014a2e:	4603      	mov	r3, r0
 8014a30:	2b00      	cmp	r3, #0
 8014a32:	d138      	bne.n	8014aa6 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8014a34:	687b      	ldr	r3, [r7, #4]
 8014a36:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8014a3a:	687b      	ldr	r3, [r7, #4]
 8014a3c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014a40:	4293      	cmp	r3, r2
 8014a42:	bf28      	it	cs
 8014a44:	4613      	movcs	r3, r2
 8014a46:	b29b      	uxth	r3, r3
 8014a48:	0fda      	lsrs	r2, r3, #31
 8014a4a:	4413      	add	r3, r2
 8014a4c:	105b      	asrs	r3, r3, #1
 8014a4e:	b29a      	uxth	r2, r3
 8014a50:	687b      	ldr	r3, [r7, #4]
 8014a52:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8014a56:	687b      	ldr	r3, [r7, #4]
 8014a58:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8014a5c:	461a      	mov	r2, r3
 8014a5e:	687b      	ldr	r3, [r7, #4]
 8014a60:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014a62:	005b      	lsls	r3, r3, #1
 8014a64:	429a      	cmp	r2, r3
 8014a66:	d206      	bcs.n	8014a76 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8014a68:	687b      	ldr	r3, [r7, #4]
 8014a6a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014a6c:	005b      	lsls	r3, r3, #1
 8014a6e:	b29a      	uxth	r2, r3
 8014a70:	687b      	ldr	r3, [r7, #4]
 8014a72:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8014a76:	687b      	ldr	r3, [r7, #4]
 8014a78:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8014a7c:	687b      	ldr	r3, [r7, #4]
 8014a7e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014a80:	4619      	mov	r1, r3
 8014a82:	0049      	lsls	r1, r1, #1
 8014a84:	440b      	add	r3, r1
 8014a86:	b29b      	uxth	r3, r3
 8014a88:	4413      	add	r3, r2
 8014a8a:	b29a      	uxth	r2, r3
 8014a8c:	687b      	ldr	r3, [r7, #4]
 8014a8e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8014a92:	687b      	ldr	r3, [r7, #4]
 8014a94:	8b5b      	ldrh	r3, [r3, #26]
 8014a96:	f043 0304 	orr.w	r3, r3, #4
 8014a9a:	b29a      	uxth	r2, r3
 8014a9c:	687b      	ldr	r3, [r7, #4]
 8014a9e:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8014aa0:	687b      	ldr	r3, [r7, #4]
 8014aa2:	2200      	movs	r2, #0
 8014aa4:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8014aa6:	bf00      	nop
 8014aa8:	3708      	adds	r7, #8
 8014aaa:	46bd      	mov	sp, r7
 8014aac:	bd80      	pop	{r7, pc}
 8014aae:	bf00      	nop
 8014ab0:	0801f9f4 	.word	0x0801f9f4
 8014ab4:	08020108 	.word	0x08020108
 8014ab8:	0801fa48 	.word	0x0801fa48

08014abc <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8014abc:	b580      	push	{r7, lr}
 8014abe:	b086      	sub	sp, #24
 8014ac0:	af00      	add	r7, sp, #0
 8014ac2:	60f8      	str	r0, [r7, #12]
 8014ac4:	607b      	str	r3, [r7, #4]
 8014ac6:	460b      	mov	r3, r1
 8014ac8:	817b      	strh	r3, [r7, #10]
 8014aca:	4613      	mov	r3, r2
 8014acc:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8014ace:	897a      	ldrh	r2, [r7, #10]
 8014ad0:	893b      	ldrh	r3, [r7, #8]
 8014ad2:	4413      	add	r3, r2
 8014ad4:	b29b      	uxth	r3, r3
 8014ad6:	3314      	adds	r3, #20
 8014ad8:	b29b      	uxth	r3, r3
 8014ada:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014ade:	4619      	mov	r1, r3
 8014ae0:	2022      	movs	r0, #34	; 0x22
 8014ae2:	f7fa fa29 	bl	800ef38 <pbuf_alloc>
 8014ae6:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8014ae8:	697b      	ldr	r3, [r7, #20]
 8014aea:	2b00      	cmp	r3, #0
 8014aec:	d04d      	beq.n	8014b8a <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8014aee:	897b      	ldrh	r3, [r7, #10]
 8014af0:	3313      	adds	r3, #19
 8014af2:	697a      	ldr	r2, [r7, #20]
 8014af4:	8952      	ldrh	r2, [r2, #10]
 8014af6:	4293      	cmp	r3, r2
 8014af8:	db06      	blt.n	8014b08 <tcp_output_alloc_header_common+0x4c>
 8014afa:	4b26      	ldr	r3, [pc, #152]	; (8014b94 <tcp_output_alloc_header_common+0xd8>)
 8014afc:	f240 7223 	movw	r2, #1827	; 0x723
 8014b00:	4925      	ldr	r1, [pc, #148]	; (8014b98 <tcp_output_alloc_header_common+0xdc>)
 8014b02:	4826      	ldr	r0, [pc, #152]	; (8014b9c <tcp_output_alloc_header_common+0xe0>)
 8014b04:	f006 fcbc 	bl	801b480 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8014b08:	697b      	ldr	r3, [r7, #20]
 8014b0a:	685b      	ldr	r3, [r3, #4]
 8014b0c:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8014b0e:	8c3b      	ldrh	r3, [r7, #32]
 8014b10:	4618      	mov	r0, r3
 8014b12:	f7f8 ffd7 	bl	800dac4 <lwip_htons>
 8014b16:	4603      	mov	r3, r0
 8014b18:	461a      	mov	r2, r3
 8014b1a:	693b      	ldr	r3, [r7, #16]
 8014b1c:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8014b1e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014b20:	4618      	mov	r0, r3
 8014b22:	f7f8 ffcf 	bl	800dac4 <lwip_htons>
 8014b26:	4603      	mov	r3, r0
 8014b28:	461a      	mov	r2, r3
 8014b2a:	693b      	ldr	r3, [r7, #16]
 8014b2c:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8014b2e:	693b      	ldr	r3, [r7, #16]
 8014b30:	687a      	ldr	r2, [r7, #4]
 8014b32:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8014b34:	68f8      	ldr	r0, [r7, #12]
 8014b36:	f7f8 ffda 	bl	800daee <lwip_htonl>
 8014b3a:	4602      	mov	r2, r0
 8014b3c:	693b      	ldr	r3, [r7, #16]
 8014b3e:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8014b40:	897b      	ldrh	r3, [r7, #10]
 8014b42:	089b      	lsrs	r3, r3, #2
 8014b44:	b29b      	uxth	r3, r3
 8014b46:	3305      	adds	r3, #5
 8014b48:	b29b      	uxth	r3, r3
 8014b4a:	031b      	lsls	r3, r3, #12
 8014b4c:	b29a      	uxth	r2, r3
 8014b4e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8014b52:	b29b      	uxth	r3, r3
 8014b54:	4313      	orrs	r3, r2
 8014b56:	b29b      	uxth	r3, r3
 8014b58:	4618      	mov	r0, r3
 8014b5a:	f7f8 ffb3 	bl	800dac4 <lwip_htons>
 8014b5e:	4603      	mov	r3, r0
 8014b60:	461a      	mov	r2, r3
 8014b62:	693b      	ldr	r3, [r7, #16]
 8014b64:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8014b66:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8014b68:	4618      	mov	r0, r3
 8014b6a:	f7f8 ffab 	bl	800dac4 <lwip_htons>
 8014b6e:	4603      	mov	r3, r0
 8014b70:	461a      	mov	r2, r3
 8014b72:	693b      	ldr	r3, [r7, #16]
 8014b74:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8014b76:	693b      	ldr	r3, [r7, #16]
 8014b78:	2200      	movs	r2, #0
 8014b7a:	741a      	strb	r2, [r3, #16]
 8014b7c:	2200      	movs	r2, #0
 8014b7e:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8014b80:	693b      	ldr	r3, [r7, #16]
 8014b82:	2200      	movs	r2, #0
 8014b84:	749a      	strb	r2, [r3, #18]
 8014b86:	2200      	movs	r2, #0
 8014b88:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8014b8a:	697b      	ldr	r3, [r7, #20]
}
 8014b8c:	4618      	mov	r0, r3
 8014b8e:	3718      	adds	r7, #24
 8014b90:	46bd      	mov	sp, r7
 8014b92:	bd80      	pop	{r7, pc}
 8014b94:	0801f9f4 	.word	0x0801f9f4
 8014b98:	08020128 	.word	0x08020128
 8014b9c:	0801fa48 	.word	0x0801fa48

08014ba0 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8014ba0:	b5b0      	push	{r4, r5, r7, lr}
 8014ba2:	b08a      	sub	sp, #40	; 0x28
 8014ba4:	af04      	add	r7, sp, #16
 8014ba6:	60f8      	str	r0, [r7, #12]
 8014ba8:	607b      	str	r3, [r7, #4]
 8014baa:	460b      	mov	r3, r1
 8014bac:	817b      	strh	r3, [r7, #10]
 8014bae:	4613      	mov	r3, r2
 8014bb0:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8014bb2:	68fb      	ldr	r3, [r7, #12]
 8014bb4:	2b00      	cmp	r3, #0
 8014bb6:	d106      	bne.n	8014bc6 <tcp_output_alloc_header+0x26>
 8014bb8:	4b15      	ldr	r3, [pc, #84]	; (8014c10 <tcp_output_alloc_header+0x70>)
 8014bba:	f240 7242 	movw	r2, #1858	; 0x742
 8014bbe:	4915      	ldr	r1, [pc, #84]	; (8014c14 <tcp_output_alloc_header+0x74>)
 8014bc0:	4815      	ldr	r0, [pc, #84]	; (8014c18 <tcp_output_alloc_header+0x78>)
 8014bc2:	f006 fc5d 	bl	801b480 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8014bc6:	68fb      	ldr	r3, [r7, #12]
 8014bc8:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8014bca:	68fb      	ldr	r3, [r7, #12]
 8014bcc:	8adb      	ldrh	r3, [r3, #22]
 8014bce:	68fa      	ldr	r2, [r7, #12]
 8014bd0:	8b12      	ldrh	r2, [r2, #24]
 8014bd2:	68f9      	ldr	r1, [r7, #12]
 8014bd4:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8014bd6:	893d      	ldrh	r5, [r7, #8]
 8014bd8:	897c      	ldrh	r4, [r7, #10]
 8014bda:	9103      	str	r1, [sp, #12]
 8014bdc:	2110      	movs	r1, #16
 8014bde:	9102      	str	r1, [sp, #8]
 8014be0:	9201      	str	r2, [sp, #4]
 8014be2:	9300      	str	r3, [sp, #0]
 8014be4:	687b      	ldr	r3, [r7, #4]
 8014be6:	462a      	mov	r2, r5
 8014be8:	4621      	mov	r1, r4
 8014bea:	f7ff ff67 	bl	8014abc <tcp_output_alloc_header_common>
 8014bee:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8014bf0:	697b      	ldr	r3, [r7, #20]
 8014bf2:	2b00      	cmp	r3, #0
 8014bf4:	d006      	beq.n	8014c04 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8014bf6:	68fb      	ldr	r3, [r7, #12]
 8014bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014bfa:	68fa      	ldr	r2, [r7, #12]
 8014bfc:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8014bfe:	441a      	add	r2, r3
 8014c00:	68fb      	ldr	r3, [r7, #12]
 8014c02:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8014c04:	697b      	ldr	r3, [r7, #20]
}
 8014c06:	4618      	mov	r0, r3
 8014c08:	3718      	adds	r7, #24
 8014c0a:	46bd      	mov	sp, r7
 8014c0c:	bdb0      	pop	{r4, r5, r7, pc}
 8014c0e:	bf00      	nop
 8014c10:	0801f9f4 	.word	0x0801f9f4
 8014c14:	08020158 	.word	0x08020158
 8014c18:	0801fa48 	.word	0x0801fa48

08014c1c <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8014c1c:	b580      	push	{r7, lr}
 8014c1e:	b088      	sub	sp, #32
 8014c20:	af00      	add	r7, sp, #0
 8014c22:	60f8      	str	r0, [r7, #12]
 8014c24:	60b9      	str	r1, [r7, #8]
 8014c26:	4611      	mov	r1, r2
 8014c28:	461a      	mov	r2, r3
 8014c2a:	460b      	mov	r3, r1
 8014c2c:	71fb      	strb	r3, [r7, #7]
 8014c2e:	4613      	mov	r3, r2
 8014c30:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8014c32:	2300      	movs	r3, #0
 8014c34:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8014c36:	68bb      	ldr	r3, [r7, #8]
 8014c38:	2b00      	cmp	r3, #0
 8014c3a:	d106      	bne.n	8014c4a <tcp_output_fill_options+0x2e>
 8014c3c:	4b13      	ldr	r3, [pc, #76]	; (8014c8c <tcp_output_fill_options+0x70>)
 8014c3e:	f240 7256 	movw	r2, #1878	; 0x756
 8014c42:	4913      	ldr	r1, [pc, #76]	; (8014c90 <tcp_output_fill_options+0x74>)
 8014c44:	4813      	ldr	r0, [pc, #76]	; (8014c94 <tcp_output_fill_options+0x78>)
 8014c46:	f006 fc1b 	bl	801b480 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8014c4a:	68bb      	ldr	r3, [r7, #8]
 8014c4c:	685b      	ldr	r3, [r3, #4]
 8014c4e:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8014c50:	69bb      	ldr	r3, [r7, #24]
 8014c52:	3314      	adds	r3, #20
 8014c54:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8014c56:	69bb      	ldr	r3, [r7, #24]
 8014c58:	f103 0214 	add.w	r2, r3, #20
 8014c5c:	8bfb      	ldrh	r3, [r7, #30]
 8014c5e:	009b      	lsls	r3, r3, #2
 8014c60:	4619      	mov	r1, r3
 8014c62:	79fb      	ldrb	r3, [r7, #7]
 8014c64:	009b      	lsls	r3, r3, #2
 8014c66:	f003 0304 	and.w	r3, r3, #4
 8014c6a:	440b      	add	r3, r1
 8014c6c:	4413      	add	r3, r2
 8014c6e:	697a      	ldr	r2, [r7, #20]
 8014c70:	429a      	cmp	r2, r3
 8014c72:	d006      	beq.n	8014c82 <tcp_output_fill_options+0x66>
 8014c74:	4b05      	ldr	r3, [pc, #20]	; (8014c8c <tcp_output_fill_options+0x70>)
 8014c76:	f240 7275 	movw	r2, #1909	; 0x775
 8014c7a:	4907      	ldr	r1, [pc, #28]	; (8014c98 <tcp_output_fill_options+0x7c>)
 8014c7c:	4805      	ldr	r0, [pc, #20]	; (8014c94 <tcp_output_fill_options+0x78>)
 8014c7e:	f006 fbff 	bl	801b480 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8014c82:	bf00      	nop
 8014c84:	3720      	adds	r7, #32
 8014c86:	46bd      	mov	sp, r7
 8014c88:	bd80      	pop	{r7, pc}
 8014c8a:	bf00      	nop
 8014c8c:	0801f9f4 	.word	0x0801f9f4
 8014c90:	08020180 	.word	0x08020180
 8014c94:	0801fa48 	.word	0x0801fa48
 8014c98:	08020078 	.word	0x08020078

08014c9c <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8014c9c:	b580      	push	{r7, lr}
 8014c9e:	b08c      	sub	sp, #48	; 0x30
 8014ca0:	af04      	add	r7, sp, #16
 8014ca2:	60f8      	str	r0, [r7, #12]
 8014ca4:	60b9      	str	r1, [r7, #8]
 8014ca6:	607a      	str	r2, [r7, #4]
 8014ca8:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8014caa:	68bb      	ldr	r3, [r7, #8]
 8014cac:	2b00      	cmp	r3, #0
 8014cae:	d106      	bne.n	8014cbe <tcp_output_control_segment+0x22>
 8014cb0:	4b24      	ldr	r3, [pc, #144]	; (8014d44 <tcp_output_control_segment+0xa8>)
 8014cb2:	f240 7287 	movw	r2, #1927	; 0x787
 8014cb6:	4924      	ldr	r1, [pc, #144]	; (8014d48 <tcp_output_control_segment+0xac>)
 8014cb8:	4824      	ldr	r0, [pc, #144]	; (8014d4c <tcp_output_control_segment+0xb0>)
 8014cba:	f006 fbe1 	bl	801b480 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8014cbe:	683a      	ldr	r2, [r7, #0]
 8014cc0:	6879      	ldr	r1, [r7, #4]
 8014cc2:	68f8      	ldr	r0, [r7, #12]
 8014cc4:	f7fe ff1c 	bl	8013b00 <tcp_route>
 8014cc8:	61b8      	str	r0, [r7, #24]
  if (netif == NULL) {
 8014cca:	69bb      	ldr	r3, [r7, #24]
 8014ccc:	2b00      	cmp	r3, #0
 8014cce:	d102      	bne.n	8014cd6 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8014cd0:	23fc      	movs	r3, #252	; 0xfc
 8014cd2:	77fb      	strb	r3, [r7, #31]
 8014cd4:	e02c      	b.n	8014d30 <tcp_output_control_segment+0x94>
  } else {
    u8_t ttl, tos;
#if CHECKSUM_GEN_TCP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_TCP) {
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
 8014cd6:	68bb      	ldr	r3, [r7, #8]
 8014cd8:	685b      	ldr	r3, [r3, #4]
 8014cda:	617b      	str	r3, [r7, #20]
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 8014cdc:	68bb      	ldr	r3, [r7, #8]
 8014cde:	891a      	ldrh	r2, [r3, #8]
 8014ce0:	683b      	ldr	r3, [r7, #0]
 8014ce2:	9300      	str	r3, [sp, #0]
 8014ce4:	687b      	ldr	r3, [r7, #4]
 8014ce6:	2106      	movs	r1, #6
 8014ce8:	68b8      	ldr	r0, [r7, #8]
 8014cea:	f7f9 f81d 	bl	800dd28 <ip_chksum_pseudo>
 8014cee:	4603      	mov	r3, r0
 8014cf0:	461a      	mov	r2, r3
 8014cf2:	697b      	ldr	r3, [r7, #20]
 8014cf4:	821a      	strh	r2, [r3, #16]
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8014cf6:	68fb      	ldr	r3, [r7, #12]
 8014cf8:	2b00      	cmp	r3, #0
 8014cfa:	d006      	beq.n	8014d0a <tcp_output_control_segment+0x6e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8014cfc:	68fb      	ldr	r3, [r7, #12]
 8014cfe:	7adb      	ldrb	r3, [r3, #11]
 8014d00:	77bb      	strb	r3, [r7, #30]
      tos = pcb->tos;
 8014d02:	68fb      	ldr	r3, [r7, #12]
 8014d04:	7a9b      	ldrb	r3, [r3, #10]
 8014d06:	777b      	strb	r3, [r7, #29]
 8014d08:	e003      	b.n	8014d12 <tcp_output_control_segment+0x76>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8014d0a:	23ff      	movs	r3, #255	; 0xff
 8014d0c:	77bb      	strb	r3, [r7, #30]
      tos = 0;
 8014d0e:	2300      	movs	r3, #0
 8014d10:	777b      	strb	r3, [r7, #29]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8014d12:	7fba      	ldrb	r2, [r7, #30]
 8014d14:	69bb      	ldr	r3, [r7, #24]
 8014d16:	9302      	str	r3, [sp, #8]
 8014d18:	2306      	movs	r3, #6
 8014d1a:	9301      	str	r3, [sp, #4]
 8014d1c:	7f7b      	ldrb	r3, [r7, #29]
 8014d1e:	9300      	str	r3, [sp, #0]
 8014d20:	4613      	mov	r3, r2
 8014d22:	683a      	ldr	r2, [r7, #0]
 8014d24:	6879      	ldr	r1, [r7, #4]
 8014d26:	68b8      	ldr	r0, [r7, #8]
 8014d28:	f004 fb06 	bl	8019338 <ip4_output_if>
 8014d2c:	4603      	mov	r3, r0
 8014d2e:	77fb      	strb	r3, [r7, #31]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8014d30:	68b8      	ldr	r0, [r7, #8]
 8014d32:	f7fa fbe9 	bl	800f508 <pbuf_free>
  return err;
 8014d36:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8014d3a:	4618      	mov	r0, r3
 8014d3c:	3720      	adds	r7, #32
 8014d3e:	46bd      	mov	sp, r7
 8014d40:	bd80      	pop	{r7, pc}
 8014d42:	bf00      	nop
 8014d44:	0801f9f4 	.word	0x0801f9f4
 8014d48:	080201a8 	.word	0x080201a8
 8014d4c:	0801fa48 	.word	0x0801fa48

08014d50 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8014d50:	b590      	push	{r4, r7, lr}
 8014d52:	b08b      	sub	sp, #44	; 0x2c
 8014d54:	af04      	add	r7, sp, #16
 8014d56:	60f8      	str	r0, [r7, #12]
 8014d58:	60b9      	str	r1, [r7, #8]
 8014d5a:	607a      	str	r2, [r7, #4]
 8014d5c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8014d5e:	683b      	ldr	r3, [r7, #0]
 8014d60:	2b00      	cmp	r3, #0
 8014d62:	d106      	bne.n	8014d72 <tcp_rst+0x22>
 8014d64:	4b1f      	ldr	r3, [pc, #124]	; (8014de4 <tcp_rst+0x94>)
 8014d66:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8014d6a:	491f      	ldr	r1, [pc, #124]	; (8014de8 <tcp_rst+0x98>)
 8014d6c:	481f      	ldr	r0, [pc, #124]	; (8014dec <tcp_rst+0x9c>)
 8014d6e:	f006 fb87 	bl	801b480 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8014d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d74:	2b00      	cmp	r3, #0
 8014d76:	d106      	bne.n	8014d86 <tcp_rst+0x36>
 8014d78:	4b1a      	ldr	r3, [pc, #104]	; (8014de4 <tcp_rst+0x94>)
 8014d7a:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8014d7e:	491c      	ldr	r1, [pc, #112]	; (8014df0 <tcp_rst+0xa0>)
 8014d80:	481a      	ldr	r0, [pc, #104]	; (8014dec <tcp_rst+0x9c>)
 8014d82:	f006 fb7d 	bl	801b480 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8014d86:	2300      	movs	r3, #0
 8014d88:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8014d8a:	f24a 032d 	movw	r3, #41005	; 0xa02d
 8014d8e:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8014d90:	7dfb      	ldrb	r3, [r7, #23]
 8014d92:	b29c      	uxth	r4, r3
 8014d94:	68b8      	ldr	r0, [r7, #8]
 8014d96:	f7f8 feaa 	bl	800daee <lwip_htonl>
 8014d9a:	4602      	mov	r2, r0
 8014d9c:	8abb      	ldrh	r3, [r7, #20]
 8014d9e:	9303      	str	r3, [sp, #12]
 8014da0:	2314      	movs	r3, #20
 8014da2:	9302      	str	r3, [sp, #8]
 8014da4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8014da6:	9301      	str	r3, [sp, #4]
 8014da8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8014daa:	9300      	str	r3, [sp, #0]
 8014dac:	4613      	mov	r3, r2
 8014dae:	2200      	movs	r2, #0
 8014db0:	4621      	mov	r1, r4
 8014db2:	6878      	ldr	r0, [r7, #4]
 8014db4:	f7ff fe82 	bl	8014abc <tcp_output_alloc_header_common>
 8014db8:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8014dba:	693b      	ldr	r3, [r7, #16]
 8014dbc:	2b00      	cmp	r3, #0
 8014dbe:	d00c      	beq.n	8014dda <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8014dc0:	7dfb      	ldrb	r3, [r7, #23]
 8014dc2:	2200      	movs	r2, #0
 8014dc4:	6939      	ldr	r1, [r7, #16]
 8014dc6:	68f8      	ldr	r0, [r7, #12]
 8014dc8:	f7ff ff28 	bl	8014c1c <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8014dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014dce:	683a      	ldr	r2, [r7, #0]
 8014dd0:	6939      	ldr	r1, [r7, #16]
 8014dd2:	68f8      	ldr	r0, [r7, #12]
 8014dd4:	f7ff ff62 	bl	8014c9c <tcp_output_control_segment>
 8014dd8:	e000      	b.n	8014ddc <tcp_rst+0x8c>
    return;
 8014dda:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8014ddc:	371c      	adds	r7, #28
 8014dde:	46bd      	mov	sp, r7
 8014de0:	bd90      	pop	{r4, r7, pc}
 8014de2:	bf00      	nop
 8014de4:	0801f9f4 	.word	0x0801f9f4
 8014de8:	080201d4 	.word	0x080201d4
 8014dec:	0801fa48 	.word	0x0801fa48
 8014df0:	080201f0 	.word	0x080201f0

08014df4 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8014df4:	b590      	push	{r4, r7, lr}
 8014df6:	b087      	sub	sp, #28
 8014df8:	af00      	add	r7, sp, #0
 8014dfa:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8014dfc:	2300      	movs	r3, #0
 8014dfe:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8014e00:	2300      	movs	r3, #0
 8014e02:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8014e04:	687b      	ldr	r3, [r7, #4]
 8014e06:	2b00      	cmp	r3, #0
 8014e08:	d106      	bne.n	8014e18 <tcp_send_empty_ack+0x24>
 8014e0a:	4b28      	ldr	r3, [pc, #160]	; (8014eac <tcp_send_empty_ack+0xb8>)
 8014e0c:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8014e10:	4927      	ldr	r1, [pc, #156]	; (8014eb0 <tcp_send_empty_ack+0xbc>)
 8014e12:	4828      	ldr	r0, [pc, #160]	; (8014eb4 <tcp_send_empty_ack+0xc0>)
 8014e14:	f006 fb34 	bl	801b480 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8014e18:	7dfb      	ldrb	r3, [r7, #23]
 8014e1a:	009b      	lsls	r3, r3, #2
 8014e1c:	b2db      	uxtb	r3, r3
 8014e1e:	f003 0304 	and.w	r3, r3, #4
 8014e22:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8014e24:	7d7b      	ldrb	r3, [r7, #21]
 8014e26:	b29c      	uxth	r4, r3
 8014e28:	687b      	ldr	r3, [r7, #4]
 8014e2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014e2c:	4618      	mov	r0, r3
 8014e2e:	f7f8 fe5e 	bl	800daee <lwip_htonl>
 8014e32:	4603      	mov	r3, r0
 8014e34:	2200      	movs	r2, #0
 8014e36:	4621      	mov	r1, r4
 8014e38:	6878      	ldr	r0, [r7, #4]
 8014e3a:	f7ff feb1 	bl	8014ba0 <tcp_output_alloc_header>
 8014e3e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8014e40:	693b      	ldr	r3, [r7, #16]
 8014e42:	2b00      	cmp	r3, #0
 8014e44:	d109      	bne.n	8014e5a <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014e46:	687b      	ldr	r3, [r7, #4]
 8014e48:	8b5b      	ldrh	r3, [r3, #26]
 8014e4a:	f043 0303 	orr.w	r3, r3, #3
 8014e4e:	b29a      	uxth	r2, r3
 8014e50:	687b      	ldr	r3, [r7, #4]
 8014e52:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8014e54:	f06f 0301 	mvn.w	r3, #1
 8014e58:	e023      	b.n	8014ea2 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8014e5a:	7dbb      	ldrb	r3, [r7, #22]
 8014e5c:	7dfa      	ldrb	r2, [r7, #23]
 8014e5e:	6939      	ldr	r1, [r7, #16]
 8014e60:	6878      	ldr	r0, [r7, #4]
 8014e62:	f7ff fedb 	bl	8014c1c <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8014e66:	687a      	ldr	r2, [r7, #4]
 8014e68:	687b      	ldr	r3, [r7, #4]
 8014e6a:	3304      	adds	r3, #4
 8014e6c:	6939      	ldr	r1, [r7, #16]
 8014e6e:	6878      	ldr	r0, [r7, #4]
 8014e70:	f7ff ff14 	bl	8014c9c <tcp_output_control_segment>
 8014e74:	4603      	mov	r3, r0
 8014e76:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8014e78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014e7c:	2b00      	cmp	r3, #0
 8014e7e:	d007      	beq.n	8014e90 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014e80:	687b      	ldr	r3, [r7, #4]
 8014e82:	8b5b      	ldrh	r3, [r3, #26]
 8014e84:	f043 0303 	orr.w	r3, r3, #3
 8014e88:	b29a      	uxth	r2, r3
 8014e8a:	687b      	ldr	r3, [r7, #4]
 8014e8c:	835a      	strh	r2, [r3, #26]
 8014e8e:	e006      	b.n	8014e9e <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014e90:	687b      	ldr	r3, [r7, #4]
 8014e92:	8b5b      	ldrh	r3, [r3, #26]
 8014e94:	f023 0303 	bic.w	r3, r3, #3
 8014e98:	b29a      	uxth	r2, r3
 8014e9a:	687b      	ldr	r3, [r7, #4]
 8014e9c:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8014e9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014ea2:	4618      	mov	r0, r3
 8014ea4:	371c      	adds	r7, #28
 8014ea6:	46bd      	mov	sp, r7
 8014ea8:	bd90      	pop	{r4, r7, pc}
 8014eaa:	bf00      	nop
 8014eac:	0801f9f4 	.word	0x0801f9f4
 8014eb0:	0802020c 	.word	0x0802020c
 8014eb4:	0801fa48 	.word	0x0801fa48

08014eb8 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8014eb8:	b590      	push	{r4, r7, lr}
 8014eba:	b085      	sub	sp, #20
 8014ebc:	af00      	add	r7, sp, #0
 8014ebe:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8014ec0:	2300      	movs	r3, #0
 8014ec2:	72bb      	strb	r3, [r7, #10]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8014ec4:	687b      	ldr	r3, [r7, #4]
 8014ec6:	2b00      	cmp	r3, #0
 8014ec8:	d106      	bne.n	8014ed8 <tcp_keepalive+0x20>
 8014eca:	4b18      	ldr	r3, [pc, #96]	; (8014f2c <tcp_keepalive+0x74>)
 8014ecc:	f640 0224 	movw	r2, #2084	; 0x824
 8014ed0:	4917      	ldr	r1, [pc, #92]	; (8014f30 <tcp_keepalive+0x78>)
 8014ed2:	4818      	ldr	r0, [pc, #96]	; (8014f34 <tcp_keepalive+0x7c>)
 8014ed4:	f006 fad4 	bl	801b480 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8014ed8:	7abb      	ldrb	r3, [r7, #10]
 8014eda:	b29c      	uxth	r4, r3
 8014edc:	687b      	ldr	r3, [r7, #4]
 8014ede:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014ee0:	3b01      	subs	r3, #1
 8014ee2:	4618      	mov	r0, r3
 8014ee4:	f7f8 fe03 	bl	800daee <lwip_htonl>
 8014ee8:	4603      	mov	r3, r0
 8014eea:	2200      	movs	r2, #0
 8014eec:	4621      	mov	r1, r4
 8014eee:	6878      	ldr	r0, [r7, #4]
 8014ef0:	f7ff fe56 	bl	8014ba0 <tcp_output_alloc_header>
 8014ef4:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8014ef6:	68fb      	ldr	r3, [r7, #12]
 8014ef8:	2b00      	cmp	r3, #0
 8014efa:	d102      	bne.n	8014f02 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8014efc:	f04f 33ff 	mov.w	r3, #4294967295
 8014f00:	e010      	b.n	8014f24 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8014f02:	7abb      	ldrb	r3, [r7, #10]
 8014f04:	2200      	movs	r2, #0
 8014f06:	68f9      	ldr	r1, [r7, #12]
 8014f08:	6878      	ldr	r0, [r7, #4]
 8014f0a:	f7ff fe87 	bl	8014c1c <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8014f0e:	687a      	ldr	r2, [r7, #4]
 8014f10:	687b      	ldr	r3, [r7, #4]
 8014f12:	3304      	adds	r3, #4
 8014f14:	68f9      	ldr	r1, [r7, #12]
 8014f16:	6878      	ldr	r0, [r7, #4]
 8014f18:	f7ff fec0 	bl	8014c9c <tcp_output_control_segment>
 8014f1c:	4603      	mov	r3, r0
 8014f1e:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8014f20:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8014f24:	4618      	mov	r0, r3
 8014f26:	3714      	adds	r7, #20
 8014f28:	46bd      	mov	sp, r7
 8014f2a:	bd90      	pop	{r4, r7, pc}
 8014f2c:	0801f9f4 	.word	0x0801f9f4
 8014f30:	0802022c 	.word	0x0802022c
 8014f34:	0801fa48 	.word	0x0801fa48

08014f38 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8014f38:	b590      	push	{r4, r7, lr}
 8014f3a:	b08b      	sub	sp, #44	; 0x2c
 8014f3c:	af00      	add	r7, sp, #0
 8014f3e:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8014f40:	2300      	movs	r3, #0
 8014f42:	74fb      	strb	r3, [r7, #19]

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8014f44:	687b      	ldr	r3, [r7, #4]
 8014f46:	2b00      	cmp	r3, #0
 8014f48:	d106      	bne.n	8014f58 <tcp_zero_window_probe+0x20>
 8014f4a:	4b4d      	ldr	r3, [pc, #308]	; (8015080 <tcp_zero_window_probe+0x148>)
 8014f4c:	f640 024f 	movw	r2, #2127	; 0x84f
 8014f50:	494c      	ldr	r1, [pc, #304]	; (8015084 <tcp_zero_window_probe+0x14c>)
 8014f52:	484d      	ldr	r0, [pc, #308]	; (8015088 <tcp_zero_window_probe+0x150>)
 8014f54:	f006 fa94 	bl	801b480 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8014f58:	687b      	ldr	r3, [r7, #4]
 8014f5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014f5c:	627b      	str	r3, [r7, #36]	; 0x24
  if (seg == NULL) {
 8014f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f60:	2b00      	cmp	r3, #0
 8014f62:	d101      	bne.n	8014f68 <tcp_zero_window_probe+0x30>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8014f64:	2300      	movs	r3, #0
 8014f66:	e087      	b.n	8015078 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8014f68:	687b      	ldr	r3, [r7, #4]
 8014f6a:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8014f6e:	2bff      	cmp	r3, #255	; 0xff
 8014f70:	d007      	beq.n	8014f82 <tcp_zero_window_probe+0x4a>
    ++pcb->persist_probe;
 8014f72:	687b      	ldr	r3, [r7, #4]
 8014f74:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8014f78:	3301      	adds	r3, #1
 8014f7a:	b2da      	uxtb	r2, r3
 8014f7c:	687b      	ldr	r3, [r7, #4]
 8014f7e:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8014f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f84:	691b      	ldr	r3, [r3, #16]
 8014f86:	899b      	ldrh	r3, [r3, #12]
 8014f88:	b29b      	uxth	r3, r3
 8014f8a:	4618      	mov	r0, r3
 8014f8c:	f7f8 fd9a 	bl	800dac4 <lwip_htons>
 8014f90:	4603      	mov	r3, r0
 8014f92:	b2db      	uxtb	r3, r3
 8014f94:	f003 0301 	and.w	r3, r3, #1
 8014f98:	2b00      	cmp	r3, #0
 8014f9a:	d005      	beq.n	8014fa8 <tcp_zero_window_probe+0x70>
 8014f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f9e:	891b      	ldrh	r3, [r3, #8]
 8014fa0:	2b00      	cmp	r3, #0
 8014fa2:	d101      	bne.n	8014fa8 <tcp_zero_window_probe+0x70>
 8014fa4:	2301      	movs	r3, #1
 8014fa6:	e000      	b.n	8014faa <tcp_zero_window_probe+0x72>
 8014fa8:	2300      	movs	r3, #0
 8014faa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8014fae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8014fb2:	2b00      	cmp	r3, #0
 8014fb4:	bf0c      	ite	eq
 8014fb6:	2301      	moveq	r3, #1
 8014fb8:	2300      	movne	r3, #0
 8014fba:	b2db      	uxtb	r3, r3
 8014fbc:	843b      	strh	r3, [r7, #32]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8014fbe:	7cfb      	ldrb	r3, [r7, #19]
 8014fc0:	b299      	uxth	r1, r3
 8014fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fc4:	691b      	ldr	r3, [r3, #16]
 8014fc6:	685b      	ldr	r3, [r3, #4]
 8014fc8:	8c3a      	ldrh	r2, [r7, #32]
 8014fca:	6878      	ldr	r0, [r7, #4]
 8014fcc:	f7ff fde8 	bl	8014ba0 <tcp_output_alloc_header>
 8014fd0:	61f8      	str	r0, [r7, #28]
  if (p == NULL) {
 8014fd2:	69fb      	ldr	r3, [r7, #28]
 8014fd4:	2b00      	cmp	r3, #0
 8014fd6:	d102      	bne.n	8014fde <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8014fd8:	f04f 33ff 	mov.w	r3, #4294967295
 8014fdc:	e04c      	b.n	8015078 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8014fde:	69fb      	ldr	r3, [r7, #28]
 8014fe0:	685b      	ldr	r3, [r3, #4]
 8014fe2:	61bb      	str	r3, [r7, #24]

  if (is_fin) {
 8014fe4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8014fe8:	2b00      	cmp	r3, #0
 8014fea:	d011      	beq.n	8015010 <tcp_zero_window_probe+0xd8>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8014fec:	69bb      	ldr	r3, [r7, #24]
 8014fee:	899b      	ldrh	r3, [r3, #12]
 8014ff0:	b29b      	uxth	r3, r3
 8014ff2:	b21b      	sxth	r3, r3
 8014ff4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8014ff8:	b21c      	sxth	r4, r3
 8014ffa:	2011      	movs	r0, #17
 8014ffc:	f7f8 fd62 	bl	800dac4 <lwip_htons>
 8015000:	4603      	mov	r3, r0
 8015002:	b21b      	sxth	r3, r3
 8015004:	4323      	orrs	r3, r4
 8015006:	b21b      	sxth	r3, r3
 8015008:	b29a      	uxth	r2, r3
 801500a:	69bb      	ldr	r3, [r7, #24]
 801500c:	819a      	strh	r2, [r3, #12]
 801500e:	e010      	b.n	8015032 <tcp_zero_window_probe+0xfa>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8015010:	69fb      	ldr	r3, [r7, #28]
 8015012:	685b      	ldr	r3, [r3, #4]
 8015014:	3314      	adds	r3, #20
 8015016:	617b      	str	r3, [r7, #20]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8015018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801501a:	6858      	ldr	r0, [r3, #4]
 801501c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801501e:	685b      	ldr	r3, [r3, #4]
 8015020:	891a      	ldrh	r2, [r3, #8]
 8015022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015024:	891b      	ldrh	r3, [r3, #8]
 8015026:	1ad3      	subs	r3, r2, r3
 8015028:	b29b      	uxth	r3, r3
 801502a:	2201      	movs	r2, #1
 801502c:	6979      	ldr	r1, [r7, #20]
 801502e:	f7fa fc71 	bl	800f914 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8015032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015034:	691b      	ldr	r3, [r3, #16]
 8015036:	685b      	ldr	r3, [r3, #4]
 8015038:	4618      	mov	r0, r3
 801503a:	f7f8 fd58 	bl	800daee <lwip_htonl>
 801503e:	4603      	mov	r3, r0
 8015040:	3301      	adds	r3, #1
 8015042:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8015044:	687b      	ldr	r3, [r7, #4]
 8015046:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8015048:	68fb      	ldr	r3, [r7, #12]
 801504a:	1ad3      	subs	r3, r2, r3
 801504c:	2b00      	cmp	r3, #0
 801504e:	da02      	bge.n	8015056 <tcp_zero_window_probe+0x11e>
    pcb->snd_nxt = snd_nxt;
 8015050:	687b      	ldr	r3, [r7, #4]
 8015052:	68fa      	ldr	r2, [r7, #12]
 8015054:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8015056:	7cfb      	ldrb	r3, [r7, #19]
 8015058:	2200      	movs	r2, #0
 801505a:	69f9      	ldr	r1, [r7, #28]
 801505c:	6878      	ldr	r0, [r7, #4]
 801505e:	f7ff fddd 	bl	8014c1c <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8015062:	687a      	ldr	r2, [r7, #4]
 8015064:	687b      	ldr	r3, [r7, #4]
 8015066:	3304      	adds	r3, #4
 8015068:	69f9      	ldr	r1, [r7, #28]
 801506a:	6878      	ldr	r0, [r7, #4]
 801506c:	f7ff fe16 	bl	8014c9c <tcp_output_control_segment>
 8015070:	4603      	mov	r3, r0
 8015072:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8015074:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8015078:	4618      	mov	r0, r3
 801507a:	372c      	adds	r7, #44	; 0x2c
 801507c:	46bd      	mov	sp, r7
 801507e:	bd90      	pop	{r4, r7, pc}
 8015080:	0801f9f4 	.word	0x0801f9f4
 8015084:	08020248 	.word	0x08020248
 8015088:	0801fa48 	.word	0x0801fa48

0801508c <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 801508c:	b580      	push	{r7, lr}
 801508e:	b082      	sub	sp, #8
 8015090:	af00      	add	r7, sp, #0
 8015092:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8015094:	f7fa fec0 	bl	800fe18 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8015098:	4b0a      	ldr	r3, [pc, #40]	; (80150c4 <tcpip_tcp_timer+0x38>)
 801509a:	681b      	ldr	r3, [r3, #0]
 801509c:	2b00      	cmp	r3, #0
 801509e:	d103      	bne.n	80150a8 <tcpip_tcp_timer+0x1c>
 80150a0:	4b09      	ldr	r3, [pc, #36]	; (80150c8 <tcpip_tcp_timer+0x3c>)
 80150a2:	681b      	ldr	r3, [r3, #0]
 80150a4:	2b00      	cmp	r3, #0
 80150a6:	d005      	beq.n	80150b4 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80150a8:	2200      	movs	r2, #0
 80150aa:	4908      	ldr	r1, [pc, #32]	; (80150cc <tcpip_tcp_timer+0x40>)
 80150ac:	20fa      	movs	r0, #250	; 0xfa
 80150ae:	f000 f8f3 	bl	8015298 <sys_timeout>
 80150b2:	e003      	b.n	80150bc <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 80150b4:	4b06      	ldr	r3, [pc, #24]	; (80150d0 <tcpip_tcp_timer+0x44>)
 80150b6:	2200      	movs	r2, #0
 80150b8:	601a      	str	r2, [r3, #0]
  }
}
 80150ba:	bf00      	nop
 80150bc:	bf00      	nop
 80150be:	3708      	adds	r7, #8
 80150c0:	46bd      	mov	sp, r7
 80150c2:	bd80      	pop	{r7, pc}
 80150c4:	20013b80 	.word	0x20013b80
 80150c8:	20013b84 	.word	0x20013b84
 80150cc:	0801508d 	.word	0x0801508d
 80150d0:	20013bd0 	.word	0x20013bd0

080150d4 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 80150d4:	b580      	push	{r7, lr}
 80150d6:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 80150d8:	4b0a      	ldr	r3, [pc, #40]	; (8015104 <tcp_timer_needed+0x30>)
 80150da:	681b      	ldr	r3, [r3, #0]
 80150dc:	2b00      	cmp	r3, #0
 80150de:	d10f      	bne.n	8015100 <tcp_timer_needed+0x2c>
 80150e0:	4b09      	ldr	r3, [pc, #36]	; (8015108 <tcp_timer_needed+0x34>)
 80150e2:	681b      	ldr	r3, [r3, #0]
 80150e4:	2b00      	cmp	r3, #0
 80150e6:	d103      	bne.n	80150f0 <tcp_timer_needed+0x1c>
 80150e8:	4b08      	ldr	r3, [pc, #32]	; (801510c <tcp_timer_needed+0x38>)
 80150ea:	681b      	ldr	r3, [r3, #0]
 80150ec:	2b00      	cmp	r3, #0
 80150ee:	d007      	beq.n	8015100 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 80150f0:	4b04      	ldr	r3, [pc, #16]	; (8015104 <tcp_timer_needed+0x30>)
 80150f2:	2201      	movs	r2, #1
 80150f4:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80150f6:	2200      	movs	r2, #0
 80150f8:	4905      	ldr	r1, [pc, #20]	; (8015110 <tcp_timer_needed+0x3c>)
 80150fa:	20fa      	movs	r0, #250	; 0xfa
 80150fc:	f000 f8cc 	bl	8015298 <sys_timeout>
  }
}
 8015100:	bf00      	nop
 8015102:	bd80      	pop	{r7, pc}
 8015104:	20013bd0 	.word	0x20013bd0
 8015108:	20013b80 	.word	0x20013b80
 801510c:	20013b84 	.word	0x20013b84
 8015110:	0801508d 	.word	0x0801508d

08015114 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8015114:	b580      	push	{r7, lr}
 8015116:	b086      	sub	sp, #24
 8015118:	af00      	add	r7, sp, #0
 801511a:	60f8      	str	r0, [r7, #12]
 801511c:	60b9      	str	r1, [r7, #8]
 801511e:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8015120:	200a      	movs	r0, #10
 8015122:	f7f9 fafd 	bl	800e720 <memp_malloc>
 8015126:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8015128:	693b      	ldr	r3, [r7, #16]
 801512a:	2b00      	cmp	r3, #0
 801512c:	d109      	bne.n	8015142 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801512e:	693b      	ldr	r3, [r7, #16]
 8015130:	2b00      	cmp	r3, #0
 8015132:	d151      	bne.n	80151d8 <sys_timeout_abs+0xc4>
 8015134:	4b2a      	ldr	r3, [pc, #168]	; (80151e0 <sys_timeout_abs+0xcc>)
 8015136:	22be      	movs	r2, #190	; 0xbe
 8015138:	492a      	ldr	r1, [pc, #168]	; (80151e4 <sys_timeout_abs+0xd0>)
 801513a:	482b      	ldr	r0, [pc, #172]	; (80151e8 <sys_timeout_abs+0xd4>)
 801513c:	f006 f9a0 	bl	801b480 <iprintf>
    return;
 8015140:	e04a      	b.n	80151d8 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8015142:	693b      	ldr	r3, [r7, #16]
 8015144:	2200      	movs	r2, #0
 8015146:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8015148:	693b      	ldr	r3, [r7, #16]
 801514a:	68ba      	ldr	r2, [r7, #8]
 801514c:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801514e:	693b      	ldr	r3, [r7, #16]
 8015150:	687a      	ldr	r2, [r7, #4]
 8015152:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8015154:	693b      	ldr	r3, [r7, #16]
 8015156:	68fa      	ldr	r2, [r7, #12]
 8015158:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801515a:	4b24      	ldr	r3, [pc, #144]	; (80151ec <sys_timeout_abs+0xd8>)
 801515c:	681b      	ldr	r3, [r3, #0]
 801515e:	2b00      	cmp	r3, #0
 8015160:	d103      	bne.n	801516a <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8015162:	4a22      	ldr	r2, [pc, #136]	; (80151ec <sys_timeout_abs+0xd8>)
 8015164:	693b      	ldr	r3, [r7, #16]
 8015166:	6013      	str	r3, [r2, #0]
    return;
 8015168:	e037      	b.n	80151da <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801516a:	693b      	ldr	r3, [r7, #16]
 801516c:	685a      	ldr	r2, [r3, #4]
 801516e:	4b1f      	ldr	r3, [pc, #124]	; (80151ec <sys_timeout_abs+0xd8>)
 8015170:	681b      	ldr	r3, [r3, #0]
 8015172:	685b      	ldr	r3, [r3, #4]
 8015174:	1ad3      	subs	r3, r2, r3
 8015176:	0fdb      	lsrs	r3, r3, #31
 8015178:	f003 0301 	and.w	r3, r3, #1
 801517c:	b2db      	uxtb	r3, r3
 801517e:	2b00      	cmp	r3, #0
 8015180:	d007      	beq.n	8015192 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8015182:	4b1a      	ldr	r3, [pc, #104]	; (80151ec <sys_timeout_abs+0xd8>)
 8015184:	681a      	ldr	r2, [r3, #0]
 8015186:	693b      	ldr	r3, [r7, #16]
 8015188:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801518a:	4a18      	ldr	r2, [pc, #96]	; (80151ec <sys_timeout_abs+0xd8>)
 801518c:	693b      	ldr	r3, [r7, #16]
 801518e:	6013      	str	r3, [r2, #0]
 8015190:	e023      	b.n	80151da <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8015192:	4b16      	ldr	r3, [pc, #88]	; (80151ec <sys_timeout_abs+0xd8>)
 8015194:	681b      	ldr	r3, [r3, #0]
 8015196:	617b      	str	r3, [r7, #20]
 8015198:	e01a      	b.n	80151d0 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801519a:	697b      	ldr	r3, [r7, #20]
 801519c:	681b      	ldr	r3, [r3, #0]
 801519e:	2b00      	cmp	r3, #0
 80151a0:	d00b      	beq.n	80151ba <sys_timeout_abs+0xa6>
 80151a2:	693b      	ldr	r3, [r7, #16]
 80151a4:	685a      	ldr	r2, [r3, #4]
 80151a6:	697b      	ldr	r3, [r7, #20]
 80151a8:	681b      	ldr	r3, [r3, #0]
 80151aa:	685b      	ldr	r3, [r3, #4]
 80151ac:	1ad3      	subs	r3, r2, r3
 80151ae:	0fdb      	lsrs	r3, r3, #31
 80151b0:	f003 0301 	and.w	r3, r3, #1
 80151b4:	b2db      	uxtb	r3, r3
 80151b6:	2b00      	cmp	r3, #0
 80151b8:	d007      	beq.n	80151ca <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 80151ba:	697b      	ldr	r3, [r7, #20]
 80151bc:	681a      	ldr	r2, [r3, #0]
 80151be:	693b      	ldr	r3, [r7, #16]
 80151c0:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 80151c2:	697b      	ldr	r3, [r7, #20]
 80151c4:	693a      	ldr	r2, [r7, #16]
 80151c6:	601a      	str	r2, [r3, #0]
        break;
 80151c8:	e007      	b.n	80151da <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 80151ca:	697b      	ldr	r3, [r7, #20]
 80151cc:	681b      	ldr	r3, [r3, #0]
 80151ce:	617b      	str	r3, [r7, #20]
 80151d0:	697b      	ldr	r3, [r7, #20]
 80151d2:	2b00      	cmp	r3, #0
 80151d4:	d1e1      	bne.n	801519a <sys_timeout_abs+0x86>
 80151d6:	e000      	b.n	80151da <sys_timeout_abs+0xc6>
    return;
 80151d8:	bf00      	nop
      }
    }
  }
}
 80151da:	3718      	adds	r7, #24
 80151dc:	46bd      	mov	sp, r7
 80151de:	bd80      	pop	{r7, pc}
 80151e0:	0802026c 	.word	0x0802026c
 80151e4:	080202a0 	.word	0x080202a0
 80151e8:	080202e0 	.word	0x080202e0
 80151ec:	20013bc8 	.word	0x20013bc8

080151f0 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 80151f0:	b580      	push	{r7, lr}
 80151f2:	b086      	sub	sp, #24
 80151f4:	af00      	add	r7, sp, #0
 80151f6:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 80151f8:	687b      	ldr	r3, [r7, #4]
 80151fa:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80151fc:	697b      	ldr	r3, [r7, #20]
 80151fe:	685b      	ldr	r3, [r3, #4]
 8015200:	4798      	blx	r3

  now = sys_now();
 8015202:	f7ee f8d5 	bl	80033b0 <sys_now>
 8015206:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8015208:	697b      	ldr	r3, [r7, #20]
 801520a:	681a      	ldr	r2, [r3, #0]
 801520c:	4b0f      	ldr	r3, [pc, #60]	; (801524c <lwip_cyclic_timer+0x5c>)
 801520e:	681b      	ldr	r3, [r3, #0]
 8015210:	4413      	add	r3, r2
 8015212:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8015214:	68fa      	ldr	r2, [r7, #12]
 8015216:	693b      	ldr	r3, [r7, #16]
 8015218:	1ad3      	subs	r3, r2, r3
 801521a:	0fdb      	lsrs	r3, r3, #31
 801521c:	f003 0301 	and.w	r3, r3, #1
 8015220:	b2db      	uxtb	r3, r3
 8015222:	2b00      	cmp	r3, #0
 8015224:	d009      	beq.n	801523a <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8015226:	697b      	ldr	r3, [r7, #20]
 8015228:	681a      	ldr	r2, [r3, #0]
 801522a:	693b      	ldr	r3, [r7, #16]
 801522c:	4413      	add	r3, r2
 801522e:	687a      	ldr	r2, [r7, #4]
 8015230:	4907      	ldr	r1, [pc, #28]	; (8015250 <lwip_cyclic_timer+0x60>)
 8015232:	4618      	mov	r0, r3
 8015234:	f7ff ff6e 	bl	8015114 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8015238:	e004      	b.n	8015244 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801523a:	687a      	ldr	r2, [r7, #4]
 801523c:	4904      	ldr	r1, [pc, #16]	; (8015250 <lwip_cyclic_timer+0x60>)
 801523e:	68f8      	ldr	r0, [r7, #12]
 8015240:	f7ff ff68 	bl	8015114 <sys_timeout_abs>
}
 8015244:	bf00      	nop
 8015246:	3718      	adds	r7, #24
 8015248:	46bd      	mov	sp, r7
 801524a:	bd80      	pop	{r7, pc}
 801524c:	20013bcc 	.word	0x20013bcc
 8015250:	080151f1 	.word	0x080151f1

08015254 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8015254:	b580      	push	{r7, lr}
 8015256:	b082      	sub	sp, #8
 8015258:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801525a:	2301      	movs	r3, #1
 801525c:	607b      	str	r3, [r7, #4]
 801525e:	e00e      	b.n	801527e <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8015260:	4a0b      	ldr	r2, [pc, #44]	; (8015290 <sys_timeouts_init+0x3c>)
 8015262:	687b      	ldr	r3, [r7, #4]
 8015264:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8015268:	687b      	ldr	r3, [r7, #4]
 801526a:	00db      	lsls	r3, r3, #3
 801526c:	4a08      	ldr	r2, [pc, #32]	; (8015290 <sys_timeouts_init+0x3c>)
 801526e:	4413      	add	r3, r2
 8015270:	461a      	mov	r2, r3
 8015272:	4908      	ldr	r1, [pc, #32]	; (8015294 <sys_timeouts_init+0x40>)
 8015274:	f000 f810 	bl	8015298 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8015278:	687b      	ldr	r3, [r7, #4]
 801527a:	3301      	adds	r3, #1
 801527c:	607b      	str	r3, [r7, #4]
 801527e:	687b      	ldr	r3, [r7, #4]
 8015280:	2b04      	cmp	r3, #4
 8015282:	d9ed      	bls.n	8015260 <sys_timeouts_init+0xc>
  }
}
 8015284:	bf00      	nop
 8015286:	bf00      	nop
 8015288:	3708      	adds	r7, #8
 801528a:	46bd      	mov	sp, r7
 801528c:	bd80      	pop	{r7, pc}
 801528e:	bf00      	nop
 8015290:	0806cf58 	.word	0x0806cf58
 8015294:	080151f1 	.word	0x080151f1

08015298 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8015298:	b580      	push	{r7, lr}
 801529a:	b086      	sub	sp, #24
 801529c:	af00      	add	r7, sp, #0
 801529e:	60f8      	str	r0, [r7, #12]
 80152a0:	60b9      	str	r1, [r7, #8]
 80152a2:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 80152a4:	68fb      	ldr	r3, [r7, #12]
 80152a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80152aa:	d306      	bcc.n	80152ba <sys_timeout+0x22>
 80152ac:	4b0a      	ldr	r3, [pc, #40]	; (80152d8 <sys_timeout+0x40>)
 80152ae:	f240 1229 	movw	r2, #297	; 0x129
 80152b2:	490a      	ldr	r1, [pc, #40]	; (80152dc <sys_timeout+0x44>)
 80152b4:	480a      	ldr	r0, [pc, #40]	; (80152e0 <sys_timeout+0x48>)
 80152b6:	f006 f8e3 	bl	801b480 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 80152ba:	f7ee f879 	bl	80033b0 <sys_now>
 80152be:	4602      	mov	r2, r0
 80152c0:	68fb      	ldr	r3, [r7, #12]
 80152c2:	4413      	add	r3, r2
 80152c4:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 80152c6:	687a      	ldr	r2, [r7, #4]
 80152c8:	68b9      	ldr	r1, [r7, #8]
 80152ca:	6978      	ldr	r0, [r7, #20]
 80152cc:	f7ff ff22 	bl	8015114 <sys_timeout_abs>
#endif
}
 80152d0:	bf00      	nop
 80152d2:	3718      	adds	r7, #24
 80152d4:	46bd      	mov	sp, r7
 80152d6:	bd80      	pop	{r7, pc}
 80152d8:	0802026c 	.word	0x0802026c
 80152dc:	08020308 	.word	0x08020308
 80152e0:	080202e0 	.word	0x080202e0

080152e4 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 80152e4:	b580      	push	{r7, lr}
 80152e6:	b084      	sub	sp, #16
 80152e8:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 80152ea:	f7ee f861 	bl	80033b0 <sys_now>
 80152ee:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 80152f0:	4b17      	ldr	r3, [pc, #92]	; (8015350 <sys_check_timeouts+0x6c>)
 80152f2:	681b      	ldr	r3, [r3, #0]
 80152f4:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 80152f6:	68bb      	ldr	r3, [r7, #8]
 80152f8:	2b00      	cmp	r3, #0
 80152fa:	d022      	beq.n	8015342 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 80152fc:	68bb      	ldr	r3, [r7, #8]
 80152fe:	685b      	ldr	r3, [r3, #4]
 8015300:	68fa      	ldr	r2, [r7, #12]
 8015302:	1ad3      	subs	r3, r2, r3
 8015304:	0fdb      	lsrs	r3, r3, #31
 8015306:	f003 0301 	and.w	r3, r3, #1
 801530a:	b2db      	uxtb	r3, r3
 801530c:	2b00      	cmp	r3, #0
 801530e:	d11a      	bne.n	8015346 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8015310:	68bb      	ldr	r3, [r7, #8]
 8015312:	681b      	ldr	r3, [r3, #0]
 8015314:	4a0e      	ldr	r2, [pc, #56]	; (8015350 <sys_check_timeouts+0x6c>)
 8015316:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8015318:	68bb      	ldr	r3, [r7, #8]
 801531a:	689b      	ldr	r3, [r3, #8]
 801531c:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801531e:	68bb      	ldr	r3, [r7, #8]
 8015320:	68db      	ldr	r3, [r3, #12]
 8015322:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8015324:	68bb      	ldr	r3, [r7, #8]
 8015326:	685b      	ldr	r3, [r3, #4]
 8015328:	4a0a      	ldr	r2, [pc, #40]	; (8015354 <sys_check_timeouts+0x70>)
 801532a:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801532c:	68b9      	ldr	r1, [r7, #8]
 801532e:	200a      	movs	r0, #10
 8015330:	f7f9 fa48 	bl	800e7c4 <memp_free>
    if (handler != NULL) {
 8015334:	687b      	ldr	r3, [r7, #4]
 8015336:	2b00      	cmp	r3, #0
 8015338:	d0da      	beq.n	80152f0 <sys_check_timeouts+0xc>
      handler(arg);
 801533a:	687b      	ldr	r3, [r7, #4]
 801533c:	6838      	ldr	r0, [r7, #0]
 801533e:	4798      	blx	r3
  do {
 8015340:	e7d6      	b.n	80152f0 <sys_check_timeouts+0xc>
      return;
 8015342:	bf00      	nop
 8015344:	e000      	b.n	8015348 <sys_check_timeouts+0x64>
      return;
 8015346:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8015348:	3710      	adds	r7, #16
 801534a:	46bd      	mov	sp, r7
 801534c:	bd80      	pop	{r7, pc}
 801534e:	bf00      	nop
 8015350:	20013bc8 	.word	0x20013bc8
 8015354:	20013bcc 	.word	0x20013bcc

08015358 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8015358:	b580      	push	{r7, lr}
 801535a:	b082      	sub	sp, #8
 801535c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801535e:	4b16      	ldr	r3, [pc, #88]	; (80153b8 <sys_timeouts_sleeptime+0x60>)
 8015360:	681b      	ldr	r3, [r3, #0]
 8015362:	2b00      	cmp	r3, #0
 8015364:	d102      	bne.n	801536c <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8015366:	f04f 33ff 	mov.w	r3, #4294967295
 801536a:	e020      	b.n	80153ae <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 801536c:	f7ee f820 	bl	80033b0 <sys_now>
 8015370:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8015372:	4b11      	ldr	r3, [pc, #68]	; (80153b8 <sys_timeouts_sleeptime+0x60>)
 8015374:	681b      	ldr	r3, [r3, #0]
 8015376:	685a      	ldr	r2, [r3, #4]
 8015378:	687b      	ldr	r3, [r7, #4]
 801537a:	1ad3      	subs	r3, r2, r3
 801537c:	0fdb      	lsrs	r3, r3, #31
 801537e:	f003 0301 	and.w	r3, r3, #1
 8015382:	b2db      	uxtb	r3, r3
 8015384:	2b00      	cmp	r3, #0
 8015386:	d001      	beq.n	801538c <sys_timeouts_sleeptime+0x34>
    return 0;
 8015388:	2300      	movs	r3, #0
 801538a:	e010      	b.n	80153ae <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 801538c:	4b0a      	ldr	r3, [pc, #40]	; (80153b8 <sys_timeouts_sleeptime+0x60>)
 801538e:	681b      	ldr	r3, [r3, #0]
 8015390:	685a      	ldr	r2, [r3, #4]
 8015392:	687b      	ldr	r3, [r7, #4]
 8015394:	1ad3      	subs	r3, r2, r3
 8015396:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8015398:	683b      	ldr	r3, [r7, #0]
 801539a:	2b00      	cmp	r3, #0
 801539c:	da06      	bge.n	80153ac <sys_timeouts_sleeptime+0x54>
 801539e:	4b07      	ldr	r3, [pc, #28]	; (80153bc <sys_timeouts_sleeptime+0x64>)
 80153a0:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 80153a4:	4906      	ldr	r1, [pc, #24]	; (80153c0 <sys_timeouts_sleeptime+0x68>)
 80153a6:	4807      	ldr	r0, [pc, #28]	; (80153c4 <sys_timeouts_sleeptime+0x6c>)
 80153a8:	f006 f86a 	bl	801b480 <iprintf>
    return ret;
 80153ac:	683b      	ldr	r3, [r7, #0]
  }
}
 80153ae:	4618      	mov	r0, r3
 80153b0:	3708      	adds	r7, #8
 80153b2:	46bd      	mov	sp, r7
 80153b4:	bd80      	pop	{r7, pc}
 80153b6:	bf00      	nop
 80153b8:	20013bc8 	.word	0x20013bc8
 80153bc:	0802026c 	.word	0x0802026c
 80153c0:	08020340 	.word	0x08020340
 80153c4:	080202e0 	.word	0x080202e0

080153c8 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80153c8:	b580      	push	{r7, lr}
 80153ca:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80153cc:	f006 f8e6 	bl	801b59c <rand>
 80153d0:	4603      	mov	r3, r0
 80153d2:	b29b      	uxth	r3, r3
 80153d4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80153d8:	b29b      	uxth	r3, r3
 80153da:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80153de:	b29a      	uxth	r2, r3
 80153e0:	4b01      	ldr	r3, [pc, #4]	; (80153e8 <udp_init+0x20>)
 80153e2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80153e4:	bf00      	nop
 80153e6:	bd80      	pop	{r7, pc}
 80153e8:	200000c4 	.word	0x200000c4

080153ec <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 80153ec:	b480      	push	{r7}
 80153ee:	b083      	sub	sp, #12
 80153f0:	af00      	add	r7, sp, #0
  u16_t n = 0;
 80153f2:	2300      	movs	r3, #0
 80153f4:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 80153f6:	4b17      	ldr	r3, [pc, #92]	; (8015454 <udp_new_port+0x68>)
 80153f8:	881b      	ldrh	r3, [r3, #0]
 80153fa:	1c5a      	adds	r2, r3, #1
 80153fc:	b291      	uxth	r1, r2
 80153fe:	4a15      	ldr	r2, [pc, #84]	; (8015454 <udp_new_port+0x68>)
 8015400:	8011      	strh	r1, [r2, #0]
 8015402:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015406:	4293      	cmp	r3, r2
 8015408:	d103      	bne.n	8015412 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801540a:	4b12      	ldr	r3, [pc, #72]	; (8015454 <udp_new_port+0x68>)
 801540c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8015410:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8015412:	4b11      	ldr	r3, [pc, #68]	; (8015458 <udp_new_port+0x6c>)
 8015414:	681b      	ldr	r3, [r3, #0]
 8015416:	603b      	str	r3, [r7, #0]
 8015418:	e011      	b.n	801543e <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801541a:	683b      	ldr	r3, [r7, #0]
 801541c:	8a5a      	ldrh	r2, [r3, #18]
 801541e:	4b0d      	ldr	r3, [pc, #52]	; (8015454 <udp_new_port+0x68>)
 8015420:	881b      	ldrh	r3, [r3, #0]
 8015422:	429a      	cmp	r2, r3
 8015424:	d108      	bne.n	8015438 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8015426:	88fb      	ldrh	r3, [r7, #6]
 8015428:	3301      	adds	r3, #1
 801542a:	80fb      	strh	r3, [r7, #6]
 801542c:	88fb      	ldrh	r3, [r7, #6]
 801542e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8015432:	d3e0      	bcc.n	80153f6 <udp_new_port+0xa>
        return 0;
 8015434:	2300      	movs	r3, #0
 8015436:	e007      	b.n	8015448 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8015438:	683b      	ldr	r3, [r7, #0]
 801543a:	68db      	ldr	r3, [r3, #12]
 801543c:	603b      	str	r3, [r7, #0]
 801543e:	683b      	ldr	r3, [r7, #0]
 8015440:	2b00      	cmp	r3, #0
 8015442:	d1ea      	bne.n	801541a <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8015444:	4b03      	ldr	r3, [pc, #12]	; (8015454 <udp_new_port+0x68>)
 8015446:	881b      	ldrh	r3, [r3, #0]
}
 8015448:	4618      	mov	r0, r3
 801544a:	370c      	adds	r7, #12
 801544c:	46bd      	mov	sp, r7
 801544e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015452:	4770      	bx	lr
 8015454:	200000c4 	.word	0x200000c4
 8015458:	20013bd4 	.word	0x20013bd4

0801545c <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 801545c:	b580      	push	{r7, lr}
 801545e:	b084      	sub	sp, #16
 8015460:	af00      	add	r7, sp, #0
 8015462:	60f8      	str	r0, [r7, #12]
 8015464:	60b9      	str	r1, [r7, #8]
 8015466:	4613      	mov	r3, r2
 8015468:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801546a:	68fb      	ldr	r3, [r7, #12]
 801546c:	2b00      	cmp	r3, #0
 801546e:	d105      	bne.n	801547c <udp_input_local_match+0x20>
 8015470:	4b27      	ldr	r3, [pc, #156]	; (8015510 <udp_input_local_match+0xb4>)
 8015472:	2287      	movs	r2, #135	; 0x87
 8015474:	4927      	ldr	r1, [pc, #156]	; (8015514 <udp_input_local_match+0xb8>)
 8015476:	4828      	ldr	r0, [pc, #160]	; (8015518 <udp_input_local_match+0xbc>)
 8015478:	f006 f802 	bl	801b480 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801547c:	68bb      	ldr	r3, [r7, #8]
 801547e:	2b00      	cmp	r3, #0
 8015480:	d105      	bne.n	801548e <udp_input_local_match+0x32>
 8015482:	4b23      	ldr	r3, [pc, #140]	; (8015510 <udp_input_local_match+0xb4>)
 8015484:	2288      	movs	r2, #136	; 0x88
 8015486:	4925      	ldr	r1, [pc, #148]	; (801551c <udp_input_local_match+0xc0>)
 8015488:	4823      	ldr	r0, [pc, #140]	; (8015518 <udp_input_local_match+0xbc>)
 801548a:	f005 fff9 	bl	801b480 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801548e:	68fb      	ldr	r3, [r7, #12]
 8015490:	7a1b      	ldrb	r3, [r3, #8]
 8015492:	2b00      	cmp	r3, #0
 8015494:	d00b      	beq.n	80154ae <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8015496:	68fb      	ldr	r3, [r7, #12]
 8015498:	7a1a      	ldrb	r2, [r3, #8]
 801549a:	4b21      	ldr	r3, [pc, #132]	; (8015520 <udp_input_local_match+0xc4>)
 801549c:	685b      	ldr	r3, [r3, #4]
 801549e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80154a2:	3301      	adds	r3, #1
 80154a4:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80154a6:	429a      	cmp	r2, r3
 80154a8:	d001      	beq.n	80154ae <udp_input_local_match+0x52>
    return 0;
 80154aa:	2300      	movs	r3, #0
 80154ac:	e02b      	b.n	8015506 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 80154ae:	79fb      	ldrb	r3, [r7, #7]
 80154b0:	2b00      	cmp	r3, #0
 80154b2:	d018      	beq.n	80154e6 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80154b4:	68fb      	ldr	r3, [r7, #12]
 80154b6:	2b00      	cmp	r3, #0
 80154b8:	d013      	beq.n	80154e2 <udp_input_local_match+0x86>
 80154ba:	68fb      	ldr	r3, [r7, #12]
 80154bc:	681b      	ldr	r3, [r3, #0]
 80154be:	2b00      	cmp	r3, #0
 80154c0:	d00f      	beq.n	80154e2 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80154c2:	4b17      	ldr	r3, [pc, #92]	; (8015520 <udp_input_local_match+0xc4>)
 80154c4:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80154c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80154ca:	d00a      	beq.n	80154e2 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 80154cc:	68fb      	ldr	r3, [r7, #12]
 80154ce:	681a      	ldr	r2, [r3, #0]
 80154d0:	4b13      	ldr	r3, [pc, #76]	; (8015520 <udp_input_local_match+0xc4>)
 80154d2:	695b      	ldr	r3, [r3, #20]
 80154d4:	405a      	eors	r2, r3
 80154d6:	68bb      	ldr	r3, [r7, #8]
 80154d8:	3308      	adds	r3, #8
 80154da:	681b      	ldr	r3, [r3, #0]
 80154dc:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80154de:	2b00      	cmp	r3, #0
 80154e0:	d110      	bne.n	8015504 <udp_input_local_match+0xa8>
          return 1;
 80154e2:	2301      	movs	r3, #1
 80154e4:	e00f      	b.n	8015506 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80154e6:	68fb      	ldr	r3, [r7, #12]
 80154e8:	2b00      	cmp	r3, #0
 80154ea:	d009      	beq.n	8015500 <udp_input_local_match+0xa4>
 80154ec:	68fb      	ldr	r3, [r7, #12]
 80154ee:	681b      	ldr	r3, [r3, #0]
 80154f0:	2b00      	cmp	r3, #0
 80154f2:	d005      	beq.n	8015500 <udp_input_local_match+0xa4>
 80154f4:	68fb      	ldr	r3, [r7, #12]
 80154f6:	681a      	ldr	r2, [r3, #0]
 80154f8:	4b09      	ldr	r3, [pc, #36]	; (8015520 <udp_input_local_match+0xc4>)
 80154fa:	695b      	ldr	r3, [r3, #20]
 80154fc:	429a      	cmp	r2, r3
 80154fe:	d101      	bne.n	8015504 <udp_input_local_match+0xa8>
        return 1;
 8015500:	2301      	movs	r3, #1
 8015502:	e000      	b.n	8015506 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8015504:	2300      	movs	r3, #0
}
 8015506:	4618      	mov	r0, r3
 8015508:	3710      	adds	r7, #16
 801550a:	46bd      	mov	sp, r7
 801550c:	bd80      	pop	{r7, pc}
 801550e:	bf00      	nop
 8015510:	08020354 	.word	0x08020354
 8015514:	08020384 	.word	0x08020384
 8015518:	080203a8 	.word	0x080203a8
 801551c:	080203d0 	.word	0x080203d0
 8015520:	2000a100 	.word	0x2000a100

08015524 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8015524:	b590      	push	{r4, r7, lr}
 8015526:	b08d      	sub	sp, #52	; 0x34
 8015528:	af02      	add	r7, sp, #8
 801552a:	6078      	str	r0, [r7, #4]
 801552c:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801552e:	2300      	movs	r3, #0
 8015530:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8015532:	687b      	ldr	r3, [r7, #4]
 8015534:	2b00      	cmp	r3, #0
 8015536:	d105      	bne.n	8015544 <udp_input+0x20>
 8015538:	4b87      	ldr	r3, [pc, #540]	; (8015758 <udp_input+0x234>)
 801553a:	22cf      	movs	r2, #207	; 0xcf
 801553c:	4987      	ldr	r1, [pc, #540]	; (801575c <udp_input+0x238>)
 801553e:	4888      	ldr	r0, [pc, #544]	; (8015760 <udp_input+0x23c>)
 8015540:	f005 ff9e 	bl	801b480 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8015544:	683b      	ldr	r3, [r7, #0]
 8015546:	2b00      	cmp	r3, #0
 8015548:	d105      	bne.n	8015556 <udp_input+0x32>
 801554a:	4b83      	ldr	r3, [pc, #524]	; (8015758 <udp_input+0x234>)
 801554c:	22d0      	movs	r2, #208	; 0xd0
 801554e:	4985      	ldr	r1, [pc, #532]	; (8015764 <udp_input+0x240>)
 8015550:	4883      	ldr	r0, [pc, #524]	; (8015760 <udp_input+0x23c>)
 8015552:	f005 ff95 	bl	801b480 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8015556:	687b      	ldr	r3, [r7, #4]
 8015558:	895b      	ldrh	r3, [r3, #10]
 801555a:	2b07      	cmp	r3, #7
 801555c:	d803      	bhi.n	8015566 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801555e:	6878      	ldr	r0, [r7, #4]
 8015560:	f7f9 ffd2 	bl	800f508 <pbuf_free>
    goto end;
 8015564:	e0f0      	b.n	8015748 <udp_input+0x224>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8015566:	687b      	ldr	r3, [r7, #4]
 8015568:	685b      	ldr	r3, [r3, #4]
 801556a:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801556c:	4b7e      	ldr	r3, [pc, #504]	; (8015768 <udp_input+0x244>)
 801556e:	695b      	ldr	r3, [r3, #20]
 8015570:	4a7d      	ldr	r2, [pc, #500]	; (8015768 <udp_input+0x244>)
 8015572:	6812      	ldr	r2, [r2, #0]
 8015574:	4611      	mov	r1, r2
 8015576:	4618      	mov	r0, r3
 8015578:	f004 f81c 	bl	80195b4 <ip4_addr_isbroadcast_u32>
 801557c:	4603      	mov	r3, r0
 801557e:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8015580:	697b      	ldr	r3, [r7, #20]
 8015582:	881b      	ldrh	r3, [r3, #0]
 8015584:	b29b      	uxth	r3, r3
 8015586:	4618      	mov	r0, r3
 8015588:	f7f8 fa9c 	bl	800dac4 <lwip_htons>
 801558c:	4603      	mov	r3, r0
 801558e:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8015590:	697b      	ldr	r3, [r7, #20]
 8015592:	885b      	ldrh	r3, [r3, #2]
 8015594:	b29b      	uxth	r3, r3
 8015596:	4618      	mov	r0, r3
 8015598:	f7f8 fa94 	bl	800dac4 <lwip_htons>
 801559c:	4603      	mov	r3, r0
 801559e:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 80155a0:	2300      	movs	r3, #0
 80155a2:	61fb      	str	r3, [r7, #28]
  prev = NULL;
 80155a4:	2300      	movs	r3, #0
 80155a6:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 80155a8:	2300      	movs	r3, #0
 80155aa:	627b      	str	r3, [r7, #36]	; 0x24
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80155ac:	4b6f      	ldr	r3, [pc, #444]	; (801576c <udp_input+0x248>)
 80155ae:	681b      	ldr	r3, [r3, #0]
 80155b0:	61fb      	str	r3, [r7, #28]
 80155b2:	e054      	b.n	801565e <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 80155b4:	69fb      	ldr	r3, [r7, #28]
 80155b6:	8a5b      	ldrh	r3, [r3, #18]
 80155b8:	89fa      	ldrh	r2, [r7, #14]
 80155ba:	429a      	cmp	r2, r3
 80155bc:	d14a      	bne.n	8015654 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 80155be:	7cfb      	ldrb	r3, [r7, #19]
 80155c0:	461a      	mov	r2, r3
 80155c2:	6839      	ldr	r1, [r7, #0]
 80155c4:	69f8      	ldr	r0, [r7, #28]
 80155c6:	f7ff ff49 	bl	801545c <udp_input_local_match>
 80155ca:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 80155cc:	2b00      	cmp	r3, #0
 80155ce:	d041      	beq.n	8015654 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 80155d0:	69fb      	ldr	r3, [r7, #28]
 80155d2:	7c1b      	ldrb	r3, [r3, #16]
 80155d4:	f003 0304 	and.w	r3, r3, #4
 80155d8:	2b00      	cmp	r3, #0
 80155da:	d11d      	bne.n	8015618 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 80155dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80155de:	2b00      	cmp	r3, #0
 80155e0:	d102      	bne.n	80155e8 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 80155e2:	69fb      	ldr	r3, [r7, #28]
 80155e4:	627b      	str	r3, [r7, #36]	; 0x24
 80155e6:	e017      	b.n	8015618 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 80155e8:	7cfb      	ldrb	r3, [r7, #19]
 80155ea:	2b00      	cmp	r3, #0
 80155ec:	d014      	beq.n	8015618 <udp_input+0xf4>
 80155ee:	4b5e      	ldr	r3, [pc, #376]	; (8015768 <udp_input+0x244>)
 80155f0:	695b      	ldr	r3, [r3, #20]
 80155f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80155f6:	d10f      	bne.n	8015618 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 80155f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80155fa:	681a      	ldr	r2, [r3, #0]
 80155fc:	683b      	ldr	r3, [r7, #0]
 80155fe:	3304      	adds	r3, #4
 8015600:	681b      	ldr	r3, [r3, #0]
 8015602:	429a      	cmp	r2, r3
 8015604:	d008      	beq.n	8015618 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8015606:	69fb      	ldr	r3, [r7, #28]
 8015608:	681a      	ldr	r2, [r3, #0]
 801560a:	683b      	ldr	r3, [r7, #0]
 801560c:	3304      	adds	r3, #4
 801560e:	681b      	ldr	r3, [r3, #0]
 8015610:	429a      	cmp	r2, r3
 8015612:	d101      	bne.n	8015618 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8015614:	69fb      	ldr	r3, [r7, #28]
 8015616:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8015618:	69fb      	ldr	r3, [r7, #28]
 801561a:	8a9b      	ldrh	r3, [r3, #20]
 801561c:	8a3a      	ldrh	r2, [r7, #16]
 801561e:	429a      	cmp	r2, r3
 8015620:	d118      	bne.n	8015654 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8015622:	69fb      	ldr	r3, [r7, #28]
 8015624:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8015626:	2b00      	cmp	r3, #0
 8015628:	d005      	beq.n	8015636 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801562a:	69fb      	ldr	r3, [r7, #28]
 801562c:	685a      	ldr	r2, [r3, #4]
 801562e:	4b4e      	ldr	r3, [pc, #312]	; (8015768 <udp_input+0x244>)
 8015630:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8015632:	429a      	cmp	r2, r3
 8015634:	d10e      	bne.n	8015654 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8015636:	6a3b      	ldr	r3, [r7, #32]
 8015638:	2b00      	cmp	r3, #0
 801563a:	d014      	beq.n	8015666 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801563c:	69fb      	ldr	r3, [r7, #28]
 801563e:	68da      	ldr	r2, [r3, #12]
 8015640:	6a3b      	ldr	r3, [r7, #32]
 8015642:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8015644:	4b49      	ldr	r3, [pc, #292]	; (801576c <udp_input+0x248>)
 8015646:	681a      	ldr	r2, [r3, #0]
 8015648:	69fb      	ldr	r3, [r7, #28]
 801564a:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801564c:	4a47      	ldr	r2, [pc, #284]	; (801576c <udp_input+0x248>)
 801564e:	69fb      	ldr	r3, [r7, #28]
 8015650:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8015652:	e008      	b.n	8015666 <udp_input+0x142>
      }
    }

    prev = pcb;
 8015654:	69fb      	ldr	r3, [r7, #28]
 8015656:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8015658:	69fb      	ldr	r3, [r7, #28]
 801565a:	68db      	ldr	r3, [r3, #12]
 801565c:	61fb      	str	r3, [r7, #28]
 801565e:	69fb      	ldr	r3, [r7, #28]
 8015660:	2b00      	cmp	r3, #0
 8015662:	d1a7      	bne.n	80155b4 <udp_input+0x90>
 8015664:	e000      	b.n	8015668 <udp_input+0x144>
        break;
 8015666:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8015668:	69fb      	ldr	r3, [r7, #28]
 801566a:	2b00      	cmp	r3, #0
 801566c:	d101      	bne.n	8015672 <udp_input+0x14e>
    pcb = uncon_pcb;
 801566e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015670:	61fb      	str	r3, [r7, #28]
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8015672:	69fb      	ldr	r3, [r7, #28]
 8015674:	2b00      	cmp	r3, #0
 8015676:	d002      	beq.n	801567e <udp_input+0x15a>
    for_us = 1;
 8015678:	2301      	movs	r3, #1
 801567a:	76fb      	strb	r3, [r7, #27]
 801567c:	e00a      	b.n	8015694 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801567e:	683b      	ldr	r3, [r7, #0]
 8015680:	3304      	adds	r3, #4
 8015682:	681a      	ldr	r2, [r3, #0]
 8015684:	4b38      	ldr	r3, [pc, #224]	; (8015768 <udp_input+0x244>)
 8015686:	695b      	ldr	r3, [r3, #20]
 8015688:	429a      	cmp	r2, r3
 801568a:	bf0c      	ite	eq
 801568c:	2301      	moveq	r3, #1
 801568e:	2300      	movne	r3, #0
 8015690:	b2db      	uxtb	r3, r3
 8015692:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8015694:	7efb      	ldrb	r3, [r7, #27]
 8015696:	2b00      	cmp	r3, #0
 8015698:	d052      	beq.n	8015740 <udp_input+0x21c>
          goto chkerr;
        }
      } else
#endif /* LWIP_UDPLITE */
      {
        if (udphdr->chksum != 0) {
 801569a:	697b      	ldr	r3, [r7, #20]
 801569c:	88db      	ldrh	r3, [r3, #6]
 801569e:	b29b      	uxth	r3, r3
 80156a0:	2b00      	cmp	r3, #0
 80156a2:	d00b      	beq.n	80156bc <udp_input+0x198>
          if (ip_chksum_pseudo(p, IP_PROTO_UDP, p->tot_len,
 80156a4:	687b      	ldr	r3, [r7, #4]
 80156a6:	891a      	ldrh	r2, [r3, #8]
 80156a8:	4b31      	ldr	r3, [pc, #196]	; (8015770 <udp_input+0x24c>)
 80156aa:	9300      	str	r3, [sp, #0]
 80156ac:	4b31      	ldr	r3, [pc, #196]	; (8015774 <udp_input+0x250>)
 80156ae:	2111      	movs	r1, #17
 80156b0:	6878      	ldr	r0, [r7, #4]
 80156b2:	f7f8 fb39 	bl	800dd28 <ip_chksum_pseudo>
 80156b6:	4603      	mov	r3, r0
 80156b8:	2b00      	cmp	r3, #0
 80156ba:	d146      	bne.n	801574a <udp_input+0x226>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 80156bc:	2108      	movs	r1, #8
 80156be:	6878      	ldr	r0, [r7, #4]
 80156c0:	f7f9 fe9c 	bl	800f3fc <pbuf_remove_header>
 80156c4:	4603      	mov	r3, r0
 80156c6:	2b00      	cmp	r3, #0
 80156c8:	d00a      	beq.n	80156e0 <udp_input+0x1bc>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 80156ca:	4b23      	ldr	r3, [pc, #140]	; (8015758 <udp_input+0x234>)
 80156cc:	f44f 72b8 	mov.w	r2, #368	; 0x170
 80156d0:	4929      	ldr	r1, [pc, #164]	; (8015778 <udp_input+0x254>)
 80156d2:	4823      	ldr	r0, [pc, #140]	; (8015760 <udp_input+0x23c>)
 80156d4:	f005 fed4 	bl	801b480 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 80156d8:	6878      	ldr	r0, [r7, #4]
 80156da:	f7f9 ff15 	bl	800f508 <pbuf_free>
      goto end;
 80156de:	e033      	b.n	8015748 <udp_input+0x224>
    }

    if (pcb != NULL) {
 80156e0:	69fb      	ldr	r3, [r7, #28]
 80156e2:	2b00      	cmp	r3, #0
 80156e4:	d012      	beq.n	801570c <udp_input+0x1e8>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80156e6:	69fb      	ldr	r3, [r7, #28]
 80156e8:	699b      	ldr	r3, [r3, #24]
 80156ea:	2b00      	cmp	r3, #0
 80156ec:	d00a      	beq.n	8015704 <udp_input+0x1e0>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80156ee:	69fb      	ldr	r3, [r7, #28]
 80156f0:	699c      	ldr	r4, [r3, #24]
 80156f2:	69fb      	ldr	r3, [r7, #28]
 80156f4:	69d8      	ldr	r0, [r3, #28]
 80156f6:	8a3b      	ldrh	r3, [r7, #16]
 80156f8:	9300      	str	r3, [sp, #0]
 80156fa:	4b1e      	ldr	r3, [pc, #120]	; (8015774 <udp_input+0x250>)
 80156fc:	687a      	ldr	r2, [r7, #4]
 80156fe:	69f9      	ldr	r1, [r7, #28]
 8015700:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8015702:	e026      	b.n	8015752 <udp_input+0x22e>
        pbuf_free(p);
 8015704:	6878      	ldr	r0, [r7, #4]
 8015706:	f7f9 feff 	bl	800f508 <pbuf_free>
        goto end;
 801570a:	e01d      	b.n	8015748 <udp_input+0x224>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801570c:	7cfb      	ldrb	r3, [r7, #19]
 801570e:	2b00      	cmp	r3, #0
 8015710:	d112      	bne.n	8015738 <udp_input+0x214>
 8015712:	4b15      	ldr	r3, [pc, #84]	; (8015768 <udp_input+0x244>)
 8015714:	695b      	ldr	r3, [r3, #20]
 8015716:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801571a:	2be0      	cmp	r3, #224	; 0xe0
 801571c:	d00c      	beq.n	8015738 <udp_input+0x214>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801571e:	4b12      	ldr	r3, [pc, #72]	; (8015768 <udp_input+0x244>)
 8015720:	899b      	ldrh	r3, [r3, #12]
 8015722:	3308      	adds	r3, #8
 8015724:	b29b      	uxth	r3, r3
 8015726:	b21b      	sxth	r3, r3
 8015728:	4619      	mov	r1, r3
 801572a:	6878      	ldr	r0, [r7, #4]
 801572c:	f7f9 fed9 	bl	800f4e2 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8015730:	2103      	movs	r1, #3
 8015732:	6878      	ldr	r0, [r7, #4]
 8015734:	f003 fb84 	bl	8018e40 <icmp_dest_unreach>
      pbuf_free(p);
 8015738:	6878      	ldr	r0, [r7, #4]
 801573a:	f7f9 fee5 	bl	800f508 <pbuf_free>
  return;
 801573e:	e008      	b.n	8015752 <udp_input+0x22e>
    pbuf_free(p);
 8015740:	6878      	ldr	r0, [r7, #4]
 8015742:	f7f9 fee1 	bl	800f508 <pbuf_free>
  return;
 8015746:	e004      	b.n	8015752 <udp_input+0x22e>
 8015748:	e003      	b.n	8015752 <udp_input+0x22e>
            goto chkerr;
 801574a:	bf00      	nop
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
              ("udp_input: UDP (or UDP Lite) datagram discarded due to failing checksum\n"));
  UDP_STATS_INC(udp.chkerr);
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
 801574c:	6878      	ldr	r0, [r7, #4]
 801574e:	f7f9 fedb 	bl	800f508 <pbuf_free>
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8015752:	372c      	adds	r7, #44	; 0x2c
 8015754:	46bd      	mov	sp, r7
 8015756:	bd90      	pop	{r4, r7, pc}
 8015758:	08020354 	.word	0x08020354
 801575c:	080203f8 	.word	0x080203f8
 8015760:	080203a8 	.word	0x080203a8
 8015764:	08020410 	.word	0x08020410
 8015768:	2000a100 	.word	0x2000a100
 801576c:	20013bd4 	.word	0x20013bd4
 8015770:	2000a114 	.word	0x2000a114
 8015774:	2000a110 	.word	0x2000a110
 8015778:	0802042c 	.word	0x0802042c

0801577c <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 801577c:	b580      	push	{r7, lr}
 801577e:	b082      	sub	sp, #8
 8015780:	af00      	add	r7, sp, #0
 8015782:	6078      	str	r0, [r7, #4]
 8015784:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 8015786:	687b      	ldr	r3, [r7, #4]
 8015788:	2b00      	cmp	r3, #0
 801578a:	d109      	bne.n	80157a0 <udp_send+0x24>
 801578c:	4b11      	ldr	r3, [pc, #68]	; (80157d4 <udp_send+0x58>)
 801578e:	f240 12d5 	movw	r2, #469	; 0x1d5
 8015792:	4911      	ldr	r1, [pc, #68]	; (80157d8 <udp_send+0x5c>)
 8015794:	4811      	ldr	r0, [pc, #68]	; (80157dc <udp_send+0x60>)
 8015796:	f005 fe73 	bl	801b480 <iprintf>
 801579a:	f06f 030f 	mvn.w	r3, #15
 801579e:	e015      	b.n	80157cc <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 80157a0:	683b      	ldr	r3, [r7, #0]
 80157a2:	2b00      	cmp	r3, #0
 80157a4:	d109      	bne.n	80157ba <udp_send+0x3e>
 80157a6:	4b0b      	ldr	r3, [pc, #44]	; (80157d4 <udp_send+0x58>)
 80157a8:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 80157ac:	490c      	ldr	r1, [pc, #48]	; (80157e0 <udp_send+0x64>)
 80157ae:	480b      	ldr	r0, [pc, #44]	; (80157dc <udp_send+0x60>)
 80157b0:	f005 fe66 	bl	801b480 <iprintf>
 80157b4:	f06f 030f 	mvn.w	r3, #15
 80157b8:	e008      	b.n	80157cc <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 80157ba:	687b      	ldr	r3, [r7, #4]
 80157bc:	1d1a      	adds	r2, r3, #4
 80157be:	687b      	ldr	r3, [r7, #4]
 80157c0:	8a9b      	ldrh	r3, [r3, #20]
 80157c2:	6839      	ldr	r1, [r7, #0]
 80157c4:	6878      	ldr	r0, [r7, #4]
 80157c6:	f000 f80d 	bl	80157e4 <udp_sendto>
 80157ca:	4603      	mov	r3, r0
}
 80157cc:	4618      	mov	r0, r3
 80157ce:	3708      	adds	r7, #8
 80157d0:	46bd      	mov	sp, r7
 80157d2:	bd80      	pop	{r7, pc}
 80157d4:	08020354 	.word	0x08020354
 80157d8:	08020448 	.word	0x08020448
 80157dc:	080203a8 	.word	0x080203a8
 80157e0:	08020460 	.word	0x08020460

080157e4 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 80157e4:	b580      	push	{r7, lr}
 80157e6:	b088      	sub	sp, #32
 80157e8:	af02      	add	r7, sp, #8
 80157ea:	60f8      	str	r0, [r7, #12]
 80157ec:	60b9      	str	r1, [r7, #8]
 80157ee:	607a      	str	r2, [r7, #4]
 80157f0:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 80157f2:	68fb      	ldr	r3, [r7, #12]
 80157f4:	2b00      	cmp	r3, #0
 80157f6:	d109      	bne.n	801580c <udp_sendto+0x28>
 80157f8:	4b23      	ldr	r3, [pc, #140]	; (8015888 <udp_sendto+0xa4>)
 80157fa:	f44f 7206 	mov.w	r2, #536	; 0x218
 80157fe:	4923      	ldr	r1, [pc, #140]	; (801588c <udp_sendto+0xa8>)
 8015800:	4823      	ldr	r0, [pc, #140]	; (8015890 <udp_sendto+0xac>)
 8015802:	f005 fe3d 	bl	801b480 <iprintf>
 8015806:	f06f 030f 	mvn.w	r3, #15
 801580a:	e038      	b.n	801587e <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 801580c:	68bb      	ldr	r3, [r7, #8]
 801580e:	2b00      	cmp	r3, #0
 8015810:	d109      	bne.n	8015826 <udp_sendto+0x42>
 8015812:	4b1d      	ldr	r3, [pc, #116]	; (8015888 <udp_sendto+0xa4>)
 8015814:	f240 2219 	movw	r2, #537	; 0x219
 8015818:	491e      	ldr	r1, [pc, #120]	; (8015894 <udp_sendto+0xb0>)
 801581a:	481d      	ldr	r0, [pc, #116]	; (8015890 <udp_sendto+0xac>)
 801581c:	f005 fe30 	bl	801b480 <iprintf>
 8015820:	f06f 030f 	mvn.w	r3, #15
 8015824:	e02b      	b.n	801587e <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8015826:	687b      	ldr	r3, [r7, #4]
 8015828:	2b00      	cmp	r3, #0
 801582a:	d109      	bne.n	8015840 <udp_sendto+0x5c>
 801582c:	4b16      	ldr	r3, [pc, #88]	; (8015888 <udp_sendto+0xa4>)
 801582e:	f240 221a 	movw	r2, #538	; 0x21a
 8015832:	4919      	ldr	r1, [pc, #100]	; (8015898 <udp_sendto+0xb4>)
 8015834:	4816      	ldr	r0, [pc, #88]	; (8015890 <udp_sendto+0xac>)
 8015836:	f005 fe23 	bl	801b480 <iprintf>
 801583a:	f06f 030f 	mvn.w	r3, #15
 801583e:	e01e      	b.n	801587e <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8015840:	68fb      	ldr	r3, [r7, #12]
 8015842:	7a1b      	ldrb	r3, [r3, #8]
 8015844:	2b00      	cmp	r3, #0
 8015846:	d006      	beq.n	8015856 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 8015848:	68fb      	ldr	r3, [r7, #12]
 801584a:	7a1b      	ldrb	r3, [r3, #8]
 801584c:	4618      	mov	r0, r3
 801584e:	f7f9 fac9 	bl	800ede4 <netif_get_by_index>
 8015852:	6178      	str	r0, [r7, #20]
 8015854:	e003      	b.n	801585e <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 8015856:	6878      	ldr	r0, [r7, #4]
 8015858:	f003 fb86 	bl	8018f68 <ip4_route>
 801585c:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 801585e:	697b      	ldr	r3, [r7, #20]
 8015860:	2b00      	cmp	r3, #0
 8015862:	d102      	bne.n	801586a <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8015864:	f06f 0303 	mvn.w	r3, #3
 8015868:	e009      	b.n	801587e <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 801586a:	887a      	ldrh	r2, [r7, #2]
 801586c:	697b      	ldr	r3, [r7, #20]
 801586e:	9300      	str	r3, [sp, #0]
 8015870:	4613      	mov	r3, r2
 8015872:	687a      	ldr	r2, [r7, #4]
 8015874:	68b9      	ldr	r1, [r7, #8]
 8015876:	68f8      	ldr	r0, [r7, #12]
 8015878:	f000 f810 	bl	801589c <udp_sendto_if>
 801587c:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801587e:	4618      	mov	r0, r3
 8015880:	3718      	adds	r7, #24
 8015882:	46bd      	mov	sp, r7
 8015884:	bd80      	pop	{r7, pc}
 8015886:	bf00      	nop
 8015888:	08020354 	.word	0x08020354
 801588c:	08020478 	.word	0x08020478
 8015890:	080203a8 	.word	0x080203a8
 8015894:	08020490 	.word	0x08020490
 8015898:	080204ac 	.word	0x080204ac

0801589c <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 801589c:	b580      	push	{r7, lr}
 801589e:	b088      	sub	sp, #32
 80158a0:	af02      	add	r7, sp, #8
 80158a2:	60f8      	str	r0, [r7, #12]
 80158a4:	60b9      	str	r1, [r7, #8]
 80158a6:	607a      	str	r2, [r7, #4]
 80158a8:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 80158aa:	68fb      	ldr	r3, [r7, #12]
 80158ac:	2b00      	cmp	r3, #0
 80158ae:	d109      	bne.n	80158c4 <udp_sendto_if+0x28>
 80158b0:	4b2e      	ldr	r3, [pc, #184]	; (801596c <udp_sendto_if+0xd0>)
 80158b2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80158b6:	492e      	ldr	r1, [pc, #184]	; (8015970 <udp_sendto_if+0xd4>)
 80158b8:	482e      	ldr	r0, [pc, #184]	; (8015974 <udp_sendto_if+0xd8>)
 80158ba:	f005 fde1 	bl	801b480 <iprintf>
 80158be:	f06f 030f 	mvn.w	r3, #15
 80158c2:	e04f      	b.n	8015964 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 80158c4:	68bb      	ldr	r3, [r7, #8]
 80158c6:	2b00      	cmp	r3, #0
 80158c8:	d109      	bne.n	80158de <udp_sendto_if+0x42>
 80158ca:	4b28      	ldr	r3, [pc, #160]	; (801596c <udp_sendto_if+0xd0>)
 80158cc:	f240 2281 	movw	r2, #641	; 0x281
 80158d0:	4929      	ldr	r1, [pc, #164]	; (8015978 <udp_sendto_if+0xdc>)
 80158d2:	4828      	ldr	r0, [pc, #160]	; (8015974 <udp_sendto_if+0xd8>)
 80158d4:	f005 fdd4 	bl	801b480 <iprintf>
 80158d8:	f06f 030f 	mvn.w	r3, #15
 80158dc:	e042      	b.n	8015964 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80158de:	687b      	ldr	r3, [r7, #4]
 80158e0:	2b00      	cmp	r3, #0
 80158e2:	d109      	bne.n	80158f8 <udp_sendto_if+0x5c>
 80158e4:	4b21      	ldr	r3, [pc, #132]	; (801596c <udp_sendto_if+0xd0>)
 80158e6:	f240 2282 	movw	r2, #642	; 0x282
 80158ea:	4924      	ldr	r1, [pc, #144]	; (801597c <udp_sendto_if+0xe0>)
 80158ec:	4821      	ldr	r0, [pc, #132]	; (8015974 <udp_sendto_if+0xd8>)
 80158ee:	f005 fdc7 	bl	801b480 <iprintf>
 80158f2:	f06f 030f 	mvn.w	r3, #15
 80158f6:	e035      	b.n	8015964 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 80158f8:	6a3b      	ldr	r3, [r7, #32]
 80158fa:	2b00      	cmp	r3, #0
 80158fc:	d109      	bne.n	8015912 <udp_sendto_if+0x76>
 80158fe:	4b1b      	ldr	r3, [pc, #108]	; (801596c <udp_sendto_if+0xd0>)
 8015900:	f240 2283 	movw	r2, #643	; 0x283
 8015904:	491e      	ldr	r1, [pc, #120]	; (8015980 <udp_sendto_if+0xe4>)
 8015906:	481b      	ldr	r0, [pc, #108]	; (8015974 <udp_sendto_if+0xd8>)
 8015908:	f005 fdba 	bl	801b480 <iprintf>
 801590c:	f06f 030f 	mvn.w	r3, #15
 8015910:	e028      	b.n	8015964 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8015912:	68fb      	ldr	r3, [r7, #12]
 8015914:	2b00      	cmp	r3, #0
 8015916:	d009      	beq.n	801592c <udp_sendto_if+0x90>
 8015918:	68fb      	ldr	r3, [r7, #12]
 801591a:	681b      	ldr	r3, [r3, #0]
 801591c:	2b00      	cmp	r3, #0
 801591e:	d005      	beq.n	801592c <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8015920:	68fb      	ldr	r3, [r7, #12]
 8015922:	681b      	ldr	r3, [r3, #0]
 8015924:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8015928:	2be0      	cmp	r3, #224	; 0xe0
 801592a:	d103      	bne.n	8015934 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 801592c:	6a3b      	ldr	r3, [r7, #32]
 801592e:	3304      	adds	r3, #4
 8015930:	617b      	str	r3, [r7, #20]
 8015932:	e00b      	b.n	801594c <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8015934:	68fb      	ldr	r3, [r7, #12]
 8015936:	681a      	ldr	r2, [r3, #0]
 8015938:	6a3b      	ldr	r3, [r7, #32]
 801593a:	3304      	adds	r3, #4
 801593c:	681b      	ldr	r3, [r3, #0]
 801593e:	429a      	cmp	r2, r3
 8015940:	d002      	beq.n	8015948 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8015942:	f06f 0303 	mvn.w	r3, #3
 8015946:	e00d      	b.n	8015964 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8015948:	68fb      	ldr	r3, [r7, #12]
 801594a:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 801594c:	887a      	ldrh	r2, [r7, #2]
 801594e:	697b      	ldr	r3, [r7, #20]
 8015950:	9301      	str	r3, [sp, #4]
 8015952:	6a3b      	ldr	r3, [r7, #32]
 8015954:	9300      	str	r3, [sp, #0]
 8015956:	4613      	mov	r3, r2
 8015958:	687a      	ldr	r2, [r7, #4]
 801595a:	68b9      	ldr	r1, [r7, #8]
 801595c:	68f8      	ldr	r0, [r7, #12]
 801595e:	f000 f811 	bl	8015984 <udp_sendto_if_src>
 8015962:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8015964:	4618      	mov	r0, r3
 8015966:	3718      	adds	r7, #24
 8015968:	46bd      	mov	sp, r7
 801596a:	bd80      	pop	{r7, pc}
 801596c:	08020354 	.word	0x08020354
 8015970:	080204c8 	.word	0x080204c8
 8015974:	080203a8 	.word	0x080203a8
 8015978:	080204e4 	.word	0x080204e4
 801597c:	08020500 	.word	0x08020500
 8015980:	08020520 	.word	0x08020520

08015984 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8015984:	b580      	push	{r7, lr}
 8015986:	b08c      	sub	sp, #48	; 0x30
 8015988:	af04      	add	r7, sp, #16
 801598a:	60f8      	str	r0, [r7, #12]
 801598c:	60b9      	str	r1, [r7, #8]
 801598e:	607a      	str	r2, [r7, #4]
 8015990:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8015992:	68fb      	ldr	r3, [r7, #12]
 8015994:	2b00      	cmp	r3, #0
 8015996:	d109      	bne.n	80159ac <udp_sendto_if_src+0x28>
 8015998:	4b65      	ldr	r3, [pc, #404]	; (8015b30 <udp_sendto_if_src+0x1ac>)
 801599a:	f240 22d1 	movw	r2, #721	; 0x2d1
 801599e:	4965      	ldr	r1, [pc, #404]	; (8015b34 <udp_sendto_if_src+0x1b0>)
 80159a0:	4865      	ldr	r0, [pc, #404]	; (8015b38 <udp_sendto_if_src+0x1b4>)
 80159a2:	f005 fd6d 	bl	801b480 <iprintf>
 80159a6:	f06f 030f 	mvn.w	r3, #15
 80159aa:	e0bc      	b.n	8015b26 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 80159ac:	68bb      	ldr	r3, [r7, #8]
 80159ae:	2b00      	cmp	r3, #0
 80159b0:	d109      	bne.n	80159c6 <udp_sendto_if_src+0x42>
 80159b2:	4b5f      	ldr	r3, [pc, #380]	; (8015b30 <udp_sendto_if_src+0x1ac>)
 80159b4:	f240 22d2 	movw	r2, #722	; 0x2d2
 80159b8:	4960      	ldr	r1, [pc, #384]	; (8015b3c <udp_sendto_if_src+0x1b8>)
 80159ba:	485f      	ldr	r0, [pc, #380]	; (8015b38 <udp_sendto_if_src+0x1b4>)
 80159bc:	f005 fd60 	bl	801b480 <iprintf>
 80159c0:	f06f 030f 	mvn.w	r3, #15
 80159c4:	e0af      	b.n	8015b26 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80159c6:	687b      	ldr	r3, [r7, #4]
 80159c8:	2b00      	cmp	r3, #0
 80159ca:	d109      	bne.n	80159e0 <udp_sendto_if_src+0x5c>
 80159cc:	4b58      	ldr	r3, [pc, #352]	; (8015b30 <udp_sendto_if_src+0x1ac>)
 80159ce:	f240 22d3 	movw	r2, #723	; 0x2d3
 80159d2:	495b      	ldr	r1, [pc, #364]	; (8015b40 <udp_sendto_if_src+0x1bc>)
 80159d4:	4858      	ldr	r0, [pc, #352]	; (8015b38 <udp_sendto_if_src+0x1b4>)
 80159d6:	f005 fd53 	bl	801b480 <iprintf>
 80159da:	f06f 030f 	mvn.w	r3, #15
 80159de:	e0a2      	b.n	8015b26 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 80159e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80159e2:	2b00      	cmp	r3, #0
 80159e4:	d109      	bne.n	80159fa <udp_sendto_if_src+0x76>
 80159e6:	4b52      	ldr	r3, [pc, #328]	; (8015b30 <udp_sendto_if_src+0x1ac>)
 80159e8:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 80159ec:	4955      	ldr	r1, [pc, #340]	; (8015b44 <udp_sendto_if_src+0x1c0>)
 80159ee:	4852      	ldr	r0, [pc, #328]	; (8015b38 <udp_sendto_if_src+0x1b4>)
 80159f0:	f005 fd46 	bl	801b480 <iprintf>
 80159f4:	f06f 030f 	mvn.w	r3, #15
 80159f8:	e095      	b.n	8015b26 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 80159fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80159fc:	2b00      	cmp	r3, #0
 80159fe:	d109      	bne.n	8015a14 <udp_sendto_if_src+0x90>
 8015a00:	4b4b      	ldr	r3, [pc, #300]	; (8015b30 <udp_sendto_if_src+0x1ac>)
 8015a02:	f240 22d5 	movw	r2, #725	; 0x2d5
 8015a06:	4950      	ldr	r1, [pc, #320]	; (8015b48 <udp_sendto_if_src+0x1c4>)
 8015a08:	484b      	ldr	r0, [pc, #300]	; (8015b38 <udp_sendto_if_src+0x1b4>)
 8015a0a:	f005 fd39 	bl	801b480 <iprintf>
 8015a0e:	f06f 030f 	mvn.w	r3, #15
 8015a12:	e088      	b.n	8015b26 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8015a14:	68fb      	ldr	r3, [r7, #12]
 8015a16:	8a5b      	ldrh	r3, [r3, #18]
 8015a18:	2b00      	cmp	r3, #0
 8015a1a:	d10f      	bne.n	8015a3c <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8015a1c:	68f9      	ldr	r1, [r7, #12]
 8015a1e:	68fb      	ldr	r3, [r7, #12]
 8015a20:	8a5b      	ldrh	r3, [r3, #18]
 8015a22:	461a      	mov	r2, r3
 8015a24:	68f8      	ldr	r0, [r7, #12]
 8015a26:	f000 f893 	bl	8015b50 <udp_bind>
 8015a2a:	4603      	mov	r3, r0
 8015a2c:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8015a2e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8015a32:	2b00      	cmp	r3, #0
 8015a34:	d002      	beq.n	8015a3c <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8015a36:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8015a3a:	e074      	b.n	8015b26 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8015a3c:	68bb      	ldr	r3, [r7, #8]
 8015a3e:	891b      	ldrh	r3, [r3, #8]
 8015a40:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8015a44:	4293      	cmp	r3, r2
 8015a46:	d902      	bls.n	8015a4e <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8015a48:	f04f 33ff 	mov.w	r3, #4294967295
 8015a4c:	e06b      	b.n	8015b26 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8015a4e:	2108      	movs	r1, #8
 8015a50:	68b8      	ldr	r0, [r7, #8]
 8015a52:	f7f9 fcc3 	bl	800f3dc <pbuf_add_header>
 8015a56:	4603      	mov	r3, r0
 8015a58:	2b00      	cmp	r3, #0
 8015a5a:	d015      	beq.n	8015a88 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8015a5c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015a60:	2108      	movs	r1, #8
 8015a62:	2022      	movs	r0, #34	; 0x22
 8015a64:	f7f9 fa68 	bl	800ef38 <pbuf_alloc>
 8015a68:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8015a6a:	69fb      	ldr	r3, [r7, #28]
 8015a6c:	2b00      	cmp	r3, #0
 8015a6e:	d102      	bne.n	8015a76 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8015a70:	f04f 33ff 	mov.w	r3, #4294967295
 8015a74:	e057      	b.n	8015b26 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 8015a76:	68bb      	ldr	r3, [r7, #8]
 8015a78:	891b      	ldrh	r3, [r3, #8]
 8015a7a:	2b00      	cmp	r3, #0
 8015a7c:	d006      	beq.n	8015a8c <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8015a7e:	68b9      	ldr	r1, [r7, #8]
 8015a80:	69f8      	ldr	r0, [r7, #28]
 8015a82:	f7f9 fe65 	bl	800f750 <pbuf_chain>
 8015a86:	e001      	b.n	8015a8c <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8015a88:	68bb      	ldr	r3, [r7, #8]
 8015a8a:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8015a8c:	69fb      	ldr	r3, [r7, #28]
 8015a8e:	895b      	ldrh	r3, [r3, #10]
 8015a90:	2b07      	cmp	r3, #7
 8015a92:	d806      	bhi.n	8015aa2 <udp_sendto_if_src+0x11e>
 8015a94:	4b26      	ldr	r3, [pc, #152]	; (8015b30 <udp_sendto_if_src+0x1ac>)
 8015a96:	f240 320d 	movw	r2, #781	; 0x30d
 8015a9a:	492c      	ldr	r1, [pc, #176]	; (8015b4c <udp_sendto_if_src+0x1c8>)
 8015a9c:	4826      	ldr	r0, [pc, #152]	; (8015b38 <udp_sendto_if_src+0x1b4>)
 8015a9e:	f005 fcef 	bl	801b480 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8015aa2:	69fb      	ldr	r3, [r7, #28]
 8015aa4:	685b      	ldr	r3, [r3, #4]
 8015aa6:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8015aa8:	68fb      	ldr	r3, [r7, #12]
 8015aaa:	8a5b      	ldrh	r3, [r3, #18]
 8015aac:	4618      	mov	r0, r3
 8015aae:	f7f8 f809 	bl	800dac4 <lwip_htons>
 8015ab2:	4603      	mov	r3, r0
 8015ab4:	461a      	mov	r2, r3
 8015ab6:	697b      	ldr	r3, [r7, #20]
 8015ab8:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8015aba:	887b      	ldrh	r3, [r7, #2]
 8015abc:	4618      	mov	r0, r3
 8015abe:	f7f8 f801 	bl	800dac4 <lwip_htons>
 8015ac2:	4603      	mov	r3, r0
 8015ac4:	461a      	mov	r2, r3
 8015ac6:	697b      	ldr	r3, [r7, #20]
 8015ac8:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8015aca:	697b      	ldr	r3, [r7, #20]
 8015acc:	2200      	movs	r2, #0
 8015ace:	719a      	strb	r2, [r3, #6]
 8015ad0:	2200      	movs	r2, #0
 8015ad2:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8015ad4:	69fb      	ldr	r3, [r7, #28]
 8015ad6:	891b      	ldrh	r3, [r3, #8]
 8015ad8:	4618      	mov	r0, r3
 8015ada:	f7f7 fff3 	bl	800dac4 <lwip_htons>
 8015ade:	4603      	mov	r3, r0
 8015ae0:	461a      	mov	r2, r3
 8015ae2:	697b      	ldr	r3, [r7, #20]
 8015ae4:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8015ae6:	2311      	movs	r3, #17
 8015ae8:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8015aea:	68fb      	ldr	r3, [r7, #12]
 8015aec:	7adb      	ldrb	r3, [r3, #11]
 8015aee:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8015af0:	68fb      	ldr	r3, [r7, #12]
 8015af2:	7a9b      	ldrb	r3, [r3, #10]
 8015af4:	7cb9      	ldrb	r1, [r7, #18]
 8015af6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015af8:	9202      	str	r2, [sp, #8]
 8015afa:	7cfa      	ldrb	r2, [r7, #19]
 8015afc:	9201      	str	r2, [sp, #4]
 8015afe:	9300      	str	r3, [sp, #0]
 8015b00:	460b      	mov	r3, r1
 8015b02:	687a      	ldr	r2, [r7, #4]
 8015b04:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015b06:	69f8      	ldr	r0, [r7, #28]
 8015b08:	f003 fc40 	bl	801938c <ip4_output_if_src>
 8015b0c:	4603      	mov	r3, r0
 8015b0e:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8015b10:	69fa      	ldr	r2, [r7, #28]
 8015b12:	68bb      	ldr	r3, [r7, #8]
 8015b14:	429a      	cmp	r2, r3
 8015b16:	d004      	beq.n	8015b22 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8015b18:	69f8      	ldr	r0, [r7, #28]
 8015b1a:	f7f9 fcf5 	bl	800f508 <pbuf_free>
    q = NULL;
 8015b1e:	2300      	movs	r3, #0
 8015b20:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8015b22:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8015b26:	4618      	mov	r0, r3
 8015b28:	3720      	adds	r7, #32
 8015b2a:	46bd      	mov	sp, r7
 8015b2c:	bd80      	pop	{r7, pc}
 8015b2e:	bf00      	nop
 8015b30:	08020354 	.word	0x08020354
 8015b34:	08020540 	.word	0x08020540
 8015b38:	080203a8 	.word	0x080203a8
 8015b3c:	08020560 	.word	0x08020560
 8015b40:	08020580 	.word	0x08020580
 8015b44:	080205a4 	.word	0x080205a4
 8015b48:	080205c8 	.word	0x080205c8
 8015b4c:	080205ec 	.word	0x080205ec

08015b50 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8015b50:	b580      	push	{r7, lr}
 8015b52:	b086      	sub	sp, #24
 8015b54:	af00      	add	r7, sp, #0
 8015b56:	60f8      	str	r0, [r7, #12]
 8015b58:	60b9      	str	r1, [r7, #8]
 8015b5a:	4613      	mov	r3, r2
 8015b5c:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8015b5e:	68bb      	ldr	r3, [r7, #8]
 8015b60:	2b00      	cmp	r3, #0
 8015b62:	d101      	bne.n	8015b68 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8015b64:	4b39      	ldr	r3, [pc, #228]	; (8015c4c <udp_bind+0xfc>)
 8015b66:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8015b68:	68fb      	ldr	r3, [r7, #12]
 8015b6a:	2b00      	cmp	r3, #0
 8015b6c:	d109      	bne.n	8015b82 <udp_bind+0x32>
 8015b6e:	4b38      	ldr	r3, [pc, #224]	; (8015c50 <udp_bind+0x100>)
 8015b70:	f240 32b7 	movw	r2, #951	; 0x3b7
 8015b74:	4937      	ldr	r1, [pc, #220]	; (8015c54 <udp_bind+0x104>)
 8015b76:	4838      	ldr	r0, [pc, #224]	; (8015c58 <udp_bind+0x108>)
 8015b78:	f005 fc82 	bl	801b480 <iprintf>
 8015b7c:	f06f 030f 	mvn.w	r3, #15
 8015b80:	e060      	b.n	8015c44 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8015b82:	2300      	movs	r3, #0
 8015b84:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8015b86:	4b35      	ldr	r3, [pc, #212]	; (8015c5c <udp_bind+0x10c>)
 8015b88:	681b      	ldr	r3, [r3, #0]
 8015b8a:	617b      	str	r3, [r7, #20]
 8015b8c:	e009      	b.n	8015ba2 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8015b8e:	68fa      	ldr	r2, [r7, #12]
 8015b90:	697b      	ldr	r3, [r7, #20]
 8015b92:	429a      	cmp	r2, r3
 8015b94:	d102      	bne.n	8015b9c <udp_bind+0x4c>
      rebind = 1;
 8015b96:	2301      	movs	r3, #1
 8015b98:	74fb      	strb	r3, [r7, #19]
      break;
 8015b9a:	e005      	b.n	8015ba8 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8015b9c:	697b      	ldr	r3, [r7, #20]
 8015b9e:	68db      	ldr	r3, [r3, #12]
 8015ba0:	617b      	str	r3, [r7, #20]
 8015ba2:	697b      	ldr	r3, [r7, #20]
 8015ba4:	2b00      	cmp	r3, #0
 8015ba6:	d1f2      	bne.n	8015b8e <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8015ba8:	88fb      	ldrh	r3, [r7, #6]
 8015baa:	2b00      	cmp	r3, #0
 8015bac:	d109      	bne.n	8015bc2 <udp_bind+0x72>
    port = udp_new_port();
 8015bae:	f7ff fc1d 	bl	80153ec <udp_new_port>
 8015bb2:	4603      	mov	r3, r0
 8015bb4:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8015bb6:	88fb      	ldrh	r3, [r7, #6]
 8015bb8:	2b00      	cmp	r3, #0
 8015bba:	d12c      	bne.n	8015c16 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8015bbc:	f06f 0307 	mvn.w	r3, #7
 8015bc0:	e040      	b.n	8015c44 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8015bc2:	4b26      	ldr	r3, [pc, #152]	; (8015c5c <udp_bind+0x10c>)
 8015bc4:	681b      	ldr	r3, [r3, #0]
 8015bc6:	617b      	str	r3, [r7, #20]
 8015bc8:	e022      	b.n	8015c10 <udp_bind+0xc0>
      if (pcb != ipcb) {
 8015bca:	68fa      	ldr	r2, [r7, #12]
 8015bcc:	697b      	ldr	r3, [r7, #20]
 8015bce:	429a      	cmp	r2, r3
 8015bd0:	d01b      	beq.n	8015c0a <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8015bd2:	697b      	ldr	r3, [r7, #20]
 8015bd4:	8a5b      	ldrh	r3, [r3, #18]
 8015bd6:	88fa      	ldrh	r2, [r7, #6]
 8015bd8:	429a      	cmp	r2, r3
 8015bda:	d116      	bne.n	8015c0a <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8015bdc:	697b      	ldr	r3, [r7, #20]
 8015bde:	681a      	ldr	r2, [r3, #0]
 8015be0:	68bb      	ldr	r3, [r7, #8]
 8015be2:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8015be4:	429a      	cmp	r2, r3
 8015be6:	d00d      	beq.n	8015c04 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8015be8:	68bb      	ldr	r3, [r7, #8]
 8015bea:	2b00      	cmp	r3, #0
 8015bec:	d00a      	beq.n	8015c04 <udp_bind+0xb4>
 8015bee:	68bb      	ldr	r3, [r7, #8]
 8015bf0:	681b      	ldr	r3, [r3, #0]
 8015bf2:	2b00      	cmp	r3, #0
 8015bf4:	d006      	beq.n	8015c04 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8015bf6:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8015bf8:	2b00      	cmp	r3, #0
 8015bfa:	d003      	beq.n	8015c04 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8015bfc:	697b      	ldr	r3, [r7, #20]
 8015bfe:	681b      	ldr	r3, [r3, #0]
 8015c00:	2b00      	cmp	r3, #0
 8015c02:	d102      	bne.n	8015c0a <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8015c04:	f06f 0307 	mvn.w	r3, #7
 8015c08:	e01c      	b.n	8015c44 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8015c0a:	697b      	ldr	r3, [r7, #20]
 8015c0c:	68db      	ldr	r3, [r3, #12]
 8015c0e:	617b      	str	r3, [r7, #20]
 8015c10:	697b      	ldr	r3, [r7, #20]
 8015c12:	2b00      	cmp	r3, #0
 8015c14:	d1d9      	bne.n	8015bca <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8015c16:	68bb      	ldr	r3, [r7, #8]
 8015c18:	2b00      	cmp	r3, #0
 8015c1a:	d002      	beq.n	8015c22 <udp_bind+0xd2>
 8015c1c:	68bb      	ldr	r3, [r7, #8]
 8015c1e:	681b      	ldr	r3, [r3, #0]
 8015c20:	e000      	b.n	8015c24 <udp_bind+0xd4>
 8015c22:	2300      	movs	r3, #0
 8015c24:	68fa      	ldr	r2, [r7, #12]
 8015c26:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8015c28:	68fb      	ldr	r3, [r7, #12]
 8015c2a:	88fa      	ldrh	r2, [r7, #6]
 8015c2c:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8015c2e:	7cfb      	ldrb	r3, [r7, #19]
 8015c30:	2b00      	cmp	r3, #0
 8015c32:	d106      	bne.n	8015c42 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8015c34:	4b09      	ldr	r3, [pc, #36]	; (8015c5c <udp_bind+0x10c>)
 8015c36:	681a      	ldr	r2, [r3, #0]
 8015c38:	68fb      	ldr	r3, [r7, #12]
 8015c3a:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8015c3c:	4a07      	ldr	r2, [pc, #28]	; (8015c5c <udp_bind+0x10c>)
 8015c3e:	68fb      	ldr	r3, [r7, #12]
 8015c40:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8015c42:	2300      	movs	r3, #0
}
 8015c44:	4618      	mov	r0, r3
 8015c46:	3718      	adds	r7, #24
 8015c48:	46bd      	mov	sp, r7
 8015c4a:	bd80      	pop	{r7, pc}
 8015c4c:	0806cf80 	.word	0x0806cf80
 8015c50:	08020354 	.word	0x08020354
 8015c54:	0802061c 	.word	0x0802061c
 8015c58:	080203a8 	.word	0x080203a8
 8015c5c:	20013bd4 	.word	0x20013bd4

08015c60 <udp_bind_netif>:
 *
 * @see udp_disconnect()
 */
void
udp_bind_netif(struct udp_pcb *pcb, const struct netif *netif)
{
 8015c60:	b480      	push	{r7}
 8015c62:	b083      	sub	sp, #12
 8015c64:	af00      	add	r7, sp, #0
 8015c66:	6078      	str	r0, [r7, #4]
 8015c68:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif != NULL) {
 8015c6a:	683b      	ldr	r3, [r7, #0]
 8015c6c:	2b00      	cmp	r3, #0
 8015c6e:	d007      	beq.n	8015c80 <udp_bind_netif+0x20>
    pcb->netif_idx = netif_get_index(netif);
 8015c70:	683b      	ldr	r3, [r7, #0]
 8015c72:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8015c76:	3301      	adds	r3, #1
 8015c78:	b2da      	uxtb	r2, r3
 8015c7a:	687b      	ldr	r3, [r7, #4]
 8015c7c:	721a      	strb	r2, [r3, #8]
  } else {
    pcb->netif_idx = NETIF_NO_INDEX;
  }
}
 8015c7e:	e002      	b.n	8015c86 <udp_bind_netif+0x26>
    pcb->netif_idx = NETIF_NO_INDEX;
 8015c80:	687b      	ldr	r3, [r7, #4]
 8015c82:	2200      	movs	r2, #0
 8015c84:	721a      	strb	r2, [r3, #8]
}
 8015c86:	bf00      	nop
 8015c88:	370c      	adds	r7, #12
 8015c8a:	46bd      	mov	sp, r7
 8015c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c90:	4770      	bx	lr
	...

08015c94 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8015c94:	b580      	push	{r7, lr}
 8015c96:	b086      	sub	sp, #24
 8015c98:	af00      	add	r7, sp, #0
 8015c9a:	60f8      	str	r0, [r7, #12]
 8015c9c:	60b9      	str	r1, [r7, #8]
 8015c9e:	4613      	mov	r3, r2
 8015ca0:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8015ca2:	68fb      	ldr	r3, [r7, #12]
 8015ca4:	2b00      	cmp	r3, #0
 8015ca6:	d109      	bne.n	8015cbc <udp_connect+0x28>
 8015ca8:	4b2c      	ldr	r3, [pc, #176]	; (8015d5c <udp_connect+0xc8>)
 8015caa:	f240 4235 	movw	r2, #1077	; 0x435
 8015cae:	492c      	ldr	r1, [pc, #176]	; (8015d60 <udp_connect+0xcc>)
 8015cb0:	482c      	ldr	r0, [pc, #176]	; (8015d64 <udp_connect+0xd0>)
 8015cb2:	f005 fbe5 	bl	801b480 <iprintf>
 8015cb6:	f06f 030f 	mvn.w	r3, #15
 8015cba:	e04b      	b.n	8015d54 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8015cbc:	68bb      	ldr	r3, [r7, #8]
 8015cbe:	2b00      	cmp	r3, #0
 8015cc0:	d109      	bne.n	8015cd6 <udp_connect+0x42>
 8015cc2:	4b26      	ldr	r3, [pc, #152]	; (8015d5c <udp_connect+0xc8>)
 8015cc4:	f240 4236 	movw	r2, #1078	; 0x436
 8015cc8:	4927      	ldr	r1, [pc, #156]	; (8015d68 <udp_connect+0xd4>)
 8015cca:	4826      	ldr	r0, [pc, #152]	; (8015d64 <udp_connect+0xd0>)
 8015ccc:	f005 fbd8 	bl	801b480 <iprintf>
 8015cd0:	f06f 030f 	mvn.w	r3, #15
 8015cd4:	e03e      	b.n	8015d54 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8015cd6:	68fb      	ldr	r3, [r7, #12]
 8015cd8:	8a5b      	ldrh	r3, [r3, #18]
 8015cda:	2b00      	cmp	r3, #0
 8015cdc:	d10f      	bne.n	8015cfe <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8015cde:	68f9      	ldr	r1, [r7, #12]
 8015ce0:	68fb      	ldr	r3, [r7, #12]
 8015ce2:	8a5b      	ldrh	r3, [r3, #18]
 8015ce4:	461a      	mov	r2, r3
 8015ce6:	68f8      	ldr	r0, [r7, #12]
 8015ce8:	f7ff ff32 	bl	8015b50 <udp_bind>
 8015cec:	4603      	mov	r3, r0
 8015cee:	75fb      	strb	r3, [r7, #23]
    if (err != ERR_OK) {
 8015cf0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8015cf4:	2b00      	cmp	r3, #0
 8015cf6:	d002      	beq.n	8015cfe <udp_connect+0x6a>
      return err;
 8015cf8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8015cfc:	e02a      	b.n	8015d54 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8015cfe:	68bb      	ldr	r3, [r7, #8]
 8015d00:	2b00      	cmp	r3, #0
 8015d02:	d002      	beq.n	8015d0a <udp_connect+0x76>
 8015d04:	68bb      	ldr	r3, [r7, #8]
 8015d06:	681b      	ldr	r3, [r3, #0]
 8015d08:	e000      	b.n	8015d0c <udp_connect+0x78>
 8015d0a:	2300      	movs	r3, #0
 8015d0c:	68fa      	ldr	r2, [r7, #12]
 8015d0e:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8015d10:	68fb      	ldr	r3, [r7, #12]
 8015d12:	88fa      	ldrh	r2, [r7, #6]
 8015d14:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8015d16:	68fb      	ldr	r3, [r7, #12]
 8015d18:	7c1b      	ldrb	r3, [r3, #16]
 8015d1a:	f043 0304 	orr.w	r3, r3, #4
 8015d1e:	b2da      	uxtb	r2, r3
 8015d20:	68fb      	ldr	r3, [r7, #12]
 8015d22:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8015d24:	4b11      	ldr	r3, [pc, #68]	; (8015d6c <udp_connect+0xd8>)
 8015d26:	681b      	ldr	r3, [r3, #0]
 8015d28:	613b      	str	r3, [r7, #16]
 8015d2a:	e008      	b.n	8015d3e <udp_connect+0xaa>
    if (pcb == ipcb) {
 8015d2c:	68fa      	ldr	r2, [r7, #12]
 8015d2e:	693b      	ldr	r3, [r7, #16]
 8015d30:	429a      	cmp	r2, r3
 8015d32:	d101      	bne.n	8015d38 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8015d34:	2300      	movs	r3, #0
 8015d36:	e00d      	b.n	8015d54 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8015d38:	693b      	ldr	r3, [r7, #16]
 8015d3a:	68db      	ldr	r3, [r3, #12]
 8015d3c:	613b      	str	r3, [r7, #16]
 8015d3e:	693b      	ldr	r3, [r7, #16]
 8015d40:	2b00      	cmp	r3, #0
 8015d42:	d1f3      	bne.n	8015d2c <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8015d44:	4b09      	ldr	r3, [pc, #36]	; (8015d6c <udp_connect+0xd8>)
 8015d46:	681a      	ldr	r2, [r3, #0]
 8015d48:	68fb      	ldr	r3, [r7, #12]
 8015d4a:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8015d4c:	4a07      	ldr	r2, [pc, #28]	; (8015d6c <udp_connect+0xd8>)
 8015d4e:	68fb      	ldr	r3, [r7, #12]
 8015d50:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8015d52:	2300      	movs	r3, #0
}
 8015d54:	4618      	mov	r0, r3
 8015d56:	3718      	adds	r7, #24
 8015d58:	46bd      	mov	sp, r7
 8015d5a:	bd80      	pop	{r7, pc}
 8015d5c:	08020354 	.word	0x08020354
 8015d60:	08020634 	.word	0x08020634
 8015d64:	080203a8 	.word	0x080203a8
 8015d68:	08020650 	.word	0x08020650
 8015d6c:	20013bd4 	.word	0x20013bd4

08015d70 <udp_disconnect>:
 *
 * @param pcb the udp pcb to disconnect.
 */
void
udp_disconnect(struct udp_pcb *pcb)
{
 8015d70:	b580      	push	{r7, lr}
 8015d72:	b082      	sub	sp, #8
 8015d74:	af00      	add	r7, sp, #0
 8015d76:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_disconnect: invalid pcb", pcb != NULL, return);
 8015d78:	687b      	ldr	r3, [r7, #4]
 8015d7a:	2b00      	cmp	r3, #0
 8015d7c:	d107      	bne.n	8015d8e <udp_disconnect+0x1e>
 8015d7e:	4b0d      	ldr	r3, [pc, #52]	; (8015db4 <udp_disconnect+0x44>)
 8015d80:	f240 426a 	movw	r2, #1130	; 0x46a
 8015d84:	490c      	ldr	r1, [pc, #48]	; (8015db8 <udp_disconnect+0x48>)
 8015d86:	480d      	ldr	r0, [pc, #52]	; (8015dbc <udp_disconnect+0x4c>)
 8015d88:	f005 fb7a 	bl	801b480 <iprintf>
 8015d8c:	e00f      	b.n	8015dae <udp_disconnect+0x3e>
#if LWIP_IPV4 && LWIP_IPV6
  if (IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    ip_addr_copy(pcb->remote_ip, *IP_ANY_TYPE);
  } else {
#endif
    ip_addr_set_any(IP_IS_V6_VAL(pcb->remote_ip), &pcb->remote_ip);
 8015d8e:	687b      	ldr	r3, [r7, #4]
 8015d90:	2200      	movs	r2, #0
 8015d92:	605a      	str	r2, [r3, #4]
#if LWIP_IPV4 && LWIP_IPV6
  }
#endif
  pcb->remote_port = 0;
 8015d94:	687b      	ldr	r3, [r7, #4]
 8015d96:	2200      	movs	r2, #0
 8015d98:	829a      	strh	r2, [r3, #20]
  pcb->netif_idx = NETIF_NO_INDEX;
 8015d9a:	687b      	ldr	r3, [r7, #4]
 8015d9c:	2200      	movs	r2, #0
 8015d9e:	721a      	strb	r2, [r3, #8]
  /* mark PCB as unconnected */
  udp_clear_flags(pcb, UDP_FLAGS_CONNECTED);
 8015da0:	687b      	ldr	r3, [r7, #4]
 8015da2:	7c1b      	ldrb	r3, [r3, #16]
 8015da4:	f023 0304 	bic.w	r3, r3, #4
 8015da8:	b2da      	uxtb	r2, r3
 8015daa:	687b      	ldr	r3, [r7, #4]
 8015dac:	741a      	strb	r2, [r3, #16]
}
 8015dae:	3708      	adds	r7, #8
 8015db0:	46bd      	mov	sp, r7
 8015db2:	bd80      	pop	{r7, pc}
 8015db4:	08020354 	.word	0x08020354
 8015db8:	0802066c 	.word	0x0802066c
 8015dbc:	080203a8 	.word	0x080203a8

08015dc0 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8015dc0:	b580      	push	{r7, lr}
 8015dc2:	b084      	sub	sp, #16
 8015dc4:	af00      	add	r7, sp, #0
 8015dc6:	60f8      	str	r0, [r7, #12]
 8015dc8:	60b9      	str	r1, [r7, #8]
 8015dca:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8015dcc:	68fb      	ldr	r3, [r7, #12]
 8015dce:	2b00      	cmp	r3, #0
 8015dd0:	d107      	bne.n	8015de2 <udp_recv+0x22>
 8015dd2:	4b08      	ldr	r3, [pc, #32]	; (8015df4 <udp_recv+0x34>)
 8015dd4:	f240 428a 	movw	r2, #1162	; 0x48a
 8015dd8:	4907      	ldr	r1, [pc, #28]	; (8015df8 <udp_recv+0x38>)
 8015dda:	4808      	ldr	r0, [pc, #32]	; (8015dfc <udp_recv+0x3c>)
 8015ddc:	f005 fb50 	bl	801b480 <iprintf>
 8015de0:	e005      	b.n	8015dee <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8015de2:	68fb      	ldr	r3, [r7, #12]
 8015de4:	68ba      	ldr	r2, [r7, #8]
 8015de6:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8015de8:	68fb      	ldr	r3, [r7, #12]
 8015dea:	687a      	ldr	r2, [r7, #4]
 8015dec:	61da      	str	r2, [r3, #28]
}
 8015dee:	3710      	adds	r7, #16
 8015df0:	46bd      	mov	sp, r7
 8015df2:	bd80      	pop	{r7, pc}
 8015df4:	08020354 	.word	0x08020354
 8015df8:	08020688 	.word	0x08020688
 8015dfc:	080203a8 	.word	0x080203a8

08015e00 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8015e00:	b580      	push	{r7, lr}
 8015e02:	b084      	sub	sp, #16
 8015e04:	af00      	add	r7, sp, #0
 8015e06:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8015e08:	687b      	ldr	r3, [r7, #4]
 8015e0a:	2b00      	cmp	r3, #0
 8015e0c:	d107      	bne.n	8015e1e <udp_remove+0x1e>
 8015e0e:	4b19      	ldr	r3, [pc, #100]	; (8015e74 <udp_remove+0x74>)
 8015e10:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8015e14:	4918      	ldr	r1, [pc, #96]	; (8015e78 <udp_remove+0x78>)
 8015e16:	4819      	ldr	r0, [pc, #100]	; (8015e7c <udp_remove+0x7c>)
 8015e18:	f005 fb32 	bl	801b480 <iprintf>
 8015e1c:	e026      	b.n	8015e6c <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8015e1e:	4b18      	ldr	r3, [pc, #96]	; (8015e80 <udp_remove+0x80>)
 8015e20:	681b      	ldr	r3, [r3, #0]
 8015e22:	687a      	ldr	r2, [r7, #4]
 8015e24:	429a      	cmp	r2, r3
 8015e26:	d105      	bne.n	8015e34 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8015e28:	4b15      	ldr	r3, [pc, #84]	; (8015e80 <udp_remove+0x80>)
 8015e2a:	681b      	ldr	r3, [r3, #0]
 8015e2c:	68db      	ldr	r3, [r3, #12]
 8015e2e:	4a14      	ldr	r2, [pc, #80]	; (8015e80 <udp_remove+0x80>)
 8015e30:	6013      	str	r3, [r2, #0]
 8015e32:	e017      	b.n	8015e64 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8015e34:	4b12      	ldr	r3, [pc, #72]	; (8015e80 <udp_remove+0x80>)
 8015e36:	681b      	ldr	r3, [r3, #0]
 8015e38:	60fb      	str	r3, [r7, #12]
 8015e3a:	e010      	b.n	8015e5e <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8015e3c:	68fb      	ldr	r3, [r7, #12]
 8015e3e:	68db      	ldr	r3, [r3, #12]
 8015e40:	2b00      	cmp	r3, #0
 8015e42:	d009      	beq.n	8015e58 <udp_remove+0x58>
 8015e44:	68fb      	ldr	r3, [r7, #12]
 8015e46:	68db      	ldr	r3, [r3, #12]
 8015e48:	687a      	ldr	r2, [r7, #4]
 8015e4a:	429a      	cmp	r2, r3
 8015e4c:	d104      	bne.n	8015e58 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8015e4e:	687b      	ldr	r3, [r7, #4]
 8015e50:	68da      	ldr	r2, [r3, #12]
 8015e52:	68fb      	ldr	r3, [r7, #12]
 8015e54:	60da      	str	r2, [r3, #12]
        break;
 8015e56:	e005      	b.n	8015e64 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8015e58:	68fb      	ldr	r3, [r7, #12]
 8015e5a:	68db      	ldr	r3, [r3, #12]
 8015e5c:	60fb      	str	r3, [r7, #12]
 8015e5e:	68fb      	ldr	r3, [r7, #12]
 8015e60:	2b00      	cmp	r3, #0
 8015e62:	d1eb      	bne.n	8015e3c <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8015e64:	6879      	ldr	r1, [r7, #4]
 8015e66:	2000      	movs	r0, #0
 8015e68:	f7f8 fcac 	bl	800e7c4 <memp_free>
}
 8015e6c:	3710      	adds	r7, #16
 8015e6e:	46bd      	mov	sp, r7
 8015e70:	bd80      	pop	{r7, pc}
 8015e72:	bf00      	nop
 8015e74:	08020354 	.word	0x08020354
 8015e78:	080206a0 	.word	0x080206a0
 8015e7c:	080203a8 	.word	0x080203a8
 8015e80:	20013bd4 	.word	0x20013bd4

08015e84 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8015e84:	b580      	push	{r7, lr}
 8015e86:	b082      	sub	sp, #8
 8015e88:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8015e8a:	2000      	movs	r0, #0
 8015e8c:	f7f8 fc48 	bl	800e720 <memp_malloc>
 8015e90:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8015e92:	687b      	ldr	r3, [r7, #4]
 8015e94:	2b00      	cmp	r3, #0
 8015e96:	d007      	beq.n	8015ea8 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8015e98:	2220      	movs	r2, #32
 8015e9a:	2100      	movs	r1, #0
 8015e9c:	6878      	ldr	r0, [r7, #4]
 8015e9e:	f004 fd87 	bl	801a9b0 <memset>
    pcb->ttl = UDP_TTL;
 8015ea2:	687b      	ldr	r3, [r7, #4]
 8015ea4:	22ff      	movs	r2, #255	; 0xff
 8015ea6:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8015ea8:	687b      	ldr	r3, [r7, #4]
}
 8015eaa:	4618      	mov	r0, r3
 8015eac:	3708      	adds	r7, #8
 8015eae:	46bd      	mov	sp, r7
 8015eb0:	bd80      	pop	{r7, pc}
	...

08015eb4 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8015eb4:	b480      	push	{r7}
 8015eb6:	b085      	sub	sp, #20
 8015eb8:	af00      	add	r7, sp, #0
 8015eba:	6078      	str	r0, [r7, #4]
 8015ebc:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8015ebe:	687b      	ldr	r3, [r7, #4]
 8015ec0:	2b00      	cmp	r3, #0
 8015ec2:	d01e      	beq.n	8015f02 <udp_netif_ip_addr_changed+0x4e>
 8015ec4:	687b      	ldr	r3, [r7, #4]
 8015ec6:	681b      	ldr	r3, [r3, #0]
 8015ec8:	2b00      	cmp	r3, #0
 8015eca:	d01a      	beq.n	8015f02 <udp_netif_ip_addr_changed+0x4e>
 8015ecc:	683b      	ldr	r3, [r7, #0]
 8015ece:	2b00      	cmp	r3, #0
 8015ed0:	d017      	beq.n	8015f02 <udp_netif_ip_addr_changed+0x4e>
 8015ed2:	683b      	ldr	r3, [r7, #0]
 8015ed4:	681b      	ldr	r3, [r3, #0]
 8015ed6:	2b00      	cmp	r3, #0
 8015ed8:	d013      	beq.n	8015f02 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8015eda:	4b0d      	ldr	r3, [pc, #52]	; (8015f10 <udp_netif_ip_addr_changed+0x5c>)
 8015edc:	681b      	ldr	r3, [r3, #0]
 8015ede:	60fb      	str	r3, [r7, #12]
 8015ee0:	e00c      	b.n	8015efc <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8015ee2:	68fb      	ldr	r3, [r7, #12]
 8015ee4:	681a      	ldr	r2, [r3, #0]
 8015ee6:	687b      	ldr	r3, [r7, #4]
 8015ee8:	681b      	ldr	r3, [r3, #0]
 8015eea:	429a      	cmp	r2, r3
 8015eec:	d103      	bne.n	8015ef6 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8015eee:	683b      	ldr	r3, [r7, #0]
 8015ef0:	681a      	ldr	r2, [r3, #0]
 8015ef2:	68fb      	ldr	r3, [r7, #12]
 8015ef4:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8015ef6:	68fb      	ldr	r3, [r7, #12]
 8015ef8:	68db      	ldr	r3, [r3, #12]
 8015efa:	60fb      	str	r3, [r7, #12]
 8015efc:	68fb      	ldr	r3, [r7, #12]
 8015efe:	2b00      	cmp	r3, #0
 8015f00:	d1ef      	bne.n	8015ee2 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8015f02:	bf00      	nop
 8015f04:	3714      	adds	r7, #20
 8015f06:	46bd      	mov	sp, r7
 8015f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f0c:	4770      	bx	lr
 8015f0e:	bf00      	nop
 8015f10:	20013bd4 	.word	0x20013bd4

08015f14 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 8015f14:	b580      	push	{r7, lr}
 8015f16:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 8015f18:	4b20      	ldr	r3, [pc, #128]	; (8015f9c <dhcp_inc_pcb_refcount+0x88>)
 8015f1a:	781b      	ldrb	r3, [r3, #0]
 8015f1c:	2b00      	cmp	r3, #0
 8015f1e:	d133      	bne.n	8015f88 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 8015f20:	4b1f      	ldr	r3, [pc, #124]	; (8015fa0 <dhcp_inc_pcb_refcount+0x8c>)
 8015f22:	681b      	ldr	r3, [r3, #0]
 8015f24:	2b00      	cmp	r3, #0
 8015f26:	d005      	beq.n	8015f34 <dhcp_inc_pcb_refcount+0x20>
 8015f28:	4b1e      	ldr	r3, [pc, #120]	; (8015fa4 <dhcp_inc_pcb_refcount+0x90>)
 8015f2a:	22e5      	movs	r2, #229	; 0xe5
 8015f2c:	491e      	ldr	r1, [pc, #120]	; (8015fa8 <dhcp_inc_pcb_refcount+0x94>)
 8015f2e:	481f      	ldr	r0, [pc, #124]	; (8015fac <dhcp_inc_pcb_refcount+0x98>)
 8015f30:	f005 faa6 	bl	801b480 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 8015f34:	f7ff ffa6 	bl	8015e84 <udp_new>
 8015f38:	4603      	mov	r3, r0
 8015f3a:	4a19      	ldr	r2, [pc, #100]	; (8015fa0 <dhcp_inc_pcb_refcount+0x8c>)
 8015f3c:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 8015f3e:	4b18      	ldr	r3, [pc, #96]	; (8015fa0 <dhcp_inc_pcb_refcount+0x8c>)
 8015f40:	681b      	ldr	r3, [r3, #0]
 8015f42:	2b00      	cmp	r3, #0
 8015f44:	d102      	bne.n	8015f4c <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 8015f46:	f04f 33ff 	mov.w	r3, #4294967295
 8015f4a:	e024      	b.n	8015f96 <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8015f4c:	4b14      	ldr	r3, [pc, #80]	; (8015fa0 <dhcp_inc_pcb_refcount+0x8c>)
 8015f4e:	681b      	ldr	r3, [r3, #0]
 8015f50:	7a5a      	ldrb	r2, [r3, #9]
 8015f52:	4b13      	ldr	r3, [pc, #76]	; (8015fa0 <dhcp_inc_pcb_refcount+0x8c>)
 8015f54:	681b      	ldr	r3, [r3, #0]
 8015f56:	f042 0220 	orr.w	r2, r2, #32
 8015f5a:	b2d2      	uxtb	r2, r2
 8015f5c:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 8015f5e:	4b10      	ldr	r3, [pc, #64]	; (8015fa0 <dhcp_inc_pcb_refcount+0x8c>)
 8015f60:	681b      	ldr	r3, [r3, #0]
 8015f62:	2244      	movs	r2, #68	; 0x44
 8015f64:	4912      	ldr	r1, [pc, #72]	; (8015fb0 <dhcp_inc_pcb_refcount+0x9c>)
 8015f66:	4618      	mov	r0, r3
 8015f68:	f7ff fdf2 	bl	8015b50 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 8015f6c:	4b0c      	ldr	r3, [pc, #48]	; (8015fa0 <dhcp_inc_pcb_refcount+0x8c>)
 8015f6e:	681b      	ldr	r3, [r3, #0]
 8015f70:	2243      	movs	r2, #67	; 0x43
 8015f72:	490f      	ldr	r1, [pc, #60]	; (8015fb0 <dhcp_inc_pcb_refcount+0x9c>)
 8015f74:	4618      	mov	r0, r3
 8015f76:	f7ff fe8d 	bl	8015c94 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 8015f7a:	4b09      	ldr	r3, [pc, #36]	; (8015fa0 <dhcp_inc_pcb_refcount+0x8c>)
 8015f7c:	681b      	ldr	r3, [r3, #0]
 8015f7e:	2200      	movs	r2, #0
 8015f80:	490c      	ldr	r1, [pc, #48]	; (8015fb4 <dhcp_inc_pcb_refcount+0xa0>)
 8015f82:	4618      	mov	r0, r3
 8015f84:	f7ff ff1c 	bl	8015dc0 <udp_recv>
  }

  dhcp_pcb_refcount++;
 8015f88:	4b04      	ldr	r3, [pc, #16]	; (8015f9c <dhcp_inc_pcb_refcount+0x88>)
 8015f8a:	781b      	ldrb	r3, [r3, #0]
 8015f8c:	3301      	adds	r3, #1
 8015f8e:	b2da      	uxtb	r2, r3
 8015f90:	4b02      	ldr	r3, [pc, #8]	; (8015f9c <dhcp_inc_pcb_refcount+0x88>)
 8015f92:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 8015f94:	2300      	movs	r3, #0
}
 8015f96:	4618      	mov	r0, r3
 8015f98:	bd80      	pop	{r7, pc}
 8015f9a:	bf00      	nop
 8015f9c:	20013c04 	.word	0x20013c04
 8015fa0:	20013c00 	.word	0x20013c00
 8015fa4:	080206b8 	.word	0x080206b8
 8015fa8:	080206f0 	.word	0x080206f0
 8015fac:	08020718 	.word	0x08020718
 8015fb0:	0806cf80 	.word	0x0806cf80
 8015fb4:	08017881 	.word	0x08017881

08015fb8 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 8015fb8:	b580      	push	{r7, lr}
 8015fba:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8015fbc:	4b0e      	ldr	r3, [pc, #56]	; (8015ff8 <dhcp_dec_pcb_refcount+0x40>)
 8015fbe:	781b      	ldrb	r3, [r3, #0]
 8015fc0:	2b00      	cmp	r3, #0
 8015fc2:	d105      	bne.n	8015fd0 <dhcp_dec_pcb_refcount+0x18>
 8015fc4:	4b0d      	ldr	r3, [pc, #52]	; (8015ffc <dhcp_dec_pcb_refcount+0x44>)
 8015fc6:	22ff      	movs	r2, #255	; 0xff
 8015fc8:	490d      	ldr	r1, [pc, #52]	; (8016000 <dhcp_dec_pcb_refcount+0x48>)
 8015fca:	480e      	ldr	r0, [pc, #56]	; (8016004 <dhcp_dec_pcb_refcount+0x4c>)
 8015fcc:	f005 fa58 	bl	801b480 <iprintf>
  dhcp_pcb_refcount--;
 8015fd0:	4b09      	ldr	r3, [pc, #36]	; (8015ff8 <dhcp_dec_pcb_refcount+0x40>)
 8015fd2:	781b      	ldrb	r3, [r3, #0]
 8015fd4:	3b01      	subs	r3, #1
 8015fd6:	b2da      	uxtb	r2, r3
 8015fd8:	4b07      	ldr	r3, [pc, #28]	; (8015ff8 <dhcp_dec_pcb_refcount+0x40>)
 8015fda:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 8015fdc:	4b06      	ldr	r3, [pc, #24]	; (8015ff8 <dhcp_dec_pcb_refcount+0x40>)
 8015fde:	781b      	ldrb	r3, [r3, #0]
 8015fe0:	2b00      	cmp	r3, #0
 8015fe2:	d107      	bne.n	8015ff4 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 8015fe4:	4b08      	ldr	r3, [pc, #32]	; (8016008 <dhcp_dec_pcb_refcount+0x50>)
 8015fe6:	681b      	ldr	r3, [r3, #0]
 8015fe8:	4618      	mov	r0, r3
 8015fea:	f7ff ff09 	bl	8015e00 <udp_remove>
    dhcp_pcb = NULL;
 8015fee:	4b06      	ldr	r3, [pc, #24]	; (8016008 <dhcp_dec_pcb_refcount+0x50>)
 8015ff0:	2200      	movs	r2, #0
 8015ff2:	601a      	str	r2, [r3, #0]
  }
}
 8015ff4:	bf00      	nop
 8015ff6:	bd80      	pop	{r7, pc}
 8015ff8:	20013c04 	.word	0x20013c04
 8015ffc:	080206b8 	.word	0x080206b8
 8016000:	08020740 	.word	0x08020740
 8016004:	08020718 	.word	0x08020718
 8016008:	20013c00 	.word	0x20013c00

0801600c <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 801600c:	b580      	push	{r7, lr}
 801600e:	b084      	sub	sp, #16
 8016010:	af00      	add	r7, sp, #0
 8016012:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016014:	687b      	ldr	r3, [r7, #4]
 8016016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016018:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 801601a:	210c      	movs	r1, #12
 801601c:	68f8      	ldr	r0, [r7, #12]
 801601e:	f001 f860 	bl	80170e2 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8016022:	4b06      	ldr	r3, [pc, #24]	; (801603c <dhcp_handle_nak+0x30>)
 8016024:	4a05      	ldr	r2, [pc, #20]	; (801603c <dhcp_handle_nak+0x30>)
 8016026:	4905      	ldr	r1, [pc, #20]	; (801603c <dhcp_handle_nak+0x30>)
 8016028:	6878      	ldr	r0, [r7, #4]
 801602a:	f7f8 fd6d 	bl	800eb08 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 801602e:	6878      	ldr	r0, [r7, #4]
 8016030:	f000 fc48 	bl	80168c4 <dhcp_discover>
}
 8016034:	bf00      	nop
 8016036:	3710      	adds	r7, #16
 8016038:	46bd      	mov	sp, r7
 801603a:	bd80      	pop	{r7, pc}
 801603c:	0806cf80 	.word	0x0806cf80

08016040 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 8016040:	b580      	push	{r7, lr}
 8016042:	b084      	sub	sp, #16
 8016044:	af00      	add	r7, sp, #0
 8016046:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016048:	687b      	ldr	r3, [r7, #4]
 801604a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801604c:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 801604e:	2108      	movs	r1, #8
 8016050:	68f8      	ldr	r0, [r7, #12]
 8016052:	f001 f846 	bl	80170e2 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 8016056:	68fb      	ldr	r3, [r7, #12]
 8016058:	331c      	adds	r3, #28
 801605a:	2200      	movs	r2, #0
 801605c:	4619      	mov	r1, r3
 801605e:	6878      	ldr	r0, [r7, #4]
 8016060:	f002 fbc2 	bl	80187e8 <etharp_query>
 8016064:	4603      	mov	r3, r0
 8016066:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 8016068:	68fb      	ldr	r3, [r7, #12]
 801606a:	799b      	ldrb	r3, [r3, #6]
 801606c:	2bff      	cmp	r3, #255	; 0xff
 801606e:	d005      	beq.n	801607c <dhcp_check+0x3c>
    dhcp->tries++;
 8016070:	68fb      	ldr	r3, [r7, #12]
 8016072:	799b      	ldrb	r3, [r3, #6]
 8016074:	3301      	adds	r3, #1
 8016076:	b2da      	uxtb	r2, r3
 8016078:	68fb      	ldr	r3, [r7, #12]
 801607a:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 801607c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8016080:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8016082:	893b      	ldrh	r3, [r7, #8]
 8016084:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8016088:	4a06      	ldr	r2, [pc, #24]	; (80160a4 <dhcp_check+0x64>)
 801608a:	fb82 1203 	smull	r1, r2, r2, r3
 801608e:	1152      	asrs	r2, r2, #5
 8016090:	17db      	asrs	r3, r3, #31
 8016092:	1ad3      	subs	r3, r2, r3
 8016094:	b29a      	uxth	r2, r3
 8016096:	68fb      	ldr	r3, [r7, #12]
 8016098:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 801609a:	bf00      	nop
 801609c:	3710      	adds	r7, #16
 801609e:	46bd      	mov	sp, r7
 80160a0:	bd80      	pop	{r7, pc}
 80160a2:	bf00      	nop
 80160a4:	10624dd3 	.word	0x10624dd3

080160a8 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 80160a8:	b580      	push	{r7, lr}
 80160aa:	b084      	sub	sp, #16
 80160ac:	af00      	add	r7, sp, #0
 80160ae:	6078      	str	r0, [r7, #4]
 80160b0:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80160b2:	687b      	ldr	r3, [r7, #4]
 80160b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80160b6:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 80160b8:	4b0c      	ldr	r3, [pc, #48]	; (80160ec <dhcp_handle_offer+0x44>)
 80160ba:	789b      	ldrb	r3, [r3, #2]
 80160bc:	2b00      	cmp	r3, #0
 80160be:	d011      	beq.n	80160e4 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 80160c0:	68fb      	ldr	r3, [r7, #12]
 80160c2:	2200      	movs	r2, #0
 80160c4:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 80160c6:	4b0a      	ldr	r3, [pc, #40]	; (80160f0 <dhcp_handle_offer+0x48>)
 80160c8:	689b      	ldr	r3, [r3, #8]
 80160ca:	4618      	mov	r0, r3
 80160cc:	f7f7 fd0f 	bl	800daee <lwip_htonl>
 80160d0:	4602      	mov	r2, r0
 80160d2:	68fb      	ldr	r3, [r7, #12]
 80160d4:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 80160d6:	683b      	ldr	r3, [r7, #0]
 80160d8:	691a      	ldr	r2, [r3, #16]
 80160da:	68fb      	ldr	r3, [r7, #12]
 80160dc:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 80160de:	6878      	ldr	r0, [r7, #4]
 80160e0:	f000 f808 	bl	80160f4 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 80160e4:	bf00      	nop
 80160e6:	3710      	adds	r7, #16
 80160e8:	46bd      	mov	sp, r7
 80160ea:	bd80      	pop	{r7, pc}
 80160ec:	20013bf8 	.word	0x20013bf8
 80160f0:	20013bd8 	.word	0x20013bd8

080160f4 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 80160f4:	b5b0      	push	{r4, r5, r7, lr}
 80160f6:	b08a      	sub	sp, #40	; 0x28
 80160f8:	af02      	add	r7, sp, #8
 80160fa:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 80160fc:	687b      	ldr	r3, [r7, #4]
 80160fe:	2b00      	cmp	r3, #0
 8016100:	d109      	bne.n	8016116 <dhcp_select+0x22>
 8016102:	4b71      	ldr	r3, [pc, #452]	; (80162c8 <dhcp_select+0x1d4>)
 8016104:	f240 1277 	movw	r2, #375	; 0x177
 8016108:	4970      	ldr	r1, [pc, #448]	; (80162cc <dhcp_select+0x1d8>)
 801610a:	4871      	ldr	r0, [pc, #452]	; (80162d0 <dhcp_select+0x1dc>)
 801610c:	f005 f9b8 	bl	801b480 <iprintf>
 8016110:	f06f 030f 	mvn.w	r3, #15
 8016114:	e0d3      	b.n	80162be <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 8016116:	687b      	ldr	r3, [r7, #4]
 8016118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801611a:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 801611c:	69bb      	ldr	r3, [r7, #24]
 801611e:	2b00      	cmp	r3, #0
 8016120:	d109      	bne.n	8016136 <dhcp_select+0x42>
 8016122:	4b69      	ldr	r3, [pc, #420]	; (80162c8 <dhcp_select+0x1d4>)
 8016124:	f240 1279 	movw	r2, #377	; 0x179
 8016128:	496a      	ldr	r1, [pc, #424]	; (80162d4 <dhcp_select+0x1e0>)
 801612a:	4869      	ldr	r0, [pc, #420]	; (80162d0 <dhcp_select+0x1dc>)
 801612c:	f005 f9a8 	bl	801b480 <iprintf>
 8016130:	f06f 0305 	mvn.w	r3, #5
 8016134:	e0c3      	b.n	80162be <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 8016136:	2101      	movs	r1, #1
 8016138:	69b8      	ldr	r0, [r7, #24]
 801613a:	f000 ffd2 	bl	80170e2 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801613e:	f107 030c 	add.w	r3, r7, #12
 8016142:	2203      	movs	r2, #3
 8016144:	69b9      	ldr	r1, [r7, #24]
 8016146:	6878      	ldr	r0, [r7, #4]
 8016148:	f001 fc64 	bl	8017a14 <dhcp_create_msg>
 801614c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801614e:	697b      	ldr	r3, [r7, #20]
 8016150:	2b00      	cmp	r3, #0
 8016152:	f000 8085 	beq.w	8016260 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8016156:	697b      	ldr	r3, [r7, #20]
 8016158:	685b      	ldr	r3, [r3, #4]
 801615a:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801615c:	89b8      	ldrh	r0, [r7, #12]
 801615e:	693b      	ldr	r3, [r7, #16]
 8016160:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016164:	2302      	movs	r3, #2
 8016166:	2239      	movs	r2, #57	; 0x39
 8016168:	f000 ffd6 	bl	8017118 <dhcp_option>
 801616c:	4603      	mov	r3, r0
 801616e:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8016170:	89b8      	ldrh	r0, [r7, #12]
 8016172:	693b      	ldr	r3, [r7, #16]
 8016174:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016178:	687b      	ldr	r3, [r7, #4]
 801617a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801617c:	461a      	mov	r2, r3
 801617e:	f001 f825 	bl	80171cc <dhcp_option_short>
 8016182:	4603      	mov	r3, r0
 8016184:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8016186:	89b8      	ldrh	r0, [r7, #12]
 8016188:	693b      	ldr	r3, [r7, #16]
 801618a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801618e:	2304      	movs	r3, #4
 8016190:	2232      	movs	r2, #50	; 0x32
 8016192:	f000 ffc1 	bl	8017118 <dhcp_option>
 8016196:	4603      	mov	r3, r0
 8016198:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801619a:	89bc      	ldrh	r4, [r7, #12]
 801619c:	693b      	ldr	r3, [r7, #16]
 801619e:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 80161a2:	69bb      	ldr	r3, [r7, #24]
 80161a4:	69db      	ldr	r3, [r3, #28]
 80161a6:	4618      	mov	r0, r3
 80161a8:	f7f7 fca1 	bl	800daee <lwip_htonl>
 80161ac:	4603      	mov	r3, r0
 80161ae:	461a      	mov	r2, r3
 80161b0:	4629      	mov	r1, r5
 80161b2:	4620      	mov	r0, r4
 80161b4:	f001 f83c 	bl	8017230 <dhcp_option_long>
 80161b8:	4603      	mov	r3, r0
 80161ba:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 80161bc:	89b8      	ldrh	r0, [r7, #12]
 80161be:	693b      	ldr	r3, [r7, #16]
 80161c0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80161c4:	2304      	movs	r3, #4
 80161c6:	2236      	movs	r2, #54	; 0x36
 80161c8:	f000 ffa6 	bl	8017118 <dhcp_option>
 80161cc:	4603      	mov	r3, r0
 80161ce:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 80161d0:	89bc      	ldrh	r4, [r7, #12]
 80161d2:	693b      	ldr	r3, [r7, #16]
 80161d4:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 80161d8:	69bb      	ldr	r3, [r7, #24]
 80161da:	699b      	ldr	r3, [r3, #24]
 80161dc:	4618      	mov	r0, r3
 80161de:	f7f7 fc86 	bl	800daee <lwip_htonl>
 80161e2:	4603      	mov	r3, r0
 80161e4:	461a      	mov	r2, r3
 80161e6:	4629      	mov	r1, r5
 80161e8:	4620      	mov	r0, r4
 80161ea:	f001 f821 	bl	8017230 <dhcp_option_long>
 80161ee:	4603      	mov	r3, r0
 80161f0:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80161f2:	89b8      	ldrh	r0, [r7, #12]
 80161f4:	693b      	ldr	r3, [r7, #16]
 80161f6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80161fa:	2303      	movs	r3, #3
 80161fc:	2237      	movs	r2, #55	; 0x37
 80161fe:	f000 ff8b 	bl	8017118 <dhcp_option>
 8016202:	4603      	mov	r3, r0
 8016204:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8016206:	2300      	movs	r3, #0
 8016208:	77fb      	strb	r3, [r7, #31]
 801620a:	e00e      	b.n	801622a <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801620c:	89b8      	ldrh	r0, [r7, #12]
 801620e:	693b      	ldr	r3, [r7, #16]
 8016210:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016214:	7ffb      	ldrb	r3, [r7, #31]
 8016216:	4a30      	ldr	r2, [pc, #192]	; (80162d8 <dhcp_select+0x1e4>)
 8016218:	5cd3      	ldrb	r3, [r2, r3]
 801621a:	461a      	mov	r2, r3
 801621c:	f000 ffb0 	bl	8017180 <dhcp_option_byte>
 8016220:	4603      	mov	r3, r0
 8016222:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8016224:	7ffb      	ldrb	r3, [r7, #31]
 8016226:	3301      	adds	r3, #1
 8016228:	77fb      	strb	r3, [r7, #31]
 801622a:	7ffb      	ldrb	r3, [r7, #31]
 801622c:	2b02      	cmp	r3, #2
 801622e:	d9ed      	bls.n	801620c <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8016230:	89b8      	ldrh	r0, [r7, #12]
 8016232:	693b      	ldr	r3, [r7, #16]
 8016234:	33f0      	adds	r3, #240	; 0xf0
 8016236:	697a      	ldr	r2, [r7, #20]
 8016238:	4619      	mov	r1, r3
 801623a:	f001 fcc1 	bl	8017bc0 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801623e:	4b27      	ldr	r3, [pc, #156]	; (80162dc <dhcp_select+0x1e8>)
 8016240:	6818      	ldr	r0, [r3, #0]
 8016242:	4b27      	ldr	r3, [pc, #156]	; (80162e0 <dhcp_select+0x1ec>)
 8016244:	9301      	str	r3, [sp, #4]
 8016246:	687b      	ldr	r3, [r7, #4]
 8016248:	9300      	str	r3, [sp, #0]
 801624a:	2343      	movs	r3, #67	; 0x43
 801624c:	4a25      	ldr	r2, [pc, #148]	; (80162e4 <dhcp_select+0x1f0>)
 801624e:	6979      	ldr	r1, [r7, #20]
 8016250:	f7ff fb98 	bl	8015984 <udp_sendto_if_src>
 8016254:	4603      	mov	r3, r0
 8016256:	77bb      	strb	r3, [r7, #30]
    pbuf_free(p_out);
 8016258:	6978      	ldr	r0, [r7, #20]
 801625a:	f7f9 f955 	bl	800f508 <pbuf_free>
 801625e:	e001      	b.n	8016264 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8016260:	23ff      	movs	r3, #255	; 0xff
 8016262:	77bb      	strb	r3, [r7, #30]
  }
  if (dhcp->tries < 255) {
 8016264:	69bb      	ldr	r3, [r7, #24]
 8016266:	799b      	ldrb	r3, [r3, #6]
 8016268:	2bff      	cmp	r3, #255	; 0xff
 801626a:	d005      	beq.n	8016278 <dhcp_select+0x184>
    dhcp->tries++;
 801626c:	69bb      	ldr	r3, [r7, #24]
 801626e:	799b      	ldrb	r3, [r3, #6]
 8016270:	3301      	adds	r3, #1
 8016272:	b2da      	uxtb	r2, r3
 8016274:	69bb      	ldr	r3, [r7, #24]
 8016276:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8016278:	69bb      	ldr	r3, [r7, #24]
 801627a:	799b      	ldrb	r3, [r3, #6]
 801627c:	2b05      	cmp	r3, #5
 801627e:	d80d      	bhi.n	801629c <dhcp_select+0x1a8>
 8016280:	69bb      	ldr	r3, [r7, #24]
 8016282:	799b      	ldrb	r3, [r3, #6]
 8016284:	461a      	mov	r2, r3
 8016286:	2301      	movs	r3, #1
 8016288:	4093      	lsls	r3, r2
 801628a:	b29b      	uxth	r3, r3
 801628c:	461a      	mov	r2, r3
 801628e:	0152      	lsls	r2, r2, #5
 8016290:	1ad2      	subs	r2, r2, r3
 8016292:	0092      	lsls	r2, r2, #2
 8016294:	4413      	add	r3, r2
 8016296:	00db      	lsls	r3, r3, #3
 8016298:	b29b      	uxth	r3, r3
 801629a:	e001      	b.n	80162a0 <dhcp_select+0x1ac>
 801629c:	f64e 2360 	movw	r3, #60000	; 0xea60
 80162a0:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80162a2:	89fb      	ldrh	r3, [r7, #14]
 80162a4:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80162a8:	4a0f      	ldr	r2, [pc, #60]	; (80162e8 <dhcp_select+0x1f4>)
 80162aa:	fb82 1203 	smull	r1, r2, r2, r3
 80162ae:	1152      	asrs	r2, r2, #5
 80162b0:	17db      	asrs	r3, r3, #31
 80162b2:	1ad3      	subs	r3, r2, r3
 80162b4:	b29a      	uxth	r2, r3
 80162b6:	69bb      	ldr	r3, [r7, #24]
 80162b8:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80162ba:	f997 301e 	ldrsb.w	r3, [r7, #30]
}
 80162be:	4618      	mov	r0, r3
 80162c0:	3720      	adds	r7, #32
 80162c2:	46bd      	mov	sp, r7
 80162c4:	bdb0      	pop	{r4, r5, r7, pc}
 80162c6:	bf00      	nop
 80162c8:	080206b8 	.word	0x080206b8
 80162cc:	08020764 	.word	0x08020764
 80162d0:	08020718 	.word	0x08020718
 80162d4:	08020780 	.word	0x08020780
 80162d8:	200000c8 	.word	0x200000c8
 80162dc:	20013c00 	.word	0x20013c00
 80162e0:	0806cf80 	.word	0x0806cf80
 80162e4:	0806cf84 	.word	0x0806cf84
 80162e8:	10624dd3 	.word	0x10624dd3

080162ec <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 80162ec:	b580      	push	{r7, lr}
 80162ee:	b082      	sub	sp, #8
 80162f0:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 80162f2:	4b27      	ldr	r3, [pc, #156]	; (8016390 <dhcp_coarse_tmr+0xa4>)
 80162f4:	681b      	ldr	r3, [r3, #0]
 80162f6:	607b      	str	r3, [r7, #4]
 80162f8:	e042      	b.n	8016380 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 80162fa:	687b      	ldr	r3, [r7, #4]
 80162fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80162fe:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 8016300:	683b      	ldr	r3, [r7, #0]
 8016302:	2b00      	cmp	r3, #0
 8016304:	d039      	beq.n	801637a <dhcp_coarse_tmr+0x8e>
 8016306:	683b      	ldr	r3, [r7, #0]
 8016308:	795b      	ldrb	r3, [r3, #5]
 801630a:	2b00      	cmp	r3, #0
 801630c:	d035      	beq.n	801637a <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 801630e:	683b      	ldr	r3, [r7, #0]
 8016310:	8a9b      	ldrh	r3, [r3, #20]
 8016312:	2b00      	cmp	r3, #0
 8016314:	d012      	beq.n	801633c <dhcp_coarse_tmr+0x50>
 8016316:	683b      	ldr	r3, [r7, #0]
 8016318:	8a5b      	ldrh	r3, [r3, #18]
 801631a:	3301      	adds	r3, #1
 801631c:	b29a      	uxth	r2, r3
 801631e:	683b      	ldr	r3, [r7, #0]
 8016320:	825a      	strh	r2, [r3, #18]
 8016322:	683b      	ldr	r3, [r7, #0]
 8016324:	8a5a      	ldrh	r2, [r3, #18]
 8016326:	683b      	ldr	r3, [r7, #0]
 8016328:	8a9b      	ldrh	r3, [r3, #20]
 801632a:	429a      	cmp	r2, r3
 801632c:	d106      	bne.n	801633c <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 801632e:	6878      	ldr	r0, [r7, #4]
 8016330:	f000 fe32 	bl	8016f98 <dhcp_release_and_stop>
        dhcp_start(netif);
 8016334:	6878      	ldr	r0, [r7, #4]
 8016336:	f000 f969 	bl	801660c <dhcp_start>
 801633a:	e01e      	b.n	801637a <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 801633c:	683b      	ldr	r3, [r7, #0]
 801633e:	8a1b      	ldrh	r3, [r3, #16]
 8016340:	2b00      	cmp	r3, #0
 8016342:	d00b      	beq.n	801635c <dhcp_coarse_tmr+0x70>
 8016344:	683b      	ldr	r3, [r7, #0]
 8016346:	8a1b      	ldrh	r3, [r3, #16]
 8016348:	1e5a      	subs	r2, r3, #1
 801634a:	b291      	uxth	r1, r2
 801634c:	683a      	ldr	r2, [r7, #0]
 801634e:	8211      	strh	r1, [r2, #16]
 8016350:	2b01      	cmp	r3, #1
 8016352:	d103      	bne.n	801635c <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 8016354:	6878      	ldr	r0, [r7, #4]
 8016356:	f000 f8c6 	bl	80164e6 <dhcp_t2_timeout>
 801635a:	e00e      	b.n	801637a <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 801635c:	683b      	ldr	r3, [r7, #0]
 801635e:	89db      	ldrh	r3, [r3, #14]
 8016360:	2b00      	cmp	r3, #0
 8016362:	d00a      	beq.n	801637a <dhcp_coarse_tmr+0x8e>
 8016364:	683b      	ldr	r3, [r7, #0]
 8016366:	89db      	ldrh	r3, [r3, #14]
 8016368:	1e5a      	subs	r2, r3, #1
 801636a:	b291      	uxth	r1, r2
 801636c:	683a      	ldr	r2, [r7, #0]
 801636e:	81d1      	strh	r1, [r2, #14]
 8016370:	2b01      	cmp	r3, #1
 8016372:	d102      	bne.n	801637a <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 8016374:	6878      	ldr	r0, [r7, #4]
 8016376:	f000 f888 	bl	801648a <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 801637a:	687b      	ldr	r3, [r7, #4]
 801637c:	681b      	ldr	r3, [r3, #0]
 801637e:	607b      	str	r3, [r7, #4]
 8016380:	687b      	ldr	r3, [r7, #4]
 8016382:	2b00      	cmp	r3, #0
 8016384:	d1b9      	bne.n	80162fa <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 8016386:	bf00      	nop
 8016388:	bf00      	nop
 801638a:	3708      	adds	r7, #8
 801638c:	46bd      	mov	sp, r7
 801638e:	bd80      	pop	{r7, pc}
 8016390:	20013b68 	.word	0x20013b68

08016394 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 8016394:	b580      	push	{r7, lr}
 8016396:	b082      	sub	sp, #8
 8016398:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 801639a:	4b16      	ldr	r3, [pc, #88]	; (80163f4 <dhcp_fine_tmr+0x60>)
 801639c:	681b      	ldr	r3, [r3, #0]
 801639e:	607b      	str	r3, [r7, #4]
 80163a0:	e020      	b.n	80163e4 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 80163a2:	687b      	ldr	r3, [r7, #4]
 80163a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80163a6:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 80163a8:	683b      	ldr	r3, [r7, #0]
 80163aa:	2b00      	cmp	r3, #0
 80163ac:	d017      	beq.n	80163de <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 80163ae:	683b      	ldr	r3, [r7, #0]
 80163b0:	891b      	ldrh	r3, [r3, #8]
 80163b2:	2b01      	cmp	r3, #1
 80163b4:	d906      	bls.n	80163c4 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 80163b6:	683b      	ldr	r3, [r7, #0]
 80163b8:	891b      	ldrh	r3, [r3, #8]
 80163ba:	3b01      	subs	r3, #1
 80163bc:	b29a      	uxth	r2, r3
 80163be:	683b      	ldr	r3, [r7, #0]
 80163c0:	811a      	strh	r2, [r3, #8]
 80163c2:	e00c      	b.n	80163de <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 80163c4:	683b      	ldr	r3, [r7, #0]
 80163c6:	891b      	ldrh	r3, [r3, #8]
 80163c8:	2b01      	cmp	r3, #1
 80163ca:	d108      	bne.n	80163de <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 80163cc:	683b      	ldr	r3, [r7, #0]
 80163ce:	891b      	ldrh	r3, [r3, #8]
 80163d0:	3b01      	subs	r3, #1
 80163d2:	b29a      	uxth	r2, r3
 80163d4:	683b      	ldr	r3, [r7, #0]
 80163d6:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 80163d8:	6878      	ldr	r0, [r7, #4]
 80163da:	f000 f80d 	bl	80163f8 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 80163de:	687b      	ldr	r3, [r7, #4]
 80163e0:	681b      	ldr	r3, [r3, #0]
 80163e2:	607b      	str	r3, [r7, #4]
 80163e4:	687b      	ldr	r3, [r7, #4]
 80163e6:	2b00      	cmp	r3, #0
 80163e8:	d1db      	bne.n	80163a2 <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 80163ea:	bf00      	nop
 80163ec:	bf00      	nop
 80163ee:	3708      	adds	r7, #8
 80163f0:	46bd      	mov	sp, r7
 80163f2:	bd80      	pop	{r7, pc}
 80163f4:	20013b68 	.word	0x20013b68

080163f8 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 80163f8:	b580      	push	{r7, lr}
 80163fa:	b084      	sub	sp, #16
 80163fc:	af00      	add	r7, sp, #0
 80163fe:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016400:	687b      	ldr	r3, [r7, #4]
 8016402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016404:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8016406:	68fb      	ldr	r3, [r7, #12]
 8016408:	795b      	ldrb	r3, [r3, #5]
 801640a:	2b0c      	cmp	r3, #12
 801640c:	d003      	beq.n	8016416 <dhcp_timeout+0x1e>
 801640e:	68fb      	ldr	r3, [r7, #12]
 8016410:	795b      	ldrb	r3, [r3, #5]
 8016412:	2b06      	cmp	r3, #6
 8016414:	d103      	bne.n	801641e <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 8016416:	6878      	ldr	r0, [r7, #4]
 8016418:	f000 fa54 	bl	80168c4 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 801641c:	e031      	b.n	8016482 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 801641e:	68fb      	ldr	r3, [r7, #12]
 8016420:	795b      	ldrb	r3, [r3, #5]
 8016422:	2b01      	cmp	r3, #1
 8016424:	d10e      	bne.n	8016444 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 8016426:	68fb      	ldr	r3, [r7, #12]
 8016428:	799b      	ldrb	r3, [r3, #6]
 801642a:	2b05      	cmp	r3, #5
 801642c:	d803      	bhi.n	8016436 <dhcp_timeout+0x3e>
      dhcp_select(netif);
 801642e:	6878      	ldr	r0, [r7, #4]
 8016430:	f7ff fe60 	bl	80160f4 <dhcp_select>
}
 8016434:	e025      	b.n	8016482 <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 8016436:	6878      	ldr	r0, [r7, #4]
 8016438:	f000 fdae 	bl	8016f98 <dhcp_release_and_stop>
      dhcp_start(netif);
 801643c:	6878      	ldr	r0, [r7, #4]
 801643e:	f000 f8e5 	bl	801660c <dhcp_start>
}
 8016442:	e01e      	b.n	8016482 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 8016444:	68fb      	ldr	r3, [r7, #12]
 8016446:	795b      	ldrb	r3, [r3, #5]
 8016448:	2b08      	cmp	r3, #8
 801644a:	d10b      	bne.n	8016464 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 801644c:	68fb      	ldr	r3, [r7, #12]
 801644e:	799b      	ldrb	r3, [r3, #6]
 8016450:	2b01      	cmp	r3, #1
 8016452:	d803      	bhi.n	801645c <dhcp_timeout+0x64>
      dhcp_check(netif);
 8016454:	6878      	ldr	r0, [r7, #4]
 8016456:	f7ff fdf3 	bl	8016040 <dhcp_check>
}
 801645a:	e012      	b.n	8016482 <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 801645c:	6878      	ldr	r0, [r7, #4]
 801645e:	f000 fad3 	bl	8016a08 <dhcp_bind>
}
 8016462:	e00e      	b.n	8016482 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 8016464:	68fb      	ldr	r3, [r7, #12]
 8016466:	795b      	ldrb	r3, [r3, #5]
 8016468:	2b03      	cmp	r3, #3
 801646a:	d10a      	bne.n	8016482 <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 801646c:	68fb      	ldr	r3, [r7, #12]
 801646e:	799b      	ldrb	r3, [r3, #6]
 8016470:	2b01      	cmp	r3, #1
 8016472:	d803      	bhi.n	801647c <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 8016474:	6878      	ldr	r0, [r7, #4]
 8016476:	f000 fcd9 	bl	8016e2c <dhcp_reboot>
}
 801647a:	e002      	b.n	8016482 <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 801647c:	6878      	ldr	r0, [r7, #4]
 801647e:	f000 fa21 	bl	80168c4 <dhcp_discover>
}
 8016482:	bf00      	nop
 8016484:	3710      	adds	r7, #16
 8016486:	46bd      	mov	sp, r7
 8016488:	bd80      	pop	{r7, pc}

0801648a <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 801648a:	b580      	push	{r7, lr}
 801648c:	b084      	sub	sp, #16
 801648e:	af00      	add	r7, sp, #0
 8016490:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016492:	687b      	ldr	r3, [r7, #4]
 8016494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016496:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8016498:	68fb      	ldr	r3, [r7, #12]
 801649a:	795b      	ldrb	r3, [r3, #5]
 801649c:	2b01      	cmp	r3, #1
 801649e:	d007      	beq.n	80164b0 <dhcp_t1_timeout+0x26>
 80164a0:	68fb      	ldr	r3, [r7, #12]
 80164a2:	795b      	ldrb	r3, [r3, #5]
 80164a4:	2b0a      	cmp	r3, #10
 80164a6:	d003      	beq.n	80164b0 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 80164a8:	68fb      	ldr	r3, [r7, #12]
 80164aa:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80164ac:	2b05      	cmp	r3, #5
 80164ae:	d116      	bne.n	80164de <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 80164b0:	6878      	ldr	r0, [r7, #4]
 80164b2:	f000 fb83 	bl	8016bbc <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 80164b6:	68fb      	ldr	r3, [r7, #12]
 80164b8:	899b      	ldrh	r3, [r3, #12]
 80164ba:	461a      	mov	r2, r3
 80164bc:	68fb      	ldr	r3, [r7, #12]
 80164be:	8a5b      	ldrh	r3, [r3, #18]
 80164c0:	1ad3      	subs	r3, r2, r3
 80164c2:	2b01      	cmp	r3, #1
 80164c4:	dd0b      	ble.n	80164de <dhcp_t1_timeout+0x54>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 80164c6:	68fb      	ldr	r3, [r7, #12]
 80164c8:	899b      	ldrh	r3, [r3, #12]
 80164ca:	461a      	mov	r2, r3
 80164cc:	68fb      	ldr	r3, [r7, #12]
 80164ce:	8a5b      	ldrh	r3, [r3, #18]
 80164d0:	1ad3      	subs	r3, r2, r3
 80164d2:	0fda      	lsrs	r2, r3, #31
 80164d4:	4413      	add	r3, r2
 80164d6:	105b      	asrs	r3, r3, #1
 80164d8:	b29a      	uxth	r2, r3
 80164da:	68fb      	ldr	r3, [r7, #12]
 80164dc:	81da      	strh	r2, [r3, #14]
    }
  }
}
 80164de:	bf00      	nop
 80164e0:	3710      	adds	r7, #16
 80164e2:	46bd      	mov	sp, r7
 80164e4:	bd80      	pop	{r7, pc}

080164e6 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 80164e6:	b580      	push	{r7, lr}
 80164e8:	b084      	sub	sp, #16
 80164ea:	af00      	add	r7, sp, #0
 80164ec:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80164ee:	687b      	ldr	r3, [r7, #4]
 80164f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80164f2:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80164f4:	68fb      	ldr	r3, [r7, #12]
 80164f6:	795b      	ldrb	r3, [r3, #5]
 80164f8:	2b01      	cmp	r3, #1
 80164fa:	d00b      	beq.n	8016514 <dhcp_t2_timeout+0x2e>
 80164fc:	68fb      	ldr	r3, [r7, #12]
 80164fe:	795b      	ldrb	r3, [r3, #5]
 8016500:	2b0a      	cmp	r3, #10
 8016502:	d007      	beq.n	8016514 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8016504:	68fb      	ldr	r3, [r7, #12]
 8016506:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8016508:	2b05      	cmp	r3, #5
 801650a:	d003      	beq.n	8016514 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 801650c:	68fb      	ldr	r3, [r7, #12]
 801650e:	795b      	ldrb	r3, [r3, #5]
 8016510:	2b04      	cmp	r3, #4
 8016512:	d116      	bne.n	8016542 <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 8016514:	6878      	ldr	r0, [r7, #4]
 8016516:	f000 fbed 	bl	8016cf4 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 801651a:	68fb      	ldr	r3, [r7, #12]
 801651c:	8a9b      	ldrh	r3, [r3, #20]
 801651e:	461a      	mov	r2, r3
 8016520:	68fb      	ldr	r3, [r7, #12]
 8016522:	8a5b      	ldrh	r3, [r3, #18]
 8016524:	1ad3      	subs	r3, r2, r3
 8016526:	2b01      	cmp	r3, #1
 8016528:	dd0b      	ble.n	8016542 <dhcp_t2_timeout+0x5c>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 801652a:	68fb      	ldr	r3, [r7, #12]
 801652c:	8a9b      	ldrh	r3, [r3, #20]
 801652e:	461a      	mov	r2, r3
 8016530:	68fb      	ldr	r3, [r7, #12]
 8016532:	8a5b      	ldrh	r3, [r3, #18]
 8016534:	1ad3      	subs	r3, r2, r3
 8016536:	0fda      	lsrs	r2, r3, #31
 8016538:	4413      	add	r3, r2
 801653a:	105b      	asrs	r3, r3, #1
 801653c:	b29a      	uxth	r2, r3
 801653e:	68fb      	ldr	r3, [r7, #12]
 8016540:	821a      	strh	r2, [r3, #16]
    }
  }
}
 8016542:	bf00      	nop
 8016544:	3710      	adds	r7, #16
 8016546:	46bd      	mov	sp, r7
 8016548:	bd80      	pop	{r7, pc}
	...

0801654c <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 801654c:	b580      	push	{r7, lr}
 801654e:	b084      	sub	sp, #16
 8016550:	af00      	add	r7, sp, #0
 8016552:	6078      	str	r0, [r7, #4]
 8016554:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016556:	687b      	ldr	r3, [r7, #4]
 8016558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801655a:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 801655c:	68fb      	ldr	r3, [r7, #12]
 801655e:	2200      	movs	r2, #0
 8016560:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8016562:	68fb      	ldr	r3, [r7, #12]
 8016564:	2200      	movs	r2, #0
 8016566:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8016568:	4b26      	ldr	r3, [pc, #152]	; (8016604 <dhcp_handle_ack+0xb8>)
 801656a:	78db      	ldrb	r3, [r3, #3]
 801656c:	2b00      	cmp	r3, #0
 801656e:	d003      	beq.n	8016578 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 8016570:	4b25      	ldr	r3, [pc, #148]	; (8016608 <dhcp_handle_ack+0xbc>)
 8016572:	68da      	ldr	r2, [r3, #12]
 8016574:	68fb      	ldr	r3, [r7, #12]
 8016576:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 8016578:	4b22      	ldr	r3, [pc, #136]	; (8016604 <dhcp_handle_ack+0xb8>)
 801657a:	791b      	ldrb	r3, [r3, #4]
 801657c:	2b00      	cmp	r3, #0
 801657e:	d004      	beq.n	801658a <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8016580:	4b21      	ldr	r3, [pc, #132]	; (8016608 <dhcp_handle_ack+0xbc>)
 8016582:	691a      	ldr	r2, [r3, #16]
 8016584:	68fb      	ldr	r3, [r7, #12]
 8016586:	62da      	str	r2, [r3, #44]	; 0x2c
 8016588:	e004      	b.n	8016594 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 801658a:	68fb      	ldr	r3, [r7, #12]
 801658c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801658e:	085a      	lsrs	r2, r3, #1
 8016590:	68fb      	ldr	r3, [r7, #12]
 8016592:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 8016594:	4b1b      	ldr	r3, [pc, #108]	; (8016604 <dhcp_handle_ack+0xb8>)
 8016596:	795b      	ldrb	r3, [r3, #5]
 8016598:	2b00      	cmp	r3, #0
 801659a:	d004      	beq.n	80165a6 <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 801659c:	4b1a      	ldr	r3, [pc, #104]	; (8016608 <dhcp_handle_ack+0xbc>)
 801659e:	695a      	ldr	r2, [r3, #20]
 80165a0:	68fb      	ldr	r3, [r7, #12]
 80165a2:	631a      	str	r2, [r3, #48]	; 0x30
 80165a4:	e007      	b.n	80165b6 <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 80165a6:	68fb      	ldr	r3, [r7, #12]
 80165a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80165aa:	4613      	mov	r3, r2
 80165ac:	00db      	lsls	r3, r3, #3
 80165ae:	1a9b      	subs	r3, r3, r2
 80165b0:	08da      	lsrs	r2, r3, #3
 80165b2:	68fb      	ldr	r3, [r7, #12]
 80165b4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 80165b6:	683b      	ldr	r3, [r7, #0]
 80165b8:	691a      	ldr	r2, [r3, #16]
 80165ba:	68fb      	ldr	r3, [r7, #12]
 80165bc:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 80165be:	4b11      	ldr	r3, [pc, #68]	; (8016604 <dhcp_handle_ack+0xb8>)
 80165c0:	799b      	ldrb	r3, [r3, #6]
 80165c2:	2b00      	cmp	r3, #0
 80165c4:	d00b      	beq.n	80165de <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 80165c6:	4b10      	ldr	r3, [pc, #64]	; (8016608 <dhcp_handle_ack+0xbc>)
 80165c8:	699b      	ldr	r3, [r3, #24]
 80165ca:	4618      	mov	r0, r3
 80165cc:	f7f7 fa8f 	bl	800daee <lwip_htonl>
 80165d0:	4602      	mov	r2, r0
 80165d2:	68fb      	ldr	r3, [r7, #12]
 80165d4:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 80165d6:	68fb      	ldr	r3, [r7, #12]
 80165d8:	2201      	movs	r2, #1
 80165da:	71da      	strb	r2, [r3, #7]
 80165dc:	e002      	b.n	80165e4 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 80165de:	68fb      	ldr	r3, [r7, #12]
 80165e0:	2200      	movs	r2, #0
 80165e2:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 80165e4:	4b07      	ldr	r3, [pc, #28]	; (8016604 <dhcp_handle_ack+0xb8>)
 80165e6:	79db      	ldrb	r3, [r3, #7]
 80165e8:	2b00      	cmp	r3, #0
 80165ea:	d007      	beq.n	80165fc <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 80165ec:	4b06      	ldr	r3, [pc, #24]	; (8016608 <dhcp_handle_ack+0xbc>)
 80165ee:	69db      	ldr	r3, [r3, #28]
 80165f0:	4618      	mov	r0, r3
 80165f2:	f7f7 fa7c 	bl	800daee <lwip_htonl>
 80165f6:	4602      	mov	r2, r0
 80165f8:	68fb      	ldr	r3, [r7, #12]
 80165fa:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 80165fc:	bf00      	nop
 80165fe:	3710      	adds	r7, #16
 8016600:	46bd      	mov	sp, r7
 8016602:	bd80      	pop	{r7, pc}
 8016604:	20013bf8 	.word	0x20013bf8
 8016608:	20013bd8 	.word	0x20013bd8

0801660c <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 801660c:	b580      	push	{r7, lr}
 801660e:	b084      	sub	sp, #16
 8016610:	af00      	add	r7, sp, #0
 8016612:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8016614:	687b      	ldr	r3, [r7, #4]
 8016616:	2b00      	cmp	r3, #0
 8016618:	d109      	bne.n	801662e <dhcp_start+0x22>
 801661a:	4b37      	ldr	r3, [pc, #220]	; (80166f8 <dhcp_start+0xec>)
 801661c:	f240 22e7 	movw	r2, #743	; 0x2e7
 8016620:	4936      	ldr	r1, [pc, #216]	; (80166fc <dhcp_start+0xf0>)
 8016622:	4837      	ldr	r0, [pc, #220]	; (8016700 <dhcp_start+0xf4>)
 8016624:	f004 ff2c 	bl	801b480 <iprintf>
 8016628:	f06f 030f 	mvn.w	r3, #15
 801662c:	e060      	b.n	80166f0 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 801662e:	687b      	ldr	r3, [r7, #4]
 8016630:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016634:	f003 0301 	and.w	r3, r3, #1
 8016638:	2b00      	cmp	r3, #0
 801663a:	d109      	bne.n	8016650 <dhcp_start+0x44>
 801663c:	4b2e      	ldr	r3, [pc, #184]	; (80166f8 <dhcp_start+0xec>)
 801663e:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 8016642:	4930      	ldr	r1, [pc, #192]	; (8016704 <dhcp_start+0xf8>)
 8016644:	482e      	ldr	r0, [pc, #184]	; (8016700 <dhcp_start+0xf4>)
 8016646:	f004 ff1b 	bl	801b480 <iprintf>
 801664a:	f06f 030f 	mvn.w	r3, #15
 801664e:	e04f      	b.n	80166f0 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 8016650:	687b      	ldr	r3, [r7, #4]
 8016652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016654:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8016656:	687b      	ldr	r3, [r7, #4]
 8016658:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801665a:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 801665e:	d202      	bcs.n	8016666 <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 8016660:	f04f 33ff 	mov.w	r3, #4294967295
 8016664:	e044      	b.n	80166f0 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 8016666:	68fb      	ldr	r3, [r7, #12]
 8016668:	2b00      	cmp	r3, #0
 801666a:	d10d      	bne.n	8016688 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 801666c:	2034      	movs	r0, #52	; 0x34
 801666e:	f7f7 fed5 	bl	800e41c <mem_malloc>
 8016672:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 8016674:	68fb      	ldr	r3, [r7, #12]
 8016676:	2b00      	cmp	r3, #0
 8016678:	d102      	bne.n	8016680 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 801667a:	f04f 33ff 	mov.w	r3, #4294967295
 801667e:	e037      	b.n	80166f0 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8016680:	687b      	ldr	r3, [r7, #4]
 8016682:	68fa      	ldr	r2, [r7, #12]
 8016684:	625a      	str	r2, [r3, #36]	; 0x24
 8016686:	e005      	b.n	8016694 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 8016688:	68fb      	ldr	r3, [r7, #12]
 801668a:	791b      	ldrb	r3, [r3, #4]
 801668c:	2b00      	cmp	r3, #0
 801668e:	d001      	beq.n	8016694 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8016690:	f7ff fc92 	bl	8015fb8 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 8016694:	2234      	movs	r2, #52	; 0x34
 8016696:	2100      	movs	r1, #0
 8016698:	68f8      	ldr	r0, [r7, #12]
 801669a:	f004 f989 	bl	801a9b0 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 801669e:	f7ff fc39 	bl	8015f14 <dhcp_inc_pcb_refcount>
 80166a2:	4603      	mov	r3, r0
 80166a4:	2b00      	cmp	r3, #0
 80166a6:	d002      	beq.n	80166ae <dhcp_start+0xa2>
    return ERR_MEM;
 80166a8:	f04f 33ff 	mov.w	r3, #4294967295
 80166ac:	e020      	b.n	80166f0 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 80166ae:	68fb      	ldr	r3, [r7, #12]
 80166b0:	2201      	movs	r2, #1
 80166b2:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 80166b4:	687b      	ldr	r3, [r7, #4]
 80166b6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80166ba:	f003 0304 	and.w	r3, r3, #4
 80166be:	2b00      	cmp	r3, #0
 80166c0:	d105      	bne.n	80166ce <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 80166c2:	2102      	movs	r1, #2
 80166c4:	68f8      	ldr	r0, [r7, #12]
 80166c6:	f000 fd0c 	bl	80170e2 <dhcp_set_state>
    return ERR_OK;
 80166ca:	2300      	movs	r3, #0
 80166cc:	e010      	b.n	80166f0 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 80166ce:	6878      	ldr	r0, [r7, #4]
 80166d0:	f000 f8f8 	bl	80168c4 <dhcp_discover>
 80166d4:	4603      	mov	r3, r0
 80166d6:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 80166d8:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80166dc:	2b00      	cmp	r3, #0
 80166de:	d005      	beq.n	80166ec <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 80166e0:	6878      	ldr	r0, [r7, #4]
 80166e2:	f000 fc59 	bl	8016f98 <dhcp_release_and_stop>
    return ERR_MEM;
 80166e6:	f04f 33ff 	mov.w	r3, #4294967295
 80166ea:	e001      	b.n	80166f0 <dhcp_start+0xe4>
  }
  return result;
 80166ec:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80166f0:	4618      	mov	r0, r3
 80166f2:	3710      	adds	r7, #16
 80166f4:	46bd      	mov	sp, r7
 80166f6:	bd80      	pop	{r7, pc}
 80166f8:	080206b8 	.word	0x080206b8
 80166fc:	0802079c 	.word	0x0802079c
 8016700:	08020718 	.word	0x08020718
 8016704:	080207e0 	.word	0x080207e0

08016708 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 8016708:	b580      	push	{r7, lr}
 801670a:	b084      	sub	sp, #16
 801670c:	af00      	add	r7, sp, #0
 801670e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016710:	687b      	ldr	r3, [r7, #4]
 8016712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016714:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 8016716:	68fb      	ldr	r3, [r7, #12]
 8016718:	2b00      	cmp	r3, #0
 801671a:	d025      	beq.n	8016768 <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 801671c:	68fb      	ldr	r3, [r7, #12]
 801671e:	795b      	ldrb	r3, [r3, #5]
 8016720:	2b0a      	cmp	r3, #10
 8016722:	d008      	beq.n	8016736 <dhcp_network_changed+0x2e>
 8016724:	2b0a      	cmp	r3, #10
 8016726:	dc0d      	bgt.n	8016744 <dhcp_network_changed+0x3c>
 8016728:	2b00      	cmp	r3, #0
 801672a:	d01f      	beq.n	801676c <dhcp_network_changed+0x64>
 801672c:	2b00      	cmp	r3, #0
 801672e:	db09      	blt.n	8016744 <dhcp_network_changed+0x3c>
 8016730:	3b03      	subs	r3, #3
 8016732:	2b02      	cmp	r3, #2
 8016734:	d806      	bhi.n	8016744 <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 8016736:	68fb      	ldr	r3, [r7, #12]
 8016738:	2200      	movs	r2, #0
 801673a:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 801673c:	6878      	ldr	r0, [r7, #4]
 801673e:	f000 fb75 	bl	8016e2c <dhcp_reboot>
      break;
 8016742:	e014      	b.n	801676e <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 8016744:	68fb      	ldr	r3, [r7, #12]
 8016746:	795b      	ldrb	r3, [r3, #5]
 8016748:	2b0c      	cmp	r3, #12
 801674a:	d906      	bls.n	801675a <dhcp_network_changed+0x52>
 801674c:	4b09      	ldr	r3, [pc, #36]	; (8016774 <dhcp_network_changed+0x6c>)
 801674e:	f240 326d 	movw	r2, #877	; 0x36d
 8016752:	4909      	ldr	r1, [pc, #36]	; (8016778 <dhcp_network_changed+0x70>)
 8016754:	4809      	ldr	r0, [pc, #36]	; (801677c <dhcp_network_changed+0x74>)
 8016756:	f004 fe93 	bl	801b480 <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 801675a:	68fb      	ldr	r3, [r7, #12]
 801675c:	2200      	movs	r2, #0
 801675e:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 8016760:	6878      	ldr	r0, [r7, #4]
 8016762:	f000 f8af 	bl	80168c4 <dhcp_discover>
      break;
 8016766:	e002      	b.n	801676e <dhcp_network_changed+0x66>
    return;
 8016768:	bf00      	nop
 801676a:	e000      	b.n	801676e <dhcp_network_changed+0x66>
      break;
 801676c:	bf00      	nop
  }
}
 801676e:	3710      	adds	r7, #16
 8016770:	46bd      	mov	sp, r7
 8016772:	bd80      	pop	{r7, pc}
 8016774:	080206b8 	.word	0x080206b8
 8016778:	08020804 	.word	0x08020804
 801677c:	08020718 	.word	0x08020718

08016780 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 8016780:	b580      	push	{r7, lr}
 8016782:	b084      	sub	sp, #16
 8016784:	af00      	add	r7, sp, #0
 8016786:	6078      	str	r0, [r7, #4]
 8016788:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801678a:	687b      	ldr	r3, [r7, #4]
 801678c:	2b00      	cmp	r3, #0
 801678e:	d107      	bne.n	80167a0 <dhcp_arp_reply+0x20>
 8016790:	4b0e      	ldr	r3, [pc, #56]	; (80167cc <dhcp_arp_reply+0x4c>)
 8016792:	f240 328b 	movw	r2, #907	; 0x38b
 8016796:	490e      	ldr	r1, [pc, #56]	; (80167d0 <dhcp_arp_reply+0x50>)
 8016798:	480e      	ldr	r0, [pc, #56]	; (80167d4 <dhcp_arp_reply+0x54>)
 801679a:	f004 fe71 	bl	801b480 <iprintf>
 801679e:	e012      	b.n	80167c6 <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 80167a0:	687b      	ldr	r3, [r7, #4]
 80167a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80167a4:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 80167a6:	68fb      	ldr	r3, [r7, #12]
 80167a8:	2b00      	cmp	r3, #0
 80167aa:	d00c      	beq.n	80167c6 <dhcp_arp_reply+0x46>
 80167ac:	68fb      	ldr	r3, [r7, #12]
 80167ae:	795b      	ldrb	r3, [r3, #5]
 80167b0:	2b08      	cmp	r3, #8
 80167b2:	d108      	bne.n	80167c6 <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 80167b4:	683b      	ldr	r3, [r7, #0]
 80167b6:	681a      	ldr	r2, [r3, #0]
 80167b8:	68fb      	ldr	r3, [r7, #12]
 80167ba:	69db      	ldr	r3, [r3, #28]
 80167bc:	429a      	cmp	r2, r3
 80167be:	d102      	bne.n	80167c6 <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 80167c0:	6878      	ldr	r0, [r7, #4]
 80167c2:	f000 f809 	bl	80167d8 <dhcp_decline>
    }
  }
}
 80167c6:	3710      	adds	r7, #16
 80167c8:	46bd      	mov	sp, r7
 80167ca:	bd80      	pop	{r7, pc}
 80167cc:	080206b8 	.word	0x080206b8
 80167d0:	0802079c 	.word	0x0802079c
 80167d4:	08020718 	.word	0x08020718

080167d8 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 80167d8:	b5b0      	push	{r4, r5, r7, lr}
 80167da:	b08a      	sub	sp, #40	; 0x28
 80167dc:	af02      	add	r7, sp, #8
 80167de:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80167e0:	687b      	ldr	r3, [r7, #4]
 80167e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80167e4:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 80167e6:	210c      	movs	r1, #12
 80167e8:	69b8      	ldr	r0, [r7, #24]
 80167ea:	f000 fc7a 	bl	80170e2 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 80167ee:	f107 030c 	add.w	r3, r7, #12
 80167f2:	2204      	movs	r2, #4
 80167f4:	69b9      	ldr	r1, [r7, #24]
 80167f6:	6878      	ldr	r0, [r7, #4]
 80167f8:	f001 f90c 	bl	8017a14 <dhcp_create_msg>
 80167fc:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80167fe:	697b      	ldr	r3, [r7, #20]
 8016800:	2b00      	cmp	r3, #0
 8016802:	d035      	beq.n	8016870 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8016804:	697b      	ldr	r3, [r7, #20]
 8016806:	685b      	ldr	r3, [r3, #4]
 8016808:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801680a:	89b8      	ldrh	r0, [r7, #12]
 801680c:	693b      	ldr	r3, [r7, #16]
 801680e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016812:	2304      	movs	r3, #4
 8016814:	2232      	movs	r2, #50	; 0x32
 8016816:	f000 fc7f 	bl	8017118 <dhcp_option>
 801681a:	4603      	mov	r3, r0
 801681c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801681e:	89bc      	ldrh	r4, [r7, #12]
 8016820:	693b      	ldr	r3, [r7, #16]
 8016822:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8016826:	69bb      	ldr	r3, [r7, #24]
 8016828:	69db      	ldr	r3, [r3, #28]
 801682a:	4618      	mov	r0, r3
 801682c:	f7f7 f95f 	bl	800daee <lwip_htonl>
 8016830:	4603      	mov	r3, r0
 8016832:	461a      	mov	r2, r3
 8016834:	4629      	mov	r1, r5
 8016836:	4620      	mov	r0, r4
 8016838:	f000 fcfa 	bl	8017230 <dhcp_option_long>
 801683c:	4603      	mov	r3, r0
 801683e:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8016840:	89b8      	ldrh	r0, [r7, #12]
 8016842:	693b      	ldr	r3, [r7, #16]
 8016844:	33f0      	adds	r3, #240	; 0xf0
 8016846:	697a      	ldr	r2, [r7, #20]
 8016848:	4619      	mov	r1, r3
 801684a:	f001 f9b9 	bl	8017bc0 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801684e:	4b19      	ldr	r3, [pc, #100]	; (80168b4 <dhcp_decline+0xdc>)
 8016850:	6818      	ldr	r0, [r3, #0]
 8016852:	4b19      	ldr	r3, [pc, #100]	; (80168b8 <dhcp_decline+0xe0>)
 8016854:	9301      	str	r3, [sp, #4]
 8016856:	687b      	ldr	r3, [r7, #4]
 8016858:	9300      	str	r3, [sp, #0]
 801685a:	2343      	movs	r3, #67	; 0x43
 801685c:	4a17      	ldr	r2, [pc, #92]	; (80168bc <dhcp_decline+0xe4>)
 801685e:	6979      	ldr	r1, [r7, #20]
 8016860:	f7ff f890 	bl	8015984 <udp_sendto_if_src>
 8016864:	4603      	mov	r3, r0
 8016866:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8016868:	6978      	ldr	r0, [r7, #20]
 801686a:	f7f8 fe4d 	bl	800f508 <pbuf_free>
 801686e:	e001      	b.n	8016874 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8016870:	23ff      	movs	r3, #255	; 0xff
 8016872:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8016874:	69bb      	ldr	r3, [r7, #24]
 8016876:	799b      	ldrb	r3, [r3, #6]
 8016878:	2bff      	cmp	r3, #255	; 0xff
 801687a:	d005      	beq.n	8016888 <dhcp_decline+0xb0>
    dhcp->tries++;
 801687c:	69bb      	ldr	r3, [r7, #24]
 801687e:	799b      	ldrb	r3, [r3, #6]
 8016880:	3301      	adds	r3, #1
 8016882:	b2da      	uxtb	r2, r3
 8016884:	69bb      	ldr	r3, [r7, #24]
 8016886:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 8016888:	f242 7310 	movw	r3, #10000	; 0x2710
 801688c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801688e:	89fb      	ldrh	r3, [r7, #14]
 8016890:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8016894:	4a0a      	ldr	r2, [pc, #40]	; (80168c0 <dhcp_decline+0xe8>)
 8016896:	fb82 1203 	smull	r1, r2, r2, r3
 801689a:	1152      	asrs	r2, r2, #5
 801689c:	17db      	asrs	r3, r3, #31
 801689e:	1ad3      	subs	r3, r2, r3
 80168a0:	b29a      	uxth	r2, r3
 80168a2:	69bb      	ldr	r3, [r7, #24]
 80168a4:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80168a6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80168aa:	4618      	mov	r0, r3
 80168ac:	3720      	adds	r7, #32
 80168ae:	46bd      	mov	sp, r7
 80168b0:	bdb0      	pop	{r4, r5, r7, pc}
 80168b2:	bf00      	nop
 80168b4:	20013c00 	.word	0x20013c00
 80168b8:	0806cf80 	.word	0x0806cf80
 80168bc:	0806cf84 	.word	0x0806cf84
 80168c0:	10624dd3 	.word	0x10624dd3

080168c4 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 80168c4:	b580      	push	{r7, lr}
 80168c6:	b08a      	sub	sp, #40	; 0x28
 80168c8:	af02      	add	r7, sp, #8
 80168ca:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80168cc:	687b      	ldr	r3, [r7, #4]
 80168ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80168d0:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 80168d2:	2300      	movs	r3, #0
 80168d4:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 80168d6:	69bb      	ldr	r3, [r7, #24]
 80168d8:	2200      	movs	r2, #0
 80168da:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 80168dc:	2106      	movs	r1, #6
 80168de:	69b8      	ldr	r0, [r7, #24]
 80168e0:	f000 fbff 	bl	80170e2 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 80168e4:	f107 0308 	add.w	r3, r7, #8
 80168e8:	2201      	movs	r2, #1
 80168ea:	69b9      	ldr	r1, [r7, #24]
 80168ec:	6878      	ldr	r0, [r7, #4]
 80168ee:	f001 f891 	bl	8017a14 <dhcp_create_msg>
 80168f2:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 80168f4:	693b      	ldr	r3, [r7, #16]
 80168f6:	2b00      	cmp	r3, #0
 80168f8:	d04b      	beq.n	8016992 <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80168fa:	693b      	ldr	r3, [r7, #16]
 80168fc:	685b      	ldr	r3, [r3, #4]
 80168fe:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8016900:	8938      	ldrh	r0, [r7, #8]
 8016902:	68fb      	ldr	r3, [r7, #12]
 8016904:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016908:	2302      	movs	r3, #2
 801690a:	2239      	movs	r2, #57	; 0x39
 801690c:	f000 fc04 	bl	8017118 <dhcp_option>
 8016910:	4603      	mov	r3, r0
 8016912:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8016914:	8938      	ldrh	r0, [r7, #8]
 8016916:	68fb      	ldr	r3, [r7, #12]
 8016918:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801691c:	687b      	ldr	r3, [r7, #4]
 801691e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016920:	461a      	mov	r2, r3
 8016922:	f000 fc53 	bl	80171cc <dhcp_option_short>
 8016926:	4603      	mov	r3, r0
 8016928:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801692a:	8938      	ldrh	r0, [r7, #8]
 801692c:	68fb      	ldr	r3, [r7, #12]
 801692e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016932:	2303      	movs	r3, #3
 8016934:	2237      	movs	r2, #55	; 0x37
 8016936:	f000 fbef 	bl	8017118 <dhcp_option>
 801693a:	4603      	mov	r3, r0
 801693c:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801693e:	2300      	movs	r3, #0
 8016940:	77fb      	strb	r3, [r7, #31]
 8016942:	e00e      	b.n	8016962 <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8016944:	8938      	ldrh	r0, [r7, #8]
 8016946:	68fb      	ldr	r3, [r7, #12]
 8016948:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801694c:	7ffb      	ldrb	r3, [r7, #31]
 801694e:	4a29      	ldr	r2, [pc, #164]	; (80169f4 <dhcp_discover+0x130>)
 8016950:	5cd3      	ldrb	r3, [r2, r3]
 8016952:	461a      	mov	r2, r3
 8016954:	f000 fc14 	bl	8017180 <dhcp_option_byte>
 8016958:	4603      	mov	r3, r0
 801695a:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801695c:	7ffb      	ldrb	r3, [r7, #31]
 801695e:	3301      	adds	r3, #1
 8016960:	77fb      	strb	r3, [r7, #31]
 8016962:	7ffb      	ldrb	r3, [r7, #31]
 8016964:	2b02      	cmp	r3, #2
 8016966:	d9ed      	bls.n	8016944 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8016968:	8938      	ldrh	r0, [r7, #8]
 801696a:	68fb      	ldr	r3, [r7, #12]
 801696c:	33f0      	adds	r3, #240	; 0xf0
 801696e:	693a      	ldr	r2, [r7, #16]
 8016970:	4619      	mov	r1, r3
 8016972:	f001 f925 	bl	8017bc0 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8016976:	4b20      	ldr	r3, [pc, #128]	; (80169f8 <dhcp_discover+0x134>)
 8016978:	6818      	ldr	r0, [r3, #0]
 801697a:	4b20      	ldr	r3, [pc, #128]	; (80169fc <dhcp_discover+0x138>)
 801697c:	9301      	str	r3, [sp, #4]
 801697e:	687b      	ldr	r3, [r7, #4]
 8016980:	9300      	str	r3, [sp, #0]
 8016982:	2343      	movs	r3, #67	; 0x43
 8016984:	4a1e      	ldr	r2, [pc, #120]	; (8016a00 <dhcp_discover+0x13c>)
 8016986:	6939      	ldr	r1, [r7, #16]
 8016988:	f7fe fffc 	bl	8015984 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 801698c:	6938      	ldr	r0, [r7, #16]
 801698e:	f7f8 fdbb 	bl	800f508 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8016992:	69bb      	ldr	r3, [r7, #24]
 8016994:	799b      	ldrb	r3, [r3, #6]
 8016996:	2bff      	cmp	r3, #255	; 0xff
 8016998:	d005      	beq.n	80169a6 <dhcp_discover+0xe2>
    dhcp->tries++;
 801699a:	69bb      	ldr	r3, [r7, #24]
 801699c:	799b      	ldrb	r3, [r3, #6]
 801699e:	3301      	adds	r3, #1
 80169a0:	b2da      	uxtb	r2, r3
 80169a2:	69bb      	ldr	r3, [r7, #24]
 80169a4:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 80169a6:	69bb      	ldr	r3, [r7, #24]
 80169a8:	799b      	ldrb	r3, [r3, #6]
 80169aa:	2b05      	cmp	r3, #5
 80169ac:	d80d      	bhi.n	80169ca <dhcp_discover+0x106>
 80169ae:	69bb      	ldr	r3, [r7, #24]
 80169b0:	799b      	ldrb	r3, [r3, #6]
 80169b2:	461a      	mov	r2, r3
 80169b4:	2301      	movs	r3, #1
 80169b6:	4093      	lsls	r3, r2
 80169b8:	b29b      	uxth	r3, r3
 80169ba:	461a      	mov	r2, r3
 80169bc:	0152      	lsls	r2, r2, #5
 80169be:	1ad2      	subs	r2, r2, r3
 80169c0:	0092      	lsls	r2, r2, #2
 80169c2:	4413      	add	r3, r2
 80169c4:	00db      	lsls	r3, r3, #3
 80169c6:	b29b      	uxth	r3, r3
 80169c8:	e001      	b.n	80169ce <dhcp_discover+0x10a>
 80169ca:	f64e 2360 	movw	r3, #60000	; 0xea60
 80169ce:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80169d0:	897b      	ldrh	r3, [r7, #10]
 80169d2:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80169d6:	4a0b      	ldr	r2, [pc, #44]	; (8016a04 <dhcp_discover+0x140>)
 80169d8:	fb82 1203 	smull	r1, r2, r2, r3
 80169dc:	1152      	asrs	r2, r2, #5
 80169de:	17db      	asrs	r3, r3, #31
 80169e0:	1ad3      	subs	r3, r2, r3
 80169e2:	b29a      	uxth	r2, r3
 80169e4:	69bb      	ldr	r3, [r7, #24]
 80169e6:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80169e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80169ec:	4618      	mov	r0, r3
 80169ee:	3720      	adds	r7, #32
 80169f0:	46bd      	mov	sp, r7
 80169f2:	bd80      	pop	{r7, pc}
 80169f4:	200000c8 	.word	0x200000c8
 80169f8:	20013c00 	.word	0x20013c00
 80169fc:	0806cf80 	.word	0x0806cf80
 8016a00:	0806cf84 	.word	0x0806cf84
 8016a04:	10624dd3 	.word	0x10624dd3

08016a08 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 8016a08:	b580      	push	{r7, lr}
 8016a0a:	b088      	sub	sp, #32
 8016a0c:	af00      	add	r7, sp, #0
 8016a0e:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 8016a10:	687b      	ldr	r3, [r7, #4]
 8016a12:	2b00      	cmp	r3, #0
 8016a14:	d107      	bne.n	8016a26 <dhcp_bind+0x1e>
 8016a16:	4b64      	ldr	r3, [pc, #400]	; (8016ba8 <dhcp_bind+0x1a0>)
 8016a18:	f240 4215 	movw	r2, #1045	; 0x415
 8016a1c:	4963      	ldr	r1, [pc, #396]	; (8016bac <dhcp_bind+0x1a4>)
 8016a1e:	4864      	ldr	r0, [pc, #400]	; (8016bb0 <dhcp_bind+0x1a8>)
 8016a20:	f004 fd2e 	bl	801b480 <iprintf>
 8016a24:	e0bc      	b.n	8016ba0 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 8016a26:	687b      	ldr	r3, [r7, #4]
 8016a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016a2a:	61fb      	str	r3, [r7, #28]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8016a2c:	69fb      	ldr	r3, [r7, #28]
 8016a2e:	2b00      	cmp	r3, #0
 8016a30:	d107      	bne.n	8016a42 <dhcp_bind+0x3a>
 8016a32:	4b5d      	ldr	r3, [pc, #372]	; (8016ba8 <dhcp_bind+0x1a0>)
 8016a34:	f240 4217 	movw	r2, #1047	; 0x417
 8016a38:	495e      	ldr	r1, [pc, #376]	; (8016bb4 <dhcp_bind+0x1ac>)
 8016a3a:	485d      	ldr	r0, [pc, #372]	; (8016bb0 <dhcp_bind+0x1a8>)
 8016a3c:	f004 fd20 	bl	801b480 <iprintf>
 8016a40:	e0ae      	b.n	8016ba0 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 8016a42:	69fb      	ldr	r3, [r7, #28]
 8016a44:	2200      	movs	r2, #0
 8016a46:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 8016a48:	69fb      	ldr	r3, [r7, #28]
 8016a4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016a4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016a50:	d019      	beq.n	8016a86 <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8016a52:	69fb      	ldr	r3, [r7, #28]
 8016a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016a56:	331e      	adds	r3, #30
 8016a58:	4a57      	ldr	r2, [pc, #348]	; (8016bb8 <dhcp_bind+0x1b0>)
 8016a5a:	fba2 2303 	umull	r2, r3, r2, r3
 8016a5e:	095b      	lsrs	r3, r3, #5
 8016a60:	61bb      	str	r3, [r7, #24]
    if (timeout > 0xffff) {
 8016a62:	69bb      	ldr	r3, [r7, #24]
 8016a64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016a68:	d302      	bcc.n	8016a70 <dhcp_bind+0x68>
      timeout = 0xffff;
 8016a6a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016a6e:	61bb      	str	r3, [r7, #24]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 8016a70:	69bb      	ldr	r3, [r7, #24]
 8016a72:	b29a      	uxth	r2, r3
 8016a74:	69fb      	ldr	r3, [r7, #28]
 8016a76:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 8016a78:	69fb      	ldr	r3, [r7, #28]
 8016a7a:	8a9b      	ldrh	r3, [r3, #20]
 8016a7c:	2b00      	cmp	r3, #0
 8016a7e:	d102      	bne.n	8016a86 <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 8016a80:	69fb      	ldr	r3, [r7, #28]
 8016a82:	2201      	movs	r2, #1
 8016a84:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 8016a86:	69fb      	ldr	r3, [r7, #28]
 8016a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016a8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016a8e:	d01d      	beq.n	8016acc <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8016a90:	69fb      	ldr	r3, [r7, #28]
 8016a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016a94:	331e      	adds	r3, #30
 8016a96:	4a48      	ldr	r2, [pc, #288]	; (8016bb8 <dhcp_bind+0x1b0>)
 8016a98:	fba2 2303 	umull	r2, r3, r2, r3
 8016a9c:	095b      	lsrs	r3, r3, #5
 8016a9e:	61bb      	str	r3, [r7, #24]
    if (timeout > 0xffff) {
 8016aa0:	69bb      	ldr	r3, [r7, #24]
 8016aa2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016aa6:	d302      	bcc.n	8016aae <dhcp_bind+0xa6>
      timeout = 0xffff;
 8016aa8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016aac:	61bb      	str	r3, [r7, #24]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 8016aae:	69bb      	ldr	r3, [r7, #24]
 8016ab0:	b29a      	uxth	r2, r3
 8016ab2:	69fb      	ldr	r3, [r7, #28]
 8016ab4:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 8016ab6:	69fb      	ldr	r3, [r7, #28]
 8016ab8:	895b      	ldrh	r3, [r3, #10]
 8016aba:	2b00      	cmp	r3, #0
 8016abc:	d102      	bne.n	8016ac4 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 8016abe:	69fb      	ldr	r3, [r7, #28]
 8016ac0:	2201      	movs	r2, #1
 8016ac2:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8016ac4:	69fb      	ldr	r3, [r7, #28]
 8016ac6:	895a      	ldrh	r2, [r3, #10]
 8016ac8:	69fb      	ldr	r3, [r7, #28]
 8016aca:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8016acc:	69fb      	ldr	r3, [r7, #28]
 8016ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016ad4:	d01d      	beq.n	8016b12 <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8016ad6:	69fb      	ldr	r3, [r7, #28]
 8016ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016ada:	331e      	adds	r3, #30
 8016adc:	4a36      	ldr	r2, [pc, #216]	; (8016bb8 <dhcp_bind+0x1b0>)
 8016ade:	fba2 2303 	umull	r2, r3, r2, r3
 8016ae2:	095b      	lsrs	r3, r3, #5
 8016ae4:	61bb      	str	r3, [r7, #24]
    if (timeout > 0xffff) {
 8016ae6:	69bb      	ldr	r3, [r7, #24]
 8016ae8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016aec:	d302      	bcc.n	8016af4 <dhcp_bind+0xec>
      timeout = 0xffff;
 8016aee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016af2:	61bb      	str	r3, [r7, #24]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 8016af4:	69bb      	ldr	r3, [r7, #24]
 8016af6:	b29a      	uxth	r2, r3
 8016af8:	69fb      	ldr	r3, [r7, #28]
 8016afa:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 8016afc:	69fb      	ldr	r3, [r7, #28]
 8016afe:	899b      	ldrh	r3, [r3, #12]
 8016b00:	2b00      	cmp	r3, #0
 8016b02:	d102      	bne.n	8016b0a <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 8016b04:	69fb      	ldr	r3, [r7, #28]
 8016b06:	2201      	movs	r2, #1
 8016b08:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 8016b0a:	69fb      	ldr	r3, [r7, #28]
 8016b0c:	899a      	ldrh	r2, [r3, #12]
 8016b0e:	69fb      	ldr	r3, [r7, #28]
 8016b10:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 8016b12:	69fb      	ldr	r3, [r7, #28]
 8016b14:	895a      	ldrh	r2, [r3, #10]
 8016b16:	69fb      	ldr	r3, [r7, #28]
 8016b18:	899b      	ldrh	r3, [r3, #12]
 8016b1a:	429a      	cmp	r2, r3
 8016b1c:	d306      	bcc.n	8016b2c <dhcp_bind+0x124>
 8016b1e:	69fb      	ldr	r3, [r7, #28]
 8016b20:	899b      	ldrh	r3, [r3, #12]
 8016b22:	2b00      	cmp	r3, #0
 8016b24:	d002      	beq.n	8016b2c <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 8016b26:	69fb      	ldr	r3, [r7, #28]
 8016b28:	2200      	movs	r2, #0
 8016b2a:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 8016b2c:	69fb      	ldr	r3, [r7, #28]
 8016b2e:	79db      	ldrb	r3, [r3, #7]
 8016b30:	2b00      	cmp	r3, #0
 8016b32:	d003      	beq.n	8016b3c <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 8016b34:	69fb      	ldr	r3, [r7, #28]
 8016b36:	6a1b      	ldr	r3, [r3, #32]
 8016b38:	613b      	str	r3, [r7, #16]
 8016b3a:	e014      	b.n	8016b66 <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 8016b3c:	69fb      	ldr	r3, [r7, #28]
 8016b3e:	331c      	adds	r3, #28
 8016b40:	781b      	ldrb	r3, [r3, #0]
 8016b42:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 8016b44:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8016b48:	2b00      	cmp	r3, #0
 8016b4a:	db02      	blt.n	8016b52 <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 8016b4c:	23ff      	movs	r3, #255	; 0xff
 8016b4e:	613b      	str	r3, [r7, #16]
 8016b50:	e009      	b.n	8016b66 <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 8016b52:	7dfb      	ldrb	r3, [r7, #23]
 8016b54:	2bbf      	cmp	r3, #191	; 0xbf
 8016b56:	d903      	bls.n	8016b60 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 8016b58:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8016b5c:	613b      	str	r3, [r7, #16]
 8016b5e:	e002      	b.n	8016b66 <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 8016b60:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016b64:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 8016b66:	69fb      	ldr	r3, [r7, #28]
 8016b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016b6a:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 8016b6c:	68fb      	ldr	r3, [r7, #12]
 8016b6e:	2b00      	cmp	r3, #0
 8016b70:	d108      	bne.n	8016b84 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 8016b72:	69fb      	ldr	r3, [r7, #28]
 8016b74:	69da      	ldr	r2, [r3, #28]
 8016b76:	693b      	ldr	r3, [r7, #16]
 8016b78:	4013      	ands	r3, r2
 8016b7a:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 8016b7c:	68fb      	ldr	r3, [r7, #12]
 8016b7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8016b82:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 8016b84:	210a      	movs	r1, #10
 8016b86:	69f8      	ldr	r0, [r7, #28]
 8016b88:	f000 faab 	bl	80170e2 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 8016b8c:	69fb      	ldr	r3, [r7, #28]
 8016b8e:	f103 011c 	add.w	r1, r3, #28
 8016b92:	f107 030c 	add.w	r3, r7, #12
 8016b96:	f107 0210 	add.w	r2, r7, #16
 8016b9a:	6878      	ldr	r0, [r7, #4]
 8016b9c:	f7f7 ffb4 	bl	800eb08 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 8016ba0:	3720      	adds	r7, #32
 8016ba2:	46bd      	mov	sp, r7
 8016ba4:	bd80      	pop	{r7, pc}
 8016ba6:	bf00      	nop
 8016ba8:	080206b8 	.word	0x080206b8
 8016bac:	08020818 	.word	0x08020818
 8016bb0:	08020718 	.word	0x08020718
 8016bb4:	08020834 	.word	0x08020834
 8016bb8:	88888889 	.word	0x88888889

08016bbc <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 8016bbc:	b580      	push	{r7, lr}
 8016bbe:	b08a      	sub	sp, #40	; 0x28
 8016bc0:	af02      	add	r7, sp, #8
 8016bc2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016bc4:	687b      	ldr	r3, [r7, #4]
 8016bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016bc8:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 8016bca:	2105      	movs	r1, #5
 8016bcc:	69b8      	ldr	r0, [r7, #24]
 8016bce:	f000 fa88 	bl	80170e2 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8016bd2:	f107 030c 	add.w	r3, r7, #12
 8016bd6:	2203      	movs	r2, #3
 8016bd8:	69b9      	ldr	r1, [r7, #24]
 8016bda:	6878      	ldr	r0, [r7, #4]
 8016bdc:	f000 ff1a 	bl	8017a14 <dhcp_create_msg>
 8016be0:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8016be2:	697b      	ldr	r3, [r7, #20]
 8016be4:	2b00      	cmp	r3, #0
 8016be6:	d04e      	beq.n	8016c86 <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8016be8:	697b      	ldr	r3, [r7, #20]
 8016bea:	685b      	ldr	r3, [r3, #4]
 8016bec:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8016bee:	89b8      	ldrh	r0, [r7, #12]
 8016bf0:	693b      	ldr	r3, [r7, #16]
 8016bf2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016bf6:	2302      	movs	r3, #2
 8016bf8:	2239      	movs	r2, #57	; 0x39
 8016bfa:	f000 fa8d 	bl	8017118 <dhcp_option>
 8016bfe:	4603      	mov	r3, r0
 8016c00:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8016c02:	89b8      	ldrh	r0, [r7, #12]
 8016c04:	693b      	ldr	r3, [r7, #16]
 8016c06:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016c0a:	687b      	ldr	r3, [r7, #4]
 8016c0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016c0e:	461a      	mov	r2, r3
 8016c10:	f000 fadc 	bl	80171cc <dhcp_option_short>
 8016c14:	4603      	mov	r3, r0
 8016c16:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8016c18:	89b8      	ldrh	r0, [r7, #12]
 8016c1a:	693b      	ldr	r3, [r7, #16]
 8016c1c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016c20:	2303      	movs	r3, #3
 8016c22:	2237      	movs	r2, #55	; 0x37
 8016c24:	f000 fa78 	bl	8017118 <dhcp_option>
 8016c28:	4603      	mov	r3, r0
 8016c2a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8016c2c:	2300      	movs	r3, #0
 8016c2e:	77bb      	strb	r3, [r7, #30]
 8016c30:	e00e      	b.n	8016c50 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8016c32:	89b8      	ldrh	r0, [r7, #12]
 8016c34:	693b      	ldr	r3, [r7, #16]
 8016c36:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016c3a:	7fbb      	ldrb	r3, [r7, #30]
 8016c3c:	4a2a      	ldr	r2, [pc, #168]	; (8016ce8 <dhcp_renew+0x12c>)
 8016c3e:	5cd3      	ldrb	r3, [r2, r3]
 8016c40:	461a      	mov	r2, r3
 8016c42:	f000 fa9d 	bl	8017180 <dhcp_option_byte>
 8016c46:	4603      	mov	r3, r0
 8016c48:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8016c4a:	7fbb      	ldrb	r3, [r7, #30]
 8016c4c:	3301      	adds	r3, #1
 8016c4e:	77bb      	strb	r3, [r7, #30]
 8016c50:	7fbb      	ldrb	r3, [r7, #30]
 8016c52:	2b02      	cmp	r3, #2
 8016c54:	d9ed      	bls.n	8016c32 <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8016c56:	89b8      	ldrh	r0, [r7, #12]
 8016c58:	693b      	ldr	r3, [r7, #16]
 8016c5a:	33f0      	adds	r3, #240	; 0xf0
 8016c5c:	697a      	ldr	r2, [r7, #20]
 8016c5e:	4619      	mov	r1, r3
 8016c60:	f000 ffae 	bl	8017bc0 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8016c64:	4b21      	ldr	r3, [pc, #132]	; (8016cec <dhcp_renew+0x130>)
 8016c66:	6818      	ldr	r0, [r3, #0]
 8016c68:	69bb      	ldr	r3, [r7, #24]
 8016c6a:	f103 0218 	add.w	r2, r3, #24
 8016c6e:	687b      	ldr	r3, [r7, #4]
 8016c70:	9300      	str	r3, [sp, #0]
 8016c72:	2343      	movs	r3, #67	; 0x43
 8016c74:	6979      	ldr	r1, [r7, #20]
 8016c76:	f7fe fe11 	bl	801589c <udp_sendto_if>
 8016c7a:	4603      	mov	r3, r0
 8016c7c:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8016c7e:	6978      	ldr	r0, [r7, #20]
 8016c80:	f7f8 fc42 	bl	800f508 <pbuf_free>
 8016c84:	e001      	b.n	8016c8a <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8016c86:	23ff      	movs	r3, #255	; 0xff
 8016c88:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8016c8a:	69bb      	ldr	r3, [r7, #24]
 8016c8c:	799b      	ldrb	r3, [r3, #6]
 8016c8e:	2bff      	cmp	r3, #255	; 0xff
 8016c90:	d005      	beq.n	8016c9e <dhcp_renew+0xe2>
    dhcp->tries++;
 8016c92:	69bb      	ldr	r3, [r7, #24]
 8016c94:	799b      	ldrb	r3, [r3, #6]
 8016c96:	3301      	adds	r3, #1
 8016c98:	b2da      	uxtb	r2, r3
 8016c9a:	69bb      	ldr	r3, [r7, #24]
 8016c9c:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 8016c9e:	69bb      	ldr	r3, [r7, #24]
 8016ca0:	799b      	ldrb	r3, [r3, #6]
 8016ca2:	2b09      	cmp	r3, #9
 8016ca4:	d80a      	bhi.n	8016cbc <dhcp_renew+0x100>
 8016ca6:	69bb      	ldr	r3, [r7, #24]
 8016ca8:	799b      	ldrb	r3, [r3, #6]
 8016caa:	b29b      	uxth	r3, r3
 8016cac:	461a      	mov	r2, r3
 8016cae:	0152      	lsls	r2, r2, #5
 8016cb0:	1ad2      	subs	r2, r2, r3
 8016cb2:	0092      	lsls	r2, r2, #2
 8016cb4:	4413      	add	r3, r2
 8016cb6:	011b      	lsls	r3, r3, #4
 8016cb8:	b29b      	uxth	r3, r3
 8016cba:	e001      	b.n	8016cc0 <dhcp_renew+0x104>
 8016cbc:	f644 6320 	movw	r3, #20000	; 0x4e20
 8016cc0:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8016cc2:	89fb      	ldrh	r3, [r7, #14]
 8016cc4:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8016cc8:	4a09      	ldr	r2, [pc, #36]	; (8016cf0 <dhcp_renew+0x134>)
 8016cca:	fb82 1203 	smull	r1, r2, r2, r3
 8016cce:	1152      	asrs	r2, r2, #5
 8016cd0:	17db      	asrs	r3, r3, #31
 8016cd2:	1ad3      	subs	r3, r2, r3
 8016cd4:	b29a      	uxth	r2, r3
 8016cd6:	69bb      	ldr	r3, [r7, #24]
 8016cd8:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8016cda:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8016cde:	4618      	mov	r0, r3
 8016ce0:	3720      	adds	r7, #32
 8016ce2:	46bd      	mov	sp, r7
 8016ce4:	bd80      	pop	{r7, pc}
 8016ce6:	bf00      	nop
 8016ce8:	200000c8 	.word	0x200000c8
 8016cec:	20013c00 	.word	0x20013c00
 8016cf0:	10624dd3 	.word	0x10624dd3

08016cf4 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 8016cf4:	b580      	push	{r7, lr}
 8016cf6:	b08a      	sub	sp, #40	; 0x28
 8016cf8:	af02      	add	r7, sp, #8
 8016cfa:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016cfc:	687b      	ldr	r3, [r7, #4]
 8016cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016d00:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 8016d02:	2104      	movs	r1, #4
 8016d04:	69b8      	ldr	r0, [r7, #24]
 8016d06:	f000 f9ec 	bl	80170e2 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8016d0a:	f107 030c 	add.w	r3, r7, #12
 8016d0e:	2203      	movs	r2, #3
 8016d10:	69b9      	ldr	r1, [r7, #24]
 8016d12:	6878      	ldr	r0, [r7, #4]
 8016d14:	f000 fe7e 	bl	8017a14 <dhcp_create_msg>
 8016d18:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8016d1a:	697b      	ldr	r3, [r7, #20]
 8016d1c:	2b00      	cmp	r3, #0
 8016d1e:	d04c      	beq.n	8016dba <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8016d20:	697b      	ldr	r3, [r7, #20]
 8016d22:	685b      	ldr	r3, [r3, #4]
 8016d24:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8016d26:	89b8      	ldrh	r0, [r7, #12]
 8016d28:	693b      	ldr	r3, [r7, #16]
 8016d2a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016d2e:	2302      	movs	r3, #2
 8016d30:	2239      	movs	r2, #57	; 0x39
 8016d32:	f000 f9f1 	bl	8017118 <dhcp_option>
 8016d36:	4603      	mov	r3, r0
 8016d38:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8016d3a:	89b8      	ldrh	r0, [r7, #12]
 8016d3c:	693b      	ldr	r3, [r7, #16]
 8016d3e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016d42:	687b      	ldr	r3, [r7, #4]
 8016d44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016d46:	461a      	mov	r2, r3
 8016d48:	f000 fa40 	bl	80171cc <dhcp_option_short>
 8016d4c:	4603      	mov	r3, r0
 8016d4e:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8016d50:	89b8      	ldrh	r0, [r7, #12]
 8016d52:	693b      	ldr	r3, [r7, #16]
 8016d54:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016d58:	2303      	movs	r3, #3
 8016d5a:	2237      	movs	r2, #55	; 0x37
 8016d5c:	f000 f9dc 	bl	8017118 <dhcp_option>
 8016d60:	4603      	mov	r3, r0
 8016d62:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8016d64:	2300      	movs	r3, #0
 8016d66:	77bb      	strb	r3, [r7, #30]
 8016d68:	e00e      	b.n	8016d88 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8016d6a:	89b8      	ldrh	r0, [r7, #12]
 8016d6c:	693b      	ldr	r3, [r7, #16]
 8016d6e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016d72:	7fbb      	ldrb	r3, [r7, #30]
 8016d74:	4a29      	ldr	r2, [pc, #164]	; (8016e1c <dhcp_rebind+0x128>)
 8016d76:	5cd3      	ldrb	r3, [r2, r3]
 8016d78:	461a      	mov	r2, r3
 8016d7a:	f000 fa01 	bl	8017180 <dhcp_option_byte>
 8016d7e:	4603      	mov	r3, r0
 8016d80:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8016d82:	7fbb      	ldrb	r3, [r7, #30]
 8016d84:	3301      	adds	r3, #1
 8016d86:	77bb      	strb	r3, [r7, #30]
 8016d88:	7fbb      	ldrb	r3, [r7, #30]
 8016d8a:	2b02      	cmp	r3, #2
 8016d8c:	d9ed      	bls.n	8016d6a <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8016d8e:	89b8      	ldrh	r0, [r7, #12]
 8016d90:	693b      	ldr	r3, [r7, #16]
 8016d92:	33f0      	adds	r3, #240	; 0xf0
 8016d94:	697a      	ldr	r2, [r7, #20]
 8016d96:	4619      	mov	r1, r3
 8016d98:	f000 ff12 	bl	8017bc0 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8016d9c:	4b20      	ldr	r3, [pc, #128]	; (8016e20 <dhcp_rebind+0x12c>)
 8016d9e:	6818      	ldr	r0, [r3, #0]
 8016da0:	687b      	ldr	r3, [r7, #4]
 8016da2:	9300      	str	r3, [sp, #0]
 8016da4:	2343      	movs	r3, #67	; 0x43
 8016da6:	4a1f      	ldr	r2, [pc, #124]	; (8016e24 <dhcp_rebind+0x130>)
 8016da8:	6979      	ldr	r1, [r7, #20]
 8016daa:	f7fe fd77 	bl	801589c <udp_sendto_if>
 8016dae:	4603      	mov	r3, r0
 8016db0:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8016db2:	6978      	ldr	r0, [r7, #20]
 8016db4:	f7f8 fba8 	bl	800f508 <pbuf_free>
 8016db8:	e001      	b.n	8016dbe <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8016dba:	23ff      	movs	r3, #255	; 0xff
 8016dbc:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8016dbe:	69bb      	ldr	r3, [r7, #24]
 8016dc0:	799b      	ldrb	r3, [r3, #6]
 8016dc2:	2bff      	cmp	r3, #255	; 0xff
 8016dc4:	d005      	beq.n	8016dd2 <dhcp_rebind+0xde>
    dhcp->tries++;
 8016dc6:	69bb      	ldr	r3, [r7, #24]
 8016dc8:	799b      	ldrb	r3, [r3, #6]
 8016dca:	3301      	adds	r3, #1
 8016dcc:	b2da      	uxtb	r2, r3
 8016dce:	69bb      	ldr	r3, [r7, #24]
 8016dd0:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8016dd2:	69bb      	ldr	r3, [r7, #24]
 8016dd4:	799b      	ldrb	r3, [r3, #6]
 8016dd6:	2b09      	cmp	r3, #9
 8016dd8:	d80a      	bhi.n	8016df0 <dhcp_rebind+0xfc>
 8016dda:	69bb      	ldr	r3, [r7, #24]
 8016ddc:	799b      	ldrb	r3, [r3, #6]
 8016dde:	b29b      	uxth	r3, r3
 8016de0:	461a      	mov	r2, r3
 8016de2:	0152      	lsls	r2, r2, #5
 8016de4:	1ad2      	subs	r2, r2, r3
 8016de6:	0092      	lsls	r2, r2, #2
 8016de8:	4413      	add	r3, r2
 8016dea:	00db      	lsls	r3, r3, #3
 8016dec:	b29b      	uxth	r3, r3
 8016dee:	e001      	b.n	8016df4 <dhcp_rebind+0x100>
 8016df0:	f242 7310 	movw	r3, #10000	; 0x2710
 8016df4:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8016df6:	89fb      	ldrh	r3, [r7, #14]
 8016df8:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8016dfc:	4a0a      	ldr	r2, [pc, #40]	; (8016e28 <dhcp_rebind+0x134>)
 8016dfe:	fb82 1203 	smull	r1, r2, r2, r3
 8016e02:	1152      	asrs	r2, r2, #5
 8016e04:	17db      	asrs	r3, r3, #31
 8016e06:	1ad3      	subs	r3, r2, r3
 8016e08:	b29a      	uxth	r2, r3
 8016e0a:	69bb      	ldr	r3, [r7, #24]
 8016e0c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8016e0e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8016e12:	4618      	mov	r0, r3
 8016e14:	3720      	adds	r7, #32
 8016e16:	46bd      	mov	sp, r7
 8016e18:	bd80      	pop	{r7, pc}
 8016e1a:	bf00      	nop
 8016e1c:	200000c8 	.word	0x200000c8
 8016e20:	20013c00 	.word	0x20013c00
 8016e24:	0806cf84 	.word	0x0806cf84
 8016e28:	10624dd3 	.word	0x10624dd3

08016e2c <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 8016e2c:	b5b0      	push	{r4, r5, r7, lr}
 8016e2e:	b08a      	sub	sp, #40	; 0x28
 8016e30:	af02      	add	r7, sp, #8
 8016e32:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016e34:	687b      	ldr	r3, [r7, #4]
 8016e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016e38:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 8016e3a:	2103      	movs	r1, #3
 8016e3c:	69b8      	ldr	r0, [r7, #24]
 8016e3e:	f000 f950 	bl	80170e2 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8016e42:	f107 030c 	add.w	r3, r7, #12
 8016e46:	2203      	movs	r2, #3
 8016e48:	69b9      	ldr	r1, [r7, #24]
 8016e4a:	6878      	ldr	r0, [r7, #4]
 8016e4c:	f000 fde2 	bl	8017a14 <dhcp_create_msg>
 8016e50:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8016e52:	697b      	ldr	r3, [r7, #20]
 8016e54:	2b00      	cmp	r3, #0
 8016e56:	d066      	beq.n	8016f26 <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8016e58:	697b      	ldr	r3, [r7, #20]
 8016e5a:	685b      	ldr	r3, [r3, #4]
 8016e5c:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8016e5e:	89b8      	ldrh	r0, [r7, #12]
 8016e60:	693b      	ldr	r3, [r7, #16]
 8016e62:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016e66:	2302      	movs	r3, #2
 8016e68:	2239      	movs	r2, #57	; 0x39
 8016e6a:	f000 f955 	bl	8017118 <dhcp_option>
 8016e6e:	4603      	mov	r3, r0
 8016e70:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 8016e72:	89b8      	ldrh	r0, [r7, #12]
 8016e74:	693b      	ldr	r3, [r7, #16]
 8016e76:	33f0      	adds	r3, #240	; 0xf0
 8016e78:	f44f 7210 	mov.w	r2, #576	; 0x240
 8016e7c:	4619      	mov	r1, r3
 8016e7e:	f000 f9a5 	bl	80171cc <dhcp_option_short>
 8016e82:	4603      	mov	r3, r0
 8016e84:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8016e86:	89b8      	ldrh	r0, [r7, #12]
 8016e88:	693b      	ldr	r3, [r7, #16]
 8016e8a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016e8e:	2304      	movs	r3, #4
 8016e90:	2232      	movs	r2, #50	; 0x32
 8016e92:	f000 f941 	bl	8017118 <dhcp_option>
 8016e96:	4603      	mov	r3, r0
 8016e98:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8016e9a:	89bc      	ldrh	r4, [r7, #12]
 8016e9c:	693b      	ldr	r3, [r7, #16]
 8016e9e:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8016ea2:	69bb      	ldr	r3, [r7, #24]
 8016ea4:	69db      	ldr	r3, [r3, #28]
 8016ea6:	4618      	mov	r0, r3
 8016ea8:	f7f6 fe21 	bl	800daee <lwip_htonl>
 8016eac:	4603      	mov	r3, r0
 8016eae:	461a      	mov	r2, r3
 8016eb0:	4629      	mov	r1, r5
 8016eb2:	4620      	mov	r0, r4
 8016eb4:	f000 f9bc 	bl	8017230 <dhcp_option_long>
 8016eb8:	4603      	mov	r3, r0
 8016eba:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8016ebc:	89b8      	ldrh	r0, [r7, #12]
 8016ebe:	693b      	ldr	r3, [r7, #16]
 8016ec0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016ec4:	2303      	movs	r3, #3
 8016ec6:	2237      	movs	r2, #55	; 0x37
 8016ec8:	f000 f926 	bl	8017118 <dhcp_option>
 8016ecc:	4603      	mov	r3, r0
 8016ece:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8016ed0:	2300      	movs	r3, #0
 8016ed2:	77bb      	strb	r3, [r7, #30]
 8016ed4:	e00e      	b.n	8016ef4 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8016ed6:	89b8      	ldrh	r0, [r7, #12]
 8016ed8:	693b      	ldr	r3, [r7, #16]
 8016eda:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016ede:	7fbb      	ldrb	r3, [r7, #30]
 8016ee0:	4a29      	ldr	r2, [pc, #164]	; (8016f88 <dhcp_reboot+0x15c>)
 8016ee2:	5cd3      	ldrb	r3, [r2, r3]
 8016ee4:	461a      	mov	r2, r3
 8016ee6:	f000 f94b 	bl	8017180 <dhcp_option_byte>
 8016eea:	4603      	mov	r3, r0
 8016eec:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8016eee:	7fbb      	ldrb	r3, [r7, #30]
 8016ef0:	3301      	adds	r3, #1
 8016ef2:	77bb      	strb	r3, [r7, #30]
 8016ef4:	7fbb      	ldrb	r3, [r7, #30]
 8016ef6:	2b02      	cmp	r3, #2
 8016ef8:	d9ed      	bls.n	8016ed6 <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8016efa:	89b8      	ldrh	r0, [r7, #12]
 8016efc:	693b      	ldr	r3, [r7, #16]
 8016efe:	33f0      	adds	r3, #240	; 0xf0
 8016f00:	697a      	ldr	r2, [r7, #20]
 8016f02:	4619      	mov	r1, r3
 8016f04:	f000 fe5c 	bl	8017bc0 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8016f08:	4b20      	ldr	r3, [pc, #128]	; (8016f8c <dhcp_reboot+0x160>)
 8016f0a:	6818      	ldr	r0, [r3, #0]
 8016f0c:	687b      	ldr	r3, [r7, #4]
 8016f0e:	9300      	str	r3, [sp, #0]
 8016f10:	2343      	movs	r3, #67	; 0x43
 8016f12:	4a1f      	ldr	r2, [pc, #124]	; (8016f90 <dhcp_reboot+0x164>)
 8016f14:	6979      	ldr	r1, [r7, #20]
 8016f16:	f7fe fcc1 	bl	801589c <udp_sendto_if>
 8016f1a:	4603      	mov	r3, r0
 8016f1c:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8016f1e:	6978      	ldr	r0, [r7, #20]
 8016f20:	f7f8 faf2 	bl	800f508 <pbuf_free>
 8016f24:	e001      	b.n	8016f2a <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8016f26:	23ff      	movs	r3, #255	; 0xff
 8016f28:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8016f2a:	69bb      	ldr	r3, [r7, #24]
 8016f2c:	799b      	ldrb	r3, [r3, #6]
 8016f2e:	2bff      	cmp	r3, #255	; 0xff
 8016f30:	d005      	beq.n	8016f3e <dhcp_reboot+0x112>
    dhcp->tries++;
 8016f32:	69bb      	ldr	r3, [r7, #24]
 8016f34:	799b      	ldrb	r3, [r3, #6]
 8016f36:	3301      	adds	r3, #1
 8016f38:	b2da      	uxtb	r2, r3
 8016f3a:	69bb      	ldr	r3, [r7, #24]
 8016f3c:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8016f3e:	69bb      	ldr	r3, [r7, #24]
 8016f40:	799b      	ldrb	r3, [r3, #6]
 8016f42:	2b09      	cmp	r3, #9
 8016f44:	d80a      	bhi.n	8016f5c <dhcp_reboot+0x130>
 8016f46:	69bb      	ldr	r3, [r7, #24]
 8016f48:	799b      	ldrb	r3, [r3, #6]
 8016f4a:	b29b      	uxth	r3, r3
 8016f4c:	461a      	mov	r2, r3
 8016f4e:	0152      	lsls	r2, r2, #5
 8016f50:	1ad2      	subs	r2, r2, r3
 8016f52:	0092      	lsls	r2, r2, #2
 8016f54:	4413      	add	r3, r2
 8016f56:	00db      	lsls	r3, r3, #3
 8016f58:	b29b      	uxth	r3, r3
 8016f5a:	e001      	b.n	8016f60 <dhcp_reboot+0x134>
 8016f5c:	f242 7310 	movw	r3, #10000	; 0x2710
 8016f60:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8016f62:	89fb      	ldrh	r3, [r7, #14]
 8016f64:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8016f68:	4a0a      	ldr	r2, [pc, #40]	; (8016f94 <dhcp_reboot+0x168>)
 8016f6a:	fb82 1203 	smull	r1, r2, r2, r3
 8016f6e:	1152      	asrs	r2, r2, #5
 8016f70:	17db      	asrs	r3, r3, #31
 8016f72:	1ad3      	subs	r3, r2, r3
 8016f74:	b29a      	uxth	r2, r3
 8016f76:	69bb      	ldr	r3, [r7, #24]
 8016f78:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8016f7a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8016f7e:	4618      	mov	r0, r3
 8016f80:	3720      	adds	r7, #32
 8016f82:	46bd      	mov	sp, r7
 8016f84:	bdb0      	pop	{r4, r5, r7, pc}
 8016f86:	bf00      	nop
 8016f88:	200000c8 	.word	0x200000c8
 8016f8c:	20013c00 	.word	0x20013c00
 8016f90:	0806cf84 	.word	0x0806cf84
 8016f94:	10624dd3 	.word	0x10624dd3

08016f98 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 8016f98:	b5b0      	push	{r4, r5, r7, lr}
 8016f9a:	b08a      	sub	sp, #40	; 0x28
 8016f9c:	af02      	add	r7, sp, #8
 8016f9e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016fa0:	687b      	ldr	r3, [r7, #4]
 8016fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016fa4:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 8016fa6:	69fb      	ldr	r3, [r7, #28]
 8016fa8:	2b00      	cmp	r3, #0
 8016faa:	f000 8084 	beq.w	80170b6 <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 8016fae:	69fb      	ldr	r3, [r7, #28]
 8016fb0:	795b      	ldrb	r3, [r3, #5]
 8016fb2:	2b00      	cmp	r3, #0
 8016fb4:	f000 8081 	beq.w	80170ba <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8016fb8:	69fb      	ldr	r3, [r7, #28]
 8016fba:	699b      	ldr	r3, [r3, #24]
 8016fbc:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 8016fbe:	69fb      	ldr	r3, [r7, #28]
 8016fc0:	2200      	movs	r2, #0
 8016fc2:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8016fc4:	69fb      	ldr	r3, [r7, #28]
 8016fc6:	2200      	movs	r2, #0
 8016fc8:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8016fca:	69fb      	ldr	r3, [r7, #28]
 8016fcc:	2200      	movs	r2, #0
 8016fce:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8016fd0:	69fb      	ldr	r3, [r7, #28]
 8016fd2:	2200      	movs	r2, #0
 8016fd4:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 8016fd6:	69fb      	ldr	r3, [r7, #28]
 8016fd8:	2200      	movs	r2, #0
 8016fda:	631a      	str	r2, [r3, #48]	; 0x30
 8016fdc:	69fb      	ldr	r3, [r7, #28]
 8016fde:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8016fe0:	69fb      	ldr	r3, [r7, #28]
 8016fe2:	62da      	str	r2, [r3, #44]	; 0x2c
 8016fe4:	69fb      	ldr	r3, [r7, #28]
 8016fe6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016fe8:	69fb      	ldr	r3, [r7, #28]
 8016fea:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8016fec:	69fb      	ldr	r3, [r7, #28]
 8016fee:	2200      	movs	r2, #0
 8016ff0:	829a      	strh	r2, [r3, #20]
 8016ff2:	69fb      	ldr	r3, [r7, #28]
 8016ff4:	8a9a      	ldrh	r2, [r3, #20]
 8016ff6:	69fb      	ldr	r3, [r7, #28]
 8016ff8:	825a      	strh	r2, [r3, #18]
 8016ffa:	69fb      	ldr	r3, [r7, #28]
 8016ffc:	8a5a      	ldrh	r2, [r3, #18]
 8016ffe:	69fb      	ldr	r3, [r7, #28]
 8017000:	821a      	strh	r2, [r3, #16]
 8017002:	69fb      	ldr	r3, [r7, #28]
 8017004:	8a1a      	ldrh	r2, [r3, #16]
 8017006:	69fb      	ldr	r3, [r7, #28]
 8017008:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 801700a:	6878      	ldr	r0, [r7, #4]
 801700c:	f000 fe06 	bl	8017c1c <dhcp_supplied_address>
 8017010:	4603      	mov	r3, r0
 8017012:	2b00      	cmp	r3, #0
 8017014:	d03b      	beq.n	801708e <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 8017016:	f107 030e 	add.w	r3, r7, #14
 801701a:	2207      	movs	r2, #7
 801701c:	69f9      	ldr	r1, [r7, #28]
 801701e:	6878      	ldr	r0, [r7, #4]
 8017020:	f000 fcf8 	bl	8017a14 <dhcp_create_msg>
 8017024:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 8017026:	69bb      	ldr	r3, [r7, #24]
 8017028:	2b00      	cmp	r3, #0
 801702a:	d030      	beq.n	801708e <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801702c:	69bb      	ldr	r3, [r7, #24]
 801702e:	685b      	ldr	r3, [r3, #4]
 8017030:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8017032:	89f8      	ldrh	r0, [r7, #14]
 8017034:	697b      	ldr	r3, [r7, #20]
 8017036:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801703a:	2304      	movs	r3, #4
 801703c:	2236      	movs	r2, #54	; 0x36
 801703e:	f000 f86b 	bl	8017118 <dhcp_option>
 8017042:	4603      	mov	r3, r0
 8017044:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8017046:	89fc      	ldrh	r4, [r7, #14]
 8017048:	697b      	ldr	r3, [r7, #20]
 801704a:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801704e:	693b      	ldr	r3, [r7, #16]
 8017050:	4618      	mov	r0, r3
 8017052:	f7f6 fd4c 	bl	800daee <lwip_htonl>
 8017056:	4603      	mov	r3, r0
 8017058:	461a      	mov	r2, r3
 801705a:	4629      	mov	r1, r5
 801705c:	4620      	mov	r0, r4
 801705e:	f000 f8e7 	bl	8017230 <dhcp_option_long>
 8017062:	4603      	mov	r3, r0
 8017064:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8017066:	89f8      	ldrh	r0, [r7, #14]
 8017068:	697b      	ldr	r3, [r7, #20]
 801706a:	33f0      	adds	r3, #240	; 0xf0
 801706c:	69ba      	ldr	r2, [r7, #24]
 801706e:	4619      	mov	r1, r3
 8017070:	f000 fda6 	bl	8017bc0 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8017074:	4b13      	ldr	r3, [pc, #76]	; (80170c4 <dhcp_release_and_stop+0x12c>)
 8017076:	6818      	ldr	r0, [r3, #0]
 8017078:	f107 0210 	add.w	r2, r7, #16
 801707c:	687b      	ldr	r3, [r7, #4]
 801707e:	9300      	str	r3, [sp, #0]
 8017080:	2343      	movs	r3, #67	; 0x43
 8017082:	69b9      	ldr	r1, [r7, #24]
 8017084:	f7fe fc0a 	bl	801589c <udp_sendto_if>
      pbuf_free(p_out);
 8017088:	69b8      	ldr	r0, [r7, #24]
 801708a:	f7f8 fa3d 	bl	800f508 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 801708e:	4b0e      	ldr	r3, [pc, #56]	; (80170c8 <dhcp_release_and_stop+0x130>)
 8017090:	4a0d      	ldr	r2, [pc, #52]	; (80170c8 <dhcp_release_and_stop+0x130>)
 8017092:	490d      	ldr	r1, [pc, #52]	; (80170c8 <dhcp_release_and_stop+0x130>)
 8017094:	6878      	ldr	r0, [r7, #4]
 8017096:	f7f7 fd37 	bl	800eb08 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 801709a:	2100      	movs	r1, #0
 801709c:	69f8      	ldr	r0, [r7, #28]
 801709e:	f000 f820 	bl	80170e2 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 80170a2:	69fb      	ldr	r3, [r7, #28]
 80170a4:	791b      	ldrb	r3, [r3, #4]
 80170a6:	2b00      	cmp	r3, #0
 80170a8:	d008      	beq.n	80170bc <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 80170aa:	f7fe ff85 	bl	8015fb8 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 80170ae:	69fb      	ldr	r3, [r7, #28]
 80170b0:	2200      	movs	r2, #0
 80170b2:	711a      	strb	r2, [r3, #4]
 80170b4:	e002      	b.n	80170bc <dhcp_release_and_stop+0x124>
    return;
 80170b6:	bf00      	nop
 80170b8:	e000      	b.n	80170bc <dhcp_release_and_stop+0x124>
    return;
 80170ba:	bf00      	nop
  }
}
 80170bc:	3720      	adds	r7, #32
 80170be:	46bd      	mov	sp, r7
 80170c0:	bdb0      	pop	{r4, r5, r7, pc}
 80170c2:	bf00      	nop
 80170c4:	20013c00 	.word	0x20013c00
 80170c8:	0806cf80 	.word	0x0806cf80

080170cc <dhcp_stop>:
 * This function calls dhcp_release_and_stop() internally.
 * @deprecated Use dhcp_release_and_stop() instead.
 */
void
dhcp_stop(struct netif *netif)
{
 80170cc:	b580      	push	{r7, lr}
 80170ce:	b082      	sub	sp, #8
 80170d0:	af00      	add	r7, sp, #0
 80170d2:	6078      	str	r0, [r7, #4]
  dhcp_release_and_stop(netif);
 80170d4:	6878      	ldr	r0, [r7, #4]
 80170d6:	f7ff ff5f 	bl	8016f98 <dhcp_release_and_stop>
}
 80170da:	bf00      	nop
 80170dc:	3708      	adds	r7, #8
 80170de:	46bd      	mov	sp, r7
 80170e0:	bd80      	pop	{r7, pc}

080170e2 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 80170e2:	b480      	push	{r7}
 80170e4:	b083      	sub	sp, #12
 80170e6:	af00      	add	r7, sp, #0
 80170e8:	6078      	str	r0, [r7, #4]
 80170ea:	460b      	mov	r3, r1
 80170ec:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 80170ee:	687b      	ldr	r3, [r7, #4]
 80170f0:	795b      	ldrb	r3, [r3, #5]
 80170f2:	78fa      	ldrb	r2, [r7, #3]
 80170f4:	429a      	cmp	r2, r3
 80170f6:	d008      	beq.n	801710a <dhcp_set_state+0x28>
    dhcp->state = new_state;
 80170f8:	687b      	ldr	r3, [r7, #4]
 80170fa:	78fa      	ldrb	r2, [r7, #3]
 80170fc:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 80170fe:	687b      	ldr	r3, [r7, #4]
 8017100:	2200      	movs	r2, #0
 8017102:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 8017104:	687b      	ldr	r3, [r7, #4]
 8017106:	2200      	movs	r2, #0
 8017108:	811a      	strh	r2, [r3, #8]
  }
}
 801710a:	bf00      	nop
 801710c:	370c      	adds	r7, #12
 801710e:	46bd      	mov	sp, r7
 8017110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017114:	4770      	bx	lr
	...

08017118 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 8017118:	b580      	push	{r7, lr}
 801711a:	b082      	sub	sp, #8
 801711c:	af00      	add	r7, sp, #0
 801711e:	6039      	str	r1, [r7, #0]
 8017120:	4611      	mov	r1, r2
 8017122:	461a      	mov	r2, r3
 8017124:	4603      	mov	r3, r0
 8017126:	80fb      	strh	r3, [r7, #6]
 8017128:	460b      	mov	r3, r1
 801712a:	717b      	strb	r3, [r7, #5]
 801712c:	4613      	mov	r3, r2
 801712e:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8017130:	88fa      	ldrh	r2, [r7, #6]
 8017132:	793b      	ldrb	r3, [r7, #4]
 8017134:	4413      	add	r3, r2
 8017136:	3302      	adds	r3, #2
 8017138:	2b44      	cmp	r3, #68	; 0x44
 801713a:	d906      	bls.n	801714a <dhcp_option+0x32>
 801713c:	4b0d      	ldr	r3, [pc, #52]	; (8017174 <dhcp_option+0x5c>)
 801713e:	f240 529a 	movw	r2, #1434	; 0x59a
 8017142:	490d      	ldr	r1, [pc, #52]	; (8017178 <dhcp_option+0x60>)
 8017144:	480d      	ldr	r0, [pc, #52]	; (801717c <dhcp_option+0x64>)
 8017146:	f004 f99b 	bl	801b480 <iprintf>
  options[options_out_len++] = option_type;
 801714a:	88fb      	ldrh	r3, [r7, #6]
 801714c:	1c5a      	adds	r2, r3, #1
 801714e:	80fa      	strh	r2, [r7, #6]
 8017150:	461a      	mov	r2, r3
 8017152:	683b      	ldr	r3, [r7, #0]
 8017154:	4413      	add	r3, r2
 8017156:	797a      	ldrb	r2, [r7, #5]
 8017158:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 801715a:	88fb      	ldrh	r3, [r7, #6]
 801715c:	1c5a      	adds	r2, r3, #1
 801715e:	80fa      	strh	r2, [r7, #6]
 8017160:	461a      	mov	r2, r3
 8017162:	683b      	ldr	r3, [r7, #0]
 8017164:	4413      	add	r3, r2
 8017166:	793a      	ldrb	r2, [r7, #4]
 8017168:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801716a:	88fb      	ldrh	r3, [r7, #6]
}
 801716c:	4618      	mov	r0, r3
 801716e:	3708      	adds	r7, #8
 8017170:	46bd      	mov	sp, r7
 8017172:	bd80      	pop	{r7, pc}
 8017174:	080206b8 	.word	0x080206b8
 8017178:	0802084c 	.word	0x0802084c
 801717c:	08020718 	.word	0x08020718

08017180 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 8017180:	b580      	push	{r7, lr}
 8017182:	b082      	sub	sp, #8
 8017184:	af00      	add	r7, sp, #0
 8017186:	4603      	mov	r3, r0
 8017188:	6039      	str	r1, [r7, #0]
 801718a:	80fb      	strh	r3, [r7, #6]
 801718c:	4613      	mov	r3, r2
 801718e:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8017190:	88fb      	ldrh	r3, [r7, #6]
 8017192:	2b43      	cmp	r3, #67	; 0x43
 8017194:	d906      	bls.n	80171a4 <dhcp_option_byte+0x24>
 8017196:	4b0a      	ldr	r3, [pc, #40]	; (80171c0 <dhcp_option_byte+0x40>)
 8017198:	f240 52a6 	movw	r2, #1446	; 0x5a6
 801719c:	4909      	ldr	r1, [pc, #36]	; (80171c4 <dhcp_option_byte+0x44>)
 801719e:	480a      	ldr	r0, [pc, #40]	; (80171c8 <dhcp_option_byte+0x48>)
 80171a0:	f004 f96e 	bl	801b480 <iprintf>
  options[options_out_len++] = value;
 80171a4:	88fb      	ldrh	r3, [r7, #6]
 80171a6:	1c5a      	adds	r2, r3, #1
 80171a8:	80fa      	strh	r2, [r7, #6]
 80171aa:	461a      	mov	r2, r3
 80171ac:	683b      	ldr	r3, [r7, #0]
 80171ae:	4413      	add	r3, r2
 80171b0:	797a      	ldrb	r2, [r7, #5]
 80171b2:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80171b4:	88fb      	ldrh	r3, [r7, #6]
}
 80171b6:	4618      	mov	r0, r3
 80171b8:	3708      	adds	r7, #8
 80171ba:	46bd      	mov	sp, r7
 80171bc:	bd80      	pop	{r7, pc}
 80171be:	bf00      	nop
 80171c0:	080206b8 	.word	0x080206b8
 80171c4:	08020890 	.word	0x08020890
 80171c8:	08020718 	.word	0x08020718

080171cc <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 80171cc:	b580      	push	{r7, lr}
 80171ce:	b082      	sub	sp, #8
 80171d0:	af00      	add	r7, sp, #0
 80171d2:	4603      	mov	r3, r0
 80171d4:	6039      	str	r1, [r7, #0]
 80171d6:	80fb      	strh	r3, [r7, #6]
 80171d8:	4613      	mov	r3, r2
 80171da:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 80171dc:	88fb      	ldrh	r3, [r7, #6]
 80171de:	3302      	adds	r3, #2
 80171e0:	2b44      	cmp	r3, #68	; 0x44
 80171e2:	d906      	bls.n	80171f2 <dhcp_option_short+0x26>
 80171e4:	4b0f      	ldr	r3, [pc, #60]	; (8017224 <dhcp_option_short+0x58>)
 80171e6:	f240 52ae 	movw	r2, #1454	; 0x5ae
 80171ea:	490f      	ldr	r1, [pc, #60]	; (8017228 <dhcp_option_short+0x5c>)
 80171ec:	480f      	ldr	r0, [pc, #60]	; (801722c <dhcp_option_short+0x60>)
 80171ee:	f004 f947 	bl	801b480 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 80171f2:	88bb      	ldrh	r3, [r7, #4]
 80171f4:	0a1b      	lsrs	r3, r3, #8
 80171f6:	b29a      	uxth	r2, r3
 80171f8:	88fb      	ldrh	r3, [r7, #6]
 80171fa:	1c59      	adds	r1, r3, #1
 80171fc:	80f9      	strh	r1, [r7, #6]
 80171fe:	4619      	mov	r1, r3
 8017200:	683b      	ldr	r3, [r7, #0]
 8017202:	440b      	add	r3, r1
 8017204:	b2d2      	uxtb	r2, r2
 8017206:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8017208:	88fb      	ldrh	r3, [r7, #6]
 801720a:	1c5a      	adds	r2, r3, #1
 801720c:	80fa      	strh	r2, [r7, #6]
 801720e:	461a      	mov	r2, r3
 8017210:	683b      	ldr	r3, [r7, #0]
 8017212:	4413      	add	r3, r2
 8017214:	88ba      	ldrh	r2, [r7, #4]
 8017216:	b2d2      	uxtb	r2, r2
 8017218:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801721a:	88fb      	ldrh	r3, [r7, #6]
}
 801721c:	4618      	mov	r0, r3
 801721e:	3708      	adds	r7, #8
 8017220:	46bd      	mov	sp, r7
 8017222:	bd80      	pop	{r7, pc}
 8017224:	080206b8 	.word	0x080206b8
 8017228:	080208c8 	.word	0x080208c8
 801722c:	08020718 	.word	0x08020718

08017230 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 8017230:	b580      	push	{r7, lr}
 8017232:	b084      	sub	sp, #16
 8017234:	af00      	add	r7, sp, #0
 8017236:	4603      	mov	r3, r0
 8017238:	60b9      	str	r1, [r7, #8]
 801723a:	607a      	str	r2, [r7, #4]
 801723c:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 801723e:	89fb      	ldrh	r3, [r7, #14]
 8017240:	3304      	adds	r3, #4
 8017242:	2b44      	cmp	r3, #68	; 0x44
 8017244:	d906      	bls.n	8017254 <dhcp_option_long+0x24>
 8017246:	4b19      	ldr	r3, [pc, #100]	; (80172ac <dhcp_option_long+0x7c>)
 8017248:	f240 52b7 	movw	r2, #1463	; 0x5b7
 801724c:	4918      	ldr	r1, [pc, #96]	; (80172b0 <dhcp_option_long+0x80>)
 801724e:	4819      	ldr	r0, [pc, #100]	; (80172b4 <dhcp_option_long+0x84>)
 8017250:	f004 f916 	bl	801b480 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8017254:	687b      	ldr	r3, [r7, #4]
 8017256:	0e1a      	lsrs	r2, r3, #24
 8017258:	89fb      	ldrh	r3, [r7, #14]
 801725a:	1c59      	adds	r1, r3, #1
 801725c:	81f9      	strh	r1, [r7, #14]
 801725e:	4619      	mov	r1, r3
 8017260:	68bb      	ldr	r3, [r7, #8]
 8017262:	440b      	add	r3, r1
 8017264:	b2d2      	uxtb	r2, r2
 8017266:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8017268:	687b      	ldr	r3, [r7, #4]
 801726a:	0c1a      	lsrs	r2, r3, #16
 801726c:	89fb      	ldrh	r3, [r7, #14]
 801726e:	1c59      	adds	r1, r3, #1
 8017270:	81f9      	strh	r1, [r7, #14]
 8017272:	4619      	mov	r1, r3
 8017274:	68bb      	ldr	r3, [r7, #8]
 8017276:	440b      	add	r3, r1
 8017278:	b2d2      	uxtb	r2, r2
 801727a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 801727c:	687b      	ldr	r3, [r7, #4]
 801727e:	0a1a      	lsrs	r2, r3, #8
 8017280:	89fb      	ldrh	r3, [r7, #14]
 8017282:	1c59      	adds	r1, r3, #1
 8017284:	81f9      	strh	r1, [r7, #14]
 8017286:	4619      	mov	r1, r3
 8017288:	68bb      	ldr	r3, [r7, #8]
 801728a:	440b      	add	r3, r1
 801728c:	b2d2      	uxtb	r2, r2
 801728e:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8017290:	89fb      	ldrh	r3, [r7, #14]
 8017292:	1c5a      	adds	r2, r3, #1
 8017294:	81fa      	strh	r2, [r7, #14]
 8017296:	461a      	mov	r2, r3
 8017298:	68bb      	ldr	r3, [r7, #8]
 801729a:	4413      	add	r3, r2
 801729c:	687a      	ldr	r2, [r7, #4]
 801729e:	b2d2      	uxtb	r2, r2
 80172a0:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80172a2:	89fb      	ldrh	r3, [r7, #14]
}
 80172a4:	4618      	mov	r0, r3
 80172a6:	3710      	adds	r7, #16
 80172a8:	46bd      	mov	sp, r7
 80172aa:	bd80      	pop	{r7, pc}
 80172ac:	080206b8 	.word	0x080206b8
 80172b0:	08020904 	.word	0x08020904
 80172b4:	08020718 	.word	0x08020718

080172b8 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 80172b8:	b580      	push	{r7, lr}
 80172ba:	b092      	sub	sp, #72	; 0x48
 80172bc:	af00      	add	r7, sp, #0
 80172be:	6078      	str	r0, [r7, #4]
 80172c0:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 80172c2:	2300      	movs	r3, #0
 80172c4:	633b      	str	r3, [r7, #48]	; 0x30
  int parse_sname_as_options = 0;
 80172c6:	2300      	movs	r3, #0
 80172c8:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 80172ca:	2208      	movs	r2, #8
 80172cc:	2100      	movs	r1, #0
 80172ce:	48b8      	ldr	r0, [pc, #736]	; (80175b0 <dhcp_parse_reply+0x2f8>)
 80172d0:	f003 fb6e 	bl	801a9b0 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 80172d4:	687b      	ldr	r3, [r7, #4]
 80172d6:	895b      	ldrh	r3, [r3, #10]
 80172d8:	2b2b      	cmp	r3, #43	; 0x2b
 80172da:	d802      	bhi.n	80172e2 <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 80172dc:	f06f 0301 	mvn.w	r3, #1
 80172e0:	e2b8      	b.n	8017854 <dhcp_parse_reply+0x59c>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 80172e2:	687b      	ldr	r3, [r7, #4]
 80172e4:	685b      	ldr	r3, [r3, #4]
 80172e6:	61fb      	str	r3, [r7, #28]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 80172e8:	23f0      	movs	r3, #240	; 0xf0
 80172ea:	87bb      	strh	r3, [r7, #60]	; 0x3c
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 80172ec:	687b      	ldr	r3, [r7, #4]
 80172ee:	891b      	ldrh	r3, [r3, #8]
 80172f0:	877b      	strh	r3, [r7, #58]	; 0x3a
again:
  q = p;
 80172f2:	687b      	ldr	r3, [r7, #4]
 80172f4:	637b      	str	r3, [r7, #52]	; 0x34
  while ((q != NULL) && (options_idx >= q->len)) {
 80172f6:	e00c      	b.n	8017312 <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 80172f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80172fa:	895b      	ldrh	r3, [r3, #10]
 80172fc:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 80172fe:	1ad3      	subs	r3, r2, r3
 8017300:	87bb      	strh	r3, [r7, #60]	; 0x3c
    options_idx_max = (u16_t)(options_idx_max - q->len);
 8017302:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017304:	895b      	ldrh	r3, [r3, #10]
 8017306:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8017308:	1ad3      	subs	r3, r2, r3
 801730a:	877b      	strh	r3, [r7, #58]	; 0x3a
    q = q->next;
 801730c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801730e:	681b      	ldr	r3, [r3, #0]
 8017310:	637b      	str	r3, [r7, #52]	; 0x34
  while ((q != NULL) && (options_idx >= q->len)) {
 8017312:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017314:	2b00      	cmp	r3, #0
 8017316:	d004      	beq.n	8017322 <dhcp_parse_reply+0x6a>
 8017318:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801731a:	895b      	ldrh	r3, [r3, #10]
 801731c:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 801731e:	429a      	cmp	r2, r3
 8017320:	d2ea      	bcs.n	80172f8 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 8017322:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017324:	2b00      	cmp	r3, #0
 8017326:	d102      	bne.n	801732e <dhcp_parse_reply+0x76>
    return ERR_BUF;
 8017328:	f06f 0301 	mvn.w	r3, #1
 801732c:	e292      	b.n	8017854 <dhcp_parse_reply+0x59c>
  }
  offset = options_idx;
 801732e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017330:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  offset_max = options_idx_max;
 8017334:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017336:	87fb      	strh	r3, [r7, #62]	; 0x3e
  options = (u8_t *)q->payload;
 8017338:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801733a:	685b      	ldr	r3, [r3, #4]
 801733c:	643b      	str	r3, [r7, #64]	; 0x40
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 801733e:	e247      	b.n	80177d0 <dhcp_parse_reply+0x518>
    u8_t op = options[offset];
 8017340:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8017344:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8017346:	4413      	add	r3, r2
 8017348:	781b      	ldrb	r3, [r3, #0]
 801734a:	76fb      	strb	r3, [r7, #27]
    u8_t len;
    u8_t decode_len = 0;
 801734c:	2300      	movs	r3, #0
 801734e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    int decode_idx = -1;
 8017352:	f04f 33ff 	mov.w	r3, #4294967295
 8017356:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t val_offset = (u16_t)(offset + 2);
 8017358:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801735c:	3302      	adds	r3, #2
 801735e:	847b      	strh	r3, [r7, #34]	; 0x22
    if (val_offset < offset) {
 8017360:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8017362:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8017366:	429a      	cmp	r2, r3
 8017368:	d202      	bcs.n	8017370 <dhcp_parse_reply+0xb8>
      /* overflow */
      return ERR_BUF;
 801736a:	f06f 0301 	mvn.w	r3, #1
 801736e:	e271      	b.n	8017854 <dhcp_parse_reply+0x59c>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 8017370:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8017374:	3301      	adds	r3, #1
 8017376:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017378:	8952      	ldrh	r2, [r2, #10]
 801737a:	4293      	cmp	r3, r2
 801737c:	da08      	bge.n	8017390 <dhcp_parse_reply+0xd8>
      len = options[offset + 1];
 801737e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8017382:	3301      	adds	r3, #1
 8017384:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8017386:	4413      	add	r3, r2
 8017388:	781b      	ldrb	r3, [r3, #0]
 801738a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801738e:	e00b      	b.n	80173a8 <dhcp_parse_reply+0xf0>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8017390:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017392:	681b      	ldr	r3, [r3, #0]
 8017394:	2b00      	cmp	r3, #0
 8017396:	d004      	beq.n	80173a2 <dhcp_parse_reply+0xea>
 8017398:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801739a:	681b      	ldr	r3, [r3, #0]
 801739c:	685b      	ldr	r3, [r3, #4]
 801739e:	781b      	ldrb	r3, [r3, #0]
 80173a0:	e000      	b.n	80173a4 <dhcp_parse_reply+0xec>
 80173a2:	2300      	movs	r3, #0
 80173a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 80173a8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80173ac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    switch (op) {
 80173b0:	7efb      	ldrb	r3, [r7, #27]
 80173b2:	2b3b      	cmp	r3, #59	; 0x3b
 80173b4:	f200 812c 	bhi.w	8017610 <dhcp_parse_reply+0x358>
 80173b8:	a201      	add	r2, pc, #4	; (adr r2, 80173c0 <dhcp_parse_reply+0x108>)
 80173ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80173be:	bf00      	nop
 80173c0:	080174b1 	.word	0x080174b1
 80173c4:	080174c1 	.word	0x080174c1
 80173c8:	08017611 	.word	0x08017611
 80173cc:	080174e3 	.word	0x080174e3
 80173d0:	08017611 	.word	0x08017611
 80173d4:	08017611 	.word	0x08017611
 80173d8:	08017611 	.word	0x08017611
 80173dc:	08017611 	.word	0x08017611
 80173e0:	08017611 	.word	0x08017611
 80173e4:	08017611 	.word	0x08017611
 80173e8:	08017611 	.word	0x08017611
 80173ec:	08017611 	.word	0x08017611
 80173f0:	08017611 	.word	0x08017611
 80173f4:	08017611 	.word	0x08017611
 80173f8:	08017611 	.word	0x08017611
 80173fc:	08017611 	.word	0x08017611
 8017400:	08017611 	.word	0x08017611
 8017404:	08017611 	.word	0x08017611
 8017408:	08017611 	.word	0x08017611
 801740c:	08017611 	.word	0x08017611
 8017410:	08017611 	.word	0x08017611
 8017414:	08017611 	.word	0x08017611
 8017418:	08017611 	.word	0x08017611
 801741c:	08017611 	.word	0x08017611
 8017420:	08017611 	.word	0x08017611
 8017424:	08017611 	.word	0x08017611
 8017428:	08017611 	.word	0x08017611
 801742c:	08017611 	.word	0x08017611
 8017430:	08017611 	.word	0x08017611
 8017434:	08017611 	.word	0x08017611
 8017438:	08017611 	.word	0x08017611
 801743c:	08017611 	.word	0x08017611
 8017440:	08017611 	.word	0x08017611
 8017444:	08017611 	.word	0x08017611
 8017448:	08017611 	.word	0x08017611
 801744c:	08017611 	.word	0x08017611
 8017450:	08017611 	.word	0x08017611
 8017454:	08017611 	.word	0x08017611
 8017458:	08017611 	.word	0x08017611
 801745c:	08017611 	.word	0x08017611
 8017460:	08017611 	.word	0x08017611
 8017464:	08017611 	.word	0x08017611
 8017468:	08017611 	.word	0x08017611
 801746c:	08017611 	.word	0x08017611
 8017470:	08017611 	.word	0x08017611
 8017474:	08017611 	.word	0x08017611
 8017478:	08017611 	.word	0x08017611
 801747c:	08017611 	.word	0x08017611
 8017480:	08017611 	.word	0x08017611
 8017484:	08017611 	.word	0x08017611
 8017488:	08017611 	.word	0x08017611
 801748c:	0801750f 	.word	0x0801750f
 8017490:	08017531 	.word	0x08017531
 8017494:	0801756d 	.word	0x0801756d
 8017498:	0801758f 	.word	0x0801758f
 801749c:	08017611 	.word	0x08017611
 80174a0:	08017611 	.word	0x08017611
 80174a4:	08017611 	.word	0x08017611
 80174a8:	080175cd 	.word	0x080175cd
 80174ac:	080175ef 	.word	0x080175ef
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 80174b0:	2300      	movs	r3, #0
 80174b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80174b6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80174ba:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        /* will be increased below */
        break;
 80174be:	e0ab      	b.n	8017618 <dhcp_parse_reply+0x360>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80174c0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80174c4:	2b04      	cmp	r3, #4
 80174c6:	d009      	beq.n	80174dc <dhcp_parse_reply+0x224>
 80174c8:	4b3a      	ldr	r3, [pc, #232]	; (80175b4 <dhcp_parse_reply+0x2fc>)
 80174ca:	f240 622e 	movw	r2, #1582	; 0x62e
 80174ce:	493a      	ldr	r1, [pc, #232]	; (80175b8 <dhcp_parse_reply+0x300>)
 80174d0:	483a      	ldr	r0, [pc, #232]	; (80175bc <dhcp_parse_reply+0x304>)
 80174d2:	f003 ffd5 	bl	801b480 <iprintf>
 80174d6:	f06f 0305 	mvn.w	r3, #5
 80174da:	e1bb      	b.n	8017854 <dhcp_parse_reply+0x59c>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 80174dc:	2306      	movs	r3, #6
 80174de:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80174e0:	e09a      	b.n	8017618 <dhcp_parse_reply+0x360>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 80174e2:	2304      	movs	r3, #4
 80174e4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 80174e8:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80174ec:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80174f0:	429a      	cmp	r2, r3
 80174f2:	d209      	bcs.n	8017508 <dhcp_parse_reply+0x250>
 80174f4:	4b2f      	ldr	r3, [pc, #188]	; (80175b4 <dhcp_parse_reply+0x2fc>)
 80174f6:	f240 6233 	movw	r2, #1587	; 0x633
 80174fa:	4931      	ldr	r1, [pc, #196]	; (80175c0 <dhcp_parse_reply+0x308>)
 80174fc:	482f      	ldr	r0, [pc, #188]	; (80175bc <dhcp_parse_reply+0x304>)
 80174fe:	f003 ffbf 	bl	801b480 <iprintf>
 8017502:	f06f 0305 	mvn.w	r3, #5
 8017506:	e1a5      	b.n	8017854 <dhcp_parse_reply+0x59c>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8017508:	2307      	movs	r3, #7
 801750a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801750c:	e084      	b.n	8017618 <dhcp_parse_reply+0x360>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801750e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8017512:	2b04      	cmp	r3, #4
 8017514:	d009      	beq.n	801752a <dhcp_parse_reply+0x272>
 8017516:	4b27      	ldr	r3, [pc, #156]	; (80175b4 <dhcp_parse_reply+0x2fc>)
 8017518:	f240 6241 	movw	r2, #1601	; 0x641
 801751c:	4926      	ldr	r1, [pc, #152]	; (80175b8 <dhcp_parse_reply+0x300>)
 801751e:	4827      	ldr	r0, [pc, #156]	; (80175bc <dhcp_parse_reply+0x304>)
 8017520:	f003 ffae 	bl	801b480 <iprintf>
 8017524:	f06f 0305 	mvn.w	r3, #5
 8017528:	e194      	b.n	8017854 <dhcp_parse_reply+0x59c>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 801752a:	2303      	movs	r3, #3
 801752c:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801752e:	e073      	b.n	8017618 <dhcp_parse_reply+0x360>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8017530:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8017534:	2b01      	cmp	r3, #1
 8017536:	d009      	beq.n	801754c <dhcp_parse_reply+0x294>
 8017538:	4b1e      	ldr	r3, [pc, #120]	; (80175b4 <dhcp_parse_reply+0x2fc>)
 801753a:	f240 624f 	movw	r2, #1615	; 0x64f
 801753e:	4921      	ldr	r1, [pc, #132]	; (80175c4 <dhcp_parse_reply+0x30c>)
 8017540:	481e      	ldr	r0, [pc, #120]	; (80175bc <dhcp_parse_reply+0x304>)
 8017542:	f003 ff9d 	bl	801b480 <iprintf>
 8017546:	f06f 0305 	mvn.w	r3, #5
 801754a:	e183      	b.n	8017854 <dhcp_parse_reply+0x59c>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 801754c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801754e:	2bf0      	cmp	r3, #240	; 0xf0
 8017550:	d009      	beq.n	8017566 <dhcp_parse_reply+0x2ae>
 8017552:	4b18      	ldr	r3, [pc, #96]	; (80175b4 <dhcp_parse_reply+0x2fc>)
 8017554:	f240 6251 	movw	r2, #1617	; 0x651
 8017558:	491b      	ldr	r1, [pc, #108]	; (80175c8 <dhcp_parse_reply+0x310>)
 801755a:	4818      	ldr	r0, [pc, #96]	; (80175bc <dhcp_parse_reply+0x304>)
 801755c:	f003 ff90 	bl	801b480 <iprintf>
 8017560:	f06f 0305 	mvn.w	r3, #5
 8017564:	e176      	b.n	8017854 <dhcp_parse_reply+0x59c>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 8017566:	2300      	movs	r3, #0
 8017568:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801756a:	e055      	b.n	8017618 <dhcp_parse_reply+0x360>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 801756c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8017570:	2b01      	cmp	r3, #1
 8017572:	d009      	beq.n	8017588 <dhcp_parse_reply+0x2d0>
 8017574:	4b0f      	ldr	r3, [pc, #60]	; (80175b4 <dhcp_parse_reply+0x2fc>)
 8017576:	f240 6255 	movw	r2, #1621	; 0x655
 801757a:	4912      	ldr	r1, [pc, #72]	; (80175c4 <dhcp_parse_reply+0x30c>)
 801757c:	480f      	ldr	r0, [pc, #60]	; (80175bc <dhcp_parse_reply+0x304>)
 801757e:	f003 ff7f 	bl	801b480 <iprintf>
 8017582:	f06f 0305 	mvn.w	r3, #5
 8017586:	e165      	b.n	8017854 <dhcp_parse_reply+0x59c>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 8017588:	2301      	movs	r3, #1
 801758a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801758c:	e044      	b.n	8017618 <dhcp_parse_reply+0x360>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801758e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8017592:	2b04      	cmp	r3, #4
 8017594:	d009      	beq.n	80175aa <dhcp_parse_reply+0x2f2>
 8017596:	4b07      	ldr	r3, [pc, #28]	; (80175b4 <dhcp_parse_reply+0x2fc>)
 8017598:	f240 6259 	movw	r2, #1625	; 0x659
 801759c:	4906      	ldr	r1, [pc, #24]	; (80175b8 <dhcp_parse_reply+0x300>)
 801759e:	4807      	ldr	r0, [pc, #28]	; (80175bc <dhcp_parse_reply+0x304>)
 80175a0:	f003 ff6e 	bl	801b480 <iprintf>
 80175a4:	f06f 0305 	mvn.w	r3, #5
 80175a8:	e154      	b.n	8017854 <dhcp_parse_reply+0x59c>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 80175aa:	2302      	movs	r3, #2
 80175ac:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80175ae:	e033      	b.n	8017618 <dhcp_parse_reply+0x360>
 80175b0:	20013bf8 	.word	0x20013bf8
 80175b4:	080206b8 	.word	0x080206b8
 80175b8:	08020940 	.word	0x08020940
 80175bc:	08020718 	.word	0x08020718
 80175c0:	0802094c 	.word	0x0802094c
 80175c4:	08020960 	.word	0x08020960
 80175c8:	0802096c 	.word	0x0802096c
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80175cc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80175d0:	2b04      	cmp	r3, #4
 80175d2:	d009      	beq.n	80175e8 <dhcp_parse_reply+0x330>
 80175d4:	4ba1      	ldr	r3, [pc, #644]	; (801785c <dhcp_parse_reply+0x5a4>)
 80175d6:	f240 625d 	movw	r2, #1629	; 0x65d
 80175da:	49a1      	ldr	r1, [pc, #644]	; (8017860 <dhcp_parse_reply+0x5a8>)
 80175dc:	48a1      	ldr	r0, [pc, #644]	; (8017864 <dhcp_parse_reply+0x5ac>)
 80175de:	f003 ff4f 	bl	801b480 <iprintf>
 80175e2:	f06f 0305 	mvn.w	r3, #5
 80175e6:	e135      	b.n	8017854 <dhcp_parse_reply+0x59c>
        decode_idx = DHCP_OPTION_IDX_T1;
 80175e8:	2304      	movs	r3, #4
 80175ea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80175ec:	e014      	b.n	8017618 <dhcp_parse_reply+0x360>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80175ee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80175f2:	2b04      	cmp	r3, #4
 80175f4:	d009      	beq.n	801760a <dhcp_parse_reply+0x352>
 80175f6:	4b99      	ldr	r3, [pc, #612]	; (801785c <dhcp_parse_reply+0x5a4>)
 80175f8:	f240 6261 	movw	r2, #1633	; 0x661
 80175fc:	4998      	ldr	r1, [pc, #608]	; (8017860 <dhcp_parse_reply+0x5a8>)
 80175fe:	4899      	ldr	r0, [pc, #612]	; (8017864 <dhcp_parse_reply+0x5ac>)
 8017600:	f003 ff3e 	bl	801b480 <iprintf>
 8017604:	f06f 0305 	mvn.w	r3, #5
 8017608:	e124      	b.n	8017854 <dhcp_parse_reply+0x59c>
        decode_idx = DHCP_OPTION_IDX_T2;
 801760a:	2305      	movs	r3, #5
 801760c:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801760e:	e003      	b.n	8017618 <dhcp_parse_reply+0x360>
      default:
        decode_len = 0;
 8017610:	2300      	movs	r3, #0
 8017612:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 8017616:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 8017618:	7efb      	ldrb	r3, [r7, #27]
 801761a:	2b00      	cmp	r3, #0
 801761c:	d105      	bne.n	801762a <dhcp_parse_reply+0x372>
      offset++;
 801761e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8017622:	3301      	adds	r3, #1
 8017624:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8017628:	e0a4      	b.n	8017774 <dhcp_parse_reply+0x4bc>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 801762a:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801762e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8017632:	4413      	add	r3, r2
 8017634:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8017638:	4293      	cmp	r3, r2
 801763a:	dd02      	ble.n	8017642 <dhcp_parse_reply+0x38a>
        /* overflow */
        return ERR_BUF;
 801763c:	f06f 0301 	mvn.w	r3, #1
 8017640:	e108      	b.n	8017854 <dhcp_parse_reply+0x59c>
      }
      offset = (u16_t)(offset + len + 2);
 8017642:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8017646:	b29a      	uxth	r2, r3
 8017648:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801764c:	4413      	add	r3, r2
 801764e:	b29b      	uxth	r3, r3
 8017650:	3302      	adds	r3, #2
 8017652:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      if (decode_len > 0) {
 8017656:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 801765a:	2b00      	cmp	r3, #0
 801765c:	f000 808a 	beq.w	8017774 <dhcp_parse_reply+0x4bc>
        u32_t value = 0;
 8017660:	2300      	movs	r3, #0
 8017662:	60fb      	str	r3, [r7, #12]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8017664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017666:	2b00      	cmp	r3, #0
 8017668:	db02      	blt.n	8017670 <dhcp_parse_reply+0x3b8>
 801766a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801766c:	2b07      	cmp	r3, #7
 801766e:	dd06      	ble.n	801767e <dhcp_parse_reply+0x3c6>
 8017670:	4b7a      	ldr	r3, [pc, #488]	; (801785c <dhcp_parse_reply+0x5a4>)
 8017672:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 8017676:	497c      	ldr	r1, [pc, #496]	; (8017868 <dhcp_parse_reply+0x5b0>)
 8017678:	487a      	ldr	r0, [pc, #488]	; (8017864 <dhcp_parse_reply+0x5ac>)
 801767a:	f003 ff01 	bl	801b480 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 801767e:	4a7b      	ldr	r2, [pc, #492]	; (801786c <dhcp_parse_reply+0x5b4>)
 8017680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017682:	4413      	add	r3, r2
 8017684:	781b      	ldrb	r3, [r3, #0]
 8017686:	2b00      	cmp	r3, #0
 8017688:	d174      	bne.n	8017774 <dhcp_parse_reply+0x4bc>
          copy_len = LWIP_MIN(decode_len, 4);
 801768a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 801768e:	2b04      	cmp	r3, #4
 8017690:	bf28      	it	cs
 8017692:	2304      	movcs	r3, #4
 8017694:	b2db      	uxtb	r3, r3
 8017696:	833b      	strh	r3, [r7, #24]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8017698:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801769a:	8b3a      	ldrh	r2, [r7, #24]
 801769c:	f107 010c 	add.w	r1, r7, #12
 80176a0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80176a2:	f7f8 f937 	bl	800f914 <pbuf_copy_partial>
 80176a6:	4603      	mov	r3, r0
 80176a8:	461a      	mov	r2, r3
 80176aa:	8b3b      	ldrh	r3, [r7, #24]
 80176ac:	4293      	cmp	r3, r2
 80176ae:	d002      	beq.n	80176b6 <dhcp_parse_reply+0x3fe>
            return ERR_BUF;
 80176b0:	f06f 0301 	mvn.w	r3, #1
 80176b4:	e0ce      	b.n	8017854 <dhcp_parse_reply+0x59c>
          }
          if (decode_len > 4) {
 80176b6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80176ba:	2b04      	cmp	r3, #4
 80176bc:	d933      	bls.n	8017726 <dhcp_parse_reply+0x46e>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 80176be:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80176c2:	f003 0303 	and.w	r3, r3, #3
 80176c6:	b2db      	uxtb	r3, r3
 80176c8:	2b00      	cmp	r3, #0
 80176ca:	d009      	beq.n	80176e0 <dhcp_parse_reply+0x428>
 80176cc:	4b63      	ldr	r3, [pc, #396]	; (801785c <dhcp_parse_reply+0x5a4>)
 80176ce:	f240 6281 	movw	r2, #1665	; 0x681
 80176d2:	4967      	ldr	r1, [pc, #412]	; (8017870 <dhcp_parse_reply+0x5b8>)
 80176d4:	4863      	ldr	r0, [pc, #396]	; (8017864 <dhcp_parse_reply+0x5ac>)
 80176d6:	f003 fed3 	bl	801b480 <iprintf>
 80176da:	f06f 0305 	mvn.w	r3, #5
 80176de:	e0b9      	b.n	8017854 <dhcp_parse_reply+0x59c>
            dhcp_got_option(dhcp, decode_idx);
 80176e0:	4a62      	ldr	r2, [pc, #392]	; (801786c <dhcp_parse_reply+0x5b4>)
 80176e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80176e4:	4413      	add	r3, r2
 80176e6:	2201      	movs	r2, #1
 80176e8:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 80176ea:	68fb      	ldr	r3, [r7, #12]
 80176ec:	4618      	mov	r0, r3
 80176ee:	f7f6 f9fe 	bl	800daee <lwip_htonl>
 80176f2:	4602      	mov	r2, r0
 80176f4:	495f      	ldr	r1, [pc, #380]	; (8017874 <dhcp_parse_reply+0x5bc>)
 80176f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80176f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 80176fc:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8017700:	3b04      	subs	r3, #4
 8017702:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
            next_val_offset = (u16_t)(val_offset + 4);
 8017706:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017708:	3304      	adds	r3, #4
 801770a:	82fb      	strh	r3, [r7, #22]
            if (next_val_offset < val_offset) {
 801770c:	8afa      	ldrh	r2, [r7, #22]
 801770e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017710:	429a      	cmp	r2, r3
 8017712:	d202      	bcs.n	801771a <dhcp_parse_reply+0x462>
              /* overflow */
              return ERR_BUF;
 8017714:	f06f 0301 	mvn.w	r3, #1
 8017718:	e09c      	b.n	8017854 <dhcp_parse_reply+0x59c>
            }
            val_offset = next_val_offset;
 801771a:	8afb      	ldrh	r3, [r7, #22]
 801771c:	847b      	strh	r3, [r7, #34]	; 0x22
            decode_idx++;
 801771e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017720:	3301      	adds	r3, #1
 8017722:	627b      	str	r3, [r7, #36]	; 0x24
            goto decode_next;
 8017724:	e79e      	b.n	8017664 <dhcp_parse_reply+0x3ac>
          } else if (decode_len == 4) {
 8017726:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 801772a:	2b04      	cmp	r3, #4
 801772c:	d106      	bne.n	801773c <dhcp_parse_reply+0x484>
            value = lwip_ntohl(value);
 801772e:	68fb      	ldr	r3, [r7, #12]
 8017730:	4618      	mov	r0, r3
 8017732:	f7f6 f9dc 	bl	800daee <lwip_htonl>
 8017736:	4603      	mov	r3, r0
 8017738:	60fb      	str	r3, [r7, #12]
 801773a:	e011      	b.n	8017760 <dhcp_parse_reply+0x4a8>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 801773c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8017740:	2b01      	cmp	r3, #1
 8017742:	d009      	beq.n	8017758 <dhcp_parse_reply+0x4a0>
 8017744:	4b45      	ldr	r3, [pc, #276]	; (801785c <dhcp_parse_reply+0x5a4>)
 8017746:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 801774a:	494b      	ldr	r1, [pc, #300]	; (8017878 <dhcp_parse_reply+0x5c0>)
 801774c:	4845      	ldr	r0, [pc, #276]	; (8017864 <dhcp_parse_reply+0x5ac>)
 801774e:	f003 fe97 	bl	801b480 <iprintf>
 8017752:	f06f 0305 	mvn.w	r3, #5
 8017756:	e07d      	b.n	8017854 <dhcp_parse_reply+0x59c>
            value = ((u8_t *)&value)[0];
 8017758:	f107 030c 	add.w	r3, r7, #12
 801775c:	781b      	ldrb	r3, [r3, #0]
 801775e:	60fb      	str	r3, [r7, #12]
          }
          dhcp_got_option(dhcp, decode_idx);
 8017760:	4a42      	ldr	r2, [pc, #264]	; (801786c <dhcp_parse_reply+0x5b4>)
 8017762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017764:	4413      	add	r3, r2
 8017766:	2201      	movs	r2, #1
 8017768:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 801776a:	68fa      	ldr	r2, [r7, #12]
 801776c:	4941      	ldr	r1, [pc, #260]	; (8017874 <dhcp_parse_reply+0x5bc>)
 801776e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017770:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 8017774:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017776:	895b      	ldrh	r3, [r3, #10]
 8017778:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801777c:	429a      	cmp	r2, r3
 801777e:	d327      	bcc.n	80177d0 <dhcp_parse_reply+0x518>
      offset = (u16_t)(offset - q->len);
 8017780:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017782:	895b      	ldrh	r3, [r3, #10]
 8017784:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8017788:	1ad3      	subs	r3, r2, r3
 801778a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      offset_max = (u16_t)(offset_max - q->len);
 801778e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017790:	895b      	ldrh	r3, [r3, #10]
 8017792:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8017794:	1ad3      	subs	r3, r2, r3
 8017796:	87fb      	strh	r3, [r7, #62]	; 0x3e
      if (offset < offset_max) {
 8017798:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801779c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801779e:	429a      	cmp	r2, r3
 80177a0:	d213      	bcs.n	80177ca <dhcp_parse_reply+0x512>
        q = q->next;
 80177a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80177a4:	681b      	ldr	r3, [r3, #0]
 80177a6:	637b      	str	r3, [r7, #52]	; 0x34
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 80177a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80177aa:	2b00      	cmp	r3, #0
 80177ac:	d109      	bne.n	80177c2 <dhcp_parse_reply+0x50a>
 80177ae:	4b2b      	ldr	r3, [pc, #172]	; (801785c <dhcp_parse_reply+0x5a4>)
 80177b0:	f240 629d 	movw	r2, #1693	; 0x69d
 80177b4:	4931      	ldr	r1, [pc, #196]	; (801787c <dhcp_parse_reply+0x5c4>)
 80177b6:	482b      	ldr	r0, [pc, #172]	; (8017864 <dhcp_parse_reply+0x5ac>)
 80177b8:	f003 fe62 	bl	801b480 <iprintf>
 80177bc:	f06f 0305 	mvn.w	r3, #5
 80177c0:	e048      	b.n	8017854 <dhcp_parse_reply+0x59c>
        options = (u8_t *)q->payload;
 80177c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80177c4:	685b      	ldr	r3, [r3, #4]
 80177c6:	643b      	str	r3, [r7, #64]	; 0x40
 80177c8:	e002      	b.n	80177d0 <dhcp_parse_reply+0x518>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 80177ca:	f06f 0301 	mvn.w	r3, #1
 80177ce:	e041      	b.n	8017854 <dhcp_parse_reply+0x59c>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 80177d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80177d2:	2b00      	cmp	r3, #0
 80177d4:	d00c      	beq.n	80177f0 <dhcp_parse_reply+0x538>
 80177d6:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80177da:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80177dc:	429a      	cmp	r2, r3
 80177de:	d207      	bcs.n	80177f0 <dhcp_parse_reply+0x538>
 80177e0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80177e4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80177e6:	4413      	add	r3, r2
 80177e8:	781b      	ldrb	r3, [r3, #0]
 80177ea:	2bff      	cmp	r3, #255	; 0xff
 80177ec:	f47f ada8 	bne.w	8017340 <dhcp_parse_reply+0x88>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 80177f0:	4b1e      	ldr	r3, [pc, #120]	; (801786c <dhcp_parse_reply+0x5b4>)
 80177f2:	781b      	ldrb	r3, [r3, #0]
 80177f4:	2b00      	cmp	r3, #0
 80177f6:	d018      	beq.n	801782a <dhcp_parse_reply+0x572>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 80177f8:	4b1e      	ldr	r3, [pc, #120]	; (8017874 <dhcp_parse_reply+0x5bc>)
 80177fa:	681b      	ldr	r3, [r3, #0]
 80177fc:	613b      	str	r3, [r7, #16]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 80177fe:	4b1b      	ldr	r3, [pc, #108]	; (801786c <dhcp_parse_reply+0x5b4>)
 8017800:	2200      	movs	r2, #0
 8017802:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8017804:	693b      	ldr	r3, [r7, #16]
 8017806:	2b01      	cmp	r3, #1
 8017808:	d102      	bne.n	8017810 <dhcp_parse_reply+0x558>
      parse_file_as_options = 1;
 801780a:	2301      	movs	r3, #1
 801780c:	633b      	str	r3, [r7, #48]	; 0x30
 801780e:	e00c      	b.n	801782a <dhcp_parse_reply+0x572>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 8017810:	693b      	ldr	r3, [r7, #16]
 8017812:	2b02      	cmp	r3, #2
 8017814:	d102      	bne.n	801781c <dhcp_parse_reply+0x564>
      parse_sname_as_options = 1;
 8017816:	2301      	movs	r3, #1
 8017818:	62fb      	str	r3, [r7, #44]	; 0x2c
 801781a:	e006      	b.n	801782a <dhcp_parse_reply+0x572>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 801781c:	693b      	ldr	r3, [r7, #16]
 801781e:	2b03      	cmp	r3, #3
 8017820:	d103      	bne.n	801782a <dhcp_parse_reply+0x572>
      parse_sname_as_options = 1;
 8017822:	2301      	movs	r3, #1
 8017824:	62fb      	str	r3, [r7, #44]	; 0x2c
      parse_file_as_options = 1;
 8017826:	2301      	movs	r3, #1
 8017828:	633b      	str	r3, [r7, #48]	; 0x30
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 801782a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801782c:	2b00      	cmp	r3, #0
 801782e:	d006      	beq.n	801783e <dhcp_parse_reply+0x586>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 8017830:	2300      	movs	r3, #0
 8017832:	633b      	str	r3, [r7, #48]	; 0x30
    options_idx = DHCP_FILE_OFS;
 8017834:	236c      	movs	r3, #108	; 0x6c
 8017836:	87bb      	strh	r3, [r7, #60]	; 0x3c
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 8017838:	23ec      	movs	r3, #236	; 0xec
 801783a:	877b      	strh	r3, [r7, #58]	; 0x3a
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 801783c:	e559      	b.n	80172f2 <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 801783e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017840:	2b00      	cmp	r3, #0
 8017842:	d006      	beq.n	8017852 <dhcp_parse_reply+0x59a>
    parse_sname_as_options = 0;
 8017844:	2300      	movs	r3, #0
 8017846:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_SNAME_OFS;
 8017848:	232c      	movs	r3, #44	; 0x2c
 801784a:	87bb      	strh	r3, [r7, #60]	; 0x3c
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 801784c:	236c      	movs	r3, #108	; 0x6c
 801784e:	877b      	strh	r3, [r7, #58]	; 0x3a
    goto again;
 8017850:	e54f      	b.n	80172f2 <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 8017852:	2300      	movs	r3, #0
}
 8017854:	4618      	mov	r0, r3
 8017856:	3748      	adds	r7, #72	; 0x48
 8017858:	46bd      	mov	sp, r7
 801785a:	bd80      	pop	{r7, pc}
 801785c:	080206b8 	.word	0x080206b8
 8017860:	08020940 	.word	0x08020940
 8017864:	08020718 	.word	0x08020718
 8017868:	08020984 	.word	0x08020984
 801786c:	20013bf8 	.word	0x20013bf8
 8017870:	08020998 	.word	0x08020998
 8017874:	20013bd8 	.word	0x20013bd8
 8017878:	080209b0 	.word	0x080209b0
 801787c:	080209c4 	.word	0x080209c4

08017880 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8017880:	b580      	push	{r7, lr}
 8017882:	b08a      	sub	sp, #40	; 0x28
 8017884:	af00      	add	r7, sp, #0
 8017886:	60f8      	str	r0, [r7, #12]
 8017888:	60b9      	str	r1, [r7, #8]
 801788a:	607a      	str	r2, [r7, #4]
 801788c:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 801788e:	4b5e      	ldr	r3, [pc, #376]	; (8017a08 <dhcp_recv+0x188>)
 8017890:	685b      	ldr	r3, [r3, #4]
 8017892:	61fb      	str	r3, [r7, #28]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8017894:	69fb      	ldr	r3, [r7, #28]
 8017896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017898:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 801789a:	687b      	ldr	r3, [r7, #4]
 801789c:	685b      	ldr	r3, [r3, #4]
 801789e:	617b      	str	r3, [r7, #20]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 80178a0:	69bb      	ldr	r3, [r7, #24]
 80178a2:	2b00      	cmp	r3, #0
 80178a4:	f000 809a 	beq.w	80179dc <dhcp_recv+0x15c>
 80178a8:	69bb      	ldr	r3, [r7, #24]
 80178aa:	791b      	ldrb	r3, [r3, #4]
 80178ac:	2b00      	cmp	r3, #0
 80178ae:	f000 8095 	beq.w	80179dc <dhcp_recv+0x15c>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 80178b2:	687b      	ldr	r3, [r7, #4]
 80178b4:	895b      	ldrh	r3, [r3, #10]
 80178b6:	2b2b      	cmp	r3, #43	; 0x2b
 80178b8:	f240 8092 	bls.w	80179e0 <dhcp_recv+0x160>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 80178bc:	697b      	ldr	r3, [r7, #20]
 80178be:	781b      	ldrb	r3, [r3, #0]
 80178c0:	2b02      	cmp	r3, #2
 80178c2:	f040 808f 	bne.w	80179e4 <dhcp_recv+0x164>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80178c6:	2300      	movs	r3, #0
 80178c8:	74fb      	strb	r3, [r7, #19]
 80178ca:	e00e      	b.n	80178ea <dhcp_recv+0x6a>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 80178cc:	7cfb      	ldrb	r3, [r7, #19]
 80178ce:	69fa      	ldr	r2, [r7, #28]
 80178d0:	4413      	add	r3, r2
 80178d2:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 80178d6:	7cfb      	ldrb	r3, [r7, #19]
 80178d8:	6979      	ldr	r1, [r7, #20]
 80178da:	440b      	add	r3, r1
 80178dc:	7f1b      	ldrb	r3, [r3, #28]
 80178de:	429a      	cmp	r2, r3
 80178e0:	f040 8082 	bne.w	80179e8 <dhcp_recv+0x168>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80178e4:	7cfb      	ldrb	r3, [r7, #19]
 80178e6:	3301      	adds	r3, #1
 80178e8:	74fb      	strb	r3, [r7, #19]
 80178ea:	69fb      	ldr	r3, [r7, #28]
 80178ec:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80178f0:	7cfa      	ldrb	r2, [r7, #19]
 80178f2:	429a      	cmp	r2, r3
 80178f4:	d202      	bcs.n	80178fc <dhcp_recv+0x7c>
 80178f6:	7cfb      	ldrb	r3, [r7, #19]
 80178f8:	2b05      	cmp	r3, #5
 80178fa:	d9e7      	bls.n	80178cc <dhcp_recv+0x4c>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 80178fc:	697b      	ldr	r3, [r7, #20]
 80178fe:	685b      	ldr	r3, [r3, #4]
 8017900:	4618      	mov	r0, r3
 8017902:	f7f6 f8f4 	bl	800daee <lwip_htonl>
 8017906:	4602      	mov	r2, r0
 8017908:	69bb      	ldr	r3, [r7, #24]
 801790a:	681b      	ldr	r3, [r3, #0]
 801790c:	429a      	cmp	r2, r3
 801790e:	d16d      	bne.n	80179ec <dhcp_recv+0x16c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 8017910:	69b9      	ldr	r1, [r7, #24]
 8017912:	6878      	ldr	r0, [r7, #4]
 8017914:	f7ff fcd0 	bl	80172b8 <dhcp_parse_reply>
 8017918:	4603      	mov	r3, r0
 801791a:	2b00      	cmp	r3, #0
 801791c:	d168      	bne.n	80179f0 <dhcp_recv+0x170>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 801791e:	4b3b      	ldr	r3, [pc, #236]	; (8017a0c <dhcp_recv+0x18c>)
 8017920:	785b      	ldrb	r3, [r3, #1]
 8017922:	2b00      	cmp	r3, #0
 8017924:	d066      	beq.n	80179f4 <dhcp_recv+0x174>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 8017926:	687b      	ldr	r3, [r7, #4]
 8017928:	685b      	ldr	r3, [r3, #4]
 801792a:	627b      	str	r3, [r7, #36]	; 0x24
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 801792c:	4b38      	ldr	r3, [pc, #224]	; (8017a10 <dhcp_recv+0x190>)
 801792e:	685b      	ldr	r3, [r3, #4]
 8017930:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 8017934:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8017938:	2b05      	cmp	r3, #5
 801793a:	d12a      	bne.n	8017992 <dhcp_recv+0x112>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 801793c:	69bb      	ldr	r3, [r7, #24]
 801793e:	795b      	ldrb	r3, [r3, #5]
 8017940:	2b01      	cmp	r3, #1
 8017942:	d112      	bne.n	801796a <dhcp_recv+0xea>
      dhcp_handle_ack(netif, msg_in);
 8017944:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017946:	69f8      	ldr	r0, [r7, #28]
 8017948:	f7fe fe00 	bl	801654c <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 801794c:	69fb      	ldr	r3, [r7, #28]
 801794e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8017952:	f003 0308 	and.w	r3, r3, #8
 8017956:	2b00      	cmp	r3, #0
 8017958:	d003      	beq.n	8017962 <dhcp_recv+0xe2>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 801795a:	69f8      	ldr	r0, [r7, #28]
 801795c:	f7fe fb70 	bl	8016040 <dhcp_check>
 8017960:	e04b      	b.n	80179fa <dhcp_recv+0x17a>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 8017962:	69f8      	ldr	r0, [r7, #28]
 8017964:	f7ff f850 	bl	8016a08 <dhcp_bind>
 8017968:	e047      	b.n	80179fa <dhcp_recv+0x17a>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 801796a:	69bb      	ldr	r3, [r7, #24]
 801796c:	795b      	ldrb	r3, [r3, #5]
 801796e:	2b03      	cmp	r3, #3
 8017970:	d007      	beq.n	8017982 <dhcp_recv+0x102>
 8017972:	69bb      	ldr	r3, [r7, #24]
 8017974:	795b      	ldrb	r3, [r3, #5]
 8017976:	2b04      	cmp	r3, #4
 8017978:	d003      	beq.n	8017982 <dhcp_recv+0x102>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 801797a:	69bb      	ldr	r3, [r7, #24]
 801797c:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 801797e:	2b05      	cmp	r3, #5
 8017980:	d13b      	bne.n	80179fa <dhcp_recv+0x17a>
      dhcp_handle_ack(netif, msg_in);
 8017982:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017984:	69f8      	ldr	r0, [r7, #28]
 8017986:	f7fe fde1 	bl	801654c <dhcp_handle_ack>
      dhcp_bind(netif);
 801798a:	69f8      	ldr	r0, [r7, #28]
 801798c:	f7ff f83c 	bl	8016a08 <dhcp_bind>
 8017990:	e033      	b.n	80179fa <dhcp_recv+0x17a>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 8017992:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8017996:	2b06      	cmp	r3, #6
 8017998:	d113      	bne.n	80179c2 <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801799a:	69bb      	ldr	r3, [r7, #24]
 801799c:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 801799e:	2b03      	cmp	r3, #3
 80179a0:	d00b      	beq.n	80179ba <dhcp_recv+0x13a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80179a2:	69bb      	ldr	r3, [r7, #24]
 80179a4:	795b      	ldrb	r3, [r3, #5]
 80179a6:	2b01      	cmp	r3, #1
 80179a8:	d007      	beq.n	80179ba <dhcp_recv+0x13a>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 80179aa:	69bb      	ldr	r3, [r7, #24]
 80179ac:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80179ae:	2b04      	cmp	r3, #4
 80179b0:	d003      	beq.n	80179ba <dhcp_recv+0x13a>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 80179b2:	69bb      	ldr	r3, [r7, #24]
 80179b4:	795b      	ldrb	r3, [r3, #5]
 80179b6:	2b05      	cmp	r3, #5
 80179b8:	d103      	bne.n	80179c2 <dhcp_recv+0x142>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 80179ba:	69f8      	ldr	r0, [r7, #28]
 80179bc:	f7fe fb26 	bl	801600c <dhcp_handle_nak>
 80179c0:	e01b      	b.n	80179fa <dhcp_recv+0x17a>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 80179c2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80179c6:	2b02      	cmp	r3, #2
 80179c8:	d116      	bne.n	80179f8 <dhcp_recv+0x178>
 80179ca:	69bb      	ldr	r3, [r7, #24]
 80179cc:	795b      	ldrb	r3, [r3, #5]
 80179ce:	2b06      	cmp	r3, #6
 80179d0:	d112      	bne.n	80179f8 <dhcp_recv+0x178>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 80179d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80179d4:	69f8      	ldr	r0, [r7, #28]
 80179d6:	f7fe fb67 	bl	80160a8 <dhcp_handle_offer>
 80179da:	e00e      	b.n	80179fa <dhcp_recv+0x17a>
    goto free_pbuf_and_return;
 80179dc:	bf00      	nop
 80179de:	e00c      	b.n	80179fa <dhcp_recv+0x17a>
    goto free_pbuf_and_return;
 80179e0:	bf00      	nop
 80179e2:	e00a      	b.n	80179fa <dhcp_recv+0x17a>
    goto free_pbuf_and_return;
 80179e4:	bf00      	nop
 80179e6:	e008      	b.n	80179fa <dhcp_recv+0x17a>
      goto free_pbuf_and_return;
 80179e8:	bf00      	nop
 80179ea:	e006      	b.n	80179fa <dhcp_recv+0x17a>
    goto free_pbuf_and_return;
 80179ec:	bf00      	nop
 80179ee:	e004      	b.n	80179fa <dhcp_recv+0x17a>
    goto free_pbuf_and_return;
 80179f0:	bf00      	nop
 80179f2:	e002      	b.n	80179fa <dhcp_recv+0x17a>
    goto free_pbuf_and_return;
 80179f4:	bf00      	nop
 80179f6:	e000      	b.n	80179fa <dhcp_recv+0x17a>
  }

free_pbuf_and_return:
 80179f8:	bf00      	nop
  pbuf_free(p);
 80179fa:	6878      	ldr	r0, [r7, #4]
 80179fc:	f7f7 fd84 	bl	800f508 <pbuf_free>
}
 8017a00:	bf00      	nop
 8017a02:	3728      	adds	r7, #40	; 0x28
 8017a04:	46bd      	mov	sp, r7
 8017a06:	bd80      	pop	{r7, pc}
 8017a08:	2000a100 	.word	0x2000a100
 8017a0c:	20013bf8 	.word	0x20013bf8
 8017a10:	20013bd8 	.word	0x20013bd8

08017a14 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 8017a14:	b580      	push	{r7, lr}
 8017a16:	b088      	sub	sp, #32
 8017a18:	af00      	add	r7, sp, #0
 8017a1a:	60f8      	str	r0, [r7, #12]
 8017a1c:	60b9      	str	r1, [r7, #8]
 8017a1e:	603b      	str	r3, [r7, #0]
 8017a20:	4613      	mov	r3, r2
 8017a22:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 8017a24:	68fb      	ldr	r3, [r7, #12]
 8017a26:	2b00      	cmp	r3, #0
 8017a28:	d108      	bne.n	8017a3c <dhcp_create_msg+0x28>
 8017a2a:	4b5f      	ldr	r3, [pc, #380]	; (8017ba8 <dhcp_create_msg+0x194>)
 8017a2c:	f240 7269 	movw	r2, #1897	; 0x769
 8017a30:	495e      	ldr	r1, [pc, #376]	; (8017bac <dhcp_create_msg+0x198>)
 8017a32:	485f      	ldr	r0, [pc, #380]	; (8017bb0 <dhcp_create_msg+0x19c>)
 8017a34:	f003 fd24 	bl	801b480 <iprintf>
 8017a38:	2300      	movs	r3, #0
 8017a3a:	e0b1      	b.n	8017ba0 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 8017a3c:	68bb      	ldr	r3, [r7, #8]
 8017a3e:	2b00      	cmp	r3, #0
 8017a40:	d108      	bne.n	8017a54 <dhcp_create_msg+0x40>
 8017a42:	4b59      	ldr	r3, [pc, #356]	; (8017ba8 <dhcp_create_msg+0x194>)
 8017a44:	f240 726a 	movw	r2, #1898	; 0x76a
 8017a48:	495a      	ldr	r1, [pc, #360]	; (8017bb4 <dhcp_create_msg+0x1a0>)
 8017a4a:	4859      	ldr	r0, [pc, #356]	; (8017bb0 <dhcp_create_msg+0x19c>)
 8017a4c:	f003 fd18 	bl	801b480 <iprintf>
 8017a50:	2300      	movs	r3, #0
 8017a52:	e0a5      	b.n	8017ba0 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8017a54:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017a58:	f44f 719a 	mov.w	r1, #308	; 0x134
 8017a5c:	2036      	movs	r0, #54	; 0x36
 8017a5e:	f7f7 fa6b 	bl	800ef38 <pbuf_alloc>
 8017a62:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 8017a64:	69bb      	ldr	r3, [r7, #24]
 8017a66:	2b00      	cmp	r3, #0
 8017a68:	d101      	bne.n	8017a6e <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 8017a6a:	2300      	movs	r3, #0
 8017a6c:	e098      	b.n	8017ba0 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 8017a6e:	69bb      	ldr	r3, [r7, #24]
 8017a70:	895b      	ldrh	r3, [r3, #10]
 8017a72:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 8017a76:	d206      	bcs.n	8017a86 <dhcp_create_msg+0x72>
 8017a78:	4b4b      	ldr	r3, [pc, #300]	; (8017ba8 <dhcp_create_msg+0x194>)
 8017a7a:	f240 7271 	movw	r2, #1905	; 0x771
 8017a7e:	494e      	ldr	r1, [pc, #312]	; (8017bb8 <dhcp_create_msg+0x1a4>)
 8017a80:	484b      	ldr	r0, [pc, #300]	; (8017bb0 <dhcp_create_msg+0x19c>)
 8017a82:	f003 fcfd 	bl	801b480 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 8017a86:	79fb      	ldrb	r3, [r7, #7]
 8017a88:	2b03      	cmp	r3, #3
 8017a8a:	d103      	bne.n	8017a94 <dhcp_create_msg+0x80>
 8017a8c:	68bb      	ldr	r3, [r7, #8]
 8017a8e:	795b      	ldrb	r3, [r3, #5]
 8017a90:	2b03      	cmp	r3, #3
 8017a92:	d10d      	bne.n	8017ab0 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 8017a94:	68bb      	ldr	r3, [r7, #8]
 8017a96:	799b      	ldrb	r3, [r3, #6]
 8017a98:	2b00      	cmp	r3, #0
 8017a9a:	d105      	bne.n	8017aa8 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 8017a9c:	f003 fd7e 	bl	801b59c <rand>
 8017aa0:	4603      	mov	r3, r0
 8017aa2:	461a      	mov	r2, r3
 8017aa4:	4b45      	ldr	r3, [pc, #276]	; (8017bbc <dhcp_create_msg+0x1a8>)
 8017aa6:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 8017aa8:	4b44      	ldr	r3, [pc, #272]	; (8017bbc <dhcp_create_msg+0x1a8>)
 8017aaa:	681a      	ldr	r2, [r3, #0]
 8017aac:	68bb      	ldr	r3, [r7, #8]
 8017aae:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 8017ab0:	69bb      	ldr	r3, [r7, #24]
 8017ab2:	685b      	ldr	r3, [r3, #4]
 8017ab4:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 8017ab6:	f44f 729a 	mov.w	r2, #308	; 0x134
 8017aba:	2100      	movs	r1, #0
 8017abc:	6978      	ldr	r0, [r7, #20]
 8017abe:	f002 ff77 	bl	801a9b0 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 8017ac2:	697b      	ldr	r3, [r7, #20]
 8017ac4:	2201      	movs	r2, #1
 8017ac6:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 8017ac8:	697b      	ldr	r3, [r7, #20]
 8017aca:	2201      	movs	r2, #1
 8017acc:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 8017ace:	68fb      	ldr	r3, [r7, #12]
 8017ad0:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8017ad4:	697b      	ldr	r3, [r7, #20]
 8017ad6:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 8017ad8:	68bb      	ldr	r3, [r7, #8]
 8017ada:	681b      	ldr	r3, [r3, #0]
 8017adc:	4618      	mov	r0, r3
 8017ade:	f7f6 f806 	bl	800daee <lwip_htonl>
 8017ae2:	4602      	mov	r2, r0
 8017ae4:	697b      	ldr	r3, [r7, #20]
 8017ae6:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8017ae8:	79fb      	ldrb	r3, [r7, #7]
 8017aea:	2b08      	cmp	r3, #8
 8017aec:	d010      	beq.n	8017b10 <dhcp_create_msg+0xfc>
 8017aee:	79fb      	ldrb	r3, [r7, #7]
 8017af0:	2b04      	cmp	r3, #4
 8017af2:	d00d      	beq.n	8017b10 <dhcp_create_msg+0xfc>
 8017af4:	79fb      	ldrb	r3, [r7, #7]
 8017af6:	2b07      	cmp	r3, #7
 8017af8:	d00a      	beq.n	8017b10 <dhcp_create_msg+0xfc>
 8017afa:	79fb      	ldrb	r3, [r7, #7]
 8017afc:	2b03      	cmp	r3, #3
 8017afe:	d10c      	bne.n	8017b1a <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8017b00:	68bb      	ldr	r3, [r7, #8]
 8017b02:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8017b04:	2b05      	cmp	r3, #5
 8017b06:	d003      	beq.n	8017b10 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8017b08:	68bb      	ldr	r3, [r7, #8]
 8017b0a:	795b      	ldrb	r3, [r3, #5]
 8017b0c:	2b04      	cmp	r3, #4
 8017b0e:	d104      	bne.n	8017b1a <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 8017b10:	68fb      	ldr	r3, [r7, #12]
 8017b12:	3304      	adds	r3, #4
 8017b14:	681a      	ldr	r2, [r3, #0]
 8017b16:	697b      	ldr	r3, [r7, #20]
 8017b18:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8017b1a:	2300      	movs	r3, #0
 8017b1c:	83fb      	strh	r3, [r7, #30]
 8017b1e:	e00c      	b.n	8017b3a <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 8017b20:	8bfa      	ldrh	r2, [r7, #30]
 8017b22:	8bfb      	ldrh	r3, [r7, #30]
 8017b24:	68f9      	ldr	r1, [r7, #12]
 8017b26:	440a      	add	r2, r1
 8017b28:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 8017b2c:	697a      	ldr	r2, [r7, #20]
 8017b2e:	4413      	add	r3, r2
 8017b30:	460a      	mov	r2, r1
 8017b32:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8017b34:	8bfb      	ldrh	r3, [r7, #30]
 8017b36:	3301      	adds	r3, #1
 8017b38:	83fb      	strh	r3, [r7, #30]
 8017b3a:	8bfb      	ldrh	r3, [r7, #30]
 8017b3c:	2b05      	cmp	r3, #5
 8017b3e:	d9ef      	bls.n	8017b20 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8017b40:	697b      	ldr	r3, [r7, #20]
 8017b42:	2200      	movs	r2, #0
 8017b44:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8017b48:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 8017b4c:	2200      	movs	r2, #0
 8017b4e:	f062 027d 	orn	r2, r2, #125	; 0x7d
 8017b52:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 8017b56:	2200      	movs	r2, #0
 8017b58:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 8017b5c:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 8017b60:	2200      	movs	r2, #0
 8017b62:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8017b66:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 8017b6a:	697b      	ldr	r3, [r7, #20]
 8017b6c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8017b70:	2301      	movs	r3, #1
 8017b72:	2235      	movs	r2, #53	; 0x35
 8017b74:	2000      	movs	r0, #0
 8017b76:	f7ff facf 	bl	8017118 <dhcp_option>
 8017b7a:	4603      	mov	r3, r0
 8017b7c:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 8017b7e:	697b      	ldr	r3, [r7, #20]
 8017b80:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8017b84:	79fa      	ldrb	r2, [r7, #7]
 8017b86:	8a7b      	ldrh	r3, [r7, #18]
 8017b88:	4618      	mov	r0, r3
 8017b8a:	f7ff faf9 	bl	8017180 <dhcp_option_byte>
 8017b8e:	4603      	mov	r3, r0
 8017b90:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 8017b92:	683b      	ldr	r3, [r7, #0]
 8017b94:	2b00      	cmp	r3, #0
 8017b96:	d002      	beq.n	8017b9e <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 8017b98:	683b      	ldr	r3, [r7, #0]
 8017b9a:	8a7a      	ldrh	r2, [r7, #18]
 8017b9c:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 8017b9e:	69bb      	ldr	r3, [r7, #24]
}
 8017ba0:	4618      	mov	r0, r3
 8017ba2:	3720      	adds	r7, #32
 8017ba4:	46bd      	mov	sp, r7
 8017ba6:	bd80      	pop	{r7, pc}
 8017ba8:	080206b8 	.word	0x080206b8
 8017bac:	080209d8 	.word	0x080209d8
 8017bb0:	08020718 	.word	0x08020718
 8017bb4:	080209f8 	.word	0x080209f8
 8017bb8:	08020a18 	.word	0x08020a18
 8017bbc:	20013c08 	.word	0x20013c08

08017bc0 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 8017bc0:	b580      	push	{r7, lr}
 8017bc2:	b084      	sub	sp, #16
 8017bc4:	af00      	add	r7, sp, #0
 8017bc6:	4603      	mov	r3, r0
 8017bc8:	60b9      	str	r1, [r7, #8]
 8017bca:	607a      	str	r2, [r7, #4]
 8017bcc:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 8017bce:	89fb      	ldrh	r3, [r7, #14]
 8017bd0:	1c5a      	adds	r2, r3, #1
 8017bd2:	81fa      	strh	r2, [r7, #14]
 8017bd4:	461a      	mov	r2, r3
 8017bd6:	68bb      	ldr	r3, [r7, #8]
 8017bd8:	4413      	add	r3, r2
 8017bda:	22ff      	movs	r2, #255	; 0xff
 8017bdc:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8017bde:	e007      	b.n	8017bf0 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 8017be0:	89fb      	ldrh	r3, [r7, #14]
 8017be2:	1c5a      	adds	r2, r3, #1
 8017be4:	81fa      	strh	r2, [r7, #14]
 8017be6:	461a      	mov	r2, r3
 8017be8:	68bb      	ldr	r3, [r7, #8]
 8017bea:	4413      	add	r3, r2
 8017bec:	2200      	movs	r2, #0
 8017bee:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8017bf0:	89fb      	ldrh	r3, [r7, #14]
 8017bf2:	2b43      	cmp	r3, #67	; 0x43
 8017bf4:	d904      	bls.n	8017c00 <dhcp_option_trailer+0x40>
 8017bf6:	89fb      	ldrh	r3, [r7, #14]
 8017bf8:	f003 0303 	and.w	r3, r3, #3
 8017bfc:	2b00      	cmp	r3, #0
 8017bfe:	d002      	beq.n	8017c06 <dhcp_option_trailer+0x46>
 8017c00:	89fb      	ldrh	r3, [r7, #14]
 8017c02:	2b43      	cmp	r3, #67	; 0x43
 8017c04:	d9ec      	bls.n	8017be0 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8017c06:	89fb      	ldrh	r3, [r7, #14]
 8017c08:	33f0      	adds	r3, #240	; 0xf0
 8017c0a:	b29b      	uxth	r3, r3
 8017c0c:	4619      	mov	r1, r3
 8017c0e:	6878      	ldr	r0, [r7, #4]
 8017c10:	f7f7 faf4 	bl	800f1fc <pbuf_realloc>
}
 8017c14:	bf00      	nop
 8017c16:	3710      	adds	r7, #16
 8017c18:	46bd      	mov	sp, r7
 8017c1a:	bd80      	pop	{r7, pc}

08017c1c <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 8017c1c:	b480      	push	{r7}
 8017c1e:	b085      	sub	sp, #20
 8017c20:	af00      	add	r7, sp, #0
 8017c22:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 8017c24:	687b      	ldr	r3, [r7, #4]
 8017c26:	2b00      	cmp	r3, #0
 8017c28:	d017      	beq.n	8017c5a <dhcp_supplied_address+0x3e>
 8017c2a:	687b      	ldr	r3, [r7, #4]
 8017c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017c2e:	2b00      	cmp	r3, #0
 8017c30:	d013      	beq.n	8017c5a <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8017c32:	687b      	ldr	r3, [r7, #4]
 8017c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017c36:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8017c38:	68fb      	ldr	r3, [r7, #12]
 8017c3a:	795b      	ldrb	r3, [r3, #5]
 8017c3c:	2b0a      	cmp	r3, #10
 8017c3e:	d007      	beq.n	8017c50 <dhcp_supplied_address+0x34>
 8017c40:	68fb      	ldr	r3, [r7, #12]
 8017c42:	795b      	ldrb	r3, [r3, #5]
 8017c44:	2b05      	cmp	r3, #5
 8017c46:	d003      	beq.n	8017c50 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 8017c48:	68fb      	ldr	r3, [r7, #12]
 8017c4a:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8017c4c:	2b04      	cmp	r3, #4
 8017c4e:	d101      	bne.n	8017c54 <dhcp_supplied_address+0x38>
 8017c50:	2301      	movs	r3, #1
 8017c52:	e000      	b.n	8017c56 <dhcp_supplied_address+0x3a>
 8017c54:	2300      	movs	r3, #0
 8017c56:	b2db      	uxtb	r3, r3
 8017c58:	e000      	b.n	8017c5c <dhcp_supplied_address+0x40>
  }
  return 0;
 8017c5a:	2300      	movs	r3, #0
}
 8017c5c:	4618      	mov	r0, r3
 8017c5e:	3714      	adds	r7, #20
 8017c60:	46bd      	mov	sp, r7
 8017c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c66:	4770      	bx	lr

08017c68 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8017c68:	b580      	push	{r7, lr}
 8017c6a:	b082      	sub	sp, #8
 8017c6c:	af00      	add	r7, sp, #0
 8017c6e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8017c70:	492b      	ldr	r1, [pc, #172]	; (8017d20 <etharp_free_entry+0xb8>)
 8017c72:	687a      	ldr	r2, [r7, #4]
 8017c74:	4613      	mov	r3, r2
 8017c76:	005b      	lsls	r3, r3, #1
 8017c78:	4413      	add	r3, r2
 8017c7a:	00db      	lsls	r3, r3, #3
 8017c7c:	440b      	add	r3, r1
 8017c7e:	681b      	ldr	r3, [r3, #0]
 8017c80:	2b00      	cmp	r3, #0
 8017c82:	d013      	beq.n	8017cac <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8017c84:	4926      	ldr	r1, [pc, #152]	; (8017d20 <etharp_free_entry+0xb8>)
 8017c86:	687a      	ldr	r2, [r7, #4]
 8017c88:	4613      	mov	r3, r2
 8017c8a:	005b      	lsls	r3, r3, #1
 8017c8c:	4413      	add	r3, r2
 8017c8e:	00db      	lsls	r3, r3, #3
 8017c90:	440b      	add	r3, r1
 8017c92:	681b      	ldr	r3, [r3, #0]
 8017c94:	4618      	mov	r0, r3
 8017c96:	f7f7 fc37 	bl	800f508 <pbuf_free>
    arp_table[i].q = NULL;
 8017c9a:	4921      	ldr	r1, [pc, #132]	; (8017d20 <etharp_free_entry+0xb8>)
 8017c9c:	687a      	ldr	r2, [r7, #4]
 8017c9e:	4613      	mov	r3, r2
 8017ca0:	005b      	lsls	r3, r3, #1
 8017ca2:	4413      	add	r3, r2
 8017ca4:	00db      	lsls	r3, r3, #3
 8017ca6:	440b      	add	r3, r1
 8017ca8:	2200      	movs	r2, #0
 8017caa:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8017cac:	491c      	ldr	r1, [pc, #112]	; (8017d20 <etharp_free_entry+0xb8>)
 8017cae:	687a      	ldr	r2, [r7, #4]
 8017cb0:	4613      	mov	r3, r2
 8017cb2:	005b      	lsls	r3, r3, #1
 8017cb4:	4413      	add	r3, r2
 8017cb6:	00db      	lsls	r3, r3, #3
 8017cb8:	440b      	add	r3, r1
 8017cba:	3314      	adds	r3, #20
 8017cbc:	2200      	movs	r2, #0
 8017cbe:	701a      	strb	r2, [r3, #0]
#ifdef LWIP_DEBUG
  /* for debugging, clean out the complete entry */
  arp_table[i].ctime = 0;
 8017cc0:	4917      	ldr	r1, [pc, #92]	; (8017d20 <etharp_free_entry+0xb8>)
 8017cc2:	687a      	ldr	r2, [r7, #4]
 8017cc4:	4613      	mov	r3, r2
 8017cc6:	005b      	lsls	r3, r3, #1
 8017cc8:	4413      	add	r3, r2
 8017cca:	00db      	lsls	r3, r3, #3
 8017ccc:	440b      	add	r3, r1
 8017cce:	3312      	adds	r3, #18
 8017cd0:	2200      	movs	r2, #0
 8017cd2:	801a      	strh	r2, [r3, #0]
  arp_table[i].netif = NULL;
 8017cd4:	4912      	ldr	r1, [pc, #72]	; (8017d20 <etharp_free_entry+0xb8>)
 8017cd6:	687a      	ldr	r2, [r7, #4]
 8017cd8:	4613      	mov	r3, r2
 8017cda:	005b      	lsls	r3, r3, #1
 8017cdc:	4413      	add	r3, r2
 8017cde:	00db      	lsls	r3, r3, #3
 8017ce0:	440b      	add	r3, r1
 8017ce2:	3308      	adds	r3, #8
 8017ce4:	2200      	movs	r2, #0
 8017ce6:	601a      	str	r2, [r3, #0]
  ip4_addr_set_zero(&arp_table[i].ipaddr);
 8017ce8:	490d      	ldr	r1, [pc, #52]	; (8017d20 <etharp_free_entry+0xb8>)
 8017cea:	687a      	ldr	r2, [r7, #4]
 8017cec:	4613      	mov	r3, r2
 8017cee:	005b      	lsls	r3, r3, #1
 8017cf0:	4413      	add	r3, r2
 8017cf2:	00db      	lsls	r3, r3, #3
 8017cf4:	440b      	add	r3, r1
 8017cf6:	3304      	adds	r3, #4
 8017cf8:	2200      	movs	r2, #0
 8017cfa:	601a      	str	r2, [r3, #0]
  arp_table[i].ethaddr = ethzero;
 8017cfc:	4908      	ldr	r1, [pc, #32]	; (8017d20 <etharp_free_entry+0xb8>)
 8017cfe:	687a      	ldr	r2, [r7, #4]
 8017d00:	4613      	mov	r3, r2
 8017d02:	005b      	lsls	r3, r3, #1
 8017d04:	4413      	add	r3, r2
 8017d06:	00db      	lsls	r3, r3, #3
 8017d08:	440b      	add	r3, r1
 8017d0a:	3308      	adds	r3, #8
 8017d0c:	4a05      	ldr	r2, [pc, #20]	; (8017d24 <etharp_free_entry+0xbc>)
 8017d0e:	3304      	adds	r3, #4
 8017d10:	6810      	ldr	r0, [r2, #0]
 8017d12:	6018      	str	r0, [r3, #0]
 8017d14:	8892      	ldrh	r2, [r2, #4]
 8017d16:	809a      	strh	r2, [r3, #4]
#endif /* LWIP_DEBUG */
}
 8017d18:	bf00      	nop
 8017d1a:	3708      	adds	r7, #8
 8017d1c:	46bd      	mov	sp, r7
 8017d1e:	bd80      	pop	{r7, pc}
 8017d20:	20013c0c 	.word	0x20013c0c
 8017d24:	0806cf90 	.word	0x0806cf90

08017d28 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8017d28:	b580      	push	{r7, lr}
 8017d2a:	b082      	sub	sp, #8
 8017d2c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8017d2e:	2300      	movs	r3, #0
 8017d30:	607b      	str	r3, [r7, #4]
 8017d32:	e09a      	b.n	8017e6a <etharp_tmr+0x142>
    u8_t state = arp_table[i].state;
 8017d34:	4951      	ldr	r1, [pc, #324]	; (8017e7c <etharp_tmr+0x154>)
 8017d36:	687a      	ldr	r2, [r7, #4]
 8017d38:	4613      	mov	r3, r2
 8017d3a:	005b      	lsls	r3, r3, #1
 8017d3c:	4413      	add	r3, r2
 8017d3e:	00db      	lsls	r3, r3, #3
 8017d40:	440b      	add	r3, r1
 8017d42:	3314      	adds	r3, #20
 8017d44:	781b      	ldrb	r3, [r3, #0]
 8017d46:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8017d48:	78fb      	ldrb	r3, [r7, #3]
 8017d4a:	2b00      	cmp	r3, #0
 8017d4c:	f000 808a 	beq.w	8017e64 <etharp_tmr+0x13c>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
 8017d50:	78fb      	ldrb	r3, [r7, #3]
 8017d52:	2b05      	cmp	r3, #5
 8017d54:	f000 8086 	beq.w	8017e64 <etharp_tmr+0x13c>
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8017d58:	4948      	ldr	r1, [pc, #288]	; (8017e7c <etharp_tmr+0x154>)
 8017d5a:	687a      	ldr	r2, [r7, #4]
 8017d5c:	4613      	mov	r3, r2
 8017d5e:	005b      	lsls	r3, r3, #1
 8017d60:	4413      	add	r3, r2
 8017d62:	00db      	lsls	r3, r3, #3
 8017d64:	440b      	add	r3, r1
 8017d66:	3312      	adds	r3, #18
 8017d68:	881b      	ldrh	r3, [r3, #0]
 8017d6a:	3301      	adds	r3, #1
 8017d6c:	b298      	uxth	r0, r3
 8017d6e:	4943      	ldr	r1, [pc, #268]	; (8017e7c <etharp_tmr+0x154>)
 8017d70:	687a      	ldr	r2, [r7, #4]
 8017d72:	4613      	mov	r3, r2
 8017d74:	005b      	lsls	r3, r3, #1
 8017d76:	4413      	add	r3, r2
 8017d78:	00db      	lsls	r3, r3, #3
 8017d7a:	440b      	add	r3, r1
 8017d7c:	3312      	adds	r3, #18
 8017d7e:	4602      	mov	r2, r0
 8017d80:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8017d82:	493e      	ldr	r1, [pc, #248]	; (8017e7c <etharp_tmr+0x154>)
 8017d84:	687a      	ldr	r2, [r7, #4]
 8017d86:	4613      	mov	r3, r2
 8017d88:	005b      	lsls	r3, r3, #1
 8017d8a:	4413      	add	r3, r2
 8017d8c:	00db      	lsls	r3, r3, #3
 8017d8e:	440b      	add	r3, r1
 8017d90:	3312      	adds	r3, #18
 8017d92:	881b      	ldrh	r3, [r3, #0]
 8017d94:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8017d98:	d215      	bcs.n	8017dc6 <etharp_tmr+0x9e>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8017d9a:	4938      	ldr	r1, [pc, #224]	; (8017e7c <etharp_tmr+0x154>)
 8017d9c:	687a      	ldr	r2, [r7, #4]
 8017d9e:	4613      	mov	r3, r2
 8017da0:	005b      	lsls	r3, r3, #1
 8017da2:	4413      	add	r3, r2
 8017da4:	00db      	lsls	r3, r3, #3
 8017da6:	440b      	add	r3, r1
 8017da8:	3314      	adds	r3, #20
 8017daa:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8017dac:	2b01      	cmp	r3, #1
 8017dae:	d10e      	bne.n	8017dce <etharp_tmr+0xa6>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8017db0:	4932      	ldr	r1, [pc, #200]	; (8017e7c <etharp_tmr+0x154>)
 8017db2:	687a      	ldr	r2, [r7, #4]
 8017db4:	4613      	mov	r3, r2
 8017db6:	005b      	lsls	r3, r3, #1
 8017db8:	4413      	add	r3, r2
 8017dba:	00db      	lsls	r3, r3, #3
 8017dbc:	440b      	add	r3, r1
 8017dbe:	3312      	adds	r3, #18
 8017dc0:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8017dc2:	2b04      	cmp	r3, #4
 8017dc4:	d903      	bls.n	8017dce <etharp_tmr+0xa6>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8017dc6:	6878      	ldr	r0, [r7, #4]
 8017dc8:	f7ff ff4e 	bl	8017c68 <etharp_free_entry>
 8017dcc:	e04a      	b.n	8017e64 <etharp_tmr+0x13c>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8017dce:	492b      	ldr	r1, [pc, #172]	; (8017e7c <etharp_tmr+0x154>)
 8017dd0:	687a      	ldr	r2, [r7, #4]
 8017dd2:	4613      	mov	r3, r2
 8017dd4:	005b      	lsls	r3, r3, #1
 8017dd6:	4413      	add	r3, r2
 8017dd8:	00db      	lsls	r3, r3, #3
 8017dda:	440b      	add	r3, r1
 8017ddc:	3314      	adds	r3, #20
 8017dde:	781b      	ldrb	r3, [r3, #0]
 8017de0:	2b03      	cmp	r3, #3
 8017de2:	d10a      	bne.n	8017dfa <etharp_tmr+0xd2>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8017de4:	4925      	ldr	r1, [pc, #148]	; (8017e7c <etharp_tmr+0x154>)
 8017de6:	687a      	ldr	r2, [r7, #4]
 8017de8:	4613      	mov	r3, r2
 8017dea:	005b      	lsls	r3, r3, #1
 8017dec:	4413      	add	r3, r2
 8017dee:	00db      	lsls	r3, r3, #3
 8017df0:	440b      	add	r3, r1
 8017df2:	3314      	adds	r3, #20
 8017df4:	2204      	movs	r2, #4
 8017df6:	701a      	strb	r2, [r3, #0]
 8017df8:	e034      	b.n	8017e64 <etharp_tmr+0x13c>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8017dfa:	4920      	ldr	r1, [pc, #128]	; (8017e7c <etharp_tmr+0x154>)
 8017dfc:	687a      	ldr	r2, [r7, #4]
 8017dfe:	4613      	mov	r3, r2
 8017e00:	005b      	lsls	r3, r3, #1
 8017e02:	4413      	add	r3, r2
 8017e04:	00db      	lsls	r3, r3, #3
 8017e06:	440b      	add	r3, r1
 8017e08:	3314      	adds	r3, #20
 8017e0a:	781b      	ldrb	r3, [r3, #0]
 8017e0c:	2b04      	cmp	r3, #4
 8017e0e:	d10a      	bne.n	8017e26 <etharp_tmr+0xfe>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8017e10:	491a      	ldr	r1, [pc, #104]	; (8017e7c <etharp_tmr+0x154>)
 8017e12:	687a      	ldr	r2, [r7, #4]
 8017e14:	4613      	mov	r3, r2
 8017e16:	005b      	lsls	r3, r3, #1
 8017e18:	4413      	add	r3, r2
 8017e1a:	00db      	lsls	r3, r3, #3
 8017e1c:	440b      	add	r3, r1
 8017e1e:	3314      	adds	r3, #20
 8017e20:	2202      	movs	r2, #2
 8017e22:	701a      	strb	r2, [r3, #0]
 8017e24:	e01e      	b.n	8017e64 <etharp_tmr+0x13c>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8017e26:	4915      	ldr	r1, [pc, #84]	; (8017e7c <etharp_tmr+0x154>)
 8017e28:	687a      	ldr	r2, [r7, #4]
 8017e2a:	4613      	mov	r3, r2
 8017e2c:	005b      	lsls	r3, r3, #1
 8017e2e:	4413      	add	r3, r2
 8017e30:	00db      	lsls	r3, r3, #3
 8017e32:	440b      	add	r3, r1
 8017e34:	3314      	adds	r3, #20
 8017e36:	781b      	ldrb	r3, [r3, #0]
 8017e38:	2b01      	cmp	r3, #1
 8017e3a:	d113      	bne.n	8017e64 <etharp_tmr+0x13c>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8017e3c:	490f      	ldr	r1, [pc, #60]	; (8017e7c <etharp_tmr+0x154>)
 8017e3e:	687a      	ldr	r2, [r7, #4]
 8017e40:	4613      	mov	r3, r2
 8017e42:	005b      	lsls	r3, r3, #1
 8017e44:	4413      	add	r3, r2
 8017e46:	00db      	lsls	r3, r3, #3
 8017e48:	440b      	add	r3, r1
 8017e4a:	3308      	adds	r3, #8
 8017e4c:	6818      	ldr	r0, [r3, #0]
 8017e4e:	687a      	ldr	r2, [r7, #4]
 8017e50:	4613      	mov	r3, r2
 8017e52:	005b      	lsls	r3, r3, #1
 8017e54:	4413      	add	r3, r2
 8017e56:	00db      	lsls	r3, r3, #3
 8017e58:	4a08      	ldr	r2, [pc, #32]	; (8017e7c <etharp_tmr+0x154>)
 8017e5a:	4413      	add	r3, r2
 8017e5c:	3304      	adds	r3, #4
 8017e5e:	4619      	mov	r1, r3
 8017e60:	f000 feae 	bl	8018bc0 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8017e64:	687b      	ldr	r3, [r7, #4]
 8017e66:	3301      	adds	r3, #1
 8017e68:	607b      	str	r3, [r7, #4]
 8017e6a:	687b      	ldr	r3, [r7, #4]
 8017e6c:	2b09      	cmp	r3, #9
 8017e6e:	f77f af61 	ble.w	8017d34 <etharp_tmr+0xc>
      }
    }
  }
}
 8017e72:	bf00      	nop
 8017e74:	bf00      	nop
 8017e76:	3708      	adds	r7, #8
 8017e78:	46bd      	mov	sp, r7
 8017e7a:	bd80      	pop	{r7, pc}
 8017e7c:	20013c0c 	.word	0x20013c0c

08017e80 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8017e80:	b580      	push	{r7, lr}
 8017e82:	b08a      	sub	sp, #40	; 0x28
 8017e84:	af00      	add	r7, sp, #0
 8017e86:	60f8      	str	r0, [r7, #12]
 8017e88:	460b      	mov	r3, r1
 8017e8a:	607a      	str	r2, [r7, #4]
 8017e8c:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8017e8e:	230a      	movs	r3, #10
 8017e90:	843b      	strh	r3, [r7, #32]
 8017e92:	230a      	movs	r3, #10
 8017e94:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t empty = ARP_TABLE_SIZE;
 8017e96:	230a      	movs	r3, #10
 8017e98:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t i = 0;
 8017e9a:	2300      	movs	r3, #0
 8017e9c:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8017e9e:	230a      	movs	r3, #10
 8017ea0:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8017ea2:	2300      	movs	r3, #0
 8017ea4:	83bb      	strh	r3, [r7, #28]
 8017ea6:	2300      	movs	r3, #0
 8017ea8:	837b      	strh	r3, [r7, #26]
 8017eaa:	2300      	movs	r3, #0
 8017eac:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8017eae:	2300      	movs	r3, #0
 8017eb0:	84fb      	strh	r3, [r7, #38]	; 0x26
 8017eb2:	e0b1      	b.n	8018018 <etharp_find_entry+0x198>
    u8_t state = arp_table[i].state;
 8017eb4:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8017eb8:	49a7      	ldr	r1, [pc, #668]	; (8018158 <etharp_find_entry+0x2d8>)
 8017eba:	4613      	mov	r3, r2
 8017ebc:	005b      	lsls	r3, r3, #1
 8017ebe:	4413      	add	r3, r2
 8017ec0:	00db      	lsls	r3, r3, #3
 8017ec2:	440b      	add	r3, r1
 8017ec4:	3314      	adds	r3, #20
 8017ec6:	781b      	ldrb	r3, [r3, #0]
 8017ec8:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8017eca:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8017ece:	2b0a      	cmp	r3, #10
 8017ed0:	d105      	bne.n	8017ede <etharp_find_entry+0x5e>
 8017ed2:	7dfb      	ldrb	r3, [r7, #23]
 8017ed4:	2b00      	cmp	r3, #0
 8017ed6:	d102      	bne.n	8017ede <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8017ed8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8017eda:	84bb      	strh	r3, [r7, #36]	; 0x24
 8017edc:	e098      	b.n	8018010 <etharp_find_entry+0x190>
    } else if (state != ETHARP_STATE_EMPTY) {
 8017ede:	7dfb      	ldrb	r3, [r7, #23]
 8017ee0:	2b00      	cmp	r3, #0
 8017ee2:	f000 8095 	beq.w	8018010 <etharp_find_entry+0x190>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8017ee6:	7dfb      	ldrb	r3, [r7, #23]
 8017ee8:	2b01      	cmp	r3, #1
 8017eea:	d009      	beq.n	8017f00 <etharp_find_entry+0x80>
 8017eec:	7dfb      	ldrb	r3, [r7, #23]
 8017eee:	2b01      	cmp	r3, #1
 8017ef0:	d806      	bhi.n	8017f00 <etharp_find_entry+0x80>
 8017ef2:	4b9a      	ldr	r3, [pc, #616]	; (801815c <etharp_find_entry+0x2dc>)
 8017ef4:	f240 1223 	movw	r2, #291	; 0x123
 8017ef8:	4999      	ldr	r1, [pc, #612]	; (8018160 <etharp_find_entry+0x2e0>)
 8017efa:	489a      	ldr	r0, [pc, #616]	; (8018164 <etharp_find_entry+0x2e4>)
 8017efc:	f003 fac0 	bl	801b480 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8017f00:	68fb      	ldr	r3, [r7, #12]
 8017f02:	2b00      	cmp	r3, #0
 8017f04:	d020      	beq.n	8017f48 <etharp_find_entry+0xc8>
 8017f06:	68fb      	ldr	r3, [r7, #12]
 8017f08:	6819      	ldr	r1, [r3, #0]
 8017f0a:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8017f0e:	4892      	ldr	r0, [pc, #584]	; (8018158 <etharp_find_entry+0x2d8>)
 8017f10:	4613      	mov	r3, r2
 8017f12:	005b      	lsls	r3, r3, #1
 8017f14:	4413      	add	r3, r2
 8017f16:	00db      	lsls	r3, r3, #3
 8017f18:	4403      	add	r3, r0
 8017f1a:	3304      	adds	r3, #4
 8017f1c:	681b      	ldr	r3, [r3, #0]
 8017f1e:	4299      	cmp	r1, r3
 8017f20:	d112      	bne.n	8017f48 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8017f22:	687b      	ldr	r3, [r7, #4]
 8017f24:	2b00      	cmp	r3, #0
 8017f26:	d00c      	beq.n	8017f42 <etharp_find_entry+0xc2>
 8017f28:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8017f2c:	498a      	ldr	r1, [pc, #552]	; (8018158 <etharp_find_entry+0x2d8>)
 8017f2e:	4613      	mov	r3, r2
 8017f30:	005b      	lsls	r3, r3, #1
 8017f32:	4413      	add	r3, r2
 8017f34:	00db      	lsls	r3, r3, #3
 8017f36:	440b      	add	r3, r1
 8017f38:	3308      	adds	r3, #8
 8017f3a:	681b      	ldr	r3, [r3, #0]
 8017f3c:	687a      	ldr	r2, [r7, #4]
 8017f3e:	429a      	cmp	r2, r3
 8017f40:	d102      	bne.n	8017f48 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8017f42:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8017f46:	e103      	b.n	8018150 <etharp_find_entry+0x2d0>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8017f48:	7dfb      	ldrb	r3, [r7, #23]
 8017f4a:	2b01      	cmp	r3, #1
 8017f4c:	d140      	bne.n	8017fd0 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8017f4e:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8017f52:	4981      	ldr	r1, [pc, #516]	; (8018158 <etharp_find_entry+0x2d8>)
 8017f54:	4613      	mov	r3, r2
 8017f56:	005b      	lsls	r3, r3, #1
 8017f58:	4413      	add	r3, r2
 8017f5a:	00db      	lsls	r3, r3, #3
 8017f5c:	440b      	add	r3, r1
 8017f5e:	681b      	ldr	r3, [r3, #0]
 8017f60:	2b00      	cmp	r3, #0
 8017f62:	d01a      	beq.n	8017f9a <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8017f64:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8017f68:	497b      	ldr	r1, [pc, #492]	; (8018158 <etharp_find_entry+0x2d8>)
 8017f6a:	4613      	mov	r3, r2
 8017f6c:	005b      	lsls	r3, r3, #1
 8017f6e:	4413      	add	r3, r2
 8017f70:	00db      	lsls	r3, r3, #3
 8017f72:	440b      	add	r3, r1
 8017f74:	3312      	adds	r3, #18
 8017f76:	881b      	ldrh	r3, [r3, #0]
 8017f78:	8bba      	ldrh	r2, [r7, #28]
 8017f7a:	429a      	cmp	r2, r3
 8017f7c:	d848      	bhi.n	8018010 <etharp_find_entry+0x190>
            old_queue = i;
 8017f7e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8017f80:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8017f82:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8017f86:	4974      	ldr	r1, [pc, #464]	; (8018158 <etharp_find_entry+0x2d8>)
 8017f88:	4613      	mov	r3, r2
 8017f8a:	005b      	lsls	r3, r3, #1
 8017f8c:	4413      	add	r3, r2
 8017f8e:	00db      	lsls	r3, r3, #3
 8017f90:	440b      	add	r3, r1
 8017f92:	3312      	adds	r3, #18
 8017f94:	881b      	ldrh	r3, [r3, #0]
 8017f96:	83bb      	strh	r3, [r7, #28]
 8017f98:	e03a      	b.n	8018010 <etharp_find_entry+0x190>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8017f9a:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8017f9e:	496e      	ldr	r1, [pc, #440]	; (8018158 <etharp_find_entry+0x2d8>)
 8017fa0:	4613      	mov	r3, r2
 8017fa2:	005b      	lsls	r3, r3, #1
 8017fa4:	4413      	add	r3, r2
 8017fa6:	00db      	lsls	r3, r3, #3
 8017fa8:	440b      	add	r3, r1
 8017faa:	3312      	adds	r3, #18
 8017fac:	881b      	ldrh	r3, [r3, #0]
 8017fae:	8b7a      	ldrh	r2, [r7, #26]
 8017fb0:	429a      	cmp	r2, r3
 8017fb2:	d82d      	bhi.n	8018010 <etharp_find_entry+0x190>
            old_pending = i;
 8017fb4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8017fb6:	843b      	strh	r3, [r7, #32]
            age_pending = arp_table[i].ctime;
 8017fb8:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8017fbc:	4966      	ldr	r1, [pc, #408]	; (8018158 <etharp_find_entry+0x2d8>)
 8017fbe:	4613      	mov	r3, r2
 8017fc0:	005b      	lsls	r3, r3, #1
 8017fc2:	4413      	add	r3, r2
 8017fc4:	00db      	lsls	r3, r3, #3
 8017fc6:	440b      	add	r3, r1
 8017fc8:	3312      	adds	r3, #18
 8017fca:	881b      	ldrh	r3, [r3, #0]
 8017fcc:	837b      	strh	r3, [r7, #26]
 8017fce:	e01f      	b.n	8018010 <etharp_find_entry+0x190>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8017fd0:	7dfb      	ldrb	r3, [r7, #23]
 8017fd2:	2b01      	cmp	r3, #1
 8017fd4:	d91c      	bls.n	8018010 <etharp_find_entry+0x190>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
 8017fd6:	7dfb      	ldrb	r3, [r7, #23]
 8017fd8:	2b04      	cmp	r3, #4
 8017fda:	d819      	bhi.n	8018010 <etharp_find_entry+0x190>
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8017fdc:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8017fe0:	495d      	ldr	r1, [pc, #372]	; (8018158 <etharp_find_entry+0x2d8>)
 8017fe2:	4613      	mov	r3, r2
 8017fe4:	005b      	lsls	r3, r3, #1
 8017fe6:	4413      	add	r3, r2
 8017fe8:	00db      	lsls	r3, r3, #3
 8017fea:	440b      	add	r3, r1
 8017fec:	3312      	adds	r3, #18
 8017fee:	881b      	ldrh	r3, [r3, #0]
 8017ff0:	8b3a      	ldrh	r2, [r7, #24]
 8017ff2:	429a      	cmp	r2, r3
 8017ff4:	d80c      	bhi.n	8018010 <etharp_find_entry+0x190>
            old_stable = i;
 8017ff6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8017ff8:	847b      	strh	r3, [r7, #34]	; 0x22
            age_stable = arp_table[i].ctime;
 8017ffa:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8017ffe:	4956      	ldr	r1, [pc, #344]	; (8018158 <etharp_find_entry+0x2d8>)
 8018000:	4613      	mov	r3, r2
 8018002:	005b      	lsls	r3, r3, #1
 8018004:	4413      	add	r3, r2
 8018006:	00db      	lsls	r3, r3, #3
 8018008:	440b      	add	r3, r1
 801800a:	3312      	adds	r3, #18
 801800c:	881b      	ldrh	r3, [r3, #0]
 801800e:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8018010:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8018012:	3301      	adds	r3, #1
 8018014:	b29b      	uxth	r3, r3
 8018016:	84fb      	strh	r3, [r7, #38]	; 0x26
 8018018:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801801c:	2b09      	cmp	r3, #9
 801801e:	f77f af49 	ble.w	8017eb4 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8018022:	7afb      	ldrb	r3, [r7, #11]
 8018024:	f003 0302 	and.w	r3, r3, #2
 8018028:	2b00      	cmp	r3, #0
 801802a:	d108      	bne.n	801803e <etharp_find_entry+0x1be>
 801802c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8018030:	2b0a      	cmp	r3, #10
 8018032:	d107      	bne.n	8018044 <etharp_find_entry+0x1c4>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8018034:	7afb      	ldrb	r3, [r7, #11]
 8018036:	f003 0301 	and.w	r3, r3, #1
 801803a:	2b00      	cmp	r3, #0
 801803c:	d102      	bne.n	8018044 <etharp_find_entry+0x1c4>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 801803e:	f04f 33ff 	mov.w	r3, #4294967295
 8018042:	e085      	b.n	8018150 <etharp_find_entry+0x2d0>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8018044:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8018048:	2b09      	cmp	r3, #9
 801804a:	dc02      	bgt.n	8018052 <etharp_find_entry+0x1d2>
    i = empty;
 801804c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801804e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8018050:	e039      	b.n	80180c6 <etharp_find_entry+0x246>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8018052:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8018056:	2b09      	cmp	r3, #9
 8018058:	dc14      	bgt.n	8018084 <etharp_find_entry+0x204>
      /* recycle oldest stable*/
      i = old_stable;
 801805a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801805c:	84fb      	strh	r3, [r7, #38]	; 0x26
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801805e:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8018062:	493d      	ldr	r1, [pc, #244]	; (8018158 <etharp_find_entry+0x2d8>)
 8018064:	4613      	mov	r3, r2
 8018066:	005b      	lsls	r3, r3, #1
 8018068:	4413      	add	r3, r2
 801806a:	00db      	lsls	r3, r3, #3
 801806c:	440b      	add	r3, r1
 801806e:	681b      	ldr	r3, [r3, #0]
 8018070:	2b00      	cmp	r3, #0
 8018072:	d018      	beq.n	80180a6 <etharp_find_entry+0x226>
 8018074:	4b39      	ldr	r3, [pc, #228]	; (801815c <etharp_find_entry+0x2dc>)
 8018076:	f240 126d 	movw	r2, #365	; 0x16d
 801807a:	493b      	ldr	r1, [pc, #236]	; (8018168 <etharp_find_entry+0x2e8>)
 801807c:	4839      	ldr	r0, [pc, #228]	; (8018164 <etharp_find_entry+0x2e4>)
 801807e:	f003 f9ff 	bl	801b480 <iprintf>
 8018082:	e010      	b.n	80180a6 <etharp_find_entry+0x226>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8018084:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8018088:	2b09      	cmp	r3, #9
 801808a:	dc02      	bgt.n	8018092 <etharp_find_entry+0x212>
      /* recycle oldest pending */
      i = old_pending;
 801808c:	8c3b      	ldrh	r3, [r7, #32]
 801808e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8018090:	e009      	b.n	80180a6 <etharp_find_entry+0x226>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8018092:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8018096:	2b09      	cmp	r3, #9
 8018098:	dc02      	bgt.n	80180a0 <etharp_find_entry+0x220>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801809a:	8bfb      	ldrh	r3, [r7, #30]
 801809c:	84fb      	strh	r3, [r7, #38]	; 0x26
 801809e:	e002      	b.n	80180a6 <etharp_find_entry+0x226>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 80180a0:	f04f 33ff 	mov.w	r3, #4294967295
 80180a4:	e054      	b.n	8018150 <etharp_find_entry+0x2d0>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80180a6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80180aa:	2b09      	cmp	r3, #9
 80180ac:	dd06      	ble.n	80180bc <etharp_find_entry+0x23c>
 80180ae:	4b2b      	ldr	r3, [pc, #172]	; (801815c <etharp_find_entry+0x2dc>)
 80180b0:	f240 127f 	movw	r2, #383	; 0x17f
 80180b4:	492d      	ldr	r1, [pc, #180]	; (801816c <etharp_find_entry+0x2ec>)
 80180b6:	482b      	ldr	r0, [pc, #172]	; (8018164 <etharp_find_entry+0x2e4>)
 80180b8:	f003 f9e2 	bl	801b480 <iprintf>
    etharp_free_entry(i);
 80180bc:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80180c0:	4618      	mov	r0, r3
 80180c2:	f7ff fdd1 	bl	8017c68 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80180c6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80180ca:	2b09      	cmp	r3, #9
 80180cc:	dd06      	ble.n	80180dc <etharp_find_entry+0x25c>
 80180ce:	4b23      	ldr	r3, [pc, #140]	; (801815c <etharp_find_entry+0x2dc>)
 80180d0:	f240 1283 	movw	r2, #387	; 0x183
 80180d4:	4925      	ldr	r1, [pc, #148]	; (801816c <etharp_find_entry+0x2ec>)
 80180d6:	4823      	ldr	r0, [pc, #140]	; (8018164 <etharp_find_entry+0x2e4>)
 80180d8:	f003 f9d2 	bl	801b480 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80180dc:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 80180e0:	491d      	ldr	r1, [pc, #116]	; (8018158 <etharp_find_entry+0x2d8>)
 80180e2:	4613      	mov	r3, r2
 80180e4:	005b      	lsls	r3, r3, #1
 80180e6:	4413      	add	r3, r2
 80180e8:	00db      	lsls	r3, r3, #3
 80180ea:	440b      	add	r3, r1
 80180ec:	3314      	adds	r3, #20
 80180ee:	781b      	ldrb	r3, [r3, #0]
 80180f0:	2b00      	cmp	r3, #0
 80180f2:	d006      	beq.n	8018102 <etharp_find_entry+0x282>
 80180f4:	4b19      	ldr	r3, [pc, #100]	; (801815c <etharp_find_entry+0x2dc>)
 80180f6:	f44f 72c2 	mov.w	r2, #388	; 0x184
 80180fa:	491d      	ldr	r1, [pc, #116]	; (8018170 <etharp_find_entry+0x2f0>)
 80180fc:	4819      	ldr	r0, [pc, #100]	; (8018164 <etharp_find_entry+0x2e4>)
 80180fe:	f003 f9bf 	bl	801b480 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8018102:	68fb      	ldr	r3, [r7, #12]
 8018104:	2b00      	cmp	r3, #0
 8018106:	d00b      	beq.n	8018120 <etharp_find_entry+0x2a0>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8018108:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 801810c:	68fb      	ldr	r3, [r7, #12]
 801810e:	6819      	ldr	r1, [r3, #0]
 8018110:	4811      	ldr	r0, [pc, #68]	; (8018158 <etharp_find_entry+0x2d8>)
 8018112:	4613      	mov	r3, r2
 8018114:	005b      	lsls	r3, r3, #1
 8018116:	4413      	add	r3, r2
 8018118:	00db      	lsls	r3, r3, #3
 801811a:	4403      	add	r3, r0
 801811c:	3304      	adds	r3, #4
 801811e:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8018120:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8018124:	490c      	ldr	r1, [pc, #48]	; (8018158 <etharp_find_entry+0x2d8>)
 8018126:	4613      	mov	r3, r2
 8018128:	005b      	lsls	r3, r3, #1
 801812a:	4413      	add	r3, r2
 801812c:	00db      	lsls	r3, r3, #3
 801812e:	440b      	add	r3, r1
 8018130:	3312      	adds	r3, #18
 8018132:	2200      	movs	r2, #0
 8018134:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8018136:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 801813a:	4907      	ldr	r1, [pc, #28]	; (8018158 <etharp_find_entry+0x2d8>)
 801813c:	4613      	mov	r3, r2
 801813e:	005b      	lsls	r3, r3, #1
 8018140:	4413      	add	r3, r2
 8018142:	00db      	lsls	r3, r3, #3
 8018144:	440b      	add	r3, r1
 8018146:	3308      	adds	r3, #8
 8018148:	687a      	ldr	r2, [r7, #4]
 801814a:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801814c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
}
 8018150:	4618      	mov	r0, r3
 8018152:	3728      	adds	r7, #40	; 0x28
 8018154:	46bd      	mov	sp, r7
 8018156:	bd80      	pop	{r7, pc}
 8018158:	20013c0c 	.word	0x20013c0c
 801815c:	08020a58 	.word	0x08020a58
 8018160:	08020a90 	.word	0x08020a90
 8018164:	08020ad0 	.word	0x08020ad0
 8018168:	08020af8 	.word	0x08020af8
 801816c:	08020b10 	.word	0x08020b10
 8018170:	08020b24 	.word	0x08020b24

08018174 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8018174:	b580      	push	{r7, lr}
 8018176:	b088      	sub	sp, #32
 8018178:	af02      	add	r7, sp, #8
 801817a:	60f8      	str	r0, [r7, #12]
 801817c:	60b9      	str	r1, [r7, #8]
 801817e:	607a      	str	r2, [r7, #4]
 8018180:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8018182:	68fb      	ldr	r3, [r7, #12]
 8018184:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8018188:	2b06      	cmp	r3, #6
 801818a:	d006      	beq.n	801819a <etharp_update_arp_entry+0x26>
 801818c:	4b58      	ldr	r3, [pc, #352]	; (80182f0 <etharp_update_arp_entry+0x17c>)
 801818e:	f240 12a9 	movw	r2, #425	; 0x1a9
 8018192:	4958      	ldr	r1, [pc, #352]	; (80182f4 <etharp_update_arp_entry+0x180>)
 8018194:	4858      	ldr	r0, [pc, #352]	; (80182f8 <etharp_update_arp_entry+0x184>)
 8018196:	f003 f973 	bl	801b480 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801819a:	68bb      	ldr	r3, [r7, #8]
 801819c:	2b00      	cmp	r3, #0
 801819e:	d012      	beq.n	80181c6 <etharp_update_arp_entry+0x52>
 80181a0:	68bb      	ldr	r3, [r7, #8]
 80181a2:	681b      	ldr	r3, [r3, #0]
 80181a4:	2b00      	cmp	r3, #0
 80181a6:	d00e      	beq.n	80181c6 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80181a8:	68bb      	ldr	r3, [r7, #8]
 80181aa:	681b      	ldr	r3, [r3, #0]
 80181ac:	68f9      	ldr	r1, [r7, #12]
 80181ae:	4618      	mov	r0, r3
 80181b0:	f001 fa00 	bl	80195b4 <ip4_addr_isbroadcast_u32>
 80181b4:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 80181b6:	2b00      	cmp	r3, #0
 80181b8:	d105      	bne.n	80181c6 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 80181ba:	68bb      	ldr	r3, [r7, #8]
 80181bc:	681b      	ldr	r3, [r3, #0]
 80181be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80181c2:	2be0      	cmp	r3, #224	; 0xe0
 80181c4:	d102      	bne.n	80181cc <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80181c6:	f06f 030f 	mvn.w	r3, #15
 80181ca:	e08c      	b.n	80182e6 <etharp_update_arp_entry+0x172>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 80181cc:	78fb      	ldrb	r3, [r7, #3]
 80181ce:	68fa      	ldr	r2, [r7, #12]
 80181d0:	4619      	mov	r1, r3
 80181d2:	68b8      	ldr	r0, [r7, #8]
 80181d4:	f7ff fe54 	bl	8017e80 <etharp_find_entry>
 80181d8:	4603      	mov	r3, r0
 80181da:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 80181dc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80181e0:	2b00      	cmp	r3, #0
 80181e2:	da02      	bge.n	80181ea <etharp_update_arp_entry+0x76>
    return (err_t)i;
 80181e4:	8afb      	ldrh	r3, [r7, #22]
 80181e6:	b25b      	sxtb	r3, r3
 80181e8:	e07d      	b.n	80182e6 <etharp_update_arp_entry+0x172>
  }

#if ETHARP_SUPPORT_STATIC_ENTRIES
  if (flags & ETHARP_FLAG_STATIC_ENTRY) {
 80181ea:	78fb      	ldrb	r3, [r7, #3]
 80181ec:	f003 0304 	and.w	r3, r3, #4
 80181f0:	2b00      	cmp	r3, #0
 80181f2:	d00b      	beq.n	801820c <etharp_update_arp_entry+0x98>
    /* record static type */
    arp_table[i].state = ETHARP_STATE_STATIC;
 80181f4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80181f8:	4940      	ldr	r1, [pc, #256]	; (80182fc <etharp_update_arp_entry+0x188>)
 80181fa:	4613      	mov	r3, r2
 80181fc:	005b      	lsls	r3, r3, #1
 80181fe:	4413      	add	r3, r2
 8018200:	00db      	lsls	r3, r3, #3
 8018202:	440b      	add	r3, r1
 8018204:	3314      	adds	r3, #20
 8018206:	2205      	movs	r2, #5
 8018208:	701a      	strb	r2, [r3, #0]
 801820a:	e019      	b.n	8018240 <etharp_update_arp_entry+0xcc>
  } else if (arp_table[i].state == ETHARP_STATE_STATIC) {
 801820c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018210:	493a      	ldr	r1, [pc, #232]	; (80182fc <etharp_update_arp_entry+0x188>)
 8018212:	4613      	mov	r3, r2
 8018214:	005b      	lsls	r3, r3, #1
 8018216:	4413      	add	r3, r2
 8018218:	00db      	lsls	r3, r3, #3
 801821a:	440b      	add	r3, r1
 801821c:	3314      	adds	r3, #20
 801821e:	781b      	ldrb	r3, [r3, #0]
 8018220:	2b05      	cmp	r3, #5
 8018222:	d102      	bne.n	801822a <etharp_update_arp_entry+0xb6>
    /* found entry is a static type, don't overwrite it */
    return ERR_VAL;
 8018224:	f06f 0305 	mvn.w	r3, #5
 8018228:	e05d      	b.n	80182e6 <etharp_update_arp_entry+0x172>
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801822a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801822e:	4933      	ldr	r1, [pc, #204]	; (80182fc <etharp_update_arp_entry+0x188>)
 8018230:	4613      	mov	r3, r2
 8018232:	005b      	lsls	r3, r3, #1
 8018234:	4413      	add	r3, r2
 8018236:	00db      	lsls	r3, r3, #3
 8018238:	440b      	add	r3, r1
 801823a:	3314      	adds	r3, #20
 801823c:	2202      	movs	r2, #2
 801823e:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8018240:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018244:	492d      	ldr	r1, [pc, #180]	; (80182fc <etharp_update_arp_entry+0x188>)
 8018246:	4613      	mov	r3, r2
 8018248:	005b      	lsls	r3, r3, #1
 801824a:	4413      	add	r3, r2
 801824c:	00db      	lsls	r3, r3, #3
 801824e:	440b      	add	r3, r1
 8018250:	3308      	adds	r3, #8
 8018252:	68fa      	ldr	r2, [r7, #12]
 8018254:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8018256:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801825a:	4613      	mov	r3, r2
 801825c:	005b      	lsls	r3, r3, #1
 801825e:	4413      	add	r3, r2
 8018260:	00db      	lsls	r3, r3, #3
 8018262:	3308      	adds	r3, #8
 8018264:	4a25      	ldr	r2, [pc, #148]	; (80182fc <etharp_update_arp_entry+0x188>)
 8018266:	4413      	add	r3, r2
 8018268:	3304      	adds	r3, #4
 801826a:	2206      	movs	r2, #6
 801826c:	6879      	ldr	r1, [r7, #4]
 801826e:	4618      	mov	r0, r3
 8018270:	f002 fb90 	bl	801a994 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8018274:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018278:	4920      	ldr	r1, [pc, #128]	; (80182fc <etharp_update_arp_entry+0x188>)
 801827a:	4613      	mov	r3, r2
 801827c:	005b      	lsls	r3, r3, #1
 801827e:	4413      	add	r3, r2
 8018280:	00db      	lsls	r3, r3, #3
 8018282:	440b      	add	r3, r1
 8018284:	3312      	adds	r3, #18
 8018286:	2200      	movs	r2, #0
 8018288:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801828a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801828e:	491b      	ldr	r1, [pc, #108]	; (80182fc <etharp_update_arp_entry+0x188>)
 8018290:	4613      	mov	r3, r2
 8018292:	005b      	lsls	r3, r3, #1
 8018294:	4413      	add	r3, r2
 8018296:	00db      	lsls	r3, r3, #3
 8018298:	440b      	add	r3, r1
 801829a:	681b      	ldr	r3, [r3, #0]
 801829c:	2b00      	cmp	r3, #0
 801829e:	d021      	beq.n	80182e4 <etharp_update_arp_entry+0x170>
    struct pbuf *p = arp_table[i].q;
 80182a0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80182a4:	4915      	ldr	r1, [pc, #84]	; (80182fc <etharp_update_arp_entry+0x188>)
 80182a6:	4613      	mov	r3, r2
 80182a8:	005b      	lsls	r3, r3, #1
 80182aa:	4413      	add	r3, r2
 80182ac:	00db      	lsls	r3, r3, #3
 80182ae:	440b      	add	r3, r1
 80182b0:	681b      	ldr	r3, [r3, #0]
 80182b2:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80182b4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80182b8:	4910      	ldr	r1, [pc, #64]	; (80182fc <etharp_update_arp_entry+0x188>)
 80182ba:	4613      	mov	r3, r2
 80182bc:	005b      	lsls	r3, r3, #1
 80182be:	4413      	add	r3, r2
 80182c0:	00db      	lsls	r3, r3, #3
 80182c2:	440b      	add	r3, r1
 80182c4:	2200      	movs	r2, #0
 80182c6:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80182c8:	68fb      	ldr	r3, [r7, #12]
 80182ca:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 80182ce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80182d2:	9300      	str	r3, [sp, #0]
 80182d4:	687b      	ldr	r3, [r7, #4]
 80182d6:	6939      	ldr	r1, [r7, #16]
 80182d8:	68f8      	ldr	r0, [r7, #12]
 80182da:	f002 f9b3 	bl	801a644 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 80182de:	6938      	ldr	r0, [r7, #16]
 80182e0:	f7f7 f912 	bl	800f508 <pbuf_free>
  }
  return ERR_OK;
 80182e4:	2300      	movs	r3, #0
}
 80182e6:	4618      	mov	r0, r3
 80182e8:	3718      	adds	r7, #24
 80182ea:	46bd      	mov	sp, r7
 80182ec:	bd80      	pop	{r7, pc}
 80182ee:	bf00      	nop
 80182f0:	08020a58 	.word	0x08020a58
 80182f4:	08020b50 	.word	0x08020b50
 80182f8:	08020ad0 	.word	0x08020ad0
 80182fc:	20013c0c 	.word	0x20013c0c

08018300 <etharp_add_static_entry>:
 * @param ethaddr ethernet address for the new static entry
 * @return See return values of etharp_add_static_entry
 */
err_t
etharp_add_static_entry(const ip4_addr_t *ipaddr, struct eth_addr *ethaddr)
{
 8018300:	b580      	push	{r7, lr}
 8018302:	b084      	sub	sp, #16
 8018304:	af00      	add	r7, sp, #0
 8018306:	6078      	str	r0, [r7, #4]
 8018308:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_add_static_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));

  netif = ip4_route(ipaddr);
 801830a:	6878      	ldr	r0, [r7, #4]
 801830c:	f000 fe2c 	bl	8018f68 <ip4_route>
 8018310:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 8018312:	68fb      	ldr	r3, [r7, #12]
 8018314:	2b00      	cmp	r3, #0
 8018316:	d102      	bne.n	801831e <etharp_add_static_entry+0x1e>
    return ERR_RTE;
 8018318:	f06f 0303 	mvn.w	r3, #3
 801831c:	e006      	b.n	801832c <etharp_add_static_entry+0x2c>
  }

  return etharp_update_arp_entry(netif, ipaddr, ethaddr, ETHARP_FLAG_TRY_HARD | ETHARP_FLAG_STATIC_ENTRY);
 801831e:	2305      	movs	r3, #5
 8018320:	683a      	ldr	r2, [r7, #0]
 8018322:	6879      	ldr	r1, [r7, #4]
 8018324:	68f8      	ldr	r0, [r7, #12]
 8018326:	f7ff ff25 	bl	8018174 <etharp_update_arp_entry>
 801832a:	4603      	mov	r3, r0
}
 801832c:	4618      	mov	r0, r3
 801832e:	3710      	adds	r7, #16
 8018330:	46bd      	mov	sp, r7
 8018332:	bd80      	pop	{r7, pc}

08018334 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8018334:	b580      	push	{r7, lr}
 8018336:	b084      	sub	sp, #16
 8018338:	af00      	add	r7, sp, #0
 801833a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801833c:	2300      	movs	r3, #0
 801833e:	60fb      	str	r3, [r7, #12]
 8018340:	e01e      	b.n	8018380 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8018342:	4913      	ldr	r1, [pc, #76]	; (8018390 <etharp_cleanup_netif+0x5c>)
 8018344:	68fa      	ldr	r2, [r7, #12]
 8018346:	4613      	mov	r3, r2
 8018348:	005b      	lsls	r3, r3, #1
 801834a:	4413      	add	r3, r2
 801834c:	00db      	lsls	r3, r3, #3
 801834e:	440b      	add	r3, r1
 8018350:	3314      	adds	r3, #20
 8018352:	781b      	ldrb	r3, [r3, #0]
 8018354:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8018356:	7afb      	ldrb	r3, [r7, #11]
 8018358:	2b00      	cmp	r3, #0
 801835a:	d00e      	beq.n	801837a <etharp_cleanup_netif+0x46>
 801835c:	490c      	ldr	r1, [pc, #48]	; (8018390 <etharp_cleanup_netif+0x5c>)
 801835e:	68fa      	ldr	r2, [r7, #12]
 8018360:	4613      	mov	r3, r2
 8018362:	005b      	lsls	r3, r3, #1
 8018364:	4413      	add	r3, r2
 8018366:	00db      	lsls	r3, r3, #3
 8018368:	440b      	add	r3, r1
 801836a:	3308      	adds	r3, #8
 801836c:	681b      	ldr	r3, [r3, #0]
 801836e:	687a      	ldr	r2, [r7, #4]
 8018370:	429a      	cmp	r2, r3
 8018372:	d102      	bne.n	801837a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8018374:	68f8      	ldr	r0, [r7, #12]
 8018376:	f7ff fc77 	bl	8017c68 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801837a:	68fb      	ldr	r3, [r7, #12]
 801837c:	3301      	adds	r3, #1
 801837e:	60fb      	str	r3, [r7, #12]
 8018380:	68fb      	ldr	r3, [r7, #12]
 8018382:	2b09      	cmp	r3, #9
 8018384:	dddd      	ble.n	8018342 <etharp_cleanup_netif+0xe>
    }
  }
}
 8018386:	bf00      	nop
 8018388:	bf00      	nop
 801838a:	3710      	adds	r7, #16
 801838c:	46bd      	mov	sp, r7
 801838e:	bd80      	pop	{r7, pc}
 8018390:	20013c0c 	.word	0x20013c0c

08018394 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8018394:	b5b0      	push	{r4, r5, r7, lr}
 8018396:	b08a      	sub	sp, #40	; 0x28
 8018398:	af04      	add	r7, sp, #16
 801839a:	6078      	str	r0, [r7, #4]
 801839c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801839e:	683b      	ldr	r3, [r7, #0]
 80183a0:	2b00      	cmp	r3, #0
 80183a2:	d107      	bne.n	80183b4 <etharp_input+0x20>
 80183a4:	4b3f      	ldr	r3, [pc, #252]	; (80184a4 <etharp_input+0x110>)
 80183a6:	f240 228a 	movw	r2, #650	; 0x28a
 80183aa:	493f      	ldr	r1, [pc, #252]	; (80184a8 <etharp_input+0x114>)
 80183ac:	483f      	ldr	r0, [pc, #252]	; (80184ac <etharp_input+0x118>)
 80183ae:	f003 f867 	bl	801b480 <iprintf>
 80183b2:	e074      	b.n	801849e <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 80183b4:	687b      	ldr	r3, [r7, #4]
 80183b6:	685b      	ldr	r3, [r3, #4]
 80183b8:	617b      	str	r3, [r7, #20]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80183ba:	697b      	ldr	r3, [r7, #20]
 80183bc:	881b      	ldrh	r3, [r3, #0]
 80183be:	b29b      	uxth	r3, r3
 80183c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80183c4:	d10c      	bne.n	80183e0 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80183c6:	697b      	ldr	r3, [r7, #20]
 80183c8:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80183ca:	2b06      	cmp	r3, #6
 80183cc:	d108      	bne.n	80183e0 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80183ce:	697b      	ldr	r3, [r7, #20]
 80183d0:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80183d2:	2b04      	cmp	r3, #4
 80183d4:	d104      	bne.n	80183e0 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80183d6:	697b      	ldr	r3, [r7, #20]
 80183d8:	885b      	ldrh	r3, [r3, #2]
 80183da:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80183dc:	2b08      	cmp	r3, #8
 80183de:	d003      	beq.n	80183e8 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80183e0:	6878      	ldr	r0, [r7, #4]
 80183e2:	f7f7 f891 	bl	800f508 <pbuf_free>
    return;
 80183e6:	e05a      	b.n	801849e <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80183e8:	697b      	ldr	r3, [r7, #20]
 80183ea:	330e      	adds	r3, #14
 80183ec:	681b      	ldr	r3, [r3, #0]
 80183ee:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80183f0:	697b      	ldr	r3, [r7, #20]
 80183f2:	3318      	adds	r3, #24
 80183f4:	681b      	ldr	r3, [r3, #0]
 80183f6:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80183f8:	683b      	ldr	r3, [r7, #0]
 80183fa:	3304      	adds	r3, #4
 80183fc:	681b      	ldr	r3, [r3, #0]
 80183fe:	2b00      	cmp	r3, #0
 8018400:	d102      	bne.n	8018408 <etharp_input+0x74>
    for_us = 0;
 8018402:	2300      	movs	r3, #0
 8018404:	74fb      	strb	r3, [r7, #19]
 8018406:	e009      	b.n	801841c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8018408:	68ba      	ldr	r2, [r7, #8]
 801840a:	683b      	ldr	r3, [r7, #0]
 801840c:	3304      	adds	r3, #4
 801840e:	681b      	ldr	r3, [r3, #0]
 8018410:	429a      	cmp	r2, r3
 8018412:	bf0c      	ite	eq
 8018414:	2301      	moveq	r3, #1
 8018416:	2300      	movne	r3, #0
 8018418:	b2db      	uxtb	r3, r3
 801841a:	74fb      	strb	r3, [r7, #19]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801841c:	697b      	ldr	r3, [r7, #20]
 801841e:	f103 0208 	add.w	r2, r3, #8
 8018422:	7cfb      	ldrb	r3, [r7, #19]
 8018424:	2b00      	cmp	r3, #0
 8018426:	d001      	beq.n	801842c <etharp_input+0x98>
 8018428:	2301      	movs	r3, #1
 801842a:	e000      	b.n	801842e <etharp_input+0x9a>
 801842c:	2302      	movs	r3, #2
 801842e:	f107 010c 	add.w	r1, r7, #12
 8018432:	6838      	ldr	r0, [r7, #0]
 8018434:	f7ff fe9e 	bl	8018174 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8018438:	697b      	ldr	r3, [r7, #20]
 801843a:	88db      	ldrh	r3, [r3, #6]
 801843c:	b29b      	uxth	r3, r3
 801843e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8018442:	d003      	beq.n	801844c <etharp_input+0xb8>
 8018444:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018448:	d01e      	beq.n	8018488 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801844a:	e025      	b.n	8018498 <etharp_input+0x104>
      if (for_us) {
 801844c:	7cfb      	ldrb	r3, [r7, #19]
 801844e:	2b00      	cmp	r3, #0
 8018450:	d021      	beq.n	8018496 <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8018452:	683b      	ldr	r3, [r7, #0]
 8018454:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8018458:	697b      	ldr	r3, [r7, #20]
 801845a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801845e:	683b      	ldr	r3, [r7, #0]
 8018460:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 8018464:	683b      	ldr	r3, [r7, #0]
 8018466:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8018468:	697a      	ldr	r2, [r7, #20]
 801846a:	3208      	adds	r2, #8
        etharp_raw(netif,
 801846c:	2102      	movs	r1, #2
 801846e:	9103      	str	r1, [sp, #12]
 8018470:	f107 010c 	add.w	r1, r7, #12
 8018474:	9102      	str	r1, [sp, #8]
 8018476:	9201      	str	r2, [sp, #4]
 8018478:	9300      	str	r3, [sp, #0]
 801847a:	462b      	mov	r3, r5
 801847c:	4622      	mov	r2, r4
 801847e:	4601      	mov	r1, r0
 8018480:	6838      	ldr	r0, [r7, #0]
 8018482:	f000 faef 	bl	8018a64 <etharp_raw>
      break;
 8018486:	e006      	b.n	8018496 <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 8018488:	f107 030c 	add.w	r3, r7, #12
 801848c:	4619      	mov	r1, r3
 801848e:	6838      	ldr	r0, [r7, #0]
 8018490:	f7fe f976 	bl	8016780 <dhcp_arp_reply>
      break;
 8018494:	e000      	b.n	8018498 <etharp_input+0x104>
      break;
 8018496:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8018498:	6878      	ldr	r0, [r7, #4]
 801849a:	f7f7 f835 	bl	800f508 <pbuf_free>
}
 801849e:	3718      	adds	r7, #24
 80184a0:	46bd      	mov	sp, r7
 80184a2:	bdb0      	pop	{r4, r5, r7, pc}
 80184a4:	08020a58 	.word	0x08020a58
 80184a8:	08020ba8 	.word	0x08020ba8
 80184ac:	08020ad0 	.word	0x08020ad0

080184b0 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 80184b0:	b580      	push	{r7, lr}
 80184b2:	b086      	sub	sp, #24
 80184b4:	af02      	add	r7, sp, #8
 80184b6:	60f8      	str	r0, [r7, #12]
 80184b8:	60b9      	str	r1, [r7, #8]
 80184ba:	4613      	mov	r3, r2
 80184bc:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80184be:	79fa      	ldrb	r2, [r7, #7]
 80184c0:	4944      	ldr	r1, [pc, #272]	; (80185d4 <etharp_output_to_arp_index+0x124>)
 80184c2:	4613      	mov	r3, r2
 80184c4:	005b      	lsls	r3, r3, #1
 80184c6:	4413      	add	r3, r2
 80184c8:	00db      	lsls	r3, r3, #3
 80184ca:	440b      	add	r3, r1
 80184cc:	3314      	adds	r3, #20
 80184ce:	781b      	ldrb	r3, [r3, #0]
 80184d0:	2b01      	cmp	r3, #1
 80184d2:	d806      	bhi.n	80184e2 <etharp_output_to_arp_index+0x32>
 80184d4:	4b40      	ldr	r3, [pc, #256]	; (80185d8 <etharp_output_to_arp_index+0x128>)
 80184d6:	f240 22ee 	movw	r2, #750	; 0x2ee
 80184da:	4940      	ldr	r1, [pc, #256]	; (80185dc <etharp_output_to_arp_index+0x12c>)
 80184dc:	4840      	ldr	r0, [pc, #256]	; (80185e0 <etharp_output_to_arp_index+0x130>)
 80184de:	f002 ffcf 	bl	801b480 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80184e2:	79fa      	ldrb	r2, [r7, #7]
 80184e4:	493b      	ldr	r1, [pc, #236]	; (80185d4 <etharp_output_to_arp_index+0x124>)
 80184e6:	4613      	mov	r3, r2
 80184e8:	005b      	lsls	r3, r3, #1
 80184ea:	4413      	add	r3, r2
 80184ec:	00db      	lsls	r3, r3, #3
 80184ee:	440b      	add	r3, r1
 80184f0:	3314      	adds	r3, #20
 80184f2:	781b      	ldrb	r3, [r3, #0]
 80184f4:	2b02      	cmp	r3, #2
 80184f6:	d153      	bne.n	80185a0 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80184f8:	79fa      	ldrb	r2, [r7, #7]
 80184fa:	4936      	ldr	r1, [pc, #216]	; (80185d4 <etharp_output_to_arp_index+0x124>)
 80184fc:	4613      	mov	r3, r2
 80184fe:	005b      	lsls	r3, r3, #1
 8018500:	4413      	add	r3, r2
 8018502:	00db      	lsls	r3, r3, #3
 8018504:	440b      	add	r3, r1
 8018506:	3312      	adds	r3, #18
 8018508:	881b      	ldrh	r3, [r3, #0]
 801850a:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801850e:	d919      	bls.n	8018544 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8018510:	79fa      	ldrb	r2, [r7, #7]
 8018512:	4613      	mov	r3, r2
 8018514:	005b      	lsls	r3, r3, #1
 8018516:	4413      	add	r3, r2
 8018518:	00db      	lsls	r3, r3, #3
 801851a:	4a2e      	ldr	r2, [pc, #184]	; (80185d4 <etharp_output_to_arp_index+0x124>)
 801851c:	4413      	add	r3, r2
 801851e:	3304      	adds	r3, #4
 8018520:	4619      	mov	r1, r3
 8018522:	68f8      	ldr	r0, [r7, #12]
 8018524:	f000 fb4c 	bl	8018bc0 <etharp_request>
 8018528:	4603      	mov	r3, r0
 801852a:	2b00      	cmp	r3, #0
 801852c:	d138      	bne.n	80185a0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801852e:	79fa      	ldrb	r2, [r7, #7]
 8018530:	4928      	ldr	r1, [pc, #160]	; (80185d4 <etharp_output_to_arp_index+0x124>)
 8018532:	4613      	mov	r3, r2
 8018534:	005b      	lsls	r3, r3, #1
 8018536:	4413      	add	r3, r2
 8018538:	00db      	lsls	r3, r3, #3
 801853a:	440b      	add	r3, r1
 801853c:	3314      	adds	r3, #20
 801853e:	2203      	movs	r2, #3
 8018540:	701a      	strb	r2, [r3, #0]
 8018542:	e02d      	b.n	80185a0 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8018544:	79fa      	ldrb	r2, [r7, #7]
 8018546:	4923      	ldr	r1, [pc, #140]	; (80185d4 <etharp_output_to_arp_index+0x124>)
 8018548:	4613      	mov	r3, r2
 801854a:	005b      	lsls	r3, r3, #1
 801854c:	4413      	add	r3, r2
 801854e:	00db      	lsls	r3, r3, #3
 8018550:	440b      	add	r3, r1
 8018552:	3312      	adds	r3, #18
 8018554:	881b      	ldrh	r3, [r3, #0]
 8018556:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801855a:	d321      	bcc.n	80185a0 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801855c:	79fa      	ldrb	r2, [r7, #7]
 801855e:	4613      	mov	r3, r2
 8018560:	005b      	lsls	r3, r3, #1
 8018562:	4413      	add	r3, r2
 8018564:	00db      	lsls	r3, r3, #3
 8018566:	4a1b      	ldr	r2, [pc, #108]	; (80185d4 <etharp_output_to_arp_index+0x124>)
 8018568:	4413      	add	r3, r2
 801856a:	1d19      	adds	r1, r3, #4
 801856c:	79fa      	ldrb	r2, [r7, #7]
 801856e:	4613      	mov	r3, r2
 8018570:	005b      	lsls	r3, r3, #1
 8018572:	4413      	add	r3, r2
 8018574:	00db      	lsls	r3, r3, #3
 8018576:	3308      	adds	r3, #8
 8018578:	4a16      	ldr	r2, [pc, #88]	; (80185d4 <etharp_output_to_arp_index+0x124>)
 801857a:	4413      	add	r3, r2
 801857c:	3304      	adds	r3, #4
 801857e:	461a      	mov	r2, r3
 8018580:	68f8      	ldr	r0, [r7, #12]
 8018582:	f000 fafb 	bl	8018b7c <etharp_request_dst>
 8018586:	4603      	mov	r3, r0
 8018588:	2b00      	cmp	r3, #0
 801858a:	d109      	bne.n	80185a0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801858c:	79fa      	ldrb	r2, [r7, #7]
 801858e:	4911      	ldr	r1, [pc, #68]	; (80185d4 <etharp_output_to_arp_index+0x124>)
 8018590:	4613      	mov	r3, r2
 8018592:	005b      	lsls	r3, r3, #1
 8018594:	4413      	add	r3, r2
 8018596:	00db      	lsls	r3, r3, #3
 8018598:	440b      	add	r3, r1
 801859a:	3314      	adds	r3, #20
 801859c:	2203      	movs	r2, #3
 801859e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80185a0:	68fb      	ldr	r3, [r7, #12]
 80185a2:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 80185a6:	79fa      	ldrb	r2, [r7, #7]
 80185a8:	4613      	mov	r3, r2
 80185aa:	005b      	lsls	r3, r3, #1
 80185ac:	4413      	add	r3, r2
 80185ae:	00db      	lsls	r3, r3, #3
 80185b0:	3308      	adds	r3, #8
 80185b2:	4a08      	ldr	r2, [pc, #32]	; (80185d4 <etharp_output_to_arp_index+0x124>)
 80185b4:	4413      	add	r3, r2
 80185b6:	3304      	adds	r3, #4
 80185b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80185bc:	9200      	str	r2, [sp, #0]
 80185be:	460a      	mov	r2, r1
 80185c0:	68b9      	ldr	r1, [r7, #8]
 80185c2:	68f8      	ldr	r0, [r7, #12]
 80185c4:	f002 f83e 	bl	801a644 <ethernet_output>
 80185c8:	4603      	mov	r3, r0
}
 80185ca:	4618      	mov	r0, r3
 80185cc:	3710      	adds	r7, #16
 80185ce:	46bd      	mov	sp, r7
 80185d0:	bd80      	pop	{r7, pc}
 80185d2:	bf00      	nop
 80185d4:	20013c0c 	.word	0x20013c0c
 80185d8:	08020a58 	.word	0x08020a58
 80185dc:	08020bc8 	.word	0x08020bc8
 80185e0:	08020ad0 	.word	0x08020ad0

080185e4 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80185e4:	b580      	push	{r7, lr}
 80185e6:	b08a      	sub	sp, #40	; 0x28
 80185e8:	af02      	add	r7, sp, #8
 80185ea:	60f8      	str	r0, [r7, #12]
 80185ec:	60b9      	str	r1, [r7, #8]
 80185ee:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80185f0:	687b      	ldr	r3, [r7, #4]
 80185f2:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80185f4:	68fb      	ldr	r3, [r7, #12]
 80185f6:	2b00      	cmp	r3, #0
 80185f8:	d106      	bne.n	8018608 <etharp_output+0x24>
 80185fa:	4b73      	ldr	r3, [pc, #460]	; (80187c8 <etharp_output+0x1e4>)
 80185fc:	f240 321e 	movw	r2, #798	; 0x31e
 8018600:	4972      	ldr	r1, [pc, #456]	; (80187cc <etharp_output+0x1e8>)
 8018602:	4873      	ldr	r0, [pc, #460]	; (80187d0 <etharp_output+0x1ec>)
 8018604:	f002 ff3c 	bl	801b480 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8018608:	68bb      	ldr	r3, [r7, #8]
 801860a:	2b00      	cmp	r3, #0
 801860c:	d106      	bne.n	801861c <etharp_output+0x38>
 801860e:	4b6e      	ldr	r3, [pc, #440]	; (80187c8 <etharp_output+0x1e4>)
 8018610:	f240 321f 	movw	r2, #799	; 0x31f
 8018614:	496f      	ldr	r1, [pc, #444]	; (80187d4 <etharp_output+0x1f0>)
 8018616:	486e      	ldr	r0, [pc, #440]	; (80187d0 <etharp_output+0x1ec>)
 8018618:	f002 ff32 	bl	801b480 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801861c:	687b      	ldr	r3, [r7, #4]
 801861e:	2b00      	cmp	r3, #0
 8018620:	d106      	bne.n	8018630 <etharp_output+0x4c>
 8018622:	4b69      	ldr	r3, [pc, #420]	; (80187c8 <etharp_output+0x1e4>)
 8018624:	f44f 7248 	mov.w	r2, #800	; 0x320
 8018628:	496b      	ldr	r1, [pc, #428]	; (80187d8 <etharp_output+0x1f4>)
 801862a:	4869      	ldr	r0, [pc, #420]	; (80187d0 <etharp_output+0x1ec>)
 801862c:	f002 ff28 	bl	801b480 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8018630:	687b      	ldr	r3, [r7, #4]
 8018632:	681b      	ldr	r3, [r3, #0]
 8018634:	68f9      	ldr	r1, [r7, #12]
 8018636:	4618      	mov	r0, r3
 8018638:	f000 ffbc 	bl	80195b4 <ip4_addr_isbroadcast_u32>
 801863c:	4603      	mov	r3, r0
 801863e:	2b00      	cmp	r3, #0
 8018640:	d002      	beq.n	8018648 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8018642:	4b66      	ldr	r3, [pc, #408]	; (80187dc <etharp_output+0x1f8>)
 8018644:	61fb      	str	r3, [r7, #28]
 8018646:	e0af      	b.n	80187a8 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8018648:	687b      	ldr	r3, [r7, #4]
 801864a:	681b      	ldr	r3, [r3, #0]
 801864c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8018650:	2be0      	cmp	r3, #224	; 0xe0
 8018652:	d118      	bne.n	8018686 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8018654:	2301      	movs	r3, #1
 8018656:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8018658:	2300      	movs	r3, #0
 801865a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801865c:	235e      	movs	r3, #94	; 0x5e
 801865e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8018660:	687b      	ldr	r3, [r7, #4]
 8018662:	3301      	adds	r3, #1
 8018664:	781b      	ldrb	r3, [r3, #0]
 8018666:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801866a:	b2db      	uxtb	r3, r3
 801866c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801866e:	687b      	ldr	r3, [r7, #4]
 8018670:	3302      	adds	r3, #2
 8018672:	781b      	ldrb	r3, [r3, #0]
 8018674:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8018676:	687b      	ldr	r3, [r7, #4]
 8018678:	3303      	adds	r3, #3
 801867a:	781b      	ldrb	r3, [r3, #0]
 801867c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801867e:	f107 0310 	add.w	r3, r7, #16
 8018682:	61fb      	str	r3, [r7, #28]
 8018684:	e090      	b.n	80187a8 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8018686:	687b      	ldr	r3, [r7, #4]
 8018688:	681a      	ldr	r2, [r3, #0]
 801868a:	68fb      	ldr	r3, [r7, #12]
 801868c:	3304      	adds	r3, #4
 801868e:	681b      	ldr	r3, [r3, #0]
 8018690:	405a      	eors	r2, r3
 8018692:	68fb      	ldr	r3, [r7, #12]
 8018694:	3308      	adds	r3, #8
 8018696:	681b      	ldr	r3, [r3, #0]
 8018698:	4013      	ands	r3, r2
 801869a:	2b00      	cmp	r3, #0
 801869c:	d012      	beq.n	80186c4 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801869e:	687b      	ldr	r3, [r7, #4]
 80186a0:	681b      	ldr	r3, [r3, #0]
 80186a2:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80186a4:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 80186a8:	4293      	cmp	r3, r2
 80186aa:	d00b      	beq.n	80186c4 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80186ac:	68fb      	ldr	r3, [r7, #12]
 80186ae:	330c      	adds	r3, #12
 80186b0:	681b      	ldr	r3, [r3, #0]
 80186b2:	2b00      	cmp	r3, #0
 80186b4:	d003      	beq.n	80186be <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80186b6:	68fb      	ldr	r3, [r7, #12]
 80186b8:	330c      	adds	r3, #12
 80186ba:	61bb      	str	r3, [r7, #24]
 80186bc:	e002      	b.n	80186c4 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80186be:	f06f 0303 	mvn.w	r3, #3
 80186c2:	e07d      	b.n	80187c0 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80186c4:	4b46      	ldr	r3, [pc, #280]	; (80187e0 <etharp_output+0x1fc>)
 80186c6:	781b      	ldrb	r3, [r3, #0]
 80186c8:	4619      	mov	r1, r3
 80186ca:	4a46      	ldr	r2, [pc, #280]	; (80187e4 <etharp_output+0x200>)
 80186cc:	460b      	mov	r3, r1
 80186ce:	005b      	lsls	r3, r3, #1
 80186d0:	440b      	add	r3, r1
 80186d2:	00db      	lsls	r3, r3, #3
 80186d4:	4413      	add	r3, r2
 80186d6:	3314      	adds	r3, #20
 80186d8:	781b      	ldrb	r3, [r3, #0]
 80186da:	2b01      	cmp	r3, #1
 80186dc:	d925      	bls.n	801872a <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80186de:	4b40      	ldr	r3, [pc, #256]	; (80187e0 <etharp_output+0x1fc>)
 80186e0:	781b      	ldrb	r3, [r3, #0]
 80186e2:	4619      	mov	r1, r3
 80186e4:	4a3f      	ldr	r2, [pc, #252]	; (80187e4 <etharp_output+0x200>)
 80186e6:	460b      	mov	r3, r1
 80186e8:	005b      	lsls	r3, r3, #1
 80186ea:	440b      	add	r3, r1
 80186ec:	00db      	lsls	r3, r3, #3
 80186ee:	4413      	add	r3, r2
 80186f0:	3308      	adds	r3, #8
 80186f2:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80186f4:	68fa      	ldr	r2, [r7, #12]
 80186f6:	429a      	cmp	r2, r3
 80186f8:	d117      	bne.n	801872a <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80186fa:	69bb      	ldr	r3, [r7, #24]
 80186fc:	681a      	ldr	r2, [r3, #0]
 80186fe:	4b38      	ldr	r3, [pc, #224]	; (80187e0 <etharp_output+0x1fc>)
 8018700:	781b      	ldrb	r3, [r3, #0]
 8018702:	4618      	mov	r0, r3
 8018704:	4937      	ldr	r1, [pc, #220]	; (80187e4 <etharp_output+0x200>)
 8018706:	4603      	mov	r3, r0
 8018708:	005b      	lsls	r3, r3, #1
 801870a:	4403      	add	r3, r0
 801870c:	00db      	lsls	r3, r3, #3
 801870e:	440b      	add	r3, r1
 8018710:	3304      	adds	r3, #4
 8018712:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8018714:	429a      	cmp	r2, r3
 8018716:	d108      	bne.n	801872a <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8018718:	4b31      	ldr	r3, [pc, #196]	; (80187e0 <etharp_output+0x1fc>)
 801871a:	781b      	ldrb	r3, [r3, #0]
 801871c:	461a      	mov	r2, r3
 801871e:	68b9      	ldr	r1, [r7, #8]
 8018720:	68f8      	ldr	r0, [r7, #12]
 8018722:	f7ff fec5 	bl	80184b0 <etharp_output_to_arp_index>
 8018726:	4603      	mov	r3, r0
 8018728:	e04a      	b.n	80187c0 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801872a:	2300      	movs	r3, #0
 801872c:	75fb      	strb	r3, [r7, #23]
 801872e:	e031      	b.n	8018794 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8018730:	7dfa      	ldrb	r2, [r7, #23]
 8018732:	492c      	ldr	r1, [pc, #176]	; (80187e4 <etharp_output+0x200>)
 8018734:	4613      	mov	r3, r2
 8018736:	005b      	lsls	r3, r3, #1
 8018738:	4413      	add	r3, r2
 801873a:	00db      	lsls	r3, r3, #3
 801873c:	440b      	add	r3, r1
 801873e:	3314      	adds	r3, #20
 8018740:	781b      	ldrb	r3, [r3, #0]
 8018742:	2b01      	cmp	r3, #1
 8018744:	d923      	bls.n	801878e <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8018746:	7dfa      	ldrb	r2, [r7, #23]
 8018748:	4926      	ldr	r1, [pc, #152]	; (80187e4 <etharp_output+0x200>)
 801874a:	4613      	mov	r3, r2
 801874c:	005b      	lsls	r3, r3, #1
 801874e:	4413      	add	r3, r2
 8018750:	00db      	lsls	r3, r3, #3
 8018752:	440b      	add	r3, r1
 8018754:	3308      	adds	r3, #8
 8018756:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8018758:	68fa      	ldr	r2, [r7, #12]
 801875a:	429a      	cmp	r2, r3
 801875c:	d117      	bne.n	801878e <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801875e:	69bb      	ldr	r3, [r7, #24]
 8018760:	6819      	ldr	r1, [r3, #0]
 8018762:	7dfa      	ldrb	r2, [r7, #23]
 8018764:	481f      	ldr	r0, [pc, #124]	; (80187e4 <etharp_output+0x200>)
 8018766:	4613      	mov	r3, r2
 8018768:	005b      	lsls	r3, r3, #1
 801876a:	4413      	add	r3, r2
 801876c:	00db      	lsls	r3, r3, #3
 801876e:	4403      	add	r3, r0
 8018770:	3304      	adds	r3, #4
 8018772:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8018774:	4299      	cmp	r1, r3
 8018776:	d10a      	bne.n	801878e <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8018778:	4a19      	ldr	r2, [pc, #100]	; (80187e0 <etharp_output+0x1fc>)
 801877a:	7dfb      	ldrb	r3, [r7, #23]
 801877c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801877e:	7dfb      	ldrb	r3, [r7, #23]
 8018780:	461a      	mov	r2, r3
 8018782:	68b9      	ldr	r1, [r7, #8]
 8018784:	68f8      	ldr	r0, [r7, #12]
 8018786:	f7ff fe93 	bl	80184b0 <etharp_output_to_arp_index>
 801878a:	4603      	mov	r3, r0
 801878c:	e018      	b.n	80187c0 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801878e:	7dfb      	ldrb	r3, [r7, #23]
 8018790:	3301      	adds	r3, #1
 8018792:	75fb      	strb	r3, [r7, #23]
 8018794:	7dfb      	ldrb	r3, [r7, #23]
 8018796:	2b09      	cmp	r3, #9
 8018798:	d9ca      	bls.n	8018730 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801879a:	68ba      	ldr	r2, [r7, #8]
 801879c:	69b9      	ldr	r1, [r7, #24]
 801879e:	68f8      	ldr	r0, [r7, #12]
 80187a0:	f000 f822 	bl	80187e8 <etharp_query>
 80187a4:	4603      	mov	r3, r0
 80187a6:	e00b      	b.n	80187c0 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 80187a8:	68fb      	ldr	r3, [r7, #12]
 80187aa:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 80187ae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80187b2:	9300      	str	r3, [sp, #0]
 80187b4:	69fb      	ldr	r3, [r7, #28]
 80187b6:	68b9      	ldr	r1, [r7, #8]
 80187b8:	68f8      	ldr	r0, [r7, #12]
 80187ba:	f001 ff43 	bl	801a644 <ethernet_output>
 80187be:	4603      	mov	r3, r0
}
 80187c0:	4618      	mov	r0, r3
 80187c2:	3720      	adds	r7, #32
 80187c4:	46bd      	mov	sp, r7
 80187c6:	bd80      	pop	{r7, pc}
 80187c8:	08020a58 	.word	0x08020a58
 80187cc:	08020ba8 	.word	0x08020ba8
 80187d0:	08020ad0 	.word	0x08020ad0
 80187d4:	08020bf8 	.word	0x08020bf8
 80187d8:	08020b98 	.word	0x08020b98
 80187dc:	0806cf88 	.word	0x0806cf88
 80187e0:	20013cfc 	.word	0x20013cfc
 80187e4:	20013c0c 	.word	0x20013c0c

080187e8 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80187e8:	b580      	push	{r7, lr}
 80187ea:	b08c      	sub	sp, #48	; 0x30
 80187ec:	af02      	add	r7, sp, #8
 80187ee:	60f8      	str	r0, [r7, #12]
 80187f0:	60b9      	str	r1, [r7, #8]
 80187f2:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80187f4:	68fb      	ldr	r3, [r7, #12]
 80187f6:	332a      	adds	r3, #42	; 0x2a
 80187f8:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80187fa:	23ff      	movs	r3, #255	; 0xff
 80187fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8018800:	2300      	movs	r3, #0
 8018802:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8018804:	68bb      	ldr	r3, [r7, #8]
 8018806:	681b      	ldr	r3, [r3, #0]
 8018808:	68f9      	ldr	r1, [r7, #12]
 801880a:	4618      	mov	r0, r3
 801880c:	f000 fed2 	bl	80195b4 <ip4_addr_isbroadcast_u32>
 8018810:	4603      	mov	r3, r0
 8018812:	2b00      	cmp	r3, #0
 8018814:	d10c      	bne.n	8018830 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8018816:	68bb      	ldr	r3, [r7, #8]
 8018818:	681b      	ldr	r3, [r3, #0]
 801881a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801881e:	2be0      	cmp	r3, #224	; 0xe0
 8018820:	d006      	beq.n	8018830 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8018822:	68bb      	ldr	r3, [r7, #8]
 8018824:	2b00      	cmp	r3, #0
 8018826:	d003      	beq.n	8018830 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8018828:	68bb      	ldr	r3, [r7, #8]
 801882a:	681b      	ldr	r3, [r3, #0]
 801882c:	2b00      	cmp	r3, #0
 801882e:	d102      	bne.n	8018836 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8018830:	f06f 030f 	mvn.w	r3, #15
 8018834:	e101      	b.n	8018a3a <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8018836:	68fa      	ldr	r2, [r7, #12]
 8018838:	2101      	movs	r1, #1
 801883a:	68b8      	ldr	r0, [r7, #8]
 801883c:	f7ff fb20 	bl	8017e80 <etharp_find_entry>
 8018840:	4603      	mov	r3, r0
 8018842:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8018844:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8018848:	2b00      	cmp	r3, #0
 801884a:	da02      	bge.n	8018852 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 801884c:	8a7b      	ldrh	r3, [r7, #18]
 801884e:	b25b      	sxtb	r3, r3
 8018850:	e0f3      	b.n	8018a3a <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8018852:	8a7b      	ldrh	r3, [r7, #18]
 8018854:	2b7e      	cmp	r3, #126	; 0x7e
 8018856:	d906      	bls.n	8018866 <etharp_query+0x7e>
 8018858:	4b7a      	ldr	r3, [pc, #488]	; (8018a44 <etharp_query+0x25c>)
 801885a:	f240 32c1 	movw	r2, #961	; 0x3c1
 801885e:	497a      	ldr	r1, [pc, #488]	; (8018a48 <etharp_query+0x260>)
 8018860:	487a      	ldr	r0, [pc, #488]	; (8018a4c <etharp_query+0x264>)
 8018862:	f002 fe0d 	bl	801b480 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8018866:	8a7b      	ldrh	r3, [r7, #18]
 8018868:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801886a:	7c7a      	ldrb	r2, [r7, #17]
 801886c:	4978      	ldr	r1, [pc, #480]	; (8018a50 <etharp_query+0x268>)
 801886e:	4613      	mov	r3, r2
 8018870:	005b      	lsls	r3, r3, #1
 8018872:	4413      	add	r3, r2
 8018874:	00db      	lsls	r3, r3, #3
 8018876:	440b      	add	r3, r1
 8018878:	3314      	adds	r3, #20
 801887a:	781b      	ldrb	r3, [r3, #0]
 801887c:	2b00      	cmp	r3, #0
 801887e:	d115      	bne.n	80188ac <etharp_query+0xc4>
    is_new_entry = 1;
 8018880:	2301      	movs	r3, #1
 8018882:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8018884:	7c7a      	ldrb	r2, [r7, #17]
 8018886:	4972      	ldr	r1, [pc, #456]	; (8018a50 <etharp_query+0x268>)
 8018888:	4613      	mov	r3, r2
 801888a:	005b      	lsls	r3, r3, #1
 801888c:	4413      	add	r3, r2
 801888e:	00db      	lsls	r3, r3, #3
 8018890:	440b      	add	r3, r1
 8018892:	3314      	adds	r3, #20
 8018894:	2201      	movs	r2, #1
 8018896:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8018898:	7c7a      	ldrb	r2, [r7, #17]
 801889a:	496d      	ldr	r1, [pc, #436]	; (8018a50 <etharp_query+0x268>)
 801889c:	4613      	mov	r3, r2
 801889e:	005b      	lsls	r3, r3, #1
 80188a0:	4413      	add	r3, r2
 80188a2:	00db      	lsls	r3, r3, #3
 80188a4:	440b      	add	r3, r1
 80188a6:	3308      	adds	r3, #8
 80188a8:	68fa      	ldr	r2, [r7, #12]
 80188aa:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80188ac:	7c7a      	ldrb	r2, [r7, #17]
 80188ae:	4968      	ldr	r1, [pc, #416]	; (8018a50 <etharp_query+0x268>)
 80188b0:	4613      	mov	r3, r2
 80188b2:	005b      	lsls	r3, r3, #1
 80188b4:	4413      	add	r3, r2
 80188b6:	00db      	lsls	r3, r3, #3
 80188b8:	440b      	add	r3, r1
 80188ba:	3314      	adds	r3, #20
 80188bc:	781b      	ldrb	r3, [r3, #0]
 80188be:	2b01      	cmp	r3, #1
 80188c0:	d011      	beq.n	80188e6 <etharp_query+0xfe>
 80188c2:	7c7a      	ldrb	r2, [r7, #17]
 80188c4:	4962      	ldr	r1, [pc, #392]	; (8018a50 <etharp_query+0x268>)
 80188c6:	4613      	mov	r3, r2
 80188c8:	005b      	lsls	r3, r3, #1
 80188ca:	4413      	add	r3, r2
 80188cc:	00db      	lsls	r3, r3, #3
 80188ce:	440b      	add	r3, r1
 80188d0:	3314      	adds	r3, #20
 80188d2:	781b      	ldrb	r3, [r3, #0]
 80188d4:	2b01      	cmp	r3, #1
 80188d6:	d806      	bhi.n	80188e6 <etharp_query+0xfe>
 80188d8:	4b5a      	ldr	r3, [pc, #360]	; (8018a44 <etharp_query+0x25c>)
 80188da:	f240 32cd 	movw	r2, #973	; 0x3cd
 80188de:	495d      	ldr	r1, [pc, #372]	; (8018a54 <etharp_query+0x26c>)
 80188e0:	485a      	ldr	r0, [pc, #360]	; (8018a4c <etharp_query+0x264>)
 80188e2:	f002 fdcd 	bl	801b480 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80188e6:	6a3b      	ldr	r3, [r7, #32]
 80188e8:	2b00      	cmp	r3, #0
 80188ea:	d102      	bne.n	80188f2 <etharp_query+0x10a>
 80188ec:	687b      	ldr	r3, [r7, #4]
 80188ee:	2b00      	cmp	r3, #0
 80188f0:	d10c      	bne.n	801890c <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80188f2:	68b9      	ldr	r1, [r7, #8]
 80188f4:	68f8      	ldr	r0, [r7, #12]
 80188f6:	f000 f963 	bl	8018bc0 <etharp_request>
 80188fa:	4603      	mov	r3, r0
 80188fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8018900:	687b      	ldr	r3, [r7, #4]
 8018902:	2b00      	cmp	r3, #0
 8018904:	d102      	bne.n	801890c <etharp_query+0x124>
      return result;
 8018906:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801890a:	e096      	b.n	8018a3a <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801890c:	687b      	ldr	r3, [r7, #4]
 801890e:	2b00      	cmp	r3, #0
 8018910:	d106      	bne.n	8018920 <etharp_query+0x138>
 8018912:	4b4c      	ldr	r3, [pc, #304]	; (8018a44 <etharp_query+0x25c>)
 8018914:	f240 32e1 	movw	r2, #993	; 0x3e1
 8018918:	494f      	ldr	r1, [pc, #316]	; (8018a58 <etharp_query+0x270>)
 801891a:	484c      	ldr	r0, [pc, #304]	; (8018a4c <etharp_query+0x264>)
 801891c:	f002 fdb0 	bl	801b480 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8018920:	7c7a      	ldrb	r2, [r7, #17]
 8018922:	494b      	ldr	r1, [pc, #300]	; (8018a50 <etharp_query+0x268>)
 8018924:	4613      	mov	r3, r2
 8018926:	005b      	lsls	r3, r3, #1
 8018928:	4413      	add	r3, r2
 801892a:	00db      	lsls	r3, r3, #3
 801892c:	440b      	add	r3, r1
 801892e:	3314      	adds	r3, #20
 8018930:	781b      	ldrb	r3, [r3, #0]
 8018932:	2b01      	cmp	r3, #1
 8018934:	d917      	bls.n	8018966 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8018936:	4a49      	ldr	r2, [pc, #292]	; (8018a5c <etharp_query+0x274>)
 8018938:	7c7b      	ldrb	r3, [r7, #17]
 801893a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801893c:	7c7a      	ldrb	r2, [r7, #17]
 801893e:	4613      	mov	r3, r2
 8018940:	005b      	lsls	r3, r3, #1
 8018942:	4413      	add	r3, r2
 8018944:	00db      	lsls	r3, r3, #3
 8018946:	3308      	adds	r3, #8
 8018948:	4a41      	ldr	r2, [pc, #260]	; (8018a50 <etharp_query+0x268>)
 801894a:	4413      	add	r3, r2
 801894c:	3304      	adds	r3, #4
 801894e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8018952:	9200      	str	r2, [sp, #0]
 8018954:	697a      	ldr	r2, [r7, #20]
 8018956:	6879      	ldr	r1, [r7, #4]
 8018958:	68f8      	ldr	r0, [r7, #12]
 801895a:	f001 fe73 	bl	801a644 <ethernet_output>
 801895e:	4603      	mov	r3, r0
 8018960:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8018964:	e067      	b.n	8018a36 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8018966:	7c7a      	ldrb	r2, [r7, #17]
 8018968:	4939      	ldr	r1, [pc, #228]	; (8018a50 <etharp_query+0x268>)
 801896a:	4613      	mov	r3, r2
 801896c:	005b      	lsls	r3, r3, #1
 801896e:	4413      	add	r3, r2
 8018970:	00db      	lsls	r3, r3, #3
 8018972:	440b      	add	r3, r1
 8018974:	3314      	adds	r3, #20
 8018976:	781b      	ldrb	r3, [r3, #0]
 8018978:	2b01      	cmp	r3, #1
 801897a:	d15c      	bne.n	8018a36 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801897c:	2300      	movs	r3, #0
 801897e:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8018980:	687b      	ldr	r3, [r7, #4]
 8018982:	61fb      	str	r3, [r7, #28]
    while (p) {
 8018984:	e01c      	b.n	80189c0 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8018986:	69fb      	ldr	r3, [r7, #28]
 8018988:	895a      	ldrh	r2, [r3, #10]
 801898a:	69fb      	ldr	r3, [r7, #28]
 801898c:	891b      	ldrh	r3, [r3, #8]
 801898e:	429a      	cmp	r2, r3
 8018990:	d10a      	bne.n	80189a8 <etharp_query+0x1c0>
 8018992:	69fb      	ldr	r3, [r7, #28]
 8018994:	681b      	ldr	r3, [r3, #0]
 8018996:	2b00      	cmp	r3, #0
 8018998:	d006      	beq.n	80189a8 <etharp_query+0x1c0>
 801899a:	4b2a      	ldr	r3, [pc, #168]	; (8018a44 <etharp_query+0x25c>)
 801899c:	f240 32f1 	movw	r2, #1009	; 0x3f1
 80189a0:	492f      	ldr	r1, [pc, #188]	; (8018a60 <etharp_query+0x278>)
 80189a2:	482a      	ldr	r0, [pc, #168]	; (8018a4c <etharp_query+0x264>)
 80189a4:	f002 fd6c 	bl	801b480 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 80189a8:	69fb      	ldr	r3, [r7, #28]
 80189aa:	7b1b      	ldrb	r3, [r3, #12]
 80189ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80189b0:	2b00      	cmp	r3, #0
 80189b2:	d002      	beq.n	80189ba <etharp_query+0x1d2>
        copy_needed = 1;
 80189b4:	2301      	movs	r3, #1
 80189b6:	61bb      	str	r3, [r7, #24]
        break;
 80189b8:	e005      	b.n	80189c6 <etharp_query+0x1de>
      }
      p = p->next;
 80189ba:	69fb      	ldr	r3, [r7, #28]
 80189bc:	681b      	ldr	r3, [r3, #0]
 80189be:	61fb      	str	r3, [r7, #28]
    while (p) {
 80189c0:	69fb      	ldr	r3, [r7, #28]
 80189c2:	2b00      	cmp	r3, #0
 80189c4:	d1df      	bne.n	8018986 <etharp_query+0x19e>
    }
    if (copy_needed) {
 80189c6:	69bb      	ldr	r3, [r7, #24]
 80189c8:	2b00      	cmp	r3, #0
 80189ca:	d007      	beq.n	80189dc <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 80189cc:	687a      	ldr	r2, [r7, #4]
 80189ce:	f44f 7120 	mov.w	r1, #640	; 0x280
 80189d2:	200e      	movs	r0, #14
 80189d4:	f7f7 f948 	bl	800fc68 <pbuf_clone>
 80189d8:	61f8      	str	r0, [r7, #28]
 80189da:	e004      	b.n	80189e6 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80189dc:	687b      	ldr	r3, [r7, #4]
 80189de:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80189e0:	69f8      	ldr	r0, [r7, #28]
 80189e2:	f7f6 fe37 	bl	800f654 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 80189e6:	69fb      	ldr	r3, [r7, #28]
 80189e8:	2b00      	cmp	r3, #0
 80189ea:	d021      	beq.n	8018a30 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80189ec:	7c7a      	ldrb	r2, [r7, #17]
 80189ee:	4918      	ldr	r1, [pc, #96]	; (8018a50 <etharp_query+0x268>)
 80189f0:	4613      	mov	r3, r2
 80189f2:	005b      	lsls	r3, r3, #1
 80189f4:	4413      	add	r3, r2
 80189f6:	00db      	lsls	r3, r3, #3
 80189f8:	440b      	add	r3, r1
 80189fa:	681b      	ldr	r3, [r3, #0]
 80189fc:	2b00      	cmp	r3, #0
 80189fe:	d00a      	beq.n	8018a16 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8018a00:	7c7a      	ldrb	r2, [r7, #17]
 8018a02:	4913      	ldr	r1, [pc, #76]	; (8018a50 <etharp_query+0x268>)
 8018a04:	4613      	mov	r3, r2
 8018a06:	005b      	lsls	r3, r3, #1
 8018a08:	4413      	add	r3, r2
 8018a0a:	00db      	lsls	r3, r3, #3
 8018a0c:	440b      	add	r3, r1
 8018a0e:	681b      	ldr	r3, [r3, #0]
 8018a10:	4618      	mov	r0, r3
 8018a12:	f7f6 fd79 	bl	800f508 <pbuf_free>
      }
      arp_table[i].q = p;
 8018a16:	7c7a      	ldrb	r2, [r7, #17]
 8018a18:	490d      	ldr	r1, [pc, #52]	; (8018a50 <etharp_query+0x268>)
 8018a1a:	4613      	mov	r3, r2
 8018a1c:	005b      	lsls	r3, r3, #1
 8018a1e:	4413      	add	r3, r2
 8018a20:	00db      	lsls	r3, r3, #3
 8018a22:	440b      	add	r3, r1
 8018a24:	69fa      	ldr	r2, [r7, #28]
 8018a26:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8018a28:	2300      	movs	r3, #0
 8018a2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8018a2e:	e002      	b.n	8018a36 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8018a30:	23ff      	movs	r3, #255	; 0xff
 8018a32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8018a36:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8018a3a:	4618      	mov	r0, r3
 8018a3c:	3728      	adds	r7, #40	; 0x28
 8018a3e:	46bd      	mov	sp, r7
 8018a40:	bd80      	pop	{r7, pc}
 8018a42:	bf00      	nop
 8018a44:	08020a58 	.word	0x08020a58
 8018a48:	08020c04 	.word	0x08020c04
 8018a4c:	08020ad0 	.word	0x08020ad0
 8018a50:	20013c0c 	.word	0x20013c0c
 8018a54:	08020c14 	.word	0x08020c14
 8018a58:	08020bf8 	.word	0x08020bf8
 8018a5c:	20013cfc 	.word	0x20013cfc
 8018a60:	08020c3c 	.word	0x08020c3c

08018a64 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8018a64:	b580      	push	{r7, lr}
 8018a66:	b08a      	sub	sp, #40	; 0x28
 8018a68:	af02      	add	r7, sp, #8
 8018a6a:	60f8      	str	r0, [r7, #12]
 8018a6c:	60b9      	str	r1, [r7, #8]
 8018a6e:	607a      	str	r2, [r7, #4]
 8018a70:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8018a72:	2300      	movs	r3, #0
 8018a74:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8018a76:	68fb      	ldr	r3, [r7, #12]
 8018a78:	2b00      	cmp	r3, #0
 8018a7a:	d106      	bne.n	8018a8a <etharp_raw+0x26>
 8018a7c:	4b3a      	ldr	r3, [pc, #232]	; (8018b68 <etharp_raw+0x104>)
 8018a7e:	f240 4257 	movw	r2, #1111	; 0x457
 8018a82:	493a      	ldr	r1, [pc, #232]	; (8018b6c <etharp_raw+0x108>)
 8018a84:	483a      	ldr	r0, [pc, #232]	; (8018b70 <etharp_raw+0x10c>)
 8018a86:	f002 fcfb 	bl	801b480 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8018a8a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8018a8e:	211c      	movs	r1, #28
 8018a90:	200e      	movs	r0, #14
 8018a92:	f7f6 fa51 	bl	800ef38 <pbuf_alloc>
 8018a96:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8018a98:	69bb      	ldr	r3, [r7, #24]
 8018a9a:	2b00      	cmp	r3, #0
 8018a9c:	d102      	bne.n	8018aa4 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8018a9e:	f04f 33ff 	mov.w	r3, #4294967295
 8018aa2:	e05d      	b.n	8018b60 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8018aa4:	69bb      	ldr	r3, [r7, #24]
 8018aa6:	895b      	ldrh	r3, [r3, #10]
 8018aa8:	2b1b      	cmp	r3, #27
 8018aaa:	d806      	bhi.n	8018aba <etharp_raw+0x56>
 8018aac:	4b2e      	ldr	r3, [pc, #184]	; (8018b68 <etharp_raw+0x104>)
 8018aae:	f240 4262 	movw	r2, #1122	; 0x462
 8018ab2:	4930      	ldr	r1, [pc, #192]	; (8018b74 <etharp_raw+0x110>)
 8018ab4:	482e      	ldr	r0, [pc, #184]	; (8018b70 <etharp_raw+0x10c>)
 8018ab6:	f002 fce3 	bl	801b480 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8018aba:	69bb      	ldr	r3, [r7, #24]
 8018abc:	685b      	ldr	r3, [r3, #4]
 8018abe:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8018ac0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8018ac2:	4618      	mov	r0, r3
 8018ac4:	f7f4 fffe 	bl	800dac4 <lwip_htons>
 8018ac8:	4603      	mov	r3, r0
 8018aca:	461a      	mov	r2, r3
 8018acc:	697b      	ldr	r3, [r7, #20]
 8018ace:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8018ad0:	68fb      	ldr	r3, [r7, #12]
 8018ad2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8018ad6:	2b06      	cmp	r3, #6
 8018ad8:	d006      	beq.n	8018ae8 <etharp_raw+0x84>
 8018ada:	4b23      	ldr	r3, [pc, #140]	; (8018b68 <etharp_raw+0x104>)
 8018adc:	f240 4269 	movw	r2, #1129	; 0x469
 8018ae0:	4925      	ldr	r1, [pc, #148]	; (8018b78 <etharp_raw+0x114>)
 8018ae2:	4823      	ldr	r0, [pc, #140]	; (8018b70 <etharp_raw+0x10c>)
 8018ae4:	f002 fccc 	bl	801b480 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8018ae8:	697b      	ldr	r3, [r7, #20]
 8018aea:	3308      	adds	r3, #8
 8018aec:	2206      	movs	r2, #6
 8018aee:	6839      	ldr	r1, [r7, #0]
 8018af0:	4618      	mov	r0, r3
 8018af2:	f001 ff4f 	bl	801a994 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8018af6:	697b      	ldr	r3, [r7, #20]
 8018af8:	3312      	adds	r3, #18
 8018afa:	2206      	movs	r2, #6
 8018afc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8018afe:	4618      	mov	r0, r3
 8018b00:	f001 ff48 	bl	801a994 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8018b04:	697b      	ldr	r3, [r7, #20]
 8018b06:	330e      	adds	r3, #14
 8018b08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018b0a:	6812      	ldr	r2, [r2, #0]
 8018b0c:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8018b0e:	697b      	ldr	r3, [r7, #20]
 8018b10:	3318      	adds	r3, #24
 8018b12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018b14:	6812      	ldr	r2, [r2, #0]
 8018b16:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8018b18:	697b      	ldr	r3, [r7, #20]
 8018b1a:	2200      	movs	r2, #0
 8018b1c:	701a      	strb	r2, [r3, #0]
 8018b1e:	2200      	movs	r2, #0
 8018b20:	f042 0201 	orr.w	r2, r2, #1
 8018b24:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8018b26:	697b      	ldr	r3, [r7, #20]
 8018b28:	2200      	movs	r2, #0
 8018b2a:	f042 0208 	orr.w	r2, r2, #8
 8018b2e:	709a      	strb	r2, [r3, #2]
 8018b30:	2200      	movs	r2, #0
 8018b32:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8018b34:	697b      	ldr	r3, [r7, #20]
 8018b36:	2206      	movs	r2, #6
 8018b38:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8018b3a:	697b      	ldr	r3, [r7, #20]
 8018b3c:	2204      	movs	r2, #4
 8018b3e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8018b40:	f640 0306 	movw	r3, #2054	; 0x806
 8018b44:	9300      	str	r3, [sp, #0]
 8018b46:	687b      	ldr	r3, [r7, #4]
 8018b48:	68ba      	ldr	r2, [r7, #8]
 8018b4a:	69b9      	ldr	r1, [r7, #24]
 8018b4c:	68f8      	ldr	r0, [r7, #12]
 8018b4e:	f001 fd79 	bl	801a644 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8018b52:	69b8      	ldr	r0, [r7, #24]
 8018b54:	f7f6 fcd8 	bl	800f508 <pbuf_free>
  p = NULL;
 8018b58:	2300      	movs	r3, #0
 8018b5a:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8018b5c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8018b60:	4618      	mov	r0, r3
 8018b62:	3720      	adds	r7, #32
 8018b64:	46bd      	mov	sp, r7
 8018b66:	bd80      	pop	{r7, pc}
 8018b68:	08020a58 	.word	0x08020a58
 8018b6c:	08020ba8 	.word	0x08020ba8
 8018b70:	08020ad0 	.word	0x08020ad0
 8018b74:	08020c58 	.word	0x08020c58
 8018b78:	08020c8c 	.word	0x08020c8c

08018b7c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8018b7c:	b580      	push	{r7, lr}
 8018b7e:	b088      	sub	sp, #32
 8018b80:	af04      	add	r7, sp, #16
 8018b82:	60f8      	str	r0, [r7, #12]
 8018b84:	60b9      	str	r1, [r7, #8]
 8018b86:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8018b88:	68fb      	ldr	r3, [r7, #12]
 8018b8a:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8018b8e:	68fb      	ldr	r3, [r7, #12]
 8018b90:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8018b94:	68fb      	ldr	r3, [r7, #12]
 8018b96:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8018b98:	2201      	movs	r2, #1
 8018b9a:	9203      	str	r2, [sp, #12]
 8018b9c:	68ba      	ldr	r2, [r7, #8]
 8018b9e:	9202      	str	r2, [sp, #8]
 8018ba0:	4a06      	ldr	r2, [pc, #24]	; (8018bbc <etharp_request_dst+0x40>)
 8018ba2:	9201      	str	r2, [sp, #4]
 8018ba4:	9300      	str	r3, [sp, #0]
 8018ba6:	4603      	mov	r3, r0
 8018ba8:	687a      	ldr	r2, [r7, #4]
 8018baa:	68f8      	ldr	r0, [r7, #12]
 8018bac:	f7ff ff5a 	bl	8018a64 <etharp_raw>
 8018bb0:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8018bb2:	4618      	mov	r0, r3
 8018bb4:	3710      	adds	r7, #16
 8018bb6:	46bd      	mov	sp, r7
 8018bb8:	bd80      	pop	{r7, pc}
 8018bba:	bf00      	nop
 8018bbc:	0806cf90 	.word	0x0806cf90

08018bc0 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8018bc0:	b580      	push	{r7, lr}
 8018bc2:	b082      	sub	sp, #8
 8018bc4:	af00      	add	r7, sp, #0
 8018bc6:	6078      	str	r0, [r7, #4]
 8018bc8:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8018bca:	4a05      	ldr	r2, [pc, #20]	; (8018be0 <etharp_request+0x20>)
 8018bcc:	6839      	ldr	r1, [r7, #0]
 8018bce:	6878      	ldr	r0, [r7, #4]
 8018bd0:	f7ff ffd4 	bl	8018b7c <etharp_request_dst>
 8018bd4:	4603      	mov	r3, r0
}
 8018bd6:	4618      	mov	r0, r3
 8018bd8:	3708      	adds	r7, #8
 8018bda:	46bd      	mov	sp, r7
 8018bdc:	bd80      	pop	{r7, pc}
 8018bde:	bf00      	nop
 8018be0:	0806cf88 	.word	0x0806cf88

08018be4 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8018be4:	b580      	push	{r7, lr}
 8018be6:	b08e      	sub	sp, #56	; 0x38
 8018be8:	af04      	add	r7, sp, #16
 8018bea:	6078      	str	r0, [r7, #4]
 8018bec:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8018bee:	4b8e      	ldr	r3, [pc, #568]	; (8018e28 <icmp_input+0x244>)
 8018bf0:	689b      	ldr	r3, [r3, #8]
 8018bf2:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8018bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018bf6:	781b      	ldrb	r3, [r3, #0]
 8018bf8:	f003 030f 	and.w	r3, r3, #15
 8018bfc:	b2db      	uxtb	r3, r3
 8018bfe:	009b      	lsls	r3, r3, #2
 8018c00:	b2db      	uxtb	r3, r3
 8018c02:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8018c04:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018c06:	2b13      	cmp	r3, #19
 8018c08:	f240 80f6 	bls.w	8018df8 <icmp_input+0x214>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8018c0c:	687b      	ldr	r3, [r7, #4]
 8018c0e:	895b      	ldrh	r3, [r3, #10]
 8018c10:	2b03      	cmp	r3, #3
 8018c12:	f240 80f3 	bls.w	8018dfc <icmp_input+0x218>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8018c16:	687b      	ldr	r3, [r7, #4]
 8018c18:	685b      	ldr	r3, [r3, #4]
 8018c1a:	781b      	ldrb	r3, [r3, #0]
 8018c1c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
 8018c20:	687b      	ldr	r3, [r7, #4]
 8018c22:	685b      	ldr	r3, [r3, #4]
 8018c24:	785b      	ldrb	r3, [r3, #1]
 8018c26:	f887 3020 	strb.w	r3, [r7, #32]
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8018c2a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8018c2e:	2b00      	cmp	r3, #0
 8018c30:	f000 80db 	beq.w	8018dea <icmp_input+0x206>
 8018c34:	2b08      	cmp	r3, #8
 8018c36:	f040 80db 	bne.w	8018df0 <icmp_input+0x20c>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8018c3a:	4b7c      	ldr	r3, [pc, #496]	; (8018e2c <icmp_input+0x248>)
 8018c3c:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8018c3e:	4b7a      	ldr	r3, [pc, #488]	; (8018e28 <icmp_input+0x244>)
 8018c40:	695b      	ldr	r3, [r3, #20]
 8018c42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8018c46:	2be0      	cmp	r3, #224	; 0xe0
 8018c48:	f000 80df 	beq.w	8018e0a <icmp_input+0x226>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8018c4c:	4b76      	ldr	r3, [pc, #472]	; (8018e28 <icmp_input+0x244>)
 8018c4e:	695b      	ldr	r3, [r3, #20]
 8018c50:	4a75      	ldr	r2, [pc, #468]	; (8018e28 <icmp_input+0x244>)
 8018c52:	6812      	ldr	r2, [r2, #0]
 8018c54:	4611      	mov	r1, r2
 8018c56:	4618      	mov	r0, r3
 8018c58:	f000 fcac 	bl	80195b4 <ip4_addr_isbroadcast_u32>
 8018c5c:	4603      	mov	r3, r0
 8018c5e:	2b00      	cmp	r3, #0
 8018c60:	f040 80d5 	bne.w	8018e0e <icmp_input+0x22a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8018c64:	687b      	ldr	r3, [r7, #4]
 8018c66:	891b      	ldrh	r3, [r3, #8]
 8018c68:	2b07      	cmp	r3, #7
 8018c6a:	f240 80c9 	bls.w	8018e00 <icmp_input+0x21c>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 8018c6e:	6878      	ldr	r0, [r7, #4]
 8018c70:	f7f5 f882 	bl	800dd78 <inet_chksum_pbuf>
 8018c74:	4603      	mov	r3, r0
 8018c76:	2b00      	cmp	r3, #0
 8018c78:	d003      	beq.n	8018c82 <icmp_input+0x9e>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 8018c7a:	6878      	ldr	r0, [r7, #4]
 8018c7c:	f7f6 fc44 	bl	800f508 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 8018c80:	e0ce      	b.n	8018e20 <icmp_input+0x23c>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8018c82:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018c84:	330e      	adds	r3, #14
 8018c86:	4619      	mov	r1, r3
 8018c88:	6878      	ldr	r0, [r7, #4]
 8018c8a:	f7f6 fba7 	bl	800f3dc <pbuf_add_header>
 8018c8e:	4603      	mov	r3, r0
 8018c90:	2b00      	cmp	r3, #0
 8018c92:	d04b      	beq.n	8018d2c <icmp_input+0x148>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8018c94:	687b      	ldr	r3, [r7, #4]
 8018c96:	891a      	ldrh	r2, [r3, #8]
 8018c98:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018c9a:	4413      	add	r3, r2
 8018c9c:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8018c9e:	687b      	ldr	r3, [r7, #4]
 8018ca0:	891b      	ldrh	r3, [r3, #8]
 8018ca2:	8b7a      	ldrh	r2, [r7, #26]
 8018ca4:	429a      	cmp	r2, r3
 8018ca6:	f0c0 80b4 	bcc.w	8018e12 <icmp_input+0x22e>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8018caa:	8b7b      	ldrh	r3, [r7, #26]
 8018cac:	f44f 7220 	mov.w	r2, #640	; 0x280
 8018cb0:	4619      	mov	r1, r3
 8018cb2:	200e      	movs	r0, #14
 8018cb4:	f7f6 f940 	bl	800ef38 <pbuf_alloc>
 8018cb8:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8018cba:	697b      	ldr	r3, [r7, #20]
 8018cbc:	2b00      	cmp	r3, #0
 8018cbe:	f000 80aa 	beq.w	8018e16 <icmp_input+0x232>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8018cc2:	697b      	ldr	r3, [r7, #20]
 8018cc4:	895b      	ldrh	r3, [r3, #10]
 8018cc6:	461a      	mov	r2, r3
 8018cc8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018cca:	3308      	adds	r3, #8
 8018ccc:	429a      	cmp	r2, r3
 8018cce:	d203      	bcs.n	8018cd8 <icmp_input+0xf4>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8018cd0:	6978      	ldr	r0, [r7, #20]
 8018cd2:	f7f6 fc19 	bl	800f508 <pbuf_free>
          goto icmperr;
 8018cd6:	e09f      	b.n	8018e18 <icmp_input+0x234>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8018cd8:	697b      	ldr	r3, [r7, #20]
 8018cda:	685b      	ldr	r3, [r3, #4]
 8018cdc:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8018cde:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8018ce0:	4618      	mov	r0, r3
 8018ce2:	f001 fe57 	bl	801a994 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8018ce6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018ce8:	4619      	mov	r1, r3
 8018cea:	6978      	ldr	r0, [r7, #20]
 8018cec:	f7f6 fb86 	bl	800f3fc <pbuf_remove_header>
 8018cf0:	4603      	mov	r3, r0
 8018cf2:	2b00      	cmp	r3, #0
 8018cf4:	d009      	beq.n	8018d0a <icmp_input+0x126>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8018cf6:	4b4e      	ldr	r3, [pc, #312]	; (8018e30 <icmp_input+0x24c>)
 8018cf8:	22b6      	movs	r2, #182	; 0xb6
 8018cfa:	494e      	ldr	r1, [pc, #312]	; (8018e34 <icmp_input+0x250>)
 8018cfc:	484e      	ldr	r0, [pc, #312]	; (8018e38 <icmp_input+0x254>)
 8018cfe:	f002 fbbf 	bl	801b480 <iprintf>
          pbuf_free(r);
 8018d02:	6978      	ldr	r0, [r7, #20]
 8018d04:	f7f6 fc00 	bl	800f508 <pbuf_free>
          goto icmperr;
 8018d08:	e086      	b.n	8018e18 <icmp_input+0x234>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8018d0a:	6879      	ldr	r1, [r7, #4]
 8018d0c:	6978      	ldr	r0, [r7, #20]
 8018d0e:	f7f6 fd2f 	bl	800f770 <pbuf_copy>
 8018d12:	4603      	mov	r3, r0
 8018d14:	2b00      	cmp	r3, #0
 8018d16:	d003      	beq.n	8018d20 <icmp_input+0x13c>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8018d18:	6978      	ldr	r0, [r7, #20]
 8018d1a:	f7f6 fbf5 	bl	800f508 <pbuf_free>
          goto icmperr;
 8018d1e:	e07b      	b.n	8018e18 <icmp_input+0x234>
        }
        /* free the original p */
        pbuf_free(p);
 8018d20:	6878      	ldr	r0, [r7, #4]
 8018d22:	f7f6 fbf1 	bl	800f508 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8018d26:	697b      	ldr	r3, [r7, #20]
 8018d28:	607b      	str	r3, [r7, #4]
 8018d2a:	e00f      	b.n	8018d4c <icmp_input+0x168>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8018d2c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018d2e:	330e      	adds	r3, #14
 8018d30:	4619      	mov	r1, r3
 8018d32:	6878      	ldr	r0, [r7, #4]
 8018d34:	f7f6 fb62 	bl	800f3fc <pbuf_remove_header>
 8018d38:	4603      	mov	r3, r0
 8018d3a:	2b00      	cmp	r3, #0
 8018d3c:	d006      	beq.n	8018d4c <icmp_input+0x168>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8018d3e:	4b3c      	ldr	r3, [pc, #240]	; (8018e30 <icmp_input+0x24c>)
 8018d40:	22c7      	movs	r2, #199	; 0xc7
 8018d42:	493e      	ldr	r1, [pc, #248]	; (8018e3c <icmp_input+0x258>)
 8018d44:	483c      	ldr	r0, [pc, #240]	; (8018e38 <icmp_input+0x254>)
 8018d46:	f002 fb9b 	bl	801b480 <iprintf>
          goto icmperr;
 8018d4a:	e065      	b.n	8018e18 <icmp_input+0x234>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8018d4c:	687b      	ldr	r3, [r7, #4]
 8018d4e:	685b      	ldr	r3, [r3, #4]
 8018d50:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8018d52:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018d54:	4619      	mov	r1, r3
 8018d56:	6878      	ldr	r0, [r7, #4]
 8018d58:	f7f6 fb40 	bl	800f3dc <pbuf_add_header>
 8018d5c:	4603      	mov	r3, r0
 8018d5e:	2b00      	cmp	r3, #0
 8018d60:	d145      	bne.n	8018dee <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8018d62:	687b      	ldr	r3, [r7, #4]
 8018d64:	685b      	ldr	r3, [r3, #4]
 8018d66:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8018d68:	69fb      	ldr	r3, [r7, #28]
 8018d6a:	681a      	ldr	r2, [r3, #0]
 8018d6c:	68fb      	ldr	r3, [r7, #12]
 8018d6e:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8018d70:	4b2d      	ldr	r3, [pc, #180]	; (8018e28 <icmp_input+0x244>)
 8018d72:	691a      	ldr	r2, [r3, #16]
 8018d74:	68fb      	ldr	r3, [r7, #12]
 8018d76:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8018d78:	693b      	ldr	r3, [r7, #16]
 8018d7a:	2200      	movs	r2, #0
 8018d7c:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8018d7e:	693b      	ldr	r3, [r7, #16]
 8018d80:	885b      	ldrh	r3, [r3, #2]
 8018d82:	b29b      	uxth	r3, r3
 8018d84:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8018d88:	4293      	cmp	r3, r2
 8018d8a:	d907      	bls.n	8018d9c <icmp_input+0x1b8>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 8018d8c:	693b      	ldr	r3, [r7, #16]
 8018d8e:	885b      	ldrh	r3, [r3, #2]
 8018d90:	b29b      	uxth	r3, r3
 8018d92:	3309      	adds	r3, #9
 8018d94:	b29a      	uxth	r2, r3
 8018d96:	693b      	ldr	r3, [r7, #16]
 8018d98:	805a      	strh	r2, [r3, #2]
 8018d9a:	e006      	b.n	8018daa <icmp_input+0x1c6>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 8018d9c:	693b      	ldr	r3, [r7, #16]
 8018d9e:	885b      	ldrh	r3, [r3, #2]
 8018da0:	b29b      	uxth	r3, r3
 8018da2:	3308      	adds	r3, #8
 8018da4:	b29a      	uxth	r2, r3
 8018da6:	693b      	ldr	r3, [r7, #16]
 8018da8:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8018daa:	68fb      	ldr	r3, [r7, #12]
 8018dac:	22ff      	movs	r2, #255	; 0xff
 8018dae:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8018db0:	68fb      	ldr	r3, [r7, #12]
 8018db2:	2200      	movs	r2, #0
 8018db4:	729a      	strb	r2, [r3, #10]
 8018db6:	2200      	movs	r2, #0
 8018db8:	72da      	strb	r2, [r3, #11]
#if CHECKSUM_GEN_IP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_IP) {
          IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, hlen));
 8018dba:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018dbc:	4619      	mov	r1, r3
 8018dbe:	68f8      	ldr	r0, [r7, #12]
 8018dc0:	f7f4 ffc8 	bl	800dd54 <inet_chksum>
 8018dc4:	4603      	mov	r3, r0
 8018dc6:	461a      	mov	r2, r3
 8018dc8:	68fb      	ldr	r3, [r7, #12]
 8018dca:	815a      	strh	r2, [r3, #10]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8018dcc:	683b      	ldr	r3, [r7, #0]
 8018dce:	9302      	str	r3, [sp, #8]
 8018dd0:	2301      	movs	r3, #1
 8018dd2:	9301      	str	r3, [sp, #4]
 8018dd4:	2300      	movs	r3, #0
 8018dd6:	9300      	str	r3, [sp, #0]
 8018dd8:	23ff      	movs	r3, #255	; 0xff
 8018dda:	2200      	movs	r2, #0
 8018ddc:	69f9      	ldr	r1, [r7, #28]
 8018dde:	6878      	ldr	r0, [r7, #4]
 8018de0:	f000 faaa 	bl	8019338 <ip4_output_if>
 8018de4:	4603      	mov	r3, r0
 8018de6:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8018de8:	e001      	b.n	8018dee <icmp_input+0x20a>
      break;
 8018dea:	bf00      	nop
 8018dec:	e000      	b.n	8018df0 <icmp_input+0x20c>
      break;
 8018dee:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8018df0:	6878      	ldr	r0, [r7, #4]
 8018df2:	f7f6 fb89 	bl	800f508 <pbuf_free>
  return;
 8018df6:	e013      	b.n	8018e20 <icmp_input+0x23c>
    goto lenerr;
 8018df8:	bf00      	nop
 8018dfa:	e002      	b.n	8018e02 <icmp_input+0x21e>
    goto lenerr;
 8018dfc:	bf00      	nop
 8018dfe:	e000      	b.n	8018e02 <icmp_input+0x21e>
        goto lenerr;
 8018e00:	bf00      	nop
lenerr:
  pbuf_free(p);
 8018e02:	6878      	ldr	r0, [r7, #4]
 8018e04:	f7f6 fb80 	bl	800f508 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8018e08:	e00a      	b.n	8018e20 <icmp_input+0x23c>
        goto icmperr;
 8018e0a:	bf00      	nop
 8018e0c:	e004      	b.n	8018e18 <icmp_input+0x234>
        goto icmperr;
 8018e0e:	bf00      	nop
 8018e10:	e002      	b.n	8018e18 <icmp_input+0x234>
          goto icmperr;
 8018e12:	bf00      	nop
 8018e14:	e000      	b.n	8018e18 <icmp_input+0x234>
          goto icmperr;
 8018e16:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8018e18:	6878      	ldr	r0, [r7, #4]
 8018e1a:	f7f6 fb75 	bl	800f508 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8018e1e:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8018e20:	3728      	adds	r7, #40	; 0x28
 8018e22:	46bd      	mov	sp, r7
 8018e24:	bd80      	pop	{r7, pc}
 8018e26:	bf00      	nop
 8018e28:	2000a100 	.word	0x2000a100
 8018e2c:	2000a114 	.word	0x2000a114
 8018e30:	08020cd0 	.word	0x08020cd0
 8018e34:	08020d08 	.word	0x08020d08
 8018e38:	08020d40 	.word	0x08020d40
 8018e3c:	08020d68 	.word	0x08020d68

08018e40 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8018e40:	b580      	push	{r7, lr}
 8018e42:	b082      	sub	sp, #8
 8018e44:	af00      	add	r7, sp, #0
 8018e46:	6078      	str	r0, [r7, #4]
 8018e48:	460b      	mov	r3, r1
 8018e4a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8018e4c:	78fb      	ldrb	r3, [r7, #3]
 8018e4e:	461a      	mov	r2, r3
 8018e50:	2103      	movs	r1, #3
 8018e52:	6878      	ldr	r0, [r7, #4]
 8018e54:	f000 f814 	bl	8018e80 <icmp_send_response>
}
 8018e58:	bf00      	nop
 8018e5a:	3708      	adds	r7, #8
 8018e5c:	46bd      	mov	sp, r7
 8018e5e:	bd80      	pop	{r7, pc}

08018e60 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8018e60:	b580      	push	{r7, lr}
 8018e62:	b082      	sub	sp, #8
 8018e64:	af00      	add	r7, sp, #0
 8018e66:	6078      	str	r0, [r7, #4]
 8018e68:	460b      	mov	r3, r1
 8018e6a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8018e6c:	78fb      	ldrb	r3, [r7, #3]
 8018e6e:	461a      	mov	r2, r3
 8018e70:	210b      	movs	r1, #11
 8018e72:	6878      	ldr	r0, [r7, #4]
 8018e74:	f000 f804 	bl	8018e80 <icmp_send_response>
}
 8018e78:	bf00      	nop
 8018e7a:	3708      	adds	r7, #8
 8018e7c:	46bd      	mov	sp, r7
 8018e7e:	bd80      	pop	{r7, pc}

08018e80 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8018e80:	b580      	push	{r7, lr}
 8018e82:	b08c      	sub	sp, #48	; 0x30
 8018e84:	af04      	add	r7, sp, #16
 8018e86:	6078      	str	r0, [r7, #4]
 8018e88:	460b      	mov	r3, r1
 8018e8a:	70fb      	strb	r3, [r7, #3]
 8018e8c:	4613      	mov	r3, r2
 8018e8e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8018e90:	f44f 7220 	mov.w	r2, #640	; 0x280
 8018e94:	2124      	movs	r1, #36	; 0x24
 8018e96:	2022      	movs	r0, #34	; 0x22
 8018e98:	f7f6 f84e 	bl	800ef38 <pbuf_alloc>
 8018e9c:	61b8      	str	r0, [r7, #24]
                 PBUF_RAM);
  if (q == NULL) {
 8018e9e:	69bb      	ldr	r3, [r7, #24]
 8018ea0:	2b00      	cmp	r3, #0
 8018ea2:	d056      	beq.n	8018f52 <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8018ea4:	69bb      	ldr	r3, [r7, #24]
 8018ea6:	895b      	ldrh	r3, [r3, #10]
 8018ea8:	2b23      	cmp	r3, #35	; 0x23
 8018eaa:	d806      	bhi.n	8018eba <icmp_send_response+0x3a>
 8018eac:	4b2b      	ldr	r3, [pc, #172]	; (8018f5c <icmp_send_response+0xdc>)
 8018eae:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8018eb2:	492b      	ldr	r1, [pc, #172]	; (8018f60 <icmp_send_response+0xe0>)
 8018eb4:	482b      	ldr	r0, [pc, #172]	; (8018f64 <icmp_send_response+0xe4>)
 8018eb6:	f002 fae3 	bl	801b480 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8018eba:	687b      	ldr	r3, [r7, #4]
 8018ebc:	685b      	ldr	r3, [r3, #4]
 8018ebe:	617b      	str	r3, [r7, #20]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8018ec0:	69bb      	ldr	r3, [r7, #24]
 8018ec2:	685b      	ldr	r3, [r3, #4]
 8018ec4:	613b      	str	r3, [r7, #16]
  icmphdr->type = type;
 8018ec6:	693b      	ldr	r3, [r7, #16]
 8018ec8:	78fa      	ldrb	r2, [r7, #3]
 8018eca:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8018ecc:	693b      	ldr	r3, [r7, #16]
 8018ece:	78ba      	ldrb	r2, [r7, #2]
 8018ed0:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8018ed2:	693b      	ldr	r3, [r7, #16]
 8018ed4:	2200      	movs	r2, #0
 8018ed6:	711a      	strb	r2, [r3, #4]
 8018ed8:	2200      	movs	r2, #0
 8018eda:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8018edc:	693b      	ldr	r3, [r7, #16]
 8018ede:	2200      	movs	r2, #0
 8018ee0:	719a      	strb	r2, [r3, #6]
 8018ee2:	2200      	movs	r2, #0
 8018ee4:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8018ee6:	69bb      	ldr	r3, [r7, #24]
 8018ee8:	685b      	ldr	r3, [r3, #4]
 8018eea:	f103 0008 	add.w	r0, r3, #8
 8018eee:	687b      	ldr	r3, [r7, #4]
 8018ef0:	685b      	ldr	r3, [r3, #4]
 8018ef2:	221c      	movs	r2, #28
 8018ef4:	4619      	mov	r1, r3
 8018ef6:	f001 fd4d 	bl	801a994 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8018efa:	697b      	ldr	r3, [r7, #20]
 8018efc:	68db      	ldr	r3, [r3, #12]
 8018efe:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8018f00:	f107 030c 	add.w	r3, r7, #12
 8018f04:	4618      	mov	r0, r3
 8018f06:	f000 f82f 	bl	8018f68 <ip4_route>
 8018f0a:	61f8      	str	r0, [r7, #28]
#endif
  if (netif != NULL) {
 8018f0c:	69fb      	ldr	r3, [r7, #28]
 8018f0e:	2b00      	cmp	r3, #0
 8018f10:	d01b      	beq.n	8018f4a <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8018f12:	693b      	ldr	r3, [r7, #16]
 8018f14:	2200      	movs	r2, #0
 8018f16:	709a      	strb	r2, [r3, #2]
 8018f18:	2200      	movs	r2, #0
 8018f1a:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 8018f1c:	69bb      	ldr	r3, [r7, #24]
 8018f1e:	895b      	ldrh	r3, [r3, #10]
 8018f20:	4619      	mov	r1, r3
 8018f22:	6938      	ldr	r0, [r7, #16]
 8018f24:	f7f4 ff16 	bl	800dd54 <inet_chksum>
 8018f28:	4603      	mov	r3, r0
 8018f2a:	461a      	mov	r2, r3
 8018f2c:	693b      	ldr	r3, [r7, #16]
 8018f2e:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8018f30:	f107 020c 	add.w	r2, r7, #12
 8018f34:	69fb      	ldr	r3, [r7, #28]
 8018f36:	9302      	str	r3, [sp, #8]
 8018f38:	2301      	movs	r3, #1
 8018f3a:	9301      	str	r3, [sp, #4]
 8018f3c:	2300      	movs	r3, #0
 8018f3e:	9300      	str	r3, [sp, #0]
 8018f40:	23ff      	movs	r3, #255	; 0xff
 8018f42:	2100      	movs	r1, #0
 8018f44:	69b8      	ldr	r0, [r7, #24]
 8018f46:	f000 f9f7 	bl	8019338 <ip4_output_if>
  }
  pbuf_free(q);
 8018f4a:	69b8      	ldr	r0, [r7, #24]
 8018f4c:	f7f6 fadc 	bl	800f508 <pbuf_free>
 8018f50:	e000      	b.n	8018f54 <icmp_send_response+0xd4>
    return;
 8018f52:	bf00      	nop
}
 8018f54:	3720      	adds	r7, #32
 8018f56:	46bd      	mov	sp, r7
 8018f58:	bd80      	pop	{r7, pc}
 8018f5a:	bf00      	nop
 8018f5c:	08020cd0 	.word	0x08020cd0
 8018f60:	08020d9c 	.word	0x08020d9c
 8018f64:	08020d40 	.word	0x08020d40

08018f68 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8018f68:	b480      	push	{r7}
 8018f6a:	b085      	sub	sp, #20
 8018f6c:	af00      	add	r7, sp, #0
 8018f6e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8018f70:	4b33      	ldr	r3, [pc, #204]	; (8019040 <ip4_route+0xd8>)
 8018f72:	681b      	ldr	r3, [r3, #0]
 8018f74:	60fb      	str	r3, [r7, #12]
 8018f76:	e036      	b.n	8018fe6 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8018f78:	68fb      	ldr	r3, [r7, #12]
 8018f7a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8018f7e:	f003 0301 	and.w	r3, r3, #1
 8018f82:	b2db      	uxtb	r3, r3
 8018f84:	2b00      	cmp	r3, #0
 8018f86:	d02b      	beq.n	8018fe0 <ip4_route+0x78>
 8018f88:	68fb      	ldr	r3, [r7, #12]
 8018f8a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8018f8e:	089b      	lsrs	r3, r3, #2
 8018f90:	f003 0301 	and.w	r3, r3, #1
 8018f94:	b2db      	uxtb	r3, r3
 8018f96:	2b00      	cmp	r3, #0
 8018f98:	d022      	beq.n	8018fe0 <ip4_route+0x78>
 8018f9a:	68fb      	ldr	r3, [r7, #12]
 8018f9c:	3304      	adds	r3, #4
 8018f9e:	681b      	ldr	r3, [r3, #0]
 8018fa0:	2b00      	cmp	r3, #0
 8018fa2:	d01d      	beq.n	8018fe0 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8018fa4:	687b      	ldr	r3, [r7, #4]
 8018fa6:	681a      	ldr	r2, [r3, #0]
 8018fa8:	68fb      	ldr	r3, [r7, #12]
 8018faa:	3304      	adds	r3, #4
 8018fac:	681b      	ldr	r3, [r3, #0]
 8018fae:	405a      	eors	r2, r3
 8018fb0:	68fb      	ldr	r3, [r7, #12]
 8018fb2:	3308      	adds	r3, #8
 8018fb4:	681b      	ldr	r3, [r3, #0]
 8018fb6:	4013      	ands	r3, r2
 8018fb8:	2b00      	cmp	r3, #0
 8018fba:	d101      	bne.n	8018fc0 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8018fbc:	68fb      	ldr	r3, [r7, #12]
 8018fbe:	e038      	b.n	8019032 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8018fc0:	68fb      	ldr	r3, [r7, #12]
 8018fc2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8018fc6:	f003 0302 	and.w	r3, r3, #2
 8018fca:	2b00      	cmp	r3, #0
 8018fcc:	d108      	bne.n	8018fe0 <ip4_route+0x78>
 8018fce:	687b      	ldr	r3, [r7, #4]
 8018fd0:	681a      	ldr	r2, [r3, #0]
 8018fd2:	68fb      	ldr	r3, [r7, #12]
 8018fd4:	330c      	adds	r3, #12
 8018fd6:	681b      	ldr	r3, [r3, #0]
 8018fd8:	429a      	cmp	r2, r3
 8018fda:	d101      	bne.n	8018fe0 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8018fdc:	68fb      	ldr	r3, [r7, #12]
 8018fde:	e028      	b.n	8019032 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8018fe0:	68fb      	ldr	r3, [r7, #12]
 8018fe2:	681b      	ldr	r3, [r3, #0]
 8018fe4:	60fb      	str	r3, [r7, #12]
 8018fe6:	68fb      	ldr	r3, [r7, #12]
 8018fe8:	2b00      	cmp	r3, #0
 8018fea:	d1c5      	bne.n	8018f78 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8018fec:	4b15      	ldr	r3, [pc, #84]	; (8019044 <ip4_route+0xdc>)
 8018fee:	681b      	ldr	r3, [r3, #0]
 8018ff0:	2b00      	cmp	r3, #0
 8018ff2:	d01a      	beq.n	801902a <ip4_route+0xc2>
 8018ff4:	4b13      	ldr	r3, [pc, #76]	; (8019044 <ip4_route+0xdc>)
 8018ff6:	681b      	ldr	r3, [r3, #0]
 8018ff8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8018ffc:	f003 0301 	and.w	r3, r3, #1
 8019000:	2b00      	cmp	r3, #0
 8019002:	d012      	beq.n	801902a <ip4_route+0xc2>
 8019004:	4b0f      	ldr	r3, [pc, #60]	; (8019044 <ip4_route+0xdc>)
 8019006:	681b      	ldr	r3, [r3, #0]
 8019008:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801900c:	f003 0304 	and.w	r3, r3, #4
 8019010:	2b00      	cmp	r3, #0
 8019012:	d00a      	beq.n	801902a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8019014:	4b0b      	ldr	r3, [pc, #44]	; (8019044 <ip4_route+0xdc>)
 8019016:	681b      	ldr	r3, [r3, #0]
 8019018:	3304      	adds	r3, #4
 801901a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801901c:	2b00      	cmp	r3, #0
 801901e:	d004      	beq.n	801902a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8019020:	687b      	ldr	r3, [r7, #4]
 8019022:	681b      	ldr	r3, [r3, #0]
 8019024:	b2db      	uxtb	r3, r3
 8019026:	2b7f      	cmp	r3, #127	; 0x7f
 8019028:	d101      	bne.n	801902e <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801902a:	2300      	movs	r3, #0
 801902c:	e001      	b.n	8019032 <ip4_route+0xca>
  }

  return netif_default;
 801902e:	4b05      	ldr	r3, [pc, #20]	; (8019044 <ip4_route+0xdc>)
 8019030:	681b      	ldr	r3, [r3, #0]
}
 8019032:	4618      	mov	r0, r3
 8019034:	3714      	adds	r7, #20
 8019036:	46bd      	mov	sp, r7
 8019038:	f85d 7b04 	ldr.w	r7, [sp], #4
 801903c:	4770      	bx	lr
 801903e:	bf00      	nop
 8019040:	20013b68 	.word	0x20013b68
 8019044:	20013b6c 	.word	0x20013b6c

08019048 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8019048:	b580      	push	{r7, lr}
 801904a:	b082      	sub	sp, #8
 801904c:	af00      	add	r7, sp, #0
 801904e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8019050:	687b      	ldr	r3, [r7, #4]
 8019052:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8019056:	f003 0301 	and.w	r3, r3, #1
 801905a:	b2db      	uxtb	r3, r3
 801905c:	2b00      	cmp	r3, #0
 801905e:	d016      	beq.n	801908e <ip4_input_accept+0x46>
 8019060:	687b      	ldr	r3, [r7, #4]
 8019062:	3304      	adds	r3, #4
 8019064:	681b      	ldr	r3, [r3, #0]
 8019066:	2b00      	cmp	r3, #0
 8019068:	d011      	beq.n	801908e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801906a:	4b0b      	ldr	r3, [pc, #44]	; (8019098 <ip4_input_accept+0x50>)
 801906c:	695a      	ldr	r2, [r3, #20]
 801906e:	687b      	ldr	r3, [r7, #4]
 8019070:	3304      	adds	r3, #4
 8019072:	681b      	ldr	r3, [r3, #0]
 8019074:	429a      	cmp	r2, r3
 8019076:	d008      	beq.n	801908a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8019078:	4b07      	ldr	r3, [pc, #28]	; (8019098 <ip4_input_accept+0x50>)
 801907a:	695b      	ldr	r3, [r3, #20]
 801907c:	6879      	ldr	r1, [r7, #4]
 801907e:	4618      	mov	r0, r3
 8019080:	f000 fa98 	bl	80195b4 <ip4_addr_isbroadcast_u32>
 8019084:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8019086:	2b00      	cmp	r3, #0
 8019088:	d001      	beq.n	801908e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801908a:	2301      	movs	r3, #1
 801908c:	e000      	b.n	8019090 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801908e:	2300      	movs	r3, #0
}
 8019090:	4618      	mov	r0, r3
 8019092:	3708      	adds	r7, #8
 8019094:	46bd      	mov	sp, r7
 8019096:	bd80      	pop	{r7, pc}
 8019098:	2000a100 	.word	0x2000a100

0801909c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801909c:	b580      	push	{r7, lr}
 801909e:	b088      	sub	sp, #32
 80190a0:	af00      	add	r7, sp, #0
 80190a2:	6078      	str	r0, [r7, #4]
 80190a4:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 80190a6:	2301      	movs	r3, #1
 80190a8:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 80190aa:	687b      	ldr	r3, [r7, #4]
 80190ac:	685b      	ldr	r3, [r3, #4]
 80190ae:	613b      	str	r3, [r7, #16]
  if (IPH_V(iphdr) != 4) {
 80190b0:	693b      	ldr	r3, [r7, #16]
 80190b2:	781b      	ldrb	r3, [r3, #0]
 80190b4:	091b      	lsrs	r3, r3, #4
 80190b6:	b2db      	uxtb	r3, r3
 80190b8:	2b04      	cmp	r3, #4
 80190ba:	d004      	beq.n	80190c6 <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 80190bc:	6878      	ldr	r0, [r7, #4]
 80190be:	f7f6 fa23 	bl	800f508 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 80190c2:	2300      	movs	r3, #0
 80190c4:	e130      	b.n	8019328 <ip4_input+0x28c>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80190c6:	693b      	ldr	r3, [r7, #16]
 80190c8:	781b      	ldrb	r3, [r3, #0]
 80190ca:	f003 030f 	and.w	r3, r3, #15
 80190ce:	b2db      	uxtb	r3, r3
 80190d0:	009b      	lsls	r3, r3, #2
 80190d2:	b2db      	uxtb	r3, r3
 80190d4:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80190d6:	693b      	ldr	r3, [r7, #16]
 80190d8:	885b      	ldrh	r3, [r3, #2]
 80190da:	b29b      	uxth	r3, r3
 80190dc:	4618      	mov	r0, r3
 80190de:	f7f4 fcf1 	bl	800dac4 <lwip_htons>
 80190e2:	4603      	mov	r3, r0
 80190e4:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 80190e6:	687b      	ldr	r3, [r7, #4]
 80190e8:	891b      	ldrh	r3, [r3, #8]
 80190ea:	89ba      	ldrh	r2, [r7, #12]
 80190ec:	429a      	cmp	r2, r3
 80190ee:	d204      	bcs.n	80190fa <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 80190f0:	89bb      	ldrh	r3, [r7, #12]
 80190f2:	4619      	mov	r1, r3
 80190f4:	6878      	ldr	r0, [r7, #4]
 80190f6:	f7f6 f881 	bl	800f1fc <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80190fa:	687b      	ldr	r3, [r7, #4]
 80190fc:	895b      	ldrh	r3, [r3, #10]
 80190fe:	89fa      	ldrh	r2, [r7, #14]
 8019100:	429a      	cmp	r2, r3
 8019102:	d807      	bhi.n	8019114 <ip4_input+0x78>
 8019104:	687b      	ldr	r3, [r7, #4]
 8019106:	891b      	ldrh	r3, [r3, #8]
 8019108:	89ba      	ldrh	r2, [r7, #12]
 801910a:	429a      	cmp	r2, r3
 801910c:	d802      	bhi.n	8019114 <ip4_input+0x78>
 801910e:	89fb      	ldrh	r3, [r7, #14]
 8019110:	2b13      	cmp	r3, #19
 8019112:	d804      	bhi.n	801911e <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8019114:	6878      	ldr	r0, [r7, #4]
 8019116:	f7f6 f9f7 	bl	800f508 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801911a:	2300      	movs	r3, #0
 801911c:	e104      	b.n	8019328 <ip4_input+0x28c>
  }

  /* verify checksum */
#if CHECKSUM_CHECK_IP
  IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_IP) {
    if (inet_chksum(iphdr, iphdr_hlen) != 0) {
 801911e:	89fb      	ldrh	r3, [r7, #14]
 8019120:	4619      	mov	r1, r3
 8019122:	6938      	ldr	r0, [r7, #16]
 8019124:	f7f4 fe16 	bl	800dd54 <inet_chksum>
 8019128:	4603      	mov	r3, r0
 801912a:	2b00      	cmp	r3, #0
 801912c:	d004      	beq.n	8019138 <ip4_input+0x9c>

      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("Checksum (0x%"X16_F") failed, IP packet dropped.\n", inet_chksum(iphdr, iphdr_hlen)));
      ip4_debug_print(p);
      pbuf_free(p);
 801912e:	6878      	ldr	r0, [r7, #4]
 8019130:	f7f6 f9ea 	bl	800f508 <pbuf_free>
      IP_STATS_INC(ip.chkerr);
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinhdrerrors);
      return ERR_OK;
 8019134:	2300      	movs	r3, #0
 8019136:	e0f7      	b.n	8019328 <ip4_input+0x28c>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8019138:	693b      	ldr	r3, [r7, #16]
 801913a:	691b      	ldr	r3, [r3, #16]
 801913c:	4a7c      	ldr	r2, [pc, #496]	; (8019330 <ip4_input+0x294>)
 801913e:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8019140:	693b      	ldr	r3, [r7, #16]
 8019142:	68db      	ldr	r3, [r3, #12]
 8019144:	4a7a      	ldr	r2, [pc, #488]	; (8019330 <ip4_input+0x294>)
 8019146:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8019148:	4b79      	ldr	r3, [pc, #484]	; (8019330 <ip4_input+0x294>)
 801914a:	695b      	ldr	r3, [r3, #20]
 801914c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8019150:	2be0      	cmp	r3, #224	; 0xe0
 8019152:	d112      	bne.n	801917a <ip4_input+0xde>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8019154:	683b      	ldr	r3, [r7, #0]
 8019156:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801915a:	f003 0301 	and.w	r3, r3, #1
 801915e:	b2db      	uxtb	r3, r3
 8019160:	2b00      	cmp	r3, #0
 8019162:	d007      	beq.n	8019174 <ip4_input+0xd8>
 8019164:	683b      	ldr	r3, [r7, #0]
 8019166:	3304      	adds	r3, #4
 8019168:	681b      	ldr	r3, [r3, #0]
 801916a:	2b00      	cmp	r3, #0
 801916c:	d002      	beq.n	8019174 <ip4_input+0xd8>
      netif = inp;
 801916e:	683b      	ldr	r3, [r7, #0]
 8019170:	61fb      	str	r3, [r7, #28]
 8019172:	e02a      	b.n	80191ca <ip4_input+0x12e>
    } else {
      netif = NULL;
 8019174:	2300      	movs	r3, #0
 8019176:	61fb      	str	r3, [r7, #28]
 8019178:	e027      	b.n	80191ca <ip4_input+0x12e>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801917a:	6838      	ldr	r0, [r7, #0]
 801917c:	f7ff ff64 	bl	8019048 <ip4_input_accept>
 8019180:	4603      	mov	r3, r0
 8019182:	2b00      	cmp	r3, #0
 8019184:	d002      	beq.n	801918c <ip4_input+0xf0>
      netif = inp;
 8019186:	683b      	ldr	r3, [r7, #0]
 8019188:	61fb      	str	r3, [r7, #28]
 801918a:	e01e      	b.n	80191ca <ip4_input+0x12e>
    } else {
      netif = NULL;
 801918c:	2300      	movs	r3, #0
 801918e:	61fb      	str	r3, [r7, #28]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8019190:	4b67      	ldr	r3, [pc, #412]	; (8019330 <ip4_input+0x294>)
 8019192:	695b      	ldr	r3, [r3, #20]
 8019194:	b2db      	uxtb	r3, r3
 8019196:	2b7f      	cmp	r3, #127	; 0x7f
 8019198:	d017      	beq.n	80191ca <ip4_input+0x12e>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801919a:	4b66      	ldr	r3, [pc, #408]	; (8019334 <ip4_input+0x298>)
 801919c:	681b      	ldr	r3, [r3, #0]
 801919e:	61fb      	str	r3, [r7, #28]
 80191a0:	e00e      	b.n	80191c0 <ip4_input+0x124>
          if (netif == inp) {
 80191a2:	69fa      	ldr	r2, [r7, #28]
 80191a4:	683b      	ldr	r3, [r7, #0]
 80191a6:	429a      	cmp	r2, r3
 80191a8:	d006      	beq.n	80191b8 <ip4_input+0x11c>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 80191aa:	69f8      	ldr	r0, [r7, #28]
 80191ac:	f7ff ff4c 	bl	8019048 <ip4_input_accept>
 80191b0:	4603      	mov	r3, r0
 80191b2:	2b00      	cmp	r3, #0
 80191b4:	d108      	bne.n	80191c8 <ip4_input+0x12c>
 80191b6:	e000      	b.n	80191ba <ip4_input+0x11e>
            continue;
 80191b8:	bf00      	nop
        NETIF_FOREACH(netif) {
 80191ba:	69fb      	ldr	r3, [r7, #28]
 80191bc:	681b      	ldr	r3, [r3, #0]
 80191be:	61fb      	str	r3, [r7, #28]
 80191c0:	69fb      	ldr	r3, [r7, #28]
 80191c2:	2b00      	cmp	r3, #0
 80191c4:	d1ed      	bne.n	80191a2 <ip4_input+0x106>
 80191c6:	e000      	b.n	80191ca <ip4_input+0x12e>
            break;
 80191c8:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 80191ca:	69fb      	ldr	r3, [r7, #28]
 80191cc:	2b00      	cmp	r3, #0
 80191ce:	d111      	bne.n	80191f4 <ip4_input+0x158>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 80191d0:	693b      	ldr	r3, [r7, #16]
 80191d2:	7a5b      	ldrb	r3, [r3, #9]
 80191d4:	2b11      	cmp	r3, #17
 80191d6:	d10d      	bne.n	80191f4 <ip4_input+0x158>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 80191d8:	89fb      	ldrh	r3, [r7, #14]
 80191da:	693a      	ldr	r2, [r7, #16]
 80191dc:	4413      	add	r3, r2
 80191de:	61bb      	str	r3, [r7, #24]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 80191e0:	69bb      	ldr	r3, [r7, #24]
 80191e2:	885b      	ldrh	r3, [r3, #2]
 80191e4:	b29b      	uxth	r3, r3
 80191e6:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 80191ea:	d103      	bne.n	80191f4 <ip4_input+0x158>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 80191ec:	683b      	ldr	r3, [r7, #0]
 80191ee:	61fb      	str	r3, [r7, #28]
        check_ip_src = 0;
 80191f0:	2300      	movs	r3, #0
 80191f2:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 80191f4:	697b      	ldr	r3, [r7, #20]
 80191f6:	2b00      	cmp	r3, #0
 80191f8:	d017      	beq.n	801922a <ip4_input+0x18e>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 80191fa:	4b4d      	ldr	r3, [pc, #308]	; (8019330 <ip4_input+0x294>)
 80191fc:	691b      	ldr	r3, [r3, #16]
 80191fe:	2b00      	cmp	r3, #0
 8019200:	d013      	beq.n	801922a <ip4_input+0x18e>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8019202:	4b4b      	ldr	r3, [pc, #300]	; (8019330 <ip4_input+0x294>)
 8019204:	691b      	ldr	r3, [r3, #16]
 8019206:	6839      	ldr	r1, [r7, #0]
 8019208:	4618      	mov	r0, r3
 801920a:	f000 f9d3 	bl	80195b4 <ip4_addr_isbroadcast_u32>
 801920e:	4603      	mov	r3, r0
 8019210:	2b00      	cmp	r3, #0
 8019212:	d105      	bne.n	8019220 <ip4_input+0x184>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8019214:	4b46      	ldr	r3, [pc, #280]	; (8019330 <ip4_input+0x294>)
 8019216:	691b      	ldr	r3, [r3, #16]
 8019218:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801921c:	2be0      	cmp	r3, #224	; 0xe0
 801921e:	d104      	bne.n	801922a <ip4_input+0x18e>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8019220:	6878      	ldr	r0, [r7, #4]
 8019222:	f7f6 f971 	bl	800f508 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8019226:	2300      	movs	r3, #0
 8019228:	e07e      	b.n	8019328 <ip4_input+0x28c>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801922a:	69fb      	ldr	r3, [r7, #28]
 801922c:	2b00      	cmp	r3, #0
 801922e:	d104      	bne.n	801923a <ip4_input+0x19e>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8019230:	6878      	ldr	r0, [r7, #4]
 8019232:	f7f6 f969 	bl	800f508 <pbuf_free>
    return ERR_OK;
 8019236:	2300      	movs	r3, #0
 8019238:	e076      	b.n	8019328 <ip4_input+0x28c>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801923a:	693b      	ldr	r3, [r7, #16]
 801923c:	88db      	ldrh	r3, [r3, #6]
 801923e:	b29b      	uxth	r3, r3
 8019240:	461a      	mov	r2, r3
 8019242:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8019246:	4013      	ands	r3, r2
 8019248:	2b00      	cmp	r3, #0
 801924a:	d00b      	beq.n	8019264 <ip4_input+0x1c8>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801924c:	6878      	ldr	r0, [r7, #4]
 801924e:	f000 fe21 	bl	8019e94 <ip4_reass>
 8019252:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8019254:	687b      	ldr	r3, [r7, #4]
 8019256:	2b00      	cmp	r3, #0
 8019258:	d101      	bne.n	801925e <ip4_input+0x1c2>
      return ERR_OK;
 801925a:	2300      	movs	r3, #0
 801925c:	e064      	b.n	8019328 <ip4_input+0x28c>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801925e:	687b      	ldr	r3, [r7, #4]
 8019260:	685b      	ldr	r3, [r3, #4]
 8019262:	613b      	str	r3, [r7, #16]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8019264:	4a32      	ldr	r2, [pc, #200]	; (8019330 <ip4_input+0x294>)
 8019266:	69fb      	ldr	r3, [r7, #28]
 8019268:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801926a:	4a31      	ldr	r2, [pc, #196]	; (8019330 <ip4_input+0x294>)
 801926c:	683b      	ldr	r3, [r7, #0]
 801926e:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8019270:	4a2f      	ldr	r2, [pc, #188]	; (8019330 <ip4_input+0x294>)
 8019272:	693b      	ldr	r3, [r7, #16]
 8019274:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8019276:	693b      	ldr	r3, [r7, #16]
 8019278:	781b      	ldrb	r3, [r3, #0]
 801927a:	f003 030f 	and.w	r3, r3, #15
 801927e:	b2db      	uxtb	r3, r3
 8019280:	009b      	lsls	r3, r3, #2
 8019282:	b2db      	uxtb	r3, r3
 8019284:	b29a      	uxth	r2, r3
 8019286:	4b2a      	ldr	r3, [pc, #168]	; (8019330 <ip4_input+0x294>)
 8019288:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801928a:	89fb      	ldrh	r3, [r7, #14]
 801928c:	4619      	mov	r1, r3
 801928e:	6878      	ldr	r0, [r7, #4]
 8019290:	f7f6 f8b4 	bl	800f3fc <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8019294:	693b      	ldr	r3, [r7, #16]
 8019296:	7a5b      	ldrb	r3, [r3, #9]
 8019298:	2b11      	cmp	r3, #17
 801929a:	d006      	beq.n	80192aa <ip4_input+0x20e>
 801929c:	2b11      	cmp	r3, #17
 801929e:	dc13      	bgt.n	80192c8 <ip4_input+0x22c>
 80192a0:	2b01      	cmp	r3, #1
 80192a2:	d00c      	beq.n	80192be <ip4_input+0x222>
 80192a4:	2b06      	cmp	r3, #6
 80192a6:	d005      	beq.n	80192b4 <ip4_input+0x218>
 80192a8:	e00e      	b.n	80192c8 <ip4_input+0x22c>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 80192aa:	6839      	ldr	r1, [r7, #0]
 80192ac:	6878      	ldr	r0, [r7, #4]
 80192ae:	f7fc f939 	bl	8015524 <udp_input>
        break;
 80192b2:	e026      	b.n	8019302 <ip4_input+0x266>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 80192b4:	6839      	ldr	r1, [r7, #0]
 80192b6:	6878      	ldr	r0, [r7, #4]
 80192b8:	f7f8 f902 	bl	80114c0 <tcp_input>
        break;
 80192bc:	e021      	b.n	8019302 <ip4_input+0x266>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 80192be:	6839      	ldr	r1, [r7, #0]
 80192c0:	6878      	ldr	r0, [r7, #4]
 80192c2:	f7ff fc8f 	bl	8018be4 <icmp_input>
        break;
 80192c6:	e01c      	b.n	8019302 <ip4_input+0x266>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80192c8:	4b19      	ldr	r3, [pc, #100]	; (8019330 <ip4_input+0x294>)
 80192ca:	695b      	ldr	r3, [r3, #20]
 80192cc:	69f9      	ldr	r1, [r7, #28]
 80192ce:	4618      	mov	r0, r3
 80192d0:	f000 f970 	bl	80195b4 <ip4_addr_isbroadcast_u32>
 80192d4:	4603      	mov	r3, r0
 80192d6:	2b00      	cmp	r3, #0
 80192d8:	d10f      	bne.n	80192fa <ip4_input+0x25e>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80192da:	4b15      	ldr	r3, [pc, #84]	; (8019330 <ip4_input+0x294>)
 80192dc:	695b      	ldr	r3, [r3, #20]
 80192de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80192e2:	2be0      	cmp	r3, #224	; 0xe0
 80192e4:	d009      	beq.n	80192fa <ip4_input+0x25e>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 80192e6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80192ea:	4619      	mov	r1, r3
 80192ec:	6878      	ldr	r0, [r7, #4]
 80192ee:	f7f6 f8f8 	bl	800f4e2 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80192f2:	2102      	movs	r1, #2
 80192f4:	6878      	ldr	r0, [r7, #4]
 80192f6:	f7ff fda3 	bl	8018e40 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 80192fa:	6878      	ldr	r0, [r7, #4]
 80192fc:	f7f6 f904 	bl	800f508 <pbuf_free>
        break;
 8019300:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8019302:	4b0b      	ldr	r3, [pc, #44]	; (8019330 <ip4_input+0x294>)
 8019304:	2200      	movs	r2, #0
 8019306:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8019308:	4b09      	ldr	r3, [pc, #36]	; (8019330 <ip4_input+0x294>)
 801930a:	2200      	movs	r2, #0
 801930c:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801930e:	4b08      	ldr	r3, [pc, #32]	; (8019330 <ip4_input+0x294>)
 8019310:	2200      	movs	r2, #0
 8019312:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8019314:	4b06      	ldr	r3, [pc, #24]	; (8019330 <ip4_input+0x294>)
 8019316:	2200      	movs	r2, #0
 8019318:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801931a:	4b05      	ldr	r3, [pc, #20]	; (8019330 <ip4_input+0x294>)
 801931c:	2200      	movs	r2, #0
 801931e:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8019320:	4b03      	ldr	r3, [pc, #12]	; (8019330 <ip4_input+0x294>)
 8019322:	2200      	movs	r2, #0
 8019324:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8019326:	2300      	movs	r3, #0
}
 8019328:	4618      	mov	r0, r3
 801932a:	3720      	adds	r7, #32
 801932c:	46bd      	mov	sp, r7
 801932e:	bd80      	pop	{r7, pc}
 8019330:	2000a100 	.word	0x2000a100
 8019334:	20013b68 	.word	0x20013b68

08019338 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8019338:	b580      	push	{r7, lr}
 801933a:	b08a      	sub	sp, #40	; 0x28
 801933c:	af04      	add	r7, sp, #16
 801933e:	60f8      	str	r0, [r7, #12]
 8019340:	60b9      	str	r1, [r7, #8]
 8019342:	607a      	str	r2, [r7, #4]
 8019344:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8019346:	68bb      	ldr	r3, [r7, #8]
 8019348:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801934a:	687b      	ldr	r3, [r7, #4]
 801934c:	2b00      	cmp	r3, #0
 801934e:	d009      	beq.n	8019364 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8019350:	68bb      	ldr	r3, [r7, #8]
 8019352:	2b00      	cmp	r3, #0
 8019354:	d003      	beq.n	801935e <ip4_output_if+0x26>
 8019356:	68bb      	ldr	r3, [r7, #8]
 8019358:	681b      	ldr	r3, [r3, #0]
 801935a:	2b00      	cmp	r3, #0
 801935c:	d102      	bne.n	8019364 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801935e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019360:	3304      	adds	r3, #4
 8019362:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8019364:	78fa      	ldrb	r2, [r7, #3]
 8019366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019368:	9302      	str	r3, [sp, #8]
 801936a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801936e:	9301      	str	r3, [sp, #4]
 8019370:	f897 3020 	ldrb.w	r3, [r7, #32]
 8019374:	9300      	str	r3, [sp, #0]
 8019376:	4613      	mov	r3, r2
 8019378:	687a      	ldr	r2, [r7, #4]
 801937a:	6979      	ldr	r1, [r7, #20]
 801937c:	68f8      	ldr	r0, [r7, #12]
 801937e:	f000 f805 	bl	801938c <ip4_output_if_src>
 8019382:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8019384:	4618      	mov	r0, r3
 8019386:	3718      	adds	r7, #24
 8019388:	46bd      	mov	sp, r7
 801938a:	bd80      	pop	{r7, pc}

0801938c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801938c:	b580      	push	{r7, lr}
 801938e:	b088      	sub	sp, #32
 8019390:	af00      	add	r7, sp, #0
 8019392:	60f8      	str	r0, [r7, #12]
 8019394:	60b9      	str	r1, [r7, #8]
 8019396:	607a      	str	r2, [r7, #4]
 8019398:	70fb      	strb	r3, [r7, #3]
{
#endif /* IP_OPTIONS_SEND */
  struct ip_hdr *iphdr;
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
 801939a:	2300      	movs	r3, #0
 801939c:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801939e:	68fb      	ldr	r3, [r7, #12]
 80193a0:	7b9b      	ldrb	r3, [r3, #14]
 80193a2:	2b01      	cmp	r3, #1
 80193a4:	d006      	beq.n	80193b4 <ip4_output_if_src+0x28>
 80193a6:	4b7d      	ldr	r3, [pc, #500]	; (801959c <ip4_output_if_src+0x210>)
 80193a8:	f44f 7255 	mov.w	r2, #852	; 0x354
 80193ac:	497c      	ldr	r1, [pc, #496]	; (80195a0 <ip4_output_if_src+0x214>)
 80193ae:	487d      	ldr	r0, [pc, #500]	; (80195a4 <ip4_output_if_src+0x218>)
 80193b0:	f002 f866 	bl	801b480 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80193b4:	687b      	ldr	r3, [r7, #4]
 80193b6:	2b00      	cmp	r3, #0
 80193b8:	f000 80c4 	beq.w	8019544 <ip4_output_if_src+0x1b8>
    u16_t ip_hlen = IP_HLEN;
 80193bc:	2314      	movs	r3, #20
 80193be:	82fb      	strh	r3, [r7, #22]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80193c0:	2114      	movs	r1, #20
 80193c2:	68f8      	ldr	r0, [r7, #12]
 80193c4:	f7f6 f80a 	bl	800f3dc <pbuf_add_header>
 80193c8:	4603      	mov	r3, r0
 80193ca:	2b00      	cmp	r3, #0
 80193cc:	d002      	beq.n	80193d4 <ip4_output_if_src+0x48>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80193ce:	f06f 0301 	mvn.w	r3, #1
 80193d2:	e0df      	b.n	8019594 <ip4_output_if_src+0x208>
    }

    iphdr = (struct ip_hdr *)p->payload;
 80193d4:	68fb      	ldr	r3, [r7, #12]
 80193d6:	685b      	ldr	r3, [r3, #4]
 80193d8:	61bb      	str	r3, [r7, #24]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80193da:	68fb      	ldr	r3, [r7, #12]
 80193dc:	895b      	ldrh	r3, [r3, #10]
 80193de:	2b13      	cmp	r3, #19
 80193e0:	d806      	bhi.n	80193f0 <ip4_output_if_src+0x64>
 80193e2:	4b6e      	ldr	r3, [pc, #440]	; (801959c <ip4_output_if_src+0x210>)
 80193e4:	f44f 7262 	mov.w	r2, #904	; 0x388
 80193e8:	496f      	ldr	r1, [pc, #444]	; (80195a8 <ip4_output_if_src+0x21c>)
 80193ea:	486e      	ldr	r0, [pc, #440]	; (80195a4 <ip4_output_if_src+0x218>)
 80193ec:	f002 f848 	bl	801b480 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 80193f0:	69bb      	ldr	r3, [r7, #24]
 80193f2:	78fa      	ldrb	r2, [r7, #3]
 80193f4:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 80193f6:	69bb      	ldr	r3, [r7, #24]
 80193f8:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80193fc:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
 80193fe:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8019402:	78fb      	ldrb	r3, [r7, #3]
 8019404:	021b      	lsls	r3, r3, #8
 8019406:	4313      	orrs	r3, r2
 8019408:	021b      	lsls	r3, r3, #8
 801940a:	b21a      	sxth	r2, r3
 801940c:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 8019410:	78fb      	ldrb	r3, [r7, #3]
 8019412:	021b      	lsls	r3, r3, #8
 8019414:	430b      	orrs	r3, r1
 8019416:	121b      	asrs	r3, r3, #8
 8019418:	b21b      	sxth	r3, r3
 801941a:	b2db      	uxtb	r3, r3
 801941c:	b21b      	sxth	r3, r3
 801941e:	4313      	orrs	r3, r2
 8019420:	b21b      	sxth	r3, r3
 8019422:	b29b      	uxth	r3, r3
 8019424:	461a      	mov	r2, r3
 8019426:	69fb      	ldr	r3, [r7, #28]
 8019428:	4413      	add	r3, r2
 801942a:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801942c:	687b      	ldr	r3, [r7, #4]
 801942e:	681a      	ldr	r2, [r3, #0]
 8019430:	69bb      	ldr	r3, [r7, #24]
 8019432:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
 8019434:	69bb      	ldr	r3, [r7, #24]
 8019436:	691b      	ldr	r3, [r3, #16]
 8019438:	b29b      	uxth	r3, r3
 801943a:	69fa      	ldr	r2, [r7, #28]
 801943c:	4413      	add	r3, r2
 801943e:	61fb      	str	r3, [r7, #28]
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
 8019440:	69bb      	ldr	r3, [r7, #24]
 8019442:	691b      	ldr	r3, [r3, #16]
 8019444:	0c1b      	lsrs	r3, r3, #16
 8019446:	69fa      	ldr	r2, [r7, #28]
 8019448:	4413      	add	r3, r2
 801944a:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801944c:	8afb      	ldrh	r3, [r7, #22]
 801944e:	089b      	lsrs	r3, r3, #2
 8019450:	b29b      	uxth	r3, r3
 8019452:	b2db      	uxtb	r3, r3
 8019454:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019458:	b2da      	uxtb	r2, r3
 801945a:	69bb      	ldr	r3, [r7, #24]
 801945c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801945e:	69bb      	ldr	r3, [r7, #24]
 8019460:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8019464:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
 8019466:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801946a:	69bb      	ldr	r3, [r7, #24]
 801946c:	781b      	ldrb	r3, [r3, #0]
 801946e:	021b      	lsls	r3, r3, #8
 8019470:	4313      	orrs	r3, r2
 8019472:	021b      	lsls	r3, r3, #8
 8019474:	b21a      	sxth	r2, r3
 8019476:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 801947a:	69bb      	ldr	r3, [r7, #24]
 801947c:	781b      	ldrb	r3, [r3, #0]
 801947e:	021b      	lsls	r3, r3, #8
 8019480:	430b      	orrs	r3, r1
 8019482:	121b      	asrs	r3, r3, #8
 8019484:	b21b      	sxth	r3, r3
 8019486:	b2db      	uxtb	r3, r3
 8019488:	b21b      	sxth	r3, r3
 801948a:	4313      	orrs	r3, r2
 801948c:	b21b      	sxth	r3, r3
 801948e:	b29b      	uxth	r3, r3
 8019490:	461a      	mov	r2, r3
 8019492:	69fb      	ldr	r3, [r7, #28]
 8019494:	4413      	add	r3, r2
 8019496:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8019498:	68fb      	ldr	r3, [r7, #12]
 801949a:	891b      	ldrh	r3, [r3, #8]
 801949c:	4618      	mov	r0, r3
 801949e:	f7f4 fb11 	bl	800dac4 <lwip_htons>
 80194a2:	4603      	mov	r3, r0
 80194a4:	461a      	mov	r2, r3
 80194a6:	69bb      	ldr	r3, [r7, #24]
 80194a8:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
 80194aa:	69bb      	ldr	r3, [r7, #24]
 80194ac:	885b      	ldrh	r3, [r3, #2]
 80194ae:	b29b      	uxth	r3, r3
 80194b0:	461a      	mov	r2, r3
 80194b2:	69fb      	ldr	r3, [r7, #28]
 80194b4:	4413      	add	r3, r2
 80194b6:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80194b8:	69bb      	ldr	r3, [r7, #24]
 80194ba:	2200      	movs	r2, #0
 80194bc:	719a      	strb	r2, [r3, #6]
 80194be:	2200      	movs	r2, #0
 80194c0:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80194c2:	4b3a      	ldr	r3, [pc, #232]	; (80195ac <ip4_output_if_src+0x220>)
 80194c4:	881b      	ldrh	r3, [r3, #0]
 80194c6:	4618      	mov	r0, r3
 80194c8:	f7f4 fafc 	bl	800dac4 <lwip_htons>
 80194cc:	4603      	mov	r3, r0
 80194ce:	461a      	mov	r2, r3
 80194d0:	69bb      	ldr	r3, [r7, #24]
 80194d2:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
 80194d4:	69bb      	ldr	r3, [r7, #24]
 80194d6:	889b      	ldrh	r3, [r3, #4]
 80194d8:	b29b      	uxth	r3, r3
 80194da:	461a      	mov	r2, r3
 80194dc:	69fb      	ldr	r3, [r7, #28]
 80194de:	4413      	add	r3, r2
 80194e0:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80194e2:	4b32      	ldr	r3, [pc, #200]	; (80195ac <ip4_output_if_src+0x220>)
 80194e4:	881b      	ldrh	r3, [r3, #0]
 80194e6:	3301      	adds	r3, #1
 80194e8:	b29a      	uxth	r2, r3
 80194ea:	4b30      	ldr	r3, [pc, #192]	; (80195ac <ip4_output_if_src+0x220>)
 80194ec:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80194ee:	68bb      	ldr	r3, [r7, #8]
 80194f0:	2b00      	cmp	r3, #0
 80194f2:	d104      	bne.n	80194fe <ip4_output_if_src+0x172>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80194f4:	4b2e      	ldr	r3, [pc, #184]	; (80195b0 <ip4_output_if_src+0x224>)
 80194f6:	681a      	ldr	r2, [r3, #0]
 80194f8:	69bb      	ldr	r3, [r7, #24]
 80194fa:	60da      	str	r2, [r3, #12]
 80194fc:	e003      	b.n	8019506 <ip4_output_if_src+0x17a>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80194fe:	68bb      	ldr	r3, [r7, #8]
 8019500:	681a      	ldr	r2, [r3, #0]
 8019502:	69bb      	ldr	r3, [r7, #24]
 8019504:	60da      	str	r2, [r3, #12]
    }

#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->src) & 0xFFFF;
 8019506:	69bb      	ldr	r3, [r7, #24]
 8019508:	68db      	ldr	r3, [r3, #12]
 801950a:	b29b      	uxth	r3, r3
 801950c:	69fa      	ldr	r2, [r7, #28]
 801950e:	4413      	add	r3, r2
 8019510:	61fb      	str	r3, [r7, #28]
    chk_sum += ip4_addr_get_u32(&iphdr->src) >> 16;
 8019512:	69bb      	ldr	r3, [r7, #24]
 8019514:	68db      	ldr	r3, [r3, #12]
 8019516:	0c1b      	lsrs	r3, r3, #16
 8019518:	69fa      	ldr	r2, [r7, #28]
 801951a:	4413      	add	r3, r2
 801951c:	61fb      	str	r3, [r7, #28]
    chk_sum = (chk_sum >> 16) + (chk_sum & 0xFFFF);
 801951e:	69fb      	ldr	r3, [r7, #28]
 8019520:	0c1a      	lsrs	r2, r3, #16
 8019522:	69fb      	ldr	r3, [r7, #28]
 8019524:	b29b      	uxth	r3, r3
 8019526:	4413      	add	r3, r2
 8019528:	61fb      	str	r3, [r7, #28]
    chk_sum = (chk_sum >> 16) + chk_sum;
 801952a:	69fb      	ldr	r3, [r7, #28]
 801952c:	0c1b      	lsrs	r3, r3, #16
 801952e:	69fa      	ldr	r2, [r7, #28]
 8019530:	4413      	add	r3, r2
 8019532:	61fb      	str	r3, [r7, #28]
    chk_sum = ~chk_sum;
 8019534:	69fb      	ldr	r3, [r7, #28]
 8019536:	43db      	mvns	r3, r3
 8019538:	61fb      	str	r3, [r7, #28]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_IP) {
      iphdr->_chksum = (u16_t)chk_sum; /* network order */
 801953a:	69fb      	ldr	r3, [r7, #28]
 801953c:	b29a      	uxth	r2, r3
 801953e:	69bb      	ldr	r3, [r7, #24]
 8019540:	815a      	strh	r2, [r3, #10]
 8019542:	e00f      	b.n	8019564 <ip4_output_if_src+0x1d8>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8019544:	68fb      	ldr	r3, [r7, #12]
 8019546:	895b      	ldrh	r3, [r3, #10]
 8019548:	2b13      	cmp	r3, #19
 801954a:	d802      	bhi.n	8019552 <ip4_output_if_src+0x1c6>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801954c:	f06f 0301 	mvn.w	r3, #1
 8019550:	e020      	b.n	8019594 <ip4_output_if_src+0x208>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8019552:	68fb      	ldr	r3, [r7, #12]
 8019554:	685b      	ldr	r3, [r3, #4]
 8019556:	61bb      	str	r3, [r7, #24]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8019558:	69bb      	ldr	r3, [r7, #24]
 801955a:	691b      	ldr	r3, [r3, #16]
 801955c:	613b      	str	r3, [r7, #16]
    dest = &dest_addr;
 801955e:	f107 0310 	add.w	r3, r7, #16
 8019562:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8019564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019566:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8019568:	2b00      	cmp	r3, #0
 801956a:	d00c      	beq.n	8019586 <ip4_output_if_src+0x1fa>
 801956c:	68fb      	ldr	r3, [r7, #12]
 801956e:	891a      	ldrh	r2, [r3, #8]
 8019570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019572:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8019574:	429a      	cmp	r2, r3
 8019576:	d906      	bls.n	8019586 <ip4_output_if_src+0x1fa>
    return ip4_frag(p, netif, dest);
 8019578:	687a      	ldr	r2, [r7, #4]
 801957a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801957c:	68f8      	ldr	r0, [r7, #12]
 801957e:	f000 fe85 	bl	801a28c <ip4_frag>
 8019582:	4603      	mov	r3, r0
 8019584:	e006      	b.n	8019594 <ip4_output_if_src+0x208>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8019586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019588:	695b      	ldr	r3, [r3, #20]
 801958a:	687a      	ldr	r2, [r7, #4]
 801958c:	68f9      	ldr	r1, [r7, #12]
 801958e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019590:	4798      	blx	r3
 8019592:	4603      	mov	r3, r0
}
 8019594:	4618      	mov	r0, r3
 8019596:	3720      	adds	r7, #32
 8019598:	46bd      	mov	sp, r7
 801959a:	bd80      	pop	{r7, pc}
 801959c:	08020dc8 	.word	0x08020dc8
 80195a0:	08020dfc 	.word	0x08020dfc
 80195a4:	08020e08 	.word	0x08020e08
 80195a8:	08020e30 	.word	0x08020e30
 80195ac:	20013cfe 	.word	0x20013cfe
 80195b0:	0806cf80 	.word	0x0806cf80

080195b4 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 80195b4:	b480      	push	{r7}
 80195b6:	b085      	sub	sp, #20
 80195b8:	af00      	add	r7, sp, #0
 80195ba:	6078      	str	r0, [r7, #4]
 80195bc:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 80195be:	687b      	ldr	r3, [r7, #4]
 80195c0:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80195c2:	687b      	ldr	r3, [r7, #4]
 80195c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80195c8:	d002      	beq.n	80195d0 <ip4_addr_isbroadcast_u32+0x1c>
 80195ca:	687b      	ldr	r3, [r7, #4]
 80195cc:	2b00      	cmp	r3, #0
 80195ce:	d101      	bne.n	80195d4 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 80195d0:	2301      	movs	r3, #1
 80195d2:	e02a      	b.n	801962a <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80195d4:	683b      	ldr	r3, [r7, #0]
 80195d6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80195da:	f003 0302 	and.w	r3, r3, #2
 80195de:	2b00      	cmp	r3, #0
 80195e0:	d101      	bne.n	80195e6 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 80195e2:	2300      	movs	r3, #0
 80195e4:	e021      	b.n	801962a <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80195e6:	683b      	ldr	r3, [r7, #0]
 80195e8:	3304      	adds	r3, #4
 80195ea:	681b      	ldr	r3, [r3, #0]
 80195ec:	687a      	ldr	r2, [r7, #4]
 80195ee:	429a      	cmp	r2, r3
 80195f0:	d101      	bne.n	80195f6 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 80195f2:	2300      	movs	r3, #0
 80195f4:	e019      	b.n	801962a <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80195f6:	68fa      	ldr	r2, [r7, #12]
 80195f8:	683b      	ldr	r3, [r7, #0]
 80195fa:	3304      	adds	r3, #4
 80195fc:	681b      	ldr	r3, [r3, #0]
 80195fe:	405a      	eors	r2, r3
 8019600:	683b      	ldr	r3, [r7, #0]
 8019602:	3308      	adds	r3, #8
 8019604:	681b      	ldr	r3, [r3, #0]
 8019606:	4013      	ands	r3, r2
 8019608:	2b00      	cmp	r3, #0
 801960a:	d10d      	bne.n	8019628 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801960c:	683b      	ldr	r3, [r7, #0]
 801960e:	3308      	adds	r3, #8
 8019610:	681b      	ldr	r3, [r3, #0]
 8019612:	43da      	mvns	r2, r3
 8019614:	687b      	ldr	r3, [r7, #4]
 8019616:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8019618:	683b      	ldr	r3, [r7, #0]
 801961a:	3308      	adds	r3, #8
 801961c:	681b      	ldr	r3, [r3, #0]
 801961e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8019620:	429a      	cmp	r2, r3
 8019622:	d101      	bne.n	8019628 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8019624:	2301      	movs	r3, #1
 8019626:	e000      	b.n	801962a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8019628:	2300      	movs	r3, #0
  }
}
 801962a:	4618      	mov	r0, r3
 801962c:	3714      	adds	r7, #20
 801962e:	46bd      	mov	sp, r7
 8019630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019634:	4770      	bx	lr
	...

08019638 <ip4addr_aton>:
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int
ip4addr_aton(const char *cp, ip4_addr_t *addr)
{
 8019638:	b580      	push	{r7, lr}
 801963a:	b08a      	sub	sp, #40	; 0x28
 801963c:	af00      	add	r7, sp, #0
 801963e:	6078      	str	r0, [r7, #4]
 8019640:	6039      	str	r1, [r7, #0]
  u32_t val;
  u8_t base;
  char c;
  u32_t parts[4];
  u32_t *pp = parts;
 8019642:	f107 030c 	add.w	r3, r7, #12
 8019646:	61fb      	str	r3, [r7, #28]

  c = *cp;
 8019648:	687b      	ldr	r3, [r7, #4]
 801964a:	781b      	ldrb	r3, [r3, #0]
 801964c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    /*
     * Collect number up to ``.''.
     * Values are specified as for C:
     * 0x=hex, 0=octal, 1-9=decimal.
     */
    if (!lwip_isdigit(c)) {
 8019650:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8019654:	3301      	adds	r3, #1
 8019656:	4a89      	ldr	r2, [pc, #548]	; (801987c <ip4addr_aton+0x244>)
 8019658:	4413      	add	r3, r2
 801965a:	781b      	ldrb	r3, [r3, #0]
 801965c:	f003 0304 	and.w	r3, r3, #4
 8019660:	2b00      	cmp	r3, #0
 8019662:	d101      	bne.n	8019668 <ip4addr_aton+0x30>
      return 0;
 8019664:	2300      	movs	r3, #0
 8019666:	e105      	b.n	8019874 <ip4addr_aton+0x23c>
    }
    val = 0;
 8019668:	2300      	movs	r3, #0
 801966a:	627b      	str	r3, [r7, #36]	; 0x24
    base = 10;
 801966c:	230a      	movs	r3, #10
 801966e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (c == '0') {
 8019672:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8019676:	2b30      	cmp	r3, #48	; 0x30
 8019678:	d11c      	bne.n	80196b4 <ip4addr_aton+0x7c>
      c = *++cp;
 801967a:	687b      	ldr	r3, [r7, #4]
 801967c:	3301      	adds	r3, #1
 801967e:	607b      	str	r3, [r7, #4]
 8019680:	687b      	ldr	r3, [r7, #4]
 8019682:	781b      	ldrb	r3, [r3, #0]
 8019684:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      if (c == 'x' || c == 'X') {
 8019688:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801968c:	2b78      	cmp	r3, #120	; 0x78
 801968e:	d003      	beq.n	8019698 <ip4addr_aton+0x60>
 8019690:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8019694:	2b58      	cmp	r3, #88	; 0x58
 8019696:	d10a      	bne.n	80196ae <ip4addr_aton+0x76>
        base = 16;
 8019698:	2310      	movs	r3, #16
 801969a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        c = *++cp;
 801969e:	687b      	ldr	r3, [r7, #4]
 80196a0:	3301      	adds	r3, #1
 80196a2:	607b      	str	r3, [r7, #4]
 80196a4:	687b      	ldr	r3, [r7, #4]
 80196a6:	781b      	ldrb	r3, [r3, #0]
 80196a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80196ac:	e002      	b.n	80196b4 <ip4addr_aton+0x7c>
      } else {
        base = 8;
 80196ae:	2308      	movs	r3, #8
 80196b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      }
    }
    for (;;) {
      if (lwip_isdigit(c)) {
 80196b4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80196b8:	3301      	adds	r3, #1
 80196ba:	4a70      	ldr	r2, [pc, #448]	; (801987c <ip4addr_aton+0x244>)
 80196bc:	4413      	add	r3, r2
 80196be:	781b      	ldrb	r3, [r3, #0]
 80196c0:	f003 0304 	and.w	r3, r3, #4
 80196c4:	2b00      	cmp	r3, #0
 80196c6:	d011      	beq.n	80196ec <ip4addr_aton+0xb4>
        val = (val * base) + (u32_t)(c - '0');
 80196c8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80196cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80196ce:	fb03 f202 	mul.w	r2, r3, r2
 80196d2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80196d6:	4413      	add	r3, r2
 80196d8:	3b30      	subs	r3, #48	; 0x30
 80196da:	627b      	str	r3, [r7, #36]	; 0x24
        c = *++cp;
 80196dc:	687b      	ldr	r3, [r7, #4]
 80196de:	3301      	adds	r3, #1
 80196e0:	607b      	str	r3, [r7, #4]
 80196e2:	687b      	ldr	r3, [r7, #4]
 80196e4:	781b      	ldrb	r3, [r3, #0]
 80196e6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80196ea:	e7e3      	b.n	80196b4 <ip4addr_aton+0x7c>
      } else if (base == 16 && lwip_isxdigit(c)) {
 80196ec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80196f0:	2b10      	cmp	r3, #16
 80196f2:	d127      	bne.n	8019744 <ip4addr_aton+0x10c>
 80196f4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80196f8:	3301      	adds	r3, #1
 80196fa:	4a60      	ldr	r2, [pc, #384]	; (801987c <ip4addr_aton+0x244>)
 80196fc:	4413      	add	r3, r2
 80196fe:	781b      	ldrb	r3, [r3, #0]
 8019700:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8019704:	2b00      	cmp	r3, #0
 8019706:	d01d      	beq.n	8019744 <ip4addr_aton+0x10c>
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 8019708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801970a:	011b      	lsls	r3, r3, #4
 801970c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8019710:	f102 010a 	add.w	r1, r2, #10
 8019714:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8019718:	3201      	adds	r2, #1
 801971a:	4858      	ldr	r0, [pc, #352]	; (801987c <ip4addr_aton+0x244>)
 801971c:	4402      	add	r2, r0
 801971e:	7812      	ldrb	r2, [r2, #0]
 8019720:	f002 0203 	and.w	r2, r2, #3
 8019724:	2a02      	cmp	r2, #2
 8019726:	d101      	bne.n	801972c <ip4addr_aton+0xf4>
 8019728:	2261      	movs	r2, #97	; 0x61
 801972a:	e000      	b.n	801972e <ip4addr_aton+0xf6>
 801972c:	2241      	movs	r2, #65	; 0x41
 801972e:	1a8a      	subs	r2, r1, r2
 8019730:	4313      	orrs	r3, r2
 8019732:	627b      	str	r3, [r7, #36]	; 0x24
        c = *++cp;
 8019734:	687b      	ldr	r3, [r7, #4]
 8019736:	3301      	adds	r3, #1
 8019738:	607b      	str	r3, [r7, #4]
 801973a:	687b      	ldr	r3, [r7, #4]
 801973c:	781b      	ldrb	r3, [r3, #0]
 801973e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      if (lwip_isdigit(c)) {
 8019742:	e7b7      	b.n	80196b4 <ip4addr_aton+0x7c>
      } else {
        break;
      }
    }
    if (c == '.') {
 8019744:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8019748:	2b2e      	cmp	r3, #46	; 0x2e
 801974a:	d114      	bne.n	8019776 <ip4addr_aton+0x13e>
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
 801974c:	f107 030c 	add.w	r3, r7, #12
 8019750:	330c      	adds	r3, #12
 8019752:	69fa      	ldr	r2, [r7, #28]
 8019754:	429a      	cmp	r2, r3
 8019756:	d301      	bcc.n	801975c <ip4addr_aton+0x124>
        return 0;
 8019758:	2300      	movs	r3, #0
 801975a:	e08b      	b.n	8019874 <ip4addr_aton+0x23c>
      }
      *pp++ = val;
 801975c:	69fb      	ldr	r3, [r7, #28]
 801975e:	1d1a      	adds	r2, r3, #4
 8019760:	61fa      	str	r2, [r7, #28]
 8019762:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019764:	601a      	str	r2, [r3, #0]
      c = *++cp;
 8019766:	687b      	ldr	r3, [r7, #4]
 8019768:	3301      	adds	r3, #1
 801976a:	607b      	str	r3, [r7, #4]
 801976c:	687b      	ldr	r3, [r7, #4]
 801976e:	781b      	ldrb	r3, [r3, #0]
 8019770:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    if (!lwip_isdigit(c)) {
 8019774:	e76c      	b.n	8019650 <ip4addr_aton+0x18>
    } else {
      break;
 8019776:	bf00      	nop
    }
  }
  /*
   * Check for trailing characters.
   */
  if (c != '\0' && !lwip_isspace(c)) {
 8019778:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801977c:	2b00      	cmp	r3, #0
 801977e:	d00b      	beq.n	8019798 <ip4addr_aton+0x160>
 8019780:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8019784:	3301      	adds	r3, #1
 8019786:	4a3d      	ldr	r2, [pc, #244]	; (801987c <ip4addr_aton+0x244>)
 8019788:	4413      	add	r3, r2
 801978a:	781b      	ldrb	r3, [r3, #0]
 801978c:	f003 0308 	and.w	r3, r3, #8
 8019790:	2b00      	cmp	r3, #0
 8019792:	d101      	bne.n	8019798 <ip4addr_aton+0x160>
    return 0;
 8019794:	2300      	movs	r3, #0
 8019796:	e06d      	b.n	8019874 <ip4addr_aton+0x23c>
  }
  /*
   * Concoct the address according to
   * the number of parts specified.
   */
  switch (pp - parts + 1) {
 8019798:	f107 030c 	add.w	r3, r7, #12
 801979c:	69fa      	ldr	r2, [r7, #28]
 801979e:	1ad3      	subs	r3, r2, r3
 80197a0:	109b      	asrs	r3, r3, #2
 80197a2:	3301      	adds	r3, #1
 80197a4:	2b04      	cmp	r3, #4
 80197a6:	d853      	bhi.n	8019850 <ip4addr_aton+0x218>
 80197a8:	a201      	add	r2, pc, #4	; (adr r2, 80197b0 <ip4addr_aton+0x178>)
 80197aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80197ae:	bf00      	nop
 80197b0:	080197c5 	.word	0x080197c5
 80197b4:	0801985f 	.word	0x0801985f
 80197b8:	080197c9 	.word	0x080197c9
 80197bc:	080197eb 	.word	0x080197eb
 80197c0:	08019819 	.word	0x08019819

    case 0:
      return 0;       /* initial nondigit */
 80197c4:	2300      	movs	r3, #0
 80197c6:	e055      	b.n	8019874 <ip4addr_aton+0x23c>

    case 1:             /* a -- 32 bits */
      break;

    case 2:             /* a.b -- 8.24 bits */
      if (val > 0xffffffUL) {
 80197c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80197ca:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80197ce:	d301      	bcc.n	80197d4 <ip4addr_aton+0x19c>
        return 0;
 80197d0:	2300      	movs	r3, #0
 80197d2:	e04f      	b.n	8019874 <ip4addr_aton+0x23c>
      }
      if (parts[0] > 0xff) {
 80197d4:	68fb      	ldr	r3, [r7, #12]
 80197d6:	2bff      	cmp	r3, #255	; 0xff
 80197d8:	d901      	bls.n	80197de <ip4addr_aton+0x1a6>
        return 0;
 80197da:	2300      	movs	r3, #0
 80197dc:	e04a      	b.n	8019874 <ip4addr_aton+0x23c>
      }
      val |= parts[0] << 24;
 80197de:	68fb      	ldr	r3, [r7, #12]
 80197e0:	061b      	lsls	r3, r3, #24
 80197e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80197e4:	4313      	orrs	r3, r2
 80197e6:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80197e8:	e03a      	b.n	8019860 <ip4addr_aton+0x228>

    case 3:             /* a.b.c -- 8.8.16 bits */
      if (val > 0xffff) {
 80197ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80197ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80197f0:	d301      	bcc.n	80197f6 <ip4addr_aton+0x1be>
        return 0;
 80197f2:	2300      	movs	r3, #0
 80197f4:	e03e      	b.n	8019874 <ip4addr_aton+0x23c>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff)) {
 80197f6:	68fb      	ldr	r3, [r7, #12]
 80197f8:	2bff      	cmp	r3, #255	; 0xff
 80197fa:	d802      	bhi.n	8019802 <ip4addr_aton+0x1ca>
 80197fc:	693b      	ldr	r3, [r7, #16]
 80197fe:	2bff      	cmp	r3, #255	; 0xff
 8019800:	d901      	bls.n	8019806 <ip4addr_aton+0x1ce>
        return 0;
 8019802:	2300      	movs	r3, #0
 8019804:	e036      	b.n	8019874 <ip4addr_aton+0x23c>
      }
      val |= (parts[0] << 24) | (parts[1] << 16);
 8019806:	68fb      	ldr	r3, [r7, #12]
 8019808:	061a      	lsls	r2, r3, #24
 801980a:	693b      	ldr	r3, [r7, #16]
 801980c:	041b      	lsls	r3, r3, #16
 801980e:	4313      	orrs	r3, r2
 8019810:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019812:	4313      	orrs	r3, r2
 8019814:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8019816:	e023      	b.n	8019860 <ip4addr_aton+0x228>

    case 4:             /* a.b.c.d -- 8.8.8.8 bits */
      if (val > 0xff) {
 8019818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801981a:	2bff      	cmp	r3, #255	; 0xff
 801981c:	d901      	bls.n	8019822 <ip4addr_aton+0x1ea>
        return 0;
 801981e:	2300      	movs	r3, #0
 8019820:	e028      	b.n	8019874 <ip4addr_aton+0x23c>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff)) {
 8019822:	68fb      	ldr	r3, [r7, #12]
 8019824:	2bff      	cmp	r3, #255	; 0xff
 8019826:	d805      	bhi.n	8019834 <ip4addr_aton+0x1fc>
 8019828:	693b      	ldr	r3, [r7, #16]
 801982a:	2bff      	cmp	r3, #255	; 0xff
 801982c:	d802      	bhi.n	8019834 <ip4addr_aton+0x1fc>
 801982e:	697b      	ldr	r3, [r7, #20]
 8019830:	2bff      	cmp	r3, #255	; 0xff
 8019832:	d901      	bls.n	8019838 <ip4addr_aton+0x200>
        return 0;
 8019834:	2300      	movs	r3, #0
 8019836:	e01d      	b.n	8019874 <ip4addr_aton+0x23c>
      }
      val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 8019838:	68fb      	ldr	r3, [r7, #12]
 801983a:	061a      	lsls	r2, r3, #24
 801983c:	693b      	ldr	r3, [r7, #16]
 801983e:	041b      	lsls	r3, r3, #16
 8019840:	431a      	orrs	r2, r3
 8019842:	697b      	ldr	r3, [r7, #20]
 8019844:	021b      	lsls	r3, r3, #8
 8019846:	4313      	orrs	r3, r2
 8019848:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801984a:	4313      	orrs	r3, r2
 801984c:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 801984e:	e007      	b.n	8019860 <ip4addr_aton+0x228>
    default:
      LWIP_ASSERT("unhandled", 0);
 8019850:	4b0b      	ldr	r3, [pc, #44]	; (8019880 <ip4addr_aton+0x248>)
 8019852:	22f9      	movs	r2, #249	; 0xf9
 8019854:	490b      	ldr	r1, [pc, #44]	; (8019884 <ip4addr_aton+0x24c>)
 8019856:	480c      	ldr	r0, [pc, #48]	; (8019888 <ip4addr_aton+0x250>)
 8019858:	f001 fe12 	bl	801b480 <iprintf>
      break;
 801985c:	e000      	b.n	8019860 <ip4addr_aton+0x228>
      break;
 801985e:	bf00      	nop
  }
  if (addr) {
 8019860:	683b      	ldr	r3, [r7, #0]
 8019862:	2b00      	cmp	r3, #0
 8019864:	d005      	beq.n	8019872 <ip4addr_aton+0x23a>
    ip4_addr_set_u32(addr, lwip_htonl(val));
 8019866:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019868:	f7f4 f941 	bl	800daee <lwip_htonl>
 801986c:	4602      	mov	r2, r0
 801986e:	683b      	ldr	r3, [r7, #0]
 8019870:	601a      	str	r2, [r3, #0]
  }
  return 1;
 8019872:	2301      	movs	r3, #1
}
 8019874:	4618      	mov	r0, r3
 8019876:	3728      	adds	r7, #40	; 0x28
 8019878:	46bd      	mov	sp, r7
 801987a:	bd80      	pop	{r7, pc}
 801987c:	0806cf9c 	.word	0x0806cf9c
 8019880:	08020e60 	.word	0x08020e60
 8019884:	08020e9c 	.word	0x08020e9c
 8019888:	08020ea8 	.word	0x08020ea8

0801988c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801988c:	b580      	push	{r7, lr}
 801988e:	b084      	sub	sp, #16
 8019890:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8019892:	2300      	movs	r3, #0
 8019894:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8019896:	4b12      	ldr	r3, [pc, #72]	; (80198e0 <ip_reass_tmr+0x54>)
 8019898:	681b      	ldr	r3, [r3, #0]
 801989a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801989c:	e018      	b.n	80198d0 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801989e:	68fb      	ldr	r3, [r7, #12]
 80198a0:	7fdb      	ldrb	r3, [r3, #31]
 80198a2:	2b00      	cmp	r3, #0
 80198a4:	d00b      	beq.n	80198be <ip_reass_tmr+0x32>
      r->timer--;
 80198a6:	68fb      	ldr	r3, [r7, #12]
 80198a8:	7fdb      	ldrb	r3, [r3, #31]
 80198aa:	3b01      	subs	r3, #1
 80198ac:	b2da      	uxtb	r2, r3
 80198ae:	68fb      	ldr	r3, [r7, #12]
 80198b0:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80198b2:	68fb      	ldr	r3, [r7, #12]
 80198b4:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80198b6:	68fb      	ldr	r3, [r7, #12]
 80198b8:	681b      	ldr	r3, [r3, #0]
 80198ba:	60fb      	str	r3, [r7, #12]
 80198bc:	e008      	b.n	80198d0 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80198be:	68fb      	ldr	r3, [r7, #12]
 80198c0:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80198c2:	68fb      	ldr	r3, [r7, #12]
 80198c4:	681b      	ldr	r3, [r3, #0]
 80198c6:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80198c8:	68b9      	ldr	r1, [r7, #8]
 80198ca:	6878      	ldr	r0, [r7, #4]
 80198cc:	f000 f80a 	bl	80198e4 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80198d0:	68fb      	ldr	r3, [r7, #12]
 80198d2:	2b00      	cmp	r3, #0
 80198d4:	d1e3      	bne.n	801989e <ip_reass_tmr+0x12>
    }
  }
}
 80198d6:	bf00      	nop
 80198d8:	bf00      	nop
 80198da:	3710      	adds	r7, #16
 80198dc:	46bd      	mov	sp, r7
 80198de:	bd80      	pop	{r7, pc}
 80198e0:	20013d00 	.word	0x20013d00

080198e4 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80198e4:	b580      	push	{r7, lr}
 80198e6:	b088      	sub	sp, #32
 80198e8:	af00      	add	r7, sp, #0
 80198ea:	6078      	str	r0, [r7, #4]
 80198ec:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 80198ee:	2300      	movs	r3, #0
 80198f0:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 80198f2:	683a      	ldr	r2, [r7, #0]
 80198f4:	687b      	ldr	r3, [r7, #4]
 80198f6:	429a      	cmp	r2, r3
 80198f8:	d105      	bne.n	8019906 <ip_reass_free_complete_datagram+0x22>
 80198fa:	4b45      	ldr	r3, [pc, #276]	; (8019a10 <ip_reass_free_complete_datagram+0x12c>)
 80198fc:	22ab      	movs	r2, #171	; 0xab
 80198fe:	4945      	ldr	r1, [pc, #276]	; (8019a14 <ip_reass_free_complete_datagram+0x130>)
 8019900:	4845      	ldr	r0, [pc, #276]	; (8019a18 <ip_reass_free_complete_datagram+0x134>)
 8019902:	f001 fdbd 	bl	801b480 <iprintf>
  if (prev != NULL) {
 8019906:	683b      	ldr	r3, [r7, #0]
 8019908:	2b00      	cmp	r3, #0
 801990a:	d00a      	beq.n	8019922 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801990c:	683b      	ldr	r3, [r7, #0]
 801990e:	681b      	ldr	r3, [r3, #0]
 8019910:	687a      	ldr	r2, [r7, #4]
 8019912:	429a      	cmp	r2, r3
 8019914:	d005      	beq.n	8019922 <ip_reass_free_complete_datagram+0x3e>
 8019916:	4b3e      	ldr	r3, [pc, #248]	; (8019a10 <ip_reass_free_complete_datagram+0x12c>)
 8019918:	22ad      	movs	r2, #173	; 0xad
 801991a:	4940      	ldr	r1, [pc, #256]	; (8019a1c <ip_reass_free_complete_datagram+0x138>)
 801991c:	483e      	ldr	r0, [pc, #248]	; (8019a18 <ip_reass_free_complete_datagram+0x134>)
 801991e:	f001 fdaf 	bl	801b480 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8019922:	687b      	ldr	r3, [r7, #4]
 8019924:	685b      	ldr	r3, [r3, #4]
 8019926:	685b      	ldr	r3, [r3, #4]
 8019928:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801992a:	697b      	ldr	r3, [r7, #20]
 801992c:	889b      	ldrh	r3, [r3, #4]
 801992e:	b29b      	uxth	r3, r3
 8019930:	2b00      	cmp	r3, #0
 8019932:	d12a      	bne.n	801998a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8019934:	687b      	ldr	r3, [r7, #4]
 8019936:	685b      	ldr	r3, [r3, #4]
 8019938:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801993a:	697b      	ldr	r3, [r7, #20]
 801993c:	681a      	ldr	r2, [r3, #0]
 801993e:	687b      	ldr	r3, [r7, #4]
 8019940:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8019942:	69bb      	ldr	r3, [r7, #24]
 8019944:	6858      	ldr	r0, [r3, #4]
 8019946:	687b      	ldr	r3, [r7, #4]
 8019948:	3308      	adds	r3, #8
 801994a:	2214      	movs	r2, #20
 801994c:	4619      	mov	r1, r3
 801994e:	f001 f821 	bl	801a994 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8019952:	2101      	movs	r1, #1
 8019954:	69b8      	ldr	r0, [r7, #24]
 8019956:	f7ff fa83 	bl	8018e60 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801995a:	69b8      	ldr	r0, [r7, #24]
 801995c:	f7f5 fe62 	bl	800f624 <pbuf_clen>
 8019960:	4603      	mov	r3, r0
 8019962:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8019964:	8bfa      	ldrh	r2, [r7, #30]
 8019966:	8a7b      	ldrh	r3, [r7, #18]
 8019968:	4413      	add	r3, r2
 801996a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801996e:	db05      	blt.n	801997c <ip_reass_free_complete_datagram+0x98>
 8019970:	4b27      	ldr	r3, [pc, #156]	; (8019a10 <ip_reass_free_complete_datagram+0x12c>)
 8019972:	22bc      	movs	r2, #188	; 0xbc
 8019974:	492a      	ldr	r1, [pc, #168]	; (8019a20 <ip_reass_free_complete_datagram+0x13c>)
 8019976:	4828      	ldr	r0, [pc, #160]	; (8019a18 <ip_reass_free_complete_datagram+0x134>)
 8019978:	f001 fd82 	bl	801b480 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801997c:	8bfa      	ldrh	r2, [r7, #30]
 801997e:	8a7b      	ldrh	r3, [r7, #18]
 8019980:	4413      	add	r3, r2
 8019982:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8019984:	69b8      	ldr	r0, [r7, #24]
 8019986:	f7f5 fdbf 	bl	800f508 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801998a:	687b      	ldr	r3, [r7, #4]
 801998c:	685b      	ldr	r3, [r3, #4]
 801998e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8019990:	e01f      	b.n	80199d2 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8019992:	69bb      	ldr	r3, [r7, #24]
 8019994:	685b      	ldr	r3, [r3, #4]
 8019996:	617b      	str	r3, [r7, #20]
    pcur = p;
 8019998:	69bb      	ldr	r3, [r7, #24]
 801999a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801999c:	697b      	ldr	r3, [r7, #20]
 801999e:	681b      	ldr	r3, [r3, #0]
 80199a0:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80199a2:	68f8      	ldr	r0, [r7, #12]
 80199a4:	f7f5 fe3e 	bl	800f624 <pbuf_clen>
 80199a8:	4603      	mov	r3, r0
 80199aa:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80199ac:	8bfa      	ldrh	r2, [r7, #30]
 80199ae:	8a7b      	ldrh	r3, [r7, #18]
 80199b0:	4413      	add	r3, r2
 80199b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80199b6:	db05      	blt.n	80199c4 <ip_reass_free_complete_datagram+0xe0>
 80199b8:	4b15      	ldr	r3, [pc, #84]	; (8019a10 <ip_reass_free_complete_datagram+0x12c>)
 80199ba:	22cc      	movs	r2, #204	; 0xcc
 80199bc:	4918      	ldr	r1, [pc, #96]	; (8019a20 <ip_reass_free_complete_datagram+0x13c>)
 80199be:	4816      	ldr	r0, [pc, #88]	; (8019a18 <ip_reass_free_complete_datagram+0x134>)
 80199c0:	f001 fd5e 	bl	801b480 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80199c4:	8bfa      	ldrh	r2, [r7, #30]
 80199c6:	8a7b      	ldrh	r3, [r7, #18]
 80199c8:	4413      	add	r3, r2
 80199ca:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80199cc:	68f8      	ldr	r0, [r7, #12]
 80199ce:	f7f5 fd9b 	bl	800f508 <pbuf_free>
  while (p != NULL) {
 80199d2:	69bb      	ldr	r3, [r7, #24]
 80199d4:	2b00      	cmp	r3, #0
 80199d6:	d1dc      	bne.n	8019992 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80199d8:	6839      	ldr	r1, [r7, #0]
 80199da:	6878      	ldr	r0, [r7, #4]
 80199dc:	f000 f8c2 	bl	8019b64 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80199e0:	4b10      	ldr	r3, [pc, #64]	; (8019a24 <ip_reass_free_complete_datagram+0x140>)
 80199e2:	881b      	ldrh	r3, [r3, #0]
 80199e4:	8bfa      	ldrh	r2, [r7, #30]
 80199e6:	429a      	cmp	r2, r3
 80199e8:	d905      	bls.n	80199f6 <ip_reass_free_complete_datagram+0x112>
 80199ea:	4b09      	ldr	r3, [pc, #36]	; (8019a10 <ip_reass_free_complete_datagram+0x12c>)
 80199ec:	22d2      	movs	r2, #210	; 0xd2
 80199ee:	490e      	ldr	r1, [pc, #56]	; (8019a28 <ip_reass_free_complete_datagram+0x144>)
 80199f0:	4809      	ldr	r0, [pc, #36]	; (8019a18 <ip_reass_free_complete_datagram+0x134>)
 80199f2:	f001 fd45 	bl	801b480 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80199f6:	4b0b      	ldr	r3, [pc, #44]	; (8019a24 <ip_reass_free_complete_datagram+0x140>)
 80199f8:	881a      	ldrh	r2, [r3, #0]
 80199fa:	8bfb      	ldrh	r3, [r7, #30]
 80199fc:	1ad3      	subs	r3, r2, r3
 80199fe:	b29a      	uxth	r2, r3
 8019a00:	4b08      	ldr	r3, [pc, #32]	; (8019a24 <ip_reass_free_complete_datagram+0x140>)
 8019a02:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8019a04:	8bfb      	ldrh	r3, [r7, #30]
}
 8019a06:	4618      	mov	r0, r3
 8019a08:	3720      	adds	r7, #32
 8019a0a:	46bd      	mov	sp, r7
 8019a0c:	bd80      	pop	{r7, pc}
 8019a0e:	bf00      	nop
 8019a10:	08020ed0 	.word	0x08020ed0
 8019a14:	08020f0c 	.word	0x08020f0c
 8019a18:	08020f18 	.word	0x08020f18
 8019a1c:	08020f40 	.word	0x08020f40
 8019a20:	08020f54 	.word	0x08020f54
 8019a24:	20013d04 	.word	0x20013d04
 8019a28:	08020f74 	.word	0x08020f74

08019a2c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8019a2c:	b580      	push	{r7, lr}
 8019a2e:	b08a      	sub	sp, #40	; 0x28
 8019a30:	af00      	add	r7, sp, #0
 8019a32:	6078      	str	r0, [r7, #4]
 8019a34:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8019a36:	2300      	movs	r3, #0
 8019a38:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8019a3a:	2300      	movs	r3, #0
 8019a3c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8019a3e:	2300      	movs	r3, #0
 8019a40:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8019a42:	2300      	movs	r3, #0
 8019a44:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8019a46:	2300      	movs	r3, #0
 8019a48:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8019a4a:	4b28      	ldr	r3, [pc, #160]	; (8019aec <ip_reass_remove_oldest_datagram+0xc0>)
 8019a4c:	681b      	ldr	r3, [r3, #0]
 8019a4e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8019a50:	e030      	b.n	8019ab4 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8019a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019a54:	695a      	ldr	r2, [r3, #20]
 8019a56:	687b      	ldr	r3, [r7, #4]
 8019a58:	68db      	ldr	r3, [r3, #12]
 8019a5a:	429a      	cmp	r2, r3
 8019a5c:	d10c      	bne.n	8019a78 <ip_reass_remove_oldest_datagram+0x4c>
 8019a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019a60:	699a      	ldr	r2, [r3, #24]
 8019a62:	687b      	ldr	r3, [r7, #4]
 8019a64:	691b      	ldr	r3, [r3, #16]
 8019a66:	429a      	cmp	r2, r3
 8019a68:	d106      	bne.n	8019a78 <ip_reass_remove_oldest_datagram+0x4c>
 8019a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019a6c:	899a      	ldrh	r2, [r3, #12]
 8019a6e:	687b      	ldr	r3, [r7, #4]
 8019a70:	889b      	ldrh	r3, [r3, #4]
 8019a72:	b29b      	uxth	r3, r3
 8019a74:	429a      	cmp	r2, r3
 8019a76:	d014      	beq.n	8019aa2 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8019a78:	693b      	ldr	r3, [r7, #16]
 8019a7a:	3301      	adds	r3, #1
 8019a7c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8019a7e:	6a3b      	ldr	r3, [r7, #32]
 8019a80:	2b00      	cmp	r3, #0
 8019a82:	d104      	bne.n	8019a8e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8019a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019a86:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8019a88:	69fb      	ldr	r3, [r7, #28]
 8019a8a:	61bb      	str	r3, [r7, #24]
 8019a8c:	e009      	b.n	8019aa2 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8019a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019a90:	7fda      	ldrb	r2, [r3, #31]
 8019a92:	6a3b      	ldr	r3, [r7, #32]
 8019a94:	7fdb      	ldrb	r3, [r3, #31]
 8019a96:	429a      	cmp	r2, r3
 8019a98:	d803      	bhi.n	8019aa2 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8019a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019a9c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8019a9e:	69fb      	ldr	r3, [r7, #28]
 8019aa0:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8019aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019aa4:	681b      	ldr	r3, [r3, #0]
 8019aa6:	2b00      	cmp	r3, #0
 8019aa8:	d001      	beq.n	8019aae <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8019aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019aac:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8019aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019ab0:	681b      	ldr	r3, [r3, #0]
 8019ab2:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8019ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019ab6:	2b00      	cmp	r3, #0
 8019ab8:	d1cb      	bne.n	8019a52 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8019aba:	6a3b      	ldr	r3, [r7, #32]
 8019abc:	2b00      	cmp	r3, #0
 8019abe:	d008      	beq.n	8019ad2 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8019ac0:	69b9      	ldr	r1, [r7, #24]
 8019ac2:	6a38      	ldr	r0, [r7, #32]
 8019ac4:	f7ff ff0e 	bl	80198e4 <ip_reass_free_complete_datagram>
 8019ac8:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8019aca:	697a      	ldr	r2, [r7, #20]
 8019acc:	68fb      	ldr	r3, [r7, #12]
 8019ace:	4413      	add	r3, r2
 8019ad0:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8019ad2:	697a      	ldr	r2, [r7, #20]
 8019ad4:	683b      	ldr	r3, [r7, #0]
 8019ad6:	429a      	cmp	r2, r3
 8019ad8:	da02      	bge.n	8019ae0 <ip_reass_remove_oldest_datagram+0xb4>
 8019ada:	693b      	ldr	r3, [r7, #16]
 8019adc:	2b01      	cmp	r3, #1
 8019ade:	dcac      	bgt.n	8019a3a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8019ae0:	697b      	ldr	r3, [r7, #20]
}
 8019ae2:	4618      	mov	r0, r3
 8019ae4:	3728      	adds	r7, #40	; 0x28
 8019ae6:	46bd      	mov	sp, r7
 8019ae8:	bd80      	pop	{r7, pc}
 8019aea:	bf00      	nop
 8019aec:	20013d00 	.word	0x20013d00

08019af0 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8019af0:	b580      	push	{r7, lr}
 8019af2:	b084      	sub	sp, #16
 8019af4:	af00      	add	r7, sp, #0
 8019af6:	6078      	str	r0, [r7, #4]
 8019af8:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8019afa:	2004      	movs	r0, #4
 8019afc:	f7f4 fe10 	bl	800e720 <memp_malloc>
 8019b00:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8019b02:	68fb      	ldr	r3, [r7, #12]
 8019b04:	2b00      	cmp	r3, #0
 8019b06:	d110      	bne.n	8019b2a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8019b08:	6839      	ldr	r1, [r7, #0]
 8019b0a:	6878      	ldr	r0, [r7, #4]
 8019b0c:	f7ff ff8e 	bl	8019a2c <ip_reass_remove_oldest_datagram>
 8019b10:	4602      	mov	r2, r0
 8019b12:	683b      	ldr	r3, [r7, #0]
 8019b14:	4293      	cmp	r3, r2
 8019b16:	dc03      	bgt.n	8019b20 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8019b18:	2004      	movs	r0, #4
 8019b1a:	f7f4 fe01 	bl	800e720 <memp_malloc>
 8019b1e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8019b20:	68fb      	ldr	r3, [r7, #12]
 8019b22:	2b00      	cmp	r3, #0
 8019b24:	d101      	bne.n	8019b2a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8019b26:	2300      	movs	r3, #0
 8019b28:	e016      	b.n	8019b58 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8019b2a:	2220      	movs	r2, #32
 8019b2c:	2100      	movs	r1, #0
 8019b2e:	68f8      	ldr	r0, [r7, #12]
 8019b30:	f000 ff3e 	bl	801a9b0 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8019b34:	68fb      	ldr	r3, [r7, #12]
 8019b36:	220f      	movs	r2, #15
 8019b38:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8019b3a:	4b09      	ldr	r3, [pc, #36]	; (8019b60 <ip_reass_enqueue_new_datagram+0x70>)
 8019b3c:	681a      	ldr	r2, [r3, #0]
 8019b3e:	68fb      	ldr	r3, [r7, #12]
 8019b40:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8019b42:	4a07      	ldr	r2, [pc, #28]	; (8019b60 <ip_reass_enqueue_new_datagram+0x70>)
 8019b44:	68fb      	ldr	r3, [r7, #12]
 8019b46:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8019b48:	68fb      	ldr	r3, [r7, #12]
 8019b4a:	3308      	adds	r3, #8
 8019b4c:	2214      	movs	r2, #20
 8019b4e:	6879      	ldr	r1, [r7, #4]
 8019b50:	4618      	mov	r0, r3
 8019b52:	f000 ff1f 	bl	801a994 <memcpy>
  return ipr;
 8019b56:	68fb      	ldr	r3, [r7, #12]
}
 8019b58:	4618      	mov	r0, r3
 8019b5a:	3710      	adds	r7, #16
 8019b5c:	46bd      	mov	sp, r7
 8019b5e:	bd80      	pop	{r7, pc}
 8019b60:	20013d00 	.word	0x20013d00

08019b64 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8019b64:	b580      	push	{r7, lr}
 8019b66:	b082      	sub	sp, #8
 8019b68:	af00      	add	r7, sp, #0
 8019b6a:	6078      	str	r0, [r7, #4]
 8019b6c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8019b6e:	4b10      	ldr	r3, [pc, #64]	; (8019bb0 <ip_reass_dequeue_datagram+0x4c>)
 8019b70:	681b      	ldr	r3, [r3, #0]
 8019b72:	687a      	ldr	r2, [r7, #4]
 8019b74:	429a      	cmp	r2, r3
 8019b76:	d104      	bne.n	8019b82 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8019b78:	687b      	ldr	r3, [r7, #4]
 8019b7a:	681b      	ldr	r3, [r3, #0]
 8019b7c:	4a0c      	ldr	r2, [pc, #48]	; (8019bb0 <ip_reass_dequeue_datagram+0x4c>)
 8019b7e:	6013      	str	r3, [r2, #0]
 8019b80:	e00d      	b.n	8019b9e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8019b82:	683b      	ldr	r3, [r7, #0]
 8019b84:	2b00      	cmp	r3, #0
 8019b86:	d106      	bne.n	8019b96 <ip_reass_dequeue_datagram+0x32>
 8019b88:	4b0a      	ldr	r3, [pc, #40]	; (8019bb4 <ip_reass_dequeue_datagram+0x50>)
 8019b8a:	f240 1245 	movw	r2, #325	; 0x145
 8019b8e:	490a      	ldr	r1, [pc, #40]	; (8019bb8 <ip_reass_dequeue_datagram+0x54>)
 8019b90:	480a      	ldr	r0, [pc, #40]	; (8019bbc <ip_reass_dequeue_datagram+0x58>)
 8019b92:	f001 fc75 	bl	801b480 <iprintf>
    prev->next = ipr->next;
 8019b96:	687b      	ldr	r3, [r7, #4]
 8019b98:	681a      	ldr	r2, [r3, #0]
 8019b9a:	683b      	ldr	r3, [r7, #0]
 8019b9c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8019b9e:	6879      	ldr	r1, [r7, #4]
 8019ba0:	2004      	movs	r0, #4
 8019ba2:	f7f4 fe0f 	bl	800e7c4 <memp_free>
}
 8019ba6:	bf00      	nop
 8019ba8:	3708      	adds	r7, #8
 8019baa:	46bd      	mov	sp, r7
 8019bac:	bd80      	pop	{r7, pc}
 8019bae:	bf00      	nop
 8019bb0:	20013d00 	.word	0x20013d00
 8019bb4:	08020ed0 	.word	0x08020ed0
 8019bb8:	08020f98 	.word	0x08020f98
 8019bbc:	08020f18 	.word	0x08020f18

08019bc0 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8019bc0:	b580      	push	{r7, lr}
 8019bc2:	b08c      	sub	sp, #48	; 0x30
 8019bc4:	af00      	add	r7, sp, #0
 8019bc6:	60f8      	str	r0, [r7, #12]
 8019bc8:	60b9      	str	r1, [r7, #8]
 8019bca:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8019bcc:	2300      	movs	r3, #0
 8019bce:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8019bd0:	2301      	movs	r3, #1
 8019bd2:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8019bd4:	68bb      	ldr	r3, [r7, #8]
 8019bd6:	685b      	ldr	r3, [r3, #4]
 8019bd8:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8019bda:	69fb      	ldr	r3, [r7, #28]
 8019bdc:	885b      	ldrh	r3, [r3, #2]
 8019bde:	b29b      	uxth	r3, r3
 8019be0:	4618      	mov	r0, r3
 8019be2:	f7f3 ff6f 	bl	800dac4 <lwip_htons>
 8019be6:	4603      	mov	r3, r0
 8019be8:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8019bea:	69fb      	ldr	r3, [r7, #28]
 8019bec:	781b      	ldrb	r3, [r3, #0]
 8019bee:	f003 030f 	and.w	r3, r3, #15
 8019bf2:	b2db      	uxtb	r3, r3
 8019bf4:	009b      	lsls	r3, r3, #2
 8019bf6:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8019bf8:	7e7b      	ldrb	r3, [r7, #25]
 8019bfa:	b29b      	uxth	r3, r3
 8019bfc:	8b7a      	ldrh	r2, [r7, #26]
 8019bfe:	429a      	cmp	r2, r3
 8019c00:	d202      	bcs.n	8019c08 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019c02:	f04f 33ff 	mov.w	r3, #4294967295
 8019c06:	e135      	b.n	8019e74 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8019c08:	7e7b      	ldrb	r3, [r7, #25]
 8019c0a:	b29b      	uxth	r3, r3
 8019c0c:	8b7a      	ldrh	r2, [r7, #26]
 8019c0e:	1ad3      	subs	r3, r2, r3
 8019c10:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8019c12:	69fb      	ldr	r3, [r7, #28]
 8019c14:	88db      	ldrh	r3, [r3, #6]
 8019c16:	b29b      	uxth	r3, r3
 8019c18:	4618      	mov	r0, r3
 8019c1a:	f7f3 ff53 	bl	800dac4 <lwip_htons>
 8019c1e:	4603      	mov	r3, r0
 8019c20:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8019c24:	b29b      	uxth	r3, r3
 8019c26:	00db      	lsls	r3, r3, #3
 8019c28:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8019c2a:	68bb      	ldr	r3, [r7, #8]
 8019c2c:	685b      	ldr	r3, [r3, #4]
 8019c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8019c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019c32:	2200      	movs	r2, #0
 8019c34:	701a      	strb	r2, [r3, #0]
 8019c36:	2200      	movs	r2, #0
 8019c38:	705a      	strb	r2, [r3, #1]
 8019c3a:	2200      	movs	r2, #0
 8019c3c:	709a      	strb	r2, [r3, #2]
 8019c3e:	2200      	movs	r2, #0
 8019c40:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8019c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019c44:	8afa      	ldrh	r2, [r7, #22]
 8019c46:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8019c48:	8afa      	ldrh	r2, [r7, #22]
 8019c4a:	8b7b      	ldrh	r3, [r7, #26]
 8019c4c:	4413      	add	r3, r2
 8019c4e:	b29a      	uxth	r2, r3
 8019c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019c52:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8019c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019c56:	88db      	ldrh	r3, [r3, #6]
 8019c58:	b29b      	uxth	r3, r3
 8019c5a:	8afa      	ldrh	r2, [r7, #22]
 8019c5c:	429a      	cmp	r2, r3
 8019c5e:	d902      	bls.n	8019c66 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019c60:	f04f 33ff 	mov.w	r3, #4294967295
 8019c64:	e106      	b.n	8019e74 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8019c66:	68fb      	ldr	r3, [r7, #12]
 8019c68:	685b      	ldr	r3, [r3, #4]
 8019c6a:	627b      	str	r3, [r7, #36]	; 0x24
 8019c6c:	e068      	b.n	8019d40 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8019c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c70:	685b      	ldr	r3, [r3, #4]
 8019c72:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8019c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019c76:	889b      	ldrh	r3, [r3, #4]
 8019c78:	b29a      	uxth	r2, r3
 8019c7a:	693b      	ldr	r3, [r7, #16]
 8019c7c:	889b      	ldrh	r3, [r3, #4]
 8019c7e:	b29b      	uxth	r3, r3
 8019c80:	429a      	cmp	r2, r3
 8019c82:	d235      	bcs.n	8019cf0 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8019c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019c86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019c88:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8019c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019c8c:	2b00      	cmp	r3, #0
 8019c8e:	d020      	beq.n	8019cd2 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8019c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019c92:	889b      	ldrh	r3, [r3, #4]
 8019c94:	b29a      	uxth	r2, r3
 8019c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019c98:	88db      	ldrh	r3, [r3, #6]
 8019c9a:	b29b      	uxth	r3, r3
 8019c9c:	429a      	cmp	r2, r3
 8019c9e:	d307      	bcc.n	8019cb0 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8019ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019ca2:	88db      	ldrh	r3, [r3, #6]
 8019ca4:	b29a      	uxth	r2, r3
 8019ca6:	693b      	ldr	r3, [r7, #16]
 8019ca8:	889b      	ldrh	r3, [r3, #4]
 8019caa:	b29b      	uxth	r3, r3
 8019cac:	429a      	cmp	r2, r3
 8019cae:	d902      	bls.n	8019cb6 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019cb0:	f04f 33ff 	mov.w	r3, #4294967295
 8019cb4:	e0de      	b.n	8019e74 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8019cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019cb8:	68ba      	ldr	r2, [r7, #8]
 8019cba:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8019cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019cbe:	88db      	ldrh	r3, [r3, #6]
 8019cc0:	b29a      	uxth	r2, r3
 8019cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019cc4:	889b      	ldrh	r3, [r3, #4]
 8019cc6:	b29b      	uxth	r3, r3
 8019cc8:	429a      	cmp	r2, r3
 8019cca:	d03d      	beq.n	8019d48 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8019ccc:	2300      	movs	r3, #0
 8019cce:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8019cd0:	e03a      	b.n	8019d48 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8019cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019cd4:	88db      	ldrh	r3, [r3, #6]
 8019cd6:	b29a      	uxth	r2, r3
 8019cd8:	693b      	ldr	r3, [r7, #16]
 8019cda:	889b      	ldrh	r3, [r3, #4]
 8019cdc:	b29b      	uxth	r3, r3
 8019cde:	429a      	cmp	r2, r3
 8019ce0:	d902      	bls.n	8019ce8 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019ce2:	f04f 33ff 	mov.w	r3, #4294967295
 8019ce6:	e0c5      	b.n	8019e74 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8019ce8:	68fb      	ldr	r3, [r7, #12]
 8019cea:	68ba      	ldr	r2, [r7, #8]
 8019cec:	605a      	str	r2, [r3, #4]
      break;
 8019cee:	e02b      	b.n	8019d48 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8019cf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019cf2:	889b      	ldrh	r3, [r3, #4]
 8019cf4:	b29a      	uxth	r2, r3
 8019cf6:	693b      	ldr	r3, [r7, #16]
 8019cf8:	889b      	ldrh	r3, [r3, #4]
 8019cfa:	b29b      	uxth	r3, r3
 8019cfc:	429a      	cmp	r2, r3
 8019cfe:	d102      	bne.n	8019d06 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019d00:	f04f 33ff 	mov.w	r3, #4294967295
 8019d04:	e0b6      	b.n	8019e74 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8019d06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019d08:	889b      	ldrh	r3, [r3, #4]
 8019d0a:	b29a      	uxth	r2, r3
 8019d0c:	693b      	ldr	r3, [r7, #16]
 8019d0e:	88db      	ldrh	r3, [r3, #6]
 8019d10:	b29b      	uxth	r3, r3
 8019d12:	429a      	cmp	r2, r3
 8019d14:	d202      	bcs.n	8019d1c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019d16:	f04f 33ff 	mov.w	r3, #4294967295
 8019d1a:	e0ab      	b.n	8019e74 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8019d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019d1e:	2b00      	cmp	r3, #0
 8019d20:	d009      	beq.n	8019d36 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8019d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019d24:	88db      	ldrh	r3, [r3, #6]
 8019d26:	b29a      	uxth	r2, r3
 8019d28:	693b      	ldr	r3, [r7, #16]
 8019d2a:	889b      	ldrh	r3, [r3, #4]
 8019d2c:	b29b      	uxth	r3, r3
 8019d2e:	429a      	cmp	r2, r3
 8019d30:	d001      	beq.n	8019d36 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8019d32:	2300      	movs	r3, #0
 8019d34:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8019d36:	693b      	ldr	r3, [r7, #16]
 8019d38:	681b      	ldr	r3, [r3, #0]
 8019d3a:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8019d3c:	693b      	ldr	r3, [r7, #16]
 8019d3e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8019d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d42:	2b00      	cmp	r3, #0
 8019d44:	d193      	bne.n	8019c6e <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8019d46:	e000      	b.n	8019d4a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8019d48:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8019d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d4c:	2b00      	cmp	r3, #0
 8019d4e:	d12d      	bne.n	8019dac <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8019d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019d52:	2b00      	cmp	r3, #0
 8019d54:	d01c      	beq.n	8019d90 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8019d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019d58:	88db      	ldrh	r3, [r3, #6]
 8019d5a:	b29a      	uxth	r2, r3
 8019d5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019d5e:	889b      	ldrh	r3, [r3, #4]
 8019d60:	b29b      	uxth	r3, r3
 8019d62:	429a      	cmp	r2, r3
 8019d64:	d906      	bls.n	8019d74 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8019d66:	4b45      	ldr	r3, [pc, #276]	; (8019e7c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8019d68:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8019d6c:	4944      	ldr	r1, [pc, #272]	; (8019e80 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8019d6e:	4845      	ldr	r0, [pc, #276]	; (8019e84 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8019d70:	f001 fb86 	bl	801b480 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8019d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019d76:	68ba      	ldr	r2, [r7, #8]
 8019d78:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8019d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019d7c:	88db      	ldrh	r3, [r3, #6]
 8019d7e:	b29a      	uxth	r2, r3
 8019d80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019d82:	889b      	ldrh	r3, [r3, #4]
 8019d84:	b29b      	uxth	r3, r3
 8019d86:	429a      	cmp	r2, r3
 8019d88:	d010      	beq.n	8019dac <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8019d8a:	2300      	movs	r3, #0
 8019d8c:	623b      	str	r3, [r7, #32]
 8019d8e:	e00d      	b.n	8019dac <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8019d90:	68fb      	ldr	r3, [r7, #12]
 8019d92:	685b      	ldr	r3, [r3, #4]
 8019d94:	2b00      	cmp	r3, #0
 8019d96:	d006      	beq.n	8019da6 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8019d98:	4b38      	ldr	r3, [pc, #224]	; (8019e7c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8019d9a:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8019d9e:	493a      	ldr	r1, [pc, #232]	; (8019e88 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8019da0:	4838      	ldr	r0, [pc, #224]	; (8019e84 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8019da2:	f001 fb6d 	bl	801b480 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8019da6:	68fb      	ldr	r3, [r7, #12]
 8019da8:	68ba      	ldr	r2, [r7, #8]
 8019daa:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8019dac:	687b      	ldr	r3, [r7, #4]
 8019dae:	2b00      	cmp	r3, #0
 8019db0:	d105      	bne.n	8019dbe <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8019db2:	68fb      	ldr	r3, [r7, #12]
 8019db4:	7f9b      	ldrb	r3, [r3, #30]
 8019db6:	f003 0301 	and.w	r3, r3, #1
 8019dba:	2b00      	cmp	r3, #0
 8019dbc:	d059      	beq.n	8019e72 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8019dbe:	6a3b      	ldr	r3, [r7, #32]
 8019dc0:	2b00      	cmp	r3, #0
 8019dc2:	d04f      	beq.n	8019e64 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8019dc4:	68fb      	ldr	r3, [r7, #12]
 8019dc6:	685b      	ldr	r3, [r3, #4]
 8019dc8:	2b00      	cmp	r3, #0
 8019dca:	d006      	beq.n	8019dda <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8019dcc:	68fb      	ldr	r3, [r7, #12]
 8019dce:	685b      	ldr	r3, [r3, #4]
 8019dd0:	685b      	ldr	r3, [r3, #4]
 8019dd2:	889b      	ldrh	r3, [r3, #4]
 8019dd4:	b29b      	uxth	r3, r3
 8019dd6:	2b00      	cmp	r3, #0
 8019dd8:	d002      	beq.n	8019de0 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8019dda:	2300      	movs	r3, #0
 8019ddc:	623b      	str	r3, [r7, #32]
 8019dde:	e041      	b.n	8019e64 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8019de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019de2:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8019de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019de6:	681b      	ldr	r3, [r3, #0]
 8019de8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8019dea:	e012      	b.n	8019e12 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8019dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019dee:	685b      	ldr	r3, [r3, #4]
 8019df0:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8019df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019df4:	88db      	ldrh	r3, [r3, #6]
 8019df6:	b29a      	uxth	r2, r3
 8019df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019dfa:	889b      	ldrh	r3, [r3, #4]
 8019dfc:	b29b      	uxth	r3, r3
 8019dfe:	429a      	cmp	r2, r3
 8019e00:	d002      	beq.n	8019e08 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8019e02:	2300      	movs	r3, #0
 8019e04:	623b      	str	r3, [r7, #32]
            break;
 8019e06:	e007      	b.n	8019e18 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8019e08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e0a:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8019e0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e0e:	681b      	ldr	r3, [r3, #0]
 8019e10:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8019e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019e14:	2b00      	cmp	r3, #0
 8019e16:	d1e9      	bne.n	8019dec <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8019e18:	6a3b      	ldr	r3, [r7, #32]
 8019e1a:	2b00      	cmp	r3, #0
 8019e1c:	d022      	beq.n	8019e64 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8019e1e:	68fb      	ldr	r3, [r7, #12]
 8019e20:	685b      	ldr	r3, [r3, #4]
 8019e22:	2b00      	cmp	r3, #0
 8019e24:	d106      	bne.n	8019e34 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8019e26:	4b15      	ldr	r3, [pc, #84]	; (8019e7c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8019e28:	f240 12df 	movw	r2, #479	; 0x1df
 8019e2c:	4917      	ldr	r1, [pc, #92]	; (8019e8c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8019e2e:	4815      	ldr	r0, [pc, #84]	; (8019e84 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8019e30:	f001 fb26 	bl	801b480 <iprintf>
          LWIP_ASSERT("sanity check",
 8019e34:	68fb      	ldr	r3, [r7, #12]
 8019e36:	685b      	ldr	r3, [r3, #4]
 8019e38:	685b      	ldr	r3, [r3, #4]
 8019e3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019e3c:	429a      	cmp	r2, r3
 8019e3e:	d106      	bne.n	8019e4e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8019e40:	4b0e      	ldr	r3, [pc, #56]	; (8019e7c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8019e42:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8019e46:	4911      	ldr	r1, [pc, #68]	; (8019e8c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8019e48:	480e      	ldr	r0, [pc, #56]	; (8019e84 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8019e4a:	f001 fb19 	bl	801b480 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8019e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e50:	681b      	ldr	r3, [r3, #0]
 8019e52:	2b00      	cmp	r3, #0
 8019e54:	d006      	beq.n	8019e64 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8019e56:	4b09      	ldr	r3, [pc, #36]	; (8019e7c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8019e58:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8019e5c:	490c      	ldr	r1, [pc, #48]	; (8019e90 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8019e5e:	4809      	ldr	r0, [pc, #36]	; (8019e84 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8019e60:	f001 fb0e 	bl	801b480 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8019e64:	6a3b      	ldr	r3, [r7, #32]
 8019e66:	2b00      	cmp	r3, #0
 8019e68:	bf14      	ite	ne
 8019e6a:	2301      	movne	r3, #1
 8019e6c:	2300      	moveq	r3, #0
 8019e6e:	b2db      	uxtb	r3, r3
 8019e70:	e000      	b.n	8019e74 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8019e72:	2300      	movs	r3, #0
}
 8019e74:	4618      	mov	r0, r3
 8019e76:	3730      	adds	r7, #48	; 0x30
 8019e78:	46bd      	mov	sp, r7
 8019e7a:	bd80      	pop	{r7, pc}
 8019e7c:	08020ed0 	.word	0x08020ed0
 8019e80:	08020fb4 	.word	0x08020fb4
 8019e84:	08020f18 	.word	0x08020f18
 8019e88:	08020fd4 	.word	0x08020fd4
 8019e8c:	0802100c 	.word	0x0802100c
 8019e90:	0802101c 	.word	0x0802101c

08019e94 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8019e94:	b580      	push	{r7, lr}
 8019e96:	b08e      	sub	sp, #56	; 0x38
 8019e98:	af00      	add	r7, sp, #0
 8019e9a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8019e9c:	687b      	ldr	r3, [r7, #4]
 8019e9e:	685b      	ldr	r3, [r3, #4]
 8019ea0:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8019ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019ea4:	781b      	ldrb	r3, [r3, #0]
 8019ea6:	f003 030f 	and.w	r3, r3, #15
 8019eaa:	b2db      	uxtb	r3, r3
 8019eac:	009b      	lsls	r3, r3, #2
 8019eae:	b2db      	uxtb	r3, r3
 8019eb0:	2b14      	cmp	r3, #20
 8019eb2:	f040 8179 	bne.w	801a1a8 <ip4_reass+0x314>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8019eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019eb8:	88db      	ldrh	r3, [r3, #6]
 8019eba:	b29b      	uxth	r3, r3
 8019ebc:	4618      	mov	r0, r3
 8019ebe:	f7f3 fe01 	bl	800dac4 <lwip_htons>
 8019ec2:	4603      	mov	r3, r0
 8019ec4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8019ec8:	b29b      	uxth	r3, r3
 8019eca:	00db      	lsls	r3, r3, #3
 8019ecc:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8019ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019ed0:	885b      	ldrh	r3, [r3, #2]
 8019ed2:	b29b      	uxth	r3, r3
 8019ed4:	4618      	mov	r0, r3
 8019ed6:	f7f3 fdf5 	bl	800dac4 <lwip_htons>
 8019eda:	4603      	mov	r3, r0
 8019edc:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8019ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019ee0:	781b      	ldrb	r3, [r3, #0]
 8019ee2:	f003 030f 	and.w	r3, r3, #15
 8019ee6:	b2db      	uxtb	r3, r3
 8019ee8:	009b      	lsls	r3, r3, #2
 8019eea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8019eee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8019ef2:	b29b      	uxth	r3, r3
 8019ef4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8019ef6:	429a      	cmp	r2, r3
 8019ef8:	f0c0 8158 	bcc.w	801a1ac <ip4_reass+0x318>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8019efc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8019f00:	b29b      	uxth	r3, r3
 8019f02:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8019f04:	1ad3      	subs	r3, r2, r3
 8019f06:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8019f08:	6878      	ldr	r0, [r7, #4]
 8019f0a:	f7f5 fb8b 	bl	800f624 <pbuf_clen>
 8019f0e:	4603      	mov	r3, r0
 8019f10:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8019f12:	4b90      	ldr	r3, [pc, #576]	; (801a154 <ip4_reass+0x2c0>)
 8019f14:	881b      	ldrh	r3, [r3, #0]
 8019f16:	461a      	mov	r2, r3
 8019f18:	8c3b      	ldrh	r3, [r7, #32]
 8019f1a:	4413      	add	r3, r2
 8019f1c:	2b0a      	cmp	r3, #10
 8019f1e:	dd10      	ble.n	8019f42 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8019f20:	8c3b      	ldrh	r3, [r7, #32]
 8019f22:	4619      	mov	r1, r3
 8019f24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019f26:	f7ff fd81 	bl	8019a2c <ip_reass_remove_oldest_datagram>
 8019f2a:	4603      	mov	r3, r0
 8019f2c:	2b00      	cmp	r3, #0
 8019f2e:	f000 813f 	beq.w	801a1b0 <ip4_reass+0x31c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8019f32:	4b88      	ldr	r3, [pc, #544]	; (801a154 <ip4_reass+0x2c0>)
 8019f34:	881b      	ldrh	r3, [r3, #0]
 8019f36:	461a      	mov	r2, r3
 8019f38:	8c3b      	ldrh	r3, [r7, #32]
 8019f3a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8019f3c:	2b0a      	cmp	r3, #10
 8019f3e:	f300 8137 	bgt.w	801a1b0 <ip4_reass+0x31c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8019f42:	4b85      	ldr	r3, [pc, #532]	; (801a158 <ip4_reass+0x2c4>)
 8019f44:	681b      	ldr	r3, [r3, #0]
 8019f46:	633b      	str	r3, [r7, #48]	; 0x30
 8019f48:	e015      	b.n	8019f76 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8019f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019f4c:	695a      	ldr	r2, [r3, #20]
 8019f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019f50:	68db      	ldr	r3, [r3, #12]
 8019f52:	429a      	cmp	r2, r3
 8019f54:	d10c      	bne.n	8019f70 <ip4_reass+0xdc>
 8019f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019f58:	699a      	ldr	r2, [r3, #24]
 8019f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019f5c:	691b      	ldr	r3, [r3, #16]
 8019f5e:	429a      	cmp	r2, r3
 8019f60:	d106      	bne.n	8019f70 <ip4_reass+0xdc>
 8019f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019f64:	899a      	ldrh	r2, [r3, #12]
 8019f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019f68:	889b      	ldrh	r3, [r3, #4]
 8019f6a:	b29b      	uxth	r3, r3
 8019f6c:	429a      	cmp	r2, r3
 8019f6e:	d006      	beq.n	8019f7e <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8019f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019f72:	681b      	ldr	r3, [r3, #0]
 8019f74:	633b      	str	r3, [r7, #48]	; 0x30
 8019f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019f78:	2b00      	cmp	r3, #0
 8019f7a:	d1e6      	bne.n	8019f4a <ip4_reass+0xb6>
 8019f7c:	e000      	b.n	8019f80 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8019f7e:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8019f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019f82:	2b00      	cmp	r3, #0
 8019f84:	d109      	bne.n	8019f9a <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8019f86:	8c3b      	ldrh	r3, [r7, #32]
 8019f88:	4619      	mov	r1, r3
 8019f8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019f8c:	f7ff fdb0 	bl	8019af0 <ip_reass_enqueue_new_datagram>
 8019f90:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8019f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019f94:	2b00      	cmp	r3, #0
 8019f96:	d11c      	bne.n	8019fd2 <ip4_reass+0x13e>
      goto nullreturn;
 8019f98:	e10d      	b.n	801a1b6 <ip4_reass+0x322>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8019f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019f9c:	88db      	ldrh	r3, [r3, #6]
 8019f9e:	b29b      	uxth	r3, r3
 8019fa0:	4618      	mov	r0, r3
 8019fa2:	f7f3 fd8f 	bl	800dac4 <lwip_htons>
 8019fa6:	4603      	mov	r3, r0
 8019fa8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8019fac:	2b00      	cmp	r3, #0
 8019fae:	d110      	bne.n	8019fd2 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8019fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019fb2:	89db      	ldrh	r3, [r3, #14]
 8019fb4:	4618      	mov	r0, r3
 8019fb6:	f7f3 fd85 	bl	800dac4 <lwip_htons>
 8019fba:	4603      	mov	r3, r0
 8019fbc:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8019fc0:	2b00      	cmp	r3, #0
 8019fc2:	d006      	beq.n	8019fd2 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8019fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019fc6:	3308      	adds	r3, #8
 8019fc8:	2214      	movs	r2, #20
 8019fca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8019fcc:	4618      	mov	r0, r3
 8019fce:	f000 fce1 	bl	801a994 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8019fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019fd4:	88db      	ldrh	r3, [r3, #6]
 8019fd6:	b29b      	uxth	r3, r3
 8019fd8:	f003 0320 	and.w	r3, r3, #32
 8019fdc:	2b00      	cmp	r3, #0
 8019fde:	bf0c      	ite	eq
 8019fe0:	2301      	moveq	r3, #1
 8019fe2:	2300      	movne	r3, #0
 8019fe4:	b2db      	uxtb	r3, r3
 8019fe6:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8019fe8:	69fb      	ldr	r3, [r7, #28]
 8019fea:	2b00      	cmp	r3, #0
 8019fec:	d00e      	beq.n	801a00c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8019fee:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8019ff0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8019ff2:	4413      	add	r3, r2
 8019ff4:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8019ff6:	8b7a      	ldrh	r2, [r7, #26]
 8019ff8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8019ffa:	429a      	cmp	r2, r3
 8019ffc:	f0c0 80a8 	bcc.w	801a150 <ip4_reass+0x2bc>
 801a000:	8b7b      	ldrh	r3, [r7, #26]
 801a002:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801a006:	4293      	cmp	r3, r2
 801a008:	f200 80a2 	bhi.w	801a150 <ip4_reass+0x2bc>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801a00c:	69fa      	ldr	r2, [r7, #28]
 801a00e:	6879      	ldr	r1, [r7, #4]
 801a010:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a012:	f7ff fdd5 	bl	8019bc0 <ip_reass_chain_frag_into_datagram_and_validate>
 801a016:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801a018:	697b      	ldr	r3, [r7, #20]
 801a01a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a01e:	f000 80a3 	beq.w	801a168 <ip4_reass+0x2d4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801a022:	4b4c      	ldr	r3, [pc, #304]	; (801a154 <ip4_reass+0x2c0>)
 801a024:	881a      	ldrh	r2, [r3, #0]
 801a026:	8c3b      	ldrh	r3, [r7, #32]
 801a028:	4413      	add	r3, r2
 801a02a:	b29a      	uxth	r2, r3
 801a02c:	4b49      	ldr	r3, [pc, #292]	; (801a154 <ip4_reass+0x2c0>)
 801a02e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801a030:	69fb      	ldr	r3, [r7, #28]
 801a032:	2b00      	cmp	r3, #0
 801a034:	d00d      	beq.n	801a052 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801a036:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801a038:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801a03a:	4413      	add	r3, r2
 801a03c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801a03e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a040:	8a7a      	ldrh	r2, [r7, #18]
 801a042:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801a044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a046:	7f9b      	ldrb	r3, [r3, #30]
 801a048:	f043 0301 	orr.w	r3, r3, #1
 801a04c:	b2da      	uxtb	r2, r3
 801a04e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a050:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801a052:	697b      	ldr	r3, [r7, #20]
 801a054:	2b01      	cmp	r3, #1
 801a056:	d179      	bne.n	801a14c <ip4_reass+0x2b8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801a058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a05a:	8b9b      	ldrh	r3, [r3, #28]
 801a05c:	3314      	adds	r3, #20
 801a05e:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801a060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a062:	685b      	ldr	r3, [r3, #4]
 801a064:	685b      	ldr	r3, [r3, #4]
 801a066:	681b      	ldr	r3, [r3, #0]
 801a068:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801a06a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a06c:	685b      	ldr	r3, [r3, #4]
 801a06e:	685b      	ldr	r3, [r3, #4]
 801a070:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801a072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a074:	3308      	adds	r3, #8
 801a076:	2214      	movs	r2, #20
 801a078:	4619      	mov	r1, r3
 801a07a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a07c:	f000 fc8a 	bl	801a994 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801a080:	8a3b      	ldrh	r3, [r7, #16]
 801a082:	4618      	mov	r0, r3
 801a084:	f7f3 fd1e 	bl	800dac4 <lwip_htons>
 801a088:	4603      	mov	r3, r0
 801a08a:	461a      	mov	r2, r3
 801a08c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a08e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801a090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a092:	2200      	movs	r2, #0
 801a094:	719a      	strb	r2, [r3, #6]
 801a096:	2200      	movs	r2, #0
 801a098:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801a09a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a09c:	2200      	movs	r2, #0
 801a09e:	729a      	strb	r2, [r3, #10]
 801a0a0:	2200      	movs	r2, #0
 801a0a2:	72da      	strb	r2, [r3, #11]
    /* @todo: do we need to set/calculate the correct checksum? */
#if CHECKSUM_GEN_IP
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
 801a0a4:	2114      	movs	r1, #20
 801a0a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a0a8:	f7f3 fe54 	bl	800dd54 <inet_chksum>
 801a0ac:	4603      	mov	r3, r0
 801a0ae:	461a      	mov	r2, r3
 801a0b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a0b2:	815a      	strh	r2, [r3, #10]
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801a0b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a0b6:	685b      	ldr	r3, [r3, #4]
 801a0b8:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801a0ba:	e00d      	b.n	801a0d8 <ip4_reass+0x244>
      iprh = (struct ip_reass_helper *)r->payload;
 801a0bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a0be:	685b      	ldr	r3, [r3, #4]
 801a0c0:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801a0c2:	2114      	movs	r1, #20
 801a0c4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a0c6:	f7f5 f999 	bl	800f3fc <pbuf_remove_header>
      pbuf_cat(p, r);
 801a0ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801a0cc:	6878      	ldr	r0, [r7, #4]
 801a0ce:	f7f5 fae9 	bl	800f6a4 <pbuf_cat>
      r = iprh->next_pbuf;
 801a0d2:	68fb      	ldr	r3, [r7, #12]
 801a0d4:	681b      	ldr	r3, [r3, #0]
 801a0d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (r != NULL) {
 801a0d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a0da:	2b00      	cmp	r3, #0
 801a0dc:	d1ee      	bne.n	801a0bc <ip4_reass+0x228>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801a0de:	4b1e      	ldr	r3, [pc, #120]	; (801a158 <ip4_reass+0x2c4>)
 801a0e0:	681b      	ldr	r3, [r3, #0]
 801a0e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a0e4:	429a      	cmp	r2, r3
 801a0e6:	d102      	bne.n	801a0ee <ip4_reass+0x25a>
      ipr_prev = NULL;
 801a0e8:	2300      	movs	r3, #0
 801a0ea:	637b      	str	r3, [r7, #52]	; 0x34
 801a0ec:	e010      	b.n	801a110 <ip4_reass+0x27c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801a0ee:	4b1a      	ldr	r3, [pc, #104]	; (801a158 <ip4_reass+0x2c4>)
 801a0f0:	681b      	ldr	r3, [r3, #0]
 801a0f2:	637b      	str	r3, [r7, #52]	; 0x34
 801a0f4:	e007      	b.n	801a106 <ip4_reass+0x272>
        if (ipr_prev->next == ipr) {
 801a0f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a0f8:	681b      	ldr	r3, [r3, #0]
 801a0fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a0fc:	429a      	cmp	r2, r3
 801a0fe:	d006      	beq.n	801a10e <ip4_reass+0x27a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801a100:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a102:	681b      	ldr	r3, [r3, #0]
 801a104:	637b      	str	r3, [r7, #52]	; 0x34
 801a106:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a108:	2b00      	cmp	r3, #0
 801a10a:	d1f4      	bne.n	801a0f6 <ip4_reass+0x262>
 801a10c:	e000      	b.n	801a110 <ip4_reass+0x27c>
          break;
 801a10e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801a110:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801a112:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a114:	f7ff fd26 	bl	8019b64 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801a118:	6878      	ldr	r0, [r7, #4]
 801a11a:	f7f5 fa83 	bl	800f624 <pbuf_clen>
 801a11e:	4603      	mov	r3, r0
 801a120:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801a122:	4b0c      	ldr	r3, [pc, #48]	; (801a154 <ip4_reass+0x2c0>)
 801a124:	881b      	ldrh	r3, [r3, #0]
 801a126:	8c3a      	ldrh	r2, [r7, #32]
 801a128:	429a      	cmp	r2, r3
 801a12a:	d906      	bls.n	801a13a <ip4_reass+0x2a6>
 801a12c:	4b0b      	ldr	r3, [pc, #44]	; (801a15c <ip4_reass+0x2c8>)
 801a12e:	f240 229b 	movw	r2, #667	; 0x29b
 801a132:	490b      	ldr	r1, [pc, #44]	; (801a160 <ip4_reass+0x2cc>)
 801a134:	480b      	ldr	r0, [pc, #44]	; (801a164 <ip4_reass+0x2d0>)
 801a136:	f001 f9a3 	bl	801b480 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801a13a:	4b06      	ldr	r3, [pc, #24]	; (801a154 <ip4_reass+0x2c0>)
 801a13c:	881a      	ldrh	r2, [r3, #0]
 801a13e:	8c3b      	ldrh	r3, [r7, #32]
 801a140:	1ad3      	subs	r3, r2, r3
 801a142:	b29a      	uxth	r2, r3
 801a144:	4b03      	ldr	r3, [pc, #12]	; (801a154 <ip4_reass+0x2c0>)
 801a146:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801a148:	687b      	ldr	r3, [r7, #4]
 801a14a:	e038      	b.n	801a1be <ip4_reass+0x32a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801a14c:	2300      	movs	r3, #0
 801a14e:	e036      	b.n	801a1be <ip4_reass+0x32a>
      goto nullreturn_ipr;
 801a150:	bf00      	nop
 801a152:	e00a      	b.n	801a16a <ip4_reass+0x2d6>
 801a154:	20013d04 	.word	0x20013d04
 801a158:	20013d00 	.word	0x20013d00
 801a15c:	08020ed0 	.word	0x08020ed0
 801a160:	08021040 	.word	0x08021040
 801a164:	08020f18 	.word	0x08020f18
    goto nullreturn_ipr;
 801a168:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801a16a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a16c:	2b00      	cmp	r3, #0
 801a16e:	d106      	bne.n	801a17e <ip4_reass+0x2ea>
 801a170:	4b15      	ldr	r3, [pc, #84]	; (801a1c8 <ip4_reass+0x334>)
 801a172:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801a176:	4915      	ldr	r1, [pc, #84]	; (801a1cc <ip4_reass+0x338>)
 801a178:	4815      	ldr	r0, [pc, #84]	; (801a1d0 <ip4_reass+0x33c>)
 801a17a:	f001 f981 	bl	801b480 <iprintf>
  if (ipr->p == NULL) {
 801a17e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a180:	685b      	ldr	r3, [r3, #4]
 801a182:	2b00      	cmp	r3, #0
 801a184:	d116      	bne.n	801a1b4 <ip4_reass+0x320>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801a186:	4b13      	ldr	r3, [pc, #76]	; (801a1d4 <ip4_reass+0x340>)
 801a188:	681b      	ldr	r3, [r3, #0]
 801a18a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a18c:	429a      	cmp	r2, r3
 801a18e:	d006      	beq.n	801a19e <ip4_reass+0x30a>
 801a190:	4b0d      	ldr	r3, [pc, #52]	; (801a1c8 <ip4_reass+0x334>)
 801a192:	f240 22ab 	movw	r2, #683	; 0x2ab
 801a196:	4910      	ldr	r1, [pc, #64]	; (801a1d8 <ip4_reass+0x344>)
 801a198:	480d      	ldr	r0, [pc, #52]	; (801a1d0 <ip4_reass+0x33c>)
 801a19a:	f001 f971 	bl	801b480 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801a19e:	2100      	movs	r1, #0
 801a1a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a1a2:	f7ff fcdf 	bl	8019b64 <ip_reass_dequeue_datagram>
 801a1a6:	e006      	b.n	801a1b6 <ip4_reass+0x322>
    goto nullreturn;
 801a1a8:	bf00      	nop
 801a1aa:	e004      	b.n	801a1b6 <ip4_reass+0x322>
    goto nullreturn;
 801a1ac:	bf00      	nop
 801a1ae:	e002      	b.n	801a1b6 <ip4_reass+0x322>
      goto nullreturn;
 801a1b0:	bf00      	nop
 801a1b2:	e000      	b.n	801a1b6 <ip4_reass+0x322>
  }

nullreturn:
 801a1b4:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801a1b6:	6878      	ldr	r0, [r7, #4]
 801a1b8:	f7f5 f9a6 	bl	800f508 <pbuf_free>
  return NULL;
 801a1bc:	2300      	movs	r3, #0
}
 801a1be:	4618      	mov	r0, r3
 801a1c0:	3738      	adds	r7, #56	; 0x38
 801a1c2:	46bd      	mov	sp, r7
 801a1c4:	bd80      	pop	{r7, pc}
 801a1c6:	bf00      	nop
 801a1c8:	08020ed0 	.word	0x08020ed0
 801a1cc:	0802105c 	.word	0x0802105c
 801a1d0:	08020f18 	.word	0x08020f18
 801a1d4:	20013d00 	.word	0x20013d00
 801a1d8:	08021068 	.word	0x08021068

0801a1dc <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801a1dc:	b580      	push	{r7, lr}
 801a1de:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801a1e0:	2005      	movs	r0, #5
 801a1e2:	f7f4 fa9d 	bl	800e720 <memp_malloc>
 801a1e6:	4603      	mov	r3, r0
}
 801a1e8:	4618      	mov	r0, r3
 801a1ea:	bd80      	pop	{r7, pc}

0801a1ec <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801a1ec:	b580      	push	{r7, lr}
 801a1ee:	b082      	sub	sp, #8
 801a1f0:	af00      	add	r7, sp, #0
 801a1f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801a1f4:	687b      	ldr	r3, [r7, #4]
 801a1f6:	2b00      	cmp	r3, #0
 801a1f8:	d106      	bne.n	801a208 <ip_frag_free_pbuf_custom_ref+0x1c>
 801a1fa:	4b07      	ldr	r3, [pc, #28]	; (801a218 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801a1fc:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 801a200:	4906      	ldr	r1, [pc, #24]	; (801a21c <ip_frag_free_pbuf_custom_ref+0x30>)
 801a202:	4807      	ldr	r0, [pc, #28]	; (801a220 <ip_frag_free_pbuf_custom_ref+0x34>)
 801a204:	f001 f93c 	bl	801b480 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801a208:	6879      	ldr	r1, [r7, #4]
 801a20a:	2005      	movs	r0, #5
 801a20c:	f7f4 fada 	bl	800e7c4 <memp_free>
}
 801a210:	bf00      	nop
 801a212:	3708      	adds	r7, #8
 801a214:	46bd      	mov	sp, r7
 801a216:	bd80      	pop	{r7, pc}
 801a218:	08020ed0 	.word	0x08020ed0
 801a21c:	08021088 	.word	0x08021088
 801a220:	08020f18 	.word	0x08020f18

0801a224 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801a224:	b580      	push	{r7, lr}
 801a226:	b084      	sub	sp, #16
 801a228:	af00      	add	r7, sp, #0
 801a22a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801a22c:	687b      	ldr	r3, [r7, #4]
 801a22e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801a230:	68fb      	ldr	r3, [r7, #12]
 801a232:	2b00      	cmp	r3, #0
 801a234:	d106      	bne.n	801a244 <ipfrag_free_pbuf_custom+0x20>
 801a236:	4b11      	ldr	r3, [pc, #68]	; (801a27c <ipfrag_free_pbuf_custom+0x58>)
 801a238:	f240 22ce 	movw	r2, #718	; 0x2ce
 801a23c:	4910      	ldr	r1, [pc, #64]	; (801a280 <ipfrag_free_pbuf_custom+0x5c>)
 801a23e:	4811      	ldr	r0, [pc, #68]	; (801a284 <ipfrag_free_pbuf_custom+0x60>)
 801a240:	f001 f91e 	bl	801b480 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801a244:	68fa      	ldr	r2, [r7, #12]
 801a246:	687b      	ldr	r3, [r7, #4]
 801a248:	429a      	cmp	r2, r3
 801a24a:	d006      	beq.n	801a25a <ipfrag_free_pbuf_custom+0x36>
 801a24c:	4b0b      	ldr	r3, [pc, #44]	; (801a27c <ipfrag_free_pbuf_custom+0x58>)
 801a24e:	f240 22cf 	movw	r2, #719	; 0x2cf
 801a252:	490d      	ldr	r1, [pc, #52]	; (801a288 <ipfrag_free_pbuf_custom+0x64>)
 801a254:	480b      	ldr	r0, [pc, #44]	; (801a284 <ipfrag_free_pbuf_custom+0x60>)
 801a256:	f001 f913 	bl	801b480 <iprintf>
  if (pcr->original != NULL) {
 801a25a:	68fb      	ldr	r3, [r7, #12]
 801a25c:	695b      	ldr	r3, [r3, #20]
 801a25e:	2b00      	cmp	r3, #0
 801a260:	d004      	beq.n	801a26c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801a262:	68fb      	ldr	r3, [r7, #12]
 801a264:	695b      	ldr	r3, [r3, #20]
 801a266:	4618      	mov	r0, r3
 801a268:	f7f5 f94e 	bl	800f508 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801a26c:	68f8      	ldr	r0, [r7, #12]
 801a26e:	f7ff ffbd 	bl	801a1ec <ip_frag_free_pbuf_custom_ref>
}
 801a272:	bf00      	nop
 801a274:	3710      	adds	r7, #16
 801a276:	46bd      	mov	sp, r7
 801a278:	bd80      	pop	{r7, pc}
 801a27a:	bf00      	nop
 801a27c:	08020ed0 	.word	0x08020ed0
 801a280:	08021094 	.word	0x08021094
 801a284:	08020f18 	.word	0x08020f18
 801a288:	080210a0 	.word	0x080210a0

0801a28c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801a28c:	b580      	push	{r7, lr}
 801a28e:	b094      	sub	sp, #80	; 0x50
 801a290:	af02      	add	r7, sp, #8
 801a292:	60f8      	str	r0, [r7, #12]
 801a294:	60b9      	str	r1, [r7, #8]
 801a296:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801a298:	2300      	movs	r3, #0
 801a29a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801a29e:	68bb      	ldr	r3, [r7, #8]
 801a2a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a2a2:	3b14      	subs	r3, #20
 801a2a4:	2b00      	cmp	r3, #0
 801a2a6:	da00      	bge.n	801a2aa <ip4_frag+0x1e>
 801a2a8:	3307      	adds	r3, #7
 801a2aa:	10db      	asrs	r3, r3, #3
 801a2ac:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801a2ae:	2314      	movs	r3, #20
 801a2b0:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801a2b2:	68fb      	ldr	r3, [r7, #12]
 801a2b4:	685b      	ldr	r3, [r3, #4]
 801a2b6:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 801a2b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a2ba:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801a2bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a2be:	781b      	ldrb	r3, [r3, #0]
 801a2c0:	f003 030f 	and.w	r3, r3, #15
 801a2c4:	b2db      	uxtb	r3, r3
 801a2c6:	009b      	lsls	r3, r3, #2
 801a2c8:	b2db      	uxtb	r3, r3
 801a2ca:	2b14      	cmp	r3, #20
 801a2cc:	d002      	beq.n	801a2d4 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801a2ce:	f06f 0305 	mvn.w	r3, #5
 801a2d2:	e118      	b.n	801a506 <ip4_frag+0x27a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801a2d4:	68fb      	ldr	r3, [r7, #12]
 801a2d6:	895b      	ldrh	r3, [r3, #10]
 801a2d8:	2b13      	cmp	r3, #19
 801a2da:	d809      	bhi.n	801a2f0 <ip4_frag+0x64>
 801a2dc:	4b8c      	ldr	r3, [pc, #560]	; (801a510 <ip4_frag+0x284>)
 801a2de:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801a2e2:	498c      	ldr	r1, [pc, #560]	; (801a514 <ip4_frag+0x288>)
 801a2e4:	488c      	ldr	r0, [pc, #560]	; (801a518 <ip4_frag+0x28c>)
 801a2e6:	f001 f8cb 	bl	801b480 <iprintf>
 801a2ea:	f06f 0305 	mvn.w	r3, #5
 801a2ee:	e10a      	b.n	801a506 <ip4_frag+0x27a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801a2f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a2f2:	88db      	ldrh	r3, [r3, #6]
 801a2f4:	b29b      	uxth	r3, r3
 801a2f6:	4618      	mov	r0, r3
 801a2f8:	f7f3 fbe4 	bl	800dac4 <lwip_htons>
 801a2fc:	4603      	mov	r3, r0
 801a2fe:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 801a300:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801a302:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801a306:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801a30a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801a30c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801a310:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801a312:	68fb      	ldr	r3, [r7, #12]
 801a314:	891b      	ldrh	r3, [r3, #8]
 801a316:	3b14      	subs	r3, #20
 801a318:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 801a31c:	e0e9      	b.n	801a4f2 <ip4_frag+0x266>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801a31e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801a320:	00db      	lsls	r3, r3, #3
 801a322:	b29b      	uxth	r3, r3
 801a324:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801a328:	4293      	cmp	r3, r2
 801a32a:	bf28      	it	cs
 801a32c:	4613      	movcs	r3, r2
 801a32e:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801a330:	f44f 7220 	mov.w	r2, #640	; 0x280
 801a334:	2114      	movs	r1, #20
 801a336:	200e      	movs	r0, #14
 801a338:	f7f4 fdfe 	bl	800ef38 <pbuf_alloc>
 801a33c:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801a33e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a340:	2b00      	cmp	r3, #0
 801a342:	f000 80dd 	beq.w	801a500 <ip4_frag+0x274>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801a346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a348:	895b      	ldrh	r3, [r3, #10]
 801a34a:	2b13      	cmp	r3, #19
 801a34c:	d806      	bhi.n	801a35c <ip4_frag+0xd0>
 801a34e:	4b70      	ldr	r3, [pc, #448]	; (801a510 <ip4_frag+0x284>)
 801a350:	f44f 7249 	mov.w	r2, #804	; 0x324
 801a354:	4971      	ldr	r1, [pc, #452]	; (801a51c <ip4_frag+0x290>)
 801a356:	4870      	ldr	r0, [pc, #448]	; (801a518 <ip4_frag+0x28c>)
 801a358:	f001 f892 	bl	801b480 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801a35c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a35e:	685b      	ldr	r3, [r3, #4]
 801a360:	2214      	movs	r2, #20
 801a362:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801a364:	4618      	mov	r0, r3
 801a366:	f000 fb15 	bl	801a994 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801a36a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a36c:	685b      	ldr	r3, [r3, #4]
 801a36e:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 801a370:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801a372:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801a376:	e064      	b.n	801a442 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801a378:	68fb      	ldr	r3, [r7, #12]
 801a37a:	895a      	ldrh	r2, [r3, #10]
 801a37c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801a37e:	1ad3      	subs	r3, r2, r3
 801a380:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801a382:	68fb      	ldr	r3, [r7, #12]
 801a384:	895b      	ldrh	r3, [r3, #10]
 801a386:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801a388:	429a      	cmp	r2, r3
 801a38a:	d906      	bls.n	801a39a <ip4_frag+0x10e>
 801a38c:	4b60      	ldr	r3, [pc, #384]	; (801a510 <ip4_frag+0x284>)
 801a38e:	f240 322d 	movw	r2, #813	; 0x32d
 801a392:	4963      	ldr	r1, [pc, #396]	; (801a520 <ip4_frag+0x294>)
 801a394:	4860      	ldr	r0, [pc, #384]	; (801a518 <ip4_frag+0x28c>)
 801a396:	f001 f873 	bl	801b480 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801a39a:	8bfa      	ldrh	r2, [r7, #30]
 801a39c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801a3a0:	4293      	cmp	r3, r2
 801a3a2:	bf28      	it	cs
 801a3a4:	4613      	movcs	r3, r2
 801a3a6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801a3aa:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801a3ae:	2b00      	cmp	r3, #0
 801a3b0:	d105      	bne.n	801a3be <ip4_frag+0x132>
        poff = 0;
 801a3b2:	2300      	movs	r3, #0
 801a3b4:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801a3b6:	68fb      	ldr	r3, [r7, #12]
 801a3b8:	681b      	ldr	r3, [r3, #0]
 801a3ba:	60fb      	str	r3, [r7, #12]
        continue;
 801a3bc:	e041      	b.n	801a442 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801a3be:	f7ff ff0d 	bl	801a1dc <ip_frag_alloc_pbuf_custom_ref>
 801a3c2:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801a3c4:	69bb      	ldr	r3, [r7, #24]
 801a3c6:	2b00      	cmp	r3, #0
 801a3c8:	d103      	bne.n	801a3d2 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801a3ca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801a3cc:	f7f5 f89c 	bl	800f508 <pbuf_free>
        goto memerr;
 801a3d0:	e097      	b.n	801a502 <ip4_frag+0x276>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801a3d2:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801a3d4:	68fb      	ldr	r3, [r7, #12]
 801a3d6:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801a3d8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801a3da:	4413      	add	r3, r2
 801a3dc:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 801a3e0:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801a3e4:	9201      	str	r2, [sp, #4]
 801a3e6:	9300      	str	r3, [sp, #0]
 801a3e8:	4603      	mov	r3, r0
 801a3ea:	2241      	movs	r2, #65	; 0x41
 801a3ec:	2000      	movs	r0, #0
 801a3ee:	f7f4 fed1 	bl	800f194 <pbuf_alloced_custom>
 801a3f2:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801a3f4:	697b      	ldr	r3, [r7, #20]
 801a3f6:	2b00      	cmp	r3, #0
 801a3f8:	d106      	bne.n	801a408 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801a3fa:	69b8      	ldr	r0, [r7, #24]
 801a3fc:	f7ff fef6 	bl	801a1ec <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801a400:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801a402:	f7f5 f881 	bl	800f508 <pbuf_free>
        goto memerr;
 801a406:	e07c      	b.n	801a502 <ip4_frag+0x276>
      }
      pbuf_ref(p);
 801a408:	68f8      	ldr	r0, [r7, #12]
 801a40a:	f7f5 f923 	bl	800f654 <pbuf_ref>
      pcr->original = p;
 801a40e:	69bb      	ldr	r3, [r7, #24]
 801a410:	68fa      	ldr	r2, [r7, #12]
 801a412:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801a414:	69bb      	ldr	r3, [r7, #24]
 801a416:	4a43      	ldr	r2, [pc, #268]	; (801a524 <ip4_frag+0x298>)
 801a418:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801a41a:	6979      	ldr	r1, [r7, #20]
 801a41c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801a41e:	f7f5 f941 	bl	800f6a4 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801a422:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801a426:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801a42a:	1ad3      	subs	r3, r2, r3
 801a42c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 801a430:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801a434:	2b00      	cmp	r3, #0
 801a436:	d004      	beq.n	801a442 <ip4_frag+0x1b6>
        poff = 0;
 801a438:	2300      	movs	r3, #0
 801a43a:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801a43c:	68fb      	ldr	r3, [r7, #12]
 801a43e:	681b      	ldr	r3, [r3, #0]
 801a440:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801a442:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801a446:	2b00      	cmp	r3, #0
 801a448:	d196      	bne.n	801a378 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801a44a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801a44c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801a450:	4413      	add	r3, r2
 801a452:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801a454:	68bb      	ldr	r3, [r7, #8]
 801a456:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a458:	f1a3 0213 	sub.w	r2, r3, #19
 801a45c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801a460:	429a      	cmp	r2, r3
 801a462:	bfcc      	ite	gt
 801a464:	2301      	movgt	r3, #1
 801a466:	2300      	movle	r3, #0
 801a468:	b2db      	uxtb	r3, r3
 801a46a:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801a46c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801a470:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801a474:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 801a476:	6a3b      	ldr	r3, [r7, #32]
 801a478:	2b00      	cmp	r3, #0
 801a47a:	d002      	beq.n	801a482 <ip4_frag+0x1f6>
 801a47c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a47e:	2b00      	cmp	r3, #0
 801a480:	d003      	beq.n	801a48a <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801a482:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801a484:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801a488:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801a48a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801a48c:	4618      	mov	r0, r3
 801a48e:	f7f3 fb19 	bl	800dac4 <lwip_htons>
 801a492:	4603      	mov	r3, r0
 801a494:	461a      	mov	r2, r3
 801a496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a498:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801a49a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801a49c:	3314      	adds	r3, #20
 801a49e:	b29b      	uxth	r3, r3
 801a4a0:	4618      	mov	r0, r3
 801a4a2:	f7f3 fb0f 	bl	800dac4 <lwip_htons>
 801a4a6:	4603      	mov	r3, r0
 801a4a8:	461a      	mov	r2, r3
 801a4aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a4ac:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801a4ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a4b0:	2200      	movs	r2, #0
 801a4b2:	729a      	strb	r2, [r3, #10]
 801a4b4:	2200      	movs	r2, #0
 801a4b6:	72da      	strb	r2, [r3, #11]
#if CHECKSUM_GEN_IP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
 801a4b8:	2114      	movs	r1, #20
 801a4ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a4bc:	f7f3 fc4a 	bl	800dd54 <inet_chksum>
 801a4c0:	4603      	mov	r3, r0
 801a4c2:	461a      	mov	r2, r3
 801a4c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a4c6:	815a      	strh	r2, [r3, #10]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801a4c8:	68bb      	ldr	r3, [r7, #8]
 801a4ca:	695b      	ldr	r3, [r3, #20]
 801a4cc:	687a      	ldr	r2, [r7, #4]
 801a4ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801a4d0:	68b8      	ldr	r0, [r7, #8]
 801a4d2:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801a4d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801a4d6:	f7f5 f817 	bl	800f508 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801a4da:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801a4de:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801a4e0:	1ad3      	subs	r3, r2, r3
 801a4e2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 801a4e6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801a4ea:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801a4ec:	4413      	add	r3, r2
 801a4ee:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 801a4f2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801a4f6:	2b00      	cmp	r3, #0
 801a4f8:	f47f af11 	bne.w	801a31e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801a4fc:	2300      	movs	r3, #0
 801a4fe:	e002      	b.n	801a506 <ip4_frag+0x27a>
      goto memerr;
 801a500:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801a502:	f04f 33ff 	mov.w	r3, #4294967295
}
 801a506:	4618      	mov	r0, r3
 801a508:	3748      	adds	r7, #72	; 0x48
 801a50a:	46bd      	mov	sp, r7
 801a50c:	bd80      	pop	{r7, pc}
 801a50e:	bf00      	nop
 801a510:	08020ed0 	.word	0x08020ed0
 801a514:	080210ac 	.word	0x080210ac
 801a518:	08020f18 	.word	0x08020f18
 801a51c:	080210c8 	.word	0x080210c8
 801a520:	080210e8 	.word	0x080210e8
 801a524:	0801a225 	.word	0x0801a225

0801a528 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801a528:	b580      	push	{r7, lr}
 801a52a:	b086      	sub	sp, #24
 801a52c:	af00      	add	r7, sp, #0
 801a52e:	6078      	str	r0, [r7, #4]
 801a530:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801a532:	230e      	movs	r3, #14
 801a534:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801a536:	687b      	ldr	r3, [r7, #4]
 801a538:	895b      	ldrh	r3, [r3, #10]
 801a53a:	2b0e      	cmp	r3, #14
 801a53c:	d96e      	bls.n	801a61c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801a53e:	687b      	ldr	r3, [r7, #4]
 801a540:	7bdb      	ldrb	r3, [r3, #15]
 801a542:	2b00      	cmp	r3, #0
 801a544:	d106      	bne.n	801a554 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801a546:	683b      	ldr	r3, [r7, #0]
 801a548:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801a54c:	3301      	adds	r3, #1
 801a54e:	b2da      	uxtb	r2, r3
 801a550:	687b      	ldr	r3, [r7, #4]
 801a552:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801a554:	687b      	ldr	r3, [r7, #4]
 801a556:	685b      	ldr	r3, [r3, #4]
 801a558:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801a55a:	693b      	ldr	r3, [r7, #16]
 801a55c:	7b1a      	ldrb	r2, [r3, #12]
 801a55e:	7b5b      	ldrb	r3, [r3, #13]
 801a560:	021b      	lsls	r3, r3, #8
 801a562:	4313      	orrs	r3, r2
 801a564:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801a566:	693b      	ldr	r3, [r7, #16]
 801a568:	781b      	ldrb	r3, [r3, #0]
 801a56a:	f003 0301 	and.w	r3, r3, #1
 801a56e:	2b00      	cmp	r3, #0
 801a570:	d023      	beq.n	801a5ba <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801a572:	693b      	ldr	r3, [r7, #16]
 801a574:	781b      	ldrb	r3, [r3, #0]
 801a576:	2b01      	cmp	r3, #1
 801a578:	d10f      	bne.n	801a59a <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801a57a:	693b      	ldr	r3, [r7, #16]
 801a57c:	785b      	ldrb	r3, [r3, #1]
 801a57e:	2b00      	cmp	r3, #0
 801a580:	d11b      	bne.n	801a5ba <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801a582:	693b      	ldr	r3, [r7, #16]
 801a584:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801a586:	2b5e      	cmp	r3, #94	; 0x5e
 801a588:	d117      	bne.n	801a5ba <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801a58a:	687b      	ldr	r3, [r7, #4]
 801a58c:	7b5b      	ldrb	r3, [r3, #13]
 801a58e:	f043 0310 	orr.w	r3, r3, #16
 801a592:	b2da      	uxtb	r2, r3
 801a594:	687b      	ldr	r3, [r7, #4]
 801a596:	735a      	strb	r2, [r3, #13]
 801a598:	e00f      	b.n	801a5ba <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801a59a:	693b      	ldr	r3, [r7, #16]
 801a59c:	2206      	movs	r2, #6
 801a59e:	4928      	ldr	r1, [pc, #160]	; (801a640 <ethernet_input+0x118>)
 801a5a0:	4618      	mov	r0, r3
 801a5a2:	f000 f9e7 	bl	801a974 <memcmp>
 801a5a6:	4603      	mov	r3, r0
 801a5a8:	2b00      	cmp	r3, #0
 801a5aa:	d106      	bne.n	801a5ba <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801a5ac:	687b      	ldr	r3, [r7, #4]
 801a5ae:	7b5b      	ldrb	r3, [r3, #13]
 801a5b0:	f043 0308 	orr.w	r3, r3, #8
 801a5b4:	b2da      	uxtb	r2, r3
 801a5b6:	687b      	ldr	r3, [r7, #4]
 801a5b8:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801a5ba:	89fb      	ldrh	r3, [r7, #14]
 801a5bc:	2b08      	cmp	r3, #8
 801a5be:	d003      	beq.n	801a5c8 <ethernet_input+0xa0>
 801a5c0:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 801a5c4:	d014      	beq.n	801a5f0 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801a5c6:	e032      	b.n	801a62e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801a5c8:	683b      	ldr	r3, [r7, #0]
 801a5ca:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801a5ce:	f003 0308 	and.w	r3, r3, #8
 801a5d2:	2b00      	cmp	r3, #0
 801a5d4:	d024      	beq.n	801a620 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801a5d6:	8afb      	ldrh	r3, [r7, #22]
 801a5d8:	4619      	mov	r1, r3
 801a5da:	6878      	ldr	r0, [r7, #4]
 801a5dc:	f7f4 ff0e 	bl	800f3fc <pbuf_remove_header>
 801a5e0:	4603      	mov	r3, r0
 801a5e2:	2b00      	cmp	r3, #0
 801a5e4:	d11e      	bne.n	801a624 <ethernet_input+0xfc>
        ip4_input(p, netif);
 801a5e6:	6839      	ldr	r1, [r7, #0]
 801a5e8:	6878      	ldr	r0, [r7, #4]
 801a5ea:	f7fe fd57 	bl	801909c <ip4_input>
      break;
 801a5ee:	e013      	b.n	801a618 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801a5f0:	683b      	ldr	r3, [r7, #0]
 801a5f2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801a5f6:	f003 0308 	and.w	r3, r3, #8
 801a5fa:	2b00      	cmp	r3, #0
 801a5fc:	d014      	beq.n	801a628 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801a5fe:	8afb      	ldrh	r3, [r7, #22]
 801a600:	4619      	mov	r1, r3
 801a602:	6878      	ldr	r0, [r7, #4]
 801a604:	f7f4 fefa 	bl	800f3fc <pbuf_remove_header>
 801a608:	4603      	mov	r3, r0
 801a60a:	2b00      	cmp	r3, #0
 801a60c:	d10e      	bne.n	801a62c <ethernet_input+0x104>
        etharp_input(p, netif);
 801a60e:	6839      	ldr	r1, [r7, #0]
 801a610:	6878      	ldr	r0, [r7, #4]
 801a612:	f7fd febf 	bl	8018394 <etharp_input>
      break;
 801a616:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801a618:	2300      	movs	r3, #0
 801a61a:	e00c      	b.n	801a636 <ethernet_input+0x10e>
    goto free_and_return;
 801a61c:	bf00      	nop
 801a61e:	e006      	b.n	801a62e <ethernet_input+0x106>
        goto free_and_return;
 801a620:	bf00      	nop
 801a622:	e004      	b.n	801a62e <ethernet_input+0x106>
        goto free_and_return;
 801a624:	bf00      	nop
 801a626:	e002      	b.n	801a62e <ethernet_input+0x106>
        goto free_and_return;
 801a628:	bf00      	nop
 801a62a:	e000      	b.n	801a62e <ethernet_input+0x106>
        goto free_and_return;
 801a62c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801a62e:	6878      	ldr	r0, [r7, #4]
 801a630:	f7f4 ff6a 	bl	800f508 <pbuf_free>
  return ERR_OK;
 801a634:	2300      	movs	r3, #0
}
 801a636:	4618      	mov	r0, r3
 801a638:	3718      	adds	r7, #24
 801a63a:	46bd      	mov	sp, r7
 801a63c:	bd80      	pop	{r7, pc}
 801a63e:	bf00      	nop
 801a640:	0806cf88 	.word	0x0806cf88

0801a644 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801a644:	b580      	push	{r7, lr}
 801a646:	b086      	sub	sp, #24
 801a648:	af00      	add	r7, sp, #0
 801a64a:	60f8      	str	r0, [r7, #12]
 801a64c:	60b9      	str	r1, [r7, #8]
 801a64e:	607a      	str	r2, [r7, #4]
 801a650:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801a652:	8c3b      	ldrh	r3, [r7, #32]
 801a654:	4618      	mov	r0, r3
 801a656:	f7f3 fa35 	bl	800dac4 <lwip_htons>
 801a65a:	4603      	mov	r3, r0
 801a65c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801a65e:	210e      	movs	r1, #14
 801a660:	68b8      	ldr	r0, [r7, #8]
 801a662:	f7f4 febb 	bl	800f3dc <pbuf_add_header>
 801a666:	4603      	mov	r3, r0
 801a668:	2b00      	cmp	r3, #0
 801a66a:	d125      	bne.n	801a6b8 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801a66c:	68bb      	ldr	r3, [r7, #8]
 801a66e:	685b      	ldr	r3, [r3, #4]
 801a670:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801a672:	693b      	ldr	r3, [r7, #16]
 801a674:	8afa      	ldrh	r2, [r7, #22]
 801a676:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801a678:	693b      	ldr	r3, [r7, #16]
 801a67a:	2206      	movs	r2, #6
 801a67c:	6839      	ldr	r1, [r7, #0]
 801a67e:	4618      	mov	r0, r3
 801a680:	f000 f988 	bl	801a994 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801a684:	693b      	ldr	r3, [r7, #16]
 801a686:	3306      	adds	r3, #6
 801a688:	2206      	movs	r2, #6
 801a68a:	6879      	ldr	r1, [r7, #4]
 801a68c:	4618      	mov	r0, r3
 801a68e:	f000 f981 	bl	801a994 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801a692:	68fb      	ldr	r3, [r7, #12]
 801a694:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801a698:	2b06      	cmp	r3, #6
 801a69a:	d006      	beq.n	801a6aa <ethernet_output+0x66>
 801a69c:	4b0a      	ldr	r3, [pc, #40]	; (801a6c8 <ethernet_output+0x84>)
 801a69e:	f44f 7299 	mov.w	r2, #306	; 0x132
 801a6a2:	490a      	ldr	r1, [pc, #40]	; (801a6cc <ethernet_output+0x88>)
 801a6a4:	480a      	ldr	r0, [pc, #40]	; (801a6d0 <ethernet_output+0x8c>)
 801a6a6:	f000 feeb 	bl	801b480 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801a6aa:	68fb      	ldr	r3, [r7, #12]
 801a6ac:	699b      	ldr	r3, [r3, #24]
 801a6ae:	68b9      	ldr	r1, [r7, #8]
 801a6b0:	68f8      	ldr	r0, [r7, #12]
 801a6b2:	4798      	blx	r3
 801a6b4:	4603      	mov	r3, r0
 801a6b6:	e002      	b.n	801a6be <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801a6b8:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801a6ba:	f06f 0301 	mvn.w	r3, #1
}
 801a6be:	4618      	mov	r0, r3
 801a6c0:	3718      	adds	r7, #24
 801a6c2:	46bd      	mov	sp, r7
 801a6c4:	bd80      	pop	{r7, pc}
 801a6c6:	bf00      	nop
 801a6c8:	080210f8 	.word	0x080210f8
 801a6cc:	08021130 	.word	0x08021130
 801a6d0:	08021164 	.word	0x08021164

0801a6d4 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801a6d4:	b580      	push	{r7, lr}
 801a6d6:	b084      	sub	sp, #16
 801a6d8:	af00      	add	r7, sp, #0
 801a6da:	6078      	str	r0, [r7, #4]
 801a6dc:	6039      	str	r1, [r7, #0]
  osMessageQDef(QUEUE, size, void *);
 801a6de:	683b      	ldr	r3, [r7, #0]
 801a6e0:	60bb      	str	r3, [r7, #8]
 801a6e2:	2304      	movs	r3, #4
 801a6e4:	60fb      	str	r3, [r7, #12]
  
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 801a6e6:	f107 0308 	add.w	r3, r7, #8
 801a6ea:	2100      	movs	r1, #0
 801a6ec:	4618      	mov	r0, r3
 801a6ee:	f7ef fcda 	bl	800a0a6 <osMessageCreate>
 801a6f2:	4602      	mov	r2, r0
 801a6f4:	687b      	ldr	r3, [r7, #4]
 801a6f6:	601a      	str	r2, [r3, #0]
      ++lwip_stats.sys.mbox.used;
      if (lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used) {
         lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
	  }
#endif /* SYS_STATS */
 if (*mbox == NULL)
 801a6f8:	687b      	ldr	r3, [r7, #4]
 801a6fa:	681b      	ldr	r3, [r3, #0]
 801a6fc:	2b00      	cmp	r3, #0
 801a6fe:	d102      	bne.n	801a706 <sys_mbox_new+0x32>
  return ERR_MEM;
 801a700:	f04f 33ff 	mov.w	r3, #4294967295
 801a704:	e000      	b.n	801a708 <sys_mbox_new+0x34>
 
 return ERR_OK;
 801a706:	2300      	movs	r3, #0
}
 801a708:	4618      	mov	r0, r3
 801a70a:	3710      	adds	r7, #16
 801a70c:	46bd      	mov	sp, r7
 801a70e:	bd80      	pop	{r7, pc}

0801a710 <sys_mbox_post>:
}

/*-----------------------------------------------------------------------------------*/
//   Posts the "msg" to the mailbox.
void sys_mbox_post(sys_mbox_t *mbox, void *data)
{
 801a710:	b580      	push	{r7, lr}
 801a712:	b082      	sub	sp, #8
 801a714:	af00      	add	r7, sp, #0
 801a716:	6078      	str	r0, [r7, #4]
 801a718:	6039      	str	r1, [r7, #0]
  while(osMessagePut(*mbox, (uint32_t)data, osWaitForever) != osOK);
 801a71a:	bf00      	nop
 801a71c:	687b      	ldr	r3, [r7, #4]
 801a71e:	681b      	ldr	r3, [r3, #0]
 801a720:	6839      	ldr	r1, [r7, #0]
 801a722:	f04f 32ff 	mov.w	r2, #4294967295
 801a726:	4618      	mov	r0, r3
 801a728:	f7ef fcd0 	bl	800a0cc <osMessagePut>
 801a72c:	4603      	mov	r3, r0
 801a72e:	2b00      	cmp	r3, #0
 801a730:	d1f4      	bne.n	801a71c <sys_mbox_post+0xc>
}
 801a732:	bf00      	nop
 801a734:	bf00      	nop
 801a736:	3708      	adds	r7, #8
 801a738:	46bd      	mov	sp, r7
 801a73a:	bd80      	pop	{r7, pc}

0801a73c <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801a73c:	b580      	push	{r7, lr}
 801a73e:	b084      	sub	sp, #16
 801a740:	af00      	add	r7, sp, #0
 801a742:	6078      	str	r0, [r7, #4]
 801a744:	6039      	str	r1, [r7, #0]
err_t result;

   if ( osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 801a746:	687b      	ldr	r3, [r7, #4]
 801a748:	681b      	ldr	r3, [r3, #0]
 801a74a:	6839      	ldr	r1, [r7, #0]
 801a74c:	2200      	movs	r2, #0
 801a74e:	4618      	mov	r0, r3
 801a750:	f7ef fcbc 	bl	800a0cc <osMessagePut>
 801a754:	4603      	mov	r3, r0
 801a756:	2b00      	cmp	r3, #0
 801a758:	d102      	bne.n	801a760 <sys_mbox_trypost+0x24>
   {
      result = ERR_OK;
 801a75a:	2300      	movs	r3, #0
 801a75c:	73fb      	strb	r3, [r7, #15]
 801a75e:	e001      	b.n	801a764 <sys_mbox_trypost+0x28>
   }
   else {
      // could not post, queue must be full
      result = ERR_MEM;
 801a760:	23ff      	movs	r3, #255	; 0xff
 801a762:	73fb      	strb	r3, [r7, #15]
      lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
			
   }

   return result;
 801a764:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801a768:	4618      	mov	r0, r3
 801a76a:	3710      	adds	r7, #16
 801a76c:	46bd      	mov	sp, r7
 801a76e:	bd80      	pop	{r7, pc}

0801a770 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801a770:	b580      	push	{r7, lr}
 801a772:	b08c      	sub	sp, #48	; 0x30
 801a774:	af00      	add	r7, sp, #0
 801a776:	61f8      	str	r0, [r7, #28]
 801a778:	61b9      	str	r1, [r7, #24]
 801a77a:	617a      	str	r2, [r7, #20]
  osEvent event;
  uint32_t starttime = osKernelSysTick();;
 801a77c:	f7ef fb97 	bl	8009eae <osKernelSysTick>
 801a780:	62f8      	str	r0, [r7, #44]	; 0x2c
  
  if(timeout != 0)
 801a782:	697b      	ldr	r3, [r7, #20]
 801a784:	2b00      	cmp	r3, #0
 801a786:	d017      	beq.n	801a7b8 <sys_arch_mbox_fetch+0x48>
  { 
    event = osMessageGet (*mbox, timeout);
 801a788:	69fb      	ldr	r3, [r7, #28]
 801a78a:	6819      	ldr	r1, [r3, #0]
 801a78c:	f107 0320 	add.w	r3, r7, #32
 801a790:	697a      	ldr	r2, [r7, #20]
 801a792:	4618      	mov	r0, r3
 801a794:	f7ef fcdc 	bl	800a150 <osMessageGet>
    
    if(event.status == osEventMessage)
 801a798:	6a3b      	ldr	r3, [r7, #32]
 801a79a:	2b10      	cmp	r3, #16
 801a79c:	d109      	bne.n	801a7b2 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 801a79e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a7a0:	461a      	mov	r2, r3
 801a7a2:	69bb      	ldr	r3, [r7, #24]
 801a7a4:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 801a7a6:	f7ef fb82 	bl	8009eae <osKernelSysTick>
 801a7aa:	4602      	mov	r2, r0
 801a7ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a7ae:	1ad3      	subs	r3, r2, r3
 801a7b0:	e019      	b.n	801a7e6 <sys_arch_mbox_fetch+0x76>
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 801a7b2:	f04f 33ff 	mov.w	r3, #4294967295
 801a7b6:	e016      	b.n	801a7e6 <sys_arch_mbox_fetch+0x76>
    } 
  }
  else
  {
    event = osMessageGet (*mbox, osWaitForever);
 801a7b8:	69fb      	ldr	r3, [r7, #28]
 801a7ba:	6819      	ldr	r1, [r3, #0]
 801a7bc:	463b      	mov	r3, r7
 801a7be:	f04f 32ff 	mov.w	r2, #4294967295
 801a7c2:	4618      	mov	r0, r3
 801a7c4:	f7ef fcc4 	bl	800a150 <osMessageGet>
 801a7c8:	f107 0320 	add.w	r3, r7, #32
 801a7cc:	463a      	mov	r2, r7
 801a7ce:	ca07      	ldmia	r2, {r0, r1, r2}
 801a7d0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 801a7d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a7d6:	461a      	mov	r2, r3
 801a7d8:	69bb      	ldr	r3, [r7, #24]
 801a7da:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 801a7dc:	f7ef fb67 	bl	8009eae <osKernelSysTick>
 801a7e0:	4602      	mov	r2, r0
 801a7e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a7e4:	1ad3      	subs	r3, r2, r3
  }
}
 801a7e6:	4618      	mov	r0, r3
 801a7e8:	3730      	adds	r7, #48	; 0x30
 801a7ea:	46bd      	mov	sp, r7
 801a7ec:	bd80      	pop	{r7, pc}

0801a7ee <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)          
{      
 801a7ee:	b480      	push	{r7}
 801a7f0:	b083      	sub	sp, #12
 801a7f2:	af00      	add	r7, sp, #0
 801a7f4:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL) 
 801a7f6:	687b      	ldr	r3, [r7, #4]
 801a7f8:	681b      	ldr	r3, [r3, #0]
 801a7fa:	2b00      	cmp	r3, #0
 801a7fc:	d101      	bne.n	801a802 <sys_mbox_valid+0x14>
    return 0;
 801a7fe:	2300      	movs	r3, #0
 801a800:	e000      	b.n	801a804 <sys_mbox_valid+0x16>
  else
    return 1;
 801a802:	2301      	movs	r3, #1
}                                             
 801a804:	4618      	mov	r0, r3
 801a806:	370c      	adds	r7, #12
 801a808:	46bd      	mov	sp, r7
 801a80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a80e:	4770      	bx	lr

0801a810 <sys_init>:
/*-----------------------------------------------------------------------------------*/ 
osMutexId lwip_sys_mutex;
osMutexDef(lwip_sys_mutex);
// Initialize sys arch
void sys_init(void)
{
 801a810:	b580      	push	{r7, lr}
 801a812:	af00      	add	r7, sp, #0
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 801a814:	4803      	ldr	r0, [pc, #12]	; (801a824 <sys_init+0x14>)
 801a816:	f7ef fba2 	bl	8009f5e <osMutexCreate>
 801a81a:	4603      	mov	r3, r0
 801a81c:	4a02      	ldr	r2, [pc, #8]	; (801a828 <sys_init+0x18>)
 801a81e:	6013      	str	r3, [r2, #0]
}
 801a820:	bf00      	nop
 801a822:	bd80      	pop	{r7, pc}
 801a824:	0806cf98 	.word	0x0806cf98
 801a828:	20013d08 	.word	0x20013d08

0801a82c <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801a82c:	b580      	push	{r7, lr}
 801a82e:	b084      	sub	sp, #16
 801a830:	af00      	add	r7, sp, #0
 801a832:	6078      	str	r0, [r7, #4]
  
  osMutexDef(MUTEX);
 801a834:	2300      	movs	r3, #0
 801a836:	60fb      	str	r3, [r7, #12]
  
  *mutex = osMutexCreate(osMutex(MUTEX));
 801a838:	f107 030c 	add.w	r3, r7, #12
 801a83c:	4618      	mov	r0, r3
 801a83e:	f7ef fb8e 	bl	8009f5e <osMutexCreate>
 801a842:	4602      	mov	r2, r0
 801a844:	687b      	ldr	r3, [r7, #4]
 801a846:	601a      	str	r2, [r3, #0]
  
  
  //*mutex = xSemaphoreCreateMutex();
  if(*mutex == NULL)
 801a848:	687b      	ldr	r3, [r7, #4]
 801a84a:	681b      	ldr	r3, [r3, #0]
 801a84c:	2b00      	cmp	r3, #0
 801a84e:	d102      	bne.n	801a856 <sys_mutex_new+0x2a>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */	
    return ERR_MEM;
 801a850:	f04f 33ff 	mov.w	r3, #4294967295
 801a854:	e000      	b.n	801a858 <sys_mutex_new+0x2c>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801a856:	2300      	movs	r3, #0
}
 801a858:	4618      	mov	r0, r3
 801a85a:	3710      	adds	r7, #16
 801a85c:	46bd      	mov	sp, r7
 801a85e:	bd80      	pop	{r7, pc}

0801a860 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801a860:	b580      	push	{r7, lr}
 801a862:	b082      	sub	sp, #8
 801a864:	af00      	add	r7, sp, #0
 801a866:	6078      	str	r0, [r7, #4]
  osMutexWait (*mutex, osWaitForever);
 801a868:	687b      	ldr	r3, [r7, #4]
 801a86a:	681b      	ldr	r3, [r3, #0]
 801a86c:	f04f 31ff 	mov.w	r1, #4294967295
 801a870:	4618      	mov	r0, r3
 801a872:	f7ef fb81 	bl	8009f78 <osMutexWait>
}
 801a876:	bf00      	nop
 801a878:	3708      	adds	r7, #8
 801a87a:	46bd      	mov	sp, r7
 801a87c:	bd80      	pop	{r7, pc}

0801a87e <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801a87e:	b580      	push	{r7, lr}
 801a880:	b082      	sub	sp, #8
 801a882:	af00      	add	r7, sp, #0
 801a884:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801a886:	687b      	ldr	r3, [r7, #4]
 801a888:	681b      	ldr	r3, [r3, #0]
 801a88a:	4618      	mov	r0, r3
 801a88c:	f7ef fbc2 	bl	800a014 <osMutexRelease>
}
 801a890:	bf00      	nop
 801a892:	3708      	adds	r7, #8
 801a894:	46bd      	mov	sp, r7
 801a896:	bd80      	pop	{r7, pc}

0801a898 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801a898:	b580      	push	{r7, lr}
 801a89a:	b08a      	sub	sp, #40	; 0x28
 801a89c:	af00      	add	r7, sp, #0
 801a89e:	60f8      	str	r0, [r7, #12]
 801a8a0:	60b9      	str	r1, [r7, #8]
 801a8a2:	607a      	str	r2, [r7, #4]
 801a8a4:	603b      	str	r3, [r7, #0]
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 801a8a6:	68fb      	ldr	r3, [r7, #12]
 801a8a8:	617b      	str	r3, [r7, #20]
 801a8aa:	68bb      	ldr	r3, [r7, #8]
 801a8ac:	61bb      	str	r3, [r7, #24]
 801a8ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a8b0:	b21b      	sxth	r3, r3
 801a8b2:	83bb      	strh	r3, [r7, #28]
 801a8b4:	2300      	movs	r3, #0
 801a8b6:	623b      	str	r3, [r7, #32]
 801a8b8:	683b      	ldr	r3, [r7, #0]
 801a8ba:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 801a8bc:	f107 0314 	add.w	r3, r7, #20
 801a8c0:	6879      	ldr	r1, [r7, #4]
 801a8c2:	4618      	mov	r0, r3
 801a8c4:	f7ef fb03 	bl	8009ece <osThreadCreate>
 801a8c8:	4603      	mov	r3, r0
}
 801a8ca:	4618      	mov	r0, r3
 801a8cc:	3728      	adds	r7, #40	; 0x28
 801a8ce:	46bd      	mov	sp, r7
 801a8d0:	bd80      	pop	{r7, pc}
	...

0801a8d4 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801a8d4:	b580      	push	{r7, lr}
 801a8d6:	af00      	add	r7, sp, #0
  osMutexWait(lwip_sys_mutex, osWaitForever);
 801a8d8:	4b04      	ldr	r3, [pc, #16]	; (801a8ec <sys_arch_protect+0x18>)
 801a8da:	681b      	ldr	r3, [r3, #0]
 801a8dc:	f04f 31ff 	mov.w	r1, #4294967295
 801a8e0:	4618      	mov	r0, r3
 801a8e2:	f7ef fb49 	bl	8009f78 <osMutexWait>
  return (sys_prot_t)1;
 801a8e6:	2301      	movs	r3, #1
}
 801a8e8:	4618      	mov	r0, r3
 801a8ea:	bd80      	pop	{r7, pc}
 801a8ec:	20013d08 	.word	0x20013d08

0801a8f0 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801a8f0:	b580      	push	{r7, lr}
 801a8f2:	b082      	sub	sp, #8
 801a8f4:	af00      	add	r7, sp, #0
 801a8f6:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801a8f8:	4b04      	ldr	r3, [pc, #16]	; (801a90c <sys_arch_unprotect+0x1c>)
 801a8fa:	681b      	ldr	r3, [r3, #0]
 801a8fc:	4618      	mov	r0, r3
 801a8fe:	f7ef fb89 	bl	800a014 <osMutexRelease>
}
 801a902:	bf00      	nop
 801a904:	3708      	adds	r7, #8
 801a906:	46bd      	mov	sp, r7
 801a908:	bd80      	pop	{r7, pc}
 801a90a:	bf00      	nop
 801a90c:	20013d08 	.word	0x20013d08

0801a910 <__errno>:
 801a910:	4b01      	ldr	r3, [pc, #4]	; (801a918 <__errno+0x8>)
 801a912:	6818      	ldr	r0, [r3, #0]
 801a914:	4770      	bx	lr
 801a916:	bf00      	nop
 801a918:	200000cc 	.word	0x200000cc

0801a91c <__libc_init_array>:
 801a91c:	b570      	push	{r4, r5, r6, lr}
 801a91e:	4d0d      	ldr	r5, [pc, #52]	; (801a954 <__libc_init_array+0x38>)
 801a920:	4c0d      	ldr	r4, [pc, #52]	; (801a958 <__libc_init_array+0x3c>)
 801a922:	1b64      	subs	r4, r4, r5
 801a924:	10a4      	asrs	r4, r4, #2
 801a926:	2600      	movs	r6, #0
 801a928:	42a6      	cmp	r6, r4
 801a92a:	d109      	bne.n	801a940 <__libc_init_array+0x24>
 801a92c:	4d0b      	ldr	r5, [pc, #44]	; (801a95c <__libc_init_array+0x40>)
 801a92e:	4c0c      	ldr	r4, [pc, #48]	; (801a960 <__libc_init_array+0x44>)
 801a930:	f002 fed8 	bl	801d6e4 <_init>
 801a934:	1b64      	subs	r4, r4, r5
 801a936:	10a4      	asrs	r4, r4, #2
 801a938:	2600      	movs	r6, #0
 801a93a:	42a6      	cmp	r6, r4
 801a93c:	d105      	bne.n	801a94a <__libc_init_array+0x2e>
 801a93e:	bd70      	pop	{r4, r5, r6, pc}
 801a940:	f855 3b04 	ldr.w	r3, [r5], #4
 801a944:	4798      	blx	r3
 801a946:	3601      	adds	r6, #1
 801a948:	e7ee      	b.n	801a928 <__libc_init_array+0xc>
 801a94a:	f855 3b04 	ldr.w	r3, [r5], #4
 801a94e:	4798      	blx	r3
 801a950:	3601      	adds	r6, #1
 801a952:	e7f2      	b.n	801a93a <__libc_init_array+0x1e>
 801a954:	0806d3e0 	.word	0x0806d3e0
 801a958:	0806d3e0 	.word	0x0806d3e0
 801a95c:	0806d3e0 	.word	0x0806d3e0
 801a960:	0806d3e4 	.word	0x0806d3e4

0801a964 <malloc>:
 801a964:	4b02      	ldr	r3, [pc, #8]	; (801a970 <malloc+0xc>)
 801a966:	4601      	mov	r1, r0
 801a968:	6818      	ldr	r0, [r3, #0]
 801a96a:	f000 b8ab 	b.w	801aac4 <_malloc_r>
 801a96e:	bf00      	nop
 801a970:	200000cc 	.word	0x200000cc

0801a974 <memcmp>:
 801a974:	b510      	push	{r4, lr}
 801a976:	3901      	subs	r1, #1
 801a978:	4402      	add	r2, r0
 801a97a:	4290      	cmp	r0, r2
 801a97c:	d101      	bne.n	801a982 <memcmp+0xe>
 801a97e:	2000      	movs	r0, #0
 801a980:	e005      	b.n	801a98e <memcmp+0x1a>
 801a982:	7803      	ldrb	r3, [r0, #0]
 801a984:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801a988:	42a3      	cmp	r3, r4
 801a98a:	d001      	beq.n	801a990 <memcmp+0x1c>
 801a98c:	1b18      	subs	r0, r3, r4
 801a98e:	bd10      	pop	{r4, pc}
 801a990:	3001      	adds	r0, #1
 801a992:	e7f2      	b.n	801a97a <memcmp+0x6>

0801a994 <memcpy>:
 801a994:	440a      	add	r2, r1
 801a996:	4291      	cmp	r1, r2
 801a998:	f100 33ff 	add.w	r3, r0, #4294967295
 801a99c:	d100      	bne.n	801a9a0 <memcpy+0xc>
 801a99e:	4770      	bx	lr
 801a9a0:	b510      	push	{r4, lr}
 801a9a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a9a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 801a9aa:	4291      	cmp	r1, r2
 801a9ac:	d1f9      	bne.n	801a9a2 <memcpy+0xe>
 801a9ae:	bd10      	pop	{r4, pc}

0801a9b0 <memset>:
 801a9b0:	4402      	add	r2, r0
 801a9b2:	4603      	mov	r3, r0
 801a9b4:	4293      	cmp	r3, r2
 801a9b6:	d100      	bne.n	801a9ba <memset+0xa>
 801a9b8:	4770      	bx	lr
 801a9ba:	f803 1b01 	strb.w	r1, [r3], #1
 801a9be:	e7f9      	b.n	801a9b4 <memset+0x4>

0801a9c0 <_calloc_r>:
 801a9c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a9c2:	fba1 2402 	umull	r2, r4, r1, r2
 801a9c6:	b94c      	cbnz	r4, 801a9dc <_calloc_r+0x1c>
 801a9c8:	4611      	mov	r1, r2
 801a9ca:	9201      	str	r2, [sp, #4]
 801a9cc:	f000 f87a 	bl	801aac4 <_malloc_r>
 801a9d0:	9a01      	ldr	r2, [sp, #4]
 801a9d2:	4605      	mov	r5, r0
 801a9d4:	b930      	cbnz	r0, 801a9e4 <_calloc_r+0x24>
 801a9d6:	4628      	mov	r0, r5
 801a9d8:	b003      	add	sp, #12
 801a9da:	bd30      	pop	{r4, r5, pc}
 801a9dc:	220c      	movs	r2, #12
 801a9de:	6002      	str	r2, [r0, #0]
 801a9e0:	2500      	movs	r5, #0
 801a9e2:	e7f8      	b.n	801a9d6 <_calloc_r+0x16>
 801a9e4:	4621      	mov	r1, r4
 801a9e6:	f7ff ffe3 	bl	801a9b0 <memset>
 801a9ea:	e7f4      	b.n	801a9d6 <_calloc_r+0x16>

0801a9ec <_free_r>:
 801a9ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a9ee:	2900      	cmp	r1, #0
 801a9f0:	d044      	beq.n	801aa7c <_free_r+0x90>
 801a9f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a9f6:	9001      	str	r0, [sp, #4]
 801a9f8:	2b00      	cmp	r3, #0
 801a9fa:	f1a1 0404 	sub.w	r4, r1, #4
 801a9fe:	bfb8      	it	lt
 801aa00:	18e4      	addlt	r4, r4, r3
 801aa02:	f002 f86d 	bl	801cae0 <__malloc_lock>
 801aa06:	4a1e      	ldr	r2, [pc, #120]	; (801aa80 <_free_r+0x94>)
 801aa08:	9801      	ldr	r0, [sp, #4]
 801aa0a:	6813      	ldr	r3, [r2, #0]
 801aa0c:	b933      	cbnz	r3, 801aa1c <_free_r+0x30>
 801aa0e:	6063      	str	r3, [r4, #4]
 801aa10:	6014      	str	r4, [r2, #0]
 801aa12:	b003      	add	sp, #12
 801aa14:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801aa18:	f002 b868 	b.w	801caec <__malloc_unlock>
 801aa1c:	42a3      	cmp	r3, r4
 801aa1e:	d908      	bls.n	801aa32 <_free_r+0x46>
 801aa20:	6825      	ldr	r5, [r4, #0]
 801aa22:	1961      	adds	r1, r4, r5
 801aa24:	428b      	cmp	r3, r1
 801aa26:	bf01      	itttt	eq
 801aa28:	6819      	ldreq	r1, [r3, #0]
 801aa2a:	685b      	ldreq	r3, [r3, #4]
 801aa2c:	1949      	addeq	r1, r1, r5
 801aa2e:	6021      	streq	r1, [r4, #0]
 801aa30:	e7ed      	b.n	801aa0e <_free_r+0x22>
 801aa32:	461a      	mov	r2, r3
 801aa34:	685b      	ldr	r3, [r3, #4]
 801aa36:	b10b      	cbz	r3, 801aa3c <_free_r+0x50>
 801aa38:	42a3      	cmp	r3, r4
 801aa3a:	d9fa      	bls.n	801aa32 <_free_r+0x46>
 801aa3c:	6811      	ldr	r1, [r2, #0]
 801aa3e:	1855      	adds	r5, r2, r1
 801aa40:	42a5      	cmp	r5, r4
 801aa42:	d10b      	bne.n	801aa5c <_free_r+0x70>
 801aa44:	6824      	ldr	r4, [r4, #0]
 801aa46:	4421      	add	r1, r4
 801aa48:	1854      	adds	r4, r2, r1
 801aa4a:	42a3      	cmp	r3, r4
 801aa4c:	6011      	str	r1, [r2, #0]
 801aa4e:	d1e0      	bne.n	801aa12 <_free_r+0x26>
 801aa50:	681c      	ldr	r4, [r3, #0]
 801aa52:	685b      	ldr	r3, [r3, #4]
 801aa54:	6053      	str	r3, [r2, #4]
 801aa56:	4421      	add	r1, r4
 801aa58:	6011      	str	r1, [r2, #0]
 801aa5a:	e7da      	b.n	801aa12 <_free_r+0x26>
 801aa5c:	d902      	bls.n	801aa64 <_free_r+0x78>
 801aa5e:	230c      	movs	r3, #12
 801aa60:	6003      	str	r3, [r0, #0]
 801aa62:	e7d6      	b.n	801aa12 <_free_r+0x26>
 801aa64:	6825      	ldr	r5, [r4, #0]
 801aa66:	1961      	adds	r1, r4, r5
 801aa68:	428b      	cmp	r3, r1
 801aa6a:	bf04      	itt	eq
 801aa6c:	6819      	ldreq	r1, [r3, #0]
 801aa6e:	685b      	ldreq	r3, [r3, #4]
 801aa70:	6063      	str	r3, [r4, #4]
 801aa72:	bf04      	itt	eq
 801aa74:	1949      	addeq	r1, r1, r5
 801aa76:	6021      	streq	r1, [r4, #0]
 801aa78:	6054      	str	r4, [r2, #4]
 801aa7a:	e7ca      	b.n	801aa12 <_free_r+0x26>
 801aa7c:	b003      	add	sp, #12
 801aa7e:	bd30      	pop	{r4, r5, pc}
 801aa80:	20013d0c 	.word	0x20013d0c

0801aa84 <sbrk_aligned>:
 801aa84:	b570      	push	{r4, r5, r6, lr}
 801aa86:	4e0e      	ldr	r6, [pc, #56]	; (801aac0 <sbrk_aligned+0x3c>)
 801aa88:	460c      	mov	r4, r1
 801aa8a:	6831      	ldr	r1, [r6, #0]
 801aa8c:	4605      	mov	r5, r0
 801aa8e:	b911      	cbnz	r1, 801aa96 <sbrk_aligned+0x12>
 801aa90:	f000 fdc2 	bl	801b618 <_sbrk_r>
 801aa94:	6030      	str	r0, [r6, #0]
 801aa96:	4621      	mov	r1, r4
 801aa98:	4628      	mov	r0, r5
 801aa9a:	f000 fdbd 	bl	801b618 <_sbrk_r>
 801aa9e:	1c43      	adds	r3, r0, #1
 801aaa0:	d00a      	beq.n	801aab8 <sbrk_aligned+0x34>
 801aaa2:	1cc4      	adds	r4, r0, #3
 801aaa4:	f024 0403 	bic.w	r4, r4, #3
 801aaa8:	42a0      	cmp	r0, r4
 801aaaa:	d007      	beq.n	801aabc <sbrk_aligned+0x38>
 801aaac:	1a21      	subs	r1, r4, r0
 801aaae:	4628      	mov	r0, r5
 801aab0:	f000 fdb2 	bl	801b618 <_sbrk_r>
 801aab4:	3001      	adds	r0, #1
 801aab6:	d101      	bne.n	801aabc <sbrk_aligned+0x38>
 801aab8:	f04f 34ff 	mov.w	r4, #4294967295
 801aabc:	4620      	mov	r0, r4
 801aabe:	bd70      	pop	{r4, r5, r6, pc}
 801aac0:	20013d10 	.word	0x20013d10

0801aac4 <_malloc_r>:
 801aac4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801aac8:	1ccd      	adds	r5, r1, #3
 801aaca:	f025 0503 	bic.w	r5, r5, #3
 801aace:	3508      	adds	r5, #8
 801aad0:	2d0c      	cmp	r5, #12
 801aad2:	bf38      	it	cc
 801aad4:	250c      	movcc	r5, #12
 801aad6:	2d00      	cmp	r5, #0
 801aad8:	4607      	mov	r7, r0
 801aada:	db01      	blt.n	801aae0 <_malloc_r+0x1c>
 801aadc:	42a9      	cmp	r1, r5
 801aade:	d905      	bls.n	801aaec <_malloc_r+0x28>
 801aae0:	230c      	movs	r3, #12
 801aae2:	603b      	str	r3, [r7, #0]
 801aae4:	2600      	movs	r6, #0
 801aae6:	4630      	mov	r0, r6
 801aae8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801aaec:	4e2e      	ldr	r6, [pc, #184]	; (801aba8 <_malloc_r+0xe4>)
 801aaee:	f001 fff7 	bl	801cae0 <__malloc_lock>
 801aaf2:	6833      	ldr	r3, [r6, #0]
 801aaf4:	461c      	mov	r4, r3
 801aaf6:	bb34      	cbnz	r4, 801ab46 <_malloc_r+0x82>
 801aaf8:	4629      	mov	r1, r5
 801aafa:	4638      	mov	r0, r7
 801aafc:	f7ff ffc2 	bl	801aa84 <sbrk_aligned>
 801ab00:	1c43      	adds	r3, r0, #1
 801ab02:	4604      	mov	r4, r0
 801ab04:	d14d      	bne.n	801aba2 <_malloc_r+0xde>
 801ab06:	6834      	ldr	r4, [r6, #0]
 801ab08:	4626      	mov	r6, r4
 801ab0a:	2e00      	cmp	r6, #0
 801ab0c:	d140      	bne.n	801ab90 <_malloc_r+0xcc>
 801ab0e:	6823      	ldr	r3, [r4, #0]
 801ab10:	4631      	mov	r1, r6
 801ab12:	4638      	mov	r0, r7
 801ab14:	eb04 0803 	add.w	r8, r4, r3
 801ab18:	f000 fd7e 	bl	801b618 <_sbrk_r>
 801ab1c:	4580      	cmp	r8, r0
 801ab1e:	d13a      	bne.n	801ab96 <_malloc_r+0xd2>
 801ab20:	6821      	ldr	r1, [r4, #0]
 801ab22:	3503      	adds	r5, #3
 801ab24:	1a6d      	subs	r5, r5, r1
 801ab26:	f025 0503 	bic.w	r5, r5, #3
 801ab2a:	3508      	adds	r5, #8
 801ab2c:	2d0c      	cmp	r5, #12
 801ab2e:	bf38      	it	cc
 801ab30:	250c      	movcc	r5, #12
 801ab32:	4629      	mov	r1, r5
 801ab34:	4638      	mov	r0, r7
 801ab36:	f7ff ffa5 	bl	801aa84 <sbrk_aligned>
 801ab3a:	3001      	adds	r0, #1
 801ab3c:	d02b      	beq.n	801ab96 <_malloc_r+0xd2>
 801ab3e:	6823      	ldr	r3, [r4, #0]
 801ab40:	442b      	add	r3, r5
 801ab42:	6023      	str	r3, [r4, #0]
 801ab44:	e00e      	b.n	801ab64 <_malloc_r+0xa0>
 801ab46:	6822      	ldr	r2, [r4, #0]
 801ab48:	1b52      	subs	r2, r2, r5
 801ab4a:	d41e      	bmi.n	801ab8a <_malloc_r+0xc6>
 801ab4c:	2a0b      	cmp	r2, #11
 801ab4e:	d916      	bls.n	801ab7e <_malloc_r+0xba>
 801ab50:	1961      	adds	r1, r4, r5
 801ab52:	42a3      	cmp	r3, r4
 801ab54:	6025      	str	r5, [r4, #0]
 801ab56:	bf18      	it	ne
 801ab58:	6059      	strne	r1, [r3, #4]
 801ab5a:	6863      	ldr	r3, [r4, #4]
 801ab5c:	bf08      	it	eq
 801ab5e:	6031      	streq	r1, [r6, #0]
 801ab60:	5162      	str	r2, [r4, r5]
 801ab62:	604b      	str	r3, [r1, #4]
 801ab64:	4638      	mov	r0, r7
 801ab66:	f104 060b 	add.w	r6, r4, #11
 801ab6a:	f001 ffbf 	bl	801caec <__malloc_unlock>
 801ab6e:	f026 0607 	bic.w	r6, r6, #7
 801ab72:	1d23      	adds	r3, r4, #4
 801ab74:	1af2      	subs	r2, r6, r3
 801ab76:	d0b6      	beq.n	801aae6 <_malloc_r+0x22>
 801ab78:	1b9b      	subs	r3, r3, r6
 801ab7a:	50a3      	str	r3, [r4, r2]
 801ab7c:	e7b3      	b.n	801aae6 <_malloc_r+0x22>
 801ab7e:	6862      	ldr	r2, [r4, #4]
 801ab80:	42a3      	cmp	r3, r4
 801ab82:	bf0c      	ite	eq
 801ab84:	6032      	streq	r2, [r6, #0]
 801ab86:	605a      	strne	r2, [r3, #4]
 801ab88:	e7ec      	b.n	801ab64 <_malloc_r+0xa0>
 801ab8a:	4623      	mov	r3, r4
 801ab8c:	6864      	ldr	r4, [r4, #4]
 801ab8e:	e7b2      	b.n	801aaf6 <_malloc_r+0x32>
 801ab90:	4634      	mov	r4, r6
 801ab92:	6876      	ldr	r6, [r6, #4]
 801ab94:	e7b9      	b.n	801ab0a <_malloc_r+0x46>
 801ab96:	230c      	movs	r3, #12
 801ab98:	603b      	str	r3, [r7, #0]
 801ab9a:	4638      	mov	r0, r7
 801ab9c:	f001 ffa6 	bl	801caec <__malloc_unlock>
 801aba0:	e7a1      	b.n	801aae6 <_malloc_r+0x22>
 801aba2:	6025      	str	r5, [r4, #0]
 801aba4:	e7de      	b.n	801ab64 <_malloc_r+0xa0>
 801aba6:	bf00      	nop
 801aba8:	20013d0c 	.word	0x20013d0c

0801abac <__cvt>:
 801abac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801abb0:	ec55 4b10 	vmov	r4, r5, d0
 801abb4:	2d00      	cmp	r5, #0
 801abb6:	460e      	mov	r6, r1
 801abb8:	4619      	mov	r1, r3
 801abba:	462b      	mov	r3, r5
 801abbc:	bfbb      	ittet	lt
 801abbe:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801abc2:	461d      	movlt	r5, r3
 801abc4:	2300      	movge	r3, #0
 801abc6:	232d      	movlt	r3, #45	; 0x2d
 801abc8:	700b      	strb	r3, [r1, #0]
 801abca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801abcc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801abd0:	4691      	mov	r9, r2
 801abd2:	f023 0820 	bic.w	r8, r3, #32
 801abd6:	bfbc      	itt	lt
 801abd8:	4622      	movlt	r2, r4
 801abda:	4614      	movlt	r4, r2
 801abdc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801abe0:	d005      	beq.n	801abee <__cvt+0x42>
 801abe2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801abe6:	d100      	bne.n	801abea <__cvt+0x3e>
 801abe8:	3601      	adds	r6, #1
 801abea:	2102      	movs	r1, #2
 801abec:	e000      	b.n	801abf0 <__cvt+0x44>
 801abee:	2103      	movs	r1, #3
 801abf0:	ab03      	add	r3, sp, #12
 801abf2:	9301      	str	r3, [sp, #4]
 801abf4:	ab02      	add	r3, sp, #8
 801abf6:	9300      	str	r3, [sp, #0]
 801abf8:	ec45 4b10 	vmov	d0, r4, r5
 801abfc:	4653      	mov	r3, sl
 801abfe:	4632      	mov	r2, r6
 801ac00:	f000 ff4a 	bl	801ba98 <_dtoa_r>
 801ac04:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801ac08:	4607      	mov	r7, r0
 801ac0a:	d102      	bne.n	801ac12 <__cvt+0x66>
 801ac0c:	f019 0f01 	tst.w	r9, #1
 801ac10:	d022      	beq.n	801ac58 <__cvt+0xac>
 801ac12:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801ac16:	eb07 0906 	add.w	r9, r7, r6
 801ac1a:	d110      	bne.n	801ac3e <__cvt+0x92>
 801ac1c:	783b      	ldrb	r3, [r7, #0]
 801ac1e:	2b30      	cmp	r3, #48	; 0x30
 801ac20:	d10a      	bne.n	801ac38 <__cvt+0x8c>
 801ac22:	2200      	movs	r2, #0
 801ac24:	2300      	movs	r3, #0
 801ac26:	4620      	mov	r0, r4
 801ac28:	4629      	mov	r1, r5
 801ac2a:	f7e5 ff65 	bl	8000af8 <__aeabi_dcmpeq>
 801ac2e:	b918      	cbnz	r0, 801ac38 <__cvt+0x8c>
 801ac30:	f1c6 0601 	rsb	r6, r6, #1
 801ac34:	f8ca 6000 	str.w	r6, [sl]
 801ac38:	f8da 3000 	ldr.w	r3, [sl]
 801ac3c:	4499      	add	r9, r3
 801ac3e:	2200      	movs	r2, #0
 801ac40:	2300      	movs	r3, #0
 801ac42:	4620      	mov	r0, r4
 801ac44:	4629      	mov	r1, r5
 801ac46:	f7e5 ff57 	bl	8000af8 <__aeabi_dcmpeq>
 801ac4a:	b108      	cbz	r0, 801ac50 <__cvt+0xa4>
 801ac4c:	f8cd 900c 	str.w	r9, [sp, #12]
 801ac50:	2230      	movs	r2, #48	; 0x30
 801ac52:	9b03      	ldr	r3, [sp, #12]
 801ac54:	454b      	cmp	r3, r9
 801ac56:	d307      	bcc.n	801ac68 <__cvt+0xbc>
 801ac58:	9b03      	ldr	r3, [sp, #12]
 801ac5a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801ac5c:	1bdb      	subs	r3, r3, r7
 801ac5e:	4638      	mov	r0, r7
 801ac60:	6013      	str	r3, [r2, #0]
 801ac62:	b004      	add	sp, #16
 801ac64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ac68:	1c59      	adds	r1, r3, #1
 801ac6a:	9103      	str	r1, [sp, #12]
 801ac6c:	701a      	strb	r2, [r3, #0]
 801ac6e:	e7f0      	b.n	801ac52 <__cvt+0xa6>

0801ac70 <__exponent>:
 801ac70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801ac72:	4603      	mov	r3, r0
 801ac74:	2900      	cmp	r1, #0
 801ac76:	bfb8      	it	lt
 801ac78:	4249      	neglt	r1, r1
 801ac7a:	f803 2b02 	strb.w	r2, [r3], #2
 801ac7e:	bfb4      	ite	lt
 801ac80:	222d      	movlt	r2, #45	; 0x2d
 801ac82:	222b      	movge	r2, #43	; 0x2b
 801ac84:	2909      	cmp	r1, #9
 801ac86:	7042      	strb	r2, [r0, #1]
 801ac88:	dd2a      	ble.n	801ace0 <__exponent+0x70>
 801ac8a:	f10d 0407 	add.w	r4, sp, #7
 801ac8e:	46a4      	mov	ip, r4
 801ac90:	270a      	movs	r7, #10
 801ac92:	46a6      	mov	lr, r4
 801ac94:	460a      	mov	r2, r1
 801ac96:	fb91 f6f7 	sdiv	r6, r1, r7
 801ac9a:	fb07 1516 	mls	r5, r7, r6, r1
 801ac9e:	3530      	adds	r5, #48	; 0x30
 801aca0:	2a63      	cmp	r2, #99	; 0x63
 801aca2:	f104 34ff 	add.w	r4, r4, #4294967295
 801aca6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801acaa:	4631      	mov	r1, r6
 801acac:	dcf1      	bgt.n	801ac92 <__exponent+0x22>
 801acae:	3130      	adds	r1, #48	; 0x30
 801acb0:	f1ae 0502 	sub.w	r5, lr, #2
 801acb4:	f804 1c01 	strb.w	r1, [r4, #-1]
 801acb8:	1c44      	adds	r4, r0, #1
 801acba:	4629      	mov	r1, r5
 801acbc:	4561      	cmp	r1, ip
 801acbe:	d30a      	bcc.n	801acd6 <__exponent+0x66>
 801acc0:	f10d 0209 	add.w	r2, sp, #9
 801acc4:	eba2 020e 	sub.w	r2, r2, lr
 801acc8:	4565      	cmp	r5, ip
 801acca:	bf88      	it	hi
 801accc:	2200      	movhi	r2, #0
 801acce:	4413      	add	r3, r2
 801acd0:	1a18      	subs	r0, r3, r0
 801acd2:	b003      	add	sp, #12
 801acd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801acd6:	f811 2b01 	ldrb.w	r2, [r1], #1
 801acda:	f804 2f01 	strb.w	r2, [r4, #1]!
 801acde:	e7ed      	b.n	801acbc <__exponent+0x4c>
 801ace0:	2330      	movs	r3, #48	; 0x30
 801ace2:	3130      	adds	r1, #48	; 0x30
 801ace4:	7083      	strb	r3, [r0, #2]
 801ace6:	70c1      	strb	r1, [r0, #3]
 801ace8:	1d03      	adds	r3, r0, #4
 801acea:	e7f1      	b.n	801acd0 <__exponent+0x60>

0801acec <_printf_float>:
 801acec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801acf0:	ed2d 8b02 	vpush	{d8}
 801acf4:	b08d      	sub	sp, #52	; 0x34
 801acf6:	460c      	mov	r4, r1
 801acf8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801acfc:	4616      	mov	r6, r2
 801acfe:	461f      	mov	r7, r3
 801ad00:	4605      	mov	r5, r0
 801ad02:	f001 fe81 	bl	801ca08 <_localeconv_r>
 801ad06:	f8d0 a000 	ldr.w	sl, [r0]
 801ad0a:	4650      	mov	r0, sl
 801ad0c:	f7e5 fa72 	bl	80001f4 <strlen>
 801ad10:	2300      	movs	r3, #0
 801ad12:	930a      	str	r3, [sp, #40]	; 0x28
 801ad14:	6823      	ldr	r3, [r4, #0]
 801ad16:	9305      	str	r3, [sp, #20]
 801ad18:	f8d8 3000 	ldr.w	r3, [r8]
 801ad1c:	f894 b018 	ldrb.w	fp, [r4, #24]
 801ad20:	3307      	adds	r3, #7
 801ad22:	f023 0307 	bic.w	r3, r3, #7
 801ad26:	f103 0208 	add.w	r2, r3, #8
 801ad2a:	f8c8 2000 	str.w	r2, [r8]
 801ad2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ad32:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801ad36:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801ad3a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801ad3e:	9307      	str	r3, [sp, #28]
 801ad40:	f8cd 8018 	str.w	r8, [sp, #24]
 801ad44:	ee08 0a10 	vmov	s16, r0
 801ad48:	4b9f      	ldr	r3, [pc, #636]	; (801afc8 <_printf_float+0x2dc>)
 801ad4a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801ad4e:	f04f 32ff 	mov.w	r2, #4294967295
 801ad52:	f7e5 ff03 	bl	8000b5c <__aeabi_dcmpun>
 801ad56:	bb88      	cbnz	r0, 801adbc <_printf_float+0xd0>
 801ad58:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801ad5c:	4b9a      	ldr	r3, [pc, #616]	; (801afc8 <_printf_float+0x2dc>)
 801ad5e:	f04f 32ff 	mov.w	r2, #4294967295
 801ad62:	f7e5 fedd 	bl	8000b20 <__aeabi_dcmple>
 801ad66:	bb48      	cbnz	r0, 801adbc <_printf_float+0xd0>
 801ad68:	2200      	movs	r2, #0
 801ad6a:	2300      	movs	r3, #0
 801ad6c:	4640      	mov	r0, r8
 801ad6e:	4649      	mov	r1, r9
 801ad70:	f7e5 fecc 	bl	8000b0c <__aeabi_dcmplt>
 801ad74:	b110      	cbz	r0, 801ad7c <_printf_float+0x90>
 801ad76:	232d      	movs	r3, #45	; 0x2d
 801ad78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801ad7c:	4b93      	ldr	r3, [pc, #588]	; (801afcc <_printf_float+0x2e0>)
 801ad7e:	4894      	ldr	r0, [pc, #592]	; (801afd0 <_printf_float+0x2e4>)
 801ad80:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 801ad84:	bf94      	ite	ls
 801ad86:	4698      	movls	r8, r3
 801ad88:	4680      	movhi	r8, r0
 801ad8a:	2303      	movs	r3, #3
 801ad8c:	6123      	str	r3, [r4, #16]
 801ad8e:	9b05      	ldr	r3, [sp, #20]
 801ad90:	f023 0204 	bic.w	r2, r3, #4
 801ad94:	6022      	str	r2, [r4, #0]
 801ad96:	f04f 0900 	mov.w	r9, #0
 801ad9a:	9700      	str	r7, [sp, #0]
 801ad9c:	4633      	mov	r3, r6
 801ad9e:	aa0b      	add	r2, sp, #44	; 0x2c
 801ada0:	4621      	mov	r1, r4
 801ada2:	4628      	mov	r0, r5
 801ada4:	f000 f9d8 	bl	801b158 <_printf_common>
 801ada8:	3001      	adds	r0, #1
 801adaa:	f040 8090 	bne.w	801aece <_printf_float+0x1e2>
 801adae:	f04f 30ff 	mov.w	r0, #4294967295
 801adb2:	b00d      	add	sp, #52	; 0x34
 801adb4:	ecbd 8b02 	vpop	{d8}
 801adb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801adbc:	4642      	mov	r2, r8
 801adbe:	464b      	mov	r3, r9
 801adc0:	4640      	mov	r0, r8
 801adc2:	4649      	mov	r1, r9
 801adc4:	f7e5 feca 	bl	8000b5c <__aeabi_dcmpun>
 801adc8:	b140      	cbz	r0, 801addc <_printf_float+0xf0>
 801adca:	464b      	mov	r3, r9
 801adcc:	2b00      	cmp	r3, #0
 801adce:	bfbc      	itt	lt
 801add0:	232d      	movlt	r3, #45	; 0x2d
 801add2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801add6:	487f      	ldr	r0, [pc, #508]	; (801afd4 <_printf_float+0x2e8>)
 801add8:	4b7f      	ldr	r3, [pc, #508]	; (801afd8 <_printf_float+0x2ec>)
 801adda:	e7d1      	b.n	801ad80 <_printf_float+0x94>
 801addc:	6863      	ldr	r3, [r4, #4]
 801adde:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801ade2:	9206      	str	r2, [sp, #24]
 801ade4:	1c5a      	adds	r2, r3, #1
 801ade6:	d13f      	bne.n	801ae68 <_printf_float+0x17c>
 801ade8:	2306      	movs	r3, #6
 801adea:	6063      	str	r3, [r4, #4]
 801adec:	9b05      	ldr	r3, [sp, #20]
 801adee:	6861      	ldr	r1, [r4, #4]
 801adf0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801adf4:	2300      	movs	r3, #0
 801adf6:	9303      	str	r3, [sp, #12]
 801adf8:	ab0a      	add	r3, sp, #40	; 0x28
 801adfa:	e9cd b301 	strd	fp, r3, [sp, #4]
 801adfe:	ab09      	add	r3, sp, #36	; 0x24
 801ae00:	ec49 8b10 	vmov	d0, r8, r9
 801ae04:	9300      	str	r3, [sp, #0]
 801ae06:	6022      	str	r2, [r4, #0]
 801ae08:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801ae0c:	4628      	mov	r0, r5
 801ae0e:	f7ff fecd 	bl	801abac <__cvt>
 801ae12:	9b06      	ldr	r3, [sp, #24]
 801ae14:	9909      	ldr	r1, [sp, #36]	; 0x24
 801ae16:	2b47      	cmp	r3, #71	; 0x47
 801ae18:	4680      	mov	r8, r0
 801ae1a:	d108      	bne.n	801ae2e <_printf_float+0x142>
 801ae1c:	1cc8      	adds	r0, r1, #3
 801ae1e:	db02      	blt.n	801ae26 <_printf_float+0x13a>
 801ae20:	6863      	ldr	r3, [r4, #4]
 801ae22:	4299      	cmp	r1, r3
 801ae24:	dd41      	ble.n	801aeaa <_printf_float+0x1be>
 801ae26:	f1ab 0b02 	sub.w	fp, fp, #2
 801ae2a:	fa5f fb8b 	uxtb.w	fp, fp
 801ae2e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801ae32:	d820      	bhi.n	801ae76 <_printf_float+0x18a>
 801ae34:	3901      	subs	r1, #1
 801ae36:	465a      	mov	r2, fp
 801ae38:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801ae3c:	9109      	str	r1, [sp, #36]	; 0x24
 801ae3e:	f7ff ff17 	bl	801ac70 <__exponent>
 801ae42:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801ae44:	1813      	adds	r3, r2, r0
 801ae46:	2a01      	cmp	r2, #1
 801ae48:	4681      	mov	r9, r0
 801ae4a:	6123      	str	r3, [r4, #16]
 801ae4c:	dc02      	bgt.n	801ae54 <_printf_float+0x168>
 801ae4e:	6822      	ldr	r2, [r4, #0]
 801ae50:	07d2      	lsls	r2, r2, #31
 801ae52:	d501      	bpl.n	801ae58 <_printf_float+0x16c>
 801ae54:	3301      	adds	r3, #1
 801ae56:	6123      	str	r3, [r4, #16]
 801ae58:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801ae5c:	2b00      	cmp	r3, #0
 801ae5e:	d09c      	beq.n	801ad9a <_printf_float+0xae>
 801ae60:	232d      	movs	r3, #45	; 0x2d
 801ae62:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801ae66:	e798      	b.n	801ad9a <_printf_float+0xae>
 801ae68:	9a06      	ldr	r2, [sp, #24]
 801ae6a:	2a47      	cmp	r2, #71	; 0x47
 801ae6c:	d1be      	bne.n	801adec <_printf_float+0x100>
 801ae6e:	2b00      	cmp	r3, #0
 801ae70:	d1bc      	bne.n	801adec <_printf_float+0x100>
 801ae72:	2301      	movs	r3, #1
 801ae74:	e7b9      	b.n	801adea <_printf_float+0xfe>
 801ae76:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801ae7a:	d118      	bne.n	801aeae <_printf_float+0x1c2>
 801ae7c:	2900      	cmp	r1, #0
 801ae7e:	6863      	ldr	r3, [r4, #4]
 801ae80:	dd0b      	ble.n	801ae9a <_printf_float+0x1ae>
 801ae82:	6121      	str	r1, [r4, #16]
 801ae84:	b913      	cbnz	r3, 801ae8c <_printf_float+0x1a0>
 801ae86:	6822      	ldr	r2, [r4, #0]
 801ae88:	07d0      	lsls	r0, r2, #31
 801ae8a:	d502      	bpl.n	801ae92 <_printf_float+0x1a6>
 801ae8c:	3301      	adds	r3, #1
 801ae8e:	440b      	add	r3, r1
 801ae90:	6123      	str	r3, [r4, #16]
 801ae92:	65a1      	str	r1, [r4, #88]	; 0x58
 801ae94:	f04f 0900 	mov.w	r9, #0
 801ae98:	e7de      	b.n	801ae58 <_printf_float+0x16c>
 801ae9a:	b913      	cbnz	r3, 801aea2 <_printf_float+0x1b6>
 801ae9c:	6822      	ldr	r2, [r4, #0]
 801ae9e:	07d2      	lsls	r2, r2, #31
 801aea0:	d501      	bpl.n	801aea6 <_printf_float+0x1ba>
 801aea2:	3302      	adds	r3, #2
 801aea4:	e7f4      	b.n	801ae90 <_printf_float+0x1a4>
 801aea6:	2301      	movs	r3, #1
 801aea8:	e7f2      	b.n	801ae90 <_printf_float+0x1a4>
 801aeaa:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801aeae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801aeb0:	4299      	cmp	r1, r3
 801aeb2:	db05      	blt.n	801aec0 <_printf_float+0x1d4>
 801aeb4:	6823      	ldr	r3, [r4, #0]
 801aeb6:	6121      	str	r1, [r4, #16]
 801aeb8:	07d8      	lsls	r0, r3, #31
 801aeba:	d5ea      	bpl.n	801ae92 <_printf_float+0x1a6>
 801aebc:	1c4b      	adds	r3, r1, #1
 801aebe:	e7e7      	b.n	801ae90 <_printf_float+0x1a4>
 801aec0:	2900      	cmp	r1, #0
 801aec2:	bfd4      	ite	le
 801aec4:	f1c1 0202 	rsble	r2, r1, #2
 801aec8:	2201      	movgt	r2, #1
 801aeca:	4413      	add	r3, r2
 801aecc:	e7e0      	b.n	801ae90 <_printf_float+0x1a4>
 801aece:	6823      	ldr	r3, [r4, #0]
 801aed0:	055a      	lsls	r2, r3, #21
 801aed2:	d407      	bmi.n	801aee4 <_printf_float+0x1f8>
 801aed4:	6923      	ldr	r3, [r4, #16]
 801aed6:	4642      	mov	r2, r8
 801aed8:	4631      	mov	r1, r6
 801aeda:	4628      	mov	r0, r5
 801aedc:	47b8      	blx	r7
 801aede:	3001      	adds	r0, #1
 801aee0:	d12c      	bne.n	801af3c <_printf_float+0x250>
 801aee2:	e764      	b.n	801adae <_printf_float+0xc2>
 801aee4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801aee8:	f240 80e0 	bls.w	801b0ac <_printf_float+0x3c0>
 801aeec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801aef0:	2200      	movs	r2, #0
 801aef2:	2300      	movs	r3, #0
 801aef4:	f7e5 fe00 	bl	8000af8 <__aeabi_dcmpeq>
 801aef8:	2800      	cmp	r0, #0
 801aefa:	d034      	beq.n	801af66 <_printf_float+0x27a>
 801aefc:	4a37      	ldr	r2, [pc, #220]	; (801afdc <_printf_float+0x2f0>)
 801aefe:	2301      	movs	r3, #1
 801af00:	4631      	mov	r1, r6
 801af02:	4628      	mov	r0, r5
 801af04:	47b8      	blx	r7
 801af06:	3001      	adds	r0, #1
 801af08:	f43f af51 	beq.w	801adae <_printf_float+0xc2>
 801af0c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801af10:	429a      	cmp	r2, r3
 801af12:	db02      	blt.n	801af1a <_printf_float+0x22e>
 801af14:	6823      	ldr	r3, [r4, #0]
 801af16:	07d8      	lsls	r0, r3, #31
 801af18:	d510      	bpl.n	801af3c <_printf_float+0x250>
 801af1a:	ee18 3a10 	vmov	r3, s16
 801af1e:	4652      	mov	r2, sl
 801af20:	4631      	mov	r1, r6
 801af22:	4628      	mov	r0, r5
 801af24:	47b8      	blx	r7
 801af26:	3001      	adds	r0, #1
 801af28:	f43f af41 	beq.w	801adae <_printf_float+0xc2>
 801af2c:	f04f 0800 	mov.w	r8, #0
 801af30:	f104 091a 	add.w	r9, r4, #26
 801af34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801af36:	3b01      	subs	r3, #1
 801af38:	4543      	cmp	r3, r8
 801af3a:	dc09      	bgt.n	801af50 <_printf_float+0x264>
 801af3c:	6823      	ldr	r3, [r4, #0]
 801af3e:	079b      	lsls	r3, r3, #30
 801af40:	f100 8105 	bmi.w	801b14e <_printf_float+0x462>
 801af44:	68e0      	ldr	r0, [r4, #12]
 801af46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801af48:	4298      	cmp	r0, r3
 801af4a:	bfb8      	it	lt
 801af4c:	4618      	movlt	r0, r3
 801af4e:	e730      	b.n	801adb2 <_printf_float+0xc6>
 801af50:	2301      	movs	r3, #1
 801af52:	464a      	mov	r2, r9
 801af54:	4631      	mov	r1, r6
 801af56:	4628      	mov	r0, r5
 801af58:	47b8      	blx	r7
 801af5a:	3001      	adds	r0, #1
 801af5c:	f43f af27 	beq.w	801adae <_printf_float+0xc2>
 801af60:	f108 0801 	add.w	r8, r8, #1
 801af64:	e7e6      	b.n	801af34 <_printf_float+0x248>
 801af66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801af68:	2b00      	cmp	r3, #0
 801af6a:	dc39      	bgt.n	801afe0 <_printf_float+0x2f4>
 801af6c:	4a1b      	ldr	r2, [pc, #108]	; (801afdc <_printf_float+0x2f0>)
 801af6e:	2301      	movs	r3, #1
 801af70:	4631      	mov	r1, r6
 801af72:	4628      	mov	r0, r5
 801af74:	47b8      	blx	r7
 801af76:	3001      	adds	r0, #1
 801af78:	f43f af19 	beq.w	801adae <_printf_float+0xc2>
 801af7c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801af80:	4313      	orrs	r3, r2
 801af82:	d102      	bne.n	801af8a <_printf_float+0x29e>
 801af84:	6823      	ldr	r3, [r4, #0]
 801af86:	07d9      	lsls	r1, r3, #31
 801af88:	d5d8      	bpl.n	801af3c <_printf_float+0x250>
 801af8a:	ee18 3a10 	vmov	r3, s16
 801af8e:	4652      	mov	r2, sl
 801af90:	4631      	mov	r1, r6
 801af92:	4628      	mov	r0, r5
 801af94:	47b8      	blx	r7
 801af96:	3001      	adds	r0, #1
 801af98:	f43f af09 	beq.w	801adae <_printf_float+0xc2>
 801af9c:	f04f 0900 	mov.w	r9, #0
 801afa0:	f104 0a1a 	add.w	sl, r4, #26
 801afa4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801afa6:	425b      	negs	r3, r3
 801afa8:	454b      	cmp	r3, r9
 801afaa:	dc01      	bgt.n	801afb0 <_printf_float+0x2c4>
 801afac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801afae:	e792      	b.n	801aed6 <_printf_float+0x1ea>
 801afb0:	2301      	movs	r3, #1
 801afb2:	4652      	mov	r2, sl
 801afb4:	4631      	mov	r1, r6
 801afb6:	4628      	mov	r0, r5
 801afb8:	47b8      	blx	r7
 801afba:	3001      	adds	r0, #1
 801afbc:	f43f aef7 	beq.w	801adae <_printf_float+0xc2>
 801afc0:	f109 0901 	add.w	r9, r9, #1
 801afc4:	e7ee      	b.n	801afa4 <_printf_float+0x2b8>
 801afc6:	bf00      	nop
 801afc8:	7fefffff 	.word	0x7fefffff
 801afcc:	0806d0a4 	.word	0x0806d0a4
 801afd0:	0806d0a8 	.word	0x0806d0a8
 801afd4:	0806d0b0 	.word	0x0806d0b0
 801afd8:	0806d0ac 	.word	0x0806d0ac
 801afdc:	0806d0b4 	.word	0x0806d0b4
 801afe0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801afe2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801afe4:	429a      	cmp	r2, r3
 801afe6:	bfa8      	it	ge
 801afe8:	461a      	movge	r2, r3
 801afea:	2a00      	cmp	r2, #0
 801afec:	4691      	mov	r9, r2
 801afee:	dc37      	bgt.n	801b060 <_printf_float+0x374>
 801aff0:	f04f 0b00 	mov.w	fp, #0
 801aff4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801aff8:	f104 021a 	add.w	r2, r4, #26
 801affc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801affe:	9305      	str	r3, [sp, #20]
 801b000:	eba3 0309 	sub.w	r3, r3, r9
 801b004:	455b      	cmp	r3, fp
 801b006:	dc33      	bgt.n	801b070 <_printf_float+0x384>
 801b008:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801b00c:	429a      	cmp	r2, r3
 801b00e:	db3b      	blt.n	801b088 <_printf_float+0x39c>
 801b010:	6823      	ldr	r3, [r4, #0]
 801b012:	07da      	lsls	r2, r3, #31
 801b014:	d438      	bmi.n	801b088 <_printf_float+0x39c>
 801b016:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b018:	9a05      	ldr	r2, [sp, #20]
 801b01a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801b01c:	1a9a      	subs	r2, r3, r2
 801b01e:	eba3 0901 	sub.w	r9, r3, r1
 801b022:	4591      	cmp	r9, r2
 801b024:	bfa8      	it	ge
 801b026:	4691      	movge	r9, r2
 801b028:	f1b9 0f00 	cmp.w	r9, #0
 801b02c:	dc35      	bgt.n	801b09a <_printf_float+0x3ae>
 801b02e:	f04f 0800 	mov.w	r8, #0
 801b032:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801b036:	f104 0a1a 	add.w	sl, r4, #26
 801b03a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801b03e:	1a9b      	subs	r3, r3, r2
 801b040:	eba3 0309 	sub.w	r3, r3, r9
 801b044:	4543      	cmp	r3, r8
 801b046:	f77f af79 	ble.w	801af3c <_printf_float+0x250>
 801b04a:	2301      	movs	r3, #1
 801b04c:	4652      	mov	r2, sl
 801b04e:	4631      	mov	r1, r6
 801b050:	4628      	mov	r0, r5
 801b052:	47b8      	blx	r7
 801b054:	3001      	adds	r0, #1
 801b056:	f43f aeaa 	beq.w	801adae <_printf_float+0xc2>
 801b05a:	f108 0801 	add.w	r8, r8, #1
 801b05e:	e7ec      	b.n	801b03a <_printf_float+0x34e>
 801b060:	4613      	mov	r3, r2
 801b062:	4631      	mov	r1, r6
 801b064:	4642      	mov	r2, r8
 801b066:	4628      	mov	r0, r5
 801b068:	47b8      	blx	r7
 801b06a:	3001      	adds	r0, #1
 801b06c:	d1c0      	bne.n	801aff0 <_printf_float+0x304>
 801b06e:	e69e      	b.n	801adae <_printf_float+0xc2>
 801b070:	2301      	movs	r3, #1
 801b072:	4631      	mov	r1, r6
 801b074:	4628      	mov	r0, r5
 801b076:	9205      	str	r2, [sp, #20]
 801b078:	47b8      	blx	r7
 801b07a:	3001      	adds	r0, #1
 801b07c:	f43f ae97 	beq.w	801adae <_printf_float+0xc2>
 801b080:	9a05      	ldr	r2, [sp, #20]
 801b082:	f10b 0b01 	add.w	fp, fp, #1
 801b086:	e7b9      	b.n	801affc <_printf_float+0x310>
 801b088:	ee18 3a10 	vmov	r3, s16
 801b08c:	4652      	mov	r2, sl
 801b08e:	4631      	mov	r1, r6
 801b090:	4628      	mov	r0, r5
 801b092:	47b8      	blx	r7
 801b094:	3001      	adds	r0, #1
 801b096:	d1be      	bne.n	801b016 <_printf_float+0x32a>
 801b098:	e689      	b.n	801adae <_printf_float+0xc2>
 801b09a:	9a05      	ldr	r2, [sp, #20]
 801b09c:	464b      	mov	r3, r9
 801b09e:	4442      	add	r2, r8
 801b0a0:	4631      	mov	r1, r6
 801b0a2:	4628      	mov	r0, r5
 801b0a4:	47b8      	blx	r7
 801b0a6:	3001      	adds	r0, #1
 801b0a8:	d1c1      	bne.n	801b02e <_printf_float+0x342>
 801b0aa:	e680      	b.n	801adae <_printf_float+0xc2>
 801b0ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801b0ae:	2a01      	cmp	r2, #1
 801b0b0:	dc01      	bgt.n	801b0b6 <_printf_float+0x3ca>
 801b0b2:	07db      	lsls	r3, r3, #31
 801b0b4:	d538      	bpl.n	801b128 <_printf_float+0x43c>
 801b0b6:	2301      	movs	r3, #1
 801b0b8:	4642      	mov	r2, r8
 801b0ba:	4631      	mov	r1, r6
 801b0bc:	4628      	mov	r0, r5
 801b0be:	47b8      	blx	r7
 801b0c0:	3001      	adds	r0, #1
 801b0c2:	f43f ae74 	beq.w	801adae <_printf_float+0xc2>
 801b0c6:	ee18 3a10 	vmov	r3, s16
 801b0ca:	4652      	mov	r2, sl
 801b0cc:	4631      	mov	r1, r6
 801b0ce:	4628      	mov	r0, r5
 801b0d0:	47b8      	blx	r7
 801b0d2:	3001      	adds	r0, #1
 801b0d4:	f43f ae6b 	beq.w	801adae <_printf_float+0xc2>
 801b0d8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801b0dc:	2200      	movs	r2, #0
 801b0de:	2300      	movs	r3, #0
 801b0e0:	f7e5 fd0a 	bl	8000af8 <__aeabi_dcmpeq>
 801b0e4:	b9d8      	cbnz	r0, 801b11e <_printf_float+0x432>
 801b0e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b0e8:	f108 0201 	add.w	r2, r8, #1
 801b0ec:	3b01      	subs	r3, #1
 801b0ee:	4631      	mov	r1, r6
 801b0f0:	4628      	mov	r0, r5
 801b0f2:	47b8      	blx	r7
 801b0f4:	3001      	adds	r0, #1
 801b0f6:	d10e      	bne.n	801b116 <_printf_float+0x42a>
 801b0f8:	e659      	b.n	801adae <_printf_float+0xc2>
 801b0fa:	2301      	movs	r3, #1
 801b0fc:	4652      	mov	r2, sl
 801b0fe:	4631      	mov	r1, r6
 801b100:	4628      	mov	r0, r5
 801b102:	47b8      	blx	r7
 801b104:	3001      	adds	r0, #1
 801b106:	f43f ae52 	beq.w	801adae <_printf_float+0xc2>
 801b10a:	f108 0801 	add.w	r8, r8, #1
 801b10e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b110:	3b01      	subs	r3, #1
 801b112:	4543      	cmp	r3, r8
 801b114:	dcf1      	bgt.n	801b0fa <_printf_float+0x40e>
 801b116:	464b      	mov	r3, r9
 801b118:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801b11c:	e6dc      	b.n	801aed8 <_printf_float+0x1ec>
 801b11e:	f04f 0800 	mov.w	r8, #0
 801b122:	f104 0a1a 	add.w	sl, r4, #26
 801b126:	e7f2      	b.n	801b10e <_printf_float+0x422>
 801b128:	2301      	movs	r3, #1
 801b12a:	4642      	mov	r2, r8
 801b12c:	e7df      	b.n	801b0ee <_printf_float+0x402>
 801b12e:	2301      	movs	r3, #1
 801b130:	464a      	mov	r2, r9
 801b132:	4631      	mov	r1, r6
 801b134:	4628      	mov	r0, r5
 801b136:	47b8      	blx	r7
 801b138:	3001      	adds	r0, #1
 801b13a:	f43f ae38 	beq.w	801adae <_printf_float+0xc2>
 801b13e:	f108 0801 	add.w	r8, r8, #1
 801b142:	68e3      	ldr	r3, [r4, #12]
 801b144:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801b146:	1a5b      	subs	r3, r3, r1
 801b148:	4543      	cmp	r3, r8
 801b14a:	dcf0      	bgt.n	801b12e <_printf_float+0x442>
 801b14c:	e6fa      	b.n	801af44 <_printf_float+0x258>
 801b14e:	f04f 0800 	mov.w	r8, #0
 801b152:	f104 0919 	add.w	r9, r4, #25
 801b156:	e7f4      	b.n	801b142 <_printf_float+0x456>

0801b158 <_printf_common>:
 801b158:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b15c:	4616      	mov	r6, r2
 801b15e:	4699      	mov	r9, r3
 801b160:	688a      	ldr	r2, [r1, #8]
 801b162:	690b      	ldr	r3, [r1, #16]
 801b164:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801b168:	4293      	cmp	r3, r2
 801b16a:	bfb8      	it	lt
 801b16c:	4613      	movlt	r3, r2
 801b16e:	6033      	str	r3, [r6, #0]
 801b170:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801b174:	4607      	mov	r7, r0
 801b176:	460c      	mov	r4, r1
 801b178:	b10a      	cbz	r2, 801b17e <_printf_common+0x26>
 801b17a:	3301      	adds	r3, #1
 801b17c:	6033      	str	r3, [r6, #0]
 801b17e:	6823      	ldr	r3, [r4, #0]
 801b180:	0699      	lsls	r1, r3, #26
 801b182:	bf42      	ittt	mi
 801b184:	6833      	ldrmi	r3, [r6, #0]
 801b186:	3302      	addmi	r3, #2
 801b188:	6033      	strmi	r3, [r6, #0]
 801b18a:	6825      	ldr	r5, [r4, #0]
 801b18c:	f015 0506 	ands.w	r5, r5, #6
 801b190:	d106      	bne.n	801b1a0 <_printf_common+0x48>
 801b192:	f104 0a19 	add.w	sl, r4, #25
 801b196:	68e3      	ldr	r3, [r4, #12]
 801b198:	6832      	ldr	r2, [r6, #0]
 801b19a:	1a9b      	subs	r3, r3, r2
 801b19c:	42ab      	cmp	r3, r5
 801b19e:	dc26      	bgt.n	801b1ee <_printf_common+0x96>
 801b1a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801b1a4:	1e13      	subs	r3, r2, #0
 801b1a6:	6822      	ldr	r2, [r4, #0]
 801b1a8:	bf18      	it	ne
 801b1aa:	2301      	movne	r3, #1
 801b1ac:	0692      	lsls	r2, r2, #26
 801b1ae:	d42b      	bmi.n	801b208 <_printf_common+0xb0>
 801b1b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801b1b4:	4649      	mov	r1, r9
 801b1b6:	4638      	mov	r0, r7
 801b1b8:	47c0      	blx	r8
 801b1ba:	3001      	adds	r0, #1
 801b1bc:	d01e      	beq.n	801b1fc <_printf_common+0xa4>
 801b1be:	6823      	ldr	r3, [r4, #0]
 801b1c0:	68e5      	ldr	r5, [r4, #12]
 801b1c2:	6832      	ldr	r2, [r6, #0]
 801b1c4:	f003 0306 	and.w	r3, r3, #6
 801b1c8:	2b04      	cmp	r3, #4
 801b1ca:	bf08      	it	eq
 801b1cc:	1aad      	subeq	r5, r5, r2
 801b1ce:	68a3      	ldr	r3, [r4, #8]
 801b1d0:	6922      	ldr	r2, [r4, #16]
 801b1d2:	bf0c      	ite	eq
 801b1d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801b1d8:	2500      	movne	r5, #0
 801b1da:	4293      	cmp	r3, r2
 801b1dc:	bfc4      	itt	gt
 801b1de:	1a9b      	subgt	r3, r3, r2
 801b1e0:	18ed      	addgt	r5, r5, r3
 801b1e2:	2600      	movs	r6, #0
 801b1e4:	341a      	adds	r4, #26
 801b1e6:	42b5      	cmp	r5, r6
 801b1e8:	d11a      	bne.n	801b220 <_printf_common+0xc8>
 801b1ea:	2000      	movs	r0, #0
 801b1ec:	e008      	b.n	801b200 <_printf_common+0xa8>
 801b1ee:	2301      	movs	r3, #1
 801b1f0:	4652      	mov	r2, sl
 801b1f2:	4649      	mov	r1, r9
 801b1f4:	4638      	mov	r0, r7
 801b1f6:	47c0      	blx	r8
 801b1f8:	3001      	adds	r0, #1
 801b1fa:	d103      	bne.n	801b204 <_printf_common+0xac>
 801b1fc:	f04f 30ff 	mov.w	r0, #4294967295
 801b200:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b204:	3501      	adds	r5, #1
 801b206:	e7c6      	b.n	801b196 <_printf_common+0x3e>
 801b208:	18e1      	adds	r1, r4, r3
 801b20a:	1c5a      	adds	r2, r3, #1
 801b20c:	2030      	movs	r0, #48	; 0x30
 801b20e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801b212:	4422      	add	r2, r4
 801b214:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801b218:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801b21c:	3302      	adds	r3, #2
 801b21e:	e7c7      	b.n	801b1b0 <_printf_common+0x58>
 801b220:	2301      	movs	r3, #1
 801b222:	4622      	mov	r2, r4
 801b224:	4649      	mov	r1, r9
 801b226:	4638      	mov	r0, r7
 801b228:	47c0      	blx	r8
 801b22a:	3001      	adds	r0, #1
 801b22c:	d0e6      	beq.n	801b1fc <_printf_common+0xa4>
 801b22e:	3601      	adds	r6, #1
 801b230:	e7d9      	b.n	801b1e6 <_printf_common+0x8e>
	...

0801b234 <_printf_i>:
 801b234:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801b238:	7e0f      	ldrb	r7, [r1, #24]
 801b23a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801b23c:	2f78      	cmp	r7, #120	; 0x78
 801b23e:	4691      	mov	r9, r2
 801b240:	4680      	mov	r8, r0
 801b242:	460c      	mov	r4, r1
 801b244:	469a      	mov	sl, r3
 801b246:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801b24a:	d807      	bhi.n	801b25c <_printf_i+0x28>
 801b24c:	2f62      	cmp	r7, #98	; 0x62
 801b24e:	d80a      	bhi.n	801b266 <_printf_i+0x32>
 801b250:	2f00      	cmp	r7, #0
 801b252:	f000 80d8 	beq.w	801b406 <_printf_i+0x1d2>
 801b256:	2f58      	cmp	r7, #88	; 0x58
 801b258:	f000 80a3 	beq.w	801b3a2 <_printf_i+0x16e>
 801b25c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801b260:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801b264:	e03a      	b.n	801b2dc <_printf_i+0xa8>
 801b266:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801b26a:	2b15      	cmp	r3, #21
 801b26c:	d8f6      	bhi.n	801b25c <_printf_i+0x28>
 801b26e:	a101      	add	r1, pc, #4	; (adr r1, 801b274 <_printf_i+0x40>)
 801b270:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801b274:	0801b2cd 	.word	0x0801b2cd
 801b278:	0801b2e1 	.word	0x0801b2e1
 801b27c:	0801b25d 	.word	0x0801b25d
 801b280:	0801b25d 	.word	0x0801b25d
 801b284:	0801b25d 	.word	0x0801b25d
 801b288:	0801b25d 	.word	0x0801b25d
 801b28c:	0801b2e1 	.word	0x0801b2e1
 801b290:	0801b25d 	.word	0x0801b25d
 801b294:	0801b25d 	.word	0x0801b25d
 801b298:	0801b25d 	.word	0x0801b25d
 801b29c:	0801b25d 	.word	0x0801b25d
 801b2a0:	0801b3ed 	.word	0x0801b3ed
 801b2a4:	0801b311 	.word	0x0801b311
 801b2a8:	0801b3cf 	.word	0x0801b3cf
 801b2ac:	0801b25d 	.word	0x0801b25d
 801b2b0:	0801b25d 	.word	0x0801b25d
 801b2b4:	0801b40f 	.word	0x0801b40f
 801b2b8:	0801b25d 	.word	0x0801b25d
 801b2bc:	0801b311 	.word	0x0801b311
 801b2c0:	0801b25d 	.word	0x0801b25d
 801b2c4:	0801b25d 	.word	0x0801b25d
 801b2c8:	0801b3d7 	.word	0x0801b3d7
 801b2cc:	682b      	ldr	r3, [r5, #0]
 801b2ce:	1d1a      	adds	r2, r3, #4
 801b2d0:	681b      	ldr	r3, [r3, #0]
 801b2d2:	602a      	str	r2, [r5, #0]
 801b2d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801b2d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801b2dc:	2301      	movs	r3, #1
 801b2de:	e0a3      	b.n	801b428 <_printf_i+0x1f4>
 801b2e0:	6820      	ldr	r0, [r4, #0]
 801b2e2:	6829      	ldr	r1, [r5, #0]
 801b2e4:	0606      	lsls	r6, r0, #24
 801b2e6:	f101 0304 	add.w	r3, r1, #4
 801b2ea:	d50a      	bpl.n	801b302 <_printf_i+0xce>
 801b2ec:	680e      	ldr	r6, [r1, #0]
 801b2ee:	602b      	str	r3, [r5, #0]
 801b2f0:	2e00      	cmp	r6, #0
 801b2f2:	da03      	bge.n	801b2fc <_printf_i+0xc8>
 801b2f4:	232d      	movs	r3, #45	; 0x2d
 801b2f6:	4276      	negs	r6, r6
 801b2f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b2fc:	485e      	ldr	r0, [pc, #376]	; (801b478 <_printf_i+0x244>)
 801b2fe:	230a      	movs	r3, #10
 801b300:	e019      	b.n	801b336 <_printf_i+0x102>
 801b302:	680e      	ldr	r6, [r1, #0]
 801b304:	602b      	str	r3, [r5, #0]
 801b306:	f010 0f40 	tst.w	r0, #64	; 0x40
 801b30a:	bf18      	it	ne
 801b30c:	b236      	sxthne	r6, r6
 801b30e:	e7ef      	b.n	801b2f0 <_printf_i+0xbc>
 801b310:	682b      	ldr	r3, [r5, #0]
 801b312:	6820      	ldr	r0, [r4, #0]
 801b314:	1d19      	adds	r1, r3, #4
 801b316:	6029      	str	r1, [r5, #0]
 801b318:	0601      	lsls	r1, r0, #24
 801b31a:	d501      	bpl.n	801b320 <_printf_i+0xec>
 801b31c:	681e      	ldr	r6, [r3, #0]
 801b31e:	e002      	b.n	801b326 <_printf_i+0xf2>
 801b320:	0646      	lsls	r6, r0, #25
 801b322:	d5fb      	bpl.n	801b31c <_printf_i+0xe8>
 801b324:	881e      	ldrh	r6, [r3, #0]
 801b326:	4854      	ldr	r0, [pc, #336]	; (801b478 <_printf_i+0x244>)
 801b328:	2f6f      	cmp	r7, #111	; 0x6f
 801b32a:	bf0c      	ite	eq
 801b32c:	2308      	moveq	r3, #8
 801b32e:	230a      	movne	r3, #10
 801b330:	2100      	movs	r1, #0
 801b332:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801b336:	6865      	ldr	r5, [r4, #4]
 801b338:	60a5      	str	r5, [r4, #8]
 801b33a:	2d00      	cmp	r5, #0
 801b33c:	bfa2      	ittt	ge
 801b33e:	6821      	ldrge	r1, [r4, #0]
 801b340:	f021 0104 	bicge.w	r1, r1, #4
 801b344:	6021      	strge	r1, [r4, #0]
 801b346:	b90e      	cbnz	r6, 801b34c <_printf_i+0x118>
 801b348:	2d00      	cmp	r5, #0
 801b34a:	d04d      	beq.n	801b3e8 <_printf_i+0x1b4>
 801b34c:	4615      	mov	r5, r2
 801b34e:	fbb6 f1f3 	udiv	r1, r6, r3
 801b352:	fb03 6711 	mls	r7, r3, r1, r6
 801b356:	5dc7      	ldrb	r7, [r0, r7]
 801b358:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801b35c:	4637      	mov	r7, r6
 801b35e:	42bb      	cmp	r3, r7
 801b360:	460e      	mov	r6, r1
 801b362:	d9f4      	bls.n	801b34e <_printf_i+0x11a>
 801b364:	2b08      	cmp	r3, #8
 801b366:	d10b      	bne.n	801b380 <_printf_i+0x14c>
 801b368:	6823      	ldr	r3, [r4, #0]
 801b36a:	07de      	lsls	r6, r3, #31
 801b36c:	d508      	bpl.n	801b380 <_printf_i+0x14c>
 801b36e:	6923      	ldr	r3, [r4, #16]
 801b370:	6861      	ldr	r1, [r4, #4]
 801b372:	4299      	cmp	r1, r3
 801b374:	bfde      	ittt	le
 801b376:	2330      	movle	r3, #48	; 0x30
 801b378:	f805 3c01 	strble.w	r3, [r5, #-1]
 801b37c:	f105 35ff 	addle.w	r5, r5, #4294967295
 801b380:	1b52      	subs	r2, r2, r5
 801b382:	6122      	str	r2, [r4, #16]
 801b384:	f8cd a000 	str.w	sl, [sp]
 801b388:	464b      	mov	r3, r9
 801b38a:	aa03      	add	r2, sp, #12
 801b38c:	4621      	mov	r1, r4
 801b38e:	4640      	mov	r0, r8
 801b390:	f7ff fee2 	bl	801b158 <_printf_common>
 801b394:	3001      	adds	r0, #1
 801b396:	d14c      	bne.n	801b432 <_printf_i+0x1fe>
 801b398:	f04f 30ff 	mov.w	r0, #4294967295
 801b39c:	b004      	add	sp, #16
 801b39e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b3a2:	4835      	ldr	r0, [pc, #212]	; (801b478 <_printf_i+0x244>)
 801b3a4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801b3a8:	6829      	ldr	r1, [r5, #0]
 801b3aa:	6823      	ldr	r3, [r4, #0]
 801b3ac:	f851 6b04 	ldr.w	r6, [r1], #4
 801b3b0:	6029      	str	r1, [r5, #0]
 801b3b2:	061d      	lsls	r5, r3, #24
 801b3b4:	d514      	bpl.n	801b3e0 <_printf_i+0x1ac>
 801b3b6:	07df      	lsls	r7, r3, #31
 801b3b8:	bf44      	itt	mi
 801b3ba:	f043 0320 	orrmi.w	r3, r3, #32
 801b3be:	6023      	strmi	r3, [r4, #0]
 801b3c0:	b91e      	cbnz	r6, 801b3ca <_printf_i+0x196>
 801b3c2:	6823      	ldr	r3, [r4, #0]
 801b3c4:	f023 0320 	bic.w	r3, r3, #32
 801b3c8:	6023      	str	r3, [r4, #0]
 801b3ca:	2310      	movs	r3, #16
 801b3cc:	e7b0      	b.n	801b330 <_printf_i+0xfc>
 801b3ce:	6823      	ldr	r3, [r4, #0]
 801b3d0:	f043 0320 	orr.w	r3, r3, #32
 801b3d4:	6023      	str	r3, [r4, #0]
 801b3d6:	2378      	movs	r3, #120	; 0x78
 801b3d8:	4828      	ldr	r0, [pc, #160]	; (801b47c <_printf_i+0x248>)
 801b3da:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801b3de:	e7e3      	b.n	801b3a8 <_printf_i+0x174>
 801b3e0:	0659      	lsls	r1, r3, #25
 801b3e2:	bf48      	it	mi
 801b3e4:	b2b6      	uxthmi	r6, r6
 801b3e6:	e7e6      	b.n	801b3b6 <_printf_i+0x182>
 801b3e8:	4615      	mov	r5, r2
 801b3ea:	e7bb      	b.n	801b364 <_printf_i+0x130>
 801b3ec:	682b      	ldr	r3, [r5, #0]
 801b3ee:	6826      	ldr	r6, [r4, #0]
 801b3f0:	6961      	ldr	r1, [r4, #20]
 801b3f2:	1d18      	adds	r0, r3, #4
 801b3f4:	6028      	str	r0, [r5, #0]
 801b3f6:	0635      	lsls	r5, r6, #24
 801b3f8:	681b      	ldr	r3, [r3, #0]
 801b3fa:	d501      	bpl.n	801b400 <_printf_i+0x1cc>
 801b3fc:	6019      	str	r1, [r3, #0]
 801b3fe:	e002      	b.n	801b406 <_printf_i+0x1d2>
 801b400:	0670      	lsls	r0, r6, #25
 801b402:	d5fb      	bpl.n	801b3fc <_printf_i+0x1c8>
 801b404:	8019      	strh	r1, [r3, #0]
 801b406:	2300      	movs	r3, #0
 801b408:	6123      	str	r3, [r4, #16]
 801b40a:	4615      	mov	r5, r2
 801b40c:	e7ba      	b.n	801b384 <_printf_i+0x150>
 801b40e:	682b      	ldr	r3, [r5, #0]
 801b410:	1d1a      	adds	r2, r3, #4
 801b412:	602a      	str	r2, [r5, #0]
 801b414:	681d      	ldr	r5, [r3, #0]
 801b416:	6862      	ldr	r2, [r4, #4]
 801b418:	2100      	movs	r1, #0
 801b41a:	4628      	mov	r0, r5
 801b41c:	f7e4 fef8 	bl	8000210 <memchr>
 801b420:	b108      	cbz	r0, 801b426 <_printf_i+0x1f2>
 801b422:	1b40      	subs	r0, r0, r5
 801b424:	6060      	str	r0, [r4, #4]
 801b426:	6863      	ldr	r3, [r4, #4]
 801b428:	6123      	str	r3, [r4, #16]
 801b42a:	2300      	movs	r3, #0
 801b42c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b430:	e7a8      	b.n	801b384 <_printf_i+0x150>
 801b432:	6923      	ldr	r3, [r4, #16]
 801b434:	462a      	mov	r2, r5
 801b436:	4649      	mov	r1, r9
 801b438:	4640      	mov	r0, r8
 801b43a:	47d0      	blx	sl
 801b43c:	3001      	adds	r0, #1
 801b43e:	d0ab      	beq.n	801b398 <_printf_i+0x164>
 801b440:	6823      	ldr	r3, [r4, #0]
 801b442:	079b      	lsls	r3, r3, #30
 801b444:	d413      	bmi.n	801b46e <_printf_i+0x23a>
 801b446:	68e0      	ldr	r0, [r4, #12]
 801b448:	9b03      	ldr	r3, [sp, #12]
 801b44a:	4298      	cmp	r0, r3
 801b44c:	bfb8      	it	lt
 801b44e:	4618      	movlt	r0, r3
 801b450:	e7a4      	b.n	801b39c <_printf_i+0x168>
 801b452:	2301      	movs	r3, #1
 801b454:	4632      	mov	r2, r6
 801b456:	4649      	mov	r1, r9
 801b458:	4640      	mov	r0, r8
 801b45a:	47d0      	blx	sl
 801b45c:	3001      	adds	r0, #1
 801b45e:	d09b      	beq.n	801b398 <_printf_i+0x164>
 801b460:	3501      	adds	r5, #1
 801b462:	68e3      	ldr	r3, [r4, #12]
 801b464:	9903      	ldr	r1, [sp, #12]
 801b466:	1a5b      	subs	r3, r3, r1
 801b468:	42ab      	cmp	r3, r5
 801b46a:	dcf2      	bgt.n	801b452 <_printf_i+0x21e>
 801b46c:	e7eb      	b.n	801b446 <_printf_i+0x212>
 801b46e:	2500      	movs	r5, #0
 801b470:	f104 0619 	add.w	r6, r4, #25
 801b474:	e7f5      	b.n	801b462 <_printf_i+0x22e>
 801b476:	bf00      	nop
 801b478:	0806d0b6 	.word	0x0806d0b6
 801b47c:	0806d0c7 	.word	0x0806d0c7

0801b480 <iprintf>:
 801b480:	b40f      	push	{r0, r1, r2, r3}
 801b482:	4b0a      	ldr	r3, [pc, #40]	; (801b4ac <iprintf+0x2c>)
 801b484:	b513      	push	{r0, r1, r4, lr}
 801b486:	681c      	ldr	r4, [r3, #0]
 801b488:	b124      	cbz	r4, 801b494 <iprintf+0x14>
 801b48a:	69a3      	ldr	r3, [r4, #24]
 801b48c:	b913      	cbnz	r3, 801b494 <iprintf+0x14>
 801b48e:	4620      	mov	r0, r4
 801b490:	f001 fa0a 	bl	801c8a8 <__sinit>
 801b494:	ab05      	add	r3, sp, #20
 801b496:	9a04      	ldr	r2, [sp, #16]
 801b498:	68a1      	ldr	r1, [r4, #8]
 801b49a:	9301      	str	r3, [sp, #4]
 801b49c:	4620      	mov	r0, r4
 801b49e:	f001 fed9 	bl	801d254 <_vfiprintf_r>
 801b4a2:	b002      	add	sp, #8
 801b4a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b4a8:	b004      	add	sp, #16
 801b4aa:	4770      	bx	lr
 801b4ac:	200000cc 	.word	0x200000cc

0801b4b0 <_puts_r>:
 801b4b0:	b570      	push	{r4, r5, r6, lr}
 801b4b2:	460e      	mov	r6, r1
 801b4b4:	4605      	mov	r5, r0
 801b4b6:	b118      	cbz	r0, 801b4c0 <_puts_r+0x10>
 801b4b8:	6983      	ldr	r3, [r0, #24]
 801b4ba:	b90b      	cbnz	r3, 801b4c0 <_puts_r+0x10>
 801b4bc:	f001 f9f4 	bl	801c8a8 <__sinit>
 801b4c0:	69ab      	ldr	r3, [r5, #24]
 801b4c2:	68ac      	ldr	r4, [r5, #8]
 801b4c4:	b913      	cbnz	r3, 801b4cc <_puts_r+0x1c>
 801b4c6:	4628      	mov	r0, r5
 801b4c8:	f001 f9ee 	bl	801c8a8 <__sinit>
 801b4cc:	4b2c      	ldr	r3, [pc, #176]	; (801b580 <_puts_r+0xd0>)
 801b4ce:	429c      	cmp	r4, r3
 801b4d0:	d120      	bne.n	801b514 <_puts_r+0x64>
 801b4d2:	686c      	ldr	r4, [r5, #4]
 801b4d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b4d6:	07db      	lsls	r3, r3, #31
 801b4d8:	d405      	bmi.n	801b4e6 <_puts_r+0x36>
 801b4da:	89a3      	ldrh	r3, [r4, #12]
 801b4dc:	0598      	lsls	r0, r3, #22
 801b4de:	d402      	bmi.n	801b4e6 <_puts_r+0x36>
 801b4e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b4e2:	f001 fa96 	bl	801ca12 <__retarget_lock_acquire_recursive>
 801b4e6:	89a3      	ldrh	r3, [r4, #12]
 801b4e8:	0719      	lsls	r1, r3, #28
 801b4ea:	d51d      	bpl.n	801b528 <_puts_r+0x78>
 801b4ec:	6923      	ldr	r3, [r4, #16]
 801b4ee:	b1db      	cbz	r3, 801b528 <_puts_r+0x78>
 801b4f0:	3e01      	subs	r6, #1
 801b4f2:	68a3      	ldr	r3, [r4, #8]
 801b4f4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801b4f8:	3b01      	subs	r3, #1
 801b4fa:	60a3      	str	r3, [r4, #8]
 801b4fc:	bb39      	cbnz	r1, 801b54e <_puts_r+0x9e>
 801b4fe:	2b00      	cmp	r3, #0
 801b500:	da38      	bge.n	801b574 <_puts_r+0xc4>
 801b502:	4622      	mov	r2, r4
 801b504:	210a      	movs	r1, #10
 801b506:	4628      	mov	r0, r5
 801b508:	f000 f95a 	bl	801b7c0 <__swbuf_r>
 801b50c:	3001      	adds	r0, #1
 801b50e:	d011      	beq.n	801b534 <_puts_r+0x84>
 801b510:	250a      	movs	r5, #10
 801b512:	e011      	b.n	801b538 <_puts_r+0x88>
 801b514:	4b1b      	ldr	r3, [pc, #108]	; (801b584 <_puts_r+0xd4>)
 801b516:	429c      	cmp	r4, r3
 801b518:	d101      	bne.n	801b51e <_puts_r+0x6e>
 801b51a:	68ac      	ldr	r4, [r5, #8]
 801b51c:	e7da      	b.n	801b4d4 <_puts_r+0x24>
 801b51e:	4b1a      	ldr	r3, [pc, #104]	; (801b588 <_puts_r+0xd8>)
 801b520:	429c      	cmp	r4, r3
 801b522:	bf08      	it	eq
 801b524:	68ec      	ldreq	r4, [r5, #12]
 801b526:	e7d5      	b.n	801b4d4 <_puts_r+0x24>
 801b528:	4621      	mov	r1, r4
 801b52a:	4628      	mov	r0, r5
 801b52c:	f000 f99a 	bl	801b864 <__swsetup_r>
 801b530:	2800      	cmp	r0, #0
 801b532:	d0dd      	beq.n	801b4f0 <_puts_r+0x40>
 801b534:	f04f 35ff 	mov.w	r5, #4294967295
 801b538:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b53a:	07da      	lsls	r2, r3, #31
 801b53c:	d405      	bmi.n	801b54a <_puts_r+0x9a>
 801b53e:	89a3      	ldrh	r3, [r4, #12]
 801b540:	059b      	lsls	r3, r3, #22
 801b542:	d402      	bmi.n	801b54a <_puts_r+0x9a>
 801b544:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b546:	f001 fa65 	bl	801ca14 <__retarget_lock_release_recursive>
 801b54a:	4628      	mov	r0, r5
 801b54c:	bd70      	pop	{r4, r5, r6, pc}
 801b54e:	2b00      	cmp	r3, #0
 801b550:	da04      	bge.n	801b55c <_puts_r+0xac>
 801b552:	69a2      	ldr	r2, [r4, #24]
 801b554:	429a      	cmp	r2, r3
 801b556:	dc06      	bgt.n	801b566 <_puts_r+0xb6>
 801b558:	290a      	cmp	r1, #10
 801b55a:	d004      	beq.n	801b566 <_puts_r+0xb6>
 801b55c:	6823      	ldr	r3, [r4, #0]
 801b55e:	1c5a      	adds	r2, r3, #1
 801b560:	6022      	str	r2, [r4, #0]
 801b562:	7019      	strb	r1, [r3, #0]
 801b564:	e7c5      	b.n	801b4f2 <_puts_r+0x42>
 801b566:	4622      	mov	r2, r4
 801b568:	4628      	mov	r0, r5
 801b56a:	f000 f929 	bl	801b7c0 <__swbuf_r>
 801b56e:	3001      	adds	r0, #1
 801b570:	d1bf      	bne.n	801b4f2 <_puts_r+0x42>
 801b572:	e7df      	b.n	801b534 <_puts_r+0x84>
 801b574:	6823      	ldr	r3, [r4, #0]
 801b576:	250a      	movs	r5, #10
 801b578:	1c5a      	adds	r2, r3, #1
 801b57a:	6022      	str	r2, [r4, #0]
 801b57c:	701d      	strb	r5, [r3, #0]
 801b57e:	e7db      	b.n	801b538 <_puts_r+0x88>
 801b580:	0806d220 	.word	0x0806d220
 801b584:	0806d240 	.word	0x0806d240
 801b588:	0806d200 	.word	0x0806d200

0801b58c <puts>:
 801b58c:	4b02      	ldr	r3, [pc, #8]	; (801b598 <puts+0xc>)
 801b58e:	4601      	mov	r1, r0
 801b590:	6818      	ldr	r0, [r3, #0]
 801b592:	f7ff bf8d 	b.w	801b4b0 <_puts_r>
 801b596:	bf00      	nop
 801b598:	200000cc 	.word	0x200000cc

0801b59c <rand>:
 801b59c:	4b16      	ldr	r3, [pc, #88]	; (801b5f8 <rand+0x5c>)
 801b59e:	b510      	push	{r4, lr}
 801b5a0:	681c      	ldr	r4, [r3, #0]
 801b5a2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801b5a4:	b9b3      	cbnz	r3, 801b5d4 <rand+0x38>
 801b5a6:	2018      	movs	r0, #24
 801b5a8:	f7ff f9dc 	bl	801a964 <malloc>
 801b5ac:	63a0      	str	r0, [r4, #56]	; 0x38
 801b5ae:	b928      	cbnz	r0, 801b5bc <rand+0x20>
 801b5b0:	4602      	mov	r2, r0
 801b5b2:	4b12      	ldr	r3, [pc, #72]	; (801b5fc <rand+0x60>)
 801b5b4:	4812      	ldr	r0, [pc, #72]	; (801b600 <rand+0x64>)
 801b5b6:	214e      	movs	r1, #78	; 0x4e
 801b5b8:	f000 f9c2 	bl	801b940 <__assert_func>
 801b5bc:	4a11      	ldr	r2, [pc, #68]	; (801b604 <rand+0x68>)
 801b5be:	4b12      	ldr	r3, [pc, #72]	; (801b608 <rand+0x6c>)
 801b5c0:	e9c0 2300 	strd	r2, r3, [r0]
 801b5c4:	4b11      	ldr	r3, [pc, #68]	; (801b60c <rand+0x70>)
 801b5c6:	6083      	str	r3, [r0, #8]
 801b5c8:	230b      	movs	r3, #11
 801b5ca:	8183      	strh	r3, [r0, #12]
 801b5cc:	2201      	movs	r2, #1
 801b5ce:	2300      	movs	r3, #0
 801b5d0:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801b5d4:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 801b5d6:	4a0e      	ldr	r2, [pc, #56]	; (801b610 <rand+0x74>)
 801b5d8:	6920      	ldr	r0, [r4, #16]
 801b5da:	6963      	ldr	r3, [r4, #20]
 801b5dc:	490d      	ldr	r1, [pc, #52]	; (801b614 <rand+0x78>)
 801b5de:	4342      	muls	r2, r0
 801b5e0:	fb01 2203 	mla	r2, r1, r3, r2
 801b5e4:	fba0 0101 	umull	r0, r1, r0, r1
 801b5e8:	1c43      	adds	r3, r0, #1
 801b5ea:	eb42 0001 	adc.w	r0, r2, r1
 801b5ee:	e9c4 3004 	strd	r3, r0, [r4, #16]
 801b5f2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801b5f6:	bd10      	pop	{r4, pc}
 801b5f8:	200000cc 	.word	0x200000cc
 801b5fc:	0806d0d8 	.word	0x0806d0d8
 801b600:	0806d0ef 	.word	0x0806d0ef
 801b604:	abcd330e 	.word	0xabcd330e
 801b608:	e66d1234 	.word	0xe66d1234
 801b60c:	0005deec 	.word	0x0005deec
 801b610:	5851f42d 	.word	0x5851f42d
 801b614:	4c957f2d 	.word	0x4c957f2d

0801b618 <_sbrk_r>:
 801b618:	b538      	push	{r3, r4, r5, lr}
 801b61a:	4d06      	ldr	r5, [pc, #24]	; (801b634 <_sbrk_r+0x1c>)
 801b61c:	2300      	movs	r3, #0
 801b61e:	4604      	mov	r4, r0
 801b620:	4608      	mov	r0, r1
 801b622:	602b      	str	r3, [r5, #0]
 801b624:	f7e8 fe88 	bl	8004338 <_sbrk>
 801b628:	1c43      	adds	r3, r0, #1
 801b62a:	d102      	bne.n	801b632 <_sbrk_r+0x1a>
 801b62c:	682b      	ldr	r3, [r5, #0]
 801b62e:	b103      	cbz	r3, 801b632 <_sbrk_r+0x1a>
 801b630:	6023      	str	r3, [r4, #0]
 801b632:	bd38      	pop	{r3, r4, r5, pc}
 801b634:	20013d18 	.word	0x20013d18

0801b638 <strcpy>:
 801b638:	4603      	mov	r3, r0
 801b63a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801b63e:	f803 2b01 	strb.w	r2, [r3], #1
 801b642:	2a00      	cmp	r2, #0
 801b644:	d1f9      	bne.n	801b63a <strcpy+0x2>
 801b646:	4770      	bx	lr

0801b648 <strncmp>:
 801b648:	b510      	push	{r4, lr}
 801b64a:	b17a      	cbz	r2, 801b66c <strncmp+0x24>
 801b64c:	4603      	mov	r3, r0
 801b64e:	3901      	subs	r1, #1
 801b650:	1884      	adds	r4, r0, r2
 801b652:	f813 0b01 	ldrb.w	r0, [r3], #1
 801b656:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801b65a:	4290      	cmp	r0, r2
 801b65c:	d101      	bne.n	801b662 <strncmp+0x1a>
 801b65e:	42a3      	cmp	r3, r4
 801b660:	d101      	bne.n	801b666 <strncmp+0x1e>
 801b662:	1a80      	subs	r0, r0, r2
 801b664:	bd10      	pop	{r4, pc}
 801b666:	2800      	cmp	r0, #0
 801b668:	d1f3      	bne.n	801b652 <strncmp+0xa>
 801b66a:	e7fa      	b.n	801b662 <strncmp+0x1a>
 801b66c:	4610      	mov	r0, r2
 801b66e:	e7f9      	b.n	801b664 <strncmp+0x1c>

0801b670 <strncpy>:
 801b670:	b510      	push	{r4, lr}
 801b672:	3901      	subs	r1, #1
 801b674:	4603      	mov	r3, r0
 801b676:	b132      	cbz	r2, 801b686 <strncpy+0x16>
 801b678:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801b67c:	f803 4b01 	strb.w	r4, [r3], #1
 801b680:	3a01      	subs	r2, #1
 801b682:	2c00      	cmp	r4, #0
 801b684:	d1f7      	bne.n	801b676 <strncpy+0x6>
 801b686:	441a      	add	r2, r3
 801b688:	2100      	movs	r1, #0
 801b68a:	4293      	cmp	r3, r2
 801b68c:	d100      	bne.n	801b690 <strncpy+0x20>
 801b68e:	bd10      	pop	{r4, pc}
 801b690:	f803 1b01 	strb.w	r1, [r3], #1
 801b694:	e7f9      	b.n	801b68a <strncpy+0x1a>
	...

0801b698 <_strtoul_l.constprop.0>:
 801b698:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b69c:	4f36      	ldr	r7, [pc, #216]	; (801b778 <_strtoul_l.constprop.0+0xe0>)
 801b69e:	4686      	mov	lr, r0
 801b6a0:	460d      	mov	r5, r1
 801b6a2:	4628      	mov	r0, r5
 801b6a4:	f815 4b01 	ldrb.w	r4, [r5], #1
 801b6a8:	5de6      	ldrb	r6, [r4, r7]
 801b6aa:	f016 0608 	ands.w	r6, r6, #8
 801b6ae:	d1f8      	bne.n	801b6a2 <_strtoul_l.constprop.0+0xa>
 801b6b0:	2c2d      	cmp	r4, #45	; 0x2d
 801b6b2:	d12f      	bne.n	801b714 <_strtoul_l.constprop.0+0x7c>
 801b6b4:	782c      	ldrb	r4, [r5, #0]
 801b6b6:	2601      	movs	r6, #1
 801b6b8:	1c85      	adds	r5, r0, #2
 801b6ba:	2b00      	cmp	r3, #0
 801b6bc:	d057      	beq.n	801b76e <_strtoul_l.constprop.0+0xd6>
 801b6be:	2b10      	cmp	r3, #16
 801b6c0:	d109      	bne.n	801b6d6 <_strtoul_l.constprop.0+0x3e>
 801b6c2:	2c30      	cmp	r4, #48	; 0x30
 801b6c4:	d107      	bne.n	801b6d6 <_strtoul_l.constprop.0+0x3e>
 801b6c6:	7828      	ldrb	r0, [r5, #0]
 801b6c8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 801b6cc:	2858      	cmp	r0, #88	; 0x58
 801b6ce:	d149      	bne.n	801b764 <_strtoul_l.constprop.0+0xcc>
 801b6d0:	786c      	ldrb	r4, [r5, #1]
 801b6d2:	2310      	movs	r3, #16
 801b6d4:	3502      	adds	r5, #2
 801b6d6:	f04f 38ff 	mov.w	r8, #4294967295
 801b6da:	2700      	movs	r7, #0
 801b6dc:	fbb8 f8f3 	udiv	r8, r8, r3
 801b6e0:	fb03 f908 	mul.w	r9, r3, r8
 801b6e4:	ea6f 0909 	mvn.w	r9, r9
 801b6e8:	4638      	mov	r0, r7
 801b6ea:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801b6ee:	f1bc 0f09 	cmp.w	ip, #9
 801b6f2:	d814      	bhi.n	801b71e <_strtoul_l.constprop.0+0x86>
 801b6f4:	4664      	mov	r4, ip
 801b6f6:	42a3      	cmp	r3, r4
 801b6f8:	dd22      	ble.n	801b740 <_strtoul_l.constprop.0+0xa8>
 801b6fa:	2f00      	cmp	r7, #0
 801b6fc:	db1d      	blt.n	801b73a <_strtoul_l.constprop.0+0xa2>
 801b6fe:	4580      	cmp	r8, r0
 801b700:	d31b      	bcc.n	801b73a <_strtoul_l.constprop.0+0xa2>
 801b702:	d101      	bne.n	801b708 <_strtoul_l.constprop.0+0x70>
 801b704:	45a1      	cmp	r9, r4
 801b706:	db18      	blt.n	801b73a <_strtoul_l.constprop.0+0xa2>
 801b708:	fb00 4003 	mla	r0, r0, r3, r4
 801b70c:	2701      	movs	r7, #1
 801b70e:	f815 4b01 	ldrb.w	r4, [r5], #1
 801b712:	e7ea      	b.n	801b6ea <_strtoul_l.constprop.0+0x52>
 801b714:	2c2b      	cmp	r4, #43	; 0x2b
 801b716:	bf04      	itt	eq
 801b718:	782c      	ldrbeq	r4, [r5, #0]
 801b71a:	1c85      	addeq	r5, r0, #2
 801b71c:	e7cd      	b.n	801b6ba <_strtoul_l.constprop.0+0x22>
 801b71e:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801b722:	f1bc 0f19 	cmp.w	ip, #25
 801b726:	d801      	bhi.n	801b72c <_strtoul_l.constprop.0+0x94>
 801b728:	3c37      	subs	r4, #55	; 0x37
 801b72a:	e7e4      	b.n	801b6f6 <_strtoul_l.constprop.0+0x5e>
 801b72c:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801b730:	f1bc 0f19 	cmp.w	ip, #25
 801b734:	d804      	bhi.n	801b740 <_strtoul_l.constprop.0+0xa8>
 801b736:	3c57      	subs	r4, #87	; 0x57
 801b738:	e7dd      	b.n	801b6f6 <_strtoul_l.constprop.0+0x5e>
 801b73a:	f04f 37ff 	mov.w	r7, #4294967295
 801b73e:	e7e6      	b.n	801b70e <_strtoul_l.constprop.0+0x76>
 801b740:	2f00      	cmp	r7, #0
 801b742:	da07      	bge.n	801b754 <_strtoul_l.constprop.0+0xbc>
 801b744:	2322      	movs	r3, #34	; 0x22
 801b746:	f8ce 3000 	str.w	r3, [lr]
 801b74a:	f04f 30ff 	mov.w	r0, #4294967295
 801b74e:	b932      	cbnz	r2, 801b75e <_strtoul_l.constprop.0+0xc6>
 801b750:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b754:	b106      	cbz	r6, 801b758 <_strtoul_l.constprop.0+0xc0>
 801b756:	4240      	negs	r0, r0
 801b758:	2a00      	cmp	r2, #0
 801b75a:	d0f9      	beq.n	801b750 <_strtoul_l.constprop.0+0xb8>
 801b75c:	b107      	cbz	r7, 801b760 <_strtoul_l.constprop.0+0xc8>
 801b75e:	1e69      	subs	r1, r5, #1
 801b760:	6011      	str	r1, [r2, #0]
 801b762:	e7f5      	b.n	801b750 <_strtoul_l.constprop.0+0xb8>
 801b764:	2430      	movs	r4, #48	; 0x30
 801b766:	2b00      	cmp	r3, #0
 801b768:	d1b5      	bne.n	801b6d6 <_strtoul_l.constprop.0+0x3e>
 801b76a:	2308      	movs	r3, #8
 801b76c:	e7b3      	b.n	801b6d6 <_strtoul_l.constprop.0+0x3e>
 801b76e:	2c30      	cmp	r4, #48	; 0x30
 801b770:	d0a9      	beq.n	801b6c6 <_strtoul_l.constprop.0+0x2e>
 801b772:	230a      	movs	r3, #10
 801b774:	e7af      	b.n	801b6d6 <_strtoul_l.constprop.0+0x3e>
 801b776:	bf00      	nop
 801b778:	0806cf9d 	.word	0x0806cf9d

0801b77c <strtoul>:
 801b77c:	4613      	mov	r3, r2
 801b77e:	460a      	mov	r2, r1
 801b780:	4601      	mov	r1, r0
 801b782:	4802      	ldr	r0, [pc, #8]	; (801b78c <strtoul+0x10>)
 801b784:	6800      	ldr	r0, [r0, #0]
 801b786:	f7ff bf87 	b.w	801b698 <_strtoul_l.constprop.0>
 801b78a:	bf00      	nop
 801b78c:	200000cc 	.word	0x200000cc

0801b790 <viprintf>:
 801b790:	b513      	push	{r0, r1, r4, lr}
 801b792:	460b      	mov	r3, r1
 801b794:	4909      	ldr	r1, [pc, #36]	; (801b7bc <viprintf+0x2c>)
 801b796:	680c      	ldr	r4, [r1, #0]
 801b798:	4602      	mov	r2, r0
 801b79a:	b144      	cbz	r4, 801b7ae <viprintf+0x1e>
 801b79c:	69a1      	ldr	r1, [r4, #24]
 801b79e:	b931      	cbnz	r1, 801b7ae <viprintf+0x1e>
 801b7a0:	e9cd 0300 	strd	r0, r3, [sp]
 801b7a4:	4620      	mov	r0, r4
 801b7a6:	f001 f87f 	bl	801c8a8 <__sinit>
 801b7aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 801b7ae:	68a1      	ldr	r1, [r4, #8]
 801b7b0:	4620      	mov	r0, r4
 801b7b2:	b002      	add	sp, #8
 801b7b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b7b8:	f001 bd4c 	b.w	801d254 <_vfiprintf_r>
 801b7bc:	200000cc 	.word	0x200000cc

0801b7c0 <__swbuf_r>:
 801b7c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b7c2:	460e      	mov	r6, r1
 801b7c4:	4614      	mov	r4, r2
 801b7c6:	4605      	mov	r5, r0
 801b7c8:	b118      	cbz	r0, 801b7d2 <__swbuf_r+0x12>
 801b7ca:	6983      	ldr	r3, [r0, #24]
 801b7cc:	b90b      	cbnz	r3, 801b7d2 <__swbuf_r+0x12>
 801b7ce:	f001 f86b 	bl	801c8a8 <__sinit>
 801b7d2:	4b21      	ldr	r3, [pc, #132]	; (801b858 <__swbuf_r+0x98>)
 801b7d4:	429c      	cmp	r4, r3
 801b7d6:	d12b      	bne.n	801b830 <__swbuf_r+0x70>
 801b7d8:	686c      	ldr	r4, [r5, #4]
 801b7da:	69a3      	ldr	r3, [r4, #24]
 801b7dc:	60a3      	str	r3, [r4, #8]
 801b7de:	89a3      	ldrh	r3, [r4, #12]
 801b7e0:	071a      	lsls	r2, r3, #28
 801b7e2:	d52f      	bpl.n	801b844 <__swbuf_r+0x84>
 801b7e4:	6923      	ldr	r3, [r4, #16]
 801b7e6:	b36b      	cbz	r3, 801b844 <__swbuf_r+0x84>
 801b7e8:	6923      	ldr	r3, [r4, #16]
 801b7ea:	6820      	ldr	r0, [r4, #0]
 801b7ec:	1ac0      	subs	r0, r0, r3
 801b7ee:	6963      	ldr	r3, [r4, #20]
 801b7f0:	b2f6      	uxtb	r6, r6
 801b7f2:	4283      	cmp	r3, r0
 801b7f4:	4637      	mov	r7, r6
 801b7f6:	dc04      	bgt.n	801b802 <__swbuf_r+0x42>
 801b7f8:	4621      	mov	r1, r4
 801b7fa:	4628      	mov	r0, r5
 801b7fc:	f000 ffc0 	bl	801c780 <_fflush_r>
 801b800:	bb30      	cbnz	r0, 801b850 <__swbuf_r+0x90>
 801b802:	68a3      	ldr	r3, [r4, #8]
 801b804:	3b01      	subs	r3, #1
 801b806:	60a3      	str	r3, [r4, #8]
 801b808:	6823      	ldr	r3, [r4, #0]
 801b80a:	1c5a      	adds	r2, r3, #1
 801b80c:	6022      	str	r2, [r4, #0]
 801b80e:	701e      	strb	r6, [r3, #0]
 801b810:	6963      	ldr	r3, [r4, #20]
 801b812:	3001      	adds	r0, #1
 801b814:	4283      	cmp	r3, r0
 801b816:	d004      	beq.n	801b822 <__swbuf_r+0x62>
 801b818:	89a3      	ldrh	r3, [r4, #12]
 801b81a:	07db      	lsls	r3, r3, #31
 801b81c:	d506      	bpl.n	801b82c <__swbuf_r+0x6c>
 801b81e:	2e0a      	cmp	r6, #10
 801b820:	d104      	bne.n	801b82c <__swbuf_r+0x6c>
 801b822:	4621      	mov	r1, r4
 801b824:	4628      	mov	r0, r5
 801b826:	f000 ffab 	bl	801c780 <_fflush_r>
 801b82a:	b988      	cbnz	r0, 801b850 <__swbuf_r+0x90>
 801b82c:	4638      	mov	r0, r7
 801b82e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b830:	4b0a      	ldr	r3, [pc, #40]	; (801b85c <__swbuf_r+0x9c>)
 801b832:	429c      	cmp	r4, r3
 801b834:	d101      	bne.n	801b83a <__swbuf_r+0x7a>
 801b836:	68ac      	ldr	r4, [r5, #8]
 801b838:	e7cf      	b.n	801b7da <__swbuf_r+0x1a>
 801b83a:	4b09      	ldr	r3, [pc, #36]	; (801b860 <__swbuf_r+0xa0>)
 801b83c:	429c      	cmp	r4, r3
 801b83e:	bf08      	it	eq
 801b840:	68ec      	ldreq	r4, [r5, #12]
 801b842:	e7ca      	b.n	801b7da <__swbuf_r+0x1a>
 801b844:	4621      	mov	r1, r4
 801b846:	4628      	mov	r0, r5
 801b848:	f000 f80c 	bl	801b864 <__swsetup_r>
 801b84c:	2800      	cmp	r0, #0
 801b84e:	d0cb      	beq.n	801b7e8 <__swbuf_r+0x28>
 801b850:	f04f 37ff 	mov.w	r7, #4294967295
 801b854:	e7ea      	b.n	801b82c <__swbuf_r+0x6c>
 801b856:	bf00      	nop
 801b858:	0806d220 	.word	0x0806d220
 801b85c:	0806d240 	.word	0x0806d240
 801b860:	0806d200 	.word	0x0806d200

0801b864 <__swsetup_r>:
 801b864:	4b32      	ldr	r3, [pc, #200]	; (801b930 <__swsetup_r+0xcc>)
 801b866:	b570      	push	{r4, r5, r6, lr}
 801b868:	681d      	ldr	r5, [r3, #0]
 801b86a:	4606      	mov	r6, r0
 801b86c:	460c      	mov	r4, r1
 801b86e:	b125      	cbz	r5, 801b87a <__swsetup_r+0x16>
 801b870:	69ab      	ldr	r3, [r5, #24]
 801b872:	b913      	cbnz	r3, 801b87a <__swsetup_r+0x16>
 801b874:	4628      	mov	r0, r5
 801b876:	f001 f817 	bl	801c8a8 <__sinit>
 801b87a:	4b2e      	ldr	r3, [pc, #184]	; (801b934 <__swsetup_r+0xd0>)
 801b87c:	429c      	cmp	r4, r3
 801b87e:	d10f      	bne.n	801b8a0 <__swsetup_r+0x3c>
 801b880:	686c      	ldr	r4, [r5, #4]
 801b882:	89a3      	ldrh	r3, [r4, #12]
 801b884:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801b888:	0719      	lsls	r1, r3, #28
 801b88a:	d42c      	bmi.n	801b8e6 <__swsetup_r+0x82>
 801b88c:	06dd      	lsls	r5, r3, #27
 801b88e:	d411      	bmi.n	801b8b4 <__swsetup_r+0x50>
 801b890:	2309      	movs	r3, #9
 801b892:	6033      	str	r3, [r6, #0]
 801b894:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801b898:	81a3      	strh	r3, [r4, #12]
 801b89a:	f04f 30ff 	mov.w	r0, #4294967295
 801b89e:	e03e      	b.n	801b91e <__swsetup_r+0xba>
 801b8a0:	4b25      	ldr	r3, [pc, #148]	; (801b938 <__swsetup_r+0xd4>)
 801b8a2:	429c      	cmp	r4, r3
 801b8a4:	d101      	bne.n	801b8aa <__swsetup_r+0x46>
 801b8a6:	68ac      	ldr	r4, [r5, #8]
 801b8a8:	e7eb      	b.n	801b882 <__swsetup_r+0x1e>
 801b8aa:	4b24      	ldr	r3, [pc, #144]	; (801b93c <__swsetup_r+0xd8>)
 801b8ac:	429c      	cmp	r4, r3
 801b8ae:	bf08      	it	eq
 801b8b0:	68ec      	ldreq	r4, [r5, #12]
 801b8b2:	e7e6      	b.n	801b882 <__swsetup_r+0x1e>
 801b8b4:	0758      	lsls	r0, r3, #29
 801b8b6:	d512      	bpl.n	801b8de <__swsetup_r+0x7a>
 801b8b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b8ba:	b141      	cbz	r1, 801b8ce <__swsetup_r+0x6a>
 801b8bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b8c0:	4299      	cmp	r1, r3
 801b8c2:	d002      	beq.n	801b8ca <__swsetup_r+0x66>
 801b8c4:	4630      	mov	r0, r6
 801b8c6:	f7ff f891 	bl	801a9ec <_free_r>
 801b8ca:	2300      	movs	r3, #0
 801b8cc:	6363      	str	r3, [r4, #52]	; 0x34
 801b8ce:	89a3      	ldrh	r3, [r4, #12]
 801b8d0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801b8d4:	81a3      	strh	r3, [r4, #12]
 801b8d6:	2300      	movs	r3, #0
 801b8d8:	6063      	str	r3, [r4, #4]
 801b8da:	6923      	ldr	r3, [r4, #16]
 801b8dc:	6023      	str	r3, [r4, #0]
 801b8de:	89a3      	ldrh	r3, [r4, #12]
 801b8e0:	f043 0308 	orr.w	r3, r3, #8
 801b8e4:	81a3      	strh	r3, [r4, #12]
 801b8e6:	6923      	ldr	r3, [r4, #16]
 801b8e8:	b94b      	cbnz	r3, 801b8fe <__swsetup_r+0x9a>
 801b8ea:	89a3      	ldrh	r3, [r4, #12]
 801b8ec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801b8f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801b8f4:	d003      	beq.n	801b8fe <__swsetup_r+0x9a>
 801b8f6:	4621      	mov	r1, r4
 801b8f8:	4630      	mov	r0, r6
 801b8fa:	f001 f8b1 	bl	801ca60 <__smakebuf_r>
 801b8fe:	89a0      	ldrh	r0, [r4, #12]
 801b900:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801b904:	f010 0301 	ands.w	r3, r0, #1
 801b908:	d00a      	beq.n	801b920 <__swsetup_r+0xbc>
 801b90a:	2300      	movs	r3, #0
 801b90c:	60a3      	str	r3, [r4, #8]
 801b90e:	6963      	ldr	r3, [r4, #20]
 801b910:	425b      	negs	r3, r3
 801b912:	61a3      	str	r3, [r4, #24]
 801b914:	6923      	ldr	r3, [r4, #16]
 801b916:	b943      	cbnz	r3, 801b92a <__swsetup_r+0xc6>
 801b918:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801b91c:	d1ba      	bne.n	801b894 <__swsetup_r+0x30>
 801b91e:	bd70      	pop	{r4, r5, r6, pc}
 801b920:	0781      	lsls	r1, r0, #30
 801b922:	bf58      	it	pl
 801b924:	6963      	ldrpl	r3, [r4, #20]
 801b926:	60a3      	str	r3, [r4, #8]
 801b928:	e7f4      	b.n	801b914 <__swsetup_r+0xb0>
 801b92a:	2000      	movs	r0, #0
 801b92c:	e7f7      	b.n	801b91e <__swsetup_r+0xba>
 801b92e:	bf00      	nop
 801b930:	200000cc 	.word	0x200000cc
 801b934:	0806d220 	.word	0x0806d220
 801b938:	0806d240 	.word	0x0806d240
 801b93c:	0806d200 	.word	0x0806d200

0801b940 <__assert_func>:
 801b940:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801b942:	4614      	mov	r4, r2
 801b944:	461a      	mov	r2, r3
 801b946:	4b09      	ldr	r3, [pc, #36]	; (801b96c <__assert_func+0x2c>)
 801b948:	681b      	ldr	r3, [r3, #0]
 801b94a:	4605      	mov	r5, r0
 801b94c:	68d8      	ldr	r0, [r3, #12]
 801b94e:	b14c      	cbz	r4, 801b964 <__assert_func+0x24>
 801b950:	4b07      	ldr	r3, [pc, #28]	; (801b970 <__assert_func+0x30>)
 801b952:	9100      	str	r1, [sp, #0]
 801b954:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801b958:	4906      	ldr	r1, [pc, #24]	; (801b974 <__assert_func+0x34>)
 801b95a:	462b      	mov	r3, r5
 801b95c:	f001 f822 	bl	801c9a4 <fiprintf>
 801b960:	f001 fdfe 	bl	801d560 <abort>
 801b964:	4b04      	ldr	r3, [pc, #16]	; (801b978 <__assert_func+0x38>)
 801b966:	461c      	mov	r4, r3
 801b968:	e7f3      	b.n	801b952 <__assert_func+0x12>
 801b96a:	bf00      	nop
 801b96c:	200000cc 	.word	0x200000cc
 801b970:	0806d14a 	.word	0x0806d14a
 801b974:	0806d157 	.word	0x0806d157
 801b978:	0806d185 	.word	0x0806d185

0801b97c <quorem>:
 801b97c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b980:	6903      	ldr	r3, [r0, #16]
 801b982:	690c      	ldr	r4, [r1, #16]
 801b984:	42a3      	cmp	r3, r4
 801b986:	4607      	mov	r7, r0
 801b988:	f2c0 8081 	blt.w	801ba8e <quorem+0x112>
 801b98c:	3c01      	subs	r4, #1
 801b98e:	f101 0814 	add.w	r8, r1, #20
 801b992:	f100 0514 	add.w	r5, r0, #20
 801b996:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801b99a:	9301      	str	r3, [sp, #4]
 801b99c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801b9a0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801b9a4:	3301      	adds	r3, #1
 801b9a6:	429a      	cmp	r2, r3
 801b9a8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801b9ac:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801b9b0:	fbb2 f6f3 	udiv	r6, r2, r3
 801b9b4:	d331      	bcc.n	801ba1a <quorem+0x9e>
 801b9b6:	f04f 0e00 	mov.w	lr, #0
 801b9ba:	4640      	mov	r0, r8
 801b9bc:	46ac      	mov	ip, r5
 801b9be:	46f2      	mov	sl, lr
 801b9c0:	f850 2b04 	ldr.w	r2, [r0], #4
 801b9c4:	b293      	uxth	r3, r2
 801b9c6:	fb06 e303 	mla	r3, r6, r3, lr
 801b9ca:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801b9ce:	b29b      	uxth	r3, r3
 801b9d0:	ebaa 0303 	sub.w	r3, sl, r3
 801b9d4:	f8dc a000 	ldr.w	sl, [ip]
 801b9d8:	0c12      	lsrs	r2, r2, #16
 801b9da:	fa13 f38a 	uxtah	r3, r3, sl
 801b9de:	fb06 e202 	mla	r2, r6, r2, lr
 801b9e2:	9300      	str	r3, [sp, #0]
 801b9e4:	9b00      	ldr	r3, [sp, #0]
 801b9e6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801b9ea:	b292      	uxth	r2, r2
 801b9ec:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801b9f0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801b9f4:	f8bd 3000 	ldrh.w	r3, [sp]
 801b9f8:	4581      	cmp	r9, r0
 801b9fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801b9fe:	f84c 3b04 	str.w	r3, [ip], #4
 801ba02:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801ba06:	d2db      	bcs.n	801b9c0 <quorem+0x44>
 801ba08:	f855 300b 	ldr.w	r3, [r5, fp]
 801ba0c:	b92b      	cbnz	r3, 801ba1a <quorem+0x9e>
 801ba0e:	9b01      	ldr	r3, [sp, #4]
 801ba10:	3b04      	subs	r3, #4
 801ba12:	429d      	cmp	r5, r3
 801ba14:	461a      	mov	r2, r3
 801ba16:	d32e      	bcc.n	801ba76 <quorem+0xfa>
 801ba18:	613c      	str	r4, [r7, #16]
 801ba1a:	4638      	mov	r0, r7
 801ba1c:	f001 faee 	bl	801cffc <__mcmp>
 801ba20:	2800      	cmp	r0, #0
 801ba22:	db24      	blt.n	801ba6e <quorem+0xf2>
 801ba24:	3601      	adds	r6, #1
 801ba26:	4628      	mov	r0, r5
 801ba28:	f04f 0c00 	mov.w	ip, #0
 801ba2c:	f858 2b04 	ldr.w	r2, [r8], #4
 801ba30:	f8d0 e000 	ldr.w	lr, [r0]
 801ba34:	b293      	uxth	r3, r2
 801ba36:	ebac 0303 	sub.w	r3, ip, r3
 801ba3a:	0c12      	lsrs	r2, r2, #16
 801ba3c:	fa13 f38e 	uxtah	r3, r3, lr
 801ba40:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801ba44:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801ba48:	b29b      	uxth	r3, r3
 801ba4a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801ba4e:	45c1      	cmp	r9, r8
 801ba50:	f840 3b04 	str.w	r3, [r0], #4
 801ba54:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801ba58:	d2e8      	bcs.n	801ba2c <quorem+0xb0>
 801ba5a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801ba5e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801ba62:	b922      	cbnz	r2, 801ba6e <quorem+0xf2>
 801ba64:	3b04      	subs	r3, #4
 801ba66:	429d      	cmp	r5, r3
 801ba68:	461a      	mov	r2, r3
 801ba6a:	d30a      	bcc.n	801ba82 <quorem+0x106>
 801ba6c:	613c      	str	r4, [r7, #16]
 801ba6e:	4630      	mov	r0, r6
 801ba70:	b003      	add	sp, #12
 801ba72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ba76:	6812      	ldr	r2, [r2, #0]
 801ba78:	3b04      	subs	r3, #4
 801ba7a:	2a00      	cmp	r2, #0
 801ba7c:	d1cc      	bne.n	801ba18 <quorem+0x9c>
 801ba7e:	3c01      	subs	r4, #1
 801ba80:	e7c7      	b.n	801ba12 <quorem+0x96>
 801ba82:	6812      	ldr	r2, [r2, #0]
 801ba84:	3b04      	subs	r3, #4
 801ba86:	2a00      	cmp	r2, #0
 801ba88:	d1f0      	bne.n	801ba6c <quorem+0xf0>
 801ba8a:	3c01      	subs	r4, #1
 801ba8c:	e7eb      	b.n	801ba66 <quorem+0xea>
 801ba8e:	2000      	movs	r0, #0
 801ba90:	e7ee      	b.n	801ba70 <quorem+0xf4>
 801ba92:	0000      	movs	r0, r0
 801ba94:	0000      	movs	r0, r0
	...

0801ba98 <_dtoa_r>:
 801ba98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ba9c:	ed2d 8b04 	vpush	{d8-d9}
 801baa0:	ec57 6b10 	vmov	r6, r7, d0
 801baa4:	b093      	sub	sp, #76	; 0x4c
 801baa6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801baa8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801baac:	9106      	str	r1, [sp, #24]
 801baae:	ee10 aa10 	vmov	sl, s0
 801bab2:	4604      	mov	r4, r0
 801bab4:	9209      	str	r2, [sp, #36]	; 0x24
 801bab6:	930c      	str	r3, [sp, #48]	; 0x30
 801bab8:	46bb      	mov	fp, r7
 801baba:	b975      	cbnz	r5, 801bada <_dtoa_r+0x42>
 801babc:	2010      	movs	r0, #16
 801babe:	f7fe ff51 	bl	801a964 <malloc>
 801bac2:	4602      	mov	r2, r0
 801bac4:	6260      	str	r0, [r4, #36]	; 0x24
 801bac6:	b920      	cbnz	r0, 801bad2 <_dtoa_r+0x3a>
 801bac8:	4ba7      	ldr	r3, [pc, #668]	; (801bd68 <_dtoa_r+0x2d0>)
 801baca:	21ea      	movs	r1, #234	; 0xea
 801bacc:	48a7      	ldr	r0, [pc, #668]	; (801bd6c <_dtoa_r+0x2d4>)
 801bace:	f7ff ff37 	bl	801b940 <__assert_func>
 801bad2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801bad6:	6005      	str	r5, [r0, #0]
 801bad8:	60c5      	str	r5, [r0, #12]
 801bada:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801badc:	6819      	ldr	r1, [r3, #0]
 801bade:	b151      	cbz	r1, 801baf6 <_dtoa_r+0x5e>
 801bae0:	685a      	ldr	r2, [r3, #4]
 801bae2:	604a      	str	r2, [r1, #4]
 801bae4:	2301      	movs	r3, #1
 801bae6:	4093      	lsls	r3, r2
 801bae8:	608b      	str	r3, [r1, #8]
 801baea:	4620      	mov	r0, r4
 801baec:	f001 f844 	bl	801cb78 <_Bfree>
 801baf0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801baf2:	2200      	movs	r2, #0
 801baf4:	601a      	str	r2, [r3, #0]
 801baf6:	1e3b      	subs	r3, r7, #0
 801baf8:	bfaa      	itet	ge
 801bafa:	2300      	movge	r3, #0
 801bafc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 801bb00:	f8c8 3000 	strge.w	r3, [r8]
 801bb04:	4b9a      	ldr	r3, [pc, #616]	; (801bd70 <_dtoa_r+0x2d8>)
 801bb06:	bfbc      	itt	lt
 801bb08:	2201      	movlt	r2, #1
 801bb0a:	f8c8 2000 	strlt.w	r2, [r8]
 801bb0e:	ea33 030b 	bics.w	r3, r3, fp
 801bb12:	d11b      	bne.n	801bb4c <_dtoa_r+0xb4>
 801bb14:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801bb16:	f242 730f 	movw	r3, #9999	; 0x270f
 801bb1a:	6013      	str	r3, [r2, #0]
 801bb1c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801bb20:	4333      	orrs	r3, r6
 801bb22:	f000 8592 	beq.w	801c64a <_dtoa_r+0xbb2>
 801bb26:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801bb28:	b963      	cbnz	r3, 801bb44 <_dtoa_r+0xac>
 801bb2a:	4b92      	ldr	r3, [pc, #584]	; (801bd74 <_dtoa_r+0x2dc>)
 801bb2c:	e022      	b.n	801bb74 <_dtoa_r+0xdc>
 801bb2e:	4b92      	ldr	r3, [pc, #584]	; (801bd78 <_dtoa_r+0x2e0>)
 801bb30:	9301      	str	r3, [sp, #4]
 801bb32:	3308      	adds	r3, #8
 801bb34:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801bb36:	6013      	str	r3, [r2, #0]
 801bb38:	9801      	ldr	r0, [sp, #4]
 801bb3a:	b013      	add	sp, #76	; 0x4c
 801bb3c:	ecbd 8b04 	vpop	{d8-d9}
 801bb40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bb44:	4b8b      	ldr	r3, [pc, #556]	; (801bd74 <_dtoa_r+0x2dc>)
 801bb46:	9301      	str	r3, [sp, #4]
 801bb48:	3303      	adds	r3, #3
 801bb4a:	e7f3      	b.n	801bb34 <_dtoa_r+0x9c>
 801bb4c:	2200      	movs	r2, #0
 801bb4e:	2300      	movs	r3, #0
 801bb50:	4650      	mov	r0, sl
 801bb52:	4659      	mov	r1, fp
 801bb54:	f7e4 ffd0 	bl	8000af8 <__aeabi_dcmpeq>
 801bb58:	ec4b ab19 	vmov	d9, sl, fp
 801bb5c:	4680      	mov	r8, r0
 801bb5e:	b158      	cbz	r0, 801bb78 <_dtoa_r+0xe0>
 801bb60:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801bb62:	2301      	movs	r3, #1
 801bb64:	6013      	str	r3, [r2, #0]
 801bb66:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801bb68:	2b00      	cmp	r3, #0
 801bb6a:	f000 856b 	beq.w	801c644 <_dtoa_r+0xbac>
 801bb6e:	4883      	ldr	r0, [pc, #524]	; (801bd7c <_dtoa_r+0x2e4>)
 801bb70:	6018      	str	r0, [r3, #0]
 801bb72:	1e43      	subs	r3, r0, #1
 801bb74:	9301      	str	r3, [sp, #4]
 801bb76:	e7df      	b.n	801bb38 <_dtoa_r+0xa0>
 801bb78:	ec4b ab10 	vmov	d0, sl, fp
 801bb7c:	aa10      	add	r2, sp, #64	; 0x40
 801bb7e:	a911      	add	r1, sp, #68	; 0x44
 801bb80:	4620      	mov	r0, r4
 801bb82:	f001 fae1 	bl	801d148 <__d2b>
 801bb86:	f3cb 550a 	ubfx	r5, fp, #20, #11
 801bb8a:	ee08 0a10 	vmov	s16, r0
 801bb8e:	2d00      	cmp	r5, #0
 801bb90:	f000 8084 	beq.w	801bc9c <_dtoa_r+0x204>
 801bb94:	ee19 3a90 	vmov	r3, s19
 801bb98:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801bb9c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 801bba0:	4656      	mov	r6, sl
 801bba2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801bba6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801bbaa:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 801bbae:	4b74      	ldr	r3, [pc, #464]	; (801bd80 <_dtoa_r+0x2e8>)
 801bbb0:	2200      	movs	r2, #0
 801bbb2:	4630      	mov	r0, r6
 801bbb4:	4639      	mov	r1, r7
 801bbb6:	f7e4 fb7f 	bl	80002b8 <__aeabi_dsub>
 801bbba:	a365      	add	r3, pc, #404	; (adr r3, 801bd50 <_dtoa_r+0x2b8>)
 801bbbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bbc0:	f7e4 fd32 	bl	8000628 <__aeabi_dmul>
 801bbc4:	a364      	add	r3, pc, #400	; (adr r3, 801bd58 <_dtoa_r+0x2c0>)
 801bbc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bbca:	f7e4 fb77 	bl	80002bc <__adddf3>
 801bbce:	4606      	mov	r6, r0
 801bbd0:	4628      	mov	r0, r5
 801bbd2:	460f      	mov	r7, r1
 801bbd4:	f7e4 fcbe 	bl	8000554 <__aeabi_i2d>
 801bbd8:	a361      	add	r3, pc, #388	; (adr r3, 801bd60 <_dtoa_r+0x2c8>)
 801bbda:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bbde:	f7e4 fd23 	bl	8000628 <__aeabi_dmul>
 801bbe2:	4602      	mov	r2, r0
 801bbe4:	460b      	mov	r3, r1
 801bbe6:	4630      	mov	r0, r6
 801bbe8:	4639      	mov	r1, r7
 801bbea:	f7e4 fb67 	bl	80002bc <__adddf3>
 801bbee:	4606      	mov	r6, r0
 801bbf0:	460f      	mov	r7, r1
 801bbf2:	f7e4 ffc9 	bl	8000b88 <__aeabi_d2iz>
 801bbf6:	2200      	movs	r2, #0
 801bbf8:	9000      	str	r0, [sp, #0]
 801bbfa:	2300      	movs	r3, #0
 801bbfc:	4630      	mov	r0, r6
 801bbfe:	4639      	mov	r1, r7
 801bc00:	f7e4 ff84 	bl	8000b0c <__aeabi_dcmplt>
 801bc04:	b150      	cbz	r0, 801bc1c <_dtoa_r+0x184>
 801bc06:	9800      	ldr	r0, [sp, #0]
 801bc08:	f7e4 fca4 	bl	8000554 <__aeabi_i2d>
 801bc0c:	4632      	mov	r2, r6
 801bc0e:	463b      	mov	r3, r7
 801bc10:	f7e4 ff72 	bl	8000af8 <__aeabi_dcmpeq>
 801bc14:	b910      	cbnz	r0, 801bc1c <_dtoa_r+0x184>
 801bc16:	9b00      	ldr	r3, [sp, #0]
 801bc18:	3b01      	subs	r3, #1
 801bc1a:	9300      	str	r3, [sp, #0]
 801bc1c:	9b00      	ldr	r3, [sp, #0]
 801bc1e:	2b16      	cmp	r3, #22
 801bc20:	d85a      	bhi.n	801bcd8 <_dtoa_r+0x240>
 801bc22:	9a00      	ldr	r2, [sp, #0]
 801bc24:	4b57      	ldr	r3, [pc, #348]	; (801bd84 <_dtoa_r+0x2ec>)
 801bc26:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801bc2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bc2e:	ec51 0b19 	vmov	r0, r1, d9
 801bc32:	f7e4 ff6b 	bl	8000b0c <__aeabi_dcmplt>
 801bc36:	2800      	cmp	r0, #0
 801bc38:	d050      	beq.n	801bcdc <_dtoa_r+0x244>
 801bc3a:	9b00      	ldr	r3, [sp, #0]
 801bc3c:	3b01      	subs	r3, #1
 801bc3e:	9300      	str	r3, [sp, #0]
 801bc40:	2300      	movs	r3, #0
 801bc42:	930b      	str	r3, [sp, #44]	; 0x2c
 801bc44:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801bc46:	1b5d      	subs	r5, r3, r5
 801bc48:	1e6b      	subs	r3, r5, #1
 801bc4a:	9305      	str	r3, [sp, #20]
 801bc4c:	bf45      	ittet	mi
 801bc4e:	f1c5 0301 	rsbmi	r3, r5, #1
 801bc52:	9304      	strmi	r3, [sp, #16]
 801bc54:	2300      	movpl	r3, #0
 801bc56:	2300      	movmi	r3, #0
 801bc58:	bf4c      	ite	mi
 801bc5a:	9305      	strmi	r3, [sp, #20]
 801bc5c:	9304      	strpl	r3, [sp, #16]
 801bc5e:	9b00      	ldr	r3, [sp, #0]
 801bc60:	2b00      	cmp	r3, #0
 801bc62:	db3d      	blt.n	801bce0 <_dtoa_r+0x248>
 801bc64:	9b05      	ldr	r3, [sp, #20]
 801bc66:	9a00      	ldr	r2, [sp, #0]
 801bc68:	920a      	str	r2, [sp, #40]	; 0x28
 801bc6a:	4413      	add	r3, r2
 801bc6c:	9305      	str	r3, [sp, #20]
 801bc6e:	2300      	movs	r3, #0
 801bc70:	9307      	str	r3, [sp, #28]
 801bc72:	9b06      	ldr	r3, [sp, #24]
 801bc74:	2b09      	cmp	r3, #9
 801bc76:	f200 8089 	bhi.w	801bd8c <_dtoa_r+0x2f4>
 801bc7a:	2b05      	cmp	r3, #5
 801bc7c:	bfc4      	itt	gt
 801bc7e:	3b04      	subgt	r3, #4
 801bc80:	9306      	strgt	r3, [sp, #24]
 801bc82:	9b06      	ldr	r3, [sp, #24]
 801bc84:	f1a3 0302 	sub.w	r3, r3, #2
 801bc88:	bfcc      	ite	gt
 801bc8a:	2500      	movgt	r5, #0
 801bc8c:	2501      	movle	r5, #1
 801bc8e:	2b03      	cmp	r3, #3
 801bc90:	f200 8087 	bhi.w	801bda2 <_dtoa_r+0x30a>
 801bc94:	e8df f003 	tbb	[pc, r3]
 801bc98:	59383a2d 	.word	0x59383a2d
 801bc9c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 801bca0:	441d      	add	r5, r3
 801bca2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801bca6:	2b20      	cmp	r3, #32
 801bca8:	bfc1      	itttt	gt
 801bcaa:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801bcae:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801bcb2:	fa0b f303 	lslgt.w	r3, fp, r3
 801bcb6:	fa26 f000 	lsrgt.w	r0, r6, r0
 801bcba:	bfda      	itte	le
 801bcbc:	f1c3 0320 	rsble	r3, r3, #32
 801bcc0:	fa06 f003 	lslle.w	r0, r6, r3
 801bcc4:	4318      	orrgt	r0, r3
 801bcc6:	f7e4 fc35 	bl	8000534 <__aeabi_ui2d>
 801bcca:	2301      	movs	r3, #1
 801bccc:	4606      	mov	r6, r0
 801bcce:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801bcd2:	3d01      	subs	r5, #1
 801bcd4:	930e      	str	r3, [sp, #56]	; 0x38
 801bcd6:	e76a      	b.n	801bbae <_dtoa_r+0x116>
 801bcd8:	2301      	movs	r3, #1
 801bcda:	e7b2      	b.n	801bc42 <_dtoa_r+0x1aa>
 801bcdc:	900b      	str	r0, [sp, #44]	; 0x2c
 801bcde:	e7b1      	b.n	801bc44 <_dtoa_r+0x1ac>
 801bce0:	9b04      	ldr	r3, [sp, #16]
 801bce2:	9a00      	ldr	r2, [sp, #0]
 801bce4:	1a9b      	subs	r3, r3, r2
 801bce6:	9304      	str	r3, [sp, #16]
 801bce8:	4253      	negs	r3, r2
 801bcea:	9307      	str	r3, [sp, #28]
 801bcec:	2300      	movs	r3, #0
 801bcee:	930a      	str	r3, [sp, #40]	; 0x28
 801bcf0:	e7bf      	b.n	801bc72 <_dtoa_r+0x1da>
 801bcf2:	2300      	movs	r3, #0
 801bcf4:	9308      	str	r3, [sp, #32]
 801bcf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bcf8:	2b00      	cmp	r3, #0
 801bcfa:	dc55      	bgt.n	801bda8 <_dtoa_r+0x310>
 801bcfc:	2301      	movs	r3, #1
 801bcfe:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801bd02:	461a      	mov	r2, r3
 801bd04:	9209      	str	r2, [sp, #36]	; 0x24
 801bd06:	e00c      	b.n	801bd22 <_dtoa_r+0x28a>
 801bd08:	2301      	movs	r3, #1
 801bd0a:	e7f3      	b.n	801bcf4 <_dtoa_r+0x25c>
 801bd0c:	2300      	movs	r3, #0
 801bd0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801bd10:	9308      	str	r3, [sp, #32]
 801bd12:	9b00      	ldr	r3, [sp, #0]
 801bd14:	4413      	add	r3, r2
 801bd16:	9302      	str	r3, [sp, #8]
 801bd18:	3301      	adds	r3, #1
 801bd1a:	2b01      	cmp	r3, #1
 801bd1c:	9303      	str	r3, [sp, #12]
 801bd1e:	bfb8      	it	lt
 801bd20:	2301      	movlt	r3, #1
 801bd22:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801bd24:	2200      	movs	r2, #0
 801bd26:	6042      	str	r2, [r0, #4]
 801bd28:	2204      	movs	r2, #4
 801bd2a:	f102 0614 	add.w	r6, r2, #20
 801bd2e:	429e      	cmp	r6, r3
 801bd30:	6841      	ldr	r1, [r0, #4]
 801bd32:	d93d      	bls.n	801bdb0 <_dtoa_r+0x318>
 801bd34:	4620      	mov	r0, r4
 801bd36:	f000 fedf 	bl	801caf8 <_Balloc>
 801bd3a:	9001      	str	r0, [sp, #4]
 801bd3c:	2800      	cmp	r0, #0
 801bd3e:	d13b      	bne.n	801bdb8 <_dtoa_r+0x320>
 801bd40:	4b11      	ldr	r3, [pc, #68]	; (801bd88 <_dtoa_r+0x2f0>)
 801bd42:	4602      	mov	r2, r0
 801bd44:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801bd48:	e6c0      	b.n	801bacc <_dtoa_r+0x34>
 801bd4a:	2301      	movs	r3, #1
 801bd4c:	e7df      	b.n	801bd0e <_dtoa_r+0x276>
 801bd4e:	bf00      	nop
 801bd50:	636f4361 	.word	0x636f4361
 801bd54:	3fd287a7 	.word	0x3fd287a7
 801bd58:	8b60c8b3 	.word	0x8b60c8b3
 801bd5c:	3fc68a28 	.word	0x3fc68a28
 801bd60:	509f79fb 	.word	0x509f79fb
 801bd64:	3fd34413 	.word	0x3fd34413
 801bd68:	0806d0d8 	.word	0x0806d0d8
 801bd6c:	0806d193 	.word	0x0806d193
 801bd70:	7ff00000 	.word	0x7ff00000
 801bd74:	0806d18f 	.word	0x0806d18f
 801bd78:	0806d186 	.word	0x0806d186
 801bd7c:	0806d0b5 	.word	0x0806d0b5
 801bd80:	3ff80000 	.word	0x3ff80000
 801bd84:	0806d2e8 	.word	0x0806d2e8
 801bd88:	0806d1ee 	.word	0x0806d1ee
 801bd8c:	2501      	movs	r5, #1
 801bd8e:	2300      	movs	r3, #0
 801bd90:	9306      	str	r3, [sp, #24]
 801bd92:	9508      	str	r5, [sp, #32]
 801bd94:	f04f 33ff 	mov.w	r3, #4294967295
 801bd98:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801bd9c:	2200      	movs	r2, #0
 801bd9e:	2312      	movs	r3, #18
 801bda0:	e7b0      	b.n	801bd04 <_dtoa_r+0x26c>
 801bda2:	2301      	movs	r3, #1
 801bda4:	9308      	str	r3, [sp, #32]
 801bda6:	e7f5      	b.n	801bd94 <_dtoa_r+0x2fc>
 801bda8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bdaa:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801bdae:	e7b8      	b.n	801bd22 <_dtoa_r+0x28a>
 801bdb0:	3101      	adds	r1, #1
 801bdb2:	6041      	str	r1, [r0, #4]
 801bdb4:	0052      	lsls	r2, r2, #1
 801bdb6:	e7b8      	b.n	801bd2a <_dtoa_r+0x292>
 801bdb8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801bdba:	9a01      	ldr	r2, [sp, #4]
 801bdbc:	601a      	str	r2, [r3, #0]
 801bdbe:	9b03      	ldr	r3, [sp, #12]
 801bdc0:	2b0e      	cmp	r3, #14
 801bdc2:	f200 809d 	bhi.w	801bf00 <_dtoa_r+0x468>
 801bdc6:	2d00      	cmp	r5, #0
 801bdc8:	f000 809a 	beq.w	801bf00 <_dtoa_r+0x468>
 801bdcc:	9b00      	ldr	r3, [sp, #0]
 801bdce:	2b00      	cmp	r3, #0
 801bdd0:	dd32      	ble.n	801be38 <_dtoa_r+0x3a0>
 801bdd2:	4ab7      	ldr	r2, [pc, #732]	; (801c0b0 <_dtoa_r+0x618>)
 801bdd4:	f003 030f 	and.w	r3, r3, #15
 801bdd8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801bddc:	e9d3 8900 	ldrd	r8, r9, [r3]
 801bde0:	9b00      	ldr	r3, [sp, #0]
 801bde2:	05d8      	lsls	r0, r3, #23
 801bde4:	ea4f 1723 	mov.w	r7, r3, asr #4
 801bde8:	d516      	bpl.n	801be18 <_dtoa_r+0x380>
 801bdea:	4bb2      	ldr	r3, [pc, #712]	; (801c0b4 <_dtoa_r+0x61c>)
 801bdec:	ec51 0b19 	vmov	r0, r1, d9
 801bdf0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801bdf4:	f7e4 fd42 	bl	800087c <__aeabi_ddiv>
 801bdf8:	f007 070f 	and.w	r7, r7, #15
 801bdfc:	4682      	mov	sl, r0
 801bdfe:	468b      	mov	fp, r1
 801be00:	2503      	movs	r5, #3
 801be02:	4eac      	ldr	r6, [pc, #688]	; (801c0b4 <_dtoa_r+0x61c>)
 801be04:	b957      	cbnz	r7, 801be1c <_dtoa_r+0x384>
 801be06:	4642      	mov	r2, r8
 801be08:	464b      	mov	r3, r9
 801be0a:	4650      	mov	r0, sl
 801be0c:	4659      	mov	r1, fp
 801be0e:	f7e4 fd35 	bl	800087c <__aeabi_ddiv>
 801be12:	4682      	mov	sl, r0
 801be14:	468b      	mov	fp, r1
 801be16:	e028      	b.n	801be6a <_dtoa_r+0x3d2>
 801be18:	2502      	movs	r5, #2
 801be1a:	e7f2      	b.n	801be02 <_dtoa_r+0x36a>
 801be1c:	07f9      	lsls	r1, r7, #31
 801be1e:	d508      	bpl.n	801be32 <_dtoa_r+0x39a>
 801be20:	4640      	mov	r0, r8
 801be22:	4649      	mov	r1, r9
 801be24:	e9d6 2300 	ldrd	r2, r3, [r6]
 801be28:	f7e4 fbfe 	bl	8000628 <__aeabi_dmul>
 801be2c:	3501      	adds	r5, #1
 801be2e:	4680      	mov	r8, r0
 801be30:	4689      	mov	r9, r1
 801be32:	107f      	asrs	r7, r7, #1
 801be34:	3608      	adds	r6, #8
 801be36:	e7e5      	b.n	801be04 <_dtoa_r+0x36c>
 801be38:	f000 809b 	beq.w	801bf72 <_dtoa_r+0x4da>
 801be3c:	9b00      	ldr	r3, [sp, #0]
 801be3e:	4f9d      	ldr	r7, [pc, #628]	; (801c0b4 <_dtoa_r+0x61c>)
 801be40:	425e      	negs	r6, r3
 801be42:	4b9b      	ldr	r3, [pc, #620]	; (801c0b0 <_dtoa_r+0x618>)
 801be44:	f006 020f 	and.w	r2, r6, #15
 801be48:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801be4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801be50:	ec51 0b19 	vmov	r0, r1, d9
 801be54:	f7e4 fbe8 	bl	8000628 <__aeabi_dmul>
 801be58:	1136      	asrs	r6, r6, #4
 801be5a:	4682      	mov	sl, r0
 801be5c:	468b      	mov	fp, r1
 801be5e:	2300      	movs	r3, #0
 801be60:	2502      	movs	r5, #2
 801be62:	2e00      	cmp	r6, #0
 801be64:	d17a      	bne.n	801bf5c <_dtoa_r+0x4c4>
 801be66:	2b00      	cmp	r3, #0
 801be68:	d1d3      	bne.n	801be12 <_dtoa_r+0x37a>
 801be6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801be6c:	2b00      	cmp	r3, #0
 801be6e:	f000 8082 	beq.w	801bf76 <_dtoa_r+0x4de>
 801be72:	4b91      	ldr	r3, [pc, #580]	; (801c0b8 <_dtoa_r+0x620>)
 801be74:	2200      	movs	r2, #0
 801be76:	4650      	mov	r0, sl
 801be78:	4659      	mov	r1, fp
 801be7a:	f7e4 fe47 	bl	8000b0c <__aeabi_dcmplt>
 801be7e:	2800      	cmp	r0, #0
 801be80:	d079      	beq.n	801bf76 <_dtoa_r+0x4de>
 801be82:	9b03      	ldr	r3, [sp, #12]
 801be84:	2b00      	cmp	r3, #0
 801be86:	d076      	beq.n	801bf76 <_dtoa_r+0x4de>
 801be88:	9b02      	ldr	r3, [sp, #8]
 801be8a:	2b00      	cmp	r3, #0
 801be8c:	dd36      	ble.n	801befc <_dtoa_r+0x464>
 801be8e:	9b00      	ldr	r3, [sp, #0]
 801be90:	4650      	mov	r0, sl
 801be92:	4659      	mov	r1, fp
 801be94:	1e5f      	subs	r7, r3, #1
 801be96:	2200      	movs	r2, #0
 801be98:	4b88      	ldr	r3, [pc, #544]	; (801c0bc <_dtoa_r+0x624>)
 801be9a:	f7e4 fbc5 	bl	8000628 <__aeabi_dmul>
 801be9e:	9e02      	ldr	r6, [sp, #8]
 801bea0:	4682      	mov	sl, r0
 801bea2:	468b      	mov	fp, r1
 801bea4:	3501      	adds	r5, #1
 801bea6:	4628      	mov	r0, r5
 801bea8:	f7e4 fb54 	bl	8000554 <__aeabi_i2d>
 801beac:	4652      	mov	r2, sl
 801beae:	465b      	mov	r3, fp
 801beb0:	f7e4 fbba 	bl	8000628 <__aeabi_dmul>
 801beb4:	4b82      	ldr	r3, [pc, #520]	; (801c0c0 <_dtoa_r+0x628>)
 801beb6:	2200      	movs	r2, #0
 801beb8:	f7e4 fa00 	bl	80002bc <__adddf3>
 801bebc:	46d0      	mov	r8, sl
 801bebe:	46d9      	mov	r9, fp
 801bec0:	4682      	mov	sl, r0
 801bec2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 801bec6:	2e00      	cmp	r6, #0
 801bec8:	d158      	bne.n	801bf7c <_dtoa_r+0x4e4>
 801beca:	4b7e      	ldr	r3, [pc, #504]	; (801c0c4 <_dtoa_r+0x62c>)
 801becc:	2200      	movs	r2, #0
 801bece:	4640      	mov	r0, r8
 801bed0:	4649      	mov	r1, r9
 801bed2:	f7e4 f9f1 	bl	80002b8 <__aeabi_dsub>
 801bed6:	4652      	mov	r2, sl
 801bed8:	465b      	mov	r3, fp
 801beda:	4680      	mov	r8, r0
 801bedc:	4689      	mov	r9, r1
 801bede:	f7e4 fe33 	bl	8000b48 <__aeabi_dcmpgt>
 801bee2:	2800      	cmp	r0, #0
 801bee4:	f040 8295 	bne.w	801c412 <_dtoa_r+0x97a>
 801bee8:	4652      	mov	r2, sl
 801beea:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801beee:	4640      	mov	r0, r8
 801bef0:	4649      	mov	r1, r9
 801bef2:	f7e4 fe0b 	bl	8000b0c <__aeabi_dcmplt>
 801bef6:	2800      	cmp	r0, #0
 801bef8:	f040 8289 	bne.w	801c40e <_dtoa_r+0x976>
 801befc:	ec5b ab19 	vmov	sl, fp, d9
 801bf00:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801bf02:	2b00      	cmp	r3, #0
 801bf04:	f2c0 8148 	blt.w	801c198 <_dtoa_r+0x700>
 801bf08:	9a00      	ldr	r2, [sp, #0]
 801bf0a:	2a0e      	cmp	r2, #14
 801bf0c:	f300 8144 	bgt.w	801c198 <_dtoa_r+0x700>
 801bf10:	4b67      	ldr	r3, [pc, #412]	; (801c0b0 <_dtoa_r+0x618>)
 801bf12:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801bf16:	e9d3 8900 	ldrd	r8, r9, [r3]
 801bf1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bf1c:	2b00      	cmp	r3, #0
 801bf1e:	f280 80d5 	bge.w	801c0cc <_dtoa_r+0x634>
 801bf22:	9b03      	ldr	r3, [sp, #12]
 801bf24:	2b00      	cmp	r3, #0
 801bf26:	f300 80d1 	bgt.w	801c0cc <_dtoa_r+0x634>
 801bf2a:	f040 826f 	bne.w	801c40c <_dtoa_r+0x974>
 801bf2e:	4b65      	ldr	r3, [pc, #404]	; (801c0c4 <_dtoa_r+0x62c>)
 801bf30:	2200      	movs	r2, #0
 801bf32:	4640      	mov	r0, r8
 801bf34:	4649      	mov	r1, r9
 801bf36:	f7e4 fb77 	bl	8000628 <__aeabi_dmul>
 801bf3a:	4652      	mov	r2, sl
 801bf3c:	465b      	mov	r3, fp
 801bf3e:	f7e4 fdf9 	bl	8000b34 <__aeabi_dcmpge>
 801bf42:	9e03      	ldr	r6, [sp, #12]
 801bf44:	4637      	mov	r7, r6
 801bf46:	2800      	cmp	r0, #0
 801bf48:	f040 8245 	bne.w	801c3d6 <_dtoa_r+0x93e>
 801bf4c:	9d01      	ldr	r5, [sp, #4]
 801bf4e:	2331      	movs	r3, #49	; 0x31
 801bf50:	f805 3b01 	strb.w	r3, [r5], #1
 801bf54:	9b00      	ldr	r3, [sp, #0]
 801bf56:	3301      	adds	r3, #1
 801bf58:	9300      	str	r3, [sp, #0]
 801bf5a:	e240      	b.n	801c3de <_dtoa_r+0x946>
 801bf5c:	07f2      	lsls	r2, r6, #31
 801bf5e:	d505      	bpl.n	801bf6c <_dtoa_r+0x4d4>
 801bf60:	e9d7 2300 	ldrd	r2, r3, [r7]
 801bf64:	f7e4 fb60 	bl	8000628 <__aeabi_dmul>
 801bf68:	3501      	adds	r5, #1
 801bf6a:	2301      	movs	r3, #1
 801bf6c:	1076      	asrs	r6, r6, #1
 801bf6e:	3708      	adds	r7, #8
 801bf70:	e777      	b.n	801be62 <_dtoa_r+0x3ca>
 801bf72:	2502      	movs	r5, #2
 801bf74:	e779      	b.n	801be6a <_dtoa_r+0x3d2>
 801bf76:	9f00      	ldr	r7, [sp, #0]
 801bf78:	9e03      	ldr	r6, [sp, #12]
 801bf7a:	e794      	b.n	801bea6 <_dtoa_r+0x40e>
 801bf7c:	9901      	ldr	r1, [sp, #4]
 801bf7e:	4b4c      	ldr	r3, [pc, #304]	; (801c0b0 <_dtoa_r+0x618>)
 801bf80:	4431      	add	r1, r6
 801bf82:	910d      	str	r1, [sp, #52]	; 0x34
 801bf84:	9908      	ldr	r1, [sp, #32]
 801bf86:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801bf8a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801bf8e:	2900      	cmp	r1, #0
 801bf90:	d043      	beq.n	801c01a <_dtoa_r+0x582>
 801bf92:	494d      	ldr	r1, [pc, #308]	; (801c0c8 <_dtoa_r+0x630>)
 801bf94:	2000      	movs	r0, #0
 801bf96:	f7e4 fc71 	bl	800087c <__aeabi_ddiv>
 801bf9a:	4652      	mov	r2, sl
 801bf9c:	465b      	mov	r3, fp
 801bf9e:	f7e4 f98b 	bl	80002b8 <__aeabi_dsub>
 801bfa2:	9d01      	ldr	r5, [sp, #4]
 801bfa4:	4682      	mov	sl, r0
 801bfa6:	468b      	mov	fp, r1
 801bfa8:	4649      	mov	r1, r9
 801bfaa:	4640      	mov	r0, r8
 801bfac:	f7e4 fdec 	bl	8000b88 <__aeabi_d2iz>
 801bfb0:	4606      	mov	r6, r0
 801bfb2:	f7e4 facf 	bl	8000554 <__aeabi_i2d>
 801bfb6:	4602      	mov	r2, r0
 801bfb8:	460b      	mov	r3, r1
 801bfba:	4640      	mov	r0, r8
 801bfbc:	4649      	mov	r1, r9
 801bfbe:	f7e4 f97b 	bl	80002b8 <__aeabi_dsub>
 801bfc2:	3630      	adds	r6, #48	; 0x30
 801bfc4:	f805 6b01 	strb.w	r6, [r5], #1
 801bfc8:	4652      	mov	r2, sl
 801bfca:	465b      	mov	r3, fp
 801bfcc:	4680      	mov	r8, r0
 801bfce:	4689      	mov	r9, r1
 801bfd0:	f7e4 fd9c 	bl	8000b0c <__aeabi_dcmplt>
 801bfd4:	2800      	cmp	r0, #0
 801bfd6:	d163      	bne.n	801c0a0 <_dtoa_r+0x608>
 801bfd8:	4642      	mov	r2, r8
 801bfda:	464b      	mov	r3, r9
 801bfdc:	4936      	ldr	r1, [pc, #216]	; (801c0b8 <_dtoa_r+0x620>)
 801bfde:	2000      	movs	r0, #0
 801bfe0:	f7e4 f96a 	bl	80002b8 <__aeabi_dsub>
 801bfe4:	4652      	mov	r2, sl
 801bfe6:	465b      	mov	r3, fp
 801bfe8:	f7e4 fd90 	bl	8000b0c <__aeabi_dcmplt>
 801bfec:	2800      	cmp	r0, #0
 801bfee:	f040 80b5 	bne.w	801c15c <_dtoa_r+0x6c4>
 801bff2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801bff4:	429d      	cmp	r5, r3
 801bff6:	d081      	beq.n	801befc <_dtoa_r+0x464>
 801bff8:	4b30      	ldr	r3, [pc, #192]	; (801c0bc <_dtoa_r+0x624>)
 801bffa:	2200      	movs	r2, #0
 801bffc:	4650      	mov	r0, sl
 801bffe:	4659      	mov	r1, fp
 801c000:	f7e4 fb12 	bl	8000628 <__aeabi_dmul>
 801c004:	4b2d      	ldr	r3, [pc, #180]	; (801c0bc <_dtoa_r+0x624>)
 801c006:	4682      	mov	sl, r0
 801c008:	468b      	mov	fp, r1
 801c00a:	4640      	mov	r0, r8
 801c00c:	4649      	mov	r1, r9
 801c00e:	2200      	movs	r2, #0
 801c010:	f7e4 fb0a 	bl	8000628 <__aeabi_dmul>
 801c014:	4680      	mov	r8, r0
 801c016:	4689      	mov	r9, r1
 801c018:	e7c6      	b.n	801bfa8 <_dtoa_r+0x510>
 801c01a:	4650      	mov	r0, sl
 801c01c:	4659      	mov	r1, fp
 801c01e:	f7e4 fb03 	bl	8000628 <__aeabi_dmul>
 801c022:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c024:	9d01      	ldr	r5, [sp, #4]
 801c026:	930f      	str	r3, [sp, #60]	; 0x3c
 801c028:	4682      	mov	sl, r0
 801c02a:	468b      	mov	fp, r1
 801c02c:	4649      	mov	r1, r9
 801c02e:	4640      	mov	r0, r8
 801c030:	f7e4 fdaa 	bl	8000b88 <__aeabi_d2iz>
 801c034:	4606      	mov	r6, r0
 801c036:	f7e4 fa8d 	bl	8000554 <__aeabi_i2d>
 801c03a:	3630      	adds	r6, #48	; 0x30
 801c03c:	4602      	mov	r2, r0
 801c03e:	460b      	mov	r3, r1
 801c040:	4640      	mov	r0, r8
 801c042:	4649      	mov	r1, r9
 801c044:	f7e4 f938 	bl	80002b8 <__aeabi_dsub>
 801c048:	f805 6b01 	strb.w	r6, [r5], #1
 801c04c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c04e:	429d      	cmp	r5, r3
 801c050:	4680      	mov	r8, r0
 801c052:	4689      	mov	r9, r1
 801c054:	f04f 0200 	mov.w	r2, #0
 801c058:	d124      	bne.n	801c0a4 <_dtoa_r+0x60c>
 801c05a:	4b1b      	ldr	r3, [pc, #108]	; (801c0c8 <_dtoa_r+0x630>)
 801c05c:	4650      	mov	r0, sl
 801c05e:	4659      	mov	r1, fp
 801c060:	f7e4 f92c 	bl	80002bc <__adddf3>
 801c064:	4602      	mov	r2, r0
 801c066:	460b      	mov	r3, r1
 801c068:	4640      	mov	r0, r8
 801c06a:	4649      	mov	r1, r9
 801c06c:	f7e4 fd6c 	bl	8000b48 <__aeabi_dcmpgt>
 801c070:	2800      	cmp	r0, #0
 801c072:	d173      	bne.n	801c15c <_dtoa_r+0x6c4>
 801c074:	4652      	mov	r2, sl
 801c076:	465b      	mov	r3, fp
 801c078:	4913      	ldr	r1, [pc, #76]	; (801c0c8 <_dtoa_r+0x630>)
 801c07a:	2000      	movs	r0, #0
 801c07c:	f7e4 f91c 	bl	80002b8 <__aeabi_dsub>
 801c080:	4602      	mov	r2, r0
 801c082:	460b      	mov	r3, r1
 801c084:	4640      	mov	r0, r8
 801c086:	4649      	mov	r1, r9
 801c088:	f7e4 fd40 	bl	8000b0c <__aeabi_dcmplt>
 801c08c:	2800      	cmp	r0, #0
 801c08e:	f43f af35 	beq.w	801befc <_dtoa_r+0x464>
 801c092:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801c094:	1e6b      	subs	r3, r5, #1
 801c096:	930f      	str	r3, [sp, #60]	; 0x3c
 801c098:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801c09c:	2b30      	cmp	r3, #48	; 0x30
 801c09e:	d0f8      	beq.n	801c092 <_dtoa_r+0x5fa>
 801c0a0:	9700      	str	r7, [sp, #0]
 801c0a2:	e049      	b.n	801c138 <_dtoa_r+0x6a0>
 801c0a4:	4b05      	ldr	r3, [pc, #20]	; (801c0bc <_dtoa_r+0x624>)
 801c0a6:	f7e4 fabf 	bl	8000628 <__aeabi_dmul>
 801c0aa:	4680      	mov	r8, r0
 801c0ac:	4689      	mov	r9, r1
 801c0ae:	e7bd      	b.n	801c02c <_dtoa_r+0x594>
 801c0b0:	0806d2e8 	.word	0x0806d2e8
 801c0b4:	0806d2c0 	.word	0x0806d2c0
 801c0b8:	3ff00000 	.word	0x3ff00000
 801c0bc:	40240000 	.word	0x40240000
 801c0c0:	401c0000 	.word	0x401c0000
 801c0c4:	40140000 	.word	0x40140000
 801c0c8:	3fe00000 	.word	0x3fe00000
 801c0cc:	9d01      	ldr	r5, [sp, #4]
 801c0ce:	4656      	mov	r6, sl
 801c0d0:	465f      	mov	r7, fp
 801c0d2:	4642      	mov	r2, r8
 801c0d4:	464b      	mov	r3, r9
 801c0d6:	4630      	mov	r0, r6
 801c0d8:	4639      	mov	r1, r7
 801c0da:	f7e4 fbcf 	bl	800087c <__aeabi_ddiv>
 801c0de:	f7e4 fd53 	bl	8000b88 <__aeabi_d2iz>
 801c0e2:	4682      	mov	sl, r0
 801c0e4:	f7e4 fa36 	bl	8000554 <__aeabi_i2d>
 801c0e8:	4642      	mov	r2, r8
 801c0ea:	464b      	mov	r3, r9
 801c0ec:	f7e4 fa9c 	bl	8000628 <__aeabi_dmul>
 801c0f0:	4602      	mov	r2, r0
 801c0f2:	460b      	mov	r3, r1
 801c0f4:	4630      	mov	r0, r6
 801c0f6:	4639      	mov	r1, r7
 801c0f8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 801c0fc:	f7e4 f8dc 	bl	80002b8 <__aeabi_dsub>
 801c100:	f805 6b01 	strb.w	r6, [r5], #1
 801c104:	9e01      	ldr	r6, [sp, #4]
 801c106:	9f03      	ldr	r7, [sp, #12]
 801c108:	1bae      	subs	r6, r5, r6
 801c10a:	42b7      	cmp	r7, r6
 801c10c:	4602      	mov	r2, r0
 801c10e:	460b      	mov	r3, r1
 801c110:	d135      	bne.n	801c17e <_dtoa_r+0x6e6>
 801c112:	f7e4 f8d3 	bl	80002bc <__adddf3>
 801c116:	4642      	mov	r2, r8
 801c118:	464b      	mov	r3, r9
 801c11a:	4606      	mov	r6, r0
 801c11c:	460f      	mov	r7, r1
 801c11e:	f7e4 fd13 	bl	8000b48 <__aeabi_dcmpgt>
 801c122:	b9d0      	cbnz	r0, 801c15a <_dtoa_r+0x6c2>
 801c124:	4642      	mov	r2, r8
 801c126:	464b      	mov	r3, r9
 801c128:	4630      	mov	r0, r6
 801c12a:	4639      	mov	r1, r7
 801c12c:	f7e4 fce4 	bl	8000af8 <__aeabi_dcmpeq>
 801c130:	b110      	cbz	r0, 801c138 <_dtoa_r+0x6a0>
 801c132:	f01a 0f01 	tst.w	sl, #1
 801c136:	d110      	bne.n	801c15a <_dtoa_r+0x6c2>
 801c138:	4620      	mov	r0, r4
 801c13a:	ee18 1a10 	vmov	r1, s16
 801c13e:	f000 fd1b 	bl	801cb78 <_Bfree>
 801c142:	2300      	movs	r3, #0
 801c144:	9800      	ldr	r0, [sp, #0]
 801c146:	702b      	strb	r3, [r5, #0]
 801c148:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c14a:	3001      	adds	r0, #1
 801c14c:	6018      	str	r0, [r3, #0]
 801c14e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801c150:	2b00      	cmp	r3, #0
 801c152:	f43f acf1 	beq.w	801bb38 <_dtoa_r+0xa0>
 801c156:	601d      	str	r5, [r3, #0]
 801c158:	e4ee      	b.n	801bb38 <_dtoa_r+0xa0>
 801c15a:	9f00      	ldr	r7, [sp, #0]
 801c15c:	462b      	mov	r3, r5
 801c15e:	461d      	mov	r5, r3
 801c160:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801c164:	2a39      	cmp	r2, #57	; 0x39
 801c166:	d106      	bne.n	801c176 <_dtoa_r+0x6de>
 801c168:	9a01      	ldr	r2, [sp, #4]
 801c16a:	429a      	cmp	r2, r3
 801c16c:	d1f7      	bne.n	801c15e <_dtoa_r+0x6c6>
 801c16e:	9901      	ldr	r1, [sp, #4]
 801c170:	2230      	movs	r2, #48	; 0x30
 801c172:	3701      	adds	r7, #1
 801c174:	700a      	strb	r2, [r1, #0]
 801c176:	781a      	ldrb	r2, [r3, #0]
 801c178:	3201      	adds	r2, #1
 801c17a:	701a      	strb	r2, [r3, #0]
 801c17c:	e790      	b.n	801c0a0 <_dtoa_r+0x608>
 801c17e:	4ba6      	ldr	r3, [pc, #664]	; (801c418 <_dtoa_r+0x980>)
 801c180:	2200      	movs	r2, #0
 801c182:	f7e4 fa51 	bl	8000628 <__aeabi_dmul>
 801c186:	2200      	movs	r2, #0
 801c188:	2300      	movs	r3, #0
 801c18a:	4606      	mov	r6, r0
 801c18c:	460f      	mov	r7, r1
 801c18e:	f7e4 fcb3 	bl	8000af8 <__aeabi_dcmpeq>
 801c192:	2800      	cmp	r0, #0
 801c194:	d09d      	beq.n	801c0d2 <_dtoa_r+0x63a>
 801c196:	e7cf      	b.n	801c138 <_dtoa_r+0x6a0>
 801c198:	9a08      	ldr	r2, [sp, #32]
 801c19a:	2a00      	cmp	r2, #0
 801c19c:	f000 80d7 	beq.w	801c34e <_dtoa_r+0x8b6>
 801c1a0:	9a06      	ldr	r2, [sp, #24]
 801c1a2:	2a01      	cmp	r2, #1
 801c1a4:	f300 80ba 	bgt.w	801c31c <_dtoa_r+0x884>
 801c1a8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801c1aa:	2a00      	cmp	r2, #0
 801c1ac:	f000 80b2 	beq.w	801c314 <_dtoa_r+0x87c>
 801c1b0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801c1b4:	9e07      	ldr	r6, [sp, #28]
 801c1b6:	9d04      	ldr	r5, [sp, #16]
 801c1b8:	9a04      	ldr	r2, [sp, #16]
 801c1ba:	441a      	add	r2, r3
 801c1bc:	9204      	str	r2, [sp, #16]
 801c1be:	9a05      	ldr	r2, [sp, #20]
 801c1c0:	2101      	movs	r1, #1
 801c1c2:	441a      	add	r2, r3
 801c1c4:	4620      	mov	r0, r4
 801c1c6:	9205      	str	r2, [sp, #20]
 801c1c8:	f000 fd8e 	bl	801cce8 <__i2b>
 801c1cc:	4607      	mov	r7, r0
 801c1ce:	2d00      	cmp	r5, #0
 801c1d0:	dd0c      	ble.n	801c1ec <_dtoa_r+0x754>
 801c1d2:	9b05      	ldr	r3, [sp, #20]
 801c1d4:	2b00      	cmp	r3, #0
 801c1d6:	dd09      	ble.n	801c1ec <_dtoa_r+0x754>
 801c1d8:	42ab      	cmp	r3, r5
 801c1da:	9a04      	ldr	r2, [sp, #16]
 801c1dc:	bfa8      	it	ge
 801c1de:	462b      	movge	r3, r5
 801c1e0:	1ad2      	subs	r2, r2, r3
 801c1e2:	9204      	str	r2, [sp, #16]
 801c1e4:	9a05      	ldr	r2, [sp, #20]
 801c1e6:	1aed      	subs	r5, r5, r3
 801c1e8:	1ad3      	subs	r3, r2, r3
 801c1ea:	9305      	str	r3, [sp, #20]
 801c1ec:	9b07      	ldr	r3, [sp, #28]
 801c1ee:	b31b      	cbz	r3, 801c238 <_dtoa_r+0x7a0>
 801c1f0:	9b08      	ldr	r3, [sp, #32]
 801c1f2:	2b00      	cmp	r3, #0
 801c1f4:	f000 80af 	beq.w	801c356 <_dtoa_r+0x8be>
 801c1f8:	2e00      	cmp	r6, #0
 801c1fa:	dd13      	ble.n	801c224 <_dtoa_r+0x78c>
 801c1fc:	4639      	mov	r1, r7
 801c1fe:	4632      	mov	r2, r6
 801c200:	4620      	mov	r0, r4
 801c202:	f000 fe31 	bl	801ce68 <__pow5mult>
 801c206:	ee18 2a10 	vmov	r2, s16
 801c20a:	4601      	mov	r1, r0
 801c20c:	4607      	mov	r7, r0
 801c20e:	4620      	mov	r0, r4
 801c210:	f000 fd80 	bl	801cd14 <__multiply>
 801c214:	ee18 1a10 	vmov	r1, s16
 801c218:	4680      	mov	r8, r0
 801c21a:	4620      	mov	r0, r4
 801c21c:	f000 fcac 	bl	801cb78 <_Bfree>
 801c220:	ee08 8a10 	vmov	s16, r8
 801c224:	9b07      	ldr	r3, [sp, #28]
 801c226:	1b9a      	subs	r2, r3, r6
 801c228:	d006      	beq.n	801c238 <_dtoa_r+0x7a0>
 801c22a:	ee18 1a10 	vmov	r1, s16
 801c22e:	4620      	mov	r0, r4
 801c230:	f000 fe1a 	bl	801ce68 <__pow5mult>
 801c234:	ee08 0a10 	vmov	s16, r0
 801c238:	2101      	movs	r1, #1
 801c23a:	4620      	mov	r0, r4
 801c23c:	f000 fd54 	bl	801cce8 <__i2b>
 801c240:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c242:	2b00      	cmp	r3, #0
 801c244:	4606      	mov	r6, r0
 801c246:	f340 8088 	ble.w	801c35a <_dtoa_r+0x8c2>
 801c24a:	461a      	mov	r2, r3
 801c24c:	4601      	mov	r1, r0
 801c24e:	4620      	mov	r0, r4
 801c250:	f000 fe0a 	bl	801ce68 <__pow5mult>
 801c254:	9b06      	ldr	r3, [sp, #24]
 801c256:	2b01      	cmp	r3, #1
 801c258:	4606      	mov	r6, r0
 801c25a:	f340 8081 	ble.w	801c360 <_dtoa_r+0x8c8>
 801c25e:	f04f 0800 	mov.w	r8, #0
 801c262:	6933      	ldr	r3, [r6, #16]
 801c264:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801c268:	6918      	ldr	r0, [r3, #16]
 801c26a:	f000 fced 	bl	801cc48 <__hi0bits>
 801c26e:	f1c0 0020 	rsb	r0, r0, #32
 801c272:	9b05      	ldr	r3, [sp, #20]
 801c274:	4418      	add	r0, r3
 801c276:	f010 001f 	ands.w	r0, r0, #31
 801c27a:	f000 8092 	beq.w	801c3a2 <_dtoa_r+0x90a>
 801c27e:	f1c0 0320 	rsb	r3, r0, #32
 801c282:	2b04      	cmp	r3, #4
 801c284:	f340 808a 	ble.w	801c39c <_dtoa_r+0x904>
 801c288:	f1c0 001c 	rsb	r0, r0, #28
 801c28c:	9b04      	ldr	r3, [sp, #16]
 801c28e:	4403      	add	r3, r0
 801c290:	9304      	str	r3, [sp, #16]
 801c292:	9b05      	ldr	r3, [sp, #20]
 801c294:	4403      	add	r3, r0
 801c296:	4405      	add	r5, r0
 801c298:	9305      	str	r3, [sp, #20]
 801c29a:	9b04      	ldr	r3, [sp, #16]
 801c29c:	2b00      	cmp	r3, #0
 801c29e:	dd07      	ble.n	801c2b0 <_dtoa_r+0x818>
 801c2a0:	ee18 1a10 	vmov	r1, s16
 801c2a4:	461a      	mov	r2, r3
 801c2a6:	4620      	mov	r0, r4
 801c2a8:	f000 fe38 	bl	801cf1c <__lshift>
 801c2ac:	ee08 0a10 	vmov	s16, r0
 801c2b0:	9b05      	ldr	r3, [sp, #20]
 801c2b2:	2b00      	cmp	r3, #0
 801c2b4:	dd05      	ble.n	801c2c2 <_dtoa_r+0x82a>
 801c2b6:	4631      	mov	r1, r6
 801c2b8:	461a      	mov	r2, r3
 801c2ba:	4620      	mov	r0, r4
 801c2bc:	f000 fe2e 	bl	801cf1c <__lshift>
 801c2c0:	4606      	mov	r6, r0
 801c2c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c2c4:	2b00      	cmp	r3, #0
 801c2c6:	d06e      	beq.n	801c3a6 <_dtoa_r+0x90e>
 801c2c8:	ee18 0a10 	vmov	r0, s16
 801c2cc:	4631      	mov	r1, r6
 801c2ce:	f000 fe95 	bl	801cffc <__mcmp>
 801c2d2:	2800      	cmp	r0, #0
 801c2d4:	da67      	bge.n	801c3a6 <_dtoa_r+0x90e>
 801c2d6:	9b00      	ldr	r3, [sp, #0]
 801c2d8:	3b01      	subs	r3, #1
 801c2da:	ee18 1a10 	vmov	r1, s16
 801c2de:	9300      	str	r3, [sp, #0]
 801c2e0:	220a      	movs	r2, #10
 801c2e2:	2300      	movs	r3, #0
 801c2e4:	4620      	mov	r0, r4
 801c2e6:	f000 fc69 	bl	801cbbc <__multadd>
 801c2ea:	9b08      	ldr	r3, [sp, #32]
 801c2ec:	ee08 0a10 	vmov	s16, r0
 801c2f0:	2b00      	cmp	r3, #0
 801c2f2:	f000 81b1 	beq.w	801c658 <_dtoa_r+0xbc0>
 801c2f6:	2300      	movs	r3, #0
 801c2f8:	4639      	mov	r1, r7
 801c2fa:	220a      	movs	r2, #10
 801c2fc:	4620      	mov	r0, r4
 801c2fe:	f000 fc5d 	bl	801cbbc <__multadd>
 801c302:	9b02      	ldr	r3, [sp, #8]
 801c304:	2b00      	cmp	r3, #0
 801c306:	4607      	mov	r7, r0
 801c308:	f300 808e 	bgt.w	801c428 <_dtoa_r+0x990>
 801c30c:	9b06      	ldr	r3, [sp, #24]
 801c30e:	2b02      	cmp	r3, #2
 801c310:	dc51      	bgt.n	801c3b6 <_dtoa_r+0x91e>
 801c312:	e089      	b.n	801c428 <_dtoa_r+0x990>
 801c314:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c316:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801c31a:	e74b      	b.n	801c1b4 <_dtoa_r+0x71c>
 801c31c:	9b03      	ldr	r3, [sp, #12]
 801c31e:	1e5e      	subs	r6, r3, #1
 801c320:	9b07      	ldr	r3, [sp, #28]
 801c322:	42b3      	cmp	r3, r6
 801c324:	bfbf      	itttt	lt
 801c326:	9b07      	ldrlt	r3, [sp, #28]
 801c328:	9607      	strlt	r6, [sp, #28]
 801c32a:	1af2      	sublt	r2, r6, r3
 801c32c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801c32e:	bfb6      	itet	lt
 801c330:	189b      	addlt	r3, r3, r2
 801c332:	1b9e      	subge	r6, r3, r6
 801c334:	930a      	strlt	r3, [sp, #40]	; 0x28
 801c336:	9b03      	ldr	r3, [sp, #12]
 801c338:	bfb8      	it	lt
 801c33a:	2600      	movlt	r6, #0
 801c33c:	2b00      	cmp	r3, #0
 801c33e:	bfb7      	itett	lt
 801c340:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 801c344:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 801c348:	1a9d      	sublt	r5, r3, r2
 801c34a:	2300      	movlt	r3, #0
 801c34c:	e734      	b.n	801c1b8 <_dtoa_r+0x720>
 801c34e:	9e07      	ldr	r6, [sp, #28]
 801c350:	9d04      	ldr	r5, [sp, #16]
 801c352:	9f08      	ldr	r7, [sp, #32]
 801c354:	e73b      	b.n	801c1ce <_dtoa_r+0x736>
 801c356:	9a07      	ldr	r2, [sp, #28]
 801c358:	e767      	b.n	801c22a <_dtoa_r+0x792>
 801c35a:	9b06      	ldr	r3, [sp, #24]
 801c35c:	2b01      	cmp	r3, #1
 801c35e:	dc18      	bgt.n	801c392 <_dtoa_r+0x8fa>
 801c360:	f1ba 0f00 	cmp.w	sl, #0
 801c364:	d115      	bne.n	801c392 <_dtoa_r+0x8fa>
 801c366:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801c36a:	b993      	cbnz	r3, 801c392 <_dtoa_r+0x8fa>
 801c36c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801c370:	0d1b      	lsrs	r3, r3, #20
 801c372:	051b      	lsls	r3, r3, #20
 801c374:	b183      	cbz	r3, 801c398 <_dtoa_r+0x900>
 801c376:	9b04      	ldr	r3, [sp, #16]
 801c378:	3301      	adds	r3, #1
 801c37a:	9304      	str	r3, [sp, #16]
 801c37c:	9b05      	ldr	r3, [sp, #20]
 801c37e:	3301      	adds	r3, #1
 801c380:	9305      	str	r3, [sp, #20]
 801c382:	f04f 0801 	mov.w	r8, #1
 801c386:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c388:	2b00      	cmp	r3, #0
 801c38a:	f47f af6a 	bne.w	801c262 <_dtoa_r+0x7ca>
 801c38e:	2001      	movs	r0, #1
 801c390:	e76f      	b.n	801c272 <_dtoa_r+0x7da>
 801c392:	f04f 0800 	mov.w	r8, #0
 801c396:	e7f6      	b.n	801c386 <_dtoa_r+0x8ee>
 801c398:	4698      	mov	r8, r3
 801c39a:	e7f4      	b.n	801c386 <_dtoa_r+0x8ee>
 801c39c:	f43f af7d 	beq.w	801c29a <_dtoa_r+0x802>
 801c3a0:	4618      	mov	r0, r3
 801c3a2:	301c      	adds	r0, #28
 801c3a4:	e772      	b.n	801c28c <_dtoa_r+0x7f4>
 801c3a6:	9b03      	ldr	r3, [sp, #12]
 801c3a8:	2b00      	cmp	r3, #0
 801c3aa:	dc37      	bgt.n	801c41c <_dtoa_r+0x984>
 801c3ac:	9b06      	ldr	r3, [sp, #24]
 801c3ae:	2b02      	cmp	r3, #2
 801c3b0:	dd34      	ble.n	801c41c <_dtoa_r+0x984>
 801c3b2:	9b03      	ldr	r3, [sp, #12]
 801c3b4:	9302      	str	r3, [sp, #8]
 801c3b6:	9b02      	ldr	r3, [sp, #8]
 801c3b8:	b96b      	cbnz	r3, 801c3d6 <_dtoa_r+0x93e>
 801c3ba:	4631      	mov	r1, r6
 801c3bc:	2205      	movs	r2, #5
 801c3be:	4620      	mov	r0, r4
 801c3c0:	f000 fbfc 	bl	801cbbc <__multadd>
 801c3c4:	4601      	mov	r1, r0
 801c3c6:	4606      	mov	r6, r0
 801c3c8:	ee18 0a10 	vmov	r0, s16
 801c3cc:	f000 fe16 	bl	801cffc <__mcmp>
 801c3d0:	2800      	cmp	r0, #0
 801c3d2:	f73f adbb 	bgt.w	801bf4c <_dtoa_r+0x4b4>
 801c3d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c3d8:	9d01      	ldr	r5, [sp, #4]
 801c3da:	43db      	mvns	r3, r3
 801c3dc:	9300      	str	r3, [sp, #0]
 801c3de:	f04f 0800 	mov.w	r8, #0
 801c3e2:	4631      	mov	r1, r6
 801c3e4:	4620      	mov	r0, r4
 801c3e6:	f000 fbc7 	bl	801cb78 <_Bfree>
 801c3ea:	2f00      	cmp	r7, #0
 801c3ec:	f43f aea4 	beq.w	801c138 <_dtoa_r+0x6a0>
 801c3f0:	f1b8 0f00 	cmp.w	r8, #0
 801c3f4:	d005      	beq.n	801c402 <_dtoa_r+0x96a>
 801c3f6:	45b8      	cmp	r8, r7
 801c3f8:	d003      	beq.n	801c402 <_dtoa_r+0x96a>
 801c3fa:	4641      	mov	r1, r8
 801c3fc:	4620      	mov	r0, r4
 801c3fe:	f000 fbbb 	bl	801cb78 <_Bfree>
 801c402:	4639      	mov	r1, r7
 801c404:	4620      	mov	r0, r4
 801c406:	f000 fbb7 	bl	801cb78 <_Bfree>
 801c40a:	e695      	b.n	801c138 <_dtoa_r+0x6a0>
 801c40c:	2600      	movs	r6, #0
 801c40e:	4637      	mov	r7, r6
 801c410:	e7e1      	b.n	801c3d6 <_dtoa_r+0x93e>
 801c412:	9700      	str	r7, [sp, #0]
 801c414:	4637      	mov	r7, r6
 801c416:	e599      	b.n	801bf4c <_dtoa_r+0x4b4>
 801c418:	40240000 	.word	0x40240000
 801c41c:	9b08      	ldr	r3, [sp, #32]
 801c41e:	2b00      	cmp	r3, #0
 801c420:	f000 80ca 	beq.w	801c5b8 <_dtoa_r+0xb20>
 801c424:	9b03      	ldr	r3, [sp, #12]
 801c426:	9302      	str	r3, [sp, #8]
 801c428:	2d00      	cmp	r5, #0
 801c42a:	dd05      	ble.n	801c438 <_dtoa_r+0x9a0>
 801c42c:	4639      	mov	r1, r7
 801c42e:	462a      	mov	r2, r5
 801c430:	4620      	mov	r0, r4
 801c432:	f000 fd73 	bl	801cf1c <__lshift>
 801c436:	4607      	mov	r7, r0
 801c438:	f1b8 0f00 	cmp.w	r8, #0
 801c43c:	d05b      	beq.n	801c4f6 <_dtoa_r+0xa5e>
 801c43e:	6879      	ldr	r1, [r7, #4]
 801c440:	4620      	mov	r0, r4
 801c442:	f000 fb59 	bl	801caf8 <_Balloc>
 801c446:	4605      	mov	r5, r0
 801c448:	b928      	cbnz	r0, 801c456 <_dtoa_r+0x9be>
 801c44a:	4b87      	ldr	r3, [pc, #540]	; (801c668 <_dtoa_r+0xbd0>)
 801c44c:	4602      	mov	r2, r0
 801c44e:	f240 21ea 	movw	r1, #746	; 0x2ea
 801c452:	f7ff bb3b 	b.w	801bacc <_dtoa_r+0x34>
 801c456:	693a      	ldr	r2, [r7, #16]
 801c458:	3202      	adds	r2, #2
 801c45a:	0092      	lsls	r2, r2, #2
 801c45c:	f107 010c 	add.w	r1, r7, #12
 801c460:	300c      	adds	r0, #12
 801c462:	f7fe fa97 	bl	801a994 <memcpy>
 801c466:	2201      	movs	r2, #1
 801c468:	4629      	mov	r1, r5
 801c46a:	4620      	mov	r0, r4
 801c46c:	f000 fd56 	bl	801cf1c <__lshift>
 801c470:	9b01      	ldr	r3, [sp, #4]
 801c472:	f103 0901 	add.w	r9, r3, #1
 801c476:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801c47a:	4413      	add	r3, r2
 801c47c:	9305      	str	r3, [sp, #20]
 801c47e:	f00a 0301 	and.w	r3, sl, #1
 801c482:	46b8      	mov	r8, r7
 801c484:	9304      	str	r3, [sp, #16]
 801c486:	4607      	mov	r7, r0
 801c488:	4631      	mov	r1, r6
 801c48a:	ee18 0a10 	vmov	r0, s16
 801c48e:	f7ff fa75 	bl	801b97c <quorem>
 801c492:	4641      	mov	r1, r8
 801c494:	9002      	str	r0, [sp, #8]
 801c496:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801c49a:	ee18 0a10 	vmov	r0, s16
 801c49e:	f000 fdad 	bl	801cffc <__mcmp>
 801c4a2:	463a      	mov	r2, r7
 801c4a4:	9003      	str	r0, [sp, #12]
 801c4a6:	4631      	mov	r1, r6
 801c4a8:	4620      	mov	r0, r4
 801c4aa:	f000 fdc3 	bl	801d034 <__mdiff>
 801c4ae:	68c2      	ldr	r2, [r0, #12]
 801c4b0:	f109 3bff 	add.w	fp, r9, #4294967295
 801c4b4:	4605      	mov	r5, r0
 801c4b6:	bb02      	cbnz	r2, 801c4fa <_dtoa_r+0xa62>
 801c4b8:	4601      	mov	r1, r0
 801c4ba:	ee18 0a10 	vmov	r0, s16
 801c4be:	f000 fd9d 	bl	801cffc <__mcmp>
 801c4c2:	4602      	mov	r2, r0
 801c4c4:	4629      	mov	r1, r5
 801c4c6:	4620      	mov	r0, r4
 801c4c8:	9207      	str	r2, [sp, #28]
 801c4ca:	f000 fb55 	bl	801cb78 <_Bfree>
 801c4ce:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801c4d2:	ea43 0102 	orr.w	r1, r3, r2
 801c4d6:	9b04      	ldr	r3, [sp, #16]
 801c4d8:	430b      	orrs	r3, r1
 801c4da:	464d      	mov	r5, r9
 801c4dc:	d10f      	bne.n	801c4fe <_dtoa_r+0xa66>
 801c4de:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801c4e2:	d02a      	beq.n	801c53a <_dtoa_r+0xaa2>
 801c4e4:	9b03      	ldr	r3, [sp, #12]
 801c4e6:	2b00      	cmp	r3, #0
 801c4e8:	dd02      	ble.n	801c4f0 <_dtoa_r+0xa58>
 801c4ea:	9b02      	ldr	r3, [sp, #8]
 801c4ec:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 801c4f0:	f88b a000 	strb.w	sl, [fp]
 801c4f4:	e775      	b.n	801c3e2 <_dtoa_r+0x94a>
 801c4f6:	4638      	mov	r0, r7
 801c4f8:	e7ba      	b.n	801c470 <_dtoa_r+0x9d8>
 801c4fa:	2201      	movs	r2, #1
 801c4fc:	e7e2      	b.n	801c4c4 <_dtoa_r+0xa2c>
 801c4fe:	9b03      	ldr	r3, [sp, #12]
 801c500:	2b00      	cmp	r3, #0
 801c502:	db04      	blt.n	801c50e <_dtoa_r+0xa76>
 801c504:	9906      	ldr	r1, [sp, #24]
 801c506:	430b      	orrs	r3, r1
 801c508:	9904      	ldr	r1, [sp, #16]
 801c50a:	430b      	orrs	r3, r1
 801c50c:	d122      	bne.n	801c554 <_dtoa_r+0xabc>
 801c50e:	2a00      	cmp	r2, #0
 801c510:	ddee      	ble.n	801c4f0 <_dtoa_r+0xa58>
 801c512:	ee18 1a10 	vmov	r1, s16
 801c516:	2201      	movs	r2, #1
 801c518:	4620      	mov	r0, r4
 801c51a:	f000 fcff 	bl	801cf1c <__lshift>
 801c51e:	4631      	mov	r1, r6
 801c520:	ee08 0a10 	vmov	s16, r0
 801c524:	f000 fd6a 	bl	801cffc <__mcmp>
 801c528:	2800      	cmp	r0, #0
 801c52a:	dc03      	bgt.n	801c534 <_dtoa_r+0xa9c>
 801c52c:	d1e0      	bne.n	801c4f0 <_dtoa_r+0xa58>
 801c52e:	f01a 0f01 	tst.w	sl, #1
 801c532:	d0dd      	beq.n	801c4f0 <_dtoa_r+0xa58>
 801c534:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801c538:	d1d7      	bne.n	801c4ea <_dtoa_r+0xa52>
 801c53a:	2339      	movs	r3, #57	; 0x39
 801c53c:	f88b 3000 	strb.w	r3, [fp]
 801c540:	462b      	mov	r3, r5
 801c542:	461d      	mov	r5, r3
 801c544:	3b01      	subs	r3, #1
 801c546:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801c54a:	2a39      	cmp	r2, #57	; 0x39
 801c54c:	d071      	beq.n	801c632 <_dtoa_r+0xb9a>
 801c54e:	3201      	adds	r2, #1
 801c550:	701a      	strb	r2, [r3, #0]
 801c552:	e746      	b.n	801c3e2 <_dtoa_r+0x94a>
 801c554:	2a00      	cmp	r2, #0
 801c556:	dd07      	ble.n	801c568 <_dtoa_r+0xad0>
 801c558:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801c55c:	d0ed      	beq.n	801c53a <_dtoa_r+0xaa2>
 801c55e:	f10a 0301 	add.w	r3, sl, #1
 801c562:	f88b 3000 	strb.w	r3, [fp]
 801c566:	e73c      	b.n	801c3e2 <_dtoa_r+0x94a>
 801c568:	9b05      	ldr	r3, [sp, #20]
 801c56a:	f809 ac01 	strb.w	sl, [r9, #-1]
 801c56e:	4599      	cmp	r9, r3
 801c570:	d047      	beq.n	801c602 <_dtoa_r+0xb6a>
 801c572:	ee18 1a10 	vmov	r1, s16
 801c576:	2300      	movs	r3, #0
 801c578:	220a      	movs	r2, #10
 801c57a:	4620      	mov	r0, r4
 801c57c:	f000 fb1e 	bl	801cbbc <__multadd>
 801c580:	45b8      	cmp	r8, r7
 801c582:	ee08 0a10 	vmov	s16, r0
 801c586:	f04f 0300 	mov.w	r3, #0
 801c58a:	f04f 020a 	mov.w	r2, #10
 801c58e:	4641      	mov	r1, r8
 801c590:	4620      	mov	r0, r4
 801c592:	d106      	bne.n	801c5a2 <_dtoa_r+0xb0a>
 801c594:	f000 fb12 	bl	801cbbc <__multadd>
 801c598:	4680      	mov	r8, r0
 801c59a:	4607      	mov	r7, r0
 801c59c:	f109 0901 	add.w	r9, r9, #1
 801c5a0:	e772      	b.n	801c488 <_dtoa_r+0x9f0>
 801c5a2:	f000 fb0b 	bl	801cbbc <__multadd>
 801c5a6:	4639      	mov	r1, r7
 801c5a8:	4680      	mov	r8, r0
 801c5aa:	2300      	movs	r3, #0
 801c5ac:	220a      	movs	r2, #10
 801c5ae:	4620      	mov	r0, r4
 801c5b0:	f000 fb04 	bl	801cbbc <__multadd>
 801c5b4:	4607      	mov	r7, r0
 801c5b6:	e7f1      	b.n	801c59c <_dtoa_r+0xb04>
 801c5b8:	9b03      	ldr	r3, [sp, #12]
 801c5ba:	9302      	str	r3, [sp, #8]
 801c5bc:	9d01      	ldr	r5, [sp, #4]
 801c5be:	ee18 0a10 	vmov	r0, s16
 801c5c2:	4631      	mov	r1, r6
 801c5c4:	f7ff f9da 	bl	801b97c <quorem>
 801c5c8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801c5cc:	9b01      	ldr	r3, [sp, #4]
 801c5ce:	f805 ab01 	strb.w	sl, [r5], #1
 801c5d2:	1aea      	subs	r2, r5, r3
 801c5d4:	9b02      	ldr	r3, [sp, #8]
 801c5d6:	4293      	cmp	r3, r2
 801c5d8:	dd09      	ble.n	801c5ee <_dtoa_r+0xb56>
 801c5da:	ee18 1a10 	vmov	r1, s16
 801c5de:	2300      	movs	r3, #0
 801c5e0:	220a      	movs	r2, #10
 801c5e2:	4620      	mov	r0, r4
 801c5e4:	f000 faea 	bl	801cbbc <__multadd>
 801c5e8:	ee08 0a10 	vmov	s16, r0
 801c5ec:	e7e7      	b.n	801c5be <_dtoa_r+0xb26>
 801c5ee:	9b02      	ldr	r3, [sp, #8]
 801c5f0:	2b00      	cmp	r3, #0
 801c5f2:	bfc8      	it	gt
 801c5f4:	461d      	movgt	r5, r3
 801c5f6:	9b01      	ldr	r3, [sp, #4]
 801c5f8:	bfd8      	it	le
 801c5fa:	2501      	movle	r5, #1
 801c5fc:	441d      	add	r5, r3
 801c5fe:	f04f 0800 	mov.w	r8, #0
 801c602:	ee18 1a10 	vmov	r1, s16
 801c606:	2201      	movs	r2, #1
 801c608:	4620      	mov	r0, r4
 801c60a:	f000 fc87 	bl	801cf1c <__lshift>
 801c60e:	4631      	mov	r1, r6
 801c610:	ee08 0a10 	vmov	s16, r0
 801c614:	f000 fcf2 	bl	801cffc <__mcmp>
 801c618:	2800      	cmp	r0, #0
 801c61a:	dc91      	bgt.n	801c540 <_dtoa_r+0xaa8>
 801c61c:	d102      	bne.n	801c624 <_dtoa_r+0xb8c>
 801c61e:	f01a 0f01 	tst.w	sl, #1
 801c622:	d18d      	bne.n	801c540 <_dtoa_r+0xaa8>
 801c624:	462b      	mov	r3, r5
 801c626:	461d      	mov	r5, r3
 801c628:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801c62c:	2a30      	cmp	r2, #48	; 0x30
 801c62e:	d0fa      	beq.n	801c626 <_dtoa_r+0xb8e>
 801c630:	e6d7      	b.n	801c3e2 <_dtoa_r+0x94a>
 801c632:	9a01      	ldr	r2, [sp, #4]
 801c634:	429a      	cmp	r2, r3
 801c636:	d184      	bne.n	801c542 <_dtoa_r+0xaaa>
 801c638:	9b00      	ldr	r3, [sp, #0]
 801c63a:	3301      	adds	r3, #1
 801c63c:	9300      	str	r3, [sp, #0]
 801c63e:	2331      	movs	r3, #49	; 0x31
 801c640:	7013      	strb	r3, [r2, #0]
 801c642:	e6ce      	b.n	801c3e2 <_dtoa_r+0x94a>
 801c644:	4b09      	ldr	r3, [pc, #36]	; (801c66c <_dtoa_r+0xbd4>)
 801c646:	f7ff ba95 	b.w	801bb74 <_dtoa_r+0xdc>
 801c64a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801c64c:	2b00      	cmp	r3, #0
 801c64e:	f47f aa6e 	bne.w	801bb2e <_dtoa_r+0x96>
 801c652:	4b07      	ldr	r3, [pc, #28]	; (801c670 <_dtoa_r+0xbd8>)
 801c654:	f7ff ba8e 	b.w	801bb74 <_dtoa_r+0xdc>
 801c658:	9b02      	ldr	r3, [sp, #8]
 801c65a:	2b00      	cmp	r3, #0
 801c65c:	dcae      	bgt.n	801c5bc <_dtoa_r+0xb24>
 801c65e:	9b06      	ldr	r3, [sp, #24]
 801c660:	2b02      	cmp	r3, #2
 801c662:	f73f aea8 	bgt.w	801c3b6 <_dtoa_r+0x91e>
 801c666:	e7a9      	b.n	801c5bc <_dtoa_r+0xb24>
 801c668:	0806d1ee 	.word	0x0806d1ee
 801c66c:	0806d0b4 	.word	0x0806d0b4
 801c670:	0806d186 	.word	0x0806d186

0801c674 <__sflush_r>:
 801c674:	898a      	ldrh	r2, [r1, #12]
 801c676:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c67a:	4605      	mov	r5, r0
 801c67c:	0710      	lsls	r0, r2, #28
 801c67e:	460c      	mov	r4, r1
 801c680:	d458      	bmi.n	801c734 <__sflush_r+0xc0>
 801c682:	684b      	ldr	r3, [r1, #4]
 801c684:	2b00      	cmp	r3, #0
 801c686:	dc05      	bgt.n	801c694 <__sflush_r+0x20>
 801c688:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801c68a:	2b00      	cmp	r3, #0
 801c68c:	dc02      	bgt.n	801c694 <__sflush_r+0x20>
 801c68e:	2000      	movs	r0, #0
 801c690:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c694:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801c696:	2e00      	cmp	r6, #0
 801c698:	d0f9      	beq.n	801c68e <__sflush_r+0x1a>
 801c69a:	2300      	movs	r3, #0
 801c69c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801c6a0:	682f      	ldr	r7, [r5, #0]
 801c6a2:	602b      	str	r3, [r5, #0]
 801c6a4:	d032      	beq.n	801c70c <__sflush_r+0x98>
 801c6a6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801c6a8:	89a3      	ldrh	r3, [r4, #12]
 801c6aa:	075a      	lsls	r2, r3, #29
 801c6ac:	d505      	bpl.n	801c6ba <__sflush_r+0x46>
 801c6ae:	6863      	ldr	r3, [r4, #4]
 801c6b0:	1ac0      	subs	r0, r0, r3
 801c6b2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801c6b4:	b10b      	cbz	r3, 801c6ba <__sflush_r+0x46>
 801c6b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801c6b8:	1ac0      	subs	r0, r0, r3
 801c6ba:	2300      	movs	r3, #0
 801c6bc:	4602      	mov	r2, r0
 801c6be:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801c6c0:	6a21      	ldr	r1, [r4, #32]
 801c6c2:	4628      	mov	r0, r5
 801c6c4:	47b0      	blx	r6
 801c6c6:	1c43      	adds	r3, r0, #1
 801c6c8:	89a3      	ldrh	r3, [r4, #12]
 801c6ca:	d106      	bne.n	801c6da <__sflush_r+0x66>
 801c6cc:	6829      	ldr	r1, [r5, #0]
 801c6ce:	291d      	cmp	r1, #29
 801c6d0:	d82c      	bhi.n	801c72c <__sflush_r+0xb8>
 801c6d2:	4a2a      	ldr	r2, [pc, #168]	; (801c77c <__sflush_r+0x108>)
 801c6d4:	40ca      	lsrs	r2, r1
 801c6d6:	07d6      	lsls	r6, r2, #31
 801c6d8:	d528      	bpl.n	801c72c <__sflush_r+0xb8>
 801c6da:	2200      	movs	r2, #0
 801c6dc:	6062      	str	r2, [r4, #4]
 801c6de:	04d9      	lsls	r1, r3, #19
 801c6e0:	6922      	ldr	r2, [r4, #16]
 801c6e2:	6022      	str	r2, [r4, #0]
 801c6e4:	d504      	bpl.n	801c6f0 <__sflush_r+0x7c>
 801c6e6:	1c42      	adds	r2, r0, #1
 801c6e8:	d101      	bne.n	801c6ee <__sflush_r+0x7a>
 801c6ea:	682b      	ldr	r3, [r5, #0]
 801c6ec:	b903      	cbnz	r3, 801c6f0 <__sflush_r+0x7c>
 801c6ee:	6560      	str	r0, [r4, #84]	; 0x54
 801c6f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801c6f2:	602f      	str	r7, [r5, #0]
 801c6f4:	2900      	cmp	r1, #0
 801c6f6:	d0ca      	beq.n	801c68e <__sflush_r+0x1a>
 801c6f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801c6fc:	4299      	cmp	r1, r3
 801c6fe:	d002      	beq.n	801c706 <__sflush_r+0x92>
 801c700:	4628      	mov	r0, r5
 801c702:	f7fe f973 	bl	801a9ec <_free_r>
 801c706:	2000      	movs	r0, #0
 801c708:	6360      	str	r0, [r4, #52]	; 0x34
 801c70a:	e7c1      	b.n	801c690 <__sflush_r+0x1c>
 801c70c:	6a21      	ldr	r1, [r4, #32]
 801c70e:	2301      	movs	r3, #1
 801c710:	4628      	mov	r0, r5
 801c712:	47b0      	blx	r6
 801c714:	1c41      	adds	r1, r0, #1
 801c716:	d1c7      	bne.n	801c6a8 <__sflush_r+0x34>
 801c718:	682b      	ldr	r3, [r5, #0]
 801c71a:	2b00      	cmp	r3, #0
 801c71c:	d0c4      	beq.n	801c6a8 <__sflush_r+0x34>
 801c71e:	2b1d      	cmp	r3, #29
 801c720:	d001      	beq.n	801c726 <__sflush_r+0xb2>
 801c722:	2b16      	cmp	r3, #22
 801c724:	d101      	bne.n	801c72a <__sflush_r+0xb6>
 801c726:	602f      	str	r7, [r5, #0]
 801c728:	e7b1      	b.n	801c68e <__sflush_r+0x1a>
 801c72a:	89a3      	ldrh	r3, [r4, #12]
 801c72c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c730:	81a3      	strh	r3, [r4, #12]
 801c732:	e7ad      	b.n	801c690 <__sflush_r+0x1c>
 801c734:	690f      	ldr	r7, [r1, #16]
 801c736:	2f00      	cmp	r7, #0
 801c738:	d0a9      	beq.n	801c68e <__sflush_r+0x1a>
 801c73a:	0793      	lsls	r3, r2, #30
 801c73c:	680e      	ldr	r6, [r1, #0]
 801c73e:	bf08      	it	eq
 801c740:	694b      	ldreq	r3, [r1, #20]
 801c742:	600f      	str	r7, [r1, #0]
 801c744:	bf18      	it	ne
 801c746:	2300      	movne	r3, #0
 801c748:	eba6 0807 	sub.w	r8, r6, r7
 801c74c:	608b      	str	r3, [r1, #8]
 801c74e:	f1b8 0f00 	cmp.w	r8, #0
 801c752:	dd9c      	ble.n	801c68e <__sflush_r+0x1a>
 801c754:	6a21      	ldr	r1, [r4, #32]
 801c756:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801c758:	4643      	mov	r3, r8
 801c75a:	463a      	mov	r2, r7
 801c75c:	4628      	mov	r0, r5
 801c75e:	47b0      	blx	r6
 801c760:	2800      	cmp	r0, #0
 801c762:	dc06      	bgt.n	801c772 <__sflush_r+0xfe>
 801c764:	89a3      	ldrh	r3, [r4, #12]
 801c766:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c76a:	81a3      	strh	r3, [r4, #12]
 801c76c:	f04f 30ff 	mov.w	r0, #4294967295
 801c770:	e78e      	b.n	801c690 <__sflush_r+0x1c>
 801c772:	4407      	add	r7, r0
 801c774:	eba8 0800 	sub.w	r8, r8, r0
 801c778:	e7e9      	b.n	801c74e <__sflush_r+0xda>
 801c77a:	bf00      	nop
 801c77c:	20400001 	.word	0x20400001

0801c780 <_fflush_r>:
 801c780:	b538      	push	{r3, r4, r5, lr}
 801c782:	690b      	ldr	r3, [r1, #16]
 801c784:	4605      	mov	r5, r0
 801c786:	460c      	mov	r4, r1
 801c788:	b913      	cbnz	r3, 801c790 <_fflush_r+0x10>
 801c78a:	2500      	movs	r5, #0
 801c78c:	4628      	mov	r0, r5
 801c78e:	bd38      	pop	{r3, r4, r5, pc}
 801c790:	b118      	cbz	r0, 801c79a <_fflush_r+0x1a>
 801c792:	6983      	ldr	r3, [r0, #24]
 801c794:	b90b      	cbnz	r3, 801c79a <_fflush_r+0x1a>
 801c796:	f000 f887 	bl	801c8a8 <__sinit>
 801c79a:	4b14      	ldr	r3, [pc, #80]	; (801c7ec <_fflush_r+0x6c>)
 801c79c:	429c      	cmp	r4, r3
 801c79e:	d11b      	bne.n	801c7d8 <_fflush_r+0x58>
 801c7a0:	686c      	ldr	r4, [r5, #4]
 801c7a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c7a6:	2b00      	cmp	r3, #0
 801c7a8:	d0ef      	beq.n	801c78a <_fflush_r+0xa>
 801c7aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801c7ac:	07d0      	lsls	r0, r2, #31
 801c7ae:	d404      	bmi.n	801c7ba <_fflush_r+0x3a>
 801c7b0:	0599      	lsls	r1, r3, #22
 801c7b2:	d402      	bmi.n	801c7ba <_fflush_r+0x3a>
 801c7b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801c7b6:	f000 f92c 	bl	801ca12 <__retarget_lock_acquire_recursive>
 801c7ba:	4628      	mov	r0, r5
 801c7bc:	4621      	mov	r1, r4
 801c7be:	f7ff ff59 	bl	801c674 <__sflush_r>
 801c7c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801c7c4:	07da      	lsls	r2, r3, #31
 801c7c6:	4605      	mov	r5, r0
 801c7c8:	d4e0      	bmi.n	801c78c <_fflush_r+0xc>
 801c7ca:	89a3      	ldrh	r3, [r4, #12]
 801c7cc:	059b      	lsls	r3, r3, #22
 801c7ce:	d4dd      	bmi.n	801c78c <_fflush_r+0xc>
 801c7d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801c7d2:	f000 f91f 	bl	801ca14 <__retarget_lock_release_recursive>
 801c7d6:	e7d9      	b.n	801c78c <_fflush_r+0xc>
 801c7d8:	4b05      	ldr	r3, [pc, #20]	; (801c7f0 <_fflush_r+0x70>)
 801c7da:	429c      	cmp	r4, r3
 801c7dc:	d101      	bne.n	801c7e2 <_fflush_r+0x62>
 801c7de:	68ac      	ldr	r4, [r5, #8]
 801c7e0:	e7df      	b.n	801c7a2 <_fflush_r+0x22>
 801c7e2:	4b04      	ldr	r3, [pc, #16]	; (801c7f4 <_fflush_r+0x74>)
 801c7e4:	429c      	cmp	r4, r3
 801c7e6:	bf08      	it	eq
 801c7e8:	68ec      	ldreq	r4, [r5, #12]
 801c7ea:	e7da      	b.n	801c7a2 <_fflush_r+0x22>
 801c7ec:	0806d220 	.word	0x0806d220
 801c7f0:	0806d240 	.word	0x0806d240
 801c7f4:	0806d200 	.word	0x0806d200

0801c7f8 <std>:
 801c7f8:	2300      	movs	r3, #0
 801c7fa:	b510      	push	{r4, lr}
 801c7fc:	4604      	mov	r4, r0
 801c7fe:	e9c0 3300 	strd	r3, r3, [r0]
 801c802:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801c806:	6083      	str	r3, [r0, #8]
 801c808:	8181      	strh	r1, [r0, #12]
 801c80a:	6643      	str	r3, [r0, #100]	; 0x64
 801c80c:	81c2      	strh	r2, [r0, #14]
 801c80e:	6183      	str	r3, [r0, #24]
 801c810:	4619      	mov	r1, r3
 801c812:	2208      	movs	r2, #8
 801c814:	305c      	adds	r0, #92	; 0x5c
 801c816:	f7fe f8cb 	bl	801a9b0 <memset>
 801c81a:	4b05      	ldr	r3, [pc, #20]	; (801c830 <std+0x38>)
 801c81c:	6263      	str	r3, [r4, #36]	; 0x24
 801c81e:	4b05      	ldr	r3, [pc, #20]	; (801c834 <std+0x3c>)
 801c820:	62a3      	str	r3, [r4, #40]	; 0x28
 801c822:	4b05      	ldr	r3, [pc, #20]	; (801c838 <std+0x40>)
 801c824:	62e3      	str	r3, [r4, #44]	; 0x2c
 801c826:	4b05      	ldr	r3, [pc, #20]	; (801c83c <std+0x44>)
 801c828:	6224      	str	r4, [r4, #32]
 801c82a:	6323      	str	r3, [r4, #48]	; 0x30
 801c82c:	bd10      	pop	{r4, pc}
 801c82e:	bf00      	nop
 801c830:	0801d4b5 	.word	0x0801d4b5
 801c834:	0801d4d7 	.word	0x0801d4d7
 801c838:	0801d50f 	.word	0x0801d50f
 801c83c:	0801d533 	.word	0x0801d533

0801c840 <_cleanup_r>:
 801c840:	4901      	ldr	r1, [pc, #4]	; (801c848 <_cleanup_r+0x8>)
 801c842:	f000 b8c1 	b.w	801c9c8 <_fwalk_reent>
 801c846:	bf00      	nop
 801c848:	0801c781 	.word	0x0801c781

0801c84c <__sfmoreglue>:
 801c84c:	b570      	push	{r4, r5, r6, lr}
 801c84e:	2268      	movs	r2, #104	; 0x68
 801c850:	1e4d      	subs	r5, r1, #1
 801c852:	4355      	muls	r5, r2
 801c854:	460e      	mov	r6, r1
 801c856:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801c85a:	f7fe f933 	bl	801aac4 <_malloc_r>
 801c85e:	4604      	mov	r4, r0
 801c860:	b140      	cbz	r0, 801c874 <__sfmoreglue+0x28>
 801c862:	2100      	movs	r1, #0
 801c864:	e9c0 1600 	strd	r1, r6, [r0]
 801c868:	300c      	adds	r0, #12
 801c86a:	60a0      	str	r0, [r4, #8]
 801c86c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801c870:	f7fe f89e 	bl	801a9b0 <memset>
 801c874:	4620      	mov	r0, r4
 801c876:	bd70      	pop	{r4, r5, r6, pc}

0801c878 <__sfp_lock_acquire>:
 801c878:	4801      	ldr	r0, [pc, #4]	; (801c880 <__sfp_lock_acquire+0x8>)
 801c87a:	f000 b8ca 	b.w	801ca12 <__retarget_lock_acquire_recursive>
 801c87e:	bf00      	nop
 801c880:	20013d15 	.word	0x20013d15

0801c884 <__sfp_lock_release>:
 801c884:	4801      	ldr	r0, [pc, #4]	; (801c88c <__sfp_lock_release+0x8>)
 801c886:	f000 b8c5 	b.w	801ca14 <__retarget_lock_release_recursive>
 801c88a:	bf00      	nop
 801c88c:	20013d15 	.word	0x20013d15

0801c890 <__sinit_lock_acquire>:
 801c890:	4801      	ldr	r0, [pc, #4]	; (801c898 <__sinit_lock_acquire+0x8>)
 801c892:	f000 b8be 	b.w	801ca12 <__retarget_lock_acquire_recursive>
 801c896:	bf00      	nop
 801c898:	20013d16 	.word	0x20013d16

0801c89c <__sinit_lock_release>:
 801c89c:	4801      	ldr	r0, [pc, #4]	; (801c8a4 <__sinit_lock_release+0x8>)
 801c89e:	f000 b8b9 	b.w	801ca14 <__retarget_lock_release_recursive>
 801c8a2:	bf00      	nop
 801c8a4:	20013d16 	.word	0x20013d16

0801c8a8 <__sinit>:
 801c8a8:	b510      	push	{r4, lr}
 801c8aa:	4604      	mov	r4, r0
 801c8ac:	f7ff fff0 	bl	801c890 <__sinit_lock_acquire>
 801c8b0:	69a3      	ldr	r3, [r4, #24]
 801c8b2:	b11b      	cbz	r3, 801c8bc <__sinit+0x14>
 801c8b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c8b8:	f7ff bff0 	b.w	801c89c <__sinit_lock_release>
 801c8bc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801c8c0:	6523      	str	r3, [r4, #80]	; 0x50
 801c8c2:	4b13      	ldr	r3, [pc, #76]	; (801c910 <__sinit+0x68>)
 801c8c4:	4a13      	ldr	r2, [pc, #76]	; (801c914 <__sinit+0x6c>)
 801c8c6:	681b      	ldr	r3, [r3, #0]
 801c8c8:	62a2      	str	r2, [r4, #40]	; 0x28
 801c8ca:	42a3      	cmp	r3, r4
 801c8cc:	bf04      	itt	eq
 801c8ce:	2301      	moveq	r3, #1
 801c8d0:	61a3      	streq	r3, [r4, #24]
 801c8d2:	4620      	mov	r0, r4
 801c8d4:	f000 f820 	bl	801c918 <__sfp>
 801c8d8:	6060      	str	r0, [r4, #4]
 801c8da:	4620      	mov	r0, r4
 801c8dc:	f000 f81c 	bl	801c918 <__sfp>
 801c8e0:	60a0      	str	r0, [r4, #8]
 801c8e2:	4620      	mov	r0, r4
 801c8e4:	f000 f818 	bl	801c918 <__sfp>
 801c8e8:	2200      	movs	r2, #0
 801c8ea:	60e0      	str	r0, [r4, #12]
 801c8ec:	2104      	movs	r1, #4
 801c8ee:	6860      	ldr	r0, [r4, #4]
 801c8f0:	f7ff ff82 	bl	801c7f8 <std>
 801c8f4:	68a0      	ldr	r0, [r4, #8]
 801c8f6:	2201      	movs	r2, #1
 801c8f8:	2109      	movs	r1, #9
 801c8fa:	f7ff ff7d 	bl	801c7f8 <std>
 801c8fe:	68e0      	ldr	r0, [r4, #12]
 801c900:	2202      	movs	r2, #2
 801c902:	2112      	movs	r1, #18
 801c904:	f7ff ff78 	bl	801c7f8 <std>
 801c908:	2301      	movs	r3, #1
 801c90a:	61a3      	str	r3, [r4, #24]
 801c90c:	e7d2      	b.n	801c8b4 <__sinit+0xc>
 801c90e:	bf00      	nop
 801c910:	0806d0a0 	.word	0x0806d0a0
 801c914:	0801c841 	.word	0x0801c841

0801c918 <__sfp>:
 801c918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c91a:	4607      	mov	r7, r0
 801c91c:	f7ff ffac 	bl	801c878 <__sfp_lock_acquire>
 801c920:	4b1e      	ldr	r3, [pc, #120]	; (801c99c <__sfp+0x84>)
 801c922:	681e      	ldr	r6, [r3, #0]
 801c924:	69b3      	ldr	r3, [r6, #24]
 801c926:	b913      	cbnz	r3, 801c92e <__sfp+0x16>
 801c928:	4630      	mov	r0, r6
 801c92a:	f7ff ffbd 	bl	801c8a8 <__sinit>
 801c92e:	3648      	adds	r6, #72	; 0x48
 801c930:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801c934:	3b01      	subs	r3, #1
 801c936:	d503      	bpl.n	801c940 <__sfp+0x28>
 801c938:	6833      	ldr	r3, [r6, #0]
 801c93a:	b30b      	cbz	r3, 801c980 <__sfp+0x68>
 801c93c:	6836      	ldr	r6, [r6, #0]
 801c93e:	e7f7      	b.n	801c930 <__sfp+0x18>
 801c940:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801c944:	b9d5      	cbnz	r5, 801c97c <__sfp+0x64>
 801c946:	4b16      	ldr	r3, [pc, #88]	; (801c9a0 <__sfp+0x88>)
 801c948:	60e3      	str	r3, [r4, #12]
 801c94a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801c94e:	6665      	str	r5, [r4, #100]	; 0x64
 801c950:	f000 f85e 	bl	801ca10 <__retarget_lock_init_recursive>
 801c954:	f7ff ff96 	bl	801c884 <__sfp_lock_release>
 801c958:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801c95c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801c960:	6025      	str	r5, [r4, #0]
 801c962:	61a5      	str	r5, [r4, #24]
 801c964:	2208      	movs	r2, #8
 801c966:	4629      	mov	r1, r5
 801c968:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801c96c:	f7fe f820 	bl	801a9b0 <memset>
 801c970:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801c974:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801c978:	4620      	mov	r0, r4
 801c97a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c97c:	3468      	adds	r4, #104	; 0x68
 801c97e:	e7d9      	b.n	801c934 <__sfp+0x1c>
 801c980:	2104      	movs	r1, #4
 801c982:	4638      	mov	r0, r7
 801c984:	f7ff ff62 	bl	801c84c <__sfmoreglue>
 801c988:	4604      	mov	r4, r0
 801c98a:	6030      	str	r0, [r6, #0]
 801c98c:	2800      	cmp	r0, #0
 801c98e:	d1d5      	bne.n	801c93c <__sfp+0x24>
 801c990:	f7ff ff78 	bl	801c884 <__sfp_lock_release>
 801c994:	230c      	movs	r3, #12
 801c996:	603b      	str	r3, [r7, #0]
 801c998:	e7ee      	b.n	801c978 <__sfp+0x60>
 801c99a:	bf00      	nop
 801c99c:	0806d0a0 	.word	0x0806d0a0
 801c9a0:	ffff0001 	.word	0xffff0001

0801c9a4 <fiprintf>:
 801c9a4:	b40e      	push	{r1, r2, r3}
 801c9a6:	b503      	push	{r0, r1, lr}
 801c9a8:	4601      	mov	r1, r0
 801c9aa:	ab03      	add	r3, sp, #12
 801c9ac:	4805      	ldr	r0, [pc, #20]	; (801c9c4 <fiprintf+0x20>)
 801c9ae:	f853 2b04 	ldr.w	r2, [r3], #4
 801c9b2:	6800      	ldr	r0, [r0, #0]
 801c9b4:	9301      	str	r3, [sp, #4]
 801c9b6:	f000 fc4d 	bl	801d254 <_vfiprintf_r>
 801c9ba:	b002      	add	sp, #8
 801c9bc:	f85d eb04 	ldr.w	lr, [sp], #4
 801c9c0:	b003      	add	sp, #12
 801c9c2:	4770      	bx	lr
 801c9c4:	200000cc 	.word	0x200000cc

0801c9c8 <_fwalk_reent>:
 801c9c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c9cc:	4606      	mov	r6, r0
 801c9ce:	4688      	mov	r8, r1
 801c9d0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801c9d4:	2700      	movs	r7, #0
 801c9d6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801c9da:	f1b9 0901 	subs.w	r9, r9, #1
 801c9de:	d505      	bpl.n	801c9ec <_fwalk_reent+0x24>
 801c9e0:	6824      	ldr	r4, [r4, #0]
 801c9e2:	2c00      	cmp	r4, #0
 801c9e4:	d1f7      	bne.n	801c9d6 <_fwalk_reent+0xe>
 801c9e6:	4638      	mov	r0, r7
 801c9e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c9ec:	89ab      	ldrh	r3, [r5, #12]
 801c9ee:	2b01      	cmp	r3, #1
 801c9f0:	d907      	bls.n	801ca02 <_fwalk_reent+0x3a>
 801c9f2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801c9f6:	3301      	adds	r3, #1
 801c9f8:	d003      	beq.n	801ca02 <_fwalk_reent+0x3a>
 801c9fa:	4629      	mov	r1, r5
 801c9fc:	4630      	mov	r0, r6
 801c9fe:	47c0      	blx	r8
 801ca00:	4307      	orrs	r7, r0
 801ca02:	3568      	adds	r5, #104	; 0x68
 801ca04:	e7e9      	b.n	801c9da <_fwalk_reent+0x12>
	...

0801ca08 <_localeconv_r>:
 801ca08:	4800      	ldr	r0, [pc, #0]	; (801ca0c <_localeconv_r+0x4>)
 801ca0a:	4770      	bx	lr
 801ca0c:	20000220 	.word	0x20000220

0801ca10 <__retarget_lock_init_recursive>:
 801ca10:	4770      	bx	lr

0801ca12 <__retarget_lock_acquire_recursive>:
 801ca12:	4770      	bx	lr

0801ca14 <__retarget_lock_release_recursive>:
 801ca14:	4770      	bx	lr

0801ca16 <__swhatbuf_r>:
 801ca16:	b570      	push	{r4, r5, r6, lr}
 801ca18:	460e      	mov	r6, r1
 801ca1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ca1e:	2900      	cmp	r1, #0
 801ca20:	b096      	sub	sp, #88	; 0x58
 801ca22:	4614      	mov	r4, r2
 801ca24:	461d      	mov	r5, r3
 801ca26:	da08      	bge.n	801ca3a <__swhatbuf_r+0x24>
 801ca28:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801ca2c:	2200      	movs	r2, #0
 801ca2e:	602a      	str	r2, [r5, #0]
 801ca30:	061a      	lsls	r2, r3, #24
 801ca32:	d410      	bmi.n	801ca56 <__swhatbuf_r+0x40>
 801ca34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801ca38:	e00e      	b.n	801ca58 <__swhatbuf_r+0x42>
 801ca3a:	466a      	mov	r2, sp
 801ca3c:	f000 fda8 	bl	801d590 <_fstat_r>
 801ca40:	2800      	cmp	r0, #0
 801ca42:	dbf1      	blt.n	801ca28 <__swhatbuf_r+0x12>
 801ca44:	9a01      	ldr	r2, [sp, #4]
 801ca46:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801ca4a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801ca4e:	425a      	negs	r2, r3
 801ca50:	415a      	adcs	r2, r3
 801ca52:	602a      	str	r2, [r5, #0]
 801ca54:	e7ee      	b.n	801ca34 <__swhatbuf_r+0x1e>
 801ca56:	2340      	movs	r3, #64	; 0x40
 801ca58:	2000      	movs	r0, #0
 801ca5a:	6023      	str	r3, [r4, #0]
 801ca5c:	b016      	add	sp, #88	; 0x58
 801ca5e:	bd70      	pop	{r4, r5, r6, pc}

0801ca60 <__smakebuf_r>:
 801ca60:	898b      	ldrh	r3, [r1, #12]
 801ca62:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801ca64:	079d      	lsls	r5, r3, #30
 801ca66:	4606      	mov	r6, r0
 801ca68:	460c      	mov	r4, r1
 801ca6a:	d507      	bpl.n	801ca7c <__smakebuf_r+0x1c>
 801ca6c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801ca70:	6023      	str	r3, [r4, #0]
 801ca72:	6123      	str	r3, [r4, #16]
 801ca74:	2301      	movs	r3, #1
 801ca76:	6163      	str	r3, [r4, #20]
 801ca78:	b002      	add	sp, #8
 801ca7a:	bd70      	pop	{r4, r5, r6, pc}
 801ca7c:	ab01      	add	r3, sp, #4
 801ca7e:	466a      	mov	r2, sp
 801ca80:	f7ff ffc9 	bl	801ca16 <__swhatbuf_r>
 801ca84:	9900      	ldr	r1, [sp, #0]
 801ca86:	4605      	mov	r5, r0
 801ca88:	4630      	mov	r0, r6
 801ca8a:	f7fe f81b 	bl	801aac4 <_malloc_r>
 801ca8e:	b948      	cbnz	r0, 801caa4 <__smakebuf_r+0x44>
 801ca90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ca94:	059a      	lsls	r2, r3, #22
 801ca96:	d4ef      	bmi.n	801ca78 <__smakebuf_r+0x18>
 801ca98:	f023 0303 	bic.w	r3, r3, #3
 801ca9c:	f043 0302 	orr.w	r3, r3, #2
 801caa0:	81a3      	strh	r3, [r4, #12]
 801caa2:	e7e3      	b.n	801ca6c <__smakebuf_r+0xc>
 801caa4:	4b0d      	ldr	r3, [pc, #52]	; (801cadc <__smakebuf_r+0x7c>)
 801caa6:	62b3      	str	r3, [r6, #40]	; 0x28
 801caa8:	89a3      	ldrh	r3, [r4, #12]
 801caaa:	6020      	str	r0, [r4, #0]
 801caac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801cab0:	81a3      	strh	r3, [r4, #12]
 801cab2:	9b00      	ldr	r3, [sp, #0]
 801cab4:	6163      	str	r3, [r4, #20]
 801cab6:	9b01      	ldr	r3, [sp, #4]
 801cab8:	6120      	str	r0, [r4, #16]
 801caba:	b15b      	cbz	r3, 801cad4 <__smakebuf_r+0x74>
 801cabc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801cac0:	4630      	mov	r0, r6
 801cac2:	f000 fd77 	bl	801d5b4 <_isatty_r>
 801cac6:	b128      	cbz	r0, 801cad4 <__smakebuf_r+0x74>
 801cac8:	89a3      	ldrh	r3, [r4, #12]
 801caca:	f023 0303 	bic.w	r3, r3, #3
 801cace:	f043 0301 	orr.w	r3, r3, #1
 801cad2:	81a3      	strh	r3, [r4, #12]
 801cad4:	89a0      	ldrh	r0, [r4, #12]
 801cad6:	4305      	orrs	r5, r0
 801cad8:	81a5      	strh	r5, [r4, #12]
 801cada:	e7cd      	b.n	801ca78 <__smakebuf_r+0x18>
 801cadc:	0801c841 	.word	0x0801c841

0801cae0 <__malloc_lock>:
 801cae0:	4801      	ldr	r0, [pc, #4]	; (801cae8 <__malloc_lock+0x8>)
 801cae2:	f7ff bf96 	b.w	801ca12 <__retarget_lock_acquire_recursive>
 801cae6:	bf00      	nop
 801cae8:	20013d14 	.word	0x20013d14

0801caec <__malloc_unlock>:
 801caec:	4801      	ldr	r0, [pc, #4]	; (801caf4 <__malloc_unlock+0x8>)
 801caee:	f7ff bf91 	b.w	801ca14 <__retarget_lock_release_recursive>
 801caf2:	bf00      	nop
 801caf4:	20013d14 	.word	0x20013d14

0801caf8 <_Balloc>:
 801caf8:	b570      	push	{r4, r5, r6, lr}
 801cafa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801cafc:	4604      	mov	r4, r0
 801cafe:	460d      	mov	r5, r1
 801cb00:	b976      	cbnz	r6, 801cb20 <_Balloc+0x28>
 801cb02:	2010      	movs	r0, #16
 801cb04:	f7fd ff2e 	bl	801a964 <malloc>
 801cb08:	4602      	mov	r2, r0
 801cb0a:	6260      	str	r0, [r4, #36]	; 0x24
 801cb0c:	b920      	cbnz	r0, 801cb18 <_Balloc+0x20>
 801cb0e:	4b18      	ldr	r3, [pc, #96]	; (801cb70 <_Balloc+0x78>)
 801cb10:	4818      	ldr	r0, [pc, #96]	; (801cb74 <_Balloc+0x7c>)
 801cb12:	2166      	movs	r1, #102	; 0x66
 801cb14:	f7fe ff14 	bl	801b940 <__assert_func>
 801cb18:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801cb1c:	6006      	str	r6, [r0, #0]
 801cb1e:	60c6      	str	r6, [r0, #12]
 801cb20:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801cb22:	68f3      	ldr	r3, [r6, #12]
 801cb24:	b183      	cbz	r3, 801cb48 <_Balloc+0x50>
 801cb26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801cb28:	68db      	ldr	r3, [r3, #12]
 801cb2a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801cb2e:	b9b8      	cbnz	r0, 801cb60 <_Balloc+0x68>
 801cb30:	2101      	movs	r1, #1
 801cb32:	fa01 f605 	lsl.w	r6, r1, r5
 801cb36:	1d72      	adds	r2, r6, #5
 801cb38:	0092      	lsls	r2, r2, #2
 801cb3a:	4620      	mov	r0, r4
 801cb3c:	f7fd ff40 	bl	801a9c0 <_calloc_r>
 801cb40:	b160      	cbz	r0, 801cb5c <_Balloc+0x64>
 801cb42:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801cb46:	e00e      	b.n	801cb66 <_Balloc+0x6e>
 801cb48:	2221      	movs	r2, #33	; 0x21
 801cb4a:	2104      	movs	r1, #4
 801cb4c:	4620      	mov	r0, r4
 801cb4e:	f7fd ff37 	bl	801a9c0 <_calloc_r>
 801cb52:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801cb54:	60f0      	str	r0, [r6, #12]
 801cb56:	68db      	ldr	r3, [r3, #12]
 801cb58:	2b00      	cmp	r3, #0
 801cb5a:	d1e4      	bne.n	801cb26 <_Balloc+0x2e>
 801cb5c:	2000      	movs	r0, #0
 801cb5e:	bd70      	pop	{r4, r5, r6, pc}
 801cb60:	6802      	ldr	r2, [r0, #0]
 801cb62:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801cb66:	2300      	movs	r3, #0
 801cb68:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801cb6c:	e7f7      	b.n	801cb5e <_Balloc+0x66>
 801cb6e:	bf00      	nop
 801cb70:	0806d0d8 	.word	0x0806d0d8
 801cb74:	0806d260 	.word	0x0806d260

0801cb78 <_Bfree>:
 801cb78:	b570      	push	{r4, r5, r6, lr}
 801cb7a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801cb7c:	4605      	mov	r5, r0
 801cb7e:	460c      	mov	r4, r1
 801cb80:	b976      	cbnz	r6, 801cba0 <_Bfree+0x28>
 801cb82:	2010      	movs	r0, #16
 801cb84:	f7fd feee 	bl	801a964 <malloc>
 801cb88:	4602      	mov	r2, r0
 801cb8a:	6268      	str	r0, [r5, #36]	; 0x24
 801cb8c:	b920      	cbnz	r0, 801cb98 <_Bfree+0x20>
 801cb8e:	4b09      	ldr	r3, [pc, #36]	; (801cbb4 <_Bfree+0x3c>)
 801cb90:	4809      	ldr	r0, [pc, #36]	; (801cbb8 <_Bfree+0x40>)
 801cb92:	218a      	movs	r1, #138	; 0x8a
 801cb94:	f7fe fed4 	bl	801b940 <__assert_func>
 801cb98:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801cb9c:	6006      	str	r6, [r0, #0]
 801cb9e:	60c6      	str	r6, [r0, #12]
 801cba0:	b13c      	cbz	r4, 801cbb2 <_Bfree+0x3a>
 801cba2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801cba4:	6862      	ldr	r2, [r4, #4]
 801cba6:	68db      	ldr	r3, [r3, #12]
 801cba8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801cbac:	6021      	str	r1, [r4, #0]
 801cbae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801cbb2:	bd70      	pop	{r4, r5, r6, pc}
 801cbb4:	0806d0d8 	.word	0x0806d0d8
 801cbb8:	0806d260 	.word	0x0806d260

0801cbbc <__multadd>:
 801cbbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cbc0:	690d      	ldr	r5, [r1, #16]
 801cbc2:	4607      	mov	r7, r0
 801cbc4:	460c      	mov	r4, r1
 801cbc6:	461e      	mov	r6, r3
 801cbc8:	f101 0c14 	add.w	ip, r1, #20
 801cbcc:	2000      	movs	r0, #0
 801cbce:	f8dc 3000 	ldr.w	r3, [ip]
 801cbd2:	b299      	uxth	r1, r3
 801cbd4:	fb02 6101 	mla	r1, r2, r1, r6
 801cbd8:	0c1e      	lsrs	r6, r3, #16
 801cbda:	0c0b      	lsrs	r3, r1, #16
 801cbdc:	fb02 3306 	mla	r3, r2, r6, r3
 801cbe0:	b289      	uxth	r1, r1
 801cbe2:	3001      	adds	r0, #1
 801cbe4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801cbe8:	4285      	cmp	r5, r0
 801cbea:	f84c 1b04 	str.w	r1, [ip], #4
 801cbee:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801cbf2:	dcec      	bgt.n	801cbce <__multadd+0x12>
 801cbf4:	b30e      	cbz	r6, 801cc3a <__multadd+0x7e>
 801cbf6:	68a3      	ldr	r3, [r4, #8]
 801cbf8:	42ab      	cmp	r3, r5
 801cbfa:	dc19      	bgt.n	801cc30 <__multadd+0x74>
 801cbfc:	6861      	ldr	r1, [r4, #4]
 801cbfe:	4638      	mov	r0, r7
 801cc00:	3101      	adds	r1, #1
 801cc02:	f7ff ff79 	bl	801caf8 <_Balloc>
 801cc06:	4680      	mov	r8, r0
 801cc08:	b928      	cbnz	r0, 801cc16 <__multadd+0x5a>
 801cc0a:	4602      	mov	r2, r0
 801cc0c:	4b0c      	ldr	r3, [pc, #48]	; (801cc40 <__multadd+0x84>)
 801cc0e:	480d      	ldr	r0, [pc, #52]	; (801cc44 <__multadd+0x88>)
 801cc10:	21b5      	movs	r1, #181	; 0xb5
 801cc12:	f7fe fe95 	bl	801b940 <__assert_func>
 801cc16:	6922      	ldr	r2, [r4, #16]
 801cc18:	3202      	adds	r2, #2
 801cc1a:	f104 010c 	add.w	r1, r4, #12
 801cc1e:	0092      	lsls	r2, r2, #2
 801cc20:	300c      	adds	r0, #12
 801cc22:	f7fd feb7 	bl	801a994 <memcpy>
 801cc26:	4621      	mov	r1, r4
 801cc28:	4638      	mov	r0, r7
 801cc2a:	f7ff ffa5 	bl	801cb78 <_Bfree>
 801cc2e:	4644      	mov	r4, r8
 801cc30:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801cc34:	3501      	adds	r5, #1
 801cc36:	615e      	str	r6, [r3, #20]
 801cc38:	6125      	str	r5, [r4, #16]
 801cc3a:	4620      	mov	r0, r4
 801cc3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cc40:	0806d1ee 	.word	0x0806d1ee
 801cc44:	0806d260 	.word	0x0806d260

0801cc48 <__hi0bits>:
 801cc48:	0c03      	lsrs	r3, r0, #16
 801cc4a:	041b      	lsls	r3, r3, #16
 801cc4c:	b9d3      	cbnz	r3, 801cc84 <__hi0bits+0x3c>
 801cc4e:	0400      	lsls	r0, r0, #16
 801cc50:	2310      	movs	r3, #16
 801cc52:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801cc56:	bf04      	itt	eq
 801cc58:	0200      	lsleq	r0, r0, #8
 801cc5a:	3308      	addeq	r3, #8
 801cc5c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801cc60:	bf04      	itt	eq
 801cc62:	0100      	lsleq	r0, r0, #4
 801cc64:	3304      	addeq	r3, #4
 801cc66:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801cc6a:	bf04      	itt	eq
 801cc6c:	0080      	lsleq	r0, r0, #2
 801cc6e:	3302      	addeq	r3, #2
 801cc70:	2800      	cmp	r0, #0
 801cc72:	db05      	blt.n	801cc80 <__hi0bits+0x38>
 801cc74:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801cc78:	f103 0301 	add.w	r3, r3, #1
 801cc7c:	bf08      	it	eq
 801cc7e:	2320      	moveq	r3, #32
 801cc80:	4618      	mov	r0, r3
 801cc82:	4770      	bx	lr
 801cc84:	2300      	movs	r3, #0
 801cc86:	e7e4      	b.n	801cc52 <__hi0bits+0xa>

0801cc88 <__lo0bits>:
 801cc88:	6803      	ldr	r3, [r0, #0]
 801cc8a:	f013 0207 	ands.w	r2, r3, #7
 801cc8e:	4601      	mov	r1, r0
 801cc90:	d00b      	beq.n	801ccaa <__lo0bits+0x22>
 801cc92:	07da      	lsls	r2, r3, #31
 801cc94:	d423      	bmi.n	801ccde <__lo0bits+0x56>
 801cc96:	0798      	lsls	r0, r3, #30
 801cc98:	bf49      	itett	mi
 801cc9a:	085b      	lsrmi	r3, r3, #1
 801cc9c:	089b      	lsrpl	r3, r3, #2
 801cc9e:	2001      	movmi	r0, #1
 801cca0:	600b      	strmi	r3, [r1, #0]
 801cca2:	bf5c      	itt	pl
 801cca4:	600b      	strpl	r3, [r1, #0]
 801cca6:	2002      	movpl	r0, #2
 801cca8:	4770      	bx	lr
 801ccaa:	b298      	uxth	r0, r3
 801ccac:	b9a8      	cbnz	r0, 801ccda <__lo0bits+0x52>
 801ccae:	0c1b      	lsrs	r3, r3, #16
 801ccb0:	2010      	movs	r0, #16
 801ccb2:	b2da      	uxtb	r2, r3
 801ccb4:	b90a      	cbnz	r2, 801ccba <__lo0bits+0x32>
 801ccb6:	3008      	adds	r0, #8
 801ccb8:	0a1b      	lsrs	r3, r3, #8
 801ccba:	071a      	lsls	r2, r3, #28
 801ccbc:	bf04      	itt	eq
 801ccbe:	091b      	lsreq	r3, r3, #4
 801ccc0:	3004      	addeq	r0, #4
 801ccc2:	079a      	lsls	r2, r3, #30
 801ccc4:	bf04      	itt	eq
 801ccc6:	089b      	lsreq	r3, r3, #2
 801ccc8:	3002      	addeq	r0, #2
 801ccca:	07da      	lsls	r2, r3, #31
 801cccc:	d403      	bmi.n	801ccd6 <__lo0bits+0x4e>
 801ccce:	085b      	lsrs	r3, r3, #1
 801ccd0:	f100 0001 	add.w	r0, r0, #1
 801ccd4:	d005      	beq.n	801cce2 <__lo0bits+0x5a>
 801ccd6:	600b      	str	r3, [r1, #0]
 801ccd8:	4770      	bx	lr
 801ccda:	4610      	mov	r0, r2
 801ccdc:	e7e9      	b.n	801ccb2 <__lo0bits+0x2a>
 801ccde:	2000      	movs	r0, #0
 801cce0:	4770      	bx	lr
 801cce2:	2020      	movs	r0, #32
 801cce4:	4770      	bx	lr
	...

0801cce8 <__i2b>:
 801cce8:	b510      	push	{r4, lr}
 801ccea:	460c      	mov	r4, r1
 801ccec:	2101      	movs	r1, #1
 801ccee:	f7ff ff03 	bl	801caf8 <_Balloc>
 801ccf2:	4602      	mov	r2, r0
 801ccf4:	b928      	cbnz	r0, 801cd02 <__i2b+0x1a>
 801ccf6:	4b05      	ldr	r3, [pc, #20]	; (801cd0c <__i2b+0x24>)
 801ccf8:	4805      	ldr	r0, [pc, #20]	; (801cd10 <__i2b+0x28>)
 801ccfa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801ccfe:	f7fe fe1f 	bl	801b940 <__assert_func>
 801cd02:	2301      	movs	r3, #1
 801cd04:	6144      	str	r4, [r0, #20]
 801cd06:	6103      	str	r3, [r0, #16]
 801cd08:	bd10      	pop	{r4, pc}
 801cd0a:	bf00      	nop
 801cd0c:	0806d1ee 	.word	0x0806d1ee
 801cd10:	0806d260 	.word	0x0806d260

0801cd14 <__multiply>:
 801cd14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cd18:	4691      	mov	r9, r2
 801cd1a:	690a      	ldr	r2, [r1, #16]
 801cd1c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801cd20:	429a      	cmp	r2, r3
 801cd22:	bfb8      	it	lt
 801cd24:	460b      	movlt	r3, r1
 801cd26:	460c      	mov	r4, r1
 801cd28:	bfbc      	itt	lt
 801cd2a:	464c      	movlt	r4, r9
 801cd2c:	4699      	movlt	r9, r3
 801cd2e:	6927      	ldr	r7, [r4, #16]
 801cd30:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801cd34:	68a3      	ldr	r3, [r4, #8]
 801cd36:	6861      	ldr	r1, [r4, #4]
 801cd38:	eb07 060a 	add.w	r6, r7, sl
 801cd3c:	42b3      	cmp	r3, r6
 801cd3e:	b085      	sub	sp, #20
 801cd40:	bfb8      	it	lt
 801cd42:	3101      	addlt	r1, #1
 801cd44:	f7ff fed8 	bl	801caf8 <_Balloc>
 801cd48:	b930      	cbnz	r0, 801cd58 <__multiply+0x44>
 801cd4a:	4602      	mov	r2, r0
 801cd4c:	4b44      	ldr	r3, [pc, #272]	; (801ce60 <__multiply+0x14c>)
 801cd4e:	4845      	ldr	r0, [pc, #276]	; (801ce64 <__multiply+0x150>)
 801cd50:	f240 115d 	movw	r1, #349	; 0x15d
 801cd54:	f7fe fdf4 	bl	801b940 <__assert_func>
 801cd58:	f100 0514 	add.w	r5, r0, #20
 801cd5c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801cd60:	462b      	mov	r3, r5
 801cd62:	2200      	movs	r2, #0
 801cd64:	4543      	cmp	r3, r8
 801cd66:	d321      	bcc.n	801cdac <__multiply+0x98>
 801cd68:	f104 0314 	add.w	r3, r4, #20
 801cd6c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801cd70:	f109 0314 	add.w	r3, r9, #20
 801cd74:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801cd78:	9202      	str	r2, [sp, #8]
 801cd7a:	1b3a      	subs	r2, r7, r4
 801cd7c:	3a15      	subs	r2, #21
 801cd7e:	f022 0203 	bic.w	r2, r2, #3
 801cd82:	3204      	adds	r2, #4
 801cd84:	f104 0115 	add.w	r1, r4, #21
 801cd88:	428f      	cmp	r7, r1
 801cd8a:	bf38      	it	cc
 801cd8c:	2204      	movcc	r2, #4
 801cd8e:	9201      	str	r2, [sp, #4]
 801cd90:	9a02      	ldr	r2, [sp, #8]
 801cd92:	9303      	str	r3, [sp, #12]
 801cd94:	429a      	cmp	r2, r3
 801cd96:	d80c      	bhi.n	801cdb2 <__multiply+0x9e>
 801cd98:	2e00      	cmp	r6, #0
 801cd9a:	dd03      	ble.n	801cda4 <__multiply+0x90>
 801cd9c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801cda0:	2b00      	cmp	r3, #0
 801cda2:	d05a      	beq.n	801ce5a <__multiply+0x146>
 801cda4:	6106      	str	r6, [r0, #16]
 801cda6:	b005      	add	sp, #20
 801cda8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cdac:	f843 2b04 	str.w	r2, [r3], #4
 801cdb0:	e7d8      	b.n	801cd64 <__multiply+0x50>
 801cdb2:	f8b3 a000 	ldrh.w	sl, [r3]
 801cdb6:	f1ba 0f00 	cmp.w	sl, #0
 801cdba:	d024      	beq.n	801ce06 <__multiply+0xf2>
 801cdbc:	f104 0e14 	add.w	lr, r4, #20
 801cdc0:	46a9      	mov	r9, r5
 801cdc2:	f04f 0c00 	mov.w	ip, #0
 801cdc6:	f85e 2b04 	ldr.w	r2, [lr], #4
 801cdca:	f8d9 1000 	ldr.w	r1, [r9]
 801cdce:	fa1f fb82 	uxth.w	fp, r2
 801cdd2:	b289      	uxth	r1, r1
 801cdd4:	fb0a 110b 	mla	r1, sl, fp, r1
 801cdd8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801cddc:	f8d9 2000 	ldr.w	r2, [r9]
 801cde0:	4461      	add	r1, ip
 801cde2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801cde6:	fb0a c20b 	mla	r2, sl, fp, ip
 801cdea:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801cdee:	b289      	uxth	r1, r1
 801cdf0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801cdf4:	4577      	cmp	r7, lr
 801cdf6:	f849 1b04 	str.w	r1, [r9], #4
 801cdfa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801cdfe:	d8e2      	bhi.n	801cdc6 <__multiply+0xb2>
 801ce00:	9a01      	ldr	r2, [sp, #4]
 801ce02:	f845 c002 	str.w	ip, [r5, r2]
 801ce06:	9a03      	ldr	r2, [sp, #12]
 801ce08:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801ce0c:	3304      	adds	r3, #4
 801ce0e:	f1b9 0f00 	cmp.w	r9, #0
 801ce12:	d020      	beq.n	801ce56 <__multiply+0x142>
 801ce14:	6829      	ldr	r1, [r5, #0]
 801ce16:	f104 0c14 	add.w	ip, r4, #20
 801ce1a:	46ae      	mov	lr, r5
 801ce1c:	f04f 0a00 	mov.w	sl, #0
 801ce20:	f8bc b000 	ldrh.w	fp, [ip]
 801ce24:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801ce28:	fb09 220b 	mla	r2, r9, fp, r2
 801ce2c:	4492      	add	sl, r2
 801ce2e:	b289      	uxth	r1, r1
 801ce30:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 801ce34:	f84e 1b04 	str.w	r1, [lr], #4
 801ce38:	f85c 2b04 	ldr.w	r2, [ip], #4
 801ce3c:	f8be 1000 	ldrh.w	r1, [lr]
 801ce40:	0c12      	lsrs	r2, r2, #16
 801ce42:	fb09 1102 	mla	r1, r9, r2, r1
 801ce46:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801ce4a:	4567      	cmp	r7, ip
 801ce4c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801ce50:	d8e6      	bhi.n	801ce20 <__multiply+0x10c>
 801ce52:	9a01      	ldr	r2, [sp, #4]
 801ce54:	50a9      	str	r1, [r5, r2]
 801ce56:	3504      	adds	r5, #4
 801ce58:	e79a      	b.n	801cd90 <__multiply+0x7c>
 801ce5a:	3e01      	subs	r6, #1
 801ce5c:	e79c      	b.n	801cd98 <__multiply+0x84>
 801ce5e:	bf00      	nop
 801ce60:	0806d1ee 	.word	0x0806d1ee
 801ce64:	0806d260 	.word	0x0806d260

0801ce68 <__pow5mult>:
 801ce68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ce6c:	4615      	mov	r5, r2
 801ce6e:	f012 0203 	ands.w	r2, r2, #3
 801ce72:	4606      	mov	r6, r0
 801ce74:	460f      	mov	r7, r1
 801ce76:	d007      	beq.n	801ce88 <__pow5mult+0x20>
 801ce78:	4c25      	ldr	r4, [pc, #148]	; (801cf10 <__pow5mult+0xa8>)
 801ce7a:	3a01      	subs	r2, #1
 801ce7c:	2300      	movs	r3, #0
 801ce7e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801ce82:	f7ff fe9b 	bl	801cbbc <__multadd>
 801ce86:	4607      	mov	r7, r0
 801ce88:	10ad      	asrs	r5, r5, #2
 801ce8a:	d03d      	beq.n	801cf08 <__pow5mult+0xa0>
 801ce8c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801ce8e:	b97c      	cbnz	r4, 801ceb0 <__pow5mult+0x48>
 801ce90:	2010      	movs	r0, #16
 801ce92:	f7fd fd67 	bl	801a964 <malloc>
 801ce96:	4602      	mov	r2, r0
 801ce98:	6270      	str	r0, [r6, #36]	; 0x24
 801ce9a:	b928      	cbnz	r0, 801cea8 <__pow5mult+0x40>
 801ce9c:	4b1d      	ldr	r3, [pc, #116]	; (801cf14 <__pow5mult+0xac>)
 801ce9e:	481e      	ldr	r0, [pc, #120]	; (801cf18 <__pow5mult+0xb0>)
 801cea0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801cea4:	f7fe fd4c 	bl	801b940 <__assert_func>
 801cea8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801ceac:	6004      	str	r4, [r0, #0]
 801ceae:	60c4      	str	r4, [r0, #12]
 801ceb0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801ceb4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801ceb8:	b94c      	cbnz	r4, 801cece <__pow5mult+0x66>
 801ceba:	f240 2171 	movw	r1, #625	; 0x271
 801cebe:	4630      	mov	r0, r6
 801cec0:	f7ff ff12 	bl	801cce8 <__i2b>
 801cec4:	2300      	movs	r3, #0
 801cec6:	f8c8 0008 	str.w	r0, [r8, #8]
 801ceca:	4604      	mov	r4, r0
 801cecc:	6003      	str	r3, [r0, #0]
 801cece:	f04f 0900 	mov.w	r9, #0
 801ced2:	07eb      	lsls	r3, r5, #31
 801ced4:	d50a      	bpl.n	801ceec <__pow5mult+0x84>
 801ced6:	4639      	mov	r1, r7
 801ced8:	4622      	mov	r2, r4
 801ceda:	4630      	mov	r0, r6
 801cedc:	f7ff ff1a 	bl	801cd14 <__multiply>
 801cee0:	4639      	mov	r1, r7
 801cee2:	4680      	mov	r8, r0
 801cee4:	4630      	mov	r0, r6
 801cee6:	f7ff fe47 	bl	801cb78 <_Bfree>
 801ceea:	4647      	mov	r7, r8
 801ceec:	106d      	asrs	r5, r5, #1
 801ceee:	d00b      	beq.n	801cf08 <__pow5mult+0xa0>
 801cef0:	6820      	ldr	r0, [r4, #0]
 801cef2:	b938      	cbnz	r0, 801cf04 <__pow5mult+0x9c>
 801cef4:	4622      	mov	r2, r4
 801cef6:	4621      	mov	r1, r4
 801cef8:	4630      	mov	r0, r6
 801cefa:	f7ff ff0b 	bl	801cd14 <__multiply>
 801cefe:	6020      	str	r0, [r4, #0]
 801cf00:	f8c0 9000 	str.w	r9, [r0]
 801cf04:	4604      	mov	r4, r0
 801cf06:	e7e4      	b.n	801ced2 <__pow5mult+0x6a>
 801cf08:	4638      	mov	r0, r7
 801cf0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801cf0e:	bf00      	nop
 801cf10:	0806d3b0 	.word	0x0806d3b0
 801cf14:	0806d0d8 	.word	0x0806d0d8
 801cf18:	0806d260 	.word	0x0806d260

0801cf1c <__lshift>:
 801cf1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cf20:	460c      	mov	r4, r1
 801cf22:	6849      	ldr	r1, [r1, #4]
 801cf24:	6923      	ldr	r3, [r4, #16]
 801cf26:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801cf2a:	68a3      	ldr	r3, [r4, #8]
 801cf2c:	4607      	mov	r7, r0
 801cf2e:	4691      	mov	r9, r2
 801cf30:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801cf34:	f108 0601 	add.w	r6, r8, #1
 801cf38:	42b3      	cmp	r3, r6
 801cf3a:	db0b      	blt.n	801cf54 <__lshift+0x38>
 801cf3c:	4638      	mov	r0, r7
 801cf3e:	f7ff fddb 	bl	801caf8 <_Balloc>
 801cf42:	4605      	mov	r5, r0
 801cf44:	b948      	cbnz	r0, 801cf5a <__lshift+0x3e>
 801cf46:	4602      	mov	r2, r0
 801cf48:	4b2a      	ldr	r3, [pc, #168]	; (801cff4 <__lshift+0xd8>)
 801cf4a:	482b      	ldr	r0, [pc, #172]	; (801cff8 <__lshift+0xdc>)
 801cf4c:	f240 11d9 	movw	r1, #473	; 0x1d9
 801cf50:	f7fe fcf6 	bl	801b940 <__assert_func>
 801cf54:	3101      	adds	r1, #1
 801cf56:	005b      	lsls	r3, r3, #1
 801cf58:	e7ee      	b.n	801cf38 <__lshift+0x1c>
 801cf5a:	2300      	movs	r3, #0
 801cf5c:	f100 0114 	add.w	r1, r0, #20
 801cf60:	f100 0210 	add.w	r2, r0, #16
 801cf64:	4618      	mov	r0, r3
 801cf66:	4553      	cmp	r3, sl
 801cf68:	db37      	blt.n	801cfda <__lshift+0xbe>
 801cf6a:	6920      	ldr	r0, [r4, #16]
 801cf6c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801cf70:	f104 0314 	add.w	r3, r4, #20
 801cf74:	f019 091f 	ands.w	r9, r9, #31
 801cf78:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801cf7c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801cf80:	d02f      	beq.n	801cfe2 <__lshift+0xc6>
 801cf82:	f1c9 0e20 	rsb	lr, r9, #32
 801cf86:	468a      	mov	sl, r1
 801cf88:	f04f 0c00 	mov.w	ip, #0
 801cf8c:	681a      	ldr	r2, [r3, #0]
 801cf8e:	fa02 f209 	lsl.w	r2, r2, r9
 801cf92:	ea42 020c 	orr.w	r2, r2, ip
 801cf96:	f84a 2b04 	str.w	r2, [sl], #4
 801cf9a:	f853 2b04 	ldr.w	r2, [r3], #4
 801cf9e:	4298      	cmp	r0, r3
 801cfa0:	fa22 fc0e 	lsr.w	ip, r2, lr
 801cfa4:	d8f2      	bhi.n	801cf8c <__lshift+0x70>
 801cfa6:	1b03      	subs	r3, r0, r4
 801cfa8:	3b15      	subs	r3, #21
 801cfaa:	f023 0303 	bic.w	r3, r3, #3
 801cfae:	3304      	adds	r3, #4
 801cfb0:	f104 0215 	add.w	r2, r4, #21
 801cfb4:	4290      	cmp	r0, r2
 801cfb6:	bf38      	it	cc
 801cfb8:	2304      	movcc	r3, #4
 801cfba:	f841 c003 	str.w	ip, [r1, r3]
 801cfbe:	f1bc 0f00 	cmp.w	ip, #0
 801cfc2:	d001      	beq.n	801cfc8 <__lshift+0xac>
 801cfc4:	f108 0602 	add.w	r6, r8, #2
 801cfc8:	3e01      	subs	r6, #1
 801cfca:	4638      	mov	r0, r7
 801cfcc:	612e      	str	r6, [r5, #16]
 801cfce:	4621      	mov	r1, r4
 801cfd0:	f7ff fdd2 	bl	801cb78 <_Bfree>
 801cfd4:	4628      	mov	r0, r5
 801cfd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cfda:	f842 0f04 	str.w	r0, [r2, #4]!
 801cfde:	3301      	adds	r3, #1
 801cfe0:	e7c1      	b.n	801cf66 <__lshift+0x4a>
 801cfe2:	3904      	subs	r1, #4
 801cfe4:	f853 2b04 	ldr.w	r2, [r3], #4
 801cfe8:	f841 2f04 	str.w	r2, [r1, #4]!
 801cfec:	4298      	cmp	r0, r3
 801cfee:	d8f9      	bhi.n	801cfe4 <__lshift+0xc8>
 801cff0:	e7ea      	b.n	801cfc8 <__lshift+0xac>
 801cff2:	bf00      	nop
 801cff4:	0806d1ee 	.word	0x0806d1ee
 801cff8:	0806d260 	.word	0x0806d260

0801cffc <__mcmp>:
 801cffc:	b530      	push	{r4, r5, lr}
 801cffe:	6902      	ldr	r2, [r0, #16]
 801d000:	690c      	ldr	r4, [r1, #16]
 801d002:	1b12      	subs	r2, r2, r4
 801d004:	d10e      	bne.n	801d024 <__mcmp+0x28>
 801d006:	f100 0314 	add.w	r3, r0, #20
 801d00a:	3114      	adds	r1, #20
 801d00c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801d010:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801d014:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801d018:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801d01c:	42a5      	cmp	r5, r4
 801d01e:	d003      	beq.n	801d028 <__mcmp+0x2c>
 801d020:	d305      	bcc.n	801d02e <__mcmp+0x32>
 801d022:	2201      	movs	r2, #1
 801d024:	4610      	mov	r0, r2
 801d026:	bd30      	pop	{r4, r5, pc}
 801d028:	4283      	cmp	r3, r0
 801d02a:	d3f3      	bcc.n	801d014 <__mcmp+0x18>
 801d02c:	e7fa      	b.n	801d024 <__mcmp+0x28>
 801d02e:	f04f 32ff 	mov.w	r2, #4294967295
 801d032:	e7f7      	b.n	801d024 <__mcmp+0x28>

0801d034 <__mdiff>:
 801d034:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d038:	460c      	mov	r4, r1
 801d03a:	4606      	mov	r6, r0
 801d03c:	4611      	mov	r1, r2
 801d03e:	4620      	mov	r0, r4
 801d040:	4690      	mov	r8, r2
 801d042:	f7ff ffdb 	bl	801cffc <__mcmp>
 801d046:	1e05      	subs	r5, r0, #0
 801d048:	d110      	bne.n	801d06c <__mdiff+0x38>
 801d04a:	4629      	mov	r1, r5
 801d04c:	4630      	mov	r0, r6
 801d04e:	f7ff fd53 	bl	801caf8 <_Balloc>
 801d052:	b930      	cbnz	r0, 801d062 <__mdiff+0x2e>
 801d054:	4b3a      	ldr	r3, [pc, #232]	; (801d140 <__mdiff+0x10c>)
 801d056:	4602      	mov	r2, r0
 801d058:	f240 2132 	movw	r1, #562	; 0x232
 801d05c:	4839      	ldr	r0, [pc, #228]	; (801d144 <__mdiff+0x110>)
 801d05e:	f7fe fc6f 	bl	801b940 <__assert_func>
 801d062:	2301      	movs	r3, #1
 801d064:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801d068:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d06c:	bfa4      	itt	ge
 801d06e:	4643      	movge	r3, r8
 801d070:	46a0      	movge	r8, r4
 801d072:	4630      	mov	r0, r6
 801d074:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801d078:	bfa6      	itte	ge
 801d07a:	461c      	movge	r4, r3
 801d07c:	2500      	movge	r5, #0
 801d07e:	2501      	movlt	r5, #1
 801d080:	f7ff fd3a 	bl	801caf8 <_Balloc>
 801d084:	b920      	cbnz	r0, 801d090 <__mdiff+0x5c>
 801d086:	4b2e      	ldr	r3, [pc, #184]	; (801d140 <__mdiff+0x10c>)
 801d088:	4602      	mov	r2, r0
 801d08a:	f44f 7110 	mov.w	r1, #576	; 0x240
 801d08e:	e7e5      	b.n	801d05c <__mdiff+0x28>
 801d090:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801d094:	6926      	ldr	r6, [r4, #16]
 801d096:	60c5      	str	r5, [r0, #12]
 801d098:	f104 0914 	add.w	r9, r4, #20
 801d09c:	f108 0514 	add.w	r5, r8, #20
 801d0a0:	f100 0e14 	add.w	lr, r0, #20
 801d0a4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801d0a8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801d0ac:	f108 0210 	add.w	r2, r8, #16
 801d0b0:	46f2      	mov	sl, lr
 801d0b2:	2100      	movs	r1, #0
 801d0b4:	f859 3b04 	ldr.w	r3, [r9], #4
 801d0b8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801d0bc:	fa1f f883 	uxth.w	r8, r3
 801d0c0:	fa11 f18b 	uxtah	r1, r1, fp
 801d0c4:	0c1b      	lsrs	r3, r3, #16
 801d0c6:	eba1 0808 	sub.w	r8, r1, r8
 801d0ca:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801d0ce:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801d0d2:	fa1f f888 	uxth.w	r8, r8
 801d0d6:	1419      	asrs	r1, r3, #16
 801d0d8:	454e      	cmp	r6, r9
 801d0da:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801d0de:	f84a 3b04 	str.w	r3, [sl], #4
 801d0e2:	d8e7      	bhi.n	801d0b4 <__mdiff+0x80>
 801d0e4:	1b33      	subs	r3, r6, r4
 801d0e6:	3b15      	subs	r3, #21
 801d0e8:	f023 0303 	bic.w	r3, r3, #3
 801d0ec:	3304      	adds	r3, #4
 801d0ee:	3415      	adds	r4, #21
 801d0f0:	42a6      	cmp	r6, r4
 801d0f2:	bf38      	it	cc
 801d0f4:	2304      	movcc	r3, #4
 801d0f6:	441d      	add	r5, r3
 801d0f8:	4473      	add	r3, lr
 801d0fa:	469e      	mov	lr, r3
 801d0fc:	462e      	mov	r6, r5
 801d0fe:	4566      	cmp	r6, ip
 801d100:	d30e      	bcc.n	801d120 <__mdiff+0xec>
 801d102:	f10c 0203 	add.w	r2, ip, #3
 801d106:	1b52      	subs	r2, r2, r5
 801d108:	f022 0203 	bic.w	r2, r2, #3
 801d10c:	3d03      	subs	r5, #3
 801d10e:	45ac      	cmp	ip, r5
 801d110:	bf38      	it	cc
 801d112:	2200      	movcc	r2, #0
 801d114:	441a      	add	r2, r3
 801d116:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801d11a:	b17b      	cbz	r3, 801d13c <__mdiff+0x108>
 801d11c:	6107      	str	r7, [r0, #16]
 801d11e:	e7a3      	b.n	801d068 <__mdiff+0x34>
 801d120:	f856 8b04 	ldr.w	r8, [r6], #4
 801d124:	fa11 f288 	uxtah	r2, r1, r8
 801d128:	1414      	asrs	r4, r2, #16
 801d12a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801d12e:	b292      	uxth	r2, r2
 801d130:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801d134:	f84e 2b04 	str.w	r2, [lr], #4
 801d138:	1421      	asrs	r1, r4, #16
 801d13a:	e7e0      	b.n	801d0fe <__mdiff+0xca>
 801d13c:	3f01      	subs	r7, #1
 801d13e:	e7ea      	b.n	801d116 <__mdiff+0xe2>
 801d140:	0806d1ee 	.word	0x0806d1ee
 801d144:	0806d260 	.word	0x0806d260

0801d148 <__d2b>:
 801d148:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801d14c:	4689      	mov	r9, r1
 801d14e:	2101      	movs	r1, #1
 801d150:	ec57 6b10 	vmov	r6, r7, d0
 801d154:	4690      	mov	r8, r2
 801d156:	f7ff fccf 	bl	801caf8 <_Balloc>
 801d15a:	4604      	mov	r4, r0
 801d15c:	b930      	cbnz	r0, 801d16c <__d2b+0x24>
 801d15e:	4602      	mov	r2, r0
 801d160:	4b25      	ldr	r3, [pc, #148]	; (801d1f8 <__d2b+0xb0>)
 801d162:	4826      	ldr	r0, [pc, #152]	; (801d1fc <__d2b+0xb4>)
 801d164:	f240 310a 	movw	r1, #778	; 0x30a
 801d168:	f7fe fbea 	bl	801b940 <__assert_func>
 801d16c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801d170:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801d174:	bb35      	cbnz	r5, 801d1c4 <__d2b+0x7c>
 801d176:	2e00      	cmp	r6, #0
 801d178:	9301      	str	r3, [sp, #4]
 801d17a:	d028      	beq.n	801d1ce <__d2b+0x86>
 801d17c:	4668      	mov	r0, sp
 801d17e:	9600      	str	r6, [sp, #0]
 801d180:	f7ff fd82 	bl	801cc88 <__lo0bits>
 801d184:	9900      	ldr	r1, [sp, #0]
 801d186:	b300      	cbz	r0, 801d1ca <__d2b+0x82>
 801d188:	9a01      	ldr	r2, [sp, #4]
 801d18a:	f1c0 0320 	rsb	r3, r0, #32
 801d18e:	fa02 f303 	lsl.w	r3, r2, r3
 801d192:	430b      	orrs	r3, r1
 801d194:	40c2      	lsrs	r2, r0
 801d196:	6163      	str	r3, [r4, #20]
 801d198:	9201      	str	r2, [sp, #4]
 801d19a:	9b01      	ldr	r3, [sp, #4]
 801d19c:	61a3      	str	r3, [r4, #24]
 801d19e:	2b00      	cmp	r3, #0
 801d1a0:	bf14      	ite	ne
 801d1a2:	2202      	movne	r2, #2
 801d1a4:	2201      	moveq	r2, #1
 801d1a6:	6122      	str	r2, [r4, #16]
 801d1a8:	b1d5      	cbz	r5, 801d1e0 <__d2b+0x98>
 801d1aa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801d1ae:	4405      	add	r5, r0
 801d1b0:	f8c9 5000 	str.w	r5, [r9]
 801d1b4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801d1b8:	f8c8 0000 	str.w	r0, [r8]
 801d1bc:	4620      	mov	r0, r4
 801d1be:	b003      	add	sp, #12
 801d1c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d1c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801d1c8:	e7d5      	b.n	801d176 <__d2b+0x2e>
 801d1ca:	6161      	str	r1, [r4, #20]
 801d1cc:	e7e5      	b.n	801d19a <__d2b+0x52>
 801d1ce:	a801      	add	r0, sp, #4
 801d1d0:	f7ff fd5a 	bl	801cc88 <__lo0bits>
 801d1d4:	9b01      	ldr	r3, [sp, #4]
 801d1d6:	6163      	str	r3, [r4, #20]
 801d1d8:	2201      	movs	r2, #1
 801d1da:	6122      	str	r2, [r4, #16]
 801d1dc:	3020      	adds	r0, #32
 801d1de:	e7e3      	b.n	801d1a8 <__d2b+0x60>
 801d1e0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801d1e4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801d1e8:	f8c9 0000 	str.w	r0, [r9]
 801d1ec:	6918      	ldr	r0, [r3, #16]
 801d1ee:	f7ff fd2b 	bl	801cc48 <__hi0bits>
 801d1f2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801d1f6:	e7df      	b.n	801d1b8 <__d2b+0x70>
 801d1f8:	0806d1ee 	.word	0x0806d1ee
 801d1fc:	0806d260 	.word	0x0806d260

0801d200 <__sfputc_r>:
 801d200:	6893      	ldr	r3, [r2, #8]
 801d202:	3b01      	subs	r3, #1
 801d204:	2b00      	cmp	r3, #0
 801d206:	b410      	push	{r4}
 801d208:	6093      	str	r3, [r2, #8]
 801d20a:	da08      	bge.n	801d21e <__sfputc_r+0x1e>
 801d20c:	6994      	ldr	r4, [r2, #24]
 801d20e:	42a3      	cmp	r3, r4
 801d210:	db01      	blt.n	801d216 <__sfputc_r+0x16>
 801d212:	290a      	cmp	r1, #10
 801d214:	d103      	bne.n	801d21e <__sfputc_r+0x1e>
 801d216:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d21a:	f7fe bad1 	b.w	801b7c0 <__swbuf_r>
 801d21e:	6813      	ldr	r3, [r2, #0]
 801d220:	1c58      	adds	r0, r3, #1
 801d222:	6010      	str	r0, [r2, #0]
 801d224:	7019      	strb	r1, [r3, #0]
 801d226:	4608      	mov	r0, r1
 801d228:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d22c:	4770      	bx	lr

0801d22e <__sfputs_r>:
 801d22e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d230:	4606      	mov	r6, r0
 801d232:	460f      	mov	r7, r1
 801d234:	4614      	mov	r4, r2
 801d236:	18d5      	adds	r5, r2, r3
 801d238:	42ac      	cmp	r4, r5
 801d23a:	d101      	bne.n	801d240 <__sfputs_r+0x12>
 801d23c:	2000      	movs	r0, #0
 801d23e:	e007      	b.n	801d250 <__sfputs_r+0x22>
 801d240:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d244:	463a      	mov	r2, r7
 801d246:	4630      	mov	r0, r6
 801d248:	f7ff ffda 	bl	801d200 <__sfputc_r>
 801d24c:	1c43      	adds	r3, r0, #1
 801d24e:	d1f3      	bne.n	801d238 <__sfputs_r+0xa>
 801d250:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801d254 <_vfiprintf_r>:
 801d254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d258:	460d      	mov	r5, r1
 801d25a:	b09d      	sub	sp, #116	; 0x74
 801d25c:	4614      	mov	r4, r2
 801d25e:	4698      	mov	r8, r3
 801d260:	4606      	mov	r6, r0
 801d262:	b118      	cbz	r0, 801d26c <_vfiprintf_r+0x18>
 801d264:	6983      	ldr	r3, [r0, #24]
 801d266:	b90b      	cbnz	r3, 801d26c <_vfiprintf_r+0x18>
 801d268:	f7ff fb1e 	bl	801c8a8 <__sinit>
 801d26c:	4b89      	ldr	r3, [pc, #548]	; (801d494 <_vfiprintf_r+0x240>)
 801d26e:	429d      	cmp	r5, r3
 801d270:	d11b      	bne.n	801d2aa <_vfiprintf_r+0x56>
 801d272:	6875      	ldr	r5, [r6, #4]
 801d274:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801d276:	07d9      	lsls	r1, r3, #31
 801d278:	d405      	bmi.n	801d286 <_vfiprintf_r+0x32>
 801d27a:	89ab      	ldrh	r3, [r5, #12]
 801d27c:	059a      	lsls	r2, r3, #22
 801d27e:	d402      	bmi.n	801d286 <_vfiprintf_r+0x32>
 801d280:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801d282:	f7ff fbc6 	bl	801ca12 <__retarget_lock_acquire_recursive>
 801d286:	89ab      	ldrh	r3, [r5, #12]
 801d288:	071b      	lsls	r3, r3, #28
 801d28a:	d501      	bpl.n	801d290 <_vfiprintf_r+0x3c>
 801d28c:	692b      	ldr	r3, [r5, #16]
 801d28e:	b9eb      	cbnz	r3, 801d2cc <_vfiprintf_r+0x78>
 801d290:	4629      	mov	r1, r5
 801d292:	4630      	mov	r0, r6
 801d294:	f7fe fae6 	bl	801b864 <__swsetup_r>
 801d298:	b1c0      	cbz	r0, 801d2cc <_vfiprintf_r+0x78>
 801d29a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801d29c:	07dc      	lsls	r4, r3, #31
 801d29e:	d50e      	bpl.n	801d2be <_vfiprintf_r+0x6a>
 801d2a0:	f04f 30ff 	mov.w	r0, #4294967295
 801d2a4:	b01d      	add	sp, #116	; 0x74
 801d2a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d2aa:	4b7b      	ldr	r3, [pc, #492]	; (801d498 <_vfiprintf_r+0x244>)
 801d2ac:	429d      	cmp	r5, r3
 801d2ae:	d101      	bne.n	801d2b4 <_vfiprintf_r+0x60>
 801d2b0:	68b5      	ldr	r5, [r6, #8]
 801d2b2:	e7df      	b.n	801d274 <_vfiprintf_r+0x20>
 801d2b4:	4b79      	ldr	r3, [pc, #484]	; (801d49c <_vfiprintf_r+0x248>)
 801d2b6:	429d      	cmp	r5, r3
 801d2b8:	bf08      	it	eq
 801d2ba:	68f5      	ldreq	r5, [r6, #12]
 801d2bc:	e7da      	b.n	801d274 <_vfiprintf_r+0x20>
 801d2be:	89ab      	ldrh	r3, [r5, #12]
 801d2c0:	0598      	lsls	r0, r3, #22
 801d2c2:	d4ed      	bmi.n	801d2a0 <_vfiprintf_r+0x4c>
 801d2c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801d2c6:	f7ff fba5 	bl	801ca14 <__retarget_lock_release_recursive>
 801d2ca:	e7e9      	b.n	801d2a0 <_vfiprintf_r+0x4c>
 801d2cc:	2300      	movs	r3, #0
 801d2ce:	9309      	str	r3, [sp, #36]	; 0x24
 801d2d0:	2320      	movs	r3, #32
 801d2d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801d2d6:	f8cd 800c 	str.w	r8, [sp, #12]
 801d2da:	2330      	movs	r3, #48	; 0x30
 801d2dc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801d4a0 <_vfiprintf_r+0x24c>
 801d2e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801d2e4:	f04f 0901 	mov.w	r9, #1
 801d2e8:	4623      	mov	r3, r4
 801d2ea:	469a      	mov	sl, r3
 801d2ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d2f0:	b10a      	cbz	r2, 801d2f6 <_vfiprintf_r+0xa2>
 801d2f2:	2a25      	cmp	r2, #37	; 0x25
 801d2f4:	d1f9      	bne.n	801d2ea <_vfiprintf_r+0x96>
 801d2f6:	ebba 0b04 	subs.w	fp, sl, r4
 801d2fa:	d00b      	beq.n	801d314 <_vfiprintf_r+0xc0>
 801d2fc:	465b      	mov	r3, fp
 801d2fe:	4622      	mov	r2, r4
 801d300:	4629      	mov	r1, r5
 801d302:	4630      	mov	r0, r6
 801d304:	f7ff ff93 	bl	801d22e <__sfputs_r>
 801d308:	3001      	adds	r0, #1
 801d30a:	f000 80aa 	beq.w	801d462 <_vfiprintf_r+0x20e>
 801d30e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d310:	445a      	add	r2, fp
 801d312:	9209      	str	r2, [sp, #36]	; 0x24
 801d314:	f89a 3000 	ldrb.w	r3, [sl]
 801d318:	2b00      	cmp	r3, #0
 801d31a:	f000 80a2 	beq.w	801d462 <_vfiprintf_r+0x20e>
 801d31e:	2300      	movs	r3, #0
 801d320:	f04f 32ff 	mov.w	r2, #4294967295
 801d324:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801d328:	f10a 0a01 	add.w	sl, sl, #1
 801d32c:	9304      	str	r3, [sp, #16]
 801d32e:	9307      	str	r3, [sp, #28]
 801d330:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801d334:	931a      	str	r3, [sp, #104]	; 0x68
 801d336:	4654      	mov	r4, sl
 801d338:	2205      	movs	r2, #5
 801d33a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d33e:	4858      	ldr	r0, [pc, #352]	; (801d4a0 <_vfiprintf_r+0x24c>)
 801d340:	f7e2 ff66 	bl	8000210 <memchr>
 801d344:	9a04      	ldr	r2, [sp, #16]
 801d346:	b9d8      	cbnz	r0, 801d380 <_vfiprintf_r+0x12c>
 801d348:	06d1      	lsls	r1, r2, #27
 801d34a:	bf44      	itt	mi
 801d34c:	2320      	movmi	r3, #32
 801d34e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801d352:	0713      	lsls	r3, r2, #28
 801d354:	bf44      	itt	mi
 801d356:	232b      	movmi	r3, #43	; 0x2b
 801d358:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801d35c:	f89a 3000 	ldrb.w	r3, [sl]
 801d360:	2b2a      	cmp	r3, #42	; 0x2a
 801d362:	d015      	beq.n	801d390 <_vfiprintf_r+0x13c>
 801d364:	9a07      	ldr	r2, [sp, #28]
 801d366:	4654      	mov	r4, sl
 801d368:	2000      	movs	r0, #0
 801d36a:	f04f 0c0a 	mov.w	ip, #10
 801d36e:	4621      	mov	r1, r4
 801d370:	f811 3b01 	ldrb.w	r3, [r1], #1
 801d374:	3b30      	subs	r3, #48	; 0x30
 801d376:	2b09      	cmp	r3, #9
 801d378:	d94e      	bls.n	801d418 <_vfiprintf_r+0x1c4>
 801d37a:	b1b0      	cbz	r0, 801d3aa <_vfiprintf_r+0x156>
 801d37c:	9207      	str	r2, [sp, #28]
 801d37e:	e014      	b.n	801d3aa <_vfiprintf_r+0x156>
 801d380:	eba0 0308 	sub.w	r3, r0, r8
 801d384:	fa09 f303 	lsl.w	r3, r9, r3
 801d388:	4313      	orrs	r3, r2
 801d38a:	9304      	str	r3, [sp, #16]
 801d38c:	46a2      	mov	sl, r4
 801d38e:	e7d2      	b.n	801d336 <_vfiprintf_r+0xe2>
 801d390:	9b03      	ldr	r3, [sp, #12]
 801d392:	1d19      	adds	r1, r3, #4
 801d394:	681b      	ldr	r3, [r3, #0]
 801d396:	9103      	str	r1, [sp, #12]
 801d398:	2b00      	cmp	r3, #0
 801d39a:	bfbb      	ittet	lt
 801d39c:	425b      	neglt	r3, r3
 801d39e:	f042 0202 	orrlt.w	r2, r2, #2
 801d3a2:	9307      	strge	r3, [sp, #28]
 801d3a4:	9307      	strlt	r3, [sp, #28]
 801d3a6:	bfb8      	it	lt
 801d3a8:	9204      	strlt	r2, [sp, #16]
 801d3aa:	7823      	ldrb	r3, [r4, #0]
 801d3ac:	2b2e      	cmp	r3, #46	; 0x2e
 801d3ae:	d10c      	bne.n	801d3ca <_vfiprintf_r+0x176>
 801d3b0:	7863      	ldrb	r3, [r4, #1]
 801d3b2:	2b2a      	cmp	r3, #42	; 0x2a
 801d3b4:	d135      	bne.n	801d422 <_vfiprintf_r+0x1ce>
 801d3b6:	9b03      	ldr	r3, [sp, #12]
 801d3b8:	1d1a      	adds	r2, r3, #4
 801d3ba:	681b      	ldr	r3, [r3, #0]
 801d3bc:	9203      	str	r2, [sp, #12]
 801d3be:	2b00      	cmp	r3, #0
 801d3c0:	bfb8      	it	lt
 801d3c2:	f04f 33ff 	movlt.w	r3, #4294967295
 801d3c6:	3402      	adds	r4, #2
 801d3c8:	9305      	str	r3, [sp, #20]
 801d3ca:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801d4b0 <_vfiprintf_r+0x25c>
 801d3ce:	7821      	ldrb	r1, [r4, #0]
 801d3d0:	2203      	movs	r2, #3
 801d3d2:	4650      	mov	r0, sl
 801d3d4:	f7e2 ff1c 	bl	8000210 <memchr>
 801d3d8:	b140      	cbz	r0, 801d3ec <_vfiprintf_r+0x198>
 801d3da:	2340      	movs	r3, #64	; 0x40
 801d3dc:	eba0 000a 	sub.w	r0, r0, sl
 801d3e0:	fa03 f000 	lsl.w	r0, r3, r0
 801d3e4:	9b04      	ldr	r3, [sp, #16]
 801d3e6:	4303      	orrs	r3, r0
 801d3e8:	3401      	adds	r4, #1
 801d3ea:	9304      	str	r3, [sp, #16]
 801d3ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d3f0:	482c      	ldr	r0, [pc, #176]	; (801d4a4 <_vfiprintf_r+0x250>)
 801d3f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801d3f6:	2206      	movs	r2, #6
 801d3f8:	f7e2 ff0a 	bl	8000210 <memchr>
 801d3fc:	2800      	cmp	r0, #0
 801d3fe:	d03f      	beq.n	801d480 <_vfiprintf_r+0x22c>
 801d400:	4b29      	ldr	r3, [pc, #164]	; (801d4a8 <_vfiprintf_r+0x254>)
 801d402:	bb1b      	cbnz	r3, 801d44c <_vfiprintf_r+0x1f8>
 801d404:	9b03      	ldr	r3, [sp, #12]
 801d406:	3307      	adds	r3, #7
 801d408:	f023 0307 	bic.w	r3, r3, #7
 801d40c:	3308      	adds	r3, #8
 801d40e:	9303      	str	r3, [sp, #12]
 801d410:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d412:	443b      	add	r3, r7
 801d414:	9309      	str	r3, [sp, #36]	; 0x24
 801d416:	e767      	b.n	801d2e8 <_vfiprintf_r+0x94>
 801d418:	fb0c 3202 	mla	r2, ip, r2, r3
 801d41c:	460c      	mov	r4, r1
 801d41e:	2001      	movs	r0, #1
 801d420:	e7a5      	b.n	801d36e <_vfiprintf_r+0x11a>
 801d422:	2300      	movs	r3, #0
 801d424:	3401      	adds	r4, #1
 801d426:	9305      	str	r3, [sp, #20]
 801d428:	4619      	mov	r1, r3
 801d42a:	f04f 0c0a 	mov.w	ip, #10
 801d42e:	4620      	mov	r0, r4
 801d430:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d434:	3a30      	subs	r2, #48	; 0x30
 801d436:	2a09      	cmp	r2, #9
 801d438:	d903      	bls.n	801d442 <_vfiprintf_r+0x1ee>
 801d43a:	2b00      	cmp	r3, #0
 801d43c:	d0c5      	beq.n	801d3ca <_vfiprintf_r+0x176>
 801d43e:	9105      	str	r1, [sp, #20]
 801d440:	e7c3      	b.n	801d3ca <_vfiprintf_r+0x176>
 801d442:	fb0c 2101 	mla	r1, ip, r1, r2
 801d446:	4604      	mov	r4, r0
 801d448:	2301      	movs	r3, #1
 801d44a:	e7f0      	b.n	801d42e <_vfiprintf_r+0x1da>
 801d44c:	ab03      	add	r3, sp, #12
 801d44e:	9300      	str	r3, [sp, #0]
 801d450:	462a      	mov	r2, r5
 801d452:	4b16      	ldr	r3, [pc, #88]	; (801d4ac <_vfiprintf_r+0x258>)
 801d454:	a904      	add	r1, sp, #16
 801d456:	4630      	mov	r0, r6
 801d458:	f7fd fc48 	bl	801acec <_printf_float>
 801d45c:	4607      	mov	r7, r0
 801d45e:	1c78      	adds	r0, r7, #1
 801d460:	d1d6      	bne.n	801d410 <_vfiprintf_r+0x1bc>
 801d462:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801d464:	07d9      	lsls	r1, r3, #31
 801d466:	d405      	bmi.n	801d474 <_vfiprintf_r+0x220>
 801d468:	89ab      	ldrh	r3, [r5, #12]
 801d46a:	059a      	lsls	r2, r3, #22
 801d46c:	d402      	bmi.n	801d474 <_vfiprintf_r+0x220>
 801d46e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801d470:	f7ff fad0 	bl	801ca14 <__retarget_lock_release_recursive>
 801d474:	89ab      	ldrh	r3, [r5, #12]
 801d476:	065b      	lsls	r3, r3, #25
 801d478:	f53f af12 	bmi.w	801d2a0 <_vfiprintf_r+0x4c>
 801d47c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801d47e:	e711      	b.n	801d2a4 <_vfiprintf_r+0x50>
 801d480:	ab03      	add	r3, sp, #12
 801d482:	9300      	str	r3, [sp, #0]
 801d484:	462a      	mov	r2, r5
 801d486:	4b09      	ldr	r3, [pc, #36]	; (801d4ac <_vfiprintf_r+0x258>)
 801d488:	a904      	add	r1, sp, #16
 801d48a:	4630      	mov	r0, r6
 801d48c:	f7fd fed2 	bl	801b234 <_printf_i>
 801d490:	e7e4      	b.n	801d45c <_vfiprintf_r+0x208>
 801d492:	bf00      	nop
 801d494:	0806d220 	.word	0x0806d220
 801d498:	0806d240 	.word	0x0806d240
 801d49c:	0806d200 	.word	0x0806d200
 801d4a0:	0806d3bc 	.word	0x0806d3bc
 801d4a4:	0806d3c6 	.word	0x0806d3c6
 801d4a8:	0801aced 	.word	0x0801aced
 801d4ac:	0801d22f 	.word	0x0801d22f
 801d4b0:	0806d3c2 	.word	0x0806d3c2

0801d4b4 <__sread>:
 801d4b4:	b510      	push	{r4, lr}
 801d4b6:	460c      	mov	r4, r1
 801d4b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d4bc:	f000 f8ae 	bl	801d61c <_read_r>
 801d4c0:	2800      	cmp	r0, #0
 801d4c2:	bfab      	itete	ge
 801d4c4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801d4c6:	89a3      	ldrhlt	r3, [r4, #12]
 801d4c8:	181b      	addge	r3, r3, r0
 801d4ca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801d4ce:	bfac      	ite	ge
 801d4d0:	6563      	strge	r3, [r4, #84]	; 0x54
 801d4d2:	81a3      	strhlt	r3, [r4, #12]
 801d4d4:	bd10      	pop	{r4, pc}

0801d4d6 <__swrite>:
 801d4d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d4da:	461f      	mov	r7, r3
 801d4dc:	898b      	ldrh	r3, [r1, #12]
 801d4de:	05db      	lsls	r3, r3, #23
 801d4e0:	4605      	mov	r5, r0
 801d4e2:	460c      	mov	r4, r1
 801d4e4:	4616      	mov	r6, r2
 801d4e6:	d505      	bpl.n	801d4f4 <__swrite+0x1e>
 801d4e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d4ec:	2302      	movs	r3, #2
 801d4ee:	2200      	movs	r2, #0
 801d4f0:	f000 f870 	bl	801d5d4 <_lseek_r>
 801d4f4:	89a3      	ldrh	r3, [r4, #12]
 801d4f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801d4fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801d4fe:	81a3      	strh	r3, [r4, #12]
 801d500:	4632      	mov	r2, r6
 801d502:	463b      	mov	r3, r7
 801d504:	4628      	mov	r0, r5
 801d506:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801d50a:	f000 b817 	b.w	801d53c <_write_r>

0801d50e <__sseek>:
 801d50e:	b510      	push	{r4, lr}
 801d510:	460c      	mov	r4, r1
 801d512:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d516:	f000 f85d 	bl	801d5d4 <_lseek_r>
 801d51a:	1c43      	adds	r3, r0, #1
 801d51c:	89a3      	ldrh	r3, [r4, #12]
 801d51e:	bf15      	itete	ne
 801d520:	6560      	strne	r0, [r4, #84]	; 0x54
 801d522:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801d526:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801d52a:	81a3      	strheq	r3, [r4, #12]
 801d52c:	bf18      	it	ne
 801d52e:	81a3      	strhne	r3, [r4, #12]
 801d530:	bd10      	pop	{r4, pc}

0801d532 <__sclose>:
 801d532:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d536:	f000 b81b 	b.w	801d570 <_close_r>
	...

0801d53c <_write_r>:
 801d53c:	b538      	push	{r3, r4, r5, lr}
 801d53e:	4d07      	ldr	r5, [pc, #28]	; (801d55c <_write_r+0x20>)
 801d540:	4604      	mov	r4, r0
 801d542:	4608      	mov	r0, r1
 801d544:	4611      	mov	r1, r2
 801d546:	2200      	movs	r2, #0
 801d548:	602a      	str	r2, [r5, #0]
 801d54a:	461a      	mov	r2, r3
 801d54c:	f7e6 fea3 	bl	8004296 <_write>
 801d550:	1c43      	adds	r3, r0, #1
 801d552:	d102      	bne.n	801d55a <_write_r+0x1e>
 801d554:	682b      	ldr	r3, [r5, #0]
 801d556:	b103      	cbz	r3, 801d55a <_write_r+0x1e>
 801d558:	6023      	str	r3, [r4, #0]
 801d55a:	bd38      	pop	{r3, r4, r5, pc}
 801d55c:	20013d18 	.word	0x20013d18

0801d560 <abort>:
 801d560:	b508      	push	{r3, lr}
 801d562:	2006      	movs	r0, #6
 801d564:	f000 f894 	bl	801d690 <raise>
 801d568:	2001      	movs	r0, #1
 801d56a:	f7e6 fe6d 	bl	8004248 <_exit>
	...

0801d570 <_close_r>:
 801d570:	b538      	push	{r3, r4, r5, lr}
 801d572:	4d06      	ldr	r5, [pc, #24]	; (801d58c <_close_r+0x1c>)
 801d574:	2300      	movs	r3, #0
 801d576:	4604      	mov	r4, r0
 801d578:	4608      	mov	r0, r1
 801d57a:	602b      	str	r3, [r5, #0]
 801d57c:	f7e6 fea7 	bl	80042ce <_close>
 801d580:	1c43      	adds	r3, r0, #1
 801d582:	d102      	bne.n	801d58a <_close_r+0x1a>
 801d584:	682b      	ldr	r3, [r5, #0]
 801d586:	b103      	cbz	r3, 801d58a <_close_r+0x1a>
 801d588:	6023      	str	r3, [r4, #0]
 801d58a:	bd38      	pop	{r3, r4, r5, pc}
 801d58c:	20013d18 	.word	0x20013d18

0801d590 <_fstat_r>:
 801d590:	b538      	push	{r3, r4, r5, lr}
 801d592:	4d07      	ldr	r5, [pc, #28]	; (801d5b0 <_fstat_r+0x20>)
 801d594:	2300      	movs	r3, #0
 801d596:	4604      	mov	r4, r0
 801d598:	4608      	mov	r0, r1
 801d59a:	4611      	mov	r1, r2
 801d59c:	602b      	str	r3, [r5, #0]
 801d59e:	f7e6 fea2 	bl	80042e6 <_fstat>
 801d5a2:	1c43      	adds	r3, r0, #1
 801d5a4:	d102      	bne.n	801d5ac <_fstat_r+0x1c>
 801d5a6:	682b      	ldr	r3, [r5, #0]
 801d5a8:	b103      	cbz	r3, 801d5ac <_fstat_r+0x1c>
 801d5aa:	6023      	str	r3, [r4, #0]
 801d5ac:	bd38      	pop	{r3, r4, r5, pc}
 801d5ae:	bf00      	nop
 801d5b0:	20013d18 	.word	0x20013d18

0801d5b4 <_isatty_r>:
 801d5b4:	b538      	push	{r3, r4, r5, lr}
 801d5b6:	4d06      	ldr	r5, [pc, #24]	; (801d5d0 <_isatty_r+0x1c>)
 801d5b8:	2300      	movs	r3, #0
 801d5ba:	4604      	mov	r4, r0
 801d5bc:	4608      	mov	r0, r1
 801d5be:	602b      	str	r3, [r5, #0]
 801d5c0:	f7e6 fea1 	bl	8004306 <_isatty>
 801d5c4:	1c43      	adds	r3, r0, #1
 801d5c6:	d102      	bne.n	801d5ce <_isatty_r+0x1a>
 801d5c8:	682b      	ldr	r3, [r5, #0]
 801d5ca:	b103      	cbz	r3, 801d5ce <_isatty_r+0x1a>
 801d5cc:	6023      	str	r3, [r4, #0]
 801d5ce:	bd38      	pop	{r3, r4, r5, pc}
 801d5d0:	20013d18 	.word	0x20013d18

0801d5d4 <_lseek_r>:
 801d5d4:	b538      	push	{r3, r4, r5, lr}
 801d5d6:	4d07      	ldr	r5, [pc, #28]	; (801d5f4 <_lseek_r+0x20>)
 801d5d8:	4604      	mov	r4, r0
 801d5da:	4608      	mov	r0, r1
 801d5dc:	4611      	mov	r1, r2
 801d5de:	2200      	movs	r2, #0
 801d5e0:	602a      	str	r2, [r5, #0]
 801d5e2:	461a      	mov	r2, r3
 801d5e4:	f7e6 fe9a 	bl	800431c <_lseek>
 801d5e8:	1c43      	adds	r3, r0, #1
 801d5ea:	d102      	bne.n	801d5f2 <_lseek_r+0x1e>
 801d5ec:	682b      	ldr	r3, [r5, #0]
 801d5ee:	b103      	cbz	r3, 801d5f2 <_lseek_r+0x1e>
 801d5f0:	6023      	str	r3, [r4, #0]
 801d5f2:	bd38      	pop	{r3, r4, r5, pc}
 801d5f4:	20013d18 	.word	0x20013d18

0801d5f8 <__ascii_mbtowc>:
 801d5f8:	b082      	sub	sp, #8
 801d5fa:	b901      	cbnz	r1, 801d5fe <__ascii_mbtowc+0x6>
 801d5fc:	a901      	add	r1, sp, #4
 801d5fe:	b142      	cbz	r2, 801d612 <__ascii_mbtowc+0x1a>
 801d600:	b14b      	cbz	r3, 801d616 <__ascii_mbtowc+0x1e>
 801d602:	7813      	ldrb	r3, [r2, #0]
 801d604:	600b      	str	r3, [r1, #0]
 801d606:	7812      	ldrb	r2, [r2, #0]
 801d608:	1e10      	subs	r0, r2, #0
 801d60a:	bf18      	it	ne
 801d60c:	2001      	movne	r0, #1
 801d60e:	b002      	add	sp, #8
 801d610:	4770      	bx	lr
 801d612:	4610      	mov	r0, r2
 801d614:	e7fb      	b.n	801d60e <__ascii_mbtowc+0x16>
 801d616:	f06f 0001 	mvn.w	r0, #1
 801d61a:	e7f8      	b.n	801d60e <__ascii_mbtowc+0x16>

0801d61c <_read_r>:
 801d61c:	b538      	push	{r3, r4, r5, lr}
 801d61e:	4d07      	ldr	r5, [pc, #28]	; (801d63c <_read_r+0x20>)
 801d620:	4604      	mov	r4, r0
 801d622:	4608      	mov	r0, r1
 801d624:	4611      	mov	r1, r2
 801d626:	2200      	movs	r2, #0
 801d628:	602a      	str	r2, [r5, #0]
 801d62a:	461a      	mov	r2, r3
 801d62c:	f7e6 fe16 	bl	800425c <_read>
 801d630:	1c43      	adds	r3, r0, #1
 801d632:	d102      	bne.n	801d63a <_read_r+0x1e>
 801d634:	682b      	ldr	r3, [r5, #0]
 801d636:	b103      	cbz	r3, 801d63a <_read_r+0x1e>
 801d638:	6023      	str	r3, [r4, #0]
 801d63a:	bd38      	pop	{r3, r4, r5, pc}
 801d63c:	20013d18 	.word	0x20013d18

0801d640 <_raise_r>:
 801d640:	291f      	cmp	r1, #31
 801d642:	b538      	push	{r3, r4, r5, lr}
 801d644:	4604      	mov	r4, r0
 801d646:	460d      	mov	r5, r1
 801d648:	d904      	bls.n	801d654 <_raise_r+0x14>
 801d64a:	2316      	movs	r3, #22
 801d64c:	6003      	str	r3, [r0, #0]
 801d64e:	f04f 30ff 	mov.w	r0, #4294967295
 801d652:	bd38      	pop	{r3, r4, r5, pc}
 801d654:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801d656:	b112      	cbz	r2, 801d65e <_raise_r+0x1e>
 801d658:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801d65c:	b94b      	cbnz	r3, 801d672 <_raise_r+0x32>
 801d65e:	4620      	mov	r0, r4
 801d660:	f000 f830 	bl	801d6c4 <_getpid_r>
 801d664:	462a      	mov	r2, r5
 801d666:	4601      	mov	r1, r0
 801d668:	4620      	mov	r0, r4
 801d66a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801d66e:	f000 b817 	b.w	801d6a0 <_kill_r>
 801d672:	2b01      	cmp	r3, #1
 801d674:	d00a      	beq.n	801d68c <_raise_r+0x4c>
 801d676:	1c59      	adds	r1, r3, #1
 801d678:	d103      	bne.n	801d682 <_raise_r+0x42>
 801d67a:	2316      	movs	r3, #22
 801d67c:	6003      	str	r3, [r0, #0]
 801d67e:	2001      	movs	r0, #1
 801d680:	e7e7      	b.n	801d652 <_raise_r+0x12>
 801d682:	2400      	movs	r4, #0
 801d684:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801d688:	4628      	mov	r0, r5
 801d68a:	4798      	blx	r3
 801d68c:	2000      	movs	r0, #0
 801d68e:	e7e0      	b.n	801d652 <_raise_r+0x12>

0801d690 <raise>:
 801d690:	4b02      	ldr	r3, [pc, #8]	; (801d69c <raise+0xc>)
 801d692:	4601      	mov	r1, r0
 801d694:	6818      	ldr	r0, [r3, #0]
 801d696:	f7ff bfd3 	b.w	801d640 <_raise_r>
 801d69a:	bf00      	nop
 801d69c:	200000cc 	.word	0x200000cc

0801d6a0 <_kill_r>:
 801d6a0:	b538      	push	{r3, r4, r5, lr}
 801d6a2:	4d07      	ldr	r5, [pc, #28]	; (801d6c0 <_kill_r+0x20>)
 801d6a4:	2300      	movs	r3, #0
 801d6a6:	4604      	mov	r4, r0
 801d6a8:	4608      	mov	r0, r1
 801d6aa:	4611      	mov	r1, r2
 801d6ac:	602b      	str	r3, [r5, #0]
 801d6ae:	f7e6 fdbb 	bl	8004228 <_kill>
 801d6b2:	1c43      	adds	r3, r0, #1
 801d6b4:	d102      	bne.n	801d6bc <_kill_r+0x1c>
 801d6b6:	682b      	ldr	r3, [r5, #0]
 801d6b8:	b103      	cbz	r3, 801d6bc <_kill_r+0x1c>
 801d6ba:	6023      	str	r3, [r4, #0]
 801d6bc:	bd38      	pop	{r3, r4, r5, pc}
 801d6be:	bf00      	nop
 801d6c0:	20013d18 	.word	0x20013d18

0801d6c4 <_getpid_r>:
 801d6c4:	f7e6 bda8 	b.w	8004218 <_getpid>

0801d6c8 <__ascii_wctomb>:
 801d6c8:	b149      	cbz	r1, 801d6de <__ascii_wctomb+0x16>
 801d6ca:	2aff      	cmp	r2, #255	; 0xff
 801d6cc:	bf85      	ittet	hi
 801d6ce:	238a      	movhi	r3, #138	; 0x8a
 801d6d0:	6003      	strhi	r3, [r0, #0]
 801d6d2:	700a      	strbls	r2, [r1, #0]
 801d6d4:	f04f 30ff 	movhi.w	r0, #4294967295
 801d6d8:	bf98      	it	ls
 801d6da:	2001      	movls	r0, #1
 801d6dc:	4770      	bx	lr
 801d6de:	4608      	mov	r0, r1
 801d6e0:	4770      	bx	lr
	...

0801d6e4 <_init>:
 801d6e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d6e6:	bf00      	nop
 801d6e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d6ea:	bc08      	pop	{r3}
 801d6ec:	469e      	mov	lr, r3
 801d6ee:	4770      	bx	lr

0801d6f0 <_fini>:
 801d6f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d6f2:	bf00      	nop
 801d6f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d6f6:	bc08      	pop	{r3}
 801d6f8:	469e      	mov	lr, r3
 801d6fa:	4770      	bx	lr
