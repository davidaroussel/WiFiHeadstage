
NucleoF411RE_WFM200_Intan.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001ceac  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0004fc78  0801d050  0801d050  0002d050  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0806ccc8  0806ccc8  00080298  2**0
                  CONTENTS
  4 .ARM          00000008  0806ccc8  0806ccc8  0007ccc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0806ccd0  0806ccd0  00080298  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0806ccd0  0806ccd0  0007ccd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0806ccd4  0806ccd4  0007ccd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000298  20000000  0806ccd8  00080000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00013be8  20000298  0806cf70  00080298  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20013e80  0806cf70  00083e80  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00080298  2**0
                  CONTENTS, READONLY
 12 .debug_info   00033249  00000000  00000000  000802c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000920d  00000000  00000000  000b3511  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000023d0  00000000  00000000  000bc720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002238  00000000  00000000  000beaf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013ed3  00000000  00000000  000c0d28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00038991  00000000  00000000  000d4bfb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b6f01  00000000  00000000  0010d58c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001c448d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a040  00000000  00000000  001c44e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000298 	.word	0x20000298
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0801d034 	.word	0x0801d034

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000029c 	.word	0x2000029c
 80001dc:	0801d034 	.word	0x0801d034

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bec:	f000 b974 	b.w	8000ed8 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9d08      	ldr	r5, [sp, #32]
 8000c0e:	4604      	mov	r4, r0
 8000c10:	468e      	mov	lr, r1
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d14d      	bne.n	8000cb2 <__udivmoddi4+0xaa>
 8000c16:	428a      	cmp	r2, r1
 8000c18:	4694      	mov	ip, r2
 8000c1a:	d969      	bls.n	8000cf0 <__udivmoddi4+0xe8>
 8000c1c:	fab2 f282 	clz	r2, r2
 8000c20:	b152      	cbz	r2, 8000c38 <__udivmoddi4+0x30>
 8000c22:	fa01 f302 	lsl.w	r3, r1, r2
 8000c26:	f1c2 0120 	rsb	r1, r2, #32
 8000c2a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c2e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c32:	ea41 0e03 	orr.w	lr, r1, r3
 8000c36:	4094      	lsls	r4, r2
 8000c38:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c3c:	0c21      	lsrs	r1, r4, #16
 8000c3e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c42:	fa1f f78c 	uxth.w	r7, ip
 8000c46:	fb08 e316 	mls	r3, r8, r6, lr
 8000c4a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c4e:	fb06 f107 	mul.w	r1, r6, r7
 8000c52:	4299      	cmp	r1, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x64>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c5e:	f080 811f 	bcs.w	8000ea0 <__udivmoddi4+0x298>
 8000c62:	4299      	cmp	r1, r3
 8000c64:	f240 811c 	bls.w	8000ea0 <__udivmoddi4+0x298>
 8000c68:	3e02      	subs	r6, #2
 8000c6a:	4463      	add	r3, ip
 8000c6c:	1a5b      	subs	r3, r3, r1
 8000c6e:	b2a4      	uxth	r4, r4
 8000c70:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c74:	fb08 3310 	mls	r3, r8, r0, r3
 8000c78:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c7c:	fb00 f707 	mul.w	r7, r0, r7
 8000c80:	42a7      	cmp	r7, r4
 8000c82:	d90a      	bls.n	8000c9a <__udivmoddi4+0x92>
 8000c84:	eb1c 0404 	adds.w	r4, ip, r4
 8000c88:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c8c:	f080 810a 	bcs.w	8000ea4 <__udivmoddi4+0x29c>
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	f240 8107 	bls.w	8000ea4 <__udivmoddi4+0x29c>
 8000c96:	4464      	add	r4, ip
 8000c98:	3802      	subs	r0, #2
 8000c9a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c9e:	1be4      	subs	r4, r4, r7
 8000ca0:	2600      	movs	r6, #0
 8000ca2:	b11d      	cbz	r5, 8000cac <__udivmoddi4+0xa4>
 8000ca4:	40d4      	lsrs	r4, r2
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cac:	4631      	mov	r1, r6
 8000cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d909      	bls.n	8000cca <__udivmoddi4+0xc2>
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	f000 80ef 	beq.w	8000e9a <__udivmoddi4+0x292>
 8000cbc:	2600      	movs	r6, #0
 8000cbe:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc2:	4630      	mov	r0, r6
 8000cc4:	4631      	mov	r1, r6
 8000cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cca:	fab3 f683 	clz	r6, r3
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	d14a      	bne.n	8000d68 <__udivmoddi4+0x160>
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d302      	bcc.n	8000cdc <__udivmoddi4+0xd4>
 8000cd6:	4282      	cmp	r2, r0
 8000cd8:	f200 80f9 	bhi.w	8000ece <__udivmoddi4+0x2c6>
 8000cdc:	1a84      	subs	r4, r0, r2
 8000cde:	eb61 0303 	sbc.w	r3, r1, r3
 8000ce2:	2001      	movs	r0, #1
 8000ce4:	469e      	mov	lr, r3
 8000ce6:	2d00      	cmp	r5, #0
 8000ce8:	d0e0      	beq.n	8000cac <__udivmoddi4+0xa4>
 8000cea:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cee:	e7dd      	b.n	8000cac <__udivmoddi4+0xa4>
 8000cf0:	b902      	cbnz	r2, 8000cf4 <__udivmoddi4+0xec>
 8000cf2:	deff      	udf	#255	; 0xff
 8000cf4:	fab2 f282 	clz	r2, r2
 8000cf8:	2a00      	cmp	r2, #0
 8000cfa:	f040 8092 	bne.w	8000e22 <__udivmoddi4+0x21a>
 8000cfe:	eba1 010c 	sub.w	r1, r1, ip
 8000d02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d06:	fa1f fe8c 	uxth.w	lr, ip
 8000d0a:	2601      	movs	r6, #1
 8000d0c:	0c20      	lsrs	r0, r4, #16
 8000d0e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d12:	fb07 1113 	mls	r1, r7, r3, r1
 8000d16:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d1a:	fb0e f003 	mul.w	r0, lr, r3
 8000d1e:	4288      	cmp	r0, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x12c>
 8000d22:	eb1c 0101 	adds.w	r1, ip, r1
 8000d26:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x12a>
 8000d2c:	4288      	cmp	r0, r1
 8000d2e:	f200 80cb 	bhi.w	8000ec8 <__udivmoddi4+0x2c0>
 8000d32:	4643      	mov	r3, r8
 8000d34:	1a09      	subs	r1, r1, r0
 8000d36:	b2a4      	uxth	r4, r4
 8000d38:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d3c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d40:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d44:	fb0e fe00 	mul.w	lr, lr, r0
 8000d48:	45a6      	cmp	lr, r4
 8000d4a:	d908      	bls.n	8000d5e <__udivmoddi4+0x156>
 8000d4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d50:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d54:	d202      	bcs.n	8000d5c <__udivmoddi4+0x154>
 8000d56:	45a6      	cmp	lr, r4
 8000d58:	f200 80bb 	bhi.w	8000ed2 <__udivmoddi4+0x2ca>
 8000d5c:	4608      	mov	r0, r1
 8000d5e:	eba4 040e 	sub.w	r4, r4, lr
 8000d62:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d66:	e79c      	b.n	8000ca2 <__udivmoddi4+0x9a>
 8000d68:	f1c6 0720 	rsb	r7, r6, #32
 8000d6c:	40b3      	lsls	r3, r6
 8000d6e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d72:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d76:	fa20 f407 	lsr.w	r4, r0, r7
 8000d7a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d7e:	431c      	orrs	r4, r3
 8000d80:	40f9      	lsrs	r1, r7
 8000d82:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d86:	fa00 f306 	lsl.w	r3, r0, r6
 8000d8a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d8e:	0c20      	lsrs	r0, r4, #16
 8000d90:	fa1f fe8c 	uxth.w	lr, ip
 8000d94:	fb09 1118 	mls	r1, r9, r8, r1
 8000d98:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9c:	fb08 f00e 	mul.w	r0, r8, lr
 8000da0:	4288      	cmp	r0, r1
 8000da2:	fa02 f206 	lsl.w	r2, r2, r6
 8000da6:	d90b      	bls.n	8000dc0 <__udivmoddi4+0x1b8>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f108 3aff 	add.w	sl, r8, #4294967295
 8000db0:	f080 8088 	bcs.w	8000ec4 <__udivmoddi4+0x2bc>
 8000db4:	4288      	cmp	r0, r1
 8000db6:	f240 8085 	bls.w	8000ec4 <__udivmoddi4+0x2bc>
 8000dba:	f1a8 0802 	sub.w	r8, r8, #2
 8000dbe:	4461      	add	r1, ip
 8000dc0:	1a09      	subs	r1, r1, r0
 8000dc2:	b2a4      	uxth	r4, r4
 8000dc4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dc8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dcc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dd0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dd4:	458e      	cmp	lr, r1
 8000dd6:	d908      	bls.n	8000dea <__udivmoddi4+0x1e2>
 8000dd8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ddc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000de0:	d26c      	bcs.n	8000ebc <__udivmoddi4+0x2b4>
 8000de2:	458e      	cmp	lr, r1
 8000de4:	d96a      	bls.n	8000ebc <__udivmoddi4+0x2b4>
 8000de6:	3802      	subs	r0, #2
 8000de8:	4461      	add	r1, ip
 8000dea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dee:	fba0 9402 	umull	r9, r4, r0, r2
 8000df2:	eba1 010e 	sub.w	r1, r1, lr
 8000df6:	42a1      	cmp	r1, r4
 8000df8:	46c8      	mov	r8, r9
 8000dfa:	46a6      	mov	lr, r4
 8000dfc:	d356      	bcc.n	8000eac <__udivmoddi4+0x2a4>
 8000dfe:	d053      	beq.n	8000ea8 <__udivmoddi4+0x2a0>
 8000e00:	b15d      	cbz	r5, 8000e1a <__udivmoddi4+0x212>
 8000e02:	ebb3 0208 	subs.w	r2, r3, r8
 8000e06:	eb61 010e 	sbc.w	r1, r1, lr
 8000e0a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e0e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e12:	40f1      	lsrs	r1, r6
 8000e14:	431f      	orrs	r7, r3
 8000e16:	e9c5 7100 	strd	r7, r1, [r5]
 8000e1a:	2600      	movs	r6, #0
 8000e1c:	4631      	mov	r1, r6
 8000e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e22:	f1c2 0320 	rsb	r3, r2, #32
 8000e26:	40d8      	lsrs	r0, r3
 8000e28:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e2c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e30:	4091      	lsls	r1, r2
 8000e32:	4301      	orrs	r1, r0
 8000e34:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e38:	fa1f fe8c 	uxth.w	lr, ip
 8000e3c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e40:	fb07 3610 	mls	r6, r7, r0, r3
 8000e44:	0c0b      	lsrs	r3, r1, #16
 8000e46:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e4a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e4e:	429e      	cmp	r6, r3
 8000e50:	fa04 f402 	lsl.w	r4, r4, r2
 8000e54:	d908      	bls.n	8000e68 <__udivmoddi4+0x260>
 8000e56:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e5e:	d22f      	bcs.n	8000ec0 <__udivmoddi4+0x2b8>
 8000e60:	429e      	cmp	r6, r3
 8000e62:	d92d      	bls.n	8000ec0 <__udivmoddi4+0x2b8>
 8000e64:	3802      	subs	r0, #2
 8000e66:	4463      	add	r3, ip
 8000e68:	1b9b      	subs	r3, r3, r6
 8000e6a:	b289      	uxth	r1, r1
 8000e6c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e70:	fb07 3316 	mls	r3, r7, r6, r3
 8000e74:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e78:	fb06 f30e 	mul.w	r3, r6, lr
 8000e7c:	428b      	cmp	r3, r1
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x28a>
 8000e80:	eb1c 0101 	adds.w	r1, ip, r1
 8000e84:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e88:	d216      	bcs.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	d914      	bls.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e8e:	3e02      	subs	r6, #2
 8000e90:	4461      	add	r1, ip
 8000e92:	1ac9      	subs	r1, r1, r3
 8000e94:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e98:	e738      	b.n	8000d0c <__udivmoddi4+0x104>
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e705      	b.n	8000cac <__udivmoddi4+0xa4>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e3      	b.n	8000c6c <__udivmoddi4+0x64>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6f8      	b.n	8000c9a <__udivmoddi4+0x92>
 8000ea8:	454b      	cmp	r3, r9
 8000eaa:	d2a9      	bcs.n	8000e00 <__udivmoddi4+0x1f8>
 8000eac:	ebb9 0802 	subs.w	r8, r9, r2
 8000eb0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7a3      	b.n	8000e00 <__udivmoddi4+0x1f8>
 8000eb8:	4646      	mov	r6, r8
 8000eba:	e7ea      	b.n	8000e92 <__udivmoddi4+0x28a>
 8000ebc:	4620      	mov	r0, r4
 8000ebe:	e794      	b.n	8000dea <__udivmoddi4+0x1e2>
 8000ec0:	4640      	mov	r0, r8
 8000ec2:	e7d1      	b.n	8000e68 <__udivmoddi4+0x260>
 8000ec4:	46d0      	mov	r8, sl
 8000ec6:	e77b      	b.n	8000dc0 <__udivmoddi4+0x1b8>
 8000ec8:	3b02      	subs	r3, #2
 8000eca:	4461      	add	r1, ip
 8000ecc:	e732      	b.n	8000d34 <__udivmoddi4+0x12c>
 8000ece:	4630      	mov	r0, r6
 8000ed0:	e709      	b.n	8000ce6 <__udivmoddi4+0xde>
 8000ed2:	4464      	add	r4, ip
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	e742      	b.n	8000d5e <__udivmoddi4+0x156>

08000ed8 <__aeabi_idiv0>:
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop

08000edc <start_app_task>:




void start_app_task(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0


	INIT_UPD();
 8000ee0:	f000 f8ba 	bl	8001058 <INIT_UPD>


//	osTimerDef(periodicTimer, PTCallback);
//	periodicTimerHandle = osTimerCreate(osTimer(periodicTimer), osTimerPeriodic, NULL);

	spi_to_wifi_queue = xQueueCreate(SPI_EVENTS_NB_MAX, sizeof(spi_to_udp_t));
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	210c      	movs	r1, #12
 8000ee8:	2014      	movs	r0, #20
 8000eea:	f009 f90f 	bl	800a10c <xQueueGenericCreate>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	4a0a      	ldr	r2, [pc, #40]	; (8000f1c <start_app_task+0x40>)
 8000ef2:	6013      	str	r3, [r2, #0]
  	if (spi_to_wifi_queue == NULL){
 8000ef4:	4b09      	ldr	r3, [pc, #36]	; (8000f1c <start_app_task+0x40>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d102      	bne.n	8000f02 <start_app_task+0x26>
  		printf("booboo Queue \r\n");
 8000efc:	4808      	ldr	r0, [pc, #32]	; (8000f20 <start_app_task+0x44>)
 8000efe:	f019 ffed 	bl	801aedc <puts>


  	//osTimerStart(periodicTimerHandle, UDP_FREQUENCY);

  	//WIFI_MENU_INIT();
  	TASK_UDP_TRANSMIT_INIT((void*) spi_to_wifi_queue);
 8000f02:	4b06      	ldr	r3, [pc, #24]	; (8000f1c <start_app_task+0x40>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4618      	mov	r0, r3
 8000f08:	f000 f8f4 	bl	80010f4 <TASK_UDP_TRANSMIT_INIT>
  	//TASK_RHD64_SPI_COMMUNICATION_INIT((void*) spi_to_wifi_queue);
  	TASK_FPGA_COMMUNICATION_INIT((void*) spi_to_wifi_queue);
 8000f0c:	4b03      	ldr	r3, [pc, #12]	; (8000f1c <start_app_task+0x40>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4618      	mov	r0, r3
 8000f12:	f000 f807 	bl	8000f24 <TASK_FPGA_COMMUNICATION_INIT>

}
 8000f16:	bf00      	nop
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	200002b4 	.word	0x200002b4
 8000f20:	0801d050 	.word	0x0801d050

08000f24 <TASK_FPGA_COMMUNICATION_INIT>:
 }




void TASK_FPGA_COMMUNICATION_INIT(void *arg) {
 8000f24:	b5b0      	push	{r4, r5, r7, lr}
 8000f26:	b088      	sub	sp, #32
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
	//CREATE xQueue
	osThreadDef(FPGA_handle, FPGA_COMMUNICATION_task_entry, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*10);
 8000f2c:	4b0b      	ldr	r3, [pc, #44]	; (8000f5c <TASK_FPGA_COMMUNICATION_INIT+0x38>)
 8000f2e:	f107 040c 	add.w	r4, r7, #12
 8000f32:	461d      	mov	r5, r3
 8000f34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f38:	682b      	ldr	r3, [r5, #0]
 8000f3a:	6023      	str	r3, [r4, #0]

	if (osThreadCreate(osThread(FPGA_handle), (void *)arg) == NULL){
 8000f3c:	f107 030c 	add.w	r3, r7, #12
 8000f40:	6879      	ldr	r1, [r7, #4]
 8000f42:	4618      	mov	r0, r3
 8000f44:	f008 fc67 	bl	8009816 <osThreadCreate>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d102      	bne.n	8000f54 <TASK_FPGA_COMMUNICATION_INIT+0x30>
		printf("Booboo created SPI task \r\n");
 8000f4e:	4804      	ldr	r0, [pc, #16]	; (8000f60 <TASK_FPGA_COMMUNICATION_INIT+0x3c>)
 8000f50:	f019 ffc4 	bl	801aedc <puts>
	}
}
 8000f54:	bf00      	nop
 8000f56:	3720      	adds	r7, #32
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bdb0      	pop	{r4, r5, r7, pc}
 8000f5c:	0801d088 	.word	0x0801d088
 8000f60:	0801d06c 	.word	0x0801d06c

08000f64 <FPGA_COMMUNICATION_task_entry>:

void FPGA_COMMUNICATION_task_entry(void const *arg){
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b08a      	sub	sp, #40	; 0x28
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
	spi_to_udp_t spi_message = {0};
 8000f6c:	f107 0308 	add.w	r3, r7, #8
 8000f70:	2200      	movs	r2, #0
 8000f72:	601a      	str	r2, [r3, #0]
 8000f74:	605a      	str	r2, [r3, #4]
 8000f76:	609a      	str	r2, [r3, #8]
	SPI_HandleTypeDef *hspi;
	uint16_t counter = 0;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	84fb      	strh	r3, [r7, #38]	; 0x26
	size_t num_elements = sizeof(rx_buffers[current_buffer]) / sizeof(rx_buffers[current_buffer][0]);
 8000f7c:	2340      	movs	r3, #64	; 0x40
 8000f7e:	61bb      	str	r3, [r7, #24]
	int allGoodFlag = 0;
 8000f80:	2300      	movs	r3, #0
 8000f82:	623b      	str	r3, [r7, #32]
	hspi = &hspi4;
 8000f84:	4b2d      	ldr	r3, [pc, #180]	; (800103c <FPGA_COMMUNICATION_task_entry+0xd8>)
 8000f86:	617b      	str	r3, [r7, #20]
	HAL_SPI_Receive_DMA(hspi, rx_buffers[current_buffer], SPI_BUFFER_SIZE);
 8000f88:	4b2d      	ldr	r3, [pc, #180]	; (8001040 <FPGA_COMMUNICATION_task_entry+0xdc>)
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	01db      	lsls	r3, r3, #7
 8000f90:	4a2c      	ldr	r2, [pc, #176]	; (8001044 <FPGA_COMMUNICATION_task_entry+0xe0>)
 8000f92:	4413      	add	r3, r2
 8000f94:	2240      	movs	r2, #64	; 0x40
 8000f96:	4619      	mov	r1, r3
 8000f98:	6978      	ldr	r0, [r7, #20]
 8000f9a:	f004 feab 	bl	8005cf4 <HAL_SPI_Receive_DMA>
	while(1)
	{
 		if (spi_flag){
 8000f9e:	4b2a      	ldr	r3, [pc, #168]	; (8001048 <FPGA_COMMUNICATION_task_entry+0xe4>)
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d045      	beq.n	8001032 <FPGA_COMMUNICATION_task_entry+0xce>
 			FULL_TASK_SCOPE_Port->BSRR = FULL_TASK_SCOPE_Pin;
 8000fa6:	4b29      	ldr	r3, [pc, #164]	; (800104c <FPGA_COMMUNICATION_task_entry+0xe8>)
 8000fa8:	2220      	movs	r2, #32
 8000faa:	619a      	str	r2, [r3, #24]
 			SPI_TASK_SCOPE_Port ->BSRR = SPI_TASK_SCOPE_Pin;
 8000fac:	4b27      	ldr	r3, [pc, #156]	; (800104c <FPGA_COMMUNICATION_task_entry+0xe8>)
 8000fae:	2240      	movs	r2, #64	; 0x40
 8000fb0:	619a      	str	r2, [r3, #24]


			//printf("Data %04X-%04X-%04X-%04X \r\n", rx_buffers[current_buffer][0], rx_buffers[current_buffer][1], rx_buffers[current_buffer][BUFFER_SIZE - 2], rx_buffers[current_buffer][BUFFER_SIZE - 1]);


            spi_message.buffer = (void *)rx_buffers[current_buffer];
 8000fb2:	4b23      	ldr	r3, [pc, #140]	; (8001040 <FPGA_COMMUNICATION_task_entry+0xdc>)
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	b2db      	uxtb	r3, r3
 8000fb8:	01db      	lsls	r3, r3, #7
 8000fba:	4a22      	ldr	r2, [pc, #136]	; (8001044 <FPGA_COMMUNICATION_task_entry+0xe0>)
 8000fbc:	4413      	add	r3, r2
 8000fbe:	60fb      	str	r3, [r7, #12]
            if (arg != 0) {
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d00c      	beq.n	8000fe0 <FPGA_COMMUNICATION_task_entry+0x7c>
                if (xQueueSend((QueueHandle_t)arg, (void *)&spi_message, (TickType_t)2) != pdPASS) {
 8000fc6:	f107 0108 	add.w	r1, r7, #8
 8000fca:	2300      	movs	r3, #0
 8000fcc:	2202      	movs	r2, #2
 8000fce:	6878      	ldr	r0, [r7, #4]
 8000fd0:	f009 f924 	bl	800a21c <xQueueGenericSend>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b01      	cmp	r3, #1
 8000fd8:	d002      	beq.n	8000fe0 <FPGA_COMMUNICATION_task_entry+0x7c>
                    printf("problem in queueSend \r\n");
 8000fda:	481d      	ldr	r0, [pc, #116]	; (8001050 <FPGA_COMMUNICATION_task_entry+0xec>)
 8000fdc:	f019 ff7e 	bl	801aedc <puts>
                }
            }
            counter++;
 8000fe0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000fe2:	3301      	adds	r3, #1
 8000fe4:	84fb      	strh	r3, [r7, #38]	; 0x26
			//printf("%lu \r\n", counter);


 			allGoodFlag = 0;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	623b      	str	r3, [r7, #32]
			spi_flag = 0;
 8000fea:	4b17      	ldr	r3, [pc, #92]	; (8001048 <FPGA_COMMUNICATION_task_entry+0xe4>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	701a      	strb	r2, [r3, #0]
			for (size_t i = 0; i < SPI_BUFFER_SIZE; i++) {
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	61fb      	str	r3, [r7, #28]
 8000ff4:	e00f      	b.n	8001016 <FPGA_COMMUNICATION_task_entry+0xb2>
				if (rx_buffers[current_buffer][i] != 0x0001){
 8000ff6:	4b12      	ldr	r3, [pc, #72]	; (8001040 <FPGA_COMMUNICATION_task_entry+0xdc>)
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	b2db      	uxtb	r3, r3
 8000ffc:	4911      	ldr	r1, [pc, #68]	; (8001044 <FPGA_COMMUNICATION_task_entry+0xe0>)
 8000ffe:	019a      	lsls	r2, r3, #6
 8001000:	69fb      	ldr	r3, [r7, #28]
 8001002:	4413      	add	r3, r2
 8001004:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001008:	2b01      	cmp	r3, #1
 800100a:	d001      	beq.n	8001010 <FPGA_COMMUNICATION_task_entry+0xac>
					allGoodFlag = 1;
 800100c:	2301      	movs	r3, #1
 800100e:	623b      	str	r3, [r7, #32]
			for (size_t i = 0; i < SPI_BUFFER_SIZE; i++) {
 8001010:	69fb      	ldr	r3, [r7, #28]
 8001012:	3301      	adds	r3, #1
 8001014:	61fb      	str	r3, [r7, #28]
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	2b3f      	cmp	r3, #63	; 0x3f
 800101a:	d9ec      	bls.n	8000ff6 <FPGA_COMMUNICATION_task_entry+0x92>
					//printf("Data from %u= %u is %04X \r\n",current_buffer ,i, rx_buffers[current_buffer][i]);
				}
			}
			if (allGoodFlag == 0){
 800101c:	6a3b      	ldr	r3, [r7, #32]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d102      	bne.n	8001028 <FPGA_COMMUNICATION_task_entry+0xc4>
				printf("AllGood \r\n");
 8001022:	480c      	ldr	r0, [pc, #48]	; (8001054 <FPGA_COMMUNICATION_task_entry+0xf0>)
 8001024:	f019 ff5a 	bl	801aedc <puts>
			}

			  //RESET SPI_TASK_Scope_Pin
			  SPI_TASK_SCOPE_Port->BSRR = (uint32_t)SPI_TASK_SCOPE_Pin << 16U;
 8001028:	4b08      	ldr	r3, [pc, #32]	; (800104c <FPGA_COMMUNICATION_task_entry+0xe8>)
 800102a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800102e:	619a      	str	r2, [r3, #24]
 8001030:	e7b5      	b.n	8000f9e <FPGA_COMMUNICATION_task_entry+0x3a>
	    	}
			else{
				vTaskDelay(1);
 8001032:	2001      	movs	r0, #1
 8001034:	f00a f914 	bl	800b260 <vTaskDelay>
 		if (spi_flag){
 8001038:	e7b1      	b.n	8000f9e <FPGA_COMMUNICATION_task_entry+0x3a>
 800103a:	bf00      	nop
 800103c:	2000093c 	.word	0x2000093c
 8001040:	200002c0 	.word	0x200002c0
 8001044:	200002c4 	.word	0x200002c4
 8001048:	200002b8 	.word	0x200002b8
 800104c:	40020800 	.word	0x40020800
 8001050:	0801d09c 	.word	0x0801d09c
 8001054:	0801d0b4 	.word	0x0801d0b4

08001058 <INIT_UPD>:



void UDP_TRANSMIT_task_entry(void const *arg);

int INIT_UPD(void){
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0

  res = ipaddr_aton(ip_str_server, &server_addr);
 800105c:	4b1d      	ldr	r3, [pc, #116]	; (80010d4 <INIT_UPD+0x7c>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	491d      	ldr	r1, [pc, #116]	; (80010d8 <INIT_UPD+0x80>)
 8001062:	4618      	mov	r0, r3
 8001064:	f017 ff90 	bl	8018f88 <ip4addr_aton>
 8001068:	4603      	mov	r3, r0
 800106a:	4a1c      	ldr	r2, [pc, #112]	; (80010dc <INIT_UPD+0x84>)
 800106c:	6013      	str	r3, [r2, #0]

  if (res == 0){
 800106e:	4b1b      	ldr	r3, [pc, #108]	; (80010dc <INIT_UPD+0x84>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d105      	bne.n	8001082 <INIT_UPD+0x2a>
      printf("Failed to convert string (%s) to IP \r\n", ip_str_server);
 8001076:	4b17      	ldr	r3, [pc, #92]	; (80010d4 <INIT_UPD+0x7c>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4619      	mov	r1, r3
 800107c:	4818      	ldr	r0, [pc, #96]	; (80010e0 <INIT_UPD+0x88>)
 800107e:	f019 fea7 	bl	801add0 <iprintf>
      //return SL_STATUS_FAIL;
  }
  upcb = udp_new();
 8001082:	f014 fba7 	bl	80157d4 <udp_new>
 8001086:	4603      	mov	r3, r0
 8001088:	4a16      	ldr	r2, [pc, #88]	; (80010e4 <INIT_UPD+0x8c>)
 800108a:	6013      	str	r3, [r2, #0]

  if (upcb == NULL){
 800108c:	4b15      	ldr	r3, [pc, #84]	; (80010e4 <INIT_UPD+0x8c>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d102      	bne.n	800109a <INIT_UPD+0x42>
      printf("UDP PCB creation failed \r\n");
 8001094:	4814      	ldr	r0, [pc, #80]	; (80010e8 <INIT_UPD+0x90>)
 8001096:	f019 ff21 	bl	801aedc <puts>
      //return SL_STATUS_FAIL;
  }

  err = udp_connect(upcb, &server_addr, UDP_SERVER_PORT_DEFAULT);
 800109a:	4b12      	ldr	r3, [pc, #72]	; (80010e4 <INIT_UPD+0x8c>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f242 7210 	movw	r2, #10000	; 0x2710
 80010a2:	490d      	ldr	r1, [pc, #52]	; (80010d8 <INIT_UPD+0x80>)
 80010a4:	4618      	mov	r0, r3
 80010a6:	f014 fa9d 	bl	80155e4 <udp_connect>
 80010aa:	4603      	mov	r3, r0
 80010ac:	461a      	mov	r2, r3
 80010ae:	4b0f      	ldr	r3, [pc, #60]	; (80010ec <INIT_UPD+0x94>)
 80010b0:	701a      	strb	r2, [r3, #0]


  if (err == ERR_OK){
 80010b2:	4b0e      	ldr	r3, [pc, #56]	; (80010ec <INIT_UPD+0x94>)
 80010b4:	f993 3000 	ldrsb.w	r3, [r3]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d105      	bne.n	80010c8 <INIT_UPD+0x70>
        printf("Client UDP connected to %s \r\n", ip_str_server);
 80010bc:	4b05      	ldr	r3, [pc, #20]	; (80010d4 <INIT_UPD+0x7c>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4619      	mov	r1, r3
 80010c2:	480b      	ldr	r0, [pc, #44]	; (80010f0 <INIT_UPD+0x98>)
 80010c4:	f019 fe84 	bl	801add0 <iprintf>
  }

  return err;
 80010c8:	4b08      	ldr	r3, [pc, #32]	; (80010ec <INIT_UPD+0x94>)
 80010ca:	f993 3000 	ldrsb.w	r3, [r3]
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	20000000 	.word	0x20000000
 80010d8:	200003c4 	.word	0x200003c4
 80010dc:	20000004 	.word	0x20000004
 80010e0:	0801d0e0 	.word	0x0801d0e0
 80010e4:	200002bc 	.word	0x200002bc
 80010e8:	0801d108 	.word	0x0801d108
 80010ec:	200003c8 	.word	0x200003c8
 80010f0:	0801d124 	.word	0x0801d124

080010f4 <TASK_UDP_TRANSMIT_INIT>:



void TASK_UDP_TRANSMIT_INIT(void *arg){
 80010f4:	b5b0      	push	{r4, r5, r7, lr}
 80010f6:	b088      	sub	sp, #32
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]

//	udp_ready = xSemaphoreCreateBinary();

	osThreadDef(UDP_Tx_handle, UDP_TRANSMIT_task_entry, osPriorityAboveNormal, 0, configMINIMAL_STACK_SIZE*10);
 80010fc:	4b0b      	ldr	r3, [pc, #44]	; (800112c <TASK_UDP_TRANSMIT_INIT+0x38>)
 80010fe:	f107 040c 	add.w	r4, r7, #12
 8001102:	461d      	mov	r5, r3
 8001104:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001106:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001108:	682b      	ldr	r3, [r5, #0]
 800110a:	6023      	str	r3, [r4, #0]

	if (osThreadCreate(osThread(UDP_Tx_handle), (void *) arg) == NULL){
 800110c:	f107 030c 	add.w	r3, r7, #12
 8001110:	6879      	ldr	r1, [r7, #4]
 8001112:	4618      	mov	r0, r3
 8001114:	f008 fb7f 	bl	8009816 <osThreadCreate>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d102      	bne.n	8001124 <TASK_UDP_TRANSMIT_INIT+0x30>
		printf("Booboo creating UDP task \r\n");
 800111e:	4804      	ldr	r0, [pc, #16]	; (8001130 <TASK_UDP_TRANSMIT_INIT+0x3c>)
 8001120:	f019 fedc 	bl	801aedc <puts>
	}
}
 8001124:	bf00      	nop
 8001126:	3720      	adds	r7, #32
 8001128:	46bd      	mov	sp, r7
 800112a:	bdb0      	pop	{r4, r5, r7, pc}
 800112c:	0801d160 	.word	0x0801d160
 8001130:	0801d144 	.word	0x0801d144

08001134 <UDP_TRANSMIT_task_entry>:




void UDP_TRANSMIT_task_entry(void const *arg){
 8001134:	b580      	push	{r7, lr}
 8001136:	b088      	sub	sp, #32
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]

	  struct pbuf *p;
	  uint32_t counter = 0;
 800113c:	2300      	movs	r3, #0
 800113e:	61bb      	str	r3, [r7, #24]
	  spi_to_udp_t udp_message = {0};
 8001140:	f107 030c 	add.w	r3, r7, #12
 8001144:	2200      	movs	r2, #0
 8001146:	601a      	str	r2, [r3, #0]
 8001148:	605a      	str	r2, [r3, #4]
 800114a:	609a      	str	r2, [r3, #8]


	  p = pbuf_alloc(PBUF_TRANSPORT, UDP_BUFFER_SIZE, PBUF_RAM);
 800114c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8001150:	2180      	movs	r1, #128	; 0x80
 8001152:	2036      	movs	r0, #54	; 0x36
 8001154:	f00d fb98 	bl	800e888 <pbuf_alloc>
 8001158:	61f8      	str	r0, [r7, #28]

	  while(1){
		if(xQueueReceive((QueueHandle_t)arg, (void *)&udp_message , (TickType_t)1) == pdPASS){
 800115a:	f107 030c 	add.w	r3, r7, #12
 800115e:	2201      	movs	r2, #1
 8001160:	4619      	mov	r1, r3
 8001162:	6878      	ldr	r0, [r7, #4]
 8001164:	f009 fa80 	bl	800a668 <xQueueReceive>
 8001168:	4603      	mov	r3, r0
 800116a:	2b01      	cmp	r3, #1
 800116c:	d128      	bne.n	80011c0 <UDP_TRANSMIT_task_entry+0x8c>
//			printf("%u \r\n", counter);
//			printf("%02x %02x %02x \r\n",udp_message.data0, udp_message.data1, udp_message.data2);

			 //SET UDP_TASK_Scope_Pin
			UDP_TASK_SCOPE_Port->BSRR = UDP_TASK_SCOPE_Pin;
 800116e:	4b16      	ldr	r3, [pc, #88]	; (80011c8 <UDP_TRANSMIT_task_entry+0x94>)
 8001170:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001174:	619a      	str	r2, [r3, #24]

			if (p == NULL){
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d109      	bne.n	8001190 <UDP_TRANSMIT_task_entry+0x5c>
				p = pbuf_alloc(PBUF_TRANSPORT, UDP_BUFFER_SIZE, PBUF_RAM);
 800117c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8001180:	2180      	movs	r1, #128	; 0x80
 8001182:	2036      	movs	r0, #54	; 0x36
 8001184:	f00d fb80 	bl	800e888 <pbuf_alloc>
 8001188:	61f8      	str	r0, [r7, #28]
				printf("p is NULL \r\n");
 800118a:	4810      	ldr	r0, [pc, #64]	; (80011cc <UDP_TRANSMIT_task_entry+0x98>)
 800118c:	f019 fea6 	bl	801aedc <puts>
			}


			counter ++;
 8001190:	69bb      	ldr	r3, [r7, #24]
 8001192:	3301      	adds	r3, #1
 8001194:	61bb      	str	r3, [r7, #24]
			//pbuf_take_at(p, counter, 2, SPI_DMA_BUFFER_SIZE);
			pbuf_take_at(p, (const void *)udp_message.buffer, UDP_BUFFER_SIZE, 0);
 8001196:	6939      	ldr	r1, [r7, #16]
 8001198:	2300      	movs	r3, #0
 800119a:	2280      	movs	r2, #128	; 0x80
 800119c:	69f8      	ldr	r0, [r7, #28]
 800119e:	f00e f9a1 	bl	800f4e4 <pbuf_take_at>
//				printf("0x%04x \r\n", ((uint16_t*)udp_message.buffer)[i]);
//			}

			//printf("0x%08x - 0x%08x - 0x%08x\r\n", *(uint16_t*)udp_message.buffer, *(uint16_t*)udp_message.buffer+2, *(uint16_t*)udp_message.buffer+udp_message.message_lenght-1);

			udp_send(upcb, p);
 80011a2:	4b0b      	ldr	r3, [pc, #44]	; (80011d0 <UDP_TRANSMIT_task_entry+0x9c>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	69f9      	ldr	r1, [r7, #28]
 80011a8:	4618      	mov	r0, r3
 80011aa:	f013 ff8f 	bl	80150cc <udp_send>

			//printf("%d \r\n",p->len);

			//RESET UDP_TASK_Scope_Pin
			UDP_TASK_SCOPE_Port->BSRR = (uint32_t)UDP_TASK_SCOPE_Pin << 16U;
 80011ae:	4b06      	ldr	r3, [pc, #24]	; (80011c8 <UDP_TRANSMIT_task_entry+0x94>)
 80011b0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80011b4:	619a      	str	r2, [r3, #24]

			//RESET FULL_TASK_Scope_Pin
			FULL_TASK_SCOPE_Port->BSRR = (uint32_t)FULL_TASK_SCOPE_Pin << 16U;
 80011b6:	4b04      	ldr	r3, [pc, #16]	; (80011c8 <UDP_TRANSMIT_task_entry+0x94>)
 80011b8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80011bc:	619a      	str	r2, [r3, #24]
 80011be:	e7cc      	b.n	800115a <UDP_TRANSMIT_task_entry+0x26>

			//printf("%u \r8n", counter);

			//spi_flag = true;
		}else{
			vTaskDelay(1);
 80011c0:	2001      	movs	r0, #1
 80011c2:	f00a f84d 	bl	800b260 <vTaskDelay>
		if(xQueueReceive((QueueHandle_t)arg, (void *)&udp_message , (TickType_t)1) == pdPASS){
 80011c6:	e7c8      	b.n	800115a <UDP_TRANSMIT_task_entry+0x26>
 80011c8:	40020800 	.word	0x40020800
 80011cc:	0801d174 	.word	0x0801d174
 80011d0:	200002bc 	.word	0x200002bc

080011d4 <from_hex>:
 *
 * @param ch Character to convert to integer.
 * @returns Returns integer result.
 ******************************************************************************/
char from_hex(char ch)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b085      	sub	sp, #20
 80011d8:	af00      	add	r7, sp, #0
 80011da:	4603      	mov	r3, r0
 80011dc:	71fb      	strb	r3, [r7, #7]
  return isdigit(ch) ? ch - '0' : tolower(ch) - 'a' + 10;
 80011de:	79fb      	ldrb	r3, [r7, #7]
 80011e0:	3301      	adds	r3, #1
 80011e2:	4a11      	ldr	r2, [pc, #68]	; (8001228 <from_hex+0x54>)
 80011e4:	4413      	add	r3, r2
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	f003 0304 	and.w	r3, r3, #4
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d003      	beq.n	80011f8 <from_hex+0x24>
 80011f0:	79fb      	ldrb	r3, [r7, #7]
 80011f2:	3b30      	subs	r3, #48	; 0x30
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	e011      	b.n	800121c <from_hex+0x48>
 80011f8:	79fb      	ldrb	r3, [r7, #7]
 80011fa:	73fb      	strb	r3, [r7, #15]
 80011fc:	7bfb      	ldrb	r3, [r7, #15]
 80011fe:	3301      	adds	r3, #1
 8001200:	4a09      	ldr	r2, [pc, #36]	; (8001228 <from_hex+0x54>)
 8001202:	4413      	add	r3, r2
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	f003 0303 	and.w	r3, r3, #3
 800120a:	2b01      	cmp	r3, #1
 800120c:	d102      	bne.n	8001214 <from_hex+0x40>
 800120e:	7bfb      	ldrb	r3, [r7, #15]
 8001210:	3320      	adds	r3, #32
 8001212:	e000      	b.n	8001216 <from_hex+0x42>
 8001214:	7bfb      	ldrb	r3, [r7, #15]
 8001216:	b2db      	uxtb	r3, r3
 8001218:	3b57      	subs	r3, #87	; 0x57
 800121a:	b2db      	uxtb	r3, r3
}
 800121c:	4618      	mov	r0, r3
 800121e:	3714      	adds	r7, #20
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr
 8001228:	0806c88c 	.word	0x0806c88c

0800122c <url_decode>:
 *
 * @param str String to decode.
 * @returns Success or fail.
 ******************************************************************************/
sl_status_t url_decode(char *str)
{
 800122c:	b590      	push	{r4, r7, lr}
 800122e:	b095      	sub	sp, #84	; 0x54
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  char *pstr = str, rstr[64];
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	64fb      	str	r3, [r7, #76]	; 0x4c
  int i = 0;
 8001238:	2300      	movs	r3, #0
 800123a:	64bb      	str	r3, [r7, #72]	; 0x48

  if (strlen(str) > 64) {
 800123c:	6878      	ldr	r0, [r7, #4]
 800123e:	f7fe ffd9 	bl	80001f4 <strlen>
 8001242:	4603      	mov	r3, r0
 8001244:	2b40      	cmp	r3, #64	; 0x40
 8001246:	d947      	bls.n	80012d8 <url_decode+0xac>
    return SL_STATUS_FAIL;
 8001248:	2301      	movs	r3, #1
 800124a:	e056      	b.n	80012fa <url_decode+0xce>
  }

  while (*pstr) {
    if (*pstr == '%') {
 800124c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	2b25      	cmp	r3, #37	; 0x25
 8001252:	d128      	bne.n	80012a6 <url_decode+0x7a>
      if (pstr[1] && pstr[2]) {
 8001254:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001256:	3301      	adds	r3, #1
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d039      	beq.n	80012d2 <url_decode+0xa6>
 800125e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001260:	3302      	adds	r3, #2
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d034      	beq.n	80012d2 <url_decode+0xa6>
        rstr[i++] = from_hex(pstr[1]) << 4 | from_hex(pstr[2]);
 8001268:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800126a:	3301      	adds	r3, #1
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	4618      	mov	r0, r3
 8001270:	f7ff ffb0 	bl	80011d4 <from_hex>
 8001274:	4603      	mov	r3, r0
 8001276:	011b      	lsls	r3, r3, #4
 8001278:	b25c      	sxtb	r4, r3
 800127a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800127c:	3302      	adds	r3, #2
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	4618      	mov	r0, r3
 8001282:	f7ff ffa7 	bl	80011d4 <from_hex>
 8001286:	4603      	mov	r3, r0
 8001288:	b25b      	sxtb	r3, r3
 800128a:	4323      	orrs	r3, r4
 800128c:	b259      	sxtb	r1, r3
 800128e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001290:	1c5a      	adds	r2, r3, #1
 8001292:	64ba      	str	r2, [r7, #72]	; 0x48
 8001294:	b2ca      	uxtb	r2, r1
 8001296:	3350      	adds	r3, #80	; 0x50
 8001298:	443b      	add	r3, r7
 800129a:	f803 2c48 	strb.w	r2, [r3, #-72]
        pstr += 2;
 800129e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80012a0:	3302      	adds	r3, #2
 80012a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80012a4:	e015      	b.n	80012d2 <url_decode+0xa6>
      }
    } else if (*pstr == '+') {
 80012a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	2b2b      	cmp	r3, #43	; 0x2b
 80012ac:	d108      	bne.n	80012c0 <url_decode+0x94>
      rstr[i++]  = ' ';
 80012ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80012b0:	1c5a      	adds	r2, r3, #1
 80012b2:	64ba      	str	r2, [r7, #72]	; 0x48
 80012b4:	3350      	adds	r3, #80	; 0x50
 80012b6:	443b      	add	r3, r7
 80012b8:	2220      	movs	r2, #32
 80012ba:	f803 2c48 	strb.w	r2, [r3, #-72]
 80012be:	e008      	b.n	80012d2 <url_decode+0xa6>
    } else {
      rstr[i++] = *pstr;
 80012c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80012c2:	1c5a      	adds	r2, r3, #1
 80012c4:	64ba      	str	r2, [r7, #72]	; 0x48
 80012c6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80012c8:	7812      	ldrb	r2, [r2, #0]
 80012ca:	3350      	adds	r3, #80	; 0x50
 80012cc:	443b      	add	r3, r7
 80012ce:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
    pstr++;
 80012d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80012d4:	3301      	adds	r3, #1
 80012d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  while (*pstr) {
 80012d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d1b5      	bne.n	800124c <url_decode+0x20>
  }
  rstr[i] = '\0';
 80012e0:	f107 0208 	add.w	r2, r7, #8
 80012e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80012e6:	4413      	add	r3, r2
 80012e8:	2200      	movs	r2, #0
 80012ea:	701a      	strb	r2, [r3, #0]
  strcpy(str, &rstr[0]);
 80012ec:	f107 0308 	add.w	r3, r7, #8
 80012f0:	4619      	mov	r1, r3
 80012f2:	6878      	ldr	r0, [r7, #4]
 80012f4:	f019 fe48 	bl	801af88 <strcpy>
  return SL_STATUS_OK;
 80012f8:	2300      	movs	r3, #0
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	3754      	adds	r7, #84	; 0x54
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd90      	pop	{r4, r7, pc}
	...

08001304 <wifi_autoconnexion_init>:



void wifi_autoconnexion_init(void)
{
 8001304:	b5b0      	push	{r4, r5, r7, lr}
 8001306:	b086      	sub	sp, #24
 8001308:	af00      	add	r7, sp, #0

	osThreadDef(autoconnect_task, wifi_station_connect_task_entry, osPriorityBelowNormal, 0, 1024);
 800130a:	4b08      	ldr	r3, [pc, #32]	; (800132c <wifi_autoconnexion_init+0x28>)
 800130c:	1d3c      	adds	r4, r7, #4
 800130e:	461d      	mov	r5, r3
 8001310:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001312:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001314:	682b      	ldr	r3, [r5, #0]
 8001316:	6023      	str	r3, [r4, #0]
	osThreadCreate(osThread(autoconnect_task), NULL);
 8001318:	1d3b      	adds	r3, r7, #4
 800131a:	2100      	movs	r1, #0
 800131c:	4618      	mov	r0, r3
 800131e:	f008 fa7a 	bl	8009816 <osThreadCreate>

}
 8001322:	bf00      	nop
 8001324:	3718      	adds	r7, #24
 8001326:	46bd      	mov	sp, r7
 8001328:	bdb0      	pop	{r4, r5, r7, pc}
 800132a:	bf00      	nop
 800132c:	0801d1cc 	.word	0x0801d1cc

08001330 <wifi_station_connect_task_entry>:

/***************************************************************************//**
 * @brief Web server CGI handler to start the station interface.
 ******************************************************************************/
void wifi_station_connect_task_entry(const void *args)
{
 8001330:	b590      	push	{r4, r7, lr}
 8001332:	b097      	sub	sp, #92	; 0x5c
 8001334:	af08      	add	r7, sp, #32
 8001336:	6078      	str	r0, [r7, #4]
  sl_status_t status;
  int num_params = 3;
 8001338:	2303      	movs	r3, #3
 800133a:	62fb      	str	r3, [r7, #44]	; 0x2c
  char *pc_param[] ={"ssid", "pwd", "secu"," "};
 800133c:	4b58      	ldr	r3, [pc, #352]	; (80014a0 <wifi_station_connect_task_entry+0x170>)
 800133e:	f107 0418 	add.w	r4, r7, #24
 8001342:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001344:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  char *pc_value[] ={WLAN_SSID_DEFAULT, WLAN_PASSKEY_DEFAULT, "WPA2"," "};
 8001348:	4b56      	ldr	r3, [pc, #344]	; (80014a4 <wifi_station_connect_task_entry+0x174>)
 800134a:	f107 0408 	add.w	r4, r7, #8
 800134e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001350:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  int ssid_length = 0, passkey_length = 0;
 8001354:	2300      	movs	r3, #0
 8001356:	637b      	str	r3, [r7, #52]	; 0x34
 8001358:	2300      	movs	r3, #0
 800135a:	633b      	str	r3, [r7, #48]	; 0x30

  if (num_params == 3) {
 800135c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800135e:	2b03      	cmp	r3, #3
 8001360:	f040 8096 	bne.w	8001490 <wifi_station_connect_task_entry+0x160>
    if (strcmp(pc_param[0], "ssid") == 0)
 8001364:	69bb      	ldr	r3, [r7, #24]
 8001366:	4950      	ldr	r1, [pc, #320]	; (80014a8 <wifi_station_connect_task_entry+0x178>)
 8001368:	4618      	mov	r0, r3
 800136a:	f7fe ff39 	bl	80001e0 <strcmp>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d114      	bne.n	800139e <wifi_station_connect_task_entry+0x6e>
    {
      url_decode(pc_value[0]);
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	4618      	mov	r0, r3
 8001378:	f7ff ff58 	bl	800122c <url_decode>
      ssid_length = strlen(pc_value[0]);
 800137c:	68bb      	ldr	r3, [r7, #8]
 800137e:	4618      	mov	r0, r3
 8001380:	f7fe ff38 	bl	80001f4 <strlen>
 8001384:	4603      	mov	r3, r0
 8001386:	637b      	str	r3, [r7, #52]	; 0x34
      memset(wlan_ssid, 0, 32);
 8001388:	2220      	movs	r2, #32
 800138a:	2100      	movs	r1, #0
 800138c:	4847      	ldr	r0, [pc, #284]	; (80014ac <wifi_station_connect_task_entry+0x17c>)
 800138e:	f018 ffb7 	bl	801a300 <memset>
      strncpy(wlan_ssid, pc_value[0], ssid_length);
 8001392:	68bb      	ldr	r3, [r7, #8]
 8001394:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001396:	4619      	mov	r1, r3
 8001398:	4844      	ldr	r0, [pc, #272]	; (80014ac <wifi_station_connect_task_entry+0x17c>)
 800139a:	f019 fe11 	bl	801afc0 <strncpy>
    }
    if (strcmp(pc_param[1], "pwd") == 0)
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	4943      	ldr	r1, [pc, #268]	; (80014b0 <wifi_station_connect_task_entry+0x180>)
 80013a2:	4618      	mov	r0, r3
 80013a4:	f7fe ff1c 	bl	80001e0 <strcmp>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d114      	bne.n	80013d8 <wifi_station_connect_task_entry+0xa8>
    {
      url_decode(pc_value[1]);
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	4618      	mov	r0, r3
 80013b2:	f7ff ff3b 	bl	800122c <url_decode>
      passkey_length = strlen(pc_value[1]);
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	4618      	mov	r0, r3
 80013ba:	f7fe ff1b 	bl	80001f4 <strlen>
 80013be:	4603      	mov	r3, r0
 80013c0:	633b      	str	r3, [r7, #48]	; 0x30
      memset(wlan_passkey, 0, 64);
 80013c2:	2240      	movs	r2, #64	; 0x40
 80013c4:	2100      	movs	r1, #0
 80013c6:	483b      	ldr	r0, [pc, #236]	; (80014b4 <wifi_station_connect_task_entry+0x184>)
 80013c8:	f018 ff9a 	bl	801a300 <memset>
      strncpy(wlan_passkey, pc_value[1], passkey_length);
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80013d0:	4619      	mov	r1, r3
 80013d2:	4838      	ldr	r0, [pc, #224]	; (80014b4 <wifi_station_connect_task_entry+0x184>)
 80013d4:	f019 fdf4 	bl	801afc0 <strncpy>
    }
    if (strcmp(pc_param[2], "secu") == 0)
 80013d8:	6a3b      	ldr	r3, [r7, #32]
 80013da:	4937      	ldr	r1, [pc, #220]	; (80014b8 <wifi_station_connect_task_entry+0x188>)
 80013dc:	4618      	mov	r0, r3
 80013de:	f7fe feff 	bl	80001e0 <strcmp>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d12e      	bne.n	8001446 <wifi_station_connect_task_entry+0x116>
    {
      url_decode(pc_value[2]);
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	4618      	mov	r0, r3
 80013ec:	f7ff ff1e 	bl	800122c <url_decode>
      if ((strcmp(pc_value[2], "WPA2") == 0) || (strcmp(pc_value[2], "WPA") == 0))
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	4932      	ldr	r1, [pc, #200]	; (80014bc <wifi_station_connect_task_entry+0x18c>)
 80013f4:	4618      	mov	r0, r3
 80013f6:	f7fe fef3 	bl	80001e0 <strcmp>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d007      	beq.n	8001410 <wifi_station_connect_task_entry+0xe0>
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	492f      	ldr	r1, [pc, #188]	; (80014c0 <wifi_station_connect_task_entry+0x190>)
 8001404:	4618      	mov	r0, r3
 8001406:	f7fe feeb 	bl	80001e0 <strcmp>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d103      	bne.n	8001418 <wifi_station_connect_task_entry+0xe8>
      {
        wlan_security = WFM_SECURITY_MODE_WPA2_WPA1_PSK;
 8001410:	4b2c      	ldr	r3, [pc, #176]	; (80014c4 <wifi_station_connect_task_entry+0x194>)
 8001412:	2202      	movs	r2, #2
 8001414:	701a      	strb	r2, [r3, #0]
 8001416:	e016      	b.n	8001446 <wifi_station_connect_task_entry+0x116>
      }else if (strcmp(pc_value[2], "WEP") == 0)
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	492b      	ldr	r1, [pc, #172]	; (80014c8 <wifi_station_connect_task_entry+0x198>)
 800141c:	4618      	mov	r0, r3
 800141e:	f7fe fedf 	bl	80001e0 <strcmp>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d103      	bne.n	8001430 <wifi_station_connect_task_entry+0x100>
      {
        wlan_security = WFM_SECURITY_MODE_WEP;
 8001428:	4b26      	ldr	r3, [pc, #152]	; (80014c4 <wifi_station_connect_task_entry+0x194>)
 800142a:	2201      	movs	r2, #1
 800142c:	701a      	strb	r2, [r3, #0]
 800142e:	e00a      	b.n	8001446 <wifi_station_connect_task_entry+0x116>
      }else if (strcmp(pc_value[2], "OPEN") == 0)
 8001430:	693b      	ldr	r3, [r7, #16]
 8001432:	4926      	ldr	r1, [pc, #152]	; (80014cc <wifi_station_connect_task_entry+0x19c>)
 8001434:	4618      	mov	r0, r3
 8001436:	f7fe fed3 	bl	80001e0 <strcmp>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d102      	bne.n	8001446 <wifi_station_connect_task_entry+0x116>
      {
        wlan_security = WFM_SECURITY_MODE_OPEN;
 8001440:	4b20      	ldr	r3, [pc, #128]	; (80014c4 <wifi_station_connect_task_entry+0x194>)
 8001442:	2200      	movs	r2, #0
 8001444:	701a      	strb	r2, [r3, #0]
      }
    }
    if (!(wifi.state & SL_WFX_STA_INTERFACE_CONNECTED))
 8001446:	4b22      	ldr	r3, [pc, #136]	; (80014d0 <wifi_station_connect_task_entry+0x1a0>)
 8001448:	f893 3222 	ldrb.w	r3, [r3, #546]	; 0x222
 800144c:	f003 0302 	and.w	r3, r3, #2
 8001450:	2b00      	cmp	r3, #0
 8001452:	d120      	bne.n	8001496 <wifi_station_connect_task_entry+0x166>
    {

      status = sl_wfx_send_join_command((uint8_t*) wlan_ssid, ssid_length,
 8001454:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001456:	4b1b      	ldr	r3, [pc, #108]	; (80014c4 <wifi_station_connect_task_entry+0x194>)
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800145c:	b292      	uxth	r2, r2
 800145e:	2000      	movs	r0, #0
 8001460:	9006      	str	r0, [sp, #24]
 8001462:	2000      	movs	r0, #0
 8001464:	9005      	str	r0, [sp, #20]
 8001466:	9204      	str	r2, [sp, #16]
 8001468:	4a12      	ldr	r2, [pc, #72]	; (80014b4 <wifi_station_connect_task_entry+0x184>)
 800146a:	9203      	str	r2, [sp, #12]
 800146c:	2200      	movs	r2, #0
 800146e:	9202      	str	r2, [sp, #8]
 8001470:	2200      	movs	r2, #0
 8001472:	9201      	str	r2, [sp, #4]
 8001474:	9300      	str	r3, [sp, #0]
 8001476:	2300      	movs	r3, #0
 8001478:	2200      	movs	r2, #0
 800147a:	480c      	ldr	r0, [pc, #48]	; (80014ac <wifi_station_connect_task_entry+0x17c>)
 800147c:	f006 f8f2 	bl	8007664 <sl_wfx_send_join_command>
 8001480:	62b8      	str	r0, [r7, #40]	; 0x28
                                        NULL, 0, wlan_security, 0, 0,
                                        (uint8_t*) wlan_passkey, passkey_length,
                                        NULL, 0);\

      if(status != SL_STATUS_OK)
 8001482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001484:	2b00      	cmp	r3, #0
 8001486:	d006      	beq.n	8001496 <wifi_station_connect_task_entry+0x166>
      {
        printf("Connection command error\r\n");
 8001488:	4812      	ldr	r0, [pc, #72]	; (80014d4 <wifi_station_connect_task_entry+0x1a4>)
 800148a:	f019 fd27 	bl	801aedc <puts>
 800148e:	e002      	b.n	8001496 <wifi_station_connect_task_entry+0x166>
        //strcpy(event_log, "Connection command error");
      }
    }
  }else{
    printf("Invalid Connection Request\r\n");
 8001490:	4811      	ldr	r0, [pc, #68]	; (80014d8 <wifi_station_connect_task_entry+0x1a8>)
 8001492:	f019 fd23 	bl	801aedc <puts>
  }

  // Delete the init thread.
  while(1){
	  osThreadTerminate(NULL);
 8001496:	2000      	movs	r0, #0
 8001498:	f008 f9e4 	bl	8009864 <osThreadTerminate>
 800149c:	e7fb      	b.n	8001496 <wifi_station_connect_task_entry+0x166>
 800149e:	bf00      	nop
 80014a0:	0801d228 	.word	0x0801d228
 80014a4:	0801d238 	.word	0x0801d238
 80014a8:	0801d194 	.word	0x0801d194
 80014ac:	20000008 	.word	0x20000008
 80014b0:	0801d19c 	.word	0x0801d19c
 80014b4:	2000002c 	.word	0x2000002c
 80014b8:	0801d1a0 	.word	0x0801d1a0
 80014bc:	0801d1c4 	.word	0x0801d1c4
 80014c0:	0801d1e0 	.word	0x0801d1e0
 80014c4:	2000006d 	.word	0x2000006d
 80014c8:	0801d1e4 	.word	0x0801d1e4
 80014cc:	0801d1e8 	.word	0x0801d1e8
 80014d0:	200003cc 	.word	0x200003cc
 80014d4:	0801d1f0 	.word	0x0801d1f0
 80014d8:	0801d20c 	.word	0x0801d20c

080014dc <dhcpclient_set_link_state>:
 * Notify DHCP client task about the wifi status
 *
 * @param link_up link status
 ******************************************************************************/
void dhcpclient_set_link_state(int link_up)
{
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  if (link_up) {
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d003      	beq.n	80014f2 <dhcpclient_set_link_state+0x16>
    dhcp_state = DHCP_START;
 80014ea:	4b06      	ldr	r3, [pc, #24]	; (8001504 <dhcpclient_set_link_state+0x28>)
 80014ec:	2201      	movs	r2, #1
 80014ee:	701a      	strb	r2, [r3, #0]
  } else {
    /* Update DHCP state machine */
    dhcp_state = DHCP_LINK_DOWN;
  }
}
 80014f0:	e002      	b.n	80014f8 <dhcpclient_set_link_state+0x1c>
    dhcp_state = DHCP_LINK_DOWN;
 80014f2:	4b04      	ldr	r3, [pc, #16]	; (8001504 <dhcpclient_set_link_state+0x28>)
 80014f4:	2205      	movs	r2, #5
 80014f6:	701a      	strb	r2, [r3, #0]
}
 80014f8:	bf00      	nop
 80014fa:	370c      	adds	r7, #12
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr
 8001504:	200005f0 	.word	0x200005f0

08001508 <dhcpclient_start>:
 * DHCP client task.
 *
 * @param arg Network interface
 ******************************************************************************/
void dhcpclient_start(void const * argument)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b08a      	sub	sp, #40	; 0x28
 800150c:	af02      	add	r7, sp, #8
 800150e:	6078      	str	r0, [r7, #4]
  struct netif *netif = (struct netif *) argument;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	61fb      	str	r3, [r7, #28]
  struct dhcp *dhcp;

  for (;;)
  {

    switch (dhcp_state)
 8001514:	4b9a      	ldr	r3, [pc, #616]	; (8001780 <dhcpclient_start+0x278>)
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	b2db      	uxtb	r3, r3
 800151a:	2b05      	cmp	r3, #5
 800151c:	f000 811f 	beq.w	800175e <dhcpclient_start+0x256>
 8001520:	2b05      	cmp	r3, #5
 8001522:	f300 8125 	bgt.w	8001770 <dhcpclient_start+0x268>
 8001526:	2b01      	cmp	r3, #1
 8001528:	d002      	beq.n	8001530 <dhcpclient_start+0x28>
 800152a:	2b02      	cmp	r3, #2
 800152c:	d012      	beq.n	8001554 <dhcpclient_start+0x4c>
      /* Stop DHCP */
      netifapi_dhcp_stop(netif);
      dhcp_state = DHCP_OFF; 
    }
    break;
    default: break;
 800152e:	e11f      	b.n	8001770 <dhcpclient_start+0x268>
        ip_addr_set_zero_ip4(&netif->ip_addr);
 8001530:	69fb      	ldr	r3, [r7, #28]
 8001532:	2200      	movs	r2, #0
 8001534:	605a      	str	r2, [r3, #4]
        ip_addr_set_zero_ip4(&netif->netmask);
 8001536:	69fb      	ldr	r3, [r7, #28]
 8001538:	2200      	movs	r2, #0
 800153a:	609a      	str	r2, [r3, #8]
        ip_addr_set_zero_ip4(&netif->gw);       
 800153c:	69fb      	ldr	r3, [r7, #28]
 800153e:	2200      	movs	r2, #0
 8001540:	60da      	str	r2, [r3, #12]
        netifapi_dhcp_start(netif);
 8001542:	4a90      	ldr	r2, [pc, #576]	; (8001784 <dhcpclient_start+0x27c>)
 8001544:	2100      	movs	r1, #0
 8001546:	69f8      	ldr	r0, [r7, #28]
 8001548:	f00b fd56 	bl	800cff8 <netifapi_netif_common>
        dhcp_state = DHCP_WAIT_ADDRESS;
 800154c:	4b8c      	ldr	r3, [pc, #560]	; (8001780 <dhcpclient_start+0x278>)
 800154e:	2202      	movs	r2, #2
 8001550:	701a      	strb	r2, [r3, #0]
      break;
 8001552:	e110      	b.n	8001776 <dhcpclient_start+0x26e>
        if (dhcp_supplied_address(netif)) 
 8001554:	69f8      	ldr	r0, [r7, #28]
 8001556:	f016 f809 	bl	801756c <dhcp_supplied_address>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d018      	beq.n	8001592 <dhcpclient_start+0x8a>
          dhcp_state = DHCP_ADDRESS_ASSIGNED;	
 8001560:	4b87      	ldr	r3, [pc, #540]	; (8001780 <dhcpclient_start+0x278>)
 8001562:	2203      	movs	r2, #3
 8001564:	701a      	strb	r2, [r3, #0]
                  sta_netif.ip_addr.addr & 0xff,
 8001566:	4b88      	ldr	r3, [pc, #544]	; (8001788 <dhcpclient_start+0x280>)
 8001568:	685b      	ldr	r3, [r3, #4]
          printf("IP address : %lu.%lu.%lu.%lu\r\n",
 800156a:	b2d9      	uxtb	r1, r3
                  (sta_netif.ip_addr.addr >> 8) & 0xff,
 800156c:	4b86      	ldr	r3, [pc, #536]	; (8001788 <dhcpclient_start+0x280>)
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	0a1b      	lsrs	r3, r3, #8
          printf("IP address : %lu.%lu.%lu.%lu\r\n",
 8001572:	b2da      	uxtb	r2, r3
                  (sta_netif.ip_addr.addr >> 16) & 0xff,
 8001574:	4b84      	ldr	r3, [pc, #528]	; (8001788 <dhcpclient_start+0x280>)
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	0c1b      	lsrs	r3, r3, #16
          printf("IP address : %lu.%lu.%lu.%lu\r\n",
 800157a:	b2d8      	uxtb	r0, r3
                  (sta_netif.ip_addr.addr >> 24) & 0xff);
 800157c:	4b82      	ldr	r3, [pc, #520]	; (8001788 <dhcpclient_start+0x280>)
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	0e1b      	lsrs	r3, r3, #24
          printf("IP address : %lu.%lu.%lu.%lu\r\n",
 8001582:	9300      	str	r3, [sp, #0]
 8001584:	4603      	mov	r3, r0
 8001586:	4881      	ldr	r0, [pc, #516]	; (800178c <dhcpclient_start+0x284>)
 8001588:	f019 fc22 	bl	801add0 <iprintf>
          start_app_task();
 800158c:	f7ff fca6 	bl	8000edc <start_app_task>
      break;
 8001590:	e0f0      	b.n	8001774 <dhcpclient_start+0x26c>
          dhcp = (struct dhcp *)netif_get_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP);
 8001592:	69fb      	ldr	r3, [r7, #28]
 8001594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001596:	61bb      	str	r3, [r7, #24]
          if (dhcp->tries > MAX_DHCP_TRIES)
 8001598:	69bb      	ldr	r3, [r7, #24]
 800159a:	799b      	ldrb	r3, [r3, #6]
 800159c:	2b04      	cmp	r3, #4
 800159e:	f240 80e9 	bls.w	8001774 <dhcpclient_start+0x26c>
            dhcp_state = DHCP_TIMEOUT;
 80015a2:	4b77      	ldr	r3, [pc, #476]	; (8001780 <dhcpclient_start+0x278>)
 80015a4:	2204      	movs	r2, #4
 80015a6:	701a      	strb	r2, [r3, #0]
            netifapi_dhcp_stop(netif);
 80015a8:	2200      	movs	r2, #0
 80015aa:	4979      	ldr	r1, [pc, #484]	; (8001790 <dhcpclient_start+0x288>)
 80015ac:	69f8      	ldr	r0, [r7, #28]
 80015ae:	f00b fd23 	bl	800cff8 <netifapi_netif_common>
            IP_ADDR4(&ipaddr, sta_ip_addr0 , sta_ip_addr1 , sta_ip_addr2 , sta_ip_addr3 );
 80015b2:	4b78      	ldr	r3, [pc, #480]	; (8001794 <dhcpclient_start+0x28c>)
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	061a      	lsls	r2, r3, #24
 80015b8:	4b77      	ldr	r3, [pc, #476]	; (8001798 <dhcpclient_start+0x290>)
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	041b      	lsls	r3, r3, #16
 80015be:	431a      	orrs	r2, r3
 80015c0:	4b76      	ldr	r3, [pc, #472]	; (800179c <dhcpclient_start+0x294>)
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	021b      	lsls	r3, r3, #8
 80015c6:	4313      	orrs	r3, r2
 80015c8:	4a75      	ldr	r2, [pc, #468]	; (80017a0 <dhcpclient_start+0x298>)
 80015ca:	7812      	ldrb	r2, [r2, #0]
 80015cc:	4313      	orrs	r3, r2
 80015ce:	061a      	lsls	r2, r3, #24
 80015d0:	4b70      	ldr	r3, [pc, #448]	; (8001794 <dhcpclient_start+0x28c>)
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	0619      	lsls	r1, r3, #24
 80015d6:	4b70      	ldr	r3, [pc, #448]	; (8001798 <dhcpclient_start+0x290>)
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	041b      	lsls	r3, r3, #16
 80015dc:	4319      	orrs	r1, r3
 80015de:	4b6f      	ldr	r3, [pc, #444]	; (800179c <dhcpclient_start+0x294>)
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	021b      	lsls	r3, r3, #8
 80015e4:	430b      	orrs	r3, r1
 80015e6:	496e      	ldr	r1, [pc, #440]	; (80017a0 <dhcpclient_start+0x298>)
 80015e8:	7809      	ldrb	r1, [r1, #0]
 80015ea:	430b      	orrs	r3, r1
 80015ec:	021b      	lsls	r3, r3, #8
 80015ee:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80015f2:	431a      	orrs	r2, r3
 80015f4:	4b67      	ldr	r3, [pc, #412]	; (8001794 <dhcpclient_start+0x28c>)
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	0619      	lsls	r1, r3, #24
 80015fa:	4b67      	ldr	r3, [pc, #412]	; (8001798 <dhcpclient_start+0x290>)
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	041b      	lsls	r3, r3, #16
 8001600:	4319      	orrs	r1, r3
 8001602:	4b66      	ldr	r3, [pc, #408]	; (800179c <dhcpclient_start+0x294>)
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	021b      	lsls	r3, r3, #8
 8001608:	430b      	orrs	r3, r1
 800160a:	4965      	ldr	r1, [pc, #404]	; (80017a0 <dhcpclient_start+0x298>)
 800160c:	7809      	ldrb	r1, [r1, #0]
 800160e:	430b      	orrs	r3, r1
 8001610:	0a1b      	lsrs	r3, r3, #8
 8001612:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8001616:	431a      	orrs	r2, r3
 8001618:	4b5e      	ldr	r3, [pc, #376]	; (8001794 <dhcpclient_start+0x28c>)
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	0619      	lsls	r1, r3, #24
 800161e:	4b5e      	ldr	r3, [pc, #376]	; (8001798 <dhcpclient_start+0x290>)
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	041b      	lsls	r3, r3, #16
 8001624:	4319      	orrs	r1, r3
 8001626:	4b5d      	ldr	r3, [pc, #372]	; (800179c <dhcpclient_start+0x294>)
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	021b      	lsls	r3, r3, #8
 800162c:	430b      	orrs	r3, r1
 800162e:	495c      	ldr	r1, [pc, #368]	; (80017a0 <dhcpclient_start+0x298>)
 8001630:	7809      	ldrb	r1, [r1, #0]
 8001632:	430b      	orrs	r3, r1
 8001634:	0e1b      	lsrs	r3, r3, #24
 8001636:	4313      	orrs	r3, r2
 8001638:	617b      	str	r3, [r7, #20]
            IP_ADDR4(&netmask, sta_netmask_addr0, sta_netmask_addr1, sta_netmask_addr2, sta_netmask_addr3);
 800163a:	4b5a      	ldr	r3, [pc, #360]	; (80017a4 <dhcpclient_start+0x29c>)
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	061a      	lsls	r2, r3, #24
 8001640:	4b59      	ldr	r3, [pc, #356]	; (80017a8 <dhcpclient_start+0x2a0>)
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	041b      	lsls	r3, r3, #16
 8001646:	431a      	orrs	r2, r3
 8001648:	4b58      	ldr	r3, [pc, #352]	; (80017ac <dhcpclient_start+0x2a4>)
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	021b      	lsls	r3, r3, #8
 800164e:	4313      	orrs	r3, r2
 8001650:	4a57      	ldr	r2, [pc, #348]	; (80017b0 <dhcpclient_start+0x2a8>)
 8001652:	7812      	ldrb	r2, [r2, #0]
 8001654:	4313      	orrs	r3, r2
 8001656:	061a      	lsls	r2, r3, #24
 8001658:	4b52      	ldr	r3, [pc, #328]	; (80017a4 <dhcpclient_start+0x29c>)
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	0619      	lsls	r1, r3, #24
 800165e:	4b52      	ldr	r3, [pc, #328]	; (80017a8 <dhcpclient_start+0x2a0>)
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	041b      	lsls	r3, r3, #16
 8001664:	4319      	orrs	r1, r3
 8001666:	4b51      	ldr	r3, [pc, #324]	; (80017ac <dhcpclient_start+0x2a4>)
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	021b      	lsls	r3, r3, #8
 800166c:	430b      	orrs	r3, r1
 800166e:	4950      	ldr	r1, [pc, #320]	; (80017b0 <dhcpclient_start+0x2a8>)
 8001670:	7809      	ldrb	r1, [r1, #0]
 8001672:	430b      	orrs	r3, r1
 8001674:	021b      	lsls	r3, r3, #8
 8001676:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800167a:	431a      	orrs	r2, r3
 800167c:	4b49      	ldr	r3, [pc, #292]	; (80017a4 <dhcpclient_start+0x29c>)
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	0619      	lsls	r1, r3, #24
 8001682:	4b49      	ldr	r3, [pc, #292]	; (80017a8 <dhcpclient_start+0x2a0>)
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	041b      	lsls	r3, r3, #16
 8001688:	4319      	orrs	r1, r3
 800168a:	4b48      	ldr	r3, [pc, #288]	; (80017ac <dhcpclient_start+0x2a4>)
 800168c:	781b      	ldrb	r3, [r3, #0]
 800168e:	021b      	lsls	r3, r3, #8
 8001690:	430b      	orrs	r3, r1
 8001692:	4947      	ldr	r1, [pc, #284]	; (80017b0 <dhcpclient_start+0x2a8>)
 8001694:	7809      	ldrb	r1, [r1, #0]
 8001696:	430b      	orrs	r3, r1
 8001698:	0a1b      	lsrs	r3, r3, #8
 800169a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800169e:	431a      	orrs	r2, r3
 80016a0:	4b40      	ldr	r3, [pc, #256]	; (80017a4 <dhcpclient_start+0x29c>)
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	0619      	lsls	r1, r3, #24
 80016a6:	4b40      	ldr	r3, [pc, #256]	; (80017a8 <dhcpclient_start+0x2a0>)
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	041b      	lsls	r3, r3, #16
 80016ac:	4319      	orrs	r1, r3
 80016ae:	4b3f      	ldr	r3, [pc, #252]	; (80017ac <dhcpclient_start+0x2a4>)
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	021b      	lsls	r3, r3, #8
 80016b4:	430b      	orrs	r3, r1
 80016b6:	493e      	ldr	r1, [pc, #248]	; (80017b0 <dhcpclient_start+0x2a8>)
 80016b8:	7809      	ldrb	r1, [r1, #0]
 80016ba:	430b      	orrs	r3, r1
 80016bc:	0e1b      	lsrs	r3, r3, #24
 80016be:	4313      	orrs	r3, r2
 80016c0:	613b      	str	r3, [r7, #16]
            IP_ADDR4(&gw, sta_gw_addr0, sta_gw_addr1, sta_gw_addr2, sta_gw_addr3);
 80016c2:	4b3c      	ldr	r3, [pc, #240]	; (80017b4 <dhcpclient_start+0x2ac>)
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	061a      	lsls	r2, r3, #24
 80016c8:	4b3b      	ldr	r3, [pc, #236]	; (80017b8 <dhcpclient_start+0x2b0>)
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	041b      	lsls	r3, r3, #16
 80016ce:	431a      	orrs	r2, r3
 80016d0:	4b3a      	ldr	r3, [pc, #232]	; (80017bc <dhcpclient_start+0x2b4>)
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	021b      	lsls	r3, r3, #8
 80016d6:	4313      	orrs	r3, r2
 80016d8:	4a39      	ldr	r2, [pc, #228]	; (80017c0 <dhcpclient_start+0x2b8>)
 80016da:	7812      	ldrb	r2, [r2, #0]
 80016dc:	4313      	orrs	r3, r2
 80016de:	061a      	lsls	r2, r3, #24
 80016e0:	4b34      	ldr	r3, [pc, #208]	; (80017b4 <dhcpclient_start+0x2ac>)
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	0619      	lsls	r1, r3, #24
 80016e6:	4b34      	ldr	r3, [pc, #208]	; (80017b8 <dhcpclient_start+0x2b0>)
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	041b      	lsls	r3, r3, #16
 80016ec:	4319      	orrs	r1, r3
 80016ee:	4b33      	ldr	r3, [pc, #204]	; (80017bc <dhcpclient_start+0x2b4>)
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	021b      	lsls	r3, r3, #8
 80016f4:	430b      	orrs	r3, r1
 80016f6:	4932      	ldr	r1, [pc, #200]	; (80017c0 <dhcpclient_start+0x2b8>)
 80016f8:	7809      	ldrb	r1, [r1, #0]
 80016fa:	430b      	orrs	r3, r1
 80016fc:	021b      	lsls	r3, r3, #8
 80016fe:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001702:	431a      	orrs	r2, r3
 8001704:	4b2b      	ldr	r3, [pc, #172]	; (80017b4 <dhcpclient_start+0x2ac>)
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	0619      	lsls	r1, r3, #24
 800170a:	4b2b      	ldr	r3, [pc, #172]	; (80017b8 <dhcpclient_start+0x2b0>)
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	041b      	lsls	r3, r3, #16
 8001710:	4319      	orrs	r1, r3
 8001712:	4b2a      	ldr	r3, [pc, #168]	; (80017bc <dhcpclient_start+0x2b4>)
 8001714:	781b      	ldrb	r3, [r3, #0]
 8001716:	021b      	lsls	r3, r3, #8
 8001718:	430b      	orrs	r3, r1
 800171a:	4929      	ldr	r1, [pc, #164]	; (80017c0 <dhcpclient_start+0x2b8>)
 800171c:	7809      	ldrb	r1, [r1, #0]
 800171e:	430b      	orrs	r3, r1
 8001720:	0a1b      	lsrs	r3, r3, #8
 8001722:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8001726:	431a      	orrs	r2, r3
 8001728:	4b22      	ldr	r3, [pc, #136]	; (80017b4 <dhcpclient_start+0x2ac>)
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	0619      	lsls	r1, r3, #24
 800172e:	4b22      	ldr	r3, [pc, #136]	; (80017b8 <dhcpclient_start+0x2b0>)
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	041b      	lsls	r3, r3, #16
 8001734:	4319      	orrs	r1, r3
 8001736:	4b21      	ldr	r3, [pc, #132]	; (80017bc <dhcpclient_start+0x2b4>)
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	021b      	lsls	r3, r3, #8
 800173c:	430b      	orrs	r3, r1
 800173e:	4920      	ldr	r1, [pc, #128]	; (80017c0 <dhcpclient_start+0x2b8>)
 8001740:	7809      	ldrb	r1, [r1, #0]
 8001742:	430b      	orrs	r3, r1
 8001744:	0e1b      	lsrs	r3, r3, #24
 8001746:	4313      	orrs	r3, r2
 8001748:	60fb      	str	r3, [r7, #12]
            netif_set_addr(netif, ip_2_ip4(&ipaddr), ip_2_ip4(&netmask), ip_2_ip4(&gw));
 800174a:	f107 030c 	add.w	r3, r7, #12
 800174e:	f107 0210 	add.w	r2, r7, #16
 8001752:	f107 0114 	add.w	r1, r7, #20
 8001756:	69f8      	ldr	r0, [r7, #28]
 8001758:	f00c fe7e 	bl	800e458 <netif_set_addr>
      break;
 800175c:	e00a      	b.n	8001774 <dhcpclient_start+0x26c>
      netifapi_dhcp_stop(netif);
 800175e:	2200      	movs	r2, #0
 8001760:	490b      	ldr	r1, [pc, #44]	; (8001790 <dhcpclient_start+0x288>)
 8001762:	69f8      	ldr	r0, [r7, #28]
 8001764:	f00b fc48 	bl	800cff8 <netifapi_netif_common>
      dhcp_state = DHCP_OFF; 
 8001768:	4b05      	ldr	r3, [pc, #20]	; (8001780 <dhcpclient_start+0x278>)
 800176a:	2200      	movs	r2, #0
 800176c:	701a      	strb	r2, [r3, #0]
    break;
 800176e:	e002      	b.n	8001776 <dhcpclient_start+0x26e>
    default: break;
 8001770:	bf00      	nop
 8001772:	e000      	b.n	8001776 <dhcpclient_start+0x26e>
      break;
 8001774:	bf00      	nop
    }
    
    /* wait 1000 ms THIS IS AN INTERRUPT THAT COULD BE DELETED*/
    vTaskDelay(1000);
 8001776:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800177a:	f009 fd71 	bl	800b260 <vTaskDelay>
    switch (dhcp_state)
 800177e:	e6c9      	b.n	8001514 <dhcpclient_start+0xc>
 8001780:	200005f0 	.word	0x200005f0
 8001784:	08015f5d 	.word	0x08015f5d
 8001788:	2000084c 	.word	0x2000084c
 800178c:	0801d248 	.word	0x0801d248
 8001790:	08016a1d 	.word	0x08016a1d
 8001794:	20000098 	.word	0x20000098
 8001798:	20000099 	.word	0x20000099
 800179c:	200008ee 	.word	0x200008ee
 80017a0:	2000009a 	.word	0x2000009a
 80017a4:	2000009b 	.word	0x2000009b
 80017a8:	2000009c 	.word	0x2000009c
 80017ac:	2000009d 	.word	0x2000009d
 80017b0:	200008ef 	.word	0x200008ef
 80017b4:	200008f0 	.word	0x200008f0
 80017b8:	200008f1 	.word	0x200008f1
 80017bc:	200008f2 	.word	0x200008f2
 80017c0:	200008f3 	.word	0x200008f3

080017c4 <dhcpserver_remove_mac>:
 * Remove mac address from list of clients.
 *
 * @param mac MAC address to remove.
 ******************************************************************************/
void dhcpserver_remove_mac(struct eth_addr *mac)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b085      	sub	sp, #20
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  for (uint32_t i = 0; i < DHCPS_MAX_CLIENT; ++i) {
 80017cc:	2300      	movs	r3, #0
 80017ce:	60fb      	str	r3, [r7, #12]
 80017d0:	e08a      	b.n	80018e8 <dhcpserver_remove_mac+0x124>
    if (saved_mac[i].addr[0] == mac->addr[0] && saved_mac[i].addr[1] == mac->addr[1]
 80017d2:	494b      	ldr	r1, [pc, #300]	; (8001900 <dhcpserver_remove_mac+0x13c>)
 80017d4:	68fa      	ldr	r2, [r7, #12]
 80017d6:	4613      	mov	r3, r2
 80017d8:	005b      	lsls	r3, r3, #1
 80017da:	4413      	add	r3, r2
 80017dc:	005b      	lsls	r3, r3, #1
 80017de:	440b      	add	r3, r1
 80017e0:	781a      	ldrb	r2, [r3, #0]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	781b      	ldrb	r3, [r3, #0]
 80017e6:	429a      	cmp	r2, r3
 80017e8:	d17b      	bne.n	80018e2 <dhcpserver_remove_mac+0x11e>
 80017ea:	4945      	ldr	r1, [pc, #276]	; (8001900 <dhcpserver_remove_mac+0x13c>)
 80017ec:	68fa      	ldr	r2, [r7, #12]
 80017ee:	4613      	mov	r3, r2
 80017f0:	005b      	lsls	r3, r3, #1
 80017f2:	4413      	add	r3, r2
 80017f4:	005b      	lsls	r3, r3, #1
 80017f6:	440b      	add	r3, r1
 80017f8:	3301      	adds	r3, #1
 80017fa:	781a      	ldrb	r2, [r3, #0]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	785b      	ldrb	r3, [r3, #1]
 8001800:	429a      	cmp	r2, r3
 8001802:	d16e      	bne.n	80018e2 <dhcpserver_remove_mac+0x11e>
        && saved_mac[i].addr[2] == mac->addr[2] && saved_mac[i].addr[3] == mac->addr[3]
 8001804:	493e      	ldr	r1, [pc, #248]	; (8001900 <dhcpserver_remove_mac+0x13c>)
 8001806:	68fa      	ldr	r2, [r7, #12]
 8001808:	4613      	mov	r3, r2
 800180a:	005b      	lsls	r3, r3, #1
 800180c:	4413      	add	r3, r2
 800180e:	005b      	lsls	r3, r3, #1
 8001810:	440b      	add	r3, r1
 8001812:	3302      	adds	r3, #2
 8001814:	781a      	ldrb	r2, [r3, #0]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	789b      	ldrb	r3, [r3, #2]
 800181a:	429a      	cmp	r2, r3
 800181c:	d161      	bne.n	80018e2 <dhcpserver_remove_mac+0x11e>
 800181e:	4938      	ldr	r1, [pc, #224]	; (8001900 <dhcpserver_remove_mac+0x13c>)
 8001820:	68fa      	ldr	r2, [r7, #12]
 8001822:	4613      	mov	r3, r2
 8001824:	005b      	lsls	r3, r3, #1
 8001826:	4413      	add	r3, r2
 8001828:	005b      	lsls	r3, r3, #1
 800182a:	440b      	add	r3, r1
 800182c:	3303      	adds	r3, #3
 800182e:	781a      	ldrb	r2, [r3, #0]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	78db      	ldrb	r3, [r3, #3]
 8001834:	429a      	cmp	r2, r3
 8001836:	d154      	bne.n	80018e2 <dhcpserver_remove_mac+0x11e>
        && saved_mac[i].addr[4] == mac->addr[4] && saved_mac[i].addr[5] == mac->addr[5]) {
 8001838:	4931      	ldr	r1, [pc, #196]	; (8001900 <dhcpserver_remove_mac+0x13c>)
 800183a:	68fa      	ldr	r2, [r7, #12]
 800183c:	4613      	mov	r3, r2
 800183e:	005b      	lsls	r3, r3, #1
 8001840:	4413      	add	r3, r2
 8001842:	005b      	lsls	r3, r3, #1
 8001844:	440b      	add	r3, r1
 8001846:	3304      	adds	r3, #4
 8001848:	781a      	ldrb	r2, [r3, #0]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	791b      	ldrb	r3, [r3, #4]
 800184e:	429a      	cmp	r2, r3
 8001850:	d147      	bne.n	80018e2 <dhcpserver_remove_mac+0x11e>
 8001852:	492b      	ldr	r1, [pc, #172]	; (8001900 <dhcpserver_remove_mac+0x13c>)
 8001854:	68fa      	ldr	r2, [r7, #12]
 8001856:	4613      	mov	r3, r2
 8001858:	005b      	lsls	r3, r3, #1
 800185a:	4413      	add	r3, r2
 800185c:	005b      	lsls	r3, r3, #1
 800185e:	440b      	add	r3, r1
 8001860:	3305      	adds	r3, #5
 8001862:	781a      	ldrb	r2, [r3, #0]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	795b      	ldrb	r3, [r3, #5]
 8001868:	429a      	cmp	r2, r3
 800186a:	d13a      	bne.n	80018e2 <dhcpserver_remove_mac+0x11e>
      saved_mac[i].addr[0] = 0;
 800186c:	4924      	ldr	r1, [pc, #144]	; (8001900 <dhcpserver_remove_mac+0x13c>)
 800186e:	68fa      	ldr	r2, [r7, #12]
 8001870:	4613      	mov	r3, r2
 8001872:	005b      	lsls	r3, r3, #1
 8001874:	4413      	add	r3, r2
 8001876:	005b      	lsls	r3, r3, #1
 8001878:	440b      	add	r3, r1
 800187a:	2200      	movs	r2, #0
 800187c:	701a      	strb	r2, [r3, #0]
      saved_mac[i].addr[1] = 0;
 800187e:	4920      	ldr	r1, [pc, #128]	; (8001900 <dhcpserver_remove_mac+0x13c>)
 8001880:	68fa      	ldr	r2, [r7, #12]
 8001882:	4613      	mov	r3, r2
 8001884:	005b      	lsls	r3, r3, #1
 8001886:	4413      	add	r3, r2
 8001888:	005b      	lsls	r3, r3, #1
 800188a:	440b      	add	r3, r1
 800188c:	3301      	adds	r3, #1
 800188e:	2200      	movs	r2, #0
 8001890:	701a      	strb	r2, [r3, #0]
      saved_mac[i].addr[2] = 0;
 8001892:	491b      	ldr	r1, [pc, #108]	; (8001900 <dhcpserver_remove_mac+0x13c>)
 8001894:	68fa      	ldr	r2, [r7, #12]
 8001896:	4613      	mov	r3, r2
 8001898:	005b      	lsls	r3, r3, #1
 800189a:	4413      	add	r3, r2
 800189c:	005b      	lsls	r3, r3, #1
 800189e:	440b      	add	r3, r1
 80018a0:	3302      	adds	r3, #2
 80018a2:	2200      	movs	r2, #0
 80018a4:	701a      	strb	r2, [r3, #0]
      saved_mac[i].addr[3] = 0;
 80018a6:	4916      	ldr	r1, [pc, #88]	; (8001900 <dhcpserver_remove_mac+0x13c>)
 80018a8:	68fa      	ldr	r2, [r7, #12]
 80018aa:	4613      	mov	r3, r2
 80018ac:	005b      	lsls	r3, r3, #1
 80018ae:	4413      	add	r3, r2
 80018b0:	005b      	lsls	r3, r3, #1
 80018b2:	440b      	add	r3, r1
 80018b4:	3303      	adds	r3, #3
 80018b6:	2200      	movs	r2, #0
 80018b8:	701a      	strb	r2, [r3, #0]
      saved_mac[i].addr[4] = 0;
 80018ba:	4911      	ldr	r1, [pc, #68]	; (8001900 <dhcpserver_remove_mac+0x13c>)
 80018bc:	68fa      	ldr	r2, [r7, #12]
 80018be:	4613      	mov	r3, r2
 80018c0:	005b      	lsls	r3, r3, #1
 80018c2:	4413      	add	r3, r2
 80018c4:	005b      	lsls	r3, r3, #1
 80018c6:	440b      	add	r3, r1
 80018c8:	3304      	adds	r3, #4
 80018ca:	2200      	movs	r2, #0
 80018cc:	701a      	strb	r2, [r3, #0]
      saved_mac[i].addr[5] = 0;
 80018ce:	490c      	ldr	r1, [pc, #48]	; (8001900 <dhcpserver_remove_mac+0x13c>)
 80018d0:	68fa      	ldr	r2, [r7, #12]
 80018d2:	4613      	mov	r3, r2
 80018d4:	005b      	lsls	r3, r3, #1
 80018d6:	4413      	add	r3, r2
 80018d8:	005b      	lsls	r3, r3, #1
 80018da:	440b      	add	r3, r1
 80018dc:	3305      	adds	r3, #5
 80018de:	2200      	movs	r2, #0
 80018e0:	701a      	strb	r2, [r3, #0]
  for (uint32_t i = 0; i < DHCPS_MAX_CLIENT; ++i) {
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	3301      	adds	r3, #1
 80018e6:	60fb      	str	r3, [r7, #12]
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	2b07      	cmp	r3, #7
 80018ec:	f67f af71 	bls.w	80017d2 <dhcpserver_remove_mac+0xe>
    }
  }
}
 80018f0:	bf00      	nop
 80018f2:	bf00      	nop
 80018f4:	3714      	adds	r7, #20
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr
 80018fe:	bf00      	nop
 8001900:	200005f8 	.word	0x200005f8

08001904 <dhcpserver_save_mac>:

/***************************************************************************//**
 * Save mac address in list of clients.
 ******************************************************************************/
static void dhcpserver_save_mac(struct eth_addr *mac)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b084      	sub	sp, #16
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  // Remove previous listing of MAC.
  dhcpserver_remove_mac(mac);
 800190c:	6878      	ldr	r0, [r7, #4]
 800190e:	f7ff ff59 	bl	80017c4 <dhcpserver_remove_mac>

  for (uint8_t i = 0; i < DHCPS_MAX_CLIENT; ++i) {
 8001912:	2300      	movs	r3, #0
 8001914:	73fb      	strb	r3, [r7, #15]
 8001916:	e08b      	b.n	8001a30 <dhcpserver_save_mac+0x12c>
    if (saved_mac[i].addr[0] == 0 && saved_mac[i].addr[1] == 0
 8001918:	7bfa      	ldrb	r2, [r7, #15]
 800191a:	494a      	ldr	r1, [pc, #296]	; (8001a44 <dhcpserver_save_mac+0x140>)
 800191c:	4613      	mov	r3, r2
 800191e:	005b      	lsls	r3, r3, #1
 8001920:	4413      	add	r3, r2
 8001922:	005b      	lsls	r3, r3, #1
 8001924:	440b      	add	r3, r1
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d17e      	bne.n	8001a2a <dhcpserver_save_mac+0x126>
 800192c:	7bfa      	ldrb	r2, [r7, #15]
 800192e:	4945      	ldr	r1, [pc, #276]	; (8001a44 <dhcpserver_save_mac+0x140>)
 8001930:	4613      	mov	r3, r2
 8001932:	005b      	lsls	r3, r3, #1
 8001934:	4413      	add	r3, r2
 8001936:	005b      	lsls	r3, r3, #1
 8001938:	440b      	add	r3, r1
 800193a:	3301      	adds	r3, #1
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d173      	bne.n	8001a2a <dhcpserver_save_mac+0x126>
        && saved_mac[i].addr[2] == 0 && saved_mac[i].addr[3] == 0
 8001942:	7bfa      	ldrb	r2, [r7, #15]
 8001944:	493f      	ldr	r1, [pc, #252]	; (8001a44 <dhcpserver_save_mac+0x140>)
 8001946:	4613      	mov	r3, r2
 8001948:	005b      	lsls	r3, r3, #1
 800194a:	4413      	add	r3, r2
 800194c:	005b      	lsls	r3, r3, #1
 800194e:	440b      	add	r3, r1
 8001950:	3302      	adds	r3, #2
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d168      	bne.n	8001a2a <dhcpserver_save_mac+0x126>
 8001958:	7bfa      	ldrb	r2, [r7, #15]
 800195a:	493a      	ldr	r1, [pc, #232]	; (8001a44 <dhcpserver_save_mac+0x140>)
 800195c:	4613      	mov	r3, r2
 800195e:	005b      	lsls	r3, r3, #1
 8001960:	4413      	add	r3, r2
 8001962:	005b      	lsls	r3, r3, #1
 8001964:	440b      	add	r3, r1
 8001966:	3303      	adds	r3, #3
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d15d      	bne.n	8001a2a <dhcpserver_save_mac+0x126>
        && saved_mac[i].addr[4] == 0 && saved_mac[i].addr[5] == 0) {
 800196e:	7bfa      	ldrb	r2, [r7, #15]
 8001970:	4934      	ldr	r1, [pc, #208]	; (8001a44 <dhcpserver_save_mac+0x140>)
 8001972:	4613      	mov	r3, r2
 8001974:	005b      	lsls	r3, r3, #1
 8001976:	4413      	add	r3, r2
 8001978:	005b      	lsls	r3, r3, #1
 800197a:	440b      	add	r3, r1
 800197c:	3304      	adds	r3, #4
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d152      	bne.n	8001a2a <dhcpserver_save_mac+0x126>
 8001984:	7bfa      	ldrb	r2, [r7, #15]
 8001986:	492f      	ldr	r1, [pc, #188]	; (8001a44 <dhcpserver_save_mac+0x140>)
 8001988:	4613      	mov	r3, r2
 800198a:	005b      	lsls	r3, r3, #1
 800198c:	4413      	add	r3, r2
 800198e:	005b      	lsls	r3, r3, #1
 8001990:	440b      	add	r3, r1
 8001992:	3305      	adds	r3, #5
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d147      	bne.n	8001a2a <dhcpserver_save_mac+0x126>
      saved_mac[i].addr[0] = mac->addr[0];
 800199a:	7bfa      	ldrb	r2, [r7, #15]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	7818      	ldrb	r0, [r3, #0]
 80019a0:	4928      	ldr	r1, [pc, #160]	; (8001a44 <dhcpserver_save_mac+0x140>)
 80019a2:	4613      	mov	r3, r2
 80019a4:	005b      	lsls	r3, r3, #1
 80019a6:	4413      	add	r3, r2
 80019a8:	005b      	lsls	r3, r3, #1
 80019aa:	440b      	add	r3, r1
 80019ac:	4602      	mov	r2, r0
 80019ae:	701a      	strb	r2, [r3, #0]
      saved_mac[i].addr[1] = mac->addr[1];
 80019b0:	7bfa      	ldrb	r2, [r7, #15]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	7858      	ldrb	r0, [r3, #1]
 80019b6:	4923      	ldr	r1, [pc, #140]	; (8001a44 <dhcpserver_save_mac+0x140>)
 80019b8:	4613      	mov	r3, r2
 80019ba:	005b      	lsls	r3, r3, #1
 80019bc:	4413      	add	r3, r2
 80019be:	005b      	lsls	r3, r3, #1
 80019c0:	440b      	add	r3, r1
 80019c2:	3301      	adds	r3, #1
 80019c4:	4602      	mov	r2, r0
 80019c6:	701a      	strb	r2, [r3, #0]
      saved_mac[i].addr[2] = mac->addr[2];
 80019c8:	7bfa      	ldrb	r2, [r7, #15]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	7898      	ldrb	r0, [r3, #2]
 80019ce:	491d      	ldr	r1, [pc, #116]	; (8001a44 <dhcpserver_save_mac+0x140>)
 80019d0:	4613      	mov	r3, r2
 80019d2:	005b      	lsls	r3, r3, #1
 80019d4:	4413      	add	r3, r2
 80019d6:	005b      	lsls	r3, r3, #1
 80019d8:	440b      	add	r3, r1
 80019da:	3302      	adds	r3, #2
 80019dc:	4602      	mov	r2, r0
 80019de:	701a      	strb	r2, [r3, #0]
      saved_mac[i].addr[3] = mac->addr[3];
 80019e0:	7bfa      	ldrb	r2, [r7, #15]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	78d8      	ldrb	r0, [r3, #3]
 80019e6:	4917      	ldr	r1, [pc, #92]	; (8001a44 <dhcpserver_save_mac+0x140>)
 80019e8:	4613      	mov	r3, r2
 80019ea:	005b      	lsls	r3, r3, #1
 80019ec:	4413      	add	r3, r2
 80019ee:	005b      	lsls	r3, r3, #1
 80019f0:	440b      	add	r3, r1
 80019f2:	3303      	adds	r3, #3
 80019f4:	4602      	mov	r2, r0
 80019f6:	701a      	strb	r2, [r3, #0]
      saved_mac[i].addr[4] = mac->addr[4];
 80019f8:	7bfa      	ldrb	r2, [r7, #15]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	7918      	ldrb	r0, [r3, #4]
 80019fe:	4911      	ldr	r1, [pc, #68]	; (8001a44 <dhcpserver_save_mac+0x140>)
 8001a00:	4613      	mov	r3, r2
 8001a02:	005b      	lsls	r3, r3, #1
 8001a04:	4413      	add	r3, r2
 8001a06:	005b      	lsls	r3, r3, #1
 8001a08:	440b      	add	r3, r1
 8001a0a:	3304      	adds	r3, #4
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	701a      	strb	r2, [r3, #0]
      saved_mac[i].addr[5] = mac->addr[5];
 8001a10:	7bfa      	ldrb	r2, [r7, #15]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	7958      	ldrb	r0, [r3, #5]
 8001a16:	490b      	ldr	r1, [pc, #44]	; (8001a44 <dhcpserver_save_mac+0x140>)
 8001a18:	4613      	mov	r3, r2
 8001a1a:	005b      	lsls	r3, r3, #1
 8001a1c:	4413      	add	r3, r2
 8001a1e:	005b      	lsls	r3, r3, #1
 8001a20:	440b      	add	r3, r1
 8001a22:	3305      	adds	r3, #5
 8001a24:	4602      	mov	r2, r0
 8001a26:	701a      	strb	r2, [r3, #0]
      break;
 8001a28:	e007      	b.n	8001a3a <dhcpserver_save_mac+0x136>
  for (uint8_t i = 0; i < DHCPS_MAX_CLIENT; ++i) {
 8001a2a:	7bfb      	ldrb	r3, [r7, #15]
 8001a2c:	3301      	adds	r3, #1
 8001a2e:	73fb      	strb	r3, [r7, #15]
 8001a30:	7bfb      	ldrb	r3, [r7, #15]
 8001a32:	2b07      	cmp	r3, #7
 8001a34:	f67f af70 	bls.w	8001918 <dhcpserver_save_mac+0x14>
    }
  }
}
 8001a38:	bf00      	nop
 8001a3a:	bf00      	nop
 8001a3c:	3710      	adds	r7, #16
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	200005f8 	.word	0x200005f8

08001a48 <dhcpserver_get_ip>:
 *
 * @param mac MAC address of client.
 * @returns IP address
 ******************************************************************************/
ip_addr_t dhcpserver_get_ip(struct eth_addr *mac)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b085      	sub	sp, #20
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  ip_addr_t offer_ip = { 0 };
 8001a50:	2300      	movs	r3, #0
 8001a52:	60bb      	str	r3, [r7, #8]

  for (uint32_t i = 0; i < DHCPS_MAX_CLIENT; ++i) {
 8001a54:	2300      	movs	r3, #0
 8001a56:	60fb      	str	r3, [r7, #12]
 8001a58:	e060      	b.n	8001b1c <dhcpserver_get_ip+0xd4>
    if (saved_mac[i].addr[0] == mac->addr[0] && saved_mac[i].addr[1] == mac->addr[1]
 8001a5a:	4935      	ldr	r1, [pc, #212]	; (8001b30 <dhcpserver_get_ip+0xe8>)
 8001a5c:	68fa      	ldr	r2, [r7, #12]
 8001a5e:	4613      	mov	r3, r2
 8001a60:	005b      	lsls	r3, r3, #1
 8001a62:	4413      	add	r3, r2
 8001a64:	005b      	lsls	r3, r3, #1
 8001a66:	440b      	add	r3, r1
 8001a68:	781a      	ldrb	r2, [r3, #0]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	d151      	bne.n	8001b16 <dhcpserver_get_ip+0xce>
 8001a72:	492f      	ldr	r1, [pc, #188]	; (8001b30 <dhcpserver_get_ip+0xe8>)
 8001a74:	68fa      	ldr	r2, [r7, #12]
 8001a76:	4613      	mov	r3, r2
 8001a78:	005b      	lsls	r3, r3, #1
 8001a7a:	4413      	add	r3, r2
 8001a7c:	005b      	lsls	r3, r3, #1
 8001a7e:	440b      	add	r3, r1
 8001a80:	3301      	adds	r3, #1
 8001a82:	781a      	ldrb	r2, [r3, #0]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	785b      	ldrb	r3, [r3, #1]
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d144      	bne.n	8001b16 <dhcpserver_get_ip+0xce>
        && saved_mac[i].addr[2] == mac->addr[2] && saved_mac[i].addr[3] == mac->addr[3]
 8001a8c:	4928      	ldr	r1, [pc, #160]	; (8001b30 <dhcpserver_get_ip+0xe8>)
 8001a8e:	68fa      	ldr	r2, [r7, #12]
 8001a90:	4613      	mov	r3, r2
 8001a92:	005b      	lsls	r3, r3, #1
 8001a94:	4413      	add	r3, r2
 8001a96:	005b      	lsls	r3, r3, #1
 8001a98:	440b      	add	r3, r1
 8001a9a:	3302      	adds	r3, #2
 8001a9c:	781a      	ldrb	r2, [r3, #0]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	789b      	ldrb	r3, [r3, #2]
 8001aa2:	429a      	cmp	r2, r3
 8001aa4:	d137      	bne.n	8001b16 <dhcpserver_get_ip+0xce>
 8001aa6:	4922      	ldr	r1, [pc, #136]	; (8001b30 <dhcpserver_get_ip+0xe8>)
 8001aa8:	68fa      	ldr	r2, [r7, #12]
 8001aaa:	4613      	mov	r3, r2
 8001aac:	005b      	lsls	r3, r3, #1
 8001aae:	4413      	add	r3, r2
 8001ab0:	005b      	lsls	r3, r3, #1
 8001ab2:	440b      	add	r3, r1
 8001ab4:	3303      	adds	r3, #3
 8001ab6:	781a      	ldrb	r2, [r3, #0]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	78db      	ldrb	r3, [r3, #3]
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d12a      	bne.n	8001b16 <dhcpserver_get_ip+0xce>
        && saved_mac[i].addr[4] == mac->addr[4] && saved_mac[i].addr[5] == mac->addr[5]) {
 8001ac0:	491b      	ldr	r1, [pc, #108]	; (8001b30 <dhcpserver_get_ip+0xe8>)
 8001ac2:	68fa      	ldr	r2, [r7, #12]
 8001ac4:	4613      	mov	r3, r2
 8001ac6:	005b      	lsls	r3, r3, #1
 8001ac8:	4413      	add	r3, r2
 8001aca:	005b      	lsls	r3, r3, #1
 8001acc:	440b      	add	r3, r1
 8001ace:	3304      	adds	r3, #4
 8001ad0:	781a      	ldrb	r2, [r3, #0]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	791b      	ldrb	r3, [r3, #4]
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	d11d      	bne.n	8001b16 <dhcpserver_get_ip+0xce>
 8001ada:	4915      	ldr	r1, [pc, #84]	; (8001b30 <dhcpserver_get_ip+0xe8>)
 8001adc:	68fa      	ldr	r2, [r7, #12]
 8001ade:	4613      	mov	r3, r2
 8001ae0:	005b      	lsls	r3, r3, #1
 8001ae2:	4413      	add	r3, r2
 8001ae4:	005b      	lsls	r3, r3, #1
 8001ae6:	440b      	add	r3, r1
 8001ae8:	3305      	adds	r3, #5
 8001aea:	781a      	ldrb	r2, [r3, #0]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	795b      	ldrb	r3, [r3, #5]
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d110      	bne.n	8001b16 <dhcpserver_get_ip+0xce>
      /* index is used to increment IP address. */
      offer_ip.addr = ((10 + i) << 24) + ap_ip_addr0 + (ap_ip_addr1 << 8) + (ap_ip_addr2 << 16);
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	330a      	adds	r3, #10
 8001af8:	061b      	lsls	r3, r3, #24
 8001afa:	4a0e      	ldr	r2, [pc, #56]	; (8001b34 <dhcpserver_get_ip+0xec>)
 8001afc:	7812      	ldrb	r2, [r2, #0]
 8001afe:	4413      	add	r3, r2
 8001b00:	4a0d      	ldr	r2, [pc, #52]	; (8001b38 <dhcpserver_get_ip+0xf0>)
 8001b02:	7812      	ldrb	r2, [r2, #0]
 8001b04:	0212      	lsls	r2, r2, #8
 8001b06:	4413      	add	r3, r2
 8001b08:	4a0c      	ldr	r2, [pc, #48]	; (8001b3c <dhcpserver_get_ip+0xf4>)
 8001b0a:	7812      	ldrb	r2, [r2, #0]
 8001b0c:	0412      	lsls	r2, r2, #16
 8001b0e:	4413      	add	r3, r2
 8001b10:	60bb      	str	r3, [r7, #8]
      return offer_ip;
 8001b12:	68bb      	ldr	r3, [r7, #8]
 8001b14:	e006      	b.n	8001b24 <dhcpserver_get_ip+0xdc>
  for (uint32_t i = 0; i < DHCPS_MAX_CLIENT; ++i) {
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	3301      	adds	r3, #1
 8001b1a:	60fb      	str	r3, [r7, #12]
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	2b07      	cmp	r3, #7
 8001b20:	d99b      	bls.n	8001a5a <dhcpserver_get_ip+0x12>
    }
  }

  return offer_ip;
 8001b22:	68bb      	ldr	r3, [r7, #8]
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	3714      	adds	r7, #20
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr
 8001b30:	200005f8 	.word	0x200005f8
 8001b34:	2000009e 	.word	0x2000009e
 8001b38:	2000009f 	.word	0x2000009f
 8001b3c:	200000a0 	.word	0x200000a0

08001b40 <dhcpserver_clear_stored_mac>:

/***************************************************************************//**
 * Clear stored mac addresses in client list.
 ******************************************************************************/
void dhcpserver_clear_stored_mac(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
  //clear saved mac addresses
  for (uint32_t i = 0; i < DHCPS_MAX_CLIENT; ++i) {
 8001b46:	2300      	movs	r3, #0
 8001b48:	607b      	str	r3, [r7, #4]
 8001b4a:	e03d      	b.n	8001bc8 <dhcpserver_clear_stored_mac+0x88>
    saved_mac[i].addr[0] = 0;
 8001b4c:	4923      	ldr	r1, [pc, #140]	; (8001bdc <dhcpserver_clear_stored_mac+0x9c>)
 8001b4e:	687a      	ldr	r2, [r7, #4]
 8001b50:	4613      	mov	r3, r2
 8001b52:	005b      	lsls	r3, r3, #1
 8001b54:	4413      	add	r3, r2
 8001b56:	005b      	lsls	r3, r3, #1
 8001b58:	440b      	add	r3, r1
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	701a      	strb	r2, [r3, #0]
    saved_mac[i].addr[1] = 0;
 8001b5e:	491f      	ldr	r1, [pc, #124]	; (8001bdc <dhcpserver_clear_stored_mac+0x9c>)
 8001b60:	687a      	ldr	r2, [r7, #4]
 8001b62:	4613      	mov	r3, r2
 8001b64:	005b      	lsls	r3, r3, #1
 8001b66:	4413      	add	r3, r2
 8001b68:	005b      	lsls	r3, r3, #1
 8001b6a:	440b      	add	r3, r1
 8001b6c:	3301      	adds	r3, #1
 8001b6e:	2200      	movs	r2, #0
 8001b70:	701a      	strb	r2, [r3, #0]
    saved_mac[i].addr[2] = 0;
 8001b72:	491a      	ldr	r1, [pc, #104]	; (8001bdc <dhcpserver_clear_stored_mac+0x9c>)
 8001b74:	687a      	ldr	r2, [r7, #4]
 8001b76:	4613      	mov	r3, r2
 8001b78:	005b      	lsls	r3, r3, #1
 8001b7a:	4413      	add	r3, r2
 8001b7c:	005b      	lsls	r3, r3, #1
 8001b7e:	440b      	add	r3, r1
 8001b80:	3302      	adds	r3, #2
 8001b82:	2200      	movs	r2, #0
 8001b84:	701a      	strb	r2, [r3, #0]
    saved_mac[i].addr[3] = 0;
 8001b86:	4915      	ldr	r1, [pc, #84]	; (8001bdc <dhcpserver_clear_stored_mac+0x9c>)
 8001b88:	687a      	ldr	r2, [r7, #4]
 8001b8a:	4613      	mov	r3, r2
 8001b8c:	005b      	lsls	r3, r3, #1
 8001b8e:	4413      	add	r3, r2
 8001b90:	005b      	lsls	r3, r3, #1
 8001b92:	440b      	add	r3, r1
 8001b94:	3303      	adds	r3, #3
 8001b96:	2200      	movs	r2, #0
 8001b98:	701a      	strb	r2, [r3, #0]
    saved_mac[i].addr[4] = 0;
 8001b9a:	4910      	ldr	r1, [pc, #64]	; (8001bdc <dhcpserver_clear_stored_mac+0x9c>)
 8001b9c:	687a      	ldr	r2, [r7, #4]
 8001b9e:	4613      	mov	r3, r2
 8001ba0:	005b      	lsls	r3, r3, #1
 8001ba2:	4413      	add	r3, r2
 8001ba4:	005b      	lsls	r3, r3, #1
 8001ba6:	440b      	add	r3, r1
 8001ba8:	3304      	adds	r3, #4
 8001baa:	2200      	movs	r2, #0
 8001bac:	701a      	strb	r2, [r3, #0]
    saved_mac[i].addr[5] = 0;
 8001bae:	490b      	ldr	r1, [pc, #44]	; (8001bdc <dhcpserver_clear_stored_mac+0x9c>)
 8001bb0:	687a      	ldr	r2, [r7, #4]
 8001bb2:	4613      	mov	r3, r2
 8001bb4:	005b      	lsls	r3, r3, #1
 8001bb6:	4413      	add	r3, r2
 8001bb8:	005b      	lsls	r3, r3, #1
 8001bba:	440b      	add	r3, r1
 8001bbc:	3305      	adds	r3, #5
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	701a      	strb	r2, [r3, #0]
  for (uint32_t i = 0; i < DHCPS_MAX_CLIENT; ++i) {
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	3301      	adds	r3, #1
 8001bc6:	607b      	str	r3, [r7, #4]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2b07      	cmp	r3, #7
 8001bcc:	d9be      	bls.n	8001b4c <dhcpserver_clear_stored_mac+0xc>
  }
}
 8001bce:	bf00      	nop
 8001bd0:	bf00      	nop
 8001bd2:	370c      	adds	r7, #12
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr
 8001bdc:	200005f8 	.word	0x200005f8

08001be0 <dhcpserver_find_requested_ip>:
 * @param pbuf_in The pbuf containing the a DHCP packet.
 * @param ipaddr IP address result.
 * @returns 1 if found, 0 if not found.
 ******************************************************************************/
static uint16_t dhcpserver_find_requested_ip(struct pbuf * pbuf_in, uint8_t * ipaddr)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b086      	sub	sp, #24
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	6039      	str	r1, [r7, #0]
  uint32_t index = UDP_DHCP_OPTIONS_OFS;
 8001bea:	23f0      	movs	r3, #240	; 0xf0
 8001bec:	617b      	str	r3, [r7, #20]
  uint8_t optionID = DHCP_OPTION_REQUESTED_IP;
 8001bee:	2332      	movs	r3, #50	; 0x32
 8001bf0:	743b      	strb	r3, [r7, #16]
  uint16_t found = 0;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	827b      	strh	r3, [r7, #18]
  uint8_t val = 0;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	747b      	strb	r3, [r7, #17]
  uint8_t size;

  while ((val != 0xff) && (index < pbuf_in->tot_len)) {
 8001bfa:	e036      	b.n	8001c6a <dhcpserver_find_requested_ip+0x8a>
    val = pbuf_get_at(pbuf_in, index);
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	b29b      	uxth	r3, r3
 8001c00:	4619      	mov	r1, r3
 8001c02:	6878      	ldr	r0, [r7, #4]
 8001c04:	f00d fd0a 	bl	800f61c <pbuf_get_at>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	747b      	strb	r3, [r7, #17]
    if (val == optionID) {
 8001c0c:	7c7a      	ldrb	r2, [r7, #17]
 8001c0e:	7c3b      	ldrb	r3, [r7, #16]
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d11b      	bne.n	8001c4c <dhcpserver_find_requested_ip+0x6c>
      index++;
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	3301      	adds	r3, #1
 8001c18:	617b      	str	r3, [r7, #20]
      size = pbuf_get_at(pbuf_in, index);
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	b29b      	uxth	r3, r3
 8001c1e:	4619      	mov	r1, r3
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	f00d fcfb 	bl	800f61c <pbuf_get_at>
 8001c26:	4603      	mov	r3, r0
 8001c28:	73fb      	strb	r3, [r7, #15]
      index++;
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	617b      	str	r3, [r7, #20]
      pbuf_copy_partial(pbuf_in, ipaddr, size, index);
 8001c30:	7bfb      	ldrb	r3, [r7, #15]
 8001c32:	b29a      	uxth	r2, r3
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	b29b      	uxth	r3, r3
 8001c38:	6839      	ldr	r1, [r7, #0]
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f00d fb12 	bl	800f264 <pbuf_copy_partial>
      index += size;
 8001c40:	7bfb      	ldrb	r3, [r7, #15]
 8001c42:	697a      	ldr	r2, [r7, #20]
 8001c44:	4413      	add	r3, r2
 8001c46:	617b      	str	r3, [r7, #20]
      found = 1;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	827b      	strh	r3, [r7, #18]
    }
    index++;
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	3301      	adds	r3, #1
 8001c50:	617b      	str	r3, [r7, #20]
    index += ((pbuf_get_at(pbuf_in, index)) + 1);
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	b29b      	uxth	r3, r3
 8001c56:	4619      	mov	r1, r3
 8001c58:	6878      	ldr	r0, [r7, #4]
 8001c5a:	f00d fcdf 	bl	800f61c <pbuf_get_at>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	3301      	adds	r3, #1
 8001c62:	461a      	mov	r2, r3
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	4413      	add	r3, r2
 8001c68:	617b      	str	r3, [r7, #20]
  while ((val != 0xff) && (index < pbuf_in->tot_len)) {
 8001c6a:	7c7b      	ldrb	r3, [r7, #17]
 8001c6c:	2bff      	cmp	r3, #255	; 0xff
 8001c6e:	d005      	beq.n	8001c7c <dhcpserver_find_requested_ip+0x9c>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	891b      	ldrh	r3, [r3, #8]
 8001c74:	461a      	mov	r2, r3
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d3bf      	bcc.n	8001bfc <dhcpserver_find_requested_ip+0x1c>
  }

  return found;
 8001c7c:	8a7b      	ldrh	r3, [r7, #18]
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3718      	adds	r7, #24
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
	...

08001c88 <dhcpserver_fn>:
/***************************************************************************//**
 * DHCP server main function.
 ******************************************************************************/
static void dhcpserver_fn(void *arg, struct udp_pcb *dhcp_pcb_recv,
		struct pbuf *pbuf_in, const ip_addr_t *client_addr, uint16_t port)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b08c      	sub	sp, #48	; 0x30
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	60f8      	str	r0, [r7, #12]
 8001c90:	60b9      	str	r1, [r7, #8]
 8001c92:	607a      	str	r2, [r7, #4]
 8001c94:	603b      	str	r3, [r7, #0]
  struct pbuf * pbuf_out = 0;
 8001c96:	2300      	movs	r3, #0
 8001c98:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t i;
  uint8_t flags = 0;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  struct eth_addr ethaddr;

  uint32_t options_offset = 0;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t client_requested_addr = 0;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	61bb      	str	r3, [r7, #24]
  uint8_t val = 0;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  ip_addr_t client_ip_addr;
  ip_addr_t r;

  if ((NULL == pbuf_in) || ((pbuf_in->tot_len) <= UDP_DHCP_OPTIONS_OFS)) {
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	f000 85b8 	beq.w	8002826 <dhcpserver_fn+0xb9e>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	891b      	ldrh	r3, [r3, #8]
 8001cba:	2bf0      	cmp	r3, #240	; 0xf0
 8001cbc:	f240 85b3 	bls.w	8002826 <dhcpserver_fn+0xb9e>
    goto end_of_fcn;
  }

  pbuf_out = pbuf_alloc(PBUF_TRANSPORT, DHCP_RESPONSE_DEFAULT_SIZE, PBUF_POOL);
 8001cc0:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8001cc4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001cc8:	2036      	movs	r0, #54	; 0x36
 8001cca:	f00c fddd 	bl	800e888 <pbuf_alloc>
 8001cce:	62f8      	str	r0, [r7, #44]	; 0x2c

  if ((NULL == pbuf_out) || ((pbuf_out->tot_len) < UDP_DHCP_OPTIONS_OFS)) {
 8001cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	f000 85a9 	beq.w	800282a <dhcpserver_fn+0xba2>
 8001cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cda:	891b      	ldrh	r3, [r3, #8]
 8001cdc:	2bef      	cmp	r3, #239	; 0xef
 8001cde:	f240 85a4 	bls.w	800282a <dhcpserver_fn+0xba2>
    goto end_of_fcn;
  }
  pbuf_copy(pbuf_out, pbuf_in);
 8001ce2:	6879      	ldr	r1, [r7, #4]
 8001ce4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001ce6:	f00d f9eb 	bl	800f0c0 <pbuf_copy>

#if DHCPS_DBG
  printf("mac ");
#endif
  // Read MAC address.
  for (i = 0; i < 6; ++i) {
 8001cea:	2300      	movs	r3, #0
 8001cec:	62bb      	str	r3, [r7, #40]	; 0x28
 8001cee:	e014      	b.n	8001d1a <dhcpserver_fn+0x92>
    val = pbuf_get_at(pbuf_in, DHCP_CHADDR_OFS + i);
 8001cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cf2:	b29b      	uxth	r3, r3
 8001cf4:	331c      	adds	r3, #28
 8001cf6:	b29b      	uxth	r3, r3
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	f00d fc8e 	bl	800f61c <pbuf_get_at>
 8001d00:	4603      	mov	r3, r0
 8001d02:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    ethaddr.addr[i] = val;
 8001d06:	f107 021c 	add.w	r2, r7, #28
 8001d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d0c:	4413      	add	r3, r2
 8001d0e:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8001d12:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < 6; ++i) {
 8001d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d16:	3301      	adds	r3, #1
 8001d18:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d1c:	2b05      	cmp	r3, #5
 8001d1e:	d9e7      	bls.n	8001cf0 <dhcpserver_fn+0x68>
  }
#if DHCPS_DBG
  printf("\r\n");
#endif
  // Register MAC address and get an IP address.
  dhcpserver_save_mac(&ethaddr);
 8001d20:	f107 031c 	add.w	r3, r7, #28
 8001d24:	4618      	mov	r0, r3
 8001d26:	f7ff fded 	bl	8001904 <dhcpserver_save_mac>
  client_ip_addr = dhcpserver_get_ip(&ethaddr);
 8001d2a:	f107 031c 	add.w	r3, r7, #28
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f7ff fe8a 	bl	8001a48 <dhcpserver_get_ip>
 8001d34:	4603      	mov	r3, r0
 8001d36:	617b      	str	r3, [r7, #20]
  if (0 == client_ip_addr.addr) {
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	f000 8577 	beq.w	800282e <dhcpserver_fn+0xba6>
    goto end_of_fcn;
  }
#if DHCPS_DBG
  printf("ip %d.%d.%d.%d\r\n", client_ip_addr.addr & 0xff, (client_ip_addr.addr >> 8) & 0xff, (client_ip_addr.addr >> 16) & 0xff, (client_ip_addr.addr >> 24) & 0xff);
#endif
  etharp_add_static_entry(&client_ip_addr, &ethaddr);   //add ARP table entry
 8001d40:	f107 021c 	add.w	r2, r7, #28
 8001d44:	f107 0314 	add.w	r3, r7, #20
 8001d48:	4611      	mov	r1, r2
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f015 ff80 	bl	8017c50 <etharp_add_static_entry>
  /* request type. */
  val = pbuf_get_at(pbuf_in, UDP_DHCP_OPTIONS_OFS + 2);
 8001d50:	21f2      	movs	r1, #242	; 0xf2
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f00d fc62 	bl	800f61c <pbuf_get_at>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  switch (val) {
 8001d5e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d004      	beq.n	8001d70 <dhcpserver_fn+0xe8>
 8001d66:	2b03      	cmp	r3, #3
 8001d68:	f000 826a 	beq.w	8002240 <dhcpserver_fn+0x5b8>
      }

      break;
    // do nothing if not defined above
    default:
      break;
 8001d6c:	f000 bd62 	b.w	8002834 <dhcpserver_fn+0xbac>
      pbuf_put_at(pbuf_out, DHCP_OP_OFS, DHCP_BOOTREPLY);
 8001d70:	2202      	movs	r2, #2
 8001d72:	2100      	movs	r1, #0
 8001d74:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001d76:	f00d fc8a 	bl	800f68e <pbuf_put_at>
      pbuf_put_at(pbuf_out, DHCP_SECS_OFS, 0);
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	2108      	movs	r1, #8
 8001d7e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001d80:	f00d fc85 	bl	800f68e <pbuf_put_at>
      pbuf_put_at(pbuf_out, DHCP_FLAGS_OFS, 0x0);       //unicast
 8001d84:	2200      	movs	r2, #0
 8001d86:	210a      	movs	r1, #10
 8001d88:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001d8a:	f00d fc80 	bl	800f68e <pbuf_put_at>
      pbuf_put_at(pbuf_out, DHCP_YIADDR_OFS, client_ip_addr.addr & 0xff);
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	461a      	mov	r2, r3
 8001d94:	2110      	movs	r1, #16
 8001d96:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001d98:	f00d fc79 	bl	800f68e <pbuf_put_at>
      pbuf_put_at(pbuf_out, DHCP_YIADDR_OFS + 1, (client_ip_addr.addr >> 8) & 0xff);
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	0a1b      	lsrs	r3, r3, #8
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	461a      	mov	r2, r3
 8001da4:	2111      	movs	r1, #17
 8001da6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001da8:	f00d fc71 	bl	800f68e <pbuf_put_at>
      pbuf_put_at(pbuf_out, DHCP_YIADDR_OFS + 2, (client_ip_addr.addr >> 16) & 0xff);
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	0c1b      	lsrs	r3, r3, #16
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	461a      	mov	r2, r3
 8001db4:	2112      	movs	r1, #18
 8001db6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001db8:	f00d fc69 	bl	800f68e <pbuf_put_at>
      pbuf_put_at(pbuf_out, DHCP_YIADDR_OFS + 3, (client_ip_addr.addr >> 24) & 0xff);
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	0e1b      	lsrs	r3, r3, #24
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	461a      	mov	r2, r3
 8001dc4:	2113      	movs	r1, #19
 8001dc6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001dc8:	f00d fc61 	bl	800f68e <pbuf_put_at>
      pbuf_put_at(pbuf_out, DHCP_SIADDR_OFS, 0);
 8001dcc:	2200      	movs	r2, #0
 8001dce:	2114      	movs	r1, #20
 8001dd0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001dd2:	f00d fc5c 	bl	800f68e <pbuf_put_at>
      pbuf_put_at(pbuf_out, DHCP_SIADDR_OFS + 1, 0);
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	2115      	movs	r1, #21
 8001dda:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001ddc:	f00d fc57 	bl	800f68e <pbuf_put_at>
      pbuf_put_at(pbuf_out, DHCP_SIADDR_OFS + 2, 0);
 8001de0:	2200      	movs	r2, #0
 8001de2:	2116      	movs	r1, #22
 8001de4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001de6:	f00d fc52 	bl	800f68e <pbuf_put_at>
      pbuf_put_at(pbuf_out, DHCP_SIADDR_OFS + 3, 0);
 8001dea:	2200      	movs	r2, #0
 8001dec:	2117      	movs	r1, #23
 8001dee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001df0:	f00d fc4d 	bl	800f68e <pbuf_put_at>
      pbuf_put_at(pbuf_out, DHCP_COOKIE_OFS, (DHCP_MAGIC_COOKIE >> 24) & 0xff);
 8001df4:	2263      	movs	r2, #99	; 0x63
 8001df6:	21ec      	movs	r1, #236	; 0xec
 8001df8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001dfa:	f00d fc48 	bl	800f68e <pbuf_put_at>
      pbuf_put_at(pbuf_out, DHCP_COOKIE_OFS + 1, (DHCP_MAGIC_COOKIE >> 16) & 0xff);
 8001dfe:	2282      	movs	r2, #130	; 0x82
 8001e00:	21ed      	movs	r1, #237	; 0xed
 8001e02:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001e04:	f00d fc43 	bl	800f68e <pbuf_put_at>
      pbuf_put_at(pbuf_out, DHCP_COOKIE_OFS + 2, (DHCP_MAGIC_COOKIE >> 8) & 0xff);
 8001e08:	2253      	movs	r2, #83	; 0x53
 8001e0a:	21ee      	movs	r1, #238	; 0xee
 8001e0c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001e0e:	f00d fc3e 	bl	800f68e <pbuf_put_at>
      pbuf_put_at(pbuf_out, DHCP_COOKIE_OFS + 3, (DHCP_MAGIC_COOKIE) & 0xff);
 8001e12:	2263      	movs	r2, #99	; 0x63
 8001e14:	21ef      	movs	r1, #239	; 0xef
 8001e16:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001e18:	f00d fc39 	bl	800f68e <pbuf_put_at>
      options_offset = UDP_DHCP_OPTIONS_OFS;
 8001e1c:	23f0      	movs	r3, #240	; 0xf0
 8001e1e:	627b      	str	r3, [r7, #36]	; 0x24
      pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_MESSAGE_TYPE);
 8001e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e22:	b29b      	uxth	r3, r3
 8001e24:	2235      	movs	r2, #53	; 0x35
 8001e26:	4619      	mov	r1, r3
 8001e28:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001e2a:	f00d fc30 	bl	800f68e <pbuf_put_at>
      options_offset++;
 8001e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e30:	3301      	adds	r3, #1
 8001e32:	627b      	str	r3, [r7, #36]	; 0x24
      pbuf_put_at(pbuf_out, options_offset, 1);
 8001e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e36:	b29b      	uxth	r3, r3
 8001e38:	2201      	movs	r2, #1
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001e3e:	f00d fc26 	bl	800f68e <pbuf_put_at>
      options_offset++;
 8001e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e44:	3301      	adds	r3, #1
 8001e46:	627b      	str	r3, [r7, #36]	; 0x24
      pbuf_put_at(pbuf_out, options_offset, DHCP_OFFER);
 8001e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e4a:	b29b      	uxth	r3, r3
 8001e4c:	2202      	movs	r2, #2
 8001e4e:	4619      	mov	r1, r3
 8001e50:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001e52:	f00d fc1c 	bl	800f68e <pbuf_put_at>
      options_offset++;
 8001e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e58:	3301      	adds	r3, #1
 8001e5a:	627b      	str	r3, [r7, #36]	; 0x24
      pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_SUBNET_MASK);
 8001e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e5e:	b29b      	uxth	r3, r3
 8001e60:	2201      	movs	r2, #1
 8001e62:	4619      	mov	r1, r3
 8001e64:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001e66:	f00d fc12 	bl	800f68e <pbuf_put_at>
      options_offset++;
 8001e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e6c:	3301      	adds	r3, #1
 8001e6e:	627b      	str	r3, [r7, #36]	; 0x24
      pbuf_put_at(pbuf_out, options_offset, 4);
 8001e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e72:	b29b      	uxth	r3, r3
 8001e74:	2204      	movs	r2, #4
 8001e76:	4619      	mov	r1, r3
 8001e78:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001e7a:	f00d fc08 	bl	800f68e <pbuf_put_at>
      options_offset++;
 8001e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e80:	3301      	adds	r3, #1
 8001e82:	627b      	str	r3, [r7, #36]	; 0x24
      IP4_ADDR(&r, ap_netmask_addr0, ap_netmask_addr1, ap_netmask_addr2, ap_netmask_addr3);
 8001e84:	4ba8      	ldr	r3, [pc, #672]	; (8002128 <dhcpserver_fn+0x4a0>)
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	061a      	lsls	r2, r3, #24
 8001e8a:	4ba8      	ldr	r3, [pc, #672]	; (800212c <dhcpserver_fn+0x4a4>)
 8001e8c:	781b      	ldrb	r3, [r3, #0]
 8001e8e:	041b      	lsls	r3, r3, #16
 8001e90:	431a      	orrs	r2, r3
 8001e92:	4ba7      	ldr	r3, [pc, #668]	; (8002130 <dhcpserver_fn+0x4a8>)
 8001e94:	781b      	ldrb	r3, [r3, #0]
 8001e96:	021b      	lsls	r3, r3, #8
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	4aa6      	ldr	r2, [pc, #664]	; (8002134 <dhcpserver_fn+0x4ac>)
 8001e9c:	7812      	ldrb	r2, [r2, #0]
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	061a      	lsls	r2, r3, #24
 8001ea2:	4ba1      	ldr	r3, [pc, #644]	; (8002128 <dhcpserver_fn+0x4a0>)
 8001ea4:	781b      	ldrb	r3, [r3, #0]
 8001ea6:	0619      	lsls	r1, r3, #24
 8001ea8:	4ba0      	ldr	r3, [pc, #640]	; (800212c <dhcpserver_fn+0x4a4>)
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	041b      	lsls	r3, r3, #16
 8001eae:	4319      	orrs	r1, r3
 8001eb0:	4b9f      	ldr	r3, [pc, #636]	; (8002130 <dhcpserver_fn+0x4a8>)
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	021b      	lsls	r3, r3, #8
 8001eb6:	430b      	orrs	r3, r1
 8001eb8:	499e      	ldr	r1, [pc, #632]	; (8002134 <dhcpserver_fn+0x4ac>)
 8001eba:	7809      	ldrb	r1, [r1, #0]
 8001ebc:	430b      	orrs	r3, r1
 8001ebe:	021b      	lsls	r3, r3, #8
 8001ec0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001ec4:	431a      	orrs	r2, r3
 8001ec6:	4b98      	ldr	r3, [pc, #608]	; (8002128 <dhcpserver_fn+0x4a0>)
 8001ec8:	781b      	ldrb	r3, [r3, #0]
 8001eca:	0619      	lsls	r1, r3, #24
 8001ecc:	4b97      	ldr	r3, [pc, #604]	; (800212c <dhcpserver_fn+0x4a4>)
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	041b      	lsls	r3, r3, #16
 8001ed2:	4319      	orrs	r1, r3
 8001ed4:	4b96      	ldr	r3, [pc, #600]	; (8002130 <dhcpserver_fn+0x4a8>)
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	021b      	lsls	r3, r3, #8
 8001eda:	430b      	orrs	r3, r1
 8001edc:	4995      	ldr	r1, [pc, #596]	; (8002134 <dhcpserver_fn+0x4ac>)
 8001ede:	7809      	ldrb	r1, [r1, #0]
 8001ee0:	430b      	orrs	r3, r1
 8001ee2:	0a1b      	lsrs	r3, r3, #8
 8001ee4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8001ee8:	431a      	orrs	r2, r3
 8001eea:	4b8f      	ldr	r3, [pc, #572]	; (8002128 <dhcpserver_fn+0x4a0>)
 8001eec:	781b      	ldrb	r3, [r3, #0]
 8001eee:	0619      	lsls	r1, r3, #24
 8001ef0:	4b8e      	ldr	r3, [pc, #568]	; (800212c <dhcpserver_fn+0x4a4>)
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	041b      	lsls	r3, r3, #16
 8001ef6:	4319      	orrs	r1, r3
 8001ef8:	4b8d      	ldr	r3, [pc, #564]	; (8002130 <dhcpserver_fn+0x4a8>)
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	021b      	lsls	r3, r3, #8
 8001efe:	430b      	orrs	r3, r1
 8001f00:	498c      	ldr	r1, [pc, #560]	; (8002134 <dhcpserver_fn+0x4ac>)
 8001f02:	7809      	ldrb	r1, [r1, #0]
 8001f04:	430b      	orrs	r3, r1
 8001f06:	0e1b      	lsrs	r3, r3, #24
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	613b      	str	r3, [r7, #16]
      pbuf_put_at(pbuf_out, options_offset, r.addr & 0xff);
 8001f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0e:	b29b      	uxth	r3, r3
 8001f10:	693a      	ldr	r2, [r7, #16]
 8001f12:	b2d2      	uxtb	r2, r2
 8001f14:	4619      	mov	r1, r3
 8001f16:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001f18:	f00d fbb9 	bl	800f68e <pbuf_put_at>
      pbuf_put_at(pbuf_out, options_offset + 1, (r.addr >> 8) & 0xff);
 8001f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1e:	b29b      	uxth	r3, r3
 8001f20:	3301      	adds	r3, #1
 8001f22:	b299      	uxth	r1, r3
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	0a1b      	lsrs	r3, r3, #8
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001f2e:	f00d fbae 	bl	800f68e <pbuf_put_at>
      pbuf_put_at(pbuf_out, options_offset + 2, (r.addr >> 16) & 0xff);
 8001f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f34:	b29b      	uxth	r3, r3
 8001f36:	3302      	adds	r3, #2
 8001f38:	b299      	uxth	r1, r3
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	0c1b      	lsrs	r3, r3, #16
 8001f3e:	b2db      	uxtb	r3, r3
 8001f40:	461a      	mov	r2, r3
 8001f42:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001f44:	f00d fba3 	bl	800f68e <pbuf_put_at>
      pbuf_put_at(pbuf_out, options_offset + 3, (r.addr >> 24) & 0xff);
 8001f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f4a:	b29b      	uxth	r3, r3
 8001f4c:	3303      	adds	r3, #3
 8001f4e:	b299      	uxth	r1, r3
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	0e1b      	lsrs	r3, r3, #24
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	461a      	mov	r2, r3
 8001f58:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001f5a:	f00d fb98 	bl	800f68e <pbuf_put_at>
      options_offset += 4;
 8001f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f60:	3304      	adds	r3, #4
 8001f62:	627b      	str	r3, [r7, #36]	; 0x24
      pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_ROUTER);
 8001f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f66:	b29b      	uxth	r3, r3
 8001f68:	2203      	movs	r2, #3
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001f6e:	f00d fb8e 	bl	800f68e <pbuf_put_at>
      options_offset++;
 8001f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f74:	3301      	adds	r3, #1
 8001f76:	627b      	str	r3, [r7, #36]	; 0x24
      pbuf_put_at(pbuf_out, options_offset, 4);
 8001f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7a:	b29b      	uxth	r3, r3
 8001f7c:	2204      	movs	r2, #4
 8001f7e:	4619      	mov	r1, r3
 8001f80:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001f82:	f00d fb84 	bl	800f68e <pbuf_put_at>
      options_offset++;
 8001f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f88:	3301      	adds	r3, #1
 8001f8a:	627b      	str	r3, [r7, #36]	; 0x24
      IP4_ADDR(&r, ap_ip_addr0, ap_ip_addr1, ap_ip_addr2, ap_ip_addr3);
 8001f8c:	4b6a      	ldr	r3, [pc, #424]	; (8002138 <dhcpserver_fn+0x4b0>)
 8001f8e:	781b      	ldrb	r3, [r3, #0]
 8001f90:	061a      	lsls	r2, r3, #24
 8001f92:	4b6a      	ldr	r3, [pc, #424]	; (800213c <dhcpserver_fn+0x4b4>)
 8001f94:	781b      	ldrb	r3, [r3, #0]
 8001f96:	041b      	lsls	r3, r3, #16
 8001f98:	431a      	orrs	r2, r3
 8001f9a:	4b69      	ldr	r3, [pc, #420]	; (8002140 <dhcpserver_fn+0x4b8>)
 8001f9c:	781b      	ldrb	r3, [r3, #0]
 8001f9e:	021b      	lsls	r3, r3, #8
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	4a68      	ldr	r2, [pc, #416]	; (8002144 <dhcpserver_fn+0x4bc>)
 8001fa4:	7812      	ldrb	r2, [r2, #0]
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	061a      	lsls	r2, r3, #24
 8001faa:	4b63      	ldr	r3, [pc, #396]	; (8002138 <dhcpserver_fn+0x4b0>)
 8001fac:	781b      	ldrb	r3, [r3, #0]
 8001fae:	0619      	lsls	r1, r3, #24
 8001fb0:	4b62      	ldr	r3, [pc, #392]	; (800213c <dhcpserver_fn+0x4b4>)
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	041b      	lsls	r3, r3, #16
 8001fb6:	4319      	orrs	r1, r3
 8001fb8:	4b61      	ldr	r3, [pc, #388]	; (8002140 <dhcpserver_fn+0x4b8>)
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	021b      	lsls	r3, r3, #8
 8001fbe:	430b      	orrs	r3, r1
 8001fc0:	4960      	ldr	r1, [pc, #384]	; (8002144 <dhcpserver_fn+0x4bc>)
 8001fc2:	7809      	ldrb	r1, [r1, #0]
 8001fc4:	430b      	orrs	r3, r1
 8001fc6:	021b      	lsls	r3, r3, #8
 8001fc8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001fcc:	431a      	orrs	r2, r3
 8001fce:	4b5a      	ldr	r3, [pc, #360]	; (8002138 <dhcpserver_fn+0x4b0>)
 8001fd0:	781b      	ldrb	r3, [r3, #0]
 8001fd2:	0619      	lsls	r1, r3, #24
 8001fd4:	4b59      	ldr	r3, [pc, #356]	; (800213c <dhcpserver_fn+0x4b4>)
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	041b      	lsls	r3, r3, #16
 8001fda:	4319      	orrs	r1, r3
 8001fdc:	4b58      	ldr	r3, [pc, #352]	; (8002140 <dhcpserver_fn+0x4b8>)
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	021b      	lsls	r3, r3, #8
 8001fe2:	430b      	orrs	r3, r1
 8001fe4:	4957      	ldr	r1, [pc, #348]	; (8002144 <dhcpserver_fn+0x4bc>)
 8001fe6:	7809      	ldrb	r1, [r1, #0]
 8001fe8:	430b      	orrs	r3, r1
 8001fea:	0a1b      	lsrs	r3, r3, #8
 8001fec:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8001ff0:	431a      	orrs	r2, r3
 8001ff2:	4b51      	ldr	r3, [pc, #324]	; (8002138 <dhcpserver_fn+0x4b0>)
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	0619      	lsls	r1, r3, #24
 8001ff8:	4b50      	ldr	r3, [pc, #320]	; (800213c <dhcpserver_fn+0x4b4>)
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	041b      	lsls	r3, r3, #16
 8001ffe:	4319      	orrs	r1, r3
 8002000:	4b4f      	ldr	r3, [pc, #316]	; (8002140 <dhcpserver_fn+0x4b8>)
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	021b      	lsls	r3, r3, #8
 8002006:	430b      	orrs	r3, r1
 8002008:	494e      	ldr	r1, [pc, #312]	; (8002144 <dhcpserver_fn+0x4bc>)
 800200a:	7809      	ldrb	r1, [r1, #0]
 800200c:	430b      	orrs	r3, r1
 800200e:	0e1b      	lsrs	r3, r3, #24
 8002010:	4313      	orrs	r3, r2
 8002012:	613b      	str	r3, [r7, #16]
      pbuf_put_at(pbuf_out, options_offset, r.addr & 0xff);
 8002014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002016:	b29b      	uxth	r3, r3
 8002018:	693a      	ldr	r2, [r7, #16]
 800201a:	b2d2      	uxtb	r2, r2
 800201c:	4619      	mov	r1, r3
 800201e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002020:	f00d fb35 	bl	800f68e <pbuf_put_at>
      pbuf_put_at(pbuf_out, options_offset + 1, (r.addr >> 8) & 0xff);
 8002024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002026:	b29b      	uxth	r3, r3
 8002028:	3301      	adds	r3, #1
 800202a:	b299      	uxth	r1, r3
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	0a1b      	lsrs	r3, r3, #8
 8002030:	b2db      	uxtb	r3, r3
 8002032:	461a      	mov	r2, r3
 8002034:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002036:	f00d fb2a 	bl	800f68e <pbuf_put_at>
      pbuf_put_at(pbuf_out, options_offset + 2, (r.addr >> 16) & 0xff);
 800203a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203c:	b29b      	uxth	r3, r3
 800203e:	3302      	adds	r3, #2
 8002040:	b299      	uxth	r1, r3
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	0c1b      	lsrs	r3, r3, #16
 8002046:	b2db      	uxtb	r3, r3
 8002048:	461a      	mov	r2, r3
 800204a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800204c:	f00d fb1f 	bl	800f68e <pbuf_put_at>
      pbuf_put_at(pbuf_out, options_offset + 3, (r.addr >> 24) & 0xff);
 8002050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002052:	b29b      	uxth	r3, r3
 8002054:	3303      	adds	r3, #3
 8002056:	b299      	uxth	r1, r3
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	0e1b      	lsrs	r3, r3, #24
 800205c:	b2db      	uxtb	r3, r3
 800205e:	461a      	mov	r2, r3
 8002060:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002062:	f00d fb14 	bl	800f68e <pbuf_put_at>
      options_offset += 4;
 8002066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002068:	3304      	adds	r3, #4
 800206a:	627b      	str	r3, [r7, #36]	; 0x24
      pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_LEASE_TIME);
 800206c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206e:	b29b      	uxth	r3, r3
 8002070:	2233      	movs	r2, #51	; 0x33
 8002072:	4619      	mov	r1, r3
 8002074:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002076:	f00d fb0a 	bl	800f68e <pbuf_put_at>
      options_offset++;
 800207a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207c:	3301      	adds	r3, #1
 800207e:	627b      	str	r3, [r7, #36]	; 0x24
      pbuf_put_at(pbuf_out, options_offset, 4);
 8002080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002082:	b29b      	uxth	r3, r3
 8002084:	2204      	movs	r2, #4
 8002086:	4619      	mov	r1, r3
 8002088:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800208a:	f00d fb00 	bl	800f68e <pbuf_put_at>
      options_offset++;
 800208e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002090:	3301      	adds	r3, #1
 8002092:	627b      	str	r3, [r7, #36]	; 0x24
      pbuf_put_at(pbuf_out, options_offset, (LEASE_TIME_1DAY >> 24) & 0xff);
 8002094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002096:	b29b      	uxth	r3, r3
 8002098:	2200      	movs	r2, #0
 800209a:	4619      	mov	r1, r3
 800209c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800209e:	f00d faf6 	bl	800f68e <pbuf_put_at>
      pbuf_put_at(pbuf_out, options_offset + 1, (LEASE_TIME_1DAY >> 16) & 0xff);
 80020a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a4:	b29b      	uxth	r3, r3
 80020a6:	3301      	adds	r3, #1
 80020a8:	b29b      	uxth	r3, r3
 80020aa:	2201      	movs	r2, #1
 80020ac:	4619      	mov	r1, r3
 80020ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80020b0:	f00d faed 	bl	800f68e <pbuf_put_at>
      pbuf_put_at(pbuf_out, options_offset + 2, (LEASE_TIME_1DAY >> 8) & 0xff);
 80020b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b6:	b29b      	uxth	r3, r3
 80020b8:	3302      	adds	r3, #2
 80020ba:	b29b      	uxth	r3, r3
 80020bc:	2251      	movs	r2, #81	; 0x51
 80020be:	4619      	mov	r1, r3
 80020c0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80020c2:	f00d fae4 	bl	800f68e <pbuf_put_at>
      pbuf_put_at(pbuf_out, options_offset + 3, (LEASE_TIME_1DAY) & 0xff);
 80020c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c8:	b29b      	uxth	r3, r3
 80020ca:	3303      	adds	r3, #3
 80020cc:	b29b      	uxth	r3, r3
 80020ce:	2280      	movs	r2, #128	; 0x80
 80020d0:	4619      	mov	r1, r3
 80020d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80020d4:	f00d fadb 	bl	800f68e <pbuf_put_at>
      options_offset += 4;
 80020d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020da:	3304      	adds	r3, #4
 80020dc:	627b      	str	r3, [r7, #36]	; 0x24
      pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_SERVER_ID);
 80020de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e0:	b29b      	uxth	r3, r3
 80020e2:	2236      	movs	r2, #54	; 0x36
 80020e4:	4619      	mov	r1, r3
 80020e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80020e8:	f00d fad1 	bl	800f68e <pbuf_put_at>
      options_offset++;
 80020ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ee:	3301      	adds	r3, #1
 80020f0:	627b      	str	r3, [r7, #36]	; 0x24
      pbuf_put_at(pbuf_out, options_offset, 4);
 80020f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f4:	b29b      	uxth	r3, r3
 80020f6:	2204      	movs	r2, #4
 80020f8:	4619      	mov	r1, r3
 80020fa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80020fc:	f00d fac7 	bl	800f68e <pbuf_put_at>
      options_offset++;
 8002100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002102:	3301      	adds	r3, #1
 8002104:	627b      	str	r3, [r7, #36]	; 0x24
      IP4_ADDR(&r, ap_ip_addr0, ap_ip_addr1, ap_ip_addr2, ap_ip_addr3);
 8002106:	4b0c      	ldr	r3, [pc, #48]	; (8002138 <dhcpserver_fn+0x4b0>)
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	061a      	lsls	r2, r3, #24
 800210c:	4b0b      	ldr	r3, [pc, #44]	; (800213c <dhcpserver_fn+0x4b4>)
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	041b      	lsls	r3, r3, #16
 8002112:	431a      	orrs	r2, r3
 8002114:	4b0a      	ldr	r3, [pc, #40]	; (8002140 <dhcpserver_fn+0x4b8>)
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	021b      	lsls	r3, r3, #8
 800211a:	4313      	orrs	r3, r2
 800211c:	4a09      	ldr	r2, [pc, #36]	; (8002144 <dhcpserver_fn+0x4bc>)
 800211e:	7812      	ldrb	r2, [r2, #0]
 8002120:	4313      	orrs	r3, r2
 8002122:	061a      	lsls	r2, r3, #24
 8002124:	e010      	b.n	8002148 <dhcpserver_fn+0x4c0>
 8002126:	bf00      	nop
 8002128:	200000a2 	.word	0x200000a2
 800212c:	200000a3 	.word	0x200000a3
 8002130:	200000a4 	.word	0x200000a4
 8002134:	200008f4 	.word	0x200008f4
 8002138:	2000009e 	.word	0x2000009e
 800213c:	2000009f 	.word	0x2000009f
 8002140:	200000a0 	.word	0x200000a0
 8002144:	200000a1 	.word	0x200000a1
 8002148:	4b54      	ldr	r3, [pc, #336]	; (800229c <dhcpserver_fn+0x614>)
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	0619      	lsls	r1, r3, #24
 800214e:	4b54      	ldr	r3, [pc, #336]	; (80022a0 <dhcpserver_fn+0x618>)
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	041b      	lsls	r3, r3, #16
 8002154:	4319      	orrs	r1, r3
 8002156:	4b53      	ldr	r3, [pc, #332]	; (80022a4 <dhcpserver_fn+0x61c>)
 8002158:	781b      	ldrb	r3, [r3, #0]
 800215a:	021b      	lsls	r3, r3, #8
 800215c:	430b      	orrs	r3, r1
 800215e:	4952      	ldr	r1, [pc, #328]	; (80022a8 <dhcpserver_fn+0x620>)
 8002160:	7809      	ldrb	r1, [r1, #0]
 8002162:	430b      	orrs	r3, r1
 8002164:	021b      	lsls	r3, r3, #8
 8002166:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800216a:	431a      	orrs	r2, r3
 800216c:	4b4b      	ldr	r3, [pc, #300]	; (800229c <dhcpserver_fn+0x614>)
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	0619      	lsls	r1, r3, #24
 8002172:	4b4b      	ldr	r3, [pc, #300]	; (80022a0 <dhcpserver_fn+0x618>)
 8002174:	781b      	ldrb	r3, [r3, #0]
 8002176:	041b      	lsls	r3, r3, #16
 8002178:	4319      	orrs	r1, r3
 800217a:	4b4a      	ldr	r3, [pc, #296]	; (80022a4 <dhcpserver_fn+0x61c>)
 800217c:	781b      	ldrb	r3, [r3, #0]
 800217e:	021b      	lsls	r3, r3, #8
 8002180:	430b      	orrs	r3, r1
 8002182:	4949      	ldr	r1, [pc, #292]	; (80022a8 <dhcpserver_fn+0x620>)
 8002184:	7809      	ldrb	r1, [r1, #0]
 8002186:	430b      	orrs	r3, r1
 8002188:	0a1b      	lsrs	r3, r3, #8
 800218a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800218e:	431a      	orrs	r2, r3
 8002190:	4b42      	ldr	r3, [pc, #264]	; (800229c <dhcpserver_fn+0x614>)
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	0619      	lsls	r1, r3, #24
 8002196:	4b42      	ldr	r3, [pc, #264]	; (80022a0 <dhcpserver_fn+0x618>)
 8002198:	781b      	ldrb	r3, [r3, #0]
 800219a:	041b      	lsls	r3, r3, #16
 800219c:	4319      	orrs	r1, r3
 800219e:	4b41      	ldr	r3, [pc, #260]	; (80022a4 <dhcpserver_fn+0x61c>)
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	021b      	lsls	r3, r3, #8
 80021a4:	430b      	orrs	r3, r1
 80021a6:	4940      	ldr	r1, [pc, #256]	; (80022a8 <dhcpserver_fn+0x620>)
 80021a8:	7809      	ldrb	r1, [r1, #0]
 80021aa:	430b      	orrs	r3, r1
 80021ac:	0e1b      	lsrs	r3, r3, #24
 80021ae:	4313      	orrs	r3, r2
 80021b0:	613b      	str	r3, [r7, #16]
      pbuf_put_at(pbuf_out, options_offset, r.addr & 0xff);
 80021b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b4:	b29b      	uxth	r3, r3
 80021b6:	693a      	ldr	r2, [r7, #16]
 80021b8:	b2d2      	uxtb	r2, r2
 80021ba:	4619      	mov	r1, r3
 80021bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80021be:	f00d fa66 	bl	800f68e <pbuf_put_at>
      pbuf_put_at(pbuf_out, options_offset + 1, (r.addr >> 8) & 0xff);
 80021c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c4:	b29b      	uxth	r3, r3
 80021c6:	3301      	adds	r3, #1
 80021c8:	b299      	uxth	r1, r3
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	0a1b      	lsrs	r3, r3, #8
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	461a      	mov	r2, r3
 80021d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80021d4:	f00d fa5b 	bl	800f68e <pbuf_put_at>
      pbuf_put_at(pbuf_out, options_offset + 2, (r.addr >> 16) & 0xff);
 80021d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021da:	b29b      	uxth	r3, r3
 80021dc:	3302      	adds	r3, #2
 80021de:	b299      	uxth	r1, r3
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	0c1b      	lsrs	r3, r3, #16
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	461a      	mov	r2, r3
 80021e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80021ea:	f00d fa50 	bl	800f68e <pbuf_put_at>
      pbuf_put_at(pbuf_out, options_offset + 3, (r.addr >> 24) & 0xff);
 80021ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f0:	b29b      	uxth	r3, r3
 80021f2:	3303      	adds	r3, #3
 80021f4:	b299      	uxth	r1, r3
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	0e1b      	lsrs	r3, r3, #24
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	461a      	mov	r2, r3
 80021fe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002200:	f00d fa45 	bl	800f68e <pbuf_put_at>
      options_offset += 4;
 8002204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002206:	3304      	adds	r3, #4
 8002208:	627b      	str	r3, [r7, #36]	; 0x24
      pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_END);
 800220a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800220c:	b29b      	uxth	r3, r3
 800220e:	22ff      	movs	r2, #255	; 0xff
 8002210:	4619      	mov	r1, r3
 8002212:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002214:	f00d fa3b 	bl	800f68e <pbuf_put_at>
      options_offset++;
 8002218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800221a:	3301      	adds	r3, #1
 800221c:	627b      	str	r3, [r7, #36]	; 0x24
      pbuf_realloc(pbuf_out, options_offset);
 800221e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002220:	b29b      	uxth	r3, r3
 8002222:	4619      	mov	r1, r3
 8002224:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002226:	f00c fc91 	bl	800eb4c <pbuf_realloc>
      if (ERR_OK != udp_sendto(dhcp_pcb, pbuf_out, &client_ip_addr, DHCP_CLIENT_PORT)) {
 800222a:	4b20      	ldr	r3, [pc, #128]	; (80022ac <dhcpserver_fn+0x624>)
 800222c:	6818      	ldr	r0, [r3, #0]
 800222e:	f107 0214 	add.w	r2, r7, #20
 8002232:	2344      	movs	r3, #68	; 0x44
 8002234:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002236:	f012 ff7d 	bl	8015134 <udp_sendto>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
      break;
 800223e:	e2f9      	b.n	8002834 <dhcpserver_fn+0xbac>
      pbuf_put_at(pbuf_out, DHCP_OP_OFS, DHCP_BOOTREPLY);
 8002240:	2202      	movs	r2, #2
 8002242:	2100      	movs	r1, #0
 8002244:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002246:	f00d fa22 	bl	800f68e <pbuf_put_at>
      pbuf_put_at(pbuf_out, DHCP_SECS_OFS, 0);
 800224a:	2200      	movs	r2, #0
 800224c:	2108      	movs	r1, #8
 800224e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002250:	f00d fa1d 	bl	800f68e <pbuf_put_at>
      flags = 0;
 8002254:	2300      	movs	r3, #0
 8002256:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      flags = pbuf_get_at(pbuf_in, DHCP_FLAGS_OFS);
 800225a:	210a      	movs	r1, #10
 800225c:	6878      	ldr	r0, [r7, #4]
 800225e:	f00d f9dd 	bl	800f61c <pbuf_get_at>
 8002262:	4603      	mov	r3, r0
 8002264:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      if (flags & 0x80) {
 8002268:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800226c:	2b00      	cmp	r3, #0
 800226e:	da1f      	bge.n	80022b0 <dhcpserver_fn+0x628>
        flags = pbuf_get_at(pbuf_out, DHCP_FLAGS_OFS);
 8002270:	210a      	movs	r1, #10
 8002272:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002274:	f00d f9d2 	bl	800f61c <pbuf_get_at>
 8002278:	4603      	mov	r3, r0
 800227a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        flags |= 0x80;
 800227e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002282:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002286:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        pbuf_put_at(pbuf_out, DHCP_FLAGS_OFS, flags);
 800228a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800228e:	461a      	mov	r2, r3
 8002290:	210a      	movs	r1, #10
 8002292:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002294:	f00d f9fb 	bl	800f68e <pbuf_put_at>
 8002298:	e01e      	b.n	80022d8 <dhcpserver_fn+0x650>
 800229a:	bf00      	nop
 800229c:	2000009e 	.word	0x2000009e
 80022a0:	2000009f 	.word	0x2000009f
 80022a4:	200000a0 	.word	0x200000a0
 80022a8:	200000a1 	.word	0x200000a1
 80022ac:	200005f4 	.word	0x200005f4
        flags = pbuf_get_at(pbuf_out, DHCP_FLAGS_OFS);
 80022b0:	210a      	movs	r1, #10
 80022b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80022b4:	f00d f9b2 	bl	800f61c <pbuf_get_at>
 80022b8:	4603      	mov	r3, r0
 80022ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        flags &= ~0x80;
 80022be:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80022c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80022c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        pbuf_put_at(pbuf_out, DHCP_FLAGS_OFS, flags);
 80022ca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80022ce:	461a      	mov	r2, r3
 80022d0:	210a      	movs	r1, #10
 80022d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80022d4:	f00d f9db 	bl	800f68e <pbuf_put_at>
      if (0 == dhcpserver_find_requested_ip(pbuf_in, (uint8_t *)&client_requested_addr)) {
 80022d8:	f107 0318 	add.w	r3, r7, #24
 80022dc:	4619      	mov	r1, r3
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f7ff fc7e 	bl	8001be0 <dhcpserver_find_requested_ip>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	f000 82a3 	beq.w	8002832 <dhcpserver_fn+0xbaa>
      if (client_requested_addr == client_ip_addr.addr) {
 80022ec:	697a      	ldr	r2, [r7, #20]
 80022ee:	69bb      	ldr	r3, [r7, #24]
 80022f0:	429a      	cmp	r2, r3
 80022f2:	f040 8249 	bne.w	8002788 <dhcpserver_fn+0xb00>
        pbuf_put_at(pbuf_out, DHCP_YIADDR_OFS, client_ip_addr.addr & 0xff);
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	461a      	mov	r2, r3
 80022fc:	2110      	movs	r1, #16
 80022fe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002300:	f00d f9c5 	bl	800f68e <pbuf_put_at>
        pbuf_put_at(pbuf_out, DHCP_YIADDR_OFS + 1, (client_ip_addr.addr >> 8) & 0xff);
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	0a1b      	lsrs	r3, r3, #8
 8002308:	b2db      	uxtb	r3, r3
 800230a:	461a      	mov	r2, r3
 800230c:	2111      	movs	r1, #17
 800230e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002310:	f00d f9bd 	bl	800f68e <pbuf_put_at>
        pbuf_put_at(pbuf_out, DHCP_YIADDR_OFS + 2, (client_ip_addr.addr >> 16) & 0xff);
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	0c1b      	lsrs	r3, r3, #16
 8002318:	b2db      	uxtb	r3, r3
 800231a:	461a      	mov	r2, r3
 800231c:	2112      	movs	r1, #18
 800231e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002320:	f00d f9b5 	bl	800f68e <pbuf_put_at>
        pbuf_put_at(pbuf_out, DHCP_YIADDR_OFS + 3, (client_ip_addr.addr >> 24) & 0xff);
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	0e1b      	lsrs	r3, r3, #24
 8002328:	b2db      	uxtb	r3, r3
 800232a:	461a      	mov	r2, r3
 800232c:	2113      	movs	r1, #19
 800232e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002330:	f00d f9ad 	bl	800f68e <pbuf_put_at>
        pbuf_put_at(pbuf_out, DHCP_SIADDR_OFS, 0);
 8002334:	2200      	movs	r2, #0
 8002336:	2114      	movs	r1, #20
 8002338:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800233a:	f00d f9a8 	bl	800f68e <pbuf_put_at>
        pbuf_put_at(pbuf_out, DHCP_SIADDR_OFS + 1, 0);
 800233e:	2200      	movs	r2, #0
 8002340:	2115      	movs	r1, #21
 8002342:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002344:	f00d f9a3 	bl	800f68e <pbuf_put_at>
        pbuf_put_at(pbuf_out, DHCP_SIADDR_OFS + 2, 0);
 8002348:	2200      	movs	r2, #0
 800234a:	2116      	movs	r1, #22
 800234c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800234e:	f00d f99e 	bl	800f68e <pbuf_put_at>
        pbuf_put_at(pbuf_out, DHCP_SIADDR_OFS + 3, 0);
 8002352:	2200      	movs	r2, #0
 8002354:	2117      	movs	r1, #23
 8002356:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002358:	f00d f999 	bl	800f68e <pbuf_put_at>
        pbuf_put_at(pbuf_out, DHCP_COOKIE_OFS, (DHCP_MAGIC_COOKIE >> 24) & 0xff);
 800235c:	2263      	movs	r2, #99	; 0x63
 800235e:	21ec      	movs	r1, #236	; 0xec
 8002360:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002362:	f00d f994 	bl	800f68e <pbuf_put_at>
        pbuf_put_at(pbuf_out, DHCP_COOKIE_OFS + 1, (DHCP_MAGIC_COOKIE >> 16) & 0xff);
 8002366:	2282      	movs	r2, #130	; 0x82
 8002368:	21ed      	movs	r1, #237	; 0xed
 800236a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800236c:	f00d f98f 	bl	800f68e <pbuf_put_at>
        pbuf_put_at(pbuf_out, DHCP_COOKIE_OFS + 2, (DHCP_MAGIC_COOKIE >> 8) & 0xff);
 8002370:	2253      	movs	r2, #83	; 0x53
 8002372:	21ee      	movs	r1, #238	; 0xee
 8002374:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002376:	f00d f98a 	bl	800f68e <pbuf_put_at>
        pbuf_put_at(pbuf_out, DHCP_COOKIE_OFS + 3, (DHCP_MAGIC_COOKIE) & 0xff);
 800237a:	2263      	movs	r2, #99	; 0x63
 800237c:	21ef      	movs	r1, #239	; 0xef
 800237e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002380:	f00d f985 	bl	800f68e <pbuf_put_at>
        options_offset = UDP_DHCP_OPTIONS_OFS;
 8002384:	23f0      	movs	r3, #240	; 0xf0
 8002386:	627b      	str	r3, [r7, #36]	; 0x24
        pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_MESSAGE_TYPE);
 8002388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238a:	b29b      	uxth	r3, r3
 800238c:	2235      	movs	r2, #53	; 0x35
 800238e:	4619      	mov	r1, r3
 8002390:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002392:	f00d f97c 	bl	800f68e <pbuf_put_at>
        options_offset++;
 8002396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002398:	3301      	adds	r3, #1
 800239a:	627b      	str	r3, [r7, #36]	; 0x24
        pbuf_put_at(pbuf_out, options_offset, 1);
 800239c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239e:	b29b      	uxth	r3, r3
 80023a0:	2201      	movs	r2, #1
 80023a2:	4619      	mov	r1, r3
 80023a4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80023a6:	f00d f972 	bl	800f68e <pbuf_put_at>
        options_offset++;
 80023aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ac:	3301      	adds	r3, #1
 80023ae:	627b      	str	r3, [r7, #36]	; 0x24
        pbuf_put_at(pbuf_out, options_offset, DHCP_ACK);
 80023b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b2:	b29b      	uxth	r3, r3
 80023b4:	2205      	movs	r2, #5
 80023b6:	4619      	mov	r1, r3
 80023b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80023ba:	f00d f968 	bl	800f68e <pbuf_put_at>
        options_offset++;
 80023be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c0:	3301      	adds	r3, #1
 80023c2:	627b      	str	r3, [r7, #36]	; 0x24
        pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_SUBNET_MASK);
 80023c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c6:	b29b      	uxth	r3, r3
 80023c8:	2201      	movs	r2, #1
 80023ca:	4619      	mov	r1, r3
 80023cc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80023ce:	f00d f95e 	bl	800f68e <pbuf_put_at>
        options_offset++;
 80023d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d4:	3301      	adds	r3, #1
 80023d6:	627b      	str	r3, [r7, #36]	; 0x24
        pbuf_put_at(pbuf_out, options_offset, 4);
 80023d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023da:	b29b      	uxth	r3, r3
 80023dc:	2204      	movs	r2, #4
 80023de:	4619      	mov	r1, r3
 80023e0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80023e2:	f00d f954 	bl	800f68e <pbuf_put_at>
        options_offset++;
 80023e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e8:	3301      	adds	r3, #1
 80023ea:	627b      	str	r3, [r7, #36]	; 0x24
        IP4_ADDR(&r, ap_netmask_addr0, ap_netmask_addr1, ap_netmask_addr2, ap_netmask_addr3);
 80023ec:	4ba8      	ldr	r3, [pc, #672]	; (8002690 <dhcpserver_fn+0xa08>)
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	061a      	lsls	r2, r3, #24
 80023f2:	4ba8      	ldr	r3, [pc, #672]	; (8002694 <dhcpserver_fn+0xa0c>)
 80023f4:	781b      	ldrb	r3, [r3, #0]
 80023f6:	041b      	lsls	r3, r3, #16
 80023f8:	431a      	orrs	r2, r3
 80023fa:	4ba7      	ldr	r3, [pc, #668]	; (8002698 <dhcpserver_fn+0xa10>)
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	021b      	lsls	r3, r3, #8
 8002400:	4313      	orrs	r3, r2
 8002402:	4aa6      	ldr	r2, [pc, #664]	; (800269c <dhcpserver_fn+0xa14>)
 8002404:	7812      	ldrb	r2, [r2, #0]
 8002406:	4313      	orrs	r3, r2
 8002408:	061a      	lsls	r2, r3, #24
 800240a:	4ba1      	ldr	r3, [pc, #644]	; (8002690 <dhcpserver_fn+0xa08>)
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	0619      	lsls	r1, r3, #24
 8002410:	4ba0      	ldr	r3, [pc, #640]	; (8002694 <dhcpserver_fn+0xa0c>)
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	041b      	lsls	r3, r3, #16
 8002416:	4319      	orrs	r1, r3
 8002418:	4b9f      	ldr	r3, [pc, #636]	; (8002698 <dhcpserver_fn+0xa10>)
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	021b      	lsls	r3, r3, #8
 800241e:	430b      	orrs	r3, r1
 8002420:	499e      	ldr	r1, [pc, #632]	; (800269c <dhcpserver_fn+0xa14>)
 8002422:	7809      	ldrb	r1, [r1, #0]
 8002424:	430b      	orrs	r3, r1
 8002426:	021b      	lsls	r3, r3, #8
 8002428:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800242c:	431a      	orrs	r2, r3
 800242e:	4b98      	ldr	r3, [pc, #608]	; (8002690 <dhcpserver_fn+0xa08>)
 8002430:	781b      	ldrb	r3, [r3, #0]
 8002432:	0619      	lsls	r1, r3, #24
 8002434:	4b97      	ldr	r3, [pc, #604]	; (8002694 <dhcpserver_fn+0xa0c>)
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	041b      	lsls	r3, r3, #16
 800243a:	4319      	orrs	r1, r3
 800243c:	4b96      	ldr	r3, [pc, #600]	; (8002698 <dhcpserver_fn+0xa10>)
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	021b      	lsls	r3, r3, #8
 8002442:	430b      	orrs	r3, r1
 8002444:	4995      	ldr	r1, [pc, #596]	; (800269c <dhcpserver_fn+0xa14>)
 8002446:	7809      	ldrb	r1, [r1, #0]
 8002448:	430b      	orrs	r3, r1
 800244a:	0a1b      	lsrs	r3, r3, #8
 800244c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002450:	431a      	orrs	r2, r3
 8002452:	4b8f      	ldr	r3, [pc, #572]	; (8002690 <dhcpserver_fn+0xa08>)
 8002454:	781b      	ldrb	r3, [r3, #0]
 8002456:	0619      	lsls	r1, r3, #24
 8002458:	4b8e      	ldr	r3, [pc, #568]	; (8002694 <dhcpserver_fn+0xa0c>)
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	041b      	lsls	r3, r3, #16
 800245e:	4319      	orrs	r1, r3
 8002460:	4b8d      	ldr	r3, [pc, #564]	; (8002698 <dhcpserver_fn+0xa10>)
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	021b      	lsls	r3, r3, #8
 8002466:	430b      	orrs	r3, r1
 8002468:	498c      	ldr	r1, [pc, #560]	; (800269c <dhcpserver_fn+0xa14>)
 800246a:	7809      	ldrb	r1, [r1, #0]
 800246c:	430b      	orrs	r3, r1
 800246e:	0e1b      	lsrs	r3, r3, #24
 8002470:	4313      	orrs	r3, r2
 8002472:	613b      	str	r3, [r7, #16]
        pbuf_put_at(pbuf_out, options_offset, r.addr & 0xff);
 8002474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002476:	b29b      	uxth	r3, r3
 8002478:	693a      	ldr	r2, [r7, #16]
 800247a:	b2d2      	uxtb	r2, r2
 800247c:	4619      	mov	r1, r3
 800247e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002480:	f00d f905 	bl	800f68e <pbuf_put_at>
        pbuf_put_at(pbuf_out, options_offset + 1, (r.addr >> 8) & 0xff);
 8002484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002486:	b29b      	uxth	r3, r3
 8002488:	3301      	adds	r3, #1
 800248a:	b299      	uxth	r1, r3
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	0a1b      	lsrs	r3, r3, #8
 8002490:	b2db      	uxtb	r3, r3
 8002492:	461a      	mov	r2, r3
 8002494:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002496:	f00d f8fa 	bl	800f68e <pbuf_put_at>
        pbuf_put_at(pbuf_out, options_offset + 2, (r.addr >> 16) & 0xff);
 800249a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249c:	b29b      	uxth	r3, r3
 800249e:	3302      	adds	r3, #2
 80024a0:	b299      	uxth	r1, r3
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	0c1b      	lsrs	r3, r3, #16
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	461a      	mov	r2, r3
 80024aa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80024ac:	f00d f8ef 	bl	800f68e <pbuf_put_at>
        pbuf_put_at(pbuf_out, options_offset + 3, (r.addr >> 24) & 0xff);
 80024b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b2:	b29b      	uxth	r3, r3
 80024b4:	3303      	adds	r3, #3
 80024b6:	b299      	uxth	r1, r3
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	0e1b      	lsrs	r3, r3, #24
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	461a      	mov	r2, r3
 80024c0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80024c2:	f00d f8e4 	bl	800f68e <pbuf_put_at>
        options_offset += 4;
 80024c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c8:	3304      	adds	r3, #4
 80024ca:	627b      	str	r3, [r7, #36]	; 0x24
        pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_ROUTER);
 80024cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ce:	b29b      	uxth	r3, r3
 80024d0:	2203      	movs	r2, #3
 80024d2:	4619      	mov	r1, r3
 80024d4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80024d6:	f00d f8da 	bl	800f68e <pbuf_put_at>
        options_offset++;
 80024da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024dc:	3301      	adds	r3, #1
 80024de:	627b      	str	r3, [r7, #36]	; 0x24
        pbuf_put_at(pbuf_out, options_offset, 4);
 80024e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e2:	b29b      	uxth	r3, r3
 80024e4:	2204      	movs	r2, #4
 80024e6:	4619      	mov	r1, r3
 80024e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80024ea:	f00d f8d0 	bl	800f68e <pbuf_put_at>
        options_offset++;
 80024ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f0:	3301      	adds	r3, #1
 80024f2:	627b      	str	r3, [r7, #36]	; 0x24
        IP4_ADDR(&r, ap_ip_addr0, ap_ip_addr1, ap_ip_addr2, ap_ip_addr3);
 80024f4:	4b6a      	ldr	r3, [pc, #424]	; (80026a0 <dhcpserver_fn+0xa18>)
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	061a      	lsls	r2, r3, #24
 80024fa:	4b6a      	ldr	r3, [pc, #424]	; (80026a4 <dhcpserver_fn+0xa1c>)
 80024fc:	781b      	ldrb	r3, [r3, #0]
 80024fe:	041b      	lsls	r3, r3, #16
 8002500:	431a      	orrs	r2, r3
 8002502:	4b69      	ldr	r3, [pc, #420]	; (80026a8 <dhcpserver_fn+0xa20>)
 8002504:	781b      	ldrb	r3, [r3, #0]
 8002506:	021b      	lsls	r3, r3, #8
 8002508:	4313      	orrs	r3, r2
 800250a:	4a68      	ldr	r2, [pc, #416]	; (80026ac <dhcpserver_fn+0xa24>)
 800250c:	7812      	ldrb	r2, [r2, #0]
 800250e:	4313      	orrs	r3, r2
 8002510:	061a      	lsls	r2, r3, #24
 8002512:	4b63      	ldr	r3, [pc, #396]	; (80026a0 <dhcpserver_fn+0xa18>)
 8002514:	781b      	ldrb	r3, [r3, #0]
 8002516:	0619      	lsls	r1, r3, #24
 8002518:	4b62      	ldr	r3, [pc, #392]	; (80026a4 <dhcpserver_fn+0xa1c>)
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	041b      	lsls	r3, r3, #16
 800251e:	4319      	orrs	r1, r3
 8002520:	4b61      	ldr	r3, [pc, #388]	; (80026a8 <dhcpserver_fn+0xa20>)
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	021b      	lsls	r3, r3, #8
 8002526:	430b      	orrs	r3, r1
 8002528:	4960      	ldr	r1, [pc, #384]	; (80026ac <dhcpserver_fn+0xa24>)
 800252a:	7809      	ldrb	r1, [r1, #0]
 800252c:	430b      	orrs	r3, r1
 800252e:	021b      	lsls	r3, r3, #8
 8002530:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002534:	431a      	orrs	r2, r3
 8002536:	4b5a      	ldr	r3, [pc, #360]	; (80026a0 <dhcpserver_fn+0xa18>)
 8002538:	781b      	ldrb	r3, [r3, #0]
 800253a:	0619      	lsls	r1, r3, #24
 800253c:	4b59      	ldr	r3, [pc, #356]	; (80026a4 <dhcpserver_fn+0xa1c>)
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	041b      	lsls	r3, r3, #16
 8002542:	4319      	orrs	r1, r3
 8002544:	4b58      	ldr	r3, [pc, #352]	; (80026a8 <dhcpserver_fn+0xa20>)
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	021b      	lsls	r3, r3, #8
 800254a:	430b      	orrs	r3, r1
 800254c:	4957      	ldr	r1, [pc, #348]	; (80026ac <dhcpserver_fn+0xa24>)
 800254e:	7809      	ldrb	r1, [r1, #0]
 8002550:	430b      	orrs	r3, r1
 8002552:	0a1b      	lsrs	r3, r3, #8
 8002554:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002558:	431a      	orrs	r2, r3
 800255a:	4b51      	ldr	r3, [pc, #324]	; (80026a0 <dhcpserver_fn+0xa18>)
 800255c:	781b      	ldrb	r3, [r3, #0]
 800255e:	0619      	lsls	r1, r3, #24
 8002560:	4b50      	ldr	r3, [pc, #320]	; (80026a4 <dhcpserver_fn+0xa1c>)
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	041b      	lsls	r3, r3, #16
 8002566:	4319      	orrs	r1, r3
 8002568:	4b4f      	ldr	r3, [pc, #316]	; (80026a8 <dhcpserver_fn+0xa20>)
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	021b      	lsls	r3, r3, #8
 800256e:	430b      	orrs	r3, r1
 8002570:	494e      	ldr	r1, [pc, #312]	; (80026ac <dhcpserver_fn+0xa24>)
 8002572:	7809      	ldrb	r1, [r1, #0]
 8002574:	430b      	orrs	r3, r1
 8002576:	0e1b      	lsrs	r3, r3, #24
 8002578:	4313      	orrs	r3, r2
 800257a:	613b      	str	r3, [r7, #16]
        pbuf_put_at(pbuf_out, options_offset, r.addr & 0xff);
 800257c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257e:	b29b      	uxth	r3, r3
 8002580:	693a      	ldr	r2, [r7, #16]
 8002582:	b2d2      	uxtb	r2, r2
 8002584:	4619      	mov	r1, r3
 8002586:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002588:	f00d f881 	bl	800f68e <pbuf_put_at>
        pbuf_put_at(pbuf_out, options_offset + 1, (r.addr >> 8) & 0xff);
 800258c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800258e:	b29b      	uxth	r3, r3
 8002590:	3301      	adds	r3, #1
 8002592:	b299      	uxth	r1, r3
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	0a1b      	lsrs	r3, r3, #8
 8002598:	b2db      	uxtb	r3, r3
 800259a:	461a      	mov	r2, r3
 800259c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800259e:	f00d f876 	bl	800f68e <pbuf_put_at>
        pbuf_put_at(pbuf_out, options_offset + 2, (r.addr >> 16) & 0xff);
 80025a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a4:	b29b      	uxth	r3, r3
 80025a6:	3302      	adds	r3, #2
 80025a8:	b299      	uxth	r1, r3
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	0c1b      	lsrs	r3, r3, #16
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	461a      	mov	r2, r3
 80025b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80025b4:	f00d f86b 	bl	800f68e <pbuf_put_at>
        pbuf_put_at(pbuf_out, options_offset + 3, (r.addr >> 24) & 0xff);
 80025b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ba:	b29b      	uxth	r3, r3
 80025bc:	3303      	adds	r3, #3
 80025be:	b299      	uxth	r1, r3
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	0e1b      	lsrs	r3, r3, #24
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	461a      	mov	r2, r3
 80025c8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80025ca:	f00d f860 	bl	800f68e <pbuf_put_at>
        options_offset += 4;
 80025ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d0:	3304      	adds	r3, #4
 80025d2:	627b      	str	r3, [r7, #36]	; 0x24
        pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_LEASE_TIME);
 80025d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d6:	b29b      	uxth	r3, r3
 80025d8:	2233      	movs	r2, #51	; 0x33
 80025da:	4619      	mov	r1, r3
 80025dc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80025de:	f00d f856 	bl	800f68e <pbuf_put_at>
        options_offset++;
 80025e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e4:	3301      	adds	r3, #1
 80025e6:	627b      	str	r3, [r7, #36]	; 0x24
        pbuf_put_at(pbuf_out, options_offset, 4);
 80025e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	2204      	movs	r2, #4
 80025ee:	4619      	mov	r1, r3
 80025f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80025f2:	f00d f84c 	bl	800f68e <pbuf_put_at>
        options_offset++;
 80025f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f8:	3301      	adds	r3, #1
 80025fa:	627b      	str	r3, [r7, #36]	; 0x24
        pbuf_put_at(pbuf_out, options_offset, (LEASE_TIME_1DAY >> 24) & 0xff);
 80025fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025fe:	b29b      	uxth	r3, r3
 8002600:	2200      	movs	r2, #0
 8002602:	4619      	mov	r1, r3
 8002604:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002606:	f00d f842 	bl	800f68e <pbuf_put_at>
        pbuf_put_at(pbuf_out, options_offset + 1, (LEASE_TIME_1DAY >> 16) & 0xff);
 800260a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260c:	b29b      	uxth	r3, r3
 800260e:	3301      	adds	r3, #1
 8002610:	b29b      	uxth	r3, r3
 8002612:	2201      	movs	r2, #1
 8002614:	4619      	mov	r1, r3
 8002616:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002618:	f00d f839 	bl	800f68e <pbuf_put_at>
        pbuf_put_at(pbuf_out, options_offset + 2, (LEASE_TIME_1DAY >> 8) & 0xff);
 800261c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261e:	b29b      	uxth	r3, r3
 8002620:	3302      	adds	r3, #2
 8002622:	b29b      	uxth	r3, r3
 8002624:	2251      	movs	r2, #81	; 0x51
 8002626:	4619      	mov	r1, r3
 8002628:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800262a:	f00d f830 	bl	800f68e <pbuf_put_at>
        pbuf_put_at(pbuf_out, options_offset + 3, (LEASE_TIME_1DAY) & 0xff);
 800262e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002630:	b29b      	uxth	r3, r3
 8002632:	3303      	adds	r3, #3
 8002634:	b29b      	uxth	r3, r3
 8002636:	2280      	movs	r2, #128	; 0x80
 8002638:	4619      	mov	r1, r3
 800263a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800263c:	f00d f827 	bl	800f68e <pbuf_put_at>
        options_offset += 4;
 8002640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002642:	3304      	adds	r3, #4
 8002644:	627b      	str	r3, [r7, #36]	; 0x24
        pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_SERVER_ID);
 8002646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002648:	b29b      	uxth	r3, r3
 800264a:	2236      	movs	r2, #54	; 0x36
 800264c:	4619      	mov	r1, r3
 800264e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002650:	f00d f81d 	bl	800f68e <pbuf_put_at>
        options_offset++;
 8002654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002656:	3301      	adds	r3, #1
 8002658:	627b      	str	r3, [r7, #36]	; 0x24
        pbuf_put_at(pbuf_out, options_offset, 4);
 800265a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265c:	b29b      	uxth	r3, r3
 800265e:	2204      	movs	r2, #4
 8002660:	4619      	mov	r1, r3
 8002662:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002664:	f00d f813 	bl	800f68e <pbuf_put_at>
        options_offset++;
 8002668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266a:	3301      	adds	r3, #1
 800266c:	627b      	str	r3, [r7, #36]	; 0x24
        IP4_ADDR(&r, ap_ip_addr0, ap_ip_addr1, ap_ip_addr2, ap_ip_addr3);
 800266e:	4b0c      	ldr	r3, [pc, #48]	; (80026a0 <dhcpserver_fn+0xa18>)
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	061a      	lsls	r2, r3, #24
 8002674:	4b0b      	ldr	r3, [pc, #44]	; (80026a4 <dhcpserver_fn+0xa1c>)
 8002676:	781b      	ldrb	r3, [r3, #0]
 8002678:	041b      	lsls	r3, r3, #16
 800267a:	431a      	orrs	r2, r3
 800267c:	4b0a      	ldr	r3, [pc, #40]	; (80026a8 <dhcpserver_fn+0xa20>)
 800267e:	781b      	ldrb	r3, [r3, #0]
 8002680:	021b      	lsls	r3, r3, #8
 8002682:	4313      	orrs	r3, r2
 8002684:	4a09      	ldr	r2, [pc, #36]	; (80026ac <dhcpserver_fn+0xa24>)
 8002686:	7812      	ldrb	r2, [r2, #0]
 8002688:	4313      	orrs	r3, r2
 800268a:	061a      	lsls	r2, r3, #24
 800268c:	e010      	b.n	80026b0 <dhcpserver_fn+0xa28>
 800268e:	bf00      	nop
 8002690:	200000a2 	.word	0x200000a2
 8002694:	200000a3 	.word	0x200000a3
 8002698:	200000a4 	.word	0x200000a4
 800269c:	200008f4 	.word	0x200008f4
 80026a0:	2000009e 	.word	0x2000009e
 80026a4:	2000009f 	.word	0x2000009f
 80026a8:	200000a0 	.word	0x200000a0
 80026ac:	200000a1 	.word	0x200000a1
 80026b0:	4b67      	ldr	r3, [pc, #412]	; (8002850 <dhcpserver_fn+0xbc8>)
 80026b2:	781b      	ldrb	r3, [r3, #0]
 80026b4:	0619      	lsls	r1, r3, #24
 80026b6:	4b67      	ldr	r3, [pc, #412]	; (8002854 <dhcpserver_fn+0xbcc>)
 80026b8:	781b      	ldrb	r3, [r3, #0]
 80026ba:	041b      	lsls	r3, r3, #16
 80026bc:	4319      	orrs	r1, r3
 80026be:	4b66      	ldr	r3, [pc, #408]	; (8002858 <dhcpserver_fn+0xbd0>)
 80026c0:	781b      	ldrb	r3, [r3, #0]
 80026c2:	021b      	lsls	r3, r3, #8
 80026c4:	430b      	orrs	r3, r1
 80026c6:	4965      	ldr	r1, [pc, #404]	; (800285c <dhcpserver_fn+0xbd4>)
 80026c8:	7809      	ldrb	r1, [r1, #0]
 80026ca:	430b      	orrs	r3, r1
 80026cc:	021b      	lsls	r3, r3, #8
 80026ce:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80026d2:	431a      	orrs	r2, r3
 80026d4:	4b5e      	ldr	r3, [pc, #376]	; (8002850 <dhcpserver_fn+0xbc8>)
 80026d6:	781b      	ldrb	r3, [r3, #0]
 80026d8:	0619      	lsls	r1, r3, #24
 80026da:	4b5e      	ldr	r3, [pc, #376]	; (8002854 <dhcpserver_fn+0xbcc>)
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	041b      	lsls	r3, r3, #16
 80026e0:	4319      	orrs	r1, r3
 80026e2:	4b5d      	ldr	r3, [pc, #372]	; (8002858 <dhcpserver_fn+0xbd0>)
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	021b      	lsls	r3, r3, #8
 80026e8:	430b      	orrs	r3, r1
 80026ea:	495c      	ldr	r1, [pc, #368]	; (800285c <dhcpserver_fn+0xbd4>)
 80026ec:	7809      	ldrb	r1, [r1, #0]
 80026ee:	430b      	orrs	r3, r1
 80026f0:	0a1b      	lsrs	r3, r3, #8
 80026f2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80026f6:	431a      	orrs	r2, r3
 80026f8:	4b55      	ldr	r3, [pc, #340]	; (8002850 <dhcpserver_fn+0xbc8>)
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	0619      	lsls	r1, r3, #24
 80026fe:	4b55      	ldr	r3, [pc, #340]	; (8002854 <dhcpserver_fn+0xbcc>)
 8002700:	781b      	ldrb	r3, [r3, #0]
 8002702:	041b      	lsls	r3, r3, #16
 8002704:	4319      	orrs	r1, r3
 8002706:	4b54      	ldr	r3, [pc, #336]	; (8002858 <dhcpserver_fn+0xbd0>)
 8002708:	781b      	ldrb	r3, [r3, #0]
 800270a:	021b      	lsls	r3, r3, #8
 800270c:	430b      	orrs	r3, r1
 800270e:	4953      	ldr	r1, [pc, #332]	; (800285c <dhcpserver_fn+0xbd4>)
 8002710:	7809      	ldrb	r1, [r1, #0]
 8002712:	430b      	orrs	r3, r1
 8002714:	0e1b      	lsrs	r3, r3, #24
 8002716:	4313      	orrs	r3, r2
 8002718:	613b      	str	r3, [r7, #16]
        pbuf_put_at(pbuf_out, options_offset, r.addr & 0xff);
 800271a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271c:	b29b      	uxth	r3, r3
 800271e:	693a      	ldr	r2, [r7, #16]
 8002720:	b2d2      	uxtb	r2, r2
 8002722:	4619      	mov	r1, r3
 8002724:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002726:	f00c ffb2 	bl	800f68e <pbuf_put_at>
        pbuf_put_at(pbuf_out, options_offset + 1, (r.addr >> 8) & 0xff);
 800272a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272c:	b29b      	uxth	r3, r3
 800272e:	3301      	adds	r3, #1
 8002730:	b299      	uxth	r1, r3
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	0a1b      	lsrs	r3, r3, #8
 8002736:	b2db      	uxtb	r3, r3
 8002738:	461a      	mov	r2, r3
 800273a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800273c:	f00c ffa7 	bl	800f68e <pbuf_put_at>
        pbuf_put_at(pbuf_out, options_offset + 2, (r.addr >> 16) & 0xff);
 8002740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002742:	b29b      	uxth	r3, r3
 8002744:	3302      	adds	r3, #2
 8002746:	b299      	uxth	r1, r3
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	0c1b      	lsrs	r3, r3, #16
 800274c:	b2db      	uxtb	r3, r3
 800274e:	461a      	mov	r2, r3
 8002750:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002752:	f00c ff9c 	bl	800f68e <pbuf_put_at>
        pbuf_put_at(pbuf_out, options_offset + 3, (r.addr >> 24) & 0xff);
 8002756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002758:	b29b      	uxth	r3, r3
 800275a:	3303      	adds	r3, #3
 800275c:	b299      	uxth	r1, r3
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	0e1b      	lsrs	r3, r3, #24
 8002762:	b2db      	uxtb	r3, r3
 8002764:	461a      	mov	r2, r3
 8002766:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002768:	f00c ff91 	bl	800f68e <pbuf_put_at>
        options_offset += 4;
 800276c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276e:	3304      	adds	r3, #4
 8002770:	627b      	str	r3, [r7, #36]	; 0x24
        pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_END);
 8002772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002774:	b29b      	uxth	r3, r3
 8002776:	22ff      	movs	r2, #255	; 0xff
 8002778:	4619      	mov	r1, r3
 800277a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800277c:	f00c ff87 	bl	800f68e <pbuf_put_at>
        options_offset++;
 8002780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002782:	3301      	adds	r3, #1
 8002784:	627b      	str	r3, [r7, #36]	; 0x24
 8002786:	e03d      	b.n	8002804 <dhcpserver_fn+0xb7c>
        pbuf_put_at(pbuf_out, DHCP_COOKIE_OFS, (DHCP_MAGIC_COOKIE >> 24) & 0xff);
 8002788:	2263      	movs	r2, #99	; 0x63
 800278a:	21ec      	movs	r1, #236	; 0xec
 800278c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800278e:	f00c ff7e 	bl	800f68e <pbuf_put_at>
        pbuf_put_at(pbuf_out, DHCP_COOKIE_OFS + 1, (DHCP_MAGIC_COOKIE >> 16) & 0xff);
 8002792:	2282      	movs	r2, #130	; 0x82
 8002794:	21ed      	movs	r1, #237	; 0xed
 8002796:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002798:	f00c ff79 	bl	800f68e <pbuf_put_at>
        pbuf_put_at(pbuf_out, DHCP_COOKIE_OFS + 2, (DHCP_MAGIC_COOKIE >> 8) & 0xff);
 800279c:	2253      	movs	r2, #83	; 0x53
 800279e:	21ee      	movs	r1, #238	; 0xee
 80027a0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80027a2:	f00c ff74 	bl	800f68e <pbuf_put_at>
        pbuf_put_at(pbuf_out, DHCP_COOKIE_OFS + 3, (DHCP_MAGIC_COOKIE) & 0xff);
 80027a6:	2263      	movs	r2, #99	; 0x63
 80027a8:	21ef      	movs	r1, #239	; 0xef
 80027aa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80027ac:	f00c ff6f 	bl	800f68e <pbuf_put_at>
        options_offset = UDP_DHCP_OPTIONS_OFS;
 80027b0:	23f0      	movs	r3, #240	; 0xf0
 80027b2:	627b      	str	r3, [r7, #36]	; 0x24
        pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_MESSAGE_TYPE);
 80027b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b6:	b29b      	uxth	r3, r3
 80027b8:	2235      	movs	r2, #53	; 0x35
 80027ba:	4619      	mov	r1, r3
 80027bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80027be:	f00c ff66 	bl	800f68e <pbuf_put_at>
        options_offset++;
 80027c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c4:	3301      	adds	r3, #1
 80027c6:	627b      	str	r3, [r7, #36]	; 0x24
        pbuf_put_at(pbuf_out, options_offset, 1);
 80027c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ca:	b29b      	uxth	r3, r3
 80027cc:	2201      	movs	r2, #1
 80027ce:	4619      	mov	r1, r3
 80027d0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80027d2:	f00c ff5c 	bl	800f68e <pbuf_put_at>
        options_offset++;
 80027d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d8:	3301      	adds	r3, #1
 80027da:	627b      	str	r3, [r7, #36]	; 0x24
        pbuf_put_at(pbuf_out, options_offset, DHCP_NAK);
 80027dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027de:	b29b      	uxth	r3, r3
 80027e0:	2206      	movs	r2, #6
 80027e2:	4619      	mov	r1, r3
 80027e4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80027e6:	f00c ff52 	bl	800f68e <pbuf_put_at>
        options_offset++;
 80027ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ec:	3301      	adds	r3, #1
 80027ee:	627b      	str	r3, [r7, #36]	; 0x24
        pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_END);
 80027f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f2:	b29b      	uxth	r3, r3
 80027f4:	22ff      	movs	r2, #255	; 0xff
 80027f6:	4619      	mov	r1, r3
 80027f8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80027fa:	f00c ff48 	bl	800f68e <pbuf_put_at>
        options_offset++;
 80027fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002800:	3301      	adds	r3, #1
 8002802:	627b      	str	r3, [r7, #36]	; 0x24
      pbuf_realloc(pbuf_out, options_offset);
 8002804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002806:	b29b      	uxth	r3, r3
 8002808:	4619      	mov	r1, r3
 800280a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800280c:	f00c f99e 	bl	800eb4c <pbuf_realloc>
      if (ERR_OK != udp_sendto(dhcp_pcb, pbuf_out, &client_ip_addr, DHCP_CLIENT_PORT)) {
 8002810:	4b13      	ldr	r3, [pc, #76]	; (8002860 <dhcpserver_fn+0xbd8>)
 8002812:	6818      	ldr	r0, [r3, #0]
 8002814:	f107 0214 	add.w	r2, r7, #20
 8002818:	2344      	movs	r3, #68	; 0x44
 800281a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800281c:	f012 fc8a 	bl	8015134 <udp_sendto>
 8002820:	4603      	mov	r3, r0
 8002822:	2b00      	cmp	r3, #0
      break;
 8002824:	e006      	b.n	8002834 <dhcpserver_fn+0xbac>
    goto end_of_fcn;
 8002826:	bf00      	nop
 8002828:	e004      	b.n	8002834 <dhcpserver_fn+0xbac>
    goto end_of_fcn;
 800282a:	bf00      	nop
 800282c:	e002      	b.n	8002834 <dhcpserver_fn+0xbac>
    goto end_of_fcn;
 800282e:	bf00      	nop
 8002830:	e000      	b.n	8002834 <dhcpserver_fn+0xbac>
        goto end_of_fcn;
 8002832:	bf00      	nop
  }

  end_of_fcn:
  if (pbuf_out) {
 8002834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002836:	2b00      	cmp	r3, #0
 8002838:	d002      	beq.n	8002840 <dhcpserver_fn+0xbb8>
    pbuf_free(pbuf_out);
 800283a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800283c:	f00c fb0c 	bl	800ee58 <pbuf_free>
  }
  pbuf_free(pbuf_in);
 8002840:	6878      	ldr	r0, [r7, #4]
 8002842:	f00c fb09 	bl	800ee58 <pbuf_free>
}
 8002846:	bf00      	nop
 8002848:	3730      	adds	r7, #48	; 0x30
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	2000009e 	.word	0x2000009e
 8002854:	2000009f 	.word	0x2000009f
 8002858:	200000a0 	.word	0x200000a0
 800285c:	200000a1 	.word	0x200000a1
 8002860:	200005f4 	.word	0x200005f4

08002864 <dhcpserver_start_prv>:

/***************************************************************************//**
 * Start DHCP server callback.
 ******************************************************************************/
static void dhcpserver_start_prv(void * arg)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b084      	sub	sp, #16
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  //clear saved mac addresses
  for (uint32_t i = 0; i < DHCPS_MAX_CLIENT; ++i) {
 800286c:	2300      	movs	r3, #0
 800286e:	60fb      	str	r3, [r7, #12]
 8002870:	e03d      	b.n	80028ee <dhcpserver_start_prv+0x8a>
    saved_mac[i].addr[0] = 0;
 8002872:	4933      	ldr	r1, [pc, #204]	; (8002940 <dhcpserver_start_prv+0xdc>)
 8002874:	68fa      	ldr	r2, [r7, #12]
 8002876:	4613      	mov	r3, r2
 8002878:	005b      	lsls	r3, r3, #1
 800287a:	4413      	add	r3, r2
 800287c:	005b      	lsls	r3, r3, #1
 800287e:	440b      	add	r3, r1
 8002880:	2200      	movs	r2, #0
 8002882:	701a      	strb	r2, [r3, #0]
    saved_mac[i].addr[1] = 0;
 8002884:	492e      	ldr	r1, [pc, #184]	; (8002940 <dhcpserver_start_prv+0xdc>)
 8002886:	68fa      	ldr	r2, [r7, #12]
 8002888:	4613      	mov	r3, r2
 800288a:	005b      	lsls	r3, r3, #1
 800288c:	4413      	add	r3, r2
 800288e:	005b      	lsls	r3, r3, #1
 8002890:	440b      	add	r3, r1
 8002892:	3301      	adds	r3, #1
 8002894:	2200      	movs	r2, #0
 8002896:	701a      	strb	r2, [r3, #0]
    saved_mac[i].addr[2] = 0;
 8002898:	4929      	ldr	r1, [pc, #164]	; (8002940 <dhcpserver_start_prv+0xdc>)
 800289a:	68fa      	ldr	r2, [r7, #12]
 800289c:	4613      	mov	r3, r2
 800289e:	005b      	lsls	r3, r3, #1
 80028a0:	4413      	add	r3, r2
 80028a2:	005b      	lsls	r3, r3, #1
 80028a4:	440b      	add	r3, r1
 80028a6:	3302      	adds	r3, #2
 80028a8:	2200      	movs	r2, #0
 80028aa:	701a      	strb	r2, [r3, #0]
    saved_mac[i].addr[3] = 0;
 80028ac:	4924      	ldr	r1, [pc, #144]	; (8002940 <dhcpserver_start_prv+0xdc>)
 80028ae:	68fa      	ldr	r2, [r7, #12]
 80028b0:	4613      	mov	r3, r2
 80028b2:	005b      	lsls	r3, r3, #1
 80028b4:	4413      	add	r3, r2
 80028b6:	005b      	lsls	r3, r3, #1
 80028b8:	440b      	add	r3, r1
 80028ba:	3303      	adds	r3, #3
 80028bc:	2200      	movs	r2, #0
 80028be:	701a      	strb	r2, [r3, #0]
    saved_mac[i].addr[4] = 0;
 80028c0:	491f      	ldr	r1, [pc, #124]	; (8002940 <dhcpserver_start_prv+0xdc>)
 80028c2:	68fa      	ldr	r2, [r7, #12]
 80028c4:	4613      	mov	r3, r2
 80028c6:	005b      	lsls	r3, r3, #1
 80028c8:	4413      	add	r3, r2
 80028ca:	005b      	lsls	r3, r3, #1
 80028cc:	440b      	add	r3, r1
 80028ce:	3304      	adds	r3, #4
 80028d0:	2200      	movs	r2, #0
 80028d2:	701a      	strb	r2, [r3, #0]
    saved_mac[i].addr[5] = 0;
 80028d4:	491a      	ldr	r1, [pc, #104]	; (8002940 <dhcpserver_start_prv+0xdc>)
 80028d6:	68fa      	ldr	r2, [r7, #12]
 80028d8:	4613      	mov	r3, r2
 80028da:	005b      	lsls	r3, r3, #1
 80028dc:	4413      	add	r3, r2
 80028de:	005b      	lsls	r3, r3, #1
 80028e0:	440b      	add	r3, r1
 80028e2:	3305      	adds	r3, #5
 80028e4:	2200      	movs	r2, #0
 80028e6:	701a      	strb	r2, [r3, #0]
  for (uint32_t i = 0; i < DHCPS_MAX_CLIENT; ++i) {
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	3301      	adds	r3, #1
 80028ec:	60fb      	str	r3, [r7, #12]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	2b07      	cmp	r3, #7
 80028f2:	d9be      	bls.n	8002872 <dhcpserver_start_prv+0xe>
  }

  if (NULL == dhcp_pcb) {
 80028f4:	4b13      	ldr	r3, [pc, #76]	; (8002944 <dhcpserver_start_prv+0xe0>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d11e      	bne.n	800293a <dhcpserver_start_prv+0xd6>
    dhcp_pcb = udp_new();
 80028fc:	f012 ff6a 	bl	80157d4 <udp_new>
 8002900:	4603      	mov	r3, r0
 8002902:	4a10      	ldr	r2, [pc, #64]	; (8002944 <dhcpserver_start_prv+0xe0>)
 8002904:	6013      	str	r3, [r2, #0]
    if (NULL == dhcp_pcb) {
 8002906:	4b0f      	ldr	r3, [pc, #60]	; (8002944 <dhcpserver_start_prv+0xe0>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d014      	beq.n	8002938 <dhcpserver_start_prv+0xd4>
      return;
    }

    udp_bind(dhcp_pcb, IP_ADDR_ANY, DHCP_SERVER_PORT);
 800290e:	4b0d      	ldr	r3, [pc, #52]	; (8002944 <dhcpserver_start_prv+0xe0>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	2243      	movs	r2, #67	; 0x43
 8002914:	490c      	ldr	r1, [pc, #48]	; (8002948 <dhcpserver_start_prv+0xe4>)
 8002916:	4618      	mov	r0, r3
 8002918:	f012 fdc2 	bl	80154a0 <udp_bind>
    udp_bind_netif(dhcp_pcb, &ap_netif);
 800291c:	4b09      	ldr	r3, [pc, #36]	; (8002944 <dhcpserver_start_prv+0xe0>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	490a      	ldr	r1, [pc, #40]	; (800294c <dhcpserver_start_prv+0xe8>)
 8002922:	4618      	mov	r0, r3
 8002924:	f012 fe44 	bl	80155b0 <udp_bind_netif>
    udp_recv(dhcp_pcb, dhcpserver_fn, 0);
 8002928:	4b06      	ldr	r3, [pc, #24]	; (8002944 <dhcpserver_start_prv+0xe0>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	2200      	movs	r2, #0
 800292e:	4908      	ldr	r1, [pc, #32]	; (8002950 <dhcpserver_start_prv+0xec>)
 8002930:	4618      	mov	r0, r3
 8002932:	f012 feed 	bl	8015710 <udp_recv>
 8002936:	e000      	b.n	800293a <dhcpserver_start_prv+0xd6>
      return;
 8002938:	bf00      	nop
  }
}
 800293a:	3710      	adds	r7, #16
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}
 8002940:	200005f8 	.word	0x200005f8
 8002944:	200005f4 	.word	0x200005f4
 8002948:	0806c870 	.word	0x0806c870
 800294c:	20000884 	.word	0x20000884
 8002950:	08001c89 	.word	0x08001c89

08002954 <dhcpserver_start>:

/***************************************************************************//**
 * Start DHCP server.
 ******************************************************************************/
void dhcpserver_start(void)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	af00      	add	r7, sp, #0
  tcpip_callback(dhcpserver_start_prv, 0);
 8002958:	2100      	movs	r1, #0
 800295a:	4802      	ldr	r0, [pc, #8]	; (8002964 <dhcpserver_start+0x10>)
 800295c:	f00a fc82 	bl	800d264 <tcpip_callback>
}
 8002960:	bf00      	nop
 8002962:	bd80      	pop	{r7, pc}
 8002964:	08002865 	.word	0x08002865

08002968 <dhcpserver_stop_prv>:

/***************************************************************************//**
 * Stop DHCP server callback.
 ******************************************************************************/
static void dhcpserver_stop_prv(void * arg)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b082      	sub	sp, #8
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  if (dhcp_pcb != NULL) {
 8002970:	4b0a      	ldr	r3, [pc, #40]	; (800299c <dhcpserver_stop_prv+0x34>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d00c      	beq.n	8002992 <dhcpserver_stop_prv+0x2a>
    udp_disconnect(dhcp_pcb);
 8002978:	4b08      	ldr	r3, [pc, #32]	; (800299c <dhcpserver_stop_prv+0x34>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4618      	mov	r0, r3
 800297e:	f012 fe9f 	bl	80156c0 <udp_disconnect>
    udp_remove(dhcp_pcb);
 8002982:	4b06      	ldr	r3, [pc, #24]	; (800299c <dhcpserver_stop_prv+0x34>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4618      	mov	r0, r3
 8002988:	f012 fee2 	bl	8015750 <udp_remove>
    dhcp_pcb = NULL;
 800298c:	4b03      	ldr	r3, [pc, #12]	; (800299c <dhcpserver_stop_prv+0x34>)
 800298e:	2200      	movs	r2, #0
 8002990:	601a      	str	r2, [r3, #0]
  }
}
 8002992:	bf00      	nop
 8002994:	3708      	adds	r7, #8
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	200005f4 	.word	0x200005f4

080029a0 <dhcpserver_stop>:

/***************************************************************************//**
 * Stop DHCP server.
 ******************************************************************************/
void dhcpserver_stop(void)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	af00      	add	r7, sp, #0
  tcpip_callback(dhcpserver_stop_prv, 0);
 80029a4:	2100      	movs	r1, #0
 80029a6:	4802      	ldr	r0, [pc, #8]	; (80029b0 <dhcpserver_stop+0x10>)
 80029a8:	f00a fc5c 	bl	800d264 <tcpip_callback>
}
 80029ac:	bf00      	nop
 80029ae:	bd80      	pop	{r7, pc}
 80029b0:	08002969 	.word	0x08002969

080029b4 <low_level_init>:
 * @param[in] netif: the already initialized lwip network interface structure
 *
 * @return
 *    None
 ******************************************************************************/
static void low_level_init (struct netif *netif) {
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b082      	sub	sp, #8
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  /* set netif MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2206      	movs	r2, #6
 80029c0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  
  /* Check which netif is initialized and set netif MAC hardware address */
  if (memcmp(netif->name, STATION_NETIF, 2) == 0) {
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	3332      	adds	r3, #50	; 0x32
 80029c8:	2202      	movs	r2, #2
 80029ca:	491b      	ldr	r1, [pc, #108]	; (8002a38 <low_level_init+0x84>)
 80029cc:	4618      	mov	r0, r3
 80029ce:	f017 fc79 	bl	801a2c4 <memcmp>
 80029d2:	4603      	mov	r3, r0
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d10a      	bne.n	80029ee <low_level_init+0x3a>
    memcpy(netif->hwaddr, wifi_context.mac_addr_0.octet, 6);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 80029de:	4b17      	ldr	r3, [pc, #92]	; (8002a3c <low_level_init+0x88>)
 80029e0:	f203 2316 	addw	r3, r3, #534	; 0x216
 80029e4:	6819      	ldr	r1, [r3, #0]
 80029e6:	6011      	str	r1, [r2, #0]
 80029e8:	889b      	ldrh	r3, [r3, #4]
 80029ea:	8093      	strh	r3, [r2, #4]
 80029ec:	e009      	b.n	8002a02 <low_level_init+0x4e>
  } else {
    memcpy(netif->hwaddr, wifi_context.mac_addr_1.octet, 6);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 80029f4:	4b11      	ldr	r3, [pc, #68]	; (8002a3c <low_level_init+0x88>)
 80029f6:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 80029fa:	6818      	ldr	r0, [r3, #0]
 80029fc:	6010      	str	r0, [r2, #0]
 80029fe:	889b      	ldrh	r3, [r3, #4]
 8002a00:	8093      	strh	r3, [r2, #4]
  }

  /* Set netif maximum transfer unit */
  netif->mtu = 1500;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8002a08:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002a10:	f043 030a 	orr.w	r3, r3, #10
 8002a14:	b2da      	uxtb	r2, r3
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  /* Set netif link flag */
  netif->flags |= NETIF_FLAG_LINK_UP;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002a22:	f043 0304 	orr.w	r3, r3, #4
 8002a26:	b2da      	uxtb	r2, r3
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
}
 8002a2e:	bf00      	nop
 8002a30:	3708      	adds	r7, #8
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	bf00      	nop
 8002a38:	0801d268 	.word	0x0801d268
 8002a3c:	20000628 	.word	0x20000628

08002a40 <low_level_output>:
 * @param[in] p: the packet to send
 *
 * @return
 *    ERR_OK if successful
 ******************************************************************************/
static err_t low_level_output (struct netif *netif, struct pbuf *p) {
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b086      	sub	sp, #24
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
 8002a48:	6039      	str	r1, [r7, #0]
  uint8_t *buffer;
  sl_wfx_packet_queue_item_t *queue_item;
  sl_status_t result;
  
  /* Take TX queue mutex */
  xSemaphoreTake(sl_wfx_tx_queue_mutex, portMAX_DELAY);
 8002a4a:	4b37      	ldr	r3, [pc, #220]	; (8002b28 <low_level_output+0xe8>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f04f 31ff 	mov.w	r1, #4294967295
 8002a52:	4618      	mov	r0, r3
 8002a54:	f007 fee8 	bl	800a828 <xQueueSemaphoreTake>

  /* Allocate a buffer for a queue item */
  result = sl_wfx_allocate_command_buffer((sl_wfx_generic_message_t**)(&queue_item),
                                          SL_WFX_SEND_FRAME_REQ_ID,
                                          SL_WFX_TX_FRAME_BUFFER,
                                          p->tot_len + sizeof(sl_wfx_packet_queue_item_t));
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	891b      	ldrh	r3, [r3, #8]
 8002a5c:	3318      	adds	r3, #24
  result = sl_wfx_allocate_command_buffer((sl_wfx_generic_message_t**)(&queue_item),
 8002a5e:	f107 0008 	add.w	r0, r7, #8
 8002a62:	2200      	movs	r2, #0
 8002a64:	214a      	movs	r1, #74	; 0x4a
 8002a66:	f005 fd6d 	bl	8008544 <sl_wfx_allocate_command_buffer>
 8002a6a:	60f8      	str	r0, [r7, #12]
  
  if ((result != SL_STATUS_OK) || (queue_item == NULL)) {
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d102      	bne.n	8002a78 <low_level_output+0x38>
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d109      	bne.n	8002a8c <low_level_output+0x4c>
	  /* Release TX queue mutex */
	    xSemaphoreGive(sl_wfx_tx_queue_mutex);
 8002a78:	4b2b      	ldr	r3, [pc, #172]	; (8002b28 <low_level_output+0xe8>)
 8002a7a:	6818      	ldr	r0, [r3, #0]
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	2200      	movs	r2, #0
 8002a80:	2100      	movs	r1, #0
 8002a82:	f007 fbcb 	bl	800a21c <xQueueGenericSend>
    return ERR_MEM;
 8002a86:	f04f 33ff 	mov.w	r3, #4294967295
 8002a8a:	e049      	b.n	8002b20 <low_level_output+0xe0>
  }

  buffer = queue_item->buffer.body.packet_data;
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	3318      	adds	r3, #24
 8002a90:	613b      	str	r3, [r7, #16]
  
  for (q = p; q != NULL; q = q->next) {
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	617b      	str	r3, [r7, #20]
 8002a96:	e010      	b.n	8002aba <low_level_output+0x7a>
    /* Copy the bytes */
    memcpy(buffer, q->payload, q->len);
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	6859      	ldr	r1, [r3, #4]
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	895b      	ldrh	r3, [r3, #10]
 8002aa0:	461a      	mov	r2, r3
 8002aa2:	6938      	ldr	r0, [r7, #16]
 8002aa4:	f017 fc1e 	bl	801a2e4 <memcpy>
    buffer += q->len;
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	895b      	ldrh	r3, [r3, #10]
 8002aac:	461a      	mov	r2, r3
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	4413      	add	r3, r2
 8002ab2:	613b      	str	r3, [r7, #16]
  for (q = p; q != NULL; q = q->next) {
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	617b      	str	r3, [r7, #20]
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d1eb      	bne.n	8002a98 <low_level_output+0x58>
  }

  /* Provide the data length the interface information to the pbuf */
  queue_item->interface = (memcmp(netif->name, STATION_NETIF, 2) == 0)?  SL_WFX_STA_INTERFACE : SL_WFX_SOFTAP_INTERFACE;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	3332      	adds	r3, #50	; 0x32
 8002ac4:	2202      	movs	r2, #2
 8002ac6:	4919      	ldr	r1, [pc, #100]	; (8002b2c <low_level_output+0xec>)
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f017 fbfb 	bl	801a2c4 <memcmp>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	bf14      	ite	ne
 8002ad4:	2301      	movne	r3, #1
 8002ad6:	2300      	moveq	r3, #0
 8002ad8:	b2da      	uxtb	r2, r3
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	711a      	strb	r2, [r3, #4]
  queue_item->data_length = p->tot_len;
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	891a      	ldrh	r2, [r3, #8]
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	609a      	str	r2, [r3, #8]
  
  /* Determine if there is anything on the tx packet queue */
  if (sl_wfx_tx_queue_context.head_ptr != NULL) {
 8002ae6:	4b12      	ldr	r3, [pc, #72]	; (8002b30 <low_level_output+0xf0>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d004      	beq.n	8002af8 <low_level_output+0xb8>
    sl_wfx_tx_queue_context.tail_ptr->next = queue_item;
 8002aee:	4b10      	ldr	r3, [pc, #64]	; (8002b30 <low_level_output+0xf0>)
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	68ba      	ldr	r2, [r7, #8]
 8002af4:	601a      	str	r2, [r3, #0]
 8002af6:	e002      	b.n	8002afe <low_level_output+0xbe>
  } else {
    /* If tx packet queue is empty, setup head & tail pointers */
    sl_wfx_tx_queue_context.head_ptr = queue_item;
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	4a0d      	ldr	r2, [pc, #52]	; (8002b30 <low_level_output+0xf0>)
 8002afc:	6013      	str	r3, [r2, #0]
  }
  
  /* Update the tail pointer */
  sl_wfx_tx_queue_context.tail_ptr = queue_item;
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	4a0b      	ldr	r2, [pc, #44]	; (8002b30 <low_level_output+0xf0>)
 8002b02:	6053      	str	r3, [r2, #4]
  
  /* Notify that a TX frame is ready */
  xEventGroupSetBits(sl_wfx_event_group, SL_WFX_TX_PACKET_AVAILABLE);
 8002b04:	4b0b      	ldr	r3, [pc, #44]	; (8002b34 <low_level_output+0xf4>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	2101      	movs	r1, #1
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f007 f928 	bl	8009d60 <xEventGroupSetBits>
  
  /* Release TX queue mutex */
  xSemaphoreGive(sl_wfx_tx_queue_mutex);
 8002b10:	4b05      	ldr	r3, [pc, #20]	; (8002b28 <low_level_output+0xe8>)
 8002b12:	6818      	ldr	r0, [r3, #0]
 8002b14:	2300      	movs	r3, #0
 8002b16:	2200      	movs	r2, #0
 8002b18:	2100      	movs	r1, #0
 8002b1a:	f007 fb7f 	bl	800a21c <xQueueGenericSend>
  
  return ERR_OK;
 8002b1e:	2300      	movs	r3, #0
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3718      	adds	r7, #24
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	20001478 	.word	0x20001478
 8002b2c:	0801d268 	.word	0x0801d268
 8002b30:	2000147c 	.word	0x2000147c
 8002b34:	20001474 	.word	0x20001474

08002b38 <low_level_input>:
 * @param[in] rx_buffer: the ethernet frame received by the wf200
 *
 * @return
 *    LwIP pbuf filled with received packet, or NULL on error
 ******************************************************************************/
static struct pbuf *low_level_input (struct netif *netif, sl_wfx_received_ind_t* rx_buffer) {
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b086      	sub	sp, #24
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
 8002b40:	6039      	str	r1, [r7, #0]
  struct pbuf *p, *q;
  uint8_t *buffer;
  
  /* Obtain the packet by removing the padding. */
  buffer = (uint8_t *)&(rx_buffer->body.frame[rx_buffer->body.frame_padding]);
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	795b      	ldrb	r3, [r3, #5]
 8002b46:	461a      	mov	r2, r3
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	4413      	add	r3, r2
 8002b4c:	3308      	adds	r3, #8
 8002b4e:	60fb      	str	r3, [r7, #12]
 
  if (rx_buffer->body.frame_length > 0) {
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	88db      	ldrh	r3, [r3, #6]
 8002b54:	b29b      	uxth	r3, r3
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d009      	beq.n	8002b6e <low_level_input+0x36>
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, rx_buffer->body.frame_length, PBUF_POOL);
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	88db      	ldrh	r3, [r3, #6]
 8002b5e:	b29b      	uxth	r3, r3
 8002b60:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8002b64:	4619      	mov	r1, r3
 8002b66:	2000      	movs	r0, #0
 8002b68:	f00b fe8e 	bl	800e888 <pbuf_alloc>
 8002b6c:	6178      	str	r0, [r7, #20]
  }
  
  if (p != NULL) {
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d016      	beq.n	8002ba2 <low_level_input+0x6a>
    for (q = p; q != NULL; q = q->next) {
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	613b      	str	r3, [r7, #16]
 8002b78:	e010      	b.n	8002b9c <low_level_input+0x64>
      /* Copy remaining data in pbuf */
      memcpy(q->payload, buffer, q->len);
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	6858      	ldr	r0, [r3, #4]
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	895b      	ldrh	r3, [r3, #10]
 8002b82:	461a      	mov	r2, r3
 8002b84:	68f9      	ldr	r1, [r7, #12]
 8002b86:	f017 fbad 	bl	801a2e4 <memcpy>
      buffer += q->len;
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	895b      	ldrh	r3, [r3, #10]
 8002b8e:	461a      	mov	r2, r3
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	4413      	add	r3, r2
 8002b94:	60fb      	str	r3, [r7, #12]
    for (q = p; q != NULL; q = q->next) {
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	613b      	str	r3, [r7, #16]
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d1eb      	bne.n	8002b7a <low_level_input+0x42>
    }
  }  
   
  return p;
 8002ba2:	697b      	ldr	r3, [r7, #20]
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3718      	adds	r7, #24
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}

08002bac <sl_wfx_host_received_frame_callback>:
 * @param[in] rx_buffer: the ethernet frame received by the wf200
 *
 * @return
 *    None
******************************************************************************/
void sl_wfx_host_received_frame_callback (sl_wfx_received_ind_t* rx_buffer) {
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b084      	sub	sp, #16
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif;
  
  /* Check packet interface to send to AP or STA interface */
  if ((rx_buffer->header.info & SL_WFX_MSG_INFO_INTERFACE_MASK) == 
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	78db      	ldrb	r3, [r3, #3]
 8002bb8:	f003 0306 	and.w	r3, r3, #6
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d102      	bne.n	8002bc6 <sl_wfx_host_received_frame_callback+0x1a>
     (SL_WFX_STA_INTERFACE << SL_WFX_MSG_INFO_INTERFACE_OFFSET)) {
    /* Send to station interface */
    netif = &sta_netif;
 8002bc0:	4b0f      	ldr	r3, [pc, #60]	; (8002c00 <sl_wfx_host_received_frame_callback+0x54>)
 8002bc2:	60fb      	str	r3, [r7, #12]
 8002bc4:	e001      	b.n	8002bca <sl_wfx_host_received_frame_callback+0x1e>
  } else {
    /* Send to softAP interface */
    netif = &ap_netif;
 8002bc6:	4b0f      	ldr	r3, [pc, #60]	; (8002c04 <sl_wfx_host_received_frame_callback+0x58>)
 8002bc8:	60fb      	str	r3, [r7, #12]
  }

  if (netif != NULL) {
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d012      	beq.n	8002bf6 <sl_wfx_host_received_frame_callback+0x4a>
    p = low_level_input(netif, rx_buffer);
 8002bd0:	6879      	ldr	r1, [r7, #4]
 8002bd2:	68f8      	ldr	r0, [r7, #12]
 8002bd4:	f7ff ffb0 	bl	8002b38 <low_level_input>
 8002bd8:	60b8      	str	r0, [r7, #8]
    if (p != NULL) {
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d00a      	beq.n	8002bf6 <sl_wfx_host_received_frame_callback+0x4a>
      if (netif->input(p, netif) != ERR_OK) {
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	691b      	ldr	r3, [r3, #16]
 8002be4:	68f9      	ldr	r1, [r7, #12]
 8002be6:	68b8      	ldr	r0, [r7, #8]
 8002be8:	4798      	blx	r3
 8002bea:	4603      	mov	r3, r0
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d002      	beq.n	8002bf6 <sl_wfx_host_received_frame_callback+0x4a>
        pbuf_free(p);
 8002bf0:	68b8      	ldr	r0, [r7, #8]
 8002bf2:	f00c f931 	bl	800ee58 <pbuf_free>
      }
    }
  }
}
 8002bf6:	bf00      	nop
 8002bf8:	3710      	adds	r7, #16
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	2000084c 	.word	0x2000084c
 8002c04:	20000884 	.word	0x20000884

08002c08 <sta_ethernetif_init>:
 * @param[in] netif: the lwip network interface structure
 *
 * @return
 *    ERR_OK if successful
 ******************************************************************************/
err_t sta_ethernetif_init (struct netif *netif) {
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b082      	sub	sp, #8
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d105      	bne.n	8002c22 <sta_ethernetif_init+0x1a>
 8002c16:	4b0d      	ldr	r3, [pc, #52]	; (8002c4c <sta_ethernetif_init+0x44>)
 8002c18:	22dc      	movs	r2, #220	; 0xdc
 8002c1a:	490d      	ldr	r1, [pc, #52]	; (8002c50 <sta_ethernetif_init+0x48>)
 8002c1c:	480d      	ldr	r0, [pc, #52]	; (8002c54 <sta_ethernetif_init+0x4c>)
 8002c1e:	f018 f8d7 	bl	801add0 <iprintf>

  /* Set the netif name to identify the interface */
  memcpy(netif->name, STATION_NETIF, 2);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	3332      	adds	r3, #50	; 0x32
 8002c26:	2202      	movs	r2, #2
 8002c28:	490b      	ldr	r1, [pc, #44]	; (8002c58 <sta_ethernetif_init+0x50>)
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f017 fb5a 	bl	801a2e4 <memcpy>

  netif->output = etharp_output;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	4a0a      	ldr	r2, [pc, #40]	; (8002c5c <sta_ethernetif_init+0x54>)
 8002c34:	615a      	str	r2, [r3, #20]
  netif->linkoutput = low_level_output;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	4a09      	ldr	r2, [pc, #36]	; (8002c60 <sta_ethernetif_init+0x58>)
 8002c3a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	f7ff feb9 	bl	80029b4 <low_level_init>
  
  return ERR_OK;
 8002c42:	2300      	movs	r3, #0
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	3708      	adds	r7, #8
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}
 8002c4c:	0801d26c 	.word	0x0801d26c
 8002c50:	0801d288 	.word	0x0801d288
 8002c54:	0801d298 	.word	0x0801d298
 8002c58:	0801d268 	.word	0x0801d268
 8002c5c:	08017f35 	.word	0x08017f35
 8002c60:	08002a41 	.word	0x08002a41

08002c64 <sys_now>:
  low_level_init(netif);
  
  return ERR_OK;
}

u32_t sys_now (void) {
 8002c64:	b580      	push	{r7, lr}
 8002c66:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8002c68:	f001 f8e2 	bl	8003e30 <HAL_GetTick>
 8002c6c:	4603      	mov	r3, r0
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	bd80      	pop	{r7, pc}
	...

08002c74 <lwip_start_task_entry>:
 *    not used
 *
 * @return
 *    none
 ******************************************************************************/
static void lwip_start_task_entry (void const * argument) {
 8002c74:	b5b0      	push	{r4, r5, r7, lr}
 8002c76:	b088      	sub	sp, #32
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  /* Create tcp_ip stack thread */
  tcpip_init(NULL, NULL);
 8002c7c:	2100      	movs	r1, #0
 8002c7e:	2000      	movs	r0, #0
 8002c80:	f00a fb7e 	bl	800d380 <tcpip_init>

  /* Initialize the LwIP stack */
  netif_config();
 8002c84:	f000 f886 	bl	8002d94 <netif_config>
#endif
#ifdef LWIP_IPERF_SERVER
  lwiperf_start_tcp_server_default(lwip_iperf_results,0);
#endif

  if (use_dhcp_client) {
 8002c88:	4b0b      	ldr	r3, [pc, #44]	; (8002cb8 <lwip_start_task_entry+0x44>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d00d      	beq.n	8002cac <lwip_start_task_entry+0x38>
    /* Start DHCP Client */
    osThreadDef(DHCP, dhcpclient_start, osPriorityLow, 0, configMINIMAL_STACK_SIZE * 2);
 8002c90:	4b0a      	ldr	r3, [pc, #40]	; (8002cbc <lwip_start_task_entry+0x48>)
 8002c92:	f107 040c 	add.w	r4, r7, #12
 8002c96:	461d      	mov	r5, r3
 8002c98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c9c:	682b      	ldr	r3, [r5, #0]
 8002c9e:	6023      	str	r3, [r4, #0]
    osThreadCreate (osThread(DHCP), &sta_netif);
 8002ca0:	f107 030c 	add.w	r3, r7, #12
 8002ca4:	4906      	ldr	r1, [pc, #24]	; (8002cc0 <lwip_start_task_entry+0x4c>)
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f006 fdb5 	bl	8009816 <osThreadCreate>
  }

  wifi_autoconnexion_init();
 8002cac:	f7fe fb2a 	bl	8001304 <wifi_autoconnexion_init>

	while(1) {
    /* Delete the Init Thread */
    osThreadTerminate(NULL);
 8002cb0:	2000      	movs	r0, #0
 8002cb2:	f006 fdd7 	bl	8009864 <osThreadTerminate>
 8002cb6:	e7fb      	b.n	8002cb0 <lwip_start_task_entry+0x3c>
 8002cb8:	20000094 	.word	0x20000094
 8002cbc:	0801d2d8 	.word	0x0801d2d8
 8002cc0:	2000084c 	.word	0x2000084c

08002cc4 <lwip_set_sta_link_up>:
 *    none
 *
 * @return
 *    none
 ******************************************************************************/
void lwip_set_sta_link_up (void) {
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	af00      	add	r7, sp, #0
  netifapi_netif_set_up(&sta_netif);
 8002cc8:	2200      	movs	r2, #0
 8002cca:	4909      	ldr	r1, [pc, #36]	; (8002cf0 <lwip_set_sta_link_up+0x2c>)
 8002ccc:	4809      	ldr	r0, [pc, #36]	; (8002cf4 <lwip_set_sta_link_up+0x30>)
 8002cce:	f00a f993 	bl	800cff8 <netifapi_netif_common>
  netifapi_netif_set_link_up(&sta_netif);
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	4908      	ldr	r1, [pc, #32]	; (8002cf8 <lwip_set_sta_link_up+0x34>)
 8002cd6:	4807      	ldr	r0, [pc, #28]	; (8002cf4 <lwip_set_sta_link_up+0x30>)
 8002cd8:	f00a f98e 	bl	800cff8 <netifapi_netif_common>
  if (use_dhcp_client) {
 8002cdc:	4b07      	ldr	r3, [pc, #28]	; (8002cfc <lwip_set_sta_link_up+0x38>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d002      	beq.n	8002cea <lwip_set_sta_link_up+0x26>
    dhcpclient_set_link_state(1);
 8002ce4:	2001      	movs	r0, #1
 8002ce6:	f7fe fbf9 	bl	80014dc <dhcpclient_set_link_state>
  }
}
 8002cea:	bf00      	nop
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	0800e50d 	.word	0x0800e50d
 8002cf4:	2000084c 	.word	0x2000084c
 8002cf8:	0800e649 	.word	0x0800e649
 8002cfc:	20000094 	.word	0x20000094

08002d00 <lwip_set_sta_link_down>:
 *    none
 *
 * @return
 *    none
******************************************************************************/
void lwip_set_sta_link_down (void) {
 8002d00:	b580      	push	{r7, lr}
 8002d02:	af00      	add	r7, sp, #0
  if (use_dhcp_client) {
 8002d04:	4b09      	ldr	r3, [pc, #36]	; (8002d2c <lwip_set_sta_link_down+0x2c>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d002      	beq.n	8002d12 <lwip_set_sta_link_down+0x12>
    dhcpclient_set_link_state(0);
 8002d0c:	2000      	movs	r0, #0
 8002d0e:	f7fe fbe5 	bl	80014dc <dhcpclient_set_link_state>
  }
  netifapi_netif_set_link_down(&sta_netif);
 8002d12:	2200      	movs	r2, #0
 8002d14:	4906      	ldr	r1, [pc, #24]	; (8002d30 <lwip_set_sta_link_down+0x30>)
 8002d16:	4807      	ldr	r0, [pc, #28]	; (8002d34 <lwip_set_sta_link_down+0x34>)
 8002d18:	f00a f96e 	bl	800cff8 <netifapi_netif_common>
  netifapi_netif_set_down(&sta_netif);
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	4906      	ldr	r1, [pc, #24]	; (8002d38 <lwip_set_sta_link_down+0x38>)
 8002d20:	4804      	ldr	r0, [pc, #16]	; (8002d34 <lwip_set_sta_link_down+0x34>)
 8002d22:	f00a f969 	bl	800cff8 <netifapi_netif_common>
}
 8002d26:	bf00      	nop
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	20000094 	.word	0x20000094
 8002d30:	0800e6b9 	.word	0x0800e6b9
 8002d34:	2000084c 	.word	0x2000084c
 8002d38:	0800e5e5 	.word	0x0800e5e5

08002d3c <lwip_set_ap_link_up>:
 *    none
 *
 * @return
 *    none
 ******************************************************************************/
void lwip_set_ap_link_up (void) {
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	af00      	add	r7, sp, #0
  netifapi_netif_set_up(&ap_netif);
 8002d40:	2200      	movs	r2, #0
 8002d42:	4906      	ldr	r1, [pc, #24]	; (8002d5c <lwip_set_ap_link_up+0x20>)
 8002d44:	4806      	ldr	r0, [pc, #24]	; (8002d60 <lwip_set_ap_link_up+0x24>)
 8002d46:	f00a f957 	bl	800cff8 <netifapi_netif_common>
  netifapi_netif_set_link_up(&ap_netif);
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	4905      	ldr	r1, [pc, #20]	; (8002d64 <lwip_set_ap_link_up+0x28>)
 8002d4e:	4804      	ldr	r0, [pc, #16]	; (8002d60 <lwip_set_ap_link_up+0x24>)
 8002d50:	f00a f952 	bl	800cff8 <netifapi_netif_common>
  dhcpserver_start();
 8002d54:	f7ff fdfe 	bl	8002954 <dhcpserver_start>
}
 8002d58:	bf00      	nop
 8002d5a:	bd80      	pop	{r7, pc}
 8002d5c:	0800e50d 	.word	0x0800e50d
 8002d60:	20000884 	.word	0x20000884
 8002d64:	0800e649 	.word	0x0800e649

08002d68 <lwip_set_ap_link_down>:
 *    none
 *
 * @return
 *    none
 ******************************************************************************/
void lwip_set_ap_link_down (void) {
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	af00      	add	r7, sp, #0
  dhcpserver_stop();
 8002d6c:	f7ff fe18 	bl	80029a0 <dhcpserver_stop>
  netifapi_netif_set_link_down(&ap_netif);
 8002d70:	2200      	movs	r2, #0
 8002d72:	4905      	ldr	r1, [pc, #20]	; (8002d88 <lwip_set_ap_link_down+0x20>)
 8002d74:	4805      	ldr	r0, [pc, #20]	; (8002d8c <lwip_set_ap_link_down+0x24>)
 8002d76:	f00a f93f 	bl	800cff8 <netifapi_netif_common>
  netifapi_netif_set_down(&ap_netif);
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	4904      	ldr	r1, [pc, #16]	; (8002d90 <lwip_set_ap_link_down+0x28>)
 8002d7e:	4803      	ldr	r0, [pc, #12]	; (8002d8c <lwip_set_ap_link_down+0x24>)
 8002d80:	f00a f93a 	bl	800cff8 <netifapi_netif_common>
}
 8002d84:	bf00      	nop
 8002d86:	bd80      	pop	{r7, pc}
 8002d88:	0800e6b9 	.word	0x0800e6b9
 8002d8c:	20000884 	.word	0x20000884
 8002d90:	0800e5e5 	.word	0x0800e5e5

08002d94 <netif_config>:
 *    none
 *
 * @return
*    0: initialization success, -1: an error occurred
 ******************************************************************************/
static int netif_config(void) {
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b08a      	sub	sp, #40	; 0x28
 8002d98:	af04      	add	r7, sp, #16
  sl_status_t status;
  ip_addr_t sta_ipaddr;
  ip_addr_t sta_netmask;
  ip_addr_t sta_gw;
  int res = -1;
 8002d9a:	f04f 33ff 	mov.w	r3, #4294967295
 8002d9e:	617b      	str	r3, [r7, #20]
  /* Initialize the Station information */
  if (use_dhcp_client) {
 8002da0:	4b9e      	ldr	r3, [pc, #632]	; (800301c <netif_config+0x288>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d006      	beq.n	8002db6 <netif_config+0x22>
    ip_addr_set_zero_ip4(&sta_ipaddr);
 8002da8:	2300      	movs	r3, #0
 8002daa:	60fb      	str	r3, [r7, #12]
    ip_addr_set_zero_ip4(&sta_netmask);
 8002dac:	2300      	movs	r3, #0
 8002dae:	60bb      	str	r3, [r7, #8]
    ip_addr_set_zero_ip4(&sta_gw);
 8002db0:	2300      	movs	r3, #0
 8002db2:	607b      	str	r3, [r7, #4]
 8002db4:	e0cb      	b.n	8002f4e <netif_config+0x1ba>
  } else {
    IP_ADDR4(&sta_ipaddr,sta_ip_addr0,sta_ip_addr1,sta_ip_addr2,sta_ip_addr3);
 8002db6:	4b9a      	ldr	r3, [pc, #616]	; (8003020 <netif_config+0x28c>)
 8002db8:	781b      	ldrb	r3, [r3, #0]
 8002dba:	061a      	lsls	r2, r3, #24
 8002dbc:	4b99      	ldr	r3, [pc, #612]	; (8003024 <netif_config+0x290>)
 8002dbe:	781b      	ldrb	r3, [r3, #0]
 8002dc0:	041b      	lsls	r3, r3, #16
 8002dc2:	431a      	orrs	r2, r3
 8002dc4:	4b98      	ldr	r3, [pc, #608]	; (8003028 <netif_config+0x294>)
 8002dc6:	781b      	ldrb	r3, [r3, #0]
 8002dc8:	021b      	lsls	r3, r3, #8
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	4a97      	ldr	r2, [pc, #604]	; (800302c <netif_config+0x298>)
 8002dce:	7812      	ldrb	r2, [r2, #0]
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	061a      	lsls	r2, r3, #24
 8002dd4:	4b92      	ldr	r3, [pc, #584]	; (8003020 <netif_config+0x28c>)
 8002dd6:	781b      	ldrb	r3, [r3, #0]
 8002dd8:	0619      	lsls	r1, r3, #24
 8002dda:	4b92      	ldr	r3, [pc, #584]	; (8003024 <netif_config+0x290>)
 8002ddc:	781b      	ldrb	r3, [r3, #0]
 8002dde:	041b      	lsls	r3, r3, #16
 8002de0:	4319      	orrs	r1, r3
 8002de2:	4b91      	ldr	r3, [pc, #580]	; (8003028 <netif_config+0x294>)
 8002de4:	781b      	ldrb	r3, [r3, #0]
 8002de6:	021b      	lsls	r3, r3, #8
 8002de8:	430b      	orrs	r3, r1
 8002dea:	4990      	ldr	r1, [pc, #576]	; (800302c <netif_config+0x298>)
 8002dec:	7809      	ldrb	r1, [r1, #0]
 8002dee:	430b      	orrs	r3, r1
 8002df0:	021b      	lsls	r3, r3, #8
 8002df2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002df6:	431a      	orrs	r2, r3
 8002df8:	4b89      	ldr	r3, [pc, #548]	; (8003020 <netif_config+0x28c>)
 8002dfa:	781b      	ldrb	r3, [r3, #0]
 8002dfc:	0619      	lsls	r1, r3, #24
 8002dfe:	4b89      	ldr	r3, [pc, #548]	; (8003024 <netif_config+0x290>)
 8002e00:	781b      	ldrb	r3, [r3, #0]
 8002e02:	041b      	lsls	r3, r3, #16
 8002e04:	4319      	orrs	r1, r3
 8002e06:	4b88      	ldr	r3, [pc, #544]	; (8003028 <netif_config+0x294>)
 8002e08:	781b      	ldrb	r3, [r3, #0]
 8002e0a:	021b      	lsls	r3, r3, #8
 8002e0c:	430b      	orrs	r3, r1
 8002e0e:	4987      	ldr	r1, [pc, #540]	; (800302c <netif_config+0x298>)
 8002e10:	7809      	ldrb	r1, [r1, #0]
 8002e12:	430b      	orrs	r3, r1
 8002e14:	0a1b      	lsrs	r3, r3, #8
 8002e16:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002e1a:	431a      	orrs	r2, r3
 8002e1c:	4b80      	ldr	r3, [pc, #512]	; (8003020 <netif_config+0x28c>)
 8002e1e:	781b      	ldrb	r3, [r3, #0]
 8002e20:	0619      	lsls	r1, r3, #24
 8002e22:	4b80      	ldr	r3, [pc, #512]	; (8003024 <netif_config+0x290>)
 8002e24:	781b      	ldrb	r3, [r3, #0]
 8002e26:	041b      	lsls	r3, r3, #16
 8002e28:	4319      	orrs	r1, r3
 8002e2a:	4b7f      	ldr	r3, [pc, #508]	; (8003028 <netif_config+0x294>)
 8002e2c:	781b      	ldrb	r3, [r3, #0]
 8002e2e:	021b      	lsls	r3, r3, #8
 8002e30:	430b      	orrs	r3, r1
 8002e32:	497e      	ldr	r1, [pc, #504]	; (800302c <netif_config+0x298>)
 8002e34:	7809      	ldrb	r1, [r1, #0]
 8002e36:	430b      	orrs	r3, r1
 8002e38:	0e1b      	lsrs	r3, r3, #24
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	60fb      	str	r3, [r7, #12]
    IP_ADDR4(&sta_netmask,sta_netmask_addr0,sta_netmask_addr1,sta_netmask_addr2,sta_netmask_addr3);
 8002e3e:	4b7c      	ldr	r3, [pc, #496]	; (8003030 <netif_config+0x29c>)
 8002e40:	781b      	ldrb	r3, [r3, #0]
 8002e42:	061a      	lsls	r2, r3, #24
 8002e44:	4b7b      	ldr	r3, [pc, #492]	; (8003034 <netif_config+0x2a0>)
 8002e46:	781b      	ldrb	r3, [r3, #0]
 8002e48:	041b      	lsls	r3, r3, #16
 8002e4a:	431a      	orrs	r2, r3
 8002e4c:	4b7a      	ldr	r3, [pc, #488]	; (8003038 <netif_config+0x2a4>)
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	021b      	lsls	r3, r3, #8
 8002e52:	4313      	orrs	r3, r2
 8002e54:	4a79      	ldr	r2, [pc, #484]	; (800303c <netif_config+0x2a8>)
 8002e56:	7812      	ldrb	r2, [r2, #0]
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	061a      	lsls	r2, r3, #24
 8002e5c:	4b74      	ldr	r3, [pc, #464]	; (8003030 <netif_config+0x29c>)
 8002e5e:	781b      	ldrb	r3, [r3, #0]
 8002e60:	0619      	lsls	r1, r3, #24
 8002e62:	4b74      	ldr	r3, [pc, #464]	; (8003034 <netif_config+0x2a0>)
 8002e64:	781b      	ldrb	r3, [r3, #0]
 8002e66:	041b      	lsls	r3, r3, #16
 8002e68:	4319      	orrs	r1, r3
 8002e6a:	4b73      	ldr	r3, [pc, #460]	; (8003038 <netif_config+0x2a4>)
 8002e6c:	781b      	ldrb	r3, [r3, #0]
 8002e6e:	021b      	lsls	r3, r3, #8
 8002e70:	430b      	orrs	r3, r1
 8002e72:	4972      	ldr	r1, [pc, #456]	; (800303c <netif_config+0x2a8>)
 8002e74:	7809      	ldrb	r1, [r1, #0]
 8002e76:	430b      	orrs	r3, r1
 8002e78:	021b      	lsls	r3, r3, #8
 8002e7a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002e7e:	431a      	orrs	r2, r3
 8002e80:	4b6b      	ldr	r3, [pc, #428]	; (8003030 <netif_config+0x29c>)
 8002e82:	781b      	ldrb	r3, [r3, #0]
 8002e84:	0619      	lsls	r1, r3, #24
 8002e86:	4b6b      	ldr	r3, [pc, #428]	; (8003034 <netif_config+0x2a0>)
 8002e88:	781b      	ldrb	r3, [r3, #0]
 8002e8a:	041b      	lsls	r3, r3, #16
 8002e8c:	4319      	orrs	r1, r3
 8002e8e:	4b6a      	ldr	r3, [pc, #424]	; (8003038 <netif_config+0x2a4>)
 8002e90:	781b      	ldrb	r3, [r3, #0]
 8002e92:	021b      	lsls	r3, r3, #8
 8002e94:	430b      	orrs	r3, r1
 8002e96:	4969      	ldr	r1, [pc, #420]	; (800303c <netif_config+0x2a8>)
 8002e98:	7809      	ldrb	r1, [r1, #0]
 8002e9a:	430b      	orrs	r3, r1
 8002e9c:	0a1b      	lsrs	r3, r3, #8
 8002e9e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002ea2:	431a      	orrs	r2, r3
 8002ea4:	4b62      	ldr	r3, [pc, #392]	; (8003030 <netif_config+0x29c>)
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	0619      	lsls	r1, r3, #24
 8002eaa:	4b62      	ldr	r3, [pc, #392]	; (8003034 <netif_config+0x2a0>)
 8002eac:	781b      	ldrb	r3, [r3, #0]
 8002eae:	041b      	lsls	r3, r3, #16
 8002eb0:	4319      	orrs	r1, r3
 8002eb2:	4b61      	ldr	r3, [pc, #388]	; (8003038 <netif_config+0x2a4>)
 8002eb4:	781b      	ldrb	r3, [r3, #0]
 8002eb6:	021b      	lsls	r3, r3, #8
 8002eb8:	430b      	orrs	r3, r1
 8002eba:	4960      	ldr	r1, [pc, #384]	; (800303c <netif_config+0x2a8>)
 8002ebc:	7809      	ldrb	r1, [r1, #0]
 8002ebe:	430b      	orrs	r3, r1
 8002ec0:	0e1b      	lsrs	r3, r3, #24
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	60bb      	str	r3, [r7, #8]
    IP_ADDR4(&sta_gw,sta_gw_addr0,sta_gw_addr1,sta_gw_addr2,sta_gw_addr3);
 8002ec6:	4b5e      	ldr	r3, [pc, #376]	; (8003040 <netif_config+0x2ac>)
 8002ec8:	781b      	ldrb	r3, [r3, #0]
 8002eca:	061a      	lsls	r2, r3, #24
 8002ecc:	4b5d      	ldr	r3, [pc, #372]	; (8003044 <netif_config+0x2b0>)
 8002ece:	781b      	ldrb	r3, [r3, #0]
 8002ed0:	041b      	lsls	r3, r3, #16
 8002ed2:	431a      	orrs	r2, r3
 8002ed4:	4b5c      	ldr	r3, [pc, #368]	; (8003048 <netif_config+0x2b4>)
 8002ed6:	781b      	ldrb	r3, [r3, #0]
 8002ed8:	021b      	lsls	r3, r3, #8
 8002eda:	4313      	orrs	r3, r2
 8002edc:	4a5b      	ldr	r2, [pc, #364]	; (800304c <netif_config+0x2b8>)
 8002ede:	7812      	ldrb	r2, [r2, #0]
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	061a      	lsls	r2, r3, #24
 8002ee4:	4b56      	ldr	r3, [pc, #344]	; (8003040 <netif_config+0x2ac>)
 8002ee6:	781b      	ldrb	r3, [r3, #0]
 8002ee8:	0619      	lsls	r1, r3, #24
 8002eea:	4b56      	ldr	r3, [pc, #344]	; (8003044 <netif_config+0x2b0>)
 8002eec:	781b      	ldrb	r3, [r3, #0]
 8002eee:	041b      	lsls	r3, r3, #16
 8002ef0:	4319      	orrs	r1, r3
 8002ef2:	4b55      	ldr	r3, [pc, #340]	; (8003048 <netif_config+0x2b4>)
 8002ef4:	781b      	ldrb	r3, [r3, #0]
 8002ef6:	021b      	lsls	r3, r3, #8
 8002ef8:	430b      	orrs	r3, r1
 8002efa:	4954      	ldr	r1, [pc, #336]	; (800304c <netif_config+0x2b8>)
 8002efc:	7809      	ldrb	r1, [r1, #0]
 8002efe:	430b      	orrs	r3, r1
 8002f00:	021b      	lsls	r3, r3, #8
 8002f02:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002f06:	431a      	orrs	r2, r3
 8002f08:	4b4d      	ldr	r3, [pc, #308]	; (8003040 <netif_config+0x2ac>)
 8002f0a:	781b      	ldrb	r3, [r3, #0]
 8002f0c:	0619      	lsls	r1, r3, #24
 8002f0e:	4b4d      	ldr	r3, [pc, #308]	; (8003044 <netif_config+0x2b0>)
 8002f10:	781b      	ldrb	r3, [r3, #0]
 8002f12:	041b      	lsls	r3, r3, #16
 8002f14:	4319      	orrs	r1, r3
 8002f16:	4b4c      	ldr	r3, [pc, #304]	; (8003048 <netif_config+0x2b4>)
 8002f18:	781b      	ldrb	r3, [r3, #0]
 8002f1a:	021b      	lsls	r3, r3, #8
 8002f1c:	430b      	orrs	r3, r1
 8002f1e:	494b      	ldr	r1, [pc, #300]	; (800304c <netif_config+0x2b8>)
 8002f20:	7809      	ldrb	r1, [r1, #0]
 8002f22:	430b      	orrs	r3, r1
 8002f24:	0a1b      	lsrs	r3, r3, #8
 8002f26:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002f2a:	431a      	orrs	r2, r3
 8002f2c:	4b44      	ldr	r3, [pc, #272]	; (8003040 <netif_config+0x2ac>)
 8002f2e:	781b      	ldrb	r3, [r3, #0]
 8002f30:	0619      	lsls	r1, r3, #24
 8002f32:	4b44      	ldr	r3, [pc, #272]	; (8003044 <netif_config+0x2b0>)
 8002f34:	781b      	ldrb	r3, [r3, #0]
 8002f36:	041b      	lsls	r3, r3, #16
 8002f38:	4319      	orrs	r1, r3
 8002f3a:	4b43      	ldr	r3, [pc, #268]	; (8003048 <netif_config+0x2b4>)
 8002f3c:	781b      	ldrb	r3, [r3, #0]
 8002f3e:	021b      	lsls	r3, r3, #8
 8002f40:	430b      	orrs	r3, r1
 8002f42:	4942      	ldr	r1, [pc, #264]	; (800304c <netif_config+0x2b8>)
 8002f44:	7809      	ldrb	r1, [r1, #0]
 8002f46:	430b      	orrs	r3, r1
 8002f48:	0e1b      	lsrs	r3, r3, #24
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	607b      	str	r3, [r7, #4]
  }


  /* Initialize the WF200 used by the two interfaces */
  status = sl_wfx_init(&wifi_context);
 8002f4e:	4840      	ldr	r0, [pc, #256]	; (8003050 <netif_config+0x2bc>)
 8002f50:	f004 faa2 	bl	8007498 <sl_wfx_init>
 8002f54:	6138      	str	r0, [r7, #16]
  switch (status) {
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	f640 3202 	movw	r2, #2818	; 0xb02
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d034      	beq.n	8002fca <netif_config+0x236>
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	f640 3202 	movw	r2, #2818	; 0xb02
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d83b      	bhi.n	8002fe2 <netif_config+0x24e>
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	f640 3201 	movw	r2, #2817	; 0xb01
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d026      	beq.n	8002fc2 <netif_config+0x22e>
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	f640 3201 	movw	r2, #2817	; 0xb01
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d831      	bhi.n	8002fe2 <netif_config+0x24e>
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	2b07      	cmp	r3, #7
 8002f82:	d026      	beq.n	8002fd2 <netif_config+0x23e>
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	2b07      	cmp	r3, #7
 8002f88:	d82b      	bhi.n	8002fe2 <netif_config+0x24e>
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d003      	beq.n	8002f98 <netif_config+0x204>
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d021      	beq.n	8002fda <netif_config+0x246>
 8002f96:	e024      	b.n	8002fe2 <netif_config+0x24e>
  case SL_STATUS_OK:
    wifi_context.state = SL_WFX_STARTED;
 8002f98:	4b2d      	ldr	r3, [pc, #180]	; (8003050 <netif_config+0x2bc>)
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222
    printf("WF200 initialization successful V%d.%d.%d\r\n", wifi_context.firmware_major,
 8002fa0:	4b2b      	ldr	r3, [pc, #172]	; (8003050 <netif_config+0x2bc>)
 8002fa2:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8002fa6:	4619      	mov	r1, r3
    		wifi_context.firmware_minor,
 8002fa8:	4b29      	ldr	r3, [pc, #164]	; (8003050 <netif_config+0x2bc>)
 8002faa:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
    printf("WF200 initialization successful V%d.%d.%d\r\n", wifi_context.firmware_major,
 8002fae:	461a      	mov	r2, r3
			wifi_context.firmware_build);
 8002fb0:	4b27      	ldr	r3, [pc, #156]	; (8003050 <netif_config+0x2bc>)
 8002fb2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
    printf("WF200 initialization successful V%d.%d.%d\r\n", wifi_context.firmware_major,
 8002fb6:	4827      	ldr	r0, [pc, #156]	; (8003054 <netif_config+0x2c0>)
 8002fb8:	f017 ff0a 	bl	801add0 <iprintf>
    res = 0;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	617b      	str	r3, [r7, #20]
    break;
 8002fc0:	e012      	b.n	8002fe8 <netif_config+0x254>
  case SL_STATUS_WIFI_INVALID_KEY:
    printf("Failed to init WF200: Firmware keyset invalid\r\n");
 8002fc2:	4825      	ldr	r0, [pc, #148]	; (8003058 <netif_config+0x2c4>)
 8002fc4:	f017 ff8a 	bl	801aedc <puts>
    break;
 8002fc8:	e00e      	b.n	8002fe8 <netif_config+0x254>
  case SL_STATUS_WIFI_FIRMWARE_DOWNLOAD_TIMEOUT:
    printf("Failed to init WF200: Firmware download timeout\r\n");
 8002fca:	4824      	ldr	r0, [pc, #144]	; (800305c <netif_config+0x2c8>)
 8002fcc:	f017 ff86 	bl	801aedc <puts>
    break;
 8002fd0:	e00a      	b.n	8002fe8 <netif_config+0x254>
  case SL_STATUS_TIMEOUT:
    printf("Failed to init WF200: Poll for value timeout\r\n");
 8002fd2:	4823      	ldr	r0, [pc, #140]	; (8003060 <netif_config+0x2cc>)
 8002fd4:	f017 ff82 	bl	801aedc <puts>
    break;
 8002fd8:	e006      	b.n	8002fe8 <netif_config+0x254>
  case SL_STATUS_FAIL:
    printf("Failed to init WF200: Error\r\n");
 8002fda:	4822      	ldr	r0, [pc, #136]	; (8003064 <netif_config+0x2d0>)
 8002fdc:	f017 ff7e 	bl	801aedc <puts>
    break;
 8002fe0:	e002      	b.n	8002fe8 <netif_config+0x254>
  default :
    printf("Failed to init WF200: Unknown error\r\n");
 8002fe2:	4821      	ldr	r0, [pc, #132]	; (8003068 <netif_config+0x2d4>)
 8002fe4:	f017 ff7a 	bl	801aedc <puts>
  }

  if (res == 0) {
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d110      	bne.n	8003010 <netif_config+0x27c>
    /* Add station and softAP interfaces */
    netif_add(&sta_netif, &sta_ipaddr, &sta_netmask, &sta_gw, NULL, &sta_ethernetif_init, &tcpip_input);
 8002fee:	1d3b      	adds	r3, r7, #4
 8002ff0:	f107 0208 	add.w	r2, r7, #8
 8002ff4:	f107 010c 	add.w	r1, r7, #12
 8002ff8:	481c      	ldr	r0, [pc, #112]	; (800306c <netif_config+0x2d8>)
 8002ffa:	9002      	str	r0, [sp, #8]
 8002ffc:	481c      	ldr	r0, [pc, #112]	; (8003070 <netif_config+0x2dc>)
 8002ffe:	9001      	str	r0, [sp, #4]
 8003000:	2000      	movs	r0, #0
 8003002:	9000      	str	r0, [sp, #0]
 8003004:	481b      	ldr	r0, [pc, #108]	; (8003074 <netif_config+0x2e0>)
 8003006:	f00b f8b7 	bl	800e178 <netif_add>
    //netif_add(&ap_netif, &ap_ipaddr, &ap_netmask, &ap_gw, NULL, &ap_ethernetif_init, &tcpip_input);

    /* Registers the default network interface */
    netif_set_default(&sta_netif);
 800300a:	481a      	ldr	r0, [pc, #104]	; (8003074 <netif_config+0x2e0>)
 800300c:	f00b fa6e 	bl	800e4ec <netif_set_default>
  wifi_cli_cfg_dialog();
#else
  //sl_wfx_start_ap_command(softap_channel, (uint8_t*) softap_ssid, strlen(softap_ssid), 0, 0, softap_security, 0, (uint8_t*) softap_passkey, strlen(softap_passkey), NULL, 0, NULL, 0);
#endif
  
  return res;
 8003010:	697b      	ldr	r3, [r7, #20]
}
 8003012:	4618      	mov	r0, r3
 8003014:	3718      	adds	r7, #24
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	20000094 	.word	0x20000094
 8003020:	20000098 	.word	0x20000098
 8003024:	20000099 	.word	0x20000099
 8003028:	200008ee 	.word	0x200008ee
 800302c:	2000009a 	.word	0x2000009a
 8003030:	2000009b 	.word	0x2000009b
 8003034:	2000009c 	.word	0x2000009c
 8003038:	2000009d 	.word	0x2000009d
 800303c:	200008ef 	.word	0x200008ef
 8003040:	200008f0 	.word	0x200008f0
 8003044:	200008f1 	.word	0x200008f1
 8003048:	200008f2 	.word	0x200008f2
 800304c:	200008f3 	.word	0x200008f3
 8003050:	20000628 	.word	0x20000628
 8003054:	0801d2ec 	.word	0x0801d2ec
 8003058:	0801d318 	.word	0x0801d318
 800305c:	0801d348 	.word	0x0801d348
 8003060:	0801d37c 	.word	0x0801d37c
 8003064:	0801d3ac 	.word	0x0801d3ac
 8003068:	0801d3cc 	.word	0x0801d3cc
 800306c:	0800d221 	.word	0x0800d221
 8003070:	08002c09 	.word	0x08002c09
 8003074:	2000084c 	.word	0x2000084c

08003078 <lwip_start>:
 *    none
 *
 * @return
 *    none
 ******************************************************************************/
void lwip_start (void) {
 8003078:	b5b0      	push	{r4, r5, r7, lr}
 800307a:	b086      	sub	sp, #24
 800307c:	af00      	add	r7, sp, #0
  osThreadDef(lwip_start, lwip_start_task_entry, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*5);
 800307e:	4b08      	ldr	r3, [pc, #32]	; (80030a0 <lwip_start+0x28>)
 8003080:	1d3c      	adds	r4, r7, #4
 8003082:	461d      	mov	r5, r3
 8003084:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003086:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003088:	682b      	ldr	r3, [r5, #0]
 800308a:	6023      	str	r3, [r4, #0]
  osThreadCreate(osThread(lwip_start), NULL);
 800308c:	1d3b      	adds	r3, r7, #4
 800308e:	2100      	movs	r1, #0
 8003090:	4618      	mov	r0, r3
 8003092:	f006 fbc0 	bl	8009816 <osThreadCreate>
}
 8003096:	bf00      	nop
 8003098:	3718      	adds	r7, #24
 800309a:	46bd      	mov	sp, r7
 800309c:	bdb0      	pop	{r4, r5, r7, pc}
 800309e:	bf00      	nop
 80030a0:	0801d3f4 	.word	0x0801d3f4

080030a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	af00      	add	r7, sp, #0
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80030a8:	f000 fe5c 	bl	8003d64 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 80030ac:	f000 f820 	bl	80030f0 <SystemClock_Config>

    /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80030b0:	f000 f91a 	bl	80032e8 <MX_GPIO_Init>
  MX_DMA_Init();
 80030b4:	f000 f8f8 	bl	80032a8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80030b8:	f000 f8cc 	bl	8003254 <MX_USART2_UART_Init>
  //MX_SPI1_Init(); THIS WILL BE HANDLE BY THE SL_WFX_DRIVER --> SL_WFX_INIT()

  //THIS INIT TAKES CARE OF MOSI,MISO AND CLK GPIO
  MX_SPI4_Init();
 80030bc:	f000 f896 	bl	80031ec <MX_SPI4_Init>
  /* Clear the console and buffer */
  printf("\033\143");
 80030c0:	4808      	ldr	r0, [pc, #32]	; (80030e4 <main+0x40>)
 80030c2:	f017 fe85 	bl	801add0 <iprintf>
  printf("\033[3J");
 80030c6:	4808      	ldr	r0, [pc, #32]	; (80030e8 <main+0x44>)
 80030c8:	f017 fe82 	bl	801add0 <iprintf>
  printf("Hello, welcome to the WFM200 driver \r\n");
 80030cc:	4807      	ldr	r0, [pc, #28]	; (80030ec <main+0x48>)
 80030ce:	f017 ff05 	bl	801aedc <puts>


#ifndef spi_mode_only
  /* Task init */
//  vTraceEnable(TRC_START);
  sl_wfx_task_start();
 80030d2:	f006 fa87 	bl	80095e4 <sl_wfx_task_start>
  wifi_events_start();
 80030d6:	f006 f917 	bl	8009308 <wifi_events_start>
  //wifi_cli_start();					/*NOT GOING TO USE THE CLI SINCE THERE WILL NOT BE ANY USART CONNECTION*/
  lwip_start();
 80030da:	f7ff ffcd 	bl	8003078 <lwip_start>

#endif


  /* Start scheduler */
  osKernelStart();
 80030de:	f006 fb83 	bl	80097e8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80030e2:	e7fe      	b.n	80030e2 <main+0x3e>
 80030e4:	0801d408 	.word	0x0801d408
 80030e8:	0801d40c 	.word	0x0801d40c
 80030ec:	0801d414 	.word	0x0801d414

080030f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b094      	sub	sp, #80	; 0x50
 80030f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80030f6:	f107 0320 	add.w	r3, r7, #32
 80030fa:	2230      	movs	r2, #48	; 0x30
 80030fc:	2100      	movs	r1, #0
 80030fe:	4618      	mov	r0, r3
 8003100:	f017 f8fe 	bl	801a300 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003104:	f107 030c 	add.w	r3, r7, #12
 8003108:	2200      	movs	r2, #0
 800310a:	601a      	str	r2, [r3, #0]
 800310c:	605a      	str	r2, [r3, #4]
 800310e:	609a      	str	r2, [r3, #8]
 8003110:	60da      	str	r2, [r3, #12]
 8003112:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003114:	2300      	movs	r3, #0
 8003116:	60bb      	str	r3, [r7, #8]
 8003118:	4b31      	ldr	r3, [pc, #196]	; (80031e0 <SystemClock_Config+0xf0>)
 800311a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311c:	4a30      	ldr	r2, [pc, #192]	; (80031e0 <SystemClock_Config+0xf0>)
 800311e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003122:	6413      	str	r3, [r2, #64]	; 0x40
 8003124:	4b2e      	ldr	r3, [pc, #184]	; (80031e0 <SystemClock_Config+0xf0>)
 8003126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003128:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800312c:	60bb      	str	r3, [r7, #8]
 800312e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003130:	2300      	movs	r3, #0
 8003132:	607b      	str	r3, [r7, #4]
 8003134:	4b2b      	ldr	r3, [pc, #172]	; (80031e4 <SystemClock_Config+0xf4>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a2a      	ldr	r2, [pc, #168]	; (80031e4 <SystemClock_Config+0xf4>)
 800313a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800313e:	6013      	str	r3, [r2, #0]
 8003140:	4b28      	ldr	r3, [pc, #160]	; (80031e4 <SystemClock_Config+0xf4>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003148:	607b      	str	r3, [r7, #4]
 800314a:	687b      	ldr	r3, [r7, #4]
//  RCC_OscInitStruct.PLL.PLLN = 400;
//  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
//  RCC_OscInitStruct.PLL.PLLQ = 4;

  //SETUP FOR 96MHz
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800314c:	2301      	movs	r3, #1
 800314e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8003150:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8003154:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003156:	2302      	movs	r3, #2
 8003158:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800315a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800315e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003160:	2308      	movs	r3, #8
 8003162:	643b      	str	r3, [r7, #64]	; 0x40
//  RCC_OscInitStruct.PLL.PLLN = 280; //70MHz
//  RCC_OscInitStruct.PLL.PLLN = 260; //65MHz
//  RCC_OscInitStruct.PLL.PLLN = 240; //60MHz
//  RCC_OscInitStruct.PLL.PLLN = 200; //55MHz

  RCC_OscInitStruct.PLL.PLLN = 400;
 8003164:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8003168:	647b      	str	r3, [r7, #68]	; 0x44

  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800316a:	2304      	movs	r3, #4
 800316c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 800316e:	2308      	movs	r3, #8
 8003170:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003172:	f107 0320 	add.w	r3, r7, #32
 8003176:	4618      	mov	r0, r3
 8003178:	f001 fe80 	bl	8004e7c <HAL_RCC_OscConfig>
 800317c:	4603      	mov	r3, r0
 800317e:	2b00      	cmp	r3, #0
 8003180:	d001      	beq.n	8003186 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8003182:	f000 f9a1 	bl	80034c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003186:	230f      	movs	r3, #15
 8003188:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800318a:	2302      	movs	r3, #2
 800318c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800318e:	2300      	movs	r3, #0
 8003190:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003192:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003196:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003198:	2300      	movs	r3, #0
 800319a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800319c:	f107 030c 	add.w	r3, r7, #12
 80031a0:	2103      	movs	r1, #3
 80031a2:	4618      	mov	r0, r3
 80031a4:	f002 f8e2 	bl	800536c <HAL_RCC_ClockConfig>
 80031a8:	4603      	mov	r3, r0
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d001      	beq.n	80031b2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80031ae:	f000 f98b 	bl	80034c8 <Error_Handler>
  }

  /**Configure the Systick interrupt time*/
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80031b2:	f002 fac7 	bl	8005744 <HAL_RCC_GetHCLKFreq>
 80031b6:	4603      	mov	r3, r0
 80031b8:	4a0b      	ldr	r2, [pc, #44]	; (80031e8 <SystemClock_Config+0xf8>)
 80031ba:	fba2 2303 	umull	r2, r3, r2, r3
 80031be:	099b      	lsrs	r3, r3, #6
 80031c0:	4618      	mov	r0, r3
 80031c2:	f000 ff9c 	bl	80040fe <HAL_SYSTICK_Config>
	  /**Configure the Systick */
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80031c6:	2004      	movs	r0, #4
 80031c8:	f000 ffa6 	bl	8004118 <HAL_SYSTICK_CLKSourceConfig>
	/* SysTick_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 80031cc:	2200      	movs	r2, #0
 80031ce:	210f      	movs	r1, #15
 80031d0:	f04f 30ff 	mov.w	r0, #4294967295
 80031d4:	f000 ff5b 	bl	800408e <HAL_NVIC_SetPriority>

}
 80031d8:	bf00      	nop
 80031da:	3750      	adds	r7, #80	; 0x50
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}
 80031e0:	40023800 	.word	0x40023800
 80031e4:	40007000 	.word	0x40007000
 80031e8:	10624dd3 	.word	0x10624dd3

080031ec <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	af00      	add	r7, sp, #0

  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 80031f0:	4b16      	ldr	r3, [pc, #88]	; (800324c <MX_SPI4_Init+0x60>)
 80031f2:	4a17      	ldr	r2, [pc, #92]	; (8003250 <MX_SPI4_Init+0x64>)
 80031f4:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_SLAVE;
 80031f6:	4b15      	ldr	r3, [pc, #84]	; (800324c <MX_SPI4_Init+0x60>)
 80031f8:	2200      	movs	r2, #0
 80031fa:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80031fc:	4b13      	ldr	r3, [pc, #76]	; (800324c <MX_SPI4_Init+0x60>)
 80031fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003202:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_16BIT;
 8003204:	4b11      	ldr	r3, [pc, #68]	; (800324c <MX_SPI4_Init+0x60>)
 8003206:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800320a:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 800320c:	4b0f      	ldr	r3, [pc, #60]	; (800324c <MX_SPI4_Init+0x60>)
 800320e:	2200      	movs	r2, #0
 8003210:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003212:	4b0e      	ldr	r3, [pc, #56]	; (800324c <MX_SPI4_Init+0x60>)
 8003214:	2200      	movs	r2, #0
 8003216:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8003218:	4b0c      	ldr	r3, [pc, #48]	; (800324c <MX_SPI4_Init+0x60>)
 800321a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800321e:	619a      	str	r2, [r3, #24]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003220:	4b0a      	ldr	r3, [pc, #40]	; (800324c <MX_SPI4_Init+0x60>)
 8003222:	2200      	movs	r2, #0
 8003224:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8003226:	4b09      	ldr	r3, [pc, #36]	; (800324c <MX_SPI4_Init+0x60>)
 8003228:	2200      	movs	r2, #0
 800322a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800322c:	4b07      	ldr	r3, [pc, #28]	; (800324c <MX_SPI4_Init+0x60>)
 800322e:	2200      	movs	r2, #0
 8003230:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 8003232:	4b06      	ldr	r3, [pc, #24]	; (800324c <MX_SPI4_Init+0x60>)
 8003234:	220a      	movs	r2, #10
 8003236:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8003238:	4804      	ldr	r0, [pc, #16]	; (800324c <MX_SPI4_Init+0x60>)
 800323a:	f002 fab7 	bl	80057ac <HAL_SPI_Init>
 800323e:	4603      	mov	r3, r0
 8003240:	2b00      	cmp	r3, #0
 8003242:	d001      	beq.n	8003248 <MX_SPI4_Init+0x5c>
  {
	Error_Handler();
 8003244:	f000 f940 	bl	80034c8 <Error_Handler>
  }
}
 8003248:	bf00      	nop
 800324a:	bd80      	pop	{r7, pc}
 800324c:	2000093c 	.word	0x2000093c
 8003250:	40013400 	.word	0x40013400

08003254 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8003258:	4b11      	ldr	r3, [pc, #68]	; (80032a0 <MX_USART2_UART_Init+0x4c>)
 800325a:	4a12      	ldr	r2, [pc, #72]	; (80032a4 <MX_USART2_UART_Init+0x50>)
 800325c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 921600;
 800325e:	4b10      	ldr	r3, [pc, #64]	; (80032a0 <MX_USART2_UART_Init+0x4c>)
 8003260:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8003264:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003266:	4b0e      	ldr	r3, [pc, #56]	; (80032a0 <MX_USART2_UART_Init+0x4c>)
 8003268:	2200      	movs	r2, #0
 800326a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800326c:	4b0c      	ldr	r3, [pc, #48]	; (80032a0 <MX_USART2_UART_Init+0x4c>)
 800326e:	2200      	movs	r2, #0
 8003270:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003272:	4b0b      	ldr	r3, [pc, #44]	; (80032a0 <MX_USART2_UART_Init+0x4c>)
 8003274:	2200      	movs	r2, #0
 8003276:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003278:	4b09      	ldr	r3, [pc, #36]	; (80032a0 <MX_USART2_UART_Init+0x4c>)
 800327a:	220c      	movs	r2, #12
 800327c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800327e:	4b08      	ldr	r3, [pc, #32]	; (80032a0 <MX_USART2_UART_Init+0x4c>)
 8003280:	2200      	movs	r2, #0
 8003282:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003284:	4b06      	ldr	r3, [pc, #24]	; (80032a0 <MX_USART2_UART_Init+0x4c>)
 8003286:	2200      	movs	r2, #0
 8003288:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800328a:	4805      	ldr	r0, [pc, #20]	; (80032a0 <MX_USART2_UART_Init+0x4c>)
 800328c:	f003 faa6 	bl	80067dc <HAL_UART_Init>
 8003290:	4603      	mov	r3, r0
 8003292:	2b00      	cmp	r3, #0
 8003294:	d001      	beq.n	800329a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003296:	f000 f917 	bl	80034c8 <Error_Handler>
  }
}
 800329a:	bf00      	nop
 800329c:	bd80      	pop	{r7, pc}
 800329e:	bf00      	nop
 80032a0:	200008f8 	.word	0x200008f8
 80032a4:	40004400 	.word	0x40004400

080032a8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b082      	sub	sp, #8
 80032ac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80032ae:	2300      	movs	r3, #0
 80032b0:	607b      	str	r3, [r7, #4]
 80032b2:	4b0c      	ldr	r3, [pc, #48]	; (80032e4 <MX_DMA_Init+0x3c>)
 80032b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b6:	4a0b      	ldr	r2, [pc, #44]	; (80032e4 <MX_DMA_Init+0x3c>)
 80032b8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80032bc:	6313      	str	r3, [r2, #48]	; 0x30
 80032be:	4b09      	ldr	r3, [pc, #36]	; (80032e4 <MX_DMA_Init+0x3c>)
 80032c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032c6:	607b      	str	r3, [r7, #4]
 80032c8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */


  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80032ca:	2200      	movs	r2, #0
 80032cc:	2100      	movs	r1, #0
 80032ce:	203b      	movs	r0, #59	; 0x3b
 80032d0:	f000 fedd 	bl	800408e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80032d4:	203b      	movs	r0, #59	; 0x3b
 80032d6:	f000 fef6 	bl	80040c6 <HAL_NVIC_EnableIRQ>


}
 80032da:	bf00      	nop
 80032dc:	3708      	adds	r7, #8
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	bf00      	nop
 80032e4:	40023800 	.word	0x40023800

080032e8 <MX_GPIO_Init>:


//INIT THE WFM PINs THAT ARE NOT SPI RELATED
static void MX_GPIO_Init(void)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b08a      	sub	sp, #40	; 0x28
 80032ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032ee:	f107 0314 	add.w	r3, r7, #20
 80032f2:	2200      	movs	r2, #0
 80032f4:	601a      	str	r2, [r3, #0]
 80032f6:	605a      	str	r2, [r3, #4]
 80032f8:	609a      	str	r2, [r3, #8]
 80032fa:	60da      	str	r2, [r3, #12]
 80032fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80032fe:	2300      	movs	r3, #0
 8003300:	613b      	str	r3, [r7, #16]
 8003302:	4b64      	ldr	r3, [pc, #400]	; (8003494 <MX_GPIO_Init+0x1ac>)
 8003304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003306:	4a63      	ldr	r2, [pc, #396]	; (8003494 <MX_GPIO_Init+0x1ac>)
 8003308:	f043 0304 	orr.w	r3, r3, #4
 800330c:	6313      	str	r3, [r2, #48]	; 0x30
 800330e:	4b61      	ldr	r3, [pc, #388]	; (8003494 <MX_GPIO_Init+0x1ac>)
 8003310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003312:	f003 0304 	and.w	r3, r3, #4
 8003316:	613b      	str	r3, [r7, #16]
 8003318:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800331a:	2300      	movs	r3, #0
 800331c:	60fb      	str	r3, [r7, #12]
 800331e:	4b5d      	ldr	r3, [pc, #372]	; (8003494 <MX_GPIO_Init+0x1ac>)
 8003320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003322:	4a5c      	ldr	r2, [pc, #368]	; (8003494 <MX_GPIO_Init+0x1ac>)
 8003324:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003328:	6313      	str	r3, [r2, #48]	; 0x30
 800332a:	4b5a      	ldr	r3, [pc, #360]	; (8003494 <MX_GPIO_Init+0x1ac>)
 800332c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800332e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003332:	60fb      	str	r3, [r7, #12]
 8003334:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003336:	2300      	movs	r3, #0
 8003338:	60bb      	str	r3, [r7, #8]
 800333a:	4b56      	ldr	r3, [pc, #344]	; (8003494 <MX_GPIO_Init+0x1ac>)
 800333c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800333e:	4a55      	ldr	r2, [pc, #340]	; (8003494 <MX_GPIO_Init+0x1ac>)
 8003340:	f043 0301 	orr.w	r3, r3, #1
 8003344:	6313      	str	r3, [r2, #48]	; 0x30
 8003346:	4b53      	ldr	r3, [pc, #332]	; (8003494 <MX_GPIO_Init+0x1ac>)
 8003348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800334a:	f003 0301 	and.w	r3, r3, #1
 800334e:	60bb      	str	r3, [r7, #8]
 8003350:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003352:	2300      	movs	r3, #0
 8003354:	607b      	str	r3, [r7, #4]
 8003356:	4b4f      	ldr	r3, [pc, #316]	; (8003494 <MX_GPIO_Init+0x1ac>)
 8003358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800335a:	4a4e      	ldr	r2, [pc, #312]	; (8003494 <MX_GPIO_Init+0x1ac>)
 800335c:	f043 0302 	orr.w	r3, r3, #2
 8003360:	6313      	str	r3, [r2, #48]	; 0x30
 8003362:	4b4c      	ldr	r3, [pc, #304]	; (8003494 <MX_GPIO_Init+0x1ac>)
 8003364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003366:	f003 0302 	and.w	r3, r3, #2
 800336a:	607b      	str	r3, [r7, #4]
 800336c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WFM_NSS_GPIO_Port, WFM_NSS_Pin, GPIO_PIN_SET);
 800336e:	2201      	movs	r2, #1
 8003370:	2110      	movs	r1, #16
 8003372:	4849      	ldr	r0, [pc, #292]	; (8003498 <MX_GPIO_Init+0x1b0>)
 8003374:	f001 fd44 	bl	8004e00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WFM_RESET_GPIO_Port, WFM_RESET_Pin, GPIO_PIN_RESET);
 8003378:	2200      	movs	r2, #0
 800337a:	2101      	movs	r1, #1
 800337c:	4847      	ldr	r0, [pc, #284]	; (800349c <MX_GPIO_Init+0x1b4>)
 800337e:	f001 fd3f 	bl	8004e00 <HAL_GPIO_WritePin>

  //  /*Configure GPIO pin Output Level */
//  HAL_GPIO_WritePin(WFM_GPIO_WIRQ_Port, WFM_GPIO_WIRQ_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : WFM_NSS_Pin */
  GPIO_InitStruct.Pin = WFM_NSS_Pin;
 8003382:	2310      	movs	r3, #16
 8003384:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003386:	2301      	movs	r3, #1
 8003388:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800338a:	2300      	movs	r3, #0
 800338c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800338e:	2303      	movs	r3, #3
 8003390:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(WFM_NSS_GPIO_Port, &GPIO_InitStruct);
 8003392:	f107 0314 	add.w	r3, r7, #20
 8003396:	4619      	mov	r1, r3
 8003398:	483f      	ldr	r0, [pc, #252]	; (8003498 <MX_GPIO_Init+0x1b0>)
 800339a:	f001 fac9 	bl	8004930 <HAL_GPIO_Init>

  /*Configure GPIO pin : WFM_RESET_Pin */
  GPIO_InitStruct.Pin = WFM_RESET_Pin;
 800339e:	2301      	movs	r3, #1
 80033a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033a2:	2301      	movs	r3, #1
 80033a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033a6:	2300      	movs	r3, #0
 80033a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033aa:	2303      	movs	r3, #3
 80033ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(WFM_RESET_GPIO_Port, &GPIO_InitStruct);
 80033ae:	f107 0314 	add.w	r3, r7, #20
 80033b2:	4619      	mov	r1, r3
 80033b4:	4839      	ldr	r0, [pc, #228]	; (800349c <MX_GPIO_Init+0x1b4>)
 80033b6:	f001 fabb 	bl	8004930 <HAL_GPIO_Init>

  /*Configure GPIO pin : WFM_RESET_Pin */
   GPIO_InitStruct.Pin = WFM_WUP_Pin;
 80033ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80033be:	617b      	str	r3, [r7, #20]
   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033c0:	2301      	movs	r3, #1
 80033c2:	61bb      	str	r3, [r7, #24]
   GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033c4:	2300      	movs	r3, #0
 80033c6:	61fb      	str	r3, [r7, #28]
   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033c8:	2303      	movs	r3, #3
 80033ca:	623b      	str	r3, [r7, #32]
   HAL_GPIO_Init(WFM_WUP_GPIO_Port, &GPIO_InitStruct);
 80033cc:	f107 0314 	add.w	r3, r7, #20
 80033d0:	4619      	mov	r1, r3
 80033d2:	4833      	ldr	r0, [pc, #204]	; (80034a0 <MX_GPIO_Init+0x1b8>)
 80033d4:	f001 faac 	bl	8004930 <HAL_GPIO_Init>

  /*Configure GPIO pin : WFM_SPI_WIRQ_Pin */
  GPIO_InitStruct.Pin = WFM_SPI_WIRQ_Pin;
 80033d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80033dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80033de:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80033e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033e4:	2300      	movs	r3, #0
 80033e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(WFM_SPI_WIRQ_Port, &GPIO_InitStruct);
 80033e8:	f107 0314 	add.w	r3, r7, #20
 80033ec:	4619      	mov	r1, r3
 80033ee:	482c      	ldr	r0, [pc, #176]	; (80034a0 <MX_GPIO_Init+0x1b8>)
 80033f0:	f001 fa9e 	bl	8004930 <HAL_GPIO_Init>


  /*Configure GPIO pin: RHD_CS */
  GPIO_InitStruct.Pin = UDP_TASK_SCOPE_Pin;
 80033f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80033f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033fa:	2301      	movs	r3, #1
 80033fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033fe:	2300      	movs	r3, #0
 8003400:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003402:	2303      	movs	r3, #3
 8003404:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(UDP_TASK_SCOPE_Port, &GPIO_InitStruct);
 8003406:	f107 0314 	add.w	r3, r7, #20
 800340a:	4619      	mov	r1, r3
 800340c:	4823      	ldr	r0, [pc, #140]	; (800349c <MX_GPIO_Init+0x1b4>)
 800340e:	f001 fa8f 	bl	8004930 <HAL_GPIO_Init>

  /*Configure GPIO pin: RHD_CS */
  GPIO_InitStruct.Pin = SPI_TASK_SCOPE_Pin;
 8003412:	2340      	movs	r3, #64	; 0x40
 8003414:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003416:	2301      	movs	r3, #1
 8003418:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800341a:	2300      	movs	r3, #0
 800341c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800341e:	2303      	movs	r3, #3
 8003420:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_TASK_SCOPE_Port, &GPIO_InitStruct);
 8003422:	f107 0314 	add.w	r3, r7, #20
 8003426:	4619      	mov	r1, r3
 8003428:	481c      	ldr	r0, [pc, #112]	; (800349c <MX_GPIO_Init+0x1b4>)
 800342a:	f001 fa81 	bl	8004930 <HAL_GPIO_Init>

  /*Configure GPIO pin: RHD_CS */
  GPIO_InitStruct.Pin = FULL_TASK_SCOPE_Pin;
 800342e:	2320      	movs	r3, #32
 8003430:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003432:	2301      	movs	r3, #1
 8003434:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003436:	2300      	movs	r3, #0
 8003438:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800343a:	2303      	movs	r3, #3
 800343c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(FULL_TASK_SCOPE_Port, &GPIO_InitStruct);
 800343e:	f107 0314 	add.w	r3, r7, #20
 8003442:	4619      	mov	r1, r3
 8003444:	4815      	ldr	r0, [pc, #84]	; (800349c <MX_GPIO_Init+0x1b4>)
 8003446:	f001 fa73 	bl	8004930 <HAL_GPIO_Init>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UDP_TASK_SCOPE_Port, UDP_TASK_SCOPE_Pin, GPIO_PIN_RESET);
 800344a:	2200      	movs	r2, #0
 800344c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003450:	4812      	ldr	r0, [pc, #72]	; (800349c <MX_GPIO_Init+0x1b4>)
 8003452:	f001 fcd5 	bl	8004e00 <HAL_GPIO_WritePin>
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UDP_TASK_SCOPE_Port, UDP_TASK_SCOPE_Pin, GPIO_PIN_SET);
 8003456:	2201      	movs	r2, #1
 8003458:	f44f 7180 	mov.w	r1, #256	; 0x100
 800345c:	480f      	ldr	r0, [pc, #60]	; (800349c <MX_GPIO_Init+0x1b4>)
 800345e:	f001 fccf 	bl	8004e00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_TASK_SCOPE_Port, SPI_TASK_SCOPE_Pin, GPIO_PIN_RESET);
 8003462:	2200      	movs	r2, #0
 8003464:	2140      	movs	r1, #64	; 0x40
 8003466:	480d      	ldr	r0, [pc, #52]	; (800349c <MX_GPIO_Init+0x1b4>)
 8003468:	f001 fcca 	bl	8004e00 <HAL_GPIO_WritePin>
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_TASK_SCOPE_Port, SPI_TASK_SCOPE_Pin, GPIO_PIN_SET);
 800346c:	2201      	movs	r2, #1
 800346e:	2140      	movs	r1, #64	; 0x40
 8003470:	480a      	ldr	r0, [pc, #40]	; (800349c <MX_GPIO_Init+0x1b4>)
 8003472:	f001 fcc5 	bl	8004e00 <HAL_GPIO_WritePin>


  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FULL_TASK_SCOPE_Port, FULL_TASK_SCOPE_Pin, GPIO_PIN_RESET);
 8003476:	2200      	movs	r2, #0
 8003478:	2120      	movs	r1, #32
 800347a:	4808      	ldr	r0, [pc, #32]	; (800349c <MX_GPIO_Init+0x1b4>)
 800347c:	f001 fcc0 	bl	8004e00 <HAL_GPIO_WritePin>
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FULL_TASK_SCOPE_Port, FULL_TASK_SCOPE_Pin, GPIO_PIN_SET);
 8003480:	2201      	movs	r2, #1
 8003482:	2120      	movs	r1, #32
 8003484:	4805      	ldr	r0, [pc, #20]	; (800349c <MX_GPIO_Init+0x1b4>)
 8003486:	f001 fcbb 	bl	8004e00 <HAL_GPIO_WritePin>

  /* EXTI interrupt init*/
//  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 10, 0);
//  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);

}
 800348a:	bf00      	nop
 800348c:	3728      	adds	r7, #40	; 0x28
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}
 8003492:	bf00      	nop
 8003494:	40023800 	.word	0x40023800
 8003498:	40020000 	.word	0x40020000
 800349c:	40020800 	.word	0x40020800
 80034a0:	40020400 	.word	0x40020400

080034a4 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b082      	sub	sp, #8
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 80034ac:	1d39      	adds	r1, r7, #4
 80034ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80034b2:	2201      	movs	r2, #1
 80034b4:	4803      	ldr	r0, [pc, #12]	; (80034c4 <__io_putchar+0x20>)
 80034b6:	f003 f9de 	bl	8006876 <HAL_UART_Transmit>

  return ch;
 80034ba:	687b      	ldr	r3, [r7, #4]
}
 80034bc:	4618      	mov	r0, r3
 80034be:	3708      	adds	r7, #8
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}
 80034c4:	200008f8 	.word	0x200008f8

080034c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80034c8:	b480      	push	{r7}
 80034ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80034cc:	b672      	cpsid	i
}
 80034ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80034d0:	e7fe      	b.n	80034d0 <Error_Handler+0x8>
	...

080034d4 <HAL_MspInit>:
extern DMA_HandleTypeDef hdma_spi1_tx;
extern DMA_HandleTypeDef hdma_spi4_rx;


void HAL_MspInit(void)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b082      	sub	sp, #8
 80034d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

	  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034da:	2300      	movs	r3, #0
 80034dc:	607b      	str	r3, [r7, #4]
 80034de:	4b25      	ldr	r3, [pc, #148]	; (8003574 <HAL_MspInit+0xa0>)
 80034e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034e2:	4a24      	ldr	r2, [pc, #144]	; (8003574 <HAL_MspInit+0xa0>)
 80034e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80034e8:	6453      	str	r3, [r2, #68]	; 0x44
 80034ea:	4b22      	ldr	r3, [pc, #136]	; (8003574 <HAL_MspInit+0xa0>)
 80034ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034f2:	607b      	str	r3, [r7, #4]
 80034f4:	687b      	ldr	r3, [r7, #4]
	  __HAL_RCC_PWR_CLK_ENABLE();
 80034f6:	2300      	movs	r3, #0
 80034f8:	603b      	str	r3, [r7, #0]
 80034fa:	4b1e      	ldr	r3, [pc, #120]	; (8003574 <HAL_MspInit+0xa0>)
 80034fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fe:	4a1d      	ldr	r2, [pc, #116]	; (8003574 <HAL_MspInit+0xa0>)
 8003500:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003504:	6413      	str	r3, [r2, #64]	; 0x40
 8003506:	4b1b      	ldr	r3, [pc, #108]	; (8003574 <HAL_MspInit+0xa0>)
 8003508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800350e:	603b      	str	r3, [r7, #0]
 8003510:	683b      	ldr	r3, [r7, #0]

	  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003512:	2003      	movs	r0, #3
 8003514:	f000 fdb0 	bl	8004078 <HAL_NVIC_SetPriorityGrouping>

	  /* System interrupt init*/
	  /* MemoryManagement_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8003518:	2200      	movs	r2, #0
 800351a:	2100      	movs	r1, #0
 800351c:	f06f 000b 	mvn.w	r0, #11
 8003520:	f000 fdb5 	bl	800408e <HAL_NVIC_SetPriority>
	  /* BusFault_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8003524:	2200      	movs	r2, #0
 8003526:	2100      	movs	r1, #0
 8003528:	f06f 000a 	mvn.w	r0, #10
 800352c:	f000 fdaf 	bl	800408e <HAL_NVIC_SetPriority>
	  /* UsageFault_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8003530:	2200      	movs	r2, #0
 8003532:	2100      	movs	r1, #0
 8003534:	f06f 0009 	mvn.w	r0, #9
 8003538:	f000 fda9 	bl	800408e <HAL_NVIC_SetPriority>
	  /* SVCall_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 800353c:	2200      	movs	r2, #0
 800353e:	2100      	movs	r1, #0
 8003540:	f06f 0004 	mvn.w	r0, #4
 8003544:	f000 fda3 	bl	800408e <HAL_NVIC_SetPriority>
	  /* DebugMonitor_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8003548:	2200      	movs	r2, #0
 800354a:	2100      	movs	r1, #0
 800354c:	f06f 0003 	mvn.w	r0, #3
 8003550:	f000 fd9d 	bl	800408e <HAL_NVIC_SetPriority>
	  /* PendSV_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003554:	2200      	movs	r2, #0
 8003556:	210f      	movs	r1, #15
 8003558:	f06f 0001 	mvn.w	r0, #1
 800355c:	f000 fd97 	bl	800408e <HAL_NVIC_SetPriority>
	  /* SysTick_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8003560:	2200      	movs	r2, #0
 8003562:	210f      	movs	r1, #15
 8003564:	f04f 30ff 	mov.w	r0, #4294967295
 8003568:	f000 fd91 	bl	800408e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800356c:	bf00      	nop
 800356e:	3708      	adds	r7, #8
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}
 8003574:	40023800 	.word	0x40023800

08003578 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b08c      	sub	sp, #48	; 0x30
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003580:	f107 031c 	add.w	r3, r7, #28
 8003584:	2200      	movs	r2, #0
 8003586:	601a      	str	r2, [r3, #0]
 8003588:	605a      	str	r2, [r3, #4]
 800358a:	609a      	str	r2, [r3, #8]
 800358c:	60da      	str	r2, [r3, #12]
 800358e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4aa1      	ldr	r2, [pc, #644]	; (800381c <HAL_SPI_MspInit+0x2a4>)
 8003596:	4293      	cmp	r3, r2
 8003598:	f040 80a1 	bne.w	80036de <HAL_SPI_MspInit+0x166>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800359c:	2300      	movs	r3, #0
 800359e:	61bb      	str	r3, [r7, #24]
 80035a0:	4b9f      	ldr	r3, [pc, #636]	; (8003820 <HAL_SPI_MspInit+0x2a8>)
 80035a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035a4:	4a9e      	ldr	r2, [pc, #632]	; (8003820 <HAL_SPI_MspInit+0x2a8>)
 80035a6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80035aa:	6453      	str	r3, [r2, #68]	; 0x44
 80035ac:	4b9c      	ldr	r3, [pc, #624]	; (8003820 <HAL_SPI_MspInit+0x2a8>)
 80035ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035b4:	61bb      	str	r3, [r7, #24]
 80035b6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035b8:	2300      	movs	r3, #0
 80035ba:	617b      	str	r3, [r7, #20]
 80035bc:	4b98      	ldr	r3, [pc, #608]	; (8003820 <HAL_SPI_MspInit+0x2a8>)
 80035be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c0:	4a97      	ldr	r2, [pc, #604]	; (8003820 <HAL_SPI_MspInit+0x2a8>)
 80035c2:	f043 0301 	orr.w	r3, r3, #1
 80035c6:	6313      	str	r3, [r2, #48]	; 0x30
 80035c8:	4b95      	ldr	r3, [pc, #596]	; (8003820 <HAL_SPI_MspInit+0x2a8>)
 80035ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035cc:	f003 0301 	and.w	r3, r3, #1
 80035d0:	617b      	str	r3, [r7, #20]
 80035d2:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = WFM_SCK_Pin|WFM_MISO_Pin|WFM_MOSI_Pin;
 80035d4:	23e0      	movs	r3, #224	; 0xe0
 80035d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035d8:	2302      	movs	r3, #2
 80035da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035dc:	2300      	movs	r3, #0
 80035de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035e0:	2303      	movs	r3, #3
 80035e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80035e4:	2305      	movs	r3, #5
 80035e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035e8:	f107 031c 	add.w	r3, r7, #28
 80035ec:	4619      	mov	r1, r3
 80035ee:	488d      	ldr	r0, [pc, #564]	; (8003824 <HAL_SPI_MspInit+0x2ac>)
 80035f0:	f001 f99e 	bl	8004930 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 80035f4:	4b8c      	ldr	r3, [pc, #560]	; (8003828 <HAL_SPI_MspInit+0x2b0>)
 80035f6:	4a8d      	ldr	r2, [pc, #564]	; (800382c <HAL_SPI_MspInit+0x2b4>)
 80035f8:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 80035fa:	4b8b      	ldr	r3, [pc, #556]	; (8003828 <HAL_SPI_MspInit+0x2b0>)
 80035fc:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8003600:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003602:	4b89      	ldr	r3, [pc, #548]	; (8003828 <HAL_SPI_MspInit+0x2b0>)
 8003604:	2200      	movs	r2, #0
 8003606:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003608:	4b87      	ldr	r3, [pc, #540]	; (8003828 <HAL_SPI_MspInit+0x2b0>)
 800360a:	2200      	movs	r2, #0
 800360c:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800360e:	4b86      	ldr	r3, [pc, #536]	; (8003828 <HAL_SPI_MspInit+0x2b0>)
 8003610:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003614:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003616:	4b84      	ldr	r3, [pc, #528]	; (8003828 <HAL_SPI_MspInit+0x2b0>)
 8003618:	2200      	movs	r2, #0
 800361a:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800361c:	4b82      	ldr	r3, [pc, #520]	; (8003828 <HAL_SPI_MspInit+0x2b0>)
 800361e:	2200      	movs	r2, #0
 8003620:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8003622:	4b81      	ldr	r3, [pc, #516]	; (8003828 <HAL_SPI_MspInit+0x2b0>)
 8003624:	2200      	movs	r2, #0
 8003626:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003628:	4b7f      	ldr	r3, [pc, #508]	; (8003828 <HAL_SPI_MspInit+0x2b0>)
 800362a:	2200      	movs	r2, #0
 800362c:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800362e:	4b7e      	ldr	r3, [pc, #504]	; (8003828 <HAL_SPI_MspInit+0x2b0>)
 8003630:	2200      	movs	r2, #0
 8003632:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8003634:	487c      	ldr	r0, [pc, #496]	; (8003828 <HAL_SPI_MspInit+0x2b0>)
 8003636:	f000 fd8b 	bl	8004150 <HAL_DMA_Init>
 800363a:	4603      	mov	r3, r0
 800363c:	2b00      	cmp	r3, #0
 800363e:	d001      	beq.n	8003644 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 8003640:	f7ff ff42 	bl	80034c8 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	4a78      	ldr	r2, [pc, #480]	; (8003828 <HAL_SPI_MspInit+0x2b0>)
 8003648:	64da      	str	r2, [r3, #76]	; 0x4c
 800364a:	4a77      	ldr	r2, [pc, #476]	; (8003828 <HAL_SPI_MspInit+0x2b0>)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream2;
 8003650:	4b77      	ldr	r3, [pc, #476]	; (8003830 <HAL_SPI_MspInit+0x2b8>)
 8003652:	4a78      	ldr	r2, [pc, #480]	; (8003834 <HAL_SPI_MspInit+0x2bc>)
 8003654:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_2;
 8003656:	4b76      	ldr	r3, [pc, #472]	; (8003830 <HAL_SPI_MspInit+0x2b8>)
 8003658:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800365c:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800365e:	4b74      	ldr	r3, [pc, #464]	; (8003830 <HAL_SPI_MspInit+0x2b8>)
 8003660:	2240      	movs	r2, #64	; 0x40
 8003662:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003664:	4b72      	ldr	r3, [pc, #456]	; (8003830 <HAL_SPI_MspInit+0x2b8>)
 8003666:	2200      	movs	r2, #0
 8003668:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800366a:	4b71      	ldr	r3, [pc, #452]	; (8003830 <HAL_SPI_MspInit+0x2b8>)
 800366c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003670:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003672:	4b6f      	ldr	r3, [pc, #444]	; (8003830 <HAL_SPI_MspInit+0x2b8>)
 8003674:	2200      	movs	r2, #0
 8003676:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003678:	4b6d      	ldr	r3, [pc, #436]	; (8003830 <HAL_SPI_MspInit+0x2b8>)
 800367a:	2200      	movs	r2, #0
 800367c:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800367e:	4b6c      	ldr	r3, [pc, #432]	; (8003830 <HAL_SPI_MspInit+0x2b8>)
 8003680:	2200      	movs	r2, #0
 8003682:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003684:	4b6a      	ldr	r3, [pc, #424]	; (8003830 <HAL_SPI_MspInit+0x2b8>)
 8003686:	2200      	movs	r2, #0
 8003688:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800368a:	4b69      	ldr	r3, [pc, #420]	; (8003830 <HAL_SPI_MspInit+0x2b8>)
 800368c:	2200      	movs	r2, #0
 800368e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8003690:	4867      	ldr	r0, [pc, #412]	; (8003830 <HAL_SPI_MspInit+0x2b8>)
 8003692:	f000 fd5d 	bl	8004150 <HAL_DMA_Init>
 8003696:	4603      	mov	r3, r0
 8003698:	2b00      	cmp	r3, #0
 800369a:	d001      	beq.n	80036a0 <HAL_SPI_MspInit+0x128>
    {
      Error_Handler();
 800369c:	f7ff ff14 	bl	80034c8 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	4a63      	ldr	r2, [pc, #396]	; (8003830 <HAL_SPI_MspInit+0x2b8>)
 80036a4:	649a      	str	r2, [r3, #72]	; 0x48
 80036a6:	4a62      	ldr	r2, [pc, #392]	; (8003830 <HAL_SPI_MspInit+0x2b8>)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6393      	str	r3, [r2, #56]	; 0x38

    /* DMA interrupt init */
    /* DMA2_Stream0_IRQn RX interrupt configuration */
    HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 10, 1);
 80036ac:	2201      	movs	r2, #1
 80036ae:	210a      	movs	r1, #10
 80036b0:	2038      	movs	r0, #56	; 0x38
 80036b2:	f000 fcec 	bl	800408e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80036b6:	2038      	movs	r0, #56	; 0x38
 80036b8:	f000 fd05 	bl	80040c6 <HAL_NVIC_EnableIRQ>

    /* DMA2_Stream2_IRQn TX interrupt configuration */
    HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 10, 0);
 80036bc:	2200      	movs	r2, #0
 80036be:	210a      	movs	r1, #10
 80036c0:	203a      	movs	r0, #58	; 0x3a
 80036c2:	f000 fce4 	bl	800408e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80036c6:	203a      	movs	r0, #58	; 0x3a
 80036c8:	f000 fcfd 	bl	80040c6 <HAL_NVIC_EnableIRQ>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 10, 2);
 80036cc:	2202      	movs	r2, #2
 80036ce:	210a      	movs	r1, #10
 80036d0:	2023      	movs	r0, #35	; 0x23
 80036d2:	f000 fcdc 	bl	800408e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80036d6:	2023      	movs	r0, #35	; 0x23
 80036d8:	f000 fcf5 	bl	80040c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 80036dc:	e09a      	b.n	8003814 <HAL_SPI_MspInit+0x29c>
  else if(hspi->Instance==SPI4)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a55      	ldr	r2, [pc, #340]	; (8003838 <HAL_SPI_MspInit+0x2c0>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	f040 8095 	bne.w	8003814 <HAL_SPI_MspInit+0x29c>
    __HAL_RCC_SPI4_CLK_ENABLE();
 80036ea:	2300      	movs	r3, #0
 80036ec:	613b      	str	r3, [r7, #16]
 80036ee:	4b4c      	ldr	r3, [pc, #304]	; (8003820 <HAL_SPI_MspInit+0x2a8>)
 80036f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036f2:	4a4b      	ldr	r2, [pc, #300]	; (8003820 <HAL_SPI_MspInit+0x2a8>)
 80036f4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80036f8:	6453      	str	r3, [r2, #68]	; 0x44
 80036fa:	4b49      	ldr	r3, [pc, #292]	; (8003820 <HAL_SPI_MspInit+0x2a8>)
 80036fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003702:	613b      	str	r3, [r7, #16]
 8003704:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003706:	2300      	movs	r3, #0
 8003708:	60fb      	str	r3, [r7, #12]
 800370a:	4b45      	ldr	r3, [pc, #276]	; (8003820 <HAL_SPI_MspInit+0x2a8>)
 800370c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800370e:	4a44      	ldr	r2, [pc, #272]	; (8003820 <HAL_SPI_MspInit+0x2a8>)
 8003710:	f043 0301 	orr.w	r3, r3, #1
 8003714:	6313      	str	r3, [r2, #48]	; 0x30
 8003716:	4b42      	ldr	r3, [pc, #264]	; (8003820 <HAL_SPI_MspInit+0x2a8>)
 8003718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800371a:	f003 0301 	and.w	r3, r3, #1
 800371e:	60fb      	str	r3, [r7, #12]
 8003720:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003722:	2300      	movs	r3, #0
 8003724:	60bb      	str	r3, [r7, #8]
 8003726:	4b3e      	ldr	r3, [pc, #248]	; (8003820 <HAL_SPI_MspInit+0x2a8>)
 8003728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800372a:	4a3d      	ldr	r2, [pc, #244]	; (8003820 <HAL_SPI_MspInit+0x2a8>)
 800372c:	f043 0302 	orr.w	r3, r3, #2
 8003730:	6313      	str	r3, [r2, #48]	; 0x30
 8003732:	4b3b      	ldr	r3, [pc, #236]	; (8003820 <HAL_SPI_MspInit+0x2a8>)
 8003734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003736:	f003 0302 	and.w	r3, r3, #2
 800373a:	60bb      	str	r3, [r7, #8]
 800373c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = RHD_SPI_MOSI_Pin;
 800373e:	2302      	movs	r3, #2
 8003740:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003742:	2302      	movs	r3, #2
 8003744:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003746:	2300      	movs	r3, #0
 8003748:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800374a:	2303      	movs	r3, #3
 800374c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800374e:	2305      	movs	r3, #5
 8003750:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(RHD_SPI_MOSI_Port, &GPIO_InitStruct);
 8003752:	f107 031c 	add.w	r3, r7, #28
 8003756:	4619      	mov	r1, r3
 8003758:	4832      	ldr	r0, [pc, #200]	; (8003824 <HAL_SPI_MspInit+0x2ac>)
 800375a:	f001 f8e9 	bl	8004930 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin   = RHD_SPI_CLK_Pin;
 800375e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003762:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode  = GPIO_MODE_AF_PP;
 8003764:	2302      	movs	r3, #2
 8003766:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8003768:	2300      	movs	r3, #0
 800376a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800376c:	2303      	movs	r3, #3
 800376e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI4;
 8003770:	2306      	movs	r3, #6
 8003772:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(RHD_SPI_CLK_Port, &GPIO_InitStruct);
 8003774:	f107 031c 	add.w	r3, r7, #28
 8003778:	4619      	mov	r1, r3
 800377a:	4830      	ldr	r0, [pc, #192]	; (800383c <HAL_SPI_MspInit+0x2c4>)
 800377c:	f001 f8d8 	bl	8004930 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin   = RHD_SPI_CS_Pin;
 8003780:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003784:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode  = GPIO_MODE_AF_PP;
 8003786:	2302      	movs	r3, #2
 8003788:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull  = GPIO_NOPULL;
 800378a:	2300      	movs	r3, #0
 800378c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800378e:	2303      	movs	r3, #3
 8003790:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI4;
 8003792:	2306      	movs	r3, #6
 8003794:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(RHD_SPI_CS_Port, &GPIO_InitStruct);
 8003796:	f107 031c 	add.w	r3, r7, #28
 800379a:	4619      	mov	r1, r3
 800379c:	4827      	ldr	r0, [pc, #156]	; (800383c <HAL_SPI_MspInit+0x2c4>)
 800379e:	f001 f8c7 	bl	8004930 <HAL_GPIO_Init>
    hdma_spi4_rx.Instance = DMA2_Stream3;
 80037a2:	4b27      	ldr	r3, [pc, #156]	; (8003840 <HAL_SPI_MspInit+0x2c8>)
 80037a4:	4a27      	ldr	r2, [pc, #156]	; (8003844 <HAL_SPI_MspInit+0x2cc>)
 80037a6:	601a      	str	r2, [r3, #0]
    hdma_spi4_rx.Init.Channel = DMA_CHANNEL_5;
 80037a8:	4b25      	ldr	r3, [pc, #148]	; (8003840 <HAL_SPI_MspInit+0x2c8>)
 80037aa:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80037ae:	605a      	str	r2, [r3, #4]
    hdma_spi4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80037b0:	4b23      	ldr	r3, [pc, #140]	; (8003840 <HAL_SPI_MspInit+0x2c8>)
 80037b2:	2200      	movs	r2, #0
 80037b4:	609a      	str	r2, [r3, #8]
    hdma_spi4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80037b6:	4b22      	ldr	r3, [pc, #136]	; (8003840 <HAL_SPI_MspInit+0x2c8>)
 80037b8:	2200      	movs	r2, #0
 80037ba:	60da      	str	r2, [r3, #12]
    hdma_spi4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80037bc:	4b20      	ldr	r3, [pc, #128]	; (8003840 <HAL_SPI_MspInit+0x2c8>)
 80037be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80037c2:	611a      	str	r2, [r3, #16]
    hdma_spi4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80037c4:	4b1e      	ldr	r3, [pc, #120]	; (8003840 <HAL_SPI_MspInit+0x2c8>)
 80037c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80037ca:	615a      	str	r2, [r3, #20]
    hdma_spi4_rx.Init.MemDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80037cc:	4b1c      	ldr	r3, [pc, #112]	; (8003840 <HAL_SPI_MspInit+0x2c8>)
 80037ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80037d2:	619a      	str	r2, [r3, #24]
    hdma_spi4_rx.Init.Mode = DMA_NORMAL;
 80037d4:	4b1a      	ldr	r3, [pc, #104]	; (8003840 <HAL_SPI_MspInit+0x2c8>)
 80037d6:	2200      	movs	r2, #0
 80037d8:	61da      	str	r2, [r3, #28]
    hdma_spi4_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80037da:	4b19      	ldr	r3, [pc, #100]	; (8003840 <HAL_SPI_MspInit+0x2c8>)
 80037dc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80037e0:	621a      	str	r2, [r3, #32]
    hdma_spi4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80037e2:	4b17      	ldr	r3, [pc, #92]	; (8003840 <HAL_SPI_MspInit+0x2c8>)
 80037e4:	2200      	movs	r2, #0
 80037e6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi4_rx) != HAL_OK)
 80037e8:	4815      	ldr	r0, [pc, #84]	; (8003840 <HAL_SPI_MspInit+0x2c8>)
 80037ea:	f000 fcb1 	bl	8004150 <HAL_DMA_Init>
 80037ee:	4603      	mov	r3, r0
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d001      	beq.n	80037f8 <HAL_SPI_MspInit+0x280>
      Error_Handler();
 80037f4:	f7ff fe68 	bl	80034c8 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi4_rx);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	4a11      	ldr	r2, [pc, #68]	; (8003840 <HAL_SPI_MspInit+0x2c8>)
 80037fc:	64da      	str	r2, [r3, #76]	; 0x4c
 80037fe:	4a10      	ldr	r2, [pc, #64]	; (8003840 <HAL_SPI_MspInit+0x2c8>)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8003804:	2200      	movs	r2, #0
 8003806:	2100      	movs	r1, #0
 8003808:	203b      	movs	r0, #59	; 0x3b
 800380a:	f000 fc40 	bl	800408e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800380e:	203b      	movs	r0, #59	; 0x3b
 8003810:	f000 fc59 	bl	80040c6 <HAL_NVIC_EnableIRQ>
}
 8003814:	bf00      	nop
 8003816:	3730      	adds	r7, #48	; 0x30
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}
 800381c:	40013000 	.word	0x40013000
 8003820:	40023800 	.word	0x40023800
 8003824:	40020000 	.word	0x40020000
 8003828:	2000140c 	.word	0x2000140c
 800382c:	40026410 	.word	0x40026410
 8003830:	200013ac 	.word	0x200013ac
 8003834:	40026440 	.word	0x40026440
 8003838:	40013400 	.word	0x40013400
 800383c:	40020400 	.word	0x40020400
 8003840:	20000994 	.word	0x20000994
 8003844:	40026458 	.word	0x40026458

08003848 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b082      	sub	sp, #8
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI1)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a1c      	ldr	r2, [pc, #112]	; (80038c8 <HAL_SPI_MspDeInit+0x80>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d114      	bne.n	8003884 <HAL_SPI_MspDeInit+0x3c>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 800385a:	4b1c      	ldr	r3, [pc, #112]	; (80038cc <HAL_SPI_MspDeInit+0x84>)
 800385c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800385e:	4a1b      	ldr	r2, [pc, #108]	; (80038cc <HAL_SPI_MspDeInit+0x84>)
 8003860:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003864:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, WFM_SCK_Pin|WFM_MISO_Pin|WFM_MOSI_Pin);
 8003866:	21e0      	movs	r1, #224	; 0xe0
 8003868:	4819      	ldr	r0, [pc, #100]	; (80038d0 <HAL_SPI_MspDeInit+0x88>)
 800386a:	f001 f9e5 	bl	8004c38 <HAL_GPIO_DeInit>

    /* SPI1 DMA DeInit */
    HAL_DMA_DeInit(hspi->hdmarx);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003872:	4618      	mov	r0, r3
 8003874:	f000 fd1a 	bl	80042ac <HAL_DMA_DeInit>
    HAL_DMA_DeInit(hspi->hdmatx);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800387c:	4618      	mov	r0, r3
 800387e:	f000 fd15 	bl	80042ac <HAL_DMA_DeInit>
  /* USER CODE BEGIN SPI4_MspDeInit 1 */

  /* USER CODE END SPI4_MspDeInit 1 */
  }

}
 8003882:	e01d      	b.n	80038c0 <HAL_SPI_MspDeInit+0x78>
  else if(hspi->Instance==SPI4)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a12      	ldr	r2, [pc, #72]	; (80038d4 <HAL_SPI_MspDeInit+0x8c>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d118      	bne.n	80038c0 <HAL_SPI_MspDeInit+0x78>
    __HAL_RCC_SPI4_CLK_DISABLE();
 800388e:	4b0f      	ldr	r3, [pc, #60]	; (80038cc <HAL_SPI_MspDeInit+0x84>)
 8003890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003892:	4a0e      	ldr	r2, [pc, #56]	; (80038cc <HAL_SPI_MspDeInit+0x84>)
 8003894:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003898:	6453      	str	r3, [r2, #68]	; 0x44
    HAL_GPIO_DeInit(RHD_SPI_MOSI_Port, RHD_SPI_MOSI_Pin);
 800389a:	2102      	movs	r1, #2
 800389c:	480c      	ldr	r0, [pc, #48]	; (80038d0 <HAL_SPI_MspDeInit+0x88>)
 800389e:	f001 f9cb 	bl	8004c38 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(RHD_SPI_CS_Port  , RHD_SPI_CS_Pin | RHD_SPI_CLK_Pin);
 80038a2:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80038a6:	480c      	ldr	r0, [pc, #48]	; (80038d8 <HAL_SPI_MspDeInit+0x90>)
 80038a8:	f001 f9c6 	bl	8004c38 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(hspi->hdmarx);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038b0:	4618      	mov	r0, r3
 80038b2:	f000 fcfb 	bl	80042ac <HAL_DMA_DeInit>
    HAL_DMA_DeInit(hspi->hdmatx);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038ba:	4618      	mov	r0, r3
 80038bc:	f000 fcf6 	bl	80042ac <HAL_DMA_DeInit>
}
 80038c0:	bf00      	nop
 80038c2:	3708      	adds	r7, #8
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}
 80038c8:	40013000 	.word	0x40013000
 80038cc:	40023800 	.word	0x40023800
 80038d0:	40020000 	.word	0x40020000
 80038d4:	40013400 	.word	0x40013400
 80038d8:	40020400 	.word	0x40020400

080038dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b08a      	sub	sp, #40	; 0x28
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038e4:	f107 0314 	add.w	r3, r7, #20
 80038e8:	2200      	movs	r2, #0
 80038ea:	601a      	str	r2, [r3, #0]
 80038ec:	605a      	str	r2, [r3, #4]
 80038ee:	609a      	str	r2, [r3, #8]
 80038f0:	60da      	str	r2, [r3, #12]
 80038f2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a19      	ldr	r2, [pc, #100]	; (8003960 <HAL_UART_MspInit+0x84>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d12b      	bne.n	8003956 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80038fe:	2300      	movs	r3, #0
 8003900:	613b      	str	r3, [r7, #16]
 8003902:	4b18      	ldr	r3, [pc, #96]	; (8003964 <HAL_UART_MspInit+0x88>)
 8003904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003906:	4a17      	ldr	r2, [pc, #92]	; (8003964 <HAL_UART_MspInit+0x88>)
 8003908:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800390c:	6413      	str	r3, [r2, #64]	; 0x40
 800390e:	4b15      	ldr	r3, [pc, #84]	; (8003964 <HAL_UART_MspInit+0x88>)
 8003910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003916:	613b      	str	r3, [r7, #16]
 8003918:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800391a:	2300      	movs	r3, #0
 800391c:	60fb      	str	r3, [r7, #12]
 800391e:	4b11      	ldr	r3, [pc, #68]	; (8003964 <HAL_UART_MspInit+0x88>)
 8003920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003922:	4a10      	ldr	r2, [pc, #64]	; (8003964 <HAL_UART_MspInit+0x88>)
 8003924:	f043 0301 	orr.w	r3, r3, #1
 8003928:	6313      	str	r3, [r2, #48]	; 0x30
 800392a:	4b0e      	ldr	r3, [pc, #56]	; (8003964 <HAL_UART_MspInit+0x88>)
 800392c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800392e:	f003 0301 	and.w	r3, r3, #1
 8003932:	60fb      	str	r3, [r7, #12]
 8003934:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003936:	230c      	movs	r3, #12
 8003938:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800393a:	2302      	movs	r3, #2
 800393c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800393e:	2300      	movs	r3, #0
 8003940:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003942:	2303      	movs	r3, #3
 8003944:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003946:	2307      	movs	r3, #7
 8003948:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800394a:	f107 0314 	add.w	r3, r7, #20
 800394e:	4619      	mov	r1, r3
 8003950:	4805      	ldr	r0, [pc, #20]	; (8003968 <HAL_UART_MspInit+0x8c>)
 8003952:	f000 ffed 	bl	8004930 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003956:	bf00      	nop
 8003958:	3728      	adds	r7, #40	; 0x28
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}
 800395e:	bf00      	nop
 8003960:	40004400 	.word	0x40004400
 8003964:	40023800 	.word	0x40023800
 8003968:	40020000 	.word	0x40020000

0800396c <SPI1_IRQHandler>:

/* USER CODE BEGIN EV */
/**************************************************************************//**
 * Handle SPI1 global interrupt
 *****************************************************************************/
void SPI1_IRQHandler (void) {
 800396c:	b580      	push	{r7, lr}
 800396e:	af00      	add	r7, sp, #0
  HAL_SPI_IRQHandler(&hspi1);
 8003970:	4802      	ldr	r0, [pc, #8]	; (800397c <SPI1_IRQHandler+0x10>)
 8003972:	f002 fb83 	bl	800607c <HAL_SPI_IRQHandler>
}
 8003976:	bf00      	nop
 8003978:	bd80      	pop	{r7, pc}
 800397a:	bf00      	nop
 800397c:	20001354 	.word	0x20001354

08003980 <HAL_SPI_TxCpltCallback>:


/**************************************************************************//**
 * SPI transmit complete callback
 *****************************************************************************/
void HAL_SPI_TxCpltCallback (SPI_HandleTypeDef *hspi) {
 8003980:	b580      	push	{r7, lr}
 8003982:	b084      	sub	sp, #16
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8003988:	2300      	movs	r3, #0
 800398a:	60fb      	str	r3, [r7, #12]
  xSemaphoreGiveFromISR(spiDMASemaphore, &xHigherPriorityTaskWoken);
 800398c:	4b0b      	ldr	r3, [pc, #44]	; (80039bc <HAL_SPI_TxCpltCallback+0x3c>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f107 020c 	add.w	r2, r7, #12
 8003994:	4611      	mov	r1, r2
 8003996:	4618      	mov	r0, r3
 8003998:	f006 fdd9 	bl	800a54e <xQueueGiveFromISR>
  portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d007      	beq.n	80039b2 <HAL_SPI_TxCpltCallback+0x32>
 80039a2:	4b07      	ldr	r3, [pc, #28]	; (80039c0 <HAL_SPI_TxCpltCallback+0x40>)
 80039a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039a8:	601a      	str	r2, [r3, #0]
 80039aa:	f3bf 8f4f 	dsb	sy
 80039ae:	f3bf 8f6f 	isb	sy
}
 80039b2:	bf00      	nop
 80039b4:	3710      	adds	r7, #16
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}
 80039ba:	bf00      	nop
 80039bc:	2000146c 	.word	0x2000146c
 80039c0:	e000ed04 	.word	0xe000ed04

080039c4 <HAL_SPI_RxCpltCallback>:

/**************************************************************************//**
 * SPI receive complete callback
 *****************************************************************************/
void HAL_SPI_RxCpltCallback (SPI_HandleTypeDef *hspi) {
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b084      	sub	sp, #16
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]

	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80039cc:	2300      	movs	r3, #0
 80039ce:	60fb      	str	r3, [r7, #12]
	if(hspi->Instance==SPI1){
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a1c      	ldr	r2, [pc, #112]	; (8003a48 <HAL_SPI_RxCpltCallback+0x84>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d112      	bne.n	8003a00 <HAL_SPI_RxCpltCallback+0x3c>
		  xSemaphoreGiveFromISR(spiDMASemaphore, &xHigherPriorityTaskWoken);
 80039da:	4b1c      	ldr	r3, [pc, #112]	; (8003a4c <HAL_SPI_RxCpltCallback+0x88>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f107 020c 	add.w	r2, r7, #12
 80039e2:	4611      	mov	r1, r2
 80039e4:	4618      	mov	r0, r3
 80039e6:	f006 fdb2 	bl	800a54e <xQueueGiveFromISR>
		  portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d007      	beq.n	8003a00 <HAL_SPI_RxCpltCallback+0x3c>
 80039f0:	4b17      	ldr	r3, [pc, #92]	; (8003a50 <HAL_SPI_RxCpltCallback+0x8c>)
 80039f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039f6:	601a      	str	r2, [r3, #0]
 80039f8:	f3bf 8f4f 	dsb	sy
 80039fc:	f3bf 8f6f 	isb	sy
	}

	if(hspi->Instance==SPI4){
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a13      	ldr	r2, [pc, #76]	; (8003a54 <HAL_SPI_RxCpltCallback+0x90>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d119      	bne.n	8003a3e <HAL_SPI_RxCpltCallback+0x7a>
		current_buffer = (current_buffer + 1) % NUM_BUFFERS;
 8003a0a:	4b13      	ldr	r3, [pc, #76]	; (8003a58 <HAL_SPI_RxCpltCallback+0x94>)
 8003a0c:	781b      	ldrb	r3, [r3, #0]
 8003a0e:	b2db      	uxtb	r3, r3
 8003a10:	3301      	adds	r3, #1
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	f003 0301 	and.w	r3, r3, #1
 8003a18:	bfb8      	it	lt
 8003a1a:	425b      	neglt	r3, r3
 8003a1c:	b2da      	uxtb	r2, r3
 8003a1e:	4b0e      	ldr	r3, [pc, #56]	; (8003a58 <HAL_SPI_RxCpltCallback+0x94>)
 8003a20:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Receive_DMA(hspi, (uint8_t *)rx_buffers[current_buffer], SPI_BUFFER_SIZE);
 8003a22:	4b0d      	ldr	r3, [pc, #52]	; (8003a58 <HAL_SPI_RxCpltCallback+0x94>)
 8003a24:	781b      	ldrb	r3, [r3, #0]
 8003a26:	b2db      	uxtb	r3, r3
 8003a28:	01db      	lsls	r3, r3, #7
 8003a2a:	4a0c      	ldr	r2, [pc, #48]	; (8003a5c <HAL_SPI_RxCpltCallback+0x98>)
 8003a2c:	4413      	add	r3, r2
 8003a2e:	2240      	movs	r2, #64	; 0x40
 8003a30:	4619      	mov	r1, r3
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	f002 f95e 	bl	8005cf4 <HAL_SPI_Receive_DMA>
		spi_flag = 1;
 8003a38:	4b09      	ldr	r3, [pc, #36]	; (8003a60 <HAL_SPI_RxCpltCallback+0x9c>)
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	701a      	strb	r2, [r3, #0]
	}
}
 8003a3e:	bf00      	nop
 8003a40:	3710      	adds	r7, #16
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	bf00      	nop
 8003a48:	40013000 	.word	0x40013000
 8003a4c:	2000146c 	.word	0x2000146c
 8003a50:	e000ed04 	.word	0xe000ed04
 8003a54:	40013400 	.word	0x40013400
 8003a58:	200002c0 	.word	0x200002c0
 8003a5c:	200002c4 	.word	0x200002c4
 8003a60:	200002b8 	.word	0x200002b8

08003a64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003a64:	b480      	push	{r7}
 8003a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003a68:	e7fe      	b.n	8003a68 <NMI_Handler+0x4>

08003a6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003a6a:	b480      	push	{r7}
 8003a6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003a6e:	e7fe      	b.n	8003a6e <HardFault_Handler+0x4>

08003a70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003a70:	b480      	push	{r7}
 8003a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003a74:	e7fe      	b.n	8003a74 <MemManage_Handler+0x4>

08003a76 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003a76:	b480      	push	{r7}
 8003a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003a7a:	e7fe      	b.n	8003a7a <BusFault_Handler+0x4>

08003a7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003a80:	e7fe      	b.n	8003a80 <UsageFault_Handler+0x4>

08003a82 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003a82:	b480      	push	{r7}
 8003a84:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003a86:	bf00      	nop
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8e:	4770      	bx	lr

08003a90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003a94:	f000 f9b8 	bl	8003e08 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8003a98:	f008 f8ce 	bl	800bc38 <xTaskGetSchedulerState>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	2b01      	cmp	r3, #1
 8003aa0:	d001      	beq.n	8003aa6 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8003aa2:	f009 f811 	bl	800cac8 <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */
  osSystickHandler();
 8003aa6:	f006 f86b 	bl	8009b80 <osSystickHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 8003aaa:	bf00      	nop
 8003aac:	bd80      	pop	{r7, pc}
	...

08003ab0 <EXTI15_10_IRQHandler>:
/* For the available peripheral interrupt handler names,                      */
/* please refer to the startup file (startup_stm32f4xx.s).                    */
/******************************************************************************/

void EXTI15_10_IRQHandler(void)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b082      	sub	sp, #8
 8003ab4:	af00      	add	r7, sp, #0

  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	607b      	str	r3, [r7, #4]

  if (__HAL_GPIO_EXTI_GET_IT(WFM_SPI_WIRQ_Pin) != RESET) {
 8003aba:	4b15      	ldr	r3, [pc, #84]	; (8003b10 <EXTI15_10_IRQHandler+0x60>)
 8003abc:	695b      	ldr	r3, [r3, #20]
 8003abe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d011      	beq.n	8003aea <EXTI15_10_IRQHandler+0x3a>
	  if(sl_wfx_wake_up_sem){
 8003ac6:	4b13      	ldr	r3, [pc, #76]	; (8003b14 <EXTI15_10_IRQHandler+0x64>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d006      	beq.n	8003adc <EXTI15_10_IRQHandler+0x2c>
		  xSemaphoreGiveFromISR(sl_wfx_wake_up_sem, &xHigherPriorityTaskWoken);
 8003ace:	4b11      	ldr	r3, [pc, #68]	; (8003b14 <EXTI15_10_IRQHandler+0x64>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	1d3a      	adds	r2, r7, #4
 8003ad4:	4611      	mov	r1, r2
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f006 fd39 	bl	800a54e <xQueueGiveFromISR>
	   }

	xEventGroupSetBitsFromISR(sl_wfx_event_group,
 8003adc:	4b0e      	ldr	r3, [pc, #56]	; (8003b18 <EXTI15_10_IRQHandler+0x68>)
 8003ade:	6819      	ldr	r1, [r3, #0]
 8003ae0:	1d3b      	adds	r3, r7, #4
 8003ae2:	2202      	movs	r2, #2
 8003ae4:	480d      	ldr	r0, [pc, #52]	; (8003b1c <EXTI15_10_IRQHandler+0x6c>)
 8003ae6:	f008 fe0f 	bl	800c708 <xTimerPendFunctionCallFromISR>
							  SL_WFX_RX_PACKET_AVAILABLE,
							  &xHigherPriorityTaskWoken);
  }

  HAL_GPIO_EXTI_IRQHandler(WFM_SPI_WIRQ_Pin);
 8003aea:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003aee:	f001 f9a1 	bl	8004e34 <HAL_GPIO_EXTI_IRQHandler>
  portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d007      	beq.n	8003b08 <EXTI15_10_IRQHandler+0x58>
 8003af8:	4b09      	ldr	r3, [pc, #36]	; (8003b20 <EXTI15_10_IRQHandler+0x70>)
 8003afa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003afe:	601a      	str	r2, [r3, #0]
 8003b00:	f3bf 8f4f 	dsb	sy
 8003b04:	f3bf 8f6f 	isb	sy

}
 8003b08:	bf00      	nop
 8003b0a:	3708      	adds	r7, #8
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}
 8003b10:	40013c00 	.word	0x40013c00
 8003b14:	20001338 	.word	0x20001338
 8003b18:	20001474 	.word	0x20001474
 8003b1c:	08009e77 	.word	0x08009e77
 8003b20:	e000ed04 	.word	0xe000ed04

08003b24 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8003b28:	4802      	ldr	r0, [pc, #8]	; (8003b34 <DMA2_Stream0_IRQHandler+0x10>)
 8003b2a:	f000 fc97 	bl	800445c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003b2e:	bf00      	nop
 8003b30:	bd80      	pop	{r7, pc}
 8003b32:	bf00      	nop
 8003b34:	2000140c 	.word	0x2000140c

08003b38 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8003b3c:	4802      	ldr	r0, [pc, #8]	; (8003b48 <DMA2_Stream2_IRQHandler+0x10>)
 8003b3e:	f000 fc8d 	bl	800445c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8003b42:	bf00      	nop
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	bf00      	nop
 8003b48:	200013ac 	.word	0x200013ac

08003b4c <DMA2_Stream3_IRQHandler>:

void DMA2_Stream3_IRQHandler(void)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_rx);
 8003b50:	4802      	ldr	r0, [pc, #8]	; (8003b5c <DMA2_Stream3_IRQHandler+0x10>)
 8003b52:	f000 fc83 	bl	800445c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8003b56:	bf00      	nop
 8003b58:	bd80      	pop	{r7, pc}
 8003b5a:	bf00      	nop
 8003b5c:	20000994 	.word	0x20000994

08003b60 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003b60:	b480      	push	{r7}
 8003b62:	af00      	add	r7, sp, #0
	return 1;
 8003b64:	2301      	movs	r3, #1
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6e:	4770      	bx	lr

08003b70 <_kill>:

int _kill(int pid, int sig)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b082      	sub	sp, #8
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
 8003b78:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003b7a:	f016 fb71 	bl	801a260 <__errno>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	2216      	movs	r2, #22
 8003b82:	601a      	str	r2, [r3, #0]
	return -1;
 8003b84:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	3708      	adds	r7, #8
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}

08003b90 <_exit>:

void _exit (int status)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b082      	sub	sp, #8
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003b98:	f04f 31ff 	mov.w	r1, #4294967295
 8003b9c:	6878      	ldr	r0, [r7, #4]
 8003b9e:	f7ff ffe7 	bl	8003b70 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003ba2:	e7fe      	b.n	8003ba2 <_exit+0x12>

08003ba4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b086      	sub	sp, #24
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	60f8      	str	r0, [r7, #12]
 8003bac:	60b9      	str	r1, [r7, #8]
 8003bae:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	617b      	str	r3, [r7, #20]
 8003bb4:	e00a      	b.n	8003bcc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003bb6:	f3af 8000 	nop.w
 8003bba:	4601      	mov	r1, r0
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	1c5a      	adds	r2, r3, #1
 8003bc0:	60ba      	str	r2, [r7, #8]
 8003bc2:	b2ca      	uxtb	r2, r1
 8003bc4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	3301      	adds	r3, #1
 8003bca:	617b      	str	r3, [r7, #20]
 8003bcc:	697a      	ldr	r2, [r7, #20]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	dbf0      	blt.n	8003bb6 <_read+0x12>
	}

return len;
 8003bd4:	687b      	ldr	r3, [r7, #4]
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3718      	adds	r7, #24
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}

08003bde <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003bde:	b580      	push	{r7, lr}
 8003be0:	b086      	sub	sp, #24
 8003be2:	af00      	add	r7, sp, #0
 8003be4:	60f8      	str	r0, [r7, #12]
 8003be6:	60b9      	str	r1, [r7, #8]
 8003be8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003bea:	2300      	movs	r3, #0
 8003bec:	617b      	str	r3, [r7, #20]
 8003bee:	e009      	b.n	8003c04 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	1c5a      	adds	r2, r3, #1
 8003bf4:	60ba      	str	r2, [r7, #8]
 8003bf6:	781b      	ldrb	r3, [r3, #0]
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f7ff fc53 	bl	80034a4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	3301      	adds	r3, #1
 8003c02:	617b      	str	r3, [r7, #20]
 8003c04:	697a      	ldr	r2, [r7, #20]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	dbf1      	blt.n	8003bf0 <_write+0x12>
	}
	return len;
 8003c0c:	687b      	ldr	r3, [r7, #4]
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3718      	adds	r7, #24
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}

08003c16 <_close>:

int _close(int file)
{
 8003c16:	b480      	push	{r7}
 8003c18:	b083      	sub	sp, #12
 8003c1a:	af00      	add	r7, sp, #0
 8003c1c:	6078      	str	r0, [r7, #4]
	return -1;
 8003c1e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	370c      	adds	r7, #12
 8003c26:	46bd      	mov	sp, r7
 8003c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2c:	4770      	bx	lr

08003c2e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003c2e:	b480      	push	{r7}
 8003c30:	b083      	sub	sp, #12
 8003c32:	af00      	add	r7, sp, #0
 8003c34:	6078      	str	r0, [r7, #4]
 8003c36:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003c3e:	605a      	str	r2, [r3, #4]
	return 0;
 8003c40:	2300      	movs	r3, #0
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	370c      	adds	r7, #12
 8003c46:	46bd      	mov	sp, r7
 8003c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4c:	4770      	bx	lr

08003c4e <_isatty>:

int _isatty(int file)
{
 8003c4e:	b480      	push	{r7}
 8003c50:	b083      	sub	sp, #12
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	6078      	str	r0, [r7, #4]
	return 1;
 8003c56:	2301      	movs	r3, #1
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	370c      	adds	r7, #12
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c62:	4770      	bx	lr

08003c64 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b085      	sub	sp, #20
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	60f8      	str	r0, [r7, #12]
 8003c6c:	60b9      	str	r1, [r7, #8]
 8003c6e:	607a      	str	r2, [r7, #4]
	return 0;
 8003c70:	2300      	movs	r3, #0
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	3714      	adds	r7, #20
 8003c76:	46bd      	mov	sp, r7
 8003c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7c:	4770      	bx	lr
	...

08003c80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b086      	sub	sp, #24
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003c88:	4a14      	ldr	r2, [pc, #80]	; (8003cdc <_sbrk+0x5c>)
 8003c8a:	4b15      	ldr	r3, [pc, #84]	; (8003ce0 <_sbrk+0x60>)
 8003c8c:	1ad3      	subs	r3, r2, r3
 8003c8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003c94:	4b13      	ldr	r3, [pc, #76]	; (8003ce4 <_sbrk+0x64>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d102      	bne.n	8003ca2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003c9c:	4b11      	ldr	r3, [pc, #68]	; (8003ce4 <_sbrk+0x64>)
 8003c9e:	4a12      	ldr	r2, [pc, #72]	; (8003ce8 <_sbrk+0x68>)
 8003ca0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003ca2:	4b10      	ldr	r3, [pc, #64]	; (8003ce4 <_sbrk+0x64>)
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	4413      	add	r3, r2
 8003caa:	693a      	ldr	r2, [r7, #16]
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d207      	bcs.n	8003cc0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003cb0:	f016 fad6 	bl	801a260 <__errno>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	220c      	movs	r2, #12
 8003cb8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003cba:	f04f 33ff 	mov.w	r3, #4294967295
 8003cbe:	e009      	b.n	8003cd4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003cc0:	4b08      	ldr	r3, [pc, #32]	; (8003ce4 <_sbrk+0x64>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003cc6:	4b07      	ldr	r3, [pc, #28]	; (8003ce4 <_sbrk+0x64>)
 8003cc8:	681a      	ldr	r2, [r3, #0]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	4413      	add	r3, r2
 8003cce:	4a05      	ldr	r2, [pc, #20]	; (8003ce4 <_sbrk+0x64>)
 8003cd0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	3718      	adds	r7, #24
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}
 8003cdc:	20020000 	.word	0x20020000
 8003ce0:	00000400 	.word	0x00000400
 8003ce4:	200009f4 	.word	0x200009f4
 8003ce8:	20013e80 	.word	0x20013e80

08003cec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003cec:	b480      	push	{r7}
 8003cee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003cf0:	4b06      	ldr	r3, [pc, #24]	; (8003d0c <SystemInit+0x20>)
 8003cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cf6:	4a05      	ldr	r2, [pc, #20]	; (8003d0c <SystemInit+0x20>)
 8003cf8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003cfc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003d00:	bf00      	nop
 8003d02:	46bd      	mov	sp, r7
 8003d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d08:	4770      	bx	lr
 8003d0a:	bf00      	nop
 8003d0c:	e000ed00 	.word	0xe000ed00

08003d10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003d10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003d48 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003d14:	480d      	ldr	r0, [pc, #52]	; (8003d4c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003d16:	490e      	ldr	r1, [pc, #56]	; (8003d50 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003d18:	4a0e      	ldr	r2, [pc, #56]	; (8003d54 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003d1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003d1c:	e002      	b.n	8003d24 <LoopCopyDataInit>

08003d1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003d1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003d20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003d22:	3304      	adds	r3, #4

08003d24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003d24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003d26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003d28:	d3f9      	bcc.n	8003d1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003d2a:	4a0b      	ldr	r2, [pc, #44]	; (8003d58 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003d2c:	4c0b      	ldr	r4, [pc, #44]	; (8003d5c <LoopFillZerobss+0x26>)
  movs r3, #0
 8003d2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003d30:	e001      	b.n	8003d36 <LoopFillZerobss>

08003d32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003d32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003d34:	3204      	adds	r2, #4

08003d36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003d36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003d38:	d3fb      	bcc.n	8003d32 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003d3a:	f7ff ffd7 	bl	8003cec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003d3e:	f016 fa95 	bl	801a26c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003d42:	f7ff f9af 	bl	80030a4 <main>
  bx  lr    
 8003d46:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003d48:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003d4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003d50:	20000298 	.word	0x20000298
  ldr r2, =_sidata
 8003d54:	0806ccd8 	.word	0x0806ccd8
  ldr r2, =_sbss
 8003d58:	20000298 	.word	0x20000298
  ldr r4, =_ebss
 8003d5c:	20013e80 	.word	0x20013e80

08003d60 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003d60:	e7fe      	b.n	8003d60 <ADC_IRQHandler>
	...

08003d64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003d68:	4b0e      	ldr	r3, [pc, #56]	; (8003da4 <HAL_Init+0x40>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a0d      	ldr	r2, [pc, #52]	; (8003da4 <HAL_Init+0x40>)
 8003d6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d72:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003d74:	4b0b      	ldr	r3, [pc, #44]	; (8003da4 <HAL_Init+0x40>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a0a      	ldr	r2, [pc, #40]	; (8003da4 <HAL_Init+0x40>)
 8003d7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003d7e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003d80:	4b08      	ldr	r3, [pc, #32]	; (8003da4 <HAL_Init+0x40>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a07      	ldr	r2, [pc, #28]	; (8003da4 <HAL_Init+0x40>)
 8003d86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d8a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003d8c:	2003      	movs	r0, #3
 8003d8e:	f000 f973 	bl	8004078 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003d92:	200f      	movs	r0, #15
 8003d94:	f000 f808 	bl	8003da8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003d98:	f7ff fb9c 	bl	80034d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003d9c:	2300      	movs	r3, #0
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	bf00      	nop
 8003da4:	40023c00 	.word	0x40023c00

08003da8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b082      	sub	sp, #8
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003db0:	4b12      	ldr	r3, [pc, #72]	; (8003dfc <HAL_InitTick+0x54>)
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	4b12      	ldr	r3, [pc, #72]	; (8003e00 <HAL_InitTick+0x58>)
 8003db6:	781b      	ldrb	r3, [r3, #0]
 8003db8:	4619      	mov	r1, r3
 8003dba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003dbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8003dc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f000 f999 	bl	80040fe <HAL_SYSTICK_Config>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d001      	beq.n	8003dd6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e00e      	b.n	8003df4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2b0f      	cmp	r3, #15
 8003dda:	d80a      	bhi.n	8003df2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003ddc:	2200      	movs	r2, #0
 8003dde:	6879      	ldr	r1, [r7, #4]
 8003de0:	f04f 30ff 	mov.w	r0, #4294967295
 8003de4:	f000 f953 	bl	800408e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003de8:	4a06      	ldr	r2, [pc, #24]	; (8003e04 <HAL_InitTick+0x5c>)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003dee:	2300      	movs	r3, #0
 8003df0:	e000      	b.n	8003df4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	3708      	adds	r7, #8
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}
 8003dfc:	200000a8 	.word	0x200000a8
 8003e00:	200000b0 	.word	0x200000b0
 8003e04:	200000ac 	.word	0x200000ac

08003e08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003e0c:	4b06      	ldr	r3, [pc, #24]	; (8003e28 <HAL_IncTick+0x20>)
 8003e0e:	781b      	ldrb	r3, [r3, #0]
 8003e10:	461a      	mov	r2, r3
 8003e12:	4b06      	ldr	r3, [pc, #24]	; (8003e2c <HAL_IncTick+0x24>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4413      	add	r3, r2
 8003e18:	4a04      	ldr	r2, [pc, #16]	; (8003e2c <HAL_IncTick+0x24>)
 8003e1a:	6013      	str	r3, [r2, #0]
}
 8003e1c:	bf00      	nop
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e24:	4770      	bx	lr
 8003e26:	bf00      	nop
 8003e28:	200000b0 	.word	0x200000b0
 8003e2c:	200009f8 	.word	0x200009f8

08003e30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003e30:	b480      	push	{r7}
 8003e32:	af00      	add	r7, sp, #0
  return uwTick;
 8003e34:	4b03      	ldr	r3, [pc, #12]	; (8003e44 <HAL_GetTick+0x14>)
 8003e36:	681b      	ldr	r3, [r3, #0]
}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e40:	4770      	bx	lr
 8003e42:	bf00      	nop
 8003e44:	200009f8 	.word	0x200009f8

08003e48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b084      	sub	sp, #16
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003e50:	f7ff ffee 	bl	8003e30 <HAL_GetTick>
 8003e54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e60:	d005      	beq.n	8003e6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003e62:	4b0a      	ldr	r3, [pc, #40]	; (8003e8c <HAL_Delay+0x44>)
 8003e64:	781b      	ldrb	r3, [r3, #0]
 8003e66:	461a      	mov	r2, r3
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	4413      	add	r3, r2
 8003e6c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003e6e:	bf00      	nop
 8003e70:	f7ff ffde 	bl	8003e30 <HAL_GetTick>
 8003e74:	4602      	mov	r2, r0
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	1ad3      	subs	r3, r2, r3
 8003e7a:	68fa      	ldr	r2, [r7, #12]
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d8f7      	bhi.n	8003e70 <HAL_Delay+0x28>
  {
  }
}
 8003e80:	bf00      	nop
 8003e82:	bf00      	nop
 8003e84:	3710      	adds	r7, #16
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}
 8003e8a:	bf00      	nop
 8003e8c:	200000b0 	.word	0x200000b0

08003e90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b085      	sub	sp, #20
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	f003 0307 	and.w	r3, r3, #7
 8003e9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ea0:	4b0c      	ldr	r3, [pc, #48]	; (8003ed4 <__NVIC_SetPriorityGrouping+0x44>)
 8003ea2:	68db      	ldr	r3, [r3, #12]
 8003ea4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003ea6:	68ba      	ldr	r2, [r7, #8]
 8003ea8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003eac:	4013      	ands	r3, r2
 8003eae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003eb8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003ebc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ec0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ec2:	4a04      	ldr	r2, [pc, #16]	; (8003ed4 <__NVIC_SetPriorityGrouping+0x44>)
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	60d3      	str	r3, [r2, #12]
}
 8003ec8:	bf00      	nop
 8003eca:	3714      	adds	r7, #20
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed2:	4770      	bx	lr
 8003ed4:	e000ed00 	.word	0xe000ed00

08003ed8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003edc:	4b04      	ldr	r3, [pc, #16]	; (8003ef0 <__NVIC_GetPriorityGrouping+0x18>)
 8003ede:	68db      	ldr	r3, [r3, #12]
 8003ee0:	0a1b      	lsrs	r3, r3, #8
 8003ee2:	f003 0307 	and.w	r3, r3, #7
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eee:	4770      	bx	lr
 8003ef0:	e000ed00 	.word	0xe000ed00

08003ef4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b083      	sub	sp, #12
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	4603      	mov	r3, r0
 8003efc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	db0b      	blt.n	8003f1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f06:	79fb      	ldrb	r3, [r7, #7]
 8003f08:	f003 021f 	and.w	r2, r3, #31
 8003f0c:	4907      	ldr	r1, [pc, #28]	; (8003f2c <__NVIC_EnableIRQ+0x38>)
 8003f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f12:	095b      	lsrs	r3, r3, #5
 8003f14:	2001      	movs	r0, #1
 8003f16:	fa00 f202 	lsl.w	r2, r0, r2
 8003f1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003f1e:	bf00      	nop
 8003f20:	370c      	adds	r7, #12
 8003f22:	46bd      	mov	sp, r7
 8003f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f28:	4770      	bx	lr
 8003f2a:	bf00      	nop
 8003f2c:	e000e100 	.word	0xe000e100

08003f30 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b083      	sub	sp, #12
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	4603      	mov	r3, r0
 8003f38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	db12      	blt.n	8003f68 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f42:	79fb      	ldrb	r3, [r7, #7]
 8003f44:	f003 021f 	and.w	r2, r3, #31
 8003f48:	490a      	ldr	r1, [pc, #40]	; (8003f74 <__NVIC_DisableIRQ+0x44>)
 8003f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f4e:	095b      	lsrs	r3, r3, #5
 8003f50:	2001      	movs	r0, #1
 8003f52:	fa00 f202 	lsl.w	r2, r0, r2
 8003f56:	3320      	adds	r3, #32
 8003f58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003f5c:	f3bf 8f4f 	dsb	sy
}
 8003f60:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003f62:	f3bf 8f6f 	isb	sy
}
 8003f66:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003f68:	bf00      	nop
 8003f6a:	370c      	adds	r7, #12
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f72:	4770      	bx	lr
 8003f74:	e000e100 	.word	0xe000e100

08003f78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b083      	sub	sp, #12
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	4603      	mov	r3, r0
 8003f80:	6039      	str	r1, [r7, #0]
 8003f82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	db0a      	blt.n	8003fa2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	b2da      	uxtb	r2, r3
 8003f90:	490c      	ldr	r1, [pc, #48]	; (8003fc4 <__NVIC_SetPriority+0x4c>)
 8003f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f96:	0112      	lsls	r2, r2, #4
 8003f98:	b2d2      	uxtb	r2, r2
 8003f9a:	440b      	add	r3, r1
 8003f9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003fa0:	e00a      	b.n	8003fb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	b2da      	uxtb	r2, r3
 8003fa6:	4908      	ldr	r1, [pc, #32]	; (8003fc8 <__NVIC_SetPriority+0x50>)
 8003fa8:	79fb      	ldrb	r3, [r7, #7]
 8003faa:	f003 030f 	and.w	r3, r3, #15
 8003fae:	3b04      	subs	r3, #4
 8003fb0:	0112      	lsls	r2, r2, #4
 8003fb2:	b2d2      	uxtb	r2, r2
 8003fb4:	440b      	add	r3, r1
 8003fb6:	761a      	strb	r2, [r3, #24]
}
 8003fb8:	bf00      	nop
 8003fba:	370c      	adds	r7, #12
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc2:	4770      	bx	lr
 8003fc4:	e000e100 	.word	0xe000e100
 8003fc8:	e000ed00 	.word	0xe000ed00

08003fcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b089      	sub	sp, #36	; 0x24
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	60f8      	str	r0, [r7, #12]
 8003fd4:	60b9      	str	r1, [r7, #8]
 8003fd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	f003 0307 	and.w	r3, r3, #7
 8003fde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003fe0:	69fb      	ldr	r3, [r7, #28]
 8003fe2:	f1c3 0307 	rsb	r3, r3, #7
 8003fe6:	2b04      	cmp	r3, #4
 8003fe8:	bf28      	it	cs
 8003fea:	2304      	movcs	r3, #4
 8003fec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003fee:	69fb      	ldr	r3, [r7, #28]
 8003ff0:	3304      	adds	r3, #4
 8003ff2:	2b06      	cmp	r3, #6
 8003ff4:	d902      	bls.n	8003ffc <NVIC_EncodePriority+0x30>
 8003ff6:	69fb      	ldr	r3, [r7, #28]
 8003ff8:	3b03      	subs	r3, #3
 8003ffa:	e000      	b.n	8003ffe <NVIC_EncodePriority+0x32>
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004000:	f04f 32ff 	mov.w	r2, #4294967295
 8004004:	69bb      	ldr	r3, [r7, #24]
 8004006:	fa02 f303 	lsl.w	r3, r2, r3
 800400a:	43da      	mvns	r2, r3
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	401a      	ands	r2, r3
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004014:	f04f 31ff 	mov.w	r1, #4294967295
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	fa01 f303 	lsl.w	r3, r1, r3
 800401e:	43d9      	mvns	r1, r3
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004024:	4313      	orrs	r3, r2
         );
}
 8004026:	4618      	mov	r0, r3
 8004028:	3724      	adds	r7, #36	; 0x24
 800402a:	46bd      	mov	sp, r7
 800402c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004030:	4770      	bx	lr
	...

08004034 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b082      	sub	sp, #8
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	3b01      	subs	r3, #1
 8004040:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004044:	d301      	bcc.n	800404a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004046:	2301      	movs	r3, #1
 8004048:	e00f      	b.n	800406a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800404a:	4a0a      	ldr	r2, [pc, #40]	; (8004074 <SysTick_Config+0x40>)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	3b01      	subs	r3, #1
 8004050:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004052:	210f      	movs	r1, #15
 8004054:	f04f 30ff 	mov.w	r0, #4294967295
 8004058:	f7ff ff8e 	bl	8003f78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800405c:	4b05      	ldr	r3, [pc, #20]	; (8004074 <SysTick_Config+0x40>)
 800405e:	2200      	movs	r2, #0
 8004060:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004062:	4b04      	ldr	r3, [pc, #16]	; (8004074 <SysTick_Config+0x40>)
 8004064:	2207      	movs	r2, #7
 8004066:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004068:	2300      	movs	r3, #0
}
 800406a:	4618      	mov	r0, r3
 800406c:	3708      	adds	r7, #8
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}
 8004072:	bf00      	nop
 8004074:	e000e010 	.word	0xe000e010

08004078 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b082      	sub	sp, #8
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004080:	6878      	ldr	r0, [r7, #4]
 8004082:	f7ff ff05 	bl	8003e90 <__NVIC_SetPriorityGrouping>
}
 8004086:	bf00      	nop
 8004088:	3708      	adds	r7, #8
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}

0800408e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800408e:	b580      	push	{r7, lr}
 8004090:	b086      	sub	sp, #24
 8004092:	af00      	add	r7, sp, #0
 8004094:	4603      	mov	r3, r0
 8004096:	60b9      	str	r1, [r7, #8]
 8004098:	607a      	str	r2, [r7, #4]
 800409a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800409c:	2300      	movs	r3, #0
 800409e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80040a0:	f7ff ff1a 	bl	8003ed8 <__NVIC_GetPriorityGrouping>
 80040a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80040a6:	687a      	ldr	r2, [r7, #4]
 80040a8:	68b9      	ldr	r1, [r7, #8]
 80040aa:	6978      	ldr	r0, [r7, #20]
 80040ac:	f7ff ff8e 	bl	8003fcc <NVIC_EncodePriority>
 80040b0:	4602      	mov	r2, r0
 80040b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040b6:	4611      	mov	r1, r2
 80040b8:	4618      	mov	r0, r3
 80040ba:	f7ff ff5d 	bl	8003f78 <__NVIC_SetPriority>
}
 80040be:	bf00      	nop
 80040c0:	3718      	adds	r7, #24
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}

080040c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80040c6:	b580      	push	{r7, lr}
 80040c8:	b082      	sub	sp, #8
 80040ca:	af00      	add	r7, sp, #0
 80040cc:	4603      	mov	r3, r0
 80040ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80040d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040d4:	4618      	mov	r0, r3
 80040d6:	f7ff ff0d 	bl	8003ef4 <__NVIC_EnableIRQ>
}
 80040da:	bf00      	nop
 80040dc:	3708      	adds	r7, #8
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}

080040e2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80040e2:	b580      	push	{r7, lr}
 80040e4:	b082      	sub	sp, #8
 80040e6:	af00      	add	r7, sp, #0
 80040e8:	4603      	mov	r3, r0
 80040ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80040ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040f0:	4618      	mov	r0, r3
 80040f2:	f7ff ff1d 	bl	8003f30 <__NVIC_DisableIRQ>
}
 80040f6:	bf00      	nop
 80040f8:	3708      	adds	r7, #8
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}

080040fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80040fe:	b580      	push	{r7, lr}
 8004100:	b082      	sub	sp, #8
 8004102:	af00      	add	r7, sp, #0
 8004104:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f7ff ff94 	bl	8004034 <SysTick_Config>
 800410c:	4603      	mov	r3, r0
}
 800410e:	4618      	mov	r0, r3
 8004110:	3708      	adds	r7, #8
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}
	...

08004118 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8004118:	b480      	push	{r7}
 800411a:	b083      	sub	sp, #12
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2b04      	cmp	r3, #4
 8004124:	d106      	bne.n	8004134 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8004126:	4b09      	ldr	r3, [pc, #36]	; (800414c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a08      	ldr	r2, [pc, #32]	; (800414c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800412c:	f043 0304 	orr.w	r3, r3, #4
 8004130:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8004132:	e005      	b.n	8004140 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8004134:	4b05      	ldr	r3, [pc, #20]	; (800414c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a04      	ldr	r2, [pc, #16]	; (800414c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800413a:	f023 0304 	bic.w	r3, r3, #4
 800413e:	6013      	str	r3, [r2, #0]
}
 8004140:	bf00      	nop
 8004142:	370c      	adds	r7, #12
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr
 800414c:	e000e010 	.word	0xe000e010

08004150 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b086      	sub	sp, #24
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004158:	2300      	movs	r3, #0
 800415a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800415c:	f7ff fe68 	bl	8003e30 <HAL_GetTick>
 8004160:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d101      	bne.n	800416c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004168:	2301      	movs	r3, #1
 800416a:	e099      	b.n	80042a0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2202      	movs	r2, #2
 8004170:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2200      	movs	r2, #0
 8004178:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f022 0201 	bic.w	r2, r2, #1
 800418a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800418c:	e00f      	b.n	80041ae <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800418e:	f7ff fe4f 	bl	8003e30 <HAL_GetTick>
 8004192:	4602      	mov	r2, r0
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	1ad3      	subs	r3, r2, r3
 8004198:	2b05      	cmp	r3, #5
 800419a:	d908      	bls.n	80041ae <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2220      	movs	r2, #32
 80041a0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2203      	movs	r2, #3
 80041a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80041aa:	2303      	movs	r3, #3
 80041ac:	e078      	b.n	80042a0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f003 0301 	and.w	r3, r3, #1
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d1e8      	bne.n	800418e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80041c4:	697a      	ldr	r2, [r7, #20]
 80041c6:	4b38      	ldr	r3, [pc, #224]	; (80042a8 <HAL_DMA_Init+0x158>)
 80041c8:	4013      	ands	r3, r2
 80041ca:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	685a      	ldr	r2, [r3, #4]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80041da:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	691b      	ldr	r3, [r3, #16]
 80041e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	699b      	ldr	r3, [r3, #24]
 80041ec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6a1b      	ldr	r3, [r3, #32]
 80041f8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80041fa:	697a      	ldr	r2, [r7, #20]
 80041fc:	4313      	orrs	r3, r2
 80041fe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004204:	2b04      	cmp	r3, #4
 8004206:	d107      	bne.n	8004218 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004210:	4313      	orrs	r3, r2
 8004212:	697a      	ldr	r2, [r7, #20]
 8004214:	4313      	orrs	r3, r2
 8004216:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	697a      	ldr	r2, [r7, #20]
 800421e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	695b      	ldr	r3, [r3, #20]
 8004226:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	f023 0307 	bic.w	r3, r3, #7
 800422e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004234:	697a      	ldr	r2, [r7, #20]
 8004236:	4313      	orrs	r3, r2
 8004238:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800423e:	2b04      	cmp	r3, #4
 8004240:	d117      	bne.n	8004272 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004246:	697a      	ldr	r2, [r7, #20]
 8004248:	4313      	orrs	r3, r2
 800424a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004250:	2b00      	cmp	r3, #0
 8004252:	d00e      	beq.n	8004272 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	f000 faef 	bl	8004838 <DMA_CheckFifoParam>
 800425a:	4603      	mov	r3, r0
 800425c:	2b00      	cmp	r3, #0
 800425e:	d008      	beq.n	8004272 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2240      	movs	r2, #64	; 0x40
 8004264:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2201      	movs	r2, #1
 800426a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800426e:	2301      	movs	r3, #1
 8004270:	e016      	b.n	80042a0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	697a      	ldr	r2, [r7, #20]
 8004278:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f000 faa6 	bl	80047cc <DMA_CalcBaseAndBitshift>
 8004280:	4603      	mov	r3, r0
 8004282:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004288:	223f      	movs	r2, #63	; 0x3f
 800428a:	409a      	lsls	r2, r3
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2200      	movs	r2, #0
 8004294:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2201      	movs	r2, #1
 800429a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800429e:	2300      	movs	r3, #0
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	3718      	adds	r7, #24
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}
 80042a8:	f010803f 	.word	0xf010803f

080042ac <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b084      	sub	sp, #16
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d101      	bne.n	80042be <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	e050      	b.n	8004360 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80042c4:	b2db      	uxtb	r3, r3
 80042c6:	2b02      	cmp	r3, #2
 80042c8:	d101      	bne.n	80042ce <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80042ca:	2302      	movs	r3, #2
 80042cc:	e048      	b.n	8004360 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	681a      	ldr	r2, [r3, #0]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f022 0201 	bic.w	r2, r2, #1
 80042dc:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	2200      	movs	r2, #0
 80042e4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	2200      	movs	r2, #0
 80042ec:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	2200      	movs	r2, #0
 80042f4:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	2200      	movs	r2, #0
 80042fc:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	2200      	movs	r2, #0
 8004304:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	2221      	movs	r2, #33	; 0x21
 800430c:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	f000 fa5c 	bl	80047cc <DMA_CalcBaseAndBitshift>
 8004314:	4603      	mov	r3, r0
 8004316:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2200      	movs	r2, #0
 800431c:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2200      	movs	r2, #0
 8004322:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2200      	movs	r2, #0
 8004328:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2200      	movs	r2, #0
 800432e:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2200      	movs	r2, #0
 8004334:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2200      	movs	r2, #0
 800433a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004340:	223f      	movs	r2, #63	; 0x3f
 8004342:	409a      	lsls	r2, r3
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2200      	movs	r2, #0
 800434c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2200      	movs	r2, #0
 8004352:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2200      	movs	r2, #0
 800435a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800435e:	2300      	movs	r3, #0
}
 8004360:	4618      	mov	r0, r3
 8004362:	3710      	adds	r7, #16
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}

08004368 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b086      	sub	sp, #24
 800436c:	af00      	add	r7, sp, #0
 800436e:	60f8      	str	r0, [r7, #12]
 8004370:	60b9      	str	r1, [r7, #8]
 8004372:	607a      	str	r2, [r7, #4]
 8004374:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004376:	2300      	movs	r3, #0
 8004378:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800437e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004386:	2b01      	cmp	r3, #1
 8004388:	d101      	bne.n	800438e <HAL_DMA_Start_IT+0x26>
 800438a:	2302      	movs	r3, #2
 800438c:	e040      	b.n	8004410 <HAL_DMA_Start_IT+0xa8>
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2201      	movs	r2, #1
 8004392:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800439c:	b2db      	uxtb	r3, r3
 800439e:	2b01      	cmp	r3, #1
 80043a0:	d12f      	bne.n	8004402 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	2202      	movs	r2, #2
 80043a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2200      	movs	r2, #0
 80043ae:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	687a      	ldr	r2, [r7, #4]
 80043b4:	68b9      	ldr	r1, [r7, #8]
 80043b6:	68f8      	ldr	r0, [r7, #12]
 80043b8:	f000 f9da 	bl	8004770 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043c0:	223f      	movs	r2, #63	; 0x3f
 80043c2:	409a      	lsls	r2, r3
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f042 0216 	orr.w	r2, r2, #22
 80043d6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d007      	beq.n	80043f0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	681a      	ldr	r2, [r3, #0]
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f042 0208 	orr.w	r2, r2, #8
 80043ee:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	681a      	ldr	r2, [r3, #0]
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f042 0201 	orr.w	r2, r2, #1
 80043fe:	601a      	str	r2, [r3, #0]
 8004400:	e005      	b.n	800440e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2200      	movs	r2, #0
 8004406:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800440a:	2302      	movs	r3, #2
 800440c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800440e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004410:	4618      	mov	r0, r3
 8004412:	3718      	adds	r7, #24
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}

08004418 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004418:	b480      	push	{r7}
 800441a:	b083      	sub	sp, #12
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004426:	b2db      	uxtb	r3, r3
 8004428:	2b02      	cmp	r3, #2
 800442a:	d004      	beq.n	8004436 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2280      	movs	r2, #128	; 0x80
 8004430:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	e00c      	b.n	8004450 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2205      	movs	r2, #5
 800443a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	681a      	ldr	r2, [r3, #0]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f022 0201 	bic.w	r2, r2, #1
 800444c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800444e:	2300      	movs	r3, #0
}
 8004450:	4618      	mov	r0, r3
 8004452:	370c      	adds	r7, #12
 8004454:	46bd      	mov	sp, r7
 8004456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445a:	4770      	bx	lr

0800445c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b086      	sub	sp, #24
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004464:	2300      	movs	r3, #0
 8004466:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004468:	4b8e      	ldr	r3, [pc, #568]	; (80046a4 <HAL_DMA_IRQHandler+0x248>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a8e      	ldr	r2, [pc, #568]	; (80046a8 <HAL_DMA_IRQHandler+0x24c>)
 800446e:	fba2 2303 	umull	r2, r3, r2, r3
 8004472:	0a9b      	lsrs	r3, r3, #10
 8004474:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800447a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004486:	2208      	movs	r2, #8
 8004488:	409a      	lsls	r2, r3
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	4013      	ands	r3, r2
 800448e:	2b00      	cmp	r3, #0
 8004490:	d01a      	beq.n	80044c8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f003 0304 	and.w	r3, r3, #4
 800449c:	2b00      	cmp	r3, #0
 800449e:	d013      	beq.n	80044c8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	681a      	ldr	r2, [r3, #0]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f022 0204 	bic.w	r2, r2, #4
 80044ae:	601a      	str	r2, [r3, #0]

      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044b4:	2208      	movs	r2, #8
 80044b6:	409a      	lsls	r2, r3
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044c0:	f043 0201 	orr.w	r2, r3, #1
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044cc:	2201      	movs	r2, #1
 80044ce:	409a      	lsls	r2, r3
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	4013      	ands	r3, r2
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d012      	beq.n	80044fe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	695b      	ldr	r3, [r3, #20]
 80044de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d00b      	beq.n	80044fe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044ea:	2201      	movs	r2, #1
 80044ec:	409a      	lsls	r2, r3
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044f6:	f043 0202 	orr.w	r2, r3, #2
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004502:	2204      	movs	r2, #4
 8004504:	409a      	lsls	r2, r3
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	4013      	ands	r3, r2
 800450a:	2b00      	cmp	r3, #0
 800450c:	d012      	beq.n	8004534 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f003 0302 	and.w	r3, r3, #2
 8004518:	2b00      	cmp	r3, #0
 800451a:	d00b      	beq.n	8004534 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004520:	2204      	movs	r2, #4
 8004522:	409a      	lsls	r2, r3
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800452c:	f043 0204 	orr.w	r2, r3, #4
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004538:	2210      	movs	r2, #16
 800453a:	409a      	lsls	r2, r3
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	4013      	ands	r3, r2
 8004540:	2b00      	cmp	r3, #0
 8004542:	d043      	beq.n	80045cc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 0308 	and.w	r3, r3, #8
 800454e:	2b00      	cmp	r3, #0
 8004550:	d03c      	beq.n	80045cc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004556:	2210      	movs	r2, #16
 8004558:	409a      	lsls	r2, r3
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	609a      	str	r2, [r3, #8]

      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004568:	2b00      	cmp	r3, #0
 800456a:	d018      	beq.n	800459e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004576:	2b00      	cmp	r3, #0
 8004578:	d108      	bne.n	800458c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800457e:	2b00      	cmp	r3, #0
 8004580:	d024      	beq.n	80045cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	4798      	blx	r3
 800458a:	e01f      	b.n	80045cc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004590:	2b00      	cmp	r3, #0
 8004592:	d01b      	beq.n	80045cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004598:	6878      	ldr	r0, [r7, #4]
 800459a:	4798      	blx	r3
 800459c:	e016      	b.n	80045cc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d107      	bne.n	80045bc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f022 0208 	bic.w	r2, r2, #8
 80045ba:	601a      	str	r2, [r3, #0]
        }

        if(hdma->XferHalfCpltCallback != NULL)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d003      	beq.n	80045cc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c8:	6878      	ldr	r0, [r7, #4]
 80045ca:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045d0:	2220      	movs	r2, #32
 80045d2:	409a      	lsls	r2, r3
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	4013      	ands	r3, r2
 80045d8:	2b00      	cmp	r3, #0
 80045da:	f000 808f 	beq.w	80046fc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f003 0310 	and.w	r3, r3, #16
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	f000 8087 	beq.w	80046fc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045f2:	2220      	movs	r2, #32
 80045f4:	409a      	lsls	r2, r3
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004600:	b2db      	uxtb	r3, r3
 8004602:	2b05      	cmp	r3, #5
 8004604:	d136      	bne.n	8004674 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	681a      	ldr	r2, [r3, #0]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f022 0216 	bic.w	r2, r2, #22
 8004614:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	695a      	ldr	r2, [r3, #20]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004624:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800462a:	2b00      	cmp	r3, #0
 800462c:	d103      	bne.n	8004636 <HAL_DMA_IRQHandler+0x1da>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004632:	2b00      	cmp	r3, #0
 8004634:	d007      	beq.n	8004646 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	681a      	ldr	r2, [r3, #0]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f022 0208 	bic.w	r2, r2, #8
 8004644:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800464a:	223f      	movs	r2, #63	; 0x3f
 800464c:	409a      	lsls	r2, r3
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2201      	movs	r2, #1
 8004656:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2200      	movs	r2, #0
 800465e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004666:	2b00      	cmp	r3, #0
 8004668:	d07e      	beq.n	8004768 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	4798      	blx	r3
        }
        return;
 8004672:	e079      	b.n	8004768 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800467e:	2b00      	cmp	r3, #0
 8004680:	d01d      	beq.n	80046be <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800468c:	2b00      	cmp	r3, #0
 800468e:	d10d      	bne.n	80046ac <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004694:	2b00      	cmp	r3, #0
 8004696:	d031      	beq.n	80046fc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800469c:	6878      	ldr	r0, [r7, #4]
 800469e:	4798      	blx	r3
 80046a0:	e02c      	b.n	80046fc <HAL_DMA_IRQHandler+0x2a0>
 80046a2:	bf00      	nop
 80046a4:	200000a8 	.word	0x200000a8
 80046a8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d023      	beq.n	80046fc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046b8:	6878      	ldr	r0, [r7, #4]
 80046ba:	4798      	blx	r3
 80046bc:	e01e      	b.n	80046fc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d10f      	bne.n	80046ec <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	681a      	ldr	r2, [r3, #0]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f022 0210 	bic.w	r2, r2, #16
 80046da:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2201      	movs	r2, #1
 80046e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2200      	movs	r2, #0
 80046e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d003      	beq.n	80046fc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046f8:	6878      	ldr	r0, [r7, #4]
 80046fa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004700:	2b00      	cmp	r3, #0
 8004702:	d032      	beq.n	800476a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004708:	f003 0301 	and.w	r3, r3, #1
 800470c:	2b00      	cmp	r3, #0
 800470e:	d022      	beq.n	8004756 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2205      	movs	r2, #5
 8004714:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	681a      	ldr	r2, [r3, #0]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f022 0201 	bic.w	r2, r2, #1
 8004726:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	3301      	adds	r3, #1
 800472c:	60bb      	str	r3, [r7, #8]
 800472e:	697a      	ldr	r2, [r7, #20]
 8004730:	429a      	cmp	r2, r3
 8004732:	d307      	bcc.n	8004744 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f003 0301 	and.w	r3, r3, #1
 800473e:	2b00      	cmp	r3, #0
 8004740:	d1f2      	bne.n	8004728 <HAL_DMA_IRQHandler+0x2cc>
 8004742:	e000      	b.n	8004746 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004744:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2201      	movs	r2, #1
 800474a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2200      	movs	r2, #0
 8004752:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800475a:	2b00      	cmp	r3, #0
 800475c:	d005      	beq.n	800476a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	4798      	blx	r3
 8004766:	e000      	b.n	800476a <HAL_DMA_IRQHandler+0x30e>
        return;
 8004768:	bf00      	nop
    }
  }
}
 800476a:	3718      	adds	r7, #24
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}

08004770 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004770:	b480      	push	{r7}
 8004772:	b085      	sub	sp, #20
 8004774:	af00      	add	r7, sp, #0
 8004776:	60f8      	str	r0, [r7, #12]
 8004778:	60b9      	str	r1, [r7, #8]
 800477a:	607a      	str	r2, [r7, #4]
 800477c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	681a      	ldr	r2, [r3, #0]
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800478c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	683a      	ldr	r2, [r7, #0]
 8004794:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	2b40      	cmp	r3, #64	; 0x40
 800479c:	d108      	bne.n	80047b0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	687a      	ldr	r2, [r7, #4]
 80047a4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	68ba      	ldr	r2, [r7, #8]
 80047ac:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80047ae:	e007      	b.n	80047c0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	68ba      	ldr	r2, [r7, #8]
 80047b6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	687a      	ldr	r2, [r7, #4]
 80047be:	60da      	str	r2, [r3, #12]
}
 80047c0:	bf00      	nop
 80047c2:	3714      	adds	r7, #20
 80047c4:	46bd      	mov	sp, r7
 80047c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ca:	4770      	bx	lr

080047cc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b085      	sub	sp, #20
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	b2db      	uxtb	r3, r3
 80047da:	3b10      	subs	r3, #16
 80047dc:	4a14      	ldr	r2, [pc, #80]	; (8004830 <DMA_CalcBaseAndBitshift+0x64>)
 80047de:	fba2 2303 	umull	r2, r3, r2, r3
 80047e2:	091b      	lsrs	r3, r3, #4
 80047e4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80047e6:	4a13      	ldr	r2, [pc, #76]	; (8004834 <DMA_CalcBaseAndBitshift+0x68>)
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	4413      	add	r3, r2
 80047ec:	781b      	ldrb	r3, [r3, #0]
 80047ee:	461a      	mov	r2, r3
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	2b03      	cmp	r3, #3
 80047f8:	d909      	bls.n	800480e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004802:	f023 0303 	bic.w	r3, r3, #3
 8004806:	1d1a      	adds	r2, r3, #4
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	659a      	str	r2, [r3, #88]	; 0x58
 800480c:	e007      	b.n	800481e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004816:	f023 0303 	bic.w	r3, r3, #3
 800481a:	687a      	ldr	r2, [r7, #4]
 800481c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004822:	4618      	mov	r0, r3
 8004824:	3714      	adds	r7, #20
 8004826:	46bd      	mov	sp, r7
 8004828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482c:	4770      	bx	lr
 800482e:	bf00      	nop
 8004830:	aaaaaaab 	.word	0xaaaaaaab
 8004834:	08020a94 	.word	0x08020a94

08004838 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004838:	b480      	push	{r7}
 800483a:	b085      	sub	sp, #20
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004840:	2300      	movs	r3, #0
 8004842:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004848:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	699b      	ldr	r3, [r3, #24]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d11f      	bne.n	8004892 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	2b03      	cmp	r3, #3
 8004856:	d856      	bhi.n	8004906 <DMA_CheckFifoParam+0xce>
 8004858:	a201      	add	r2, pc, #4	; (adr r2, 8004860 <DMA_CheckFifoParam+0x28>)
 800485a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800485e:	bf00      	nop
 8004860:	08004871 	.word	0x08004871
 8004864:	08004883 	.word	0x08004883
 8004868:	08004871 	.word	0x08004871
 800486c:	08004907 	.word	0x08004907
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004874:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004878:	2b00      	cmp	r3, #0
 800487a:	d046      	beq.n	800490a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800487c:	2301      	movs	r3, #1
 800487e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004880:	e043      	b.n	800490a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004886:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800488a:	d140      	bne.n	800490e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004890:	e03d      	b.n	800490e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	699b      	ldr	r3, [r3, #24]
 8004896:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800489a:	d121      	bne.n	80048e0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	2b03      	cmp	r3, #3
 80048a0:	d837      	bhi.n	8004912 <DMA_CheckFifoParam+0xda>
 80048a2:	a201      	add	r2, pc, #4	; (adr r2, 80048a8 <DMA_CheckFifoParam+0x70>)
 80048a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048a8:	080048b9 	.word	0x080048b9
 80048ac:	080048bf 	.word	0x080048bf
 80048b0:	080048b9 	.word	0x080048b9
 80048b4:	080048d1 	.word	0x080048d1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80048b8:	2301      	movs	r3, #1
 80048ba:	73fb      	strb	r3, [r7, #15]
      break;
 80048bc:	e030      	b.n	8004920 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d025      	beq.n	8004916 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048ce:	e022      	b.n	8004916 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048d4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80048d8:	d11f      	bne.n	800491a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80048de:	e01c      	b.n	800491a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	2b02      	cmp	r3, #2
 80048e4:	d903      	bls.n	80048ee <DMA_CheckFifoParam+0xb6>
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	2b03      	cmp	r3, #3
 80048ea:	d003      	beq.n	80048f4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80048ec:	e018      	b.n	8004920 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80048ee:	2301      	movs	r3, #1
 80048f0:	73fb      	strb	r3, [r7, #15]
      break;
 80048f2:	e015      	b.n	8004920 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d00e      	beq.n	800491e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004900:	2301      	movs	r3, #1
 8004902:	73fb      	strb	r3, [r7, #15]
      break;
 8004904:	e00b      	b.n	800491e <DMA_CheckFifoParam+0xe6>
      break;
 8004906:	bf00      	nop
 8004908:	e00a      	b.n	8004920 <DMA_CheckFifoParam+0xe8>
      break;
 800490a:	bf00      	nop
 800490c:	e008      	b.n	8004920 <DMA_CheckFifoParam+0xe8>
      break;
 800490e:	bf00      	nop
 8004910:	e006      	b.n	8004920 <DMA_CheckFifoParam+0xe8>
      break;
 8004912:	bf00      	nop
 8004914:	e004      	b.n	8004920 <DMA_CheckFifoParam+0xe8>
      break;
 8004916:	bf00      	nop
 8004918:	e002      	b.n	8004920 <DMA_CheckFifoParam+0xe8>
      break;   
 800491a:	bf00      	nop
 800491c:	e000      	b.n	8004920 <DMA_CheckFifoParam+0xe8>
      break;
 800491e:	bf00      	nop
    }
  } 
  
  return status; 
 8004920:	7bfb      	ldrb	r3, [r7, #15]
}
 8004922:	4618      	mov	r0, r3
 8004924:	3714      	adds	r7, #20
 8004926:	46bd      	mov	sp, r7
 8004928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492c:	4770      	bx	lr
 800492e:	bf00      	nop

08004930 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004930:	b480      	push	{r7}
 8004932:	b089      	sub	sp, #36	; 0x24
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
 8004938:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800493a:	2300      	movs	r3, #0
 800493c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800493e:	2300      	movs	r3, #0
 8004940:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004942:	2300      	movs	r3, #0
 8004944:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004946:	2300      	movs	r3, #0
 8004948:	61fb      	str	r3, [r7, #28]
 800494a:	e159      	b.n	8004c00 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800494c:	2201      	movs	r2, #1
 800494e:	69fb      	ldr	r3, [r7, #28]
 8004950:	fa02 f303 	lsl.w	r3, r2, r3
 8004954:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	697a      	ldr	r2, [r7, #20]
 800495c:	4013      	ands	r3, r2
 800495e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004960:	693a      	ldr	r2, [r7, #16]
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	429a      	cmp	r2, r3
 8004966:	f040 8148 	bne.w	8004bfa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	f003 0303 	and.w	r3, r3, #3
 8004972:	2b01      	cmp	r3, #1
 8004974:	d005      	beq.n	8004982 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800497e:	2b02      	cmp	r3, #2
 8004980:	d130      	bne.n	80049e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004988:	69fb      	ldr	r3, [r7, #28]
 800498a:	005b      	lsls	r3, r3, #1
 800498c:	2203      	movs	r2, #3
 800498e:	fa02 f303 	lsl.w	r3, r2, r3
 8004992:	43db      	mvns	r3, r3
 8004994:	69ba      	ldr	r2, [r7, #24]
 8004996:	4013      	ands	r3, r2
 8004998:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	68da      	ldr	r2, [r3, #12]
 800499e:	69fb      	ldr	r3, [r7, #28]
 80049a0:	005b      	lsls	r3, r3, #1
 80049a2:	fa02 f303 	lsl.w	r3, r2, r3
 80049a6:	69ba      	ldr	r2, [r7, #24]
 80049a8:	4313      	orrs	r3, r2
 80049aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	69ba      	ldr	r2, [r7, #24]
 80049b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80049b8:	2201      	movs	r2, #1
 80049ba:	69fb      	ldr	r3, [r7, #28]
 80049bc:	fa02 f303 	lsl.w	r3, r2, r3
 80049c0:	43db      	mvns	r3, r3
 80049c2:	69ba      	ldr	r2, [r7, #24]
 80049c4:	4013      	ands	r3, r2
 80049c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	091b      	lsrs	r3, r3, #4
 80049ce:	f003 0201 	and.w	r2, r3, #1
 80049d2:	69fb      	ldr	r3, [r7, #28]
 80049d4:	fa02 f303 	lsl.w	r3, r2, r3
 80049d8:	69ba      	ldr	r2, [r7, #24]
 80049da:	4313      	orrs	r3, r2
 80049dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	69ba      	ldr	r2, [r7, #24]
 80049e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	f003 0303 	and.w	r3, r3, #3
 80049ec:	2b03      	cmp	r3, #3
 80049ee:	d017      	beq.n	8004a20 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	68db      	ldr	r3, [r3, #12]
 80049f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80049f6:	69fb      	ldr	r3, [r7, #28]
 80049f8:	005b      	lsls	r3, r3, #1
 80049fa:	2203      	movs	r2, #3
 80049fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004a00:	43db      	mvns	r3, r3
 8004a02:	69ba      	ldr	r2, [r7, #24]
 8004a04:	4013      	ands	r3, r2
 8004a06:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	689a      	ldr	r2, [r3, #8]
 8004a0c:	69fb      	ldr	r3, [r7, #28]
 8004a0e:	005b      	lsls	r3, r3, #1
 8004a10:	fa02 f303 	lsl.w	r3, r2, r3
 8004a14:	69ba      	ldr	r2, [r7, #24]
 8004a16:	4313      	orrs	r3, r2
 8004a18:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	69ba      	ldr	r2, [r7, #24]
 8004a1e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	f003 0303 	and.w	r3, r3, #3
 8004a28:	2b02      	cmp	r3, #2
 8004a2a:	d123      	bne.n	8004a74 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004a2c:	69fb      	ldr	r3, [r7, #28]
 8004a2e:	08da      	lsrs	r2, r3, #3
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	3208      	adds	r2, #8
 8004a34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a38:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004a3a:	69fb      	ldr	r3, [r7, #28]
 8004a3c:	f003 0307 	and.w	r3, r3, #7
 8004a40:	009b      	lsls	r3, r3, #2
 8004a42:	220f      	movs	r2, #15
 8004a44:	fa02 f303 	lsl.w	r3, r2, r3
 8004a48:	43db      	mvns	r3, r3
 8004a4a:	69ba      	ldr	r2, [r7, #24]
 8004a4c:	4013      	ands	r3, r2
 8004a4e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	691a      	ldr	r2, [r3, #16]
 8004a54:	69fb      	ldr	r3, [r7, #28]
 8004a56:	f003 0307 	and.w	r3, r3, #7
 8004a5a:	009b      	lsls	r3, r3, #2
 8004a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a60:	69ba      	ldr	r2, [r7, #24]
 8004a62:	4313      	orrs	r3, r2
 8004a64:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004a66:	69fb      	ldr	r3, [r7, #28]
 8004a68:	08da      	lsrs	r2, r3, #3
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	3208      	adds	r2, #8
 8004a6e:	69b9      	ldr	r1, [r7, #24]
 8004a70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004a7a:	69fb      	ldr	r3, [r7, #28]
 8004a7c:	005b      	lsls	r3, r3, #1
 8004a7e:	2203      	movs	r2, #3
 8004a80:	fa02 f303 	lsl.w	r3, r2, r3
 8004a84:	43db      	mvns	r3, r3
 8004a86:	69ba      	ldr	r2, [r7, #24]
 8004a88:	4013      	ands	r3, r2
 8004a8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	f003 0203 	and.w	r2, r3, #3
 8004a94:	69fb      	ldr	r3, [r7, #28]
 8004a96:	005b      	lsls	r3, r3, #1
 8004a98:	fa02 f303 	lsl.w	r3, r2, r3
 8004a9c:	69ba      	ldr	r2, [r7, #24]
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	69ba      	ldr	r2, [r7, #24]
 8004aa6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	f000 80a2 	beq.w	8004bfa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	60fb      	str	r3, [r7, #12]
 8004aba:	4b57      	ldr	r3, [pc, #348]	; (8004c18 <HAL_GPIO_Init+0x2e8>)
 8004abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004abe:	4a56      	ldr	r2, [pc, #344]	; (8004c18 <HAL_GPIO_Init+0x2e8>)
 8004ac0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004ac4:	6453      	str	r3, [r2, #68]	; 0x44
 8004ac6:	4b54      	ldr	r3, [pc, #336]	; (8004c18 <HAL_GPIO_Init+0x2e8>)
 8004ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ace:	60fb      	str	r3, [r7, #12]
 8004ad0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004ad2:	4a52      	ldr	r2, [pc, #328]	; (8004c1c <HAL_GPIO_Init+0x2ec>)
 8004ad4:	69fb      	ldr	r3, [r7, #28]
 8004ad6:	089b      	lsrs	r3, r3, #2
 8004ad8:	3302      	adds	r3, #2
 8004ada:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ade:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004ae0:	69fb      	ldr	r3, [r7, #28]
 8004ae2:	f003 0303 	and.w	r3, r3, #3
 8004ae6:	009b      	lsls	r3, r3, #2
 8004ae8:	220f      	movs	r2, #15
 8004aea:	fa02 f303 	lsl.w	r3, r2, r3
 8004aee:	43db      	mvns	r3, r3
 8004af0:	69ba      	ldr	r2, [r7, #24]
 8004af2:	4013      	ands	r3, r2
 8004af4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	4a49      	ldr	r2, [pc, #292]	; (8004c20 <HAL_GPIO_Init+0x2f0>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d019      	beq.n	8004b32 <HAL_GPIO_Init+0x202>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	4a48      	ldr	r2, [pc, #288]	; (8004c24 <HAL_GPIO_Init+0x2f4>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d013      	beq.n	8004b2e <HAL_GPIO_Init+0x1fe>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	4a47      	ldr	r2, [pc, #284]	; (8004c28 <HAL_GPIO_Init+0x2f8>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d00d      	beq.n	8004b2a <HAL_GPIO_Init+0x1fa>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	4a46      	ldr	r2, [pc, #280]	; (8004c2c <HAL_GPIO_Init+0x2fc>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d007      	beq.n	8004b26 <HAL_GPIO_Init+0x1f6>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	4a45      	ldr	r2, [pc, #276]	; (8004c30 <HAL_GPIO_Init+0x300>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d101      	bne.n	8004b22 <HAL_GPIO_Init+0x1f2>
 8004b1e:	2304      	movs	r3, #4
 8004b20:	e008      	b.n	8004b34 <HAL_GPIO_Init+0x204>
 8004b22:	2307      	movs	r3, #7
 8004b24:	e006      	b.n	8004b34 <HAL_GPIO_Init+0x204>
 8004b26:	2303      	movs	r3, #3
 8004b28:	e004      	b.n	8004b34 <HAL_GPIO_Init+0x204>
 8004b2a:	2302      	movs	r3, #2
 8004b2c:	e002      	b.n	8004b34 <HAL_GPIO_Init+0x204>
 8004b2e:	2301      	movs	r3, #1
 8004b30:	e000      	b.n	8004b34 <HAL_GPIO_Init+0x204>
 8004b32:	2300      	movs	r3, #0
 8004b34:	69fa      	ldr	r2, [r7, #28]
 8004b36:	f002 0203 	and.w	r2, r2, #3
 8004b3a:	0092      	lsls	r2, r2, #2
 8004b3c:	4093      	lsls	r3, r2
 8004b3e:	69ba      	ldr	r2, [r7, #24]
 8004b40:	4313      	orrs	r3, r2
 8004b42:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004b44:	4935      	ldr	r1, [pc, #212]	; (8004c1c <HAL_GPIO_Init+0x2ec>)
 8004b46:	69fb      	ldr	r3, [r7, #28]
 8004b48:	089b      	lsrs	r3, r3, #2
 8004b4a:	3302      	adds	r3, #2
 8004b4c:	69ba      	ldr	r2, [r7, #24]
 8004b4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004b52:	4b38      	ldr	r3, [pc, #224]	; (8004c34 <HAL_GPIO_Init+0x304>)
 8004b54:	689b      	ldr	r3, [r3, #8]
 8004b56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	43db      	mvns	r3, r3
 8004b5c:	69ba      	ldr	r2, [r7, #24]
 8004b5e:	4013      	ands	r3, r2
 8004b60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d003      	beq.n	8004b76 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004b6e:	69ba      	ldr	r2, [r7, #24]
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	4313      	orrs	r3, r2
 8004b74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004b76:	4a2f      	ldr	r2, [pc, #188]	; (8004c34 <HAL_GPIO_Init+0x304>)
 8004b78:	69bb      	ldr	r3, [r7, #24]
 8004b7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004b7c:	4b2d      	ldr	r3, [pc, #180]	; (8004c34 <HAL_GPIO_Init+0x304>)
 8004b7e:	68db      	ldr	r3, [r3, #12]
 8004b80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	43db      	mvns	r3, r3
 8004b86:	69ba      	ldr	r2, [r7, #24]
 8004b88:	4013      	ands	r3, r2
 8004b8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d003      	beq.n	8004ba0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004b98:	69ba      	ldr	r2, [r7, #24]
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004ba0:	4a24      	ldr	r2, [pc, #144]	; (8004c34 <HAL_GPIO_Init+0x304>)
 8004ba2:	69bb      	ldr	r3, [r7, #24]
 8004ba4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004ba6:	4b23      	ldr	r3, [pc, #140]	; (8004c34 <HAL_GPIO_Init+0x304>)
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	43db      	mvns	r3, r3
 8004bb0:	69ba      	ldr	r2, [r7, #24]
 8004bb2:	4013      	ands	r3, r2
 8004bb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d003      	beq.n	8004bca <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004bc2:	69ba      	ldr	r2, [r7, #24]
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004bca:	4a1a      	ldr	r2, [pc, #104]	; (8004c34 <HAL_GPIO_Init+0x304>)
 8004bcc:	69bb      	ldr	r3, [r7, #24]
 8004bce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004bd0:	4b18      	ldr	r3, [pc, #96]	; (8004c34 <HAL_GPIO_Init+0x304>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	43db      	mvns	r3, r3
 8004bda:	69ba      	ldr	r2, [r7, #24]
 8004bdc:	4013      	ands	r3, r2
 8004bde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d003      	beq.n	8004bf4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004bec:	69ba      	ldr	r2, [r7, #24]
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004bf4:	4a0f      	ldr	r2, [pc, #60]	; (8004c34 <HAL_GPIO_Init+0x304>)
 8004bf6:	69bb      	ldr	r3, [r7, #24]
 8004bf8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004bfa:	69fb      	ldr	r3, [r7, #28]
 8004bfc:	3301      	adds	r3, #1
 8004bfe:	61fb      	str	r3, [r7, #28]
 8004c00:	69fb      	ldr	r3, [r7, #28]
 8004c02:	2b0f      	cmp	r3, #15
 8004c04:	f67f aea2 	bls.w	800494c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004c08:	bf00      	nop
 8004c0a:	bf00      	nop
 8004c0c:	3724      	adds	r7, #36	; 0x24
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c14:	4770      	bx	lr
 8004c16:	bf00      	nop
 8004c18:	40023800 	.word	0x40023800
 8004c1c:	40013800 	.word	0x40013800
 8004c20:	40020000 	.word	0x40020000
 8004c24:	40020400 	.word	0x40020400
 8004c28:	40020800 	.word	0x40020800
 8004c2c:	40020c00 	.word	0x40020c00
 8004c30:	40021000 	.word	0x40021000
 8004c34:	40013c00 	.word	0x40013c00

08004c38 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b087      	sub	sp, #28
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
 8004c40:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004c42:	2300      	movs	r3, #0
 8004c44:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8004c46:	2300      	movs	r3, #0
 8004c48:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004c4e:	2300      	movs	r3, #0
 8004c50:	617b      	str	r3, [r7, #20]
 8004c52:	e0bb      	b.n	8004dcc <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004c54:	2201      	movs	r2, #1
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	fa02 f303 	lsl.w	r3, r2, r3
 8004c5c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8004c5e:	683a      	ldr	r2, [r7, #0]
 8004c60:	693b      	ldr	r3, [r7, #16]
 8004c62:	4013      	ands	r3, r2
 8004c64:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8004c66:	68fa      	ldr	r2, [r7, #12]
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	429a      	cmp	r2, r3
 8004c6c:	f040 80ab 	bne.w	8004dc6 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8004c70:	4a5c      	ldr	r2, [pc, #368]	; (8004de4 <HAL_GPIO_DeInit+0x1ac>)
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	089b      	lsrs	r3, r3, #2
 8004c76:	3302      	adds	r3, #2
 8004c78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c7c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	f003 0303 	and.w	r3, r3, #3
 8004c84:	009b      	lsls	r3, r3, #2
 8004c86:	220f      	movs	r2, #15
 8004c88:	fa02 f303 	lsl.w	r3, r2, r3
 8004c8c:	68ba      	ldr	r2, [r7, #8]
 8004c8e:	4013      	ands	r3, r2
 8004c90:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	4a54      	ldr	r2, [pc, #336]	; (8004de8 <HAL_GPIO_DeInit+0x1b0>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d019      	beq.n	8004cce <HAL_GPIO_DeInit+0x96>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	4a53      	ldr	r2, [pc, #332]	; (8004dec <HAL_GPIO_DeInit+0x1b4>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d013      	beq.n	8004cca <HAL_GPIO_DeInit+0x92>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	4a52      	ldr	r2, [pc, #328]	; (8004df0 <HAL_GPIO_DeInit+0x1b8>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d00d      	beq.n	8004cc6 <HAL_GPIO_DeInit+0x8e>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	4a51      	ldr	r2, [pc, #324]	; (8004df4 <HAL_GPIO_DeInit+0x1bc>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d007      	beq.n	8004cc2 <HAL_GPIO_DeInit+0x8a>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	4a50      	ldr	r2, [pc, #320]	; (8004df8 <HAL_GPIO_DeInit+0x1c0>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d101      	bne.n	8004cbe <HAL_GPIO_DeInit+0x86>
 8004cba:	2304      	movs	r3, #4
 8004cbc:	e008      	b.n	8004cd0 <HAL_GPIO_DeInit+0x98>
 8004cbe:	2307      	movs	r3, #7
 8004cc0:	e006      	b.n	8004cd0 <HAL_GPIO_DeInit+0x98>
 8004cc2:	2303      	movs	r3, #3
 8004cc4:	e004      	b.n	8004cd0 <HAL_GPIO_DeInit+0x98>
 8004cc6:	2302      	movs	r3, #2
 8004cc8:	e002      	b.n	8004cd0 <HAL_GPIO_DeInit+0x98>
 8004cca:	2301      	movs	r3, #1
 8004ccc:	e000      	b.n	8004cd0 <HAL_GPIO_DeInit+0x98>
 8004cce:	2300      	movs	r3, #0
 8004cd0:	697a      	ldr	r2, [r7, #20]
 8004cd2:	f002 0203 	and.w	r2, r2, #3
 8004cd6:	0092      	lsls	r2, r2, #2
 8004cd8:	4093      	lsls	r3, r2
 8004cda:	68ba      	ldr	r2, [r7, #8]
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	d132      	bne.n	8004d46 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004ce0:	4b46      	ldr	r3, [pc, #280]	; (8004dfc <HAL_GPIO_DeInit+0x1c4>)
 8004ce2:	681a      	ldr	r2, [r3, #0]
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	43db      	mvns	r3, r3
 8004ce8:	4944      	ldr	r1, [pc, #272]	; (8004dfc <HAL_GPIO_DeInit+0x1c4>)
 8004cea:	4013      	ands	r3, r2
 8004cec:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8004cee:	4b43      	ldr	r3, [pc, #268]	; (8004dfc <HAL_GPIO_DeInit+0x1c4>)
 8004cf0:	685a      	ldr	r2, [r3, #4]
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	43db      	mvns	r3, r3
 8004cf6:	4941      	ldr	r1, [pc, #260]	; (8004dfc <HAL_GPIO_DeInit+0x1c4>)
 8004cf8:	4013      	ands	r3, r2
 8004cfa:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004cfc:	4b3f      	ldr	r3, [pc, #252]	; (8004dfc <HAL_GPIO_DeInit+0x1c4>)
 8004cfe:	68da      	ldr	r2, [r3, #12]
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	43db      	mvns	r3, r3
 8004d04:	493d      	ldr	r1, [pc, #244]	; (8004dfc <HAL_GPIO_DeInit+0x1c4>)
 8004d06:	4013      	ands	r3, r2
 8004d08:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8004d0a:	4b3c      	ldr	r3, [pc, #240]	; (8004dfc <HAL_GPIO_DeInit+0x1c4>)
 8004d0c:	689a      	ldr	r2, [r3, #8]
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	43db      	mvns	r3, r3
 8004d12:	493a      	ldr	r1, [pc, #232]	; (8004dfc <HAL_GPIO_DeInit+0x1c4>)
 8004d14:	4013      	ands	r3, r2
 8004d16:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	f003 0303 	and.w	r3, r3, #3
 8004d1e:	009b      	lsls	r3, r3, #2
 8004d20:	220f      	movs	r2, #15
 8004d22:	fa02 f303 	lsl.w	r3, r2, r3
 8004d26:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8004d28:	4a2e      	ldr	r2, [pc, #184]	; (8004de4 <HAL_GPIO_DeInit+0x1ac>)
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	089b      	lsrs	r3, r3, #2
 8004d2e:	3302      	adds	r3, #2
 8004d30:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	43da      	mvns	r2, r3
 8004d38:	482a      	ldr	r0, [pc, #168]	; (8004de4 <HAL_GPIO_DeInit+0x1ac>)
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	089b      	lsrs	r3, r3, #2
 8004d3e:	400a      	ands	r2, r1
 8004d40:	3302      	adds	r3, #2
 8004d42:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681a      	ldr	r2, [r3, #0]
 8004d4a:	697b      	ldr	r3, [r7, #20]
 8004d4c:	005b      	lsls	r3, r3, #1
 8004d4e:	2103      	movs	r1, #3
 8004d50:	fa01 f303 	lsl.w	r3, r1, r3
 8004d54:	43db      	mvns	r3, r3
 8004d56:	401a      	ands	r2, r3
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	08da      	lsrs	r2, r3, #3
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	3208      	adds	r2, #8
 8004d64:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	f003 0307 	and.w	r3, r3, #7
 8004d6e:	009b      	lsls	r3, r3, #2
 8004d70:	220f      	movs	r2, #15
 8004d72:	fa02 f303 	lsl.w	r3, r2, r3
 8004d76:	43db      	mvns	r3, r3
 8004d78:	697a      	ldr	r2, [r7, #20]
 8004d7a:	08d2      	lsrs	r2, r2, #3
 8004d7c:	4019      	ands	r1, r3
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	3208      	adds	r2, #8
 8004d82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	68da      	ldr	r2, [r3, #12]
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	005b      	lsls	r3, r3, #1
 8004d8e:	2103      	movs	r1, #3
 8004d90:	fa01 f303 	lsl.w	r3, r1, r3
 8004d94:	43db      	mvns	r3, r3
 8004d96:	401a      	ands	r2, r3
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	685a      	ldr	r2, [r3, #4]
 8004da0:	2101      	movs	r1, #1
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	fa01 f303 	lsl.w	r3, r1, r3
 8004da8:	43db      	mvns	r3, r3
 8004daa:	401a      	ands	r2, r3
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	689a      	ldr	r2, [r3, #8]
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	005b      	lsls	r3, r3, #1
 8004db8:	2103      	movs	r1, #3
 8004dba:	fa01 f303 	lsl.w	r3, r1, r3
 8004dbe:	43db      	mvns	r3, r3
 8004dc0:	401a      	ands	r2, r3
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	3301      	adds	r3, #1
 8004dca:	617b      	str	r3, [r7, #20]
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	2b0f      	cmp	r3, #15
 8004dd0:	f67f af40 	bls.w	8004c54 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8004dd4:	bf00      	nop
 8004dd6:	bf00      	nop
 8004dd8:	371c      	adds	r7, #28
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de0:	4770      	bx	lr
 8004de2:	bf00      	nop
 8004de4:	40013800 	.word	0x40013800
 8004de8:	40020000 	.word	0x40020000
 8004dec:	40020400 	.word	0x40020400
 8004df0:	40020800 	.word	0x40020800
 8004df4:	40020c00 	.word	0x40020c00
 8004df8:	40021000 	.word	0x40021000
 8004dfc:	40013c00 	.word	0x40013c00

08004e00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004e00:	b480      	push	{r7}
 8004e02:	b083      	sub	sp, #12
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
 8004e08:	460b      	mov	r3, r1
 8004e0a:	807b      	strh	r3, [r7, #2]
 8004e0c:	4613      	mov	r3, r2
 8004e0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004e10:	787b      	ldrb	r3, [r7, #1]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d003      	beq.n	8004e1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004e16:	887a      	ldrh	r2, [r7, #2]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004e1c:	e003      	b.n	8004e26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004e1e:	887b      	ldrh	r3, [r7, #2]
 8004e20:	041a      	lsls	r2, r3, #16
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	619a      	str	r2, [r3, #24]
}
 8004e26:	bf00      	nop
 8004e28:	370c      	adds	r7, #12
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e30:	4770      	bx	lr
	...

08004e34 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b082      	sub	sp, #8
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004e3e:	4b08      	ldr	r3, [pc, #32]	; (8004e60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004e40:	695a      	ldr	r2, [r3, #20]
 8004e42:	88fb      	ldrh	r3, [r7, #6]
 8004e44:	4013      	ands	r3, r2
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d006      	beq.n	8004e58 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004e4a:	4a05      	ldr	r2, [pc, #20]	; (8004e60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004e4c:	88fb      	ldrh	r3, [r7, #6]
 8004e4e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004e50:	88fb      	ldrh	r3, [r7, #6]
 8004e52:	4618      	mov	r0, r3
 8004e54:	f000 f806 	bl	8004e64 <HAL_GPIO_EXTI_Callback>
  }
}
 8004e58:	bf00      	nop
 8004e5a:	3708      	adds	r7, #8
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}
 8004e60:	40013c00 	.word	0x40013c00

08004e64 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004e64:	b480      	push	{r7}
 8004e66:	b083      	sub	sp, #12
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004e6e:	bf00      	nop
 8004e70:	370c      	adds	r7, #12
 8004e72:	46bd      	mov	sp, r7
 8004e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e78:	4770      	bx	lr
	...

08004e7c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b086      	sub	sp, #24
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d101      	bne.n	8004e8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	e267      	b.n	800535e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f003 0301 	and.w	r3, r3, #1
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d075      	beq.n	8004f86 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004e9a:	4b88      	ldr	r3, [pc, #544]	; (80050bc <HAL_RCC_OscConfig+0x240>)
 8004e9c:	689b      	ldr	r3, [r3, #8]
 8004e9e:	f003 030c 	and.w	r3, r3, #12
 8004ea2:	2b04      	cmp	r3, #4
 8004ea4:	d00c      	beq.n	8004ec0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ea6:	4b85      	ldr	r3, [pc, #532]	; (80050bc <HAL_RCC_OscConfig+0x240>)
 8004ea8:	689b      	ldr	r3, [r3, #8]
 8004eaa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004eae:	2b08      	cmp	r3, #8
 8004eb0:	d112      	bne.n	8004ed8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004eb2:	4b82      	ldr	r3, [pc, #520]	; (80050bc <HAL_RCC_OscConfig+0x240>)
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004eba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ebe:	d10b      	bne.n	8004ed8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ec0:	4b7e      	ldr	r3, [pc, #504]	; (80050bc <HAL_RCC_OscConfig+0x240>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d05b      	beq.n	8004f84 <HAL_RCC_OscConfig+0x108>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d157      	bne.n	8004f84 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	e242      	b.n	800535e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ee0:	d106      	bne.n	8004ef0 <HAL_RCC_OscConfig+0x74>
 8004ee2:	4b76      	ldr	r3, [pc, #472]	; (80050bc <HAL_RCC_OscConfig+0x240>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a75      	ldr	r2, [pc, #468]	; (80050bc <HAL_RCC_OscConfig+0x240>)
 8004ee8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004eec:	6013      	str	r3, [r2, #0]
 8004eee:	e01d      	b.n	8004f2c <HAL_RCC_OscConfig+0xb0>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ef8:	d10c      	bne.n	8004f14 <HAL_RCC_OscConfig+0x98>
 8004efa:	4b70      	ldr	r3, [pc, #448]	; (80050bc <HAL_RCC_OscConfig+0x240>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a6f      	ldr	r2, [pc, #444]	; (80050bc <HAL_RCC_OscConfig+0x240>)
 8004f00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004f04:	6013      	str	r3, [r2, #0]
 8004f06:	4b6d      	ldr	r3, [pc, #436]	; (80050bc <HAL_RCC_OscConfig+0x240>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a6c      	ldr	r2, [pc, #432]	; (80050bc <HAL_RCC_OscConfig+0x240>)
 8004f0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f10:	6013      	str	r3, [r2, #0]
 8004f12:	e00b      	b.n	8004f2c <HAL_RCC_OscConfig+0xb0>
 8004f14:	4b69      	ldr	r3, [pc, #420]	; (80050bc <HAL_RCC_OscConfig+0x240>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a68      	ldr	r2, [pc, #416]	; (80050bc <HAL_RCC_OscConfig+0x240>)
 8004f1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f1e:	6013      	str	r3, [r2, #0]
 8004f20:	4b66      	ldr	r3, [pc, #408]	; (80050bc <HAL_RCC_OscConfig+0x240>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a65      	ldr	r2, [pc, #404]	; (80050bc <HAL_RCC_OscConfig+0x240>)
 8004f26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d013      	beq.n	8004f5c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f34:	f7fe ff7c 	bl	8003e30 <HAL_GetTick>
 8004f38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f3a:	e008      	b.n	8004f4e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f3c:	f7fe ff78 	bl	8003e30 <HAL_GetTick>
 8004f40:	4602      	mov	r2, r0
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	1ad3      	subs	r3, r2, r3
 8004f46:	2b64      	cmp	r3, #100	; 0x64
 8004f48:	d901      	bls.n	8004f4e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004f4a:	2303      	movs	r3, #3
 8004f4c:	e207      	b.n	800535e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f4e:	4b5b      	ldr	r3, [pc, #364]	; (80050bc <HAL_RCC_OscConfig+0x240>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d0f0      	beq.n	8004f3c <HAL_RCC_OscConfig+0xc0>
 8004f5a:	e014      	b.n	8004f86 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f5c:	f7fe ff68 	bl	8003e30 <HAL_GetTick>
 8004f60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f62:	e008      	b.n	8004f76 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f64:	f7fe ff64 	bl	8003e30 <HAL_GetTick>
 8004f68:	4602      	mov	r2, r0
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	1ad3      	subs	r3, r2, r3
 8004f6e:	2b64      	cmp	r3, #100	; 0x64
 8004f70:	d901      	bls.n	8004f76 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004f72:	2303      	movs	r3, #3
 8004f74:	e1f3      	b.n	800535e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f76:	4b51      	ldr	r3, [pc, #324]	; (80050bc <HAL_RCC_OscConfig+0x240>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d1f0      	bne.n	8004f64 <HAL_RCC_OscConfig+0xe8>
 8004f82:	e000      	b.n	8004f86 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f003 0302 	and.w	r3, r3, #2
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d063      	beq.n	800505a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004f92:	4b4a      	ldr	r3, [pc, #296]	; (80050bc <HAL_RCC_OscConfig+0x240>)
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	f003 030c 	and.w	r3, r3, #12
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d00b      	beq.n	8004fb6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f9e:	4b47      	ldr	r3, [pc, #284]	; (80050bc <HAL_RCC_OscConfig+0x240>)
 8004fa0:	689b      	ldr	r3, [r3, #8]
 8004fa2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004fa6:	2b08      	cmp	r3, #8
 8004fa8:	d11c      	bne.n	8004fe4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004faa:	4b44      	ldr	r3, [pc, #272]	; (80050bc <HAL_RCC_OscConfig+0x240>)
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d116      	bne.n	8004fe4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fb6:	4b41      	ldr	r3, [pc, #260]	; (80050bc <HAL_RCC_OscConfig+0x240>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f003 0302 	and.w	r3, r3, #2
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d005      	beq.n	8004fce <HAL_RCC_OscConfig+0x152>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	68db      	ldr	r3, [r3, #12]
 8004fc6:	2b01      	cmp	r3, #1
 8004fc8:	d001      	beq.n	8004fce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	e1c7      	b.n	800535e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fce:	4b3b      	ldr	r3, [pc, #236]	; (80050bc <HAL_RCC_OscConfig+0x240>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	691b      	ldr	r3, [r3, #16]
 8004fda:	00db      	lsls	r3, r3, #3
 8004fdc:	4937      	ldr	r1, [pc, #220]	; (80050bc <HAL_RCC_OscConfig+0x240>)
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fe2:	e03a      	b.n	800505a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	68db      	ldr	r3, [r3, #12]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d020      	beq.n	800502e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004fec:	4b34      	ldr	r3, [pc, #208]	; (80050c0 <HAL_RCC_OscConfig+0x244>)
 8004fee:	2201      	movs	r2, #1
 8004ff0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ff2:	f7fe ff1d 	bl	8003e30 <HAL_GetTick>
 8004ff6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ff8:	e008      	b.n	800500c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ffa:	f7fe ff19 	bl	8003e30 <HAL_GetTick>
 8004ffe:	4602      	mov	r2, r0
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	1ad3      	subs	r3, r2, r3
 8005004:	2b02      	cmp	r3, #2
 8005006:	d901      	bls.n	800500c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005008:	2303      	movs	r3, #3
 800500a:	e1a8      	b.n	800535e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800500c:	4b2b      	ldr	r3, [pc, #172]	; (80050bc <HAL_RCC_OscConfig+0x240>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f003 0302 	and.w	r3, r3, #2
 8005014:	2b00      	cmp	r3, #0
 8005016:	d0f0      	beq.n	8004ffa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005018:	4b28      	ldr	r3, [pc, #160]	; (80050bc <HAL_RCC_OscConfig+0x240>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	691b      	ldr	r3, [r3, #16]
 8005024:	00db      	lsls	r3, r3, #3
 8005026:	4925      	ldr	r1, [pc, #148]	; (80050bc <HAL_RCC_OscConfig+0x240>)
 8005028:	4313      	orrs	r3, r2
 800502a:	600b      	str	r3, [r1, #0]
 800502c:	e015      	b.n	800505a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800502e:	4b24      	ldr	r3, [pc, #144]	; (80050c0 <HAL_RCC_OscConfig+0x244>)
 8005030:	2200      	movs	r2, #0
 8005032:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005034:	f7fe fefc 	bl	8003e30 <HAL_GetTick>
 8005038:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800503a:	e008      	b.n	800504e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800503c:	f7fe fef8 	bl	8003e30 <HAL_GetTick>
 8005040:	4602      	mov	r2, r0
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	1ad3      	subs	r3, r2, r3
 8005046:	2b02      	cmp	r3, #2
 8005048:	d901      	bls.n	800504e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800504a:	2303      	movs	r3, #3
 800504c:	e187      	b.n	800535e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800504e:	4b1b      	ldr	r3, [pc, #108]	; (80050bc <HAL_RCC_OscConfig+0x240>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f003 0302 	and.w	r3, r3, #2
 8005056:	2b00      	cmp	r3, #0
 8005058:	d1f0      	bne.n	800503c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f003 0308 	and.w	r3, r3, #8
 8005062:	2b00      	cmp	r3, #0
 8005064:	d036      	beq.n	80050d4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	695b      	ldr	r3, [r3, #20]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d016      	beq.n	800509c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800506e:	4b15      	ldr	r3, [pc, #84]	; (80050c4 <HAL_RCC_OscConfig+0x248>)
 8005070:	2201      	movs	r2, #1
 8005072:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005074:	f7fe fedc 	bl	8003e30 <HAL_GetTick>
 8005078:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800507a:	e008      	b.n	800508e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800507c:	f7fe fed8 	bl	8003e30 <HAL_GetTick>
 8005080:	4602      	mov	r2, r0
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	1ad3      	subs	r3, r2, r3
 8005086:	2b02      	cmp	r3, #2
 8005088:	d901      	bls.n	800508e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800508a:	2303      	movs	r3, #3
 800508c:	e167      	b.n	800535e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800508e:	4b0b      	ldr	r3, [pc, #44]	; (80050bc <HAL_RCC_OscConfig+0x240>)
 8005090:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005092:	f003 0302 	and.w	r3, r3, #2
 8005096:	2b00      	cmp	r3, #0
 8005098:	d0f0      	beq.n	800507c <HAL_RCC_OscConfig+0x200>
 800509a:	e01b      	b.n	80050d4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800509c:	4b09      	ldr	r3, [pc, #36]	; (80050c4 <HAL_RCC_OscConfig+0x248>)
 800509e:	2200      	movs	r2, #0
 80050a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050a2:	f7fe fec5 	bl	8003e30 <HAL_GetTick>
 80050a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050a8:	e00e      	b.n	80050c8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80050aa:	f7fe fec1 	bl	8003e30 <HAL_GetTick>
 80050ae:	4602      	mov	r2, r0
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	1ad3      	subs	r3, r2, r3
 80050b4:	2b02      	cmp	r3, #2
 80050b6:	d907      	bls.n	80050c8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80050b8:	2303      	movs	r3, #3
 80050ba:	e150      	b.n	800535e <HAL_RCC_OscConfig+0x4e2>
 80050bc:	40023800 	.word	0x40023800
 80050c0:	42470000 	.word	0x42470000
 80050c4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050c8:	4b88      	ldr	r3, [pc, #544]	; (80052ec <HAL_RCC_OscConfig+0x470>)
 80050ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050cc:	f003 0302 	and.w	r3, r3, #2
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d1ea      	bne.n	80050aa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f003 0304 	and.w	r3, r3, #4
 80050dc:	2b00      	cmp	r3, #0
 80050de:	f000 8097 	beq.w	8005210 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80050e2:	2300      	movs	r3, #0
 80050e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80050e6:	4b81      	ldr	r3, [pc, #516]	; (80052ec <HAL_RCC_OscConfig+0x470>)
 80050e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d10f      	bne.n	8005112 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050f2:	2300      	movs	r3, #0
 80050f4:	60bb      	str	r3, [r7, #8]
 80050f6:	4b7d      	ldr	r3, [pc, #500]	; (80052ec <HAL_RCC_OscConfig+0x470>)
 80050f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050fa:	4a7c      	ldr	r2, [pc, #496]	; (80052ec <HAL_RCC_OscConfig+0x470>)
 80050fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005100:	6413      	str	r3, [r2, #64]	; 0x40
 8005102:	4b7a      	ldr	r3, [pc, #488]	; (80052ec <HAL_RCC_OscConfig+0x470>)
 8005104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005106:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800510a:	60bb      	str	r3, [r7, #8]
 800510c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800510e:	2301      	movs	r3, #1
 8005110:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005112:	4b77      	ldr	r3, [pc, #476]	; (80052f0 <HAL_RCC_OscConfig+0x474>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800511a:	2b00      	cmp	r3, #0
 800511c:	d118      	bne.n	8005150 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800511e:	4b74      	ldr	r3, [pc, #464]	; (80052f0 <HAL_RCC_OscConfig+0x474>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a73      	ldr	r2, [pc, #460]	; (80052f0 <HAL_RCC_OscConfig+0x474>)
 8005124:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005128:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800512a:	f7fe fe81 	bl	8003e30 <HAL_GetTick>
 800512e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005130:	e008      	b.n	8005144 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005132:	f7fe fe7d 	bl	8003e30 <HAL_GetTick>
 8005136:	4602      	mov	r2, r0
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	1ad3      	subs	r3, r2, r3
 800513c:	2b02      	cmp	r3, #2
 800513e:	d901      	bls.n	8005144 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005140:	2303      	movs	r3, #3
 8005142:	e10c      	b.n	800535e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005144:	4b6a      	ldr	r3, [pc, #424]	; (80052f0 <HAL_RCC_OscConfig+0x474>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800514c:	2b00      	cmp	r3, #0
 800514e:	d0f0      	beq.n	8005132 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	689b      	ldr	r3, [r3, #8]
 8005154:	2b01      	cmp	r3, #1
 8005156:	d106      	bne.n	8005166 <HAL_RCC_OscConfig+0x2ea>
 8005158:	4b64      	ldr	r3, [pc, #400]	; (80052ec <HAL_RCC_OscConfig+0x470>)
 800515a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800515c:	4a63      	ldr	r2, [pc, #396]	; (80052ec <HAL_RCC_OscConfig+0x470>)
 800515e:	f043 0301 	orr.w	r3, r3, #1
 8005162:	6713      	str	r3, [r2, #112]	; 0x70
 8005164:	e01c      	b.n	80051a0 <HAL_RCC_OscConfig+0x324>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	689b      	ldr	r3, [r3, #8]
 800516a:	2b05      	cmp	r3, #5
 800516c:	d10c      	bne.n	8005188 <HAL_RCC_OscConfig+0x30c>
 800516e:	4b5f      	ldr	r3, [pc, #380]	; (80052ec <HAL_RCC_OscConfig+0x470>)
 8005170:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005172:	4a5e      	ldr	r2, [pc, #376]	; (80052ec <HAL_RCC_OscConfig+0x470>)
 8005174:	f043 0304 	orr.w	r3, r3, #4
 8005178:	6713      	str	r3, [r2, #112]	; 0x70
 800517a:	4b5c      	ldr	r3, [pc, #368]	; (80052ec <HAL_RCC_OscConfig+0x470>)
 800517c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800517e:	4a5b      	ldr	r2, [pc, #364]	; (80052ec <HAL_RCC_OscConfig+0x470>)
 8005180:	f043 0301 	orr.w	r3, r3, #1
 8005184:	6713      	str	r3, [r2, #112]	; 0x70
 8005186:	e00b      	b.n	80051a0 <HAL_RCC_OscConfig+0x324>
 8005188:	4b58      	ldr	r3, [pc, #352]	; (80052ec <HAL_RCC_OscConfig+0x470>)
 800518a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800518c:	4a57      	ldr	r2, [pc, #348]	; (80052ec <HAL_RCC_OscConfig+0x470>)
 800518e:	f023 0301 	bic.w	r3, r3, #1
 8005192:	6713      	str	r3, [r2, #112]	; 0x70
 8005194:	4b55      	ldr	r3, [pc, #340]	; (80052ec <HAL_RCC_OscConfig+0x470>)
 8005196:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005198:	4a54      	ldr	r2, [pc, #336]	; (80052ec <HAL_RCC_OscConfig+0x470>)
 800519a:	f023 0304 	bic.w	r3, r3, #4
 800519e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	689b      	ldr	r3, [r3, #8]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d015      	beq.n	80051d4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051a8:	f7fe fe42 	bl	8003e30 <HAL_GetTick>
 80051ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051ae:	e00a      	b.n	80051c6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80051b0:	f7fe fe3e 	bl	8003e30 <HAL_GetTick>
 80051b4:	4602      	mov	r2, r0
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	1ad3      	subs	r3, r2, r3
 80051ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80051be:	4293      	cmp	r3, r2
 80051c0:	d901      	bls.n	80051c6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80051c2:	2303      	movs	r3, #3
 80051c4:	e0cb      	b.n	800535e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051c6:	4b49      	ldr	r3, [pc, #292]	; (80052ec <HAL_RCC_OscConfig+0x470>)
 80051c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051ca:	f003 0302 	and.w	r3, r3, #2
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d0ee      	beq.n	80051b0 <HAL_RCC_OscConfig+0x334>
 80051d2:	e014      	b.n	80051fe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051d4:	f7fe fe2c 	bl	8003e30 <HAL_GetTick>
 80051d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051da:	e00a      	b.n	80051f2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80051dc:	f7fe fe28 	bl	8003e30 <HAL_GetTick>
 80051e0:	4602      	mov	r2, r0
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	1ad3      	subs	r3, r2, r3
 80051e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d901      	bls.n	80051f2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80051ee:	2303      	movs	r3, #3
 80051f0:	e0b5      	b.n	800535e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051f2:	4b3e      	ldr	r3, [pc, #248]	; (80052ec <HAL_RCC_OscConfig+0x470>)
 80051f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051f6:	f003 0302 	and.w	r3, r3, #2
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d1ee      	bne.n	80051dc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80051fe:	7dfb      	ldrb	r3, [r7, #23]
 8005200:	2b01      	cmp	r3, #1
 8005202:	d105      	bne.n	8005210 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005204:	4b39      	ldr	r3, [pc, #228]	; (80052ec <HAL_RCC_OscConfig+0x470>)
 8005206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005208:	4a38      	ldr	r2, [pc, #224]	; (80052ec <HAL_RCC_OscConfig+0x470>)
 800520a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800520e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	699b      	ldr	r3, [r3, #24]
 8005214:	2b00      	cmp	r3, #0
 8005216:	f000 80a1 	beq.w	800535c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800521a:	4b34      	ldr	r3, [pc, #208]	; (80052ec <HAL_RCC_OscConfig+0x470>)
 800521c:	689b      	ldr	r3, [r3, #8]
 800521e:	f003 030c 	and.w	r3, r3, #12
 8005222:	2b08      	cmp	r3, #8
 8005224:	d05c      	beq.n	80052e0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	699b      	ldr	r3, [r3, #24]
 800522a:	2b02      	cmp	r3, #2
 800522c:	d141      	bne.n	80052b2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800522e:	4b31      	ldr	r3, [pc, #196]	; (80052f4 <HAL_RCC_OscConfig+0x478>)
 8005230:	2200      	movs	r2, #0
 8005232:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005234:	f7fe fdfc 	bl	8003e30 <HAL_GetTick>
 8005238:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800523a:	e008      	b.n	800524e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800523c:	f7fe fdf8 	bl	8003e30 <HAL_GetTick>
 8005240:	4602      	mov	r2, r0
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	1ad3      	subs	r3, r2, r3
 8005246:	2b02      	cmp	r3, #2
 8005248:	d901      	bls.n	800524e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800524a:	2303      	movs	r3, #3
 800524c:	e087      	b.n	800535e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800524e:	4b27      	ldr	r3, [pc, #156]	; (80052ec <HAL_RCC_OscConfig+0x470>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005256:	2b00      	cmp	r3, #0
 8005258:	d1f0      	bne.n	800523c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	69da      	ldr	r2, [r3, #28]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6a1b      	ldr	r3, [r3, #32]
 8005262:	431a      	orrs	r2, r3
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005268:	019b      	lsls	r3, r3, #6
 800526a:	431a      	orrs	r2, r3
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005270:	085b      	lsrs	r3, r3, #1
 8005272:	3b01      	subs	r3, #1
 8005274:	041b      	lsls	r3, r3, #16
 8005276:	431a      	orrs	r2, r3
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800527c:	061b      	lsls	r3, r3, #24
 800527e:	491b      	ldr	r1, [pc, #108]	; (80052ec <HAL_RCC_OscConfig+0x470>)
 8005280:	4313      	orrs	r3, r2
 8005282:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005284:	4b1b      	ldr	r3, [pc, #108]	; (80052f4 <HAL_RCC_OscConfig+0x478>)
 8005286:	2201      	movs	r2, #1
 8005288:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800528a:	f7fe fdd1 	bl	8003e30 <HAL_GetTick>
 800528e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005290:	e008      	b.n	80052a4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005292:	f7fe fdcd 	bl	8003e30 <HAL_GetTick>
 8005296:	4602      	mov	r2, r0
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	1ad3      	subs	r3, r2, r3
 800529c:	2b02      	cmp	r3, #2
 800529e:	d901      	bls.n	80052a4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80052a0:	2303      	movs	r3, #3
 80052a2:	e05c      	b.n	800535e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052a4:	4b11      	ldr	r3, [pc, #68]	; (80052ec <HAL_RCC_OscConfig+0x470>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d0f0      	beq.n	8005292 <HAL_RCC_OscConfig+0x416>
 80052b0:	e054      	b.n	800535c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052b2:	4b10      	ldr	r3, [pc, #64]	; (80052f4 <HAL_RCC_OscConfig+0x478>)
 80052b4:	2200      	movs	r2, #0
 80052b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052b8:	f7fe fdba 	bl	8003e30 <HAL_GetTick>
 80052bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052be:	e008      	b.n	80052d2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052c0:	f7fe fdb6 	bl	8003e30 <HAL_GetTick>
 80052c4:	4602      	mov	r2, r0
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	1ad3      	subs	r3, r2, r3
 80052ca:	2b02      	cmp	r3, #2
 80052cc:	d901      	bls.n	80052d2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80052ce:	2303      	movs	r3, #3
 80052d0:	e045      	b.n	800535e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052d2:	4b06      	ldr	r3, [pc, #24]	; (80052ec <HAL_RCC_OscConfig+0x470>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d1f0      	bne.n	80052c0 <HAL_RCC_OscConfig+0x444>
 80052de:	e03d      	b.n	800535c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	699b      	ldr	r3, [r3, #24]
 80052e4:	2b01      	cmp	r3, #1
 80052e6:	d107      	bne.n	80052f8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80052e8:	2301      	movs	r3, #1
 80052ea:	e038      	b.n	800535e <HAL_RCC_OscConfig+0x4e2>
 80052ec:	40023800 	.word	0x40023800
 80052f0:	40007000 	.word	0x40007000
 80052f4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80052f8:	4b1b      	ldr	r3, [pc, #108]	; (8005368 <HAL_RCC_OscConfig+0x4ec>)
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	699b      	ldr	r3, [r3, #24]
 8005302:	2b01      	cmp	r3, #1
 8005304:	d028      	beq.n	8005358 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005310:	429a      	cmp	r2, r3
 8005312:	d121      	bne.n	8005358 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800531e:	429a      	cmp	r2, r3
 8005320:	d11a      	bne.n	8005358 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005322:	68fa      	ldr	r2, [r7, #12]
 8005324:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005328:	4013      	ands	r3, r2
 800532a:	687a      	ldr	r2, [r7, #4]
 800532c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800532e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005330:	4293      	cmp	r3, r2
 8005332:	d111      	bne.n	8005358 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800533e:	085b      	lsrs	r3, r3, #1
 8005340:	3b01      	subs	r3, #1
 8005342:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005344:	429a      	cmp	r2, r3
 8005346:	d107      	bne.n	8005358 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005352:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005354:	429a      	cmp	r2, r3
 8005356:	d001      	beq.n	800535c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005358:	2301      	movs	r3, #1
 800535a:	e000      	b.n	800535e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800535c:	2300      	movs	r3, #0
}
 800535e:	4618      	mov	r0, r3
 8005360:	3718      	adds	r7, #24
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}
 8005366:	bf00      	nop
 8005368:	40023800 	.word	0x40023800

0800536c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b084      	sub	sp, #16
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
 8005374:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d101      	bne.n	8005380 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800537c:	2301      	movs	r3, #1
 800537e:	e0cc      	b.n	800551a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005380:	4b68      	ldr	r3, [pc, #416]	; (8005524 <HAL_RCC_ClockConfig+0x1b8>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f003 0307 	and.w	r3, r3, #7
 8005388:	683a      	ldr	r2, [r7, #0]
 800538a:	429a      	cmp	r2, r3
 800538c:	d90c      	bls.n	80053a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800538e:	4b65      	ldr	r3, [pc, #404]	; (8005524 <HAL_RCC_ClockConfig+0x1b8>)
 8005390:	683a      	ldr	r2, [r7, #0]
 8005392:	b2d2      	uxtb	r2, r2
 8005394:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005396:	4b63      	ldr	r3, [pc, #396]	; (8005524 <HAL_RCC_ClockConfig+0x1b8>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f003 0307 	and.w	r3, r3, #7
 800539e:	683a      	ldr	r2, [r7, #0]
 80053a0:	429a      	cmp	r2, r3
 80053a2:	d001      	beq.n	80053a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80053a4:	2301      	movs	r3, #1
 80053a6:	e0b8      	b.n	800551a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f003 0302 	and.w	r3, r3, #2
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d020      	beq.n	80053f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f003 0304 	and.w	r3, r3, #4
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d005      	beq.n	80053cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80053c0:	4b59      	ldr	r3, [pc, #356]	; (8005528 <HAL_RCC_ClockConfig+0x1bc>)
 80053c2:	689b      	ldr	r3, [r3, #8]
 80053c4:	4a58      	ldr	r2, [pc, #352]	; (8005528 <HAL_RCC_ClockConfig+0x1bc>)
 80053c6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80053ca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f003 0308 	and.w	r3, r3, #8
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d005      	beq.n	80053e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80053d8:	4b53      	ldr	r3, [pc, #332]	; (8005528 <HAL_RCC_ClockConfig+0x1bc>)
 80053da:	689b      	ldr	r3, [r3, #8]
 80053dc:	4a52      	ldr	r2, [pc, #328]	; (8005528 <HAL_RCC_ClockConfig+0x1bc>)
 80053de:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80053e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053e4:	4b50      	ldr	r3, [pc, #320]	; (8005528 <HAL_RCC_ClockConfig+0x1bc>)
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	689b      	ldr	r3, [r3, #8]
 80053f0:	494d      	ldr	r1, [pc, #308]	; (8005528 <HAL_RCC_ClockConfig+0x1bc>)
 80053f2:	4313      	orrs	r3, r2
 80053f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f003 0301 	and.w	r3, r3, #1
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d044      	beq.n	800548c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	2b01      	cmp	r3, #1
 8005408:	d107      	bne.n	800541a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800540a:	4b47      	ldr	r3, [pc, #284]	; (8005528 <HAL_RCC_ClockConfig+0x1bc>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005412:	2b00      	cmp	r3, #0
 8005414:	d119      	bne.n	800544a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005416:	2301      	movs	r3, #1
 8005418:	e07f      	b.n	800551a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	2b02      	cmp	r3, #2
 8005420:	d003      	beq.n	800542a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005426:	2b03      	cmp	r3, #3
 8005428:	d107      	bne.n	800543a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800542a:	4b3f      	ldr	r3, [pc, #252]	; (8005528 <HAL_RCC_ClockConfig+0x1bc>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005432:	2b00      	cmp	r3, #0
 8005434:	d109      	bne.n	800544a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005436:	2301      	movs	r3, #1
 8005438:	e06f      	b.n	800551a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800543a:	4b3b      	ldr	r3, [pc, #236]	; (8005528 <HAL_RCC_ClockConfig+0x1bc>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f003 0302 	and.w	r3, r3, #2
 8005442:	2b00      	cmp	r3, #0
 8005444:	d101      	bne.n	800544a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005446:	2301      	movs	r3, #1
 8005448:	e067      	b.n	800551a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800544a:	4b37      	ldr	r3, [pc, #220]	; (8005528 <HAL_RCC_ClockConfig+0x1bc>)
 800544c:	689b      	ldr	r3, [r3, #8]
 800544e:	f023 0203 	bic.w	r2, r3, #3
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	4934      	ldr	r1, [pc, #208]	; (8005528 <HAL_RCC_ClockConfig+0x1bc>)
 8005458:	4313      	orrs	r3, r2
 800545a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800545c:	f7fe fce8 	bl	8003e30 <HAL_GetTick>
 8005460:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005462:	e00a      	b.n	800547a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005464:	f7fe fce4 	bl	8003e30 <HAL_GetTick>
 8005468:	4602      	mov	r2, r0
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	1ad3      	subs	r3, r2, r3
 800546e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005472:	4293      	cmp	r3, r2
 8005474:	d901      	bls.n	800547a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005476:	2303      	movs	r3, #3
 8005478:	e04f      	b.n	800551a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800547a:	4b2b      	ldr	r3, [pc, #172]	; (8005528 <HAL_RCC_ClockConfig+0x1bc>)
 800547c:	689b      	ldr	r3, [r3, #8]
 800547e:	f003 020c 	and.w	r2, r3, #12
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	009b      	lsls	r3, r3, #2
 8005488:	429a      	cmp	r2, r3
 800548a:	d1eb      	bne.n	8005464 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800548c:	4b25      	ldr	r3, [pc, #148]	; (8005524 <HAL_RCC_ClockConfig+0x1b8>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f003 0307 	and.w	r3, r3, #7
 8005494:	683a      	ldr	r2, [r7, #0]
 8005496:	429a      	cmp	r2, r3
 8005498:	d20c      	bcs.n	80054b4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800549a:	4b22      	ldr	r3, [pc, #136]	; (8005524 <HAL_RCC_ClockConfig+0x1b8>)
 800549c:	683a      	ldr	r2, [r7, #0]
 800549e:	b2d2      	uxtb	r2, r2
 80054a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80054a2:	4b20      	ldr	r3, [pc, #128]	; (8005524 <HAL_RCC_ClockConfig+0x1b8>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f003 0307 	and.w	r3, r3, #7
 80054aa:	683a      	ldr	r2, [r7, #0]
 80054ac:	429a      	cmp	r2, r3
 80054ae:	d001      	beq.n	80054b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80054b0:	2301      	movs	r3, #1
 80054b2:	e032      	b.n	800551a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f003 0304 	and.w	r3, r3, #4
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d008      	beq.n	80054d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80054c0:	4b19      	ldr	r3, [pc, #100]	; (8005528 <HAL_RCC_ClockConfig+0x1bc>)
 80054c2:	689b      	ldr	r3, [r3, #8]
 80054c4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	68db      	ldr	r3, [r3, #12]
 80054cc:	4916      	ldr	r1, [pc, #88]	; (8005528 <HAL_RCC_ClockConfig+0x1bc>)
 80054ce:	4313      	orrs	r3, r2
 80054d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f003 0308 	and.w	r3, r3, #8
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d009      	beq.n	80054f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80054de:	4b12      	ldr	r3, [pc, #72]	; (8005528 <HAL_RCC_ClockConfig+0x1bc>)
 80054e0:	689b      	ldr	r3, [r3, #8]
 80054e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	691b      	ldr	r3, [r3, #16]
 80054ea:	00db      	lsls	r3, r3, #3
 80054ec:	490e      	ldr	r1, [pc, #56]	; (8005528 <HAL_RCC_ClockConfig+0x1bc>)
 80054ee:	4313      	orrs	r3, r2
 80054f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80054f2:	f000 f821 	bl	8005538 <HAL_RCC_GetSysClockFreq>
 80054f6:	4602      	mov	r2, r0
 80054f8:	4b0b      	ldr	r3, [pc, #44]	; (8005528 <HAL_RCC_ClockConfig+0x1bc>)
 80054fa:	689b      	ldr	r3, [r3, #8]
 80054fc:	091b      	lsrs	r3, r3, #4
 80054fe:	f003 030f 	and.w	r3, r3, #15
 8005502:	490a      	ldr	r1, [pc, #40]	; (800552c <HAL_RCC_ClockConfig+0x1c0>)
 8005504:	5ccb      	ldrb	r3, [r1, r3]
 8005506:	fa22 f303 	lsr.w	r3, r2, r3
 800550a:	4a09      	ldr	r2, [pc, #36]	; (8005530 <HAL_RCC_ClockConfig+0x1c4>)
 800550c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800550e:	4b09      	ldr	r3, [pc, #36]	; (8005534 <HAL_RCC_ClockConfig+0x1c8>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4618      	mov	r0, r3
 8005514:	f7fe fc48 	bl	8003da8 <HAL_InitTick>

  return HAL_OK;
 8005518:	2300      	movs	r3, #0
}
 800551a:	4618      	mov	r0, r3
 800551c:	3710      	adds	r7, #16
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}
 8005522:	bf00      	nop
 8005524:	40023c00 	.word	0x40023c00
 8005528:	40023800 	.word	0x40023800
 800552c:	08020a7c 	.word	0x08020a7c
 8005530:	200000a8 	.word	0x200000a8
 8005534:	200000ac 	.word	0x200000ac

08005538 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005538:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800553c:	b094      	sub	sp, #80	; 0x50
 800553e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005540:	2300      	movs	r3, #0
 8005542:	647b      	str	r3, [r7, #68]	; 0x44
 8005544:	2300      	movs	r3, #0
 8005546:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005548:	2300      	movs	r3, #0
 800554a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800554c:	2300      	movs	r3, #0
 800554e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005550:	4b79      	ldr	r3, [pc, #484]	; (8005738 <HAL_RCC_GetSysClockFreq+0x200>)
 8005552:	689b      	ldr	r3, [r3, #8]
 8005554:	f003 030c 	and.w	r3, r3, #12
 8005558:	2b08      	cmp	r3, #8
 800555a:	d00d      	beq.n	8005578 <HAL_RCC_GetSysClockFreq+0x40>
 800555c:	2b08      	cmp	r3, #8
 800555e:	f200 80e1 	bhi.w	8005724 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005562:	2b00      	cmp	r3, #0
 8005564:	d002      	beq.n	800556c <HAL_RCC_GetSysClockFreq+0x34>
 8005566:	2b04      	cmp	r3, #4
 8005568:	d003      	beq.n	8005572 <HAL_RCC_GetSysClockFreq+0x3a>
 800556a:	e0db      	b.n	8005724 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800556c:	4b73      	ldr	r3, [pc, #460]	; (800573c <HAL_RCC_GetSysClockFreq+0x204>)
 800556e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005570:	e0db      	b.n	800572a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005572:	4b73      	ldr	r3, [pc, #460]	; (8005740 <HAL_RCC_GetSysClockFreq+0x208>)
 8005574:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005576:	e0d8      	b.n	800572a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005578:	4b6f      	ldr	r3, [pc, #444]	; (8005738 <HAL_RCC_GetSysClockFreq+0x200>)
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005580:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005582:	4b6d      	ldr	r3, [pc, #436]	; (8005738 <HAL_RCC_GetSysClockFreq+0x200>)
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800558a:	2b00      	cmp	r3, #0
 800558c:	d063      	beq.n	8005656 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800558e:	4b6a      	ldr	r3, [pc, #424]	; (8005738 <HAL_RCC_GetSysClockFreq+0x200>)
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	099b      	lsrs	r3, r3, #6
 8005594:	2200      	movs	r2, #0
 8005596:	63bb      	str	r3, [r7, #56]	; 0x38
 8005598:	63fa      	str	r2, [r7, #60]	; 0x3c
 800559a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800559c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055a0:	633b      	str	r3, [r7, #48]	; 0x30
 80055a2:	2300      	movs	r3, #0
 80055a4:	637b      	str	r3, [r7, #52]	; 0x34
 80055a6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80055aa:	4622      	mov	r2, r4
 80055ac:	462b      	mov	r3, r5
 80055ae:	f04f 0000 	mov.w	r0, #0
 80055b2:	f04f 0100 	mov.w	r1, #0
 80055b6:	0159      	lsls	r1, r3, #5
 80055b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80055bc:	0150      	lsls	r0, r2, #5
 80055be:	4602      	mov	r2, r0
 80055c0:	460b      	mov	r3, r1
 80055c2:	4621      	mov	r1, r4
 80055c4:	1a51      	subs	r1, r2, r1
 80055c6:	6139      	str	r1, [r7, #16]
 80055c8:	4629      	mov	r1, r5
 80055ca:	eb63 0301 	sbc.w	r3, r3, r1
 80055ce:	617b      	str	r3, [r7, #20]
 80055d0:	f04f 0200 	mov.w	r2, #0
 80055d4:	f04f 0300 	mov.w	r3, #0
 80055d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80055dc:	4659      	mov	r1, fp
 80055de:	018b      	lsls	r3, r1, #6
 80055e0:	4651      	mov	r1, sl
 80055e2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80055e6:	4651      	mov	r1, sl
 80055e8:	018a      	lsls	r2, r1, #6
 80055ea:	4651      	mov	r1, sl
 80055ec:	ebb2 0801 	subs.w	r8, r2, r1
 80055f0:	4659      	mov	r1, fp
 80055f2:	eb63 0901 	sbc.w	r9, r3, r1
 80055f6:	f04f 0200 	mov.w	r2, #0
 80055fa:	f04f 0300 	mov.w	r3, #0
 80055fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005602:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005606:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800560a:	4690      	mov	r8, r2
 800560c:	4699      	mov	r9, r3
 800560e:	4623      	mov	r3, r4
 8005610:	eb18 0303 	adds.w	r3, r8, r3
 8005614:	60bb      	str	r3, [r7, #8]
 8005616:	462b      	mov	r3, r5
 8005618:	eb49 0303 	adc.w	r3, r9, r3
 800561c:	60fb      	str	r3, [r7, #12]
 800561e:	f04f 0200 	mov.w	r2, #0
 8005622:	f04f 0300 	mov.w	r3, #0
 8005626:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800562a:	4629      	mov	r1, r5
 800562c:	024b      	lsls	r3, r1, #9
 800562e:	4621      	mov	r1, r4
 8005630:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005634:	4621      	mov	r1, r4
 8005636:	024a      	lsls	r2, r1, #9
 8005638:	4610      	mov	r0, r2
 800563a:	4619      	mov	r1, r3
 800563c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800563e:	2200      	movs	r2, #0
 8005640:	62bb      	str	r3, [r7, #40]	; 0x28
 8005642:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005644:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005648:	f7fb fac6 	bl	8000bd8 <__aeabi_uldivmod>
 800564c:	4602      	mov	r2, r0
 800564e:	460b      	mov	r3, r1
 8005650:	4613      	mov	r3, r2
 8005652:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005654:	e058      	b.n	8005708 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005656:	4b38      	ldr	r3, [pc, #224]	; (8005738 <HAL_RCC_GetSysClockFreq+0x200>)
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	099b      	lsrs	r3, r3, #6
 800565c:	2200      	movs	r2, #0
 800565e:	4618      	mov	r0, r3
 8005660:	4611      	mov	r1, r2
 8005662:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005666:	623b      	str	r3, [r7, #32]
 8005668:	2300      	movs	r3, #0
 800566a:	627b      	str	r3, [r7, #36]	; 0x24
 800566c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005670:	4642      	mov	r2, r8
 8005672:	464b      	mov	r3, r9
 8005674:	f04f 0000 	mov.w	r0, #0
 8005678:	f04f 0100 	mov.w	r1, #0
 800567c:	0159      	lsls	r1, r3, #5
 800567e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005682:	0150      	lsls	r0, r2, #5
 8005684:	4602      	mov	r2, r0
 8005686:	460b      	mov	r3, r1
 8005688:	4641      	mov	r1, r8
 800568a:	ebb2 0a01 	subs.w	sl, r2, r1
 800568e:	4649      	mov	r1, r9
 8005690:	eb63 0b01 	sbc.w	fp, r3, r1
 8005694:	f04f 0200 	mov.w	r2, #0
 8005698:	f04f 0300 	mov.w	r3, #0
 800569c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80056a0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80056a4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80056a8:	ebb2 040a 	subs.w	r4, r2, sl
 80056ac:	eb63 050b 	sbc.w	r5, r3, fp
 80056b0:	f04f 0200 	mov.w	r2, #0
 80056b4:	f04f 0300 	mov.w	r3, #0
 80056b8:	00eb      	lsls	r3, r5, #3
 80056ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80056be:	00e2      	lsls	r2, r4, #3
 80056c0:	4614      	mov	r4, r2
 80056c2:	461d      	mov	r5, r3
 80056c4:	4643      	mov	r3, r8
 80056c6:	18e3      	adds	r3, r4, r3
 80056c8:	603b      	str	r3, [r7, #0]
 80056ca:	464b      	mov	r3, r9
 80056cc:	eb45 0303 	adc.w	r3, r5, r3
 80056d0:	607b      	str	r3, [r7, #4]
 80056d2:	f04f 0200 	mov.w	r2, #0
 80056d6:	f04f 0300 	mov.w	r3, #0
 80056da:	e9d7 4500 	ldrd	r4, r5, [r7]
 80056de:	4629      	mov	r1, r5
 80056e0:	028b      	lsls	r3, r1, #10
 80056e2:	4621      	mov	r1, r4
 80056e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80056e8:	4621      	mov	r1, r4
 80056ea:	028a      	lsls	r2, r1, #10
 80056ec:	4610      	mov	r0, r2
 80056ee:	4619      	mov	r1, r3
 80056f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056f2:	2200      	movs	r2, #0
 80056f4:	61bb      	str	r3, [r7, #24]
 80056f6:	61fa      	str	r2, [r7, #28]
 80056f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80056fc:	f7fb fa6c 	bl	8000bd8 <__aeabi_uldivmod>
 8005700:	4602      	mov	r2, r0
 8005702:	460b      	mov	r3, r1
 8005704:	4613      	mov	r3, r2
 8005706:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005708:	4b0b      	ldr	r3, [pc, #44]	; (8005738 <HAL_RCC_GetSysClockFreq+0x200>)
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	0c1b      	lsrs	r3, r3, #16
 800570e:	f003 0303 	and.w	r3, r3, #3
 8005712:	3301      	adds	r3, #1
 8005714:	005b      	lsls	r3, r3, #1
 8005716:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005718:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800571a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800571c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005720:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005722:	e002      	b.n	800572a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005724:	4b05      	ldr	r3, [pc, #20]	; (800573c <HAL_RCC_GetSysClockFreq+0x204>)
 8005726:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005728:	bf00      	nop
    }
  }
  return sysclockfreq;
 800572a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800572c:	4618      	mov	r0, r3
 800572e:	3750      	adds	r7, #80	; 0x50
 8005730:	46bd      	mov	sp, r7
 8005732:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005736:	bf00      	nop
 8005738:	40023800 	.word	0x40023800
 800573c:	00f42400 	.word	0x00f42400
 8005740:	007a1200 	.word	0x007a1200

08005744 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005744:	b480      	push	{r7}
 8005746:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005748:	4b03      	ldr	r3, [pc, #12]	; (8005758 <HAL_RCC_GetHCLKFreq+0x14>)
 800574a:	681b      	ldr	r3, [r3, #0]
}
 800574c:	4618      	mov	r0, r3
 800574e:	46bd      	mov	sp, r7
 8005750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005754:	4770      	bx	lr
 8005756:	bf00      	nop
 8005758:	200000a8 	.word	0x200000a8

0800575c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005760:	f7ff fff0 	bl	8005744 <HAL_RCC_GetHCLKFreq>
 8005764:	4602      	mov	r2, r0
 8005766:	4b05      	ldr	r3, [pc, #20]	; (800577c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005768:	689b      	ldr	r3, [r3, #8]
 800576a:	0a9b      	lsrs	r3, r3, #10
 800576c:	f003 0307 	and.w	r3, r3, #7
 8005770:	4903      	ldr	r1, [pc, #12]	; (8005780 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005772:	5ccb      	ldrb	r3, [r1, r3]
 8005774:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005778:	4618      	mov	r0, r3
 800577a:	bd80      	pop	{r7, pc}
 800577c:	40023800 	.word	0x40023800
 8005780:	08020a8c 	.word	0x08020a8c

08005784 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005788:	f7ff ffdc 	bl	8005744 <HAL_RCC_GetHCLKFreq>
 800578c:	4602      	mov	r2, r0
 800578e:	4b05      	ldr	r3, [pc, #20]	; (80057a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005790:	689b      	ldr	r3, [r3, #8]
 8005792:	0b5b      	lsrs	r3, r3, #13
 8005794:	f003 0307 	and.w	r3, r3, #7
 8005798:	4903      	ldr	r1, [pc, #12]	; (80057a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800579a:	5ccb      	ldrb	r3, [r1, r3]
 800579c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80057a0:	4618      	mov	r0, r3
 80057a2:	bd80      	pop	{r7, pc}
 80057a4:	40023800 	.word	0x40023800
 80057a8:	08020a8c 	.word	0x08020a8c

080057ac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b082      	sub	sp, #8
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d101      	bne.n	80057be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80057ba:	2301      	movs	r3, #1
 80057bc:	e07b      	b.n	80058b6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d108      	bne.n	80057d8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80057ce:	d009      	beq.n	80057e4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2200      	movs	r2, #0
 80057d4:	61da      	str	r2, [r3, #28]
 80057d6:	e005      	b.n	80057e4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2200      	movs	r2, #0
 80057dc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2200      	movs	r2, #0
 80057e2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2200      	movs	r2, #0
 80057e8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80057f0:	b2db      	uxtb	r3, r3
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d106      	bne.n	8005804 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2200      	movs	r2, #0
 80057fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f7fd feba 	bl	8003578 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2202      	movs	r2, #2
 8005808:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	681a      	ldr	r2, [r3, #0]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800581a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	689b      	ldr	r3, [r3, #8]
 8005828:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800582c:	431a      	orrs	r2, r3
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	68db      	ldr	r3, [r3, #12]
 8005832:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005836:	431a      	orrs	r2, r3
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	691b      	ldr	r3, [r3, #16]
 800583c:	f003 0302 	and.w	r3, r3, #2
 8005840:	431a      	orrs	r2, r3
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	695b      	ldr	r3, [r3, #20]
 8005846:	f003 0301 	and.w	r3, r3, #1
 800584a:	431a      	orrs	r2, r3
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	699b      	ldr	r3, [r3, #24]
 8005850:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005854:	431a      	orrs	r2, r3
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	69db      	ldr	r3, [r3, #28]
 800585a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800585e:	431a      	orrs	r2, r3
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6a1b      	ldr	r3, [r3, #32]
 8005864:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005868:	ea42 0103 	orr.w	r1, r2, r3
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005870:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	430a      	orrs	r2, r1
 800587a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	699b      	ldr	r3, [r3, #24]
 8005880:	0c1b      	lsrs	r3, r3, #16
 8005882:	f003 0104 	and.w	r1, r3, #4
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800588a:	f003 0210 	and.w	r2, r3, #16
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	430a      	orrs	r2, r1
 8005894:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	69da      	ldr	r2, [r3, #28]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80058a4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2200      	movs	r2, #0
 80058aa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2201      	movs	r2, #1
 80058b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80058b4:	2300      	movs	r3, #0
}
 80058b6:	4618      	mov	r0, r3
 80058b8:	3708      	adds	r7, #8
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bd80      	pop	{r7, pc}

080058be <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80058be:	b580      	push	{r7, lr}
 80058c0:	b082      	sub	sp, #8
 80058c2:	af00      	add	r7, sp, #0
 80058c4:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d101      	bne.n	80058d0 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80058cc:	2301      	movs	r3, #1
 80058ce:	e01a      	b.n	8005906 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2202      	movs	r2, #2
 80058d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	681a      	ldr	r2, [r3, #0]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058e6:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f7fd ffad 	bl	8003848 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2200      	movs	r2, #0
 80058f2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2200      	movs	r2, #0
 80058f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2200      	movs	r2, #0
 8005900:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005904:	2300      	movs	r3, #0
}
 8005906:	4618      	mov	r0, r3
 8005908:	3708      	adds	r7, #8
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}

0800590e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800590e:	b580      	push	{r7, lr}
 8005910:	b088      	sub	sp, #32
 8005912:	af00      	add	r7, sp, #0
 8005914:	60f8      	str	r0, [r7, #12]
 8005916:	60b9      	str	r1, [r7, #8]
 8005918:	603b      	str	r3, [r7, #0]
 800591a:	4613      	mov	r3, r2
 800591c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800591e:	2300      	movs	r3, #0
 8005920:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005928:	2b01      	cmp	r3, #1
 800592a:	d101      	bne.n	8005930 <HAL_SPI_Transmit+0x22>
 800592c:	2302      	movs	r3, #2
 800592e:	e126      	b.n	8005b7e <HAL_SPI_Transmit+0x270>
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	2201      	movs	r2, #1
 8005934:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005938:	f7fe fa7a 	bl	8003e30 <HAL_GetTick>
 800593c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800593e:	88fb      	ldrh	r3, [r7, #6]
 8005940:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005948:	b2db      	uxtb	r3, r3
 800594a:	2b01      	cmp	r3, #1
 800594c:	d002      	beq.n	8005954 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800594e:	2302      	movs	r3, #2
 8005950:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005952:	e10b      	b.n	8005b6c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d002      	beq.n	8005960 <HAL_SPI_Transmit+0x52>
 800595a:	88fb      	ldrh	r3, [r7, #6]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d102      	bne.n	8005966 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005960:	2301      	movs	r3, #1
 8005962:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005964:	e102      	b.n	8005b6c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	2203      	movs	r2, #3
 800596a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	2200      	movs	r2, #0
 8005972:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	68ba      	ldr	r2, [r7, #8]
 8005978:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	88fa      	ldrh	r2, [r7, #6]
 800597e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	88fa      	ldrh	r2, [r7, #6]
 8005984:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	2200      	movs	r2, #0
 800598a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	2200      	movs	r2, #0
 8005990:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	2200      	movs	r2, #0
 8005996:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	2200      	movs	r2, #0
 800599c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	2200      	movs	r2, #0
 80059a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	689b      	ldr	r3, [r3, #8]
 80059a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059ac:	d10f      	bne.n	80059ce <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	681a      	ldr	r2, [r3, #0]
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059bc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	681a      	ldr	r2, [r3, #0]
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80059cc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059d8:	2b40      	cmp	r3, #64	; 0x40
 80059da:	d007      	beq.n	80059ec <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	681a      	ldr	r2, [r3, #0]
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80059ea:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	68db      	ldr	r3, [r3, #12]
 80059f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059f4:	d14b      	bne.n	8005a8e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	685b      	ldr	r3, [r3, #4]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d002      	beq.n	8005a04 <HAL_SPI_Transmit+0xf6>
 80059fe:	8afb      	ldrh	r3, [r7, #22]
 8005a00:	2b01      	cmp	r3, #1
 8005a02:	d13e      	bne.n	8005a82 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a08:	881a      	ldrh	r2, [r3, #0]
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a14:	1c9a      	adds	r2, r3, #2
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a1e:	b29b      	uxth	r3, r3
 8005a20:	3b01      	subs	r3, #1
 8005a22:	b29a      	uxth	r2, r3
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005a28:	e02b      	b.n	8005a82 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	689b      	ldr	r3, [r3, #8]
 8005a30:	f003 0302 	and.w	r3, r3, #2
 8005a34:	2b02      	cmp	r3, #2
 8005a36:	d112      	bne.n	8005a5e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a3c:	881a      	ldrh	r2, [r3, #0]
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a48:	1c9a      	adds	r2, r3, #2
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a52:	b29b      	uxth	r3, r3
 8005a54:	3b01      	subs	r3, #1
 8005a56:	b29a      	uxth	r2, r3
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	86da      	strh	r2, [r3, #54]	; 0x36
 8005a5c:	e011      	b.n	8005a82 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a5e:	f7fe f9e7 	bl	8003e30 <HAL_GetTick>
 8005a62:	4602      	mov	r2, r0
 8005a64:	69bb      	ldr	r3, [r7, #24]
 8005a66:	1ad3      	subs	r3, r2, r3
 8005a68:	683a      	ldr	r2, [r7, #0]
 8005a6a:	429a      	cmp	r2, r3
 8005a6c:	d803      	bhi.n	8005a76 <HAL_SPI_Transmit+0x168>
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a74:	d102      	bne.n	8005a7c <HAL_SPI_Transmit+0x16e>
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d102      	bne.n	8005a82 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005a7c:	2303      	movs	r3, #3
 8005a7e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005a80:	e074      	b.n	8005b6c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a86:	b29b      	uxth	r3, r3
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d1ce      	bne.n	8005a2a <HAL_SPI_Transmit+0x11c>
 8005a8c:	e04c      	b.n	8005b28 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d002      	beq.n	8005a9c <HAL_SPI_Transmit+0x18e>
 8005a96:	8afb      	ldrh	r3, [r7, #22]
 8005a98:	2b01      	cmp	r3, #1
 8005a9a:	d140      	bne.n	8005b1e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	330c      	adds	r3, #12
 8005aa6:	7812      	ldrb	r2, [r2, #0]
 8005aa8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aae:	1c5a      	adds	r2, r3, #1
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ab8:	b29b      	uxth	r3, r3
 8005aba:	3b01      	subs	r3, #1
 8005abc:	b29a      	uxth	r2, r3
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005ac2:	e02c      	b.n	8005b1e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	689b      	ldr	r3, [r3, #8]
 8005aca:	f003 0302 	and.w	r3, r3, #2
 8005ace:	2b02      	cmp	r3, #2
 8005ad0:	d113      	bne.n	8005afa <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	330c      	adds	r3, #12
 8005adc:	7812      	ldrb	r2, [r2, #0]
 8005ade:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ae4:	1c5a      	adds	r2, r3, #1
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005aee:	b29b      	uxth	r3, r3
 8005af0:	3b01      	subs	r3, #1
 8005af2:	b29a      	uxth	r2, r3
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	86da      	strh	r2, [r3, #54]	; 0x36
 8005af8:	e011      	b.n	8005b1e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005afa:	f7fe f999 	bl	8003e30 <HAL_GetTick>
 8005afe:	4602      	mov	r2, r0
 8005b00:	69bb      	ldr	r3, [r7, #24]
 8005b02:	1ad3      	subs	r3, r2, r3
 8005b04:	683a      	ldr	r2, [r7, #0]
 8005b06:	429a      	cmp	r2, r3
 8005b08:	d803      	bhi.n	8005b12 <HAL_SPI_Transmit+0x204>
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b10:	d102      	bne.n	8005b18 <HAL_SPI_Transmit+0x20a>
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d102      	bne.n	8005b1e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005b18:	2303      	movs	r3, #3
 8005b1a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005b1c:	e026      	b.n	8005b6c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b22:	b29b      	uxth	r3, r3
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d1cd      	bne.n	8005ac4 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005b28:	69ba      	ldr	r2, [r7, #24]
 8005b2a:	6839      	ldr	r1, [r7, #0]
 8005b2c:	68f8      	ldr	r0, [r7, #12]
 8005b2e:	f000 fe13 	bl	8006758 <SPI_EndRxTxTransaction>
 8005b32:	4603      	mov	r3, r0
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d002      	beq.n	8005b3e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	2220      	movs	r2, #32
 8005b3c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	689b      	ldr	r3, [r3, #8]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d10a      	bne.n	8005b5c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005b46:	2300      	movs	r3, #0
 8005b48:	613b      	str	r3, [r7, #16]
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	68db      	ldr	r3, [r3, #12]
 8005b50:	613b      	str	r3, [r7, #16]
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	689b      	ldr	r3, [r3, #8]
 8005b58:	613b      	str	r3, [r7, #16]
 8005b5a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d002      	beq.n	8005b6a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005b64:	2301      	movs	r3, #1
 8005b66:	77fb      	strb	r3, [r7, #31]
 8005b68:	e000      	b.n	8005b6c <HAL_SPI_Transmit+0x25e>
  }

error:
 8005b6a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	2201      	movs	r2, #1
 8005b70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	2200      	movs	r2, #0
 8005b78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005b7c:	7ffb      	ldrb	r3, [r7, #31]
}
 8005b7e:	4618      	mov	r0, r3
 8005b80:	3720      	adds	r7, #32
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bd80      	pop	{r7, pc}
	...

08005b88 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b086      	sub	sp, #24
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	60f8      	str	r0, [r7, #12]
 8005b90:	60b9      	str	r1, [r7, #8]
 8005b92:	4613      	mov	r3, r2
 8005b94:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005b96:	2300      	movs	r3, #0
 8005b98:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005ba0:	2b01      	cmp	r3, #1
 8005ba2:	d101      	bne.n	8005ba8 <HAL_SPI_Transmit_DMA+0x20>
 8005ba4:	2302      	movs	r3, #2
 8005ba6:	e09b      	b.n	8005ce0 <HAL_SPI_Transmit_DMA+0x158>
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	2201      	movs	r2, #1
 8005bac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005bb6:	b2db      	uxtb	r3, r3
 8005bb8:	2b01      	cmp	r3, #1
 8005bba:	d002      	beq.n	8005bc2 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8005bbc:	2302      	movs	r3, #2
 8005bbe:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005bc0:	e089      	b.n	8005cd6 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d002      	beq.n	8005bce <HAL_SPI_Transmit_DMA+0x46>
 8005bc8:	88fb      	ldrh	r3, [r7, #6]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d102      	bne.n	8005bd4 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8005bce:	2301      	movs	r3, #1
 8005bd0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005bd2:	e080      	b.n	8005cd6 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	2203      	movs	r2, #3
 8005bd8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	2200      	movs	r2, #0
 8005be0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	68ba      	ldr	r2, [r7, #8]
 8005be6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	88fa      	ldrh	r2, [r7, #6]
 8005bec:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	88fa      	ldrh	r2, [r7, #6]
 8005bf2:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	2200      	movs	r2, #0
 8005c04:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	689b      	ldr	r3, [r3, #8]
 8005c16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c1a:	d10f      	bne.n	8005c3c <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	681a      	ldr	r2, [r3, #0]
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c2a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	681a      	ldr	r2, [r3, #0]
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005c3a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c40:	4a29      	ldr	r2, [pc, #164]	; (8005ce8 <HAL_SPI_Transmit_DMA+0x160>)
 8005c42:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c48:	4a28      	ldr	r2, [pc, #160]	; (8005cec <HAL_SPI_Transmit_DMA+0x164>)
 8005c4a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c50:	4a27      	ldr	r2, [pc, #156]	; (8005cf0 <HAL_SPI_Transmit_DMA+0x168>)
 8005c52:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c58:	2200      	movs	r2, #0
 8005c5a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c64:	4619      	mov	r1, r3
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	330c      	adds	r3, #12
 8005c6c:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c72:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005c74:	f7fe fb78 	bl	8004368 <HAL_DMA_Start_IT>
 8005c78:	4603      	mov	r3, r0
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d00c      	beq.n	8005c98 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c82:	f043 0210 	orr.w	r2, r3, #16
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	2201      	movs	r2, #1
 8005c92:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8005c96:	e01e      	b.n	8005cd6 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ca2:	2b40      	cmp	r3, #64	; 0x40
 8005ca4:	d007      	beq.n	8005cb6 <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	681a      	ldr	r2, [r3, #0]
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005cb4:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	685a      	ldr	r2, [r3, #4]
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f042 0220 	orr.w	r2, r2, #32
 8005cc4:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	685a      	ldr	r2, [r3, #4]
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f042 0202 	orr.w	r2, r2, #2
 8005cd4:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005cde:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	3718      	adds	r7, #24
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	bd80      	pop	{r7, pc}
 8005ce8:	080064c1 	.word	0x080064c1
 8005cec:	080062e1 	.word	0x080062e1
 8005cf0:	08006515 	.word	0x08006515

08005cf4 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b086      	sub	sp, #24
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	60f8      	str	r0, [r7, #12]
 8005cfc:	60b9      	str	r1, [r7, #8]
 8005cfe:	4613      	mov	r3, r2
 8005d00:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005d02:	2300      	movs	r3, #0
 8005d04:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	689b      	ldr	r3, [r3, #8]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d110      	bne.n	8005d30 <HAL_SPI_Receive_DMA+0x3c>
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d16:	d10b      	bne.n	8005d30 <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	2204      	movs	r2, #4
 8005d1c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8005d20:	88fb      	ldrh	r3, [r7, #6]
 8005d22:	68ba      	ldr	r2, [r7, #8]
 8005d24:	68b9      	ldr	r1, [r7, #8]
 8005d26:	68f8      	ldr	r0, [r7, #12]
 8005d28:	f000 f8a6 	bl	8005e78 <HAL_SPI_TransmitReceive_DMA>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	e09b      	b.n	8005e68 <HAL_SPI_Receive_DMA+0x174>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005d36:	2b01      	cmp	r3, #1
 8005d38:	d101      	bne.n	8005d3e <HAL_SPI_Receive_DMA+0x4a>
 8005d3a:	2302      	movs	r3, #2
 8005d3c:	e094      	b.n	8005e68 <HAL_SPI_Receive_DMA+0x174>
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	2201      	movs	r2, #1
 8005d42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005d4c:	b2db      	uxtb	r3, r3
 8005d4e:	2b01      	cmp	r3, #1
 8005d50:	d002      	beq.n	8005d58 <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 8005d52:	2302      	movs	r3, #2
 8005d54:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005d56:	e082      	b.n	8005e5e <HAL_SPI_Receive_DMA+0x16a>
  }

  if ((pData == NULL) || (Size == 0U))
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d002      	beq.n	8005d64 <HAL_SPI_Receive_DMA+0x70>
 8005d5e:	88fb      	ldrh	r3, [r7, #6]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d102      	bne.n	8005d6a <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 8005d64:	2301      	movs	r3, #1
 8005d66:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005d68:	e079      	b.n	8005e5e <HAL_SPI_Receive_DMA+0x16a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	2204      	movs	r2, #4
 8005d6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	2200      	movs	r2, #0
 8005d76:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	68ba      	ldr	r2, [r7, #8]
 8005d7c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	88fa      	ldrh	r2, [r7, #6]
 8005d82:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	88fa      	ldrh	r2, [r7, #6]
 8005d88:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	2200      	movs	r2, #0
 8005d94:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->TxXferSize  = 0U;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	2200      	movs	r2, #0
 8005da0:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	689b      	ldr	r3, [r3, #8]
 8005da6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005daa:	d10f      	bne.n	8005dcc <HAL_SPI_Receive_DMA+0xd8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	681a      	ldr	r2, [r3, #0]
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005dba:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	681a      	ldr	r2, [r3, #0]
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005dca:	601a      	str	r2, [r3, #0]

//  /* Set the SPI RxDMA Half transfer complete callback */
//  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dd0:	4a27      	ldr	r2, [pc, #156]	; (8005e70 <HAL_SPI_Receive_DMA+0x17c>)
 8005dd2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dd8:	4a26      	ldr	r2, [pc, #152]	; (8005e74 <HAL_SPI_Receive_DMA+0x180>)
 8005dda:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005de0:	2200      	movs	r2, #0
 8005de2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	330c      	adds	r3, #12
 8005dee:	4619      	mov	r1, r3
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005df4:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005dfa:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8005dfc:	f7fe fab4 	bl	8004368 <HAL_DMA_Start_IT>
 8005e00:	4603      	mov	r3, r0
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d00c      	beq.n	8005e20 <HAL_SPI_Receive_DMA+0x12c>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e0a:	f043 0210 	orr.w	r2, r3, #16
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8005e12:	2301      	movs	r3, #1
 8005e14:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	2201      	movs	r2, #1
 8005e1a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8005e1e:	e01e      	b.n	8005e5e <HAL_SPI_Receive_DMA+0x16a>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e2a:	2b40      	cmp	r3, #64	; 0x40
 8005e2c:	d007      	beq.n	8005e3e <HAL_SPI_Receive_DMA+0x14a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	681a      	ldr	r2, [r3, #0]
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e3c:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	685a      	ldr	r2, [r3, #4]
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f042 0220 	orr.w	r2, r2, #32
 8005e4c:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	685a      	ldr	r2, [r3, #4]
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f042 0201 	orr.w	r2, r2, #1
 8005e5c:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	2200      	movs	r2, #0
 8005e62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005e66:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e68:	4618      	mov	r0, r3
 8005e6a:	3718      	adds	r7, #24
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	bd80      	pop	{r7, pc}
 8005e70:	08006389 	.word	0x08006389
 8005e74:	08006515 	.word	0x08006515

08005e78 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b086      	sub	sp, #24
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	60f8      	str	r0, [r7, #12]
 8005e80:	60b9      	str	r1, [r7, #8]
 8005e82:	607a      	str	r2, [r7, #4]
 8005e84:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005e86:	2300      	movs	r3, #0
 8005e88:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005e90:	2b01      	cmp	r3, #1
 8005e92:	d101      	bne.n	8005e98 <HAL_SPI_TransmitReceive_DMA+0x20>
 8005e94:	2302      	movs	r3, #2
 8005e96:	e0e3      	b.n	8006060 <HAL_SPI_TransmitReceive_DMA+0x1e8>
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005ea6:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	685b      	ldr	r3, [r3, #4]
 8005eac:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8005eae:	7dbb      	ldrb	r3, [r7, #22]
 8005eb0:	2b01      	cmp	r3, #1
 8005eb2:	d00d      	beq.n	8005ed0 <HAL_SPI_TransmitReceive_DMA+0x58>
 8005eb4:	693b      	ldr	r3, [r7, #16]
 8005eb6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005eba:	d106      	bne.n	8005eca <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	689b      	ldr	r3, [r3, #8]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d102      	bne.n	8005eca <HAL_SPI_TransmitReceive_DMA+0x52>
 8005ec4:	7dbb      	ldrb	r3, [r7, #22]
 8005ec6:	2b04      	cmp	r3, #4
 8005ec8:	d002      	beq.n	8005ed0 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8005eca:	2302      	movs	r3, #2
 8005ecc:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005ece:	e0c2      	b.n	8006056 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d005      	beq.n	8005ee2 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d002      	beq.n	8005ee2 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8005edc:	887b      	ldrh	r3, [r7, #2]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d102      	bne.n	8005ee8 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005ee6:	e0b6      	b.n	8006056 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005eee:	b2db      	uxtb	r3, r3
 8005ef0:	2b04      	cmp	r3, #4
 8005ef2:	d003      	beq.n	8005efc <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	2205      	movs	r2, #5
 8005ef8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	2200      	movs	r2, #0
 8005f00:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	68ba      	ldr	r2, [r7, #8]
 8005f06:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	887a      	ldrh	r2, [r7, #2]
 8005f0c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	887a      	ldrh	r2, [r7, #2]
 8005f12:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	687a      	ldr	r2, [r7, #4]
 8005f18:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	887a      	ldrh	r2, [r7, #2]
 8005f1e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	887a      	ldrh	r2, [r7, #2]
 8005f24:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005f38:	b2db      	uxtb	r3, r3
 8005f3a:	2b04      	cmp	r3, #4
 8005f3c:	d108      	bne.n	8005f50 <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f42:	4a49      	ldr	r2, [pc, #292]	; (8006068 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 8005f44:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f4a:	4a48      	ldr	r2, [pc, #288]	; (800606c <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 8005f4c:	63da      	str	r2, [r3, #60]	; 0x3c
 8005f4e:	e007      	b.n	8005f60 <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f54:	4a46      	ldr	r2, [pc, #280]	; (8006070 <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 8005f56:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f5c:	4a45      	ldr	r2, [pc, #276]	; (8006074 <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 8005f5e:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f64:	4a44      	ldr	r2, [pc, #272]	; (8006078 <HAL_SPI_TransmitReceive_DMA+0x200>)
 8005f66:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	330c      	adds	r3, #12
 8005f7a:	4619      	mov	r1, r3
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f80:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f86:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8005f88:	f7fe f9ee 	bl	8004368 <HAL_DMA_Start_IT>
 8005f8c:	4603      	mov	r3, r0
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d00c      	beq.n	8005fac <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f96:	f043 0210 	orr.w	r2, r3, #16
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	2201      	movs	r2, #1
 8005fa6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8005faa:	e054      	b.n	8006056 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	685a      	ldr	r2, [r3, #4]
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f042 0201 	orr.w	r2, r2, #1
 8005fba:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fc8:	2200      	movs	r2, #0
 8005fca:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fd8:	2200      	movs	r2, #0
 8005fda:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fe4:	4619      	mov	r1, r3
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	330c      	adds	r3, #12
 8005fec:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ff2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005ff4:	f7fe f9b8 	bl	8004368 <HAL_DMA_Start_IT>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d00c      	beq.n	8006018 <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006002:	f043 0210 	orr.w	r2, r3, #16
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800600a:	2301      	movs	r3, #1
 800600c:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	2201      	movs	r2, #1
 8006012:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8006016:	e01e      	b.n	8006056 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006022:	2b40      	cmp	r3, #64	; 0x40
 8006024:	d007      	beq.n	8006036 <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	681a      	ldr	r2, [r3, #0]
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006034:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	685a      	ldr	r2, [r3, #4]
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f042 0220 	orr.w	r2, r2, #32
 8006044:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	685a      	ldr	r2, [r3, #4]
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f042 0202 	orr.w	r2, r2, #2
 8006054:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	2200      	movs	r2, #0
 800605a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800605e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006060:	4618      	mov	r0, r3
 8006062:	3718      	adds	r7, #24
 8006064:	46bd      	mov	sp, r7
 8006066:	bd80      	pop	{r7, pc}
 8006068:	080064dd 	.word	0x080064dd
 800606c:	08006389 	.word	0x08006389
 8006070:	080064f9 	.word	0x080064f9
 8006074:	08006431 	.word	0x08006431
 8006078:	08006515 	.word	0x08006515

0800607c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b088      	sub	sp, #32
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	685b      	ldr	r3, [r3, #4]
 800608a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	689b      	ldr	r3, [r3, #8]
 8006092:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006094:	69bb      	ldr	r3, [r7, #24]
 8006096:	099b      	lsrs	r3, r3, #6
 8006098:	f003 0301 	and.w	r3, r3, #1
 800609c:	2b00      	cmp	r3, #0
 800609e:	d10f      	bne.n	80060c0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80060a0:	69bb      	ldr	r3, [r7, #24]
 80060a2:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d00a      	beq.n	80060c0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80060aa:	69fb      	ldr	r3, [r7, #28]
 80060ac:	099b      	lsrs	r3, r3, #6
 80060ae:	f003 0301 	and.w	r3, r3, #1
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d004      	beq.n	80060c0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	4798      	blx	r3
    return;
 80060be:	e0d7      	b.n	8006270 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80060c0:	69bb      	ldr	r3, [r7, #24]
 80060c2:	085b      	lsrs	r3, r3, #1
 80060c4:	f003 0301 	and.w	r3, r3, #1
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d00a      	beq.n	80060e2 <HAL_SPI_IRQHandler+0x66>
 80060cc:	69fb      	ldr	r3, [r7, #28]
 80060ce:	09db      	lsrs	r3, r3, #7
 80060d0:	f003 0301 	and.w	r3, r3, #1
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d004      	beq.n	80060e2 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060dc:	6878      	ldr	r0, [r7, #4]
 80060de:	4798      	blx	r3
    return;
 80060e0:	e0c6      	b.n	8006270 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80060e2:	69bb      	ldr	r3, [r7, #24]
 80060e4:	095b      	lsrs	r3, r3, #5
 80060e6:	f003 0301 	and.w	r3, r3, #1
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d10c      	bne.n	8006108 <HAL_SPI_IRQHandler+0x8c>
 80060ee:	69bb      	ldr	r3, [r7, #24]
 80060f0:	099b      	lsrs	r3, r3, #6
 80060f2:	f003 0301 	and.w	r3, r3, #1
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d106      	bne.n	8006108 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80060fa:	69bb      	ldr	r3, [r7, #24]
 80060fc:	0a1b      	lsrs	r3, r3, #8
 80060fe:	f003 0301 	and.w	r3, r3, #1
 8006102:	2b00      	cmp	r3, #0
 8006104:	f000 80b4 	beq.w	8006270 <HAL_SPI_IRQHandler+0x1f4>
 8006108:	69fb      	ldr	r3, [r7, #28]
 800610a:	095b      	lsrs	r3, r3, #5
 800610c:	f003 0301 	and.w	r3, r3, #1
 8006110:	2b00      	cmp	r3, #0
 8006112:	f000 80ad 	beq.w	8006270 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006116:	69bb      	ldr	r3, [r7, #24]
 8006118:	099b      	lsrs	r3, r3, #6
 800611a:	f003 0301 	and.w	r3, r3, #1
 800611e:	2b00      	cmp	r3, #0
 8006120:	d023      	beq.n	800616a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006128:	b2db      	uxtb	r3, r3
 800612a:	2b03      	cmp	r3, #3
 800612c:	d011      	beq.n	8006152 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006132:	f043 0204 	orr.w	r2, r3, #4
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800613a:	2300      	movs	r3, #0
 800613c:	617b      	str	r3, [r7, #20]
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	68db      	ldr	r3, [r3, #12]
 8006144:	617b      	str	r3, [r7, #20]
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	689b      	ldr	r3, [r3, #8]
 800614c:	617b      	str	r3, [r7, #20]
 800614e:	697b      	ldr	r3, [r7, #20]
 8006150:	e00b      	b.n	800616a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006152:	2300      	movs	r3, #0
 8006154:	613b      	str	r3, [r7, #16]
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	68db      	ldr	r3, [r3, #12]
 800615c:	613b      	str	r3, [r7, #16]
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	689b      	ldr	r3, [r3, #8]
 8006164:	613b      	str	r3, [r7, #16]
 8006166:	693b      	ldr	r3, [r7, #16]
        return;
 8006168:	e082      	b.n	8006270 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800616a:	69bb      	ldr	r3, [r7, #24]
 800616c:	095b      	lsrs	r3, r3, #5
 800616e:	f003 0301 	and.w	r3, r3, #1
 8006172:	2b00      	cmp	r3, #0
 8006174:	d014      	beq.n	80061a0 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800617a:	f043 0201 	orr.w	r2, r3, #1
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006182:	2300      	movs	r3, #0
 8006184:	60fb      	str	r3, [r7, #12]
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	689b      	ldr	r3, [r3, #8]
 800618c:	60fb      	str	r3, [r7, #12]
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	681a      	ldr	r2, [r3, #0]
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800619c:	601a      	str	r2, [r3, #0]
 800619e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80061a0:	69bb      	ldr	r3, [r7, #24]
 80061a2:	0a1b      	lsrs	r3, r3, #8
 80061a4:	f003 0301 	and.w	r3, r3, #1
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d00c      	beq.n	80061c6 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061b0:	f043 0208 	orr.w	r2, r3, #8
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80061b8:	2300      	movs	r3, #0
 80061ba:	60bb      	str	r3, [r7, #8]
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	689b      	ldr	r3, [r3, #8]
 80061c2:	60bb      	str	r3, [r7, #8]
 80061c4:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d04f      	beq.n	800626e <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	685a      	ldr	r2, [r3, #4]
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80061dc:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2201      	movs	r2, #1
 80061e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80061e6:	69fb      	ldr	r3, [r7, #28]
 80061e8:	f003 0302 	and.w	r3, r3, #2
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d104      	bne.n	80061fa <HAL_SPI_IRQHandler+0x17e>
 80061f0:	69fb      	ldr	r3, [r7, #28]
 80061f2:	f003 0301 	and.w	r3, r3, #1
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d034      	beq.n	8006264 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	685a      	ldr	r2, [r3, #4]
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f022 0203 	bic.w	r2, r2, #3
 8006208:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800620e:	2b00      	cmp	r3, #0
 8006210:	d011      	beq.n	8006236 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006216:	4a18      	ldr	r2, [pc, #96]	; (8006278 <HAL_SPI_IRQHandler+0x1fc>)
 8006218:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800621e:	4618      	mov	r0, r3
 8006220:	f7fe f8fa 	bl	8004418 <HAL_DMA_Abort_IT>
 8006224:	4603      	mov	r3, r0
 8006226:	2b00      	cmp	r3, #0
 8006228:	d005      	beq.n	8006236 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800622e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800623a:	2b00      	cmp	r3, #0
 800623c:	d016      	beq.n	800626c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006242:	4a0d      	ldr	r2, [pc, #52]	; (8006278 <HAL_SPI_IRQHandler+0x1fc>)
 8006244:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800624a:	4618      	mov	r0, r3
 800624c:	f7fe f8e4 	bl	8004418 <HAL_DMA_Abort_IT>
 8006250:	4603      	mov	r3, r0
 8006252:	2b00      	cmp	r3, #0
 8006254:	d00a      	beq.n	800626c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800625a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8006262:	e003      	b.n	800626c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006264:	6878      	ldr	r0, [r7, #4]
 8006266:	f000 f831 	bl	80062cc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800626a:	e000      	b.n	800626e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800626c:	bf00      	nop
    return;
 800626e:	bf00      	nop
  }
}
 8006270:	3720      	adds	r7, #32
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}
 8006276:	bf00      	nop
 8006278:	08006555 	.word	0x08006555

0800627c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800627c:	b480      	push	{r7}
 800627e:	b083      	sub	sp, #12
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8006284:	bf00      	nop
 8006286:	370c      	adds	r7, #12
 8006288:	46bd      	mov	sp, r7
 800628a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628e:	4770      	bx	lr

08006290 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006290:	b480      	push	{r7}
 8006292:	b083      	sub	sp, #12
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8006298:	bf00      	nop
 800629a:	370c      	adds	r7, #12
 800629c:	46bd      	mov	sp, r7
 800629e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a2:	4770      	bx	lr

080062a4 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80062a4:	b480      	push	{r7}
 80062a6:	b083      	sub	sp, #12
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 80062ac:	bf00      	nop
 80062ae:	370c      	adds	r7, #12
 80062b0:	46bd      	mov	sp, r7
 80062b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b6:	4770      	bx	lr

080062b8 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80062b8:	b480      	push	{r7}
 80062ba:	b083      	sub	sp, #12
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 80062c0:	bf00      	nop
 80062c2:	370c      	adds	r7, #12
 80062c4:	46bd      	mov	sp, r7
 80062c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ca:	4770      	bx	lr

080062cc <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80062cc:	b480      	push	{r7}
 80062ce:	b083      	sub	sp, #12
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80062d4:	bf00      	nop
 80062d6:	370c      	adds	r7, #12
 80062d8:	46bd      	mov	sp, r7
 80062da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062de:	4770      	bx	lr

080062e0 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b086      	sub	sp, #24
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062ec:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80062ee:	f7fd fd9f 	bl	8003e30 <HAL_GetTick>
 80062f2:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006302:	d03b      	beq.n	800637c <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006304:	697b      	ldr	r3, [r7, #20]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	685a      	ldr	r2, [r3, #4]
 800630a:	697b      	ldr	r3, [r7, #20]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f022 0220 	bic.w	r2, r2, #32
 8006312:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006314:	697b      	ldr	r3, [r7, #20]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	685a      	ldr	r2, [r3, #4]
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f022 0202 	bic.w	r2, r2, #2
 8006322:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006324:	693a      	ldr	r2, [r7, #16]
 8006326:	2164      	movs	r1, #100	; 0x64
 8006328:	6978      	ldr	r0, [r7, #20]
 800632a:	f000 fa15 	bl	8006758 <SPI_EndRxTxTransaction>
 800632e:	4603      	mov	r3, r0
 8006330:	2b00      	cmp	r3, #0
 8006332:	d005      	beq.n	8006340 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006334:	697b      	ldr	r3, [r7, #20]
 8006336:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006338:	f043 0220 	orr.w	r2, r3, #32
 800633c:	697b      	ldr	r3, [r7, #20]
 800633e:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006340:	697b      	ldr	r3, [r7, #20]
 8006342:	689b      	ldr	r3, [r3, #8]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d10a      	bne.n	800635e <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006348:	2300      	movs	r3, #0
 800634a:	60fb      	str	r3, [r7, #12]
 800634c:	697b      	ldr	r3, [r7, #20]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	68db      	ldr	r3, [r3, #12]
 8006352:	60fb      	str	r3, [r7, #12]
 8006354:	697b      	ldr	r3, [r7, #20]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	689b      	ldr	r3, [r3, #8]
 800635a:	60fb      	str	r3, [r7, #12]
 800635c:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800635e:	697b      	ldr	r3, [r7, #20]
 8006360:	2200      	movs	r2, #0
 8006362:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8006364:	697b      	ldr	r3, [r7, #20]
 8006366:	2201      	movs	r2, #1
 8006368:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800636c:	697b      	ldr	r3, [r7, #20]
 800636e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006370:	2b00      	cmp	r3, #0
 8006372:	d003      	beq.n	800637c <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006374:	6978      	ldr	r0, [r7, #20]
 8006376:	f7ff ffa9 	bl	80062cc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800637a:	e002      	b.n	8006382 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800637c:	6978      	ldr	r0, [r7, #20]
 800637e:	f7fd faff 	bl	8003980 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006382:	3718      	adds	r7, #24
 8006384:	46bd      	mov	sp, r7
 8006386:	bd80      	pop	{r7, pc}

08006388 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b084      	sub	sp, #16
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006394:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006396:	f7fd fd4b 	bl	8003e30 <HAL_GetTick>
 800639a:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063aa:	d03b      	beq.n	8006424 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	685a      	ldr	r2, [r3, #4]
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f022 0220 	bic.w	r2, r2, #32
 80063ba:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	689b      	ldr	r3, [r3, #8]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d10d      	bne.n	80063e0 <SPI_DMAReceiveCplt+0x58>
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	685b      	ldr	r3, [r3, #4]
 80063c8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80063cc:	d108      	bne.n	80063e0 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	685a      	ldr	r2, [r3, #4]
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f022 0203 	bic.w	r2, r2, #3
 80063dc:	605a      	str	r2, [r3, #4]
 80063de:	e007      	b.n	80063f0 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	685a      	ldr	r2, [r3, #4]
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f022 0201 	bic.w	r2, r2, #1
 80063ee:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80063f0:	68ba      	ldr	r2, [r7, #8]
 80063f2:	2164      	movs	r1, #100	; 0x64
 80063f4:	68f8      	ldr	r0, [r7, #12]
 80063f6:	f000 f949 	bl	800668c <SPI_EndRxTransaction>
 80063fa:	4603      	mov	r3, r0
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d002      	beq.n	8006406 <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	2220      	movs	r2, #32
 8006404:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	2200      	movs	r2, #0
 800640a:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	2201      	movs	r2, #1
 8006410:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006418:	2b00      	cmp	r3, #0
 800641a:	d003      	beq.n	8006424 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800641c:	68f8      	ldr	r0, [r7, #12]
 800641e:	f7ff ff55 	bl	80062cc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006422:	e002      	b.n	800642a <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8006424:	68f8      	ldr	r0, [r7, #12]
 8006426:	f7fd facd 	bl	80039c4 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800642a:	3710      	adds	r7, #16
 800642c:	46bd      	mov	sp, r7
 800642e:	bd80      	pop	{r7, pc}

08006430 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b084      	sub	sp, #16
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800643c:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800643e:	f7fd fcf7 	bl	8003e30 <HAL_GetTick>
 8006442:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800644e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006452:	d02f      	beq.n	80064b4 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	685a      	ldr	r2, [r3, #4]
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f022 0220 	bic.w	r2, r2, #32
 8006462:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006464:	68ba      	ldr	r2, [r7, #8]
 8006466:	2164      	movs	r1, #100	; 0x64
 8006468:	68f8      	ldr	r0, [r7, #12]
 800646a:	f000 f975 	bl	8006758 <SPI_EndRxTxTransaction>
 800646e:	4603      	mov	r3, r0
 8006470:	2b00      	cmp	r3, #0
 8006472:	d005      	beq.n	8006480 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006478:	f043 0220 	orr.w	r2, r3, #32
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	685a      	ldr	r2, [r3, #4]
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f022 0203 	bic.w	r2, r2, #3
 800648e:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	2200      	movs	r2, #0
 8006494:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	2200      	movs	r2, #0
 800649a:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	2201      	movs	r2, #1
 80064a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d003      	beq.n	80064b4 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80064ac:	68f8      	ldr	r0, [r7, #12]
 80064ae:	f7ff ff0d 	bl	80062cc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80064b2:	e002      	b.n	80064ba <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 80064b4:	68f8      	ldr	r0, [r7, #12]
 80064b6:	f7ff fee1 	bl	800627c <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80064ba:	3710      	adds	r7, #16
 80064bc:	46bd      	mov	sp, r7
 80064be:	bd80      	pop	{r7, pc}

080064c0 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b084      	sub	sp, #16
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064cc:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80064ce:	68f8      	ldr	r0, [r7, #12]
 80064d0:	f7ff fede 	bl	8006290 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80064d4:	bf00      	nop
 80064d6:	3710      	adds	r7, #16
 80064d8:	46bd      	mov	sp, r7
 80064da:	bd80      	pop	{r7, pc}

080064dc <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b084      	sub	sp, #16
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064e8:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 80064ea:	68f8      	ldr	r0, [r7, #12]
 80064ec:	f7ff feda 	bl	80062a4 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80064f0:	bf00      	nop
 80064f2:	3710      	adds	r7, #16
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bd80      	pop	{r7, pc}

080064f8 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b084      	sub	sp, #16
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006504:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8006506:	68f8      	ldr	r0, [r7, #12]
 8006508:	f7ff fed6 	bl	80062b8 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800650c:	bf00      	nop
 800650e:	3710      	adds	r7, #16
 8006510:	46bd      	mov	sp, r7
 8006512:	bd80      	pop	{r7, pc}

08006514 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b084      	sub	sp, #16
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006520:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	685a      	ldr	r2, [r3, #4]
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f022 0203 	bic.w	r2, r2, #3
 8006530:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006536:	f043 0210 	orr.w	r2, r3, #16
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	2201      	movs	r2, #1
 8006542:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006546:	68f8      	ldr	r0, [r7, #12]
 8006548:	f7ff fec0 	bl	80062cc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800654c:	bf00      	nop
 800654e:	3710      	adds	r7, #16
 8006550:	46bd      	mov	sp, r7
 8006552:	bd80      	pop	{r7, pc}

08006554 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b084      	sub	sp, #16
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006560:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	2200      	movs	r2, #0
 8006566:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	2200      	movs	r2, #0
 800656c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800656e:	68f8      	ldr	r0, [r7, #12]
 8006570:	f7ff feac 	bl	80062cc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006574:	bf00      	nop
 8006576:	3710      	adds	r7, #16
 8006578:	46bd      	mov	sp, r7
 800657a:	bd80      	pop	{r7, pc}

0800657c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b088      	sub	sp, #32
 8006580:	af00      	add	r7, sp, #0
 8006582:	60f8      	str	r0, [r7, #12]
 8006584:	60b9      	str	r1, [r7, #8]
 8006586:	603b      	str	r3, [r7, #0]
 8006588:	4613      	mov	r3, r2
 800658a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800658c:	f7fd fc50 	bl	8003e30 <HAL_GetTick>
 8006590:	4602      	mov	r2, r0
 8006592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006594:	1a9b      	subs	r3, r3, r2
 8006596:	683a      	ldr	r2, [r7, #0]
 8006598:	4413      	add	r3, r2
 800659a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800659c:	f7fd fc48 	bl	8003e30 <HAL_GetTick>
 80065a0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80065a2:	4b39      	ldr	r3, [pc, #228]	; (8006688 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	015b      	lsls	r3, r3, #5
 80065a8:	0d1b      	lsrs	r3, r3, #20
 80065aa:	69fa      	ldr	r2, [r7, #28]
 80065ac:	fb02 f303 	mul.w	r3, r2, r3
 80065b0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80065b2:	e054      	b.n	800665e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065ba:	d050      	beq.n	800665e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80065bc:	f7fd fc38 	bl	8003e30 <HAL_GetTick>
 80065c0:	4602      	mov	r2, r0
 80065c2:	69bb      	ldr	r3, [r7, #24]
 80065c4:	1ad3      	subs	r3, r2, r3
 80065c6:	69fa      	ldr	r2, [r7, #28]
 80065c8:	429a      	cmp	r2, r3
 80065ca:	d902      	bls.n	80065d2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80065cc:	69fb      	ldr	r3, [r7, #28]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d13d      	bne.n	800664e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	685a      	ldr	r2, [r3, #4]
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80065e0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	685b      	ldr	r3, [r3, #4]
 80065e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80065ea:	d111      	bne.n	8006610 <SPI_WaitFlagStateUntilTimeout+0x94>
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	689b      	ldr	r3, [r3, #8]
 80065f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065f4:	d004      	beq.n	8006600 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	689b      	ldr	r3, [r3, #8]
 80065fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065fe:	d107      	bne.n	8006610 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	681a      	ldr	r2, [r3, #0]
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800660e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006614:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006618:	d10f      	bne.n	800663a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	681a      	ldr	r2, [r3, #0]
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006628:	601a      	str	r2, [r3, #0]
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	681a      	ldr	r2, [r3, #0]
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006638:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	2201      	movs	r2, #1
 800663e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	2200      	movs	r2, #0
 8006646:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800664a:	2303      	movs	r3, #3
 800664c:	e017      	b.n	800667e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800664e:	697b      	ldr	r3, [r7, #20]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d101      	bne.n	8006658 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006654:	2300      	movs	r3, #0
 8006656:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006658:	697b      	ldr	r3, [r7, #20]
 800665a:	3b01      	subs	r3, #1
 800665c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	689a      	ldr	r2, [r3, #8]
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	4013      	ands	r3, r2
 8006668:	68ba      	ldr	r2, [r7, #8]
 800666a:	429a      	cmp	r2, r3
 800666c:	bf0c      	ite	eq
 800666e:	2301      	moveq	r3, #1
 8006670:	2300      	movne	r3, #0
 8006672:	b2db      	uxtb	r3, r3
 8006674:	461a      	mov	r2, r3
 8006676:	79fb      	ldrb	r3, [r7, #7]
 8006678:	429a      	cmp	r2, r3
 800667a:	d19b      	bne.n	80065b4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800667c:	2300      	movs	r3, #0
}
 800667e:	4618      	mov	r0, r3
 8006680:	3720      	adds	r7, #32
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}
 8006686:	bf00      	nop
 8006688:	200000a8 	.word	0x200000a8

0800668c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b086      	sub	sp, #24
 8006690:	af02      	add	r7, sp, #8
 8006692:	60f8      	str	r0, [r7, #12]
 8006694:	60b9      	str	r1, [r7, #8]
 8006696:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	685b      	ldr	r3, [r3, #4]
 800669c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80066a0:	d111      	bne.n	80066c6 <SPI_EndRxTransaction+0x3a>
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	689b      	ldr	r3, [r3, #8]
 80066a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066aa:	d004      	beq.n	80066b6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	689b      	ldr	r3, [r3, #8]
 80066b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066b4:	d107      	bne.n	80066c6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	681a      	ldr	r2, [r3, #0]
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066c4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	685b      	ldr	r3, [r3, #4]
 80066ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80066ce:	d12a      	bne.n	8006726 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	689b      	ldr	r3, [r3, #8]
 80066d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066d8:	d012      	beq.n	8006700 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	9300      	str	r3, [sp, #0]
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	2200      	movs	r2, #0
 80066e2:	2180      	movs	r1, #128	; 0x80
 80066e4:	68f8      	ldr	r0, [r7, #12]
 80066e6:	f7ff ff49 	bl	800657c <SPI_WaitFlagStateUntilTimeout>
 80066ea:	4603      	mov	r3, r0
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d02d      	beq.n	800674c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066f4:	f043 0220 	orr.w	r2, r3, #32
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80066fc:	2303      	movs	r3, #3
 80066fe:	e026      	b.n	800674e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	9300      	str	r3, [sp, #0]
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	2200      	movs	r2, #0
 8006708:	2101      	movs	r1, #1
 800670a:	68f8      	ldr	r0, [r7, #12]
 800670c:	f7ff ff36 	bl	800657c <SPI_WaitFlagStateUntilTimeout>
 8006710:	4603      	mov	r3, r0
 8006712:	2b00      	cmp	r3, #0
 8006714:	d01a      	beq.n	800674c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800671a:	f043 0220 	orr.w	r2, r3, #32
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006722:	2303      	movs	r3, #3
 8006724:	e013      	b.n	800674e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	9300      	str	r3, [sp, #0]
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	2200      	movs	r2, #0
 800672e:	2101      	movs	r1, #1
 8006730:	68f8      	ldr	r0, [r7, #12]
 8006732:	f7ff ff23 	bl	800657c <SPI_WaitFlagStateUntilTimeout>
 8006736:	4603      	mov	r3, r0
 8006738:	2b00      	cmp	r3, #0
 800673a:	d007      	beq.n	800674c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006740:	f043 0220 	orr.w	r2, r3, #32
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006748:	2303      	movs	r3, #3
 800674a:	e000      	b.n	800674e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800674c:	2300      	movs	r3, #0
}
 800674e:	4618      	mov	r0, r3
 8006750:	3710      	adds	r7, #16
 8006752:	46bd      	mov	sp, r7
 8006754:	bd80      	pop	{r7, pc}
	...

08006758 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b088      	sub	sp, #32
 800675c:	af02      	add	r7, sp, #8
 800675e:	60f8      	str	r0, [r7, #12]
 8006760:	60b9      	str	r1, [r7, #8]
 8006762:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006764:	4b1b      	ldr	r3, [pc, #108]	; (80067d4 <SPI_EndRxTxTransaction+0x7c>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a1b      	ldr	r2, [pc, #108]	; (80067d8 <SPI_EndRxTxTransaction+0x80>)
 800676a:	fba2 2303 	umull	r2, r3, r2, r3
 800676e:	0d5b      	lsrs	r3, r3, #21
 8006770:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006774:	fb02 f303 	mul.w	r3, r2, r3
 8006778:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006782:	d112      	bne.n	80067aa <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	9300      	str	r3, [sp, #0]
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	2200      	movs	r2, #0
 800678c:	2180      	movs	r1, #128	; 0x80
 800678e:	68f8      	ldr	r0, [r7, #12]
 8006790:	f7ff fef4 	bl	800657c <SPI_WaitFlagStateUntilTimeout>
 8006794:	4603      	mov	r3, r0
 8006796:	2b00      	cmp	r3, #0
 8006798:	d016      	beq.n	80067c8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800679e:	f043 0220 	orr.w	r2, r3, #32
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80067a6:	2303      	movs	r3, #3
 80067a8:	e00f      	b.n	80067ca <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80067aa:	697b      	ldr	r3, [r7, #20]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d00a      	beq.n	80067c6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80067b0:	697b      	ldr	r3, [r7, #20]
 80067b2:	3b01      	subs	r3, #1
 80067b4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	689b      	ldr	r3, [r3, #8]
 80067bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067c0:	2b80      	cmp	r3, #128	; 0x80
 80067c2:	d0f2      	beq.n	80067aa <SPI_EndRxTxTransaction+0x52>
 80067c4:	e000      	b.n	80067c8 <SPI_EndRxTxTransaction+0x70>
        break;
 80067c6:	bf00      	nop
  }

  return HAL_OK;
 80067c8:	2300      	movs	r3, #0
}
 80067ca:	4618      	mov	r0, r3
 80067cc:	3718      	adds	r7, #24
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bd80      	pop	{r7, pc}
 80067d2:	bf00      	nop
 80067d4:	200000a8 	.word	0x200000a8
 80067d8:	165e9f81 	.word	0x165e9f81

080067dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b082      	sub	sp, #8
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d101      	bne.n	80067ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80067ea:	2301      	movs	r3, #1
 80067ec:	e03f      	b.n	800686e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067f4:	b2db      	uxtb	r3, r3
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d106      	bne.n	8006808 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2200      	movs	r2, #0
 80067fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f7fd f86a 	bl	80038dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2224      	movs	r2, #36	; 0x24
 800680c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	68da      	ldr	r2, [r3, #12]
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800681e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	f000 f929 	bl	8006a78 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	691a      	ldr	r2, [r3, #16]
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006834:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	695a      	ldr	r2, [r3, #20]
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006844:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	68da      	ldr	r2, [r3, #12]
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006854:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2200      	movs	r2, #0
 800685a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2220      	movs	r2, #32
 8006860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2220      	movs	r2, #32
 8006868:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800686c:	2300      	movs	r3, #0
}
 800686e:	4618      	mov	r0, r3
 8006870:	3708      	adds	r7, #8
 8006872:	46bd      	mov	sp, r7
 8006874:	bd80      	pop	{r7, pc}

08006876 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006876:	b580      	push	{r7, lr}
 8006878:	b08a      	sub	sp, #40	; 0x28
 800687a:	af02      	add	r7, sp, #8
 800687c:	60f8      	str	r0, [r7, #12]
 800687e:	60b9      	str	r1, [r7, #8]
 8006880:	603b      	str	r3, [r7, #0]
 8006882:	4613      	mov	r3, r2
 8006884:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006886:	2300      	movs	r3, #0
 8006888:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006890:	b2db      	uxtb	r3, r3
 8006892:	2b20      	cmp	r3, #32
 8006894:	d17c      	bne.n	8006990 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006896:	68bb      	ldr	r3, [r7, #8]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d002      	beq.n	80068a2 <HAL_UART_Transmit+0x2c>
 800689c:	88fb      	ldrh	r3, [r7, #6]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d101      	bne.n	80068a6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80068a2:	2301      	movs	r3, #1
 80068a4:	e075      	b.n	8006992 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068ac:	2b01      	cmp	r3, #1
 80068ae:	d101      	bne.n	80068b4 <HAL_UART_Transmit+0x3e>
 80068b0:	2302      	movs	r3, #2
 80068b2:	e06e      	b.n	8006992 <HAL_UART_Transmit+0x11c>
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	2201      	movs	r2, #1
 80068b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	2200      	movs	r2, #0
 80068c0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	2221      	movs	r2, #33	; 0x21
 80068c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80068ca:	f7fd fab1 	bl	8003e30 <HAL_GetTick>
 80068ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	88fa      	ldrh	r2, [r7, #6]
 80068d4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	88fa      	ldrh	r2, [r7, #6]
 80068da:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	689b      	ldr	r3, [r3, #8]
 80068e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068e4:	d108      	bne.n	80068f8 <HAL_UART_Transmit+0x82>
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	691b      	ldr	r3, [r3, #16]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d104      	bne.n	80068f8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80068ee:	2300      	movs	r3, #0
 80068f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	61bb      	str	r3, [r7, #24]
 80068f6:	e003      	b.n	8006900 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80068fc:	2300      	movs	r3, #0
 80068fe:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	2200      	movs	r2, #0
 8006904:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006908:	e02a      	b.n	8006960 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	9300      	str	r3, [sp, #0]
 800690e:	697b      	ldr	r3, [r7, #20]
 8006910:	2200      	movs	r2, #0
 8006912:	2180      	movs	r1, #128	; 0x80
 8006914:	68f8      	ldr	r0, [r7, #12]
 8006916:	f000 f840 	bl	800699a <UART_WaitOnFlagUntilTimeout>
 800691a:	4603      	mov	r3, r0
 800691c:	2b00      	cmp	r3, #0
 800691e:	d001      	beq.n	8006924 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006920:	2303      	movs	r3, #3
 8006922:	e036      	b.n	8006992 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006924:	69fb      	ldr	r3, [r7, #28]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d10b      	bne.n	8006942 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800692a:	69bb      	ldr	r3, [r7, #24]
 800692c:	881b      	ldrh	r3, [r3, #0]
 800692e:	461a      	mov	r2, r3
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006938:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800693a:	69bb      	ldr	r3, [r7, #24]
 800693c:	3302      	adds	r3, #2
 800693e:	61bb      	str	r3, [r7, #24]
 8006940:	e007      	b.n	8006952 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006942:	69fb      	ldr	r3, [r7, #28]
 8006944:	781a      	ldrb	r2, [r3, #0]
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800694c:	69fb      	ldr	r3, [r7, #28]
 800694e:	3301      	adds	r3, #1
 8006950:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006956:	b29b      	uxth	r3, r3
 8006958:	3b01      	subs	r3, #1
 800695a:	b29a      	uxth	r2, r3
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006964:	b29b      	uxth	r3, r3
 8006966:	2b00      	cmp	r3, #0
 8006968:	d1cf      	bne.n	800690a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	9300      	str	r3, [sp, #0]
 800696e:	697b      	ldr	r3, [r7, #20]
 8006970:	2200      	movs	r2, #0
 8006972:	2140      	movs	r1, #64	; 0x40
 8006974:	68f8      	ldr	r0, [r7, #12]
 8006976:	f000 f810 	bl	800699a <UART_WaitOnFlagUntilTimeout>
 800697a:	4603      	mov	r3, r0
 800697c:	2b00      	cmp	r3, #0
 800697e:	d001      	beq.n	8006984 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006980:	2303      	movs	r3, #3
 8006982:	e006      	b.n	8006992 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	2220      	movs	r2, #32
 8006988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800698c:	2300      	movs	r3, #0
 800698e:	e000      	b.n	8006992 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006990:	2302      	movs	r3, #2
  }
}
 8006992:	4618      	mov	r0, r3
 8006994:	3720      	adds	r7, #32
 8006996:	46bd      	mov	sp, r7
 8006998:	bd80      	pop	{r7, pc}

0800699a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800699a:	b580      	push	{r7, lr}
 800699c:	b090      	sub	sp, #64	; 0x40
 800699e:	af00      	add	r7, sp, #0
 80069a0:	60f8      	str	r0, [r7, #12]
 80069a2:	60b9      	str	r1, [r7, #8]
 80069a4:	603b      	str	r3, [r7, #0]
 80069a6:	4613      	mov	r3, r2
 80069a8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069aa:	e050      	b.n	8006a4e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80069ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069b2:	d04c      	beq.n	8006a4e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80069b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d007      	beq.n	80069ca <UART_WaitOnFlagUntilTimeout+0x30>
 80069ba:	f7fd fa39 	bl	8003e30 <HAL_GetTick>
 80069be:	4602      	mov	r2, r0
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	1ad3      	subs	r3, r2, r3
 80069c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80069c6:	429a      	cmp	r2, r3
 80069c8:	d241      	bcs.n	8006a4e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	330c      	adds	r3, #12
 80069d0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069d4:	e853 3f00 	ldrex	r3, [r3]
 80069d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80069da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069dc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80069e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	330c      	adds	r3, #12
 80069e8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80069ea:	637a      	str	r2, [r7, #52]	; 0x34
 80069ec:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80069f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80069f2:	e841 2300 	strex	r3, r2, [r1]
 80069f6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80069f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d1e5      	bne.n	80069ca <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	3314      	adds	r3, #20
 8006a04:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a06:	697b      	ldr	r3, [r7, #20]
 8006a08:	e853 3f00 	ldrex	r3, [r3]
 8006a0c:	613b      	str	r3, [r7, #16]
   return(result);
 8006a0e:	693b      	ldr	r3, [r7, #16]
 8006a10:	f023 0301 	bic.w	r3, r3, #1
 8006a14:	63bb      	str	r3, [r7, #56]	; 0x38
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	3314      	adds	r3, #20
 8006a1c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006a1e:	623a      	str	r2, [r7, #32]
 8006a20:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a22:	69f9      	ldr	r1, [r7, #28]
 8006a24:	6a3a      	ldr	r2, [r7, #32]
 8006a26:	e841 2300 	strex	r3, r2, [r1]
 8006a2a:	61bb      	str	r3, [r7, #24]
   return(result);
 8006a2c:	69bb      	ldr	r3, [r7, #24]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d1e5      	bne.n	80069fe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	2220      	movs	r2, #32
 8006a36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	2220      	movs	r2, #32
 8006a3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	2200      	movs	r2, #0
 8006a46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006a4a:	2303      	movs	r3, #3
 8006a4c:	e00f      	b.n	8006a6e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	681a      	ldr	r2, [r3, #0]
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	4013      	ands	r3, r2
 8006a58:	68ba      	ldr	r2, [r7, #8]
 8006a5a:	429a      	cmp	r2, r3
 8006a5c:	bf0c      	ite	eq
 8006a5e:	2301      	moveq	r3, #1
 8006a60:	2300      	movne	r3, #0
 8006a62:	b2db      	uxtb	r3, r3
 8006a64:	461a      	mov	r2, r3
 8006a66:	79fb      	ldrb	r3, [r7, #7]
 8006a68:	429a      	cmp	r2, r3
 8006a6a:	d09f      	beq.n	80069ac <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006a6c:	2300      	movs	r3, #0
}
 8006a6e:	4618      	mov	r0, r3
 8006a70:	3740      	adds	r7, #64	; 0x40
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bd80      	pop	{r7, pc}
	...

08006a78 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006a78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006a7c:	b0c0      	sub	sp, #256	; 0x100
 8006a7e:	af00      	add	r7, sp, #0
 8006a80:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	691b      	ldr	r3, [r3, #16]
 8006a8c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006a90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a94:	68d9      	ldr	r1, [r3, #12]
 8006a96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a9a:	681a      	ldr	r2, [r3, #0]
 8006a9c:	ea40 0301 	orr.w	r3, r0, r1
 8006aa0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006aa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006aa6:	689a      	ldr	r2, [r3, #8]
 8006aa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006aac:	691b      	ldr	r3, [r3, #16]
 8006aae:	431a      	orrs	r2, r3
 8006ab0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ab4:	695b      	ldr	r3, [r3, #20]
 8006ab6:	431a      	orrs	r2, r3
 8006ab8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006abc:	69db      	ldr	r3, [r3, #28]
 8006abe:	4313      	orrs	r3, r2
 8006ac0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006ac4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	68db      	ldr	r3, [r3, #12]
 8006acc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006ad0:	f021 010c 	bic.w	r1, r1, #12
 8006ad4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ad8:	681a      	ldr	r2, [r3, #0]
 8006ada:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006ade:	430b      	orrs	r3, r1
 8006ae0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006ae2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	695b      	ldr	r3, [r3, #20]
 8006aea:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006aee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006af2:	6999      	ldr	r1, [r3, #24]
 8006af4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006af8:	681a      	ldr	r2, [r3, #0]
 8006afa:	ea40 0301 	orr.w	r3, r0, r1
 8006afe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006b00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b04:	681a      	ldr	r2, [r3, #0]
 8006b06:	4b8f      	ldr	r3, [pc, #572]	; (8006d44 <UART_SetConfig+0x2cc>)
 8006b08:	429a      	cmp	r2, r3
 8006b0a:	d005      	beq.n	8006b18 <UART_SetConfig+0xa0>
 8006b0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b10:	681a      	ldr	r2, [r3, #0]
 8006b12:	4b8d      	ldr	r3, [pc, #564]	; (8006d48 <UART_SetConfig+0x2d0>)
 8006b14:	429a      	cmp	r2, r3
 8006b16:	d104      	bne.n	8006b22 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006b18:	f7fe fe34 	bl	8005784 <HAL_RCC_GetPCLK2Freq>
 8006b1c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006b20:	e003      	b.n	8006b2a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006b22:	f7fe fe1b 	bl	800575c <HAL_RCC_GetPCLK1Freq>
 8006b26:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b2e:	69db      	ldr	r3, [r3, #28]
 8006b30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b34:	f040 810c 	bne.w	8006d50 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006b38:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006b42:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006b46:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006b4a:	4622      	mov	r2, r4
 8006b4c:	462b      	mov	r3, r5
 8006b4e:	1891      	adds	r1, r2, r2
 8006b50:	65b9      	str	r1, [r7, #88]	; 0x58
 8006b52:	415b      	adcs	r3, r3
 8006b54:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006b56:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006b5a:	4621      	mov	r1, r4
 8006b5c:	eb12 0801 	adds.w	r8, r2, r1
 8006b60:	4629      	mov	r1, r5
 8006b62:	eb43 0901 	adc.w	r9, r3, r1
 8006b66:	f04f 0200 	mov.w	r2, #0
 8006b6a:	f04f 0300 	mov.w	r3, #0
 8006b6e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006b72:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006b76:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006b7a:	4690      	mov	r8, r2
 8006b7c:	4699      	mov	r9, r3
 8006b7e:	4623      	mov	r3, r4
 8006b80:	eb18 0303 	adds.w	r3, r8, r3
 8006b84:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006b88:	462b      	mov	r3, r5
 8006b8a:	eb49 0303 	adc.w	r3, r9, r3
 8006b8e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006b92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b96:	685b      	ldr	r3, [r3, #4]
 8006b98:	2200      	movs	r2, #0
 8006b9a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006b9e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006ba2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006ba6:	460b      	mov	r3, r1
 8006ba8:	18db      	adds	r3, r3, r3
 8006baa:	653b      	str	r3, [r7, #80]	; 0x50
 8006bac:	4613      	mov	r3, r2
 8006bae:	eb42 0303 	adc.w	r3, r2, r3
 8006bb2:	657b      	str	r3, [r7, #84]	; 0x54
 8006bb4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006bb8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006bbc:	f7fa f80c 	bl	8000bd8 <__aeabi_uldivmod>
 8006bc0:	4602      	mov	r2, r0
 8006bc2:	460b      	mov	r3, r1
 8006bc4:	4b61      	ldr	r3, [pc, #388]	; (8006d4c <UART_SetConfig+0x2d4>)
 8006bc6:	fba3 2302 	umull	r2, r3, r3, r2
 8006bca:	095b      	lsrs	r3, r3, #5
 8006bcc:	011c      	lsls	r4, r3, #4
 8006bce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006bd8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006bdc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006be0:	4642      	mov	r2, r8
 8006be2:	464b      	mov	r3, r9
 8006be4:	1891      	adds	r1, r2, r2
 8006be6:	64b9      	str	r1, [r7, #72]	; 0x48
 8006be8:	415b      	adcs	r3, r3
 8006bea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006bec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006bf0:	4641      	mov	r1, r8
 8006bf2:	eb12 0a01 	adds.w	sl, r2, r1
 8006bf6:	4649      	mov	r1, r9
 8006bf8:	eb43 0b01 	adc.w	fp, r3, r1
 8006bfc:	f04f 0200 	mov.w	r2, #0
 8006c00:	f04f 0300 	mov.w	r3, #0
 8006c04:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006c08:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006c0c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006c10:	4692      	mov	sl, r2
 8006c12:	469b      	mov	fp, r3
 8006c14:	4643      	mov	r3, r8
 8006c16:	eb1a 0303 	adds.w	r3, sl, r3
 8006c1a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006c1e:	464b      	mov	r3, r9
 8006c20:	eb4b 0303 	adc.w	r3, fp, r3
 8006c24:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006c28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c2c:	685b      	ldr	r3, [r3, #4]
 8006c2e:	2200      	movs	r2, #0
 8006c30:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006c34:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006c38:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006c3c:	460b      	mov	r3, r1
 8006c3e:	18db      	adds	r3, r3, r3
 8006c40:	643b      	str	r3, [r7, #64]	; 0x40
 8006c42:	4613      	mov	r3, r2
 8006c44:	eb42 0303 	adc.w	r3, r2, r3
 8006c48:	647b      	str	r3, [r7, #68]	; 0x44
 8006c4a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006c4e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006c52:	f7f9 ffc1 	bl	8000bd8 <__aeabi_uldivmod>
 8006c56:	4602      	mov	r2, r0
 8006c58:	460b      	mov	r3, r1
 8006c5a:	4611      	mov	r1, r2
 8006c5c:	4b3b      	ldr	r3, [pc, #236]	; (8006d4c <UART_SetConfig+0x2d4>)
 8006c5e:	fba3 2301 	umull	r2, r3, r3, r1
 8006c62:	095b      	lsrs	r3, r3, #5
 8006c64:	2264      	movs	r2, #100	; 0x64
 8006c66:	fb02 f303 	mul.w	r3, r2, r3
 8006c6a:	1acb      	subs	r3, r1, r3
 8006c6c:	00db      	lsls	r3, r3, #3
 8006c6e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006c72:	4b36      	ldr	r3, [pc, #216]	; (8006d4c <UART_SetConfig+0x2d4>)
 8006c74:	fba3 2302 	umull	r2, r3, r3, r2
 8006c78:	095b      	lsrs	r3, r3, #5
 8006c7a:	005b      	lsls	r3, r3, #1
 8006c7c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006c80:	441c      	add	r4, r3
 8006c82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c86:	2200      	movs	r2, #0
 8006c88:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006c8c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006c90:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006c94:	4642      	mov	r2, r8
 8006c96:	464b      	mov	r3, r9
 8006c98:	1891      	adds	r1, r2, r2
 8006c9a:	63b9      	str	r1, [r7, #56]	; 0x38
 8006c9c:	415b      	adcs	r3, r3
 8006c9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ca0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006ca4:	4641      	mov	r1, r8
 8006ca6:	1851      	adds	r1, r2, r1
 8006ca8:	6339      	str	r1, [r7, #48]	; 0x30
 8006caa:	4649      	mov	r1, r9
 8006cac:	414b      	adcs	r3, r1
 8006cae:	637b      	str	r3, [r7, #52]	; 0x34
 8006cb0:	f04f 0200 	mov.w	r2, #0
 8006cb4:	f04f 0300 	mov.w	r3, #0
 8006cb8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006cbc:	4659      	mov	r1, fp
 8006cbe:	00cb      	lsls	r3, r1, #3
 8006cc0:	4651      	mov	r1, sl
 8006cc2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006cc6:	4651      	mov	r1, sl
 8006cc8:	00ca      	lsls	r2, r1, #3
 8006cca:	4610      	mov	r0, r2
 8006ccc:	4619      	mov	r1, r3
 8006cce:	4603      	mov	r3, r0
 8006cd0:	4642      	mov	r2, r8
 8006cd2:	189b      	adds	r3, r3, r2
 8006cd4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006cd8:	464b      	mov	r3, r9
 8006cda:	460a      	mov	r2, r1
 8006cdc:	eb42 0303 	adc.w	r3, r2, r3
 8006ce0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006ce4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ce8:	685b      	ldr	r3, [r3, #4]
 8006cea:	2200      	movs	r2, #0
 8006cec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006cf0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006cf4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006cf8:	460b      	mov	r3, r1
 8006cfa:	18db      	adds	r3, r3, r3
 8006cfc:	62bb      	str	r3, [r7, #40]	; 0x28
 8006cfe:	4613      	mov	r3, r2
 8006d00:	eb42 0303 	adc.w	r3, r2, r3
 8006d04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d06:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006d0a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006d0e:	f7f9 ff63 	bl	8000bd8 <__aeabi_uldivmod>
 8006d12:	4602      	mov	r2, r0
 8006d14:	460b      	mov	r3, r1
 8006d16:	4b0d      	ldr	r3, [pc, #52]	; (8006d4c <UART_SetConfig+0x2d4>)
 8006d18:	fba3 1302 	umull	r1, r3, r3, r2
 8006d1c:	095b      	lsrs	r3, r3, #5
 8006d1e:	2164      	movs	r1, #100	; 0x64
 8006d20:	fb01 f303 	mul.w	r3, r1, r3
 8006d24:	1ad3      	subs	r3, r2, r3
 8006d26:	00db      	lsls	r3, r3, #3
 8006d28:	3332      	adds	r3, #50	; 0x32
 8006d2a:	4a08      	ldr	r2, [pc, #32]	; (8006d4c <UART_SetConfig+0x2d4>)
 8006d2c:	fba2 2303 	umull	r2, r3, r2, r3
 8006d30:	095b      	lsrs	r3, r3, #5
 8006d32:	f003 0207 	and.w	r2, r3, #7
 8006d36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	4422      	add	r2, r4
 8006d3e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006d40:	e105      	b.n	8006f4e <UART_SetConfig+0x4d6>
 8006d42:	bf00      	nop
 8006d44:	40011000 	.word	0x40011000
 8006d48:	40011400 	.word	0x40011400
 8006d4c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006d50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d54:	2200      	movs	r2, #0
 8006d56:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006d5a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006d5e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006d62:	4642      	mov	r2, r8
 8006d64:	464b      	mov	r3, r9
 8006d66:	1891      	adds	r1, r2, r2
 8006d68:	6239      	str	r1, [r7, #32]
 8006d6a:	415b      	adcs	r3, r3
 8006d6c:	627b      	str	r3, [r7, #36]	; 0x24
 8006d6e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006d72:	4641      	mov	r1, r8
 8006d74:	1854      	adds	r4, r2, r1
 8006d76:	4649      	mov	r1, r9
 8006d78:	eb43 0501 	adc.w	r5, r3, r1
 8006d7c:	f04f 0200 	mov.w	r2, #0
 8006d80:	f04f 0300 	mov.w	r3, #0
 8006d84:	00eb      	lsls	r3, r5, #3
 8006d86:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006d8a:	00e2      	lsls	r2, r4, #3
 8006d8c:	4614      	mov	r4, r2
 8006d8e:	461d      	mov	r5, r3
 8006d90:	4643      	mov	r3, r8
 8006d92:	18e3      	adds	r3, r4, r3
 8006d94:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006d98:	464b      	mov	r3, r9
 8006d9a:	eb45 0303 	adc.w	r3, r5, r3
 8006d9e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006da2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006da6:	685b      	ldr	r3, [r3, #4]
 8006da8:	2200      	movs	r2, #0
 8006daa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006dae:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006db2:	f04f 0200 	mov.w	r2, #0
 8006db6:	f04f 0300 	mov.w	r3, #0
 8006dba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006dbe:	4629      	mov	r1, r5
 8006dc0:	008b      	lsls	r3, r1, #2
 8006dc2:	4621      	mov	r1, r4
 8006dc4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006dc8:	4621      	mov	r1, r4
 8006dca:	008a      	lsls	r2, r1, #2
 8006dcc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006dd0:	f7f9 ff02 	bl	8000bd8 <__aeabi_uldivmod>
 8006dd4:	4602      	mov	r2, r0
 8006dd6:	460b      	mov	r3, r1
 8006dd8:	4b60      	ldr	r3, [pc, #384]	; (8006f5c <UART_SetConfig+0x4e4>)
 8006dda:	fba3 2302 	umull	r2, r3, r3, r2
 8006dde:	095b      	lsrs	r3, r3, #5
 8006de0:	011c      	lsls	r4, r3, #4
 8006de2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006de6:	2200      	movs	r2, #0
 8006de8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006dec:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006df0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006df4:	4642      	mov	r2, r8
 8006df6:	464b      	mov	r3, r9
 8006df8:	1891      	adds	r1, r2, r2
 8006dfa:	61b9      	str	r1, [r7, #24]
 8006dfc:	415b      	adcs	r3, r3
 8006dfe:	61fb      	str	r3, [r7, #28]
 8006e00:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006e04:	4641      	mov	r1, r8
 8006e06:	1851      	adds	r1, r2, r1
 8006e08:	6139      	str	r1, [r7, #16]
 8006e0a:	4649      	mov	r1, r9
 8006e0c:	414b      	adcs	r3, r1
 8006e0e:	617b      	str	r3, [r7, #20]
 8006e10:	f04f 0200 	mov.w	r2, #0
 8006e14:	f04f 0300 	mov.w	r3, #0
 8006e18:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006e1c:	4659      	mov	r1, fp
 8006e1e:	00cb      	lsls	r3, r1, #3
 8006e20:	4651      	mov	r1, sl
 8006e22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006e26:	4651      	mov	r1, sl
 8006e28:	00ca      	lsls	r2, r1, #3
 8006e2a:	4610      	mov	r0, r2
 8006e2c:	4619      	mov	r1, r3
 8006e2e:	4603      	mov	r3, r0
 8006e30:	4642      	mov	r2, r8
 8006e32:	189b      	adds	r3, r3, r2
 8006e34:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006e38:	464b      	mov	r3, r9
 8006e3a:	460a      	mov	r2, r1
 8006e3c:	eb42 0303 	adc.w	r3, r2, r3
 8006e40:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006e44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e48:	685b      	ldr	r3, [r3, #4]
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	67bb      	str	r3, [r7, #120]	; 0x78
 8006e4e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006e50:	f04f 0200 	mov.w	r2, #0
 8006e54:	f04f 0300 	mov.w	r3, #0
 8006e58:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006e5c:	4649      	mov	r1, r9
 8006e5e:	008b      	lsls	r3, r1, #2
 8006e60:	4641      	mov	r1, r8
 8006e62:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006e66:	4641      	mov	r1, r8
 8006e68:	008a      	lsls	r2, r1, #2
 8006e6a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006e6e:	f7f9 feb3 	bl	8000bd8 <__aeabi_uldivmod>
 8006e72:	4602      	mov	r2, r0
 8006e74:	460b      	mov	r3, r1
 8006e76:	4b39      	ldr	r3, [pc, #228]	; (8006f5c <UART_SetConfig+0x4e4>)
 8006e78:	fba3 1302 	umull	r1, r3, r3, r2
 8006e7c:	095b      	lsrs	r3, r3, #5
 8006e7e:	2164      	movs	r1, #100	; 0x64
 8006e80:	fb01 f303 	mul.w	r3, r1, r3
 8006e84:	1ad3      	subs	r3, r2, r3
 8006e86:	011b      	lsls	r3, r3, #4
 8006e88:	3332      	adds	r3, #50	; 0x32
 8006e8a:	4a34      	ldr	r2, [pc, #208]	; (8006f5c <UART_SetConfig+0x4e4>)
 8006e8c:	fba2 2303 	umull	r2, r3, r2, r3
 8006e90:	095b      	lsrs	r3, r3, #5
 8006e92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006e96:	441c      	add	r4, r3
 8006e98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	673b      	str	r3, [r7, #112]	; 0x70
 8006ea0:	677a      	str	r2, [r7, #116]	; 0x74
 8006ea2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006ea6:	4642      	mov	r2, r8
 8006ea8:	464b      	mov	r3, r9
 8006eaa:	1891      	adds	r1, r2, r2
 8006eac:	60b9      	str	r1, [r7, #8]
 8006eae:	415b      	adcs	r3, r3
 8006eb0:	60fb      	str	r3, [r7, #12]
 8006eb2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006eb6:	4641      	mov	r1, r8
 8006eb8:	1851      	adds	r1, r2, r1
 8006eba:	6039      	str	r1, [r7, #0]
 8006ebc:	4649      	mov	r1, r9
 8006ebe:	414b      	adcs	r3, r1
 8006ec0:	607b      	str	r3, [r7, #4]
 8006ec2:	f04f 0200 	mov.w	r2, #0
 8006ec6:	f04f 0300 	mov.w	r3, #0
 8006eca:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006ece:	4659      	mov	r1, fp
 8006ed0:	00cb      	lsls	r3, r1, #3
 8006ed2:	4651      	mov	r1, sl
 8006ed4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006ed8:	4651      	mov	r1, sl
 8006eda:	00ca      	lsls	r2, r1, #3
 8006edc:	4610      	mov	r0, r2
 8006ede:	4619      	mov	r1, r3
 8006ee0:	4603      	mov	r3, r0
 8006ee2:	4642      	mov	r2, r8
 8006ee4:	189b      	adds	r3, r3, r2
 8006ee6:	66bb      	str	r3, [r7, #104]	; 0x68
 8006ee8:	464b      	mov	r3, r9
 8006eea:	460a      	mov	r2, r1
 8006eec:	eb42 0303 	adc.w	r3, r2, r3
 8006ef0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006ef2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ef6:	685b      	ldr	r3, [r3, #4]
 8006ef8:	2200      	movs	r2, #0
 8006efa:	663b      	str	r3, [r7, #96]	; 0x60
 8006efc:	667a      	str	r2, [r7, #100]	; 0x64
 8006efe:	f04f 0200 	mov.w	r2, #0
 8006f02:	f04f 0300 	mov.w	r3, #0
 8006f06:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006f0a:	4649      	mov	r1, r9
 8006f0c:	008b      	lsls	r3, r1, #2
 8006f0e:	4641      	mov	r1, r8
 8006f10:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006f14:	4641      	mov	r1, r8
 8006f16:	008a      	lsls	r2, r1, #2
 8006f18:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006f1c:	f7f9 fe5c 	bl	8000bd8 <__aeabi_uldivmod>
 8006f20:	4602      	mov	r2, r0
 8006f22:	460b      	mov	r3, r1
 8006f24:	4b0d      	ldr	r3, [pc, #52]	; (8006f5c <UART_SetConfig+0x4e4>)
 8006f26:	fba3 1302 	umull	r1, r3, r3, r2
 8006f2a:	095b      	lsrs	r3, r3, #5
 8006f2c:	2164      	movs	r1, #100	; 0x64
 8006f2e:	fb01 f303 	mul.w	r3, r1, r3
 8006f32:	1ad3      	subs	r3, r2, r3
 8006f34:	011b      	lsls	r3, r3, #4
 8006f36:	3332      	adds	r3, #50	; 0x32
 8006f38:	4a08      	ldr	r2, [pc, #32]	; (8006f5c <UART_SetConfig+0x4e4>)
 8006f3a:	fba2 2303 	umull	r2, r3, r2, r3
 8006f3e:	095b      	lsrs	r3, r3, #5
 8006f40:	f003 020f 	and.w	r2, r3, #15
 8006f44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	4422      	add	r2, r4
 8006f4c:	609a      	str	r2, [r3, #8]
}
 8006f4e:	bf00      	nop
 8006f50:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006f54:	46bd      	mov	sp, r7
 8006f56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006f5a:	bf00      	nop
 8006f5c:	51eb851f 	.word	0x51eb851f

08006f60 <uint32_identity>:
{
  return x;
}

static inline uint32_t uint32_identity(uint32_t x)
{
 8006f60:	b480      	push	{r7}
 8006f62:	b083      	sub	sp, #12
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
  return x;
 8006f68:	687b      	ldr	r3, [r7, #4]
}
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	370c      	adds	r7, #12
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f74:	4770      	bx	lr

08006f76 <sl_wfx_reg_read_16>:
                                     sl_wfx_register_address_t address,
                                     void *buffer,
                                     uint32_t length);

sl_status_t sl_wfx_reg_read_16(sl_wfx_register_address_t address, uint16_t *value_out)
{
 8006f76:	b580      	push	{r7, lr}
 8006f78:	b084      	sub	sp, #16
 8006f7a:	af00      	add	r7, sp, #0
 8006f7c:	4603      	mov	r3, r0
 8006f7e:	6039      	str	r1, [r7, #0]
 8006f80:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp[4];
  sl_status_t result = sl_wfx_bus_access(SL_WFX_BUS_READ, address, tmp, sizeof(tmp));
 8006f82:	f107 0208 	add.w	r2, r7, #8
 8006f86:	79f9      	ldrb	r1, [r7, #7]
 8006f88:	2304      	movs	r3, #4
 8006f8a:	2002      	movs	r0, #2
 8006f8c:	f000 f8f8 	bl	8007180 <sl_wfx_bus_access>
 8006f90:	60f8      	str	r0, [r7, #12]

  *value_out = sl_wfx_unpack_16bit_little_endian(tmp);
 8006f92:	7a3b      	ldrb	r3, [r7, #8]
 8006f94:	b29a      	uxth	r2, r3
 8006f96:	7a7b      	ldrb	r3, [r7, #9]
 8006f98:	b29b      	uxth	r3, r3
 8006f9a:	021b      	lsls	r3, r3, #8
 8006f9c:	b29b      	uxth	r3, r3
 8006f9e:	4313      	orrs	r3, r2
 8006fa0:	b29a      	uxth	r2, r3
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	801a      	strh	r2, [r3, #0]
                  address,
                  (*value_out >> 8) & 0xFF,
                  *value_out & 0xFF);
#endif

  return result;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
}
 8006fa8:	4618      	mov	r0, r3
 8006faa:	3710      	adds	r7, #16
 8006fac:	46bd      	mov	sp, r7
 8006fae:	bd80      	pop	{r7, pc}

08006fb0 <sl_wfx_reg_write_16>:

sl_status_t sl_wfx_reg_write_16(sl_wfx_register_address_t address, uint16_t value_in)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b084      	sub	sp, #16
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	460a      	mov	r2, r1
 8006fba:	71fb      	strb	r3, [r7, #7]
 8006fbc:	4613      	mov	r3, r2
 8006fbe:	80bb      	strh	r3, [r7, #4]
                  address,
                  (value_in >> 8) & 0xFF,
                  value_in & 0xFF);
#endif

  sl_wfx_pack_16bit_little_endian(tmp, value_in);
 8006fc0:	88bb      	ldrh	r3, [r7, #4]
 8006fc2:	b2db      	uxtb	r3, r3
 8006fc4:	733b      	strb	r3, [r7, #12]
 8006fc6:	88bb      	ldrh	r3, [r7, #4]
 8006fc8:	0a1b      	lsrs	r3, r3, #8
 8006fca:	b29b      	uxth	r3, r3
 8006fcc:	b2db      	uxtb	r3, r3
 8006fce:	737b      	strb	r3, [r7, #13]
  tmp[2] = 0;
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	73bb      	strb	r3, [r7, #14]
  tmp[3] = 0;
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	73fb      	strb	r3, [r7, #15]

  return sl_wfx_bus_access(SL_WFX_BUS_WRITE, address, tmp, sizeof(tmp));
 8006fd8:	f107 020c 	add.w	r2, r7, #12
 8006fdc:	79f9      	ldrb	r1, [r7, #7]
 8006fde:	2304      	movs	r3, #4
 8006fe0:	2001      	movs	r0, #1
 8006fe2:	f000 f8cd 	bl	8007180 <sl_wfx_bus_access>
 8006fe6:	4603      	mov	r3, r0
}
 8006fe8:	4618      	mov	r0, r3
 8006fea:	3710      	adds	r7, #16
 8006fec:	46bd      	mov	sp, r7
 8006fee:	bd80      	pop	{r7, pc}

08006ff0 <sl_wfx_reg_read_32>:

sl_status_t sl_wfx_reg_read_32(sl_wfx_register_address_t address, uint32_t *value_out)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b084      	sub	sp, #16
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	6039      	str	r1, [r7, #0]
 8006ffa:	71fb      	strb	r3, [r7, #7]
  sl_status_t result = sl_wfx_bus_access(SL_WFX_BUS_READ, address, value_out, sizeof(*value_out));
 8006ffc:	79f9      	ldrb	r1, [r7, #7]
 8006ffe:	2304      	movs	r3, #4
 8007000:	683a      	ldr	r2, [r7, #0]
 8007002:	2002      	movs	r0, #2
 8007004:	f000 f8bc 	bl	8007180 <sl_wfx_bus_access>
 8007008:	60f8      	str	r0, [r7, #12]

  *value_out = sl_wfx_htole32(*value_out);
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	4618      	mov	r0, r3
 8007010:	f7ff ffa6 	bl	8006f60 <uint32_identity>
 8007014:	4602      	mov	r2, r0
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	601a      	str	r2, [r3, #0]
                  (*value_out >> 16) & 0xFF,
                  (*value_out >> 8) & 0xFF,
                  *value_out & 0xFF);
#endif

  return result;
 800701a:	68fb      	ldr	r3, [r7, #12]
}
 800701c:	4618      	mov	r0, r3
 800701e:	3710      	adds	r7, #16
 8007020:	46bd      	mov	sp, r7
 8007022:	bd80      	pop	{r7, pc}

08007024 <sl_wfx_reg_write_32>:

sl_status_t sl_wfx_reg_write_32(sl_wfx_register_address_t address, uint32_t value_in)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b082      	sub	sp, #8
 8007028:	af00      	add	r7, sp, #0
 800702a:	4603      	mov	r3, r0
 800702c:	6039      	str	r1, [r7, #0]
 800702e:	71fb      	strb	r3, [r7, #7]
                  (value_in >> 16) & 0xFF,
                  (value_in >> 8) & 0xFF,
                  value_in & 0xFF);
#endif

  value_in = sl_wfx_htole32(value_in);
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	4618      	mov	r0, r3
 8007034:	f7ff ff94 	bl	8006f60 <uint32_identity>
 8007038:	4603      	mov	r3, r0
 800703a:	603b      	str	r3, [r7, #0]

  return sl_wfx_bus_access(SL_WFX_BUS_WRITE, address, &value_in, sizeof(value_in));
 800703c:	463a      	mov	r2, r7
 800703e:	79f9      	ldrb	r1, [r7, #7]
 8007040:	2304      	movs	r3, #4
 8007042:	2001      	movs	r0, #1
 8007044:	f000 f89c 	bl	8007180 <sl_wfx_bus_access>
 8007048:	4603      	mov	r3, r0
}
 800704a:	4618      	mov	r0, r3
 800704c:	3708      	adds	r7, #8
 800704e:	46bd      	mov	sp, r7
 8007050:	bd80      	pop	{r7, pc}

08007052 <sl_wfx_data_read>:

sl_status_t sl_wfx_data_read(void *buffer, uint32_t length)
{
 8007052:	b580      	push	{r7, lr}
 8007054:	b084      	sub	sp, #16
 8007056:	af00      	add	r7, sp, #0
 8007058:	6078      	str	r0, [r7, #4]
 800705a:	6039      	str	r1, [r7, #0]
  sl_status_t result;

  result = sl_wfx_bus_access(SL_WFX_BUS_READ, SL_WFX_IN_OUT_QUEUE_REG_ID, buffer, length);
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	687a      	ldr	r2, [r7, #4]
 8007060:	2102      	movs	r1, #2
 8007062:	2002      	movs	r0, #2
 8007064:	f000 f88c 	bl	8007180 <sl_wfx_bus_access>
 8007068:	60f8      	str	r0, [r7, #12]
  }
#endif
  sl_wfx_host_log("\r\n");
#endif

  return result;
 800706a:	68fb      	ldr	r3, [r7, #12]
}
 800706c:	4618      	mov	r0, r3
 800706e:	3710      	adds	r7, #16
 8007070:	46bd      	mov	sp, r7
 8007072:	bd80      	pop	{r7, pc}

08007074 <sl_wfx_data_write>:

sl_status_t sl_wfx_data_write(const void *buffer, uint32_t length)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b084      	sub	sp, #16
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
 800707c:	6039      	str	r1, [r7, #0]
  }
#endif
  sl_wfx_host_log("\r\n");
#endif

  result = sl_wfx_bus_access(SL_WFX_BUS_WRITE, SL_WFX_IN_OUT_QUEUE_REG_ID, (void*) buffer, length);
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	687a      	ldr	r2, [r7, #4]
 8007082:	2102      	movs	r1, #2
 8007084:	2001      	movs	r0, #1
 8007086:	f000 f87b 	bl	8007180 <sl_wfx_bus_access>
 800708a:	60f8      	str	r0, [r7, #12]

  return result;
 800708c:	68fb      	ldr	r3, [r7, #12]
}
 800708e:	4618      	mov	r0, r3
 8007090:	3710      	adds	r7, #16
 8007092:	46bd      	mov	sp, r7
 8007094:	bd80      	pop	{r7, pc}

08007096 <sl_wfx_apb_write>:

sl_status_t sl_wfx_apb_write(uint32_t address, const void *buffer, uint32_t length)
{
 8007096:	b580      	push	{r7, lr}
 8007098:	b086      	sub	sp, #24
 800709a:	af00      	add	r7, sp, #0
 800709c:	60f8      	str	r0, [r7, #12]
 800709e:	60b9      	str	r1, [r7, #8]
 80070a0:	607a      	str	r2, [r7, #4]
  sl_status_t result;
  if (length / 2 >= 0x1000) {
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80070a8:	d301      	bcc.n	80070ae <sl_wfx_apb_write+0x18>
    return SL_STATUS_INVALID_PARAMETER;
 80070aa:	2321      	movs	r3, #33	; 0x21
 80070ac:	e00f      	b.n	80070ce <sl_wfx_apb_write+0x38>
  }

  result = sl_wfx_reg_write_32(SL_WFX_SRAM_BASE_ADDR_REG_ID, address);
 80070ae:	68f9      	ldr	r1, [r7, #12]
 80070b0:	2004      	movs	r0, #4
 80070b2:	f7ff ffb7 	bl	8007024 <sl_wfx_reg_write_32>
 80070b6:	6178      	str	r0, [r7, #20]

  if (result == SL_STATUS_OK) {
 80070b8:	697b      	ldr	r3, [r7, #20]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d106      	bne.n	80070cc <sl_wfx_apb_write+0x36>
    result = sl_wfx_bus_access(SL_WFX_BUS_WRITE, SL_WFX_SRAM_DPORT_REG_ID, (void*) buffer, length);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	68ba      	ldr	r2, [r7, #8]
 80070c2:	2105      	movs	r1, #5
 80070c4:	2001      	movs	r0, #1
 80070c6:	f000 f85b 	bl	8007180 <sl_wfx_bus_access>
 80070ca:	6178      	str	r0, [r7, #20]
  }

  return result;
 80070cc:	697b      	ldr	r3, [r7, #20]
}
 80070ce:	4618      	mov	r0, r3
 80070d0:	3718      	adds	r7, #24
 80070d2:	46bd      	mov	sp, r7
 80070d4:	bd80      	pop	{r7, pc}

080070d6 <sl_wfx_apb_write_32>:

sl_status_t sl_wfx_apb_write_32(uint32_t address, uint32_t value_in)
{
 80070d6:	b580      	push	{r7, lr}
 80070d8:	b084      	sub	sp, #16
 80070da:	af00      	add	r7, sp, #0
 80070dc:	6078      	str	r0, [r7, #4]
 80070de:	6039      	str	r1, [r7, #0]
  sl_status_t result;

  result = sl_wfx_reg_write_32(SL_WFX_SRAM_BASE_ADDR_REG_ID, address);
 80070e0:	6879      	ldr	r1, [r7, #4]
 80070e2:	2004      	movs	r0, #4
 80070e4:	f7ff ff9e 	bl	8007024 <sl_wfx_reg_write_32>
 80070e8:	60f8      	str	r0, [r7, #12]

  if (result == SL_STATUS_OK) {
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d104      	bne.n	80070fa <sl_wfx_apb_write_32+0x24>
    result = sl_wfx_reg_write_32(SL_WFX_SRAM_DPORT_REG_ID, value_in);
 80070f0:	6839      	ldr	r1, [r7, #0]
 80070f2:	2005      	movs	r0, #5
 80070f4:	f7ff ff96 	bl	8007024 <sl_wfx_reg_write_32>
 80070f8:	60f8      	str	r0, [r7, #12]
  }

  return result;
 80070fa:	68fb      	ldr	r3, [r7, #12]
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	3710      	adds	r7, #16
 8007100:	46bd      	mov	sp, r7
 8007102:	bd80      	pop	{r7, pc}

08007104 <sl_wfx_apb_read_32>:

sl_status_t sl_wfx_apb_read_32(uint32_t address, uint32_t *value_out)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b086      	sub	sp, #24
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
 800710c:	6039      	str	r1, [r7, #0]
  uint32_t value32;
  sl_status_t result;

  // write address
  result = sl_wfx_reg_write_32(SL_WFX_SRAM_BASE_ADDR_REG_ID, address);
 800710e:	6879      	ldr	r1, [r7, #4]
 8007110:	2004      	movs	r0, #4
 8007112:	f7ff ff87 	bl	8007024 <sl_wfx_reg_write_32>
 8007116:	6138      	str	r0, [r7, #16]

  // set the "prefetch" bit
  result = sl_wfx_reg_read_32(SL_WFX_CONFIG_REG_ID, &value32);
 8007118:	f107 030c 	add.w	r3, r7, #12
 800711c:	4619      	mov	r1, r3
 800711e:	2000      	movs	r0, #0
 8007120:	f7ff ff66 	bl	8006ff0 <sl_wfx_reg_read_32>
 8007124:	6138      	str	r0, [r7, #16]
  result = sl_wfx_reg_write_32(SL_WFX_CONFIG_REG_ID, value32 | CONFIG_PREFETCH_BIT);
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800712c:	4619      	mov	r1, r3
 800712e:	2000      	movs	r0, #0
 8007130:	f7ff ff78 	bl	8007024 <sl_wfx_reg_write_32>
 8007134:	6138      	str	r0, [r7, #16]

  // and wait for the prefetch bit to clear
  for (uint32_t i = 0; i < 20; i++) {
 8007136:	2300      	movs	r3, #0
 8007138:	617b      	str	r3, [r7, #20]
 800713a:	e011      	b.n	8007160 <sl_wfx_apb_read_32+0x5c>
    result = sl_wfx_reg_read_32(SL_WFX_CONFIG_REG_ID, &value32);
 800713c:	f107 030c 	add.w	r3, r7, #12
 8007140:	4619      	mov	r1, r3
 8007142:	2000      	movs	r0, #0
 8007144:	f7ff ff54 	bl	8006ff0 <sl_wfx_reg_read_32>
 8007148:	6138      	str	r0, [r7, #16]
    if ((value32 & CONFIG_PREFETCH_BIT) == 0) {
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007150:	2b00      	cmp	r3, #0
 8007152:	d009      	beq.n	8007168 <sl_wfx_apb_read_32+0x64>
      break;
    }

    sl_wfx_host_wait(1);
 8007154:	2001      	movs	r0, #1
 8007156:	f001 fb7f 	bl	8008858 <sl_wfx_host_wait>
  for (uint32_t i = 0; i < 20; i++) {
 800715a:	697b      	ldr	r3, [r7, #20]
 800715c:	3301      	adds	r3, #1
 800715e:	617b      	str	r3, [r7, #20]
 8007160:	697b      	ldr	r3, [r7, #20]
 8007162:	2b13      	cmp	r3, #19
 8007164:	d9ea      	bls.n	800713c <sl_wfx_apb_read_32+0x38>
 8007166:	e000      	b.n	800716a <sl_wfx_apb_read_32+0x66>
      break;
 8007168:	bf00      	nop
  }

  // and data is ready
  result = sl_wfx_reg_read_32(SL_WFX_SRAM_DPORT_REG_ID, value_out);
 800716a:	6839      	ldr	r1, [r7, #0]
 800716c:	2005      	movs	r0, #5
 800716e:	f7ff ff3f 	bl	8006ff0 <sl_wfx_reg_read_32>
 8007172:	6138      	str	r0, [r7, #16]

  return result;
 8007174:	693b      	ldr	r3, [r7, #16]
}
 8007176:	4618      	mov	r0, r3
 8007178:	3718      	adds	r7, #24
 800717a:	46bd      	mov	sp, r7
 800717c:	bd80      	pop	{r7, pc}
	...

08007180 <sl_wfx_bus_access>:

static sl_status_t sl_wfx_bus_access(sl_wfx_host_bus_transfer_type_t type,
                                     sl_wfx_register_address_t address,
                                     void *buffer,
                                     uint32_t length)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b086      	sub	sp, #24
 8007184:	af00      	add	r7, sp, #0
 8007186:	60ba      	str	r2, [r7, #8]
 8007188:	607b      	str	r3, [r7, #4]
 800718a:	4603      	mov	r3, r0
 800718c:	73fb      	strb	r3, [r7, #15]
 800718e:	460b      	mov	r3, r1
 8007190:	73bb      	strb	r3, [r7, #14]
  sl_status_t result;

  /* If the WFx is sleeping, wake it up */
  if (sl_wfx_context->state & SL_WFX_SLEEPING) {
 8007192:	4b46      	ldr	r3, [pc, #280]	; (80072ac <sl_wfx_bus_access+0x12c>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f893 3222 	ldrb.w	r3, [r3, #546]	; 0x222
 800719a:	f003 0308 	and.w	r3, r3, #8
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d01a      	beq.n	80071d8 <sl_wfx_bus_access+0x58>
    result = sl_wfx_host_set_wake_up_pin(1);
 80071a2:	2001      	movs	r0, #1
 80071a4:	f001 fad2 	bl	800874c <sl_wfx_host_set_wake_up_pin>
 80071a8:	6178      	str	r0, [r7, #20]
    SL_WFX_ERROR_CHECK(result);
 80071aa:	697b      	ldr	r3, [r7, #20]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d171      	bne.n	8007294 <sl_wfx_bus_access+0x114>
    /* If the command is of read type, consider the WFx awake */
    if (type == SL_WFX_BUS_WRITE) {
 80071b0:	7bfb      	ldrb	r3, [r7, #15]
 80071b2:	2b01      	cmp	r3, #1
 80071b4:	d105      	bne.n	80071c2 <sl_wfx_bus_access+0x42>
      result = sl_wfx_host_wait_for_wake_up();
 80071b6:	f001 fae5 	bl	8008784 <sl_wfx_host_wait_for_wake_up>
 80071ba:	6178      	str	r0, [r7, #20]
      SL_WFX_ERROR_CHECK(result);
 80071bc:	697b      	ldr	r3, [r7, #20]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d16a      	bne.n	8007298 <sl_wfx_bus_access+0x118>
    }
    sl_wfx_context->state &= ~SL_WFX_SLEEPING;
 80071c2:	4b3a      	ldr	r3, [pc, #232]	; (80072ac <sl_wfx_bus_access+0x12c>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f893 2222 	ldrb.w	r2, [r3, #546]	; 0x222
 80071ca:	4b38      	ldr	r3, [pc, #224]	; (80072ac <sl_wfx_bus_access+0x12c>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f022 0208 	bic.w	r2, r2, #8
 80071d2:	b2d2      	uxtb	r2, r2
 80071d4:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222
    sl_wfx_host_log("WFx awake\r\n");
#endif
  }

  /* Send the communication on the bus */
  if (type == SL_WFX_BUS_READ) {
 80071d8:	7bfb      	ldrb	r3, [r7, #15]
 80071da:	2b02      	cmp	r3, #2
 80071dc:	d107      	bne.n	80071ee <sl_wfx_bus_access+0x6e>
    result = sl_wfx_reg_read(address, buffer, length);
 80071de:	7bbb      	ldrb	r3, [r7, #14]
 80071e0:	687a      	ldr	r2, [r7, #4]
 80071e2:	68b9      	ldr	r1, [r7, #8]
 80071e4:	4618      	mov	r0, r3
 80071e6:	f000 f863 	bl	80072b0 <sl_wfx_reg_read>
 80071ea:	6178      	str	r0, [r7, #20]
 80071ec:	e00c      	b.n	8007208 <sl_wfx_bus_access+0x88>
  } else if (type == SL_WFX_BUS_WRITE) {
 80071ee:	7bfb      	ldrb	r3, [r7, #15]
 80071f0:	2b01      	cmp	r3, #1
 80071f2:	d107      	bne.n	8007204 <sl_wfx_bus_access+0x84>
    result = sl_wfx_reg_write(address, buffer, length);
 80071f4:	7bbb      	ldrb	r3, [r7, #14]
 80071f6:	687a      	ldr	r2, [r7, #4]
 80071f8:	68b9      	ldr	r1, [r7, #8]
 80071fa:	4618      	mov	r0, r3
 80071fc:	f000 f8a4 	bl	8007348 <sl_wfx_reg_write>
 8007200:	6178      	str	r0, [r7, #20]
 8007202:	e001      	b.n	8007208 <sl_wfx_bus_access+0x88>
  } else {
    result = SL_STATUS_INVALID_PARAMETER;
 8007204:	2321      	movs	r3, #33	; 0x21
 8007206:	617b      	str	r3, [r7, #20]
  }
  SL_WFX_ERROR_CHECK(result);
 8007208:	697b      	ldr	r3, [r7, #20]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d146      	bne.n	800729c <sl_wfx_bus_access+0x11c>

  /* If the power save is active and there is no confirmation pending, put
     the WFx back to sleep */
  if ((sl_wfx_context->state & SL_WFX_POWER_SAVE_ACTIVE)
 800720e:	4b27      	ldr	r3, [pc, #156]	; (80072ac <sl_wfx_bus_access+0x12c>)
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f893 3222 	ldrb.w	r3, [r3, #546]	; 0x222
 8007216:	f003 0310 	and.w	r3, r3, #16
 800721a:	2b00      	cmp	r3, #0
 800721c:	d040      	beq.n	80072a0 <sl_wfx_bus_access+0x120>
      && (type == SL_WFX_BUS_READ)
 800721e:	7bfb      	ldrb	r3, [r7, #15]
 8007220:	2b02      	cmp	r3, #2
 8007222:	d13d      	bne.n	80072a0 <sl_wfx_bus_access+0x120>
      && ((address != SL_WFX_CONTROL_REG_ID)
 8007224:	7bbb      	ldrb	r3, [r7, #14]
 8007226:	2b01      	cmp	r3, #1
 8007228:	d108      	bne.n	800723c <sl_wfx_bus_access+0xbc>
          || ((address == SL_WFX_CONTROL_REG_ID) && ((*(uint16_t *)buffer & SL_WFX_CONT_NEXT_LEN_MASK) == 0)))
 800722a:	7bbb      	ldrb	r3, [r7, #14]
 800722c:	2b01      	cmp	r3, #1
 800722e:	d137      	bne.n	80072a0 <sl_wfx_bus_access+0x120>
 8007230:	68bb      	ldr	r3, [r7, #8]
 8007232:	881b      	ldrh	r3, [r3, #0]
 8007234:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007238:	2b00      	cmp	r3, #0
 800723a:	d131      	bne.n	80072a0 <sl_wfx_bus_access+0x120>
      && (sl_wfx_context->used_buffers <= 1)
 800723c:	4b1b      	ldr	r3, [pc, #108]	; (80072ac <sl_wfx_bus_access+0x12c>)
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
 8007244:	2b01      	cmp	r3, #1
 8007246:	d82b      	bhi.n	80072a0 <sl_wfx_bus_access+0x120>
      && ((*((uint16_t *)((uint8_t *)buffer + length - SL_WFX_CONT_REGISTER_SIZE)) & SL_WFX_CONT_NEXT_LEN_MASK) == 0)) {
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	3b02      	subs	r3, #2
 800724c:	68ba      	ldr	r2, [r7, #8]
 800724e:	4413      	add	r3, r2
 8007250:	881b      	ldrh	r3, [r3, #0]
 8007252:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007256:	2b00      	cmp	r3, #0
 8007258:	d122      	bne.n	80072a0 <sl_wfx_bus_access+0x120>
    /* Ask the host opinion on whether the WFx should be put back to sleep or
       not*/
    if (sl_wfx_host_sleep_grant(type, address, length) == SL_STATUS_WIFI_SLEEP_GRANTED) {
 800725a:	7bb9      	ldrb	r1, [r7, #14]
 800725c:	7bfb      	ldrb	r3, [r7, #15]
 800725e:	687a      	ldr	r2, [r7, #4]
 8007260:	4618      	mov	r0, r3
 8007262:	f001 faa3 	bl	80087ac <sl_wfx_host_sleep_grant>
 8007266:	4603      	mov	r3, r0
 8007268:	f640 3208 	movw	r2, #2824	; 0xb08
 800726c:	4293      	cmp	r3, r2
 800726e:	d117      	bne.n	80072a0 <sl_wfx_bus_access+0x120>
      sl_wfx_context->state |= SL_WFX_SLEEPING;
 8007270:	4b0e      	ldr	r3, [pc, #56]	; (80072ac <sl_wfx_bus_access+0x12c>)
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f893 2222 	ldrb.w	r2, [r3, #546]	; 0x222
 8007278:	4b0c      	ldr	r3, [pc, #48]	; (80072ac <sl_wfx_bus_access+0x12c>)
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f042 0208 	orr.w	r2, r2, #8
 8007280:	b2d2      	uxtb	r2, r2
 8007282:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222
      result = sl_wfx_host_set_wake_up_pin(0);
 8007286:	2000      	movs	r0, #0
 8007288:	f001 fa60 	bl	800874c <sl_wfx_host_set_wake_up_pin>
 800728c:	6178      	str	r0, [r7, #20]
      SL_WFX_ERROR_CHECK(result);
 800728e:	697b      	ldr	r3, [r7, #20]
 8007290:	2b00      	cmp	r3, #0
      sl_wfx_host_log("WFx sleeping\r\n");
#endif
    }
  }

  error_handler:
 8007292:	e005      	b.n	80072a0 <sl_wfx_bus_access+0x120>
    SL_WFX_ERROR_CHECK(result);
 8007294:	bf00      	nop
 8007296:	e004      	b.n	80072a2 <sl_wfx_bus_access+0x122>
      SL_WFX_ERROR_CHECK(result);
 8007298:	bf00      	nop
 800729a:	e002      	b.n	80072a2 <sl_wfx_bus_access+0x122>
  SL_WFX_ERROR_CHECK(result);
 800729c:	bf00      	nop
 800729e:	e000      	b.n	80072a2 <sl_wfx_bus_access+0x122>
  error_handler:
 80072a0:	bf00      	nop
  return result;
 80072a2:	697b      	ldr	r3, [r7, #20]
}
 80072a4:	4618      	mov	r0, r3
 80072a6:	3718      	adds	r7, #24
 80072a8:	46bd      	mov	sp, r7
 80072aa:	bd80      	pop	{r7, pc}
 80072ac:	200009fc 	.word	0x200009fc

080072b0 <sl_wfx_reg_read>:

#define SET_WRITE 0x7FFF /* usage: and operation */
#define SET_READ 0x8000  /* usage: or operation */

sl_status_t sl_wfx_reg_read(sl_wfx_register_address_t address, void *buffer, uint32_t length)
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b08a      	sub	sp, #40	; 0x28
 80072b4:	af02      	add	r7, sp, #8
 80072b6:	4603      	mov	r3, r0
 80072b8:	60b9      	str	r1, [r7, #8]
 80072ba:	607a      	str	r2, [r7, #4]
 80072bc:	73fb      	strb	r3, [r7, #15]
  uint16_t header = SET_READ | (address << 12) | (length / 2);
 80072be:	7bfb      	ldrb	r3, [r7, #15]
 80072c0:	b29b      	uxth	r3, r3
 80072c2:	031b      	lsls	r3, r3, #12
 80072c4:	b29a      	uxth	r2, r3
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	085b      	lsrs	r3, r3, #1
 80072ca:	b29b      	uxth	r3, r3
 80072cc:	4313      	orrs	r3, r2
 80072ce:	b29b      	uxth	r3, r3
 80072d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072d8:	83fb      	strh	r3, [r7, #30]

  uint8_t header_as_bytes[2];
  sl_wfx_pack_16bit_big_endian(header_as_bytes, header);
 80072da:	8bfb      	ldrh	r3, [r7, #30]
 80072dc:	0a1b      	lsrs	r3, r3, #8
 80072de:	b29b      	uxth	r3, r3
 80072e0:	b2db      	uxtb	r3, r3
 80072e2:	753b      	strb	r3, [r7, #20]
 80072e4:	8bfb      	ldrh	r3, [r7, #30]
 80072e6:	b2db      	uxtb	r3, r3
 80072e8:	757b      	strb	r3, [r7, #21]

  sl_wfx_host_spi_cs_assert();
 80072ea:	f002 f8ab 	bl	8009444 <sl_wfx_host_spi_cs_assert>
  sl_wfx_host_spi_transfer_no_cs_assert(SL_WFX_BUS_READ, header_as_bytes, 2, (uint8_t *)buffer, length);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	b29b      	uxth	r3, r3
 80072f2:	f107 0114 	add.w	r1, r7, #20
 80072f6:	9300      	str	r3, [sp, #0]
 80072f8:	68bb      	ldr	r3, [r7, #8]
 80072fa:	2202      	movs	r2, #2
 80072fc:	2002      	movs	r0, #2
 80072fe:	f002 f8b9 	bl	8009474 <sl_wfx_host_spi_transfer_no_cs_assert>
  sl_wfx_host_spi_cs_deassert();
 8007302:	f002 f8ab 	bl	800945c <sl_wfx_host_spi_cs_deassert>

  if (address == SL_WFX_CONFIG_REG_ID) {
 8007306:	7bfb      	ldrb	r3, [r7, #15]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d118      	bne.n	800733e <sl_wfx_reg_read+0x8e>
    // Config always read/written in "word mode 0"
    // that is, its byte-order looks like that
    // B1 B0 B3 B2
    // here is this rearrangement
    uint8_t *tmp = (uint8_t *)buffer;
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	61bb      	str	r3, [r7, #24]
    uint8_t byte_swap = tmp[0];
 8007310:	69bb      	ldr	r3, [r7, #24]
 8007312:	781b      	ldrb	r3, [r3, #0]
 8007314:	75fb      	strb	r3, [r7, #23]
    tmp[0] = tmp[1];
 8007316:	69bb      	ldr	r3, [r7, #24]
 8007318:	785a      	ldrb	r2, [r3, #1]
 800731a:	69bb      	ldr	r3, [r7, #24]
 800731c:	701a      	strb	r2, [r3, #0]
    tmp[1] = byte_swap;
 800731e:	69bb      	ldr	r3, [r7, #24]
 8007320:	3301      	adds	r3, #1
 8007322:	7dfa      	ldrb	r2, [r7, #23]
 8007324:	701a      	strb	r2, [r3, #0]

    byte_swap = tmp[2];
 8007326:	69bb      	ldr	r3, [r7, #24]
 8007328:	789b      	ldrb	r3, [r3, #2]
 800732a:	75fb      	strb	r3, [r7, #23]
    tmp[2] = tmp[3];
 800732c:	69bb      	ldr	r3, [r7, #24]
 800732e:	3302      	adds	r3, #2
 8007330:	69ba      	ldr	r2, [r7, #24]
 8007332:	78d2      	ldrb	r2, [r2, #3]
 8007334:	701a      	strb	r2, [r3, #0]
    tmp[3] = byte_swap;
 8007336:	69bb      	ldr	r3, [r7, #24]
 8007338:	3303      	adds	r3, #3
 800733a:	7dfa      	ldrb	r2, [r7, #23]
 800733c:	701a      	strb	r2, [r3, #0]
  }

  return SL_STATUS_OK;
 800733e:	2300      	movs	r3, #0
}
 8007340:	4618      	mov	r0, r3
 8007342:	3720      	adds	r7, #32
 8007344:	46bd      	mov	sp, r7
 8007346:	bd80      	pop	{r7, pc}

08007348 <sl_wfx_reg_write>:

sl_status_t sl_wfx_reg_write(sl_wfx_register_address_t address, const void *buffer, uint32_t length)
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b08a      	sub	sp, #40	; 0x28
 800734c:	af02      	add	r7, sp, #8
 800734e:	4603      	mov	r3, r0
 8007350:	60b9      	str	r1, [r7, #8]
 8007352:	607a      	str	r2, [r7, #4]
 8007354:	73fb      	strb	r3, [r7, #15]
  if (address == SL_WFX_CONFIG_REG_ID) {
 8007356:	7bfb      	ldrb	r3, [r7, #15]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d118      	bne.n	800738e <sl_wfx_reg_write+0x46>
    // Config always read/written in "word mode 0"
    // that is, its byte-order looks like that
    // B1 B0 B3 B2
    // here is this rearrangement
    uint8_t *tmp = (uint8_t *)buffer;
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	61fb      	str	r3, [r7, #28]
    uint8_t byte_swap = tmp[0];
 8007360:	69fb      	ldr	r3, [r7, #28]
 8007362:	781b      	ldrb	r3, [r3, #0]
 8007364:	76fb      	strb	r3, [r7, #27]
    tmp[0] = tmp[1];
 8007366:	69fb      	ldr	r3, [r7, #28]
 8007368:	785a      	ldrb	r2, [r3, #1]
 800736a:	69fb      	ldr	r3, [r7, #28]
 800736c:	701a      	strb	r2, [r3, #0]
    tmp[1] = byte_swap;
 800736e:	69fb      	ldr	r3, [r7, #28]
 8007370:	3301      	adds	r3, #1
 8007372:	7efa      	ldrb	r2, [r7, #27]
 8007374:	701a      	strb	r2, [r3, #0]

    byte_swap = tmp[2];
 8007376:	69fb      	ldr	r3, [r7, #28]
 8007378:	789b      	ldrb	r3, [r3, #2]
 800737a:	76fb      	strb	r3, [r7, #27]
    tmp[2] = tmp[3];
 800737c:	69fb      	ldr	r3, [r7, #28]
 800737e:	3302      	adds	r3, #2
 8007380:	69fa      	ldr	r2, [r7, #28]
 8007382:	78d2      	ldrb	r2, [r2, #3]
 8007384:	701a      	strb	r2, [r3, #0]
    tmp[3] = byte_swap;
 8007386:	69fb      	ldr	r3, [r7, #28]
 8007388:	3303      	adds	r3, #3
 800738a:	7efa      	ldrb	r2, [r7, #27]
 800738c:	701a      	strb	r2, [r3, #0]
  }

  uint16_t header = /* write flag = 0*/ (address << 12) | (length / 2);
 800738e:	7bfb      	ldrb	r3, [r7, #15]
 8007390:	b29b      	uxth	r3, r3
 8007392:	031b      	lsls	r3, r3, #12
 8007394:	b29a      	uxth	r2, r3
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	085b      	lsrs	r3, r3, #1
 800739a:	b29b      	uxth	r3, r3
 800739c:	4313      	orrs	r3, r2
 800739e:	833b      	strh	r3, [r7, #24]

  uint8_t header_as_bytes[2];
  sl_wfx_pack_16bit_big_endian(header_as_bytes, header);
 80073a0:	8b3b      	ldrh	r3, [r7, #24]
 80073a2:	0a1b      	lsrs	r3, r3, #8
 80073a4:	b29b      	uxth	r3, r3
 80073a6:	b2db      	uxtb	r3, r3
 80073a8:	753b      	strb	r3, [r7, #20]
 80073aa:	8b3b      	ldrh	r3, [r7, #24]
 80073ac:	b2db      	uxtb	r3, r3
 80073ae:	757b      	strb	r3, [r7, #21]

  sl_wfx_host_spi_cs_assert();
 80073b0:	f002 f848 	bl	8009444 <sl_wfx_host_spi_cs_assert>
  /* Note: sl_wfx_host_spi_transfer_no_cs_assert() does not modify the buffer when doing SL_WFX_BUS_WRITE */
  sl_wfx_host_spi_transfer_no_cs_assert(SL_WFX_BUS_WRITE, header_as_bytes, 2, (uint8_t *)buffer, length);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	b29b      	uxth	r3, r3
 80073b8:	f107 0114 	add.w	r1, r7, #20
 80073bc:	9300      	str	r3, [sp, #0]
 80073be:	68bb      	ldr	r3, [r7, #8]
 80073c0:	2202      	movs	r2, #2
 80073c2:	2001      	movs	r0, #1
 80073c4:	f002 f856 	bl	8009474 <sl_wfx_host_spi_transfer_no_cs_assert>
  sl_wfx_host_spi_cs_deassert();
 80073c8:	f002 f848 	bl	800945c <sl_wfx_host_spi_cs_deassert>

  return SL_STATUS_OK;
 80073cc:	2300      	movs	r3, #0
}
 80073ce:	4618      	mov	r0, r3
 80073d0:	3720      	adds	r7, #32
 80073d2:	46bd      	mov	sp, r7
 80073d4:	bd80      	pop	{r7, pc}
	...

080073d8 <sl_wfx_init_bus>:

sl_status_t sl_wfx_init_bus(void)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b082      	sub	sp, #8
 80073dc:	af00      	add	r7, sp, #0
  sl_status_t status;
  uint32_t value32;

  status = sl_wfx_host_init_bus();
 80073de:	f002 f80b 	bl	80093f8 <sl_wfx_host_init_bus>
 80073e2:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(status);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d12b      	bne.n	8007442 <sl_wfx_init_bus+0x6a>

  sl_wfx_host_reset_chip();
 80073ea:	f001 f997 	bl	800871c <sl_wfx_host_reset_chip>

  status = sl_wfx_reg_read_32(SL_WFX_CONFIG_REG_ID, &value32);
 80073ee:	463b      	mov	r3, r7
 80073f0:	4619      	mov	r1, r3
 80073f2:	2000      	movs	r0, #0
 80073f4:	f7ff fdfc 	bl	8006ff0 <sl_wfx_reg_read_32>
 80073f8:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(status);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d122      	bne.n	8007446 <sl_wfx_init_bus+0x6e>

  if (value32 == 0 || value32 == 0xFFFFFFFF) {
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d003      	beq.n	800740e <sl_wfx_init_bus+0x36>
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	f1b3 3fff 	cmp.w	r3, #4294967295
 800740c:	d104      	bne.n	8007418 <sl_wfx_init_bus+0x40>
    status = SL_STATUS_FAIL;
 800740e:	2301      	movs	r3, #1
 8007410:	607b      	str	r3, [r7, #4]
    SL_WFX_ERROR_CHECK(status);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d118      	bne.n	800744a <sl_wfx_init_bus+0x72>
  }

  // setting up "word mode = b10", this means that data on SPI bus
  // is sent as B0, B1, B2, B3 , ....
  value32 &= ~SL_WFX_CONFIG_WORD_MODE_BITS;
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800741e:	603b      	str	r3, [r7, #0]
  value32 |= SL_WFX_CONFIG_WORD_MODE_2;
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007426:	603b      	str	r3, [r7, #0]

  /* Write CONFIG Register to configure SPI clock edge to support high frequency*/
  value32 |= 0x04045400;
 8007428:	683a      	ldr	r2, [r7, #0]
 800742a:	4b0b      	ldr	r3, [pc, #44]	; (8007458 <sl_wfx_init_bus+0x80>)
 800742c:	4313      	orrs	r3, r2
 800742e:	603b      	str	r3, [r7, #0]

  status = sl_wfx_reg_write_32(SL_WFX_CONFIG_REG_ID, value32);
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	4619      	mov	r1, r3
 8007434:	2000      	movs	r0, #0
 8007436:	f7ff fdf5 	bl	8007024 <sl_wfx_reg_write_32>
 800743a:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(status);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2b00      	cmp	r3, #0

  error_handler:
 8007440:	e004      	b.n	800744c <sl_wfx_init_bus+0x74>
  SL_WFX_ERROR_CHECK(status);
 8007442:	bf00      	nop
 8007444:	e002      	b.n	800744c <sl_wfx_init_bus+0x74>
  SL_WFX_ERROR_CHECK(status);
 8007446:	bf00      	nop
 8007448:	e000      	b.n	800744c <sl_wfx_init_bus+0x74>
    SL_WFX_ERROR_CHECK(status);
 800744a:	bf00      	nop
  return status;
 800744c:	687b      	ldr	r3, [r7, #4]
}
 800744e:	4618      	mov	r0, r3
 8007450:	3708      	adds	r7, #8
 8007452:	46bd      	mov	sp, r7
 8007454:	bd80      	pop	{r7, pc}
 8007456:	bf00      	nop
 8007458:	04045400 	.word	0x04045400

0800745c <sl_wfx_deinit_bus>:

sl_status_t sl_wfx_deinit_bus(void)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	af00      	add	r7, sp, #0
  return sl_wfx_host_deinit_bus();
 8007460:	f001 ffe2 	bl	8009428 <sl_wfx_host_deinit_bus>
 8007464:	4603      	mov	r3, r0
}
 8007466:	4618      	mov	r0, r3
 8007468:	bd80      	pop	{r7, pc}

0800746a <uint16_identity>:
{
 800746a:	b480      	push	{r7}
 800746c:	b083      	sub	sp, #12
 800746e:	af00      	add	r7, sp, #0
 8007470:	4603      	mov	r3, r0
 8007472:	80fb      	strh	r3, [r7, #6]
  return x;
 8007474:	88fb      	ldrh	r3, [r7, #6]
}
 8007476:	4618      	mov	r0, r3
 8007478:	370c      	adds	r7, #12
 800747a:	46bd      	mov	sp, r7
 800747c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007480:	4770      	bx	lr

08007482 <uint32_identity>:
{
 8007482:	b480      	push	{r7}
 8007484:	b083      	sub	sp, #12
 8007486:	af00      	add	r7, sp, #0
 8007488:	6078      	str	r0, [r7, #4]
  return x;
 800748a:	687b      	ldr	r3, [r7, #4]
}
 800748c:	4618      	mov	r0, r3
 800748e:	370c      	adds	r7, #12
 8007490:	46bd      	mov	sp, r7
 8007492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007496:	4770      	bx	lr

08007498 <sl_wfx_init>:
 * SL_STATUS_FAIL otherwise
 *
 * @note Actions performed by sl_wfx_init(): Reset -> load firmware -> send PDS
 *****************************************************************************/
sl_status_t sl_wfx_init(sl_wfx_context_t *context)
{
 8007498:	b590      	push	{r4, r7, lr}
 800749a:	b089      	sub	sp, #36	; 0x24
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
  const char           *pds_data;
#ifdef SL_WFX_USE_SECURE_LINK
  sl_wfx_secure_link_mode_t link_mode;
#endif

  memset(context, 0, sizeof(*context) );
 80074a0:	f44f 7209 	mov.w	r2, #548	; 0x224
 80074a4:	2100      	movs	r1, #0
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	f012 ff2a 	bl	801a300 <memset>

  sl_wfx_context = context;
 80074ac:	4a6b      	ldr	r2, [pc, #428]	; (800765c <sl_wfx_init+0x1c4>)
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6013      	str	r3, [r2, #0]
  sl_wfx_context->used_buffers = 0;
 80074b2:	4b6a      	ldr	r3, [pc, #424]	; (800765c <sl_wfx_init+0x1c4>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	2200      	movs	r2, #0
 80074b8:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206

  result = sl_wfx_init_bus(  );
 80074bc:	f7ff ff8c 	bl	80073d8 <sl_wfx_init_bus>
 80074c0:	61f8      	str	r0, [r7, #28]
  SL_WFX_ERROR_CHECK(result);
 80074c2:	69fb      	ldr	r3, [r7, #28]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	f040 80a5 	bne.w	8007614 <sl_wfx_init+0x17c>
#if (SL_WFX_DEBUG_MASK & SL_WFX_DEBUG_INIT)
  sl_wfx_host_log("--Bus initialized--\r\n");
#endif

  result = sl_wfx_init_chip( );
 80074ca:	f000 fc2d 	bl	8007d28 <sl_wfx_init_chip>
 80074ce:	61f8      	str	r0, [r7, #28]
  SL_WFX_ERROR_CHECK(result);
 80074d0:	69fb      	ldr	r3, [r7, #28]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	f040 80a0 	bne.w	8007618 <sl_wfx_init+0x180>
#if (SL_WFX_DEBUG_MASK & SL_WFX_DEBUG_INIT)
  sl_wfx_host_log("--Chip initialized--\r\n");
#endif

  result = sl_wfx_download_run_bootloader();
 80074d8:	f000 fcd0 	bl	8007e7c <sl_wfx_download_run_bootloader>
 80074dc:	61f8      	str	r0, [r7, #28]
  SL_WFX_ERROR_CHECK(result);
 80074de:	69fb      	ldr	r3, [r7, #28]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	f040 809b 	bne.w	800761c <sl_wfx_init+0x184>
#if (SL_WFX_DEBUG_MASK & SL_WFX_DEBUG_INIT)
  sl_wfx_host_log("--Bootloader running--\r\n");
#endif

  result = sl_wfx_host_setup_waited_event(SL_WFX_STARTUP_IND_ID);
 80074e6:	20e1      	movs	r0, #225	; 0xe1
 80074e8:	f001 f970 	bl	80087cc <sl_wfx_host_setup_waited_event>
 80074ec:	61f8      	str	r0, [r7, #28]
  SL_WFX_ERROR_CHECK(result);
 80074ee:	69fb      	ldr	r3, [r7, #28]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	f040 8095 	bne.w	8007620 <sl_wfx_init+0x188>

  /* Downloading Wi-Fi chip firmware */
  result = sl_wfx_download_run_firmware( );
 80074f6:	f000 fd13 	bl	8007f20 <sl_wfx_download_run_firmware>
 80074fa:	61f8      	str	r0, [r7, #28]
  SL_WFX_ERROR_CHECK(result);
 80074fc:	69fb      	ldr	r3, [r7, #28]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	f040 8090 	bne.w	8007624 <sl_wfx_init+0x18c>
#if (SL_WFX_DEBUG_MASK & SL_WFX_DEBUG_INIT)
  sl_wfx_host_log("--Firmware downloaded--\r\n");
#endif

  result = sl_wfx_enable_irq(  );
 8007504:	f000 fba4 	bl	8007c50 <sl_wfx_enable_irq>
 8007508:	61f8      	str	r0, [r7, #28]
  SL_WFX_ERROR_CHECK(result);
 800750a:	69fb      	ldr	r3, [r7, #28]
 800750c:	2b00      	cmp	r3, #0
 800750e:	f040 808b 	bne.w	8007628 <sl_wfx_init+0x190>

  result = sl_wfx_set_access_mode_message(  );
 8007512:	f000 fbeb 	bl	8007cec <sl_wfx_set_access_mode_message>
 8007516:	61f8      	str	r0, [r7, #28]
  SL_WFX_ERROR_CHECK(result);
 8007518:	69fb      	ldr	r3, [r7, #28]
 800751a:	2b00      	cmp	r3, #0
 800751c:	f040 8086 	bne.w	800762c <sl_wfx_init+0x194>
#if (SL_WFX_DEBUG_MASK & SL_WFX_DEBUG_INIT)
  sl_wfx_host_log("--Message mode set--\r\n");
#endif

  /* Waiting for the startup indication from Wi-Fi chip, SL_WFX_STARTUP_IND_ID */
  result = sl_wfx_host_wait_for_confirmation(SL_WFX_STARTUP_IND_ID,
 8007520:	f107 0314 	add.w	r3, r7, #20
 8007524:	461a      	mov	r2, r3
 8007526:	f241 3188 	movw	r1, #5000	; 0x1388
 800752a:	20e1      	movs	r0, #225	; 0xe1
 800752c:	f001 f960 	bl	80087f0 <sl_wfx_host_wait_for_confirmation>
 8007530:	61f8      	str	r0, [r7, #28]
                                             SL_WFX_DEFAULT_REQUEST_TIMEOUT_MS,
                                             (void **)&startup_info);
  SL_WFX_ERROR_CHECK(result);
 8007532:	69fb      	ldr	r3, [r7, #28]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d17b      	bne.n	8007630 <sl_wfx_init+0x198>

  /* Store the firware version in the context */
  context->firmware_build = startup_info->body.firmware_build;
 8007538:	697b      	ldr	r3, [r7, #20]
 800753a:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  context->firmware_minor = startup_info->body.firmware_minor;
 8007544:	697b      	ldr	r3, [r7, #20]
 8007546:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
  context->firmware_major = startup_info->body.firmware_major;
 8007550:	697b      	ldr	r3, [r7, #20]
 8007552:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	f883 2202 	strb.w	r2, [r3, #514]	; 0x202

  /* Storing mac addresses from Wi-Fi chip in the context  */
  memcpy(&(context->mac_addr_0.octet),
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	f203 2016 	addw	r0, r3, #534	; 0x216
         startup_info->body.mac_addr[0],
 8007562:	697b      	ldr	r3, [r7, #20]
 8007564:	3326      	adds	r3, #38	; 0x26
  memcpy(&(context->mac_addr_0.octet),
 8007566:	2206      	movs	r2, #6
 8007568:	4619      	mov	r1, r3
 800756a:	f012 febb 	bl	801a2e4 <memcpy>
         sizeof(sl_wfx_mac_address_t));
  memcpy(&(context->mac_addr_1.octet),
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	f503 7007 	add.w	r0, r3, #540	; 0x21c
         startup_info->body.mac_addr[1],
 8007574:	697b      	ldr	r3, [r7, #20]
 8007576:	332c      	adds	r3, #44	; 0x2c
  memcpy(&(context->mac_addr_1.octet),
 8007578:	2206      	movs	r2, #6
 800757a:	4619      	mov	r1, r3
 800757c:	f012 feb2 	bl	801a2e4 <memcpy>
         sizeof(sl_wfx_mac_address_t));

  /* Storing input buffer limit from Wi-Fi chip */
  sl_wfx_input_buffer_number = sl_wfx_htole16(startup_info->body.num_inp_ch_bufs);
 8007580:	697b      	ldr	r3, [r7, #20]
 8007582:	8c1b      	ldrh	r3, [r3, #32]
 8007584:	b29b      	uxth	r3, r3
 8007586:	4618      	mov	r0, r3
 8007588:	f7ff ff6f 	bl	800746a <uint16_identity>
 800758c:	4603      	mov	r3, r0
 800758e:	461a      	mov	r2, r3
 8007590:	4b33      	ldr	r3, [pc, #204]	; (8007660 <sl_wfx_init+0x1c8>)
 8007592:	801a      	strh	r2, [r3, #0]

  /* Store the OPN */
  memcpy(context->wfx_opn, startup_info->body.opn, SL_WFX_OPN_SIZE);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	f503 7002 	add.w	r0, r3, #520	; 0x208
 800759a:	697b      	ldr	r3, [r7, #20]
 800759c:	330a      	adds	r3, #10
 800759e:	220e      	movs	r2, #14
 80075a0:	4619      	mov	r1, r3
 80075a2:	f012 fe9f 	bl	801a2e4 <memcpy>

  /* Set the wake up pin of the host */
  sl_wfx_host_set_wake_up_pin(1);
 80075a6:	2001      	movs	r0, #1
 80075a8:	f001 f8d0 	bl	800874c <sl_wfx_host_set_wake_up_pin>
        goto error_handler;
    }
  }
#endif //SL_WFX_USE_SECURE_LINK

  result = sl_wfx_host_get_pds_size(&pds_size);
 80075ac:	f107 0312 	add.w	r3, r7, #18
 80075b0:	4618      	mov	r0, r3
 80075b2:	f001 f88b 	bl	80086cc <sl_wfx_host_get_pds_size>
 80075b6:	61f8      	str	r0, [r7, #28]
  SL_WFX_ERROR_CHECK(result);
 80075b8:	69fb      	ldr	r3, [r7, #28]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d13a      	bne.n	8007634 <sl_wfx_init+0x19c>
  /* Sending to Wi-Fi chip PDS configuration (Platform data set) */
  for (uint8_t a = 0; a < pds_size; a++) {
 80075be:	2300      	movs	r3, #0
 80075c0:	76fb      	strb	r3, [r7, #27]
 80075c2:	e01c      	b.n	80075fe <sl_wfx_init+0x166>
    result = sl_wfx_host_get_pds_data(&pds_data, a);
 80075c4:	7efb      	ldrb	r3, [r7, #27]
 80075c6:	b29a      	uxth	r2, r3
 80075c8:	f107 030c 	add.w	r3, r7, #12
 80075cc:	4611      	mov	r1, r2
 80075ce:	4618      	mov	r0, r3
 80075d0:	f001 f850 	bl	8008674 <sl_wfx_host_get_pds_data>
 80075d4:	61f8      	str	r0, [r7, #28]
    SL_WFX_ERROR_CHECK(result);
 80075d6:	69fb      	ldr	r3, [r7, #28]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d12d      	bne.n	8007638 <sl_wfx_init+0x1a0>
    result = sl_wfx_send_configuration(pds_data, strlen(pds_data));
 80075dc:	68fc      	ldr	r4, [r7, #12]
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	4618      	mov	r0, r3
 80075e2:	f7f8 fe07 	bl	80001f4 <strlen>
 80075e6:	4603      	mov	r3, r0
 80075e8:	4619      	mov	r1, r3
 80075ea:	4620      	mov	r0, r4
 80075ec:	f000 f96c 	bl	80078c8 <sl_wfx_send_configuration>
 80075f0:	61f8      	str	r0, [r7, #28]
    SL_WFX_ERROR_CHECK(result);
 80075f2:	69fb      	ldr	r3, [r7, #28]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d121      	bne.n	800763c <sl_wfx_init+0x1a4>
  for (uint8_t a = 0; a < pds_size; a++) {
 80075f8:	7efb      	ldrb	r3, [r7, #27]
 80075fa:	3301      	adds	r3, #1
 80075fc:	76fb      	strb	r3, [r7, #27]
 80075fe:	7efb      	ldrb	r3, [r7, #27]
 8007600:	b29a      	uxth	r2, r3
 8007602:	8a7b      	ldrh	r3, [r7, #18]
 8007604:	429a      	cmp	r2, r3
 8007606:	d3dd      	bcc.n	80075c4 <sl_wfx_init+0x12c>

#if (SL_WFX_DEBUG_MASK & SL_WFX_DEBUG_INIT)
  sl_wfx_host_log("--PDS configured--\r\n");
#endif

  sl_wfx_context->state = SL_WFX_STARTED;
 8007608:	4b14      	ldr	r3, [pc, #80]	; (800765c <sl_wfx_init+0x1c4>)
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	2201      	movs	r2, #1
 800760e:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222
 8007612:	e014      	b.n	800763e <sl_wfx_init+0x1a6>
  SL_WFX_ERROR_CHECK(result);
 8007614:	bf00      	nop
 8007616:	e012      	b.n	800763e <sl_wfx_init+0x1a6>
  SL_WFX_ERROR_CHECK(result);
 8007618:	bf00      	nop
 800761a:	e010      	b.n	800763e <sl_wfx_init+0x1a6>
  SL_WFX_ERROR_CHECK(result);
 800761c:	bf00      	nop
 800761e:	e00e      	b.n	800763e <sl_wfx_init+0x1a6>
  SL_WFX_ERROR_CHECK(result);
 8007620:	bf00      	nop
 8007622:	e00c      	b.n	800763e <sl_wfx_init+0x1a6>
  SL_WFX_ERROR_CHECK(result);
 8007624:	bf00      	nop
 8007626:	e00a      	b.n	800763e <sl_wfx_init+0x1a6>
  SL_WFX_ERROR_CHECK(result);
 8007628:	bf00      	nop
 800762a:	e008      	b.n	800763e <sl_wfx_init+0x1a6>
  SL_WFX_ERROR_CHECK(result);
 800762c:	bf00      	nop
 800762e:	e006      	b.n	800763e <sl_wfx_init+0x1a6>
  SL_WFX_ERROR_CHECK(result);
 8007630:	bf00      	nop
 8007632:	e004      	b.n	800763e <sl_wfx_init+0x1a6>
  SL_WFX_ERROR_CHECK(result);
 8007634:	bf00      	nop
 8007636:	e002      	b.n	800763e <sl_wfx_init+0x1a6>
    SL_WFX_ERROR_CHECK(result);
 8007638:	bf00      	nop
 800763a:	e000      	b.n	800763e <sl_wfx_init+0x1a6>
    SL_WFX_ERROR_CHECK(result);
 800763c:	bf00      	nop

  error_handler:
  if (result != SL_STATUS_OK) {
 800763e:	69fb      	ldr	r3, [r7, #28]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d005      	beq.n	8007650 <sl_wfx_init+0x1b8>
    sl_wfx_disable_irq( );
 8007644:	f000 fb2b 	bl	8007c9e <sl_wfx_disable_irq>
    sl_wfx_deinit_bus();
 8007648:	f7ff ff08 	bl	800745c <sl_wfx_deinit_bus>
    sl_wfx_host_deinit();
 800764c:	f001 f85e 	bl	800870c <sl_wfx_host_deinit>
  }

  return result;
 8007650:	69fb      	ldr	r3, [r7, #28]
}
 8007652:	4618      	mov	r0, r3
 8007654:	3724      	adds	r7, #36	; 0x24
 8007656:	46bd      	mov	sp, r7
 8007658:	bd90      	pop	{r4, r7, pc}
 800765a:	bf00      	nop
 800765c:	200009fc 	.word	0x200009fc
 8007660:	20000a02 	.word	0x20000a02

08007664 <sl_wfx_send_join_command>:
                                     uint16_t        management_frame_protection,
                                     const uint8_t  *passkey,
                                     uint16_t        passkey_length,
                                     const uint8_t  *ie_data,
                                     uint16_t        ie_data_length)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b08a      	sub	sp, #40	; 0x28
 8007668:	af00      	add	r7, sp, #0
 800766a:	60f8      	str	r0, [r7, #12]
 800766c:	60b9      	str	r1, [r7, #8]
 800766e:	607a      	str	r2, [r7, #4]
 8007670:	807b      	strh	r3, [r7, #2]
  sl_status_t               result           = SL_STATUS_OK;
 8007672:	2300      	movs	r3, #0
 8007674:	627b      	str	r3, [r7, #36]	; 0x24
  sl_wfx_generic_message_t  *frame           = NULL;
 8007676:	2300      	movs	r3, #0
 8007678:	61bb      	str	r3, [r7, #24]
  sl_wfx_connect_cnf_t      *reply           = NULL;
 800767a:	2300      	movs	r3, #0
 800767c:	617b      	str	r3, [r7, #20]
  sl_wfx_connect_req_body_t *connect_request = NULL;
 800767e:	2300      	movs	r3, #0
 8007680:	623b      	str	r3, [r7, #32]
  uint32_t request_length  = SL_WFX_ROUND_UP_EVEN(sizeof(sl_wfx_connect_req_t) + ie_data_length);
 8007682:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8007686:	3301      	adds	r3, #1
 8007688:	f023 0301 	bic.w	r3, r3, #1
 800768c:	3378      	adds	r3, #120	; 0x78
 800768e:	61fb      	str	r3, [r7, #28]

  result = sl_wfx_allocate_command_buffer(&frame, SL_WFX_CONNECT_REQ_ID, SL_WFX_CONTROL_BUFFER, request_length);
 8007690:	f107 0018 	add.w	r0, r7, #24
 8007694:	69fb      	ldr	r3, [r7, #28]
 8007696:	2202      	movs	r2, #2
 8007698:	2143      	movs	r1, #67	; 0x43
 800769a:	f000 ff53 	bl	8008544 <sl_wfx_allocate_command_buffer>
 800769e:	6278      	str	r0, [r7, #36]	; 0x24
  SL_WFX_ERROR_CHECK(result);
 80076a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	f040 8093 	bne.w	80077ce <sl_wfx_send_join_command+0x16a>

  frame->header.info = SL_WFX_STA_INTERFACE << SL_WFX_MSG_INFO_INTERFACE_OFFSET;
 80076a8:	69bb      	ldr	r3, [r7, #24]
 80076aa:	2200      	movs	r2, #0
 80076ac:	70da      	strb	r2, [r3, #3]

  connect_request                        = (sl_wfx_connect_req_body_t *)&frame->body;
 80076ae:	69bb      	ldr	r3, [r7, #24]
 80076b0:	3304      	adds	r3, #4
 80076b2:	623b      	str	r3, [r7, #32]
  connect_request->ssid_def.ssid_length  = sl_wfx_htole32(ssid_length);
 80076b4:	68b8      	ldr	r0, [r7, #8]
 80076b6:	f7ff fee4 	bl	8007482 <uint32_identity>
 80076ba:	4602      	mov	r2, r0
 80076bc:	6a3b      	ldr	r3, [r7, #32]
 80076be:	601a      	str	r2, [r3, #0]
  connect_request->channel               = sl_wfx_htole16(channel);
 80076c0:	887b      	ldrh	r3, [r7, #2]
 80076c2:	4618      	mov	r0, r3
 80076c4:	f7ff fed1 	bl	800746a <uint16_identity>
 80076c8:	4603      	mov	r3, r0
 80076ca:	461a      	mov	r2, r3
 80076cc:	6a3b      	ldr	r3, [r7, #32]
 80076ce:	855a      	strh	r2, [r3, #42]	; 0x2a
  connect_request->security_mode         = security_mode;
 80076d0:	6a3b      	ldr	r3, [r7, #32]
 80076d2:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80076d6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  connect_request->prevent_roaming       = prevent_roaming;
 80076da:	6a3b      	ldr	r3, [r7, #32]
 80076dc:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 80076e0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  if (security_mode == WFM_SECURITY_MODE_WPA3_SAE) {
 80076e4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80076e8:	2b06      	cmp	r3, #6
 80076ea:	d109      	bne.n	8007700 <sl_wfx_send_join_command+0x9c>
    connect_request->mgmt_frame_protection = WFM_MGMT_FRAME_PROTECTION_MANDATORY;
 80076ec:	6a3b      	ldr	r3, [r7, #32]
 80076ee:	2200      	movs	r2, #0
 80076f0:	f042 0202 	orr.w	r2, r2, #2
 80076f4:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 80076f8:	2200      	movs	r2, #0
 80076fa:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
 80076fe:	e007      	b.n	8007710 <sl_wfx_send_join_command+0xac>
  } else {
    connect_request->mgmt_frame_protection = sl_wfx_htole16(management_frame_protection);
 8007700:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007702:	4618      	mov	r0, r3
 8007704:	f7ff feb1 	bl	800746a <uint16_identity>
 8007708:	4603      	mov	r3, r0
 800770a:	461a      	mov	r2, r3
 800770c:	6a3b      	ldr	r3, [r7, #32]
 800770e:	85da      	strh	r2, [r3, #46]	; 0x2e
  }
  connect_request->password_length       = sl_wfx_htole16(passkey_length);
 8007710:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007714:	4618      	mov	r0, r3
 8007716:	f7ff fea8 	bl	800746a <uint16_identity>
 800771a:	4603      	mov	r3, r0
 800771c:	461a      	mov	r2, r3
 800771e:	6a3b      	ldr	r3, [r7, #32]
 8007720:	861a      	strh	r2, [r3, #48]	; 0x30
  connect_request->ie_data_length        = sl_wfx_htole16(ie_data_length);
 8007722:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8007726:	4618      	mov	r0, r3
 8007728:	f7ff fe9f 	bl	800746a <uint16_identity>
 800772c:	4603      	mov	r3, r0
 800772e:	461a      	mov	r2, r3
 8007730:	6a3b      	ldr	r3, [r7, #32]
 8007732:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
  memcpy(connect_request->ssid_def.ssid, ssid, ssid_length);
 8007736:	6a3b      	ldr	r3, [r7, #32]
 8007738:	3304      	adds	r3, #4
 800773a:	68ba      	ldr	r2, [r7, #8]
 800773c:	68f9      	ldr	r1, [r7, #12]
 800773e:	4618      	mov	r0, r3
 8007740:	f012 fdd0 	bl	801a2e4 <memcpy>
  memcpy(connect_request->password, passkey, passkey_length);
 8007744:	6a3b      	ldr	r3, [r7, #32]
 8007746:	3332      	adds	r3, #50	; 0x32
 8007748:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800774c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800774e:	4618      	mov	r0, r3
 8007750:	f012 fdc8 	bl	801a2e4 <memcpy>
  memcpy(connect_request + 1, ie_data, ie_data_length);
 8007754:	6a3b      	ldr	r3, [r7, #32]
 8007756:	3374      	adds	r3, #116	; 0x74
 8007758:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800775c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800775e:	4618      	mov	r0, r3
 8007760:	f012 fdc0 	bl	801a2e4 <memcpy>
  if (bssid != NULL) {
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d007      	beq.n	800777a <sl_wfx_send_join_command+0x116>
    memcpy(connect_request->bssid, &bssid->octet, SL_WFX_BSSID_SIZE);
 800776a:	6a3b      	ldr	r3, [r7, #32]
 800776c:	3324      	adds	r3, #36	; 0x24
 800776e:	6879      	ldr	r1, [r7, #4]
 8007770:	2206      	movs	r2, #6
 8007772:	4618      	mov	r0, r3
 8007774:	f012 fdb6 	bl	801a2e4 <memcpy>
 8007778:	e006      	b.n	8007788 <sl_wfx_send_join_command+0x124>
  } else {
    memset(connect_request->bssid, 0xFF, SL_WFX_BSSID_SIZE);
 800777a:	6a3b      	ldr	r3, [r7, #32]
 800777c:	3324      	adds	r3, #36	; 0x24
 800777e:	2206      	movs	r2, #6
 8007780:	21ff      	movs	r1, #255	; 0xff
 8007782:	4618      	mov	r0, r3
 8007784:	f012 fdbc 	bl	801a300 <memset>
  }

  result = sl_wfx_send_request(SL_WFX_CONNECT_REQ_ID, frame, request_length);
 8007788:	69bb      	ldr	r3, [r7, #24]
 800778a:	69fa      	ldr	r2, [r7, #28]
 800778c:	b292      	uxth	r2, r2
 800778e:	4619      	mov	r1, r3
 8007790:	2043      	movs	r0, #67	; 0x43
 8007792:	f000 f917 	bl	80079c4 <sl_wfx_send_request>
 8007796:	6278      	str	r0, [r7, #36]	; 0x24
  SL_WFX_ERROR_CHECK(result);
 8007798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800779a:	2b00      	cmp	r3, #0
 800779c:	d119      	bne.n	80077d2 <sl_wfx_send_join_command+0x16e>

  result = sl_wfx_host_wait_for_confirmation(SL_WFX_CONNECT_REQ_ID, SL_WFX_DEFAULT_REQUEST_TIMEOUT_MS, (void **)&reply);
 800779e:	f107 0314 	add.w	r3, r7, #20
 80077a2:	461a      	mov	r2, r3
 80077a4:	f241 3188 	movw	r1, #5000	; 0x1388
 80077a8:	2043      	movs	r0, #67	; 0x43
 80077aa:	f001 f821 	bl	80087f0 <sl_wfx_host_wait_for_confirmation>
 80077ae:	6278      	str	r0, [r7, #36]	; 0x24
  SL_WFX_ERROR_CHECK(result);
 80077b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d10f      	bne.n	80077d6 <sl_wfx_send_join_command+0x172>

  result = sl_wfx_get_status_code(sl_wfx_htole32(reply->body.status), SL_WFX_CONNECT_REQ_ID);
 80077b6:	697b      	ldr	r3, [r7, #20]
 80077b8:	685b      	ldr	r3, [r3, #4]
 80077ba:	4618      	mov	r0, r3
 80077bc:	f7ff fe61 	bl	8007482 <uint32_identity>
 80077c0:	4603      	mov	r3, r0
 80077c2:	2143      	movs	r1, #67	; 0x43
 80077c4:	4618      	mov	r0, r3
 80077c6:	f000 fddd 	bl	8008384 <sl_wfx_get_status_code>
 80077ca:	6278      	str	r0, [r7, #36]	; 0x24
 80077cc:	e004      	b.n	80077d8 <sl_wfx_send_join_command+0x174>
  SL_WFX_ERROR_CHECK(result);
 80077ce:	bf00      	nop
 80077d0:	e002      	b.n	80077d8 <sl_wfx_send_join_command+0x174>
  SL_WFX_ERROR_CHECK(result);
 80077d2:	bf00      	nop
 80077d4:	e000      	b.n	80077d8 <sl_wfx_send_join_command+0x174>
  SL_WFX_ERROR_CHECK(result);
 80077d6:	bf00      	nop

  error_handler:
  if (result == SL_STATUS_TIMEOUT) {
 80077d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077da:	2b07      	cmp	r3, #7
 80077dc:	d10d      	bne.n	80077fa <sl_wfx_send_join_command+0x196>
    if (sl_wfx_context->used_buffers > 0) {
 80077de:	4b0e      	ldr	r3, [pc, #56]	; (8007818 <sl_wfx_send_join_command+0x1b4>)
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d007      	beq.n	80077fa <sl_wfx_send_join_command+0x196>
      sl_wfx_context->used_buffers--;
 80077ea:	4b0b      	ldr	r3, [pc, #44]	; (8007818 <sl_wfx_send_join_command+0x1b4>)
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 80077f2:	3a01      	subs	r2, #1
 80077f4:	b292      	uxth	r2, r2
 80077f6:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
    }
  }
  if (frame != NULL) {
 80077fa:	69bb      	ldr	r3, [r7, #24]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d005      	beq.n	800780c <sl_wfx_send_join_command+0x1a8>
    sl_wfx_free_command_buffer(frame, SL_WFX_CONNECT_REQ_ID, SL_WFX_CONTROL_BUFFER);
 8007800:	69bb      	ldr	r3, [r7, #24]
 8007802:	2202      	movs	r2, #2
 8007804:	2143      	movs	r1, #67	; 0x43
 8007806:	4618      	mov	r0, r3
 8007808:	f000 febc 	bl	8008584 <sl_wfx_free_command_buffer>
  }
  return result;
 800780c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800780e:	4618      	mov	r0, r3
 8007810:	3728      	adds	r7, #40	; 0x28
 8007812:	46bd      	mov	sp, r7
 8007814:	bd80      	pop	{r7, pc}
 8007816:	bf00      	nop
 8007818:	200009fc 	.word	0x200009fc

0800781c <sl_wfx_send_ethernet_frame>:
 *****************************************************************************/
sl_status_t sl_wfx_send_ethernet_frame(sl_wfx_send_frame_req_t *frame,
                                       uint32_t data_length,
                                       sl_wfx_interface_t interface,
                                       uint8_t priority)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b086      	sub	sp, #24
 8007820:	af00      	add	r7, sp, #0
 8007822:	60f8      	str	r0, [r7, #12]
 8007824:	60b9      	str	r1, [r7, #8]
 8007826:	4611      	mov	r1, r2
 8007828:	461a      	mov	r2, r3
 800782a:	460b      	mov	r3, r1
 800782c:	71fb      	strb	r3, [r7, #7]
 800782e:	4613      	mov	r3, r2
 8007830:	71bb      	strb	r3, [r7, #6]
  sl_status_t result;
  uint32_t request_length = SL_WFX_ROUND_UP_EVEN(sizeof(sl_wfx_send_frame_req_t) + data_length);
 8007832:	68bb      	ldr	r3, [r7, #8]
 8007834:	3301      	adds	r3, #1
 8007836:	f023 0301 	bic.w	r3, r3, #1
 800783a:	330c      	adds	r3, #12
 800783c:	617b      	str	r3, [r7, #20]

  sl_wfx_context->data_frame_id++;
 800783e:	4b21      	ldr	r3, [pc, #132]	; (80078c4 <sl_wfx_send_ethernet_frame+0xa8>)
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f8b3 2204 	ldrh.w	r2, [r3, #516]	; 0x204
 8007846:	3201      	adds	r2, #1
 8007848:	b292      	uxth	r2, r2
 800784a:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204

  frame->header.length           = sl_wfx_htole16(data_length + sizeof(sl_wfx_send_frame_req_t));
 800784e:	68bb      	ldr	r3, [r7, #8]
 8007850:	b29b      	uxth	r3, r3
 8007852:	330c      	adds	r3, #12
 8007854:	b29b      	uxth	r3, r3
 8007856:	4618      	mov	r0, r3
 8007858:	f7ff fe07 	bl	800746a <uint16_identity>
 800785c:	4603      	mov	r3, r0
 800785e:	461a      	mov	r2, r3
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	801a      	strh	r2, [r3, #0]
  frame->header.id               = SL_WFX_SEND_FRAME_REQ_ID;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	224a      	movs	r2, #74	; 0x4a
 8007868:	709a      	strb	r2, [r3, #2]
  frame->header.info             = (interface << SL_WFX_MSG_INFO_INTERFACE_OFFSET) & SL_WFX_MSG_INFO_INTERFACE_MASK;
 800786a:	79fb      	ldrb	r3, [r7, #7]
 800786c:	005b      	lsls	r3, r3, #1
 800786e:	b2db      	uxtb	r3, r3
 8007870:	f003 0306 	and.w	r3, r3, #6
 8007874:	b2da      	uxtb	r2, r3
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	70da      	strb	r2, [r3, #3]
  frame->body.frame_type         = WFM_FRAME_TYPE_DATA;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	2208      	movs	r2, #8
 800787e:	711a      	strb	r2, [r3, #4]
  frame->body.priority           = priority;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	79ba      	ldrb	r2, [r7, #6]
 8007884:	715a      	strb	r2, [r3, #5]
  frame->body.packet_id          = sl_wfx_htole16(sl_wfx_context->data_frame_id);
 8007886:	4b0f      	ldr	r3, [pc, #60]	; (80078c4 <sl_wfx_send_ethernet_frame+0xa8>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
 800788e:	4618      	mov	r0, r3
 8007890:	f7ff fdeb 	bl	800746a <uint16_identity>
 8007894:	4603      	mov	r3, r0
 8007896:	461a      	mov	r2, r3
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	80da      	strh	r2, [r3, #6]
  frame->body.packet_data_length = sl_wfx_htole32(data_length);
 800789c:	68b8      	ldr	r0, [r7, #8]
 800789e:	f7ff fdf0 	bl	8007482 <uint32_identity>
 80078a2:	4602      	mov	r2, r0
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	609a      	str	r2, [r3, #8]

  result = sl_wfx_send_request(SL_WFX_SEND_FRAME_REQ_ID, (sl_wfx_generic_message_t*) frame, request_length);
 80078a8:	697b      	ldr	r3, [r7, #20]
 80078aa:	b29b      	uxth	r3, r3
 80078ac:	461a      	mov	r2, r3
 80078ae:	68f9      	ldr	r1, [r7, #12]
 80078b0:	204a      	movs	r0, #74	; 0x4a
 80078b2:	f000 f887 	bl	80079c4 <sl_wfx_send_request>
 80078b6:	6138      	str	r0, [r7, #16]

  return result;
 80078b8:	693b      	ldr	r3, [r7, #16]
}
 80078ba:	4618      	mov	r0, r3
 80078bc:	3718      	adds	r7, #24
 80078be:	46bd      	mov	sp, r7
 80078c0:	bd80      	pop	{r7, pc}
 80078c2:	bf00      	nop
 80078c4:	200009fc 	.word	0x200009fc

080078c8 <sl_wfx_send_configuration>:
 * SL_STATUS_FAIL otherwise
 *
 * @note The PDS (Platform Data Set) file contains the WF200 settings
 *****************************************************************************/
sl_status_t sl_wfx_send_configuration(const char *pds_data, uint32_t pds_data_length)
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b088      	sub	sp, #32
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
 80078d0:	6039      	str	r1, [r7, #0]
  sl_status_t                      result         = SL_STATUS_OK;
 80078d2:	2300      	movs	r3, #0
 80078d4:	61fb      	str	r3, [r7, #28]
  sl_wfx_generic_message_t        *frame          = NULL;
 80078d6:	2300      	movs	r3, #0
 80078d8:	613b      	str	r3, [r7, #16]
  sl_wfx_configuration_cnf_t      *reply          = NULL;
 80078da:	2300      	movs	r3, #0
 80078dc:	60fb      	str	r3, [r7, #12]
  sl_wfx_configuration_req_body_t *config_request = NULL;
 80078de:	2300      	movs	r3, #0
 80078e0:	61bb      	str	r3, [r7, #24]
  uint32_t request_length = SL_WFX_ROUND_UP_EVEN(sizeof(sl_wfx_configuration_req_t) + pds_data_length);
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	3301      	adds	r3, #1
 80078e6:	f023 0301 	bic.w	r3, r3, #1
 80078ea:	3306      	adds	r3, #6
 80078ec:	617b      	str	r3, [r7, #20]

  result = sl_wfx_allocate_command_buffer(&frame, SL_WFX_CONFIGURATION_REQ_ID, SL_WFX_CONTROL_BUFFER, request_length);
 80078ee:	f107 0010 	add.w	r0, r7, #16
 80078f2:	697b      	ldr	r3, [r7, #20]
 80078f4:	2202      	movs	r2, #2
 80078f6:	2109      	movs	r1, #9
 80078f8:	f000 fe24 	bl	8008544 <sl_wfx_allocate_command_buffer>
 80078fc:	61f8      	str	r0, [r7, #28]
  SL_WFX_ERROR_CHECK(result);
 80078fe:	69fb      	ldr	r3, [r7, #28]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d138      	bne.n	8007976 <sl_wfx_send_configuration+0xae>

  frame->header.info = SL_WFX_STA_INTERFACE << SL_WFX_MSG_INFO_INTERFACE_OFFSET;
 8007904:	693b      	ldr	r3, [r7, #16]
 8007906:	2200      	movs	r2, #0
 8007908:	70da      	strb	r2, [r3, #3]

  config_request = (sl_wfx_configuration_req_body_t *)&frame->body;
 800790a:	693b      	ldr	r3, [r7, #16]
 800790c:	3304      	adds	r3, #4
 800790e:	61bb      	str	r3, [r7, #24]
  config_request->length = sl_wfx_htole16(pds_data_length);
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	b29b      	uxth	r3, r3
 8007914:	4618      	mov	r0, r3
 8007916:	f7ff fda8 	bl	800746a <uint16_identity>
 800791a:	4603      	mov	r3, r0
 800791c:	461a      	mov	r2, r3
 800791e:	69bb      	ldr	r3, [r7, #24]
 8007920:	801a      	strh	r2, [r3, #0]

  memcpy(config_request->pds_data, pds_data, pds_data_length);
 8007922:	69bb      	ldr	r3, [r7, #24]
 8007924:	3302      	adds	r3, #2
 8007926:	683a      	ldr	r2, [r7, #0]
 8007928:	6879      	ldr	r1, [r7, #4]
 800792a:	4618      	mov	r0, r3
 800792c:	f012 fcda 	bl	801a2e4 <memcpy>

  result = sl_wfx_send_request(SL_WFX_CONFIGURATION_REQ_ID, frame, request_length);
 8007930:	693b      	ldr	r3, [r7, #16]
 8007932:	697a      	ldr	r2, [r7, #20]
 8007934:	b292      	uxth	r2, r2
 8007936:	4619      	mov	r1, r3
 8007938:	2009      	movs	r0, #9
 800793a:	f000 f843 	bl	80079c4 <sl_wfx_send_request>
 800793e:	61f8      	str	r0, [r7, #28]
  SL_WFX_ERROR_CHECK(result);
 8007940:	69fb      	ldr	r3, [r7, #28]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d119      	bne.n	800797a <sl_wfx_send_configuration+0xb2>

  result = sl_wfx_host_wait_for_confirmation(SL_WFX_CONFIGURATION_REQ_ID, SL_WFX_DEFAULT_REQUEST_TIMEOUT_MS, (void **)&reply);
 8007946:	f107 030c 	add.w	r3, r7, #12
 800794a:	461a      	mov	r2, r3
 800794c:	f241 3188 	movw	r1, #5000	; 0x1388
 8007950:	2009      	movs	r0, #9
 8007952:	f000 ff4d 	bl	80087f0 <sl_wfx_host_wait_for_confirmation>
 8007956:	61f8      	str	r0, [r7, #28]
  SL_WFX_ERROR_CHECK(result);
 8007958:	69fb      	ldr	r3, [r7, #28]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d10f      	bne.n	800797e <sl_wfx_send_configuration+0xb6>

  result = sl_wfx_get_status_code(sl_wfx_htole32(reply->body.status), SL_WFX_CONFIGURATION_REQ_ID);
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	685b      	ldr	r3, [r3, #4]
 8007962:	4618      	mov	r0, r3
 8007964:	f7ff fd8d 	bl	8007482 <uint32_identity>
 8007968:	4603      	mov	r3, r0
 800796a:	2109      	movs	r1, #9
 800796c:	4618      	mov	r0, r3
 800796e:	f000 fd09 	bl	8008384 <sl_wfx_get_status_code>
 8007972:	61f8      	str	r0, [r7, #28]
 8007974:	e004      	b.n	8007980 <sl_wfx_send_configuration+0xb8>
  SL_WFX_ERROR_CHECK(result);
 8007976:	bf00      	nop
 8007978:	e002      	b.n	8007980 <sl_wfx_send_configuration+0xb8>
  SL_WFX_ERROR_CHECK(result);
 800797a:	bf00      	nop
 800797c:	e000      	b.n	8007980 <sl_wfx_send_configuration+0xb8>
  SL_WFX_ERROR_CHECK(result);
 800797e:	bf00      	nop

  error_handler:
  if (result == SL_STATUS_TIMEOUT) {
 8007980:	69fb      	ldr	r3, [r7, #28]
 8007982:	2b07      	cmp	r3, #7
 8007984:	d10d      	bne.n	80079a2 <sl_wfx_send_configuration+0xda>
    if (sl_wfx_context->used_buffers > 0) {
 8007986:	4b0e      	ldr	r3, [pc, #56]	; (80079c0 <sl_wfx_send_configuration+0xf8>)
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
 800798e:	2b00      	cmp	r3, #0
 8007990:	d007      	beq.n	80079a2 <sl_wfx_send_configuration+0xda>
      sl_wfx_context->used_buffers--;
 8007992:	4b0b      	ldr	r3, [pc, #44]	; (80079c0 <sl_wfx_send_configuration+0xf8>)
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 800799a:	3a01      	subs	r2, #1
 800799c:	b292      	uxth	r2, r2
 800799e:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
    }
  }
  if (frame != NULL) {
 80079a2:	693b      	ldr	r3, [r7, #16]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d005      	beq.n	80079b4 <sl_wfx_send_configuration+0xec>
    sl_wfx_free_command_buffer(frame, SL_WFX_CONFIGURATION_REQ_ID, SL_WFX_CONTROL_BUFFER);
 80079a8:	693b      	ldr	r3, [r7, #16]
 80079aa:	2202      	movs	r2, #2
 80079ac:	2109      	movs	r1, #9
 80079ae:	4618      	mov	r0, r3
 80079b0:	f000 fde8 	bl	8008584 <sl_wfx_free_command_buffer>
  }
  return result;
 80079b4:	69fb      	ldr	r3, [r7, #28]
}
 80079b6:	4618      	mov	r0, r3
 80079b8:	3720      	adds	r7, #32
 80079ba:	46bd      	mov	sp, r7
 80079bc:	bd80      	pop	{r7, pc}
 80079be:	bf00      	nop
 80079c0:	200009fc 	.word	0x200009fc

080079c4 <sl_wfx_send_request>:
 * @returns SL_STATUS_OK if the command is sent correctly,
 * SL_STATUS_WOULD_OVERFLOW if the HIF queue is full,
 * SL_STATUS_FAIL otherwise
 *****************************************************************************/
sl_status_t sl_wfx_send_request(uint8_t command_id, sl_wfx_generic_message_t *request, uint16_t request_length)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b084      	sub	sp, #16
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	4603      	mov	r3, r0
 80079cc:	6039      	str	r1, [r7, #0]
 80079ce:	71fb      	strb	r3, [r7, #7]
 80079d0:	4613      	mov	r3, r2
 80079d2:	80bb      	strh	r3, [r7, #4]
  sl_status_t result;
  sl_status_t unlock_result;

  result = sl_wfx_host_lock();
 80079d4:	f001 f8bc 	bl	8008b50 <sl_wfx_host_lock>
 80079d8:	60f8      	str	r0, [r7, #12]

  if (result != SL_STATUS_OK) {
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d005      	beq.n	80079ec <sl_wfx_send_request+0x28>
#if (SL_WFX_DEBUG_MASK & SL_WFX_DEBUG_ERROR)
    sl_wfx_host_log("Send request lock error %u\n", result);
 80079e0:	68f9      	ldr	r1, [r7, #12]
 80079e2:	4832      	ldr	r0, [pc, #200]	; (8007aac <sl_wfx_send_request+0xe8>)
 80079e4:	f001 f8a2 	bl	8008b2c <sl_wfx_host_log>
#endif
    //if driver lock is not successful, return
    return result;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	e05a      	b.n	8007aa2 <sl_wfx_send_request+0xde>
  }

  if (sl_wfx_context->used_buffers >= sl_wfx_input_buffer_number) {
 80079ec:	4b30      	ldr	r3, [pc, #192]	; (8007ab0 <sl_wfx_send_request+0xec>)
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 80079f4:	4b2f      	ldr	r3, [pc, #188]	; (8007ab4 <sl_wfx_send_request+0xf0>)
 80079f6:	881b      	ldrh	r3, [r3, #0]
 80079f8:	429a      	cmp	r2, r3
 80079fa:	d304      	bcc.n	8007a06 <sl_wfx_send_request+0x42>
    result = SL_STATUS_WOULD_OVERFLOW;
 80079fc:	231d      	movs	r3, #29
 80079fe:	60fb      	str	r3, [r7, #12]
    SL_WFX_ERROR_CHECK(result);
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d138      	bne.n	8007a78 <sl_wfx_send_request+0xb4>
  }

  // Write the buffer header
  request->header.id     = command_id;
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	79fa      	ldrb	r2, [r7, #7]
 8007a0a:	709a      	strb	r2, [r3, #2]
  request->header.length = sl_wfx_htole16(request_length);
 8007a0c:	88bb      	ldrh	r3, [r7, #4]
 8007a0e:	4618      	mov	r0, r3
 8007a10:	f7ff fd2b 	bl	800746a <uint16_identity>
 8007a14:	4603      	mov	r3, r0
 8007a16:	461a      	mov	r2, r3
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	801a      	strh	r2, [r3, #0]

#ifdef SL_WFX_USE_SECURE_LINK
  result = sl_wfx_secure_link_send(command_id, &request, &request_length);
  SL_WFX_ERROR_CHECK(result);
#endif //SL_WFX_USE_SECURE_LINK
  if (command_id != SL_WFX_SEND_FRAME_REQ_ID
 8007a1c:	79fb      	ldrb	r3, [r7, #7]
 8007a1e:	2b4a      	cmp	r3, #74	; 0x4a
 8007a20:	d00a      	beq.n	8007a38 <sl_wfx_send_request+0x74>
      && command_id != SL_WFX_SHUT_DOWN_REQ_ID) {
 8007a22:	79fb      	ldrb	r3, [r7, #7]
 8007a24:	2b32      	cmp	r3, #50	; 0x32
 8007a26:	d007      	beq.n	8007a38 <sl_wfx_send_request+0x74>
    result = sl_wfx_host_setup_waited_event(command_id);
 8007a28:	79fb      	ldrb	r3, [r7, #7]
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	f000 fece 	bl	80087cc <sl_wfx_host_setup_waited_event>
 8007a30:	60f8      	str	r0, [r7, #12]
    SL_WFX_ERROR_CHECK(result);
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d121      	bne.n	8007a7c <sl_wfx_send_request+0xb8>
  }

  if (result != SL_STATUS_OK) {
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d003      	beq.n	8007a46 <sl_wfx_send_request+0x82>
    sl_wfx_host_log("Send request error %u\r\n", result);
 8007a3e:	68f9      	ldr	r1, [r7, #12]
 8007a40:	481d      	ldr	r0, [pc, #116]	; (8007ab8 <sl_wfx_send_request+0xf4>)
 8007a42:	f001 f873 	bl	8008b2c <sl_wfx_host_log>
  }

  result = sl_wfx_host_transmit_frame(request, request_length);
 8007a46:	88bb      	ldrh	r3, [r7, #4]
 8007a48:	4619      	mov	r1, r3
 8007a4a:	6838      	ldr	r0, [r7, #0]
 8007a4c:	f001 f860 	bl	8008b10 <sl_wfx_host_transmit_frame>
 8007a50:	60f8      	str	r0, [r7, #12]
  SL_WFX_ERROR_CHECK(result);
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d113      	bne.n	8007a80 <sl_wfx_send_request+0xbc>

  if (result != SL_STATUS_OK) {
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d003      	beq.n	8007a66 <sl_wfx_send_request+0xa2>
    sl_wfx_host_log("Send request error %u\r\n", result);
 8007a5e:	68f9      	ldr	r1, [r7, #12]
 8007a60:	4815      	ldr	r0, [pc, #84]	; (8007ab8 <sl_wfx_send_request+0xf4>)
 8007a62:	f001 f863 	bl	8008b2c <sl_wfx_host_log>
  }

  sl_wfx_context->used_buffers++;
 8007a66:	4b12      	ldr	r3, [pc, #72]	; (8007ab0 <sl_wfx_send_request+0xec>)
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 8007a6e:	3201      	adds	r2, #1
 8007a70:	b292      	uxth	r2, r2
 8007a72:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
 8007a76:	e004      	b.n	8007a82 <sl_wfx_send_request+0xbe>
    SL_WFX_ERROR_CHECK(result);
 8007a78:	bf00      	nop
 8007a7a:	e002      	b.n	8007a82 <sl_wfx_send_request+0xbe>
    SL_WFX_ERROR_CHECK(result);
 8007a7c:	bf00      	nop
 8007a7e:	e000      	b.n	8007a82 <sl_wfx_send_request+0xbe>
  SL_WFX_ERROR_CHECK(result);
 8007a80:	bf00      	nop

  error_handler:
  unlock_result = sl_wfx_host_unlock();
 8007a82:	f001 f885 	bl	8008b90 <sl_wfx_host_unlock>
 8007a86:	60b8      	str	r0, [r7, #8]
  if (unlock_result != SL_STATUS_OK) {
 8007a88:	68bb      	ldr	r3, [r7, #8]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d001      	beq.n	8007a92 <sl_wfx_send_request+0xce>
    result = unlock_result;
 8007a8e:	68bb      	ldr	r3, [r7, #8]
 8007a90:	60fb      	str	r3, [r7, #12]
  }

#if (SL_WFX_DEBUG_MASK & SL_WFX_DEBUG_ERROR)
  if (result != SL_STATUS_OK) {
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d003      	beq.n	8007aa0 <sl_wfx_send_request+0xdc>
    sl_wfx_host_log("Send request error %u\r\n", result);
 8007a98:	68f9      	ldr	r1, [r7, #12]
 8007a9a:	4807      	ldr	r0, [pc, #28]	; (8007ab8 <sl_wfx_send_request+0xf4>)
 8007a9c:	f001 f846 	bl	8008b2c <sl_wfx_host_log>
  }
#endif
  return result;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
}
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	3710      	adds	r7, #16
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	bd80      	pop	{r7, pc}
 8007aaa:	bf00      	nop
 8007aac:	0801d43c 	.word	0x0801d43c
 8007ab0:	200009fc 	.word	0x200009fc
 8007ab4:	20000a02 	.word	0x20000a02
 8007ab8:	0801d458 	.word	0x0801d458

08007abc <sl_wfx_receive_frame>:
 * @returns SL_STATUS_OK if the frame has been received correctly,
 * SL_STATUS_WIFI_NO_PACKET_TO_RECEIVE if no frame are pending inside the Wi-Fi chip
 * SL_STATUS_FAIL otherwise
 *****************************************************************************/
sl_status_t sl_wfx_receive_frame(uint16_t *ctrl_reg)
{
 8007abc:	b590      	push	{r4, r7, lr}
 8007abe:	b08b      	sub	sp, #44	; 0x2c
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
  sl_status_t               result;
  sl_status_t               unlock_result;
  sl_wfx_generic_message_t *network_rx_buffer = NULL;
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	60fb      	str	r3, [r7, #12]
  sl_wfx_received_message_type_t message_type;
  sl_wfx_buffer_type_t      buffer_type = SL_WFX_RX_FRAME_BUFFER;
 8007ac8:	2301      	movs	r3, #1
 8007aca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t                  read_length, frame_size;

  result = sl_wfx_host_lock();
 8007ace:	f001 f83f 	bl	8008b50 <sl_wfx_host_lock>
 8007ad2:	6278      	str	r0, [r7, #36]	; 0x24

  if (result != SL_STATUS_OK) {
 8007ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d005      	beq.n	8007ae6 <sl_wfx_receive_frame+0x2a>
#if (SL_WFX_DEBUG_MASK & SL_WFX_DEBUG_ERROR)
    sl_wfx_host_log("Receive frame lock error %u\n", result);
 8007ada:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007adc:	4859      	ldr	r0, [pc, #356]	; (8007c44 <sl_wfx_receive_frame+0x188>)
 8007ade:	f001 f825 	bl	8008b2c <sl_wfx_host_log>
#endif
    //if driver lock is not successful, return immediatly
    return result;
 8007ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ae4:	e0aa      	b.n	8007c3c <sl_wfx_receive_frame+0x180>
  }

  frame_size = (*ctrl_reg & SL_WFX_CONT_NEXT_LEN_MASK) * 2;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	881b      	ldrh	r3, [r3, #0]
 8007aea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007aee:	005b      	lsls	r3, r3, #1
 8007af0:	61fb      	str	r3, [r7, #28]
  /* if frame_size is equal to 0, read the control register to know the frame size */
  if (frame_size == 0) {
 8007af2:	69fb      	ldr	r3, [r7, #28]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d116      	bne.n	8007b26 <sl_wfx_receive_frame+0x6a>
    /* Read the control register */
    result = sl_wfx_reg_read_16(SL_WFX_CONTROL_REG_ID, ctrl_reg);
 8007af8:	6879      	ldr	r1, [r7, #4]
 8007afa:	2001      	movs	r0, #1
 8007afc:	f7ff fa3b 	bl	8006f76 <sl_wfx_reg_read_16>
 8007b00:	6278      	str	r0, [r7, #36]	; 0x24
    SL_WFX_ERROR_CHECK(result);
 8007b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d176      	bne.n	8007bf6 <sl_wfx_receive_frame+0x13a>
    frame_size = (*ctrl_reg & SL_WFX_CONT_NEXT_LEN_MASK) * 2;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	881b      	ldrh	r3, [r3, #0]
 8007b0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007b10:	005b      	lsls	r3, r3, #1
 8007b12:	61fb      	str	r3, [r7, #28]
    /* At this point, if frame_size is equal to zero, nothing to be read by the host */
    if (frame_size == 0) {
 8007b14:	69fb      	ldr	r3, [r7, #28]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d105      	bne.n	8007b26 <sl_wfx_receive_frame+0x6a>
      result = SL_STATUS_WIFI_NO_PACKET_TO_RECEIVE;
 8007b1a:	f640 3305 	movw	r3, #2821	; 0xb05
 8007b1e:	627b      	str	r3, [r7, #36]	; 0x24
      SL_WFX_ERROR_CHECK(result);
 8007b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d169      	bne.n	8007bfa <sl_wfx_receive_frame+0x13e>
    }
  }

  /* retrieve the message type from the control register*/
  message_type = (sl_wfx_received_message_type_t)((*ctrl_reg & SL_WFX_CONT_FRAME_TYPE_INFO) >> SL_WFX_CONT_FRAME_TYPE_OFFSET);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	881b      	ldrh	r3, [r3, #0]
 8007b2a:	0b9b      	lsrs	r3, r3, #14
 8007b2c:	b29b      	uxth	r3, r3
 8007b2e:	76fb      	strb	r3, [r7, #27]

  /* critical : '+SL_WFX_CONT_REGISTER_SIZE' is to read the piggy-back value at
     the end of the control register. */
  read_length = frame_size + SL_WFX_CONT_REGISTER_SIZE;
 8007b30:	69fb      	ldr	r3, [r7, #28]
 8007b32:	3302      	adds	r3, #2
 8007b34:	617b      	str	r3, [r7, #20]

  /* Depending on the message type provided by the control register, allocate a
     control buffer or a ethernet RX frame */
  buffer_type = (message_type == SL_WFX_ETHERNET_DATA_MESSAGE) ? SL_WFX_RX_FRAME_BUFFER : SL_WFX_CONTROL_BUFFER;
 8007b36:	7efb      	ldrb	r3, [r7, #27]
 8007b38:	2b03      	cmp	r3, #3
 8007b3a:	d101      	bne.n	8007b40 <sl_wfx_receive_frame+0x84>
 8007b3c:	2301      	movs	r3, #1
 8007b3e:	e000      	b.n	8007b42 <sl_wfx_receive_frame+0x86>
 8007b40:	2302      	movs	r3, #2
 8007b42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  result = sl_wfx_host_allocate_buffer((void **)&network_rx_buffer,
                                       buffer_type,
                                       SL_WFX_ROUND_UP(read_length, SL_WFX_ROUND_UP_VALUE));
 8007b46:	697b      	ldr	r3, [r7, #20]
 8007b48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  result = sl_wfx_host_allocate_buffer((void **)&network_rx_buffer,
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d004      	beq.n	8007b5a <sl_wfx_receive_frame+0x9e>
                                       SL_WFX_ROUND_UP(read_length, SL_WFX_ROUND_UP_VALUE));
 8007b50:	697b      	ldr	r3, [r7, #20]
 8007b52:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
  result = sl_wfx_host_allocate_buffer((void **)&network_rx_buffer,
 8007b56:	3340      	adds	r3, #64	; 0x40
 8007b58:	e000      	b.n	8007b5c <sl_wfx_receive_frame+0xa0>
 8007b5a:	697b      	ldr	r3, [r7, #20]
 8007b5c:	f897 1023 	ldrb.w	r1, [r7, #35]	; 0x23
 8007b60:	f107 000c 	add.w	r0, r7, #12
 8007b64:	461a      	mov	r2, r3
 8007b66:	f000 ffb3 	bl	8008ad0 <sl_wfx_host_allocate_buffer>
 8007b6a:	6278      	str	r0, [r7, #36]	; 0x24
  SL_WFX_ERROR_CHECK(result);
 8007b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d145      	bne.n	8007bfe <sl_wfx_receive_frame+0x142>

  memset(network_rx_buffer, 0, read_length);
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	697a      	ldr	r2, [r7, #20]
 8007b76:	2100      	movs	r1, #0
 8007b78:	4618      	mov	r0, r3
 8007b7a:	f012 fbc1 	bl	801a300 <memset>

  /* Read the frame from WF200 */
  result = sl_wfx_data_read(network_rx_buffer, read_length);
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	6979      	ldr	r1, [r7, #20]
 8007b82:	4618      	mov	r0, r3
 8007b84:	f7ff fa65 	bl	8007052 <sl_wfx_data_read>
 8007b88:	6278      	str	r0, [r7, #36]	; 0x24
  SL_WFX_ERROR_CHECK(result);
 8007b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d138      	bne.n	8007c02 <sl_wfx_receive_frame+0x146>

  /* if the frame is a confirmation, decrease used_buffers value */
  if ((sl_wfx_context->used_buffers > 0)
 8007b90:	4b2d      	ldr	r3, [pc, #180]	; (8007c48 <sl_wfx_receive_frame+0x18c>)
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d00c      	beq.n	8007bb6 <sl_wfx_receive_frame+0xfa>
      && (!(network_rx_buffer->header.id & SL_WFX_IND_BASE))) {
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	789b      	ldrb	r3, [r3, #2]
 8007ba0:	b25b      	sxtb	r3, r3
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	db07      	blt.n	8007bb6 <sl_wfx_receive_frame+0xfa>
    sl_wfx_context->used_buffers--;
 8007ba6:	4b28      	ldr	r3, [pc, #160]	; (8007c48 <sl_wfx_receive_frame+0x18c>)
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 8007bae:	3a01      	subs	r2, #1
 8007bb0:	b292      	uxth	r2, r2
 8007bb2:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
  }

  /* read the control register value in the piggy back and pass it to the host */
  *ctrl_reg = sl_wfx_unpack_16bit_little_endian(((uint8_t *)network_rx_buffer) + frame_size);
 8007bb6:	68fa      	ldr	r2, [r7, #12]
 8007bb8:	69fb      	ldr	r3, [r7, #28]
 8007bba:	4413      	add	r3, r2
 8007bbc:	781b      	ldrb	r3, [r3, #0]
 8007bbe:	b29a      	uxth	r2, r3
 8007bc0:	68f9      	ldr	r1, [r7, #12]
 8007bc2:	69fb      	ldr	r3, [r7, #28]
 8007bc4:	3301      	adds	r3, #1
 8007bc6:	440b      	add	r3, r1
 8007bc8:	781b      	ldrb	r3, [r3, #0]
 8007bca:	b29b      	uxth	r3, r3
 8007bcc:	021b      	lsls	r3, r3, #8
 8007bce:	b29b      	uxth	r3, r3
 8007bd0:	4313      	orrs	r3, r2
 8007bd2:	b29a      	uxth	r2, r3
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	801a      	strh	r2, [r3, #0]
#ifdef SL_WFX_USE_SECURE_LINK
  result = sl_wfx_secure_link_receive(&network_rx_buffer, read_length);
  SL_WFX_ERROR_CHECK(result);
#endif //SL_WFX_USE_SECURE_LINK

  network_rx_buffer->header.length = sl_wfx_htole16(network_rx_buffer->header.length);
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	881b      	ldrh	r3, [r3, #0]
 8007bdc:	b29b      	uxth	r3, r3
 8007bde:	68fc      	ldr	r4, [r7, #12]
 8007be0:	4618      	mov	r0, r3
 8007be2:	f7ff fc42 	bl	800746a <uint16_identity>
 8007be6:	4603      	mov	r3, r0
 8007be8:	8023      	strh	r3, [r4, #0]

  /* send the information to the host */
  result = sl_wfx_host_post_event(network_rx_buffer);
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	4618      	mov	r0, r3
 8007bee:	f000 fe3f 	bl	8008870 <sl_wfx_host_post_event>
 8007bf2:	6278      	str	r0, [r7, #36]	; 0x24
 8007bf4:	e006      	b.n	8007c04 <sl_wfx_receive_frame+0x148>
    SL_WFX_ERROR_CHECK(result);
 8007bf6:	bf00      	nop
 8007bf8:	e004      	b.n	8007c04 <sl_wfx_receive_frame+0x148>
      SL_WFX_ERROR_CHECK(result);
 8007bfa:	bf00      	nop
 8007bfc:	e002      	b.n	8007c04 <sl_wfx_receive_frame+0x148>
  SL_WFX_ERROR_CHECK(result);
 8007bfe:	bf00      	nop
 8007c00:	e000      	b.n	8007c04 <sl_wfx_receive_frame+0x148>
  SL_WFX_ERROR_CHECK(result);
 8007c02:	bf00      	nop

  error_handler:
  if (network_rx_buffer != NULL) {
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d008      	beq.n	8007c1c <sl_wfx_receive_frame+0x160>
    sl_wfx_free_command_buffer(network_rx_buffer, network_rx_buffer->header.id, buffer_type);
 8007c0a:	68f8      	ldr	r0, [r7, #12]
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	789b      	ldrb	r3, [r3, #2]
 8007c10:	4619      	mov	r1, r3
 8007c12:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007c16:	461a      	mov	r2, r3
 8007c18:	f000 fcb4 	bl	8008584 <sl_wfx_free_command_buffer>
  }
#ifdef SL_WFX_USE_SECURE_LINK
  result = sl_wfx_secure_link_renegotiate();
#endif //SL_WFX_USE_SECURE_LINK

  unlock_result = sl_wfx_host_unlock();
 8007c1c:	f000 ffb8 	bl	8008b90 <sl_wfx_host_unlock>
 8007c20:	6138      	str	r0, [r7, #16]
  if (unlock_result != SL_STATUS_OK) {
 8007c22:	693b      	ldr	r3, [r7, #16]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d001      	beq.n	8007c2c <sl_wfx_receive_frame+0x170>
    result = unlock_result;
 8007c28:	693b      	ldr	r3, [r7, #16]
 8007c2a:	627b      	str	r3, [r7, #36]	; 0x24
  }

#if (SL_WFX_DEBUG_MASK & SL_WFX_DEBUG_ERROR)
  if (result != SL_STATUS_OK) {
 8007c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d003      	beq.n	8007c3a <sl_wfx_receive_frame+0x17e>
    sl_wfx_host_log("Receive frame error %u\n", result);
 8007c32:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007c34:	4805      	ldr	r0, [pc, #20]	; (8007c4c <sl_wfx_receive_frame+0x190>)
 8007c36:	f000 ff79 	bl	8008b2c <sl_wfx_host_log>
  }
#endif
  return result;
 8007c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	372c      	adds	r7, #44	; 0x2c
 8007c40:	46bd      	mov	sp, r7
 8007c42:	bd90      	pop	{r4, r7, pc}
 8007c44:	0801d470 	.word	0x0801d470
 8007c48:	200009fc 	.word	0x200009fc
 8007c4c:	0801d490 	.word	0x0801d490

08007c50 <sl_wfx_enable_irq>:
 * @return SL_STATUS_OK if the irq is enabled correctly, SL_STATUS_FAIL otherwise
 *
 * @note Enable the host irq and set the Wi-Fi chip register accordingly
 *****************************************************************************/
sl_status_t sl_wfx_enable_irq(void)
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b082      	sub	sp, #8
 8007c54:	af00      	add	r7, sp, #0
  uint32_t    value32;
  sl_status_t result;

  result = sl_wfx_host_enable_platform_interrupt();
 8007c56:	f001 fc65 	bl	8009524 <sl_wfx_host_enable_platform_interrupt>
 8007c5a:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(result);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d115      	bne.n	8007c8e <sl_wfx_enable_irq+0x3e>

  result = sl_wfx_reg_read_32(SL_WFX_CONFIG_REG_ID, &value32);
 8007c62:	463b      	mov	r3, r7
 8007c64:	4619      	mov	r1, r3
 8007c66:	2000      	movs	r0, #0
 8007c68:	f7ff f9c2 	bl	8006ff0 <sl_wfx_reg_read_32>
 8007c6c:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(result);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d10e      	bne.n	8007c92 <sl_wfx_enable_irq+0x42>

  value32 |= SL_WFX_CONFIG_DATA_IRQ_ENABLE;
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c7a:	603b      	str	r3, [r7, #0]

  result = sl_wfx_reg_write_32(SL_WFX_CONFIG_REG_ID, value32);
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	4619      	mov	r1, r3
 8007c80:	2000      	movs	r0, #0
 8007c82:	f7ff f9cf 	bl	8007024 <sl_wfx_reg_write_32>
 8007c86:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(result);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2b00      	cmp	r3, #0

  error_handler:
 8007c8c:	e002      	b.n	8007c94 <sl_wfx_enable_irq+0x44>
  SL_WFX_ERROR_CHECK(result);
 8007c8e:	bf00      	nop
 8007c90:	e000      	b.n	8007c94 <sl_wfx_enable_irq+0x44>
  SL_WFX_ERROR_CHECK(result);
 8007c92:	bf00      	nop
  return result;
 8007c94:	687b      	ldr	r3, [r7, #4]
}
 8007c96:	4618      	mov	r0, r3
 8007c98:	3708      	adds	r7, #8
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	bd80      	pop	{r7, pc}

08007c9e <sl_wfx_disable_irq>:
 * @return SL_STATUS_OK if the irq is disabled correctly, SL_STATUS_FAIL otherwise
 *
 * @note Disable the host irq and set the Wi-Fi chip register accordingly
 *****************************************************************************/
sl_status_t sl_wfx_disable_irq(void)
{
 8007c9e:	b580      	push	{r7, lr}
 8007ca0:	b082      	sub	sp, #8
 8007ca2:	af00      	add	r7, sp, #0
  uint32_t    value32;
  sl_status_t result;

  result = sl_wfx_reg_read_32(SL_WFX_CONFIG_REG_ID, &value32);
 8007ca4:	463b      	mov	r3, r7
 8007ca6:	4619      	mov	r1, r3
 8007ca8:	2000      	movs	r0, #0
 8007caa:	f7ff f9a1 	bl	8006ff0 <sl_wfx_reg_read_32>
 8007cae:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(result);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d112      	bne.n	8007cdc <sl_wfx_disable_irq+0x3e>

  value32 &= ~SL_WFX_CONFIG_DATA_IRQ_ENABLE;
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007cbc:	603b      	str	r3, [r7, #0]

  result = sl_wfx_reg_write_32(SL_WFX_CONFIG_REG_ID, value32);
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	4619      	mov	r1, r3
 8007cc2:	2000      	movs	r0, #0
 8007cc4:	f7ff f9ae 	bl	8007024 <sl_wfx_reg_write_32>
 8007cc8:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(result);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d107      	bne.n	8007ce0 <sl_wfx_disable_irq+0x42>

  result = sl_wfx_host_disable_platform_interrupt();
 8007cd0:	f001 fc35 	bl	800953e <sl_wfx_host_disable_platform_interrupt>
 8007cd4:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(result);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2b00      	cmp	r3, #0

  error_handler:
 8007cda:	e002      	b.n	8007ce2 <sl_wfx_disable_irq+0x44>
  SL_WFX_ERROR_CHECK(result);
 8007cdc:	bf00      	nop
 8007cde:	e000      	b.n	8007ce2 <sl_wfx_disable_irq+0x44>
  SL_WFX_ERROR_CHECK(result);
 8007ce0:	bf00      	nop
  return result;
 8007ce2:	687b      	ldr	r3, [r7, #4]
}
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	3708      	adds	r7, #8
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	bd80      	pop	{r7, pc}

08007cec <sl_wfx_set_access_mode_message>:
 *
 * @return SL_STATUS_OK if the message mode is enabled correctly,
 * SL_STATUS_FAIL otherwise
 *****************************************************************************/
sl_status_t sl_wfx_set_access_mode_message(void)
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b082      	sub	sp, #8
 8007cf0:	af00      	add	r7, sp, #0
  /* Configure device for MESSAGE MODE */
  sl_status_t result;
  uint32_t    val32;

  result = sl_wfx_reg_read_32(SL_WFX_CONFIG_REG_ID, &val32);
 8007cf2:	463b      	mov	r3, r7
 8007cf4:	4619      	mov	r1, r3
 8007cf6:	2000      	movs	r0, #0
 8007cf8:	f7ff f97a 	bl	8006ff0 <sl_wfx_reg_read_32>
 8007cfc:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(result);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d10a      	bne.n	8007d1a <sl_wfx_set_access_mode_message+0x2e>

  result = sl_wfx_reg_write_32(SL_WFX_CONFIG_REG_ID, val32 & ~SL_WFX_CONFIG_ACCESS_MODE_BIT);
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007d0a:	4619      	mov	r1, r3
 8007d0c:	2000      	movs	r0, #0
 8007d0e:	f7ff f989 	bl	8007024 <sl_wfx_reg_write_32>
 8007d12:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(result);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2b00      	cmp	r3, #0

  error_handler:
 8007d18:	e000      	b.n	8007d1c <sl_wfx_set_access_mode_message+0x30>
  SL_WFX_ERROR_CHECK(result);
 8007d1a:	bf00      	nop
  return result;
 8007d1c:	687b      	ldr	r3, [r7, #4]
}
 8007d1e:	4618      	mov	r0, r3
 8007d20:	3708      	adds	r7, #8
 8007d22:	46bd      	mov	sp, r7
 8007d24:	bd80      	pop	{r7, pc}
	...

08007d28 <sl_wfx_init_chip>:
 * @brief Init the Wi-Fi chip
 *
 * @return SL_STATUS_OK if the initialization is successful, SL_STATUS_FAIL otherwise
 *****************************************************************************/
static sl_status_t sl_wfx_init_chip(void)
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b084      	sub	sp, #16
 8007d2c:	af00      	add	r7, sp, #0
  sl_status_t result;
  uint32_t    value32;
  uint16_t    value16;

  result = sl_wfx_reg_read_32(SL_WFX_CONFIG_REG_ID, &value32);
 8007d2e:	1d3b      	adds	r3, r7, #4
 8007d30:	4619      	mov	r1, r3
 8007d32:	2000      	movs	r0, #0
 8007d34:	f7ff f95c 	bl	8006ff0 <sl_wfx_reg_read_32>
 8007d38:	60f8      	str	r0, [r7, #12]
  SL_WFX_ERROR_CHECK(result);
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d177      	bne.n	8007e30 <sl_wfx_init_chip+0x108>

  /* General purpose registers setting */
  result = sl_wfx_reg_write_32(SL_WFX_TSET_GEN_R_W_REG_ID, 0x07208775);
 8007d40:	4949      	ldr	r1, [pc, #292]	; (8007e68 <sl_wfx_init_chip+0x140>)
 8007d42:	2006      	movs	r0, #6
 8007d44:	f7ff f96e 	bl	8007024 <sl_wfx_reg_write_32>
 8007d48:	60f8      	str	r0, [r7, #12]
  SL_WFX_ERROR_CHECK(result);
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d171      	bne.n	8007e34 <sl_wfx_init_chip+0x10c>
  result = sl_wfx_reg_write_32(SL_WFX_TSET_GEN_R_W_REG_ID, 0x082ec020);
 8007d50:	4946      	ldr	r1, [pc, #280]	; (8007e6c <sl_wfx_init_chip+0x144>)
 8007d52:	2006      	movs	r0, #6
 8007d54:	f7ff f966 	bl	8007024 <sl_wfx_reg_write_32>
 8007d58:	60f8      	str	r0, [r7, #12]
  SL_WFX_ERROR_CHECK(result);
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d16b      	bne.n	8007e38 <sl_wfx_init_chip+0x110>
  result = sl_wfx_reg_write_32(SL_WFX_TSET_GEN_R_W_REG_ID, 0x093c3c3c);
 8007d60:	4943      	ldr	r1, [pc, #268]	; (8007e70 <sl_wfx_init_chip+0x148>)
 8007d62:	2006      	movs	r0, #6
 8007d64:	f7ff f95e 	bl	8007024 <sl_wfx_reg_write_32>
 8007d68:	60f8      	str	r0, [r7, #12]
  SL_WFX_ERROR_CHECK(result);
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d165      	bne.n	8007e3c <sl_wfx_init_chip+0x114>
  result = sl_wfx_reg_write_32(SL_WFX_TSET_GEN_R_W_REG_ID, 0x0b322c44);
 8007d70:	4940      	ldr	r1, [pc, #256]	; (8007e74 <sl_wfx_init_chip+0x14c>)
 8007d72:	2006      	movs	r0, #6
 8007d74:	f7ff f956 	bl	8007024 <sl_wfx_reg_write_32>
 8007d78:	60f8      	str	r0, [r7, #12]
  SL_WFX_ERROR_CHECK(result);
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d15f      	bne.n	8007e40 <sl_wfx_init_chip+0x118>
  result = sl_wfx_reg_write_32(SL_WFX_TSET_GEN_R_W_REG_ID, 0x0ca06497);
 8007d80:	493d      	ldr	r1, [pc, #244]	; (8007e78 <sl_wfx_init_chip+0x150>)
 8007d82:	2006      	movs	r0, #6
 8007d84:	f7ff f94e 	bl	8007024 <sl_wfx_reg_write_32>
 8007d88:	60f8      	str	r0, [r7, #12]
  SL_WFX_ERROR_CHECK(result);
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d159      	bne.n	8007e44 <sl_wfx_init_chip+0x11c>

  /* set wake-up bit */
  result = sl_wfx_reg_read_16(SL_WFX_CONTROL_REG_ID, &value16);
 8007d90:	1cbb      	adds	r3, r7, #2
 8007d92:	4619      	mov	r1, r3
 8007d94:	2001      	movs	r0, #1
 8007d96:	f7ff f8ee 	bl	8006f76 <sl_wfx_reg_read_16>
 8007d9a:	60f8      	str	r0, [r7, #12]
  SL_WFX_ERROR_CHECK(result);
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d152      	bne.n	8007e48 <sl_wfx_init_chip+0x120>
  value16 |= SL_WFX_CONT_WUP_BIT;
 8007da2:	887b      	ldrh	r3, [r7, #2]
 8007da4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007da8:	b29b      	uxth	r3, r3
 8007daa:	807b      	strh	r3, [r7, #2]
  result = sl_wfx_reg_write_16(SL_WFX_CONTROL_REG_ID, value16);
 8007dac:	887b      	ldrh	r3, [r7, #2]
 8007dae:	4619      	mov	r1, r3
 8007db0:	2001      	movs	r0, #1
 8007db2:	f7ff f8fd 	bl	8006fb0 <sl_wfx_reg_write_16>
 8007db6:	60f8      	str	r0, [r7, #12]
  SL_WFX_ERROR_CHECK(result);
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d146      	bne.n	8007e4c <sl_wfx_init_chip+0x124>

  /* .. and wait for wake-up */
  for (uint32_t i = 0; i < 200; ++i) {
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	60bb      	str	r3, [r7, #8]
 8007dc2:	e013      	b.n	8007dec <sl_wfx_init_chip+0xc4>
    result = sl_wfx_reg_read_16(SL_WFX_CONTROL_REG_ID, &value16);
 8007dc4:	1cbb      	adds	r3, r7, #2
 8007dc6:	4619      	mov	r1, r3
 8007dc8:	2001      	movs	r0, #1
 8007dca:	f7ff f8d4 	bl	8006f76 <sl_wfx_reg_read_16>
 8007dce:	60f8      	str	r0, [r7, #12]
    SL_WFX_ERROR_CHECK(result);
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d13c      	bne.n	8007e50 <sl_wfx_init_chip+0x128>

    if ((value16 & SL_WFX_CONT_RDY_BIT) == SL_WFX_CONT_RDY_BIT) {
 8007dd6:	887b      	ldrh	r3, [r7, #2]
 8007dd8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d109      	bne.n	8007df4 <sl_wfx_init_chip+0xcc>
      break;
    } else {
      sl_wfx_host_wait(1);
 8007de0:	2001      	movs	r0, #1
 8007de2:	f000 fd39 	bl	8008858 <sl_wfx_host_wait>
  for (uint32_t i = 0; i < 200; ++i) {
 8007de6:	68bb      	ldr	r3, [r7, #8]
 8007de8:	3301      	adds	r3, #1
 8007dea:	60bb      	str	r3, [r7, #8]
 8007dec:	68bb      	ldr	r3, [r7, #8]
 8007dee:	2bc7      	cmp	r3, #199	; 0xc7
 8007df0:	d9e8      	bls.n	8007dc4 <sl_wfx_init_chip+0x9c>
 8007df2:	e000      	b.n	8007df6 <sl_wfx_init_chip+0xce>
      break;
 8007df4:	bf00      	nop
    }
  }

  if ((value16 & SL_WFX_CONT_RDY_BIT) != SL_WFX_CONT_RDY_BIT) {
 8007df6:	887b      	ldrh	r3, [r7, #2]
 8007df8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d104      	bne.n	8007e0a <sl_wfx_init_chip+0xe2>
    result = SL_STATUS_TIMEOUT;
 8007e00:	2307      	movs	r3, #7
 8007e02:	60fb      	str	r3, [r7, #12]
    SL_WFX_ERROR_CHECK(result);
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d124      	bne.n	8007e54 <sl_wfx_init_chip+0x12c>
  }

  /* check for access mode bit */
  result = sl_wfx_reg_read_32(SL_WFX_CONFIG_REG_ID, &value32);
 8007e0a:	1d3b      	adds	r3, r7, #4
 8007e0c:	4619      	mov	r1, r3
 8007e0e:	2000      	movs	r0, #0
 8007e10:	f7ff f8ee 	bl	8006ff0 <sl_wfx_reg_read_32>
 8007e14:	60f8      	str	r0, [r7, #12]
  SL_WFX_ERROR_CHECK(result);
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d11d      	bne.n	8007e58 <sl_wfx_init_chip+0x130>
  if ((value32 & SL_WFX_CONFIG_ACCESS_MODE_BIT) == 0) {
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d11a      	bne.n	8007e5c <sl_wfx_init_chip+0x134>
    result = SL_STATUS_FAIL;
 8007e26:	2301      	movs	r3, #1
 8007e28:	60fb      	str	r3, [r7, #12]
    SL_WFX_ERROR_CHECK(result);
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	2b00      	cmp	r3, #0
  }

  error_handler:
 8007e2e:	e015      	b.n	8007e5c <sl_wfx_init_chip+0x134>
  SL_WFX_ERROR_CHECK(result);
 8007e30:	bf00      	nop
 8007e32:	e014      	b.n	8007e5e <sl_wfx_init_chip+0x136>
  SL_WFX_ERROR_CHECK(result);
 8007e34:	bf00      	nop
 8007e36:	e012      	b.n	8007e5e <sl_wfx_init_chip+0x136>
  SL_WFX_ERROR_CHECK(result);
 8007e38:	bf00      	nop
 8007e3a:	e010      	b.n	8007e5e <sl_wfx_init_chip+0x136>
  SL_WFX_ERROR_CHECK(result);
 8007e3c:	bf00      	nop
 8007e3e:	e00e      	b.n	8007e5e <sl_wfx_init_chip+0x136>
  SL_WFX_ERROR_CHECK(result);
 8007e40:	bf00      	nop
 8007e42:	e00c      	b.n	8007e5e <sl_wfx_init_chip+0x136>
  SL_WFX_ERROR_CHECK(result);
 8007e44:	bf00      	nop
 8007e46:	e00a      	b.n	8007e5e <sl_wfx_init_chip+0x136>
  SL_WFX_ERROR_CHECK(result);
 8007e48:	bf00      	nop
 8007e4a:	e008      	b.n	8007e5e <sl_wfx_init_chip+0x136>
  SL_WFX_ERROR_CHECK(result);
 8007e4c:	bf00      	nop
 8007e4e:	e006      	b.n	8007e5e <sl_wfx_init_chip+0x136>
    SL_WFX_ERROR_CHECK(result);
 8007e50:	bf00      	nop
 8007e52:	e004      	b.n	8007e5e <sl_wfx_init_chip+0x136>
    SL_WFX_ERROR_CHECK(result);
 8007e54:	bf00      	nop
 8007e56:	e002      	b.n	8007e5e <sl_wfx_init_chip+0x136>
  SL_WFX_ERROR_CHECK(result);
 8007e58:	bf00      	nop
 8007e5a:	e000      	b.n	8007e5e <sl_wfx_init_chip+0x136>
  error_handler:
 8007e5c:	bf00      	nop
  return result;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
}
 8007e60:	4618      	mov	r0, r3
 8007e62:	3710      	adds	r7, #16
 8007e64:	46bd      	mov	sp, r7
 8007e66:	bd80      	pop	{r7, pc}
 8007e68:	07208775 	.word	0x07208775
 8007e6c:	082ec020 	.word	0x082ec020
 8007e70:	093c3c3c 	.word	0x093c3c3c
 8007e74:	0b322c44 	.word	0x0b322c44
 8007e78:	0ca06497 	.word	0x0ca06497

08007e7c <sl_wfx_download_run_bootloader>:
 * @brief run the Wi-Fi chip bootloader
 *
 * @return SL_STATUS_OK if the bootloader runs correctly, SL_STATUS_FAIL otherwise
 *****************************************************************************/
static sl_status_t sl_wfx_download_run_bootloader(void)
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b082      	sub	sp, #8
 8007e80:	af00      	add	r7, sp, #0
  sl_status_t result;
  uint32_t    value32;

  result = sl_wfx_apb_read_32(ADDR_DWL_CTRL_AREA_NCP_STATUS, &value32);
 8007e82:	463b      	mov	r3, r7
 8007e84:	4619      	mov	r1, r3
 8007e86:	4823      	ldr	r0, [pc, #140]	; (8007f14 <sl_wfx_download_run_bootloader+0x98>)
 8007e88:	f7ff f93c 	bl	8007104 <sl_wfx_apb_read_32>
 8007e8c:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(result);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d12f      	bne.n	8007ef4 <sl_wfx_download_run_bootloader+0x78>

  /* release CPU from reset and enable clock */
  result = sl_wfx_reg_read_32(SL_WFX_CONFIG_REG_ID, &value32);
 8007e94:	463b      	mov	r3, r7
 8007e96:	4619      	mov	r1, r3
 8007e98:	2000      	movs	r0, #0
 8007e9a:	f7ff f8a9 	bl	8006ff0 <sl_wfx_reg_read_32>
 8007e9e:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(result);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d128      	bne.n	8007ef8 <sl_wfx_download_run_bootloader+0x7c>
  value32 &= ~(SL_WFX_CONFIG_CPU_RESET_BIT | SL_WFX_CONFIG_CPU_CLK_DIS_BIT);
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	f423 43a0 	bic.w	r3, r3, #20480	; 0x5000
 8007eac:	603b      	str	r3, [r7, #0]
  result = sl_wfx_reg_write_32(SL_WFX_CONFIG_REG_ID, value32);
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	4619      	mov	r1, r3
 8007eb2:	2000      	movs	r0, #0
 8007eb4:	f7ff f8b6 	bl	8007024 <sl_wfx_reg_write_32>
 8007eb8:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(result);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d11d      	bne.n	8007efc <sl_wfx_download_run_bootloader+0x80>

  /* Testing SRAM access */
  result = sl_wfx_apb_write_32(ADDR_DOWNLOAD_FIFO_BASE, 0x23abc88e);
 8007ec0:	4915      	ldr	r1, [pc, #84]	; (8007f18 <sl_wfx_download_run_bootloader+0x9c>)
 8007ec2:	4816      	ldr	r0, [pc, #88]	; (8007f1c <sl_wfx_download_run_bootloader+0xa0>)
 8007ec4:	f7ff f907 	bl	80070d6 <sl_wfx_apb_write_32>
 8007ec8:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(result);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d117      	bne.n	8007f00 <sl_wfx_download_run_bootloader+0x84>

  /* Check if the write command is successful */
  result = sl_wfx_apb_read_32(ADDR_DOWNLOAD_FIFO_BASE, &value32);
 8007ed0:	463b      	mov	r3, r7
 8007ed2:	4619      	mov	r1, r3
 8007ed4:	4811      	ldr	r0, [pc, #68]	; (8007f1c <sl_wfx_download_run_bootloader+0xa0>)
 8007ed6:	f7ff f915 	bl	8007104 <sl_wfx_apb_read_32>
 8007eda:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(result);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d110      	bne.n	8007f04 <sl_wfx_download_run_bootloader+0x88>
  if (value32 != 0x23abc88e) {
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	4a0c      	ldr	r2, [pc, #48]	; (8007f18 <sl_wfx_download_run_bootloader+0x9c>)
 8007ee6:	4293      	cmp	r3, r2
 8007ee8:	d00e      	beq.n	8007f08 <sl_wfx_download_run_bootloader+0x8c>
    result = SL_STATUS_FAIL;
 8007eea:	2301      	movs	r3, #1
 8007eec:	607b      	str	r3, [r7, #4]
    SL_WFX_ERROR_CHECK(result);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	2b00      	cmp	r3, #0
  }

  error_handler:
 8007ef2:	e009      	b.n	8007f08 <sl_wfx_download_run_bootloader+0x8c>
  SL_WFX_ERROR_CHECK(result);
 8007ef4:	bf00      	nop
 8007ef6:	e008      	b.n	8007f0a <sl_wfx_download_run_bootloader+0x8e>
  SL_WFX_ERROR_CHECK(result);
 8007ef8:	bf00      	nop
 8007efa:	e006      	b.n	8007f0a <sl_wfx_download_run_bootloader+0x8e>
  SL_WFX_ERROR_CHECK(result);
 8007efc:	bf00      	nop
 8007efe:	e004      	b.n	8007f0a <sl_wfx_download_run_bootloader+0x8e>
  SL_WFX_ERROR_CHECK(result);
 8007f00:	bf00      	nop
 8007f02:	e002      	b.n	8007f0a <sl_wfx_download_run_bootloader+0x8e>
  SL_WFX_ERROR_CHECK(result);
 8007f04:	bf00      	nop
 8007f06:	e000      	b.n	8007f0a <sl_wfx_download_run_bootloader+0x8e>
  error_handler:
 8007f08:	bf00      	nop
  return result;
 8007f0a:	687b      	ldr	r3, [r7, #4]
}
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	3708      	adds	r7, #8
 8007f10:	46bd      	mov	sp, r7
 8007f12:	bd80      	pop	{r7, pc}
 8007f14:	0900c010 	.word	0x0900c010
 8007f18:	23abc88e 	.word	0x23abc88e
 8007f1c:	09004000 	.word	0x09004000

08007f20 <sl_wfx_download_run_firmware>:
 * SL_STATUS_WIFI_INVALID_KEY if the firmware keyset does not match the chip one,
 * SL_STATUS_WIFI_FIRMWARE_DOWNLOAD_TIMEOUT or SL_STATUS_TIMEOUT if the process times out,
 * SL_STATUS_FAIL otherwise
 *****************************************************************************/
static sl_status_t sl_wfx_download_run_firmware(void)
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b08c      	sub	sp, #48	; 0x30
 8007f24:	af00      	add	r7, sp, #0
  uint32_t       i;
  uint32_t       value32;
  uint32_t       image_length;
  uint32_t       block;
  uint32_t       num_blocks;
  uint32_t       put = 0;
 8007f26:	2300      	movs	r3, #0
 8007f28:	623b      	str	r3, [r7, #32]
  uint32_t       get = 0;
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	60bb      	str	r3, [r7, #8]
  const uint8_t *buffer;

  result = sl_wfx_host_init();
 8007f2e:	f000 fb3b 	bl	80085a8 <sl_wfx_host_init>
 8007f32:	62f8      	str	r0, [r7, #44]	; 0x2c
  SL_WFX_ERROR_CHECK(result);
 8007f34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	f040 8185 	bne.w	8008246 <sl_wfx_download_run_firmware+0x326>

  result = sl_wfx_apb_write_32(ADDR_DWL_CTRL_AREA_HOST_STATUS, HOST_STATE_NOT_READY);
 8007f3c:	4984      	ldr	r1, [pc, #528]	; (8008150 <sl_wfx_download_run_firmware+0x230>)
 8007f3e:	4885      	ldr	r0, [pc, #532]	; (8008154 <sl_wfx_download_run_firmware+0x234>)
 8007f40:	f7ff f8c9 	bl	80070d6 <sl_wfx_apb_write_32>
 8007f44:	62f8      	str	r0, [r7, #44]	; 0x2c
  SL_WFX_ERROR_CHECK(result);
 8007f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	f040 817e 	bne.w	800824a <sl_wfx_download_run_firmware+0x32a>
  result = sl_wfx_apb_write_32(ADDR_DWL_CTRL_AREA_PUT, 0);
 8007f4e:	2100      	movs	r1, #0
 8007f50:	4881      	ldr	r0, [pc, #516]	; (8008158 <sl_wfx_download_run_firmware+0x238>)
 8007f52:	f7ff f8c0 	bl	80070d6 <sl_wfx_apb_write_32>
 8007f56:	62f8      	str	r0, [r7, #44]	; 0x2c
  SL_WFX_ERROR_CHECK(result);
 8007f58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	f040 8177 	bne.w	800824e <sl_wfx_download_run_firmware+0x32e>
  result = sl_wfx_apb_write_32(ADDR_DWL_CTRL_AREA_GET, 0);
 8007f60:	2100      	movs	r1, #0
 8007f62:	487e      	ldr	r0, [pc, #504]	; (800815c <sl_wfx_download_run_firmware+0x23c>)
 8007f64:	f7ff f8b7 	bl	80070d6 <sl_wfx_apb_write_32>
 8007f68:	62f8      	str	r0, [r7, #44]	; 0x2c
  SL_WFX_ERROR_CHECK(result);
 8007f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	f040 8170 	bne.w	8008252 <sl_wfx_download_run_firmware+0x332>
  result = sl_wfx_apb_write_32(ADDR_DWL_CTRL_AREA_HOST_STATUS, HOST_STATE_READY);
 8007f72:	497b      	ldr	r1, [pc, #492]	; (8008160 <sl_wfx_download_run_firmware+0x240>)
 8007f74:	4877      	ldr	r0, [pc, #476]	; (8008154 <sl_wfx_download_run_firmware+0x234>)
 8007f76:	f7ff f8ae 	bl	80070d6 <sl_wfx_apb_write_32>
 8007f7a:	62f8      	str	r0, [r7, #44]	; 0x2c
  SL_WFX_ERROR_CHECK(result);
 8007f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	f040 8169 	bne.w	8008256 <sl_wfx_download_run_firmware+0x336>

  // wait for INFO_READ state
  result = sl_wfx_poll_for_value(ADDR_DWL_CTRL_AREA_NCP_STATUS, NCP_STATE_INFO_READY, 100);
 8007f84:	2264      	movs	r2, #100	; 0x64
 8007f86:	4977      	ldr	r1, [pc, #476]	; (8008164 <sl_wfx_download_run_firmware+0x244>)
 8007f88:	4877      	ldr	r0, [pc, #476]	; (8008168 <sl_wfx_download_run_firmware+0x248>)
 8007f8a:	f000 f9a3 	bl	80082d4 <sl_wfx_poll_for_value>
 8007f8e:	62f8      	str	r0, [r7, #44]	; 0x2c
  SL_WFX_ERROR_CHECK(result);
 8007f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	f040 8161 	bne.w	800825a <sl_wfx_download_run_firmware+0x33a>

  // read info
  result = sl_wfx_apb_read_32(0x0900C080, &value32);
 8007f98:	f107 0310 	add.w	r3, r7, #16
 8007f9c:	4619      	mov	r1, r3
 8007f9e:	4873      	ldr	r0, [pc, #460]	; (800816c <sl_wfx_download_run_firmware+0x24c>)
 8007fa0:	f7ff f8b0 	bl	8007104 <sl_wfx_apb_read_32>
 8007fa4:	62f8      	str	r0, [r7, #44]	; 0x2c
  SL_WFX_ERROR_CHECK(result);
 8007fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	f040 8158 	bne.w	800825e <sl_wfx_download_run_firmware+0x33e>

  // retrieve WF200 keyset
  result = sl_wfx_apb_read_32(SL_WFX_PTE_INFO + 12, &value32);
 8007fae:	f107 0310 	add.w	r3, r7, #16
 8007fb2:	4619      	mov	r1, r3
 8007fb4:	486e      	ldr	r0, [pc, #440]	; (8008170 <sl_wfx_download_run_firmware+0x250>)
 8007fb6:	f7ff f8a5 	bl	8007104 <sl_wfx_apb_read_32>
 8007fba:	62f8      	str	r0, [r7, #44]	; 0x2c
  SL_WFX_ERROR_CHECK(result);
 8007fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	f040 814f 	bne.w	8008262 <sl_wfx_download_run_firmware+0x342>
  encryption_keyset = (value32 >> 8);
 8007fc4:	693b      	ldr	r3, [r7, #16]
 8007fc6:	0a1b      	lsrs	r3, r3, #8
 8007fc8:	b2da      	uxtb	r2, r3
 8007fca:	4b6a      	ldr	r3, [pc, #424]	; (8008174 <sl_wfx_download_run_firmware+0x254>)
 8007fcc:	701a      	strb	r2, [r3, #0]

  // report that info is read
  result = sl_wfx_apb_write_32(ADDR_DWL_CTRL_AREA_HOST_STATUS, HOST_STATE_HOST_INFO_READ);
 8007fce:	496a      	ldr	r1, [pc, #424]	; (8008178 <sl_wfx_download_run_firmware+0x258>)
 8007fd0:	4860      	ldr	r0, [pc, #384]	; (8008154 <sl_wfx_download_run_firmware+0x234>)
 8007fd2:	f7ff f880 	bl	80070d6 <sl_wfx_apb_write_32>
 8007fd6:	62f8      	str	r0, [r7, #44]	; 0x2c
  SL_WFX_ERROR_CHECK(result);
 8007fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	f040 8143 	bne.w	8008266 <sl_wfx_download_run_firmware+0x346>

  // wait for READY state
  result = sl_wfx_poll_for_value(ADDR_DWL_CTRL_AREA_NCP_STATUS, NCP_STATE_READY, 100);
 8007fe0:	2264      	movs	r2, #100	; 0x64
 8007fe2:	495f      	ldr	r1, [pc, #380]	; (8008160 <sl_wfx_download_run_firmware+0x240>)
 8007fe4:	4860      	ldr	r0, [pc, #384]	; (8008168 <sl_wfx_download_run_firmware+0x248>)
 8007fe6:	f000 f975 	bl	80082d4 <sl_wfx_poll_for_value>
 8007fea:	62f8      	str	r0, [r7, #44]	; 0x2c
  SL_WFX_ERROR_CHECK(result);
 8007fec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	f040 813b 	bne.w	800826a <sl_wfx_download_run_firmware+0x34a>

  // SB misc initialization. Work around for chips < A2.
  result = sl_wfx_apb_write_32(ADDR_DOWNLOAD_FIFO_BASE, 0xFFFFFFFF);
 8007ff4:	f04f 31ff 	mov.w	r1, #4294967295
 8007ff8:	4860      	ldr	r0, [pc, #384]	; (800817c <sl_wfx_download_run_firmware+0x25c>)
 8007ffa:	f7ff f86c 	bl	80070d6 <sl_wfx_apb_write_32>
 8007ffe:	62f8      	str	r0, [r7, #44]	; 0x2c
  SL_WFX_ERROR_CHECK(result);
 8008000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008002:	2b00      	cmp	r3, #0
 8008004:	f040 8133 	bne.w	800826e <sl_wfx_download_run_firmware+0x34e>

  // write image length
  sl_wfx_host_get_firmware_size(&image_length);
 8008008:	f107 030c 	add.w	r3, r7, #12
 800800c:	4618      	mov	r0, r3
 800800e:	f000 fb21 	bl	8008654 <sl_wfx_host_get_firmware_size>
  result = sl_wfx_apb_write_32(ADDR_DWL_CTRL_AREA_IMAGE_SIZE, image_length - FW_HASH_SIZE - FW_SIGNATURE_SIZE - FW_KEYSET_SIZE);
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	3b50      	subs	r3, #80	; 0x50
 8008016:	4619      	mov	r1, r3
 8008018:	4859      	ldr	r0, [pc, #356]	; (8008180 <sl_wfx_download_run_firmware+0x260>)
 800801a:	f7ff f85c 	bl	80070d6 <sl_wfx_apb_write_32>
 800801e:	62f8      	str	r0, [r7, #44]	; 0x2c
  SL_WFX_ERROR_CHECK(result);
 8008020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008022:	2b00      	cmp	r3, #0
 8008024:	f040 8125 	bne.w	8008272 <sl_wfx_download_run_firmware+0x352>

  // get firmware keyset, which is the first FW_KEYSET_SIZE of given image
  result = sl_wfx_host_get_firmware_data(&buffer, FW_KEYSET_SIZE);
 8008028:	1d3b      	adds	r3, r7, #4
 800802a:	2108      	movs	r1, #8
 800802c:	4618      	mov	r0, r3
 800802e:	f000 faf5 	bl	800861c <sl_wfx_host_get_firmware_data>
 8008032:	62f8      	str	r0, [r7, #44]	; 0x2c
  SL_WFX_ERROR_CHECK(result);
 8008034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008036:	2b00      	cmp	r3, #0
 8008038:	f040 811d 	bne.w	8008276 <sl_wfx_download_run_firmware+0x356>

  // check if the firmware keyset corresponds to the chip keyset
  result = sl_wfx_compare_keysets(encryption_keyset, (char *)buffer);
 800803c:	4b4d      	ldr	r3, [pc, #308]	; (8008174 <sl_wfx_download_run_firmware+0x254>)
 800803e:	781b      	ldrb	r3, [r3, #0]
 8008040:	687a      	ldr	r2, [r7, #4]
 8008042:	4611      	mov	r1, r2
 8008044:	4618      	mov	r0, r3
 8008046:	f000 f976 	bl	8008336 <sl_wfx_compare_keysets>
 800804a:	62f8      	str	r0, [r7, #44]	; 0x2c
  SL_WFX_ERROR_CHECK(result);
 800804c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800804e:	2b00      	cmp	r3, #0
 8008050:	f040 8113 	bne.w	800827a <sl_wfx_download_run_firmware+0x35a>

  // write image signature, which is the next FW_SIGNATURE_SIZE of given image
  result = sl_wfx_host_get_firmware_data(&buffer, FW_SIGNATURE_SIZE);
 8008054:	1d3b      	adds	r3, r7, #4
 8008056:	2140      	movs	r1, #64	; 0x40
 8008058:	4618      	mov	r0, r3
 800805a:	f000 fadf 	bl	800861c <sl_wfx_host_get_firmware_data>
 800805e:	62f8      	str	r0, [r7, #44]	; 0x2c
  SL_WFX_ERROR_CHECK(result);
 8008060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008062:	2b00      	cmp	r3, #0
 8008064:	f040 810b 	bne.w	800827e <sl_wfx_download_run_firmware+0x35e>
  result = sl_wfx_apb_write(ADDR_DWL_CTRL_AREA_SIGNATURE, buffer, FW_SIGNATURE_SIZE);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2240      	movs	r2, #64	; 0x40
 800806c:	4619      	mov	r1, r3
 800806e:	4845      	ldr	r0, [pc, #276]	; (8008184 <sl_wfx_download_run_firmware+0x264>)
 8008070:	f7ff f811 	bl	8007096 <sl_wfx_apb_write>
 8008074:	62f8      	str	r0, [r7, #44]	; 0x2c
  SL_WFX_ERROR_CHECK(result);
 8008076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008078:	2b00      	cmp	r3, #0
 800807a:	f040 8102 	bne.w	8008282 <sl_wfx_download_run_firmware+0x362>

  // write image hash, which is the next  FW_HASH_SIZE of given image
  result = sl_wfx_host_get_firmware_data(&buffer, FW_HASH_SIZE);
 800807e:	1d3b      	adds	r3, r7, #4
 8008080:	2108      	movs	r1, #8
 8008082:	4618      	mov	r0, r3
 8008084:	f000 faca 	bl	800861c <sl_wfx_host_get_firmware_data>
 8008088:	62f8      	str	r0, [r7, #44]	; 0x2c
  SL_WFX_ERROR_CHECK(result);
 800808a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800808c:	2b00      	cmp	r3, #0
 800808e:	f040 80fa 	bne.w	8008286 <sl_wfx_download_run_firmware+0x366>
  result = sl_wfx_apb_write(ADDR_DWL_CTRL_AREA_FW_HASH, buffer, FW_HASH_SIZE);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	2208      	movs	r2, #8
 8008096:	4619      	mov	r1, r3
 8008098:	483b      	ldr	r0, [pc, #236]	; (8008188 <sl_wfx_download_run_firmware+0x268>)
 800809a:	f7fe fffc 	bl	8007096 <sl_wfx_apb_write>
 800809e:	62f8      	str	r0, [r7, #44]	; 0x2c
  SL_WFX_ERROR_CHECK(result);
 80080a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	f040 80f1 	bne.w	800828a <sl_wfx_download_run_firmware+0x36a>

  // write version, this is a pre-defined value (?)
  result = sl_wfx_apb_write_32(ADDR_DWL_CTRL_AREA_FW_VERSION, FW_VERSION_VALUE);
 80080a8:	2101      	movs	r1, #1
 80080aa:	4838      	ldr	r0, [pc, #224]	; (800818c <sl_wfx_download_run_firmware+0x26c>)
 80080ac:	f7ff f813 	bl	80070d6 <sl_wfx_apb_write_32>
 80080b0:	62f8      	str	r0, [r7, #44]	; 0x2c
  SL_WFX_ERROR_CHECK(result);
 80080b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	f040 80ea 	bne.w	800828e <sl_wfx_download_run_firmware+0x36e>

  // notify NCP that upload is starting
  result = sl_wfx_apb_write_32(ADDR_DWL_CTRL_AREA_HOST_STATUS, HOST_STATE_UPLOAD_PENDING);
 80080ba:	4935      	ldr	r1, [pc, #212]	; (8008190 <sl_wfx_download_run_firmware+0x270>)
 80080bc:	4825      	ldr	r0, [pc, #148]	; (8008154 <sl_wfx_download_run_firmware+0x234>)
 80080be:	f7ff f80a 	bl	80070d6 <sl_wfx_apb_write_32>
 80080c2:	62f8      	str	r0, [r7, #44]	; 0x2c
  SL_WFX_ERROR_CHECK(result);
 80080c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	f040 80e3 	bne.w	8008292 <sl_wfx_download_run_firmware+0x372>

  // skip signature and hash from image length
  image_length -= (FW_HASH_SIZE + FW_SIGNATURE_SIZE + FW_KEYSET_SIZE);
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	3b50      	subs	r3, #80	; 0x50
 80080d0:	60fb      	str	r3, [r7, #12]

  /* Calculate number of download blocks */
  num_blocks = (image_length - 1) / DOWNLOAD_BLOCK_SIZE + 1;
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	3b01      	subs	r3, #1
 80080d6:	0a9b      	lsrs	r3, r3, #10
 80080d8:	3301      	adds	r3, #1
 80080da:	61bb      	str	r3, [r7, #24]

  /* Firmware downloading loop */
  for ( block = 0; block < num_blocks; block++ ) {
 80080dc:	2300      	movs	r3, #0
 80080de:	627b      	str	r3, [r7, #36]	; 0x24
 80080e0:	e093      	b.n	800820a <sl_wfx_download_run_firmware+0x2ea>
    /* loop until put - get <= 24K */
    for ( i = 0; i < 100; i++ ) {
 80080e2:	2300      	movs	r3, #0
 80080e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80080e6:	e015      	b.n	8008114 <sl_wfx_download_run_firmware+0x1f4>
      if ((put - get) <= (DOWNLOAD_FIFO_SIZE - DOWNLOAD_BLOCK_SIZE)) {
 80080e8:	68bb      	ldr	r3, [r7, #8]
 80080ea:	6a3a      	ldr	r2, [r7, #32]
 80080ec:	1ad3      	subs	r3, r2, r3
 80080ee:	f5b3 4ff8 	cmp.w	r3, #31744	; 0x7c00
 80080f2:	d913      	bls.n	800811c <sl_wfx_download_run_firmware+0x1fc>
        break;
      }

      get = 0;
 80080f4:	2300      	movs	r3, #0
 80080f6:	60bb      	str	r3, [r7, #8]
      result = sl_wfx_apb_read_32(ADDR_DWL_CTRL_AREA_GET, &get);
 80080f8:	f107 0308 	add.w	r3, r7, #8
 80080fc:	4619      	mov	r1, r3
 80080fe:	4817      	ldr	r0, [pc, #92]	; (800815c <sl_wfx_download_run_firmware+0x23c>)
 8008100:	f7ff f800 	bl	8007104 <sl_wfx_apb_read_32>
 8008104:	62f8      	str	r0, [r7, #44]	; 0x2c
      SL_WFX_ERROR_CHECK(result);
 8008106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008108:	2b00      	cmp	r3, #0
 800810a:	f040 80c4 	bne.w	8008296 <sl_wfx_download_run_firmware+0x376>
    for ( i = 0; i < 100; i++ ) {
 800810e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008110:	3301      	adds	r3, #1
 8008112:	62bb      	str	r3, [r7, #40]	; 0x28
 8008114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008116:	2b63      	cmp	r3, #99	; 0x63
 8008118:	d9e6      	bls.n	80080e8 <sl_wfx_download_run_firmware+0x1c8>
 800811a:	e000      	b.n	800811e <sl_wfx_download_run_firmware+0x1fe>
        break;
 800811c:	bf00      	nop
    }

    if ((put - get) > (DOWNLOAD_FIFO_SIZE - DOWNLOAD_BLOCK_SIZE)) {
 800811e:	68bb      	ldr	r3, [r7, #8]
 8008120:	6a3a      	ldr	r2, [r7, #32]
 8008122:	1ad3      	subs	r3, r2, r3
 8008124:	f5b3 4ff8 	cmp.w	r3, #31744	; 0x7c00
 8008128:	d93a      	bls.n	80081a0 <sl_wfx_download_run_firmware+0x280>
      /* check the download status in NCP */
      result = sl_wfx_apb_read_32(ADDR_DWL_CTRL_AREA_NCP_STATUS, &value32);
 800812a:	f107 0310 	add.w	r3, r7, #16
 800812e:	4619      	mov	r1, r3
 8008130:	480d      	ldr	r0, [pc, #52]	; (8008168 <sl_wfx_download_run_firmware+0x248>)
 8008132:	f7fe ffe7 	bl	8007104 <sl_wfx_apb_read_32>
 8008136:	62f8      	str	r0, [r7, #44]	; 0x2c
      SL_WFX_ERROR_CHECK(result);
 8008138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800813a:	2b00      	cmp	r3, #0
 800813c:	f040 80ad 	bne.w	800829a <sl_wfx_download_run_firmware+0x37a>

      if (value32 != NCP_STATE_DOWNLOAD_PENDING) {
 8008140:	693b      	ldr	r3, [r7, #16]
 8008142:	4a13      	ldr	r2, [pc, #76]	; (8008190 <sl_wfx_download_run_firmware+0x270>)
 8008144:	4293      	cmp	r3, r2
 8008146:	d025      	beq.n	8008194 <sl_wfx_download_run_firmware+0x274>
        result = SL_STATUS_FAIL;
 8008148:	2301      	movs	r3, #1
 800814a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800814c:	e025      	b.n	800819a <sl_wfx_download_run_firmware+0x27a>
 800814e:	bf00      	nop
 8008150:	12345678 	.word	0x12345678
 8008154:	0900c00c 	.word	0x0900c00c
 8008158:	0900c004 	.word	0x0900c004
 800815c:	0900c008 	.word	0x0900c008
 8008160:	87654321 	.word	0x87654321
 8008164:	bd53ef99 	.word	0xbd53ef99
 8008168:	0900c010 	.word	0x0900c010
 800816c:	0900c080 	.word	0x0900c080
 8008170:	0900c0cc 	.word	0x0900c0cc
 8008174:	20000a00 	.word	0x20000a00
 8008178:	a753bd99 	.word	0xa753bd99
 800817c:	09004000 	.word	0x09004000
 8008180:	0900c000 	.word	0x0900c000
 8008184:	0900c014 	.word	0x0900c014
 8008188:	0900c054 	.word	0x0900c054
 800818c:	0900c05c 	.word	0x0900c05c
 8008190:	abcddcba 	.word	0xabcddcba
      } else {
        result = SL_STATUS_WIFI_FIRMWARE_DOWNLOAD_TIMEOUT;
 8008194:	f640 3302 	movw	r3, #2818	; 0xb02
 8008198:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      SL_WFX_ERROR_CHECK(result);
 800819a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800819c:	2b00      	cmp	r3, #0
 800819e:	d17e      	bne.n	800829e <sl_wfx_download_run_firmware+0x37e>
    }

    /* calculate the block size */
    uint32_t block_size = image_length - put;
 80081a0:	68fa      	ldr	r2, [r7, #12]
 80081a2:	6a3b      	ldr	r3, [r7, #32]
 80081a4:	1ad3      	subs	r3, r2, r3
 80081a6:	61fb      	str	r3, [r7, #28]
    if (block_size > DOWNLOAD_BLOCK_SIZE) {
 80081a8:	69fb      	ldr	r3, [r7, #28]
 80081aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80081ae:	d902      	bls.n	80081b6 <sl_wfx_download_run_firmware+0x296>
      block_size = DOWNLOAD_BLOCK_SIZE;
 80081b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80081b4:	61fb      	str	r3, [r7, #28]
    }

    /* send the block to SRAM */
    result = sl_wfx_host_get_firmware_data(&buffer, block_size);
 80081b6:	1d3b      	adds	r3, r7, #4
 80081b8:	69f9      	ldr	r1, [r7, #28]
 80081ba:	4618      	mov	r0, r3
 80081bc:	f000 fa2e 	bl	800861c <sl_wfx_host_get_firmware_data>
 80081c0:	62f8      	str	r0, [r7, #44]	; 0x2c
    SL_WFX_ERROR_CHECK(result);
 80081c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d16c      	bne.n	80082a2 <sl_wfx_download_run_firmware+0x382>
    uint32_t block_address = ADDR_DOWNLOAD_FIFO_BASE + (put % DOWNLOAD_FIFO_SIZE);
 80081c8:	6a3b      	ldr	r3, [r7, #32]
 80081ca:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80081ce:	f103 6310 	add.w	r3, r3, #150994944	; 0x9000000
 80081d2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80081d6:	617b      	str	r3, [r7, #20]
    result = sl_wfx_apb_write(block_address, buffer, block_size);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	69fa      	ldr	r2, [r7, #28]
 80081dc:	4619      	mov	r1, r3
 80081de:	6978      	ldr	r0, [r7, #20]
 80081e0:	f7fe ff59 	bl	8007096 <sl_wfx_apb_write>
 80081e4:	62f8      	str	r0, [r7, #44]	; 0x2c
    SL_WFX_ERROR_CHECK(result);
 80081e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d15c      	bne.n	80082a6 <sl_wfx_download_run_firmware+0x386>
#if (SL_WFX_DEBUG_MASK & SL_WFX_DEBUG_FW_LOAD)
    sl_wfx_host_log("FW> %d/%d \n\r", put, image_length);
#endif

    /* update the put register */
    put += block_size;
 80081ec:	6a3a      	ldr	r2, [r7, #32]
 80081ee:	69fb      	ldr	r3, [r7, #28]
 80081f0:	4413      	add	r3, r2
 80081f2:	623b      	str	r3, [r7, #32]

    result = sl_wfx_apb_write_32(ADDR_DWL_CTRL_AREA_PUT, put);
 80081f4:	6a39      	ldr	r1, [r7, #32]
 80081f6:	4832      	ldr	r0, [pc, #200]	; (80082c0 <sl_wfx_download_run_firmware+0x3a0>)
 80081f8:	f7fe ff6d 	bl	80070d6 <sl_wfx_apb_write_32>
 80081fc:	62f8      	str	r0, [r7, #44]	; 0x2c
    SL_WFX_ERROR_CHECK(result);
 80081fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008200:	2b00      	cmp	r3, #0
 8008202:	d152      	bne.n	80082aa <sl_wfx_download_run_firmware+0x38a>
  for ( block = 0; block < num_blocks; block++ ) {
 8008204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008206:	3301      	adds	r3, #1
 8008208:	627b      	str	r3, [r7, #36]	; 0x24
 800820a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800820c:	69bb      	ldr	r3, [r7, #24]
 800820e:	429a      	cmp	r2, r3
 8008210:	f4ff af67 	bcc.w	80080e2 <sl_wfx_download_run_firmware+0x1c2>
  }   /* End of firmware download loop */

  // notify NCP that upload ended
  result = sl_wfx_apb_write_32(ADDR_DWL_CTRL_AREA_HOST_STATUS, HOST_STATE_UPLOAD_COMPLETE);
 8008214:	492b      	ldr	r1, [pc, #172]	; (80082c4 <sl_wfx_download_run_firmware+0x3a4>)
 8008216:	482c      	ldr	r0, [pc, #176]	; (80082c8 <sl_wfx_download_run_firmware+0x3a8>)
 8008218:	f7fe ff5d 	bl	80070d6 <sl_wfx_apb_write_32>
 800821c:	62f8      	str	r0, [r7, #44]	; 0x2c
  SL_WFX_ERROR_CHECK(result);
 800821e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008220:	2b00      	cmp	r3, #0
 8008222:	d144      	bne.n	80082ae <sl_wfx_download_run_firmware+0x38e>

  // wait for authentication result
  result = sl_wfx_poll_for_value(ADDR_DWL_CTRL_AREA_NCP_STATUS, NCP_STATE_AUTH_OK, 100);
 8008224:	2264      	movs	r2, #100	; 0x64
 8008226:	4927      	ldr	r1, [pc, #156]	; (80082c4 <sl_wfx_download_run_firmware+0x3a4>)
 8008228:	4828      	ldr	r0, [pc, #160]	; (80082cc <sl_wfx_download_run_firmware+0x3ac>)
 800822a:	f000 f853 	bl	80082d4 <sl_wfx_poll_for_value>
 800822e:	62f8      	str	r0, [r7, #44]	; 0x2c
  SL_WFX_ERROR_CHECK(result);
 8008230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008232:	2b00      	cmp	r3, #0
 8008234:	d13d      	bne.n	80082b2 <sl_wfx_download_run_firmware+0x392>

  // notify NCP that we are happy to run firmware
  result = sl_wfx_apb_write_32(ADDR_DWL_CTRL_AREA_HOST_STATUS, HOST_STATE_OK_TO_JUMP);
 8008236:	4926      	ldr	r1, [pc, #152]	; (80082d0 <sl_wfx_download_run_firmware+0x3b0>)
 8008238:	4823      	ldr	r0, [pc, #140]	; (80082c8 <sl_wfx_download_run_firmware+0x3a8>)
 800823a:	f7fe ff4c 	bl	80070d6 <sl_wfx_apb_write_32>
 800823e:	62f8      	str	r0, [r7, #44]	; 0x2c
  SL_WFX_ERROR_CHECK(result);
 8008240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008242:	2b00      	cmp	r3, #0

  error_handler:
 8008244:	e036      	b.n	80082b4 <sl_wfx_download_run_firmware+0x394>
  SL_WFX_ERROR_CHECK(result);
 8008246:	bf00      	nop
 8008248:	e034      	b.n	80082b4 <sl_wfx_download_run_firmware+0x394>
  SL_WFX_ERROR_CHECK(result);
 800824a:	bf00      	nop
 800824c:	e032      	b.n	80082b4 <sl_wfx_download_run_firmware+0x394>
  SL_WFX_ERROR_CHECK(result);
 800824e:	bf00      	nop
 8008250:	e030      	b.n	80082b4 <sl_wfx_download_run_firmware+0x394>
  SL_WFX_ERROR_CHECK(result);
 8008252:	bf00      	nop
 8008254:	e02e      	b.n	80082b4 <sl_wfx_download_run_firmware+0x394>
  SL_WFX_ERROR_CHECK(result);
 8008256:	bf00      	nop
 8008258:	e02c      	b.n	80082b4 <sl_wfx_download_run_firmware+0x394>
  SL_WFX_ERROR_CHECK(result);
 800825a:	bf00      	nop
 800825c:	e02a      	b.n	80082b4 <sl_wfx_download_run_firmware+0x394>
  SL_WFX_ERROR_CHECK(result);
 800825e:	bf00      	nop
 8008260:	e028      	b.n	80082b4 <sl_wfx_download_run_firmware+0x394>
  SL_WFX_ERROR_CHECK(result);
 8008262:	bf00      	nop
 8008264:	e026      	b.n	80082b4 <sl_wfx_download_run_firmware+0x394>
  SL_WFX_ERROR_CHECK(result);
 8008266:	bf00      	nop
 8008268:	e024      	b.n	80082b4 <sl_wfx_download_run_firmware+0x394>
  SL_WFX_ERROR_CHECK(result);
 800826a:	bf00      	nop
 800826c:	e022      	b.n	80082b4 <sl_wfx_download_run_firmware+0x394>
  SL_WFX_ERROR_CHECK(result);
 800826e:	bf00      	nop
 8008270:	e020      	b.n	80082b4 <sl_wfx_download_run_firmware+0x394>
  SL_WFX_ERROR_CHECK(result);
 8008272:	bf00      	nop
 8008274:	e01e      	b.n	80082b4 <sl_wfx_download_run_firmware+0x394>
  SL_WFX_ERROR_CHECK(result);
 8008276:	bf00      	nop
 8008278:	e01c      	b.n	80082b4 <sl_wfx_download_run_firmware+0x394>
  SL_WFX_ERROR_CHECK(result);
 800827a:	bf00      	nop
 800827c:	e01a      	b.n	80082b4 <sl_wfx_download_run_firmware+0x394>
  SL_WFX_ERROR_CHECK(result);
 800827e:	bf00      	nop
 8008280:	e018      	b.n	80082b4 <sl_wfx_download_run_firmware+0x394>
  SL_WFX_ERROR_CHECK(result);
 8008282:	bf00      	nop
 8008284:	e016      	b.n	80082b4 <sl_wfx_download_run_firmware+0x394>
  SL_WFX_ERROR_CHECK(result);
 8008286:	bf00      	nop
 8008288:	e014      	b.n	80082b4 <sl_wfx_download_run_firmware+0x394>
  SL_WFX_ERROR_CHECK(result);
 800828a:	bf00      	nop
 800828c:	e012      	b.n	80082b4 <sl_wfx_download_run_firmware+0x394>
  SL_WFX_ERROR_CHECK(result);
 800828e:	bf00      	nop
 8008290:	e010      	b.n	80082b4 <sl_wfx_download_run_firmware+0x394>
  SL_WFX_ERROR_CHECK(result);
 8008292:	bf00      	nop
 8008294:	e00e      	b.n	80082b4 <sl_wfx_download_run_firmware+0x394>
      SL_WFX_ERROR_CHECK(result);
 8008296:	bf00      	nop
 8008298:	e00c      	b.n	80082b4 <sl_wfx_download_run_firmware+0x394>
      SL_WFX_ERROR_CHECK(result);
 800829a:	bf00      	nop
 800829c:	e00a      	b.n	80082b4 <sl_wfx_download_run_firmware+0x394>
      SL_WFX_ERROR_CHECK(result);
 800829e:	bf00      	nop
 80082a0:	e008      	b.n	80082b4 <sl_wfx_download_run_firmware+0x394>
    SL_WFX_ERROR_CHECK(result);
 80082a2:	bf00      	nop
 80082a4:	e006      	b.n	80082b4 <sl_wfx_download_run_firmware+0x394>
    SL_WFX_ERROR_CHECK(result);
 80082a6:	bf00      	nop
 80082a8:	e004      	b.n	80082b4 <sl_wfx_download_run_firmware+0x394>
    SL_WFX_ERROR_CHECK(result);
 80082aa:	bf00      	nop
 80082ac:	e002      	b.n	80082b4 <sl_wfx_download_run_firmware+0x394>
  SL_WFX_ERROR_CHECK(result);
 80082ae:	bf00      	nop
 80082b0:	e000      	b.n	80082b4 <sl_wfx_download_run_firmware+0x394>
  SL_WFX_ERROR_CHECK(result);
 80082b2:	bf00      	nop
  return result;
 80082b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80082b6:	4618      	mov	r0, r3
 80082b8:	3730      	adds	r7, #48	; 0x30
 80082ba:	46bd      	mov	sp, r7
 80082bc:	bd80      	pop	{r7, pc}
 80082be:	bf00      	nop
 80082c0:	0900c004 	.word	0x0900c004
 80082c4:	d4c64a99 	.word	0xd4c64a99
 80082c8:	0900c00c 	.word	0x0900c00c
 80082cc:	0900c010 	.word	0x0900c010
 80082d0:	174fc882 	.word	0x174fc882

080082d4 <sl_wfx_poll_for_value>:
 * @return SL_STATUS_OK if the value is received correctly,
 * SL_STATUS_TIMEOUT if the value is not found in time,
 * SL_STATUS_FAIL if not able to poll the value from the Wi-Fi chip
 *****************************************************************************/
static sl_status_t sl_wfx_poll_for_value(uint32_t address, uint32_t polled_value, uint32_t max_retries)
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b086      	sub	sp, #24
 80082d8:	af00      	add	r7, sp, #0
 80082da:	60f8      	str	r0, [r7, #12]
 80082dc:	60b9      	str	r1, [r7, #8]
 80082de:	607a      	str	r2, [r7, #4]
  uint32_t    value;
  sl_status_t result = SL_STATUS_OK;
 80082e0:	2300      	movs	r3, #0
 80082e2:	617b      	str	r3, [r7, #20]

  for (; max_retries > 0; max_retries--) {
 80082e4:	e013      	b.n	800830e <sl_wfx_poll_for_value+0x3a>
    result = sl_wfx_apb_read_32(address, &value);
 80082e6:	f107 0310 	add.w	r3, r7, #16
 80082ea:	4619      	mov	r1, r3
 80082ec:	68f8      	ldr	r0, [r7, #12]
 80082ee:	f7fe ff09 	bl	8007104 <sl_wfx_apb_read_32>
 80082f2:	6178      	str	r0, [r7, #20]
    SL_WFX_ERROR_CHECK(result);
 80082f4:	697b      	ldr	r3, [r7, #20]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d115      	bne.n	8008326 <sl_wfx_poll_for_value+0x52>
    if (value == polled_value) {
 80082fa:	693b      	ldr	r3, [r7, #16]
 80082fc:	68ba      	ldr	r2, [r7, #8]
 80082fe:	429a      	cmp	r2, r3
 8008300:	d009      	beq.n	8008316 <sl_wfx_poll_for_value+0x42>
      break;
    } else {
      sl_wfx_host_wait(1);
 8008302:	2001      	movs	r0, #1
 8008304:	f000 faa8 	bl	8008858 <sl_wfx_host_wait>
  for (; max_retries > 0; max_retries--) {
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	3b01      	subs	r3, #1
 800830c:	607b      	str	r3, [r7, #4]
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d1e8      	bne.n	80082e6 <sl_wfx_poll_for_value+0x12>
 8008314:	e000      	b.n	8008318 <sl_wfx_poll_for_value+0x44>
      break;
 8008316:	bf00      	nop
    }
  }
  if (value != polled_value) {
 8008318:	693b      	ldr	r3, [r7, #16]
 800831a:	68ba      	ldr	r2, [r7, #8]
 800831c:	429a      	cmp	r2, r3
 800831e:	d004      	beq.n	800832a <sl_wfx_poll_for_value+0x56>
    result = SL_STATUS_TIMEOUT;
 8008320:	2307      	movs	r3, #7
 8008322:	617b      	str	r3, [r7, #20]
 8008324:	e002      	b.n	800832c <sl_wfx_poll_for_value+0x58>
    SL_WFX_ERROR_CHECK(result);
 8008326:	bf00      	nop
 8008328:	e000      	b.n	800832c <sl_wfx_poll_for_value+0x58>
  }

  error_handler:
 800832a:	bf00      	nop
  return result;
 800832c:	697b      	ldr	r3, [r7, #20]
}
 800832e:	4618      	mov	r0, r3
 8008330:	3718      	adds	r7, #24
 8008332:	46bd      	mov	sp, r7
 8008334:	bd80      	pop	{r7, pc}

08008336 <sl_wfx_compare_keysets>:
 * @param firmware_keyset is the 8 first bytes of the firmware
 * @return SL_STATUS_OK if the firmware is compatible with the WF200,
 * SL_STATUS_WIFI_INVALID_KEY otherwise
 *****************************************************************************/
static sl_status_t sl_wfx_compare_keysets(uint8_t chip_keyset, char *firmware_keyset)
{
 8008336:	b580      	push	{r7, lr}
 8008338:	b084      	sub	sp, #16
 800833a:	af00      	add	r7, sp, #0
 800833c:	4603      	mov	r3, r0
 800833e:	6039      	str	r1, [r7, #0]
 8008340:	71fb      	strb	r3, [r7, #7]
  sl_status_t result;
  char        keyset_string[3];
  uint8_t     keyset_value;

  keyset_string[0] = *(firmware_keyset + 6);
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	799b      	ldrb	r3, [r3, #6]
 8008346:	723b      	strb	r3, [r7, #8]
  keyset_string[1] = *(firmware_keyset + 7);
 8008348:	683b      	ldr	r3, [r7, #0]
 800834a:	79db      	ldrb	r3, [r3, #7]
 800834c:	727b      	strb	r3, [r7, #9]
  keyset_string[2] = '\0';
 800834e:	2300      	movs	r3, #0
 8008350:	72bb      	strb	r3, [r7, #10]
  keyset_value     = (uint8_t)strtoul(keyset_string, NULL, 16);
 8008352:	f107 0308 	add.w	r3, r7, #8
 8008356:	2210      	movs	r2, #16
 8008358:	2100      	movs	r1, #0
 800835a:	4618      	mov	r0, r3
 800835c:	f012 feb6 	bl	801b0cc <strtoul>
 8008360:	4603      	mov	r3, r0
 8008362:	72fb      	strb	r3, [r7, #11]

  if (keyset_value == chip_keyset) {
 8008364:	7afa      	ldrb	r2, [r7, #11]
 8008366:	79fb      	ldrb	r3, [r7, #7]
 8008368:	429a      	cmp	r2, r3
 800836a:	d102      	bne.n	8008372 <sl_wfx_compare_keysets+0x3c>
    result = SL_STATUS_OK;
 800836c:	2300      	movs	r3, #0
 800836e:	60fb      	str	r3, [r7, #12]
 8008370:	e002      	b.n	8008378 <sl_wfx_compare_keysets+0x42>
  } else {
    result = SL_STATUS_WIFI_INVALID_KEY;
 8008372:	f640 3301 	movw	r3, #2817	; 0xb01
 8008376:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8008378:	68fb      	ldr	r3, [r7, #12]
}
 800837a:	4618      	mov	r0, r3
 800837c:	3710      	adds	r7, #16
 800837e:	46bd      	mov	sp, r7
 8008380:	bd80      	pop	{r7, pc}
	...

08008384 <sl_wfx_get_status_code>:
 * @param wfx_status is the status returned by the WFx
 * @param command_id is the ID of the command
 * @return corresponding driver status code enumerated in sl_status_t
 *****************************************************************************/
sl_status_t sl_wfx_get_status_code(uint32_t wfx_status, uint8_t command_id)
{
 8008384:	b580      	push	{r7, lr}
 8008386:	b084      	sub	sp, #16
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
 800838c:	460b      	mov	r3, r1
 800838e:	70fb      	strb	r3, [r7, #3]
  sl_status_t result;

  if (command_id & SL_WFX_MSG_ID_GENERAL_API_MASK) {
 8008390:	78fb      	ldrb	r3, [r7, #3]
 8008392:	f003 0320 	and.w	r3, r3, #32
 8008396:	2b00      	cmp	r3, #0
 8008398:	d05b      	beq.n	8008452 <sl_wfx_get_status_code+0xce>
    switch (wfx_status) {
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	f241 2256 	movw	r2, #4694	; 0x1256
 80083a0:	4293      	cmp	r3, r2
 80083a2:	d045      	beq.n	8008430 <sl_wfx_get_status_code+0xac>
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	f241 2256 	movw	r2, #4694	; 0x1256
 80083aa:	4293      	cmp	r3, r2
 80083ac:	d84e      	bhi.n	800844c <sl_wfx_get_status_code+0xc8>
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	f241 2234 	movw	r2, #4660	; 0x1234
 80083b4:	4293      	cmp	r3, r2
 80083b6:	d038      	beq.n	800842a <sl_wfx_get_status_code+0xa6>
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	f241 2234 	movw	r2, #4660	; 0x1234
 80083be:	4293      	cmp	r3, r2
 80083c0:	d844      	bhi.n	800844c <sl_wfx_get_status_code+0xc8>
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	2baf      	cmp	r3, #175	; 0xaf
 80083c6:	d033      	beq.n	8008430 <sl_wfx_get_status_code+0xac>
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2baf      	cmp	r3, #175	; 0xaf
 80083cc:	d83e      	bhi.n	800844c <sl_wfx_get_status_code+0xc8>
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	2b9e      	cmp	r3, #158	; 0x9e
 80083d2:	d02a      	beq.n	800842a <sl_wfx_get_status_code+0xa6>
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2b9e      	cmp	r3, #158	; 0x9e
 80083d8:	d838      	bhi.n	800844c <sl_wfx_get_status_code+0xc8>
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	2b8d      	cmp	r3, #141	; 0x8d
 80083de:	d027      	beq.n	8008430 <sl_wfx_get_status_code+0xac>
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	2b8d      	cmp	r3, #141	; 0x8d
 80083e4:	d832      	bhi.n	800844c <sl_wfx_get_status_code+0xc8>
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	2b7c      	cmp	r3, #124	; 0x7c
 80083ea:	d021      	beq.n	8008430 <sl_wfx_get_status_code+0xac>
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2b7c      	cmp	r3, #124	; 0x7c
 80083f0:	d82c      	bhi.n	800844c <sl_wfx_get_status_code+0xc8>
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	2b6b      	cmp	r3, #107	; 0x6b
 80083f6:	d01b      	beq.n	8008430 <sl_wfx_get_status_code+0xac>
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2b6b      	cmp	r3, #107	; 0x6b
 80083fc:	d826      	bhi.n	800844c <sl_wfx_get_status_code+0xc8>
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	2b04      	cmp	r3, #4
 8008402:	d80f      	bhi.n	8008424 <sl_wfx_get_status_code+0xa0>
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2b04      	cmp	r3, #4
 8008408:	d820      	bhi.n	800844c <sl_wfx_get_status_code+0xc8>
 800840a:	a201      	add	r2, pc, #4	; (adr r2, 8008410 <sl_wfx_get_status_code+0x8c>)
 800840c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008410:	0800842b 	.word	0x0800842b
 8008414:	08008431 	.word	0x08008431
 8008418:	08008437 	.word	0x08008437
 800841c:	0800843d 	.word	0x0800843d
 8008420:	08008445 	.word	0x08008445
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2b5a      	cmp	r3, #90	; 0x5a
 8008428:	d110      	bne.n	800844c <sl_wfx_get_status_code+0xc8>
      case SL_WFX_STATUS_SUCCESS:
      case SL_WFX_MAC_KEY_STATUS_SUCCESS:
      case SL_WFX_PUB_KEY_EXCHANGE_STATUS_SUCCESS:
      case SL_WFX_PREVENT_ROLLBACK_CNF_SUCCESS:
        result = SL_STATUS_OK;
 800842a:	2300      	movs	r3, #0
 800842c:	60fb      	str	r3, [r7, #12]
        break;
 800842e:	e075      	b.n	800851c <sl_wfx_get_status_code+0x198>
      case SL_WFX_MAC_KEY_STATUS_FAILED_KEY_ALREADY_BURNED:
      case SL_WFX_MAC_KEY_STATUS_FAILED_RAM_MODE_NOT_ALLOWED:
      case SL_WFX_MAC_KEY_STATUS_FAILED_UNKNOWN_MODE:
      case SL_WFX_PUB_KEY_EXCHANGE_STATUS_FAILED:
      case SL_WFX_PREVENT_ROLLBACK_CNF_WRONG_MAGIC_WORD:
        result = SL_STATUS_FAIL;
 8008430:	2301      	movs	r3, #1
 8008432:	60fb      	str	r3, [r7, #12]
        break;
 8008434:	e072      	b.n	800851c <sl_wfx_get_status_code+0x198>
      case SL_WFX_INVALID_PARAMETER:
        result = SL_STATUS_INVALID_PARAMETER;
 8008436:	2321      	movs	r3, #33	; 0x21
 8008438:	60fb      	str	r3, [r7, #12]
        break;
 800843a:	e06f      	b.n	800851c <sl_wfx_get_status_code+0x198>
      case SL_WFX_STATUS_GPIO_WARNING:
        result = SL_STATUS_WIFI_WARNING;
 800843c:	f640 3304 	movw	r3, #2820	; 0xb04
 8008440:	60fb      	str	r3, [r7, #12]
        break;
 8008442:	e06b      	b.n	800851c <sl_wfx_get_status_code+0x198>
      case SL_WFX_ERROR_UNSUPPORTED_MSG_ID:
        result = SL_STATUS_WIFI_UNSUPPORTED_MESSAGE_ID;
 8008444:	f640 3303 	movw	r3, #2819	; 0xb03
 8008448:	60fb      	str	r3, [r7, #12]
        break;
 800844a:	e067      	b.n	800851c <sl_wfx_get_status_code+0x198>
      default:
        result = SL_STATUS_FAIL;
 800844c:	2301      	movs	r3, #1
 800844e:	60fb      	str	r3, [r7, #12]
        break;
 8008450:	e064      	b.n	800851c <sl_wfx_get_status_code+0x198>
    }
  } else {
    switch (wfx_status) {
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	2b14      	cmp	r3, #20
 8008456:	d85e      	bhi.n	8008516 <sl_wfx_get_status_code+0x192>
 8008458:	a201      	add	r2, pc, #4	; (adr r2, 8008460 <sl_wfx_get_status_code+0xdc>)
 800845a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800845e:	bf00      	nop
 8008460:	080084b5 	.word	0x080084b5
 8008464:	080084bb 	.word	0x080084bb
 8008468:	080084c1 	.word	0x080084c1
 800846c:	080084c9 	.word	0x080084c9
 8008470:	080084cf 	.word	0x080084cf
 8008474:	080084d7 	.word	0x080084d7
 8008478:	080084df 	.word	0x080084df
 800847c:	080084e7 	.word	0x080084e7
 8008480:	080084ef 	.word	0x080084ef
 8008484:	080084f7 	.word	0x080084f7
 8008488:	080084ff 	.word	0x080084ff
 800848c:	08008517 	.word	0x08008517
 8008490:	08008517 	.word	0x08008517
 8008494:	08008517 	.word	0x08008517
 8008498:	08008517 	.word	0x08008517
 800849c:	08008517 	.word	0x08008517
 80084a0:	08008517 	.word	0x08008517
 80084a4:	08008517 	.word	0x08008517
 80084a8:	08008517 	.word	0x08008517
 80084ac:	08008507 	.word	0x08008507
 80084b0:	0800850f 	.word	0x0800850f
      case WFM_STATUS_SUCCESS:
        result = SL_STATUS_OK;
 80084b4:	2300      	movs	r3, #0
 80084b6:	60fb      	str	r3, [r7, #12]
        break;
 80084b8:	e030      	b.n	800851c <sl_wfx_get_status_code+0x198>
      case WFM_STATUS_INVALID_PARAMETER:
        result = SL_STATUS_INVALID_PARAMETER;
 80084ba:	2321      	movs	r3, #33	; 0x21
 80084bc:	60fb      	str	r3, [r7, #12]
        break;
 80084be:	e02d      	b.n	800851c <sl_wfx_get_status_code+0x198>
      case WFM_STATUS_WRONG_STATE:
        result = SL_STATUS_WIFI_WRONG_STATE;
 80084c0:	f640 3318 	movw	r3, #2840	; 0xb18
 80084c4:	60fb      	str	r3, [r7, #12]
        break;
 80084c6:	e029      	b.n	800851c <sl_wfx_get_status_code+0x198>
      case WFM_STATUS_GENERAL_FAILURE:
        result = SL_STATUS_FAIL;
 80084c8:	2301      	movs	r3, #1
 80084ca:	60fb      	str	r3, [r7, #12]
        break;
 80084cc:	e026      	b.n	800851c <sl_wfx_get_status_code+0x198>
      case WFM_STATUS_CHANNEL_NOT_ALLOWED:
        result = SL_STATUS_WIFI_CHANNEL_NOT_ALLOWED;
 80084ce:	f640 3319 	movw	r3, #2841	; 0xb19
 80084d2:	60fb      	str	r3, [r7, #12]
        break;
 80084d4:	e022      	b.n	800851c <sl_wfx_get_status_code+0x198>
      case WFM_STATUS_WARNING:
        result = SL_STATUS_WIFI_WARNING;
 80084d6:	f640 3304 	movw	r3, #2820	; 0xb04
 80084da:	60fb      	str	r3, [r7, #12]
        break;
 80084dc:	e01e      	b.n	800851c <sl_wfx_get_status_code+0x198>
      case WFM_STATUS_NO_MATCHING_AP:
        result = SL_STATUS_WIFI_NO_MATCHING_AP;
 80084de:	f640 331a 	movw	r3, #2842	; 0xb1a
 80084e2:	60fb      	str	r3, [r7, #12]
        break;
 80084e4:	e01a      	b.n	800851c <sl_wfx_get_status_code+0x198>
      case WFM_STATUS_CONNECTION_ABORTED:
        result = SL_STATUS_WIFI_CONNECTION_ABORTED;
 80084e6:	f640 331b 	movw	r3, #2843	; 0xb1b
 80084ea:	60fb      	str	r3, [r7, #12]
        break;
 80084ec:	e016      	b.n	800851c <sl_wfx_get_status_code+0x198>
      case WFM_STATUS_CONNECTION_TIMEOUT:
        result = SL_STATUS_WIFI_CONNECTION_TIMEOUT;
 80084ee:	f640 331c 	movw	r3, #2844	; 0xb1c
 80084f2:	60fb      	str	r3, [r7, #12]
        break;
 80084f4:	e012      	b.n	800851c <sl_wfx_get_status_code+0x198>
      case WFM_STATUS_CONNECTION_REJECTED_BY_AP:
        result = SL_STATUS_WIFI_CONNECTION_REJECTED_BY_AP;
 80084f6:	f640 331d 	movw	r3, #2845	; 0xb1d
 80084fa:	60fb      	str	r3, [r7, #12]
        break;
 80084fc:	e00e      	b.n	800851c <sl_wfx_get_status_code+0x198>
      case WFM_STATUS_CONNECTION_AUTH_FAILURE:
        result = SL_STATUS_WIFI_CONNECTION_AUTH_FAILURE;
 80084fe:	f640 331e 	movw	r3, #2846	; 0xb1e
 8008502:	60fb      	str	r3, [r7, #12]
        break;
 8008504:	e00a      	b.n	800851c <sl_wfx_get_status_code+0x198>
      case WFM_STATUS_RETRY_EXCEEDED:
        result = SL_STATUS_WIFI_RETRY_EXCEEDED;
 8008506:	f640 331f 	movw	r3, #2847	; 0xb1f
 800850a:	60fb      	str	r3, [r7, #12]
        break;
 800850c:	e006      	b.n	800851c <sl_wfx_get_status_code+0x198>
      case WFM_STATUS_TX_LIFETIME_EXCEEDED:
        result = SL_STATUS_WIFI_TX_LIFETIME_EXCEEDED;
 800850e:	f44f 6332 	mov.w	r3, #2848	; 0xb20
 8008512:	60fb      	str	r3, [r7, #12]
        break;
 8008514:	e002      	b.n	800851c <sl_wfx_get_status_code+0x198>
      default:
        result = SL_STATUS_FAIL;
 8008516:	2301      	movs	r3, #1
 8008518:	60fb      	str	r3, [r7, #12]
        break;
 800851a:	bf00      	nop
    }
  }

#if (SL_WFX_DEBUG_MASK & SL_WFX_DEBUG_ERROR)
  if (result != SL_STATUS_OK && result != SL_STATUS_WIFI_WARNING) {
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d008      	beq.n	8008534 <sl_wfx_get_status_code+0x1b0>
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	f640 3204 	movw	r2, #2820	; 0xb04
 8008528:	4293      	cmp	r3, r2
 800852a:	d003      	beq.n	8008534 <sl_wfx_get_status_code+0x1b0>
    sl_wfx_host_log("Cnf status %u\n", result);
 800852c:	68f9      	ldr	r1, [r7, #12]
 800852e:	4804      	ldr	r0, [pc, #16]	; (8008540 <sl_wfx_get_status_code+0x1bc>)
 8008530:	f000 fafc 	bl	8008b2c <sl_wfx_host_log>
  }
#endif
  return result;
 8008534:	68fb      	ldr	r3, [r7, #12]
}
 8008536:	4618      	mov	r0, r3
 8008538:	3710      	adds	r7, #16
 800853a:	46bd      	mov	sp, r7
 800853c:	bd80      	pop	{r7, pc}
 800853e:	bf00      	nop
 8008540:	0801d514 	.word	0x0801d514

08008544 <sl_wfx_allocate_command_buffer>:
 *****************************************************************************/
sl_status_t sl_wfx_allocate_command_buffer(sl_wfx_generic_message_t **buffer,
                                           uint32_t command_id,
                                           sl_wfx_buffer_type_t type,
                                           uint32_t buffer_size)
{
 8008544:	b580      	push	{r7, lr}
 8008546:	b086      	sub	sp, #24
 8008548:	af00      	add	r7, sp, #0
 800854a:	60f8      	str	r0, [r7, #12]
 800854c:	60b9      	str	r1, [r7, #8]
 800854e:	603b      	str	r3, [r7, #0]
 8008550:	4613      	mov	r3, r2
 8008552:	71fb      	strb	r3, [r7, #7]
    *buffer = (sl_wfx_generic_message_t *)(((uint8_t *)*buffer) + SL_WFX_SECURE_LINK_HEADER_SIZE);
  } else
#endif //SL_WFX_USE_SECURE_LINK
  {
    SL_WFX_UNUSED_PARAMETER(command_id);
    result = sl_wfx_host_allocate_buffer((void **)buffer,
 8008554:	79fb      	ldrb	r3, [r7, #7]
 8008556:	683a      	ldr	r2, [r7, #0]
 8008558:	4619      	mov	r1, r3
 800855a:	68f8      	ldr	r0, [r7, #12]
 800855c:	f000 fab8 	bl	8008ad0 <sl_wfx_host_allocate_buffer>
 8008560:	6178      	str	r0, [r7, #20]
                                         type,
                                         buffer_size);
    SL_WFX_ERROR_CHECK(result);
 8008562:	697b      	ldr	r3, [r7, #20]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d107      	bne.n	8008578 <sl_wfx_allocate_command_buffer+0x34>

    memset((*buffer), 0, buffer_size);
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	683a      	ldr	r2, [r7, #0]
 800856e:	2100      	movs	r1, #0
 8008570:	4618      	mov	r0, r3
 8008572:	f011 fec5 	bl	801a300 <memset>
 8008576:	e000      	b.n	800857a <sl_wfx_allocate_command_buffer+0x36>
    SL_WFX_ERROR_CHECK(result);
 8008578:	bf00      	nop
  }

  error_handler:
  return result;
 800857a:	697b      	ldr	r3, [r7, #20]
}
 800857c:	4618      	mov	r0, r3
 800857e:	3718      	adds	r7, #24
 8008580:	46bd      	mov	sp, r7
 8008582:	bd80      	pop	{r7, pc}

08008584 <sl_wfx_free_command_buffer>:
 * @param command_id is the ID of the command to check if encryption is required
 * @param type of the buffer to allocate
 * @return SL_STATUS_OK if the values are retrieved correctly, SL_STATUS_FAIL otherwise
 *****************************************************************************/
sl_status_t sl_wfx_free_command_buffer(sl_wfx_generic_message_t *buffer, uint32_t command_id, sl_wfx_buffer_type_t type)
{
 8008584:	b580      	push	{r7, lr}
 8008586:	b084      	sub	sp, #16
 8008588:	af00      	add	r7, sp, #0
 800858a:	60f8      	str	r0, [r7, #12]
 800858c:	60b9      	str	r1, [r7, #8]
 800858e:	4613      	mov	r3, r2
 8008590:	71fb      	strb	r3, [r7, #7]
    return sl_wfx_host_free_buffer((uint8_t *)buffer - SL_WFX_SECURE_LINK_HEADER_SIZE, type);
  } else
#endif //SL_WFX_USE_SECURE_LINK
  {
    SL_WFX_UNUSED_PARAMETER(command_id);
    return sl_wfx_host_free_buffer(buffer, type);
 8008592:	79fb      	ldrb	r3, [r7, #7]
 8008594:	4619      	mov	r1, r3
 8008596:	68f8      	ldr	r0, [r7, #12]
 8008598:	f000 faac 	bl	8008af4 <sl_wfx_host_free_buffer>
 800859c:	4603      	mov	r3, r0
  }
}
 800859e:	4618      	mov	r0, r3
 80085a0:	3710      	adds	r7, #16
 80085a2:	46bd      	mov	sp, r7
 80085a4:	bd80      	pop	{r7, pc}
	...

080085a8 <sl_wfx_host_init>:
}host_context;

/**************************************************************************//**
 * Initialize the host resources
 *****************************************************************************/
sl_status_t sl_wfx_host_init (void) {
 80085a8:	b580      	push	{r7, lr}
 80085aa:	af00      	add	r7, sp, #0
  host_context.sl_wfx_firmware_download_progress = 0;
 80085ac:	4b16      	ldr	r3, [pc, #88]	; (8008608 <sl_wfx_host_init+0x60>)
 80085ae:	2200      	movs	r2, #0
 80085b0:	601a      	str	r2, [r3, #0]
  wifi_scan_sem = xSemaphoreCreateBinary();
 80085b2:	2203      	movs	r2, #3
 80085b4:	2100      	movs	r1, #0
 80085b6:	2001      	movs	r0, #1
 80085b8:	f001 fda8 	bl	800a10c <xQueueGenericCreate>
 80085bc:	4603      	mov	r3, r0
 80085be:	4a13      	ldr	r2, [pc, #76]	; (800860c <sl_wfx_host_init+0x64>)
 80085c0:	6013      	str	r3, [r2, #0]
  sl_wfx_driver_mutex = xSemaphoreCreateBinary();
 80085c2:	2203      	movs	r2, #3
 80085c4:	2100      	movs	r1, #0
 80085c6:	2001      	movs	r0, #1
 80085c8:	f001 fda0 	bl	800a10c <xQueueGenericCreate>
 80085cc:	4603      	mov	r3, r0
 80085ce:	4a10      	ldr	r2, [pc, #64]	; (8008610 <sl_wfx_host_init+0x68>)
 80085d0:	6013      	str	r3, [r2, #0]
  xSemaphoreGive(sl_wfx_driver_mutex);
 80085d2:	4b0f      	ldr	r3, [pc, #60]	; (8008610 <sl_wfx_host_init+0x68>)
 80085d4:	6818      	ldr	r0, [r3, #0]
 80085d6:	2300      	movs	r3, #0
 80085d8:	2200      	movs	r2, #0
 80085da:	2100      	movs	r1, #0
 80085dc:	f001 fe1e 	bl	800a21c <xQueueGenericSend>
//  sl_wfx_driver_mutex = true;
  sl_wfx_wake_up_sem = xSemaphoreCreateBinary();
 80085e0:	2203      	movs	r2, #3
 80085e2:	2100      	movs	r1, #0
 80085e4:	2001      	movs	r0, #1
 80085e6:	f001 fd91 	bl	800a10c <xQueueGenericCreate>
 80085ea:	4603      	mov	r3, r0
 80085ec:	4a09      	ldr	r2, [pc, #36]	; (8008614 <sl_wfx_host_init+0x6c>)
 80085ee:	6013      	str	r3, [r2, #0]
  sl_wfx_confirmation_queue = xQueueCreate(1, sizeof(uint8_t));
 80085f0:	2200      	movs	r2, #0
 80085f2:	2101      	movs	r1, #1
 80085f4:	2001      	movs	r0, #1
 80085f6:	f001 fd89 	bl	800a10c <xQueueGenericCreate>
 80085fa:	4603      	mov	r3, r0
 80085fc:	4a06      	ldr	r2, [pc, #24]	; (8008618 <sl_wfx_host_init+0x70>)
 80085fe:	6013      	str	r3, [r2, #0]

  return SL_STATUS_OK;
 8008600:	2300      	movs	r3, #0
}
 8008602:	4618      	mov	r0, r3
 8008604:	bd80      	pop	{r7, pc}
 8008606:	bf00      	nop
 8008608:	20001344 	.word	0x20001344
 800860c:	20001340 	.word	0x20001340
 8008610:	2000133c 	.word	0x2000133c
 8008614:	20001338 	.word	0x20001338
 8008618:	20001334 	.word	0x20001334

0800861c <sl_wfx_host_get_firmware_data>:

/**************************************************************************//**
 * Get a firmware chunk
 *****************************************************************************/
sl_status_t sl_wfx_host_get_firmware_data (const uint8_t** data, uint32_t data_size) {
 800861c:	b480      	push	{r7}
 800861e:	b083      	sub	sp, #12
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
 8008624:	6039      	str	r1, [r7, #0]
  *data = &sl_wfx_firmware[host_context.sl_wfx_firmware_download_progress];
 8008626:	4b09      	ldr	r3, [pc, #36]	; (800864c <sl_wfx_host_get_firmware_data+0x30>)
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	4a09      	ldr	r2, [pc, #36]	; (8008650 <sl_wfx_host_get_firmware_data+0x34>)
 800862c:	441a      	add	r2, r3
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	601a      	str	r2, [r3, #0]
  host_context.sl_wfx_firmware_download_progress += data_size;
 8008632:	4b06      	ldr	r3, [pc, #24]	; (800864c <sl_wfx_host_get_firmware_data+0x30>)
 8008634:	681a      	ldr	r2, [r3, #0]
 8008636:	683b      	ldr	r3, [r7, #0]
 8008638:	4413      	add	r3, r2
 800863a:	4a04      	ldr	r2, [pc, #16]	; (800864c <sl_wfx_host_get_firmware_data+0x30>)
 800863c:	6013      	str	r3, [r2, #0]
  
  return SL_STATUS_OK;
 800863e:	2300      	movs	r3, #0
}
 8008640:	4618      	mov	r0, r3
 8008642:	370c      	adds	r7, #12
 8008644:	46bd      	mov	sp, r7
 8008646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864a:	4770      	bx	lr
 800864c:	20001344 	.word	0x20001344
 8008650:	08020acc 	.word	0x08020acc

08008654 <sl_wfx_host_get_firmware_size>:

/**************************************************************************//**
 * Get the firmware size
 *****************************************************************************/
sl_status_t sl_wfx_host_get_firmware_size (uint32_t* firmware_size) {
 8008654:	b480      	push	{r7}
 8008656:	b083      	sub	sp, #12
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
  *firmware_size = sizeof(sl_wfx_firmware);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	4a04      	ldr	r2, [pc, #16]	; (8008670 <sl_wfx_host_get_firmware_size+0x1c>)
 8008660:	601a      	str	r2, [r3, #0]
  
  return SL_STATUS_OK;
 8008662:	2300      	movs	r3, #0
}
 8008664:	4618      	mov	r0, r3
 8008666:	370c      	adds	r7, #12
 8008668:	46bd      	mov	sp, r7
 800866a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866e:	4770      	bx	lr
 8008670:	0004bc50 	.word	0x0004bc50

08008674 <sl_wfx_host_get_pds_data>:

/**************************************************************************//**
 * Get a PDS chunk
 *****************************************************************************/
sl_status_t sl_wfx_host_get_pds_data (const char **pds_data, uint16_t index) {
 8008674:	b580      	push	{r7, lr}
 8008676:	b082      	sub	sp, #8
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
 800867c:	460b      	mov	r3, r1
 800867e:	807b      	strh	r3, [r7, #2]
  /* Manage dynamically the PDS in function of the chip connected */
  if (strncmp("WFM200", (char *)sl_wfx_context->wfx_opn, 6) == 0) {
 8008680:	4b0e      	ldr	r3, [pc, #56]	; (80086bc <sl_wfx_host_get_pds_data+0x48>)
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008688:	2206      	movs	r2, #6
 800868a:	4619      	mov	r1, r3
 800868c:	480c      	ldr	r0, [pc, #48]	; (80086c0 <sl_wfx_host_get_pds_data+0x4c>)
 800868e:	f012 fc83 	bl	801af98 <strncmp>
 8008692:	4603      	mov	r3, r0
 8008694:	2b00      	cmp	r3, #0
 8008696:	d106      	bne.n	80086a6 <sl_wfx_host_get_pds_data+0x32>
    *pds_data = pds_table_brd8023a[index];
 8008698:	887b      	ldrh	r3, [r7, #2]
 800869a:	4a0a      	ldr	r2, [pc, #40]	; (80086c4 <sl_wfx_host_get_pds_data+0x50>)
 800869c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	601a      	str	r2, [r3, #0]
 80086a4:	e005      	b.n	80086b2 <sl_wfx_host_get_pds_data+0x3e>
  } else {
    *pds_data = pds_table_brd8022a[index];
 80086a6:	887b      	ldrh	r3, [r7, #2]
 80086a8:	4a07      	ldr	r2, [pc, #28]	; (80086c8 <sl_wfx_host_get_pds_data+0x54>)
 80086aa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	601a      	str	r2, [r3, #0]
  }
  
  return SL_STATUS_OK;
 80086b2:	2300      	movs	r3, #0
}
 80086b4:	4618      	mov	r0, r3
 80086b6:	3708      	adds	r7, #8
 80086b8:	46bd      	mov	sp, r7
 80086ba:	bd80      	pop	{r7, pc}
 80086bc:	200009fc 	.word	0x200009fc
 80086c0:	0801d7b0 	.word	0x0801d7b0
 80086c4:	08020ab4 	.word	0x08020ab4
 80086c8:	08020a9c 	.word	0x08020a9c

080086cc <sl_wfx_host_get_pds_size>:

/**************************************************************************//**
 * Get PDS size
 *****************************************************************************/
sl_status_t sl_wfx_host_get_pds_size(uint16_t *pds_size)
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b082      	sub	sp, #8
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
  /* Manage dynamically the PDS in function of the chip connected */
  if (strncmp("WFM200", (char *)sl_wfx_context->wfx_opn, 6) == 0) {
 80086d4:	4b0b      	ldr	r3, [pc, #44]	; (8008704 <sl_wfx_host_get_pds_size+0x38>)
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80086dc:	2206      	movs	r2, #6
 80086de:	4619      	mov	r1, r3
 80086e0:	4809      	ldr	r0, [pc, #36]	; (8008708 <sl_wfx_host_get_pds_size+0x3c>)
 80086e2:	f012 fc59 	bl	801af98 <strncmp>
 80086e6:	4603      	mov	r3, r0
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d103      	bne.n	80086f4 <sl_wfx_host_get_pds_size+0x28>
    *pds_size = SL_WFX_ARRAY_COUNT(pds_table_brd8023a);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2206      	movs	r2, #6
 80086f0:	801a      	strh	r2, [r3, #0]
 80086f2:	e002      	b.n	80086fa <sl_wfx_host_get_pds_size+0x2e>
  } else {
    *pds_size = SL_WFX_ARRAY_COUNT(pds_table_brd8022a);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2206      	movs	r2, #6
 80086f8:	801a      	strh	r2, [r3, #0]
  }
  
  return SL_STATUS_OK;
 80086fa:	2300      	movs	r3, #0
}
 80086fc:	4618      	mov	r0, r3
 80086fe:	3708      	adds	r7, #8
 8008700:	46bd      	mov	sp, r7
 8008702:	bd80      	pop	{r7, pc}
 8008704:	200009fc 	.word	0x200009fc
 8008708:	0801d7b0 	.word	0x0801d7b0

0800870c <sl_wfx_host_deinit>:

/**************************************************************************//**
 * Deinit the host resources
 *****************************************************************************/
sl_status_t sl_wfx_host_deinit (void) {
 800870c:	b480      	push	{r7}
 800870e:	af00      	add	r7, sp, #0
  //Commented for now, waiting for driver fix
  //vQueueDelete(wifi_event_queue);
  //vSemaphoreDelete(sl_wfx_driver_mutex);
  //vSemaphoreDelete(sl_wfx_wake_up_sem);

  return SL_STATUS_OK;
 8008710:	2300      	movs	r3, #0
}
 8008712:	4618      	mov	r0, r3
 8008714:	46bd      	mov	sp, r7
 8008716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871a:	4770      	bx	lr

0800871c <sl_wfx_host_reset_chip>:

/**************************************************************************//**
 * Reset the Wi-Fi device
 *****************************************************************************/
sl_status_t sl_wfx_host_reset_chip(void) {
 800871c:	b580      	push	{r7, lr}
 800871e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(WFM_RESET_GPIO_Port, WFM_RESET_Pin, GPIO_PIN_RESET);
 8008720:	2200      	movs	r2, #0
 8008722:	2101      	movs	r1, #1
 8008724:	4808      	ldr	r0, [pc, #32]	; (8008748 <sl_wfx_host_reset_chip+0x2c>)
 8008726:	f7fc fb6b 	bl	8004e00 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 800872a:	200a      	movs	r0, #10
 800872c:	f7fb fb8c 	bl	8003e48 <HAL_Delay>
  HAL_GPIO_WritePin(WFM_RESET_GPIO_Port, WFM_RESET_Pin, GPIO_PIN_SET);
 8008730:	2201      	movs	r2, #1
 8008732:	2101      	movs	r1, #1
 8008734:	4804      	ldr	r0, [pc, #16]	; (8008748 <sl_wfx_host_reset_chip+0x2c>)
 8008736:	f7fc fb63 	bl	8004e00 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 800873a:	200a      	movs	r0, #10
 800873c:	f7fb fb84 	bl	8003e48 <HAL_Delay>

  return SL_STATUS_OK;
 8008740:	2300      	movs	r3, #0
}
 8008742:	4618      	mov	r0, r3
 8008744:	bd80      	pop	{r7, pc}
 8008746:	bf00      	nop
 8008748:	40020800 	.word	0x40020800

0800874c <sl_wfx_host_set_wake_up_pin>:
}

/**************************************************************************//**
 * Set or reset the wake-up pin 
 *****************************************************************************/
sl_status_t sl_wfx_host_set_wake_up_pin (uint8_t state) {
 800874c:	b580      	push	{r7, lr}
 800874e:	b082      	sub	sp, #8
 8008750:	af00      	add	r7, sp, #0
 8008752:	4603      	mov	r3, r0
 8008754:	71fb      	strb	r3, [r7, #7]
  if (state > 0) {
 8008756:	79fb      	ldrb	r3, [r7, #7]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d006      	beq.n	800876a <sl_wfx_host_set_wake_up_pin+0x1e>
    HAL_GPIO_WritePin(WFM_WUP_GPIO_Port, WFM_WUP_Pin, GPIO_PIN_SET);
 800875c:	2201      	movs	r2, #1
 800875e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008762:	4807      	ldr	r0, [pc, #28]	; (8008780 <sl_wfx_host_set_wake_up_pin+0x34>)
 8008764:	f7fc fb4c 	bl	8004e00 <HAL_GPIO_WritePin>
 8008768:	e005      	b.n	8008776 <sl_wfx_host_set_wake_up_pin+0x2a>
  } else {
    HAL_GPIO_WritePin(WFM_WUP_GPIO_Port, WFM_WUP_Pin, GPIO_PIN_RESET);
 800876a:	2200      	movs	r2, #0
 800876c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008770:	4803      	ldr	r0, [pc, #12]	; (8008780 <sl_wfx_host_set_wake_up_pin+0x34>)
 8008772:	f7fc fb45 	bl	8004e00 <HAL_GPIO_WritePin>
  }
  
  return SL_STATUS_OK;
 8008776:	2300      	movs	r3, #0
}
 8008778:	4618      	mov	r0, r3
 800877a:	3708      	adds	r7, #8
 800877c:	46bd      	mov	sp, r7
 800877e:	bd80      	pop	{r7, pc}
 8008780:	40020400 	.word	0x40020400

08008784 <sl_wfx_host_wait_for_wake_up>:

/**************************************************************************//**
 * Wait for a wake-up
 *****************************************************************************/
sl_status_t sl_wfx_host_wait_for_wake_up (void) {
 8008784:	b580      	push	{r7, lr}
 8008786:	af00      	add	r7, sp, #0
  xSemaphoreTake(sl_wfx_wake_up_sem, 0);
 8008788:	4b07      	ldr	r3, [pc, #28]	; (80087a8 <sl_wfx_host_wait_for_wake_up+0x24>)
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	2100      	movs	r1, #0
 800878e:	4618      	mov	r0, r3
 8008790:	f002 f84a 	bl	800a828 <xQueueSemaphoreTake>
  xSemaphoreTake(sl_wfx_wake_up_sem, 3/portTICK_PERIOD_MS);
 8008794:	4b04      	ldr	r3, [pc, #16]	; (80087a8 <sl_wfx_host_wait_for_wake_up+0x24>)
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	2101      	movs	r1, #1
 800879a:	4618      	mov	r0, r3
 800879c:	f002 f844 	bl	800a828 <xQueueSemaphoreTake>

  return SL_STATUS_OK;
 80087a0:	2300      	movs	r3, #0
}
 80087a2:	4618      	mov	r0, r3
 80087a4:	bd80      	pop	{r7, pc}
 80087a6:	bf00      	nop
 80087a8:	20001338 	.word	0x20001338

080087ac <sl_wfx_host_sleep_grant>:
/**************************************************************************//**
 * Grant the Wi-Fi device to go to sleep mode
 *****************************************************************************/
sl_status_t sl_wfx_host_sleep_grant (sl_wfx_host_bus_transfer_type_t type,
                                     sl_wfx_register_address_t address,
                                     uint32_t length) {
 80087ac:	b480      	push	{r7}
 80087ae:	b083      	sub	sp, #12
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	4603      	mov	r3, r0
 80087b4:	603a      	str	r2, [r7, #0]
 80087b6:	71fb      	strb	r3, [r7, #7]
 80087b8:	460b      	mov	r3, r1
 80087ba:	71bb      	strb	r3, [r7, #6]
  /* To be implemented depending on the application */ 
  return SL_STATUS_WIFI_SLEEP_GRANTED;
 80087bc:	f640 3308 	movw	r3, #2824	; 0xb08
}
 80087c0:	4618      	mov	r0, r3
 80087c2:	370c      	adds	r7, #12
 80087c4:	46bd      	mov	sp, r7
 80087c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ca:	4770      	bx	lr

080087cc <sl_wfx_host_setup_waited_event>:

/**************************************************************************//**
 * Set up a waited event
 *****************************************************************************/
sl_status_t sl_wfx_host_setup_waited_event (uint8_t event_id) {
 80087cc:	b480      	push	{r7}
 80087ce:	b083      	sub	sp, #12
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	4603      	mov	r3, r0
 80087d4:	71fb      	strb	r3, [r7, #7]
  host_context.waited_event_id = event_id;
 80087d6:	4a05      	ldr	r2, [pc, #20]	; (80087ec <sl_wfx_host_setup_waited_event+0x20>)
 80087d8:	79fb      	ldrb	r3, [r7, #7]
 80087da:	7113      	strb	r3, [r2, #4]
  
  return SL_STATUS_OK;
 80087dc:	2300      	movs	r3, #0
}
 80087de:	4618      	mov	r0, r3
 80087e0:	370c      	adds	r7, #12
 80087e2:	46bd      	mov	sp, r7
 80087e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e8:	4770      	bx	lr
 80087ea:	bf00      	nop
 80087ec:	20001344 	.word	0x20001344

080087f0 <sl_wfx_host_wait_for_confirmation>:
/**************************************************************************//**
 * Wait for a confirmation
 *****************************************************************************/
sl_status_t sl_wfx_host_wait_for_confirmation (uint8_t confirmation_id,
                                               uint32_t timeout_ms,
                                               void **event_payload_out) {
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b086      	sub	sp, #24
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	4603      	mov	r3, r0
 80087f8:	60b9      	str	r1, [r7, #8]
 80087fa:	607a      	str	r2, [r7, #4]
 80087fc:	73fb      	strb	r3, [r7, #15]
  uint8_t posted_event_id;
  
  for (uint32_t i = 0; i < timeout_ms; i++) {
 80087fe:	2300      	movs	r3, #0
 8008800:	617b      	str	r3, [r7, #20]
 8008802:	e01b      	b.n	800883c <sl_wfx_host_wait_for_confirmation+0x4c>
    /* Wait for an event posted by the function sl_wfx_host_post_event() */
    if (xQueueReceive(sl_wfx_confirmation_queue, &posted_event_id, 1) == pdTRUE) {
 8008804:	4b12      	ldr	r3, [pc, #72]	; (8008850 <sl_wfx_host_wait_for_confirmation+0x60>)
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	f107 0113 	add.w	r1, r7, #19
 800880c:	2201      	movs	r2, #1
 800880e:	4618      	mov	r0, r3
 8008810:	f001 ff2a 	bl	800a668 <xQueueReceive>
 8008814:	4603      	mov	r3, r0
 8008816:	2b01      	cmp	r3, #1
 8008818:	d10d      	bne.n	8008836 <sl_wfx_host_wait_for_confirmation+0x46>
      /* Once a message is received, check if it is the expected ID */
      if (confirmation_id == posted_event_id) {
 800881a:	7cfb      	ldrb	r3, [r7, #19]
 800881c:	7bfa      	ldrb	r2, [r7, #15]
 800881e:	429a      	cmp	r2, r3
 8008820:	d109      	bne.n	8008836 <sl_wfx_host_wait_for_confirmation+0x46>
        /* Pass the confirmation reply and return*/
        if (event_payload_out != NULL) {
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d004      	beq.n	8008832 <sl_wfx_host_wait_for_confirmation+0x42>
          *event_payload_out = sl_wfx_context->event_payload_buffer;
 8008828:	4b0a      	ldr	r3, [pc, #40]	; (8008854 <sl_wfx_host_wait_for_confirmation+0x64>)
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	461a      	mov	r2, r3
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	601a      	str	r2, [r3, #0]
        }
        return SL_STATUS_OK;
 8008832:	2300      	movs	r3, #0
 8008834:	e007      	b.n	8008846 <sl_wfx_host_wait_for_confirmation+0x56>
  for (uint32_t i = 0; i < timeout_ms; i++) {
 8008836:	697b      	ldr	r3, [r7, #20]
 8008838:	3301      	adds	r3, #1
 800883a:	617b      	str	r3, [r7, #20]
 800883c:	697a      	ldr	r2, [r7, #20]
 800883e:	68bb      	ldr	r3, [r7, #8]
 8008840:	429a      	cmp	r2, r3
 8008842:	d3df      	bcc.n	8008804 <sl_wfx_host_wait_for_confirmation+0x14>
      }
    }
  }
  
  /* The wait for the confirmation timed out, return */
  return SL_STATUS_TIMEOUT;
 8008844:	2307      	movs	r3, #7
}
 8008846:	4618      	mov	r0, r3
 8008848:	3718      	adds	r7, #24
 800884a:	46bd      	mov	sp, r7
 800884c:	bd80      	pop	{r7, pc}
 800884e:	bf00      	nop
 8008850:	20001334 	.word	0x20001334
 8008854:	200009fc 	.word	0x200009fc

08008858 <sl_wfx_host_wait>:

/**************************************************************************//**
 * Wait function
 *****************************************************************************/
sl_status_t sl_wfx_host_wait (uint32_t wait_time) {
 8008858:	b580      	push	{r7, lr}
 800885a:	b082      	sub	sp, #8
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
  osDelay(wait_time);
 8008860:	6878      	ldr	r0, [r7, #4]
 8008862:	f001 f80b 	bl	800987c <osDelay>
  
  return SL_STATUS_OK;
 8008866:	2300      	movs	r3, #0
}
 8008868:	4618      	mov	r0, r3
 800886a:	3708      	adds	r7, #8
 800886c:	46bd      	mov	sp, r7
 800886e:	bd80      	pop	{r7, pc}

08008870 <sl_wfx_host_post_event>:

/**************************************************************************//**
 * Post an event comming from the Wi-Fi device
 *****************************************************************************/
sl_status_t sl_wfx_host_post_event (sl_wfx_generic_message_t *event_payload) {
 8008870:	b580      	push	{r7, lr}
 8008872:	b08a      	sub	sp, #40	; 0x28
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
  
  switch (event_payload->header.id) {
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	789b      	ldrb	r3, [r3, #2]
 800887c:	3bc3      	subs	r3, #195	; 0xc3
 800887e:	2b21      	cmp	r3, #33	; 0x21
 8008880:	f200 80f3 	bhi.w	8008a6a <sl_wfx_host_post_event+0x1fa>
 8008884:	a201      	add	r2, pc, #4	; (adr r2, 800888c <sl_wfx_host_post_event+0x1c>)
 8008886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800888a:	bf00      	nop
 800888c:	08008915 	.word	0x08008915
 8008890:	0800891d 	.word	0x0800891d
 8008894:	08008925 	.word	0x08008925
 8008898:	08008a6b 	.word	0x08008a6b
 800889c:	0800892d 	.word	0x0800892d
 80088a0:	08008a6b 	.word	0x08008a6b
 80088a4:	08008a6b 	.word	0x08008a6b
 80088a8:	08008935 	.word	0x08008935
 80088ac:	0800894b 	.word	0x0800894b
 80088b0:	08008953 	.word	0x08008953
 80088b4:	0800895b 	.word	0x0800895b
 80088b8:	08008963 	.word	0x08008963
 80088bc:	0800896b 	.word	0x0800896b
 80088c0:	08008a6b 	.word	0x08008a6b
 80088c4:	08008a6b 	.word	0x08008a6b
 80088c8:	08008973 	.word	0x08008973
 80088cc:	08008a6b 	.word	0x08008a6b
 80088d0:	08008a6b 	.word	0x08008a6b
 80088d4:	08008a6b 	.word	0x08008a6b
 80088d8:	08008a6b 	.word	0x08008a6b
 80088dc:	08008a6b 	.word	0x08008a6b
 80088e0:	08008a6b 	.word	0x08008a6b
 80088e4:	08008a6b 	.word	0x08008a6b
 80088e8:	08008a6b 	.word	0x08008a6b
 80088ec:	08008a6b 	.word	0x08008a6b
 80088f0:	08008a6b 	.word	0x08008a6b
 80088f4:	08008a6b 	.word	0x08008a6b
 80088f8:	08008a6b 	.word	0x08008a6b
 80088fc:	08008a6b 	.word	0x08008a6b
 8008900:	0800897b 	.word	0x0800897b
 8008904:	08008a6b 	.word	0x08008a6b
 8008908:	08008a6b 	.word	0x08008a6b
 800890c:	08008a6b 	.word	0x08008a6b
 8008910:	080089f7 	.word	0x080089f7
    /******** INDICATION ********/
  case SL_WFX_CONNECT_IND_ID:
    {
      sl_wfx_connect_callback((sl_wfx_connect_ind_t*) event_payload);
 8008914:	6878      	ldr	r0, [r7, #4]
 8008916:	f000 fa41 	bl	8008d9c <sl_wfx_connect_callback>
      break;
 800891a:	e0a6      	b.n	8008a6a <sl_wfx_host_post_event+0x1fa>
    }
  case SL_WFX_DISCONNECT_IND_ID:
    {
      sl_wfx_disconnect_callback((sl_wfx_disconnect_ind_t*) event_payload);
 800891c:	6878      	ldr	r0, [r7, #4]
 800891e:	f000 fb4d 	bl	8008fbc <sl_wfx_disconnect_callback>
      break;
 8008922:	e0a2      	b.n	8008a6a <sl_wfx_host_post_event+0x1fa>
    }
  case SL_WFX_START_AP_IND_ID:
    {
      sl_wfx_start_ap_callback((sl_wfx_start_ap_ind_t*) event_payload);
 8008924:	6878      	ldr	r0, [r7, #4]
 8008926:	f000 fb87 	bl	8009038 <sl_wfx_start_ap_callback>
      break;
 800892a:	e09e      	b.n	8008a6a <sl_wfx_host_post_event+0x1fa>
    }
  case SL_WFX_STOP_AP_IND_ID:
    {
      sl_wfx_stop_ap_callback((sl_wfx_stop_ap_ind_t*) event_payload);
 800892c:	6878      	ldr	r0, [r7, #4]
 800892e:	f000 fbdd 	bl	80090ec <sl_wfx_stop_ap_callback>
      break;
 8008932:	e09a      	b.n	8008a6a <sl_wfx_host_post_event+0x1fa>
    }
  case SL_WFX_RECEIVED_IND_ID:
    {
      sl_wfx_received_ind_t* ethernet_frame = (sl_wfx_received_ind_t*) event_payload;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	60fb      	str	r3, [r7, #12]
      if ( ethernet_frame->body.frame_type == 0 )
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	791b      	ldrb	r3, [r3, #4]
 800893c:	2b00      	cmp	r3, #0
 800893e:	f040 8093 	bne.w	8008a68 <sl_wfx_host_post_event+0x1f8>
      {
        sl_wfx_host_received_frame_callback(ethernet_frame);
 8008942:	68f8      	ldr	r0, [r7, #12]
 8008944:	f7fa f932 	bl	8002bac <sl_wfx_host_received_frame_callback>
      }
      break;
 8008948:	e08e      	b.n	8008a68 <sl_wfx_host_post_event+0x1f8>
    }
  case SL_WFX_SCAN_RESULT_IND_ID:
    {
      sl_wfx_scan_result_callback((sl_wfx_scan_result_ind_t*) event_payload);
 800894a:	6878      	ldr	r0, [r7, #4]
 800894c:	f000 f92e 	bl	8008bac <sl_wfx_scan_result_callback>
      break;
 8008950:	e08b      	b.n	8008a6a <sl_wfx_host_post_event+0x1fa>
    }
  case SL_WFX_SCAN_COMPLETE_IND_ID:
    {
      sl_wfx_scan_complete_callback((sl_wfx_scan_complete_ind_t*) event_payload);
 8008952:	6878      	ldr	r0, [r7, #4]
 8008954:	f000 f9ee 	bl	8008d34 <sl_wfx_scan_complete_callback>
      break;
 8008958:	e087      	b.n	8008a6a <sl_wfx_host_post_event+0x1fa>
    }
  case SL_WFX_AP_CLIENT_CONNECTED_IND_ID:
    {
      sl_wfx_ap_client_connected_callback((sl_wfx_ap_client_connected_ind_t*) event_payload);
 800895a:	6878      	ldr	r0, [r7, #4]
 800895c:	f000 fc02 	bl	8009164 <sl_wfx_ap_client_connected_callback>
      break;
 8008960:	e083      	b.n	8008a6a <sl_wfx_host_post_event+0x1fa>
    }
  case SL_WFX_AP_CLIENT_REJECTED_IND_ID:
    {
      sl_wfx_ap_client_rejected_callback((sl_wfx_ap_client_rejected_ind_t*) event_payload);
 8008962:	6878      	ldr	r0, [r7, #4]
 8008964:	f000 fc3c 	bl	80091e0 <sl_wfx_ap_client_rejected_callback>
      break;
 8008968:	e07f      	b.n	8008a6a <sl_wfx_host_post_event+0x1fa>
    }
  case SL_WFX_AP_CLIENT_DISCONNECTED_IND_ID:
    {
      sl_wfx_ap_client_disconnected_callback((sl_wfx_ap_client_disconnected_ind_t*) event_payload);
 800896a:	6878      	ldr	r0, [r7, #4]
 800896c:	f000 fc6e 	bl	800924c <sl_wfx_ap_client_disconnected_callback>
      break;
 8008970:	e07b      	b.n	8008a6a <sl_wfx_host_post_event+0x1fa>
    }
  case SL_WFX_EXT_AUTH_IND_ID:
    {
      sl_wfx_ext_auth_callback((sl_wfx_ext_auth_ind_t*) event_payload);
 8008972:	6878      	ldr	r0, [r7, #4]
 8008974:	f000 fca0 	bl	80092b8 <sl_wfx_ext_auth_callback>
      break;
 8008978:	e077      	b.n	8008a6a <sl_wfx_host_post_event+0x1fa>
    {
      break;
    }
  case SL_WFX_EXCEPTION_IND_ID:
    {
      sl_wfx_exception_ind_t *firmware_exception = (sl_wfx_exception_ind_t*)event_payload;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	613b      	str	r3, [r7, #16]
      uint8_t *exception_tmp = (uint8_t *) firmware_exception;
 800897e:	693b      	ldr	r3, [r7, #16]
 8008980:	627b      	str	r3, [r7, #36]	; 0x24
      printf("firmware exception %lu\r\n", firmware_exception->body.reason);
 8008982:	693b      	ldr	r3, [r7, #16]
 8008984:	685b      	ldr	r3, [r3, #4]
 8008986:	4619      	mov	r1, r3
 8008988:	4849      	ldr	r0, [pc, #292]	; (8008ab0 <sl_wfx_host_post_event+0x240>)
 800898a:	f012 fa21 	bl	801add0 <iprintf>
      for (uint16_t i = 0; i < firmware_exception->header.length; i += 16) {
 800898e:	2300      	movs	r3, #0
 8008990:	847b      	strh	r3, [r7, #34]	; 0x22
 8008992:	e029      	b.n	80089e8 <sl_wfx_host_post_event+0x178>
        printf("hif: %.8x:", i);
 8008994:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008996:	4619      	mov	r1, r3
 8008998:	4846      	ldr	r0, [pc, #280]	; (8008ab4 <sl_wfx_host_post_event+0x244>)
 800899a:	f012 fa19 	bl	801add0 <iprintf>
        for (uint8_t j = 0; (j < 16) && ((i + j) < firmware_exception->header.length); j ++) {
 800899e:	2300      	movs	r3, #0
 80089a0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 80089a4:	e00d      	b.n	80089c2 <sl_wfx_host_post_event+0x152>
            printf(" %.2x", *exception_tmp);
 80089a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089a8:	781b      	ldrb	r3, [r3, #0]
 80089aa:	4619      	mov	r1, r3
 80089ac:	4842      	ldr	r0, [pc, #264]	; (8008ab8 <sl_wfx_host_post_event+0x248>)
 80089ae:	f012 fa0f 	bl	801add0 <iprintf>
            exception_tmp++;
 80089b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089b4:	3301      	adds	r3, #1
 80089b6:	627b      	str	r3, [r7, #36]	; 0x24
        for (uint8_t j = 0; (j < 16) && ((i + j) < firmware_exception->header.length); j ++) {
 80089b8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80089bc:	3301      	adds	r3, #1
 80089be:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 80089c2:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80089c6:	2b0f      	cmp	r3, #15
 80089c8:	d808      	bhi.n	80089dc <sl_wfx_host_post_event+0x16c>
 80089ca:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80089cc:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80089d0:	4413      	add	r3, r2
 80089d2:	693a      	ldr	r2, [r7, #16]
 80089d4:	8812      	ldrh	r2, [r2, #0]
 80089d6:	b292      	uxth	r2, r2
 80089d8:	4293      	cmp	r3, r2
 80089da:	dbe4      	blt.n	80089a6 <sl_wfx_host_post_event+0x136>
        }
        printf("\r\n");
 80089dc:	4837      	ldr	r0, [pc, #220]	; (8008abc <sl_wfx_host_post_event+0x24c>)
 80089de:	f012 fa7d 	bl	801aedc <puts>
      for (uint16_t i = 0; i < firmware_exception->header.length; i += 16) {
 80089e2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80089e4:	3310      	adds	r3, #16
 80089e6:	847b      	strh	r3, [r7, #34]	; 0x22
 80089e8:	693b      	ldr	r3, [r7, #16]
 80089ea:	881b      	ldrh	r3, [r3, #0]
 80089ec:	b29b      	uxth	r3, r3
 80089ee:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80089f0:	429a      	cmp	r2, r3
 80089f2:	d3cf      	bcc.n	8008994 <sl_wfx_host_post_event+0x124>
      }
      break;
 80089f4:	e039      	b.n	8008a6a <sl_wfx_host_post_event+0x1fa>
    }
  case SL_WFX_ERROR_IND_ID:
    {
      sl_wfx_error_ind_t *firmware_error = (sl_wfx_error_ind_t*)event_payload;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	617b      	str	r3, [r7, #20]
      uint8_t *error_tmp = (uint8_t *) firmware_error;
 80089fa:	697b      	ldr	r3, [r7, #20]
 80089fc:	61fb      	str	r3, [r7, #28]
      printf("firmware error %lu\r\n", firmware_error->body.type);
 80089fe:	697b      	ldr	r3, [r7, #20]
 8008a00:	685b      	ldr	r3, [r3, #4]
 8008a02:	4619      	mov	r1, r3
 8008a04:	482e      	ldr	r0, [pc, #184]	; (8008ac0 <sl_wfx_host_post_event+0x250>)
 8008a06:	f012 f9e3 	bl	801add0 <iprintf>
      for (uint16_t i = 0; i < firmware_error->header.length; i += 16) {
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	837b      	strh	r3, [r7, #26]
 8008a0e:	e024      	b.n	8008a5a <sl_wfx_host_post_event+0x1ea>
        printf("hif: %.8x:", i);
 8008a10:	8b7b      	ldrh	r3, [r7, #26]
 8008a12:	4619      	mov	r1, r3
 8008a14:	4827      	ldr	r0, [pc, #156]	; (8008ab4 <sl_wfx_host_post_event+0x244>)
 8008a16:	f012 f9db 	bl	801add0 <iprintf>
        for (uint8_t j = 0; (j < 16) && ((i + j) < firmware_error->header.length); j ++) {
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	767b      	strb	r3, [r7, #25]
 8008a1e:	e00b      	b.n	8008a38 <sl_wfx_host_post_event+0x1c8>
            printf(" %.2x", *error_tmp);
 8008a20:	69fb      	ldr	r3, [r7, #28]
 8008a22:	781b      	ldrb	r3, [r3, #0]
 8008a24:	4619      	mov	r1, r3
 8008a26:	4824      	ldr	r0, [pc, #144]	; (8008ab8 <sl_wfx_host_post_event+0x248>)
 8008a28:	f012 f9d2 	bl	801add0 <iprintf>
            error_tmp++;
 8008a2c:	69fb      	ldr	r3, [r7, #28]
 8008a2e:	3301      	adds	r3, #1
 8008a30:	61fb      	str	r3, [r7, #28]
        for (uint8_t j = 0; (j < 16) && ((i + j) < firmware_error->header.length); j ++) {
 8008a32:	7e7b      	ldrb	r3, [r7, #25]
 8008a34:	3301      	adds	r3, #1
 8008a36:	767b      	strb	r3, [r7, #25]
 8008a38:	7e7b      	ldrb	r3, [r7, #25]
 8008a3a:	2b0f      	cmp	r3, #15
 8008a3c:	d807      	bhi.n	8008a4e <sl_wfx_host_post_event+0x1de>
 8008a3e:	8b7a      	ldrh	r2, [r7, #26]
 8008a40:	7e7b      	ldrb	r3, [r7, #25]
 8008a42:	4413      	add	r3, r2
 8008a44:	697a      	ldr	r2, [r7, #20]
 8008a46:	8812      	ldrh	r2, [r2, #0]
 8008a48:	b292      	uxth	r2, r2
 8008a4a:	4293      	cmp	r3, r2
 8008a4c:	dbe8      	blt.n	8008a20 <sl_wfx_host_post_event+0x1b0>
        }
        printf("\r\n");
 8008a4e:	481b      	ldr	r0, [pc, #108]	; (8008abc <sl_wfx_host_post_event+0x24c>)
 8008a50:	f012 fa44 	bl	801aedc <puts>
      for (uint16_t i = 0; i < firmware_error->header.length; i += 16) {
 8008a54:	8b7b      	ldrh	r3, [r7, #26]
 8008a56:	3310      	adds	r3, #16
 8008a58:	837b      	strh	r3, [r7, #26]
 8008a5a:	697b      	ldr	r3, [r7, #20]
 8008a5c:	881b      	ldrh	r3, [r3, #0]
 8008a5e:	b29b      	uxth	r3, r3
 8008a60:	8b7a      	ldrh	r2, [r7, #26]
 8008a62:	429a      	cmp	r2, r3
 8008a64:	d3d4      	bcc.n	8008a10 <sl_wfx_host_post_event+0x1a0>
      }
      break;
 8008a66:	e000      	b.n	8008a6a <sl_wfx_host_post_event+0x1fa>
      break;
 8008a68:	bf00      	nop
    }
  }

  if (host_context.waited_event_id == event_payload->header.id) {
 8008a6a:	4b16      	ldr	r3, [pc, #88]	; (8008ac4 <sl_wfx_host_post_event+0x254>)
 8008a6c:	791a      	ldrb	r2, [r3, #4]
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	789b      	ldrb	r3, [r3, #2]
 8008a72:	429a      	cmp	r2, r3
 8008a74:	d117      	bne.n	8008aa6 <sl_wfx_host_post_event+0x236>
    if (event_payload->header.length < SL_WFX_EVENT_MAX_SIZE) {
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	881b      	ldrh	r3, [r3, #0]
 8008a7a:	b29b      	uxth	r3, r3
 8008a7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a80:	d211      	bcs.n	8008aa6 <sl_wfx_host_post_event+0x236>
      /* Post the event in the queue */
      memcpy(sl_wfx_context->event_payload_buffer,
 8008a82:	4b11      	ldr	r3, [pc, #68]	; (8008ac8 <sl_wfx_host_post_event+0x258>)
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	4618      	mov	r0, r3
             (void*) event_payload,
             event_payload->header.length);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	881b      	ldrh	r3, [r3, #0]
 8008a8c:	b29b      	uxth	r3, r3
      memcpy(sl_wfx_context->event_payload_buffer,
 8008a8e:	461a      	mov	r2, r3
 8008a90:	6879      	ldr	r1, [r7, #4]
 8008a92:	f011 fc27 	bl	801a2e4 <memcpy>
      xQueueOverwrite(sl_wfx_confirmation_queue, (void *) &event_payload->header.id);
 8008a96:	4b0d      	ldr	r3, [pc, #52]	; (8008acc <sl_wfx_host_post_event+0x25c>)
 8008a98:	6818      	ldr	r0, [r3, #0]
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	1c99      	adds	r1, r3, #2
 8008a9e:	2302      	movs	r3, #2
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	f001 fbbb 	bl	800a21c <xQueueGenericSend>


    }
  }

  return SL_STATUS_OK;
 8008aa6:	2300      	movs	r3, #0
}
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	3728      	adds	r7, #40	; 0x28
 8008aac:	46bd      	mov	sp, r7
 8008aae:	bd80      	pop	{r7, pc}
 8008ab0:	0801d7b8 	.word	0x0801d7b8
 8008ab4:	0801d7d4 	.word	0x0801d7d4
 8008ab8:	0801d7e0 	.word	0x0801d7e0
 8008abc:	0801d7e8 	.word	0x0801d7e8
 8008ac0:	0801d7ec 	.word	0x0801d7ec
 8008ac4:	20001344 	.word	0x20001344
 8008ac8:	200009fc 	.word	0x200009fc
 8008acc:	20001334 	.word	0x20001334

08008ad0 <sl_wfx_host_allocate_buffer>:
/**************************************************************************//**
 * Allocate a buffer
 *****************************************************************************/
sl_status_t sl_wfx_host_allocate_buffer (void** buffer,
                                         sl_wfx_buffer_type_t type,
                                         uint32_t buffer_size) {
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	b084      	sub	sp, #16
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	60f8      	str	r0, [r7, #12]
 8008ad8:	460b      	mov	r3, r1
 8008ada:	607a      	str	r2, [r7, #4]
 8008adc:	72fb      	strb	r3, [r7, #11]
  *buffer = pvPortMalloc( buffer_size);
 8008ade:	6878      	ldr	r0, [r7, #4]
 8008ae0:	f004 f882 	bl	800cbe8 <pvPortMalloc>
 8008ae4:	4602      	mov	r2, r0
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	601a      	str	r2, [r3, #0]
  
  return SL_STATUS_OK;
 8008aea:	2300      	movs	r3, #0
}
 8008aec:	4618      	mov	r0, r3
 8008aee:	3710      	adds	r7, #16
 8008af0:	46bd      	mov	sp, r7
 8008af2:	bd80      	pop	{r7, pc}

08008af4 <sl_wfx_host_free_buffer>:

/**************************************************************************//**
 * Free a buffer
 *****************************************************************************/
sl_status_t sl_wfx_host_free_buffer (void* buffer, sl_wfx_buffer_type_t type) {
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b082      	sub	sp, #8
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
 8008afc:	460b      	mov	r3, r1
 8008afe:	70fb      	strb	r3, [r7, #3]
  vPortFree(buffer);
 8008b00:	6878      	ldr	r0, [r7, #4]
 8008b02:	f004 f93d 	bl	800cd80 <vPortFree>
  
  return SL_STATUS_OK;
 8008b06:	2300      	movs	r3, #0
}
 8008b08:	4618      	mov	r0, r3
 8008b0a:	3708      	adds	r7, #8
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	bd80      	pop	{r7, pc}

08008b10 <sl_wfx_host_transmit_frame>:

/**************************************************************************//**
 * Host transmit frame
 *****************************************************************************/
sl_status_t sl_wfx_host_transmit_frame (void* frame, uint32_t frame_len) {
 8008b10:	b580      	push	{r7, lr}
 8008b12:	b082      	sub	sp, #8
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
 8008b18:	6039      	str	r1, [r7, #0]
  return sl_wfx_data_write(frame, frame_len);
 8008b1a:	6839      	ldr	r1, [r7, #0]
 8008b1c:	6878      	ldr	r0, [r7, #4]
 8008b1e:	f7fe faa9 	bl	8007074 <sl_wfx_data_write>
 8008b22:	4603      	mov	r3, r0
}
 8008b24:	4618      	mov	r0, r3
 8008b26:	3708      	adds	r7, #8
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	bd80      	pop	{r7, pc}

08008b2c <sl_wfx_host_log>:

/**************************************************************************//**
 * Output driver logs
 *****************************************************************************/
#if SL_WFX_DEBUG_MASK
void sl_wfx_host_log (const char *string, ...) {
 8008b2c:	b40f      	push	{r0, r1, r2, r3}
 8008b2e:	b580      	push	{r7, lr}
 8008b30:	b082      	sub	sp, #8
 8008b32:	af00      	add	r7, sp, #0
  va_list valist;

  va_start(valist, string);
 8008b34:	f107 0314 	add.w	r3, r7, #20
 8008b38:	607b      	str	r3, [r7, #4]
  vprintf(string, valist);
 8008b3a:	6879      	ldr	r1, [r7, #4]
 8008b3c:	6938      	ldr	r0, [r7, #16]
 8008b3e:	f012 facf 	bl	801b0e0 <viprintf>
  va_end(valist);
}
 8008b42:	bf00      	nop
 8008b44:	3708      	adds	r7, #8
 8008b46:	46bd      	mov	sp, r7
 8008b48:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008b4c:	b004      	add	sp, #16
 8008b4e:	4770      	bx	lr

08008b50 <sl_wfx_host_lock>:
#endif

/**************************************************************************//**
 * Lock the driver mutex
 *****************************************************************************/
sl_status_t sl_wfx_host_lock (void) {
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b082      	sub	sp, #8
 8008b54:	af00      	add	r7, sp, #0
  sl_status_t status = SL_STATUS_TIMEOUT;
 8008b56:	2307      	movs	r3, #7
 8008b58:	607b      	str	r3, [r7, #4]

if (xSemaphoreTake(sl_wfx_driver_mutex, 500) == pdTRUE) {
 8008b5a:	4b0b      	ldr	r3, [pc, #44]	; (8008b88 <sl_wfx_host_lock+0x38>)
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8008b62:	4618      	mov	r0, r3
 8008b64:	f001 fe60 	bl	800a828 <xQueueSemaphoreTake>
 8008b68:	4603      	mov	r3, r0
 8008b6a:	2b01      	cmp	r3, #1
 8008b6c:	d102      	bne.n	8008b74 <sl_wfx_host_lock+0x24>
//	  if (sl_wfx_driver_mutex) {
//		  sl_wfx_driver_mutex = false;
	      status = SL_STATUS_OK;
 8008b6e:	2300      	movs	r3, #0
 8008b70:	607b      	str	r3, [r7, #4]
 8008b72:	e004      	b.n	8008b7e <sl_wfx_host_lock+0x2e>
	    } else {
	      printf("Wi-Fi driver mutex timeout\r\n");
 8008b74:	4805      	ldr	r0, [pc, #20]	; (8008b8c <sl_wfx_host_lock+0x3c>)
 8008b76:	f012 f9b1 	bl	801aedc <puts>
	      status = SL_STATUS_TIMEOUT;
 8008b7a:	2307      	movs	r3, #7
 8008b7c:	607b      	str	r3, [r7, #4]
	    }

  return status;
 8008b7e:	687b      	ldr	r3, [r7, #4]
}
 8008b80:	4618      	mov	r0, r3
 8008b82:	3708      	adds	r7, #8
 8008b84:	46bd      	mov	sp, r7
 8008b86:	bd80      	pop	{r7, pc}
 8008b88:	2000133c 	.word	0x2000133c
 8008b8c:	0801d804 	.word	0x0801d804

08008b90 <sl_wfx_host_unlock>:

/**************************************************************************//**
 * Unlock the driver mutex
 *****************************************************************************/
sl_status_t sl_wfx_host_unlock (void) {
 8008b90:	b580      	push	{r7, lr}
 8008b92:	af00      	add	r7, sp, #0
	xSemaphoreGive(sl_wfx_driver_mutex);
 8008b94:	4b04      	ldr	r3, [pc, #16]	; (8008ba8 <sl_wfx_host_unlock+0x18>)
 8008b96:	6818      	ldr	r0, [r3, #0]
 8008b98:	2300      	movs	r3, #0
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	2100      	movs	r1, #0
 8008b9e:	f001 fb3d 	bl	800a21c <xQueueGenericSend>
	//sl_wfx_driver_mutex = true;
  return SL_STATUS_OK;
 8008ba2:	2300      	movs	r3, #0
}
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	bd80      	pop	{r7, pc}
 8008ba8:	2000133c 	.word	0x2000133c

08008bac <sl_wfx_scan_result_callback>:


/**************************************************************************//**
 * Callback for individual scan result
 *****************************************************************************/
void sl_wfx_scan_result_callback (sl_wfx_scan_result_ind_t *scan_result) {
 8008bac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008bb0:	b08a      	sub	sp, #40	; 0x28
 8008bb2:	af08      	add	r7, sp, #32
 8008bb4:	6078      	str	r0, [r7, #4]
  scan_count++;
 8008bb6:	4b5b      	ldr	r3, [pc, #364]	; (8008d24 <sl_wfx_scan_result_callback+0x178>)
 8008bb8:	781b      	ldrb	r3, [r3, #0]
 8008bba:	3301      	adds	r3, #1
 8008bbc:	b2da      	uxtb	r2, r3
 8008bbe:	4b59      	ldr	r3, [pc, #356]	; (8008d24 <sl_wfx_scan_result_callback+0x178>)
 8008bc0:	701a      	strb	r2, [r3, #0]

  if (scan_verbose) {
 8008bc2:	4b59      	ldr	r3, [pc, #356]	; (8008d28 <sl_wfx_scan_result_callback+0x17c>)
 8008bc4:	781b      	ldrb	r3, [r3, #0]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d03e      	beq.n	8008c48 <sl_wfx_scan_result_callback+0x9c>
    /*Report one AP information*/
    printf(
 8008bca:	4b56      	ldr	r3, [pc, #344]	; (8008d24 <sl_wfx_scan_result_callback+0x178>)
 8008bcc:	781b      	ldrb	r3, [r3, #0]
 8008bce:	469c      	mov	ip, r3
        "# %2d %2d %02X %03d %02X:%02X:%02X:%02X:%02X:%02X  %s\r\n",
        scan_count,
        scan_result->body.channel,
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008bd4:	b29b      	uxth	r3, r3
    printf(
 8008bd6:	469e      	mov	lr, r3
        *(uint8_t *)&scan_result->body.security_mode,
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	3330      	adds	r3, #48	; 0x30
 8008bdc:	781b      	ldrb	r3, [r3, #0]
    printf(
 8008bde:	4698      	mov	r8, r3
        ((int16_t)(scan_result->body.rcpi - 220) / 2),
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8008be4:	b29b      	uxth	r3, r3
 8008be6:	3bdc      	subs	r3, #220	; 0xdc
 8008be8:	b29b      	uxth	r3, r3
 8008bea:	b21b      	sxth	r3, r3
    printf(
 8008bec:	0fda      	lsrs	r2, r3, #31
 8008bee:	4413      	add	r3, r2
 8008bf0:	105b      	asrs	r3, r3, #1
 8008bf2:	b21b      	sxth	r3, r3
 8008bf4:	461a      	mov	r2, r3
        scan_result->body.mac[0], scan_result->body.mac[1],
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    printf(
 8008bfc:	4619      	mov	r1, r3
        scan_result->body.mac[0], scan_result->body.mac[1],
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
    printf(
 8008c04:	4618      	mov	r0, r3
        scan_result->body.mac[2], scan_result->body.mac[3],
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
    printf(
 8008c0c:	461c      	mov	r4, r3
        scan_result->body.mac[2], scan_result->body.mac[3],
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
    printf(
 8008c14:	461d      	mov	r5, r3
        scan_result->body.mac[4], scan_result->body.mac[5],
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    printf(
 8008c1c:	461e      	mov	r6, r3
        scan_result->body.mac[4], scan_result->body.mac[5],
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
    printf(
 8008c24:	603b      	str	r3, [r7, #0]
        scan_result->body.ssid_def.ssid);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	3308      	adds	r3, #8
    printf(
 8008c2a:	9307      	str	r3, [sp, #28]
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	9306      	str	r3, [sp, #24]
 8008c30:	9605      	str	r6, [sp, #20]
 8008c32:	9504      	str	r5, [sp, #16]
 8008c34:	9403      	str	r4, [sp, #12]
 8008c36:	9002      	str	r0, [sp, #8]
 8008c38:	9101      	str	r1, [sp, #4]
 8008c3a:	9200      	str	r2, [sp, #0]
 8008c3c:	4643      	mov	r3, r8
 8008c3e:	4672      	mov	r2, lr
 8008c40:	4661      	mov	r1, ip
 8008c42:	483a      	ldr	r0, [pc, #232]	; (8008d2c <sl_wfx_scan_result_callback+0x180>)
 8008c44:	f012 f8c4 	bl	801add0 <iprintf>
  }

  if (scan_count <= SL_WFX_MAX_SCAN_RESULTS) {
 8008c48:	4b36      	ldr	r3, [pc, #216]	; (8008d24 <sl_wfx_scan_result_callback+0x178>)
 8008c4a:	781b      	ldrb	r3, [r3, #0]
 8008c4c:	2b32      	cmp	r3, #50	; 0x32
 8008c4e:	d863      	bhi.n	8008d18 <sl_wfx_scan_result_callback+0x16c>
    scan_list[scan_count - 1].ssid_def = scan_result->body.ssid_def;
 8008c50:	4b34      	ldr	r3, [pc, #208]	; (8008d24 <sl_wfx_scan_result_callback+0x178>)
 8008c52:	781b      	ldrb	r3, [r3, #0]
 8008c54:	1e5a      	subs	r2, r3, #1
 8008c56:	4936      	ldr	r1, [pc, #216]	; (8008d30 <sl_wfx_scan_result_callback+0x184>)
 8008c58:	4613      	mov	r3, r2
 8008c5a:	005b      	lsls	r3, r3, #1
 8008c5c:	4413      	add	r3, r2
 8008c5e:	011b      	lsls	r3, r3, #4
 8008c60:	1a9b      	subs	r3, r3, r2
 8008c62:	18ca      	adds	r2, r1, r3
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	3304      	adds	r3, #4
 8008c68:	4610      	mov	r0, r2
 8008c6a:	f103 0420 	add.w	r4, r3, #32
 8008c6e:	4602      	mov	r2, r0
 8008c70:	4619      	mov	r1, r3
 8008c72:	f8d1 c000 	ldr.w	ip, [r1]
 8008c76:	684e      	ldr	r6, [r1, #4]
 8008c78:	688d      	ldr	r5, [r1, #8]
 8008c7a:	68c9      	ldr	r1, [r1, #12]
 8008c7c:	f8c2 c000 	str.w	ip, [r2]
 8008c80:	6056      	str	r6, [r2, #4]
 8008c82:	6095      	str	r5, [r2, #8]
 8008c84:	60d1      	str	r1, [r2, #12]
 8008c86:	3310      	adds	r3, #16
 8008c88:	3010      	adds	r0, #16
 8008c8a:	42a3      	cmp	r3, r4
 8008c8c:	d1ef      	bne.n	8008c6e <sl_wfx_scan_result_callback+0xc2>
 8008c8e:	4602      	mov	r2, r0
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	6013      	str	r3, [r2, #0]
    scan_list[scan_count - 1].channel = scan_result->body.channel;
 8008c94:	4b23      	ldr	r3, [pc, #140]	; (8008d24 <sl_wfx_scan_result_callback+0x178>)
 8008c96:	781b      	ldrb	r3, [r3, #0]
 8008c98:	1e5a      	subs	r2, r3, #1
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008c9e:	b298      	uxth	r0, r3
 8008ca0:	4923      	ldr	r1, [pc, #140]	; (8008d30 <sl_wfx_scan_result_callback+0x184>)
 8008ca2:	4613      	mov	r3, r2
 8008ca4:	005b      	lsls	r3, r3, #1
 8008ca6:	4413      	add	r3, r2
 8008ca8:	011b      	lsls	r3, r3, #4
 8008caa:	1a9b      	subs	r3, r3, r2
 8008cac:	440b      	add	r3, r1
 8008cae:	332a      	adds	r3, #42	; 0x2a
 8008cb0:	4602      	mov	r2, r0
 8008cb2:	801a      	strh	r2, [r3, #0]
    scan_list[scan_count - 1].security_mode = scan_result->body.security_mode;
 8008cb4:	4b1b      	ldr	r3, [pc, #108]	; (8008d24 <sl_wfx_scan_result_callback+0x178>)
 8008cb6:	781b      	ldrb	r3, [r3, #0]
 8008cb8:	1e5a      	subs	r2, r3, #1
 8008cba:	491d      	ldr	r1, [pc, #116]	; (8008d30 <sl_wfx_scan_result_callback+0x184>)
 8008cbc:	4613      	mov	r3, r2
 8008cbe:	005b      	lsls	r3, r3, #1
 8008cc0:	4413      	add	r3, r2
 8008cc2:	011b      	lsls	r3, r3, #4
 8008cc4:	1a9b      	subs	r3, r3, r2
 8008cc6:	440b      	add	r3, r1
 8008cc8:	332c      	adds	r3, #44	; 0x2c
 8008cca:	687a      	ldr	r2, [r7, #4]
 8008ccc:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 8008cd0:	701a      	strb	r2, [r3, #0]
    scan_list[scan_count - 1].rcpi = scan_result->body.rcpi;
 8008cd2:	4b14      	ldr	r3, [pc, #80]	; (8008d24 <sl_wfx_scan_result_callback+0x178>)
 8008cd4:	781b      	ldrb	r3, [r3, #0]
 8008cd6:	1e5a      	subs	r2, r3, #1
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8008cdc:	b298      	uxth	r0, r3
 8008cde:	4914      	ldr	r1, [pc, #80]	; (8008d30 <sl_wfx_scan_result_callback+0x184>)
 8008ce0:	4613      	mov	r3, r2
 8008ce2:	005b      	lsls	r3, r3, #1
 8008ce4:	4413      	add	r3, r2
 8008ce6:	011b      	lsls	r3, r3, #4
 8008ce8:	1a9b      	subs	r3, r3, r2
 8008cea:	440b      	add	r3, r1
 8008cec:	3328      	adds	r3, #40	; 0x28
 8008cee:	4602      	mov	r2, r0
 8008cf0:	f8a3 2005 	strh.w	r2, [r3, #5]
    memcpy(scan_list[scan_count - 1].mac, scan_result->body.mac, 6);
 8008cf4:	4b0b      	ldr	r3, [pc, #44]	; (8008d24 <sl_wfx_scan_result_callback+0x178>)
 8008cf6:	781b      	ldrb	r3, [r3, #0]
 8008cf8:	1e5a      	subs	r2, r3, #1
 8008cfa:	4613      	mov	r3, r2
 8008cfc:	005b      	lsls	r3, r3, #1
 8008cfe:	4413      	add	r3, r2
 8008d00:	011b      	lsls	r3, r3, #4
 8008d02:	1a9b      	subs	r3, r3, r2
 8008d04:	3320      	adds	r3, #32
 8008d06:	4a0a      	ldr	r2, [pc, #40]	; (8008d30 <sl_wfx_scan_result_callback+0x184>)
 8008d08:	4413      	add	r3, r2
 8008d0a:	1d18      	adds	r0, r3, #4
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	3328      	adds	r3, #40	; 0x28
 8008d10:	2206      	movs	r2, #6
 8008d12:	4619      	mov	r1, r3
 8008d14:	f011 fae6 	bl	801a2e4 <memcpy>
  }
}
 8008d18:	bf00      	nop
 8008d1a:	3708      	adds	r7, #8
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d22:	bf00      	nop
 8008d24:	20001332 	.word	0x20001332
 8008d28:	200000b1 	.word	0x200000b1
 8008d2c:	0801d820 	.word	0x0801d820
 8008d30:	20000a04 	.word	0x20000a04

08008d34 <sl_wfx_scan_complete_callback>:

/**************************************************************************//**
 * Callback for scan complete
 *****************************************************************************/
void sl_wfx_scan_complete_callback (sl_wfx_scan_complete_ind_t *scan_complete) {
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b084      	sub	sp, #16
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
  void * buffer;
  sl_status_t status;

  scan_count_web = scan_count;
 8008d3c:	4b14      	ldr	r3, [pc, #80]	; (8008d90 <sl_wfx_scan_complete_callback+0x5c>)
 8008d3e:	781a      	ldrb	r2, [r3, #0]
 8008d40:	4b14      	ldr	r3, [pc, #80]	; (8008d94 <sl_wfx_scan_complete_callback+0x60>)
 8008d42:	701a      	strb	r2, [r3, #0]
  scan_count = 0;
 8008d44:	4b12      	ldr	r3, [pc, #72]	; (8008d90 <sl_wfx_scan_complete_callback+0x5c>)
 8008d46:	2200      	movs	r2, #0
 8008d48:	701a      	strb	r2, [r3, #0]

  status = sl_wfx_host_allocate_buffer(&buffer,
                                       SL_WFX_RX_FRAME_BUFFER,
                                       scan_complete->header.length);
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	881b      	ldrh	r3, [r3, #0]
 8008d4e:	b29b      	uxth	r3, r3
  status = sl_wfx_host_allocate_buffer(&buffer,
 8008d50:	461a      	mov	r2, r3
 8008d52:	f107 0308 	add.w	r3, r7, #8
 8008d56:	2101      	movs	r1, #1
 8008d58:	4618      	mov	r0, r3
 8008d5a:	f7ff feb9 	bl	8008ad0 <sl_wfx_host_allocate_buffer>
 8008d5e:	60f8      	str	r0, [r7, #12]
  if (status == SL_STATUS_OK) {
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d10f      	bne.n	8008d86 <sl_wfx_scan_complete_callback+0x52>
    memcpy(buffer, (void *)scan_complete, scan_complete->header.length);
 8008d66:	68b8      	ldr	r0, [r7, #8]
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	881b      	ldrh	r3, [r3, #0]
 8008d6c:	b29b      	uxth	r3, r3
 8008d6e:	461a      	mov	r2, r3
 8008d70:	6879      	ldr	r1, [r7, #4]
 8008d72:	f011 fab7 	bl	801a2e4 <memcpy>
    xQueueSend(wifi_event_queue, &buffer, 0);
 8008d76:	4b08      	ldr	r3, [pc, #32]	; (8008d98 <sl_wfx_scan_complete_callback+0x64>)
 8008d78:	6818      	ldr	r0, [r3, #0]
 8008d7a:	f107 0108 	add.w	r1, r7, #8
 8008d7e:	2300      	movs	r3, #0
 8008d80:	2200      	movs	r2, #0
 8008d82:	f001 fa4b 	bl	800a21c <xQueueGenericSend>
  }
}
 8008d86:	bf00      	nop
 8008d88:	3710      	adds	r7, #16
 8008d8a:	46bd      	mov	sp, r7
 8008d8c:	bd80      	pop	{r7, pc}
 8008d8e:	bf00      	nop
 8008d90:	20001332 	.word	0x20001332
 8008d94:	20001333 	.word	0x20001333
 8008d98:	2000134c 	.word	0x2000134c

08008d9c <sl_wfx_connect_callback>:

/**************************************************************************//**
 * Callback when station connects
 *****************************************************************************/
void sl_wfx_connect_callback (sl_wfx_connect_ind_t *connect) {
 8008d9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d9e:	b085      	sub	sp, #20
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
  void *buffer;
  sl_status_t status;

  switch(connect->body.status){
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	685b      	ldr	r3, [r3, #4]
 8008da8:	2b0a      	cmp	r3, #10
 8008daa:	f200 80d3 	bhi.w	8008f54 <sl_wfx_connect_callback+0x1b8>
 8008dae:	a201      	add	r2, pc, #4	; (adr r2, 8008db4 <sl_wfx_connect_callback+0x18>)
 8008db0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008db4:	08008de1 	.word	0x08008de1
 8008db8:	08008f55 	.word	0x08008f55
 8008dbc:	08008f55 	.word	0x08008f55
 8008dc0:	08008f55 	.word	0x08008f55
 8008dc4:	08008f55 	.word	0x08008f55
 8008dc8:	08008f55 	.word	0x08008f55
 8008dcc:	08008e3f 	.word	0x08008e3f
 8008dd0:	08008e83 	.word	0x08008e83
 8008dd4:	08008eb1 	.word	0x08008eb1
 8008dd8:	08008edf 	.word	0x08008edf
 8008ddc:	08008f1b 	.word	0x08008f1b
  case WFM_STATUS_SUCCESS:
    {
      printf("Connected to WiFi: %s \r\n", WLAN_SSID_DEFAULT);
 8008de0:	496a      	ldr	r1, [pc, #424]	; (8008f8c <sl_wfx_connect_callback+0x1f0>)
 8008de2:	486b      	ldr	r0, [pc, #428]	; (8008f90 <sl_wfx_connect_callback+0x1f4>)
 8008de4:	f011 fff4 	bl	801add0 <iprintf>
      sl_wfx_context->state |= SL_WFX_STA_INTERFACE_CONNECTED;
 8008de8:	4b6a      	ldr	r3, [pc, #424]	; (8008f94 <sl_wfx_connect_callback+0x1f8>)
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	f893 2222 	ldrb.w	r2, [r3, #546]	; 0x222
 8008df0:	4b68      	ldr	r3, [pc, #416]	; (8008f94 <sl_wfx_connect_callback+0x1f8>)
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	f042 0202 	orr.w	r2, r2, #2
 8008df8:	b2d2      	uxtb	r2, r2
 8008dfa:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222

      status = sl_wfx_host_allocate_buffer(&buffer,
                                           SL_WFX_RX_FRAME_BUFFER,
                                           connect->header.length);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	881b      	ldrh	r3, [r3, #0]
 8008e02:	b29b      	uxth	r3, r3
      status = sl_wfx_host_allocate_buffer(&buffer,
 8008e04:	461a      	mov	r2, r3
 8008e06:	f107 0308 	add.w	r3, r7, #8
 8008e0a:	2101      	movs	r1, #1
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	f7ff fe5f 	bl	8008ad0 <sl_wfx_host_allocate_buffer>
 8008e12:	60f8      	str	r0, [r7, #12]
      if (status == SL_STATUS_OK) {
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	f040 80b3 	bne.w	8008f82 <sl_wfx_connect_callback+0x1e6>
        memcpy(buffer, (void *)connect, connect->header.length);
 8008e1c:	68b8      	ldr	r0, [r7, #8]
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	881b      	ldrh	r3, [r3, #0]
 8008e22:	b29b      	uxth	r3, r3
 8008e24:	461a      	mov	r2, r3
 8008e26:	6879      	ldr	r1, [r7, #4]
 8008e28:	f011 fa5c 	bl	801a2e4 <memcpy>
        xQueueSend(wifi_event_queue, &buffer, 0);
 8008e2c:	4b5a      	ldr	r3, [pc, #360]	; (8008f98 <sl_wfx_connect_callback+0x1fc>)
 8008e2e:	6818      	ldr	r0, [r3, #0]
 8008e30:	f107 0108 	add.w	r1, r7, #8
 8008e34:	2300      	movs	r3, #0
 8008e36:	2200      	movs	r2, #0
 8008e38:	f001 f9f0 	bl	800a21c <xQueueGenericSend>
      }
      break;
 8008e3c:	e0a1      	b.n	8008f82 <sl_wfx_connect_callback+0x1e6>
    }
  case WFM_STATUS_NO_MATCHING_AP:
    {
      strcpy(event_log, "Connection failed, access point not found");
 8008e3e:	4b57      	ldr	r3, [pc, #348]	; (8008f9c <sl_wfx_connect_callback+0x200>)
 8008e40:	4a57      	ldr	r2, [pc, #348]	; (8008fa0 <sl_wfx_connect_callback+0x204>)
 8008e42:	4614      	mov	r4, r2
 8008e44:	469c      	mov	ip, r3
 8008e46:	f104 0e20 	add.w	lr, r4, #32
 8008e4a:	4665      	mov	r5, ip
 8008e4c:	4626      	mov	r6, r4
 8008e4e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8008e50:	6028      	str	r0, [r5, #0]
 8008e52:	6069      	str	r1, [r5, #4]
 8008e54:	60aa      	str	r2, [r5, #8]
 8008e56:	60eb      	str	r3, [r5, #12]
 8008e58:	3410      	adds	r4, #16
 8008e5a:	f10c 0c10 	add.w	ip, ip, #16
 8008e5e:	4574      	cmp	r4, lr
 8008e60:	d1f3      	bne.n	8008e4a <sl_wfx_connect_callback+0xae>
 8008e62:	4662      	mov	r2, ip
 8008e64:	4623      	mov	r3, r4
 8008e66:	cb03      	ldmia	r3!, {r0, r1}
 8008e68:	6010      	str	r0, [r2, #0]
 8008e6a:	6051      	str	r1, [r2, #4]
 8008e6c:	881b      	ldrh	r3, [r3, #0]
 8008e6e:	8113      	strh	r3, [r2, #8]
      printf(event_log);
 8008e70:	484a      	ldr	r0, [pc, #296]	; (8008f9c <sl_wfx_connect_callback+0x200>)
 8008e72:	f011 ffad 	bl	801add0 <iprintf>
      printf("\r\n");
 8008e76:	484b      	ldr	r0, [pc, #300]	; (8008fa4 <sl_wfx_connect_callback+0x208>)
 8008e78:	f012 f830 	bl	801aedc <puts>
      wifi_autoconnexion_init();
 8008e7c:	f7f8 fa42 	bl	8001304 <wifi_autoconnexion_init>
      break;
 8008e80:	e080      	b.n	8008f84 <sl_wfx_connect_callback+0x1e8>
    }
  case WFM_STATUS_CONNECTION_ABORTED:
    {
      strcpy(event_log, "Connection aborted");
 8008e82:	4a46      	ldr	r2, [pc, #280]	; (8008f9c <sl_wfx_connect_callback+0x200>)
 8008e84:	4b48      	ldr	r3, [pc, #288]	; (8008fa8 <sl_wfx_connect_callback+0x20c>)
 8008e86:	4615      	mov	r5, r2
 8008e88:	461c      	mov	r4, r3
 8008e8a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008e8c:	6028      	str	r0, [r5, #0]
 8008e8e:	6069      	str	r1, [r5, #4]
 8008e90:	60aa      	str	r2, [r5, #8]
 8008e92:	60eb      	str	r3, [r5, #12]
 8008e94:	8823      	ldrh	r3, [r4, #0]
 8008e96:	78a2      	ldrb	r2, [r4, #2]
 8008e98:	822b      	strh	r3, [r5, #16]
 8008e9a:	4613      	mov	r3, r2
 8008e9c:	74ab      	strb	r3, [r5, #18]
      printf(event_log);
 8008e9e:	483f      	ldr	r0, [pc, #252]	; (8008f9c <sl_wfx_connect_callback+0x200>)
 8008ea0:	f011 ff96 	bl	801add0 <iprintf>
      printf("\r\n");
 8008ea4:	483f      	ldr	r0, [pc, #252]	; (8008fa4 <sl_wfx_connect_callback+0x208>)
 8008ea6:	f012 f819 	bl	801aedc <puts>
      wifi_autoconnexion_init();
 8008eaa:	f7f8 fa2b 	bl	8001304 <wifi_autoconnexion_init>
      break;
 8008eae:	e069      	b.n	8008f84 <sl_wfx_connect_callback+0x1e8>
    }
  case WFM_STATUS_CONNECTION_TIMEOUT:
    {
      strcpy(event_log, "Connection timeout");
 8008eb0:	4a3a      	ldr	r2, [pc, #232]	; (8008f9c <sl_wfx_connect_callback+0x200>)
 8008eb2:	4b3e      	ldr	r3, [pc, #248]	; (8008fac <sl_wfx_connect_callback+0x210>)
 8008eb4:	4615      	mov	r5, r2
 8008eb6:	461c      	mov	r4, r3
 8008eb8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008eba:	6028      	str	r0, [r5, #0]
 8008ebc:	6069      	str	r1, [r5, #4]
 8008ebe:	60aa      	str	r2, [r5, #8]
 8008ec0:	60eb      	str	r3, [r5, #12]
 8008ec2:	8823      	ldrh	r3, [r4, #0]
 8008ec4:	78a2      	ldrb	r2, [r4, #2]
 8008ec6:	822b      	strh	r3, [r5, #16]
 8008ec8:	4613      	mov	r3, r2
 8008eca:	74ab      	strb	r3, [r5, #18]
      printf(event_log);
 8008ecc:	4833      	ldr	r0, [pc, #204]	; (8008f9c <sl_wfx_connect_callback+0x200>)
 8008ece:	f011 ff7f 	bl	801add0 <iprintf>
      printf("\r\n");
 8008ed2:	4834      	ldr	r0, [pc, #208]	; (8008fa4 <sl_wfx_connect_callback+0x208>)
 8008ed4:	f012 f802 	bl	801aedc <puts>
      wifi_autoconnexion_init();
 8008ed8:	f7f8 fa14 	bl	8001304 <wifi_autoconnexion_init>
      break;
 8008edc:	e052      	b.n	8008f84 <sl_wfx_connect_callback+0x1e8>
    }
  case WFM_STATUS_CONNECTION_REJECTED_BY_AP:
    {
      strcpy(event_log, "Connection rejected by the access point");
 8008ede:	4b2f      	ldr	r3, [pc, #188]	; (8008f9c <sl_wfx_connect_callback+0x200>)
 8008ee0:	4a33      	ldr	r2, [pc, #204]	; (8008fb0 <sl_wfx_connect_callback+0x214>)
 8008ee2:	4614      	mov	r4, r2
 8008ee4:	469c      	mov	ip, r3
 8008ee6:	f104 0e20 	add.w	lr, r4, #32
 8008eea:	4665      	mov	r5, ip
 8008eec:	4626      	mov	r6, r4
 8008eee:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8008ef0:	6028      	str	r0, [r5, #0]
 8008ef2:	6069      	str	r1, [r5, #4]
 8008ef4:	60aa      	str	r2, [r5, #8]
 8008ef6:	60eb      	str	r3, [r5, #12]
 8008ef8:	3410      	adds	r4, #16
 8008efa:	f10c 0c10 	add.w	ip, ip, #16
 8008efe:	4574      	cmp	r4, lr
 8008f00:	d1f3      	bne.n	8008eea <sl_wfx_connect_callback+0x14e>
 8008f02:	4662      	mov	r2, ip
 8008f04:	4623      	mov	r3, r4
 8008f06:	cb03      	ldmia	r3!, {r0, r1}
 8008f08:	6010      	str	r0, [r2, #0]
 8008f0a:	6051      	str	r1, [r2, #4]
      printf(event_log);
 8008f0c:	4823      	ldr	r0, [pc, #140]	; (8008f9c <sl_wfx_connect_callback+0x200>)
 8008f0e:	f011 ff5f 	bl	801add0 <iprintf>
      printf("\r\n");
 8008f12:	4824      	ldr	r0, [pc, #144]	; (8008fa4 <sl_wfx_connect_callback+0x208>)
 8008f14:	f011 ffe2 	bl	801aedc <puts>
      break;
 8008f18:	e034      	b.n	8008f84 <sl_wfx_connect_callback+0x1e8>
    }
  case WFM_STATUS_CONNECTION_AUTH_FAILURE:
    {
      strcpy(event_log, "Connection authentication failure");
 8008f1a:	4b20      	ldr	r3, [pc, #128]	; (8008f9c <sl_wfx_connect_callback+0x200>)
 8008f1c:	4a25      	ldr	r2, [pc, #148]	; (8008fb4 <sl_wfx_connect_callback+0x218>)
 8008f1e:	4614      	mov	r4, r2
 8008f20:	469c      	mov	ip, r3
 8008f22:	f104 0e20 	add.w	lr, r4, #32
 8008f26:	4665      	mov	r5, ip
 8008f28:	4626      	mov	r6, r4
 8008f2a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8008f2c:	6028      	str	r0, [r5, #0]
 8008f2e:	6069      	str	r1, [r5, #4]
 8008f30:	60aa      	str	r2, [r5, #8]
 8008f32:	60eb      	str	r3, [r5, #12]
 8008f34:	3410      	adds	r4, #16
 8008f36:	f10c 0c10 	add.w	ip, ip, #16
 8008f3a:	4574      	cmp	r4, lr
 8008f3c:	d1f3      	bne.n	8008f26 <sl_wfx_connect_callback+0x18a>
 8008f3e:	4662      	mov	r2, ip
 8008f40:	4623      	mov	r3, r4
 8008f42:	881b      	ldrh	r3, [r3, #0]
 8008f44:	8013      	strh	r3, [r2, #0]
      printf(event_log);
 8008f46:	4815      	ldr	r0, [pc, #84]	; (8008f9c <sl_wfx_connect_callback+0x200>)
 8008f48:	f011 ff42 	bl	801add0 <iprintf>
      printf("\r\n");
 8008f4c:	4815      	ldr	r0, [pc, #84]	; (8008fa4 <sl_wfx_connect_callback+0x208>)
 8008f4e:	f011 ffc5 	bl	801aedc <puts>
      break;
 8008f52:	e017      	b.n	8008f84 <sl_wfx_connect_callback+0x1e8>
    }
  default:
    {
      strcpy(event_log, "Connection attempt error");
 8008f54:	4a11      	ldr	r2, [pc, #68]	; (8008f9c <sl_wfx_connect_callback+0x200>)
 8008f56:	4b18      	ldr	r3, [pc, #96]	; (8008fb8 <sl_wfx_connect_callback+0x21c>)
 8008f58:	4615      	mov	r5, r2
 8008f5a:	461c      	mov	r4, r3
 8008f5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008f5e:	6028      	str	r0, [r5, #0]
 8008f60:	6069      	str	r1, [r5, #4]
 8008f62:	60aa      	str	r2, [r5, #8]
 8008f64:	60eb      	str	r3, [r5, #12]
 8008f66:	cc03      	ldmia	r4!, {r0, r1}
 8008f68:	6128      	str	r0, [r5, #16]
 8008f6a:	6169      	str	r1, [r5, #20]
 8008f6c:	7823      	ldrb	r3, [r4, #0]
 8008f6e:	762b      	strb	r3, [r5, #24]
      printf(event_log);
 8008f70:	480a      	ldr	r0, [pc, #40]	; (8008f9c <sl_wfx_connect_callback+0x200>)
 8008f72:	f011 ff2d 	bl	801add0 <iprintf>
      printf("\r\n");
 8008f76:	480b      	ldr	r0, [pc, #44]	; (8008fa4 <sl_wfx_connect_callback+0x208>)
 8008f78:	f011 ffb0 	bl	801aedc <puts>
      wifi_autoconnexion_init();
 8008f7c:	f7f8 f9c2 	bl	8001304 <wifi_autoconnexion_init>
    }
  }
}
 8008f80:	e000      	b.n	8008f84 <sl_wfx_connect_callback+0x1e8>
      break;
 8008f82:	bf00      	nop
}
 8008f84:	bf00      	nop
 8008f86:	3714      	adds	r7, #20
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f8c:	0801d858 	.word	0x0801d858
 8008f90:	0801d860 	.word	0x0801d860
 8008f94:	200009fc 	.word	0x200009fc
 8008f98:	2000134c 	.word	0x2000134c
 8008f9c:	200008bc 	.word	0x200008bc
 8008fa0:	0801d87c 	.word	0x0801d87c
 8008fa4:	0801d7e8 	.word	0x0801d7e8
 8008fa8:	0801d8a8 	.word	0x0801d8a8
 8008fac:	0801d8bc 	.word	0x0801d8bc
 8008fb0:	0801d8d0 	.word	0x0801d8d0
 8008fb4:	0801d8f8 	.word	0x0801d8f8
 8008fb8:	0801d91c 	.word	0x0801d91c

08008fbc <sl_wfx_disconnect_callback>:

/**************************************************************************//**
 * Callback for station disconnect
 *****************************************************************************/
void sl_wfx_disconnect_callback (sl_wfx_disconnect_ind_t *disconnect) {
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	b084      	sub	sp, #16
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
  void *buffer;
  sl_status_t status;

  printf("Disconnected %d\r\n", disconnect->body.reason);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	895b      	ldrh	r3, [r3, #10]
 8008fc8:	b29b      	uxth	r3, r3
 8008fca:	4619      	mov	r1, r3
 8008fcc:	4817      	ldr	r0, [pc, #92]	; (800902c <sl_wfx_disconnect_callback+0x70>)
 8008fce:	f011 feff 	bl	801add0 <iprintf>
  sl_wfx_context->state &= ~SL_WFX_STA_INTERFACE_CONNECTED;
 8008fd2:	4b17      	ldr	r3, [pc, #92]	; (8009030 <sl_wfx_disconnect_callback+0x74>)
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	f893 2222 	ldrb.w	r2, [r3, #546]	; 0x222
 8008fda:	4b15      	ldr	r3, [pc, #84]	; (8009030 <sl_wfx_disconnect_callback+0x74>)
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	f022 0202 	bic.w	r2, r2, #2
 8008fe2:	b2d2      	uxtb	r2, r2
 8008fe4:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222

  status = sl_wfx_host_allocate_buffer(&buffer,
                                       SL_WFX_RX_FRAME_BUFFER,
                                       disconnect->header.length);
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	881b      	ldrh	r3, [r3, #0]
 8008fec:	b29b      	uxth	r3, r3
  status = sl_wfx_host_allocate_buffer(&buffer,
 8008fee:	461a      	mov	r2, r3
 8008ff0:	f107 0308 	add.w	r3, r7, #8
 8008ff4:	2101      	movs	r1, #1
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	f7ff fd6a 	bl	8008ad0 <sl_wfx_host_allocate_buffer>
 8008ffc:	60f8      	str	r0, [r7, #12]
  if (status == SL_STATUS_OK) {
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d10f      	bne.n	8009024 <sl_wfx_disconnect_callback+0x68>
    memcpy(buffer, (void *)disconnect, disconnect->header.length);
 8009004:	68b8      	ldr	r0, [r7, #8]
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	881b      	ldrh	r3, [r3, #0]
 800900a:	b29b      	uxth	r3, r3
 800900c:	461a      	mov	r2, r3
 800900e:	6879      	ldr	r1, [r7, #4]
 8009010:	f011 f968 	bl	801a2e4 <memcpy>
    xQueueSend(wifi_event_queue, &buffer, 0);
 8009014:	4b07      	ldr	r3, [pc, #28]	; (8009034 <sl_wfx_disconnect_callback+0x78>)
 8009016:	6818      	ldr	r0, [r3, #0]
 8009018:	f107 0108 	add.w	r1, r7, #8
 800901c:	2300      	movs	r3, #0
 800901e:	2200      	movs	r2, #0
 8009020:	f001 f8fc 	bl	800a21c <xQueueGenericSend>
  }
}
 8009024:	bf00      	nop
 8009026:	3710      	adds	r7, #16
 8009028:	46bd      	mov	sp, r7
 800902a:	bd80      	pop	{r7, pc}
 800902c:	0801d938 	.word	0x0801d938
 8009030:	200009fc 	.word	0x200009fc
 8009034:	2000134c 	.word	0x2000134c

08009038 <sl_wfx_start_ap_callback>:

/**************************************************************************//**
 * Callback for AP started
 *****************************************************************************/
void sl_wfx_start_ap_callback (sl_wfx_start_ap_ind_t *start_ap) {
 8009038:	b5b0      	push	{r4, r5, r7, lr}
 800903a:	b084      	sub	sp, #16
 800903c:	af00      	add	r7, sp, #0
 800903e:	6078      	str	r0, [r7, #4]
  void *buffer;
  sl_status_t status;

  if (start_ap->body.status == 0) {
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	685b      	ldr	r3, [r3, #4]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d130      	bne.n	80090aa <sl_wfx_start_ap_callback+0x72>
    printf("AP started\r\n");
 8009048:	4820      	ldr	r0, [pc, #128]	; (80090cc <sl_wfx_start_ap_callback+0x94>)
 800904a:	f011 ff47 	bl	801aedc <puts>
    printf("Join the AP with SSID: %s\r\n", softap_ssid);
 800904e:	4920      	ldr	r1, [pc, #128]	; (80090d0 <sl_wfx_start_ap_callback+0x98>)
 8009050:	4820      	ldr	r0, [pc, #128]	; (80090d4 <sl_wfx_start_ap_callback+0x9c>)
 8009052:	f011 febd 	bl	801add0 <iprintf>
    sl_wfx_context->state |= SL_WFX_AP_INTERFACE_UP;
 8009056:	4b20      	ldr	r3, [pc, #128]	; (80090d8 <sl_wfx_start_ap_callback+0xa0>)
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	f893 2222 	ldrb.w	r2, [r3, #546]	; 0x222
 800905e:	4b1e      	ldr	r3, [pc, #120]	; (80090d8 <sl_wfx_start_ap_callback+0xa0>)
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	f042 0204 	orr.w	r2, r2, #4
 8009066:	b2d2      	uxtb	r2, r2
 8009068:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222

    status = sl_wfx_host_allocate_buffer(&buffer,
                                         SL_WFX_RX_FRAME_BUFFER,
                                         start_ap->header.length);
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	881b      	ldrh	r3, [r3, #0]
 8009070:	b29b      	uxth	r3, r3
    status = sl_wfx_host_allocate_buffer(&buffer,
 8009072:	461a      	mov	r2, r3
 8009074:	f107 0308 	add.w	r3, r7, #8
 8009078:	2101      	movs	r1, #1
 800907a:	4618      	mov	r0, r3
 800907c:	f7ff fd28 	bl	8008ad0 <sl_wfx_host_allocate_buffer>
 8009080:	60f8      	str	r0, [r7, #12]
    if (status == SL_STATUS_OK) {
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	2b00      	cmp	r3, #0
 8009086:	d11c      	bne.n	80090c2 <sl_wfx_start_ap_callback+0x8a>
      memcpy(buffer, (void *)start_ap, start_ap->header.length);
 8009088:	68b8      	ldr	r0, [r7, #8]
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	881b      	ldrh	r3, [r3, #0]
 800908e:	b29b      	uxth	r3, r3
 8009090:	461a      	mov	r2, r3
 8009092:	6879      	ldr	r1, [r7, #4]
 8009094:	f011 f926 	bl	801a2e4 <memcpy>
      xQueueSend(wifi_event_queue, &buffer, 0);
 8009098:	4b10      	ldr	r3, [pc, #64]	; (80090dc <sl_wfx_start_ap_callback+0xa4>)
 800909a:	6818      	ldr	r0, [r3, #0]
 800909c:	f107 0108 	add.w	r1, r7, #8
 80090a0:	2300      	movs	r3, #0
 80090a2:	2200      	movs	r2, #0
 80090a4:	f001 f8ba 	bl	800a21c <xQueueGenericSend>
    }
  } else {
    printf("AP start failed\r\n");
    strcpy(event_log, "AP start failed");
  }
}
 80090a8:	e00b      	b.n	80090c2 <sl_wfx_start_ap_callback+0x8a>
    printf("AP start failed\r\n");
 80090aa:	480d      	ldr	r0, [pc, #52]	; (80090e0 <sl_wfx_start_ap_callback+0xa8>)
 80090ac:	f011 ff16 	bl	801aedc <puts>
    strcpy(event_log, "AP start failed");
 80090b0:	4a0c      	ldr	r2, [pc, #48]	; (80090e4 <sl_wfx_start_ap_callback+0xac>)
 80090b2:	4b0d      	ldr	r3, [pc, #52]	; (80090e8 <sl_wfx_start_ap_callback+0xb0>)
 80090b4:	4614      	mov	r4, r2
 80090b6:	461d      	mov	r5, r3
 80090b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80090ba:	6020      	str	r0, [r4, #0]
 80090bc:	6061      	str	r1, [r4, #4]
 80090be:	60a2      	str	r2, [r4, #8]
 80090c0:	60e3      	str	r3, [r4, #12]
}
 80090c2:	bf00      	nop
 80090c4:	3710      	adds	r7, #16
 80090c6:	46bd      	mov	sp, r7
 80090c8:	bdb0      	pop	{r4, r5, r7, pc}
 80090ca:	bf00      	nop
 80090cc:	0801d94c 	.word	0x0801d94c
 80090d0:	20000070 	.word	0x20000070
 80090d4:	0801d958 	.word	0x0801d958
 80090d8:	200009fc 	.word	0x200009fc
 80090dc:	2000134c 	.word	0x2000134c
 80090e0:	0801d974 	.word	0x0801d974
 80090e4:	200008bc 	.word	0x200008bc
 80090e8:	0801d988 	.word	0x0801d988

080090ec <sl_wfx_stop_ap_callback>:


/**************************************************************************//**
 * Callback for AP stopped
 *****************************************************************************/
void sl_wfx_stop_ap_callback(sl_wfx_stop_ap_ind_t *stop_ap) {
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b084      	sub	sp, #16
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
  void *buffer;
  sl_status_t status;

  printf("SoftAP stopped\r\n");
 80090f4:	4818      	ldr	r0, [pc, #96]	; (8009158 <sl_wfx_stop_ap_callback+0x6c>)
 80090f6:	f011 fef1 	bl	801aedc <puts>
  dhcpserver_clear_stored_mac();
 80090fa:	f7f8 fd21 	bl	8001b40 <dhcpserver_clear_stored_mac>
  sl_wfx_context->state &= ~SL_WFX_AP_INTERFACE_UP;
 80090fe:	4b17      	ldr	r3, [pc, #92]	; (800915c <sl_wfx_stop_ap_callback+0x70>)
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	f893 2222 	ldrb.w	r2, [r3, #546]	; 0x222
 8009106:	4b15      	ldr	r3, [pc, #84]	; (800915c <sl_wfx_stop_ap_callback+0x70>)
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	f022 0204 	bic.w	r2, r2, #4
 800910e:	b2d2      	uxtb	r2, r2
 8009110:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222

  status = sl_wfx_host_allocate_buffer(&buffer,
                                       SL_WFX_RX_FRAME_BUFFER,
                                       stop_ap->length);
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	881b      	ldrh	r3, [r3, #0]
 8009118:	b29b      	uxth	r3, r3
  status = sl_wfx_host_allocate_buffer(&buffer,
 800911a:	461a      	mov	r2, r3
 800911c:	f107 0308 	add.w	r3, r7, #8
 8009120:	2101      	movs	r1, #1
 8009122:	4618      	mov	r0, r3
 8009124:	f7ff fcd4 	bl	8008ad0 <sl_wfx_host_allocate_buffer>
 8009128:	60f8      	str	r0, [r7, #12]
  if (status == SL_STATUS_OK) {
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d10f      	bne.n	8009150 <sl_wfx_stop_ap_callback+0x64>
    memcpy(buffer, (void *)stop_ap, stop_ap->length);
 8009130:	68b8      	ldr	r0, [r7, #8]
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	881b      	ldrh	r3, [r3, #0]
 8009136:	b29b      	uxth	r3, r3
 8009138:	461a      	mov	r2, r3
 800913a:	6879      	ldr	r1, [r7, #4]
 800913c:	f011 f8d2 	bl	801a2e4 <memcpy>
    xQueueSend(wifi_event_queue, &buffer, 0);
 8009140:	4b07      	ldr	r3, [pc, #28]	; (8009160 <sl_wfx_stop_ap_callback+0x74>)
 8009142:	6818      	ldr	r0, [r3, #0]
 8009144:	f107 0108 	add.w	r1, r7, #8
 8009148:	2300      	movs	r3, #0
 800914a:	2200      	movs	r2, #0
 800914c:	f001 f866 	bl	800a21c <xQueueGenericSend>
  }
}
 8009150:	bf00      	nop
 8009152:	3710      	adds	r7, #16
 8009154:	46bd      	mov	sp, r7
 8009156:	bd80      	pop	{r7, pc}
 8009158:	0801d998 	.word	0x0801d998
 800915c:	200009fc 	.word	0x200009fc
 8009160:	2000134c 	.word	0x2000134c

08009164 <sl_wfx_ap_client_connected_callback>:

/**************************************************************************//**
 * Callback for client connect to AP
 *****************************************************************************/
void sl_wfx_ap_client_connected_callback (sl_wfx_ap_client_connected_ind_t *ap_client_connected) {
 8009164:	b5b0      	push	{r4, r5, r7, lr}
 8009166:	b086      	sub	sp, #24
 8009168:	af04      	add	r7, sp, #16
 800916a:	6078      	str	r0, [r7, #4]
  printf("Client connected, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
         ap_client_connected->body.mac[0],
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	791b      	ldrb	r3, [r3, #4]
  printf("Client connected, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8009170:	4618      	mov	r0, r3
         ap_client_connected->body.mac[1],
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	795b      	ldrb	r3, [r3, #5]
  printf("Client connected, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8009176:	461c      	mov	r4, r3
         ap_client_connected->body.mac[2],
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	799b      	ldrb	r3, [r3, #6]
  printf("Client connected, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800917c:	461d      	mov	r5, r3
         ap_client_connected->body.mac[3],
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	79db      	ldrb	r3, [r3, #7]
  printf("Client connected, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8009182:	461a      	mov	r2, r3
         ap_client_connected->body.mac[4],
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	7a1b      	ldrb	r3, [r3, #8]
  printf("Client connected, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8009188:	4619      	mov	r1, r3
         ap_client_connected->body.mac[5]);
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	7a5b      	ldrb	r3, [r3, #9]
  printf("Client connected, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800918e:	9302      	str	r3, [sp, #8]
 8009190:	9101      	str	r1, [sp, #4]
 8009192:	9200      	str	r2, [sp, #0]
 8009194:	462b      	mov	r3, r5
 8009196:	4622      	mov	r2, r4
 8009198:	4601      	mov	r1, r0
 800919a:	480b      	ldr	r0, [pc, #44]	; (80091c8 <sl_wfx_ap_client_connected_callback+0x64>)
 800919c:	f011 fe18 	bl	801add0 <iprintf>
  printf("Open a web browser and go to http://%d.%d.%d.%d\r\n",
 80091a0:	4b0a      	ldr	r3, [pc, #40]	; (80091cc <sl_wfx_ap_client_connected_callback+0x68>)
 80091a2:	781b      	ldrb	r3, [r3, #0]
 80091a4:	4619      	mov	r1, r3
 80091a6:	4b0a      	ldr	r3, [pc, #40]	; (80091d0 <sl_wfx_ap_client_connected_callback+0x6c>)
 80091a8:	781b      	ldrb	r3, [r3, #0]
 80091aa:	461a      	mov	r2, r3
 80091ac:	4b09      	ldr	r3, [pc, #36]	; (80091d4 <sl_wfx_ap_client_connected_callback+0x70>)
 80091ae:	781b      	ldrb	r3, [r3, #0]
 80091b0:	4618      	mov	r0, r3
 80091b2:	4b09      	ldr	r3, [pc, #36]	; (80091d8 <sl_wfx_ap_client_connected_callback+0x74>)
 80091b4:	781b      	ldrb	r3, [r3, #0]
 80091b6:	9300      	str	r3, [sp, #0]
 80091b8:	4603      	mov	r3, r0
 80091ba:	4808      	ldr	r0, [pc, #32]	; (80091dc <sl_wfx_ap_client_connected_callback+0x78>)
 80091bc:	f011 fe08 	bl	801add0 <iprintf>
         ap_ip_addr0, ap_ip_addr1, ap_ip_addr2, ap_ip_addr3);
}
 80091c0:	bf00      	nop
 80091c2:	3708      	adds	r7, #8
 80091c4:	46bd      	mov	sp, r7
 80091c6:	bdb0      	pop	{r4, r5, r7, pc}
 80091c8:	0801d9a8 	.word	0x0801d9a8
 80091cc:	2000009e 	.word	0x2000009e
 80091d0:	2000009f 	.word	0x2000009f
 80091d4:	200000a0 	.word	0x200000a0
 80091d8:	200000a1 	.word	0x200000a1
 80091dc:	0801d9e0 	.word	0x0801d9e0

080091e0 <sl_wfx_ap_client_rejected_callback>:

/**************************************************************************//**
 * Callback for client rejected from AP
 *****************************************************************************/
void sl_wfx_ap_client_rejected_callback (sl_wfx_ap_client_rejected_ind_t *ap_client_rejected) {
 80091e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80091e2:	b089      	sub	sp, #36	; 0x24
 80091e4:	af04      	add	r7, sp, #16
 80091e6:	6078      	str	r0, [r7, #4]
  struct eth_addr mac_addr;
  
  memcpy(&mac_addr, ap_client_rejected->body.mac, SL_WFX_BSSID_SIZE);
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	1d1a      	adds	r2, r3, #4
 80091ec:	f107 0308 	add.w	r3, r7, #8
 80091f0:	6810      	ldr	r0, [r2, #0]
 80091f2:	6018      	str	r0, [r3, #0]
 80091f4:	8892      	ldrh	r2, [r2, #4]
 80091f6:	809a      	strh	r2, [r3, #4]
  dhcpserver_remove_mac(&mac_addr);
 80091f8:	f107 0308 	add.w	r3, r7, #8
 80091fc:	4618      	mov	r0, r3
 80091fe:	f7f8 fae1 	bl	80017c4 <dhcpserver_remove_mac>
  printf("Client rejected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
         ap_client_rejected->body.reason,
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	895b      	ldrh	r3, [r3, #10]
 8009206:	b29b      	uxth	r3, r3
  printf("Client rejected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8009208:	461c      	mov	r4, r3
         ap_client_rejected->body.mac[0],
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	791b      	ldrb	r3, [r3, #4]
  printf("Client rejected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800920e:	461d      	mov	r5, r3
         ap_client_rejected->body.mac[1],
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	795b      	ldrb	r3, [r3, #5]
  printf("Client rejected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8009214:	461e      	mov	r6, r3
         ap_client_rejected->body.mac[2],
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	799b      	ldrb	r3, [r3, #6]
  printf("Client rejected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800921a:	461a      	mov	r2, r3
         ap_client_rejected->body.mac[3],
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	79db      	ldrb	r3, [r3, #7]
  printf("Client rejected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8009220:	4619      	mov	r1, r3
         ap_client_rejected->body.mac[4],
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	7a1b      	ldrb	r3, [r3, #8]
  printf("Client rejected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8009226:	4618      	mov	r0, r3
         ap_client_rejected->body.mac[5]);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	7a5b      	ldrb	r3, [r3, #9]
  printf("Client rejected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800922c:	9303      	str	r3, [sp, #12]
 800922e:	9002      	str	r0, [sp, #8]
 8009230:	9101      	str	r1, [sp, #4]
 8009232:	9200      	str	r2, [sp, #0]
 8009234:	4633      	mov	r3, r6
 8009236:	462a      	mov	r2, r5
 8009238:	4621      	mov	r1, r4
 800923a:	4803      	ldr	r0, [pc, #12]	; (8009248 <sl_wfx_ap_client_rejected_callback+0x68>)
 800923c:	f011 fdc8 	bl	801add0 <iprintf>
}
 8009240:	bf00      	nop
 8009242:	3714      	adds	r7, #20
 8009244:	46bd      	mov	sp, r7
 8009246:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009248:	0801da14 	.word	0x0801da14

0800924c <sl_wfx_ap_client_disconnected_callback>:

/**************************************************************************//**
 * Callback for AP client disconnect
 *****************************************************************************/
void sl_wfx_ap_client_disconnected_callback (sl_wfx_ap_client_disconnected_ind_t *ap_client_disconnected) {
 800924c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800924e:	b089      	sub	sp, #36	; 0x24
 8009250:	af04      	add	r7, sp, #16
 8009252:	6078      	str	r0, [r7, #4]
  struct eth_addr mac_addr;
  
  memcpy(&mac_addr, ap_client_disconnected->body.mac, SL_WFX_BSSID_SIZE);
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	1d1a      	adds	r2, r3, #4
 8009258:	f107 0308 	add.w	r3, r7, #8
 800925c:	6810      	ldr	r0, [r2, #0]
 800925e:	6018      	str	r0, [r3, #0]
 8009260:	8892      	ldrh	r2, [r2, #4]
 8009262:	809a      	strh	r2, [r3, #4]
  dhcpserver_remove_mac(&mac_addr);
 8009264:	f107 0308 	add.w	r3, r7, #8
 8009268:	4618      	mov	r0, r3
 800926a:	f7f8 faab 	bl	80017c4 <dhcpserver_remove_mac>
  printf("Client disconnected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
         ap_client_disconnected->body.reason,
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	895b      	ldrh	r3, [r3, #10]
 8009272:	b29b      	uxth	r3, r3
  printf("Client disconnected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8009274:	461c      	mov	r4, r3
         ap_client_disconnected->body.mac[0],
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	791b      	ldrb	r3, [r3, #4]
  printf("Client disconnected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800927a:	461d      	mov	r5, r3
         ap_client_disconnected->body.mac[1],
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	795b      	ldrb	r3, [r3, #5]
  printf("Client disconnected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8009280:	461e      	mov	r6, r3
         ap_client_disconnected->body.mac[2],
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	799b      	ldrb	r3, [r3, #6]
  printf("Client disconnected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8009286:	461a      	mov	r2, r3
         ap_client_disconnected->body.mac[3],
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	79db      	ldrb	r3, [r3, #7]
  printf("Client disconnected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800928c:	4619      	mov	r1, r3
         ap_client_disconnected->body.mac[4],
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	7a1b      	ldrb	r3, [r3, #8]
  printf("Client disconnected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8009292:	4618      	mov	r0, r3
         ap_client_disconnected->body.mac[5]);
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	7a5b      	ldrb	r3, [r3, #9]
  printf("Client disconnected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8009298:	9303      	str	r3, [sp, #12]
 800929a:	9002      	str	r0, [sp, #8]
 800929c:	9101      	str	r1, [sp, #4]
 800929e:	9200      	str	r2, [sp, #0]
 80092a0:	4633      	mov	r3, r6
 80092a2:	462a      	mov	r2, r5
 80092a4:	4621      	mov	r1, r4
 80092a6:	4803      	ldr	r0, [pc, #12]	; (80092b4 <sl_wfx_ap_client_disconnected_callback+0x68>)
 80092a8:	f011 fd92 	bl	801add0 <iprintf>
}
 80092ac:	bf00      	nop
 80092ae:	3714      	adds	r7, #20
 80092b0:	46bd      	mov	sp, r7
 80092b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80092b4:	0801da58 	.word	0x0801da58

080092b8 <sl_wfx_ext_auth_callback>:

/**************************************************************************//**
 * Callback for External Authentication
 *****************************************************************************/
void sl_wfx_ext_auth_callback (sl_wfx_ext_auth_ind_t *ext_auth_indication) {
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b084      	sub	sp, #16
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
  void *buffer;
  sl_status_t status;

  status = sl_wfx_host_allocate_buffer(&buffer,
                                       SL_WFX_RX_FRAME_BUFFER,
                                       ext_auth_indication->header.length);
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	881b      	ldrh	r3, [r3, #0]
 80092c4:	b29b      	uxth	r3, r3
  status = sl_wfx_host_allocate_buffer(&buffer,
 80092c6:	461a      	mov	r2, r3
 80092c8:	f107 0308 	add.w	r3, r7, #8
 80092cc:	2101      	movs	r1, #1
 80092ce:	4618      	mov	r0, r3
 80092d0:	f7ff fbfe 	bl	8008ad0 <sl_wfx_host_allocate_buffer>
 80092d4:	60f8      	str	r0, [r7, #12]
  if (status == SL_STATUS_OK) {
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d10f      	bne.n	80092fc <sl_wfx_ext_auth_callback+0x44>
    memcpy(buffer,
 80092dc:	68b8      	ldr	r0, [r7, #8]
           (void *)ext_auth_indication,
           ext_auth_indication->header.length);
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	881b      	ldrh	r3, [r3, #0]
 80092e2:	b29b      	uxth	r3, r3
    memcpy(buffer,
 80092e4:	461a      	mov	r2, r3
 80092e6:	6879      	ldr	r1, [r7, #4]
 80092e8:	f010 fffc 	bl	801a2e4 <memcpy>
    xQueueSend(wifi_event_queue, &buffer, 0);
 80092ec:	4b05      	ldr	r3, [pc, #20]	; (8009304 <sl_wfx_ext_auth_callback+0x4c>)
 80092ee:	6818      	ldr	r0, [r3, #0]
 80092f0:	f107 0108 	add.w	r1, r7, #8
 80092f4:	2300      	movs	r3, #0
 80092f6:	2200      	movs	r2, #0
 80092f8:	f000 ff90 	bl	800a21c <xQueueGenericSend>
  }
}
 80092fc:	bf00      	nop
 80092fe:	3710      	adds	r7, #16
 8009300:	46bd      	mov	sp, r7
 8009302:	bd80      	pop	{r7, pc}
 8009304:	2000134c 	.word	0x2000134c

08009308 <wifi_events_start>:
static void wifi_events_task_entry(void const * pvParameters);

/**************************************************************************//**
 * Start the Wi-Fi event handling task
 *****************************************************************************/
void wifi_events_start (void) {
 8009308:	b5b0      	push	{r4, r5, r7, lr}
 800930a:	b086      	sub	sp, #24
 800930c:	af00      	add	r7, sp, #0
  sae_exch_sem = xSemaphoreCreateBinary();
 800930e:	2203      	movs	r2, #3
 8009310:	2100      	movs	r1, #0
 8009312:	2001      	movs	r0, #1
 8009314:	f000 fefa 	bl	800a10c <xQueueGenericCreate>
 8009318:	4603      	mov	r3, r0
 800931a:	4a0d      	ldr	r2, [pc, #52]	; (8009350 <wifi_events_start+0x48>)
 800931c:	6013      	str	r3, [r2, #0]
  osThreadDef(eventsTask, wifi_events_task_entry, osPriorityBelowNormal, 0, 1024);
 800931e:	4b0d      	ldr	r3, [pc, #52]	; (8009354 <wifi_events_start+0x4c>)
 8009320:	1d3c      	adds	r4, r7, #4
 8009322:	461d      	mov	r5, r3
 8009324:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009326:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009328:	682b      	ldr	r3, [r5, #0]
 800932a:	6023      	str	r3, [r4, #0]
  osThreadCreate(osThread(eventsTask), NULL);
 800932c:	1d3b      	adds	r3, r7, #4
 800932e:	2100      	movs	r1, #0
 8009330:	4618      	mov	r0, r3
 8009332:	f000 fa70 	bl	8009816 <osThreadCreate>
  wifi_event_queue = xQueueCreate(SL_WFX_EVENTS_NB_MAX, sizeof(void *));
 8009336:	2200      	movs	r2, #0
 8009338:	2104      	movs	r1, #4
 800933a:	200a      	movs	r0, #10
 800933c:	f000 fee6 	bl	800a10c <xQueueGenericCreate>
 8009340:	4603      	mov	r3, r0
 8009342:	4a05      	ldr	r2, [pc, #20]	; (8009358 <wifi_events_start+0x50>)
 8009344:	6013      	str	r3, [r2, #0]
}
 8009346:	bf00      	nop
 8009348:	3718      	adds	r7, #24
 800934a:	46bd      	mov	sp, r7
 800934c:	bdb0      	pop	{r4, r5, r7, pc}
 800934e:	bf00      	nop
 8009350:	20001350 	.word	0x20001350
 8009354:	0801daac 	.word	0x0801daac
 8009358:	2000134c 	.word	0x2000134c

0800935c <wifi_events_task_entry>:

/**************************************************************************//**
 * Wi-Fi event handling task entry point
 *****************************************************************************/
static void wifi_events_task_entry (void const * pvParameters) {
 800935c:	b580      	push	{r7, lr}
 800935e:	b084      	sub	sp, #16
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
  sl_wfx_generic_message_t *msg;
  BaseType_t ret;
  
	while(1) {

	ret = xQueueReceive(wifi_event_queue, (void *)&msg, portMAX_DELAY);
 8009364:	4b22      	ldr	r3, [pc, #136]	; (80093f0 <wifi_events_task_entry+0x94>)
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	f107 0108 	add.w	r1, r7, #8
 800936c:	f04f 32ff 	mov.w	r2, #4294967295
 8009370:	4618      	mov	r0, r3
 8009372:	f001 f979 	bl	800a668 <xQueueReceive>
 8009376:	60f8      	str	r0, [r7, #12]
     
    if ((ret == pdTRUE) && (msg != NULL)) {
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	2b01      	cmp	r3, #1
 800937c:	d1f2      	bne.n	8009364 <wifi_events_task_entry+0x8>
 800937e:	68bb      	ldr	r3, [r7, #8]
 8009380:	2b00      	cmp	r3, #0
 8009382:	d0ef      	beq.n	8009364 <wifi_events_task_entry+0x8>
      switch (msg->header.id) {
 8009384:	68bb      	ldr	r3, [r7, #8]
 8009386:	789b      	ldrb	r3, [r3, #2]
 8009388:	3bc3      	subs	r3, #195	; 0xc3
 800938a:	2b09      	cmp	r3, #9
 800938c:	d82a      	bhi.n	80093e4 <wifi_events_task_entry+0x88>
 800938e:	a201      	add	r2, pc, #4	; (adr r2, 8009394 <wifi_events_task_entry+0x38>)
 8009390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009394:	080093bd 	.word	0x080093bd
 8009398:	080093c3 	.word	0x080093c3
 800939c:	080093c9 	.word	0x080093c9
 80093a0:	080093e5 	.word	0x080093e5
 80093a4:	080093cf 	.word	0x080093cf
 80093a8:	080093e5 	.word	0x080093e5
 80093ac:	080093e5 	.word	0x080093e5
 80093b0:	080093e5 	.word	0x080093e5
 80093b4:	080093e5 	.word	0x080093e5
 80093b8:	080093d5 	.word	0x080093d5
        case SL_WFX_CONNECT_IND_ID:
        {
          lwip_set_sta_link_up();
 80093bc:	f7f9 fc82 	bl	8002cc4 <lwip_set_sta_link_up>
            /* Enable the power save */
            sl_wfx_set_power_mode(WFM_PM_MODE_PS, WFM_PM_POLL_FAST_PS,1);
            sl_wfx_enable_device_power_save();
          }
#endif
          break;
 80093c0:	e010      	b.n	80093e4 <wifi_events_task_entry+0x88>
        }
        case SL_WFX_DISCONNECT_IND_ID:
        {
          lwip_set_sta_link_down();
 80093c2:	f7f9 fc9d 	bl	8002d00 <lwip_set_sta_link_down>
          break;
 80093c6:	e00d      	b.n	80093e4 <wifi_events_task_entry+0x88>
        }
        case SL_WFX_START_AP_IND_ID:
        {
          lwip_set_ap_link_up();
 80093c8:	f7f9 fcb8 	bl	8002d3c <lwip_set_ap_link_up>
#ifdef SLEEP_ENABLED
          /* Power save always disabled when SoftAP mode enabled */
          sl_wfx_set_power_mode(WFM_PM_MODE_ACTIVE, WFM_PM_POLL_FAST_PS, 0);
          sl_wfx_disable_device_power_save();
#endif
          break;
 80093cc:	e00a      	b.n	80093e4 <wifi_events_task_entry+0x88>
        }
        case SL_WFX_STOP_AP_IND_ID:
        {
          lwip_set_ap_link_down();
 80093ce:	f7f9 fccb 	bl	8002d68 <lwip_set_ap_link_down>
            /* Enable the power save */
            sl_wfx_set_power_mode(WFM_PM_MODE_PS, WFM_PM_POLL_FAST_PS,1);
            sl_wfx_enable_device_power_save();
          }
#endif
          break;
 80093d2:	e007      	b.n	80093e4 <wifi_events_task_entry+0x88>
        }
        case SL_WFX_SCAN_COMPLETE_IND_ID:
        {
          xSemaphoreGive(wifi_scan_sem);
 80093d4:	4b07      	ldr	r3, [pc, #28]	; (80093f4 <wifi_events_task_entry+0x98>)
 80093d6:	6818      	ldr	r0, [r3, #0]
 80093d8:	2300      	movs	r3, #0
 80093da:	2200      	movs	r2, #0
 80093dc:	2100      	movs	r1, #0
 80093de:	f000 ff1d 	bl	800a21c <xQueueGenericSend>
          break;
 80093e2:	bf00      	nop
        }
      }

      sl_wfx_host_free_buffer(msg, SL_WFX_RX_FRAME_BUFFER);
 80093e4:	68bb      	ldr	r3, [r7, #8]
 80093e6:	2101      	movs	r1, #1
 80093e8:	4618      	mov	r0, r3
 80093ea:	f7ff fb83 	bl	8008af4 <sl_wfx_host_free_buffer>
	ret = xQueueReceive(wifi_event_queue, (void *)&msg, portMAX_DELAY);
 80093ee:	e7b9      	b.n	8009364 <wifi_events_task_entry+0x8>
 80093f0:	2000134c 	.word	0x2000134c
 80093f4:	20001340 	.word	0x20001340

080093f8 <sl_wfx_host_init_bus>:
SemaphoreHandle_t spiDMASemaphore;

/**************************************************************************//**
 * Bus init function
 *****************************************************************************/
sl_status_t sl_wfx_host_init_bus (void) {
 80093f8:	b580      	push	{r7, lr}
 80093fa:	af00      	add	r7, sp, #0
  /* Init SPI interface */
  MX_SPI1_Init();
 80093fc:	f000 f8a8 	bl	8009550 <MX_SPI1_Init>

  /*Create semaphore to handle SPI*/
  spiDMASemaphore = xSemaphoreCreateBinary();
 8009400:	2203      	movs	r2, #3
 8009402:	2100      	movs	r1, #0
 8009404:	2001      	movs	r0, #1
 8009406:	f000 fe81 	bl	800a10c <xQueueGenericCreate>
 800940a:	4603      	mov	r3, r0
 800940c:	4a05      	ldr	r2, [pc, #20]	; (8009424 <sl_wfx_host_init_bus+0x2c>)
 800940e:	6013      	str	r3, [r2, #0]
  xSemaphoreGive(spiDMASemaphore);
 8009410:	4b04      	ldr	r3, [pc, #16]	; (8009424 <sl_wfx_host_init_bus+0x2c>)
 8009412:	6818      	ldr	r0, [r3, #0]
 8009414:	2300      	movs	r3, #0
 8009416:	2200      	movs	r2, #0
 8009418:	2100      	movs	r1, #0
 800941a:	f000 feff 	bl	800a21c <xQueueGenericSend>
  return SL_STATUS_OK;
 800941e:	2300      	movs	r3, #0
}
 8009420:	4618      	mov	r0, r3
 8009422:	bd80      	pop	{r7, pc}
 8009424:	2000146c 	.word	0x2000146c

08009428 <sl_wfx_host_deinit_bus>:

/**************************************************************************//**
 * Bus deinit function
 *****************************************************************************/
sl_status_t sl_wfx_host_deinit_bus (void) {
 8009428:	b580      	push	{r7, lr}
 800942a:	af00      	add	r7, sp, #0
  /* Delete the semaphore (No function implemented for semaphores, use mutex function) */
  osMutexDelete(spiDMASemaphore);
 800942c:	4b04      	ldr	r3, [pc, #16]	; (8009440 <sl_wfx_host_deinit_bus+0x18>)
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	4618      	mov	r0, r3
 8009432:	f000 fac9 	bl	80099c8 <osMutexDelete>

  /* Deinit SPI interface */
  MX_SPI1_DeInit();
 8009436:	f000 f8c1 	bl	80095bc <MX_SPI1_DeInit>
  return SL_STATUS_OK;
 800943a:	2300      	movs	r3, #0
}
 800943c:	4618      	mov	r0, r3
 800943e:	bd80      	pop	{r7, pc}
 8009440:	2000146c 	.word	0x2000146c

08009444 <sl_wfx_host_spi_cs_assert>:

/**************************************************************************//**
 * Assert SPI chip select
 *****************************************************************************/
sl_status_t sl_wfx_host_spi_cs_assert (void) {
 8009444:	b580      	push	{r7, lr}
 8009446:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(WFM_NSS_GPIO_Port, WFM_NSS_Pin, GPIO_PIN_RESET);
 8009448:	2200      	movs	r2, #0
 800944a:	2110      	movs	r1, #16
 800944c:	4802      	ldr	r0, [pc, #8]	; (8009458 <sl_wfx_host_spi_cs_assert+0x14>)
 800944e:	f7fb fcd7 	bl	8004e00 <HAL_GPIO_WritePin>
  return SL_STATUS_OK;
 8009452:	2300      	movs	r3, #0
}
 8009454:	4618      	mov	r0, r3
 8009456:	bd80      	pop	{r7, pc}
 8009458:	40020000 	.word	0x40020000

0800945c <sl_wfx_host_spi_cs_deassert>:

/**************************************************************************//**
 * Deassert SPI chip select
 *****************************************************************************/
sl_status_t sl_wfx_host_spi_cs_deassert (void) {
 800945c:	b580      	push	{r7, lr}
 800945e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(WFM_NSS_GPIO_Port, WFM_NSS_Pin, GPIO_PIN_SET);
 8009460:	2201      	movs	r2, #1
 8009462:	2110      	movs	r1, #16
 8009464:	4802      	ldr	r0, [pc, #8]	; (8009470 <sl_wfx_host_spi_cs_deassert+0x14>)
 8009466:	f7fb fccb 	bl	8004e00 <HAL_GPIO_WritePin>
  return SL_STATUS_OK;
 800946a:	2300      	movs	r3, #0
}
 800946c:	4618      	mov	r0, r3
 800946e:	bd80      	pop	{r7, pc}
 8009470:	40020000 	.word	0x40020000

08009474 <sl_wfx_host_spi_transfer_no_cs_assert>:
 *****************************************************************************/
sl_status_t sl_wfx_host_spi_transfer_no_cs_assert (sl_wfx_host_bus_transfer_type_t type,
                                                   uint8_t *header,
                                                   uint16_t header_length,
                                                   uint8_t *buffer,
                                                   uint16_t buffer_length) {
 8009474:	b580      	push	{r7, lr}
 8009476:	b086      	sub	sp, #24
 8009478:	af00      	add	r7, sp, #0
 800947a:	60b9      	str	r1, [r7, #8]
 800947c:	607b      	str	r3, [r7, #4]
 800947e:	4603      	mov	r3, r0
 8009480:	73fb      	strb	r3, [r7, #15]
 8009482:	4613      	mov	r3, r2
 8009484:	81bb      	strh	r3, [r7, #12]
  sl_status_t    result  = SL_STATUS_FAIL;
 8009486:	2301      	movs	r3, #1
 8009488:	617b      	str	r3, [r7, #20]
  const bool     is_read = ( type == SL_WFX_BUS_READ );
 800948a:	7bfb      	ldrb	r3, [r7, #15]
 800948c:	2b02      	cmp	r3, #2
 800948e:	bf0c      	ite	eq
 8009490:	2301      	moveq	r3, #1
 8009492:	2300      	movne	r3, #0
 8009494:	74fb      	strb	r3, [r7, #19]

  /* Wait for the DMA channels to be available */
  if (xSemaphoreTake(spiDMASemaphore, portMAX_DELAY) == pdTRUE ) {
 8009496:	4b21      	ldr	r3, [pc, #132]	; (800951c <sl_wfx_host_spi_transfer_no_cs_assert+0xa8>)
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	f04f 31ff 	mov.w	r1, #4294967295
 800949e:	4618      	mov	r0, r3
 80094a0:	f001 f9c2 	bl	800a828 <xQueueSemaphoreTake>
 80094a4:	4603      	mov	r3, r0
 80094a6:	2b01      	cmp	r3, #1
 80094a8:	d120      	bne.n	80094ec <sl_wfx_host_spi_transfer_no_cs_assert+0x78>
	/* send the 2-byte header without DMA */

    HAL_SPI_Transmit(&hspi1, header, header_length, 1);
 80094aa:	89ba      	ldrh	r2, [r7, #12]
 80094ac:	2301      	movs	r3, #1
 80094ae:	68b9      	ldr	r1, [r7, #8]
 80094b0:	481b      	ldr	r0, [pc, #108]	; (8009520 <sl_wfx_host_spi_transfer_no_cs_assert+0xac>)
 80094b2:	f7fc fa2c 	bl	800590e <HAL_SPI_Transmit>
    if (is_read) {
 80094b6:	7cfb      	ldrb	r3, [r7, #19]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d00b      	beq.n	80094d4 <sl_wfx_host_spi_transfer_no_cs_assert+0x60>
      if(HAL_SPI_Receive_DMA(&hspi1, buffer, buffer_length) == HAL_OK) result = SL_STATUS_OK;
 80094bc:	8c3b      	ldrh	r3, [r7, #32]
 80094be:	461a      	mov	r2, r3
 80094c0:	6879      	ldr	r1, [r7, #4]
 80094c2:	4817      	ldr	r0, [pc, #92]	; (8009520 <sl_wfx_host_spi_transfer_no_cs_assert+0xac>)
 80094c4:	f7fc fc16 	bl	8005cf4 <HAL_SPI_Receive_DMA>
 80094c8:	4603      	mov	r3, r0
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d110      	bne.n	80094f0 <sl_wfx_host_spi_transfer_no_cs_assert+0x7c>
 80094ce:	2300      	movs	r3, #0
 80094d0:	617b      	str	r3, [r7, #20]
 80094d2:	e00d      	b.n	80094f0 <sl_wfx_host_spi_transfer_no_cs_assert+0x7c>
    }
    else {
      if(HAL_SPI_Transmit_DMA(&hspi1, buffer, buffer_length) == HAL_OK) result = SL_STATUS_OK;
 80094d4:	8c3b      	ldrh	r3, [r7, #32]
 80094d6:	461a      	mov	r2, r3
 80094d8:	6879      	ldr	r1, [r7, #4]
 80094da:	4811      	ldr	r0, [pc, #68]	; (8009520 <sl_wfx_host_spi_transfer_no_cs_assert+0xac>)
 80094dc:	f7fc fb54 	bl	8005b88 <HAL_SPI_Transmit_DMA>
 80094e0:	4603      	mov	r3, r0
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d104      	bne.n	80094f0 <sl_wfx_host_spi_transfer_no_cs_assert+0x7c>
 80094e6:	2300      	movs	r3, #0
 80094e8:	617b      	str	r3, [r7, #20]
 80094ea:	e001      	b.n	80094f0 <sl_wfx_host_spi_transfer_no_cs_assert+0x7c>
    }
  } else {
    result = SL_STATUS_TIMEOUT;
 80094ec:	2307      	movs	r3, #7
 80094ee:	617b      	str	r3, [r7, #20]
  }

  /* Wait to receive the semaphore back from the DMA. In case of a read function, this means data is ready to be read*/
  if (xSemaphoreTake(spiDMASemaphore, portMAX_DELAY) == pdTRUE ) {
 80094f0:	4b0a      	ldr	r3, [pc, #40]	; (800951c <sl_wfx_host_spi_transfer_no_cs_assert+0xa8>)
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	f04f 31ff 	mov.w	r1, #4294967295
 80094f8:	4618      	mov	r0, r3
 80094fa:	f001 f995 	bl	800a828 <xQueueSemaphoreTake>
 80094fe:	4603      	mov	r3, r0
 8009500:	2b01      	cmp	r3, #1
 8009502:	d106      	bne.n	8009512 <sl_wfx_host_spi_transfer_no_cs_assert+0x9e>
    xSemaphoreGive(spiDMASemaphore);
 8009504:	4b05      	ldr	r3, [pc, #20]	; (800951c <sl_wfx_host_spi_transfer_no_cs_assert+0xa8>)
 8009506:	6818      	ldr	r0, [r3, #0]
 8009508:	2300      	movs	r3, #0
 800950a:	2200      	movs	r2, #0
 800950c:	2100      	movs	r1, #0
 800950e:	f000 fe85 	bl	800a21c <xQueueGenericSend>
  }

  return result;
 8009512:	697b      	ldr	r3, [r7, #20]
}
 8009514:	4618      	mov	r0, r3
 8009516:	3718      	adds	r7, #24
 8009518:	46bd      	mov	sp, r7
 800951a:	bd80      	pop	{r7, pc}
 800951c:	2000146c 	.word	0x2000146c
 8009520:	20001354 	.word	0x20001354

08009524 <sl_wfx_host_enable_platform_interrupt>:

/**************************************************************************//**
 * Enable interrupt
 *****************************************************************************/
sl_status_t sl_wfx_host_enable_platform_interrupt (void) {
 8009524:	b580      	push	{r7, lr}
 8009526:	af00      	add	r7, sp, #0
  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 10, 0);
 8009528:	2200      	movs	r2, #0
 800952a:	210a      	movs	r1, #10
 800952c:	2028      	movs	r0, #40	; 0x28
 800952e:	f7fa fdae 	bl	800408e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8009532:	2028      	movs	r0, #40	; 0x28
 8009534:	f7fa fdc7 	bl	80040c6 <HAL_NVIC_EnableIRQ>
  return SL_STATUS_OK;
 8009538:	2300      	movs	r3, #0
}
 800953a:	4618      	mov	r0, r3
 800953c:	bd80      	pop	{r7, pc}

0800953e <sl_wfx_host_disable_platform_interrupt>:

/**************************************************************************//**
 * Disable interrupt
 *****************************************************************************/
sl_status_t sl_wfx_host_disable_platform_interrupt (void) {
 800953e:	b580      	push	{r7, lr}
 8009540:	af00      	add	r7, sp, #0
  HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 8009542:	2028      	movs	r0, #40	; 0x28
 8009544:	f7fa fdcd 	bl	80040e2 <HAL_NVIC_DisableIRQ>
  return SL_STATUS_OK;
 8009548:	2300      	movs	r3, #0
}
 800954a:	4618      	mov	r0, r3
 800954c:	bd80      	pop	{r7, pc}
	...

08009550 <MX_SPI1_Init>:

/**************************************************************************//**
 * SPI1 init function
 *****************************************************************************/
static void MX_SPI1_Init (void) {
 8009550:	b580      	push	{r7, lr}
 8009552:	af00      	add	r7, sp, #0
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8009554:	4b17      	ldr	r3, [pc, #92]	; (80095b4 <MX_SPI1_Init+0x64>)
 8009556:	4a18      	ldr	r2, [pc, #96]	; (80095b8 <MX_SPI1_Init+0x68>)
 8009558:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800955a:	4b16      	ldr	r3, [pc, #88]	; (80095b4 <MX_SPI1_Init+0x64>)
 800955c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8009560:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8009562:	4b14      	ldr	r3, [pc, #80]	; (80095b4 <MX_SPI1_Init+0x64>)
 8009564:	2200      	movs	r2, #0
 8009566:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8009568:	4b12      	ldr	r3, [pc, #72]	; (80095b4 <MX_SPI1_Init+0x64>)
 800956a:	2200      	movs	r2, #0
 800956c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800956e:	4b11      	ldr	r3, [pc, #68]	; (80095b4 <MX_SPI1_Init+0x64>)
 8009570:	2200      	movs	r2, #0
 8009572:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8009574:	4b0f      	ldr	r3, [pc, #60]	; (80095b4 <MX_SPI1_Init+0x64>)
 8009576:	2200      	movs	r2, #0
 8009578:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800957a:	4b0e      	ldr	r3, [pc, #56]	; (80095b4 <MX_SPI1_Init+0x64>)
 800957c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009580:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009582:	4b0c      	ldr	r3, [pc, #48]	; (80095b4 <MX_SPI1_Init+0x64>)
 8009584:	2200      	movs	r2, #0
 8009586:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8009588:	4b0a      	ldr	r3, [pc, #40]	; (80095b4 <MX_SPI1_Init+0x64>)
 800958a:	2200      	movs	r2, #0
 800958c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800958e:	4b09      	ldr	r3, [pc, #36]	; (80095b4 <MX_SPI1_Init+0x64>)
 8009590:	2200      	movs	r2, #0
 8009592:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009594:	4b07      	ldr	r3, [pc, #28]	; (80095b4 <MX_SPI1_Init+0x64>)
 8009596:	2200      	movs	r2, #0
 8009598:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800959a:	4b06      	ldr	r3, [pc, #24]	; (80095b4 <MX_SPI1_Init+0x64>)
 800959c:	220a      	movs	r2, #10
 800959e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80095a0:	4804      	ldr	r0, [pc, #16]	; (80095b4 <MX_SPI1_Init+0x64>)
 80095a2:	f7fc f903 	bl	80057ac <HAL_SPI_Init>
 80095a6:	4603      	mov	r3, r0
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d001      	beq.n	80095b0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80095ac:	f7f9 ff8c 	bl	80034c8 <Error_Handler>
  }
}
 80095b0:	bf00      	nop
 80095b2:	bd80      	pop	{r7, pc}
 80095b4:	20001354 	.word	0x20001354
 80095b8:	40013000 	.word	0x40013000

080095bc <MX_SPI1_DeInit>:

/**************************************************************************//**
 * SPI1 deinit function
 *****************************************************************************/
static void MX_SPI1_DeInit (void) {
 80095bc:	b580      	push	{r7, lr}
 80095be:	af00      	add	r7, sp, #0
  /* SPI DMA DeInit */
  HAL_DMA_DeInit(&hdma_spi1_rx);
 80095c0:	4805      	ldr	r0, [pc, #20]	; (80095d8 <MX_SPI1_DeInit+0x1c>)
 80095c2:	f7fa fe73 	bl	80042ac <HAL_DMA_DeInit>
  HAL_DMA_DeInit(&hdma_spi1_tx);
 80095c6:	4805      	ldr	r0, [pc, #20]	; (80095dc <MX_SPI1_DeInit+0x20>)
 80095c8:	f7fa fe70 	bl	80042ac <HAL_DMA_DeInit>

  HAL_SPI_DeInit(&hspi1);
 80095cc:	4804      	ldr	r0, [pc, #16]	; (80095e0 <MX_SPI1_DeInit+0x24>)
 80095ce:	f7fc f976 	bl	80058be <HAL_SPI_DeInit>
}
 80095d2:	bf00      	nop
 80095d4:	bd80      	pop	{r7, pc}
 80095d6:	bf00      	nop
 80095d8:	2000140c 	.word	0x2000140c
 80095dc:	200013ac 	.word	0x200013ac
 80095e0:	20001354 	.word	0x20001354

080095e4 <sl_wfx_task_start>:
static sl_status_t sl_wfx_tx_process (void);

/**************************************************************************//**
 * Init wfx process thread
 *****************************************************************************/
void sl_wfx_task_start (void) {
 80095e4:	b5b0      	push	{r4, r5, r7, lr}
 80095e6:	b086      	sub	sp, #24
 80095e8:	af00      	add	r7, sp, #0

  sl_wfx_event_group = xEventGroupCreate();
 80095ea:	f000 fad4 	bl	8009b96 <xEventGroupCreate>
 80095ee:	4603      	mov	r3, r0
 80095f0:	4a10      	ldr	r2, [pc, #64]	; (8009634 <sl_wfx_task_start+0x50>)
 80095f2:	6013      	str	r3, [r2, #0]
  sl_wfx_tx_queue_mutex = xSemaphoreCreateMutex();
 80095f4:	2001      	movs	r0, #1
 80095f6:	f000 fdf8 	bl	800a1ea <xQueueCreateMutex>
 80095fa:	4603      	mov	r3, r0
 80095fc:	4a0e      	ldr	r2, [pc, #56]	; (8009638 <sl_wfx_task_start+0x54>)
 80095fe:	6013      	str	r3, [r2, #0]
  sl_wfx_tx_queue_context.head_ptr = NULL;
 8009600:	4b0e      	ldr	r3, [pc, #56]	; (800963c <sl_wfx_task_start+0x58>)
 8009602:	2200      	movs	r2, #0
 8009604:	601a      	str	r2, [r3, #0]
  sl_wfx_tx_queue_context.tail_ptr = NULL;
 8009606:	4b0d      	ldr	r3, [pc, #52]	; (800963c <sl_wfx_task_start+0x58>)
 8009608:	2200      	movs	r2, #0
 800960a:	605a      	str	r2, [r3, #4]
  osThreadDef(sl_wfx_task, sl_wfx_task_entry, osPriorityNormal , 0, configMINIMAL_STACK_SIZE*4);//osPriorityHigh
 800960c:	4b0c      	ldr	r3, [pc, #48]	; (8009640 <sl_wfx_task_start+0x5c>)
 800960e:	1d3c      	adds	r4, r7, #4
 8009610:	461d      	mov	r5, r3
 8009612:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009614:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009616:	682b      	ldr	r3, [r5, #0]
 8009618:	6023      	str	r3, [r4, #0]
  sl_wfx_task_handle = osThreadCreate(osThread(sl_wfx_task), NULL);
 800961a:	1d3b      	adds	r3, r7, #4
 800961c:	2100      	movs	r1, #0
 800961e:	4618      	mov	r0, r3
 8009620:	f000 f8f9 	bl	8009816 <osThreadCreate>
 8009624:	4603      	mov	r3, r0
 8009626:	4a07      	ldr	r2, [pc, #28]	; (8009644 <sl_wfx_task_start+0x60>)
 8009628:	6013      	str	r3, [r2, #0]

}
 800962a:	bf00      	nop
 800962c:	3718      	adds	r7, #24
 800962e:	46bd      	mov	sp, r7
 8009630:	bdb0      	pop	{r4, r5, r7, pc}
 8009632:	bf00      	nop
 8009634:	20001474 	.word	0x20001474
 8009638:	20001478 	.word	0x20001478
 800963c:	2000147c 	.word	0x2000147c
 8009640:	0801dacc 	.word	0x0801dacc
 8009644:	20001470 	.word	0x20001470

08009648 <sl_wfx_task_entry>:

/**************************************************************************//**
 * Wfx process task entry
 *****************************************************************************/
static void sl_wfx_task_entry (void const * pvParameters) {
 8009648:	b580      	push	{r7, lr}
 800964a:	b086      	sub	sp, #24
 800964c:	af02      	add	r7, sp, #8
 800964e:	6078      	str	r0, [r7, #4]
  uint16_t control_register = 0;
 8009650:	2300      	movs	r3, #0
 8009652:	81fb      	strh	r3, [r7, #14]
  

  while(1) {

    /*Wait for an event*/
    wifi_event_bits = xEventGroupWaitBits(sl_wfx_event_group,
 8009654:	4b0d      	ldr	r3, [pc, #52]	; (800968c <sl_wfx_task_entry+0x44>)
 8009656:	6818      	ldr	r0, [r3, #0]
 8009658:	f04f 33ff 	mov.w	r3, #4294967295
 800965c:	9300      	str	r3, [sp, #0]
 800965e:	2300      	movs	r3, #0
 8009660:	2201      	movs	r2, #1
 8009662:	2103      	movs	r1, #3
 8009664:	f000 faae 	bl	8009bc4 <xEventGroupWaitBits>
 8009668:	60b8      	str	r0, [r7, #8]
                                          SL_WFX_TX_PACKET_AVAILABLE | SL_WFX_RX_PACKET_AVAILABLE,
                                          pdTRUE,
                                          pdFALSE,
                                          portMAX_DELAY);

    if (wifi_event_bits & SL_WFX_TX_PACKET_AVAILABLE) {
 800966a:	68bb      	ldr	r3, [r7, #8]
 800966c:	f003 0301 	and.w	r3, r3, #1
 8009670:	2b00      	cmp	r3, #0
 8009672:	d001      	beq.n	8009678 <sl_wfx_task_entry+0x30>
      /* Process TX packets */
      sl_wfx_tx_process();
 8009674:	f000 f834 	bl	80096e0 <sl_wfx_tx_process>
    }
    if (wifi_event_bits & SL_WFX_RX_PACKET_AVAILABLE) {
 8009678:	68bb      	ldr	r3, [r7, #8]
 800967a:	f003 0302 	and.w	r3, r3, #2
 800967e:	2b00      	cmp	r3, #0
 8009680:	d0e8      	beq.n	8009654 <sl_wfx_task_entry+0xc>
      /* Process RX packets */
      sl_wfx_rx_process(control_register);
 8009682:	89fb      	ldrh	r3, [r7, #14]
 8009684:	4618      	mov	r0, r3
 8009686:	f000 f803 	bl	8009690 <sl_wfx_rx_process>
    wifi_event_bits = xEventGroupWaitBits(sl_wfx_event_group,
 800968a:	e7e3      	b.n	8009654 <sl_wfx_task_entry+0xc>
 800968c:	20001474 	.word	0x20001474

08009690 <sl_wfx_rx_process>:
}

/**************************************************************************//**
 * Wfx process receive frame
 *****************************************************************************/
static sl_status_t sl_wfx_rx_process (uint16_t control_register) {
 8009690:	b580      	push	{r7, lr}
 8009692:	b084      	sub	sp, #16
 8009694:	af00      	add	r7, sp, #0
 8009696:	4603      	mov	r3, r0
 8009698:	80fb      	strh	r3, [r7, #6]
  sl_status_t result;

  sl_wfx_host_disable_platform_interrupt();
 800969a:	f7ff ff50 	bl	800953e <sl_wfx_host_disable_platform_interrupt>

  /* Receive a frame */
  result = sl_wfx_receive_frame(&control_register);
 800969e:	1dbb      	adds	r3, r7, #6
 80096a0:	4618      	mov	r0, r3
 80096a2:	f7fe fa0b 	bl	8007abc <sl_wfx_receive_frame>
 80096a6:	60f8      	str	r0, [r7, #12]
  
  if (result) {
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d002      	beq.n	80096b4 <sl_wfx_rx_process+0x24>
    sl_wfx_host_enable_platform_interrupt();
 80096ae:	f7ff ff39 	bl	8009524 <sl_wfx_host_enable_platform_interrupt>
 80096b2:	e00d      	b.n	80096d0 <sl_wfx_rx_process+0x40>
  } else {
    if ((control_register & SL_WFX_CONT_NEXT_LEN_MASK) != 0) {
 80096b4:	88fb      	ldrh	r3, [r7, #6]
 80096b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d006      	beq.n	80096cc <sl_wfx_rx_process+0x3c>
      
      /* if a packet is still available in the WF200, set an RX event */
      xEventGroupSetBits(sl_wfx_event_group, SL_WFX_RX_PACKET_AVAILABLE);
 80096be:	4b07      	ldr	r3, [pc, #28]	; (80096dc <sl_wfx_rx_process+0x4c>)
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	2102      	movs	r1, #2
 80096c4:	4618      	mov	r0, r3
 80096c6:	f000 fb4b 	bl	8009d60 <xEventGroupSetBits>
 80096ca:	e001      	b.n	80096d0 <sl_wfx_rx_process+0x40>
    } else {
      sl_wfx_host_enable_platform_interrupt();
 80096cc:	f7ff ff2a 	bl	8009524 <sl_wfx_host_enable_platform_interrupt>
    }
  }

  return result;
 80096d0:	68fb      	ldr	r3, [r7, #12]
}
 80096d2:	4618      	mov	r0, r3
 80096d4:	3710      	adds	r7, #16
 80096d6:	46bd      	mov	sp, r7
 80096d8:	bd80      	pop	{r7, pc}
 80096da:	bf00      	nop
 80096dc:	20001474 	.word	0x20001474

080096e0 <sl_wfx_tx_process>:

/**************************************************************************//**
 * Wfx process tx queue
 *****************************************************************************/
static sl_status_t sl_wfx_tx_process (void) {
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b082      	sub	sp, #8
 80096e4:	af00      	add	r7, sp, #0
  sl_status_t result;
  sl_wfx_packet_queue_item_t *item_to_free;

  if (sl_wfx_tx_queue_context.head_ptr == NULL) {
 80096e6:	4b28      	ldr	r3, [pc, #160]	; (8009788 <sl_wfx_tx_process+0xa8>)
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d101      	bne.n	80096f2 <sl_wfx_tx_process+0x12>
    return SL_STATUS_EMPTY;
 80096ee:	231b      	movs	r3, #27
 80096f0:	e045      	b.n	800977e <sl_wfx_tx_process+0x9e>
  }

  /* Take TX queue mutex */
  xSemaphoreTake(sl_wfx_tx_queue_mutex, portMAX_DELAY);
 80096f2:	4b26      	ldr	r3, [pc, #152]	; (800978c <sl_wfx_tx_process+0xac>)
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	f04f 31ff 	mov.w	r1, #4294967295
 80096fa:	4618      	mov	r0, r3
 80096fc:	f001 f894 	bl	800a828 <xQueueSemaphoreTake>

  /* Send the packet */
  result = sl_wfx_send_ethernet_frame(&sl_wfx_tx_queue_context.head_ptr->buffer,
 8009700:	4b21      	ldr	r3, [pc, #132]	; (8009788 <sl_wfx_tx_process+0xa8>)
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	f103 000c 	add.w	r0, r3, #12
                                      sl_wfx_tx_queue_context.head_ptr->data_length,
 8009708:	4b1f      	ldr	r3, [pc, #124]	; (8009788 <sl_wfx_tx_process+0xa8>)
 800970a:	681b      	ldr	r3, [r3, #0]
  result = sl_wfx_send_ethernet_frame(&sl_wfx_tx_queue_context.head_ptr->buffer,
 800970c:	6899      	ldr	r1, [r3, #8]
                                      sl_wfx_tx_queue_context.head_ptr->interface,
 800970e:	4b1e      	ldr	r3, [pc, #120]	; (8009788 <sl_wfx_tx_process+0xa8>)
 8009710:	681b      	ldr	r3, [r3, #0]
  result = sl_wfx_send_ethernet_frame(&sl_wfx_tx_queue_context.head_ptr->buffer,
 8009712:	791a      	ldrb	r2, [r3, #4]
 8009714:	2300      	movs	r3, #0
 8009716:	f7fe f881 	bl	800781c <sl_wfx_send_ethernet_frame>
 800971a:	6078      	str	r0, [r7, #4]
                                      WFM_PRIORITY_BE0);

  if (result != SL_STATUS_OK) {
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	2b00      	cmp	r3, #0
 8009720:	d00e      	beq.n	8009740 <sl_wfx_tx_process+0x60>
    /* If the packet is not successfully sent, set the associated event and return */
    xEventGroupSetBits(sl_wfx_event_group, SL_WFX_TX_PACKET_AVAILABLE);
 8009722:	4b1b      	ldr	r3, [pc, #108]	; (8009790 <sl_wfx_tx_process+0xb0>)
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	2101      	movs	r1, #1
 8009728:	4618      	mov	r0, r3
 800972a:	f000 fb19 	bl	8009d60 <xEventGroupSetBits>
    xSemaphoreGive(sl_wfx_tx_queue_mutex);
 800972e:	4b17      	ldr	r3, [pc, #92]	; (800978c <sl_wfx_tx_process+0xac>)
 8009730:	6818      	ldr	r0, [r3, #0]
 8009732:	2300      	movs	r3, #0
 8009734:	2200      	movs	r2, #0
 8009736:	2100      	movs	r1, #0
 8009738:	f000 fd70 	bl	800a21c <xQueueGenericSend>
    return SL_STATUS_FULL;
 800973c:	231c      	movs	r3, #28
 800973e:	e01e      	b.n	800977e <sl_wfx_tx_process+0x9e>
  }
  
  /* The packet has been successfully sent, free it  */
  item_to_free = sl_wfx_tx_queue_context.head_ptr;
 8009740:	4b11      	ldr	r3, [pc, #68]	; (8009788 <sl_wfx_tx_process+0xa8>)
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	603b      	str	r3, [r7, #0]
  
  /* Move the queue pointer to process the next packet */
  sl_wfx_tx_queue_context.head_ptr = sl_wfx_tx_queue_context.head_ptr->next;
 8009746:	4b10      	ldr	r3, [pc, #64]	; (8009788 <sl_wfx_tx_process+0xa8>)
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	4a0e      	ldr	r2, [pc, #56]	; (8009788 <sl_wfx_tx_process+0xa8>)
 800974e:	6013      	str	r3, [r2, #0]

  /* The packet has been sent, release the packet  */
  sl_wfx_free_command_buffer((sl_wfx_generic_message_t*) item_to_free,
 8009750:	2200      	movs	r2, #0
 8009752:	214a      	movs	r1, #74	; 0x4a
 8009754:	6838      	ldr	r0, [r7, #0]
 8009756:	f7fe ff15 	bl	8008584 <sl_wfx_free_command_buffer>
                             SL_WFX_SEND_FRAME_REQ_ID,
                             SL_WFX_TX_FRAME_BUFFER);

  /* If a packet is available, set the associated event */
  if (sl_wfx_tx_queue_context.head_ptr != NULL) {
 800975a:	4b0b      	ldr	r3, [pc, #44]	; (8009788 <sl_wfx_tx_process+0xa8>)
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	2b00      	cmp	r3, #0
 8009760:	d005      	beq.n	800976e <sl_wfx_tx_process+0x8e>
    xEventGroupSetBits(sl_wfx_event_group, SL_WFX_TX_PACKET_AVAILABLE);
 8009762:	4b0b      	ldr	r3, [pc, #44]	; (8009790 <sl_wfx_tx_process+0xb0>)
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	2101      	movs	r1, #1
 8009768:	4618      	mov	r0, r3
 800976a:	f000 faf9 	bl	8009d60 <xEventGroupSetBits>
  }
  
  /* Release TX queue mutex */
  xSemaphoreGive(sl_wfx_tx_queue_mutex);
 800976e:	4b07      	ldr	r3, [pc, #28]	; (800978c <sl_wfx_tx_process+0xac>)
 8009770:	6818      	ldr	r0, [r3, #0]
 8009772:	2300      	movs	r3, #0
 8009774:	2200      	movs	r2, #0
 8009776:	2100      	movs	r1, #0
 8009778:	f000 fd50 	bl	800a21c <xQueueGenericSend>

  return result;
 800977c:	687b      	ldr	r3, [r7, #4]
}
 800977e:	4618      	mov	r0, r3
 8009780:	3708      	adds	r7, #8
 8009782:	46bd      	mov	sp, r7
 8009784:	bd80      	pop	{r7, pc}
 8009786:	bf00      	nop
 8009788:	2000147c 	.word	0x2000147c
 800978c:	20001478 	.word	0x20001478
 8009790:	20001474 	.word	0x20001474

08009794 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8009794:	b480      	push	{r7}
 8009796:	b085      	sub	sp, #20
 8009798:	af00      	add	r7, sp, #0
 800979a:	4603      	mov	r3, r0
 800979c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800979e:	2300      	movs	r3, #0
 80097a0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80097a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80097a6:	2b84      	cmp	r3, #132	; 0x84
 80097a8:	d005      	beq.n	80097b6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80097aa:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	4413      	add	r3, r2
 80097b2:	3303      	adds	r3, #3
 80097b4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80097b6:	68fb      	ldr	r3, [r7, #12]
}
 80097b8:	4618      	mov	r0, r3
 80097ba:	3714      	adds	r7, #20
 80097bc:	46bd      	mov	sp, r7
 80097be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c2:	4770      	bx	lr

080097c4 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80097c4:	b480      	push	{r7}
 80097c6:	b083      	sub	sp, #12
 80097c8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80097ca:	f3ef 8305 	mrs	r3, IPSR
 80097ce:	607b      	str	r3, [r7, #4]
  return(result);
 80097d0:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	bf14      	ite	ne
 80097d6:	2301      	movne	r3, #1
 80097d8:	2300      	moveq	r3, #0
 80097da:	b2db      	uxtb	r3, r3
}
 80097dc:	4618      	mov	r0, r3
 80097de:	370c      	adds	r7, #12
 80097e0:	46bd      	mov	sp, r7
 80097e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e6:	4770      	bx	lr

080097e8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80097ec:	f001 fd6c 	bl	800b2c8 <vTaskStartScheduler>
  
  return osOK;
 80097f0:	2300      	movs	r3, #0
}
 80097f2:	4618      	mov	r0, r3
 80097f4:	bd80      	pop	{r7, pc}

080097f6 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 80097f6:	b580      	push	{r7, lr}
 80097f8:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 80097fa:	f7ff ffe3 	bl	80097c4 <inHandlerMode>
 80097fe:	4603      	mov	r3, r0
 8009800:	2b00      	cmp	r3, #0
 8009802:	d003      	beq.n	800980c <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8009804:	f001 fe68 	bl	800b4d8 <xTaskGetTickCountFromISR>
 8009808:	4603      	mov	r3, r0
 800980a:	e002      	b.n	8009812 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800980c:	f001 fe54 	bl	800b4b8 <xTaskGetTickCount>
 8009810:	4603      	mov	r3, r0
  }
}
 8009812:	4618      	mov	r0, r3
 8009814:	bd80      	pop	{r7, pc}

08009816 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8009816:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009818:	b087      	sub	sp, #28
 800981a:	af02      	add	r7, sp, #8
 800981c:	6078      	str	r0, [r7, #4]
 800981e:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	685c      	ldr	r4, [r3, #4]
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800982c:	b29e      	uxth	r6, r3
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009834:	4618      	mov	r0, r3
 8009836:	f7ff ffad 	bl	8009794 <makeFreeRtosPriority>
 800983a:	4602      	mov	r2, r0
 800983c:	f107 030c 	add.w	r3, r7, #12
 8009840:	9301      	str	r3, [sp, #4]
 8009842:	9200      	str	r2, [sp, #0]
 8009844:	683b      	ldr	r3, [r7, #0]
 8009846:	4632      	mov	r2, r6
 8009848:	4629      	mov	r1, r5
 800984a:	4620      	mov	r0, r4
 800984c:	f001 fb46 	bl	800aedc <xTaskCreate>
 8009850:	4603      	mov	r3, r0
 8009852:	2b01      	cmp	r3, #1
 8009854:	d001      	beq.n	800985a <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8009856:	2300      	movs	r3, #0
 8009858:	e000      	b.n	800985c <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 800985a:	68fb      	ldr	r3, [r7, #12]
}
 800985c:	4618      	mov	r0, r3
 800985e:	3714      	adds	r7, #20
 8009860:	46bd      	mov	sp, r7
 8009862:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009864 <osThreadTerminate>:
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadTerminate shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadTerminate (osThreadId thread_id)
{
 8009864:	b580      	push	{r7, lr}
 8009866:	b082      	sub	sp, #8
 8009868:	af00      	add	r7, sp, #0
 800986a:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskDelete == 1)
  vTaskDelete(thread_id);
 800986c:	6878      	ldr	r0, [r7, #4]
 800986e:	f001 fc67 	bl	800b140 <vTaskDelete>
  return osOK;
 8009872:	2300      	movs	r3, #0
#else
  return osErrorOS;
#endif
}
 8009874:	4618      	mov	r0, r3
 8009876:	3708      	adds	r7, #8
 8009878:	46bd      	mov	sp, r7
 800987a:	bd80      	pop	{r7, pc}

0800987c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800987c:	b580      	push	{r7, lr}
 800987e:	b084      	sub	sp, #16
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	085b      	lsrs	r3, r3, #1
 8009888:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	2b00      	cmp	r3, #0
 800988e:	d001      	beq.n	8009894 <osDelay+0x18>
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	e000      	b.n	8009896 <osDelay+0x1a>
 8009894:	2301      	movs	r3, #1
 8009896:	4618      	mov	r0, r3
 8009898:	f001 fce2 	bl	800b260 <vTaskDelay>
  
  return osOK;
 800989c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800989e:	4618      	mov	r0, r3
 80098a0:	3710      	adds	r7, #16
 80098a2:	46bd      	mov	sp, r7
 80098a4:	bd80      	pop	{r7, pc}

080098a6 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 80098a6:	b580      	push	{r7, lr}
 80098a8:	b082      	sub	sp, #8
 80098aa:	af00      	add	r7, sp, #0
 80098ac:	6078      	str	r0, [r7, #4]
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 80098ae:	2001      	movs	r0, #1
 80098b0:	f000 fc9b 	bl	800a1ea <xQueueCreateMutex>
 80098b4:	4603      	mov	r3, r0
#endif
#else
  return NULL;
#endif
}
 80098b6:	4618      	mov	r0, r3
 80098b8:	3708      	adds	r7, #8
 80098ba:	46bd      	mov	sp, r7
 80098bc:	bd80      	pop	{r7, pc}
	...

080098c0 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 80098c0:	b580      	push	{r7, lr}
 80098c2:	b084      	sub	sp, #16
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	6078      	str	r0, [r7, #4]
 80098c8:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80098ca:	2300      	movs	r3, #0
 80098cc:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d101      	bne.n	80098d8 <osMutexWait+0x18>
    return osErrorParameter;
 80098d4:	2380      	movs	r3, #128	; 0x80
 80098d6:	e03b      	b.n	8009950 <osMutexWait+0x90>
  }
  
  ticks = 0;
 80098d8:	2300      	movs	r3, #0
 80098da:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80098dc:	683b      	ldr	r3, [r7, #0]
 80098de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098e2:	d103      	bne.n	80098ec <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 80098e4:	f04f 33ff 	mov.w	r3, #4294967295
 80098e8:	60fb      	str	r3, [r7, #12]
 80098ea:	e00a      	b.n	8009902 <osMutexWait+0x42>
  }
  else if (millisec != 0) {
 80098ec:	683b      	ldr	r3, [r7, #0]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d007      	beq.n	8009902 <osMutexWait+0x42>
    ticks = millisec / portTICK_PERIOD_MS;
 80098f2:	683b      	ldr	r3, [r7, #0]
 80098f4:	085b      	lsrs	r3, r3, #1
 80098f6:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d101      	bne.n	8009902 <osMutexWait+0x42>
      ticks = 1;
 80098fe:	2301      	movs	r3, #1
 8009900:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8009902:	f7ff ff5f 	bl	80097c4 <inHandlerMode>
 8009906:	4603      	mov	r3, r0
 8009908:	2b00      	cmp	r3, #0
 800990a:	d017      	beq.n	800993c <osMutexWait+0x7c>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800990c:	f107 0308 	add.w	r3, r7, #8
 8009910:	461a      	mov	r2, r3
 8009912:	2100      	movs	r1, #0
 8009914:	6878      	ldr	r0, [r7, #4]
 8009916:	f001 f893 	bl	800aa40 <xQueueReceiveFromISR>
 800991a:	4603      	mov	r3, r0
 800991c:	2b01      	cmp	r3, #1
 800991e:	d001      	beq.n	8009924 <osMutexWait+0x64>
      return osErrorOS;
 8009920:	23ff      	movs	r3, #255	; 0xff
 8009922:	e015      	b.n	8009950 <osMutexWait+0x90>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8009924:	68bb      	ldr	r3, [r7, #8]
 8009926:	2b00      	cmp	r3, #0
 8009928:	d011      	beq.n	800994e <osMutexWait+0x8e>
 800992a:	4b0b      	ldr	r3, [pc, #44]	; (8009958 <osMutexWait+0x98>)
 800992c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009930:	601a      	str	r2, [r3, #0]
 8009932:	f3bf 8f4f 	dsb	sy
 8009936:	f3bf 8f6f 	isb	sy
 800993a:	e008      	b.n	800994e <osMutexWait+0x8e>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800993c:	68f9      	ldr	r1, [r7, #12]
 800993e:	6878      	ldr	r0, [r7, #4]
 8009940:	f000 ff72 	bl	800a828 <xQueueSemaphoreTake>
 8009944:	4603      	mov	r3, r0
 8009946:	2b01      	cmp	r3, #1
 8009948:	d001      	beq.n	800994e <osMutexWait+0x8e>
    return osErrorOS;
 800994a:	23ff      	movs	r3, #255	; 0xff
 800994c:	e000      	b.n	8009950 <osMutexWait+0x90>
  }
  
  return osOK;
 800994e:	2300      	movs	r3, #0
}
 8009950:	4618      	mov	r0, r3
 8009952:	3710      	adds	r7, #16
 8009954:	46bd      	mov	sp, r7
 8009956:	bd80      	pop	{r7, pc}
 8009958:	e000ed04 	.word	0xe000ed04

0800995c <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800995c:	b580      	push	{r7, lr}
 800995e:	b084      	sub	sp, #16
 8009960:	af00      	add	r7, sp, #0
 8009962:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8009964:	2300      	movs	r3, #0
 8009966:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8009968:	2300      	movs	r3, #0
 800996a:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800996c:	f7ff ff2a 	bl	80097c4 <inHandlerMode>
 8009970:	4603      	mov	r3, r0
 8009972:	2b00      	cmp	r3, #0
 8009974:	d016      	beq.n	80099a4 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8009976:	f107 0308 	add.w	r3, r7, #8
 800997a:	4619      	mov	r1, r3
 800997c:	6878      	ldr	r0, [r7, #4]
 800997e:	f000 fde6 	bl	800a54e <xQueueGiveFromISR>
 8009982:	4603      	mov	r3, r0
 8009984:	2b01      	cmp	r3, #1
 8009986:	d001      	beq.n	800998c <osMutexRelease+0x30>
      return osErrorOS;
 8009988:	23ff      	movs	r3, #255	; 0xff
 800998a:	e017      	b.n	80099bc <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800998c:	68bb      	ldr	r3, [r7, #8]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d013      	beq.n	80099ba <osMutexRelease+0x5e>
 8009992:	4b0c      	ldr	r3, [pc, #48]	; (80099c4 <osMutexRelease+0x68>)
 8009994:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009998:	601a      	str	r2, [r3, #0]
 800999a:	f3bf 8f4f 	dsb	sy
 800999e:	f3bf 8f6f 	isb	sy
 80099a2:	e00a      	b.n	80099ba <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 80099a4:	2300      	movs	r3, #0
 80099a6:	2200      	movs	r2, #0
 80099a8:	2100      	movs	r1, #0
 80099aa:	6878      	ldr	r0, [r7, #4]
 80099ac:	f000 fc36 	bl	800a21c <xQueueGenericSend>
 80099b0:	4603      	mov	r3, r0
 80099b2:	2b01      	cmp	r3, #1
 80099b4:	d001      	beq.n	80099ba <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 80099b6:	23ff      	movs	r3, #255	; 0xff
 80099b8:	60fb      	str	r3, [r7, #12]
  }
  return result;
 80099ba:	68fb      	ldr	r3, [r7, #12]
}
 80099bc:	4618      	mov	r0, r3
 80099be:	3710      	adds	r7, #16
 80099c0:	46bd      	mov	sp, r7
 80099c2:	bd80      	pop	{r7, pc}
 80099c4:	e000ed04 	.word	0xe000ed04

080099c8 <osMutexDelete>:
* @param mutex_id  mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexDelete (osMutexId mutex_id)
{
 80099c8:	b580      	push	{r7, lr}
 80099ca:	b082      	sub	sp, #8
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80099d0:	f7ff fef8 	bl	80097c4 <inHandlerMode>
 80099d4:	4603      	mov	r3, r0
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d001      	beq.n	80099de <osMutexDelete+0x16>
    return osErrorISR;
 80099da:	2382      	movs	r3, #130	; 0x82
 80099dc:	e003      	b.n	80099e6 <osMutexDelete+0x1e>
  }

  vQueueDelete(mutex_id);
 80099de:	6878      	ldr	r0, [r7, #4]
 80099e0:	f001 f8ae 	bl	800ab40 <vQueueDelete>

  return osOK;
 80099e4:	2300      	movs	r3, #0
}
 80099e6:	4618      	mov	r0, r3
 80099e8:	3708      	adds	r7, #8
 80099ea:	46bd      	mov	sp, r7
 80099ec:	bd80      	pop	{r7, pc}

080099ee <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80099ee:	b580      	push	{r7, lr}
 80099f0:	b082      	sub	sp, #8
 80099f2:	af00      	add	r7, sp, #0
 80099f4:	6078      	str	r0, [r7, #4]
 80099f6:	6039      	str	r1, [r7, #0]
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	6818      	ldr	r0, [r3, #0]
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	685b      	ldr	r3, [r3, #4]
 8009a00:	2200      	movs	r2, #0
 8009a02:	4619      	mov	r1, r3
 8009a04:	f000 fb82 	bl	800a10c <xQueueGenericCreate>
 8009a08:	4603      	mov	r3, r0
#endif
}
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	3708      	adds	r7, #8
 8009a0e:	46bd      	mov	sp, r7
 8009a10:	bd80      	pop	{r7, pc}
	...

08009a14 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	b086      	sub	sp, #24
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	60f8      	str	r0, [r7, #12]
 8009a1c:	60b9      	str	r1, [r7, #8]
 8009a1e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8009a20:	2300      	movs	r3, #0
 8009a22:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	085b      	lsrs	r3, r3, #1
 8009a28:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8009a2a:	697b      	ldr	r3, [r7, #20]
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d101      	bne.n	8009a34 <osMessagePut+0x20>
    ticks = 1;
 8009a30:	2301      	movs	r3, #1
 8009a32:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8009a34:	f7ff fec6 	bl	80097c4 <inHandlerMode>
 8009a38:	4603      	mov	r3, r0
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d018      	beq.n	8009a70 <osMessagePut+0x5c>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8009a3e:	f107 0210 	add.w	r2, r7, #16
 8009a42:	f107 0108 	add.w	r1, r7, #8
 8009a46:	2300      	movs	r3, #0
 8009a48:	68f8      	ldr	r0, [r7, #12]
 8009a4a:	f000 fce5 	bl	800a418 <xQueueGenericSendFromISR>
 8009a4e:	4603      	mov	r3, r0
 8009a50:	2b01      	cmp	r3, #1
 8009a52:	d001      	beq.n	8009a58 <osMessagePut+0x44>
      return osErrorOS;
 8009a54:	23ff      	movs	r3, #255	; 0xff
 8009a56:	e018      	b.n	8009a8a <osMessagePut+0x76>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009a58:	693b      	ldr	r3, [r7, #16]
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d014      	beq.n	8009a88 <osMessagePut+0x74>
 8009a5e:	4b0d      	ldr	r3, [pc, #52]	; (8009a94 <osMessagePut+0x80>)
 8009a60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a64:	601a      	str	r2, [r3, #0]
 8009a66:	f3bf 8f4f 	dsb	sy
 8009a6a:	f3bf 8f6f 	isb	sy
 8009a6e:	e00b      	b.n	8009a88 <osMessagePut+0x74>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8009a70:	f107 0108 	add.w	r1, r7, #8
 8009a74:	2300      	movs	r3, #0
 8009a76:	697a      	ldr	r2, [r7, #20]
 8009a78:	68f8      	ldr	r0, [r7, #12]
 8009a7a:	f000 fbcf 	bl	800a21c <xQueueGenericSend>
 8009a7e:	4603      	mov	r3, r0
 8009a80:	2b01      	cmp	r3, #1
 8009a82:	d001      	beq.n	8009a88 <osMessagePut+0x74>
      return osErrorOS;
 8009a84:	23ff      	movs	r3, #255	; 0xff
 8009a86:	e000      	b.n	8009a8a <osMessagePut+0x76>
    }
  }
  
  return osOK;
 8009a88:	2300      	movs	r3, #0
}
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	3718      	adds	r7, #24
 8009a8e:	46bd      	mov	sp, r7
 8009a90:	bd80      	pop	{r7, pc}
 8009a92:	bf00      	nop
 8009a94:	e000ed04 	.word	0xe000ed04

08009a98 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8009a98:	b590      	push	{r4, r7, lr}
 8009a9a:	b08b      	sub	sp, #44	; 0x2c
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	60f8      	str	r0, [r7, #12]
 8009aa0:	60b9      	str	r1, [r7, #8]
 8009aa2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8009aa4:	68bb      	ldr	r3, [r7, #8]
 8009aa6:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8009aac:	68bb      	ldr	r3, [r7, #8]
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d10a      	bne.n	8009ac8 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8009ab2:	2380      	movs	r3, #128	; 0x80
 8009ab4:	617b      	str	r3, [r7, #20]
    return event;
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	461c      	mov	r4, r3
 8009aba:	f107 0314 	add.w	r3, r7, #20
 8009abe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009ac2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009ac6:	e055      	b.n	8009b74 <osMessageGet+0xdc>
  }
  
  taskWoken = pdFALSE;
 8009ac8:	2300      	movs	r3, #0
 8009aca:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8009acc:	2300      	movs	r3, #0
 8009ace:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ad6:	d103      	bne.n	8009ae0 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8009ad8:	f04f 33ff 	mov.w	r3, #4294967295
 8009adc:	627b      	str	r3, [r7, #36]	; 0x24
 8009ade:	e00a      	b.n	8009af6 <osMessageGet+0x5e>
  }
  else if (millisec != 0) {
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d007      	beq.n	8009af6 <osMessageGet+0x5e>
    ticks = millisec / portTICK_PERIOD_MS;
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	085b      	lsrs	r3, r3, #1
 8009aea:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8009aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d101      	bne.n	8009af6 <osMessageGet+0x5e>
      ticks = 1;
 8009af2:	2301      	movs	r3, #1
 8009af4:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8009af6:	f7ff fe65 	bl	80097c4 <inHandlerMode>
 8009afa:	4603      	mov	r3, r0
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d01c      	beq.n	8009b3a <osMessageGet+0xa2>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8009b00:	f107 0220 	add.w	r2, r7, #32
 8009b04:	f107 0314 	add.w	r3, r7, #20
 8009b08:	3304      	adds	r3, #4
 8009b0a:	4619      	mov	r1, r3
 8009b0c:	68b8      	ldr	r0, [r7, #8]
 8009b0e:	f000 ff97 	bl	800aa40 <xQueueReceiveFromISR>
 8009b12:	4603      	mov	r3, r0
 8009b14:	2b01      	cmp	r3, #1
 8009b16:	d102      	bne.n	8009b1e <osMessageGet+0x86>
      /* We have mail */
      event.status = osEventMessage;
 8009b18:	2310      	movs	r3, #16
 8009b1a:	617b      	str	r3, [r7, #20]
 8009b1c:	e001      	b.n	8009b22 <osMessageGet+0x8a>
    }
    else {
      event.status = osOK;
 8009b1e:	2300      	movs	r3, #0
 8009b20:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009b22:	6a3b      	ldr	r3, [r7, #32]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d01d      	beq.n	8009b64 <osMessageGet+0xcc>
 8009b28:	4b14      	ldr	r3, [pc, #80]	; (8009b7c <osMessageGet+0xe4>)
 8009b2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b2e:	601a      	str	r2, [r3, #0]
 8009b30:	f3bf 8f4f 	dsb	sy
 8009b34:	f3bf 8f6f 	isb	sy
 8009b38:	e014      	b.n	8009b64 <osMessageGet+0xcc>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8009b3a:	f107 0314 	add.w	r3, r7, #20
 8009b3e:	3304      	adds	r3, #4
 8009b40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b42:	4619      	mov	r1, r3
 8009b44:	68b8      	ldr	r0, [r7, #8]
 8009b46:	f000 fd8f 	bl	800a668 <xQueueReceive>
 8009b4a:	4603      	mov	r3, r0
 8009b4c:	2b01      	cmp	r3, #1
 8009b4e:	d102      	bne.n	8009b56 <osMessageGet+0xbe>
      /* We have mail */
      event.status = osEventMessage;
 8009b50:	2310      	movs	r3, #16
 8009b52:	617b      	str	r3, [r7, #20]
 8009b54:	e006      	b.n	8009b64 <osMessageGet+0xcc>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8009b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d101      	bne.n	8009b60 <osMessageGet+0xc8>
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	e000      	b.n	8009b62 <osMessageGet+0xca>
 8009b60:	2340      	movs	r3, #64	; 0x40
 8009b62:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	461c      	mov	r4, r3
 8009b68:	f107 0314 	add.w	r3, r7, #20
 8009b6c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009b70:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8009b74:	68f8      	ldr	r0, [r7, #12]
 8009b76:	372c      	adds	r7, #44	; 0x2c
 8009b78:	46bd      	mov	sp, r7
 8009b7a:	bd90      	pop	{r4, r7, pc}
 8009b7c:	e000ed04 	.word	0xe000ed04

08009b80 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 8009b80:	b580      	push	{r7, lr}
 8009b82:	af00      	add	r7, sp, #0

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8009b84:	f002 f858 	bl	800bc38 <xTaskGetSchedulerState>
 8009b88:	4603      	mov	r3, r0
 8009b8a:	2b01      	cmp	r3, #1
 8009b8c:	d001      	beq.n	8009b92 <osSystickHandler+0x12>
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 8009b8e:	f002 ff9b 	bl	800cac8 <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 8009b92:	bf00      	nop
 8009b94:	bd80      	pop	{r7, pc}

08009b96 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8009b96:	b580      	push	{r7, lr}
 8009b98:	b082      	sub	sp, #8
 8009b9a:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8009b9c:	2018      	movs	r0, #24
 8009b9e:	f003 f823 	bl	800cbe8 <pvPortMalloc>
 8009ba2:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d007      	beq.n	8009bba <xEventGroupCreate+0x24>
		{
			pxEventBits->uxEventBits = 0;
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	2200      	movs	r2, #0
 8009bae:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	3304      	adds	r3, #4
 8009bb4:	4618      	mov	r0, r3
 8009bb6:	f000 f98d 	bl	8009ed4 <vListInitialise>
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8009bba:	687b      	ldr	r3, [r7, #4]
	}
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	3708      	adds	r7, #8
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	bd80      	pop	{r7, pc}

08009bc4 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8009bc4:	b580      	push	{r7, lr}
 8009bc6:	b090      	sub	sp, #64	; 0x40
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	60f8      	str	r0, [r7, #12]
 8009bcc:	60b9      	str	r1, [r7, #8]
 8009bce:	607a      	str	r2, [r7, #4]
 8009bd0:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8009bda:	2300      	movs	r3, #0
 8009bdc:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d10a      	bne.n	8009bfa <xEventGroupWaitBits+0x36>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009be8:	f383 8811 	msr	BASEPRI, r3
 8009bec:	f3bf 8f6f 	isb	sy
 8009bf0:	f3bf 8f4f 	dsb	sy
 8009bf4:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009bf6:	bf00      	nop
 8009bf8:	e7fe      	b.n	8009bf8 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8009bfa:	68bb      	ldr	r3, [r7, #8]
 8009bfc:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d00a      	beq.n	8009c1a <xEventGroupWaitBits+0x56>
	__asm volatile
 8009c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c08:	f383 8811 	msr	BASEPRI, r3
 8009c0c:	f3bf 8f6f 	isb	sy
 8009c10:	f3bf 8f4f 	dsb	sy
 8009c14:	61fb      	str	r3, [r7, #28]
}
 8009c16:	bf00      	nop
 8009c18:	e7fe      	b.n	8009c18 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8009c1a:	68bb      	ldr	r3, [r7, #8]
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d10a      	bne.n	8009c36 <xEventGroupWaitBits+0x72>
	__asm volatile
 8009c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c24:	f383 8811 	msr	BASEPRI, r3
 8009c28:	f3bf 8f6f 	isb	sy
 8009c2c:	f3bf 8f4f 	dsb	sy
 8009c30:	61bb      	str	r3, [r7, #24]
}
 8009c32:	bf00      	nop
 8009c34:	e7fe      	b.n	8009c34 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009c36:	f001 ffff 	bl	800bc38 <xTaskGetSchedulerState>
 8009c3a:	4603      	mov	r3, r0
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d102      	bne.n	8009c46 <xEventGroupWaitBits+0x82>
 8009c40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d101      	bne.n	8009c4a <xEventGroupWaitBits+0x86>
 8009c46:	2301      	movs	r3, #1
 8009c48:	e000      	b.n	8009c4c <xEventGroupWaitBits+0x88>
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d10a      	bne.n	8009c66 <xEventGroupWaitBits+0xa2>
	__asm volatile
 8009c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c54:	f383 8811 	msr	BASEPRI, r3
 8009c58:	f3bf 8f6f 	isb	sy
 8009c5c:	f3bf 8f4f 	dsb	sy
 8009c60:	617b      	str	r3, [r7, #20]
}
 8009c62:	bf00      	nop
 8009c64:	e7fe      	b.n	8009c64 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 8009c66:	f001 fb7d 	bl	800b364 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8009c6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8009c70:	683a      	ldr	r2, [r7, #0]
 8009c72:	68b9      	ldr	r1, [r7, #8]
 8009c74:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009c76:	f000 f90b 	bl	8009e90 <prvTestWaitCondition>
 8009c7a:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8009c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d00e      	beq.n	8009ca0 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8009c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c84:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8009c86:	2300      	movs	r3, #0
 8009c88:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d028      	beq.n	8009ce2 <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8009c90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c92:	681a      	ldr	r2, [r3, #0]
 8009c94:	68bb      	ldr	r3, [r7, #8]
 8009c96:	43db      	mvns	r3, r3
 8009c98:	401a      	ands	r2, r3
 8009c9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c9c:	601a      	str	r2, [r3, #0]
 8009c9e:	e020      	b.n	8009ce2 <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8009ca0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d104      	bne.n	8009cb0 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8009ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ca8:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8009caa:	2301      	movs	r3, #1
 8009cac:	633b      	str	r3, [r7, #48]	; 0x30
 8009cae:	e018      	b.n	8009ce2 <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d003      	beq.n	8009cbe <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8009cb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cb8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009cbc:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8009cbe:	683b      	ldr	r3, [r7, #0]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d003      	beq.n	8009ccc <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8009cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cc6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009cca:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8009ccc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009cce:	1d18      	adds	r0, r3, #4
 8009cd0:	68ba      	ldr	r2, [r7, #8]
 8009cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cd4:	4313      	orrs	r3, r2
 8009cd6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009cd8:	4619      	mov	r1, r3
 8009cda:	f001 fd47 	bl	800b76c <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8009cde:	2300      	movs	r3, #0
 8009ce0:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8009ce2:	f001 fb4d 	bl	800b380 <xTaskResumeAll>
 8009ce6:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8009ce8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d031      	beq.n	8009d52 <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 8009cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d107      	bne.n	8009d04 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8009cf4:	4b19      	ldr	r3, [pc, #100]	; (8009d5c <xEventGroupWaitBits+0x198>)
 8009cf6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009cfa:	601a      	str	r2, [r3, #0]
 8009cfc:	f3bf 8f4f 	dsb	sy
 8009d00:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8009d04:	f002 f940 	bl	800bf88 <uxTaskResetEventItemValue>
 8009d08:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8009d0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d11a      	bne.n	8009d4a <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8009d14:	f002 fe46 	bl	800c9a4 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8009d18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8009d1e:	683a      	ldr	r2, [r7, #0]
 8009d20:	68b9      	ldr	r1, [r7, #8]
 8009d22:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009d24:	f000 f8b4 	bl	8009e90 <prvTestWaitCondition>
 8009d28:	4603      	mov	r3, r0
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d009      	beq.n	8009d42 <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d006      	beq.n	8009d42 <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8009d34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d36:	681a      	ldr	r2, [r3, #0]
 8009d38:	68bb      	ldr	r3, [r7, #8]
 8009d3a:	43db      	mvns	r3, r3
 8009d3c:	401a      	ands	r2, r3
 8009d3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d40:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8009d42:	2301      	movs	r3, #1
 8009d44:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8009d46:	f002 fe5d 	bl	800ca04 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8009d4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d4c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009d50:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8009d52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009d54:	4618      	mov	r0, r3
 8009d56:	3740      	adds	r7, #64	; 0x40
 8009d58:	46bd      	mov	sp, r7
 8009d5a:	bd80      	pop	{r7, pc}
 8009d5c:	e000ed04 	.word	0xe000ed04

08009d60 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8009d60:	b580      	push	{r7, lr}
 8009d62:	b08e      	sub	sp, #56	; 0x38
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	6078      	str	r0, [r7, #4]
 8009d68:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8009d72:	2300      	movs	r3, #0
 8009d74:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d10a      	bne.n	8009d92 <xEventGroupSetBits+0x32>
	__asm volatile
 8009d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d80:	f383 8811 	msr	BASEPRI, r3
 8009d84:	f3bf 8f6f 	isb	sy
 8009d88:	f3bf 8f4f 	dsb	sy
 8009d8c:	613b      	str	r3, [r7, #16]
}
 8009d8e:	bf00      	nop
 8009d90:	e7fe      	b.n	8009d90 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8009d92:	683b      	ldr	r3, [r7, #0]
 8009d94:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d00a      	beq.n	8009db2 <xEventGroupSetBits+0x52>
	__asm volatile
 8009d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009da0:	f383 8811 	msr	BASEPRI, r3
 8009da4:	f3bf 8f6f 	isb	sy
 8009da8:	f3bf 8f4f 	dsb	sy
 8009dac:	60fb      	str	r3, [r7, #12]
}
 8009dae:	bf00      	nop
 8009db0:	e7fe      	b.n	8009db0 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8009db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009db4:	3304      	adds	r3, #4
 8009db6:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dba:	3308      	adds	r3, #8
 8009dbc:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8009dbe:	f001 fad1 	bl	800b364 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8009dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dc4:	68db      	ldr	r3, [r3, #12]
 8009dc6:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8009dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dca:	681a      	ldr	r2, [r3, #0]
 8009dcc:	683b      	ldr	r3, [r7, #0]
 8009dce:	431a      	orrs	r2, r3
 8009dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dd2:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8009dd4:	e03c      	b.n	8009e50 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 8009dd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009dd8:	685b      	ldr	r3, [r3, #4]
 8009dda:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8009ddc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8009de2:	2300      	movs	r3, #0
 8009de4:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8009de6:	69bb      	ldr	r3, [r7, #24]
 8009de8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8009dec:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8009dee:	69bb      	ldr	r3, [r7, #24]
 8009df0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009df4:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8009df6:	697b      	ldr	r3, [r7, #20]
 8009df8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d108      	bne.n	8009e12 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8009e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e02:	681a      	ldr	r2, [r3, #0]
 8009e04:	69bb      	ldr	r3, [r7, #24]
 8009e06:	4013      	ands	r3, r2
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d00b      	beq.n	8009e24 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8009e0c:	2301      	movs	r3, #1
 8009e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009e10:	e008      	b.n	8009e24 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8009e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e14:	681a      	ldr	r2, [r3, #0]
 8009e16:	69bb      	ldr	r3, [r7, #24]
 8009e18:	4013      	ands	r3, r2
 8009e1a:	69ba      	ldr	r2, [r7, #24]
 8009e1c:	429a      	cmp	r2, r3
 8009e1e:	d101      	bne.n	8009e24 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8009e20:	2301      	movs	r3, #1
 8009e22:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8009e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d010      	beq.n	8009e4c <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8009e2a:	697b      	ldr	r3, [r7, #20]
 8009e2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d003      	beq.n	8009e3c <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8009e34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e36:	69bb      	ldr	r3, [r7, #24]
 8009e38:	4313      	orrs	r3, r2
 8009e3a:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8009e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8009e44:	4619      	mov	r1, r3
 8009e46:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8009e48:	f001 fd5a 	bl	800b900 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8009e4c:	69fb      	ldr	r3, [r7, #28]
 8009e4e:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8009e50:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009e52:	6a3b      	ldr	r3, [r7, #32]
 8009e54:	429a      	cmp	r2, r3
 8009e56:	d1be      	bne.n	8009dd6 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8009e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e5a:	681a      	ldr	r2, [r3, #0]
 8009e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e5e:	43db      	mvns	r3, r3
 8009e60:	401a      	ands	r2, r3
 8009e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e64:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8009e66:	f001 fa8b 	bl	800b380 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8009e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e6c:	681b      	ldr	r3, [r3, #0]
}
 8009e6e:	4618      	mov	r0, r3
 8009e70:	3738      	adds	r7, #56	; 0x38
 8009e72:	46bd      	mov	sp, r7
 8009e74:	bd80      	pop	{r7, pc}

08009e76 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8009e76:	b580      	push	{r7, lr}
 8009e78:	b082      	sub	sp, #8
 8009e7a:	af00      	add	r7, sp, #0
 8009e7c:	6078      	str	r0, [r7, #4]
 8009e7e:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8009e80:	6839      	ldr	r1, [r7, #0]
 8009e82:	6878      	ldr	r0, [r7, #4]
 8009e84:	f7ff ff6c 	bl	8009d60 <xEventGroupSetBits>
}
 8009e88:	bf00      	nop
 8009e8a:	3708      	adds	r7, #8
 8009e8c:	46bd      	mov	sp, r7
 8009e8e:	bd80      	pop	{r7, pc}

08009e90 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8009e90:	b480      	push	{r7}
 8009e92:	b087      	sub	sp, #28
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	60f8      	str	r0, [r7, #12]
 8009e98:	60b9      	str	r1, [r7, #8]
 8009e9a:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8009e9c:	2300      	movs	r3, #0
 8009e9e:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d107      	bne.n	8009eb6 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8009ea6:	68fa      	ldr	r2, [r7, #12]
 8009ea8:	68bb      	ldr	r3, [r7, #8]
 8009eaa:	4013      	ands	r3, r2
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d00a      	beq.n	8009ec6 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8009eb0:	2301      	movs	r3, #1
 8009eb2:	617b      	str	r3, [r7, #20]
 8009eb4:	e007      	b.n	8009ec6 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8009eb6:	68fa      	ldr	r2, [r7, #12]
 8009eb8:	68bb      	ldr	r3, [r7, #8]
 8009eba:	4013      	ands	r3, r2
 8009ebc:	68ba      	ldr	r2, [r7, #8]
 8009ebe:	429a      	cmp	r2, r3
 8009ec0:	d101      	bne.n	8009ec6 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8009ec2:	2301      	movs	r3, #1
 8009ec4:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8009ec6:	697b      	ldr	r3, [r7, #20]
}
 8009ec8:	4618      	mov	r0, r3
 8009eca:	371c      	adds	r7, #28
 8009ecc:	46bd      	mov	sp, r7
 8009ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed2:	4770      	bx	lr

08009ed4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009ed4:	b480      	push	{r7}
 8009ed6:	b083      	sub	sp, #12
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	f103 0208 	add.w	r2, r3, #8
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	f04f 32ff 	mov.w	r2, #4294967295
 8009eec:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	f103 0208 	add.w	r2, r3, #8
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	f103 0208 	add.w	r2, r3, #8
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	2200      	movs	r2, #0
 8009f06:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009f08:	bf00      	nop
 8009f0a:	370c      	adds	r7, #12
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f12:	4770      	bx	lr

08009f14 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009f14:	b480      	push	{r7}
 8009f16:	b083      	sub	sp, #12
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	2200      	movs	r2, #0
 8009f20:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009f22:	bf00      	nop
 8009f24:	370c      	adds	r7, #12
 8009f26:	46bd      	mov	sp, r7
 8009f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2c:	4770      	bx	lr

08009f2e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009f2e:	b480      	push	{r7}
 8009f30:	b085      	sub	sp, #20
 8009f32:	af00      	add	r7, sp, #0
 8009f34:	6078      	str	r0, [r7, #4]
 8009f36:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	685b      	ldr	r3, [r3, #4]
 8009f3c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009f3e:	683b      	ldr	r3, [r7, #0]
 8009f40:	68fa      	ldr	r2, [r7, #12]
 8009f42:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	689a      	ldr	r2, [r3, #8]
 8009f48:	683b      	ldr	r3, [r7, #0]
 8009f4a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	689b      	ldr	r3, [r3, #8]
 8009f50:	683a      	ldr	r2, [r7, #0]
 8009f52:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	683a      	ldr	r2, [r7, #0]
 8009f58:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009f5a:	683b      	ldr	r3, [r7, #0]
 8009f5c:	687a      	ldr	r2, [r7, #4]
 8009f5e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	1c5a      	adds	r2, r3, #1
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	601a      	str	r2, [r3, #0]
}
 8009f6a:	bf00      	nop
 8009f6c:	3714      	adds	r7, #20
 8009f6e:	46bd      	mov	sp, r7
 8009f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f74:	4770      	bx	lr

08009f76 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009f76:	b480      	push	{r7}
 8009f78:	b085      	sub	sp, #20
 8009f7a:	af00      	add	r7, sp, #0
 8009f7c:	6078      	str	r0, [r7, #4]
 8009f7e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009f80:	683b      	ldr	r3, [r7, #0]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009f86:	68bb      	ldr	r3, [r7, #8]
 8009f88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f8c:	d103      	bne.n	8009f96 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	691b      	ldr	r3, [r3, #16]
 8009f92:	60fb      	str	r3, [r7, #12]
 8009f94:	e00c      	b.n	8009fb0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	3308      	adds	r3, #8
 8009f9a:	60fb      	str	r3, [r7, #12]
 8009f9c:	e002      	b.n	8009fa4 <vListInsert+0x2e>
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	685b      	ldr	r3, [r3, #4]
 8009fa2:	60fb      	str	r3, [r7, #12]
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	685b      	ldr	r3, [r3, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	68ba      	ldr	r2, [r7, #8]
 8009fac:	429a      	cmp	r2, r3
 8009fae:	d2f6      	bcs.n	8009f9e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	685a      	ldr	r2, [r3, #4]
 8009fb4:	683b      	ldr	r3, [r7, #0]
 8009fb6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009fb8:	683b      	ldr	r3, [r7, #0]
 8009fba:	685b      	ldr	r3, [r3, #4]
 8009fbc:	683a      	ldr	r2, [r7, #0]
 8009fbe:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009fc0:	683b      	ldr	r3, [r7, #0]
 8009fc2:	68fa      	ldr	r2, [r7, #12]
 8009fc4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	683a      	ldr	r2, [r7, #0]
 8009fca:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009fcc:	683b      	ldr	r3, [r7, #0]
 8009fce:	687a      	ldr	r2, [r7, #4]
 8009fd0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	1c5a      	adds	r2, r3, #1
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	601a      	str	r2, [r3, #0]
}
 8009fdc:	bf00      	nop
 8009fde:	3714      	adds	r7, #20
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe6:	4770      	bx	lr

08009fe8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009fe8:	b480      	push	{r7}
 8009fea:	b085      	sub	sp, #20
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	691b      	ldr	r3, [r3, #16]
 8009ff4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	685b      	ldr	r3, [r3, #4]
 8009ffa:	687a      	ldr	r2, [r7, #4]
 8009ffc:	6892      	ldr	r2, [r2, #8]
 8009ffe:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	689b      	ldr	r3, [r3, #8]
 800a004:	687a      	ldr	r2, [r7, #4]
 800a006:	6852      	ldr	r2, [r2, #4]
 800a008:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	685b      	ldr	r3, [r3, #4]
 800a00e:	687a      	ldr	r2, [r7, #4]
 800a010:	429a      	cmp	r2, r3
 800a012:	d103      	bne.n	800a01c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	689a      	ldr	r2, [r3, #8]
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	2200      	movs	r2, #0
 800a020:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	1e5a      	subs	r2, r3, #1
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	681b      	ldr	r3, [r3, #0]
}
 800a030:	4618      	mov	r0, r3
 800a032:	3714      	adds	r7, #20
 800a034:	46bd      	mov	sp, r7
 800a036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03a:	4770      	bx	lr

0800a03c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a03c:	b580      	push	{r7, lr}
 800a03e:	b084      	sub	sp, #16
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]
 800a044:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d10a      	bne.n	800a066 <xQueueGenericReset+0x2a>
	__asm volatile
 800a050:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a054:	f383 8811 	msr	BASEPRI, r3
 800a058:	f3bf 8f6f 	isb	sy
 800a05c:	f3bf 8f4f 	dsb	sy
 800a060:	60bb      	str	r3, [r7, #8]
}
 800a062:	bf00      	nop
 800a064:	e7fe      	b.n	800a064 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a066:	f002 fc9d 	bl	800c9a4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	681a      	ldr	r2, [r3, #0]
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a072:	68f9      	ldr	r1, [r7, #12]
 800a074:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a076:	fb01 f303 	mul.w	r3, r1, r3
 800a07a:	441a      	add	r2, r3
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	2200      	movs	r2, #0
 800a084:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	681a      	ldr	r2, [r3, #0]
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	681a      	ldr	r2, [r3, #0]
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a096:	3b01      	subs	r3, #1
 800a098:	68f9      	ldr	r1, [r7, #12]
 800a09a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a09c:	fb01 f303 	mul.w	r3, r1, r3
 800a0a0:	441a      	add	r2, r3
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	22ff      	movs	r2, #255	; 0xff
 800a0aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	22ff      	movs	r2, #255	; 0xff
 800a0b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a0b6:	683b      	ldr	r3, [r7, #0]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d114      	bne.n	800a0e6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	691b      	ldr	r3, [r3, #16]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d01a      	beq.n	800a0fa <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	3310      	adds	r3, #16
 800a0c8:	4618      	mov	r0, r3
 800a0ca:	f001 fbb7 	bl	800b83c <xTaskRemoveFromEventList>
 800a0ce:	4603      	mov	r3, r0
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d012      	beq.n	800a0fa <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a0d4:	4b0c      	ldr	r3, [pc, #48]	; (800a108 <xQueueGenericReset+0xcc>)
 800a0d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0da:	601a      	str	r2, [r3, #0]
 800a0dc:	f3bf 8f4f 	dsb	sy
 800a0e0:	f3bf 8f6f 	isb	sy
 800a0e4:	e009      	b.n	800a0fa <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	3310      	adds	r3, #16
 800a0ea:	4618      	mov	r0, r3
 800a0ec:	f7ff fef2 	bl	8009ed4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	3324      	adds	r3, #36	; 0x24
 800a0f4:	4618      	mov	r0, r3
 800a0f6:	f7ff feed 	bl	8009ed4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a0fa:	f002 fc83 	bl	800ca04 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a0fe:	2301      	movs	r3, #1
}
 800a100:	4618      	mov	r0, r3
 800a102:	3710      	adds	r7, #16
 800a104:	46bd      	mov	sp, r7
 800a106:	bd80      	pop	{r7, pc}
 800a108:	e000ed04 	.word	0xe000ed04

0800a10c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a10c:	b580      	push	{r7, lr}
 800a10e:	b08a      	sub	sp, #40	; 0x28
 800a110:	af02      	add	r7, sp, #8
 800a112:	60f8      	str	r0, [r7, #12]
 800a114:	60b9      	str	r1, [r7, #8]
 800a116:	4613      	mov	r3, r2
 800a118:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d10a      	bne.n	800a136 <xQueueGenericCreate+0x2a>
	__asm volatile
 800a120:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a124:	f383 8811 	msr	BASEPRI, r3
 800a128:	f3bf 8f6f 	isb	sy
 800a12c:	f3bf 8f4f 	dsb	sy
 800a130:	613b      	str	r3, [r7, #16]
}
 800a132:	bf00      	nop
 800a134:	e7fe      	b.n	800a134 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	68ba      	ldr	r2, [r7, #8]
 800a13a:	fb02 f303 	mul.w	r3, r2, r3
 800a13e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a140:	69fb      	ldr	r3, [r7, #28]
 800a142:	3348      	adds	r3, #72	; 0x48
 800a144:	4618      	mov	r0, r3
 800a146:	f002 fd4f 	bl	800cbe8 <pvPortMalloc>
 800a14a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a14c:	69bb      	ldr	r3, [r7, #24]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d00d      	beq.n	800a16e <xQueueGenericCreate+0x62>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a152:	69bb      	ldr	r3, [r7, #24]
 800a154:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a156:	697b      	ldr	r3, [r7, #20]
 800a158:	3348      	adds	r3, #72	; 0x48
 800a15a:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a15c:	79fa      	ldrb	r2, [r7, #7]
 800a15e:	69bb      	ldr	r3, [r7, #24]
 800a160:	9300      	str	r3, [sp, #0]
 800a162:	4613      	mov	r3, r2
 800a164:	697a      	ldr	r2, [r7, #20]
 800a166:	68b9      	ldr	r1, [r7, #8]
 800a168:	68f8      	ldr	r0, [r7, #12]
 800a16a:	f000 f805 	bl	800a178 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a16e:	69bb      	ldr	r3, [r7, #24]
	}
 800a170:	4618      	mov	r0, r3
 800a172:	3720      	adds	r7, #32
 800a174:	46bd      	mov	sp, r7
 800a176:	bd80      	pop	{r7, pc}

0800a178 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a178:	b580      	push	{r7, lr}
 800a17a:	b084      	sub	sp, #16
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	60f8      	str	r0, [r7, #12]
 800a180:	60b9      	str	r1, [r7, #8]
 800a182:	607a      	str	r2, [r7, #4]
 800a184:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a186:	68bb      	ldr	r3, [r7, #8]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d103      	bne.n	800a194 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a18c:	69bb      	ldr	r3, [r7, #24]
 800a18e:	69ba      	ldr	r2, [r7, #24]
 800a190:	601a      	str	r2, [r3, #0]
 800a192:	e002      	b.n	800a19a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a194:	69bb      	ldr	r3, [r7, #24]
 800a196:	687a      	ldr	r2, [r7, #4]
 800a198:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a19a:	69bb      	ldr	r3, [r7, #24]
 800a19c:	68fa      	ldr	r2, [r7, #12]
 800a19e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a1a0:	69bb      	ldr	r3, [r7, #24]
 800a1a2:	68ba      	ldr	r2, [r7, #8]
 800a1a4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a1a6:	2101      	movs	r1, #1
 800a1a8:	69b8      	ldr	r0, [r7, #24]
 800a1aa:	f7ff ff47 	bl	800a03c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a1ae:	bf00      	nop
 800a1b0:	3710      	adds	r7, #16
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	bd80      	pop	{r7, pc}

0800a1b6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800a1b6:	b580      	push	{r7, lr}
 800a1b8:	b082      	sub	sp, #8
 800a1ba:	af00      	add	r7, sp, #0
 800a1bc:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d00e      	beq.n	800a1e2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	2200      	movs	r2, #0
 800a1c8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	2200      	movs	r2, #0
 800a1ce:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	2200      	movs	r2, #0
 800a1d4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	2200      	movs	r2, #0
 800a1da:	2100      	movs	r1, #0
 800a1dc:	6878      	ldr	r0, [r7, #4]
 800a1de:	f000 f81d 	bl	800a21c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800a1e2:	bf00      	nop
 800a1e4:	3708      	adds	r7, #8
 800a1e6:	46bd      	mov	sp, r7
 800a1e8:	bd80      	pop	{r7, pc}

0800a1ea <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800a1ea:	b580      	push	{r7, lr}
 800a1ec:	b086      	sub	sp, #24
 800a1ee:	af00      	add	r7, sp, #0
 800a1f0:	4603      	mov	r3, r0
 800a1f2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a1f4:	2301      	movs	r3, #1
 800a1f6:	617b      	str	r3, [r7, #20]
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800a1fc:	79fb      	ldrb	r3, [r7, #7]
 800a1fe:	461a      	mov	r2, r3
 800a200:	6939      	ldr	r1, [r7, #16]
 800a202:	6978      	ldr	r0, [r7, #20]
 800a204:	f7ff ff82 	bl	800a10c <xQueueGenericCreate>
 800a208:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a20a:	68f8      	ldr	r0, [r7, #12]
 800a20c:	f7ff ffd3 	bl	800a1b6 <prvInitialiseMutex>

		return xNewQueue;
 800a210:	68fb      	ldr	r3, [r7, #12]
	}
 800a212:	4618      	mov	r0, r3
 800a214:	3718      	adds	r7, #24
 800a216:	46bd      	mov	sp, r7
 800a218:	bd80      	pop	{r7, pc}
	...

0800a21c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a21c:	b580      	push	{r7, lr}
 800a21e:	b08e      	sub	sp, #56	; 0x38
 800a220:	af00      	add	r7, sp, #0
 800a222:	60f8      	str	r0, [r7, #12]
 800a224:	60b9      	str	r1, [r7, #8]
 800a226:	607a      	str	r2, [r7, #4]
 800a228:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a22a:	2300      	movs	r3, #0
 800a22c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a234:	2b00      	cmp	r3, #0
 800a236:	d10a      	bne.n	800a24e <xQueueGenericSend+0x32>
	__asm volatile
 800a238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a23c:	f383 8811 	msr	BASEPRI, r3
 800a240:	f3bf 8f6f 	isb	sy
 800a244:	f3bf 8f4f 	dsb	sy
 800a248:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a24a:	bf00      	nop
 800a24c:	e7fe      	b.n	800a24c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a24e:	68bb      	ldr	r3, [r7, #8]
 800a250:	2b00      	cmp	r3, #0
 800a252:	d103      	bne.n	800a25c <xQueueGenericSend+0x40>
 800a254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d101      	bne.n	800a260 <xQueueGenericSend+0x44>
 800a25c:	2301      	movs	r3, #1
 800a25e:	e000      	b.n	800a262 <xQueueGenericSend+0x46>
 800a260:	2300      	movs	r3, #0
 800a262:	2b00      	cmp	r3, #0
 800a264:	d10a      	bne.n	800a27c <xQueueGenericSend+0x60>
	__asm volatile
 800a266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a26a:	f383 8811 	msr	BASEPRI, r3
 800a26e:	f3bf 8f6f 	isb	sy
 800a272:	f3bf 8f4f 	dsb	sy
 800a276:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a278:	bf00      	nop
 800a27a:	e7fe      	b.n	800a27a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a27c:	683b      	ldr	r3, [r7, #0]
 800a27e:	2b02      	cmp	r3, #2
 800a280:	d103      	bne.n	800a28a <xQueueGenericSend+0x6e>
 800a282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a284:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a286:	2b01      	cmp	r3, #1
 800a288:	d101      	bne.n	800a28e <xQueueGenericSend+0x72>
 800a28a:	2301      	movs	r3, #1
 800a28c:	e000      	b.n	800a290 <xQueueGenericSend+0x74>
 800a28e:	2300      	movs	r3, #0
 800a290:	2b00      	cmp	r3, #0
 800a292:	d10a      	bne.n	800a2aa <xQueueGenericSend+0x8e>
	__asm volatile
 800a294:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a298:	f383 8811 	msr	BASEPRI, r3
 800a29c:	f3bf 8f6f 	isb	sy
 800a2a0:	f3bf 8f4f 	dsb	sy
 800a2a4:	623b      	str	r3, [r7, #32]
}
 800a2a6:	bf00      	nop
 800a2a8:	e7fe      	b.n	800a2a8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a2aa:	f001 fcc5 	bl	800bc38 <xTaskGetSchedulerState>
 800a2ae:	4603      	mov	r3, r0
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d102      	bne.n	800a2ba <xQueueGenericSend+0x9e>
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d101      	bne.n	800a2be <xQueueGenericSend+0xa2>
 800a2ba:	2301      	movs	r3, #1
 800a2bc:	e000      	b.n	800a2c0 <xQueueGenericSend+0xa4>
 800a2be:	2300      	movs	r3, #0
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d10a      	bne.n	800a2da <xQueueGenericSend+0xbe>
	__asm volatile
 800a2c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2c8:	f383 8811 	msr	BASEPRI, r3
 800a2cc:	f3bf 8f6f 	isb	sy
 800a2d0:	f3bf 8f4f 	dsb	sy
 800a2d4:	61fb      	str	r3, [r7, #28]
}
 800a2d6:	bf00      	nop
 800a2d8:	e7fe      	b.n	800a2d8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a2da:	f002 fb63 	bl	800c9a4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a2de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a2e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2e6:	429a      	cmp	r2, r3
 800a2e8:	d302      	bcc.n	800a2f0 <xQueueGenericSend+0xd4>
 800a2ea:	683b      	ldr	r3, [r7, #0]
 800a2ec:	2b02      	cmp	r3, #2
 800a2ee:	d129      	bne.n	800a344 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a2f0:	683a      	ldr	r2, [r7, #0]
 800a2f2:	68b9      	ldr	r1, [r7, #8]
 800a2f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a2f6:	f000 fc59 	bl	800abac <prvCopyDataToQueue>
 800a2fa:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a2fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a300:	2b00      	cmp	r3, #0
 800a302:	d010      	beq.n	800a326 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a306:	3324      	adds	r3, #36	; 0x24
 800a308:	4618      	mov	r0, r3
 800a30a:	f001 fa97 	bl	800b83c <xTaskRemoveFromEventList>
 800a30e:	4603      	mov	r3, r0
 800a310:	2b00      	cmp	r3, #0
 800a312:	d013      	beq.n	800a33c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a314:	4b3f      	ldr	r3, [pc, #252]	; (800a414 <xQueueGenericSend+0x1f8>)
 800a316:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a31a:	601a      	str	r2, [r3, #0]
 800a31c:	f3bf 8f4f 	dsb	sy
 800a320:	f3bf 8f6f 	isb	sy
 800a324:	e00a      	b.n	800a33c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d007      	beq.n	800a33c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a32c:	4b39      	ldr	r3, [pc, #228]	; (800a414 <xQueueGenericSend+0x1f8>)
 800a32e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a332:	601a      	str	r2, [r3, #0]
 800a334:	f3bf 8f4f 	dsb	sy
 800a338:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a33c:	f002 fb62 	bl	800ca04 <vPortExitCritical>
				return pdPASS;
 800a340:	2301      	movs	r3, #1
 800a342:	e063      	b.n	800a40c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	2b00      	cmp	r3, #0
 800a348:	d103      	bne.n	800a352 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a34a:	f002 fb5b 	bl	800ca04 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a34e:	2300      	movs	r3, #0
 800a350:	e05c      	b.n	800a40c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a352:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a354:	2b00      	cmp	r3, #0
 800a356:	d106      	bne.n	800a366 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a358:	f107 0314 	add.w	r3, r7, #20
 800a35c:	4618      	mov	r0, r3
 800a35e:	f001 fb31 	bl	800b9c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a362:	2301      	movs	r3, #1
 800a364:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a366:	f002 fb4d 	bl	800ca04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a36a:	f000 fffb 	bl	800b364 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a36e:	f002 fb19 	bl	800c9a4 <vPortEnterCritical>
 800a372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a374:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a378:	b25b      	sxtb	r3, r3
 800a37a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a37e:	d103      	bne.n	800a388 <xQueueGenericSend+0x16c>
 800a380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a382:	2200      	movs	r2, #0
 800a384:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a38a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a38e:	b25b      	sxtb	r3, r3
 800a390:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a394:	d103      	bne.n	800a39e <xQueueGenericSend+0x182>
 800a396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a398:	2200      	movs	r2, #0
 800a39a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a39e:	f002 fb31 	bl	800ca04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a3a2:	1d3a      	adds	r2, r7, #4
 800a3a4:	f107 0314 	add.w	r3, r7, #20
 800a3a8:	4611      	mov	r1, r2
 800a3aa:	4618      	mov	r0, r3
 800a3ac:	f001 fb20 	bl	800b9f0 <xTaskCheckForTimeOut>
 800a3b0:	4603      	mov	r3, r0
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d124      	bne.n	800a400 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a3b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a3b8:	f000 fcf0 	bl	800ad9c <prvIsQueueFull>
 800a3bc:	4603      	mov	r3, r0
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d018      	beq.n	800a3f4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a3c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3c4:	3310      	adds	r3, #16
 800a3c6:	687a      	ldr	r2, [r7, #4]
 800a3c8:	4611      	mov	r1, r2
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	f001 f9aa 	bl	800b724 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a3d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a3d2:	f000 fc7b 	bl	800accc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a3d6:	f000 ffd3 	bl	800b380 <xTaskResumeAll>
 800a3da:	4603      	mov	r3, r0
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	f47f af7c 	bne.w	800a2da <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a3e2:	4b0c      	ldr	r3, [pc, #48]	; (800a414 <xQueueGenericSend+0x1f8>)
 800a3e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a3e8:	601a      	str	r2, [r3, #0]
 800a3ea:	f3bf 8f4f 	dsb	sy
 800a3ee:	f3bf 8f6f 	isb	sy
 800a3f2:	e772      	b.n	800a2da <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a3f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a3f6:	f000 fc69 	bl	800accc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a3fa:	f000 ffc1 	bl	800b380 <xTaskResumeAll>
 800a3fe:	e76c      	b.n	800a2da <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a400:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a402:	f000 fc63 	bl	800accc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a406:	f000 ffbb 	bl	800b380 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a40a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a40c:	4618      	mov	r0, r3
 800a40e:	3738      	adds	r7, #56	; 0x38
 800a410:	46bd      	mov	sp, r7
 800a412:	bd80      	pop	{r7, pc}
 800a414:	e000ed04 	.word	0xe000ed04

0800a418 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a418:	b580      	push	{r7, lr}
 800a41a:	b090      	sub	sp, #64	; 0x40
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	60f8      	str	r0, [r7, #12]
 800a420:	60b9      	str	r1, [r7, #8]
 800a422:	607a      	str	r2, [r7, #4]
 800a424:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800a42a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d10a      	bne.n	800a446 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a430:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a434:	f383 8811 	msr	BASEPRI, r3
 800a438:	f3bf 8f6f 	isb	sy
 800a43c:	f3bf 8f4f 	dsb	sy
 800a440:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a442:	bf00      	nop
 800a444:	e7fe      	b.n	800a444 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a446:	68bb      	ldr	r3, [r7, #8]
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d103      	bne.n	800a454 <xQueueGenericSendFromISR+0x3c>
 800a44c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a44e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a450:	2b00      	cmp	r3, #0
 800a452:	d101      	bne.n	800a458 <xQueueGenericSendFromISR+0x40>
 800a454:	2301      	movs	r3, #1
 800a456:	e000      	b.n	800a45a <xQueueGenericSendFromISR+0x42>
 800a458:	2300      	movs	r3, #0
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d10a      	bne.n	800a474 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a45e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a462:	f383 8811 	msr	BASEPRI, r3
 800a466:	f3bf 8f6f 	isb	sy
 800a46a:	f3bf 8f4f 	dsb	sy
 800a46e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a470:	bf00      	nop
 800a472:	e7fe      	b.n	800a472 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a474:	683b      	ldr	r3, [r7, #0]
 800a476:	2b02      	cmp	r3, #2
 800a478:	d103      	bne.n	800a482 <xQueueGenericSendFromISR+0x6a>
 800a47a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a47c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a47e:	2b01      	cmp	r3, #1
 800a480:	d101      	bne.n	800a486 <xQueueGenericSendFromISR+0x6e>
 800a482:	2301      	movs	r3, #1
 800a484:	e000      	b.n	800a488 <xQueueGenericSendFromISR+0x70>
 800a486:	2300      	movs	r3, #0
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d10a      	bne.n	800a4a2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a48c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a490:	f383 8811 	msr	BASEPRI, r3
 800a494:	f3bf 8f6f 	isb	sy
 800a498:	f3bf 8f4f 	dsb	sy
 800a49c:	623b      	str	r3, [r7, #32]
}
 800a49e:	bf00      	nop
 800a4a0:	e7fe      	b.n	800a4a0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a4a2:	f002 fb61 	bl	800cb68 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a4a6:	f3ef 8211 	mrs	r2, BASEPRI
 800a4aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4ae:	f383 8811 	msr	BASEPRI, r3
 800a4b2:	f3bf 8f6f 	isb	sy
 800a4b6:	f3bf 8f4f 	dsb	sy
 800a4ba:	61fa      	str	r2, [r7, #28]
 800a4bc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a4be:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a4c0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a4c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a4c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4ca:	429a      	cmp	r2, r3
 800a4cc:	d302      	bcc.n	800a4d4 <xQueueGenericSendFromISR+0xbc>
 800a4ce:	683b      	ldr	r3, [r7, #0]
 800a4d0:	2b02      	cmp	r3, #2
 800a4d2:	d12f      	bne.n	800a534 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a4d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a4da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a4de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4e2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a4e4:	683a      	ldr	r2, [r7, #0]
 800a4e6:	68b9      	ldr	r1, [r7, #8]
 800a4e8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a4ea:	f000 fb5f 	bl	800abac <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a4ee:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800a4f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4f6:	d112      	bne.n	800a51e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a4f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d016      	beq.n	800a52e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a502:	3324      	adds	r3, #36	; 0x24
 800a504:	4618      	mov	r0, r3
 800a506:	f001 f999 	bl	800b83c <xTaskRemoveFromEventList>
 800a50a:	4603      	mov	r3, r0
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d00e      	beq.n	800a52e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	2b00      	cmp	r3, #0
 800a514:	d00b      	beq.n	800a52e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	2201      	movs	r2, #1
 800a51a:	601a      	str	r2, [r3, #0]
 800a51c:	e007      	b.n	800a52e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a51e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a522:	3301      	adds	r3, #1
 800a524:	b2db      	uxtb	r3, r3
 800a526:	b25a      	sxtb	r2, r3
 800a528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a52a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a52e:	2301      	movs	r3, #1
 800a530:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800a532:	e001      	b.n	800a538 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a534:	2300      	movs	r3, #0
 800a536:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a538:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a53a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a53c:	697b      	ldr	r3, [r7, #20]
 800a53e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a542:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a544:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a546:	4618      	mov	r0, r3
 800a548:	3740      	adds	r7, #64	; 0x40
 800a54a:	46bd      	mov	sp, r7
 800a54c:	bd80      	pop	{r7, pc}

0800a54e <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a54e:	b580      	push	{r7, lr}
 800a550:	b08e      	sub	sp, #56	; 0x38
 800a552:	af00      	add	r7, sp, #0
 800a554:	6078      	str	r0, [r7, #4]
 800a556:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800a55c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d10a      	bne.n	800a578 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800a562:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a566:	f383 8811 	msr	BASEPRI, r3
 800a56a:	f3bf 8f6f 	isb	sy
 800a56e:	f3bf 8f4f 	dsb	sy
 800a572:	623b      	str	r3, [r7, #32]
}
 800a574:	bf00      	nop
 800a576:	e7fe      	b.n	800a576 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a57a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d00a      	beq.n	800a596 <xQueueGiveFromISR+0x48>
	__asm volatile
 800a580:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a584:	f383 8811 	msr	BASEPRI, r3
 800a588:	f3bf 8f6f 	isb	sy
 800a58c:	f3bf 8f4f 	dsb	sy
 800a590:	61fb      	str	r3, [r7, #28]
}
 800a592:	bf00      	nop
 800a594:	e7fe      	b.n	800a594 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800a596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d103      	bne.n	800a5a6 <xQueueGiveFromISR+0x58>
 800a59e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5a0:	689b      	ldr	r3, [r3, #8]
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d101      	bne.n	800a5aa <xQueueGiveFromISR+0x5c>
 800a5a6:	2301      	movs	r3, #1
 800a5a8:	e000      	b.n	800a5ac <xQueueGiveFromISR+0x5e>
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d10a      	bne.n	800a5c6 <xQueueGiveFromISR+0x78>
	__asm volatile
 800a5b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5b4:	f383 8811 	msr	BASEPRI, r3
 800a5b8:	f3bf 8f6f 	isb	sy
 800a5bc:	f3bf 8f4f 	dsb	sy
 800a5c0:	61bb      	str	r3, [r7, #24]
}
 800a5c2:	bf00      	nop
 800a5c4:	e7fe      	b.n	800a5c4 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a5c6:	f002 facf 	bl	800cb68 <vPortValidateInterruptPriority>
	__asm volatile
 800a5ca:	f3ef 8211 	mrs	r2, BASEPRI
 800a5ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5d2:	f383 8811 	msr	BASEPRI, r3
 800a5d6:	f3bf 8f6f 	isb	sy
 800a5da:	f3bf 8f4f 	dsb	sy
 800a5de:	617a      	str	r2, [r7, #20]
 800a5e0:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800a5e2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a5e4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a5e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5ea:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800a5ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a5f2:	429a      	cmp	r2, r3
 800a5f4:	d22b      	bcs.n	800a64e <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a5f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a5fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a602:	1c5a      	adds	r2, r3, #1
 800a604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a606:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a608:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a60c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a610:	d112      	bne.n	800a638 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a616:	2b00      	cmp	r3, #0
 800a618:	d016      	beq.n	800a648 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a61a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a61c:	3324      	adds	r3, #36	; 0x24
 800a61e:	4618      	mov	r0, r3
 800a620:	f001 f90c 	bl	800b83c <xTaskRemoveFromEventList>
 800a624:	4603      	mov	r3, r0
 800a626:	2b00      	cmp	r3, #0
 800a628:	d00e      	beq.n	800a648 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a62a:	683b      	ldr	r3, [r7, #0]
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d00b      	beq.n	800a648 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a630:	683b      	ldr	r3, [r7, #0]
 800a632:	2201      	movs	r2, #1
 800a634:	601a      	str	r2, [r3, #0]
 800a636:	e007      	b.n	800a648 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a638:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a63c:	3301      	adds	r3, #1
 800a63e:	b2db      	uxtb	r3, r3
 800a640:	b25a      	sxtb	r2, r3
 800a642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a644:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a648:	2301      	movs	r3, #1
 800a64a:	637b      	str	r3, [r7, #52]	; 0x34
 800a64c:	e001      	b.n	800a652 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a64e:	2300      	movs	r3, #0
 800a650:	637b      	str	r3, [r7, #52]	; 0x34
 800a652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a654:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	f383 8811 	msr	BASEPRI, r3
}
 800a65c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a65e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a660:	4618      	mov	r0, r3
 800a662:	3738      	adds	r7, #56	; 0x38
 800a664:	46bd      	mov	sp, r7
 800a666:	bd80      	pop	{r7, pc}

0800a668 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a668:	b580      	push	{r7, lr}
 800a66a:	b08c      	sub	sp, #48	; 0x30
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	60f8      	str	r0, [r7, #12]
 800a670:	60b9      	str	r1, [r7, #8]
 800a672:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a674:	2300      	movs	r3, #0
 800a676:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a67c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d10a      	bne.n	800a698 <xQueueReceive+0x30>
	__asm volatile
 800a682:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a686:	f383 8811 	msr	BASEPRI, r3
 800a68a:	f3bf 8f6f 	isb	sy
 800a68e:	f3bf 8f4f 	dsb	sy
 800a692:	623b      	str	r3, [r7, #32]
}
 800a694:	bf00      	nop
 800a696:	e7fe      	b.n	800a696 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a698:	68bb      	ldr	r3, [r7, #8]
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d103      	bne.n	800a6a6 <xQueueReceive+0x3e>
 800a69e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d101      	bne.n	800a6aa <xQueueReceive+0x42>
 800a6a6:	2301      	movs	r3, #1
 800a6a8:	e000      	b.n	800a6ac <xQueueReceive+0x44>
 800a6aa:	2300      	movs	r3, #0
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d10a      	bne.n	800a6c6 <xQueueReceive+0x5e>
	__asm volatile
 800a6b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6b4:	f383 8811 	msr	BASEPRI, r3
 800a6b8:	f3bf 8f6f 	isb	sy
 800a6bc:	f3bf 8f4f 	dsb	sy
 800a6c0:	61fb      	str	r3, [r7, #28]
}
 800a6c2:	bf00      	nop
 800a6c4:	e7fe      	b.n	800a6c4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a6c6:	f001 fab7 	bl	800bc38 <xTaskGetSchedulerState>
 800a6ca:	4603      	mov	r3, r0
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d102      	bne.n	800a6d6 <xQueueReceive+0x6e>
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d101      	bne.n	800a6da <xQueueReceive+0x72>
 800a6d6:	2301      	movs	r3, #1
 800a6d8:	e000      	b.n	800a6dc <xQueueReceive+0x74>
 800a6da:	2300      	movs	r3, #0
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d10a      	bne.n	800a6f6 <xQueueReceive+0x8e>
	__asm volatile
 800a6e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6e4:	f383 8811 	msr	BASEPRI, r3
 800a6e8:	f3bf 8f6f 	isb	sy
 800a6ec:	f3bf 8f4f 	dsb	sy
 800a6f0:	61bb      	str	r3, [r7, #24]
}
 800a6f2:	bf00      	nop
 800a6f4:	e7fe      	b.n	800a6f4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a6f6:	f002 f955 	bl	800c9a4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a6fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6fe:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a702:	2b00      	cmp	r3, #0
 800a704:	d01f      	beq.n	800a746 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a706:	68b9      	ldr	r1, [r7, #8]
 800a708:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a70a:	f000 fab9 	bl	800ac80 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a70e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a710:	1e5a      	subs	r2, r3, #1
 800a712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a714:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a718:	691b      	ldr	r3, [r3, #16]
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d00f      	beq.n	800a73e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a71e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a720:	3310      	adds	r3, #16
 800a722:	4618      	mov	r0, r3
 800a724:	f001 f88a 	bl	800b83c <xTaskRemoveFromEventList>
 800a728:	4603      	mov	r3, r0
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d007      	beq.n	800a73e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a72e:	4b3d      	ldr	r3, [pc, #244]	; (800a824 <xQueueReceive+0x1bc>)
 800a730:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a734:	601a      	str	r2, [r3, #0]
 800a736:	f3bf 8f4f 	dsb	sy
 800a73a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a73e:	f002 f961 	bl	800ca04 <vPortExitCritical>
				return pdPASS;
 800a742:	2301      	movs	r3, #1
 800a744:	e069      	b.n	800a81a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d103      	bne.n	800a754 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a74c:	f002 f95a 	bl	800ca04 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a750:	2300      	movs	r3, #0
 800a752:	e062      	b.n	800a81a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a756:	2b00      	cmp	r3, #0
 800a758:	d106      	bne.n	800a768 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a75a:	f107 0310 	add.w	r3, r7, #16
 800a75e:	4618      	mov	r0, r3
 800a760:	f001 f930 	bl	800b9c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a764:	2301      	movs	r3, #1
 800a766:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a768:	f002 f94c 	bl	800ca04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a76c:	f000 fdfa 	bl	800b364 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a770:	f002 f918 	bl	800c9a4 <vPortEnterCritical>
 800a774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a776:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a77a:	b25b      	sxtb	r3, r3
 800a77c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a780:	d103      	bne.n	800a78a <xQueueReceive+0x122>
 800a782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a784:	2200      	movs	r2, #0
 800a786:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a78a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a78c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a790:	b25b      	sxtb	r3, r3
 800a792:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a796:	d103      	bne.n	800a7a0 <xQueueReceive+0x138>
 800a798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a79a:	2200      	movs	r2, #0
 800a79c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a7a0:	f002 f930 	bl	800ca04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a7a4:	1d3a      	adds	r2, r7, #4
 800a7a6:	f107 0310 	add.w	r3, r7, #16
 800a7aa:	4611      	mov	r1, r2
 800a7ac:	4618      	mov	r0, r3
 800a7ae:	f001 f91f 	bl	800b9f0 <xTaskCheckForTimeOut>
 800a7b2:	4603      	mov	r3, r0
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d123      	bne.n	800a800 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a7b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a7ba:	f000 fad9 	bl	800ad70 <prvIsQueueEmpty>
 800a7be:	4603      	mov	r3, r0
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d017      	beq.n	800a7f4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a7c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7c6:	3324      	adds	r3, #36	; 0x24
 800a7c8:	687a      	ldr	r2, [r7, #4]
 800a7ca:	4611      	mov	r1, r2
 800a7cc:	4618      	mov	r0, r3
 800a7ce:	f000 ffa9 	bl	800b724 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a7d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a7d4:	f000 fa7a 	bl	800accc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a7d8:	f000 fdd2 	bl	800b380 <xTaskResumeAll>
 800a7dc:	4603      	mov	r3, r0
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d189      	bne.n	800a6f6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a7e2:	4b10      	ldr	r3, [pc, #64]	; (800a824 <xQueueReceive+0x1bc>)
 800a7e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a7e8:	601a      	str	r2, [r3, #0]
 800a7ea:	f3bf 8f4f 	dsb	sy
 800a7ee:	f3bf 8f6f 	isb	sy
 800a7f2:	e780      	b.n	800a6f6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a7f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a7f6:	f000 fa69 	bl	800accc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a7fa:	f000 fdc1 	bl	800b380 <xTaskResumeAll>
 800a7fe:	e77a      	b.n	800a6f6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a800:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a802:	f000 fa63 	bl	800accc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a806:	f000 fdbb 	bl	800b380 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a80a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a80c:	f000 fab0 	bl	800ad70 <prvIsQueueEmpty>
 800a810:	4603      	mov	r3, r0
 800a812:	2b00      	cmp	r3, #0
 800a814:	f43f af6f 	beq.w	800a6f6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a818:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a81a:	4618      	mov	r0, r3
 800a81c:	3730      	adds	r7, #48	; 0x30
 800a81e:	46bd      	mov	sp, r7
 800a820:	bd80      	pop	{r7, pc}
 800a822:	bf00      	nop
 800a824:	e000ed04 	.word	0xe000ed04

0800a828 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800a828:	b580      	push	{r7, lr}
 800a82a:	b08e      	sub	sp, #56	; 0x38
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	6078      	str	r0, [r7, #4]
 800a830:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a832:	2300      	movs	r3, #0
 800a834:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a83a:	2300      	movs	r3, #0
 800a83c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a83e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a840:	2b00      	cmp	r3, #0
 800a842:	d10a      	bne.n	800a85a <xQueueSemaphoreTake+0x32>
	__asm volatile
 800a844:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a848:	f383 8811 	msr	BASEPRI, r3
 800a84c:	f3bf 8f6f 	isb	sy
 800a850:	f3bf 8f4f 	dsb	sy
 800a854:	623b      	str	r3, [r7, #32]
}
 800a856:	bf00      	nop
 800a858:	e7fe      	b.n	800a858 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a85a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a85c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d00a      	beq.n	800a878 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800a862:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a866:	f383 8811 	msr	BASEPRI, r3
 800a86a:	f3bf 8f6f 	isb	sy
 800a86e:	f3bf 8f4f 	dsb	sy
 800a872:	61fb      	str	r3, [r7, #28]
}
 800a874:	bf00      	nop
 800a876:	e7fe      	b.n	800a876 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a878:	f001 f9de 	bl	800bc38 <xTaskGetSchedulerState>
 800a87c:	4603      	mov	r3, r0
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d102      	bne.n	800a888 <xQueueSemaphoreTake+0x60>
 800a882:	683b      	ldr	r3, [r7, #0]
 800a884:	2b00      	cmp	r3, #0
 800a886:	d101      	bne.n	800a88c <xQueueSemaphoreTake+0x64>
 800a888:	2301      	movs	r3, #1
 800a88a:	e000      	b.n	800a88e <xQueueSemaphoreTake+0x66>
 800a88c:	2300      	movs	r3, #0
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d10a      	bne.n	800a8a8 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800a892:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a896:	f383 8811 	msr	BASEPRI, r3
 800a89a:	f3bf 8f6f 	isb	sy
 800a89e:	f3bf 8f4f 	dsb	sy
 800a8a2:	61bb      	str	r3, [r7, #24]
}
 800a8a4:	bf00      	nop
 800a8a6:	e7fe      	b.n	800a8a6 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a8a8:	f002 f87c 	bl	800c9a4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a8ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8b0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a8b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d024      	beq.n	800a902 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a8b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8ba:	1e5a      	subs	r2, r3, #1
 800a8bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8be:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a8c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d104      	bne.n	800a8d2 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800a8c8:	f001 fb76 	bl	800bfb8 <pvTaskIncrementMutexHeldCount>
 800a8cc:	4602      	mov	r2, r0
 800a8ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8d0:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a8d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8d4:	691b      	ldr	r3, [r3, #16]
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d00f      	beq.n	800a8fa <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a8da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8dc:	3310      	adds	r3, #16
 800a8de:	4618      	mov	r0, r3
 800a8e0:	f000 ffac 	bl	800b83c <xTaskRemoveFromEventList>
 800a8e4:	4603      	mov	r3, r0
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d007      	beq.n	800a8fa <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a8ea:	4b54      	ldr	r3, [pc, #336]	; (800aa3c <xQueueSemaphoreTake+0x214>)
 800a8ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a8f0:	601a      	str	r2, [r3, #0]
 800a8f2:	f3bf 8f4f 	dsb	sy
 800a8f6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a8fa:	f002 f883 	bl	800ca04 <vPortExitCritical>
				return pdPASS;
 800a8fe:	2301      	movs	r3, #1
 800a900:	e097      	b.n	800aa32 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a902:	683b      	ldr	r3, [r7, #0]
 800a904:	2b00      	cmp	r3, #0
 800a906:	d111      	bne.n	800a92c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d00a      	beq.n	800a924 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800a90e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a912:	f383 8811 	msr	BASEPRI, r3
 800a916:	f3bf 8f6f 	isb	sy
 800a91a:	f3bf 8f4f 	dsb	sy
 800a91e:	617b      	str	r3, [r7, #20]
}
 800a920:	bf00      	nop
 800a922:	e7fe      	b.n	800a922 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800a924:	f002 f86e 	bl	800ca04 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a928:	2300      	movs	r3, #0
 800a92a:	e082      	b.n	800aa32 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a92c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d106      	bne.n	800a940 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a932:	f107 030c 	add.w	r3, r7, #12
 800a936:	4618      	mov	r0, r3
 800a938:	f001 f844 	bl	800b9c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a93c:	2301      	movs	r3, #1
 800a93e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a940:	f002 f860 	bl	800ca04 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a944:	f000 fd0e 	bl	800b364 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a948:	f002 f82c 	bl	800c9a4 <vPortEnterCritical>
 800a94c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a94e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a952:	b25b      	sxtb	r3, r3
 800a954:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a958:	d103      	bne.n	800a962 <xQueueSemaphoreTake+0x13a>
 800a95a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a95c:	2200      	movs	r2, #0
 800a95e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a964:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a968:	b25b      	sxtb	r3, r3
 800a96a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a96e:	d103      	bne.n	800a978 <xQueueSemaphoreTake+0x150>
 800a970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a972:	2200      	movs	r2, #0
 800a974:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a978:	f002 f844 	bl	800ca04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a97c:	463a      	mov	r2, r7
 800a97e:	f107 030c 	add.w	r3, r7, #12
 800a982:	4611      	mov	r1, r2
 800a984:	4618      	mov	r0, r3
 800a986:	f001 f833 	bl	800b9f0 <xTaskCheckForTimeOut>
 800a98a:	4603      	mov	r3, r0
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d132      	bne.n	800a9f6 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a990:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a992:	f000 f9ed 	bl	800ad70 <prvIsQueueEmpty>
 800a996:	4603      	mov	r3, r0
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d026      	beq.n	800a9ea <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a99c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d109      	bne.n	800a9b8 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800a9a4:	f001 fffe 	bl	800c9a4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a9a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9aa:	689b      	ldr	r3, [r3, #8]
 800a9ac:	4618      	mov	r0, r3
 800a9ae:	f001 f961 	bl	800bc74 <xTaskPriorityInherit>
 800a9b2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800a9b4:	f002 f826 	bl	800ca04 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a9b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9ba:	3324      	adds	r3, #36	; 0x24
 800a9bc:	683a      	ldr	r2, [r7, #0]
 800a9be:	4611      	mov	r1, r2
 800a9c0:	4618      	mov	r0, r3
 800a9c2:	f000 feaf 	bl	800b724 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a9c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a9c8:	f000 f980 	bl	800accc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a9cc:	f000 fcd8 	bl	800b380 <xTaskResumeAll>
 800a9d0:	4603      	mov	r3, r0
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	f47f af68 	bne.w	800a8a8 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800a9d8:	4b18      	ldr	r3, [pc, #96]	; (800aa3c <xQueueSemaphoreTake+0x214>)
 800a9da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a9de:	601a      	str	r2, [r3, #0]
 800a9e0:	f3bf 8f4f 	dsb	sy
 800a9e4:	f3bf 8f6f 	isb	sy
 800a9e8:	e75e      	b.n	800a8a8 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800a9ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a9ec:	f000 f96e 	bl	800accc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a9f0:	f000 fcc6 	bl	800b380 <xTaskResumeAll>
 800a9f4:	e758      	b.n	800a8a8 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800a9f6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a9f8:	f000 f968 	bl	800accc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a9fc:	f000 fcc0 	bl	800b380 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800aa00:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aa02:	f000 f9b5 	bl	800ad70 <prvIsQueueEmpty>
 800aa06:	4603      	mov	r3, r0
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	f43f af4d 	beq.w	800a8a8 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800aa0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d00d      	beq.n	800aa30 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800aa14:	f001 ffc6 	bl	800c9a4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800aa18:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aa1a:	f000 f8af 	bl	800ab7c <prvGetDisinheritPriorityAfterTimeout>
 800aa1e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800aa20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa22:	689b      	ldr	r3, [r3, #8]
 800aa24:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800aa26:	4618      	mov	r0, r3
 800aa28:	f001 fa20 	bl	800be6c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800aa2c:	f001 ffea 	bl	800ca04 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800aa30:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800aa32:	4618      	mov	r0, r3
 800aa34:	3738      	adds	r7, #56	; 0x38
 800aa36:	46bd      	mov	sp, r7
 800aa38:	bd80      	pop	{r7, pc}
 800aa3a:	bf00      	nop
 800aa3c:	e000ed04 	.word	0xe000ed04

0800aa40 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800aa40:	b580      	push	{r7, lr}
 800aa42:	b08e      	sub	sp, #56	; 0x38
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	60f8      	str	r0, [r7, #12]
 800aa48:	60b9      	str	r1, [r7, #8]
 800aa4a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800aa50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d10a      	bne.n	800aa6c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800aa56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa5a:	f383 8811 	msr	BASEPRI, r3
 800aa5e:	f3bf 8f6f 	isb	sy
 800aa62:	f3bf 8f4f 	dsb	sy
 800aa66:	623b      	str	r3, [r7, #32]
}
 800aa68:	bf00      	nop
 800aa6a:	e7fe      	b.n	800aa6a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aa6c:	68bb      	ldr	r3, [r7, #8]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d103      	bne.n	800aa7a <xQueueReceiveFromISR+0x3a>
 800aa72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d101      	bne.n	800aa7e <xQueueReceiveFromISR+0x3e>
 800aa7a:	2301      	movs	r3, #1
 800aa7c:	e000      	b.n	800aa80 <xQueueReceiveFromISR+0x40>
 800aa7e:	2300      	movs	r3, #0
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d10a      	bne.n	800aa9a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800aa84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa88:	f383 8811 	msr	BASEPRI, r3
 800aa8c:	f3bf 8f6f 	isb	sy
 800aa90:	f3bf 8f4f 	dsb	sy
 800aa94:	61fb      	str	r3, [r7, #28]
}
 800aa96:	bf00      	nop
 800aa98:	e7fe      	b.n	800aa98 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800aa9a:	f002 f865 	bl	800cb68 <vPortValidateInterruptPriority>
	__asm volatile
 800aa9e:	f3ef 8211 	mrs	r2, BASEPRI
 800aaa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaa6:	f383 8811 	msr	BASEPRI, r3
 800aaaa:	f3bf 8f6f 	isb	sy
 800aaae:	f3bf 8f4f 	dsb	sy
 800aab2:	61ba      	str	r2, [r7, #24]
 800aab4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800aab6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800aab8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aaba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aabc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aabe:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800aac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d02f      	beq.n	800ab26 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800aac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aac8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aacc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800aad0:	68b9      	ldr	r1, [r7, #8]
 800aad2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aad4:	f000 f8d4 	bl	800ac80 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800aad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aada:	1e5a      	subs	r2, r3, #1
 800aadc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aade:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800aae0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800aae4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aae8:	d112      	bne.n	800ab10 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aaea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaec:	691b      	ldr	r3, [r3, #16]
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d016      	beq.n	800ab20 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aaf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaf4:	3310      	adds	r3, #16
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	f000 fea0 	bl	800b83c <xTaskRemoveFromEventList>
 800aafc:	4603      	mov	r3, r0
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d00e      	beq.n	800ab20 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d00b      	beq.n	800ab20 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	2201      	movs	r2, #1
 800ab0c:	601a      	str	r2, [r3, #0]
 800ab0e:	e007      	b.n	800ab20 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800ab10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ab14:	3301      	adds	r3, #1
 800ab16:	b2db      	uxtb	r3, r3
 800ab18:	b25a      	sxtb	r2, r3
 800ab1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800ab20:	2301      	movs	r3, #1
 800ab22:	637b      	str	r3, [r7, #52]	; 0x34
 800ab24:	e001      	b.n	800ab2a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800ab26:	2300      	movs	r3, #0
 800ab28:	637b      	str	r3, [r7, #52]	; 0x34
 800ab2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab2c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800ab2e:	693b      	ldr	r3, [r7, #16]
 800ab30:	f383 8811 	msr	BASEPRI, r3
}
 800ab34:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ab36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ab38:	4618      	mov	r0, r3
 800ab3a:	3738      	adds	r7, #56	; 0x38
 800ab3c:	46bd      	mov	sp, r7
 800ab3e:	bd80      	pop	{r7, pc}

0800ab40 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800ab40:	b580      	push	{r7, lr}
 800ab42:	b084      	sub	sp, #16
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d10a      	bne.n	800ab68 <vQueueDelete+0x28>
	__asm volatile
 800ab52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab56:	f383 8811 	msr	BASEPRI, r3
 800ab5a:	f3bf 8f6f 	isb	sy
 800ab5e:	f3bf 8f4f 	dsb	sy
 800ab62:	60bb      	str	r3, [r7, #8]
}
 800ab64:	bf00      	nop
 800ab66:	e7fe      	b.n	800ab66 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800ab68:	68f8      	ldr	r0, [r7, #12]
 800ab6a:	f000 f959 	bl	800ae20 <vQueueUnregisterQueue>

	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
	{
		/* The queue can only have been allocated dynamically - free it
		again. */
		vPortFree( pxQueue );
 800ab6e:	68f8      	ldr	r0, [r7, #12]
 800ab70:	f002 f906 	bl	800cd80 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800ab74:	bf00      	nop
 800ab76:	3710      	adds	r7, #16
 800ab78:	46bd      	mov	sp, r7
 800ab7a:	bd80      	pop	{r7, pc}

0800ab7c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800ab7c:	b480      	push	{r7}
 800ab7e:	b085      	sub	sp, #20
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d006      	beq.n	800ab9a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	f1c3 0307 	rsb	r3, r3, #7
 800ab96:	60fb      	str	r3, [r7, #12]
 800ab98:	e001      	b.n	800ab9e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800ab9a:	2300      	movs	r3, #0
 800ab9c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800ab9e:	68fb      	ldr	r3, [r7, #12]
	}
 800aba0:	4618      	mov	r0, r3
 800aba2:	3714      	adds	r7, #20
 800aba4:	46bd      	mov	sp, r7
 800aba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abaa:	4770      	bx	lr

0800abac <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800abac:	b580      	push	{r7, lr}
 800abae:	b086      	sub	sp, #24
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	60f8      	str	r0, [r7, #12]
 800abb4:	60b9      	str	r1, [r7, #8]
 800abb6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800abb8:	2300      	movs	r3, #0
 800abba:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abc0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d10d      	bne.n	800abe6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d14d      	bne.n	800ac6e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	689b      	ldr	r3, [r3, #8]
 800abd6:	4618      	mov	r0, r3
 800abd8:	f001 f8c2 	bl	800bd60 <xTaskPriorityDisinherit>
 800abdc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	2200      	movs	r2, #0
 800abe2:	609a      	str	r2, [r3, #8]
 800abe4:	e043      	b.n	800ac6e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d119      	bne.n	800ac20 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	6858      	ldr	r0, [r3, #4]
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abf4:	461a      	mov	r2, r3
 800abf6:	68b9      	ldr	r1, [r7, #8]
 800abf8:	f00f fb74 	bl	801a2e4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	685a      	ldr	r2, [r3, #4]
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac04:	441a      	add	r2, r3
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	685a      	ldr	r2, [r3, #4]
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	689b      	ldr	r3, [r3, #8]
 800ac12:	429a      	cmp	r2, r3
 800ac14:	d32b      	bcc.n	800ac6e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	681a      	ldr	r2, [r3, #0]
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	605a      	str	r2, [r3, #4]
 800ac1e:	e026      	b.n	800ac6e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	68d8      	ldr	r0, [r3, #12]
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac28:	461a      	mov	r2, r3
 800ac2a:	68b9      	ldr	r1, [r7, #8]
 800ac2c:	f00f fb5a 	bl	801a2e4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	68da      	ldr	r2, [r3, #12]
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac38:	425b      	negs	r3, r3
 800ac3a:	441a      	add	r2, r3
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	68da      	ldr	r2, [r3, #12]
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	429a      	cmp	r2, r3
 800ac4a:	d207      	bcs.n	800ac5c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	689a      	ldr	r2, [r3, #8]
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac54:	425b      	negs	r3, r3
 800ac56:	441a      	add	r2, r3
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	2b02      	cmp	r3, #2
 800ac60:	d105      	bne.n	800ac6e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ac62:	693b      	ldr	r3, [r7, #16]
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d002      	beq.n	800ac6e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ac68:	693b      	ldr	r3, [r7, #16]
 800ac6a:	3b01      	subs	r3, #1
 800ac6c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ac6e:	693b      	ldr	r3, [r7, #16]
 800ac70:	1c5a      	adds	r2, r3, #1
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800ac76:	697b      	ldr	r3, [r7, #20]
}
 800ac78:	4618      	mov	r0, r3
 800ac7a:	3718      	adds	r7, #24
 800ac7c:	46bd      	mov	sp, r7
 800ac7e:	bd80      	pop	{r7, pc}

0800ac80 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ac80:	b580      	push	{r7, lr}
 800ac82:	b082      	sub	sp, #8
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	6078      	str	r0, [r7, #4]
 800ac88:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d018      	beq.n	800acc4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	68da      	ldr	r2, [r3, #12]
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac9a:	441a      	add	r2, r3
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	68da      	ldr	r2, [r3, #12]
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	689b      	ldr	r3, [r3, #8]
 800aca8:	429a      	cmp	r2, r3
 800acaa:	d303      	bcc.n	800acb4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	681a      	ldr	r2, [r3, #0]
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	68d9      	ldr	r1, [r3, #12]
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acbc:	461a      	mov	r2, r3
 800acbe:	6838      	ldr	r0, [r7, #0]
 800acc0:	f00f fb10 	bl	801a2e4 <memcpy>
	}
}
 800acc4:	bf00      	nop
 800acc6:	3708      	adds	r7, #8
 800acc8:	46bd      	mov	sp, r7
 800acca:	bd80      	pop	{r7, pc}

0800accc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800accc:	b580      	push	{r7, lr}
 800acce:	b084      	sub	sp, #16
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800acd4:	f001 fe66 	bl	800c9a4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800acde:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ace0:	e011      	b.n	800ad06 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d012      	beq.n	800ad10 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	3324      	adds	r3, #36	; 0x24
 800acee:	4618      	mov	r0, r3
 800acf0:	f000 fda4 	bl	800b83c <xTaskRemoveFromEventList>
 800acf4:	4603      	mov	r3, r0
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d001      	beq.n	800acfe <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800acfa:	f000 fedb 	bl	800bab4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800acfe:	7bfb      	ldrb	r3, [r7, #15]
 800ad00:	3b01      	subs	r3, #1
 800ad02:	b2db      	uxtb	r3, r3
 800ad04:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ad06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	dce9      	bgt.n	800ace2 <prvUnlockQueue+0x16>
 800ad0e:	e000      	b.n	800ad12 <prvUnlockQueue+0x46>
					break;
 800ad10:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	22ff      	movs	r2, #255	; 0xff
 800ad16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800ad1a:	f001 fe73 	bl	800ca04 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ad1e:	f001 fe41 	bl	800c9a4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ad28:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ad2a:	e011      	b.n	800ad50 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	691b      	ldr	r3, [r3, #16]
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d012      	beq.n	800ad5a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	3310      	adds	r3, #16
 800ad38:	4618      	mov	r0, r3
 800ad3a:	f000 fd7f 	bl	800b83c <xTaskRemoveFromEventList>
 800ad3e:	4603      	mov	r3, r0
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d001      	beq.n	800ad48 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ad44:	f000 feb6 	bl	800bab4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ad48:	7bbb      	ldrb	r3, [r7, #14]
 800ad4a:	3b01      	subs	r3, #1
 800ad4c:	b2db      	uxtb	r3, r3
 800ad4e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ad50:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	dce9      	bgt.n	800ad2c <prvUnlockQueue+0x60>
 800ad58:	e000      	b.n	800ad5c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ad5a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	22ff      	movs	r2, #255	; 0xff
 800ad60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800ad64:	f001 fe4e 	bl	800ca04 <vPortExitCritical>
}
 800ad68:	bf00      	nop
 800ad6a:	3710      	adds	r7, #16
 800ad6c:	46bd      	mov	sp, r7
 800ad6e:	bd80      	pop	{r7, pc}

0800ad70 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ad70:	b580      	push	{r7, lr}
 800ad72:	b084      	sub	sp, #16
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ad78:	f001 fe14 	bl	800c9a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d102      	bne.n	800ad8a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ad84:	2301      	movs	r3, #1
 800ad86:	60fb      	str	r3, [r7, #12]
 800ad88:	e001      	b.n	800ad8e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ad8a:	2300      	movs	r3, #0
 800ad8c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ad8e:	f001 fe39 	bl	800ca04 <vPortExitCritical>

	return xReturn;
 800ad92:	68fb      	ldr	r3, [r7, #12]
}
 800ad94:	4618      	mov	r0, r3
 800ad96:	3710      	adds	r7, #16
 800ad98:	46bd      	mov	sp, r7
 800ad9a:	bd80      	pop	{r7, pc}

0800ad9c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ad9c:	b580      	push	{r7, lr}
 800ad9e:	b084      	sub	sp, #16
 800ada0:	af00      	add	r7, sp, #0
 800ada2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ada4:	f001 fdfe 	bl	800c9a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800adb0:	429a      	cmp	r2, r3
 800adb2:	d102      	bne.n	800adba <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800adb4:	2301      	movs	r3, #1
 800adb6:	60fb      	str	r3, [r7, #12]
 800adb8:	e001      	b.n	800adbe <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800adba:	2300      	movs	r3, #0
 800adbc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800adbe:	f001 fe21 	bl	800ca04 <vPortExitCritical>

	return xReturn;
 800adc2:	68fb      	ldr	r3, [r7, #12]
}
 800adc4:	4618      	mov	r0, r3
 800adc6:	3710      	adds	r7, #16
 800adc8:	46bd      	mov	sp, r7
 800adca:	bd80      	pop	{r7, pc}

0800adcc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800adcc:	b480      	push	{r7}
 800adce:	b085      	sub	sp, #20
 800add0:	af00      	add	r7, sp, #0
 800add2:	6078      	str	r0, [r7, #4]
 800add4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800add6:	2300      	movs	r3, #0
 800add8:	60fb      	str	r3, [r7, #12]
 800adda:	e014      	b.n	800ae06 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800addc:	4a0f      	ldr	r2, [pc, #60]	; (800ae1c <vQueueAddToRegistry+0x50>)
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d10b      	bne.n	800ae00 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ade8:	490c      	ldr	r1, [pc, #48]	; (800ae1c <vQueueAddToRegistry+0x50>)
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	683a      	ldr	r2, [r7, #0]
 800adee:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800adf2:	4a0a      	ldr	r2, [pc, #40]	; (800ae1c <vQueueAddToRegistry+0x50>)
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	00db      	lsls	r3, r3, #3
 800adf8:	4413      	add	r3, r2
 800adfa:	687a      	ldr	r2, [r7, #4]
 800adfc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800adfe:	e006      	b.n	800ae0e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	3301      	adds	r3, #1
 800ae04:	60fb      	str	r3, [r7, #12]
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	2b07      	cmp	r3, #7
 800ae0a:	d9e7      	bls.n	800addc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ae0c:	bf00      	nop
 800ae0e:	bf00      	nop
 800ae10:	3714      	adds	r7, #20
 800ae12:	46bd      	mov	sp, r7
 800ae14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae18:	4770      	bx	lr
 800ae1a:	bf00      	nop
 800ae1c:	20001484 	.word	0x20001484

0800ae20 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800ae20:	b480      	push	{r7}
 800ae22:	b085      	sub	sp, #20
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ae28:	2300      	movs	r3, #0
 800ae2a:	60fb      	str	r3, [r7, #12]
 800ae2c:	e016      	b.n	800ae5c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800ae2e:	4a10      	ldr	r2, [pc, #64]	; (800ae70 <vQueueUnregisterQueue+0x50>)
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	00db      	lsls	r3, r3, #3
 800ae34:	4413      	add	r3, r2
 800ae36:	685b      	ldr	r3, [r3, #4]
 800ae38:	687a      	ldr	r2, [r7, #4]
 800ae3a:	429a      	cmp	r2, r3
 800ae3c:	d10b      	bne.n	800ae56 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800ae3e:	4a0c      	ldr	r2, [pc, #48]	; (800ae70 <vQueueUnregisterQueue+0x50>)
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	2100      	movs	r1, #0
 800ae44:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800ae48:	4a09      	ldr	r2, [pc, #36]	; (800ae70 <vQueueUnregisterQueue+0x50>)
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	00db      	lsls	r3, r3, #3
 800ae4e:	4413      	add	r3, r2
 800ae50:	2200      	movs	r2, #0
 800ae52:	605a      	str	r2, [r3, #4]
				break;
 800ae54:	e006      	b.n	800ae64 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	3301      	adds	r3, #1
 800ae5a:	60fb      	str	r3, [r7, #12]
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	2b07      	cmp	r3, #7
 800ae60:	d9e5      	bls.n	800ae2e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800ae62:	bf00      	nop
 800ae64:	bf00      	nop
 800ae66:	3714      	adds	r7, #20
 800ae68:	46bd      	mov	sp, r7
 800ae6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6e:	4770      	bx	lr
 800ae70:	20001484 	.word	0x20001484

0800ae74 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ae74:	b580      	push	{r7, lr}
 800ae76:	b086      	sub	sp, #24
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	60f8      	str	r0, [r7, #12]
 800ae7c:	60b9      	str	r1, [r7, #8]
 800ae7e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ae84:	f001 fd8e 	bl	800c9a4 <vPortEnterCritical>
 800ae88:	697b      	ldr	r3, [r7, #20]
 800ae8a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ae8e:	b25b      	sxtb	r3, r3
 800ae90:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae94:	d103      	bne.n	800ae9e <vQueueWaitForMessageRestricted+0x2a>
 800ae96:	697b      	ldr	r3, [r7, #20]
 800ae98:	2200      	movs	r2, #0
 800ae9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ae9e:	697b      	ldr	r3, [r7, #20]
 800aea0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aea4:	b25b      	sxtb	r3, r3
 800aea6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aeaa:	d103      	bne.n	800aeb4 <vQueueWaitForMessageRestricted+0x40>
 800aeac:	697b      	ldr	r3, [r7, #20]
 800aeae:	2200      	movs	r2, #0
 800aeb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aeb4:	f001 fda6 	bl	800ca04 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800aeb8:	697b      	ldr	r3, [r7, #20]
 800aeba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d106      	bne.n	800aece <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800aec0:	697b      	ldr	r3, [r7, #20]
 800aec2:	3324      	adds	r3, #36	; 0x24
 800aec4:	687a      	ldr	r2, [r7, #4]
 800aec6:	68b9      	ldr	r1, [r7, #8]
 800aec8:	4618      	mov	r0, r3
 800aeca:	f000 fc8b 	bl	800b7e4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800aece:	6978      	ldr	r0, [r7, #20]
 800aed0:	f7ff fefc 	bl	800accc <prvUnlockQueue>
	}
 800aed4:	bf00      	nop
 800aed6:	3718      	adds	r7, #24
 800aed8:	46bd      	mov	sp, r7
 800aeda:	bd80      	pop	{r7, pc}

0800aedc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800aedc:	b580      	push	{r7, lr}
 800aede:	b08c      	sub	sp, #48	; 0x30
 800aee0:	af04      	add	r7, sp, #16
 800aee2:	60f8      	str	r0, [r7, #12]
 800aee4:	60b9      	str	r1, [r7, #8]
 800aee6:	603b      	str	r3, [r7, #0]
 800aee8:	4613      	mov	r3, r2
 800aeea:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800aeec:	88fb      	ldrh	r3, [r7, #6]
 800aeee:	009b      	lsls	r3, r3, #2
 800aef0:	4618      	mov	r0, r3
 800aef2:	f001 fe79 	bl	800cbe8 <pvPortMalloc>
 800aef6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800aef8:	697b      	ldr	r3, [r7, #20]
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d00e      	beq.n	800af1c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800aefe:	2054      	movs	r0, #84	; 0x54
 800af00:	f001 fe72 	bl	800cbe8 <pvPortMalloc>
 800af04:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800af06:	69fb      	ldr	r3, [r7, #28]
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d003      	beq.n	800af14 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800af0c:	69fb      	ldr	r3, [r7, #28]
 800af0e:	697a      	ldr	r2, [r7, #20]
 800af10:	631a      	str	r2, [r3, #48]	; 0x30
 800af12:	e005      	b.n	800af20 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800af14:	6978      	ldr	r0, [r7, #20]
 800af16:	f001 ff33 	bl	800cd80 <vPortFree>
 800af1a:	e001      	b.n	800af20 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800af1c:	2300      	movs	r3, #0
 800af1e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800af20:	69fb      	ldr	r3, [r7, #28]
 800af22:	2b00      	cmp	r3, #0
 800af24:	d013      	beq.n	800af4e <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800af26:	88fa      	ldrh	r2, [r7, #6]
 800af28:	2300      	movs	r3, #0
 800af2a:	9303      	str	r3, [sp, #12]
 800af2c:	69fb      	ldr	r3, [r7, #28]
 800af2e:	9302      	str	r3, [sp, #8]
 800af30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af32:	9301      	str	r3, [sp, #4]
 800af34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af36:	9300      	str	r3, [sp, #0]
 800af38:	683b      	ldr	r3, [r7, #0]
 800af3a:	68b9      	ldr	r1, [r7, #8]
 800af3c:	68f8      	ldr	r0, [r7, #12]
 800af3e:	f000 f80e 	bl	800af5e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800af42:	69f8      	ldr	r0, [r7, #28]
 800af44:	f000 f892 	bl	800b06c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800af48:	2301      	movs	r3, #1
 800af4a:	61bb      	str	r3, [r7, #24]
 800af4c:	e002      	b.n	800af54 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800af4e:	f04f 33ff 	mov.w	r3, #4294967295
 800af52:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800af54:	69bb      	ldr	r3, [r7, #24]
	}
 800af56:	4618      	mov	r0, r3
 800af58:	3720      	adds	r7, #32
 800af5a:	46bd      	mov	sp, r7
 800af5c:	bd80      	pop	{r7, pc}

0800af5e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800af5e:	b580      	push	{r7, lr}
 800af60:	b088      	sub	sp, #32
 800af62:	af00      	add	r7, sp, #0
 800af64:	60f8      	str	r0, [r7, #12]
 800af66:	60b9      	str	r1, [r7, #8]
 800af68:	607a      	str	r2, [r7, #4]
 800af6a:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800af6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800af76:	3b01      	subs	r3, #1
 800af78:	009b      	lsls	r3, r3, #2
 800af7a:	4413      	add	r3, r2
 800af7c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800af7e:	69bb      	ldr	r3, [r7, #24]
 800af80:	f023 0307 	bic.w	r3, r3, #7
 800af84:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800af86:	69bb      	ldr	r3, [r7, #24]
 800af88:	f003 0307 	and.w	r3, r3, #7
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d00a      	beq.n	800afa6 <prvInitialiseNewTask+0x48>
	__asm volatile
 800af90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af94:	f383 8811 	msr	BASEPRI, r3
 800af98:	f3bf 8f6f 	isb	sy
 800af9c:	f3bf 8f4f 	dsb	sy
 800afa0:	617b      	str	r3, [r7, #20]
}
 800afa2:	bf00      	nop
 800afa4:	e7fe      	b.n	800afa4 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800afa6:	68bb      	ldr	r3, [r7, #8]
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d01f      	beq.n	800afec <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800afac:	2300      	movs	r3, #0
 800afae:	61fb      	str	r3, [r7, #28]
 800afb0:	e012      	b.n	800afd8 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800afb2:	68ba      	ldr	r2, [r7, #8]
 800afb4:	69fb      	ldr	r3, [r7, #28]
 800afb6:	4413      	add	r3, r2
 800afb8:	7819      	ldrb	r1, [r3, #0]
 800afba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800afbc:	69fb      	ldr	r3, [r7, #28]
 800afbe:	4413      	add	r3, r2
 800afc0:	3334      	adds	r3, #52	; 0x34
 800afc2:	460a      	mov	r2, r1
 800afc4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800afc6:	68ba      	ldr	r2, [r7, #8]
 800afc8:	69fb      	ldr	r3, [r7, #28]
 800afca:	4413      	add	r3, r2
 800afcc:	781b      	ldrb	r3, [r3, #0]
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d006      	beq.n	800afe0 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800afd2:	69fb      	ldr	r3, [r7, #28]
 800afd4:	3301      	adds	r3, #1
 800afd6:	61fb      	str	r3, [r7, #28]
 800afd8:	69fb      	ldr	r3, [r7, #28]
 800afda:	2b0f      	cmp	r3, #15
 800afdc:	d9e9      	bls.n	800afb2 <prvInitialiseNewTask+0x54>
 800afde:	e000      	b.n	800afe2 <prvInitialiseNewTask+0x84>
			{
				break;
 800afe0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800afe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afe4:	2200      	movs	r2, #0
 800afe6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800afea:	e003      	b.n	800aff4 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800afec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afee:	2200      	movs	r2, #0
 800aff0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800aff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aff6:	2b06      	cmp	r3, #6
 800aff8:	d901      	bls.n	800affe <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800affa:	2306      	movs	r3, #6
 800affc:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800affe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b000:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b002:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b006:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b008:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800b00a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b00c:	2200      	movs	r2, #0
 800b00e:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b012:	3304      	adds	r3, #4
 800b014:	4618      	mov	r0, r3
 800b016:	f7fe ff7d 	bl	8009f14 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b01a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b01c:	3318      	adds	r3, #24
 800b01e:	4618      	mov	r0, r3
 800b020:	f7fe ff78 	bl	8009f14 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b026:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b028:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b02a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b02c:	f1c3 0207 	rsb	r2, r3, #7
 800b030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b032:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b036:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b038:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b03a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b03c:	2200      	movs	r2, #0
 800b03e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b042:	2200      	movs	r2, #0
 800b044:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b048:	683a      	ldr	r2, [r7, #0]
 800b04a:	68f9      	ldr	r1, [r7, #12]
 800b04c:	69b8      	ldr	r0, [r7, #24]
 800b04e:	f001 fb7b 	bl	800c748 <pxPortInitialiseStack>
 800b052:	4602      	mov	r2, r0
 800b054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b056:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d002      	beq.n	800b064 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b05e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b060:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b062:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b064:	bf00      	nop
 800b066:	3720      	adds	r7, #32
 800b068:	46bd      	mov	sp, r7
 800b06a:	bd80      	pop	{r7, pc}

0800b06c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b06c:	b580      	push	{r7, lr}
 800b06e:	b082      	sub	sp, #8
 800b070:	af00      	add	r7, sp, #0
 800b072:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b074:	f001 fc96 	bl	800c9a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b078:	4b2a      	ldr	r3, [pc, #168]	; (800b124 <prvAddNewTaskToReadyList+0xb8>)
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	3301      	adds	r3, #1
 800b07e:	4a29      	ldr	r2, [pc, #164]	; (800b124 <prvAddNewTaskToReadyList+0xb8>)
 800b080:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b082:	4b29      	ldr	r3, [pc, #164]	; (800b128 <prvAddNewTaskToReadyList+0xbc>)
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	2b00      	cmp	r3, #0
 800b088:	d109      	bne.n	800b09e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b08a:	4a27      	ldr	r2, [pc, #156]	; (800b128 <prvAddNewTaskToReadyList+0xbc>)
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b090:	4b24      	ldr	r3, [pc, #144]	; (800b124 <prvAddNewTaskToReadyList+0xb8>)
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	2b01      	cmp	r3, #1
 800b096:	d110      	bne.n	800b0ba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b098:	f000 fd30 	bl	800bafc <prvInitialiseTaskLists>
 800b09c:	e00d      	b.n	800b0ba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b09e:	4b23      	ldr	r3, [pc, #140]	; (800b12c <prvAddNewTaskToReadyList+0xc0>)
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d109      	bne.n	800b0ba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b0a6:	4b20      	ldr	r3, [pc, #128]	; (800b128 <prvAddNewTaskToReadyList+0xbc>)
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0b0:	429a      	cmp	r2, r3
 800b0b2:	d802      	bhi.n	800b0ba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b0b4:	4a1c      	ldr	r2, [pc, #112]	; (800b128 <prvAddNewTaskToReadyList+0xbc>)
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b0ba:	4b1d      	ldr	r3, [pc, #116]	; (800b130 <prvAddNewTaskToReadyList+0xc4>)
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	3301      	adds	r3, #1
 800b0c0:	4a1b      	ldr	r2, [pc, #108]	; (800b130 <prvAddNewTaskToReadyList+0xc4>)
 800b0c2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0c8:	2201      	movs	r2, #1
 800b0ca:	409a      	lsls	r2, r3
 800b0cc:	4b19      	ldr	r3, [pc, #100]	; (800b134 <prvAddNewTaskToReadyList+0xc8>)
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	4313      	orrs	r3, r2
 800b0d2:	4a18      	ldr	r2, [pc, #96]	; (800b134 <prvAddNewTaskToReadyList+0xc8>)
 800b0d4:	6013      	str	r3, [r2, #0]
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0da:	4613      	mov	r3, r2
 800b0dc:	009b      	lsls	r3, r3, #2
 800b0de:	4413      	add	r3, r2
 800b0e0:	009b      	lsls	r3, r3, #2
 800b0e2:	4a15      	ldr	r2, [pc, #84]	; (800b138 <prvAddNewTaskToReadyList+0xcc>)
 800b0e4:	441a      	add	r2, r3
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	3304      	adds	r3, #4
 800b0ea:	4619      	mov	r1, r3
 800b0ec:	4610      	mov	r0, r2
 800b0ee:	f7fe ff1e 	bl	8009f2e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b0f2:	f001 fc87 	bl	800ca04 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b0f6:	4b0d      	ldr	r3, [pc, #52]	; (800b12c <prvAddNewTaskToReadyList+0xc0>)
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d00e      	beq.n	800b11c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b0fe:	4b0a      	ldr	r3, [pc, #40]	; (800b128 <prvAddNewTaskToReadyList+0xbc>)
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b108:	429a      	cmp	r2, r3
 800b10a:	d207      	bcs.n	800b11c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b10c:	4b0b      	ldr	r3, [pc, #44]	; (800b13c <prvAddNewTaskToReadyList+0xd0>)
 800b10e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b112:	601a      	str	r2, [r3, #0]
 800b114:	f3bf 8f4f 	dsb	sy
 800b118:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b11c:	bf00      	nop
 800b11e:	3708      	adds	r7, #8
 800b120:	46bd      	mov	sp, r7
 800b122:	bd80      	pop	{r7, pc}
 800b124:	200015c4 	.word	0x200015c4
 800b128:	200014c4 	.word	0x200014c4
 800b12c:	200015d0 	.word	0x200015d0
 800b130:	200015e0 	.word	0x200015e0
 800b134:	200015cc 	.word	0x200015cc
 800b138:	200014c8 	.word	0x200014c8
 800b13c:	e000ed04 	.word	0xe000ed04

0800b140 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800b140:	b580      	push	{r7, lr}
 800b142:	b084      	sub	sp, #16
 800b144:	af00      	add	r7, sp, #0
 800b146:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800b148:	f001 fc2c 	bl	800c9a4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d102      	bne.n	800b158 <vTaskDelete+0x18>
 800b152:	4b39      	ldr	r3, [pc, #228]	; (800b238 <vTaskDelete+0xf8>)
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	e000      	b.n	800b15a <vTaskDelete+0x1a>
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	3304      	adds	r3, #4
 800b160:	4618      	mov	r0, r3
 800b162:	f7fe ff41 	bl	8009fe8 <uxListRemove>
 800b166:	4603      	mov	r3, r0
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d115      	bne.n	800b198 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b170:	4932      	ldr	r1, [pc, #200]	; (800b23c <vTaskDelete+0xfc>)
 800b172:	4613      	mov	r3, r2
 800b174:	009b      	lsls	r3, r3, #2
 800b176:	4413      	add	r3, r2
 800b178:	009b      	lsls	r3, r3, #2
 800b17a:	440b      	add	r3, r1
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d10a      	bne.n	800b198 <vTaskDelete+0x58>
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b186:	2201      	movs	r2, #1
 800b188:	fa02 f303 	lsl.w	r3, r2, r3
 800b18c:	43da      	mvns	r2, r3
 800b18e:	4b2c      	ldr	r3, [pc, #176]	; (800b240 <vTaskDelete+0x100>)
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	4013      	ands	r3, r2
 800b194:	4a2a      	ldr	r2, [pc, #168]	; (800b240 <vTaskDelete+0x100>)
 800b196:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d004      	beq.n	800b1aa <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	3318      	adds	r3, #24
 800b1a4:	4618      	mov	r0, r3
 800b1a6:	f7fe ff1f 	bl	8009fe8 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800b1aa:	4b26      	ldr	r3, [pc, #152]	; (800b244 <vTaskDelete+0x104>)
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	3301      	adds	r3, #1
 800b1b0:	4a24      	ldr	r2, [pc, #144]	; (800b244 <vTaskDelete+0x104>)
 800b1b2:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800b1b4:	4b20      	ldr	r3, [pc, #128]	; (800b238 <vTaskDelete+0xf8>)
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	68fa      	ldr	r2, [r7, #12]
 800b1ba:	429a      	cmp	r2, r3
 800b1bc:	d10b      	bne.n	800b1d6 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	3304      	adds	r3, #4
 800b1c2:	4619      	mov	r1, r3
 800b1c4:	4820      	ldr	r0, [pc, #128]	; (800b248 <vTaskDelete+0x108>)
 800b1c6:	f7fe feb2 	bl	8009f2e <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800b1ca:	4b20      	ldr	r3, [pc, #128]	; (800b24c <vTaskDelete+0x10c>)
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	3301      	adds	r3, #1
 800b1d0:	4a1e      	ldr	r2, [pc, #120]	; (800b24c <vTaskDelete+0x10c>)
 800b1d2:	6013      	str	r3, [r2, #0]
 800b1d4:	e009      	b.n	800b1ea <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800b1d6:	4b1e      	ldr	r3, [pc, #120]	; (800b250 <vTaskDelete+0x110>)
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	3b01      	subs	r3, #1
 800b1dc:	4a1c      	ldr	r2, [pc, #112]	; (800b250 <vTaskDelete+0x110>)
 800b1de:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 800b1e0:	68f8      	ldr	r0, [r7, #12]
 800b1e2:	f000 fcf9 	bl	800bbd8 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800b1e6:	f000 fd07 	bl	800bbf8 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 800b1ea:	f001 fc0b 	bl	800ca04 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800b1ee:	4b19      	ldr	r3, [pc, #100]	; (800b254 <vTaskDelete+0x114>)
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d01b      	beq.n	800b22e <vTaskDelete+0xee>
		{
			if( pxTCB == pxCurrentTCB )
 800b1f6:	4b10      	ldr	r3, [pc, #64]	; (800b238 <vTaskDelete+0xf8>)
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	68fa      	ldr	r2, [r7, #12]
 800b1fc:	429a      	cmp	r2, r3
 800b1fe:	d116      	bne.n	800b22e <vTaskDelete+0xee>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800b200:	4b15      	ldr	r3, [pc, #84]	; (800b258 <vTaskDelete+0x118>)
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	2b00      	cmp	r3, #0
 800b206:	d00a      	beq.n	800b21e <vTaskDelete+0xde>
	__asm volatile
 800b208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b20c:	f383 8811 	msr	BASEPRI, r3
 800b210:	f3bf 8f6f 	isb	sy
 800b214:	f3bf 8f4f 	dsb	sy
 800b218:	60bb      	str	r3, [r7, #8]
}
 800b21a:	bf00      	nop
 800b21c:	e7fe      	b.n	800b21c <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 800b21e:	4b0f      	ldr	r3, [pc, #60]	; (800b25c <vTaskDelete+0x11c>)
 800b220:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b224:	601a      	str	r2, [r3, #0]
 800b226:	f3bf 8f4f 	dsb	sy
 800b22a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b22e:	bf00      	nop
 800b230:	3710      	adds	r7, #16
 800b232:	46bd      	mov	sp, r7
 800b234:	bd80      	pop	{r7, pc}
 800b236:	bf00      	nop
 800b238:	200014c4 	.word	0x200014c4
 800b23c:	200014c8 	.word	0x200014c8
 800b240:	200015cc 	.word	0x200015cc
 800b244:	200015e0 	.word	0x200015e0
 800b248:	20001598 	.word	0x20001598
 800b24c:	200015ac 	.word	0x200015ac
 800b250:	200015c4 	.word	0x200015c4
 800b254:	200015d0 	.word	0x200015d0
 800b258:	200015ec 	.word	0x200015ec
 800b25c:	e000ed04 	.word	0xe000ed04

0800b260 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b260:	b580      	push	{r7, lr}
 800b262:	b084      	sub	sp, #16
 800b264:	af00      	add	r7, sp, #0
 800b266:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b268:	2300      	movs	r3, #0
 800b26a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d017      	beq.n	800b2a2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b272:	4b13      	ldr	r3, [pc, #76]	; (800b2c0 <vTaskDelay+0x60>)
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	2b00      	cmp	r3, #0
 800b278:	d00a      	beq.n	800b290 <vTaskDelay+0x30>
	__asm volatile
 800b27a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b27e:	f383 8811 	msr	BASEPRI, r3
 800b282:	f3bf 8f6f 	isb	sy
 800b286:	f3bf 8f4f 	dsb	sy
 800b28a:	60bb      	str	r3, [r7, #8]
}
 800b28c:	bf00      	nop
 800b28e:	e7fe      	b.n	800b28e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b290:	f000 f868 	bl	800b364 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b294:	2100      	movs	r1, #0
 800b296:	6878      	ldr	r0, [r7, #4]
 800b298:	f000 fea2 	bl	800bfe0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b29c:	f000 f870 	bl	800b380 <xTaskResumeAll>
 800b2a0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d107      	bne.n	800b2b8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b2a8:	4b06      	ldr	r3, [pc, #24]	; (800b2c4 <vTaskDelay+0x64>)
 800b2aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b2ae:	601a      	str	r2, [r3, #0]
 800b2b0:	f3bf 8f4f 	dsb	sy
 800b2b4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b2b8:	bf00      	nop
 800b2ba:	3710      	adds	r7, #16
 800b2bc:	46bd      	mov	sp, r7
 800b2be:	bd80      	pop	{r7, pc}
 800b2c0:	200015ec 	.word	0x200015ec
 800b2c4:	e000ed04 	.word	0xe000ed04

0800b2c8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b2c8:	b580      	push	{r7, lr}
 800b2ca:	b086      	sub	sp, #24
 800b2cc:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800b2ce:	4b1f      	ldr	r3, [pc, #124]	; (800b34c <vTaskStartScheduler+0x84>)
 800b2d0:	9301      	str	r3, [sp, #4]
 800b2d2:	2300      	movs	r3, #0
 800b2d4:	9300      	str	r3, [sp, #0]
 800b2d6:	2300      	movs	r3, #0
 800b2d8:	2280      	movs	r2, #128	; 0x80
 800b2da:	491d      	ldr	r1, [pc, #116]	; (800b350 <vTaskStartScheduler+0x88>)
 800b2dc:	481d      	ldr	r0, [pc, #116]	; (800b354 <vTaskStartScheduler+0x8c>)
 800b2de:	f7ff fdfd 	bl	800aedc <xTaskCreate>
 800b2e2:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	2b01      	cmp	r3, #1
 800b2e8:	d102      	bne.n	800b2f0 <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 800b2ea:	f000 fedf 	bl	800c0ac <xTimerCreateTimerTask>
 800b2ee:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	2b01      	cmp	r3, #1
 800b2f4:	d116      	bne.n	800b324 <vTaskStartScheduler+0x5c>
	__asm volatile
 800b2f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2fa:	f383 8811 	msr	BASEPRI, r3
 800b2fe:	f3bf 8f6f 	isb	sy
 800b302:	f3bf 8f4f 	dsb	sy
 800b306:	60bb      	str	r3, [r7, #8]
}
 800b308:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b30a:	4b13      	ldr	r3, [pc, #76]	; (800b358 <vTaskStartScheduler+0x90>)
 800b30c:	f04f 32ff 	mov.w	r2, #4294967295
 800b310:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b312:	4b12      	ldr	r3, [pc, #72]	; (800b35c <vTaskStartScheduler+0x94>)
 800b314:	2201      	movs	r2, #1
 800b316:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b318:	4b11      	ldr	r3, [pc, #68]	; (800b360 <vTaskStartScheduler+0x98>)
 800b31a:	2200      	movs	r2, #0
 800b31c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b31e:	f001 fa9f 	bl	800c860 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b322:	e00e      	b.n	800b342 <vTaskStartScheduler+0x7a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b32a:	d10a      	bne.n	800b342 <vTaskStartScheduler+0x7a>
	__asm volatile
 800b32c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b330:	f383 8811 	msr	BASEPRI, r3
 800b334:	f3bf 8f6f 	isb	sy
 800b338:	f3bf 8f4f 	dsb	sy
 800b33c:	607b      	str	r3, [r7, #4]
}
 800b33e:	bf00      	nop
 800b340:	e7fe      	b.n	800b340 <vTaskStartScheduler+0x78>
}
 800b342:	bf00      	nop
 800b344:	3710      	adds	r7, #16
 800b346:	46bd      	mov	sp, r7
 800b348:	bd80      	pop	{r7, pc}
 800b34a:	bf00      	nop
 800b34c:	200015e8 	.word	0x200015e8
 800b350:	0801dae0 	.word	0x0801dae0
 800b354:	0800bacd 	.word	0x0800bacd
 800b358:	200015e4 	.word	0x200015e4
 800b35c:	200015d0 	.word	0x200015d0
 800b360:	200015c8 	.word	0x200015c8

0800b364 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b364:	b480      	push	{r7}
 800b366:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b368:	4b04      	ldr	r3, [pc, #16]	; (800b37c <vTaskSuspendAll+0x18>)
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	3301      	adds	r3, #1
 800b36e:	4a03      	ldr	r2, [pc, #12]	; (800b37c <vTaskSuspendAll+0x18>)
 800b370:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b372:	bf00      	nop
 800b374:	46bd      	mov	sp, r7
 800b376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b37a:	4770      	bx	lr
 800b37c:	200015ec 	.word	0x200015ec

0800b380 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b380:	b580      	push	{r7, lr}
 800b382:	b084      	sub	sp, #16
 800b384:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b386:	2300      	movs	r3, #0
 800b388:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b38a:	2300      	movs	r3, #0
 800b38c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b38e:	4b41      	ldr	r3, [pc, #260]	; (800b494 <xTaskResumeAll+0x114>)
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	2b00      	cmp	r3, #0
 800b394:	d10a      	bne.n	800b3ac <xTaskResumeAll+0x2c>
	__asm volatile
 800b396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b39a:	f383 8811 	msr	BASEPRI, r3
 800b39e:	f3bf 8f6f 	isb	sy
 800b3a2:	f3bf 8f4f 	dsb	sy
 800b3a6:	603b      	str	r3, [r7, #0]
}
 800b3a8:	bf00      	nop
 800b3aa:	e7fe      	b.n	800b3aa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b3ac:	f001 fafa 	bl	800c9a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b3b0:	4b38      	ldr	r3, [pc, #224]	; (800b494 <xTaskResumeAll+0x114>)
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	3b01      	subs	r3, #1
 800b3b6:	4a37      	ldr	r2, [pc, #220]	; (800b494 <xTaskResumeAll+0x114>)
 800b3b8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b3ba:	4b36      	ldr	r3, [pc, #216]	; (800b494 <xTaskResumeAll+0x114>)
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d161      	bne.n	800b486 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b3c2:	4b35      	ldr	r3, [pc, #212]	; (800b498 <xTaskResumeAll+0x118>)
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d05d      	beq.n	800b486 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b3ca:	e02e      	b.n	800b42a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b3cc:	4b33      	ldr	r3, [pc, #204]	; (800b49c <xTaskResumeAll+0x11c>)
 800b3ce:	68db      	ldr	r3, [r3, #12]
 800b3d0:	68db      	ldr	r3, [r3, #12]
 800b3d2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	3318      	adds	r3, #24
 800b3d8:	4618      	mov	r0, r3
 800b3da:	f7fe fe05 	bl	8009fe8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	3304      	adds	r3, #4
 800b3e2:	4618      	mov	r0, r3
 800b3e4:	f7fe fe00 	bl	8009fe8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3ec:	2201      	movs	r2, #1
 800b3ee:	409a      	lsls	r2, r3
 800b3f0:	4b2b      	ldr	r3, [pc, #172]	; (800b4a0 <xTaskResumeAll+0x120>)
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	4313      	orrs	r3, r2
 800b3f6:	4a2a      	ldr	r2, [pc, #168]	; (800b4a0 <xTaskResumeAll+0x120>)
 800b3f8:	6013      	str	r3, [r2, #0]
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3fe:	4613      	mov	r3, r2
 800b400:	009b      	lsls	r3, r3, #2
 800b402:	4413      	add	r3, r2
 800b404:	009b      	lsls	r3, r3, #2
 800b406:	4a27      	ldr	r2, [pc, #156]	; (800b4a4 <xTaskResumeAll+0x124>)
 800b408:	441a      	add	r2, r3
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	3304      	adds	r3, #4
 800b40e:	4619      	mov	r1, r3
 800b410:	4610      	mov	r0, r2
 800b412:	f7fe fd8c 	bl	8009f2e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b41a:	4b23      	ldr	r3, [pc, #140]	; (800b4a8 <xTaskResumeAll+0x128>)
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b420:	429a      	cmp	r2, r3
 800b422:	d302      	bcc.n	800b42a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800b424:	4b21      	ldr	r3, [pc, #132]	; (800b4ac <xTaskResumeAll+0x12c>)
 800b426:	2201      	movs	r2, #1
 800b428:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b42a:	4b1c      	ldr	r3, [pc, #112]	; (800b49c <xTaskResumeAll+0x11c>)
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d1cc      	bne.n	800b3cc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	2b00      	cmp	r3, #0
 800b436:	d001      	beq.n	800b43c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b438:	f000 fbde 	bl	800bbf8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b43c:	4b1c      	ldr	r3, [pc, #112]	; (800b4b0 <xTaskResumeAll+0x130>)
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	2b00      	cmp	r3, #0
 800b446:	d010      	beq.n	800b46a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b448:	f000 f858 	bl	800b4fc <xTaskIncrementTick>
 800b44c:	4603      	mov	r3, r0
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d002      	beq.n	800b458 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800b452:	4b16      	ldr	r3, [pc, #88]	; (800b4ac <xTaskResumeAll+0x12c>)
 800b454:	2201      	movs	r2, #1
 800b456:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	3b01      	subs	r3, #1
 800b45c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	2b00      	cmp	r3, #0
 800b462:	d1f1      	bne.n	800b448 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800b464:	4b12      	ldr	r3, [pc, #72]	; (800b4b0 <xTaskResumeAll+0x130>)
 800b466:	2200      	movs	r2, #0
 800b468:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b46a:	4b10      	ldr	r3, [pc, #64]	; (800b4ac <xTaskResumeAll+0x12c>)
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d009      	beq.n	800b486 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b472:	2301      	movs	r3, #1
 800b474:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b476:	4b0f      	ldr	r3, [pc, #60]	; (800b4b4 <xTaskResumeAll+0x134>)
 800b478:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b47c:	601a      	str	r2, [r3, #0]
 800b47e:	f3bf 8f4f 	dsb	sy
 800b482:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b486:	f001 fabd 	bl	800ca04 <vPortExitCritical>

	return xAlreadyYielded;
 800b48a:	68bb      	ldr	r3, [r7, #8]
}
 800b48c:	4618      	mov	r0, r3
 800b48e:	3710      	adds	r7, #16
 800b490:	46bd      	mov	sp, r7
 800b492:	bd80      	pop	{r7, pc}
 800b494:	200015ec 	.word	0x200015ec
 800b498:	200015c4 	.word	0x200015c4
 800b49c:	20001584 	.word	0x20001584
 800b4a0:	200015cc 	.word	0x200015cc
 800b4a4:	200014c8 	.word	0x200014c8
 800b4a8:	200014c4 	.word	0x200014c4
 800b4ac:	200015d8 	.word	0x200015d8
 800b4b0:	200015d4 	.word	0x200015d4
 800b4b4:	e000ed04 	.word	0xe000ed04

0800b4b8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b4b8:	b480      	push	{r7}
 800b4ba:	b083      	sub	sp, #12
 800b4bc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b4be:	4b05      	ldr	r3, [pc, #20]	; (800b4d4 <xTaskGetTickCount+0x1c>)
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b4c4:	687b      	ldr	r3, [r7, #4]
}
 800b4c6:	4618      	mov	r0, r3
 800b4c8:	370c      	adds	r7, #12
 800b4ca:	46bd      	mov	sp, r7
 800b4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d0:	4770      	bx	lr
 800b4d2:	bf00      	nop
 800b4d4:	200015c8 	.word	0x200015c8

0800b4d8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800b4d8:	b580      	push	{r7, lr}
 800b4da:	b082      	sub	sp, #8
 800b4dc:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b4de:	f001 fb43 	bl	800cb68 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800b4e2:	2300      	movs	r3, #0
 800b4e4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800b4e6:	4b04      	ldr	r3, [pc, #16]	; (800b4f8 <xTaskGetTickCountFromISR+0x20>)
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b4ec:	683b      	ldr	r3, [r7, #0]
}
 800b4ee:	4618      	mov	r0, r3
 800b4f0:	3708      	adds	r7, #8
 800b4f2:	46bd      	mov	sp, r7
 800b4f4:	bd80      	pop	{r7, pc}
 800b4f6:	bf00      	nop
 800b4f8:	200015c8 	.word	0x200015c8

0800b4fc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b4fc:	b580      	push	{r7, lr}
 800b4fe:	b086      	sub	sp, #24
 800b500:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b502:	2300      	movs	r3, #0
 800b504:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b506:	4b4e      	ldr	r3, [pc, #312]	; (800b640 <xTaskIncrementTick+0x144>)
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	f040 808e 	bne.w	800b62c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b510:	4b4c      	ldr	r3, [pc, #304]	; (800b644 <xTaskIncrementTick+0x148>)
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	3301      	adds	r3, #1
 800b516:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b518:	4a4a      	ldr	r2, [pc, #296]	; (800b644 <xTaskIncrementTick+0x148>)
 800b51a:	693b      	ldr	r3, [r7, #16]
 800b51c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b51e:	693b      	ldr	r3, [r7, #16]
 800b520:	2b00      	cmp	r3, #0
 800b522:	d120      	bne.n	800b566 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b524:	4b48      	ldr	r3, [pc, #288]	; (800b648 <xTaskIncrementTick+0x14c>)
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d00a      	beq.n	800b544 <xTaskIncrementTick+0x48>
	__asm volatile
 800b52e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b532:	f383 8811 	msr	BASEPRI, r3
 800b536:	f3bf 8f6f 	isb	sy
 800b53a:	f3bf 8f4f 	dsb	sy
 800b53e:	603b      	str	r3, [r7, #0]
}
 800b540:	bf00      	nop
 800b542:	e7fe      	b.n	800b542 <xTaskIncrementTick+0x46>
 800b544:	4b40      	ldr	r3, [pc, #256]	; (800b648 <xTaskIncrementTick+0x14c>)
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	60fb      	str	r3, [r7, #12]
 800b54a:	4b40      	ldr	r3, [pc, #256]	; (800b64c <xTaskIncrementTick+0x150>)
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	4a3e      	ldr	r2, [pc, #248]	; (800b648 <xTaskIncrementTick+0x14c>)
 800b550:	6013      	str	r3, [r2, #0]
 800b552:	4a3e      	ldr	r2, [pc, #248]	; (800b64c <xTaskIncrementTick+0x150>)
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	6013      	str	r3, [r2, #0]
 800b558:	4b3d      	ldr	r3, [pc, #244]	; (800b650 <xTaskIncrementTick+0x154>)
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	3301      	adds	r3, #1
 800b55e:	4a3c      	ldr	r2, [pc, #240]	; (800b650 <xTaskIncrementTick+0x154>)
 800b560:	6013      	str	r3, [r2, #0]
 800b562:	f000 fb49 	bl	800bbf8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b566:	4b3b      	ldr	r3, [pc, #236]	; (800b654 <xTaskIncrementTick+0x158>)
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	693a      	ldr	r2, [r7, #16]
 800b56c:	429a      	cmp	r2, r3
 800b56e:	d348      	bcc.n	800b602 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b570:	4b35      	ldr	r3, [pc, #212]	; (800b648 <xTaskIncrementTick+0x14c>)
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	2b00      	cmp	r3, #0
 800b578:	d104      	bne.n	800b584 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b57a:	4b36      	ldr	r3, [pc, #216]	; (800b654 <xTaskIncrementTick+0x158>)
 800b57c:	f04f 32ff 	mov.w	r2, #4294967295
 800b580:	601a      	str	r2, [r3, #0]
					break;
 800b582:	e03e      	b.n	800b602 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b584:	4b30      	ldr	r3, [pc, #192]	; (800b648 <xTaskIncrementTick+0x14c>)
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	68db      	ldr	r3, [r3, #12]
 800b58a:	68db      	ldr	r3, [r3, #12]
 800b58c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b58e:	68bb      	ldr	r3, [r7, #8]
 800b590:	685b      	ldr	r3, [r3, #4]
 800b592:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b594:	693a      	ldr	r2, [r7, #16]
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	429a      	cmp	r2, r3
 800b59a:	d203      	bcs.n	800b5a4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b59c:	4a2d      	ldr	r2, [pc, #180]	; (800b654 <xTaskIncrementTick+0x158>)
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b5a2:	e02e      	b.n	800b602 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b5a4:	68bb      	ldr	r3, [r7, #8]
 800b5a6:	3304      	adds	r3, #4
 800b5a8:	4618      	mov	r0, r3
 800b5aa:	f7fe fd1d 	bl	8009fe8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b5ae:	68bb      	ldr	r3, [r7, #8]
 800b5b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d004      	beq.n	800b5c0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b5b6:	68bb      	ldr	r3, [r7, #8]
 800b5b8:	3318      	adds	r3, #24
 800b5ba:	4618      	mov	r0, r3
 800b5bc:	f7fe fd14 	bl	8009fe8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b5c0:	68bb      	ldr	r3, [r7, #8]
 800b5c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5c4:	2201      	movs	r2, #1
 800b5c6:	409a      	lsls	r2, r3
 800b5c8:	4b23      	ldr	r3, [pc, #140]	; (800b658 <xTaskIncrementTick+0x15c>)
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	4313      	orrs	r3, r2
 800b5ce:	4a22      	ldr	r2, [pc, #136]	; (800b658 <xTaskIncrementTick+0x15c>)
 800b5d0:	6013      	str	r3, [r2, #0]
 800b5d2:	68bb      	ldr	r3, [r7, #8]
 800b5d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5d6:	4613      	mov	r3, r2
 800b5d8:	009b      	lsls	r3, r3, #2
 800b5da:	4413      	add	r3, r2
 800b5dc:	009b      	lsls	r3, r3, #2
 800b5de:	4a1f      	ldr	r2, [pc, #124]	; (800b65c <xTaskIncrementTick+0x160>)
 800b5e0:	441a      	add	r2, r3
 800b5e2:	68bb      	ldr	r3, [r7, #8]
 800b5e4:	3304      	adds	r3, #4
 800b5e6:	4619      	mov	r1, r3
 800b5e8:	4610      	mov	r0, r2
 800b5ea:	f7fe fca0 	bl	8009f2e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b5ee:	68bb      	ldr	r3, [r7, #8]
 800b5f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5f2:	4b1b      	ldr	r3, [pc, #108]	; (800b660 <xTaskIncrementTick+0x164>)
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5f8:	429a      	cmp	r2, r3
 800b5fa:	d3b9      	bcc.n	800b570 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b5fc:	2301      	movs	r3, #1
 800b5fe:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b600:	e7b6      	b.n	800b570 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b602:	4b17      	ldr	r3, [pc, #92]	; (800b660 <xTaskIncrementTick+0x164>)
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b608:	4914      	ldr	r1, [pc, #80]	; (800b65c <xTaskIncrementTick+0x160>)
 800b60a:	4613      	mov	r3, r2
 800b60c:	009b      	lsls	r3, r3, #2
 800b60e:	4413      	add	r3, r2
 800b610:	009b      	lsls	r3, r3, #2
 800b612:	440b      	add	r3, r1
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	2b01      	cmp	r3, #1
 800b618:	d901      	bls.n	800b61e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800b61a:	2301      	movs	r3, #1
 800b61c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b61e:	4b11      	ldr	r3, [pc, #68]	; (800b664 <xTaskIncrementTick+0x168>)
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	2b00      	cmp	r3, #0
 800b624:	d007      	beq.n	800b636 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800b626:	2301      	movs	r3, #1
 800b628:	617b      	str	r3, [r7, #20]
 800b62a:	e004      	b.n	800b636 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b62c:	4b0e      	ldr	r3, [pc, #56]	; (800b668 <xTaskIncrementTick+0x16c>)
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	3301      	adds	r3, #1
 800b632:	4a0d      	ldr	r2, [pc, #52]	; (800b668 <xTaskIncrementTick+0x16c>)
 800b634:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b636:	697b      	ldr	r3, [r7, #20]
}
 800b638:	4618      	mov	r0, r3
 800b63a:	3718      	adds	r7, #24
 800b63c:	46bd      	mov	sp, r7
 800b63e:	bd80      	pop	{r7, pc}
 800b640:	200015ec 	.word	0x200015ec
 800b644:	200015c8 	.word	0x200015c8
 800b648:	2000157c 	.word	0x2000157c
 800b64c:	20001580 	.word	0x20001580
 800b650:	200015dc 	.word	0x200015dc
 800b654:	200015e4 	.word	0x200015e4
 800b658:	200015cc 	.word	0x200015cc
 800b65c:	200014c8 	.word	0x200014c8
 800b660:	200014c4 	.word	0x200014c4
 800b664:	200015d8 	.word	0x200015d8
 800b668:	200015d4 	.word	0x200015d4

0800b66c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b66c:	b480      	push	{r7}
 800b66e:	b087      	sub	sp, #28
 800b670:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b672:	4b27      	ldr	r3, [pc, #156]	; (800b710 <vTaskSwitchContext+0xa4>)
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	2b00      	cmp	r3, #0
 800b678:	d003      	beq.n	800b682 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b67a:	4b26      	ldr	r3, [pc, #152]	; (800b714 <vTaskSwitchContext+0xa8>)
 800b67c:	2201      	movs	r2, #1
 800b67e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b680:	e03f      	b.n	800b702 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800b682:	4b24      	ldr	r3, [pc, #144]	; (800b714 <vTaskSwitchContext+0xa8>)
 800b684:	2200      	movs	r2, #0
 800b686:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b688:	4b23      	ldr	r3, [pc, #140]	; (800b718 <vTaskSwitchContext+0xac>)
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	fab3 f383 	clz	r3, r3
 800b694:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800b696:	7afb      	ldrb	r3, [r7, #11]
 800b698:	f1c3 031f 	rsb	r3, r3, #31
 800b69c:	617b      	str	r3, [r7, #20]
 800b69e:	491f      	ldr	r1, [pc, #124]	; (800b71c <vTaskSwitchContext+0xb0>)
 800b6a0:	697a      	ldr	r2, [r7, #20]
 800b6a2:	4613      	mov	r3, r2
 800b6a4:	009b      	lsls	r3, r3, #2
 800b6a6:	4413      	add	r3, r2
 800b6a8:	009b      	lsls	r3, r3, #2
 800b6aa:	440b      	add	r3, r1
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d10a      	bne.n	800b6c8 <vTaskSwitchContext+0x5c>
	__asm volatile
 800b6b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6b6:	f383 8811 	msr	BASEPRI, r3
 800b6ba:	f3bf 8f6f 	isb	sy
 800b6be:	f3bf 8f4f 	dsb	sy
 800b6c2:	607b      	str	r3, [r7, #4]
}
 800b6c4:	bf00      	nop
 800b6c6:	e7fe      	b.n	800b6c6 <vTaskSwitchContext+0x5a>
 800b6c8:	697a      	ldr	r2, [r7, #20]
 800b6ca:	4613      	mov	r3, r2
 800b6cc:	009b      	lsls	r3, r3, #2
 800b6ce:	4413      	add	r3, r2
 800b6d0:	009b      	lsls	r3, r3, #2
 800b6d2:	4a12      	ldr	r2, [pc, #72]	; (800b71c <vTaskSwitchContext+0xb0>)
 800b6d4:	4413      	add	r3, r2
 800b6d6:	613b      	str	r3, [r7, #16]
 800b6d8:	693b      	ldr	r3, [r7, #16]
 800b6da:	685b      	ldr	r3, [r3, #4]
 800b6dc:	685a      	ldr	r2, [r3, #4]
 800b6de:	693b      	ldr	r3, [r7, #16]
 800b6e0:	605a      	str	r2, [r3, #4]
 800b6e2:	693b      	ldr	r3, [r7, #16]
 800b6e4:	685a      	ldr	r2, [r3, #4]
 800b6e6:	693b      	ldr	r3, [r7, #16]
 800b6e8:	3308      	adds	r3, #8
 800b6ea:	429a      	cmp	r2, r3
 800b6ec:	d104      	bne.n	800b6f8 <vTaskSwitchContext+0x8c>
 800b6ee:	693b      	ldr	r3, [r7, #16]
 800b6f0:	685b      	ldr	r3, [r3, #4]
 800b6f2:	685a      	ldr	r2, [r3, #4]
 800b6f4:	693b      	ldr	r3, [r7, #16]
 800b6f6:	605a      	str	r2, [r3, #4]
 800b6f8:	693b      	ldr	r3, [r7, #16]
 800b6fa:	685b      	ldr	r3, [r3, #4]
 800b6fc:	68db      	ldr	r3, [r3, #12]
 800b6fe:	4a08      	ldr	r2, [pc, #32]	; (800b720 <vTaskSwitchContext+0xb4>)
 800b700:	6013      	str	r3, [r2, #0]
}
 800b702:	bf00      	nop
 800b704:	371c      	adds	r7, #28
 800b706:	46bd      	mov	sp, r7
 800b708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b70c:	4770      	bx	lr
 800b70e:	bf00      	nop
 800b710:	200015ec 	.word	0x200015ec
 800b714:	200015d8 	.word	0x200015d8
 800b718:	200015cc 	.word	0x200015cc
 800b71c:	200014c8 	.word	0x200014c8
 800b720:	200014c4 	.word	0x200014c4

0800b724 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b724:	b580      	push	{r7, lr}
 800b726:	b084      	sub	sp, #16
 800b728:	af00      	add	r7, sp, #0
 800b72a:	6078      	str	r0, [r7, #4]
 800b72c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	2b00      	cmp	r3, #0
 800b732:	d10a      	bne.n	800b74a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b734:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b738:	f383 8811 	msr	BASEPRI, r3
 800b73c:	f3bf 8f6f 	isb	sy
 800b740:	f3bf 8f4f 	dsb	sy
 800b744:	60fb      	str	r3, [r7, #12]
}
 800b746:	bf00      	nop
 800b748:	e7fe      	b.n	800b748 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b74a:	4b07      	ldr	r3, [pc, #28]	; (800b768 <vTaskPlaceOnEventList+0x44>)
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	3318      	adds	r3, #24
 800b750:	4619      	mov	r1, r3
 800b752:	6878      	ldr	r0, [r7, #4]
 800b754:	f7fe fc0f 	bl	8009f76 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b758:	2101      	movs	r1, #1
 800b75a:	6838      	ldr	r0, [r7, #0]
 800b75c:	f000 fc40 	bl	800bfe0 <prvAddCurrentTaskToDelayedList>
}
 800b760:	bf00      	nop
 800b762:	3710      	adds	r7, #16
 800b764:	46bd      	mov	sp, r7
 800b766:	bd80      	pop	{r7, pc}
 800b768:	200014c4 	.word	0x200014c4

0800b76c <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 800b76c:	b580      	push	{r7, lr}
 800b76e:	b086      	sub	sp, #24
 800b770:	af00      	add	r7, sp, #0
 800b772:	60f8      	str	r0, [r7, #12]
 800b774:	60b9      	str	r1, [r7, #8]
 800b776:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d10a      	bne.n	800b794 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 800b77e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b782:	f383 8811 	msr	BASEPRI, r3
 800b786:	f3bf 8f6f 	isb	sy
 800b78a:	f3bf 8f4f 	dsb	sy
 800b78e:	617b      	str	r3, [r7, #20]
}
 800b790:	bf00      	nop
 800b792:	e7fe      	b.n	800b792 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 800b794:	4b11      	ldr	r3, [pc, #68]	; (800b7dc <vTaskPlaceOnUnorderedEventList+0x70>)
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d10a      	bne.n	800b7b2 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 800b79c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7a0:	f383 8811 	msr	BASEPRI, r3
 800b7a4:	f3bf 8f6f 	isb	sy
 800b7a8:	f3bf 8f4f 	dsb	sy
 800b7ac:	613b      	str	r3, [r7, #16]
}
 800b7ae:	bf00      	nop
 800b7b0:	e7fe      	b.n	800b7b0 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800b7b2:	4b0b      	ldr	r3, [pc, #44]	; (800b7e0 <vTaskPlaceOnUnorderedEventList+0x74>)
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	68ba      	ldr	r2, [r7, #8]
 800b7b8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800b7bc:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b7be:	4b08      	ldr	r3, [pc, #32]	; (800b7e0 <vTaskPlaceOnUnorderedEventList+0x74>)
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	3318      	adds	r3, #24
 800b7c4:	4619      	mov	r1, r3
 800b7c6:	68f8      	ldr	r0, [r7, #12]
 800b7c8:	f7fe fbb1 	bl	8009f2e <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b7cc:	2101      	movs	r1, #1
 800b7ce:	6878      	ldr	r0, [r7, #4]
 800b7d0:	f000 fc06 	bl	800bfe0 <prvAddCurrentTaskToDelayedList>
}
 800b7d4:	bf00      	nop
 800b7d6:	3718      	adds	r7, #24
 800b7d8:	46bd      	mov	sp, r7
 800b7da:	bd80      	pop	{r7, pc}
 800b7dc:	200015ec 	.word	0x200015ec
 800b7e0:	200014c4 	.word	0x200014c4

0800b7e4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b7e4:	b580      	push	{r7, lr}
 800b7e6:	b086      	sub	sp, #24
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	60f8      	str	r0, [r7, #12]
 800b7ec:	60b9      	str	r1, [r7, #8]
 800b7ee:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d10a      	bne.n	800b80c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800b7f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7fa:	f383 8811 	msr	BASEPRI, r3
 800b7fe:	f3bf 8f6f 	isb	sy
 800b802:	f3bf 8f4f 	dsb	sy
 800b806:	617b      	str	r3, [r7, #20]
}
 800b808:	bf00      	nop
 800b80a:	e7fe      	b.n	800b80a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b80c:	4b0a      	ldr	r3, [pc, #40]	; (800b838 <vTaskPlaceOnEventListRestricted+0x54>)
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	3318      	adds	r3, #24
 800b812:	4619      	mov	r1, r3
 800b814:	68f8      	ldr	r0, [r7, #12]
 800b816:	f7fe fb8a 	bl	8009f2e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d002      	beq.n	800b826 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800b820:	f04f 33ff 	mov.w	r3, #4294967295
 800b824:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b826:	6879      	ldr	r1, [r7, #4]
 800b828:	68b8      	ldr	r0, [r7, #8]
 800b82a:	f000 fbd9 	bl	800bfe0 <prvAddCurrentTaskToDelayedList>
	}
 800b82e:	bf00      	nop
 800b830:	3718      	adds	r7, #24
 800b832:	46bd      	mov	sp, r7
 800b834:	bd80      	pop	{r7, pc}
 800b836:	bf00      	nop
 800b838:	200014c4 	.word	0x200014c4

0800b83c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b83c:	b580      	push	{r7, lr}
 800b83e:	b086      	sub	sp, #24
 800b840:	af00      	add	r7, sp, #0
 800b842:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	68db      	ldr	r3, [r3, #12]
 800b848:	68db      	ldr	r3, [r3, #12]
 800b84a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b84c:	693b      	ldr	r3, [r7, #16]
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d10a      	bne.n	800b868 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b852:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b856:	f383 8811 	msr	BASEPRI, r3
 800b85a:	f3bf 8f6f 	isb	sy
 800b85e:	f3bf 8f4f 	dsb	sy
 800b862:	60fb      	str	r3, [r7, #12]
}
 800b864:	bf00      	nop
 800b866:	e7fe      	b.n	800b866 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b868:	693b      	ldr	r3, [r7, #16]
 800b86a:	3318      	adds	r3, #24
 800b86c:	4618      	mov	r0, r3
 800b86e:	f7fe fbbb 	bl	8009fe8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b872:	4b1d      	ldr	r3, [pc, #116]	; (800b8e8 <xTaskRemoveFromEventList+0xac>)
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	2b00      	cmp	r3, #0
 800b878:	d11c      	bne.n	800b8b4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b87a:	693b      	ldr	r3, [r7, #16]
 800b87c:	3304      	adds	r3, #4
 800b87e:	4618      	mov	r0, r3
 800b880:	f7fe fbb2 	bl	8009fe8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b884:	693b      	ldr	r3, [r7, #16]
 800b886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b888:	2201      	movs	r2, #1
 800b88a:	409a      	lsls	r2, r3
 800b88c:	4b17      	ldr	r3, [pc, #92]	; (800b8ec <xTaskRemoveFromEventList+0xb0>)
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	4313      	orrs	r3, r2
 800b892:	4a16      	ldr	r2, [pc, #88]	; (800b8ec <xTaskRemoveFromEventList+0xb0>)
 800b894:	6013      	str	r3, [r2, #0]
 800b896:	693b      	ldr	r3, [r7, #16]
 800b898:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b89a:	4613      	mov	r3, r2
 800b89c:	009b      	lsls	r3, r3, #2
 800b89e:	4413      	add	r3, r2
 800b8a0:	009b      	lsls	r3, r3, #2
 800b8a2:	4a13      	ldr	r2, [pc, #76]	; (800b8f0 <xTaskRemoveFromEventList+0xb4>)
 800b8a4:	441a      	add	r2, r3
 800b8a6:	693b      	ldr	r3, [r7, #16]
 800b8a8:	3304      	adds	r3, #4
 800b8aa:	4619      	mov	r1, r3
 800b8ac:	4610      	mov	r0, r2
 800b8ae:	f7fe fb3e 	bl	8009f2e <vListInsertEnd>
 800b8b2:	e005      	b.n	800b8c0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b8b4:	693b      	ldr	r3, [r7, #16]
 800b8b6:	3318      	adds	r3, #24
 800b8b8:	4619      	mov	r1, r3
 800b8ba:	480e      	ldr	r0, [pc, #56]	; (800b8f4 <xTaskRemoveFromEventList+0xb8>)
 800b8bc:	f7fe fb37 	bl	8009f2e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b8c0:	693b      	ldr	r3, [r7, #16]
 800b8c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8c4:	4b0c      	ldr	r3, [pc, #48]	; (800b8f8 <xTaskRemoveFromEventList+0xbc>)
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8ca:	429a      	cmp	r2, r3
 800b8cc:	d905      	bls.n	800b8da <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b8ce:	2301      	movs	r3, #1
 800b8d0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b8d2:	4b0a      	ldr	r3, [pc, #40]	; (800b8fc <xTaskRemoveFromEventList+0xc0>)
 800b8d4:	2201      	movs	r2, #1
 800b8d6:	601a      	str	r2, [r3, #0]
 800b8d8:	e001      	b.n	800b8de <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800b8da:	2300      	movs	r3, #0
 800b8dc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b8de:	697b      	ldr	r3, [r7, #20]
}
 800b8e0:	4618      	mov	r0, r3
 800b8e2:	3718      	adds	r7, #24
 800b8e4:	46bd      	mov	sp, r7
 800b8e6:	bd80      	pop	{r7, pc}
 800b8e8:	200015ec 	.word	0x200015ec
 800b8ec:	200015cc 	.word	0x200015cc
 800b8f0:	200014c8 	.word	0x200014c8
 800b8f4:	20001584 	.word	0x20001584
 800b8f8:	200014c4 	.word	0x200014c4
 800b8fc:	200015d8 	.word	0x200015d8

0800b900 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 800b900:	b580      	push	{r7, lr}
 800b902:	b086      	sub	sp, #24
 800b904:	af00      	add	r7, sp, #0
 800b906:	6078      	str	r0, [r7, #4]
 800b908:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800b90a:	4b29      	ldr	r3, [pc, #164]	; (800b9b0 <vTaskRemoveFromUnorderedEventList+0xb0>)
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d10a      	bne.n	800b928 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 800b912:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b916:	f383 8811 	msr	BASEPRI, r3
 800b91a:	f3bf 8f6f 	isb	sy
 800b91e:	f3bf 8f4f 	dsb	sy
 800b922:	613b      	str	r3, [r7, #16]
}
 800b924:	bf00      	nop
 800b926:	e7fe      	b.n	800b926 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800b928:	683b      	ldr	r3, [r7, #0]
 800b92a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	68db      	ldr	r3, [r3, #12]
 800b936:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 800b938:	697b      	ldr	r3, [r7, #20]
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d10a      	bne.n	800b954 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 800b93e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b942:	f383 8811 	msr	BASEPRI, r3
 800b946:	f3bf 8f6f 	isb	sy
 800b94a:	f3bf 8f4f 	dsb	sy
 800b94e:	60fb      	str	r3, [r7, #12]
}
 800b950:	bf00      	nop
 800b952:	e7fe      	b.n	800b952 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 800b954:	6878      	ldr	r0, [r7, #4]
 800b956:	f7fe fb47 	bl	8009fe8 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b95a:	697b      	ldr	r3, [r7, #20]
 800b95c:	3304      	adds	r3, #4
 800b95e:	4618      	mov	r0, r3
 800b960:	f7fe fb42 	bl	8009fe8 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800b964:	697b      	ldr	r3, [r7, #20]
 800b966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b968:	2201      	movs	r2, #1
 800b96a:	409a      	lsls	r2, r3
 800b96c:	4b11      	ldr	r3, [pc, #68]	; (800b9b4 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	4313      	orrs	r3, r2
 800b972:	4a10      	ldr	r2, [pc, #64]	; (800b9b4 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800b974:	6013      	str	r3, [r2, #0]
 800b976:	697b      	ldr	r3, [r7, #20]
 800b978:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b97a:	4613      	mov	r3, r2
 800b97c:	009b      	lsls	r3, r3, #2
 800b97e:	4413      	add	r3, r2
 800b980:	009b      	lsls	r3, r3, #2
 800b982:	4a0d      	ldr	r2, [pc, #52]	; (800b9b8 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800b984:	441a      	add	r2, r3
 800b986:	697b      	ldr	r3, [r7, #20]
 800b988:	3304      	adds	r3, #4
 800b98a:	4619      	mov	r1, r3
 800b98c:	4610      	mov	r0, r2
 800b98e:	f7fe face 	bl	8009f2e <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b992:	697b      	ldr	r3, [r7, #20]
 800b994:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b996:	4b09      	ldr	r3, [pc, #36]	; (800b9bc <vTaskRemoveFromUnorderedEventList+0xbc>)
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b99c:	429a      	cmp	r2, r3
 800b99e:	d902      	bls.n	800b9a6 <vTaskRemoveFromUnorderedEventList+0xa6>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 800b9a0:	4b07      	ldr	r3, [pc, #28]	; (800b9c0 <vTaskRemoveFromUnorderedEventList+0xc0>)
 800b9a2:	2201      	movs	r2, #1
 800b9a4:	601a      	str	r2, [r3, #0]
	}
}
 800b9a6:	bf00      	nop
 800b9a8:	3718      	adds	r7, #24
 800b9aa:	46bd      	mov	sp, r7
 800b9ac:	bd80      	pop	{r7, pc}
 800b9ae:	bf00      	nop
 800b9b0:	200015ec 	.word	0x200015ec
 800b9b4:	200015cc 	.word	0x200015cc
 800b9b8:	200014c8 	.word	0x200014c8
 800b9bc:	200014c4 	.word	0x200014c4
 800b9c0:	200015d8 	.word	0x200015d8

0800b9c4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b9c4:	b480      	push	{r7}
 800b9c6:	b083      	sub	sp, #12
 800b9c8:	af00      	add	r7, sp, #0
 800b9ca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b9cc:	4b06      	ldr	r3, [pc, #24]	; (800b9e8 <vTaskInternalSetTimeOutState+0x24>)
 800b9ce:	681a      	ldr	r2, [r3, #0]
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b9d4:	4b05      	ldr	r3, [pc, #20]	; (800b9ec <vTaskInternalSetTimeOutState+0x28>)
 800b9d6:	681a      	ldr	r2, [r3, #0]
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	605a      	str	r2, [r3, #4]
}
 800b9dc:	bf00      	nop
 800b9de:	370c      	adds	r7, #12
 800b9e0:	46bd      	mov	sp, r7
 800b9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e6:	4770      	bx	lr
 800b9e8:	200015dc 	.word	0x200015dc
 800b9ec:	200015c8 	.word	0x200015c8

0800b9f0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b9f0:	b580      	push	{r7, lr}
 800b9f2:	b088      	sub	sp, #32
 800b9f4:	af00      	add	r7, sp, #0
 800b9f6:	6078      	str	r0, [r7, #4]
 800b9f8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d10a      	bne.n	800ba16 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800ba00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba04:	f383 8811 	msr	BASEPRI, r3
 800ba08:	f3bf 8f6f 	isb	sy
 800ba0c:	f3bf 8f4f 	dsb	sy
 800ba10:	613b      	str	r3, [r7, #16]
}
 800ba12:	bf00      	nop
 800ba14:	e7fe      	b.n	800ba14 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ba16:	683b      	ldr	r3, [r7, #0]
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d10a      	bne.n	800ba32 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800ba1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba20:	f383 8811 	msr	BASEPRI, r3
 800ba24:	f3bf 8f6f 	isb	sy
 800ba28:	f3bf 8f4f 	dsb	sy
 800ba2c:	60fb      	str	r3, [r7, #12]
}
 800ba2e:	bf00      	nop
 800ba30:	e7fe      	b.n	800ba30 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800ba32:	f000 ffb7 	bl	800c9a4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ba36:	4b1d      	ldr	r3, [pc, #116]	; (800baac <xTaskCheckForTimeOut+0xbc>)
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	685b      	ldr	r3, [r3, #4]
 800ba40:	69ba      	ldr	r2, [r7, #24]
 800ba42:	1ad3      	subs	r3, r2, r3
 800ba44:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ba46:	683b      	ldr	r3, [r7, #0]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba4e:	d102      	bne.n	800ba56 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ba50:	2300      	movs	r3, #0
 800ba52:	61fb      	str	r3, [r7, #28]
 800ba54:	e023      	b.n	800ba9e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	681a      	ldr	r2, [r3, #0]
 800ba5a:	4b15      	ldr	r3, [pc, #84]	; (800bab0 <xTaskCheckForTimeOut+0xc0>)
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	429a      	cmp	r2, r3
 800ba60:	d007      	beq.n	800ba72 <xTaskCheckForTimeOut+0x82>
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	685b      	ldr	r3, [r3, #4]
 800ba66:	69ba      	ldr	r2, [r7, #24]
 800ba68:	429a      	cmp	r2, r3
 800ba6a:	d302      	bcc.n	800ba72 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ba6c:	2301      	movs	r3, #1
 800ba6e:	61fb      	str	r3, [r7, #28]
 800ba70:	e015      	b.n	800ba9e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ba72:	683b      	ldr	r3, [r7, #0]
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	697a      	ldr	r2, [r7, #20]
 800ba78:	429a      	cmp	r2, r3
 800ba7a:	d20b      	bcs.n	800ba94 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ba7c:	683b      	ldr	r3, [r7, #0]
 800ba7e:	681a      	ldr	r2, [r3, #0]
 800ba80:	697b      	ldr	r3, [r7, #20]
 800ba82:	1ad2      	subs	r2, r2, r3
 800ba84:	683b      	ldr	r3, [r7, #0]
 800ba86:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ba88:	6878      	ldr	r0, [r7, #4]
 800ba8a:	f7ff ff9b 	bl	800b9c4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ba8e:	2300      	movs	r3, #0
 800ba90:	61fb      	str	r3, [r7, #28]
 800ba92:	e004      	b.n	800ba9e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800ba94:	683b      	ldr	r3, [r7, #0]
 800ba96:	2200      	movs	r2, #0
 800ba98:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ba9a:	2301      	movs	r3, #1
 800ba9c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ba9e:	f000 ffb1 	bl	800ca04 <vPortExitCritical>

	return xReturn;
 800baa2:	69fb      	ldr	r3, [r7, #28]
}
 800baa4:	4618      	mov	r0, r3
 800baa6:	3720      	adds	r7, #32
 800baa8:	46bd      	mov	sp, r7
 800baaa:	bd80      	pop	{r7, pc}
 800baac:	200015c8 	.word	0x200015c8
 800bab0:	200015dc 	.word	0x200015dc

0800bab4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800bab4:	b480      	push	{r7}
 800bab6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800bab8:	4b03      	ldr	r3, [pc, #12]	; (800bac8 <vTaskMissedYield+0x14>)
 800baba:	2201      	movs	r2, #1
 800babc:	601a      	str	r2, [r3, #0]
}
 800babe:	bf00      	nop
 800bac0:	46bd      	mov	sp, r7
 800bac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac6:	4770      	bx	lr
 800bac8:	200015d8 	.word	0x200015d8

0800bacc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bacc:	b580      	push	{r7, lr}
 800bace:	b082      	sub	sp, #8
 800bad0:	af00      	add	r7, sp, #0
 800bad2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bad4:	f000 f852 	bl	800bb7c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bad8:	4b06      	ldr	r3, [pc, #24]	; (800baf4 <prvIdleTask+0x28>)
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	2b01      	cmp	r3, #1
 800bade:	d9f9      	bls.n	800bad4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800bae0:	4b05      	ldr	r3, [pc, #20]	; (800baf8 <prvIdleTask+0x2c>)
 800bae2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bae6:	601a      	str	r2, [r3, #0]
 800bae8:	f3bf 8f4f 	dsb	sy
 800baec:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800baf0:	e7f0      	b.n	800bad4 <prvIdleTask+0x8>
 800baf2:	bf00      	nop
 800baf4:	200014c8 	.word	0x200014c8
 800baf8:	e000ed04 	.word	0xe000ed04

0800bafc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bafc:	b580      	push	{r7, lr}
 800bafe:	b082      	sub	sp, #8
 800bb00:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bb02:	2300      	movs	r3, #0
 800bb04:	607b      	str	r3, [r7, #4]
 800bb06:	e00c      	b.n	800bb22 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bb08:	687a      	ldr	r2, [r7, #4]
 800bb0a:	4613      	mov	r3, r2
 800bb0c:	009b      	lsls	r3, r3, #2
 800bb0e:	4413      	add	r3, r2
 800bb10:	009b      	lsls	r3, r3, #2
 800bb12:	4a12      	ldr	r2, [pc, #72]	; (800bb5c <prvInitialiseTaskLists+0x60>)
 800bb14:	4413      	add	r3, r2
 800bb16:	4618      	mov	r0, r3
 800bb18:	f7fe f9dc 	bl	8009ed4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	3301      	adds	r3, #1
 800bb20:	607b      	str	r3, [r7, #4]
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	2b06      	cmp	r3, #6
 800bb26:	d9ef      	bls.n	800bb08 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bb28:	480d      	ldr	r0, [pc, #52]	; (800bb60 <prvInitialiseTaskLists+0x64>)
 800bb2a:	f7fe f9d3 	bl	8009ed4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bb2e:	480d      	ldr	r0, [pc, #52]	; (800bb64 <prvInitialiseTaskLists+0x68>)
 800bb30:	f7fe f9d0 	bl	8009ed4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bb34:	480c      	ldr	r0, [pc, #48]	; (800bb68 <prvInitialiseTaskLists+0x6c>)
 800bb36:	f7fe f9cd 	bl	8009ed4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bb3a:	480c      	ldr	r0, [pc, #48]	; (800bb6c <prvInitialiseTaskLists+0x70>)
 800bb3c:	f7fe f9ca 	bl	8009ed4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bb40:	480b      	ldr	r0, [pc, #44]	; (800bb70 <prvInitialiseTaskLists+0x74>)
 800bb42:	f7fe f9c7 	bl	8009ed4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bb46:	4b0b      	ldr	r3, [pc, #44]	; (800bb74 <prvInitialiseTaskLists+0x78>)
 800bb48:	4a05      	ldr	r2, [pc, #20]	; (800bb60 <prvInitialiseTaskLists+0x64>)
 800bb4a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bb4c:	4b0a      	ldr	r3, [pc, #40]	; (800bb78 <prvInitialiseTaskLists+0x7c>)
 800bb4e:	4a05      	ldr	r2, [pc, #20]	; (800bb64 <prvInitialiseTaskLists+0x68>)
 800bb50:	601a      	str	r2, [r3, #0]
}
 800bb52:	bf00      	nop
 800bb54:	3708      	adds	r7, #8
 800bb56:	46bd      	mov	sp, r7
 800bb58:	bd80      	pop	{r7, pc}
 800bb5a:	bf00      	nop
 800bb5c:	200014c8 	.word	0x200014c8
 800bb60:	20001554 	.word	0x20001554
 800bb64:	20001568 	.word	0x20001568
 800bb68:	20001584 	.word	0x20001584
 800bb6c:	20001598 	.word	0x20001598
 800bb70:	200015b0 	.word	0x200015b0
 800bb74:	2000157c 	.word	0x2000157c
 800bb78:	20001580 	.word	0x20001580

0800bb7c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bb7c:	b580      	push	{r7, lr}
 800bb7e:	b082      	sub	sp, #8
 800bb80:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bb82:	e019      	b.n	800bbb8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bb84:	f000 ff0e 	bl	800c9a4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb88:	4b10      	ldr	r3, [pc, #64]	; (800bbcc <prvCheckTasksWaitingTermination+0x50>)
 800bb8a:	68db      	ldr	r3, [r3, #12]
 800bb8c:	68db      	ldr	r3, [r3, #12]
 800bb8e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	3304      	adds	r3, #4
 800bb94:	4618      	mov	r0, r3
 800bb96:	f7fe fa27 	bl	8009fe8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bb9a:	4b0d      	ldr	r3, [pc, #52]	; (800bbd0 <prvCheckTasksWaitingTermination+0x54>)
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	3b01      	subs	r3, #1
 800bba0:	4a0b      	ldr	r2, [pc, #44]	; (800bbd0 <prvCheckTasksWaitingTermination+0x54>)
 800bba2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bba4:	4b0b      	ldr	r3, [pc, #44]	; (800bbd4 <prvCheckTasksWaitingTermination+0x58>)
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	3b01      	subs	r3, #1
 800bbaa:	4a0a      	ldr	r2, [pc, #40]	; (800bbd4 <prvCheckTasksWaitingTermination+0x58>)
 800bbac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800bbae:	f000 ff29 	bl	800ca04 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800bbb2:	6878      	ldr	r0, [r7, #4]
 800bbb4:	f000 f810 	bl	800bbd8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bbb8:	4b06      	ldr	r3, [pc, #24]	; (800bbd4 <prvCheckTasksWaitingTermination+0x58>)
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d1e1      	bne.n	800bb84 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800bbc0:	bf00      	nop
 800bbc2:	bf00      	nop
 800bbc4:	3708      	adds	r7, #8
 800bbc6:	46bd      	mov	sp, r7
 800bbc8:	bd80      	pop	{r7, pc}
 800bbca:	bf00      	nop
 800bbcc:	20001598 	.word	0x20001598
 800bbd0:	200015c4 	.word	0x200015c4
 800bbd4:	200015ac 	.word	0x200015ac

0800bbd8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800bbd8:	b580      	push	{r7, lr}
 800bbda:	b082      	sub	sp, #8
 800bbdc:	af00      	add	r7, sp, #0
 800bbde:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bbe4:	4618      	mov	r0, r3
 800bbe6:	f001 f8cb 	bl	800cd80 <vPortFree>
			vPortFree( pxTCB );
 800bbea:	6878      	ldr	r0, [r7, #4]
 800bbec:	f001 f8c8 	bl	800cd80 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800bbf0:	bf00      	nop
 800bbf2:	3708      	adds	r7, #8
 800bbf4:	46bd      	mov	sp, r7
 800bbf6:	bd80      	pop	{r7, pc}

0800bbf8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bbf8:	b480      	push	{r7}
 800bbfa:	b083      	sub	sp, #12
 800bbfc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bbfe:	4b0c      	ldr	r3, [pc, #48]	; (800bc30 <prvResetNextTaskUnblockTime+0x38>)
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d104      	bne.n	800bc12 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bc08:	4b0a      	ldr	r3, [pc, #40]	; (800bc34 <prvResetNextTaskUnblockTime+0x3c>)
 800bc0a:	f04f 32ff 	mov.w	r2, #4294967295
 800bc0e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bc10:	e008      	b.n	800bc24 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc12:	4b07      	ldr	r3, [pc, #28]	; (800bc30 <prvResetNextTaskUnblockTime+0x38>)
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	68db      	ldr	r3, [r3, #12]
 800bc18:	68db      	ldr	r3, [r3, #12]
 800bc1a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	685b      	ldr	r3, [r3, #4]
 800bc20:	4a04      	ldr	r2, [pc, #16]	; (800bc34 <prvResetNextTaskUnblockTime+0x3c>)
 800bc22:	6013      	str	r3, [r2, #0]
}
 800bc24:	bf00      	nop
 800bc26:	370c      	adds	r7, #12
 800bc28:	46bd      	mov	sp, r7
 800bc2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc2e:	4770      	bx	lr
 800bc30:	2000157c 	.word	0x2000157c
 800bc34:	200015e4 	.word	0x200015e4

0800bc38 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800bc38:	b480      	push	{r7}
 800bc3a:	b083      	sub	sp, #12
 800bc3c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bc3e:	4b0b      	ldr	r3, [pc, #44]	; (800bc6c <xTaskGetSchedulerState+0x34>)
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d102      	bne.n	800bc4c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bc46:	2301      	movs	r3, #1
 800bc48:	607b      	str	r3, [r7, #4]
 800bc4a:	e008      	b.n	800bc5e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bc4c:	4b08      	ldr	r3, [pc, #32]	; (800bc70 <xTaskGetSchedulerState+0x38>)
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d102      	bne.n	800bc5a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bc54:	2302      	movs	r3, #2
 800bc56:	607b      	str	r3, [r7, #4]
 800bc58:	e001      	b.n	800bc5e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800bc5a:	2300      	movs	r3, #0
 800bc5c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bc5e:	687b      	ldr	r3, [r7, #4]
	}
 800bc60:	4618      	mov	r0, r3
 800bc62:	370c      	adds	r7, #12
 800bc64:	46bd      	mov	sp, r7
 800bc66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc6a:	4770      	bx	lr
 800bc6c:	200015d0 	.word	0x200015d0
 800bc70:	200015ec 	.word	0x200015ec

0800bc74 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800bc74:	b580      	push	{r7, lr}
 800bc76:	b084      	sub	sp, #16
 800bc78:	af00      	add	r7, sp, #0
 800bc7a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800bc80:	2300      	movs	r3, #0
 800bc82:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d05e      	beq.n	800bd48 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800bc8a:	68bb      	ldr	r3, [r7, #8]
 800bc8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc8e:	4b31      	ldr	r3, [pc, #196]	; (800bd54 <xTaskPriorityInherit+0xe0>)
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc94:	429a      	cmp	r2, r3
 800bc96:	d24e      	bcs.n	800bd36 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bc98:	68bb      	ldr	r3, [r7, #8]
 800bc9a:	699b      	ldr	r3, [r3, #24]
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	db06      	blt.n	800bcae <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bca0:	4b2c      	ldr	r3, [pc, #176]	; (800bd54 <xTaskPriorityInherit+0xe0>)
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bca6:	f1c3 0207 	rsb	r2, r3, #7
 800bcaa:	68bb      	ldr	r3, [r7, #8]
 800bcac:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800bcae:	68bb      	ldr	r3, [r7, #8]
 800bcb0:	6959      	ldr	r1, [r3, #20]
 800bcb2:	68bb      	ldr	r3, [r7, #8]
 800bcb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bcb6:	4613      	mov	r3, r2
 800bcb8:	009b      	lsls	r3, r3, #2
 800bcba:	4413      	add	r3, r2
 800bcbc:	009b      	lsls	r3, r3, #2
 800bcbe:	4a26      	ldr	r2, [pc, #152]	; (800bd58 <xTaskPriorityInherit+0xe4>)
 800bcc0:	4413      	add	r3, r2
 800bcc2:	4299      	cmp	r1, r3
 800bcc4:	d12f      	bne.n	800bd26 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bcc6:	68bb      	ldr	r3, [r7, #8]
 800bcc8:	3304      	adds	r3, #4
 800bcca:	4618      	mov	r0, r3
 800bccc:	f7fe f98c 	bl	8009fe8 <uxListRemove>
 800bcd0:	4603      	mov	r3, r0
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d10a      	bne.n	800bcec <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800bcd6:	68bb      	ldr	r3, [r7, #8]
 800bcd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcda:	2201      	movs	r2, #1
 800bcdc:	fa02 f303 	lsl.w	r3, r2, r3
 800bce0:	43da      	mvns	r2, r3
 800bce2:	4b1e      	ldr	r3, [pc, #120]	; (800bd5c <xTaskPriorityInherit+0xe8>)
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	4013      	ands	r3, r2
 800bce8:	4a1c      	ldr	r2, [pc, #112]	; (800bd5c <xTaskPriorityInherit+0xe8>)
 800bcea:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bcec:	4b19      	ldr	r3, [pc, #100]	; (800bd54 <xTaskPriorityInherit+0xe0>)
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bcf2:	68bb      	ldr	r3, [r7, #8]
 800bcf4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800bcf6:	68bb      	ldr	r3, [r7, #8]
 800bcf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcfa:	2201      	movs	r2, #1
 800bcfc:	409a      	lsls	r2, r3
 800bcfe:	4b17      	ldr	r3, [pc, #92]	; (800bd5c <xTaskPriorityInherit+0xe8>)
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	4313      	orrs	r3, r2
 800bd04:	4a15      	ldr	r2, [pc, #84]	; (800bd5c <xTaskPriorityInherit+0xe8>)
 800bd06:	6013      	str	r3, [r2, #0]
 800bd08:	68bb      	ldr	r3, [r7, #8]
 800bd0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd0c:	4613      	mov	r3, r2
 800bd0e:	009b      	lsls	r3, r3, #2
 800bd10:	4413      	add	r3, r2
 800bd12:	009b      	lsls	r3, r3, #2
 800bd14:	4a10      	ldr	r2, [pc, #64]	; (800bd58 <xTaskPriorityInherit+0xe4>)
 800bd16:	441a      	add	r2, r3
 800bd18:	68bb      	ldr	r3, [r7, #8]
 800bd1a:	3304      	adds	r3, #4
 800bd1c:	4619      	mov	r1, r3
 800bd1e:	4610      	mov	r0, r2
 800bd20:	f7fe f905 	bl	8009f2e <vListInsertEnd>
 800bd24:	e004      	b.n	800bd30 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bd26:	4b0b      	ldr	r3, [pc, #44]	; (800bd54 <xTaskPriorityInherit+0xe0>)
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd2c:	68bb      	ldr	r3, [r7, #8]
 800bd2e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800bd30:	2301      	movs	r3, #1
 800bd32:	60fb      	str	r3, [r7, #12]
 800bd34:	e008      	b.n	800bd48 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800bd36:	68bb      	ldr	r3, [r7, #8]
 800bd38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bd3a:	4b06      	ldr	r3, [pc, #24]	; (800bd54 <xTaskPriorityInherit+0xe0>)
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd40:	429a      	cmp	r2, r3
 800bd42:	d201      	bcs.n	800bd48 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800bd44:	2301      	movs	r3, #1
 800bd46:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bd48:	68fb      	ldr	r3, [r7, #12]
	}
 800bd4a:	4618      	mov	r0, r3
 800bd4c:	3710      	adds	r7, #16
 800bd4e:	46bd      	mov	sp, r7
 800bd50:	bd80      	pop	{r7, pc}
 800bd52:	bf00      	nop
 800bd54:	200014c4 	.word	0x200014c4
 800bd58:	200014c8 	.word	0x200014c8
 800bd5c:	200015cc 	.word	0x200015cc

0800bd60 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800bd60:	b580      	push	{r7, lr}
 800bd62:	b086      	sub	sp, #24
 800bd64:	af00      	add	r7, sp, #0
 800bd66:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800bd6c:	2300      	movs	r3, #0
 800bd6e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d06e      	beq.n	800be54 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800bd76:	4b3a      	ldr	r3, [pc, #232]	; (800be60 <xTaskPriorityDisinherit+0x100>)
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	693a      	ldr	r2, [r7, #16]
 800bd7c:	429a      	cmp	r2, r3
 800bd7e:	d00a      	beq.n	800bd96 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800bd80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd84:	f383 8811 	msr	BASEPRI, r3
 800bd88:	f3bf 8f6f 	isb	sy
 800bd8c:	f3bf 8f4f 	dsb	sy
 800bd90:	60fb      	str	r3, [r7, #12]
}
 800bd92:	bf00      	nop
 800bd94:	e7fe      	b.n	800bd94 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800bd96:	693b      	ldr	r3, [r7, #16]
 800bd98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d10a      	bne.n	800bdb4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800bd9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bda2:	f383 8811 	msr	BASEPRI, r3
 800bda6:	f3bf 8f6f 	isb	sy
 800bdaa:	f3bf 8f4f 	dsb	sy
 800bdae:	60bb      	str	r3, [r7, #8]
}
 800bdb0:	bf00      	nop
 800bdb2:	e7fe      	b.n	800bdb2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800bdb4:	693b      	ldr	r3, [r7, #16]
 800bdb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bdb8:	1e5a      	subs	r2, r3, #1
 800bdba:	693b      	ldr	r3, [r7, #16]
 800bdbc:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bdbe:	693b      	ldr	r3, [r7, #16]
 800bdc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bdc2:	693b      	ldr	r3, [r7, #16]
 800bdc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bdc6:	429a      	cmp	r2, r3
 800bdc8:	d044      	beq.n	800be54 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800bdca:	693b      	ldr	r3, [r7, #16]
 800bdcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d140      	bne.n	800be54 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bdd2:	693b      	ldr	r3, [r7, #16]
 800bdd4:	3304      	adds	r3, #4
 800bdd6:	4618      	mov	r0, r3
 800bdd8:	f7fe f906 	bl	8009fe8 <uxListRemove>
 800bddc:	4603      	mov	r3, r0
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d115      	bne.n	800be0e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800bde2:	693b      	ldr	r3, [r7, #16]
 800bde4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bde6:	491f      	ldr	r1, [pc, #124]	; (800be64 <xTaskPriorityDisinherit+0x104>)
 800bde8:	4613      	mov	r3, r2
 800bdea:	009b      	lsls	r3, r3, #2
 800bdec:	4413      	add	r3, r2
 800bdee:	009b      	lsls	r3, r3, #2
 800bdf0:	440b      	add	r3, r1
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d10a      	bne.n	800be0e <xTaskPriorityDisinherit+0xae>
 800bdf8:	693b      	ldr	r3, [r7, #16]
 800bdfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdfc:	2201      	movs	r2, #1
 800bdfe:	fa02 f303 	lsl.w	r3, r2, r3
 800be02:	43da      	mvns	r2, r3
 800be04:	4b18      	ldr	r3, [pc, #96]	; (800be68 <xTaskPriorityDisinherit+0x108>)
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	4013      	ands	r3, r2
 800be0a:	4a17      	ldr	r2, [pc, #92]	; (800be68 <xTaskPriorityDisinherit+0x108>)
 800be0c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800be0e:	693b      	ldr	r3, [r7, #16]
 800be10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800be12:	693b      	ldr	r3, [r7, #16]
 800be14:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800be16:	693b      	ldr	r3, [r7, #16]
 800be18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be1a:	f1c3 0207 	rsb	r2, r3, #7
 800be1e:	693b      	ldr	r3, [r7, #16]
 800be20:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800be22:	693b      	ldr	r3, [r7, #16]
 800be24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be26:	2201      	movs	r2, #1
 800be28:	409a      	lsls	r2, r3
 800be2a:	4b0f      	ldr	r3, [pc, #60]	; (800be68 <xTaskPriorityDisinherit+0x108>)
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	4313      	orrs	r3, r2
 800be30:	4a0d      	ldr	r2, [pc, #52]	; (800be68 <xTaskPriorityDisinherit+0x108>)
 800be32:	6013      	str	r3, [r2, #0]
 800be34:	693b      	ldr	r3, [r7, #16]
 800be36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be38:	4613      	mov	r3, r2
 800be3a:	009b      	lsls	r3, r3, #2
 800be3c:	4413      	add	r3, r2
 800be3e:	009b      	lsls	r3, r3, #2
 800be40:	4a08      	ldr	r2, [pc, #32]	; (800be64 <xTaskPriorityDisinherit+0x104>)
 800be42:	441a      	add	r2, r3
 800be44:	693b      	ldr	r3, [r7, #16]
 800be46:	3304      	adds	r3, #4
 800be48:	4619      	mov	r1, r3
 800be4a:	4610      	mov	r0, r2
 800be4c:	f7fe f86f 	bl	8009f2e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800be50:	2301      	movs	r3, #1
 800be52:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800be54:	697b      	ldr	r3, [r7, #20]
	}
 800be56:	4618      	mov	r0, r3
 800be58:	3718      	adds	r7, #24
 800be5a:	46bd      	mov	sp, r7
 800be5c:	bd80      	pop	{r7, pc}
 800be5e:	bf00      	nop
 800be60:	200014c4 	.word	0x200014c4
 800be64:	200014c8 	.word	0x200014c8
 800be68:	200015cc 	.word	0x200015cc

0800be6c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800be6c:	b580      	push	{r7, lr}
 800be6e:	b088      	sub	sp, #32
 800be70:	af00      	add	r7, sp, #0
 800be72:	6078      	str	r0, [r7, #4]
 800be74:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800be7a:	2301      	movs	r3, #1
 800be7c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	2b00      	cmp	r3, #0
 800be82:	d077      	beq.n	800bf74 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800be84:	69bb      	ldr	r3, [r7, #24]
 800be86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d10a      	bne.n	800bea2 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800be8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be90:	f383 8811 	msr	BASEPRI, r3
 800be94:	f3bf 8f6f 	isb	sy
 800be98:	f3bf 8f4f 	dsb	sy
 800be9c:	60fb      	str	r3, [r7, #12]
}
 800be9e:	bf00      	nop
 800bea0:	e7fe      	b.n	800bea0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800bea2:	69bb      	ldr	r3, [r7, #24]
 800bea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bea6:	683a      	ldr	r2, [r7, #0]
 800bea8:	429a      	cmp	r2, r3
 800beaa:	d902      	bls.n	800beb2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800beac:	683b      	ldr	r3, [r7, #0]
 800beae:	61fb      	str	r3, [r7, #28]
 800beb0:	e002      	b.n	800beb8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800beb2:	69bb      	ldr	r3, [r7, #24]
 800beb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800beb6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800beb8:	69bb      	ldr	r3, [r7, #24]
 800beba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bebc:	69fa      	ldr	r2, [r7, #28]
 800bebe:	429a      	cmp	r2, r3
 800bec0:	d058      	beq.n	800bf74 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800bec2:	69bb      	ldr	r3, [r7, #24]
 800bec4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bec6:	697a      	ldr	r2, [r7, #20]
 800bec8:	429a      	cmp	r2, r3
 800beca:	d153      	bne.n	800bf74 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800becc:	4b2b      	ldr	r3, [pc, #172]	; (800bf7c <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	69ba      	ldr	r2, [r7, #24]
 800bed2:	429a      	cmp	r2, r3
 800bed4:	d10a      	bne.n	800beec <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800bed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800beda:	f383 8811 	msr	BASEPRI, r3
 800bede:	f3bf 8f6f 	isb	sy
 800bee2:	f3bf 8f4f 	dsb	sy
 800bee6:	60bb      	str	r3, [r7, #8]
}
 800bee8:	bf00      	nop
 800beea:	e7fe      	b.n	800beea <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800beec:	69bb      	ldr	r3, [r7, #24]
 800beee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bef0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800bef2:	69bb      	ldr	r3, [r7, #24]
 800bef4:	69fa      	ldr	r2, [r7, #28]
 800bef6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bef8:	69bb      	ldr	r3, [r7, #24]
 800befa:	699b      	ldr	r3, [r3, #24]
 800befc:	2b00      	cmp	r3, #0
 800befe:	db04      	blt.n	800bf0a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bf00:	69fb      	ldr	r3, [r7, #28]
 800bf02:	f1c3 0207 	rsb	r2, r3, #7
 800bf06:	69bb      	ldr	r3, [r7, #24]
 800bf08:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800bf0a:	69bb      	ldr	r3, [r7, #24]
 800bf0c:	6959      	ldr	r1, [r3, #20]
 800bf0e:	693a      	ldr	r2, [r7, #16]
 800bf10:	4613      	mov	r3, r2
 800bf12:	009b      	lsls	r3, r3, #2
 800bf14:	4413      	add	r3, r2
 800bf16:	009b      	lsls	r3, r3, #2
 800bf18:	4a19      	ldr	r2, [pc, #100]	; (800bf80 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800bf1a:	4413      	add	r3, r2
 800bf1c:	4299      	cmp	r1, r3
 800bf1e:	d129      	bne.n	800bf74 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bf20:	69bb      	ldr	r3, [r7, #24]
 800bf22:	3304      	adds	r3, #4
 800bf24:	4618      	mov	r0, r3
 800bf26:	f7fe f85f 	bl	8009fe8 <uxListRemove>
 800bf2a:	4603      	mov	r3, r0
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d10a      	bne.n	800bf46 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800bf30:	69bb      	ldr	r3, [r7, #24]
 800bf32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf34:	2201      	movs	r2, #1
 800bf36:	fa02 f303 	lsl.w	r3, r2, r3
 800bf3a:	43da      	mvns	r2, r3
 800bf3c:	4b11      	ldr	r3, [pc, #68]	; (800bf84 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	4013      	ands	r3, r2
 800bf42:	4a10      	ldr	r2, [pc, #64]	; (800bf84 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800bf44:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800bf46:	69bb      	ldr	r3, [r7, #24]
 800bf48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf4a:	2201      	movs	r2, #1
 800bf4c:	409a      	lsls	r2, r3
 800bf4e:	4b0d      	ldr	r3, [pc, #52]	; (800bf84 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	4313      	orrs	r3, r2
 800bf54:	4a0b      	ldr	r2, [pc, #44]	; (800bf84 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800bf56:	6013      	str	r3, [r2, #0]
 800bf58:	69bb      	ldr	r3, [r7, #24]
 800bf5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf5c:	4613      	mov	r3, r2
 800bf5e:	009b      	lsls	r3, r3, #2
 800bf60:	4413      	add	r3, r2
 800bf62:	009b      	lsls	r3, r3, #2
 800bf64:	4a06      	ldr	r2, [pc, #24]	; (800bf80 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800bf66:	441a      	add	r2, r3
 800bf68:	69bb      	ldr	r3, [r7, #24]
 800bf6a:	3304      	adds	r3, #4
 800bf6c:	4619      	mov	r1, r3
 800bf6e:	4610      	mov	r0, r2
 800bf70:	f7fd ffdd 	bl	8009f2e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bf74:	bf00      	nop
 800bf76:	3720      	adds	r7, #32
 800bf78:	46bd      	mov	sp, r7
 800bf7a:	bd80      	pop	{r7, pc}
 800bf7c:	200014c4 	.word	0x200014c4
 800bf80:	200014c8 	.word	0x200014c8
 800bf84:	200015cc 	.word	0x200015cc

0800bf88 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 800bf88:	b480      	push	{r7}
 800bf8a:	b083      	sub	sp, #12
 800bf8c:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800bf8e:	4b09      	ldr	r3, [pc, #36]	; (800bfb4 <uxTaskResetEventItemValue+0x2c>)
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	699b      	ldr	r3, [r3, #24]
 800bf94:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bf96:	4b07      	ldr	r3, [pc, #28]	; (800bfb4 <uxTaskResetEventItemValue+0x2c>)
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf9c:	4b05      	ldr	r3, [pc, #20]	; (800bfb4 <uxTaskResetEventItemValue+0x2c>)
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	f1c2 0207 	rsb	r2, r2, #7
 800bfa4:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800bfa6:	687b      	ldr	r3, [r7, #4]
}
 800bfa8:	4618      	mov	r0, r3
 800bfaa:	370c      	adds	r7, #12
 800bfac:	46bd      	mov	sp, r7
 800bfae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb2:	4770      	bx	lr
 800bfb4:	200014c4 	.word	0x200014c4

0800bfb8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800bfb8:	b480      	push	{r7}
 800bfba:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800bfbc:	4b07      	ldr	r3, [pc, #28]	; (800bfdc <pvTaskIncrementMutexHeldCount+0x24>)
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d004      	beq.n	800bfce <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800bfc4:	4b05      	ldr	r3, [pc, #20]	; (800bfdc <pvTaskIncrementMutexHeldCount+0x24>)
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bfca:	3201      	adds	r2, #1
 800bfcc:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800bfce:	4b03      	ldr	r3, [pc, #12]	; (800bfdc <pvTaskIncrementMutexHeldCount+0x24>)
 800bfd0:	681b      	ldr	r3, [r3, #0]
	}
 800bfd2:	4618      	mov	r0, r3
 800bfd4:	46bd      	mov	sp, r7
 800bfd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfda:	4770      	bx	lr
 800bfdc:	200014c4 	.word	0x200014c4

0800bfe0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bfe0:	b580      	push	{r7, lr}
 800bfe2:	b084      	sub	sp, #16
 800bfe4:	af00      	add	r7, sp, #0
 800bfe6:	6078      	str	r0, [r7, #4]
 800bfe8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bfea:	4b29      	ldr	r3, [pc, #164]	; (800c090 <prvAddCurrentTaskToDelayedList+0xb0>)
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bff0:	4b28      	ldr	r3, [pc, #160]	; (800c094 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	3304      	adds	r3, #4
 800bff6:	4618      	mov	r0, r3
 800bff8:	f7fd fff6 	bl	8009fe8 <uxListRemove>
 800bffc:	4603      	mov	r3, r0
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d10b      	bne.n	800c01a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800c002:	4b24      	ldr	r3, [pc, #144]	; (800c094 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c008:	2201      	movs	r2, #1
 800c00a:	fa02 f303 	lsl.w	r3, r2, r3
 800c00e:	43da      	mvns	r2, r3
 800c010:	4b21      	ldr	r3, [pc, #132]	; (800c098 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	4013      	ands	r3, r2
 800c016:	4a20      	ldr	r2, [pc, #128]	; (800c098 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c018:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c020:	d10a      	bne.n	800c038 <prvAddCurrentTaskToDelayedList+0x58>
 800c022:	683b      	ldr	r3, [r7, #0]
 800c024:	2b00      	cmp	r3, #0
 800c026:	d007      	beq.n	800c038 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c028:	4b1a      	ldr	r3, [pc, #104]	; (800c094 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	3304      	adds	r3, #4
 800c02e:	4619      	mov	r1, r3
 800c030:	481a      	ldr	r0, [pc, #104]	; (800c09c <prvAddCurrentTaskToDelayedList+0xbc>)
 800c032:	f7fd ff7c 	bl	8009f2e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c036:	e026      	b.n	800c086 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c038:	68fa      	ldr	r2, [r7, #12]
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	4413      	add	r3, r2
 800c03e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c040:	4b14      	ldr	r3, [pc, #80]	; (800c094 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	68ba      	ldr	r2, [r7, #8]
 800c046:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c048:	68ba      	ldr	r2, [r7, #8]
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	429a      	cmp	r2, r3
 800c04e:	d209      	bcs.n	800c064 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c050:	4b13      	ldr	r3, [pc, #76]	; (800c0a0 <prvAddCurrentTaskToDelayedList+0xc0>)
 800c052:	681a      	ldr	r2, [r3, #0]
 800c054:	4b0f      	ldr	r3, [pc, #60]	; (800c094 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	3304      	adds	r3, #4
 800c05a:	4619      	mov	r1, r3
 800c05c:	4610      	mov	r0, r2
 800c05e:	f7fd ff8a 	bl	8009f76 <vListInsert>
}
 800c062:	e010      	b.n	800c086 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c064:	4b0f      	ldr	r3, [pc, #60]	; (800c0a4 <prvAddCurrentTaskToDelayedList+0xc4>)
 800c066:	681a      	ldr	r2, [r3, #0]
 800c068:	4b0a      	ldr	r3, [pc, #40]	; (800c094 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	3304      	adds	r3, #4
 800c06e:	4619      	mov	r1, r3
 800c070:	4610      	mov	r0, r2
 800c072:	f7fd ff80 	bl	8009f76 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c076:	4b0c      	ldr	r3, [pc, #48]	; (800c0a8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	68ba      	ldr	r2, [r7, #8]
 800c07c:	429a      	cmp	r2, r3
 800c07e:	d202      	bcs.n	800c086 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800c080:	4a09      	ldr	r2, [pc, #36]	; (800c0a8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c082:	68bb      	ldr	r3, [r7, #8]
 800c084:	6013      	str	r3, [r2, #0]
}
 800c086:	bf00      	nop
 800c088:	3710      	adds	r7, #16
 800c08a:	46bd      	mov	sp, r7
 800c08c:	bd80      	pop	{r7, pc}
 800c08e:	bf00      	nop
 800c090:	200015c8 	.word	0x200015c8
 800c094:	200014c4 	.word	0x200014c4
 800c098:	200015cc 	.word	0x200015cc
 800c09c:	200015b0 	.word	0x200015b0
 800c0a0:	20001580 	.word	0x20001580
 800c0a4:	2000157c 	.word	0x2000157c
 800c0a8:	200015e4 	.word	0x200015e4

0800c0ac <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c0ac:	b580      	push	{r7, lr}
 800c0ae:	b084      	sub	sp, #16
 800c0b0:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 800c0b2:	2300      	movs	r3, #0
 800c0b4:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c0b6:	f000 faf1 	bl	800c69c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c0ba:	4b11      	ldr	r3, [pc, #68]	; (800c100 <xTimerCreateTimerTask+0x54>)
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d00a      	beq.n	800c0d8 <xTimerCreateTimerTask+0x2c>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 800c0c2:	4b10      	ldr	r3, [pc, #64]	; (800c104 <xTimerCreateTimerTask+0x58>)
 800c0c4:	9301      	str	r3, [sp, #4]
 800c0c6:	2306      	movs	r3, #6
 800c0c8:	9300      	str	r3, [sp, #0]
 800c0ca:	2300      	movs	r3, #0
 800c0cc:	2280      	movs	r2, #128	; 0x80
 800c0ce:	490e      	ldr	r1, [pc, #56]	; (800c108 <xTimerCreateTimerTask+0x5c>)
 800c0d0:	480e      	ldr	r0, [pc, #56]	; (800c10c <xTimerCreateTimerTask+0x60>)
 800c0d2:	f7fe ff03 	bl	800aedc <xTaskCreate>
 800c0d6:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d10a      	bne.n	800c0f4 <xTimerCreateTimerTask+0x48>
	__asm volatile
 800c0de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0e2:	f383 8811 	msr	BASEPRI, r3
 800c0e6:	f3bf 8f6f 	isb	sy
 800c0ea:	f3bf 8f4f 	dsb	sy
 800c0ee:	603b      	str	r3, [r7, #0]
}
 800c0f0:	bf00      	nop
 800c0f2:	e7fe      	b.n	800c0f2 <xTimerCreateTimerTask+0x46>
	return xReturn;
 800c0f4:	687b      	ldr	r3, [r7, #4]
}
 800c0f6:	4618      	mov	r0, r3
 800c0f8:	3708      	adds	r7, #8
 800c0fa:	46bd      	mov	sp, r7
 800c0fc:	bd80      	pop	{r7, pc}
 800c0fe:	bf00      	nop
 800c100:	20001620 	.word	0x20001620
 800c104:	20001624 	.word	0x20001624
 800c108:	0801dae8 	.word	0x0801dae8
 800c10c:	0800c245 	.word	0x0800c245

0800c110 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c110:	b580      	push	{r7, lr}
 800c112:	b08a      	sub	sp, #40	; 0x28
 800c114:	af00      	add	r7, sp, #0
 800c116:	60f8      	str	r0, [r7, #12]
 800c118:	60b9      	str	r1, [r7, #8]
 800c11a:	607a      	str	r2, [r7, #4]
 800c11c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c11e:	2300      	movs	r3, #0
 800c120:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	2b00      	cmp	r3, #0
 800c126:	d10a      	bne.n	800c13e <xTimerGenericCommand+0x2e>
	__asm volatile
 800c128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c12c:	f383 8811 	msr	BASEPRI, r3
 800c130:	f3bf 8f6f 	isb	sy
 800c134:	f3bf 8f4f 	dsb	sy
 800c138:	623b      	str	r3, [r7, #32]
}
 800c13a:	bf00      	nop
 800c13c:	e7fe      	b.n	800c13c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c13e:	4b1a      	ldr	r3, [pc, #104]	; (800c1a8 <xTimerGenericCommand+0x98>)
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	2b00      	cmp	r3, #0
 800c144:	d02a      	beq.n	800c19c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c146:	68bb      	ldr	r3, [r7, #8]
 800c148:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c152:	68bb      	ldr	r3, [r7, #8]
 800c154:	2b05      	cmp	r3, #5
 800c156:	dc18      	bgt.n	800c18a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c158:	f7ff fd6e 	bl	800bc38 <xTaskGetSchedulerState>
 800c15c:	4603      	mov	r3, r0
 800c15e:	2b02      	cmp	r3, #2
 800c160:	d109      	bne.n	800c176 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c162:	4b11      	ldr	r3, [pc, #68]	; (800c1a8 <xTimerGenericCommand+0x98>)
 800c164:	6818      	ldr	r0, [r3, #0]
 800c166:	f107 0110 	add.w	r1, r7, #16
 800c16a:	2300      	movs	r3, #0
 800c16c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c16e:	f7fe f855 	bl	800a21c <xQueueGenericSend>
 800c172:	6278      	str	r0, [r7, #36]	; 0x24
 800c174:	e012      	b.n	800c19c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c176:	4b0c      	ldr	r3, [pc, #48]	; (800c1a8 <xTimerGenericCommand+0x98>)
 800c178:	6818      	ldr	r0, [r3, #0]
 800c17a:	f107 0110 	add.w	r1, r7, #16
 800c17e:	2300      	movs	r3, #0
 800c180:	2200      	movs	r2, #0
 800c182:	f7fe f84b 	bl	800a21c <xQueueGenericSend>
 800c186:	6278      	str	r0, [r7, #36]	; 0x24
 800c188:	e008      	b.n	800c19c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c18a:	4b07      	ldr	r3, [pc, #28]	; (800c1a8 <xTimerGenericCommand+0x98>)
 800c18c:	6818      	ldr	r0, [r3, #0]
 800c18e:	f107 0110 	add.w	r1, r7, #16
 800c192:	2300      	movs	r3, #0
 800c194:	683a      	ldr	r2, [r7, #0]
 800c196:	f7fe f93f 	bl	800a418 <xQueueGenericSendFromISR>
 800c19a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c19c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c19e:	4618      	mov	r0, r3
 800c1a0:	3728      	adds	r7, #40	; 0x28
 800c1a2:	46bd      	mov	sp, r7
 800c1a4:	bd80      	pop	{r7, pc}
 800c1a6:	bf00      	nop
 800c1a8:	20001620 	.word	0x20001620

0800c1ac <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c1ac:	b580      	push	{r7, lr}
 800c1ae:	b088      	sub	sp, #32
 800c1b0:	af02      	add	r7, sp, #8
 800c1b2:	6078      	str	r0, [r7, #4]
 800c1b4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c1b6:	4b22      	ldr	r3, [pc, #136]	; (800c240 <prvProcessExpiredTimer+0x94>)
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	68db      	ldr	r3, [r3, #12]
 800c1bc:	68db      	ldr	r3, [r3, #12]
 800c1be:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c1c0:	697b      	ldr	r3, [r7, #20]
 800c1c2:	3304      	adds	r3, #4
 800c1c4:	4618      	mov	r0, r3
 800c1c6:	f7fd ff0f 	bl	8009fe8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c1ca:	697b      	ldr	r3, [r7, #20]
 800c1cc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c1d0:	f003 0304 	and.w	r3, r3, #4
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d022      	beq.n	800c21e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c1d8:	697b      	ldr	r3, [r7, #20]
 800c1da:	699a      	ldr	r2, [r3, #24]
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	18d1      	adds	r1, r2, r3
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	683a      	ldr	r2, [r7, #0]
 800c1e4:	6978      	ldr	r0, [r7, #20]
 800c1e6:	f000 f8d1 	bl	800c38c <prvInsertTimerInActiveList>
 800c1ea:	4603      	mov	r3, r0
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d01f      	beq.n	800c230 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c1f0:	2300      	movs	r3, #0
 800c1f2:	9300      	str	r3, [sp, #0]
 800c1f4:	2300      	movs	r3, #0
 800c1f6:	687a      	ldr	r2, [r7, #4]
 800c1f8:	2100      	movs	r1, #0
 800c1fa:	6978      	ldr	r0, [r7, #20]
 800c1fc:	f7ff ff88 	bl	800c110 <xTimerGenericCommand>
 800c200:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c202:	693b      	ldr	r3, [r7, #16]
 800c204:	2b00      	cmp	r3, #0
 800c206:	d113      	bne.n	800c230 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800c208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c20c:	f383 8811 	msr	BASEPRI, r3
 800c210:	f3bf 8f6f 	isb	sy
 800c214:	f3bf 8f4f 	dsb	sy
 800c218:	60fb      	str	r3, [r7, #12]
}
 800c21a:	bf00      	nop
 800c21c:	e7fe      	b.n	800c21c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c21e:	697b      	ldr	r3, [r7, #20]
 800c220:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c224:	f023 0301 	bic.w	r3, r3, #1
 800c228:	b2da      	uxtb	r2, r3
 800c22a:	697b      	ldr	r3, [r7, #20]
 800c22c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c230:	697b      	ldr	r3, [r7, #20]
 800c232:	6a1b      	ldr	r3, [r3, #32]
 800c234:	6978      	ldr	r0, [r7, #20]
 800c236:	4798      	blx	r3
}
 800c238:	bf00      	nop
 800c23a:	3718      	adds	r7, #24
 800c23c:	46bd      	mov	sp, r7
 800c23e:	bd80      	pop	{r7, pc}
 800c240:	20001618 	.word	0x20001618

0800c244 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c244:	b580      	push	{r7, lr}
 800c246:	b084      	sub	sp, #16
 800c248:	af00      	add	r7, sp, #0
 800c24a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c24c:	f107 0308 	add.w	r3, r7, #8
 800c250:	4618      	mov	r0, r3
 800c252:	f000 f857 	bl	800c304 <prvGetNextExpireTime>
 800c256:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c258:	68bb      	ldr	r3, [r7, #8]
 800c25a:	4619      	mov	r1, r3
 800c25c:	68f8      	ldr	r0, [r7, #12]
 800c25e:	f000 f803 	bl	800c268 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c262:	f000 f8d5 	bl	800c410 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c266:	e7f1      	b.n	800c24c <prvTimerTask+0x8>

0800c268 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c268:	b580      	push	{r7, lr}
 800c26a:	b084      	sub	sp, #16
 800c26c:	af00      	add	r7, sp, #0
 800c26e:	6078      	str	r0, [r7, #4]
 800c270:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c272:	f7ff f877 	bl	800b364 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c276:	f107 0308 	add.w	r3, r7, #8
 800c27a:	4618      	mov	r0, r3
 800c27c:	f000 f866 	bl	800c34c <prvSampleTimeNow>
 800c280:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c282:	68bb      	ldr	r3, [r7, #8]
 800c284:	2b00      	cmp	r3, #0
 800c286:	d130      	bne.n	800c2ea <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c288:	683b      	ldr	r3, [r7, #0]
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d10a      	bne.n	800c2a4 <prvProcessTimerOrBlockTask+0x3c>
 800c28e:	687a      	ldr	r2, [r7, #4]
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	429a      	cmp	r2, r3
 800c294:	d806      	bhi.n	800c2a4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c296:	f7ff f873 	bl	800b380 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c29a:	68f9      	ldr	r1, [r7, #12]
 800c29c:	6878      	ldr	r0, [r7, #4]
 800c29e:	f7ff ff85 	bl	800c1ac <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c2a2:	e024      	b.n	800c2ee <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c2a4:	683b      	ldr	r3, [r7, #0]
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d008      	beq.n	800c2bc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c2aa:	4b13      	ldr	r3, [pc, #76]	; (800c2f8 <prvProcessTimerOrBlockTask+0x90>)
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d101      	bne.n	800c2b8 <prvProcessTimerOrBlockTask+0x50>
 800c2b4:	2301      	movs	r3, #1
 800c2b6:	e000      	b.n	800c2ba <prvProcessTimerOrBlockTask+0x52>
 800c2b8:	2300      	movs	r3, #0
 800c2ba:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c2bc:	4b0f      	ldr	r3, [pc, #60]	; (800c2fc <prvProcessTimerOrBlockTask+0x94>)
 800c2be:	6818      	ldr	r0, [r3, #0]
 800c2c0:	687a      	ldr	r2, [r7, #4]
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	1ad3      	subs	r3, r2, r3
 800c2c6:	683a      	ldr	r2, [r7, #0]
 800c2c8:	4619      	mov	r1, r3
 800c2ca:	f7fe fdd3 	bl	800ae74 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c2ce:	f7ff f857 	bl	800b380 <xTaskResumeAll>
 800c2d2:	4603      	mov	r3, r0
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d10a      	bne.n	800c2ee <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c2d8:	4b09      	ldr	r3, [pc, #36]	; (800c300 <prvProcessTimerOrBlockTask+0x98>)
 800c2da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c2de:	601a      	str	r2, [r3, #0]
 800c2e0:	f3bf 8f4f 	dsb	sy
 800c2e4:	f3bf 8f6f 	isb	sy
}
 800c2e8:	e001      	b.n	800c2ee <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c2ea:	f7ff f849 	bl	800b380 <xTaskResumeAll>
}
 800c2ee:	bf00      	nop
 800c2f0:	3710      	adds	r7, #16
 800c2f2:	46bd      	mov	sp, r7
 800c2f4:	bd80      	pop	{r7, pc}
 800c2f6:	bf00      	nop
 800c2f8:	2000161c 	.word	0x2000161c
 800c2fc:	20001620 	.word	0x20001620
 800c300:	e000ed04 	.word	0xe000ed04

0800c304 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c304:	b480      	push	{r7}
 800c306:	b085      	sub	sp, #20
 800c308:	af00      	add	r7, sp, #0
 800c30a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c30c:	4b0e      	ldr	r3, [pc, #56]	; (800c348 <prvGetNextExpireTime+0x44>)
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	2b00      	cmp	r3, #0
 800c314:	d101      	bne.n	800c31a <prvGetNextExpireTime+0x16>
 800c316:	2201      	movs	r2, #1
 800c318:	e000      	b.n	800c31c <prvGetNextExpireTime+0x18>
 800c31a:	2200      	movs	r2, #0
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	2b00      	cmp	r3, #0
 800c326:	d105      	bne.n	800c334 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c328:	4b07      	ldr	r3, [pc, #28]	; (800c348 <prvGetNextExpireTime+0x44>)
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	68db      	ldr	r3, [r3, #12]
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	60fb      	str	r3, [r7, #12]
 800c332:	e001      	b.n	800c338 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c334:	2300      	movs	r3, #0
 800c336:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c338:	68fb      	ldr	r3, [r7, #12]
}
 800c33a:	4618      	mov	r0, r3
 800c33c:	3714      	adds	r7, #20
 800c33e:	46bd      	mov	sp, r7
 800c340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c344:	4770      	bx	lr
 800c346:	bf00      	nop
 800c348:	20001618 	.word	0x20001618

0800c34c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c34c:	b580      	push	{r7, lr}
 800c34e:	b084      	sub	sp, #16
 800c350:	af00      	add	r7, sp, #0
 800c352:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c354:	f7ff f8b0 	bl	800b4b8 <xTaskGetTickCount>
 800c358:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c35a:	4b0b      	ldr	r3, [pc, #44]	; (800c388 <prvSampleTimeNow+0x3c>)
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	68fa      	ldr	r2, [r7, #12]
 800c360:	429a      	cmp	r2, r3
 800c362:	d205      	bcs.n	800c370 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c364:	f000 f936 	bl	800c5d4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	2201      	movs	r2, #1
 800c36c:	601a      	str	r2, [r3, #0]
 800c36e:	e002      	b.n	800c376 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	2200      	movs	r2, #0
 800c374:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c376:	4a04      	ldr	r2, [pc, #16]	; (800c388 <prvSampleTimeNow+0x3c>)
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c37c:	68fb      	ldr	r3, [r7, #12]
}
 800c37e:	4618      	mov	r0, r3
 800c380:	3710      	adds	r7, #16
 800c382:	46bd      	mov	sp, r7
 800c384:	bd80      	pop	{r7, pc}
 800c386:	bf00      	nop
 800c388:	20001628 	.word	0x20001628

0800c38c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c38c:	b580      	push	{r7, lr}
 800c38e:	b086      	sub	sp, #24
 800c390:	af00      	add	r7, sp, #0
 800c392:	60f8      	str	r0, [r7, #12]
 800c394:	60b9      	str	r1, [r7, #8]
 800c396:	607a      	str	r2, [r7, #4]
 800c398:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c39a:	2300      	movs	r3, #0
 800c39c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	68ba      	ldr	r2, [r7, #8]
 800c3a2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	68fa      	ldr	r2, [r7, #12]
 800c3a8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c3aa:	68ba      	ldr	r2, [r7, #8]
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	429a      	cmp	r2, r3
 800c3b0:	d812      	bhi.n	800c3d8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c3b2:	687a      	ldr	r2, [r7, #4]
 800c3b4:	683b      	ldr	r3, [r7, #0]
 800c3b6:	1ad2      	subs	r2, r2, r3
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	699b      	ldr	r3, [r3, #24]
 800c3bc:	429a      	cmp	r2, r3
 800c3be:	d302      	bcc.n	800c3c6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c3c0:	2301      	movs	r3, #1
 800c3c2:	617b      	str	r3, [r7, #20]
 800c3c4:	e01b      	b.n	800c3fe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c3c6:	4b10      	ldr	r3, [pc, #64]	; (800c408 <prvInsertTimerInActiveList+0x7c>)
 800c3c8:	681a      	ldr	r2, [r3, #0]
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	3304      	adds	r3, #4
 800c3ce:	4619      	mov	r1, r3
 800c3d0:	4610      	mov	r0, r2
 800c3d2:	f7fd fdd0 	bl	8009f76 <vListInsert>
 800c3d6:	e012      	b.n	800c3fe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c3d8:	687a      	ldr	r2, [r7, #4]
 800c3da:	683b      	ldr	r3, [r7, #0]
 800c3dc:	429a      	cmp	r2, r3
 800c3de:	d206      	bcs.n	800c3ee <prvInsertTimerInActiveList+0x62>
 800c3e0:	68ba      	ldr	r2, [r7, #8]
 800c3e2:	683b      	ldr	r3, [r7, #0]
 800c3e4:	429a      	cmp	r2, r3
 800c3e6:	d302      	bcc.n	800c3ee <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c3e8:	2301      	movs	r3, #1
 800c3ea:	617b      	str	r3, [r7, #20]
 800c3ec:	e007      	b.n	800c3fe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c3ee:	4b07      	ldr	r3, [pc, #28]	; (800c40c <prvInsertTimerInActiveList+0x80>)
 800c3f0:	681a      	ldr	r2, [r3, #0]
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	3304      	adds	r3, #4
 800c3f6:	4619      	mov	r1, r3
 800c3f8:	4610      	mov	r0, r2
 800c3fa:	f7fd fdbc 	bl	8009f76 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c3fe:	697b      	ldr	r3, [r7, #20]
}
 800c400:	4618      	mov	r0, r3
 800c402:	3718      	adds	r7, #24
 800c404:	46bd      	mov	sp, r7
 800c406:	bd80      	pop	{r7, pc}
 800c408:	2000161c 	.word	0x2000161c
 800c40c:	20001618 	.word	0x20001618

0800c410 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c410:	b580      	push	{r7, lr}
 800c412:	b08e      	sub	sp, #56	; 0x38
 800c414:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c416:	e0ca      	b.n	800c5ae <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	da18      	bge.n	800c450 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c41e:	1d3b      	adds	r3, r7, #4
 800c420:	3304      	adds	r3, #4
 800c422:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c426:	2b00      	cmp	r3, #0
 800c428:	d10a      	bne.n	800c440 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800c42a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c42e:	f383 8811 	msr	BASEPRI, r3
 800c432:	f3bf 8f6f 	isb	sy
 800c436:	f3bf 8f4f 	dsb	sy
 800c43a:	61fb      	str	r3, [r7, #28]
}
 800c43c:	bf00      	nop
 800c43e:	e7fe      	b.n	800c43e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c446:	6850      	ldr	r0, [r2, #4]
 800c448:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c44a:	6892      	ldr	r2, [r2, #8]
 800c44c:	4611      	mov	r1, r2
 800c44e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	2b00      	cmp	r3, #0
 800c454:	f2c0 80aa 	blt.w	800c5ac <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c45c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c45e:	695b      	ldr	r3, [r3, #20]
 800c460:	2b00      	cmp	r3, #0
 800c462:	d004      	beq.n	800c46e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c466:	3304      	adds	r3, #4
 800c468:	4618      	mov	r0, r3
 800c46a:	f7fd fdbd 	bl	8009fe8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c46e:	463b      	mov	r3, r7
 800c470:	4618      	mov	r0, r3
 800c472:	f7ff ff6b 	bl	800c34c <prvSampleTimeNow>
 800c476:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	2b09      	cmp	r3, #9
 800c47c:	f200 8097 	bhi.w	800c5ae <prvProcessReceivedCommands+0x19e>
 800c480:	a201      	add	r2, pc, #4	; (adr r2, 800c488 <prvProcessReceivedCommands+0x78>)
 800c482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c486:	bf00      	nop
 800c488:	0800c4b1 	.word	0x0800c4b1
 800c48c:	0800c4b1 	.word	0x0800c4b1
 800c490:	0800c4b1 	.word	0x0800c4b1
 800c494:	0800c525 	.word	0x0800c525
 800c498:	0800c539 	.word	0x0800c539
 800c49c:	0800c583 	.word	0x0800c583
 800c4a0:	0800c4b1 	.word	0x0800c4b1
 800c4a4:	0800c4b1 	.word	0x0800c4b1
 800c4a8:	0800c525 	.word	0x0800c525
 800c4ac:	0800c539 	.word	0x0800c539
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c4b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4b2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c4b6:	f043 0301 	orr.w	r3, r3, #1
 800c4ba:	b2da      	uxtb	r2, r3
 800c4bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c4c2:	68ba      	ldr	r2, [r7, #8]
 800c4c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4c6:	699b      	ldr	r3, [r3, #24]
 800c4c8:	18d1      	adds	r1, r2, r3
 800c4ca:	68bb      	ldr	r3, [r7, #8]
 800c4cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c4ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c4d0:	f7ff ff5c 	bl	800c38c <prvInsertTimerInActiveList>
 800c4d4:	4603      	mov	r3, r0
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d069      	beq.n	800c5ae <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c4da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4dc:	6a1b      	ldr	r3, [r3, #32]
 800c4de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c4e0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c4e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4e4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c4e8:	f003 0304 	and.w	r3, r3, #4
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d05e      	beq.n	800c5ae <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c4f0:	68ba      	ldr	r2, [r7, #8]
 800c4f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4f4:	699b      	ldr	r3, [r3, #24]
 800c4f6:	441a      	add	r2, r3
 800c4f8:	2300      	movs	r3, #0
 800c4fa:	9300      	str	r3, [sp, #0]
 800c4fc:	2300      	movs	r3, #0
 800c4fe:	2100      	movs	r1, #0
 800c500:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c502:	f7ff fe05 	bl	800c110 <xTimerGenericCommand>
 800c506:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c508:	6a3b      	ldr	r3, [r7, #32]
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d14f      	bne.n	800c5ae <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800c50e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c512:	f383 8811 	msr	BASEPRI, r3
 800c516:	f3bf 8f6f 	isb	sy
 800c51a:	f3bf 8f4f 	dsb	sy
 800c51e:	61bb      	str	r3, [r7, #24]
}
 800c520:	bf00      	nop
 800c522:	e7fe      	b.n	800c522 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c526:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c52a:	f023 0301 	bic.w	r3, r3, #1
 800c52e:	b2da      	uxtb	r2, r3
 800c530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c532:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 800c536:	e03a      	b.n	800c5ae <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c53a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c53e:	f043 0301 	orr.w	r3, r3, #1
 800c542:	b2da      	uxtb	r2, r3
 800c544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c546:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c54a:	68ba      	ldr	r2, [r7, #8]
 800c54c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c54e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c552:	699b      	ldr	r3, [r3, #24]
 800c554:	2b00      	cmp	r3, #0
 800c556:	d10a      	bne.n	800c56e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800c558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c55c:	f383 8811 	msr	BASEPRI, r3
 800c560:	f3bf 8f6f 	isb	sy
 800c564:	f3bf 8f4f 	dsb	sy
 800c568:	617b      	str	r3, [r7, #20]
}
 800c56a:	bf00      	nop
 800c56c:	e7fe      	b.n	800c56c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c56e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c570:	699a      	ldr	r2, [r3, #24]
 800c572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c574:	18d1      	adds	r1, r2, r3
 800c576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c578:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c57a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c57c:	f7ff ff06 	bl	800c38c <prvInsertTimerInActiveList>
					break;
 800c580:	e015      	b.n	800c5ae <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c584:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c588:	f003 0302 	and.w	r3, r3, #2
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d103      	bne.n	800c598 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800c590:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c592:	f000 fbf5 	bl	800cd80 <vPortFree>
 800c596:	e00a      	b.n	800c5ae <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c59a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c59e:	f023 0301 	bic.w	r3, r3, #1
 800c5a2:	b2da      	uxtb	r2, r3
 800c5a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c5aa:	e000      	b.n	800c5ae <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800c5ac:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c5ae:	4b08      	ldr	r3, [pc, #32]	; (800c5d0 <prvProcessReceivedCommands+0x1c0>)
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	1d39      	adds	r1, r7, #4
 800c5b4:	2200      	movs	r2, #0
 800c5b6:	4618      	mov	r0, r3
 800c5b8:	f7fe f856 	bl	800a668 <xQueueReceive>
 800c5bc:	4603      	mov	r3, r0
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	f47f af2a 	bne.w	800c418 <prvProcessReceivedCommands+0x8>
	}
}
 800c5c4:	bf00      	nop
 800c5c6:	bf00      	nop
 800c5c8:	3730      	adds	r7, #48	; 0x30
 800c5ca:	46bd      	mov	sp, r7
 800c5cc:	bd80      	pop	{r7, pc}
 800c5ce:	bf00      	nop
 800c5d0:	20001620 	.word	0x20001620

0800c5d4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c5d4:	b580      	push	{r7, lr}
 800c5d6:	b088      	sub	sp, #32
 800c5d8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c5da:	e048      	b.n	800c66e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c5dc:	4b2d      	ldr	r3, [pc, #180]	; (800c694 <prvSwitchTimerLists+0xc0>)
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	68db      	ldr	r3, [r3, #12]
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c5e6:	4b2b      	ldr	r3, [pc, #172]	; (800c694 <prvSwitchTimerLists+0xc0>)
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	68db      	ldr	r3, [r3, #12]
 800c5ec:	68db      	ldr	r3, [r3, #12]
 800c5ee:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	3304      	adds	r3, #4
 800c5f4:	4618      	mov	r0, r3
 800c5f6:	f7fd fcf7 	bl	8009fe8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	6a1b      	ldr	r3, [r3, #32]
 800c5fe:	68f8      	ldr	r0, [r7, #12]
 800c600:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c608:	f003 0304 	and.w	r3, r3, #4
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d02e      	beq.n	800c66e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	699b      	ldr	r3, [r3, #24]
 800c614:	693a      	ldr	r2, [r7, #16]
 800c616:	4413      	add	r3, r2
 800c618:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c61a:	68ba      	ldr	r2, [r7, #8]
 800c61c:	693b      	ldr	r3, [r7, #16]
 800c61e:	429a      	cmp	r2, r3
 800c620:	d90e      	bls.n	800c640 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	68ba      	ldr	r2, [r7, #8]
 800c626:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	68fa      	ldr	r2, [r7, #12]
 800c62c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c62e:	4b19      	ldr	r3, [pc, #100]	; (800c694 <prvSwitchTimerLists+0xc0>)
 800c630:	681a      	ldr	r2, [r3, #0]
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	3304      	adds	r3, #4
 800c636:	4619      	mov	r1, r3
 800c638:	4610      	mov	r0, r2
 800c63a:	f7fd fc9c 	bl	8009f76 <vListInsert>
 800c63e:	e016      	b.n	800c66e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c640:	2300      	movs	r3, #0
 800c642:	9300      	str	r3, [sp, #0]
 800c644:	2300      	movs	r3, #0
 800c646:	693a      	ldr	r2, [r7, #16]
 800c648:	2100      	movs	r1, #0
 800c64a:	68f8      	ldr	r0, [r7, #12]
 800c64c:	f7ff fd60 	bl	800c110 <xTimerGenericCommand>
 800c650:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	2b00      	cmp	r3, #0
 800c656:	d10a      	bne.n	800c66e <prvSwitchTimerLists+0x9a>
	__asm volatile
 800c658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c65c:	f383 8811 	msr	BASEPRI, r3
 800c660:	f3bf 8f6f 	isb	sy
 800c664:	f3bf 8f4f 	dsb	sy
 800c668:	603b      	str	r3, [r7, #0]
}
 800c66a:	bf00      	nop
 800c66c:	e7fe      	b.n	800c66c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c66e:	4b09      	ldr	r3, [pc, #36]	; (800c694 <prvSwitchTimerLists+0xc0>)
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	2b00      	cmp	r3, #0
 800c676:	d1b1      	bne.n	800c5dc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c678:	4b06      	ldr	r3, [pc, #24]	; (800c694 <prvSwitchTimerLists+0xc0>)
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c67e:	4b06      	ldr	r3, [pc, #24]	; (800c698 <prvSwitchTimerLists+0xc4>)
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	4a04      	ldr	r2, [pc, #16]	; (800c694 <prvSwitchTimerLists+0xc0>)
 800c684:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c686:	4a04      	ldr	r2, [pc, #16]	; (800c698 <prvSwitchTimerLists+0xc4>)
 800c688:	697b      	ldr	r3, [r7, #20]
 800c68a:	6013      	str	r3, [r2, #0]
}
 800c68c:	bf00      	nop
 800c68e:	3718      	adds	r7, #24
 800c690:	46bd      	mov	sp, r7
 800c692:	bd80      	pop	{r7, pc}
 800c694:	20001618 	.word	0x20001618
 800c698:	2000161c 	.word	0x2000161c

0800c69c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c69c:	b580      	push	{r7, lr}
 800c69e:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c6a0:	f000 f980 	bl	800c9a4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c6a4:	4b12      	ldr	r3, [pc, #72]	; (800c6f0 <prvCheckForValidListAndQueue+0x54>)
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d11d      	bne.n	800c6e8 <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 800c6ac:	4811      	ldr	r0, [pc, #68]	; (800c6f4 <prvCheckForValidListAndQueue+0x58>)
 800c6ae:	f7fd fc11 	bl	8009ed4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c6b2:	4811      	ldr	r0, [pc, #68]	; (800c6f8 <prvCheckForValidListAndQueue+0x5c>)
 800c6b4:	f7fd fc0e 	bl	8009ed4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c6b8:	4b10      	ldr	r3, [pc, #64]	; (800c6fc <prvCheckForValidListAndQueue+0x60>)
 800c6ba:	4a0e      	ldr	r2, [pc, #56]	; (800c6f4 <prvCheckForValidListAndQueue+0x58>)
 800c6bc:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c6be:	4b10      	ldr	r3, [pc, #64]	; (800c700 <prvCheckForValidListAndQueue+0x64>)
 800c6c0:	4a0d      	ldr	r2, [pc, #52]	; (800c6f8 <prvCheckForValidListAndQueue+0x5c>)
 800c6c2:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800c6c4:	2200      	movs	r2, #0
 800c6c6:	2110      	movs	r1, #16
 800c6c8:	2001      	movs	r0, #1
 800c6ca:	f7fd fd1f 	bl	800a10c <xQueueGenericCreate>
 800c6ce:	4603      	mov	r3, r0
 800c6d0:	4a07      	ldr	r2, [pc, #28]	; (800c6f0 <prvCheckForValidListAndQueue+0x54>)
 800c6d2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c6d4:	4b06      	ldr	r3, [pc, #24]	; (800c6f0 <prvCheckForValidListAndQueue+0x54>)
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d005      	beq.n	800c6e8 <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c6dc:	4b04      	ldr	r3, [pc, #16]	; (800c6f0 <prvCheckForValidListAndQueue+0x54>)
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	4908      	ldr	r1, [pc, #32]	; (800c704 <prvCheckForValidListAndQueue+0x68>)
 800c6e2:	4618      	mov	r0, r3
 800c6e4:	f7fe fb72 	bl	800adcc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c6e8:	f000 f98c 	bl	800ca04 <vPortExitCritical>
}
 800c6ec:	bf00      	nop
 800c6ee:	bd80      	pop	{r7, pc}
 800c6f0:	20001620 	.word	0x20001620
 800c6f4:	200015f0 	.word	0x200015f0
 800c6f8:	20001604 	.word	0x20001604
 800c6fc:	20001618 	.word	0x20001618
 800c700:	2000161c 	.word	0x2000161c
 800c704:	0801daf0 	.word	0x0801daf0

0800c708 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800c708:	b580      	push	{r7, lr}
 800c70a:	b08a      	sub	sp, #40	; 0x28
 800c70c:	af00      	add	r7, sp, #0
 800c70e:	60f8      	str	r0, [r7, #12]
 800c710:	60b9      	str	r1, [r7, #8]
 800c712:	607a      	str	r2, [r7, #4]
 800c714:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 800c716:	f06f 0301 	mvn.w	r3, #1
 800c71a:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 800c720:	68bb      	ldr	r3, [r7, #8]
 800c722:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c728:	4b06      	ldr	r3, [pc, #24]	; (800c744 <xTimerPendFunctionCallFromISR+0x3c>)
 800c72a:	6818      	ldr	r0, [r3, #0]
 800c72c:	f107 0114 	add.w	r1, r7, #20
 800c730:	2300      	movs	r3, #0
 800c732:	683a      	ldr	r2, [r7, #0]
 800c734:	f7fd fe70 	bl	800a418 <xQueueGenericSendFromISR>
 800c738:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 800c73a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800c73c:	4618      	mov	r0, r3
 800c73e:	3728      	adds	r7, #40	; 0x28
 800c740:	46bd      	mov	sp, r7
 800c742:	bd80      	pop	{r7, pc}
 800c744:	20001620 	.word	0x20001620

0800c748 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c748:	b480      	push	{r7}
 800c74a:	b085      	sub	sp, #20
 800c74c:	af00      	add	r7, sp, #0
 800c74e:	60f8      	str	r0, [r7, #12]
 800c750:	60b9      	str	r1, [r7, #8]
 800c752:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	3b04      	subs	r3, #4
 800c758:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c760:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	3b04      	subs	r3, #4
 800c766:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c768:	68bb      	ldr	r3, [r7, #8]
 800c76a:	f023 0201 	bic.w	r2, r3, #1
 800c76e:	68fb      	ldr	r3, [r7, #12]
 800c770:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	3b04      	subs	r3, #4
 800c776:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c778:	4a0c      	ldr	r2, [pc, #48]	; (800c7ac <pxPortInitialiseStack+0x64>)
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	3b14      	subs	r3, #20
 800c782:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c784:	687a      	ldr	r2, [r7, #4]
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	3b04      	subs	r3, #4
 800c78e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	f06f 0202 	mvn.w	r2, #2
 800c796:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	3b20      	subs	r3, #32
 800c79c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c79e:	68fb      	ldr	r3, [r7, #12]
}
 800c7a0:	4618      	mov	r0, r3
 800c7a2:	3714      	adds	r7, #20
 800c7a4:	46bd      	mov	sp, r7
 800c7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7aa:	4770      	bx	lr
 800c7ac:	0800c7b1 	.word	0x0800c7b1

0800c7b0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c7b0:	b480      	push	{r7}
 800c7b2:	b085      	sub	sp, #20
 800c7b4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c7b6:	2300      	movs	r3, #0
 800c7b8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c7ba:	4b12      	ldr	r3, [pc, #72]	; (800c804 <prvTaskExitError+0x54>)
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7c2:	d00a      	beq.n	800c7da <prvTaskExitError+0x2a>
	__asm volatile
 800c7c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7c8:	f383 8811 	msr	BASEPRI, r3
 800c7cc:	f3bf 8f6f 	isb	sy
 800c7d0:	f3bf 8f4f 	dsb	sy
 800c7d4:	60fb      	str	r3, [r7, #12]
}
 800c7d6:	bf00      	nop
 800c7d8:	e7fe      	b.n	800c7d8 <prvTaskExitError+0x28>
	__asm volatile
 800c7da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7de:	f383 8811 	msr	BASEPRI, r3
 800c7e2:	f3bf 8f6f 	isb	sy
 800c7e6:	f3bf 8f4f 	dsb	sy
 800c7ea:	60bb      	str	r3, [r7, #8]
}
 800c7ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c7ee:	bf00      	nop
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d0fc      	beq.n	800c7f0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c7f6:	bf00      	nop
 800c7f8:	bf00      	nop
 800c7fa:	3714      	adds	r7, #20
 800c7fc:	46bd      	mov	sp, r7
 800c7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c802:	4770      	bx	lr
 800c804:	200000b4 	.word	0x200000b4
	...

0800c810 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c810:	4b07      	ldr	r3, [pc, #28]	; (800c830 <pxCurrentTCBConst2>)
 800c812:	6819      	ldr	r1, [r3, #0]
 800c814:	6808      	ldr	r0, [r1, #0]
 800c816:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c81a:	f380 8809 	msr	PSP, r0
 800c81e:	f3bf 8f6f 	isb	sy
 800c822:	f04f 0000 	mov.w	r0, #0
 800c826:	f380 8811 	msr	BASEPRI, r0
 800c82a:	4770      	bx	lr
 800c82c:	f3af 8000 	nop.w

0800c830 <pxCurrentTCBConst2>:
 800c830:	200014c4 	.word	0x200014c4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c834:	bf00      	nop
 800c836:	bf00      	nop

0800c838 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c838:	4808      	ldr	r0, [pc, #32]	; (800c85c <prvPortStartFirstTask+0x24>)
 800c83a:	6800      	ldr	r0, [r0, #0]
 800c83c:	6800      	ldr	r0, [r0, #0]
 800c83e:	f380 8808 	msr	MSP, r0
 800c842:	f04f 0000 	mov.w	r0, #0
 800c846:	f380 8814 	msr	CONTROL, r0
 800c84a:	b662      	cpsie	i
 800c84c:	b661      	cpsie	f
 800c84e:	f3bf 8f4f 	dsb	sy
 800c852:	f3bf 8f6f 	isb	sy
 800c856:	df00      	svc	0
 800c858:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c85a:	bf00      	nop
 800c85c:	e000ed08 	.word	0xe000ed08

0800c860 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c860:	b580      	push	{r7, lr}
 800c862:	b086      	sub	sp, #24
 800c864:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c866:	4b46      	ldr	r3, [pc, #280]	; (800c980 <xPortStartScheduler+0x120>)
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	4a46      	ldr	r2, [pc, #280]	; (800c984 <xPortStartScheduler+0x124>)
 800c86c:	4293      	cmp	r3, r2
 800c86e:	d10a      	bne.n	800c886 <xPortStartScheduler+0x26>
	__asm volatile
 800c870:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c874:	f383 8811 	msr	BASEPRI, r3
 800c878:	f3bf 8f6f 	isb	sy
 800c87c:	f3bf 8f4f 	dsb	sy
 800c880:	613b      	str	r3, [r7, #16]
}
 800c882:	bf00      	nop
 800c884:	e7fe      	b.n	800c884 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c886:	4b3e      	ldr	r3, [pc, #248]	; (800c980 <xPortStartScheduler+0x120>)
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	4a3f      	ldr	r2, [pc, #252]	; (800c988 <xPortStartScheduler+0x128>)
 800c88c:	4293      	cmp	r3, r2
 800c88e:	d10a      	bne.n	800c8a6 <xPortStartScheduler+0x46>
	__asm volatile
 800c890:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c894:	f383 8811 	msr	BASEPRI, r3
 800c898:	f3bf 8f6f 	isb	sy
 800c89c:	f3bf 8f4f 	dsb	sy
 800c8a0:	60fb      	str	r3, [r7, #12]
}
 800c8a2:	bf00      	nop
 800c8a4:	e7fe      	b.n	800c8a4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c8a6:	4b39      	ldr	r3, [pc, #228]	; (800c98c <xPortStartScheduler+0x12c>)
 800c8a8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c8aa:	697b      	ldr	r3, [r7, #20]
 800c8ac:	781b      	ldrb	r3, [r3, #0]
 800c8ae:	b2db      	uxtb	r3, r3
 800c8b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c8b2:	697b      	ldr	r3, [r7, #20]
 800c8b4:	22ff      	movs	r2, #255	; 0xff
 800c8b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c8b8:	697b      	ldr	r3, [r7, #20]
 800c8ba:	781b      	ldrb	r3, [r3, #0]
 800c8bc:	b2db      	uxtb	r3, r3
 800c8be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c8c0:	78fb      	ldrb	r3, [r7, #3]
 800c8c2:	b2db      	uxtb	r3, r3
 800c8c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c8c8:	b2da      	uxtb	r2, r3
 800c8ca:	4b31      	ldr	r3, [pc, #196]	; (800c990 <xPortStartScheduler+0x130>)
 800c8cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c8ce:	4b31      	ldr	r3, [pc, #196]	; (800c994 <xPortStartScheduler+0x134>)
 800c8d0:	2207      	movs	r2, #7
 800c8d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c8d4:	e009      	b.n	800c8ea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800c8d6:	4b2f      	ldr	r3, [pc, #188]	; (800c994 <xPortStartScheduler+0x134>)
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	3b01      	subs	r3, #1
 800c8dc:	4a2d      	ldr	r2, [pc, #180]	; (800c994 <xPortStartScheduler+0x134>)
 800c8de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c8e0:	78fb      	ldrb	r3, [r7, #3]
 800c8e2:	b2db      	uxtb	r3, r3
 800c8e4:	005b      	lsls	r3, r3, #1
 800c8e6:	b2db      	uxtb	r3, r3
 800c8e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c8ea:	78fb      	ldrb	r3, [r7, #3]
 800c8ec:	b2db      	uxtb	r3, r3
 800c8ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c8f2:	2b80      	cmp	r3, #128	; 0x80
 800c8f4:	d0ef      	beq.n	800c8d6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c8f6:	4b27      	ldr	r3, [pc, #156]	; (800c994 <xPortStartScheduler+0x134>)
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	f1c3 0307 	rsb	r3, r3, #7
 800c8fe:	2b04      	cmp	r3, #4
 800c900:	d00a      	beq.n	800c918 <xPortStartScheduler+0xb8>
	__asm volatile
 800c902:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c906:	f383 8811 	msr	BASEPRI, r3
 800c90a:	f3bf 8f6f 	isb	sy
 800c90e:	f3bf 8f4f 	dsb	sy
 800c912:	60bb      	str	r3, [r7, #8]
}
 800c914:	bf00      	nop
 800c916:	e7fe      	b.n	800c916 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c918:	4b1e      	ldr	r3, [pc, #120]	; (800c994 <xPortStartScheduler+0x134>)
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	021b      	lsls	r3, r3, #8
 800c91e:	4a1d      	ldr	r2, [pc, #116]	; (800c994 <xPortStartScheduler+0x134>)
 800c920:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c922:	4b1c      	ldr	r3, [pc, #112]	; (800c994 <xPortStartScheduler+0x134>)
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c92a:	4a1a      	ldr	r2, [pc, #104]	; (800c994 <xPortStartScheduler+0x134>)
 800c92c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	b2da      	uxtb	r2, r3
 800c932:	697b      	ldr	r3, [r7, #20]
 800c934:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c936:	4b18      	ldr	r3, [pc, #96]	; (800c998 <xPortStartScheduler+0x138>)
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	4a17      	ldr	r2, [pc, #92]	; (800c998 <xPortStartScheduler+0x138>)
 800c93c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c940:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c942:	4b15      	ldr	r3, [pc, #84]	; (800c998 <xPortStartScheduler+0x138>)
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	4a14      	ldr	r2, [pc, #80]	; (800c998 <xPortStartScheduler+0x138>)
 800c948:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c94c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c94e:	f000 f8dd 	bl	800cb0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c952:	4b12      	ldr	r3, [pc, #72]	; (800c99c <xPortStartScheduler+0x13c>)
 800c954:	2200      	movs	r2, #0
 800c956:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c958:	f000 f8fc 	bl	800cb54 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c95c:	4b10      	ldr	r3, [pc, #64]	; (800c9a0 <xPortStartScheduler+0x140>)
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	4a0f      	ldr	r2, [pc, #60]	; (800c9a0 <xPortStartScheduler+0x140>)
 800c962:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c966:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c968:	f7ff ff66 	bl	800c838 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c96c:	f7fe fe7e 	bl	800b66c <vTaskSwitchContext>
	prvTaskExitError();
 800c970:	f7ff ff1e 	bl	800c7b0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c974:	2300      	movs	r3, #0
}
 800c976:	4618      	mov	r0, r3
 800c978:	3718      	adds	r7, #24
 800c97a:	46bd      	mov	sp, r7
 800c97c:	bd80      	pop	{r7, pc}
 800c97e:	bf00      	nop
 800c980:	e000ed00 	.word	0xe000ed00
 800c984:	410fc271 	.word	0x410fc271
 800c988:	410fc270 	.word	0x410fc270
 800c98c:	e000e400 	.word	0xe000e400
 800c990:	2000162c 	.word	0x2000162c
 800c994:	20001630 	.word	0x20001630
 800c998:	e000ed20 	.word	0xe000ed20
 800c99c:	200000b4 	.word	0x200000b4
 800c9a0:	e000ef34 	.word	0xe000ef34

0800c9a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c9a4:	b480      	push	{r7}
 800c9a6:	b083      	sub	sp, #12
 800c9a8:	af00      	add	r7, sp, #0
	__asm volatile
 800c9aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9ae:	f383 8811 	msr	BASEPRI, r3
 800c9b2:	f3bf 8f6f 	isb	sy
 800c9b6:	f3bf 8f4f 	dsb	sy
 800c9ba:	607b      	str	r3, [r7, #4]
}
 800c9bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c9be:	4b0f      	ldr	r3, [pc, #60]	; (800c9fc <vPortEnterCritical+0x58>)
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	3301      	adds	r3, #1
 800c9c4:	4a0d      	ldr	r2, [pc, #52]	; (800c9fc <vPortEnterCritical+0x58>)
 800c9c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c9c8:	4b0c      	ldr	r3, [pc, #48]	; (800c9fc <vPortEnterCritical+0x58>)
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	2b01      	cmp	r3, #1
 800c9ce:	d10f      	bne.n	800c9f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c9d0:	4b0b      	ldr	r3, [pc, #44]	; (800ca00 <vPortEnterCritical+0x5c>)
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	b2db      	uxtb	r3, r3
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d00a      	beq.n	800c9f0 <vPortEnterCritical+0x4c>
	__asm volatile
 800c9da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9de:	f383 8811 	msr	BASEPRI, r3
 800c9e2:	f3bf 8f6f 	isb	sy
 800c9e6:	f3bf 8f4f 	dsb	sy
 800c9ea:	603b      	str	r3, [r7, #0]
}
 800c9ec:	bf00      	nop
 800c9ee:	e7fe      	b.n	800c9ee <vPortEnterCritical+0x4a>
	}
}
 800c9f0:	bf00      	nop
 800c9f2:	370c      	adds	r7, #12
 800c9f4:	46bd      	mov	sp, r7
 800c9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9fa:	4770      	bx	lr
 800c9fc:	200000b4 	.word	0x200000b4
 800ca00:	e000ed04 	.word	0xe000ed04

0800ca04 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ca04:	b480      	push	{r7}
 800ca06:	b083      	sub	sp, #12
 800ca08:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ca0a:	4b12      	ldr	r3, [pc, #72]	; (800ca54 <vPortExitCritical+0x50>)
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d10a      	bne.n	800ca28 <vPortExitCritical+0x24>
	__asm volatile
 800ca12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca16:	f383 8811 	msr	BASEPRI, r3
 800ca1a:	f3bf 8f6f 	isb	sy
 800ca1e:	f3bf 8f4f 	dsb	sy
 800ca22:	607b      	str	r3, [r7, #4]
}
 800ca24:	bf00      	nop
 800ca26:	e7fe      	b.n	800ca26 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ca28:	4b0a      	ldr	r3, [pc, #40]	; (800ca54 <vPortExitCritical+0x50>)
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	3b01      	subs	r3, #1
 800ca2e:	4a09      	ldr	r2, [pc, #36]	; (800ca54 <vPortExitCritical+0x50>)
 800ca30:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ca32:	4b08      	ldr	r3, [pc, #32]	; (800ca54 <vPortExitCritical+0x50>)
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d105      	bne.n	800ca46 <vPortExitCritical+0x42>
 800ca3a:	2300      	movs	r3, #0
 800ca3c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ca3e:	683b      	ldr	r3, [r7, #0]
 800ca40:	f383 8811 	msr	BASEPRI, r3
}
 800ca44:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ca46:	bf00      	nop
 800ca48:	370c      	adds	r7, #12
 800ca4a:	46bd      	mov	sp, r7
 800ca4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca50:	4770      	bx	lr
 800ca52:	bf00      	nop
 800ca54:	200000b4 	.word	0x200000b4
	...

0800ca60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ca60:	f3ef 8009 	mrs	r0, PSP
 800ca64:	f3bf 8f6f 	isb	sy
 800ca68:	4b15      	ldr	r3, [pc, #84]	; (800cac0 <pxCurrentTCBConst>)
 800ca6a:	681a      	ldr	r2, [r3, #0]
 800ca6c:	f01e 0f10 	tst.w	lr, #16
 800ca70:	bf08      	it	eq
 800ca72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ca76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca7a:	6010      	str	r0, [r2, #0]
 800ca7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ca80:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ca84:	f380 8811 	msr	BASEPRI, r0
 800ca88:	f3bf 8f4f 	dsb	sy
 800ca8c:	f3bf 8f6f 	isb	sy
 800ca90:	f7fe fdec 	bl	800b66c <vTaskSwitchContext>
 800ca94:	f04f 0000 	mov.w	r0, #0
 800ca98:	f380 8811 	msr	BASEPRI, r0
 800ca9c:	bc09      	pop	{r0, r3}
 800ca9e:	6819      	ldr	r1, [r3, #0]
 800caa0:	6808      	ldr	r0, [r1, #0]
 800caa2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800caa6:	f01e 0f10 	tst.w	lr, #16
 800caaa:	bf08      	it	eq
 800caac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800cab0:	f380 8809 	msr	PSP, r0
 800cab4:	f3bf 8f6f 	isb	sy
 800cab8:	4770      	bx	lr
 800caba:	bf00      	nop
 800cabc:	f3af 8000 	nop.w

0800cac0 <pxCurrentTCBConst>:
 800cac0:	200014c4 	.word	0x200014c4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800cac4:	bf00      	nop
 800cac6:	bf00      	nop

0800cac8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800cac8:	b580      	push	{r7, lr}
 800caca:	b082      	sub	sp, #8
 800cacc:	af00      	add	r7, sp, #0
	__asm volatile
 800cace:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cad2:	f383 8811 	msr	BASEPRI, r3
 800cad6:	f3bf 8f6f 	isb	sy
 800cada:	f3bf 8f4f 	dsb	sy
 800cade:	607b      	str	r3, [r7, #4]
}
 800cae0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800cae2:	f7fe fd0b 	bl	800b4fc <xTaskIncrementTick>
 800cae6:	4603      	mov	r3, r0
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d003      	beq.n	800caf4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800caec:	4b06      	ldr	r3, [pc, #24]	; (800cb08 <xPortSysTickHandler+0x40>)
 800caee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800caf2:	601a      	str	r2, [r3, #0]
 800caf4:	2300      	movs	r3, #0
 800caf6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800caf8:	683b      	ldr	r3, [r7, #0]
 800cafa:	f383 8811 	msr	BASEPRI, r3
}
 800cafe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800cb00:	bf00      	nop
 800cb02:	3708      	adds	r7, #8
 800cb04:	46bd      	mov	sp, r7
 800cb06:	bd80      	pop	{r7, pc}
 800cb08:	e000ed04 	.word	0xe000ed04

0800cb0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800cb0c:	b480      	push	{r7}
 800cb0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800cb10:	4b0b      	ldr	r3, [pc, #44]	; (800cb40 <vPortSetupTimerInterrupt+0x34>)
 800cb12:	2200      	movs	r2, #0
 800cb14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800cb16:	4b0b      	ldr	r3, [pc, #44]	; (800cb44 <vPortSetupTimerInterrupt+0x38>)
 800cb18:	2200      	movs	r2, #0
 800cb1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cb1c:	4b0a      	ldr	r3, [pc, #40]	; (800cb48 <vPortSetupTimerInterrupt+0x3c>)
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	4a0a      	ldr	r2, [pc, #40]	; (800cb4c <vPortSetupTimerInterrupt+0x40>)
 800cb22:	fba2 2303 	umull	r2, r3, r2, r3
 800cb26:	099b      	lsrs	r3, r3, #6
 800cb28:	4a09      	ldr	r2, [pc, #36]	; (800cb50 <vPortSetupTimerInterrupt+0x44>)
 800cb2a:	3b01      	subs	r3, #1
 800cb2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800cb2e:	4b04      	ldr	r3, [pc, #16]	; (800cb40 <vPortSetupTimerInterrupt+0x34>)
 800cb30:	2207      	movs	r2, #7
 800cb32:	601a      	str	r2, [r3, #0]
}
 800cb34:	bf00      	nop
 800cb36:	46bd      	mov	sp, r7
 800cb38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb3c:	4770      	bx	lr
 800cb3e:	bf00      	nop
 800cb40:	e000e010 	.word	0xe000e010
 800cb44:	e000e018 	.word	0xe000e018
 800cb48:	200000a8 	.word	0x200000a8
 800cb4c:	10624dd3 	.word	0x10624dd3
 800cb50:	e000e014 	.word	0xe000e014

0800cb54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800cb54:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800cb64 <vPortEnableVFP+0x10>
 800cb58:	6801      	ldr	r1, [r0, #0]
 800cb5a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800cb5e:	6001      	str	r1, [r0, #0]
 800cb60:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800cb62:	bf00      	nop
 800cb64:	e000ed88 	.word	0xe000ed88

0800cb68 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800cb68:	b480      	push	{r7}
 800cb6a:	b085      	sub	sp, #20
 800cb6c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800cb6e:	f3ef 8305 	mrs	r3, IPSR
 800cb72:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	2b0f      	cmp	r3, #15
 800cb78:	d914      	bls.n	800cba4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800cb7a:	4a17      	ldr	r2, [pc, #92]	; (800cbd8 <vPortValidateInterruptPriority+0x70>)
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	4413      	add	r3, r2
 800cb80:	781b      	ldrb	r3, [r3, #0]
 800cb82:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800cb84:	4b15      	ldr	r3, [pc, #84]	; (800cbdc <vPortValidateInterruptPriority+0x74>)
 800cb86:	781b      	ldrb	r3, [r3, #0]
 800cb88:	7afa      	ldrb	r2, [r7, #11]
 800cb8a:	429a      	cmp	r2, r3
 800cb8c:	d20a      	bcs.n	800cba4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800cb8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb92:	f383 8811 	msr	BASEPRI, r3
 800cb96:	f3bf 8f6f 	isb	sy
 800cb9a:	f3bf 8f4f 	dsb	sy
 800cb9e:	607b      	str	r3, [r7, #4]
}
 800cba0:	bf00      	nop
 800cba2:	e7fe      	b.n	800cba2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800cba4:	4b0e      	ldr	r3, [pc, #56]	; (800cbe0 <vPortValidateInterruptPriority+0x78>)
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800cbac:	4b0d      	ldr	r3, [pc, #52]	; (800cbe4 <vPortValidateInterruptPriority+0x7c>)
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	429a      	cmp	r2, r3
 800cbb2:	d90a      	bls.n	800cbca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800cbb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbb8:	f383 8811 	msr	BASEPRI, r3
 800cbbc:	f3bf 8f6f 	isb	sy
 800cbc0:	f3bf 8f4f 	dsb	sy
 800cbc4:	603b      	str	r3, [r7, #0]
}
 800cbc6:	bf00      	nop
 800cbc8:	e7fe      	b.n	800cbc8 <vPortValidateInterruptPriority+0x60>
	}
 800cbca:	bf00      	nop
 800cbcc:	3714      	adds	r7, #20
 800cbce:	46bd      	mov	sp, r7
 800cbd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbd4:	4770      	bx	lr
 800cbd6:	bf00      	nop
 800cbd8:	e000e3f0 	.word	0xe000e3f0
 800cbdc:	2000162c 	.word	0x2000162c
 800cbe0:	e000ed0c 	.word	0xe000ed0c
 800cbe4:	20001630 	.word	0x20001630

0800cbe8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800cbe8:	b580      	push	{r7, lr}
 800cbea:	b08a      	sub	sp, #40	; 0x28
 800cbec:	af00      	add	r7, sp, #0
 800cbee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800cbf0:	2300      	movs	r3, #0
 800cbf2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800cbf4:	f7fe fbb6 	bl	800b364 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800cbf8:	4b5b      	ldr	r3, [pc, #364]	; (800cd68 <pvPortMalloc+0x180>)
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d101      	bne.n	800cc04 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800cc00:	f000 f920 	bl	800ce44 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800cc04:	4b59      	ldr	r3, [pc, #356]	; (800cd6c <pvPortMalloc+0x184>)
 800cc06:	681a      	ldr	r2, [r3, #0]
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	4013      	ands	r3, r2
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	f040 8093 	bne.w	800cd38 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d01d      	beq.n	800cc54 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800cc18:	2208      	movs	r2, #8
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	4413      	add	r3, r2
 800cc1e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	f003 0307 	and.w	r3, r3, #7
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d014      	beq.n	800cc54 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	f023 0307 	bic.w	r3, r3, #7
 800cc30:	3308      	adds	r3, #8
 800cc32:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	f003 0307 	and.w	r3, r3, #7
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d00a      	beq.n	800cc54 <pvPortMalloc+0x6c>
	__asm volatile
 800cc3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc42:	f383 8811 	msr	BASEPRI, r3
 800cc46:	f3bf 8f6f 	isb	sy
 800cc4a:	f3bf 8f4f 	dsb	sy
 800cc4e:	617b      	str	r3, [r7, #20]
}
 800cc50:	bf00      	nop
 800cc52:	e7fe      	b.n	800cc52 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d06e      	beq.n	800cd38 <pvPortMalloc+0x150>
 800cc5a:	4b45      	ldr	r3, [pc, #276]	; (800cd70 <pvPortMalloc+0x188>)
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	687a      	ldr	r2, [r7, #4]
 800cc60:	429a      	cmp	r2, r3
 800cc62:	d869      	bhi.n	800cd38 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800cc64:	4b43      	ldr	r3, [pc, #268]	; (800cd74 <pvPortMalloc+0x18c>)
 800cc66:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800cc68:	4b42      	ldr	r3, [pc, #264]	; (800cd74 <pvPortMalloc+0x18c>)
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cc6e:	e004      	b.n	800cc7a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800cc70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc72:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800cc74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cc7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc7c:	685b      	ldr	r3, [r3, #4]
 800cc7e:	687a      	ldr	r2, [r7, #4]
 800cc80:	429a      	cmp	r2, r3
 800cc82:	d903      	bls.n	800cc8c <pvPortMalloc+0xa4>
 800cc84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d1f1      	bne.n	800cc70 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800cc8c:	4b36      	ldr	r3, [pc, #216]	; (800cd68 <pvPortMalloc+0x180>)
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cc92:	429a      	cmp	r2, r3
 800cc94:	d050      	beq.n	800cd38 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800cc96:	6a3b      	ldr	r3, [r7, #32]
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	2208      	movs	r2, #8
 800cc9c:	4413      	add	r3, r2
 800cc9e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800cca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cca2:	681a      	ldr	r2, [r3, #0]
 800cca4:	6a3b      	ldr	r3, [r7, #32]
 800cca6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800cca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccaa:	685a      	ldr	r2, [r3, #4]
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	1ad2      	subs	r2, r2, r3
 800ccb0:	2308      	movs	r3, #8
 800ccb2:	005b      	lsls	r3, r3, #1
 800ccb4:	429a      	cmp	r2, r3
 800ccb6:	d91f      	bls.n	800ccf8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ccb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	4413      	add	r3, r2
 800ccbe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ccc0:	69bb      	ldr	r3, [r7, #24]
 800ccc2:	f003 0307 	and.w	r3, r3, #7
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d00a      	beq.n	800cce0 <pvPortMalloc+0xf8>
	__asm volatile
 800ccca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccce:	f383 8811 	msr	BASEPRI, r3
 800ccd2:	f3bf 8f6f 	isb	sy
 800ccd6:	f3bf 8f4f 	dsb	sy
 800ccda:	613b      	str	r3, [r7, #16]
}
 800ccdc:	bf00      	nop
 800ccde:	e7fe      	b.n	800ccde <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800cce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cce2:	685a      	ldr	r2, [r3, #4]
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	1ad2      	subs	r2, r2, r3
 800cce8:	69bb      	ldr	r3, [r7, #24]
 800ccea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ccec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccee:	687a      	ldr	r2, [r7, #4]
 800ccf0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ccf2:	69b8      	ldr	r0, [r7, #24]
 800ccf4:	f000 f908 	bl	800cf08 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ccf8:	4b1d      	ldr	r3, [pc, #116]	; (800cd70 <pvPortMalloc+0x188>)
 800ccfa:	681a      	ldr	r2, [r3, #0]
 800ccfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccfe:	685b      	ldr	r3, [r3, #4]
 800cd00:	1ad3      	subs	r3, r2, r3
 800cd02:	4a1b      	ldr	r2, [pc, #108]	; (800cd70 <pvPortMalloc+0x188>)
 800cd04:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800cd06:	4b1a      	ldr	r3, [pc, #104]	; (800cd70 <pvPortMalloc+0x188>)
 800cd08:	681a      	ldr	r2, [r3, #0]
 800cd0a:	4b1b      	ldr	r3, [pc, #108]	; (800cd78 <pvPortMalloc+0x190>)
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	429a      	cmp	r2, r3
 800cd10:	d203      	bcs.n	800cd1a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800cd12:	4b17      	ldr	r3, [pc, #92]	; (800cd70 <pvPortMalloc+0x188>)
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	4a18      	ldr	r2, [pc, #96]	; (800cd78 <pvPortMalloc+0x190>)
 800cd18:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800cd1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd1c:	685a      	ldr	r2, [r3, #4]
 800cd1e:	4b13      	ldr	r3, [pc, #76]	; (800cd6c <pvPortMalloc+0x184>)
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	431a      	orrs	r2, r3
 800cd24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd26:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800cd28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd2a:	2200      	movs	r2, #0
 800cd2c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800cd2e:	4b13      	ldr	r3, [pc, #76]	; (800cd7c <pvPortMalloc+0x194>)
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	3301      	adds	r3, #1
 800cd34:	4a11      	ldr	r2, [pc, #68]	; (800cd7c <pvPortMalloc+0x194>)
 800cd36:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800cd38:	f7fe fb22 	bl	800b380 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800cd3c:	69fb      	ldr	r3, [r7, #28]
 800cd3e:	f003 0307 	and.w	r3, r3, #7
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d00a      	beq.n	800cd5c <pvPortMalloc+0x174>
	__asm volatile
 800cd46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd4a:	f383 8811 	msr	BASEPRI, r3
 800cd4e:	f3bf 8f6f 	isb	sy
 800cd52:	f3bf 8f4f 	dsb	sy
 800cd56:	60fb      	str	r3, [r7, #12]
}
 800cd58:	bf00      	nop
 800cd5a:	e7fe      	b.n	800cd5a <pvPortMalloc+0x172>
	return pvReturn;
 800cd5c:	69fb      	ldr	r3, [r7, #28]
}
 800cd5e:	4618      	mov	r0, r3
 800cd60:	3728      	adds	r7, #40	; 0x28
 800cd62:	46bd      	mov	sp, r7
 800cd64:	bd80      	pop	{r7, pc}
 800cd66:	bf00      	nop
 800cd68:	2000a23c 	.word	0x2000a23c
 800cd6c:	2000a250 	.word	0x2000a250
 800cd70:	2000a240 	.word	0x2000a240
 800cd74:	2000a234 	.word	0x2000a234
 800cd78:	2000a244 	.word	0x2000a244
 800cd7c:	2000a248 	.word	0x2000a248

0800cd80 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800cd80:	b580      	push	{r7, lr}
 800cd82:	b086      	sub	sp, #24
 800cd84:	af00      	add	r7, sp, #0
 800cd86:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d04d      	beq.n	800ce2e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800cd92:	2308      	movs	r3, #8
 800cd94:	425b      	negs	r3, r3
 800cd96:	697a      	ldr	r2, [r7, #20]
 800cd98:	4413      	add	r3, r2
 800cd9a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800cd9c:	697b      	ldr	r3, [r7, #20]
 800cd9e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800cda0:	693b      	ldr	r3, [r7, #16]
 800cda2:	685a      	ldr	r2, [r3, #4]
 800cda4:	4b24      	ldr	r3, [pc, #144]	; (800ce38 <vPortFree+0xb8>)
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	4013      	ands	r3, r2
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d10a      	bne.n	800cdc4 <vPortFree+0x44>
	__asm volatile
 800cdae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdb2:	f383 8811 	msr	BASEPRI, r3
 800cdb6:	f3bf 8f6f 	isb	sy
 800cdba:	f3bf 8f4f 	dsb	sy
 800cdbe:	60fb      	str	r3, [r7, #12]
}
 800cdc0:	bf00      	nop
 800cdc2:	e7fe      	b.n	800cdc2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800cdc4:	693b      	ldr	r3, [r7, #16]
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d00a      	beq.n	800cde2 <vPortFree+0x62>
	__asm volatile
 800cdcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdd0:	f383 8811 	msr	BASEPRI, r3
 800cdd4:	f3bf 8f6f 	isb	sy
 800cdd8:	f3bf 8f4f 	dsb	sy
 800cddc:	60bb      	str	r3, [r7, #8]
}
 800cdde:	bf00      	nop
 800cde0:	e7fe      	b.n	800cde0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800cde2:	693b      	ldr	r3, [r7, #16]
 800cde4:	685a      	ldr	r2, [r3, #4]
 800cde6:	4b14      	ldr	r3, [pc, #80]	; (800ce38 <vPortFree+0xb8>)
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	4013      	ands	r3, r2
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d01e      	beq.n	800ce2e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800cdf0:	693b      	ldr	r3, [r7, #16]
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d11a      	bne.n	800ce2e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800cdf8:	693b      	ldr	r3, [r7, #16]
 800cdfa:	685a      	ldr	r2, [r3, #4]
 800cdfc:	4b0e      	ldr	r3, [pc, #56]	; (800ce38 <vPortFree+0xb8>)
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	43db      	mvns	r3, r3
 800ce02:	401a      	ands	r2, r3
 800ce04:	693b      	ldr	r3, [r7, #16]
 800ce06:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ce08:	f7fe faac 	bl	800b364 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ce0c:	693b      	ldr	r3, [r7, #16]
 800ce0e:	685a      	ldr	r2, [r3, #4]
 800ce10:	4b0a      	ldr	r3, [pc, #40]	; (800ce3c <vPortFree+0xbc>)
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	4413      	add	r3, r2
 800ce16:	4a09      	ldr	r2, [pc, #36]	; (800ce3c <vPortFree+0xbc>)
 800ce18:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ce1a:	6938      	ldr	r0, [r7, #16]
 800ce1c:	f000 f874 	bl	800cf08 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ce20:	4b07      	ldr	r3, [pc, #28]	; (800ce40 <vPortFree+0xc0>)
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	3301      	adds	r3, #1
 800ce26:	4a06      	ldr	r2, [pc, #24]	; (800ce40 <vPortFree+0xc0>)
 800ce28:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ce2a:	f7fe faa9 	bl	800b380 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ce2e:	bf00      	nop
 800ce30:	3718      	adds	r7, #24
 800ce32:	46bd      	mov	sp, r7
 800ce34:	bd80      	pop	{r7, pc}
 800ce36:	bf00      	nop
 800ce38:	2000a250 	.word	0x2000a250
 800ce3c:	2000a240 	.word	0x2000a240
 800ce40:	2000a24c 	.word	0x2000a24c

0800ce44 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ce44:	b480      	push	{r7}
 800ce46:	b085      	sub	sp, #20
 800ce48:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ce4a:	f44f 430c 	mov.w	r3, #35840	; 0x8c00
 800ce4e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ce50:	4b27      	ldr	r3, [pc, #156]	; (800cef0 <prvHeapInit+0xac>)
 800ce52:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	f003 0307 	and.w	r3, r3, #7
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d00c      	beq.n	800ce78 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	3307      	adds	r3, #7
 800ce62:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	f023 0307 	bic.w	r3, r3, #7
 800ce6a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ce6c:	68ba      	ldr	r2, [r7, #8]
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	1ad3      	subs	r3, r2, r3
 800ce72:	4a1f      	ldr	r2, [pc, #124]	; (800cef0 <prvHeapInit+0xac>)
 800ce74:	4413      	add	r3, r2
 800ce76:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ce7c:	4a1d      	ldr	r2, [pc, #116]	; (800cef4 <prvHeapInit+0xb0>)
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ce82:	4b1c      	ldr	r3, [pc, #112]	; (800cef4 <prvHeapInit+0xb0>)
 800ce84:	2200      	movs	r2, #0
 800ce86:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	68ba      	ldr	r2, [r7, #8]
 800ce8c:	4413      	add	r3, r2
 800ce8e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ce90:	2208      	movs	r2, #8
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	1a9b      	subs	r3, r3, r2
 800ce96:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	f023 0307 	bic.w	r3, r3, #7
 800ce9e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800cea0:	68fb      	ldr	r3, [r7, #12]
 800cea2:	4a15      	ldr	r2, [pc, #84]	; (800cef8 <prvHeapInit+0xb4>)
 800cea4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800cea6:	4b14      	ldr	r3, [pc, #80]	; (800cef8 <prvHeapInit+0xb4>)
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	2200      	movs	r2, #0
 800ceac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ceae:	4b12      	ldr	r3, [pc, #72]	; (800cef8 <prvHeapInit+0xb4>)
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	2200      	movs	r2, #0
 800ceb4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ceba:	683b      	ldr	r3, [r7, #0]
 800cebc:	68fa      	ldr	r2, [r7, #12]
 800cebe:	1ad2      	subs	r2, r2, r3
 800cec0:	683b      	ldr	r3, [r7, #0]
 800cec2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800cec4:	4b0c      	ldr	r3, [pc, #48]	; (800cef8 <prvHeapInit+0xb4>)
 800cec6:	681a      	ldr	r2, [r3, #0]
 800cec8:	683b      	ldr	r3, [r7, #0]
 800ceca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cecc:	683b      	ldr	r3, [r7, #0]
 800cece:	685b      	ldr	r3, [r3, #4]
 800ced0:	4a0a      	ldr	r2, [pc, #40]	; (800cefc <prvHeapInit+0xb8>)
 800ced2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ced4:	683b      	ldr	r3, [r7, #0]
 800ced6:	685b      	ldr	r3, [r3, #4]
 800ced8:	4a09      	ldr	r2, [pc, #36]	; (800cf00 <prvHeapInit+0xbc>)
 800ceda:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800cedc:	4b09      	ldr	r3, [pc, #36]	; (800cf04 <prvHeapInit+0xc0>)
 800cede:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800cee2:	601a      	str	r2, [r3, #0]
}
 800cee4:	bf00      	nop
 800cee6:	3714      	adds	r7, #20
 800cee8:	46bd      	mov	sp, r7
 800ceea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceee:	4770      	bx	lr
 800cef0:	20001634 	.word	0x20001634
 800cef4:	2000a234 	.word	0x2000a234
 800cef8:	2000a23c 	.word	0x2000a23c
 800cefc:	2000a244 	.word	0x2000a244
 800cf00:	2000a240 	.word	0x2000a240
 800cf04:	2000a250 	.word	0x2000a250

0800cf08 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800cf08:	b480      	push	{r7}
 800cf0a:	b085      	sub	sp, #20
 800cf0c:	af00      	add	r7, sp, #0
 800cf0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cf10:	4b28      	ldr	r3, [pc, #160]	; (800cfb4 <prvInsertBlockIntoFreeList+0xac>)
 800cf12:	60fb      	str	r3, [r7, #12]
 800cf14:	e002      	b.n	800cf1c <prvInsertBlockIntoFreeList+0x14>
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	60fb      	str	r3, [r7, #12]
 800cf1c:	68fb      	ldr	r3, [r7, #12]
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	687a      	ldr	r2, [r7, #4]
 800cf22:	429a      	cmp	r2, r3
 800cf24:	d8f7      	bhi.n	800cf16 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800cf26:	68fb      	ldr	r3, [r7, #12]
 800cf28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	685b      	ldr	r3, [r3, #4]
 800cf2e:	68ba      	ldr	r2, [r7, #8]
 800cf30:	4413      	add	r3, r2
 800cf32:	687a      	ldr	r2, [r7, #4]
 800cf34:	429a      	cmp	r2, r3
 800cf36:	d108      	bne.n	800cf4a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cf38:	68fb      	ldr	r3, [r7, #12]
 800cf3a:	685a      	ldr	r2, [r3, #4]
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	685b      	ldr	r3, [r3, #4]
 800cf40:	441a      	add	r2, r3
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	685b      	ldr	r3, [r3, #4]
 800cf52:	68ba      	ldr	r2, [r7, #8]
 800cf54:	441a      	add	r2, r3
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	429a      	cmp	r2, r3
 800cf5c:	d118      	bne.n	800cf90 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	681a      	ldr	r2, [r3, #0]
 800cf62:	4b15      	ldr	r3, [pc, #84]	; (800cfb8 <prvInsertBlockIntoFreeList+0xb0>)
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	429a      	cmp	r2, r3
 800cf68:	d00d      	beq.n	800cf86 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	685a      	ldr	r2, [r3, #4]
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	685b      	ldr	r3, [r3, #4]
 800cf74:	441a      	add	r2, r3
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	681a      	ldr	r2, [r3, #0]
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	601a      	str	r2, [r3, #0]
 800cf84:	e008      	b.n	800cf98 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800cf86:	4b0c      	ldr	r3, [pc, #48]	; (800cfb8 <prvInsertBlockIntoFreeList+0xb0>)
 800cf88:	681a      	ldr	r2, [r3, #0]
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	601a      	str	r2, [r3, #0]
 800cf8e:	e003      	b.n	800cf98 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	681a      	ldr	r2, [r3, #0]
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800cf98:	68fa      	ldr	r2, [r7, #12]
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	429a      	cmp	r2, r3
 800cf9e:	d002      	beq.n	800cfa6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800cfa0:	68fb      	ldr	r3, [r7, #12]
 800cfa2:	687a      	ldr	r2, [r7, #4]
 800cfa4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cfa6:	bf00      	nop
 800cfa8:	3714      	adds	r7, #20
 800cfaa:	46bd      	mov	sp, r7
 800cfac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfb0:	4770      	bx	lr
 800cfb2:	bf00      	nop
 800cfb4:	2000a234 	.word	0x2000a234
 800cfb8:	2000a23c 	.word	0x2000a23c

0800cfbc <netifapi_do_netif_common>:
 * Call the "errtfunc" (or the "voidfunc" if "errtfunc" is NULL) inside the
 * tcpip_thread context.
 */
static err_t
netifapi_do_netif_common(struct tcpip_api_call_data *m)
{
 800cfbc:	b580      	push	{r7, lr}
 800cfbe:	b084      	sub	sp, #16
 800cfc0:	af00      	add	r7, sp, #0
 800cfc2:	6078      	str	r0, [r7, #4]
  /* cast through void* to silence alignment warnings.
   * We know it works because the structs have been instantiated as struct netifapi_msg */
  struct netifapi_msg *msg = (struct netifapi_msg *)(void *)m;
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	60fb      	str	r3, [r7, #12]

  if (msg->msg.common.errtfunc != NULL) {
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	68db      	ldr	r3, [r3, #12]
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d007      	beq.n	800cfe0 <netifapi_do_netif_common+0x24>
    return msg->msg.common.errtfunc(msg->netif);
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	68db      	ldr	r3, [r3, #12]
 800cfd4:	68fa      	ldr	r2, [r7, #12]
 800cfd6:	6852      	ldr	r2, [r2, #4]
 800cfd8:	4610      	mov	r0, r2
 800cfda:	4798      	blx	r3
 800cfdc:	4603      	mov	r3, r0
 800cfde:	e006      	b.n	800cfee <netifapi_do_netif_common+0x32>
  } else {
    msg->msg.common.voidfunc(msg->netif);
 800cfe0:	68fb      	ldr	r3, [r7, #12]
 800cfe2:	689b      	ldr	r3, [r3, #8]
 800cfe4:	68fa      	ldr	r2, [r7, #12]
 800cfe6:	6852      	ldr	r2, [r2, #4]
 800cfe8:	4610      	mov	r0, r2
 800cfea:	4798      	blx	r3
    return ERR_OK;
 800cfec:	2300      	movs	r3, #0
  }
}
 800cfee:	4618      	mov	r0, r3
 800cff0:	3710      	adds	r7, #16
 800cff2:	46bd      	mov	sp, r7
 800cff4:	bd80      	pop	{r7, pc}
	...

0800cff8 <netifapi_netif_common>:
 * @note use only for functions where there is only "netif" parameter.
 */
err_t
netifapi_netif_common(struct netif *netif, netifapi_void_fn voidfunc,
                      netifapi_errt_fn errtfunc)
{
 800cff8:	b580      	push	{r7, lr}
 800cffa:	b08e      	sub	sp, #56	; 0x38
 800cffc:	af00      	add	r7, sp, #0
 800cffe:	60f8      	str	r0, [r7, #12]
 800d000:	60b9      	str	r1, [r7, #8]
 800d002:	607a      	str	r2, [r7, #4]
  err_t err;
  NETIFAPI_VAR_DECLARE(msg);
  NETIFAPI_VAR_ALLOC(msg);

  NETIFAPI_VAR_REF(msg).netif = netif;
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	61bb      	str	r3, [r7, #24]
  NETIFAPI_VAR_REF(msg).msg.common.voidfunc = voidfunc;
 800d008:	68bb      	ldr	r3, [r7, #8]
 800d00a:	61fb      	str	r3, [r7, #28]
  NETIFAPI_VAR_REF(msg).msg.common.errtfunc = errtfunc;
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	623b      	str	r3, [r7, #32]
  err = tcpip_api_call(netifapi_do_netif_common, &API_VAR_REF(msg).call);
 800d010:	f107 0314 	add.w	r3, r7, #20
 800d014:	4619      	mov	r1, r3
 800d016:	4806      	ldr	r0, [pc, #24]	; (800d030 <netifapi_netif_common+0x38>)
 800d018:	f000 f99a 	bl	800d350 <tcpip_api_call>
 800d01c:	4603      	mov	r3, r0
 800d01e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  NETIFAPI_VAR_FREE(msg);
  return err;
 800d022:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800d026:	4618      	mov	r0, r3
 800d028:	3738      	adds	r7, #56	; 0x38
 800d02a:	46bd      	mov	sp, r7
 800d02c:	bd80      	pop	{r7, pc}
 800d02e:	bf00      	nop
 800d030:	0800cfbd 	.word	0x0800cfbd

0800d034 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800d034:	b580      	push	{r7, lr}
 800d036:	b084      	sub	sp, #16
 800d038:	af00      	add	r7, sp, #0
 800d03a:	6078      	str	r0, [r7, #4]
 800d03c:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800d03e:	f007 fe33 	bl	8014ca8 <sys_timeouts_sleeptime>
 800d042:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d04a:	d10b      	bne.n	800d064 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800d04c:	4813      	ldr	r0, [pc, #76]	; (800d09c <tcpip_timeouts_mbox_fetch+0x68>)
 800d04e:	f00d f8be 	bl	801a1ce <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800d052:	2200      	movs	r2, #0
 800d054:	6839      	ldr	r1, [r7, #0]
 800d056:	6878      	ldr	r0, [r7, #4]
 800d058:	f00d f832 	bl	801a0c0 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800d05c:	480f      	ldr	r0, [pc, #60]	; (800d09c <tcpip_timeouts_mbox_fetch+0x68>)
 800d05e:	f00d f8a7 	bl	801a1b0 <sys_mutex_lock>
    return;
 800d062:	e018      	b.n	800d096 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	2b00      	cmp	r3, #0
 800d068:	d102      	bne.n	800d070 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800d06a:	f007 fde3 	bl	8014c34 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800d06e:	e7e6      	b.n	800d03e <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800d070:	480a      	ldr	r0, [pc, #40]	; (800d09c <tcpip_timeouts_mbox_fetch+0x68>)
 800d072:	f00d f8ac 	bl	801a1ce <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800d076:	68fa      	ldr	r2, [r7, #12]
 800d078:	6839      	ldr	r1, [r7, #0]
 800d07a:	6878      	ldr	r0, [r7, #4]
 800d07c:	f00d f820 	bl	801a0c0 <sys_arch_mbox_fetch>
 800d080:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800d082:	4806      	ldr	r0, [pc, #24]	; (800d09c <tcpip_timeouts_mbox_fetch+0x68>)
 800d084:	f00d f894 	bl	801a1b0 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800d088:	68bb      	ldr	r3, [r7, #8]
 800d08a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d08e:	d102      	bne.n	800d096 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800d090:	f007 fdd0 	bl	8014c34 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800d094:	e7d3      	b.n	800d03e <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800d096:	3710      	adds	r7, #16
 800d098:	46bd      	mov	sp, r7
 800d09a:	bd80      	pop	{r7, pc}
 800d09c:	2000a260 	.word	0x2000a260

0800d0a0 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800d0a0:	b580      	push	{r7, lr}
 800d0a2:	b084      	sub	sp, #16
 800d0a4:	af00      	add	r7, sp, #0
 800d0a6:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800d0a8:	4810      	ldr	r0, [pc, #64]	; (800d0ec <tcpip_thread+0x4c>)
 800d0aa:	f00d f881 	bl	801a1b0 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800d0ae:	4b10      	ldr	r3, [pc, #64]	; (800d0f0 <tcpip_thread+0x50>)
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d005      	beq.n	800d0c2 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800d0b6:	4b0e      	ldr	r3, [pc, #56]	; (800d0f0 <tcpip_thread+0x50>)
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	4a0e      	ldr	r2, [pc, #56]	; (800d0f4 <tcpip_thread+0x54>)
 800d0bc:	6812      	ldr	r2, [r2, #0]
 800d0be:	4610      	mov	r0, r2
 800d0c0:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800d0c2:	f107 030c 	add.w	r3, r7, #12
 800d0c6:	4619      	mov	r1, r3
 800d0c8:	480b      	ldr	r0, [pc, #44]	; (800d0f8 <tcpip_thread+0x58>)
 800d0ca:	f7ff ffb3 	bl	800d034 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d106      	bne.n	800d0e2 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800d0d4:	4b09      	ldr	r3, [pc, #36]	; (800d0fc <tcpip_thread+0x5c>)
 800d0d6:	2291      	movs	r2, #145	; 0x91
 800d0d8:	4909      	ldr	r1, [pc, #36]	; (800d100 <tcpip_thread+0x60>)
 800d0da:	480a      	ldr	r0, [pc, #40]	; (800d104 <tcpip_thread+0x64>)
 800d0dc:	f00d fe78 	bl	801add0 <iprintf>
      continue;
 800d0e0:	e003      	b.n	800d0ea <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	4618      	mov	r0, r3
 800d0e6:	f000 f80f 	bl	800d108 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800d0ea:	e7ea      	b.n	800d0c2 <tcpip_thread+0x22>
 800d0ec:	2000a260 	.word	0x2000a260
 800d0f0:	2000a254 	.word	0x2000a254
 800d0f4:	2000a258 	.word	0x2000a258
 800d0f8:	2000a25c 	.word	0x2000a25c
 800d0fc:	0801daf8 	.word	0x0801daf8
 800d100:	0801db28 	.word	0x0801db28
 800d104:	0801db48 	.word	0x0801db48

0800d108 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800d108:	b580      	push	{r7, lr}
 800d10a:	b082      	sub	sp, #8
 800d10c:	af00      	add	r7, sp, #0
 800d10e:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	781b      	ldrb	r3, [r3, #0]
 800d114:	2b02      	cmp	r3, #2
 800d116:	d026      	beq.n	800d166 <tcpip_thread_handle_msg+0x5e>
 800d118:	2b02      	cmp	r3, #2
 800d11a:	dc2b      	bgt.n	800d174 <tcpip_thread_handle_msg+0x6c>
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d002      	beq.n	800d126 <tcpip_thread_handle_msg+0x1e>
 800d120:	2b01      	cmp	r3, #1
 800d122:	d015      	beq.n	800d150 <tcpip_thread_handle_msg+0x48>
 800d124:	e026      	b.n	800d174 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	68db      	ldr	r3, [r3, #12]
 800d12a:	687a      	ldr	r2, [r7, #4]
 800d12c:	6850      	ldr	r0, [r2, #4]
 800d12e:	687a      	ldr	r2, [r7, #4]
 800d130:	6892      	ldr	r2, [r2, #8]
 800d132:	4611      	mov	r1, r2
 800d134:	4798      	blx	r3
 800d136:	4603      	mov	r3, r0
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d004      	beq.n	800d146 <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	685b      	ldr	r3, [r3, #4]
 800d140:	4618      	mov	r0, r3
 800d142:	f001 fe89 	bl	800ee58 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800d146:	6879      	ldr	r1, [r7, #4]
 800d148:	2009      	movs	r0, #9
 800d14a:	f000 ffe3 	bl	800e114 <memp_free>
      break;
 800d14e:	e018      	b.n	800d182 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	685b      	ldr	r3, [r3, #4]
 800d154:	687a      	ldr	r2, [r7, #4]
 800d156:	6892      	ldr	r2, [r2, #8]
 800d158:	4610      	mov	r0, r2
 800d15a:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800d15c:	6879      	ldr	r1, [r7, #4]
 800d15e:	2008      	movs	r0, #8
 800d160:	f000 ffd8 	bl	800e114 <memp_free>
      break;
 800d164:	e00d      	b.n	800d182 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	685b      	ldr	r3, [r3, #4]
 800d16a:	687a      	ldr	r2, [r7, #4]
 800d16c:	6892      	ldr	r2, [r2, #8]
 800d16e:	4610      	mov	r0, r2
 800d170:	4798      	blx	r3
      break;
 800d172:	e006      	b.n	800d182 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800d174:	4b05      	ldr	r3, [pc, #20]	; (800d18c <tcpip_thread_handle_msg+0x84>)
 800d176:	22cf      	movs	r2, #207	; 0xcf
 800d178:	4905      	ldr	r1, [pc, #20]	; (800d190 <tcpip_thread_handle_msg+0x88>)
 800d17a:	4806      	ldr	r0, [pc, #24]	; (800d194 <tcpip_thread_handle_msg+0x8c>)
 800d17c:	f00d fe28 	bl	801add0 <iprintf>
      break;
 800d180:	bf00      	nop
  }
}
 800d182:	bf00      	nop
 800d184:	3708      	adds	r7, #8
 800d186:	46bd      	mov	sp, r7
 800d188:	bd80      	pop	{r7, pc}
 800d18a:	bf00      	nop
 800d18c:	0801daf8 	.word	0x0801daf8
 800d190:	0801db28 	.word	0x0801db28
 800d194:	0801db48 	.word	0x0801db48

0800d198 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800d198:	b580      	push	{r7, lr}
 800d19a:	b086      	sub	sp, #24
 800d19c:	af00      	add	r7, sp, #0
 800d19e:	60f8      	str	r0, [r7, #12]
 800d1a0:	60b9      	str	r1, [r7, #8]
 800d1a2:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800d1a4:	481a      	ldr	r0, [pc, #104]	; (800d210 <tcpip_inpkt+0x78>)
 800d1a6:	f00c ffca 	bl	801a13e <sys_mbox_valid>
 800d1aa:	4603      	mov	r3, r0
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d105      	bne.n	800d1bc <tcpip_inpkt+0x24>
 800d1b0:	4b18      	ldr	r3, [pc, #96]	; (800d214 <tcpip_inpkt+0x7c>)
 800d1b2:	22fc      	movs	r2, #252	; 0xfc
 800d1b4:	4918      	ldr	r1, [pc, #96]	; (800d218 <tcpip_inpkt+0x80>)
 800d1b6:	4819      	ldr	r0, [pc, #100]	; (800d21c <tcpip_inpkt+0x84>)
 800d1b8:	f00d fe0a 	bl	801add0 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800d1bc:	2009      	movs	r0, #9
 800d1be:	f000 ff57 	bl	800e070 <memp_malloc>
 800d1c2:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800d1c4:	697b      	ldr	r3, [r7, #20]
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d102      	bne.n	800d1d0 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800d1ca:	f04f 33ff 	mov.w	r3, #4294967295
 800d1ce:	e01a      	b.n	800d206 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800d1d0:	697b      	ldr	r3, [r7, #20]
 800d1d2:	2200      	movs	r2, #0
 800d1d4:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800d1d6:	697b      	ldr	r3, [r7, #20]
 800d1d8:	68fa      	ldr	r2, [r7, #12]
 800d1da:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800d1dc:	697b      	ldr	r3, [r7, #20]
 800d1de:	68ba      	ldr	r2, [r7, #8]
 800d1e0:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800d1e2:	697b      	ldr	r3, [r7, #20]
 800d1e4:	687a      	ldr	r2, [r7, #4]
 800d1e6:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800d1e8:	6979      	ldr	r1, [r7, #20]
 800d1ea:	4809      	ldr	r0, [pc, #36]	; (800d210 <tcpip_inpkt+0x78>)
 800d1ec:	f00c ff4e 	bl	801a08c <sys_mbox_trypost>
 800d1f0:	4603      	mov	r3, r0
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d006      	beq.n	800d204 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800d1f6:	6979      	ldr	r1, [r7, #20]
 800d1f8:	2009      	movs	r0, #9
 800d1fa:	f000 ff8b 	bl	800e114 <memp_free>
    return ERR_MEM;
 800d1fe:	f04f 33ff 	mov.w	r3, #4294967295
 800d202:	e000      	b.n	800d206 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800d204:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800d206:	4618      	mov	r0, r3
 800d208:	3718      	adds	r7, #24
 800d20a:	46bd      	mov	sp, r7
 800d20c:	bd80      	pop	{r7, pc}
 800d20e:	bf00      	nop
 800d210:	2000a25c 	.word	0x2000a25c
 800d214:	0801daf8 	.word	0x0801daf8
 800d218:	0801db70 	.word	0x0801db70
 800d21c:	0801db48 	.word	0x0801db48

0800d220 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800d220:	b580      	push	{r7, lr}
 800d222:	b082      	sub	sp, #8
 800d224:	af00      	add	r7, sp, #0
 800d226:	6078      	str	r0, [r7, #4]
 800d228:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800d22a:	683b      	ldr	r3, [r7, #0]
 800d22c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d230:	f003 0318 	and.w	r3, r3, #24
 800d234:	2b00      	cmp	r3, #0
 800d236:	d006      	beq.n	800d246 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800d238:	4a08      	ldr	r2, [pc, #32]	; (800d25c <tcpip_input+0x3c>)
 800d23a:	6839      	ldr	r1, [r7, #0]
 800d23c:	6878      	ldr	r0, [r7, #4]
 800d23e:	f7ff ffab 	bl	800d198 <tcpip_inpkt>
 800d242:	4603      	mov	r3, r0
 800d244:	e005      	b.n	800d252 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800d246:	4a06      	ldr	r2, [pc, #24]	; (800d260 <tcpip_input+0x40>)
 800d248:	6839      	ldr	r1, [r7, #0]
 800d24a:	6878      	ldr	r0, [r7, #4]
 800d24c:	f7ff ffa4 	bl	800d198 <tcpip_inpkt>
 800d250:	4603      	mov	r3, r0
}
 800d252:	4618      	mov	r0, r3
 800d254:	3708      	adds	r7, #8
 800d256:	46bd      	mov	sp, r7
 800d258:	bd80      	pop	{r7, pc}
 800d25a:	bf00      	nop
 800d25c:	08019e79 	.word	0x08019e79
 800d260:	080189ed 	.word	0x080189ed

0800d264 <tcpip_callback>:
 *
 * @see tcpip_try_callback
 */
err_t
 tcpip_callback(tcpip_callback_fn function, void *ctx)
{
 800d264:	b580      	push	{r7, lr}
 800d266:	b084      	sub	sp, #16
 800d268:	af00      	add	r7, sp, #0
 800d26a:	6078      	str	r0, [r7, #4]
 800d26c:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800d26e:	4814      	ldr	r0, [pc, #80]	; (800d2c0 <tcpip_callback+0x5c>)
 800d270:	f00c ff65 	bl	801a13e <sys_mbox_valid>
 800d274:	4603      	mov	r3, r0
 800d276:	2b00      	cmp	r3, #0
 800d278:	d106      	bne.n	800d288 <tcpip_callback+0x24>
 800d27a:	4b12      	ldr	r3, [pc, #72]	; (800d2c4 <tcpip_callback+0x60>)
 800d27c:	f240 1239 	movw	r2, #313	; 0x139
 800d280:	4911      	ldr	r1, [pc, #68]	; (800d2c8 <tcpip_callback+0x64>)
 800d282:	4812      	ldr	r0, [pc, #72]	; (800d2cc <tcpip_callback+0x68>)
 800d284:	f00d fda4 	bl	801add0 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800d288:	2008      	movs	r0, #8
 800d28a:	f000 fef1 	bl	800e070 <memp_malloc>
 800d28e:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800d290:	68fb      	ldr	r3, [r7, #12]
 800d292:	2b00      	cmp	r3, #0
 800d294:	d102      	bne.n	800d29c <tcpip_callback+0x38>
    return ERR_MEM;
 800d296:	f04f 33ff 	mov.w	r3, #4294967295
 800d29a:	e00d      	b.n	800d2b8 <tcpip_callback+0x54>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	2201      	movs	r2, #1
 800d2a0:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	687a      	ldr	r2, [r7, #4]
 800d2a6:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	683a      	ldr	r2, [r7, #0]
 800d2ac:	609a      	str	r2, [r3, #8]

  sys_mbox_post(&tcpip_mbox, msg);
 800d2ae:	68f9      	ldr	r1, [r7, #12]
 800d2b0:	4803      	ldr	r0, [pc, #12]	; (800d2c0 <tcpip_callback+0x5c>)
 800d2b2:	f00c fed5 	bl	801a060 <sys_mbox_post>
  return ERR_OK;
 800d2b6:	2300      	movs	r3, #0
}
 800d2b8:	4618      	mov	r0, r3
 800d2ba:	3710      	adds	r7, #16
 800d2bc:	46bd      	mov	sp, r7
 800d2be:	bd80      	pop	{r7, pc}
 800d2c0:	2000a25c 	.word	0x2000a25c
 800d2c4:	0801daf8 	.word	0x0801daf8
 800d2c8:	0801db70 	.word	0x0801db70
 800d2cc:	0801db48 	.word	0x0801db48

0800d2d0 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800d2d0:	b580      	push	{r7, lr}
 800d2d2:	b084      	sub	sp, #16
 800d2d4:	af00      	add	r7, sp, #0
 800d2d6:	6078      	str	r0, [r7, #4]
 800d2d8:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800d2da:	4819      	ldr	r0, [pc, #100]	; (800d340 <tcpip_try_callback+0x70>)
 800d2dc:	f00c ff2f 	bl	801a13e <sys_mbox_valid>
 800d2e0:	4603      	mov	r3, r0
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d106      	bne.n	800d2f4 <tcpip_try_callback+0x24>
 800d2e6:	4b17      	ldr	r3, [pc, #92]	; (800d344 <tcpip_try_callback+0x74>)
 800d2e8:	f240 125d 	movw	r2, #349	; 0x15d
 800d2ec:	4916      	ldr	r1, [pc, #88]	; (800d348 <tcpip_try_callback+0x78>)
 800d2ee:	4817      	ldr	r0, [pc, #92]	; (800d34c <tcpip_try_callback+0x7c>)
 800d2f0:	f00d fd6e 	bl	801add0 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800d2f4:	2008      	movs	r0, #8
 800d2f6:	f000 febb 	bl	800e070 <memp_malloc>
 800d2fa:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d102      	bne.n	800d308 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800d302:	f04f 33ff 	mov.w	r3, #4294967295
 800d306:	e017      	b.n	800d338 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800d308:	68fb      	ldr	r3, [r7, #12]
 800d30a:	2201      	movs	r2, #1
 800d30c:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800d30e:	68fb      	ldr	r3, [r7, #12]
 800d310:	687a      	ldr	r2, [r7, #4]
 800d312:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	683a      	ldr	r2, [r7, #0]
 800d318:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800d31a:	68f9      	ldr	r1, [r7, #12]
 800d31c:	4808      	ldr	r0, [pc, #32]	; (800d340 <tcpip_try_callback+0x70>)
 800d31e:	f00c feb5 	bl	801a08c <sys_mbox_trypost>
 800d322:	4603      	mov	r3, r0
 800d324:	2b00      	cmp	r3, #0
 800d326:	d006      	beq.n	800d336 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800d328:	68f9      	ldr	r1, [r7, #12]
 800d32a:	2008      	movs	r0, #8
 800d32c:	f000 fef2 	bl	800e114 <memp_free>
    return ERR_MEM;
 800d330:	f04f 33ff 	mov.w	r3, #4294967295
 800d334:	e000      	b.n	800d338 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800d336:	2300      	movs	r3, #0
}
 800d338:	4618      	mov	r0, r3
 800d33a:	3710      	adds	r7, #16
 800d33c:	46bd      	mov	sp, r7
 800d33e:	bd80      	pop	{r7, pc}
 800d340:	2000a25c 	.word	0x2000a25c
 800d344:	0801daf8 	.word	0x0801daf8
 800d348:	0801db70 	.word	0x0801db70
 800d34c:	0801db48 	.word	0x0801db48

0800d350 <tcpip_api_call>:
 * @param call Call parameters
 * @return Return value from tcpip_api_call_fn
 */
err_t
tcpip_api_call(tcpip_api_call_fn fn, struct tcpip_api_call_data *call)
{
 800d350:	b580      	push	{r7, lr}
 800d352:	b084      	sub	sp, #16
 800d354:	af00      	add	r7, sp, #0
 800d356:	6078      	str	r0, [r7, #4]
 800d358:	6039      	str	r1, [r7, #0]
#if LWIP_TCPIP_CORE_LOCKING
  err_t err;
  LOCK_TCPIP_CORE();
 800d35a:	4808      	ldr	r0, [pc, #32]	; (800d37c <tcpip_api_call+0x2c>)
 800d35c:	f00c ff28 	bl	801a1b0 <sys_mutex_lock>
  err = fn(call);
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	6838      	ldr	r0, [r7, #0]
 800d364:	4798      	blx	r3
 800d366:	4603      	mov	r3, r0
 800d368:	73fb      	strb	r3, [r7, #15]
  UNLOCK_TCPIP_CORE();
 800d36a:	4804      	ldr	r0, [pc, #16]	; (800d37c <tcpip_api_call+0x2c>)
 800d36c:	f00c ff2f 	bl	801a1ce <sys_mutex_unlock>
  return err;
 800d370:	f997 300f 	ldrsb.w	r3, [r7, #15]
  sys_sem_free(&call->sem);
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  return call->err;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800d374:	4618      	mov	r0, r3
 800d376:	3710      	adds	r7, #16
 800d378:	46bd      	mov	sp, r7
 800d37a:	bd80      	pop	{r7, pc}
 800d37c:	2000a260 	.word	0x2000a260

0800d380 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800d380:	b580      	push	{r7, lr}
 800d382:	b084      	sub	sp, #16
 800d384:	af02      	add	r7, sp, #8
 800d386:	6078      	str	r0, [r7, #4]
 800d388:	6039      	str	r1, [r7, #0]
  lwip_init();
 800d38a:	f000 f9ea 	bl	800d762 <lwip_init>

  tcpip_init_done = initfunc;
 800d38e:	4a17      	ldr	r2, [pc, #92]	; (800d3ec <tcpip_init+0x6c>)
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800d394:	4a16      	ldr	r2, [pc, #88]	; (800d3f0 <tcpip_init+0x70>)
 800d396:	683b      	ldr	r3, [r7, #0]
 800d398:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800d39a:	210a      	movs	r1, #10
 800d39c:	4815      	ldr	r0, [pc, #84]	; (800d3f4 <tcpip_init+0x74>)
 800d39e:	f00c fe41 	bl	801a024 <sys_mbox_new>
 800d3a2:	4603      	mov	r3, r0
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d006      	beq.n	800d3b6 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800d3a8:	4b13      	ldr	r3, [pc, #76]	; (800d3f8 <tcpip_init+0x78>)
 800d3aa:	f240 2261 	movw	r2, #609	; 0x261
 800d3ae:	4913      	ldr	r1, [pc, #76]	; (800d3fc <tcpip_init+0x7c>)
 800d3b0:	4813      	ldr	r0, [pc, #76]	; (800d400 <tcpip_init+0x80>)
 800d3b2:	f00d fd0d 	bl	801add0 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800d3b6:	4813      	ldr	r0, [pc, #76]	; (800d404 <tcpip_init+0x84>)
 800d3b8:	f00c fee0 	bl	801a17c <sys_mutex_new>
 800d3bc:	4603      	mov	r3, r0
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d006      	beq.n	800d3d0 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800d3c2:	4b0d      	ldr	r3, [pc, #52]	; (800d3f8 <tcpip_init+0x78>)
 800d3c4:	f240 2265 	movw	r2, #613	; 0x265
 800d3c8:	490f      	ldr	r1, [pc, #60]	; (800d408 <tcpip_init+0x88>)
 800d3ca:	480d      	ldr	r0, [pc, #52]	; (800d400 <tcpip_init+0x80>)
 800d3cc:	f00d fd00 	bl	801add0 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800d3d0:	f04f 33ff 	mov.w	r3, #4294967295
 800d3d4:	9300      	str	r3, [sp, #0]
 800d3d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d3da:	2200      	movs	r2, #0
 800d3dc:	490b      	ldr	r1, [pc, #44]	; (800d40c <tcpip_init+0x8c>)
 800d3de:	480c      	ldr	r0, [pc, #48]	; (800d410 <tcpip_init+0x90>)
 800d3e0:	f00c ff02 	bl	801a1e8 <sys_thread_new>
}
 800d3e4:	bf00      	nop
 800d3e6:	3708      	adds	r7, #8
 800d3e8:	46bd      	mov	sp, r7
 800d3ea:	bd80      	pop	{r7, pc}
 800d3ec:	2000a254 	.word	0x2000a254
 800d3f0:	2000a258 	.word	0x2000a258
 800d3f4:	2000a25c 	.word	0x2000a25c
 800d3f8:	0801daf8 	.word	0x0801daf8
 800d3fc:	0801db80 	.word	0x0801db80
 800d400:	0801db48 	.word	0x0801db48
 800d404:	2000a260 	.word	0x2000a260
 800d408:	0801dba4 	.word	0x0801dba4
 800d40c:	0800d0a1 	.word	0x0800d0a1
 800d410:	0801dbc8 	.word	0x0801dbc8

0800d414 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800d414:	b480      	push	{r7}
 800d416:	b083      	sub	sp, #12
 800d418:	af00      	add	r7, sp, #0
 800d41a:	4603      	mov	r3, r0
 800d41c:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800d41e:	88fb      	ldrh	r3, [r7, #6]
 800d420:	021b      	lsls	r3, r3, #8
 800d422:	b21a      	sxth	r2, r3
 800d424:	88fb      	ldrh	r3, [r7, #6]
 800d426:	0a1b      	lsrs	r3, r3, #8
 800d428:	b29b      	uxth	r3, r3
 800d42a:	b21b      	sxth	r3, r3
 800d42c:	4313      	orrs	r3, r2
 800d42e:	b21b      	sxth	r3, r3
 800d430:	b29b      	uxth	r3, r3
}
 800d432:	4618      	mov	r0, r3
 800d434:	370c      	adds	r7, #12
 800d436:	46bd      	mov	sp, r7
 800d438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d43c:	4770      	bx	lr

0800d43e <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800d43e:	b480      	push	{r7}
 800d440:	b083      	sub	sp, #12
 800d442:	af00      	add	r7, sp, #0
 800d444:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	061a      	lsls	r2, r3, #24
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	021b      	lsls	r3, r3, #8
 800d44e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d452:	431a      	orrs	r2, r3
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	0a1b      	lsrs	r3, r3, #8
 800d458:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800d45c:	431a      	orrs	r2, r3
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	0e1b      	lsrs	r3, r3, #24
 800d462:	4313      	orrs	r3, r2
}
 800d464:	4618      	mov	r0, r3
 800d466:	370c      	adds	r7, #12
 800d468:	46bd      	mov	sp, r7
 800d46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d46e:	4770      	bx	lr

0800d470 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 800d470:	b480      	push	{r7}
 800d472:	b089      	sub	sp, #36	; 0x24
 800d474:	af00      	add	r7, sp, #0
 800d476:	6078      	str	r0, [r7, #4]
 800d478:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 800d47e:	2300      	movs	r3, #0
 800d480:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 800d482:	2300      	movs	r3, #0
 800d484:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 800d486:	69fb      	ldr	r3, [r7, #28]
 800d488:	f003 0301 	and.w	r3, r3, #1
 800d48c:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 800d48e:	693b      	ldr	r3, [r7, #16]
 800d490:	2b00      	cmp	r3, #0
 800d492:	d00d      	beq.n	800d4b0 <lwip_standard_chksum+0x40>
 800d494:	683b      	ldr	r3, [r7, #0]
 800d496:	2b00      	cmp	r3, #0
 800d498:	dd0a      	ble.n	800d4b0 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 800d49a:	69fa      	ldr	r2, [r7, #28]
 800d49c:	1c53      	adds	r3, r2, #1
 800d49e:	61fb      	str	r3, [r7, #28]
 800d4a0:	f107 030e 	add.w	r3, r7, #14
 800d4a4:	3301      	adds	r3, #1
 800d4a6:	7812      	ldrb	r2, [r2, #0]
 800d4a8:	701a      	strb	r2, [r3, #0]
    len--;
 800d4aa:	683b      	ldr	r3, [r7, #0]
 800d4ac:	3b01      	subs	r3, #1
 800d4ae:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 800d4b0:	69fb      	ldr	r3, [r7, #28]
 800d4b2:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 800d4b4:	e00a      	b.n	800d4cc <lwip_standard_chksum+0x5c>
    sum += *ps++;
 800d4b6:	69bb      	ldr	r3, [r7, #24]
 800d4b8:	1c9a      	adds	r2, r3, #2
 800d4ba:	61ba      	str	r2, [r7, #24]
 800d4bc:	881b      	ldrh	r3, [r3, #0]
 800d4be:	461a      	mov	r2, r3
 800d4c0:	697b      	ldr	r3, [r7, #20]
 800d4c2:	4413      	add	r3, r2
 800d4c4:	617b      	str	r3, [r7, #20]
    len -= 2;
 800d4c6:	683b      	ldr	r3, [r7, #0]
 800d4c8:	3b02      	subs	r3, #2
 800d4ca:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 800d4cc:	683b      	ldr	r3, [r7, #0]
 800d4ce:	2b01      	cmp	r3, #1
 800d4d0:	dcf1      	bgt.n	800d4b6 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 800d4d2:	683b      	ldr	r3, [r7, #0]
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	dd04      	ble.n	800d4e2 <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 800d4d8:	f107 030e 	add.w	r3, r7, #14
 800d4dc:	69ba      	ldr	r2, [r7, #24]
 800d4de:	7812      	ldrb	r2, [r2, #0]
 800d4e0:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 800d4e2:	89fb      	ldrh	r3, [r7, #14]
 800d4e4:	461a      	mov	r2, r3
 800d4e6:	697b      	ldr	r3, [r7, #20]
 800d4e8:	4413      	add	r3, r2
 800d4ea:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 800d4ec:	697b      	ldr	r3, [r7, #20]
 800d4ee:	0c1a      	lsrs	r2, r3, #16
 800d4f0:	697b      	ldr	r3, [r7, #20]
 800d4f2:	b29b      	uxth	r3, r3
 800d4f4:	4413      	add	r3, r2
 800d4f6:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 800d4f8:	697b      	ldr	r3, [r7, #20]
 800d4fa:	0c1a      	lsrs	r2, r3, #16
 800d4fc:	697b      	ldr	r3, [r7, #20]
 800d4fe:	b29b      	uxth	r3, r3
 800d500:	4413      	add	r3, r2
 800d502:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 800d504:	693b      	ldr	r3, [r7, #16]
 800d506:	2b00      	cmp	r3, #0
 800d508:	d007      	beq.n	800d51a <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 800d50a:	697b      	ldr	r3, [r7, #20]
 800d50c:	021b      	lsls	r3, r3, #8
 800d50e:	b29a      	uxth	r2, r3
 800d510:	697b      	ldr	r3, [r7, #20]
 800d512:	0a1b      	lsrs	r3, r3, #8
 800d514:	b2db      	uxtb	r3, r3
 800d516:	4313      	orrs	r3, r2
 800d518:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 800d51a:	697b      	ldr	r3, [r7, #20]
 800d51c:	b29b      	uxth	r3, r3
}
 800d51e:	4618      	mov	r0, r3
 800d520:	3724      	adds	r7, #36	; 0x24
 800d522:	46bd      	mov	sp, r7
 800d524:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d528:	4770      	bx	lr

0800d52a <inet_cksum_pseudo_base>:
#endif

/** Parts of the pseudo checksum which are common to IPv4 and IPv6 */
static u16_t
inet_cksum_pseudo_base(struct pbuf *p, u8_t proto, u16_t proto_len, u32_t acc)
{
 800d52a:	b580      	push	{r7, lr}
 800d52c:	b086      	sub	sp, #24
 800d52e:	af00      	add	r7, sp, #0
 800d530:	60f8      	str	r0, [r7, #12]
 800d532:	607b      	str	r3, [r7, #4]
 800d534:	460b      	mov	r3, r1
 800d536:	72fb      	strb	r3, [r7, #11]
 800d538:	4613      	mov	r3, r2
 800d53a:	813b      	strh	r3, [r7, #8]
  struct pbuf *q;
  int swapped = 0;
 800d53c:	2300      	movs	r3, #0
 800d53e:	613b      	str	r3, [r7, #16]

  /* iterate through all pbuf in chain */
  for (q = p; q != NULL; q = q->next) {
 800d540:	68fb      	ldr	r3, [r7, #12]
 800d542:	617b      	str	r3, [r7, #20]
 800d544:	e02b      	b.n	800d59e <inet_cksum_pseudo_base+0x74>
    LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): checksumming pbuf %p (has next %p) \n",
                             (void *)q, (void *)q->next));
    acc += LWIP_CHKSUM(q->payload, q->len);
 800d546:	697b      	ldr	r3, [r7, #20]
 800d548:	685a      	ldr	r2, [r3, #4]
 800d54a:	697b      	ldr	r3, [r7, #20]
 800d54c:	895b      	ldrh	r3, [r3, #10]
 800d54e:	4619      	mov	r1, r3
 800d550:	4610      	mov	r0, r2
 800d552:	f7ff ff8d 	bl	800d470 <lwip_standard_chksum>
 800d556:	4603      	mov	r3, r0
 800d558:	461a      	mov	r2, r3
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	4413      	add	r3, r2
 800d55e:	607b      	str	r3, [r7, #4]
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): unwrapped lwip_chksum()=%"X32_F" \n", acc));*/
    /* just executing this next line is probably faster that the if statement needed
       to check whether we really need to execute it, and does no harm */
    acc = FOLD_U32T(acc);
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	0c1a      	lsrs	r2, r3, #16
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	b29b      	uxth	r3, r3
 800d568:	4413      	add	r3, r2
 800d56a:	607b      	str	r3, [r7, #4]
    if (q->len % 2 != 0) {
 800d56c:	697b      	ldr	r3, [r7, #20]
 800d56e:	895b      	ldrh	r3, [r3, #10]
 800d570:	f003 0301 	and.w	r3, r3, #1
 800d574:	b29b      	uxth	r3, r3
 800d576:	2b00      	cmp	r3, #0
 800d578:	d00e      	beq.n	800d598 <inet_cksum_pseudo_base+0x6e>
      swapped = !swapped;
 800d57a:	693b      	ldr	r3, [r7, #16]
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	bf0c      	ite	eq
 800d580:	2301      	moveq	r3, #1
 800d582:	2300      	movne	r3, #0
 800d584:	b2db      	uxtb	r3, r3
 800d586:	613b      	str	r3, [r7, #16]
      acc = SWAP_BYTES_IN_WORD(acc);
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	021b      	lsls	r3, r3, #8
 800d58c:	b29a      	uxth	r2, r3
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	0a1b      	lsrs	r3, r3, #8
 800d592:	b2db      	uxtb	r3, r3
 800d594:	4313      	orrs	r3, r2
 800d596:	607b      	str	r3, [r7, #4]
  for (q = p; q != NULL; q = q->next) {
 800d598:	697b      	ldr	r3, [r7, #20]
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	617b      	str	r3, [r7, #20]
 800d59e:	697b      	ldr	r3, [r7, #20]
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d1d0      	bne.n	800d546 <inet_cksum_pseudo_base+0x1c>
    }
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): wrapped lwip_chksum()=%"X32_F" \n", acc));*/
  }

  if (swapped) {
 800d5a4:	693b      	ldr	r3, [r7, #16]
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d007      	beq.n	800d5ba <inet_cksum_pseudo_base+0x90>
    acc = SWAP_BYTES_IN_WORD(acc);
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	021b      	lsls	r3, r3, #8
 800d5ae:	b29a      	uxth	r2, r3
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	0a1b      	lsrs	r3, r3, #8
 800d5b4:	b2db      	uxtb	r3, r3
 800d5b6:	4313      	orrs	r3, r2
 800d5b8:	607b      	str	r3, [r7, #4]
  }

  acc += (u32_t)lwip_htons((u16_t)proto);
 800d5ba:	7afb      	ldrb	r3, [r7, #11]
 800d5bc:	b29b      	uxth	r3, r3
 800d5be:	4618      	mov	r0, r3
 800d5c0:	f7ff ff28 	bl	800d414 <lwip_htons>
 800d5c4:	4603      	mov	r3, r0
 800d5c6:	461a      	mov	r2, r3
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	4413      	add	r3, r2
 800d5cc:	607b      	str	r3, [r7, #4]
  acc += (u32_t)lwip_htons(proto_len);
 800d5ce:	893b      	ldrh	r3, [r7, #8]
 800d5d0:	4618      	mov	r0, r3
 800d5d2:	f7ff ff1f 	bl	800d414 <lwip_htons>
 800d5d6:	4603      	mov	r3, r0
 800d5d8:	461a      	mov	r2, r3
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	4413      	add	r3, r2
 800d5de:	607b      	str	r3, [r7, #4]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  acc = FOLD_U32T(acc);
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	0c1a      	lsrs	r2, r3, #16
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	b29b      	uxth	r3, r3
 800d5e8:	4413      	add	r3, r2
 800d5ea:	607b      	str	r3, [r7, #4]
  acc = FOLD_U32T(acc);
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	0c1a      	lsrs	r2, r3, #16
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	b29b      	uxth	r3, r3
 800d5f4:	4413      	add	r3, r2
 800d5f6:	607b      	str	r3, [r7, #4]
  LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): pbuf chain lwip_chksum()=%"X32_F"\n", acc));
  return (u16_t)~(acc & 0xffffUL);
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	b29b      	uxth	r3, r3
 800d5fc:	43db      	mvns	r3, r3
 800d5fe:	b29b      	uxth	r3, r3
}
 800d600:	4618      	mov	r0, r3
 800d602:	3718      	adds	r7, #24
 800d604:	46bd      	mov	sp, r7
 800d606:	bd80      	pop	{r7, pc}

0800d608 <inet_chksum_pseudo>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
                   const ip4_addr_t *src, const ip4_addr_t *dest)
{
 800d608:	b580      	push	{r7, lr}
 800d60a:	b086      	sub	sp, #24
 800d60c:	af00      	add	r7, sp, #0
 800d60e:	60f8      	str	r0, [r7, #12]
 800d610:	607b      	str	r3, [r7, #4]
 800d612:	460b      	mov	r3, r1
 800d614:	72fb      	strb	r3, [r7, #11]
 800d616:	4613      	mov	r3, r2
 800d618:	813b      	strh	r3, [r7, #8]
  u32_t acc;
  u32_t addr;

  addr = ip4_addr_get_u32(src);
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	617b      	str	r3, [r7, #20]
  acc = (addr & 0xffffUL);
 800d620:	697b      	ldr	r3, [r7, #20]
 800d622:	b29b      	uxth	r3, r3
 800d624:	613b      	str	r3, [r7, #16]
  acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
 800d626:	697b      	ldr	r3, [r7, #20]
 800d628:	0c1b      	lsrs	r3, r3, #16
 800d62a:	693a      	ldr	r2, [r7, #16]
 800d62c:	4413      	add	r3, r2
 800d62e:	613b      	str	r3, [r7, #16]
  addr = ip4_addr_get_u32(dest);
 800d630:	6a3b      	ldr	r3, [r7, #32]
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	617b      	str	r3, [r7, #20]
  acc = (u32_t)(acc + (addr & 0xffffUL));
 800d636:	697b      	ldr	r3, [r7, #20]
 800d638:	b29b      	uxth	r3, r3
 800d63a:	693a      	ldr	r2, [r7, #16]
 800d63c:	4413      	add	r3, r2
 800d63e:	613b      	str	r3, [r7, #16]
  acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
 800d640:	697b      	ldr	r3, [r7, #20]
 800d642:	0c1b      	lsrs	r3, r3, #16
 800d644:	693a      	ldr	r2, [r7, #16]
 800d646:	4413      	add	r3, r2
 800d648:	613b      	str	r3, [r7, #16]
  /* fold down to 16 bits */
  acc = FOLD_U32T(acc);
 800d64a:	693b      	ldr	r3, [r7, #16]
 800d64c:	0c1a      	lsrs	r2, r3, #16
 800d64e:	693b      	ldr	r3, [r7, #16]
 800d650:	b29b      	uxth	r3, r3
 800d652:	4413      	add	r3, r2
 800d654:	613b      	str	r3, [r7, #16]
  acc = FOLD_U32T(acc);
 800d656:	693b      	ldr	r3, [r7, #16]
 800d658:	0c1a      	lsrs	r2, r3, #16
 800d65a:	693b      	ldr	r3, [r7, #16]
 800d65c:	b29b      	uxth	r3, r3
 800d65e:	4413      	add	r3, r2
 800d660:	613b      	str	r3, [r7, #16]

  return inet_cksum_pseudo_base(p, proto, proto_len, acc);
 800d662:	893a      	ldrh	r2, [r7, #8]
 800d664:	7af9      	ldrb	r1, [r7, #11]
 800d666:	693b      	ldr	r3, [r7, #16]
 800d668:	68f8      	ldr	r0, [r7, #12]
 800d66a:	f7ff ff5e 	bl	800d52a <inet_cksum_pseudo_base>
 800d66e:	4603      	mov	r3, r0
}
 800d670:	4618      	mov	r0, r3
 800d672:	3718      	adds	r7, #24
 800d674:	46bd      	mov	sp, r7
 800d676:	bd80      	pop	{r7, pc}

0800d678 <ip_chksum_pseudo>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
ip_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
                 const ip_addr_t *src, const ip_addr_t *dest)
{
 800d678:	b580      	push	{r7, lr}
 800d67a:	b086      	sub	sp, #24
 800d67c:	af02      	add	r7, sp, #8
 800d67e:	60f8      	str	r0, [r7, #12]
 800d680:	607b      	str	r3, [r7, #4]
 800d682:	460b      	mov	r3, r1
 800d684:	72fb      	strb	r3, [r7, #11]
 800d686:	4613      	mov	r3, r2
 800d688:	813b      	strh	r3, [r7, #8]
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  {
    return inet_chksum_pseudo(p, proto, proto_len, ip_2_ip4(src), ip_2_ip4(dest));
 800d68a:	893a      	ldrh	r2, [r7, #8]
 800d68c:	7af9      	ldrb	r1, [r7, #11]
 800d68e:	69bb      	ldr	r3, [r7, #24]
 800d690:	9300      	str	r3, [sp, #0]
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	68f8      	ldr	r0, [r7, #12]
 800d696:	f7ff ffb7 	bl	800d608 <inet_chksum_pseudo>
 800d69a:	4603      	mov	r3, r0
  }
#endif /* LWIP_IPV4 */
}
 800d69c:	4618      	mov	r0, r3
 800d69e:	3710      	adds	r7, #16
 800d6a0:	46bd      	mov	sp, r7
 800d6a2:	bd80      	pop	{r7, pc}

0800d6a4 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 800d6a4:	b580      	push	{r7, lr}
 800d6a6:	b082      	sub	sp, #8
 800d6a8:	af00      	add	r7, sp, #0
 800d6aa:	6078      	str	r0, [r7, #4]
 800d6ac:	460b      	mov	r3, r1
 800d6ae:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 800d6b0:	887b      	ldrh	r3, [r7, #2]
 800d6b2:	4619      	mov	r1, r3
 800d6b4:	6878      	ldr	r0, [r7, #4]
 800d6b6:	f7ff fedb 	bl	800d470 <lwip_standard_chksum>
 800d6ba:	4603      	mov	r3, r0
 800d6bc:	43db      	mvns	r3, r3
 800d6be:	b29b      	uxth	r3, r3
}
 800d6c0:	4618      	mov	r0, r3
 800d6c2:	3708      	adds	r7, #8
 800d6c4:	46bd      	mov	sp, r7
 800d6c6:	bd80      	pop	{r7, pc}

0800d6c8 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 800d6c8:	b580      	push	{r7, lr}
 800d6ca:	b086      	sub	sp, #24
 800d6cc:	af00      	add	r7, sp, #0
 800d6ce:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 800d6d0:	2300      	movs	r3, #0
 800d6d2:	60fb      	str	r3, [r7, #12]

  acc = 0;
 800d6d4:	2300      	movs	r3, #0
 800d6d6:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	613b      	str	r3, [r7, #16]
 800d6dc:	e02b      	b.n	800d736 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 800d6de:	693b      	ldr	r3, [r7, #16]
 800d6e0:	685a      	ldr	r2, [r3, #4]
 800d6e2:	693b      	ldr	r3, [r7, #16]
 800d6e4:	895b      	ldrh	r3, [r3, #10]
 800d6e6:	4619      	mov	r1, r3
 800d6e8:	4610      	mov	r0, r2
 800d6ea:	f7ff fec1 	bl	800d470 <lwip_standard_chksum>
 800d6ee:	4603      	mov	r3, r0
 800d6f0:	461a      	mov	r2, r3
 800d6f2:	697b      	ldr	r3, [r7, #20]
 800d6f4:	4413      	add	r3, r2
 800d6f6:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 800d6f8:	697b      	ldr	r3, [r7, #20]
 800d6fa:	0c1a      	lsrs	r2, r3, #16
 800d6fc:	697b      	ldr	r3, [r7, #20]
 800d6fe:	b29b      	uxth	r3, r3
 800d700:	4413      	add	r3, r2
 800d702:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 800d704:	693b      	ldr	r3, [r7, #16]
 800d706:	895b      	ldrh	r3, [r3, #10]
 800d708:	f003 0301 	and.w	r3, r3, #1
 800d70c:	b29b      	uxth	r3, r3
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d00e      	beq.n	800d730 <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 800d712:	68fb      	ldr	r3, [r7, #12]
 800d714:	2b00      	cmp	r3, #0
 800d716:	bf0c      	ite	eq
 800d718:	2301      	moveq	r3, #1
 800d71a:	2300      	movne	r3, #0
 800d71c:	b2db      	uxtb	r3, r3
 800d71e:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 800d720:	697b      	ldr	r3, [r7, #20]
 800d722:	021b      	lsls	r3, r3, #8
 800d724:	b29a      	uxth	r2, r3
 800d726:	697b      	ldr	r3, [r7, #20]
 800d728:	0a1b      	lsrs	r3, r3, #8
 800d72a:	b2db      	uxtb	r3, r3
 800d72c:	4313      	orrs	r3, r2
 800d72e:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800d730:	693b      	ldr	r3, [r7, #16]
 800d732:	681b      	ldr	r3, [r3, #0]
 800d734:	613b      	str	r3, [r7, #16]
 800d736:	693b      	ldr	r3, [r7, #16]
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d1d0      	bne.n	800d6de <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 800d73c:	68fb      	ldr	r3, [r7, #12]
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d007      	beq.n	800d752 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 800d742:	697b      	ldr	r3, [r7, #20]
 800d744:	021b      	lsls	r3, r3, #8
 800d746:	b29a      	uxth	r2, r3
 800d748:	697b      	ldr	r3, [r7, #20]
 800d74a:	0a1b      	lsrs	r3, r3, #8
 800d74c:	b2db      	uxtb	r3, r3
 800d74e:	4313      	orrs	r3, r2
 800d750:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 800d752:	697b      	ldr	r3, [r7, #20]
 800d754:	b29b      	uxth	r3, r3
 800d756:	43db      	mvns	r3, r3
 800d758:	b29b      	uxth	r3, r3
}
 800d75a:	4618      	mov	r0, r3
 800d75c:	3718      	adds	r7, #24
 800d75e:	46bd      	mov	sp, r7
 800d760:	bd80      	pop	{r7, pc}

0800d762 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800d762:	b580      	push	{r7, lr}
 800d764:	b082      	sub	sp, #8
 800d766:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800d768:	2300      	movs	r3, #0
 800d76a:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800d76c:	f00c fcf8 	bl	801a160 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800d770:	f000 f8d4 	bl	800d91c <mem_init>
  memp_init();
 800d774:	f000 fc30 	bl	800dfd8 <memp_init>
  pbuf_init();
  netif_init();
 800d778:	f000 fcf6 	bl	800e168 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800d77c:	f007 facc 	bl	8014d18 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800d780:	f001 ffa8 	bl	800f6d4 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800d784:	f007 fa0e 	bl	8014ba4 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800d788:	bf00      	nop
 800d78a:	3708      	adds	r7, #8
 800d78c:	46bd      	mov	sp, r7
 800d78e:	bd80      	pop	{r7, pc}

0800d790 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800d790:	b480      	push	{r7}
 800d792:	b083      	sub	sp, #12
 800d794:	af00      	add	r7, sp, #0
 800d796:	4603      	mov	r3, r0
 800d798:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800d79a:	4b05      	ldr	r3, [pc, #20]	; (800d7b0 <ptr_to_mem+0x20>)
 800d79c:	681a      	ldr	r2, [r3, #0]
 800d79e:	88fb      	ldrh	r3, [r7, #6]
 800d7a0:	4413      	add	r3, r2
}
 800d7a2:	4618      	mov	r0, r3
 800d7a4:	370c      	adds	r7, #12
 800d7a6:	46bd      	mov	sp, r7
 800d7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ac:	4770      	bx	lr
 800d7ae:	bf00      	nop
 800d7b0:	2000f290 	.word	0x2000f290

0800d7b4 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800d7b4:	b480      	push	{r7}
 800d7b6:	b083      	sub	sp, #12
 800d7b8:	af00      	add	r7, sp, #0
 800d7ba:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800d7bc:	4b05      	ldr	r3, [pc, #20]	; (800d7d4 <mem_to_ptr+0x20>)
 800d7be:	681b      	ldr	r3, [r3, #0]
 800d7c0:	687a      	ldr	r2, [r7, #4]
 800d7c2:	1ad3      	subs	r3, r2, r3
 800d7c4:	b29b      	uxth	r3, r3
}
 800d7c6:	4618      	mov	r0, r3
 800d7c8:	370c      	adds	r7, #12
 800d7ca:	46bd      	mov	sp, r7
 800d7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7d0:	4770      	bx	lr
 800d7d2:	bf00      	nop
 800d7d4:	2000f290 	.word	0x2000f290

0800d7d8 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800d7d8:	b590      	push	{r4, r7, lr}
 800d7da:	b085      	sub	sp, #20
 800d7dc:	af00      	add	r7, sp, #0
 800d7de:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800d7e0:	4b45      	ldr	r3, [pc, #276]	; (800d8f8 <plug_holes+0x120>)
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	687a      	ldr	r2, [r7, #4]
 800d7e6:	429a      	cmp	r2, r3
 800d7e8:	d206      	bcs.n	800d7f8 <plug_holes+0x20>
 800d7ea:	4b44      	ldr	r3, [pc, #272]	; (800d8fc <plug_holes+0x124>)
 800d7ec:	f240 12df 	movw	r2, #479	; 0x1df
 800d7f0:	4943      	ldr	r1, [pc, #268]	; (800d900 <plug_holes+0x128>)
 800d7f2:	4844      	ldr	r0, [pc, #272]	; (800d904 <plug_holes+0x12c>)
 800d7f4:	f00d faec 	bl	801add0 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800d7f8:	4b43      	ldr	r3, [pc, #268]	; (800d908 <plug_holes+0x130>)
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	687a      	ldr	r2, [r7, #4]
 800d7fe:	429a      	cmp	r2, r3
 800d800:	d306      	bcc.n	800d810 <plug_holes+0x38>
 800d802:	4b3e      	ldr	r3, [pc, #248]	; (800d8fc <plug_holes+0x124>)
 800d804:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800d808:	4940      	ldr	r1, [pc, #256]	; (800d90c <plug_holes+0x134>)
 800d80a:	483e      	ldr	r0, [pc, #248]	; (800d904 <plug_holes+0x12c>)
 800d80c:	f00d fae0 	bl	801add0 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	791b      	ldrb	r3, [r3, #4]
 800d814:	2b00      	cmp	r3, #0
 800d816:	d006      	beq.n	800d826 <plug_holes+0x4e>
 800d818:	4b38      	ldr	r3, [pc, #224]	; (800d8fc <plug_holes+0x124>)
 800d81a:	f240 12e1 	movw	r2, #481	; 0x1e1
 800d81e:	493c      	ldr	r1, [pc, #240]	; (800d910 <plug_holes+0x138>)
 800d820:	4838      	ldr	r0, [pc, #224]	; (800d904 <plug_holes+0x12c>)
 800d822:	f00d fad5 	bl	801add0 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	881b      	ldrh	r3, [r3, #0]
 800d82a:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800d82e:	d906      	bls.n	800d83e <plug_holes+0x66>
 800d830:	4b32      	ldr	r3, [pc, #200]	; (800d8fc <plug_holes+0x124>)
 800d832:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800d836:	4937      	ldr	r1, [pc, #220]	; (800d914 <plug_holes+0x13c>)
 800d838:	4832      	ldr	r0, [pc, #200]	; (800d904 <plug_holes+0x12c>)
 800d83a:	f00d fac9 	bl	801add0 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	881b      	ldrh	r3, [r3, #0]
 800d842:	4618      	mov	r0, r3
 800d844:	f7ff ffa4 	bl	800d790 <ptr_to_mem>
 800d848:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800d84a:	687a      	ldr	r2, [r7, #4]
 800d84c:	68fb      	ldr	r3, [r7, #12]
 800d84e:	429a      	cmp	r2, r3
 800d850:	d024      	beq.n	800d89c <plug_holes+0xc4>
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	791b      	ldrb	r3, [r3, #4]
 800d856:	2b00      	cmp	r3, #0
 800d858:	d120      	bne.n	800d89c <plug_holes+0xc4>
 800d85a:	4b2b      	ldr	r3, [pc, #172]	; (800d908 <plug_holes+0x130>)
 800d85c:	681b      	ldr	r3, [r3, #0]
 800d85e:	68fa      	ldr	r2, [r7, #12]
 800d860:	429a      	cmp	r2, r3
 800d862:	d01b      	beq.n	800d89c <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800d864:	4b2c      	ldr	r3, [pc, #176]	; (800d918 <plug_holes+0x140>)
 800d866:	681b      	ldr	r3, [r3, #0]
 800d868:	68fa      	ldr	r2, [r7, #12]
 800d86a:	429a      	cmp	r2, r3
 800d86c:	d102      	bne.n	800d874 <plug_holes+0x9c>
      lfree = mem;
 800d86e:	4a2a      	ldr	r2, [pc, #168]	; (800d918 <plug_holes+0x140>)
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800d874:	68fb      	ldr	r3, [r7, #12]
 800d876:	881a      	ldrh	r2, [r3, #0]
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800d87c:	68fb      	ldr	r3, [r7, #12]
 800d87e:	881b      	ldrh	r3, [r3, #0]
 800d880:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800d884:	d00a      	beq.n	800d89c <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	881b      	ldrh	r3, [r3, #0]
 800d88a:	4618      	mov	r0, r3
 800d88c:	f7ff ff80 	bl	800d790 <ptr_to_mem>
 800d890:	4604      	mov	r4, r0
 800d892:	6878      	ldr	r0, [r7, #4]
 800d894:	f7ff ff8e 	bl	800d7b4 <mem_to_ptr>
 800d898:	4603      	mov	r3, r0
 800d89a:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	885b      	ldrh	r3, [r3, #2]
 800d8a0:	4618      	mov	r0, r3
 800d8a2:	f7ff ff75 	bl	800d790 <ptr_to_mem>
 800d8a6:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800d8a8:	68ba      	ldr	r2, [r7, #8]
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	429a      	cmp	r2, r3
 800d8ae:	d01f      	beq.n	800d8f0 <plug_holes+0x118>
 800d8b0:	68bb      	ldr	r3, [r7, #8]
 800d8b2:	791b      	ldrb	r3, [r3, #4]
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d11b      	bne.n	800d8f0 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800d8b8:	4b17      	ldr	r3, [pc, #92]	; (800d918 <plug_holes+0x140>)
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	687a      	ldr	r2, [r7, #4]
 800d8be:	429a      	cmp	r2, r3
 800d8c0:	d102      	bne.n	800d8c8 <plug_holes+0xf0>
      lfree = pmem;
 800d8c2:	4a15      	ldr	r2, [pc, #84]	; (800d918 <plug_holes+0x140>)
 800d8c4:	68bb      	ldr	r3, [r7, #8]
 800d8c6:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	881a      	ldrh	r2, [r3, #0]
 800d8cc:	68bb      	ldr	r3, [r7, #8]
 800d8ce:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	881b      	ldrh	r3, [r3, #0]
 800d8d4:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800d8d8:	d00a      	beq.n	800d8f0 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	881b      	ldrh	r3, [r3, #0]
 800d8de:	4618      	mov	r0, r3
 800d8e0:	f7ff ff56 	bl	800d790 <ptr_to_mem>
 800d8e4:	4604      	mov	r4, r0
 800d8e6:	68b8      	ldr	r0, [r7, #8]
 800d8e8:	f7ff ff64 	bl	800d7b4 <mem_to_ptr>
 800d8ec:	4603      	mov	r3, r0
 800d8ee:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800d8f0:	bf00      	nop
 800d8f2:	3714      	adds	r7, #20
 800d8f4:	46bd      	mov	sp, r7
 800d8f6:	bd90      	pop	{r4, r7, pc}
 800d8f8:	2000f290 	.word	0x2000f290
 800d8fc:	0801dbd0 	.word	0x0801dbd0
 800d900:	0801dc00 	.word	0x0801dc00
 800d904:	0801dc18 	.word	0x0801dc18
 800d908:	2000f294 	.word	0x2000f294
 800d90c:	0801dc40 	.word	0x0801dc40
 800d910:	0801dc5c 	.word	0x0801dc5c
 800d914:	0801dc78 	.word	0x0801dc78
 800d918:	2000f29c 	.word	0x2000f29c

0800d91c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800d91c:	b580      	push	{r7, lr}
 800d91e:	b082      	sub	sp, #8
 800d920:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800d922:	4b1f      	ldr	r3, [pc, #124]	; (800d9a0 <mem_init+0x84>)
 800d924:	3303      	adds	r3, #3
 800d926:	f023 0303 	bic.w	r3, r3, #3
 800d92a:	461a      	mov	r2, r3
 800d92c:	4b1d      	ldr	r3, [pc, #116]	; (800d9a4 <mem_init+0x88>)
 800d92e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800d930:	4b1c      	ldr	r3, [pc, #112]	; (800d9a4 <mem_init+0x88>)
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
 800d93c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	2200      	movs	r2, #0
 800d942:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	2200      	movs	r2, #0
 800d948:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800d94a:	f44f 40a0 	mov.w	r0, #20480	; 0x5000
 800d94e:	f7ff ff1f 	bl	800d790 <ptr_to_mem>
 800d952:	4603      	mov	r3, r0
 800d954:	4a14      	ldr	r2, [pc, #80]	; (800d9a8 <mem_init+0x8c>)
 800d956:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800d958:	4b13      	ldr	r3, [pc, #76]	; (800d9a8 <mem_init+0x8c>)
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	2201      	movs	r2, #1
 800d95e:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800d960:	4b11      	ldr	r3, [pc, #68]	; (800d9a8 <mem_init+0x8c>)
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
 800d968:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800d96a:	4b0f      	ldr	r3, [pc, #60]	; (800d9a8 <mem_init+0x8c>)
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
 800d972:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800d974:	4b0b      	ldr	r3, [pc, #44]	; (800d9a4 <mem_init+0x88>)
 800d976:	681b      	ldr	r3, [r3, #0]
 800d978:	4a0c      	ldr	r2, [pc, #48]	; (800d9ac <mem_init+0x90>)
 800d97a:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800d97c:	480c      	ldr	r0, [pc, #48]	; (800d9b0 <mem_init+0x94>)
 800d97e:	f00c fbfd 	bl	801a17c <sys_mutex_new>
 800d982:	4603      	mov	r3, r0
 800d984:	2b00      	cmp	r3, #0
 800d986:	d006      	beq.n	800d996 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800d988:	4b0a      	ldr	r3, [pc, #40]	; (800d9b4 <mem_init+0x98>)
 800d98a:	f240 221f 	movw	r2, #543	; 0x21f
 800d98e:	490a      	ldr	r1, [pc, #40]	; (800d9b8 <mem_init+0x9c>)
 800d990:	480a      	ldr	r0, [pc, #40]	; (800d9bc <mem_init+0xa0>)
 800d992:	f00d fa1d 	bl	801add0 <iprintf>
  }
}
 800d996:	bf00      	nop
 800d998:	3708      	adds	r7, #8
 800d99a:	46bd      	mov	sp, r7
 800d99c:	bd80      	pop	{r7, pc}
 800d99e:	bf00      	nop
 800d9a0:	2000a27c 	.word	0x2000a27c
 800d9a4:	2000f290 	.word	0x2000f290
 800d9a8:	2000f294 	.word	0x2000f294
 800d9ac:	2000f29c 	.word	0x2000f29c
 800d9b0:	2000f298 	.word	0x2000f298
 800d9b4:	0801dbd0 	.word	0x0801dbd0
 800d9b8:	0801dca4 	.word	0x0801dca4
 800d9bc:	0801dc18 	.word	0x0801dc18

0800d9c0 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800d9c0:	b580      	push	{r7, lr}
 800d9c2:	b086      	sub	sp, #24
 800d9c4:	af00      	add	r7, sp, #0
 800d9c6:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800d9c8:	6878      	ldr	r0, [r7, #4]
 800d9ca:	f7ff fef3 	bl	800d7b4 <mem_to_ptr>
 800d9ce:	4603      	mov	r3, r0
 800d9d0:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	881b      	ldrh	r3, [r3, #0]
 800d9d6:	4618      	mov	r0, r3
 800d9d8:	f7ff feda 	bl	800d790 <ptr_to_mem>
 800d9dc:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	885b      	ldrh	r3, [r3, #2]
 800d9e2:	4618      	mov	r0, r3
 800d9e4:	f7ff fed4 	bl	800d790 <ptr_to_mem>
 800d9e8:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	881b      	ldrh	r3, [r3, #0]
 800d9ee:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800d9f2:	d818      	bhi.n	800da26 <mem_link_valid+0x66>
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	885b      	ldrh	r3, [r3, #2]
 800d9f8:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800d9fc:	d813      	bhi.n	800da26 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800da02:	8afa      	ldrh	r2, [r7, #22]
 800da04:	429a      	cmp	r2, r3
 800da06:	d004      	beq.n	800da12 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800da08:	68fb      	ldr	r3, [r7, #12]
 800da0a:	881b      	ldrh	r3, [r3, #0]
 800da0c:	8afa      	ldrh	r2, [r7, #22]
 800da0e:	429a      	cmp	r2, r3
 800da10:	d109      	bne.n	800da26 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800da12:	4b08      	ldr	r3, [pc, #32]	; (800da34 <mem_link_valid+0x74>)
 800da14:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800da16:	693a      	ldr	r2, [r7, #16]
 800da18:	429a      	cmp	r2, r3
 800da1a:	d006      	beq.n	800da2a <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800da1c:	693b      	ldr	r3, [r7, #16]
 800da1e:	885b      	ldrh	r3, [r3, #2]
 800da20:	8afa      	ldrh	r2, [r7, #22]
 800da22:	429a      	cmp	r2, r3
 800da24:	d001      	beq.n	800da2a <mem_link_valid+0x6a>
    return 0;
 800da26:	2300      	movs	r3, #0
 800da28:	e000      	b.n	800da2c <mem_link_valid+0x6c>
  }
  return 1;
 800da2a:	2301      	movs	r3, #1
}
 800da2c:	4618      	mov	r0, r3
 800da2e:	3718      	adds	r7, #24
 800da30:	46bd      	mov	sp, r7
 800da32:	bd80      	pop	{r7, pc}
 800da34:	2000f294 	.word	0x2000f294

0800da38 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800da38:	b580      	push	{r7, lr}
 800da3a:	b088      	sub	sp, #32
 800da3c:	af00      	add	r7, sp, #0
 800da3e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	2b00      	cmp	r3, #0
 800da44:	d070      	beq.n	800db28 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	f003 0303 	and.w	r3, r3, #3
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d00d      	beq.n	800da6c <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800da50:	4b37      	ldr	r3, [pc, #220]	; (800db30 <mem_free+0xf8>)
 800da52:	f240 2273 	movw	r2, #627	; 0x273
 800da56:	4937      	ldr	r1, [pc, #220]	; (800db34 <mem_free+0xfc>)
 800da58:	4837      	ldr	r0, [pc, #220]	; (800db38 <mem_free+0x100>)
 800da5a:	f00d f9b9 	bl	801add0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800da5e:	f00c fbe1 	bl	801a224 <sys_arch_protect>
 800da62:	60f8      	str	r0, [r7, #12]
 800da64:	68f8      	ldr	r0, [r7, #12]
 800da66:	f00c fbeb 	bl	801a240 <sys_arch_unprotect>
    return;
 800da6a:	e05e      	b.n	800db2a <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	3b08      	subs	r3, #8
 800da70:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800da72:	4b32      	ldr	r3, [pc, #200]	; (800db3c <mem_free+0x104>)
 800da74:	681b      	ldr	r3, [r3, #0]
 800da76:	69fa      	ldr	r2, [r7, #28]
 800da78:	429a      	cmp	r2, r3
 800da7a:	d306      	bcc.n	800da8a <mem_free+0x52>
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	f103 020c 	add.w	r2, r3, #12
 800da82:	4b2f      	ldr	r3, [pc, #188]	; (800db40 <mem_free+0x108>)
 800da84:	681b      	ldr	r3, [r3, #0]
 800da86:	429a      	cmp	r2, r3
 800da88:	d90d      	bls.n	800daa6 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800da8a:	4b29      	ldr	r3, [pc, #164]	; (800db30 <mem_free+0xf8>)
 800da8c:	f240 227f 	movw	r2, #639	; 0x27f
 800da90:	492c      	ldr	r1, [pc, #176]	; (800db44 <mem_free+0x10c>)
 800da92:	4829      	ldr	r0, [pc, #164]	; (800db38 <mem_free+0x100>)
 800da94:	f00d f99c 	bl	801add0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800da98:	f00c fbc4 	bl	801a224 <sys_arch_protect>
 800da9c:	6138      	str	r0, [r7, #16]
 800da9e:	6938      	ldr	r0, [r7, #16]
 800daa0:	f00c fbce 	bl	801a240 <sys_arch_unprotect>
    return;
 800daa4:	e041      	b.n	800db2a <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800daa6:	4828      	ldr	r0, [pc, #160]	; (800db48 <mem_free+0x110>)
 800daa8:	f00c fb82 	bl	801a1b0 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800daac:	69fb      	ldr	r3, [r7, #28]
 800daae:	791b      	ldrb	r3, [r3, #4]
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	d110      	bne.n	800dad6 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800dab4:	4b1e      	ldr	r3, [pc, #120]	; (800db30 <mem_free+0xf8>)
 800dab6:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800daba:	4924      	ldr	r1, [pc, #144]	; (800db4c <mem_free+0x114>)
 800dabc:	481e      	ldr	r0, [pc, #120]	; (800db38 <mem_free+0x100>)
 800dabe:	f00d f987 	bl	801add0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800dac2:	4821      	ldr	r0, [pc, #132]	; (800db48 <mem_free+0x110>)
 800dac4:	f00c fb83 	bl	801a1ce <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800dac8:	f00c fbac 	bl	801a224 <sys_arch_protect>
 800dacc:	6178      	str	r0, [r7, #20]
 800dace:	6978      	ldr	r0, [r7, #20]
 800dad0:	f00c fbb6 	bl	801a240 <sys_arch_unprotect>
    return;
 800dad4:	e029      	b.n	800db2a <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800dad6:	69f8      	ldr	r0, [r7, #28]
 800dad8:	f7ff ff72 	bl	800d9c0 <mem_link_valid>
 800dadc:	4603      	mov	r3, r0
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d110      	bne.n	800db04 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800dae2:	4b13      	ldr	r3, [pc, #76]	; (800db30 <mem_free+0xf8>)
 800dae4:	f240 2295 	movw	r2, #661	; 0x295
 800dae8:	4919      	ldr	r1, [pc, #100]	; (800db50 <mem_free+0x118>)
 800daea:	4813      	ldr	r0, [pc, #76]	; (800db38 <mem_free+0x100>)
 800daec:	f00d f970 	bl	801add0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800daf0:	4815      	ldr	r0, [pc, #84]	; (800db48 <mem_free+0x110>)
 800daf2:	f00c fb6c 	bl	801a1ce <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800daf6:	f00c fb95 	bl	801a224 <sys_arch_protect>
 800dafa:	61b8      	str	r0, [r7, #24]
 800dafc:	69b8      	ldr	r0, [r7, #24]
 800dafe:	f00c fb9f 	bl	801a240 <sys_arch_unprotect>
    return;
 800db02:	e012      	b.n	800db2a <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800db04:	69fb      	ldr	r3, [r7, #28]
 800db06:	2200      	movs	r2, #0
 800db08:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800db0a:	4b12      	ldr	r3, [pc, #72]	; (800db54 <mem_free+0x11c>)
 800db0c:	681b      	ldr	r3, [r3, #0]
 800db0e:	69fa      	ldr	r2, [r7, #28]
 800db10:	429a      	cmp	r2, r3
 800db12:	d202      	bcs.n	800db1a <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800db14:	4a0f      	ldr	r2, [pc, #60]	; (800db54 <mem_free+0x11c>)
 800db16:	69fb      	ldr	r3, [r7, #28]
 800db18:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800db1a:	69f8      	ldr	r0, [r7, #28]
 800db1c:	f7ff fe5c 	bl	800d7d8 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800db20:	4809      	ldr	r0, [pc, #36]	; (800db48 <mem_free+0x110>)
 800db22:	f00c fb54 	bl	801a1ce <sys_mutex_unlock>
 800db26:	e000      	b.n	800db2a <mem_free+0xf2>
    return;
 800db28:	bf00      	nop
}
 800db2a:	3720      	adds	r7, #32
 800db2c:	46bd      	mov	sp, r7
 800db2e:	bd80      	pop	{r7, pc}
 800db30:	0801dbd0 	.word	0x0801dbd0
 800db34:	0801dcc0 	.word	0x0801dcc0
 800db38:	0801dc18 	.word	0x0801dc18
 800db3c:	2000f290 	.word	0x2000f290
 800db40:	2000f294 	.word	0x2000f294
 800db44:	0801dce4 	.word	0x0801dce4
 800db48:	2000f298 	.word	0x2000f298
 800db4c:	0801dd00 	.word	0x0801dd00
 800db50:	0801dd28 	.word	0x0801dd28
 800db54:	2000f29c 	.word	0x2000f29c

0800db58 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800db58:	b580      	push	{r7, lr}
 800db5a:	b088      	sub	sp, #32
 800db5c:	af00      	add	r7, sp, #0
 800db5e:	6078      	str	r0, [r7, #4]
 800db60:	460b      	mov	r3, r1
 800db62:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800db64:	887b      	ldrh	r3, [r7, #2]
 800db66:	3303      	adds	r3, #3
 800db68:	b29b      	uxth	r3, r3
 800db6a:	f023 0303 	bic.w	r3, r3, #3
 800db6e:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800db70:	8bfb      	ldrh	r3, [r7, #30]
 800db72:	2b0b      	cmp	r3, #11
 800db74:	d801      	bhi.n	800db7a <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800db76:	230c      	movs	r3, #12
 800db78:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800db7a:	8bfb      	ldrh	r3, [r7, #30]
 800db7c:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800db80:	d803      	bhi.n	800db8a <mem_trim+0x32>
 800db82:	8bfa      	ldrh	r2, [r7, #30]
 800db84:	887b      	ldrh	r3, [r7, #2]
 800db86:	429a      	cmp	r2, r3
 800db88:	d201      	bcs.n	800db8e <mem_trim+0x36>
    return NULL;
 800db8a:	2300      	movs	r3, #0
 800db8c:	e0d8      	b.n	800dd40 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800db8e:	4b6e      	ldr	r3, [pc, #440]	; (800dd48 <mem_trim+0x1f0>)
 800db90:	681b      	ldr	r3, [r3, #0]
 800db92:	687a      	ldr	r2, [r7, #4]
 800db94:	429a      	cmp	r2, r3
 800db96:	d304      	bcc.n	800dba2 <mem_trim+0x4a>
 800db98:	4b6c      	ldr	r3, [pc, #432]	; (800dd4c <mem_trim+0x1f4>)
 800db9a:	681b      	ldr	r3, [r3, #0]
 800db9c:	687a      	ldr	r2, [r7, #4]
 800db9e:	429a      	cmp	r2, r3
 800dba0:	d306      	bcc.n	800dbb0 <mem_trim+0x58>
 800dba2:	4b6b      	ldr	r3, [pc, #428]	; (800dd50 <mem_trim+0x1f8>)
 800dba4:	f240 22d1 	movw	r2, #721	; 0x2d1
 800dba8:	496a      	ldr	r1, [pc, #424]	; (800dd54 <mem_trim+0x1fc>)
 800dbaa:	486b      	ldr	r0, [pc, #428]	; (800dd58 <mem_trim+0x200>)
 800dbac:	f00d f910 	bl	801add0 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800dbb0:	4b65      	ldr	r3, [pc, #404]	; (800dd48 <mem_trim+0x1f0>)
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	687a      	ldr	r2, [r7, #4]
 800dbb6:	429a      	cmp	r2, r3
 800dbb8:	d304      	bcc.n	800dbc4 <mem_trim+0x6c>
 800dbba:	4b64      	ldr	r3, [pc, #400]	; (800dd4c <mem_trim+0x1f4>)
 800dbbc:	681b      	ldr	r3, [r3, #0]
 800dbbe:	687a      	ldr	r2, [r7, #4]
 800dbc0:	429a      	cmp	r2, r3
 800dbc2:	d307      	bcc.n	800dbd4 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800dbc4:	f00c fb2e 	bl	801a224 <sys_arch_protect>
 800dbc8:	60b8      	str	r0, [r7, #8]
 800dbca:	68b8      	ldr	r0, [r7, #8]
 800dbcc:	f00c fb38 	bl	801a240 <sys_arch_unprotect>
    return rmem;
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	e0b5      	b.n	800dd40 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	3b08      	subs	r3, #8
 800dbd8:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800dbda:	69b8      	ldr	r0, [r7, #24]
 800dbdc:	f7ff fdea 	bl	800d7b4 <mem_to_ptr>
 800dbe0:	4603      	mov	r3, r0
 800dbe2:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800dbe4:	69bb      	ldr	r3, [r7, #24]
 800dbe6:	881a      	ldrh	r2, [r3, #0]
 800dbe8:	8afb      	ldrh	r3, [r7, #22]
 800dbea:	1ad3      	subs	r3, r2, r3
 800dbec:	b29b      	uxth	r3, r3
 800dbee:	3b08      	subs	r3, #8
 800dbf0:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800dbf2:	8bfa      	ldrh	r2, [r7, #30]
 800dbf4:	8abb      	ldrh	r3, [r7, #20]
 800dbf6:	429a      	cmp	r2, r3
 800dbf8:	d906      	bls.n	800dc08 <mem_trim+0xb0>
 800dbfa:	4b55      	ldr	r3, [pc, #340]	; (800dd50 <mem_trim+0x1f8>)
 800dbfc:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800dc00:	4956      	ldr	r1, [pc, #344]	; (800dd5c <mem_trim+0x204>)
 800dc02:	4855      	ldr	r0, [pc, #340]	; (800dd58 <mem_trim+0x200>)
 800dc04:	f00d f8e4 	bl	801add0 <iprintf>
  if (newsize > size) {
 800dc08:	8bfa      	ldrh	r2, [r7, #30]
 800dc0a:	8abb      	ldrh	r3, [r7, #20]
 800dc0c:	429a      	cmp	r2, r3
 800dc0e:	d901      	bls.n	800dc14 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800dc10:	2300      	movs	r3, #0
 800dc12:	e095      	b.n	800dd40 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800dc14:	8bfa      	ldrh	r2, [r7, #30]
 800dc16:	8abb      	ldrh	r3, [r7, #20]
 800dc18:	429a      	cmp	r2, r3
 800dc1a:	d101      	bne.n	800dc20 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	e08f      	b.n	800dd40 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800dc20:	484f      	ldr	r0, [pc, #316]	; (800dd60 <mem_trim+0x208>)
 800dc22:	f00c fac5 	bl	801a1b0 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800dc26:	69bb      	ldr	r3, [r7, #24]
 800dc28:	881b      	ldrh	r3, [r3, #0]
 800dc2a:	4618      	mov	r0, r3
 800dc2c:	f7ff fdb0 	bl	800d790 <ptr_to_mem>
 800dc30:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800dc32:	693b      	ldr	r3, [r7, #16]
 800dc34:	791b      	ldrb	r3, [r3, #4]
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	d13f      	bne.n	800dcba <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800dc3a:	69bb      	ldr	r3, [r7, #24]
 800dc3c:	881b      	ldrh	r3, [r3, #0]
 800dc3e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800dc42:	d106      	bne.n	800dc52 <mem_trim+0xfa>
 800dc44:	4b42      	ldr	r3, [pc, #264]	; (800dd50 <mem_trim+0x1f8>)
 800dc46:	f240 22f5 	movw	r2, #757	; 0x2f5
 800dc4a:	4946      	ldr	r1, [pc, #280]	; (800dd64 <mem_trim+0x20c>)
 800dc4c:	4842      	ldr	r0, [pc, #264]	; (800dd58 <mem_trim+0x200>)
 800dc4e:	f00d f8bf 	bl	801add0 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800dc52:	693b      	ldr	r3, [r7, #16]
 800dc54:	881b      	ldrh	r3, [r3, #0]
 800dc56:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800dc58:	8afa      	ldrh	r2, [r7, #22]
 800dc5a:	8bfb      	ldrh	r3, [r7, #30]
 800dc5c:	4413      	add	r3, r2
 800dc5e:	b29b      	uxth	r3, r3
 800dc60:	3308      	adds	r3, #8
 800dc62:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800dc64:	4b40      	ldr	r3, [pc, #256]	; (800dd68 <mem_trim+0x210>)
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	693a      	ldr	r2, [r7, #16]
 800dc6a:	429a      	cmp	r2, r3
 800dc6c:	d106      	bne.n	800dc7c <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800dc6e:	89fb      	ldrh	r3, [r7, #14]
 800dc70:	4618      	mov	r0, r3
 800dc72:	f7ff fd8d 	bl	800d790 <ptr_to_mem>
 800dc76:	4603      	mov	r3, r0
 800dc78:	4a3b      	ldr	r2, [pc, #236]	; (800dd68 <mem_trim+0x210>)
 800dc7a:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800dc7c:	89fb      	ldrh	r3, [r7, #14]
 800dc7e:	4618      	mov	r0, r3
 800dc80:	f7ff fd86 	bl	800d790 <ptr_to_mem>
 800dc84:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800dc86:	693b      	ldr	r3, [r7, #16]
 800dc88:	2200      	movs	r2, #0
 800dc8a:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800dc8c:	693b      	ldr	r3, [r7, #16]
 800dc8e:	89ba      	ldrh	r2, [r7, #12]
 800dc90:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800dc92:	693b      	ldr	r3, [r7, #16]
 800dc94:	8afa      	ldrh	r2, [r7, #22]
 800dc96:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800dc98:	69bb      	ldr	r3, [r7, #24]
 800dc9a:	89fa      	ldrh	r2, [r7, #14]
 800dc9c:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800dc9e:	693b      	ldr	r3, [r7, #16]
 800dca0:	881b      	ldrh	r3, [r3, #0]
 800dca2:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800dca6:	d047      	beq.n	800dd38 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800dca8:	693b      	ldr	r3, [r7, #16]
 800dcaa:	881b      	ldrh	r3, [r3, #0]
 800dcac:	4618      	mov	r0, r3
 800dcae:	f7ff fd6f 	bl	800d790 <ptr_to_mem>
 800dcb2:	4602      	mov	r2, r0
 800dcb4:	89fb      	ldrh	r3, [r7, #14]
 800dcb6:	8053      	strh	r3, [r2, #2]
 800dcb8:	e03e      	b.n	800dd38 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800dcba:	8bfb      	ldrh	r3, [r7, #30]
 800dcbc:	f103 0214 	add.w	r2, r3, #20
 800dcc0:	8abb      	ldrh	r3, [r7, #20]
 800dcc2:	429a      	cmp	r2, r3
 800dcc4:	d838      	bhi.n	800dd38 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800dcc6:	8afa      	ldrh	r2, [r7, #22]
 800dcc8:	8bfb      	ldrh	r3, [r7, #30]
 800dcca:	4413      	add	r3, r2
 800dccc:	b29b      	uxth	r3, r3
 800dcce:	3308      	adds	r3, #8
 800dcd0:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800dcd2:	69bb      	ldr	r3, [r7, #24]
 800dcd4:	881b      	ldrh	r3, [r3, #0]
 800dcd6:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800dcda:	d106      	bne.n	800dcea <mem_trim+0x192>
 800dcdc:	4b1c      	ldr	r3, [pc, #112]	; (800dd50 <mem_trim+0x1f8>)
 800dcde:	f240 3216 	movw	r2, #790	; 0x316
 800dce2:	4920      	ldr	r1, [pc, #128]	; (800dd64 <mem_trim+0x20c>)
 800dce4:	481c      	ldr	r0, [pc, #112]	; (800dd58 <mem_trim+0x200>)
 800dce6:	f00d f873 	bl	801add0 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800dcea:	89fb      	ldrh	r3, [r7, #14]
 800dcec:	4618      	mov	r0, r3
 800dcee:	f7ff fd4f 	bl	800d790 <ptr_to_mem>
 800dcf2:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800dcf4:	4b1c      	ldr	r3, [pc, #112]	; (800dd68 <mem_trim+0x210>)
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	693a      	ldr	r2, [r7, #16]
 800dcfa:	429a      	cmp	r2, r3
 800dcfc:	d202      	bcs.n	800dd04 <mem_trim+0x1ac>
      lfree = mem2;
 800dcfe:	4a1a      	ldr	r2, [pc, #104]	; (800dd68 <mem_trim+0x210>)
 800dd00:	693b      	ldr	r3, [r7, #16]
 800dd02:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800dd04:	693b      	ldr	r3, [r7, #16]
 800dd06:	2200      	movs	r2, #0
 800dd08:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800dd0a:	69bb      	ldr	r3, [r7, #24]
 800dd0c:	881a      	ldrh	r2, [r3, #0]
 800dd0e:	693b      	ldr	r3, [r7, #16]
 800dd10:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800dd12:	693b      	ldr	r3, [r7, #16]
 800dd14:	8afa      	ldrh	r2, [r7, #22]
 800dd16:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800dd18:	69bb      	ldr	r3, [r7, #24]
 800dd1a:	89fa      	ldrh	r2, [r7, #14]
 800dd1c:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800dd1e:	693b      	ldr	r3, [r7, #16]
 800dd20:	881b      	ldrh	r3, [r3, #0]
 800dd22:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800dd26:	d007      	beq.n	800dd38 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800dd28:	693b      	ldr	r3, [r7, #16]
 800dd2a:	881b      	ldrh	r3, [r3, #0]
 800dd2c:	4618      	mov	r0, r3
 800dd2e:	f7ff fd2f 	bl	800d790 <ptr_to_mem>
 800dd32:	4602      	mov	r2, r0
 800dd34:	89fb      	ldrh	r3, [r7, #14]
 800dd36:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800dd38:	4809      	ldr	r0, [pc, #36]	; (800dd60 <mem_trim+0x208>)
 800dd3a:	f00c fa48 	bl	801a1ce <sys_mutex_unlock>
  return rmem;
 800dd3e:	687b      	ldr	r3, [r7, #4]
}
 800dd40:	4618      	mov	r0, r3
 800dd42:	3720      	adds	r7, #32
 800dd44:	46bd      	mov	sp, r7
 800dd46:	bd80      	pop	{r7, pc}
 800dd48:	2000f290 	.word	0x2000f290
 800dd4c:	2000f294 	.word	0x2000f294
 800dd50:	0801dbd0 	.word	0x0801dbd0
 800dd54:	0801dd5c 	.word	0x0801dd5c
 800dd58:	0801dc18 	.word	0x0801dc18
 800dd5c:	0801dd74 	.word	0x0801dd74
 800dd60:	2000f298 	.word	0x2000f298
 800dd64:	0801dd94 	.word	0x0801dd94
 800dd68:	2000f29c 	.word	0x2000f29c

0800dd6c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800dd6c:	b580      	push	{r7, lr}
 800dd6e:	b088      	sub	sp, #32
 800dd70:	af00      	add	r7, sp, #0
 800dd72:	4603      	mov	r3, r0
 800dd74:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800dd76:	88fb      	ldrh	r3, [r7, #6]
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d101      	bne.n	800dd80 <mem_malloc+0x14>
    return NULL;
 800dd7c:	2300      	movs	r3, #0
 800dd7e:	e0e2      	b.n	800df46 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800dd80:	88fb      	ldrh	r3, [r7, #6]
 800dd82:	3303      	adds	r3, #3
 800dd84:	b29b      	uxth	r3, r3
 800dd86:	f023 0303 	bic.w	r3, r3, #3
 800dd8a:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800dd8c:	8bbb      	ldrh	r3, [r7, #28]
 800dd8e:	2b0b      	cmp	r3, #11
 800dd90:	d801      	bhi.n	800dd96 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800dd92:	230c      	movs	r3, #12
 800dd94:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800dd96:	8bbb      	ldrh	r3, [r7, #28]
 800dd98:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800dd9c:	d803      	bhi.n	800dda6 <mem_malloc+0x3a>
 800dd9e:	8bba      	ldrh	r2, [r7, #28]
 800dda0:	88fb      	ldrh	r3, [r7, #6]
 800dda2:	429a      	cmp	r2, r3
 800dda4:	d201      	bcs.n	800ddaa <mem_malloc+0x3e>
    return NULL;
 800dda6:	2300      	movs	r3, #0
 800dda8:	e0cd      	b.n	800df46 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800ddaa:	4869      	ldr	r0, [pc, #420]	; (800df50 <mem_malloc+0x1e4>)
 800ddac:	f00c fa00 	bl	801a1b0 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800ddb0:	4b68      	ldr	r3, [pc, #416]	; (800df54 <mem_malloc+0x1e8>)
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	4618      	mov	r0, r3
 800ddb6:	f7ff fcfd 	bl	800d7b4 <mem_to_ptr>
 800ddba:	4603      	mov	r3, r0
 800ddbc:	83fb      	strh	r3, [r7, #30]
 800ddbe:	e0b7      	b.n	800df30 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800ddc0:	8bfb      	ldrh	r3, [r7, #30]
 800ddc2:	4618      	mov	r0, r3
 800ddc4:	f7ff fce4 	bl	800d790 <ptr_to_mem>
 800ddc8:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800ddca:	697b      	ldr	r3, [r7, #20]
 800ddcc:	791b      	ldrb	r3, [r3, #4]
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	f040 80a7 	bne.w	800df22 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800ddd4:	697b      	ldr	r3, [r7, #20]
 800ddd6:	881b      	ldrh	r3, [r3, #0]
 800ddd8:	461a      	mov	r2, r3
 800ddda:	8bfb      	ldrh	r3, [r7, #30]
 800dddc:	1ad3      	subs	r3, r2, r3
 800ddde:	f1a3 0208 	sub.w	r2, r3, #8
 800dde2:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800dde4:	429a      	cmp	r2, r3
 800dde6:	f0c0 809c 	bcc.w	800df22 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800ddea:	697b      	ldr	r3, [r7, #20]
 800ddec:	881b      	ldrh	r3, [r3, #0]
 800ddee:	461a      	mov	r2, r3
 800ddf0:	8bfb      	ldrh	r3, [r7, #30]
 800ddf2:	1ad3      	subs	r3, r2, r3
 800ddf4:	f1a3 0208 	sub.w	r2, r3, #8
 800ddf8:	8bbb      	ldrh	r3, [r7, #28]
 800ddfa:	3314      	adds	r3, #20
 800ddfc:	429a      	cmp	r2, r3
 800ddfe:	d333      	bcc.n	800de68 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800de00:	8bfa      	ldrh	r2, [r7, #30]
 800de02:	8bbb      	ldrh	r3, [r7, #28]
 800de04:	4413      	add	r3, r2
 800de06:	b29b      	uxth	r3, r3
 800de08:	3308      	adds	r3, #8
 800de0a:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800de0c:	8a7b      	ldrh	r3, [r7, #18]
 800de0e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800de12:	d106      	bne.n	800de22 <mem_malloc+0xb6>
 800de14:	4b50      	ldr	r3, [pc, #320]	; (800df58 <mem_malloc+0x1ec>)
 800de16:	f240 3287 	movw	r2, #903	; 0x387
 800de1a:	4950      	ldr	r1, [pc, #320]	; (800df5c <mem_malloc+0x1f0>)
 800de1c:	4850      	ldr	r0, [pc, #320]	; (800df60 <mem_malloc+0x1f4>)
 800de1e:	f00c ffd7 	bl	801add0 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800de22:	8a7b      	ldrh	r3, [r7, #18]
 800de24:	4618      	mov	r0, r3
 800de26:	f7ff fcb3 	bl	800d790 <ptr_to_mem>
 800de2a:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	2200      	movs	r2, #0
 800de30:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800de32:	697b      	ldr	r3, [r7, #20]
 800de34:	881a      	ldrh	r2, [r3, #0]
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800de3a:	68fb      	ldr	r3, [r7, #12]
 800de3c:	8bfa      	ldrh	r2, [r7, #30]
 800de3e:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800de40:	697b      	ldr	r3, [r7, #20]
 800de42:	8a7a      	ldrh	r2, [r7, #18]
 800de44:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800de46:	697b      	ldr	r3, [r7, #20]
 800de48:	2201      	movs	r2, #1
 800de4a:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800de4c:	68fb      	ldr	r3, [r7, #12]
 800de4e:	881b      	ldrh	r3, [r3, #0]
 800de50:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800de54:	d00b      	beq.n	800de6e <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800de56:	68fb      	ldr	r3, [r7, #12]
 800de58:	881b      	ldrh	r3, [r3, #0]
 800de5a:	4618      	mov	r0, r3
 800de5c:	f7ff fc98 	bl	800d790 <ptr_to_mem>
 800de60:	4602      	mov	r2, r0
 800de62:	8a7b      	ldrh	r3, [r7, #18]
 800de64:	8053      	strh	r3, [r2, #2]
 800de66:	e002      	b.n	800de6e <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800de68:	697b      	ldr	r3, [r7, #20]
 800de6a:	2201      	movs	r2, #1
 800de6c:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800de6e:	4b39      	ldr	r3, [pc, #228]	; (800df54 <mem_malloc+0x1e8>)
 800de70:	681b      	ldr	r3, [r3, #0]
 800de72:	697a      	ldr	r2, [r7, #20]
 800de74:	429a      	cmp	r2, r3
 800de76:	d127      	bne.n	800dec8 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800de78:	4b36      	ldr	r3, [pc, #216]	; (800df54 <mem_malloc+0x1e8>)
 800de7a:	681b      	ldr	r3, [r3, #0]
 800de7c:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800de7e:	e005      	b.n	800de8c <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800de80:	69bb      	ldr	r3, [r7, #24]
 800de82:	881b      	ldrh	r3, [r3, #0]
 800de84:	4618      	mov	r0, r3
 800de86:	f7ff fc83 	bl	800d790 <ptr_to_mem>
 800de8a:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800de8c:	69bb      	ldr	r3, [r7, #24]
 800de8e:	791b      	ldrb	r3, [r3, #4]
 800de90:	2b00      	cmp	r3, #0
 800de92:	d004      	beq.n	800de9e <mem_malloc+0x132>
 800de94:	4b33      	ldr	r3, [pc, #204]	; (800df64 <mem_malloc+0x1f8>)
 800de96:	681b      	ldr	r3, [r3, #0]
 800de98:	69ba      	ldr	r2, [r7, #24]
 800de9a:	429a      	cmp	r2, r3
 800de9c:	d1f0      	bne.n	800de80 <mem_malloc+0x114>
          }
          lfree = cur;
 800de9e:	4a2d      	ldr	r2, [pc, #180]	; (800df54 <mem_malloc+0x1e8>)
 800dea0:	69bb      	ldr	r3, [r7, #24]
 800dea2:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800dea4:	4b2b      	ldr	r3, [pc, #172]	; (800df54 <mem_malloc+0x1e8>)
 800dea6:	681a      	ldr	r2, [r3, #0]
 800dea8:	4b2e      	ldr	r3, [pc, #184]	; (800df64 <mem_malloc+0x1f8>)
 800deaa:	681b      	ldr	r3, [r3, #0]
 800deac:	429a      	cmp	r2, r3
 800deae:	d00b      	beq.n	800dec8 <mem_malloc+0x15c>
 800deb0:	4b28      	ldr	r3, [pc, #160]	; (800df54 <mem_malloc+0x1e8>)
 800deb2:	681b      	ldr	r3, [r3, #0]
 800deb4:	791b      	ldrb	r3, [r3, #4]
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d006      	beq.n	800dec8 <mem_malloc+0x15c>
 800deba:	4b27      	ldr	r3, [pc, #156]	; (800df58 <mem_malloc+0x1ec>)
 800debc:	f240 32b5 	movw	r2, #949	; 0x3b5
 800dec0:	4929      	ldr	r1, [pc, #164]	; (800df68 <mem_malloc+0x1fc>)
 800dec2:	4827      	ldr	r0, [pc, #156]	; (800df60 <mem_malloc+0x1f4>)
 800dec4:	f00c ff84 	bl	801add0 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800dec8:	4821      	ldr	r0, [pc, #132]	; (800df50 <mem_malloc+0x1e4>)
 800deca:	f00c f980 	bl	801a1ce <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800dece:	8bba      	ldrh	r2, [r7, #28]
 800ded0:	697b      	ldr	r3, [r7, #20]
 800ded2:	4413      	add	r3, r2
 800ded4:	3308      	adds	r3, #8
 800ded6:	4a23      	ldr	r2, [pc, #140]	; (800df64 <mem_malloc+0x1f8>)
 800ded8:	6812      	ldr	r2, [r2, #0]
 800deda:	4293      	cmp	r3, r2
 800dedc:	d906      	bls.n	800deec <mem_malloc+0x180>
 800dede:	4b1e      	ldr	r3, [pc, #120]	; (800df58 <mem_malloc+0x1ec>)
 800dee0:	f240 32b9 	movw	r2, #953	; 0x3b9
 800dee4:	4921      	ldr	r1, [pc, #132]	; (800df6c <mem_malloc+0x200>)
 800dee6:	481e      	ldr	r0, [pc, #120]	; (800df60 <mem_malloc+0x1f4>)
 800dee8:	f00c ff72 	bl	801add0 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800deec:	697b      	ldr	r3, [r7, #20]
 800deee:	f003 0303 	and.w	r3, r3, #3
 800def2:	2b00      	cmp	r3, #0
 800def4:	d006      	beq.n	800df04 <mem_malloc+0x198>
 800def6:	4b18      	ldr	r3, [pc, #96]	; (800df58 <mem_malloc+0x1ec>)
 800def8:	f240 32bb 	movw	r2, #955	; 0x3bb
 800defc:	491c      	ldr	r1, [pc, #112]	; (800df70 <mem_malloc+0x204>)
 800defe:	4818      	ldr	r0, [pc, #96]	; (800df60 <mem_malloc+0x1f4>)
 800df00:	f00c ff66 	bl	801add0 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800df04:	697b      	ldr	r3, [r7, #20]
 800df06:	f003 0303 	and.w	r3, r3, #3
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	d006      	beq.n	800df1c <mem_malloc+0x1b0>
 800df0e:	4b12      	ldr	r3, [pc, #72]	; (800df58 <mem_malloc+0x1ec>)
 800df10:	f240 32bd 	movw	r2, #957	; 0x3bd
 800df14:	4917      	ldr	r1, [pc, #92]	; (800df74 <mem_malloc+0x208>)
 800df16:	4812      	ldr	r0, [pc, #72]	; (800df60 <mem_malloc+0x1f4>)
 800df18:	f00c ff5a 	bl	801add0 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800df1c:	697b      	ldr	r3, [r7, #20]
 800df1e:	3308      	adds	r3, #8
 800df20:	e011      	b.n	800df46 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800df22:	8bfb      	ldrh	r3, [r7, #30]
 800df24:	4618      	mov	r0, r3
 800df26:	f7ff fc33 	bl	800d790 <ptr_to_mem>
 800df2a:	4603      	mov	r3, r0
 800df2c:	881b      	ldrh	r3, [r3, #0]
 800df2e:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800df30:	8bfa      	ldrh	r2, [r7, #30]
 800df32:	8bbb      	ldrh	r3, [r7, #28]
 800df34:	f5c3 43a0 	rsb	r3, r3, #20480	; 0x5000
 800df38:	429a      	cmp	r2, r3
 800df3a:	f4ff af41 	bcc.w	800ddc0 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800df3e:	4804      	ldr	r0, [pc, #16]	; (800df50 <mem_malloc+0x1e4>)
 800df40:	f00c f945 	bl	801a1ce <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800df44:	2300      	movs	r3, #0
}
 800df46:	4618      	mov	r0, r3
 800df48:	3720      	adds	r7, #32
 800df4a:	46bd      	mov	sp, r7
 800df4c:	bd80      	pop	{r7, pc}
 800df4e:	bf00      	nop
 800df50:	2000f298 	.word	0x2000f298
 800df54:	2000f29c 	.word	0x2000f29c
 800df58:	0801dbd0 	.word	0x0801dbd0
 800df5c:	0801dd94 	.word	0x0801dd94
 800df60:	0801dc18 	.word	0x0801dc18
 800df64:	2000f294 	.word	0x2000f294
 800df68:	0801dda8 	.word	0x0801dda8
 800df6c:	0801ddc4 	.word	0x0801ddc4
 800df70:	0801ddf4 	.word	0x0801ddf4
 800df74:	0801de24 	.word	0x0801de24

0800df78 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800df78:	b480      	push	{r7}
 800df7a:	b085      	sub	sp, #20
 800df7c:	af00      	add	r7, sp, #0
 800df7e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	68db      	ldr	r3, [r3, #12]
 800df84:	2200      	movs	r2, #0
 800df86:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	689b      	ldr	r3, [r3, #8]
 800df8c:	3303      	adds	r3, #3
 800df8e:	f023 0303 	bic.w	r3, r3, #3
 800df92:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800df94:	2300      	movs	r3, #0
 800df96:	60fb      	str	r3, [r7, #12]
 800df98:	e011      	b.n	800dfbe <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	68db      	ldr	r3, [r3, #12]
 800df9e:	681a      	ldr	r2, [r3, #0]
 800dfa0:	68bb      	ldr	r3, [r7, #8]
 800dfa2:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	68db      	ldr	r3, [r3, #12]
 800dfa8:	68ba      	ldr	r2, [r7, #8]
 800dfaa:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	889b      	ldrh	r3, [r3, #4]
 800dfb0:	461a      	mov	r2, r3
 800dfb2:	68bb      	ldr	r3, [r7, #8]
 800dfb4:	4413      	add	r3, r2
 800dfb6:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800dfb8:	68fb      	ldr	r3, [r7, #12]
 800dfba:	3301      	adds	r3, #1
 800dfbc:	60fb      	str	r3, [r7, #12]
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	88db      	ldrh	r3, [r3, #6]
 800dfc2:	461a      	mov	r2, r3
 800dfc4:	68fb      	ldr	r3, [r7, #12]
 800dfc6:	4293      	cmp	r3, r2
 800dfc8:	dbe7      	blt.n	800df9a <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800dfca:	bf00      	nop
 800dfcc:	bf00      	nop
 800dfce:	3714      	adds	r7, #20
 800dfd0:	46bd      	mov	sp, r7
 800dfd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfd6:	4770      	bx	lr

0800dfd8 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800dfd8:	b580      	push	{r7, lr}
 800dfda:	b082      	sub	sp, #8
 800dfdc:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800dfde:	2300      	movs	r3, #0
 800dfe0:	80fb      	strh	r3, [r7, #6]
 800dfe2:	e009      	b.n	800dff8 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800dfe4:	88fb      	ldrh	r3, [r7, #6]
 800dfe6:	4a08      	ldr	r2, [pc, #32]	; (800e008 <memp_init+0x30>)
 800dfe8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dfec:	4618      	mov	r0, r3
 800dfee:	f7ff ffc3 	bl	800df78 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800dff2:	88fb      	ldrh	r3, [r7, #6]
 800dff4:	3301      	adds	r3, #1
 800dff6:	80fb      	strh	r3, [r7, #6]
 800dff8:	88fb      	ldrh	r3, [r7, #6]
 800dffa:	2b0c      	cmp	r3, #12
 800dffc:	d9f2      	bls.n	800dfe4 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800dffe:	bf00      	nop
 800e000:	bf00      	nop
 800e002:	3708      	adds	r7, #8
 800e004:	46bd      	mov	sp, r7
 800e006:	bd80      	pop	{r7, pc}
 800e008:	0806c7ec 	.word	0x0806c7ec

0800e00c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800e00c:	b580      	push	{r7, lr}
 800e00e:	b084      	sub	sp, #16
 800e010:	af00      	add	r7, sp, #0
 800e012:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800e014:	f00c f906 	bl	801a224 <sys_arch_protect>
 800e018:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	68db      	ldr	r3, [r3, #12]
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800e022:	68bb      	ldr	r3, [r7, #8]
 800e024:	2b00      	cmp	r3, #0
 800e026:	d015      	beq.n	800e054 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	68db      	ldr	r3, [r3, #12]
 800e02c:	68ba      	ldr	r2, [r7, #8]
 800e02e:	6812      	ldr	r2, [r2, #0]
 800e030:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800e032:	68bb      	ldr	r3, [r7, #8]
 800e034:	f003 0303 	and.w	r3, r3, #3
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d006      	beq.n	800e04a <do_memp_malloc_pool+0x3e>
 800e03c:	4b09      	ldr	r3, [pc, #36]	; (800e064 <do_memp_malloc_pool+0x58>)
 800e03e:	f44f 728c 	mov.w	r2, #280	; 0x118
 800e042:	4909      	ldr	r1, [pc, #36]	; (800e068 <do_memp_malloc_pool+0x5c>)
 800e044:	4809      	ldr	r0, [pc, #36]	; (800e06c <do_memp_malloc_pool+0x60>)
 800e046:	f00c fec3 	bl	801add0 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800e04a:	68f8      	ldr	r0, [r7, #12]
 800e04c:	f00c f8f8 	bl	801a240 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800e050:	68bb      	ldr	r3, [r7, #8]
 800e052:	e003      	b.n	800e05c <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800e054:	68f8      	ldr	r0, [r7, #12]
 800e056:	f00c f8f3 	bl	801a240 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800e05a:	2300      	movs	r3, #0
}
 800e05c:	4618      	mov	r0, r3
 800e05e:	3710      	adds	r7, #16
 800e060:	46bd      	mov	sp, r7
 800e062:	bd80      	pop	{r7, pc}
 800e064:	0801dee0 	.word	0x0801dee0
 800e068:	0801df10 	.word	0x0801df10
 800e06c:	0801df34 	.word	0x0801df34

0800e070 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800e070:	b580      	push	{r7, lr}
 800e072:	b084      	sub	sp, #16
 800e074:	af00      	add	r7, sp, #0
 800e076:	4603      	mov	r3, r0
 800e078:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800e07a:	79fb      	ldrb	r3, [r7, #7]
 800e07c:	2b0c      	cmp	r3, #12
 800e07e:	d908      	bls.n	800e092 <memp_malloc+0x22>
 800e080:	4b0a      	ldr	r3, [pc, #40]	; (800e0ac <memp_malloc+0x3c>)
 800e082:	f240 1257 	movw	r2, #343	; 0x157
 800e086:	490a      	ldr	r1, [pc, #40]	; (800e0b0 <memp_malloc+0x40>)
 800e088:	480a      	ldr	r0, [pc, #40]	; (800e0b4 <memp_malloc+0x44>)
 800e08a:	f00c fea1 	bl	801add0 <iprintf>
 800e08e:	2300      	movs	r3, #0
 800e090:	e008      	b.n	800e0a4 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800e092:	79fb      	ldrb	r3, [r7, #7]
 800e094:	4a08      	ldr	r2, [pc, #32]	; (800e0b8 <memp_malloc+0x48>)
 800e096:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e09a:	4618      	mov	r0, r3
 800e09c:	f7ff ffb6 	bl	800e00c <do_memp_malloc_pool>
 800e0a0:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800e0a2:	68fb      	ldr	r3, [r7, #12]
}
 800e0a4:	4618      	mov	r0, r3
 800e0a6:	3710      	adds	r7, #16
 800e0a8:	46bd      	mov	sp, r7
 800e0aa:	bd80      	pop	{r7, pc}
 800e0ac:	0801dee0 	.word	0x0801dee0
 800e0b0:	0801df70 	.word	0x0801df70
 800e0b4:	0801df34 	.word	0x0801df34
 800e0b8:	0806c7ec 	.word	0x0806c7ec

0800e0bc <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800e0bc:	b580      	push	{r7, lr}
 800e0be:	b084      	sub	sp, #16
 800e0c0:	af00      	add	r7, sp, #0
 800e0c2:	6078      	str	r0, [r7, #4]
 800e0c4:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800e0c6:	683b      	ldr	r3, [r7, #0]
 800e0c8:	f003 0303 	and.w	r3, r3, #3
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d006      	beq.n	800e0de <do_memp_free_pool+0x22>
 800e0d0:	4b0d      	ldr	r3, [pc, #52]	; (800e108 <do_memp_free_pool+0x4c>)
 800e0d2:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800e0d6:	490d      	ldr	r1, [pc, #52]	; (800e10c <do_memp_free_pool+0x50>)
 800e0d8:	480d      	ldr	r0, [pc, #52]	; (800e110 <do_memp_free_pool+0x54>)
 800e0da:	f00c fe79 	bl	801add0 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800e0de:	683b      	ldr	r3, [r7, #0]
 800e0e0:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800e0e2:	f00c f89f 	bl	801a224 <sys_arch_protect>
 800e0e6:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	68db      	ldr	r3, [r3, #12]
 800e0ec:	681a      	ldr	r2, [r3, #0]
 800e0ee:	68fb      	ldr	r3, [r7, #12]
 800e0f0:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	68db      	ldr	r3, [r3, #12]
 800e0f6:	68fa      	ldr	r2, [r7, #12]
 800e0f8:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800e0fa:	68b8      	ldr	r0, [r7, #8]
 800e0fc:	f00c f8a0 	bl	801a240 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800e100:	bf00      	nop
 800e102:	3710      	adds	r7, #16
 800e104:	46bd      	mov	sp, r7
 800e106:	bd80      	pop	{r7, pc}
 800e108:	0801dee0 	.word	0x0801dee0
 800e10c:	0801df90 	.word	0x0801df90
 800e110:	0801df34 	.word	0x0801df34

0800e114 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800e114:	b580      	push	{r7, lr}
 800e116:	b082      	sub	sp, #8
 800e118:	af00      	add	r7, sp, #0
 800e11a:	4603      	mov	r3, r0
 800e11c:	6039      	str	r1, [r7, #0]
 800e11e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800e120:	79fb      	ldrb	r3, [r7, #7]
 800e122:	2b0c      	cmp	r3, #12
 800e124:	d907      	bls.n	800e136 <memp_free+0x22>
 800e126:	4b0c      	ldr	r3, [pc, #48]	; (800e158 <memp_free+0x44>)
 800e128:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800e12c:	490b      	ldr	r1, [pc, #44]	; (800e15c <memp_free+0x48>)
 800e12e:	480c      	ldr	r0, [pc, #48]	; (800e160 <memp_free+0x4c>)
 800e130:	f00c fe4e 	bl	801add0 <iprintf>
 800e134:	e00c      	b.n	800e150 <memp_free+0x3c>

  if (mem == NULL) {
 800e136:	683b      	ldr	r3, [r7, #0]
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d008      	beq.n	800e14e <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800e13c:	79fb      	ldrb	r3, [r7, #7]
 800e13e:	4a09      	ldr	r2, [pc, #36]	; (800e164 <memp_free+0x50>)
 800e140:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e144:	6839      	ldr	r1, [r7, #0]
 800e146:	4618      	mov	r0, r3
 800e148:	f7ff ffb8 	bl	800e0bc <do_memp_free_pool>
 800e14c:	e000      	b.n	800e150 <memp_free+0x3c>
    return;
 800e14e:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800e150:	3708      	adds	r7, #8
 800e152:	46bd      	mov	sp, r7
 800e154:	bd80      	pop	{r7, pc}
 800e156:	bf00      	nop
 800e158:	0801dee0 	.word	0x0801dee0
 800e15c:	0801dfb0 	.word	0x0801dfb0
 800e160:	0801df34 	.word	0x0801df34
 800e164:	0806c7ec 	.word	0x0806c7ec

0800e168 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800e168:	b480      	push	{r7}
 800e16a:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800e16c:	bf00      	nop
 800e16e:	46bd      	mov	sp, r7
 800e170:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e174:	4770      	bx	lr
	...

0800e178 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800e178:	b580      	push	{r7, lr}
 800e17a:	b086      	sub	sp, #24
 800e17c:	af00      	add	r7, sp, #0
 800e17e:	60f8      	str	r0, [r7, #12]
 800e180:	60b9      	str	r1, [r7, #8]
 800e182:	607a      	str	r2, [r7, #4]
 800e184:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800e186:	68fb      	ldr	r3, [r7, #12]
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d108      	bne.n	800e19e <netif_add+0x26>
 800e18c:	4b5b      	ldr	r3, [pc, #364]	; (800e2fc <netif_add+0x184>)
 800e18e:	f240 1227 	movw	r2, #295	; 0x127
 800e192:	495b      	ldr	r1, [pc, #364]	; (800e300 <netif_add+0x188>)
 800e194:	485b      	ldr	r0, [pc, #364]	; (800e304 <netif_add+0x18c>)
 800e196:	f00c fe1b 	bl	801add0 <iprintf>
 800e19a:	2300      	movs	r3, #0
 800e19c:	e0a9      	b.n	800e2f2 <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800e19e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	d108      	bne.n	800e1b6 <netif_add+0x3e>
 800e1a4:	4b55      	ldr	r3, [pc, #340]	; (800e2fc <netif_add+0x184>)
 800e1a6:	f44f 7294 	mov.w	r2, #296	; 0x128
 800e1aa:	4957      	ldr	r1, [pc, #348]	; (800e308 <netif_add+0x190>)
 800e1ac:	4855      	ldr	r0, [pc, #340]	; (800e304 <netif_add+0x18c>)
 800e1ae:	f00c fe0f 	bl	801add0 <iprintf>
 800e1b2:	2300      	movs	r3, #0
 800e1b4:	e09d      	b.n	800e2f2 <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800e1b6:	68bb      	ldr	r3, [r7, #8]
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	d101      	bne.n	800e1c0 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800e1bc:	4b53      	ldr	r3, [pc, #332]	; (800e30c <netif_add+0x194>)
 800e1be:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d101      	bne.n	800e1ca <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800e1c6:	4b51      	ldr	r3, [pc, #324]	; (800e30c <netif_add+0x194>)
 800e1c8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800e1ca:	683b      	ldr	r3, [r7, #0]
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d101      	bne.n	800e1d4 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800e1d0:	4b4e      	ldr	r3, [pc, #312]	; (800e30c <netif_add+0x194>)
 800e1d2:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800e1d4:	68fb      	ldr	r3, [r7, #12]
 800e1d6:	2200      	movs	r2, #0
 800e1d8:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800e1da:	68fb      	ldr	r3, [r7, #12]
 800e1dc:	2200      	movs	r2, #0
 800e1de:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	2200      	movs	r2, #0
 800e1e4:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800e1e6:	68fb      	ldr	r3, [r7, #12]
 800e1e8:	4a49      	ldr	r2, [pc, #292]	; (800e310 <netif_add+0x198>)
 800e1ea:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800e1ec:	68fb      	ldr	r3, [r7, #12]
 800e1ee:	2200      	movs	r2, #0
 800e1f0:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 800e1f2:	68fb      	ldr	r3, [r7, #12]
 800e1f4:	2200      	movs	r2, #0
 800e1f6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800e1fa:	68fb      	ldr	r3, [r7, #12]
 800e1fc:	3324      	adds	r3, #36	; 0x24
 800e1fe:	2204      	movs	r2, #4
 800e200:	2100      	movs	r1, #0
 800e202:	4618      	mov	r0, r3
 800e204:	f00c f87c 	bl	801a300 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800e208:	68fb      	ldr	r3, [r7, #12]
 800e20a:	2200      	movs	r2, #0
 800e20c:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800e20e:	68fb      	ldr	r3, [r7, #12]
 800e210:	6a3a      	ldr	r2, [r7, #32]
 800e212:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800e214:	4b3f      	ldr	r3, [pc, #252]	; (800e314 <netif_add+0x19c>)
 800e216:	781a      	ldrb	r2, [r3, #0]
 800e218:	68fb      	ldr	r3, [r7, #12]
 800e21a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 800e21e:	68fb      	ldr	r3, [r7, #12]
 800e220:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e222:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800e224:	683b      	ldr	r3, [r7, #0]
 800e226:	687a      	ldr	r2, [r7, #4]
 800e228:	68b9      	ldr	r1, [r7, #8]
 800e22a:	68f8      	ldr	r0, [r7, #12]
 800e22c:	f000 f914 	bl	800e458 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800e230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e232:	68f8      	ldr	r0, [r7, #12]
 800e234:	4798      	blx	r3
 800e236:	4603      	mov	r3, r0
 800e238:	2b00      	cmp	r3, #0
 800e23a:	d001      	beq.n	800e240 <netif_add+0xc8>
    return NULL;
 800e23c:	2300      	movs	r3, #0
 800e23e:	e058      	b.n	800e2f2 <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800e240:	68fb      	ldr	r3, [r7, #12]
 800e242:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e246:	2bff      	cmp	r3, #255	; 0xff
 800e248:	d103      	bne.n	800e252 <netif_add+0xda>
        netif->num = 0;
 800e24a:	68fb      	ldr	r3, [r7, #12]
 800e24c:	2200      	movs	r2, #0
 800e24e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 800e252:	2300      	movs	r3, #0
 800e254:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800e256:	4b30      	ldr	r3, [pc, #192]	; (800e318 <netif_add+0x1a0>)
 800e258:	681b      	ldr	r3, [r3, #0]
 800e25a:	617b      	str	r3, [r7, #20]
 800e25c:	e02b      	b.n	800e2b6 <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800e25e:	697a      	ldr	r2, [r7, #20]
 800e260:	68fb      	ldr	r3, [r7, #12]
 800e262:	429a      	cmp	r2, r3
 800e264:	d106      	bne.n	800e274 <netif_add+0xfc>
 800e266:	4b25      	ldr	r3, [pc, #148]	; (800e2fc <netif_add+0x184>)
 800e268:	f240 128b 	movw	r2, #395	; 0x18b
 800e26c:	492b      	ldr	r1, [pc, #172]	; (800e31c <netif_add+0x1a4>)
 800e26e:	4825      	ldr	r0, [pc, #148]	; (800e304 <netif_add+0x18c>)
 800e270:	f00c fdae 	bl	801add0 <iprintf>
        num_netifs++;
 800e274:	693b      	ldr	r3, [r7, #16]
 800e276:	3301      	adds	r3, #1
 800e278:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800e27a:	693b      	ldr	r3, [r7, #16]
 800e27c:	2bff      	cmp	r3, #255	; 0xff
 800e27e:	dd06      	ble.n	800e28e <netif_add+0x116>
 800e280:	4b1e      	ldr	r3, [pc, #120]	; (800e2fc <netif_add+0x184>)
 800e282:	f240 128d 	movw	r2, #397	; 0x18d
 800e286:	4926      	ldr	r1, [pc, #152]	; (800e320 <netif_add+0x1a8>)
 800e288:	481e      	ldr	r0, [pc, #120]	; (800e304 <netif_add+0x18c>)
 800e28a:	f00c fda1 	bl	801add0 <iprintf>
        if (netif2->num == netif->num) {
 800e28e:	697b      	ldr	r3, [r7, #20]
 800e290:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800e294:	68fb      	ldr	r3, [r7, #12]
 800e296:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e29a:	429a      	cmp	r2, r3
 800e29c:	d108      	bne.n	800e2b0 <netif_add+0x138>
          netif->num++;
 800e29e:	68fb      	ldr	r3, [r7, #12]
 800e2a0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e2a4:	3301      	adds	r3, #1
 800e2a6:	b2da      	uxtb	r2, r3
 800e2a8:	68fb      	ldr	r3, [r7, #12]
 800e2aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 800e2ae:	e005      	b.n	800e2bc <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800e2b0:	697b      	ldr	r3, [r7, #20]
 800e2b2:	681b      	ldr	r3, [r3, #0]
 800e2b4:	617b      	str	r3, [r7, #20]
 800e2b6:	697b      	ldr	r3, [r7, #20]
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	d1d0      	bne.n	800e25e <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 800e2bc:	697b      	ldr	r3, [r7, #20]
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	d1be      	bne.n	800e240 <netif_add+0xc8>
  }
  if (netif->num == 254) {
 800e2c2:	68fb      	ldr	r3, [r7, #12]
 800e2c4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e2c8:	2bfe      	cmp	r3, #254	; 0xfe
 800e2ca:	d103      	bne.n	800e2d4 <netif_add+0x15c>
    netif_num = 0;
 800e2cc:	4b11      	ldr	r3, [pc, #68]	; (800e314 <netif_add+0x19c>)
 800e2ce:	2200      	movs	r2, #0
 800e2d0:	701a      	strb	r2, [r3, #0]
 800e2d2:	e006      	b.n	800e2e2 <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800e2d4:	68fb      	ldr	r3, [r7, #12]
 800e2d6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e2da:	3301      	adds	r3, #1
 800e2dc:	b2da      	uxtb	r2, r3
 800e2de:	4b0d      	ldr	r3, [pc, #52]	; (800e314 <netif_add+0x19c>)
 800e2e0:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800e2e2:	4b0d      	ldr	r3, [pc, #52]	; (800e318 <netif_add+0x1a0>)
 800e2e4:	681a      	ldr	r2, [r3, #0]
 800e2e6:	68fb      	ldr	r3, [r7, #12]
 800e2e8:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800e2ea:	4a0b      	ldr	r2, [pc, #44]	; (800e318 <netif_add+0x1a0>)
 800e2ec:	68fb      	ldr	r3, [r7, #12]
 800e2ee:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800e2f0:	68fb      	ldr	r3, [r7, #12]
}
 800e2f2:	4618      	mov	r0, r3
 800e2f4:	3718      	adds	r7, #24
 800e2f6:	46bd      	mov	sp, r7
 800e2f8:	bd80      	pop	{r7, pc}
 800e2fa:	bf00      	nop
 800e2fc:	0801dfcc 	.word	0x0801dfcc
 800e300:	0801e060 	.word	0x0801e060
 800e304:	0801e01c 	.word	0x0801e01c
 800e308:	0801e07c 	.word	0x0801e07c
 800e30c:	0806c870 	.word	0x0806c870
 800e310:	0800e719 	.word	0x0800e719
 800e314:	20013cd4 	.word	0x20013cd4
 800e318:	20013ccc 	.word	0x20013ccc
 800e31c:	0801e0a0 	.word	0x0801e0a0
 800e320:	0801e0b4 	.word	0x0801e0b4

0800e324 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800e324:	b580      	push	{r7, lr}
 800e326:	b082      	sub	sp, #8
 800e328:	af00      	add	r7, sp, #0
 800e32a:	6078      	str	r0, [r7, #4]
 800e32c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800e32e:	6839      	ldr	r1, [r7, #0]
 800e330:	6878      	ldr	r0, [r7, #4]
 800e332:	f002 fd1b 	bl	8010d6c <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800e336:	6839      	ldr	r1, [r7, #0]
 800e338:	6878      	ldr	r0, [r7, #4]
 800e33a:	f007 fa63 	bl	8015804 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800e33e:	bf00      	nop
 800e340:	3708      	adds	r7, #8
 800e342:	46bd      	mov	sp, r7
 800e344:	bd80      	pop	{r7, pc}
	...

0800e348 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800e348:	b580      	push	{r7, lr}
 800e34a:	b086      	sub	sp, #24
 800e34c:	af00      	add	r7, sp, #0
 800e34e:	60f8      	str	r0, [r7, #12]
 800e350:	60b9      	str	r1, [r7, #8]
 800e352:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800e354:	68bb      	ldr	r3, [r7, #8]
 800e356:	2b00      	cmp	r3, #0
 800e358:	d106      	bne.n	800e368 <netif_do_set_ipaddr+0x20>
 800e35a:	4b1d      	ldr	r3, [pc, #116]	; (800e3d0 <netif_do_set_ipaddr+0x88>)
 800e35c:	f240 12cb 	movw	r2, #459	; 0x1cb
 800e360:	491c      	ldr	r1, [pc, #112]	; (800e3d4 <netif_do_set_ipaddr+0x8c>)
 800e362:	481d      	ldr	r0, [pc, #116]	; (800e3d8 <netif_do_set_ipaddr+0x90>)
 800e364:	f00c fd34 	bl	801add0 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	d106      	bne.n	800e37c <netif_do_set_ipaddr+0x34>
 800e36e:	4b18      	ldr	r3, [pc, #96]	; (800e3d0 <netif_do_set_ipaddr+0x88>)
 800e370:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800e374:	4917      	ldr	r1, [pc, #92]	; (800e3d4 <netif_do_set_ipaddr+0x8c>)
 800e376:	4818      	ldr	r0, [pc, #96]	; (800e3d8 <netif_do_set_ipaddr+0x90>)
 800e378:	f00c fd2a 	bl	801add0 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800e37c:	68bb      	ldr	r3, [r7, #8]
 800e37e:	681a      	ldr	r2, [r3, #0]
 800e380:	68fb      	ldr	r3, [r7, #12]
 800e382:	3304      	adds	r3, #4
 800e384:	681b      	ldr	r3, [r3, #0]
 800e386:	429a      	cmp	r2, r3
 800e388:	d01c      	beq.n	800e3c4 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800e38a:	68bb      	ldr	r3, [r7, #8]
 800e38c:	681b      	ldr	r3, [r3, #0]
 800e38e:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800e390:	68fb      	ldr	r3, [r7, #12]
 800e392:	3304      	adds	r3, #4
 800e394:	681a      	ldr	r2, [r3, #0]
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800e39a:	f107 0314 	add.w	r3, r7, #20
 800e39e:	4619      	mov	r1, r3
 800e3a0:	6878      	ldr	r0, [r7, #4]
 800e3a2:	f7ff ffbf 	bl	800e324 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800e3a6:	68bb      	ldr	r3, [r7, #8]
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	d002      	beq.n	800e3b2 <netif_do_set_ipaddr+0x6a>
 800e3ac:	68bb      	ldr	r3, [r7, #8]
 800e3ae:	681b      	ldr	r3, [r3, #0]
 800e3b0:	e000      	b.n	800e3b4 <netif_do_set_ipaddr+0x6c>
 800e3b2:	2300      	movs	r3, #0
 800e3b4:	68fa      	ldr	r2, [r7, #12]
 800e3b6:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800e3b8:	2101      	movs	r1, #1
 800e3ba:	68f8      	ldr	r0, [r7, #12]
 800e3bc:	f000 f8d2 	bl	800e564 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800e3c0:	2301      	movs	r3, #1
 800e3c2:	e000      	b.n	800e3c6 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800e3c4:	2300      	movs	r3, #0
}
 800e3c6:	4618      	mov	r0, r3
 800e3c8:	3718      	adds	r7, #24
 800e3ca:	46bd      	mov	sp, r7
 800e3cc:	bd80      	pop	{r7, pc}
 800e3ce:	bf00      	nop
 800e3d0:	0801dfcc 	.word	0x0801dfcc
 800e3d4:	0801e0e4 	.word	0x0801e0e4
 800e3d8:	0801e01c 	.word	0x0801e01c

0800e3dc <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800e3dc:	b480      	push	{r7}
 800e3de:	b085      	sub	sp, #20
 800e3e0:	af00      	add	r7, sp, #0
 800e3e2:	60f8      	str	r0, [r7, #12]
 800e3e4:	60b9      	str	r1, [r7, #8]
 800e3e6:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800e3e8:	68bb      	ldr	r3, [r7, #8]
 800e3ea:	681a      	ldr	r2, [r3, #0]
 800e3ec:	68fb      	ldr	r3, [r7, #12]
 800e3ee:	3308      	adds	r3, #8
 800e3f0:	681b      	ldr	r3, [r3, #0]
 800e3f2:	429a      	cmp	r2, r3
 800e3f4:	d00a      	beq.n	800e40c <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800e3f6:	68bb      	ldr	r3, [r7, #8]
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d002      	beq.n	800e402 <netif_do_set_netmask+0x26>
 800e3fc:	68bb      	ldr	r3, [r7, #8]
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	e000      	b.n	800e404 <netif_do_set_netmask+0x28>
 800e402:	2300      	movs	r3, #0
 800e404:	68fa      	ldr	r2, [r7, #12]
 800e406:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800e408:	2301      	movs	r3, #1
 800e40a:	e000      	b.n	800e40e <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800e40c:	2300      	movs	r3, #0
}
 800e40e:	4618      	mov	r0, r3
 800e410:	3714      	adds	r7, #20
 800e412:	46bd      	mov	sp, r7
 800e414:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e418:	4770      	bx	lr

0800e41a <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800e41a:	b480      	push	{r7}
 800e41c:	b085      	sub	sp, #20
 800e41e:	af00      	add	r7, sp, #0
 800e420:	60f8      	str	r0, [r7, #12]
 800e422:	60b9      	str	r1, [r7, #8]
 800e424:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800e426:	68bb      	ldr	r3, [r7, #8]
 800e428:	681a      	ldr	r2, [r3, #0]
 800e42a:	68fb      	ldr	r3, [r7, #12]
 800e42c:	330c      	adds	r3, #12
 800e42e:	681b      	ldr	r3, [r3, #0]
 800e430:	429a      	cmp	r2, r3
 800e432:	d00a      	beq.n	800e44a <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800e434:	68bb      	ldr	r3, [r7, #8]
 800e436:	2b00      	cmp	r3, #0
 800e438:	d002      	beq.n	800e440 <netif_do_set_gw+0x26>
 800e43a:	68bb      	ldr	r3, [r7, #8]
 800e43c:	681b      	ldr	r3, [r3, #0]
 800e43e:	e000      	b.n	800e442 <netif_do_set_gw+0x28>
 800e440:	2300      	movs	r3, #0
 800e442:	68fa      	ldr	r2, [r7, #12]
 800e444:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800e446:	2301      	movs	r3, #1
 800e448:	e000      	b.n	800e44c <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800e44a:	2300      	movs	r3, #0
}
 800e44c:	4618      	mov	r0, r3
 800e44e:	3714      	adds	r7, #20
 800e450:	46bd      	mov	sp, r7
 800e452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e456:	4770      	bx	lr

0800e458 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800e458:	b580      	push	{r7, lr}
 800e45a:	b088      	sub	sp, #32
 800e45c:	af00      	add	r7, sp, #0
 800e45e:	60f8      	str	r0, [r7, #12]
 800e460:	60b9      	str	r1, [r7, #8]
 800e462:	607a      	str	r2, [r7, #4]
 800e464:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800e466:	2300      	movs	r3, #0
 800e468:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800e46a:	2300      	movs	r3, #0
 800e46c:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800e46e:	68bb      	ldr	r3, [r7, #8]
 800e470:	2b00      	cmp	r3, #0
 800e472:	d101      	bne.n	800e478 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800e474:	4b1c      	ldr	r3, [pc, #112]	; (800e4e8 <netif_set_addr+0x90>)
 800e476:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	d101      	bne.n	800e482 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800e47e:	4b1a      	ldr	r3, [pc, #104]	; (800e4e8 <netif_set_addr+0x90>)
 800e480:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800e482:	683b      	ldr	r3, [r7, #0]
 800e484:	2b00      	cmp	r3, #0
 800e486:	d101      	bne.n	800e48c <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800e488:	4b17      	ldr	r3, [pc, #92]	; (800e4e8 <netif_set_addr+0x90>)
 800e48a:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800e48c:	68bb      	ldr	r3, [r7, #8]
 800e48e:	2b00      	cmp	r3, #0
 800e490:	d003      	beq.n	800e49a <netif_set_addr+0x42>
 800e492:	68bb      	ldr	r3, [r7, #8]
 800e494:	681b      	ldr	r3, [r3, #0]
 800e496:	2b00      	cmp	r3, #0
 800e498:	d101      	bne.n	800e49e <netif_set_addr+0x46>
 800e49a:	2301      	movs	r3, #1
 800e49c:	e000      	b.n	800e4a0 <netif_set_addr+0x48>
 800e49e:	2300      	movs	r3, #0
 800e4a0:	617b      	str	r3, [r7, #20]
  if (remove) {
 800e4a2:	697b      	ldr	r3, [r7, #20]
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d006      	beq.n	800e4b6 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800e4a8:	f107 0310 	add.w	r3, r7, #16
 800e4ac:	461a      	mov	r2, r3
 800e4ae:	68b9      	ldr	r1, [r7, #8]
 800e4b0:	68f8      	ldr	r0, [r7, #12]
 800e4b2:	f7ff ff49 	bl	800e348 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800e4b6:	69fa      	ldr	r2, [r7, #28]
 800e4b8:	6879      	ldr	r1, [r7, #4]
 800e4ba:	68f8      	ldr	r0, [r7, #12]
 800e4bc:	f7ff ff8e 	bl	800e3dc <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800e4c0:	69ba      	ldr	r2, [r7, #24]
 800e4c2:	6839      	ldr	r1, [r7, #0]
 800e4c4:	68f8      	ldr	r0, [r7, #12]
 800e4c6:	f7ff ffa8 	bl	800e41a <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800e4ca:	697b      	ldr	r3, [r7, #20]
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	d106      	bne.n	800e4de <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800e4d0:	f107 0310 	add.w	r3, r7, #16
 800e4d4:	461a      	mov	r2, r3
 800e4d6:	68b9      	ldr	r1, [r7, #8]
 800e4d8:	68f8      	ldr	r0, [r7, #12]
 800e4da:	f7ff ff35 	bl	800e348 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800e4de:	bf00      	nop
 800e4e0:	3720      	adds	r7, #32
 800e4e2:	46bd      	mov	sp, r7
 800e4e4:	bd80      	pop	{r7, pc}
 800e4e6:	bf00      	nop
 800e4e8:	0806c870 	.word	0x0806c870

0800e4ec <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800e4ec:	b480      	push	{r7}
 800e4ee:	b083      	sub	sp, #12
 800e4f0:	af00      	add	r7, sp, #0
 800e4f2:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800e4f4:	4a04      	ldr	r2, [pc, #16]	; (800e508 <netif_set_default+0x1c>)
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800e4fa:	bf00      	nop
 800e4fc:	370c      	adds	r7, #12
 800e4fe:	46bd      	mov	sp, r7
 800e500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e504:	4770      	bx	lr
 800e506:	bf00      	nop
 800e508:	20013cd0 	.word	0x20013cd0

0800e50c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800e50c:	b580      	push	{r7, lr}
 800e50e:	b082      	sub	sp, #8
 800e510:	af00      	add	r7, sp, #0
 800e512:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	2b00      	cmp	r3, #0
 800e518:	d107      	bne.n	800e52a <netif_set_up+0x1e>
 800e51a:	4b0f      	ldr	r3, [pc, #60]	; (800e558 <netif_set_up+0x4c>)
 800e51c:	f44f 7254 	mov.w	r2, #848	; 0x350
 800e520:	490e      	ldr	r1, [pc, #56]	; (800e55c <netif_set_up+0x50>)
 800e522:	480f      	ldr	r0, [pc, #60]	; (800e560 <netif_set_up+0x54>)
 800e524:	f00c fc54 	bl	801add0 <iprintf>
 800e528:	e013      	b.n	800e552 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800e530:	f003 0301 	and.w	r3, r3, #1
 800e534:	2b00      	cmp	r3, #0
 800e536:	d10c      	bne.n	800e552 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800e53e:	f043 0301 	orr.w	r3, r3, #1
 800e542:	b2da      	uxtb	r2, r3
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800e54a:	2103      	movs	r1, #3
 800e54c:	6878      	ldr	r0, [r7, #4]
 800e54e:	f000 f809 	bl	800e564 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800e552:	3708      	adds	r7, #8
 800e554:	46bd      	mov	sp, r7
 800e556:	bd80      	pop	{r7, pc}
 800e558:	0801dfcc 	.word	0x0801dfcc
 800e55c:	0801e154 	.word	0x0801e154
 800e560:	0801e01c 	.word	0x0801e01c

0800e564 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800e564:	b580      	push	{r7, lr}
 800e566:	b082      	sub	sp, #8
 800e568:	af00      	add	r7, sp, #0
 800e56a:	6078      	str	r0, [r7, #4]
 800e56c:	460b      	mov	r3, r1
 800e56e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	2b00      	cmp	r3, #0
 800e574:	d106      	bne.n	800e584 <netif_issue_reports+0x20>
 800e576:	4b18      	ldr	r3, [pc, #96]	; (800e5d8 <netif_issue_reports+0x74>)
 800e578:	f240 326d 	movw	r2, #877	; 0x36d
 800e57c:	4917      	ldr	r1, [pc, #92]	; (800e5dc <netif_issue_reports+0x78>)
 800e57e:	4818      	ldr	r0, [pc, #96]	; (800e5e0 <netif_issue_reports+0x7c>)
 800e580:	f00c fc26 	bl	801add0 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800e58a:	f003 0304 	and.w	r3, r3, #4
 800e58e:	2b00      	cmp	r3, #0
 800e590:	d01e      	beq.n	800e5d0 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800e598:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	d017      	beq.n	800e5d0 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800e5a0:	78fb      	ldrb	r3, [r7, #3]
 800e5a2:	f003 0301 	and.w	r3, r3, #1
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d013      	beq.n	800e5d2 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	3304      	adds	r3, #4
 800e5ae:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	d00e      	beq.n	800e5d2 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800e5ba:	f003 0308 	and.w	r3, r3, #8
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	d007      	beq.n	800e5d2 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	3304      	adds	r3, #4
 800e5c6:	4619      	mov	r1, r3
 800e5c8:	6878      	ldr	r0, [r7, #4]
 800e5ca:	f009 ffa1 	bl	8018510 <etharp_request>
 800e5ce:	e000      	b.n	800e5d2 <netif_issue_reports+0x6e>
    return;
 800e5d0:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800e5d2:	3708      	adds	r7, #8
 800e5d4:	46bd      	mov	sp, r7
 800e5d6:	bd80      	pop	{r7, pc}
 800e5d8:	0801dfcc 	.word	0x0801dfcc
 800e5dc:	0801e170 	.word	0x0801e170
 800e5e0:	0801e01c 	.word	0x0801e01c

0800e5e4 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800e5e4:	b580      	push	{r7, lr}
 800e5e6:	b082      	sub	sp, #8
 800e5e8:	af00      	add	r7, sp, #0
 800e5ea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	d107      	bne.n	800e602 <netif_set_down+0x1e>
 800e5f2:	4b12      	ldr	r3, [pc, #72]	; (800e63c <netif_set_down+0x58>)
 800e5f4:	f240 329b 	movw	r2, #923	; 0x39b
 800e5f8:	4911      	ldr	r1, [pc, #68]	; (800e640 <netif_set_down+0x5c>)
 800e5fa:	4812      	ldr	r0, [pc, #72]	; (800e644 <netif_set_down+0x60>)
 800e5fc:	f00c fbe8 	bl	801add0 <iprintf>
 800e600:	e019      	b.n	800e636 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800e608:	f003 0301 	and.w	r3, r3, #1
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	d012      	beq.n	800e636 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800e616:	f023 0301 	bic.w	r3, r3, #1
 800e61a:	b2da      	uxtb	r2, r3
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800e628:	f003 0308 	and.w	r3, r3, #8
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	d002      	beq.n	800e636 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800e630:	6878      	ldr	r0, [r7, #4]
 800e632:	f009 fb27 	bl	8017c84 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800e636:	3708      	adds	r7, #8
 800e638:	46bd      	mov	sp, r7
 800e63a:	bd80      	pop	{r7, pc}
 800e63c:	0801dfcc 	.word	0x0801dfcc
 800e640:	0801e194 	.word	0x0801e194
 800e644:	0801e01c 	.word	0x0801e01c

0800e648 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800e648:	b580      	push	{r7, lr}
 800e64a:	b082      	sub	sp, #8
 800e64c:	af00      	add	r7, sp, #0
 800e64e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	2b00      	cmp	r3, #0
 800e654:	d107      	bne.n	800e666 <netif_set_link_up+0x1e>
 800e656:	4b15      	ldr	r3, [pc, #84]	; (800e6ac <netif_set_link_up+0x64>)
 800e658:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800e65c:	4914      	ldr	r1, [pc, #80]	; (800e6b0 <netif_set_link_up+0x68>)
 800e65e:	4815      	ldr	r0, [pc, #84]	; (800e6b4 <netif_set_link_up+0x6c>)
 800e660:	f00c fbb6 	bl	801add0 <iprintf>
 800e664:	e01e      	b.n	800e6a4 <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800e66c:	f003 0304 	and.w	r3, r3, #4
 800e670:	2b00      	cmp	r3, #0
 800e672:	d117      	bne.n	800e6a4 <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800e67a:	f043 0304 	orr.w	r3, r3, #4
 800e67e:	b2da      	uxtb	r2, r3
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 800e686:	6878      	ldr	r0, [r7, #4]
 800e688:	f007 fce6 	bl	8016058 <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800e68c:	2103      	movs	r1, #3
 800e68e:	6878      	ldr	r0, [r7, #4]
 800e690:	f7ff ff68 	bl	800e564 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	69db      	ldr	r3, [r3, #28]
 800e698:	2b00      	cmp	r3, #0
 800e69a:	d003      	beq.n	800e6a4 <netif_set_link_up+0x5c>
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	69db      	ldr	r3, [r3, #28]
 800e6a0:	6878      	ldr	r0, [r7, #4]
 800e6a2:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800e6a4:	3708      	adds	r7, #8
 800e6a6:	46bd      	mov	sp, r7
 800e6a8:	bd80      	pop	{r7, pc}
 800e6aa:	bf00      	nop
 800e6ac:	0801dfcc 	.word	0x0801dfcc
 800e6b0:	0801e1b4 	.word	0x0801e1b4
 800e6b4:	0801e01c 	.word	0x0801e01c

0800e6b8 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800e6b8:	b580      	push	{r7, lr}
 800e6ba:	b082      	sub	sp, #8
 800e6bc:	af00      	add	r7, sp, #0
 800e6be:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	2b00      	cmp	r3, #0
 800e6c4:	d107      	bne.n	800e6d6 <netif_set_link_down+0x1e>
 800e6c6:	4b11      	ldr	r3, [pc, #68]	; (800e70c <netif_set_link_down+0x54>)
 800e6c8:	f240 4206 	movw	r2, #1030	; 0x406
 800e6cc:	4910      	ldr	r1, [pc, #64]	; (800e710 <netif_set_link_down+0x58>)
 800e6ce:	4811      	ldr	r0, [pc, #68]	; (800e714 <netif_set_link_down+0x5c>)
 800e6d0:	f00c fb7e 	bl	801add0 <iprintf>
 800e6d4:	e017      	b.n	800e706 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800e6dc:	f003 0304 	and.w	r3, r3, #4
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	d010      	beq.n	800e706 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800e6ea:	f023 0304 	bic.w	r3, r3, #4
 800e6ee:	b2da      	uxtb	r2, r3
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	69db      	ldr	r3, [r3, #28]
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	d003      	beq.n	800e706 <netif_set_link_down+0x4e>
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	69db      	ldr	r3, [r3, #28]
 800e702:	6878      	ldr	r0, [r7, #4]
 800e704:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800e706:	3708      	adds	r7, #8
 800e708:	46bd      	mov	sp, r7
 800e70a:	bd80      	pop	{r7, pc}
 800e70c:	0801dfcc 	.word	0x0801dfcc
 800e710:	0801e1d8 	.word	0x0801e1d8
 800e714:	0801e01c 	.word	0x0801e01c

0800e718 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800e718:	b480      	push	{r7}
 800e71a:	b085      	sub	sp, #20
 800e71c:	af00      	add	r7, sp, #0
 800e71e:	60f8      	str	r0, [r7, #12]
 800e720:	60b9      	str	r1, [r7, #8]
 800e722:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800e724:	f06f 030b 	mvn.w	r3, #11
}
 800e728:	4618      	mov	r0, r3
 800e72a:	3714      	adds	r7, #20
 800e72c:	46bd      	mov	sp, r7
 800e72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e732:	4770      	bx	lr

0800e734 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800e734:	b480      	push	{r7}
 800e736:	b085      	sub	sp, #20
 800e738:	af00      	add	r7, sp, #0
 800e73a:	4603      	mov	r3, r0
 800e73c:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800e73e:	79fb      	ldrb	r3, [r7, #7]
 800e740:	2b00      	cmp	r3, #0
 800e742:	d013      	beq.n	800e76c <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800e744:	4b0d      	ldr	r3, [pc, #52]	; (800e77c <netif_get_by_index+0x48>)
 800e746:	681b      	ldr	r3, [r3, #0]
 800e748:	60fb      	str	r3, [r7, #12]
 800e74a:	e00c      	b.n	800e766 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800e74c:	68fb      	ldr	r3, [r7, #12]
 800e74e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e752:	3301      	adds	r3, #1
 800e754:	b2db      	uxtb	r3, r3
 800e756:	79fa      	ldrb	r2, [r7, #7]
 800e758:	429a      	cmp	r2, r3
 800e75a:	d101      	bne.n	800e760 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800e75c:	68fb      	ldr	r3, [r7, #12]
 800e75e:	e006      	b.n	800e76e <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800e760:	68fb      	ldr	r3, [r7, #12]
 800e762:	681b      	ldr	r3, [r3, #0]
 800e764:	60fb      	str	r3, [r7, #12]
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	2b00      	cmp	r3, #0
 800e76a:	d1ef      	bne.n	800e74c <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800e76c:	2300      	movs	r3, #0
}
 800e76e:	4618      	mov	r0, r3
 800e770:	3714      	adds	r7, #20
 800e772:	46bd      	mov	sp, r7
 800e774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e778:	4770      	bx	lr
 800e77a:	bf00      	nop
 800e77c:	20013ccc 	.word	0x20013ccc

0800e780 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800e780:	b580      	push	{r7, lr}
 800e782:	b082      	sub	sp, #8
 800e784:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800e786:	f00b fd4d 	bl	801a224 <sys_arch_protect>
 800e78a:	6038      	str	r0, [r7, #0]
 800e78c:	4b0d      	ldr	r3, [pc, #52]	; (800e7c4 <pbuf_free_ooseq+0x44>)
 800e78e:	2200      	movs	r2, #0
 800e790:	701a      	strb	r2, [r3, #0]
 800e792:	6838      	ldr	r0, [r7, #0]
 800e794:	f00b fd54 	bl	801a240 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800e798:	4b0b      	ldr	r3, [pc, #44]	; (800e7c8 <pbuf_free_ooseq+0x48>)
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	607b      	str	r3, [r7, #4]
 800e79e:	e00a      	b.n	800e7b6 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	d003      	beq.n	800e7b0 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800e7a8:	6878      	ldr	r0, [r7, #4]
 800e7aa:	f002 fb1d 	bl	8010de8 <tcp_free_ooseq>
      return;
 800e7ae:	e005      	b.n	800e7bc <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	68db      	ldr	r3, [r3, #12]
 800e7b4:	607b      	str	r3, [r7, #4]
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	d1f1      	bne.n	800e7a0 <pbuf_free_ooseq+0x20>
    }
  }
}
 800e7bc:	3708      	adds	r7, #8
 800e7be:	46bd      	mov	sp, r7
 800e7c0:	bd80      	pop	{r7, pc}
 800e7c2:	bf00      	nop
 800e7c4:	20013cd5 	.word	0x20013cd5
 800e7c8:	20013ce4 	.word	0x20013ce4

0800e7cc <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800e7cc:	b580      	push	{r7, lr}
 800e7ce:	b082      	sub	sp, #8
 800e7d0:	af00      	add	r7, sp, #0
 800e7d2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800e7d4:	f7ff ffd4 	bl	800e780 <pbuf_free_ooseq>
}
 800e7d8:	bf00      	nop
 800e7da:	3708      	adds	r7, #8
 800e7dc:	46bd      	mov	sp, r7
 800e7de:	bd80      	pop	{r7, pc}

0800e7e0 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800e7e0:	b580      	push	{r7, lr}
 800e7e2:	b082      	sub	sp, #8
 800e7e4:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800e7e6:	f00b fd1d 	bl	801a224 <sys_arch_protect>
 800e7ea:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800e7ec:	4b0f      	ldr	r3, [pc, #60]	; (800e82c <pbuf_pool_is_empty+0x4c>)
 800e7ee:	781b      	ldrb	r3, [r3, #0]
 800e7f0:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800e7f2:	4b0e      	ldr	r3, [pc, #56]	; (800e82c <pbuf_pool_is_empty+0x4c>)
 800e7f4:	2201      	movs	r2, #1
 800e7f6:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800e7f8:	6878      	ldr	r0, [r7, #4]
 800e7fa:	f00b fd21 	bl	801a240 <sys_arch_unprotect>

  if (!queued) {
 800e7fe:	78fb      	ldrb	r3, [r7, #3]
 800e800:	2b00      	cmp	r3, #0
 800e802:	d10f      	bne.n	800e824 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800e804:	2100      	movs	r1, #0
 800e806:	480a      	ldr	r0, [pc, #40]	; (800e830 <pbuf_pool_is_empty+0x50>)
 800e808:	f7fe fd62 	bl	800d2d0 <tcpip_try_callback>
 800e80c:	4603      	mov	r3, r0
 800e80e:	2b00      	cmp	r3, #0
 800e810:	d008      	beq.n	800e824 <pbuf_pool_is_empty+0x44>
 800e812:	f00b fd07 	bl	801a224 <sys_arch_protect>
 800e816:	6078      	str	r0, [r7, #4]
 800e818:	4b04      	ldr	r3, [pc, #16]	; (800e82c <pbuf_pool_is_empty+0x4c>)
 800e81a:	2200      	movs	r2, #0
 800e81c:	701a      	strb	r2, [r3, #0]
 800e81e:	6878      	ldr	r0, [r7, #4]
 800e820:	f00b fd0e 	bl	801a240 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800e824:	bf00      	nop
 800e826:	3708      	adds	r7, #8
 800e828:	46bd      	mov	sp, r7
 800e82a:	bd80      	pop	{r7, pc}
 800e82c:	20013cd5 	.word	0x20013cd5
 800e830:	0800e7cd 	.word	0x0800e7cd

0800e834 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800e834:	b480      	push	{r7}
 800e836:	b085      	sub	sp, #20
 800e838:	af00      	add	r7, sp, #0
 800e83a:	60f8      	str	r0, [r7, #12]
 800e83c:	60b9      	str	r1, [r7, #8]
 800e83e:	4611      	mov	r1, r2
 800e840:	461a      	mov	r2, r3
 800e842:	460b      	mov	r3, r1
 800e844:	80fb      	strh	r3, [r7, #6]
 800e846:	4613      	mov	r3, r2
 800e848:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800e84a:	68fb      	ldr	r3, [r7, #12]
 800e84c:	2200      	movs	r2, #0
 800e84e:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800e850:	68fb      	ldr	r3, [r7, #12]
 800e852:	68ba      	ldr	r2, [r7, #8]
 800e854:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800e856:	68fb      	ldr	r3, [r7, #12]
 800e858:	88fa      	ldrh	r2, [r7, #6]
 800e85a:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800e85c:	68fb      	ldr	r3, [r7, #12]
 800e85e:	88ba      	ldrh	r2, [r7, #4]
 800e860:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800e862:	8b3b      	ldrh	r3, [r7, #24]
 800e864:	b2da      	uxtb	r2, r3
 800e866:	68fb      	ldr	r3, [r7, #12]
 800e868:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800e86a:	68fb      	ldr	r3, [r7, #12]
 800e86c:	7f3a      	ldrb	r2, [r7, #28]
 800e86e:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800e870:	68fb      	ldr	r3, [r7, #12]
 800e872:	2201      	movs	r2, #1
 800e874:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800e876:	68fb      	ldr	r3, [r7, #12]
 800e878:	2200      	movs	r2, #0
 800e87a:	73da      	strb	r2, [r3, #15]
}
 800e87c:	bf00      	nop
 800e87e:	3714      	adds	r7, #20
 800e880:	46bd      	mov	sp, r7
 800e882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e886:	4770      	bx	lr

0800e888 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800e888:	b580      	push	{r7, lr}
 800e88a:	b08c      	sub	sp, #48	; 0x30
 800e88c:	af02      	add	r7, sp, #8
 800e88e:	4603      	mov	r3, r0
 800e890:	71fb      	strb	r3, [r7, #7]
 800e892:	460b      	mov	r3, r1
 800e894:	80bb      	strh	r3, [r7, #4]
 800e896:	4613      	mov	r3, r2
 800e898:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800e89a:	79fb      	ldrb	r3, [r7, #7]
 800e89c:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800e89e:	887b      	ldrh	r3, [r7, #2]
 800e8a0:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800e8a4:	f000 8082 	beq.w	800e9ac <pbuf_alloc+0x124>
 800e8a8:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800e8ac:	f300 80ca 	bgt.w	800ea44 <pbuf_alloc+0x1bc>
 800e8b0:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800e8b4:	d010      	beq.n	800e8d8 <pbuf_alloc+0x50>
 800e8b6:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800e8ba:	f300 80c3 	bgt.w	800ea44 <pbuf_alloc+0x1bc>
 800e8be:	2b01      	cmp	r3, #1
 800e8c0:	d002      	beq.n	800e8c8 <pbuf_alloc+0x40>
 800e8c2:	2b41      	cmp	r3, #65	; 0x41
 800e8c4:	f040 80be 	bne.w	800ea44 <pbuf_alloc+0x1bc>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800e8c8:	887a      	ldrh	r2, [r7, #2]
 800e8ca:	88bb      	ldrh	r3, [r7, #4]
 800e8cc:	4619      	mov	r1, r3
 800e8ce:	2000      	movs	r0, #0
 800e8d0:	f000 f8d4 	bl	800ea7c <pbuf_alloc_reference>
 800e8d4:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800e8d6:	e0bf      	b.n	800ea58 <pbuf_alloc+0x1d0>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800e8d8:	2300      	movs	r3, #0
 800e8da:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800e8dc:	2300      	movs	r3, #0
 800e8de:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800e8e0:	88bb      	ldrh	r3, [r7, #4]
 800e8e2:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800e8e4:	200c      	movs	r0, #12
 800e8e6:	f7ff fbc3 	bl	800e070 <memp_malloc>
 800e8ea:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800e8ec:	693b      	ldr	r3, [r7, #16]
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	d109      	bne.n	800e906 <pbuf_alloc+0x7e>
          PBUF_POOL_IS_EMPTY();
 800e8f2:	f7ff ff75 	bl	800e7e0 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800e8f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	d002      	beq.n	800e902 <pbuf_alloc+0x7a>
            pbuf_free(p);
 800e8fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e8fe:	f000 faab 	bl	800ee58 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800e902:	2300      	movs	r3, #0
 800e904:	e0a9      	b.n	800ea5a <pbuf_alloc+0x1d2>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800e906:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e908:	3303      	adds	r3, #3
 800e90a:	b29b      	uxth	r3, r3
 800e90c:	f023 0303 	bic.w	r3, r3, #3
 800e910:	b29b      	uxth	r3, r3
 800e912:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 800e916:	3304      	adds	r3, #4
 800e918:	b29b      	uxth	r3, r3
 800e91a:	8b7a      	ldrh	r2, [r7, #26]
 800e91c:	4293      	cmp	r3, r2
 800e91e:	bf28      	it	cs
 800e920:	4613      	movcs	r3, r2
 800e922:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800e924:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e926:	3310      	adds	r3, #16
 800e928:	693a      	ldr	r2, [r7, #16]
 800e92a:	4413      	add	r3, r2
 800e92c:	3303      	adds	r3, #3
 800e92e:	f023 0303 	bic.w	r3, r3, #3
 800e932:	4618      	mov	r0, r3
 800e934:	89f9      	ldrh	r1, [r7, #14]
 800e936:	8b7a      	ldrh	r2, [r7, #26]
 800e938:	2300      	movs	r3, #0
 800e93a:	9301      	str	r3, [sp, #4]
 800e93c:	887b      	ldrh	r3, [r7, #2]
 800e93e:	9300      	str	r3, [sp, #0]
 800e940:	460b      	mov	r3, r1
 800e942:	4601      	mov	r1, r0
 800e944:	6938      	ldr	r0, [r7, #16]
 800e946:	f7ff ff75 	bl	800e834 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800e94a:	693b      	ldr	r3, [r7, #16]
 800e94c:	685b      	ldr	r3, [r3, #4]
 800e94e:	f003 0303 	and.w	r3, r3, #3
 800e952:	2b00      	cmp	r3, #0
 800e954:	d006      	beq.n	800e964 <pbuf_alloc+0xdc>
 800e956:	4b43      	ldr	r3, [pc, #268]	; (800ea64 <pbuf_alloc+0x1dc>)
 800e958:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e95c:	4942      	ldr	r1, [pc, #264]	; (800ea68 <pbuf_alloc+0x1e0>)
 800e95e:	4843      	ldr	r0, [pc, #268]	; (800ea6c <pbuf_alloc+0x1e4>)
 800e960:	f00c fa36 	bl	801add0 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800e964:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e966:	3303      	adds	r3, #3
 800e968:	f023 0303 	bic.w	r3, r3, #3
 800e96c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800e970:	4293      	cmp	r3, r2
 800e972:	d106      	bne.n	800e982 <pbuf_alloc+0xfa>
 800e974:	4b3b      	ldr	r3, [pc, #236]	; (800ea64 <pbuf_alloc+0x1dc>)
 800e976:	f44f 7281 	mov.w	r2, #258	; 0x102
 800e97a:	493d      	ldr	r1, [pc, #244]	; (800ea70 <pbuf_alloc+0x1e8>)
 800e97c:	483b      	ldr	r0, [pc, #236]	; (800ea6c <pbuf_alloc+0x1e4>)
 800e97e:	f00c fa27 	bl	801add0 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800e982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e984:	2b00      	cmp	r3, #0
 800e986:	d102      	bne.n	800e98e <pbuf_alloc+0x106>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800e988:	693b      	ldr	r3, [r7, #16]
 800e98a:	627b      	str	r3, [r7, #36]	; 0x24
 800e98c:	e002      	b.n	800e994 <pbuf_alloc+0x10c>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800e98e:	69fb      	ldr	r3, [r7, #28]
 800e990:	693a      	ldr	r2, [r7, #16]
 800e992:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800e994:	693b      	ldr	r3, [r7, #16]
 800e996:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800e998:	8b7a      	ldrh	r2, [r7, #26]
 800e99a:	89fb      	ldrh	r3, [r7, #14]
 800e99c:	1ad3      	subs	r3, r2, r3
 800e99e:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800e9a0:	2300      	movs	r3, #0
 800e9a2:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800e9a4:	8b7b      	ldrh	r3, [r7, #26]
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d19c      	bne.n	800e8e4 <pbuf_alloc+0x5c>
      break;
 800e9aa:	e055      	b.n	800ea58 <pbuf_alloc+0x1d0>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800e9ac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e9ae:	3303      	adds	r3, #3
 800e9b0:	b29b      	uxth	r3, r3
 800e9b2:	f023 0303 	bic.w	r3, r3, #3
 800e9b6:	b29a      	uxth	r2, r3
 800e9b8:	88bb      	ldrh	r3, [r7, #4]
 800e9ba:	3303      	adds	r3, #3
 800e9bc:	b29b      	uxth	r3, r3
 800e9be:	f023 0303 	bic.w	r3, r3, #3
 800e9c2:	b29b      	uxth	r3, r3
 800e9c4:	4413      	add	r3, r2
 800e9c6:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800e9c8:	8b3b      	ldrh	r3, [r7, #24]
 800e9ca:	3310      	adds	r3, #16
 800e9cc:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800e9ce:	8b3a      	ldrh	r2, [r7, #24]
 800e9d0:	88bb      	ldrh	r3, [r7, #4]
 800e9d2:	3303      	adds	r3, #3
 800e9d4:	f023 0303 	bic.w	r3, r3, #3
 800e9d8:	429a      	cmp	r2, r3
 800e9da:	d306      	bcc.n	800e9ea <pbuf_alloc+0x162>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800e9dc:	8afa      	ldrh	r2, [r7, #22]
 800e9de:	88bb      	ldrh	r3, [r7, #4]
 800e9e0:	3303      	adds	r3, #3
 800e9e2:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800e9e6:	429a      	cmp	r2, r3
 800e9e8:	d201      	bcs.n	800e9ee <pbuf_alloc+0x166>
        return NULL;
 800e9ea:	2300      	movs	r3, #0
 800e9ec:	e035      	b.n	800ea5a <pbuf_alloc+0x1d2>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800e9ee:	8afb      	ldrh	r3, [r7, #22]
 800e9f0:	4618      	mov	r0, r3
 800e9f2:	f7ff f9bb 	bl	800dd6c <mem_malloc>
 800e9f6:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800e9f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d101      	bne.n	800ea02 <pbuf_alloc+0x17a>
        return NULL;
 800e9fe:	2300      	movs	r3, #0
 800ea00:	e02b      	b.n	800ea5a <pbuf_alloc+0x1d2>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800ea02:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ea04:	3310      	adds	r3, #16
 800ea06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ea08:	4413      	add	r3, r2
 800ea0a:	3303      	adds	r3, #3
 800ea0c:	f023 0303 	bic.w	r3, r3, #3
 800ea10:	4618      	mov	r0, r3
 800ea12:	88b9      	ldrh	r1, [r7, #4]
 800ea14:	88ba      	ldrh	r2, [r7, #4]
 800ea16:	2300      	movs	r3, #0
 800ea18:	9301      	str	r3, [sp, #4]
 800ea1a:	887b      	ldrh	r3, [r7, #2]
 800ea1c:	9300      	str	r3, [sp, #0]
 800ea1e:	460b      	mov	r3, r1
 800ea20:	4601      	mov	r1, r0
 800ea22:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ea24:	f7ff ff06 	bl	800e834 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800ea28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea2a:	685b      	ldr	r3, [r3, #4]
 800ea2c:	f003 0303 	and.w	r3, r3, #3
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	d010      	beq.n	800ea56 <pbuf_alloc+0x1ce>
 800ea34:	4b0b      	ldr	r3, [pc, #44]	; (800ea64 <pbuf_alloc+0x1dc>)
 800ea36:	f44f 7291 	mov.w	r2, #290	; 0x122
 800ea3a:	490e      	ldr	r1, [pc, #56]	; (800ea74 <pbuf_alloc+0x1ec>)
 800ea3c:	480b      	ldr	r0, [pc, #44]	; (800ea6c <pbuf_alloc+0x1e4>)
 800ea3e:	f00c f9c7 	bl	801add0 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800ea42:	e008      	b.n	800ea56 <pbuf_alloc+0x1ce>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800ea44:	4b07      	ldr	r3, [pc, #28]	; (800ea64 <pbuf_alloc+0x1dc>)
 800ea46:	f240 1227 	movw	r2, #295	; 0x127
 800ea4a:	490b      	ldr	r1, [pc, #44]	; (800ea78 <pbuf_alloc+0x1f0>)
 800ea4c:	4807      	ldr	r0, [pc, #28]	; (800ea6c <pbuf_alloc+0x1e4>)
 800ea4e:	f00c f9bf 	bl	801add0 <iprintf>
      return NULL;
 800ea52:	2300      	movs	r3, #0
 800ea54:	e001      	b.n	800ea5a <pbuf_alloc+0x1d2>
      break;
 800ea56:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800ea58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ea5a:	4618      	mov	r0, r3
 800ea5c:	3728      	adds	r7, #40	; 0x28
 800ea5e:	46bd      	mov	sp, r7
 800ea60:	bd80      	pop	{r7, pc}
 800ea62:	bf00      	nop
 800ea64:	0801e1fc 	.word	0x0801e1fc
 800ea68:	0801e22c 	.word	0x0801e22c
 800ea6c:	0801e25c 	.word	0x0801e25c
 800ea70:	0801e284 	.word	0x0801e284
 800ea74:	0801e2b8 	.word	0x0801e2b8
 800ea78:	0801e2e4 	.word	0x0801e2e4

0800ea7c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800ea7c:	b580      	push	{r7, lr}
 800ea7e:	b086      	sub	sp, #24
 800ea80:	af02      	add	r7, sp, #8
 800ea82:	6078      	str	r0, [r7, #4]
 800ea84:	460b      	mov	r3, r1
 800ea86:	807b      	strh	r3, [r7, #2]
 800ea88:	4613      	mov	r3, r2
 800ea8a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800ea8c:	883b      	ldrh	r3, [r7, #0]
 800ea8e:	2b41      	cmp	r3, #65	; 0x41
 800ea90:	d009      	beq.n	800eaa6 <pbuf_alloc_reference+0x2a>
 800ea92:	883b      	ldrh	r3, [r7, #0]
 800ea94:	2b01      	cmp	r3, #1
 800ea96:	d006      	beq.n	800eaa6 <pbuf_alloc_reference+0x2a>
 800ea98:	4b0f      	ldr	r3, [pc, #60]	; (800ead8 <pbuf_alloc_reference+0x5c>)
 800ea9a:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800ea9e:	490f      	ldr	r1, [pc, #60]	; (800eadc <pbuf_alloc_reference+0x60>)
 800eaa0:	480f      	ldr	r0, [pc, #60]	; (800eae0 <pbuf_alloc_reference+0x64>)
 800eaa2:	f00c f995 	bl	801add0 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800eaa6:	200b      	movs	r0, #11
 800eaa8:	f7ff fae2 	bl	800e070 <memp_malloc>
 800eaac:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800eaae:	68fb      	ldr	r3, [r7, #12]
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	d101      	bne.n	800eab8 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800eab4:	2300      	movs	r3, #0
 800eab6:	e00b      	b.n	800ead0 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800eab8:	8879      	ldrh	r1, [r7, #2]
 800eaba:	887a      	ldrh	r2, [r7, #2]
 800eabc:	2300      	movs	r3, #0
 800eabe:	9301      	str	r3, [sp, #4]
 800eac0:	883b      	ldrh	r3, [r7, #0]
 800eac2:	9300      	str	r3, [sp, #0]
 800eac4:	460b      	mov	r3, r1
 800eac6:	6879      	ldr	r1, [r7, #4]
 800eac8:	68f8      	ldr	r0, [r7, #12]
 800eaca:	f7ff feb3 	bl	800e834 <pbuf_init_alloced_pbuf>
  return p;
 800eace:	68fb      	ldr	r3, [r7, #12]
}
 800ead0:	4618      	mov	r0, r3
 800ead2:	3710      	adds	r7, #16
 800ead4:	46bd      	mov	sp, r7
 800ead6:	bd80      	pop	{r7, pc}
 800ead8:	0801e1fc 	.word	0x0801e1fc
 800eadc:	0801e300 	.word	0x0801e300
 800eae0:	0801e25c 	.word	0x0801e25c

0800eae4 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800eae4:	b580      	push	{r7, lr}
 800eae6:	b088      	sub	sp, #32
 800eae8:	af02      	add	r7, sp, #8
 800eaea:	607b      	str	r3, [r7, #4]
 800eaec:	4603      	mov	r3, r0
 800eaee:	73fb      	strb	r3, [r7, #15]
 800eaf0:	460b      	mov	r3, r1
 800eaf2:	81bb      	strh	r3, [r7, #12]
 800eaf4:	4613      	mov	r3, r2
 800eaf6:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800eaf8:	7bfb      	ldrb	r3, [r7, #15]
 800eafa:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800eafc:	8a7b      	ldrh	r3, [r7, #18]
 800eafe:	3303      	adds	r3, #3
 800eb00:	f023 0203 	bic.w	r2, r3, #3
 800eb04:	89bb      	ldrh	r3, [r7, #12]
 800eb06:	441a      	add	r2, r3
 800eb08:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eb0a:	429a      	cmp	r2, r3
 800eb0c:	d901      	bls.n	800eb12 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800eb0e:	2300      	movs	r3, #0
 800eb10:	e018      	b.n	800eb44 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800eb12:	6a3b      	ldr	r3, [r7, #32]
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	d007      	beq.n	800eb28 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800eb18:	8a7b      	ldrh	r3, [r7, #18]
 800eb1a:	3303      	adds	r3, #3
 800eb1c:	f023 0303 	bic.w	r3, r3, #3
 800eb20:	6a3a      	ldr	r2, [r7, #32]
 800eb22:	4413      	add	r3, r2
 800eb24:	617b      	str	r3, [r7, #20]
 800eb26:	e001      	b.n	800eb2c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800eb28:	2300      	movs	r3, #0
 800eb2a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800eb2c:	6878      	ldr	r0, [r7, #4]
 800eb2e:	89b9      	ldrh	r1, [r7, #12]
 800eb30:	89ba      	ldrh	r2, [r7, #12]
 800eb32:	2302      	movs	r3, #2
 800eb34:	9301      	str	r3, [sp, #4]
 800eb36:	897b      	ldrh	r3, [r7, #10]
 800eb38:	9300      	str	r3, [sp, #0]
 800eb3a:	460b      	mov	r3, r1
 800eb3c:	6979      	ldr	r1, [r7, #20]
 800eb3e:	f7ff fe79 	bl	800e834 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800eb42:	687b      	ldr	r3, [r7, #4]
}
 800eb44:	4618      	mov	r0, r3
 800eb46:	3718      	adds	r7, #24
 800eb48:	46bd      	mov	sp, r7
 800eb4a:	bd80      	pop	{r7, pc}

0800eb4c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800eb4c:	b580      	push	{r7, lr}
 800eb4e:	b084      	sub	sp, #16
 800eb50:	af00      	add	r7, sp, #0
 800eb52:	6078      	str	r0, [r7, #4]
 800eb54:	460b      	mov	r3, r1
 800eb56:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	d106      	bne.n	800eb6c <pbuf_realloc+0x20>
 800eb5e:	4b3a      	ldr	r3, [pc, #232]	; (800ec48 <pbuf_realloc+0xfc>)
 800eb60:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800eb64:	4939      	ldr	r1, [pc, #228]	; (800ec4c <pbuf_realloc+0x100>)
 800eb66:	483a      	ldr	r0, [pc, #232]	; (800ec50 <pbuf_realloc+0x104>)
 800eb68:	f00c f932 	bl	801add0 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	891b      	ldrh	r3, [r3, #8]
 800eb70:	887a      	ldrh	r2, [r7, #2]
 800eb72:	429a      	cmp	r2, r3
 800eb74:	d263      	bcs.n	800ec3e <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	891a      	ldrh	r2, [r3, #8]
 800eb7a:	887b      	ldrh	r3, [r7, #2]
 800eb7c:	1ad3      	subs	r3, r2, r3
 800eb7e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800eb80:	887b      	ldrh	r3, [r7, #2]
 800eb82:	817b      	strh	r3, [r7, #10]
  q = p;
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800eb88:	e018      	b.n	800ebbc <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800eb8a:	68fb      	ldr	r3, [r7, #12]
 800eb8c:	895b      	ldrh	r3, [r3, #10]
 800eb8e:	897a      	ldrh	r2, [r7, #10]
 800eb90:	1ad3      	subs	r3, r2, r3
 800eb92:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800eb94:	68fb      	ldr	r3, [r7, #12]
 800eb96:	891a      	ldrh	r2, [r3, #8]
 800eb98:	893b      	ldrh	r3, [r7, #8]
 800eb9a:	1ad3      	subs	r3, r2, r3
 800eb9c:	b29a      	uxth	r2, r3
 800eb9e:	68fb      	ldr	r3, [r7, #12]
 800eba0:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800eba2:	68fb      	ldr	r3, [r7, #12]
 800eba4:	681b      	ldr	r3, [r3, #0]
 800eba6:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800eba8:	68fb      	ldr	r3, [r7, #12]
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	d106      	bne.n	800ebbc <pbuf_realloc+0x70>
 800ebae:	4b26      	ldr	r3, [pc, #152]	; (800ec48 <pbuf_realloc+0xfc>)
 800ebb0:	f240 12af 	movw	r2, #431	; 0x1af
 800ebb4:	4927      	ldr	r1, [pc, #156]	; (800ec54 <pbuf_realloc+0x108>)
 800ebb6:	4826      	ldr	r0, [pc, #152]	; (800ec50 <pbuf_realloc+0x104>)
 800ebb8:	f00c f90a 	bl	801add0 <iprintf>
  while (rem_len > q->len) {
 800ebbc:	68fb      	ldr	r3, [r7, #12]
 800ebbe:	895b      	ldrh	r3, [r3, #10]
 800ebc0:	897a      	ldrh	r2, [r7, #10]
 800ebc2:	429a      	cmp	r2, r3
 800ebc4:	d8e1      	bhi.n	800eb8a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800ebc6:	68fb      	ldr	r3, [r7, #12]
 800ebc8:	7b1b      	ldrb	r3, [r3, #12]
 800ebca:	f003 030f 	and.w	r3, r3, #15
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d121      	bne.n	800ec16 <pbuf_realloc+0xca>
 800ebd2:	68fb      	ldr	r3, [r7, #12]
 800ebd4:	895b      	ldrh	r3, [r3, #10]
 800ebd6:	897a      	ldrh	r2, [r7, #10]
 800ebd8:	429a      	cmp	r2, r3
 800ebda:	d01c      	beq.n	800ec16 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800ebdc:	68fb      	ldr	r3, [r7, #12]
 800ebde:	7b5b      	ldrb	r3, [r3, #13]
 800ebe0:	f003 0302 	and.w	r3, r3, #2
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	d116      	bne.n	800ec16 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	685a      	ldr	r2, [r3, #4]
 800ebec:	68fb      	ldr	r3, [r7, #12]
 800ebee:	1ad3      	subs	r3, r2, r3
 800ebf0:	b29a      	uxth	r2, r3
 800ebf2:	897b      	ldrh	r3, [r7, #10]
 800ebf4:	4413      	add	r3, r2
 800ebf6:	b29b      	uxth	r3, r3
 800ebf8:	4619      	mov	r1, r3
 800ebfa:	68f8      	ldr	r0, [r7, #12]
 800ebfc:	f7fe ffac 	bl	800db58 <mem_trim>
 800ec00:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800ec02:	68fb      	ldr	r3, [r7, #12]
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	d106      	bne.n	800ec16 <pbuf_realloc+0xca>
 800ec08:	4b0f      	ldr	r3, [pc, #60]	; (800ec48 <pbuf_realloc+0xfc>)
 800ec0a:	f240 12bd 	movw	r2, #445	; 0x1bd
 800ec0e:	4912      	ldr	r1, [pc, #72]	; (800ec58 <pbuf_realloc+0x10c>)
 800ec10:	480f      	ldr	r0, [pc, #60]	; (800ec50 <pbuf_realloc+0x104>)
 800ec12:	f00c f8dd 	bl	801add0 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800ec16:	68fb      	ldr	r3, [r7, #12]
 800ec18:	897a      	ldrh	r2, [r7, #10]
 800ec1a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800ec1c:	68fb      	ldr	r3, [r7, #12]
 800ec1e:	895a      	ldrh	r2, [r3, #10]
 800ec20:	68fb      	ldr	r3, [r7, #12]
 800ec22:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800ec24:	68fb      	ldr	r3, [r7, #12]
 800ec26:	681b      	ldr	r3, [r3, #0]
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	d004      	beq.n	800ec36 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800ec2c:	68fb      	ldr	r3, [r7, #12]
 800ec2e:	681b      	ldr	r3, [r3, #0]
 800ec30:	4618      	mov	r0, r3
 800ec32:	f000 f911 	bl	800ee58 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800ec36:	68fb      	ldr	r3, [r7, #12]
 800ec38:	2200      	movs	r2, #0
 800ec3a:	601a      	str	r2, [r3, #0]
 800ec3c:	e000      	b.n	800ec40 <pbuf_realloc+0xf4>
    return;
 800ec3e:	bf00      	nop

}
 800ec40:	3710      	adds	r7, #16
 800ec42:	46bd      	mov	sp, r7
 800ec44:	bd80      	pop	{r7, pc}
 800ec46:	bf00      	nop
 800ec48:	0801e1fc 	.word	0x0801e1fc
 800ec4c:	0801e314 	.word	0x0801e314
 800ec50:	0801e25c 	.word	0x0801e25c
 800ec54:	0801e32c 	.word	0x0801e32c
 800ec58:	0801e344 	.word	0x0801e344

0800ec5c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800ec5c:	b580      	push	{r7, lr}
 800ec5e:	b086      	sub	sp, #24
 800ec60:	af00      	add	r7, sp, #0
 800ec62:	60f8      	str	r0, [r7, #12]
 800ec64:	60b9      	str	r1, [r7, #8]
 800ec66:	4613      	mov	r3, r2
 800ec68:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800ec6a:	68fb      	ldr	r3, [r7, #12]
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	d106      	bne.n	800ec7e <pbuf_add_header_impl+0x22>
 800ec70:	4b2b      	ldr	r3, [pc, #172]	; (800ed20 <pbuf_add_header_impl+0xc4>)
 800ec72:	f240 12df 	movw	r2, #479	; 0x1df
 800ec76:	492b      	ldr	r1, [pc, #172]	; (800ed24 <pbuf_add_header_impl+0xc8>)
 800ec78:	482b      	ldr	r0, [pc, #172]	; (800ed28 <pbuf_add_header_impl+0xcc>)
 800ec7a:	f00c f8a9 	bl	801add0 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800ec7e:	68fb      	ldr	r3, [r7, #12]
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	d003      	beq.n	800ec8c <pbuf_add_header_impl+0x30>
 800ec84:	68bb      	ldr	r3, [r7, #8]
 800ec86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ec8a:	d301      	bcc.n	800ec90 <pbuf_add_header_impl+0x34>
    return 1;
 800ec8c:	2301      	movs	r3, #1
 800ec8e:	e043      	b.n	800ed18 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800ec90:	68bb      	ldr	r3, [r7, #8]
 800ec92:	2b00      	cmp	r3, #0
 800ec94:	d101      	bne.n	800ec9a <pbuf_add_header_impl+0x3e>
    return 0;
 800ec96:	2300      	movs	r3, #0
 800ec98:	e03e      	b.n	800ed18 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800ec9a:	68bb      	ldr	r3, [r7, #8]
 800ec9c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800ec9e:	68fb      	ldr	r3, [r7, #12]
 800eca0:	891a      	ldrh	r2, [r3, #8]
 800eca2:	8a7b      	ldrh	r3, [r7, #18]
 800eca4:	4413      	add	r3, r2
 800eca6:	b29b      	uxth	r3, r3
 800eca8:	8a7a      	ldrh	r2, [r7, #18]
 800ecaa:	429a      	cmp	r2, r3
 800ecac:	d901      	bls.n	800ecb2 <pbuf_add_header_impl+0x56>
    return 1;
 800ecae:	2301      	movs	r3, #1
 800ecb0:	e032      	b.n	800ed18 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800ecb2:	68fb      	ldr	r3, [r7, #12]
 800ecb4:	7b1b      	ldrb	r3, [r3, #12]
 800ecb6:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800ecb8:	8a3b      	ldrh	r3, [r7, #16]
 800ecba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ecbe:	2b00      	cmp	r3, #0
 800ecc0:	d00c      	beq.n	800ecdc <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800ecc2:	68fb      	ldr	r3, [r7, #12]
 800ecc4:	685a      	ldr	r2, [r3, #4]
 800ecc6:	68bb      	ldr	r3, [r7, #8]
 800ecc8:	425b      	negs	r3, r3
 800ecca:	4413      	add	r3, r2
 800eccc:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800ecce:	68fb      	ldr	r3, [r7, #12]
 800ecd0:	3310      	adds	r3, #16
 800ecd2:	697a      	ldr	r2, [r7, #20]
 800ecd4:	429a      	cmp	r2, r3
 800ecd6:	d20d      	bcs.n	800ecf4 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800ecd8:	2301      	movs	r3, #1
 800ecda:	e01d      	b.n	800ed18 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800ecdc:	79fb      	ldrb	r3, [r7, #7]
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	d006      	beq.n	800ecf0 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800ece2:	68fb      	ldr	r3, [r7, #12]
 800ece4:	685a      	ldr	r2, [r3, #4]
 800ece6:	68bb      	ldr	r3, [r7, #8]
 800ece8:	425b      	negs	r3, r3
 800ecea:	4413      	add	r3, r2
 800ecec:	617b      	str	r3, [r7, #20]
 800ecee:	e001      	b.n	800ecf4 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800ecf0:	2301      	movs	r3, #1
 800ecf2:	e011      	b.n	800ed18 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800ecf4:	68fb      	ldr	r3, [r7, #12]
 800ecf6:	697a      	ldr	r2, [r7, #20]
 800ecf8:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800ecfa:	68fb      	ldr	r3, [r7, #12]
 800ecfc:	895a      	ldrh	r2, [r3, #10]
 800ecfe:	8a7b      	ldrh	r3, [r7, #18]
 800ed00:	4413      	add	r3, r2
 800ed02:	b29a      	uxth	r2, r3
 800ed04:	68fb      	ldr	r3, [r7, #12]
 800ed06:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800ed08:	68fb      	ldr	r3, [r7, #12]
 800ed0a:	891a      	ldrh	r2, [r3, #8]
 800ed0c:	8a7b      	ldrh	r3, [r7, #18]
 800ed0e:	4413      	add	r3, r2
 800ed10:	b29a      	uxth	r2, r3
 800ed12:	68fb      	ldr	r3, [r7, #12]
 800ed14:	811a      	strh	r2, [r3, #8]


  return 0;
 800ed16:	2300      	movs	r3, #0
}
 800ed18:	4618      	mov	r0, r3
 800ed1a:	3718      	adds	r7, #24
 800ed1c:	46bd      	mov	sp, r7
 800ed1e:	bd80      	pop	{r7, pc}
 800ed20:	0801e1fc 	.word	0x0801e1fc
 800ed24:	0801e360 	.word	0x0801e360
 800ed28:	0801e25c 	.word	0x0801e25c

0800ed2c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800ed2c:	b580      	push	{r7, lr}
 800ed2e:	b082      	sub	sp, #8
 800ed30:	af00      	add	r7, sp, #0
 800ed32:	6078      	str	r0, [r7, #4]
 800ed34:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800ed36:	2200      	movs	r2, #0
 800ed38:	6839      	ldr	r1, [r7, #0]
 800ed3a:	6878      	ldr	r0, [r7, #4]
 800ed3c:	f7ff ff8e 	bl	800ec5c <pbuf_add_header_impl>
 800ed40:	4603      	mov	r3, r0
}
 800ed42:	4618      	mov	r0, r3
 800ed44:	3708      	adds	r7, #8
 800ed46:	46bd      	mov	sp, r7
 800ed48:	bd80      	pop	{r7, pc}
	...

0800ed4c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800ed4c:	b580      	push	{r7, lr}
 800ed4e:	b084      	sub	sp, #16
 800ed50:	af00      	add	r7, sp, #0
 800ed52:	6078      	str	r0, [r7, #4]
 800ed54:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	d106      	bne.n	800ed6a <pbuf_remove_header+0x1e>
 800ed5c:	4b20      	ldr	r3, [pc, #128]	; (800ede0 <pbuf_remove_header+0x94>)
 800ed5e:	f240 224b 	movw	r2, #587	; 0x24b
 800ed62:	4920      	ldr	r1, [pc, #128]	; (800ede4 <pbuf_remove_header+0x98>)
 800ed64:	4820      	ldr	r0, [pc, #128]	; (800ede8 <pbuf_remove_header+0x9c>)
 800ed66:	f00c f833 	bl	801add0 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d003      	beq.n	800ed78 <pbuf_remove_header+0x2c>
 800ed70:	683b      	ldr	r3, [r7, #0]
 800ed72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ed76:	d301      	bcc.n	800ed7c <pbuf_remove_header+0x30>
    return 1;
 800ed78:	2301      	movs	r3, #1
 800ed7a:	e02c      	b.n	800edd6 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800ed7c:	683b      	ldr	r3, [r7, #0]
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	d101      	bne.n	800ed86 <pbuf_remove_header+0x3a>
    return 0;
 800ed82:	2300      	movs	r3, #0
 800ed84:	e027      	b.n	800edd6 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800ed86:	683b      	ldr	r3, [r7, #0]
 800ed88:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	895b      	ldrh	r3, [r3, #10]
 800ed8e:	89fa      	ldrh	r2, [r7, #14]
 800ed90:	429a      	cmp	r2, r3
 800ed92:	d908      	bls.n	800eda6 <pbuf_remove_header+0x5a>
 800ed94:	4b12      	ldr	r3, [pc, #72]	; (800ede0 <pbuf_remove_header+0x94>)
 800ed96:	f240 2255 	movw	r2, #597	; 0x255
 800ed9a:	4914      	ldr	r1, [pc, #80]	; (800edec <pbuf_remove_header+0xa0>)
 800ed9c:	4812      	ldr	r0, [pc, #72]	; (800ede8 <pbuf_remove_header+0x9c>)
 800ed9e:	f00c f817 	bl	801add0 <iprintf>
 800eda2:	2301      	movs	r3, #1
 800eda4:	e017      	b.n	800edd6 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	685b      	ldr	r3, [r3, #4]
 800edaa:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	685a      	ldr	r2, [r3, #4]
 800edb0:	683b      	ldr	r3, [r7, #0]
 800edb2:	441a      	add	r2, r3
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	895a      	ldrh	r2, [r3, #10]
 800edbc:	89fb      	ldrh	r3, [r7, #14]
 800edbe:	1ad3      	subs	r3, r2, r3
 800edc0:	b29a      	uxth	r2, r3
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	891a      	ldrh	r2, [r3, #8]
 800edca:	89fb      	ldrh	r3, [r7, #14]
 800edcc:	1ad3      	subs	r3, r2, r3
 800edce:	b29a      	uxth	r2, r3
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800edd4:	2300      	movs	r3, #0
}
 800edd6:	4618      	mov	r0, r3
 800edd8:	3710      	adds	r7, #16
 800edda:	46bd      	mov	sp, r7
 800eddc:	bd80      	pop	{r7, pc}
 800edde:	bf00      	nop
 800ede0:	0801e1fc 	.word	0x0801e1fc
 800ede4:	0801e360 	.word	0x0801e360
 800ede8:	0801e25c 	.word	0x0801e25c
 800edec:	0801e36c 	.word	0x0801e36c

0800edf0 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800edf0:	b580      	push	{r7, lr}
 800edf2:	b082      	sub	sp, #8
 800edf4:	af00      	add	r7, sp, #0
 800edf6:	6078      	str	r0, [r7, #4]
 800edf8:	460b      	mov	r3, r1
 800edfa:	807b      	strh	r3, [r7, #2]
 800edfc:	4613      	mov	r3, r2
 800edfe:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800ee00:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	da08      	bge.n	800ee1a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800ee08:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ee0c:	425b      	negs	r3, r3
 800ee0e:	4619      	mov	r1, r3
 800ee10:	6878      	ldr	r0, [r7, #4]
 800ee12:	f7ff ff9b 	bl	800ed4c <pbuf_remove_header>
 800ee16:	4603      	mov	r3, r0
 800ee18:	e007      	b.n	800ee2a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800ee1a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ee1e:	787a      	ldrb	r2, [r7, #1]
 800ee20:	4619      	mov	r1, r3
 800ee22:	6878      	ldr	r0, [r7, #4]
 800ee24:	f7ff ff1a 	bl	800ec5c <pbuf_add_header_impl>
 800ee28:	4603      	mov	r3, r0
  }
}
 800ee2a:	4618      	mov	r0, r3
 800ee2c:	3708      	adds	r7, #8
 800ee2e:	46bd      	mov	sp, r7
 800ee30:	bd80      	pop	{r7, pc}

0800ee32 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800ee32:	b580      	push	{r7, lr}
 800ee34:	b082      	sub	sp, #8
 800ee36:	af00      	add	r7, sp, #0
 800ee38:	6078      	str	r0, [r7, #4]
 800ee3a:	460b      	mov	r3, r1
 800ee3c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800ee3e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ee42:	2201      	movs	r2, #1
 800ee44:	4619      	mov	r1, r3
 800ee46:	6878      	ldr	r0, [r7, #4]
 800ee48:	f7ff ffd2 	bl	800edf0 <pbuf_header_impl>
 800ee4c:	4603      	mov	r3, r0
}
 800ee4e:	4618      	mov	r0, r3
 800ee50:	3708      	adds	r7, #8
 800ee52:	46bd      	mov	sp, r7
 800ee54:	bd80      	pop	{r7, pc}
	...

0800ee58 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800ee58:	b580      	push	{r7, lr}
 800ee5a:	b088      	sub	sp, #32
 800ee5c:	af00      	add	r7, sp, #0
 800ee5e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	d10b      	bne.n	800ee7e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	d106      	bne.n	800ee7a <pbuf_free+0x22>
 800ee6c:	4b3b      	ldr	r3, [pc, #236]	; (800ef5c <pbuf_free+0x104>)
 800ee6e:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800ee72:	493b      	ldr	r1, [pc, #236]	; (800ef60 <pbuf_free+0x108>)
 800ee74:	483b      	ldr	r0, [pc, #236]	; (800ef64 <pbuf_free+0x10c>)
 800ee76:	f00b ffab 	bl	801add0 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800ee7a:	2300      	movs	r3, #0
 800ee7c:	e069      	b.n	800ef52 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800ee7e:	2300      	movs	r3, #0
 800ee80:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800ee82:	e062      	b.n	800ef4a <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800ee84:	f00b f9ce 	bl	801a224 <sys_arch_protect>
 800ee88:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	7b9b      	ldrb	r3, [r3, #14]
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	d106      	bne.n	800eea0 <pbuf_free+0x48>
 800ee92:	4b32      	ldr	r3, [pc, #200]	; (800ef5c <pbuf_free+0x104>)
 800ee94:	f240 22f1 	movw	r2, #753	; 0x2f1
 800ee98:	4933      	ldr	r1, [pc, #204]	; (800ef68 <pbuf_free+0x110>)
 800ee9a:	4832      	ldr	r0, [pc, #200]	; (800ef64 <pbuf_free+0x10c>)
 800ee9c:	f00b ff98 	bl	801add0 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	7b9b      	ldrb	r3, [r3, #14]
 800eea4:	3b01      	subs	r3, #1
 800eea6:	b2da      	uxtb	r2, r3
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	739a      	strb	r2, [r3, #14]
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	7b9b      	ldrb	r3, [r3, #14]
 800eeb0:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800eeb2:	69b8      	ldr	r0, [r7, #24]
 800eeb4:	f00b f9c4 	bl	801a240 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800eeb8:	7dfb      	ldrb	r3, [r7, #23]
 800eeba:	2b00      	cmp	r3, #0
 800eebc:	d143      	bne.n	800ef46 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	681b      	ldr	r3, [r3, #0]
 800eec2:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	7b1b      	ldrb	r3, [r3, #12]
 800eec8:	f003 030f 	and.w	r3, r3, #15
 800eecc:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	7b5b      	ldrb	r3, [r3, #13]
 800eed2:	f003 0302 	and.w	r3, r3, #2
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	d011      	beq.n	800eefe <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800eede:	68bb      	ldr	r3, [r7, #8]
 800eee0:	691b      	ldr	r3, [r3, #16]
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	d106      	bne.n	800eef4 <pbuf_free+0x9c>
 800eee6:	4b1d      	ldr	r3, [pc, #116]	; (800ef5c <pbuf_free+0x104>)
 800eee8:	f240 22ff 	movw	r2, #767	; 0x2ff
 800eeec:	491f      	ldr	r1, [pc, #124]	; (800ef6c <pbuf_free+0x114>)
 800eeee:	481d      	ldr	r0, [pc, #116]	; (800ef64 <pbuf_free+0x10c>)
 800eef0:	f00b ff6e 	bl	801add0 <iprintf>
        pc->custom_free_function(p);
 800eef4:	68bb      	ldr	r3, [r7, #8]
 800eef6:	691b      	ldr	r3, [r3, #16]
 800eef8:	6878      	ldr	r0, [r7, #4]
 800eefa:	4798      	blx	r3
 800eefc:	e01d      	b.n	800ef3a <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800eefe:	7bfb      	ldrb	r3, [r7, #15]
 800ef00:	2b02      	cmp	r3, #2
 800ef02:	d104      	bne.n	800ef0e <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800ef04:	6879      	ldr	r1, [r7, #4]
 800ef06:	200c      	movs	r0, #12
 800ef08:	f7ff f904 	bl	800e114 <memp_free>
 800ef0c:	e015      	b.n	800ef3a <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800ef0e:	7bfb      	ldrb	r3, [r7, #15]
 800ef10:	2b01      	cmp	r3, #1
 800ef12:	d104      	bne.n	800ef1e <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800ef14:	6879      	ldr	r1, [r7, #4]
 800ef16:	200b      	movs	r0, #11
 800ef18:	f7ff f8fc 	bl	800e114 <memp_free>
 800ef1c:	e00d      	b.n	800ef3a <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800ef1e:	7bfb      	ldrb	r3, [r7, #15]
 800ef20:	2b00      	cmp	r3, #0
 800ef22:	d103      	bne.n	800ef2c <pbuf_free+0xd4>
          mem_free(p);
 800ef24:	6878      	ldr	r0, [r7, #4]
 800ef26:	f7fe fd87 	bl	800da38 <mem_free>
 800ef2a:	e006      	b.n	800ef3a <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800ef2c:	4b0b      	ldr	r3, [pc, #44]	; (800ef5c <pbuf_free+0x104>)
 800ef2e:	f240 320f 	movw	r2, #783	; 0x30f
 800ef32:	490f      	ldr	r1, [pc, #60]	; (800ef70 <pbuf_free+0x118>)
 800ef34:	480b      	ldr	r0, [pc, #44]	; (800ef64 <pbuf_free+0x10c>)
 800ef36:	f00b ff4b 	bl	801add0 <iprintf>
        }
      }
      count++;
 800ef3a:	7ffb      	ldrb	r3, [r7, #31]
 800ef3c:	3301      	adds	r3, #1
 800ef3e:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800ef40:	693b      	ldr	r3, [r7, #16]
 800ef42:	607b      	str	r3, [r7, #4]
 800ef44:	e001      	b.n	800ef4a <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800ef46:	2300      	movs	r3, #0
 800ef48:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	2b00      	cmp	r3, #0
 800ef4e:	d199      	bne.n	800ee84 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800ef50:	7ffb      	ldrb	r3, [r7, #31]
}
 800ef52:	4618      	mov	r0, r3
 800ef54:	3720      	adds	r7, #32
 800ef56:	46bd      	mov	sp, r7
 800ef58:	bd80      	pop	{r7, pc}
 800ef5a:	bf00      	nop
 800ef5c:	0801e1fc 	.word	0x0801e1fc
 800ef60:	0801e360 	.word	0x0801e360
 800ef64:	0801e25c 	.word	0x0801e25c
 800ef68:	0801e38c 	.word	0x0801e38c
 800ef6c:	0801e3a4 	.word	0x0801e3a4
 800ef70:	0801e3c8 	.word	0x0801e3c8

0800ef74 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800ef74:	b480      	push	{r7}
 800ef76:	b085      	sub	sp, #20
 800ef78:	af00      	add	r7, sp, #0
 800ef7a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800ef7c:	2300      	movs	r3, #0
 800ef7e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800ef80:	e005      	b.n	800ef8e <pbuf_clen+0x1a>
    ++len;
 800ef82:	89fb      	ldrh	r3, [r7, #14]
 800ef84:	3301      	adds	r3, #1
 800ef86:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	681b      	ldr	r3, [r3, #0]
 800ef8c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	d1f6      	bne.n	800ef82 <pbuf_clen+0xe>
  }
  return len;
 800ef94:	89fb      	ldrh	r3, [r7, #14]
}
 800ef96:	4618      	mov	r0, r3
 800ef98:	3714      	adds	r7, #20
 800ef9a:	46bd      	mov	sp, r7
 800ef9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efa0:	4770      	bx	lr
	...

0800efa4 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800efa4:	b580      	push	{r7, lr}
 800efa6:	b084      	sub	sp, #16
 800efa8:	af00      	add	r7, sp, #0
 800efaa:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	2b00      	cmp	r3, #0
 800efb0:	d016      	beq.n	800efe0 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800efb2:	f00b f937 	bl	801a224 <sys_arch_protect>
 800efb6:	60f8      	str	r0, [r7, #12]
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	7b9b      	ldrb	r3, [r3, #14]
 800efbc:	3301      	adds	r3, #1
 800efbe:	b2da      	uxtb	r2, r3
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	739a      	strb	r2, [r3, #14]
 800efc4:	68f8      	ldr	r0, [r7, #12]
 800efc6:	f00b f93b 	bl	801a240 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	7b9b      	ldrb	r3, [r3, #14]
 800efce:	2b00      	cmp	r3, #0
 800efd0:	d106      	bne.n	800efe0 <pbuf_ref+0x3c>
 800efd2:	4b05      	ldr	r3, [pc, #20]	; (800efe8 <pbuf_ref+0x44>)
 800efd4:	f240 3242 	movw	r2, #834	; 0x342
 800efd8:	4904      	ldr	r1, [pc, #16]	; (800efec <pbuf_ref+0x48>)
 800efda:	4805      	ldr	r0, [pc, #20]	; (800eff0 <pbuf_ref+0x4c>)
 800efdc:	f00b fef8 	bl	801add0 <iprintf>
  }
}
 800efe0:	bf00      	nop
 800efe2:	3710      	adds	r7, #16
 800efe4:	46bd      	mov	sp, r7
 800efe6:	bd80      	pop	{r7, pc}
 800efe8:	0801e1fc 	.word	0x0801e1fc
 800efec:	0801e3dc 	.word	0x0801e3dc
 800eff0:	0801e25c 	.word	0x0801e25c

0800eff4 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800eff4:	b580      	push	{r7, lr}
 800eff6:	b084      	sub	sp, #16
 800eff8:	af00      	add	r7, sp, #0
 800effa:	6078      	str	r0, [r7, #4]
 800effc:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	2b00      	cmp	r3, #0
 800f002:	d002      	beq.n	800f00a <pbuf_cat+0x16>
 800f004:	683b      	ldr	r3, [r7, #0]
 800f006:	2b00      	cmp	r3, #0
 800f008:	d107      	bne.n	800f01a <pbuf_cat+0x26>
 800f00a:	4b20      	ldr	r3, [pc, #128]	; (800f08c <pbuf_cat+0x98>)
 800f00c:	f240 3259 	movw	r2, #857	; 0x359
 800f010:	491f      	ldr	r1, [pc, #124]	; (800f090 <pbuf_cat+0x9c>)
 800f012:	4820      	ldr	r0, [pc, #128]	; (800f094 <pbuf_cat+0xa0>)
 800f014:	f00b fedc 	bl	801add0 <iprintf>
 800f018:	e034      	b.n	800f084 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	60fb      	str	r3, [r7, #12]
 800f01e:	e00a      	b.n	800f036 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800f020:	68fb      	ldr	r3, [r7, #12]
 800f022:	891a      	ldrh	r2, [r3, #8]
 800f024:	683b      	ldr	r3, [r7, #0]
 800f026:	891b      	ldrh	r3, [r3, #8]
 800f028:	4413      	add	r3, r2
 800f02a:	b29a      	uxth	r2, r3
 800f02c:	68fb      	ldr	r3, [r7, #12]
 800f02e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800f030:	68fb      	ldr	r3, [r7, #12]
 800f032:	681b      	ldr	r3, [r3, #0]
 800f034:	60fb      	str	r3, [r7, #12]
 800f036:	68fb      	ldr	r3, [r7, #12]
 800f038:	681b      	ldr	r3, [r3, #0]
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	d1f0      	bne.n	800f020 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800f03e:	68fb      	ldr	r3, [r7, #12]
 800f040:	891a      	ldrh	r2, [r3, #8]
 800f042:	68fb      	ldr	r3, [r7, #12]
 800f044:	895b      	ldrh	r3, [r3, #10]
 800f046:	429a      	cmp	r2, r3
 800f048:	d006      	beq.n	800f058 <pbuf_cat+0x64>
 800f04a:	4b10      	ldr	r3, [pc, #64]	; (800f08c <pbuf_cat+0x98>)
 800f04c:	f240 3262 	movw	r2, #866	; 0x362
 800f050:	4911      	ldr	r1, [pc, #68]	; (800f098 <pbuf_cat+0xa4>)
 800f052:	4810      	ldr	r0, [pc, #64]	; (800f094 <pbuf_cat+0xa0>)
 800f054:	f00b febc 	bl	801add0 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800f058:	68fb      	ldr	r3, [r7, #12]
 800f05a:	681b      	ldr	r3, [r3, #0]
 800f05c:	2b00      	cmp	r3, #0
 800f05e:	d006      	beq.n	800f06e <pbuf_cat+0x7a>
 800f060:	4b0a      	ldr	r3, [pc, #40]	; (800f08c <pbuf_cat+0x98>)
 800f062:	f240 3263 	movw	r2, #867	; 0x363
 800f066:	490d      	ldr	r1, [pc, #52]	; (800f09c <pbuf_cat+0xa8>)
 800f068:	480a      	ldr	r0, [pc, #40]	; (800f094 <pbuf_cat+0xa0>)
 800f06a:	f00b feb1 	bl	801add0 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800f06e:	68fb      	ldr	r3, [r7, #12]
 800f070:	891a      	ldrh	r2, [r3, #8]
 800f072:	683b      	ldr	r3, [r7, #0]
 800f074:	891b      	ldrh	r3, [r3, #8]
 800f076:	4413      	add	r3, r2
 800f078:	b29a      	uxth	r2, r3
 800f07a:	68fb      	ldr	r3, [r7, #12]
 800f07c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800f07e:	68fb      	ldr	r3, [r7, #12]
 800f080:	683a      	ldr	r2, [r7, #0]
 800f082:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800f084:	3710      	adds	r7, #16
 800f086:	46bd      	mov	sp, r7
 800f088:	bd80      	pop	{r7, pc}
 800f08a:	bf00      	nop
 800f08c:	0801e1fc 	.word	0x0801e1fc
 800f090:	0801e3f0 	.word	0x0801e3f0
 800f094:	0801e25c 	.word	0x0801e25c
 800f098:	0801e428 	.word	0x0801e428
 800f09c:	0801e458 	.word	0x0801e458

0800f0a0 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800f0a0:	b580      	push	{r7, lr}
 800f0a2:	b082      	sub	sp, #8
 800f0a4:	af00      	add	r7, sp, #0
 800f0a6:	6078      	str	r0, [r7, #4]
 800f0a8:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800f0aa:	6839      	ldr	r1, [r7, #0]
 800f0ac:	6878      	ldr	r0, [r7, #4]
 800f0ae:	f7ff ffa1 	bl	800eff4 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800f0b2:	6838      	ldr	r0, [r7, #0]
 800f0b4:	f7ff ff76 	bl	800efa4 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800f0b8:	bf00      	nop
 800f0ba:	3708      	adds	r7, #8
 800f0bc:	46bd      	mov	sp, r7
 800f0be:	bd80      	pop	{r7, pc}

0800f0c0 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800f0c0:	b580      	push	{r7, lr}
 800f0c2:	b086      	sub	sp, #24
 800f0c4:	af00      	add	r7, sp, #0
 800f0c6:	6078      	str	r0, [r7, #4]
 800f0c8:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800f0ca:	2300      	movs	r3, #0
 800f0cc:	617b      	str	r3, [r7, #20]
 800f0ce:	2300      	movs	r3, #0
 800f0d0:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	d008      	beq.n	800f0ea <pbuf_copy+0x2a>
 800f0d8:	683b      	ldr	r3, [r7, #0]
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	d005      	beq.n	800f0ea <pbuf_copy+0x2a>
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	891a      	ldrh	r2, [r3, #8]
 800f0e2:	683b      	ldr	r3, [r7, #0]
 800f0e4:	891b      	ldrh	r3, [r3, #8]
 800f0e6:	429a      	cmp	r2, r3
 800f0e8:	d209      	bcs.n	800f0fe <pbuf_copy+0x3e>
 800f0ea:	4b57      	ldr	r3, [pc, #348]	; (800f248 <pbuf_copy+0x188>)
 800f0ec:	f240 32c9 	movw	r2, #969	; 0x3c9
 800f0f0:	4956      	ldr	r1, [pc, #344]	; (800f24c <pbuf_copy+0x18c>)
 800f0f2:	4857      	ldr	r0, [pc, #348]	; (800f250 <pbuf_copy+0x190>)
 800f0f4:	f00b fe6c 	bl	801add0 <iprintf>
 800f0f8:	f06f 030f 	mvn.w	r3, #15
 800f0fc:	e09f      	b.n	800f23e <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	895b      	ldrh	r3, [r3, #10]
 800f102:	461a      	mov	r2, r3
 800f104:	697b      	ldr	r3, [r7, #20]
 800f106:	1ad2      	subs	r2, r2, r3
 800f108:	683b      	ldr	r3, [r7, #0]
 800f10a:	895b      	ldrh	r3, [r3, #10]
 800f10c:	4619      	mov	r1, r3
 800f10e:	693b      	ldr	r3, [r7, #16]
 800f110:	1acb      	subs	r3, r1, r3
 800f112:	429a      	cmp	r2, r3
 800f114:	d306      	bcc.n	800f124 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800f116:	683b      	ldr	r3, [r7, #0]
 800f118:	895b      	ldrh	r3, [r3, #10]
 800f11a:	461a      	mov	r2, r3
 800f11c:	693b      	ldr	r3, [r7, #16]
 800f11e:	1ad3      	subs	r3, r2, r3
 800f120:	60fb      	str	r3, [r7, #12]
 800f122:	e005      	b.n	800f130 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	895b      	ldrh	r3, [r3, #10]
 800f128:	461a      	mov	r2, r3
 800f12a:	697b      	ldr	r3, [r7, #20]
 800f12c:	1ad3      	subs	r3, r2, r3
 800f12e:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	685a      	ldr	r2, [r3, #4]
 800f134:	697b      	ldr	r3, [r7, #20]
 800f136:	18d0      	adds	r0, r2, r3
 800f138:	683b      	ldr	r3, [r7, #0]
 800f13a:	685a      	ldr	r2, [r3, #4]
 800f13c:	693b      	ldr	r3, [r7, #16]
 800f13e:	4413      	add	r3, r2
 800f140:	68fa      	ldr	r2, [r7, #12]
 800f142:	4619      	mov	r1, r3
 800f144:	f00b f8ce 	bl	801a2e4 <memcpy>
    offset_to += len;
 800f148:	697a      	ldr	r2, [r7, #20]
 800f14a:	68fb      	ldr	r3, [r7, #12]
 800f14c:	4413      	add	r3, r2
 800f14e:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800f150:	693a      	ldr	r2, [r7, #16]
 800f152:	68fb      	ldr	r3, [r7, #12]
 800f154:	4413      	add	r3, r2
 800f156:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	895b      	ldrh	r3, [r3, #10]
 800f15c:	461a      	mov	r2, r3
 800f15e:	697b      	ldr	r3, [r7, #20]
 800f160:	4293      	cmp	r3, r2
 800f162:	d906      	bls.n	800f172 <pbuf_copy+0xb2>
 800f164:	4b38      	ldr	r3, [pc, #224]	; (800f248 <pbuf_copy+0x188>)
 800f166:	f240 32d9 	movw	r2, #985	; 0x3d9
 800f16a:	493a      	ldr	r1, [pc, #232]	; (800f254 <pbuf_copy+0x194>)
 800f16c:	4838      	ldr	r0, [pc, #224]	; (800f250 <pbuf_copy+0x190>)
 800f16e:	f00b fe2f 	bl	801add0 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800f172:	683b      	ldr	r3, [r7, #0]
 800f174:	895b      	ldrh	r3, [r3, #10]
 800f176:	461a      	mov	r2, r3
 800f178:	693b      	ldr	r3, [r7, #16]
 800f17a:	4293      	cmp	r3, r2
 800f17c:	d906      	bls.n	800f18c <pbuf_copy+0xcc>
 800f17e:	4b32      	ldr	r3, [pc, #200]	; (800f248 <pbuf_copy+0x188>)
 800f180:	f240 32da 	movw	r2, #986	; 0x3da
 800f184:	4934      	ldr	r1, [pc, #208]	; (800f258 <pbuf_copy+0x198>)
 800f186:	4832      	ldr	r0, [pc, #200]	; (800f250 <pbuf_copy+0x190>)
 800f188:	f00b fe22 	bl	801add0 <iprintf>
    if (offset_from >= p_from->len) {
 800f18c:	683b      	ldr	r3, [r7, #0]
 800f18e:	895b      	ldrh	r3, [r3, #10]
 800f190:	461a      	mov	r2, r3
 800f192:	693b      	ldr	r3, [r7, #16]
 800f194:	4293      	cmp	r3, r2
 800f196:	d304      	bcc.n	800f1a2 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800f198:	2300      	movs	r3, #0
 800f19a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800f19c:	683b      	ldr	r3, [r7, #0]
 800f19e:	681b      	ldr	r3, [r3, #0]
 800f1a0:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	895b      	ldrh	r3, [r3, #10]
 800f1a6:	461a      	mov	r2, r3
 800f1a8:	697b      	ldr	r3, [r7, #20]
 800f1aa:	4293      	cmp	r3, r2
 800f1ac:	d114      	bne.n	800f1d8 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800f1ae:	2300      	movs	r3, #0
 800f1b0:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	681b      	ldr	r3, [r3, #0]
 800f1b6:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d10c      	bne.n	800f1d8 <pbuf_copy+0x118>
 800f1be:	683b      	ldr	r3, [r7, #0]
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	d009      	beq.n	800f1d8 <pbuf_copy+0x118>
 800f1c4:	4b20      	ldr	r3, [pc, #128]	; (800f248 <pbuf_copy+0x188>)
 800f1c6:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800f1ca:	4924      	ldr	r1, [pc, #144]	; (800f25c <pbuf_copy+0x19c>)
 800f1cc:	4820      	ldr	r0, [pc, #128]	; (800f250 <pbuf_copy+0x190>)
 800f1ce:	f00b fdff 	bl	801add0 <iprintf>
 800f1d2:	f06f 030f 	mvn.w	r3, #15
 800f1d6:	e032      	b.n	800f23e <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800f1d8:	683b      	ldr	r3, [r7, #0]
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	d013      	beq.n	800f206 <pbuf_copy+0x146>
 800f1de:	683b      	ldr	r3, [r7, #0]
 800f1e0:	895a      	ldrh	r2, [r3, #10]
 800f1e2:	683b      	ldr	r3, [r7, #0]
 800f1e4:	891b      	ldrh	r3, [r3, #8]
 800f1e6:	429a      	cmp	r2, r3
 800f1e8:	d10d      	bne.n	800f206 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800f1ea:	683b      	ldr	r3, [r7, #0]
 800f1ec:	681b      	ldr	r3, [r3, #0]
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d009      	beq.n	800f206 <pbuf_copy+0x146>
 800f1f2:	4b15      	ldr	r3, [pc, #84]	; (800f248 <pbuf_copy+0x188>)
 800f1f4:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800f1f8:	4919      	ldr	r1, [pc, #100]	; (800f260 <pbuf_copy+0x1a0>)
 800f1fa:	4815      	ldr	r0, [pc, #84]	; (800f250 <pbuf_copy+0x190>)
 800f1fc:	f00b fde8 	bl	801add0 <iprintf>
 800f200:	f06f 0305 	mvn.w	r3, #5
 800f204:	e01b      	b.n	800f23e <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	2b00      	cmp	r3, #0
 800f20a:	d013      	beq.n	800f234 <pbuf_copy+0x174>
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	895a      	ldrh	r2, [r3, #10]
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	891b      	ldrh	r3, [r3, #8]
 800f214:	429a      	cmp	r2, r3
 800f216:	d10d      	bne.n	800f234 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	681b      	ldr	r3, [r3, #0]
 800f21c:	2b00      	cmp	r3, #0
 800f21e:	d009      	beq.n	800f234 <pbuf_copy+0x174>
 800f220:	4b09      	ldr	r3, [pc, #36]	; (800f248 <pbuf_copy+0x188>)
 800f222:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800f226:	490e      	ldr	r1, [pc, #56]	; (800f260 <pbuf_copy+0x1a0>)
 800f228:	4809      	ldr	r0, [pc, #36]	; (800f250 <pbuf_copy+0x190>)
 800f22a:	f00b fdd1 	bl	801add0 <iprintf>
 800f22e:	f06f 0305 	mvn.w	r3, #5
 800f232:	e004      	b.n	800f23e <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800f234:	683b      	ldr	r3, [r7, #0]
 800f236:	2b00      	cmp	r3, #0
 800f238:	f47f af61 	bne.w	800f0fe <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800f23c:	2300      	movs	r3, #0
}
 800f23e:	4618      	mov	r0, r3
 800f240:	3718      	adds	r7, #24
 800f242:	46bd      	mov	sp, r7
 800f244:	bd80      	pop	{r7, pc}
 800f246:	bf00      	nop
 800f248:	0801e1fc 	.word	0x0801e1fc
 800f24c:	0801e4a4 	.word	0x0801e4a4
 800f250:	0801e25c 	.word	0x0801e25c
 800f254:	0801e4d4 	.word	0x0801e4d4
 800f258:	0801e4ec 	.word	0x0801e4ec
 800f25c:	0801e508 	.word	0x0801e508
 800f260:	0801e518 	.word	0x0801e518

0800f264 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800f264:	b580      	push	{r7, lr}
 800f266:	b088      	sub	sp, #32
 800f268:	af00      	add	r7, sp, #0
 800f26a:	60f8      	str	r0, [r7, #12]
 800f26c:	60b9      	str	r1, [r7, #8]
 800f26e:	4611      	mov	r1, r2
 800f270:	461a      	mov	r2, r3
 800f272:	460b      	mov	r3, r1
 800f274:	80fb      	strh	r3, [r7, #6]
 800f276:	4613      	mov	r3, r2
 800f278:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800f27a:	2300      	movs	r3, #0
 800f27c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800f27e:	2300      	movs	r3, #0
 800f280:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800f282:	68fb      	ldr	r3, [r7, #12]
 800f284:	2b00      	cmp	r3, #0
 800f286:	d108      	bne.n	800f29a <pbuf_copy_partial+0x36>
 800f288:	4b2b      	ldr	r3, [pc, #172]	; (800f338 <pbuf_copy_partial+0xd4>)
 800f28a:	f240 420a 	movw	r2, #1034	; 0x40a
 800f28e:	492b      	ldr	r1, [pc, #172]	; (800f33c <pbuf_copy_partial+0xd8>)
 800f290:	482b      	ldr	r0, [pc, #172]	; (800f340 <pbuf_copy_partial+0xdc>)
 800f292:	f00b fd9d 	bl	801add0 <iprintf>
 800f296:	2300      	movs	r3, #0
 800f298:	e04a      	b.n	800f330 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800f29a:	68bb      	ldr	r3, [r7, #8]
 800f29c:	2b00      	cmp	r3, #0
 800f29e:	d108      	bne.n	800f2b2 <pbuf_copy_partial+0x4e>
 800f2a0:	4b25      	ldr	r3, [pc, #148]	; (800f338 <pbuf_copy_partial+0xd4>)
 800f2a2:	f240 420b 	movw	r2, #1035	; 0x40b
 800f2a6:	4927      	ldr	r1, [pc, #156]	; (800f344 <pbuf_copy_partial+0xe0>)
 800f2a8:	4825      	ldr	r0, [pc, #148]	; (800f340 <pbuf_copy_partial+0xdc>)
 800f2aa:	f00b fd91 	bl	801add0 <iprintf>
 800f2ae:	2300      	movs	r3, #0
 800f2b0:	e03e      	b.n	800f330 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800f2b2:	68fb      	ldr	r3, [r7, #12]
 800f2b4:	61fb      	str	r3, [r7, #28]
 800f2b6:	e034      	b.n	800f322 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800f2b8:	88bb      	ldrh	r3, [r7, #4]
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	d00a      	beq.n	800f2d4 <pbuf_copy_partial+0x70>
 800f2be:	69fb      	ldr	r3, [r7, #28]
 800f2c0:	895b      	ldrh	r3, [r3, #10]
 800f2c2:	88ba      	ldrh	r2, [r7, #4]
 800f2c4:	429a      	cmp	r2, r3
 800f2c6:	d305      	bcc.n	800f2d4 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800f2c8:	69fb      	ldr	r3, [r7, #28]
 800f2ca:	895b      	ldrh	r3, [r3, #10]
 800f2cc:	88ba      	ldrh	r2, [r7, #4]
 800f2ce:	1ad3      	subs	r3, r2, r3
 800f2d0:	80bb      	strh	r3, [r7, #4]
 800f2d2:	e023      	b.n	800f31c <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800f2d4:	69fb      	ldr	r3, [r7, #28]
 800f2d6:	895a      	ldrh	r2, [r3, #10]
 800f2d8:	88bb      	ldrh	r3, [r7, #4]
 800f2da:	1ad3      	subs	r3, r2, r3
 800f2dc:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800f2de:	8b3a      	ldrh	r2, [r7, #24]
 800f2e0:	88fb      	ldrh	r3, [r7, #6]
 800f2e2:	429a      	cmp	r2, r3
 800f2e4:	d901      	bls.n	800f2ea <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800f2e6:	88fb      	ldrh	r3, [r7, #6]
 800f2e8:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800f2ea:	8b7b      	ldrh	r3, [r7, #26]
 800f2ec:	68ba      	ldr	r2, [r7, #8]
 800f2ee:	18d0      	adds	r0, r2, r3
 800f2f0:	69fb      	ldr	r3, [r7, #28]
 800f2f2:	685a      	ldr	r2, [r3, #4]
 800f2f4:	88bb      	ldrh	r3, [r7, #4]
 800f2f6:	4413      	add	r3, r2
 800f2f8:	8b3a      	ldrh	r2, [r7, #24]
 800f2fa:	4619      	mov	r1, r3
 800f2fc:	f00a fff2 	bl	801a2e4 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800f300:	8afa      	ldrh	r2, [r7, #22]
 800f302:	8b3b      	ldrh	r3, [r7, #24]
 800f304:	4413      	add	r3, r2
 800f306:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800f308:	8b7a      	ldrh	r2, [r7, #26]
 800f30a:	8b3b      	ldrh	r3, [r7, #24]
 800f30c:	4413      	add	r3, r2
 800f30e:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800f310:	88fa      	ldrh	r2, [r7, #6]
 800f312:	8b3b      	ldrh	r3, [r7, #24]
 800f314:	1ad3      	subs	r3, r2, r3
 800f316:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800f318:	2300      	movs	r3, #0
 800f31a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800f31c:	69fb      	ldr	r3, [r7, #28]
 800f31e:	681b      	ldr	r3, [r3, #0]
 800f320:	61fb      	str	r3, [r7, #28]
 800f322:	88fb      	ldrh	r3, [r7, #6]
 800f324:	2b00      	cmp	r3, #0
 800f326:	d002      	beq.n	800f32e <pbuf_copy_partial+0xca>
 800f328:	69fb      	ldr	r3, [r7, #28]
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	d1c4      	bne.n	800f2b8 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800f32e:	8afb      	ldrh	r3, [r7, #22]
}
 800f330:	4618      	mov	r0, r3
 800f332:	3720      	adds	r7, #32
 800f334:	46bd      	mov	sp, r7
 800f336:	bd80      	pop	{r7, pc}
 800f338:	0801e1fc 	.word	0x0801e1fc
 800f33c:	0801e544 	.word	0x0801e544
 800f340:	0801e25c 	.word	0x0801e25c
 800f344:	0801e564 	.word	0x0801e564

0800f348 <pbuf_skip_const>:
#endif /* LWIP_TCP && TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

/* Actual implementation of pbuf_skip() but returning const pointer... */
static const struct pbuf *
pbuf_skip_const(const struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 800f348:	b480      	push	{r7}
 800f34a:	b087      	sub	sp, #28
 800f34c:	af00      	add	r7, sp, #0
 800f34e:	60f8      	str	r0, [r7, #12]
 800f350:	460b      	mov	r3, r1
 800f352:	607a      	str	r2, [r7, #4]
 800f354:	817b      	strh	r3, [r7, #10]
  u16_t offset_left = in_offset;
 800f356:	897b      	ldrh	r3, [r7, #10]
 800f358:	82fb      	strh	r3, [r7, #22]
  const struct pbuf *q = in;
 800f35a:	68fb      	ldr	r3, [r7, #12]
 800f35c:	613b      	str	r3, [r7, #16]

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
 800f35e:	e007      	b.n	800f370 <pbuf_skip_const+0x28>
    offset_left = (u16_t)(offset_left - q->len);
 800f360:	693b      	ldr	r3, [r7, #16]
 800f362:	895b      	ldrh	r3, [r3, #10]
 800f364:	8afa      	ldrh	r2, [r7, #22]
 800f366:	1ad3      	subs	r3, r2, r3
 800f368:	82fb      	strh	r3, [r7, #22]
    q = q->next;
 800f36a:	693b      	ldr	r3, [r7, #16]
 800f36c:	681b      	ldr	r3, [r3, #0]
 800f36e:	613b      	str	r3, [r7, #16]
  while ((q != NULL) && (q->len <= offset_left)) {
 800f370:	693b      	ldr	r3, [r7, #16]
 800f372:	2b00      	cmp	r3, #0
 800f374:	d004      	beq.n	800f380 <pbuf_skip_const+0x38>
 800f376:	693b      	ldr	r3, [r7, #16]
 800f378:	895b      	ldrh	r3, [r3, #10]
 800f37a:	8afa      	ldrh	r2, [r7, #22]
 800f37c:	429a      	cmp	r2, r3
 800f37e:	d2ef      	bcs.n	800f360 <pbuf_skip_const+0x18>
  }
  if (out_offset != NULL) {
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	2b00      	cmp	r3, #0
 800f384:	d002      	beq.n	800f38c <pbuf_skip_const+0x44>
    *out_offset = offset_left;
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	8afa      	ldrh	r2, [r7, #22]
 800f38a:	801a      	strh	r2, [r3, #0]
  }
  return q;
 800f38c:	693b      	ldr	r3, [r7, #16]
}
 800f38e:	4618      	mov	r0, r3
 800f390:	371c      	adds	r7, #28
 800f392:	46bd      	mov	sp, r7
 800f394:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f398:	4770      	bx	lr

0800f39a <pbuf_skip>:
 * @param out_offset resulting offset in the returned pbuf
 * @return the pbuf in the queue where the offset is
 */
struct pbuf *
pbuf_skip(struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 800f39a:	b580      	push	{r7, lr}
 800f39c:	b086      	sub	sp, #24
 800f39e:	af00      	add	r7, sp, #0
 800f3a0:	60f8      	str	r0, [r7, #12]
 800f3a2:	460b      	mov	r3, r1
 800f3a4:	607a      	str	r2, [r7, #4]
 800f3a6:	817b      	strh	r3, [r7, #10]
  const struct pbuf *out = pbuf_skip_const(in, in_offset, out_offset);
 800f3a8:	897b      	ldrh	r3, [r7, #10]
 800f3aa:	687a      	ldr	r2, [r7, #4]
 800f3ac:	4619      	mov	r1, r3
 800f3ae:	68f8      	ldr	r0, [r7, #12]
 800f3b0:	f7ff ffca 	bl	800f348 <pbuf_skip_const>
 800f3b4:	6178      	str	r0, [r7, #20]
  return LWIP_CONST_CAST(struct pbuf *, out);
 800f3b6:	697b      	ldr	r3, [r7, #20]
}
 800f3b8:	4618      	mov	r0, r3
 800f3ba:	3718      	adds	r7, #24
 800f3bc:	46bd      	mov	sp, r7
 800f3be:	bd80      	pop	{r7, pc}

0800f3c0 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 800f3c0:	b580      	push	{r7, lr}
 800f3c2:	b088      	sub	sp, #32
 800f3c4:	af00      	add	r7, sp, #0
 800f3c6:	60f8      	str	r0, [r7, #12]
 800f3c8:	60b9      	str	r1, [r7, #8]
 800f3ca:	4613      	mov	r3, r2
 800f3cc:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 800f3ce:	88fb      	ldrh	r3, [r7, #6]
 800f3d0:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 800f3d2:	2300      	movs	r3, #0
 800f3d4:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 800f3d6:	68fb      	ldr	r3, [r7, #12]
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	d109      	bne.n	800f3f0 <pbuf_take+0x30>
 800f3dc:	4b3a      	ldr	r3, [pc, #232]	; (800f4c8 <pbuf_take+0x108>)
 800f3de:	f240 42b3 	movw	r2, #1203	; 0x4b3
 800f3e2:	493a      	ldr	r1, [pc, #232]	; (800f4cc <pbuf_take+0x10c>)
 800f3e4:	483a      	ldr	r0, [pc, #232]	; (800f4d0 <pbuf_take+0x110>)
 800f3e6:	f00b fcf3 	bl	801add0 <iprintf>
 800f3ea:	f06f 030f 	mvn.w	r3, #15
 800f3ee:	e067      	b.n	800f4c0 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800f3f0:	68bb      	ldr	r3, [r7, #8]
 800f3f2:	2b00      	cmp	r3, #0
 800f3f4:	d109      	bne.n	800f40a <pbuf_take+0x4a>
 800f3f6:	4b34      	ldr	r3, [pc, #208]	; (800f4c8 <pbuf_take+0x108>)
 800f3f8:	f240 42b4 	movw	r2, #1204	; 0x4b4
 800f3fc:	4935      	ldr	r1, [pc, #212]	; (800f4d4 <pbuf_take+0x114>)
 800f3fe:	4834      	ldr	r0, [pc, #208]	; (800f4d0 <pbuf_take+0x110>)
 800f400:	f00b fce6 	bl	801add0 <iprintf>
 800f404:	f06f 030f 	mvn.w	r3, #15
 800f408:	e05a      	b.n	800f4c0 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 800f40a:	68fb      	ldr	r3, [r7, #12]
 800f40c:	891b      	ldrh	r3, [r3, #8]
 800f40e:	88fa      	ldrh	r2, [r7, #6]
 800f410:	429a      	cmp	r2, r3
 800f412:	d909      	bls.n	800f428 <pbuf_take+0x68>
 800f414:	4b2c      	ldr	r3, [pc, #176]	; (800f4c8 <pbuf_take+0x108>)
 800f416:	f240 42b5 	movw	r2, #1205	; 0x4b5
 800f41a:	492f      	ldr	r1, [pc, #188]	; (800f4d8 <pbuf_take+0x118>)
 800f41c:	482c      	ldr	r0, [pc, #176]	; (800f4d0 <pbuf_take+0x110>)
 800f41e:	f00b fcd7 	bl	801add0 <iprintf>
 800f422:	f04f 33ff 	mov.w	r3, #4294967295
 800f426:	e04b      	b.n	800f4c0 <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 800f428:	68fb      	ldr	r3, [r7, #12]
 800f42a:	2b00      	cmp	r3, #0
 800f42c:	d007      	beq.n	800f43e <pbuf_take+0x7e>
 800f42e:	68bb      	ldr	r3, [r7, #8]
 800f430:	2b00      	cmp	r3, #0
 800f432:	d004      	beq.n	800f43e <pbuf_take+0x7e>
 800f434:	68fb      	ldr	r3, [r7, #12]
 800f436:	891b      	ldrh	r3, [r3, #8]
 800f438:	88fa      	ldrh	r2, [r7, #6]
 800f43a:	429a      	cmp	r2, r3
 800f43c:	d902      	bls.n	800f444 <pbuf_take+0x84>
    return ERR_ARG;
 800f43e:	f06f 030f 	mvn.w	r3, #15
 800f442:	e03d      	b.n	800f4c0 <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 800f444:	68fb      	ldr	r3, [r7, #12]
 800f446:	61fb      	str	r3, [r7, #28]
 800f448:	e028      	b.n	800f49c <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 800f44a:	69fb      	ldr	r3, [r7, #28]
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	d106      	bne.n	800f45e <pbuf_take+0x9e>
 800f450:	4b1d      	ldr	r3, [pc, #116]	; (800f4c8 <pbuf_take+0x108>)
 800f452:	f240 42bd 	movw	r2, #1213	; 0x4bd
 800f456:	4921      	ldr	r1, [pc, #132]	; (800f4dc <pbuf_take+0x11c>)
 800f458:	481d      	ldr	r0, [pc, #116]	; (800f4d0 <pbuf_take+0x110>)
 800f45a:	f00b fcb9 	bl	801add0 <iprintf>
    buf_copy_len = total_copy_len;
 800f45e:	697b      	ldr	r3, [r7, #20]
 800f460:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 800f462:	69fb      	ldr	r3, [r7, #28]
 800f464:	895b      	ldrh	r3, [r3, #10]
 800f466:	461a      	mov	r2, r3
 800f468:	69bb      	ldr	r3, [r7, #24]
 800f46a:	4293      	cmp	r3, r2
 800f46c:	d902      	bls.n	800f474 <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 800f46e:	69fb      	ldr	r3, [r7, #28]
 800f470:	895b      	ldrh	r3, [r3, #10]
 800f472:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 800f474:	69fb      	ldr	r3, [r7, #28]
 800f476:	6858      	ldr	r0, [r3, #4]
 800f478:	68ba      	ldr	r2, [r7, #8]
 800f47a:	693b      	ldr	r3, [r7, #16]
 800f47c:	4413      	add	r3, r2
 800f47e:	69ba      	ldr	r2, [r7, #24]
 800f480:	4619      	mov	r1, r3
 800f482:	f00a ff2f 	bl	801a2e4 <memcpy>
    total_copy_len -= buf_copy_len;
 800f486:	697a      	ldr	r2, [r7, #20]
 800f488:	69bb      	ldr	r3, [r7, #24]
 800f48a:	1ad3      	subs	r3, r2, r3
 800f48c:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 800f48e:	693a      	ldr	r2, [r7, #16]
 800f490:	69bb      	ldr	r3, [r7, #24]
 800f492:	4413      	add	r3, r2
 800f494:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 800f496:	69fb      	ldr	r3, [r7, #28]
 800f498:	681b      	ldr	r3, [r3, #0]
 800f49a:	61fb      	str	r3, [r7, #28]
 800f49c:	697b      	ldr	r3, [r7, #20]
 800f49e:	2b00      	cmp	r3, #0
 800f4a0:	d1d3      	bne.n	800f44a <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 800f4a2:	697b      	ldr	r3, [r7, #20]
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	d103      	bne.n	800f4b0 <pbuf_take+0xf0>
 800f4a8:	88fb      	ldrh	r3, [r7, #6]
 800f4aa:	693a      	ldr	r2, [r7, #16]
 800f4ac:	429a      	cmp	r2, r3
 800f4ae:	d006      	beq.n	800f4be <pbuf_take+0xfe>
 800f4b0:	4b05      	ldr	r3, [pc, #20]	; (800f4c8 <pbuf_take+0x108>)
 800f4b2:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 800f4b6:	490a      	ldr	r1, [pc, #40]	; (800f4e0 <pbuf_take+0x120>)
 800f4b8:	4805      	ldr	r0, [pc, #20]	; (800f4d0 <pbuf_take+0x110>)
 800f4ba:	f00b fc89 	bl	801add0 <iprintf>
  return ERR_OK;
 800f4be:	2300      	movs	r3, #0
}
 800f4c0:	4618      	mov	r0, r3
 800f4c2:	3720      	adds	r7, #32
 800f4c4:	46bd      	mov	sp, r7
 800f4c6:	bd80      	pop	{r7, pc}
 800f4c8:	0801e1fc 	.word	0x0801e1fc
 800f4cc:	0801e5d4 	.word	0x0801e5d4
 800f4d0:	0801e25c 	.word	0x0801e25c
 800f4d4:	0801e5ec 	.word	0x0801e5ec
 800f4d8:	0801e608 	.word	0x0801e608
 800f4dc:	0801e628 	.word	0x0801e628
 800f4e0:	0801e640 	.word	0x0801e640

0800f4e4 <pbuf_take_at>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take_at(struct pbuf *buf, const void *dataptr, u16_t len, u16_t offset)
{
 800f4e4:	b580      	push	{r7, lr}
 800f4e6:	b088      	sub	sp, #32
 800f4e8:	af00      	add	r7, sp, #0
 800f4ea:	60f8      	str	r0, [r7, #12]
 800f4ec:	60b9      	str	r1, [r7, #8]
 800f4ee:	4611      	mov	r1, r2
 800f4f0:	461a      	mov	r2, r3
 800f4f2:	460b      	mov	r3, r1
 800f4f4:	80fb      	strh	r3, [r7, #6]
 800f4f6:	4613      	mov	r3, r2
 800f4f8:	80bb      	strh	r3, [r7, #4]
  u16_t target_offset;
  struct pbuf *q = pbuf_skip(buf, offset, &target_offset);
 800f4fa:	f107 0210 	add.w	r2, r7, #16
 800f4fe:	88bb      	ldrh	r3, [r7, #4]
 800f500:	4619      	mov	r1, r3
 800f502:	68f8      	ldr	r0, [r7, #12]
 800f504:	f7ff ff49 	bl	800f39a <pbuf_skip>
 800f508:	61f8      	str	r0, [r7, #28]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->tot_len >= target_offset + len)) {
 800f50a:	69fb      	ldr	r3, [r7, #28]
 800f50c:	2b00      	cmp	r3, #0
 800f50e:	d047      	beq.n	800f5a0 <pbuf_take_at+0xbc>
 800f510:	69fb      	ldr	r3, [r7, #28]
 800f512:	891b      	ldrh	r3, [r3, #8]
 800f514:	461a      	mov	r2, r3
 800f516:	8a3b      	ldrh	r3, [r7, #16]
 800f518:	4619      	mov	r1, r3
 800f51a:	88fb      	ldrh	r3, [r7, #6]
 800f51c:	440b      	add	r3, r1
 800f51e:	429a      	cmp	r2, r3
 800f520:	db3e      	blt.n	800f5a0 <pbuf_take_at+0xbc>
    u16_t remaining_len = len;
 800f522:	88fb      	ldrh	r3, [r7, #6]
 800f524:	837b      	strh	r3, [r7, #26]
    const u8_t *src_ptr = (const u8_t *)dataptr;
 800f526:	68bb      	ldr	r3, [r7, #8]
 800f528:	617b      	str	r3, [r7, #20]
    /* copy the part that goes into the first pbuf */
    u16_t first_copy_len;
    LWIP_ASSERT("check pbuf_skip result", target_offset < q->len);
 800f52a:	69fb      	ldr	r3, [r7, #28]
 800f52c:	895a      	ldrh	r2, [r3, #10]
 800f52e:	8a3b      	ldrh	r3, [r7, #16]
 800f530:	429a      	cmp	r2, r3
 800f532:	d806      	bhi.n	800f542 <pbuf_take_at+0x5e>
 800f534:	4b1d      	ldr	r3, [pc, #116]	; (800f5ac <pbuf_take_at+0xc8>)
 800f536:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800f53a:	491d      	ldr	r1, [pc, #116]	; (800f5b0 <pbuf_take_at+0xcc>)
 800f53c:	481d      	ldr	r0, [pc, #116]	; (800f5b4 <pbuf_take_at+0xd0>)
 800f53e:	f00b fc47 	bl	801add0 <iprintf>
    first_copy_len = (u16_t)LWIP_MIN(q->len - target_offset, len);
 800f542:	69fb      	ldr	r3, [r7, #28]
 800f544:	895b      	ldrh	r3, [r3, #10]
 800f546:	461a      	mov	r2, r3
 800f548:	8a3b      	ldrh	r3, [r7, #16]
 800f54a:	1ad2      	subs	r2, r2, r3
 800f54c:	88fb      	ldrh	r3, [r7, #6]
 800f54e:	429a      	cmp	r2, r3
 800f550:	da05      	bge.n	800f55e <pbuf_take_at+0x7a>
 800f552:	69fb      	ldr	r3, [r7, #28]
 800f554:	895a      	ldrh	r2, [r3, #10]
 800f556:	8a3b      	ldrh	r3, [r7, #16]
 800f558:	1ad3      	subs	r3, r2, r3
 800f55a:	b29b      	uxth	r3, r3
 800f55c:	e000      	b.n	800f560 <pbuf_take_at+0x7c>
 800f55e:	88fb      	ldrh	r3, [r7, #6]
 800f560:	827b      	strh	r3, [r7, #18]
    MEMCPY(((u8_t *)q->payload) + target_offset, dataptr, first_copy_len);
 800f562:	69fb      	ldr	r3, [r7, #28]
 800f564:	685b      	ldr	r3, [r3, #4]
 800f566:	8a3a      	ldrh	r2, [r7, #16]
 800f568:	4413      	add	r3, r2
 800f56a:	8a7a      	ldrh	r2, [r7, #18]
 800f56c:	68b9      	ldr	r1, [r7, #8]
 800f56e:	4618      	mov	r0, r3
 800f570:	f00a feb8 	bl	801a2e4 <memcpy>
    remaining_len = (u16_t)(remaining_len - first_copy_len);
 800f574:	8b7a      	ldrh	r2, [r7, #26]
 800f576:	8a7b      	ldrh	r3, [r7, #18]
 800f578:	1ad3      	subs	r3, r2, r3
 800f57a:	837b      	strh	r3, [r7, #26]
    src_ptr += first_copy_len;
 800f57c:	8a7b      	ldrh	r3, [r7, #18]
 800f57e:	697a      	ldr	r2, [r7, #20]
 800f580:	4413      	add	r3, r2
 800f582:	617b      	str	r3, [r7, #20]
    if (remaining_len > 0) {
 800f584:	8b7b      	ldrh	r3, [r7, #26]
 800f586:	2b00      	cmp	r3, #0
 800f588:	d008      	beq.n	800f59c <pbuf_take_at+0xb8>
      return pbuf_take(q->next, src_ptr, remaining_len);
 800f58a:	69fb      	ldr	r3, [r7, #28]
 800f58c:	681b      	ldr	r3, [r3, #0]
 800f58e:	8b7a      	ldrh	r2, [r7, #26]
 800f590:	6979      	ldr	r1, [r7, #20]
 800f592:	4618      	mov	r0, r3
 800f594:	f7ff ff14 	bl	800f3c0 <pbuf_take>
 800f598:	4603      	mov	r3, r0
 800f59a:	e003      	b.n	800f5a4 <pbuf_take_at+0xc0>
    }
    return ERR_OK;
 800f59c:	2300      	movs	r3, #0
 800f59e:	e001      	b.n	800f5a4 <pbuf_take_at+0xc0>
  }
  return ERR_MEM;
 800f5a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 800f5a4:	4618      	mov	r0, r3
 800f5a6:	3720      	adds	r7, #32
 800f5a8:	46bd      	mov	sp, r7
 800f5aa:	bd80      	pop	{r7, pc}
 800f5ac:	0801e1fc 	.word	0x0801e1fc
 800f5b0:	0801e658 	.word	0x0801e658
 800f5b4:	0801e25c 	.word	0x0801e25c

0800f5b8 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800f5b8:	b580      	push	{r7, lr}
 800f5ba:	b084      	sub	sp, #16
 800f5bc:	af00      	add	r7, sp, #0
 800f5be:	4603      	mov	r3, r0
 800f5c0:	603a      	str	r2, [r7, #0]
 800f5c2:	71fb      	strb	r3, [r7, #7]
 800f5c4:	460b      	mov	r3, r1
 800f5c6:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800f5c8:	683b      	ldr	r3, [r7, #0]
 800f5ca:	8919      	ldrh	r1, [r3, #8]
 800f5cc:	88ba      	ldrh	r2, [r7, #4]
 800f5ce:	79fb      	ldrb	r3, [r7, #7]
 800f5d0:	4618      	mov	r0, r3
 800f5d2:	f7ff f959 	bl	800e888 <pbuf_alloc>
 800f5d6:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800f5d8:	68fb      	ldr	r3, [r7, #12]
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	d101      	bne.n	800f5e2 <pbuf_clone+0x2a>
    return NULL;
 800f5de:	2300      	movs	r3, #0
 800f5e0:	e011      	b.n	800f606 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800f5e2:	6839      	ldr	r1, [r7, #0]
 800f5e4:	68f8      	ldr	r0, [r7, #12]
 800f5e6:	f7ff fd6b 	bl	800f0c0 <pbuf_copy>
 800f5ea:	4603      	mov	r3, r0
 800f5ec:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800f5ee:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800f5f2:	2b00      	cmp	r3, #0
 800f5f4:	d006      	beq.n	800f604 <pbuf_clone+0x4c>
 800f5f6:	4b06      	ldr	r3, [pc, #24]	; (800f610 <pbuf_clone+0x58>)
 800f5f8:	f240 5224 	movw	r2, #1316	; 0x524
 800f5fc:	4905      	ldr	r1, [pc, #20]	; (800f614 <pbuf_clone+0x5c>)
 800f5fe:	4806      	ldr	r0, [pc, #24]	; (800f618 <pbuf_clone+0x60>)
 800f600:	f00b fbe6 	bl	801add0 <iprintf>
  return q;
 800f604:	68fb      	ldr	r3, [r7, #12]
}
 800f606:	4618      	mov	r0, r3
 800f608:	3710      	adds	r7, #16
 800f60a:	46bd      	mov	sp, r7
 800f60c:	bd80      	pop	{r7, pc}
 800f60e:	bf00      	nop
 800f610:	0801e1fc 	.word	0x0801e1fc
 800f614:	0801e670 	.word	0x0801e670
 800f618:	0801e25c 	.word	0x0801e25c

0800f61c <pbuf_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p OR ZERO IF 'offset' >= p->tot_len
 */
u8_t
pbuf_get_at(const struct pbuf *p, u16_t offset)
{
 800f61c:	b580      	push	{r7, lr}
 800f61e:	b084      	sub	sp, #16
 800f620:	af00      	add	r7, sp, #0
 800f622:	6078      	str	r0, [r7, #4]
 800f624:	460b      	mov	r3, r1
 800f626:	807b      	strh	r3, [r7, #2]
  int ret = pbuf_try_get_at(p, offset);
 800f628:	887b      	ldrh	r3, [r7, #2]
 800f62a:	4619      	mov	r1, r3
 800f62c:	6878      	ldr	r0, [r7, #4]
 800f62e:	f000 f80c 	bl	800f64a <pbuf_try_get_at>
 800f632:	60f8      	str	r0, [r7, #12]
  if (ret >= 0) {
 800f634:	68fb      	ldr	r3, [r7, #12]
 800f636:	2b00      	cmp	r3, #0
 800f638:	db02      	blt.n	800f640 <pbuf_get_at+0x24>
    return (u8_t)ret;
 800f63a:	68fb      	ldr	r3, [r7, #12]
 800f63c:	b2db      	uxtb	r3, r3
 800f63e:	e000      	b.n	800f642 <pbuf_get_at+0x26>
  }
  return 0;
 800f640:	2300      	movs	r3, #0
}
 800f642:	4618      	mov	r0, r3
 800f644:	3710      	adds	r7, #16
 800f646:	46bd      	mov	sp, r7
 800f648:	bd80      	pop	{r7, pc}

0800f64a <pbuf_try_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p [0..0xFF] OR negative if 'offset' >= p->tot_len
 */
int
pbuf_try_get_at(const struct pbuf *p, u16_t offset)
{
 800f64a:	b580      	push	{r7, lr}
 800f64c:	b084      	sub	sp, #16
 800f64e:	af00      	add	r7, sp, #0
 800f650:	6078      	str	r0, [r7, #4]
 800f652:	460b      	mov	r3, r1
 800f654:	807b      	strh	r3, [r7, #2]
  u16_t q_idx;
  const struct pbuf *q = pbuf_skip_const(p, offset, &q_idx);
 800f656:	f107 020a 	add.w	r2, r7, #10
 800f65a:	887b      	ldrh	r3, [r7, #2]
 800f65c:	4619      	mov	r1, r3
 800f65e:	6878      	ldr	r0, [r7, #4]
 800f660:	f7ff fe72 	bl	800f348 <pbuf_skip_const>
 800f664:	60f8      	str	r0, [r7, #12]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 800f666:	68fb      	ldr	r3, [r7, #12]
 800f668:	2b00      	cmp	r3, #0
 800f66a:	d00a      	beq.n	800f682 <pbuf_try_get_at+0x38>
 800f66c:	68fb      	ldr	r3, [r7, #12]
 800f66e:	895a      	ldrh	r2, [r3, #10]
 800f670:	897b      	ldrh	r3, [r7, #10]
 800f672:	429a      	cmp	r2, r3
 800f674:	d905      	bls.n	800f682 <pbuf_try_get_at+0x38>
    return ((u8_t *)q->payload)[q_idx];
 800f676:	68fb      	ldr	r3, [r7, #12]
 800f678:	685b      	ldr	r3, [r3, #4]
 800f67a:	897a      	ldrh	r2, [r7, #10]
 800f67c:	4413      	add	r3, r2
 800f67e:	781b      	ldrb	r3, [r3, #0]
 800f680:	e001      	b.n	800f686 <pbuf_try_get_at+0x3c>
  }
  return -1;
 800f682:	f04f 33ff 	mov.w	r3, #4294967295
}
 800f686:	4618      	mov	r0, r3
 800f688:	3710      	adds	r7, #16
 800f68a:	46bd      	mov	sp, r7
 800f68c:	bd80      	pop	{r7, pc}

0800f68e <pbuf_put_at>:
 * @param offset offset into p of the byte to write
 * @param data byte to write at an offset into p
 */
void
pbuf_put_at(struct pbuf *p, u16_t offset, u8_t data)
{
 800f68e:	b580      	push	{r7, lr}
 800f690:	b084      	sub	sp, #16
 800f692:	af00      	add	r7, sp, #0
 800f694:	6078      	str	r0, [r7, #4]
 800f696:	460b      	mov	r3, r1
 800f698:	807b      	strh	r3, [r7, #2]
 800f69a:	4613      	mov	r3, r2
 800f69c:	707b      	strb	r3, [r7, #1]
  u16_t q_idx;
  struct pbuf *q = pbuf_skip(p, offset, &q_idx);
 800f69e:	f107 020a 	add.w	r2, r7, #10
 800f6a2:	887b      	ldrh	r3, [r7, #2]
 800f6a4:	4619      	mov	r1, r3
 800f6a6:	6878      	ldr	r0, [r7, #4]
 800f6a8:	f7ff fe77 	bl	800f39a <pbuf_skip>
 800f6ac:	60f8      	str	r0, [r7, #12]

  /* write requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 800f6ae:	68fb      	ldr	r3, [r7, #12]
 800f6b0:	2b00      	cmp	r3, #0
 800f6b2:	d00a      	beq.n	800f6ca <pbuf_put_at+0x3c>
 800f6b4:	68fb      	ldr	r3, [r7, #12]
 800f6b6:	895a      	ldrh	r2, [r3, #10]
 800f6b8:	897b      	ldrh	r3, [r7, #10]
 800f6ba:	429a      	cmp	r2, r3
 800f6bc:	d905      	bls.n	800f6ca <pbuf_put_at+0x3c>
    ((u8_t *)q->payload)[q_idx] = data;
 800f6be:	68fb      	ldr	r3, [r7, #12]
 800f6c0:	685b      	ldr	r3, [r3, #4]
 800f6c2:	897a      	ldrh	r2, [r7, #10]
 800f6c4:	4413      	add	r3, r2
 800f6c6:	787a      	ldrb	r2, [r7, #1]
 800f6c8:	701a      	strb	r2, [r3, #0]
  }
}
 800f6ca:	bf00      	nop
 800f6cc:	3710      	adds	r7, #16
 800f6ce:	46bd      	mov	sp, r7
 800f6d0:	bd80      	pop	{r7, pc}
	...

0800f6d4 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800f6d4:	b580      	push	{r7, lr}
 800f6d6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800f6d8:	f00b fc08 	bl	801aeec <rand>
 800f6dc:	4603      	mov	r3, r0
 800f6de:	b29b      	uxth	r3, r3
 800f6e0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800f6e4:	b29b      	uxth	r3, r3
 800f6e6:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800f6ea:	b29a      	uxth	r2, r3
 800f6ec:	4b01      	ldr	r3, [pc, #4]	; (800f6f4 <tcp_init+0x20>)
 800f6ee:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800f6f0:	bf00      	nop
 800f6f2:	bd80      	pop	{r7, pc}
 800f6f4:	200000b8 	.word	0x200000b8

0800f6f8 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800f6f8:	b580      	push	{r7, lr}
 800f6fa:	b082      	sub	sp, #8
 800f6fc:	af00      	add	r7, sp, #0
 800f6fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	7d1b      	ldrb	r3, [r3, #20]
 800f704:	2b01      	cmp	r3, #1
 800f706:	d105      	bne.n	800f714 <tcp_free+0x1c>
 800f708:	4b06      	ldr	r3, [pc, #24]	; (800f724 <tcp_free+0x2c>)
 800f70a:	22d4      	movs	r2, #212	; 0xd4
 800f70c:	4906      	ldr	r1, [pc, #24]	; (800f728 <tcp_free+0x30>)
 800f70e:	4807      	ldr	r0, [pc, #28]	; (800f72c <tcp_free+0x34>)
 800f710:	f00b fb5e 	bl	801add0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800f714:	6879      	ldr	r1, [r7, #4]
 800f716:	2001      	movs	r0, #1
 800f718:	f7fe fcfc 	bl	800e114 <memp_free>
}
 800f71c:	bf00      	nop
 800f71e:	3708      	adds	r7, #8
 800f720:	46bd      	mov	sp, r7
 800f722:	bd80      	pop	{r7, pc}
 800f724:	0801e6fc 	.word	0x0801e6fc
 800f728:	0801e72c 	.word	0x0801e72c
 800f72c:	0801e740 	.word	0x0801e740

0800f730 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800f730:	b580      	push	{r7, lr}
 800f732:	b082      	sub	sp, #8
 800f734:	af00      	add	r7, sp, #0
 800f736:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	7d1b      	ldrb	r3, [r3, #20]
 800f73c:	2b01      	cmp	r3, #1
 800f73e:	d105      	bne.n	800f74c <tcp_free_listen+0x1c>
 800f740:	4b06      	ldr	r3, [pc, #24]	; (800f75c <tcp_free_listen+0x2c>)
 800f742:	22df      	movs	r2, #223	; 0xdf
 800f744:	4906      	ldr	r1, [pc, #24]	; (800f760 <tcp_free_listen+0x30>)
 800f746:	4807      	ldr	r0, [pc, #28]	; (800f764 <tcp_free_listen+0x34>)
 800f748:	f00b fb42 	bl	801add0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800f74c:	6879      	ldr	r1, [r7, #4]
 800f74e:	2002      	movs	r0, #2
 800f750:	f7fe fce0 	bl	800e114 <memp_free>
}
 800f754:	bf00      	nop
 800f756:	3708      	adds	r7, #8
 800f758:	46bd      	mov	sp, r7
 800f75a:	bd80      	pop	{r7, pc}
 800f75c:	0801e6fc 	.word	0x0801e6fc
 800f760:	0801e768 	.word	0x0801e768
 800f764:	0801e740 	.word	0x0801e740

0800f768 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800f768:	b580      	push	{r7, lr}
 800f76a:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800f76c:	f000 fea4 	bl	80104b8 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800f770:	4b07      	ldr	r3, [pc, #28]	; (800f790 <tcp_tmr+0x28>)
 800f772:	781b      	ldrb	r3, [r3, #0]
 800f774:	3301      	adds	r3, #1
 800f776:	b2da      	uxtb	r2, r3
 800f778:	4b05      	ldr	r3, [pc, #20]	; (800f790 <tcp_tmr+0x28>)
 800f77a:	701a      	strb	r2, [r3, #0]
 800f77c:	4b04      	ldr	r3, [pc, #16]	; (800f790 <tcp_tmr+0x28>)
 800f77e:	781b      	ldrb	r3, [r3, #0]
 800f780:	f003 0301 	and.w	r3, r3, #1
 800f784:	2b00      	cmp	r3, #0
 800f786:	d001      	beq.n	800f78c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800f788:	f000 fb56 	bl	800fe38 <tcp_slowtmr>
  }
}
 800f78c:	bf00      	nop
 800f78e:	bd80      	pop	{r7, pc}
 800f790:	20013ced 	.word	0x20013ced

0800f794 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800f794:	b580      	push	{r7, lr}
 800f796:	b084      	sub	sp, #16
 800f798:	af00      	add	r7, sp, #0
 800f79a:	6078      	str	r0, [r7, #4]
 800f79c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800f79e:	683b      	ldr	r3, [r7, #0]
 800f7a0:	2b00      	cmp	r3, #0
 800f7a2:	d105      	bne.n	800f7b0 <tcp_remove_listener+0x1c>
 800f7a4:	4b0d      	ldr	r3, [pc, #52]	; (800f7dc <tcp_remove_listener+0x48>)
 800f7a6:	22ff      	movs	r2, #255	; 0xff
 800f7a8:	490d      	ldr	r1, [pc, #52]	; (800f7e0 <tcp_remove_listener+0x4c>)
 800f7aa:	480e      	ldr	r0, [pc, #56]	; (800f7e4 <tcp_remove_listener+0x50>)
 800f7ac:	f00b fb10 	bl	801add0 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	60fb      	str	r3, [r7, #12]
 800f7b4:	e00a      	b.n	800f7cc <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800f7b6:	68fb      	ldr	r3, [r7, #12]
 800f7b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f7ba:	683a      	ldr	r2, [r7, #0]
 800f7bc:	429a      	cmp	r2, r3
 800f7be:	d102      	bne.n	800f7c6 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800f7c0:	68fb      	ldr	r3, [r7, #12]
 800f7c2:	2200      	movs	r2, #0
 800f7c4:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800f7c6:	68fb      	ldr	r3, [r7, #12]
 800f7c8:	68db      	ldr	r3, [r3, #12]
 800f7ca:	60fb      	str	r3, [r7, #12]
 800f7cc:	68fb      	ldr	r3, [r7, #12]
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	d1f1      	bne.n	800f7b6 <tcp_remove_listener+0x22>
    }
  }
}
 800f7d2:	bf00      	nop
 800f7d4:	bf00      	nop
 800f7d6:	3710      	adds	r7, #16
 800f7d8:	46bd      	mov	sp, r7
 800f7da:	bd80      	pop	{r7, pc}
 800f7dc:	0801e6fc 	.word	0x0801e6fc
 800f7e0:	0801e784 	.word	0x0801e784
 800f7e4:	0801e740 	.word	0x0801e740

0800f7e8 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800f7e8:	b580      	push	{r7, lr}
 800f7ea:	b084      	sub	sp, #16
 800f7ec:	af00      	add	r7, sp, #0
 800f7ee:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	2b00      	cmp	r3, #0
 800f7f4:	d106      	bne.n	800f804 <tcp_listen_closed+0x1c>
 800f7f6:	4b14      	ldr	r3, [pc, #80]	; (800f848 <tcp_listen_closed+0x60>)
 800f7f8:	f240 1211 	movw	r2, #273	; 0x111
 800f7fc:	4913      	ldr	r1, [pc, #76]	; (800f84c <tcp_listen_closed+0x64>)
 800f7fe:	4814      	ldr	r0, [pc, #80]	; (800f850 <tcp_listen_closed+0x68>)
 800f800:	f00b fae6 	bl	801add0 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	7d1b      	ldrb	r3, [r3, #20]
 800f808:	2b01      	cmp	r3, #1
 800f80a:	d006      	beq.n	800f81a <tcp_listen_closed+0x32>
 800f80c:	4b0e      	ldr	r3, [pc, #56]	; (800f848 <tcp_listen_closed+0x60>)
 800f80e:	f44f 7289 	mov.w	r2, #274	; 0x112
 800f812:	4910      	ldr	r1, [pc, #64]	; (800f854 <tcp_listen_closed+0x6c>)
 800f814:	480e      	ldr	r0, [pc, #56]	; (800f850 <tcp_listen_closed+0x68>)
 800f816:	f00b fadb 	bl	801add0 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800f81a:	2301      	movs	r3, #1
 800f81c:	60fb      	str	r3, [r7, #12]
 800f81e:	e00b      	b.n	800f838 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800f820:	4a0d      	ldr	r2, [pc, #52]	; (800f858 <tcp_listen_closed+0x70>)
 800f822:	68fb      	ldr	r3, [r7, #12]
 800f824:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f828:	681b      	ldr	r3, [r3, #0]
 800f82a:	6879      	ldr	r1, [r7, #4]
 800f82c:	4618      	mov	r0, r3
 800f82e:	f7ff ffb1 	bl	800f794 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800f832:	68fb      	ldr	r3, [r7, #12]
 800f834:	3301      	adds	r3, #1
 800f836:	60fb      	str	r3, [r7, #12]
 800f838:	68fb      	ldr	r3, [r7, #12]
 800f83a:	2b03      	cmp	r3, #3
 800f83c:	d9f0      	bls.n	800f820 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800f83e:	bf00      	nop
 800f840:	bf00      	nop
 800f842:	3710      	adds	r7, #16
 800f844:	46bd      	mov	sp, r7
 800f846:	bd80      	pop	{r7, pc}
 800f848:	0801e6fc 	.word	0x0801e6fc
 800f84c:	0801e7ac 	.word	0x0801e7ac
 800f850:	0801e740 	.word	0x0801e740
 800f854:	0801e7b8 	.word	0x0801e7b8
 800f858:	0806c838 	.word	0x0806c838

0800f85c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800f85c:	b5b0      	push	{r4, r5, r7, lr}
 800f85e:	b088      	sub	sp, #32
 800f860:	af04      	add	r7, sp, #16
 800f862:	6078      	str	r0, [r7, #4]
 800f864:	460b      	mov	r3, r1
 800f866:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	2b00      	cmp	r3, #0
 800f86c:	d106      	bne.n	800f87c <tcp_close_shutdown+0x20>
 800f86e:	4b63      	ldr	r3, [pc, #396]	; (800f9fc <tcp_close_shutdown+0x1a0>)
 800f870:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800f874:	4962      	ldr	r1, [pc, #392]	; (800fa00 <tcp_close_shutdown+0x1a4>)
 800f876:	4863      	ldr	r0, [pc, #396]	; (800fa04 <tcp_close_shutdown+0x1a8>)
 800f878:	f00b faaa 	bl	801add0 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800f87c:	78fb      	ldrb	r3, [r7, #3]
 800f87e:	2b00      	cmp	r3, #0
 800f880:	d067      	beq.n	800f952 <tcp_close_shutdown+0xf6>
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	7d1b      	ldrb	r3, [r3, #20]
 800f886:	2b04      	cmp	r3, #4
 800f888:	d003      	beq.n	800f892 <tcp_close_shutdown+0x36>
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	7d1b      	ldrb	r3, [r3, #20]
 800f88e:	2b07      	cmp	r3, #7
 800f890:	d15f      	bne.n	800f952 <tcp_close_shutdown+0xf6>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f896:	2b00      	cmp	r3, #0
 800f898:	d105      	bne.n	800f8a6 <tcp_close_shutdown+0x4a>
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f89e:	f642 52a0 	movw	r2, #11680	; 0x2da0
 800f8a2:	4293      	cmp	r3, r2
 800f8a4:	d055      	beq.n	800f952 <tcp_close_shutdown+0xf6>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	8b5b      	ldrh	r3, [r3, #26]
 800f8aa:	f003 0310 	and.w	r3, r3, #16
 800f8ae:	2b00      	cmp	r3, #0
 800f8b0:	d106      	bne.n	800f8c0 <tcp_close_shutdown+0x64>
 800f8b2:	4b52      	ldr	r3, [pc, #328]	; (800f9fc <tcp_close_shutdown+0x1a0>)
 800f8b4:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800f8b8:	4953      	ldr	r1, [pc, #332]	; (800fa08 <tcp_close_shutdown+0x1ac>)
 800f8ba:	4852      	ldr	r0, [pc, #328]	; (800fa04 <tcp_close_shutdown+0x1a8>)
 800f8bc:	f00b fa88 	bl	801add0 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800f8c8:	687d      	ldr	r5, [r7, #4]
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	3304      	adds	r3, #4
 800f8ce:	687a      	ldr	r2, [r7, #4]
 800f8d0:	8ad2      	ldrh	r2, [r2, #22]
 800f8d2:	6879      	ldr	r1, [r7, #4]
 800f8d4:	8b09      	ldrh	r1, [r1, #24]
 800f8d6:	9102      	str	r1, [sp, #8]
 800f8d8:	9201      	str	r2, [sp, #4]
 800f8da:	9300      	str	r3, [sp, #0]
 800f8dc:	462b      	mov	r3, r5
 800f8de:	4622      	mov	r2, r4
 800f8e0:	4601      	mov	r1, r0
 800f8e2:	6878      	ldr	r0, [r7, #4]
 800f8e4:	f004 fedc 	bl	80146a0 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800f8e8:	6878      	ldr	r0, [r7, #4]
 800f8ea:	f001 f8c9 	bl	8010a80 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800f8ee:	4b47      	ldr	r3, [pc, #284]	; (800fa0c <tcp_close_shutdown+0x1b0>)
 800f8f0:	681b      	ldr	r3, [r3, #0]
 800f8f2:	687a      	ldr	r2, [r7, #4]
 800f8f4:	429a      	cmp	r2, r3
 800f8f6:	d105      	bne.n	800f904 <tcp_close_shutdown+0xa8>
 800f8f8:	4b44      	ldr	r3, [pc, #272]	; (800fa0c <tcp_close_shutdown+0x1b0>)
 800f8fa:	681b      	ldr	r3, [r3, #0]
 800f8fc:	68db      	ldr	r3, [r3, #12]
 800f8fe:	4a43      	ldr	r2, [pc, #268]	; (800fa0c <tcp_close_shutdown+0x1b0>)
 800f900:	6013      	str	r3, [r2, #0]
 800f902:	e013      	b.n	800f92c <tcp_close_shutdown+0xd0>
 800f904:	4b41      	ldr	r3, [pc, #260]	; (800fa0c <tcp_close_shutdown+0x1b0>)
 800f906:	681b      	ldr	r3, [r3, #0]
 800f908:	60fb      	str	r3, [r7, #12]
 800f90a:	e00c      	b.n	800f926 <tcp_close_shutdown+0xca>
 800f90c:	68fb      	ldr	r3, [r7, #12]
 800f90e:	68db      	ldr	r3, [r3, #12]
 800f910:	687a      	ldr	r2, [r7, #4]
 800f912:	429a      	cmp	r2, r3
 800f914:	d104      	bne.n	800f920 <tcp_close_shutdown+0xc4>
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	68da      	ldr	r2, [r3, #12]
 800f91a:	68fb      	ldr	r3, [r7, #12]
 800f91c:	60da      	str	r2, [r3, #12]
 800f91e:	e005      	b.n	800f92c <tcp_close_shutdown+0xd0>
 800f920:	68fb      	ldr	r3, [r7, #12]
 800f922:	68db      	ldr	r3, [r3, #12]
 800f924:	60fb      	str	r3, [r7, #12]
 800f926:	68fb      	ldr	r3, [r7, #12]
 800f928:	2b00      	cmp	r3, #0
 800f92a:	d1ef      	bne.n	800f90c <tcp_close_shutdown+0xb0>
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	2200      	movs	r2, #0
 800f930:	60da      	str	r2, [r3, #12]
 800f932:	4b37      	ldr	r3, [pc, #220]	; (800fa10 <tcp_close_shutdown+0x1b4>)
 800f934:	2201      	movs	r2, #1
 800f936:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800f938:	4b36      	ldr	r3, [pc, #216]	; (800fa14 <tcp_close_shutdown+0x1b8>)
 800f93a:	681b      	ldr	r3, [r3, #0]
 800f93c:	687a      	ldr	r2, [r7, #4]
 800f93e:	429a      	cmp	r2, r3
 800f940:	d102      	bne.n	800f948 <tcp_close_shutdown+0xec>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800f942:	f003 fd75 	bl	8013430 <tcp_trigger_input_pcb_close>
 800f946:	e002      	b.n	800f94e <tcp_close_shutdown+0xf2>
      } else {
        tcp_free(pcb);
 800f948:	6878      	ldr	r0, [r7, #4]
 800f94a:	f7ff fed5 	bl	800f6f8 <tcp_free>
      }
      return ERR_OK;
 800f94e:	2300      	movs	r3, #0
 800f950:	e050      	b.n	800f9f4 <tcp_close_shutdown+0x198>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	7d1b      	ldrb	r3, [r3, #20]
 800f956:	2b02      	cmp	r3, #2
 800f958:	d03b      	beq.n	800f9d2 <tcp_close_shutdown+0x176>
 800f95a:	2b02      	cmp	r3, #2
 800f95c:	dc44      	bgt.n	800f9e8 <tcp_close_shutdown+0x18c>
 800f95e:	2b00      	cmp	r3, #0
 800f960:	d002      	beq.n	800f968 <tcp_close_shutdown+0x10c>
 800f962:	2b01      	cmp	r3, #1
 800f964:	d02a      	beq.n	800f9bc <tcp_close_shutdown+0x160>
 800f966:	e03f      	b.n	800f9e8 <tcp_close_shutdown+0x18c>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	8adb      	ldrh	r3, [r3, #22]
 800f96c:	2b00      	cmp	r3, #0
 800f96e:	d021      	beq.n	800f9b4 <tcp_close_shutdown+0x158>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800f970:	4b29      	ldr	r3, [pc, #164]	; (800fa18 <tcp_close_shutdown+0x1bc>)
 800f972:	681b      	ldr	r3, [r3, #0]
 800f974:	687a      	ldr	r2, [r7, #4]
 800f976:	429a      	cmp	r2, r3
 800f978:	d105      	bne.n	800f986 <tcp_close_shutdown+0x12a>
 800f97a:	4b27      	ldr	r3, [pc, #156]	; (800fa18 <tcp_close_shutdown+0x1bc>)
 800f97c:	681b      	ldr	r3, [r3, #0]
 800f97e:	68db      	ldr	r3, [r3, #12]
 800f980:	4a25      	ldr	r2, [pc, #148]	; (800fa18 <tcp_close_shutdown+0x1bc>)
 800f982:	6013      	str	r3, [r2, #0]
 800f984:	e013      	b.n	800f9ae <tcp_close_shutdown+0x152>
 800f986:	4b24      	ldr	r3, [pc, #144]	; (800fa18 <tcp_close_shutdown+0x1bc>)
 800f988:	681b      	ldr	r3, [r3, #0]
 800f98a:	60bb      	str	r3, [r7, #8]
 800f98c:	e00c      	b.n	800f9a8 <tcp_close_shutdown+0x14c>
 800f98e:	68bb      	ldr	r3, [r7, #8]
 800f990:	68db      	ldr	r3, [r3, #12]
 800f992:	687a      	ldr	r2, [r7, #4]
 800f994:	429a      	cmp	r2, r3
 800f996:	d104      	bne.n	800f9a2 <tcp_close_shutdown+0x146>
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	68da      	ldr	r2, [r3, #12]
 800f99c:	68bb      	ldr	r3, [r7, #8]
 800f99e:	60da      	str	r2, [r3, #12]
 800f9a0:	e005      	b.n	800f9ae <tcp_close_shutdown+0x152>
 800f9a2:	68bb      	ldr	r3, [r7, #8]
 800f9a4:	68db      	ldr	r3, [r3, #12]
 800f9a6:	60bb      	str	r3, [r7, #8]
 800f9a8:	68bb      	ldr	r3, [r7, #8]
 800f9aa:	2b00      	cmp	r3, #0
 800f9ac:	d1ef      	bne.n	800f98e <tcp_close_shutdown+0x132>
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	2200      	movs	r2, #0
 800f9b2:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800f9b4:	6878      	ldr	r0, [r7, #4]
 800f9b6:	f7ff fe9f 	bl	800f6f8 <tcp_free>
      break;
 800f9ba:	e01a      	b.n	800f9f2 <tcp_close_shutdown+0x196>
    case LISTEN:
      tcp_listen_closed(pcb);
 800f9bc:	6878      	ldr	r0, [r7, #4]
 800f9be:	f7ff ff13 	bl	800f7e8 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800f9c2:	6879      	ldr	r1, [r7, #4]
 800f9c4:	4815      	ldr	r0, [pc, #84]	; (800fa1c <tcp_close_shutdown+0x1c0>)
 800f9c6:	f001 f8ab 	bl	8010b20 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800f9ca:	6878      	ldr	r0, [r7, #4]
 800f9cc:	f7ff feb0 	bl	800f730 <tcp_free_listen>
      break;
 800f9d0:	e00f      	b.n	800f9f2 <tcp_close_shutdown+0x196>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800f9d2:	6879      	ldr	r1, [r7, #4]
 800f9d4:	480d      	ldr	r0, [pc, #52]	; (800fa0c <tcp_close_shutdown+0x1b0>)
 800f9d6:	f001 f8a3 	bl	8010b20 <tcp_pcb_remove>
 800f9da:	4b0d      	ldr	r3, [pc, #52]	; (800fa10 <tcp_close_shutdown+0x1b4>)
 800f9dc:	2201      	movs	r2, #1
 800f9de:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800f9e0:	6878      	ldr	r0, [r7, #4]
 800f9e2:	f7ff fe89 	bl	800f6f8 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800f9e6:	e004      	b.n	800f9f2 <tcp_close_shutdown+0x196>
    default:
      return tcp_close_shutdown_fin(pcb);
 800f9e8:	6878      	ldr	r0, [r7, #4]
 800f9ea:	f000 f819 	bl	800fa20 <tcp_close_shutdown_fin>
 800f9ee:	4603      	mov	r3, r0
 800f9f0:	e000      	b.n	800f9f4 <tcp_close_shutdown+0x198>
  }
  return ERR_OK;
 800f9f2:	2300      	movs	r3, #0
}
 800f9f4:	4618      	mov	r0, r3
 800f9f6:	3710      	adds	r7, #16
 800f9f8:	46bd      	mov	sp, r7
 800f9fa:	bdb0      	pop	{r4, r5, r7, pc}
 800f9fc:	0801e6fc 	.word	0x0801e6fc
 800fa00:	0801e7d0 	.word	0x0801e7d0
 800fa04:	0801e740 	.word	0x0801e740
 800fa08:	0801e7f0 	.word	0x0801e7f0
 800fa0c:	20013ce4 	.word	0x20013ce4
 800fa10:	20013cec 	.word	0x20013cec
 800fa14:	20013d28 	.word	0x20013d28
 800fa18:	20013cdc 	.word	0x20013cdc
 800fa1c:	20013ce0 	.word	0x20013ce0

0800fa20 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800fa20:	b580      	push	{r7, lr}
 800fa22:	b084      	sub	sp, #16
 800fa24:	af00      	add	r7, sp, #0
 800fa26:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	2b00      	cmp	r3, #0
 800fa2c:	d106      	bne.n	800fa3c <tcp_close_shutdown_fin+0x1c>
 800fa2e:	4b2e      	ldr	r3, [pc, #184]	; (800fae8 <tcp_close_shutdown_fin+0xc8>)
 800fa30:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800fa34:	492d      	ldr	r1, [pc, #180]	; (800faec <tcp_close_shutdown_fin+0xcc>)
 800fa36:	482e      	ldr	r0, [pc, #184]	; (800faf0 <tcp_close_shutdown_fin+0xd0>)
 800fa38:	f00b f9ca 	bl	801add0 <iprintf>

  switch (pcb->state) {
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	7d1b      	ldrb	r3, [r3, #20]
 800fa40:	2b07      	cmp	r3, #7
 800fa42:	d020      	beq.n	800fa86 <tcp_close_shutdown_fin+0x66>
 800fa44:	2b07      	cmp	r3, #7
 800fa46:	dc2b      	bgt.n	800faa0 <tcp_close_shutdown_fin+0x80>
 800fa48:	2b03      	cmp	r3, #3
 800fa4a:	d002      	beq.n	800fa52 <tcp_close_shutdown_fin+0x32>
 800fa4c:	2b04      	cmp	r3, #4
 800fa4e:	d00d      	beq.n	800fa6c <tcp_close_shutdown_fin+0x4c>
 800fa50:	e026      	b.n	800faa0 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800fa52:	6878      	ldr	r0, [r7, #4]
 800fa54:	f003 ff04 	bl	8013860 <tcp_send_fin>
 800fa58:	4603      	mov	r3, r0
 800fa5a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800fa5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fa60:	2b00      	cmp	r3, #0
 800fa62:	d11f      	bne.n	800faa4 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	2205      	movs	r2, #5
 800fa68:	751a      	strb	r2, [r3, #20]
      }
      break;
 800fa6a:	e01b      	b.n	800faa4 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800fa6c:	6878      	ldr	r0, [r7, #4]
 800fa6e:	f003 fef7 	bl	8013860 <tcp_send_fin>
 800fa72:	4603      	mov	r3, r0
 800fa74:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800fa76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fa7a:	2b00      	cmp	r3, #0
 800fa7c:	d114      	bne.n	800faa8 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	2205      	movs	r2, #5
 800fa82:	751a      	strb	r2, [r3, #20]
      }
      break;
 800fa84:	e010      	b.n	800faa8 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800fa86:	6878      	ldr	r0, [r7, #4]
 800fa88:	f003 feea 	bl	8013860 <tcp_send_fin>
 800fa8c:	4603      	mov	r3, r0
 800fa8e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800fa90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fa94:	2b00      	cmp	r3, #0
 800fa96:	d109      	bne.n	800faac <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	2209      	movs	r2, #9
 800fa9c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800fa9e:	e005      	b.n	800faac <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800faa0:	2300      	movs	r3, #0
 800faa2:	e01c      	b.n	800fade <tcp_close_shutdown_fin+0xbe>
      break;
 800faa4:	bf00      	nop
 800faa6:	e002      	b.n	800faae <tcp_close_shutdown_fin+0x8e>
      break;
 800faa8:	bf00      	nop
 800faaa:	e000      	b.n	800faae <tcp_close_shutdown_fin+0x8e>
      break;
 800faac:	bf00      	nop
  }

  if (err == ERR_OK) {
 800faae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fab2:	2b00      	cmp	r3, #0
 800fab4:	d103      	bne.n	800fabe <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800fab6:	6878      	ldr	r0, [r7, #4]
 800fab8:	f004 f810 	bl	8013adc <tcp_output>
 800fabc:	e00d      	b.n	800fada <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800fabe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fac2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fac6:	d108      	bne.n	800fada <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	8b5b      	ldrh	r3, [r3, #26]
 800facc:	f043 0308 	orr.w	r3, r3, #8
 800fad0:	b29a      	uxth	r2, r3
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800fad6:	2300      	movs	r3, #0
 800fad8:	e001      	b.n	800fade <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800fada:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800fade:	4618      	mov	r0, r3
 800fae0:	3710      	adds	r7, #16
 800fae2:	46bd      	mov	sp, r7
 800fae4:	bd80      	pop	{r7, pc}
 800fae6:	bf00      	nop
 800fae8:	0801e6fc 	.word	0x0801e6fc
 800faec:	0801e7ac 	.word	0x0801e7ac
 800faf0:	0801e740 	.word	0x0801e740

0800faf4 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800faf4:	b580      	push	{r7, lr}
 800faf6:	b082      	sub	sp, #8
 800faf8:	af00      	add	r7, sp, #0
 800fafa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	2b00      	cmp	r3, #0
 800fb00:	d109      	bne.n	800fb16 <tcp_close+0x22>
 800fb02:	4b0f      	ldr	r3, [pc, #60]	; (800fb40 <tcp_close+0x4c>)
 800fb04:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800fb08:	490e      	ldr	r1, [pc, #56]	; (800fb44 <tcp_close+0x50>)
 800fb0a:	480f      	ldr	r0, [pc, #60]	; (800fb48 <tcp_close+0x54>)
 800fb0c:	f00b f960 	bl	801add0 <iprintf>
 800fb10:	f06f 030f 	mvn.w	r3, #15
 800fb14:	e00f      	b.n	800fb36 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	7d1b      	ldrb	r3, [r3, #20]
 800fb1a:	2b01      	cmp	r3, #1
 800fb1c:	d006      	beq.n	800fb2c <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	8b5b      	ldrh	r3, [r3, #26]
 800fb22:	f043 0310 	orr.w	r3, r3, #16
 800fb26:	b29a      	uxth	r2, r3
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800fb2c:	2101      	movs	r1, #1
 800fb2e:	6878      	ldr	r0, [r7, #4]
 800fb30:	f7ff fe94 	bl	800f85c <tcp_close_shutdown>
 800fb34:	4603      	mov	r3, r0
}
 800fb36:	4618      	mov	r0, r3
 800fb38:	3708      	adds	r7, #8
 800fb3a:	46bd      	mov	sp, r7
 800fb3c:	bd80      	pop	{r7, pc}
 800fb3e:	bf00      	nop
 800fb40:	0801e6fc 	.word	0x0801e6fc
 800fb44:	0801e80c 	.word	0x0801e80c
 800fb48:	0801e740 	.word	0x0801e740

0800fb4c <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800fb4c:	b580      	push	{r7, lr}
 800fb4e:	b08e      	sub	sp, #56	; 0x38
 800fb50:	af04      	add	r7, sp, #16
 800fb52:	6078      	str	r0, [r7, #4]
 800fb54:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	2b00      	cmp	r3, #0
 800fb5a:	d107      	bne.n	800fb6c <tcp_abandon+0x20>
 800fb5c:	4b52      	ldr	r3, [pc, #328]	; (800fca8 <tcp_abandon+0x15c>)
 800fb5e:	f240 223d 	movw	r2, #573	; 0x23d
 800fb62:	4952      	ldr	r1, [pc, #328]	; (800fcac <tcp_abandon+0x160>)
 800fb64:	4852      	ldr	r0, [pc, #328]	; (800fcb0 <tcp_abandon+0x164>)
 800fb66:	f00b f933 	bl	801add0 <iprintf>
 800fb6a:	e099      	b.n	800fca0 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	7d1b      	ldrb	r3, [r3, #20]
 800fb70:	2b01      	cmp	r3, #1
 800fb72:	d106      	bne.n	800fb82 <tcp_abandon+0x36>
 800fb74:	4b4c      	ldr	r3, [pc, #304]	; (800fca8 <tcp_abandon+0x15c>)
 800fb76:	f44f 7210 	mov.w	r2, #576	; 0x240
 800fb7a:	494e      	ldr	r1, [pc, #312]	; (800fcb4 <tcp_abandon+0x168>)
 800fb7c:	484c      	ldr	r0, [pc, #304]	; (800fcb0 <tcp_abandon+0x164>)
 800fb7e:	f00b f927 	bl	801add0 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	7d1b      	ldrb	r3, [r3, #20]
 800fb86:	2b0a      	cmp	r3, #10
 800fb88:	d107      	bne.n	800fb9a <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800fb8a:	6879      	ldr	r1, [r7, #4]
 800fb8c:	484a      	ldr	r0, [pc, #296]	; (800fcb8 <tcp_abandon+0x16c>)
 800fb8e:	f000 ffc7 	bl	8010b20 <tcp_pcb_remove>
    tcp_free(pcb);
 800fb92:	6878      	ldr	r0, [r7, #4]
 800fb94:	f7ff fdb0 	bl	800f6f8 <tcp_free>
 800fb98:	e082      	b.n	800fca0 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800fb9a:	2300      	movs	r3, #0
 800fb9c:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800fb9e:	2300      	movs	r3, #0
 800fba0:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fba6:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fbac:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fbb4:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	691b      	ldr	r3, [r3, #16]
 800fbba:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	7d1b      	ldrb	r3, [r3, #20]
 800fbc0:	2b00      	cmp	r3, #0
 800fbc2:	d126      	bne.n	800fc12 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	8adb      	ldrh	r3, [r3, #22]
 800fbc8:	2b00      	cmp	r3, #0
 800fbca:	d02e      	beq.n	800fc2a <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800fbcc:	4b3b      	ldr	r3, [pc, #236]	; (800fcbc <tcp_abandon+0x170>)
 800fbce:	681b      	ldr	r3, [r3, #0]
 800fbd0:	687a      	ldr	r2, [r7, #4]
 800fbd2:	429a      	cmp	r2, r3
 800fbd4:	d105      	bne.n	800fbe2 <tcp_abandon+0x96>
 800fbd6:	4b39      	ldr	r3, [pc, #228]	; (800fcbc <tcp_abandon+0x170>)
 800fbd8:	681b      	ldr	r3, [r3, #0]
 800fbda:	68db      	ldr	r3, [r3, #12]
 800fbdc:	4a37      	ldr	r2, [pc, #220]	; (800fcbc <tcp_abandon+0x170>)
 800fbde:	6013      	str	r3, [r2, #0]
 800fbe0:	e013      	b.n	800fc0a <tcp_abandon+0xbe>
 800fbe2:	4b36      	ldr	r3, [pc, #216]	; (800fcbc <tcp_abandon+0x170>)
 800fbe4:	681b      	ldr	r3, [r3, #0]
 800fbe6:	61fb      	str	r3, [r7, #28]
 800fbe8:	e00c      	b.n	800fc04 <tcp_abandon+0xb8>
 800fbea:	69fb      	ldr	r3, [r7, #28]
 800fbec:	68db      	ldr	r3, [r3, #12]
 800fbee:	687a      	ldr	r2, [r7, #4]
 800fbf0:	429a      	cmp	r2, r3
 800fbf2:	d104      	bne.n	800fbfe <tcp_abandon+0xb2>
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	68da      	ldr	r2, [r3, #12]
 800fbf8:	69fb      	ldr	r3, [r7, #28]
 800fbfa:	60da      	str	r2, [r3, #12]
 800fbfc:	e005      	b.n	800fc0a <tcp_abandon+0xbe>
 800fbfe:	69fb      	ldr	r3, [r7, #28]
 800fc00:	68db      	ldr	r3, [r3, #12]
 800fc02:	61fb      	str	r3, [r7, #28]
 800fc04:	69fb      	ldr	r3, [r7, #28]
 800fc06:	2b00      	cmp	r3, #0
 800fc08:	d1ef      	bne.n	800fbea <tcp_abandon+0x9e>
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	2200      	movs	r2, #0
 800fc0e:	60da      	str	r2, [r3, #12]
 800fc10:	e00b      	b.n	800fc2a <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800fc12:	683b      	ldr	r3, [r7, #0]
 800fc14:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	8adb      	ldrh	r3, [r3, #22]
 800fc1a:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800fc1c:	6879      	ldr	r1, [r7, #4]
 800fc1e:	4828      	ldr	r0, [pc, #160]	; (800fcc0 <tcp_abandon+0x174>)
 800fc20:	f000 ff7e 	bl	8010b20 <tcp_pcb_remove>
 800fc24:	4b27      	ldr	r3, [pc, #156]	; (800fcc4 <tcp_abandon+0x178>)
 800fc26:	2201      	movs	r2, #1
 800fc28:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fc2e:	2b00      	cmp	r3, #0
 800fc30:	d004      	beq.n	800fc3c <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fc36:	4618      	mov	r0, r3
 800fc38:	f000 fd20 	bl	801067c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fc40:	2b00      	cmp	r3, #0
 800fc42:	d004      	beq.n	800fc4e <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fc48:	4618      	mov	r0, r3
 800fc4a:	f000 fd17 	bl	801067c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fc52:	2b00      	cmp	r3, #0
 800fc54:	d004      	beq.n	800fc60 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fc5a:	4618      	mov	r0, r3
 800fc5c:	f000 fd0e 	bl	801067c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800fc60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	d00e      	beq.n	800fc84 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800fc66:	6879      	ldr	r1, [r7, #4]
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	3304      	adds	r3, #4
 800fc6c:	687a      	ldr	r2, [r7, #4]
 800fc6e:	8b12      	ldrh	r2, [r2, #24]
 800fc70:	9202      	str	r2, [sp, #8]
 800fc72:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800fc74:	9201      	str	r2, [sp, #4]
 800fc76:	9300      	str	r3, [sp, #0]
 800fc78:	460b      	mov	r3, r1
 800fc7a:	697a      	ldr	r2, [r7, #20]
 800fc7c:	69b9      	ldr	r1, [r7, #24]
 800fc7e:	6878      	ldr	r0, [r7, #4]
 800fc80:	f004 fd0e 	bl	80146a0 <tcp_rst>
    }
    last_state = pcb->state;
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	7d1b      	ldrb	r3, [r3, #20]
 800fc88:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800fc8a:	6878      	ldr	r0, [r7, #4]
 800fc8c:	f7ff fd34 	bl	800f6f8 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800fc90:	693b      	ldr	r3, [r7, #16]
 800fc92:	2b00      	cmp	r3, #0
 800fc94:	d004      	beq.n	800fca0 <tcp_abandon+0x154>
 800fc96:	693b      	ldr	r3, [r7, #16]
 800fc98:	f06f 010c 	mvn.w	r1, #12
 800fc9c:	68f8      	ldr	r0, [r7, #12]
 800fc9e:	4798      	blx	r3
  }
}
 800fca0:	3728      	adds	r7, #40	; 0x28
 800fca2:	46bd      	mov	sp, r7
 800fca4:	bd80      	pop	{r7, pc}
 800fca6:	bf00      	nop
 800fca8:	0801e6fc 	.word	0x0801e6fc
 800fcac:	0801e840 	.word	0x0801e840
 800fcb0:	0801e740 	.word	0x0801e740
 800fcb4:	0801e85c 	.word	0x0801e85c
 800fcb8:	20013ce8 	.word	0x20013ce8
 800fcbc:	20013cdc 	.word	0x20013cdc
 800fcc0:	20013ce4 	.word	0x20013ce4
 800fcc4:	20013cec 	.word	0x20013cec

0800fcc8 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800fcc8:	b580      	push	{r7, lr}
 800fcca:	b082      	sub	sp, #8
 800fccc:	af00      	add	r7, sp, #0
 800fcce:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800fcd0:	2101      	movs	r1, #1
 800fcd2:	6878      	ldr	r0, [r7, #4]
 800fcd4:	f7ff ff3a 	bl	800fb4c <tcp_abandon>
}
 800fcd8:	bf00      	nop
 800fcda:	3708      	adds	r7, #8
 800fcdc:	46bd      	mov	sp, r7
 800fcde:	bd80      	pop	{r7, pc}

0800fce0 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800fce0:	b580      	push	{r7, lr}
 800fce2:	b084      	sub	sp, #16
 800fce4:	af00      	add	r7, sp, #0
 800fce6:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	2b00      	cmp	r3, #0
 800fcec:	d106      	bne.n	800fcfc <tcp_update_rcv_ann_wnd+0x1c>
 800fcee:	4b25      	ldr	r3, [pc, #148]	; (800fd84 <tcp_update_rcv_ann_wnd+0xa4>)
 800fcf0:	f240 32a6 	movw	r2, #934	; 0x3a6
 800fcf4:	4924      	ldr	r1, [pc, #144]	; (800fd88 <tcp_update_rcv_ann_wnd+0xa8>)
 800fcf6:	4825      	ldr	r0, [pc, #148]	; (800fd8c <tcp_update_rcv_ann_wnd+0xac>)
 800fcf8:	f00b f86a 	bl	801add0 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd00:	687a      	ldr	r2, [r7, #4]
 800fd02:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800fd04:	4413      	add	r3, r2
 800fd06:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd0c:	687a      	ldr	r2, [r7, #4]
 800fd0e:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800fd10:	f241 61d0 	movw	r1, #5840	; 0x16d0
 800fd14:	428a      	cmp	r2, r1
 800fd16:	bf28      	it	cs
 800fd18:	460a      	movcs	r2, r1
 800fd1a:	b292      	uxth	r2, r2
 800fd1c:	4413      	add	r3, r2
 800fd1e:	68fa      	ldr	r2, [r7, #12]
 800fd20:	1ad3      	subs	r3, r2, r3
 800fd22:	2b00      	cmp	r3, #0
 800fd24:	db08      	blt.n	800fd38 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd32:	68fa      	ldr	r2, [r7, #12]
 800fd34:	1ad3      	subs	r3, r2, r3
 800fd36:	e020      	b.n	800fd7a <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd40:	1ad3      	subs	r3, r2, r3
 800fd42:	2b00      	cmp	r3, #0
 800fd44:	dd03      	ble.n	800fd4e <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	2200      	movs	r2, #0
 800fd4a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800fd4c:	e014      	b.n	800fd78 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd56:	1ad3      	subs	r3, r2, r3
 800fd58:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800fd5a:	68bb      	ldr	r3, [r7, #8]
 800fd5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fd60:	d306      	bcc.n	800fd70 <tcp_update_rcv_ann_wnd+0x90>
 800fd62:	4b08      	ldr	r3, [pc, #32]	; (800fd84 <tcp_update_rcv_ann_wnd+0xa4>)
 800fd64:	f240 32b6 	movw	r2, #950	; 0x3b6
 800fd68:	4909      	ldr	r1, [pc, #36]	; (800fd90 <tcp_update_rcv_ann_wnd+0xb0>)
 800fd6a:	4808      	ldr	r0, [pc, #32]	; (800fd8c <tcp_update_rcv_ann_wnd+0xac>)
 800fd6c:	f00b f830 	bl	801add0 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800fd70:	68bb      	ldr	r3, [r7, #8]
 800fd72:	b29a      	uxth	r2, r3
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800fd78:	2300      	movs	r3, #0
  }
}
 800fd7a:	4618      	mov	r0, r3
 800fd7c:	3710      	adds	r7, #16
 800fd7e:	46bd      	mov	sp, r7
 800fd80:	bd80      	pop	{r7, pc}
 800fd82:	bf00      	nop
 800fd84:	0801e6fc 	.word	0x0801e6fc
 800fd88:	0801e958 	.word	0x0801e958
 800fd8c:	0801e740 	.word	0x0801e740
 800fd90:	0801e97c 	.word	0x0801e97c

0800fd94 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800fd94:	b580      	push	{r7, lr}
 800fd96:	b084      	sub	sp, #16
 800fd98:	af00      	add	r7, sp, #0
 800fd9a:	6078      	str	r0, [r7, #4]
 800fd9c:	460b      	mov	r3, r1
 800fd9e:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	2b00      	cmp	r3, #0
 800fda4:	d107      	bne.n	800fdb6 <tcp_recved+0x22>
 800fda6:	4b20      	ldr	r3, [pc, #128]	; (800fe28 <tcp_recved+0x94>)
 800fda8:	f240 32cf 	movw	r2, #975	; 0x3cf
 800fdac:	491f      	ldr	r1, [pc, #124]	; (800fe2c <tcp_recved+0x98>)
 800fdae:	4820      	ldr	r0, [pc, #128]	; (800fe30 <tcp_recved+0x9c>)
 800fdb0:	f00b f80e 	bl	801add0 <iprintf>
 800fdb4:	e034      	b.n	800fe20 <tcp_recved+0x8c>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	7d1b      	ldrb	r3, [r3, #20]
 800fdba:	2b01      	cmp	r3, #1
 800fdbc:	d106      	bne.n	800fdcc <tcp_recved+0x38>
 800fdbe:	4b1a      	ldr	r3, [pc, #104]	; (800fe28 <tcp_recved+0x94>)
 800fdc0:	f240 32d2 	movw	r2, #978	; 0x3d2
 800fdc4:	491b      	ldr	r1, [pc, #108]	; (800fe34 <tcp_recved+0xa0>)
 800fdc6:	481a      	ldr	r0, [pc, #104]	; (800fe30 <tcp_recved+0x9c>)
 800fdc8:	f00b f802 	bl	801add0 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800fdd0:	887b      	ldrh	r3, [r7, #2]
 800fdd2:	4413      	add	r3, r2
 800fdd4:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800fdd6:	89fb      	ldrh	r3, [r7, #14]
 800fdd8:	f642 52a0 	movw	r2, #11680	; 0x2da0
 800fddc:	4293      	cmp	r3, r2
 800fdde:	d804      	bhi.n	800fdea <tcp_recved+0x56>
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fde4:	89fa      	ldrh	r2, [r7, #14]
 800fde6:	429a      	cmp	r2, r3
 800fde8:	d204      	bcs.n	800fdf4 <tcp_recved+0x60>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	f642 52a0 	movw	r2, #11680	; 0x2da0
 800fdf0:	851a      	strh	r2, [r3, #40]	; 0x28
 800fdf2:	e002      	b.n	800fdfa <tcp_recved+0x66>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	89fa      	ldrh	r2, [r7, #14]
 800fdf8:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800fdfa:	6878      	ldr	r0, [r7, #4]
 800fdfc:	f7ff ff70 	bl	800fce0 <tcp_update_rcv_ann_wnd>
 800fe00:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800fe02:	68bb      	ldr	r3, [r7, #8]
 800fe04:	f640 3267 	movw	r2, #2919	; 0xb67
 800fe08:	4293      	cmp	r3, r2
 800fe0a:	d909      	bls.n	800fe20 <tcp_recved+0x8c>
    tcp_ack_now(pcb);
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	8b5b      	ldrh	r3, [r3, #26]
 800fe10:	f043 0302 	orr.w	r3, r3, #2
 800fe14:	b29a      	uxth	r2, r3
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800fe1a:	6878      	ldr	r0, [r7, #4]
 800fe1c:	f003 fe5e 	bl	8013adc <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800fe20:	3710      	adds	r7, #16
 800fe22:	46bd      	mov	sp, r7
 800fe24:	bd80      	pop	{r7, pc}
 800fe26:	bf00      	nop
 800fe28:	0801e6fc 	.word	0x0801e6fc
 800fe2c:	0801e998 	.word	0x0801e998
 800fe30:	0801e740 	.word	0x0801e740
 800fe34:	0801e9b0 	.word	0x0801e9b0

0800fe38 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800fe38:	b5b0      	push	{r4, r5, r7, lr}
 800fe3a:	b090      	sub	sp, #64	; 0x40
 800fe3c:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800fe3e:	2300      	movs	r3, #0
 800fe40:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800fe44:	4b94      	ldr	r3, [pc, #592]	; (8010098 <tcp_slowtmr+0x260>)
 800fe46:	681b      	ldr	r3, [r3, #0]
 800fe48:	3301      	adds	r3, #1
 800fe4a:	4a93      	ldr	r2, [pc, #588]	; (8010098 <tcp_slowtmr+0x260>)
 800fe4c:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800fe4e:	4b93      	ldr	r3, [pc, #588]	; (801009c <tcp_slowtmr+0x264>)
 800fe50:	781b      	ldrb	r3, [r3, #0]
 800fe52:	3301      	adds	r3, #1
 800fe54:	b2da      	uxtb	r2, r3
 800fe56:	4b91      	ldr	r3, [pc, #580]	; (801009c <tcp_slowtmr+0x264>)
 800fe58:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800fe5a:	2300      	movs	r3, #0
 800fe5c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800fe5e:	4b90      	ldr	r3, [pc, #576]	; (80100a0 <tcp_slowtmr+0x268>)
 800fe60:	681b      	ldr	r3, [r3, #0]
 800fe62:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800fe64:	e29f      	b.n	80103a6 <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800fe66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe68:	7d1b      	ldrb	r3, [r3, #20]
 800fe6a:	2b00      	cmp	r3, #0
 800fe6c:	d106      	bne.n	800fe7c <tcp_slowtmr+0x44>
 800fe6e:	4b8d      	ldr	r3, [pc, #564]	; (80100a4 <tcp_slowtmr+0x26c>)
 800fe70:	f240 42be 	movw	r2, #1214	; 0x4be
 800fe74:	498c      	ldr	r1, [pc, #560]	; (80100a8 <tcp_slowtmr+0x270>)
 800fe76:	488d      	ldr	r0, [pc, #564]	; (80100ac <tcp_slowtmr+0x274>)
 800fe78:	f00a ffaa 	bl	801add0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800fe7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe7e:	7d1b      	ldrb	r3, [r3, #20]
 800fe80:	2b01      	cmp	r3, #1
 800fe82:	d106      	bne.n	800fe92 <tcp_slowtmr+0x5a>
 800fe84:	4b87      	ldr	r3, [pc, #540]	; (80100a4 <tcp_slowtmr+0x26c>)
 800fe86:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800fe8a:	4989      	ldr	r1, [pc, #548]	; (80100b0 <tcp_slowtmr+0x278>)
 800fe8c:	4887      	ldr	r0, [pc, #540]	; (80100ac <tcp_slowtmr+0x274>)
 800fe8e:	f00a ff9f 	bl	801add0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800fe92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe94:	7d1b      	ldrb	r3, [r3, #20]
 800fe96:	2b0a      	cmp	r3, #10
 800fe98:	d106      	bne.n	800fea8 <tcp_slowtmr+0x70>
 800fe9a:	4b82      	ldr	r3, [pc, #520]	; (80100a4 <tcp_slowtmr+0x26c>)
 800fe9c:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800fea0:	4984      	ldr	r1, [pc, #528]	; (80100b4 <tcp_slowtmr+0x27c>)
 800fea2:	4882      	ldr	r0, [pc, #520]	; (80100ac <tcp_slowtmr+0x274>)
 800fea4:	f00a ff94 	bl	801add0 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800fea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800feaa:	7f9a      	ldrb	r2, [r3, #30]
 800feac:	4b7b      	ldr	r3, [pc, #492]	; (801009c <tcp_slowtmr+0x264>)
 800feae:	781b      	ldrb	r3, [r3, #0]
 800feb0:	429a      	cmp	r2, r3
 800feb2:	d105      	bne.n	800fec0 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800feb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800feb6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800feb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800feba:	68db      	ldr	r3, [r3, #12]
 800febc:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800febe:	e272      	b.n	80103a6 <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 800fec0:	4b76      	ldr	r3, [pc, #472]	; (801009c <tcp_slowtmr+0x264>)
 800fec2:	781a      	ldrb	r2, [r3, #0]
 800fec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fec6:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800fec8:	2300      	movs	r3, #0
 800feca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800fece:	2300      	movs	r3, #0
 800fed0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800fed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fed6:	7d1b      	ldrb	r3, [r3, #20]
 800fed8:	2b02      	cmp	r3, #2
 800feda:	d10a      	bne.n	800fef2 <tcp_slowtmr+0xba>
 800fedc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fede:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800fee2:	2b05      	cmp	r3, #5
 800fee4:	d905      	bls.n	800fef2 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800fee6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800feea:	3301      	adds	r3, #1
 800feec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
 800fef0:	e11e      	b.n	8010130 <tcp_slowtmr+0x2f8>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800fef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fef4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800fef8:	2b0b      	cmp	r3, #11
 800fefa:	d905      	bls.n	800ff08 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800fefc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ff00:	3301      	adds	r3, #1
 800ff02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ff06:	e113      	b.n	8010130 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800ff08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff0a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800ff0e:	2b00      	cmp	r3, #0
 800ff10:	d075      	beq.n	800fffe <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800ff12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ff16:	2b00      	cmp	r3, #0
 800ff18:	d006      	beq.n	800ff28 <tcp_slowtmr+0xf0>
 800ff1a:	4b62      	ldr	r3, [pc, #392]	; (80100a4 <tcp_slowtmr+0x26c>)
 800ff1c:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800ff20:	4965      	ldr	r1, [pc, #404]	; (80100b8 <tcp_slowtmr+0x280>)
 800ff22:	4862      	ldr	r0, [pc, #392]	; (80100ac <tcp_slowtmr+0x274>)
 800ff24:	f00a ff54 	bl	801add0 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800ff28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ff2c:	2b00      	cmp	r3, #0
 800ff2e:	d106      	bne.n	800ff3e <tcp_slowtmr+0x106>
 800ff30:	4b5c      	ldr	r3, [pc, #368]	; (80100a4 <tcp_slowtmr+0x26c>)
 800ff32:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800ff36:	4961      	ldr	r1, [pc, #388]	; (80100bc <tcp_slowtmr+0x284>)
 800ff38:	485c      	ldr	r0, [pc, #368]	; (80100ac <tcp_slowtmr+0x274>)
 800ff3a:	f00a ff49 	bl	801add0 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800ff3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff40:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800ff44:	2b0b      	cmp	r3, #11
 800ff46:	d905      	bls.n	800ff54 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800ff48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ff4c:	3301      	adds	r3, #1
 800ff4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ff52:	e0ed      	b.n	8010130 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800ff54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff56:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800ff5a:	3b01      	subs	r3, #1
 800ff5c:	4a58      	ldr	r2, [pc, #352]	; (80100c0 <tcp_slowtmr+0x288>)
 800ff5e:	5cd3      	ldrb	r3, [r2, r3]
 800ff60:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800ff62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff64:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800ff68:	7c7a      	ldrb	r2, [r7, #17]
 800ff6a:	429a      	cmp	r2, r3
 800ff6c:	d907      	bls.n	800ff7e <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800ff6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff70:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800ff74:	3301      	adds	r3, #1
 800ff76:	b2da      	uxtb	r2, r3
 800ff78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff7a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800ff7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff80:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800ff84:	7c7a      	ldrb	r2, [r7, #17]
 800ff86:	429a      	cmp	r2, r3
 800ff88:	f200 80d2 	bhi.w	8010130 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800ff8c:	2301      	movs	r3, #1
 800ff8e:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800ff90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff92:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ff96:	2b00      	cmp	r3, #0
 800ff98:	d108      	bne.n	800ffac <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800ff9a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ff9c:	f004 fc74 	bl	8014888 <tcp_zero_window_probe>
 800ffa0:	4603      	mov	r3, r0
 800ffa2:	2b00      	cmp	r3, #0
 800ffa4:	d014      	beq.n	800ffd0 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800ffa6:	2300      	movs	r3, #0
 800ffa8:	623b      	str	r3, [r7, #32]
 800ffaa:	e011      	b.n	800ffd0 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800ffac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ffb2:	4619      	mov	r1, r3
 800ffb4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ffb6:	f003 fb07 	bl	80135c8 <tcp_split_unsent_seg>
 800ffba:	4603      	mov	r3, r0
 800ffbc:	2b00      	cmp	r3, #0
 800ffbe:	d107      	bne.n	800ffd0 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800ffc0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ffc2:	f003 fd8b 	bl	8013adc <tcp_output>
 800ffc6:	4603      	mov	r3, r0
 800ffc8:	2b00      	cmp	r3, #0
 800ffca:	d101      	bne.n	800ffd0 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800ffcc:	2300      	movs	r3, #0
 800ffce:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800ffd0:	6a3b      	ldr	r3, [r7, #32]
 800ffd2:	2b00      	cmp	r3, #0
 800ffd4:	f000 80ac 	beq.w	8010130 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800ffd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffda:	2200      	movs	r2, #0
 800ffdc:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800ffe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffe2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800ffe6:	2b06      	cmp	r3, #6
 800ffe8:	f200 80a2 	bhi.w	8010130 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800ffec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffee:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800fff2:	3301      	adds	r3, #1
 800fff4:	b2da      	uxtb	r2, r3
 800fff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fff8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800fffc:	e098      	b.n	8010130 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800fffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010000:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8010004:	2b00      	cmp	r3, #0
 8010006:	db0f      	blt.n	8010028 <tcp_slowtmr+0x1f0>
 8010008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801000a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801000e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8010012:	4293      	cmp	r3, r2
 8010014:	d008      	beq.n	8010028 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8010016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010018:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801001c:	b29b      	uxth	r3, r3
 801001e:	3301      	adds	r3, #1
 8010020:	b29b      	uxth	r3, r3
 8010022:	b21a      	sxth	r2, r3
 8010024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010026:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8010028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801002a:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 801002e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010030:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8010034:	429a      	cmp	r2, r3
 8010036:	db7b      	blt.n	8010130 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8010038:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801003a:	f004 f855 	bl	80140e8 <tcp_rexmit_rto_prepare>
 801003e:	4603      	mov	r3, r0
 8010040:	2b00      	cmp	r3, #0
 8010042:	d007      	beq.n	8010054 <tcp_slowtmr+0x21c>
 8010044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010046:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010048:	2b00      	cmp	r3, #0
 801004a:	d171      	bne.n	8010130 <tcp_slowtmr+0x2f8>
 801004c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801004e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010050:	2b00      	cmp	r3, #0
 8010052:	d06d      	beq.n	8010130 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8010054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010056:	7d1b      	ldrb	r3, [r3, #20]
 8010058:	2b02      	cmp	r3, #2
 801005a:	d03a      	beq.n	80100d2 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 801005c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801005e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010062:	2b0c      	cmp	r3, #12
 8010064:	bf28      	it	cs
 8010066:	230c      	movcs	r3, #12
 8010068:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 801006a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801006c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010070:	10db      	asrs	r3, r3, #3
 8010072:	b21b      	sxth	r3, r3
 8010074:	461a      	mov	r2, r3
 8010076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010078:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801007c:	4413      	add	r3, r2
 801007e:	7efa      	ldrb	r2, [r7, #27]
 8010080:	4910      	ldr	r1, [pc, #64]	; (80100c4 <tcp_slowtmr+0x28c>)
 8010082:	5c8a      	ldrb	r2, [r1, r2]
 8010084:	4093      	lsls	r3, r2
 8010086:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8010088:	697b      	ldr	r3, [r7, #20]
 801008a:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 801008e:	4293      	cmp	r3, r2
 8010090:	dc1a      	bgt.n	80100c8 <tcp_slowtmr+0x290>
 8010092:	697b      	ldr	r3, [r7, #20]
 8010094:	b21a      	sxth	r2, r3
 8010096:	e019      	b.n	80100cc <tcp_slowtmr+0x294>
 8010098:	20013cd8 	.word	0x20013cd8
 801009c:	20013cee 	.word	0x20013cee
 80100a0:	20013ce4 	.word	0x20013ce4
 80100a4:	0801e6fc 	.word	0x0801e6fc
 80100a8:	0801ea40 	.word	0x0801ea40
 80100ac:	0801e740 	.word	0x0801e740
 80100b0:	0801ea6c 	.word	0x0801ea6c
 80100b4:	0801ea98 	.word	0x0801ea98
 80100b8:	0801eac8 	.word	0x0801eac8
 80100bc:	0801eafc 	.word	0x0801eafc
 80100c0:	0806c830 	.word	0x0806c830
 80100c4:	0806c820 	.word	0x0806c820
 80100c8:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80100cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100ce:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 80100d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100d4:	2200      	movs	r2, #0
 80100d6:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 80100d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100da:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80100de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100e0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80100e4:	4293      	cmp	r3, r2
 80100e6:	bf28      	it	cs
 80100e8:	4613      	movcs	r3, r2
 80100ea:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 80100ec:	8a7b      	ldrh	r3, [r7, #18]
 80100ee:	085b      	lsrs	r3, r3, #1
 80100f0:	b29a      	uxth	r2, r3
 80100f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100f4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80100f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100fa:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80100fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010100:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010102:	005b      	lsls	r3, r3, #1
 8010104:	b29b      	uxth	r3, r3
 8010106:	429a      	cmp	r2, r3
 8010108:	d206      	bcs.n	8010118 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 801010a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801010c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801010e:	005b      	lsls	r3, r3, #1
 8010110:	b29a      	uxth	r2, r3
 8010112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010114:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8010118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801011a:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 801011c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801011e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8010122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010124:	2200      	movs	r2, #0
 8010126:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 801012a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801012c:	f004 f856 	bl	80141dc <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8010130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010132:	7d1b      	ldrb	r3, [r3, #20]
 8010134:	2b06      	cmp	r3, #6
 8010136:	d111      	bne.n	801015c <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8010138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801013a:	8b5b      	ldrh	r3, [r3, #26]
 801013c:	f003 0310 	and.w	r3, r3, #16
 8010140:	2b00      	cmp	r3, #0
 8010142:	d00b      	beq.n	801015c <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8010144:	4b9d      	ldr	r3, [pc, #628]	; (80103bc <tcp_slowtmr+0x584>)
 8010146:	681a      	ldr	r2, [r3, #0]
 8010148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801014a:	6a1b      	ldr	r3, [r3, #32]
 801014c:	1ad3      	subs	r3, r2, r3
 801014e:	2b28      	cmp	r3, #40	; 0x28
 8010150:	d904      	bls.n	801015c <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8010152:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010156:	3301      	adds	r3, #1
 8010158:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 801015c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801015e:	7a5b      	ldrb	r3, [r3, #9]
 8010160:	f003 0308 	and.w	r3, r3, #8
 8010164:	2b00      	cmp	r3, #0
 8010166:	d04c      	beq.n	8010202 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8010168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801016a:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 801016c:	2b04      	cmp	r3, #4
 801016e:	d003      	beq.n	8010178 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8010170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010172:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8010174:	2b07      	cmp	r3, #7
 8010176:	d144      	bne.n	8010202 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8010178:	4b90      	ldr	r3, [pc, #576]	; (80103bc <tcp_slowtmr+0x584>)
 801017a:	681a      	ldr	r2, [r3, #0]
 801017c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801017e:	6a1b      	ldr	r3, [r3, #32]
 8010180:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8010182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010184:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8010188:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 801018c:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 8010190:	498b      	ldr	r1, [pc, #556]	; (80103c0 <tcp_slowtmr+0x588>)
 8010192:	fba1 1303 	umull	r1, r3, r1, r3
 8010196:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8010198:	429a      	cmp	r2, r3
 801019a:	d90a      	bls.n	80101b2 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 801019c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80101a0:	3301      	adds	r3, #1
 80101a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 80101a6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80101aa:	3301      	adds	r3, #1
 80101ac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80101b0:	e027      	b.n	8010202 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80101b2:	4b82      	ldr	r3, [pc, #520]	; (80103bc <tcp_slowtmr+0x584>)
 80101b4:	681a      	ldr	r2, [r3, #0]
 80101b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101b8:	6a1b      	ldr	r3, [r3, #32]
 80101ba:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 80101bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101be:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 80101c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101c4:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80101c8:	4618      	mov	r0, r3
 80101ca:	4b7e      	ldr	r3, [pc, #504]	; (80103c4 <tcp_slowtmr+0x58c>)
 80101cc:	fb00 f303 	mul.w	r3, r0, r3
 80101d0:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 80101d2:	497b      	ldr	r1, [pc, #492]	; (80103c0 <tcp_slowtmr+0x588>)
 80101d4:	fba1 1303 	umull	r1, r3, r1, r3
 80101d8:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80101da:	429a      	cmp	r2, r3
 80101dc:	d911      	bls.n	8010202 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 80101de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80101e0:	f004 fb12 	bl	8014808 <tcp_keepalive>
 80101e4:	4603      	mov	r3, r0
 80101e6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 80101ea:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80101ee:	2b00      	cmp	r3, #0
 80101f0:	d107      	bne.n	8010202 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 80101f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101f4:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80101f8:	3301      	adds	r3, #1
 80101fa:	b2da      	uxtb	r2, r3
 80101fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101fe:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8010202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010204:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010206:	2b00      	cmp	r3, #0
 8010208:	d011      	beq.n	801022e <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 801020a:	4b6c      	ldr	r3, [pc, #432]	; (80103bc <tcp_slowtmr+0x584>)
 801020c:	681a      	ldr	r2, [r3, #0]
 801020e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010210:	6a1b      	ldr	r3, [r3, #32]
 8010212:	1ad2      	subs	r2, r2, r3
 8010214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010216:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 801021a:	4619      	mov	r1, r3
 801021c:	460b      	mov	r3, r1
 801021e:	005b      	lsls	r3, r3, #1
 8010220:	440b      	add	r3, r1
 8010222:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8010224:	429a      	cmp	r2, r3
 8010226:	d302      	bcc.n	801022e <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8010228:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801022a:	f000 fddd 	bl	8010de8 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 801022e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010230:	7d1b      	ldrb	r3, [r3, #20]
 8010232:	2b03      	cmp	r3, #3
 8010234:	d10b      	bne.n	801024e <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8010236:	4b61      	ldr	r3, [pc, #388]	; (80103bc <tcp_slowtmr+0x584>)
 8010238:	681a      	ldr	r2, [r3, #0]
 801023a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801023c:	6a1b      	ldr	r3, [r3, #32]
 801023e:	1ad3      	subs	r3, r2, r3
 8010240:	2b28      	cmp	r3, #40	; 0x28
 8010242:	d904      	bls.n	801024e <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8010244:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010248:	3301      	adds	r3, #1
 801024a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 801024e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010250:	7d1b      	ldrb	r3, [r3, #20]
 8010252:	2b09      	cmp	r3, #9
 8010254:	d10b      	bne.n	801026e <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8010256:	4b59      	ldr	r3, [pc, #356]	; (80103bc <tcp_slowtmr+0x584>)
 8010258:	681a      	ldr	r2, [r3, #0]
 801025a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801025c:	6a1b      	ldr	r3, [r3, #32]
 801025e:	1ad3      	subs	r3, r2, r3
 8010260:	2bf0      	cmp	r3, #240	; 0xf0
 8010262:	d904      	bls.n	801026e <tcp_slowtmr+0x436>
        ++pcb_remove;
 8010264:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010268:	3301      	adds	r3, #1
 801026a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 801026e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010272:	2b00      	cmp	r3, #0
 8010274:	d060      	beq.n	8010338 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8010276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010278:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801027c:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 801027e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010280:	f000 fbfe 	bl	8010a80 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8010284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010286:	2b00      	cmp	r3, #0
 8010288:	d010      	beq.n	80102ac <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 801028a:	4b4f      	ldr	r3, [pc, #316]	; (80103c8 <tcp_slowtmr+0x590>)
 801028c:	681b      	ldr	r3, [r3, #0]
 801028e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010290:	429a      	cmp	r2, r3
 8010292:	d106      	bne.n	80102a2 <tcp_slowtmr+0x46a>
 8010294:	4b4d      	ldr	r3, [pc, #308]	; (80103cc <tcp_slowtmr+0x594>)
 8010296:	f240 526d 	movw	r2, #1389	; 0x56d
 801029a:	494d      	ldr	r1, [pc, #308]	; (80103d0 <tcp_slowtmr+0x598>)
 801029c:	484d      	ldr	r0, [pc, #308]	; (80103d4 <tcp_slowtmr+0x59c>)
 801029e:	f00a fd97 	bl	801add0 <iprintf>
        prev->next = pcb->next;
 80102a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102a4:	68da      	ldr	r2, [r3, #12]
 80102a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102a8:	60da      	str	r2, [r3, #12]
 80102aa:	e00f      	b.n	80102cc <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80102ac:	4b46      	ldr	r3, [pc, #280]	; (80103c8 <tcp_slowtmr+0x590>)
 80102ae:	681b      	ldr	r3, [r3, #0]
 80102b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80102b2:	429a      	cmp	r2, r3
 80102b4:	d006      	beq.n	80102c4 <tcp_slowtmr+0x48c>
 80102b6:	4b45      	ldr	r3, [pc, #276]	; (80103cc <tcp_slowtmr+0x594>)
 80102b8:	f240 5271 	movw	r2, #1393	; 0x571
 80102bc:	4946      	ldr	r1, [pc, #280]	; (80103d8 <tcp_slowtmr+0x5a0>)
 80102be:	4845      	ldr	r0, [pc, #276]	; (80103d4 <tcp_slowtmr+0x59c>)
 80102c0:	f00a fd86 	bl	801add0 <iprintf>
        tcp_active_pcbs = pcb->next;
 80102c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102c6:	68db      	ldr	r3, [r3, #12]
 80102c8:	4a3f      	ldr	r2, [pc, #252]	; (80103c8 <tcp_slowtmr+0x590>)
 80102ca:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 80102cc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80102d0:	2b00      	cmp	r3, #0
 80102d2:	d013      	beq.n	80102fc <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80102d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102d6:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80102d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102da:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80102dc:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 80102de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102e0:	3304      	adds	r3, #4
 80102e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80102e4:	8ad2      	ldrh	r2, [r2, #22]
 80102e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80102e8:	8b09      	ldrh	r1, [r1, #24]
 80102ea:	9102      	str	r1, [sp, #8]
 80102ec:	9201      	str	r2, [sp, #4]
 80102ee:	9300      	str	r3, [sp, #0]
 80102f0:	462b      	mov	r3, r5
 80102f2:	4622      	mov	r2, r4
 80102f4:	4601      	mov	r1, r0
 80102f6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80102f8:	f004 f9d2 	bl	80146a0 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 80102fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102fe:	691b      	ldr	r3, [r3, #16]
 8010300:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8010302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010304:	7d1b      	ldrb	r3, [r3, #20]
 8010306:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8010308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801030a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 801030c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801030e:	68db      	ldr	r3, [r3, #12]
 8010310:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8010312:	6838      	ldr	r0, [r7, #0]
 8010314:	f7ff f9f0 	bl	800f6f8 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8010318:	4b30      	ldr	r3, [pc, #192]	; (80103dc <tcp_slowtmr+0x5a4>)
 801031a:	2200      	movs	r2, #0
 801031c:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 801031e:	68fb      	ldr	r3, [r7, #12]
 8010320:	2b00      	cmp	r3, #0
 8010322:	d004      	beq.n	801032e <tcp_slowtmr+0x4f6>
 8010324:	68fb      	ldr	r3, [r7, #12]
 8010326:	f06f 010c 	mvn.w	r1, #12
 801032a:	68b8      	ldr	r0, [r7, #8]
 801032c:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 801032e:	4b2b      	ldr	r3, [pc, #172]	; (80103dc <tcp_slowtmr+0x5a4>)
 8010330:	781b      	ldrb	r3, [r3, #0]
 8010332:	2b00      	cmp	r3, #0
 8010334:	d037      	beq.n	80103a6 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 8010336:	e590      	b.n	800fe5a <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8010338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801033a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 801033c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801033e:	68db      	ldr	r3, [r3, #12]
 8010340:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8010342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010344:	7f1b      	ldrb	r3, [r3, #28]
 8010346:	3301      	adds	r3, #1
 8010348:	b2da      	uxtb	r2, r3
 801034a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801034c:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 801034e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010350:	7f1a      	ldrb	r2, [r3, #28]
 8010352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010354:	7f5b      	ldrb	r3, [r3, #29]
 8010356:	429a      	cmp	r2, r3
 8010358:	d325      	bcc.n	80103a6 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 801035a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801035c:	2200      	movs	r2, #0
 801035e:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8010360:	4b1e      	ldr	r3, [pc, #120]	; (80103dc <tcp_slowtmr+0x5a4>)
 8010362:	2200      	movs	r2, #0
 8010364:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8010366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010368:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801036c:	2b00      	cmp	r3, #0
 801036e:	d00b      	beq.n	8010388 <tcp_slowtmr+0x550>
 8010370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010372:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010376:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010378:	6912      	ldr	r2, [r2, #16]
 801037a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801037c:	4610      	mov	r0, r2
 801037e:	4798      	blx	r3
 8010380:	4603      	mov	r3, r0
 8010382:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8010386:	e002      	b.n	801038e <tcp_slowtmr+0x556>
 8010388:	2300      	movs	r3, #0
 801038a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 801038e:	4b13      	ldr	r3, [pc, #76]	; (80103dc <tcp_slowtmr+0x5a4>)
 8010390:	781b      	ldrb	r3, [r3, #0]
 8010392:	2b00      	cmp	r3, #0
 8010394:	d000      	beq.n	8010398 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 8010396:	e560      	b.n	800fe5a <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8010398:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 801039c:	2b00      	cmp	r3, #0
 801039e:	d102      	bne.n	80103a6 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 80103a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80103a2:	f003 fb9b 	bl	8013adc <tcp_output>
  while (pcb != NULL) {
 80103a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103a8:	2b00      	cmp	r3, #0
 80103aa:	f47f ad5c 	bne.w	800fe66 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 80103ae:	2300      	movs	r3, #0
 80103b0:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 80103b2:	4b0b      	ldr	r3, [pc, #44]	; (80103e0 <tcp_slowtmr+0x5a8>)
 80103b4:	681b      	ldr	r3, [r3, #0]
 80103b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80103b8:	e067      	b.n	801048a <tcp_slowtmr+0x652>
 80103ba:	bf00      	nop
 80103bc:	20013cd8 	.word	0x20013cd8
 80103c0:	10624dd3 	.word	0x10624dd3
 80103c4:	000124f8 	.word	0x000124f8
 80103c8:	20013ce4 	.word	0x20013ce4
 80103cc:	0801e6fc 	.word	0x0801e6fc
 80103d0:	0801eb34 	.word	0x0801eb34
 80103d4:	0801e740 	.word	0x0801e740
 80103d8:	0801eb60 	.word	0x0801eb60
 80103dc:	20013cec 	.word	0x20013cec
 80103e0:	20013ce8 	.word	0x20013ce8
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80103e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103e6:	7d1b      	ldrb	r3, [r3, #20]
 80103e8:	2b0a      	cmp	r3, #10
 80103ea:	d006      	beq.n	80103fa <tcp_slowtmr+0x5c2>
 80103ec:	4b2b      	ldr	r3, [pc, #172]	; (801049c <tcp_slowtmr+0x664>)
 80103ee:	f240 52a1 	movw	r2, #1441	; 0x5a1
 80103f2:	492b      	ldr	r1, [pc, #172]	; (80104a0 <tcp_slowtmr+0x668>)
 80103f4:	482b      	ldr	r0, [pc, #172]	; (80104a4 <tcp_slowtmr+0x66c>)
 80103f6:	f00a fceb 	bl	801add0 <iprintf>
    pcb_remove = 0;
 80103fa:	2300      	movs	r3, #0
 80103fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8010400:	4b29      	ldr	r3, [pc, #164]	; (80104a8 <tcp_slowtmr+0x670>)
 8010402:	681a      	ldr	r2, [r3, #0]
 8010404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010406:	6a1b      	ldr	r3, [r3, #32]
 8010408:	1ad3      	subs	r3, r2, r3
 801040a:	2bf0      	cmp	r3, #240	; 0xf0
 801040c:	d904      	bls.n	8010418 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 801040e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010412:	3301      	adds	r3, #1
 8010414:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8010418:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801041c:	2b00      	cmp	r3, #0
 801041e:	d02f      	beq.n	8010480 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8010420:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010422:	f000 fb2d 	bl	8010a80 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8010426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010428:	2b00      	cmp	r3, #0
 801042a:	d010      	beq.n	801044e <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 801042c:	4b1f      	ldr	r3, [pc, #124]	; (80104ac <tcp_slowtmr+0x674>)
 801042e:	681b      	ldr	r3, [r3, #0]
 8010430:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010432:	429a      	cmp	r2, r3
 8010434:	d106      	bne.n	8010444 <tcp_slowtmr+0x60c>
 8010436:	4b19      	ldr	r3, [pc, #100]	; (801049c <tcp_slowtmr+0x664>)
 8010438:	f240 52af 	movw	r2, #1455	; 0x5af
 801043c:	491c      	ldr	r1, [pc, #112]	; (80104b0 <tcp_slowtmr+0x678>)
 801043e:	4819      	ldr	r0, [pc, #100]	; (80104a4 <tcp_slowtmr+0x66c>)
 8010440:	f00a fcc6 	bl	801add0 <iprintf>
        prev->next = pcb->next;
 8010444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010446:	68da      	ldr	r2, [r3, #12]
 8010448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801044a:	60da      	str	r2, [r3, #12]
 801044c:	e00f      	b.n	801046e <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 801044e:	4b17      	ldr	r3, [pc, #92]	; (80104ac <tcp_slowtmr+0x674>)
 8010450:	681b      	ldr	r3, [r3, #0]
 8010452:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010454:	429a      	cmp	r2, r3
 8010456:	d006      	beq.n	8010466 <tcp_slowtmr+0x62e>
 8010458:	4b10      	ldr	r3, [pc, #64]	; (801049c <tcp_slowtmr+0x664>)
 801045a:	f240 52b3 	movw	r2, #1459	; 0x5b3
 801045e:	4915      	ldr	r1, [pc, #84]	; (80104b4 <tcp_slowtmr+0x67c>)
 8010460:	4810      	ldr	r0, [pc, #64]	; (80104a4 <tcp_slowtmr+0x66c>)
 8010462:	f00a fcb5 	bl	801add0 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8010466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010468:	68db      	ldr	r3, [r3, #12]
 801046a:	4a10      	ldr	r2, [pc, #64]	; (80104ac <tcp_slowtmr+0x674>)
 801046c:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 801046e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010470:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8010472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010474:	68db      	ldr	r3, [r3, #12]
 8010476:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8010478:	69f8      	ldr	r0, [r7, #28]
 801047a:	f7ff f93d 	bl	800f6f8 <tcp_free>
 801047e:	e004      	b.n	801048a <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8010480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010482:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8010484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010486:	68db      	ldr	r3, [r3, #12]
 8010488:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 801048a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801048c:	2b00      	cmp	r3, #0
 801048e:	d1a9      	bne.n	80103e4 <tcp_slowtmr+0x5ac>
    }
  }
}
 8010490:	bf00      	nop
 8010492:	bf00      	nop
 8010494:	3730      	adds	r7, #48	; 0x30
 8010496:	46bd      	mov	sp, r7
 8010498:	bdb0      	pop	{r4, r5, r7, pc}
 801049a:	bf00      	nop
 801049c:	0801e6fc 	.word	0x0801e6fc
 80104a0:	0801eb8c 	.word	0x0801eb8c
 80104a4:	0801e740 	.word	0x0801e740
 80104a8:	20013cd8 	.word	0x20013cd8
 80104ac:	20013ce8 	.word	0x20013ce8
 80104b0:	0801ebbc 	.word	0x0801ebbc
 80104b4:	0801ebe4 	.word	0x0801ebe4

080104b8 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 80104b8:	b580      	push	{r7, lr}
 80104ba:	b082      	sub	sp, #8
 80104bc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 80104be:	4b2d      	ldr	r3, [pc, #180]	; (8010574 <tcp_fasttmr+0xbc>)
 80104c0:	781b      	ldrb	r3, [r3, #0]
 80104c2:	3301      	adds	r3, #1
 80104c4:	b2da      	uxtb	r2, r3
 80104c6:	4b2b      	ldr	r3, [pc, #172]	; (8010574 <tcp_fasttmr+0xbc>)
 80104c8:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 80104ca:	4b2b      	ldr	r3, [pc, #172]	; (8010578 <tcp_fasttmr+0xc0>)
 80104cc:	681b      	ldr	r3, [r3, #0]
 80104ce:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80104d0:	e048      	b.n	8010564 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	7f9a      	ldrb	r2, [r3, #30]
 80104d6:	4b27      	ldr	r3, [pc, #156]	; (8010574 <tcp_fasttmr+0xbc>)
 80104d8:	781b      	ldrb	r3, [r3, #0]
 80104da:	429a      	cmp	r2, r3
 80104dc:	d03f      	beq.n	801055e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 80104de:	4b25      	ldr	r3, [pc, #148]	; (8010574 <tcp_fasttmr+0xbc>)
 80104e0:	781a      	ldrb	r2, [r3, #0]
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	8b5b      	ldrh	r3, [r3, #26]
 80104ea:	f003 0301 	and.w	r3, r3, #1
 80104ee:	2b00      	cmp	r3, #0
 80104f0:	d010      	beq.n	8010514 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	8b5b      	ldrh	r3, [r3, #26]
 80104f6:	f043 0302 	orr.w	r3, r3, #2
 80104fa:	b29a      	uxth	r2, r3
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8010500:	6878      	ldr	r0, [r7, #4]
 8010502:	f003 faeb 	bl	8013adc <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	8b5b      	ldrh	r3, [r3, #26]
 801050a:	f023 0303 	bic.w	r3, r3, #3
 801050e:	b29a      	uxth	r2, r3
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	8b5b      	ldrh	r3, [r3, #26]
 8010518:	f003 0308 	and.w	r3, r3, #8
 801051c:	2b00      	cmp	r3, #0
 801051e:	d009      	beq.n	8010534 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	8b5b      	ldrh	r3, [r3, #26]
 8010524:	f023 0308 	bic.w	r3, r3, #8
 8010528:	b29a      	uxth	r2, r3
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 801052e:	6878      	ldr	r0, [r7, #4]
 8010530:	f7ff fa76 	bl	800fa20 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	68db      	ldr	r3, [r3, #12]
 8010538:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801053e:	2b00      	cmp	r3, #0
 8010540:	d00a      	beq.n	8010558 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8010542:	4b0e      	ldr	r3, [pc, #56]	; (801057c <tcp_fasttmr+0xc4>)
 8010544:	2200      	movs	r2, #0
 8010546:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8010548:	6878      	ldr	r0, [r7, #4]
 801054a:	f000 f819 	bl	8010580 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 801054e:	4b0b      	ldr	r3, [pc, #44]	; (801057c <tcp_fasttmr+0xc4>)
 8010550:	781b      	ldrb	r3, [r3, #0]
 8010552:	2b00      	cmp	r3, #0
 8010554:	d000      	beq.n	8010558 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8010556:	e7b8      	b.n	80104ca <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8010558:	683b      	ldr	r3, [r7, #0]
 801055a:	607b      	str	r3, [r7, #4]
 801055c:	e002      	b.n	8010564 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	68db      	ldr	r3, [r3, #12]
 8010562:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	2b00      	cmp	r3, #0
 8010568:	d1b3      	bne.n	80104d2 <tcp_fasttmr+0x1a>
    }
  }
}
 801056a:	bf00      	nop
 801056c:	bf00      	nop
 801056e:	3708      	adds	r7, #8
 8010570:	46bd      	mov	sp, r7
 8010572:	bd80      	pop	{r7, pc}
 8010574:	20013cee 	.word	0x20013cee
 8010578:	20013ce4 	.word	0x20013ce4
 801057c:	20013cec 	.word	0x20013cec

08010580 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8010580:	b590      	push	{r4, r7, lr}
 8010582:	b085      	sub	sp, #20
 8010584:	af00      	add	r7, sp, #0
 8010586:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	2b00      	cmp	r3, #0
 801058c:	d109      	bne.n	80105a2 <tcp_process_refused_data+0x22>
 801058e:	4b38      	ldr	r3, [pc, #224]	; (8010670 <tcp_process_refused_data+0xf0>)
 8010590:	f240 6209 	movw	r2, #1545	; 0x609
 8010594:	4937      	ldr	r1, [pc, #220]	; (8010674 <tcp_process_refused_data+0xf4>)
 8010596:	4838      	ldr	r0, [pc, #224]	; (8010678 <tcp_process_refused_data+0xf8>)
 8010598:	f00a fc1a 	bl	801add0 <iprintf>
 801059c:	f06f 030f 	mvn.w	r3, #15
 80105a0:	e061      	b.n	8010666 <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80105a6:	7b5b      	ldrb	r3, [r3, #13]
 80105a8:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80105ae:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	2200      	movs	r2, #0
 80105b4:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80105bc:	2b00      	cmp	r3, #0
 80105be:	d00b      	beq.n	80105d8 <tcp_process_refused_data+0x58>
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	6918      	ldr	r0, [r3, #16]
 80105ca:	2300      	movs	r3, #0
 80105cc:	68ba      	ldr	r2, [r7, #8]
 80105ce:	6879      	ldr	r1, [r7, #4]
 80105d0:	47a0      	blx	r4
 80105d2:	4603      	mov	r3, r0
 80105d4:	73fb      	strb	r3, [r7, #15]
 80105d6:	e007      	b.n	80105e8 <tcp_process_refused_data+0x68>
 80105d8:	2300      	movs	r3, #0
 80105da:	68ba      	ldr	r2, [r7, #8]
 80105dc:	6879      	ldr	r1, [r7, #4]
 80105de:	2000      	movs	r0, #0
 80105e0:	f000 f8a6 	bl	8010730 <tcp_recv_null>
 80105e4:	4603      	mov	r3, r0
 80105e6:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80105e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80105ec:	2b00      	cmp	r3, #0
 80105ee:	d12b      	bne.n	8010648 <tcp_process_refused_data+0xc8>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 80105f0:	7bbb      	ldrb	r3, [r7, #14]
 80105f2:	f003 0320 	and.w	r3, r3, #32
 80105f6:	2b00      	cmp	r3, #0
 80105f8:	d034      	beq.n	8010664 <tcp_process_refused_data+0xe4>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80105fe:	f642 52a0 	movw	r2, #11680	; 0x2da0
 8010602:	4293      	cmp	r3, r2
 8010604:	d005      	beq.n	8010612 <tcp_process_refused_data+0x92>
          pcb->rcv_wnd++;
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801060a:	3301      	adds	r3, #1
 801060c:	b29a      	uxth	r2, r3
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010618:	2b00      	cmp	r3, #0
 801061a:	d00b      	beq.n	8010634 <tcp_process_refused_data+0xb4>
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	6918      	ldr	r0, [r3, #16]
 8010626:	2300      	movs	r3, #0
 8010628:	2200      	movs	r2, #0
 801062a:	6879      	ldr	r1, [r7, #4]
 801062c:	47a0      	blx	r4
 801062e:	4603      	mov	r3, r0
 8010630:	73fb      	strb	r3, [r7, #15]
 8010632:	e001      	b.n	8010638 <tcp_process_refused_data+0xb8>
 8010634:	2300      	movs	r3, #0
 8010636:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8010638:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801063c:	f113 0f0d 	cmn.w	r3, #13
 8010640:	d110      	bne.n	8010664 <tcp_process_refused_data+0xe4>
          return ERR_ABRT;
 8010642:	f06f 030c 	mvn.w	r3, #12
 8010646:	e00e      	b.n	8010666 <tcp_process_refused_data+0xe6>
        }
      }
    } else if (err == ERR_ABRT) {
 8010648:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801064c:	f113 0f0d 	cmn.w	r3, #13
 8010650:	d102      	bne.n	8010658 <tcp_process_refused_data+0xd8>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8010652:	f06f 030c 	mvn.w	r3, #12
 8010656:	e006      	b.n	8010666 <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	68ba      	ldr	r2, [r7, #8]
 801065c:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 801065e:	f06f 0304 	mvn.w	r3, #4
 8010662:	e000      	b.n	8010666 <tcp_process_refused_data+0xe6>
    }
  }
  return ERR_OK;
 8010664:	2300      	movs	r3, #0
}
 8010666:	4618      	mov	r0, r3
 8010668:	3714      	adds	r7, #20
 801066a:	46bd      	mov	sp, r7
 801066c:	bd90      	pop	{r4, r7, pc}
 801066e:	bf00      	nop
 8010670:	0801e6fc 	.word	0x0801e6fc
 8010674:	0801ec0c 	.word	0x0801ec0c
 8010678:	0801e740 	.word	0x0801e740

0801067c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 801067c:	b580      	push	{r7, lr}
 801067e:	b084      	sub	sp, #16
 8010680:	af00      	add	r7, sp, #0
 8010682:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8010684:	e007      	b.n	8010696 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	681b      	ldr	r3, [r3, #0]
 801068a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 801068c:	6878      	ldr	r0, [r7, #4]
 801068e:	f000 f80a 	bl	80106a6 <tcp_seg_free>
    seg = next;
 8010692:	68fb      	ldr	r3, [r7, #12]
 8010694:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	2b00      	cmp	r3, #0
 801069a:	d1f4      	bne.n	8010686 <tcp_segs_free+0xa>
  }
}
 801069c:	bf00      	nop
 801069e:	bf00      	nop
 80106a0:	3710      	adds	r7, #16
 80106a2:	46bd      	mov	sp, r7
 80106a4:	bd80      	pop	{r7, pc}

080106a6 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 80106a6:	b580      	push	{r7, lr}
 80106a8:	b082      	sub	sp, #8
 80106aa:	af00      	add	r7, sp, #0
 80106ac:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	2b00      	cmp	r3, #0
 80106b2:	d00c      	beq.n	80106ce <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	685b      	ldr	r3, [r3, #4]
 80106b8:	2b00      	cmp	r3, #0
 80106ba:	d004      	beq.n	80106c6 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	685b      	ldr	r3, [r3, #4]
 80106c0:	4618      	mov	r0, r3
 80106c2:	f7fe fbc9 	bl	800ee58 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 80106c6:	6879      	ldr	r1, [r7, #4]
 80106c8:	2003      	movs	r0, #3
 80106ca:	f7fd fd23 	bl	800e114 <memp_free>
  }
}
 80106ce:	bf00      	nop
 80106d0:	3708      	adds	r7, #8
 80106d2:	46bd      	mov	sp, r7
 80106d4:	bd80      	pop	{r7, pc}
	...

080106d8 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 80106d8:	b580      	push	{r7, lr}
 80106da:	b084      	sub	sp, #16
 80106dc:	af00      	add	r7, sp, #0
 80106de:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	2b00      	cmp	r3, #0
 80106e4:	d106      	bne.n	80106f4 <tcp_seg_copy+0x1c>
 80106e6:	4b0f      	ldr	r3, [pc, #60]	; (8010724 <tcp_seg_copy+0x4c>)
 80106e8:	f240 6282 	movw	r2, #1666	; 0x682
 80106ec:	490e      	ldr	r1, [pc, #56]	; (8010728 <tcp_seg_copy+0x50>)
 80106ee:	480f      	ldr	r0, [pc, #60]	; (801072c <tcp_seg_copy+0x54>)
 80106f0:	f00a fb6e 	bl	801add0 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 80106f4:	2003      	movs	r0, #3
 80106f6:	f7fd fcbb 	bl	800e070 <memp_malloc>
 80106fa:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 80106fc:	68fb      	ldr	r3, [r7, #12]
 80106fe:	2b00      	cmp	r3, #0
 8010700:	d101      	bne.n	8010706 <tcp_seg_copy+0x2e>
    return NULL;
 8010702:	2300      	movs	r3, #0
 8010704:	e00a      	b.n	801071c <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8010706:	2214      	movs	r2, #20
 8010708:	6879      	ldr	r1, [r7, #4]
 801070a:	68f8      	ldr	r0, [r7, #12]
 801070c:	f009 fdea 	bl	801a2e4 <memcpy>
  pbuf_ref(cseg->p);
 8010710:	68fb      	ldr	r3, [r7, #12]
 8010712:	685b      	ldr	r3, [r3, #4]
 8010714:	4618      	mov	r0, r3
 8010716:	f7fe fc45 	bl	800efa4 <pbuf_ref>
  return cseg;
 801071a:	68fb      	ldr	r3, [r7, #12]
}
 801071c:	4618      	mov	r0, r3
 801071e:	3710      	adds	r7, #16
 8010720:	46bd      	mov	sp, r7
 8010722:	bd80      	pop	{r7, pc}
 8010724:	0801e6fc 	.word	0x0801e6fc
 8010728:	0801ec50 	.word	0x0801ec50
 801072c:	0801e740 	.word	0x0801e740

08010730 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8010730:	b580      	push	{r7, lr}
 8010732:	b084      	sub	sp, #16
 8010734:	af00      	add	r7, sp, #0
 8010736:	60f8      	str	r0, [r7, #12]
 8010738:	60b9      	str	r1, [r7, #8]
 801073a:	607a      	str	r2, [r7, #4]
 801073c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 801073e:	68bb      	ldr	r3, [r7, #8]
 8010740:	2b00      	cmp	r3, #0
 8010742:	d109      	bne.n	8010758 <tcp_recv_null+0x28>
 8010744:	4b12      	ldr	r3, [pc, #72]	; (8010790 <tcp_recv_null+0x60>)
 8010746:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801074a:	4912      	ldr	r1, [pc, #72]	; (8010794 <tcp_recv_null+0x64>)
 801074c:	4812      	ldr	r0, [pc, #72]	; (8010798 <tcp_recv_null+0x68>)
 801074e:	f00a fb3f 	bl	801add0 <iprintf>
 8010752:	f06f 030f 	mvn.w	r3, #15
 8010756:	e016      	b.n	8010786 <tcp_recv_null+0x56>

  if (p != NULL) {
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	2b00      	cmp	r3, #0
 801075c:	d009      	beq.n	8010772 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	891b      	ldrh	r3, [r3, #8]
 8010762:	4619      	mov	r1, r3
 8010764:	68b8      	ldr	r0, [r7, #8]
 8010766:	f7ff fb15 	bl	800fd94 <tcp_recved>
    pbuf_free(p);
 801076a:	6878      	ldr	r0, [r7, #4]
 801076c:	f7fe fb74 	bl	800ee58 <pbuf_free>
 8010770:	e008      	b.n	8010784 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8010772:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010776:	2b00      	cmp	r3, #0
 8010778:	d104      	bne.n	8010784 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 801077a:	68b8      	ldr	r0, [r7, #8]
 801077c:	f7ff f9ba 	bl	800faf4 <tcp_close>
 8010780:	4603      	mov	r3, r0
 8010782:	e000      	b.n	8010786 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8010784:	2300      	movs	r3, #0
}
 8010786:	4618      	mov	r0, r3
 8010788:	3710      	adds	r7, #16
 801078a:	46bd      	mov	sp, r7
 801078c:	bd80      	pop	{r7, pc}
 801078e:	bf00      	nop
 8010790:	0801e6fc 	.word	0x0801e6fc
 8010794:	0801ec6c 	.word	0x0801ec6c
 8010798:	0801e740 	.word	0x0801e740

0801079c <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 801079c:	b580      	push	{r7, lr}
 801079e:	b086      	sub	sp, #24
 80107a0:	af00      	add	r7, sp, #0
 80107a2:	4603      	mov	r3, r0
 80107a4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 80107a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80107aa:	2b00      	cmp	r3, #0
 80107ac:	db01      	blt.n	80107b2 <tcp_kill_prio+0x16>
 80107ae:	79fb      	ldrb	r3, [r7, #7]
 80107b0:	e000      	b.n	80107b4 <tcp_kill_prio+0x18>
 80107b2:	237f      	movs	r3, #127	; 0x7f
 80107b4:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 80107b6:	7afb      	ldrb	r3, [r7, #11]
 80107b8:	2b00      	cmp	r3, #0
 80107ba:	d034      	beq.n	8010826 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 80107bc:	7afb      	ldrb	r3, [r7, #11]
 80107be:	3b01      	subs	r3, #1
 80107c0:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 80107c2:	2300      	movs	r3, #0
 80107c4:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80107c6:	2300      	movs	r3, #0
 80107c8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80107ca:	4b19      	ldr	r3, [pc, #100]	; (8010830 <tcp_kill_prio+0x94>)
 80107cc:	681b      	ldr	r3, [r3, #0]
 80107ce:	617b      	str	r3, [r7, #20]
 80107d0:	e01f      	b.n	8010812 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 80107d2:	697b      	ldr	r3, [r7, #20]
 80107d4:	7d5b      	ldrb	r3, [r3, #21]
 80107d6:	7afa      	ldrb	r2, [r7, #11]
 80107d8:	429a      	cmp	r2, r3
 80107da:	d80c      	bhi.n	80107f6 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80107dc:	697b      	ldr	r3, [r7, #20]
 80107de:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 80107e0:	7afa      	ldrb	r2, [r7, #11]
 80107e2:	429a      	cmp	r2, r3
 80107e4:	d112      	bne.n	801080c <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80107e6:	4b13      	ldr	r3, [pc, #76]	; (8010834 <tcp_kill_prio+0x98>)
 80107e8:	681a      	ldr	r2, [r3, #0]
 80107ea:	697b      	ldr	r3, [r7, #20]
 80107ec:	6a1b      	ldr	r3, [r3, #32]
 80107ee:	1ad3      	subs	r3, r2, r3
 80107f0:	68fa      	ldr	r2, [r7, #12]
 80107f2:	429a      	cmp	r2, r3
 80107f4:	d80a      	bhi.n	801080c <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 80107f6:	4b0f      	ldr	r3, [pc, #60]	; (8010834 <tcp_kill_prio+0x98>)
 80107f8:	681a      	ldr	r2, [r3, #0]
 80107fa:	697b      	ldr	r3, [r7, #20]
 80107fc:	6a1b      	ldr	r3, [r3, #32]
 80107fe:	1ad3      	subs	r3, r2, r3
 8010800:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8010802:	697b      	ldr	r3, [r7, #20]
 8010804:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8010806:	697b      	ldr	r3, [r7, #20]
 8010808:	7d5b      	ldrb	r3, [r3, #21]
 801080a:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801080c:	697b      	ldr	r3, [r7, #20]
 801080e:	68db      	ldr	r3, [r3, #12]
 8010810:	617b      	str	r3, [r7, #20]
 8010812:	697b      	ldr	r3, [r7, #20]
 8010814:	2b00      	cmp	r3, #0
 8010816:	d1dc      	bne.n	80107d2 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8010818:	693b      	ldr	r3, [r7, #16]
 801081a:	2b00      	cmp	r3, #0
 801081c:	d004      	beq.n	8010828 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 801081e:	6938      	ldr	r0, [r7, #16]
 8010820:	f7ff fa52 	bl	800fcc8 <tcp_abort>
 8010824:	e000      	b.n	8010828 <tcp_kill_prio+0x8c>
    return;
 8010826:	bf00      	nop
  }
}
 8010828:	3718      	adds	r7, #24
 801082a:	46bd      	mov	sp, r7
 801082c:	bd80      	pop	{r7, pc}
 801082e:	bf00      	nop
 8010830:	20013ce4 	.word	0x20013ce4
 8010834:	20013cd8 	.word	0x20013cd8

08010838 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8010838:	b580      	push	{r7, lr}
 801083a:	b086      	sub	sp, #24
 801083c:	af00      	add	r7, sp, #0
 801083e:	4603      	mov	r3, r0
 8010840:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8010842:	79fb      	ldrb	r3, [r7, #7]
 8010844:	2b08      	cmp	r3, #8
 8010846:	d009      	beq.n	801085c <tcp_kill_state+0x24>
 8010848:	79fb      	ldrb	r3, [r7, #7]
 801084a:	2b09      	cmp	r3, #9
 801084c:	d006      	beq.n	801085c <tcp_kill_state+0x24>
 801084e:	4b1a      	ldr	r3, [pc, #104]	; (80108b8 <tcp_kill_state+0x80>)
 8010850:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8010854:	4919      	ldr	r1, [pc, #100]	; (80108bc <tcp_kill_state+0x84>)
 8010856:	481a      	ldr	r0, [pc, #104]	; (80108c0 <tcp_kill_state+0x88>)
 8010858:	f00a faba 	bl	801add0 <iprintf>

  inactivity = 0;
 801085c:	2300      	movs	r3, #0
 801085e:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8010860:	2300      	movs	r3, #0
 8010862:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010864:	4b17      	ldr	r3, [pc, #92]	; (80108c4 <tcp_kill_state+0x8c>)
 8010866:	681b      	ldr	r3, [r3, #0]
 8010868:	617b      	str	r3, [r7, #20]
 801086a:	e017      	b.n	801089c <tcp_kill_state+0x64>
    if (pcb->state == state) {
 801086c:	697b      	ldr	r3, [r7, #20]
 801086e:	7d1b      	ldrb	r3, [r3, #20]
 8010870:	79fa      	ldrb	r2, [r7, #7]
 8010872:	429a      	cmp	r2, r3
 8010874:	d10f      	bne.n	8010896 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8010876:	4b14      	ldr	r3, [pc, #80]	; (80108c8 <tcp_kill_state+0x90>)
 8010878:	681a      	ldr	r2, [r3, #0]
 801087a:	697b      	ldr	r3, [r7, #20]
 801087c:	6a1b      	ldr	r3, [r3, #32]
 801087e:	1ad3      	subs	r3, r2, r3
 8010880:	68fa      	ldr	r2, [r7, #12]
 8010882:	429a      	cmp	r2, r3
 8010884:	d807      	bhi.n	8010896 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8010886:	4b10      	ldr	r3, [pc, #64]	; (80108c8 <tcp_kill_state+0x90>)
 8010888:	681a      	ldr	r2, [r3, #0]
 801088a:	697b      	ldr	r3, [r7, #20]
 801088c:	6a1b      	ldr	r3, [r3, #32]
 801088e:	1ad3      	subs	r3, r2, r3
 8010890:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8010892:	697b      	ldr	r3, [r7, #20]
 8010894:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010896:	697b      	ldr	r3, [r7, #20]
 8010898:	68db      	ldr	r3, [r3, #12]
 801089a:	617b      	str	r3, [r7, #20]
 801089c:	697b      	ldr	r3, [r7, #20]
 801089e:	2b00      	cmp	r3, #0
 80108a0:	d1e4      	bne.n	801086c <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 80108a2:	693b      	ldr	r3, [r7, #16]
 80108a4:	2b00      	cmp	r3, #0
 80108a6:	d003      	beq.n	80108b0 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 80108a8:	2100      	movs	r1, #0
 80108aa:	6938      	ldr	r0, [r7, #16]
 80108ac:	f7ff f94e 	bl	800fb4c <tcp_abandon>
  }
}
 80108b0:	bf00      	nop
 80108b2:	3718      	adds	r7, #24
 80108b4:	46bd      	mov	sp, r7
 80108b6:	bd80      	pop	{r7, pc}
 80108b8:	0801e6fc 	.word	0x0801e6fc
 80108bc:	0801ec88 	.word	0x0801ec88
 80108c0:	0801e740 	.word	0x0801e740
 80108c4:	20013ce4 	.word	0x20013ce4
 80108c8:	20013cd8 	.word	0x20013cd8

080108cc <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 80108cc:	b580      	push	{r7, lr}
 80108ce:	b084      	sub	sp, #16
 80108d0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 80108d2:	2300      	movs	r3, #0
 80108d4:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 80108d6:	2300      	movs	r3, #0
 80108d8:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80108da:	4b12      	ldr	r3, [pc, #72]	; (8010924 <tcp_kill_timewait+0x58>)
 80108dc:	681b      	ldr	r3, [r3, #0]
 80108de:	60fb      	str	r3, [r7, #12]
 80108e0:	e012      	b.n	8010908 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80108e2:	4b11      	ldr	r3, [pc, #68]	; (8010928 <tcp_kill_timewait+0x5c>)
 80108e4:	681a      	ldr	r2, [r3, #0]
 80108e6:	68fb      	ldr	r3, [r7, #12]
 80108e8:	6a1b      	ldr	r3, [r3, #32]
 80108ea:	1ad3      	subs	r3, r2, r3
 80108ec:	687a      	ldr	r2, [r7, #4]
 80108ee:	429a      	cmp	r2, r3
 80108f0:	d807      	bhi.n	8010902 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 80108f2:	4b0d      	ldr	r3, [pc, #52]	; (8010928 <tcp_kill_timewait+0x5c>)
 80108f4:	681a      	ldr	r2, [r3, #0]
 80108f6:	68fb      	ldr	r3, [r7, #12]
 80108f8:	6a1b      	ldr	r3, [r3, #32]
 80108fa:	1ad3      	subs	r3, r2, r3
 80108fc:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 80108fe:	68fb      	ldr	r3, [r7, #12]
 8010900:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010902:	68fb      	ldr	r3, [r7, #12]
 8010904:	68db      	ldr	r3, [r3, #12]
 8010906:	60fb      	str	r3, [r7, #12]
 8010908:	68fb      	ldr	r3, [r7, #12]
 801090a:	2b00      	cmp	r3, #0
 801090c:	d1e9      	bne.n	80108e2 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 801090e:	68bb      	ldr	r3, [r7, #8]
 8010910:	2b00      	cmp	r3, #0
 8010912:	d002      	beq.n	801091a <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8010914:	68b8      	ldr	r0, [r7, #8]
 8010916:	f7ff f9d7 	bl	800fcc8 <tcp_abort>
  }
}
 801091a:	bf00      	nop
 801091c:	3710      	adds	r7, #16
 801091e:	46bd      	mov	sp, r7
 8010920:	bd80      	pop	{r7, pc}
 8010922:	bf00      	nop
 8010924:	20013ce8 	.word	0x20013ce8
 8010928:	20013cd8 	.word	0x20013cd8

0801092c <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 801092c:	b580      	push	{r7, lr}
 801092e:	b082      	sub	sp, #8
 8010930:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8010932:	4b10      	ldr	r3, [pc, #64]	; (8010974 <tcp_handle_closepend+0x48>)
 8010934:	681b      	ldr	r3, [r3, #0]
 8010936:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8010938:	e014      	b.n	8010964 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	68db      	ldr	r3, [r3, #12]
 801093e:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	8b5b      	ldrh	r3, [r3, #26]
 8010944:	f003 0308 	and.w	r3, r3, #8
 8010948:	2b00      	cmp	r3, #0
 801094a:	d009      	beq.n	8010960 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	8b5b      	ldrh	r3, [r3, #26]
 8010950:	f023 0308 	bic.w	r3, r3, #8
 8010954:	b29a      	uxth	r2, r3
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 801095a:	6878      	ldr	r0, [r7, #4]
 801095c:	f7ff f860 	bl	800fa20 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8010960:	683b      	ldr	r3, [r7, #0]
 8010962:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8010964:	687b      	ldr	r3, [r7, #4]
 8010966:	2b00      	cmp	r3, #0
 8010968:	d1e7      	bne.n	801093a <tcp_handle_closepend+0xe>
  }
}
 801096a:	bf00      	nop
 801096c:	bf00      	nop
 801096e:	3708      	adds	r7, #8
 8010970:	46bd      	mov	sp, r7
 8010972:	bd80      	pop	{r7, pc}
 8010974:	20013ce4 	.word	0x20013ce4

08010978 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8010978:	b580      	push	{r7, lr}
 801097a:	b084      	sub	sp, #16
 801097c:	af00      	add	r7, sp, #0
 801097e:	4603      	mov	r3, r0
 8010980:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010982:	2001      	movs	r0, #1
 8010984:	f7fd fb74 	bl	800e070 <memp_malloc>
 8010988:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 801098a:	68fb      	ldr	r3, [r7, #12]
 801098c:	2b00      	cmp	r3, #0
 801098e:	d126      	bne.n	80109de <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8010990:	f7ff ffcc 	bl	801092c <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8010994:	f7ff ff9a 	bl	80108cc <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010998:	2001      	movs	r0, #1
 801099a:	f7fd fb69 	bl	800e070 <memp_malloc>
 801099e:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 80109a0:	68fb      	ldr	r3, [r7, #12]
 80109a2:	2b00      	cmp	r3, #0
 80109a4:	d11b      	bne.n	80109de <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 80109a6:	2009      	movs	r0, #9
 80109a8:	f7ff ff46 	bl	8010838 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80109ac:	2001      	movs	r0, #1
 80109ae:	f7fd fb5f 	bl	800e070 <memp_malloc>
 80109b2:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 80109b4:	68fb      	ldr	r3, [r7, #12]
 80109b6:	2b00      	cmp	r3, #0
 80109b8:	d111      	bne.n	80109de <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 80109ba:	2008      	movs	r0, #8
 80109bc:	f7ff ff3c 	bl	8010838 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80109c0:	2001      	movs	r0, #1
 80109c2:	f7fd fb55 	bl	800e070 <memp_malloc>
 80109c6:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 80109c8:	68fb      	ldr	r3, [r7, #12]
 80109ca:	2b00      	cmp	r3, #0
 80109cc:	d107      	bne.n	80109de <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 80109ce:	79fb      	ldrb	r3, [r7, #7]
 80109d0:	4618      	mov	r0, r3
 80109d2:	f7ff fee3 	bl	801079c <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80109d6:	2001      	movs	r0, #1
 80109d8:	f7fd fb4a 	bl	800e070 <memp_malloc>
 80109dc:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 80109de:	68fb      	ldr	r3, [r7, #12]
 80109e0:	2b00      	cmp	r3, #0
 80109e2:	d03f      	beq.n	8010a64 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 80109e4:	229c      	movs	r2, #156	; 0x9c
 80109e6:	2100      	movs	r1, #0
 80109e8:	68f8      	ldr	r0, [r7, #12]
 80109ea:	f009 fc89 	bl	801a300 <memset>
    pcb->prio = prio;
 80109ee:	68fb      	ldr	r3, [r7, #12]
 80109f0:	79fa      	ldrb	r2, [r7, #7]
 80109f2:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 80109f4:	68fb      	ldr	r3, [r7, #12]
 80109f6:	f642 52a0 	movw	r2, #11680	; 0x2da0
 80109fa:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80109fe:	68fb      	ldr	r3, [r7, #12]
 8010a00:	f642 52a0 	movw	r2, #11680	; 0x2da0
 8010a04:	855a      	strh	r2, [r3, #42]	; 0x2a
 8010a06:	68fb      	ldr	r3, [r7, #12]
 8010a08:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8010a0a:	68fb      	ldr	r3, [r7, #12]
 8010a0c:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8010a0e:	68fb      	ldr	r3, [r7, #12]
 8010a10:	22ff      	movs	r2, #255	; 0xff
 8010a12:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8010a14:	68fb      	ldr	r3, [r7, #12]
 8010a16:	f44f 7206 	mov.w	r2, #536	; 0x218
 8010a1a:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8010a1c:	68fb      	ldr	r3, [r7, #12]
 8010a1e:	2206      	movs	r2, #6
 8010a20:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8010a24:	68fb      	ldr	r3, [r7, #12]
 8010a26:	2206      	movs	r2, #6
 8010a28:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8010a2a:	68fb      	ldr	r3, [r7, #12]
 8010a2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010a30:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8010a32:	68fb      	ldr	r3, [r7, #12]
 8010a34:	2201      	movs	r2, #1
 8010a36:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8010a3a:	4b0d      	ldr	r3, [pc, #52]	; (8010a70 <tcp_alloc+0xf8>)
 8010a3c:	681a      	ldr	r2, [r3, #0]
 8010a3e:	68fb      	ldr	r3, [r7, #12]
 8010a40:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8010a42:	4b0c      	ldr	r3, [pc, #48]	; (8010a74 <tcp_alloc+0xfc>)
 8010a44:	781a      	ldrb	r2, [r3, #0]
 8010a46:	68fb      	ldr	r3, [r7, #12]
 8010a48:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8010a4a:	68fb      	ldr	r3, [r7, #12]
 8010a4c:	f642 52a0 	movw	r2, #11680	; 0x2da0
 8010a50:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8010a54:	68fb      	ldr	r3, [r7, #12]
 8010a56:	4a08      	ldr	r2, [pc, #32]	; (8010a78 <tcp_alloc+0x100>)
 8010a58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8010a5c:	68fb      	ldr	r3, [r7, #12]
 8010a5e:	4a07      	ldr	r2, [pc, #28]	; (8010a7c <tcp_alloc+0x104>)
 8010a60:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8010a64:	68fb      	ldr	r3, [r7, #12]
}
 8010a66:	4618      	mov	r0, r3
 8010a68:	3710      	adds	r7, #16
 8010a6a:	46bd      	mov	sp, r7
 8010a6c:	bd80      	pop	{r7, pc}
 8010a6e:	bf00      	nop
 8010a70:	20013cd8 	.word	0x20013cd8
 8010a74:	20013cee 	.word	0x20013cee
 8010a78:	08010731 	.word	0x08010731
 8010a7c:	006ddd00 	.word	0x006ddd00

08010a80 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8010a80:	b580      	push	{r7, lr}
 8010a82:	b082      	sub	sp, #8
 8010a84:	af00      	add	r7, sp, #0
 8010a86:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8010a88:	687b      	ldr	r3, [r7, #4]
 8010a8a:	2b00      	cmp	r3, #0
 8010a8c:	d107      	bne.n	8010a9e <tcp_pcb_purge+0x1e>
 8010a8e:	4b21      	ldr	r3, [pc, #132]	; (8010b14 <tcp_pcb_purge+0x94>)
 8010a90:	f640 0251 	movw	r2, #2129	; 0x851
 8010a94:	4920      	ldr	r1, [pc, #128]	; (8010b18 <tcp_pcb_purge+0x98>)
 8010a96:	4821      	ldr	r0, [pc, #132]	; (8010b1c <tcp_pcb_purge+0x9c>)
 8010a98:	f00a f99a 	bl	801add0 <iprintf>
 8010a9c:	e037      	b.n	8010b0e <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	7d1b      	ldrb	r3, [r3, #20]
 8010aa2:	2b00      	cmp	r3, #0
 8010aa4:	d033      	beq.n	8010b0e <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8010aa6:	687b      	ldr	r3, [r7, #4]
 8010aa8:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8010aaa:	2b0a      	cmp	r3, #10
 8010aac:	d02f      	beq.n	8010b0e <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8010aae:	687b      	ldr	r3, [r7, #4]
 8010ab0:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8010ab2:	2b01      	cmp	r3, #1
 8010ab4:	d02b      	beq.n	8010b0e <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010aba:	2b00      	cmp	r3, #0
 8010abc:	d007      	beq.n	8010ace <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010ac2:	4618      	mov	r0, r3
 8010ac4:	f7fe f9c8 	bl	800ee58 <pbuf_free>
      pcb->refused_data = NULL;
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	2200      	movs	r2, #0
 8010acc:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010ad2:	2b00      	cmp	r3, #0
 8010ad4:	d002      	beq.n	8010adc <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8010ad6:	6878      	ldr	r0, [r7, #4]
 8010ad8:	f000 f986 	bl	8010de8 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010ae2:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010ae8:	4618      	mov	r0, r3
 8010aea:	f7ff fdc7 	bl	801067c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8010aee:	687b      	ldr	r3, [r7, #4]
 8010af0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010af2:	4618      	mov	r0, r3
 8010af4:	f7ff fdc2 	bl	801067c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	2200      	movs	r2, #0
 8010afc:	66da      	str	r2, [r3, #108]	; 0x6c
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	2200      	movs	r2, #0
 8010b0a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8010b0e:	3708      	adds	r7, #8
 8010b10:	46bd      	mov	sp, r7
 8010b12:	bd80      	pop	{r7, pc}
 8010b14:	0801e6fc 	.word	0x0801e6fc
 8010b18:	0801ed48 	.word	0x0801ed48
 8010b1c:	0801e740 	.word	0x0801e740

08010b20 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8010b20:	b580      	push	{r7, lr}
 8010b22:	b084      	sub	sp, #16
 8010b24:	af00      	add	r7, sp, #0
 8010b26:	6078      	str	r0, [r7, #4]
 8010b28:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8010b2a:	683b      	ldr	r3, [r7, #0]
 8010b2c:	2b00      	cmp	r3, #0
 8010b2e:	d106      	bne.n	8010b3e <tcp_pcb_remove+0x1e>
 8010b30:	4b3e      	ldr	r3, [pc, #248]	; (8010c2c <tcp_pcb_remove+0x10c>)
 8010b32:	f640 0283 	movw	r2, #2179	; 0x883
 8010b36:	493e      	ldr	r1, [pc, #248]	; (8010c30 <tcp_pcb_remove+0x110>)
 8010b38:	483e      	ldr	r0, [pc, #248]	; (8010c34 <tcp_pcb_remove+0x114>)
 8010b3a:	f00a f949 	bl	801add0 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	2b00      	cmp	r3, #0
 8010b42:	d106      	bne.n	8010b52 <tcp_pcb_remove+0x32>
 8010b44:	4b39      	ldr	r3, [pc, #228]	; (8010c2c <tcp_pcb_remove+0x10c>)
 8010b46:	f640 0284 	movw	r2, #2180	; 0x884
 8010b4a:	493b      	ldr	r1, [pc, #236]	; (8010c38 <tcp_pcb_remove+0x118>)
 8010b4c:	4839      	ldr	r0, [pc, #228]	; (8010c34 <tcp_pcb_remove+0x114>)
 8010b4e:	f00a f93f 	bl	801add0 <iprintf>

  TCP_RMV(pcblist, pcb);
 8010b52:	687b      	ldr	r3, [r7, #4]
 8010b54:	681b      	ldr	r3, [r3, #0]
 8010b56:	683a      	ldr	r2, [r7, #0]
 8010b58:	429a      	cmp	r2, r3
 8010b5a:	d105      	bne.n	8010b68 <tcp_pcb_remove+0x48>
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	681b      	ldr	r3, [r3, #0]
 8010b60:	68da      	ldr	r2, [r3, #12]
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	601a      	str	r2, [r3, #0]
 8010b66:	e013      	b.n	8010b90 <tcp_pcb_remove+0x70>
 8010b68:	687b      	ldr	r3, [r7, #4]
 8010b6a:	681b      	ldr	r3, [r3, #0]
 8010b6c:	60fb      	str	r3, [r7, #12]
 8010b6e:	e00c      	b.n	8010b8a <tcp_pcb_remove+0x6a>
 8010b70:	68fb      	ldr	r3, [r7, #12]
 8010b72:	68db      	ldr	r3, [r3, #12]
 8010b74:	683a      	ldr	r2, [r7, #0]
 8010b76:	429a      	cmp	r2, r3
 8010b78:	d104      	bne.n	8010b84 <tcp_pcb_remove+0x64>
 8010b7a:	683b      	ldr	r3, [r7, #0]
 8010b7c:	68da      	ldr	r2, [r3, #12]
 8010b7e:	68fb      	ldr	r3, [r7, #12]
 8010b80:	60da      	str	r2, [r3, #12]
 8010b82:	e005      	b.n	8010b90 <tcp_pcb_remove+0x70>
 8010b84:	68fb      	ldr	r3, [r7, #12]
 8010b86:	68db      	ldr	r3, [r3, #12]
 8010b88:	60fb      	str	r3, [r7, #12]
 8010b8a:	68fb      	ldr	r3, [r7, #12]
 8010b8c:	2b00      	cmp	r3, #0
 8010b8e:	d1ef      	bne.n	8010b70 <tcp_pcb_remove+0x50>
 8010b90:	683b      	ldr	r3, [r7, #0]
 8010b92:	2200      	movs	r2, #0
 8010b94:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8010b96:	6838      	ldr	r0, [r7, #0]
 8010b98:	f7ff ff72 	bl	8010a80 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8010b9c:	683b      	ldr	r3, [r7, #0]
 8010b9e:	7d1b      	ldrb	r3, [r3, #20]
 8010ba0:	2b0a      	cmp	r3, #10
 8010ba2:	d013      	beq.n	8010bcc <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8010ba4:	683b      	ldr	r3, [r7, #0]
 8010ba6:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8010ba8:	2b01      	cmp	r3, #1
 8010baa:	d00f      	beq.n	8010bcc <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8010bac:	683b      	ldr	r3, [r7, #0]
 8010bae:	8b5b      	ldrh	r3, [r3, #26]
 8010bb0:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8010bb4:	2b00      	cmp	r3, #0
 8010bb6:	d009      	beq.n	8010bcc <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8010bb8:	683b      	ldr	r3, [r7, #0]
 8010bba:	8b5b      	ldrh	r3, [r3, #26]
 8010bbc:	f043 0302 	orr.w	r3, r3, #2
 8010bc0:	b29a      	uxth	r2, r3
 8010bc2:	683b      	ldr	r3, [r7, #0]
 8010bc4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8010bc6:	6838      	ldr	r0, [r7, #0]
 8010bc8:	f002 ff88 	bl	8013adc <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8010bcc:	683b      	ldr	r3, [r7, #0]
 8010bce:	7d1b      	ldrb	r3, [r3, #20]
 8010bd0:	2b01      	cmp	r3, #1
 8010bd2:	d020      	beq.n	8010c16 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8010bd4:	683b      	ldr	r3, [r7, #0]
 8010bd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010bd8:	2b00      	cmp	r3, #0
 8010bda:	d006      	beq.n	8010bea <tcp_pcb_remove+0xca>
 8010bdc:	4b13      	ldr	r3, [pc, #76]	; (8010c2c <tcp_pcb_remove+0x10c>)
 8010bde:	f640 0293 	movw	r2, #2195	; 0x893
 8010be2:	4916      	ldr	r1, [pc, #88]	; (8010c3c <tcp_pcb_remove+0x11c>)
 8010be4:	4813      	ldr	r0, [pc, #76]	; (8010c34 <tcp_pcb_remove+0x114>)
 8010be6:	f00a f8f3 	bl	801add0 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8010bea:	683b      	ldr	r3, [r7, #0]
 8010bec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010bee:	2b00      	cmp	r3, #0
 8010bf0:	d006      	beq.n	8010c00 <tcp_pcb_remove+0xe0>
 8010bf2:	4b0e      	ldr	r3, [pc, #56]	; (8010c2c <tcp_pcb_remove+0x10c>)
 8010bf4:	f640 0294 	movw	r2, #2196	; 0x894
 8010bf8:	4911      	ldr	r1, [pc, #68]	; (8010c40 <tcp_pcb_remove+0x120>)
 8010bfa:	480e      	ldr	r0, [pc, #56]	; (8010c34 <tcp_pcb_remove+0x114>)
 8010bfc:	f00a f8e8 	bl	801add0 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8010c00:	683b      	ldr	r3, [r7, #0]
 8010c02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010c04:	2b00      	cmp	r3, #0
 8010c06:	d006      	beq.n	8010c16 <tcp_pcb_remove+0xf6>
 8010c08:	4b08      	ldr	r3, [pc, #32]	; (8010c2c <tcp_pcb_remove+0x10c>)
 8010c0a:	f640 0296 	movw	r2, #2198	; 0x896
 8010c0e:	490d      	ldr	r1, [pc, #52]	; (8010c44 <tcp_pcb_remove+0x124>)
 8010c10:	4808      	ldr	r0, [pc, #32]	; (8010c34 <tcp_pcb_remove+0x114>)
 8010c12:	f00a f8dd 	bl	801add0 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8010c16:	683b      	ldr	r3, [r7, #0]
 8010c18:	2200      	movs	r2, #0
 8010c1a:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8010c1c:	683b      	ldr	r3, [r7, #0]
 8010c1e:	2200      	movs	r2, #0
 8010c20:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8010c22:	bf00      	nop
 8010c24:	3710      	adds	r7, #16
 8010c26:	46bd      	mov	sp, r7
 8010c28:	bd80      	pop	{r7, pc}
 8010c2a:	bf00      	nop
 8010c2c:	0801e6fc 	.word	0x0801e6fc
 8010c30:	0801ed64 	.word	0x0801ed64
 8010c34:	0801e740 	.word	0x0801e740
 8010c38:	0801ed80 	.word	0x0801ed80
 8010c3c:	0801eda0 	.word	0x0801eda0
 8010c40:	0801edb8 	.word	0x0801edb8
 8010c44:	0801edd4 	.word	0x0801edd4

08010c48 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8010c48:	b580      	push	{r7, lr}
 8010c4a:	b082      	sub	sp, #8
 8010c4c:	af00      	add	r7, sp, #0
 8010c4e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	2b00      	cmp	r3, #0
 8010c54:	d106      	bne.n	8010c64 <tcp_next_iss+0x1c>
 8010c56:	4b0a      	ldr	r3, [pc, #40]	; (8010c80 <tcp_next_iss+0x38>)
 8010c58:	f640 02af 	movw	r2, #2223	; 0x8af
 8010c5c:	4909      	ldr	r1, [pc, #36]	; (8010c84 <tcp_next_iss+0x3c>)
 8010c5e:	480a      	ldr	r0, [pc, #40]	; (8010c88 <tcp_next_iss+0x40>)
 8010c60:	f00a f8b6 	bl	801add0 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8010c64:	4b09      	ldr	r3, [pc, #36]	; (8010c8c <tcp_next_iss+0x44>)
 8010c66:	681a      	ldr	r2, [r3, #0]
 8010c68:	4b09      	ldr	r3, [pc, #36]	; (8010c90 <tcp_next_iss+0x48>)
 8010c6a:	681b      	ldr	r3, [r3, #0]
 8010c6c:	4413      	add	r3, r2
 8010c6e:	4a07      	ldr	r2, [pc, #28]	; (8010c8c <tcp_next_iss+0x44>)
 8010c70:	6013      	str	r3, [r2, #0]
  return iss;
 8010c72:	4b06      	ldr	r3, [pc, #24]	; (8010c8c <tcp_next_iss+0x44>)
 8010c74:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8010c76:	4618      	mov	r0, r3
 8010c78:	3708      	adds	r7, #8
 8010c7a:	46bd      	mov	sp, r7
 8010c7c:	bd80      	pop	{r7, pc}
 8010c7e:	bf00      	nop
 8010c80:	0801e6fc 	.word	0x0801e6fc
 8010c84:	0801edec 	.word	0x0801edec
 8010c88:	0801e740 	.word	0x0801e740
 8010c8c:	200000bc 	.word	0x200000bc
 8010c90:	20013cd8 	.word	0x20013cd8

08010c94 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8010c94:	b580      	push	{r7, lr}
 8010c96:	b086      	sub	sp, #24
 8010c98:	af00      	add	r7, sp, #0
 8010c9a:	4603      	mov	r3, r0
 8010c9c:	60b9      	str	r1, [r7, #8]
 8010c9e:	607a      	str	r2, [r7, #4]
 8010ca0:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	2b00      	cmp	r3, #0
 8010ca6:	d106      	bne.n	8010cb6 <tcp_eff_send_mss_netif+0x22>
 8010ca8:	4b14      	ldr	r3, [pc, #80]	; (8010cfc <tcp_eff_send_mss_netif+0x68>)
 8010caa:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8010cae:	4914      	ldr	r1, [pc, #80]	; (8010d00 <tcp_eff_send_mss_netif+0x6c>)
 8010cb0:	4814      	ldr	r0, [pc, #80]	; (8010d04 <tcp_eff_send_mss_netif+0x70>)
 8010cb2:	f00a f88d 	bl	801add0 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8010cb6:	68bb      	ldr	r3, [r7, #8]
 8010cb8:	2b00      	cmp	r3, #0
 8010cba:	d101      	bne.n	8010cc0 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8010cbc:	89fb      	ldrh	r3, [r7, #14]
 8010cbe:	e019      	b.n	8010cf4 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8010cc0:	68bb      	ldr	r3, [r7, #8]
 8010cc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010cc4:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8010cc6:	8afb      	ldrh	r3, [r7, #22]
 8010cc8:	2b00      	cmp	r3, #0
 8010cca:	d012      	beq.n	8010cf2 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8010ccc:	2328      	movs	r3, #40	; 0x28
 8010cce:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8010cd0:	8afa      	ldrh	r2, [r7, #22]
 8010cd2:	8abb      	ldrh	r3, [r7, #20]
 8010cd4:	429a      	cmp	r2, r3
 8010cd6:	d904      	bls.n	8010ce2 <tcp_eff_send_mss_netif+0x4e>
 8010cd8:	8afa      	ldrh	r2, [r7, #22]
 8010cda:	8abb      	ldrh	r3, [r7, #20]
 8010cdc:	1ad3      	subs	r3, r2, r3
 8010cde:	b29b      	uxth	r3, r3
 8010ce0:	e000      	b.n	8010ce4 <tcp_eff_send_mss_netif+0x50>
 8010ce2:	2300      	movs	r3, #0
 8010ce4:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8010ce6:	8a7a      	ldrh	r2, [r7, #18]
 8010ce8:	89fb      	ldrh	r3, [r7, #14]
 8010cea:	4293      	cmp	r3, r2
 8010cec:	bf28      	it	cs
 8010cee:	4613      	movcs	r3, r2
 8010cf0:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8010cf2:	89fb      	ldrh	r3, [r7, #14]
}
 8010cf4:	4618      	mov	r0, r3
 8010cf6:	3718      	adds	r7, #24
 8010cf8:	46bd      	mov	sp, r7
 8010cfa:	bd80      	pop	{r7, pc}
 8010cfc:	0801e6fc 	.word	0x0801e6fc
 8010d00:	0801ee08 	.word	0x0801ee08
 8010d04:	0801e740 	.word	0x0801e740

08010d08 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8010d08:	b580      	push	{r7, lr}
 8010d0a:	b084      	sub	sp, #16
 8010d0c:	af00      	add	r7, sp, #0
 8010d0e:	6078      	str	r0, [r7, #4]
 8010d10:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8010d12:	683b      	ldr	r3, [r7, #0]
 8010d14:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8010d16:	687b      	ldr	r3, [r7, #4]
 8010d18:	2b00      	cmp	r3, #0
 8010d1a:	d119      	bne.n	8010d50 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8010d1c:	4b10      	ldr	r3, [pc, #64]	; (8010d60 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8010d1e:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8010d22:	4910      	ldr	r1, [pc, #64]	; (8010d64 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8010d24:	4810      	ldr	r0, [pc, #64]	; (8010d68 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8010d26:	f00a f853 	bl	801add0 <iprintf>

  while (pcb != NULL) {
 8010d2a:	e011      	b.n	8010d50 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8010d2c:	68fb      	ldr	r3, [r7, #12]
 8010d2e:	681a      	ldr	r2, [r3, #0]
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	681b      	ldr	r3, [r3, #0]
 8010d34:	429a      	cmp	r2, r3
 8010d36:	d108      	bne.n	8010d4a <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8010d38:	68fb      	ldr	r3, [r7, #12]
 8010d3a:	68db      	ldr	r3, [r3, #12]
 8010d3c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8010d3e:	68f8      	ldr	r0, [r7, #12]
 8010d40:	f7fe ffc2 	bl	800fcc8 <tcp_abort>
      pcb = next;
 8010d44:	68bb      	ldr	r3, [r7, #8]
 8010d46:	60fb      	str	r3, [r7, #12]
 8010d48:	e002      	b.n	8010d50 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8010d4a:	68fb      	ldr	r3, [r7, #12]
 8010d4c:	68db      	ldr	r3, [r3, #12]
 8010d4e:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8010d50:	68fb      	ldr	r3, [r7, #12]
 8010d52:	2b00      	cmp	r3, #0
 8010d54:	d1ea      	bne.n	8010d2c <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8010d56:	bf00      	nop
 8010d58:	bf00      	nop
 8010d5a:	3710      	adds	r7, #16
 8010d5c:	46bd      	mov	sp, r7
 8010d5e:	bd80      	pop	{r7, pc}
 8010d60:	0801e6fc 	.word	0x0801e6fc
 8010d64:	0801ee30 	.word	0x0801ee30
 8010d68:	0801e740 	.word	0x0801e740

08010d6c <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8010d6c:	b580      	push	{r7, lr}
 8010d6e:	b084      	sub	sp, #16
 8010d70:	af00      	add	r7, sp, #0
 8010d72:	6078      	str	r0, [r7, #4]
 8010d74:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8010d76:	687b      	ldr	r3, [r7, #4]
 8010d78:	2b00      	cmp	r3, #0
 8010d7a:	d02a      	beq.n	8010dd2 <tcp_netif_ip_addr_changed+0x66>
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	681b      	ldr	r3, [r3, #0]
 8010d80:	2b00      	cmp	r3, #0
 8010d82:	d026      	beq.n	8010dd2 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8010d84:	4b15      	ldr	r3, [pc, #84]	; (8010ddc <tcp_netif_ip_addr_changed+0x70>)
 8010d86:	681b      	ldr	r3, [r3, #0]
 8010d88:	4619      	mov	r1, r3
 8010d8a:	6878      	ldr	r0, [r7, #4]
 8010d8c:	f7ff ffbc 	bl	8010d08 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8010d90:	4b13      	ldr	r3, [pc, #76]	; (8010de0 <tcp_netif_ip_addr_changed+0x74>)
 8010d92:	681b      	ldr	r3, [r3, #0]
 8010d94:	4619      	mov	r1, r3
 8010d96:	6878      	ldr	r0, [r7, #4]
 8010d98:	f7ff ffb6 	bl	8010d08 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8010d9c:	683b      	ldr	r3, [r7, #0]
 8010d9e:	2b00      	cmp	r3, #0
 8010da0:	d017      	beq.n	8010dd2 <tcp_netif_ip_addr_changed+0x66>
 8010da2:	683b      	ldr	r3, [r7, #0]
 8010da4:	681b      	ldr	r3, [r3, #0]
 8010da6:	2b00      	cmp	r3, #0
 8010da8:	d013      	beq.n	8010dd2 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010daa:	4b0e      	ldr	r3, [pc, #56]	; (8010de4 <tcp_netif_ip_addr_changed+0x78>)
 8010dac:	681b      	ldr	r3, [r3, #0]
 8010dae:	60fb      	str	r3, [r7, #12]
 8010db0:	e00c      	b.n	8010dcc <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8010db2:	68fb      	ldr	r3, [r7, #12]
 8010db4:	681a      	ldr	r2, [r3, #0]
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	681b      	ldr	r3, [r3, #0]
 8010dba:	429a      	cmp	r2, r3
 8010dbc:	d103      	bne.n	8010dc6 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8010dbe:	683b      	ldr	r3, [r7, #0]
 8010dc0:	681a      	ldr	r2, [r3, #0]
 8010dc2:	68fb      	ldr	r3, [r7, #12]
 8010dc4:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010dc6:	68fb      	ldr	r3, [r7, #12]
 8010dc8:	68db      	ldr	r3, [r3, #12]
 8010dca:	60fb      	str	r3, [r7, #12]
 8010dcc:	68fb      	ldr	r3, [r7, #12]
 8010dce:	2b00      	cmp	r3, #0
 8010dd0:	d1ef      	bne.n	8010db2 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8010dd2:	bf00      	nop
 8010dd4:	3710      	adds	r7, #16
 8010dd6:	46bd      	mov	sp, r7
 8010dd8:	bd80      	pop	{r7, pc}
 8010dda:	bf00      	nop
 8010ddc:	20013ce4 	.word	0x20013ce4
 8010de0:	20013cdc 	.word	0x20013cdc
 8010de4:	20013ce0 	.word	0x20013ce0

08010de8 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8010de8:	b580      	push	{r7, lr}
 8010dea:	b082      	sub	sp, #8
 8010dec:	af00      	add	r7, sp, #0
 8010dee:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010df4:	2b00      	cmp	r3, #0
 8010df6:	d007      	beq.n	8010e08 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010dfc:	4618      	mov	r0, r3
 8010dfe:	f7ff fc3d 	bl	801067c <tcp_segs_free>
    pcb->ooseq = NULL;
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	2200      	movs	r2, #0
 8010e06:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8010e08:	bf00      	nop
 8010e0a:	3708      	adds	r7, #8
 8010e0c:	46bd      	mov	sp, r7
 8010e0e:	bd80      	pop	{r7, pc}

08010e10 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8010e10:	b590      	push	{r4, r7, lr}
 8010e12:	b08d      	sub	sp, #52	; 0x34
 8010e14:	af04      	add	r7, sp, #16
 8010e16:	6078      	str	r0, [r7, #4]
 8010e18:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	d105      	bne.n	8010e2c <tcp_input+0x1c>
 8010e20:	4b8b      	ldr	r3, [pc, #556]	; (8011050 <tcp_input+0x240>)
 8010e22:	2283      	movs	r2, #131	; 0x83
 8010e24:	498b      	ldr	r1, [pc, #556]	; (8011054 <tcp_input+0x244>)
 8010e26:	488c      	ldr	r0, [pc, #560]	; (8011058 <tcp_input+0x248>)
 8010e28:	f009 ffd2 	bl	801add0 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8010e2c:	687b      	ldr	r3, [r7, #4]
 8010e2e:	685b      	ldr	r3, [r3, #4]
 8010e30:	4a8a      	ldr	r2, [pc, #552]	; (801105c <tcp_input+0x24c>)
 8010e32:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	895b      	ldrh	r3, [r3, #10]
 8010e38:	2b13      	cmp	r3, #19
 8010e3a:	f240 83e3 	bls.w	8011604 <tcp_input+0x7f4>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8010e3e:	4b88      	ldr	r3, [pc, #544]	; (8011060 <tcp_input+0x250>)
 8010e40:	695b      	ldr	r3, [r3, #20]
 8010e42:	4a87      	ldr	r2, [pc, #540]	; (8011060 <tcp_input+0x250>)
 8010e44:	6812      	ldr	r2, [r2, #0]
 8010e46:	4611      	mov	r1, r2
 8010e48:	4618      	mov	r0, r3
 8010e4a:	f008 f85b 	bl	8018f04 <ip4_addr_isbroadcast_u32>
 8010e4e:	4603      	mov	r3, r0
 8010e50:	2b00      	cmp	r3, #0
 8010e52:	f040 83d9 	bne.w	8011608 <tcp_input+0x7f8>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8010e56:	4b82      	ldr	r3, [pc, #520]	; (8011060 <tcp_input+0x250>)
 8010e58:	695b      	ldr	r3, [r3, #20]
 8010e5a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8010e5e:	2be0      	cmp	r3, #224	; 0xe0
 8010e60:	f000 83d2 	beq.w	8011608 <tcp_input+0x7f8>
  }

#if CHECKSUM_CHECK_TCP
  IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_TCP) {
    /* Verify TCP checksum. */
    u16_t chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	891a      	ldrh	r2, [r3, #8]
 8010e68:	4b7e      	ldr	r3, [pc, #504]	; (8011064 <tcp_input+0x254>)
 8010e6a:	9300      	str	r3, [sp, #0]
 8010e6c:	4b7e      	ldr	r3, [pc, #504]	; (8011068 <tcp_input+0x258>)
 8010e6e:	2106      	movs	r1, #6
 8010e70:	6878      	ldr	r0, [r7, #4]
 8010e72:	f7fc fc01 	bl	800d678 <ip_chksum_pseudo>
 8010e76:	4603      	mov	r3, r0
 8010e78:	823b      	strh	r3, [r7, #16]
                                    ip_current_src_addr(), ip_current_dest_addr());
    if (chksum != 0) {
 8010e7a:	8a3b      	ldrh	r3, [r7, #16]
 8010e7c:	2b00      	cmp	r3, #0
 8010e7e:	f040 83c5 	bne.w	801160c <tcp_input+0x7fc>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8010e82:	4b76      	ldr	r3, [pc, #472]	; (801105c <tcp_input+0x24c>)
 8010e84:	681b      	ldr	r3, [r3, #0]
 8010e86:	899b      	ldrh	r3, [r3, #12]
 8010e88:	b29b      	uxth	r3, r3
 8010e8a:	4618      	mov	r0, r3
 8010e8c:	f7fc fac2 	bl	800d414 <lwip_htons>
 8010e90:	4603      	mov	r3, r0
 8010e92:	0b1b      	lsrs	r3, r3, #12
 8010e94:	b29b      	uxth	r3, r3
 8010e96:	b2db      	uxtb	r3, r3
 8010e98:	009b      	lsls	r3, r3, #2
 8010e9a:	73fb      	strb	r3, [r7, #15]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8010e9c:	7bfb      	ldrb	r3, [r7, #15]
 8010e9e:	2b13      	cmp	r3, #19
 8010ea0:	f240 83b6 	bls.w	8011610 <tcp_input+0x800>
 8010ea4:	7bfb      	ldrb	r3, [r7, #15]
 8010ea6:	b29a      	uxth	r2, r3
 8010ea8:	687b      	ldr	r3, [r7, #4]
 8010eaa:	891b      	ldrh	r3, [r3, #8]
 8010eac:	429a      	cmp	r2, r3
 8010eae:	f200 83af 	bhi.w	8011610 <tcp_input+0x800>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8010eb2:	7bfb      	ldrb	r3, [r7, #15]
 8010eb4:	b29b      	uxth	r3, r3
 8010eb6:	3b14      	subs	r3, #20
 8010eb8:	b29a      	uxth	r2, r3
 8010eba:	4b6c      	ldr	r3, [pc, #432]	; (801106c <tcp_input+0x25c>)
 8010ebc:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8010ebe:	4b6c      	ldr	r3, [pc, #432]	; (8011070 <tcp_input+0x260>)
 8010ec0:	2200      	movs	r2, #0
 8010ec2:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	895a      	ldrh	r2, [r3, #10]
 8010ec8:	7bfb      	ldrb	r3, [r7, #15]
 8010eca:	b29b      	uxth	r3, r3
 8010ecc:	429a      	cmp	r2, r3
 8010ece:	d309      	bcc.n	8010ee4 <tcp_input+0xd4>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8010ed0:	4b66      	ldr	r3, [pc, #408]	; (801106c <tcp_input+0x25c>)
 8010ed2:	881a      	ldrh	r2, [r3, #0]
 8010ed4:	4b67      	ldr	r3, [pc, #412]	; (8011074 <tcp_input+0x264>)
 8010ed6:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8010ed8:	7bfb      	ldrb	r3, [r7, #15]
 8010eda:	4619      	mov	r1, r3
 8010edc:	6878      	ldr	r0, [r7, #4]
 8010ede:	f7fd ff35 	bl	800ed4c <pbuf_remove_header>
 8010ee2:	e04e      	b.n	8010f82 <tcp_input+0x172>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8010ee4:	687b      	ldr	r3, [r7, #4]
 8010ee6:	681b      	ldr	r3, [r3, #0]
 8010ee8:	2b00      	cmp	r3, #0
 8010eea:	d105      	bne.n	8010ef8 <tcp_input+0xe8>
 8010eec:	4b58      	ldr	r3, [pc, #352]	; (8011050 <tcp_input+0x240>)
 8010eee:	22c2      	movs	r2, #194	; 0xc2
 8010ef0:	4961      	ldr	r1, [pc, #388]	; (8011078 <tcp_input+0x268>)
 8010ef2:	4859      	ldr	r0, [pc, #356]	; (8011058 <tcp_input+0x248>)
 8010ef4:	f009 ff6c 	bl	801add0 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8010ef8:	2114      	movs	r1, #20
 8010efa:	6878      	ldr	r0, [r7, #4]
 8010efc:	f7fd ff26 	bl	800ed4c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	895a      	ldrh	r2, [r3, #10]
 8010f04:	4b5b      	ldr	r3, [pc, #364]	; (8011074 <tcp_input+0x264>)
 8010f06:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8010f08:	4b58      	ldr	r3, [pc, #352]	; (801106c <tcp_input+0x25c>)
 8010f0a:	881a      	ldrh	r2, [r3, #0]
 8010f0c:	4b59      	ldr	r3, [pc, #356]	; (8011074 <tcp_input+0x264>)
 8010f0e:	881b      	ldrh	r3, [r3, #0]
 8010f10:	1ad3      	subs	r3, r2, r3
 8010f12:	81bb      	strh	r3, [r7, #12]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8010f14:	4b57      	ldr	r3, [pc, #348]	; (8011074 <tcp_input+0x264>)
 8010f16:	881b      	ldrh	r3, [r3, #0]
 8010f18:	4619      	mov	r1, r3
 8010f1a:	6878      	ldr	r0, [r7, #4]
 8010f1c:	f7fd ff16 	bl	800ed4c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	681b      	ldr	r3, [r3, #0]
 8010f24:	895b      	ldrh	r3, [r3, #10]
 8010f26:	89ba      	ldrh	r2, [r7, #12]
 8010f28:	429a      	cmp	r2, r3
 8010f2a:	f200 8373 	bhi.w	8011614 <tcp_input+0x804>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	681b      	ldr	r3, [r3, #0]
 8010f32:	685b      	ldr	r3, [r3, #4]
 8010f34:	4a4e      	ldr	r2, [pc, #312]	; (8011070 <tcp_input+0x260>)
 8010f36:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	681b      	ldr	r3, [r3, #0]
 8010f3c:	89ba      	ldrh	r2, [r7, #12]
 8010f3e:	4611      	mov	r1, r2
 8010f40:	4618      	mov	r0, r3
 8010f42:	f7fd ff03 	bl	800ed4c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8010f46:	687b      	ldr	r3, [r7, #4]
 8010f48:	891a      	ldrh	r2, [r3, #8]
 8010f4a:	89bb      	ldrh	r3, [r7, #12]
 8010f4c:	1ad3      	subs	r3, r2, r3
 8010f4e:	b29a      	uxth	r2, r3
 8010f50:	687b      	ldr	r3, [r7, #4]
 8010f52:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8010f54:	687b      	ldr	r3, [r7, #4]
 8010f56:	895b      	ldrh	r3, [r3, #10]
 8010f58:	2b00      	cmp	r3, #0
 8010f5a:	d005      	beq.n	8010f68 <tcp_input+0x158>
 8010f5c:	4b3c      	ldr	r3, [pc, #240]	; (8011050 <tcp_input+0x240>)
 8010f5e:	22df      	movs	r2, #223	; 0xdf
 8010f60:	4946      	ldr	r1, [pc, #280]	; (801107c <tcp_input+0x26c>)
 8010f62:	483d      	ldr	r0, [pc, #244]	; (8011058 <tcp_input+0x248>)
 8010f64:	f009 ff34 	bl	801add0 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8010f68:	687b      	ldr	r3, [r7, #4]
 8010f6a:	891a      	ldrh	r2, [r3, #8]
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	681b      	ldr	r3, [r3, #0]
 8010f70:	891b      	ldrh	r3, [r3, #8]
 8010f72:	429a      	cmp	r2, r3
 8010f74:	d005      	beq.n	8010f82 <tcp_input+0x172>
 8010f76:	4b36      	ldr	r3, [pc, #216]	; (8011050 <tcp_input+0x240>)
 8010f78:	22e0      	movs	r2, #224	; 0xe0
 8010f7a:	4941      	ldr	r1, [pc, #260]	; (8011080 <tcp_input+0x270>)
 8010f7c:	4836      	ldr	r0, [pc, #216]	; (8011058 <tcp_input+0x248>)
 8010f7e:	f009 ff27 	bl	801add0 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8010f82:	4b36      	ldr	r3, [pc, #216]	; (801105c <tcp_input+0x24c>)
 8010f84:	681b      	ldr	r3, [r3, #0]
 8010f86:	881b      	ldrh	r3, [r3, #0]
 8010f88:	b29b      	uxth	r3, r3
 8010f8a:	4a34      	ldr	r2, [pc, #208]	; (801105c <tcp_input+0x24c>)
 8010f8c:	6814      	ldr	r4, [r2, #0]
 8010f8e:	4618      	mov	r0, r3
 8010f90:	f7fc fa40 	bl	800d414 <lwip_htons>
 8010f94:	4603      	mov	r3, r0
 8010f96:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8010f98:	4b30      	ldr	r3, [pc, #192]	; (801105c <tcp_input+0x24c>)
 8010f9a:	681b      	ldr	r3, [r3, #0]
 8010f9c:	885b      	ldrh	r3, [r3, #2]
 8010f9e:	b29b      	uxth	r3, r3
 8010fa0:	4a2e      	ldr	r2, [pc, #184]	; (801105c <tcp_input+0x24c>)
 8010fa2:	6814      	ldr	r4, [r2, #0]
 8010fa4:	4618      	mov	r0, r3
 8010fa6:	f7fc fa35 	bl	800d414 <lwip_htons>
 8010faa:	4603      	mov	r3, r0
 8010fac:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8010fae:	4b2b      	ldr	r3, [pc, #172]	; (801105c <tcp_input+0x24c>)
 8010fb0:	681b      	ldr	r3, [r3, #0]
 8010fb2:	685b      	ldr	r3, [r3, #4]
 8010fb4:	4a29      	ldr	r2, [pc, #164]	; (801105c <tcp_input+0x24c>)
 8010fb6:	6814      	ldr	r4, [r2, #0]
 8010fb8:	4618      	mov	r0, r3
 8010fba:	f7fc fa40 	bl	800d43e <lwip_htonl>
 8010fbe:	4603      	mov	r3, r0
 8010fc0:	6063      	str	r3, [r4, #4]
 8010fc2:	6863      	ldr	r3, [r4, #4]
 8010fc4:	4a2f      	ldr	r2, [pc, #188]	; (8011084 <tcp_input+0x274>)
 8010fc6:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8010fc8:	4b24      	ldr	r3, [pc, #144]	; (801105c <tcp_input+0x24c>)
 8010fca:	681b      	ldr	r3, [r3, #0]
 8010fcc:	689b      	ldr	r3, [r3, #8]
 8010fce:	4a23      	ldr	r2, [pc, #140]	; (801105c <tcp_input+0x24c>)
 8010fd0:	6814      	ldr	r4, [r2, #0]
 8010fd2:	4618      	mov	r0, r3
 8010fd4:	f7fc fa33 	bl	800d43e <lwip_htonl>
 8010fd8:	4603      	mov	r3, r0
 8010fda:	60a3      	str	r3, [r4, #8]
 8010fdc:	68a3      	ldr	r3, [r4, #8]
 8010fde:	4a2a      	ldr	r2, [pc, #168]	; (8011088 <tcp_input+0x278>)
 8010fe0:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8010fe2:	4b1e      	ldr	r3, [pc, #120]	; (801105c <tcp_input+0x24c>)
 8010fe4:	681b      	ldr	r3, [r3, #0]
 8010fe6:	89db      	ldrh	r3, [r3, #14]
 8010fe8:	b29b      	uxth	r3, r3
 8010fea:	4a1c      	ldr	r2, [pc, #112]	; (801105c <tcp_input+0x24c>)
 8010fec:	6814      	ldr	r4, [r2, #0]
 8010fee:	4618      	mov	r0, r3
 8010ff0:	f7fc fa10 	bl	800d414 <lwip_htons>
 8010ff4:	4603      	mov	r3, r0
 8010ff6:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8010ff8:	4b18      	ldr	r3, [pc, #96]	; (801105c <tcp_input+0x24c>)
 8010ffa:	681b      	ldr	r3, [r3, #0]
 8010ffc:	899b      	ldrh	r3, [r3, #12]
 8010ffe:	b29b      	uxth	r3, r3
 8011000:	4618      	mov	r0, r3
 8011002:	f7fc fa07 	bl	800d414 <lwip_htons>
 8011006:	4603      	mov	r3, r0
 8011008:	b2db      	uxtb	r3, r3
 801100a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801100e:	b2da      	uxtb	r2, r3
 8011010:	4b1e      	ldr	r3, [pc, #120]	; (801108c <tcp_input+0x27c>)
 8011012:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	891a      	ldrh	r2, [r3, #8]
 8011018:	4b1d      	ldr	r3, [pc, #116]	; (8011090 <tcp_input+0x280>)
 801101a:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 801101c:	4b1b      	ldr	r3, [pc, #108]	; (801108c <tcp_input+0x27c>)
 801101e:	781b      	ldrb	r3, [r3, #0]
 8011020:	f003 0303 	and.w	r3, r3, #3
 8011024:	2b00      	cmp	r3, #0
 8011026:	d00c      	beq.n	8011042 <tcp_input+0x232>
    tcplen++;
 8011028:	4b19      	ldr	r3, [pc, #100]	; (8011090 <tcp_input+0x280>)
 801102a:	881b      	ldrh	r3, [r3, #0]
 801102c:	3301      	adds	r3, #1
 801102e:	b29a      	uxth	r2, r3
 8011030:	4b17      	ldr	r3, [pc, #92]	; (8011090 <tcp_input+0x280>)
 8011032:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	891a      	ldrh	r2, [r3, #8]
 8011038:	4b15      	ldr	r3, [pc, #84]	; (8011090 <tcp_input+0x280>)
 801103a:	881b      	ldrh	r3, [r3, #0]
 801103c:	429a      	cmp	r2, r3
 801103e:	f200 82eb 	bhi.w	8011618 <tcp_input+0x808>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8011042:	2300      	movs	r3, #0
 8011044:	61fb      	str	r3, [r7, #28]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011046:	4b13      	ldr	r3, [pc, #76]	; (8011094 <tcp_input+0x284>)
 8011048:	681b      	ldr	r3, [r3, #0]
 801104a:	61bb      	str	r3, [r7, #24]
 801104c:	e09b      	b.n	8011186 <tcp_input+0x376>
 801104e:	bf00      	nop
 8011050:	0801ee64 	.word	0x0801ee64
 8011054:	0801ee98 	.word	0x0801ee98
 8011058:	0801eeb0 	.word	0x0801eeb0
 801105c:	20013d04 	.word	0x20013d04
 8011060:	2000a264 	.word	0x2000a264
 8011064:	2000a278 	.word	0x2000a278
 8011068:	2000a274 	.word	0x2000a274
 801106c:	20013d08 	.word	0x20013d08
 8011070:	20013d0c 	.word	0x20013d0c
 8011074:	20013d0a 	.word	0x20013d0a
 8011078:	0801eed8 	.word	0x0801eed8
 801107c:	0801eee8 	.word	0x0801eee8
 8011080:	0801eef4 	.word	0x0801eef4
 8011084:	20013d14 	.word	0x20013d14
 8011088:	20013d18 	.word	0x20013d18
 801108c:	20013d20 	.word	0x20013d20
 8011090:	20013d1e 	.word	0x20013d1e
 8011094:	20013ce4 	.word	0x20013ce4
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8011098:	69bb      	ldr	r3, [r7, #24]
 801109a:	7d1b      	ldrb	r3, [r3, #20]
 801109c:	2b00      	cmp	r3, #0
 801109e:	d105      	bne.n	80110ac <tcp_input+0x29c>
 80110a0:	4b88      	ldr	r3, [pc, #544]	; (80112c4 <tcp_input+0x4b4>)
 80110a2:	22fb      	movs	r2, #251	; 0xfb
 80110a4:	4988      	ldr	r1, [pc, #544]	; (80112c8 <tcp_input+0x4b8>)
 80110a6:	4889      	ldr	r0, [pc, #548]	; (80112cc <tcp_input+0x4bc>)
 80110a8:	f009 fe92 	bl	801add0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 80110ac:	69bb      	ldr	r3, [r7, #24]
 80110ae:	7d1b      	ldrb	r3, [r3, #20]
 80110b0:	2b0a      	cmp	r3, #10
 80110b2:	d105      	bne.n	80110c0 <tcp_input+0x2b0>
 80110b4:	4b83      	ldr	r3, [pc, #524]	; (80112c4 <tcp_input+0x4b4>)
 80110b6:	22fc      	movs	r2, #252	; 0xfc
 80110b8:	4985      	ldr	r1, [pc, #532]	; (80112d0 <tcp_input+0x4c0>)
 80110ba:	4884      	ldr	r0, [pc, #528]	; (80112cc <tcp_input+0x4bc>)
 80110bc:	f009 fe88 	bl	801add0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 80110c0:	69bb      	ldr	r3, [r7, #24]
 80110c2:	7d1b      	ldrb	r3, [r3, #20]
 80110c4:	2b01      	cmp	r3, #1
 80110c6:	d105      	bne.n	80110d4 <tcp_input+0x2c4>
 80110c8:	4b7e      	ldr	r3, [pc, #504]	; (80112c4 <tcp_input+0x4b4>)
 80110ca:	22fd      	movs	r2, #253	; 0xfd
 80110cc:	4981      	ldr	r1, [pc, #516]	; (80112d4 <tcp_input+0x4c4>)
 80110ce:	487f      	ldr	r0, [pc, #508]	; (80112cc <tcp_input+0x4bc>)
 80110d0:	f009 fe7e 	bl	801add0 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80110d4:	69bb      	ldr	r3, [r7, #24]
 80110d6:	7a1b      	ldrb	r3, [r3, #8]
 80110d8:	2b00      	cmp	r3, #0
 80110da:	d00c      	beq.n	80110f6 <tcp_input+0x2e6>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80110dc:	69bb      	ldr	r3, [r7, #24]
 80110de:	7a1a      	ldrb	r2, [r3, #8]
 80110e0:	4b7d      	ldr	r3, [pc, #500]	; (80112d8 <tcp_input+0x4c8>)
 80110e2:	685b      	ldr	r3, [r3, #4]
 80110e4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80110e8:	3301      	adds	r3, #1
 80110ea:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80110ec:	429a      	cmp	r2, r3
 80110ee:	d002      	beq.n	80110f6 <tcp_input+0x2e6>
      prev = pcb;
 80110f0:	69bb      	ldr	r3, [r7, #24]
 80110f2:	61fb      	str	r3, [r7, #28]
      continue;
 80110f4:	e044      	b.n	8011180 <tcp_input+0x370>
    }

    if (pcb->remote_port == tcphdr->src &&
 80110f6:	69bb      	ldr	r3, [r7, #24]
 80110f8:	8b1a      	ldrh	r2, [r3, #24]
 80110fa:	4b78      	ldr	r3, [pc, #480]	; (80112dc <tcp_input+0x4cc>)
 80110fc:	681b      	ldr	r3, [r3, #0]
 80110fe:	881b      	ldrh	r3, [r3, #0]
 8011100:	b29b      	uxth	r3, r3
 8011102:	429a      	cmp	r2, r3
 8011104:	d13a      	bne.n	801117c <tcp_input+0x36c>
        pcb->local_port == tcphdr->dest &&
 8011106:	69bb      	ldr	r3, [r7, #24]
 8011108:	8ada      	ldrh	r2, [r3, #22]
 801110a:	4b74      	ldr	r3, [pc, #464]	; (80112dc <tcp_input+0x4cc>)
 801110c:	681b      	ldr	r3, [r3, #0]
 801110e:	885b      	ldrh	r3, [r3, #2]
 8011110:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8011112:	429a      	cmp	r2, r3
 8011114:	d132      	bne.n	801117c <tcp_input+0x36c>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8011116:	69bb      	ldr	r3, [r7, #24]
 8011118:	685a      	ldr	r2, [r3, #4]
 801111a:	4b6f      	ldr	r3, [pc, #444]	; (80112d8 <tcp_input+0x4c8>)
 801111c:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 801111e:	429a      	cmp	r2, r3
 8011120:	d12c      	bne.n	801117c <tcp_input+0x36c>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8011122:	69bb      	ldr	r3, [r7, #24]
 8011124:	681a      	ldr	r2, [r3, #0]
 8011126:	4b6c      	ldr	r3, [pc, #432]	; (80112d8 <tcp_input+0x4c8>)
 8011128:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801112a:	429a      	cmp	r2, r3
 801112c:	d126      	bne.n	801117c <tcp_input+0x36c>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 801112e:	69bb      	ldr	r3, [r7, #24]
 8011130:	68db      	ldr	r3, [r3, #12]
 8011132:	69ba      	ldr	r2, [r7, #24]
 8011134:	429a      	cmp	r2, r3
 8011136:	d106      	bne.n	8011146 <tcp_input+0x336>
 8011138:	4b62      	ldr	r3, [pc, #392]	; (80112c4 <tcp_input+0x4b4>)
 801113a:	f240 120d 	movw	r2, #269	; 0x10d
 801113e:	4968      	ldr	r1, [pc, #416]	; (80112e0 <tcp_input+0x4d0>)
 8011140:	4862      	ldr	r0, [pc, #392]	; (80112cc <tcp_input+0x4bc>)
 8011142:	f009 fe45 	bl	801add0 <iprintf>
      if (prev != NULL) {
 8011146:	69fb      	ldr	r3, [r7, #28]
 8011148:	2b00      	cmp	r3, #0
 801114a:	d00a      	beq.n	8011162 <tcp_input+0x352>
        prev->next = pcb->next;
 801114c:	69bb      	ldr	r3, [r7, #24]
 801114e:	68da      	ldr	r2, [r3, #12]
 8011150:	69fb      	ldr	r3, [r7, #28]
 8011152:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8011154:	4b63      	ldr	r3, [pc, #396]	; (80112e4 <tcp_input+0x4d4>)
 8011156:	681a      	ldr	r2, [r3, #0]
 8011158:	69bb      	ldr	r3, [r7, #24]
 801115a:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 801115c:	4a61      	ldr	r2, [pc, #388]	; (80112e4 <tcp_input+0x4d4>)
 801115e:	69bb      	ldr	r3, [r7, #24]
 8011160:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8011162:	69bb      	ldr	r3, [r7, #24]
 8011164:	68db      	ldr	r3, [r3, #12]
 8011166:	69ba      	ldr	r2, [r7, #24]
 8011168:	429a      	cmp	r2, r3
 801116a:	d110      	bne.n	801118e <tcp_input+0x37e>
 801116c:	4b55      	ldr	r3, [pc, #340]	; (80112c4 <tcp_input+0x4b4>)
 801116e:	f240 1215 	movw	r2, #277	; 0x115
 8011172:	495d      	ldr	r1, [pc, #372]	; (80112e8 <tcp_input+0x4d8>)
 8011174:	4855      	ldr	r0, [pc, #340]	; (80112cc <tcp_input+0x4bc>)
 8011176:	f009 fe2b 	bl	801add0 <iprintf>
      break;
 801117a:	e008      	b.n	801118e <tcp_input+0x37e>
    }
    prev = pcb;
 801117c:	69bb      	ldr	r3, [r7, #24]
 801117e:	61fb      	str	r3, [r7, #28]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011180:	69bb      	ldr	r3, [r7, #24]
 8011182:	68db      	ldr	r3, [r3, #12]
 8011184:	61bb      	str	r3, [r7, #24]
 8011186:	69bb      	ldr	r3, [r7, #24]
 8011188:	2b00      	cmp	r3, #0
 801118a:	d185      	bne.n	8011098 <tcp_input+0x288>
 801118c:	e000      	b.n	8011190 <tcp_input+0x380>
      break;
 801118e:	bf00      	nop
  }

  if (pcb == NULL) {
 8011190:	69bb      	ldr	r3, [r7, #24]
 8011192:	2b00      	cmp	r3, #0
 8011194:	f040 80b0 	bne.w	80112f8 <tcp_input+0x4e8>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8011198:	4b54      	ldr	r3, [pc, #336]	; (80112ec <tcp_input+0x4dc>)
 801119a:	681b      	ldr	r3, [r3, #0]
 801119c:	61bb      	str	r3, [r7, #24]
 801119e:	e03f      	b.n	8011220 <tcp_input+0x410>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80111a0:	69bb      	ldr	r3, [r7, #24]
 80111a2:	7d1b      	ldrb	r3, [r3, #20]
 80111a4:	2b0a      	cmp	r3, #10
 80111a6:	d006      	beq.n	80111b6 <tcp_input+0x3a6>
 80111a8:	4b46      	ldr	r3, [pc, #280]	; (80112c4 <tcp_input+0x4b4>)
 80111aa:	f240 121f 	movw	r2, #287	; 0x11f
 80111ae:	4950      	ldr	r1, [pc, #320]	; (80112f0 <tcp_input+0x4e0>)
 80111b0:	4846      	ldr	r0, [pc, #280]	; (80112cc <tcp_input+0x4bc>)
 80111b2:	f009 fe0d 	bl	801add0 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80111b6:	69bb      	ldr	r3, [r7, #24]
 80111b8:	7a1b      	ldrb	r3, [r3, #8]
 80111ba:	2b00      	cmp	r3, #0
 80111bc:	d009      	beq.n	80111d2 <tcp_input+0x3c2>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80111be:	69bb      	ldr	r3, [r7, #24]
 80111c0:	7a1a      	ldrb	r2, [r3, #8]
 80111c2:	4b45      	ldr	r3, [pc, #276]	; (80112d8 <tcp_input+0x4c8>)
 80111c4:	685b      	ldr	r3, [r3, #4]
 80111c6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80111ca:	3301      	adds	r3, #1
 80111cc:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80111ce:	429a      	cmp	r2, r3
 80111d0:	d122      	bne.n	8011218 <tcp_input+0x408>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 80111d2:	69bb      	ldr	r3, [r7, #24]
 80111d4:	8b1a      	ldrh	r2, [r3, #24]
 80111d6:	4b41      	ldr	r3, [pc, #260]	; (80112dc <tcp_input+0x4cc>)
 80111d8:	681b      	ldr	r3, [r3, #0]
 80111da:	881b      	ldrh	r3, [r3, #0]
 80111dc:	b29b      	uxth	r3, r3
 80111de:	429a      	cmp	r2, r3
 80111e0:	d11b      	bne.n	801121a <tcp_input+0x40a>
          pcb->local_port == tcphdr->dest &&
 80111e2:	69bb      	ldr	r3, [r7, #24]
 80111e4:	8ada      	ldrh	r2, [r3, #22]
 80111e6:	4b3d      	ldr	r3, [pc, #244]	; (80112dc <tcp_input+0x4cc>)
 80111e8:	681b      	ldr	r3, [r3, #0]
 80111ea:	885b      	ldrh	r3, [r3, #2]
 80111ec:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 80111ee:	429a      	cmp	r2, r3
 80111f0:	d113      	bne.n	801121a <tcp_input+0x40a>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80111f2:	69bb      	ldr	r3, [r7, #24]
 80111f4:	685a      	ldr	r2, [r3, #4]
 80111f6:	4b38      	ldr	r3, [pc, #224]	; (80112d8 <tcp_input+0x4c8>)
 80111f8:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 80111fa:	429a      	cmp	r2, r3
 80111fc:	d10d      	bne.n	801121a <tcp_input+0x40a>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80111fe:	69bb      	ldr	r3, [r7, #24]
 8011200:	681a      	ldr	r2, [r3, #0]
 8011202:	4b35      	ldr	r3, [pc, #212]	; (80112d8 <tcp_input+0x4c8>)
 8011204:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8011206:	429a      	cmp	r2, r3
 8011208:	d107      	bne.n	801121a <tcp_input+0x40a>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 801120a:	69b8      	ldr	r0, [r7, #24]
 801120c:	f000 fb5e 	bl	80118cc <tcp_timewait_input>
        }
        pbuf_free(p);
 8011210:	6878      	ldr	r0, [r7, #4]
 8011212:	f7fd fe21 	bl	800ee58 <pbuf_free>
        return;
 8011216:	e205      	b.n	8011624 <tcp_input+0x814>
        continue;
 8011218:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801121a:	69bb      	ldr	r3, [r7, #24]
 801121c:	68db      	ldr	r3, [r3, #12]
 801121e:	61bb      	str	r3, [r7, #24]
 8011220:	69bb      	ldr	r3, [r7, #24]
 8011222:	2b00      	cmp	r3, #0
 8011224:	d1bc      	bne.n	80111a0 <tcp_input+0x390>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8011226:	2300      	movs	r3, #0
 8011228:	61fb      	str	r3, [r7, #28]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801122a:	4b32      	ldr	r3, [pc, #200]	; (80112f4 <tcp_input+0x4e4>)
 801122c:	681b      	ldr	r3, [r3, #0]
 801122e:	617b      	str	r3, [r7, #20]
 8011230:	e02a      	b.n	8011288 <tcp_input+0x478>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8011232:	697b      	ldr	r3, [r7, #20]
 8011234:	7a1b      	ldrb	r3, [r3, #8]
 8011236:	2b00      	cmp	r3, #0
 8011238:	d00c      	beq.n	8011254 <tcp_input+0x444>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801123a:	697b      	ldr	r3, [r7, #20]
 801123c:	7a1a      	ldrb	r2, [r3, #8]
 801123e:	4b26      	ldr	r3, [pc, #152]	; (80112d8 <tcp_input+0x4c8>)
 8011240:	685b      	ldr	r3, [r3, #4]
 8011242:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8011246:	3301      	adds	r3, #1
 8011248:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801124a:	429a      	cmp	r2, r3
 801124c:	d002      	beq.n	8011254 <tcp_input+0x444>
        prev = (struct tcp_pcb *)lpcb;
 801124e:	697b      	ldr	r3, [r7, #20]
 8011250:	61fb      	str	r3, [r7, #28]
        continue;
 8011252:	e016      	b.n	8011282 <tcp_input+0x472>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8011254:	697b      	ldr	r3, [r7, #20]
 8011256:	8ada      	ldrh	r2, [r3, #22]
 8011258:	4b20      	ldr	r3, [pc, #128]	; (80112dc <tcp_input+0x4cc>)
 801125a:	681b      	ldr	r3, [r3, #0]
 801125c:	885b      	ldrh	r3, [r3, #2]
 801125e:	b29b      	uxth	r3, r3
 8011260:	429a      	cmp	r2, r3
 8011262:	d10c      	bne.n	801127e <tcp_input+0x46e>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8011264:	697b      	ldr	r3, [r7, #20]
 8011266:	681a      	ldr	r2, [r3, #0]
 8011268:	4b1b      	ldr	r3, [pc, #108]	; (80112d8 <tcp_input+0x4c8>)
 801126a:	695b      	ldr	r3, [r3, #20]
 801126c:	429a      	cmp	r2, r3
 801126e:	d00f      	beq.n	8011290 <tcp_input+0x480>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8011270:	697b      	ldr	r3, [r7, #20]
 8011272:	2b00      	cmp	r3, #0
 8011274:	d00d      	beq.n	8011292 <tcp_input+0x482>
 8011276:	697b      	ldr	r3, [r7, #20]
 8011278:	681b      	ldr	r3, [r3, #0]
 801127a:	2b00      	cmp	r3, #0
 801127c:	d009      	beq.n	8011292 <tcp_input+0x482>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 801127e:	697b      	ldr	r3, [r7, #20]
 8011280:	61fb      	str	r3, [r7, #28]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8011282:	697b      	ldr	r3, [r7, #20]
 8011284:	68db      	ldr	r3, [r3, #12]
 8011286:	617b      	str	r3, [r7, #20]
 8011288:	697b      	ldr	r3, [r7, #20]
 801128a:	2b00      	cmp	r3, #0
 801128c:	d1d1      	bne.n	8011232 <tcp_input+0x422>
 801128e:	e000      	b.n	8011292 <tcp_input+0x482>
            break;
 8011290:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8011292:	697b      	ldr	r3, [r7, #20]
 8011294:	2b00      	cmp	r3, #0
 8011296:	d02f      	beq.n	80112f8 <tcp_input+0x4e8>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8011298:	69fb      	ldr	r3, [r7, #28]
 801129a:	2b00      	cmp	r3, #0
 801129c:	d00a      	beq.n	80112b4 <tcp_input+0x4a4>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 801129e:	697b      	ldr	r3, [r7, #20]
 80112a0:	68da      	ldr	r2, [r3, #12]
 80112a2:	69fb      	ldr	r3, [r7, #28]
 80112a4:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 80112a6:	4b13      	ldr	r3, [pc, #76]	; (80112f4 <tcp_input+0x4e4>)
 80112a8:	681a      	ldr	r2, [r3, #0]
 80112aa:	697b      	ldr	r3, [r7, #20]
 80112ac:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 80112ae:	4a11      	ldr	r2, [pc, #68]	; (80112f4 <tcp_input+0x4e4>)
 80112b0:	697b      	ldr	r3, [r7, #20]
 80112b2:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 80112b4:	6978      	ldr	r0, [r7, #20]
 80112b6:	f000 fa0b 	bl	80116d0 <tcp_listen_input>
      }
      pbuf_free(p);
 80112ba:	6878      	ldr	r0, [r7, #4]
 80112bc:	f7fd fdcc 	bl	800ee58 <pbuf_free>
      return;
 80112c0:	e1b0      	b.n	8011624 <tcp_input+0x814>
 80112c2:	bf00      	nop
 80112c4:	0801ee64 	.word	0x0801ee64
 80112c8:	0801ef14 	.word	0x0801ef14
 80112cc:	0801eeb0 	.word	0x0801eeb0
 80112d0:	0801ef3c 	.word	0x0801ef3c
 80112d4:	0801ef68 	.word	0x0801ef68
 80112d8:	2000a264 	.word	0x2000a264
 80112dc:	20013d04 	.word	0x20013d04
 80112e0:	0801ef90 	.word	0x0801ef90
 80112e4:	20013ce4 	.word	0x20013ce4
 80112e8:	0801efbc 	.word	0x0801efbc
 80112ec:	20013ce8 	.word	0x20013ce8
 80112f0:	0801efe8 	.word	0x0801efe8
 80112f4:	20013ce0 	.word	0x20013ce0
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 80112f8:	69bb      	ldr	r3, [r7, #24]
 80112fa:	2b00      	cmp	r3, #0
 80112fc:	f000 8158 	beq.w	80115b0 <tcp_input+0x7a0>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8011300:	4b95      	ldr	r3, [pc, #596]	; (8011558 <tcp_input+0x748>)
 8011302:	2200      	movs	r2, #0
 8011304:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8011306:	687b      	ldr	r3, [r7, #4]
 8011308:	891a      	ldrh	r2, [r3, #8]
 801130a:	4b93      	ldr	r3, [pc, #588]	; (8011558 <tcp_input+0x748>)
 801130c:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 801130e:	4a92      	ldr	r2, [pc, #584]	; (8011558 <tcp_input+0x748>)
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8011314:	4b91      	ldr	r3, [pc, #580]	; (801155c <tcp_input+0x74c>)
 8011316:	681b      	ldr	r3, [r3, #0]
 8011318:	4a8f      	ldr	r2, [pc, #572]	; (8011558 <tcp_input+0x748>)
 801131a:	6113      	str	r3, [r2, #16]

    recv_data = NULL;
 801131c:	4b90      	ldr	r3, [pc, #576]	; (8011560 <tcp_input+0x750>)
 801131e:	2200      	movs	r2, #0
 8011320:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8011322:	4b90      	ldr	r3, [pc, #576]	; (8011564 <tcp_input+0x754>)
 8011324:	2200      	movs	r2, #0
 8011326:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8011328:	4b8f      	ldr	r3, [pc, #572]	; (8011568 <tcp_input+0x758>)
 801132a:	2200      	movs	r2, #0
 801132c:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 801132e:	4b8f      	ldr	r3, [pc, #572]	; (801156c <tcp_input+0x75c>)
 8011330:	781b      	ldrb	r3, [r3, #0]
 8011332:	f003 0308 	and.w	r3, r3, #8
 8011336:	2b00      	cmp	r3, #0
 8011338:	d006      	beq.n	8011348 <tcp_input+0x538>
      p->flags |= PBUF_FLAG_PUSH;
 801133a:	687b      	ldr	r3, [r7, #4]
 801133c:	7b5b      	ldrb	r3, [r3, #13]
 801133e:	f043 0301 	orr.w	r3, r3, #1
 8011342:	b2da      	uxtb	r2, r3
 8011344:	687b      	ldr	r3, [r7, #4]
 8011346:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8011348:	69bb      	ldr	r3, [r7, #24]
 801134a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801134c:	2b00      	cmp	r3, #0
 801134e:	d017      	beq.n	8011380 <tcp_input+0x570>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8011350:	69b8      	ldr	r0, [r7, #24]
 8011352:	f7ff f915 	bl	8010580 <tcp_process_refused_data>
 8011356:	4603      	mov	r3, r0
 8011358:	f113 0f0d 	cmn.w	r3, #13
 801135c:	d007      	beq.n	801136e <tcp_input+0x55e>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801135e:	69bb      	ldr	r3, [r7, #24]
 8011360:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8011362:	2b00      	cmp	r3, #0
 8011364:	d00c      	beq.n	8011380 <tcp_input+0x570>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8011366:	4b82      	ldr	r3, [pc, #520]	; (8011570 <tcp_input+0x760>)
 8011368:	881b      	ldrh	r3, [r3, #0]
 801136a:	2b00      	cmp	r3, #0
 801136c:	d008      	beq.n	8011380 <tcp_input+0x570>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 801136e:	69bb      	ldr	r3, [r7, #24]
 8011370:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011372:	2b00      	cmp	r3, #0
 8011374:	f040 80e4 	bne.w	8011540 <tcp_input+0x730>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8011378:	69b8      	ldr	r0, [r7, #24]
 801137a:	f003 f9e3 	bl	8014744 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 801137e:	e0df      	b.n	8011540 <tcp_input+0x730>
      }
    }
    tcp_input_pcb = pcb;
 8011380:	4a7c      	ldr	r2, [pc, #496]	; (8011574 <tcp_input+0x764>)
 8011382:	69bb      	ldr	r3, [r7, #24]
 8011384:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8011386:	69b8      	ldr	r0, [r7, #24]
 8011388:	f000 fb1a 	bl	80119c0 <tcp_process>
 801138c:	4603      	mov	r3, r0
 801138e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8011390:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011394:	f113 0f0d 	cmn.w	r3, #13
 8011398:	f000 80d4 	beq.w	8011544 <tcp_input+0x734>
      if (recv_flags & TF_RESET) {
 801139c:	4b71      	ldr	r3, [pc, #452]	; (8011564 <tcp_input+0x754>)
 801139e:	781b      	ldrb	r3, [r3, #0]
 80113a0:	f003 0308 	and.w	r3, r3, #8
 80113a4:	2b00      	cmp	r3, #0
 80113a6:	d015      	beq.n	80113d4 <tcp_input+0x5c4>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 80113a8:	69bb      	ldr	r3, [r7, #24]
 80113aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80113ae:	2b00      	cmp	r3, #0
 80113b0:	d008      	beq.n	80113c4 <tcp_input+0x5b4>
 80113b2:	69bb      	ldr	r3, [r7, #24]
 80113b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80113b8:	69ba      	ldr	r2, [r7, #24]
 80113ba:	6912      	ldr	r2, [r2, #16]
 80113bc:	f06f 010d 	mvn.w	r1, #13
 80113c0:	4610      	mov	r0, r2
 80113c2:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80113c4:	69b9      	ldr	r1, [r7, #24]
 80113c6:	486c      	ldr	r0, [pc, #432]	; (8011578 <tcp_input+0x768>)
 80113c8:	f7ff fbaa 	bl	8010b20 <tcp_pcb_remove>
        tcp_free(pcb);
 80113cc:	69b8      	ldr	r0, [r7, #24]
 80113ce:	f7fe f993 	bl	800f6f8 <tcp_free>
 80113d2:	e0da      	b.n	801158a <tcp_input+0x77a>
      } else {
        err = ERR_OK;
 80113d4:	2300      	movs	r3, #0
 80113d6:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 80113d8:	4b63      	ldr	r3, [pc, #396]	; (8011568 <tcp_input+0x758>)
 80113da:	881b      	ldrh	r3, [r3, #0]
 80113dc:	2b00      	cmp	r3, #0
 80113de:	d01d      	beq.n	801141c <tcp_input+0x60c>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 80113e0:	4b61      	ldr	r3, [pc, #388]	; (8011568 <tcp_input+0x758>)
 80113e2:	881b      	ldrh	r3, [r3, #0]
 80113e4:	817b      	strh	r3, [r7, #10]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80113e6:	69bb      	ldr	r3, [r7, #24]
 80113e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80113ec:	2b00      	cmp	r3, #0
 80113ee:	d00a      	beq.n	8011406 <tcp_input+0x5f6>
 80113f0:	69bb      	ldr	r3, [r7, #24]
 80113f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80113f6:	69ba      	ldr	r2, [r7, #24]
 80113f8:	6910      	ldr	r0, [r2, #16]
 80113fa:	897a      	ldrh	r2, [r7, #10]
 80113fc:	69b9      	ldr	r1, [r7, #24]
 80113fe:	4798      	blx	r3
 8011400:	4603      	mov	r3, r0
 8011402:	74fb      	strb	r3, [r7, #19]
 8011404:	e001      	b.n	801140a <tcp_input+0x5fa>
 8011406:	2300      	movs	r3, #0
 8011408:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801140a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801140e:	f113 0f0d 	cmn.w	r3, #13
 8011412:	f000 8099 	beq.w	8011548 <tcp_input+0x738>
              goto aborted;
            }
          }
          recv_acked = 0;
 8011416:	4b54      	ldr	r3, [pc, #336]	; (8011568 <tcp_input+0x758>)
 8011418:	2200      	movs	r2, #0
 801141a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 801141c:	69b8      	ldr	r0, [r7, #24]
 801141e:	f000 f917 	bl	8011650 <tcp_input_delayed_close>
 8011422:	4603      	mov	r3, r0
 8011424:	2b00      	cmp	r3, #0
 8011426:	f040 8091 	bne.w	801154c <tcp_input+0x73c>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 801142a:	4b4d      	ldr	r3, [pc, #308]	; (8011560 <tcp_input+0x750>)
 801142c:	681b      	ldr	r3, [r3, #0]
 801142e:	2b00      	cmp	r3, #0
 8011430:	d041      	beq.n	80114b6 <tcp_input+0x6a6>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8011432:	69bb      	ldr	r3, [r7, #24]
 8011434:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011436:	2b00      	cmp	r3, #0
 8011438:	d006      	beq.n	8011448 <tcp_input+0x638>
 801143a:	4b50      	ldr	r3, [pc, #320]	; (801157c <tcp_input+0x76c>)
 801143c:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8011440:	494f      	ldr	r1, [pc, #316]	; (8011580 <tcp_input+0x770>)
 8011442:	4850      	ldr	r0, [pc, #320]	; (8011584 <tcp_input+0x774>)
 8011444:	f009 fcc4 	bl	801add0 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8011448:	69bb      	ldr	r3, [r7, #24]
 801144a:	8b5b      	ldrh	r3, [r3, #26]
 801144c:	f003 0310 	and.w	r3, r3, #16
 8011450:	2b00      	cmp	r3, #0
 8011452:	d008      	beq.n	8011466 <tcp_input+0x656>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8011454:	4b42      	ldr	r3, [pc, #264]	; (8011560 <tcp_input+0x750>)
 8011456:	681b      	ldr	r3, [r3, #0]
 8011458:	4618      	mov	r0, r3
 801145a:	f7fd fcfd 	bl	800ee58 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 801145e:	69b8      	ldr	r0, [r7, #24]
 8011460:	f7fe fc32 	bl	800fcc8 <tcp_abort>
            goto aborted;
 8011464:	e091      	b.n	801158a <tcp_input+0x77a>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8011466:	69bb      	ldr	r3, [r7, #24]
 8011468:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801146c:	2b00      	cmp	r3, #0
 801146e:	d00c      	beq.n	801148a <tcp_input+0x67a>
 8011470:	69bb      	ldr	r3, [r7, #24]
 8011472:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8011476:	69bb      	ldr	r3, [r7, #24]
 8011478:	6918      	ldr	r0, [r3, #16]
 801147a:	4b39      	ldr	r3, [pc, #228]	; (8011560 <tcp_input+0x750>)
 801147c:	681a      	ldr	r2, [r3, #0]
 801147e:	2300      	movs	r3, #0
 8011480:	69b9      	ldr	r1, [r7, #24]
 8011482:	47a0      	blx	r4
 8011484:	4603      	mov	r3, r0
 8011486:	74fb      	strb	r3, [r7, #19]
 8011488:	e008      	b.n	801149c <tcp_input+0x68c>
 801148a:	4b35      	ldr	r3, [pc, #212]	; (8011560 <tcp_input+0x750>)
 801148c:	681a      	ldr	r2, [r3, #0]
 801148e:	2300      	movs	r3, #0
 8011490:	69b9      	ldr	r1, [r7, #24]
 8011492:	2000      	movs	r0, #0
 8011494:	f7ff f94c 	bl	8010730 <tcp_recv_null>
 8011498:	4603      	mov	r3, r0
 801149a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 801149c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80114a0:	f113 0f0d 	cmn.w	r3, #13
 80114a4:	d054      	beq.n	8011550 <tcp_input+0x740>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 80114a6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80114aa:	2b00      	cmp	r3, #0
 80114ac:	d003      	beq.n	80114b6 <tcp_input+0x6a6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 80114ae:	4b2c      	ldr	r3, [pc, #176]	; (8011560 <tcp_input+0x750>)
 80114b0:	681a      	ldr	r2, [r3, #0]
 80114b2:	69bb      	ldr	r3, [r7, #24]
 80114b4:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 80114b6:	4b2b      	ldr	r3, [pc, #172]	; (8011564 <tcp_input+0x754>)
 80114b8:	781b      	ldrb	r3, [r3, #0]
 80114ba:	f003 0320 	and.w	r3, r3, #32
 80114be:	2b00      	cmp	r3, #0
 80114c0:	d031      	beq.n	8011526 <tcp_input+0x716>
          if (pcb->refused_data != NULL) {
 80114c2:	69bb      	ldr	r3, [r7, #24]
 80114c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80114c6:	2b00      	cmp	r3, #0
 80114c8:	d009      	beq.n	80114de <tcp_input+0x6ce>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80114ca:	69bb      	ldr	r3, [r7, #24]
 80114cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80114ce:	7b5a      	ldrb	r2, [r3, #13]
 80114d0:	69bb      	ldr	r3, [r7, #24]
 80114d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80114d4:	f042 0220 	orr.w	r2, r2, #32
 80114d8:	b2d2      	uxtb	r2, r2
 80114da:	735a      	strb	r2, [r3, #13]
 80114dc:	e023      	b.n	8011526 <tcp_input+0x716>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80114de:	69bb      	ldr	r3, [r7, #24]
 80114e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80114e2:	f642 52a0 	movw	r2, #11680	; 0x2da0
 80114e6:	4293      	cmp	r3, r2
 80114e8:	d005      	beq.n	80114f6 <tcp_input+0x6e6>
              pcb->rcv_wnd++;
 80114ea:	69bb      	ldr	r3, [r7, #24]
 80114ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80114ee:	3301      	adds	r3, #1
 80114f0:	b29a      	uxth	r2, r3
 80114f2:	69bb      	ldr	r3, [r7, #24]
 80114f4:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 80114f6:	69bb      	ldr	r3, [r7, #24]
 80114f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80114fc:	2b00      	cmp	r3, #0
 80114fe:	d00b      	beq.n	8011518 <tcp_input+0x708>
 8011500:	69bb      	ldr	r3, [r7, #24]
 8011502:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8011506:	69bb      	ldr	r3, [r7, #24]
 8011508:	6918      	ldr	r0, [r3, #16]
 801150a:	2300      	movs	r3, #0
 801150c:	2200      	movs	r2, #0
 801150e:	69b9      	ldr	r1, [r7, #24]
 8011510:	47a0      	blx	r4
 8011512:	4603      	mov	r3, r0
 8011514:	74fb      	strb	r3, [r7, #19]
 8011516:	e001      	b.n	801151c <tcp_input+0x70c>
 8011518:	2300      	movs	r3, #0
 801151a:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801151c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011520:	f113 0f0d 	cmn.w	r3, #13
 8011524:	d016      	beq.n	8011554 <tcp_input+0x744>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8011526:	4b13      	ldr	r3, [pc, #76]	; (8011574 <tcp_input+0x764>)
 8011528:	2200      	movs	r2, #0
 801152a:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 801152c:	69b8      	ldr	r0, [r7, #24]
 801152e:	f000 f88f 	bl	8011650 <tcp_input_delayed_close>
 8011532:	4603      	mov	r3, r0
 8011534:	2b00      	cmp	r3, #0
 8011536:	d127      	bne.n	8011588 <tcp_input+0x778>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8011538:	69b8      	ldr	r0, [r7, #24]
 801153a:	f002 facf 	bl	8013adc <tcp_output>
 801153e:	e024      	b.n	801158a <tcp_input+0x77a>
        goto aborted;
 8011540:	bf00      	nop
 8011542:	e022      	b.n	801158a <tcp_input+0x77a>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8011544:	bf00      	nop
 8011546:	e020      	b.n	801158a <tcp_input+0x77a>
              goto aborted;
 8011548:	bf00      	nop
 801154a:	e01e      	b.n	801158a <tcp_input+0x77a>
          goto aborted;
 801154c:	bf00      	nop
 801154e:	e01c      	b.n	801158a <tcp_input+0x77a>
            goto aborted;
 8011550:	bf00      	nop
 8011552:	e01a      	b.n	801158a <tcp_input+0x77a>
              goto aborted;
 8011554:	bf00      	nop
 8011556:	e018      	b.n	801158a <tcp_input+0x77a>
 8011558:	20013cf0 	.word	0x20013cf0
 801155c:	20013d04 	.word	0x20013d04
 8011560:	20013d24 	.word	0x20013d24
 8011564:	20013d21 	.word	0x20013d21
 8011568:	20013d1c 	.word	0x20013d1c
 801156c:	20013d20 	.word	0x20013d20
 8011570:	20013d1e 	.word	0x20013d1e
 8011574:	20013d28 	.word	0x20013d28
 8011578:	20013ce4 	.word	0x20013ce4
 801157c:	0801ee64 	.word	0x0801ee64
 8011580:	0801f018 	.word	0x0801f018
 8011584:	0801eeb0 	.word	0x0801eeb0
          goto aborted;
 8011588:	bf00      	nop
    tcp_input_pcb = NULL;
 801158a:	4b28      	ldr	r3, [pc, #160]	; (801162c <tcp_input+0x81c>)
 801158c:	2200      	movs	r2, #0
 801158e:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8011590:	4b27      	ldr	r3, [pc, #156]	; (8011630 <tcp_input+0x820>)
 8011592:	2200      	movs	r2, #0
 8011594:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8011596:	4b27      	ldr	r3, [pc, #156]	; (8011634 <tcp_input+0x824>)
 8011598:	685b      	ldr	r3, [r3, #4]
 801159a:	2b00      	cmp	r3, #0
 801159c:	d041      	beq.n	8011622 <tcp_input+0x812>
      pbuf_free(inseg.p);
 801159e:	4b25      	ldr	r3, [pc, #148]	; (8011634 <tcp_input+0x824>)
 80115a0:	685b      	ldr	r3, [r3, #4]
 80115a2:	4618      	mov	r0, r3
 80115a4:	f7fd fc58 	bl	800ee58 <pbuf_free>
      inseg.p = NULL;
 80115a8:	4b22      	ldr	r3, [pc, #136]	; (8011634 <tcp_input+0x824>)
 80115aa:	2200      	movs	r2, #0
 80115ac:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 80115ae:	e038      	b.n	8011622 <tcp_input+0x812>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 80115b0:	4b21      	ldr	r3, [pc, #132]	; (8011638 <tcp_input+0x828>)
 80115b2:	681b      	ldr	r3, [r3, #0]
 80115b4:	899b      	ldrh	r3, [r3, #12]
 80115b6:	b29b      	uxth	r3, r3
 80115b8:	4618      	mov	r0, r3
 80115ba:	f7fb ff2b 	bl	800d414 <lwip_htons>
 80115be:	4603      	mov	r3, r0
 80115c0:	b2db      	uxtb	r3, r3
 80115c2:	f003 0304 	and.w	r3, r3, #4
 80115c6:	2b00      	cmp	r3, #0
 80115c8:	d118      	bne.n	80115fc <tcp_input+0x7ec>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80115ca:	4b1c      	ldr	r3, [pc, #112]	; (801163c <tcp_input+0x82c>)
 80115cc:	6819      	ldr	r1, [r3, #0]
 80115ce:	4b1c      	ldr	r3, [pc, #112]	; (8011640 <tcp_input+0x830>)
 80115d0:	881b      	ldrh	r3, [r3, #0]
 80115d2:	461a      	mov	r2, r3
 80115d4:	4b1b      	ldr	r3, [pc, #108]	; (8011644 <tcp_input+0x834>)
 80115d6:	681b      	ldr	r3, [r3, #0]
 80115d8:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80115da:	4b17      	ldr	r3, [pc, #92]	; (8011638 <tcp_input+0x828>)
 80115dc:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80115de:	885b      	ldrh	r3, [r3, #2]
 80115e0:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80115e2:	4a15      	ldr	r2, [pc, #84]	; (8011638 <tcp_input+0x828>)
 80115e4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80115e6:	8812      	ldrh	r2, [r2, #0]
 80115e8:	b292      	uxth	r2, r2
 80115ea:	9202      	str	r2, [sp, #8]
 80115ec:	9301      	str	r3, [sp, #4]
 80115ee:	4b16      	ldr	r3, [pc, #88]	; (8011648 <tcp_input+0x838>)
 80115f0:	9300      	str	r3, [sp, #0]
 80115f2:	4b16      	ldr	r3, [pc, #88]	; (801164c <tcp_input+0x83c>)
 80115f4:	4602      	mov	r2, r0
 80115f6:	2000      	movs	r0, #0
 80115f8:	f003 f852 	bl	80146a0 <tcp_rst>
    pbuf_free(p);
 80115fc:	6878      	ldr	r0, [r7, #4]
 80115fe:	f7fd fc2b 	bl	800ee58 <pbuf_free>
  return;
 8011602:	e00e      	b.n	8011622 <tcp_input+0x812>
    goto dropped;
 8011604:	bf00      	nop
 8011606:	e008      	b.n	801161a <tcp_input+0x80a>
    goto dropped;
 8011608:	bf00      	nop
 801160a:	e006      	b.n	801161a <tcp_input+0x80a>
      goto dropped;
 801160c:	bf00      	nop
 801160e:	e004      	b.n	801161a <tcp_input+0x80a>
    goto dropped;
 8011610:	bf00      	nop
 8011612:	e002      	b.n	801161a <tcp_input+0x80a>
      goto dropped;
 8011614:	bf00      	nop
 8011616:	e000      	b.n	801161a <tcp_input+0x80a>
      goto dropped;
 8011618:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 801161a:	6878      	ldr	r0, [r7, #4]
 801161c:	f7fd fc1c 	bl	800ee58 <pbuf_free>
 8011620:	e000      	b.n	8011624 <tcp_input+0x814>
  return;
 8011622:	bf00      	nop
}
 8011624:	3724      	adds	r7, #36	; 0x24
 8011626:	46bd      	mov	sp, r7
 8011628:	bd90      	pop	{r4, r7, pc}
 801162a:	bf00      	nop
 801162c:	20013d28 	.word	0x20013d28
 8011630:	20013d24 	.word	0x20013d24
 8011634:	20013cf0 	.word	0x20013cf0
 8011638:	20013d04 	.word	0x20013d04
 801163c:	20013d18 	.word	0x20013d18
 8011640:	20013d1e 	.word	0x20013d1e
 8011644:	20013d14 	.word	0x20013d14
 8011648:	2000a274 	.word	0x2000a274
 801164c:	2000a278 	.word	0x2000a278

08011650 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8011650:	b580      	push	{r7, lr}
 8011652:	b082      	sub	sp, #8
 8011654:	af00      	add	r7, sp, #0
 8011656:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8011658:	687b      	ldr	r3, [r7, #4]
 801165a:	2b00      	cmp	r3, #0
 801165c:	d106      	bne.n	801166c <tcp_input_delayed_close+0x1c>
 801165e:	4b17      	ldr	r3, [pc, #92]	; (80116bc <tcp_input_delayed_close+0x6c>)
 8011660:	f240 225a 	movw	r2, #602	; 0x25a
 8011664:	4916      	ldr	r1, [pc, #88]	; (80116c0 <tcp_input_delayed_close+0x70>)
 8011666:	4817      	ldr	r0, [pc, #92]	; (80116c4 <tcp_input_delayed_close+0x74>)
 8011668:	f009 fbb2 	bl	801add0 <iprintf>

  if (recv_flags & TF_CLOSED) {
 801166c:	4b16      	ldr	r3, [pc, #88]	; (80116c8 <tcp_input_delayed_close+0x78>)
 801166e:	781b      	ldrb	r3, [r3, #0]
 8011670:	f003 0310 	and.w	r3, r3, #16
 8011674:	2b00      	cmp	r3, #0
 8011676:	d01c      	beq.n	80116b2 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	8b5b      	ldrh	r3, [r3, #26]
 801167c:	f003 0310 	and.w	r3, r3, #16
 8011680:	2b00      	cmp	r3, #0
 8011682:	d10d      	bne.n	80116a0 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8011684:	687b      	ldr	r3, [r7, #4]
 8011686:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801168a:	2b00      	cmp	r3, #0
 801168c:	d008      	beq.n	80116a0 <tcp_input_delayed_close+0x50>
 801168e:	687b      	ldr	r3, [r7, #4]
 8011690:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011694:	687a      	ldr	r2, [r7, #4]
 8011696:	6912      	ldr	r2, [r2, #16]
 8011698:	f06f 010e 	mvn.w	r1, #14
 801169c:	4610      	mov	r0, r2
 801169e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80116a0:	6879      	ldr	r1, [r7, #4]
 80116a2:	480a      	ldr	r0, [pc, #40]	; (80116cc <tcp_input_delayed_close+0x7c>)
 80116a4:	f7ff fa3c 	bl	8010b20 <tcp_pcb_remove>
    tcp_free(pcb);
 80116a8:	6878      	ldr	r0, [r7, #4]
 80116aa:	f7fe f825 	bl	800f6f8 <tcp_free>
    return 1;
 80116ae:	2301      	movs	r3, #1
 80116b0:	e000      	b.n	80116b4 <tcp_input_delayed_close+0x64>
  }
  return 0;
 80116b2:	2300      	movs	r3, #0
}
 80116b4:	4618      	mov	r0, r3
 80116b6:	3708      	adds	r7, #8
 80116b8:	46bd      	mov	sp, r7
 80116ba:	bd80      	pop	{r7, pc}
 80116bc:	0801ee64 	.word	0x0801ee64
 80116c0:	0801f034 	.word	0x0801f034
 80116c4:	0801eeb0 	.word	0x0801eeb0
 80116c8:	20013d21 	.word	0x20013d21
 80116cc:	20013ce4 	.word	0x20013ce4

080116d0 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 80116d0:	b590      	push	{r4, r7, lr}
 80116d2:	b08b      	sub	sp, #44	; 0x2c
 80116d4:	af04      	add	r7, sp, #16
 80116d6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 80116d8:	4b6f      	ldr	r3, [pc, #444]	; (8011898 <tcp_listen_input+0x1c8>)
 80116da:	781b      	ldrb	r3, [r3, #0]
 80116dc:	f003 0304 	and.w	r3, r3, #4
 80116e0:	2b00      	cmp	r3, #0
 80116e2:	f040 80d2 	bne.w	801188a <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 80116e6:	687b      	ldr	r3, [r7, #4]
 80116e8:	2b00      	cmp	r3, #0
 80116ea:	d106      	bne.n	80116fa <tcp_listen_input+0x2a>
 80116ec:	4b6b      	ldr	r3, [pc, #428]	; (801189c <tcp_listen_input+0x1cc>)
 80116ee:	f240 2281 	movw	r2, #641	; 0x281
 80116f2:	496b      	ldr	r1, [pc, #428]	; (80118a0 <tcp_listen_input+0x1d0>)
 80116f4:	486b      	ldr	r0, [pc, #428]	; (80118a4 <tcp_listen_input+0x1d4>)
 80116f6:	f009 fb6b 	bl	801add0 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 80116fa:	4b67      	ldr	r3, [pc, #412]	; (8011898 <tcp_listen_input+0x1c8>)
 80116fc:	781b      	ldrb	r3, [r3, #0]
 80116fe:	f003 0310 	and.w	r3, r3, #16
 8011702:	2b00      	cmp	r3, #0
 8011704:	d019      	beq.n	801173a <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011706:	4b68      	ldr	r3, [pc, #416]	; (80118a8 <tcp_listen_input+0x1d8>)
 8011708:	6819      	ldr	r1, [r3, #0]
 801170a:	4b68      	ldr	r3, [pc, #416]	; (80118ac <tcp_listen_input+0x1dc>)
 801170c:	881b      	ldrh	r3, [r3, #0]
 801170e:	461a      	mov	r2, r3
 8011710:	4b67      	ldr	r3, [pc, #412]	; (80118b0 <tcp_listen_input+0x1e0>)
 8011712:	681b      	ldr	r3, [r3, #0]
 8011714:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011716:	4b67      	ldr	r3, [pc, #412]	; (80118b4 <tcp_listen_input+0x1e4>)
 8011718:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801171a:	885b      	ldrh	r3, [r3, #2]
 801171c:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801171e:	4a65      	ldr	r2, [pc, #404]	; (80118b4 <tcp_listen_input+0x1e4>)
 8011720:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011722:	8812      	ldrh	r2, [r2, #0]
 8011724:	b292      	uxth	r2, r2
 8011726:	9202      	str	r2, [sp, #8]
 8011728:	9301      	str	r3, [sp, #4]
 801172a:	4b63      	ldr	r3, [pc, #396]	; (80118b8 <tcp_listen_input+0x1e8>)
 801172c:	9300      	str	r3, [sp, #0]
 801172e:	4b63      	ldr	r3, [pc, #396]	; (80118bc <tcp_listen_input+0x1ec>)
 8011730:	4602      	mov	r2, r0
 8011732:	6878      	ldr	r0, [r7, #4]
 8011734:	f002 ffb4 	bl	80146a0 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8011738:	e0a9      	b.n	801188e <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 801173a:	4b57      	ldr	r3, [pc, #348]	; (8011898 <tcp_listen_input+0x1c8>)
 801173c:	781b      	ldrb	r3, [r3, #0]
 801173e:	f003 0302 	and.w	r3, r3, #2
 8011742:	2b00      	cmp	r3, #0
 8011744:	f000 80a3 	beq.w	801188e <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8011748:	687b      	ldr	r3, [r7, #4]
 801174a:	7d5b      	ldrb	r3, [r3, #21]
 801174c:	4618      	mov	r0, r3
 801174e:	f7ff f913 	bl	8010978 <tcp_alloc>
 8011752:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8011754:	697b      	ldr	r3, [r7, #20]
 8011756:	2b00      	cmp	r3, #0
 8011758:	d111      	bne.n	801177e <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801175a:	687b      	ldr	r3, [r7, #4]
 801175c:	699b      	ldr	r3, [r3, #24]
 801175e:	2b00      	cmp	r3, #0
 8011760:	d00a      	beq.n	8011778 <tcp_listen_input+0xa8>
 8011762:	687b      	ldr	r3, [r7, #4]
 8011764:	699b      	ldr	r3, [r3, #24]
 8011766:	687a      	ldr	r2, [r7, #4]
 8011768:	6910      	ldr	r0, [r2, #16]
 801176a:	f04f 32ff 	mov.w	r2, #4294967295
 801176e:	2100      	movs	r1, #0
 8011770:	4798      	blx	r3
 8011772:	4603      	mov	r3, r0
 8011774:	73bb      	strb	r3, [r7, #14]
      return;
 8011776:	e08b      	b.n	8011890 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8011778:	23f0      	movs	r3, #240	; 0xf0
 801177a:	73bb      	strb	r3, [r7, #14]
      return;
 801177c:	e088      	b.n	8011890 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801177e:	4b50      	ldr	r3, [pc, #320]	; (80118c0 <tcp_listen_input+0x1f0>)
 8011780:	695a      	ldr	r2, [r3, #20]
 8011782:	697b      	ldr	r3, [r7, #20]
 8011784:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8011786:	4b4e      	ldr	r3, [pc, #312]	; (80118c0 <tcp_listen_input+0x1f0>)
 8011788:	691a      	ldr	r2, [r3, #16]
 801178a:	697b      	ldr	r3, [r7, #20]
 801178c:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 801178e:	687b      	ldr	r3, [r7, #4]
 8011790:	8ada      	ldrh	r2, [r3, #22]
 8011792:	697b      	ldr	r3, [r7, #20]
 8011794:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8011796:	4b47      	ldr	r3, [pc, #284]	; (80118b4 <tcp_listen_input+0x1e4>)
 8011798:	681b      	ldr	r3, [r3, #0]
 801179a:	881b      	ldrh	r3, [r3, #0]
 801179c:	b29a      	uxth	r2, r3
 801179e:	697b      	ldr	r3, [r7, #20]
 80117a0:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 80117a2:	697b      	ldr	r3, [r7, #20]
 80117a4:	2203      	movs	r2, #3
 80117a6:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 80117a8:	4b41      	ldr	r3, [pc, #260]	; (80118b0 <tcp_listen_input+0x1e0>)
 80117aa:	681b      	ldr	r3, [r3, #0]
 80117ac:	1c5a      	adds	r2, r3, #1
 80117ae:	697b      	ldr	r3, [r7, #20]
 80117b0:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80117b2:	697b      	ldr	r3, [r7, #20]
 80117b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80117b6:	697b      	ldr	r3, [r7, #20]
 80117b8:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 80117ba:	6978      	ldr	r0, [r7, #20]
 80117bc:	f7ff fa44 	bl	8010c48 <tcp_next_iss>
 80117c0:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 80117c2:	697b      	ldr	r3, [r7, #20]
 80117c4:	693a      	ldr	r2, [r7, #16]
 80117c6:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 80117c8:	697b      	ldr	r3, [r7, #20]
 80117ca:	693a      	ldr	r2, [r7, #16]
 80117cc:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 80117ce:	697b      	ldr	r3, [r7, #20]
 80117d0:	693a      	ldr	r2, [r7, #16]
 80117d2:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 80117d4:	697b      	ldr	r3, [r7, #20]
 80117d6:	693a      	ldr	r2, [r7, #16]
 80117d8:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80117da:	4b35      	ldr	r3, [pc, #212]	; (80118b0 <tcp_listen_input+0x1e0>)
 80117dc:	681b      	ldr	r3, [r3, #0]
 80117de:	1e5a      	subs	r2, r3, #1
 80117e0:	697b      	ldr	r3, [r7, #20]
 80117e2:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 80117e4:	687b      	ldr	r3, [r7, #4]
 80117e6:	691a      	ldr	r2, [r3, #16]
 80117e8:	697b      	ldr	r3, [r7, #20]
 80117ea:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 80117ec:	697b      	ldr	r3, [r7, #20]
 80117ee:	687a      	ldr	r2, [r7, #4]
 80117f0:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80117f2:	687b      	ldr	r3, [r7, #4]
 80117f4:	7a5b      	ldrb	r3, [r3, #9]
 80117f6:	f003 030c 	and.w	r3, r3, #12
 80117fa:	b2da      	uxtb	r2, r3
 80117fc:	697b      	ldr	r3, [r7, #20]
 80117fe:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8011800:	687b      	ldr	r3, [r7, #4]
 8011802:	7a1a      	ldrb	r2, [r3, #8]
 8011804:	697b      	ldr	r3, [r7, #20]
 8011806:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8011808:	4b2e      	ldr	r3, [pc, #184]	; (80118c4 <tcp_listen_input+0x1f4>)
 801180a:	681a      	ldr	r2, [r3, #0]
 801180c:	697b      	ldr	r3, [r7, #20]
 801180e:	60da      	str	r2, [r3, #12]
 8011810:	4a2c      	ldr	r2, [pc, #176]	; (80118c4 <tcp_listen_input+0x1f4>)
 8011812:	697b      	ldr	r3, [r7, #20]
 8011814:	6013      	str	r3, [r2, #0]
 8011816:	f003 f905 	bl	8014a24 <tcp_timer_needed>
 801181a:	4b2b      	ldr	r3, [pc, #172]	; (80118c8 <tcp_listen_input+0x1f8>)
 801181c:	2201      	movs	r2, #1
 801181e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8011820:	6978      	ldr	r0, [r7, #20]
 8011822:	f001 fd8f 	bl	8013344 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8011826:	4b23      	ldr	r3, [pc, #140]	; (80118b4 <tcp_listen_input+0x1e4>)
 8011828:	681b      	ldr	r3, [r3, #0]
 801182a:	89db      	ldrh	r3, [r3, #14]
 801182c:	b29a      	uxth	r2, r3
 801182e:	697b      	ldr	r3, [r7, #20]
 8011830:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8011834:	697b      	ldr	r3, [r7, #20]
 8011836:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801183a:	697b      	ldr	r3, [r7, #20]
 801183c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8011840:	697b      	ldr	r3, [r7, #20]
 8011842:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8011844:	697b      	ldr	r3, [r7, #20]
 8011846:	3304      	adds	r3, #4
 8011848:	4618      	mov	r0, r3
 801184a:	f007 f835 	bl	80188b8 <ip4_route>
 801184e:	4601      	mov	r1, r0
 8011850:	697b      	ldr	r3, [r7, #20]
 8011852:	3304      	adds	r3, #4
 8011854:	461a      	mov	r2, r3
 8011856:	4620      	mov	r0, r4
 8011858:	f7ff fa1c 	bl	8010c94 <tcp_eff_send_mss_netif>
 801185c:	4603      	mov	r3, r0
 801185e:	461a      	mov	r2, r3
 8011860:	697b      	ldr	r3, [r7, #20]
 8011862:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8011864:	2112      	movs	r1, #18
 8011866:	6978      	ldr	r0, [r7, #20]
 8011868:	f002 f84a 	bl	8013900 <tcp_enqueue_flags>
 801186c:	4603      	mov	r3, r0
 801186e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8011870:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011874:	2b00      	cmp	r3, #0
 8011876:	d004      	beq.n	8011882 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8011878:	2100      	movs	r1, #0
 801187a:	6978      	ldr	r0, [r7, #20]
 801187c:	f7fe f966 	bl	800fb4c <tcp_abandon>
      return;
 8011880:	e006      	b.n	8011890 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8011882:	6978      	ldr	r0, [r7, #20]
 8011884:	f002 f92a 	bl	8013adc <tcp_output>
  return;
 8011888:	e001      	b.n	801188e <tcp_listen_input+0x1be>
    return;
 801188a:	bf00      	nop
 801188c:	e000      	b.n	8011890 <tcp_listen_input+0x1c0>
  return;
 801188e:	bf00      	nop
}
 8011890:	371c      	adds	r7, #28
 8011892:	46bd      	mov	sp, r7
 8011894:	bd90      	pop	{r4, r7, pc}
 8011896:	bf00      	nop
 8011898:	20013d20 	.word	0x20013d20
 801189c:	0801ee64 	.word	0x0801ee64
 80118a0:	0801f05c 	.word	0x0801f05c
 80118a4:	0801eeb0 	.word	0x0801eeb0
 80118a8:	20013d18 	.word	0x20013d18
 80118ac:	20013d1e 	.word	0x20013d1e
 80118b0:	20013d14 	.word	0x20013d14
 80118b4:	20013d04 	.word	0x20013d04
 80118b8:	2000a274 	.word	0x2000a274
 80118bc:	2000a278 	.word	0x2000a278
 80118c0:	2000a264 	.word	0x2000a264
 80118c4:	20013ce4 	.word	0x20013ce4
 80118c8:	20013cec 	.word	0x20013cec

080118cc <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 80118cc:	b580      	push	{r7, lr}
 80118ce:	b086      	sub	sp, #24
 80118d0:	af04      	add	r7, sp, #16
 80118d2:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 80118d4:	4b2f      	ldr	r3, [pc, #188]	; (8011994 <tcp_timewait_input+0xc8>)
 80118d6:	781b      	ldrb	r3, [r3, #0]
 80118d8:	f003 0304 	and.w	r3, r3, #4
 80118dc:	2b00      	cmp	r3, #0
 80118de:	d153      	bne.n	8011988 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	2b00      	cmp	r3, #0
 80118e4:	d106      	bne.n	80118f4 <tcp_timewait_input+0x28>
 80118e6:	4b2c      	ldr	r3, [pc, #176]	; (8011998 <tcp_timewait_input+0xcc>)
 80118e8:	f240 22ee 	movw	r2, #750	; 0x2ee
 80118ec:	492b      	ldr	r1, [pc, #172]	; (801199c <tcp_timewait_input+0xd0>)
 80118ee:	482c      	ldr	r0, [pc, #176]	; (80119a0 <tcp_timewait_input+0xd4>)
 80118f0:	f009 fa6e 	bl	801add0 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 80118f4:	4b27      	ldr	r3, [pc, #156]	; (8011994 <tcp_timewait_input+0xc8>)
 80118f6:	781b      	ldrb	r3, [r3, #0]
 80118f8:	f003 0302 	and.w	r3, r3, #2
 80118fc:	2b00      	cmp	r3, #0
 80118fe:	d02a      	beq.n	8011956 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8011900:	4b28      	ldr	r3, [pc, #160]	; (80119a4 <tcp_timewait_input+0xd8>)
 8011902:	681a      	ldr	r2, [r3, #0]
 8011904:	687b      	ldr	r3, [r7, #4]
 8011906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011908:	1ad3      	subs	r3, r2, r3
 801190a:	2b00      	cmp	r3, #0
 801190c:	db2d      	blt.n	801196a <tcp_timewait_input+0x9e>
 801190e:	4b25      	ldr	r3, [pc, #148]	; (80119a4 <tcp_timewait_input+0xd8>)
 8011910:	681a      	ldr	r2, [r3, #0]
 8011912:	687b      	ldr	r3, [r7, #4]
 8011914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011916:	6879      	ldr	r1, [r7, #4]
 8011918:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801191a:	440b      	add	r3, r1
 801191c:	1ad3      	subs	r3, r2, r3
 801191e:	2b00      	cmp	r3, #0
 8011920:	dc23      	bgt.n	801196a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011922:	4b21      	ldr	r3, [pc, #132]	; (80119a8 <tcp_timewait_input+0xdc>)
 8011924:	6819      	ldr	r1, [r3, #0]
 8011926:	4b21      	ldr	r3, [pc, #132]	; (80119ac <tcp_timewait_input+0xe0>)
 8011928:	881b      	ldrh	r3, [r3, #0]
 801192a:	461a      	mov	r2, r3
 801192c:	4b1d      	ldr	r3, [pc, #116]	; (80119a4 <tcp_timewait_input+0xd8>)
 801192e:	681b      	ldr	r3, [r3, #0]
 8011930:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011932:	4b1f      	ldr	r3, [pc, #124]	; (80119b0 <tcp_timewait_input+0xe4>)
 8011934:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011936:	885b      	ldrh	r3, [r3, #2]
 8011938:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801193a:	4a1d      	ldr	r2, [pc, #116]	; (80119b0 <tcp_timewait_input+0xe4>)
 801193c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801193e:	8812      	ldrh	r2, [r2, #0]
 8011940:	b292      	uxth	r2, r2
 8011942:	9202      	str	r2, [sp, #8]
 8011944:	9301      	str	r3, [sp, #4]
 8011946:	4b1b      	ldr	r3, [pc, #108]	; (80119b4 <tcp_timewait_input+0xe8>)
 8011948:	9300      	str	r3, [sp, #0]
 801194a:	4b1b      	ldr	r3, [pc, #108]	; (80119b8 <tcp_timewait_input+0xec>)
 801194c:	4602      	mov	r2, r0
 801194e:	6878      	ldr	r0, [r7, #4]
 8011950:	f002 fea6 	bl	80146a0 <tcp_rst>
      return;
 8011954:	e01b      	b.n	801198e <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8011956:	4b0f      	ldr	r3, [pc, #60]	; (8011994 <tcp_timewait_input+0xc8>)
 8011958:	781b      	ldrb	r3, [r3, #0]
 801195a:	f003 0301 	and.w	r3, r3, #1
 801195e:	2b00      	cmp	r3, #0
 8011960:	d003      	beq.n	801196a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8011962:	4b16      	ldr	r3, [pc, #88]	; (80119bc <tcp_timewait_input+0xf0>)
 8011964:	681a      	ldr	r2, [r3, #0]
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 801196a:	4b10      	ldr	r3, [pc, #64]	; (80119ac <tcp_timewait_input+0xe0>)
 801196c:	881b      	ldrh	r3, [r3, #0]
 801196e:	2b00      	cmp	r3, #0
 8011970:	d00c      	beq.n	801198c <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8011972:	687b      	ldr	r3, [r7, #4]
 8011974:	8b5b      	ldrh	r3, [r3, #26]
 8011976:	f043 0302 	orr.w	r3, r3, #2
 801197a:	b29a      	uxth	r2, r3
 801197c:	687b      	ldr	r3, [r7, #4]
 801197e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8011980:	6878      	ldr	r0, [r7, #4]
 8011982:	f002 f8ab 	bl	8013adc <tcp_output>
  }
  return;
 8011986:	e001      	b.n	801198c <tcp_timewait_input+0xc0>
    return;
 8011988:	bf00      	nop
 801198a:	e000      	b.n	801198e <tcp_timewait_input+0xc2>
  return;
 801198c:	bf00      	nop
}
 801198e:	3708      	adds	r7, #8
 8011990:	46bd      	mov	sp, r7
 8011992:	bd80      	pop	{r7, pc}
 8011994:	20013d20 	.word	0x20013d20
 8011998:	0801ee64 	.word	0x0801ee64
 801199c:	0801f07c 	.word	0x0801f07c
 80119a0:	0801eeb0 	.word	0x0801eeb0
 80119a4:	20013d14 	.word	0x20013d14
 80119a8:	20013d18 	.word	0x20013d18
 80119ac:	20013d1e 	.word	0x20013d1e
 80119b0:	20013d04 	.word	0x20013d04
 80119b4:	2000a274 	.word	0x2000a274
 80119b8:	2000a278 	.word	0x2000a278
 80119bc:	20013cd8 	.word	0x20013cd8

080119c0 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 80119c0:	b590      	push	{r4, r7, lr}
 80119c2:	b08d      	sub	sp, #52	; 0x34
 80119c4:	af04      	add	r7, sp, #16
 80119c6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 80119c8:	2300      	movs	r3, #0
 80119ca:	77fb      	strb	r3, [r7, #31]
  err_t err;

  err = ERR_OK;
 80119cc:	2300      	movs	r3, #0
 80119ce:	77bb      	strb	r3, [r7, #30]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 80119d0:	687b      	ldr	r3, [r7, #4]
 80119d2:	2b00      	cmp	r3, #0
 80119d4:	d106      	bne.n	80119e4 <tcp_process+0x24>
 80119d6:	4b9d      	ldr	r3, [pc, #628]	; (8011c4c <tcp_process+0x28c>)
 80119d8:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80119dc:	499c      	ldr	r1, [pc, #624]	; (8011c50 <tcp_process+0x290>)
 80119de:	489d      	ldr	r0, [pc, #628]	; (8011c54 <tcp_process+0x294>)
 80119e0:	f009 f9f6 	bl	801add0 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 80119e4:	4b9c      	ldr	r3, [pc, #624]	; (8011c58 <tcp_process+0x298>)
 80119e6:	781b      	ldrb	r3, [r3, #0]
 80119e8:	f003 0304 	and.w	r3, r3, #4
 80119ec:	2b00      	cmp	r3, #0
 80119ee:	d04e      	beq.n	8011a8e <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	7d1b      	ldrb	r3, [r3, #20]
 80119f4:	2b02      	cmp	r3, #2
 80119f6:	d108      	bne.n	8011a0a <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 80119f8:	687b      	ldr	r3, [r7, #4]
 80119fa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80119fc:	4b97      	ldr	r3, [pc, #604]	; (8011c5c <tcp_process+0x29c>)
 80119fe:	681b      	ldr	r3, [r3, #0]
 8011a00:	429a      	cmp	r2, r3
 8011a02:	d123      	bne.n	8011a4c <tcp_process+0x8c>
        acceptable = 1;
 8011a04:	2301      	movs	r3, #1
 8011a06:	77fb      	strb	r3, [r7, #31]
 8011a08:	e020      	b.n	8011a4c <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8011a0a:	687b      	ldr	r3, [r7, #4]
 8011a0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011a0e:	4b94      	ldr	r3, [pc, #592]	; (8011c60 <tcp_process+0x2a0>)
 8011a10:	681b      	ldr	r3, [r3, #0]
 8011a12:	429a      	cmp	r2, r3
 8011a14:	d102      	bne.n	8011a1c <tcp_process+0x5c>
        acceptable = 1;
 8011a16:	2301      	movs	r3, #1
 8011a18:	77fb      	strb	r3, [r7, #31]
 8011a1a:	e017      	b.n	8011a4c <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8011a1c:	4b90      	ldr	r3, [pc, #576]	; (8011c60 <tcp_process+0x2a0>)
 8011a1e:	681a      	ldr	r2, [r3, #0]
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a24:	1ad3      	subs	r3, r2, r3
 8011a26:	2b00      	cmp	r3, #0
 8011a28:	db10      	blt.n	8011a4c <tcp_process+0x8c>
 8011a2a:	4b8d      	ldr	r3, [pc, #564]	; (8011c60 <tcp_process+0x2a0>)
 8011a2c:	681a      	ldr	r2, [r3, #0]
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a32:	6879      	ldr	r1, [r7, #4]
 8011a34:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011a36:	440b      	add	r3, r1
 8011a38:	1ad3      	subs	r3, r2, r3
 8011a3a:	2b00      	cmp	r3, #0
 8011a3c:	dc06      	bgt.n	8011a4c <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8011a3e:	687b      	ldr	r3, [r7, #4]
 8011a40:	8b5b      	ldrh	r3, [r3, #26]
 8011a42:	f043 0302 	orr.w	r3, r3, #2
 8011a46:	b29a      	uxth	r2, r3
 8011a48:	687b      	ldr	r3, [r7, #4]
 8011a4a:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8011a4c:	7ffb      	ldrb	r3, [r7, #31]
 8011a4e:	2b00      	cmp	r3, #0
 8011a50:	d01b      	beq.n	8011a8a <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	7d1b      	ldrb	r3, [r3, #20]
 8011a56:	2b00      	cmp	r3, #0
 8011a58:	d106      	bne.n	8011a68 <tcp_process+0xa8>
 8011a5a:	4b7c      	ldr	r3, [pc, #496]	; (8011c4c <tcp_process+0x28c>)
 8011a5c:	f44f 724e 	mov.w	r2, #824	; 0x338
 8011a60:	4980      	ldr	r1, [pc, #512]	; (8011c64 <tcp_process+0x2a4>)
 8011a62:	487c      	ldr	r0, [pc, #496]	; (8011c54 <tcp_process+0x294>)
 8011a64:	f009 f9b4 	bl	801add0 <iprintf>
      recv_flags |= TF_RESET;
 8011a68:	4b7f      	ldr	r3, [pc, #508]	; (8011c68 <tcp_process+0x2a8>)
 8011a6a:	781b      	ldrb	r3, [r3, #0]
 8011a6c:	f043 0308 	orr.w	r3, r3, #8
 8011a70:	b2da      	uxtb	r2, r3
 8011a72:	4b7d      	ldr	r3, [pc, #500]	; (8011c68 <tcp_process+0x2a8>)
 8011a74:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8011a76:	687b      	ldr	r3, [r7, #4]
 8011a78:	8b5b      	ldrh	r3, [r3, #26]
 8011a7a:	f023 0301 	bic.w	r3, r3, #1
 8011a7e:	b29a      	uxth	r2, r3
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8011a84:	f06f 030d 	mvn.w	r3, #13
 8011a88:	e37a      	b.n	8012180 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8011a8a:	2300      	movs	r3, #0
 8011a8c:	e378      	b.n	8012180 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8011a8e:	4b72      	ldr	r3, [pc, #456]	; (8011c58 <tcp_process+0x298>)
 8011a90:	781b      	ldrb	r3, [r3, #0]
 8011a92:	f003 0302 	and.w	r3, r3, #2
 8011a96:	2b00      	cmp	r3, #0
 8011a98:	d010      	beq.n	8011abc <tcp_process+0xfc>
 8011a9a:	687b      	ldr	r3, [r7, #4]
 8011a9c:	7d1b      	ldrb	r3, [r3, #20]
 8011a9e:	2b02      	cmp	r3, #2
 8011aa0:	d00c      	beq.n	8011abc <tcp_process+0xfc>
 8011aa2:	687b      	ldr	r3, [r7, #4]
 8011aa4:	7d1b      	ldrb	r3, [r3, #20]
 8011aa6:	2b03      	cmp	r3, #3
 8011aa8:	d008      	beq.n	8011abc <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8011aaa:	687b      	ldr	r3, [r7, #4]
 8011aac:	8b5b      	ldrh	r3, [r3, #26]
 8011aae:	f043 0302 	orr.w	r3, r3, #2
 8011ab2:	b29a      	uxth	r2, r3
 8011ab4:	687b      	ldr	r3, [r7, #4]
 8011ab6:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8011ab8:	2300      	movs	r3, #0
 8011aba:	e361      	b.n	8012180 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	8b5b      	ldrh	r3, [r3, #26]
 8011ac0:	f003 0310 	and.w	r3, r3, #16
 8011ac4:	2b00      	cmp	r3, #0
 8011ac6:	d103      	bne.n	8011ad0 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8011ac8:	4b68      	ldr	r3, [pc, #416]	; (8011c6c <tcp_process+0x2ac>)
 8011aca:	681a      	ldr	r2, [r3, #0]
 8011acc:	687b      	ldr	r3, [r7, #4]
 8011ace:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8011ad0:	687b      	ldr	r3, [r7, #4]
 8011ad2:	2200      	movs	r2, #0
 8011ad4:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8011ad8:	687b      	ldr	r3, [r7, #4]
 8011ada:	2200      	movs	r2, #0
 8011adc:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8011ae0:	6878      	ldr	r0, [r7, #4]
 8011ae2:	f001 fc2f 	bl	8013344 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8011ae6:	687b      	ldr	r3, [r7, #4]
 8011ae8:	7d1b      	ldrb	r3, [r3, #20]
 8011aea:	3b02      	subs	r3, #2
 8011aec:	2b07      	cmp	r3, #7
 8011aee:	f200 8337 	bhi.w	8012160 <tcp_process+0x7a0>
 8011af2:	a201      	add	r2, pc, #4	; (adr r2, 8011af8 <tcp_process+0x138>)
 8011af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011af8:	08011b19 	.word	0x08011b19
 8011afc:	08011d49 	.word	0x08011d49
 8011b00:	08011ec1 	.word	0x08011ec1
 8011b04:	08011eeb 	.word	0x08011eeb
 8011b08:	0801200f 	.word	0x0801200f
 8011b0c:	08011ec1 	.word	0x08011ec1
 8011b10:	0801209b 	.word	0x0801209b
 8011b14:	0801212b 	.word	0x0801212b
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8011b18:	4b4f      	ldr	r3, [pc, #316]	; (8011c58 <tcp_process+0x298>)
 8011b1a:	781b      	ldrb	r3, [r3, #0]
 8011b1c:	f003 0310 	and.w	r3, r3, #16
 8011b20:	2b00      	cmp	r3, #0
 8011b22:	f000 80e4 	beq.w	8011cee <tcp_process+0x32e>
 8011b26:	4b4c      	ldr	r3, [pc, #304]	; (8011c58 <tcp_process+0x298>)
 8011b28:	781b      	ldrb	r3, [r3, #0]
 8011b2a:	f003 0302 	and.w	r3, r3, #2
 8011b2e:	2b00      	cmp	r3, #0
 8011b30:	f000 80dd 	beq.w	8011cee <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8011b34:	687b      	ldr	r3, [r7, #4]
 8011b36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011b38:	1c5a      	adds	r2, r3, #1
 8011b3a:	4b48      	ldr	r3, [pc, #288]	; (8011c5c <tcp_process+0x29c>)
 8011b3c:	681b      	ldr	r3, [r3, #0]
 8011b3e:	429a      	cmp	r2, r3
 8011b40:	f040 80d5 	bne.w	8011cee <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8011b44:	4b46      	ldr	r3, [pc, #280]	; (8011c60 <tcp_process+0x2a0>)
 8011b46:	681b      	ldr	r3, [r3, #0]
 8011b48:	1c5a      	adds	r2, r3, #1
 8011b4a:	687b      	ldr	r3, [r7, #4]
 8011b4c:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8011b4e:	687b      	ldr	r3, [r7, #4]
 8011b50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011b52:	687b      	ldr	r3, [r7, #4]
 8011b54:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8011b56:	4b41      	ldr	r3, [pc, #260]	; (8011c5c <tcp_process+0x29c>)
 8011b58:	681a      	ldr	r2, [r3, #0]
 8011b5a:	687b      	ldr	r3, [r7, #4]
 8011b5c:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8011b5e:	4b44      	ldr	r3, [pc, #272]	; (8011c70 <tcp_process+0x2b0>)
 8011b60:	681b      	ldr	r3, [r3, #0]
 8011b62:	89db      	ldrh	r3, [r3, #14]
 8011b64:	b29a      	uxth	r2, r3
 8011b66:	687b      	ldr	r3, [r7, #4]
 8011b68:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8011b6c:	687b      	ldr	r3, [r7, #4]
 8011b6e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8011b72:	687b      	ldr	r3, [r7, #4]
 8011b74:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8011b78:	4b39      	ldr	r3, [pc, #228]	; (8011c60 <tcp_process+0x2a0>)
 8011b7a:	681b      	ldr	r3, [r3, #0]
 8011b7c:	1e5a      	subs	r2, r3, #1
 8011b7e:	687b      	ldr	r3, [r7, #4]
 8011b80:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8011b82:	687b      	ldr	r3, [r7, #4]
 8011b84:	2204      	movs	r2, #4
 8011b86:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8011b88:	687b      	ldr	r3, [r7, #4]
 8011b8a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8011b8c:	687b      	ldr	r3, [r7, #4]
 8011b8e:	3304      	adds	r3, #4
 8011b90:	4618      	mov	r0, r3
 8011b92:	f006 fe91 	bl	80188b8 <ip4_route>
 8011b96:	4601      	mov	r1, r0
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	3304      	adds	r3, #4
 8011b9c:	461a      	mov	r2, r3
 8011b9e:	4620      	mov	r0, r4
 8011ba0:	f7ff f878 	bl	8010c94 <tcp_eff_send_mss_netif>
 8011ba4:	4603      	mov	r3, r0
 8011ba6:	461a      	mov	r2, r3
 8011ba8:	687b      	ldr	r3, [r7, #4]
 8011baa:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8011bac:	687b      	ldr	r3, [r7, #4]
 8011bae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011bb0:	009a      	lsls	r2, r3, #2
 8011bb2:	687b      	ldr	r3, [r7, #4]
 8011bb4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011bb6:	005b      	lsls	r3, r3, #1
 8011bb8:	f241 111c 	movw	r1, #4380	; 0x111c
 8011bbc:	428b      	cmp	r3, r1
 8011bbe:	bf38      	it	cc
 8011bc0:	460b      	movcc	r3, r1
 8011bc2:	429a      	cmp	r2, r3
 8011bc4:	d204      	bcs.n	8011bd0 <tcp_process+0x210>
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011bca:	009b      	lsls	r3, r3, #2
 8011bcc:	b29b      	uxth	r3, r3
 8011bce:	e00d      	b.n	8011bec <tcp_process+0x22c>
 8011bd0:	687b      	ldr	r3, [r7, #4]
 8011bd2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011bd4:	005b      	lsls	r3, r3, #1
 8011bd6:	f241 121c 	movw	r2, #4380	; 0x111c
 8011bda:	4293      	cmp	r3, r2
 8011bdc:	d904      	bls.n	8011be8 <tcp_process+0x228>
 8011bde:	687b      	ldr	r3, [r7, #4]
 8011be0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011be2:	005b      	lsls	r3, r3, #1
 8011be4:	b29b      	uxth	r3, r3
 8011be6:	e001      	b.n	8011bec <tcp_process+0x22c>
 8011be8:	f241 131c 	movw	r3, #4380	; 0x111c
 8011bec:	687a      	ldr	r2, [r7, #4]
 8011bee:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8011bf2:	687b      	ldr	r3, [r7, #4]
 8011bf4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011bf8:	2b00      	cmp	r3, #0
 8011bfa:	d106      	bne.n	8011c0a <tcp_process+0x24a>
 8011bfc:	4b13      	ldr	r3, [pc, #76]	; (8011c4c <tcp_process+0x28c>)
 8011bfe:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8011c02:	491c      	ldr	r1, [pc, #112]	; (8011c74 <tcp_process+0x2b4>)
 8011c04:	4813      	ldr	r0, [pc, #76]	; (8011c54 <tcp_process+0x294>)
 8011c06:	f009 f8e3 	bl	801add0 <iprintf>
        --pcb->snd_queuelen;
 8011c0a:	687b      	ldr	r3, [r7, #4]
 8011c0c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011c10:	3b01      	subs	r3, #1
 8011c12:	b29a      	uxth	r2, r3
 8011c14:	687b      	ldr	r3, [r7, #4]
 8011c16:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8011c1a:	687b      	ldr	r3, [r7, #4]
 8011c1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011c1e:	617b      	str	r3, [r7, #20]
        if (rseg == NULL) {
 8011c20:	697b      	ldr	r3, [r7, #20]
 8011c22:	2b00      	cmp	r3, #0
 8011c24:	d12a      	bne.n	8011c7c <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8011c26:	687b      	ldr	r3, [r7, #4]
 8011c28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011c2a:	617b      	str	r3, [r7, #20]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8011c2c:	697b      	ldr	r3, [r7, #20]
 8011c2e:	2b00      	cmp	r3, #0
 8011c30:	d106      	bne.n	8011c40 <tcp_process+0x280>
 8011c32:	4b06      	ldr	r3, [pc, #24]	; (8011c4c <tcp_process+0x28c>)
 8011c34:	f44f 725d 	mov.w	r2, #884	; 0x374
 8011c38:	490f      	ldr	r1, [pc, #60]	; (8011c78 <tcp_process+0x2b8>)
 8011c3a:	4806      	ldr	r0, [pc, #24]	; (8011c54 <tcp_process+0x294>)
 8011c3c:	f009 f8c8 	bl	801add0 <iprintf>
          pcb->unsent = rseg->next;
 8011c40:	697b      	ldr	r3, [r7, #20]
 8011c42:	681a      	ldr	r2, [r3, #0]
 8011c44:	687b      	ldr	r3, [r7, #4]
 8011c46:	66da      	str	r2, [r3, #108]	; 0x6c
 8011c48:	e01c      	b.n	8011c84 <tcp_process+0x2c4>
 8011c4a:	bf00      	nop
 8011c4c:	0801ee64 	.word	0x0801ee64
 8011c50:	0801f09c 	.word	0x0801f09c
 8011c54:	0801eeb0 	.word	0x0801eeb0
 8011c58:	20013d20 	.word	0x20013d20
 8011c5c:	20013d18 	.word	0x20013d18
 8011c60:	20013d14 	.word	0x20013d14
 8011c64:	0801f0b8 	.word	0x0801f0b8
 8011c68:	20013d21 	.word	0x20013d21
 8011c6c:	20013cd8 	.word	0x20013cd8
 8011c70:	20013d04 	.word	0x20013d04
 8011c74:	0801f0d8 	.word	0x0801f0d8
 8011c78:	0801f0f0 	.word	0x0801f0f0
        } else {
          pcb->unacked = rseg->next;
 8011c7c:	697b      	ldr	r3, [r7, #20]
 8011c7e:	681a      	ldr	r2, [r3, #0]
 8011c80:	687b      	ldr	r3, [r7, #4]
 8011c82:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8011c84:	6978      	ldr	r0, [r7, #20]
 8011c86:	f7fe fd0e 	bl	80106a6 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011c8e:	2b00      	cmp	r3, #0
 8011c90:	d104      	bne.n	8011c9c <tcp_process+0x2dc>
          pcb->rtime = -1;
 8011c92:	687b      	ldr	r3, [r7, #4]
 8011c94:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011c98:	861a      	strh	r2, [r3, #48]	; 0x30
 8011c9a:	e006      	b.n	8011caa <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8011c9c:	687b      	ldr	r3, [r7, #4]
 8011c9e:	2200      	movs	r2, #0
 8011ca0:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8011ca2:	687b      	ldr	r3, [r7, #4]
 8011ca4:	2200      	movs	r2, #0
 8011ca6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8011caa:	687b      	ldr	r3, [r7, #4]
 8011cac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011cb0:	2b00      	cmp	r3, #0
 8011cb2:	d00a      	beq.n	8011cca <tcp_process+0x30a>
 8011cb4:	687b      	ldr	r3, [r7, #4]
 8011cb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011cba:	687a      	ldr	r2, [r7, #4]
 8011cbc:	6910      	ldr	r0, [r2, #16]
 8011cbe:	2200      	movs	r2, #0
 8011cc0:	6879      	ldr	r1, [r7, #4]
 8011cc2:	4798      	blx	r3
 8011cc4:	4603      	mov	r3, r0
 8011cc6:	77bb      	strb	r3, [r7, #30]
 8011cc8:	e001      	b.n	8011cce <tcp_process+0x30e>
 8011cca:	2300      	movs	r3, #0
 8011ccc:	77bb      	strb	r3, [r7, #30]
        if (err == ERR_ABRT) {
 8011cce:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8011cd2:	f113 0f0d 	cmn.w	r3, #13
 8011cd6:	d102      	bne.n	8011cde <tcp_process+0x31e>
          return ERR_ABRT;
 8011cd8:	f06f 030c 	mvn.w	r3, #12
 8011cdc:	e250      	b.n	8012180 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8011cde:	687b      	ldr	r3, [r7, #4]
 8011ce0:	8b5b      	ldrh	r3, [r3, #26]
 8011ce2:	f043 0302 	orr.w	r3, r3, #2
 8011ce6:	b29a      	uxth	r2, r3
 8011ce8:	687b      	ldr	r3, [r7, #4]
 8011cea:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8011cec:	e23a      	b.n	8012164 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8011cee:	4b98      	ldr	r3, [pc, #608]	; (8011f50 <tcp_process+0x590>)
 8011cf0:	781b      	ldrb	r3, [r3, #0]
 8011cf2:	f003 0310 	and.w	r3, r3, #16
 8011cf6:	2b00      	cmp	r3, #0
 8011cf8:	f000 8234 	beq.w	8012164 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011cfc:	4b95      	ldr	r3, [pc, #596]	; (8011f54 <tcp_process+0x594>)
 8011cfe:	6819      	ldr	r1, [r3, #0]
 8011d00:	4b95      	ldr	r3, [pc, #596]	; (8011f58 <tcp_process+0x598>)
 8011d02:	881b      	ldrh	r3, [r3, #0]
 8011d04:	461a      	mov	r2, r3
 8011d06:	4b95      	ldr	r3, [pc, #596]	; (8011f5c <tcp_process+0x59c>)
 8011d08:	681b      	ldr	r3, [r3, #0]
 8011d0a:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011d0c:	4b94      	ldr	r3, [pc, #592]	; (8011f60 <tcp_process+0x5a0>)
 8011d0e:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011d10:	885b      	ldrh	r3, [r3, #2]
 8011d12:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011d14:	4a92      	ldr	r2, [pc, #584]	; (8011f60 <tcp_process+0x5a0>)
 8011d16:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011d18:	8812      	ldrh	r2, [r2, #0]
 8011d1a:	b292      	uxth	r2, r2
 8011d1c:	9202      	str	r2, [sp, #8]
 8011d1e:	9301      	str	r3, [sp, #4]
 8011d20:	4b90      	ldr	r3, [pc, #576]	; (8011f64 <tcp_process+0x5a4>)
 8011d22:	9300      	str	r3, [sp, #0]
 8011d24:	4b90      	ldr	r3, [pc, #576]	; (8011f68 <tcp_process+0x5a8>)
 8011d26:	4602      	mov	r2, r0
 8011d28:	6878      	ldr	r0, [r7, #4]
 8011d2a:	f002 fcb9 	bl	80146a0 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8011d2e:	687b      	ldr	r3, [r7, #4]
 8011d30:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011d34:	2b05      	cmp	r3, #5
 8011d36:	f200 8215 	bhi.w	8012164 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8011d3a:	687b      	ldr	r3, [r7, #4]
 8011d3c:	2200      	movs	r2, #0
 8011d3e:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8011d40:	6878      	ldr	r0, [r7, #4]
 8011d42:	f002 fa73 	bl	801422c <tcp_rexmit_rto>
      break;
 8011d46:	e20d      	b.n	8012164 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8011d48:	4b81      	ldr	r3, [pc, #516]	; (8011f50 <tcp_process+0x590>)
 8011d4a:	781b      	ldrb	r3, [r3, #0]
 8011d4c:	f003 0310 	and.w	r3, r3, #16
 8011d50:	2b00      	cmp	r3, #0
 8011d52:	f000 80a1 	beq.w	8011e98 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011d56:	4b7f      	ldr	r3, [pc, #508]	; (8011f54 <tcp_process+0x594>)
 8011d58:	681a      	ldr	r2, [r3, #0]
 8011d5a:	687b      	ldr	r3, [r7, #4]
 8011d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011d5e:	1ad3      	subs	r3, r2, r3
 8011d60:	3b01      	subs	r3, #1
 8011d62:	2b00      	cmp	r3, #0
 8011d64:	db7e      	blt.n	8011e64 <tcp_process+0x4a4>
 8011d66:	4b7b      	ldr	r3, [pc, #492]	; (8011f54 <tcp_process+0x594>)
 8011d68:	681a      	ldr	r2, [r3, #0]
 8011d6a:	687b      	ldr	r3, [r7, #4]
 8011d6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011d6e:	1ad3      	subs	r3, r2, r3
 8011d70:	2b00      	cmp	r3, #0
 8011d72:	dc77      	bgt.n	8011e64 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8011d74:	687b      	ldr	r3, [r7, #4]
 8011d76:	2204      	movs	r2, #4
 8011d78:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8011d7a:	687b      	ldr	r3, [r7, #4]
 8011d7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011d7e:	2b00      	cmp	r3, #0
 8011d80:	d102      	bne.n	8011d88 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8011d82:	23fa      	movs	r3, #250	; 0xfa
 8011d84:	77bb      	strb	r3, [r7, #30]
 8011d86:	e01d      	b.n	8011dc4 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8011d88:	687b      	ldr	r3, [r7, #4]
 8011d8a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011d8c:	699b      	ldr	r3, [r3, #24]
 8011d8e:	2b00      	cmp	r3, #0
 8011d90:	d106      	bne.n	8011da0 <tcp_process+0x3e0>
 8011d92:	4b76      	ldr	r3, [pc, #472]	; (8011f6c <tcp_process+0x5ac>)
 8011d94:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8011d98:	4975      	ldr	r1, [pc, #468]	; (8011f70 <tcp_process+0x5b0>)
 8011d9a:	4876      	ldr	r0, [pc, #472]	; (8011f74 <tcp_process+0x5b4>)
 8011d9c:	f009 f818 	bl	801add0 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8011da0:	687b      	ldr	r3, [r7, #4]
 8011da2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011da4:	699b      	ldr	r3, [r3, #24]
 8011da6:	2b00      	cmp	r3, #0
 8011da8:	d00a      	beq.n	8011dc0 <tcp_process+0x400>
 8011daa:	687b      	ldr	r3, [r7, #4]
 8011dac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011dae:	699b      	ldr	r3, [r3, #24]
 8011db0:	687a      	ldr	r2, [r7, #4]
 8011db2:	6910      	ldr	r0, [r2, #16]
 8011db4:	2200      	movs	r2, #0
 8011db6:	6879      	ldr	r1, [r7, #4]
 8011db8:	4798      	blx	r3
 8011dba:	4603      	mov	r3, r0
 8011dbc:	77bb      	strb	r3, [r7, #30]
 8011dbe:	e001      	b.n	8011dc4 <tcp_process+0x404>
 8011dc0:	23f0      	movs	r3, #240	; 0xf0
 8011dc2:	77bb      	strb	r3, [r7, #30]
          }
          if (err != ERR_OK) {
 8011dc4:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8011dc8:	2b00      	cmp	r3, #0
 8011dca:	d00a      	beq.n	8011de2 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8011dcc:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8011dd0:	f113 0f0d 	cmn.w	r3, #13
 8011dd4:	d002      	beq.n	8011ddc <tcp_process+0x41c>
              tcp_abort(pcb);
 8011dd6:	6878      	ldr	r0, [r7, #4]
 8011dd8:	f7fd ff76 	bl	800fcc8 <tcp_abort>
            }
            return ERR_ABRT;
 8011ddc:	f06f 030c 	mvn.w	r3, #12
 8011de0:	e1ce      	b.n	8012180 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8011de2:	6878      	ldr	r0, [r7, #4]
 8011de4:	f000 fae0 	bl	80123a8 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8011de8:	4b63      	ldr	r3, [pc, #396]	; (8011f78 <tcp_process+0x5b8>)
 8011dea:	881b      	ldrh	r3, [r3, #0]
 8011dec:	2b00      	cmp	r3, #0
 8011dee:	d005      	beq.n	8011dfc <tcp_process+0x43c>
            recv_acked--;
 8011df0:	4b61      	ldr	r3, [pc, #388]	; (8011f78 <tcp_process+0x5b8>)
 8011df2:	881b      	ldrh	r3, [r3, #0]
 8011df4:	3b01      	subs	r3, #1
 8011df6:	b29a      	uxth	r2, r3
 8011df8:	4b5f      	ldr	r3, [pc, #380]	; (8011f78 <tcp_process+0x5b8>)
 8011dfa:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8011dfc:	687b      	ldr	r3, [r7, #4]
 8011dfe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011e00:	009a      	lsls	r2, r3, #2
 8011e02:	687b      	ldr	r3, [r7, #4]
 8011e04:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011e06:	005b      	lsls	r3, r3, #1
 8011e08:	f241 111c 	movw	r1, #4380	; 0x111c
 8011e0c:	428b      	cmp	r3, r1
 8011e0e:	bf38      	it	cc
 8011e10:	460b      	movcc	r3, r1
 8011e12:	429a      	cmp	r2, r3
 8011e14:	d204      	bcs.n	8011e20 <tcp_process+0x460>
 8011e16:	687b      	ldr	r3, [r7, #4]
 8011e18:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011e1a:	009b      	lsls	r3, r3, #2
 8011e1c:	b29b      	uxth	r3, r3
 8011e1e:	e00d      	b.n	8011e3c <tcp_process+0x47c>
 8011e20:	687b      	ldr	r3, [r7, #4]
 8011e22:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011e24:	005b      	lsls	r3, r3, #1
 8011e26:	f241 121c 	movw	r2, #4380	; 0x111c
 8011e2a:	4293      	cmp	r3, r2
 8011e2c:	d904      	bls.n	8011e38 <tcp_process+0x478>
 8011e2e:	687b      	ldr	r3, [r7, #4]
 8011e30:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011e32:	005b      	lsls	r3, r3, #1
 8011e34:	b29b      	uxth	r3, r3
 8011e36:	e001      	b.n	8011e3c <tcp_process+0x47c>
 8011e38:	f241 131c 	movw	r3, #4380	; 0x111c
 8011e3c:	687a      	ldr	r2, [r7, #4]
 8011e3e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8011e42:	4b4e      	ldr	r3, [pc, #312]	; (8011f7c <tcp_process+0x5bc>)
 8011e44:	781b      	ldrb	r3, [r3, #0]
 8011e46:	f003 0320 	and.w	r3, r3, #32
 8011e4a:	2b00      	cmp	r3, #0
 8011e4c:	d037      	beq.n	8011ebe <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8011e4e:	687b      	ldr	r3, [r7, #4]
 8011e50:	8b5b      	ldrh	r3, [r3, #26]
 8011e52:	f043 0302 	orr.w	r3, r3, #2
 8011e56:	b29a      	uxth	r2, r3
 8011e58:	687b      	ldr	r3, [r7, #4]
 8011e5a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8011e5c:	687b      	ldr	r3, [r7, #4]
 8011e5e:	2207      	movs	r2, #7
 8011e60:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8011e62:	e02c      	b.n	8011ebe <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011e64:	4b3b      	ldr	r3, [pc, #236]	; (8011f54 <tcp_process+0x594>)
 8011e66:	6819      	ldr	r1, [r3, #0]
 8011e68:	4b3b      	ldr	r3, [pc, #236]	; (8011f58 <tcp_process+0x598>)
 8011e6a:	881b      	ldrh	r3, [r3, #0]
 8011e6c:	461a      	mov	r2, r3
 8011e6e:	4b3b      	ldr	r3, [pc, #236]	; (8011f5c <tcp_process+0x59c>)
 8011e70:	681b      	ldr	r3, [r3, #0]
 8011e72:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011e74:	4b3a      	ldr	r3, [pc, #232]	; (8011f60 <tcp_process+0x5a0>)
 8011e76:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011e78:	885b      	ldrh	r3, [r3, #2]
 8011e7a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011e7c:	4a38      	ldr	r2, [pc, #224]	; (8011f60 <tcp_process+0x5a0>)
 8011e7e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011e80:	8812      	ldrh	r2, [r2, #0]
 8011e82:	b292      	uxth	r2, r2
 8011e84:	9202      	str	r2, [sp, #8]
 8011e86:	9301      	str	r3, [sp, #4]
 8011e88:	4b36      	ldr	r3, [pc, #216]	; (8011f64 <tcp_process+0x5a4>)
 8011e8a:	9300      	str	r3, [sp, #0]
 8011e8c:	4b36      	ldr	r3, [pc, #216]	; (8011f68 <tcp_process+0x5a8>)
 8011e8e:	4602      	mov	r2, r0
 8011e90:	6878      	ldr	r0, [r7, #4]
 8011e92:	f002 fc05 	bl	80146a0 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8011e96:	e167      	b.n	8012168 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8011e98:	4b2d      	ldr	r3, [pc, #180]	; (8011f50 <tcp_process+0x590>)
 8011e9a:	781b      	ldrb	r3, [r3, #0]
 8011e9c:	f003 0302 	and.w	r3, r3, #2
 8011ea0:	2b00      	cmp	r3, #0
 8011ea2:	f000 8161 	beq.w	8012168 <tcp_process+0x7a8>
 8011ea6:	687b      	ldr	r3, [r7, #4]
 8011ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011eaa:	1e5a      	subs	r2, r3, #1
 8011eac:	4b2b      	ldr	r3, [pc, #172]	; (8011f5c <tcp_process+0x59c>)
 8011eae:	681b      	ldr	r3, [r3, #0]
 8011eb0:	429a      	cmp	r2, r3
 8011eb2:	f040 8159 	bne.w	8012168 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8011eb6:	6878      	ldr	r0, [r7, #4]
 8011eb8:	f002 f9da 	bl	8014270 <tcp_rexmit>
      break;
 8011ebc:	e154      	b.n	8012168 <tcp_process+0x7a8>
 8011ebe:	e153      	b.n	8012168 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8011ec0:	6878      	ldr	r0, [r7, #4]
 8011ec2:	f000 fa71 	bl	80123a8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8011ec6:	4b2d      	ldr	r3, [pc, #180]	; (8011f7c <tcp_process+0x5bc>)
 8011ec8:	781b      	ldrb	r3, [r3, #0]
 8011eca:	f003 0320 	and.w	r3, r3, #32
 8011ece:	2b00      	cmp	r3, #0
 8011ed0:	f000 814c 	beq.w	801216c <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8011ed4:	687b      	ldr	r3, [r7, #4]
 8011ed6:	8b5b      	ldrh	r3, [r3, #26]
 8011ed8:	f043 0302 	orr.w	r3, r3, #2
 8011edc:	b29a      	uxth	r2, r3
 8011ede:	687b      	ldr	r3, [r7, #4]
 8011ee0:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8011ee2:	687b      	ldr	r3, [r7, #4]
 8011ee4:	2207      	movs	r2, #7
 8011ee6:	751a      	strb	r2, [r3, #20]
      }
      break;
 8011ee8:	e140      	b.n	801216c <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8011eea:	6878      	ldr	r0, [r7, #4]
 8011eec:	f000 fa5c 	bl	80123a8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8011ef0:	4b22      	ldr	r3, [pc, #136]	; (8011f7c <tcp_process+0x5bc>)
 8011ef2:	781b      	ldrb	r3, [r3, #0]
 8011ef4:	f003 0320 	and.w	r3, r3, #32
 8011ef8:	2b00      	cmp	r3, #0
 8011efa:	d071      	beq.n	8011fe0 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011efc:	4b14      	ldr	r3, [pc, #80]	; (8011f50 <tcp_process+0x590>)
 8011efe:	781b      	ldrb	r3, [r3, #0]
 8011f00:	f003 0310 	and.w	r3, r3, #16
 8011f04:	2b00      	cmp	r3, #0
 8011f06:	d060      	beq.n	8011fca <tcp_process+0x60a>
 8011f08:	687b      	ldr	r3, [r7, #4]
 8011f0a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011f0c:	4b11      	ldr	r3, [pc, #68]	; (8011f54 <tcp_process+0x594>)
 8011f0e:	681b      	ldr	r3, [r3, #0]
 8011f10:	429a      	cmp	r2, r3
 8011f12:	d15a      	bne.n	8011fca <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8011f14:	687b      	ldr	r3, [r7, #4]
 8011f16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011f18:	2b00      	cmp	r3, #0
 8011f1a:	d156      	bne.n	8011fca <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8011f1c:	687b      	ldr	r3, [r7, #4]
 8011f1e:	8b5b      	ldrh	r3, [r3, #26]
 8011f20:	f043 0302 	orr.w	r3, r3, #2
 8011f24:	b29a      	uxth	r2, r3
 8011f26:	687b      	ldr	r3, [r7, #4]
 8011f28:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8011f2a:	6878      	ldr	r0, [r7, #4]
 8011f2c:	f7fe fda8 	bl	8010a80 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8011f30:	4b13      	ldr	r3, [pc, #76]	; (8011f80 <tcp_process+0x5c0>)
 8011f32:	681b      	ldr	r3, [r3, #0]
 8011f34:	687a      	ldr	r2, [r7, #4]
 8011f36:	429a      	cmp	r2, r3
 8011f38:	d105      	bne.n	8011f46 <tcp_process+0x586>
 8011f3a:	4b11      	ldr	r3, [pc, #68]	; (8011f80 <tcp_process+0x5c0>)
 8011f3c:	681b      	ldr	r3, [r3, #0]
 8011f3e:	68db      	ldr	r3, [r3, #12]
 8011f40:	4a0f      	ldr	r2, [pc, #60]	; (8011f80 <tcp_process+0x5c0>)
 8011f42:	6013      	str	r3, [r2, #0]
 8011f44:	e02e      	b.n	8011fa4 <tcp_process+0x5e4>
 8011f46:	4b0e      	ldr	r3, [pc, #56]	; (8011f80 <tcp_process+0x5c0>)
 8011f48:	681b      	ldr	r3, [r3, #0]
 8011f4a:	613b      	str	r3, [r7, #16]
 8011f4c:	e027      	b.n	8011f9e <tcp_process+0x5de>
 8011f4e:	bf00      	nop
 8011f50:	20013d20 	.word	0x20013d20
 8011f54:	20013d18 	.word	0x20013d18
 8011f58:	20013d1e 	.word	0x20013d1e
 8011f5c:	20013d14 	.word	0x20013d14
 8011f60:	20013d04 	.word	0x20013d04
 8011f64:	2000a274 	.word	0x2000a274
 8011f68:	2000a278 	.word	0x2000a278
 8011f6c:	0801ee64 	.word	0x0801ee64
 8011f70:	0801f104 	.word	0x0801f104
 8011f74:	0801eeb0 	.word	0x0801eeb0
 8011f78:	20013d1c 	.word	0x20013d1c
 8011f7c:	20013d21 	.word	0x20013d21
 8011f80:	20013ce4 	.word	0x20013ce4
 8011f84:	693b      	ldr	r3, [r7, #16]
 8011f86:	68db      	ldr	r3, [r3, #12]
 8011f88:	687a      	ldr	r2, [r7, #4]
 8011f8a:	429a      	cmp	r2, r3
 8011f8c:	d104      	bne.n	8011f98 <tcp_process+0x5d8>
 8011f8e:	687b      	ldr	r3, [r7, #4]
 8011f90:	68da      	ldr	r2, [r3, #12]
 8011f92:	693b      	ldr	r3, [r7, #16]
 8011f94:	60da      	str	r2, [r3, #12]
 8011f96:	e005      	b.n	8011fa4 <tcp_process+0x5e4>
 8011f98:	693b      	ldr	r3, [r7, #16]
 8011f9a:	68db      	ldr	r3, [r3, #12]
 8011f9c:	613b      	str	r3, [r7, #16]
 8011f9e:	693b      	ldr	r3, [r7, #16]
 8011fa0:	2b00      	cmp	r3, #0
 8011fa2:	d1ef      	bne.n	8011f84 <tcp_process+0x5c4>
 8011fa4:	687b      	ldr	r3, [r7, #4]
 8011fa6:	2200      	movs	r2, #0
 8011fa8:	60da      	str	r2, [r3, #12]
 8011faa:	4b77      	ldr	r3, [pc, #476]	; (8012188 <tcp_process+0x7c8>)
 8011fac:	2201      	movs	r2, #1
 8011fae:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8011fb0:	687b      	ldr	r3, [r7, #4]
 8011fb2:	220a      	movs	r2, #10
 8011fb4:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8011fb6:	4b75      	ldr	r3, [pc, #468]	; (801218c <tcp_process+0x7cc>)
 8011fb8:	681a      	ldr	r2, [r3, #0]
 8011fba:	687b      	ldr	r3, [r7, #4]
 8011fbc:	60da      	str	r2, [r3, #12]
 8011fbe:	4a73      	ldr	r2, [pc, #460]	; (801218c <tcp_process+0x7cc>)
 8011fc0:	687b      	ldr	r3, [r7, #4]
 8011fc2:	6013      	str	r3, [r2, #0]
 8011fc4:	f002 fd2e 	bl	8014a24 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8011fc8:	e0d2      	b.n	8012170 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8011fca:	687b      	ldr	r3, [r7, #4]
 8011fcc:	8b5b      	ldrh	r3, [r3, #26]
 8011fce:	f043 0302 	orr.w	r3, r3, #2
 8011fd2:	b29a      	uxth	r2, r3
 8011fd4:	687b      	ldr	r3, [r7, #4]
 8011fd6:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8011fd8:	687b      	ldr	r3, [r7, #4]
 8011fda:	2208      	movs	r2, #8
 8011fdc:	751a      	strb	r2, [r3, #20]
      break;
 8011fde:	e0c7      	b.n	8012170 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011fe0:	4b6b      	ldr	r3, [pc, #428]	; (8012190 <tcp_process+0x7d0>)
 8011fe2:	781b      	ldrb	r3, [r3, #0]
 8011fe4:	f003 0310 	and.w	r3, r3, #16
 8011fe8:	2b00      	cmp	r3, #0
 8011fea:	f000 80c1 	beq.w	8012170 <tcp_process+0x7b0>
 8011fee:	687b      	ldr	r3, [r7, #4]
 8011ff0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011ff2:	4b68      	ldr	r3, [pc, #416]	; (8012194 <tcp_process+0x7d4>)
 8011ff4:	681b      	ldr	r3, [r3, #0]
 8011ff6:	429a      	cmp	r2, r3
 8011ff8:	f040 80ba 	bne.w	8012170 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8011ffc:	687b      	ldr	r3, [r7, #4]
 8011ffe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8012000:	2b00      	cmp	r3, #0
 8012002:	f040 80b5 	bne.w	8012170 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8012006:	687b      	ldr	r3, [r7, #4]
 8012008:	2206      	movs	r2, #6
 801200a:	751a      	strb	r2, [r3, #20]
      break;
 801200c:	e0b0      	b.n	8012170 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 801200e:	6878      	ldr	r0, [r7, #4]
 8012010:	f000 f9ca 	bl	80123a8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8012014:	4b60      	ldr	r3, [pc, #384]	; (8012198 <tcp_process+0x7d8>)
 8012016:	781b      	ldrb	r3, [r3, #0]
 8012018:	f003 0320 	and.w	r3, r3, #32
 801201c:	2b00      	cmp	r3, #0
 801201e:	f000 80a9 	beq.w	8012174 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8012022:	687b      	ldr	r3, [r7, #4]
 8012024:	8b5b      	ldrh	r3, [r3, #26]
 8012026:	f043 0302 	orr.w	r3, r3, #2
 801202a:	b29a      	uxth	r2, r3
 801202c:	687b      	ldr	r3, [r7, #4]
 801202e:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8012030:	6878      	ldr	r0, [r7, #4]
 8012032:	f7fe fd25 	bl	8010a80 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8012036:	4b59      	ldr	r3, [pc, #356]	; (801219c <tcp_process+0x7dc>)
 8012038:	681b      	ldr	r3, [r3, #0]
 801203a:	687a      	ldr	r2, [r7, #4]
 801203c:	429a      	cmp	r2, r3
 801203e:	d105      	bne.n	801204c <tcp_process+0x68c>
 8012040:	4b56      	ldr	r3, [pc, #344]	; (801219c <tcp_process+0x7dc>)
 8012042:	681b      	ldr	r3, [r3, #0]
 8012044:	68db      	ldr	r3, [r3, #12]
 8012046:	4a55      	ldr	r2, [pc, #340]	; (801219c <tcp_process+0x7dc>)
 8012048:	6013      	str	r3, [r2, #0]
 801204a:	e013      	b.n	8012074 <tcp_process+0x6b4>
 801204c:	4b53      	ldr	r3, [pc, #332]	; (801219c <tcp_process+0x7dc>)
 801204e:	681b      	ldr	r3, [r3, #0]
 8012050:	60fb      	str	r3, [r7, #12]
 8012052:	e00c      	b.n	801206e <tcp_process+0x6ae>
 8012054:	68fb      	ldr	r3, [r7, #12]
 8012056:	68db      	ldr	r3, [r3, #12]
 8012058:	687a      	ldr	r2, [r7, #4]
 801205a:	429a      	cmp	r2, r3
 801205c:	d104      	bne.n	8012068 <tcp_process+0x6a8>
 801205e:	687b      	ldr	r3, [r7, #4]
 8012060:	68da      	ldr	r2, [r3, #12]
 8012062:	68fb      	ldr	r3, [r7, #12]
 8012064:	60da      	str	r2, [r3, #12]
 8012066:	e005      	b.n	8012074 <tcp_process+0x6b4>
 8012068:	68fb      	ldr	r3, [r7, #12]
 801206a:	68db      	ldr	r3, [r3, #12]
 801206c:	60fb      	str	r3, [r7, #12]
 801206e:	68fb      	ldr	r3, [r7, #12]
 8012070:	2b00      	cmp	r3, #0
 8012072:	d1ef      	bne.n	8012054 <tcp_process+0x694>
 8012074:	687b      	ldr	r3, [r7, #4]
 8012076:	2200      	movs	r2, #0
 8012078:	60da      	str	r2, [r3, #12]
 801207a:	4b43      	ldr	r3, [pc, #268]	; (8012188 <tcp_process+0x7c8>)
 801207c:	2201      	movs	r2, #1
 801207e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8012080:	687b      	ldr	r3, [r7, #4]
 8012082:	220a      	movs	r2, #10
 8012084:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8012086:	4b41      	ldr	r3, [pc, #260]	; (801218c <tcp_process+0x7cc>)
 8012088:	681a      	ldr	r2, [r3, #0]
 801208a:	687b      	ldr	r3, [r7, #4]
 801208c:	60da      	str	r2, [r3, #12]
 801208e:	4a3f      	ldr	r2, [pc, #252]	; (801218c <tcp_process+0x7cc>)
 8012090:	687b      	ldr	r3, [r7, #4]
 8012092:	6013      	str	r3, [r2, #0]
 8012094:	f002 fcc6 	bl	8014a24 <tcp_timer_needed>
      }
      break;
 8012098:	e06c      	b.n	8012174 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 801209a:	6878      	ldr	r0, [r7, #4]
 801209c:	f000 f984 	bl	80123a8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80120a0:	4b3b      	ldr	r3, [pc, #236]	; (8012190 <tcp_process+0x7d0>)
 80120a2:	781b      	ldrb	r3, [r3, #0]
 80120a4:	f003 0310 	and.w	r3, r3, #16
 80120a8:	2b00      	cmp	r3, #0
 80120aa:	d065      	beq.n	8012178 <tcp_process+0x7b8>
 80120ac:	687b      	ldr	r3, [r7, #4]
 80120ae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80120b0:	4b38      	ldr	r3, [pc, #224]	; (8012194 <tcp_process+0x7d4>)
 80120b2:	681b      	ldr	r3, [r3, #0]
 80120b4:	429a      	cmp	r2, r3
 80120b6:	d15f      	bne.n	8012178 <tcp_process+0x7b8>
 80120b8:	687b      	ldr	r3, [r7, #4]
 80120ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80120bc:	2b00      	cmp	r3, #0
 80120be:	d15b      	bne.n	8012178 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 80120c0:	6878      	ldr	r0, [r7, #4]
 80120c2:	f7fe fcdd 	bl	8010a80 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80120c6:	4b35      	ldr	r3, [pc, #212]	; (801219c <tcp_process+0x7dc>)
 80120c8:	681b      	ldr	r3, [r3, #0]
 80120ca:	687a      	ldr	r2, [r7, #4]
 80120cc:	429a      	cmp	r2, r3
 80120ce:	d105      	bne.n	80120dc <tcp_process+0x71c>
 80120d0:	4b32      	ldr	r3, [pc, #200]	; (801219c <tcp_process+0x7dc>)
 80120d2:	681b      	ldr	r3, [r3, #0]
 80120d4:	68db      	ldr	r3, [r3, #12]
 80120d6:	4a31      	ldr	r2, [pc, #196]	; (801219c <tcp_process+0x7dc>)
 80120d8:	6013      	str	r3, [r2, #0]
 80120da:	e013      	b.n	8012104 <tcp_process+0x744>
 80120dc:	4b2f      	ldr	r3, [pc, #188]	; (801219c <tcp_process+0x7dc>)
 80120de:	681b      	ldr	r3, [r3, #0]
 80120e0:	61bb      	str	r3, [r7, #24]
 80120e2:	e00c      	b.n	80120fe <tcp_process+0x73e>
 80120e4:	69bb      	ldr	r3, [r7, #24]
 80120e6:	68db      	ldr	r3, [r3, #12]
 80120e8:	687a      	ldr	r2, [r7, #4]
 80120ea:	429a      	cmp	r2, r3
 80120ec:	d104      	bne.n	80120f8 <tcp_process+0x738>
 80120ee:	687b      	ldr	r3, [r7, #4]
 80120f0:	68da      	ldr	r2, [r3, #12]
 80120f2:	69bb      	ldr	r3, [r7, #24]
 80120f4:	60da      	str	r2, [r3, #12]
 80120f6:	e005      	b.n	8012104 <tcp_process+0x744>
 80120f8:	69bb      	ldr	r3, [r7, #24]
 80120fa:	68db      	ldr	r3, [r3, #12]
 80120fc:	61bb      	str	r3, [r7, #24]
 80120fe:	69bb      	ldr	r3, [r7, #24]
 8012100:	2b00      	cmp	r3, #0
 8012102:	d1ef      	bne.n	80120e4 <tcp_process+0x724>
 8012104:	687b      	ldr	r3, [r7, #4]
 8012106:	2200      	movs	r2, #0
 8012108:	60da      	str	r2, [r3, #12]
 801210a:	4b1f      	ldr	r3, [pc, #124]	; (8012188 <tcp_process+0x7c8>)
 801210c:	2201      	movs	r2, #1
 801210e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8012110:	687b      	ldr	r3, [r7, #4]
 8012112:	220a      	movs	r2, #10
 8012114:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8012116:	4b1d      	ldr	r3, [pc, #116]	; (801218c <tcp_process+0x7cc>)
 8012118:	681a      	ldr	r2, [r3, #0]
 801211a:	687b      	ldr	r3, [r7, #4]
 801211c:	60da      	str	r2, [r3, #12]
 801211e:	4a1b      	ldr	r2, [pc, #108]	; (801218c <tcp_process+0x7cc>)
 8012120:	687b      	ldr	r3, [r7, #4]
 8012122:	6013      	str	r3, [r2, #0]
 8012124:	f002 fc7e 	bl	8014a24 <tcp_timer_needed>
      }
      break;
 8012128:	e026      	b.n	8012178 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 801212a:	6878      	ldr	r0, [r7, #4]
 801212c:	f000 f93c 	bl	80123a8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8012130:	4b17      	ldr	r3, [pc, #92]	; (8012190 <tcp_process+0x7d0>)
 8012132:	781b      	ldrb	r3, [r3, #0]
 8012134:	f003 0310 	and.w	r3, r3, #16
 8012138:	2b00      	cmp	r3, #0
 801213a:	d01f      	beq.n	801217c <tcp_process+0x7bc>
 801213c:	687b      	ldr	r3, [r7, #4]
 801213e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012140:	4b14      	ldr	r3, [pc, #80]	; (8012194 <tcp_process+0x7d4>)
 8012142:	681b      	ldr	r3, [r3, #0]
 8012144:	429a      	cmp	r2, r3
 8012146:	d119      	bne.n	801217c <tcp_process+0x7bc>
 8012148:	687b      	ldr	r3, [r7, #4]
 801214a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801214c:	2b00      	cmp	r3, #0
 801214e:	d115      	bne.n	801217c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8012150:	4b11      	ldr	r3, [pc, #68]	; (8012198 <tcp_process+0x7d8>)
 8012152:	781b      	ldrb	r3, [r3, #0]
 8012154:	f043 0310 	orr.w	r3, r3, #16
 8012158:	b2da      	uxtb	r2, r3
 801215a:	4b0f      	ldr	r3, [pc, #60]	; (8012198 <tcp_process+0x7d8>)
 801215c:	701a      	strb	r2, [r3, #0]
      }
      break;
 801215e:	e00d      	b.n	801217c <tcp_process+0x7bc>
    default:
      break;
 8012160:	bf00      	nop
 8012162:	e00c      	b.n	801217e <tcp_process+0x7be>
      break;
 8012164:	bf00      	nop
 8012166:	e00a      	b.n	801217e <tcp_process+0x7be>
      break;
 8012168:	bf00      	nop
 801216a:	e008      	b.n	801217e <tcp_process+0x7be>
      break;
 801216c:	bf00      	nop
 801216e:	e006      	b.n	801217e <tcp_process+0x7be>
      break;
 8012170:	bf00      	nop
 8012172:	e004      	b.n	801217e <tcp_process+0x7be>
      break;
 8012174:	bf00      	nop
 8012176:	e002      	b.n	801217e <tcp_process+0x7be>
      break;
 8012178:	bf00      	nop
 801217a:	e000      	b.n	801217e <tcp_process+0x7be>
      break;
 801217c:	bf00      	nop
  }
  return ERR_OK;
 801217e:	2300      	movs	r3, #0
}
 8012180:	4618      	mov	r0, r3
 8012182:	3724      	adds	r7, #36	; 0x24
 8012184:	46bd      	mov	sp, r7
 8012186:	bd90      	pop	{r4, r7, pc}
 8012188:	20013cec 	.word	0x20013cec
 801218c:	20013ce8 	.word	0x20013ce8
 8012190:	20013d20 	.word	0x20013d20
 8012194:	20013d18 	.word	0x20013d18
 8012198:	20013d21 	.word	0x20013d21
 801219c:	20013ce4 	.word	0x20013ce4

080121a0 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 80121a0:	b590      	push	{r4, r7, lr}
 80121a2:	b085      	sub	sp, #20
 80121a4:	af00      	add	r7, sp, #0
 80121a6:	6078      	str	r0, [r7, #4]
 80121a8:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 80121aa:	687b      	ldr	r3, [r7, #4]
 80121ac:	2b00      	cmp	r3, #0
 80121ae:	d106      	bne.n	80121be <tcp_oos_insert_segment+0x1e>
 80121b0:	4b3b      	ldr	r3, [pc, #236]	; (80122a0 <tcp_oos_insert_segment+0x100>)
 80121b2:	f240 421f 	movw	r2, #1055	; 0x41f
 80121b6:	493b      	ldr	r1, [pc, #236]	; (80122a4 <tcp_oos_insert_segment+0x104>)
 80121b8:	483b      	ldr	r0, [pc, #236]	; (80122a8 <tcp_oos_insert_segment+0x108>)
 80121ba:	f008 fe09 	bl	801add0 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80121be:	687b      	ldr	r3, [r7, #4]
 80121c0:	691b      	ldr	r3, [r3, #16]
 80121c2:	899b      	ldrh	r3, [r3, #12]
 80121c4:	b29b      	uxth	r3, r3
 80121c6:	4618      	mov	r0, r3
 80121c8:	f7fb f924 	bl	800d414 <lwip_htons>
 80121cc:	4603      	mov	r3, r0
 80121ce:	b2db      	uxtb	r3, r3
 80121d0:	f003 0301 	and.w	r3, r3, #1
 80121d4:	2b00      	cmp	r3, #0
 80121d6:	d028      	beq.n	801222a <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80121d8:	6838      	ldr	r0, [r7, #0]
 80121da:	f7fe fa4f 	bl	801067c <tcp_segs_free>
    next = NULL;
 80121de:	2300      	movs	r3, #0
 80121e0:	603b      	str	r3, [r7, #0]
 80121e2:	e056      	b.n	8012292 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80121e4:	683b      	ldr	r3, [r7, #0]
 80121e6:	691b      	ldr	r3, [r3, #16]
 80121e8:	899b      	ldrh	r3, [r3, #12]
 80121ea:	b29b      	uxth	r3, r3
 80121ec:	4618      	mov	r0, r3
 80121ee:	f7fb f911 	bl	800d414 <lwip_htons>
 80121f2:	4603      	mov	r3, r0
 80121f4:	b2db      	uxtb	r3, r3
 80121f6:	f003 0301 	and.w	r3, r3, #1
 80121fa:	2b00      	cmp	r3, #0
 80121fc:	d00d      	beq.n	801221a <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80121fe:	687b      	ldr	r3, [r7, #4]
 8012200:	691b      	ldr	r3, [r3, #16]
 8012202:	899b      	ldrh	r3, [r3, #12]
 8012204:	b29c      	uxth	r4, r3
 8012206:	2001      	movs	r0, #1
 8012208:	f7fb f904 	bl	800d414 <lwip_htons>
 801220c:	4603      	mov	r3, r0
 801220e:	461a      	mov	r2, r3
 8012210:	687b      	ldr	r3, [r7, #4]
 8012212:	691b      	ldr	r3, [r3, #16]
 8012214:	4322      	orrs	r2, r4
 8012216:	b292      	uxth	r2, r2
 8012218:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 801221a:	683b      	ldr	r3, [r7, #0]
 801221c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 801221e:	683b      	ldr	r3, [r7, #0]
 8012220:	681b      	ldr	r3, [r3, #0]
 8012222:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8012224:	68f8      	ldr	r0, [r7, #12]
 8012226:	f7fe fa3e 	bl	80106a6 <tcp_seg_free>
    while (next &&
 801222a:	683b      	ldr	r3, [r7, #0]
 801222c:	2b00      	cmp	r3, #0
 801222e:	d00e      	beq.n	801224e <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8012230:	687b      	ldr	r3, [r7, #4]
 8012232:	891b      	ldrh	r3, [r3, #8]
 8012234:	461a      	mov	r2, r3
 8012236:	4b1d      	ldr	r3, [pc, #116]	; (80122ac <tcp_oos_insert_segment+0x10c>)
 8012238:	681b      	ldr	r3, [r3, #0]
 801223a:	441a      	add	r2, r3
 801223c:	683b      	ldr	r3, [r7, #0]
 801223e:	691b      	ldr	r3, [r3, #16]
 8012240:	685b      	ldr	r3, [r3, #4]
 8012242:	6839      	ldr	r1, [r7, #0]
 8012244:	8909      	ldrh	r1, [r1, #8]
 8012246:	440b      	add	r3, r1
 8012248:	1ad3      	subs	r3, r2, r3
    while (next &&
 801224a:	2b00      	cmp	r3, #0
 801224c:	daca      	bge.n	80121e4 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 801224e:	683b      	ldr	r3, [r7, #0]
 8012250:	2b00      	cmp	r3, #0
 8012252:	d01e      	beq.n	8012292 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8012254:	687b      	ldr	r3, [r7, #4]
 8012256:	891b      	ldrh	r3, [r3, #8]
 8012258:	461a      	mov	r2, r3
 801225a:	4b14      	ldr	r3, [pc, #80]	; (80122ac <tcp_oos_insert_segment+0x10c>)
 801225c:	681b      	ldr	r3, [r3, #0]
 801225e:	441a      	add	r2, r3
 8012260:	683b      	ldr	r3, [r7, #0]
 8012262:	691b      	ldr	r3, [r3, #16]
 8012264:	685b      	ldr	r3, [r3, #4]
 8012266:	1ad3      	subs	r3, r2, r3
    if (next &&
 8012268:	2b00      	cmp	r3, #0
 801226a:	dd12      	ble.n	8012292 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 801226c:	683b      	ldr	r3, [r7, #0]
 801226e:	691b      	ldr	r3, [r3, #16]
 8012270:	685b      	ldr	r3, [r3, #4]
 8012272:	b29a      	uxth	r2, r3
 8012274:	4b0d      	ldr	r3, [pc, #52]	; (80122ac <tcp_oos_insert_segment+0x10c>)
 8012276:	681b      	ldr	r3, [r3, #0]
 8012278:	b29b      	uxth	r3, r3
 801227a:	1ad3      	subs	r3, r2, r3
 801227c:	b29a      	uxth	r2, r3
 801227e:	687b      	ldr	r3, [r7, #4]
 8012280:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8012282:	687b      	ldr	r3, [r7, #4]
 8012284:	685a      	ldr	r2, [r3, #4]
 8012286:	687b      	ldr	r3, [r7, #4]
 8012288:	891b      	ldrh	r3, [r3, #8]
 801228a:	4619      	mov	r1, r3
 801228c:	4610      	mov	r0, r2
 801228e:	f7fc fc5d 	bl	800eb4c <pbuf_realloc>
    }
  }
  cseg->next = next;
 8012292:	687b      	ldr	r3, [r7, #4]
 8012294:	683a      	ldr	r2, [r7, #0]
 8012296:	601a      	str	r2, [r3, #0]
}
 8012298:	bf00      	nop
 801229a:	3714      	adds	r7, #20
 801229c:	46bd      	mov	sp, r7
 801229e:	bd90      	pop	{r4, r7, pc}
 80122a0:	0801ee64 	.word	0x0801ee64
 80122a4:	0801f124 	.word	0x0801f124
 80122a8:	0801eeb0 	.word	0x0801eeb0
 80122ac:	20013d14 	.word	0x20013d14

080122b0 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 80122b0:	b5b0      	push	{r4, r5, r7, lr}
 80122b2:	b086      	sub	sp, #24
 80122b4:	af00      	add	r7, sp, #0
 80122b6:	60f8      	str	r0, [r7, #12]
 80122b8:	60b9      	str	r1, [r7, #8]
 80122ba:	607a      	str	r2, [r7, #4]
 80122bc:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 80122be:	e03e      	b.n	801233e <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 80122c0:	68bb      	ldr	r3, [r7, #8]
 80122c2:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 80122c4:	68bb      	ldr	r3, [r7, #8]
 80122c6:	681b      	ldr	r3, [r3, #0]
 80122c8:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 80122ca:	697b      	ldr	r3, [r7, #20]
 80122cc:	685b      	ldr	r3, [r3, #4]
 80122ce:	4618      	mov	r0, r3
 80122d0:	f7fc fe50 	bl	800ef74 <pbuf_clen>
 80122d4:	4603      	mov	r3, r0
 80122d6:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80122d8:	68fb      	ldr	r3, [r7, #12]
 80122da:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80122de:	8a7a      	ldrh	r2, [r7, #18]
 80122e0:	429a      	cmp	r2, r3
 80122e2:	d906      	bls.n	80122f2 <tcp_free_acked_segments+0x42>
 80122e4:	4b2a      	ldr	r3, [pc, #168]	; (8012390 <tcp_free_acked_segments+0xe0>)
 80122e6:	f240 4257 	movw	r2, #1111	; 0x457
 80122ea:	492a      	ldr	r1, [pc, #168]	; (8012394 <tcp_free_acked_segments+0xe4>)
 80122ec:	482a      	ldr	r0, [pc, #168]	; (8012398 <tcp_free_acked_segments+0xe8>)
 80122ee:	f008 fd6f 	bl	801add0 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80122f2:	68fb      	ldr	r3, [r7, #12]
 80122f4:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 80122f8:	8a7b      	ldrh	r3, [r7, #18]
 80122fa:	1ad3      	subs	r3, r2, r3
 80122fc:	b29a      	uxth	r2, r3
 80122fe:	68fb      	ldr	r3, [r7, #12]
 8012300:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8012304:	697b      	ldr	r3, [r7, #20]
 8012306:	891a      	ldrh	r2, [r3, #8]
 8012308:	4b24      	ldr	r3, [pc, #144]	; (801239c <tcp_free_acked_segments+0xec>)
 801230a:	881b      	ldrh	r3, [r3, #0]
 801230c:	4413      	add	r3, r2
 801230e:	b29a      	uxth	r2, r3
 8012310:	4b22      	ldr	r3, [pc, #136]	; (801239c <tcp_free_acked_segments+0xec>)
 8012312:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8012314:	6978      	ldr	r0, [r7, #20]
 8012316:	f7fe f9c6 	bl	80106a6 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 801231a:	68fb      	ldr	r3, [r7, #12]
 801231c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012320:	2b00      	cmp	r3, #0
 8012322:	d00c      	beq.n	801233e <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8012324:	68bb      	ldr	r3, [r7, #8]
 8012326:	2b00      	cmp	r3, #0
 8012328:	d109      	bne.n	801233e <tcp_free_acked_segments+0x8e>
 801232a:	683b      	ldr	r3, [r7, #0]
 801232c:	2b00      	cmp	r3, #0
 801232e:	d106      	bne.n	801233e <tcp_free_acked_segments+0x8e>
 8012330:	4b17      	ldr	r3, [pc, #92]	; (8012390 <tcp_free_acked_segments+0xe0>)
 8012332:	f240 4261 	movw	r2, #1121	; 0x461
 8012336:	491a      	ldr	r1, [pc, #104]	; (80123a0 <tcp_free_acked_segments+0xf0>)
 8012338:	4817      	ldr	r0, [pc, #92]	; (8012398 <tcp_free_acked_segments+0xe8>)
 801233a:	f008 fd49 	bl	801add0 <iprintf>
  while (seg_list != NULL &&
 801233e:	68bb      	ldr	r3, [r7, #8]
 8012340:	2b00      	cmp	r3, #0
 8012342:	d020      	beq.n	8012386 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8012344:	68bb      	ldr	r3, [r7, #8]
 8012346:	691b      	ldr	r3, [r3, #16]
 8012348:	685b      	ldr	r3, [r3, #4]
 801234a:	4618      	mov	r0, r3
 801234c:	f7fb f877 	bl	800d43e <lwip_htonl>
 8012350:	4604      	mov	r4, r0
 8012352:	68bb      	ldr	r3, [r7, #8]
 8012354:	891b      	ldrh	r3, [r3, #8]
 8012356:	461d      	mov	r5, r3
 8012358:	68bb      	ldr	r3, [r7, #8]
 801235a:	691b      	ldr	r3, [r3, #16]
 801235c:	899b      	ldrh	r3, [r3, #12]
 801235e:	b29b      	uxth	r3, r3
 8012360:	4618      	mov	r0, r3
 8012362:	f7fb f857 	bl	800d414 <lwip_htons>
 8012366:	4603      	mov	r3, r0
 8012368:	b2db      	uxtb	r3, r3
 801236a:	f003 0303 	and.w	r3, r3, #3
 801236e:	2b00      	cmp	r3, #0
 8012370:	d001      	beq.n	8012376 <tcp_free_acked_segments+0xc6>
 8012372:	2301      	movs	r3, #1
 8012374:	e000      	b.n	8012378 <tcp_free_acked_segments+0xc8>
 8012376:	2300      	movs	r3, #0
 8012378:	442b      	add	r3, r5
 801237a:	18e2      	adds	r2, r4, r3
 801237c:	4b09      	ldr	r3, [pc, #36]	; (80123a4 <tcp_free_acked_segments+0xf4>)
 801237e:	681b      	ldr	r3, [r3, #0]
 8012380:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8012382:	2b00      	cmp	r3, #0
 8012384:	dd9c      	ble.n	80122c0 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8012386:	68bb      	ldr	r3, [r7, #8]
}
 8012388:	4618      	mov	r0, r3
 801238a:	3718      	adds	r7, #24
 801238c:	46bd      	mov	sp, r7
 801238e:	bdb0      	pop	{r4, r5, r7, pc}
 8012390:	0801ee64 	.word	0x0801ee64
 8012394:	0801f14c 	.word	0x0801f14c
 8012398:	0801eeb0 	.word	0x0801eeb0
 801239c:	20013d1c 	.word	0x20013d1c
 80123a0:	0801f174 	.word	0x0801f174
 80123a4:	20013d18 	.word	0x20013d18

080123a8 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 80123a8:	b5b0      	push	{r4, r5, r7, lr}
 80123aa:	b094      	sub	sp, #80	; 0x50
 80123ac:	af00      	add	r7, sp, #0
 80123ae:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 80123b0:	2300      	movs	r3, #0
 80123b2:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 80123b4:	687b      	ldr	r3, [r7, #4]
 80123b6:	2b00      	cmp	r3, #0
 80123b8:	d106      	bne.n	80123c8 <tcp_receive+0x20>
 80123ba:	4b91      	ldr	r3, [pc, #580]	; (8012600 <tcp_receive+0x258>)
 80123bc:	f240 427b 	movw	r2, #1147	; 0x47b
 80123c0:	4990      	ldr	r1, [pc, #576]	; (8012604 <tcp_receive+0x25c>)
 80123c2:	4891      	ldr	r0, [pc, #580]	; (8012608 <tcp_receive+0x260>)
 80123c4:	f008 fd04 	bl	801add0 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80123c8:	687b      	ldr	r3, [r7, #4]
 80123ca:	7d1b      	ldrb	r3, [r3, #20]
 80123cc:	2b03      	cmp	r3, #3
 80123ce:	d806      	bhi.n	80123de <tcp_receive+0x36>
 80123d0:	4b8b      	ldr	r3, [pc, #556]	; (8012600 <tcp_receive+0x258>)
 80123d2:	f240 427c 	movw	r2, #1148	; 0x47c
 80123d6:	498d      	ldr	r1, [pc, #564]	; (801260c <tcp_receive+0x264>)
 80123d8:	488b      	ldr	r0, [pc, #556]	; (8012608 <tcp_receive+0x260>)
 80123da:	f008 fcf9 	bl	801add0 <iprintf>

  if (flags & TCP_ACK) {
 80123de:	4b8c      	ldr	r3, [pc, #560]	; (8012610 <tcp_receive+0x268>)
 80123e0:	781b      	ldrb	r3, [r3, #0]
 80123e2:	f003 0310 	and.w	r3, r3, #16
 80123e6:	2b00      	cmp	r3, #0
 80123e8:	f000 8264 	beq.w	80128b4 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80123ec:	687b      	ldr	r3, [r7, #4]
 80123ee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80123f2:	461a      	mov	r2, r3
 80123f4:	687b      	ldr	r3, [r7, #4]
 80123f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80123f8:	4413      	add	r3, r2
 80123fa:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80123fc:	687b      	ldr	r3, [r7, #4]
 80123fe:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012400:	4b84      	ldr	r3, [pc, #528]	; (8012614 <tcp_receive+0x26c>)
 8012402:	681b      	ldr	r3, [r3, #0]
 8012404:	1ad3      	subs	r3, r2, r3
 8012406:	2b00      	cmp	r3, #0
 8012408:	db1b      	blt.n	8012442 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801240a:	687b      	ldr	r3, [r7, #4]
 801240c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801240e:	4b81      	ldr	r3, [pc, #516]	; (8012614 <tcp_receive+0x26c>)
 8012410:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8012412:	429a      	cmp	r2, r3
 8012414:	d106      	bne.n	8012424 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8012416:	687b      	ldr	r3, [r7, #4]
 8012418:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801241a:	4b7f      	ldr	r3, [pc, #508]	; (8012618 <tcp_receive+0x270>)
 801241c:	681b      	ldr	r3, [r3, #0]
 801241e:	1ad3      	subs	r3, r2, r3
 8012420:	2b00      	cmp	r3, #0
 8012422:	db0e      	blt.n	8012442 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8012424:	687b      	ldr	r3, [r7, #4]
 8012426:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8012428:	4b7b      	ldr	r3, [pc, #492]	; (8012618 <tcp_receive+0x270>)
 801242a:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801242c:	429a      	cmp	r2, r3
 801242e:	d125      	bne.n	801247c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8012430:	4b7a      	ldr	r3, [pc, #488]	; (801261c <tcp_receive+0x274>)
 8012432:	681b      	ldr	r3, [r3, #0]
 8012434:	89db      	ldrh	r3, [r3, #14]
 8012436:	b29a      	uxth	r2, r3
 8012438:	687b      	ldr	r3, [r7, #4]
 801243a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801243e:	429a      	cmp	r2, r3
 8012440:	d91c      	bls.n	801247c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8012442:	4b76      	ldr	r3, [pc, #472]	; (801261c <tcp_receive+0x274>)
 8012444:	681b      	ldr	r3, [r3, #0]
 8012446:	89db      	ldrh	r3, [r3, #14]
 8012448:	b29a      	uxth	r2, r3
 801244a:	687b      	ldr	r3, [r7, #4]
 801244c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8012450:	687b      	ldr	r3, [r7, #4]
 8012452:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8012456:	687b      	ldr	r3, [r7, #4]
 8012458:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801245c:	429a      	cmp	r2, r3
 801245e:	d205      	bcs.n	801246c <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8012460:	687b      	ldr	r3, [r7, #4]
 8012462:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8012466:	687b      	ldr	r3, [r7, #4]
 8012468:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 801246c:	4b69      	ldr	r3, [pc, #420]	; (8012614 <tcp_receive+0x26c>)
 801246e:	681a      	ldr	r2, [r3, #0]
 8012470:	687b      	ldr	r3, [r7, #4]
 8012472:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8012474:	4b68      	ldr	r3, [pc, #416]	; (8012618 <tcp_receive+0x270>)
 8012476:	681a      	ldr	r2, [r3, #0]
 8012478:	687b      	ldr	r3, [r7, #4]
 801247a:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 801247c:	4b66      	ldr	r3, [pc, #408]	; (8012618 <tcp_receive+0x270>)
 801247e:	681a      	ldr	r2, [r3, #0]
 8012480:	687b      	ldr	r3, [r7, #4]
 8012482:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012484:	1ad3      	subs	r3, r2, r3
 8012486:	2b00      	cmp	r3, #0
 8012488:	dc58      	bgt.n	801253c <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 801248a:	4b65      	ldr	r3, [pc, #404]	; (8012620 <tcp_receive+0x278>)
 801248c:	881b      	ldrh	r3, [r3, #0]
 801248e:	2b00      	cmp	r3, #0
 8012490:	d14b      	bne.n	801252a <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8012492:	687b      	ldr	r3, [r7, #4]
 8012494:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012496:	687a      	ldr	r2, [r7, #4]
 8012498:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 801249c:	4413      	add	r3, r2
 801249e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80124a0:	429a      	cmp	r2, r3
 80124a2:	d142      	bne.n	801252a <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 80124a4:	687b      	ldr	r3, [r7, #4]
 80124a6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80124aa:	2b00      	cmp	r3, #0
 80124ac:	db3d      	blt.n	801252a <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 80124ae:	687b      	ldr	r3, [r7, #4]
 80124b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80124b2:	4b59      	ldr	r3, [pc, #356]	; (8012618 <tcp_receive+0x270>)
 80124b4:	681b      	ldr	r3, [r3, #0]
 80124b6:	429a      	cmp	r2, r3
 80124b8:	d137      	bne.n	801252a <tcp_receive+0x182>
              found_dupack = 1;
 80124ba:	2301      	movs	r3, #1
 80124bc:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80124be:	687b      	ldr	r3, [r7, #4]
 80124c0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80124c4:	2bff      	cmp	r3, #255	; 0xff
 80124c6:	d007      	beq.n	80124d8 <tcp_receive+0x130>
                ++pcb->dupacks;
 80124c8:	687b      	ldr	r3, [r7, #4]
 80124ca:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80124ce:	3301      	adds	r3, #1
 80124d0:	b2da      	uxtb	r2, r3
 80124d2:	687b      	ldr	r3, [r7, #4]
 80124d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 80124d8:	687b      	ldr	r3, [r7, #4]
 80124da:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80124de:	2b03      	cmp	r3, #3
 80124e0:	d91b      	bls.n	801251a <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 80124e2:	687b      	ldr	r3, [r7, #4]
 80124e4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80124e8:	687b      	ldr	r3, [r7, #4]
 80124ea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80124ec:	4413      	add	r3, r2
 80124ee:	b29a      	uxth	r2, r3
 80124f0:	687b      	ldr	r3, [r7, #4]
 80124f2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80124f6:	429a      	cmp	r2, r3
 80124f8:	d30a      	bcc.n	8012510 <tcp_receive+0x168>
 80124fa:	687b      	ldr	r3, [r7, #4]
 80124fc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012500:	687b      	ldr	r3, [r7, #4]
 8012502:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012504:	4413      	add	r3, r2
 8012506:	b29a      	uxth	r2, r3
 8012508:	687b      	ldr	r3, [r7, #4]
 801250a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801250e:	e004      	b.n	801251a <tcp_receive+0x172>
 8012510:	687b      	ldr	r3, [r7, #4]
 8012512:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012516:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 801251a:	687b      	ldr	r3, [r7, #4]
 801251c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8012520:	2b02      	cmp	r3, #2
 8012522:	d902      	bls.n	801252a <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8012524:	6878      	ldr	r0, [r7, #4]
 8012526:	f001 ff0f 	bl	8014348 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 801252a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801252c:	2b00      	cmp	r3, #0
 801252e:	f040 8161 	bne.w	80127f4 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8012532:	687b      	ldr	r3, [r7, #4]
 8012534:	2200      	movs	r2, #0
 8012536:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801253a:	e15b      	b.n	80127f4 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801253c:	4b36      	ldr	r3, [pc, #216]	; (8012618 <tcp_receive+0x270>)
 801253e:	681a      	ldr	r2, [r3, #0]
 8012540:	687b      	ldr	r3, [r7, #4]
 8012542:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012544:	1ad3      	subs	r3, r2, r3
 8012546:	3b01      	subs	r3, #1
 8012548:	2b00      	cmp	r3, #0
 801254a:	f2c0 814e 	blt.w	80127ea <tcp_receive+0x442>
 801254e:	4b32      	ldr	r3, [pc, #200]	; (8012618 <tcp_receive+0x270>)
 8012550:	681a      	ldr	r2, [r3, #0]
 8012552:	687b      	ldr	r3, [r7, #4]
 8012554:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012556:	1ad3      	subs	r3, r2, r3
 8012558:	2b00      	cmp	r3, #0
 801255a:	f300 8146 	bgt.w	80127ea <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 801255e:	687b      	ldr	r3, [r7, #4]
 8012560:	8b5b      	ldrh	r3, [r3, #26]
 8012562:	f003 0304 	and.w	r3, r3, #4
 8012566:	2b00      	cmp	r3, #0
 8012568:	d010      	beq.n	801258c <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 801256a:	687b      	ldr	r3, [r7, #4]
 801256c:	8b5b      	ldrh	r3, [r3, #26]
 801256e:	f023 0304 	bic.w	r3, r3, #4
 8012572:	b29a      	uxth	r2, r3
 8012574:	687b      	ldr	r3, [r7, #4]
 8012576:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8012578:	687b      	ldr	r3, [r7, #4]
 801257a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801257e:	687b      	ldr	r3, [r7, #4]
 8012580:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8012584:	687b      	ldr	r3, [r7, #4]
 8012586:	2200      	movs	r2, #0
 8012588:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 801258c:	687b      	ldr	r3, [r7, #4]
 801258e:	2200      	movs	r2, #0
 8012590:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8012594:	687b      	ldr	r3, [r7, #4]
 8012596:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801259a:	10db      	asrs	r3, r3, #3
 801259c:	b21b      	sxth	r3, r3
 801259e:	b29a      	uxth	r2, r3
 80125a0:	687b      	ldr	r3, [r7, #4]
 80125a2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80125a6:	b29b      	uxth	r3, r3
 80125a8:	4413      	add	r3, r2
 80125aa:	b29b      	uxth	r3, r3
 80125ac:	b21a      	sxth	r2, r3
 80125ae:	687b      	ldr	r3, [r7, #4]
 80125b0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 80125b4:	4b18      	ldr	r3, [pc, #96]	; (8012618 <tcp_receive+0x270>)
 80125b6:	681b      	ldr	r3, [r3, #0]
 80125b8:	b29a      	uxth	r2, r3
 80125ba:	687b      	ldr	r3, [r7, #4]
 80125bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80125be:	b29b      	uxth	r3, r3
 80125c0:	1ad3      	subs	r3, r2, r3
 80125c2:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 80125c4:	687b      	ldr	r3, [r7, #4]
 80125c6:	2200      	movs	r2, #0
 80125c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 80125cc:	4b12      	ldr	r3, [pc, #72]	; (8012618 <tcp_receive+0x270>)
 80125ce:	681a      	ldr	r2, [r3, #0]
 80125d0:	687b      	ldr	r3, [r7, #4]
 80125d2:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 80125d4:	687b      	ldr	r3, [r7, #4]
 80125d6:	7d1b      	ldrb	r3, [r3, #20]
 80125d8:	2b03      	cmp	r3, #3
 80125da:	f240 8097 	bls.w	801270c <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 80125de:	687b      	ldr	r3, [r7, #4]
 80125e0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80125e4:	687b      	ldr	r3, [r7, #4]
 80125e6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80125ea:	429a      	cmp	r2, r3
 80125ec:	d245      	bcs.n	801267a <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 80125ee:	687b      	ldr	r3, [r7, #4]
 80125f0:	8b5b      	ldrh	r3, [r3, #26]
 80125f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80125f6:	2b00      	cmp	r3, #0
 80125f8:	d014      	beq.n	8012624 <tcp_receive+0x27c>
 80125fa:	2301      	movs	r3, #1
 80125fc:	e013      	b.n	8012626 <tcp_receive+0x27e>
 80125fe:	bf00      	nop
 8012600:	0801ee64 	.word	0x0801ee64
 8012604:	0801f194 	.word	0x0801f194
 8012608:	0801eeb0 	.word	0x0801eeb0
 801260c:	0801f1b0 	.word	0x0801f1b0
 8012610:	20013d20 	.word	0x20013d20
 8012614:	20013d14 	.word	0x20013d14
 8012618:	20013d18 	.word	0x20013d18
 801261c:	20013d04 	.word	0x20013d04
 8012620:	20013d1e 	.word	0x20013d1e
 8012624:	2302      	movs	r3, #2
 8012626:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 801262a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801262e:	b29a      	uxth	r2, r3
 8012630:	687b      	ldr	r3, [r7, #4]
 8012632:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012634:	fb12 f303 	smulbb	r3, r2, r3
 8012638:	b29b      	uxth	r3, r3
 801263a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801263c:	4293      	cmp	r3, r2
 801263e:	bf28      	it	cs
 8012640:	4613      	movcs	r3, r2
 8012642:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8012644:	687b      	ldr	r3, [r7, #4]
 8012646:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801264a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801264c:	4413      	add	r3, r2
 801264e:	b29a      	uxth	r2, r3
 8012650:	687b      	ldr	r3, [r7, #4]
 8012652:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012656:	429a      	cmp	r2, r3
 8012658:	d309      	bcc.n	801266e <tcp_receive+0x2c6>
 801265a:	687b      	ldr	r3, [r7, #4]
 801265c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012660:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8012662:	4413      	add	r3, r2
 8012664:	b29a      	uxth	r2, r3
 8012666:	687b      	ldr	r3, [r7, #4]
 8012668:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801266c:	e04e      	b.n	801270c <tcp_receive+0x364>
 801266e:	687b      	ldr	r3, [r7, #4]
 8012670:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012674:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8012678:	e048      	b.n	801270c <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 801267a:	687b      	ldr	r3, [r7, #4]
 801267c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8012680:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8012682:	4413      	add	r3, r2
 8012684:	b29a      	uxth	r2, r3
 8012686:	687b      	ldr	r3, [r7, #4]
 8012688:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801268c:	429a      	cmp	r2, r3
 801268e:	d309      	bcc.n	80126a4 <tcp_receive+0x2fc>
 8012690:	687b      	ldr	r3, [r7, #4]
 8012692:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8012696:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8012698:	4413      	add	r3, r2
 801269a:	b29a      	uxth	r2, r3
 801269c:	687b      	ldr	r3, [r7, #4]
 801269e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80126a2:	e004      	b.n	80126ae <tcp_receive+0x306>
 80126a4:	687b      	ldr	r3, [r7, #4]
 80126a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80126aa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 80126ae:	687b      	ldr	r3, [r7, #4]
 80126b0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80126b4:	687b      	ldr	r3, [r7, #4]
 80126b6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80126ba:	429a      	cmp	r2, r3
 80126bc:	d326      	bcc.n	801270c <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 80126be:	687b      	ldr	r3, [r7, #4]
 80126c0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80126c4:	687b      	ldr	r3, [r7, #4]
 80126c6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80126ca:	1ad3      	subs	r3, r2, r3
 80126cc:	b29a      	uxth	r2, r3
 80126ce:	687b      	ldr	r3, [r7, #4]
 80126d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 80126d4:	687b      	ldr	r3, [r7, #4]
 80126d6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80126da:	687b      	ldr	r3, [r7, #4]
 80126dc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80126de:	4413      	add	r3, r2
 80126e0:	b29a      	uxth	r2, r3
 80126e2:	687b      	ldr	r3, [r7, #4]
 80126e4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80126e8:	429a      	cmp	r2, r3
 80126ea:	d30a      	bcc.n	8012702 <tcp_receive+0x35a>
 80126ec:	687b      	ldr	r3, [r7, #4]
 80126ee:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80126f2:	687b      	ldr	r3, [r7, #4]
 80126f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80126f6:	4413      	add	r3, r2
 80126f8:	b29a      	uxth	r2, r3
 80126fa:	687b      	ldr	r3, [r7, #4]
 80126fc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8012700:	e004      	b.n	801270c <tcp_receive+0x364>
 8012702:	687b      	ldr	r3, [r7, #4]
 8012704:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012708:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 801270c:	687b      	ldr	r3, [r7, #4]
 801270e:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8012710:	687b      	ldr	r3, [r7, #4]
 8012712:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012714:	4a98      	ldr	r2, [pc, #608]	; (8012978 <tcp_receive+0x5d0>)
 8012716:	6878      	ldr	r0, [r7, #4]
 8012718:	f7ff fdca 	bl	80122b0 <tcp_free_acked_segments>
 801271c:	4602      	mov	r2, r0
 801271e:	687b      	ldr	r3, [r7, #4]
 8012720:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8012722:	687b      	ldr	r3, [r7, #4]
 8012724:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8012726:	687b      	ldr	r3, [r7, #4]
 8012728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801272a:	4a94      	ldr	r2, [pc, #592]	; (801297c <tcp_receive+0x5d4>)
 801272c:	6878      	ldr	r0, [r7, #4]
 801272e:	f7ff fdbf 	bl	80122b0 <tcp_free_acked_segments>
 8012732:	4602      	mov	r2, r0
 8012734:	687b      	ldr	r3, [r7, #4]
 8012736:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8012738:	687b      	ldr	r3, [r7, #4]
 801273a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801273c:	2b00      	cmp	r3, #0
 801273e:	d104      	bne.n	801274a <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8012740:	687b      	ldr	r3, [r7, #4]
 8012742:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012746:	861a      	strh	r2, [r3, #48]	; 0x30
 8012748:	e002      	b.n	8012750 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 801274a:	687b      	ldr	r3, [r7, #4]
 801274c:	2200      	movs	r2, #0
 801274e:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8012750:	687b      	ldr	r3, [r7, #4]
 8012752:	2200      	movs	r2, #0
 8012754:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8012756:	687b      	ldr	r3, [r7, #4]
 8012758:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801275a:	2b00      	cmp	r3, #0
 801275c:	d103      	bne.n	8012766 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 801275e:	687b      	ldr	r3, [r7, #4]
 8012760:	2200      	movs	r2, #0
 8012762:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8012766:	687b      	ldr	r3, [r7, #4]
 8012768:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 801276c:	4b84      	ldr	r3, [pc, #528]	; (8012980 <tcp_receive+0x5d8>)
 801276e:	881b      	ldrh	r3, [r3, #0]
 8012770:	4413      	add	r3, r2
 8012772:	b29a      	uxth	r2, r3
 8012774:	687b      	ldr	r3, [r7, #4]
 8012776:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 801277a:	687b      	ldr	r3, [r7, #4]
 801277c:	8b5b      	ldrh	r3, [r3, #26]
 801277e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012782:	2b00      	cmp	r3, #0
 8012784:	d035      	beq.n	80127f2 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8012786:	687b      	ldr	r3, [r7, #4]
 8012788:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801278a:	2b00      	cmp	r3, #0
 801278c:	d118      	bne.n	80127c0 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 801278e:	687b      	ldr	r3, [r7, #4]
 8012790:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012792:	2b00      	cmp	r3, #0
 8012794:	d00c      	beq.n	80127b0 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8012796:	687b      	ldr	r3, [r7, #4]
 8012798:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801279a:	687b      	ldr	r3, [r7, #4]
 801279c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801279e:	691b      	ldr	r3, [r3, #16]
 80127a0:	685b      	ldr	r3, [r3, #4]
 80127a2:	4618      	mov	r0, r3
 80127a4:	f7fa fe4b 	bl	800d43e <lwip_htonl>
 80127a8:	4603      	mov	r3, r0
 80127aa:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 80127ac:	2b00      	cmp	r3, #0
 80127ae:	dc20      	bgt.n	80127f2 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 80127b0:	687b      	ldr	r3, [r7, #4]
 80127b2:	8b5b      	ldrh	r3, [r3, #26]
 80127b4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80127b8:	b29a      	uxth	r2, r3
 80127ba:	687b      	ldr	r3, [r7, #4]
 80127bc:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80127be:	e018      	b.n	80127f2 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 80127c0:	687b      	ldr	r3, [r7, #4]
 80127c2:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80127c4:	687b      	ldr	r3, [r7, #4]
 80127c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80127c8:	691b      	ldr	r3, [r3, #16]
 80127ca:	685b      	ldr	r3, [r3, #4]
 80127cc:	4618      	mov	r0, r3
 80127ce:	f7fa fe36 	bl	800d43e <lwip_htonl>
 80127d2:	4603      	mov	r3, r0
 80127d4:	1ae3      	subs	r3, r4, r3
 80127d6:	2b00      	cmp	r3, #0
 80127d8:	dc0b      	bgt.n	80127f2 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 80127da:	687b      	ldr	r3, [r7, #4]
 80127dc:	8b5b      	ldrh	r3, [r3, #26]
 80127de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80127e2:	b29a      	uxth	r2, r3
 80127e4:	687b      	ldr	r3, [r7, #4]
 80127e6:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80127e8:	e003      	b.n	80127f2 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 80127ea:	6878      	ldr	r0, [r7, #4]
 80127ec:	f001 ffaa 	bl	8014744 <tcp_send_empty_ack>
 80127f0:	e000      	b.n	80127f4 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80127f2:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80127f4:	687b      	ldr	r3, [r7, #4]
 80127f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80127f8:	2b00      	cmp	r3, #0
 80127fa:	d05b      	beq.n	80128b4 <tcp_receive+0x50c>
 80127fc:	687b      	ldr	r3, [r7, #4]
 80127fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012800:	4b60      	ldr	r3, [pc, #384]	; (8012984 <tcp_receive+0x5dc>)
 8012802:	681b      	ldr	r3, [r3, #0]
 8012804:	1ad3      	subs	r3, r2, r3
 8012806:	2b00      	cmp	r3, #0
 8012808:	da54      	bge.n	80128b4 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 801280a:	4b5f      	ldr	r3, [pc, #380]	; (8012988 <tcp_receive+0x5e0>)
 801280c:	681b      	ldr	r3, [r3, #0]
 801280e:	b29a      	uxth	r2, r3
 8012810:	687b      	ldr	r3, [r7, #4]
 8012812:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012814:	b29b      	uxth	r3, r3
 8012816:	1ad3      	subs	r3, r2, r3
 8012818:	b29b      	uxth	r3, r3
 801281a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 801281e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8012822:	687b      	ldr	r3, [r7, #4]
 8012824:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8012828:	10db      	asrs	r3, r3, #3
 801282a:	b21b      	sxth	r3, r3
 801282c:	b29b      	uxth	r3, r3
 801282e:	1ad3      	subs	r3, r2, r3
 8012830:	b29b      	uxth	r3, r3
 8012832:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8012836:	687b      	ldr	r3, [r7, #4]
 8012838:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801283c:	b29a      	uxth	r2, r3
 801283e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8012842:	4413      	add	r3, r2
 8012844:	b29b      	uxth	r3, r3
 8012846:	b21a      	sxth	r2, r3
 8012848:	687b      	ldr	r3, [r7, #4]
 801284a:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 801284c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8012850:	2b00      	cmp	r3, #0
 8012852:	da05      	bge.n	8012860 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8012854:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8012858:	425b      	negs	r3, r3
 801285a:	b29b      	uxth	r3, r3
 801285c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8012860:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8012864:	687b      	ldr	r3, [r7, #4]
 8012866:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801286a:	109b      	asrs	r3, r3, #2
 801286c:	b21b      	sxth	r3, r3
 801286e:	b29b      	uxth	r3, r3
 8012870:	1ad3      	subs	r3, r2, r3
 8012872:	b29b      	uxth	r3, r3
 8012874:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8012878:	687b      	ldr	r3, [r7, #4]
 801287a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801287e:	b29a      	uxth	r2, r3
 8012880:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8012884:	4413      	add	r3, r2
 8012886:	b29b      	uxth	r3, r3
 8012888:	b21a      	sxth	r2, r3
 801288a:	687b      	ldr	r3, [r7, #4]
 801288c:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801288e:	687b      	ldr	r3, [r7, #4]
 8012890:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8012894:	10db      	asrs	r3, r3, #3
 8012896:	b21b      	sxth	r3, r3
 8012898:	b29a      	uxth	r2, r3
 801289a:	687b      	ldr	r3, [r7, #4]
 801289c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80128a0:	b29b      	uxth	r3, r3
 80128a2:	4413      	add	r3, r2
 80128a4:	b29b      	uxth	r3, r3
 80128a6:	b21a      	sxth	r2, r3
 80128a8:	687b      	ldr	r3, [r7, #4]
 80128aa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 80128ae:	687b      	ldr	r3, [r7, #4]
 80128b0:	2200      	movs	r2, #0
 80128b2:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80128b4:	4b35      	ldr	r3, [pc, #212]	; (801298c <tcp_receive+0x5e4>)
 80128b6:	881b      	ldrh	r3, [r3, #0]
 80128b8:	2b00      	cmp	r3, #0
 80128ba:	f000 84e2 	beq.w	8013282 <tcp_receive+0xeda>
 80128be:	687b      	ldr	r3, [r7, #4]
 80128c0:	7d1b      	ldrb	r3, [r3, #20]
 80128c2:	2b06      	cmp	r3, #6
 80128c4:	f200 84dd 	bhi.w	8013282 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80128c8:	687b      	ldr	r3, [r7, #4]
 80128ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80128cc:	4b30      	ldr	r3, [pc, #192]	; (8012990 <tcp_receive+0x5e8>)
 80128ce:	681b      	ldr	r3, [r3, #0]
 80128d0:	1ad3      	subs	r3, r2, r3
 80128d2:	3b01      	subs	r3, #1
 80128d4:	2b00      	cmp	r3, #0
 80128d6:	f2c0 808f 	blt.w	80129f8 <tcp_receive+0x650>
 80128da:	687b      	ldr	r3, [r7, #4]
 80128dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80128de:	4b2b      	ldr	r3, [pc, #172]	; (801298c <tcp_receive+0x5e4>)
 80128e0:	881b      	ldrh	r3, [r3, #0]
 80128e2:	4619      	mov	r1, r3
 80128e4:	4b2a      	ldr	r3, [pc, #168]	; (8012990 <tcp_receive+0x5e8>)
 80128e6:	681b      	ldr	r3, [r3, #0]
 80128e8:	440b      	add	r3, r1
 80128ea:	1ad3      	subs	r3, r2, r3
 80128ec:	3301      	adds	r3, #1
 80128ee:	2b00      	cmp	r3, #0
 80128f0:	f300 8082 	bgt.w	80129f8 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 80128f4:	4b27      	ldr	r3, [pc, #156]	; (8012994 <tcp_receive+0x5ec>)
 80128f6:	685b      	ldr	r3, [r3, #4]
 80128f8:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 80128fa:	687b      	ldr	r3, [r7, #4]
 80128fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80128fe:	4b24      	ldr	r3, [pc, #144]	; (8012990 <tcp_receive+0x5e8>)
 8012900:	681b      	ldr	r3, [r3, #0]
 8012902:	1ad3      	subs	r3, r2, r3
 8012904:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8012906:	4b23      	ldr	r3, [pc, #140]	; (8012994 <tcp_receive+0x5ec>)
 8012908:	685b      	ldr	r3, [r3, #4]
 801290a:	2b00      	cmp	r3, #0
 801290c:	d106      	bne.n	801291c <tcp_receive+0x574>
 801290e:	4b22      	ldr	r3, [pc, #136]	; (8012998 <tcp_receive+0x5f0>)
 8012910:	f240 5294 	movw	r2, #1428	; 0x594
 8012914:	4921      	ldr	r1, [pc, #132]	; (801299c <tcp_receive+0x5f4>)
 8012916:	4822      	ldr	r0, [pc, #136]	; (80129a0 <tcp_receive+0x5f8>)
 8012918:	f008 fa5a 	bl	801add0 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 801291c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801291e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8012922:	4293      	cmp	r3, r2
 8012924:	d906      	bls.n	8012934 <tcp_receive+0x58c>
 8012926:	4b1c      	ldr	r3, [pc, #112]	; (8012998 <tcp_receive+0x5f0>)
 8012928:	f240 5295 	movw	r2, #1429	; 0x595
 801292c:	491d      	ldr	r1, [pc, #116]	; (80129a4 <tcp_receive+0x5fc>)
 801292e:	481c      	ldr	r0, [pc, #112]	; (80129a0 <tcp_receive+0x5f8>)
 8012930:	f008 fa4e 	bl	801add0 <iprintf>
      off = (u16_t)off32;
 8012934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012936:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801293a:	4b16      	ldr	r3, [pc, #88]	; (8012994 <tcp_receive+0x5ec>)
 801293c:	685b      	ldr	r3, [r3, #4]
 801293e:	891b      	ldrh	r3, [r3, #8]
 8012940:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012944:	429a      	cmp	r2, r3
 8012946:	d906      	bls.n	8012956 <tcp_receive+0x5ae>
 8012948:	4b13      	ldr	r3, [pc, #76]	; (8012998 <tcp_receive+0x5f0>)
 801294a:	f240 5297 	movw	r2, #1431	; 0x597
 801294e:	4916      	ldr	r1, [pc, #88]	; (80129a8 <tcp_receive+0x600>)
 8012950:	4813      	ldr	r0, [pc, #76]	; (80129a0 <tcp_receive+0x5f8>)
 8012952:	f008 fa3d 	bl	801add0 <iprintf>
      inseg.len -= off;
 8012956:	4b0f      	ldr	r3, [pc, #60]	; (8012994 <tcp_receive+0x5ec>)
 8012958:	891a      	ldrh	r2, [r3, #8]
 801295a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801295e:	1ad3      	subs	r3, r2, r3
 8012960:	b29a      	uxth	r2, r3
 8012962:	4b0c      	ldr	r3, [pc, #48]	; (8012994 <tcp_receive+0x5ec>)
 8012964:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8012966:	4b0b      	ldr	r3, [pc, #44]	; (8012994 <tcp_receive+0x5ec>)
 8012968:	685b      	ldr	r3, [r3, #4]
 801296a:	891a      	ldrh	r2, [r3, #8]
 801296c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012970:	1ad3      	subs	r3, r2, r3
 8012972:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8012974:	e02a      	b.n	80129cc <tcp_receive+0x624>
 8012976:	bf00      	nop
 8012978:	0801f1cc 	.word	0x0801f1cc
 801297c:	0801f1d4 	.word	0x0801f1d4
 8012980:	20013d1c 	.word	0x20013d1c
 8012984:	20013d18 	.word	0x20013d18
 8012988:	20013cd8 	.word	0x20013cd8
 801298c:	20013d1e 	.word	0x20013d1e
 8012990:	20013d14 	.word	0x20013d14
 8012994:	20013cf0 	.word	0x20013cf0
 8012998:	0801ee64 	.word	0x0801ee64
 801299c:	0801f1dc 	.word	0x0801f1dc
 80129a0:	0801eeb0 	.word	0x0801eeb0
 80129a4:	0801f1ec 	.word	0x0801f1ec
 80129a8:	0801f1fc 	.word	0x0801f1fc
        off -= p->len;
 80129ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80129ae:	895b      	ldrh	r3, [r3, #10]
 80129b0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80129b4:	1ad3      	subs	r3, r2, r3
 80129b6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 80129ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80129bc:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80129be:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 80129c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80129c2:	2200      	movs	r2, #0
 80129c4:	815a      	strh	r2, [r3, #10]
        p = p->next;
 80129c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80129c8:	681b      	ldr	r3, [r3, #0]
 80129ca:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 80129cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80129ce:	895b      	ldrh	r3, [r3, #10]
 80129d0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80129d4:	429a      	cmp	r2, r3
 80129d6:	d8e9      	bhi.n	80129ac <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 80129d8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80129dc:	4619      	mov	r1, r3
 80129de:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80129e0:	f7fc f9b4 	bl	800ed4c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80129e4:	687b      	ldr	r3, [r7, #4]
 80129e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80129e8:	4a91      	ldr	r2, [pc, #580]	; (8012c30 <tcp_receive+0x888>)
 80129ea:	6013      	str	r3, [r2, #0]
 80129ec:	4b91      	ldr	r3, [pc, #580]	; (8012c34 <tcp_receive+0x88c>)
 80129ee:	691b      	ldr	r3, [r3, #16]
 80129f0:	4a8f      	ldr	r2, [pc, #572]	; (8012c30 <tcp_receive+0x888>)
 80129f2:	6812      	ldr	r2, [r2, #0]
 80129f4:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80129f6:	e00d      	b.n	8012a14 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 80129f8:	4b8d      	ldr	r3, [pc, #564]	; (8012c30 <tcp_receive+0x888>)
 80129fa:	681a      	ldr	r2, [r3, #0]
 80129fc:	687b      	ldr	r3, [r7, #4]
 80129fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012a00:	1ad3      	subs	r3, r2, r3
 8012a02:	2b00      	cmp	r3, #0
 8012a04:	da06      	bge.n	8012a14 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8012a06:	687b      	ldr	r3, [r7, #4]
 8012a08:	8b5b      	ldrh	r3, [r3, #26]
 8012a0a:	f043 0302 	orr.w	r3, r3, #2
 8012a0e:	b29a      	uxth	r2, r3
 8012a10:	687b      	ldr	r3, [r7, #4]
 8012a12:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8012a14:	4b86      	ldr	r3, [pc, #536]	; (8012c30 <tcp_receive+0x888>)
 8012a16:	681a      	ldr	r2, [r3, #0]
 8012a18:	687b      	ldr	r3, [r7, #4]
 8012a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012a1c:	1ad3      	subs	r3, r2, r3
 8012a1e:	2b00      	cmp	r3, #0
 8012a20:	f2c0 842a 	blt.w	8013278 <tcp_receive+0xed0>
 8012a24:	4b82      	ldr	r3, [pc, #520]	; (8012c30 <tcp_receive+0x888>)
 8012a26:	681a      	ldr	r2, [r3, #0]
 8012a28:	687b      	ldr	r3, [r7, #4]
 8012a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012a2c:	6879      	ldr	r1, [r7, #4]
 8012a2e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012a30:	440b      	add	r3, r1
 8012a32:	1ad3      	subs	r3, r2, r3
 8012a34:	3301      	adds	r3, #1
 8012a36:	2b00      	cmp	r3, #0
 8012a38:	f300 841e 	bgt.w	8013278 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8012a3c:	687b      	ldr	r3, [r7, #4]
 8012a3e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012a40:	4b7b      	ldr	r3, [pc, #492]	; (8012c30 <tcp_receive+0x888>)
 8012a42:	681b      	ldr	r3, [r3, #0]
 8012a44:	429a      	cmp	r2, r3
 8012a46:	f040 829a 	bne.w	8012f7e <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8012a4a:	4b7a      	ldr	r3, [pc, #488]	; (8012c34 <tcp_receive+0x88c>)
 8012a4c:	891c      	ldrh	r4, [r3, #8]
 8012a4e:	4b79      	ldr	r3, [pc, #484]	; (8012c34 <tcp_receive+0x88c>)
 8012a50:	691b      	ldr	r3, [r3, #16]
 8012a52:	899b      	ldrh	r3, [r3, #12]
 8012a54:	b29b      	uxth	r3, r3
 8012a56:	4618      	mov	r0, r3
 8012a58:	f7fa fcdc 	bl	800d414 <lwip_htons>
 8012a5c:	4603      	mov	r3, r0
 8012a5e:	b2db      	uxtb	r3, r3
 8012a60:	f003 0303 	and.w	r3, r3, #3
 8012a64:	2b00      	cmp	r3, #0
 8012a66:	d001      	beq.n	8012a6c <tcp_receive+0x6c4>
 8012a68:	2301      	movs	r3, #1
 8012a6a:	e000      	b.n	8012a6e <tcp_receive+0x6c6>
 8012a6c:	2300      	movs	r3, #0
 8012a6e:	4423      	add	r3, r4
 8012a70:	b29a      	uxth	r2, r3
 8012a72:	4b71      	ldr	r3, [pc, #452]	; (8012c38 <tcp_receive+0x890>)
 8012a74:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8012a76:	687b      	ldr	r3, [r7, #4]
 8012a78:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012a7a:	4b6f      	ldr	r3, [pc, #444]	; (8012c38 <tcp_receive+0x890>)
 8012a7c:	881b      	ldrh	r3, [r3, #0]
 8012a7e:	429a      	cmp	r2, r3
 8012a80:	d275      	bcs.n	8012b6e <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8012a82:	4b6c      	ldr	r3, [pc, #432]	; (8012c34 <tcp_receive+0x88c>)
 8012a84:	691b      	ldr	r3, [r3, #16]
 8012a86:	899b      	ldrh	r3, [r3, #12]
 8012a88:	b29b      	uxth	r3, r3
 8012a8a:	4618      	mov	r0, r3
 8012a8c:	f7fa fcc2 	bl	800d414 <lwip_htons>
 8012a90:	4603      	mov	r3, r0
 8012a92:	b2db      	uxtb	r3, r3
 8012a94:	f003 0301 	and.w	r3, r3, #1
 8012a98:	2b00      	cmp	r3, #0
 8012a9a:	d01f      	beq.n	8012adc <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8012a9c:	4b65      	ldr	r3, [pc, #404]	; (8012c34 <tcp_receive+0x88c>)
 8012a9e:	691b      	ldr	r3, [r3, #16]
 8012aa0:	899b      	ldrh	r3, [r3, #12]
 8012aa2:	b29b      	uxth	r3, r3
 8012aa4:	b21b      	sxth	r3, r3
 8012aa6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8012aaa:	b21c      	sxth	r4, r3
 8012aac:	4b61      	ldr	r3, [pc, #388]	; (8012c34 <tcp_receive+0x88c>)
 8012aae:	691b      	ldr	r3, [r3, #16]
 8012ab0:	899b      	ldrh	r3, [r3, #12]
 8012ab2:	b29b      	uxth	r3, r3
 8012ab4:	4618      	mov	r0, r3
 8012ab6:	f7fa fcad 	bl	800d414 <lwip_htons>
 8012aba:	4603      	mov	r3, r0
 8012abc:	b2db      	uxtb	r3, r3
 8012abe:	b29b      	uxth	r3, r3
 8012ac0:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8012ac4:	b29b      	uxth	r3, r3
 8012ac6:	4618      	mov	r0, r3
 8012ac8:	f7fa fca4 	bl	800d414 <lwip_htons>
 8012acc:	4603      	mov	r3, r0
 8012ace:	b21b      	sxth	r3, r3
 8012ad0:	4323      	orrs	r3, r4
 8012ad2:	b21a      	sxth	r2, r3
 8012ad4:	4b57      	ldr	r3, [pc, #348]	; (8012c34 <tcp_receive+0x88c>)
 8012ad6:	691b      	ldr	r3, [r3, #16]
 8012ad8:	b292      	uxth	r2, r2
 8012ada:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8012adc:	687b      	ldr	r3, [r7, #4]
 8012ade:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012ae0:	4b54      	ldr	r3, [pc, #336]	; (8012c34 <tcp_receive+0x88c>)
 8012ae2:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8012ae4:	4b53      	ldr	r3, [pc, #332]	; (8012c34 <tcp_receive+0x88c>)
 8012ae6:	691b      	ldr	r3, [r3, #16]
 8012ae8:	899b      	ldrh	r3, [r3, #12]
 8012aea:	b29b      	uxth	r3, r3
 8012aec:	4618      	mov	r0, r3
 8012aee:	f7fa fc91 	bl	800d414 <lwip_htons>
 8012af2:	4603      	mov	r3, r0
 8012af4:	b2db      	uxtb	r3, r3
 8012af6:	f003 0302 	and.w	r3, r3, #2
 8012afa:	2b00      	cmp	r3, #0
 8012afc:	d005      	beq.n	8012b0a <tcp_receive+0x762>
            inseg.len -= 1;
 8012afe:	4b4d      	ldr	r3, [pc, #308]	; (8012c34 <tcp_receive+0x88c>)
 8012b00:	891b      	ldrh	r3, [r3, #8]
 8012b02:	3b01      	subs	r3, #1
 8012b04:	b29a      	uxth	r2, r3
 8012b06:	4b4b      	ldr	r3, [pc, #300]	; (8012c34 <tcp_receive+0x88c>)
 8012b08:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8012b0a:	4b4a      	ldr	r3, [pc, #296]	; (8012c34 <tcp_receive+0x88c>)
 8012b0c:	685b      	ldr	r3, [r3, #4]
 8012b0e:	4a49      	ldr	r2, [pc, #292]	; (8012c34 <tcp_receive+0x88c>)
 8012b10:	8912      	ldrh	r2, [r2, #8]
 8012b12:	4611      	mov	r1, r2
 8012b14:	4618      	mov	r0, r3
 8012b16:	f7fc f819 	bl	800eb4c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8012b1a:	4b46      	ldr	r3, [pc, #280]	; (8012c34 <tcp_receive+0x88c>)
 8012b1c:	891c      	ldrh	r4, [r3, #8]
 8012b1e:	4b45      	ldr	r3, [pc, #276]	; (8012c34 <tcp_receive+0x88c>)
 8012b20:	691b      	ldr	r3, [r3, #16]
 8012b22:	899b      	ldrh	r3, [r3, #12]
 8012b24:	b29b      	uxth	r3, r3
 8012b26:	4618      	mov	r0, r3
 8012b28:	f7fa fc74 	bl	800d414 <lwip_htons>
 8012b2c:	4603      	mov	r3, r0
 8012b2e:	b2db      	uxtb	r3, r3
 8012b30:	f003 0303 	and.w	r3, r3, #3
 8012b34:	2b00      	cmp	r3, #0
 8012b36:	d001      	beq.n	8012b3c <tcp_receive+0x794>
 8012b38:	2301      	movs	r3, #1
 8012b3a:	e000      	b.n	8012b3e <tcp_receive+0x796>
 8012b3c:	2300      	movs	r3, #0
 8012b3e:	4423      	add	r3, r4
 8012b40:	b29a      	uxth	r2, r3
 8012b42:	4b3d      	ldr	r3, [pc, #244]	; (8012c38 <tcp_receive+0x890>)
 8012b44:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8012b46:	4b3c      	ldr	r3, [pc, #240]	; (8012c38 <tcp_receive+0x890>)
 8012b48:	881b      	ldrh	r3, [r3, #0]
 8012b4a:	461a      	mov	r2, r3
 8012b4c:	4b38      	ldr	r3, [pc, #224]	; (8012c30 <tcp_receive+0x888>)
 8012b4e:	681b      	ldr	r3, [r3, #0]
 8012b50:	441a      	add	r2, r3
 8012b52:	687b      	ldr	r3, [r7, #4]
 8012b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012b56:	6879      	ldr	r1, [r7, #4]
 8012b58:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012b5a:	440b      	add	r3, r1
 8012b5c:	429a      	cmp	r2, r3
 8012b5e:	d006      	beq.n	8012b6e <tcp_receive+0x7c6>
 8012b60:	4b36      	ldr	r3, [pc, #216]	; (8012c3c <tcp_receive+0x894>)
 8012b62:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8012b66:	4936      	ldr	r1, [pc, #216]	; (8012c40 <tcp_receive+0x898>)
 8012b68:	4836      	ldr	r0, [pc, #216]	; (8012c44 <tcp_receive+0x89c>)
 8012b6a:	f008 f931 	bl	801add0 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8012b6e:	687b      	ldr	r3, [r7, #4]
 8012b70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012b72:	2b00      	cmp	r3, #0
 8012b74:	f000 80e7 	beq.w	8012d46 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8012b78:	4b2e      	ldr	r3, [pc, #184]	; (8012c34 <tcp_receive+0x88c>)
 8012b7a:	691b      	ldr	r3, [r3, #16]
 8012b7c:	899b      	ldrh	r3, [r3, #12]
 8012b7e:	b29b      	uxth	r3, r3
 8012b80:	4618      	mov	r0, r3
 8012b82:	f7fa fc47 	bl	800d414 <lwip_htons>
 8012b86:	4603      	mov	r3, r0
 8012b88:	b2db      	uxtb	r3, r3
 8012b8a:	f003 0301 	and.w	r3, r3, #1
 8012b8e:	2b00      	cmp	r3, #0
 8012b90:	d010      	beq.n	8012bb4 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8012b92:	e00a      	b.n	8012baa <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8012b94:	687b      	ldr	r3, [r7, #4]
 8012b96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012b98:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8012b9a:	687b      	ldr	r3, [r7, #4]
 8012b9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012b9e:	681a      	ldr	r2, [r3, #0]
 8012ba0:	687b      	ldr	r3, [r7, #4]
 8012ba2:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8012ba4:	68f8      	ldr	r0, [r7, #12]
 8012ba6:	f7fd fd7e 	bl	80106a6 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8012baa:	687b      	ldr	r3, [r7, #4]
 8012bac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012bae:	2b00      	cmp	r3, #0
 8012bb0:	d1f0      	bne.n	8012b94 <tcp_receive+0x7ec>
 8012bb2:	e0c8      	b.n	8012d46 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8012bb4:	687b      	ldr	r3, [r7, #4]
 8012bb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012bb8:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8012bba:	e052      	b.n	8012c62 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8012bbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012bbe:	691b      	ldr	r3, [r3, #16]
 8012bc0:	899b      	ldrh	r3, [r3, #12]
 8012bc2:	b29b      	uxth	r3, r3
 8012bc4:	4618      	mov	r0, r3
 8012bc6:	f7fa fc25 	bl	800d414 <lwip_htons>
 8012bca:	4603      	mov	r3, r0
 8012bcc:	b2db      	uxtb	r3, r3
 8012bce:	f003 0301 	and.w	r3, r3, #1
 8012bd2:	2b00      	cmp	r3, #0
 8012bd4:	d03d      	beq.n	8012c52 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8012bd6:	4b17      	ldr	r3, [pc, #92]	; (8012c34 <tcp_receive+0x88c>)
 8012bd8:	691b      	ldr	r3, [r3, #16]
 8012bda:	899b      	ldrh	r3, [r3, #12]
 8012bdc:	b29b      	uxth	r3, r3
 8012bde:	4618      	mov	r0, r3
 8012be0:	f7fa fc18 	bl	800d414 <lwip_htons>
 8012be4:	4603      	mov	r3, r0
 8012be6:	b2db      	uxtb	r3, r3
 8012be8:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8012bec:	2b00      	cmp	r3, #0
 8012bee:	d130      	bne.n	8012c52 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8012bf0:	4b10      	ldr	r3, [pc, #64]	; (8012c34 <tcp_receive+0x88c>)
 8012bf2:	691b      	ldr	r3, [r3, #16]
 8012bf4:	899b      	ldrh	r3, [r3, #12]
 8012bf6:	b29c      	uxth	r4, r3
 8012bf8:	2001      	movs	r0, #1
 8012bfa:	f7fa fc0b 	bl	800d414 <lwip_htons>
 8012bfe:	4603      	mov	r3, r0
 8012c00:	461a      	mov	r2, r3
 8012c02:	4b0c      	ldr	r3, [pc, #48]	; (8012c34 <tcp_receive+0x88c>)
 8012c04:	691b      	ldr	r3, [r3, #16]
 8012c06:	4322      	orrs	r2, r4
 8012c08:	b292      	uxth	r2, r2
 8012c0a:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8012c0c:	4b09      	ldr	r3, [pc, #36]	; (8012c34 <tcp_receive+0x88c>)
 8012c0e:	891c      	ldrh	r4, [r3, #8]
 8012c10:	4b08      	ldr	r3, [pc, #32]	; (8012c34 <tcp_receive+0x88c>)
 8012c12:	691b      	ldr	r3, [r3, #16]
 8012c14:	899b      	ldrh	r3, [r3, #12]
 8012c16:	b29b      	uxth	r3, r3
 8012c18:	4618      	mov	r0, r3
 8012c1a:	f7fa fbfb 	bl	800d414 <lwip_htons>
 8012c1e:	4603      	mov	r3, r0
 8012c20:	b2db      	uxtb	r3, r3
 8012c22:	f003 0303 	and.w	r3, r3, #3
 8012c26:	2b00      	cmp	r3, #0
 8012c28:	d00e      	beq.n	8012c48 <tcp_receive+0x8a0>
 8012c2a:	2301      	movs	r3, #1
 8012c2c:	e00d      	b.n	8012c4a <tcp_receive+0x8a2>
 8012c2e:	bf00      	nop
 8012c30:	20013d14 	.word	0x20013d14
 8012c34:	20013cf0 	.word	0x20013cf0
 8012c38:	20013d1e 	.word	0x20013d1e
 8012c3c:	0801ee64 	.word	0x0801ee64
 8012c40:	0801f20c 	.word	0x0801f20c
 8012c44:	0801eeb0 	.word	0x0801eeb0
 8012c48:	2300      	movs	r3, #0
 8012c4a:	4423      	add	r3, r4
 8012c4c:	b29a      	uxth	r2, r3
 8012c4e:	4b98      	ldr	r3, [pc, #608]	; (8012eb0 <tcp_receive+0xb08>)
 8012c50:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8012c52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012c54:	613b      	str	r3, [r7, #16]
              next = next->next;
 8012c56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012c58:	681b      	ldr	r3, [r3, #0]
 8012c5a:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8012c5c:	6938      	ldr	r0, [r7, #16]
 8012c5e:	f7fd fd22 	bl	80106a6 <tcp_seg_free>
            while (next &&
 8012c62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012c64:	2b00      	cmp	r3, #0
 8012c66:	d00e      	beq.n	8012c86 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8012c68:	4b91      	ldr	r3, [pc, #580]	; (8012eb0 <tcp_receive+0xb08>)
 8012c6a:	881b      	ldrh	r3, [r3, #0]
 8012c6c:	461a      	mov	r2, r3
 8012c6e:	4b91      	ldr	r3, [pc, #580]	; (8012eb4 <tcp_receive+0xb0c>)
 8012c70:	681b      	ldr	r3, [r3, #0]
 8012c72:	441a      	add	r2, r3
 8012c74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012c76:	691b      	ldr	r3, [r3, #16]
 8012c78:	685b      	ldr	r3, [r3, #4]
 8012c7a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012c7c:	8909      	ldrh	r1, [r1, #8]
 8012c7e:	440b      	add	r3, r1
 8012c80:	1ad3      	subs	r3, r2, r3
            while (next &&
 8012c82:	2b00      	cmp	r3, #0
 8012c84:	da9a      	bge.n	8012bbc <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8012c86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012c88:	2b00      	cmp	r3, #0
 8012c8a:	d059      	beq.n	8012d40 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 8012c8c:	4b88      	ldr	r3, [pc, #544]	; (8012eb0 <tcp_receive+0xb08>)
 8012c8e:	881b      	ldrh	r3, [r3, #0]
 8012c90:	461a      	mov	r2, r3
 8012c92:	4b88      	ldr	r3, [pc, #544]	; (8012eb4 <tcp_receive+0xb0c>)
 8012c94:	681b      	ldr	r3, [r3, #0]
 8012c96:	441a      	add	r2, r3
 8012c98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012c9a:	691b      	ldr	r3, [r3, #16]
 8012c9c:	685b      	ldr	r3, [r3, #4]
 8012c9e:	1ad3      	subs	r3, r2, r3
            if (next &&
 8012ca0:	2b00      	cmp	r3, #0
 8012ca2:	dd4d      	ble.n	8012d40 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8012ca4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012ca6:	691b      	ldr	r3, [r3, #16]
 8012ca8:	685b      	ldr	r3, [r3, #4]
 8012caa:	b29a      	uxth	r2, r3
 8012cac:	4b81      	ldr	r3, [pc, #516]	; (8012eb4 <tcp_receive+0xb0c>)
 8012cae:	681b      	ldr	r3, [r3, #0]
 8012cb0:	b29b      	uxth	r3, r3
 8012cb2:	1ad3      	subs	r3, r2, r3
 8012cb4:	b29a      	uxth	r2, r3
 8012cb6:	4b80      	ldr	r3, [pc, #512]	; (8012eb8 <tcp_receive+0xb10>)
 8012cb8:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8012cba:	4b7f      	ldr	r3, [pc, #508]	; (8012eb8 <tcp_receive+0xb10>)
 8012cbc:	691b      	ldr	r3, [r3, #16]
 8012cbe:	899b      	ldrh	r3, [r3, #12]
 8012cc0:	b29b      	uxth	r3, r3
 8012cc2:	4618      	mov	r0, r3
 8012cc4:	f7fa fba6 	bl	800d414 <lwip_htons>
 8012cc8:	4603      	mov	r3, r0
 8012cca:	b2db      	uxtb	r3, r3
 8012ccc:	f003 0302 	and.w	r3, r3, #2
 8012cd0:	2b00      	cmp	r3, #0
 8012cd2:	d005      	beq.n	8012ce0 <tcp_receive+0x938>
                inseg.len -= 1;
 8012cd4:	4b78      	ldr	r3, [pc, #480]	; (8012eb8 <tcp_receive+0xb10>)
 8012cd6:	891b      	ldrh	r3, [r3, #8]
 8012cd8:	3b01      	subs	r3, #1
 8012cda:	b29a      	uxth	r2, r3
 8012cdc:	4b76      	ldr	r3, [pc, #472]	; (8012eb8 <tcp_receive+0xb10>)
 8012cde:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8012ce0:	4b75      	ldr	r3, [pc, #468]	; (8012eb8 <tcp_receive+0xb10>)
 8012ce2:	685b      	ldr	r3, [r3, #4]
 8012ce4:	4a74      	ldr	r2, [pc, #464]	; (8012eb8 <tcp_receive+0xb10>)
 8012ce6:	8912      	ldrh	r2, [r2, #8]
 8012ce8:	4611      	mov	r1, r2
 8012cea:	4618      	mov	r0, r3
 8012cec:	f7fb ff2e 	bl	800eb4c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8012cf0:	4b71      	ldr	r3, [pc, #452]	; (8012eb8 <tcp_receive+0xb10>)
 8012cf2:	891c      	ldrh	r4, [r3, #8]
 8012cf4:	4b70      	ldr	r3, [pc, #448]	; (8012eb8 <tcp_receive+0xb10>)
 8012cf6:	691b      	ldr	r3, [r3, #16]
 8012cf8:	899b      	ldrh	r3, [r3, #12]
 8012cfa:	b29b      	uxth	r3, r3
 8012cfc:	4618      	mov	r0, r3
 8012cfe:	f7fa fb89 	bl	800d414 <lwip_htons>
 8012d02:	4603      	mov	r3, r0
 8012d04:	b2db      	uxtb	r3, r3
 8012d06:	f003 0303 	and.w	r3, r3, #3
 8012d0a:	2b00      	cmp	r3, #0
 8012d0c:	d001      	beq.n	8012d12 <tcp_receive+0x96a>
 8012d0e:	2301      	movs	r3, #1
 8012d10:	e000      	b.n	8012d14 <tcp_receive+0x96c>
 8012d12:	2300      	movs	r3, #0
 8012d14:	4423      	add	r3, r4
 8012d16:	b29a      	uxth	r2, r3
 8012d18:	4b65      	ldr	r3, [pc, #404]	; (8012eb0 <tcp_receive+0xb08>)
 8012d1a:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8012d1c:	4b64      	ldr	r3, [pc, #400]	; (8012eb0 <tcp_receive+0xb08>)
 8012d1e:	881b      	ldrh	r3, [r3, #0]
 8012d20:	461a      	mov	r2, r3
 8012d22:	4b64      	ldr	r3, [pc, #400]	; (8012eb4 <tcp_receive+0xb0c>)
 8012d24:	681b      	ldr	r3, [r3, #0]
 8012d26:	441a      	add	r2, r3
 8012d28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012d2a:	691b      	ldr	r3, [r3, #16]
 8012d2c:	685b      	ldr	r3, [r3, #4]
 8012d2e:	429a      	cmp	r2, r3
 8012d30:	d006      	beq.n	8012d40 <tcp_receive+0x998>
 8012d32:	4b62      	ldr	r3, [pc, #392]	; (8012ebc <tcp_receive+0xb14>)
 8012d34:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8012d38:	4961      	ldr	r1, [pc, #388]	; (8012ec0 <tcp_receive+0xb18>)
 8012d3a:	4862      	ldr	r0, [pc, #392]	; (8012ec4 <tcp_receive+0xb1c>)
 8012d3c:	f008 f848 	bl	801add0 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8012d40:	687b      	ldr	r3, [r7, #4]
 8012d42:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012d44:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8012d46:	4b5a      	ldr	r3, [pc, #360]	; (8012eb0 <tcp_receive+0xb08>)
 8012d48:	881b      	ldrh	r3, [r3, #0]
 8012d4a:	461a      	mov	r2, r3
 8012d4c:	4b59      	ldr	r3, [pc, #356]	; (8012eb4 <tcp_receive+0xb0c>)
 8012d4e:	681b      	ldr	r3, [r3, #0]
 8012d50:	441a      	add	r2, r3
 8012d52:	687b      	ldr	r3, [r7, #4]
 8012d54:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8012d56:	687b      	ldr	r3, [r7, #4]
 8012d58:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012d5a:	4b55      	ldr	r3, [pc, #340]	; (8012eb0 <tcp_receive+0xb08>)
 8012d5c:	881b      	ldrh	r3, [r3, #0]
 8012d5e:	429a      	cmp	r2, r3
 8012d60:	d206      	bcs.n	8012d70 <tcp_receive+0x9c8>
 8012d62:	4b56      	ldr	r3, [pc, #344]	; (8012ebc <tcp_receive+0xb14>)
 8012d64:	f240 6207 	movw	r2, #1543	; 0x607
 8012d68:	4957      	ldr	r1, [pc, #348]	; (8012ec8 <tcp_receive+0xb20>)
 8012d6a:	4856      	ldr	r0, [pc, #344]	; (8012ec4 <tcp_receive+0xb1c>)
 8012d6c:	f008 f830 	bl	801add0 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8012d70:	687b      	ldr	r3, [r7, #4]
 8012d72:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012d74:	4b4e      	ldr	r3, [pc, #312]	; (8012eb0 <tcp_receive+0xb08>)
 8012d76:	881b      	ldrh	r3, [r3, #0]
 8012d78:	1ad3      	subs	r3, r2, r3
 8012d7a:	b29a      	uxth	r2, r3
 8012d7c:	687b      	ldr	r3, [r7, #4]
 8012d7e:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8012d80:	6878      	ldr	r0, [r7, #4]
 8012d82:	f7fc ffad 	bl	800fce0 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8012d86:	4b4c      	ldr	r3, [pc, #304]	; (8012eb8 <tcp_receive+0xb10>)
 8012d88:	685b      	ldr	r3, [r3, #4]
 8012d8a:	891b      	ldrh	r3, [r3, #8]
 8012d8c:	2b00      	cmp	r3, #0
 8012d8e:	d006      	beq.n	8012d9e <tcp_receive+0x9f6>
          recv_data = inseg.p;
 8012d90:	4b49      	ldr	r3, [pc, #292]	; (8012eb8 <tcp_receive+0xb10>)
 8012d92:	685b      	ldr	r3, [r3, #4]
 8012d94:	4a4d      	ldr	r2, [pc, #308]	; (8012ecc <tcp_receive+0xb24>)
 8012d96:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8012d98:	4b47      	ldr	r3, [pc, #284]	; (8012eb8 <tcp_receive+0xb10>)
 8012d9a:	2200      	movs	r2, #0
 8012d9c:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8012d9e:	4b46      	ldr	r3, [pc, #280]	; (8012eb8 <tcp_receive+0xb10>)
 8012da0:	691b      	ldr	r3, [r3, #16]
 8012da2:	899b      	ldrh	r3, [r3, #12]
 8012da4:	b29b      	uxth	r3, r3
 8012da6:	4618      	mov	r0, r3
 8012da8:	f7fa fb34 	bl	800d414 <lwip_htons>
 8012dac:	4603      	mov	r3, r0
 8012dae:	b2db      	uxtb	r3, r3
 8012db0:	f003 0301 	and.w	r3, r3, #1
 8012db4:	2b00      	cmp	r3, #0
 8012db6:	f000 80b8 	beq.w	8012f2a <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8012dba:	4b45      	ldr	r3, [pc, #276]	; (8012ed0 <tcp_receive+0xb28>)
 8012dbc:	781b      	ldrb	r3, [r3, #0]
 8012dbe:	f043 0320 	orr.w	r3, r3, #32
 8012dc2:	b2da      	uxtb	r2, r3
 8012dc4:	4b42      	ldr	r3, [pc, #264]	; (8012ed0 <tcp_receive+0xb28>)
 8012dc6:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8012dc8:	e0af      	b.n	8012f2a <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8012dca:	687b      	ldr	r3, [r7, #4]
 8012dcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012dce:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8012dd0:	687b      	ldr	r3, [r7, #4]
 8012dd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012dd4:	691b      	ldr	r3, [r3, #16]
 8012dd6:	685b      	ldr	r3, [r3, #4]
 8012dd8:	4a36      	ldr	r2, [pc, #216]	; (8012eb4 <tcp_receive+0xb0c>)
 8012dda:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8012ddc:	68bb      	ldr	r3, [r7, #8]
 8012dde:	891b      	ldrh	r3, [r3, #8]
 8012de0:	461c      	mov	r4, r3
 8012de2:	68bb      	ldr	r3, [r7, #8]
 8012de4:	691b      	ldr	r3, [r3, #16]
 8012de6:	899b      	ldrh	r3, [r3, #12]
 8012de8:	b29b      	uxth	r3, r3
 8012dea:	4618      	mov	r0, r3
 8012dec:	f7fa fb12 	bl	800d414 <lwip_htons>
 8012df0:	4603      	mov	r3, r0
 8012df2:	b2db      	uxtb	r3, r3
 8012df4:	f003 0303 	and.w	r3, r3, #3
 8012df8:	2b00      	cmp	r3, #0
 8012dfa:	d001      	beq.n	8012e00 <tcp_receive+0xa58>
 8012dfc:	2301      	movs	r3, #1
 8012dfe:	e000      	b.n	8012e02 <tcp_receive+0xa5a>
 8012e00:	2300      	movs	r3, #0
 8012e02:	191a      	adds	r2, r3, r4
 8012e04:	687b      	ldr	r3, [r7, #4]
 8012e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012e08:	441a      	add	r2, r3
 8012e0a:	687b      	ldr	r3, [r7, #4]
 8012e0c:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8012e0e:	687b      	ldr	r3, [r7, #4]
 8012e10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012e12:	461c      	mov	r4, r3
 8012e14:	68bb      	ldr	r3, [r7, #8]
 8012e16:	891b      	ldrh	r3, [r3, #8]
 8012e18:	461d      	mov	r5, r3
 8012e1a:	68bb      	ldr	r3, [r7, #8]
 8012e1c:	691b      	ldr	r3, [r3, #16]
 8012e1e:	899b      	ldrh	r3, [r3, #12]
 8012e20:	b29b      	uxth	r3, r3
 8012e22:	4618      	mov	r0, r3
 8012e24:	f7fa faf6 	bl	800d414 <lwip_htons>
 8012e28:	4603      	mov	r3, r0
 8012e2a:	b2db      	uxtb	r3, r3
 8012e2c:	f003 0303 	and.w	r3, r3, #3
 8012e30:	2b00      	cmp	r3, #0
 8012e32:	d001      	beq.n	8012e38 <tcp_receive+0xa90>
 8012e34:	2301      	movs	r3, #1
 8012e36:	e000      	b.n	8012e3a <tcp_receive+0xa92>
 8012e38:	2300      	movs	r3, #0
 8012e3a:	442b      	add	r3, r5
 8012e3c:	429c      	cmp	r4, r3
 8012e3e:	d206      	bcs.n	8012e4e <tcp_receive+0xaa6>
 8012e40:	4b1e      	ldr	r3, [pc, #120]	; (8012ebc <tcp_receive+0xb14>)
 8012e42:	f240 622b 	movw	r2, #1579	; 0x62b
 8012e46:	4923      	ldr	r1, [pc, #140]	; (8012ed4 <tcp_receive+0xb2c>)
 8012e48:	481e      	ldr	r0, [pc, #120]	; (8012ec4 <tcp_receive+0xb1c>)
 8012e4a:	f007 ffc1 	bl	801add0 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8012e4e:	68bb      	ldr	r3, [r7, #8]
 8012e50:	891b      	ldrh	r3, [r3, #8]
 8012e52:	461c      	mov	r4, r3
 8012e54:	68bb      	ldr	r3, [r7, #8]
 8012e56:	691b      	ldr	r3, [r3, #16]
 8012e58:	899b      	ldrh	r3, [r3, #12]
 8012e5a:	b29b      	uxth	r3, r3
 8012e5c:	4618      	mov	r0, r3
 8012e5e:	f7fa fad9 	bl	800d414 <lwip_htons>
 8012e62:	4603      	mov	r3, r0
 8012e64:	b2db      	uxtb	r3, r3
 8012e66:	f003 0303 	and.w	r3, r3, #3
 8012e6a:	2b00      	cmp	r3, #0
 8012e6c:	d001      	beq.n	8012e72 <tcp_receive+0xaca>
 8012e6e:	2301      	movs	r3, #1
 8012e70:	e000      	b.n	8012e74 <tcp_receive+0xacc>
 8012e72:	2300      	movs	r3, #0
 8012e74:	1919      	adds	r1, r3, r4
 8012e76:	687b      	ldr	r3, [r7, #4]
 8012e78:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012e7a:	b28b      	uxth	r3, r1
 8012e7c:	1ad3      	subs	r3, r2, r3
 8012e7e:	b29a      	uxth	r2, r3
 8012e80:	687b      	ldr	r3, [r7, #4]
 8012e82:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8012e84:	6878      	ldr	r0, [r7, #4]
 8012e86:	f7fc ff2b 	bl	800fce0 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8012e8a:	68bb      	ldr	r3, [r7, #8]
 8012e8c:	685b      	ldr	r3, [r3, #4]
 8012e8e:	891b      	ldrh	r3, [r3, #8]
 8012e90:	2b00      	cmp	r3, #0
 8012e92:	d028      	beq.n	8012ee6 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8012e94:	4b0d      	ldr	r3, [pc, #52]	; (8012ecc <tcp_receive+0xb24>)
 8012e96:	681b      	ldr	r3, [r3, #0]
 8012e98:	2b00      	cmp	r3, #0
 8012e9a:	d01d      	beq.n	8012ed8 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 8012e9c:	4b0b      	ldr	r3, [pc, #44]	; (8012ecc <tcp_receive+0xb24>)
 8012e9e:	681a      	ldr	r2, [r3, #0]
 8012ea0:	68bb      	ldr	r3, [r7, #8]
 8012ea2:	685b      	ldr	r3, [r3, #4]
 8012ea4:	4619      	mov	r1, r3
 8012ea6:	4610      	mov	r0, r2
 8012ea8:	f7fc f8a4 	bl	800eff4 <pbuf_cat>
 8012eac:	e018      	b.n	8012ee0 <tcp_receive+0xb38>
 8012eae:	bf00      	nop
 8012eb0:	20013d1e 	.word	0x20013d1e
 8012eb4:	20013d14 	.word	0x20013d14
 8012eb8:	20013cf0 	.word	0x20013cf0
 8012ebc:	0801ee64 	.word	0x0801ee64
 8012ec0:	0801f244 	.word	0x0801f244
 8012ec4:	0801eeb0 	.word	0x0801eeb0
 8012ec8:	0801f280 	.word	0x0801f280
 8012ecc:	20013d24 	.word	0x20013d24
 8012ed0:	20013d21 	.word	0x20013d21
 8012ed4:	0801f2a0 	.word	0x0801f2a0
            } else {
              recv_data = cseg->p;
 8012ed8:	68bb      	ldr	r3, [r7, #8]
 8012eda:	685b      	ldr	r3, [r3, #4]
 8012edc:	4a70      	ldr	r2, [pc, #448]	; (80130a0 <tcp_receive+0xcf8>)
 8012ede:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8012ee0:	68bb      	ldr	r3, [r7, #8]
 8012ee2:	2200      	movs	r2, #0
 8012ee4:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8012ee6:	68bb      	ldr	r3, [r7, #8]
 8012ee8:	691b      	ldr	r3, [r3, #16]
 8012eea:	899b      	ldrh	r3, [r3, #12]
 8012eec:	b29b      	uxth	r3, r3
 8012eee:	4618      	mov	r0, r3
 8012ef0:	f7fa fa90 	bl	800d414 <lwip_htons>
 8012ef4:	4603      	mov	r3, r0
 8012ef6:	b2db      	uxtb	r3, r3
 8012ef8:	f003 0301 	and.w	r3, r3, #1
 8012efc:	2b00      	cmp	r3, #0
 8012efe:	d00d      	beq.n	8012f1c <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8012f00:	4b68      	ldr	r3, [pc, #416]	; (80130a4 <tcp_receive+0xcfc>)
 8012f02:	781b      	ldrb	r3, [r3, #0]
 8012f04:	f043 0320 	orr.w	r3, r3, #32
 8012f08:	b2da      	uxtb	r2, r3
 8012f0a:	4b66      	ldr	r3, [pc, #408]	; (80130a4 <tcp_receive+0xcfc>)
 8012f0c:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8012f0e:	687b      	ldr	r3, [r7, #4]
 8012f10:	7d1b      	ldrb	r3, [r3, #20]
 8012f12:	2b04      	cmp	r3, #4
 8012f14:	d102      	bne.n	8012f1c <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 8012f16:	687b      	ldr	r3, [r7, #4]
 8012f18:	2207      	movs	r2, #7
 8012f1a:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8012f1c:	68bb      	ldr	r3, [r7, #8]
 8012f1e:	681a      	ldr	r2, [r3, #0]
 8012f20:	687b      	ldr	r3, [r7, #4]
 8012f22:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8012f24:	68b8      	ldr	r0, [r7, #8]
 8012f26:	f7fd fbbe 	bl	80106a6 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8012f2a:	687b      	ldr	r3, [r7, #4]
 8012f2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012f2e:	2b00      	cmp	r3, #0
 8012f30:	d008      	beq.n	8012f44 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8012f32:	687b      	ldr	r3, [r7, #4]
 8012f34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012f36:	691b      	ldr	r3, [r3, #16]
 8012f38:	685a      	ldr	r2, [r3, #4]
 8012f3a:	687b      	ldr	r3, [r7, #4]
 8012f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8012f3e:	429a      	cmp	r2, r3
 8012f40:	f43f af43 	beq.w	8012dca <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8012f44:	687b      	ldr	r3, [r7, #4]
 8012f46:	8b5b      	ldrh	r3, [r3, #26]
 8012f48:	f003 0301 	and.w	r3, r3, #1
 8012f4c:	2b00      	cmp	r3, #0
 8012f4e:	d00e      	beq.n	8012f6e <tcp_receive+0xbc6>
 8012f50:	687b      	ldr	r3, [r7, #4]
 8012f52:	8b5b      	ldrh	r3, [r3, #26]
 8012f54:	f023 0301 	bic.w	r3, r3, #1
 8012f58:	b29a      	uxth	r2, r3
 8012f5a:	687b      	ldr	r3, [r7, #4]
 8012f5c:	835a      	strh	r2, [r3, #26]
 8012f5e:	687b      	ldr	r3, [r7, #4]
 8012f60:	8b5b      	ldrh	r3, [r3, #26]
 8012f62:	f043 0302 	orr.w	r3, r3, #2
 8012f66:	b29a      	uxth	r2, r3
 8012f68:	687b      	ldr	r3, [r7, #4]
 8012f6a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8012f6c:	e188      	b.n	8013280 <tcp_receive+0xed8>
        tcp_ack(pcb);
 8012f6e:	687b      	ldr	r3, [r7, #4]
 8012f70:	8b5b      	ldrh	r3, [r3, #26]
 8012f72:	f043 0301 	orr.w	r3, r3, #1
 8012f76:	b29a      	uxth	r2, r3
 8012f78:	687b      	ldr	r3, [r7, #4]
 8012f7a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8012f7c:	e180      	b.n	8013280 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8012f7e:	687b      	ldr	r3, [r7, #4]
 8012f80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012f82:	2b00      	cmp	r3, #0
 8012f84:	d106      	bne.n	8012f94 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8012f86:	4848      	ldr	r0, [pc, #288]	; (80130a8 <tcp_receive+0xd00>)
 8012f88:	f7fd fba6 	bl	80106d8 <tcp_seg_copy>
 8012f8c:	4602      	mov	r2, r0
 8012f8e:	687b      	ldr	r3, [r7, #4]
 8012f90:	675a      	str	r2, [r3, #116]	; 0x74
 8012f92:	e16d      	b.n	8013270 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8012f94:	2300      	movs	r3, #0
 8012f96:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8012f98:	687b      	ldr	r3, [r7, #4]
 8012f9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012f9c:	63bb      	str	r3, [r7, #56]	; 0x38
 8012f9e:	e157      	b.n	8013250 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 8012fa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012fa2:	691b      	ldr	r3, [r3, #16]
 8012fa4:	685a      	ldr	r2, [r3, #4]
 8012fa6:	4b41      	ldr	r3, [pc, #260]	; (80130ac <tcp_receive+0xd04>)
 8012fa8:	681b      	ldr	r3, [r3, #0]
 8012faa:	429a      	cmp	r2, r3
 8012fac:	d11d      	bne.n	8012fea <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8012fae:	4b3e      	ldr	r3, [pc, #248]	; (80130a8 <tcp_receive+0xd00>)
 8012fb0:	891a      	ldrh	r2, [r3, #8]
 8012fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012fb4:	891b      	ldrh	r3, [r3, #8]
 8012fb6:	429a      	cmp	r2, r3
 8012fb8:	f240 814f 	bls.w	801325a <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8012fbc:	483a      	ldr	r0, [pc, #232]	; (80130a8 <tcp_receive+0xd00>)
 8012fbe:	f7fd fb8b 	bl	80106d8 <tcp_seg_copy>
 8012fc2:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8012fc4:	697b      	ldr	r3, [r7, #20]
 8012fc6:	2b00      	cmp	r3, #0
 8012fc8:	f000 8149 	beq.w	801325e <tcp_receive+0xeb6>
                  if (prev != NULL) {
 8012fcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012fce:	2b00      	cmp	r3, #0
 8012fd0:	d003      	beq.n	8012fda <tcp_receive+0xc32>
                    prev->next = cseg;
 8012fd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012fd4:	697a      	ldr	r2, [r7, #20]
 8012fd6:	601a      	str	r2, [r3, #0]
 8012fd8:	e002      	b.n	8012fe0 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 8012fda:	687b      	ldr	r3, [r7, #4]
 8012fdc:	697a      	ldr	r2, [r7, #20]
 8012fde:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8012fe0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012fe2:	6978      	ldr	r0, [r7, #20]
 8012fe4:	f7ff f8dc 	bl	80121a0 <tcp_oos_insert_segment>
                }
                break;
 8012fe8:	e139      	b.n	801325e <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8012fea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012fec:	2b00      	cmp	r3, #0
 8012fee:	d117      	bne.n	8013020 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8012ff0:	4b2e      	ldr	r3, [pc, #184]	; (80130ac <tcp_receive+0xd04>)
 8012ff2:	681a      	ldr	r2, [r3, #0]
 8012ff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ff6:	691b      	ldr	r3, [r3, #16]
 8012ff8:	685b      	ldr	r3, [r3, #4]
 8012ffa:	1ad3      	subs	r3, r2, r3
 8012ffc:	2b00      	cmp	r3, #0
 8012ffe:	da57      	bge.n	80130b0 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8013000:	4829      	ldr	r0, [pc, #164]	; (80130a8 <tcp_receive+0xd00>)
 8013002:	f7fd fb69 	bl	80106d8 <tcp_seg_copy>
 8013006:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8013008:	69bb      	ldr	r3, [r7, #24]
 801300a:	2b00      	cmp	r3, #0
 801300c:	f000 8129 	beq.w	8013262 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 8013010:	687b      	ldr	r3, [r7, #4]
 8013012:	69ba      	ldr	r2, [r7, #24]
 8013014:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8013016:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013018:	69b8      	ldr	r0, [r7, #24]
 801301a:	f7ff f8c1 	bl	80121a0 <tcp_oos_insert_segment>
                  }
                  break;
 801301e:	e120      	b.n	8013262 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8013020:	4b22      	ldr	r3, [pc, #136]	; (80130ac <tcp_receive+0xd04>)
 8013022:	681a      	ldr	r2, [r3, #0]
 8013024:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013026:	691b      	ldr	r3, [r3, #16]
 8013028:	685b      	ldr	r3, [r3, #4]
 801302a:	1ad3      	subs	r3, r2, r3
 801302c:	3b01      	subs	r3, #1
 801302e:	2b00      	cmp	r3, #0
 8013030:	db3e      	blt.n	80130b0 <tcp_receive+0xd08>
 8013032:	4b1e      	ldr	r3, [pc, #120]	; (80130ac <tcp_receive+0xd04>)
 8013034:	681a      	ldr	r2, [r3, #0]
 8013036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013038:	691b      	ldr	r3, [r3, #16]
 801303a:	685b      	ldr	r3, [r3, #4]
 801303c:	1ad3      	subs	r3, r2, r3
 801303e:	3301      	adds	r3, #1
 8013040:	2b00      	cmp	r3, #0
 8013042:	dc35      	bgt.n	80130b0 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8013044:	4818      	ldr	r0, [pc, #96]	; (80130a8 <tcp_receive+0xd00>)
 8013046:	f7fd fb47 	bl	80106d8 <tcp_seg_copy>
 801304a:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 801304c:	69fb      	ldr	r3, [r7, #28]
 801304e:	2b00      	cmp	r3, #0
 8013050:	f000 8109 	beq.w	8013266 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8013054:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013056:	691b      	ldr	r3, [r3, #16]
 8013058:	685b      	ldr	r3, [r3, #4]
 801305a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801305c:	8912      	ldrh	r2, [r2, #8]
 801305e:	441a      	add	r2, r3
 8013060:	4b12      	ldr	r3, [pc, #72]	; (80130ac <tcp_receive+0xd04>)
 8013062:	681b      	ldr	r3, [r3, #0]
 8013064:	1ad3      	subs	r3, r2, r3
 8013066:	2b00      	cmp	r3, #0
 8013068:	dd12      	ble.n	8013090 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801306a:	4b10      	ldr	r3, [pc, #64]	; (80130ac <tcp_receive+0xd04>)
 801306c:	681b      	ldr	r3, [r3, #0]
 801306e:	b29a      	uxth	r2, r3
 8013070:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013072:	691b      	ldr	r3, [r3, #16]
 8013074:	685b      	ldr	r3, [r3, #4]
 8013076:	b29b      	uxth	r3, r3
 8013078:	1ad3      	subs	r3, r2, r3
 801307a:	b29a      	uxth	r2, r3
 801307c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801307e:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8013080:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013082:	685a      	ldr	r2, [r3, #4]
 8013084:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013086:	891b      	ldrh	r3, [r3, #8]
 8013088:	4619      	mov	r1, r3
 801308a:	4610      	mov	r0, r2
 801308c:	f7fb fd5e 	bl	800eb4c <pbuf_realloc>
                    }
                    prev->next = cseg;
 8013090:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013092:	69fa      	ldr	r2, [r7, #28]
 8013094:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8013096:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013098:	69f8      	ldr	r0, [r7, #28]
 801309a:	f7ff f881 	bl	80121a0 <tcp_oos_insert_segment>
                  }
                  break;
 801309e:	e0e2      	b.n	8013266 <tcp_receive+0xebe>
 80130a0:	20013d24 	.word	0x20013d24
 80130a4:	20013d21 	.word	0x20013d21
 80130a8:	20013cf0 	.word	0x20013cf0
 80130ac:	20013d14 	.word	0x20013d14
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 80130b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130b2:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 80130b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130b6:	681b      	ldr	r3, [r3, #0]
 80130b8:	2b00      	cmp	r3, #0
 80130ba:	f040 80c6 	bne.w	801324a <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 80130be:	4b80      	ldr	r3, [pc, #512]	; (80132c0 <tcp_receive+0xf18>)
 80130c0:	681a      	ldr	r2, [r3, #0]
 80130c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130c4:	691b      	ldr	r3, [r3, #16]
 80130c6:	685b      	ldr	r3, [r3, #4]
 80130c8:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 80130ca:	2b00      	cmp	r3, #0
 80130cc:	f340 80bd 	ble.w	801324a <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80130d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130d2:	691b      	ldr	r3, [r3, #16]
 80130d4:	899b      	ldrh	r3, [r3, #12]
 80130d6:	b29b      	uxth	r3, r3
 80130d8:	4618      	mov	r0, r3
 80130da:	f7fa f99b 	bl	800d414 <lwip_htons>
 80130de:	4603      	mov	r3, r0
 80130e0:	b2db      	uxtb	r3, r3
 80130e2:	f003 0301 	and.w	r3, r3, #1
 80130e6:	2b00      	cmp	r3, #0
 80130e8:	f040 80bf 	bne.w	801326a <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 80130ec:	4875      	ldr	r0, [pc, #468]	; (80132c4 <tcp_receive+0xf1c>)
 80130ee:	f7fd faf3 	bl	80106d8 <tcp_seg_copy>
 80130f2:	4602      	mov	r2, r0
 80130f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130f6:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80130f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130fa:	681b      	ldr	r3, [r3, #0]
 80130fc:	2b00      	cmp	r3, #0
 80130fe:	f000 80b6 	beq.w	801326e <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8013102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013104:	691b      	ldr	r3, [r3, #16]
 8013106:	685b      	ldr	r3, [r3, #4]
 8013108:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801310a:	8912      	ldrh	r2, [r2, #8]
 801310c:	441a      	add	r2, r3
 801310e:	4b6c      	ldr	r3, [pc, #432]	; (80132c0 <tcp_receive+0xf18>)
 8013110:	681b      	ldr	r3, [r3, #0]
 8013112:	1ad3      	subs	r3, r2, r3
 8013114:	2b00      	cmp	r3, #0
 8013116:	dd12      	ble.n	801313e <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8013118:	4b69      	ldr	r3, [pc, #420]	; (80132c0 <tcp_receive+0xf18>)
 801311a:	681b      	ldr	r3, [r3, #0]
 801311c:	b29a      	uxth	r2, r3
 801311e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013120:	691b      	ldr	r3, [r3, #16]
 8013122:	685b      	ldr	r3, [r3, #4]
 8013124:	b29b      	uxth	r3, r3
 8013126:	1ad3      	subs	r3, r2, r3
 8013128:	b29a      	uxth	r2, r3
 801312a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801312c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 801312e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013130:	685a      	ldr	r2, [r3, #4]
 8013132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013134:	891b      	ldrh	r3, [r3, #8]
 8013136:	4619      	mov	r1, r3
 8013138:	4610      	mov	r0, r2
 801313a:	f7fb fd07 	bl	800eb4c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801313e:	4b62      	ldr	r3, [pc, #392]	; (80132c8 <tcp_receive+0xf20>)
 8013140:	881b      	ldrh	r3, [r3, #0]
 8013142:	461a      	mov	r2, r3
 8013144:	4b5e      	ldr	r3, [pc, #376]	; (80132c0 <tcp_receive+0xf18>)
 8013146:	681b      	ldr	r3, [r3, #0]
 8013148:	441a      	add	r2, r3
 801314a:	687b      	ldr	r3, [r7, #4]
 801314c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801314e:	6879      	ldr	r1, [r7, #4]
 8013150:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8013152:	440b      	add	r3, r1
 8013154:	1ad3      	subs	r3, r2, r3
 8013156:	2b00      	cmp	r3, #0
 8013158:	f340 8089 	ble.w	801326e <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 801315c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801315e:	681b      	ldr	r3, [r3, #0]
 8013160:	691b      	ldr	r3, [r3, #16]
 8013162:	899b      	ldrh	r3, [r3, #12]
 8013164:	b29b      	uxth	r3, r3
 8013166:	4618      	mov	r0, r3
 8013168:	f7fa f954 	bl	800d414 <lwip_htons>
 801316c:	4603      	mov	r3, r0
 801316e:	b2db      	uxtb	r3, r3
 8013170:	f003 0301 	and.w	r3, r3, #1
 8013174:	2b00      	cmp	r3, #0
 8013176:	d022      	beq.n	80131be <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8013178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801317a:	681b      	ldr	r3, [r3, #0]
 801317c:	691b      	ldr	r3, [r3, #16]
 801317e:	899b      	ldrh	r3, [r3, #12]
 8013180:	b29b      	uxth	r3, r3
 8013182:	b21b      	sxth	r3, r3
 8013184:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8013188:	b21c      	sxth	r4, r3
 801318a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801318c:	681b      	ldr	r3, [r3, #0]
 801318e:	691b      	ldr	r3, [r3, #16]
 8013190:	899b      	ldrh	r3, [r3, #12]
 8013192:	b29b      	uxth	r3, r3
 8013194:	4618      	mov	r0, r3
 8013196:	f7fa f93d 	bl	800d414 <lwip_htons>
 801319a:	4603      	mov	r3, r0
 801319c:	b2db      	uxtb	r3, r3
 801319e:	b29b      	uxth	r3, r3
 80131a0:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80131a4:	b29b      	uxth	r3, r3
 80131a6:	4618      	mov	r0, r3
 80131a8:	f7fa f934 	bl	800d414 <lwip_htons>
 80131ac:	4603      	mov	r3, r0
 80131ae:	b21b      	sxth	r3, r3
 80131b0:	4323      	orrs	r3, r4
 80131b2:	b21a      	sxth	r2, r3
 80131b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131b6:	681b      	ldr	r3, [r3, #0]
 80131b8:	691b      	ldr	r3, [r3, #16]
 80131ba:	b292      	uxth	r2, r2
 80131bc:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 80131be:	687b      	ldr	r3, [r7, #4]
 80131c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80131c2:	b29a      	uxth	r2, r3
 80131c4:	687b      	ldr	r3, [r7, #4]
 80131c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80131c8:	4413      	add	r3, r2
 80131ca:	b299      	uxth	r1, r3
 80131cc:	4b3c      	ldr	r3, [pc, #240]	; (80132c0 <tcp_receive+0xf18>)
 80131ce:	681b      	ldr	r3, [r3, #0]
 80131d0:	b29a      	uxth	r2, r3
 80131d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131d4:	681b      	ldr	r3, [r3, #0]
 80131d6:	1a8a      	subs	r2, r1, r2
 80131d8:	b292      	uxth	r2, r2
 80131da:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80131dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131de:	681b      	ldr	r3, [r3, #0]
 80131e0:	685a      	ldr	r2, [r3, #4]
 80131e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131e4:	681b      	ldr	r3, [r3, #0]
 80131e6:	891b      	ldrh	r3, [r3, #8]
 80131e8:	4619      	mov	r1, r3
 80131ea:	4610      	mov	r0, r2
 80131ec:	f7fb fcae 	bl	800eb4c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80131f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131f2:	681b      	ldr	r3, [r3, #0]
 80131f4:	891c      	ldrh	r4, [r3, #8]
 80131f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131f8:	681b      	ldr	r3, [r3, #0]
 80131fa:	691b      	ldr	r3, [r3, #16]
 80131fc:	899b      	ldrh	r3, [r3, #12]
 80131fe:	b29b      	uxth	r3, r3
 8013200:	4618      	mov	r0, r3
 8013202:	f7fa f907 	bl	800d414 <lwip_htons>
 8013206:	4603      	mov	r3, r0
 8013208:	b2db      	uxtb	r3, r3
 801320a:	f003 0303 	and.w	r3, r3, #3
 801320e:	2b00      	cmp	r3, #0
 8013210:	d001      	beq.n	8013216 <tcp_receive+0xe6e>
 8013212:	2301      	movs	r3, #1
 8013214:	e000      	b.n	8013218 <tcp_receive+0xe70>
 8013216:	2300      	movs	r3, #0
 8013218:	4423      	add	r3, r4
 801321a:	b29a      	uxth	r2, r3
 801321c:	4b2a      	ldr	r3, [pc, #168]	; (80132c8 <tcp_receive+0xf20>)
 801321e:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8013220:	4b29      	ldr	r3, [pc, #164]	; (80132c8 <tcp_receive+0xf20>)
 8013222:	881b      	ldrh	r3, [r3, #0]
 8013224:	461a      	mov	r2, r3
 8013226:	4b26      	ldr	r3, [pc, #152]	; (80132c0 <tcp_receive+0xf18>)
 8013228:	681b      	ldr	r3, [r3, #0]
 801322a:	441a      	add	r2, r3
 801322c:	687b      	ldr	r3, [r7, #4]
 801322e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013230:	6879      	ldr	r1, [r7, #4]
 8013232:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8013234:	440b      	add	r3, r1
 8013236:	429a      	cmp	r2, r3
 8013238:	d019      	beq.n	801326e <tcp_receive+0xec6>
 801323a:	4b24      	ldr	r3, [pc, #144]	; (80132cc <tcp_receive+0xf24>)
 801323c:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8013240:	4923      	ldr	r1, [pc, #140]	; (80132d0 <tcp_receive+0xf28>)
 8013242:	4824      	ldr	r0, [pc, #144]	; (80132d4 <tcp_receive+0xf2c>)
 8013244:	f007 fdc4 	bl	801add0 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8013248:	e011      	b.n	801326e <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801324a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801324c:	681b      	ldr	r3, [r3, #0]
 801324e:	63bb      	str	r3, [r7, #56]	; 0x38
 8013250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013252:	2b00      	cmp	r3, #0
 8013254:	f47f aea4 	bne.w	8012fa0 <tcp_receive+0xbf8>
 8013258:	e00a      	b.n	8013270 <tcp_receive+0xec8>
                break;
 801325a:	bf00      	nop
 801325c:	e008      	b.n	8013270 <tcp_receive+0xec8>
                break;
 801325e:	bf00      	nop
 8013260:	e006      	b.n	8013270 <tcp_receive+0xec8>
                  break;
 8013262:	bf00      	nop
 8013264:	e004      	b.n	8013270 <tcp_receive+0xec8>
                  break;
 8013266:	bf00      	nop
 8013268:	e002      	b.n	8013270 <tcp_receive+0xec8>
                  break;
 801326a:	bf00      	nop
 801326c:	e000      	b.n	8013270 <tcp_receive+0xec8>
                break;
 801326e:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8013270:	6878      	ldr	r0, [r7, #4]
 8013272:	f001 fa67 	bl	8014744 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8013276:	e003      	b.n	8013280 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8013278:	6878      	ldr	r0, [r7, #4]
 801327a:	f001 fa63 	bl	8014744 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801327e:	e01a      	b.n	80132b6 <tcp_receive+0xf0e>
 8013280:	e019      	b.n	80132b6 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8013282:	4b0f      	ldr	r3, [pc, #60]	; (80132c0 <tcp_receive+0xf18>)
 8013284:	681a      	ldr	r2, [r3, #0]
 8013286:	687b      	ldr	r3, [r7, #4]
 8013288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801328a:	1ad3      	subs	r3, r2, r3
 801328c:	2b00      	cmp	r3, #0
 801328e:	db0a      	blt.n	80132a6 <tcp_receive+0xefe>
 8013290:	4b0b      	ldr	r3, [pc, #44]	; (80132c0 <tcp_receive+0xf18>)
 8013292:	681a      	ldr	r2, [r3, #0]
 8013294:	687b      	ldr	r3, [r7, #4]
 8013296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013298:	6879      	ldr	r1, [r7, #4]
 801329a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801329c:	440b      	add	r3, r1
 801329e:	1ad3      	subs	r3, r2, r3
 80132a0:	3301      	adds	r3, #1
 80132a2:	2b00      	cmp	r3, #0
 80132a4:	dd07      	ble.n	80132b6 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 80132a6:	687b      	ldr	r3, [r7, #4]
 80132a8:	8b5b      	ldrh	r3, [r3, #26]
 80132aa:	f043 0302 	orr.w	r3, r3, #2
 80132ae:	b29a      	uxth	r2, r3
 80132b0:	687b      	ldr	r3, [r7, #4]
 80132b2:	835a      	strh	r2, [r3, #26]
    }
  }
}
 80132b4:	e7ff      	b.n	80132b6 <tcp_receive+0xf0e>
 80132b6:	bf00      	nop
 80132b8:	3750      	adds	r7, #80	; 0x50
 80132ba:	46bd      	mov	sp, r7
 80132bc:	bdb0      	pop	{r4, r5, r7, pc}
 80132be:	bf00      	nop
 80132c0:	20013d14 	.word	0x20013d14
 80132c4:	20013cf0 	.word	0x20013cf0
 80132c8:	20013d1e 	.word	0x20013d1e
 80132cc:	0801ee64 	.word	0x0801ee64
 80132d0:	0801f20c 	.word	0x0801f20c
 80132d4:	0801eeb0 	.word	0x0801eeb0

080132d8 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 80132d8:	b480      	push	{r7}
 80132da:	b083      	sub	sp, #12
 80132dc:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 80132de:	4b15      	ldr	r3, [pc, #84]	; (8013334 <tcp_get_next_optbyte+0x5c>)
 80132e0:	881b      	ldrh	r3, [r3, #0]
 80132e2:	1c5a      	adds	r2, r3, #1
 80132e4:	b291      	uxth	r1, r2
 80132e6:	4a13      	ldr	r2, [pc, #76]	; (8013334 <tcp_get_next_optbyte+0x5c>)
 80132e8:	8011      	strh	r1, [r2, #0]
 80132ea:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 80132ec:	4b12      	ldr	r3, [pc, #72]	; (8013338 <tcp_get_next_optbyte+0x60>)
 80132ee:	681b      	ldr	r3, [r3, #0]
 80132f0:	2b00      	cmp	r3, #0
 80132f2:	d004      	beq.n	80132fe <tcp_get_next_optbyte+0x26>
 80132f4:	4b11      	ldr	r3, [pc, #68]	; (801333c <tcp_get_next_optbyte+0x64>)
 80132f6:	881b      	ldrh	r3, [r3, #0]
 80132f8:	88fa      	ldrh	r2, [r7, #6]
 80132fa:	429a      	cmp	r2, r3
 80132fc:	d208      	bcs.n	8013310 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 80132fe:	4b10      	ldr	r3, [pc, #64]	; (8013340 <tcp_get_next_optbyte+0x68>)
 8013300:	681b      	ldr	r3, [r3, #0]
 8013302:	3314      	adds	r3, #20
 8013304:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8013306:	88fb      	ldrh	r3, [r7, #6]
 8013308:	683a      	ldr	r2, [r7, #0]
 801330a:	4413      	add	r3, r2
 801330c:	781b      	ldrb	r3, [r3, #0]
 801330e:	e00b      	b.n	8013328 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8013310:	88fb      	ldrh	r3, [r7, #6]
 8013312:	b2da      	uxtb	r2, r3
 8013314:	4b09      	ldr	r3, [pc, #36]	; (801333c <tcp_get_next_optbyte+0x64>)
 8013316:	881b      	ldrh	r3, [r3, #0]
 8013318:	b2db      	uxtb	r3, r3
 801331a:	1ad3      	subs	r3, r2, r3
 801331c:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 801331e:	4b06      	ldr	r3, [pc, #24]	; (8013338 <tcp_get_next_optbyte+0x60>)
 8013320:	681a      	ldr	r2, [r3, #0]
 8013322:	797b      	ldrb	r3, [r7, #5]
 8013324:	4413      	add	r3, r2
 8013326:	781b      	ldrb	r3, [r3, #0]
  }
}
 8013328:	4618      	mov	r0, r3
 801332a:	370c      	adds	r7, #12
 801332c:	46bd      	mov	sp, r7
 801332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013332:	4770      	bx	lr
 8013334:	20013d10 	.word	0x20013d10
 8013338:	20013d0c 	.word	0x20013d0c
 801333c:	20013d0a 	.word	0x20013d0a
 8013340:	20013d04 	.word	0x20013d04

08013344 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8013344:	b580      	push	{r7, lr}
 8013346:	b084      	sub	sp, #16
 8013348:	af00      	add	r7, sp, #0
 801334a:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 801334c:	687b      	ldr	r3, [r7, #4]
 801334e:	2b00      	cmp	r3, #0
 8013350:	d106      	bne.n	8013360 <tcp_parseopt+0x1c>
 8013352:	4b32      	ldr	r3, [pc, #200]	; (801341c <tcp_parseopt+0xd8>)
 8013354:	f240 727d 	movw	r2, #1917	; 0x77d
 8013358:	4931      	ldr	r1, [pc, #196]	; (8013420 <tcp_parseopt+0xdc>)
 801335a:	4832      	ldr	r0, [pc, #200]	; (8013424 <tcp_parseopt+0xe0>)
 801335c:	f007 fd38 	bl	801add0 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8013360:	4b31      	ldr	r3, [pc, #196]	; (8013428 <tcp_parseopt+0xe4>)
 8013362:	881b      	ldrh	r3, [r3, #0]
 8013364:	2b00      	cmp	r3, #0
 8013366:	d056      	beq.n	8013416 <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8013368:	4b30      	ldr	r3, [pc, #192]	; (801342c <tcp_parseopt+0xe8>)
 801336a:	2200      	movs	r2, #0
 801336c:	801a      	strh	r2, [r3, #0]
 801336e:	e046      	b.n	80133fe <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 8013370:	f7ff ffb2 	bl	80132d8 <tcp_get_next_optbyte>
 8013374:	4603      	mov	r3, r0
 8013376:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8013378:	7bfb      	ldrb	r3, [r7, #15]
 801337a:	2b02      	cmp	r3, #2
 801337c:	d006      	beq.n	801338c <tcp_parseopt+0x48>
 801337e:	2b02      	cmp	r3, #2
 8013380:	dc2c      	bgt.n	80133dc <tcp_parseopt+0x98>
 8013382:	2b00      	cmp	r3, #0
 8013384:	d042      	beq.n	801340c <tcp_parseopt+0xc8>
 8013386:	2b01      	cmp	r3, #1
 8013388:	d128      	bne.n	80133dc <tcp_parseopt+0x98>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 801338a:	e038      	b.n	80133fe <tcp_parseopt+0xba>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 801338c:	f7ff ffa4 	bl	80132d8 <tcp_get_next_optbyte>
 8013390:	4603      	mov	r3, r0
 8013392:	2b04      	cmp	r3, #4
 8013394:	d13c      	bne.n	8013410 <tcp_parseopt+0xcc>
 8013396:	4b25      	ldr	r3, [pc, #148]	; (801342c <tcp_parseopt+0xe8>)
 8013398:	881b      	ldrh	r3, [r3, #0]
 801339a:	3301      	adds	r3, #1
 801339c:	4a22      	ldr	r2, [pc, #136]	; (8013428 <tcp_parseopt+0xe4>)
 801339e:	8812      	ldrh	r2, [r2, #0]
 80133a0:	4293      	cmp	r3, r2
 80133a2:	da35      	bge.n	8013410 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 80133a4:	f7ff ff98 	bl	80132d8 <tcp_get_next_optbyte>
 80133a8:	4603      	mov	r3, r0
 80133aa:	b29b      	uxth	r3, r3
 80133ac:	021b      	lsls	r3, r3, #8
 80133ae:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 80133b0:	f7ff ff92 	bl	80132d8 <tcp_get_next_optbyte>
 80133b4:	4603      	mov	r3, r0
 80133b6:	b29a      	uxth	r2, r3
 80133b8:	89bb      	ldrh	r3, [r7, #12]
 80133ba:	4313      	orrs	r3, r2
 80133bc:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 80133be:	89bb      	ldrh	r3, [r7, #12]
 80133c0:	f240 52b4 	movw	r2, #1460	; 0x5b4
 80133c4:	4293      	cmp	r3, r2
 80133c6:	d804      	bhi.n	80133d2 <tcp_parseopt+0x8e>
 80133c8:	89bb      	ldrh	r3, [r7, #12]
 80133ca:	2b00      	cmp	r3, #0
 80133cc:	d001      	beq.n	80133d2 <tcp_parseopt+0x8e>
 80133ce:	89ba      	ldrh	r2, [r7, #12]
 80133d0:	e001      	b.n	80133d6 <tcp_parseopt+0x92>
 80133d2:	f240 52b4 	movw	r2, #1460	; 0x5b4
 80133d6:	687b      	ldr	r3, [r7, #4]
 80133d8:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 80133da:	e010      	b.n	80133fe <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 80133dc:	f7ff ff7c 	bl	80132d8 <tcp_get_next_optbyte>
 80133e0:	4603      	mov	r3, r0
 80133e2:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 80133e4:	7afb      	ldrb	r3, [r7, #11]
 80133e6:	2b01      	cmp	r3, #1
 80133e8:	d914      	bls.n	8013414 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 80133ea:	7afb      	ldrb	r3, [r7, #11]
 80133ec:	b29a      	uxth	r2, r3
 80133ee:	4b0f      	ldr	r3, [pc, #60]	; (801342c <tcp_parseopt+0xe8>)
 80133f0:	881b      	ldrh	r3, [r3, #0]
 80133f2:	4413      	add	r3, r2
 80133f4:	b29b      	uxth	r3, r3
 80133f6:	3b02      	subs	r3, #2
 80133f8:	b29a      	uxth	r2, r3
 80133fa:	4b0c      	ldr	r3, [pc, #48]	; (801342c <tcp_parseopt+0xe8>)
 80133fc:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80133fe:	4b0b      	ldr	r3, [pc, #44]	; (801342c <tcp_parseopt+0xe8>)
 8013400:	881a      	ldrh	r2, [r3, #0]
 8013402:	4b09      	ldr	r3, [pc, #36]	; (8013428 <tcp_parseopt+0xe4>)
 8013404:	881b      	ldrh	r3, [r3, #0]
 8013406:	429a      	cmp	r2, r3
 8013408:	d3b2      	bcc.n	8013370 <tcp_parseopt+0x2c>
 801340a:	e004      	b.n	8013416 <tcp_parseopt+0xd2>
          return;
 801340c:	bf00      	nop
 801340e:	e002      	b.n	8013416 <tcp_parseopt+0xd2>
            return;
 8013410:	bf00      	nop
 8013412:	e000      	b.n	8013416 <tcp_parseopt+0xd2>
            return;
 8013414:	bf00      	nop
      }
    }
  }
}
 8013416:	3710      	adds	r7, #16
 8013418:	46bd      	mov	sp, r7
 801341a:	bd80      	pop	{r7, pc}
 801341c:	0801ee64 	.word	0x0801ee64
 8013420:	0801f2c8 	.word	0x0801f2c8
 8013424:	0801eeb0 	.word	0x0801eeb0
 8013428:	20013d08 	.word	0x20013d08
 801342c:	20013d10 	.word	0x20013d10

08013430 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8013430:	b480      	push	{r7}
 8013432:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8013434:	4b05      	ldr	r3, [pc, #20]	; (801344c <tcp_trigger_input_pcb_close+0x1c>)
 8013436:	781b      	ldrb	r3, [r3, #0]
 8013438:	f043 0310 	orr.w	r3, r3, #16
 801343c:	b2da      	uxtb	r2, r3
 801343e:	4b03      	ldr	r3, [pc, #12]	; (801344c <tcp_trigger_input_pcb_close+0x1c>)
 8013440:	701a      	strb	r2, [r3, #0]
}
 8013442:	bf00      	nop
 8013444:	46bd      	mov	sp, r7
 8013446:	f85d 7b04 	ldr.w	r7, [sp], #4
 801344a:	4770      	bx	lr
 801344c:	20013d21 	.word	0x20013d21

08013450 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8013450:	b580      	push	{r7, lr}
 8013452:	b084      	sub	sp, #16
 8013454:	af00      	add	r7, sp, #0
 8013456:	60f8      	str	r0, [r7, #12]
 8013458:	60b9      	str	r1, [r7, #8]
 801345a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 801345c:	68fb      	ldr	r3, [r7, #12]
 801345e:	2b00      	cmp	r3, #0
 8013460:	d00a      	beq.n	8013478 <tcp_route+0x28>
 8013462:	68fb      	ldr	r3, [r7, #12]
 8013464:	7a1b      	ldrb	r3, [r3, #8]
 8013466:	2b00      	cmp	r3, #0
 8013468:	d006      	beq.n	8013478 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 801346a:	68fb      	ldr	r3, [r7, #12]
 801346c:	7a1b      	ldrb	r3, [r3, #8]
 801346e:	4618      	mov	r0, r3
 8013470:	f7fb f960 	bl	800e734 <netif_get_by_index>
 8013474:	4603      	mov	r3, r0
 8013476:	e003      	b.n	8013480 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8013478:	6878      	ldr	r0, [r7, #4]
 801347a:	f005 fa1d 	bl	80188b8 <ip4_route>
 801347e:	4603      	mov	r3, r0
  }
}
 8013480:	4618      	mov	r0, r3
 8013482:	3710      	adds	r7, #16
 8013484:	46bd      	mov	sp, r7
 8013486:	bd80      	pop	{r7, pc}

08013488 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8013488:	b590      	push	{r4, r7, lr}
 801348a:	b087      	sub	sp, #28
 801348c:	af00      	add	r7, sp, #0
 801348e:	60f8      	str	r0, [r7, #12]
 8013490:	60b9      	str	r1, [r7, #8]
 8013492:	603b      	str	r3, [r7, #0]
 8013494:	4613      	mov	r3, r2
 8013496:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8013498:	68fb      	ldr	r3, [r7, #12]
 801349a:	2b00      	cmp	r3, #0
 801349c:	d105      	bne.n	80134aa <tcp_create_segment+0x22>
 801349e:	4b45      	ldr	r3, [pc, #276]	; (80135b4 <tcp_create_segment+0x12c>)
 80134a0:	22a3      	movs	r2, #163	; 0xa3
 80134a2:	4945      	ldr	r1, [pc, #276]	; (80135b8 <tcp_create_segment+0x130>)
 80134a4:	4845      	ldr	r0, [pc, #276]	; (80135bc <tcp_create_segment+0x134>)
 80134a6:	f007 fc93 	bl	801add0 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 80134aa:	68bb      	ldr	r3, [r7, #8]
 80134ac:	2b00      	cmp	r3, #0
 80134ae:	d105      	bne.n	80134bc <tcp_create_segment+0x34>
 80134b0:	4b40      	ldr	r3, [pc, #256]	; (80135b4 <tcp_create_segment+0x12c>)
 80134b2:	22a4      	movs	r2, #164	; 0xa4
 80134b4:	4942      	ldr	r1, [pc, #264]	; (80135c0 <tcp_create_segment+0x138>)
 80134b6:	4841      	ldr	r0, [pc, #260]	; (80135bc <tcp_create_segment+0x134>)
 80134b8:	f007 fc8a 	bl	801add0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80134bc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80134c0:	009b      	lsls	r3, r3, #2
 80134c2:	b2db      	uxtb	r3, r3
 80134c4:	f003 0304 	and.w	r3, r3, #4
 80134c8:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80134ca:	2003      	movs	r0, #3
 80134cc:	f7fa fdd0 	bl	800e070 <memp_malloc>
 80134d0:	6138      	str	r0, [r7, #16]
 80134d2:	693b      	ldr	r3, [r7, #16]
 80134d4:	2b00      	cmp	r3, #0
 80134d6:	d104      	bne.n	80134e2 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 80134d8:	68b8      	ldr	r0, [r7, #8]
 80134da:	f7fb fcbd 	bl	800ee58 <pbuf_free>
    return NULL;
 80134de:	2300      	movs	r3, #0
 80134e0:	e064      	b.n	80135ac <tcp_create_segment+0x124>
  }
  seg->flags = optflags;
 80134e2:	693b      	ldr	r3, [r7, #16]
 80134e4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80134e8:	731a      	strb	r2, [r3, #12]
  seg->next = NULL;
 80134ea:	693b      	ldr	r3, [r7, #16]
 80134ec:	2200      	movs	r2, #0
 80134ee:	601a      	str	r2, [r3, #0]
  seg->p = p;
 80134f0:	693b      	ldr	r3, [r7, #16]
 80134f2:	68ba      	ldr	r2, [r7, #8]
 80134f4:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 80134f6:	68bb      	ldr	r3, [r7, #8]
 80134f8:	891a      	ldrh	r2, [r3, #8]
 80134fa:	7dfb      	ldrb	r3, [r7, #23]
 80134fc:	b29b      	uxth	r3, r3
 80134fe:	429a      	cmp	r2, r3
 8013500:	d205      	bcs.n	801350e <tcp_create_segment+0x86>
 8013502:	4b2c      	ldr	r3, [pc, #176]	; (80135b4 <tcp_create_segment+0x12c>)
 8013504:	22b0      	movs	r2, #176	; 0xb0
 8013506:	492f      	ldr	r1, [pc, #188]	; (80135c4 <tcp_create_segment+0x13c>)
 8013508:	482c      	ldr	r0, [pc, #176]	; (80135bc <tcp_create_segment+0x134>)
 801350a:	f007 fc61 	bl	801add0 <iprintf>
  seg->len = p->tot_len - optlen;
 801350e:	68bb      	ldr	r3, [r7, #8]
 8013510:	891a      	ldrh	r2, [r3, #8]
 8013512:	7dfb      	ldrb	r3, [r7, #23]
 8013514:	b29b      	uxth	r3, r3
 8013516:	1ad3      	subs	r3, r2, r3
 8013518:	b29a      	uxth	r2, r3
 801351a:	693b      	ldr	r3, [r7, #16]
 801351c:	811a      	strh	r2, [r3, #8]
#if TCP_OVERSIZE_DBGCHECK
  seg->oversize_left = 0;
 801351e:	693b      	ldr	r3, [r7, #16]
 8013520:	2200      	movs	r2, #0
 8013522:	815a      	strh	r2, [r3, #10]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8013524:	2114      	movs	r1, #20
 8013526:	68b8      	ldr	r0, [r7, #8]
 8013528:	f7fb fc00 	bl	800ed2c <pbuf_add_header>
 801352c:	4603      	mov	r3, r0
 801352e:	2b00      	cmp	r3, #0
 8013530:	d004      	beq.n	801353c <tcp_create_segment+0xb4>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8013532:	6938      	ldr	r0, [r7, #16]
 8013534:	f7fd f8b7 	bl	80106a6 <tcp_seg_free>
    return NULL;
 8013538:	2300      	movs	r3, #0
 801353a:	e037      	b.n	80135ac <tcp_create_segment+0x124>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801353c:	693b      	ldr	r3, [r7, #16]
 801353e:	685b      	ldr	r3, [r3, #4]
 8013540:	685a      	ldr	r2, [r3, #4]
 8013542:	693b      	ldr	r3, [r7, #16]
 8013544:	611a      	str	r2, [r3, #16]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8013546:	68fb      	ldr	r3, [r7, #12]
 8013548:	8ada      	ldrh	r2, [r3, #22]
 801354a:	693b      	ldr	r3, [r7, #16]
 801354c:	691c      	ldr	r4, [r3, #16]
 801354e:	4610      	mov	r0, r2
 8013550:	f7f9 ff60 	bl	800d414 <lwip_htons>
 8013554:	4603      	mov	r3, r0
 8013556:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8013558:	68fb      	ldr	r3, [r7, #12]
 801355a:	8b1a      	ldrh	r2, [r3, #24]
 801355c:	693b      	ldr	r3, [r7, #16]
 801355e:	691c      	ldr	r4, [r3, #16]
 8013560:	4610      	mov	r0, r2
 8013562:	f7f9 ff57 	bl	800d414 <lwip_htons>
 8013566:	4603      	mov	r3, r0
 8013568:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 801356a:	693b      	ldr	r3, [r7, #16]
 801356c:	691c      	ldr	r4, [r3, #16]
 801356e:	6838      	ldr	r0, [r7, #0]
 8013570:	f7f9 ff65 	bl	800d43e <lwip_htonl>
 8013574:	4603      	mov	r3, r0
 8013576:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8013578:	7dfb      	ldrb	r3, [r7, #23]
 801357a:	089b      	lsrs	r3, r3, #2
 801357c:	b2db      	uxtb	r3, r3
 801357e:	b29b      	uxth	r3, r3
 8013580:	3305      	adds	r3, #5
 8013582:	b29b      	uxth	r3, r3
 8013584:	031b      	lsls	r3, r3, #12
 8013586:	b29a      	uxth	r2, r3
 8013588:	79fb      	ldrb	r3, [r7, #7]
 801358a:	b29b      	uxth	r3, r3
 801358c:	4313      	orrs	r3, r2
 801358e:	b29a      	uxth	r2, r3
 8013590:	693b      	ldr	r3, [r7, #16]
 8013592:	691c      	ldr	r4, [r3, #16]
 8013594:	4610      	mov	r0, r2
 8013596:	f7f9 ff3d 	bl	800d414 <lwip_htons>
 801359a:	4603      	mov	r3, r0
 801359c:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 801359e:	693b      	ldr	r3, [r7, #16]
 80135a0:	691b      	ldr	r3, [r3, #16]
 80135a2:	2200      	movs	r2, #0
 80135a4:	749a      	strb	r2, [r3, #18]
 80135a6:	2200      	movs	r2, #0
 80135a8:	74da      	strb	r2, [r3, #19]
  return seg;
 80135aa:	693b      	ldr	r3, [r7, #16]
}
 80135ac:	4618      	mov	r0, r3
 80135ae:	371c      	adds	r7, #28
 80135b0:	46bd      	mov	sp, r7
 80135b2:	bd90      	pop	{r4, r7, pc}
 80135b4:	0801f2e4 	.word	0x0801f2e4
 80135b8:	0801f318 	.word	0x0801f318
 80135bc:	0801f338 	.word	0x0801f338
 80135c0:	0801f360 	.word	0x0801f360
 80135c4:	0801f384 	.word	0x0801f384

080135c8 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 80135c8:	b590      	push	{r4, r7, lr}
 80135ca:	b08b      	sub	sp, #44	; 0x2c
 80135cc:	af02      	add	r7, sp, #8
 80135ce:	6078      	str	r0, [r7, #4]
 80135d0:	460b      	mov	r3, r1
 80135d2:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 80135d4:	2300      	movs	r3, #0
 80135d6:	61bb      	str	r3, [r7, #24]
 80135d8:	2300      	movs	r3, #0
 80135da:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80135dc:	2300      	movs	r3, #0
 80135de:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 80135e0:	687b      	ldr	r3, [r7, #4]
 80135e2:	2b00      	cmp	r3, #0
 80135e4:	d106      	bne.n	80135f4 <tcp_split_unsent_seg+0x2c>
 80135e6:	4b97      	ldr	r3, [pc, #604]	; (8013844 <tcp_split_unsent_seg+0x27c>)
 80135e8:	f240 324b 	movw	r2, #843	; 0x34b
 80135ec:	4996      	ldr	r1, [pc, #600]	; (8013848 <tcp_split_unsent_seg+0x280>)
 80135ee:	4897      	ldr	r0, [pc, #604]	; (801384c <tcp_split_unsent_seg+0x284>)
 80135f0:	f007 fbee 	bl	801add0 <iprintf>

  useg = pcb->unsent;
 80135f4:	687b      	ldr	r3, [r7, #4]
 80135f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80135f8:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 80135fa:	697b      	ldr	r3, [r7, #20]
 80135fc:	2b00      	cmp	r3, #0
 80135fe:	d102      	bne.n	8013606 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8013600:	f04f 33ff 	mov.w	r3, #4294967295
 8013604:	e119      	b.n	801383a <tcp_split_unsent_seg+0x272>
  }

  if (split == 0) {
 8013606:	887b      	ldrh	r3, [r7, #2]
 8013608:	2b00      	cmp	r3, #0
 801360a:	d109      	bne.n	8013620 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 801360c:	4b8d      	ldr	r3, [pc, #564]	; (8013844 <tcp_split_unsent_seg+0x27c>)
 801360e:	f240 3253 	movw	r2, #851	; 0x353
 8013612:	498f      	ldr	r1, [pc, #572]	; (8013850 <tcp_split_unsent_seg+0x288>)
 8013614:	488d      	ldr	r0, [pc, #564]	; (801384c <tcp_split_unsent_seg+0x284>)
 8013616:	f007 fbdb 	bl	801add0 <iprintf>
    return ERR_VAL;
 801361a:	f06f 0305 	mvn.w	r3, #5
 801361e:	e10c      	b.n	801383a <tcp_split_unsent_seg+0x272>
  }

  if (useg->len <= split) {
 8013620:	697b      	ldr	r3, [r7, #20]
 8013622:	891b      	ldrh	r3, [r3, #8]
 8013624:	887a      	ldrh	r2, [r7, #2]
 8013626:	429a      	cmp	r2, r3
 8013628:	d301      	bcc.n	801362e <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801362a:	2300      	movs	r3, #0
 801362c:	e105      	b.n	801383a <tcp_split_unsent_seg+0x272>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801362e:	687b      	ldr	r3, [r7, #4]
 8013630:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013632:	887a      	ldrh	r2, [r7, #2]
 8013634:	429a      	cmp	r2, r3
 8013636:	d906      	bls.n	8013646 <tcp_split_unsent_seg+0x7e>
 8013638:	4b82      	ldr	r3, [pc, #520]	; (8013844 <tcp_split_unsent_seg+0x27c>)
 801363a:	f240 325b 	movw	r2, #859	; 0x35b
 801363e:	4985      	ldr	r1, [pc, #532]	; (8013854 <tcp_split_unsent_seg+0x28c>)
 8013640:	4882      	ldr	r0, [pc, #520]	; (801384c <tcp_split_unsent_seg+0x284>)
 8013642:	f007 fbc5 	bl	801add0 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8013646:	697b      	ldr	r3, [r7, #20]
 8013648:	891b      	ldrh	r3, [r3, #8]
 801364a:	2b00      	cmp	r3, #0
 801364c:	d106      	bne.n	801365c <tcp_split_unsent_seg+0x94>
 801364e:	4b7d      	ldr	r3, [pc, #500]	; (8013844 <tcp_split_unsent_seg+0x27c>)
 8013650:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8013654:	4980      	ldr	r1, [pc, #512]	; (8013858 <tcp_split_unsent_seg+0x290>)
 8013656:	487d      	ldr	r0, [pc, #500]	; (801384c <tcp_split_unsent_seg+0x284>)
 8013658:	f007 fbba 	bl	801add0 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 801365c:	697b      	ldr	r3, [r7, #20]
 801365e:	7b1b      	ldrb	r3, [r3, #12]
 8013660:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8013662:	7bfb      	ldrb	r3, [r7, #15]
 8013664:	009b      	lsls	r3, r3, #2
 8013666:	b2db      	uxtb	r3, r3
 8013668:	f003 0304 	and.w	r3, r3, #4
 801366c:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801366e:	697b      	ldr	r3, [r7, #20]
 8013670:	891a      	ldrh	r2, [r3, #8]
 8013672:	887b      	ldrh	r3, [r7, #2]
 8013674:	1ad3      	subs	r3, r2, r3
 8013676:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8013678:	7bbb      	ldrb	r3, [r7, #14]
 801367a:	b29a      	uxth	r2, r3
 801367c:	89bb      	ldrh	r3, [r7, #12]
 801367e:	4413      	add	r3, r2
 8013680:	b29b      	uxth	r3, r3
 8013682:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013686:	4619      	mov	r1, r3
 8013688:	2036      	movs	r0, #54	; 0x36
 801368a:	f7fb f8fd 	bl	800e888 <pbuf_alloc>
 801368e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013690:	693b      	ldr	r3, [r7, #16]
 8013692:	2b00      	cmp	r3, #0
 8013694:	f000 80ba 	beq.w	801380c <tcp_split_unsent_seg+0x244>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8013698:	697b      	ldr	r3, [r7, #20]
 801369a:	685b      	ldr	r3, [r3, #4]
 801369c:	891a      	ldrh	r2, [r3, #8]
 801369e:	697b      	ldr	r3, [r7, #20]
 80136a0:	891b      	ldrh	r3, [r3, #8]
 80136a2:	1ad3      	subs	r3, r2, r3
 80136a4:	b29a      	uxth	r2, r3
 80136a6:	887b      	ldrh	r3, [r7, #2]
 80136a8:	4413      	add	r3, r2
 80136aa:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 80136ac:	697b      	ldr	r3, [r7, #20]
 80136ae:	6858      	ldr	r0, [r3, #4]
 80136b0:	693b      	ldr	r3, [r7, #16]
 80136b2:	685a      	ldr	r2, [r3, #4]
 80136b4:	7bbb      	ldrb	r3, [r7, #14]
 80136b6:	18d1      	adds	r1, r2, r3
 80136b8:	897b      	ldrh	r3, [r7, #10]
 80136ba:	89ba      	ldrh	r2, [r7, #12]
 80136bc:	f7fb fdd2 	bl	800f264 <pbuf_copy_partial>
 80136c0:	4603      	mov	r3, r0
 80136c2:	461a      	mov	r2, r3
 80136c4:	89bb      	ldrh	r3, [r7, #12]
 80136c6:	4293      	cmp	r3, r2
 80136c8:	f040 80a2 	bne.w	8013810 <tcp_split_unsent_seg+0x248>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 80136cc:	697b      	ldr	r3, [r7, #20]
 80136ce:	691b      	ldr	r3, [r3, #16]
 80136d0:	899b      	ldrh	r3, [r3, #12]
 80136d2:	b29b      	uxth	r3, r3
 80136d4:	4618      	mov	r0, r3
 80136d6:	f7f9 fe9d 	bl	800d414 <lwip_htons>
 80136da:	4603      	mov	r3, r0
 80136dc:	b2db      	uxtb	r3, r3
 80136de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80136e2:	77fb      	strb	r3, [r7, #31]
  remainder_flags = 0; /* ACK added in tcp_output() */
 80136e4:	2300      	movs	r3, #0
 80136e6:	77bb      	strb	r3, [r7, #30]

  if (split_flags & TCP_PSH) {
 80136e8:	7ffb      	ldrb	r3, [r7, #31]
 80136ea:	f003 0308 	and.w	r3, r3, #8
 80136ee:	2b00      	cmp	r3, #0
 80136f0:	d007      	beq.n	8013702 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 80136f2:	7ffb      	ldrb	r3, [r7, #31]
 80136f4:	f023 0308 	bic.w	r3, r3, #8
 80136f8:	77fb      	strb	r3, [r7, #31]
    remainder_flags |= TCP_PSH;
 80136fa:	7fbb      	ldrb	r3, [r7, #30]
 80136fc:	f043 0308 	orr.w	r3, r3, #8
 8013700:	77bb      	strb	r3, [r7, #30]
  }
  if (split_flags & TCP_FIN) {
 8013702:	7ffb      	ldrb	r3, [r7, #31]
 8013704:	f003 0301 	and.w	r3, r3, #1
 8013708:	2b00      	cmp	r3, #0
 801370a:	d007      	beq.n	801371c <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 801370c:	7ffb      	ldrb	r3, [r7, #31]
 801370e:	f023 0301 	bic.w	r3, r3, #1
 8013712:	77fb      	strb	r3, [r7, #31]
    remainder_flags |= TCP_FIN;
 8013714:	7fbb      	ldrb	r3, [r7, #30]
 8013716:	f043 0301 	orr.w	r3, r3, #1
 801371a:	77bb      	strb	r3, [r7, #30]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 801371c:	697b      	ldr	r3, [r7, #20]
 801371e:	691b      	ldr	r3, [r3, #16]
 8013720:	685b      	ldr	r3, [r3, #4]
 8013722:	4618      	mov	r0, r3
 8013724:	f7f9 fe8b 	bl	800d43e <lwip_htonl>
 8013728:	4602      	mov	r2, r0
 801372a:	887b      	ldrh	r3, [r7, #2]
 801372c:	18d1      	adds	r1, r2, r3
 801372e:	7fba      	ldrb	r2, [r7, #30]
 8013730:	7bfb      	ldrb	r3, [r7, #15]
 8013732:	9300      	str	r3, [sp, #0]
 8013734:	460b      	mov	r3, r1
 8013736:	6939      	ldr	r1, [r7, #16]
 8013738:	6878      	ldr	r0, [r7, #4]
 801373a:	f7ff fea5 	bl	8013488 <tcp_create_segment>
 801373e:	61b8      	str	r0, [r7, #24]
  if (seg == NULL) {
 8013740:	69bb      	ldr	r3, [r7, #24]
 8013742:	2b00      	cmp	r3, #0
 8013744:	d066      	beq.n	8013814 <tcp_split_unsent_seg+0x24c>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8013746:	697b      	ldr	r3, [r7, #20]
 8013748:	685b      	ldr	r3, [r3, #4]
 801374a:	4618      	mov	r0, r3
 801374c:	f7fb fc12 	bl	800ef74 <pbuf_clen>
 8013750:	4603      	mov	r3, r0
 8013752:	461a      	mov	r2, r3
 8013754:	687b      	ldr	r3, [r7, #4]
 8013756:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801375a:	1a9b      	subs	r3, r3, r2
 801375c:	b29a      	uxth	r2, r3
 801375e:	687b      	ldr	r3, [r7, #4]
 8013760:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8013764:	697b      	ldr	r3, [r7, #20]
 8013766:	6858      	ldr	r0, [r3, #4]
 8013768:	697b      	ldr	r3, [r7, #20]
 801376a:	685b      	ldr	r3, [r3, #4]
 801376c:	891a      	ldrh	r2, [r3, #8]
 801376e:	89bb      	ldrh	r3, [r7, #12]
 8013770:	1ad3      	subs	r3, r2, r3
 8013772:	b29b      	uxth	r3, r3
 8013774:	4619      	mov	r1, r3
 8013776:	f7fb f9e9 	bl	800eb4c <pbuf_realloc>
  useg->len -= remainder;
 801377a:	697b      	ldr	r3, [r7, #20]
 801377c:	891a      	ldrh	r2, [r3, #8]
 801377e:	89bb      	ldrh	r3, [r7, #12]
 8013780:	1ad3      	subs	r3, r2, r3
 8013782:	b29a      	uxth	r2, r3
 8013784:	697b      	ldr	r3, [r7, #20]
 8013786:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8013788:	697b      	ldr	r3, [r7, #20]
 801378a:	691b      	ldr	r3, [r3, #16]
 801378c:	899b      	ldrh	r3, [r3, #12]
 801378e:	b29c      	uxth	r4, r3
 8013790:	7ffb      	ldrb	r3, [r7, #31]
 8013792:	b29b      	uxth	r3, r3
 8013794:	4618      	mov	r0, r3
 8013796:	f7f9 fe3d 	bl	800d414 <lwip_htons>
 801379a:	4603      	mov	r3, r0
 801379c:	461a      	mov	r2, r3
 801379e:	697b      	ldr	r3, [r7, #20]
 80137a0:	691b      	ldr	r3, [r3, #16]
 80137a2:	4322      	orrs	r2, r4
 80137a4:	b292      	uxth	r2, r2
 80137a6:	819a      	strh	r2, [r3, #12]
#if TCP_OVERSIZE_DBGCHECK
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
 80137a8:	697b      	ldr	r3, [r7, #20]
 80137aa:	2200      	movs	r2, #0
 80137ac:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 80137ae:	697b      	ldr	r3, [r7, #20]
 80137b0:	685b      	ldr	r3, [r3, #4]
 80137b2:	4618      	mov	r0, r3
 80137b4:	f7fb fbde 	bl	800ef74 <pbuf_clen>
 80137b8:	4603      	mov	r3, r0
 80137ba:	461a      	mov	r2, r3
 80137bc:	687b      	ldr	r3, [r7, #4]
 80137be:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80137c2:	4413      	add	r3, r2
 80137c4:	b29a      	uxth	r2, r3
 80137c6:	687b      	ldr	r3, [r7, #4]
 80137c8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80137cc:	69bb      	ldr	r3, [r7, #24]
 80137ce:	685b      	ldr	r3, [r3, #4]
 80137d0:	4618      	mov	r0, r3
 80137d2:	f7fb fbcf 	bl	800ef74 <pbuf_clen>
 80137d6:	4603      	mov	r3, r0
 80137d8:	461a      	mov	r2, r3
 80137da:	687b      	ldr	r3, [r7, #4]
 80137dc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80137e0:	4413      	add	r3, r2
 80137e2:	b29a      	uxth	r2, r3
 80137e4:	687b      	ldr	r3, [r7, #4]
 80137e6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 80137ea:	697b      	ldr	r3, [r7, #20]
 80137ec:	681a      	ldr	r2, [r3, #0]
 80137ee:	69bb      	ldr	r3, [r7, #24]
 80137f0:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 80137f2:	697b      	ldr	r3, [r7, #20]
 80137f4:	69ba      	ldr	r2, [r7, #24]
 80137f6:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 80137f8:	69bb      	ldr	r3, [r7, #24]
 80137fa:	681b      	ldr	r3, [r3, #0]
 80137fc:	2b00      	cmp	r3, #0
 80137fe:	d103      	bne.n	8013808 <tcp_split_unsent_seg+0x240>
    pcb->unsent_oversize = 0;
 8013800:	687b      	ldr	r3, [r7, #4]
 8013802:	2200      	movs	r2, #0
 8013804:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8013808:	2300      	movs	r3, #0
 801380a:	e016      	b.n	801383a <tcp_split_unsent_seg+0x272>
    goto memerr;
 801380c:	bf00      	nop
 801380e:	e002      	b.n	8013816 <tcp_split_unsent_seg+0x24e>
    goto memerr;
 8013810:	bf00      	nop
 8013812:	e000      	b.n	8013816 <tcp_split_unsent_seg+0x24e>
    goto memerr;
 8013814:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8013816:	69bb      	ldr	r3, [r7, #24]
 8013818:	2b00      	cmp	r3, #0
 801381a:	d006      	beq.n	801382a <tcp_split_unsent_seg+0x262>
 801381c:	4b09      	ldr	r3, [pc, #36]	; (8013844 <tcp_split_unsent_seg+0x27c>)
 801381e:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8013822:	490e      	ldr	r1, [pc, #56]	; (801385c <tcp_split_unsent_seg+0x294>)
 8013824:	4809      	ldr	r0, [pc, #36]	; (801384c <tcp_split_unsent_seg+0x284>)
 8013826:	f007 fad3 	bl	801add0 <iprintf>
  if (p != NULL) {
 801382a:	693b      	ldr	r3, [r7, #16]
 801382c:	2b00      	cmp	r3, #0
 801382e:	d002      	beq.n	8013836 <tcp_split_unsent_seg+0x26e>
    pbuf_free(p);
 8013830:	6938      	ldr	r0, [r7, #16]
 8013832:	f7fb fb11 	bl	800ee58 <pbuf_free>
  }

  return ERR_MEM;
 8013836:	f04f 33ff 	mov.w	r3, #4294967295
}
 801383a:	4618      	mov	r0, r3
 801383c:	3724      	adds	r7, #36	; 0x24
 801383e:	46bd      	mov	sp, r7
 8013840:	bd90      	pop	{r4, r7, pc}
 8013842:	bf00      	nop
 8013844:	0801f2e4 	.word	0x0801f2e4
 8013848:	0801f6d4 	.word	0x0801f6d4
 801384c:	0801f338 	.word	0x0801f338
 8013850:	0801f6f8 	.word	0x0801f6f8
 8013854:	0801f71c 	.word	0x0801f71c
 8013858:	0801f72c 	.word	0x0801f72c
 801385c:	0801f73c 	.word	0x0801f73c

08013860 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8013860:	b590      	push	{r4, r7, lr}
 8013862:	b085      	sub	sp, #20
 8013864:	af00      	add	r7, sp, #0
 8013866:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8013868:	687b      	ldr	r3, [r7, #4]
 801386a:	2b00      	cmp	r3, #0
 801386c:	d106      	bne.n	801387c <tcp_send_fin+0x1c>
 801386e:	4b21      	ldr	r3, [pc, #132]	; (80138f4 <tcp_send_fin+0x94>)
 8013870:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8013874:	4920      	ldr	r1, [pc, #128]	; (80138f8 <tcp_send_fin+0x98>)
 8013876:	4821      	ldr	r0, [pc, #132]	; (80138fc <tcp_send_fin+0x9c>)
 8013878:	f007 faaa 	bl	801add0 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 801387c:	687b      	ldr	r3, [r7, #4]
 801387e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013880:	2b00      	cmp	r3, #0
 8013882:	d02e      	beq.n	80138e2 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8013884:	687b      	ldr	r3, [r7, #4]
 8013886:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013888:	60fb      	str	r3, [r7, #12]
 801388a:	e002      	b.n	8013892 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 801388c:	68fb      	ldr	r3, [r7, #12]
 801388e:	681b      	ldr	r3, [r3, #0]
 8013890:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8013892:	68fb      	ldr	r3, [r7, #12]
 8013894:	681b      	ldr	r3, [r3, #0]
 8013896:	2b00      	cmp	r3, #0
 8013898:	d1f8      	bne.n	801388c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801389a:	68fb      	ldr	r3, [r7, #12]
 801389c:	691b      	ldr	r3, [r3, #16]
 801389e:	899b      	ldrh	r3, [r3, #12]
 80138a0:	b29b      	uxth	r3, r3
 80138a2:	4618      	mov	r0, r3
 80138a4:	f7f9 fdb6 	bl	800d414 <lwip_htons>
 80138a8:	4603      	mov	r3, r0
 80138aa:	b2db      	uxtb	r3, r3
 80138ac:	f003 0307 	and.w	r3, r3, #7
 80138b0:	2b00      	cmp	r3, #0
 80138b2:	d116      	bne.n	80138e2 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 80138b4:	68fb      	ldr	r3, [r7, #12]
 80138b6:	691b      	ldr	r3, [r3, #16]
 80138b8:	899b      	ldrh	r3, [r3, #12]
 80138ba:	b29c      	uxth	r4, r3
 80138bc:	2001      	movs	r0, #1
 80138be:	f7f9 fda9 	bl	800d414 <lwip_htons>
 80138c2:	4603      	mov	r3, r0
 80138c4:	461a      	mov	r2, r3
 80138c6:	68fb      	ldr	r3, [r7, #12]
 80138c8:	691b      	ldr	r3, [r3, #16]
 80138ca:	4322      	orrs	r2, r4
 80138cc:	b292      	uxth	r2, r2
 80138ce:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 80138d0:	687b      	ldr	r3, [r7, #4]
 80138d2:	8b5b      	ldrh	r3, [r3, #26]
 80138d4:	f043 0320 	orr.w	r3, r3, #32
 80138d8:	b29a      	uxth	r2, r3
 80138da:	687b      	ldr	r3, [r7, #4]
 80138dc:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 80138de:	2300      	movs	r3, #0
 80138e0:	e004      	b.n	80138ec <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 80138e2:	2101      	movs	r1, #1
 80138e4:	6878      	ldr	r0, [r7, #4]
 80138e6:	f000 f80b 	bl	8013900 <tcp_enqueue_flags>
 80138ea:	4603      	mov	r3, r0
}
 80138ec:	4618      	mov	r0, r3
 80138ee:	3714      	adds	r7, #20
 80138f0:	46bd      	mov	sp, r7
 80138f2:	bd90      	pop	{r4, r7, pc}
 80138f4:	0801f2e4 	.word	0x0801f2e4
 80138f8:	0801f748 	.word	0x0801f748
 80138fc:	0801f338 	.word	0x0801f338

08013900 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8013900:	b580      	push	{r7, lr}
 8013902:	b088      	sub	sp, #32
 8013904:	af02      	add	r7, sp, #8
 8013906:	6078      	str	r0, [r7, #4]
 8013908:	460b      	mov	r3, r1
 801390a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 801390c:	2300      	movs	r3, #0
 801390e:	75fb      	strb	r3, [r7, #23]
  u8_t optlen = 0;
 8013910:	2300      	movs	r3, #0
 8013912:	75bb      	strb	r3, [r7, #22]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8013914:	78fb      	ldrb	r3, [r7, #3]
 8013916:	f003 0303 	and.w	r3, r3, #3
 801391a:	2b00      	cmp	r3, #0
 801391c:	d106      	bne.n	801392c <tcp_enqueue_flags+0x2c>
 801391e:	4b67      	ldr	r3, [pc, #412]	; (8013abc <tcp_enqueue_flags+0x1bc>)
 8013920:	f240 4211 	movw	r2, #1041	; 0x411
 8013924:	4966      	ldr	r1, [pc, #408]	; (8013ac0 <tcp_enqueue_flags+0x1c0>)
 8013926:	4867      	ldr	r0, [pc, #412]	; (8013ac4 <tcp_enqueue_flags+0x1c4>)
 8013928:	f007 fa52 	bl	801add0 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801392c:	687b      	ldr	r3, [r7, #4]
 801392e:	2b00      	cmp	r3, #0
 8013930:	d106      	bne.n	8013940 <tcp_enqueue_flags+0x40>
 8013932:	4b62      	ldr	r3, [pc, #392]	; (8013abc <tcp_enqueue_flags+0x1bc>)
 8013934:	f240 4213 	movw	r2, #1043	; 0x413
 8013938:	4963      	ldr	r1, [pc, #396]	; (8013ac8 <tcp_enqueue_flags+0x1c8>)
 801393a:	4862      	ldr	r0, [pc, #392]	; (8013ac4 <tcp_enqueue_flags+0x1c4>)
 801393c:	f007 fa48 	bl	801add0 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8013940:	78fb      	ldrb	r3, [r7, #3]
 8013942:	f003 0302 	and.w	r3, r3, #2
 8013946:	2b00      	cmp	r3, #0
 8013948:	d001      	beq.n	801394e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801394a:	2301      	movs	r3, #1
 801394c:	75fb      	strb	r3, [r7, #23]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801394e:	7dfb      	ldrb	r3, [r7, #23]
 8013950:	009b      	lsls	r3, r3, #2
 8013952:	b2db      	uxtb	r3, r3
 8013954:	f003 0304 	and.w	r3, r3, #4
 8013958:	75bb      	strb	r3, [r7, #22]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801395a:	7dbb      	ldrb	r3, [r7, #22]
 801395c:	b29b      	uxth	r3, r3
 801395e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013962:	4619      	mov	r1, r3
 8013964:	2036      	movs	r0, #54	; 0x36
 8013966:	f7fa ff8f 	bl	800e888 <pbuf_alloc>
 801396a:	60f8      	str	r0, [r7, #12]
 801396c:	68fb      	ldr	r3, [r7, #12]
 801396e:	2b00      	cmp	r3, #0
 8013970:	d109      	bne.n	8013986 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013972:	687b      	ldr	r3, [r7, #4]
 8013974:	8b5b      	ldrh	r3, [r3, #26]
 8013976:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801397a:	b29a      	uxth	r2, r3
 801397c:	687b      	ldr	r3, [r7, #4]
 801397e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8013980:	f04f 33ff 	mov.w	r3, #4294967295
 8013984:	e095      	b.n	8013ab2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8013986:	68fb      	ldr	r3, [r7, #12]
 8013988:	895a      	ldrh	r2, [r3, #10]
 801398a:	7dbb      	ldrb	r3, [r7, #22]
 801398c:	b29b      	uxth	r3, r3
 801398e:	429a      	cmp	r2, r3
 8013990:	d206      	bcs.n	80139a0 <tcp_enqueue_flags+0xa0>
 8013992:	4b4a      	ldr	r3, [pc, #296]	; (8013abc <tcp_enqueue_flags+0x1bc>)
 8013994:	f240 4239 	movw	r2, #1081	; 0x439
 8013998:	494c      	ldr	r1, [pc, #304]	; (8013acc <tcp_enqueue_flags+0x1cc>)
 801399a:	484a      	ldr	r0, [pc, #296]	; (8013ac4 <tcp_enqueue_flags+0x1c4>)
 801399c:	f007 fa18 	bl	801add0 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80139a0:	687b      	ldr	r3, [r7, #4]
 80139a2:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80139a4:	78fa      	ldrb	r2, [r7, #3]
 80139a6:	7dfb      	ldrb	r3, [r7, #23]
 80139a8:	9300      	str	r3, [sp, #0]
 80139aa:	460b      	mov	r3, r1
 80139ac:	68f9      	ldr	r1, [r7, #12]
 80139ae:	6878      	ldr	r0, [r7, #4]
 80139b0:	f7ff fd6a 	bl	8013488 <tcp_create_segment>
 80139b4:	60b8      	str	r0, [r7, #8]
 80139b6:	68bb      	ldr	r3, [r7, #8]
 80139b8:	2b00      	cmp	r3, #0
 80139ba:	d109      	bne.n	80139d0 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80139bc:	687b      	ldr	r3, [r7, #4]
 80139be:	8b5b      	ldrh	r3, [r3, #26]
 80139c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80139c4:	b29a      	uxth	r2, r3
 80139c6:	687b      	ldr	r3, [r7, #4]
 80139c8:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80139ca:	f04f 33ff 	mov.w	r3, #4294967295
 80139ce:	e070      	b.n	8013ab2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 80139d0:	68bb      	ldr	r3, [r7, #8]
 80139d2:	691b      	ldr	r3, [r3, #16]
 80139d4:	f003 0303 	and.w	r3, r3, #3
 80139d8:	2b00      	cmp	r3, #0
 80139da:	d006      	beq.n	80139ea <tcp_enqueue_flags+0xea>
 80139dc:	4b37      	ldr	r3, [pc, #220]	; (8013abc <tcp_enqueue_flags+0x1bc>)
 80139de:	f240 4242 	movw	r2, #1090	; 0x442
 80139e2:	493b      	ldr	r1, [pc, #236]	; (8013ad0 <tcp_enqueue_flags+0x1d0>)
 80139e4:	4837      	ldr	r0, [pc, #220]	; (8013ac4 <tcp_enqueue_flags+0x1c4>)
 80139e6:	f007 f9f3 	bl	801add0 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 80139ea:	68bb      	ldr	r3, [r7, #8]
 80139ec:	891b      	ldrh	r3, [r3, #8]
 80139ee:	2b00      	cmp	r3, #0
 80139f0:	d006      	beq.n	8013a00 <tcp_enqueue_flags+0x100>
 80139f2:	4b32      	ldr	r3, [pc, #200]	; (8013abc <tcp_enqueue_flags+0x1bc>)
 80139f4:	f240 4243 	movw	r2, #1091	; 0x443
 80139f8:	4936      	ldr	r1, [pc, #216]	; (8013ad4 <tcp_enqueue_flags+0x1d4>)
 80139fa:	4832      	ldr	r0, [pc, #200]	; (8013ac4 <tcp_enqueue_flags+0x1c4>)
 80139fc:	f007 f9e8 	bl	801add0 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8013a00:	687b      	ldr	r3, [r7, #4]
 8013a02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013a04:	2b00      	cmp	r3, #0
 8013a06:	d103      	bne.n	8013a10 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8013a08:	687b      	ldr	r3, [r7, #4]
 8013a0a:	68ba      	ldr	r2, [r7, #8]
 8013a0c:	66da      	str	r2, [r3, #108]	; 0x6c
 8013a0e:	e00d      	b.n	8013a2c <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8013a10:	687b      	ldr	r3, [r7, #4]
 8013a12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013a14:	613b      	str	r3, [r7, #16]
 8013a16:	e002      	b.n	8013a1e <tcp_enqueue_flags+0x11e>
 8013a18:	693b      	ldr	r3, [r7, #16]
 8013a1a:	681b      	ldr	r3, [r3, #0]
 8013a1c:	613b      	str	r3, [r7, #16]
 8013a1e:	693b      	ldr	r3, [r7, #16]
 8013a20:	681b      	ldr	r3, [r3, #0]
 8013a22:	2b00      	cmp	r3, #0
 8013a24:	d1f8      	bne.n	8013a18 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8013a26:	693b      	ldr	r3, [r7, #16]
 8013a28:	68ba      	ldr	r2, [r7, #8]
 8013a2a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8013a2c:	687b      	ldr	r3, [r7, #4]
 8013a2e:	2200      	movs	r2, #0
 8013a30:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8013a34:	78fb      	ldrb	r3, [r7, #3]
 8013a36:	f003 0302 	and.w	r3, r3, #2
 8013a3a:	2b00      	cmp	r3, #0
 8013a3c:	d104      	bne.n	8013a48 <tcp_enqueue_flags+0x148>
 8013a3e:	78fb      	ldrb	r3, [r7, #3]
 8013a40:	f003 0301 	and.w	r3, r3, #1
 8013a44:	2b00      	cmp	r3, #0
 8013a46:	d004      	beq.n	8013a52 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8013a48:	687b      	ldr	r3, [r7, #4]
 8013a4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013a4c:	1c5a      	adds	r2, r3, #1
 8013a4e:	687b      	ldr	r3, [r7, #4]
 8013a50:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8013a52:	78fb      	ldrb	r3, [r7, #3]
 8013a54:	f003 0301 	and.w	r3, r3, #1
 8013a58:	2b00      	cmp	r3, #0
 8013a5a:	d006      	beq.n	8013a6a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8013a5c:	687b      	ldr	r3, [r7, #4]
 8013a5e:	8b5b      	ldrh	r3, [r3, #26]
 8013a60:	f043 0320 	orr.w	r3, r3, #32
 8013a64:	b29a      	uxth	r2, r3
 8013a66:	687b      	ldr	r3, [r7, #4]
 8013a68:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8013a6a:	68bb      	ldr	r3, [r7, #8]
 8013a6c:	685b      	ldr	r3, [r3, #4]
 8013a6e:	4618      	mov	r0, r3
 8013a70:	f7fb fa80 	bl	800ef74 <pbuf_clen>
 8013a74:	4603      	mov	r3, r0
 8013a76:	461a      	mov	r2, r3
 8013a78:	687b      	ldr	r3, [r7, #4]
 8013a7a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013a7e:	4413      	add	r3, r2
 8013a80:	b29a      	uxth	r2, r3
 8013a82:	687b      	ldr	r3, [r7, #4]
 8013a84:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8013a88:	687b      	ldr	r3, [r7, #4]
 8013a8a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013a8e:	2b00      	cmp	r3, #0
 8013a90:	d00e      	beq.n	8013ab0 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8013a92:	687b      	ldr	r3, [r7, #4]
 8013a94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013a96:	2b00      	cmp	r3, #0
 8013a98:	d10a      	bne.n	8013ab0 <tcp_enqueue_flags+0x1b0>
 8013a9a:	687b      	ldr	r3, [r7, #4]
 8013a9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013a9e:	2b00      	cmp	r3, #0
 8013aa0:	d106      	bne.n	8013ab0 <tcp_enqueue_flags+0x1b0>
 8013aa2:	4b06      	ldr	r3, [pc, #24]	; (8013abc <tcp_enqueue_flags+0x1bc>)
 8013aa4:	f240 4265 	movw	r2, #1125	; 0x465
 8013aa8:	490b      	ldr	r1, [pc, #44]	; (8013ad8 <tcp_enqueue_flags+0x1d8>)
 8013aaa:	4806      	ldr	r0, [pc, #24]	; (8013ac4 <tcp_enqueue_flags+0x1c4>)
 8013aac:	f007 f990 	bl	801add0 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8013ab0:	2300      	movs	r3, #0
}
 8013ab2:	4618      	mov	r0, r3
 8013ab4:	3718      	adds	r7, #24
 8013ab6:	46bd      	mov	sp, r7
 8013ab8:	bd80      	pop	{r7, pc}
 8013aba:	bf00      	nop
 8013abc:	0801f2e4 	.word	0x0801f2e4
 8013ac0:	0801f764 	.word	0x0801f764
 8013ac4:	0801f338 	.word	0x0801f338
 8013ac8:	0801f7bc 	.word	0x0801f7bc
 8013acc:	0801f7dc 	.word	0x0801f7dc
 8013ad0:	0801f818 	.word	0x0801f818
 8013ad4:	0801f830 	.word	0x0801f830
 8013ad8:	0801f85c 	.word	0x0801f85c

08013adc <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8013adc:	b5b0      	push	{r4, r5, r7, lr}
 8013ade:	b08a      	sub	sp, #40	; 0x28
 8013ae0:	af00      	add	r7, sp, #0
 8013ae2:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8013ae4:	687b      	ldr	r3, [r7, #4]
 8013ae6:	2b00      	cmp	r3, #0
 8013ae8:	d106      	bne.n	8013af8 <tcp_output+0x1c>
 8013aea:	4b8a      	ldr	r3, [pc, #552]	; (8013d14 <tcp_output+0x238>)
 8013aec:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8013af0:	4989      	ldr	r1, [pc, #548]	; (8013d18 <tcp_output+0x23c>)
 8013af2:	488a      	ldr	r0, [pc, #552]	; (8013d1c <tcp_output+0x240>)
 8013af4:	f007 f96c 	bl	801add0 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8013af8:	687b      	ldr	r3, [r7, #4]
 8013afa:	7d1b      	ldrb	r3, [r3, #20]
 8013afc:	2b01      	cmp	r3, #1
 8013afe:	d106      	bne.n	8013b0e <tcp_output+0x32>
 8013b00:	4b84      	ldr	r3, [pc, #528]	; (8013d14 <tcp_output+0x238>)
 8013b02:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8013b06:	4986      	ldr	r1, [pc, #536]	; (8013d20 <tcp_output+0x244>)
 8013b08:	4884      	ldr	r0, [pc, #528]	; (8013d1c <tcp_output+0x240>)
 8013b0a:	f007 f961 	bl	801add0 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8013b0e:	4b85      	ldr	r3, [pc, #532]	; (8013d24 <tcp_output+0x248>)
 8013b10:	681b      	ldr	r3, [r3, #0]
 8013b12:	687a      	ldr	r2, [r7, #4]
 8013b14:	429a      	cmp	r2, r3
 8013b16:	d101      	bne.n	8013b1c <tcp_output+0x40>
    return ERR_OK;
 8013b18:	2300      	movs	r3, #0
 8013b1a:	e1d1      	b.n	8013ec0 <tcp_output+0x3e4>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8013b1c:	687b      	ldr	r3, [r7, #4]
 8013b1e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013b22:	687b      	ldr	r3, [r7, #4]
 8013b24:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013b28:	4293      	cmp	r3, r2
 8013b2a:	bf28      	it	cs
 8013b2c:	4613      	movcs	r3, r2
 8013b2e:	b29b      	uxth	r3, r3
 8013b30:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8013b32:	687b      	ldr	r3, [r7, #4]
 8013b34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013b36:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8013b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b3a:	2b00      	cmp	r3, #0
 8013b3c:	d10b      	bne.n	8013b56 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8013b3e:	687b      	ldr	r3, [r7, #4]
 8013b40:	8b5b      	ldrh	r3, [r3, #26]
 8013b42:	f003 0302 	and.w	r3, r3, #2
 8013b46:	2b00      	cmp	r3, #0
 8013b48:	f000 81ad 	beq.w	8013ea6 <tcp_output+0x3ca>
      return tcp_send_empty_ack(pcb);
 8013b4c:	6878      	ldr	r0, [r7, #4]
 8013b4e:	f000 fdf9 	bl	8014744 <tcp_send_empty_ack>
 8013b52:	4603      	mov	r3, r0
 8013b54:	e1b4      	b.n	8013ec0 <tcp_output+0x3e4>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8013b56:	6879      	ldr	r1, [r7, #4]
 8013b58:	687b      	ldr	r3, [r7, #4]
 8013b5a:	3304      	adds	r3, #4
 8013b5c:	461a      	mov	r2, r3
 8013b5e:	6878      	ldr	r0, [r7, #4]
 8013b60:	f7ff fc76 	bl	8013450 <tcp_route>
 8013b64:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8013b66:	697b      	ldr	r3, [r7, #20]
 8013b68:	2b00      	cmp	r3, #0
 8013b6a:	d102      	bne.n	8013b72 <tcp_output+0x96>
    return ERR_RTE;
 8013b6c:	f06f 0303 	mvn.w	r3, #3
 8013b70:	e1a6      	b.n	8013ec0 <tcp_output+0x3e4>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8013b72:	687b      	ldr	r3, [r7, #4]
 8013b74:	2b00      	cmp	r3, #0
 8013b76:	d003      	beq.n	8013b80 <tcp_output+0xa4>
 8013b78:	687b      	ldr	r3, [r7, #4]
 8013b7a:	681b      	ldr	r3, [r3, #0]
 8013b7c:	2b00      	cmp	r3, #0
 8013b7e:	d111      	bne.n	8013ba4 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8013b80:	697b      	ldr	r3, [r7, #20]
 8013b82:	2b00      	cmp	r3, #0
 8013b84:	d002      	beq.n	8013b8c <tcp_output+0xb0>
 8013b86:	697b      	ldr	r3, [r7, #20]
 8013b88:	3304      	adds	r3, #4
 8013b8a:	e000      	b.n	8013b8e <tcp_output+0xb2>
 8013b8c:	2300      	movs	r3, #0
 8013b8e:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8013b90:	693b      	ldr	r3, [r7, #16]
 8013b92:	2b00      	cmp	r3, #0
 8013b94:	d102      	bne.n	8013b9c <tcp_output+0xc0>
      return ERR_RTE;
 8013b96:	f06f 0303 	mvn.w	r3, #3
 8013b9a:	e191      	b.n	8013ec0 <tcp_output+0x3e4>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8013b9c:	693b      	ldr	r3, [r7, #16]
 8013b9e:	681a      	ldr	r2, [r3, #0]
 8013ba0:	687b      	ldr	r3, [r7, #4]
 8013ba2:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8013ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ba6:	691b      	ldr	r3, [r3, #16]
 8013ba8:	685b      	ldr	r3, [r3, #4]
 8013baa:	4618      	mov	r0, r3
 8013bac:	f7f9 fc47 	bl	800d43e <lwip_htonl>
 8013bb0:	4602      	mov	r2, r0
 8013bb2:	687b      	ldr	r3, [r7, #4]
 8013bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013bb6:	1ad3      	subs	r3, r2, r3
 8013bb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013bba:	8912      	ldrh	r2, [r2, #8]
 8013bbc:	4413      	add	r3, r2
 8013bbe:	69ba      	ldr	r2, [r7, #24]
 8013bc0:	429a      	cmp	r2, r3
 8013bc2:	d227      	bcs.n	8013c14 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8013bc4:	687b      	ldr	r3, [r7, #4]
 8013bc6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013bca:	461a      	mov	r2, r3
 8013bcc:	69bb      	ldr	r3, [r7, #24]
 8013bce:	4293      	cmp	r3, r2
 8013bd0:	d114      	bne.n	8013bfc <tcp_output+0x120>
 8013bd2:	687b      	ldr	r3, [r7, #4]
 8013bd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013bd6:	2b00      	cmp	r3, #0
 8013bd8:	d110      	bne.n	8013bfc <tcp_output+0x120>
 8013bda:	687b      	ldr	r3, [r7, #4]
 8013bdc:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8013be0:	2b00      	cmp	r3, #0
 8013be2:	d10b      	bne.n	8013bfc <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8013be4:	687b      	ldr	r3, [r7, #4]
 8013be6:	2200      	movs	r2, #0
 8013be8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8013bec:	687b      	ldr	r3, [r7, #4]
 8013bee:	2201      	movs	r2, #1
 8013bf0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8013bf4:	687b      	ldr	r3, [r7, #4]
 8013bf6:	2200      	movs	r2, #0
 8013bf8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8013bfc:	687b      	ldr	r3, [r7, #4]
 8013bfe:	8b5b      	ldrh	r3, [r3, #26]
 8013c00:	f003 0302 	and.w	r3, r3, #2
 8013c04:	2b00      	cmp	r3, #0
 8013c06:	f000 8150 	beq.w	8013eaa <tcp_output+0x3ce>
      return tcp_send_empty_ack(pcb);
 8013c0a:	6878      	ldr	r0, [r7, #4]
 8013c0c:	f000 fd9a 	bl	8014744 <tcp_send_empty_ack>
 8013c10:	4603      	mov	r3, r0
 8013c12:	e155      	b.n	8013ec0 <tcp_output+0x3e4>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8013c14:	687b      	ldr	r3, [r7, #4]
 8013c16:	2200      	movs	r2, #0
 8013c18:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8013c1c:	687b      	ldr	r3, [r7, #4]
 8013c1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013c20:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8013c22:	6a3b      	ldr	r3, [r7, #32]
 8013c24:	2b00      	cmp	r3, #0
 8013c26:	f000 811f 	beq.w	8013e68 <tcp_output+0x38c>
    for (; useg->next != NULL; useg = useg->next);
 8013c2a:	e002      	b.n	8013c32 <tcp_output+0x156>
 8013c2c:	6a3b      	ldr	r3, [r7, #32]
 8013c2e:	681b      	ldr	r3, [r3, #0]
 8013c30:	623b      	str	r3, [r7, #32]
 8013c32:	6a3b      	ldr	r3, [r7, #32]
 8013c34:	681b      	ldr	r3, [r3, #0]
 8013c36:	2b00      	cmp	r3, #0
 8013c38:	d1f8      	bne.n	8013c2c <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8013c3a:	e115      	b.n	8013e68 <tcp_output+0x38c>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8013c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c3e:	691b      	ldr	r3, [r3, #16]
 8013c40:	899b      	ldrh	r3, [r3, #12]
 8013c42:	b29b      	uxth	r3, r3
 8013c44:	4618      	mov	r0, r3
 8013c46:	f7f9 fbe5 	bl	800d414 <lwip_htons>
 8013c4a:	4603      	mov	r3, r0
 8013c4c:	b2db      	uxtb	r3, r3
 8013c4e:	f003 0304 	and.w	r3, r3, #4
 8013c52:	2b00      	cmp	r3, #0
 8013c54:	d006      	beq.n	8013c64 <tcp_output+0x188>
 8013c56:	4b2f      	ldr	r3, [pc, #188]	; (8013d14 <tcp_output+0x238>)
 8013c58:	f240 5236 	movw	r2, #1334	; 0x536
 8013c5c:	4932      	ldr	r1, [pc, #200]	; (8013d28 <tcp_output+0x24c>)
 8013c5e:	482f      	ldr	r0, [pc, #188]	; (8013d1c <tcp_output+0x240>)
 8013c60:	f007 f8b6 	bl	801add0 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8013c64:	687b      	ldr	r3, [r7, #4]
 8013c66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013c68:	2b00      	cmp	r3, #0
 8013c6a:	d01f      	beq.n	8013cac <tcp_output+0x1d0>
 8013c6c:	687b      	ldr	r3, [r7, #4]
 8013c6e:	8b5b      	ldrh	r3, [r3, #26]
 8013c70:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8013c74:	2b00      	cmp	r3, #0
 8013c76:	d119      	bne.n	8013cac <tcp_output+0x1d0>
 8013c78:	687b      	ldr	r3, [r7, #4]
 8013c7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013c7c:	2b00      	cmp	r3, #0
 8013c7e:	d00b      	beq.n	8013c98 <tcp_output+0x1bc>
 8013c80:	687b      	ldr	r3, [r7, #4]
 8013c82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013c84:	681b      	ldr	r3, [r3, #0]
 8013c86:	2b00      	cmp	r3, #0
 8013c88:	d110      	bne.n	8013cac <tcp_output+0x1d0>
 8013c8a:	687b      	ldr	r3, [r7, #4]
 8013c8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013c8e:	891a      	ldrh	r2, [r3, #8]
 8013c90:	687b      	ldr	r3, [r7, #4]
 8013c92:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013c94:	429a      	cmp	r2, r3
 8013c96:	d209      	bcs.n	8013cac <tcp_output+0x1d0>
 8013c98:	687b      	ldr	r3, [r7, #4]
 8013c9a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8013c9e:	2b00      	cmp	r3, #0
 8013ca0:	d004      	beq.n	8013cac <tcp_output+0x1d0>
 8013ca2:	687b      	ldr	r3, [r7, #4]
 8013ca4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013ca8:	2b0f      	cmp	r3, #15
 8013caa:	d901      	bls.n	8013cb0 <tcp_output+0x1d4>
 8013cac:	2301      	movs	r3, #1
 8013cae:	e000      	b.n	8013cb2 <tcp_output+0x1d6>
 8013cb0:	2300      	movs	r3, #0
 8013cb2:	2b00      	cmp	r3, #0
 8013cb4:	d106      	bne.n	8013cc4 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8013cb6:	687b      	ldr	r3, [r7, #4]
 8013cb8:	8b5b      	ldrh	r3, [r3, #26]
 8013cba:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8013cbe:	2b00      	cmp	r3, #0
 8013cc0:	f000 80e7 	beq.w	8013e92 <tcp_output+0x3b6>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8013cc4:	687b      	ldr	r3, [r7, #4]
 8013cc6:	7d1b      	ldrb	r3, [r3, #20]
 8013cc8:	2b02      	cmp	r3, #2
 8013cca:	d00d      	beq.n	8013ce8 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8013ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013cce:	691b      	ldr	r3, [r3, #16]
 8013cd0:	899b      	ldrh	r3, [r3, #12]
 8013cd2:	b29c      	uxth	r4, r3
 8013cd4:	2010      	movs	r0, #16
 8013cd6:	f7f9 fb9d 	bl	800d414 <lwip_htons>
 8013cda:	4603      	mov	r3, r0
 8013cdc:	461a      	mov	r2, r3
 8013cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ce0:	691b      	ldr	r3, [r3, #16]
 8013ce2:	4322      	orrs	r2, r4
 8013ce4:	b292      	uxth	r2, r2
 8013ce6:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8013ce8:	697a      	ldr	r2, [r7, #20]
 8013cea:	6879      	ldr	r1, [r7, #4]
 8013cec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013cee:	f000 f90b 	bl	8013f08 <tcp_output_segment>
 8013cf2:	4603      	mov	r3, r0
 8013cf4:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8013cf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013cfa:	2b00      	cmp	r3, #0
 8013cfc:	d016      	beq.n	8013d2c <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013cfe:	687b      	ldr	r3, [r7, #4]
 8013d00:	8b5b      	ldrh	r3, [r3, #26]
 8013d02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013d06:	b29a      	uxth	r2, r3
 8013d08:	687b      	ldr	r3, [r7, #4]
 8013d0a:	835a      	strh	r2, [r3, #26]
      return err;
 8013d0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013d10:	e0d6      	b.n	8013ec0 <tcp_output+0x3e4>
 8013d12:	bf00      	nop
 8013d14:	0801f2e4 	.word	0x0801f2e4
 8013d18:	0801f884 	.word	0x0801f884
 8013d1c:	0801f338 	.word	0x0801f338
 8013d20:	0801f89c 	.word	0x0801f89c
 8013d24:	20013d28 	.word	0x20013d28
 8013d28:	0801f8c4 	.word	0x0801f8c4
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
 8013d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d2e:	2200      	movs	r2, #0
 8013d30:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8013d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d34:	681a      	ldr	r2, [r3, #0]
 8013d36:	687b      	ldr	r3, [r7, #4]
 8013d38:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8013d3a:	687b      	ldr	r3, [r7, #4]
 8013d3c:	7d1b      	ldrb	r3, [r3, #20]
 8013d3e:	2b02      	cmp	r3, #2
 8013d40:	d006      	beq.n	8013d50 <tcp_output+0x274>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013d42:	687b      	ldr	r3, [r7, #4]
 8013d44:	8b5b      	ldrh	r3, [r3, #26]
 8013d46:	f023 0303 	bic.w	r3, r3, #3
 8013d4a:	b29a      	uxth	r2, r3
 8013d4c:	687b      	ldr	r3, [r7, #4]
 8013d4e:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8013d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d52:	691b      	ldr	r3, [r3, #16]
 8013d54:	685b      	ldr	r3, [r3, #4]
 8013d56:	4618      	mov	r0, r3
 8013d58:	f7f9 fb71 	bl	800d43e <lwip_htonl>
 8013d5c:	4604      	mov	r4, r0
 8013d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d60:	891b      	ldrh	r3, [r3, #8]
 8013d62:	461d      	mov	r5, r3
 8013d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d66:	691b      	ldr	r3, [r3, #16]
 8013d68:	899b      	ldrh	r3, [r3, #12]
 8013d6a:	b29b      	uxth	r3, r3
 8013d6c:	4618      	mov	r0, r3
 8013d6e:	f7f9 fb51 	bl	800d414 <lwip_htons>
 8013d72:	4603      	mov	r3, r0
 8013d74:	b2db      	uxtb	r3, r3
 8013d76:	f003 0303 	and.w	r3, r3, #3
 8013d7a:	2b00      	cmp	r3, #0
 8013d7c:	d001      	beq.n	8013d82 <tcp_output+0x2a6>
 8013d7e:	2301      	movs	r3, #1
 8013d80:	e000      	b.n	8013d84 <tcp_output+0x2a8>
 8013d82:	2300      	movs	r3, #0
 8013d84:	442b      	add	r3, r5
 8013d86:	4423      	add	r3, r4
 8013d88:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8013d8a:	687b      	ldr	r3, [r7, #4]
 8013d8c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013d8e:	68bb      	ldr	r3, [r7, #8]
 8013d90:	1ad3      	subs	r3, r2, r3
 8013d92:	2b00      	cmp	r3, #0
 8013d94:	da02      	bge.n	8013d9c <tcp_output+0x2c0>
      pcb->snd_nxt = snd_nxt;
 8013d96:	687b      	ldr	r3, [r7, #4]
 8013d98:	68ba      	ldr	r2, [r7, #8]
 8013d9a:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8013d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d9e:	891b      	ldrh	r3, [r3, #8]
 8013da0:	461c      	mov	r4, r3
 8013da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013da4:	691b      	ldr	r3, [r3, #16]
 8013da6:	899b      	ldrh	r3, [r3, #12]
 8013da8:	b29b      	uxth	r3, r3
 8013daa:	4618      	mov	r0, r3
 8013dac:	f7f9 fb32 	bl	800d414 <lwip_htons>
 8013db0:	4603      	mov	r3, r0
 8013db2:	b2db      	uxtb	r3, r3
 8013db4:	f003 0303 	and.w	r3, r3, #3
 8013db8:	2b00      	cmp	r3, #0
 8013dba:	d001      	beq.n	8013dc0 <tcp_output+0x2e4>
 8013dbc:	2301      	movs	r3, #1
 8013dbe:	e000      	b.n	8013dc2 <tcp_output+0x2e6>
 8013dc0:	2300      	movs	r3, #0
 8013dc2:	4423      	add	r3, r4
 8013dc4:	2b00      	cmp	r3, #0
 8013dc6:	d049      	beq.n	8013e5c <tcp_output+0x380>
      seg->next = NULL;
 8013dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013dca:	2200      	movs	r2, #0
 8013dcc:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8013dce:	687b      	ldr	r3, [r7, #4]
 8013dd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013dd2:	2b00      	cmp	r3, #0
 8013dd4:	d105      	bne.n	8013de2 <tcp_output+0x306>
        pcb->unacked = seg;
 8013dd6:	687b      	ldr	r3, [r7, #4]
 8013dd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013dda:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8013ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013dde:	623b      	str	r3, [r7, #32]
 8013de0:	e03f      	b.n	8013e62 <tcp_output+0x386>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8013de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013de4:	691b      	ldr	r3, [r3, #16]
 8013de6:	685b      	ldr	r3, [r3, #4]
 8013de8:	4618      	mov	r0, r3
 8013dea:	f7f9 fb28 	bl	800d43e <lwip_htonl>
 8013dee:	4604      	mov	r4, r0
 8013df0:	6a3b      	ldr	r3, [r7, #32]
 8013df2:	691b      	ldr	r3, [r3, #16]
 8013df4:	685b      	ldr	r3, [r3, #4]
 8013df6:	4618      	mov	r0, r3
 8013df8:	f7f9 fb21 	bl	800d43e <lwip_htonl>
 8013dfc:	4603      	mov	r3, r0
 8013dfe:	1ae3      	subs	r3, r4, r3
 8013e00:	2b00      	cmp	r3, #0
 8013e02:	da24      	bge.n	8013e4e <tcp_output+0x372>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8013e04:	687b      	ldr	r3, [r7, #4]
 8013e06:	3370      	adds	r3, #112	; 0x70
 8013e08:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8013e0a:	e002      	b.n	8013e12 <tcp_output+0x336>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8013e0c:	69fb      	ldr	r3, [r7, #28]
 8013e0e:	681b      	ldr	r3, [r3, #0]
 8013e10:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8013e12:	69fb      	ldr	r3, [r7, #28]
 8013e14:	681b      	ldr	r3, [r3, #0]
 8013e16:	2b00      	cmp	r3, #0
 8013e18:	d011      	beq.n	8013e3e <tcp_output+0x362>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8013e1a:	69fb      	ldr	r3, [r7, #28]
 8013e1c:	681b      	ldr	r3, [r3, #0]
 8013e1e:	691b      	ldr	r3, [r3, #16]
 8013e20:	685b      	ldr	r3, [r3, #4]
 8013e22:	4618      	mov	r0, r3
 8013e24:	f7f9 fb0b 	bl	800d43e <lwip_htonl>
 8013e28:	4604      	mov	r4, r0
 8013e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e2c:	691b      	ldr	r3, [r3, #16]
 8013e2e:	685b      	ldr	r3, [r3, #4]
 8013e30:	4618      	mov	r0, r3
 8013e32:	f7f9 fb04 	bl	800d43e <lwip_htonl>
 8013e36:	4603      	mov	r3, r0
 8013e38:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8013e3a:	2b00      	cmp	r3, #0
 8013e3c:	dbe6      	blt.n	8013e0c <tcp_output+0x330>
          }
          seg->next = (*cur_seg);
 8013e3e:	69fb      	ldr	r3, [r7, #28]
 8013e40:	681a      	ldr	r2, [r3, #0]
 8013e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e44:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8013e46:	69fb      	ldr	r3, [r7, #28]
 8013e48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013e4a:	601a      	str	r2, [r3, #0]
 8013e4c:	e009      	b.n	8013e62 <tcp_output+0x386>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8013e4e:	6a3b      	ldr	r3, [r7, #32]
 8013e50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013e52:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8013e54:	6a3b      	ldr	r3, [r7, #32]
 8013e56:	681b      	ldr	r3, [r3, #0]
 8013e58:	623b      	str	r3, [r7, #32]
 8013e5a:	e002      	b.n	8013e62 <tcp_output+0x386>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8013e5c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013e5e:	f7fc fc22 	bl	80106a6 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8013e62:	687b      	ldr	r3, [r7, #4]
 8013e64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013e66:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8013e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e6a:	2b00      	cmp	r3, #0
 8013e6c:	d012      	beq.n	8013e94 <tcp_output+0x3b8>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8013e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e70:	691b      	ldr	r3, [r3, #16]
 8013e72:	685b      	ldr	r3, [r3, #4]
 8013e74:	4618      	mov	r0, r3
 8013e76:	f7f9 fae2 	bl	800d43e <lwip_htonl>
 8013e7a:	4602      	mov	r2, r0
 8013e7c:	687b      	ldr	r3, [r7, #4]
 8013e7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013e80:	1ad3      	subs	r3, r2, r3
 8013e82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013e84:	8912      	ldrh	r2, [r2, #8]
 8013e86:	4413      	add	r3, r2
  while (seg != NULL &&
 8013e88:	69ba      	ldr	r2, [r7, #24]
 8013e8a:	429a      	cmp	r2, r3
 8013e8c:	f4bf aed6 	bcs.w	8013c3c <tcp_output+0x160>
 8013e90:	e000      	b.n	8013e94 <tcp_output+0x3b8>
      break;
 8013e92:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8013e94:	687b      	ldr	r3, [r7, #4]
 8013e96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013e98:	2b00      	cmp	r3, #0
 8013e9a:	d108      	bne.n	8013eae <tcp_output+0x3d2>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8013e9c:	687b      	ldr	r3, [r7, #4]
 8013e9e:	2200      	movs	r2, #0
 8013ea0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8013ea4:	e004      	b.n	8013eb0 <tcp_output+0x3d4>
    goto output_done;
 8013ea6:	bf00      	nop
 8013ea8:	e002      	b.n	8013eb0 <tcp_output+0x3d4>
    goto output_done;
 8013eaa:	bf00      	nop
 8013eac:	e000      	b.n	8013eb0 <tcp_output+0x3d4>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8013eae:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8013eb0:	687b      	ldr	r3, [r7, #4]
 8013eb2:	8b5b      	ldrh	r3, [r3, #26]
 8013eb4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8013eb8:	b29a      	uxth	r2, r3
 8013eba:	687b      	ldr	r3, [r7, #4]
 8013ebc:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8013ebe:	2300      	movs	r3, #0
}
 8013ec0:	4618      	mov	r0, r3
 8013ec2:	3728      	adds	r7, #40	; 0x28
 8013ec4:	46bd      	mov	sp, r7
 8013ec6:	bdb0      	pop	{r4, r5, r7, pc}

08013ec8 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8013ec8:	b580      	push	{r7, lr}
 8013eca:	b082      	sub	sp, #8
 8013ecc:	af00      	add	r7, sp, #0
 8013ece:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8013ed0:	687b      	ldr	r3, [r7, #4]
 8013ed2:	2b00      	cmp	r3, #0
 8013ed4:	d106      	bne.n	8013ee4 <tcp_output_segment_busy+0x1c>
 8013ed6:	4b09      	ldr	r3, [pc, #36]	; (8013efc <tcp_output_segment_busy+0x34>)
 8013ed8:	f240 529a 	movw	r2, #1434	; 0x59a
 8013edc:	4908      	ldr	r1, [pc, #32]	; (8013f00 <tcp_output_segment_busy+0x38>)
 8013ede:	4809      	ldr	r0, [pc, #36]	; (8013f04 <tcp_output_segment_busy+0x3c>)
 8013ee0:	f006 ff76 	bl	801add0 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8013ee4:	687b      	ldr	r3, [r7, #4]
 8013ee6:	685b      	ldr	r3, [r3, #4]
 8013ee8:	7b9b      	ldrb	r3, [r3, #14]
 8013eea:	2b01      	cmp	r3, #1
 8013eec:	d001      	beq.n	8013ef2 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8013eee:	2301      	movs	r3, #1
 8013ef0:	e000      	b.n	8013ef4 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8013ef2:	2300      	movs	r3, #0
}
 8013ef4:	4618      	mov	r0, r3
 8013ef6:	3708      	adds	r7, #8
 8013ef8:	46bd      	mov	sp, r7
 8013efa:	bd80      	pop	{r7, pc}
 8013efc:	0801f2e4 	.word	0x0801f2e4
 8013f00:	0801f8dc 	.word	0x0801f8dc
 8013f04:	0801f338 	.word	0x0801f338

08013f08 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8013f08:	b5b0      	push	{r4, r5, r7, lr}
 8013f0a:	b08c      	sub	sp, #48	; 0x30
 8013f0c:	af04      	add	r7, sp, #16
 8013f0e:	60f8      	str	r0, [r7, #12]
 8013f10:	60b9      	str	r1, [r7, #8]
 8013f12:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8013f14:	68fb      	ldr	r3, [r7, #12]
 8013f16:	2b00      	cmp	r3, #0
 8013f18:	d106      	bne.n	8013f28 <tcp_output_segment+0x20>
 8013f1a:	4b6c      	ldr	r3, [pc, #432]	; (80140cc <tcp_output_segment+0x1c4>)
 8013f1c:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8013f20:	496b      	ldr	r1, [pc, #428]	; (80140d0 <tcp_output_segment+0x1c8>)
 8013f22:	486c      	ldr	r0, [pc, #432]	; (80140d4 <tcp_output_segment+0x1cc>)
 8013f24:	f006 ff54 	bl	801add0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8013f28:	68bb      	ldr	r3, [r7, #8]
 8013f2a:	2b00      	cmp	r3, #0
 8013f2c:	d106      	bne.n	8013f3c <tcp_output_segment+0x34>
 8013f2e:	4b67      	ldr	r3, [pc, #412]	; (80140cc <tcp_output_segment+0x1c4>)
 8013f30:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8013f34:	4968      	ldr	r1, [pc, #416]	; (80140d8 <tcp_output_segment+0x1d0>)
 8013f36:	4867      	ldr	r0, [pc, #412]	; (80140d4 <tcp_output_segment+0x1cc>)
 8013f38:	f006 ff4a 	bl	801add0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8013f3c:	687b      	ldr	r3, [r7, #4]
 8013f3e:	2b00      	cmp	r3, #0
 8013f40:	d106      	bne.n	8013f50 <tcp_output_segment+0x48>
 8013f42:	4b62      	ldr	r3, [pc, #392]	; (80140cc <tcp_output_segment+0x1c4>)
 8013f44:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8013f48:	4964      	ldr	r1, [pc, #400]	; (80140dc <tcp_output_segment+0x1d4>)
 8013f4a:	4862      	ldr	r0, [pc, #392]	; (80140d4 <tcp_output_segment+0x1cc>)
 8013f4c:	f006 ff40 	bl	801add0 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8013f50:	68f8      	ldr	r0, [r7, #12]
 8013f52:	f7ff ffb9 	bl	8013ec8 <tcp_output_segment_busy>
 8013f56:	4603      	mov	r3, r0
 8013f58:	2b00      	cmp	r3, #0
 8013f5a:	d001      	beq.n	8013f60 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8013f5c:	2300      	movs	r3, #0
 8013f5e:	e0b1      	b.n	80140c4 <tcp_output_segment+0x1bc>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8013f60:	68bb      	ldr	r3, [r7, #8]
 8013f62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013f64:	68fb      	ldr	r3, [r7, #12]
 8013f66:	691c      	ldr	r4, [r3, #16]
 8013f68:	4610      	mov	r0, r2
 8013f6a:	f7f9 fa68 	bl	800d43e <lwip_htonl>
 8013f6e:	4603      	mov	r3, r0
 8013f70:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8013f72:	68bb      	ldr	r3, [r7, #8]
 8013f74:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8013f76:	68fb      	ldr	r3, [r7, #12]
 8013f78:	691c      	ldr	r4, [r3, #16]
 8013f7a:	4610      	mov	r0, r2
 8013f7c:	f7f9 fa4a 	bl	800d414 <lwip_htons>
 8013f80:	4603      	mov	r3, r0
 8013f82:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8013f84:	68bb      	ldr	r3, [r7, #8]
 8013f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013f88:	68ba      	ldr	r2, [r7, #8]
 8013f8a:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8013f8c:	441a      	add	r2, r3
 8013f8e:	68bb      	ldr	r3, [r7, #8]
 8013f90:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8013f92:	68fb      	ldr	r3, [r7, #12]
 8013f94:	691b      	ldr	r3, [r3, #16]
 8013f96:	3314      	adds	r3, #20
 8013f98:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8013f9a:	68fb      	ldr	r3, [r7, #12]
 8013f9c:	7b1b      	ldrb	r3, [r3, #12]
 8013f9e:	f003 0301 	and.w	r3, r3, #1
 8013fa2:	2b00      	cmp	r3, #0
 8013fa4:	d015      	beq.n	8013fd2 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8013fa6:	68bb      	ldr	r3, [r7, #8]
 8013fa8:	3304      	adds	r3, #4
 8013faa:	461a      	mov	r2, r3
 8013fac:	6879      	ldr	r1, [r7, #4]
 8013fae:	f240 50b4 	movw	r0, #1460	; 0x5b4
 8013fb2:	f7fc fe6f 	bl	8010c94 <tcp_eff_send_mss_netif>
 8013fb6:	4603      	mov	r3, r0
 8013fb8:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8013fba:	8b7b      	ldrh	r3, [r7, #26]
 8013fbc:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8013fc0:	4618      	mov	r0, r3
 8013fc2:	f7f9 fa3c 	bl	800d43e <lwip_htonl>
 8013fc6:	4602      	mov	r2, r0
 8013fc8:	69fb      	ldr	r3, [r7, #28]
 8013fca:	601a      	str	r2, [r3, #0]
    opts += 1;
 8013fcc:	69fb      	ldr	r3, [r7, #28]
 8013fce:	3304      	adds	r3, #4
 8013fd0:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8013fd2:	68bb      	ldr	r3, [r7, #8]
 8013fd4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8013fd8:	2b00      	cmp	r3, #0
 8013fda:	da02      	bge.n	8013fe2 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8013fdc:	68bb      	ldr	r3, [r7, #8]
 8013fde:	2200      	movs	r2, #0
 8013fe0:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8013fe2:	68bb      	ldr	r3, [r7, #8]
 8013fe4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013fe6:	2b00      	cmp	r3, #0
 8013fe8:	d10c      	bne.n	8014004 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8013fea:	4b3d      	ldr	r3, [pc, #244]	; (80140e0 <tcp_output_segment+0x1d8>)
 8013fec:	681a      	ldr	r2, [r3, #0]
 8013fee:	68bb      	ldr	r3, [r7, #8]
 8013ff0:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8013ff2:	68fb      	ldr	r3, [r7, #12]
 8013ff4:	691b      	ldr	r3, [r3, #16]
 8013ff6:	685b      	ldr	r3, [r3, #4]
 8013ff8:	4618      	mov	r0, r3
 8013ffa:	f7f9 fa20 	bl	800d43e <lwip_htonl>
 8013ffe:	4602      	mov	r2, r0
 8014000:	68bb      	ldr	r3, [r7, #8]
 8014002:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8014004:	68fb      	ldr	r3, [r7, #12]
 8014006:	691a      	ldr	r2, [r3, #16]
 8014008:	68fb      	ldr	r3, [r7, #12]
 801400a:	685b      	ldr	r3, [r3, #4]
 801400c:	685b      	ldr	r3, [r3, #4]
 801400e:	1ad3      	subs	r3, r2, r3
 8014010:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8014012:	68fb      	ldr	r3, [r7, #12]
 8014014:	685b      	ldr	r3, [r3, #4]
 8014016:	8959      	ldrh	r1, [r3, #10]
 8014018:	68fb      	ldr	r3, [r7, #12]
 801401a:	685b      	ldr	r3, [r3, #4]
 801401c:	8b3a      	ldrh	r2, [r7, #24]
 801401e:	1a8a      	subs	r2, r1, r2
 8014020:	b292      	uxth	r2, r2
 8014022:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8014024:	68fb      	ldr	r3, [r7, #12]
 8014026:	685b      	ldr	r3, [r3, #4]
 8014028:	8919      	ldrh	r1, [r3, #8]
 801402a:	68fb      	ldr	r3, [r7, #12]
 801402c:	685b      	ldr	r3, [r3, #4]
 801402e:	8b3a      	ldrh	r2, [r7, #24]
 8014030:	1a8a      	subs	r2, r1, r2
 8014032:	b292      	uxth	r2, r2
 8014034:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8014036:	68fb      	ldr	r3, [r7, #12]
 8014038:	685b      	ldr	r3, [r3, #4]
 801403a:	68fa      	ldr	r2, [r7, #12]
 801403c:	6912      	ldr	r2, [r2, #16]
 801403e:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8014040:	68fb      	ldr	r3, [r7, #12]
 8014042:	691b      	ldr	r3, [r3, #16]
 8014044:	2200      	movs	r2, #0
 8014046:	741a      	strb	r2, [r3, #16]
 8014048:	2200      	movs	r2, #0
 801404a:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 801404c:	68fb      	ldr	r3, [r7, #12]
 801404e:	691b      	ldr	r3, [r3, #16]
 8014050:	f103 0214 	add.w	r2, r3, #20
 8014054:	68fb      	ldr	r3, [r7, #12]
 8014056:	7b1b      	ldrb	r3, [r3, #12]
 8014058:	009b      	lsls	r3, r3, #2
 801405a:	f003 0304 	and.w	r3, r3, #4
 801405e:	4413      	add	r3, r2
 8014060:	69fa      	ldr	r2, [r7, #28]
 8014062:	429a      	cmp	r2, r3
 8014064:	d006      	beq.n	8014074 <tcp_output_segment+0x16c>
 8014066:	4b19      	ldr	r3, [pc, #100]	; (80140cc <tcp_output_segment+0x1c4>)
 8014068:	f240 621c 	movw	r2, #1564	; 0x61c
 801406c:	491d      	ldr	r1, [pc, #116]	; (80140e4 <tcp_output_segment+0x1dc>)
 801406e:	4819      	ldr	r0, [pc, #100]	; (80140d4 <tcp_output_segment+0x1cc>)
 8014070:	f006 feae 	bl	801add0 <iprintf>
         seg->tcphdr->chksum, chksum_slow));
      seg->tcphdr->chksum = chksum_slow;
    }
#endif /* TCP_CHECKSUM_ON_COPY_SANITY_CHECK */
#else /* TCP_CHECKSUM_ON_COPY */
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 8014074:	68fb      	ldr	r3, [r7, #12]
 8014076:	6858      	ldr	r0, [r3, #4]
                                           seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
 8014078:	68fb      	ldr	r3, [r7, #12]
 801407a:	685b      	ldr	r3, [r3, #4]
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 801407c:	8919      	ldrh	r1, [r3, #8]
                                           seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
 801407e:	68bd      	ldr	r5, [r7, #8]
 8014080:	68bb      	ldr	r3, [r7, #8]
 8014082:	3304      	adds	r3, #4
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 8014084:	68fa      	ldr	r2, [r7, #12]
 8014086:	6914      	ldr	r4, [r2, #16]
 8014088:	9300      	str	r3, [sp, #0]
 801408a:	462b      	mov	r3, r5
 801408c:	460a      	mov	r2, r1
 801408e:	2106      	movs	r1, #6
 8014090:	f7f9 faf2 	bl	800d678 <ip_chksum_pseudo>
 8014094:	4603      	mov	r3, r0
 8014096:	8223      	strh	r3, [r4, #16]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8014098:	68fb      	ldr	r3, [r7, #12]
 801409a:	6858      	ldr	r0, [r3, #4]
 801409c:	68b9      	ldr	r1, [r7, #8]
 801409e:	68bb      	ldr	r3, [r7, #8]
 80140a0:	1d1c      	adds	r4, r3, #4
 80140a2:	68bb      	ldr	r3, [r7, #8]
 80140a4:	7add      	ldrb	r5, [r3, #11]
 80140a6:	68bb      	ldr	r3, [r7, #8]
 80140a8:	7a9b      	ldrb	r3, [r3, #10]
 80140aa:	687a      	ldr	r2, [r7, #4]
 80140ac:	9202      	str	r2, [sp, #8]
 80140ae:	2206      	movs	r2, #6
 80140b0:	9201      	str	r2, [sp, #4]
 80140b2:	9300      	str	r3, [sp, #0]
 80140b4:	462b      	mov	r3, r5
 80140b6:	4622      	mov	r2, r4
 80140b8:	f004 fde6 	bl	8018c88 <ip4_output_if>
 80140bc:	4603      	mov	r3, r0
 80140be:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 80140c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80140c4:	4618      	mov	r0, r3
 80140c6:	3720      	adds	r7, #32
 80140c8:	46bd      	mov	sp, r7
 80140ca:	bdb0      	pop	{r4, r5, r7, pc}
 80140cc:	0801f2e4 	.word	0x0801f2e4
 80140d0:	0801f904 	.word	0x0801f904
 80140d4:	0801f338 	.word	0x0801f338
 80140d8:	0801f924 	.word	0x0801f924
 80140dc:	0801f944 	.word	0x0801f944
 80140e0:	20013cd8 	.word	0x20013cd8
 80140e4:	0801f968 	.word	0x0801f968

080140e8 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 80140e8:	b5b0      	push	{r4, r5, r7, lr}
 80140ea:	b084      	sub	sp, #16
 80140ec:	af00      	add	r7, sp, #0
 80140ee:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 80140f0:	687b      	ldr	r3, [r7, #4]
 80140f2:	2b00      	cmp	r3, #0
 80140f4:	d106      	bne.n	8014104 <tcp_rexmit_rto_prepare+0x1c>
 80140f6:	4b36      	ldr	r3, [pc, #216]	; (80141d0 <tcp_rexmit_rto_prepare+0xe8>)
 80140f8:	f240 6263 	movw	r2, #1635	; 0x663
 80140fc:	4935      	ldr	r1, [pc, #212]	; (80141d4 <tcp_rexmit_rto_prepare+0xec>)
 80140fe:	4836      	ldr	r0, [pc, #216]	; (80141d8 <tcp_rexmit_rto_prepare+0xf0>)
 8014100:	f006 fe66 	bl	801add0 <iprintf>

  if (pcb->unacked == NULL) {
 8014104:	687b      	ldr	r3, [r7, #4]
 8014106:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014108:	2b00      	cmp	r3, #0
 801410a:	d102      	bne.n	8014112 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 801410c:	f06f 0305 	mvn.w	r3, #5
 8014110:	e059      	b.n	80141c6 <tcp_rexmit_rto_prepare+0xde>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8014112:	687b      	ldr	r3, [r7, #4]
 8014114:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014116:	60fb      	str	r3, [r7, #12]
 8014118:	e00b      	b.n	8014132 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801411a:	68f8      	ldr	r0, [r7, #12]
 801411c:	f7ff fed4 	bl	8013ec8 <tcp_output_segment_busy>
 8014120:	4603      	mov	r3, r0
 8014122:	2b00      	cmp	r3, #0
 8014124:	d002      	beq.n	801412c <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8014126:	f06f 0305 	mvn.w	r3, #5
 801412a:	e04c      	b.n	80141c6 <tcp_rexmit_rto_prepare+0xde>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801412c:	68fb      	ldr	r3, [r7, #12]
 801412e:	681b      	ldr	r3, [r3, #0]
 8014130:	60fb      	str	r3, [r7, #12]
 8014132:	68fb      	ldr	r3, [r7, #12]
 8014134:	681b      	ldr	r3, [r3, #0]
 8014136:	2b00      	cmp	r3, #0
 8014138:	d1ef      	bne.n	801411a <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801413a:	68f8      	ldr	r0, [r7, #12]
 801413c:	f7ff fec4 	bl	8013ec8 <tcp_output_segment_busy>
 8014140:	4603      	mov	r3, r0
 8014142:	2b00      	cmp	r3, #0
 8014144:	d002      	beq.n	801414c <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8014146:	f06f 0305 	mvn.w	r3, #5
 801414a:	e03c      	b.n	80141c6 <tcp_rexmit_rto_prepare+0xde>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 801414c:	687b      	ldr	r3, [r7, #4]
 801414e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8014150:	68fb      	ldr	r3, [r7, #12]
 8014152:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE_DBGCHECK
  /* if last unsent changed, we need to update unsent_oversize */
  if (pcb->unsent == NULL) {
 8014154:	687b      	ldr	r3, [r7, #4]
 8014156:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014158:	2b00      	cmp	r3, #0
 801415a:	d104      	bne.n	8014166 <tcp_rexmit_rto_prepare+0x7e>
    pcb->unsent_oversize = seg->oversize_left;
 801415c:	68fb      	ldr	r3, [r7, #12]
 801415e:	895a      	ldrh	r2, [r3, #10]
 8014160:	687b      	ldr	r3, [r7, #4]
 8014162:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8014166:	687b      	ldr	r3, [r7, #4]
 8014168:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801416a:	687b      	ldr	r3, [r7, #4]
 801416c:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 801416e:	687b      	ldr	r3, [r7, #4]
 8014170:	2200      	movs	r2, #0
 8014172:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8014174:	687b      	ldr	r3, [r7, #4]
 8014176:	8b5b      	ldrh	r3, [r3, #26]
 8014178:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801417c:	b29a      	uxth	r2, r3
 801417e:	687b      	ldr	r3, [r7, #4]
 8014180:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8014182:	68fb      	ldr	r3, [r7, #12]
 8014184:	691b      	ldr	r3, [r3, #16]
 8014186:	685b      	ldr	r3, [r3, #4]
 8014188:	4618      	mov	r0, r3
 801418a:	f7f9 f958 	bl	800d43e <lwip_htonl>
 801418e:	4604      	mov	r4, r0
 8014190:	68fb      	ldr	r3, [r7, #12]
 8014192:	891b      	ldrh	r3, [r3, #8]
 8014194:	461d      	mov	r5, r3
 8014196:	68fb      	ldr	r3, [r7, #12]
 8014198:	691b      	ldr	r3, [r3, #16]
 801419a:	899b      	ldrh	r3, [r3, #12]
 801419c:	b29b      	uxth	r3, r3
 801419e:	4618      	mov	r0, r3
 80141a0:	f7f9 f938 	bl	800d414 <lwip_htons>
 80141a4:	4603      	mov	r3, r0
 80141a6:	b2db      	uxtb	r3, r3
 80141a8:	f003 0303 	and.w	r3, r3, #3
 80141ac:	2b00      	cmp	r3, #0
 80141ae:	d001      	beq.n	80141b4 <tcp_rexmit_rto_prepare+0xcc>
 80141b0:	2301      	movs	r3, #1
 80141b2:	e000      	b.n	80141b6 <tcp_rexmit_rto_prepare+0xce>
 80141b4:	2300      	movs	r3, #0
 80141b6:	442b      	add	r3, r5
 80141b8:	18e2      	adds	r2, r4, r3
 80141ba:	687b      	ldr	r3, [r7, #4]
 80141bc:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 80141be:	687b      	ldr	r3, [r7, #4]
 80141c0:	2200      	movs	r2, #0
 80141c2:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 80141c4:	2300      	movs	r3, #0
}
 80141c6:	4618      	mov	r0, r3
 80141c8:	3710      	adds	r7, #16
 80141ca:	46bd      	mov	sp, r7
 80141cc:	bdb0      	pop	{r4, r5, r7, pc}
 80141ce:	bf00      	nop
 80141d0:	0801f2e4 	.word	0x0801f2e4
 80141d4:	0801f97c 	.word	0x0801f97c
 80141d8:	0801f338 	.word	0x0801f338

080141dc <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 80141dc:	b580      	push	{r7, lr}
 80141de:	b082      	sub	sp, #8
 80141e0:	af00      	add	r7, sp, #0
 80141e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 80141e4:	687b      	ldr	r3, [r7, #4]
 80141e6:	2b00      	cmp	r3, #0
 80141e8:	d106      	bne.n	80141f8 <tcp_rexmit_rto_commit+0x1c>
 80141ea:	4b0d      	ldr	r3, [pc, #52]	; (8014220 <tcp_rexmit_rto_commit+0x44>)
 80141ec:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80141f0:	490c      	ldr	r1, [pc, #48]	; (8014224 <tcp_rexmit_rto_commit+0x48>)
 80141f2:	480d      	ldr	r0, [pc, #52]	; (8014228 <tcp_rexmit_rto_commit+0x4c>)
 80141f4:	f006 fdec 	bl	801add0 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 80141f8:	687b      	ldr	r3, [r7, #4]
 80141fa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80141fe:	2bff      	cmp	r3, #255	; 0xff
 8014200:	d007      	beq.n	8014212 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8014202:	687b      	ldr	r3, [r7, #4]
 8014204:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8014208:	3301      	adds	r3, #1
 801420a:	b2da      	uxtb	r2, r3
 801420c:	687b      	ldr	r3, [r7, #4]
 801420e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8014212:	6878      	ldr	r0, [r7, #4]
 8014214:	f7ff fc62 	bl	8013adc <tcp_output>
}
 8014218:	bf00      	nop
 801421a:	3708      	adds	r7, #8
 801421c:	46bd      	mov	sp, r7
 801421e:	bd80      	pop	{r7, pc}
 8014220:	0801f2e4 	.word	0x0801f2e4
 8014224:	0801f9a0 	.word	0x0801f9a0
 8014228:	0801f338 	.word	0x0801f338

0801422c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 801422c:	b580      	push	{r7, lr}
 801422e:	b082      	sub	sp, #8
 8014230:	af00      	add	r7, sp, #0
 8014232:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8014234:	687b      	ldr	r3, [r7, #4]
 8014236:	2b00      	cmp	r3, #0
 8014238:	d106      	bne.n	8014248 <tcp_rexmit_rto+0x1c>
 801423a:	4b0a      	ldr	r3, [pc, #40]	; (8014264 <tcp_rexmit_rto+0x38>)
 801423c:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8014240:	4909      	ldr	r1, [pc, #36]	; (8014268 <tcp_rexmit_rto+0x3c>)
 8014242:	480a      	ldr	r0, [pc, #40]	; (801426c <tcp_rexmit_rto+0x40>)
 8014244:	f006 fdc4 	bl	801add0 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8014248:	6878      	ldr	r0, [r7, #4]
 801424a:	f7ff ff4d 	bl	80140e8 <tcp_rexmit_rto_prepare>
 801424e:	4603      	mov	r3, r0
 8014250:	2b00      	cmp	r3, #0
 8014252:	d102      	bne.n	801425a <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8014254:	6878      	ldr	r0, [r7, #4]
 8014256:	f7ff ffc1 	bl	80141dc <tcp_rexmit_rto_commit>
  }
}
 801425a:	bf00      	nop
 801425c:	3708      	adds	r7, #8
 801425e:	46bd      	mov	sp, r7
 8014260:	bd80      	pop	{r7, pc}
 8014262:	bf00      	nop
 8014264:	0801f2e4 	.word	0x0801f2e4
 8014268:	0801f9c4 	.word	0x0801f9c4
 801426c:	0801f338 	.word	0x0801f338

08014270 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8014270:	b590      	push	{r4, r7, lr}
 8014272:	b085      	sub	sp, #20
 8014274:	af00      	add	r7, sp, #0
 8014276:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8014278:	687b      	ldr	r3, [r7, #4]
 801427a:	2b00      	cmp	r3, #0
 801427c:	d106      	bne.n	801428c <tcp_rexmit+0x1c>
 801427e:	4b2f      	ldr	r3, [pc, #188]	; (801433c <tcp_rexmit+0xcc>)
 8014280:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8014284:	492e      	ldr	r1, [pc, #184]	; (8014340 <tcp_rexmit+0xd0>)
 8014286:	482f      	ldr	r0, [pc, #188]	; (8014344 <tcp_rexmit+0xd4>)
 8014288:	f006 fda2 	bl	801add0 <iprintf>

  if (pcb->unacked == NULL) {
 801428c:	687b      	ldr	r3, [r7, #4]
 801428e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014290:	2b00      	cmp	r3, #0
 8014292:	d102      	bne.n	801429a <tcp_rexmit+0x2a>
    return ERR_VAL;
 8014294:	f06f 0305 	mvn.w	r3, #5
 8014298:	e04c      	b.n	8014334 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801429a:	687b      	ldr	r3, [r7, #4]
 801429c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801429e:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 80142a0:	68b8      	ldr	r0, [r7, #8]
 80142a2:	f7ff fe11 	bl	8013ec8 <tcp_output_segment_busy>
 80142a6:	4603      	mov	r3, r0
 80142a8:	2b00      	cmp	r3, #0
 80142aa:	d002      	beq.n	80142b2 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 80142ac:	f06f 0305 	mvn.w	r3, #5
 80142b0:	e040      	b.n	8014334 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 80142b2:	68bb      	ldr	r3, [r7, #8]
 80142b4:	681a      	ldr	r2, [r3, #0]
 80142b6:	687b      	ldr	r3, [r7, #4]
 80142b8:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 80142ba:	687b      	ldr	r3, [r7, #4]
 80142bc:	336c      	adds	r3, #108	; 0x6c
 80142be:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80142c0:	e002      	b.n	80142c8 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 80142c2:	68fb      	ldr	r3, [r7, #12]
 80142c4:	681b      	ldr	r3, [r3, #0]
 80142c6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80142c8:	68fb      	ldr	r3, [r7, #12]
 80142ca:	681b      	ldr	r3, [r3, #0]
 80142cc:	2b00      	cmp	r3, #0
 80142ce:	d011      	beq.n	80142f4 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80142d0:	68fb      	ldr	r3, [r7, #12]
 80142d2:	681b      	ldr	r3, [r3, #0]
 80142d4:	691b      	ldr	r3, [r3, #16]
 80142d6:	685b      	ldr	r3, [r3, #4]
 80142d8:	4618      	mov	r0, r3
 80142da:	f7f9 f8b0 	bl	800d43e <lwip_htonl>
 80142de:	4604      	mov	r4, r0
 80142e0:	68bb      	ldr	r3, [r7, #8]
 80142e2:	691b      	ldr	r3, [r3, #16]
 80142e4:	685b      	ldr	r3, [r3, #4]
 80142e6:	4618      	mov	r0, r3
 80142e8:	f7f9 f8a9 	bl	800d43e <lwip_htonl>
 80142ec:	4603      	mov	r3, r0
 80142ee:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 80142f0:	2b00      	cmp	r3, #0
 80142f2:	dbe6      	blt.n	80142c2 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 80142f4:	68fb      	ldr	r3, [r7, #12]
 80142f6:	681a      	ldr	r2, [r3, #0]
 80142f8:	68bb      	ldr	r3, [r7, #8]
 80142fa:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 80142fc:	68fb      	ldr	r3, [r7, #12]
 80142fe:	68ba      	ldr	r2, [r7, #8]
 8014300:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8014302:	68bb      	ldr	r3, [r7, #8]
 8014304:	681b      	ldr	r3, [r3, #0]
 8014306:	2b00      	cmp	r3, #0
 8014308:	d103      	bne.n	8014312 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801430a:	687b      	ldr	r3, [r7, #4]
 801430c:	2200      	movs	r2, #0
 801430e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8014312:	687b      	ldr	r3, [r7, #4]
 8014314:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8014318:	2bff      	cmp	r3, #255	; 0xff
 801431a:	d007      	beq.n	801432c <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 801431c:	687b      	ldr	r3, [r7, #4]
 801431e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8014322:	3301      	adds	r3, #1
 8014324:	b2da      	uxtb	r2, r3
 8014326:	687b      	ldr	r3, [r7, #4]
 8014328:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801432c:	687b      	ldr	r3, [r7, #4]
 801432e:	2200      	movs	r2, #0
 8014330:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8014332:	2300      	movs	r3, #0
}
 8014334:	4618      	mov	r0, r3
 8014336:	3714      	adds	r7, #20
 8014338:	46bd      	mov	sp, r7
 801433a:	bd90      	pop	{r4, r7, pc}
 801433c:	0801f2e4 	.word	0x0801f2e4
 8014340:	0801f9e0 	.word	0x0801f9e0
 8014344:	0801f338 	.word	0x0801f338

08014348 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8014348:	b580      	push	{r7, lr}
 801434a:	b082      	sub	sp, #8
 801434c:	af00      	add	r7, sp, #0
 801434e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8014350:	687b      	ldr	r3, [r7, #4]
 8014352:	2b00      	cmp	r3, #0
 8014354:	d106      	bne.n	8014364 <tcp_rexmit_fast+0x1c>
 8014356:	4b2a      	ldr	r3, [pc, #168]	; (8014400 <tcp_rexmit_fast+0xb8>)
 8014358:	f240 62f9 	movw	r2, #1785	; 0x6f9
 801435c:	4929      	ldr	r1, [pc, #164]	; (8014404 <tcp_rexmit_fast+0xbc>)
 801435e:	482a      	ldr	r0, [pc, #168]	; (8014408 <tcp_rexmit_fast+0xc0>)
 8014360:	f006 fd36 	bl	801add0 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8014364:	687b      	ldr	r3, [r7, #4]
 8014366:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014368:	2b00      	cmp	r3, #0
 801436a:	d044      	beq.n	80143f6 <tcp_rexmit_fast+0xae>
 801436c:	687b      	ldr	r3, [r7, #4]
 801436e:	8b5b      	ldrh	r3, [r3, #26]
 8014370:	f003 0304 	and.w	r3, r3, #4
 8014374:	2b00      	cmp	r3, #0
 8014376:	d13e      	bne.n	80143f6 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8014378:	6878      	ldr	r0, [r7, #4]
 801437a:	f7ff ff79 	bl	8014270 <tcp_rexmit>
 801437e:	4603      	mov	r3, r0
 8014380:	2b00      	cmp	r3, #0
 8014382:	d138      	bne.n	80143f6 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8014384:	687b      	ldr	r3, [r7, #4]
 8014386:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801438a:	687b      	ldr	r3, [r7, #4]
 801438c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014390:	4293      	cmp	r3, r2
 8014392:	bf28      	it	cs
 8014394:	4613      	movcs	r3, r2
 8014396:	b29b      	uxth	r3, r3
 8014398:	0fda      	lsrs	r2, r3, #31
 801439a:	4413      	add	r3, r2
 801439c:	105b      	asrs	r3, r3, #1
 801439e:	b29a      	uxth	r2, r3
 80143a0:	687b      	ldr	r3, [r7, #4]
 80143a2:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80143a6:	687b      	ldr	r3, [r7, #4]
 80143a8:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80143ac:	461a      	mov	r2, r3
 80143ae:	687b      	ldr	r3, [r7, #4]
 80143b0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80143b2:	005b      	lsls	r3, r3, #1
 80143b4:	429a      	cmp	r2, r3
 80143b6:	d206      	bcs.n	80143c6 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 80143b8:	687b      	ldr	r3, [r7, #4]
 80143ba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80143bc:	005b      	lsls	r3, r3, #1
 80143be:	b29a      	uxth	r2, r3
 80143c0:	687b      	ldr	r3, [r7, #4]
 80143c2:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80143c6:	687b      	ldr	r3, [r7, #4]
 80143c8:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80143cc:	687b      	ldr	r3, [r7, #4]
 80143ce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80143d0:	4619      	mov	r1, r3
 80143d2:	0049      	lsls	r1, r1, #1
 80143d4:	440b      	add	r3, r1
 80143d6:	b29b      	uxth	r3, r3
 80143d8:	4413      	add	r3, r2
 80143da:	b29a      	uxth	r2, r3
 80143dc:	687b      	ldr	r3, [r7, #4]
 80143de:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 80143e2:	687b      	ldr	r3, [r7, #4]
 80143e4:	8b5b      	ldrh	r3, [r3, #26]
 80143e6:	f043 0304 	orr.w	r3, r3, #4
 80143ea:	b29a      	uxth	r2, r3
 80143ec:	687b      	ldr	r3, [r7, #4]
 80143ee:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 80143f0:	687b      	ldr	r3, [r7, #4]
 80143f2:	2200      	movs	r2, #0
 80143f4:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 80143f6:	bf00      	nop
 80143f8:	3708      	adds	r7, #8
 80143fa:	46bd      	mov	sp, r7
 80143fc:	bd80      	pop	{r7, pc}
 80143fe:	bf00      	nop
 8014400:	0801f2e4 	.word	0x0801f2e4
 8014404:	0801f9f8 	.word	0x0801f9f8
 8014408:	0801f338 	.word	0x0801f338

0801440c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 801440c:	b580      	push	{r7, lr}
 801440e:	b086      	sub	sp, #24
 8014410:	af00      	add	r7, sp, #0
 8014412:	60f8      	str	r0, [r7, #12]
 8014414:	607b      	str	r3, [r7, #4]
 8014416:	460b      	mov	r3, r1
 8014418:	817b      	strh	r3, [r7, #10]
 801441a:	4613      	mov	r3, r2
 801441c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801441e:	897a      	ldrh	r2, [r7, #10]
 8014420:	893b      	ldrh	r3, [r7, #8]
 8014422:	4413      	add	r3, r2
 8014424:	b29b      	uxth	r3, r3
 8014426:	3314      	adds	r3, #20
 8014428:	b29b      	uxth	r3, r3
 801442a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801442e:	4619      	mov	r1, r3
 8014430:	2022      	movs	r0, #34	; 0x22
 8014432:	f7fa fa29 	bl	800e888 <pbuf_alloc>
 8014436:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8014438:	697b      	ldr	r3, [r7, #20]
 801443a:	2b00      	cmp	r3, #0
 801443c:	d04d      	beq.n	80144da <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801443e:	897b      	ldrh	r3, [r7, #10]
 8014440:	3313      	adds	r3, #19
 8014442:	697a      	ldr	r2, [r7, #20]
 8014444:	8952      	ldrh	r2, [r2, #10]
 8014446:	4293      	cmp	r3, r2
 8014448:	db06      	blt.n	8014458 <tcp_output_alloc_header_common+0x4c>
 801444a:	4b26      	ldr	r3, [pc, #152]	; (80144e4 <tcp_output_alloc_header_common+0xd8>)
 801444c:	f240 7223 	movw	r2, #1827	; 0x723
 8014450:	4925      	ldr	r1, [pc, #148]	; (80144e8 <tcp_output_alloc_header_common+0xdc>)
 8014452:	4826      	ldr	r0, [pc, #152]	; (80144ec <tcp_output_alloc_header_common+0xe0>)
 8014454:	f006 fcbc 	bl	801add0 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8014458:	697b      	ldr	r3, [r7, #20]
 801445a:	685b      	ldr	r3, [r3, #4]
 801445c:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801445e:	8c3b      	ldrh	r3, [r7, #32]
 8014460:	4618      	mov	r0, r3
 8014462:	f7f8 ffd7 	bl	800d414 <lwip_htons>
 8014466:	4603      	mov	r3, r0
 8014468:	461a      	mov	r2, r3
 801446a:	693b      	ldr	r3, [r7, #16]
 801446c:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801446e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014470:	4618      	mov	r0, r3
 8014472:	f7f8 ffcf 	bl	800d414 <lwip_htons>
 8014476:	4603      	mov	r3, r0
 8014478:	461a      	mov	r2, r3
 801447a:	693b      	ldr	r3, [r7, #16]
 801447c:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801447e:	693b      	ldr	r3, [r7, #16]
 8014480:	687a      	ldr	r2, [r7, #4]
 8014482:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8014484:	68f8      	ldr	r0, [r7, #12]
 8014486:	f7f8 ffda 	bl	800d43e <lwip_htonl>
 801448a:	4602      	mov	r2, r0
 801448c:	693b      	ldr	r3, [r7, #16]
 801448e:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8014490:	897b      	ldrh	r3, [r7, #10]
 8014492:	089b      	lsrs	r3, r3, #2
 8014494:	b29b      	uxth	r3, r3
 8014496:	3305      	adds	r3, #5
 8014498:	b29b      	uxth	r3, r3
 801449a:	031b      	lsls	r3, r3, #12
 801449c:	b29a      	uxth	r2, r3
 801449e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80144a2:	b29b      	uxth	r3, r3
 80144a4:	4313      	orrs	r3, r2
 80144a6:	b29b      	uxth	r3, r3
 80144a8:	4618      	mov	r0, r3
 80144aa:	f7f8 ffb3 	bl	800d414 <lwip_htons>
 80144ae:	4603      	mov	r3, r0
 80144b0:	461a      	mov	r2, r3
 80144b2:	693b      	ldr	r3, [r7, #16]
 80144b4:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 80144b6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80144b8:	4618      	mov	r0, r3
 80144ba:	f7f8 ffab 	bl	800d414 <lwip_htons>
 80144be:	4603      	mov	r3, r0
 80144c0:	461a      	mov	r2, r3
 80144c2:	693b      	ldr	r3, [r7, #16]
 80144c4:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 80144c6:	693b      	ldr	r3, [r7, #16]
 80144c8:	2200      	movs	r2, #0
 80144ca:	741a      	strb	r2, [r3, #16]
 80144cc:	2200      	movs	r2, #0
 80144ce:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 80144d0:	693b      	ldr	r3, [r7, #16]
 80144d2:	2200      	movs	r2, #0
 80144d4:	749a      	strb	r2, [r3, #18]
 80144d6:	2200      	movs	r2, #0
 80144d8:	74da      	strb	r2, [r3, #19]
  }
  return p;
 80144da:	697b      	ldr	r3, [r7, #20]
}
 80144dc:	4618      	mov	r0, r3
 80144de:	3718      	adds	r7, #24
 80144e0:	46bd      	mov	sp, r7
 80144e2:	bd80      	pop	{r7, pc}
 80144e4:	0801f2e4 	.word	0x0801f2e4
 80144e8:	0801fa18 	.word	0x0801fa18
 80144ec:	0801f338 	.word	0x0801f338

080144f0 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 80144f0:	b5b0      	push	{r4, r5, r7, lr}
 80144f2:	b08a      	sub	sp, #40	; 0x28
 80144f4:	af04      	add	r7, sp, #16
 80144f6:	60f8      	str	r0, [r7, #12]
 80144f8:	607b      	str	r3, [r7, #4]
 80144fa:	460b      	mov	r3, r1
 80144fc:	817b      	strh	r3, [r7, #10]
 80144fe:	4613      	mov	r3, r2
 8014500:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8014502:	68fb      	ldr	r3, [r7, #12]
 8014504:	2b00      	cmp	r3, #0
 8014506:	d106      	bne.n	8014516 <tcp_output_alloc_header+0x26>
 8014508:	4b15      	ldr	r3, [pc, #84]	; (8014560 <tcp_output_alloc_header+0x70>)
 801450a:	f240 7242 	movw	r2, #1858	; 0x742
 801450e:	4915      	ldr	r1, [pc, #84]	; (8014564 <tcp_output_alloc_header+0x74>)
 8014510:	4815      	ldr	r0, [pc, #84]	; (8014568 <tcp_output_alloc_header+0x78>)
 8014512:	f006 fc5d 	bl	801add0 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8014516:	68fb      	ldr	r3, [r7, #12]
 8014518:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801451a:	68fb      	ldr	r3, [r7, #12]
 801451c:	8adb      	ldrh	r3, [r3, #22]
 801451e:	68fa      	ldr	r2, [r7, #12]
 8014520:	8b12      	ldrh	r2, [r2, #24]
 8014522:	68f9      	ldr	r1, [r7, #12]
 8014524:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8014526:	893d      	ldrh	r5, [r7, #8]
 8014528:	897c      	ldrh	r4, [r7, #10]
 801452a:	9103      	str	r1, [sp, #12]
 801452c:	2110      	movs	r1, #16
 801452e:	9102      	str	r1, [sp, #8]
 8014530:	9201      	str	r2, [sp, #4]
 8014532:	9300      	str	r3, [sp, #0]
 8014534:	687b      	ldr	r3, [r7, #4]
 8014536:	462a      	mov	r2, r5
 8014538:	4621      	mov	r1, r4
 801453a:	f7ff ff67 	bl	801440c <tcp_output_alloc_header_common>
 801453e:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8014540:	697b      	ldr	r3, [r7, #20]
 8014542:	2b00      	cmp	r3, #0
 8014544:	d006      	beq.n	8014554 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8014546:	68fb      	ldr	r3, [r7, #12]
 8014548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801454a:	68fa      	ldr	r2, [r7, #12]
 801454c:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801454e:	441a      	add	r2, r3
 8014550:	68fb      	ldr	r3, [r7, #12]
 8014552:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8014554:	697b      	ldr	r3, [r7, #20]
}
 8014556:	4618      	mov	r0, r3
 8014558:	3718      	adds	r7, #24
 801455a:	46bd      	mov	sp, r7
 801455c:	bdb0      	pop	{r4, r5, r7, pc}
 801455e:	bf00      	nop
 8014560:	0801f2e4 	.word	0x0801f2e4
 8014564:	0801fa48 	.word	0x0801fa48
 8014568:	0801f338 	.word	0x0801f338

0801456c <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 801456c:	b580      	push	{r7, lr}
 801456e:	b088      	sub	sp, #32
 8014570:	af00      	add	r7, sp, #0
 8014572:	60f8      	str	r0, [r7, #12]
 8014574:	60b9      	str	r1, [r7, #8]
 8014576:	4611      	mov	r1, r2
 8014578:	461a      	mov	r2, r3
 801457a:	460b      	mov	r3, r1
 801457c:	71fb      	strb	r3, [r7, #7]
 801457e:	4613      	mov	r3, r2
 8014580:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8014582:	2300      	movs	r3, #0
 8014584:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8014586:	68bb      	ldr	r3, [r7, #8]
 8014588:	2b00      	cmp	r3, #0
 801458a:	d106      	bne.n	801459a <tcp_output_fill_options+0x2e>
 801458c:	4b13      	ldr	r3, [pc, #76]	; (80145dc <tcp_output_fill_options+0x70>)
 801458e:	f240 7256 	movw	r2, #1878	; 0x756
 8014592:	4913      	ldr	r1, [pc, #76]	; (80145e0 <tcp_output_fill_options+0x74>)
 8014594:	4813      	ldr	r0, [pc, #76]	; (80145e4 <tcp_output_fill_options+0x78>)
 8014596:	f006 fc1b 	bl	801add0 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801459a:	68bb      	ldr	r3, [r7, #8]
 801459c:	685b      	ldr	r3, [r3, #4]
 801459e:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 80145a0:	69bb      	ldr	r3, [r7, #24]
 80145a2:	3314      	adds	r3, #20
 80145a4:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 80145a6:	69bb      	ldr	r3, [r7, #24]
 80145a8:	f103 0214 	add.w	r2, r3, #20
 80145ac:	8bfb      	ldrh	r3, [r7, #30]
 80145ae:	009b      	lsls	r3, r3, #2
 80145b0:	4619      	mov	r1, r3
 80145b2:	79fb      	ldrb	r3, [r7, #7]
 80145b4:	009b      	lsls	r3, r3, #2
 80145b6:	f003 0304 	and.w	r3, r3, #4
 80145ba:	440b      	add	r3, r1
 80145bc:	4413      	add	r3, r2
 80145be:	697a      	ldr	r2, [r7, #20]
 80145c0:	429a      	cmp	r2, r3
 80145c2:	d006      	beq.n	80145d2 <tcp_output_fill_options+0x66>
 80145c4:	4b05      	ldr	r3, [pc, #20]	; (80145dc <tcp_output_fill_options+0x70>)
 80145c6:	f240 7275 	movw	r2, #1909	; 0x775
 80145ca:	4907      	ldr	r1, [pc, #28]	; (80145e8 <tcp_output_fill_options+0x7c>)
 80145cc:	4805      	ldr	r0, [pc, #20]	; (80145e4 <tcp_output_fill_options+0x78>)
 80145ce:	f006 fbff 	bl	801add0 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 80145d2:	bf00      	nop
 80145d4:	3720      	adds	r7, #32
 80145d6:	46bd      	mov	sp, r7
 80145d8:	bd80      	pop	{r7, pc}
 80145da:	bf00      	nop
 80145dc:	0801f2e4 	.word	0x0801f2e4
 80145e0:	0801fa70 	.word	0x0801fa70
 80145e4:	0801f338 	.word	0x0801f338
 80145e8:	0801f968 	.word	0x0801f968

080145ec <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 80145ec:	b580      	push	{r7, lr}
 80145ee:	b08c      	sub	sp, #48	; 0x30
 80145f0:	af04      	add	r7, sp, #16
 80145f2:	60f8      	str	r0, [r7, #12]
 80145f4:	60b9      	str	r1, [r7, #8]
 80145f6:	607a      	str	r2, [r7, #4]
 80145f8:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 80145fa:	68bb      	ldr	r3, [r7, #8]
 80145fc:	2b00      	cmp	r3, #0
 80145fe:	d106      	bne.n	801460e <tcp_output_control_segment+0x22>
 8014600:	4b24      	ldr	r3, [pc, #144]	; (8014694 <tcp_output_control_segment+0xa8>)
 8014602:	f240 7287 	movw	r2, #1927	; 0x787
 8014606:	4924      	ldr	r1, [pc, #144]	; (8014698 <tcp_output_control_segment+0xac>)
 8014608:	4824      	ldr	r0, [pc, #144]	; (801469c <tcp_output_control_segment+0xb0>)
 801460a:	f006 fbe1 	bl	801add0 <iprintf>

  netif = tcp_route(pcb, src, dst);
 801460e:	683a      	ldr	r2, [r7, #0]
 8014610:	6879      	ldr	r1, [r7, #4]
 8014612:	68f8      	ldr	r0, [r7, #12]
 8014614:	f7fe ff1c 	bl	8013450 <tcp_route>
 8014618:	61b8      	str	r0, [r7, #24]
  if (netif == NULL) {
 801461a:	69bb      	ldr	r3, [r7, #24]
 801461c:	2b00      	cmp	r3, #0
 801461e:	d102      	bne.n	8014626 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8014620:	23fc      	movs	r3, #252	; 0xfc
 8014622:	77fb      	strb	r3, [r7, #31]
 8014624:	e02c      	b.n	8014680 <tcp_output_control_segment+0x94>
  } else {
    u8_t ttl, tos;
#if CHECKSUM_GEN_TCP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_TCP) {
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
 8014626:	68bb      	ldr	r3, [r7, #8]
 8014628:	685b      	ldr	r3, [r3, #4]
 801462a:	617b      	str	r3, [r7, #20]
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 801462c:	68bb      	ldr	r3, [r7, #8]
 801462e:	891a      	ldrh	r2, [r3, #8]
 8014630:	683b      	ldr	r3, [r7, #0]
 8014632:	9300      	str	r3, [sp, #0]
 8014634:	687b      	ldr	r3, [r7, #4]
 8014636:	2106      	movs	r1, #6
 8014638:	68b8      	ldr	r0, [r7, #8]
 801463a:	f7f9 f81d 	bl	800d678 <ip_chksum_pseudo>
 801463e:	4603      	mov	r3, r0
 8014640:	461a      	mov	r2, r3
 8014642:	697b      	ldr	r3, [r7, #20]
 8014644:	821a      	strh	r2, [r3, #16]
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8014646:	68fb      	ldr	r3, [r7, #12]
 8014648:	2b00      	cmp	r3, #0
 801464a:	d006      	beq.n	801465a <tcp_output_control_segment+0x6e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 801464c:	68fb      	ldr	r3, [r7, #12]
 801464e:	7adb      	ldrb	r3, [r3, #11]
 8014650:	77bb      	strb	r3, [r7, #30]
      tos = pcb->tos;
 8014652:	68fb      	ldr	r3, [r7, #12]
 8014654:	7a9b      	ldrb	r3, [r3, #10]
 8014656:	777b      	strb	r3, [r7, #29]
 8014658:	e003      	b.n	8014662 <tcp_output_control_segment+0x76>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801465a:	23ff      	movs	r3, #255	; 0xff
 801465c:	77bb      	strb	r3, [r7, #30]
      tos = 0;
 801465e:	2300      	movs	r3, #0
 8014660:	777b      	strb	r3, [r7, #29]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8014662:	7fba      	ldrb	r2, [r7, #30]
 8014664:	69bb      	ldr	r3, [r7, #24]
 8014666:	9302      	str	r3, [sp, #8]
 8014668:	2306      	movs	r3, #6
 801466a:	9301      	str	r3, [sp, #4]
 801466c:	7f7b      	ldrb	r3, [r7, #29]
 801466e:	9300      	str	r3, [sp, #0]
 8014670:	4613      	mov	r3, r2
 8014672:	683a      	ldr	r2, [r7, #0]
 8014674:	6879      	ldr	r1, [r7, #4]
 8014676:	68b8      	ldr	r0, [r7, #8]
 8014678:	f004 fb06 	bl	8018c88 <ip4_output_if>
 801467c:	4603      	mov	r3, r0
 801467e:	77fb      	strb	r3, [r7, #31]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8014680:	68b8      	ldr	r0, [r7, #8]
 8014682:	f7fa fbe9 	bl	800ee58 <pbuf_free>
  return err;
 8014686:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801468a:	4618      	mov	r0, r3
 801468c:	3720      	adds	r7, #32
 801468e:	46bd      	mov	sp, r7
 8014690:	bd80      	pop	{r7, pc}
 8014692:	bf00      	nop
 8014694:	0801f2e4 	.word	0x0801f2e4
 8014698:	0801fa98 	.word	0x0801fa98
 801469c:	0801f338 	.word	0x0801f338

080146a0 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 80146a0:	b590      	push	{r4, r7, lr}
 80146a2:	b08b      	sub	sp, #44	; 0x2c
 80146a4:	af04      	add	r7, sp, #16
 80146a6:	60f8      	str	r0, [r7, #12]
 80146a8:	60b9      	str	r1, [r7, #8]
 80146aa:	607a      	str	r2, [r7, #4]
 80146ac:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 80146ae:	683b      	ldr	r3, [r7, #0]
 80146b0:	2b00      	cmp	r3, #0
 80146b2:	d106      	bne.n	80146c2 <tcp_rst+0x22>
 80146b4:	4b1f      	ldr	r3, [pc, #124]	; (8014734 <tcp_rst+0x94>)
 80146b6:	f240 72c4 	movw	r2, #1988	; 0x7c4
 80146ba:	491f      	ldr	r1, [pc, #124]	; (8014738 <tcp_rst+0x98>)
 80146bc:	481f      	ldr	r0, [pc, #124]	; (801473c <tcp_rst+0x9c>)
 80146be:	f006 fb87 	bl	801add0 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 80146c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80146c4:	2b00      	cmp	r3, #0
 80146c6:	d106      	bne.n	80146d6 <tcp_rst+0x36>
 80146c8:	4b1a      	ldr	r3, [pc, #104]	; (8014734 <tcp_rst+0x94>)
 80146ca:	f240 72c5 	movw	r2, #1989	; 0x7c5
 80146ce:	491c      	ldr	r1, [pc, #112]	; (8014740 <tcp_rst+0xa0>)
 80146d0:	481a      	ldr	r0, [pc, #104]	; (801473c <tcp_rst+0x9c>)
 80146d2:	f006 fb7d 	bl	801add0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80146d6:	2300      	movs	r3, #0
 80146d8:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 80146da:	f24a 032d 	movw	r3, #41005	; 0xa02d
 80146de:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 80146e0:	7dfb      	ldrb	r3, [r7, #23]
 80146e2:	b29c      	uxth	r4, r3
 80146e4:	68b8      	ldr	r0, [r7, #8]
 80146e6:	f7f8 feaa 	bl	800d43e <lwip_htonl>
 80146ea:	4602      	mov	r2, r0
 80146ec:	8abb      	ldrh	r3, [r7, #20]
 80146ee:	9303      	str	r3, [sp, #12]
 80146f0:	2314      	movs	r3, #20
 80146f2:	9302      	str	r3, [sp, #8]
 80146f4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80146f6:	9301      	str	r3, [sp, #4]
 80146f8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80146fa:	9300      	str	r3, [sp, #0]
 80146fc:	4613      	mov	r3, r2
 80146fe:	2200      	movs	r2, #0
 8014700:	4621      	mov	r1, r4
 8014702:	6878      	ldr	r0, [r7, #4]
 8014704:	f7ff fe82 	bl	801440c <tcp_output_alloc_header_common>
 8014708:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801470a:	693b      	ldr	r3, [r7, #16]
 801470c:	2b00      	cmp	r3, #0
 801470e:	d00c      	beq.n	801472a <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8014710:	7dfb      	ldrb	r3, [r7, #23]
 8014712:	2200      	movs	r2, #0
 8014714:	6939      	ldr	r1, [r7, #16]
 8014716:	68f8      	ldr	r0, [r7, #12]
 8014718:	f7ff ff28 	bl	801456c <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801471c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801471e:	683a      	ldr	r2, [r7, #0]
 8014720:	6939      	ldr	r1, [r7, #16]
 8014722:	68f8      	ldr	r0, [r7, #12]
 8014724:	f7ff ff62 	bl	80145ec <tcp_output_control_segment>
 8014728:	e000      	b.n	801472c <tcp_rst+0x8c>
    return;
 801472a:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801472c:	371c      	adds	r7, #28
 801472e:	46bd      	mov	sp, r7
 8014730:	bd90      	pop	{r4, r7, pc}
 8014732:	bf00      	nop
 8014734:	0801f2e4 	.word	0x0801f2e4
 8014738:	0801fac4 	.word	0x0801fac4
 801473c:	0801f338 	.word	0x0801f338
 8014740:	0801fae0 	.word	0x0801fae0

08014744 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8014744:	b590      	push	{r4, r7, lr}
 8014746:	b087      	sub	sp, #28
 8014748:	af00      	add	r7, sp, #0
 801474a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 801474c:	2300      	movs	r3, #0
 801474e:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8014750:	2300      	movs	r3, #0
 8014752:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8014754:	687b      	ldr	r3, [r7, #4]
 8014756:	2b00      	cmp	r3, #0
 8014758:	d106      	bne.n	8014768 <tcp_send_empty_ack+0x24>
 801475a:	4b28      	ldr	r3, [pc, #160]	; (80147fc <tcp_send_empty_ack+0xb8>)
 801475c:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8014760:	4927      	ldr	r1, [pc, #156]	; (8014800 <tcp_send_empty_ack+0xbc>)
 8014762:	4828      	ldr	r0, [pc, #160]	; (8014804 <tcp_send_empty_ack+0xc0>)
 8014764:	f006 fb34 	bl	801add0 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8014768:	7dfb      	ldrb	r3, [r7, #23]
 801476a:	009b      	lsls	r3, r3, #2
 801476c:	b2db      	uxtb	r3, r3
 801476e:	f003 0304 	and.w	r3, r3, #4
 8014772:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8014774:	7d7b      	ldrb	r3, [r7, #21]
 8014776:	b29c      	uxth	r4, r3
 8014778:	687b      	ldr	r3, [r7, #4]
 801477a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801477c:	4618      	mov	r0, r3
 801477e:	f7f8 fe5e 	bl	800d43e <lwip_htonl>
 8014782:	4603      	mov	r3, r0
 8014784:	2200      	movs	r2, #0
 8014786:	4621      	mov	r1, r4
 8014788:	6878      	ldr	r0, [r7, #4]
 801478a:	f7ff feb1 	bl	80144f0 <tcp_output_alloc_header>
 801478e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8014790:	693b      	ldr	r3, [r7, #16]
 8014792:	2b00      	cmp	r3, #0
 8014794:	d109      	bne.n	80147aa <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014796:	687b      	ldr	r3, [r7, #4]
 8014798:	8b5b      	ldrh	r3, [r3, #26]
 801479a:	f043 0303 	orr.w	r3, r3, #3
 801479e:	b29a      	uxth	r2, r3
 80147a0:	687b      	ldr	r3, [r7, #4]
 80147a2:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80147a4:	f06f 0301 	mvn.w	r3, #1
 80147a8:	e023      	b.n	80147f2 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 80147aa:	7dbb      	ldrb	r3, [r7, #22]
 80147ac:	7dfa      	ldrb	r2, [r7, #23]
 80147ae:	6939      	ldr	r1, [r7, #16]
 80147b0:	6878      	ldr	r0, [r7, #4]
 80147b2:	f7ff fedb 	bl	801456c <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80147b6:	687a      	ldr	r2, [r7, #4]
 80147b8:	687b      	ldr	r3, [r7, #4]
 80147ba:	3304      	adds	r3, #4
 80147bc:	6939      	ldr	r1, [r7, #16]
 80147be:	6878      	ldr	r0, [r7, #4]
 80147c0:	f7ff ff14 	bl	80145ec <tcp_output_control_segment>
 80147c4:	4603      	mov	r3, r0
 80147c6:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 80147c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80147cc:	2b00      	cmp	r3, #0
 80147ce:	d007      	beq.n	80147e0 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80147d0:	687b      	ldr	r3, [r7, #4]
 80147d2:	8b5b      	ldrh	r3, [r3, #26]
 80147d4:	f043 0303 	orr.w	r3, r3, #3
 80147d8:	b29a      	uxth	r2, r3
 80147da:	687b      	ldr	r3, [r7, #4]
 80147dc:	835a      	strh	r2, [r3, #26]
 80147de:	e006      	b.n	80147ee <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80147e0:	687b      	ldr	r3, [r7, #4]
 80147e2:	8b5b      	ldrh	r3, [r3, #26]
 80147e4:	f023 0303 	bic.w	r3, r3, #3
 80147e8:	b29a      	uxth	r2, r3
 80147ea:	687b      	ldr	r3, [r7, #4]
 80147ec:	835a      	strh	r2, [r3, #26]
  }

  return err;
 80147ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80147f2:	4618      	mov	r0, r3
 80147f4:	371c      	adds	r7, #28
 80147f6:	46bd      	mov	sp, r7
 80147f8:	bd90      	pop	{r4, r7, pc}
 80147fa:	bf00      	nop
 80147fc:	0801f2e4 	.word	0x0801f2e4
 8014800:	0801fafc 	.word	0x0801fafc
 8014804:	0801f338 	.word	0x0801f338

08014808 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8014808:	b590      	push	{r4, r7, lr}
 801480a:	b085      	sub	sp, #20
 801480c:	af00      	add	r7, sp, #0
 801480e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8014810:	2300      	movs	r3, #0
 8014812:	72bb      	strb	r3, [r7, #10]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8014814:	687b      	ldr	r3, [r7, #4]
 8014816:	2b00      	cmp	r3, #0
 8014818:	d106      	bne.n	8014828 <tcp_keepalive+0x20>
 801481a:	4b18      	ldr	r3, [pc, #96]	; (801487c <tcp_keepalive+0x74>)
 801481c:	f640 0224 	movw	r2, #2084	; 0x824
 8014820:	4917      	ldr	r1, [pc, #92]	; (8014880 <tcp_keepalive+0x78>)
 8014822:	4818      	ldr	r0, [pc, #96]	; (8014884 <tcp_keepalive+0x7c>)
 8014824:	f006 fad4 	bl	801add0 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8014828:	7abb      	ldrb	r3, [r7, #10]
 801482a:	b29c      	uxth	r4, r3
 801482c:	687b      	ldr	r3, [r7, #4]
 801482e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014830:	3b01      	subs	r3, #1
 8014832:	4618      	mov	r0, r3
 8014834:	f7f8 fe03 	bl	800d43e <lwip_htonl>
 8014838:	4603      	mov	r3, r0
 801483a:	2200      	movs	r2, #0
 801483c:	4621      	mov	r1, r4
 801483e:	6878      	ldr	r0, [r7, #4]
 8014840:	f7ff fe56 	bl	80144f0 <tcp_output_alloc_header>
 8014844:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8014846:	68fb      	ldr	r3, [r7, #12]
 8014848:	2b00      	cmp	r3, #0
 801484a:	d102      	bne.n	8014852 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 801484c:	f04f 33ff 	mov.w	r3, #4294967295
 8014850:	e010      	b.n	8014874 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8014852:	7abb      	ldrb	r3, [r7, #10]
 8014854:	2200      	movs	r2, #0
 8014856:	68f9      	ldr	r1, [r7, #12]
 8014858:	6878      	ldr	r0, [r7, #4]
 801485a:	f7ff fe87 	bl	801456c <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801485e:	687a      	ldr	r2, [r7, #4]
 8014860:	687b      	ldr	r3, [r7, #4]
 8014862:	3304      	adds	r3, #4
 8014864:	68f9      	ldr	r1, [r7, #12]
 8014866:	6878      	ldr	r0, [r7, #4]
 8014868:	f7ff fec0 	bl	80145ec <tcp_output_control_segment>
 801486c:	4603      	mov	r3, r0
 801486e:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8014870:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8014874:	4618      	mov	r0, r3
 8014876:	3714      	adds	r7, #20
 8014878:	46bd      	mov	sp, r7
 801487a:	bd90      	pop	{r4, r7, pc}
 801487c:	0801f2e4 	.word	0x0801f2e4
 8014880:	0801fb1c 	.word	0x0801fb1c
 8014884:	0801f338 	.word	0x0801f338

08014888 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8014888:	b590      	push	{r4, r7, lr}
 801488a:	b08b      	sub	sp, #44	; 0x2c
 801488c:	af00      	add	r7, sp, #0
 801488e:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8014890:	2300      	movs	r3, #0
 8014892:	74fb      	strb	r3, [r7, #19]

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8014894:	687b      	ldr	r3, [r7, #4]
 8014896:	2b00      	cmp	r3, #0
 8014898:	d106      	bne.n	80148a8 <tcp_zero_window_probe+0x20>
 801489a:	4b4d      	ldr	r3, [pc, #308]	; (80149d0 <tcp_zero_window_probe+0x148>)
 801489c:	f640 024f 	movw	r2, #2127	; 0x84f
 80148a0:	494c      	ldr	r1, [pc, #304]	; (80149d4 <tcp_zero_window_probe+0x14c>)
 80148a2:	484d      	ldr	r0, [pc, #308]	; (80149d8 <tcp_zero_window_probe+0x150>)
 80148a4:	f006 fa94 	bl	801add0 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 80148a8:	687b      	ldr	r3, [r7, #4]
 80148aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80148ac:	627b      	str	r3, [r7, #36]	; 0x24
  if (seg == NULL) {
 80148ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148b0:	2b00      	cmp	r3, #0
 80148b2:	d101      	bne.n	80148b8 <tcp_zero_window_probe+0x30>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 80148b4:	2300      	movs	r3, #0
 80148b6:	e087      	b.n	80149c8 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 80148b8:	687b      	ldr	r3, [r7, #4]
 80148ba:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80148be:	2bff      	cmp	r3, #255	; 0xff
 80148c0:	d007      	beq.n	80148d2 <tcp_zero_window_probe+0x4a>
    ++pcb->persist_probe;
 80148c2:	687b      	ldr	r3, [r7, #4]
 80148c4:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80148c8:	3301      	adds	r3, #1
 80148ca:	b2da      	uxtb	r2, r3
 80148cc:	687b      	ldr	r3, [r7, #4]
 80148ce:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80148d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148d4:	691b      	ldr	r3, [r3, #16]
 80148d6:	899b      	ldrh	r3, [r3, #12]
 80148d8:	b29b      	uxth	r3, r3
 80148da:	4618      	mov	r0, r3
 80148dc:	f7f8 fd9a 	bl	800d414 <lwip_htons>
 80148e0:	4603      	mov	r3, r0
 80148e2:	b2db      	uxtb	r3, r3
 80148e4:	f003 0301 	and.w	r3, r3, #1
 80148e8:	2b00      	cmp	r3, #0
 80148ea:	d005      	beq.n	80148f8 <tcp_zero_window_probe+0x70>
 80148ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148ee:	891b      	ldrh	r3, [r3, #8]
 80148f0:	2b00      	cmp	r3, #0
 80148f2:	d101      	bne.n	80148f8 <tcp_zero_window_probe+0x70>
 80148f4:	2301      	movs	r3, #1
 80148f6:	e000      	b.n	80148fa <tcp_zero_window_probe+0x72>
 80148f8:	2300      	movs	r3, #0
 80148fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 80148fe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8014902:	2b00      	cmp	r3, #0
 8014904:	bf0c      	ite	eq
 8014906:	2301      	moveq	r3, #1
 8014908:	2300      	movne	r3, #0
 801490a:	b2db      	uxtb	r3, r3
 801490c:	843b      	strh	r3, [r7, #32]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801490e:	7cfb      	ldrb	r3, [r7, #19]
 8014910:	b299      	uxth	r1, r3
 8014912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014914:	691b      	ldr	r3, [r3, #16]
 8014916:	685b      	ldr	r3, [r3, #4]
 8014918:	8c3a      	ldrh	r2, [r7, #32]
 801491a:	6878      	ldr	r0, [r7, #4]
 801491c:	f7ff fde8 	bl	80144f0 <tcp_output_alloc_header>
 8014920:	61f8      	str	r0, [r7, #28]
  if (p == NULL) {
 8014922:	69fb      	ldr	r3, [r7, #28]
 8014924:	2b00      	cmp	r3, #0
 8014926:	d102      	bne.n	801492e <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8014928:	f04f 33ff 	mov.w	r3, #4294967295
 801492c:	e04c      	b.n	80149c8 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801492e:	69fb      	ldr	r3, [r7, #28]
 8014930:	685b      	ldr	r3, [r3, #4]
 8014932:	61bb      	str	r3, [r7, #24]

  if (is_fin) {
 8014934:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8014938:	2b00      	cmp	r3, #0
 801493a:	d011      	beq.n	8014960 <tcp_zero_window_probe+0xd8>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801493c:	69bb      	ldr	r3, [r7, #24]
 801493e:	899b      	ldrh	r3, [r3, #12]
 8014940:	b29b      	uxth	r3, r3
 8014942:	b21b      	sxth	r3, r3
 8014944:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8014948:	b21c      	sxth	r4, r3
 801494a:	2011      	movs	r0, #17
 801494c:	f7f8 fd62 	bl	800d414 <lwip_htons>
 8014950:	4603      	mov	r3, r0
 8014952:	b21b      	sxth	r3, r3
 8014954:	4323      	orrs	r3, r4
 8014956:	b21b      	sxth	r3, r3
 8014958:	b29a      	uxth	r2, r3
 801495a:	69bb      	ldr	r3, [r7, #24]
 801495c:	819a      	strh	r2, [r3, #12]
 801495e:	e010      	b.n	8014982 <tcp_zero_window_probe+0xfa>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8014960:	69fb      	ldr	r3, [r7, #28]
 8014962:	685b      	ldr	r3, [r3, #4]
 8014964:	3314      	adds	r3, #20
 8014966:	617b      	str	r3, [r7, #20]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8014968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801496a:	6858      	ldr	r0, [r3, #4]
 801496c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801496e:	685b      	ldr	r3, [r3, #4]
 8014970:	891a      	ldrh	r2, [r3, #8]
 8014972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014974:	891b      	ldrh	r3, [r3, #8]
 8014976:	1ad3      	subs	r3, r2, r3
 8014978:	b29b      	uxth	r3, r3
 801497a:	2201      	movs	r2, #1
 801497c:	6979      	ldr	r1, [r7, #20]
 801497e:	f7fa fc71 	bl	800f264 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8014982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014984:	691b      	ldr	r3, [r3, #16]
 8014986:	685b      	ldr	r3, [r3, #4]
 8014988:	4618      	mov	r0, r3
 801498a:	f7f8 fd58 	bl	800d43e <lwip_htonl>
 801498e:	4603      	mov	r3, r0
 8014990:	3301      	adds	r3, #1
 8014992:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8014994:	687b      	ldr	r3, [r7, #4]
 8014996:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014998:	68fb      	ldr	r3, [r7, #12]
 801499a:	1ad3      	subs	r3, r2, r3
 801499c:	2b00      	cmp	r3, #0
 801499e:	da02      	bge.n	80149a6 <tcp_zero_window_probe+0x11e>
    pcb->snd_nxt = snd_nxt;
 80149a0:	687b      	ldr	r3, [r7, #4]
 80149a2:	68fa      	ldr	r2, [r7, #12]
 80149a4:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80149a6:	7cfb      	ldrb	r3, [r7, #19]
 80149a8:	2200      	movs	r2, #0
 80149aa:	69f9      	ldr	r1, [r7, #28]
 80149ac:	6878      	ldr	r0, [r7, #4]
 80149ae:	f7ff fddd 	bl	801456c <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80149b2:	687a      	ldr	r2, [r7, #4]
 80149b4:	687b      	ldr	r3, [r7, #4]
 80149b6:	3304      	adds	r3, #4
 80149b8:	69f9      	ldr	r1, [r7, #28]
 80149ba:	6878      	ldr	r0, [r7, #4]
 80149bc:	f7ff fe16 	bl	80145ec <tcp_output_control_segment>
 80149c0:	4603      	mov	r3, r0
 80149c2:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80149c4:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80149c8:	4618      	mov	r0, r3
 80149ca:	372c      	adds	r7, #44	; 0x2c
 80149cc:	46bd      	mov	sp, r7
 80149ce:	bd90      	pop	{r4, r7, pc}
 80149d0:	0801f2e4 	.word	0x0801f2e4
 80149d4:	0801fb38 	.word	0x0801fb38
 80149d8:	0801f338 	.word	0x0801f338

080149dc <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 80149dc:	b580      	push	{r7, lr}
 80149de:	b082      	sub	sp, #8
 80149e0:	af00      	add	r7, sp, #0
 80149e2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 80149e4:	f7fa fec0 	bl	800f768 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80149e8:	4b0a      	ldr	r3, [pc, #40]	; (8014a14 <tcpip_tcp_timer+0x38>)
 80149ea:	681b      	ldr	r3, [r3, #0]
 80149ec:	2b00      	cmp	r3, #0
 80149ee:	d103      	bne.n	80149f8 <tcpip_tcp_timer+0x1c>
 80149f0:	4b09      	ldr	r3, [pc, #36]	; (8014a18 <tcpip_tcp_timer+0x3c>)
 80149f2:	681b      	ldr	r3, [r3, #0]
 80149f4:	2b00      	cmp	r3, #0
 80149f6:	d005      	beq.n	8014a04 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80149f8:	2200      	movs	r2, #0
 80149fa:	4908      	ldr	r1, [pc, #32]	; (8014a1c <tcpip_tcp_timer+0x40>)
 80149fc:	20fa      	movs	r0, #250	; 0xfa
 80149fe:	f000 f8f3 	bl	8014be8 <sys_timeout>
 8014a02:	e003      	b.n	8014a0c <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8014a04:	4b06      	ldr	r3, [pc, #24]	; (8014a20 <tcpip_tcp_timer+0x44>)
 8014a06:	2200      	movs	r2, #0
 8014a08:	601a      	str	r2, [r3, #0]
  }
}
 8014a0a:	bf00      	nop
 8014a0c:	bf00      	nop
 8014a0e:	3708      	adds	r7, #8
 8014a10:	46bd      	mov	sp, r7
 8014a12:	bd80      	pop	{r7, pc}
 8014a14:	20013ce4 	.word	0x20013ce4
 8014a18:	20013ce8 	.word	0x20013ce8
 8014a1c:	080149dd 	.word	0x080149dd
 8014a20:	20013d34 	.word	0x20013d34

08014a24 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8014a24:	b580      	push	{r7, lr}
 8014a26:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8014a28:	4b0a      	ldr	r3, [pc, #40]	; (8014a54 <tcp_timer_needed+0x30>)
 8014a2a:	681b      	ldr	r3, [r3, #0]
 8014a2c:	2b00      	cmp	r3, #0
 8014a2e:	d10f      	bne.n	8014a50 <tcp_timer_needed+0x2c>
 8014a30:	4b09      	ldr	r3, [pc, #36]	; (8014a58 <tcp_timer_needed+0x34>)
 8014a32:	681b      	ldr	r3, [r3, #0]
 8014a34:	2b00      	cmp	r3, #0
 8014a36:	d103      	bne.n	8014a40 <tcp_timer_needed+0x1c>
 8014a38:	4b08      	ldr	r3, [pc, #32]	; (8014a5c <tcp_timer_needed+0x38>)
 8014a3a:	681b      	ldr	r3, [r3, #0]
 8014a3c:	2b00      	cmp	r3, #0
 8014a3e:	d007      	beq.n	8014a50 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8014a40:	4b04      	ldr	r3, [pc, #16]	; (8014a54 <tcp_timer_needed+0x30>)
 8014a42:	2201      	movs	r2, #1
 8014a44:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8014a46:	2200      	movs	r2, #0
 8014a48:	4905      	ldr	r1, [pc, #20]	; (8014a60 <tcp_timer_needed+0x3c>)
 8014a4a:	20fa      	movs	r0, #250	; 0xfa
 8014a4c:	f000 f8cc 	bl	8014be8 <sys_timeout>
  }
}
 8014a50:	bf00      	nop
 8014a52:	bd80      	pop	{r7, pc}
 8014a54:	20013d34 	.word	0x20013d34
 8014a58:	20013ce4 	.word	0x20013ce4
 8014a5c:	20013ce8 	.word	0x20013ce8
 8014a60:	080149dd 	.word	0x080149dd

08014a64 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8014a64:	b580      	push	{r7, lr}
 8014a66:	b086      	sub	sp, #24
 8014a68:	af00      	add	r7, sp, #0
 8014a6a:	60f8      	str	r0, [r7, #12]
 8014a6c:	60b9      	str	r1, [r7, #8]
 8014a6e:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8014a70:	200a      	movs	r0, #10
 8014a72:	f7f9 fafd 	bl	800e070 <memp_malloc>
 8014a76:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8014a78:	693b      	ldr	r3, [r7, #16]
 8014a7a:	2b00      	cmp	r3, #0
 8014a7c:	d109      	bne.n	8014a92 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8014a7e:	693b      	ldr	r3, [r7, #16]
 8014a80:	2b00      	cmp	r3, #0
 8014a82:	d151      	bne.n	8014b28 <sys_timeout_abs+0xc4>
 8014a84:	4b2a      	ldr	r3, [pc, #168]	; (8014b30 <sys_timeout_abs+0xcc>)
 8014a86:	22be      	movs	r2, #190	; 0xbe
 8014a88:	492a      	ldr	r1, [pc, #168]	; (8014b34 <sys_timeout_abs+0xd0>)
 8014a8a:	482b      	ldr	r0, [pc, #172]	; (8014b38 <sys_timeout_abs+0xd4>)
 8014a8c:	f006 f9a0 	bl	801add0 <iprintf>
    return;
 8014a90:	e04a      	b.n	8014b28 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8014a92:	693b      	ldr	r3, [r7, #16]
 8014a94:	2200      	movs	r2, #0
 8014a96:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8014a98:	693b      	ldr	r3, [r7, #16]
 8014a9a:	68ba      	ldr	r2, [r7, #8]
 8014a9c:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8014a9e:	693b      	ldr	r3, [r7, #16]
 8014aa0:	687a      	ldr	r2, [r7, #4]
 8014aa2:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8014aa4:	693b      	ldr	r3, [r7, #16]
 8014aa6:	68fa      	ldr	r2, [r7, #12]
 8014aa8:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8014aaa:	4b24      	ldr	r3, [pc, #144]	; (8014b3c <sys_timeout_abs+0xd8>)
 8014aac:	681b      	ldr	r3, [r3, #0]
 8014aae:	2b00      	cmp	r3, #0
 8014ab0:	d103      	bne.n	8014aba <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8014ab2:	4a22      	ldr	r2, [pc, #136]	; (8014b3c <sys_timeout_abs+0xd8>)
 8014ab4:	693b      	ldr	r3, [r7, #16]
 8014ab6:	6013      	str	r3, [r2, #0]
    return;
 8014ab8:	e037      	b.n	8014b2a <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8014aba:	693b      	ldr	r3, [r7, #16]
 8014abc:	685a      	ldr	r2, [r3, #4]
 8014abe:	4b1f      	ldr	r3, [pc, #124]	; (8014b3c <sys_timeout_abs+0xd8>)
 8014ac0:	681b      	ldr	r3, [r3, #0]
 8014ac2:	685b      	ldr	r3, [r3, #4]
 8014ac4:	1ad3      	subs	r3, r2, r3
 8014ac6:	0fdb      	lsrs	r3, r3, #31
 8014ac8:	f003 0301 	and.w	r3, r3, #1
 8014acc:	b2db      	uxtb	r3, r3
 8014ace:	2b00      	cmp	r3, #0
 8014ad0:	d007      	beq.n	8014ae2 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8014ad2:	4b1a      	ldr	r3, [pc, #104]	; (8014b3c <sys_timeout_abs+0xd8>)
 8014ad4:	681a      	ldr	r2, [r3, #0]
 8014ad6:	693b      	ldr	r3, [r7, #16]
 8014ad8:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8014ada:	4a18      	ldr	r2, [pc, #96]	; (8014b3c <sys_timeout_abs+0xd8>)
 8014adc:	693b      	ldr	r3, [r7, #16]
 8014ade:	6013      	str	r3, [r2, #0]
 8014ae0:	e023      	b.n	8014b2a <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8014ae2:	4b16      	ldr	r3, [pc, #88]	; (8014b3c <sys_timeout_abs+0xd8>)
 8014ae4:	681b      	ldr	r3, [r3, #0]
 8014ae6:	617b      	str	r3, [r7, #20]
 8014ae8:	e01a      	b.n	8014b20 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8014aea:	697b      	ldr	r3, [r7, #20]
 8014aec:	681b      	ldr	r3, [r3, #0]
 8014aee:	2b00      	cmp	r3, #0
 8014af0:	d00b      	beq.n	8014b0a <sys_timeout_abs+0xa6>
 8014af2:	693b      	ldr	r3, [r7, #16]
 8014af4:	685a      	ldr	r2, [r3, #4]
 8014af6:	697b      	ldr	r3, [r7, #20]
 8014af8:	681b      	ldr	r3, [r3, #0]
 8014afa:	685b      	ldr	r3, [r3, #4]
 8014afc:	1ad3      	subs	r3, r2, r3
 8014afe:	0fdb      	lsrs	r3, r3, #31
 8014b00:	f003 0301 	and.w	r3, r3, #1
 8014b04:	b2db      	uxtb	r3, r3
 8014b06:	2b00      	cmp	r3, #0
 8014b08:	d007      	beq.n	8014b1a <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8014b0a:	697b      	ldr	r3, [r7, #20]
 8014b0c:	681a      	ldr	r2, [r3, #0]
 8014b0e:	693b      	ldr	r3, [r7, #16]
 8014b10:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8014b12:	697b      	ldr	r3, [r7, #20]
 8014b14:	693a      	ldr	r2, [r7, #16]
 8014b16:	601a      	str	r2, [r3, #0]
        break;
 8014b18:	e007      	b.n	8014b2a <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8014b1a:	697b      	ldr	r3, [r7, #20]
 8014b1c:	681b      	ldr	r3, [r3, #0]
 8014b1e:	617b      	str	r3, [r7, #20]
 8014b20:	697b      	ldr	r3, [r7, #20]
 8014b22:	2b00      	cmp	r3, #0
 8014b24:	d1e1      	bne.n	8014aea <sys_timeout_abs+0x86>
 8014b26:	e000      	b.n	8014b2a <sys_timeout_abs+0xc6>
    return;
 8014b28:	bf00      	nop
      }
    }
  }
}
 8014b2a:	3718      	adds	r7, #24
 8014b2c:	46bd      	mov	sp, r7
 8014b2e:	bd80      	pop	{r7, pc}
 8014b30:	0801fb5c 	.word	0x0801fb5c
 8014b34:	0801fb90 	.word	0x0801fb90
 8014b38:	0801fbd0 	.word	0x0801fbd0
 8014b3c:	20013d2c 	.word	0x20013d2c

08014b40 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8014b40:	b580      	push	{r7, lr}
 8014b42:	b086      	sub	sp, #24
 8014b44:	af00      	add	r7, sp, #0
 8014b46:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8014b48:	687b      	ldr	r3, [r7, #4]
 8014b4a:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8014b4c:	697b      	ldr	r3, [r7, #20]
 8014b4e:	685b      	ldr	r3, [r3, #4]
 8014b50:	4798      	blx	r3

  now = sys_now();
 8014b52:	f7ee f887 	bl	8002c64 <sys_now>
 8014b56:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8014b58:	697b      	ldr	r3, [r7, #20]
 8014b5a:	681a      	ldr	r2, [r3, #0]
 8014b5c:	4b0f      	ldr	r3, [pc, #60]	; (8014b9c <lwip_cyclic_timer+0x5c>)
 8014b5e:	681b      	ldr	r3, [r3, #0]
 8014b60:	4413      	add	r3, r2
 8014b62:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8014b64:	68fa      	ldr	r2, [r7, #12]
 8014b66:	693b      	ldr	r3, [r7, #16]
 8014b68:	1ad3      	subs	r3, r2, r3
 8014b6a:	0fdb      	lsrs	r3, r3, #31
 8014b6c:	f003 0301 	and.w	r3, r3, #1
 8014b70:	b2db      	uxtb	r3, r3
 8014b72:	2b00      	cmp	r3, #0
 8014b74:	d009      	beq.n	8014b8a <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8014b76:	697b      	ldr	r3, [r7, #20]
 8014b78:	681a      	ldr	r2, [r3, #0]
 8014b7a:	693b      	ldr	r3, [r7, #16]
 8014b7c:	4413      	add	r3, r2
 8014b7e:	687a      	ldr	r2, [r7, #4]
 8014b80:	4907      	ldr	r1, [pc, #28]	; (8014ba0 <lwip_cyclic_timer+0x60>)
 8014b82:	4618      	mov	r0, r3
 8014b84:	f7ff ff6e 	bl	8014a64 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8014b88:	e004      	b.n	8014b94 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8014b8a:	687a      	ldr	r2, [r7, #4]
 8014b8c:	4904      	ldr	r1, [pc, #16]	; (8014ba0 <lwip_cyclic_timer+0x60>)
 8014b8e:	68f8      	ldr	r0, [r7, #12]
 8014b90:	f7ff ff68 	bl	8014a64 <sys_timeout_abs>
}
 8014b94:	bf00      	nop
 8014b96:	3718      	adds	r7, #24
 8014b98:	46bd      	mov	sp, r7
 8014b9a:	bd80      	pop	{r7, pc}
 8014b9c:	20013d30 	.word	0x20013d30
 8014ba0:	08014b41 	.word	0x08014b41

08014ba4 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8014ba4:	b580      	push	{r7, lr}
 8014ba6:	b082      	sub	sp, #8
 8014ba8:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8014baa:	2301      	movs	r3, #1
 8014bac:	607b      	str	r3, [r7, #4]
 8014bae:	e00e      	b.n	8014bce <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8014bb0:	4a0b      	ldr	r2, [pc, #44]	; (8014be0 <sys_timeouts_init+0x3c>)
 8014bb2:	687b      	ldr	r3, [r7, #4]
 8014bb4:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8014bb8:	687b      	ldr	r3, [r7, #4]
 8014bba:	00db      	lsls	r3, r3, #3
 8014bbc:	4a08      	ldr	r2, [pc, #32]	; (8014be0 <sys_timeouts_init+0x3c>)
 8014bbe:	4413      	add	r3, r2
 8014bc0:	461a      	mov	r2, r3
 8014bc2:	4908      	ldr	r1, [pc, #32]	; (8014be4 <sys_timeouts_init+0x40>)
 8014bc4:	f000 f810 	bl	8014be8 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8014bc8:	687b      	ldr	r3, [r7, #4]
 8014bca:	3301      	adds	r3, #1
 8014bcc:	607b      	str	r3, [r7, #4]
 8014bce:	687b      	ldr	r3, [r7, #4]
 8014bd0:	2b04      	cmp	r3, #4
 8014bd2:	d9ed      	bls.n	8014bb0 <sys_timeouts_init+0xc>
  }
}
 8014bd4:	bf00      	nop
 8014bd6:	bf00      	nop
 8014bd8:	3708      	adds	r7, #8
 8014bda:	46bd      	mov	sp, r7
 8014bdc:	bd80      	pop	{r7, pc}
 8014bde:	bf00      	nop
 8014be0:	0806c848 	.word	0x0806c848
 8014be4:	08014b41 	.word	0x08014b41

08014be8 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8014be8:	b580      	push	{r7, lr}
 8014bea:	b086      	sub	sp, #24
 8014bec:	af00      	add	r7, sp, #0
 8014bee:	60f8      	str	r0, [r7, #12]
 8014bf0:	60b9      	str	r1, [r7, #8]
 8014bf2:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8014bf4:	68fb      	ldr	r3, [r7, #12]
 8014bf6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014bfa:	d306      	bcc.n	8014c0a <sys_timeout+0x22>
 8014bfc:	4b0a      	ldr	r3, [pc, #40]	; (8014c28 <sys_timeout+0x40>)
 8014bfe:	f240 1229 	movw	r2, #297	; 0x129
 8014c02:	490a      	ldr	r1, [pc, #40]	; (8014c2c <sys_timeout+0x44>)
 8014c04:	480a      	ldr	r0, [pc, #40]	; (8014c30 <sys_timeout+0x48>)
 8014c06:	f006 f8e3 	bl	801add0 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8014c0a:	f7ee f82b 	bl	8002c64 <sys_now>
 8014c0e:	4602      	mov	r2, r0
 8014c10:	68fb      	ldr	r3, [r7, #12]
 8014c12:	4413      	add	r3, r2
 8014c14:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8014c16:	687a      	ldr	r2, [r7, #4]
 8014c18:	68b9      	ldr	r1, [r7, #8]
 8014c1a:	6978      	ldr	r0, [r7, #20]
 8014c1c:	f7ff ff22 	bl	8014a64 <sys_timeout_abs>
#endif
}
 8014c20:	bf00      	nop
 8014c22:	3718      	adds	r7, #24
 8014c24:	46bd      	mov	sp, r7
 8014c26:	bd80      	pop	{r7, pc}
 8014c28:	0801fb5c 	.word	0x0801fb5c
 8014c2c:	0801fbf8 	.word	0x0801fbf8
 8014c30:	0801fbd0 	.word	0x0801fbd0

08014c34 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8014c34:	b580      	push	{r7, lr}
 8014c36:	b084      	sub	sp, #16
 8014c38:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8014c3a:	f7ee f813 	bl	8002c64 <sys_now>
 8014c3e:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8014c40:	4b17      	ldr	r3, [pc, #92]	; (8014ca0 <sys_check_timeouts+0x6c>)
 8014c42:	681b      	ldr	r3, [r3, #0]
 8014c44:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8014c46:	68bb      	ldr	r3, [r7, #8]
 8014c48:	2b00      	cmp	r3, #0
 8014c4a:	d022      	beq.n	8014c92 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8014c4c:	68bb      	ldr	r3, [r7, #8]
 8014c4e:	685b      	ldr	r3, [r3, #4]
 8014c50:	68fa      	ldr	r2, [r7, #12]
 8014c52:	1ad3      	subs	r3, r2, r3
 8014c54:	0fdb      	lsrs	r3, r3, #31
 8014c56:	f003 0301 	and.w	r3, r3, #1
 8014c5a:	b2db      	uxtb	r3, r3
 8014c5c:	2b00      	cmp	r3, #0
 8014c5e:	d11a      	bne.n	8014c96 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8014c60:	68bb      	ldr	r3, [r7, #8]
 8014c62:	681b      	ldr	r3, [r3, #0]
 8014c64:	4a0e      	ldr	r2, [pc, #56]	; (8014ca0 <sys_check_timeouts+0x6c>)
 8014c66:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8014c68:	68bb      	ldr	r3, [r7, #8]
 8014c6a:	689b      	ldr	r3, [r3, #8]
 8014c6c:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8014c6e:	68bb      	ldr	r3, [r7, #8]
 8014c70:	68db      	ldr	r3, [r3, #12]
 8014c72:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8014c74:	68bb      	ldr	r3, [r7, #8]
 8014c76:	685b      	ldr	r3, [r3, #4]
 8014c78:	4a0a      	ldr	r2, [pc, #40]	; (8014ca4 <sys_check_timeouts+0x70>)
 8014c7a:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8014c7c:	68b9      	ldr	r1, [r7, #8]
 8014c7e:	200a      	movs	r0, #10
 8014c80:	f7f9 fa48 	bl	800e114 <memp_free>
    if (handler != NULL) {
 8014c84:	687b      	ldr	r3, [r7, #4]
 8014c86:	2b00      	cmp	r3, #0
 8014c88:	d0da      	beq.n	8014c40 <sys_check_timeouts+0xc>
      handler(arg);
 8014c8a:	687b      	ldr	r3, [r7, #4]
 8014c8c:	6838      	ldr	r0, [r7, #0]
 8014c8e:	4798      	blx	r3
  do {
 8014c90:	e7d6      	b.n	8014c40 <sys_check_timeouts+0xc>
      return;
 8014c92:	bf00      	nop
 8014c94:	e000      	b.n	8014c98 <sys_check_timeouts+0x64>
      return;
 8014c96:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8014c98:	3710      	adds	r7, #16
 8014c9a:	46bd      	mov	sp, r7
 8014c9c:	bd80      	pop	{r7, pc}
 8014c9e:	bf00      	nop
 8014ca0:	20013d2c 	.word	0x20013d2c
 8014ca4:	20013d30 	.word	0x20013d30

08014ca8 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8014ca8:	b580      	push	{r7, lr}
 8014caa:	b082      	sub	sp, #8
 8014cac:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8014cae:	4b16      	ldr	r3, [pc, #88]	; (8014d08 <sys_timeouts_sleeptime+0x60>)
 8014cb0:	681b      	ldr	r3, [r3, #0]
 8014cb2:	2b00      	cmp	r3, #0
 8014cb4:	d102      	bne.n	8014cbc <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8014cb6:	f04f 33ff 	mov.w	r3, #4294967295
 8014cba:	e020      	b.n	8014cfe <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8014cbc:	f7ed ffd2 	bl	8002c64 <sys_now>
 8014cc0:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8014cc2:	4b11      	ldr	r3, [pc, #68]	; (8014d08 <sys_timeouts_sleeptime+0x60>)
 8014cc4:	681b      	ldr	r3, [r3, #0]
 8014cc6:	685a      	ldr	r2, [r3, #4]
 8014cc8:	687b      	ldr	r3, [r7, #4]
 8014cca:	1ad3      	subs	r3, r2, r3
 8014ccc:	0fdb      	lsrs	r3, r3, #31
 8014cce:	f003 0301 	and.w	r3, r3, #1
 8014cd2:	b2db      	uxtb	r3, r3
 8014cd4:	2b00      	cmp	r3, #0
 8014cd6:	d001      	beq.n	8014cdc <sys_timeouts_sleeptime+0x34>
    return 0;
 8014cd8:	2300      	movs	r3, #0
 8014cda:	e010      	b.n	8014cfe <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8014cdc:	4b0a      	ldr	r3, [pc, #40]	; (8014d08 <sys_timeouts_sleeptime+0x60>)
 8014cde:	681b      	ldr	r3, [r3, #0]
 8014ce0:	685a      	ldr	r2, [r3, #4]
 8014ce2:	687b      	ldr	r3, [r7, #4]
 8014ce4:	1ad3      	subs	r3, r2, r3
 8014ce6:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8014ce8:	683b      	ldr	r3, [r7, #0]
 8014cea:	2b00      	cmp	r3, #0
 8014cec:	da06      	bge.n	8014cfc <sys_timeouts_sleeptime+0x54>
 8014cee:	4b07      	ldr	r3, [pc, #28]	; (8014d0c <sys_timeouts_sleeptime+0x64>)
 8014cf0:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8014cf4:	4906      	ldr	r1, [pc, #24]	; (8014d10 <sys_timeouts_sleeptime+0x68>)
 8014cf6:	4807      	ldr	r0, [pc, #28]	; (8014d14 <sys_timeouts_sleeptime+0x6c>)
 8014cf8:	f006 f86a 	bl	801add0 <iprintf>
    return ret;
 8014cfc:	683b      	ldr	r3, [r7, #0]
  }
}
 8014cfe:	4618      	mov	r0, r3
 8014d00:	3708      	adds	r7, #8
 8014d02:	46bd      	mov	sp, r7
 8014d04:	bd80      	pop	{r7, pc}
 8014d06:	bf00      	nop
 8014d08:	20013d2c 	.word	0x20013d2c
 8014d0c:	0801fb5c 	.word	0x0801fb5c
 8014d10:	0801fc30 	.word	0x0801fc30
 8014d14:	0801fbd0 	.word	0x0801fbd0

08014d18 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8014d18:	b580      	push	{r7, lr}
 8014d1a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8014d1c:	f006 f8e6 	bl	801aeec <rand>
 8014d20:	4603      	mov	r3, r0
 8014d22:	b29b      	uxth	r3, r3
 8014d24:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8014d28:	b29b      	uxth	r3, r3
 8014d2a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8014d2e:	b29a      	uxth	r2, r3
 8014d30:	4b01      	ldr	r3, [pc, #4]	; (8014d38 <udp_init+0x20>)
 8014d32:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8014d34:	bf00      	nop
 8014d36:	bd80      	pop	{r7, pc}
 8014d38:	200000c0 	.word	0x200000c0

08014d3c <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8014d3c:	b480      	push	{r7}
 8014d3e:	b083      	sub	sp, #12
 8014d40:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8014d42:	2300      	movs	r3, #0
 8014d44:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8014d46:	4b17      	ldr	r3, [pc, #92]	; (8014da4 <udp_new_port+0x68>)
 8014d48:	881b      	ldrh	r3, [r3, #0]
 8014d4a:	1c5a      	adds	r2, r3, #1
 8014d4c:	b291      	uxth	r1, r2
 8014d4e:	4a15      	ldr	r2, [pc, #84]	; (8014da4 <udp_new_port+0x68>)
 8014d50:	8011      	strh	r1, [r2, #0]
 8014d52:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014d56:	4293      	cmp	r3, r2
 8014d58:	d103      	bne.n	8014d62 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8014d5a:	4b12      	ldr	r3, [pc, #72]	; (8014da4 <udp_new_port+0x68>)
 8014d5c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8014d60:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8014d62:	4b11      	ldr	r3, [pc, #68]	; (8014da8 <udp_new_port+0x6c>)
 8014d64:	681b      	ldr	r3, [r3, #0]
 8014d66:	603b      	str	r3, [r7, #0]
 8014d68:	e011      	b.n	8014d8e <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8014d6a:	683b      	ldr	r3, [r7, #0]
 8014d6c:	8a5a      	ldrh	r2, [r3, #18]
 8014d6e:	4b0d      	ldr	r3, [pc, #52]	; (8014da4 <udp_new_port+0x68>)
 8014d70:	881b      	ldrh	r3, [r3, #0]
 8014d72:	429a      	cmp	r2, r3
 8014d74:	d108      	bne.n	8014d88 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8014d76:	88fb      	ldrh	r3, [r7, #6]
 8014d78:	3301      	adds	r3, #1
 8014d7a:	80fb      	strh	r3, [r7, #6]
 8014d7c:	88fb      	ldrh	r3, [r7, #6]
 8014d7e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8014d82:	d3e0      	bcc.n	8014d46 <udp_new_port+0xa>
        return 0;
 8014d84:	2300      	movs	r3, #0
 8014d86:	e007      	b.n	8014d98 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8014d88:	683b      	ldr	r3, [r7, #0]
 8014d8a:	68db      	ldr	r3, [r3, #12]
 8014d8c:	603b      	str	r3, [r7, #0]
 8014d8e:	683b      	ldr	r3, [r7, #0]
 8014d90:	2b00      	cmp	r3, #0
 8014d92:	d1ea      	bne.n	8014d6a <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8014d94:	4b03      	ldr	r3, [pc, #12]	; (8014da4 <udp_new_port+0x68>)
 8014d96:	881b      	ldrh	r3, [r3, #0]
}
 8014d98:	4618      	mov	r0, r3
 8014d9a:	370c      	adds	r7, #12
 8014d9c:	46bd      	mov	sp, r7
 8014d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014da2:	4770      	bx	lr
 8014da4:	200000c0 	.word	0x200000c0
 8014da8:	20013d38 	.word	0x20013d38

08014dac <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8014dac:	b580      	push	{r7, lr}
 8014dae:	b084      	sub	sp, #16
 8014db0:	af00      	add	r7, sp, #0
 8014db2:	60f8      	str	r0, [r7, #12]
 8014db4:	60b9      	str	r1, [r7, #8]
 8014db6:	4613      	mov	r3, r2
 8014db8:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8014dba:	68fb      	ldr	r3, [r7, #12]
 8014dbc:	2b00      	cmp	r3, #0
 8014dbe:	d105      	bne.n	8014dcc <udp_input_local_match+0x20>
 8014dc0:	4b27      	ldr	r3, [pc, #156]	; (8014e60 <udp_input_local_match+0xb4>)
 8014dc2:	2287      	movs	r2, #135	; 0x87
 8014dc4:	4927      	ldr	r1, [pc, #156]	; (8014e64 <udp_input_local_match+0xb8>)
 8014dc6:	4828      	ldr	r0, [pc, #160]	; (8014e68 <udp_input_local_match+0xbc>)
 8014dc8:	f006 f802 	bl	801add0 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8014dcc:	68bb      	ldr	r3, [r7, #8]
 8014dce:	2b00      	cmp	r3, #0
 8014dd0:	d105      	bne.n	8014dde <udp_input_local_match+0x32>
 8014dd2:	4b23      	ldr	r3, [pc, #140]	; (8014e60 <udp_input_local_match+0xb4>)
 8014dd4:	2288      	movs	r2, #136	; 0x88
 8014dd6:	4925      	ldr	r1, [pc, #148]	; (8014e6c <udp_input_local_match+0xc0>)
 8014dd8:	4823      	ldr	r0, [pc, #140]	; (8014e68 <udp_input_local_match+0xbc>)
 8014dda:	f005 fff9 	bl	801add0 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8014dde:	68fb      	ldr	r3, [r7, #12]
 8014de0:	7a1b      	ldrb	r3, [r3, #8]
 8014de2:	2b00      	cmp	r3, #0
 8014de4:	d00b      	beq.n	8014dfe <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8014de6:	68fb      	ldr	r3, [r7, #12]
 8014de8:	7a1a      	ldrb	r2, [r3, #8]
 8014dea:	4b21      	ldr	r3, [pc, #132]	; (8014e70 <udp_input_local_match+0xc4>)
 8014dec:	685b      	ldr	r3, [r3, #4]
 8014dee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8014df2:	3301      	adds	r3, #1
 8014df4:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8014df6:	429a      	cmp	r2, r3
 8014df8:	d001      	beq.n	8014dfe <udp_input_local_match+0x52>
    return 0;
 8014dfa:	2300      	movs	r3, #0
 8014dfc:	e02b      	b.n	8014e56 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8014dfe:	79fb      	ldrb	r3, [r7, #7]
 8014e00:	2b00      	cmp	r3, #0
 8014e02:	d018      	beq.n	8014e36 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8014e04:	68fb      	ldr	r3, [r7, #12]
 8014e06:	2b00      	cmp	r3, #0
 8014e08:	d013      	beq.n	8014e32 <udp_input_local_match+0x86>
 8014e0a:	68fb      	ldr	r3, [r7, #12]
 8014e0c:	681b      	ldr	r3, [r3, #0]
 8014e0e:	2b00      	cmp	r3, #0
 8014e10:	d00f      	beq.n	8014e32 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8014e12:	4b17      	ldr	r3, [pc, #92]	; (8014e70 <udp_input_local_match+0xc4>)
 8014e14:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8014e16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014e1a:	d00a      	beq.n	8014e32 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8014e1c:	68fb      	ldr	r3, [r7, #12]
 8014e1e:	681a      	ldr	r2, [r3, #0]
 8014e20:	4b13      	ldr	r3, [pc, #76]	; (8014e70 <udp_input_local_match+0xc4>)
 8014e22:	695b      	ldr	r3, [r3, #20]
 8014e24:	405a      	eors	r2, r3
 8014e26:	68bb      	ldr	r3, [r7, #8]
 8014e28:	3308      	adds	r3, #8
 8014e2a:	681b      	ldr	r3, [r3, #0]
 8014e2c:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8014e2e:	2b00      	cmp	r3, #0
 8014e30:	d110      	bne.n	8014e54 <udp_input_local_match+0xa8>
          return 1;
 8014e32:	2301      	movs	r3, #1
 8014e34:	e00f      	b.n	8014e56 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8014e36:	68fb      	ldr	r3, [r7, #12]
 8014e38:	2b00      	cmp	r3, #0
 8014e3a:	d009      	beq.n	8014e50 <udp_input_local_match+0xa4>
 8014e3c:	68fb      	ldr	r3, [r7, #12]
 8014e3e:	681b      	ldr	r3, [r3, #0]
 8014e40:	2b00      	cmp	r3, #0
 8014e42:	d005      	beq.n	8014e50 <udp_input_local_match+0xa4>
 8014e44:	68fb      	ldr	r3, [r7, #12]
 8014e46:	681a      	ldr	r2, [r3, #0]
 8014e48:	4b09      	ldr	r3, [pc, #36]	; (8014e70 <udp_input_local_match+0xc4>)
 8014e4a:	695b      	ldr	r3, [r3, #20]
 8014e4c:	429a      	cmp	r2, r3
 8014e4e:	d101      	bne.n	8014e54 <udp_input_local_match+0xa8>
        return 1;
 8014e50:	2301      	movs	r3, #1
 8014e52:	e000      	b.n	8014e56 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8014e54:	2300      	movs	r3, #0
}
 8014e56:	4618      	mov	r0, r3
 8014e58:	3710      	adds	r7, #16
 8014e5a:	46bd      	mov	sp, r7
 8014e5c:	bd80      	pop	{r7, pc}
 8014e5e:	bf00      	nop
 8014e60:	0801fc44 	.word	0x0801fc44
 8014e64:	0801fc74 	.word	0x0801fc74
 8014e68:	0801fc98 	.word	0x0801fc98
 8014e6c:	0801fcc0 	.word	0x0801fcc0
 8014e70:	2000a264 	.word	0x2000a264

08014e74 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8014e74:	b590      	push	{r4, r7, lr}
 8014e76:	b08d      	sub	sp, #52	; 0x34
 8014e78:	af02      	add	r7, sp, #8
 8014e7a:	6078      	str	r0, [r7, #4]
 8014e7c:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8014e7e:	2300      	movs	r3, #0
 8014e80:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8014e82:	687b      	ldr	r3, [r7, #4]
 8014e84:	2b00      	cmp	r3, #0
 8014e86:	d105      	bne.n	8014e94 <udp_input+0x20>
 8014e88:	4b87      	ldr	r3, [pc, #540]	; (80150a8 <udp_input+0x234>)
 8014e8a:	22cf      	movs	r2, #207	; 0xcf
 8014e8c:	4987      	ldr	r1, [pc, #540]	; (80150ac <udp_input+0x238>)
 8014e8e:	4888      	ldr	r0, [pc, #544]	; (80150b0 <udp_input+0x23c>)
 8014e90:	f005 ff9e 	bl	801add0 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8014e94:	683b      	ldr	r3, [r7, #0]
 8014e96:	2b00      	cmp	r3, #0
 8014e98:	d105      	bne.n	8014ea6 <udp_input+0x32>
 8014e9a:	4b83      	ldr	r3, [pc, #524]	; (80150a8 <udp_input+0x234>)
 8014e9c:	22d0      	movs	r2, #208	; 0xd0
 8014e9e:	4985      	ldr	r1, [pc, #532]	; (80150b4 <udp_input+0x240>)
 8014ea0:	4883      	ldr	r0, [pc, #524]	; (80150b0 <udp_input+0x23c>)
 8014ea2:	f005 ff95 	bl	801add0 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8014ea6:	687b      	ldr	r3, [r7, #4]
 8014ea8:	895b      	ldrh	r3, [r3, #10]
 8014eaa:	2b07      	cmp	r3, #7
 8014eac:	d803      	bhi.n	8014eb6 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8014eae:	6878      	ldr	r0, [r7, #4]
 8014eb0:	f7f9 ffd2 	bl	800ee58 <pbuf_free>
    goto end;
 8014eb4:	e0f0      	b.n	8015098 <udp_input+0x224>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8014eb6:	687b      	ldr	r3, [r7, #4]
 8014eb8:	685b      	ldr	r3, [r3, #4]
 8014eba:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8014ebc:	4b7e      	ldr	r3, [pc, #504]	; (80150b8 <udp_input+0x244>)
 8014ebe:	695b      	ldr	r3, [r3, #20]
 8014ec0:	4a7d      	ldr	r2, [pc, #500]	; (80150b8 <udp_input+0x244>)
 8014ec2:	6812      	ldr	r2, [r2, #0]
 8014ec4:	4611      	mov	r1, r2
 8014ec6:	4618      	mov	r0, r3
 8014ec8:	f004 f81c 	bl	8018f04 <ip4_addr_isbroadcast_u32>
 8014ecc:	4603      	mov	r3, r0
 8014ece:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8014ed0:	697b      	ldr	r3, [r7, #20]
 8014ed2:	881b      	ldrh	r3, [r3, #0]
 8014ed4:	b29b      	uxth	r3, r3
 8014ed6:	4618      	mov	r0, r3
 8014ed8:	f7f8 fa9c 	bl	800d414 <lwip_htons>
 8014edc:	4603      	mov	r3, r0
 8014ede:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8014ee0:	697b      	ldr	r3, [r7, #20]
 8014ee2:	885b      	ldrh	r3, [r3, #2]
 8014ee4:	b29b      	uxth	r3, r3
 8014ee6:	4618      	mov	r0, r3
 8014ee8:	f7f8 fa94 	bl	800d414 <lwip_htons>
 8014eec:	4603      	mov	r3, r0
 8014eee:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8014ef0:	2300      	movs	r3, #0
 8014ef2:	61fb      	str	r3, [r7, #28]
  prev = NULL;
 8014ef4:	2300      	movs	r3, #0
 8014ef6:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8014ef8:	2300      	movs	r3, #0
 8014efa:	627b      	str	r3, [r7, #36]	; 0x24
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8014efc:	4b6f      	ldr	r3, [pc, #444]	; (80150bc <udp_input+0x248>)
 8014efe:	681b      	ldr	r3, [r3, #0]
 8014f00:	61fb      	str	r3, [r7, #28]
 8014f02:	e054      	b.n	8014fae <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8014f04:	69fb      	ldr	r3, [r7, #28]
 8014f06:	8a5b      	ldrh	r3, [r3, #18]
 8014f08:	89fa      	ldrh	r2, [r7, #14]
 8014f0a:	429a      	cmp	r2, r3
 8014f0c:	d14a      	bne.n	8014fa4 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8014f0e:	7cfb      	ldrb	r3, [r7, #19]
 8014f10:	461a      	mov	r2, r3
 8014f12:	6839      	ldr	r1, [r7, #0]
 8014f14:	69f8      	ldr	r0, [r7, #28]
 8014f16:	f7ff ff49 	bl	8014dac <udp_input_local_match>
 8014f1a:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8014f1c:	2b00      	cmp	r3, #0
 8014f1e:	d041      	beq.n	8014fa4 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8014f20:	69fb      	ldr	r3, [r7, #28]
 8014f22:	7c1b      	ldrb	r3, [r3, #16]
 8014f24:	f003 0304 	and.w	r3, r3, #4
 8014f28:	2b00      	cmp	r3, #0
 8014f2a:	d11d      	bne.n	8014f68 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8014f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f2e:	2b00      	cmp	r3, #0
 8014f30:	d102      	bne.n	8014f38 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8014f32:	69fb      	ldr	r3, [r7, #28]
 8014f34:	627b      	str	r3, [r7, #36]	; 0x24
 8014f36:	e017      	b.n	8014f68 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8014f38:	7cfb      	ldrb	r3, [r7, #19]
 8014f3a:	2b00      	cmp	r3, #0
 8014f3c:	d014      	beq.n	8014f68 <udp_input+0xf4>
 8014f3e:	4b5e      	ldr	r3, [pc, #376]	; (80150b8 <udp_input+0x244>)
 8014f40:	695b      	ldr	r3, [r3, #20]
 8014f42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014f46:	d10f      	bne.n	8014f68 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8014f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f4a:	681a      	ldr	r2, [r3, #0]
 8014f4c:	683b      	ldr	r3, [r7, #0]
 8014f4e:	3304      	adds	r3, #4
 8014f50:	681b      	ldr	r3, [r3, #0]
 8014f52:	429a      	cmp	r2, r3
 8014f54:	d008      	beq.n	8014f68 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8014f56:	69fb      	ldr	r3, [r7, #28]
 8014f58:	681a      	ldr	r2, [r3, #0]
 8014f5a:	683b      	ldr	r3, [r7, #0]
 8014f5c:	3304      	adds	r3, #4
 8014f5e:	681b      	ldr	r3, [r3, #0]
 8014f60:	429a      	cmp	r2, r3
 8014f62:	d101      	bne.n	8014f68 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8014f64:	69fb      	ldr	r3, [r7, #28]
 8014f66:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8014f68:	69fb      	ldr	r3, [r7, #28]
 8014f6a:	8a9b      	ldrh	r3, [r3, #20]
 8014f6c:	8a3a      	ldrh	r2, [r7, #16]
 8014f6e:	429a      	cmp	r2, r3
 8014f70:	d118      	bne.n	8014fa4 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8014f72:	69fb      	ldr	r3, [r7, #28]
 8014f74:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8014f76:	2b00      	cmp	r3, #0
 8014f78:	d005      	beq.n	8014f86 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8014f7a:	69fb      	ldr	r3, [r7, #28]
 8014f7c:	685a      	ldr	r2, [r3, #4]
 8014f7e:	4b4e      	ldr	r3, [pc, #312]	; (80150b8 <udp_input+0x244>)
 8014f80:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8014f82:	429a      	cmp	r2, r3
 8014f84:	d10e      	bne.n	8014fa4 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8014f86:	6a3b      	ldr	r3, [r7, #32]
 8014f88:	2b00      	cmp	r3, #0
 8014f8a:	d014      	beq.n	8014fb6 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8014f8c:	69fb      	ldr	r3, [r7, #28]
 8014f8e:	68da      	ldr	r2, [r3, #12]
 8014f90:	6a3b      	ldr	r3, [r7, #32]
 8014f92:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8014f94:	4b49      	ldr	r3, [pc, #292]	; (80150bc <udp_input+0x248>)
 8014f96:	681a      	ldr	r2, [r3, #0]
 8014f98:	69fb      	ldr	r3, [r7, #28]
 8014f9a:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8014f9c:	4a47      	ldr	r2, [pc, #284]	; (80150bc <udp_input+0x248>)
 8014f9e:	69fb      	ldr	r3, [r7, #28]
 8014fa0:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8014fa2:	e008      	b.n	8014fb6 <udp_input+0x142>
      }
    }

    prev = pcb;
 8014fa4:	69fb      	ldr	r3, [r7, #28]
 8014fa6:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8014fa8:	69fb      	ldr	r3, [r7, #28]
 8014faa:	68db      	ldr	r3, [r3, #12]
 8014fac:	61fb      	str	r3, [r7, #28]
 8014fae:	69fb      	ldr	r3, [r7, #28]
 8014fb0:	2b00      	cmp	r3, #0
 8014fb2:	d1a7      	bne.n	8014f04 <udp_input+0x90>
 8014fb4:	e000      	b.n	8014fb8 <udp_input+0x144>
        break;
 8014fb6:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8014fb8:	69fb      	ldr	r3, [r7, #28]
 8014fba:	2b00      	cmp	r3, #0
 8014fbc:	d101      	bne.n	8014fc2 <udp_input+0x14e>
    pcb = uncon_pcb;
 8014fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fc0:	61fb      	str	r3, [r7, #28]
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8014fc2:	69fb      	ldr	r3, [r7, #28]
 8014fc4:	2b00      	cmp	r3, #0
 8014fc6:	d002      	beq.n	8014fce <udp_input+0x15a>
    for_us = 1;
 8014fc8:	2301      	movs	r3, #1
 8014fca:	76fb      	strb	r3, [r7, #27]
 8014fcc:	e00a      	b.n	8014fe4 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8014fce:	683b      	ldr	r3, [r7, #0]
 8014fd0:	3304      	adds	r3, #4
 8014fd2:	681a      	ldr	r2, [r3, #0]
 8014fd4:	4b38      	ldr	r3, [pc, #224]	; (80150b8 <udp_input+0x244>)
 8014fd6:	695b      	ldr	r3, [r3, #20]
 8014fd8:	429a      	cmp	r2, r3
 8014fda:	bf0c      	ite	eq
 8014fdc:	2301      	moveq	r3, #1
 8014fde:	2300      	movne	r3, #0
 8014fe0:	b2db      	uxtb	r3, r3
 8014fe2:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8014fe4:	7efb      	ldrb	r3, [r7, #27]
 8014fe6:	2b00      	cmp	r3, #0
 8014fe8:	d052      	beq.n	8015090 <udp_input+0x21c>
          goto chkerr;
        }
      } else
#endif /* LWIP_UDPLITE */
      {
        if (udphdr->chksum != 0) {
 8014fea:	697b      	ldr	r3, [r7, #20]
 8014fec:	88db      	ldrh	r3, [r3, #6]
 8014fee:	b29b      	uxth	r3, r3
 8014ff0:	2b00      	cmp	r3, #0
 8014ff2:	d00b      	beq.n	801500c <udp_input+0x198>
          if (ip_chksum_pseudo(p, IP_PROTO_UDP, p->tot_len,
 8014ff4:	687b      	ldr	r3, [r7, #4]
 8014ff6:	891a      	ldrh	r2, [r3, #8]
 8014ff8:	4b31      	ldr	r3, [pc, #196]	; (80150c0 <udp_input+0x24c>)
 8014ffa:	9300      	str	r3, [sp, #0]
 8014ffc:	4b31      	ldr	r3, [pc, #196]	; (80150c4 <udp_input+0x250>)
 8014ffe:	2111      	movs	r1, #17
 8015000:	6878      	ldr	r0, [r7, #4]
 8015002:	f7f8 fb39 	bl	800d678 <ip_chksum_pseudo>
 8015006:	4603      	mov	r3, r0
 8015008:	2b00      	cmp	r3, #0
 801500a:	d146      	bne.n	801509a <udp_input+0x226>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801500c:	2108      	movs	r1, #8
 801500e:	6878      	ldr	r0, [r7, #4]
 8015010:	f7f9 fe9c 	bl	800ed4c <pbuf_remove_header>
 8015014:	4603      	mov	r3, r0
 8015016:	2b00      	cmp	r3, #0
 8015018:	d00a      	beq.n	8015030 <udp_input+0x1bc>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801501a:	4b23      	ldr	r3, [pc, #140]	; (80150a8 <udp_input+0x234>)
 801501c:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8015020:	4929      	ldr	r1, [pc, #164]	; (80150c8 <udp_input+0x254>)
 8015022:	4823      	ldr	r0, [pc, #140]	; (80150b0 <udp_input+0x23c>)
 8015024:	f005 fed4 	bl	801add0 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8015028:	6878      	ldr	r0, [r7, #4]
 801502a:	f7f9 ff15 	bl	800ee58 <pbuf_free>
      goto end;
 801502e:	e033      	b.n	8015098 <udp_input+0x224>
    }

    if (pcb != NULL) {
 8015030:	69fb      	ldr	r3, [r7, #28]
 8015032:	2b00      	cmp	r3, #0
 8015034:	d012      	beq.n	801505c <udp_input+0x1e8>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8015036:	69fb      	ldr	r3, [r7, #28]
 8015038:	699b      	ldr	r3, [r3, #24]
 801503a:	2b00      	cmp	r3, #0
 801503c:	d00a      	beq.n	8015054 <udp_input+0x1e0>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801503e:	69fb      	ldr	r3, [r7, #28]
 8015040:	699c      	ldr	r4, [r3, #24]
 8015042:	69fb      	ldr	r3, [r7, #28]
 8015044:	69d8      	ldr	r0, [r3, #28]
 8015046:	8a3b      	ldrh	r3, [r7, #16]
 8015048:	9300      	str	r3, [sp, #0]
 801504a:	4b1e      	ldr	r3, [pc, #120]	; (80150c4 <udp_input+0x250>)
 801504c:	687a      	ldr	r2, [r7, #4]
 801504e:	69f9      	ldr	r1, [r7, #28]
 8015050:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8015052:	e026      	b.n	80150a2 <udp_input+0x22e>
        pbuf_free(p);
 8015054:	6878      	ldr	r0, [r7, #4]
 8015056:	f7f9 feff 	bl	800ee58 <pbuf_free>
        goto end;
 801505a:	e01d      	b.n	8015098 <udp_input+0x224>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801505c:	7cfb      	ldrb	r3, [r7, #19]
 801505e:	2b00      	cmp	r3, #0
 8015060:	d112      	bne.n	8015088 <udp_input+0x214>
 8015062:	4b15      	ldr	r3, [pc, #84]	; (80150b8 <udp_input+0x244>)
 8015064:	695b      	ldr	r3, [r3, #20]
 8015066:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801506a:	2be0      	cmp	r3, #224	; 0xe0
 801506c:	d00c      	beq.n	8015088 <udp_input+0x214>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801506e:	4b12      	ldr	r3, [pc, #72]	; (80150b8 <udp_input+0x244>)
 8015070:	899b      	ldrh	r3, [r3, #12]
 8015072:	3308      	adds	r3, #8
 8015074:	b29b      	uxth	r3, r3
 8015076:	b21b      	sxth	r3, r3
 8015078:	4619      	mov	r1, r3
 801507a:	6878      	ldr	r0, [r7, #4]
 801507c:	f7f9 fed9 	bl	800ee32 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8015080:	2103      	movs	r1, #3
 8015082:	6878      	ldr	r0, [r7, #4]
 8015084:	f003 fb84 	bl	8018790 <icmp_dest_unreach>
      pbuf_free(p);
 8015088:	6878      	ldr	r0, [r7, #4]
 801508a:	f7f9 fee5 	bl	800ee58 <pbuf_free>
  return;
 801508e:	e008      	b.n	80150a2 <udp_input+0x22e>
    pbuf_free(p);
 8015090:	6878      	ldr	r0, [r7, #4]
 8015092:	f7f9 fee1 	bl	800ee58 <pbuf_free>
  return;
 8015096:	e004      	b.n	80150a2 <udp_input+0x22e>
 8015098:	e003      	b.n	80150a2 <udp_input+0x22e>
            goto chkerr;
 801509a:	bf00      	nop
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
              ("udp_input: UDP (or UDP Lite) datagram discarded due to failing checksum\n"));
  UDP_STATS_INC(udp.chkerr);
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
 801509c:	6878      	ldr	r0, [r7, #4]
 801509e:	f7f9 fedb 	bl	800ee58 <pbuf_free>
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80150a2:	372c      	adds	r7, #44	; 0x2c
 80150a4:	46bd      	mov	sp, r7
 80150a6:	bd90      	pop	{r4, r7, pc}
 80150a8:	0801fc44 	.word	0x0801fc44
 80150ac:	0801fce8 	.word	0x0801fce8
 80150b0:	0801fc98 	.word	0x0801fc98
 80150b4:	0801fd00 	.word	0x0801fd00
 80150b8:	2000a264 	.word	0x2000a264
 80150bc:	20013d38 	.word	0x20013d38
 80150c0:	2000a278 	.word	0x2000a278
 80150c4:	2000a274 	.word	0x2000a274
 80150c8:	0801fd1c 	.word	0x0801fd1c

080150cc <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 80150cc:	b580      	push	{r7, lr}
 80150ce:	b082      	sub	sp, #8
 80150d0:	af00      	add	r7, sp, #0
 80150d2:	6078      	str	r0, [r7, #4]
 80150d4:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 80150d6:	687b      	ldr	r3, [r7, #4]
 80150d8:	2b00      	cmp	r3, #0
 80150da:	d109      	bne.n	80150f0 <udp_send+0x24>
 80150dc:	4b11      	ldr	r3, [pc, #68]	; (8015124 <udp_send+0x58>)
 80150de:	f240 12d5 	movw	r2, #469	; 0x1d5
 80150e2:	4911      	ldr	r1, [pc, #68]	; (8015128 <udp_send+0x5c>)
 80150e4:	4811      	ldr	r0, [pc, #68]	; (801512c <udp_send+0x60>)
 80150e6:	f005 fe73 	bl	801add0 <iprintf>
 80150ea:	f06f 030f 	mvn.w	r3, #15
 80150ee:	e015      	b.n	801511c <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 80150f0:	683b      	ldr	r3, [r7, #0]
 80150f2:	2b00      	cmp	r3, #0
 80150f4:	d109      	bne.n	801510a <udp_send+0x3e>
 80150f6:	4b0b      	ldr	r3, [pc, #44]	; (8015124 <udp_send+0x58>)
 80150f8:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 80150fc:	490c      	ldr	r1, [pc, #48]	; (8015130 <udp_send+0x64>)
 80150fe:	480b      	ldr	r0, [pc, #44]	; (801512c <udp_send+0x60>)
 8015100:	f005 fe66 	bl	801add0 <iprintf>
 8015104:	f06f 030f 	mvn.w	r3, #15
 8015108:	e008      	b.n	801511c <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 801510a:	687b      	ldr	r3, [r7, #4]
 801510c:	1d1a      	adds	r2, r3, #4
 801510e:	687b      	ldr	r3, [r7, #4]
 8015110:	8a9b      	ldrh	r3, [r3, #20]
 8015112:	6839      	ldr	r1, [r7, #0]
 8015114:	6878      	ldr	r0, [r7, #4]
 8015116:	f000 f80d 	bl	8015134 <udp_sendto>
 801511a:	4603      	mov	r3, r0
}
 801511c:	4618      	mov	r0, r3
 801511e:	3708      	adds	r7, #8
 8015120:	46bd      	mov	sp, r7
 8015122:	bd80      	pop	{r7, pc}
 8015124:	0801fc44 	.word	0x0801fc44
 8015128:	0801fd38 	.word	0x0801fd38
 801512c:	0801fc98 	.word	0x0801fc98
 8015130:	0801fd50 	.word	0x0801fd50

08015134 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 8015134:	b580      	push	{r7, lr}
 8015136:	b088      	sub	sp, #32
 8015138:	af02      	add	r7, sp, #8
 801513a:	60f8      	str	r0, [r7, #12]
 801513c:	60b9      	str	r1, [r7, #8]
 801513e:	607a      	str	r2, [r7, #4]
 8015140:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 8015142:	68fb      	ldr	r3, [r7, #12]
 8015144:	2b00      	cmp	r3, #0
 8015146:	d109      	bne.n	801515c <udp_sendto+0x28>
 8015148:	4b23      	ldr	r3, [pc, #140]	; (80151d8 <udp_sendto+0xa4>)
 801514a:	f44f 7206 	mov.w	r2, #536	; 0x218
 801514e:	4923      	ldr	r1, [pc, #140]	; (80151dc <udp_sendto+0xa8>)
 8015150:	4823      	ldr	r0, [pc, #140]	; (80151e0 <udp_sendto+0xac>)
 8015152:	f005 fe3d 	bl	801add0 <iprintf>
 8015156:	f06f 030f 	mvn.w	r3, #15
 801515a:	e038      	b.n	80151ce <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 801515c:	68bb      	ldr	r3, [r7, #8]
 801515e:	2b00      	cmp	r3, #0
 8015160:	d109      	bne.n	8015176 <udp_sendto+0x42>
 8015162:	4b1d      	ldr	r3, [pc, #116]	; (80151d8 <udp_sendto+0xa4>)
 8015164:	f240 2219 	movw	r2, #537	; 0x219
 8015168:	491e      	ldr	r1, [pc, #120]	; (80151e4 <udp_sendto+0xb0>)
 801516a:	481d      	ldr	r0, [pc, #116]	; (80151e0 <udp_sendto+0xac>)
 801516c:	f005 fe30 	bl	801add0 <iprintf>
 8015170:	f06f 030f 	mvn.w	r3, #15
 8015174:	e02b      	b.n	80151ce <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8015176:	687b      	ldr	r3, [r7, #4]
 8015178:	2b00      	cmp	r3, #0
 801517a:	d109      	bne.n	8015190 <udp_sendto+0x5c>
 801517c:	4b16      	ldr	r3, [pc, #88]	; (80151d8 <udp_sendto+0xa4>)
 801517e:	f240 221a 	movw	r2, #538	; 0x21a
 8015182:	4919      	ldr	r1, [pc, #100]	; (80151e8 <udp_sendto+0xb4>)
 8015184:	4816      	ldr	r0, [pc, #88]	; (80151e0 <udp_sendto+0xac>)
 8015186:	f005 fe23 	bl	801add0 <iprintf>
 801518a:	f06f 030f 	mvn.w	r3, #15
 801518e:	e01e      	b.n	80151ce <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8015190:	68fb      	ldr	r3, [r7, #12]
 8015192:	7a1b      	ldrb	r3, [r3, #8]
 8015194:	2b00      	cmp	r3, #0
 8015196:	d006      	beq.n	80151a6 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 8015198:	68fb      	ldr	r3, [r7, #12]
 801519a:	7a1b      	ldrb	r3, [r3, #8]
 801519c:	4618      	mov	r0, r3
 801519e:	f7f9 fac9 	bl	800e734 <netif_get_by_index>
 80151a2:	6178      	str	r0, [r7, #20]
 80151a4:	e003      	b.n	80151ae <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 80151a6:	6878      	ldr	r0, [r7, #4]
 80151a8:	f003 fb86 	bl	80188b8 <ip4_route>
 80151ac:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 80151ae:	697b      	ldr	r3, [r7, #20]
 80151b0:	2b00      	cmp	r3, #0
 80151b2:	d102      	bne.n	80151ba <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 80151b4:	f06f 0303 	mvn.w	r3, #3
 80151b8:	e009      	b.n	80151ce <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 80151ba:	887a      	ldrh	r2, [r7, #2]
 80151bc:	697b      	ldr	r3, [r7, #20]
 80151be:	9300      	str	r3, [sp, #0]
 80151c0:	4613      	mov	r3, r2
 80151c2:	687a      	ldr	r2, [r7, #4]
 80151c4:	68b9      	ldr	r1, [r7, #8]
 80151c6:	68f8      	ldr	r0, [r7, #12]
 80151c8:	f000 f810 	bl	80151ec <udp_sendto_if>
 80151cc:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80151ce:	4618      	mov	r0, r3
 80151d0:	3718      	adds	r7, #24
 80151d2:	46bd      	mov	sp, r7
 80151d4:	bd80      	pop	{r7, pc}
 80151d6:	bf00      	nop
 80151d8:	0801fc44 	.word	0x0801fc44
 80151dc:	0801fd68 	.word	0x0801fd68
 80151e0:	0801fc98 	.word	0x0801fc98
 80151e4:	0801fd80 	.word	0x0801fd80
 80151e8:	0801fd9c 	.word	0x0801fd9c

080151ec <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 80151ec:	b580      	push	{r7, lr}
 80151ee:	b088      	sub	sp, #32
 80151f0:	af02      	add	r7, sp, #8
 80151f2:	60f8      	str	r0, [r7, #12]
 80151f4:	60b9      	str	r1, [r7, #8]
 80151f6:	607a      	str	r2, [r7, #4]
 80151f8:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 80151fa:	68fb      	ldr	r3, [r7, #12]
 80151fc:	2b00      	cmp	r3, #0
 80151fe:	d109      	bne.n	8015214 <udp_sendto_if+0x28>
 8015200:	4b2e      	ldr	r3, [pc, #184]	; (80152bc <udp_sendto_if+0xd0>)
 8015202:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015206:	492e      	ldr	r1, [pc, #184]	; (80152c0 <udp_sendto_if+0xd4>)
 8015208:	482e      	ldr	r0, [pc, #184]	; (80152c4 <udp_sendto_if+0xd8>)
 801520a:	f005 fde1 	bl	801add0 <iprintf>
 801520e:	f06f 030f 	mvn.w	r3, #15
 8015212:	e04f      	b.n	80152b4 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8015214:	68bb      	ldr	r3, [r7, #8]
 8015216:	2b00      	cmp	r3, #0
 8015218:	d109      	bne.n	801522e <udp_sendto_if+0x42>
 801521a:	4b28      	ldr	r3, [pc, #160]	; (80152bc <udp_sendto_if+0xd0>)
 801521c:	f240 2281 	movw	r2, #641	; 0x281
 8015220:	4929      	ldr	r1, [pc, #164]	; (80152c8 <udp_sendto_if+0xdc>)
 8015222:	4828      	ldr	r0, [pc, #160]	; (80152c4 <udp_sendto_if+0xd8>)
 8015224:	f005 fdd4 	bl	801add0 <iprintf>
 8015228:	f06f 030f 	mvn.w	r3, #15
 801522c:	e042      	b.n	80152b4 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801522e:	687b      	ldr	r3, [r7, #4]
 8015230:	2b00      	cmp	r3, #0
 8015232:	d109      	bne.n	8015248 <udp_sendto_if+0x5c>
 8015234:	4b21      	ldr	r3, [pc, #132]	; (80152bc <udp_sendto_if+0xd0>)
 8015236:	f240 2282 	movw	r2, #642	; 0x282
 801523a:	4924      	ldr	r1, [pc, #144]	; (80152cc <udp_sendto_if+0xe0>)
 801523c:	4821      	ldr	r0, [pc, #132]	; (80152c4 <udp_sendto_if+0xd8>)
 801523e:	f005 fdc7 	bl	801add0 <iprintf>
 8015242:	f06f 030f 	mvn.w	r3, #15
 8015246:	e035      	b.n	80152b4 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8015248:	6a3b      	ldr	r3, [r7, #32]
 801524a:	2b00      	cmp	r3, #0
 801524c:	d109      	bne.n	8015262 <udp_sendto_if+0x76>
 801524e:	4b1b      	ldr	r3, [pc, #108]	; (80152bc <udp_sendto_if+0xd0>)
 8015250:	f240 2283 	movw	r2, #643	; 0x283
 8015254:	491e      	ldr	r1, [pc, #120]	; (80152d0 <udp_sendto_if+0xe4>)
 8015256:	481b      	ldr	r0, [pc, #108]	; (80152c4 <udp_sendto_if+0xd8>)
 8015258:	f005 fdba 	bl	801add0 <iprintf>
 801525c:	f06f 030f 	mvn.w	r3, #15
 8015260:	e028      	b.n	80152b4 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8015262:	68fb      	ldr	r3, [r7, #12]
 8015264:	2b00      	cmp	r3, #0
 8015266:	d009      	beq.n	801527c <udp_sendto_if+0x90>
 8015268:	68fb      	ldr	r3, [r7, #12]
 801526a:	681b      	ldr	r3, [r3, #0]
 801526c:	2b00      	cmp	r3, #0
 801526e:	d005      	beq.n	801527c <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8015270:	68fb      	ldr	r3, [r7, #12]
 8015272:	681b      	ldr	r3, [r3, #0]
 8015274:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8015278:	2be0      	cmp	r3, #224	; 0xe0
 801527a:	d103      	bne.n	8015284 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 801527c:	6a3b      	ldr	r3, [r7, #32]
 801527e:	3304      	adds	r3, #4
 8015280:	617b      	str	r3, [r7, #20]
 8015282:	e00b      	b.n	801529c <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8015284:	68fb      	ldr	r3, [r7, #12]
 8015286:	681a      	ldr	r2, [r3, #0]
 8015288:	6a3b      	ldr	r3, [r7, #32]
 801528a:	3304      	adds	r3, #4
 801528c:	681b      	ldr	r3, [r3, #0]
 801528e:	429a      	cmp	r2, r3
 8015290:	d002      	beq.n	8015298 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8015292:	f06f 0303 	mvn.w	r3, #3
 8015296:	e00d      	b.n	80152b4 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8015298:	68fb      	ldr	r3, [r7, #12]
 801529a:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 801529c:	887a      	ldrh	r2, [r7, #2]
 801529e:	697b      	ldr	r3, [r7, #20]
 80152a0:	9301      	str	r3, [sp, #4]
 80152a2:	6a3b      	ldr	r3, [r7, #32]
 80152a4:	9300      	str	r3, [sp, #0]
 80152a6:	4613      	mov	r3, r2
 80152a8:	687a      	ldr	r2, [r7, #4]
 80152aa:	68b9      	ldr	r1, [r7, #8]
 80152ac:	68f8      	ldr	r0, [r7, #12]
 80152ae:	f000 f811 	bl	80152d4 <udp_sendto_if_src>
 80152b2:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80152b4:	4618      	mov	r0, r3
 80152b6:	3718      	adds	r7, #24
 80152b8:	46bd      	mov	sp, r7
 80152ba:	bd80      	pop	{r7, pc}
 80152bc:	0801fc44 	.word	0x0801fc44
 80152c0:	0801fdb8 	.word	0x0801fdb8
 80152c4:	0801fc98 	.word	0x0801fc98
 80152c8:	0801fdd4 	.word	0x0801fdd4
 80152cc:	0801fdf0 	.word	0x0801fdf0
 80152d0:	0801fe10 	.word	0x0801fe10

080152d4 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 80152d4:	b580      	push	{r7, lr}
 80152d6:	b08c      	sub	sp, #48	; 0x30
 80152d8:	af04      	add	r7, sp, #16
 80152da:	60f8      	str	r0, [r7, #12]
 80152dc:	60b9      	str	r1, [r7, #8]
 80152de:	607a      	str	r2, [r7, #4]
 80152e0:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 80152e2:	68fb      	ldr	r3, [r7, #12]
 80152e4:	2b00      	cmp	r3, #0
 80152e6:	d109      	bne.n	80152fc <udp_sendto_if_src+0x28>
 80152e8:	4b65      	ldr	r3, [pc, #404]	; (8015480 <udp_sendto_if_src+0x1ac>)
 80152ea:	f240 22d1 	movw	r2, #721	; 0x2d1
 80152ee:	4965      	ldr	r1, [pc, #404]	; (8015484 <udp_sendto_if_src+0x1b0>)
 80152f0:	4865      	ldr	r0, [pc, #404]	; (8015488 <udp_sendto_if_src+0x1b4>)
 80152f2:	f005 fd6d 	bl	801add0 <iprintf>
 80152f6:	f06f 030f 	mvn.w	r3, #15
 80152fa:	e0bc      	b.n	8015476 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 80152fc:	68bb      	ldr	r3, [r7, #8]
 80152fe:	2b00      	cmp	r3, #0
 8015300:	d109      	bne.n	8015316 <udp_sendto_if_src+0x42>
 8015302:	4b5f      	ldr	r3, [pc, #380]	; (8015480 <udp_sendto_if_src+0x1ac>)
 8015304:	f240 22d2 	movw	r2, #722	; 0x2d2
 8015308:	4960      	ldr	r1, [pc, #384]	; (801548c <udp_sendto_if_src+0x1b8>)
 801530a:	485f      	ldr	r0, [pc, #380]	; (8015488 <udp_sendto_if_src+0x1b4>)
 801530c:	f005 fd60 	bl	801add0 <iprintf>
 8015310:	f06f 030f 	mvn.w	r3, #15
 8015314:	e0af      	b.n	8015476 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8015316:	687b      	ldr	r3, [r7, #4]
 8015318:	2b00      	cmp	r3, #0
 801531a:	d109      	bne.n	8015330 <udp_sendto_if_src+0x5c>
 801531c:	4b58      	ldr	r3, [pc, #352]	; (8015480 <udp_sendto_if_src+0x1ac>)
 801531e:	f240 22d3 	movw	r2, #723	; 0x2d3
 8015322:	495b      	ldr	r1, [pc, #364]	; (8015490 <udp_sendto_if_src+0x1bc>)
 8015324:	4858      	ldr	r0, [pc, #352]	; (8015488 <udp_sendto_if_src+0x1b4>)
 8015326:	f005 fd53 	bl	801add0 <iprintf>
 801532a:	f06f 030f 	mvn.w	r3, #15
 801532e:	e0a2      	b.n	8015476 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8015330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015332:	2b00      	cmp	r3, #0
 8015334:	d109      	bne.n	801534a <udp_sendto_if_src+0x76>
 8015336:	4b52      	ldr	r3, [pc, #328]	; (8015480 <udp_sendto_if_src+0x1ac>)
 8015338:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 801533c:	4955      	ldr	r1, [pc, #340]	; (8015494 <udp_sendto_if_src+0x1c0>)
 801533e:	4852      	ldr	r0, [pc, #328]	; (8015488 <udp_sendto_if_src+0x1b4>)
 8015340:	f005 fd46 	bl	801add0 <iprintf>
 8015344:	f06f 030f 	mvn.w	r3, #15
 8015348:	e095      	b.n	8015476 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801534a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801534c:	2b00      	cmp	r3, #0
 801534e:	d109      	bne.n	8015364 <udp_sendto_if_src+0x90>
 8015350:	4b4b      	ldr	r3, [pc, #300]	; (8015480 <udp_sendto_if_src+0x1ac>)
 8015352:	f240 22d5 	movw	r2, #725	; 0x2d5
 8015356:	4950      	ldr	r1, [pc, #320]	; (8015498 <udp_sendto_if_src+0x1c4>)
 8015358:	484b      	ldr	r0, [pc, #300]	; (8015488 <udp_sendto_if_src+0x1b4>)
 801535a:	f005 fd39 	bl	801add0 <iprintf>
 801535e:	f06f 030f 	mvn.w	r3, #15
 8015362:	e088      	b.n	8015476 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8015364:	68fb      	ldr	r3, [r7, #12]
 8015366:	8a5b      	ldrh	r3, [r3, #18]
 8015368:	2b00      	cmp	r3, #0
 801536a:	d10f      	bne.n	801538c <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801536c:	68f9      	ldr	r1, [r7, #12]
 801536e:	68fb      	ldr	r3, [r7, #12]
 8015370:	8a5b      	ldrh	r3, [r3, #18]
 8015372:	461a      	mov	r2, r3
 8015374:	68f8      	ldr	r0, [r7, #12]
 8015376:	f000 f893 	bl	80154a0 <udp_bind>
 801537a:	4603      	mov	r3, r0
 801537c:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 801537e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8015382:	2b00      	cmp	r3, #0
 8015384:	d002      	beq.n	801538c <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8015386:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801538a:	e074      	b.n	8015476 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 801538c:	68bb      	ldr	r3, [r7, #8]
 801538e:	891b      	ldrh	r3, [r3, #8]
 8015390:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8015394:	4293      	cmp	r3, r2
 8015396:	d902      	bls.n	801539e <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8015398:	f04f 33ff 	mov.w	r3, #4294967295
 801539c:	e06b      	b.n	8015476 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 801539e:	2108      	movs	r1, #8
 80153a0:	68b8      	ldr	r0, [r7, #8]
 80153a2:	f7f9 fcc3 	bl	800ed2c <pbuf_add_header>
 80153a6:	4603      	mov	r3, r0
 80153a8:	2b00      	cmp	r3, #0
 80153aa:	d015      	beq.n	80153d8 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 80153ac:	f44f 7220 	mov.w	r2, #640	; 0x280
 80153b0:	2108      	movs	r1, #8
 80153b2:	2022      	movs	r0, #34	; 0x22
 80153b4:	f7f9 fa68 	bl	800e888 <pbuf_alloc>
 80153b8:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 80153ba:	69fb      	ldr	r3, [r7, #28]
 80153bc:	2b00      	cmp	r3, #0
 80153be:	d102      	bne.n	80153c6 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 80153c0:	f04f 33ff 	mov.w	r3, #4294967295
 80153c4:	e057      	b.n	8015476 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 80153c6:	68bb      	ldr	r3, [r7, #8]
 80153c8:	891b      	ldrh	r3, [r3, #8]
 80153ca:	2b00      	cmp	r3, #0
 80153cc:	d006      	beq.n	80153dc <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 80153ce:	68b9      	ldr	r1, [r7, #8]
 80153d0:	69f8      	ldr	r0, [r7, #28]
 80153d2:	f7f9 fe65 	bl	800f0a0 <pbuf_chain>
 80153d6:	e001      	b.n	80153dc <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 80153d8:	68bb      	ldr	r3, [r7, #8]
 80153da:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 80153dc:	69fb      	ldr	r3, [r7, #28]
 80153de:	895b      	ldrh	r3, [r3, #10]
 80153e0:	2b07      	cmp	r3, #7
 80153e2:	d806      	bhi.n	80153f2 <udp_sendto_if_src+0x11e>
 80153e4:	4b26      	ldr	r3, [pc, #152]	; (8015480 <udp_sendto_if_src+0x1ac>)
 80153e6:	f240 320d 	movw	r2, #781	; 0x30d
 80153ea:	492c      	ldr	r1, [pc, #176]	; (801549c <udp_sendto_if_src+0x1c8>)
 80153ec:	4826      	ldr	r0, [pc, #152]	; (8015488 <udp_sendto_if_src+0x1b4>)
 80153ee:	f005 fcef 	bl	801add0 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 80153f2:	69fb      	ldr	r3, [r7, #28]
 80153f4:	685b      	ldr	r3, [r3, #4]
 80153f6:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 80153f8:	68fb      	ldr	r3, [r7, #12]
 80153fa:	8a5b      	ldrh	r3, [r3, #18]
 80153fc:	4618      	mov	r0, r3
 80153fe:	f7f8 f809 	bl	800d414 <lwip_htons>
 8015402:	4603      	mov	r3, r0
 8015404:	461a      	mov	r2, r3
 8015406:	697b      	ldr	r3, [r7, #20]
 8015408:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801540a:	887b      	ldrh	r3, [r7, #2]
 801540c:	4618      	mov	r0, r3
 801540e:	f7f8 f801 	bl	800d414 <lwip_htons>
 8015412:	4603      	mov	r3, r0
 8015414:	461a      	mov	r2, r3
 8015416:	697b      	ldr	r3, [r7, #20]
 8015418:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801541a:	697b      	ldr	r3, [r7, #20]
 801541c:	2200      	movs	r2, #0
 801541e:	719a      	strb	r2, [r3, #6]
 8015420:	2200      	movs	r2, #0
 8015422:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8015424:	69fb      	ldr	r3, [r7, #28]
 8015426:	891b      	ldrh	r3, [r3, #8]
 8015428:	4618      	mov	r0, r3
 801542a:	f7f7 fff3 	bl	800d414 <lwip_htons>
 801542e:	4603      	mov	r3, r0
 8015430:	461a      	mov	r2, r3
 8015432:	697b      	ldr	r3, [r7, #20]
 8015434:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8015436:	2311      	movs	r3, #17
 8015438:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 801543a:	68fb      	ldr	r3, [r7, #12]
 801543c:	7adb      	ldrb	r3, [r3, #11]
 801543e:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8015440:	68fb      	ldr	r3, [r7, #12]
 8015442:	7a9b      	ldrb	r3, [r3, #10]
 8015444:	7cb9      	ldrb	r1, [r7, #18]
 8015446:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015448:	9202      	str	r2, [sp, #8]
 801544a:	7cfa      	ldrb	r2, [r7, #19]
 801544c:	9201      	str	r2, [sp, #4]
 801544e:	9300      	str	r3, [sp, #0]
 8015450:	460b      	mov	r3, r1
 8015452:	687a      	ldr	r2, [r7, #4]
 8015454:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015456:	69f8      	ldr	r0, [r7, #28]
 8015458:	f003 fc40 	bl	8018cdc <ip4_output_if_src>
 801545c:	4603      	mov	r3, r0
 801545e:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8015460:	69fa      	ldr	r2, [r7, #28]
 8015462:	68bb      	ldr	r3, [r7, #8]
 8015464:	429a      	cmp	r2, r3
 8015466:	d004      	beq.n	8015472 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8015468:	69f8      	ldr	r0, [r7, #28]
 801546a:	f7f9 fcf5 	bl	800ee58 <pbuf_free>
    q = NULL;
 801546e:	2300      	movs	r3, #0
 8015470:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8015472:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8015476:	4618      	mov	r0, r3
 8015478:	3720      	adds	r7, #32
 801547a:	46bd      	mov	sp, r7
 801547c:	bd80      	pop	{r7, pc}
 801547e:	bf00      	nop
 8015480:	0801fc44 	.word	0x0801fc44
 8015484:	0801fe30 	.word	0x0801fe30
 8015488:	0801fc98 	.word	0x0801fc98
 801548c:	0801fe50 	.word	0x0801fe50
 8015490:	0801fe70 	.word	0x0801fe70
 8015494:	0801fe94 	.word	0x0801fe94
 8015498:	0801feb8 	.word	0x0801feb8
 801549c:	0801fedc 	.word	0x0801fedc

080154a0 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80154a0:	b580      	push	{r7, lr}
 80154a2:	b086      	sub	sp, #24
 80154a4:	af00      	add	r7, sp, #0
 80154a6:	60f8      	str	r0, [r7, #12]
 80154a8:	60b9      	str	r1, [r7, #8]
 80154aa:	4613      	mov	r3, r2
 80154ac:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80154ae:	68bb      	ldr	r3, [r7, #8]
 80154b0:	2b00      	cmp	r3, #0
 80154b2:	d101      	bne.n	80154b8 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 80154b4:	4b39      	ldr	r3, [pc, #228]	; (801559c <udp_bind+0xfc>)
 80154b6:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80154b8:	68fb      	ldr	r3, [r7, #12]
 80154ba:	2b00      	cmp	r3, #0
 80154bc:	d109      	bne.n	80154d2 <udp_bind+0x32>
 80154be:	4b38      	ldr	r3, [pc, #224]	; (80155a0 <udp_bind+0x100>)
 80154c0:	f240 32b7 	movw	r2, #951	; 0x3b7
 80154c4:	4937      	ldr	r1, [pc, #220]	; (80155a4 <udp_bind+0x104>)
 80154c6:	4838      	ldr	r0, [pc, #224]	; (80155a8 <udp_bind+0x108>)
 80154c8:	f005 fc82 	bl	801add0 <iprintf>
 80154cc:	f06f 030f 	mvn.w	r3, #15
 80154d0:	e060      	b.n	8015594 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 80154d2:	2300      	movs	r3, #0
 80154d4:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80154d6:	4b35      	ldr	r3, [pc, #212]	; (80155ac <udp_bind+0x10c>)
 80154d8:	681b      	ldr	r3, [r3, #0]
 80154da:	617b      	str	r3, [r7, #20]
 80154dc:	e009      	b.n	80154f2 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 80154de:	68fa      	ldr	r2, [r7, #12]
 80154e0:	697b      	ldr	r3, [r7, #20]
 80154e2:	429a      	cmp	r2, r3
 80154e4:	d102      	bne.n	80154ec <udp_bind+0x4c>
      rebind = 1;
 80154e6:	2301      	movs	r3, #1
 80154e8:	74fb      	strb	r3, [r7, #19]
      break;
 80154ea:	e005      	b.n	80154f8 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80154ec:	697b      	ldr	r3, [r7, #20]
 80154ee:	68db      	ldr	r3, [r3, #12]
 80154f0:	617b      	str	r3, [r7, #20]
 80154f2:	697b      	ldr	r3, [r7, #20]
 80154f4:	2b00      	cmp	r3, #0
 80154f6:	d1f2      	bne.n	80154de <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 80154f8:	88fb      	ldrh	r3, [r7, #6]
 80154fa:	2b00      	cmp	r3, #0
 80154fc:	d109      	bne.n	8015512 <udp_bind+0x72>
    port = udp_new_port();
 80154fe:	f7ff fc1d 	bl	8014d3c <udp_new_port>
 8015502:	4603      	mov	r3, r0
 8015504:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8015506:	88fb      	ldrh	r3, [r7, #6]
 8015508:	2b00      	cmp	r3, #0
 801550a:	d12c      	bne.n	8015566 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 801550c:	f06f 0307 	mvn.w	r3, #7
 8015510:	e040      	b.n	8015594 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8015512:	4b26      	ldr	r3, [pc, #152]	; (80155ac <udp_bind+0x10c>)
 8015514:	681b      	ldr	r3, [r3, #0]
 8015516:	617b      	str	r3, [r7, #20]
 8015518:	e022      	b.n	8015560 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801551a:	68fa      	ldr	r2, [r7, #12]
 801551c:	697b      	ldr	r3, [r7, #20]
 801551e:	429a      	cmp	r2, r3
 8015520:	d01b      	beq.n	801555a <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8015522:	697b      	ldr	r3, [r7, #20]
 8015524:	8a5b      	ldrh	r3, [r3, #18]
 8015526:	88fa      	ldrh	r2, [r7, #6]
 8015528:	429a      	cmp	r2, r3
 801552a:	d116      	bne.n	801555a <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801552c:	697b      	ldr	r3, [r7, #20]
 801552e:	681a      	ldr	r2, [r3, #0]
 8015530:	68bb      	ldr	r3, [r7, #8]
 8015532:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8015534:	429a      	cmp	r2, r3
 8015536:	d00d      	beq.n	8015554 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8015538:	68bb      	ldr	r3, [r7, #8]
 801553a:	2b00      	cmp	r3, #0
 801553c:	d00a      	beq.n	8015554 <udp_bind+0xb4>
 801553e:	68bb      	ldr	r3, [r7, #8]
 8015540:	681b      	ldr	r3, [r3, #0]
 8015542:	2b00      	cmp	r3, #0
 8015544:	d006      	beq.n	8015554 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8015546:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8015548:	2b00      	cmp	r3, #0
 801554a:	d003      	beq.n	8015554 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801554c:	697b      	ldr	r3, [r7, #20]
 801554e:	681b      	ldr	r3, [r3, #0]
 8015550:	2b00      	cmp	r3, #0
 8015552:	d102      	bne.n	801555a <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8015554:	f06f 0307 	mvn.w	r3, #7
 8015558:	e01c      	b.n	8015594 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801555a:	697b      	ldr	r3, [r7, #20]
 801555c:	68db      	ldr	r3, [r3, #12]
 801555e:	617b      	str	r3, [r7, #20]
 8015560:	697b      	ldr	r3, [r7, #20]
 8015562:	2b00      	cmp	r3, #0
 8015564:	d1d9      	bne.n	801551a <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8015566:	68bb      	ldr	r3, [r7, #8]
 8015568:	2b00      	cmp	r3, #0
 801556a:	d002      	beq.n	8015572 <udp_bind+0xd2>
 801556c:	68bb      	ldr	r3, [r7, #8]
 801556e:	681b      	ldr	r3, [r3, #0]
 8015570:	e000      	b.n	8015574 <udp_bind+0xd4>
 8015572:	2300      	movs	r3, #0
 8015574:	68fa      	ldr	r2, [r7, #12]
 8015576:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8015578:	68fb      	ldr	r3, [r7, #12]
 801557a:	88fa      	ldrh	r2, [r7, #6]
 801557c:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801557e:	7cfb      	ldrb	r3, [r7, #19]
 8015580:	2b00      	cmp	r3, #0
 8015582:	d106      	bne.n	8015592 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8015584:	4b09      	ldr	r3, [pc, #36]	; (80155ac <udp_bind+0x10c>)
 8015586:	681a      	ldr	r2, [r3, #0]
 8015588:	68fb      	ldr	r3, [r7, #12]
 801558a:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 801558c:	4a07      	ldr	r2, [pc, #28]	; (80155ac <udp_bind+0x10c>)
 801558e:	68fb      	ldr	r3, [r7, #12]
 8015590:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8015592:	2300      	movs	r3, #0
}
 8015594:	4618      	mov	r0, r3
 8015596:	3718      	adds	r7, #24
 8015598:	46bd      	mov	sp, r7
 801559a:	bd80      	pop	{r7, pc}
 801559c:	0806c870 	.word	0x0806c870
 80155a0:	0801fc44 	.word	0x0801fc44
 80155a4:	0801ff0c 	.word	0x0801ff0c
 80155a8:	0801fc98 	.word	0x0801fc98
 80155ac:	20013d38 	.word	0x20013d38

080155b0 <udp_bind_netif>:
 *
 * @see udp_disconnect()
 */
void
udp_bind_netif(struct udp_pcb *pcb, const struct netif *netif)
{
 80155b0:	b480      	push	{r7}
 80155b2:	b083      	sub	sp, #12
 80155b4:	af00      	add	r7, sp, #0
 80155b6:	6078      	str	r0, [r7, #4]
 80155b8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif != NULL) {
 80155ba:	683b      	ldr	r3, [r7, #0]
 80155bc:	2b00      	cmp	r3, #0
 80155be:	d007      	beq.n	80155d0 <udp_bind_netif+0x20>
    pcb->netif_idx = netif_get_index(netif);
 80155c0:	683b      	ldr	r3, [r7, #0]
 80155c2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80155c6:	3301      	adds	r3, #1
 80155c8:	b2da      	uxtb	r2, r3
 80155ca:	687b      	ldr	r3, [r7, #4]
 80155cc:	721a      	strb	r2, [r3, #8]
  } else {
    pcb->netif_idx = NETIF_NO_INDEX;
  }
}
 80155ce:	e002      	b.n	80155d6 <udp_bind_netif+0x26>
    pcb->netif_idx = NETIF_NO_INDEX;
 80155d0:	687b      	ldr	r3, [r7, #4]
 80155d2:	2200      	movs	r2, #0
 80155d4:	721a      	strb	r2, [r3, #8]
}
 80155d6:	bf00      	nop
 80155d8:	370c      	adds	r7, #12
 80155da:	46bd      	mov	sp, r7
 80155dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155e0:	4770      	bx	lr
	...

080155e4 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80155e4:	b580      	push	{r7, lr}
 80155e6:	b086      	sub	sp, #24
 80155e8:	af00      	add	r7, sp, #0
 80155ea:	60f8      	str	r0, [r7, #12]
 80155ec:	60b9      	str	r1, [r7, #8]
 80155ee:	4613      	mov	r3, r2
 80155f0:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 80155f2:	68fb      	ldr	r3, [r7, #12]
 80155f4:	2b00      	cmp	r3, #0
 80155f6:	d109      	bne.n	801560c <udp_connect+0x28>
 80155f8:	4b2c      	ldr	r3, [pc, #176]	; (80156ac <udp_connect+0xc8>)
 80155fa:	f240 4235 	movw	r2, #1077	; 0x435
 80155fe:	492c      	ldr	r1, [pc, #176]	; (80156b0 <udp_connect+0xcc>)
 8015600:	482c      	ldr	r0, [pc, #176]	; (80156b4 <udp_connect+0xd0>)
 8015602:	f005 fbe5 	bl	801add0 <iprintf>
 8015606:	f06f 030f 	mvn.w	r3, #15
 801560a:	e04b      	b.n	80156a4 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 801560c:	68bb      	ldr	r3, [r7, #8]
 801560e:	2b00      	cmp	r3, #0
 8015610:	d109      	bne.n	8015626 <udp_connect+0x42>
 8015612:	4b26      	ldr	r3, [pc, #152]	; (80156ac <udp_connect+0xc8>)
 8015614:	f240 4236 	movw	r2, #1078	; 0x436
 8015618:	4927      	ldr	r1, [pc, #156]	; (80156b8 <udp_connect+0xd4>)
 801561a:	4826      	ldr	r0, [pc, #152]	; (80156b4 <udp_connect+0xd0>)
 801561c:	f005 fbd8 	bl	801add0 <iprintf>
 8015620:	f06f 030f 	mvn.w	r3, #15
 8015624:	e03e      	b.n	80156a4 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8015626:	68fb      	ldr	r3, [r7, #12]
 8015628:	8a5b      	ldrh	r3, [r3, #18]
 801562a:	2b00      	cmp	r3, #0
 801562c:	d10f      	bne.n	801564e <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801562e:	68f9      	ldr	r1, [r7, #12]
 8015630:	68fb      	ldr	r3, [r7, #12]
 8015632:	8a5b      	ldrh	r3, [r3, #18]
 8015634:	461a      	mov	r2, r3
 8015636:	68f8      	ldr	r0, [r7, #12]
 8015638:	f7ff ff32 	bl	80154a0 <udp_bind>
 801563c:	4603      	mov	r3, r0
 801563e:	75fb      	strb	r3, [r7, #23]
    if (err != ERR_OK) {
 8015640:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8015644:	2b00      	cmp	r3, #0
 8015646:	d002      	beq.n	801564e <udp_connect+0x6a>
      return err;
 8015648:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801564c:	e02a      	b.n	80156a4 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 801564e:	68bb      	ldr	r3, [r7, #8]
 8015650:	2b00      	cmp	r3, #0
 8015652:	d002      	beq.n	801565a <udp_connect+0x76>
 8015654:	68bb      	ldr	r3, [r7, #8]
 8015656:	681b      	ldr	r3, [r3, #0]
 8015658:	e000      	b.n	801565c <udp_connect+0x78>
 801565a:	2300      	movs	r3, #0
 801565c:	68fa      	ldr	r2, [r7, #12]
 801565e:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8015660:	68fb      	ldr	r3, [r7, #12]
 8015662:	88fa      	ldrh	r2, [r7, #6]
 8015664:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8015666:	68fb      	ldr	r3, [r7, #12]
 8015668:	7c1b      	ldrb	r3, [r3, #16]
 801566a:	f043 0304 	orr.w	r3, r3, #4
 801566e:	b2da      	uxtb	r2, r3
 8015670:	68fb      	ldr	r3, [r7, #12]
 8015672:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8015674:	4b11      	ldr	r3, [pc, #68]	; (80156bc <udp_connect+0xd8>)
 8015676:	681b      	ldr	r3, [r3, #0]
 8015678:	613b      	str	r3, [r7, #16]
 801567a:	e008      	b.n	801568e <udp_connect+0xaa>
    if (pcb == ipcb) {
 801567c:	68fa      	ldr	r2, [r7, #12]
 801567e:	693b      	ldr	r3, [r7, #16]
 8015680:	429a      	cmp	r2, r3
 8015682:	d101      	bne.n	8015688 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8015684:	2300      	movs	r3, #0
 8015686:	e00d      	b.n	80156a4 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8015688:	693b      	ldr	r3, [r7, #16]
 801568a:	68db      	ldr	r3, [r3, #12]
 801568c:	613b      	str	r3, [r7, #16]
 801568e:	693b      	ldr	r3, [r7, #16]
 8015690:	2b00      	cmp	r3, #0
 8015692:	d1f3      	bne.n	801567c <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8015694:	4b09      	ldr	r3, [pc, #36]	; (80156bc <udp_connect+0xd8>)
 8015696:	681a      	ldr	r2, [r3, #0]
 8015698:	68fb      	ldr	r3, [r7, #12]
 801569a:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 801569c:	4a07      	ldr	r2, [pc, #28]	; (80156bc <udp_connect+0xd8>)
 801569e:	68fb      	ldr	r3, [r7, #12]
 80156a0:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 80156a2:	2300      	movs	r3, #0
}
 80156a4:	4618      	mov	r0, r3
 80156a6:	3718      	adds	r7, #24
 80156a8:	46bd      	mov	sp, r7
 80156aa:	bd80      	pop	{r7, pc}
 80156ac:	0801fc44 	.word	0x0801fc44
 80156b0:	0801ff24 	.word	0x0801ff24
 80156b4:	0801fc98 	.word	0x0801fc98
 80156b8:	0801ff40 	.word	0x0801ff40
 80156bc:	20013d38 	.word	0x20013d38

080156c0 <udp_disconnect>:
 *
 * @param pcb the udp pcb to disconnect.
 */
void
udp_disconnect(struct udp_pcb *pcb)
{
 80156c0:	b580      	push	{r7, lr}
 80156c2:	b082      	sub	sp, #8
 80156c4:	af00      	add	r7, sp, #0
 80156c6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_disconnect: invalid pcb", pcb != NULL, return);
 80156c8:	687b      	ldr	r3, [r7, #4]
 80156ca:	2b00      	cmp	r3, #0
 80156cc:	d107      	bne.n	80156de <udp_disconnect+0x1e>
 80156ce:	4b0d      	ldr	r3, [pc, #52]	; (8015704 <udp_disconnect+0x44>)
 80156d0:	f240 426a 	movw	r2, #1130	; 0x46a
 80156d4:	490c      	ldr	r1, [pc, #48]	; (8015708 <udp_disconnect+0x48>)
 80156d6:	480d      	ldr	r0, [pc, #52]	; (801570c <udp_disconnect+0x4c>)
 80156d8:	f005 fb7a 	bl	801add0 <iprintf>
 80156dc:	e00f      	b.n	80156fe <udp_disconnect+0x3e>
#if LWIP_IPV4 && LWIP_IPV6
  if (IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    ip_addr_copy(pcb->remote_ip, *IP_ANY_TYPE);
  } else {
#endif
    ip_addr_set_any(IP_IS_V6_VAL(pcb->remote_ip), &pcb->remote_ip);
 80156de:	687b      	ldr	r3, [r7, #4]
 80156e0:	2200      	movs	r2, #0
 80156e2:	605a      	str	r2, [r3, #4]
#if LWIP_IPV4 && LWIP_IPV6
  }
#endif
  pcb->remote_port = 0;
 80156e4:	687b      	ldr	r3, [r7, #4]
 80156e6:	2200      	movs	r2, #0
 80156e8:	829a      	strh	r2, [r3, #20]
  pcb->netif_idx = NETIF_NO_INDEX;
 80156ea:	687b      	ldr	r3, [r7, #4]
 80156ec:	2200      	movs	r2, #0
 80156ee:	721a      	strb	r2, [r3, #8]
  /* mark PCB as unconnected */
  udp_clear_flags(pcb, UDP_FLAGS_CONNECTED);
 80156f0:	687b      	ldr	r3, [r7, #4]
 80156f2:	7c1b      	ldrb	r3, [r3, #16]
 80156f4:	f023 0304 	bic.w	r3, r3, #4
 80156f8:	b2da      	uxtb	r2, r3
 80156fa:	687b      	ldr	r3, [r7, #4]
 80156fc:	741a      	strb	r2, [r3, #16]
}
 80156fe:	3708      	adds	r7, #8
 8015700:	46bd      	mov	sp, r7
 8015702:	bd80      	pop	{r7, pc}
 8015704:	0801fc44 	.word	0x0801fc44
 8015708:	0801ff5c 	.word	0x0801ff5c
 801570c:	0801fc98 	.word	0x0801fc98

08015710 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8015710:	b580      	push	{r7, lr}
 8015712:	b084      	sub	sp, #16
 8015714:	af00      	add	r7, sp, #0
 8015716:	60f8      	str	r0, [r7, #12]
 8015718:	60b9      	str	r1, [r7, #8]
 801571a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 801571c:	68fb      	ldr	r3, [r7, #12]
 801571e:	2b00      	cmp	r3, #0
 8015720:	d107      	bne.n	8015732 <udp_recv+0x22>
 8015722:	4b08      	ldr	r3, [pc, #32]	; (8015744 <udp_recv+0x34>)
 8015724:	f240 428a 	movw	r2, #1162	; 0x48a
 8015728:	4907      	ldr	r1, [pc, #28]	; (8015748 <udp_recv+0x38>)
 801572a:	4808      	ldr	r0, [pc, #32]	; (801574c <udp_recv+0x3c>)
 801572c:	f005 fb50 	bl	801add0 <iprintf>
 8015730:	e005      	b.n	801573e <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8015732:	68fb      	ldr	r3, [r7, #12]
 8015734:	68ba      	ldr	r2, [r7, #8]
 8015736:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8015738:	68fb      	ldr	r3, [r7, #12]
 801573a:	687a      	ldr	r2, [r7, #4]
 801573c:	61da      	str	r2, [r3, #28]
}
 801573e:	3710      	adds	r7, #16
 8015740:	46bd      	mov	sp, r7
 8015742:	bd80      	pop	{r7, pc}
 8015744:	0801fc44 	.word	0x0801fc44
 8015748:	0801ff78 	.word	0x0801ff78
 801574c:	0801fc98 	.word	0x0801fc98

08015750 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8015750:	b580      	push	{r7, lr}
 8015752:	b084      	sub	sp, #16
 8015754:	af00      	add	r7, sp, #0
 8015756:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8015758:	687b      	ldr	r3, [r7, #4]
 801575a:	2b00      	cmp	r3, #0
 801575c:	d107      	bne.n	801576e <udp_remove+0x1e>
 801575e:	4b19      	ldr	r3, [pc, #100]	; (80157c4 <udp_remove+0x74>)
 8015760:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8015764:	4918      	ldr	r1, [pc, #96]	; (80157c8 <udp_remove+0x78>)
 8015766:	4819      	ldr	r0, [pc, #100]	; (80157cc <udp_remove+0x7c>)
 8015768:	f005 fb32 	bl	801add0 <iprintf>
 801576c:	e026      	b.n	80157bc <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801576e:	4b18      	ldr	r3, [pc, #96]	; (80157d0 <udp_remove+0x80>)
 8015770:	681b      	ldr	r3, [r3, #0]
 8015772:	687a      	ldr	r2, [r7, #4]
 8015774:	429a      	cmp	r2, r3
 8015776:	d105      	bne.n	8015784 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8015778:	4b15      	ldr	r3, [pc, #84]	; (80157d0 <udp_remove+0x80>)
 801577a:	681b      	ldr	r3, [r3, #0]
 801577c:	68db      	ldr	r3, [r3, #12]
 801577e:	4a14      	ldr	r2, [pc, #80]	; (80157d0 <udp_remove+0x80>)
 8015780:	6013      	str	r3, [r2, #0]
 8015782:	e017      	b.n	80157b4 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8015784:	4b12      	ldr	r3, [pc, #72]	; (80157d0 <udp_remove+0x80>)
 8015786:	681b      	ldr	r3, [r3, #0]
 8015788:	60fb      	str	r3, [r7, #12]
 801578a:	e010      	b.n	80157ae <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 801578c:	68fb      	ldr	r3, [r7, #12]
 801578e:	68db      	ldr	r3, [r3, #12]
 8015790:	2b00      	cmp	r3, #0
 8015792:	d009      	beq.n	80157a8 <udp_remove+0x58>
 8015794:	68fb      	ldr	r3, [r7, #12]
 8015796:	68db      	ldr	r3, [r3, #12]
 8015798:	687a      	ldr	r2, [r7, #4]
 801579a:	429a      	cmp	r2, r3
 801579c:	d104      	bne.n	80157a8 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801579e:	687b      	ldr	r3, [r7, #4]
 80157a0:	68da      	ldr	r2, [r3, #12]
 80157a2:	68fb      	ldr	r3, [r7, #12]
 80157a4:	60da      	str	r2, [r3, #12]
        break;
 80157a6:	e005      	b.n	80157b4 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80157a8:	68fb      	ldr	r3, [r7, #12]
 80157aa:	68db      	ldr	r3, [r3, #12]
 80157ac:	60fb      	str	r3, [r7, #12]
 80157ae:	68fb      	ldr	r3, [r7, #12]
 80157b0:	2b00      	cmp	r3, #0
 80157b2:	d1eb      	bne.n	801578c <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 80157b4:	6879      	ldr	r1, [r7, #4]
 80157b6:	2000      	movs	r0, #0
 80157b8:	f7f8 fcac 	bl	800e114 <memp_free>
}
 80157bc:	3710      	adds	r7, #16
 80157be:	46bd      	mov	sp, r7
 80157c0:	bd80      	pop	{r7, pc}
 80157c2:	bf00      	nop
 80157c4:	0801fc44 	.word	0x0801fc44
 80157c8:	0801ff90 	.word	0x0801ff90
 80157cc:	0801fc98 	.word	0x0801fc98
 80157d0:	20013d38 	.word	0x20013d38

080157d4 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 80157d4:	b580      	push	{r7, lr}
 80157d6:	b082      	sub	sp, #8
 80157d8:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 80157da:	2000      	movs	r0, #0
 80157dc:	f7f8 fc48 	bl	800e070 <memp_malloc>
 80157e0:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 80157e2:	687b      	ldr	r3, [r7, #4]
 80157e4:	2b00      	cmp	r3, #0
 80157e6:	d007      	beq.n	80157f8 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 80157e8:	2220      	movs	r2, #32
 80157ea:	2100      	movs	r1, #0
 80157ec:	6878      	ldr	r0, [r7, #4]
 80157ee:	f004 fd87 	bl	801a300 <memset>
    pcb->ttl = UDP_TTL;
 80157f2:	687b      	ldr	r3, [r7, #4]
 80157f4:	22ff      	movs	r2, #255	; 0xff
 80157f6:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 80157f8:	687b      	ldr	r3, [r7, #4]
}
 80157fa:	4618      	mov	r0, r3
 80157fc:	3708      	adds	r7, #8
 80157fe:	46bd      	mov	sp, r7
 8015800:	bd80      	pop	{r7, pc}
	...

08015804 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8015804:	b480      	push	{r7}
 8015806:	b085      	sub	sp, #20
 8015808:	af00      	add	r7, sp, #0
 801580a:	6078      	str	r0, [r7, #4]
 801580c:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801580e:	687b      	ldr	r3, [r7, #4]
 8015810:	2b00      	cmp	r3, #0
 8015812:	d01e      	beq.n	8015852 <udp_netif_ip_addr_changed+0x4e>
 8015814:	687b      	ldr	r3, [r7, #4]
 8015816:	681b      	ldr	r3, [r3, #0]
 8015818:	2b00      	cmp	r3, #0
 801581a:	d01a      	beq.n	8015852 <udp_netif_ip_addr_changed+0x4e>
 801581c:	683b      	ldr	r3, [r7, #0]
 801581e:	2b00      	cmp	r3, #0
 8015820:	d017      	beq.n	8015852 <udp_netif_ip_addr_changed+0x4e>
 8015822:	683b      	ldr	r3, [r7, #0]
 8015824:	681b      	ldr	r3, [r3, #0]
 8015826:	2b00      	cmp	r3, #0
 8015828:	d013      	beq.n	8015852 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801582a:	4b0d      	ldr	r3, [pc, #52]	; (8015860 <udp_netif_ip_addr_changed+0x5c>)
 801582c:	681b      	ldr	r3, [r3, #0]
 801582e:	60fb      	str	r3, [r7, #12]
 8015830:	e00c      	b.n	801584c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8015832:	68fb      	ldr	r3, [r7, #12]
 8015834:	681a      	ldr	r2, [r3, #0]
 8015836:	687b      	ldr	r3, [r7, #4]
 8015838:	681b      	ldr	r3, [r3, #0]
 801583a:	429a      	cmp	r2, r3
 801583c:	d103      	bne.n	8015846 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801583e:	683b      	ldr	r3, [r7, #0]
 8015840:	681a      	ldr	r2, [r3, #0]
 8015842:	68fb      	ldr	r3, [r7, #12]
 8015844:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8015846:	68fb      	ldr	r3, [r7, #12]
 8015848:	68db      	ldr	r3, [r3, #12]
 801584a:	60fb      	str	r3, [r7, #12]
 801584c:	68fb      	ldr	r3, [r7, #12]
 801584e:	2b00      	cmp	r3, #0
 8015850:	d1ef      	bne.n	8015832 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8015852:	bf00      	nop
 8015854:	3714      	adds	r7, #20
 8015856:	46bd      	mov	sp, r7
 8015858:	f85d 7b04 	ldr.w	r7, [sp], #4
 801585c:	4770      	bx	lr
 801585e:	bf00      	nop
 8015860:	20013d38 	.word	0x20013d38

08015864 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 8015864:	b580      	push	{r7, lr}
 8015866:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 8015868:	4b20      	ldr	r3, [pc, #128]	; (80158ec <dhcp_inc_pcb_refcount+0x88>)
 801586a:	781b      	ldrb	r3, [r3, #0]
 801586c:	2b00      	cmp	r3, #0
 801586e:	d133      	bne.n	80158d8 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 8015870:	4b1f      	ldr	r3, [pc, #124]	; (80158f0 <dhcp_inc_pcb_refcount+0x8c>)
 8015872:	681b      	ldr	r3, [r3, #0]
 8015874:	2b00      	cmp	r3, #0
 8015876:	d005      	beq.n	8015884 <dhcp_inc_pcb_refcount+0x20>
 8015878:	4b1e      	ldr	r3, [pc, #120]	; (80158f4 <dhcp_inc_pcb_refcount+0x90>)
 801587a:	22e5      	movs	r2, #229	; 0xe5
 801587c:	491e      	ldr	r1, [pc, #120]	; (80158f8 <dhcp_inc_pcb_refcount+0x94>)
 801587e:	481f      	ldr	r0, [pc, #124]	; (80158fc <dhcp_inc_pcb_refcount+0x98>)
 8015880:	f005 faa6 	bl	801add0 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 8015884:	f7ff ffa6 	bl	80157d4 <udp_new>
 8015888:	4603      	mov	r3, r0
 801588a:	4a19      	ldr	r2, [pc, #100]	; (80158f0 <dhcp_inc_pcb_refcount+0x8c>)
 801588c:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 801588e:	4b18      	ldr	r3, [pc, #96]	; (80158f0 <dhcp_inc_pcb_refcount+0x8c>)
 8015890:	681b      	ldr	r3, [r3, #0]
 8015892:	2b00      	cmp	r3, #0
 8015894:	d102      	bne.n	801589c <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 8015896:	f04f 33ff 	mov.w	r3, #4294967295
 801589a:	e024      	b.n	80158e6 <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 801589c:	4b14      	ldr	r3, [pc, #80]	; (80158f0 <dhcp_inc_pcb_refcount+0x8c>)
 801589e:	681b      	ldr	r3, [r3, #0]
 80158a0:	7a5a      	ldrb	r2, [r3, #9]
 80158a2:	4b13      	ldr	r3, [pc, #76]	; (80158f0 <dhcp_inc_pcb_refcount+0x8c>)
 80158a4:	681b      	ldr	r3, [r3, #0]
 80158a6:	f042 0220 	orr.w	r2, r2, #32
 80158aa:	b2d2      	uxtb	r2, r2
 80158ac:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 80158ae:	4b10      	ldr	r3, [pc, #64]	; (80158f0 <dhcp_inc_pcb_refcount+0x8c>)
 80158b0:	681b      	ldr	r3, [r3, #0]
 80158b2:	2244      	movs	r2, #68	; 0x44
 80158b4:	4912      	ldr	r1, [pc, #72]	; (8015900 <dhcp_inc_pcb_refcount+0x9c>)
 80158b6:	4618      	mov	r0, r3
 80158b8:	f7ff fdf2 	bl	80154a0 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 80158bc:	4b0c      	ldr	r3, [pc, #48]	; (80158f0 <dhcp_inc_pcb_refcount+0x8c>)
 80158be:	681b      	ldr	r3, [r3, #0]
 80158c0:	2243      	movs	r2, #67	; 0x43
 80158c2:	490f      	ldr	r1, [pc, #60]	; (8015900 <dhcp_inc_pcb_refcount+0x9c>)
 80158c4:	4618      	mov	r0, r3
 80158c6:	f7ff fe8d 	bl	80155e4 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 80158ca:	4b09      	ldr	r3, [pc, #36]	; (80158f0 <dhcp_inc_pcb_refcount+0x8c>)
 80158cc:	681b      	ldr	r3, [r3, #0]
 80158ce:	2200      	movs	r2, #0
 80158d0:	490c      	ldr	r1, [pc, #48]	; (8015904 <dhcp_inc_pcb_refcount+0xa0>)
 80158d2:	4618      	mov	r0, r3
 80158d4:	f7ff ff1c 	bl	8015710 <udp_recv>
  }

  dhcp_pcb_refcount++;
 80158d8:	4b04      	ldr	r3, [pc, #16]	; (80158ec <dhcp_inc_pcb_refcount+0x88>)
 80158da:	781b      	ldrb	r3, [r3, #0]
 80158dc:	3301      	adds	r3, #1
 80158de:	b2da      	uxtb	r2, r3
 80158e0:	4b02      	ldr	r3, [pc, #8]	; (80158ec <dhcp_inc_pcb_refcount+0x88>)
 80158e2:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 80158e4:	2300      	movs	r3, #0
}
 80158e6:	4618      	mov	r0, r3
 80158e8:	bd80      	pop	{r7, pc}
 80158ea:	bf00      	nop
 80158ec:	20013d68 	.word	0x20013d68
 80158f0:	20013d64 	.word	0x20013d64
 80158f4:	0801ffa8 	.word	0x0801ffa8
 80158f8:	0801ffe0 	.word	0x0801ffe0
 80158fc:	08020008 	.word	0x08020008
 8015900:	0806c870 	.word	0x0806c870
 8015904:	080171d1 	.word	0x080171d1

08015908 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 8015908:	b580      	push	{r7, lr}
 801590a:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 801590c:	4b0e      	ldr	r3, [pc, #56]	; (8015948 <dhcp_dec_pcb_refcount+0x40>)
 801590e:	781b      	ldrb	r3, [r3, #0]
 8015910:	2b00      	cmp	r3, #0
 8015912:	d105      	bne.n	8015920 <dhcp_dec_pcb_refcount+0x18>
 8015914:	4b0d      	ldr	r3, [pc, #52]	; (801594c <dhcp_dec_pcb_refcount+0x44>)
 8015916:	22ff      	movs	r2, #255	; 0xff
 8015918:	490d      	ldr	r1, [pc, #52]	; (8015950 <dhcp_dec_pcb_refcount+0x48>)
 801591a:	480e      	ldr	r0, [pc, #56]	; (8015954 <dhcp_dec_pcb_refcount+0x4c>)
 801591c:	f005 fa58 	bl	801add0 <iprintf>
  dhcp_pcb_refcount--;
 8015920:	4b09      	ldr	r3, [pc, #36]	; (8015948 <dhcp_dec_pcb_refcount+0x40>)
 8015922:	781b      	ldrb	r3, [r3, #0]
 8015924:	3b01      	subs	r3, #1
 8015926:	b2da      	uxtb	r2, r3
 8015928:	4b07      	ldr	r3, [pc, #28]	; (8015948 <dhcp_dec_pcb_refcount+0x40>)
 801592a:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 801592c:	4b06      	ldr	r3, [pc, #24]	; (8015948 <dhcp_dec_pcb_refcount+0x40>)
 801592e:	781b      	ldrb	r3, [r3, #0]
 8015930:	2b00      	cmp	r3, #0
 8015932:	d107      	bne.n	8015944 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 8015934:	4b08      	ldr	r3, [pc, #32]	; (8015958 <dhcp_dec_pcb_refcount+0x50>)
 8015936:	681b      	ldr	r3, [r3, #0]
 8015938:	4618      	mov	r0, r3
 801593a:	f7ff ff09 	bl	8015750 <udp_remove>
    dhcp_pcb = NULL;
 801593e:	4b06      	ldr	r3, [pc, #24]	; (8015958 <dhcp_dec_pcb_refcount+0x50>)
 8015940:	2200      	movs	r2, #0
 8015942:	601a      	str	r2, [r3, #0]
  }
}
 8015944:	bf00      	nop
 8015946:	bd80      	pop	{r7, pc}
 8015948:	20013d68 	.word	0x20013d68
 801594c:	0801ffa8 	.word	0x0801ffa8
 8015950:	08020030 	.word	0x08020030
 8015954:	08020008 	.word	0x08020008
 8015958:	20013d64 	.word	0x20013d64

0801595c <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 801595c:	b580      	push	{r7, lr}
 801595e:	b084      	sub	sp, #16
 8015960:	af00      	add	r7, sp, #0
 8015962:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015964:	687b      	ldr	r3, [r7, #4]
 8015966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015968:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 801596a:	210c      	movs	r1, #12
 801596c:	68f8      	ldr	r0, [r7, #12]
 801596e:	f001 f860 	bl	8016a32 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8015972:	4b06      	ldr	r3, [pc, #24]	; (801598c <dhcp_handle_nak+0x30>)
 8015974:	4a05      	ldr	r2, [pc, #20]	; (801598c <dhcp_handle_nak+0x30>)
 8015976:	4905      	ldr	r1, [pc, #20]	; (801598c <dhcp_handle_nak+0x30>)
 8015978:	6878      	ldr	r0, [r7, #4]
 801597a:	f7f8 fd6d 	bl	800e458 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 801597e:	6878      	ldr	r0, [r7, #4]
 8015980:	f000 fc48 	bl	8016214 <dhcp_discover>
}
 8015984:	bf00      	nop
 8015986:	3710      	adds	r7, #16
 8015988:	46bd      	mov	sp, r7
 801598a:	bd80      	pop	{r7, pc}
 801598c:	0806c870 	.word	0x0806c870

08015990 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 8015990:	b580      	push	{r7, lr}
 8015992:	b084      	sub	sp, #16
 8015994:	af00      	add	r7, sp, #0
 8015996:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015998:	687b      	ldr	r3, [r7, #4]
 801599a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801599c:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 801599e:	2108      	movs	r1, #8
 80159a0:	68f8      	ldr	r0, [r7, #12]
 80159a2:	f001 f846 	bl	8016a32 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 80159a6:	68fb      	ldr	r3, [r7, #12]
 80159a8:	331c      	adds	r3, #28
 80159aa:	2200      	movs	r2, #0
 80159ac:	4619      	mov	r1, r3
 80159ae:	6878      	ldr	r0, [r7, #4]
 80159b0:	f002 fbc2 	bl	8018138 <etharp_query>
 80159b4:	4603      	mov	r3, r0
 80159b6:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 80159b8:	68fb      	ldr	r3, [r7, #12]
 80159ba:	799b      	ldrb	r3, [r3, #6]
 80159bc:	2bff      	cmp	r3, #255	; 0xff
 80159be:	d005      	beq.n	80159cc <dhcp_check+0x3c>
    dhcp->tries++;
 80159c0:	68fb      	ldr	r3, [r7, #12]
 80159c2:	799b      	ldrb	r3, [r3, #6]
 80159c4:	3301      	adds	r3, #1
 80159c6:	b2da      	uxtb	r2, r3
 80159c8:	68fb      	ldr	r3, [r7, #12]
 80159ca:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 80159cc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80159d0:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80159d2:	893b      	ldrh	r3, [r7, #8]
 80159d4:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80159d8:	4a06      	ldr	r2, [pc, #24]	; (80159f4 <dhcp_check+0x64>)
 80159da:	fb82 1203 	smull	r1, r2, r2, r3
 80159de:	1152      	asrs	r2, r2, #5
 80159e0:	17db      	asrs	r3, r3, #31
 80159e2:	1ad3      	subs	r3, r2, r3
 80159e4:	b29a      	uxth	r2, r3
 80159e6:	68fb      	ldr	r3, [r7, #12]
 80159e8:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 80159ea:	bf00      	nop
 80159ec:	3710      	adds	r7, #16
 80159ee:	46bd      	mov	sp, r7
 80159f0:	bd80      	pop	{r7, pc}
 80159f2:	bf00      	nop
 80159f4:	10624dd3 	.word	0x10624dd3

080159f8 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 80159f8:	b580      	push	{r7, lr}
 80159fa:	b084      	sub	sp, #16
 80159fc:	af00      	add	r7, sp, #0
 80159fe:	6078      	str	r0, [r7, #4]
 8015a00:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015a02:	687b      	ldr	r3, [r7, #4]
 8015a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015a06:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 8015a08:	4b0c      	ldr	r3, [pc, #48]	; (8015a3c <dhcp_handle_offer+0x44>)
 8015a0a:	789b      	ldrb	r3, [r3, #2]
 8015a0c:	2b00      	cmp	r3, #0
 8015a0e:	d011      	beq.n	8015a34 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 8015a10:	68fb      	ldr	r3, [r7, #12]
 8015a12:	2200      	movs	r2, #0
 8015a14:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8015a16:	4b0a      	ldr	r3, [pc, #40]	; (8015a40 <dhcp_handle_offer+0x48>)
 8015a18:	689b      	ldr	r3, [r3, #8]
 8015a1a:	4618      	mov	r0, r3
 8015a1c:	f7f7 fd0f 	bl	800d43e <lwip_htonl>
 8015a20:	4602      	mov	r2, r0
 8015a22:	68fb      	ldr	r3, [r7, #12]
 8015a24:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8015a26:	683b      	ldr	r3, [r7, #0]
 8015a28:	691a      	ldr	r2, [r3, #16]
 8015a2a:	68fb      	ldr	r3, [r7, #12]
 8015a2c:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 8015a2e:	6878      	ldr	r0, [r7, #4]
 8015a30:	f000 f808 	bl	8015a44 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 8015a34:	bf00      	nop
 8015a36:	3710      	adds	r7, #16
 8015a38:	46bd      	mov	sp, r7
 8015a3a:	bd80      	pop	{r7, pc}
 8015a3c:	20013d5c 	.word	0x20013d5c
 8015a40:	20013d3c 	.word	0x20013d3c

08015a44 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 8015a44:	b5b0      	push	{r4, r5, r7, lr}
 8015a46:	b08a      	sub	sp, #40	; 0x28
 8015a48:	af02      	add	r7, sp, #8
 8015a4a:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8015a4c:	687b      	ldr	r3, [r7, #4]
 8015a4e:	2b00      	cmp	r3, #0
 8015a50:	d109      	bne.n	8015a66 <dhcp_select+0x22>
 8015a52:	4b71      	ldr	r3, [pc, #452]	; (8015c18 <dhcp_select+0x1d4>)
 8015a54:	f240 1277 	movw	r2, #375	; 0x177
 8015a58:	4970      	ldr	r1, [pc, #448]	; (8015c1c <dhcp_select+0x1d8>)
 8015a5a:	4871      	ldr	r0, [pc, #452]	; (8015c20 <dhcp_select+0x1dc>)
 8015a5c:	f005 f9b8 	bl	801add0 <iprintf>
 8015a60:	f06f 030f 	mvn.w	r3, #15
 8015a64:	e0d3      	b.n	8015c0e <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 8015a66:	687b      	ldr	r3, [r7, #4]
 8015a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015a6a:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8015a6c:	69bb      	ldr	r3, [r7, #24]
 8015a6e:	2b00      	cmp	r3, #0
 8015a70:	d109      	bne.n	8015a86 <dhcp_select+0x42>
 8015a72:	4b69      	ldr	r3, [pc, #420]	; (8015c18 <dhcp_select+0x1d4>)
 8015a74:	f240 1279 	movw	r2, #377	; 0x179
 8015a78:	496a      	ldr	r1, [pc, #424]	; (8015c24 <dhcp_select+0x1e0>)
 8015a7a:	4869      	ldr	r0, [pc, #420]	; (8015c20 <dhcp_select+0x1dc>)
 8015a7c:	f005 f9a8 	bl	801add0 <iprintf>
 8015a80:	f06f 0305 	mvn.w	r3, #5
 8015a84:	e0c3      	b.n	8015c0e <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 8015a86:	2101      	movs	r1, #1
 8015a88:	69b8      	ldr	r0, [r7, #24]
 8015a8a:	f000 ffd2 	bl	8016a32 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8015a8e:	f107 030c 	add.w	r3, r7, #12
 8015a92:	2203      	movs	r2, #3
 8015a94:	69b9      	ldr	r1, [r7, #24]
 8015a96:	6878      	ldr	r0, [r7, #4]
 8015a98:	f001 fc64 	bl	8017364 <dhcp_create_msg>
 8015a9c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8015a9e:	697b      	ldr	r3, [r7, #20]
 8015aa0:	2b00      	cmp	r3, #0
 8015aa2:	f000 8085 	beq.w	8015bb0 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8015aa6:	697b      	ldr	r3, [r7, #20]
 8015aa8:	685b      	ldr	r3, [r3, #4]
 8015aaa:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8015aac:	89b8      	ldrh	r0, [r7, #12]
 8015aae:	693b      	ldr	r3, [r7, #16]
 8015ab0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015ab4:	2302      	movs	r3, #2
 8015ab6:	2239      	movs	r2, #57	; 0x39
 8015ab8:	f000 ffd6 	bl	8016a68 <dhcp_option>
 8015abc:	4603      	mov	r3, r0
 8015abe:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8015ac0:	89b8      	ldrh	r0, [r7, #12]
 8015ac2:	693b      	ldr	r3, [r7, #16]
 8015ac4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015ac8:	687b      	ldr	r3, [r7, #4]
 8015aca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015acc:	461a      	mov	r2, r3
 8015ace:	f001 f825 	bl	8016b1c <dhcp_option_short>
 8015ad2:	4603      	mov	r3, r0
 8015ad4:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8015ad6:	89b8      	ldrh	r0, [r7, #12]
 8015ad8:	693b      	ldr	r3, [r7, #16]
 8015ada:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015ade:	2304      	movs	r3, #4
 8015ae0:	2232      	movs	r2, #50	; 0x32
 8015ae2:	f000 ffc1 	bl	8016a68 <dhcp_option>
 8015ae6:	4603      	mov	r3, r0
 8015ae8:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8015aea:	89bc      	ldrh	r4, [r7, #12]
 8015aec:	693b      	ldr	r3, [r7, #16]
 8015aee:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8015af2:	69bb      	ldr	r3, [r7, #24]
 8015af4:	69db      	ldr	r3, [r3, #28]
 8015af6:	4618      	mov	r0, r3
 8015af8:	f7f7 fca1 	bl	800d43e <lwip_htonl>
 8015afc:	4603      	mov	r3, r0
 8015afe:	461a      	mov	r2, r3
 8015b00:	4629      	mov	r1, r5
 8015b02:	4620      	mov	r0, r4
 8015b04:	f001 f83c 	bl	8016b80 <dhcp_option_long>
 8015b08:	4603      	mov	r3, r0
 8015b0a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8015b0c:	89b8      	ldrh	r0, [r7, #12]
 8015b0e:	693b      	ldr	r3, [r7, #16]
 8015b10:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015b14:	2304      	movs	r3, #4
 8015b16:	2236      	movs	r2, #54	; 0x36
 8015b18:	f000 ffa6 	bl	8016a68 <dhcp_option>
 8015b1c:	4603      	mov	r3, r0
 8015b1e:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8015b20:	89bc      	ldrh	r4, [r7, #12]
 8015b22:	693b      	ldr	r3, [r7, #16]
 8015b24:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8015b28:	69bb      	ldr	r3, [r7, #24]
 8015b2a:	699b      	ldr	r3, [r3, #24]
 8015b2c:	4618      	mov	r0, r3
 8015b2e:	f7f7 fc86 	bl	800d43e <lwip_htonl>
 8015b32:	4603      	mov	r3, r0
 8015b34:	461a      	mov	r2, r3
 8015b36:	4629      	mov	r1, r5
 8015b38:	4620      	mov	r0, r4
 8015b3a:	f001 f821 	bl	8016b80 <dhcp_option_long>
 8015b3e:	4603      	mov	r3, r0
 8015b40:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8015b42:	89b8      	ldrh	r0, [r7, #12]
 8015b44:	693b      	ldr	r3, [r7, #16]
 8015b46:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015b4a:	2303      	movs	r3, #3
 8015b4c:	2237      	movs	r2, #55	; 0x37
 8015b4e:	f000 ff8b 	bl	8016a68 <dhcp_option>
 8015b52:	4603      	mov	r3, r0
 8015b54:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015b56:	2300      	movs	r3, #0
 8015b58:	77fb      	strb	r3, [r7, #31]
 8015b5a:	e00e      	b.n	8015b7a <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8015b5c:	89b8      	ldrh	r0, [r7, #12]
 8015b5e:	693b      	ldr	r3, [r7, #16]
 8015b60:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015b64:	7ffb      	ldrb	r3, [r7, #31]
 8015b66:	4a30      	ldr	r2, [pc, #192]	; (8015c28 <dhcp_select+0x1e4>)
 8015b68:	5cd3      	ldrb	r3, [r2, r3]
 8015b6a:	461a      	mov	r2, r3
 8015b6c:	f000 ffb0 	bl	8016ad0 <dhcp_option_byte>
 8015b70:	4603      	mov	r3, r0
 8015b72:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015b74:	7ffb      	ldrb	r3, [r7, #31]
 8015b76:	3301      	adds	r3, #1
 8015b78:	77fb      	strb	r3, [r7, #31]
 8015b7a:	7ffb      	ldrb	r3, [r7, #31]
 8015b7c:	2b02      	cmp	r3, #2
 8015b7e:	d9ed      	bls.n	8015b5c <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8015b80:	89b8      	ldrh	r0, [r7, #12]
 8015b82:	693b      	ldr	r3, [r7, #16]
 8015b84:	33f0      	adds	r3, #240	; 0xf0
 8015b86:	697a      	ldr	r2, [r7, #20]
 8015b88:	4619      	mov	r1, r3
 8015b8a:	f001 fcc1 	bl	8017510 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8015b8e:	4b27      	ldr	r3, [pc, #156]	; (8015c2c <dhcp_select+0x1e8>)
 8015b90:	6818      	ldr	r0, [r3, #0]
 8015b92:	4b27      	ldr	r3, [pc, #156]	; (8015c30 <dhcp_select+0x1ec>)
 8015b94:	9301      	str	r3, [sp, #4]
 8015b96:	687b      	ldr	r3, [r7, #4]
 8015b98:	9300      	str	r3, [sp, #0]
 8015b9a:	2343      	movs	r3, #67	; 0x43
 8015b9c:	4a25      	ldr	r2, [pc, #148]	; (8015c34 <dhcp_select+0x1f0>)
 8015b9e:	6979      	ldr	r1, [r7, #20]
 8015ba0:	f7ff fb98 	bl	80152d4 <udp_sendto_if_src>
 8015ba4:	4603      	mov	r3, r0
 8015ba6:	77bb      	strb	r3, [r7, #30]
    pbuf_free(p_out);
 8015ba8:	6978      	ldr	r0, [r7, #20]
 8015baa:	f7f9 f955 	bl	800ee58 <pbuf_free>
 8015bae:	e001      	b.n	8015bb4 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8015bb0:	23ff      	movs	r3, #255	; 0xff
 8015bb2:	77bb      	strb	r3, [r7, #30]
  }
  if (dhcp->tries < 255) {
 8015bb4:	69bb      	ldr	r3, [r7, #24]
 8015bb6:	799b      	ldrb	r3, [r3, #6]
 8015bb8:	2bff      	cmp	r3, #255	; 0xff
 8015bba:	d005      	beq.n	8015bc8 <dhcp_select+0x184>
    dhcp->tries++;
 8015bbc:	69bb      	ldr	r3, [r7, #24]
 8015bbe:	799b      	ldrb	r3, [r3, #6]
 8015bc0:	3301      	adds	r3, #1
 8015bc2:	b2da      	uxtb	r2, r3
 8015bc4:	69bb      	ldr	r3, [r7, #24]
 8015bc6:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8015bc8:	69bb      	ldr	r3, [r7, #24]
 8015bca:	799b      	ldrb	r3, [r3, #6]
 8015bcc:	2b05      	cmp	r3, #5
 8015bce:	d80d      	bhi.n	8015bec <dhcp_select+0x1a8>
 8015bd0:	69bb      	ldr	r3, [r7, #24]
 8015bd2:	799b      	ldrb	r3, [r3, #6]
 8015bd4:	461a      	mov	r2, r3
 8015bd6:	2301      	movs	r3, #1
 8015bd8:	4093      	lsls	r3, r2
 8015bda:	b29b      	uxth	r3, r3
 8015bdc:	461a      	mov	r2, r3
 8015bde:	0152      	lsls	r2, r2, #5
 8015be0:	1ad2      	subs	r2, r2, r3
 8015be2:	0092      	lsls	r2, r2, #2
 8015be4:	4413      	add	r3, r2
 8015be6:	00db      	lsls	r3, r3, #3
 8015be8:	b29b      	uxth	r3, r3
 8015bea:	e001      	b.n	8015bf0 <dhcp_select+0x1ac>
 8015bec:	f64e 2360 	movw	r3, #60000	; 0xea60
 8015bf0:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8015bf2:	89fb      	ldrh	r3, [r7, #14]
 8015bf4:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8015bf8:	4a0f      	ldr	r2, [pc, #60]	; (8015c38 <dhcp_select+0x1f4>)
 8015bfa:	fb82 1203 	smull	r1, r2, r2, r3
 8015bfe:	1152      	asrs	r2, r2, #5
 8015c00:	17db      	asrs	r3, r3, #31
 8015c02:	1ad3      	subs	r3, r2, r3
 8015c04:	b29a      	uxth	r2, r3
 8015c06:	69bb      	ldr	r3, [r7, #24]
 8015c08:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8015c0a:	f997 301e 	ldrsb.w	r3, [r7, #30]
}
 8015c0e:	4618      	mov	r0, r3
 8015c10:	3720      	adds	r7, #32
 8015c12:	46bd      	mov	sp, r7
 8015c14:	bdb0      	pop	{r4, r5, r7, pc}
 8015c16:	bf00      	nop
 8015c18:	0801ffa8 	.word	0x0801ffa8
 8015c1c:	08020054 	.word	0x08020054
 8015c20:	08020008 	.word	0x08020008
 8015c24:	08020070 	.word	0x08020070
 8015c28:	200000c4 	.word	0x200000c4
 8015c2c:	20013d64 	.word	0x20013d64
 8015c30:	0806c870 	.word	0x0806c870
 8015c34:	0806c874 	.word	0x0806c874
 8015c38:	10624dd3 	.word	0x10624dd3

08015c3c <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 8015c3c:	b580      	push	{r7, lr}
 8015c3e:	b082      	sub	sp, #8
 8015c40:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 8015c42:	4b27      	ldr	r3, [pc, #156]	; (8015ce0 <dhcp_coarse_tmr+0xa4>)
 8015c44:	681b      	ldr	r3, [r3, #0]
 8015c46:	607b      	str	r3, [r7, #4]
 8015c48:	e042      	b.n	8015cd0 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8015c4a:	687b      	ldr	r3, [r7, #4]
 8015c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015c4e:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 8015c50:	683b      	ldr	r3, [r7, #0]
 8015c52:	2b00      	cmp	r3, #0
 8015c54:	d039      	beq.n	8015cca <dhcp_coarse_tmr+0x8e>
 8015c56:	683b      	ldr	r3, [r7, #0]
 8015c58:	795b      	ldrb	r3, [r3, #5]
 8015c5a:	2b00      	cmp	r3, #0
 8015c5c:	d035      	beq.n	8015cca <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 8015c5e:	683b      	ldr	r3, [r7, #0]
 8015c60:	8a9b      	ldrh	r3, [r3, #20]
 8015c62:	2b00      	cmp	r3, #0
 8015c64:	d012      	beq.n	8015c8c <dhcp_coarse_tmr+0x50>
 8015c66:	683b      	ldr	r3, [r7, #0]
 8015c68:	8a5b      	ldrh	r3, [r3, #18]
 8015c6a:	3301      	adds	r3, #1
 8015c6c:	b29a      	uxth	r2, r3
 8015c6e:	683b      	ldr	r3, [r7, #0]
 8015c70:	825a      	strh	r2, [r3, #18]
 8015c72:	683b      	ldr	r3, [r7, #0]
 8015c74:	8a5a      	ldrh	r2, [r3, #18]
 8015c76:	683b      	ldr	r3, [r7, #0]
 8015c78:	8a9b      	ldrh	r3, [r3, #20]
 8015c7a:	429a      	cmp	r2, r3
 8015c7c:	d106      	bne.n	8015c8c <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 8015c7e:	6878      	ldr	r0, [r7, #4]
 8015c80:	f000 fe32 	bl	80168e8 <dhcp_release_and_stop>
        dhcp_start(netif);
 8015c84:	6878      	ldr	r0, [r7, #4]
 8015c86:	f000 f969 	bl	8015f5c <dhcp_start>
 8015c8a:	e01e      	b.n	8015cca <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 8015c8c:	683b      	ldr	r3, [r7, #0]
 8015c8e:	8a1b      	ldrh	r3, [r3, #16]
 8015c90:	2b00      	cmp	r3, #0
 8015c92:	d00b      	beq.n	8015cac <dhcp_coarse_tmr+0x70>
 8015c94:	683b      	ldr	r3, [r7, #0]
 8015c96:	8a1b      	ldrh	r3, [r3, #16]
 8015c98:	1e5a      	subs	r2, r3, #1
 8015c9a:	b291      	uxth	r1, r2
 8015c9c:	683a      	ldr	r2, [r7, #0]
 8015c9e:	8211      	strh	r1, [r2, #16]
 8015ca0:	2b01      	cmp	r3, #1
 8015ca2:	d103      	bne.n	8015cac <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 8015ca4:	6878      	ldr	r0, [r7, #4]
 8015ca6:	f000 f8c6 	bl	8015e36 <dhcp_t2_timeout>
 8015caa:	e00e      	b.n	8015cca <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8015cac:	683b      	ldr	r3, [r7, #0]
 8015cae:	89db      	ldrh	r3, [r3, #14]
 8015cb0:	2b00      	cmp	r3, #0
 8015cb2:	d00a      	beq.n	8015cca <dhcp_coarse_tmr+0x8e>
 8015cb4:	683b      	ldr	r3, [r7, #0]
 8015cb6:	89db      	ldrh	r3, [r3, #14]
 8015cb8:	1e5a      	subs	r2, r3, #1
 8015cba:	b291      	uxth	r1, r2
 8015cbc:	683a      	ldr	r2, [r7, #0]
 8015cbe:	81d1      	strh	r1, [r2, #14]
 8015cc0:	2b01      	cmp	r3, #1
 8015cc2:	d102      	bne.n	8015cca <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 8015cc4:	6878      	ldr	r0, [r7, #4]
 8015cc6:	f000 f888 	bl	8015dda <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 8015cca:	687b      	ldr	r3, [r7, #4]
 8015ccc:	681b      	ldr	r3, [r3, #0]
 8015cce:	607b      	str	r3, [r7, #4]
 8015cd0:	687b      	ldr	r3, [r7, #4]
 8015cd2:	2b00      	cmp	r3, #0
 8015cd4:	d1b9      	bne.n	8015c4a <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 8015cd6:	bf00      	nop
 8015cd8:	bf00      	nop
 8015cda:	3708      	adds	r7, #8
 8015cdc:	46bd      	mov	sp, r7
 8015cde:	bd80      	pop	{r7, pc}
 8015ce0:	20013ccc 	.word	0x20013ccc

08015ce4 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 8015ce4:	b580      	push	{r7, lr}
 8015ce6:	b082      	sub	sp, #8
 8015ce8:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 8015cea:	4b16      	ldr	r3, [pc, #88]	; (8015d44 <dhcp_fine_tmr+0x60>)
 8015cec:	681b      	ldr	r3, [r3, #0]
 8015cee:	607b      	str	r3, [r7, #4]
 8015cf0:	e020      	b.n	8015d34 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8015cf2:	687b      	ldr	r3, [r7, #4]
 8015cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015cf6:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 8015cf8:	683b      	ldr	r3, [r7, #0]
 8015cfa:	2b00      	cmp	r3, #0
 8015cfc:	d017      	beq.n	8015d2e <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 8015cfe:	683b      	ldr	r3, [r7, #0]
 8015d00:	891b      	ldrh	r3, [r3, #8]
 8015d02:	2b01      	cmp	r3, #1
 8015d04:	d906      	bls.n	8015d14 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 8015d06:	683b      	ldr	r3, [r7, #0]
 8015d08:	891b      	ldrh	r3, [r3, #8]
 8015d0a:	3b01      	subs	r3, #1
 8015d0c:	b29a      	uxth	r2, r3
 8015d0e:	683b      	ldr	r3, [r7, #0]
 8015d10:	811a      	strh	r2, [r3, #8]
 8015d12:	e00c      	b.n	8015d2e <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 8015d14:	683b      	ldr	r3, [r7, #0]
 8015d16:	891b      	ldrh	r3, [r3, #8]
 8015d18:	2b01      	cmp	r3, #1
 8015d1a:	d108      	bne.n	8015d2e <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 8015d1c:	683b      	ldr	r3, [r7, #0]
 8015d1e:	891b      	ldrh	r3, [r3, #8]
 8015d20:	3b01      	subs	r3, #1
 8015d22:	b29a      	uxth	r2, r3
 8015d24:	683b      	ldr	r3, [r7, #0]
 8015d26:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 8015d28:	6878      	ldr	r0, [r7, #4]
 8015d2a:	f000 f80d 	bl	8015d48 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 8015d2e:	687b      	ldr	r3, [r7, #4]
 8015d30:	681b      	ldr	r3, [r3, #0]
 8015d32:	607b      	str	r3, [r7, #4]
 8015d34:	687b      	ldr	r3, [r7, #4]
 8015d36:	2b00      	cmp	r3, #0
 8015d38:	d1db      	bne.n	8015cf2 <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 8015d3a:	bf00      	nop
 8015d3c:	bf00      	nop
 8015d3e:	3708      	adds	r7, #8
 8015d40:	46bd      	mov	sp, r7
 8015d42:	bd80      	pop	{r7, pc}
 8015d44:	20013ccc 	.word	0x20013ccc

08015d48 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 8015d48:	b580      	push	{r7, lr}
 8015d4a:	b084      	sub	sp, #16
 8015d4c:	af00      	add	r7, sp, #0
 8015d4e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015d50:	687b      	ldr	r3, [r7, #4]
 8015d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015d54:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8015d56:	68fb      	ldr	r3, [r7, #12]
 8015d58:	795b      	ldrb	r3, [r3, #5]
 8015d5a:	2b0c      	cmp	r3, #12
 8015d5c:	d003      	beq.n	8015d66 <dhcp_timeout+0x1e>
 8015d5e:	68fb      	ldr	r3, [r7, #12]
 8015d60:	795b      	ldrb	r3, [r3, #5]
 8015d62:	2b06      	cmp	r3, #6
 8015d64:	d103      	bne.n	8015d6e <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 8015d66:	6878      	ldr	r0, [r7, #4]
 8015d68:	f000 fa54 	bl	8016214 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 8015d6c:	e031      	b.n	8015dd2 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 8015d6e:	68fb      	ldr	r3, [r7, #12]
 8015d70:	795b      	ldrb	r3, [r3, #5]
 8015d72:	2b01      	cmp	r3, #1
 8015d74:	d10e      	bne.n	8015d94 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 8015d76:	68fb      	ldr	r3, [r7, #12]
 8015d78:	799b      	ldrb	r3, [r3, #6]
 8015d7a:	2b05      	cmp	r3, #5
 8015d7c:	d803      	bhi.n	8015d86 <dhcp_timeout+0x3e>
      dhcp_select(netif);
 8015d7e:	6878      	ldr	r0, [r7, #4]
 8015d80:	f7ff fe60 	bl	8015a44 <dhcp_select>
}
 8015d84:	e025      	b.n	8015dd2 <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 8015d86:	6878      	ldr	r0, [r7, #4]
 8015d88:	f000 fdae 	bl	80168e8 <dhcp_release_and_stop>
      dhcp_start(netif);
 8015d8c:	6878      	ldr	r0, [r7, #4]
 8015d8e:	f000 f8e5 	bl	8015f5c <dhcp_start>
}
 8015d92:	e01e      	b.n	8015dd2 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 8015d94:	68fb      	ldr	r3, [r7, #12]
 8015d96:	795b      	ldrb	r3, [r3, #5]
 8015d98:	2b08      	cmp	r3, #8
 8015d9a:	d10b      	bne.n	8015db4 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 8015d9c:	68fb      	ldr	r3, [r7, #12]
 8015d9e:	799b      	ldrb	r3, [r3, #6]
 8015da0:	2b01      	cmp	r3, #1
 8015da2:	d803      	bhi.n	8015dac <dhcp_timeout+0x64>
      dhcp_check(netif);
 8015da4:	6878      	ldr	r0, [r7, #4]
 8015da6:	f7ff fdf3 	bl	8015990 <dhcp_check>
}
 8015daa:	e012      	b.n	8015dd2 <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 8015dac:	6878      	ldr	r0, [r7, #4]
 8015dae:	f000 fad3 	bl	8016358 <dhcp_bind>
}
 8015db2:	e00e      	b.n	8015dd2 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 8015db4:	68fb      	ldr	r3, [r7, #12]
 8015db6:	795b      	ldrb	r3, [r3, #5]
 8015db8:	2b03      	cmp	r3, #3
 8015dba:	d10a      	bne.n	8015dd2 <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 8015dbc:	68fb      	ldr	r3, [r7, #12]
 8015dbe:	799b      	ldrb	r3, [r3, #6]
 8015dc0:	2b01      	cmp	r3, #1
 8015dc2:	d803      	bhi.n	8015dcc <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 8015dc4:	6878      	ldr	r0, [r7, #4]
 8015dc6:	f000 fcd9 	bl	801677c <dhcp_reboot>
}
 8015dca:	e002      	b.n	8015dd2 <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 8015dcc:	6878      	ldr	r0, [r7, #4]
 8015dce:	f000 fa21 	bl	8016214 <dhcp_discover>
}
 8015dd2:	bf00      	nop
 8015dd4:	3710      	adds	r7, #16
 8015dd6:	46bd      	mov	sp, r7
 8015dd8:	bd80      	pop	{r7, pc}

08015dda <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 8015dda:	b580      	push	{r7, lr}
 8015ddc:	b084      	sub	sp, #16
 8015dde:	af00      	add	r7, sp, #0
 8015de0:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015de2:	687b      	ldr	r3, [r7, #4]
 8015de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015de6:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8015de8:	68fb      	ldr	r3, [r7, #12]
 8015dea:	795b      	ldrb	r3, [r3, #5]
 8015dec:	2b01      	cmp	r3, #1
 8015dee:	d007      	beq.n	8015e00 <dhcp_t1_timeout+0x26>
 8015df0:	68fb      	ldr	r3, [r7, #12]
 8015df2:	795b      	ldrb	r3, [r3, #5]
 8015df4:	2b0a      	cmp	r3, #10
 8015df6:	d003      	beq.n	8015e00 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 8015df8:	68fb      	ldr	r3, [r7, #12]
 8015dfa:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8015dfc:	2b05      	cmp	r3, #5
 8015dfe:	d116      	bne.n	8015e2e <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 8015e00:	6878      	ldr	r0, [r7, #4]
 8015e02:	f000 fb83 	bl	801650c <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8015e06:	68fb      	ldr	r3, [r7, #12]
 8015e08:	899b      	ldrh	r3, [r3, #12]
 8015e0a:	461a      	mov	r2, r3
 8015e0c:	68fb      	ldr	r3, [r7, #12]
 8015e0e:	8a5b      	ldrh	r3, [r3, #18]
 8015e10:	1ad3      	subs	r3, r2, r3
 8015e12:	2b01      	cmp	r3, #1
 8015e14:	dd0b      	ble.n	8015e2e <dhcp_t1_timeout+0x54>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 8015e16:	68fb      	ldr	r3, [r7, #12]
 8015e18:	899b      	ldrh	r3, [r3, #12]
 8015e1a:	461a      	mov	r2, r3
 8015e1c:	68fb      	ldr	r3, [r7, #12]
 8015e1e:	8a5b      	ldrh	r3, [r3, #18]
 8015e20:	1ad3      	subs	r3, r2, r3
 8015e22:	0fda      	lsrs	r2, r3, #31
 8015e24:	4413      	add	r3, r2
 8015e26:	105b      	asrs	r3, r3, #1
 8015e28:	b29a      	uxth	r2, r3
 8015e2a:	68fb      	ldr	r3, [r7, #12]
 8015e2c:	81da      	strh	r2, [r3, #14]
    }
  }
}
 8015e2e:	bf00      	nop
 8015e30:	3710      	adds	r7, #16
 8015e32:	46bd      	mov	sp, r7
 8015e34:	bd80      	pop	{r7, pc}

08015e36 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 8015e36:	b580      	push	{r7, lr}
 8015e38:	b084      	sub	sp, #16
 8015e3a:	af00      	add	r7, sp, #0
 8015e3c:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015e3e:	687b      	ldr	r3, [r7, #4]
 8015e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015e42:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8015e44:	68fb      	ldr	r3, [r7, #12]
 8015e46:	795b      	ldrb	r3, [r3, #5]
 8015e48:	2b01      	cmp	r3, #1
 8015e4a:	d00b      	beq.n	8015e64 <dhcp_t2_timeout+0x2e>
 8015e4c:	68fb      	ldr	r3, [r7, #12]
 8015e4e:	795b      	ldrb	r3, [r3, #5]
 8015e50:	2b0a      	cmp	r3, #10
 8015e52:	d007      	beq.n	8015e64 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8015e54:	68fb      	ldr	r3, [r7, #12]
 8015e56:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8015e58:	2b05      	cmp	r3, #5
 8015e5a:	d003      	beq.n	8015e64 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8015e5c:	68fb      	ldr	r3, [r7, #12]
 8015e5e:	795b      	ldrb	r3, [r3, #5]
 8015e60:	2b04      	cmp	r3, #4
 8015e62:	d116      	bne.n	8015e92 <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 8015e64:	6878      	ldr	r0, [r7, #4]
 8015e66:	f000 fbed 	bl	8016644 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8015e6a:	68fb      	ldr	r3, [r7, #12]
 8015e6c:	8a9b      	ldrh	r3, [r3, #20]
 8015e6e:	461a      	mov	r2, r3
 8015e70:	68fb      	ldr	r3, [r7, #12]
 8015e72:	8a5b      	ldrh	r3, [r3, #18]
 8015e74:	1ad3      	subs	r3, r2, r3
 8015e76:	2b01      	cmp	r3, #1
 8015e78:	dd0b      	ble.n	8015e92 <dhcp_t2_timeout+0x5c>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 8015e7a:	68fb      	ldr	r3, [r7, #12]
 8015e7c:	8a9b      	ldrh	r3, [r3, #20]
 8015e7e:	461a      	mov	r2, r3
 8015e80:	68fb      	ldr	r3, [r7, #12]
 8015e82:	8a5b      	ldrh	r3, [r3, #18]
 8015e84:	1ad3      	subs	r3, r2, r3
 8015e86:	0fda      	lsrs	r2, r3, #31
 8015e88:	4413      	add	r3, r2
 8015e8a:	105b      	asrs	r3, r3, #1
 8015e8c:	b29a      	uxth	r2, r3
 8015e8e:	68fb      	ldr	r3, [r7, #12]
 8015e90:	821a      	strh	r2, [r3, #16]
    }
  }
}
 8015e92:	bf00      	nop
 8015e94:	3710      	adds	r7, #16
 8015e96:	46bd      	mov	sp, r7
 8015e98:	bd80      	pop	{r7, pc}
	...

08015e9c <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 8015e9c:	b580      	push	{r7, lr}
 8015e9e:	b084      	sub	sp, #16
 8015ea0:	af00      	add	r7, sp, #0
 8015ea2:	6078      	str	r0, [r7, #4]
 8015ea4:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015ea6:	687b      	ldr	r3, [r7, #4]
 8015ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015eaa:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8015eac:	68fb      	ldr	r3, [r7, #12]
 8015eae:	2200      	movs	r2, #0
 8015eb0:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8015eb2:	68fb      	ldr	r3, [r7, #12]
 8015eb4:	2200      	movs	r2, #0
 8015eb6:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8015eb8:	4b26      	ldr	r3, [pc, #152]	; (8015f54 <dhcp_handle_ack+0xb8>)
 8015eba:	78db      	ldrb	r3, [r3, #3]
 8015ebc:	2b00      	cmp	r3, #0
 8015ebe:	d003      	beq.n	8015ec8 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 8015ec0:	4b25      	ldr	r3, [pc, #148]	; (8015f58 <dhcp_handle_ack+0xbc>)
 8015ec2:	68da      	ldr	r2, [r3, #12]
 8015ec4:	68fb      	ldr	r3, [r7, #12]
 8015ec6:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 8015ec8:	4b22      	ldr	r3, [pc, #136]	; (8015f54 <dhcp_handle_ack+0xb8>)
 8015eca:	791b      	ldrb	r3, [r3, #4]
 8015ecc:	2b00      	cmp	r3, #0
 8015ece:	d004      	beq.n	8015eda <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8015ed0:	4b21      	ldr	r3, [pc, #132]	; (8015f58 <dhcp_handle_ack+0xbc>)
 8015ed2:	691a      	ldr	r2, [r3, #16]
 8015ed4:	68fb      	ldr	r3, [r7, #12]
 8015ed6:	62da      	str	r2, [r3, #44]	; 0x2c
 8015ed8:	e004      	b.n	8015ee4 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 8015eda:	68fb      	ldr	r3, [r7, #12]
 8015edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015ede:	085a      	lsrs	r2, r3, #1
 8015ee0:	68fb      	ldr	r3, [r7, #12]
 8015ee2:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 8015ee4:	4b1b      	ldr	r3, [pc, #108]	; (8015f54 <dhcp_handle_ack+0xb8>)
 8015ee6:	795b      	ldrb	r3, [r3, #5]
 8015ee8:	2b00      	cmp	r3, #0
 8015eea:	d004      	beq.n	8015ef6 <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 8015eec:	4b1a      	ldr	r3, [pc, #104]	; (8015f58 <dhcp_handle_ack+0xbc>)
 8015eee:	695a      	ldr	r2, [r3, #20]
 8015ef0:	68fb      	ldr	r3, [r7, #12]
 8015ef2:	631a      	str	r2, [r3, #48]	; 0x30
 8015ef4:	e007      	b.n	8015f06 <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 8015ef6:	68fb      	ldr	r3, [r7, #12]
 8015ef8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8015efa:	4613      	mov	r3, r2
 8015efc:	00db      	lsls	r3, r3, #3
 8015efe:	1a9b      	subs	r3, r3, r2
 8015f00:	08da      	lsrs	r2, r3, #3
 8015f02:	68fb      	ldr	r3, [r7, #12]
 8015f04:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8015f06:	683b      	ldr	r3, [r7, #0]
 8015f08:	691a      	ldr	r2, [r3, #16]
 8015f0a:	68fb      	ldr	r3, [r7, #12]
 8015f0c:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 8015f0e:	4b11      	ldr	r3, [pc, #68]	; (8015f54 <dhcp_handle_ack+0xb8>)
 8015f10:	799b      	ldrb	r3, [r3, #6]
 8015f12:	2b00      	cmp	r3, #0
 8015f14:	d00b      	beq.n	8015f2e <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8015f16:	4b10      	ldr	r3, [pc, #64]	; (8015f58 <dhcp_handle_ack+0xbc>)
 8015f18:	699b      	ldr	r3, [r3, #24]
 8015f1a:	4618      	mov	r0, r3
 8015f1c:	f7f7 fa8f 	bl	800d43e <lwip_htonl>
 8015f20:	4602      	mov	r2, r0
 8015f22:	68fb      	ldr	r3, [r7, #12]
 8015f24:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 8015f26:	68fb      	ldr	r3, [r7, #12]
 8015f28:	2201      	movs	r2, #1
 8015f2a:	71da      	strb	r2, [r3, #7]
 8015f2c:	e002      	b.n	8015f34 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 8015f2e:	68fb      	ldr	r3, [r7, #12]
 8015f30:	2200      	movs	r2, #0
 8015f32:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8015f34:	4b07      	ldr	r3, [pc, #28]	; (8015f54 <dhcp_handle_ack+0xb8>)
 8015f36:	79db      	ldrb	r3, [r3, #7]
 8015f38:	2b00      	cmp	r3, #0
 8015f3a:	d007      	beq.n	8015f4c <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8015f3c:	4b06      	ldr	r3, [pc, #24]	; (8015f58 <dhcp_handle_ack+0xbc>)
 8015f3e:	69db      	ldr	r3, [r3, #28]
 8015f40:	4618      	mov	r0, r3
 8015f42:	f7f7 fa7c 	bl	800d43e <lwip_htonl>
 8015f46:	4602      	mov	r2, r0
 8015f48:	68fb      	ldr	r3, [r7, #12]
 8015f4a:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 8015f4c:	bf00      	nop
 8015f4e:	3710      	adds	r7, #16
 8015f50:	46bd      	mov	sp, r7
 8015f52:	bd80      	pop	{r7, pc}
 8015f54:	20013d5c 	.word	0x20013d5c
 8015f58:	20013d3c 	.word	0x20013d3c

08015f5c <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 8015f5c:	b580      	push	{r7, lr}
 8015f5e:	b084      	sub	sp, #16
 8015f60:	af00      	add	r7, sp, #0
 8015f62:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8015f64:	687b      	ldr	r3, [r7, #4]
 8015f66:	2b00      	cmp	r3, #0
 8015f68:	d109      	bne.n	8015f7e <dhcp_start+0x22>
 8015f6a:	4b37      	ldr	r3, [pc, #220]	; (8016048 <dhcp_start+0xec>)
 8015f6c:	f240 22e7 	movw	r2, #743	; 0x2e7
 8015f70:	4936      	ldr	r1, [pc, #216]	; (801604c <dhcp_start+0xf0>)
 8015f72:	4837      	ldr	r0, [pc, #220]	; (8016050 <dhcp_start+0xf4>)
 8015f74:	f004 ff2c 	bl	801add0 <iprintf>
 8015f78:	f06f 030f 	mvn.w	r3, #15
 8015f7c:	e060      	b.n	8016040 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8015f7e:	687b      	ldr	r3, [r7, #4]
 8015f80:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015f84:	f003 0301 	and.w	r3, r3, #1
 8015f88:	2b00      	cmp	r3, #0
 8015f8a:	d109      	bne.n	8015fa0 <dhcp_start+0x44>
 8015f8c:	4b2e      	ldr	r3, [pc, #184]	; (8016048 <dhcp_start+0xec>)
 8015f8e:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 8015f92:	4930      	ldr	r1, [pc, #192]	; (8016054 <dhcp_start+0xf8>)
 8015f94:	482e      	ldr	r0, [pc, #184]	; (8016050 <dhcp_start+0xf4>)
 8015f96:	f004 ff1b 	bl	801add0 <iprintf>
 8015f9a:	f06f 030f 	mvn.w	r3, #15
 8015f9e:	e04f      	b.n	8016040 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 8015fa0:	687b      	ldr	r3, [r7, #4]
 8015fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015fa4:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8015fa6:	687b      	ldr	r3, [r7, #4]
 8015fa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015faa:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8015fae:	d202      	bcs.n	8015fb6 <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 8015fb0:	f04f 33ff 	mov.w	r3, #4294967295
 8015fb4:	e044      	b.n	8016040 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 8015fb6:	68fb      	ldr	r3, [r7, #12]
 8015fb8:	2b00      	cmp	r3, #0
 8015fba:	d10d      	bne.n	8015fd8 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 8015fbc:	2034      	movs	r0, #52	; 0x34
 8015fbe:	f7f7 fed5 	bl	800dd6c <mem_malloc>
 8015fc2:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 8015fc4:	68fb      	ldr	r3, [r7, #12]
 8015fc6:	2b00      	cmp	r3, #0
 8015fc8:	d102      	bne.n	8015fd0 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 8015fca:	f04f 33ff 	mov.w	r3, #4294967295
 8015fce:	e037      	b.n	8016040 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8015fd0:	687b      	ldr	r3, [r7, #4]
 8015fd2:	68fa      	ldr	r2, [r7, #12]
 8015fd4:	625a      	str	r2, [r3, #36]	; 0x24
 8015fd6:	e005      	b.n	8015fe4 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 8015fd8:	68fb      	ldr	r3, [r7, #12]
 8015fda:	791b      	ldrb	r3, [r3, #4]
 8015fdc:	2b00      	cmp	r3, #0
 8015fde:	d001      	beq.n	8015fe4 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8015fe0:	f7ff fc92 	bl	8015908 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 8015fe4:	2234      	movs	r2, #52	; 0x34
 8015fe6:	2100      	movs	r1, #0
 8015fe8:	68f8      	ldr	r0, [r7, #12]
 8015fea:	f004 f989 	bl	801a300 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 8015fee:	f7ff fc39 	bl	8015864 <dhcp_inc_pcb_refcount>
 8015ff2:	4603      	mov	r3, r0
 8015ff4:	2b00      	cmp	r3, #0
 8015ff6:	d002      	beq.n	8015ffe <dhcp_start+0xa2>
    return ERR_MEM;
 8015ff8:	f04f 33ff 	mov.w	r3, #4294967295
 8015ffc:	e020      	b.n	8016040 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 8015ffe:	68fb      	ldr	r3, [r7, #12]
 8016000:	2201      	movs	r2, #1
 8016002:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 8016004:	687b      	ldr	r3, [r7, #4]
 8016006:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801600a:	f003 0304 	and.w	r3, r3, #4
 801600e:	2b00      	cmp	r3, #0
 8016010:	d105      	bne.n	801601e <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 8016012:	2102      	movs	r1, #2
 8016014:	68f8      	ldr	r0, [r7, #12]
 8016016:	f000 fd0c 	bl	8016a32 <dhcp_set_state>
    return ERR_OK;
 801601a:	2300      	movs	r3, #0
 801601c:	e010      	b.n	8016040 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 801601e:	6878      	ldr	r0, [r7, #4]
 8016020:	f000 f8f8 	bl	8016214 <dhcp_discover>
 8016024:	4603      	mov	r3, r0
 8016026:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 8016028:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801602c:	2b00      	cmp	r3, #0
 801602e:	d005      	beq.n	801603c <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 8016030:	6878      	ldr	r0, [r7, #4]
 8016032:	f000 fc59 	bl	80168e8 <dhcp_release_and_stop>
    return ERR_MEM;
 8016036:	f04f 33ff 	mov.w	r3, #4294967295
 801603a:	e001      	b.n	8016040 <dhcp_start+0xe4>
  }
  return result;
 801603c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8016040:	4618      	mov	r0, r3
 8016042:	3710      	adds	r7, #16
 8016044:	46bd      	mov	sp, r7
 8016046:	bd80      	pop	{r7, pc}
 8016048:	0801ffa8 	.word	0x0801ffa8
 801604c:	0802008c 	.word	0x0802008c
 8016050:	08020008 	.word	0x08020008
 8016054:	080200d0 	.word	0x080200d0

08016058 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 8016058:	b580      	push	{r7, lr}
 801605a:	b084      	sub	sp, #16
 801605c:	af00      	add	r7, sp, #0
 801605e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016060:	687b      	ldr	r3, [r7, #4]
 8016062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016064:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 8016066:	68fb      	ldr	r3, [r7, #12]
 8016068:	2b00      	cmp	r3, #0
 801606a:	d025      	beq.n	80160b8 <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 801606c:	68fb      	ldr	r3, [r7, #12]
 801606e:	795b      	ldrb	r3, [r3, #5]
 8016070:	2b0a      	cmp	r3, #10
 8016072:	d008      	beq.n	8016086 <dhcp_network_changed+0x2e>
 8016074:	2b0a      	cmp	r3, #10
 8016076:	dc0d      	bgt.n	8016094 <dhcp_network_changed+0x3c>
 8016078:	2b00      	cmp	r3, #0
 801607a:	d01f      	beq.n	80160bc <dhcp_network_changed+0x64>
 801607c:	2b00      	cmp	r3, #0
 801607e:	db09      	blt.n	8016094 <dhcp_network_changed+0x3c>
 8016080:	3b03      	subs	r3, #3
 8016082:	2b02      	cmp	r3, #2
 8016084:	d806      	bhi.n	8016094 <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 8016086:	68fb      	ldr	r3, [r7, #12]
 8016088:	2200      	movs	r2, #0
 801608a:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 801608c:	6878      	ldr	r0, [r7, #4]
 801608e:	f000 fb75 	bl	801677c <dhcp_reboot>
      break;
 8016092:	e014      	b.n	80160be <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 8016094:	68fb      	ldr	r3, [r7, #12]
 8016096:	795b      	ldrb	r3, [r3, #5]
 8016098:	2b0c      	cmp	r3, #12
 801609a:	d906      	bls.n	80160aa <dhcp_network_changed+0x52>
 801609c:	4b09      	ldr	r3, [pc, #36]	; (80160c4 <dhcp_network_changed+0x6c>)
 801609e:	f240 326d 	movw	r2, #877	; 0x36d
 80160a2:	4909      	ldr	r1, [pc, #36]	; (80160c8 <dhcp_network_changed+0x70>)
 80160a4:	4809      	ldr	r0, [pc, #36]	; (80160cc <dhcp_network_changed+0x74>)
 80160a6:	f004 fe93 	bl	801add0 <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 80160aa:	68fb      	ldr	r3, [r7, #12]
 80160ac:	2200      	movs	r2, #0
 80160ae:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 80160b0:	6878      	ldr	r0, [r7, #4]
 80160b2:	f000 f8af 	bl	8016214 <dhcp_discover>
      break;
 80160b6:	e002      	b.n	80160be <dhcp_network_changed+0x66>
    return;
 80160b8:	bf00      	nop
 80160ba:	e000      	b.n	80160be <dhcp_network_changed+0x66>
      break;
 80160bc:	bf00      	nop
  }
}
 80160be:	3710      	adds	r7, #16
 80160c0:	46bd      	mov	sp, r7
 80160c2:	bd80      	pop	{r7, pc}
 80160c4:	0801ffa8 	.word	0x0801ffa8
 80160c8:	080200f4 	.word	0x080200f4
 80160cc:	08020008 	.word	0x08020008

080160d0 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 80160d0:	b580      	push	{r7, lr}
 80160d2:	b084      	sub	sp, #16
 80160d4:	af00      	add	r7, sp, #0
 80160d6:	6078      	str	r0, [r7, #4]
 80160d8:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80160da:	687b      	ldr	r3, [r7, #4]
 80160dc:	2b00      	cmp	r3, #0
 80160de:	d107      	bne.n	80160f0 <dhcp_arp_reply+0x20>
 80160e0:	4b0e      	ldr	r3, [pc, #56]	; (801611c <dhcp_arp_reply+0x4c>)
 80160e2:	f240 328b 	movw	r2, #907	; 0x38b
 80160e6:	490e      	ldr	r1, [pc, #56]	; (8016120 <dhcp_arp_reply+0x50>)
 80160e8:	480e      	ldr	r0, [pc, #56]	; (8016124 <dhcp_arp_reply+0x54>)
 80160ea:	f004 fe71 	bl	801add0 <iprintf>
 80160ee:	e012      	b.n	8016116 <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 80160f0:	687b      	ldr	r3, [r7, #4]
 80160f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80160f4:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 80160f6:	68fb      	ldr	r3, [r7, #12]
 80160f8:	2b00      	cmp	r3, #0
 80160fa:	d00c      	beq.n	8016116 <dhcp_arp_reply+0x46>
 80160fc:	68fb      	ldr	r3, [r7, #12]
 80160fe:	795b      	ldrb	r3, [r3, #5]
 8016100:	2b08      	cmp	r3, #8
 8016102:	d108      	bne.n	8016116 <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8016104:	683b      	ldr	r3, [r7, #0]
 8016106:	681a      	ldr	r2, [r3, #0]
 8016108:	68fb      	ldr	r3, [r7, #12]
 801610a:	69db      	ldr	r3, [r3, #28]
 801610c:	429a      	cmp	r2, r3
 801610e:	d102      	bne.n	8016116 <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 8016110:	6878      	ldr	r0, [r7, #4]
 8016112:	f000 f809 	bl	8016128 <dhcp_decline>
    }
  }
}
 8016116:	3710      	adds	r7, #16
 8016118:	46bd      	mov	sp, r7
 801611a:	bd80      	pop	{r7, pc}
 801611c:	0801ffa8 	.word	0x0801ffa8
 8016120:	0802008c 	.word	0x0802008c
 8016124:	08020008 	.word	0x08020008

08016128 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 8016128:	b5b0      	push	{r4, r5, r7, lr}
 801612a:	b08a      	sub	sp, #40	; 0x28
 801612c:	af02      	add	r7, sp, #8
 801612e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016130:	687b      	ldr	r3, [r7, #4]
 8016132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016134:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8016136:	210c      	movs	r1, #12
 8016138:	69b8      	ldr	r0, [r7, #24]
 801613a:	f000 fc7a 	bl	8016a32 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 801613e:	f107 030c 	add.w	r3, r7, #12
 8016142:	2204      	movs	r2, #4
 8016144:	69b9      	ldr	r1, [r7, #24]
 8016146:	6878      	ldr	r0, [r7, #4]
 8016148:	f001 f90c 	bl	8017364 <dhcp_create_msg>
 801614c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801614e:	697b      	ldr	r3, [r7, #20]
 8016150:	2b00      	cmp	r3, #0
 8016152:	d035      	beq.n	80161c0 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8016154:	697b      	ldr	r3, [r7, #20]
 8016156:	685b      	ldr	r3, [r3, #4]
 8016158:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801615a:	89b8      	ldrh	r0, [r7, #12]
 801615c:	693b      	ldr	r3, [r7, #16]
 801615e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016162:	2304      	movs	r3, #4
 8016164:	2232      	movs	r2, #50	; 0x32
 8016166:	f000 fc7f 	bl	8016a68 <dhcp_option>
 801616a:	4603      	mov	r3, r0
 801616c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801616e:	89bc      	ldrh	r4, [r7, #12]
 8016170:	693b      	ldr	r3, [r7, #16]
 8016172:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8016176:	69bb      	ldr	r3, [r7, #24]
 8016178:	69db      	ldr	r3, [r3, #28]
 801617a:	4618      	mov	r0, r3
 801617c:	f7f7 f95f 	bl	800d43e <lwip_htonl>
 8016180:	4603      	mov	r3, r0
 8016182:	461a      	mov	r2, r3
 8016184:	4629      	mov	r1, r5
 8016186:	4620      	mov	r0, r4
 8016188:	f000 fcfa 	bl	8016b80 <dhcp_option_long>
 801618c:	4603      	mov	r3, r0
 801618e:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8016190:	89b8      	ldrh	r0, [r7, #12]
 8016192:	693b      	ldr	r3, [r7, #16]
 8016194:	33f0      	adds	r3, #240	; 0xf0
 8016196:	697a      	ldr	r2, [r7, #20]
 8016198:	4619      	mov	r1, r3
 801619a:	f001 f9b9 	bl	8017510 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801619e:	4b19      	ldr	r3, [pc, #100]	; (8016204 <dhcp_decline+0xdc>)
 80161a0:	6818      	ldr	r0, [r3, #0]
 80161a2:	4b19      	ldr	r3, [pc, #100]	; (8016208 <dhcp_decline+0xe0>)
 80161a4:	9301      	str	r3, [sp, #4]
 80161a6:	687b      	ldr	r3, [r7, #4]
 80161a8:	9300      	str	r3, [sp, #0]
 80161aa:	2343      	movs	r3, #67	; 0x43
 80161ac:	4a17      	ldr	r2, [pc, #92]	; (801620c <dhcp_decline+0xe4>)
 80161ae:	6979      	ldr	r1, [r7, #20]
 80161b0:	f7ff f890 	bl	80152d4 <udp_sendto_if_src>
 80161b4:	4603      	mov	r3, r0
 80161b6:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80161b8:	6978      	ldr	r0, [r7, #20]
 80161ba:	f7f8 fe4d 	bl	800ee58 <pbuf_free>
 80161be:	e001      	b.n	80161c4 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80161c0:	23ff      	movs	r3, #255	; 0xff
 80161c2:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80161c4:	69bb      	ldr	r3, [r7, #24]
 80161c6:	799b      	ldrb	r3, [r3, #6]
 80161c8:	2bff      	cmp	r3, #255	; 0xff
 80161ca:	d005      	beq.n	80161d8 <dhcp_decline+0xb0>
    dhcp->tries++;
 80161cc:	69bb      	ldr	r3, [r7, #24]
 80161ce:	799b      	ldrb	r3, [r3, #6]
 80161d0:	3301      	adds	r3, #1
 80161d2:	b2da      	uxtb	r2, r3
 80161d4:	69bb      	ldr	r3, [r7, #24]
 80161d6:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 80161d8:	f242 7310 	movw	r3, #10000	; 0x2710
 80161dc:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80161de:	89fb      	ldrh	r3, [r7, #14]
 80161e0:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80161e4:	4a0a      	ldr	r2, [pc, #40]	; (8016210 <dhcp_decline+0xe8>)
 80161e6:	fb82 1203 	smull	r1, r2, r2, r3
 80161ea:	1152      	asrs	r2, r2, #5
 80161ec:	17db      	asrs	r3, r3, #31
 80161ee:	1ad3      	subs	r3, r2, r3
 80161f0:	b29a      	uxth	r2, r3
 80161f2:	69bb      	ldr	r3, [r7, #24]
 80161f4:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80161f6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80161fa:	4618      	mov	r0, r3
 80161fc:	3720      	adds	r7, #32
 80161fe:	46bd      	mov	sp, r7
 8016200:	bdb0      	pop	{r4, r5, r7, pc}
 8016202:	bf00      	nop
 8016204:	20013d64 	.word	0x20013d64
 8016208:	0806c870 	.word	0x0806c870
 801620c:	0806c874 	.word	0x0806c874
 8016210:	10624dd3 	.word	0x10624dd3

08016214 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 8016214:	b580      	push	{r7, lr}
 8016216:	b08a      	sub	sp, #40	; 0x28
 8016218:	af02      	add	r7, sp, #8
 801621a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801621c:	687b      	ldr	r3, [r7, #4]
 801621e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016220:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 8016222:	2300      	movs	r3, #0
 8016224:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8016226:	69bb      	ldr	r3, [r7, #24]
 8016228:	2200      	movs	r2, #0
 801622a:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 801622c:	2106      	movs	r1, #6
 801622e:	69b8      	ldr	r0, [r7, #24]
 8016230:	f000 fbff 	bl	8016a32 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 8016234:	f107 0308 	add.w	r3, r7, #8
 8016238:	2201      	movs	r2, #1
 801623a:	69b9      	ldr	r1, [r7, #24]
 801623c:	6878      	ldr	r0, [r7, #4]
 801623e:	f001 f891 	bl	8017364 <dhcp_create_msg>
 8016242:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 8016244:	693b      	ldr	r3, [r7, #16]
 8016246:	2b00      	cmp	r3, #0
 8016248:	d04b      	beq.n	80162e2 <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801624a:	693b      	ldr	r3, [r7, #16]
 801624c:	685b      	ldr	r3, [r3, #4]
 801624e:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8016250:	8938      	ldrh	r0, [r7, #8]
 8016252:	68fb      	ldr	r3, [r7, #12]
 8016254:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016258:	2302      	movs	r3, #2
 801625a:	2239      	movs	r2, #57	; 0x39
 801625c:	f000 fc04 	bl	8016a68 <dhcp_option>
 8016260:	4603      	mov	r3, r0
 8016262:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8016264:	8938      	ldrh	r0, [r7, #8]
 8016266:	68fb      	ldr	r3, [r7, #12]
 8016268:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801626c:	687b      	ldr	r3, [r7, #4]
 801626e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016270:	461a      	mov	r2, r3
 8016272:	f000 fc53 	bl	8016b1c <dhcp_option_short>
 8016276:	4603      	mov	r3, r0
 8016278:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801627a:	8938      	ldrh	r0, [r7, #8]
 801627c:	68fb      	ldr	r3, [r7, #12]
 801627e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016282:	2303      	movs	r3, #3
 8016284:	2237      	movs	r2, #55	; 0x37
 8016286:	f000 fbef 	bl	8016a68 <dhcp_option>
 801628a:	4603      	mov	r3, r0
 801628c:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801628e:	2300      	movs	r3, #0
 8016290:	77fb      	strb	r3, [r7, #31]
 8016292:	e00e      	b.n	80162b2 <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8016294:	8938      	ldrh	r0, [r7, #8]
 8016296:	68fb      	ldr	r3, [r7, #12]
 8016298:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801629c:	7ffb      	ldrb	r3, [r7, #31]
 801629e:	4a29      	ldr	r2, [pc, #164]	; (8016344 <dhcp_discover+0x130>)
 80162a0:	5cd3      	ldrb	r3, [r2, r3]
 80162a2:	461a      	mov	r2, r3
 80162a4:	f000 fc14 	bl	8016ad0 <dhcp_option_byte>
 80162a8:	4603      	mov	r3, r0
 80162aa:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80162ac:	7ffb      	ldrb	r3, [r7, #31]
 80162ae:	3301      	adds	r3, #1
 80162b0:	77fb      	strb	r3, [r7, #31]
 80162b2:	7ffb      	ldrb	r3, [r7, #31]
 80162b4:	2b02      	cmp	r3, #2
 80162b6:	d9ed      	bls.n	8016294 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80162b8:	8938      	ldrh	r0, [r7, #8]
 80162ba:	68fb      	ldr	r3, [r7, #12]
 80162bc:	33f0      	adds	r3, #240	; 0xf0
 80162be:	693a      	ldr	r2, [r7, #16]
 80162c0:	4619      	mov	r1, r3
 80162c2:	f001 f925 	bl	8017510 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80162c6:	4b20      	ldr	r3, [pc, #128]	; (8016348 <dhcp_discover+0x134>)
 80162c8:	6818      	ldr	r0, [r3, #0]
 80162ca:	4b20      	ldr	r3, [pc, #128]	; (801634c <dhcp_discover+0x138>)
 80162cc:	9301      	str	r3, [sp, #4]
 80162ce:	687b      	ldr	r3, [r7, #4]
 80162d0:	9300      	str	r3, [sp, #0]
 80162d2:	2343      	movs	r3, #67	; 0x43
 80162d4:	4a1e      	ldr	r2, [pc, #120]	; (8016350 <dhcp_discover+0x13c>)
 80162d6:	6939      	ldr	r1, [r7, #16]
 80162d8:	f7fe fffc 	bl	80152d4 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 80162dc:	6938      	ldr	r0, [r7, #16]
 80162de:	f7f8 fdbb 	bl	800ee58 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 80162e2:	69bb      	ldr	r3, [r7, #24]
 80162e4:	799b      	ldrb	r3, [r3, #6]
 80162e6:	2bff      	cmp	r3, #255	; 0xff
 80162e8:	d005      	beq.n	80162f6 <dhcp_discover+0xe2>
    dhcp->tries++;
 80162ea:	69bb      	ldr	r3, [r7, #24]
 80162ec:	799b      	ldrb	r3, [r3, #6]
 80162ee:	3301      	adds	r3, #1
 80162f0:	b2da      	uxtb	r2, r3
 80162f2:	69bb      	ldr	r3, [r7, #24]
 80162f4:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 80162f6:	69bb      	ldr	r3, [r7, #24]
 80162f8:	799b      	ldrb	r3, [r3, #6]
 80162fa:	2b05      	cmp	r3, #5
 80162fc:	d80d      	bhi.n	801631a <dhcp_discover+0x106>
 80162fe:	69bb      	ldr	r3, [r7, #24]
 8016300:	799b      	ldrb	r3, [r3, #6]
 8016302:	461a      	mov	r2, r3
 8016304:	2301      	movs	r3, #1
 8016306:	4093      	lsls	r3, r2
 8016308:	b29b      	uxth	r3, r3
 801630a:	461a      	mov	r2, r3
 801630c:	0152      	lsls	r2, r2, #5
 801630e:	1ad2      	subs	r2, r2, r3
 8016310:	0092      	lsls	r2, r2, #2
 8016312:	4413      	add	r3, r2
 8016314:	00db      	lsls	r3, r3, #3
 8016316:	b29b      	uxth	r3, r3
 8016318:	e001      	b.n	801631e <dhcp_discover+0x10a>
 801631a:	f64e 2360 	movw	r3, #60000	; 0xea60
 801631e:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8016320:	897b      	ldrh	r3, [r7, #10]
 8016322:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8016326:	4a0b      	ldr	r2, [pc, #44]	; (8016354 <dhcp_discover+0x140>)
 8016328:	fb82 1203 	smull	r1, r2, r2, r3
 801632c:	1152      	asrs	r2, r2, #5
 801632e:	17db      	asrs	r3, r3, #31
 8016330:	1ad3      	subs	r3, r2, r3
 8016332:	b29a      	uxth	r2, r3
 8016334:	69bb      	ldr	r3, [r7, #24]
 8016336:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8016338:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801633c:	4618      	mov	r0, r3
 801633e:	3720      	adds	r7, #32
 8016340:	46bd      	mov	sp, r7
 8016342:	bd80      	pop	{r7, pc}
 8016344:	200000c4 	.word	0x200000c4
 8016348:	20013d64 	.word	0x20013d64
 801634c:	0806c870 	.word	0x0806c870
 8016350:	0806c874 	.word	0x0806c874
 8016354:	10624dd3 	.word	0x10624dd3

08016358 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 8016358:	b580      	push	{r7, lr}
 801635a:	b088      	sub	sp, #32
 801635c:	af00      	add	r7, sp, #0
 801635e:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 8016360:	687b      	ldr	r3, [r7, #4]
 8016362:	2b00      	cmp	r3, #0
 8016364:	d107      	bne.n	8016376 <dhcp_bind+0x1e>
 8016366:	4b64      	ldr	r3, [pc, #400]	; (80164f8 <dhcp_bind+0x1a0>)
 8016368:	f240 4215 	movw	r2, #1045	; 0x415
 801636c:	4963      	ldr	r1, [pc, #396]	; (80164fc <dhcp_bind+0x1a4>)
 801636e:	4864      	ldr	r0, [pc, #400]	; (8016500 <dhcp_bind+0x1a8>)
 8016370:	f004 fd2e 	bl	801add0 <iprintf>
 8016374:	e0bc      	b.n	80164f0 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 8016376:	687b      	ldr	r3, [r7, #4]
 8016378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801637a:	61fb      	str	r3, [r7, #28]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 801637c:	69fb      	ldr	r3, [r7, #28]
 801637e:	2b00      	cmp	r3, #0
 8016380:	d107      	bne.n	8016392 <dhcp_bind+0x3a>
 8016382:	4b5d      	ldr	r3, [pc, #372]	; (80164f8 <dhcp_bind+0x1a0>)
 8016384:	f240 4217 	movw	r2, #1047	; 0x417
 8016388:	495e      	ldr	r1, [pc, #376]	; (8016504 <dhcp_bind+0x1ac>)
 801638a:	485d      	ldr	r0, [pc, #372]	; (8016500 <dhcp_bind+0x1a8>)
 801638c:	f004 fd20 	bl	801add0 <iprintf>
 8016390:	e0ae      	b.n	80164f0 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 8016392:	69fb      	ldr	r3, [r7, #28]
 8016394:	2200      	movs	r2, #0
 8016396:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 8016398:	69fb      	ldr	r3, [r7, #28]
 801639a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801639c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80163a0:	d019      	beq.n	80163d6 <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80163a2:	69fb      	ldr	r3, [r7, #28]
 80163a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80163a6:	331e      	adds	r3, #30
 80163a8:	4a57      	ldr	r2, [pc, #348]	; (8016508 <dhcp_bind+0x1b0>)
 80163aa:	fba2 2303 	umull	r2, r3, r2, r3
 80163ae:	095b      	lsrs	r3, r3, #5
 80163b0:	61bb      	str	r3, [r7, #24]
    if (timeout > 0xffff) {
 80163b2:	69bb      	ldr	r3, [r7, #24]
 80163b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80163b8:	d302      	bcc.n	80163c0 <dhcp_bind+0x68>
      timeout = 0xffff;
 80163ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80163be:	61bb      	str	r3, [r7, #24]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 80163c0:	69bb      	ldr	r3, [r7, #24]
 80163c2:	b29a      	uxth	r2, r3
 80163c4:	69fb      	ldr	r3, [r7, #28]
 80163c6:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 80163c8:	69fb      	ldr	r3, [r7, #28]
 80163ca:	8a9b      	ldrh	r3, [r3, #20]
 80163cc:	2b00      	cmp	r3, #0
 80163ce:	d102      	bne.n	80163d6 <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 80163d0:	69fb      	ldr	r3, [r7, #28]
 80163d2:	2201      	movs	r2, #1
 80163d4:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 80163d6:	69fb      	ldr	r3, [r7, #28]
 80163d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80163da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80163de:	d01d      	beq.n	801641c <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80163e0:	69fb      	ldr	r3, [r7, #28]
 80163e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80163e4:	331e      	adds	r3, #30
 80163e6:	4a48      	ldr	r2, [pc, #288]	; (8016508 <dhcp_bind+0x1b0>)
 80163e8:	fba2 2303 	umull	r2, r3, r2, r3
 80163ec:	095b      	lsrs	r3, r3, #5
 80163ee:	61bb      	str	r3, [r7, #24]
    if (timeout > 0xffff) {
 80163f0:	69bb      	ldr	r3, [r7, #24]
 80163f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80163f6:	d302      	bcc.n	80163fe <dhcp_bind+0xa6>
      timeout = 0xffff;
 80163f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80163fc:	61bb      	str	r3, [r7, #24]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 80163fe:	69bb      	ldr	r3, [r7, #24]
 8016400:	b29a      	uxth	r2, r3
 8016402:	69fb      	ldr	r3, [r7, #28]
 8016404:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 8016406:	69fb      	ldr	r3, [r7, #28]
 8016408:	895b      	ldrh	r3, [r3, #10]
 801640a:	2b00      	cmp	r3, #0
 801640c:	d102      	bne.n	8016414 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 801640e:	69fb      	ldr	r3, [r7, #28]
 8016410:	2201      	movs	r2, #1
 8016412:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8016414:	69fb      	ldr	r3, [r7, #28]
 8016416:	895a      	ldrh	r2, [r3, #10]
 8016418:	69fb      	ldr	r3, [r7, #28]
 801641a:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 801641c:	69fb      	ldr	r3, [r7, #28]
 801641e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016420:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016424:	d01d      	beq.n	8016462 <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8016426:	69fb      	ldr	r3, [r7, #28]
 8016428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801642a:	331e      	adds	r3, #30
 801642c:	4a36      	ldr	r2, [pc, #216]	; (8016508 <dhcp_bind+0x1b0>)
 801642e:	fba2 2303 	umull	r2, r3, r2, r3
 8016432:	095b      	lsrs	r3, r3, #5
 8016434:	61bb      	str	r3, [r7, #24]
    if (timeout > 0xffff) {
 8016436:	69bb      	ldr	r3, [r7, #24]
 8016438:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801643c:	d302      	bcc.n	8016444 <dhcp_bind+0xec>
      timeout = 0xffff;
 801643e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016442:	61bb      	str	r3, [r7, #24]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 8016444:	69bb      	ldr	r3, [r7, #24]
 8016446:	b29a      	uxth	r2, r3
 8016448:	69fb      	ldr	r3, [r7, #28]
 801644a:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 801644c:	69fb      	ldr	r3, [r7, #28]
 801644e:	899b      	ldrh	r3, [r3, #12]
 8016450:	2b00      	cmp	r3, #0
 8016452:	d102      	bne.n	801645a <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 8016454:	69fb      	ldr	r3, [r7, #28]
 8016456:	2201      	movs	r2, #1
 8016458:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 801645a:	69fb      	ldr	r3, [r7, #28]
 801645c:	899a      	ldrh	r2, [r3, #12]
 801645e:	69fb      	ldr	r3, [r7, #28]
 8016460:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 8016462:	69fb      	ldr	r3, [r7, #28]
 8016464:	895a      	ldrh	r2, [r3, #10]
 8016466:	69fb      	ldr	r3, [r7, #28]
 8016468:	899b      	ldrh	r3, [r3, #12]
 801646a:	429a      	cmp	r2, r3
 801646c:	d306      	bcc.n	801647c <dhcp_bind+0x124>
 801646e:	69fb      	ldr	r3, [r7, #28]
 8016470:	899b      	ldrh	r3, [r3, #12]
 8016472:	2b00      	cmp	r3, #0
 8016474:	d002      	beq.n	801647c <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 8016476:	69fb      	ldr	r3, [r7, #28]
 8016478:	2200      	movs	r2, #0
 801647a:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 801647c:	69fb      	ldr	r3, [r7, #28]
 801647e:	79db      	ldrb	r3, [r3, #7]
 8016480:	2b00      	cmp	r3, #0
 8016482:	d003      	beq.n	801648c <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 8016484:	69fb      	ldr	r3, [r7, #28]
 8016486:	6a1b      	ldr	r3, [r3, #32]
 8016488:	613b      	str	r3, [r7, #16]
 801648a:	e014      	b.n	80164b6 <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 801648c:	69fb      	ldr	r3, [r7, #28]
 801648e:	331c      	adds	r3, #28
 8016490:	781b      	ldrb	r3, [r3, #0]
 8016492:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 8016494:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8016498:	2b00      	cmp	r3, #0
 801649a:	db02      	blt.n	80164a2 <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 801649c:	23ff      	movs	r3, #255	; 0xff
 801649e:	613b      	str	r3, [r7, #16]
 80164a0:	e009      	b.n	80164b6 <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 80164a2:	7dfb      	ldrb	r3, [r7, #23]
 80164a4:	2bbf      	cmp	r3, #191	; 0xbf
 80164a6:	d903      	bls.n	80164b0 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 80164a8:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80164ac:	613b      	str	r3, [r7, #16]
 80164ae:	e002      	b.n	80164b6 <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 80164b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80164b4:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 80164b6:	69fb      	ldr	r3, [r7, #28]
 80164b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80164ba:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 80164bc:	68fb      	ldr	r3, [r7, #12]
 80164be:	2b00      	cmp	r3, #0
 80164c0:	d108      	bne.n	80164d4 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 80164c2:	69fb      	ldr	r3, [r7, #28]
 80164c4:	69da      	ldr	r2, [r3, #28]
 80164c6:	693b      	ldr	r3, [r7, #16]
 80164c8:	4013      	ands	r3, r2
 80164ca:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 80164cc:	68fb      	ldr	r3, [r7, #12]
 80164ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80164d2:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 80164d4:	210a      	movs	r1, #10
 80164d6:	69f8      	ldr	r0, [r7, #28]
 80164d8:	f000 faab 	bl	8016a32 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 80164dc:	69fb      	ldr	r3, [r7, #28]
 80164de:	f103 011c 	add.w	r1, r3, #28
 80164e2:	f107 030c 	add.w	r3, r7, #12
 80164e6:	f107 0210 	add.w	r2, r7, #16
 80164ea:	6878      	ldr	r0, [r7, #4]
 80164ec:	f7f7 ffb4 	bl	800e458 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 80164f0:	3720      	adds	r7, #32
 80164f2:	46bd      	mov	sp, r7
 80164f4:	bd80      	pop	{r7, pc}
 80164f6:	bf00      	nop
 80164f8:	0801ffa8 	.word	0x0801ffa8
 80164fc:	08020108 	.word	0x08020108
 8016500:	08020008 	.word	0x08020008
 8016504:	08020124 	.word	0x08020124
 8016508:	88888889 	.word	0x88888889

0801650c <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 801650c:	b580      	push	{r7, lr}
 801650e:	b08a      	sub	sp, #40	; 0x28
 8016510:	af02      	add	r7, sp, #8
 8016512:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016514:	687b      	ldr	r3, [r7, #4]
 8016516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016518:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 801651a:	2105      	movs	r1, #5
 801651c:	69b8      	ldr	r0, [r7, #24]
 801651e:	f000 fa88 	bl	8016a32 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8016522:	f107 030c 	add.w	r3, r7, #12
 8016526:	2203      	movs	r2, #3
 8016528:	69b9      	ldr	r1, [r7, #24]
 801652a:	6878      	ldr	r0, [r7, #4]
 801652c:	f000 ff1a 	bl	8017364 <dhcp_create_msg>
 8016530:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8016532:	697b      	ldr	r3, [r7, #20]
 8016534:	2b00      	cmp	r3, #0
 8016536:	d04e      	beq.n	80165d6 <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8016538:	697b      	ldr	r3, [r7, #20]
 801653a:	685b      	ldr	r3, [r3, #4]
 801653c:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801653e:	89b8      	ldrh	r0, [r7, #12]
 8016540:	693b      	ldr	r3, [r7, #16]
 8016542:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016546:	2302      	movs	r3, #2
 8016548:	2239      	movs	r2, #57	; 0x39
 801654a:	f000 fa8d 	bl	8016a68 <dhcp_option>
 801654e:	4603      	mov	r3, r0
 8016550:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8016552:	89b8      	ldrh	r0, [r7, #12]
 8016554:	693b      	ldr	r3, [r7, #16]
 8016556:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801655a:	687b      	ldr	r3, [r7, #4]
 801655c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801655e:	461a      	mov	r2, r3
 8016560:	f000 fadc 	bl	8016b1c <dhcp_option_short>
 8016564:	4603      	mov	r3, r0
 8016566:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8016568:	89b8      	ldrh	r0, [r7, #12]
 801656a:	693b      	ldr	r3, [r7, #16]
 801656c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016570:	2303      	movs	r3, #3
 8016572:	2237      	movs	r2, #55	; 0x37
 8016574:	f000 fa78 	bl	8016a68 <dhcp_option>
 8016578:	4603      	mov	r3, r0
 801657a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801657c:	2300      	movs	r3, #0
 801657e:	77bb      	strb	r3, [r7, #30]
 8016580:	e00e      	b.n	80165a0 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8016582:	89b8      	ldrh	r0, [r7, #12]
 8016584:	693b      	ldr	r3, [r7, #16]
 8016586:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801658a:	7fbb      	ldrb	r3, [r7, #30]
 801658c:	4a2a      	ldr	r2, [pc, #168]	; (8016638 <dhcp_renew+0x12c>)
 801658e:	5cd3      	ldrb	r3, [r2, r3]
 8016590:	461a      	mov	r2, r3
 8016592:	f000 fa9d 	bl	8016ad0 <dhcp_option_byte>
 8016596:	4603      	mov	r3, r0
 8016598:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801659a:	7fbb      	ldrb	r3, [r7, #30]
 801659c:	3301      	adds	r3, #1
 801659e:	77bb      	strb	r3, [r7, #30]
 80165a0:	7fbb      	ldrb	r3, [r7, #30]
 80165a2:	2b02      	cmp	r3, #2
 80165a4:	d9ed      	bls.n	8016582 <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80165a6:	89b8      	ldrh	r0, [r7, #12]
 80165a8:	693b      	ldr	r3, [r7, #16]
 80165aa:	33f0      	adds	r3, #240	; 0xf0
 80165ac:	697a      	ldr	r2, [r7, #20]
 80165ae:	4619      	mov	r1, r3
 80165b0:	f000 ffae 	bl	8017510 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80165b4:	4b21      	ldr	r3, [pc, #132]	; (801663c <dhcp_renew+0x130>)
 80165b6:	6818      	ldr	r0, [r3, #0]
 80165b8:	69bb      	ldr	r3, [r7, #24]
 80165ba:	f103 0218 	add.w	r2, r3, #24
 80165be:	687b      	ldr	r3, [r7, #4]
 80165c0:	9300      	str	r3, [sp, #0]
 80165c2:	2343      	movs	r3, #67	; 0x43
 80165c4:	6979      	ldr	r1, [r7, #20]
 80165c6:	f7fe fe11 	bl	80151ec <udp_sendto_if>
 80165ca:	4603      	mov	r3, r0
 80165cc:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80165ce:	6978      	ldr	r0, [r7, #20]
 80165d0:	f7f8 fc42 	bl	800ee58 <pbuf_free>
 80165d4:	e001      	b.n	80165da <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80165d6:	23ff      	movs	r3, #255	; 0xff
 80165d8:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80165da:	69bb      	ldr	r3, [r7, #24]
 80165dc:	799b      	ldrb	r3, [r3, #6]
 80165de:	2bff      	cmp	r3, #255	; 0xff
 80165e0:	d005      	beq.n	80165ee <dhcp_renew+0xe2>
    dhcp->tries++;
 80165e2:	69bb      	ldr	r3, [r7, #24]
 80165e4:	799b      	ldrb	r3, [r3, #6]
 80165e6:	3301      	adds	r3, #1
 80165e8:	b2da      	uxtb	r2, r3
 80165ea:	69bb      	ldr	r3, [r7, #24]
 80165ec:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 80165ee:	69bb      	ldr	r3, [r7, #24]
 80165f0:	799b      	ldrb	r3, [r3, #6]
 80165f2:	2b09      	cmp	r3, #9
 80165f4:	d80a      	bhi.n	801660c <dhcp_renew+0x100>
 80165f6:	69bb      	ldr	r3, [r7, #24]
 80165f8:	799b      	ldrb	r3, [r3, #6]
 80165fa:	b29b      	uxth	r3, r3
 80165fc:	461a      	mov	r2, r3
 80165fe:	0152      	lsls	r2, r2, #5
 8016600:	1ad2      	subs	r2, r2, r3
 8016602:	0092      	lsls	r2, r2, #2
 8016604:	4413      	add	r3, r2
 8016606:	011b      	lsls	r3, r3, #4
 8016608:	b29b      	uxth	r3, r3
 801660a:	e001      	b.n	8016610 <dhcp_renew+0x104>
 801660c:	f644 6320 	movw	r3, #20000	; 0x4e20
 8016610:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8016612:	89fb      	ldrh	r3, [r7, #14]
 8016614:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8016618:	4a09      	ldr	r2, [pc, #36]	; (8016640 <dhcp_renew+0x134>)
 801661a:	fb82 1203 	smull	r1, r2, r2, r3
 801661e:	1152      	asrs	r2, r2, #5
 8016620:	17db      	asrs	r3, r3, #31
 8016622:	1ad3      	subs	r3, r2, r3
 8016624:	b29a      	uxth	r2, r3
 8016626:	69bb      	ldr	r3, [r7, #24]
 8016628:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801662a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801662e:	4618      	mov	r0, r3
 8016630:	3720      	adds	r7, #32
 8016632:	46bd      	mov	sp, r7
 8016634:	bd80      	pop	{r7, pc}
 8016636:	bf00      	nop
 8016638:	200000c4 	.word	0x200000c4
 801663c:	20013d64 	.word	0x20013d64
 8016640:	10624dd3 	.word	0x10624dd3

08016644 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 8016644:	b580      	push	{r7, lr}
 8016646:	b08a      	sub	sp, #40	; 0x28
 8016648:	af02      	add	r7, sp, #8
 801664a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801664c:	687b      	ldr	r3, [r7, #4]
 801664e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016650:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 8016652:	2104      	movs	r1, #4
 8016654:	69b8      	ldr	r0, [r7, #24]
 8016656:	f000 f9ec 	bl	8016a32 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801665a:	f107 030c 	add.w	r3, r7, #12
 801665e:	2203      	movs	r2, #3
 8016660:	69b9      	ldr	r1, [r7, #24]
 8016662:	6878      	ldr	r0, [r7, #4]
 8016664:	f000 fe7e 	bl	8017364 <dhcp_create_msg>
 8016668:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801666a:	697b      	ldr	r3, [r7, #20]
 801666c:	2b00      	cmp	r3, #0
 801666e:	d04c      	beq.n	801670a <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8016670:	697b      	ldr	r3, [r7, #20]
 8016672:	685b      	ldr	r3, [r3, #4]
 8016674:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8016676:	89b8      	ldrh	r0, [r7, #12]
 8016678:	693b      	ldr	r3, [r7, #16]
 801667a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801667e:	2302      	movs	r3, #2
 8016680:	2239      	movs	r2, #57	; 0x39
 8016682:	f000 f9f1 	bl	8016a68 <dhcp_option>
 8016686:	4603      	mov	r3, r0
 8016688:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801668a:	89b8      	ldrh	r0, [r7, #12]
 801668c:	693b      	ldr	r3, [r7, #16]
 801668e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016692:	687b      	ldr	r3, [r7, #4]
 8016694:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016696:	461a      	mov	r2, r3
 8016698:	f000 fa40 	bl	8016b1c <dhcp_option_short>
 801669c:	4603      	mov	r3, r0
 801669e:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80166a0:	89b8      	ldrh	r0, [r7, #12]
 80166a2:	693b      	ldr	r3, [r7, #16]
 80166a4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80166a8:	2303      	movs	r3, #3
 80166aa:	2237      	movs	r2, #55	; 0x37
 80166ac:	f000 f9dc 	bl	8016a68 <dhcp_option>
 80166b0:	4603      	mov	r3, r0
 80166b2:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80166b4:	2300      	movs	r3, #0
 80166b6:	77bb      	strb	r3, [r7, #30]
 80166b8:	e00e      	b.n	80166d8 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80166ba:	89b8      	ldrh	r0, [r7, #12]
 80166bc:	693b      	ldr	r3, [r7, #16]
 80166be:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80166c2:	7fbb      	ldrb	r3, [r7, #30]
 80166c4:	4a29      	ldr	r2, [pc, #164]	; (801676c <dhcp_rebind+0x128>)
 80166c6:	5cd3      	ldrb	r3, [r2, r3]
 80166c8:	461a      	mov	r2, r3
 80166ca:	f000 fa01 	bl	8016ad0 <dhcp_option_byte>
 80166ce:	4603      	mov	r3, r0
 80166d0:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80166d2:	7fbb      	ldrb	r3, [r7, #30]
 80166d4:	3301      	adds	r3, #1
 80166d6:	77bb      	strb	r3, [r7, #30]
 80166d8:	7fbb      	ldrb	r3, [r7, #30]
 80166da:	2b02      	cmp	r3, #2
 80166dc:	d9ed      	bls.n	80166ba <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80166de:	89b8      	ldrh	r0, [r7, #12]
 80166e0:	693b      	ldr	r3, [r7, #16]
 80166e2:	33f0      	adds	r3, #240	; 0xf0
 80166e4:	697a      	ldr	r2, [r7, #20]
 80166e6:	4619      	mov	r1, r3
 80166e8:	f000 ff12 	bl	8017510 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80166ec:	4b20      	ldr	r3, [pc, #128]	; (8016770 <dhcp_rebind+0x12c>)
 80166ee:	6818      	ldr	r0, [r3, #0]
 80166f0:	687b      	ldr	r3, [r7, #4]
 80166f2:	9300      	str	r3, [sp, #0]
 80166f4:	2343      	movs	r3, #67	; 0x43
 80166f6:	4a1f      	ldr	r2, [pc, #124]	; (8016774 <dhcp_rebind+0x130>)
 80166f8:	6979      	ldr	r1, [r7, #20]
 80166fa:	f7fe fd77 	bl	80151ec <udp_sendto_if>
 80166fe:	4603      	mov	r3, r0
 8016700:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8016702:	6978      	ldr	r0, [r7, #20]
 8016704:	f7f8 fba8 	bl	800ee58 <pbuf_free>
 8016708:	e001      	b.n	801670e <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801670a:	23ff      	movs	r3, #255	; 0xff
 801670c:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801670e:	69bb      	ldr	r3, [r7, #24]
 8016710:	799b      	ldrb	r3, [r3, #6]
 8016712:	2bff      	cmp	r3, #255	; 0xff
 8016714:	d005      	beq.n	8016722 <dhcp_rebind+0xde>
    dhcp->tries++;
 8016716:	69bb      	ldr	r3, [r7, #24]
 8016718:	799b      	ldrb	r3, [r3, #6]
 801671a:	3301      	adds	r3, #1
 801671c:	b2da      	uxtb	r2, r3
 801671e:	69bb      	ldr	r3, [r7, #24]
 8016720:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8016722:	69bb      	ldr	r3, [r7, #24]
 8016724:	799b      	ldrb	r3, [r3, #6]
 8016726:	2b09      	cmp	r3, #9
 8016728:	d80a      	bhi.n	8016740 <dhcp_rebind+0xfc>
 801672a:	69bb      	ldr	r3, [r7, #24]
 801672c:	799b      	ldrb	r3, [r3, #6]
 801672e:	b29b      	uxth	r3, r3
 8016730:	461a      	mov	r2, r3
 8016732:	0152      	lsls	r2, r2, #5
 8016734:	1ad2      	subs	r2, r2, r3
 8016736:	0092      	lsls	r2, r2, #2
 8016738:	4413      	add	r3, r2
 801673a:	00db      	lsls	r3, r3, #3
 801673c:	b29b      	uxth	r3, r3
 801673e:	e001      	b.n	8016744 <dhcp_rebind+0x100>
 8016740:	f242 7310 	movw	r3, #10000	; 0x2710
 8016744:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8016746:	89fb      	ldrh	r3, [r7, #14]
 8016748:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801674c:	4a0a      	ldr	r2, [pc, #40]	; (8016778 <dhcp_rebind+0x134>)
 801674e:	fb82 1203 	smull	r1, r2, r2, r3
 8016752:	1152      	asrs	r2, r2, #5
 8016754:	17db      	asrs	r3, r3, #31
 8016756:	1ad3      	subs	r3, r2, r3
 8016758:	b29a      	uxth	r2, r3
 801675a:	69bb      	ldr	r3, [r7, #24]
 801675c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801675e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8016762:	4618      	mov	r0, r3
 8016764:	3720      	adds	r7, #32
 8016766:	46bd      	mov	sp, r7
 8016768:	bd80      	pop	{r7, pc}
 801676a:	bf00      	nop
 801676c:	200000c4 	.word	0x200000c4
 8016770:	20013d64 	.word	0x20013d64
 8016774:	0806c874 	.word	0x0806c874
 8016778:	10624dd3 	.word	0x10624dd3

0801677c <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 801677c:	b5b0      	push	{r4, r5, r7, lr}
 801677e:	b08a      	sub	sp, #40	; 0x28
 8016780:	af02      	add	r7, sp, #8
 8016782:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016784:	687b      	ldr	r3, [r7, #4]
 8016786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016788:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 801678a:	2103      	movs	r1, #3
 801678c:	69b8      	ldr	r0, [r7, #24]
 801678e:	f000 f950 	bl	8016a32 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8016792:	f107 030c 	add.w	r3, r7, #12
 8016796:	2203      	movs	r2, #3
 8016798:	69b9      	ldr	r1, [r7, #24]
 801679a:	6878      	ldr	r0, [r7, #4]
 801679c:	f000 fde2 	bl	8017364 <dhcp_create_msg>
 80167a0:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80167a2:	697b      	ldr	r3, [r7, #20]
 80167a4:	2b00      	cmp	r3, #0
 80167a6:	d066      	beq.n	8016876 <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80167a8:	697b      	ldr	r3, [r7, #20]
 80167aa:	685b      	ldr	r3, [r3, #4]
 80167ac:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80167ae:	89b8      	ldrh	r0, [r7, #12]
 80167b0:	693b      	ldr	r3, [r7, #16]
 80167b2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80167b6:	2302      	movs	r3, #2
 80167b8:	2239      	movs	r2, #57	; 0x39
 80167ba:	f000 f955 	bl	8016a68 <dhcp_option>
 80167be:	4603      	mov	r3, r0
 80167c0:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 80167c2:	89b8      	ldrh	r0, [r7, #12]
 80167c4:	693b      	ldr	r3, [r7, #16]
 80167c6:	33f0      	adds	r3, #240	; 0xf0
 80167c8:	f44f 7210 	mov.w	r2, #576	; 0x240
 80167cc:	4619      	mov	r1, r3
 80167ce:	f000 f9a5 	bl	8016b1c <dhcp_option_short>
 80167d2:	4603      	mov	r3, r0
 80167d4:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 80167d6:	89b8      	ldrh	r0, [r7, #12]
 80167d8:	693b      	ldr	r3, [r7, #16]
 80167da:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80167de:	2304      	movs	r3, #4
 80167e0:	2232      	movs	r2, #50	; 0x32
 80167e2:	f000 f941 	bl	8016a68 <dhcp_option>
 80167e6:	4603      	mov	r3, r0
 80167e8:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80167ea:	89bc      	ldrh	r4, [r7, #12]
 80167ec:	693b      	ldr	r3, [r7, #16]
 80167ee:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 80167f2:	69bb      	ldr	r3, [r7, #24]
 80167f4:	69db      	ldr	r3, [r3, #28]
 80167f6:	4618      	mov	r0, r3
 80167f8:	f7f6 fe21 	bl	800d43e <lwip_htonl>
 80167fc:	4603      	mov	r3, r0
 80167fe:	461a      	mov	r2, r3
 8016800:	4629      	mov	r1, r5
 8016802:	4620      	mov	r0, r4
 8016804:	f000 f9bc 	bl	8016b80 <dhcp_option_long>
 8016808:	4603      	mov	r3, r0
 801680a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801680c:	89b8      	ldrh	r0, [r7, #12]
 801680e:	693b      	ldr	r3, [r7, #16]
 8016810:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016814:	2303      	movs	r3, #3
 8016816:	2237      	movs	r2, #55	; 0x37
 8016818:	f000 f926 	bl	8016a68 <dhcp_option>
 801681c:	4603      	mov	r3, r0
 801681e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8016820:	2300      	movs	r3, #0
 8016822:	77bb      	strb	r3, [r7, #30]
 8016824:	e00e      	b.n	8016844 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8016826:	89b8      	ldrh	r0, [r7, #12]
 8016828:	693b      	ldr	r3, [r7, #16]
 801682a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801682e:	7fbb      	ldrb	r3, [r7, #30]
 8016830:	4a29      	ldr	r2, [pc, #164]	; (80168d8 <dhcp_reboot+0x15c>)
 8016832:	5cd3      	ldrb	r3, [r2, r3]
 8016834:	461a      	mov	r2, r3
 8016836:	f000 f94b 	bl	8016ad0 <dhcp_option_byte>
 801683a:	4603      	mov	r3, r0
 801683c:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801683e:	7fbb      	ldrb	r3, [r7, #30]
 8016840:	3301      	adds	r3, #1
 8016842:	77bb      	strb	r3, [r7, #30]
 8016844:	7fbb      	ldrb	r3, [r7, #30]
 8016846:	2b02      	cmp	r3, #2
 8016848:	d9ed      	bls.n	8016826 <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801684a:	89b8      	ldrh	r0, [r7, #12]
 801684c:	693b      	ldr	r3, [r7, #16]
 801684e:	33f0      	adds	r3, #240	; 0xf0
 8016850:	697a      	ldr	r2, [r7, #20]
 8016852:	4619      	mov	r1, r3
 8016854:	f000 fe5c 	bl	8017510 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8016858:	4b20      	ldr	r3, [pc, #128]	; (80168dc <dhcp_reboot+0x160>)
 801685a:	6818      	ldr	r0, [r3, #0]
 801685c:	687b      	ldr	r3, [r7, #4]
 801685e:	9300      	str	r3, [sp, #0]
 8016860:	2343      	movs	r3, #67	; 0x43
 8016862:	4a1f      	ldr	r2, [pc, #124]	; (80168e0 <dhcp_reboot+0x164>)
 8016864:	6979      	ldr	r1, [r7, #20]
 8016866:	f7fe fcc1 	bl	80151ec <udp_sendto_if>
 801686a:	4603      	mov	r3, r0
 801686c:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801686e:	6978      	ldr	r0, [r7, #20]
 8016870:	f7f8 faf2 	bl	800ee58 <pbuf_free>
 8016874:	e001      	b.n	801687a <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8016876:	23ff      	movs	r3, #255	; 0xff
 8016878:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801687a:	69bb      	ldr	r3, [r7, #24]
 801687c:	799b      	ldrb	r3, [r3, #6]
 801687e:	2bff      	cmp	r3, #255	; 0xff
 8016880:	d005      	beq.n	801688e <dhcp_reboot+0x112>
    dhcp->tries++;
 8016882:	69bb      	ldr	r3, [r7, #24]
 8016884:	799b      	ldrb	r3, [r3, #6]
 8016886:	3301      	adds	r3, #1
 8016888:	b2da      	uxtb	r2, r3
 801688a:	69bb      	ldr	r3, [r7, #24]
 801688c:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801688e:	69bb      	ldr	r3, [r7, #24]
 8016890:	799b      	ldrb	r3, [r3, #6]
 8016892:	2b09      	cmp	r3, #9
 8016894:	d80a      	bhi.n	80168ac <dhcp_reboot+0x130>
 8016896:	69bb      	ldr	r3, [r7, #24]
 8016898:	799b      	ldrb	r3, [r3, #6]
 801689a:	b29b      	uxth	r3, r3
 801689c:	461a      	mov	r2, r3
 801689e:	0152      	lsls	r2, r2, #5
 80168a0:	1ad2      	subs	r2, r2, r3
 80168a2:	0092      	lsls	r2, r2, #2
 80168a4:	4413      	add	r3, r2
 80168a6:	00db      	lsls	r3, r3, #3
 80168a8:	b29b      	uxth	r3, r3
 80168aa:	e001      	b.n	80168b0 <dhcp_reboot+0x134>
 80168ac:	f242 7310 	movw	r3, #10000	; 0x2710
 80168b0:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80168b2:	89fb      	ldrh	r3, [r7, #14]
 80168b4:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80168b8:	4a0a      	ldr	r2, [pc, #40]	; (80168e4 <dhcp_reboot+0x168>)
 80168ba:	fb82 1203 	smull	r1, r2, r2, r3
 80168be:	1152      	asrs	r2, r2, #5
 80168c0:	17db      	asrs	r3, r3, #31
 80168c2:	1ad3      	subs	r3, r2, r3
 80168c4:	b29a      	uxth	r2, r3
 80168c6:	69bb      	ldr	r3, [r7, #24]
 80168c8:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80168ca:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80168ce:	4618      	mov	r0, r3
 80168d0:	3720      	adds	r7, #32
 80168d2:	46bd      	mov	sp, r7
 80168d4:	bdb0      	pop	{r4, r5, r7, pc}
 80168d6:	bf00      	nop
 80168d8:	200000c4 	.word	0x200000c4
 80168dc:	20013d64 	.word	0x20013d64
 80168e0:	0806c874 	.word	0x0806c874
 80168e4:	10624dd3 	.word	0x10624dd3

080168e8 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 80168e8:	b5b0      	push	{r4, r5, r7, lr}
 80168ea:	b08a      	sub	sp, #40	; 0x28
 80168ec:	af02      	add	r7, sp, #8
 80168ee:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80168f0:	687b      	ldr	r3, [r7, #4]
 80168f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80168f4:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 80168f6:	69fb      	ldr	r3, [r7, #28]
 80168f8:	2b00      	cmp	r3, #0
 80168fa:	f000 8084 	beq.w	8016a06 <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 80168fe:	69fb      	ldr	r3, [r7, #28]
 8016900:	795b      	ldrb	r3, [r3, #5]
 8016902:	2b00      	cmp	r3, #0
 8016904:	f000 8081 	beq.w	8016a0a <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8016908:	69fb      	ldr	r3, [r7, #28]
 801690a:	699b      	ldr	r3, [r3, #24]
 801690c:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 801690e:	69fb      	ldr	r3, [r7, #28]
 8016910:	2200      	movs	r2, #0
 8016912:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8016914:	69fb      	ldr	r3, [r7, #28]
 8016916:	2200      	movs	r2, #0
 8016918:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 801691a:	69fb      	ldr	r3, [r7, #28]
 801691c:	2200      	movs	r2, #0
 801691e:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8016920:	69fb      	ldr	r3, [r7, #28]
 8016922:	2200      	movs	r2, #0
 8016924:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 8016926:	69fb      	ldr	r3, [r7, #28]
 8016928:	2200      	movs	r2, #0
 801692a:	631a      	str	r2, [r3, #48]	; 0x30
 801692c:	69fb      	ldr	r3, [r7, #28]
 801692e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8016930:	69fb      	ldr	r3, [r7, #28]
 8016932:	62da      	str	r2, [r3, #44]	; 0x2c
 8016934:	69fb      	ldr	r3, [r7, #28]
 8016936:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016938:	69fb      	ldr	r3, [r7, #28]
 801693a:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 801693c:	69fb      	ldr	r3, [r7, #28]
 801693e:	2200      	movs	r2, #0
 8016940:	829a      	strh	r2, [r3, #20]
 8016942:	69fb      	ldr	r3, [r7, #28]
 8016944:	8a9a      	ldrh	r2, [r3, #20]
 8016946:	69fb      	ldr	r3, [r7, #28]
 8016948:	825a      	strh	r2, [r3, #18]
 801694a:	69fb      	ldr	r3, [r7, #28]
 801694c:	8a5a      	ldrh	r2, [r3, #18]
 801694e:	69fb      	ldr	r3, [r7, #28]
 8016950:	821a      	strh	r2, [r3, #16]
 8016952:	69fb      	ldr	r3, [r7, #28]
 8016954:	8a1a      	ldrh	r2, [r3, #16]
 8016956:	69fb      	ldr	r3, [r7, #28]
 8016958:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 801695a:	6878      	ldr	r0, [r7, #4]
 801695c:	f000 fe06 	bl	801756c <dhcp_supplied_address>
 8016960:	4603      	mov	r3, r0
 8016962:	2b00      	cmp	r3, #0
 8016964:	d03b      	beq.n	80169de <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 8016966:	f107 030e 	add.w	r3, r7, #14
 801696a:	2207      	movs	r2, #7
 801696c:	69f9      	ldr	r1, [r7, #28]
 801696e:	6878      	ldr	r0, [r7, #4]
 8016970:	f000 fcf8 	bl	8017364 <dhcp_create_msg>
 8016974:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 8016976:	69bb      	ldr	r3, [r7, #24]
 8016978:	2b00      	cmp	r3, #0
 801697a:	d030      	beq.n	80169de <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801697c:	69bb      	ldr	r3, [r7, #24]
 801697e:	685b      	ldr	r3, [r3, #4]
 8016980:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8016982:	89f8      	ldrh	r0, [r7, #14]
 8016984:	697b      	ldr	r3, [r7, #20]
 8016986:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801698a:	2304      	movs	r3, #4
 801698c:	2236      	movs	r2, #54	; 0x36
 801698e:	f000 f86b 	bl	8016a68 <dhcp_option>
 8016992:	4603      	mov	r3, r0
 8016994:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8016996:	89fc      	ldrh	r4, [r7, #14]
 8016998:	697b      	ldr	r3, [r7, #20]
 801699a:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801699e:	693b      	ldr	r3, [r7, #16]
 80169a0:	4618      	mov	r0, r3
 80169a2:	f7f6 fd4c 	bl	800d43e <lwip_htonl>
 80169a6:	4603      	mov	r3, r0
 80169a8:	461a      	mov	r2, r3
 80169aa:	4629      	mov	r1, r5
 80169ac:	4620      	mov	r0, r4
 80169ae:	f000 f8e7 	bl	8016b80 <dhcp_option_long>
 80169b2:	4603      	mov	r3, r0
 80169b4:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80169b6:	89f8      	ldrh	r0, [r7, #14]
 80169b8:	697b      	ldr	r3, [r7, #20]
 80169ba:	33f0      	adds	r3, #240	; 0xf0
 80169bc:	69ba      	ldr	r2, [r7, #24]
 80169be:	4619      	mov	r1, r3
 80169c0:	f000 fda6 	bl	8017510 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80169c4:	4b13      	ldr	r3, [pc, #76]	; (8016a14 <dhcp_release_and_stop+0x12c>)
 80169c6:	6818      	ldr	r0, [r3, #0]
 80169c8:	f107 0210 	add.w	r2, r7, #16
 80169cc:	687b      	ldr	r3, [r7, #4]
 80169ce:	9300      	str	r3, [sp, #0]
 80169d0:	2343      	movs	r3, #67	; 0x43
 80169d2:	69b9      	ldr	r1, [r7, #24]
 80169d4:	f7fe fc0a 	bl	80151ec <udp_sendto_if>
      pbuf_free(p_out);
 80169d8:	69b8      	ldr	r0, [r7, #24]
 80169da:	f7f8 fa3d 	bl	800ee58 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 80169de:	4b0e      	ldr	r3, [pc, #56]	; (8016a18 <dhcp_release_and_stop+0x130>)
 80169e0:	4a0d      	ldr	r2, [pc, #52]	; (8016a18 <dhcp_release_and_stop+0x130>)
 80169e2:	490d      	ldr	r1, [pc, #52]	; (8016a18 <dhcp_release_and_stop+0x130>)
 80169e4:	6878      	ldr	r0, [r7, #4]
 80169e6:	f7f7 fd37 	bl	800e458 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 80169ea:	2100      	movs	r1, #0
 80169ec:	69f8      	ldr	r0, [r7, #28]
 80169ee:	f000 f820 	bl	8016a32 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 80169f2:	69fb      	ldr	r3, [r7, #28]
 80169f4:	791b      	ldrb	r3, [r3, #4]
 80169f6:	2b00      	cmp	r3, #0
 80169f8:	d008      	beq.n	8016a0c <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 80169fa:	f7fe ff85 	bl	8015908 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 80169fe:	69fb      	ldr	r3, [r7, #28]
 8016a00:	2200      	movs	r2, #0
 8016a02:	711a      	strb	r2, [r3, #4]
 8016a04:	e002      	b.n	8016a0c <dhcp_release_and_stop+0x124>
    return;
 8016a06:	bf00      	nop
 8016a08:	e000      	b.n	8016a0c <dhcp_release_and_stop+0x124>
    return;
 8016a0a:	bf00      	nop
  }
}
 8016a0c:	3720      	adds	r7, #32
 8016a0e:	46bd      	mov	sp, r7
 8016a10:	bdb0      	pop	{r4, r5, r7, pc}
 8016a12:	bf00      	nop
 8016a14:	20013d64 	.word	0x20013d64
 8016a18:	0806c870 	.word	0x0806c870

08016a1c <dhcp_stop>:
 * This function calls dhcp_release_and_stop() internally.
 * @deprecated Use dhcp_release_and_stop() instead.
 */
void
dhcp_stop(struct netif *netif)
{
 8016a1c:	b580      	push	{r7, lr}
 8016a1e:	b082      	sub	sp, #8
 8016a20:	af00      	add	r7, sp, #0
 8016a22:	6078      	str	r0, [r7, #4]
  dhcp_release_and_stop(netif);
 8016a24:	6878      	ldr	r0, [r7, #4]
 8016a26:	f7ff ff5f 	bl	80168e8 <dhcp_release_and_stop>
}
 8016a2a:	bf00      	nop
 8016a2c:	3708      	adds	r7, #8
 8016a2e:	46bd      	mov	sp, r7
 8016a30:	bd80      	pop	{r7, pc}

08016a32 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 8016a32:	b480      	push	{r7}
 8016a34:	b083      	sub	sp, #12
 8016a36:	af00      	add	r7, sp, #0
 8016a38:	6078      	str	r0, [r7, #4]
 8016a3a:	460b      	mov	r3, r1
 8016a3c:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 8016a3e:	687b      	ldr	r3, [r7, #4]
 8016a40:	795b      	ldrb	r3, [r3, #5]
 8016a42:	78fa      	ldrb	r2, [r7, #3]
 8016a44:	429a      	cmp	r2, r3
 8016a46:	d008      	beq.n	8016a5a <dhcp_set_state+0x28>
    dhcp->state = new_state;
 8016a48:	687b      	ldr	r3, [r7, #4]
 8016a4a:	78fa      	ldrb	r2, [r7, #3]
 8016a4c:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 8016a4e:	687b      	ldr	r3, [r7, #4]
 8016a50:	2200      	movs	r2, #0
 8016a52:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 8016a54:	687b      	ldr	r3, [r7, #4]
 8016a56:	2200      	movs	r2, #0
 8016a58:	811a      	strh	r2, [r3, #8]
  }
}
 8016a5a:	bf00      	nop
 8016a5c:	370c      	adds	r7, #12
 8016a5e:	46bd      	mov	sp, r7
 8016a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a64:	4770      	bx	lr
	...

08016a68 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 8016a68:	b580      	push	{r7, lr}
 8016a6a:	b082      	sub	sp, #8
 8016a6c:	af00      	add	r7, sp, #0
 8016a6e:	6039      	str	r1, [r7, #0]
 8016a70:	4611      	mov	r1, r2
 8016a72:	461a      	mov	r2, r3
 8016a74:	4603      	mov	r3, r0
 8016a76:	80fb      	strh	r3, [r7, #6]
 8016a78:	460b      	mov	r3, r1
 8016a7a:	717b      	strb	r3, [r7, #5]
 8016a7c:	4613      	mov	r3, r2
 8016a7e:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8016a80:	88fa      	ldrh	r2, [r7, #6]
 8016a82:	793b      	ldrb	r3, [r7, #4]
 8016a84:	4413      	add	r3, r2
 8016a86:	3302      	adds	r3, #2
 8016a88:	2b44      	cmp	r3, #68	; 0x44
 8016a8a:	d906      	bls.n	8016a9a <dhcp_option+0x32>
 8016a8c:	4b0d      	ldr	r3, [pc, #52]	; (8016ac4 <dhcp_option+0x5c>)
 8016a8e:	f240 529a 	movw	r2, #1434	; 0x59a
 8016a92:	490d      	ldr	r1, [pc, #52]	; (8016ac8 <dhcp_option+0x60>)
 8016a94:	480d      	ldr	r0, [pc, #52]	; (8016acc <dhcp_option+0x64>)
 8016a96:	f004 f99b 	bl	801add0 <iprintf>
  options[options_out_len++] = option_type;
 8016a9a:	88fb      	ldrh	r3, [r7, #6]
 8016a9c:	1c5a      	adds	r2, r3, #1
 8016a9e:	80fa      	strh	r2, [r7, #6]
 8016aa0:	461a      	mov	r2, r3
 8016aa2:	683b      	ldr	r3, [r7, #0]
 8016aa4:	4413      	add	r3, r2
 8016aa6:	797a      	ldrb	r2, [r7, #5]
 8016aa8:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 8016aaa:	88fb      	ldrh	r3, [r7, #6]
 8016aac:	1c5a      	adds	r2, r3, #1
 8016aae:	80fa      	strh	r2, [r7, #6]
 8016ab0:	461a      	mov	r2, r3
 8016ab2:	683b      	ldr	r3, [r7, #0]
 8016ab4:	4413      	add	r3, r2
 8016ab6:	793a      	ldrb	r2, [r7, #4]
 8016ab8:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8016aba:	88fb      	ldrh	r3, [r7, #6]
}
 8016abc:	4618      	mov	r0, r3
 8016abe:	3708      	adds	r7, #8
 8016ac0:	46bd      	mov	sp, r7
 8016ac2:	bd80      	pop	{r7, pc}
 8016ac4:	0801ffa8 	.word	0x0801ffa8
 8016ac8:	0802013c 	.word	0x0802013c
 8016acc:	08020008 	.word	0x08020008

08016ad0 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 8016ad0:	b580      	push	{r7, lr}
 8016ad2:	b082      	sub	sp, #8
 8016ad4:	af00      	add	r7, sp, #0
 8016ad6:	4603      	mov	r3, r0
 8016ad8:	6039      	str	r1, [r7, #0]
 8016ada:	80fb      	strh	r3, [r7, #6]
 8016adc:	4613      	mov	r3, r2
 8016ade:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8016ae0:	88fb      	ldrh	r3, [r7, #6]
 8016ae2:	2b43      	cmp	r3, #67	; 0x43
 8016ae4:	d906      	bls.n	8016af4 <dhcp_option_byte+0x24>
 8016ae6:	4b0a      	ldr	r3, [pc, #40]	; (8016b10 <dhcp_option_byte+0x40>)
 8016ae8:	f240 52a6 	movw	r2, #1446	; 0x5a6
 8016aec:	4909      	ldr	r1, [pc, #36]	; (8016b14 <dhcp_option_byte+0x44>)
 8016aee:	480a      	ldr	r0, [pc, #40]	; (8016b18 <dhcp_option_byte+0x48>)
 8016af0:	f004 f96e 	bl	801add0 <iprintf>
  options[options_out_len++] = value;
 8016af4:	88fb      	ldrh	r3, [r7, #6]
 8016af6:	1c5a      	adds	r2, r3, #1
 8016af8:	80fa      	strh	r2, [r7, #6]
 8016afa:	461a      	mov	r2, r3
 8016afc:	683b      	ldr	r3, [r7, #0]
 8016afe:	4413      	add	r3, r2
 8016b00:	797a      	ldrb	r2, [r7, #5]
 8016b02:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8016b04:	88fb      	ldrh	r3, [r7, #6]
}
 8016b06:	4618      	mov	r0, r3
 8016b08:	3708      	adds	r7, #8
 8016b0a:	46bd      	mov	sp, r7
 8016b0c:	bd80      	pop	{r7, pc}
 8016b0e:	bf00      	nop
 8016b10:	0801ffa8 	.word	0x0801ffa8
 8016b14:	08020180 	.word	0x08020180
 8016b18:	08020008 	.word	0x08020008

08016b1c <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 8016b1c:	b580      	push	{r7, lr}
 8016b1e:	b082      	sub	sp, #8
 8016b20:	af00      	add	r7, sp, #0
 8016b22:	4603      	mov	r3, r0
 8016b24:	6039      	str	r1, [r7, #0]
 8016b26:	80fb      	strh	r3, [r7, #6]
 8016b28:	4613      	mov	r3, r2
 8016b2a:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8016b2c:	88fb      	ldrh	r3, [r7, #6]
 8016b2e:	3302      	adds	r3, #2
 8016b30:	2b44      	cmp	r3, #68	; 0x44
 8016b32:	d906      	bls.n	8016b42 <dhcp_option_short+0x26>
 8016b34:	4b0f      	ldr	r3, [pc, #60]	; (8016b74 <dhcp_option_short+0x58>)
 8016b36:	f240 52ae 	movw	r2, #1454	; 0x5ae
 8016b3a:	490f      	ldr	r1, [pc, #60]	; (8016b78 <dhcp_option_short+0x5c>)
 8016b3c:	480f      	ldr	r0, [pc, #60]	; (8016b7c <dhcp_option_short+0x60>)
 8016b3e:	f004 f947 	bl	801add0 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8016b42:	88bb      	ldrh	r3, [r7, #4]
 8016b44:	0a1b      	lsrs	r3, r3, #8
 8016b46:	b29a      	uxth	r2, r3
 8016b48:	88fb      	ldrh	r3, [r7, #6]
 8016b4a:	1c59      	adds	r1, r3, #1
 8016b4c:	80f9      	strh	r1, [r7, #6]
 8016b4e:	4619      	mov	r1, r3
 8016b50:	683b      	ldr	r3, [r7, #0]
 8016b52:	440b      	add	r3, r1
 8016b54:	b2d2      	uxtb	r2, r2
 8016b56:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8016b58:	88fb      	ldrh	r3, [r7, #6]
 8016b5a:	1c5a      	adds	r2, r3, #1
 8016b5c:	80fa      	strh	r2, [r7, #6]
 8016b5e:	461a      	mov	r2, r3
 8016b60:	683b      	ldr	r3, [r7, #0]
 8016b62:	4413      	add	r3, r2
 8016b64:	88ba      	ldrh	r2, [r7, #4]
 8016b66:	b2d2      	uxtb	r2, r2
 8016b68:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8016b6a:	88fb      	ldrh	r3, [r7, #6]
}
 8016b6c:	4618      	mov	r0, r3
 8016b6e:	3708      	adds	r7, #8
 8016b70:	46bd      	mov	sp, r7
 8016b72:	bd80      	pop	{r7, pc}
 8016b74:	0801ffa8 	.word	0x0801ffa8
 8016b78:	080201b8 	.word	0x080201b8
 8016b7c:	08020008 	.word	0x08020008

08016b80 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 8016b80:	b580      	push	{r7, lr}
 8016b82:	b084      	sub	sp, #16
 8016b84:	af00      	add	r7, sp, #0
 8016b86:	4603      	mov	r3, r0
 8016b88:	60b9      	str	r1, [r7, #8]
 8016b8a:	607a      	str	r2, [r7, #4]
 8016b8c:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8016b8e:	89fb      	ldrh	r3, [r7, #14]
 8016b90:	3304      	adds	r3, #4
 8016b92:	2b44      	cmp	r3, #68	; 0x44
 8016b94:	d906      	bls.n	8016ba4 <dhcp_option_long+0x24>
 8016b96:	4b19      	ldr	r3, [pc, #100]	; (8016bfc <dhcp_option_long+0x7c>)
 8016b98:	f240 52b7 	movw	r2, #1463	; 0x5b7
 8016b9c:	4918      	ldr	r1, [pc, #96]	; (8016c00 <dhcp_option_long+0x80>)
 8016b9e:	4819      	ldr	r0, [pc, #100]	; (8016c04 <dhcp_option_long+0x84>)
 8016ba0:	f004 f916 	bl	801add0 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8016ba4:	687b      	ldr	r3, [r7, #4]
 8016ba6:	0e1a      	lsrs	r2, r3, #24
 8016ba8:	89fb      	ldrh	r3, [r7, #14]
 8016baa:	1c59      	adds	r1, r3, #1
 8016bac:	81f9      	strh	r1, [r7, #14]
 8016bae:	4619      	mov	r1, r3
 8016bb0:	68bb      	ldr	r3, [r7, #8]
 8016bb2:	440b      	add	r3, r1
 8016bb4:	b2d2      	uxtb	r2, r2
 8016bb6:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8016bb8:	687b      	ldr	r3, [r7, #4]
 8016bba:	0c1a      	lsrs	r2, r3, #16
 8016bbc:	89fb      	ldrh	r3, [r7, #14]
 8016bbe:	1c59      	adds	r1, r3, #1
 8016bc0:	81f9      	strh	r1, [r7, #14]
 8016bc2:	4619      	mov	r1, r3
 8016bc4:	68bb      	ldr	r3, [r7, #8]
 8016bc6:	440b      	add	r3, r1
 8016bc8:	b2d2      	uxtb	r2, r2
 8016bca:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8016bcc:	687b      	ldr	r3, [r7, #4]
 8016bce:	0a1a      	lsrs	r2, r3, #8
 8016bd0:	89fb      	ldrh	r3, [r7, #14]
 8016bd2:	1c59      	adds	r1, r3, #1
 8016bd4:	81f9      	strh	r1, [r7, #14]
 8016bd6:	4619      	mov	r1, r3
 8016bd8:	68bb      	ldr	r3, [r7, #8]
 8016bda:	440b      	add	r3, r1
 8016bdc:	b2d2      	uxtb	r2, r2
 8016bde:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8016be0:	89fb      	ldrh	r3, [r7, #14]
 8016be2:	1c5a      	adds	r2, r3, #1
 8016be4:	81fa      	strh	r2, [r7, #14]
 8016be6:	461a      	mov	r2, r3
 8016be8:	68bb      	ldr	r3, [r7, #8]
 8016bea:	4413      	add	r3, r2
 8016bec:	687a      	ldr	r2, [r7, #4]
 8016bee:	b2d2      	uxtb	r2, r2
 8016bf0:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8016bf2:	89fb      	ldrh	r3, [r7, #14]
}
 8016bf4:	4618      	mov	r0, r3
 8016bf6:	3710      	adds	r7, #16
 8016bf8:	46bd      	mov	sp, r7
 8016bfa:	bd80      	pop	{r7, pc}
 8016bfc:	0801ffa8 	.word	0x0801ffa8
 8016c00:	080201f4 	.word	0x080201f4
 8016c04:	08020008 	.word	0x08020008

08016c08 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 8016c08:	b580      	push	{r7, lr}
 8016c0a:	b092      	sub	sp, #72	; 0x48
 8016c0c:	af00      	add	r7, sp, #0
 8016c0e:	6078      	str	r0, [r7, #4]
 8016c10:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 8016c12:	2300      	movs	r3, #0
 8016c14:	633b      	str	r3, [r7, #48]	; 0x30
  int parse_sname_as_options = 0;
 8016c16:	2300      	movs	r3, #0
 8016c18:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 8016c1a:	2208      	movs	r2, #8
 8016c1c:	2100      	movs	r1, #0
 8016c1e:	48b8      	ldr	r0, [pc, #736]	; (8016f00 <dhcp_parse_reply+0x2f8>)
 8016c20:	f003 fb6e 	bl	801a300 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 8016c24:	687b      	ldr	r3, [r7, #4]
 8016c26:	895b      	ldrh	r3, [r3, #10]
 8016c28:	2b2b      	cmp	r3, #43	; 0x2b
 8016c2a:	d802      	bhi.n	8016c32 <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 8016c2c:	f06f 0301 	mvn.w	r3, #1
 8016c30:	e2b8      	b.n	80171a4 <dhcp_parse_reply+0x59c>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 8016c32:	687b      	ldr	r3, [r7, #4]
 8016c34:	685b      	ldr	r3, [r3, #4]
 8016c36:	61fb      	str	r3, [r7, #28]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 8016c38:	23f0      	movs	r3, #240	; 0xf0
 8016c3a:	87bb      	strh	r3, [r7, #60]	; 0x3c
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 8016c3c:	687b      	ldr	r3, [r7, #4]
 8016c3e:	891b      	ldrh	r3, [r3, #8]
 8016c40:	877b      	strh	r3, [r7, #58]	; 0x3a
again:
  q = p;
 8016c42:	687b      	ldr	r3, [r7, #4]
 8016c44:	637b      	str	r3, [r7, #52]	; 0x34
  while ((q != NULL) && (options_idx >= q->len)) {
 8016c46:	e00c      	b.n	8016c62 <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 8016c48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016c4a:	895b      	ldrh	r3, [r3, #10]
 8016c4c:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8016c4e:	1ad3      	subs	r3, r2, r3
 8016c50:	87bb      	strh	r3, [r7, #60]	; 0x3c
    options_idx_max = (u16_t)(options_idx_max - q->len);
 8016c52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016c54:	895b      	ldrh	r3, [r3, #10]
 8016c56:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8016c58:	1ad3      	subs	r3, r2, r3
 8016c5a:	877b      	strh	r3, [r7, #58]	; 0x3a
    q = q->next;
 8016c5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016c5e:	681b      	ldr	r3, [r3, #0]
 8016c60:	637b      	str	r3, [r7, #52]	; 0x34
  while ((q != NULL) && (options_idx >= q->len)) {
 8016c62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016c64:	2b00      	cmp	r3, #0
 8016c66:	d004      	beq.n	8016c72 <dhcp_parse_reply+0x6a>
 8016c68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016c6a:	895b      	ldrh	r3, [r3, #10]
 8016c6c:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8016c6e:	429a      	cmp	r2, r3
 8016c70:	d2ea      	bcs.n	8016c48 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 8016c72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016c74:	2b00      	cmp	r3, #0
 8016c76:	d102      	bne.n	8016c7e <dhcp_parse_reply+0x76>
    return ERR_BUF;
 8016c78:	f06f 0301 	mvn.w	r3, #1
 8016c7c:	e292      	b.n	80171a4 <dhcp_parse_reply+0x59c>
  }
  offset = options_idx;
 8016c7e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016c80:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  offset_max = options_idx_max;
 8016c84:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016c86:	87fb      	strh	r3, [r7, #62]	; 0x3e
  options = (u8_t *)q->payload;
 8016c88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016c8a:	685b      	ldr	r3, [r3, #4]
 8016c8c:	643b      	str	r3, [r7, #64]	; 0x40
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8016c8e:	e247      	b.n	8017120 <dhcp_parse_reply+0x518>
    u8_t op = options[offset];
 8016c90:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8016c94:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8016c96:	4413      	add	r3, r2
 8016c98:	781b      	ldrb	r3, [r3, #0]
 8016c9a:	76fb      	strb	r3, [r7, #27]
    u8_t len;
    u8_t decode_len = 0;
 8016c9c:	2300      	movs	r3, #0
 8016c9e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    int decode_idx = -1;
 8016ca2:	f04f 33ff 	mov.w	r3, #4294967295
 8016ca6:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t val_offset = (u16_t)(offset + 2);
 8016ca8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8016cac:	3302      	adds	r3, #2
 8016cae:	847b      	strh	r3, [r7, #34]	; 0x22
    if (val_offset < offset) {
 8016cb0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8016cb2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8016cb6:	429a      	cmp	r2, r3
 8016cb8:	d202      	bcs.n	8016cc0 <dhcp_parse_reply+0xb8>
      /* overflow */
      return ERR_BUF;
 8016cba:	f06f 0301 	mvn.w	r3, #1
 8016cbe:	e271      	b.n	80171a4 <dhcp_parse_reply+0x59c>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 8016cc0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8016cc4:	3301      	adds	r3, #1
 8016cc6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016cc8:	8952      	ldrh	r2, [r2, #10]
 8016cca:	4293      	cmp	r3, r2
 8016ccc:	da08      	bge.n	8016ce0 <dhcp_parse_reply+0xd8>
      len = options[offset + 1];
 8016cce:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8016cd2:	3301      	adds	r3, #1
 8016cd4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8016cd6:	4413      	add	r3, r2
 8016cd8:	781b      	ldrb	r3, [r3, #0]
 8016cda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8016cde:	e00b      	b.n	8016cf8 <dhcp_parse_reply+0xf0>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8016ce0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016ce2:	681b      	ldr	r3, [r3, #0]
 8016ce4:	2b00      	cmp	r3, #0
 8016ce6:	d004      	beq.n	8016cf2 <dhcp_parse_reply+0xea>
 8016ce8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016cea:	681b      	ldr	r3, [r3, #0]
 8016cec:	685b      	ldr	r3, [r3, #4]
 8016cee:	781b      	ldrb	r3, [r3, #0]
 8016cf0:	e000      	b.n	8016cf4 <dhcp_parse_reply+0xec>
 8016cf2:	2300      	movs	r3, #0
 8016cf4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 8016cf8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8016cfc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    switch (op) {
 8016d00:	7efb      	ldrb	r3, [r7, #27]
 8016d02:	2b3b      	cmp	r3, #59	; 0x3b
 8016d04:	f200 812c 	bhi.w	8016f60 <dhcp_parse_reply+0x358>
 8016d08:	a201      	add	r2, pc, #4	; (adr r2, 8016d10 <dhcp_parse_reply+0x108>)
 8016d0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016d0e:	bf00      	nop
 8016d10:	08016e01 	.word	0x08016e01
 8016d14:	08016e11 	.word	0x08016e11
 8016d18:	08016f61 	.word	0x08016f61
 8016d1c:	08016e33 	.word	0x08016e33
 8016d20:	08016f61 	.word	0x08016f61
 8016d24:	08016f61 	.word	0x08016f61
 8016d28:	08016f61 	.word	0x08016f61
 8016d2c:	08016f61 	.word	0x08016f61
 8016d30:	08016f61 	.word	0x08016f61
 8016d34:	08016f61 	.word	0x08016f61
 8016d38:	08016f61 	.word	0x08016f61
 8016d3c:	08016f61 	.word	0x08016f61
 8016d40:	08016f61 	.word	0x08016f61
 8016d44:	08016f61 	.word	0x08016f61
 8016d48:	08016f61 	.word	0x08016f61
 8016d4c:	08016f61 	.word	0x08016f61
 8016d50:	08016f61 	.word	0x08016f61
 8016d54:	08016f61 	.word	0x08016f61
 8016d58:	08016f61 	.word	0x08016f61
 8016d5c:	08016f61 	.word	0x08016f61
 8016d60:	08016f61 	.word	0x08016f61
 8016d64:	08016f61 	.word	0x08016f61
 8016d68:	08016f61 	.word	0x08016f61
 8016d6c:	08016f61 	.word	0x08016f61
 8016d70:	08016f61 	.word	0x08016f61
 8016d74:	08016f61 	.word	0x08016f61
 8016d78:	08016f61 	.word	0x08016f61
 8016d7c:	08016f61 	.word	0x08016f61
 8016d80:	08016f61 	.word	0x08016f61
 8016d84:	08016f61 	.word	0x08016f61
 8016d88:	08016f61 	.word	0x08016f61
 8016d8c:	08016f61 	.word	0x08016f61
 8016d90:	08016f61 	.word	0x08016f61
 8016d94:	08016f61 	.word	0x08016f61
 8016d98:	08016f61 	.word	0x08016f61
 8016d9c:	08016f61 	.word	0x08016f61
 8016da0:	08016f61 	.word	0x08016f61
 8016da4:	08016f61 	.word	0x08016f61
 8016da8:	08016f61 	.word	0x08016f61
 8016dac:	08016f61 	.word	0x08016f61
 8016db0:	08016f61 	.word	0x08016f61
 8016db4:	08016f61 	.word	0x08016f61
 8016db8:	08016f61 	.word	0x08016f61
 8016dbc:	08016f61 	.word	0x08016f61
 8016dc0:	08016f61 	.word	0x08016f61
 8016dc4:	08016f61 	.word	0x08016f61
 8016dc8:	08016f61 	.word	0x08016f61
 8016dcc:	08016f61 	.word	0x08016f61
 8016dd0:	08016f61 	.word	0x08016f61
 8016dd4:	08016f61 	.word	0x08016f61
 8016dd8:	08016f61 	.word	0x08016f61
 8016ddc:	08016e5f 	.word	0x08016e5f
 8016de0:	08016e81 	.word	0x08016e81
 8016de4:	08016ebd 	.word	0x08016ebd
 8016de8:	08016edf 	.word	0x08016edf
 8016dec:	08016f61 	.word	0x08016f61
 8016df0:	08016f61 	.word	0x08016f61
 8016df4:	08016f61 	.word	0x08016f61
 8016df8:	08016f1d 	.word	0x08016f1d
 8016dfc:	08016f3f 	.word	0x08016f3f
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 8016e00:	2300      	movs	r3, #0
 8016e02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8016e06:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8016e0a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        /* will be increased below */
        break;
 8016e0e:	e0ab      	b.n	8016f68 <dhcp_parse_reply+0x360>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8016e10:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8016e14:	2b04      	cmp	r3, #4
 8016e16:	d009      	beq.n	8016e2c <dhcp_parse_reply+0x224>
 8016e18:	4b3a      	ldr	r3, [pc, #232]	; (8016f04 <dhcp_parse_reply+0x2fc>)
 8016e1a:	f240 622e 	movw	r2, #1582	; 0x62e
 8016e1e:	493a      	ldr	r1, [pc, #232]	; (8016f08 <dhcp_parse_reply+0x300>)
 8016e20:	483a      	ldr	r0, [pc, #232]	; (8016f0c <dhcp_parse_reply+0x304>)
 8016e22:	f003 ffd5 	bl	801add0 <iprintf>
 8016e26:	f06f 0305 	mvn.w	r3, #5
 8016e2a:	e1bb      	b.n	80171a4 <dhcp_parse_reply+0x59c>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8016e2c:	2306      	movs	r3, #6
 8016e2e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8016e30:	e09a      	b.n	8016f68 <dhcp_parse_reply+0x360>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 8016e32:	2304      	movs	r3, #4
 8016e34:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8016e38:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8016e3c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8016e40:	429a      	cmp	r2, r3
 8016e42:	d209      	bcs.n	8016e58 <dhcp_parse_reply+0x250>
 8016e44:	4b2f      	ldr	r3, [pc, #188]	; (8016f04 <dhcp_parse_reply+0x2fc>)
 8016e46:	f240 6233 	movw	r2, #1587	; 0x633
 8016e4a:	4931      	ldr	r1, [pc, #196]	; (8016f10 <dhcp_parse_reply+0x308>)
 8016e4c:	482f      	ldr	r0, [pc, #188]	; (8016f0c <dhcp_parse_reply+0x304>)
 8016e4e:	f003 ffbf 	bl	801add0 <iprintf>
 8016e52:	f06f 0305 	mvn.w	r3, #5
 8016e56:	e1a5      	b.n	80171a4 <dhcp_parse_reply+0x59c>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8016e58:	2307      	movs	r3, #7
 8016e5a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8016e5c:	e084      	b.n	8016f68 <dhcp_parse_reply+0x360>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8016e5e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8016e62:	2b04      	cmp	r3, #4
 8016e64:	d009      	beq.n	8016e7a <dhcp_parse_reply+0x272>
 8016e66:	4b27      	ldr	r3, [pc, #156]	; (8016f04 <dhcp_parse_reply+0x2fc>)
 8016e68:	f240 6241 	movw	r2, #1601	; 0x641
 8016e6c:	4926      	ldr	r1, [pc, #152]	; (8016f08 <dhcp_parse_reply+0x300>)
 8016e6e:	4827      	ldr	r0, [pc, #156]	; (8016f0c <dhcp_parse_reply+0x304>)
 8016e70:	f003 ffae 	bl	801add0 <iprintf>
 8016e74:	f06f 0305 	mvn.w	r3, #5
 8016e78:	e194      	b.n	80171a4 <dhcp_parse_reply+0x59c>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 8016e7a:	2303      	movs	r3, #3
 8016e7c:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8016e7e:	e073      	b.n	8016f68 <dhcp_parse_reply+0x360>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8016e80:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8016e84:	2b01      	cmp	r3, #1
 8016e86:	d009      	beq.n	8016e9c <dhcp_parse_reply+0x294>
 8016e88:	4b1e      	ldr	r3, [pc, #120]	; (8016f04 <dhcp_parse_reply+0x2fc>)
 8016e8a:	f240 624f 	movw	r2, #1615	; 0x64f
 8016e8e:	4921      	ldr	r1, [pc, #132]	; (8016f14 <dhcp_parse_reply+0x30c>)
 8016e90:	481e      	ldr	r0, [pc, #120]	; (8016f0c <dhcp_parse_reply+0x304>)
 8016e92:	f003 ff9d 	bl	801add0 <iprintf>
 8016e96:	f06f 0305 	mvn.w	r3, #5
 8016e9a:	e183      	b.n	80171a4 <dhcp_parse_reply+0x59c>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8016e9c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016e9e:	2bf0      	cmp	r3, #240	; 0xf0
 8016ea0:	d009      	beq.n	8016eb6 <dhcp_parse_reply+0x2ae>
 8016ea2:	4b18      	ldr	r3, [pc, #96]	; (8016f04 <dhcp_parse_reply+0x2fc>)
 8016ea4:	f240 6251 	movw	r2, #1617	; 0x651
 8016ea8:	491b      	ldr	r1, [pc, #108]	; (8016f18 <dhcp_parse_reply+0x310>)
 8016eaa:	4818      	ldr	r0, [pc, #96]	; (8016f0c <dhcp_parse_reply+0x304>)
 8016eac:	f003 ff90 	bl	801add0 <iprintf>
 8016eb0:	f06f 0305 	mvn.w	r3, #5
 8016eb4:	e176      	b.n	80171a4 <dhcp_parse_reply+0x59c>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 8016eb6:	2300      	movs	r3, #0
 8016eb8:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8016eba:	e055      	b.n	8016f68 <dhcp_parse_reply+0x360>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8016ebc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8016ec0:	2b01      	cmp	r3, #1
 8016ec2:	d009      	beq.n	8016ed8 <dhcp_parse_reply+0x2d0>
 8016ec4:	4b0f      	ldr	r3, [pc, #60]	; (8016f04 <dhcp_parse_reply+0x2fc>)
 8016ec6:	f240 6255 	movw	r2, #1621	; 0x655
 8016eca:	4912      	ldr	r1, [pc, #72]	; (8016f14 <dhcp_parse_reply+0x30c>)
 8016ecc:	480f      	ldr	r0, [pc, #60]	; (8016f0c <dhcp_parse_reply+0x304>)
 8016ece:	f003 ff7f 	bl	801add0 <iprintf>
 8016ed2:	f06f 0305 	mvn.w	r3, #5
 8016ed6:	e165      	b.n	80171a4 <dhcp_parse_reply+0x59c>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 8016ed8:	2301      	movs	r3, #1
 8016eda:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8016edc:	e044      	b.n	8016f68 <dhcp_parse_reply+0x360>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8016ede:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8016ee2:	2b04      	cmp	r3, #4
 8016ee4:	d009      	beq.n	8016efa <dhcp_parse_reply+0x2f2>
 8016ee6:	4b07      	ldr	r3, [pc, #28]	; (8016f04 <dhcp_parse_reply+0x2fc>)
 8016ee8:	f240 6259 	movw	r2, #1625	; 0x659
 8016eec:	4906      	ldr	r1, [pc, #24]	; (8016f08 <dhcp_parse_reply+0x300>)
 8016eee:	4807      	ldr	r0, [pc, #28]	; (8016f0c <dhcp_parse_reply+0x304>)
 8016ef0:	f003 ff6e 	bl	801add0 <iprintf>
 8016ef4:	f06f 0305 	mvn.w	r3, #5
 8016ef8:	e154      	b.n	80171a4 <dhcp_parse_reply+0x59c>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 8016efa:	2302      	movs	r3, #2
 8016efc:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8016efe:	e033      	b.n	8016f68 <dhcp_parse_reply+0x360>
 8016f00:	20013d5c 	.word	0x20013d5c
 8016f04:	0801ffa8 	.word	0x0801ffa8
 8016f08:	08020230 	.word	0x08020230
 8016f0c:	08020008 	.word	0x08020008
 8016f10:	0802023c 	.word	0x0802023c
 8016f14:	08020250 	.word	0x08020250
 8016f18:	0802025c 	.word	0x0802025c
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8016f1c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8016f20:	2b04      	cmp	r3, #4
 8016f22:	d009      	beq.n	8016f38 <dhcp_parse_reply+0x330>
 8016f24:	4ba1      	ldr	r3, [pc, #644]	; (80171ac <dhcp_parse_reply+0x5a4>)
 8016f26:	f240 625d 	movw	r2, #1629	; 0x65d
 8016f2a:	49a1      	ldr	r1, [pc, #644]	; (80171b0 <dhcp_parse_reply+0x5a8>)
 8016f2c:	48a1      	ldr	r0, [pc, #644]	; (80171b4 <dhcp_parse_reply+0x5ac>)
 8016f2e:	f003 ff4f 	bl	801add0 <iprintf>
 8016f32:	f06f 0305 	mvn.w	r3, #5
 8016f36:	e135      	b.n	80171a4 <dhcp_parse_reply+0x59c>
        decode_idx = DHCP_OPTION_IDX_T1;
 8016f38:	2304      	movs	r3, #4
 8016f3a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8016f3c:	e014      	b.n	8016f68 <dhcp_parse_reply+0x360>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8016f3e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8016f42:	2b04      	cmp	r3, #4
 8016f44:	d009      	beq.n	8016f5a <dhcp_parse_reply+0x352>
 8016f46:	4b99      	ldr	r3, [pc, #612]	; (80171ac <dhcp_parse_reply+0x5a4>)
 8016f48:	f240 6261 	movw	r2, #1633	; 0x661
 8016f4c:	4998      	ldr	r1, [pc, #608]	; (80171b0 <dhcp_parse_reply+0x5a8>)
 8016f4e:	4899      	ldr	r0, [pc, #612]	; (80171b4 <dhcp_parse_reply+0x5ac>)
 8016f50:	f003 ff3e 	bl	801add0 <iprintf>
 8016f54:	f06f 0305 	mvn.w	r3, #5
 8016f58:	e124      	b.n	80171a4 <dhcp_parse_reply+0x59c>
        decode_idx = DHCP_OPTION_IDX_T2;
 8016f5a:	2305      	movs	r3, #5
 8016f5c:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8016f5e:	e003      	b.n	8016f68 <dhcp_parse_reply+0x360>
      default:
        decode_len = 0;
 8016f60:	2300      	movs	r3, #0
 8016f62:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 8016f66:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 8016f68:	7efb      	ldrb	r3, [r7, #27]
 8016f6a:	2b00      	cmp	r3, #0
 8016f6c:	d105      	bne.n	8016f7a <dhcp_parse_reply+0x372>
      offset++;
 8016f6e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8016f72:	3301      	adds	r3, #1
 8016f74:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8016f78:	e0a4      	b.n	80170c4 <dhcp_parse_reply+0x4bc>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 8016f7a:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8016f7e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8016f82:	4413      	add	r3, r2
 8016f84:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8016f88:	4293      	cmp	r3, r2
 8016f8a:	dd02      	ble.n	8016f92 <dhcp_parse_reply+0x38a>
        /* overflow */
        return ERR_BUF;
 8016f8c:	f06f 0301 	mvn.w	r3, #1
 8016f90:	e108      	b.n	80171a4 <dhcp_parse_reply+0x59c>
      }
      offset = (u16_t)(offset + len + 2);
 8016f92:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8016f96:	b29a      	uxth	r2, r3
 8016f98:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8016f9c:	4413      	add	r3, r2
 8016f9e:	b29b      	uxth	r3, r3
 8016fa0:	3302      	adds	r3, #2
 8016fa2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      if (decode_len > 0) {
 8016fa6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8016faa:	2b00      	cmp	r3, #0
 8016fac:	f000 808a 	beq.w	80170c4 <dhcp_parse_reply+0x4bc>
        u32_t value = 0;
 8016fb0:	2300      	movs	r3, #0
 8016fb2:	60fb      	str	r3, [r7, #12]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8016fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016fb6:	2b00      	cmp	r3, #0
 8016fb8:	db02      	blt.n	8016fc0 <dhcp_parse_reply+0x3b8>
 8016fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016fbc:	2b07      	cmp	r3, #7
 8016fbe:	dd06      	ble.n	8016fce <dhcp_parse_reply+0x3c6>
 8016fc0:	4b7a      	ldr	r3, [pc, #488]	; (80171ac <dhcp_parse_reply+0x5a4>)
 8016fc2:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 8016fc6:	497c      	ldr	r1, [pc, #496]	; (80171b8 <dhcp_parse_reply+0x5b0>)
 8016fc8:	487a      	ldr	r0, [pc, #488]	; (80171b4 <dhcp_parse_reply+0x5ac>)
 8016fca:	f003 ff01 	bl	801add0 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 8016fce:	4a7b      	ldr	r2, [pc, #492]	; (80171bc <dhcp_parse_reply+0x5b4>)
 8016fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016fd2:	4413      	add	r3, r2
 8016fd4:	781b      	ldrb	r3, [r3, #0]
 8016fd6:	2b00      	cmp	r3, #0
 8016fd8:	d174      	bne.n	80170c4 <dhcp_parse_reply+0x4bc>
          copy_len = LWIP_MIN(decode_len, 4);
 8016fda:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8016fde:	2b04      	cmp	r3, #4
 8016fe0:	bf28      	it	cs
 8016fe2:	2304      	movcs	r3, #4
 8016fe4:	b2db      	uxtb	r3, r3
 8016fe6:	833b      	strh	r3, [r7, #24]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8016fe8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016fea:	8b3a      	ldrh	r2, [r7, #24]
 8016fec:	f107 010c 	add.w	r1, r7, #12
 8016ff0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8016ff2:	f7f8 f937 	bl	800f264 <pbuf_copy_partial>
 8016ff6:	4603      	mov	r3, r0
 8016ff8:	461a      	mov	r2, r3
 8016ffa:	8b3b      	ldrh	r3, [r7, #24]
 8016ffc:	4293      	cmp	r3, r2
 8016ffe:	d002      	beq.n	8017006 <dhcp_parse_reply+0x3fe>
            return ERR_BUF;
 8017000:	f06f 0301 	mvn.w	r3, #1
 8017004:	e0ce      	b.n	80171a4 <dhcp_parse_reply+0x59c>
          }
          if (decode_len > 4) {
 8017006:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 801700a:	2b04      	cmp	r3, #4
 801700c:	d933      	bls.n	8017076 <dhcp_parse_reply+0x46e>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 801700e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8017012:	f003 0303 	and.w	r3, r3, #3
 8017016:	b2db      	uxtb	r3, r3
 8017018:	2b00      	cmp	r3, #0
 801701a:	d009      	beq.n	8017030 <dhcp_parse_reply+0x428>
 801701c:	4b63      	ldr	r3, [pc, #396]	; (80171ac <dhcp_parse_reply+0x5a4>)
 801701e:	f240 6281 	movw	r2, #1665	; 0x681
 8017022:	4967      	ldr	r1, [pc, #412]	; (80171c0 <dhcp_parse_reply+0x5b8>)
 8017024:	4863      	ldr	r0, [pc, #396]	; (80171b4 <dhcp_parse_reply+0x5ac>)
 8017026:	f003 fed3 	bl	801add0 <iprintf>
 801702a:	f06f 0305 	mvn.w	r3, #5
 801702e:	e0b9      	b.n	80171a4 <dhcp_parse_reply+0x59c>
            dhcp_got_option(dhcp, decode_idx);
 8017030:	4a62      	ldr	r2, [pc, #392]	; (80171bc <dhcp_parse_reply+0x5b4>)
 8017032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017034:	4413      	add	r3, r2
 8017036:	2201      	movs	r2, #1
 8017038:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 801703a:	68fb      	ldr	r3, [r7, #12]
 801703c:	4618      	mov	r0, r3
 801703e:	f7f6 f9fe 	bl	800d43e <lwip_htonl>
 8017042:	4602      	mov	r2, r0
 8017044:	495f      	ldr	r1, [pc, #380]	; (80171c4 <dhcp_parse_reply+0x5bc>)
 8017046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017048:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 801704c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8017050:	3b04      	subs	r3, #4
 8017052:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
            next_val_offset = (u16_t)(val_offset + 4);
 8017056:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017058:	3304      	adds	r3, #4
 801705a:	82fb      	strh	r3, [r7, #22]
            if (next_val_offset < val_offset) {
 801705c:	8afa      	ldrh	r2, [r7, #22]
 801705e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017060:	429a      	cmp	r2, r3
 8017062:	d202      	bcs.n	801706a <dhcp_parse_reply+0x462>
              /* overflow */
              return ERR_BUF;
 8017064:	f06f 0301 	mvn.w	r3, #1
 8017068:	e09c      	b.n	80171a4 <dhcp_parse_reply+0x59c>
            }
            val_offset = next_val_offset;
 801706a:	8afb      	ldrh	r3, [r7, #22]
 801706c:	847b      	strh	r3, [r7, #34]	; 0x22
            decode_idx++;
 801706e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017070:	3301      	adds	r3, #1
 8017072:	627b      	str	r3, [r7, #36]	; 0x24
            goto decode_next;
 8017074:	e79e      	b.n	8016fb4 <dhcp_parse_reply+0x3ac>
          } else if (decode_len == 4) {
 8017076:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 801707a:	2b04      	cmp	r3, #4
 801707c:	d106      	bne.n	801708c <dhcp_parse_reply+0x484>
            value = lwip_ntohl(value);
 801707e:	68fb      	ldr	r3, [r7, #12]
 8017080:	4618      	mov	r0, r3
 8017082:	f7f6 f9dc 	bl	800d43e <lwip_htonl>
 8017086:	4603      	mov	r3, r0
 8017088:	60fb      	str	r3, [r7, #12]
 801708a:	e011      	b.n	80170b0 <dhcp_parse_reply+0x4a8>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 801708c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8017090:	2b01      	cmp	r3, #1
 8017092:	d009      	beq.n	80170a8 <dhcp_parse_reply+0x4a0>
 8017094:	4b45      	ldr	r3, [pc, #276]	; (80171ac <dhcp_parse_reply+0x5a4>)
 8017096:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 801709a:	494b      	ldr	r1, [pc, #300]	; (80171c8 <dhcp_parse_reply+0x5c0>)
 801709c:	4845      	ldr	r0, [pc, #276]	; (80171b4 <dhcp_parse_reply+0x5ac>)
 801709e:	f003 fe97 	bl	801add0 <iprintf>
 80170a2:	f06f 0305 	mvn.w	r3, #5
 80170a6:	e07d      	b.n	80171a4 <dhcp_parse_reply+0x59c>
            value = ((u8_t *)&value)[0];
 80170a8:	f107 030c 	add.w	r3, r7, #12
 80170ac:	781b      	ldrb	r3, [r3, #0]
 80170ae:	60fb      	str	r3, [r7, #12]
          }
          dhcp_got_option(dhcp, decode_idx);
 80170b0:	4a42      	ldr	r2, [pc, #264]	; (80171bc <dhcp_parse_reply+0x5b4>)
 80170b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80170b4:	4413      	add	r3, r2
 80170b6:	2201      	movs	r2, #1
 80170b8:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 80170ba:	68fa      	ldr	r2, [r7, #12]
 80170bc:	4941      	ldr	r1, [pc, #260]	; (80171c4 <dhcp_parse_reply+0x5bc>)
 80170be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80170c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 80170c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80170c6:	895b      	ldrh	r3, [r3, #10]
 80170c8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80170cc:	429a      	cmp	r2, r3
 80170ce:	d327      	bcc.n	8017120 <dhcp_parse_reply+0x518>
      offset = (u16_t)(offset - q->len);
 80170d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80170d2:	895b      	ldrh	r3, [r3, #10]
 80170d4:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80170d8:	1ad3      	subs	r3, r2, r3
 80170da:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      offset_max = (u16_t)(offset_max - q->len);
 80170de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80170e0:	895b      	ldrh	r3, [r3, #10]
 80170e2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80170e4:	1ad3      	subs	r3, r2, r3
 80170e6:	87fb      	strh	r3, [r7, #62]	; 0x3e
      if (offset < offset_max) {
 80170e8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80170ec:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80170ee:	429a      	cmp	r2, r3
 80170f0:	d213      	bcs.n	801711a <dhcp_parse_reply+0x512>
        q = q->next;
 80170f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80170f4:	681b      	ldr	r3, [r3, #0]
 80170f6:	637b      	str	r3, [r7, #52]	; 0x34
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 80170f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80170fa:	2b00      	cmp	r3, #0
 80170fc:	d109      	bne.n	8017112 <dhcp_parse_reply+0x50a>
 80170fe:	4b2b      	ldr	r3, [pc, #172]	; (80171ac <dhcp_parse_reply+0x5a4>)
 8017100:	f240 629d 	movw	r2, #1693	; 0x69d
 8017104:	4931      	ldr	r1, [pc, #196]	; (80171cc <dhcp_parse_reply+0x5c4>)
 8017106:	482b      	ldr	r0, [pc, #172]	; (80171b4 <dhcp_parse_reply+0x5ac>)
 8017108:	f003 fe62 	bl	801add0 <iprintf>
 801710c:	f06f 0305 	mvn.w	r3, #5
 8017110:	e048      	b.n	80171a4 <dhcp_parse_reply+0x59c>
        options = (u8_t *)q->payload;
 8017112:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017114:	685b      	ldr	r3, [r3, #4]
 8017116:	643b      	str	r3, [r7, #64]	; 0x40
 8017118:	e002      	b.n	8017120 <dhcp_parse_reply+0x518>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 801711a:	f06f 0301 	mvn.w	r3, #1
 801711e:	e041      	b.n	80171a4 <dhcp_parse_reply+0x59c>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8017120:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017122:	2b00      	cmp	r3, #0
 8017124:	d00c      	beq.n	8017140 <dhcp_parse_reply+0x538>
 8017126:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801712a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801712c:	429a      	cmp	r2, r3
 801712e:	d207      	bcs.n	8017140 <dhcp_parse_reply+0x538>
 8017130:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8017134:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8017136:	4413      	add	r3, r2
 8017138:	781b      	ldrb	r3, [r3, #0]
 801713a:	2bff      	cmp	r3, #255	; 0xff
 801713c:	f47f ada8 	bne.w	8016c90 <dhcp_parse_reply+0x88>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8017140:	4b1e      	ldr	r3, [pc, #120]	; (80171bc <dhcp_parse_reply+0x5b4>)
 8017142:	781b      	ldrb	r3, [r3, #0]
 8017144:	2b00      	cmp	r3, #0
 8017146:	d018      	beq.n	801717a <dhcp_parse_reply+0x572>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8017148:	4b1e      	ldr	r3, [pc, #120]	; (80171c4 <dhcp_parse_reply+0x5bc>)
 801714a:	681b      	ldr	r3, [r3, #0]
 801714c:	613b      	str	r3, [r7, #16]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801714e:	4b1b      	ldr	r3, [pc, #108]	; (80171bc <dhcp_parse_reply+0x5b4>)
 8017150:	2200      	movs	r2, #0
 8017152:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8017154:	693b      	ldr	r3, [r7, #16]
 8017156:	2b01      	cmp	r3, #1
 8017158:	d102      	bne.n	8017160 <dhcp_parse_reply+0x558>
      parse_file_as_options = 1;
 801715a:	2301      	movs	r3, #1
 801715c:	633b      	str	r3, [r7, #48]	; 0x30
 801715e:	e00c      	b.n	801717a <dhcp_parse_reply+0x572>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 8017160:	693b      	ldr	r3, [r7, #16]
 8017162:	2b02      	cmp	r3, #2
 8017164:	d102      	bne.n	801716c <dhcp_parse_reply+0x564>
      parse_sname_as_options = 1;
 8017166:	2301      	movs	r3, #1
 8017168:	62fb      	str	r3, [r7, #44]	; 0x2c
 801716a:	e006      	b.n	801717a <dhcp_parse_reply+0x572>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 801716c:	693b      	ldr	r3, [r7, #16]
 801716e:	2b03      	cmp	r3, #3
 8017170:	d103      	bne.n	801717a <dhcp_parse_reply+0x572>
      parse_sname_as_options = 1;
 8017172:	2301      	movs	r3, #1
 8017174:	62fb      	str	r3, [r7, #44]	; 0x2c
      parse_file_as_options = 1;
 8017176:	2301      	movs	r3, #1
 8017178:	633b      	str	r3, [r7, #48]	; 0x30
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 801717a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801717c:	2b00      	cmp	r3, #0
 801717e:	d006      	beq.n	801718e <dhcp_parse_reply+0x586>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 8017180:	2300      	movs	r3, #0
 8017182:	633b      	str	r3, [r7, #48]	; 0x30
    options_idx = DHCP_FILE_OFS;
 8017184:	236c      	movs	r3, #108	; 0x6c
 8017186:	87bb      	strh	r3, [r7, #60]	; 0x3c
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 8017188:	23ec      	movs	r3, #236	; 0xec
 801718a:	877b      	strh	r3, [r7, #58]	; 0x3a
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 801718c:	e559      	b.n	8016c42 <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 801718e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017190:	2b00      	cmp	r3, #0
 8017192:	d006      	beq.n	80171a2 <dhcp_parse_reply+0x59a>
    parse_sname_as_options = 0;
 8017194:	2300      	movs	r3, #0
 8017196:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_SNAME_OFS;
 8017198:	232c      	movs	r3, #44	; 0x2c
 801719a:	87bb      	strh	r3, [r7, #60]	; 0x3c
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 801719c:	236c      	movs	r3, #108	; 0x6c
 801719e:	877b      	strh	r3, [r7, #58]	; 0x3a
    goto again;
 80171a0:	e54f      	b.n	8016c42 <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 80171a2:	2300      	movs	r3, #0
}
 80171a4:	4618      	mov	r0, r3
 80171a6:	3748      	adds	r7, #72	; 0x48
 80171a8:	46bd      	mov	sp, r7
 80171aa:	bd80      	pop	{r7, pc}
 80171ac:	0801ffa8 	.word	0x0801ffa8
 80171b0:	08020230 	.word	0x08020230
 80171b4:	08020008 	.word	0x08020008
 80171b8:	08020274 	.word	0x08020274
 80171bc:	20013d5c 	.word	0x20013d5c
 80171c0:	08020288 	.word	0x08020288
 80171c4:	20013d3c 	.word	0x20013d3c
 80171c8:	080202a0 	.word	0x080202a0
 80171cc:	080202b4 	.word	0x080202b4

080171d0 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 80171d0:	b580      	push	{r7, lr}
 80171d2:	b08a      	sub	sp, #40	; 0x28
 80171d4:	af00      	add	r7, sp, #0
 80171d6:	60f8      	str	r0, [r7, #12]
 80171d8:	60b9      	str	r1, [r7, #8]
 80171da:	607a      	str	r2, [r7, #4]
 80171dc:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 80171de:	4b5e      	ldr	r3, [pc, #376]	; (8017358 <dhcp_recv+0x188>)
 80171e0:	685b      	ldr	r3, [r3, #4]
 80171e2:	61fb      	str	r3, [r7, #28]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80171e4:	69fb      	ldr	r3, [r7, #28]
 80171e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80171e8:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 80171ea:	687b      	ldr	r3, [r7, #4]
 80171ec:	685b      	ldr	r3, [r3, #4]
 80171ee:	617b      	str	r3, [r7, #20]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 80171f0:	69bb      	ldr	r3, [r7, #24]
 80171f2:	2b00      	cmp	r3, #0
 80171f4:	f000 809a 	beq.w	801732c <dhcp_recv+0x15c>
 80171f8:	69bb      	ldr	r3, [r7, #24]
 80171fa:	791b      	ldrb	r3, [r3, #4]
 80171fc:	2b00      	cmp	r3, #0
 80171fe:	f000 8095 	beq.w	801732c <dhcp_recv+0x15c>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 8017202:	687b      	ldr	r3, [r7, #4]
 8017204:	895b      	ldrh	r3, [r3, #10]
 8017206:	2b2b      	cmp	r3, #43	; 0x2b
 8017208:	f240 8092 	bls.w	8017330 <dhcp_recv+0x160>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 801720c:	697b      	ldr	r3, [r7, #20]
 801720e:	781b      	ldrb	r3, [r3, #0]
 8017210:	2b02      	cmp	r3, #2
 8017212:	f040 808f 	bne.w	8017334 <dhcp_recv+0x164>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8017216:	2300      	movs	r3, #0
 8017218:	74fb      	strb	r3, [r7, #19]
 801721a:	e00e      	b.n	801723a <dhcp_recv+0x6a>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 801721c:	7cfb      	ldrb	r3, [r7, #19]
 801721e:	69fa      	ldr	r2, [r7, #28]
 8017220:	4413      	add	r3, r2
 8017222:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8017226:	7cfb      	ldrb	r3, [r7, #19]
 8017228:	6979      	ldr	r1, [r7, #20]
 801722a:	440b      	add	r3, r1
 801722c:	7f1b      	ldrb	r3, [r3, #28]
 801722e:	429a      	cmp	r2, r3
 8017230:	f040 8082 	bne.w	8017338 <dhcp_recv+0x168>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8017234:	7cfb      	ldrb	r3, [r7, #19]
 8017236:	3301      	adds	r3, #1
 8017238:	74fb      	strb	r3, [r7, #19]
 801723a:	69fb      	ldr	r3, [r7, #28]
 801723c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017240:	7cfa      	ldrb	r2, [r7, #19]
 8017242:	429a      	cmp	r2, r3
 8017244:	d202      	bcs.n	801724c <dhcp_recv+0x7c>
 8017246:	7cfb      	ldrb	r3, [r7, #19]
 8017248:	2b05      	cmp	r3, #5
 801724a:	d9e7      	bls.n	801721c <dhcp_recv+0x4c>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 801724c:	697b      	ldr	r3, [r7, #20]
 801724e:	685b      	ldr	r3, [r3, #4]
 8017250:	4618      	mov	r0, r3
 8017252:	f7f6 f8f4 	bl	800d43e <lwip_htonl>
 8017256:	4602      	mov	r2, r0
 8017258:	69bb      	ldr	r3, [r7, #24]
 801725a:	681b      	ldr	r3, [r3, #0]
 801725c:	429a      	cmp	r2, r3
 801725e:	d16d      	bne.n	801733c <dhcp_recv+0x16c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 8017260:	69b9      	ldr	r1, [r7, #24]
 8017262:	6878      	ldr	r0, [r7, #4]
 8017264:	f7ff fcd0 	bl	8016c08 <dhcp_parse_reply>
 8017268:	4603      	mov	r3, r0
 801726a:	2b00      	cmp	r3, #0
 801726c:	d168      	bne.n	8017340 <dhcp_recv+0x170>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 801726e:	4b3b      	ldr	r3, [pc, #236]	; (801735c <dhcp_recv+0x18c>)
 8017270:	785b      	ldrb	r3, [r3, #1]
 8017272:	2b00      	cmp	r3, #0
 8017274:	d066      	beq.n	8017344 <dhcp_recv+0x174>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 8017276:	687b      	ldr	r3, [r7, #4]
 8017278:	685b      	ldr	r3, [r3, #4]
 801727a:	627b      	str	r3, [r7, #36]	; 0x24
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 801727c:	4b38      	ldr	r3, [pc, #224]	; (8017360 <dhcp_recv+0x190>)
 801727e:	685b      	ldr	r3, [r3, #4]
 8017280:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 8017284:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8017288:	2b05      	cmp	r3, #5
 801728a:	d12a      	bne.n	80172e2 <dhcp_recv+0x112>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 801728c:	69bb      	ldr	r3, [r7, #24]
 801728e:	795b      	ldrb	r3, [r3, #5]
 8017290:	2b01      	cmp	r3, #1
 8017292:	d112      	bne.n	80172ba <dhcp_recv+0xea>
      dhcp_handle_ack(netif, msg_in);
 8017294:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017296:	69f8      	ldr	r0, [r7, #28]
 8017298:	f7fe fe00 	bl	8015e9c <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 801729c:	69fb      	ldr	r3, [r7, #28]
 801729e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80172a2:	f003 0308 	and.w	r3, r3, #8
 80172a6:	2b00      	cmp	r3, #0
 80172a8:	d003      	beq.n	80172b2 <dhcp_recv+0xe2>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 80172aa:	69f8      	ldr	r0, [r7, #28]
 80172ac:	f7fe fb70 	bl	8015990 <dhcp_check>
 80172b0:	e04b      	b.n	801734a <dhcp_recv+0x17a>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 80172b2:	69f8      	ldr	r0, [r7, #28]
 80172b4:	f7ff f850 	bl	8016358 <dhcp_bind>
 80172b8:	e047      	b.n	801734a <dhcp_recv+0x17a>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 80172ba:	69bb      	ldr	r3, [r7, #24]
 80172bc:	795b      	ldrb	r3, [r3, #5]
 80172be:	2b03      	cmp	r3, #3
 80172c0:	d007      	beq.n	80172d2 <dhcp_recv+0x102>
 80172c2:	69bb      	ldr	r3, [r7, #24]
 80172c4:	795b      	ldrb	r3, [r3, #5]
 80172c6:	2b04      	cmp	r3, #4
 80172c8:	d003      	beq.n	80172d2 <dhcp_recv+0x102>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 80172ca:	69bb      	ldr	r3, [r7, #24]
 80172cc:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 80172ce:	2b05      	cmp	r3, #5
 80172d0:	d13b      	bne.n	801734a <dhcp_recv+0x17a>
      dhcp_handle_ack(netif, msg_in);
 80172d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80172d4:	69f8      	ldr	r0, [r7, #28]
 80172d6:	f7fe fde1 	bl	8015e9c <dhcp_handle_ack>
      dhcp_bind(netif);
 80172da:	69f8      	ldr	r0, [r7, #28]
 80172dc:	f7ff f83c 	bl	8016358 <dhcp_bind>
 80172e0:	e033      	b.n	801734a <dhcp_recv+0x17a>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 80172e2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80172e6:	2b06      	cmp	r3, #6
 80172e8:	d113      	bne.n	8017312 <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80172ea:	69bb      	ldr	r3, [r7, #24]
 80172ec:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 80172ee:	2b03      	cmp	r3, #3
 80172f0:	d00b      	beq.n	801730a <dhcp_recv+0x13a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80172f2:	69bb      	ldr	r3, [r7, #24]
 80172f4:	795b      	ldrb	r3, [r3, #5]
 80172f6:	2b01      	cmp	r3, #1
 80172f8:	d007      	beq.n	801730a <dhcp_recv+0x13a>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 80172fa:	69bb      	ldr	r3, [r7, #24]
 80172fc:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80172fe:	2b04      	cmp	r3, #4
 8017300:	d003      	beq.n	801730a <dhcp_recv+0x13a>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8017302:	69bb      	ldr	r3, [r7, #24]
 8017304:	795b      	ldrb	r3, [r3, #5]
 8017306:	2b05      	cmp	r3, #5
 8017308:	d103      	bne.n	8017312 <dhcp_recv+0x142>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 801730a:	69f8      	ldr	r0, [r7, #28]
 801730c:	f7fe fb26 	bl	801595c <dhcp_handle_nak>
 8017310:	e01b      	b.n	801734a <dhcp_recv+0x17a>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 8017312:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8017316:	2b02      	cmp	r3, #2
 8017318:	d116      	bne.n	8017348 <dhcp_recv+0x178>
 801731a:	69bb      	ldr	r3, [r7, #24]
 801731c:	795b      	ldrb	r3, [r3, #5]
 801731e:	2b06      	cmp	r3, #6
 8017320:	d112      	bne.n	8017348 <dhcp_recv+0x178>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 8017322:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017324:	69f8      	ldr	r0, [r7, #28]
 8017326:	f7fe fb67 	bl	80159f8 <dhcp_handle_offer>
 801732a:	e00e      	b.n	801734a <dhcp_recv+0x17a>
    goto free_pbuf_and_return;
 801732c:	bf00      	nop
 801732e:	e00c      	b.n	801734a <dhcp_recv+0x17a>
    goto free_pbuf_and_return;
 8017330:	bf00      	nop
 8017332:	e00a      	b.n	801734a <dhcp_recv+0x17a>
    goto free_pbuf_and_return;
 8017334:	bf00      	nop
 8017336:	e008      	b.n	801734a <dhcp_recv+0x17a>
      goto free_pbuf_and_return;
 8017338:	bf00      	nop
 801733a:	e006      	b.n	801734a <dhcp_recv+0x17a>
    goto free_pbuf_and_return;
 801733c:	bf00      	nop
 801733e:	e004      	b.n	801734a <dhcp_recv+0x17a>
    goto free_pbuf_and_return;
 8017340:	bf00      	nop
 8017342:	e002      	b.n	801734a <dhcp_recv+0x17a>
    goto free_pbuf_and_return;
 8017344:	bf00      	nop
 8017346:	e000      	b.n	801734a <dhcp_recv+0x17a>
  }

free_pbuf_and_return:
 8017348:	bf00      	nop
  pbuf_free(p);
 801734a:	6878      	ldr	r0, [r7, #4]
 801734c:	f7f7 fd84 	bl	800ee58 <pbuf_free>
}
 8017350:	bf00      	nop
 8017352:	3728      	adds	r7, #40	; 0x28
 8017354:	46bd      	mov	sp, r7
 8017356:	bd80      	pop	{r7, pc}
 8017358:	2000a264 	.word	0x2000a264
 801735c:	20013d5c 	.word	0x20013d5c
 8017360:	20013d3c 	.word	0x20013d3c

08017364 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 8017364:	b580      	push	{r7, lr}
 8017366:	b088      	sub	sp, #32
 8017368:	af00      	add	r7, sp, #0
 801736a:	60f8      	str	r0, [r7, #12]
 801736c:	60b9      	str	r1, [r7, #8]
 801736e:	603b      	str	r3, [r7, #0]
 8017370:	4613      	mov	r3, r2
 8017372:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 8017374:	68fb      	ldr	r3, [r7, #12]
 8017376:	2b00      	cmp	r3, #0
 8017378:	d108      	bne.n	801738c <dhcp_create_msg+0x28>
 801737a:	4b5f      	ldr	r3, [pc, #380]	; (80174f8 <dhcp_create_msg+0x194>)
 801737c:	f240 7269 	movw	r2, #1897	; 0x769
 8017380:	495e      	ldr	r1, [pc, #376]	; (80174fc <dhcp_create_msg+0x198>)
 8017382:	485f      	ldr	r0, [pc, #380]	; (8017500 <dhcp_create_msg+0x19c>)
 8017384:	f003 fd24 	bl	801add0 <iprintf>
 8017388:	2300      	movs	r3, #0
 801738a:	e0b1      	b.n	80174f0 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 801738c:	68bb      	ldr	r3, [r7, #8]
 801738e:	2b00      	cmp	r3, #0
 8017390:	d108      	bne.n	80173a4 <dhcp_create_msg+0x40>
 8017392:	4b59      	ldr	r3, [pc, #356]	; (80174f8 <dhcp_create_msg+0x194>)
 8017394:	f240 726a 	movw	r2, #1898	; 0x76a
 8017398:	495a      	ldr	r1, [pc, #360]	; (8017504 <dhcp_create_msg+0x1a0>)
 801739a:	4859      	ldr	r0, [pc, #356]	; (8017500 <dhcp_create_msg+0x19c>)
 801739c:	f003 fd18 	bl	801add0 <iprintf>
 80173a0:	2300      	movs	r3, #0
 80173a2:	e0a5      	b.n	80174f0 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 80173a4:	f44f 7220 	mov.w	r2, #640	; 0x280
 80173a8:	f44f 719a 	mov.w	r1, #308	; 0x134
 80173ac:	2036      	movs	r0, #54	; 0x36
 80173ae:	f7f7 fa6b 	bl	800e888 <pbuf_alloc>
 80173b2:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 80173b4:	69bb      	ldr	r3, [r7, #24]
 80173b6:	2b00      	cmp	r3, #0
 80173b8:	d101      	bne.n	80173be <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 80173ba:	2300      	movs	r3, #0
 80173bc:	e098      	b.n	80174f0 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 80173be:	69bb      	ldr	r3, [r7, #24]
 80173c0:	895b      	ldrh	r3, [r3, #10]
 80173c2:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 80173c6:	d206      	bcs.n	80173d6 <dhcp_create_msg+0x72>
 80173c8:	4b4b      	ldr	r3, [pc, #300]	; (80174f8 <dhcp_create_msg+0x194>)
 80173ca:	f240 7271 	movw	r2, #1905	; 0x771
 80173ce:	494e      	ldr	r1, [pc, #312]	; (8017508 <dhcp_create_msg+0x1a4>)
 80173d0:	484b      	ldr	r0, [pc, #300]	; (8017500 <dhcp_create_msg+0x19c>)
 80173d2:	f003 fcfd 	bl	801add0 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 80173d6:	79fb      	ldrb	r3, [r7, #7]
 80173d8:	2b03      	cmp	r3, #3
 80173da:	d103      	bne.n	80173e4 <dhcp_create_msg+0x80>
 80173dc:	68bb      	ldr	r3, [r7, #8]
 80173de:	795b      	ldrb	r3, [r3, #5]
 80173e0:	2b03      	cmp	r3, #3
 80173e2:	d10d      	bne.n	8017400 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 80173e4:	68bb      	ldr	r3, [r7, #8]
 80173e6:	799b      	ldrb	r3, [r3, #6]
 80173e8:	2b00      	cmp	r3, #0
 80173ea:	d105      	bne.n	80173f8 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 80173ec:	f003 fd7e 	bl	801aeec <rand>
 80173f0:	4603      	mov	r3, r0
 80173f2:	461a      	mov	r2, r3
 80173f4:	4b45      	ldr	r3, [pc, #276]	; (801750c <dhcp_create_msg+0x1a8>)
 80173f6:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 80173f8:	4b44      	ldr	r3, [pc, #272]	; (801750c <dhcp_create_msg+0x1a8>)
 80173fa:	681a      	ldr	r2, [r3, #0]
 80173fc:	68bb      	ldr	r3, [r7, #8]
 80173fe:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 8017400:	69bb      	ldr	r3, [r7, #24]
 8017402:	685b      	ldr	r3, [r3, #4]
 8017404:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 8017406:	f44f 729a 	mov.w	r2, #308	; 0x134
 801740a:	2100      	movs	r1, #0
 801740c:	6978      	ldr	r0, [r7, #20]
 801740e:	f002 ff77 	bl	801a300 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 8017412:	697b      	ldr	r3, [r7, #20]
 8017414:	2201      	movs	r2, #1
 8017416:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 8017418:	697b      	ldr	r3, [r7, #20]
 801741a:	2201      	movs	r2, #1
 801741c:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 801741e:	68fb      	ldr	r3, [r7, #12]
 8017420:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8017424:	697b      	ldr	r3, [r7, #20]
 8017426:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 8017428:	68bb      	ldr	r3, [r7, #8]
 801742a:	681b      	ldr	r3, [r3, #0]
 801742c:	4618      	mov	r0, r3
 801742e:	f7f6 f806 	bl	800d43e <lwip_htonl>
 8017432:	4602      	mov	r2, r0
 8017434:	697b      	ldr	r3, [r7, #20]
 8017436:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8017438:	79fb      	ldrb	r3, [r7, #7]
 801743a:	2b08      	cmp	r3, #8
 801743c:	d010      	beq.n	8017460 <dhcp_create_msg+0xfc>
 801743e:	79fb      	ldrb	r3, [r7, #7]
 8017440:	2b04      	cmp	r3, #4
 8017442:	d00d      	beq.n	8017460 <dhcp_create_msg+0xfc>
 8017444:	79fb      	ldrb	r3, [r7, #7]
 8017446:	2b07      	cmp	r3, #7
 8017448:	d00a      	beq.n	8017460 <dhcp_create_msg+0xfc>
 801744a:	79fb      	ldrb	r3, [r7, #7]
 801744c:	2b03      	cmp	r3, #3
 801744e:	d10c      	bne.n	801746a <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8017450:	68bb      	ldr	r3, [r7, #8]
 8017452:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8017454:	2b05      	cmp	r3, #5
 8017456:	d003      	beq.n	8017460 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8017458:	68bb      	ldr	r3, [r7, #8]
 801745a:	795b      	ldrb	r3, [r3, #5]
 801745c:	2b04      	cmp	r3, #4
 801745e:	d104      	bne.n	801746a <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 8017460:	68fb      	ldr	r3, [r7, #12]
 8017462:	3304      	adds	r3, #4
 8017464:	681a      	ldr	r2, [r3, #0]
 8017466:	697b      	ldr	r3, [r7, #20]
 8017468:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801746a:	2300      	movs	r3, #0
 801746c:	83fb      	strh	r3, [r7, #30]
 801746e:	e00c      	b.n	801748a <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 8017470:	8bfa      	ldrh	r2, [r7, #30]
 8017472:	8bfb      	ldrh	r3, [r7, #30]
 8017474:	68f9      	ldr	r1, [r7, #12]
 8017476:	440a      	add	r2, r1
 8017478:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 801747c:	697a      	ldr	r2, [r7, #20]
 801747e:	4413      	add	r3, r2
 8017480:	460a      	mov	r2, r1
 8017482:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8017484:	8bfb      	ldrh	r3, [r7, #30]
 8017486:	3301      	adds	r3, #1
 8017488:	83fb      	strh	r3, [r7, #30]
 801748a:	8bfb      	ldrh	r3, [r7, #30]
 801748c:	2b05      	cmp	r3, #5
 801748e:	d9ef      	bls.n	8017470 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8017490:	697b      	ldr	r3, [r7, #20]
 8017492:	2200      	movs	r2, #0
 8017494:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8017498:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 801749c:	2200      	movs	r2, #0
 801749e:	f062 027d 	orn	r2, r2, #125	; 0x7d
 80174a2:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 80174a6:	2200      	movs	r2, #0
 80174a8:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 80174ac:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 80174b0:	2200      	movs	r2, #0
 80174b2:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 80174b6:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 80174ba:	697b      	ldr	r3, [r7, #20]
 80174bc:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80174c0:	2301      	movs	r3, #1
 80174c2:	2235      	movs	r2, #53	; 0x35
 80174c4:	2000      	movs	r0, #0
 80174c6:	f7ff facf 	bl	8016a68 <dhcp_option>
 80174ca:	4603      	mov	r3, r0
 80174cc:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 80174ce:	697b      	ldr	r3, [r7, #20]
 80174d0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80174d4:	79fa      	ldrb	r2, [r7, #7]
 80174d6:	8a7b      	ldrh	r3, [r7, #18]
 80174d8:	4618      	mov	r0, r3
 80174da:	f7ff faf9 	bl	8016ad0 <dhcp_option_byte>
 80174de:	4603      	mov	r3, r0
 80174e0:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 80174e2:	683b      	ldr	r3, [r7, #0]
 80174e4:	2b00      	cmp	r3, #0
 80174e6:	d002      	beq.n	80174ee <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 80174e8:	683b      	ldr	r3, [r7, #0]
 80174ea:	8a7a      	ldrh	r2, [r7, #18]
 80174ec:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 80174ee:	69bb      	ldr	r3, [r7, #24]
}
 80174f0:	4618      	mov	r0, r3
 80174f2:	3720      	adds	r7, #32
 80174f4:	46bd      	mov	sp, r7
 80174f6:	bd80      	pop	{r7, pc}
 80174f8:	0801ffa8 	.word	0x0801ffa8
 80174fc:	080202c8 	.word	0x080202c8
 8017500:	08020008 	.word	0x08020008
 8017504:	080202e8 	.word	0x080202e8
 8017508:	08020308 	.word	0x08020308
 801750c:	20013d6c 	.word	0x20013d6c

08017510 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 8017510:	b580      	push	{r7, lr}
 8017512:	b084      	sub	sp, #16
 8017514:	af00      	add	r7, sp, #0
 8017516:	4603      	mov	r3, r0
 8017518:	60b9      	str	r1, [r7, #8]
 801751a:	607a      	str	r2, [r7, #4]
 801751c:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 801751e:	89fb      	ldrh	r3, [r7, #14]
 8017520:	1c5a      	adds	r2, r3, #1
 8017522:	81fa      	strh	r2, [r7, #14]
 8017524:	461a      	mov	r2, r3
 8017526:	68bb      	ldr	r3, [r7, #8]
 8017528:	4413      	add	r3, r2
 801752a:	22ff      	movs	r2, #255	; 0xff
 801752c:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801752e:	e007      	b.n	8017540 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 8017530:	89fb      	ldrh	r3, [r7, #14]
 8017532:	1c5a      	adds	r2, r3, #1
 8017534:	81fa      	strh	r2, [r7, #14]
 8017536:	461a      	mov	r2, r3
 8017538:	68bb      	ldr	r3, [r7, #8]
 801753a:	4413      	add	r3, r2
 801753c:	2200      	movs	r2, #0
 801753e:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8017540:	89fb      	ldrh	r3, [r7, #14]
 8017542:	2b43      	cmp	r3, #67	; 0x43
 8017544:	d904      	bls.n	8017550 <dhcp_option_trailer+0x40>
 8017546:	89fb      	ldrh	r3, [r7, #14]
 8017548:	f003 0303 	and.w	r3, r3, #3
 801754c:	2b00      	cmp	r3, #0
 801754e:	d002      	beq.n	8017556 <dhcp_option_trailer+0x46>
 8017550:	89fb      	ldrh	r3, [r7, #14]
 8017552:	2b43      	cmp	r3, #67	; 0x43
 8017554:	d9ec      	bls.n	8017530 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8017556:	89fb      	ldrh	r3, [r7, #14]
 8017558:	33f0      	adds	r3, #240	; 0xf0
 801755a:	b29b      	uxth	r3, r3
 801755c:	4619      	mov	r1, r3
 801755e:	6878      	ldr	r0, [r7, #4]
 8017560:	f7f7 faf4 	bl	800eb4c <pbuf_realloc>
}
 8017564:	bf00      	nop
 8017566:	3710      	adds	r7, #16
 8017568:	46bd      	mov	sp, r7
 801756a:	bd80      	pop	{r7, pc}

0801756c <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 801756c:	b480      	push	{r7}
 801756e:	b085      	sub	sp, #20
 8017570:	af00      	add	r7, sp, #0
 8017572:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 8017574:	687b      	ldr	r3, [r7, #4]
 8017576:	2b00      	cmp	r3, #0
 8017578:	d017      	beq.n	80175aa <dhcp_supplied_address+0x3e>
 801757a:	687b      	ldr	r3, [r7, #4]
 801757c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801757e:	2b00      	cmp	r3, #0
 8017580:	d013      	beq.n	80175aa <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8017582:	687b      	ldr	r3, [r7, #4]
 8017584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017586:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8017588:	68fb      	ldr	r3, [r7, #12]
 801758a:	795b      	ldrb	r3, [r3, #5]
 801758c:	2b0a      	cmp	r3, #10
 801758e:	d007      	beq.n	80175a0 <dhcp_supplied_address+0x34>
 8017590:	68fb      	ldr	r3, [r7, #12]
 8017592:	795b      	ldrb	r3, [r3, #5]
 8017594:	2b05      	cmp	r3, #5
 8017596:	d003      	beq.n	80175a0 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 8017598:	68fb      	ldr	r3, [r7, #12]
 801759a:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 801759c:	2b04      	cmp	r3, #4
 801759e:	d101      	bne.n	80175a4 <dhcp_supplied_address+0x38>
 80175a0:	2301      	movs	r3, #1
 80175a2:	e000      	b.n	80175a6 <dhcp_supplied_address+0x3a>
 80175a4:	2300      	movs	r3, #0
 80175a6:	b2db      	uxtb	r3, r3
 80175a8:	e000      	b.n	80175ac <dhcp_supplied_address+0x40>
  }
  return 0;
 80175aa:	2300      	movs	r3, #0
}
 80175ac:	4618      	mov	r0, r3
 80175ae:	3714      	adds	r7, #20
 80175b0:	46bd      	mov	sp, r7
 80175b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175b6:	4770      	bx	lr

080175b8 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80175b8:	b580      	push	{r7, lr}
 80175ba:	b082      	sub	sp, #8
 80175bc:	af00      	add	r7, sp, #0
 80175be:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80175c0:	492b      	ldr	r1, [pc, #172]	; (8017670 <etharp_free_entry+0xb8>)
 80175c2:	687a      	ldr	r2, [r7, #4]
 80175c4:	4613      	mov	r3, r2
 80175c6:	005b      	lsls	r3, r3, #1
 80175c8:	4413      	add	r3, r2
 80175ca:	00db      	lsls	r3, r3, #3
 80175cc:	440b      	add	r3, r1
 80175ce:	681b      	ldr	r3, [r3, #0]
 80175d0:	2b00      	cmp	r3, #0
 80175d2:	d013      	beq.n	80175fc <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80175d4:	4926      	ldr	r1, [pc, #152]	; (8017670 <etharp_free_entry+0xb8>)
 80175d6:	687a      	ldr	r2, [r7, #4]
 80175d8:	4613      	mov	r3, r2
 80175da:	005b      	lsls	r3, r3, #1
 80175dc:	4413      	add	r3, r2
 80175de:	00db      	lsls	r3, r3, #3
 80175e0:	440b      	add	r3, r1
 80175e2:	681b      	ldr	r3, [r3, #0]
 80175e4:	4618      	mov	r0, r3
 80175e6:	f7f7 fc37 	bl	800ee58 <pbuf_free>
    arp_table[i].q = NULL;
 80175ea:	4921      	ldr	r1, [pc, #132]	; (8017670 <etharp_free_entry+0xb8>)
 80175ec:	687a      	ldr	r2, [r7, #4]
 80175ee:	4613      	mov	r3, r2
 80175f0:	005b      	lsls	r3, r3, #1
 80175f2:	4413      	add	r3, r2
 80175f4:	00db      	lsls	r3, r3, #3
 80175f6:	440b      	add	r3, r1
 80175f8:	2200      	movs	r2, #0
 80175fa:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80175fc:	491c      	ldr	r1, [pc, #112]	; (8017670 <etharp_free_entry+0xb8>)
 80175fe:	687a      	ldr	r2, [r7, #4]
 8017600:	4613      	mov	r3, r2
 8017602:	005b      	lsls	r3, r3, #1
 8017604:	4413      	add	r3, r2
 8017606:	00db      	lsls	r3, r3, #3
 8017608:	440b      	add	r3, r1
 801760a:	3314      	adds	r3, #20
 801760c:	2200      	movs	r2, #0
 801760e:	701a      	strb	r2, [r3, #0]
#ifdef LWIP_DEBUG
  /* for debugging, clean out the complete entry */
  arp_table[i].ctime = 0;
 8017610:	4917      	ldr	r1, [pc, #92]	; (8017670 <etharp_free_entry+0xb8>)
 8017612:	687a      	ldr	r2, [r7, #4]
 8017614:	4613      	mov	r3, r2
 8017616:	005b      	lsls	r3, r3, #1
 8017618:	4413      	add	r3, r2
 801761a:	00db      	lsls	r3, r3, #3
 801761c:	440b      	add	r3, r1
 801761e:	3312      	adds	r3, #18
 8017620:	2200      	movs	r2, #0
 8017622:	801a      	strh	r2, [r3, #0]
  arp_table[i].netif = NULL;
 8017624:	4912      	ldr	r1, [pc, #72]	; (8017670 <etharp_free_entry+0xb8>)
 8017626:	687a      	ldr	r2, [r7, #4]
 8017628:	4613      	mov	r3, r2
 801762a:	005b      	lsls	r3, r3, #1
 801762c:	4413      	add	r3, r2
 801762e:	00db      	lsls	r3, r3, #3
 8017630:	440b      	add	r3, r1
 8017632:	3308      	adds	r3, #8
 8017634:	2200      	movs	r2, #0
 8017636:	601a      	str	r2, [r3, #0]
  ip4_addr_set_zero(&arp_table[i].ipaddr);
 8017638:	490d      	ldr	r1, [pc, #52]	; (8017670 <etharp_free_entry+0xb8>)
 801763a:	687a      	ldr	r2, [r7, #4]
 801763c:	4613      	mov	r3, r2
 801763e:	005b      	lsls	r3, r3, #1
 8017640:	4413      	add	r3, r2
 8017642:	00db      	lsls	r3, r3, #3
 8017644:	440b      	add	r3, r1
 8017646:	3304      	adds	r3, #4
 8017648:	2200      	movs	r2, #0
 801764a:	601a      	str	r2, [r3, #0]
  arp_table[i].ethaddr = ethzero;
 801764c:	4908      	ldr	r1, [pc, #32]	; (8017670 <etharp_free_entry+0xb8>)
 801764e:	687a      	ldr	r2, [r7, #4]
 8017650:	4613      	mov	r3, r2
 8017652:	005b      	lsls	r3, r3, #1
 8017654:	4413      	add	r3, r2
 8017656:	00db      	lsls	r3, r3, #3
 8017658:	440b      	add	r3, r1
 801765a:	3308      	adds	r3, #8
 801765c:	4a05      	ldr	r2, [pc, #20]	; (8017674 <etharp_free_entry+0xbc>)
 801765e:	3304      	adds	r3, #4
 8017660:	6810      	ldr	r0, [r2, #0]
 8017662:	6018      	str	r0, [r3, #0]
 8017664:	8892      	ldrh	r2, [r2, #4]
 8017666:	809a      	strh	r2, [r3, #4]
#endif /* LWIP_DEBUG */
}
 8017668:	bf00      	nop
 801766a:	3708      	adds	r7, #8
 801766c:	46bd      	mov	sp, r7
 801766e:	bd80      	pop	{r7, pc}
 8017670:	20013d70 	.word	0x20013d70
 8017674:	0806c880 	.word	0x0806c880

08017678 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8017678:	b580      	push	{r7, lr}
 801767a:	b082      	sub	sp, #8
 801767c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801767e:	2300      	movs	r3, #0
 8017680:	607b      	str	r3, [r7, #4]
 8017682:	e09a      	b.n	80177ba <etharp_tmr+0x142>
    u8_t state = arp_table[i].state;
 8017684:	4951      	ldr	r1, [pc, #324]	; (80177cc <etharp_tmr+0x154>)
 8017686:	687a      	ldr	r2, [r7, #4]
 8017688:	4613      	mov	r3, r2
 801768a:	005b      	lsls	r3, r3, #1
 801768c:	4413      	add	r3, r2
 801768e:	00db      	lsls	r3, r3, #3
 8017690:	440b      	add	r3, r1
 8017692:	3314      	adds	r3, #20
 8017694:	781b      	ldrb	r3, [r3, #0]
 8017696:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8017698:	78fb      	ldrb	r3, [r7, #3]
 801769a:	2b00      	cmp	r3, #0
 801769c:	f000 808a 	beq.w	80177b4 <etharp_tmr+0x13c>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
 80176a0:	78fb      	ldrb	r3, [r7, #3]
 80176a2:	2b05      	cmp	r3, #5
 80176a4:	f000 8086 	beq.w	80177b4 <etharp_tmr+0x13c>
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 80176a8:	4948      	ldr	r1, [pc, #288]	; (80177cc <etharp_tmr+0x154>)
 80176aa:	687a      	ldr	r2, [r7, #4]
 80176ac:	4613      	mov	r3, r2
 80176ae:	005b      	lsls	r3, r3, #1
 80176b0:	4413      	add	r3, r2
 80176b2:	00db      	lsls	r3, r3, #3
 80176b4:	440b      	add	r3, r1
 80176b6:	3312      	adds	r3, #18
 80176b8:	881b      	ldrh	r3, [r3, #0]
 80176ba:	3301      	adds	r3, #1
 80176bc:	b298      	uxth	r0, r3
 80176be:	4943      	ldr	r1, [pc, #268]	; (80177cc <etharp_tmr+0x154>)
 80176c0:	687a      	ldr	r2, [r7, #4]
 80176c2:	4613      	mov	r3, r2
 80176c4:	005b      	lsls	r3, r3, #1
 80176c6:	4413      	add	r3, r2
 80176c8:	00db      	lsls	r3, r3, #3
 80176ca:	440b      	add	r3, r1
 80176cc:	3312      	adds	r3, #18
 80176ce:	4602      	mov	r2, r0
 80176d0:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80176d2:	493e      	ldr	r1, [pc, #248]	; (80177cc <etharp_tmr+0x154>)
 80176d4:	687a      	ldr	r2, [r7, #4]
 80176d6:	4613      	mov	r3, r2
 80176d8:	005b      	lsls	r3, r3, #1
 80176da:	4413      	add	r3, r2
 80176dc:	00db      	lsls	r3, r3, #3
 80176de:	440b      	add	r3, r1
 80176e0:	3312      	adds	r3, #18
 80176e2:	881b      	ldrh	r3, [r3, #0]
 80176e4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80176e8:	d215      	bcs.n	8017716 <etharp_tmr+0x9e>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80176ea:	4938      	ldr	r1, [pc, #224]	; (80177cc <etharp_tmr+0x154>)
 80176ec:	687a      	ldr	r2, [r7, #4]
 80176ee:	4613      	mov	r3, r2
 80176f0:	005b      	lsls	r3, r3, #1
 80176f2:	4413      	add	r3, r2
 80176f4:	00db      	lsls	r3, r3, #3
 80176f6:	440b      	add	r3, r1
 80176f8:	3314      	adds	r3, #20
 80176fa:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80176fc:	2b01      	cmp	r3, #1
 80176fe:	d10e      	bne.n	801771e <etharp_tmr+0xa6>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8017700:	4932      	ldr	r1, [pc, #200]	; (80177cc <etharp_tmr+0x154>)
 8017702:	687a      	ldr	r2, [r7, #4]
 8017704:	4613      	mov	r3, r2
 8017706:	005b      	lsls	r3, r3, #1
 8017708:	4413      	add	r3, r2
 801770a:	00db      	lsls	r3, r3, #3
 801770c:	440b      	add	r3, r1
 801770e:	3312      	adds	r3, #18
 8017710:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8017712:	2b04      	cmp	r3, #4
 8017714:	d903      	bls.n	801771e <etharp_tmr+0xa6>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8017716:	6878      	ldr	r0, [r7, #4]
 8017718:	f7ff ff4e 	bl	80175b8 <etharp_free_entry>
 801771c:	e04a      	b.n	80177b4 <etharp_tmr+0x13c>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801771e:	492b      	ldr	r1, [pc, #172]	; (80177cc <etharp_tmr+0x154>)
 8017720:	687a      	ldr	r2, [r7, #4]
 8017722:	4613      	mov	r3, r2
 8017724:	005b      	lsls	r3, r3, #1
 8017726:	4413      	add	r3, r2
 8017728:	00db      	lsls	r3, r3, #3
 801772a:	440b      	add	r3, r1
 801772c:	3314      	adds	r3, #20
 801772e:	781b      	ldrb	r3, [r3, #0]
 8017730:	2b03      	cmp	r3, #3
 8017732:	d10a      	bne.n	801774a <etharp_tmr+0xd2>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8017734:	4925      	ldr	r1, [pc, #148]	; (80177cc <etharp_tmr+0x154>)
 8017736:	687a      	ldr	r2, [r7, #4]
 8017738:	4613      	mov	r3, r2
 801773a:	005b      	lsls	r3, r3, #1
 801773c:	4413      	add	r3, r2
 801773e:	00db      	lsls	r3, r3, #3
 8017740:	440b      	add	r3, r1
 8017742:	3314      	adds	r3, #20
 8017744:	2204      	movs	r2, #4
 8017746:	701a      	strb	r2, [r3, #0]
 8017748:	e034      	b.n	80177b4 <etharp_tmr+0x13c>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801774a:	4920      	ldr	r1, [pc, #128]	; (80177cc <etharp_tmr+0x154>)
 801774c:	687a      	ldr	r2, [r7, #4]
 801774e:	4613      	mov	r3, r2
 8017750:	005b      	lsls	r3, r3, #1
 8017752:	4413      	add	r3, r2
 8017754:	00db      	lsls	r3, r3, #3
 8017756:	440b      	add	r3, r1
 8017758:	3314      	adds	r3, #20
 801775a:	781b      	ldrb	r3, [r3, #0]
 801775c:	2b04      	cmp	r3, #4
 801775e:	d10a      	bne.n	8017776 <etharp_tmr+0xfe>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8017760:	491a      	ldr	r1, [pc, #104]	; (80177cc <etharp_tmr+0x154>)
 8017762:	687a      	ldr	r2, [r7, #4]
 8017764:	4613      	mov	r3, r2
 8017766:	005b      	lsls	r3, r3, #1
 8017768:	4413      	add	r3, r2
 801776a:	00db      	lsls	r3, r3, #3
 801776c:	440b      	add	r3, r1
 801776e:	3314      	adds	r3, #20
 8017770:	2202      	movs	r2, #2
 8017772:	701a      	strb	r2, [r3, #0]
 8017774:	e01e      	b.n	80177b4 <etharp_tmr+0x13c>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8017776:	4915      	ldr	r1, [pc, #84]	; (80177cc <etharp_tmr+0x154>)
 8017778:	687a      	ldr	r2, [r7, #4]
 801777a:	4613      	mov	r3, r2
 801777c:	005b      	lsls	r3, r3, #1
 801777e:	4413      	add	r3, r2
 8017780:	00db      	lsls	r3, r3, #3
 8017782:	440b      	add	r3, r1
 8017784:	3314      	adds	r3, #20
 8017786:	781b      	ldrb	r3, [r3, #0]
 8017788:	2b01      	cmp	r3, #1
 801778a:	d113      	bne.n	80177b4 <etharp_tmr+0x13c>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801778c:	490f      	ldr	r1, [pc, #60]	; (80177cc <etharp_tmr+0x154>)
 801778e:	687a      	ldr	r2, [r7, #4]
 8017790:	4613      	mov	r3, r2
 8017792:	005b      	lsls	r3, r3, #1
 8017794:	4413      	add	r3, r2
 8017796:	00db      	lsls	r3, r3, #3
 8017798:	440b      	add	r3, r1
 801779a:	3308      	adds	r3, #8
 801779c:	6818      	ldr	r0, [r3, #0]
 801779e:	687a      	ldr	r2, [r7, #4]
 80177a0:	4613      	mov	r3, r2
 80177a2:	005b      	lsls	r3, r3, #1
 80177a4:	4413      	add	r3, r2
 80177a6:	00db      	lsls	r3, r3, #3
 80177a8:	4a08      	ldr	r2, [pc, #32]	; (80177cc <etharp_tmr+0x154>)
 80177aa:	4413      	add	r3, r2
 80177ac:	3304      	adds	r3, #4
 80177ae:	4619      	mov	r1, r3
 80177b0:	f000 feae 	bl	8018510 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80177b4:	687b      	ldr	r3, [r7, #4]
 80177b6:	3301      	adds	r3, #1
 80177b8:	607b      	str	r3, [r7, #4]
 80177ba:	687b      	ldr	r3, [r7, #4]
 80177bc:	2b09      	cmp	r3, #9
 80177be:	f77f af61 	ble.w	8017684 <etharp_tmr+0xc>
      }
    }
  }
}
 80177c2:	bf00      	nop
 80177c4:	bf00      	nop
 80177c6:	3708      	adds	r7, #8
 80177c8:	46bd      	mov	sp, r7
 80177ca:	bd80      	pop	{r7, pc}
 80177cc:	20013d70 	.word	0x20013d70

080177d0 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80177d0:	b580      	push	{r7, lr}
 80177d2:	b08a      	sub	sp, #40	; 0x28
 80177d4:	af00      	add	r7, sp, #0
 80177d6:	60f8      	str	r0, [r7, #12]
 80177d8:	460b      	mov	r3, r1
 80177da:	607a      	str	r2, [r7, #4]
 80177dc:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80177de:	230a      	movs	r3, #10
 80177e0:	843b      	strh	r3, [r7, #32]
 80177e2:	230a      	movs	r3, #10
 80177e4:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t empty = ARP_TABLE_SIZE;
 80177e6:	230a      	movs	r3, #10
 80177e8:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t i = 0;
 80177ea:	2300      	movs	r3, #0
 80177ec:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 80177ee:	230a      	movs	r3, #10
 80177f0:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80177f2:	2300      	movs	r3, #0
 80177f4:	83bb      	strh	r3, [r7, #28]
 80177f6:	2300      	movs	r3, #0
 80177f8:	837b      	strh	r3, [r7, #26]
 80177fa:	2300      	movs	r3, #0
 80177fc:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80177fe:	2300      	movs	r3, #0
 8017800:	84fb      	strh	r3, [r7, #38]	; 0x26
 8017802:	e0b1      	b.n	8017968 <etharp_find_entry+0x198>
    u8_t state = arp_table[i].state;
 8017804:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8017808:	49a7      	ldr	r1, [pc, #668]	; (8017aa8 <etharp_find_entry+0x2d8>)
 801780a:	4613      	mov	r3, r2
 801780c:	005b      	lsls	r3, r3, #1
 801780e:	4413      	add	r3, r2
 8017810:	00db      	lsls	r3, r3, #3
 8017812:	440b      	add	r3, r1
 8017814:	3314      	adds	r3, #20
 8017816:	781b      	ldrb	r3, [r3, #0]
 8017818:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801781a:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 801781e:	2b0a      	cmp	r3, #10
 8017820:	d105      	bne.n	801782e <etharp_find_entry+0x5e>
 8017822:	7dfb      	ldrb	r3, [r7, #23]
 8017824:	2b00      	cmp	r3, #0
 8017826:	d102      	bne.n	801782e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8017828:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801782a:	84bb      	strh	r3, [r7, #36]	; 0x24
 801782c:	e098      	b.n	8017960 <etharp_find_entry+0x190>
    } else if (state != ETHARP_STATE_EMPTY) {
 801782e:	7dfb      	ldrb	r3, [r7, #23]
 8017830:	2b00      	cmp	r3, #0
 8017832:	f000 8095 	beq.w	8017960 <etharp_find_entry+0x190>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8017836:	7dfb      	ldrb	r3, [r7, #23]
 8017838:	2b01      	cmp	r3, #1
 801783a:	d009      	beq.n	8017850 <etharp_find_entry+0x80>
 801783c:	7dfb      	ldrb	r3, [r7, #23]
 801783e:	2b01      	cmp	r3, #1
 8017840:	d806      	bhi.n	8017850 <etharp_find_entry+0x80>
 8017842:	4b9a      	ldr	r3, [pc, #616]	; (8017aac <etharp_find_entry+0x2dc>)
 8017844:	f240 1223 	movw	r2, #291	; 0x123
 8017848:	4999      	ldr	r1, [pc, #612]	; (8017ab0 <etharp_find_entry+0x2e0>)
 801784a:	489a      	ldr	r0, [pc, #616]	; (8017ab4 <etharp_find_entry+0x2e4>)
 801784c:	f003 fac0 	bl	801add0 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8017850:	68fb      	ldr	r3, [r7, #12]
 8017852:	2b00      	cmp	r3, #0
 8017854:	d020      	beq.n	8017898 <etharp_find_entry+0xc8>
 8017856:	68fb      	ldr	r3, [r7, #12]
 8017858:	6819      	ldr	r1, [r3, #0]
 801785a:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 801785e:	4892      	ldr	r0, [pc, #584]	; (8017aa8 <etharp_find_entry+0x2d8>)
 8017860:	4613      	mov	r3, r2
 8017862:	005b      	lsls	r3, r3, #1
 8017864:	4413      	add	r3, r2
 8017866:	00db      	lsls	r3, r3, #3
 8017868:	4403      	add	r3, r0
 801786a:	3304      	adds	r3, #4
 801786c:	681b      	ldr	r3, [r3, #0]
 801786e:	4299      	cmp	r1, r3
 8017870:	d112      	bne.n	8017898 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8017872:	687b      	ldr	r3, [r7, #4]
 8017874:	2b00      	cmp	r3, #0
 8017876:	d00c      	beq.n	8017892 <etharp_find_entry+0xc2>
 8017878:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 801787c:	498a      	ldr	r1, [pc, #552]	; (8017aa8 <etharp_find_entry+0x2d8>)
 801787e:	4613      	mov	r3, r2
 8017880:	005b      	lsls	r3, r3, #1
 8017882:	4413      	add	r3, r2
 8017884:	00db      	lsls	r3, r3, #3
 8017886:	440b      	add	r3, r1
 8017888:	3308      	adds	r3, #8
 801788a:	681b      	ldr	r3, [r3, #0]
 801788c:	687a      	ldr	r2, [r7, #4]
 801788e:	429a      	cmp	r2, r3
 8017890:	d102      	bne.n	8017898 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8017892:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8017896:	e103      	b.n	8017aa0 <etharp_find_entry+0x2d0>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8017898:	7dfb      	ldrb	r3, [r7, #23]
 801789a:	2b01      	cmp	r3, #1
 801789c:	d140      	bne.n	8017920 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801789e:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 80178a2:	4981      	ldr	r1, [pc, #516]	; (8017aa8 <etharp_find_entry+0x2d8>)
 80178a4:	4613      	mov	r3, r2
 80178a6:	005b      	lsls	r3, r3, #1
 80178a8:	4413      	add	r3, r2
 80178aa:	00db      	lsls	r3, r3, #3
 80178ac:	440b      	add	r3, r1
 80178ae:	681b      	ldr	r3, [r3, #0]
 80178b0:	2b00      	cmp	r3, #0
 80178b2:	d01a      	beq.n	80178ea <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 80178b4:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 80178b8:	497b      	ldr	r1, [pc, #492]	; (8017aa8 <etharp_find_entry+0x2d8>)
 80178ba:	4613      	mov	r3, r2
 80178bc:	005b      	lsls	r3, r3, #1
 80178be:	4413      	add	r3, r2
 80178c0:	00db      	lsls	r3, r3, #3
 80178c2:	440b      	add	r3, r1
 80178c4:	3312      	adds	r3, #18
 80178c6:	881b      	ldrh	r3, [r3, #0]
 80178c8:	8bba      	ldrh	r2, [r7, #28]
 80178ca:	429a      	cmp	r2, r3
 80178cc:	d848      	bhi.n	8017960 <etharp_find_entry+0x190>
            old_queue = i;
 80178ce:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80178d0:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 80178d2:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 80178d6:	4974      	ldr	r1, [pc, #464]	; (8017aa8 <etharp_find_entry+0x2d8>)
 80178d8:	4613      	mov	r3, r2
 80178da:	005b      	lsls	r3, r3, #1
 80178dc:	4413      	add	r3, r2
 80178de:	00db      	lsls	r3, r3, #3
 80178e0:	440b      	add	r3, r1
 80178e2:	3312      	adds	r3, #18
 80178e4:	881b      	ldrh	r3, [r3, #0]
 80178e6:	83bb      	strh	r3, [r7, #28]
 80178e8:	e03a      	b.n	8017960 <etharp_find_entry+0x190>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 80178ea:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 80178ee:	496e      	ldr	r1, [pc, #440]	; (8017aa8 <etharp_find_entry+0x2d8>)
 80178f0:	4613      	mov	r3, r2
 80178f2:	005b      	lsls	r3, r3, #1
 80178f4:	4413      	add	r3, r2
 80178f6:	00db      	lsls	r3, r3, #3
 80178f8:	440b      	add	r3, r1
 80178fa:	3312      	adds	r3, #18
 80178fc:	881b      	ldrh	r3, [r3, #0]
 80178fe:	8b7a      	ldrh	r2, [r7, #26]
 8017900:	429a      	cmp	r2, r3
 8017902:	d82d      	bhi.n	8017960 <etharp_find_entry+0x190>
            old_pending = i;
 8017904:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8017906:	843b      	strh	r3, [r7, #32]
            age_pending = arp_table[i].ctime;
 8017908:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 801790c:	4966      	ldr	r1, [pc, #408]	; (8017aa8 <etharp_find_entry+0x2d8>)
 801790e:	4613      	mov	r3, r2
 8017910:	005b      	lsls	r3, r3, #1
 8017912:	4413      	add	r3, r2
 8017914:	00db      	lsls	r3, r3, #3
 8017916:	440b      	add	r3, r1
 8017918:	3312      	adds	r3, #18
 801791a:	881b      	ldrh	r3, [r3, #0]
 801791c:	837b      	strh	r3, [r7, #26]
 801791e:	e01f      	b.n	8017960 <etharp_find_entry+0x190>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8017920:	7dfb      	ldrb	r3, [r7, #23]
 8017922:	2b01      	cmp	r3, #1
 8017924:	d91c      	bls.n	8017960 <etharp_find_entry+0x190>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
 8017926:	7dfb      	ldrb	r3, [r7, #23]
 8017928:	2b04      	cmp	r3, #4
 801792a:	d819      	bhi.n	8017960 <etharp_find_entry+0x190>
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801792c:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8017930:	495d      	ldr	r1, [pc, #372]	; (8017aa8 <etharp_find_entry+0x2d8>)
 8017932:	4613      	mov	r3, r2
 8017934:	005b      	lsls	r3, r3, #1
 8017936:	4413      	add	r3, r2
 8017938:	00db      	lsls	r3, r3, #3
 801793a:	440b      	add	r3, r1
 801793c:	3312      	adds	r3, #18
 801793e:	881b      	ldrh	r3, [r3, #0]
 8017940:	8b3a      	ldrh	r2, [r7, #24]
 8017942:	429a      	cmp	r2, r3
 8017944:	d80c      	bhi.n	8017960 <etharp_find_entry+0x190>
            old_stable = i;
 8017946:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8017948:	847b      	strh	r3, [r7, #34]	; 0x22
            age_stable = arp_table[i].ctime;
 801794a:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 801794e:	4956      	ldr	r1, [pc, #344]	; (8017aa8 <etharp_find_entry+0x2d8>)
 8017950:	4613      	mov	r3, r2
 8017952:	005b      	lsls	r3, r3, #1
 8017954:	4413      	add	r3, r2
 8017956:	00db      	lsls	r3, r3, #3
 8017958:	440b      	add	r3, r1
 801795a:	3312      	adds	r3, #18
 801795c:	881b      	ldrh	r3, [r3, #0]
 801795e:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8017960:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8017962:	3301      	adds	r3, #1
 8017964:	b29b      	uxth	r3, r3
 8017966:	84fb      	strh	r3, [r7, #38]	; 0x26
 8017968:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801796c:	2b09      	cmp	r3, #9
 801796e:	f77f af49 	ble.w	8017804 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8017972:	7afb      	ldrb	r3, [r7, #11]
 8017974:	f003 0302 	and.w	r3, r3, #2
 8017978:	2b00      	cmp	r3, #0
 801797a:	d108      	bne.n	801798e <etharp_find_entry+0x1be>
 801797c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8017980:	2b0a      	cmp	r3, #10
 8017982:	d107      	bne.n	8017994 <etharp_find_entry+0x1c4>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8017984:	7afb      	ldrb	r3, [r7, #11]
 8017986:	f003 0301 	and.w	r3, r3, #1
 801798a:	2b00      	cmp	r3, #0
 801798c:	d102      	bne.n	8017994 <etharp_find_entry+0x1c4>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 801798e:	f04f 33ff 	mov.w	r3, #4294967295
 8017992:	e085      	b.n	8017aa0 <etharp_find_entry+0x2d0>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8017994:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8017998:	2b09      	cmp	r3, #9
 801799a:	dc02      	bgt.n	80179a2 <etharp_find_entry+0x1d2>
    i = empty;
 801799c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801799e:	84fb      	strh	r3, [r7, #38]	; 0x26
 80179a0:	e039      	b.n	8017a16 <etharp_find_entry+0x246>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80179a2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80179a6:	2b09      	cmp	r3, #9
 80179a8:	dc14      	bgt.n	80179d4 <etharp_find_entry+0x204>
      /* recycle oldest stable*/
      i = old_stable;
 80179aa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80179ac:	84fb      	strh	r3, [r7, #38]	; 0x26
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80179ae:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 80179b2:	493d      	ldr	r1, [pc, #244]	; (8017aa8 <etharp_find_entry+0x2d8>)
 80179b4:	4613      	mov	r3, r2
 80179b6:	005b      	lsls	r3, r3, #1
 80179b8:	4413      	add	r3, r2
 80179ba:	00db      	lsls	r3, r3, #3
 80179bc:	440b      	add	r3, r1
 80179be:	681b      	ldr	r3, [r3, #0]
 80179c0:	2b00      	cmp	r3, #0
 80179c2:	d018      	beq.n	80179f6 <etharp_find_entry+0x226>
 80179c4:	4b39      	ldr	r3, [pc, #228]	; (8017aac <etharp_find_entry+0x2dc>)
 80179c6:	f240 126d 	movw	r2, #365	; 0x16d
 80179ca:	493b      	ldr	r1, [pc, #236]	; (8017ab8 <etharp_find_entry+0x2e8>)
 80179cc:	4839      	ldr	r0, [pc, #228]	; (8017ab4 <etharp_find_entry+0x2e4>)
 80179ce:	f003 f9ff 	bl	801add0 <iprintf>
 80179d2:	e010      	b.n	80179f6 <etharp_find_entry+0x226>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80179d4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80179d8:	2b09      	cmp	r3, #9
 80179da:	dc02      	bgt.n	80179e2 <etharp_find_entry+0x212>
      /* recycle oldest pending */
      i = old_pending;
 80179dc:	8c3b      	ldrh	r3, [r7, #32]
 80179de:	84fb      	strh	r3, [r7, #38]	; 0x26
 80179e0:	e009      	b.n	80179f6 <etharp_find_entry+0x226>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80179e2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80179e6:	2b09      	cmp	r3, #9
 80179e8:	dc02      	bgt.n	80179f0 <etharp_find_entry+0x220>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 80179ea:	8bfb      	ldrh	r3, [r7, #30]
 80179ec:	84fb      	strh	r3, [r7, #38]	; 0x26
 80179ee:	e002      	b.n	80179f6 <etharp_find_entry+0x226>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 80179f0:	f04f 33ff 	mov.w	r3, #4294967295
 80179f4:	e054      	b.n	8017aa0 <etharp_find_entry+0x2d0>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80179f6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80179fa:	2b09      	cmp	r3, #9
 80179fc:	dd06      	ble.n	8017a0c <etharp_find_entry+0x23c>
 80179fe:	4b2b      	ldr	r3, [pc, #172]	; (8017aac <etharp_find_entry+0x2dc>)
 8017a00:	f240 127f 	movw	r2, #383	; 0x17f
 8017a04:	492d      	ldr	r1, [pc, #180]	; (8017abc <etharp_find_entry+0x2ec>)
 8017a06:	482b      	ldr	r0, [pc, #172]	; (8017ab4 <etharp_find_entry+0x2e4>)
 8017a08:	f003 f9e2 	bl	801add0 <iprintf>
    etharp_free_entry(i);
 8017a0c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8017a10:	4618      	mov	r0, r3
 8017a12:	f7ff fdd1 	bl	80175b8 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8017a16:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8017a1a:	2b09      	cmp	r3, #9
 8017a1c:	dd06      	ble.n	8017a2c <etharp_find_entry+0x25c>
 8017a1e:	4b23      	ldr	r3, [pc, #140]	; (8017aac <etharp_find_entry+0x2dc>)
 8017a20:	f240 1283 	movw	r2, #387	; 0x183
 8017a24:	4925      	ldr	r1, [pc, #148]	; (8017abc <etharp_find_entry+0x2ec>)
 8017a26:	4823      	ldr	r0, [pc, #140]	; (8017ab4 <etharp_find_entry+0x2e4>)
 8017a28:	f003 f9d2 	bl	801add0 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8017a2c:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8017a30:	491d      	ldr	r1, [pc, #116]	; (8017aa8 <etharp_find_entry+0x2d8>)
 8017a32:	4613      	mov	r3, r2
 8017a34:	005b      	lsls	r3, r3, #1
 8017a36:	4413      	add	r3, r2
 8017a38:	00db      	lsls	r3, r3, #3
 8017a3a:	440b      	add	r3, r1
 8017a3c:	3314      	adds	r3, #20
 8017a3e:	781b      	ldrb	r3, [r3, #0]
 8017a40:	2b00      	cmp	r3, #0
 8017a42:	d006      	beq.n	8017a52 <etharp_find_entry+0x282>
 8017a44:	4b19      	ldr	r3, [pc, #100]	; (8017aac <etharp_find_entry+0x2dc>)
 8017a46:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8017a4a:	491d      	ldr	r1, [pc, #116]	; (8017ac0 <etharp_find_entry+0x2f0>)
 8017a4c:	4819      	ldr	r0, [pc, #100]	; (8017ab4 <etharp_find_entry+0x2e4>)
 8017a4e:	f003 f9bf 	bl	801add0 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8017a52:	68fb      	ldr	r3, [r7, #12]
 8017a54:	2b00      	cmp	r3, #0
 8017a56:	d00b      	beq.n	8017a70 <etharp_find_entry+0x2a0>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8017a58:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8017a5c:	68fb      	ldr	r3, [r7, #12]
 8017a5e:	6819      	ldr	r1, [r3, #0]
 8017a60:	4811      	ldr	r0, [pc, #68]	; (8017aa8 <etharp_find_entry+0x2d8>)
 8017a62:	4613      	mov	r3, r2
 8017a64:	005b      	lsls	r3, r3, #1
 8017a66:	4413      	add	r3, r2
 8017a68:	00db      	lsls	r3, r3, #3
 8017a6a:	4403      	add	r3, r0
 8017a6c:	3304      	adds	r3, #4
 8017a6e:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8017a70:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8017a74:	490c      	ldr	r1, [pc, #48]	; (8017aa8 <etharp_find_entry+0x2d8>)
 8017a76:	4613      	mov	r3, r2
 8017a78:	005b      	lsls	r3, r3, #1
 8017a7a:	4413      	add	r3, r2
 8017a7c:	00db      	lsls	r3, r3, #3
 8017a7e:	440b      	add	r3, r1
 8017a80:	3312      	adds	r3, #18
 8017a82:	2200      	movs	r2, #0
 8017a84:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8017a86:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8017a8a:	4907      	ldr	r1, [pc, #28]	; (8017aa8 <etharp_find_entry+0x2d8>)
 8017a8c:	4613      	mov	r3, r2
 8017a8e:	005b      	lsls	r3, r3, #1
 8017a90:	4413      	add	r3, r2
 8017a92:	00db      	lsls	r3, r3, #3
 8017a94:	440b      	add	r3, r1
 8017a96:	3308      	adds	r3, #8
 8017a98:	687a      	ldr	r2, [r7, #4]
 8017a9a:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8017a9c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
}
 8017aa0:	4618      	mov	r0, r3
 8017aa2:	3728      	adds	r7, #40	; 0x28
 8017aa4:	46bd      	mov	sp, r7
 8017aa6:	bd80      	pop	{r7, pc}
 8017aa8:	20013d70 	.word	0x20013d70
 8017aac:	08020348 	.word	0x08020348
 8017ab0:	08020380 	.word	0x08020380
 8017ab4:	080203c0 	.word	0x080203c0
 8017ab8:	080203e8 	.word	0x080203e8
 8017abc:	08020400 	.word	0x08020400
 8017ac0:	08020414 	.word	0x08020414

08017ac4 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8017ac4:	b580      	push	{r7, lr}
 8017ac6:	b088      	sub	sp, #32
 8017ac8:	af02      	add	r7, sp, #8
 8017aca:	60f8      	str	r0, [r7, #12]
 8017acc:	60b9      	str	r1, [r7, #8]
 8017ace:	607a      	str	r2, [r7, #4]
 8017ad0:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8017ad2:	68fb      	ldr	r3, [r7, #12]
 8017ad4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017ad8:	2b06      	cmp	r3, #6
 8017ada:	d006      	beq.n	8017aea <etharp_update_arp_entry+0x26>
 8017adc:	4b58      	ldr	r3, [pc, #352]	; (8017c40 <etharp_update_arp_entry+0x17c>)
 8017ade:	f240 12a9 	movw	r2, #425	; 0x1a9
 8017ae2:	4958      	ldr	r1, [pc, #352]	; (8017c44 <etharp_update_arp_entry+0x180>)
 8017ae4:	4858      	ldr	r0, [pc, #352]	; (8017c48 <etharp_update_arp_entry+0x184>)
 8017ae6:	f003 f973 	bl	801add0 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8017aea:	68bb      	ldr	r3, [r7, #8]
 8017aec:	2b00      	cmp	r3, #0
 8017aee:	d012      	beq.n	8017b16 <etharp_update_arp_entry+0x52>
 8017af0:	68bb      	ldr	r3, [r7, #8]
 8017af2:	681b      	ldr	r3, [r3, #0]
 8017af4:	2b00      	cmp	r3, #0
 8017af6:	d00e      	beq.n	8017b16 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8017af8:	68bb      	ldr	r3, [r7, #8]
 8017afa:	681b      	ldr	r3, [r3, #0]
 8017afc:	68f9      	ldr	r1, [r7, #12]
 8017afe:	4618      	mov	r0, r3
 8017b00:	f001 fa00 	bl	8018f04 <ip4_addr_isbroadcast_u32>
 8017b04:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8017b06:	2b00      	cmp	r3, #0
 8017b08:	d105      	bne.n	8017b16 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8017b0a:	68bb      	ldr	r3, [r7, #8]
 8017b0c:	681b      	ldr	r3, [r3, #0]
 8017b0e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8017b12:	2be0      	cmp	r3, #224	; 0xe0
 8017b14:	d102      	bne.n	8017b1c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8017b16:	f06f 030f 	mvn.w	r3, #15
 8017b1a:	e08c      	b.n	8017c36 <etharp_update_arp_entry+0x172>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8017b1c:	78fb      	ldrb	r3, [r7, #3]
 8017b1e:	68fa      	ldr	r2, [r7, #12]
 8017b20:	4619      	mov	r1, r3
 8017b22:	68b8      	ldr	r0, [r7, #8]
 8017b24:	f7ff fe54 	bl	80177d0 <etharp_find_entry>
 8017b28:	4603      	mov	r3, r0
 8017b2a:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8017b2c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8017b30:	2b00      	cmp	r3, #0
 8017b32:	da02      	bge.n	8017b3a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8017b34:	8afb      	ldrh	r3, [r7, #22]
 8017b36:	b25b      	sxtb	r3, r3
 8017b38:	e07d      	b.n	8017c36 <etharp_update_arp_entry+0x172>
  }

#if ETHARP_SUPPORT_STATIC_ENTRIES
  if (flags & ETHARP_FLAG_STATIC_ENTRY) {
 8017b3a:	78fb      	ldrb	r3, [r7, #3]
 8017b3c:	f003 0304 	and.w	r3, r3, #4
 8017b40:	2b00      	cmp	r3, #0
 8017b42:	d00b      	beq.n	8017b5c <etharp_update_arp_entry+0x98>
    /* record static type */
    arp_table[i].state = ETHARP_STATE_STATIC;
 8017b44:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017b48:	4940      	ldr	r1, [pc, #256]	; (8017c4c <etharp_update_arp_entry+0x188>)
 8017b4a:	4613      	mov	r3, r2
 8017b4c:	005b      	lsls	r3, r3, #1
 8017b4e:	4413      	add	r3, r2
 8017b50:	00db      	lsls	r3, r3, #3
 8017b52:	440b      	add	r3, r1
 8017b54:	3314      	adds	r3, #20
 8017b56:	2205      	movs	r2, #5
 8017b58:	701a      	strb	r2, [r3, #0]
 8017b5a:	e019      	b.n	8017b90 <etharp_update_arp_entry+0xcc>
  } else if (arp_table[i].state == ETHARP_STATE_STATIC) {
 8017b5c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017b60:	493a      	ldr	r1, [pc, #232]	; (8017c4c <etharp_update_arp_entry+0x188>)
 8017b62:	4613      	mov	r3, r2
 8017b64:	005b      	lsls	r3, r3, #1
 8017b66:	4413      	add	r3, r2
 8017b68:	00db      	lsls	r3, r3, #3
 8017b6a:	440b      	add	r3, r1
 8017b6c:	3314      	adds	r3, #20
 8017b6e:	781b      	ldrb	r3, [r3, #0]
 8017b70:	2b05      	cmp	r3, #5
 8017b72:	d102      	bne.n	8017b7a <etharp_update_arp_entry+0xb6>
    /* found entry is a static type, don't overwrite it */
    return ERR_VAL;
 8017b74:	f06f 0305 	mvn.w	r3, #5
 8017b78:	e05d      	b.n	8017c36 <etharp_update_arp_entry+0x172>
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8017b7a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017b7e:	4933      	ldr	r1, [pc, #204]	; (8017c4c <etharp_update_arp_entry+0x188>)
 8017b80:	4613      	mov	r3, r2
 8017b82:	005b      	lsls	r3, r3, #1
 8017b84:	4413      	add	r3, r2
 8017b86:	00db      	lsls	r3, r3, #3
 8017b88:	440b      	add	r3, r1
 8017b8a:	3314      	adds	r3, #20
 8017b8c:	2202      	movs	r2, #2
 8017b8e:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8017b90:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017b94:	492d      	ldr	r1, [pc, #180]	; (8017c4c <etharp_update_arp_entry+0x188>)
 8017b96:	4613      	mov	r3, r2
 8017b98:	005b      	lsls	r3, r3, #1
 8017b9a:	4413      	add	r3, r2
 8017b9c:	00db      	lsls	r3, r3, #3
 8017b9e:	440b      	add	r3, r1
 8017ba0:	3308      	adds	r3, #8
 8017ba2:	68fa      	ldr	r2, [r7, #12]
 8017ba4:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8017ba6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017baa:	4613      	mov	r3, r2
 8017bac:	005b      	lsls	r3, r3, #1
 8017bae:	4413      	add	r3, r2
 8017bb0:	00db      	lsls	r3, r3, #3
 8017bb2:	3308      	adds	r3, #8
 8017bb4:	4a25      	ldr	r2, [pc, #148]	; (8017c4c <etharp_update_arp_entry+0x188>)
 8017bb6:	4413      	add	r3, r2
 8017bb8:	3304      	adds	r3, #4
 8017bba:	2206      	movs	r2, #6
 8017bbc:	6879      	ldr	r1, [r7, #4]
 8017bbe:	4618      	mov	r0, r3
 8017bc0:	f002 fb90 	bl	801a2e4 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8017bc4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017bc8:	4920      	ldr	r1, [pc, #128]	; (8017c4c <etharp_update_arp_entry+0x188>)
 8017bca:	4613      	mov	r3, r2
 8017bcc:	005b      	lsls	r3, r3, #1
 8017bce:	4413      	add	r3, r2
 8017bd0:	00db      	lsls	r3, r3, #3
 8017bd2:	440b      	add	r3, r1
 8017bd4:	3312      	adds	r3, #18
 8017bd6:	2200      	movs	r2, #0
 8017bd8:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8017bda:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017bde:	491b      	ldr	r1, [pc, #108]	; (8017c4c <etharp_update_arp_entry+0x188>)
 8017be0:	4613      	mov	r3, r2
 8017be2:	005b      	lsls	r3, r3, #1
 8017be4:	4413      	add	r3, r2
 8017be6:	00db      	lsls	r3, r3, #3
 8017be8:	440b      	add	r3, r1
 8017bea:	681b      	ldr	r3, [r3, #0]
 8017bec:	2b00      	cmp	r3, #0
 8017bee:	d021      	beq.n	8017c34 <etharp_update_arp_entry+0x170>
    struct pbuf *p = arp_table[i].q;
 8017bf0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017bf4:	4915      	ldr	r1, [pc, #84]	; (8017c4c <etharp_update_arp_entry+0x188>)
 8017bf6:	4613      	mov	r3, r2
 8017bf8:	005b      	lsls	r3, r3, #1
 8017bfa:	4413      	add	r3, r2
 8017bfc:	00db      	lsls	r3, r3, #3
 8017bfe:	440b      	add	r3, r1
 8017c00:	681b      	ldr	r3, [r3, #0]
 8017c02:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8017c04:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017c08:	4910      	ldr	r1, [pc, #64]	; (8017c4c <etharp_update_arp_entry+0x188>)
 8017c0a:	4613      	mov	r3, r2
 8017c0c:	005b      	lsls	r3, r3, #1
 8017c0e:	4413      	add	r3, r2
 8017c10:	00db      	lsls	r3, r3, #3
 8017c12:	440b      	add	r3, r1
 8017c14:	2200      	movs	r2, #0
 8017c16:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8017c18:	68fb      	ldr	r3, [r7, #12]
 8017c1a:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8017c1e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8017c22:	9300      	str	r3, [sp, #0]
 8017c24:	687b      	ldr	r3, [r7, #4]
 8017c26:	6939      	ldr	r1, [r7, #16]
 8017c28:	68f8      	ldr	r0, [r7, #12]
 8017c2a:	f002 f9b3 	bl	8019f94 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8017c2e:	6938      	ldr	r0, [r7, #16]
 8017c30:	f7f7 f912 	bl	800ee58 <pbuf_free>
  }
  return ERR_OK;
 8017c34:	2300      	movs	r3, #0
}
 8017c36:	4618      	mov	r0, r3
 8017c38:	3718      	adds	r7, #24
 8017c3a:	46bd      	mov	sp, r7
 8017c3c:	bd80      	pop	{r7, pc}
 8017c3e:	bf00      	nop
 8017c40:	08020348 	.word	0x08020348
 8017c44:	08020440 	.word	0x08020440
 8017c48:	080203c0 	.word	0x080203c0
 8017c4c:	20013d70 	.word	0x20013d70

08017c50 <etharp_add_static_entry>:
 * @param ethaddr ethernet address for the new static entry
 * @return See return values of etharp_add_static_entry
 */
err_t
etharp_add_static_entry(const ip4_addr_t *ipaddr, struct eth_addr *ethaddr)
{
 8017c50:	b580      	push	{r7, lr}
 8017c52:	b084      	sub	sp, #16
 8017c54:	af00      	add	r7, sp, #0
 8017c56:	6078      	str	r0, [r7, #4]
 8017c58:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_add_static_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));

  netif = ip4_route(ipaddr);
 8017c5a:	6878      	ldr	r0, [r7, #4]
 8017c5c:	f000 fe2c 	bl	80188b8 <ip4_route>
 8017c60:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 8017c62:	68fb      	ldr	r3, [r7, #12]
 8017c64:	2b00      	cmp	r3, #0
 8017c66:	d102      	bne.n	8017c6e <etharp_add_static_entry+0x1e>
    return ERR_RTE;
 8017c68:	f06f 0303 	mvn.w	r3, #3
 8017c6c:	e006      	b.n	8017c7c <etharp_add_static_entry+0x2c>
  }

  return etharp_update_arp_entry(netif, ipaddr, ethaddr, ETHARP_FLAG_TRY_HARD | ETHARP_FLAG_STATIC_ENTRY);
 8017c6e:	2305      	movs	r3, #5
 8017c70:	683a      	ldr	r2, [r7, #0]
 8017c72:	6879      	ldr	r1, [r7, #4]
 8017c74:	68f8      	ldr	r0, [r7, #12]
 8017c76:	f7ff ff25 	bl	8017ac4 <etharp_update_arp_entry>
 8017c7a:	4603      	mov	r3, r0
}
 8017c7c:	4618      	mov	r0, r3
 8017c7e:	3710      	adds	r7, #16
 8017c80:	46bd      	mov	sp, r7
 8017c82:	bd80      	pop	{r7, pc}

08017c84 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8017c84:	b580      	push	{r7, lr}
 8017c86:	b084      	sub	sp, #16
 8017c88:	af00      	add	r7, sp, #0
 8017c8a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8017c8c:	2300      	movs	r3, #0
 8017c8e:	60fb      	str	r3, [r7, #12]
 8017c90:	e01e      	b.n	8017cd0 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8017c92:	4913      	ldr	r1, [pc, #76]	; (8017ce0 <etharp_cleanup_netif+0x5c>)
 8017c94:	68fa      	ldr	r2, [r7, #12]
 8017c96:	4613      	mov	r3, r2
 8017c98:	005b      	lsls	r3, r3, #1
 8017c9a:	4413      	add	r3, r2
 8017c9c:	00db      	lsls	r3, r3, #3
 8017c9e:	440b      	add	r3, r1
 8017ca0:	3314      	adds	r3, #20
 8017ca2:	781b      	ldrb	r3, [r3, #0]
 8017ca4:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8017ca6:	7afb      	ldrb	r3, [r7, #11]
 8017ca8:	2b00      	cmp	r3, #0
 8017caa:	d00e      	beq.n	8017cca <etharp_cleanup_netif+0x46>
 8017cac:	490c      	ldr	r1, [pc, #48]	; (8017ce0 <etharp_cleanup_netif+0x5c>)
 8017cae:	68fa      	ldr	r2, [r7, #12]
 8017cb0:	4613      	mov	r3, r2
 8017cb2:	005b      	lsls	r3, r3, #1
 8017cb4:	4413      	add	r3, r2
 8017cb6:	00db      	lsls	r3, r3, #3
 8017cb8:	440b      	add	r3, r1
 8017cba:	3308      	adds	r3, #8
 8017cbc:	681b      	ldr	r3, [r3, #0]
 8017cbe:	687a      	ldr	r2, [r7, #4]
 8017cc0:	429a      	cmp	r2, r3
 8017cc2:	d102      	bne.n	8017cca <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8017cc4:	68f8      	ldr	r0, [r7, #12]
 8017cc6:	f7ff fc77 	bl	80175b8 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8017cca:	68fb      	ldr	r3, [r7, #12]
 8017ccc:	3301      	adds	r3, #1
 8017cce:	60fb      	str	r3, [r7, #12]
 8017cd0:	68fb      	ldr	r3, [r7, #12]
 8017cd2:	2b09      	cmp	r3, #9
 8017cd4:	dddd      	ble.n	8017c92 <etharp_cleanup_netif+0xe>
    }
  }
}
 8017cd6:	bf00      	nop
 8017cd8:	bf00      	nop
 8017cda:	3710      	adds	r7, #16
 8017cdc:	46bd      	mov	sp, r7
 8017cde:	bd80      	pop	{r7, pc}
 8017ce0:	20013d70 	.word	0x20013d70

08017ce4 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8017ce4:	b5b0      	push	{r4, r5, r7, lr}
 8017ce6:	b08a      	sub	sp, #40	; 0x28
 8017ce8:	af04      	add	r7, sp, #16
 8017cea:	6078      	str	r0, [r7, #4]
 8017cec:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8017cee:	683b      	ldr	r3, [r7, #0]
 8017cf0:	2b00      	cmp	r3, #0
 8017cf2:	d107      	bne.n	8017d04 <etharp_input+0x20>
 8017cf4:	4b3f      	ldr	r3, [pc, #252]	; (8017df4 <etharp_input+0x110>)
 8017cf6:	f240 228a 	movw	r2, #650	; 0x28a
 8017cfa:	493f      	ldr	r1, [pc, #252]	; (8017df8 <etharp_input+0x114>)
 8017cfc:	483f      	ldr	r0, [pc, #252]	; (8017dfc <etharp_input+0x118>)
 8017cfe:	f003 f867 	bl	801add0 <iprintf>
 8017d02:	e074      	b.n	8017dee <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 8017d04:	687b      	ldr	r3, [r7, #4]
 8017d06:	685b      	ldr	r3, [r3, #4]
 8017d08:	617b      	str	r3, [r7, #20]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8017d0a:	697b      	ldr	r3, [r7, #20]
 8017d0c:	881b      	ldrh	r3, [r3, #0]
 8017d0e:	b29b      	uxth	r3, r3
 8017d10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8017d14:	d10c      	bne.n	8017d30 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8017d16:	697b      	ldr	r3, [r7, #20]
 8017d18:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8017d1a:	2b06      	cmp	r3, #6
 8017d1c:	d108      	bne.n	8017d30 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8017d1e:	697b      	ldr	r3, [r7, #20]
 8017d20:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8017d22:	2b04      	cmp	r3, #4
 8017d24:	d104      	bne.n	8017d30 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8017d26:	697b      	ldr	r3, [r7, #20]
 8017d28:	885b      	ldrh	r3, [r3, #2]
 8017d2a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8017d2c:	2b08      	cmp	r3, #8
 8017d2e:	d003      	beq.n	8017d38 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8017d30:	6878      	ldr	r0, [r7, #4]
 8017d32:	f7f7 f891 	bl	800ee58 <pbuf_free>
    return;
 8017d36:	e05a      	b.n	8017dee <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8017d38:	697b      	ldr	r3, [r7, #20]
 8017d3a:	330e      	adds	r3, #14
 8017d3c:	681b      	ldr	r3, [r3, #0]
 8017d3e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8017d40:	697b      	ldr	r3, [r7, #20]
 8017d42:	3318      	adds	r3, #24
 8017d44:	681b      	ldr	r3, [r3, #0]
 8017d46:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8017d48:	683b      	ldr	r3, [r7, #0]
 8017d4a:	3304      	adds	r3, #4
 8017d4c:	681b      	ldr	r3, [r3, #0]
 8017d4e:	2b00      	cmp	r3, #0
 8017d50:	d102      	bne.n	8017d58 <etharp_input+0x74>
    for_us = 0;
 8017d52:	2300      	movs	r3, #0
 8017d54:	74fb      	strb	r3, [r7, #19]
 8017d56:	e009      	b.n	8017d6c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8017d58:	68ba      	ldr	r2, [r7, #8]
 8017d5a:	683b      	ldr	r3, [r7, #0]
 8017d5c:	3304      	adds	r3, #4
 8017d5e:	681b      	ldr	r3, [r3, #0]
 8017d60:	429a      	cmp	r2, r3
 8017d62:	bf0c      	ite	eq
 8017d64:	2301      	moveq	r3, #1
 8017d66:	2300      	movne	r3, #0
 8017d68:	b2db      	uxtb	r3, r3
 8017d6a:	74fb      	strb	r3, [r7, #19]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8017d6c:	697b      	ldr	r3, [r7, #20]
 8017d6e:	f103 0208 	add.w	r2, r3, #8
 8017d72:	7cfb      	ldrb	r3, [r7, #19]
 8017d74:	2b00      	cmp	r3, #0
 8017d76:	d001      	beq.n	8017d7c <etharp_input+0x98>
 8017d78:	2301      	movs	r3, #1
 8017d7a:	e000      	b.n	8017d7e <etharp_input+0x9a>
 8017d7c:	2302      	movs	r3, #2
 8017d7e:	f107 010c 	add.w	r1, r7, #12
 8017d82:	6838      	ldr	r0, [r7, #0]
 8017d84:	f7ff fe9e 	bl	8017ac4 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8017d88:	697b      	ldr	r3, [r7, #20]
 8017d8a:	88db      	ldrh	r3, [r3, #6]
 8017d8c:	b29b      	uxth	r3, r3
 8017d8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8017d92:	d003      	beq.n	8017d9c <etharp_input+0xb8>
 8017d94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017d98:	d01e      	beq.n	8017dd8 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8017d9a:	e025      	b.n	8017de8 <etharp_input+0x104>
      if (for_us) {
 8017d9c:	7cfb      	ldrb	r3, [r7, #19]
 8017d9e:	2b00      	cmp	r3, #0
 8017da0:	d021      	beq.n	8017de6 <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8017da2:	683b      	ldr	r3, [r7, #0]
 8017da4:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8017da8:	697b      	ldr	r3, [r7, #20]
 8017daa:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8017dae:	683b      	ldr	r3, [r7, #0]
 8017db0:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 8017db4:	683b      	ldr	r3, [r7, #0]
 8017db6:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8017db8:	697a      	ldr	r2, [r7, #20]
 8017dba:	3208      	adds	r2, #8
        etharp_raw(netif,
 8017dbc:	2102      	movs	r1, #2
 8017dbe:	9103      	str	r1, [sp, #12]
 8017dc0:	f107 010c 	add.w	r1, r7, #12
 8017dc4:	9102      	str	r1, [sp, #8]
 8017dc6:	9201      	str	r2, [sp, #4]
 8017dc8:	9300      	str	r3, [sp, #0]
 8017dca:	462b      	mov	r3, r5
 8017dcc:	4622      	mov	r2, r4
 8017dce:	4601      	mov	r1, r0
 8017dd0:	6838      	ldr	r0, [r7, #0]
 8017dd2:	f000 faef 	bl	80183b4 <etharp_raw>
      break;
 8017dd6:	e006      	b.n	8017de6 <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 8017dd8:	f107 030c 	add.w	r3, r7, #12
 8017ddc:	4619      	mov	r1, r3
 8017dde:	6838      	ldr	r0, [r7, #0]
 8017de0:	f7fe f976 	bl	80160d0 <dhcp_arp_reply>
      break;
 8017de4:	e000      	b.n	8017de8 <etharp_input+0x104>
      break;
 8017de6:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8017de8:	6878      	ldr	r0, [r7, #4]
 8017dea:	f7f7 f835 	bl	800ee58 <pbuf_free>
}
 8017dee:	3718      	adds	r7, #24
 8017df0:	46bd      	mov	sp, r7
 8017df2:	bdb0      	pop	{r4, r5, r7, pc}
 8017df4:	08020348 	.word	0x08020348
 8017df8:	08020498 	.word	0x08020498
 8017dfc:	080203c0 	.word	0x080203c0

08017e00 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8017e00:	b580      	push	{r7, lr}
 8017e02:	b086      	sub	sp, #24
 8017e04:	af02      	add	r7, sp, #8
 8017e06:	60f8      	str	r0, [r7, #12]
 8017e08:	60b9      	str	r1, [r7, #8]
 8017e0a:	4613      	mov	r3, r2
 8017e0c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8017e0e:	79fa      	ldrb	r2, [r7, #7]
 8017e10:	4944      	ldr	r1, [pc, #272]	; (8017f24 <etharp_output_to_arp_index+0x124>)
 8017e12:	4613      	mov	r3, r2
 8017e14:	005b      	lsls	r3, r3, #1
 8017e16:	4413      	add	r3, r2
 8017e18:	00db      	lsls	r3, r3, #3
 8017e1a:	440b      	add	r3, r1
 8017e1c:	3314      	adds	r3, #20
 8017e1e:	781b      	ldrb	r3, [r3, #0]
 8017e20:	2b01      	cmp	r3, #1
 8017e22:	d806      	bhi.n	8017e32 <etharp_output_to_arp_index+0x32>
 8017e24:	4b40      	ldr	r3, [pc, #256]	; (8017f28 <etharp_output_to_arp_index+0x128>)
 8017e26:	f240 22ee 	movw	r2, #750	; 0x2ee
 8017e2a:	4940      	ldr	r1, [pc, #256]	; (8017f2c <etharp_output_to_arp_index+0x12c>)
 8017e2c:	4840      	ldr	r0, [pc, #256]	; (8017f30 <etharp_output_to_arp_index+0x130>)
 8017e2e:	f002 ffcf 	bl	801add0 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8017e32:	79fa      	ldrb	r2, [r7, #7]
 8017e34:	493b      	ldr	r1, [pc, #236]	; (8017f24 <etharp_output_to_arp_index+0x124>)
 8017e36:	4613      	mov	r3, r2
 8017e38:	005b      	lsls	r3, r3, #1
 8017e3a:	4413      	add	r3, r2
 8017e3c:	00db      	lsls	r3, r3, #3
 8017e3e:	440b      	add	r3, r1
 8017e40:	3314      	adds	r3, #20
 8017e42:	781b      	ldrb	r3, [r3, #0]
 8017e44:	2b02      	cmp	r3, #2
 8017e46:	d153      	bne.n	8017ef0 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8017e48:	79fa      	ldrb	r2, [r7, #7]
 8017e4a:	4936      	ldr	r1, [pc, #216]	; (8017f24 <etharp_output_to_arp_index+0x124>)
 8017e4c:	4613      	mov	r3, r2
 8017e4e:	005b      	lsls	r3, r3, #1
 8017e50:	4413      	add	r3, r2
 8017e52:	00db      	lsls	r3, r3, #3
 8017e54:	440b      	add	r3, r1
 8017e56:	3312      	adds	r3, #18
 8017e58:	881b      	ldrh	r3, [r3, #0]
 8017e5a:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8017e5e:	d919      	bls.n	8017e94 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8017e60:	79fa      	ldrb	r2, [r7, #7]
 8017e62:	4613      	mov	r3, r2
 8017e64:	005b      	lsls	r3, r3, #1
 8017e66:	4413      	add	r3, r2
 8017e68:	00db      	lsls	r3, r3, #3
 8017e6a:	4a2e      	ldr	r2, [pc, #184]	; (8017f24 <etharp_output_to_arp_index+0x124>)
 8017e6c:	4413      	add	r3, r2
 8017e6e:	3304      	adds	r3, #4
 8017e70:	4619      	mov	r1, r3
 8017e72:	68f8      	ldr	r0, [r7, #12]
 8017e74:	f000 fb4c 	bl	8018510 <etharp_request>
 8017e78:	4603      	mov	r3, r0
 8017e7a:	2b00      	cmp	r3, #0
 8017e7c:	d138      	bne.n	8017ef0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8017e7e:	79fa      	ldrb	r2, [r7, #7]
 8017e80:	4928      	ldr	r1, [pc, #160]	; (8017f24 <etharp_output_to_arp_index+0x124>)
 8017e82:	4613      	mov	r3, r2
 8017e84:	005b      	lsls	r3, r3, #1
 8017e86:	4413      	add	r3, r2
 8017e88:	00db      	lsls	r3, r3, #3
 8017e8a:	440b      	add	r3, r1
 8017e8c:	3314      	adds	r3, #20
 8017e8e:	2203      	movs	r2, #3
 8017e90:	701a      	strb	r2, [r3, #0]
 8017e92:	e02d      	b.n	8017ef0 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8017e94:	79fa      	ldrb	r2, [r7, #7]
 8017e96:	4923      	ldr	r1, [pc, #140]	; (8017f24 <etharp_output_to_arp_index+0x124>)
 8017e98:	4613      	mov	r3, r2
 8017e9a:	005b      	lsls	r3, r3, #1
 8017e9c:	4413      	add	r3, r2
 8017e9e:	00db      	lsls	r3, r3, #3
 8017ea0:	440b      	add	r3, r1
 8017ea2:	3312      	adds	r3, #18
 8017ea4:	881b      	ldrh	r3, [r3, #0]
 8017ea6:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8017eaa:	d321      	bcc.n	8017ef0 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8017eac:	79fa      	ldrb	r2, [r7, #7]
 8017eae:	4613      	mov	r3, r2
 8017eb0:	005b      	lsls	r3, r3, #1
 8017eb2:	4413      	add	r3, r2
 8017eb4:	00db      	lsls	r3, r3, #3
 8017eb6:	4a1b      	ldr	r2, [pc, #108]	; (8017f24 <etharp_output_to_arp_index+0x124>)
 8017eb8:	4413      	add	r3, r2
 8017eba:	1d19      	adds	r1, r3, #4
 8017ebc:	79fa      	ldrb	r2, [r7, #7]
 8017ebe:	4613      	mov	r3, r2
 8017ec0:	005b      	lsls	r3, r3, #1
 8017ec2:	4413      	add	r3, r2
 8017ec4:	00db      	lsls	r3, r3, #3
 8017ec6:	3308      	adds	r3, #8
 8017ec8:	4a16      	ldr	r2, [pc, #88]	; (8017f24 <etharp_output_to_arp_index+0x124>)
 8017eca:	4413      	add	r3, r2
 8017ecc:	3304      	adds	r3, #4
 8017ece:	461a      	mov	r2, r3
 8017ed0:	68f8      	ldr	r0, [r7, #12]
 8017ed2:	f000 fafb 	bl	80184cc <etharp_request_dst>
 8017ed6:	4603      	mov	r3, r0
 8017ed8:	2b00      	cmp	r3, #0
 8017eda:	d109      	bne.n	8017ef0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8017edc:	79fa      	ldrb	r2, [r7, #7]
 8017ede:	4911      	ldr	r1, [pc, #68]	; (8017f24 <etharp_output_to_arp_index+0x124>)
 8017ee0:	4613      	mov	r3, r2
 8017ee2:	005b      	lsls	r3, r3, #1
 8017ee4:	4413      	add	r3, r2
 8017ee6:	00db      	lsls	r3, r3, #3
 8017ee8:	440b      	add	r3, r1
 8017eea:	3314      	adds	r3, #20
 8017eec:	2203      	movs	r2, #3
 8017eee:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8017ef0:	68fb      	ldr	r3, [r7, #12]
 8017ef2:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 8017ef6:	79fa      	ldrb	r2, [r7, #7]
 8017ef8:	4613      	mov	r3, r2
 8017efa:	005b      	lsls	r3, r3, #1
 8017efc:	4413      	add	r3, r2
 8017efe:	00db      	lsls	r3, r3, #3
 8017f00:	3308      	adds	r3, #8
 8017f02:	4a08      	ldr	r2, [pc, #32]	; (8017f24 <etharp_output_to_arp_index+0x124>)
 8017f04:	4413      	add	r3, r2
 8017f06:	3304      	adds	r3, #4
 8017f08:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8017f0c:	9200      	str	r2, [sp, #0]
 8017f0e:	460a      	mov	r2, r1
 8017f10:	68b9      	ldr	r1, [r7, #8]
 8017f12:	68f8      	ldr	r0, [r7, #12]
 8017f14:	f002 f83e 	bl	8019f94 <ethernet_output>
 8017f18:	4603      	mov	r3, r0
}
 8017f1a:	4618      	mov	r0, r3
 8017f1c:	3710      	adds	r7, #16
 8017f1e:	46bd      	mov	sp, r7
 8017f20:	bd80      	pop	{r7, pc}
 8017f22:	bf00      	nop
 8017f24:	20013d70 	.word	0x20013d70
 8017f28:	08020348 	.word	0x08020348
 8017f2c:	080204b8 	.word	0x080204b8
 8017f30:	080203c0 	.word	0x080203c0

08017f34 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8017f34:	b580      	push	{r7, lr}
 8017f36:	b08a      	sub	sp, #40	; 0x28
 8017f38:	af02      	add	r7, sp, #8
 8017f3a:	60f8      	str	r0, [r7, #12]
 8017f3c:	60b9      	str	r1, [r7, #8]
 8017f3e:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8017f40:	687b      	ldr	r3, [r7, #4]
 8017f42:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8017f44:	68fb      	ldr	r3, [r7, #12]
 8017f46:	2b00      	cmp	r3, #0
 8017f48:	d106      	bne.n	8017f58 <etharp_output+0x24>
 8017f4a:	4b73      	ldr	r3, [pc, #460]	; (8018118 <etharp_output+0x1e4>)
 8017f4c:	f240 321e 	movw	r2, #798	; 0x31e
 8017f50:	4972      	ldr	r1, [pc, #456]	; (801811c <etharp_output+0x1e8>)
 8017f52:	4873      	ldr	r0, [pc, #460]	; (8018120 <etharp_output+0x1ec>)
 8017f54:	f002 ff3c 	bl	801add0 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8017f58:	68bb      	ldr	r3, [r7, #8]
 8017f5a:	2b00      	cmp	r3, #0
 8017f5c:	d106      	bne.n	8017f6c <etharp_output+0x38>
 8017f5e:	4b6e      	ldr	r3, [pc, #440]	; (8018118 <etharp_output+0x1e4>)
 8017f60:	f240 321f 	movw	r2, #799	; 0x31f
 8017f64:	496f      	ldr	r1, [pc, #444]	; (8018124 <etharp_output+0x1f0>)
 8017f66:	486e      	ldr	r0, [pc, #440]	; (8018120 <etharp_output+0x1ec>)
 8017f68:	f002 ff32 	bl	801add0 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8017f6c:	687b      	ldr	r3, [r7, #4]
 8017f6e:	2b00      	cmp	r3, #0
 8017f70:	d106      	bne.n	8017f80 <etharp_output+0x4c>
 8017f72:	4b69      	ldr	r3, [pc, #420]	; (8018118 <etharp_output+0x1e4>)
 8017f74:	f44f 7248 	mov.w	r2, #800	; 0x320
 8017f78:	496b      	ldr	r1, [pc, #428]	; (8018128 <etharp_output+0x1f4>)
 8017f7a:	4869      	ldr	r0, [pc, #420]	; (8018120 <etharp_output+0x1ec>)
 8017f7c:	f002 ff28 	bl	801add0 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8017f80:	687b      	ldr	r3, [r7, #4]
 8017f82:	681b      	ldr	r3, [r3, #0]
 8017f84:	68f9      	ldr	r1, [r7, #12]
 8017f86:	4618      	mov	r0, r3
 8017f88:	f000 ffbc 	bl	8018f04 <ip4_addr_isbroadcast_u32>
 8017f8c:	4603      	mov	r3, r0
 8017f8e:	2b00      	cmp	r3, #0
 8017f90:	d002      	beq.n	8017f98 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8017f92:	4b66      	ldr	r3, [pc, #408]	; (801812c <etharp_output+0x1f8>)
 8017f94:	61fb      	str	r3, [r7, #28]
 8017f96:	e0af      	b.n	80180f8 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8017f98:	687b      	ldr	r3, [r7, #4]
 8017f9a:	681b      	ldr	r3, [r3, #0]
 8017f9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017fa0:	2be0      	cmp	r3, #224	; 0xe0
 8017fa2:	d118      	bne.n	8017fd6 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8017fa4:	2301      	movs	r3, #1
 8017fa6:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8017fa8:	2300      	movs	r3, #0
 8017faa:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8017fac:	235e      	movs	r3, #94	; 0x5e
 8017fae:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8017fb0:	687b      	ldr	r3, [r7, #4]
 8017fb2:	3301      	adds	r3, #1
 8017fb4:	781b      	ldrb	r3, [r3, #0]
 8017fb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8017fba:	b2db      	uxtb	r3, r3
 8017fbc:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8017fbe:	687b      	ldr	r3, [r7, #4]
 8017fc0:	3302      	adds	r3, #2
 8017fc2:	781b      	ldrb	r3, [r3, #0]
 8017fc4:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8017fc6:	687b      	ldr	r3, [r7, #4]
 8017fc8:	3303      	adds	r3, #3
 8017fca:	781b      	ldrb	r3, [r3, #0]
 8017fcc:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8017fce:	f107 0310 	add.w	r3, r7, #16
 8017fd2:	61fb      	str	r3, [r7, #28]
 8017fd4:	e090      	b.n	80180f8 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8017fd6:	687b      	ldr	r3, [r7, #4]
 8017fd8:	681a      	ldr	r2, [r3, #0]
 8017fda:	68fb      	ldr	r3, [r7, #12]
 8017fdc:	3304      	adds	r3, #4
 8017fde:	681b      	ldr	r3, [r3, #0]
 8017fe0:	405a      	eors	r2, r3
 8017fe2:	68fb      	ldr	r3, [r7, #12]
 8017fe4:	3308      	adds	r3, #8
 8017fe6:	681b      	ldr	r3, [r3, #0]
 8017fe8:	4013      	ands	r3, r2
 8017fea:	2b00      	cmp	r3, #0
 8017fec:	d012      	beq.n	8018014 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8017fee:	687b      	ldr	r3, [r7, #4]
 8017ff0:	681b      	ldr	r3, [r3, #0]
 8017ff2:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8017ff4:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8017ff8:	4293      	cmp	r3, r2
 8017ffa:	d00b      	beq.n	8018014 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8017ffc:	68fb      	ldr	r3, [r7, #12]
 8017ffe:	330c      	adds	r3, #12
 8018000:	681b      	ldr	r3, [r3, #0]
 8018002:	2b00      	cmp	r3, #0
 8018004:	d003      	beq.n	801800e <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8018006:	68fb      	ldr	r3, [r7, #12]
 8018008:	330c      	adds	r3, #12
 801800a:	61bb      	str	r3, [r7, #24]
 801800c:	e002      	b.n	8018014 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801800e:	f06f 0303 	mvn.w	r3, #3
 8018012:	e07d      	b.n	8018110 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8018014:	4b46      	ldr	r3, [pc, #280]	; (8018130 <etharp_output+0x1fc>)
 8018016:	781b      	ldrb	r3, [r3, #0]
 8018018:	4619      	mov	r1, r3
 801801a:	4a46      	ldr	r2, [pc, #280]	; (8018134 <etharp_output+0x200>)
 801801c:	460b      	mov	r3, r1
 801801e:	005b      	lsls	r3, r3, #1
 8018020:	440b      	add	r3, r1
 8018022:	00db      	lsls	r3, r3, #3
 8018024:	4413      	add	r3, r2
 8018026:	3314      	adds	r3, #20
 8018028:	781b      	ldrb	r3, [r3, #0]
 801802a:	2b01      	cmp	r3, #1
 801802c:	d925      	bls.n	801807a <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801802e:	4b40      	ldr	r3, [pc, #256]	; (8018130 <etharp_output+0x1fc>)
 8018030:	781b      	ldrb	r3, [r3, #0]
 8018032:	4619      	mov	r1, r3
 8018034:	4a3f      	ldr	r2, [pc, #252]	; (8018134 <etharp_output+0x200>)
 8018036:	460b      	mov	r3, r1
 8018038:	005b      	lsls	r3, r3, #1
 801803a:	440b      	add	r3, r1
 801803c:	00db      	lsls	r3, r3, #3
 801803e:	4413      	add	r3, r2
 8018040:	3308      	adds	r3, #8
 8018042:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8018044:	68fa      	ldr	r2, [r7, #12]
 8018046:	429a      	cmp	r2, r3
 8018048:	d117      	bne.n	801807a <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801804a:	69bb      	ldr	r3, [r7, #24]
 801804c:	681a      	ldr	r2, [r3, #0]
 801804e:	4b38      	ldr	r3, [pc, #224]	; (8018130 <etharp_output+0x1fc>)
 8018050:	781b      	ldrb	r3, [r3, #0]
 8018052:	4618      	mov	r0, r3
 8018054:	4937      	ldr	r1, [pc, #220]	; (8018134 <etharp_output+0x200>)
 8018056:	4603      	mov	r3, r0
 8018058:	005b      	lsls	r3, r3, #1
 801805a:	4403      	add	r3, r0
 801805c:	00db      	lsls	r3, r3, #3
 801805e:	440b      	add	r3, r1
 8018060:	3304      	adds	r3, #4
 8018062:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8018064:	429a      	cmp	r2, r3
 8018066:	d108      	bne.n	801807a <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8018068:	4b31      	ldr	r3, [pc, #196]	; (8018130 <etharp_output+0x1fc>)
 801806a:	781b      	ldrb	r3, [r3, #0]
 801806c:	461a      	mov	r2, r3
 801806e:	68b9      	ldr	r1, [r7, #8]
 8018070:	68f8      	ldr	r0, [r7, #12]
 8018072:	f7ff fec5 	bl	8017e00 <etharp_output_to_arp_index>
 8018076:	4603      	mov	r3, r0
 8018078:	e04a      	b.n	8018110 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801807a:	2300      	movs	r3, #0
 801807c:	75fb      	strb	r3, [r7, #23]
 801807e:	e031      	b.n	80180e4 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8018080:	7dfa      	ldrb	r2, [r7, #23]
 8018082:	492c      	ldr	r1, [pc, #176]	; (8018134 <etharp_output+0x200>)
 8018084:	4613      	mov	r3, r2
 8018086:	005b      	lsls	r3, r3, #1
 8018088:	4413      	add	r3, r2
 801808a:	00db      	lsls	r3, r3, #3
 801808c:	440b      	add	r3, r1
 801808e:	3314      	adds	r3, #20
 8018090:	781b      	ldrb	r3, [r3, #0]
 8018092:	2b01      	cmp	r3, #1
 8018094:	d923      	bls.n	80180de <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8018096:	7dfa      	ldrb	r2, [r7, #23]
 8018098:	4926      	ldr	r1, [pc, #152]	; (8018134 <etharp_output+0x200>)
 801809a:	4613      	mov	r3, r2
 801809c:	005b      	lsls	r3, r3, #1
 801809e:	4413      	add	r3, r2
 80180a0:	00db      	lsls	r3, r3, #3
 80180a2:	440b      	add	r3, r1
 80180a4:	3308      	adds	r3, #8
 80180a6:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80180a8:	68fa      	ldr	r2, [r7, #12]
 80180aa:	429a      	cmp	r2, r3
 80180ac:	d117      	bne.n	80180de <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 80180ae:	69bb      	ldr	r3, [r7, #24]
 80180b0:	6819      	ldr	r1, [r3, #0]
 80180b2:	7dfa      	ldrb	r2, [r7, #23]
 80180b4:	481f      	ldr	r0, [pc, #124]	; (8018134 <etharp_output+0x200>)
 80180b6:	4613      	mov	r3, r2
 80180b8:	005b      	lsls	r3, r3, #1
 80180ba:	4413      	add	r3, r2
 80180bc:	00db      	lsls	r3, r3, #3
 80180be:	4403      	add	r3, r0
 80180c0:	3304      	adds	r3, #4
 80180c2:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 80180c4:	4299      	cmp	r1, r3
 80180c6:	d10a      	bne.n	80180de <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 80180c8:	4a19      	ldr	r2, [pc, #100]	; (8018130 <etharp_output+0x1fc>)
 80180ca:	7dfb      	ldrb	r3, [r7, #23]
 80180cc:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 80180ce:	7dfb      	ldrb	r3, [r7, #23]
 80180d0:	461a      	mov	r2, r3
 80180d2:	68b9      	ldr	r1, [r7, #8]
 80180d4:	68f8      	ldr	r0, [r7, #12]
 80180d6:	f7ff fe93 	bl	8017e00 <etharp_output_to_arp_index>
 80180da:	4603      	mov	r3, r0
 80180dc:	e018      	b.n	8018110 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80180de:	7dfb      	ldrb	r3, [r7, #23]
 80180e0:	3301      	adds	r3, #1
 80180e2:	75fb      	strb	r3, [r7, #23]
 80180e4:	7dfb      	ldrb	r3, [r7, #23]
 80180e6:	2b09      	cmp	r3, #9
 80180e8:	d9ca      	bls.n	8018080 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 80180ea:	68ba      	ldr	r2, [r7, #8]
 80180ec:	69b9      	ldr	r1, [r7, #24]
 80180ee:	68f8      	ldr	r0, [r7, #12]
 80180f0:	f000 f822 	bl	8018138 <etharp_query>
 80180f4:	4603      	mov	r3, r0
 80180f6:	e00b      	b.n	8018110 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 80180f8:	68fb      	ldr	r3, [r7, #12]
 80180fa:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 80180fe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8018102:	9300      	str	r3, [sp, #0]
 8018104:	69fb      	ldr	r3, [r7, #28]
 8018106:	68b9      	ldr	r1, [r7, #8]
 8018108:	68f8      	ldr	r0, [r7, #12]
 801810a:	f001 ff43 	bl	8019f94 <ethernet_output>
 801810e:	4603      	mov	r3, r0
}
 8018110:	4618      	mov	r0, r3
 8018112:	3720      	adds	r7, #32
 8018114:	46bd      	mov	sp, r7
 8018116:	bd80      	pop	{r7, pc}
 8018118:	08020348 	.word	0x08020348
 801811c:	08020498 	.word	0x08020498
 8018120:	080203c0 	.word	0x080203c0
 8018124:	080204e8 	.word	0x080204e8
 8018128:	08020488 	.word	0x08020488
 801812c:	0806c878 	.word	0x0806c878
 8018130:	20013e60 	.word	0x20013e60
 8018134:	20013d70 	.word	0x20013d70

08018138 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8018138:	b580      	push	{r7, lr}
 801813a:	b08c      	sub	sp, #48	; 0x30
 801813c:	af02      	add	r7, sp, #8
 801813e:	60f8      	str	r0, [r7, #12]
 8018140:	60b9      	str	r1, [r7, #8]
 8018142:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8018144:	68fb      	ldr	r3, [r7, #12]
 8018146:	332a      	adds	r3, #42	; 0x2a
 8018148:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801814a:	23ff      	movs	r3, #255	; 0xff
 801814c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8018150:	2300      	movs	r3, #0
 8018152:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8018154:	68bb      	ldr	r3, [r7, #8]
 8018156:	681b      	ldr	r3, [r3, #0]
 8018158:	68f9      	ldr	r1, [r7, #12]
 801815a:	4618      	mov	r0, r3
 801815c:	f000 fed2 	bl	8018f04 <ip4_addr_isbroadcast_u32>
 8018160:	4603      	mov	r3, r0
 8018162:	2b00      	cmp	r3, #0
 8018164:	d10c      	bne.n	8018180 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8018166:	68bb      	ldr	r3, [r7, #8]
 8018168:	681b      	ldr	r3, [r3, #0]
 801816a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801816e:	2be0      	cmp	r3, #224	; 0xe0
 8018170:	d006      	beq.n	8018180 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8018172:	68bb      	ldr	r3, [r7, #8]
 8018174:	2b00      	cmp	r3, #0
 8018176:	d003      	beq.n	8018180 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8018178:	68bb      	ldr	r3, [r7, #8]
 801817a:	681b      	ldr	r3, [r3, #0]
 801817c:	2b00      	cmp	r3, #0
 801817e:	d102      	bne.n	8018186 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8018180:	f06f 030f 	mvn.w	r3, #15
 8018184:	e101      	b.n	801838a <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8018186:	68fa      	ldr	r2, [r7, #12]
 8018188:	2101      	movs	r1, #1
 801818a:	68b8      	ldr	r0, [r7, #8]
 801818c:	f7ff fb20 	bl	80177d0 <etharp_find_entry>
 8018190:	4603      	mov	r3, r0
 8018192:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8018194:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8018198:	2b00      	cmp	r3, #0
 801819a:	da02      	bge.n	80181a2 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 801819c:	8a7b      	ldrh	r3, [r7, #18]
 801819e:	b25b      	sxtb	r3, r3
 80181a0:	e0f3      	b.n	801838a <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 80181a2:	8a7b      	ldrh	r3, [r7, #18]
 80181a4:	2b7e      	cmp	r3, #126	; 0x7e
 80181a6:	d906      	bls.n	80181b6 <etharp_query+0x7e>
 80181a8:	4b7a      	ldr	r3, [pc, #488]	; (8018394 <etharp_query+0x25c>)
 80181aa:	f240 32c1 	movw	r2, #961	; 0x3c1
 80181ae:	497a      	ldr	r1, [pc, #488]	; (8018398 <etharp_query+0x260>)
 80181b0:	487a      	ldr	r0, [pc, #488]	; (801839c <etharp_query+0x264>)
 80181b2:	f002 fe0d 	bl	801add0 <iprintf>
  i = (netif_addr_idx_t)i_err;
 80181b6:	8a7b      	ldrh	r3, [r7, #18]
 80181b8:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80181ba:	7c7a      	ldrb	r2, [r7, #17]
 80181bc:	4978      	ldr	r1, [pc, #480]	; (80183a0 <etharp_query+0x268>)
 80181be:	4613      	mov	r3, r2
 80181c0:	005b      	lsls	r3, r3, #1
 80181c2:	4413      	add	r3, r2
 80181c4:	00db      	lsls	r3, r3, #3
 80181c6:	440b      	add	r3, r1
 80181c8:	3314      	adds	r3, #20
 80181ca:	781b      	ldrb	r3, [r3, #0]
 80181cc:	2b00      	cmp	r3, #0
 80181ce:	d115      	bne.n	80181fc <etharp_query+0xc4>
    is_new_entry = 1;
 80181d0:	2301      	movs	r3, #1
 80181d2:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80181d4:	7c7a      	ldrb	r2, [r7, #17]
 80181d6:	4972      	ldr	r1, [pc, #456]	; (80183a0 <etharp_query+0x268>)
 80181d8:	4613      	mov	r3, r2
 80181da:	005b      	lsls	r3, r3, #1
 80181dc:	4413      	add	r3, r2
 80181de:	00db      	lsls	r3, r3, #3
 80181e0:	440b      	add	r3, r1
 80181e2:	3314      	adds	r3, #20
 80181e4:	2201      	movs	r2, #1
 80181e6:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 80181e8:	7c7a      	ldrb	r2, [r7, #17]
 80181ea:	496d      	ldr	r1, [pc, #436]	; (80183a0 <etharp_query+0x268>)
 80181ec:	4613      	mov	r3, r2
 80181ee:	005b      	lsls	r3, r3, #1
 80181f0:	4413      	add	r3, r2
 80181f2:	00db      	lsls	r3, r3, #3
 80181f4:	440b      	add	r3, r1
 80181f6:	3308      	adds	r3, #8
 80181f8:	68fa      	ldr	r2, [r7, #12]
 80181fa:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80181fc:	7c7a      	ldrb	r2, [r7, #17]
 80181fe:	4968      	ldr	r1, [pc, #416]	; (80183a0 <etharp_query+0x268>)
 8018200:	4613      	mov	r3, r2
 8018202:	005b      	lsls	r3, r3, #1
 8018204:	4413      	add	r3, r2
 8018206:	00db      	lsls	r3, r3, #3
 8018208:	440b      	add	r3, r1
 801820a:	3314      	adds	r3, #20
 801820c:	781b      	ldrb	r3, [r3, #0]
 801820e:	2b01      	cmp	r3, #1
 8018210:	d011      	beq.n	8018236 <etharp_query+0xfe>
 8018212:	7c7a      	ldrb	r2, [r7, #17]
 8018214:	4962      	ldr	r1, [pc, #392]	; (80183a0 <etharp_query+0x268>)
 8018216:	4613      	mov	r3, r2
 8018218:	005b      	lsls	r3, r3, #1
 801821a:	4413      	add	r3, r2
 801821c:	00db      	lsls	r3, r3, #3
 801821e:	440b      	add	r3, r1
 8018220:	3314      	adds	r3, #20
 8018222:	781b      	ldrb	r3, [r3, #0]
 8018224:	2b01      	cmp	r3, #1
 8018226:	d806      	bhi.n	8018236 <etharp_query+0xfe>
 8018228:	4b5a      	ldr	r3, [pc, #360]	; (8018394 <etharp_query+0x25c>)
 801822a:	f240 32cd 	movw	r2, #973	; 0x3cd
 801822e:	495d      	ldr	r1, [pc, #372]	; (80183a4 <etharp_query+0x26c>)
 8018230:	485a      	ldr	r0, [pc, #360]	; (801839c <etharp_query+0x264>)
 8018232:	f002 fdcd 	bl	801add0 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8018236:	6a3b      	ldr	r3, [r7, #32]
 8018238:	2b00      	cmp	r3, #0
 801823a:	d102      	bne.n	8018242 <etharp_query+0x10a>
 801823c:	687b      	ldr	r3, [r7, #4]
 801823e:	2b00      	cmp	r3, #0
 8018240:	d10c      	bne.n	801825c <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8018242:	68b9      	ldr	r1, [r7, #8]
 8018244:	68f8      	ldr	r0, [r7, #12]
 8018246:	f000 f963 	bl	8018510 <etharp_request>
 801824a:	4603      	mov	r3, r0
 801824c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8018250:	687b      	ldr	r3, [r7, #4]
 8018252:	2b00      	cmp	r3, #0
 8018254:	d102      	bne.n	801825c <etharp_query+0x124>
      return result;
 8018256:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801825a:	e096      	b.n	801838a <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801825c:	687b      	ldr	r3, [r7, #4]
 801825e:	2b00      	cmp	r3, #0
 8018260:	d106      	bne.n	8018270 <etharp_query+0x138>
 8018262:	4b4c      	ldr	r3, [pc, #304]	; (8018394 <etharp_query+0x25c>)
 8018264:	f240 32e1 	movw	r2, #993	; 0x3e1
 8018268:	494f      	ldr	r1, [pc, #316]	; (80183a8 <etharp_query+0x270>)
 801826a:	484c      	ldr	r0, [pc, #304]	; (801839c <etharp_query+0x264>)
 801826c:	f002 fdb0 	bl	801add0 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8018270:	7c7a      	ldrb	r2, [r7, #17]
 8018272:	494b      	ldr	r1, [pc, #300]	; (80183a0 <etharp_query+0x268>)
 8018274:	4613      	mov	r3, r2
 8018276:	005b      	lsls	r3, r3, #1
 8018278:	4413      	add	r3, r2
 801827a:	00db      	lsls	r3, r3, #3
 801827c:	440b      	add	r3, r1
 801827e:	3314      	adds	r3, #20
 8018280:	781b      	ldrb	r3, [r3, #0]
 8018282:	2b01      	cmp	r3, #1
 8018284:	d917      	bls.n	80182b6 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8018286:	4a49      	ldr	r2, [pc, #292]	; (80183ac <etharp_query+0x274>)
 8018288:	7c7b      	ldrb	r3, [r7, #17]
 801828a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801828c:	7c7a      	ldrb	r2, [r7, #17]
 801828e:	4613      	mov	r3, r2
 8018290:	005b      	lsls	r3, r3, #1
 8018292:	4413      	add	r3, r2
 8018294:	00db      	lsls	r3, r3, #3
 8018296:	3308      	adds	r3, #8
 8018298:	4a41      	ldr	r2, [pc, #260]	; (80183a0 <etharp_query+0x268>)
 801829a:	4413      	add	r3, r2
 801829c:	3304      	adds	r3, #4
 801829e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80182a2:	9200      	str	r2, [sp, #0]
 80182a4:	697a      	ldr	r2, [r7, #20]
 80182a6:	6879      	ldr	r1, [r7, #4]
 80182a8:	68f8      	ldr	r0, [r7, #12]
 80182aa:	f001 fe73 	bl	8019f94 <ethernet_output>
 80182ae:	4603      	mov	r3, r0
 80182b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80182b4:	e067      	b.n	8018386 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80182b6:	7c7a      	ldrb	r2, [r7, #17]
 80182b8:	4939      	ldr	r1, [pc, #228]	; (80183a0 <etharp_query+0x268>)
 80182ba:	4613      	mov	r3, r2
 80182bc:	005b      	lsls	r3, r3, #1
 80182be:	4413      	add	r3, r2
 80182c0:	00db      	lsls	r3, r3, #3
 80182c2:	440b      	add	r3, r1
 80182c4:	3314      	adds	r3, #20
 80182c6:	781b      	ldrb	r3, [r3, #0]
 80182c8:	2b01      	cmp	r3, #1
 80182ca:	d15c      	bne.n	8018386 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80182cc:	2300      	movs	r3, #0
 80182ce:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 80182d0:	687b      	ldr	r3, [r7, #4]
 80182d2:	61fb      	str	r3, [r7, #28]
    while (p) {
 80182d4:	e01c      	b.n	8018310 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80182d6:	69fb      	ldr	r3, [r7, #28]
 80182d8:	895a      	ldrh	r2, [r3, #10]
 80182da:	69fb      	ldr	r3, [r7, #28]
 80182dc:	891b      	ldrh	r3, [r3, #8]
 80182de:	429a      	cmp	r2, r3
 80182e0:	d10a      	bne.n	80182f8 <etharp_query+0x1c0>
 80182e2:	69fb      	ldr	r3, [r7, #28]
 80182e4:	681b      	ldr	r3, [r3, #0]
 80182e6:	2b00      	cmp	r3, #0
 80182e8:	d006      	beq.n	80182f8 <etharp_query+0x1c0>
 80182ea:	4b2a      	ldr	r3, [pc, #168]	; (8018394 <etharp_query+0x25c>)
 80182ec:	f240 32f1 	movw	r2, #1009	; 0x3f1
 80182f0:	492f      	ldr	r1, [pc, #188]	; (80183b0 <etharp_query+0x278>)
 80182f2:	482a      	ldr	r0, [pc, #168]	; (801839c <etharp_query+0x264>)
 80182f4:	f002 fd6c 	bl	801add0 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 80182f8:	69fb      	ldr	r3, [r7, #28]
 80182fa:	7b1b      	ldrb	r3, [r3, #12]
 80182fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018300:	2b00      	cmp	r3, #0
 8018302:	d002      	beq.n	801830a <etharp_query+0x1d2>
        copy_needed = 1;
 8018304:	2301      	movs	r3, #1
 8018306:	61bb      	str	r3, [r7, #24]
        break;
 8018308:	e005      	b.n	8018316 <etharp_query+0x1de>
      }
      p = p->next;
 801830a:	69fb      	ldr	r3, [r7, #28]
 801830c:	681b      	ldr	r3, [r3, #0]
 801830e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8018310:	69fb      	ldr	r3, [r7, #28]
 8018312:	2b00      	cmp	r3, #0
 8018314:	d1df      	bne.n	80182d6 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8018316:	69bb      	ldr	r3, [r7, #24]
 8018318:	2b00      	cmp	r3, #0
 801831a:	d007      	beq.n	801832c <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801831c:	687a      	ldr	r2, [r7, #4]
 801831e:	f44f 7120 	mov.w	r1, #640	; 0x280
 8018322:	200e      	movs	r0, #14
 8018324:	f7f7 f948 	bl	800f5b8 <pbuf_clone>
 8018328:	61f8      	str	r0, [r7, #28]
 801832a:	e004      	b.n	8018336 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801832c:	687b      	ldr	r3, [r7, #4]
 801832e:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8018330:	69f8      	ldr	r0, [r7, #28]
 8018332:	f7f6 fe37 	bl	800efa4 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8018336:	69fb      	ldr	r3, [r7, #28]
 8018338:	2b00      	cmp	r3, #0
 801833a:	d021      	beq.n	8018380 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801833c:	7c7a      	ldrb	r2, [r7, #17]
 801833e:	4918      	ldr	r1, [pc, #96]	; (80183a0 <etharp_query+0x268>)
 8018340:	4613      	mov	r3, r2
 8018342:	005b      	lsls	r3, r3, #1
 8018344:	4413      	add	r3, r2
 8018346:	00db      	lsls	r3, r3, #3
 8018348:	440b      	add	r3, r1
 801834a:	681b      	ldr	r3, [r3, #0]
 801834c:	2b00      	cmp	r3, #0
 801834e:	d00a      	beq.n	8018366 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8018350:	7c7a      	ldrb	r2, [r7, #17]
 8018352:	4913      	ldr	r1, [pc, #76]	; (80183a0 <etharp_query+0x268>)
 8018354:	4613      	mov	r3, r2
 8018356:	005b      	lsls	r3, r3, #1
 8018358:	4413      	add	r3, r2
 801835a:	00db      	lsls	r3, r3, #3
 801835c:	440b      	add	r3, r1
 801835e:	681b      	ldr	r3, [r3, #0]
 8018360:	4618      	mov	r0, r3
 8018362:	f7f6 fd79 	bl	800ee58 <pbuf_free>
      }
      arp_table[i].q = p;
 8018366:	7c7a      	ldrb	r2, [r7, #17]
 8018368:	490d      	ldr	r1, [pc, #52]	; (80183a0 <etharp_query+0x268>)
 801836a:	4613      	mov	r3, r2
 801836c:	005b      	lsls	r3, r3, #1
 801836e:	4413      	add	r3, r2
 8018370:	00db      	lsls	r3, r3, #3
 8018372:	440b      	add	r3, r1
 8018374:	69fa      	ldr	r2, [r7, #28]
 8018376:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8018378:	2300      	movs	r3, #0
 801837a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801837e:	e002      	b.n	8018386 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8018380:	23ff      	movs	r3, #255	; 0xff
 8018382:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8018386:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801838a:	4618      	mov	r0, r3
 801838c:	3728      	adds	r7, #40	; 0x28
 801838e:	46bd      	mov	sp, r7
 8018390:	bd80      	pop	{r7, pc}
 8018392:	bf00      	nop
 8018394:	08020348 	.word	0x08020348
 8018398:	080204f4 	.word	0x080204f4
 801839c:	080203c0 	.word	0x080203c0
 80183a0:	20013d70 	.word	0x20013d70
 80183a4:	08020504 	.word	0x08020504
 80183a8:	080204e8 	.word	0x080204e8
 80183ac:	20013e60 	.word	0x20013e60
 80183b0:	0802052c 	.word	0x0802052c

080183b4 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80183b4:	b580      	push	{r7, lr}
 80183b6:	b08a      	sub	sp, #40	; 0x28
 80183b8:	af02      	add	r7, sp, #8
 80183ba:	60f8      	str	r0, [r7, #12]
 80183bc:	60b9      	str	r1, [r7, #8]
 80183be:	607a      	str	r2, [r7, #4]
 80183c0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80183c2:	2300      	movs	r3, #0
 80183c4:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80183c6:	68fb      	ldr	r3, [r7, #12]
 80183c8:	2b00      	cmp	r3, #0
 80183ca:	d106      	bne.n	80183da <etharp_raw+0x26>
 80183cc:	4b3a      	ldr	r3, [pc, #232]	; (80184b8 <etharp_raw+0x104>)
 80183ce:	f240 4257 	movw	r2, #1111	; 0x457
 80183d2:	493a      	ldr	r1, [pc, #232]	; (80184bc <etharp_raw+0x108>)
 80183d4:	483a      	ldr	r0, [pc, #232]	; (80184c0 <etharp_raw+0x10c>)
 80183d6:	f002 fcfb 	bl	801add0 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80183da:	f44f 7220 	mov.w	r2, #640	; 0x280
 80183de:	211c      	movs	r1, #28
 80183e0:	200e      	movs	r0, #14
 80183e2:	f7f6 fa51 	bl	800e888 <pbuf_alloc>
 80183e6:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80183e8:	69bb      	ldr	r3, [r7, #24]
 80183ea:	2b00      	cmp	r3, #0
 80183ec:	d102      	bne.n	80183f4 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80183ee:	f04f 33ff 	mov.w	r3, #4294967295
 80183f2:	e05d      	b.n	80184b0 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80183f4:	69bb      	ldr	r3, [r7, #24]
 80183f6:	895b      	ldrh	r3, [r3, #10]
 80183f8:	2b1b      	cmp	r3, #27
 80183fa:	d806      	bhi.n	801840a <etharp_raw+0x56>
 80183fc:	4b2e      	ldr	r3, [pc, #184]	; (80184b8 <etharp_raw+0x104>)
 80183fe:	f240 4262 	movw	r2, #1122	; 0x462
 8018402:	4930      	ldr	r1, [pc, #192]	; (80184c4 <etharp_raw+0x110>)
 8018404:	482e      	ldr	r0, [pc, #184]	; (80184c0 <etharp_raw+0x10c>)
 8018406:	f002 fce3 	bl	801add0 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801840a:	69bb      	ldr	r3, [r7, #24]
 801840c:	685b      	ldr	r3, [r3, #4]
 801840e:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8018410:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8018412:	4618      	mov	r0, r3
 8018414:	f7f4 fffe 	bl	800d414 <lwip_htons>
 8018418:	4603      	mov	r3, r0
 801841a:	461a      	mov	r2, r3
 801841c:	697b      	ldr	r3, [r7, #20]
 801841e:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8018420:	68fb      	ldr	r3, [r7, #12]
 8018422:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8018426:	2b06      	cmp	r3, #6
 8018428:	d006      	beq.n	8018438 <etharp_raw+0x84>
 801842a:	4b23      	ldr	r3, [pc, #140]	; (80184b8 <etharp_raw+0x104>)
 801842c:	f240 4269 	movw	r2, #1129	; 0x469
 8018430:	4925      	ldr	r1, [pc, #148]	; (80184c8 <etharp_raw+0x114>)
 8018432:	4823      	ldr	r0, [pc, #140]	; (80184c0 <etharp_raw+0x10c>)
 8018434:	f002 fccc 	bl	801add0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8018438:	697b      	ldr	r3, [r7, #20]
 801843a:	3308      	adds	r3, #8
 801843c:	2206      	movs	r2, #6
 801843e:	6839      	ldr	r1, [r7, #0]
 8018440:	4618      	mov	r0, r3
 8018442:	f001 ff4f 	bl	801a2e4 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8018446:	697b      	ldr	r3, [r7, #20]
 8018448:	3312      	adds	r3, #18
 801844a:	2206      	movs	r2, #6
 801844c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801844e:	4618      	mov	r0, r3
 8018450:	f001 ff48 	bl	801a2e4 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8018454:	697b      	ldr	r3, [r7, #20]
 8018456:	330e      	adds	r3, #14
 8018458:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801845a:	6812      	ldr	r2, [r2, #0]
 801845c:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801845e:	697b      	ldr	r3, [r7, #20]
 8018460:	3318      	adds	r3, #24
 8018462:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018464:	6812      	ldr	r2, [r2, #0]
 8018466:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8018468:	697b      	ldr	r3, [r7, #20]
 801846a:	2200      	movs	r2, #0
 801846c:	701a      	strb	r2, [r3, #0]
 801846e:	2200      	movs	r2, #0
 8018470:	f042 0201 	orr.w	r2, r2, #1
 8018474:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8018476:	697b      	ldr	r3, [r7, #20]
 8018478:	2200      	movs	r2, #0
 801847a:	f042 0208 	orr.w	r2, r2, #8
 801847e:	709a      	strb	r2, [r3, #2]
 8018480:	2200      	movs	r2, #0
 8018482:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8018484:	697b      	ldr	r3, [r7, #20]
 8018486:	2206      	movs	r2, #6
 8018488:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801848a:	697b      	ldr	r3, [r7, #20]
 801848c:	2204      	movs	r2, #4
 801848e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8018490:	f640 0306 	movw	r3, #2054	; 0x806
 8018494:	9300      	str	r3, [sp, #0]
 8018496:	687b      	ldr	r3, [r7, #4]
 8018498:	68ba      	ldr	r2, [r7, #8]
 801849a:	69b9      	ldr	r1, [r7, #24]
 801849c:	68f8      	ldr	r0, [r7, #12]
 801849e:	f001 fd79 	bl	8019f94 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80184a2:	69b8      	ldr	r0, [r7, #24]
 80184a4:	f7f6 fcd8 	bl	800ee58 <pbuf_free>
  p = NULL;
 80184a8:	2300      	movs	r3, #0
 80184aa:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 80184ac:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80184b0:	4618      	mov	r0, r3
 80184b2:	3720      	adds	r7, #32
 80184b4:	46bd      	mov	sp, r7
 80184b6:	bd80      	pop	{r7, pc}
 80184b8:	08020348 	.word	0x08020348
 80184bc:	08020498 	.word	0x08020498
 80184c0:	080203c0 	.word	0x080203c0
 80184c4:	08020548 	.word	0x08020548
 80184c8:	0802057c 	.word	0x0802057c

080184cc <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 80184cc:	b580      	push	{r7, lr}
 80184ce:	b088      	sub	sp, #32
 80184d0:	af04      	add	r7, sp, #16
 80184d2:	60f8      	str	r0, [r7, #12]
 80184d4:	60b9      	str	r1, [r7, #8]
 80184d6:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80184d8:	68fb      	ldr	r3, [r7, #12]
 80184da:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80184de:	68fb      	ldr	r3, [r7, #12]
 80184e0:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 80184e4:	68fb      	ldr	r3, [r7, #12]
 80184e6:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80184e8:	2201      	movs	r2, #1
 80184ea:	9203      	str	r2, [sp, #12]
 80184ec:	68ba      	ldr	r2, [r7, #8]
 80184ee:	9202      	str	r2, [sp, #8]
 80184f0:	4a06      	ldr	r2, [pc, #24]	; (801850c <etharp_request_dst+0x40>)
 80184f2:	9201      	str	r2, [sp, #4]
 80184f4:	9300      	str	r3, [sp, #0]
 80184f6:	4603      	mov	r3, r0
 80184f8:	687a      	ldr	r2, [r7, #4]
 80184fa:	68f8      	ldr	r0, [r7, #12]
 80184fc:	f7ff ff5a 	bl	80183b4 <etharp_raw>
 8018500:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8018502:	4618      	mov	r0, r3
 8018504:	3710      	adds	r7, #16
 8018506:	46bd      	mov	sp, r7
 8018508:	bd80      	pop	{r7, pc}
 801850a:	bf00      	nop
 801850c:	0806c880 	.word	0x0806c880

08018510 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8018510:	b580      	push	{r7, lr}
 8018512:	b082      	sub	sp, #8
 8018514:	af00      	add	r7, sp, #0
 8018516:	6078      	str	r0, [r7, #4]
 8018518:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801851a:	4a05      	ldr	r2, [pc, #20]	; (8018530 <etharp_request+0x20>)
 801851c:	6839      	ldr	r1, [r7, #0]
 801851e:	6878      	ldr	r0, [r7, #4]
 8018520:	f7ff ffd4 	bl	80184cc <etharp_request_dst>
 8018524:	4603      	mov	r3, r0
}
 8018526:	4618      	mov	r0, r3
 8018528:	3708      	adds	r7, #8
 801852a:	46bd      	mov	sp, r7
 801852c:	bd80      	pop	{r7, pc}
 801852e:	bf00      	nop
 8018530:	0806c878 	.word	0x0806c878

08018534 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8018534:	b580      	push	{r7, lr}
 8018536:	b08e      	sub	sp, #56	; 0x38
 8018538:	af04      	add	r7, sp, #16
 801853a:	6078      	str	r0, [r7, #4]
 801853c:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801853e:	4b8e      	ldr	r3, [pc, #568]	; (8018778 <icmp_input+0x244>)
 8018540:	689b      	ldr	r3, [r3, #8]
 8018542:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8018544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018546:	781b      	ldrb	r3, [r3, #0]
 8018548:	f003 030f 	and.w	r3, r3, #15
 801854c:	b2db      	uxtb	r3, r3
 801854e:	009b      	lsls	r3, r3, #2
 8018550:	b2db      	uxtb	r3, r3
 8018552:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8018554:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018556:	2b13      	cmp	r3, #19
 8018558:	f240 80f6 	bls.w	8018748 <icmp_input+0x214>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 801855c:	687b      	ldr	r3, [r7, #4]
 801855e:	895b      	ldrh	r3, [r3, #10]
 8018560:	2b03      	cmp	r3, #3
 8018562:	f240 80f3 	bls.w	801874c <icmp_input+0x218>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8018566:	687b      	ldr	r3, [r7, #4]
 8018568:	685b      	ldr	r3, [r3, #4]
 801856a:	781b      	ldrb	r3, [r3, #0]
 801856c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
 8018570:	687b      	ldr	r3, [r7, #4]
 8018572:	685b      	ldr	r3, [r3, #4]
 8018574:	785b      	ldrb	r3, [r3, #1]
 8018576:	f887 3020 	strb.w	r3, [r7, #32]
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801857a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 801857e:	2b00      	cmp	r3, #0
 8018580:	f000 80db 	beq.w	801873a <icmp_input+0x206>
 8018584:	2b08      	cmp	r3, #8
 8018586:	f040 80db 	bne.w	8018740 <icmp_input+0x20c>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801858a:	4b7c      	ldr	r3, [pc, #496]	; (801877c <icmp_input+0x248>)
 801858c:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801858e:	4b7a      	ldr	r3, [pc, #488]	; (8018778 <icmp_input+0x244>)
 8018590:	695b      	ldr	r3, [r3, #20]
 8018592:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8018596:	2be0      	cmp	r3, #224	; 0xe0
 8018598:	f000 80df 	beq.w	801875a <icmp_input+0x226>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801859c:	4b76      	ldr	r3, [pc, #472]	; (8018778 <icmp_input+0x244>)
 801859e:	695b      	ldr	r3, [r3, #20]
 80185a0:	4a75      	ldr	r2, [pc, #468]	; (8018778 <icmp_input+0x244>)
 80185a2:	6812      	ldr	r2, [r2, #0]
 80185a4:	4611      	mov	r1, r2
 80185a6:	4618      	mov	r0, r3
 80185a8:	f000 fcac 	bl	8018f04 <ip4_addr_isbroadcast_u32>
 80185ac:	4603      	mov	r3, r0
 80185ae:	2b00      	cmp	r3, #0
 80185b0:	f040 80d5 	bne.w	801875e <icmp_input+0x22a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80185b4:	687b      	ldr	r3, [r7, #4]
 80185b6:	891b      	ldrh	r3, [r3, #8]
 80185b8:	2b07      	cmp	r3, #7
 80185ba:	f240 80c9 	bls.w	8018750 <icmp_input+0x21c>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 80185be:	6878      	ldr	r0, [r7, #4]
 80185c0:	f7f5 f882 	bl	800d6c8 <inet_chksum_pbuf>
 80185c4:	4603      	mov	r3, r0
 80185c6:	2b00      	cmp	r3, #0
 80185c8:	d003      	beq.n	80185d2 <icmp_input+0x9e>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 80185ca:	6878      	ldr	r0, [r7, #4]
 80185cc:	f7f6 fc44 	bl	800ee58 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 80185d0:	e0ce      	b.n	8018770 <icmp_input+0x23c>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80185d2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80185d4:	330e      	adds	r3, #14
 80185d6:	4619      	mov	r1, r3
 80185d8:	6878      	ldr	r0, [r7, #4]
 80185da:	f7f6 fba7 	bl	800ed2c <pbuf_add_header>
 80185de:	4603      	mov	r3, r0
 80185e0:	2b00      	cmp	r3, #0
 80185e2:	d04b      	beq.n	801867c <icmp_input+0x148>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 80185e4:	687b      	ldr	r3, [r7, #4]
 80185e6:	891a      	ldrh	r2, [r3, #8]
 80185e8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80185ea:	4413      	add	r3, r2
 80185ec:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 80185ee:	687b      	ldr	r3, [r7, #4]
 80185f0:	891b      	ldrh	r3, [r3, #8]
 80185f2:	8b7a      	ldrh	r2, [r7, #26]
 80185f4:	429a      	cmp	r2, r3
 80185f6:	f0c0 80b4 	bcc.w	8018762 <icmp_input+0x22e>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80185fa:	8b7b      	ldrh	r3, [r7, #26]
 80185fc:	f44f 7220 	mov.w	r2, #640	; 0x280
 8018600:	4619      	mov	r1, r3
 8018602:	200e      	movs	r0, #14
 8018604:	f7f6 f940 	bl	800e888 <pbuf_alloc>
 8018608:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801860a:	697b      	ldr	r3, [r7, #20]
 801860c:	2b00      	cmp	r3, #0
 801860e:	f000 80aa 	beq.w	8018766 <icmp_input+0x232>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8018612:	697b      	ldr	r3, [r7, #20]
 8018614:	895b      	ldrh	r3, [r3, #10]
 8018616:	461a      	mov	r2, r3
 8018618:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801861a:	3308      	adds	r3, #8
 801861c:	429a      	cmp	r2, r3
 801861e:	d203      	bcs.n	8018628 <icmp_input+0xf4>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8018620:	6978      	ldr	r0, [r7, #20]
 8018622:	f7f6 fc19 	bl	800ee58 <pbuf_free>
          goto icmperr;
 8018626:	e09f      	b.n	8018768 <icmp_input+0x234>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8018628:	697b      	ldr	r3, [r7, #20]
 801862a:	685b      	ldr	r3, [r3, #4]
 801862c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801862e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8018630:	4618      	mov	r0, r3
 8018632:	f001 fe57 	bl	801a2e4 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8018636:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018638:	4619      	mov	r1, r3
 801863a:	6978      	ldr	r0, [r7, #20]
 801863c:	f7f6 fb86 	bl	800ed4c <pbuf_remove_header>
 8018640:	4603      	mov	r3, r0
 8018642:	2b00      	cmp	r3, #0
 8018644:	d009      	beq.n	801865a <icmp_input+0x126>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8018646:	4b4e      	ldr	r3, [pc, #312]	; (8018780 <icmp_input+0x24c>)
 8018648:	22b6      	movs	r2, #182	; 0xb6
 801864a:	494e      	ldr	r1, [pc, #312]	; (8018784 <icmp_input+0x250>)
 801864c:	484e      	ldr	r0, [pc, #312]	; (8018788 <icmp_input+0x254>)
 801864e:	f002 fbbf 	bl	801add0 <iprintf>
          pbuf_free(r);
 8018652:	6978      	ldr	r0, [r7, #20]
 8018654:	f7f6 fc00 	bl	800ee58 <pbuf_free>
          goto icmperr;
 8018658:	e086      	b.n	8018768 <icmp_input+0x234>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801865a:	6879      	ldr	r1, [r7, #4]
 801865c:	6978      	ldr	r0, [r7, #20]
 801865e:	f7f6 fd2f 	bl	800f0c0 <pbuf_copy>
 8018662:	4603      	mov	r3, r0
 8018664:	2b00      	cmp	r3, #0
 8018666:	d003      	beq.n	8018670 <icmp_input+0x13c>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8018668:	6978      	ldr	r0, [r7, #20]
 801866a:	f7f6 fbf5 	bl	800ee58 <pbuf_free>
          goto icmperr;
 801866e:	e07b      	b.n	8018768 <icmp_input+0x234>
        }
        /* free the original p */
        pbuf_free(p);
 8018670:	6878      	ldr	r0, [r7, #4]
 8018672:	f7f6 fbf1 	bl	800ee58 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8018676:	697b      	ldr	r3, [r7, #20]
 8018678:	607b      	str	r3, [r7, #4]
 801867a:	e00f      	b.n	801869c <icmp_input+0x168>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801867c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801867e:	330e      	adds	r3, #14
 8018680:	4619      	mov	r1, r3
 8018682:	6878      	ldr	r0, [r7, #4]
 8018684:	f7f6 fb62 	bl	800ed4c <pbuf_remove_header>
 8018688:	4603      	mov	r3, r0
 801868a:	2b00      	cmp	r3, #0
 801868c:	d006      	beq.n	801869c <icmp_input+0x168>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801868e:	4b3c      	ldr	r3, [pc, #240]	; (8018780 <icmp_input+0x24c>)
 8018690:	22c7      	movs	r2, #199	; 0xc7
 8018692:	493e      	ldr	r1, [pc, #248]	; (801878c <icmp_input+0x258>)
 8018694:	483c      	ldr	r0, [pc, #240]	; (8018788 <icmp_input+0x254>)
 8018696:	f002 fb9b 	bl	801add0 <iprintf>
          goto icmperr;
 801869a:	e065      	b.n	8018768 <icmp_input+0x234>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801869c:	687b      	ldr	r3, [r7, #4]
 801869e:	685b      	ldr	r3, [r3, #4]
 80186a0:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 80186a2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80186a4:	4619      	mov	r1, r3
 80186a6:	6878      	ldr	r0, [r7, #4]
 80186a8:	f7f6 fb40 	bl	800ed2c <pbuf_add_header>
 80186ac:	4603      	mov	r3, r0
 80186ae:	2b00      	cmp	r3, #0
 80186b0:	d145      	bne.n	801873e <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 80186b2:	687b      	ldr	r3, [r7, #4]
 80186b4:	685b      	ldr	r3, [r3, #4]
 80186b6:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 80186b8:	69fb      	ldr	r3, [r7, #28]
 80186ba:	681a      	ldr	r2, [r3, #0]
 80186bc:	68fb      	ldr	r3, [r7, #12]
 80186be:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80186c0:	4b2d      	ldr	r3, [pc, #180]	; (8018778 <icmp_input+0x244>)
 80186c2:	691a      	ldr	r2, [r3, #16]
 80186c4:	68fb      	ldr	r3, [r7, #12]
 80186c6:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 80186c8:	693b      	ldr	r3, [r7, #16]
 80186ca:	2200      	movs	r2, #0
 80186cc:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 80186ce:	693b      	ldr	r3, [r7, #16]
 80186d0:	885b      	ldrh	r3, [r3, #2]
 80186d2:	b29b      	uxth	r3, r3
 80186d4:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 80186d8:	4293      	cmp	r3, r2
 80186da:	d907      	bls.n	80186ec <icmp_input+0x1b8>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 80186dc:	693b      	ldr	r3, [r7, #16]
 80186de:	885b      	ldrh	r3, [r3, #2]
 80186e0:	b29b      	uxth	r3, r3
 80186e2:	3309      	adds	r3, #9
 80186e4:	b29a      	uxth	r2, r3
 80186e6:	693b      	ldr	r3, [r7, #16]
 80186e8:	805a      	strh	r2, [r3, #2]
 80186ea:	e006      	b.n	80186fa <icmp_input+0x1c6>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 80186ec:	693b      	ldr	r3, [r7, #16]
 80186ee:	885b      	ldrh	r3, [r3, #2]
 80186f0:	b29b      	uxth	r3, r3
 80186f2:	3308      	adds	r3, #8
 80186f4:	b29a      	uxth	r2, r3
 80186f6:	693b      	ldr	r3, [r7, #16]
 80186f8:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 80186fa:	68fb      	ldr	r3, [r7, #12]
 80186fc:	22ff      	movs	r2, #255	; 0xff
 80186fe:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8018700:	68fb      	ldr	r3, [r7, #12]
 8018702:	2200      	movs	r2, #0
 8018704:	729a      	strb	r2, [r3, #10]
 8018706:	2200      	movs	r2, #0
 8018708:	72da      	strb	r2, [r3, #11]
#if CHECKSUM_GEN_IP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_IP) {
          IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, hlen));
 801870a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801870c:	4619      	mov	r1, r3
 801870e:	68f8      	ldr	r0, [r7, #12]
 8018710:	f7f4 ffc8 	bl	800d6a4 <inet_chksum>
 8018714:	4603      	mov	r3, r0
 8018716:	461a      	mov	r2, r3
 8018718:	68fb      	ldr	r3, [r7, #12]
 801871a:	815a      	strh	r2, [r3, #10]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801871c:	683b      	ldr	r3, [r7, #0]
 801871e:	9302      	str	r3, [sp, #8]
 8018720:	2301      	movs	r3, #1
 8018722:	9301      	str	r3, [sp, #4]
 8018724:	2300      	movs	r3, #0
 8018726:	9300      	str	r3, [sp, #0]
 8018728:	23ff      	movs	r3, #255	; 0xff
 801872a:	2200      	movs	r2, #0
 801872c:	69f9      	ldr	r1, [r7, #28]
 801872e:	6878      	ldr	r0, [r7, #4]
 8018730:	f000 faaa 	bl	8018c88 <ip4_output_if>
 8018734:	4603      	mov	r3, r0
 8018736:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8018738:	e001      	b.n	801873e <icmp_input+0x20a>
      break;
 801873a:	bf00      	nop
 801873c:	e000      	b.n	8018740 <icmp_input+0x20c>
      break;
 801873e:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8018740:	6878      	ldr	r0, [r7, #4]
 8018742:	f7f6 fb89 	bl	800ee58 <pbuf_free>
  return;
 8018746:	e013      	b.n	8018770 <icmp_input+0x23c>
    goto lenerr;
 8018748:	bf00      	nop
 801874a:	e002      	b.n	8018752 <icmp_input+0x21e>
    goto lenerr;
 801874c:	bf00      	nop
 801874e:	e000      	b.n	8018752 <icmp_input+0x21e>
        goto lenerr;
 8018750:	bf00      	nop
lenerr:
  pbuf_free(p);
 8018752:	6878      	ldr	r0, [r7, #4]
 8018754:	f7f6 fb80 	bl	800ee58 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8018758:	e00a      	b.n	8018770 <icmp_input+0x23c>
        goto icmperr;
 801875a:	bf00      	nop
 801875c:	e004      	b.n	8018768 <icmp_input+0x234>
        goto icmperr;
 801875e:	bf00      	nop
 8018760:	e002      	b.n	8018768 <icmp_input+0x234>
          goto icmperr;
 8018762:	bf00      	nop
 8018764:	e000      	b.n	8018768 <icmp_input+0x234>
          goto icmperr;
 8018766:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8018768:	6878      	ldr	r0, [r7, #4]
 801876a:	f7f6 fb75 	bl	800ee58 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801876e:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8018770:	3728      	adds	r7, #40	; 0x28
 8018772:	46bd      	mov	sp, r7
 8018774:	bd80      	pop	{r7, pc}
 8018776:	bf00      	nop
 8018778:	2000a264 	.word	0x2000a264
 801877c:	2000a278 	.word	0x2000a278
 8018780:	080205c0 	.word	0x080205c0
 8018784:	080205f8 	.word	0x080205f8
 8018788:	08020630 	.word	0x08020630
 801878c:	08020658 	.word	0x08020658

08018790 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8018790:	b580      	push	{r7, lr}
 8018792:	b082      	sub	sp, #8
 8018794:	af00      	add	r7, sp, #0
 8018796:	6078      	str	r0, [r7, #4]
 8018798:	460b      	mov	r3, r1
 801879a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801879c:	78fb      	ldrb	r3, [r7, #3]
 801879e:	461a      	mov	r2, r3
 80187a0:	2103      	movs	r1, #3
 80187a2:	6878      	ldr	r0, [r7, #4]
 80187a4:	f000 f814 	bl	80187d0 <icmp_send_response>
}
 80187a8:	bf00      	nop
 80187aa:	3708      	adds	r7, #8
 80187ac:	46bd      	mov	sp, r7
 80187ae:	bd80      	pop	{r7, pc}

080187b0 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 80187b0:	b580      	push	{r7, lr}
 80187b2:	b082      	sub	sp, #8
 80187b4:	af00      	add	r7, sp, #0
 80187b6:	6078      	str	r0, [r7, #4]
 80187b8:	460b      	mov	r3, r1
 80187ba:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80187bc:	78fb      	ldrb	r3, [r7, #3]
 80187be:	461a      	mov	r2, r3
 80187c0:	210b      	movs	r1, #11
 80187c2:	6878      	ldr	r0, [r7, #4]
 80187c4:	f000 f804 	bl	80187d0 <icmp_send_response>
}
 80187c8:	bf00      	nop
 80187ca:	3708      	adds	r7, #8
 80187cc:	46bd      	mov	sp, r7
 80187ce:	bd80      	pop	{r7, pc}

080187d0 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80187d0:	b580      	push	{r7, lr}
 80187d2:	b08c      	sub	sp, #48	; 0x30
 80187d4:	af04      	add	r7, sp, #16
 80187d6:	6078      	str	r0, [r7, #4]
 80187d8:	460b      	mov	r3, r1
 80187da:	70fb      	strb	r3, [r7, #3]
 80187dc:	4613      	mov	r3, r2
 80187de:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 80187e0:	f44f 7220 	mov.w	r2, #640	; 0x280
 80187e4:	2124      	movs	r1, #36	; 0x24
 80187e6:	2022      	movs	r0, #34	; 0x22
 80187e8:	f7f6 f84e 	bl	800e888 <pbuf_alloc>
 80187ec:	61b8      	str	r0, [r7, #24]
                 PBUF_RAM);
  if (q == NULL) {
 80187ee:	69bb      	ldr	r3, [r7, #24]
 80187f0:	2b00      	cmp	r3, #0
 80187f2:	d056      	beq.n	80188a2 <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80187f4:	69bb      	ldr	r3, [r7, #24]
 80187f6:	895b      	ldrh	r3, [r3, #10]
 80187f8:	2b23      	cmp	r3, #35	; 0x23
 80187fa:	d806      	bhi.n	801880a <icmp_send_response+0x3a>
 80187fc:	4b2b      	ldr	r3, [pc, #172]	; (80188ac <icmp_send_response+0xdc>)
 80187fe:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8018802:	492b      	ldr	r1, [pc, #172]	; (80188b0 <icmp_send_response+0xe0>)
 8018804:	482b      	ldr	r0, [pc, #172]	; (80188b4 <icmp_send_response+0xe4>)
 8018806:	f002 fae3 	bl	801add0 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801880a:	687b      	ldr	r3, [r7, #4]
 801880c:	685b      	ldr	r3, [r3, #4]
 801880e:	617b      	str	r3, [r7, #20]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8018810:	69bb      	ldr	r3, [r7, #24]
 8018812:	685b      	ldr	r3, [r3, #4]
 8018814:	613b      	str	r3, [r7, #16]
  icmphdr->type = type;
 8018816:	693b      	ldr	r3, [r7, #16]
 8018818:	78fa      	ldrb	r2, [r7, #3]
 801881a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801881c:	693b      	ldr	r3, [r7, #16]
 801881e:	78ba      	ldrb	r2, [r7, #2]
 8018820:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8018822:	693b      	ldr	r3, [r7, #16]
 8018824:	2200      	movs	r2, #0
 8018826:	711a      	strb	r2, [r3, #4]
 8018828:	2200      	movs	r2, #0
 801882a:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801882c:	693b      	ldr	r3, [r7, #16]
 801882e:	2200      	movs	r2, #0
 8018830:	719a      	strb	r2, [r3, #6]
 8018832:	2200      	movs	r2, #0
 8018834:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8018836:	69bb      	ldr	r3, [r7, #24]
 8018838:	685b      	ldr	r3, [r3, #4]
 801883a:	f103 0008 	add.w	r0, r3, #8
 801883e:	687b      	ldr	r3, [r7, #4]
 8018840:	685b      	ldr	r3, [r3, #4]
 8018842:	221c      	movs	r2, #28
 8018844:	4619      	mov	r1, r3
 8018846:	f001 fd4d 	bl	801a2e4 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801884a:	697b      	ldr	r3, [r7, #20]
 801884c:	68db      	ldr	r3, [r3, #12]
 801884e:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8018850:	f107 030c 	add.w	r3, r7, #12
 8018854:	4618      	mov	r0, r3
 8018856:	f000 f82f 	bl	80188b8 <ip4_route>
 801885a:	61f8      	str	r0, [r7, #28]
#endif
  if (netif != NULL) {
 801885c:	69fb      	ldr	r3, [r7, #28]
 801885e:	2b00      	cmp	r3, #0
 8018860:	d01b      	beq.n	801889a <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8018862:	693b      	ldr	r3, [r7, #16]
 8018864:	2200      	movs	r2, #0
 8018866:	709a      	strb	r2, [r3, #2]
 8018868:	2200      	movs	r2, #0
 801886a:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 801886c:	69bb      	ldr	r3, [r7, #24]
 801886e:	895b      	ldrh	r3, [r3, #10]
 8018870:	4619      	mov	r1, r3
 8018872:	6938      	ldr	r0, [r7, #16]
 8018874:	f7f4 ff16 	bl	800d6a4 <inet_chksum>
 8018878:	4603      	mov	r3, r0
 801887a:	461a      	mov	r2, r3
 801887c:	693b      	ldr	r3, [r7, #16]
 801887e:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8018880:	f107 020c 	add.w	r2, r7, #12
 8018884:	69fb      	ldr	r3, [r7, #28]
 8018886:	9302      	str	r3, [sp, #8]
 8018888:	2301      	movs	r3, #1
 801888a:	9301      	str	r3, [sp, #4]
 801888c:	2300      	movs	r3, #0
 801888e:	9300      	str	r3, [sp, #0]
 8018890:	23ff      	movs	r3, #255	; 0xff
 8018892:	2100      	movs	r1, #0
 8018894:	69b8      	ldr	r0, [r7, #24]
 8018896:	f000 f9f7 	bl	8018c88 <ip4_output_if>
  }
  pbuf_free(q);
 801889a:	69b8      	ldr	r0, [r7, #24]
 801889c:	f7f6 fadc 	bl	800ee58 <pbuf_free>
 80188a0:	e000      	b.n	80188a4 <icmp_send_response+0xd4>
    return;
 80188a2:	bf00      	nop
}
 80188a4:	3720      	adds	r7, #32
 80188a6:	46bd      	mov	sp, r7
 80188a8:	bd80      	pop	{r7, pc}
 80188aa:	bf00      	nop
 80188ac:	080205c0 	.word	0x080205c0
 80188b0:	0802068c 	.word	0x0802068c
 80188b4:	08020630 	.word	0x08020630

080188b8 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80188b8:	b480      	push	{r7}
 80188ba:	b085      	sub	sp, #20
 80188bc:	af00      	add	r7, sp, #0
 80188be:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 80188c0:	4b33      	ldr	r3, [pc, #204]	; (8018990 <ip4_route+0xd8>)
 80188c2:	681b      	ldr	r3, [r3, #0]
 80188c4:	60fb      	str	r3, [r7, #12]
 80188c6:	e036      	b.n	8018936 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80188c8:	68fb      	ldr	r3, [r7, #12]
 80188ca:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80188ce:	f003 0301 	and.w	r3, r3, #1
 80188d2:	b2db      	uxtb	r3, r3
 80188d4:	2b00      	cmp	r3, #0
 80188d6:	d02b      	beq.n	8018930 <ip4_route+0x78>
 80188d8:	68fb      	ldr	r3, [r7, #12]
 80188da:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80188de:	089b      	lsrs	r3, r3, #2
 80188e0:	f003 0301 	and.w	r3, r3, #1
 80188e4:	b2db      	uxtb	r3, r3
 80188e6:	2b00      	cmp	r3, #0
 80188e8:	d022      	beq.n	8018930 <ip4_route+0x78>
 80188ea:	68fb      	ldr	r3, [r7, #12]
 80188ec:	3304      	adds	r3, #4
 80188ee:	681b      	ldr	r3, [r3, #0]
 80188f0:	2b00      	cmp	r3, #0
 80188f2:	d01d      	beq.n	8018930 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80188f4:	687b      	ldr	r3, [r7, #4]
 80188f6:	681a      	ldr	r2, [r3, #0]
 80188f8:	68fb      	ldr	r3, [r7, #12]
 80188fa:	3304      	adds	r3, #4
 80188fc:	681b      	ldr	r3, [r3, #0]
 80188fe:	405a      	eors	r2, r3
 8018900:	68fb      	ldr	r3, [r7, #12]
 8018902:	3308      	adds	r3, #8
 8018904:	681b      	ldr	r3, [r3, #0]
 8018906:	4013      	ands	r3, r2
 8018908:	2b00      	cmp	r3, #0
 801890a:	d101      	bne.n	8018910 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801890c:	68fb      	ldr	r3, [r7, #12]
 801890e:	e038      	b.n	8018982 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8018910:	68fb      	ldr	r3, [r7, #12]
 8018912:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8018916:	f003 0302 	and.w	r3, r3, #2
 801891a:	2b00      	cmp	r3, #0
 801891c:	d108      	bne.n	8018930 <ip4_route+0x78>
 801891e:	687b      	ldr	r3, [r7, #4]
 8018920:	681a      	ldr	r2, [r3, #0]
 8018922:	68fb      	ldr	r3, [r7, #12]
 8018924:	330c      	adds	r3, #12
 8018926:	681b      	ldr	r3, [r3, #0]
 8018928:	429a      	cmp	r2, r3
 801892a:	d101      	bne.n	8018930 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801892c:	68fb      	ldr	r3, [r7, #12]
 801892e:	e028      	b.n	8018982 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8018930:	68fb      	ldr	r3, [r7, #12]
 8018932:	681b      	ldr	r3, [r3, #0]
 8018934:	60fb      	str	r3, [r7, #12]
 8018936:	68fb      	ldr	r3, [r7, #12]
 8018938:	2b00      	cmp	r3, #0
 801893a:	d1c5      	bne.n	80188c8 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801893c:	4b15      	ldr	r3, [pc, #84]	; (8018994 <ip4_route+0xdc>)
 801893e:	681b      	ldr	r3, [r3, #0]
 8018940:	2b00      	cmp	r3, #0
 8018942:	d01a      	beq.n	801897a <ip4_route+0xc2>
 8018944:	4b13      	ldr	r3, [pc, #76]	; (8018994 <ip4_route+0xdc>)
 8018946:	681b      	ldr	r3, [r3, #0]
 8018948:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801894c:	f003 0301 	and.w	r3, r3, #1
 8018950:	2b00      	cmp	r3, #0
 8018952:	d012      	beq.n	801897a <ip4_route+0xc2>
 8018954:	4b0f      	ldr	r3, [pc, #60]	; (8018994 <ip4_route+0xdc>)
 8018956:	681b      	ldr	r3, [r3, #0]
 8018958:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801895c:	f003 0304 	and.w	r3, r3, #4
 8018960:	2b00      	cmp	r3, #0
 8018962:	d00a      	beq.n	801897a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8018964:	4b0b      	ldr	r3, [pc, #44]	; (8018994 <ip4_route+0xdc>)
 8018966:	681b      	ldr	r3, [r3, #0]
 8018968:	3304      	adds	r3, #4
 801896a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801896c:	2b00      	cmp	r3, #0
 801896e:	d004      	beq.n	801897a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8018970:	687b      	ldr	r3, [r7, #4]
 8018972:	681b      	ldr	r3, [r3, #0]
 8018974:	b2db      	uxtb	r3, r3
 8018976:	2b7f      	cmp	r3, #127	; 0x7f
 8018978:	d101      	bne.n	801897e <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801897a:	2300      	movs	r3, #0
 801897c:	e001      	b.n	8018982 <ip4_route+0xca>
  }

  return netif_default;
 801897e:	4b05      	ldr	r3, [pc, #20]	; (8018994 <ip4_route+0xdc>)
 8018980:	681b      	ldr	r3, [r3, #0]
}
 8018982:	4618      	mov	r0, r3
 8018984:	3714      	adds	r7, #20
 8018986:	46bd      	mov	sp, r7
 8018988:	f85d 7b04 	ldr.w	r7, [sp], #4
 801898c:	4770      	bx	lr
 801898e:	bf00      	nop
 8018990:	20013ccc 	.word	0x20013ccc
 8018994:	20013cd0 	.word	0x20013cd0

08018998 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8018998:	b580      	push	{r7, lr}
 801899a:	b082      	sub	sp, #8
 801899c:	af00      	add	r7, sp, #0
 801899e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80189a0:	687b      	ldr	r3, [r7, #4]
 80189a2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80189a6:	f003 0301 	and.w	r3, r3, #1
 80189aa:	b2db      	uxtb	r3, r3
 80189ac:	2b00      	cmp	r3, #0
 80189ae:	d016      	beq.n	80189de <ip4_input_accept+0x46>
 80189b0:	687b      	ldr	r3, [r7, #4]
 80189b2:	3304      	adds	r3, #4
 80189b4:	681b      	ldr	r3, [r3, #0]
 80189b6:	2b00      	cmp	r3, #0
 80189b8:	d011      	beq.n	80189de <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80189ba:	4b0b      	ldr	r3, [pc, #44]	; (80189e8 <ip4_input_accept+0x50>)
 80189bc:	695a      	ldr	r2, [r3, #20]
 80189be:	687b      	ldr	r3, [r7, #4]
 80189c0:	3304      	adds	r3, #4
 80189c2:	681b      	ldr	r3, [r3, #0]
 80189c4:	429a      	cmp	r2, r3
 80189c6:	d008      	beq.n	80189da <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80189c8:	4b07      	ldr	r3, [pc, #28]	; (80189e8 <ip4_input_accept+0x50>)
 80189ca:	695b      	ldr	r3, [r3, #20]
 80189cc:	6879      	ldr	r1, [r7, #4]
 80189ce:	4618      	mov	r0, r3
 80189d0:	f000 fa98 	bl	8018f04 <ip4_addr_isbroadcast_u32>
 80189d4:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80189d6:	2b00      	cmp	r3, #0
 80189d8:	d001      	beq.n	80189de <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 80189da:	2301      	movs	r3, #1
 80189dc:	e000      	b.n	80189e0 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 80189de:	2300      	movs	r3, #0
}
 80189e0:	4618      	mov	r0, r3
 80189e2:	3708      	adds	r7, #8
 80189e4:	46bd      	mov	sp, r7
 80189e6:	bd80      	pop	{r7, pc}
 80189e8:	2000a264 	.word	0x2000a264

080189ec <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80189ec:	b580      	push	{r7, lr}
 80189ee:	b088      	sub	sp, #32
 80189f0:	af00      	add	r7, sp, #0
 80189f2:	6078      	str	r0, [r7, #4]
 80189f4:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 80189f6:	2301      	movs	r3, #1
 80189f8:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 80189fa:	687b      	ldr	r3, [r7, #4]
 80189fc:	685b      	ldr	r3, [r3, #4]
 80189fe:	613b      	str	r3, [r7, #16]
  if (IPH_V(iphdr) != 4) {
 8018a00:	693b      	ldr	r3, [r7, #16]
 8018a02:	781b      	ldrb	r3, [r3, #0]
 8018a04:	091b      	lsrs	r3, r3, #4
 8018a06:	b2db      	uxtb	r3, r3
 8018a08:	2b04      	cmp	r3, #4
 8018a0a:	d004      	beq.n	8018a16 <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8018a0c:	6878      	ldr	r0, [r7, #4]
 8018a0e:	f7f6 fa23 	bl	800ee58 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8018a12:	2300      	movs	r3, #0
 8018a14:	e130      	b.n	8018c78 <ip4_input+0x28c>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8018a16:	693b      	ldr	r3, [r7, #16]
 8018a18:	781b      	ldrb	r3, [r3, #0]
 8018a1a:	f003 030f 	and.w	r3, r3, #15
 8018a1e:	b2db      	uxtb	r3, r3
 8018a20:	009b      	lsls	r3, r3, #2
 8018a22:	b2db      	uxtb	r3, r3
 8018a24:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8018a26:	693b      	ldr	r3, [r7, #16]
 8018a28:	885b      	ldrh	r3, [r3, #2]
 8018a2a:	b29b      	uxth	r3, r3
 8018a2c:	4618      	mov	r0, r3
 8018a2e:	f7f4 fcf1 	bl	800d414 <lwip_htons>
 8018a32:	4603      	mov	r3, r0
 8018a34:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8018a36:	687b      	ldr	r3, [r7, #4]
 8018a38:	891b      	ldrh	r3, [r3, #8]
 8018a3a:	89ba      	ldrh	r2, [r7, #12]
 8018a3c:	429a      	cmp	r2, r3
 8018a3e:	d204      	bcs.n	8018a4a <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 8018a40:	89bb      	ldrh	r3, [r7, #12]
 8018a42:	4619      	mov	r1, r3
 8018a44:	6878      	ldr	r0, [r7, #4]
 8018a46:	f7f6 f881 	bl	800eb4c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8018a4a:	687b      	ldr	r3, [r7, #4]
 8018a4c:	895b      	ldrh	r3, [r3, #10]
 8018a4e:	89fa      	ldrh	r2, [r7, #14]
 8018a50:	429a      	cmp	r2, r3
 8018a52:	d807      	bhi.n	8018a64 <ip4_input+0x78>
 8018a54:	687b      	ldr	r3, [r7, #4]
 8018a56:	891b      	ldrh	r3, [r3, #8]
 8018a58:	89ba      	ldrh	r2, [r7, #12]
 8018a5a:	429a      	cmp	r2, r3
 8018a5c:	d802      	bhi.n	8018a64 <ip4_input+0x78>
 8018a5e:	89fb      	ldrh	r3, [r7, #14]
 8018a60:	2b13      	cmp	r3, #19
 8018a62:	d804      	bhi.n	8018a6e <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8018a64:	6878      	ldr	r0, [r7, #4]
 8018a66:	f7f6 f9f7 	bl	800ee58 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8018a6a:	2300      	movs	r3, #0
 8018a6c:	e104      	b.n	8018c78 <ip4_input+0x28c>
  }

  /* verify checksum */
#if CHECKSUM_CHECK_IP
  IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_IP) {
    if (inet_chksum(iphdr, iphdr_hlen) != 0) {
 8018a6e:	89fb      	ldrh	r3, [r7, #14]
 8018a70:	4619      	mov	r1, r3
 8018a72:	6938      	ldr	r0, [r7, #16]
 8018a74:	f7f4 fe16 	bl	800d6a4 <inet_chksum>
 8018a78:	4603      	mov	r3, r0
 8018a7a:	2b00      	cmp	r3, #0
 8018a7c:	d004      	beq.n	8018a88 <ip4_input+0x9c>

      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("Checksum (0x%"X16_F") failed, IP packet dropped.\n", inet_chksum(iphdr, iphdr_hlen)));
      ip4_debug_print(p);
      pbuf_free(p);
 8018a7e:	6878      	ldr	r0, [r7, #4]
 8018a80:	f7f6 f9ea 	bl	800ee58 <pbuf_free>
      IP_STATS_INC(ip.chkerr);
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinhdrerrors);
      return ERR_OK;
 8018a84:	2300      	movs	r3, #0
 8018a86:	e0f7      	b.n	8018c78 <ip4_input+0x28c>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8018a88:	693b      	ldr	r3, [r7, #16]
 8018a8a:	691b      	ldr	r3, [r3, #16]
 8018a8c:	4a7c      	ldr	r2, [pc, #496]	; (8018c80 <ip4_input+0x294>)
 8018a8e:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8018a90:	693b      	ldr	r3, [r7, #16]
 8018a92:	68db      	ldr	r3, [r3, #12]
 8018a94:	4a7a      	ldr	r2, [pc, #488]	; (8018c80 <ip4_input+0x294>)
 8018a96:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8018a98:	4b79      	ldr	r3, [pc, #484]	; (8018c80 <ip4_input+0x294>)
 8018a9a:	695b      	ldr	r3, [r3, #20]
 8018a9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8018aa0:	2be0      	cmp	r3, #224	; 0xe0
 8018aa2:	d112      	bne.n	8018aca <ip4_input+0xde>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8018aa4:	683b      	ldr	r3, [r7, #0]
 8018aa6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8018aaa:	f003 0301 	and.w	r3, r3, #1
 8018aae:	b2db      	uxtb	r3, r3
 8018ab0:	2b00      	cmp	r3, #0
 8018ab2:	d007      	beq.n	8018ac4 <ip4_input+0xd8>
 8018ab4:	683b      	ldr	r3, [r7, #0]
 8018ab6:	3304      	adds	r3, #4
 8018ab8:	681b      	ldr	r3, [r3, #0]
 8018aba:	2b00      	cmp	r3, #0
 8018abc:	d002      	beq.n	8018ac4 <ip4_input+0xd8>
      netif = inp;
 8018abe:	683b      	ldr	r3, [r7, #0]
 8018ac0:	61fb      	str	r3, [r7, #28]
 8018ac2:	e02a      	b.n	8018b1a <ip4_input+0x12e>
    } else {
      netif = NULL;
 8018ac4:	2300      	movs	r3, #0
 8018ac6:	61fb      	str	r3, [r7, #28]
 8018ac8:	e027      	b.n	8018b1a <ip4_input+0x12e>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8018aca:	6838      	ldr	r0, [r7, #0]
 8018acc:	f7ff ff64 	bl	8018998 <ip4_input_accept>
 8018ad0:	4603      	mov	r3, r0
 8018ad2:	2b00      	cmp	r3, #0
 8018ad4:	d002      	beq.n	8018adc <ip4_input+0xf0>
      netif = inp;
 8018ad6:	683b      	ldr	r3, [r7, #0]
 8018ad8:	61fb      	str	r3, [r7, #28]
 8018ada:	e01e      	b.n	8018b1a <ip4_input+0x12e>
    } else {
      netif = NULL;
 8018adc:	2300      	movs	r3, #0
 8018ade:	61fb      	str	r3, [r7, #28]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8018ae0:	4b67      	ldr	r3, [pc, #412]	; (8018c80 <ip4_input+0x294>)
 8018ae2:	695b      	ldr	r3, [r3, #20]
 8018ae4:	b2db      	uxtb	r3, r3
 8018ae6:	2b7f      	cmp	r3, #127	; 0x7f
 8018ae8:	d017      	beq.n	8018b1a <ip4_input+0x12e>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8018aea:	4b66      	ldr	r3, [pc, #408]	; (8018c84 <ip4_input+0x298>)
 8018aec:	681b      	ldr	r3, [r3, #0]
 8018aee:	61fb      	str	r3, [r7, #28]
 8018af0:	e00e      	b.n	8018b10 <ip4_input+0x124>
          if (netif == inp) {
 8018af2:	69fa      	ldr	r2, [r7, #28]
 8018af4:	683b      	ldr	r3, [r7, #0]
 8018af6:	429a      	cmp	r2, r3
 8018af8:	d006      	beq.n	8018b08 <ip4_input+0x11c>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8018afa:	69f8      	ldr	r0, [r7, #28]
 8018afc:	f7ff ff4c 	bl	8018998 <ip4_input_accept>
 8018b00:	4603      	mov	r3, r0
 8018b02:	2b00      	cmp	r3, #0
 8018b04:	d108      	bne.n	8018b18 <ip4_input+0x12c>
 8018b06:	e000      	b.n	8018b0a <ip4_input+0x11e>
            continue;
 8018b08:	bf00      	nop
        NETIF_FOREACH(netif) {
 8018b0a:	69fb      	ldr	r3, [r7, #28]
 8018b0c:	681b      	ldr	r3, [r3, #0]
 8018b0e:	61fb      	str	r3, [r7, #28]
 8018b10:	69fb      	ldr	r3, [r7, #28]
 8018b12:	2b00      	cmp	r3, #0
 8018b14:	d1ed      	bne.n	8018af2 <ip4_input+0x106>
 8018b16:	e000      	b.n	8018b1a <ip4_input+0x12e>
            break;
 8018b18:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 8018b1a:	69fb      	ldr	r3, [r7, #28]
 8018b1c:	2b00      	cmp	r3, #0
 8018b1e:	d111      	bne.n	8018b44 <ip4_input+0x158>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8018b20:	693b      	ldr	r3, [r7, #16]
 8018b22:	7a5b      	ldrb	r3, [r3, #9]
 8018b24:	2b11      	cmp	r3, #17
 8018b26:	d10d      	bne.n	8018b44 <ip4_input+0x158>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 8018b28:	89fb      	ldrh	r3, [r7, #14]
 8018b2a:	693a      	ldr	r2, [r7, #16]
 8018b2c:	4413      	add	r3, r2
 8018b2e:	61bb      	str	r3, [r7, #24]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8018b30:	69bb      	ldr	r3, [r7, #24]
 8018b32:	885b      	ldrh	r3, [r3, #2]
 8018b34:	b29b      	uxth	r3, r3
 8018b36:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 8018b3a:	d103      	bne.n	8018b44 <ip4_input+0x158>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 8018b3c:	683b      	ldr	r3, [r7, #0]
 8018b3e:	61fb      	str	r3, [r7, #28]
        check_ip_src = 0;
 8018b40:	2300      	movs	r3, #0
 8018b42:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 8018b44:	697b      	ldr	r3, [r7, #20]
 8018b46:	2b00      	cmp	r3, #0
 8018b48:	d017      	beq.n	8018b7a <ip4_input+0x18e>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8018b4a:	4b4d      	ldr	r3, [pc, #308]	; (8018c80 <ip4_input+0x294>)
 8018b4c:	691b      	ldr	r3, [r3, #16]
 8018b4e:	2b00      	cmp	r3, #0
 8018b50:	d013      	beq.n	8018b7a <ip4_input+0x18e>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8018b52:	4b4b      	ldr	r3, [pc, #300]	; (8018c80 <ip4_input+0x294>)
 8018b54:	691b      	ldr	r3, [r3, #16]
 8018b56:	6839      	ldr	r1, [r7, #0]
 8018b58:	4618      	mov	r0, r3
 8018b5a:	f000 f9d3 	bl	8018f04 <ip4_addr_isbroadcast_u32>
 8018b5e:	4603      	mov	r3, r0
 8018b60:	2b00      	cmp	r3, #0
 8018b62:	d105      	bne.n	8018b70 <ip4_input+0x184>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8018b64:	4b46      	ldr	r3, [pc, #280]	; (8018c80 <ip4_input+0x294>)
 8018b66:	691b      	ldr	r3, [r3, #16]
 8018b68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8018b6c:	2be0      	cmp	r3, #224	; 0xe0
 8018b6e:	d104      	bne.n	8018b7a <ip4_input+0x18e>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8018b70:	6878      	ldr	r0, [r7, #4]
 8018b72:	f7f6 f971 	bl	800ee58 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8018b76:	2300      	movs	r3, #0
 8018b78:	e07e      	b.n	8018c78 <ip4_input+0x28c>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8018b7a:	69fb      	ldr	r3, [r7, #28]
 8018b7c:	2b00      	cmp	r3, #0
 8018b7e:	d104      	bne.n	8018b8a <ip4_input+0x19e>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8018b80:	6878      	ldr	r0, [r7, #4]
 8018b82:	f7f6 f969 	bl	800ee58 <pbuf_free>
    return ERR_OK;
 8018b86:	2300      	movs	r3, #0
 8018b88:	e076      	b.n	8018c78 <ip4_input+0x28c>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8018b8a:	693b      	ldr	r3, [r7, #16]
 8018b8c:	88db      	ldrh	r3, [r3, #6]
 8018b8e:	b29b      	uxth	r3, r3
 8018b90:	461a      	mov	r2, r3
 8018b92:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8018b96:	4013      	ands	r3, r2
 8018b98:	2b00      	cmp	r3, #0
 8018b9a:	d00b      	beq.n	8018bb4 <ip4_input+0x1c8>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8018b9c:	6878      	ldr	r0, [r7, #4]
 8018b9e:	f000 fe21 	bl	80197e4 <ip4_reass>
 8018ba2:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8018ba4:	687b      	ldr	r3, [r7, #4]
 8018ba6:	2b00      	cmp	r3, #0
 8018ba8:	d101      	bne.n	8018bae <ip4_input+0x1c2>
      return ERR_OK;
 8018baa:	2300      	movs	r3, #0
 8018bac:	e064      	b.n	8018c78 <ip4_input+0x28c>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8018bae:	687b      	ldr	r3, [r7, #4]
 8018bb0:	685b      	ldr	r3, [r3, #4]
 8018bb2:	613b      	str	r3, [r7, #16]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8018bb4:	4a32      	ldr	r2, [pc, #200]	; (8018c80 <ip4_input+0x294>)
 8018bb6:	69fb      	ldr	r3, [r7, #28]
 8018bb8:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8018bba:	4a31      	ldr	r2, [pc, #196]	; (8018c80 <ip4_input+0x294>)
 8018bbc:	683b      	ldr	r3, [r7, #0]
 8018bbe:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8018bc0:	4a2f      	ldr	r2, [pc, #188]	; (8018c80 <ip4_input+0x294>)
 8018bc2:	693b      	ldr	r3, [r7, #16]
 8018bc4:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8018bc6:	693b      	ldr	r3, [r7, #16]
 8018bc8:	781b      	ldrb	r3, [r3, #0]
 8018bca:	f003 030f 	and.w	r3, r3, #15
 8018bce:	b2db      	uxtb	r3, r3
 8018bd0:	009b      	lsls	r3, r3, #2
 8018bd2:	b2db      	uxtb	r3, r3
 8018bd4:	b29a      	uxth	r2, r3
 8018bd6:	4b2a      	ldr	r3, [pc, #168]	; (8018c80 <ip4_input+0x294>)
 8018bd8:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8018bda:	89fb      	ldrh	r3, [r7, #14]
 8018bdc:	4619      	mov	r1, r3
 8018bde:	6878      	ldr	r0, [r7, #4]
 8018be0:	f7f6 f8b4 	bl	800ed4c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8018be4:	693b      	ldr	r3, [r7, #16]
 8018be6:	7a5b      	ldrb	r3, [r3, #9]
 8018be8:	2b11      	cmp	r3, #17
 8018bea:	d006      	beq.n	8018bfa <ip4_input+0x20e>
 8018bec:	2b11      	cmp	r3, #17
 8018bee:	dc13      	bgt.n	8018c18 <ip4_input+0x22c>
 8018bf0:	2b01      	cmp	r3, #1
 8018bf2:	d00c      	beq.n	8018c0e <ip4_input+0x222>
 8018bf4:	2b06      	cmp	r3, #6
 8018bf6:	d005      	beq.n	8018c04 <ip4_input+0x218>
 8018bf8:	e00e      	b.n	8018c18 <ip4_input+0x22c>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8018bfa:	6839      	ldr	r1, [r7, #0]
 8018bfc:	6878      	ldr	r0, [r7, #4]
 8018bfe:	f7fc f939 	bl	8014e74 <udp_input>
        break;
 8018c02:	e026      	b.n	8018c52 <ip4_input+0x266>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8018c04:	6839      	ldr	r1, [r7, #0]
 8018c06:	6878      	ldr	r0, [r7, #4]
 8018c08:	f7f8 f902 	bl	8010e10 <tcp_input>
        break;
 8018c0c:	e021      	b.n	8018c52 <ip4_input+0x266>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8018c0e:	6839      	ldr	r1, [r7, #0]
 8018c10:	6878      	ldr	r0, [r7, #4]
 8018c12:	f7ff fc8f 	bl	8018534 <icmp_input>
        break;
 8018c16:	e01c      	b.n	8018c52 <ip4_input+0x266>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8018c18:	4b19      	ldr	r3, [pc, #100]	; (8018c80 <ip4_input+0x294>)
 8018c1a:	695b      	ldr	r3, [r3, #20]
 8018c1c:	69f9      	ldr	r1, [r7, #28]
 8018c1e:	4618      	mov	r0, r3
 8018c20:	f000 f970 	bl	8018f04 <ip4_addr_isbroadcast_u32>
 8018c24:	4603      	mov	r3, r0
 8018c26:	2b00      	cmp	r3, #0
 8018c28:	d10f      	bne.n	8018c4a <ip4_input+0x25e>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8018c2a:	4b15      	ldr	r3, [pc, #84]	; (8018c80 <ip4_input+0x294>)
 8018c2c:	695b      	ldr	r3, [r3, #20]
 8018c2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8018c32:	2be0      	cmp	r3, #224	; 0xe0
 8018c34:	d009      	beq.n	8018c4a <ip4_input+0x25e>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8018c36:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8018c3a:	4619      	mov	r1, r3
 8018c3c:	6878      	ldr	r0, [r7, #4]
 8018c3e:	f7f6 f8f8 	bl	800ee32 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8018c42:	2102      	movs	r1, #2
 8018c44:	6878      	ldr	r0, [r7, #4]
 8018c46:	f7ff fda3 	bl	8018790 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8018c4a:	6878      	ldr	r0, [r7, #4]
 8018c4c:	f7f6 f904 	bl	800ee58 <pbuf_free>
        break;
 8018c50:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8018c52:	4b0b      	ldr	r3, [pc, #44]	; (8018c80 <ip4_input+0x294>)
 8018c54:	2200      	movs	r2, #0
 8018c56:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8018c58:	4b09      	ldr	r3, [pc, #36]	; (8018c80 <ip4_input+0x294>)
 8018c5a:	2200      	movs	r2, #0
 8018c5c:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8018c5e:	4b08      	ldr	r3, [pc, #32]	; (8018c80 <ip4_input+0x294>)
 8018c60:	2200      	movs	r2, #0
 8018c62:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8018c64:	4b06      	ldr	r3, [pc, #24]	; (8018c80 <ip4_input+0x294>)
 8018c66:	2200      	movs	r2, #0
 8018c68:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8018c6a:	4b05      	ldr	r3, [pc, #20]	; (8018c80 <ip4_input+0x294>)
 8018c6c:	2200      	movs	r2, #0
 8018c6e:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8018c70:	4b03      	ldr	r3, [pc, #12]	; (8018c80 <ip4_input+0x294>)
 8018c72:	2200      	movs	r2, #0
 8018c74:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8018c76:	2300      	movs	r3, #0
}
 8018c78:	4618      	mov	r0, r3
 8018c7a:	3720      	adds	r7, #32
 8018c7c:	46bd      	mov	sp, r7
 8018c7e:	bd80      	pop	{r7, pc}
 8018c80:	2000a264 	.word	0x2000a264
 8018c84:	20013ccc 	.word	0x20013ccc

08018c88 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8018c88:	b580      	push	{r7, lr}
 8018c8a:	b08a      	sub	sp, #40	; 0x28
 8018c8c:	af04      	add	r7, sp, #16
 8018c8e:	60f8      	str	r0, [r7, #12]
 8018c90:	60b9      	str	r1, [r7, #8]
 8018c92:	607a      	str	r2, [r7, #4]
 8018c94:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8018c96:	68bb      	ldr	r3, [r7, #8]
 8018c98:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8018c9a:	687b      	ldr	r3, [r7, #4]
 8018c9c:	2b00      	cmp	r3, #0
 8018c9e:	d009      	beq.n	8018cb4 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8018ca0:	68bb      	ldr	r3, [r7, #8]
 8018ca2:	2b00      	cmp	r3, #0
 8018ca4:	d003      	beq.n	8018cae <ip4_output_if+0x26>
 8018ca6:	68bb      	ldr	r3, [r7, #8]
 8018ca8:	681b      	ldr	r3, [r3, #0]
 8018caa:	2b00      	cmp	r3, #0
 8018cac:	d102      	bne.n	8018cb4 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8018cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018cb0:	3304      	adds	r3, #4
 8018cb2:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8018cb4:	78fa      	ldrb	r2, [r7, #3]
 8018cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018cb8:	9302      	str	r3, [sp, #8]
 8018cba:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8018cbe:	9301      	str	r3, [sp, #4]
 8018cc0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8018cc4:	9300      	str	r3, [sp, #0]
 8018cc6:	4613      	mov	r3, r2
 8018cc8:	687a      	ldr	r2, [r7, #4]
 8018cca:	6979      	ldr	r1, [r7, #20]
 8018ccc:	68f8      	ldr	r0, [r7, #12]
 8018cce:	f000 f805 	bl	8018cdc <ip4_output_if_src>
 8018cd2:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8018cd4:	4618      	mov	r0, r3
 8018cd6:	3718      	adds	r7, #24
 8018cd8:	46bd      	mov	sp, r7
 8018cda:	bd80      	pop	{r7, pc}

08018cdc <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8018cdc:	b580      	push	{r7, lr}
 8018cde:	b088      	sub	sp, #32
 8018ce0:	af00      	add	r7, sp, #0
 8018ce2:	60f8      	str	r0, [r7, #12]
 8018ce4:	60b9      	str	r1, [r7, #8]
 8018ce6:	607a      	str	r2, [r7, #4]
 8018ce8:	70fb      	strb	r3, [r7, #3]
{
#endif /* IP_OPTIONS_SEND */
  struct ip_hdr *iphdr;
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
 8018cea:	2300      	movs	r3, #0
 8018cec:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8018cee:	68fb      	ldr	r3, [r7, #12]
 8018cf0:	7b9b      	ldrb	r3, [r3, #14]
 8018cf2:	2b01      	cmp	r3, #1
 8018cf4:	d006      	beq.n	8018d04 <ip4_output_if_src+0x28>
 8018cf6:	4b7d      	ldr	r3, [pc, #500]	; (8018eec <ip4_output_if_src+0x210>)
 8018cf8:	f44f 7255 	mov.w	r2, #852	; 0x354
 8018cfc:	497c      	ldr	r1, [pc, #496]	; (8018ef0 <ip4_output_if_src+0x214>)
 8018cfe:	487d      	ldr	r0, [pc, #500]	; (8018ef4 <ip4_output_if_src+0x218>)
 8018d00:	f002 f866 	bl	801add0 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8018d04:	687b      	ldr	r3, [r7, #4]
 8018d06:	2b00      	cmp	r3, #0
 8018d08:	f000 80c4 	beq.w	8018e94 <ip4_output_if_src+0x1b8>
    u16_t ip_hlen = IP_HLEN;
 8018d0c:	2314      	movs	r3, #20
 8018d0e:	82fb      	strh	r3, [r7, #22]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8018d10:	2114      	movs	r1, #20
 8018d12:	68f8      	ldr	r0, [r7, #12]
 8018d14:	f7f6 f80a 	bl	800ed2c <pbuf_add_header>
 8018d18:	4603      	mov	r3, r0
 8018d1a:	2b00      	cmp	r3, #0
 8018d1c:	d002      	beq.n	8018d24 <ip4_output_if_src+0x48>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8018d1e:	f06f 0301 	mvn.w	r3, #1
 8018d22:	e0df      	b.n	8018ee4 <ip4_output_if_src+0x208>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8018d24:	68fb      	ldr	r3, [r7, #12]
 8018d26:	685b      	ldr	r3, [r3, #4]
 8018d28:	61bb      	str	r3, [r7, #24]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8018d2a:	68fb      	ldr	r3, [r7, #12]
 8018d2c:	895b      	ldrh	r3, [r3, #10]
 8018d2e:	2b13      	cmp	r3, #19
 8018d30:	d806      	bhi.n	8018d40 <ip4_output_if_src+0x64>
 8018d32:	4b6e      	ldr	r3, [pc, #440]	; (8018eec <ip4_output_if_src+0x210>)
 8018d34:	f44f 7262 	mov.w	r2, #904	; 0x388
 8018d38:	496f      	ldr	r1, [pc, #444]	; (8018ef8 <ip4_output_if_src+0x21c>)
 8018d3a:	486e      	ldr	r0, [pc, #440]	; (8018ef4 <ip4_output_if_src+0x218>)
 8018d3c:	f002 f848 	bl	801add0 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8018d40:	69bb      	ldr	r3, [r7, #24]
 8018d42:	78fa      	ldrb	r2, [r7, #3]
 8018d44:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8018d46:	69bb      	ldr	r3, [r7, #24]
 8018d48:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8018d4c:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
 8018d4e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8018d52:	78fb      	ldrb	r3, [r7, #3]
 8018d54:	021b      	lsls	r3, r3, #8
 8018d56:	4313      	orrs	r3, r2
 8018d58:	021b      	lsls	r3, r3, #8
 8018d5a:	b21a      	sxth	r2, r3
 8018d5c:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 8018d60:	78fb      	ldrb	r3, [r7, #3]
 8018d62:	021b      	lsls	r3, r3, #8
 8018d64:	430b      	orrs	r3, r1
 8018d66:	121b      	asrs	r3, r3, #8
 8018d68:	b21b      	sxth	r3, r3
 8018d6a:	b2db      	uxtb	r3, r3
 8018d6c:	b21b      	sxth	r3, r3
 8018d6e:	4313      	orrs	r3, r2
 8018d70:	b21b      	sxth	r3, r3
 8018d72:	b29b      	uxth	r3, r3
 8018d74:	461a      	mov	r2, r3
 8018d76:	69fb      	ldr	r3, [r7, #28]
 8018d78:	4413      	add	r3, r2
 8018d7a:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8018d7c:	687b      	ldr	r3, [r7, #4]
 8018d7e:	681a      	ldr	r2, [r3, #0]
 8018d80:	69bb      	ldr	r3, [r7, #24]
 8018d82:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
 8018d84:	69bb      	ldr	r3, [r7, #24]
 8018d86:	691b      	ldr	r3, [r3, #16]
 8018d88:	b29b      	uxth	r3, r3
 8018d8a:	69fa      	ldr	r2, [r7, #28]
 8018d8c:	4413      	add	r3, r2
 8018d8e:	61fb      	str	r3, [r7, #28]
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
 8018d90:	69bb      	ldr	r3, [r7, #24]
 8018d92:	691b      	ldr	r3, [r3, #16]
 8018d94:	0c1b      	lsrs	r3, r3, #16
 8018d96:	69fa      	ldr	r2, [r7, #28]
 8018d98:	4413      	add	r3, r2
 8018d9a:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8018d9c:	8afb      	ldrh	r3, [r7, #22]
 8018d9e:	089b      	lsrs	r3, r3, #2
 8018da0:	b29b      	uxth	r3, r3
 8018da2:	b2db      	uxtb	r3, r3
 8018da4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018da8:	b2da      	uxtb	r2, r3
 8018daa:	69bb      	ldr	r3, [r7, #24]
 8018dac:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8018dae:	69bb      	ldr	r3, [r7, #24]
 8018db0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8018db4:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
 8018db6:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8018dba:	69bb      	ldr	r3, [r7, #24]
 8018dbc:	781b      	ldrb	r3, [r3, #0]
 8018dbe:	021b      	lsls	r3, r3, #8
 8018dc0:	4313      	orrs	r3, r2
 8018dc2:	021b      	lsls	r3, r3, #8
 8018dc4:	b21a      	sxth	r2, r3
 8018dc6:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 8018dca:	69bb      	ldr	r3, [r7, #24]
 8018dcc:	781b      	ldrb	r3, [r3, #0]
 8018dce:	021b      	lsls	r3, r3, #8
 8018dd0:	430b      	orrs	r3, r1
 8018dd2:	121b      	asrs	r3, r3, #8
 8018dd4:	b21b      	sxth	r3, r3
 8018dd6:	b2db      	uxtb	r3, r3
 8018dd8:	b21b      	sxth	r3, r3
 8018dda:	4313      	orrs	r3, r2
 8018ddc:	b21b      	sxth	r3, r3
 8018dde:	b29b      	uxth	r3, r3
 8018de0:	461a      	mov	r2, r3
 8018de2:	69fb      	ldr	r3, [r7, #28]
 8018de4:	4413      	add	r3, r2
 8018de6:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8018de8:	68fb      	ldr	r3, [r7, #12]
 8018dea:	891b      	ldrh	r3, [r3, #8]
 8018dec:	4618      	mov	r0, r3
 8018dee:	f7f4 fb11 	bl	800d414 <lwip_htons>
 8018df2:	4603      	mov	r3, r0
 8018df4:	461a      	mov	r2, r3
 8018df6:	69bb      	ldr	r3, [r7, #24]
 8018df8:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
 8018dfa:	69bb      	ldr	r3, [r7, #24]
 8018dfc:	885b      	ldrh	r3, [r3, #2]
 8018dfe:	b29b      	uxth	r3, r3
 8018e00:	461a      	mov	r2, r3
 8018e02:	69fb      	ldr	r3, [r7, #28]
 8018e04:	4413      	add	r3, r2
 8018e06:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8018e08:	69bb      	ldr	r3, [r7, #24]
 8018e0a:	2200      	movs	r2, #0
 8018e0c:	719a      	strb	r2, [r3, #6]
 8018e0e:	2200      	movs	r2, #0
 8018e10:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8018e12:	4b3a      	ldr	r3, [pc, #232]	; (8018efc <ip4_output_if_src+0x220>)
 8018e14:	881b      	ldrh	r3, [r3, #0]
 8018e16:	4618      	mov	r0, r3
 8018e18:	f7f4 fafc 	bl	800d414 <lwip_htons>
 8018e1c:	4603      	mov	r3, r0
 8018e1e:	461a      	mov	r2, r3
 8018e20:	69bb      	ldr	r3, [r7, #24]
 8018e22:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
 8018e24:	69bb      	ldr	r3, [r7, #24]
 8018e26:	889b      	ldrh	r3, [r3, #4]
 8018e28:	b29b      	uxth	r3, r3
 8018e2a:	461a      	mov	r2, r3
 8018e2c:	69fb      	ldr	r3, [r7, #28]
 8018e2e:	4413      	add	r3, r2
 8018e30:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8018e32:	4b32      	ldr	r3, [pc, #200]	; (8018efc <ip4_output_if_src+0x220>)
 8018e34:	881b      	ldrh	r3, [r3, #0]
 8018e36:	3301      	adds	r3, #1
 8018e38:	b29a      	uxth	r2, r3
 8018e3a:	4b30      	ldr	r3, [pc, #192]	; (8018efc <ip4_output_if_src+0x220>)
 8018e3c:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8018e3e:	68bb      	ldr	r3, [r7, #8]
 8018e40:	2b00      	cmp	r3, #0
 8018e42:	d104      	bne.n	8018e4e <ip4_output_if_src+0x172>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8018e44:	4b2e      	ldr	r3, [pc, #184]	; (8018f00 <ip4_output_if_src+0x224>)
 8018e46:	681a      	ldr	r2, [r3, #0]
 8018e48:	69bb      	ldr	r3, [r7, #24]
 8018e4a:	60da      	str	r2, [r3, #12]
 8018e4c:	e003      	b.n	8018e56 <ip4_output_if_src+0x17a>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8018e4e:	68bb      	ldr	r3, [r7, #8]
 8018e50:	681a      	ldr	r2, [r3, #0]
 8018e52:	69bb      	ldr	r3, [r7, #24]
 8018e54:	60da      	str	r2, [r3, #12]
    }

#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->src) & 0xFFFF;
 8018e56:	69bb      	ldr	r3, [r7, #24]
 8018e58:	68db      	ldr	r3, [r3, #12]
 8018e5a:	b29b      	uxth	r3, r3
 8018e5c:	69fa      	ldr	r2, [r7, #28]
 8018e5e:	4413      	add	r3, r2
 8018e60:	61fb      	str	r3, [r7, #28]
    chk_sum += ip4_addr_get_u32(&iphdr->src) >> 16;
 8018e62:	69bb      	ldr	r3, [r7, #24]
 8018e64:	68db      	ldr	r3, [r3, #12]
 8018e66:	0c1b      	lsrs	r3, r3, #16
 8018e68:	69fa      	ldr	r2, [r7, #28]
 8018e6a:	4413      	add	r3, r2
 8018e6c:	61fb      	str	r3, [r7, #28]
    chk_sum = (chk_sum >> 16) + (chk_sum & 0xFFFF);
 8018e6e:	69fb      	ldr	r3, [r7, #28]
 8018e70:	0c1a      	lsrs	r2, r3, #16
 8018e72:	69fb      	ldr	r3, [r7, #28]
 8018e74:	b29b      	uxth	r3, r3
 8018e76:	4413      	add	r3, r2
 8018e78:	61fb      	str	r3, [r7, #28]
    chk_sum = (chk_sum >> 16) + chk_sum;
 8018e7a:	69fb      	ldr	r3, [r7, #28]
 8018e7c:	0c1b      	lsrs	r3, r3, #16
 8018e7e:	69fa      	ldr	r2, [r7, #28]
 8018e80:	4413      	add	r3, r2
 8018e82:	61fb      	str	r3, [r7, #28]
    chk_sum = ~chk_sum;
 8018e84:	69fb      	ldr	r3, [r7, #28]
 8018e86:	43db      	mvns	r3, r3
 8018e88:	61fb      	str	r3, [r7, #28]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_IP) {
      iphdr->_chksum = (u16_t)chk_sum; /* network order */
 8018e8a:	69fb      	ldr	r3, [r7, #28]
 8018e8c:	b29a      	uxth	r2, r3
 8018e8e:	69bb      	ldr	r3, [r7, #24]
 8018e90:	815a      	strh	r2, [r3, #10]
 8018e92:	e00f      	b.n	8018eb4 <ip4_output_if_src+0x1d8>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8018e94:	68fb      	ldr	r3, [r7, #12]
 8018e96:	895b      	ldrh	r3, [r3, #10]
 8018e98:	2b13      	cmp	r3, #19
 8018e9a:	d802      	bhi.n	8018ea2 <ip4_output_if_src+0x1c6>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8018e9c:	f06f 0301 	mvn.w	r3, #1
 8018ea0:	e020      	b.n	8018ee4 <ip4_output_if_src+0x208>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8018ea2:	68fb      	ldr	r3, [r7, #12]
 8018ea4:	685b      	ldr	r3, [r3, #4]
 8018ea6:	61bb      	str	r3, [r7, #24]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8018ea8:	69bb      	ldr	r3, [r7, #24]
 8018eaa:	691b      	ldr	r3, [r3, #16]
 8018eac:	613b      	str	r3, [r7, #16]
    dest = &dest_addr;
 8018eae:	f107 0310 	add.w	r3, r7, #16
 8018eb2:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8018eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018eb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018eb8:	2b00      	cmp	r3, #0
 8018eba:	d00c      	beq.n	8018ed6 <ip4_output_if_src+0x1fa>
 8018ebc:	68fb      	ldr	r3, [r7, #12]
 8018ebe:	891a      	ldrh	r2, [r3, #8]
 8018ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018ec2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018ec4:	429a      	cmp	r2, r3
 8018ec6:	d906      	bls.n	8018ed6 <ip4_output_if_src+0x1fa>
    return ip4_frag(p, netif, dest);
 8018ec8:	687a      	ldr	r2, [r7, #4]
 8018eca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8018ecc:	68f8      	ldr	r0, [r7, #12]
 8018ece:	f000 fe85 	bl	8019bdc <ip4_frag>
 8018ed2:	4603      	mov	r3, r0
 8018ed4:	e006      	b.n	8018ee4 <ip4_output_if_src+0x208>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8018ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018ed8:	695b      	ldr	r3, [r3, #20]
 8018eda:	687a      	ldr	r2, [r7, #4]
 8018edc:	68f9      	ldr	r1, [r7, #12]
 8018ede:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018ee0:	4798      	blx	r3
 8018ee2:	4603      	mov	r3, r0
}
 8018ee4:	4618      	mov	r0, r3
 8018ee6:	3720      	adds	r7, #32
 8018ee8:	46bd      	mov	sp, r7
 8018eea:	bd80      	pop	{r7, pc}
 8018eec:	080206b8 	.word	0x080206b8
 8018ef0:	080206ec 	.word	0x080206ec
 8018ef4:	080206f8 	.word	0x080206f8
 8018ef8:	08020720 	.word	0x08020720
 8018efc:	20013e62 	.word	0x20013e62
 8018f00:	0806c870 	.word	0x0806c870

08018f04 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8018f04:	b480      	push	{r7}
 8018f06:	b085      	sub	sp, #20
 8018f08:	af00      	add	r7, sp, #0
 8018f0a:	6078      	str	r0, [r7, #4]
 8018f0c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8018f0e:	687b      	ldr	r3, [r7, #4]
 8018f10:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8018f12:	687b      	ldr	r3, [r7, #4]
 8018f14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018f18:	d002      	beq.n	8018f20 <ip4_addr_isbroadcast_u32+0x1c>
 8018f1a:	687b      	ldr	r3, [r7, #4]
 8018f1c:	2b00      	cmp	r3, #0
 8018f1e:	d101      	bne.n	8018f24 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8018f20:	2301      	movs	r3, #1
 8018f22:	e02a      	b.n	8018f7a <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8018f24:	683b      	ldr	r3, [r7, #0]
 8018f26:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8018f2a:	f003 0302 	and.w	r3, r3, #2
 8018f2e:	2b00      	cmp	r3, #0
 8018f30:	d101      	bne.n	8018f36 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8018f32:	2300      	movs	r3, #0
 8018f34:	e021      	b.n	8018f7a <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8018f36:	683b      	ldr	r3, [r7, #0]
 8018f38:	3304      	adds	r3, #4
 8018f3a:	681b      	ldr	r3, [r3, #0]
 8018f3c:	687a      	ldr	r2, [r7, #4]
 8018f3e:	429a      	cmp	r2, r3
 8018f40:	d101      	bne.n	8018f46 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8018f42:	2300      	movs	r3, #0
 8018f44:	e019      	b.n	8018f7a <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8018f46:	68fa      	ldr	r2, [r7, #12]
 8018f48:	683b      	ldr	r3, [r7, #0]
 8018f4a:	3304      	adds	r3, #4
 8018f4c:	681b      	ldr	r3, [r3, #0]
 8018f4e:	405a      	eors	r2, r3
 8018f50:	683b      	ldr	r3, [r7, #0]
 8018f52:	3308      	adds	r3, #8
 8018f54:	681b      	ldr	r3, [r3, #0]
 8018f56:	4013      	ands	r3, r2
 8018f58:	2b00      	cmp	r3, #0
 8018f5a:	d10d      	bne.n	8018f78 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8018f5c:	683b      	ldr	r3, [r7, #0]
 8018f5e:	3308      	adds	r3, #8
 8018f60:	681b      	ldr	r3, [r3, #0]
 8018f62:	43da      	mvns	r2, r3
 8018f64:	687b      	ldr	r3, [r7, #4]
 8018f66:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8018f68:	683b      	ldr	r3, [r7, #0]
 8018f6a:	3308      	adds	r3, #8
 8018f6c:	681b      	ldr	r3, [r3, #0]
 8018f6e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8018f70:	429a      	cmp	r2, r3
 8018f72:	d101      	bne.n	8018f78 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8018f74:	2301      	movs	r3, #1
 8018f76:	e000      	b.n	8018f7a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8018f78:	2300      	movs	r3, #0
  }
}
 8018f7a:	4618      	mov	r0, r3
 8018f7c:	3714      	adds	r7, #20
 8018f7e:	46bd      	mov	sp, r7
 8018f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f84:	4770      	bx	lr
	...

08018f88 <ip4addr_aton>:
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int
ip4addr_aton(const char *cp, ip4_addr_t *addr)
{
 8018f88:	b580      	push	{r7, lr}
 8018f8a:	b08a      	sub	sp, #40	; 0x28
 8018f8c:	af00      	add	r7, sp, #0
 8018f8e:	6078      	str	r0, [r7, #4]
 8018f90:	6039      	str	r1, [r7, #0]
  u32_t val;
  u8_t base;
  char c;
  u32_t parts[4];
  u32_t *pp = parts;
 8018f92:	f107 030c 	add.w	r3, r7, #12
 8018f96:	61fb      	str	r3, [r7, #28]

  c = *cp;
 8018f98:	687b      	ldr	r3, [r7, #4]
 8018f9a:	781b      	ldrb	r3, [r3, #0]
 8018f9c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    /*
     * Collect number up to ``.''.
     * Values are specified as for C:
     * 0x=hex, 0=octal, 1-9=decimal.
     */
    if (!lwip_isdigit(c)) {
 8018fa0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8018fa4:	3301      	adds	r3, #1
 8018fa6:	4a89      	ldr	r2, [pc, #548]	; (80191cc <ip4addr_aton+0x244>)
 8018fa8:	4413      	add	r3, r2
 8018faa:	781b      	ldrb	r3, [r3, #0]
 8018fac:	f003 0304 	and.w	r3, r3, #4
 8018fb0:	2b00      	cmp	r3, #0
 8018fb2:	d101      	bne.n	8018fb8 <ip4addr_aton+0x30>
      return 0;
 8018fb4:	2300      	movs	r3, #0
 8018fb6:	e105      	b.n	80191c4 <ip4addr_aton+0x23c>
    }
    val = 0;
 8018fb8:	2300      	movs	r3, #0
 8018fba:	627b      	str	r3, [r7, #36]	; 0x24
    base = 10;
 8018fbc:	230a      	movs	r3, #10
 8018fbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (c == '0') {
 8018fc2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8018fc6:	2b30      	cmp	r3, #48	; 0x30
 8018fc8:	d11c      	bne.n	8019004 <ip4addr_aton+0x7c>
      c = *++cp;
 8018fca:	687b      	ldr	r3, [r7, #4]
 8018fcc:	3301      	adds	r3, #1
 8018fce:	607b      	str	r3, [r7, #4]
 8018fd0:	687b      	ldr	r3, [r7, #4]
 8018fd2:	781b      	ldrb	r3, [r3, #0]
 8018fd4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      if (c == 'x' || c == 'X') {
 8018fd8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8018fdc:	2b78      	cmp	r3, #120	; 0x78
 8018fde:	d003      	beq.n	8018fe8 <ip4addr_aton+0x60>
 8018fe0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8018fe4:	2b58      	cmp	r3, #88	; 0x58
 8018fe6:	d10a      	bne.n	8018ffe <ip4addr_aton+0x76>
        base = 16;
 8018fe8:	2310      	movs	r3, #16
 8018fea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        c = *++cp;
 8018fee:	687b      	ldr	r3, [r7, #4]
 8018ff0:	3301      	adds	r3, #1
 8018ff2:	607b      	str	r3, [r7, #4]
 8018ff4:	687b      	ldr	r3, [r7, #4]
 8018ff6:	781b      	ldrb	r3, [r3, #0]
 8018ff8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8018ffc:	e002      	b.n	8019004 <ip4addr_aton+0x7c>
      } else {
        base = 8;
 8018ffe:	2308      	movs	r3, #8
 8019000:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      }
    }
    for (;;) {
      if (lwip_isdigit(c)) {
 8019004:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8019008:	3301      	adds	r3, #1
 801900a:	4a70      	ldr	r2, [pc, #448]	; (80191cc <ip4addr_aton+0x244>)
 801900c:	4413      	add	r3, r2
 801900e:	781b      	ldrb	r3, [r3, #0]
 8019010:	f003 0304 	and.w	r3, r3, #4
 8019014:	2b00      	cmp	r3, #0
 8019016:	d011      	beq.n	801903c <ip4addr_aton+0xb4>
        val = (val * base) + (u32_t)(c - '0');
 8019018:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801901c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801901e:	fb03 f202 	mul.w	r2, r3, r2
 8019022:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8019026:	4413      	add	r3, r2
 8019028:	3b30      	subs	r3, #48	; 0x30
 801902a:	627b      	str	r3, [r7, #36]	; 0x24
        c = *++cp;
 801902c:	687b      	ldr	r3, [r7, #4]
 801902e:	3301      	adds	r3, #1
 8019030:	607b      	str	r3, [r7, #4]
 8019032:	687b      	ldr	r3, [r7, #4]
 8019034:	781b      	ldrb	r3, [r3, #0]
 8019036:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 801903a:	e7e3      	b.n	8019004 <ip4addr_aton+0x7c>
      } else if (base == 16 && lwip_isxdigit(c)) {
 801903c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8019040:	2b10      	cmp	r3, #16
 8019042:	d127      	bne.n	8019094 <ip4addr_aton+0x10c>
 8019044:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8019048:	3301      	adds	r3, #1
 801904a:	4a60      	ldr	r2, [pc, #384]	; (80191cc <ip4addr_aton+0x244>)
 801904c:	4413      	add	r3, r2
 801904e:	781b      	ldrb	r3, [r3, #0]
 8019050:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8019054:	2b00      	cmp	r3, #0
 8019056:	d01d      	beq.n	8019094 <ip4addr_aton+0x10c>
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 8019058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801905a:	011b      	lsls	r3, r3, #4
 801905c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8019060:	f102 010a 	add.w	r1, r2, #10
 8019064:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8019068:	3201      	adds	r2, #1
 801906a:	4858      	ldr	r0, [pc, #352]	; (80191cc <ip4addr_aton+0x244>)
 801906c:	4402      	add	r2, r0
 801906e:	7812      	ldrb	r2, [r2, #0]
 8019070:	f002 0203 	and.w	r2, r2, #3
 8019074:	2a02      	cmp	r2, #2
 8019076:	d101      	bne.n	801907c <ip4addr_aton+0xf4>
 8019078:	2261      	movs	r2, #97	; 0x61
 801907a:	e000      	b.n	801907e <ip4addr_aton+0xf6>
 801907c:	2241      	movs	r2, #65	; 0x41
 801907e:	1a8a      	subs	r2, r1, r2
 8019080:	4313      	orrs	r3, r2
 8019082:	627b      	str	r3, [r7, #36]	; 0x24
        c = *++cp;
 8019084:	687b      	ldr	r3, [r7, #4]
 8019086:	3301      	adds	r3, #1
 8019088:	607b      	str	r3, [r7, #4]
 801908a:	687b      	ldr	r3, [r7, #4]
 801908c:	781b      	ldrb	r3, [r3, #0]
 801908e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      if (lwip_isdigit(c)) {
 8019092:	e7b7      	b.n	8019004 <ip4addr_aton+0x7c>
      } else {
        break;
      }
    }
    if (c == '.') {
 8019094:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8019098:	2b2e      	cmp	r3, #46	; 0x2e
 801909a:	d114      	bne.n	80190c6 <ip4addr_aton+0x13e>
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
 801909c:	f107 030c 	add.w	r3, r7, #12
 80190a0:	330c      	adds	r3, #12
 80190a2:	69fa      	ldr	r2, [r7, #28]
 80190a4:	429a      	cmp	r2, r3
 80190a6:	d301      	bcc.n	80190ac <ip4addr_aton+0x124>
        return 0;
 80190a8:	2300      	movs	r3, #0
 80190aa:	e08b      	b.n	80191c4 <ip4addr_aton+0x23c>
      }
      *pp++ = val;
 80190ac:	69fb      	ldr	r3, [r7, #28]
 80190ae:	1d1a      	adds	r2, r3, #4
 80190b0:	61fa      	str	r2, [r7, #28]
 80190b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80190b4:	601a      	str	r2, [r3, #0]
      c = *++cp;
 80190b6:	687b      	ldr	r3, [r7, #4]
 80190b8:	3301      	adds	r3, #1
 80190ba:	607b      	str	r3, [r7, #4]
 80190bc:	687b      	ldr	r3, [r7, #4]
 80190be:	781b      	ldrb	r3, [r3, #0]
 80190c0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    if (!lwip_isdigit(c)) {
 80190c4:	e76c      	b.n	8018fa0 <ip4addr_aton+0x18>
    } else {
      break;
 80190c6:	bf00      	nop
    }
  }
  /*
   * Check for trailing characters.
   */
  if (c != '\0' && !lwip_isspace(c)) {
 80190c8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80190cc:	2b00      	cmp	r3, #0
 80190ce:	d00b      	beq.n	80190e8 <ip4addr_aton+0x160>
 80190d0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80190d4:	3301      	adds	r3, #1
 80190d6:	4a3d      	ldr	r2, [pc, #244]	; (80191cc <ip4addr_aton+0x244>)
 80190d8:	4413      	add	r3, r2
 80190da:	781b      	ldrb	r3, [r3, #0]
 80190dc:	f003 0308 	and.w	r3, r3, #8
 80190e0:	2b00      	cmp	r3, #0
 80190e2:	d101      	bne.n	80190e8 <ip4addr_aton+0x160>
    return 0;
 80190e4:	2300      	movs	r3, #0
 80190e6:	e06d      	b.n	80191c4 <ip4addr_aton+0x23c>
  }
  /*
   * Concoct the address according to
   * the number of parts specified.
   */
  switch (pp - parts + 1) {
 80190e8:	f107 030c 	add.w	r3, r7, #12
 80190ec:	69fa      	ldr	r2, [r7, #28]
 80190ee:	1ad3      	subs	r3, r2, r3
 80190f0:	109b      	asrs	r3, r3, #2
 80190f2:	3301      	adds	r3, #1
 80190f4:	2b04      	cmp	r3, #4
 80190f6:	d853      	bhi.n	80191a0 <ip4addr_aton+0x218>
 80190f8:	a201      	add	r2, pc, #4	; (adr r2, 8019100 <ip4addr_aton+0x178>)
 80190fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80190fe:	bf00      	nop
 8019100:	08019115 	.word	0x08019115
 8019104:	080191af 	.word	0x080191af
 8019108:	08019119 	.word	0x08019119
 801910c:	0801913b 	.word	0x0801913b
 8019110:	08019169 	.word	0x08019169

    case 0:
      return 0;       /* initial nondigit */
 8019114:	2300      	movs	r3, #0
 8019116:	e055      	b.n	80191c4 <ip4addr_aton+0x23c>

    case 1:             /* a -- 32 bits */
      break;

    case 2:             /* a.b -- 8.24 bits */
      if (val > 0xffffffUL) {
 8019118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801911a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801911e:	d301      	bcc.n	8019124 <ip4addr_aton+0x19c>
        return 0;
 8019120:	2300      	movs	r3, #0
 8019122:	e04f      	b.n	80191c4 <ip4addr_aton+0x23c>
      }
      if (parts[0] > 0xff) {
 8019124:	68fb      	ldr	r3, [r7, #12]
 8019126:	2bff      	cmp	r3, #255	; 0xff
 8019128:	d901      	bls.n	801912e <ip4addr_aton+0x1a6>
        return 0;
 801912a:	2300      	movs	r3, #0
 801912c:	e04a      	b.n	80191c4 <ip4addr_aton+0x23c>
      }
      val |= parts[0] << 24;
 801912e:	68fb      	ldr	r3, [r7, #12]
 8019130:	061b      	lsls	r3, r3, #24
 8019132:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019134:	4313      	orrs	r3, r2
 8019136:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8019138:	e03a      	b.n	80191b0 <ip4addr_aton+0x228>

    case 3:             /* a.b.c -- 8.8.16 bits */
      if (val > 0xffff) {
 801913a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801913c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8019140:	d301      	bcc.n	8019146 <ip4addr_aton+0x1be>
        return 0;
 8019142:	2300      	movs	r3, #0
 8019144:	e03e      	b.n	80191c4 <ip4addr_aton+0x23c>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff)) {
 8019146:	68fb      	ldr	r3, [r7, #12]
 8019148:	2bff      	cmp	r3, #255	; 0xff
 801914a:	d802      	bhi.n	8019152 <ip4addr_aton+0x1ca>
 801914c:	693b      	ldr	r3, [r7, #16]
 801914e:	2bff      	cmp	r3, #255	; 0xff
 8019150:	d901      	bls.n	8019156 <ip4addr_aton+0x1ce>
        return 0;
 8019152:	2300      	movs	r3, #0
 8019154:	e036      	b.n	80191c4 <ip4addr_aton+0x23c>
      }
      val |= (parts[0] << 24) | (parts[1] << 16);
 8019156:	68fb      	ldr	r3, [r7, #12]
 8019158:	061a      	lsls	r2, r3, #24
 801915a:	693b      	ldr	r3, [r7, #16]
 801915c:	041b      	lsls	r3, r3, #16
 801915e:	4313      	orrs	r3, r2
 8019160:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019162:	4313      	orrs	r3, r2
 8019164:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8019166:	e023      	b.n	80191b0 <ip4addr_aton+0x228>

    case 4:             /* a.b.c.d -- 8.8.8.8 bits */
      if (val > 0xff) {
 8019168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801916a:	2bff      	cmp	r3, #255	; 0xff
 801916c:	d901      	bls.n	8019172 <ip4addr_aton+0x1ea>
        return 0;
 801916e:	2300      	movs	r3, #0
 8019170:	e028      	b.n	80191c4 <ip4addr_aton+0x23c>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff)) {
 8019172:	68fb      	ldr	r3, [r7, #12]
 8019174:	2bff      	cmp	r3, #255	; 0xff
 8019176:	d805      	bhi.n	8019184 <ip4addr_aton+0x1fc>
 8019178:	693b      	ldr	r3, [r7, #16]
 801917a:	2bff      	cmp	r3, #255	; 0xff
 801917c:	d802      	bhi.n	8019184 <ip4addr_aton+0x1fc>
 801917e:	697b      	ldr	r3, [r7, #20]
 8019180:	2bff      	cmp	r3, #255	; 0xff
 8019182:	d901      	bls.n	8019188 <ip4addr_aton+0x200>
        return 0;
 8019184:	2300      	movs	r3, #0
 8019186:	e01d      	b.n	80191c4 <ip4addr_aton+0x23c>
      }
      val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 8019188:	68fb      	ldr	r3, [r7, #12]
 801918a:	061a      	lsls	r2, r3, #24
 801918c:	693b      	ldr	r3, [r7, #16]
 801918e:	041b      	lsls	r3, r3, #16
 8019190:	431a      	orrs	r2, r3
 8019192:	697b      	ldr	r3, [r7, #20]
 8019194:	021b      	lsls	r3, r3, #8
 8019196:	4313      	orrs	r3, r2
 8019198:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801919a:	4313      	orrs	r3, r2
 801919c:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 801919e:	e007      	b.n	80191b0 <ip4addr_aton+0x228>
    default:
      LWIP_ASSERT("unhandled", 0);
 80191a0:	4b0b      	ldr	r3, [pc, #44]	; (80191d0 <ip4addr_aton+0x248>)
 80191a2:	22f9      	movs	r2, #249	; 0xf9
 80191a4:	490b      	ldr	r1, [pc, #44]	; (80191d4 <ip4addr_aton+0x24c>)
 80191a6:	480c      	ldr	r0, [pc, #48]	; (80191d8 <ip4addr_aton+0x250>)
 80191a8:	f001 fe12 	bl	801add0 <iprintf>
      break;
 80191ac:	e000      	b.n	80191b0 <ip4addr_aton+0x228>
      break;
 80191ae:	bf00      	nop
  }
  if (addr) {
 80191b0:	683b      	ldr	r3, [r7, #0]
 80191b2:	2b00      	cmp	r3, #0
 80191b4:	d005      	beq.n	80191c2 <ip4addr_aton+0x23a>
    ip4_addr_set_u32(addr, lwip_htonl(val));
 80191b6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80191b8:	f7f4 f941 	bl	800d43e <lwip_htonl>
 80191bc:	4602      	mov	r2, r0
 80191be:	683b      	ldr	r3, [r7, #0]
 80191c0:	601a      	str	r2, [r3, #0]
  }
  return 1;
 80191c2:	2301      	movs	r3, #1
}
 80191c4:	4618      	mov	r0, r3
 80191c6:	3728      	adds	r7, #40	; 0x28
 80191c8:	46bd      	mov	sp, r7
 80191ca:	bd80      	pop	{r7, pc}
 80191cc:	0806c88c 	.word	0x0806c88c
 80191d0:	08020750 	.word	0x08020750
 80191d4:	0802078c 	.word	0x0802078c
 80191d8:	08020798 	.word	0x08020798

080191dc <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80191dc:	b580      	push	{r7, lr}
 80191de:	b084      	sub	sp, #16
 80191e0:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80191e2:	2300      	movs	r3, #0
 80191e4:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80191e6:	4b12      	ldr	r3, [pc, #72]	; (8019230 <ip_reass_tmr+0x54>)
 80191e8:	681b      	ldr	r3, [r3, #0]
 80191ea:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80191ec:	e018      	b.n	8019220 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80191ee:	68fb      	ldr	r3, [r7, #12]
 80191f0:	7fdb      	ldrb	r3, [r3, #31]
 80191f2:	2b00      	cmp	r3, #0
 80191f4:	d00b      	beq.n	801920e <ip_reass_tmr+0x32>
      r->timer--;
 80191f6:	68fb      	ldr	r3, [r7, #12]
 80191f8:	7fdb      	ldrb	r3, [r3, #31]
 80191fa:	3b01      	subs	r3, #1
 80191fc:	b2da      	uxtb	r2, r3
 80191fe:	68fb      	ldr	r3, [r7, #12]
 8019200:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8019202:	68fb      	ldr	r3, [r7, #12]
 8019204:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8019206:	68fb      	ldr	r3, [r7, #12]
 8019208:	681b      	ldr	r3, [r3, #0]
 801920a:	60fb      	str	r3, [r7, #12]
 801920c:	e008      	b.n	8019220 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801920e:	68fb      	ldr	r3, [r7, #12]
 8019210:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8019212:	68fb      	ldr	r3, [r7, #12]
 8019214:	681b      	ldr	r3, [r3, #0]
 8019216:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8019218:	68b9      	ldr	r1, [r7, #8]
 801921a:	6878      	ldr	r0, [r7, #4]
 801921c:	f000 f80a 	bl	8019234 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8019220:	68fb      	ldr	r3, [r7, #12]
 8019222:	2b00      	cmp	r3, #0
 8019224:	d1e3      	bne.n	80191ee <ip_reass_tmr+0x12>
    }
  }
}
 8019226:	bf00      	nop
 8019228:	bf00      	nop
 801922a:	3710      	adds	r7, #16
 801922c:	46bd      	mov	sp, r7
 801922e:	bd80      	pop	{r7, pc}
 8019230:	20013e64 	.word	0x20013e64

08019234 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8019234:	b580      	push	{r7, lr}
 8019236:	b088      	sub	sp, #32
 8019238:	af00      	add	r7, sp, #0
 801923a:	6078      	str	r0, [r7, #4]
 801923c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801923e:	2300      	movs	r3, #0
 8019240:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8019242:	683a      	ldr	r2, [r7, #0]
 8019244:	687b      	ldr	r3, [r7, #4]
 8019246:	429a      	cmp	r2, r3
 8019248:	d105      	bne.n	8019256 <ip_reass_free_complete_datagram+0x22>
 801924a:	4b45      	ldr	r3, [pc, #276]	; (8019360 <ip_reass_free_complete_datagram+0x12c>)
 801924c:	22ab      	movs	r2, #171	; 0xab
 801924e:	4945      	ldr	r1, [pc, #276]	; (8019364 <ip_reass_free_complete_datagram+0x130>)
 8019250:	4845      	ldr	r0, [pc, #276]	; (8019368 <ip_reass_free_complete_datagram+0x134>)
 8019252:	f001 fdbd 	bl	801add0 <iprintf>
  if (prev != NULL) {
 8019256:	683b      	ldr	r3, [r7, #0]
 8019258:	2b00      	cmp	r3, #0
 801925a:	d00a      	beq.n	8019272 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801925c:	683b      	ldr	r3, [r7, #0]
 801925e:	681b      	ldr	r3, [r3, #0]
 8019260:	687a      	ldr	r2, [r7, #4]
 8019262:	429a      	cmp	r2, r3
 8019264:	d005      	beq.n	8019272 <ip_reass_free_complete_datagram+0x3e>
 8019266:	4b3e      	ldr	r3, [pc, #248]	; (8019360 <ip_reass_free_complete_datagram+0x12c>)
 8019268:	22ad      	movs	r2, #173	; 0xad
 801926a:	4940      	ldr	r1, [pc, #256]	; (801936c <ip_reass_free_complete_datagram+0x138>)
 801926c:	483e      	ldr	r0, [pc, #248]	; (8019368 <ip_reass_free_complete_datagram+0x134>)
 801926e:	f001 fdaf 	bl	801add0 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8019272:	687b      	ldr	r3, [r7, #4]
 8019274:	685b      	ldr	r3, [r3, #4]
 8019276:	685b      	ldr	r3, [r3, #4]
 8019278:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801927a:	697b      	ldr	r3, [r7, #20]
 801927c:	889b      	ldrh	r3, [r3, #4]
 801927e:	b29b      	uxth	r3, r3
 8019280:	2b00      	cmp	r3, #0
 8019282:	d12a      	bne.n	80192da <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8019284:	687b      	ldr	r3, [r7, #4]
 8019286:	685b      	ldr	r3, [r3, #4]
 8019288:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801928a:	697b      	ldr	r3, [r7, #20]
 801928c:	681a      	ldr	r2, [r3, #0]
 801928e:	687b      	ldr	r3, [r7, #4]
 8019290:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8019292:	69bb      	ldr	r3, [r7, #24]
 8019294:	6858      	ldr	r0, [r3, #4]
 8019296:	687b      	ldr	r3, [r7, #4]
 8019298:	3308      	adds	r3, #8
 801929a:	2214      	movs	r2, #20
 801929c:	4619      	mov	r1, r3
 801929e:	f001 f821 	bl	801a2e4 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80192a2:	2101      	movs	r1, #1
 80192a4:	69b8      	ldr	r0, [r7, #24]
 80192a6:	f7ff fa83 	bl	80187b0 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80192aa:	69b8      	ldr	r0, [r7, #24]
 80192ac:	f7f5 fe62 	bl	800ef74 <pbuf_clen>
 80192b0:	4603      	mov	r3, r0
 80192b2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80192b4:	8bfa      	ldrh	r2, [r7, #30]
 80192b6:	8a7b      	ldrh	r3, [r7, #18]
 80192b8:	4413      	add	r3, r2
 80192ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80192be:	db05      	blt.n	80192cc <ip_reass_free_complete_datagram+0x98>
 80192c0:	4b27      	ldr	r3, [pc, #156]	; (8019360 <ip_reass_free_complete_datagram+0x12c>)
 80192c2:	22bc      	movs	r2, #188	; 0xbc
 80192c4:	492a      	ldr	r1, [pc, #168]	; (8019370 <ip_reass_free_complete_datagram+0x13c>)
 80192c6:	4828      	ldr	r0, [pc, #160]	; (8019368 <ip_reass_free_complete_datagram+0x134>)
 80192c8:	f001 fd82 	bl	801add0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80192cc:	8bfa      	ldrh	r2, [r7, #30]
 80192ce:	8a7b      	ldrh	r3, [r7, #18]
 80192d0:	4413      	add	r3, r2
 80192d2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80192d4:	69b8      	ldr	r0, [r7, #24]
 80192d6:	f7f5 fdbf 	bl	800ee58 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80192da:	687b      	ldr	r3, [r7, #4]
 80192dc:	685b      	ldr	r3, [r3, #4]
 80192de:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80192e0:	e01f      	b.n	8019322 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80192e2:	69bb      	ldr	r3, [r7, #24]
 80192e4:	685b      	ldr	r3, [r3, #4]
 80192e6:	617b      	str	r3, [r7, #20]
    pcur = p;
 80192e8:	69bb      	ldr	r3, [r7, #24]
 80192ea:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80192ec:	697b      	ldr	r3, [r7, #20]
 80192ee:	681b      	ldr	r3, [r3, #0]
 80192f0:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80192f2:	68f8      	ldr	r0, [r7, #12]
 80192f4:	f7f5 fe3e 	bl	800ef74 <pbuf_clen>
 80192f8:	4603      	mov	r3, r0
 80192fa:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80192fc:	8bfa      	ldrh	r2, [r7, #30]
 80192fe:	8a7b      	ldrh	r3, [r7, #18]
 8019300:	4413      	add	r3, r2
 8019302:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8019306:	db05      	blt.n	8019314 <ip_reass_free_complete_datagram+0xe0>
 8019308:	4b15      	ldr	r3, [pc, #84]	; (8019360 <ip_reass_free_complete_datagram+0x12c>)
 801930a:	22cc      	movs	r2, #204	; 0xcc
 801930c:	4918      	ldr	r1, [pc, #96]	; (8019370 <ip_reass_free_complete_datagram+0x13c>)
 801930e:	4816      	ldr	r0, [pc, #88]	; (8019368 <ip_reass_free_complete_datagram+0x134>)
 8019310:	f001 fd5e 	bl	801add0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8019314:	8bfa      	ldrh	r2, [r7, #30]
 8019316:	8a7b      	ldrh	r3, [r7, #18]
 8019318:	4413      	add	r3, r2
 801931a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801931c:	68f8      	ldr	r0, [r7, #12]
 801931e:	f7f5 fd9b 	bl	800ee58 <pbuf_free>
  while (p != NULL) {
 8019322:	69bb      	ldr	r3, [r7, #24]
 8019324:	2b00      	cmp	r3, #0
 8019326:	d1dc      	bne.n	80192e2 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8019328:	6839      	ldr	r1, [r7, #0]
 801932a:	6878      	ldr	r0, [r7, #4]
 801932c:	f000 f8c2 	bl	80194b4 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8019330:	4b10      	ldr	r3, [pc, #64]	; (8019374 <ip_reass_free_complete_datagram+0x140>)
 8019332:	881b      	ldrh	r3, [r3, #0]
 8019334:	8bfa      	ldrh	r2, [r7, #30]
 8019336:	429a      	cmp	r2, r3
 8019338:	d905      	bls.n	8019346 <ip_reass_free_complete_datagram+0x112>
 801933a:	4b09      	ldr	r3, [pc, #36]	; (8019360 <ip_reass_free_complete_datagram+0x12c>)
 801933c:	22d2      	movs	r2, #210	; 0xd2
 801933e:	490e      	ldr	r1, [pc, #56]	; (8019378 <ip_reass_free_complete_datagram+0x144>)
 8019340:	4809      	ldr	r0, [pc, #36]	; (8019368 <ip_reass_free_complete_datagram+0x134>)
 8019342:	f001 fd45 	bl	801add0 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8019346:	4b0b      	ldr	r3, [pc, #44]	; (8019374 <ip_reass_free_complete_datagram+0x140>)
 8019348:	881a      	ldrh	r2, [r3, #0]
 801934a:	8bfb      	ldrh	r3, [r7, #30]
 801934c:	1ad3      	subs	r3, r2, r3
 801934e:	b29a      	uxth	r2, r3
 8019350:	4b08      	ldr	r3, [pc, #32]	; (8019374 <ip_reass_free_complete_datagram+0x140>)
 8019352:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8019354:	8bfb      	ldrh	r3, [r7, #30]
}
 8019356:	4618      	mov	r0, r3
 8019358:	3720      	adds	r7, #32
 801935a:	46bd      	mov	sp, r7
 801935c:	bd80      	pop	{r7, pc}
 801935e:	bf00      	nop
 8019360:	080207c0 	.word	0x080207c0
 8019364:	080207fc 	.word	0x080207fc
 8019368:	08020808 	.word	0x08020808
 801936c:	08020830 	.word	0x08020830
 8019370:	08020844 	.word	0x08020844
 8019374:	20013e68 	.word	0x20013e68
 8019378:	08020864 	.word	0x08020864

0801937c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801937c:	b580      	push	{r7, lr}
 801937e:	b08a      	sub	sp, #40	; 0x28
 8019380:	af00      	add	r7, sp, #0
 8019382:	6078      	str	r0, [r7, #4]
 8019384:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8019386:	2300      	movs	r3, #0
 8019388:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801938a:	2300      	movs	r3, #0
 801938c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801938e:	2300      	movs	r3, #0
 8019390:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8019392:	2300      	movs	r3, #0
 8019394:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8019396:	2300      	movs	r3, #0
 8019398:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801939a:	4b28      	ldr	r3, [pc, #160]	; (801943c <ip_reass_remove_oldest_datagram+0xc0>)
 801939c:	681b      	ldr	r3, [r3, #0]
 801939e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80193a0:	e030      	b.n	8019404 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80193a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80193a4:	695a      	ldr	r2, [r3, #20]
 80193a6:	687b      	ldr	r3, [r7, #4]
 80193a8:	68db      	ldr	r3, [r3, #12]
 80193aa:	429a      	cmp	r2, r3
 80193ac:	d10c      	bne.n	80193c8 <ip_reass_remove_oldest_datagram+0x4c>
 80193ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80193b0:	699a      	ldr	r2, [r3, #24]
 80193b2:	687b      	ldr	r3, [r7, #4]
 80193b4:	691b      	ldr	r3, [r3, #16]
 80193b6:	429a      	cmp	r2, r3
 80193b8:	d106      	bne.n	80193c8 <ip_reass_remove_oldest_datagram+0x4c>
 80193ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80193bc:	899a      	ldrh	r2, [r3, #12]
 80193be:	687b      	ldr	r3, [r7, #4]
 80193c0:	889b      	ldrh	r3, [r3, #4]
 80193c2:	b29b      	uxth	r3, r3
 80193c4:	429a      	cmp	r2, r3
 80193c6:	d014      	beq.n	80193f2 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80193c8:	693b      	ldr	r3, [r7, #16]
 80193ca:	3301      	adds	r3, #1
 80193cc:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80193ce:	6a3b      	ldr	r3, [r7, #32]
 80193d0:	2b00      	cmp	r3, #0
 80193d2:	d104      	bne.n	80193de <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80193d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80193d6:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80193d8:	69fb      	ldr	r3, [r7, #28]
 80193da:	61bb      	str	r3, [r7, #24]
 80193dc:	e009      	b.n	80193f2 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80193de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80193e0:	7fda      	ldrb	r2, [r3, #31]
 80193e2:	6a3b      	ldr	r3, [r7, #32]
 80193e4:	7fdb      	ldrb	r3, [r3, #31]
 80193e6:	429a      	cmp	r2, r3
 80193e8:	d803      	bhi.n	80193f2 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80193ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80193ec:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80193ee:	69fb      	ldr	r3, [r7, #28]
 80193f0:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80193f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80193f4:	681b      	ldr	r3, [r3, #0]
 80193f6:	2b00      	cmp	r3, #0
 80193f8:	d001      	beq.n	80193fe <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80193fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80193fc:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80193fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019400:	681b      	ldr	r3, [r3, #0]
 8019402:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8019404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019406:	2b00      	cmp	r3, #0
 8019408:	d1cb      	bne.n	80193a2 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801940a:	6a3b      	ldr	r3, [r7, #32]
 801940c:	2b00      	cmp	r3, #0
 801940e:	d008      	beq.n	8019422 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8019410:	69b9      	ldr	r1, [r7, #24]
 8019412:	6a38      	ldr	r0, [r7, #32]
 8019414:	f7ff ff0e 	bl	8019234 <ip_reass_free_complete_datagram>
 8019418:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801941a:	697a      	ldr	r2, [r7, #20]
 801941c:	68fb      	ldr	r3, [r7, #12]
 801941e:	4413      	add	r3, r2
 8019420:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8019422:	697a      	ldr	r2, [r7, #20]
 8019424:	683b      	ldr	r3, [r7, #0]
 8019426:	429a      	cmp	r2, r3
 8019428:	da02      	bge.n	8019430 <ip_reass_remove_oldest_datagram+0xb4>
 801942a:	693b      	ldr	r3, [r7, #16]
 801942c:	2b01      	cmp	r3, #1
 801942e:	dcac      	bgt.n	801938a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8019430:	697b      	ldr	r3, [r7, #20]
}
 8019432:	4618      	mov	r0, r3
 8019434:	3728      	adds	r7, #40	; 0x28
 8019436:	46bd      	mov	sp, r7
 8019438:	bd80      	pop	{r7, pc}
 801943a:	bf00      	nop
 801943c:	20013e64 	.word	0x20013e64

08019440 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8019440:	b580      	push	{r7, lr}
 8019442:	b084      	sub	sp, #16
 8019444:	af00      	add	r7, sp, #0
 8019446:	6078      	str	r0, [r7, #4]
 8019448:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801944a:	2004      	movs	r0, #4
 801944c:	f7f4 fe10 	bl	800e070 <memp_malloc>
 8019450:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8019452:	68fb      	ldr	r3, [r7, #12]
 8019454:	2b00      	cmp	r3, #0
 8019456:	d110      	bne.n	801947a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8019458:	6839      	ldr	r1, [r7, #0]
 801945a:	6878      	ldr	r0, [r7, #4]
 801945c:	f7ff ff8e 	bl	801937c <ip_reass_remove_oldest_datagram>
 8019460:	4602      	mov	r2, r0
 8019462:	683b      	ldr	r3, [r7, #0]
 8019464:	4293      	cmp	r3, r2
 8019466:	dc03      	bgt.n	8019470 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8019468:	2004      	movs	r0, #4
 801946a:	f7f4 fe01 	bl	800e070 <memp_malloc>
 801946e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8019470:	68fb      	ldr	r3, [r7, #12]
 8019472:	2b00      	cmp	r3, #0
 8019474:	d101      	bne.n	801947a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8019476:	2300      	movs	r3, #0
 8019478:	e016      	b.n	80194a8 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801947a:	2220      	movs	r2, #32
 801947c:	2100      	movs	r1, #0
 801947e:	68f8      	ldr	r0, [r7, #12]
 8019480:	f000 ff3e 	bl	801a300 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8019484:	68fb      	ldr	r3, [r7, #12]
 8019486:	220f      	movs	r2, #15
 8019488:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801948a:	4b09      	ldr	r3, [pc, #36]	; (80194b0 <ip_reass_enqueue_new_datagram+0x70>)
 801948c:	681a      	ldr	r2, [r3, #0]
 801948e:	68fb      	ldr	r3, [r7, #12]
 8019490:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8019492:	4a07      	ldr	r2, [pc, #28]	; (80194b0 <ip_reass_enqueue_new_datagram+0x70>)
 8019494:	68fb      	ldr	r3, [r7, #12]
 8019496:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8019498:	68fb      	ldr	r3, [r7, #12]
 801949a:	3308      	adds	r3, #8
 801949c:	2214      	movs	r2, #20
 801949e:	6879      	ldr	r1, [r7, #4]
 80194a0:	4618      	mov	r0, r3
 80194a2:	f000 ff1f 	bl	801a2e4 <memcpy>
  return ipr;
 80194a6:	68fb      	ldr	r3, [r7, #12]
}
 80194a8:	4618      	mov	r0, r3
 80194aa:	3710      	adds	r7, #16
 80194ac:	46bd      	mov	sp, r7
 80194ae:	bd80      	pop	{r7, pc}
 80194b0:	20013e64 	.word	0x20013e64

080194b4 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80194b4:	b580      	push	{r7, lr}
 80194b6:	b082      	sub	sp, #8
 80194b8:	af00      	add	r7, sp, #0
 80194ba:	6078      	str	r0, [r7, #4]
 80194bc:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80194be:	4b10      	ldr	r3, [pc, #64]	; (8019500 <ip_reass_dequeue_datagram+0x4c>)
 80194c0:	681b      	ldr	r3, [r3, #0]
 80194c2:	687a      	ldr	r2, [r7, #4]
 80194c4:	429a      	cmp	r2, r3
 80194c6:	d104      	bne.n	80194d2 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80194c8:	687b      	ldr	r3, [r7, #4]
 80194ca:	681b      	ldr	r3, [r3, #0]
 80194cc:	4a0c      	ldr	r2, [pc, #48]	; (8019500 <ip_reass_dequeue_datagram+0x4c>)
 80194ce:	6013      	str	r3, [r2, #0]
 80194d0:	e00d      	b.n	80194ee <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80194d2:	683b      	ldr	r3, [r7, #0]
 80194d4:	2b00      	cmp	r3, #0
 80194d6:	d106      	bne.n	80194e6 <ip_reass_dequeue_datagram+0x32>
 80194d8:	4b0a      	ldr	r3, [pc, #40]	; (8019504 <ip_reass_dequeue_datagram+0x50>)
 80194da:	f240 1245 	movw	r2, #325	; 0x145
 80194de:	490a      	ldr	r1, [pc, #40]	; (8019508 <ip_reass_dequeue_datagram+0x54>)
 80194e0:	480a      	ldr	r0, [pc, #40]	; (801950c <ip_reass_dequeue_datagram+0x58>)
 80194e2:	f001 fc75 	bl	801add0 <iprintf>
    prev->next = ipr->next;
 80194e6:	687b      	ldr	r3, [r7, #4]
 80194e8:	681a      	ldr	r2, [r3, #0]
 80194ea:	683b      	ldr	r3, [r7, #0]
 80194ec:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80194ee:	6879      	ldr	r1, [r7, #4]
 80194f0:	2004      	movs	r0, #4
 80194f2:	f7f4 fe0f 	bl	800e114 <memp_free>
}
 80194f6:	bf00      	nop
 80194f8:	3708      	adds	r7, #8
 80194fa:	46bd      	mov	sp, r7
 80194fc:	bd80      	pop	{r7, pc}
 80194fe:	bf00      	nop
 8019500:	20013e64 	.word	0x20013e64
 8019504:	080207c0 	.word	0x080207c0
 8019508:	08020888 	.word	0x08020888
 801950c:	08020808 	.word	0x08020808

08019510 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8019510:	b580      	push	{r7, lr}
 8019512:	b08c      	sub	sp, #48	; 0x30
 8019514:	af00      	add	r7, sp, #0
 8019516:	60f8      	str	r0, [r7, #12]
 8019518:	60b9      	str	r1, [r7, #8]
 801951a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801951c:	2300      	movs	r3, #0
 801951e:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8019520:	2301      	movs	r3, #1
 8019522:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8019524:	68bb      	ldr	r3, [r7, #8]
 8019526:	685b      	ldr	r3, [r3, #4]
 8019528:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801952a:	69fb      	ldr	r3, [r7, #28]
 801952c:	885b      	ldrh	r3, [r3, #2]
 801952e:	b29b      	uxth	r3, r3
 8019530:	4618      	mov	r0, r3
 8019532:	f7f3 ff6f 	bl	800d414 <lwip_htons>
 8019536:	4603      	mov	r3, r0
 8019538:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801953a:	69fb      	ldr	r3, [r7, #28]
 801953c:	781b      	ldrb	r3, [r3, #0]
 801953e:	f003 030f 	and.w	r3, r3, #15
 8019542:	b2db      	uxtb	r3, r3
 8019544:	009b      	lsls	r3, r3, #2
 8019546:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8019548:	7e7b      	ldrb	r3, [r7, #25]
 801954a:	b29b      	uxth	r3, r3
 801954c:	8b7a      	ldrh	r2, [r7, #26]
 801954e:	429a      	cmp	r2, r3
 8019550:	d202      	bcs.n	8019558 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019552:	f04f 33ff 	mov.w	r3, #4294967295
 8019556:	e135      	b.n	80197c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8019558:	7e7b      	ldrb	r3, [r7, #25]
 801955a:	b29b      	uxth	r3, r3
 801955c:	8b7a      	ldrh	r2, [r7, #26]
 801955e:	1ad3      	subs	r3, r2, r3
 8019560:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8019562:	69fb      	ldr	r3, [r7, #28]
 8019564:	88db      	ldrh	r3, [r3, #6]
 8019566:	b29b      	uxth	r3, r3
 8019568:	4618      	mov	r0, r3
 801956a:	f7f3 ff53 	bl	800d414 <lwip_htons>
 801956e:	4603      	mov	r3, r0
 8019570:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8019574:	b29b      	uxth	r3, r3
 8019576:	00db      	lsls	r3, r3, #3
 8019578:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801957a:	68bb      	ldr	r3, [r7, #8]
 801957c:	685b      	ldr	r3, [r3, #4]
 801957e:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8019580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019582:	2200      	movs	r2, #0
 8019584:	701a      	strb	r2, [r3, #0]
 8019586:	2200      	movs	r2, #0
 8019588:	705a      	strb	r2, [r3, #1]
 801958a:	2200      	movs	r2, #0
 801958c:	709a      	strb	r2, [r3, #2]
 801958e:	2200      	movs	r2, #0
 8019590:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8019592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019594:	8afa      	ldrh	r2, [r7, #22]
 8019596:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8019598:	8afa      	ldrh	r2, [r7, #22]
 801959a:	8b7b      	ldrh	r3, [r7, #26]
 801959c:	4413      	add	r3, r2
 801959e:	b29a      	uxth	r2, r3
 80195a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80195a2:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 80195a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80195a6:	88db      	ldrh	r3, [r3, #6]
 80195a8:	b29b      	uxth	r3, r3
 80195aa:	8afa      	ldrh	r2, [r7, #22]
 80195ac:	429a      	cmp	r2, r3
 80195ae:	d902      	bls.n	80195b6 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80195b0:	f04f 33ff 	mov.w	r3, #4294967295
 80195b4:	e106      	b.n	80197c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80195b6:	68fb      	ldr	r3, [r7, #12]
 80195b8:	685b      	ldr	r3, [r3, #4]
 80195ba:	627b      	str	r3, [r7, #36]	; 0x24
 80195bc:	e068      	b.n	8019690 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80195be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80195c0:	685b      	ldr	r3, [r3, #4]
 80195c2:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 80195c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80195c6:	889b      	ldrh	r3, [r3, #4]
 80195c8:	b29a      	uxth	r2, r3
 80195ca:	693b      	ldr	r3, [r7, #16]
 80195cc:	889b      	ldrh	r3, [r3, #4]
 80195ce:	b29b      	uxth	r3, r3
 80195d0:	429a      	cmp	r2, r3
 80195d2:	d235      	bcs.n	8019640 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80195d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80195d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80195d8:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80195da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80195dc:	2b00      	cmp	r3, #0
 80195de:	d020      	beq.n	8019622 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80195e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80195e2:	889b      	ldrh	r3, [r3, #4]
 80195e4:	b29a      	uxth	r2, r3
 80195e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80195e8:	88db      	ldrh	r3, [r3, #6]
 80195ea:	b29b      	uxth	r3, r3
 80195ec:	429a      	cmp	r2, r3
 80195ee:	d307      	bcc.n	8019600 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80195f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80195f2:	88db      	ldrh	r3, [r3, #6]
 80195f4:	b29a      	uxth	r2, r3
 80195f6:	693b      	ldr	r3, [r7, #16]
 80195f8:	889b      	ldrh	r3, [r3, #4]
 80195fa:	b29b      	uxth	r3, r3
 80195fc:	429a      	cmp	r2, r3
 80195fe:	d902      	bls.n	8019606 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019600:	f04f 33ff 	mov.w	r3, #4294967295
 8019604:	e0de      	b.n	80197c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8019606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019608:	68ba      	ldr	r2, [r7, #8]
 801960a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801960c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801960e:	88db      	ldrh	r3, [r3, #6]
 8019610:	b29a      	uxth	r2, r3
 8019612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019614:	889b      	ldrh	r3, [r3, #4]
 8019616:	b29b      	uxth	r3, r3
 8019618:	429a      	cmp	r2, r3
 801961a:	d03d      	beq.n	8019698 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801961c:	2300      	movs	r3, #0
 801961e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8019620:	e03a      	b.n	8019698 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8019622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019624:	88db      	ldrh	r3, [r3, #6]
 8019626:	b29a      	uxth	r2, r3
 8019628:	693b      	ldr	r3, [r7, #16]
 801962a:	889b      	ldrh	r3, [r3, #4]
 801962c:	b29b      	uxth	r3, r3
 801962e:	429a      	cmp	r2, r3
 8019630:	d902      	bls.n	8019638 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019632:	f04f 33ff 	mov.w	r3, #4294967295
 8019636:	e0c5      	b.n	80197c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8019638:	68fb      	ldr	r3, [r7, #12]
 801963a:	68ba      	ldr	r2, [r7, #8]
 801963c:	605a      	str	r2, [r3, #4]
      break;
 801963e:	e02b      	b.n	8019698 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8019640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019642:	889b      	ldrh	r3, [r3, #4]
 8019644:	b29a      	uxth	r2, r3
 8019646:	693b      	ldr	r3, [r7, #16]
 8019648:	889b      	ldrh	r3, [r3, #4]
 801964a:	b29b      	uxth	r3, r3
 801964c:	429a      	cmp	r2, r3
 801964e:	d102      	bne.n	8019656 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019650:	f04f 33ff 	mov.w	r3, #4294967295
 8019654:	e0b6      	b.n	80197c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8019656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019658:	889b      	ldrh	r3, [r3, #4]
 801965a:	b29a      	uxth	r2, r3
 801965c:	693b      	ldr	r3, [r7, #16]
 801965e:	88db      	ldrh	r3, [r3, #6]
 8019660:	b29b      	uxth	r3, r3
 8019662:	429a      	cmp	r2, r3
 8019664:	d202      	bcs.n	801966c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019666:	f04f 33ff 	mov.w	r3, #4294967295
 801966a:	e0ab      	b.n	80197c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801966c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801966e:	2b00      	cmp	r3, #0
 8019670:	d009      	beq.n	8019686 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8019672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019674:	88db      	ldrh	r3, [r3, #6]
 8019676:	b29a      	uxth	r2, r3
 8019678:	693b      	ldr	r3, [r7, #16]
 801967a:	889b      	ldrh	r3, [r3, #4]
 801967c:	b29b      	uxth	r3, r3
 801967e:	429a      	cmp	r2, r3
 8019680:	d001      	beq.n	8019686 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8019682:	2300      	movs	r3, #0
 8019684:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8019686:	693b      	ldr	r3, [r7, #16]
 8019688:	681b      	ldr	r3, [r3, #0]
 801968a:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 801968c:	693b      	ldr	r3, [r7, #16]
 801968e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8019690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019692:	2b00      	cmp	r3, #0
 8019694:	d193      	bne.n	80195be <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8019696:	e000      	b.n	801969a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8019698:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801969a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801969c:	2b00      	cmp	r3, #0
 801969e:	d12d      	bne.n	80196fc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 80196a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80196a2:	2b00      	cmp	r3, #0
 80196a4:	d01c      	beq.n	80196e0 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80196a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80196a8:	88db      	ldrh	r3, [r3, #6]
 80196aa:	b29a      	uxth	r2, r3
 80196ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80196ae:	889b      	ldrh	r3, [r3, #4]
 80196b0:	b29b      	uxth	r3, r3
 80196b2:	429a      	cmp	r2, r3
 80196b4:	d906      	bls.n	80196c4 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 80196b6:	4b45      	ldr	r3, [pc, #276]	; (80197cc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80196b8:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 80196bc:	4944      	ldr	r1, [pc, #272]	; (80197d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80196be:	4845      	ldr	r0, [pc, #276]	; (80197d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80196c0:	f001 fb86 	bl	801add0 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80196c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80196c6:	68ba      	ldr	r2, [r7, #8]
 80196c8:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80196ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80196cc:	88db      	ldrh	r3, [r3, #6]
 80196ce:	b29a      	uxth	r2, r3
 80196d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80196d2:	889b      	ldrh	r3, [r3, #4]
 80196d4:	b29b      	uxth	r3, r3
 80196d6:	429a      	cmp	r2, r3
 80196d8:	d010      	beq.n	80196fc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80196da:	2300      	movs	r3, #0
 80196dc:	623b      	str	r3, [r7, #32]
 80196de:	e00d      	b.n	80196fc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80196e0:	68fb      	ldr	r3, [r7, #12]
 80196e2:	685b      	ldr	r3, [r3, #4]
 80196e4:	2b00      	cmp	r3, #0
 80196e6:	d006      	beq.n	80196f6 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80196e8:	4b38      	ldr	r3, [pc, #224]	; (80197cc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80196ea:	f44f 72df 	mov.w	r2, #446	; 0x1be
 80196ee:	493a      	ldr	r1, [pc, #232]	; (80197d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80196f0:	4838      	ldr	r0, [pc, #224]	; (80197d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80196f2:	f001 fb6d 	bl	801add0 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80196f6:	68fb      	ldr	r3, [r7, #12]
 80196f8:	68ba      	ldr	r2, [r7, #8]
 80196fa:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80196fc:	687b      	ldr	r3, [r7, #4]
 80196fe:	2b00      	cmp	r3, #0
 8019700:	d105      	bne.n	801970e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8019702:	68fb      	ldr	r3, [r7, #12]
 8019704:	7f9b      	ldrb	r3, [r3, #30]
 8019706:	f003 0301 	and.w	r3, r3, #1
 801970a:	2b00      	cmp	r3, #0
 801970c:	d059      	beq.n	80197c2 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801970e:	6a3b      	ldr	r3, [r7, #32]
 8019710:	2b00      	cmp	r3, #0
 8019712:	d04f      	beq.n	80197b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8019714:	68fb      	ldr	r3, [r7, #12]
 8019716:	685b      	ldr	r3, [r3, #4]
 8019718:	2b00      	cmp	r3, #0
 801971a:	d006      	beq.n	801972a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801971c:	68fb      	ldr	r3, [r7, #12]
 801971e:	685b      	ldr	r3, [r3, #4]
 8019720:	685b      	ldr	r3, [r3, #4]
 8019722:	889b      	ldrh	r3, [r3, #4]
 8019724:	b29b      	uxth	r3, r3
 8019726:	2b00      	cmp	r3, #0
 8019728:	d002      	beq.n	8019730 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801972a:	2300      	movs	r3, #0
 801972c:	623b      	str	r3, [r7, #32]
 801972e:	e041      	b.n	80197b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8019730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019732:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8019734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019736:	681b      	ldr	r3, [r3, #0]
 8019738:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801973a:	e012      	b.n	8019762 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801973c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801973e:	685b      	ldr	r3, [r3, #4]
 8019740:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8019742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019744:	88db      	ldrh	r3, [r3, #6]
 8019746:	b29a      	uxth	r2, r3
 8019748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801974a:	889b      	ldrh	r3, [r3, #4]
 801974c:	b29b      	uxth	r3, r3
 801974e:	429a      	cmp	r2, r3
 8019750:	d002      	beq.n	8019758 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8019752:	2300      	movs	r3, #0
 8019754:	623b      	str	r3, [r7, #32]
            break;
 8019756:	e007      	b.n	8019768 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8019758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801975a:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 801975c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801975e:	681b      	ldr	r3, [r3, #0]
 8019760:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8019762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019764:	2b00      	cmp	r3, #0
 8019766:	d1e9      	bne.n	801973c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8019768:	6a3b      	ldr	r3, [r7, #32]
 801976a:	2b00      	cmp	r3, #0
 801976c:	d022      	beq.n	80197b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801976e:	68fb      	ldr	r3, [r7, #12]
 8019770:	685b      	ldr	r3, [r3, #4]
 8019772:	2b00      	cmp	r3, #0
 8019774:	d106      	bne.n	8019784 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8019776:	4b15      	ldr	r3, [pc, #84]	; (80197cc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8019778:	f240 12df 	movw	r2, #479	; 0x1df
 801977c:	4917      	ldr	r1, [pc, #92]	; (80197dc <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801977e:	4815      	ldr	r0, [pc, #84]	; (80197d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8019780:	f001 fb26 	bl	801add0 <iprintf>
          LWIP_ASSERT("sanity check",
 8019784:	68fb      	ldr	r3, [r7, #12]
 8019786:	685b      	ldr	r3, [r3, #4]
 8019788:	685b      	ldr	r3, [r3, #4]
 801978a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801978c:	429a      	cmp	r2, r3
 801978e:	d106      	bne.n	801979e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8019790:	4b0e      	ldr	r3, [pc, #56]	; (80197cc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8019792:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8019796:	4911      	ldr	r1, [pc, #68]	; (80197dc <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8019798:	480e      	ldr	r0, [pc, #56]	; (80197d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801979a:	f001 fb19 	bl	801add0 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801979e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80197a0:	681b      	ldr	r3, [r3, #0]
 80197a2:	2b00      	cmp	r3, #0
 80197a4:	d006      	beq.n	80197b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 80197a6:	4b09      	ldr	r3, [pc, #36]	; (80197cc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80197a8:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 80197ac:	490c      	ldr	r1, [pc, #48]	; (80197e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80197ae:	4809      	ldr	r0, [pc, #36]	; (80197d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80197b0:	f001 fb0e 	bl	801add0 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80197b4:	6a3b      	ldr	r3, [r7, #32]
 80197b6:	2b00      	cmp	r3, #0
 80197b8:	bf14      	ite	ne
 80197ba:	2301      	movne	r3, #1
 80197bc:	2300      	moveq	r3, #0
 80197be:	b2db      	uxtb	r3, r3
 80197c0:	e000      	b.n	80197c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80197c2:	2300      	movs	r3, #0
}
 80197c4:	4618      	mov	r0, r3
 80197c6:	3730      	adds	r7, #48	; 0x30
 80197c8:	46bd      	mov	sp, r7
 80197ca:	bd80      	pop	{r7, pc}
 80197cc:	080207c0 	.word	0x080207c0
 80197d0:	080208a4 	.word	0x080208a4
 80197d4:	08020808 	.word	0x08020808
 80197d8:	080208c4 	.word	0x080208c4
 80197dc:	080208fc 	.word	0x080208fc
 80197e0:	0802090c 	.word	0x0802090c

080197e4 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80197e4:	b580      	push	{r7, lr}
 80197e6:	b08e      	sub	sp, #56	; 0x38
 80197e8:	af00      	add	r7, sp, #0
 80197ea:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 80197ec:	687b      	ldr	r3, [r7, #4]
 80197ee:	685b      	ldr	r3, [r3, #4]
 80197f0:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80197f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80197f4:	781b      	ldrb	r3, [r3, #0]
 80197f6:	f003 030f 	and.w	r3, r3, #15
 80197fa:	b2db      	uxtb	r3, r3
 80197fc:	009b      	lsls	r3, r3, #2
 80197fe:	b2db      	uxtb	r3, r3
 8019800:	2b14      	cmp	r3, #20
 8019802:	f040 8179 	bne.w	8019af8 <ip4_reass+0x314>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8019806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019808:	88db      	ldrh	r3, [r3, #6]
 801980a:	b29b      	uxth	r3, r3
 801980c:	4618      	mov	r0, r3
 801980e:	f7f3 fe01 	bl	800d414 <lwip_htons>
 8019812:	4603      	mov	r3, r0
 8019814:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8019818:	b29b      	uxth	r3, r3
 801981a:	00db      	lsls	r3, r3, #3
 801981c:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801981e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019820:	885b      	ldrh	r3, [r3, #2]
 8019822:	b29b      	uxth	r3, r3
 8019824:	4618      	mov	r0, r3
 8019826:	f7f3 fdf5 	bl	800d414 <lwip_htons>
 801982a:	4603      	mov	r3, r0
 801982c:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801982e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019830:	781b      	ldrb	r3, [r3, #0]
 8019832:	f003 030f 	and.w	r3, r3, #15
 8019836:	b2db      	uxtb	r3, r3
 8019838:	009b      	lsls	r3, r3, #2
 801983a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801983e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8019842:	b29b      	uxth	r3, r3
 8019844:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8019846:	429a      	cmp	r2, r3
 8019848:	f0c0 8158 	bcc.w	8019afc <ip4_reass+0x318>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801984c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8019850:	b29b      	uxth	r3, r3
 8019852:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8019854:	1ad3      	subs	r3, r2, r3
 8019856:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8019858:	6878      	ldr	r0, [r7, #4]
 801985a:	f7f5 fb8b 	bl	800ef74 <pbuf_clen>
 801985e:	4603      	mov	r3, r0
 8019860:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8019862:	4b90      	ldr	r3, [pc, #576]	; (8019aa4 <ip4_reass+0x2c0>)
 8019864:	881b      	ldrh	r3, [r3, #0]
 8019866:	461a      	mov	r2, r3
 8019868:	8c3b      	ldrh	r3, [r7, #32]
 801986a:	4413      	add	r3, r2
 801986c:	2b0a      	cmp	r3, #10
 801986e:	dd10      	ble.n	8019892 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8019870:	8c3b      	ldrh	r3, [r7, #32]
 8019872:	4619      	mov	r1, r3
 8019874:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019876:	f7ff fd81 	bl	801937c <ip_reass_remove_oldest_datagram>
 801987a:	4603      	mov	r3, r0
 801987c:	2b00      	cmp	r3, #0
 801987e:	f000 813f 	beq.w	8019b00 <ip4_reass+0x31c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8019882:	4b88      	ldr	r3, [pc, #544]	; (8019aa4 <ip4_reass+0x2c0>)
 8019884:	881b      	ldrh	r3, [r3, #0]
 8019886:	461a      	mov	r2, r3
 8019888:	8c3b      	ldrh	r3, [r7, #32]
 801988a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801988c:	2b0a      	cmp	r3, #10
 801988e:	f300 8137 	bgt.w	8019b00 <ip4_reass+0x31c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8019892:	4b85      	ldr	r3, [pc, #532]	; (8019aa8 <ip4_reass+0x2c4>)
 8019894:	681b      	ldr	r3, [r3, #0]
 8019896:	633b      	str	r3, [r7, #48]	; 0x30
 8019898:	e015      	b.n	80198c6 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801989a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801989c:	695a      	ldr	r2, [r3, #20]
 801989e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80198a0:	68db      	ldr	r3, [r3, #12]
 80198a2:	429a      	cmp	r2, r3
 80198a4:	d10c      	bne.n	80198c0 <ip4_reass+0xdc>
 80198a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80198a8:	699a      	ldr	r2, [r3, #24]
 80198aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80198ac:	691b      	ldr	r3, [r3, #16]
 80198ae:	429a      	cmp	r2, r3
 80198b0:	d106      	bne.n	80198c0 <ip4_reass+0xdc>
 80198b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80198b4:	899a      	ldrh	r2, [r3, #12]
 80198b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80198b8:	889b      	ldrh	r3, [r3, #4]
 80198ba:	b29b      	uxth	r3, r3
 80198bc:	429a      	cmp	r2, r3
 80198be:	d006      	beq.n	80198ce <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80198c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80198c2:	681b      	ldr	r3, [r3, #0]
 80198c4:	633b      	str	r3, [r7, #48]	; 0x30
 80198c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80198c8:	2b00      	cmp	r3, #0
 80198ca:	d1e6      	bne.n	801989a <ip4_reass+0xb6>
 80198cc:	e000      	b.n	80198d0 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80198ce:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80198d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80198d2:	2b00      	cmp	r3, #0
 80198d4:	d109      	bne.n	80198ea <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80198d6:	8c3b      	ldrh	r3, [r7, #32]
 80198d8:	4619      	mov	r1, r3
 80198da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80198dc:	f7ff fdb0 	bl	8019440 <ip_reass_enqueue_new_datagram>
 80198e0:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80198e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80198e4:	2b00      	cmp	r3, #0
 80198e6:	d11c      	bne.n	8019922 <ip4_reass+0x13e>
      goto nullreturn;
 80198e8:	e10d      	b.n	8019b06 <ip4_reass+0x322>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80198ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80198ec:	88db      	ldrh	r3, [r3, #6]
 80198ee:	b29b      	uxth	r3, r3
 80198f0:	4618      	mov	r0, r3
 80198f2:	f7f3 fd8f 	bl	800d414 <lwip_htons>
 80198f6:	4603      	mov	r3, r0
 80198f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80198fc:	2b00      	cmp	r3, #0
 80198fe:	d110      	bne.n	8019922 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8019900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019902:	89db      	ldrh	r3, [r3, #14]
 8019904:	4618      	mov	r0, r3
 8019906:	f7f3 fd85 	bl	800d414 <lwip_htons>
 801990a:	4603      	mov	r3, r0
 801990c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8019910:	2b00      	cmp	r3, #0
 8019912:	d006      	beq.n	8019922 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8019914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019916:	3308      	adds	r3, #8
 8019918:	2214      	movs	r2, #20
 801991a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801991c:	4618      	mov	r0, r3
 801991e:	f000 fce1 	bl	801a2e4 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8019922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019924:	88db      	ldrh	r3, [r3, #6]
 8019926:	b29b      	uxth	r3, r3
 8019928:	f003 0320 	and.w	r3, r3, #32
 801992c:	2b00      	cmp	r3, #0
 801992e:	bf0c      	ite	eq
 8019930:	2301      	moveq	r3, #1
 8019932:	2300      	movne	r3, #0
 8019934:	b2db      	uxtb	r3, r3
 8019936:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8019938:	69fb      	ldr	r3, [r7, #28]
 801993a:	2b00      	cmp	r3, #0
 801993c:	d00e      	beq.n	801995c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801993e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8019940:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8019942:	4413      	add	r3, r2
 8019944:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8019946:	8b7a      	ldrh	r2, [r7, #26]
 8019948:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801994a:	429a      	cmp	r2, r3
 801994c:	f0c0 80a8 	bcc.w	8019aa0 <ip4_reass+0x2bc>
 8019950:	8b7b      	ldrh	r3, [r7, #26]
 8019952:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8019956:	4293      	cmp	r3, r2
 8019958:	f200 80a2 	bhi.w	8019aa0 <ip4_reass+0x2bc>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801995c:	69fa      	ldr	r2, [r7, #28]
 801995e:	6879      	ldr	r1, [r7, #4]
 8019960:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019962:	f7ff fdd5 	bl	8019510 <ip_reass_chain_frag_into_datagram_and_validate>
 8019966:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8019968:	697b      	ldr	r3, [r7, #20]
 801996a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801996e:	f000 80a3 	beq.w	8019ab8 <ip4_reass+0x2d4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8019972:	4b4c      	ldr	r3, [pc, #304]	; (8019aa4 <ip4_reass+0x2c0>)
 8019974:	881a      	ldrh	r2, [r3, #0]
 8019976:	8c3b      	ldrh	r3, [r7, #32]
 8019978:	4413      	add	r3, r2
 801997a:	b29a      	uxth	r2, r3
 801997c:	4b49      	ldr	r3, [pc, #292]	; (8019aa4 <ip4_reass+0x2c0>)
 801997e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8019980:	69fb      	ldr	r3, [r7, #28]
 8019982:	2b00      	cmp	r3, #0
 8019984:	d00d      	beq.n	80199a2 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8019986:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8019988:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801998a:	4413      	add	r3, r2
 801998c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801998e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019990:	8a7a      	ldrh	r2, [r7, #18]
 8019992:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8019994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019996:	7f9b      	ldrb	r3, [r3, #30]
 8019998:	f043 0301 	orr.w	r3, r3, #1
 801999c:	b2da      	uxtb	r2, r3
 801999e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80199a0:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80199a2:	697b      	ldr	r3, [r7, #20]
 80199a4:	2b01      	cmp	r3, #1
 80199a6:	d179      	bne.n	8019a9c <ip4_reass+0x2b8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80199a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80199aa:	8b9b      	ldrh	r3, [r3, #28]
 80199ac:	3314      	adds	r3, #20
 80199ae:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80199b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80199b2:	685b      	ldr	r3, [r3, #4]
 80199b4:	685b      	ldr	r3, [r3, #4]
 80199b6:	681b      	ldr	r3, [r3, #0]
 80199b8:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 80199ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80199bc:	685b      	ldr	r3, [r3, #4]
 80199be:	685b      	ldr	r3, [r3, #4]
 80199c0:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80199c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80199c4:	3308      	adds	r3, #8
 80199c6:	2214      	movs	r2, #20
 80199c8:	4619      	mov	r1, r3
 80199ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80199cc:	f000 fc8a 	bl	801a2e4 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80199d0:	8a3b      	ldrh	r3, [r7, #16]
 80199d2:	4618      	mov	r0, r3
 80199d4:	f7f3 fd1e 	bl	800d414 <lwip_htons>
 80199d8:	4603      	mov	r3, r0
 80199da:	461a      	mov	r2, r3
 80199dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80199de:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80199e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80199e2:	2200      	movs	r2, #0
 80199e4:	719a      	strb	r2, [r3, #6]
 80199e6:	2200      	movs	r2, #0
 80199e8:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80199ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80199ec:	2200      	movs	r2, #0
 80199ee:	729a      	strb	r2, [r3, #10]
 80199f0:	2200      	movs	r2, #0
 80199f2:	72da      	strb	r2, [r3, #11]
    /* @todo: do we need to set/calculate the correct checksum? */
#if CHECKSUM_GEN_IP
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
 80199f4:	2114      	movs	r1, #20
 80199f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80199f8:	f7f3 fe54 	bl	800d6a4 <inet_chksum>
 80199fc:	4603      	mov	r3, r0
 80199fe:	461a      	mov	r2, r3
 8019a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019a02:	815a      	strh	r2, [r3, #10]
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8019a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019a06:	685b      	ldr	r3, [r3, #4]
 8019a08:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8019a0a:	e00d      	b.n	8019a28 <ip4_reass+0x244>
      iprh = (struct ip_reass_helper *)r->payload;
 8019a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019a0e:	685b      	ldr	r3, [r3, #4]
 8019a10:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8019a12:	2114      	movs	r1, #20
 8019a14:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8019a16:	f7f5 f999 	bl	800ed4c <pbuf_remove_header>
      pbuf_cat(p, r);
 8019a1a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8019a1c:	6878      	ldr	r0, [r7, #4]
 8019a1e:	f7f5 fae9 	bl	800eff4 <pbuf_cat>
      r = iprh->next_pbuf;
 8019a22:	68fb      	ldr	r3, [r7, #12]
 8019a24:	681b      	ldr	r3, [r3, #0]
 8019a26:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (r != NULL) {
 8019a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019a2a:	2b00      	cmp	r3, #0
 8019a2c:	d1ee      	bne.n	8019a0c <ip4_reass+0x228>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8019a2e:	4b1e      	ldr	r3, [pc, #120]	; (8019aa8 <ip4_reass+0x2c4>)
 8019a30:	681b      	ldr	r3, [r3, #0]
 8019a32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019a34:	429a      	cmp	r2, r3
 8019a36:	d102      	bne.n	8019a3e <ip4_reass+0x25a>
      ipr_prev = NULL;
 8019a38:	2300      	movs	r3, #0
 8019a3a:	637b      	str	r3, [r7, #52]	; 0x34
 8019a3c:	e010      	b.n	8019a60 <ip4_reass+0x27c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8019a3e:	4b1a      	ldr	r3, [pc, #104]	; (8019aa8 <ip4_reass+0x2c4>)
 8019a40:	681b      	ldr	r3, [r3, #0]
 8019a42:	637b      	str	r3, [r7, #52]	; 0x34
 8019a44:	e007      	b.n	8019a56 <ip4_reass+0x272>
        if (ipr_prev->next == ipr) {
 8019a46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019a48:	681b      	ldr	r3, [r3, #0]
 8019a4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019a4c:	429a      	cmp	r2, r3
 8019a4e:	d006      	beq.n	8019a5e <ip4_reass+0x27a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8019a50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019a52:	681b      	ldr	r3, [r3, #0]
 8019a54:	637b      	str	r3, [r7, #52]	; 0x34
 8019a56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019a58:	2b00      	cmp	r3, #0
 8019a5a:	d1f4      	bne.n	8019a46 <ip4_reass+0x262>
 8019a5c:	e000      	b.n	8019a60 <ip4_reass+0x27c>
          break;
 8019a5e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8019a60:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8019a62:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019a64:	f7ff fd26 	bl	80194b4 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8019a68:	6878      	ldr	r0, [r7, #4]
 8019a6a:	f7f5 fa83 	bl	800ef74 <pbuf_clen>
 8019a6e:	4603      	mov	r3, r0
 8019a70:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8019a72:	4b0c      	ldr	r3, [pc, #48]	; (8019aa4 <ip4_reass+0x2c0>)
 8019a74:	881b      	ldrh	r3, [r3, #0]
 8019a76:	8c3a      	ldrh	r2, [r7, #32]
 8019a78:	429a      	cmp	r2, r3
 8019a7a:	d906      	bls.n	8019a8a <ip4_reass+0x2a6>
 8019a7c:	4b0b      	ldr	r3, [pc, #44]	; (8019aac <ip4_reass+0x2c8>)
 8019a7e:	f240 229b 	movw	r2, #667	; 0x29b
 8019a82:	490b      	ldr	r1, [pc, #44]	; (8019ab0 <ip4_reass+0x2cc>)
 8019a84:	480b      	ldr	r0, [pc, #44]	; (8019ab4 <ip4_reass+0x2d0>)
 8019a86:	f001 f9a3 	bl	801add0 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8019a8a:	4b06      	ldr	r3, [pc, #24]	; (8019aa4 <ip4_reass+0x2c0>)
 8019a8c:	881a      	ldrh	r2, [r3, #0]
 8019a8e:	8c3b      	ldrh	r3, [r7, #32]
 8019a90:	1ad3      	subs	r3, r2, r3
 8019a92:	b29a      	uxth	r2, r3
 8019a94:	4b03      	ldr	r3, [pc, #12]	; (8019aa4 <ip4_reass+0x2c0>)
 8019a96:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8019a98:	687b      	ldr	r3, [r7, #4]
 8019a9a:	e038      	b.n	8019b0e <ip4_reass+0x32a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8019a9c:	2300      	movs	r3, #0
 8019a9e:	e036      	b.n	8019b0e <ip4_reass+0x32a>
      goto nullreturn_ipr;
 8019aa0:	bf00      	nop
 8019aa2:	e00a      	b.n	8019aba <ip4_reass+0x2d6>
 8019aa4:	20013e68 	.word	0x20013e68
 8019aa8:	20013e64 	.word	0x20013e64
 8019aac:	080207c0 	.word	0x080207c0
 8019ab0:	08020930 	.word	0x08020930
 8019ab4:	08020808 	.word	0x08020808
    goto nullreturn_ipr;
 8019ab8:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8019aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019abc:	2b00      	cmp	r3, #0
 8019abe:	d106      	bne.n	8019ace <ip4_reass+0x2ea>
 8019ac0:	4b15      	ldr	r3, [pc, #84]	; (8019b18 <ip4_reass+0x334>)
 8019ac2:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8019ac6:	4915      	ldr	r1, [pc, #84]	; (8019b1c <ip4_reass+0x338>)
 8019ac8:	4815      	ldr	r0, [pc, #84]	; (8019b20 <ip4_reass+0x33c>)
 8019aca:	f001 f981 	bl	801add0 <iprintf>
  if (ipr->p == NULL) {
 8019ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019ad0:	685b      	ldr	r3, [r3, #4]
 8019ad2:	2b00      	cmp	r3, #0
 8019ad4:	d116      	bne.n	8019b04 <ip4_reass+0x320>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8019ad6:	4b13      	ldr	r3, [pc, #76]	; (8019b24 <ip4_reass+0x340>)
 8019ad8:	681b      	ldr	r3, [r3, #0]
 8019ada:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019adc:	429a      	cmp	r2, r3
 8019ade:	d006      	beq.n	8019aee <ip4_reass+0x30a>
 8019ae0:	4b0d      	ldr	r3, [pc, #52]	; (8019b18 <ip4_reass+0x334>)
 8019ae2:	f240 22ab 	movw	r2, #683	; 0x2ab
 8019ae6:	4910      	ldr	r1, [pc, #64]	; (8019b28 <ip4_reass+0x344>)
 8019ae8:	480d      	ldr	r0, [pc, #52]	; (8019b20 <ip4_reass+0x33c>)
 8019aea:	f001 f971 	bl	801add0 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8019aee:	2100      	movs	r1, #0
 8019af0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019af2:	f7ff fcdf 	bl	80194b4 <ip_reass_dequeue_datagram>
 8019af6:	e006      	b.n	8019b06 <ip4_reass+0x322>
    goto nullreturn;
 8019af8:	bf00      	nop
 8019afa:	e004      	b.n	8019b06 <ip4_reass+0x322>
    goto nullreturn;
 8019afc:	bf00      	nop
 8019afe:	e002      	b.n	8019b06 <ip4_reass+0x322>
      goto nullreturn;
 8019b00:	bf00      	nop
 8019b02:	e000      	b.n	8019b06 <ip4_reass+0x322>
  }

nullreturn:
 8019b04:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8019b06:	6878      	ldr	r0, [r7, #4]
 8019b08:	f7f5 f9a6 	bl	800ee58 <pbuf_free>
  return NULL;
 8019b0c:	2300      	movs	r3, #0
}
 8019b0e:	4618      	mov	r0, r3
 8019b10:	3738      	adds	r7, #56	; 0x38
 8019b12:	46bd      	mov	sp, r7
 8019b14:	bd80      	pop	{r7, pc}
 8019b16:	bf00      	nop
 8019b18:	080207c0 	.word	0x080207c0
 8019b1c:	0802094c 	.word	0x0802094c
 8019b20:	08020808 	.word	0x08020808
 8019b24:	20013e64 	.word	0x20013e64
 8019b28:	08020958 	.word	0x08020958

08019b2c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8019b2c:	b580      	push	{r7, lr}
 8019b2e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8019b30:	2005      	movs	r0, #5
 8019b32:	f7f4 fa9d 	bl	800e070 <memp_malloc>
 8019b36:	4603      	mov	r3, r0
}
 8019b38:	4618      	mov	r0, r3
 8019b3a:	bd80      	pop	{r7, pc}

08019b3c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8019b3c:	b580      	push	{r7, lr}
 8019b3e:	b082      	sub	sp, #8
 8019b40:	af00      	add	r7, sp, #0
 8019b42:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8019b44:	687b      	ldr	r3, [r7, #4]
 8019b46:	2b00      	cmp	r3, #0
 8019b48:	d106      	bne.n	8019b58 <ip_frag_free_pbuf_custom_ref+0x1c>
 8019b4a:	4b07      	ldr	r3, [pc, #28]	; (8019b68 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8019b4c:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8019b50:	4906      	ldr	r1, [pc, #24]	; (8019b6c <ip_frag_free_pbuf_custom_ref+0x30>)
 8019b52:	4807      	ldr	r0, [pc, #28]	; (8019b70 <ip_frag_free_pbuf_custom_ref+0x34>)
 8019b54:	f001 f93c 	bl	801add0 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8019b58:	6879      	ldr	r1, [r7, #4]
 8019b5a:	2005      	movs	r0, #5
 8019b5c:	f7f4 fada 	bl	800e114 <memp_free>
}
 8019b60:	bf00      	nop
 8019b62:	3708      	adds	r7, #8
 8019b64:	46bd      	mov	sp, r7
 8019b66:	bd80      	pop	{r7, pc}
 8019b68:	080207c0 	.word	0x080207c0
 8019b6c:	08020978 	.word	0x08020978
 8019b70:	08020808 	.word	0x08020808

08019b74 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8019b74:	b580      	push	{r7, lr}
 8019b76:	b084      	sub	sp, #16
 8019b78:	af00      	add	r7, sp, #0
 8019b7a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8019b7c:	687b      	ldr	r3, [r7, #4]
 8019b7e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8019b80:	68fb      	ldr	r3, [r7, #12]
 8019b82:	2b00      	cmp	r3, #0
 8019b84:	d106      	bne.n	8019b94 <ipfrag_free_pbuf_custom+0x20>
 8019b86:	4b11      	ldr	r3, [pc, #68]	; (8019bcc <ipfrag_free_pbuf_custom+0x58>)
 8019b88:	f240 22ce 	movw	r2, #718	; 0x2ce
 8019b8c:	4910      	ldr	r1, [pc, #64]	; (8019bd0 <ipfrag_free_pbuf_custom+0x5c>)
 8019b8e:	4811      	ldr	r0, [pc, #68]	; (8019bd4 <ipfrag_free_pbuf_custom+0x60>)
 8019b90:	f001 f91e 	bl	801add0 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8019b94:	68fa      	ldr	r2, [r7, #12]
 8019b96:	687b      	ldr	r3, [r7, #4]
 8019b98:	429a      	cmp	r2, r3
 8019b9a:	d006      	beq.n	8019baa <ipfrag_free_pbuf_custom+0x36>
 8019b9c:	4b0b      	ldr	r3, [pc, #44]	; (8019bcc <ipfrag_free_pbuf_custom+0x58>)
 8019b9e:	f240 22cf 	movw	r2, #719	; 0x2cf
 8019ba2:	490d      	ldr	r1, [pc, #52]	; (8019bd8 <ipfrag_free_pbuf_custom+0x64>)
 8019ba4:	480b      	ldr	r0, [pc, #44]	; (8019bd4 <ipfrag_free_pbuf_custom+0x60>)
 8019ba6:	f001 f913 	bl	801add0 <iprintf>
  if (pcr->original != NULL) {
 8019baa:	68fb      	ldr	r3, [r7, #12]
 8019bac:	695b      	ldr	r3, [r3, #20]
 8019bae:	2b00      	cmp	r3, #0
 8019bb0:	d004      	beq.n	8019bbc <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8019bb2:	68fb      	ldr	r3, [r7, #12]
 8019bb4:	695b      	ldr	r3, [r3, #20]
 8019bb6:	4618      	mov	r0, r3
 8019bb8:	f7f5 f94e 	bl	800ee58 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8019bbc:	68f8      	ldr	r0, [r7, #12]
 8019bbe:	f7ff ffbd 	bl	8019b3c <ip_frag_free_pbuf_custom_ref>
}
 8019bc2:	bf00      	nop
 8019bc4:	3710      	adds	r7, #16
 8019bc6:	46bd      	mov	sp, r7
 8019bc8:	bd80      	pop	{r7, pc}
 8019bca:	bf00      	nop
 8019bcc:	080207c0 	.word	0x080207c0
 8019bd0:	08020984 	.word	0x08020984
 8019bd4:	08020808 	.word	0x08020808
 8019bd8:	08020990 	.word	0x08020990

08019bdc <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8019bdc:	b580      	push	{r7, lr}
 8019bde:	b094      	sub	sp, #80	; 0x50
 8019be0:	af02      	add	r7, sp, #8
 8019be2:	60f8      	str	r0, [r7, #12]
 8019be4:	60b9      	str	r1, [r7, #8]
 8019be6:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8019be8:	2300      	movs	r3, #0
 8019bea:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8019bee:	68bb      	ldr	r3, [r7, #8]
 8019bf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8019bf2:	3b14      	subs	r3, #20
 8019bf4:	2b00      	cmp	r3, #0
 8019bf6:	da00      	bge.n	8019bfa <ip4_frag+0x1e>
 8019bf8:	3307      	adds	r3, #7
 8019bfa:	10db      	asrs	r3, r3, #3
 8019bfc:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8019bfe:	2314      	movs	r3, #20
 8019c00:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8019c02:	68fb      	ldr	r3, [r7, #12]
 8019c04:	685b      	ldr	r3, [r3, #4]
 8019c06:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8019c08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019c0a:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8019c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019c0e:	781b      	ldrb	r3, [r3, #0]
 8019c10:	f003 030f 	and.w	r3, r3, #15
 8019c14:	b2db      	uxtb	r3, r3
 8019c16:	009b      	lsls	r3, r3, #2
 8019c18:	b2db      	uxtb	r3, r3
 8019c1a:	2b14      	cmp	r3, #20
 8019c1c:	d002      	beq.n	8019c24 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8019c1e:	f06f 0305 	mvn.w	r3, #5
 8019c22:	e118      	b.n	8019e56 <ip4_frag+0x27a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8019c24:	68fb      	ldr	r3, [r7, #12]
 8019c26:	895b      	ldrh	r3, [r3, #10]
 8019c28:	2b13      	cmp	r3, #19
 8019c2a:	d809      	bhi.n	8019c40 <ip4_frag+0x64>
 8019c2c:	4b8c      	ldr	r3, [pc, #560]	; (8019e60 <ip4_frag+0x284>)
 8019c2e:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8019c32:	498c      	ldr	r1, [pc, #560]	; (8019e64 <ip4_frag+0x288>)
 8019c34:	488c      	ldr	r0, [pc, #560]	; (8019e68 <ip4_frag+0x28c>)
 8019c36:	f001 f8cb 	bl	801add0 <iprintf>
 8019c3a:	f06f 0305 	mvn.w	r3, #5
 8019c3e:	e10a      	b.n	8019e56 <ip4_frag+0x27a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8019c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019c42:	88db      	ldrh	r3, [r3, #6]
 8019c44:	b29b      	uxth	r3, r3
 8019c46:	4618      	mov	r0, r3
 8019c48:	f7f3 fbe4 	bl	800d414 <lwip_htons>
 8019c4c:	4603      	mov	r3, r0
 8019c4e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8019c50:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8019c52:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8019c56:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8019c5a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8019c5c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8019c60:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8019c62:	68fb      	ldr	r3, [r7, #12]
 8019c64:	891b      	ldrh	r3, [r3, #8]
 8019c66:	3b14      	subs	r3, #20
 8019c68:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8019c6c:	e0e9      	b.n	8019e42 <ip4_frag+0x266>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8019c6e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8019c70:	00db      	lsls	r3, r3, #3
 8019c72:	b29b      	uxth	r3, r3
 8019c74:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8019c78:	4293      	cmp	r3, r2
 8019c7a:	bf28      	it	cs
 8019c7c:	4613      	movcs	r3, r2
 8019c7e:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8019c80:	f44f 7220 	mov.w	r2, #640	; 0x280
 8019c84:	2114      	movs	r1, #20
 8019c86:	200e      	movs	r0, #14
 8019c88:	f7f4 fdfe 	bl	800e888 <pbuf_alloc>
 8019c8c:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8019c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c90:	2b00      	cmp	r3, #0
 8019c92:	f000 80dd 	beq.w	8019e50 <ip4_frag+0x274>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8019c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c98:	895b      	ldrh	r3, [r3, #10]
 8019c9a:	2b13      	cmp	r3, #19
 8019c9c:	d806      	bhi.n	8019cac <ip4_frag+0xd0>
 8019c9e:	4b70      	ldr	r3, [pc, #448]	; (8019e60 <ip4_frag+0x284>)
 8019ca0:	f44f 7249 	mov.w	r2, #804	; 0x324
 8019ca4:	4971      	ldr	r1, [pc, #452]	; (8019e6c <ip4_frag+0x290>)
 8019ca6:	4870      	ldr	r0, [pc, #448]	; (8019e68 <ip4_frag+0x28c>)
 8019ca8:	f001 f892 	bl	801add0 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8019cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019cae:	685b      	ldr	r3, [r3, #4]
 8019cb0:	2214      	movs	r2, #20
 8019cb2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8019cb4:	4618      	mov	r0, r3
 8019cb6:	f000 fb15 	bl	801a2e4 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8019cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019cbc:	685b      	ldr	r3, [r3, #4]
 8019cbe:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8019cc0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8019cc2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8019cc6:	e064      	b.n	8019d92 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8019cc8:	68fb      	ldr	r3, [r7, #12]
 8019cca:	895a      	ldrh	r2, [r3, #10]
 8019ccc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8019cce:	1ad3      	subs	r3, r2, r3
 8019cd0:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8019cd2:	68fb      	ldr	r3, [r7, #12]
 8019cd4:	895b      	ldrh	r3, [r3, #10]
 8019cd6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8019cd8:	429a      	cmp	r2, r3
 8019cda:	d906      	bls.n	8019cea <ip4_frag+0x10e>
 8019cdc:	4b60      	ldr	r3, [pc, #384]	; (8019e60 <ip4_frag+0x284>)
 8019cde:	f240 322d 	movw	r2, #813	; 0x32d
 8019ce2:	4963      	ldr	r1, [pc, #396]	; (8019e70 <ip4_frag+0x294>)
 8019ce4:	4860      	ldr	r0, [pc, #384]	; (8019e68 <ip4_frag+0x28c>)
 8019ce6:	f001 f873 	bl	801add0 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8019cea:	8bfa      	ldrh	r2, [r7, #30]
 8019cec:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8019cf0:	4293      	cmp	r3, r2
 8019cf2:	bf28      	it	cs
 8019cf4:	4613      	movcs	r3, r2
 8019cf6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8019cfa:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8019cfe:	2b00      	cmp	r3, #0
 8019d00:	d105      	bne.n	8019d0e <ip4_frag+0x132>
        poff = 0;
 8019d02:	2300      	movs	r3, #0
 8019d04:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8019d06:	68fb      	ldr	r3, [r7, #12]
 8019d08:	681b      	ldr	r3, [r3, #0]
 8019d0a:	60fb      	str	r3, [r7, #12]
        continue;
 8019d0c:	e041      	b.n	8019d92 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8019d0e:	f7ff ff0d 	bl	8019b2c <ip_frag_alloc_pbuf_custom_ref>
 8019d12:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8019d14:	69bb      	ldr	r3, [r7, #24]
 8019d16:	2b00      	cmp	r3, #0
 8019d18:	d103      	bne.n	8019d22 <ip4_frag+0x146>
        pbuf_free(rambuf);
 8019d1a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019d1c:	f7f5 f89c 	bl	800ee58 <pbuf_free>
        goto memerr;
 8019d20:	e097      	b.n	8019e52 <ip4_frag+0x276>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8019d22:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8019d24:	68fb      	ldr	r3, [r7, #12]
 8019d26:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8019d28:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8019d2a:	4413      	add	r3, r2
 8019d2c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8019d30:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8019d34:	9201      	str	r2, [sp, #4]
 8019d36:	9300      	str	r3, [sp, #0]
 8019d38:	4603      	mov	r3, r0
 8019d3a:	2241      	movs	r2, #65	; 0x41
 8019d3c:	2000      	movs	r0, #0
 8019d3e:	f7f4 fed1 	bl	800eae4 <pbuf_alloced_custom>
 8019d42:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8019d44:	697b      	ldr	r3, [r7, #20]
 8019d46:	2b00      	cmp	r3, #0
 8019d48:	d106      	bne.n	8019d58 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8019d4a:	69b8      	ldr	r0, [r7, #24]
 8019d4c:	f7ff fef6 	bl	8019b3c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8019d50:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019d52:	f7f5 f881 	bl	800ee58 <pbuf_free>
        goto memerr;
 8019d56:	e07c      	b.n	8019e52 <ip4_frag+0x276>
      }
      pbuf_ref(p);
 8019d58:	68f8      	ldr	r0, [r7, #12]
 8019d5a:	f7f5 f923 	bl	800efa4 <pbuf_ref>
      pcr->original = p;
 8019d5e:	69bb      	ldr	r3, [r7, #24]
 8019d60:	68fa      	ldr	r2, [r7, #12]
 8019d62:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8019d64:	69bb      	ldr	r3, [r7, #24]
 8019d66:	4a43      	ldr	r2, [pc, #268]	; (8019e74 <ip4_frag+0x298>)
 8019d68:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8019d6a:	6979      	ldr	r1, [r7, #20]
 8019d6c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019d6e:	f7f5 f941 	bl	800eff4 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8019d72:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8019d76:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8019d7a:	1ad3      	subs	r3, r2, r3
 8019d7c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8019d80:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8019d84:	2b00      	cmp	r3, #0
 8019d86:	d004      	beq.n	8019d92 <ip4_frag+0x1b6>
        poff = 0;
 8019d88:	2300      	movs	r3, #0
 8019d8a:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8019d8c:	68fb      	ldr	r3, [r7, #12]
 8019d8e:	681b      	ldr	r3, [r3, #0]
 8019d90:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8019d92:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8019d96:	2b00      	cmp	r3, #0
 8019d98:	d196      	bne.n	8019cc8 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8019d9a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8019d9c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8019da0:	4413      	add	r3, r2
 8019da2:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8019da4:	68bb      	ldr	r3, [r7, #8]
 8019da6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8019da8:	f1a3 0213 	sub.w	r2, r3, #19
 8019dac:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8019db0:	429a      	cmp	r2, r3
 8019db2:	bfcc      	ite	gt
 8019db4:	2301      	movgt	r3, #1
 8019db6:	2300      	movle	r3, #0
 8019db8:	b2db      	uxtb	r3, r3
 8019dba:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8019dbc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8019dc0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8019dc4:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8019dc6:	6a3b      	ldr	r3, [r7, #32]
 8019dc8:	2b00      	cmp	r3, #0
 8019dca:	d002      	beq.n	8019dd2 <ip4_frag+0x1f6>
 8019dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019dce:	2b00      	cmp	r3, #0
 8019dd0:	d003      	beq.n	8019dda <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8019dd2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8019dd4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8019dd8:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8019dda:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8019ddc:	4618      	mov	r0, r3
 8019dde:	f7f3 fb19 	bl	800d414 <lwip_htons>
 8019de2:	4603      	mov	r3, r0
 8019de4:	461a      	mov	r2, r3
 8019de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019de8:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8019dea:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8019dec:	3314      	adds	r3, #20
 8019dee:	b29b      	uxth	r3, r3
 8019df0:	4618      	mov	r0, r3
 8019df2:	f7f3 fb0f 	bl	800d414 <lwip_htons>
 8019df6:	4603      	mov	r3, r0
 8019df8:	461a      	mov	r2, r3
 8019dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019dfc:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8019dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019e00:	2200      	movs	r2, #0
 8019e02:	729a      	strb	r2, [r3, #10]
 8019e04:	2200      	movs	r2, #0
 8019e06:	72da      	strb	r2, [r3, #11]
#if CHECKSUM_GEN_IP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
 8019e08:	2114      	movs	r1, #20
 8019e0a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019e0c:	f7f3 fc4a 	bl	800d6a4 <inet_chksum>
 8019e10:	4603      	mov	r3, r0
 8019e12:	461a      	mov	r2, r3
 8019e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019e16:	815a      	strh	r2, [r3, #10]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8019e18:	68bb      	ldr	r3, [r7, #8]
 8019e1a:	695b      	ldr	r3, [r3, #20]
 8019e1c:	687a      	ldr	r2, [r7, #4]
 8019e1e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8019e20:	68b8      	ldr	r0, [r7, #8]
 8019e22:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8019e24:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019e26:	f7f5 f817 	bl	800ee58 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8019e2a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8019e2e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8019e30:	1ad3      	subs	r3, r2, r3
 8019e32:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8019e36:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8019e3a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8019e3c:	4413      	add	r3, r2
 8019e3e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8019e42:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8019e46:	2b00      	cmp	r3, #0
 8019e48:	f47f af11 	bne.w	8019c6e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8019e4c:	2300      	movs	r3, #0
 8019e4e:	e002      	b.n	8019e56 <ip4_frag+0x27a>
      goto memerr;
 8019e50:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8019e52:	f04f 33ff 	mov.w	r3, #4294967295
}
 8019e56:	4618      	mov	r0, r3
 8019e58:	3748      	adds	r7, #72	; 0x48
 8019e5a:	46bd      	mov	sp, r7
 8019e5c:	bd80      	pop	{r7, pc}
 8019e5e:	bf00      	nop
 8019e60:	080207c0 	.word	0x080207c0
 8019e64:	0802099c 	.word	0x0802099c
 8019e68:	08020808 	.word	0x08020808
 8019e6c:	080209b8 	.word	0x080209b8
 8019e70:	080209d8 	.word	0x080209d8
 8019e74:	08019b75 	.word	0x08019b75

08019e78 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8019e78:	b580      	push	{r7, lr}
 8019e7a:	b086      	sub	sp, #24
 8019e7c:	af00      	add	r7, sp, #0
 8019e7e:	6078      	str	r0, [r7, #4]
 8019e80:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8019e82:	230e      	movs	r3, #14
 8019e84:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8019e86:	687b      	ldr	r3, [r7, #4]
 8019e88:	895b      	ldrh	r3, [r3, #10]
 8019e8a:	2b0e      	cmp	r3, #14
 8019e8c:	d96e      	bls.n	8019f6c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8019e8e:	687b      	ldr	r3, [r7, #4]
 8019e90:	7bdb      	ldrb	r3, [r3, #15]
 8019e92:	2b00      	cmp	r3, #0
 8019e94:	d106      	bne.n	8019ea4 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8019e96:	683b      	ldr	r3, [r7, #0]
 8019e98:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8019e9c:	3301      	adds	r3, #1
 8019e9e:	b2da      	uxtb	r2, r3
 8019ea0:	687b      	ldr	r3, [r7, #4]
 8019ea2:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8019ea4:	687b      	ldr	r3, [r7, #4]
 8019ea6:	685b      	ldr	r3, [r3, #4]
 8019ea8:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8019eaa:	693b      	ldr	r3, [r7, #16]
 8019eac:	7b1a      	ldrb	r2, [r3, #12]
 8019eae:	7b5b      	ldrb	r3, [r3, #13]
 8019eb0:	021b      	lsls	r3, r3, #8
 8019eb2:	4313      	orrs	r3, r2
 8019eb4:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8019eb6:	693b      	ldr	r3, [r7, #16]
 8019eb8:	781b      	ldrb	r3, [r3, #0]
 8019eba:	f003 0301 	and.w	r3, r3, #1
 8019ebe:	2b00      	cmp	r3, #0
 8019ec0:	d023      	beq.n	8019f0a <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8019ec2:	693b      	ldr	r3, [r7, #16]
 8019ec4:	781b      	ldrb	r3, [r3, #0]
 8019ec6:	2b01      	cmp	r3, #1
 8019ec8:	d10f      	bne.n	8019eea <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8019eca:	693b      	ldr	r3, [r7, #16]
 8019ecc:	785b      	ldrb	r3, [r3, #1]
 8019ece:	2b00      	cmp	r3, #0
 8019ed0:	d11b      	bne.n	8019f0a <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8019ed2:	693b      	ldr	r3, [r7, #16]
 8019ed4:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8019ed6:	2b5e      	cmp	r3, #94	; 0x5e
 8019ed8:	d117      	bne.n	8019f0a <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8019eda:	687b      	ldr	r3, [r7, #4]
 8019edc:	7b5b      	ldrb	r3, [r3, #13]
 8019ede:	f043 0310 	orr.w	r3, r3, #16
 8019ee2:	b2da      	uxtb	r2, r3
 8019ee4:	687b      	ldr	r3, [r7, #4]
 8019ee6:	735a      	strb	r2, [r3, #13]
 8019ee8:	e00f      	b.n	8019f0a <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8019eea:	693b      	ldr	r3, [r7, #16]
 8019eec:	2206      	movs	r2, #6
 8019eee:	4928      	ldr	r1, [pc, #160]	; (8019f90 <ethernet_input+0x118>)
 8019ef0:	4618      	mov	r0, r3
 8019ef2:	f000 f9e7 	bl	801a2c4 <memcmp>
 8019ef6:	4603      	mov	r3, r0
 8019ef8:	2b00      	cmp	r3, #0
 8019efa:	d106      	bne.n	8019f0a <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8019efc:	687b      	ldr	r3, [r7, #4]
 8019efe:	7b5b      	ldrb	r3, [r3, #13]
 8019f00:	f043 0308 	orr.w	r3, r3, #8
 8019f04:	b2da      	uxtb	r2, r3
 8019f06:	687b      	ldr	r3, [r7, #4]
 8019f08:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8019f0a:	89fb      	ldrh	r3, [r7, #14]
 8019f0c:	2b08      	cmp	r3, #8
 8019f0e:	d003      	beq.n	8019f18 <ethernet_input+0xa0>
 8019f10:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8019f14:	d014      	beq.n	8019f40 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8019f16:	e032      	b.n	8019f7e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8019f18:	683b      	ldr	r3, [r7, #0]
 8019f1a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8019f1e:	f003 0308 	and.w	r3, r3, #8
 8019f22:	2b00      	cmp	r3, #0
 8019f24:	d024      	beq.n	8019f70 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8019f26:	8afb      	ldrh	r3, [r7, #22]
 8019f28:	4619      	mov	r1, r3
 8019f2a:	6878      	ldr	r0, [r7, #4]
 8019f2c:	f7f4 ff0e 	bl	800ed4c <pbuf_remove_header>
 8019f30:	4603      	mov	r3, r0
 8019f32:	2b00      	cmp	r3, #0
 8019f34:	d11e      	bne.n	8019f74 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8019f36:	6839      	ldr	r1, [r7, #0]
 8019f38:	6878      	ldr	r0, [r7, #4]
 8019f3a:	f7fe fd57 	bl	80189ec <ip4_input>
      break;
 8019f3e:	e013      	b.n	8019f68 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8019f40:	683b      	ldr	r3, [r7, #0]
 8019f42:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8019f46:	f003 0308 	and.w	r3, r3, #8
 8019f4a:	2b00      	cmp	r3, #0
 8019f4c:	d014      	beq.n	8019f78 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8019f4e:	8afb      	ldrh	r3, [r7, #22]
 8019f50:	4619      	mov	r1, r3
 8019f52:	6878      	ldr	r0, [r7, #4]
 8019f54:	f7f4 fefa 	bl	800ed4c <pbuf_remove_header>
 8019f58:	4603      	mov	r3, r0
 8019f5a:	2b00      	cmp	r3, #0
 8019f5c:	d10e      	bne.n	8019f7c <ethernet_input+0x104>
        etharp_input(p, netif);
 8019f5e:	6839      	ldr	r1, [r7, #0]
 8019f60:	6878      	ldr	r0, [r7, #4]
 8019f62:	f7fd febf 	bl	8017ce4 <etharp_input>
      break;
 8019f66:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8019f68:	2300      	movs	r3, #0
 8019f6a:	e00c      	b.n	8019f86 <ethernet_input+0x10e>
    goto free_and_return;
 8019f6c:	bf00      	nop
 8019f6e:	e006      	b.n	8019f7e <ethernet_input+0x106>
        goto free_and_return;
 8019f70:	bf00      	nop
 8019f72:	e004      	b.n	8019f7e <ethernet_input+0x106>
        goto free_and_return;
 8019f74:	bf00      	nop
 8019f76:	e002      	b.n	8019f7e <ethernet_input+0x106>
        goto free_and_return;
 8019f78:	bf00      	nop
 8019f7a:	e000      	b.n	8019f7e <ethernet_input+0x106>
        goto free_and_return;
 8019f7c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8019f7e:	6878      	ldr	r0, [r7, #4]
 8019f80:	f7f4 ff6a 	bl	800ee58 <pbuf_free>
  return ERR_OK;
 8019f84:	2300      	movs	r3, #0
}
 8019f86:	4618      	mov	r0, r3
 8019f88:	3718      	adds	r7, #24
 8019f8a:	46bd      	mov	sp, r7
 8019f8c:	bd80      	pop	{r7, pc}
 8019f8e:	bf00      	nop
 8019f90:	0806c878 	.word	0x0806c878

08019f94 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8019f94:	b580      	push	{r7, lr}
 8019f96:	b086      	sub	sp, #24
 8019f98:	af00      	add	r7, sp, #0
 8019f9a:	60f8      	str	r0, [r7, #12]
 8019f9c:	60b9      	str	r1, [r7, #8]
 8019f9e:	607a      	str	r2, [r7, #4]
 8019fa0:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8019fa2:	8c3b      	ldrh	r3, [r7, #32]
 8019fa4:	4618      	mov	r0, r3
 8019fa6:	f7f3 fa35 	bl	800d414 <lwip_htons>
 8019faa:	4603      	mov	r3, r0
 8019fac:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8019fae:	210e      	movs	r1, #14
 8019fb0:	68b8      	ldr	r0, [r7, #8]
 8019fb2:	f7f4 febb 	bl	800ed2c <pbuf_add_header>
 8019fb6:	4603      	mov	r3, r0
 8019fb8:	2b00      	cmp	r3, #0
 8019fba:	d125      	bne.n	801a008 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8019fbc:	68bb      	ldr	r3, [r7, #8]
 8019fbe:	685b      	ldr	r3, [r3, #4]
 8019fc0:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8019fc2:	693b      	ldr	r3, [r7, #16]
 8019fc4:	8afa      	ldrh	r2, [r7, #22]
 8019fc6:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8019fc8:	693b      	ldr	r3, [r7, #16]
 8019fca:	2206      	movs	r2, #6
 8019fcc:	6839      	ldr	r1, [r7, #0]
 8019fce:	4618      	mov	r0, r3
 8019fd0:	f000 f988 	bl	801a2e4 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8019fd4:	693b      	ldr	r3, [r7, #16]
 8019fd6:	3306      	adds	r3, #6
 8019fd8:	2206      	movs	r2, #6
 8019fda:	6879      	ldr	r1, [r7, #4]
 8019fdc:	4618      	mov	r0, r3
 8019fde:	f000 f981 	bl	801a2e4 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8019fe2:	68fb      	ldr	r3, [r7, #12]
 8019fe4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8019fe8:	2b06      	cmp	r3, #6
 8019fea:	d006      	beq.n	8019ffa <ethernet_output+0x66>
 8019fec:	4b0a      	ldr	r3, [pc, #40]	; (801a018 <ethernet_output+0x84>)
 8019fee:	f44f 7299 	mov.w	r2, #306	; 0x132
 8019ff2:	490a      	ldr	r1, [pc, #40]	; (801a01c <ethernet_output+0x88>)
 8019ff4:	480a      	ldr	r0, [pc, #40]	; (801a020 <ethernet_output+0x8c>)
 8019ff6:	f000 feeb 	bl	801add0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8019ffa:	68fb      	ldr	r3, [r7, #12]
 8019ffc:	699b      	ldr	r3, [r3, #24]
 8019ffe:	68b9      	ldr	r1, [r7, #8]
 801a000:	68f8      	ldr	r0, [r7, #12]
 801a002:	4798      	blx	r3
 801a004:	4603      	mov	r3, r0
 801a006:	e002      	b.n	801a00e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801a008:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801a00a:	f06f 0301 	mvn.w	r3, #1
}
 801a00e:	4618      	mov	r0, r3
 801a010:	3718      	adds	r7, #24
 801a012:	46bd      	mov	sp, r7
 801a014:	bd80      	pop	{r7, pc}
 801a016:	bf00      	nop
 801a018:	080209e8 	.word	0x080209e8
 801a01c:	08020a20 	.word	0x08020a20
 801a020:	08020a54 	.word	0x08020a54

0801a024 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801a024:	b580      	push	{r7, lr}
 801a026:	b084      	sub	sp, #16
 801a028:	af00      	add	r7, sp, #0
 801a02a:	6078      	str	r0, [r7, #4]
 801a02c:	6039      	str	r1, [r7, #0]
  osMessageQDef(QUEUE, size, void *);
 801a02e:	683b      	ldr	r3, [r7, #0]
 801a030:	60bb      	str	r3, [r7, #8]
 801a032:	2304      	movs	r3, #4
 801a034:	60fb      	str	r3, [r7, #12]
  
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 801a036:	f107 0308 	add.w	r3, r7, #8
 801a03a:	2100      	movs	r1, #0
 801a03c:	4618      	mov	r0, r3
 801a03e:	f7ef fcd6 	bl	80099ee <osMessageCreate>
 801a042:	4602      	mov	r2, r0
 801a044:	687b      	ldr	r3, [r7, #4]
 801a046:	601a      	str	r2, [r3, #0]
      ++lwip_stats.sys.mbox.used;
      if (lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used) {
         lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
	  }
#endif /* SYS_STATS */
 if (*mbox == NULL)
 801a048:	687b      	ldr	r3, [r7, #4]
 801a04a:	681b      	ldr	r3, [r3, #0]
 801a04c:	2b00      	cmp	r3, #0
 801a04e:	d102      	bne.n	801a056 <sys_mbox_new+0x32>
  return ERR_MEM;
 801a050:	f04f 33ff 	mov.w	r3, #4294967295
 801a054:	e000      	b.n	801a058 <sys_mbox_new+0x34>
 
 return ERR_OK;
 801a056:	2300      	movs	r3, #0
}
 801a058:	4618      	mov	r0, r3
 801a05a:	3710      	adds	r7, #16
 801a05c:	46bd      	mov	sp, r7
 801a05e:	bd80      	pop	{r7, pc}

0801a060 <sys_mbox_post>:
}

/*-----------------------------------------------------------------------------------*/
//   Posts the "msg" to the mailbox.
void sys_mbox_post(sys_mbox_t *mbox, void *data)
{
 801a060:	b580      	push	{r7, lr}
 801a062:	b082      	sub	sp, #8
 801a064:	af00      	add	r7, sp, #0
 801a066:	6078      	str	r0, [r7, #4]
 801a068:	6039      	str	r1, [r7, #0]
  while(osMessagePut(*mbox, (uint32_t)data, osWaitForever) != osOK);
 801a06a:	bf00      	nop
 801a06c:	687b      	ldr	r3, [r7, #4]
 801a06e:	681b      	ldr	r3, [r3, #0]
 801a070:	6839      	ldr	r1, [r7, #0]
 801a072:	f04f 32ff 	mov.w	r2, #4294967295
 801a076:	4618      	mov	r0, r3
 801a078:	f7ef fccc 	bl	8009a14 <osMessagePut>
 801a07c:	4603      	mov	r3, r0
 801a07e:	2b00      	cmp	r3, #0
 801a080:	d1f4      	bne.n	801a06c <sys_mbox_post+0xc>
}
 801a082:	bf00      	nop
 801a084:	bf00      	nop
 801a086:	3708      	adds	r7, #8
 801a088:	46bd      	mov	sp, r7
 801a08a:	bd80      	pop	{r7, pc}

0801a08c <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801a08c:	b580      	push	{r7, lr}
 801a08e:	b084      	sub	sp, #16
 801a090:	af00      	add	r7, sp, #0
 801a092:	6078      	str	r0, [r7, #4]
 801a094:	6039      	str	r1, [r7, #0]
err_t result;

   if ( osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 801a096:	687b      	ldr	r3, [r7, #4]
 801a098:	681b      	ldr	r3, [r3, #0]
 801a09a:	6839      	ldr	r1, [r7, #0]
 801a09c:	2200      	movs	r2, #0
 801a09e:	4618      	mov	r0, r3
 801a0a0:	f7ef fcb8 	bl	8009a14 <osMessagePut>
 801a0a4:	4603      	mov	r3, r0
 801a0a6:	2b00      	cmp	r3, #0
 801a0a8:	d102      	bne.n	801a0b0 <sys_mbox_trypost+0x24>
   {
      result = ERR_OK;
 801a0aa:	2300      	movs	r3, #0
 801a0ac:	73fb      	strb	r3, [r7, #15]
 801a0ae:	e001      	b.n	801a0b4 <sys_mbox_trypost+0x28>
   }
   else {
      // could not post, queue must be full
      result = ERR_MEM;
 801a0b0:	23ff      	movs	r3, #255	; 0xff
 801a0b2:	73fb      	strb	r3, [r7, #15]
      lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
			
   }

   return result;
 801a0b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801a0b8:	4618      	mov	r0, r3
 801a0ba:	3710      	adds	r7, #16
 801a0bc:	46bd      	mov	sp, r7
 801a0be:	bd80      	pop	{r7, pc}

0801a0c0 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801a0c0:	b580      	push	{r7, lr}
 801a0c2:	b08c      	sub	sp, #48	; 0x30
 801a0c4:	af00      	add	r7, sp, #0
 801a0c6:	61f8      	str	r0, [r7, #28]
 801a0c8:	61b9      	str	r1, [r7, #24]
 801a0ca:	617a      	str	r2, [r7, #20]
  osEvent event;
  uint32_t starttime = osKernelSysTick();;
 801a0cc:	f7ef fb93 	bl	80097f6 <osKernelSysTick>
 801a0d0:	62f8      	str	r0, [r7, #44]	; 0x2c
  
  if(timeout != 0)
 801a0d2:	697b      	ldr	r3, [r7, #20]
 801a0d4:	2b00      	cmp	r3, #0
 801a0d6:	d017      	beq.n	801a108 <sys_arch_mbox_fetch+0x48>
  { 
    event = osMessageGet (*mbox, timeout);
 801a0d8:	69fb      	ldr	r3, [r7, #28]
 801a0da:	6819      	ldr	r1, [r3, #0]
 801a0dc:	f107 0320 	add.w	r3, r7, #32
 801a0e0:	697a      	ldr	r2, [r7, #20]
 801a0e2:	4618      	mov	r0, r3
 801a0e4:	f7ef fcd8 	bl	8009a98 <osMessageGet>
    
    if(event.status == osEventMessage)
 801a0e8:	6a3b      	ldr	r3, [r7, #32]
 801a0ea:	2b10      	cmp	r3, #16
 801a0ec:	d109      	bne.n	801a102 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 801a0ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a0f0:	461a      	mov	r2, r3
 801a0f2:	69bb      	ldr	r3, [r7, #24]
 801a0f4:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 801a0f6:	f7ef fb7e 	bl	80097f6 <osKernelSysTick>
 801a0fa:	4602      	mov	r2, r0
 801a0fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a0fe:	1ad3      	subs	r3, r2, r3
 801a100:	e019      	b.n	801a136 <sys_arch_mbox_fetch+0x76>
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 801a102:	f04f 33ff 	mov.w	r3, #4294967295
 801a106:	e016      	b.n	801a136 <sys_arch_mbox_fetch+0x76>
    } 
  }
  else
  {
    event = osMessageGet (*mbox, osWaitForever);
 801a108:	69fb      	ldr	r3, [r7, #28]
 801a10a:	6819      	ldr	r1, [r3, #0]
 801a10c:	463b      	mov	r3, r7
 801a10e:	f04f 32ff 	mov.w	r2, #4294967295
 801a112:	4618      	mov	r0, r3
 801a114:	f7ef fcc0 	bl	8009a98 <osMessageGet>
 801a118:	f107 0320 	add.w	r3, r7, #32
 801a11c:	463a      	mov	r2, r7
 801a11e:	ca07      	ldmia	r2, {r0, r1, r2}
 801a120:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 801a124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a126:	461a      	mov	r2, r3
 801a128:	69bb      	ldr	r3, [r7, #24]
 801a12a:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 801a12c:	f7ef fb63 	bl	80097f6 <osKernelSysTick>
 801a130:	4602      	mov	r2, r0
 801a132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a134:	1ad3      	subs	r3, r2, r3
  }
}
 801a136:	4618      	mov	r0, r3
 801a138:	3730      	adds	r7, #48	; 0x30
 801a13a:	46bd      	mov	sp, r7
 801a13c:	bd80      	pop	{r7, pc}

0801a13e <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)          
{      
 801a13e:	b480      	push	{r7}
 801a140:	b083      	sub	sp, #12
 801a142:	af00      	add	r7, sp, #0
 801a144:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL) 
 801a146:	687b      	ldr	r3, [r7, #4]
 801a148:	681b      	ldr	r3, [r3, #0]
 801a14a:	2b00      	cmp	r3, #0
 801a14c:	d101      	bne.n	801a152 <sys_mbox_valid+0x14>
    return 0;
 801a14e:	2300      	movs	r3, #0
 801a150:	e000      	b.n	801a154 <sys_mbox_valid+0x16>
  else
    return 1;
 801a152:	2301      	movs	r3, #1
}                                             
 801a154:	4618      	mov	r0, r3
 801a156:	370c      	adds	r7, #12
 801a158:	46bd      	mov	sp, r7
 801a15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a15e:	4770      	bx	lr

0801a160 <sys_init>:
/*-----------------------------------------------------------------------------------*/ 
osMutexId lwip_sys_mutex;
osMutexDef(lwip_sys_mutex);
// Initialize sys arch
void sys_init(void)
{
 801a160:	b580      	push	{r7, lr}
 801a162:	af00      	add	r7, sp, #0
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 801a164:	4803      	ldr	r0, [pc, #12]	; (801a174 <sys_init+0x14>)
 801a166:	f7ef fb9e 	bl	80098a6 <osMutexCreate>
 801a16a:	4603      	mov	r3, r0
 801a16c:	4a02      	ldr	r2, [pc, #8]	; (801a178 <sys_init+0x18>)
 801a16e:	6013      	str	r3, [r2, #0]
}
 801a170:	bf00      	nop
 801a172:	bd80      	pop	{r7, pc}
 801a174:	0806c888 	.word	0x0806c888
 801a178:	20013e6c 	.word	0x20013e6c

0801a17c <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801a17c:	b580      	push	{r7, lr}
 801a17e:	b084      	sub	sp, #16
 801a180:	af00      	add	r7, sp, #0
 801a182:	6078      	str	r0, [r7, #4]
  
  osMutexDef(MUTEX);
 801a184:	2300      	movs	r3, #0
 801a186:	60fb      	str	r3, [r7, #12]
  
  *mutex = osMutexCreate(osMutex(MUTEX));
 801a188:	f107 030c 	add.w	r3, r7, #12
 801a18c:	4618      	mov	r0, r3
 801a18e:	f7ef fb8a 	bl	80098a6 <osMutexCreate>
 801a192:	4602      	mov	r2, r0
 801a194:	687b      	ldr	r3, [r7, #4]
 801a196:	601a      	str	r2, [r3, #0]
  
  
  //*mutex = xSemaphoreCreateMutex();
  if(*mutex == NULL)
 801a198:	687b      	ldr	r3, [r7, #4]
 801a19a:	681b      	ldr	r3, [r3, #0]
 801a19c:	2b00      	cmp	r3, #0
 801a19e:	d102      	bne.n	801a1a6 <sys_mutex_new+0x2a>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */	
    return ERR_MEM;
 801a1a0:	f04f 33ff 	mov.w	r3, #4294967295
 801a1a4:	e000      	b.n	801a1a8 <sys_mutex_new+0x2c>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801a1a6:	2300      	movs	r3, #0
}
 801a1a8:	4618      	mov	r0, r3
 801a1aa:	3710      	adds	r7, #16
 801a1ac:	46bd      	mov	sp, r7
 801a1ae:	bd80      	pop	{r7, pc}

0801a1b0 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801a1b0:	b580      	push	{r7, lr}
 801a1b2:	b082      	sub	sp, #8
 801a1b4:	af00      	add	r7, sp, #0
 801a1b6:	6078      	str	r0, [r7, #4]
  osMutexWait (*mutex, osWaitForever);
 801a1b8:	687b      	ldr	r3, [r7, #4]
 801a1ba:	681b      	ldr	r3, [r3, #0]
 801a1bc:	f04f 31ff 	mov.w	r1, #4294967295
 801a1c0:	4618      	mov	r0, r3
 801a1c2:	f7ef fb7d 	bl	80098c0 <osMutexWait>
}
 801a1c6:	bf00      	nop
 801a1c8:	3708      	adds	r7, #8
 801a1ca:	46bd      	mov	sp, r7
 801a1cc:	bd80      	pop	{r7, pc}

0801a1ce <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801a1ce:	b580      	push	{r7, lr}
 801a1d0:	b082      	sub	sp, #8
 801a1d2:	af00      	add	r7, sp, #0
 801a1d4:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801a1d6:	687b      	ldr	r3, [r7, #4]
 801a1d8:	681b      	ldr	r3, [r3, #0]
 801a1da:	4618      	mov	r0, r3
 801a1dc:	f7ef fbbe 	bl	800995c <osMutexRelease>
}
 801a1e0:	bf00      	nop
 801a1e2:	3708      	adds	r7, #8
 801a1e4:	46bd      	mov	sp, r7
 801a1e6:	bd80      	pop	{r7, pc}

0801a1e8 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801a1e8:	b580      	push	{r7, lr}
 801a1ea:	b08a      	sub	sp, #40	; 0x28
 801a1ec:	af00      	add	r7, sp, #0
 801a1ee:	60f8      	str	r0, [r7, #12]
 801a1f0:	60b9      	str	r1, [r7, #8]
 801a1f2:	607a      	str	r2, [r7, #4]
 801a1f4:	603b      	str	r3, [r7, #0]
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 801a1f6:	68fb      	ldr	r3, [r7, #12]
 801a1f8:	617b      	str	r3, [r7, #20]
 801a1fa:	68bb      	ldr	r3, [r7, #8]
 801a1fc:	61bb      	str	r3, [r7, #24]
 801a1fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a200:	b21b      	sxth	r3, r3
 801a202:	83bb      	strh	r3, [r7, #28]
 801a204:	2300      	movs	r3, #0
 801a206:	623b      	str	r3, [r7, #32]
 801a208:	683b      	ldr	r3, [r7, #0]
 801a20a:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 801a20c:	f107 0314 	add.w	r3, r7, #20
 801a210:	6879      	ldr	r1, [r7, #4]
 801a212:	4618      	mov	r0, r3
 801a214:	f7ef faff 	bl	8009816 <osThreadCreate>
 801a218:	4603      	mov	r3, r0
}
 801a21a:	4618      	mov	r0, r3
 801a21c:	3728      	adds	r7, #40	; 0x28
 801a21e:	46bd      	mov	sp, r7
 801a220:	bd80      	pop	{r7, pc}
	...

0801a224 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801a224:	b580      	push	{r7, lr}
 801a226:	af00      	add	r7, sp, #0
  osMutexWait(lwip_sys_mutex, osWaitForever);
 801a228:	4b04      	ldr	r3, [pc, #16]	; (801a23c <sys_arch_protect+0x18>)
 801a22a:	681b      	ldr	r3, [r3, #0]
 801a22c:	f04f 31ff 	mov.w	r1, #4294967295
 801a230:	4618      	mov	r0, r3
 801a232:	f7ef fb45 	bl	80098c0 <osMutexWait>
  return (sys_prot_t)1;
 801a236:	2301      	movs	r3, #1
}
 801a238:	4618      	mov	r0, r3
 801a23a:	bd80      	pop	{r7, pc}
 801a23c:	20013e6c 	.word	0x20013e6c

0801a240 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801a240:	b580      	push	{r7, lr}
 801a242:	b082      	sub	sp, #8
 801a244:	af00      	add	r7, sp, #0
 801a246:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801a248:	4b04      	ldr	r3, [pc, #16]	; (801a25c <sys_arch_unprotect+0x1c>)
 801a24a:	681b      	ldr	r3, [r3, #0]
 801a24c:	4618      	mov	r0, r3
 801a24e:	f7ef fb85 	bl	800995c <osMutexRelease>
}
 801a252:	bf00      	nop
 801a254:	3708      	adds	r7, #8
 801a256:	46bd      	mov	sp, r7
 801a258:	bd80      	pop	{r7, pc}
 801a25a:	bf00      	nop
 801a25c:	20013e6c 	.word	0x20013e6c

0801a260 <__errno>:
 801a260:	4b01      	ldr	r3, [pc, #4]	; (801a268 <__errno+0x8>)
 801a262:	6818      	ldr	r0, [r3, #0]
 801a264:	4770      	bx	lr
 801a266:	bf00      	nop
 801a268:	200000c8 	.word	0x200000c8

0801a26c <__libc_init_array>:
 801a26c:	b570      	push	{r4, r5, r6, lr}
 801a26e:	4d0d      	ldr	r5, [pc, #52]	; (801a2a4 <__libc_init_array+0x38>)
 801a270:	4c0d      	ldr	r4, [pc, #52]	; (801a2a8 <__libc_init_array+0x3c>)
 801a272:	1b64      	subs	r4, r4, r5
 801a274:	10a4      	asrs	r4, r4, #2
 801a276:	2600      	movs	r6, #0
 801a278:	42a6      	cmp	r6, r4
 801a27a:	d109      	bne.n	801a290 <__libc_init_array+0x24>
 801a27c:	4d0b      	ldr	r5, [pc, #44]	; (801a2ac <__libc_init_array+0x40>)
 801a27e:	4c0c      	ldr	r4, [pc, #48]	; (801a2b0 <__libc_init_array+0x44>)
 801a280:	f002 fed8 	bl	801d034 <_init>
 801a284:	1b64      	subs	r4, r4, r5
 801a286:	10a4      	asrs	r4, r4, #2
 801a288:	2600      	movs	r6, #0
 801a28a:	42a6      	cmp	r6, r4
 801a28c:	d105      	bne.n	801a29a <__libc_init_array+0x2e>
 801a28e:	bd70      	pop	{r4, r5, r6, pc}
 801a290:	f855 3b04 	ldr.w	r3, [r5], #4
 801a294:	4798      	blx	r3
 801a296:	3601      	adds	r6, #1
 801a298:	e7ee      	b.n	801a278 <__libc_init_array+0xc>
 801a29a:	f855 3b04 	ldr.w	r3, [r5], #4
 801a29e:	4798      	blx	r3
 801a2a0:	3601      	adds	r6, #1
 801a2a2:	e7f2      	b.n	801a28a <__libc_init_array+0x1e>
 801a2a4:	0806ccd0 	.word	0x0806ccd0
 801a2a8:	0806ccd0 	.word	0x0806ccd0
 801a2ac:	0806ccd0 	.word	0x0806ccd0
 801a2b0:	0806ccd4 	.word	0x0806ccd4

0801a2b4 <malloc>:
 801a2b4:	4b02      	ldr	r3, [pc, #8]	; (801a2c0 <malloc+0xc>)
 801a2b6:	4601      	mov	r1, r0
 801a2b8:	6818      	ldr	r0, [r3, #0]
 801a2ba:	f000 b8ab 	b.w	801a414 <_malloc_r>
 801a2be:	bf00      	nop
 801a2c0:	200000c8 	.word	0x200000c8

0801a2c4 <memcmp>:
 801a2c4:	b510      	push	{r4, lr}
 801a2c6:	3901      	subs	r1, #1
 801a2c8:	4402      	add	r2, r0
 801a2ca:	4290      	cmp	r0, r2
 801a2cc:	d101      	bne.n	801a2d2 <memcmp+0xe>
 801a2ce:	2000      	movs	r0, #0
 801a2d0:	e005      	b.n	801a2de <memcmp+0x1a>
 801a2d2:	7803      	ldrb	r3, [r0, #0]
 801a2d4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801a2d8:	42a3      	cmp	r3, r4
 801a2da:	d001      	beq.n	801a2e0 <memcmp+0x1c>
 801a2dc:	1b18      	subs	r0, r3, r4
 801a2de:	bd10      	pop	{r4, pc}
 801a2e0:	3001      	adds	r0, #1
 801a2e2:	e7f2      	b.n	801a2ca <memcmp+0x6>

0801a2e4 <memcpy>:
 801a2e4:	440a      	add	r2, r1
 801a2e6:	4291      	cmp	r1, r2
 801a2e8:	f100 33ff 	add.w	r3, r0, #4294967295
 801a2ec:	d100      	bne.n	801a2f0 <memcpy+0xc>
 801a2ee:	4770      	bx	lr
 801a2f0:	b510      	push	{r4, lr}
 801a2f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a2f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 801a2fa:	4291      	cmp	r1, r2
 801a2fc:	d1f9      	bne.n	801a2f2 <memcpy+0xe>
 801a2fe:	bd10      	pop	{r4, pc}

0801a300 <memset>:
 801a300:	4402      	add	r2, r0
 801a302:	4603      	mov	r3, r0
 801a304:	4293      	cmp	r3, r2
 801a306:	d100      	bne.n	801a30a <memset+0xa>
 801a308:	4770      	bx	lr
 801a30a:	f803 1b01 	strb.w	r1, [r3], #1
 801a30e:	e7f9      	b.n	801a304 <memset+0x4>

0801a310 <_calloc_r>:
 801a310:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a312:	fba1 2402 	umull	r2, r4, r1, r2
 801a316:	b94c      	cbnz	r4, 801a32c <_calloc_r+0x1c>
 801a318:	4611      	mov	r1, r2
 801a31a:	9201      	str	r2, [sp, #4]
 801a31c:	f000 f87a 	bl	801a414 <_malloc_r>
 801a320:	9a01      	ldr	r2, [sp, #4]
 801a322:	4605      	mov	r5, r0
 801a324:	b930      	cbnz	r0, 801a334 <_calloc_r+0x24>
 801a326:	4628      	mov	r0, r5
 801a328:	b003      	add	sp, #12
 801a32a:	bd30      	pop	{r4, r5, pc}
 801a32c:	220c      	movs	r2, #12
 801a32e:	6002      	str	r2, [r0, #0]
 801a330:	2500      	movs	r5, #0
 801a332:	e7f8      	b.n	801a326 <_calloc_r+0x16>
 801a334:	4621      	mov	r1, r4
 801a336:	f7ff ffe3 	bl	801a300 <memset>
 801a33a:	e7f4      	b.n	801a326 <_calloc_r+0x16>

0801a33c <_free_r>:
 801a33c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a33e:	2900      	cmp	r1, #0
 801a340:	d044      	beq.n	801a3cc <_free_r+0x90>
 801a342:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a346:	9001      	str	r0, [sp, #4]
 801a348:	2b00      	cmp	r3, #0
 801a34a:	f1a1 0404 	sub.w	r4, r1, #4
 801a34e:	bfb8      	it	lt
 801a350:	18e4      	addlt	r4, r4, r3
 801a352:	f002 f86d 	bl	801c430 <__malloc_lock>
 801a356:	4a1e      	ldr	r2, [pc, #120]	; (801a3d0 <_free_r+0x94>)
 801a358:	9801      	ldr	r0, [sp, #4]
 801a35a:	6813      	ldr	r3, [r2, #0]
 801a35c:	b933      	cbnz	r3, 801a36c <_free_r+0x30>
 801a35e:	6063      	str	r3, [r4, #4]
 801a360:	6014      	str	r4, [r2, #0]
 801a362:	b003      	add	sp, #12
 801a364:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a368:	f002 b868 	b.w	801c43c <__malloc_unlock>
 801a36c:	42a3      	cmp	r3, r4
 801a36e:	d908      	bls.n	801a382 <_free_r+0x46>
 801a370:	6825      	ldr	r5, [r4, #0]
 801a372:	1961      	adds	r1, r4, r5
 801a374:	428b      	cmp	r3, r1
 801a376:	bf01      	itttt	eq
 801a378:	6819      	ldreq	r1, [r3, #0]
 801a37a:	685b      	ldreq	r3, [r3, #4]
 801a37c:	1949      	addeq	r1, r1, r5
 801a37e:	6021      	streq	r1, [r4, #0]
 801a380:	e7ed      	b.n	801a35e <_free_r+0x22>
 801a382:	461a      	mov	r2, r3
 801a384:	685b      	ldr	r3, [r3, #4]
 801a386:	b10b      	cbz	r3, 801a38c <_free_r+0x50>
 801a388:	42a3      	cmp	r3, r4
 801a38a:	d9fa      	bls.n	801a382 <_free_r+0x46>
 801a38c:	6811      	ldr	r1, [r2, #0]
 801a38e:	1855      	adds	r5, r2, r1
 801a390:	42a5      	cmp	r5, r4
 801a392:	d10b      	bne.n	801a3ac <_free_r+0x70>
 801a394:	6824      	ldr	r4, [r4, #0]
 801a396:	4421      	add	r1, r4
 801a398:	1854      	adds	r4, r2, r1
 801a39a:	42a3      	cmp	r3, r4
 801a39c:	6011      	str	r1, [r2, #0]
 801a39e:	d1e0      	bne.n	801a362 <_free_r+0x26>
 801a3a0:	681c      	ldr	r4, [r3, #0]
 801a3a2:	685b      	ldr	r3, [r3, #4]
 801a3a4:	6053      	str	r3, [r2, #4]
 801a3a6:	4421      	add	r1, r4
 801a3a8:	6011      	str	r1, [r2, #0]
 801a3aa:	e7da      	b.n	801a362 <_free_r+0x26>
 801a3ac:	d902      	bls.n	801a3b4 <_free_r+0x78>
 801a3ae:	230c      	movs	r3, #12
 801a3b0:	6003      	str	r3, [r0, #0]
 801a3b2:	e7d6      	b.n	801a362 <_free_r+0x26>
 801a3b4:	6825      	ldr	r5, [r4, #0]
 801a3b6:	1961      	adds	r1, r4, r5
 801a3b8:	428b      	cmp	r3, r1
 801a3ba:	bf04      	itt	eq
 801a3bc:	6819      	ldreq	r1, [r3, #0]
 801a3be:	685b      	ldreq	r3, [r3, #4]
 801a3c0:	6063      	str	r3, [r4, #4]
 801a3c2:	bf04      	itt	eq
 801a3c4:	1949      	addeq	r1, r1, r5
 801a3c6:	6021      	streq	r1, [r4, #0]
 801a3c8:	6054      	str	r4, [r2, #4]
 801a3ca:	e7ca      	b.n	801a362 <_free_r+0x26>
 801a3cc:	b003      	add	sp, #12
 801a3ce:	bd30      	pop	{r4, r5, pc}
 801a3d0:	20013e70 	.word	0x20013e70

0801a3d4 <sbrk_aligned>:
 801a3d4:	b570      	push	{r4, r5, r6, lr}
 801a3d6:	4e0e      	ldr	r6, [pc, #56]	; (801a410 <sbrk_aligned+0x3c>)
 801a3d8:	460c      	mov	r4, r1
 801a3da:	6831      	ldr	r1, [r6, #0]
 801a3dc:	4605      	mov	r5, r0
 801a3de:	b911      	cbnz	r1, 801a3e6 <sbrk_aligned+0x12>
 801a3e0:	f000 fdc2 	bl	801af68 <_sbrk_r>
 801a3e4:	6030      	str	r0, [r6, #0]
 801a3e6:	4621      	mov	r1, r4
 801a3e8:	4628      	mov	r0, r5
 801a3ea:	f000 fdbd 	bl	801af68 <_sbrk_r>
 801a3ee:	1c43      	adds	r3, r0, #1
 801a3f0:	d00a      	beq.n	801a408 <sbrk_aligned+0x34>
 801a3f2:	1cc4      	adds	r4, r0, #3
 801a3f4:	f024 0403 	bic.w	r4, r4, #3
 801a3f8:	42a0      	cmp	r0, r4
 801a3fa:	d007      	beq.n	801a40c <sbrk_aligned+0x38>
 801a3fc:	1a21      	subs	r1, r4, r0
 801a3fe:	4628      	mov	r0, r5
 801a400:	f000 fdb2 	bl	801af68 <_sbrk_r>
 801a404:	3001      	adds	r0, #1
 801a406:	d101      	bne.n	801a40c <sbrk_aligned+0x38>
 801a408:	f04f 34ff 	mov.w	r4, #4294967295
 801a40c:	4620      	mov	r0, r4
 801a40e:	bd70      	pop	{r4, r5, r6, pc}
 801a410:	20013e74 	.word	0x20013e74

0801a414 <_malloc_r>:
 801a414:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a418:	1ccd      	adds	r5, r1, #3
 801a41a:	f025 0503 	bic.w	r5, r5, #3
 801a41e:	3508      	adds	r5, #8
 801a420:	2d0c      	cmp	r5, #12
 801a422:	bf38      	it	cc
 801a424:	250c      	movcc	r5, #12
 801a426:	2d00      	cmp	r5, #0
 801a428:	4607      	mov	r7, r0
 801a42a:	db01      	blt.n	801a430 <_malloc_r+0x1c>
 801a42c:	42a9      	cmp	r1, r5
 801a42e:	d905      	bls.n	801a43c <_malloc_r+0x28>
 801a430:	230c      	movs	r3, #12
 801a432:	603b      	str	r3, [r7, #0]
 801a434:	2600      	movs	r6, #0
 801a436:	4630      	mov	r0, r6
 801a438:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a43c:	4e2e      	ldr	r6, [pc, #184]	; (801a4f8 <_malloc_r+0xe4>)
 801a43e:	f001 fff7 	bl	801c430 <__malloc_lock>
 801a442:	6833      	ldr	r3, [r6, #0]
 801a444:	461c      	mov	r4, r3
 801a446:	bb34      	cbnz	r4, 801a496 <_malloc_r+0x82>
 801a448:	4629      	mov	r1, r5
 801a44a:	4638      	mov	r0, r7
 801a44c:	f7ff ffc2 	bl	801a3d4 <sbrk_aligned>
 801a450:	1c43      	adds	r3, r0, #1
 801a452:	4604      	mov	r4, r0
 801a454:	d14d      	bne.n	801a4f2 <_malloc_r+0xde>
 801a456:	6834      	ldr	r4, [r6, #0]
 801a458:	4626      	mov	r6, r4
 801a45a:	2e00      	cmp	r6, #0
 801a45c:	d140      	bne.n	801a4e0 <_malloc_r+0xcc>
 801a45e:	6823      	ldr	r3, [r4, #0]
 801a460:	4631      	mov	r1, r6
 801a462:	4638      	mov	r0, r7
 801a464:	eb04 0803 	add.w	r8, r4, r3
 801a468:	f000 fd7e 	bl	801af68 <_sbrk_r>
 801a46c:	4580      	cmp	r8, r0
 801a46e:	d13a      	bne.n	801a4e6 <_malloc_r+0xd2>
 801a470:	6821      	ldr	r1, [r4, #0]
 801a472:	3503      	adds	r5, #3
 801a474:	1a6d      	subs	r5, r5, r1
 801a476:	f025 0503 	bic.w	r5, r5, #3
 801a47a:	3508      	adds	r5, #8
 801a47c:	2d0c      	cmp	r5, #12
 801a47e:	bf38      	it	cc
 801a480:	250c      	movcc	r5, #12
 801a482:	4629      	mov	r1, r5
 801a484:	4638      	mov	r0, r7
 801a486:	f7ff ffa5 	bl	801a3d4 <sbrk_aligned>
 801a48a:	3001      	adds	r0, #1
 801a48c:	d02b      	beq.n	801a4e6 <_malloc_r+0xd2>
 801a48e:	6823      	ldr	r3, [r4, #0]
 801a490:	442b      	add	r3, r5
 801a492:	6023      	str	r3, [r4, #0]
 801a494:	e00e      	b.n	801a4b4 <_malloc_r+0xa0>
 801a496:	6822      	ldr	r2, [r4, #0]
 801a498:	1b52      	subs	r2, r2, r5
 801a49a:	d41e      	bmi.n	801a4da <_malloc_r+0xc6>
 801a49c:	2a0b      	cmp	r2, #11
 801a49e:	d916      	bls.n	801a4ce <_malloc_r+0xba>
 801a4a0:	1961      	adds	r1, r4, r5
 801a4a2:	42a3      	cmp	r3, r4
 801a4a4:	6025      	str	r5, [r4, #0]
 801a4a6:	bf18      	it	ne
 801a4a8:	6059      	strne	r1, [r3, #4]
 801a4aa:	6863      	ldr	r3, [r4, #4]
 801a4ac:	bf08      	it	eq
 801a4ae:	6031      	streq	r1, [r6, #0]
 801a4b0:	5162      	str	r2, [r4, r5]
 801a4b2:	604b      	str	r3, [r1, #4]
 801a4b4:	4638      	mov	r0, r7
 801a4b6:	f104 060b 	add.w	r6, r4, #11
 801a4ba:	f001 ffbf 	bl	801c43c <__malloc_unlock>
 801a4be:	f026 0607 	bic.w	r6, r6, #7
 801a4c2:	1d23      	adds	r3, r4, #4
 801a4c4:	1af2      	subs	r2, r6, r3
 801a4c6:	d0b6      	beq.n	801a436 <_malloc_r+0x22>
 801a4c8:	1b9b      	subs	r3, r3, r6
 801a4ca:	50a3      	str	r3, [r4, r2]
 801a4cc:	e7b3      	b.n	801a436 <_malloc_r+0x22>
 801a4ce:	6862      	ldr	r2, [r4, #4]
 801a4d0:	42a3      	cmp	r3, r4
 801a4d2:	bf0c      	ite	eq
 801a4d4:	6032      	streq	r2, [r6, #0]
 801a4d6:	605a      	strne	r2, [r3, #4]
 801a4d8:	e7ec      	b.n	801a4b4 <_malloc_r+0xa0>
 801a4da:	4623      	mov	r3, r4
 801a4dc:	6864      	ldr	r4, [r4, #4]
 801a4de:	e7b2      	b.n	801a446 <_malloc_r+0x32>
 801a4e0:	4634      	mov	r4, r6
 801a4e2:	6876      	ldr	r6, [r6, #4]
 801a4e4:	e7b9      	b.n	801a45a <_malloc_r+0x46>
 801a4e6:	230c      	movs	r3, #12
 801a4e8:	603b      	str	r3, [r7, #0]
 801a4ea:	4638      	mov	r0, r7
 801a4ec:	f001 ffa6 	bl	801c43c <__malloc_unlock>
 801a4f0:	e7a1      	b.n	801a436 <_malloc_r+0x22>
 801a4f2:	6025      	str	r5, [r4, #0]
 801a4f4:	e7de      	b.n	801a4b4 <_malloc_r+0xa0>
 801a4f6:	bf00      	nop
 801a4f8:	20013e70 	.word	0x20013e70

0801a4fc <__cvt>:
 801a4fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801a500:	ec55 4b10 	vmov	r4, r5, d0
 801a504:	2d00      	cmp	r5, #0
 801a506:	460e      	mov	r6, r1
 801a508:	4619      	mov	r1, r3
 801a50a:	462b      	mov	r3, r5
 801a50c:	bfbb      	ittet	lt
 801a50e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801a512:	461d      	movlt	r5, r3
 801a514:	2300      	movge	r3, #0
 801a516:	232d      	movlt	r3, #45	; 0x2d
 801a518:	700b      	strb	r3, [r1, #0]
 801a51a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a51c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801a520:	4691      	mov	r9, r2
 801a522:	f023 0820 	bic.w	r8, r3, #32
 801a526:	bfbc      	itt	lt
 801a528:	4622      	movlt	r2, r4
 801a52a:	4614      	movlt	r4, r2
 801a52c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801a530:	d005      	beq.n	801a53e <__cvt+0x42>
 801a532:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801a536:	d100      	bne.n	801a53a <__cvt+0x3e>
 801a538:	3601      	adds	r6, #1
 801a53a:	2102      	movs	r1, #2
 801a53c:	e000      	b.n	801a540 <__cvt+0x44>
 801a53e:	2103      	movs	r1, #3
 801a540:	ab03      	add	r3, sp, #12
 801a542:	9301      	str	r3, [sp, #4]
 801a544:	ab02      	add	r3, sp, #8
 801a546:	9300      	str	r3, [sp, #0]
 801a548:	ec45 4b10 	vmov	d0, r4, r5
 801a54c:	4653      	mov	r3, sl
 801a54e:	4632      	mov	r2, r6
 801a550:	f000 ff4a 	bl	801b3e8 <_dtoa_r>
 801a554:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801a558:	4607      	mov	r7, r0
 801a55a:	d102      	bne.n	801a562 <__cvt+0x66>
 801a55c:	f019 0f01 	tst.w	r9, #1
 801a560:	d022      	beq.n	801a5a8 <__cvt+0xac>
 801a562:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801a566:	eb07 0906 	add.w	r9, r7, r6
 801a56a:	d110      	bne.n	801a58e <__cvt+0x92>
 801a56c:	783b      	ldrb	r3, [r7, #0]
 801a56e:	2b30      	cmp	r3, #48	; 0x30
 801a570:	d10a      	bne.n	801a588 <__cvt+0x8c>
 801a572:	2200      	movs	r2, #0
 801a574:	2300      	movs	r3, #0
 801a576:	4620      	mov	r0, r4
 801a578:	4629      	mov	r1, r5
 801a57a:	f7e6 fabd 	bl	8000af8 <__aeabi_dcmpeq>
 801a57e:	b918      	cbnz	r0, 801a588 <__cvt+0x8c>
 801a580:	f1c6 0601 	rsb	r6, r6, #1
 801a584:	f8ca 6000 	str.w	r6, [sl]
 801a588:	f8da 3000 	ldr.w	r3, [sl]
 801a58c:	4499      	add	r9, r3
 801a58e:	2200      	movs	r2, #0
 801a590:	2300      	movs	r3, #0
 801a592:	4620      	mov	r0, r4
 801a594:	4629      	mov	r1, r5
 801a596:	f7e6 faaf 	bl	8000af8 <__aeabi_dcmpeq>
 801a59a:	b108      	cbz	r0, 801a5a0 <__cvt+0xa4>
 801a59c:	f8cd 900c 	str.w	r9, [sp, #12]
 801a5a0:	2230      	movs	r2, #48	; 0x30
 801a5a2:	9b03      	ldr	r3, [sp, #12]
 801a5a4:	454b      	cmp	r3, r9
 801a5a6:	d307      	bcc.n	801a5b8 <__cvt+0xbc>
 801a5a8:	9b03      	ldr	r3, [sp, #12]
 801a5aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801a5ac:	1bdb      	subs	r3, r3, r7
 801a5ae:	4638      	mov	r0, r7
 801a5b0:	6013      	str	r3, [r2, #0]
 801a5b2:	b004      	add	sp, #16
 801a5b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a5b8:	1c59      	adds	r1, r3, #1
 801a5ba:	9103      	str	r1, [sp, #12]
 801a5bc:	701a      	strb	r2, [r3, #0]
 801a5be:	e7f0      	b.n	801a5a2 <__cvt+0xa6>

0801a5c0 <__exponent>:
 801a5c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a5c2:	4603      	mov	r3, r0
 801a5c4:	2900      	cmp	r1, #0
 801a5c6:	bfb8      	it	lt
 801a5c8:	4249      	neglt	r1, r1
 801a5ca:	f803 2b02 	strb.w	r2, [r3], #2
 801a5ce:	bfb4      	ite	lt
 801a5d0:	222d      	movlt	r2, #45	; 0x2d
 801a5d2:	222b      	movge	r2, #43	; 0x2b
 801a5d4:	2909      	cmp	r1, #9
 801a5d6:	7042      	strb	r2, [r0, #1]
 801a5d8:	dd2a      	ble.n	801a630 <__exponent+0x70>
 801a5da:	f10d 0407 	add.w	r4, sp, #7
 801a5de:	46a4      	mov	ip, r4
 801a5e0:	270a      	movs	r7, #10
 801a5e2:	46a6      	mov	lr, r4
 801a5e4:	460a      	mov	r2, r1
 801a5e6:	fb91 f6f7 	sdiv	r6, r1, r7
 801a5ea:	fb07 1516 	mls	r5, r7, r6, r1
 801a5ee:	3530      	adds	r5, #48	; 0x30
 801a5f0:	2a63      	cmp	r2, #99	; 0x63
 801a5f2:	f104 34ff 	add.w	r4, r4, #4294967295
 801a5f6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801a5fa:	4631      	mov	r1, r6
 801a5fc:	dcf1      	bgt.n	801a5e2 <__exponent+0x22>
 801a5fe:	3130      	adds	r1, #48	; 0x30
 801a600:	f1ae 0502 	sub.w	r5, lr, #2
 801a604:	f804 1c01 	strb.w	r1, [r4, #-1]
 801a608:	1c44      	adds	r4, r0, #1
 801a60a:	4629      	mov	r1, r5
 801a60c:	4561      	cmp	r1, ip
 801a60e:	d30a      	bcc.n	801a626 <__exponent+0x66>
 801a610:	f10d 0209 	add.w	r2, sp, #9
 801a614:	eba2 020e 	sub.w	r2, r2, lr
 801a618:	4565      	cmp	r5, ip
 801a61a:	bf88      	it	hi
 801a61c:	2200      	movhi	r2, #0
 801a61e:	4413      	add	r3, r2
 801a620:	1a18      	subs	r0, r3, r0
 801a622:	b003      	add	sp, #12
 801a624:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a626:	f811 2b01 	ldrb.w	r2, [r1], #1
 801a62a:	f804 2f01 	strb.w	r2, [r4, #1]!
 801a62e:	e7ed      	b.n	801a60c <__exponent+0x4c>
 801a630:	2330      	movs	r3, #48	; 0x30
 801a632:	3130      	adds	r1, #48	; 0x30
 801a634:	7083      	strb	r3, [r0, #2]
 801a636:	70c1      	strb	r1, [r0, #3]
 801a638:	1d03      	adds	r3, r0, #4
 801a63a:	e7f1      	b.n	801a620 <__exponent+0x60>

0801a63c <_printf_float>:
 801a63c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a640:	ed2d 8b02 	vpush	{d8}
 801a644:	b08d      	sub	sp, #52	; 0x34
 801a646:	460c      	mov	r4, r1
 801a648:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801a64c:	4616      	mov	r6, r2
 801a64e:	461f      	mov	r7, r3
 801a650:	4605      	mov	r5, r0
 801a652:	f001 fe81 	bl	801c358 <_localeconv_r>
 801a656:	f8d0 a000 	ldr.w	sl, [r0]
 801a65a:	4650      	mov	r0, sl
 801a65c:	f7e5 fdca 	bl	80001f4 <strlen>
 801a660:	2300      	movs	r3, #0
 801a662:	930a      	str	r3, [sp, #40]	; 0x28
 801a664:	6823      	ldr	r3, [r4, #0]
 801a666:	9305      	str	r3, [sp, #20]
 801a668:	f8d8 3000 	ldr.w	r3, [r8]
 801a66c:	f894 b018 	ldrb.w	fp, [r4, #24]
 801a670:	3307      	adds	r3, #7
 801a672:	f023 0307 	bic.w	r3, r3, #7
 801a676:	f103 0208 	add.w	r2, r3, #8
 801a67a:	f8c8 2000 	str.w	r2, [r8]
 801a67e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a682:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801a686:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801a68a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801a68e:	9307      	str	r3, [sp, #28]
 801a690:	f8cd 8018 	str.w	r8, [sp, #24]
 801a694:	ee08 0a10 	vmov	s16, r0
 801a698:	4b9f      	ldr	r3, [pc, #636]	; (801a918 <_printf_float+0x2dc>)
 801a69a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801a69e:	f04f 32ff 	mov.w	r2, #4294967295
 801a6a2:	f7e6 fa5b 	bl	8000b5c <__aeabi_dcmpun>
 801a6a6:	bb88      	cbnz	r0, 801a70c <_printf_float+0xd0>
 801a6a8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801a6ac:	4b9a      	ldr	r3, [pc, #616]	; (801a918 <_printf_float+0x2dc>)
 801a6ae:	f04f 32ff 	mov.w	r2, #4294967295
 801a6b2:	f7e6 fa35 	bl	8000b20 <__aeabi_dcmple>
 801a6b6:	bb48      	cbnz	r0, 801a70c <_printf_float+0xd0>
 801a6b8:	2200      	movs	r2, #0
 801a6ba:	2300      	movs	r3, #0
 801a6bc:	4640      	mov	r0, r8
 801a6be:	4649      	mov	r1, r9
 801a6c0:	f7e6 fa24 	bl	8000b0c <__aeabi_dcmplt>
 801a6c4:	b110      	cbz	r0, 801a6cc <_printf_float+0x90>
 801a6c6:	232d      	movs	r3, #45	; 0x2d
 801a6c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a6cc:	4b93      	ldr	r3, [pc, #588]	; (801a91c <_printf_float+0x2e0>)
 801a6ce:	4894      	ldr	r0, [pc, #592]	; (801a920 <_printf_float+0x2e4>)
 801a6d0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 801a6d4:	bf94      	ite	ls
 801a6d6:	4698      	movls	r8, r3
 801a6d8:	4680      	movhi	r8, r0
 801a6da:	2303      	movs	r3, #3
 801a6dc:	6123      	str	r3, [r4, #16]
 801a6de:	9b05      	ldr	r3, [sp, #20]
 801a6e0:	f023 0204 	bic.w	r2, r3, #4
 801a6e4:	6022      	str	r2, [r4, #0]
 801a6e6:	f04f 0900 	mov.w	r9, #0
 801a6ea:	9700      	str	r7, [sp, #0]
 801a6ec:	4633      	mov	r3, r6
 801a6ee:	aa0b      	add	r2, sp, #44	; 0x2c
 801a6f0:	4621      	mov	r1, r4
 801a6f2:	4628      	mov	r0, r5
 801a6f4:	f000 f9d8 	bl	801aaa8 <_printf_common>
 801a6f8:	3001      	adds	r0, #1
 801a6fa:	f040 8090 	bne.w	801a81e <_printf_float+0x1e2>
 801a6fe:	f04f 30ff 	mov.w	r0, #4294967295
 801a702:	b00d      	add	sp, #52	; 0x34
 801a704:	ecbd 8b02 	vpop	{d8}
 801a708:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a70c:	4642      	mov	r2, r8
 801a70e:	464b      	mov	r3, r9
 801a710:	4640      	mov	r0, r8
 801a712:	4649      	mov	r1, r9
 801a714:	f7e6 fa22 	bl	8000b5c <__aeabi_dcmpun>
 801a718:	b140      	cbz	r0, 801a72c <_printf_float+0xf0>
 801a71a:	464b      	mov	r3, r9
 801a71c:	2b00      	cmp	r3, #0
 801a71e:	bfbc      	itt	lt
 801a720:	232d      	movlt	r3, #45	; 0x2d
 801a722:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801a726:	487f      	ldr	r0, [pc, #508]	; (801a924 <_printf_float+0x2e8>)
 801a728:	4b7f      	ldr	r3, [pc, #508]	; (801a928 <_printf_float+0x2ec>)
 801a72a:	e7d1      	b.n	801a6d0 <_printf_float+0x94>
 801a72c:	6863      	ldr	r3, [r4, #4]
 801a72e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801a732:	9206      	str	r2, [sp, #24]
 801a734:	1c5a      	adds	r2, r3, #1
 801a736:	d13f      	bne.n	801a7b8 <_printf_float+0x17c>
 801a738:	2306      	movs	r3, #6
 801a73a:	6063      	str	r3, [r4, #4]
 801a73c:	9b05      	ldr	r3, [sp, #20]
 801a73e:	6861      	ldr	r1, [r4, #4]
 801a740:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801a744:	2300      	movs	r3, #0
 801a746:	9303      	str	r3, [sp, #12]
 801a748:	ab0a      	add	r3, sp, #40	; 0x28
 801a74a:	e9cd b301 	strd	fp, r3, [sp, #4]
 801a74e:	ab09      	add	r3, sp, #36	; 0x24
 801a750:	ec49 8b10 	vmov	d0, r8, r9
 801a754:	9300      	str	r3, [sp, #0]
 801a756:	6022      	str	r2, [r4, #0]
 801a758:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801a75c:	4628      	mov	r0, r5
 801a75e:	f7ff fecd 	bl	801a4fc <__cvt>
 801a762:	9b06      	ldr	r3, [sp, #24]
 801a764:	9909      	ldr	r1, [sp, #36]	; 0x24
 801a766:	2b47      	cmp	r3, #71	; 0x47
 801a768:	4680      	mov	r8, r0
 801a76a:	d108      	bne.n	801a77e <_printf_float+0x142>
 801a76c:	1cc8      	adds	r0, r1, #3
 801a76e:	db02      	blt.n	801a776 <_printf_float+0x13a>
 801a770:	6863      	ldr	r3, [r4, #4]
 801a772:	4299      	cmp	r1, r3
 801a774:	dd41      	ble.n	801a7fa <_printf_float+0x1be>
 801a776:	f1ab 0b02 	sub.w	fp, fp, #2
 801a77a:	fa5f fb8b 	uxtb.w	fp, fp
 801a77e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801a782:	d820      	bhi.n	801a7c6 <_printf_float+0x18a>
 801a784:	3901      	subs	r1, #1
 801a786:	465a      	mov	r2, fp
 801a788:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801a78c:	9109      	str	r1, [sp, #36]	; 0x24
 801a78e:	f7ff ff17 	bl	801a5c0 <__exponent>
 801a792:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a794:	1813      	adds	r3, r2, r0
 801a796:	2a01      	cmp	r2, #1
 801a798:	4681      	mov	r9, r0
 801a79a:	6123      	str	r3, [r4, #16]
 801a79c:	dc02      	bgt.n	801a7a4 <_printf_float+0x168>
 801a79e:	6822      	ldr	r2, [r4, #0]
 801a7a0:	07d2      	lsls	r2, r2, #31
 801a7a2:	d501      	bpl.n	801a7a8 <_printf_float+0x16c>
 801a7a4:	3301      	adds	r3, #1
 801a7a6:	6123      	str	r3, [r4, #16]
 801a7a8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801a7ac:	2b00      	cmp	r3, #0
 801a7ae:	d09c      	beq.n	801a6ea <_printf_float+0xae>
 801a7b0:	232d      	movs	r3, #45	; 0x2d
 801a7b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a7b6:	e798      	b.n	801a6ea <_printf_float+0xae>
 801a7b8:	9a06      	ldr	r2, [sp, #24]
 801a7ba:	2a47      	cmp	r2, #71	; 0x47
 801a7bc:	d1be      	bne.n	801a73c <_printf_float+0x100>
 801a7be:	2b00      	cmp	r3, #0
 801a7c0:	d1bc      	bne.n	801a73c <_printf_float+0x100>
 801a7c2:	2301      	movs	r3, #1
 801a7c4:	e7b9      	b.n	801a73a <_printf_float+0xfe>
 801a7c6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801a7ca:	d118      	bne.n	801a7fe <_printf_float+0x1c2>
 801a7cc:	2900      	cmp	r1, #0
 801a7ce:	6863      	ldr	r3, [r4, #4]
 801a7d0:	dd0b      	ble.n	801a7ea <_printf_float+0x1ae>
 801a7d2:	6121      	str	r1, [r4, #16]
 801a7d4:	b913      	cbnz	r3, 801a7dc <_printf_float+0x1a0>
 801a7d6:	6822      	ldr	r2, [r4, #0]
 801a7d8:	07d0      	lsls	r0, r2, #31
 801a7da:	d502      	bpl.n	801a7e2 <_printf_float+0x1a6>
 801a7dc:	3301      	adds	r3, #1
 801a7de:	440b      	add	r3, r1
 801a7e0:	6123      	str	r3, [r4, #16]
 801a7e2:	65a1      	str	r1, [r4, #88]	; 0x58
 801a7e4:	f04f 0900 	mov.w	r9, #0
 801a7e8:	e7de      	b.n	801a7a8 <_printf_float+0x16c>
 801a7ea:	b913      	cbnz	r3, 801a7f2 <_printf_float+0x1b6>
 801a7ec:	6822      	ldr	r2, [r4, #0]
 801a7ee:	07d2      	lsls	r2, r2, #31
 801a7f0:	d501      	bpl.n	801a7f6 <_printf_float+0x1ba>
 801a7f2:	3302      	adds	r3, #2
 801a7f4:	e7f4      	b.n	801a7e0 <_printf_float+0x1a4>
 801a7f6:	2301      	movs	r3, #1
 801a7f8:	e7f2      	b.n	801a7e0 <_printf_float+0x1a4>
 801a7fa:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801a7fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a800:	4299      	cmp	r1, r3
 801a802:	db05      	blt.n	801a810 <_printf_float+0x1d4>
 801a804:	6823      	ldr	r3, [r4, #0]
 801a806:	6121      	str	r1, [r4, #16]
 801a808:	07d8      	lsls	r0, r3, #31
 801a80a:	d5ea      	bpl.n	801a7e2 <_printf_float+0x1a6>
 801a80c:	1c4b      	adds	r3, r1, #1
 801a80e:	e7e7      	b.n	801a7e0 <_printf_float+0x1a4>
 801a810:	2900      	cmp	r1, #0
 801a812:	bfd4      	ite	le
 801a814:	f1c1 0202 	rsble	r2, r1, #2
 801a818:	2201      	movgt	r2, #1
 801a81a:	4413      	add	r3, r2
 801a81c:	e7e0      	b.n	801a7e0 <_printf_float+0x1a4>
 801a81e:	6823      	ldr	r3, [r4, #0]
 801a820:	055a      	lsls	r2, r3, #21
 801a822:	d407      	bmi.n	801a834 <_printf_float+0x1f8>
 801a824:	6923      	ldr	r3, [r4, #16]
 801a826:	4642      	mov	r2, r8
 801a828:	4631      	mov	r1, r6
 801a82a:	4628      	mov	r0, r5
 801a82c:	47b8      	blx	r7
 801a82e:	3001      	adds	r0, #1
 801a830:	d12c      	bne.n	801a88c <_printf_float+0x250>
 801a832:	e764      	b.n	801a6fe <_printf_float+0xc2>
 801a834:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801a838:	f240 80e0 	bls.w	801a9fc <_printf_float+0x3c0>
 801a83c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801a840:	2200      	movs	r2, #0
 801a842:	2300      	movs	r3, #0
 801a844:	f7e6 f958 	bl	8000af8 <__aeabi_dcmpeq>
 801a848:	2800      	cmp	r0, #0
 801a84a:	d034      	beq.n	801a8b6 <_printf_float+0x27a>
 801a84c:	4a37      	ldr	r2, [pc, #220]	; (801a92c <_printf_float+0x2f0>)
 801a84e:	2301      	movs	r3, #1
 801a850:	4631      	mov	r1, r6
 801a852:	4628      	mov	r0, r5
 801a854:	47b8      	blx	r7
 801a856:	3001      	adds	r0, #1
 801a858:	f43f af51 	beq.w	801a6fe <_printf_float+0xc2>
 801a85c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801a860:	429a      	cmp	r2, r3
 801a862:	db02      	blt.n	801a86a <_printf_float+0x22e>
 801a864:	6823      	ldr	r3, [r4, #0]
 801a866:	07d8      	lsls	r0, r3, #31
 801a868:	d510      	bpl.n	801a88c <_printf_float+0x250>
 801a86a:	ee18 3a10 	vmov	r3, s16
 801a86e:	4652      	mov	r2, sl
 801a870:	4631      	mov	r1, r6
 801a872:	4628      	mov	r0, r5
 801a874:	47b8      	blx	r7
 801a876:	3001      	adds	r0, #1
 801a878:	f43f af41 	beq.w	801a6fe <_printf_float+0xc2>
 801a87c:	f04f 0800 	mov.w	r8, #0
 801a880:	f104 091a 	add.w	r9, r4, #26
 801a884:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a886:	3b01      	subs	r3, #1
 801a888:	4543      	cmp	r3, r8
 801a88a:	dc09      	bgt.n	801a8a0 <_printf_float+0x264>
 801a88c:	6823      	ldr	r3, [r4, #0]
 801a88e:	079b      	lsls	r3, r3, #30
 801a890:	f100 8105 	bmi.w	801aa9e <_printf_float+0x462>
 801a894:	68e0      	ldr	r0, [r4, #12]
 801a896:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a898:	4298      	cmp	r0, r3
 801a89a:	bfb8      	it	lt
 801a89c:	4618      	movlt	r0, r3
 801a89e:	e730      	b.n	801a702 <_printf_float+0xc6>
 801a8a0:	2301      	movs	r3, #1
 801a8a2:	464a      	mov	r2, r9
 801a8a4:	4631      	mov	r1, r6
 801a8a6:	4628      	mov	r0, r5
 801a8a8:	47b8      	blx	r7
 801a8aa:	3001      	adds	r0, #1
 801a8ac:	f43f af27 	beq.w	801a6fe <_printf_float+0xc2>
 801a8b0:	f108 0801 	add.w	r8, r8, #1
 801a8b4:	e7e6      	b.n	801a884 <_printf_float+0x248>
 801a8b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a8b8:	2b00      	cmp	r3, #0
 801a8ba:	dc39      	bgt.n	801a930 <_printf_float+0x2f4>
 801a8bc:	4a1b      	ldr	r2, [pc, #108]	; (801a92c <_printf_float+0x2f0>)
 801a8be:	2301      	movs	r3, #1
 801a8c0:	4631      	mov	r1, r6
 801a8c2:	4628      	mov	r0, r5
 801a8c4:	47b8      	blx	r7
 801a8c6:	3001      	adds	r0, #1
 801a8c8:	f43f af19 	beq.w	801a6fe <_printf_float+0xc2>
 801a8cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801a8d0:	4313      	orrs	r3, r2
 801a8d2:	d102      	bne.n	801a8da <_printf_float+0x29e>
 801a8d4:	6823      	ldr	r3, [r4, #0]
 801a8d6:	07d9      	lsls	r1, r3, #31
 801a8d8:	d5d8      	bpl.n	801a88c <_printf_float+0x250>
 801a8da:	ee18 3a10 	vmov	r3, s16
 801a8de:	4652      	mov	r2, sl
 801a8e0:	4631      	mov	r1, r6
 801a8e2:	4628      	mov	r0, r5
 801a8e4:	47b8      	blx	r7
 801a8e6:	3001      	adds	r0, #1
 801a8e8:	f43f af09 	beq.w	801a6fe <_printf_float+0xc2>
 801a8ec:	f04f 0900 	mov.w	r9, #0
 801a8f0:	f104 0a1a 	add.w	sl, r4, #26
 801a8f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a8f6:	425b      	negs	r3, r3
 801a8f8:	454b      	cmp	r3, r9
 801a8fa:	dc01      	bgt.n	801a900 <_printf_float+0x2c4>
 801a8fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a8fe:	e792      	b.n	801a826 <_printf_float+0x1ea>
 801a900:	2301      	movs	r3, #1
 801a902:	4652      	mov	r2, sl
 801a904:	4631      	mov	r1, r6
 801a906:	4628      	mov	r0, r5
 801a908:	47b8      	blx	r7
 801a90a:	3001      	adds	r0, #1
 801a90c:	f43f aef7 	beq.w	801a6fe <_printf_float+0xc2>
 801a910:	f109 0901 	add.w	r9, r9, #1
 801a914:	e7ee      	b.n	801a8f4 <_printf_float+0x2b8>
 801a916:	bf00      	nop
 801a918:	7fefffff 	.word	0x7fefffff
 801a91c:	0806c994 	.word	0x0806c994
 801a920:	0806c998 	.word	0x0806c998
 801a924:	0806c9a0 	.word	0x0806c9a0
 801a928:	0806c99c 	.word	0x0806c99c
 801a92c:	0806c9a4 	.word	0x0806c9a4
 801a930:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a932:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801a934:	429a      	cmp	r2, r3
 801a936:	bfa8      	it	ge
 801a938:	461a      	movge	r2, r3
 801a93a:	2a00      	cmp	r2, #0
 801a93c:	4691      	mov	r9, r2
 801a93e:	dc37      	bgt.n	801a9b0 <_printf_float+0x374>
 801a940:	f04f 0b00 	mov.w	fp, #0
 801a944:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801a948:	f104 021a 	add.w	r2, r4, #26
 801a94c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801a94e:	9305      	str	r3, [sp, #20]
 801a950:	eba3 0309 	sub.w	r3, r3, r9
 801a954:	455b      	cmp	r3, fp
 801a956:	dc33      	bgt.n	801a9c0 <_printf_float+0x384>
 801a958:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801a95c:	429a      	cmp	r2, r3
 801a95e:	db3b      	blt.n	801a9d8 <_printf_float+0x39c>
 801a960:	6823      	ldr	r3, [r4, #0]
 801a962:	07da      	lsls	r2, r3, #31
 801a964:	d438      	bmi.n	801a9d8 <_printf_float+0x39c>
 801a966:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a968:	9a05      	ldr	r2, [sp, #20]
 801a96a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801a96c:	1a9a      	subs	r2, r3, r2
 801a96e:	eba3 0901 	sub.w	r9, r3, r1
 801a972:	4591      	cmp	r9, r2
 801a974:	bfa8      	it	ge
 801a976:	4691      	movge	r9, r2
 801a978:	f1b9 0f00 	cmp.w	r9, #0
 801a97c:	dc35      	bgt.n	801a9ea <_printf_float+0x3ae>
 801a97e:	f04f 0800 	mov.w	r8, #0
 801a982:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801a986:	f104 0a1a 	add.w	sl, r4, #26
 801a98a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801a98e:	1a9b      	subs	r3, r3, r2
 801a990:	eba3 0309 	sub.w	r3, r3, r9
 801a994:	4543      	cmp	r3, r8
 801a996:	f77f af79 	ble.w	801a88c <_printf_float+0x250>
 801a99a:	2301      	movs	r3, #1
 801a99c:	4652      	mov	r2, sl
 801a99e:	4631      	mov	r1, r6
 801a9a0:	4628      	mov	r0, r5
 801a9a2:	47b8      	blx	r7
 801a9a4:	3001      	adds	r0, #1
 801a9a6:	f43f aeaa 	beq.w	801a6fe <_printf_float+0xc2>
 801a9aa:	f108 0801 	add.w	r8, r8, #1
 801a9ae:	e7ec      	b.n	801a98a <_printf_float+0x34e>
 801a9b0:	4613      	mov	r3, r2
 801a9b2:	4631      	mov	r1, r6
 801a9b4:	4642      	mov	r2, r8
 801a9b6:	4628      	mov	r0, r5
 801a9b8:	47b8      	blx	r7
 801a9ba:	3001      	adds	r0, #1
 801a9bc:	d1c0      	bne.n	801a940 <_printf_float+0x304>
 801a9be:	e69e      	b.n	801a6fe <_printf_float+0xc2>
 801a9c0:	2301      	movs	r3, #1
 801a9c2:	4631      	mov	r1, r6
 801a9c4:	4628      	mov	r0, r5
 801a9c6:	9205      	str	r2, [sp, #20]
 801a9c8:	47b8      	blx	r7
 801a9ca:	3001      	adds	r0, #1
 801a9cc:	f43f ae97 	beq.w	801a6fe <_printf_float+0xc2>
 801a9d0:	9a05      	ldr	r2, [sp, #20]
 801a9d2:	f10b 0b01 	add.w	fp, fp, #1
 801a9d6:	e7b9      	b.n	801a94c <_printf_float+0x310>
 801a9d8:	ee18 3a10 	vmov	r3, s16
 801a9dc:	4652      	mov	r2, sl
 801a9de:	4631      	mov	r1, r6
 801a9e0:	4628      	mov	r0, r5
 801a9e2:	47b8      	blx	r7
 801a9e4:	3001      	adds	r0, #1
 801a9e6:	d1be      	bne.n	801a966 <_printf_float+0x32a>
 801a9e8:	e689      	b.n	801a6fe <_printf_float+0xc2>
 801a9ea:	9a05      	ldr	r2, [sp, #20]
 801a9ec:	464b      	mov	r3, r9
 801a9ee:	4442      	add	r2, r8
 801a9f0:	4631      	mov	r1, r6
 801a9f2:	4628      	mov	r0, r5
 801a9f4:	47b8      	blx	r7
 801a9f6:	3001      	adds	r0, #1
 801a9f8:	d1c1      	bne.n	801a97e <_printf_float+0x342>
 801a9fa:	e680      	b.n	801a6fe <_printf_float+0xc2>
 801a9fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a9fe:	2a01      	cmp	r2, #1
 801aa00:	dc01      	bgt.n	801aa06 <_printf_float+0x3ca>
 801aa02:	07db      	lsls	r3, r3, #31
 801aa04:	d538      	bpl.n	801aa78 <_printf_float+0x43c>
 801aa06:	2301      	movs	r3, #1
 801aa08:	4642      	mov	r2, r8
 801aa0a:	4631      	mov	r1, r6
 801aa0c:	4628      	mov	r0, r5
 801aa0e:	47b8      	blx	r7
 801aa10:	3001      	adds	r0, #1
 801aa12:	f43f ae74 	beq.w	801a6fe <_printf_float+0xc2>
 801aa16:	ee18 3a10 	vmov	r3, s16
 801aa1a:	4652      	mov	r2, sl
 801aa1c:	4631      	mov	r1, r6
 801aa1e:	4628      	mov	r0, r5
 801aa20:	47b8      	blx	r7
 801aa22:	3001      	adds	r0, #1
 801aa24:	f43f ae6b 	beq.w	801a6fe <_printf_float+0xc2>
 801aa28:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801aa2c:	2200      	movs	r2, #0
 801aa2e:	2300      	movs	r3, #0
 801aa30:	f7e6 f862 	bl	8000af8 <__aeabi_dcmpeq>
 801aa34:	b9d8      	cbnz	r0, 801aa6e <_printf_float+0x432>
 801aa36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801aa38:	f108 0201 	add.w	r2, r8, #1
 801aa3c:	3b01      	subs	r3, #1
 801aa3e:	4631      	mov	r1, r6
 801aa40:	4628      	mov	r0, r5
 801aa42:	47b8      	blx	r7
 801aa44:	3001      	adds	r0, #1
 801aa46:	d10e      	bne.n	801aa66 <_printf_float+0x42a>
 801aa48:	e659      	b.n	801a6fe <_printf_float+0xc2>
 801aa4a:	2301      	movs	r3, #1
 801aa4c:	4652      	mov	r2, sl
 801aa4e:	4631      	mov	r1, r6
 801aa50:	4628      	mov	r0, r5
 801aa52:	47b8      	blx	r7
 801aa54:	3001      	adds	r0, #1
 801aa56:	f43f ae52 	beq.w	801a6fe <_printf_float+0xc2>
 801aa5a:	f108 0801 	add.w	r8, r8, #1
 801aa5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801aa60:	3b01      	subs	r3, #1
 801aa62:	4543      	cmp	r3, r8
 801aa64:	dcf1      	bgt.n	801aa4a <_printf_float+0x40e>
 801aa66:	464b      	mov	r3, r9
 801aa68:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801aa6c:	e6dc      	b.n	801a828 <_printf_float+0x1ec>
 801aa6e:	f04f 0800 	mov.w	r8, #0
 801aa72:	f104 0a1a 	add.w	sl, r4, #26
 801aa76:	e7f2      	b.n	801aa5e <_printf_float+0x422>
 801aa78:	2301      	movs	r3, #1
 801aa7a:	4642      	mov	r2, r8
 801aa7c:	e7df      	b.n	801aa3e <_printf_float+0x402>
 801aa7e:	2301      	movs	r3, #1
 801aa80:	464a      	mov	r2, r9
 801aa82:	4631      	mov	r1, r6
 801aa84:	4628      	mov	r0, r5
 801aa86:	47b8      	blx	r7
 801aa88:	3001      	adds	r0, #1
 801aa8a:	f43f ae38 	beq.w	801a6fe <_printf_float+0xc2>
 801aa8e:	f108 0801 	add.w	r8, r8, #1
 801aa92:	68e3      	ldr	r3, [r4, #12]
 801aa94:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801aa96:	1a5b      	subs	r3, r3, r1
 801aa98:	4543      	cmp	r3, r8
 801aa9a:	dcf0      	bgt.n	801aa7e <_printf_float+0x442>
 801aa9c:	e6fa      	b.n	801a894 <_printf_float+0x258>
 801aa9e:	f04f 0800 	mov.w	r8, #0
 801aaa2:	f104 0919 	add.w	r9, r4, #25
 801aaa6:	e7f4      	b.n	801aa92 <_printf_float+0x456>

0801aaa8 <_printf_common>:
 801aaa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801aaac:	4616      	mov	r6, r2
 801aaae:	4699      	mov	r9, r3
 801aab0:	688a      	ldr	r2, [r1, #8]
 801aab2:	690b      	ldr	r3, [r1, #16]
 801aab4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801aab8:	4293      	cmp	r3, r2
 801aaba:	bfb8      	it	lt
 801aabc:	4613      	movlt	r3, r2
 801aabe:	6033      	str	r3, [r6, #0]
 801aac0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801aac4:	4607      	mov	r7, r0
 801aac6:	460c      	mov	r4, r1
 801aac8:	b10a      	cbz	r2, 801aace <_printf_common+0x26>
 801aaca:	3301      	adds	r3, #1
 801aacc:	6033      	str	r3, [r6, #0]
 801aace:	6823      	ldr	r3, [r4, #0]
 801aad0:	0699      	lsls	r1, r3, #26
 801aad2:	bf42      	ittt	mi
 801aad4:	6833      	ldrmi	r3, [r6, #0]
 801aad6:	3302      	addmi	r3, #2
 801aad8:	6033      	strmi	r3, [r6, #0]
 801aada:	6825      	ldr	r5, [r4, #0]
 801aadc:	f015 0506 	ands.w	r5, r5, #6
 801aae0:	d106      	bne.n	801aaf0 <_printf_common+0x48>
 801aae2:	f104 0a19 	add.w	sl, r4, #25
 801aae6:	68e3      	ldr	r3, [r4, #12]
 801aae8:	6832      	ldr	r2, [r6, #0]
 801aaea:	1a9b      	subs	r3, r3, r2
 801aaec:	42ab      	cmp	r3, r5
 801aaee:	dc26      	bgt.n	801ab3e <_printf_common+0x96>
 801aaf0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801aaf4:	1e13      	subs	r3, r2, #0
 801aaf6:	6822      	ldr	r2, [r4, #0]
 801aaf8:	bf18      	it	ne
 801aafa:	2301      	movne	r3, #1
 801aafc:	0692      	lsls	r2, r2, #26
 801aafe:	d42b      	bmi.n	801ab58 <_printf_common+0xb0>
 801ab00:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801ab04:	4649      	mov	r1, r9
 801ab06:	4638      	mov	r0, r7
 801ab08:	47c0      	blx	r8
 801ab0a:	3001      	adds	r0, #1
 801ab0c:	d01e      	beq.n	801ab4c <_printf_common+0xa4>
 801ab0e:	6823      	ldr	r3, [r4, #0]
 801ab10:	68e5      	ldr	r5, [r4, #12]
 801ab12:	6832      	ldr	r2, [r6, #0]
 801ab14:	f003 0306 	and.w	r3, r3, #6
 801ab18:	2b04      	cmp	r3, #4
 801ab1a:	bf08      	it	eq
 801ab1c:	1aad      	subeq	r5, r5, r2
 801ab1e:	68a3      	ldr	r3, [r4, #8]
 801ab20:	6922      	ldr	r2, [r4, #16]
 801ab22:	bf0c      	ite	eq
 801ab24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801ab28:	2500      	movne	r5, #0
 801ab2a:	4293      	cmp	r3, r2
 801ab2c:	bfc4      	itt	gt
 801ab2e:	1a9b      	subgt	r3, r3, r2
 801ab30:	18ed      	addgt	r5, r5, r3
 801ab32:	2600      	movs	r6, #0
 801ab34:	341a      	adds	r4, #26
 801ab36:	42b5      	cmp	r5, r6
 801ab38:	d11a      	bne.n	801ab70 <_printf_common+0xc8>
 801ab3a:	2000      	movs	r0, #0
 801ab3c:	e008      	b.n	801ab50 <_printf_common+0xa8>
 801ab3e:	2301      	movs	r3, #1
 801ab40:	4652      	mov	r2, sl
 801ab42:	4649      	mov	r1, r9
 801ab44:	4638      	mov	r0, r7
 801ab46:	47c0      	blx	r8
 801ab48:	3001      	adds	r0, #1
 801ab4a:	d103      	bne.n	801ab54 <_printf_common+0xac>
 801ab4c:	f04f 30ff 	mov.w	r0, #4294967295
 801ab50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ab54:	3501      	adds	r5, #1
 801ab56:	e7c6      	b.n	801aae6 <_printf_common+0x3e>
 801ab58:	18e1      	adds	r1, r4, r3
 801ab5a:	1c5a      	adds	r2, r3, #1
 801ab5c:	2030      	movs	r0, #48	; 0x30
 801ab5e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801ab62:	4422      	add	r2, r4
 801ab64:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801ab68:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801ab6c:	3302      	adds	r3, #2
 801ab6e:	e7c7      	b.n	801ab00 <_printf_common+0x58>
 801ab70:	2301      	movs	r3, #1
 801ab72:	4622      	mov	r2, r4
 801ab74:	4649      	mov	r1, r9
 801ab76:	4638      	mov	r0, r7
 801ab78:	47c0      	blx	r8
 801ab7a:	3001      	adds	r0, #1
 801ab7c:	d0e6      	beq.n	801ab4c <_printf_common+0xa4>
 801ab7e:	3601      	adds	r6, #1
 801ab80:	e7d9      	b.n	801ab36 <_printf_common+0x8e>
	...

0801ab84 <_printf_i>:
 801ab84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801ab88:	7e0f      	ldrb	r7, [r1, #24]
 801ab8a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801ab8c:	2f78      	cmp	r7, #120	; 0x78
 801ab8e:	4691      	mov	r9, r2
 801ab90:	4680      	mov	r8, r0
 801ab92:	460c      	mov	r4, r1
 801ab94:	469a      	mov	sl, r3
 801ab96:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801ab9a:	d807      	bhi.n	801abac <_printf_i+0x28>
 801ab9c:	2f62      	cmp	r7, #98	; 0x62
 801ab9e:	d80a      	bhi.n	801abb6 <_printf_i+0x32>
 801aba0:	2f00      	cmp	r7, #0
 801aba2:	f000 80d8 	beq.w	801ad56 <_printf_i+0x1d2>
 801aba6:	2f58      	cmp	r7, #88	; 0x58
 801aba8:	f000 80a3 	beq.w	801acf2 <_printf_i+0x16e>
 801abac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801abb0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801abb4:	e03a      	b.n	801ac2c <_printf_i+0xa8>
 801abb6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801abba:	2b15      	cmp	r3, #21
 801abbc:	d8f6      	bhi.n	801abac <_printf_i+0x28>
 801abbe:	a101      	add	r1, pc, #4	; (adr r1, 801abc4 <_printf_i+0x40>)
 801abc0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801abc4:	0801ac1d 	.word	0x0801ac1d
 801abc8:	0801ac31 	.word	0x0801ac31
 801abcc:	0801abad 	.word	0x0801abad
 801abd0:	0801abad 	.word	0x0801abad
 801abd4:	0801abad 	.word	0x0801abad
 801abd8:	0801abad 	.word	0x0801abad
 801abdc:	0801ac31 	.word	0x0801ac31
 801abe0:	0801abad 	.word	0x0801abad
 801abe4:	0801abad 	.word	0x0801abad
 801abe8:	0801abad 	.word	0x0801abad
 801abec:	0801abad 	.word	0x0801abad
 801abf0:	0801ad3d 	.word	0x0801ad3d
 801abf4:	0801ac61 	.word	0x0801ac61
 801abf8:	0801ad1f 	.word	0x0801ad1f
 801abfc:	0801abad 	.word	0x0801abad
 801ac00:	0801abad 	.word	0x0801abad
 801ac04:	0801ad5f 	.word	0x0801ad5f
 801ac08:	0801abad 	.word	0x0801abad
 801ac0c:	0801ac61 	.word	0x0801ac61
 801ac10:	0801abad 	.word	0x0801abad
 801ac14:	0801abad 	.word	0x0801abad
 801ac18:	0801ad27 	.word	0x0801ad27
 801ac1c:	682b      	ldr	r3, [r5, #0]
 801ac1e:	1d1a      	adds	r2, r3, #4
 801ac20:	681b      	ldr	r3, [r3, #0]
 801ac22:	602a      	str	r2, [r5, #0]
 801ac24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801ac28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801ac2c:	2301      	movs	r3, #1
 801ac2e:	e0a3      	b.n	801ad78 <_printf_i+0x1f4>
 801ac30:	6820      	ldr	r0, [r4, #0]
 801ac32:	6829      	ldr	r1, [r5, #0]
 801ac34:	0606      	lsls	r6, r0, #24
 801ac36:	f101 0304 	add.w	r3, r1, #4
 801ac3a:	d50a      	bpl.n	801ac52 <_printf_i+0xce>
 801ac3c:	680e      	ldr	r6, [r1, #0]
 801ac3e:	602b      	str	r3, [r5, #0]
 801ac40:	2e00      	cmp	r6, #0
 801ac42:	da03      	bge.n	801ac4c <_printf_i+0xc8>
 801ac44:	232d      	movs	r3, #45	; 0x2d
 801ac46:	4276      	negs	r6, r6
 801ac48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801ac4c:	485e      	ldr	r0, [pc, #376]	; (801adc8 <_printf_i+0x244>)
 801ac4e:	230a      	movs	r3, #10
 801ac50:	e019      	b.n	801ac86 <_printf_i+0x102>
 801ac52:	680e      	ldr	r6, [r1, #0]
 801ac54:	602b      	str	r3, [r5, #0]
 801ac56:	f010 0f40 	tst.w	r0, #64	; 0x40
 801ac5a:	bf18      	it	ne
 801ac5c:	b236      	sxthne	r6, r6
 801ac5e:	e7ef      	b.n	801ac40 <_printf_i+0xbc>
 801ac60:	682b      	ldr	r3, [r5, #0]
 801ac62:	6820      	ldr	r0, [r4, #0]
 801ac64:	1d19      	adds	r1, r3, #4
 801ac66:	6029      	str	r1, [r5, #0]
 801ac68:	0601      	lsls	r1, r0, #24
 801ac6a:	d501      	bpl.n	801ac70 <_printf_i+0xec>
 801ac6c:	681e      	ldr	r6, [r3, #0]
 801ac6e:	e002      	b.n	801ac76 <_printf_i+0xf2>
 801ac70:	0646      	lsls	r6, r0, #25
 801ac72:	d5fb      	bpl.n	801ac6c <_printf_i+0xe8>
 801ac74:	881e      	ldrh	r6, [r3, #0]
 801ac76:	4854      	ldr	r0, [pc, #336]	; (801adc8 <_printf_i+0x244>)
 801ac78:	2f6f      	cmp	r7, #111	; 0x6f
 801ac7a:	bf0c      	ite	eq
 801ac7c:	2308      	moveq	r3, #8
 801ac7e:	230a      	movne	r3, #10
 801ac80:	2100      	movs	r1, #0
 801ac82:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801ac86:	6865      	ldr	r5, [r4, #4]
 801ac88:	60a5      	str	r5, [r4, #8]
 801ac8a:	2d00      	cmp	r5, #0
 801ac8c:	bfa2      	ittt	ge
 801ac8e:	6821      	ldrge	r1, [r4, #0]
 801ac90:	f021 0104 	bicge.w	r1, r1, #4
 801ac94:	6021      	strge	r1, [r4, #0]
 801ac96:	b90e      	cbnz	r6, 801ac9c <_printf_i+0x118>
 801ac98:	2d00      	cmp	r5, #0
 801ac9a:	d04d      	beq.n	801ad38 <_printf_i+0x1b4>
 801ac9c:	4615      	mov	r5, r2
 801ac9e:	fbb6 f1f3 	udiv	r1, r6, r3
 801aca2:	fb03 6711 	mls	r7, r3, r1, r6
 801aca6:	5dc7      	ldrb	r7, [r0, r7]
 801aca8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801acac:	4637      	mov	r7, r6
 801acae:	42bb      	cmp	r3, r7
 801acb0:	460e      	mov	r6, r1
 801acb2:	d9f4      	bls.n	801ac9e <_printf_i+0x11a>
 801acb4:	2b08      	cmp	r3, #8
 801acb6:	d10b      	bne.n	801acd0 <_printf_i+0x14c>
 801acb8:	6823      	ldr	r3, [r4, #0]
 801acba:	07de      	lsls	r6, r3, #31
 801acbc:	d508      	bpl.n	801acd0 <_printf_i+0x14c>
 801acbe:	6923      	ldr	r3, [r4, #16]
 801acc0:	6861      	ldr	r1, [r4, #4]
 801acc2:	4299      	cmp	r1, r3
 801acc4:	bfde      	ittt	le
 801acc6:	2330      	movle	r3, #48	; 0x30
 801acc8:	f805 3c01 	strble.w	r3, [r5, #-1]
 801accc:	f105 35ff 	addle.w	r5, r5, #4294967295
 801acd0:	1b52      	subs	r2, r2, r5
 801acd2:	6122      	str	r2, [r4, #16]
 801acd4:	f8cd a000 	str.w	sl, [sp]
 801acd8:	464b      	mov	r3, r9
 801acda:	aa03      	add	r2, sp, #12
 801acdc:	4621      	mov	r1, r4
 801acde:	4640      	mov	r0, r8
 801ace0:	f7ff fee2 	bl	801aaa8 <_printf_common>
 801ace4:	3001      	adds	r0, #1
 801ace6:	d14c      	bne.n	801ad82 <_printf_i+0x1fe>
 801ace8:	f04f 30ff 	mov.w	r0, #4294967295
 801acec:	b004      	add	sp, #16
 801acee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801acf2:	4835      	ldr	r0, [pc, #212]	; (801adc8 <_printf_i+0x244>)
 801acf4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801acf8:	6829      	ldr	r1, [r5, #0]
 801acfa:	6823      	ldr	r3, [r4, #0]
 801acfc:	f851 6b04 	ldr.w	r6, [r1], #4
 801ad00:	6029      	str	r1, [r5, #0]
 801ad02:	061d      	lsls	r5, r3, #24
 801ad04:	d514      	bpl.n	801ad30 <_printf_i+0x1ac>
 801ad06:	07df      	lsls	r7, r3, #31
 801ad08:	bf44      	itt	mi
 801ad0a:	f043 0320 	orrmi.w	r3, r3, #32
 801ad0e:	6023      	strmi	r3, [r4, #0]
 801ad10:	b91e      	cbnz	r6, 801ad1a <_printf_i+0x196>
 801ad12:	6823      	ldr	r3, [r4, #0]
 801ad14:	f023 0320 	bic.w	r3, r3, #32
 801ad18:	6023      	str	r3, [r4, #0]
 801ad1a:	2310      	movs	r3, #16
 801ad1c:	e7b0      	b.n	801ac80 <_printf_i+0xfc>
 801ad1e:	6823      	ldr	r3, [r4, #0]
 801ad20:	f043 0320 	orr.w	r3, r3, #32
 801ad24:	6023      	str	r3, [r4, #0]
 801ad26:	2378      	movs	r3, #120	; 0x78
 801ad28:	4828      	ldr	r0, [pc, #160]	; (801adcc <_printf_i+0x248>)
 801ad2a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801ad2e:	e7e3      	b.n	801acf8 <_printf_i+0x174>
 801ad30:	0659      	lsls	r1, r3, #25
 801ad32:	bf48      	it	mi
 801ad34:	b2b6      	uxthmi	r6, r6
 801ad36:	e7e6      	b.n	801ad06 <_printf_i+0x182>
 801ad38:	4615      	mov	r5, r2
 801ad3a:	e7bb      	b.n	801acb4 <_printf_i+0x130>
 801ad3c:	682b      	ldr	r3, [r5, #0]
 801ad3e:	6826      	ldr	r6, [r4, #0]
 801ad40:	6961      	ldr	r1, [r4, #20]
 801ad42:	1d18      	adds	r0, r3, #4
 801ad44:	6028      	str	r0, [r5, #0]
 801ad46:	0635      	lsls	r5, r6, #24
 801ad48:	681b      	ldr	r3, [r3, #0]
 801ad4a:	d501      	bpl.n	801ad50 <_printf_i+0x1cc>
 801ad4c:	6019      	str	r1, [r3, #0]
 801ad4e:	e002      	b.n	801ad56 <_printf_i+0x1d2>
 801ad50:	0670      	lsls	r0, r6, #25
 801ad52:	d5fb      	bpl.n	801ad4c <_printf_i+0x1c8>
 801ad54:	8019      	strh	r1, [r3, #0]
 801ad56:	2300      	movs	r3, #0
 801ad58:	6123      	str	r3, [r4, #16]
 801ad5a:	4615      	mov	r5, r2
 801ad5c:	e7ba      	b.n	801acd4 <_printf_i+0x150>
 801ad5e:	682b      	ldr	r3, [r5, #0]
 801ad60:	1d1a      	adds	r2, r3, #4
 801ad62:	602a      	str	r2, [r5, #0]
 801ad64:	681d      	ldr	r5, [r3, #0]
 801ad66:	6862      	ldr	r2, [r4, #4]
 801ad68:	2100      	movs	r1, #0
 801ad6a:	4628      	mov	r0, r5
 801ad6c:	f7e5 fa50 	bl	8000210 <memchr>
 801ad70:	b108      	cbz	r0, 801ad76 <_printf_i+0x1f2>
 801ad72:	1b40      	subs	r0, r0, r5
 801ad74:	6060      	str	r0, [r4, #4]
 801ad76:	6863      	ldr	r3, [r4, #4]
 801ad78:	6123      	str	r3, [r4, #16]
 801ad7a:	2300      	movs	r3, #0
 801ad7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801ad80:	e7a8      	b.n	801acd4 <_printf_i+0x150>
 801ad82:	6923      	ldr	r3, [r4, #16]
 801ad84:	462a      	mov	r2, r5
 801ad86:	4649      	mov	r1, r9
 801ad88:	4640      	mov	r0, r8
 801ad8a:	47d0      	blx	sl
 801ad8c:	3001      	adds	r0, #1
 801ad8e:	d0ab      	beq.n	801ace8 <_printf_i+0x164>
 801ad90:	6823      	ldr	r3, [r4, #0]
 801ad92:	079b      	lsls	r3, r3, #30
 801ad94:	d413      	bmi.n	801adbe <_printf_i+0x23a>
 801ad96:	68e0      	ldr	r0, [r4, #12]
 801ad98:	9b03      	ldr	r3, [sp, #12]
 801ad9a:	4298      	cmp	r0, r3
 801ad9c:	bfb8      	it	lt
 801ad9e:	4618      	movlt	r0, r3
 801ada0:	e7a4      	b.n	801acec <_printf_i+0x168>
 801ada2:	2301      	movs	r3, #1
 801ada4:	4632      	mov	r2, r6
 801ada6:	4649      	mov	r1, r9
 801ada8:	4640      	mov	r0, r8
 801adaa:	47d0      	blx	sl
 801adac:	3001      	adds	r0, #1
 801adae:	d09b      	beq.n	801ace8 <_printf_i+0x164>
 801adb0:	3501      	adds	r5, #1
 801adb2:	68e3      	ldr	r3, [r4, #12]
 801adb4:	9903      	ldr	r1, [sp, #12]
 801adb6:	1a5b      	subs	r3, r3, r1
 801adb8:	42ab      	cmp	r3, r5
 801adba:	dcf2      	bgt.n	801ada2 <_printf_i+0x21e>
 801adbc:	e7eb      	b.n	801ad96 <_printf_i+0x212>
 801adbe:	2500      	movs	r5, #0
 801adc0:	f104 0619 	add.w	r6, r4, #25
 801adc4:	e7f5      	b.n	801adb2 <_printf_i+0x22e>
 801adc6:	bf00      	nop
 801adc8:	0806c9a6 	.word	0x0806c9a6
 801adcc:	0806c9b7 	.word	0x0806c9b7

0801add0 <iprintf>:
 801add0:	b40f      	push	{r0, r1, r2, r3}
 801add2:	4b0a      	ldr	r3, [pc, #40]	; (801adfc <iprintf+0x2c>)
 801add4:	b513      	push	{r0, r1, r4, lr}
 801add6:	681c      	ldr	r4, [r3, #0]
 801add8:	b124      	cbz	r4, 801ade4 <iprintf+0x14>
 801adda:	69a3      	ldr	r3, [r4, #24]
 801addc:	b913      	cbnz	r3, 801ade4 <iprintf+0x14>
 801adde:	4620      	mov	r0, r4
 801ade0:	f001 fa0a 	bl	801c1f8 <__sinit>
 801ade4:	ab05      	add	r3, sp, #20
 801ade6:	9a04      	ldr	r2, [sp, #16]
 801ade8:	68a1      	ldr	r1, [r4, #8]
 801adea:	9301      	str	r3, [sp, #4]
 801adec:	4620      	mov	r0, r4
 801adee:	f001 fed9 	bl	801cba4 <_vfiprintf_r>
 801adf2:	b002      	add	sp, #8
 801adf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801adf8:	b004      	add	sp, #16
 801adfa:	4770      	bx	lr
 801adfc:	200000c8 	.word	0x200000c8

0801ae00 <_puts_r>:
 801ae00:	b570      	push	{r4, r5, r6, lr}
 801ae02:	460e      	mov	r6, r1
 801ae04:	4605      	mov	r5, r0
 801ae06:	b118      	cbz	r0, 801ae10 <_puts_r+0x10>
 801ae08:	6983      	ldr	r3, [r0, #24]
 801ae0a:	b90b      	cbnz	r3, 801ae10 <_puts_r+0x10>
 801ae0c:	f001 f9f4 	bl	801c1f8 <__sinit>
 801ae10:	69ab      	ldr	r3, [r5, #24]
 801ae12:	68ac      	ldr	r4, [r5, #8]
 801ae14:	b913      	cbnz	r3, 801ae1c <_puts_r+0x1c>
 801ae16:	4628      	mov	r0, r5
 801ae18:	f001 f9ee 	bl	801c1f8 <__sinit>
 801ae1c:	4b2c      	ldr	r3, [pc, #176]	; (801aed0 <_puts_r+0xd0>)
 801ae1e:	429c      	cmp	r4, r3
 801ae20:	d120      	bne.n	801ae64 <_puts_r+0x64>
 801ae22:	686c      	ldr	r4, [r5, #4]
 801ae24:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801ae26:	07db      	lsls	r3, r3, #31
 801ae28:	d405      	bmi.n	801ae36 <_puts_r+0x36>
 801ae2a:	89a3      	ldrh	r3, [r4, #12]
 801ae2c:	0598      	lsls	r0, r3, #22
 801ae2e:	d402      	bmi.n	801ae36 <_puts_r+0x36>
 801ae30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ae32:	f001 fa96 	bl	801c362 <__retarget_lock_acquire_recursive>
 801ae36:	89a3      	ldrh	r3, [r4, #12]
 801ae38:	0719      	lsls	r1, r3, #28
 801ae3a:	d51d      	bpl.n	801ae78 <_puts_r+0x78>
 801ae3c:	6923      	ldr	r3, [r4, #16]
 801ae3e:	b1db      	cbz	r3, 801ae78 <_puts_r+0x78>
 801ae40:	3e01      	subs	r6, #1
 801ae42:	68a3      	ldr	r3, [r4, #8]
 801ae44:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801ae48:	3b01      	subs	r3, #1
 801ae4a:	60a3      	str	r3, [r4, #8]
 801ae4c:	bb39      	cbnz	r1, 801ae9e <_puts_r+0x9e>
 801ae4e:	2b00      	cmp	r3, #0
 801ae50:	da38      	bge.n	801aec4 <_puts_r+0xc4>
 801ae52:	4622      	mov	r2, r4
 801ae54:	210a      	movs	r1, #10
 801ae56:	4628      	mov	r0, r5
 801ae58:	f000 f95a 	bl	801b110 <__swbuf_r>
 801ae5c:	3001      	adds	r0, #1
 801ae5e:	d011      	beq.n	801ae84 <_puts_r+0x84>
 801ae60:	250a      	movs	r5, #10
 801ae62:	e011      	b.n	801ae88 <_puts_r+0x88>
 801ae64:	4b1b      	ldr	r3, [pc, #108]	; (801aed4 <_puts_r+0xd4>)
 801ae66:	429c      	cmp	r4, r3
 801ae68:	d101      	bne.n	801ae6e <_puts_r+0x6e>
 801ae6a:	68ac      	ldr	r4, [r5, #8]
 801ae6c:	e7da      	b.n	801ae24 <_puts_r+0x24>
 801ae6e:	4b1a      	ldr	r3, [pc, #104]	; (801aed8 <_puts_r+0xd8>)
 801ae70:	429c      	cmp	r4, r3
 801ae72:	bf08      	it	eq
 801ae74:	68ec      	ldreq	r4, [r5, #12]
 801ae76:	e7d5      	b.n	801ae24 <_puts_r+0x24>
 801ae78:	4621      	mov	r1, r4
 801ae7a:	4628      	mov	r0, r5
 801ae7c:	f000 f99a 	bl	801b1b4 <__swsetup_r>
 801ae80:	2800      	cmp	r0, #0
 801ae82:	d0dd      	beq.n	801ae40 <_puts_r+0x40>
 801ae84:	f04f 35ff 	mov.w	r5, #4294967295
 801ae88:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801ae8a:	07da      	lsls	r2, r3, #31
 801ae8c:	d405      	bmi.n	801ae9a <_puts_r+0x9a>
 801ae8e:	89a3      	ldrh	r3, [r4, #12]
 801ae90:	059b      	lsls	r3, r3, #22
 801ae92:	d402      	bmi.n	801ae9a <_puts_r+0x9a>
 801ae94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ae96:	f001 fa65 	bl	801c364 <__retarget_lock_release_recursive>
 801ae9a:	4628      	mov	r0, r5
 801ae9c:	bd70      	pop	{r4, r5, r6, pc}
 801ae9e:	2b00      	cmp	r3, #0
 801aea0:	da04      	bge.n	801aeac <_puts_r+0xac>
 801aea2:	69a2      	ldr	r2, [r4, #24]
 801aea4:	429a      	cmp	r2, r3
 801aea6:	dc06      	bgt.n	801aeb6 <_puts_r+0xb6>
 801aea8:	290a      	cmp	r1, #10
 801aeaa:	d004      	beq.n	801aeb6 <_puts_r+0xb6>
 801aeac:	6823      	ldr	r3, [r4, #0]
 801aeae:	1c5a      	adds	r2, r3, #1
 801aeb0:	6022      	str	r2, [r4, #0]
 801aeb2:	7019      	strb	r1, [r3, #0]
 801aeb4:	e7c5      	b.n	801ae42 <_puts_r+0x42>
 801aeb6:	4622      	mov	r2, r4
 801aeb8:	4628      	mov	r0, r5
 801aeba:	f000 f929 	bl	801b110 <__swbuf_r>
 801aebe:	3001      	adds	r0, #1
 801aec0:	d1bf      	bne.n	801ae42 <_puts_r+0x42>
 801aec2:	e7df      	b.n	801ae84 <_puts_r+0x84>
 801aec4:	6823      	ldr	r3, [r4, #0]
 801aec6:	250a      	movs	r5, #10
 801aec8:	1c5a      	adds	r2, r3, #1
 801aeca:	6022      	str	r2, [r4, #0]
 801aecc:	701d      	strb	r5, [r3, #0]
 801aece:	e7db      	b.n	801ae88 <_puts_r+0x88>
 801aed0:	0806cb10 	.word	0x0806cb10
 801aed4:	0806cb30 	.word	0x0806cb30
 801aed8:	0806caf0 	.word	0x0806caf0

0801aedc <puts>:
 801aedc:	4b02      	ldr	r3, [pc, #8]	; (801aee8 <puts+0xc>)
 801aede:	4601      	mov	r1, r0
 801aee0:	6818      	ldr	r0, [r3, #0]
 801aee2:	f7ff bf8d 	b.w	801ae00 <_puts_r>
 801aee6:	bf00      	nop
 801aee8:	200000c8 	.word	0x200000c8

0801aeec <rand>:
 801aeec:	4b16      	ldr	r3, [pc, #88]	; (801af48 <rand+0x5c>)
 801aeee:	b510      	push	{r4, lr}
 801aef0:	681c      	ldr	r4, [r3, #0]
 801aef2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801aef4:	b9b3      	cbnz	r3, 801af24 <rand+0x38>
 801aef6:	2018      	movs	r0, #24
 801aef8:	f7ff f9dc 	bl	801a2b4 <malloc>
 801aefc:	63a0      	str	r0, [r4, #56]	; 0x38
 801aefe:	b928      	cbnz	r0, 801af0c <rand+0x20>
 801af00:	4602      	mov	r2, r0
 801af02:	4b12      	ldr	r3, [pc, #72]	; (801af4c <rand+0x60>)
 801af04:	4812      	ldr	r0, [pc, #72]	; (801af50 <rand+0x64>)
 801af06:	214e      	movs	r1, #78	; 0x4e
 801af08:	f000 f9c2 	bl	801b290 <__assert_func>
 801af0c:	4a11      	ldr	r2, [pc, #68]	; (801af54 <rand+0x68>)
 801af0e:	4b12      	ldr	r3, [pc, #72]	; (801af58 <rand+0x6c>)
 801af10:	e9c0 2300 	strd	r2, r3, [r0]
 801af14:	4b11      	ldr	r3, [pc, #68]	; (801af5c <rand+0x70>)
 801af16:	6083      	str	r3, [r0, #8]
 801af18:	230b      	movs	r3, #11
 801af1a:	8183      	strh	r3, [r0, #12]
 801af1c:	2201      	movs	r2, #1
 801af1e:	2300      	movs	r3, #0
 801af20:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801af24:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 801af26:	4a0e      	ldr	r2, [pc, #56]	; (801af60 <rand+0x74>)
 801af28:	6920      	ldr	r0, [r4, #16]
 801af2a:	6963      	ldr	r3, [r4, #20]
 801af2c:	490d      	ldr	r1, [pc, #52]	; (801af64 <rand+0x78>)
 801af2e:	4342      	muls	r2, r0
 801af30:	fb01 2203 	mla	r2, r1, r3, r2
 801af34:	fba0 0101 	umull	r0, r1, r0, r1
 801af38:	1c43      	adds	r3, r0, #1
 801af3a:	eb42 0001 	adc.w	r0, r2, r1
 801af3e:	e9c4 3004 	strd	r3, r0, [r4, #16]
 801af42:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801af46:	bd10      	pop	{r4, pc}
 801af48:	200000c8 	.word	0x200000c8
 801af4c:	0806c9c8 	.word	0x0806c9c8
 801af50:	0806c9df 	.word	0x0806c9df
 801af54:	abcd330e 	.word	0xabcd330e
 801af58:	e66d1234 	.word	0xe66d1234
 801af5c:	0005deec 	.word	0x0005deec
 801af60:	5851f42d 	.word	0x5851f42d
 801af64:	4c957f2d 	.word	0x4c957f2d

0801af68 <_sbrk_r>:
 801af68:	b538      	push	{r3, r4, r5, lr}
 801af6a:	4d06      	ldr	r5, [pc, #24]	; (801af84 <_sbrk_r+0x1c>)
 801af6c:	2300      	movs	r3, #0
 801af6e:	4604      	mov	r4, r0
 801af70:	4608      	mov	r0, r1
 801af72:	602b      	str	r3, [r5, #0]
 801af74:	f7e8 fe84 	bl	8003c80 <_sbrk>
 801af78:	1c43      	adds	r3, r0, #1
 801af7a:	d102      	bne.n	801af82 <_sbrk_r+0x1a>
 801af7c:	682b      	ldr	r3, [r5, #0]
 801af7e:	b103      	cbz	r3, 801af82 <_sbrk_r+0x1a>
 801af80:	6023      	str	r3, [r4, #0]
 801af82:	bd38      	pop	{r3, r4, r5, pc}
 801af84:	20013e7c 	.word	0x20013e7c

0801af88 <strcpy>:
 801af88:	4603      	mov	r3, r0
 801af8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801af8e:	f803 2b01 	strb.w	r2, [r3], #1
 801af92:	2a00      	cmp	r2, #0
 801af94:	d1f9      	bne.n	801af8a <strcpy+0x2>
 801af96:	4770      	bx	lr

0801af98 <strncmp>:
 801af98:	b510      	push	{r4, lr}
 801af9a:	b17a      	cbz	r2, 801afbc <strncmp+0x24>
 801af9c:	4603      	mov	r3, r0
 801af9e:	3901      	subs	r1, #1
 801afa0:	1884      	adds	r4, r0, r2
 801afa2:	f813 0b01 	ldrb.w	r0, [r3], #1
 801afa6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801afaa:	4290      	cmp	r0, r2
 801afac:	d101      	bne.n	801afb2 <strncmp+0x1a>
 801afae:	42a3      	cmp	r3, r4
 801afb0:	d101      	bne.n	801afb6 <strncmp+0x1e>
 801afb2:	1a80      	subs	r0, r0, r2
 801afb4:	bd10      	pop	{r4, pc}
 801afb6:	2800      	cmp	r0, #0
 801afb8:	d1f3      	bne.n	801afa2 <strncmp+0xa>
 801afba:	e7fa      	b.n	801afb2 <strncmp+0x1a>
 801afbc:	4610      	mov	r0, r2
 801afbe:	e7f9      	b.n	801afb4 <strncmp+0x1c>

0801afc0 <strncpy>:
 801afc0:	b510      	push	{r4, lr}
 801afc2:	3901      	subs	r1, #1
 801afc4:	4603      	mov	r3, r0
 801afc6:	b132      	cbz	r2, 801afd6 <strncpy+0x16>
 801afc8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801afcc:	f803 4b01 	strb.w	r4, [r3], #1
 801afd0:	3a01      	subs	r2, #1
 801afd2:	2c00      	cmp	r4, #0
 801afd4:	d1f7      	bne.n	801afc6 <strncpy+0x6>
 801afd6:	441a      	add	r2, r3
 801afd8:	2100      	movs	r1, #0
 801afda:	4293      	cmp	r3, r2
 801afdc:	d100      	bne.n	801afe0 <strncpy+0x20>
 801afde:	bd10      	pop	{r4, pc}
 801afe0:	f803 1b01 	strb.w	r1, [r3], #1
 801afe4:	e7f9      	b.n	801afda <strncpy+0x1a>
	...

0801afe8 <_strtoul_l.constprop.0>:
 801afe8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801afec:	4f36      	ldr	r7, [pc, #216]	; (801b0c8 <_strtoul_l.constprop.0+0xe0>)
 801afee:	4686      	mov	lr, r0
 801aff0:	460d      	mov	r5, r1
 801aff2:	4628      	mov	r0, r5
 801aff4:	f815 4b01 	ldrb.w	r4, [r5], #1
 801aff8:	5de6      	ldrb	r6, [r4, r7]
 801affa:	f016 0608 	ands.w	r6, r6, #8
 801affe:	d1f8      	bne.n	801aff2 <_strtoul_l.constprop.0+0xa>
 801b000:	2c2d      	cmp	r4, #45	; 0x2d
 801b002:	d12f      	bne.n	801b064 <_strtoul_l.constprop.0+0x7c>
 801b004:	782c      	ldrb	r4, [r5, #0]
 801b006:	2601      	movs	r6, #1
 801b008:	1c85      	adds	r5, r0, #2
 801b00a:	2b00      	cmp	r3, #0
 801b00c:	d057      	beq.n	801b0be <_strtoul_l.constprop.0+0xd6>
 801b00e:	2b10      	cmp	r3, #16
 801b010:	d109      	bne.n	801b026 <_strtoul_l.constprop.0+0x3e>
 801b012:	2c30      	cmp	r4, #48	; 0x30
 801b014:	d107      	bne.n	801b026 <_strtoul_l.constprop.0+0x3e>
 801b016:	7828      	ldrb	r0, [r5, #0]
 801b018:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 801b01c:	2858      	cmp	r0, #88	; 0x58
 801b01e:	d149      	bne.n	801b0b4 <_strtoul_l.constprop.0+0xcc>
 801b020:	786c      	ldrb	r4, [r5, #1]
 801b022:	2310      	movs	r3, #16
 801b024:	3502      	adds	r5, #2
 801b026:	f04f 38ff 	mov.w	r8, #4294967295
 801b02a:	2700      	movs	r7, #0
 801b02c:	fbb8 f8f3 	udiv	r8, r8, r3
 801b030:	fb03 f908 	mul.w	r9, r3, r8
 801b034:	ea6f 0909 	mvn.w	r9, r9
 801b038:	4638      	mov	r0, r7
 801b03a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801b03e:	f1bc 0f09 	cmp.w	ip, #9
 801b042:	d814      	bhi.n	801b06e <_strtoul_l.constprop.0+0x86>
 801b044:	4664      	mov	r4, ip
 801b046:	42a3      	cmp	r3, r4
 801b048:	dd22      	ble.n	801b090 <_strtoul_l.constprop.0+0xa8>
 801b04a:	2f00      	cmp	r7, #0
 801b04c:	db1d      	blt.n	801b08a <_strtoul_l.constprop.0+0xa2>
 801b04e:	4580      	cmp	r8, r0
 801b050:	d31b      	bcc.n	801b08a <_strtoul_l.constprop.0+0xa2>
 801b052:	d101      	bne.n	801b058 <_strtoul_l.constprop.0+0x70>
 801b054:	45a1      	cmp	r9, r4
 801b056:	db18      	blt.n	801b08a <_strtoul_l.constprop.0+0xa2>
 801b058:	fb00 4003 	mla	r0, r0, r3, r4
 801b05c:	2701      	movs	r7, #1
 801b05e:	f815 4b01 	ldrb.w	r4, [r5], #1
 801b062:	e7ea      	b.n	801b03a <_strtoul_l.constprop.0+0x52>
 801b064:	2c2b      	cmp	r4, #43	; 0x2b
 801b066:	bf04      	itt	eq
 801b068:	782c      	ldrbeq	r4, [r5, #0]
 801b06a:	1c85      	addeq	r5, r0, #2
 801b06c:	e7cd      	b.n	801b00a <_strtoul_l.constprop.0+0x22>
 801b06e:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801b072:	f1bc 0f19 	cmp.w	ip, #25
 801b076:	d801      	bhi.n	801b07c <_strtoul_l.constprop.0+0x94>
 801b078:	3c37      	subs	r4, #55	; 0x37
 801b07a:	e7e4      	b.n	801b046 <_strtoul_l.constprop.0+0x5e>
 801b07c:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801b080:	f1bc 0f19 	cmp.w	ip, #25
 801b084:	d804      	bhi.n	801b090 <_strtoul_l.constprop.0+0xa8>
 801b086:	3c57      	subs	r4, #87	; 0x57
 801b088:	e7dd      	b.n	801b046 <_strtoul_l.constprop.0+0x5e>
 801b08a:	f04f 37ff 	mov.w	r7, #4294967295
 801b08e:	e7e6      	b.n	801b05e <_strtoul_l.constprop.0+0x76>
 801b090:	2f00      	cmp	r7, #0
 801b092:	da07      	bge.n	801b0a4 <_strtoul_l.constprop.0+0xbc>
 801b094:	2322      	movs	r3, #34	; 0x22
 801b096:	f8ce 3000 	str.w	r3, [lr]
 801b09a:	f04f 30ff 	mov.w	r0, #4294967295
 801b09e:	b932      	cbnz	r2, 801b0ae <_strtoul_l.constprop.0+0xc6>
 801b0a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b0a4:	b106      	cbz	r6, 801b0a8 <_strtoul_l.constprop.0+0xc0>
 801b0a6:	4240      	negs	r0, r0
 801b0a8:	2a00      	cmp	r2, #0
 801b0aa:	d0f9      	beq.n	801b0a0 <_strtoul_l.constprop.0+0xb8>
 801b0ac:	b107      	cbz	r7, 801b0b0 <_strtoul_l.constprop.0+0xc8>
 801b0ae:	1e69      	subs	r1, r5, #1
 801b0b0:	6011      	str	r1, [r2, #0]
 801b0b2:	e7f5      	b.n	801b0a0 <_strtoul_l.constprop.0+0xb8>
 801b0b4:	2430      	movs	r4, #48	; 0x30
 801b0b6:	2b00      	cmp	r3, #0
 801b0b8:	d1b5      	bne.n	801b026 <_strtoul_l.constprop.0+0x3e>
 801b0ba:	2308      	movs	r3, #8
 801b0bc:	e7b3      	b.n	801b026 <_strtoul_l.constprop.0+0x3e>
 801b0be:	2c30      	cmp	r4, #48	; 0x30
 801b0c0:	d0a9      	beq.n	801b016 <_strtoul_l.constprop.0+0x2e>
 801b0c2:	230a      	movs	r3, #10
 801b0c4:	e7af      	b.n	801b026 <_strtoul_l.constprop.0+0x3e>
 801b0c6:	bf00      	nop
 801b0c8:	0806c88d 	.word	0x0806c88d

0801b0cc <strtoul>:
 801b0cc:	4613      	mov	r3, r2
 801b0ce:	460a      	mov	r2, r1
 801b0d0:	4601      	mov	r1, r0
 801b0d2:	4802      	ldr	r0, [pc, #8]	; (801b0dc <strtoul+0x10>)
 801b0d4:	6800      	ldr	r0, [r0, #0]
 801b0d6:	f7ff bf87 	b.w	801afe8 <_strtoul_l.constprop.0>
 801b0da:	bf00      	nop
 801b0dc:	200000c8 	.word	0x200000c8

0801b0e0 <viprintf>:
 801b0e0:	b513      	push	{r0, r1, r4, lr}
 801b0e2:	460b      	mov	r3, r1
 801b0e4:	4909      	ldr	r1, [pc, #36]	; (801b10c <viprintf+0x2c>)
 801b0e6:	680c      	ldr	r4, [r1, #0]
 801b0e8:	4602      	mov	r2, r0
 801b0ea:	b144      	cbz	r4, 801b0fe <viprintf+0x1e>
 801b0ec:	69a1      	ldr	r1, [r4, #24]
 801b0ee:	b931      	cbnz	r1, 801b0fe <viprintf+0x1e>
 801b0f0:	e9cd 0300 	strd	r0, r3, [sp]
 801b0f4:	4620      	mov	r0, r4
 801b0f6:	f001 f87f 	bl	801c1f8 <__sinit>
 801b0fa:	e9dd 2300 	ldrd	r2, r3, [sp]
 801b0fe:	68a1      	ldr	r1, [r4, #8]
 801b100:	4620      	mov	r0, r4
 801b102:	b002      	add	sp, #8
 801b104:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b108:	f001 bd4c 	b.w	801cba4 <_vfiprintf_r>
 801b10c:	200000c8 	.word	0x200000c8

0801b110 <__swbuf_r>:
 801b110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b112:	460e      	mov	r6, r1
 801b114:	4614      	mov	r4, r2
 801b116:	4605      	mov	r5, r0
 801b118:	b118      	cbz	r0, 801b122 <__swbuf_r+0x12>
 801b11a:	6983      	ldr	r3, [r0, #24]
 801b11c:	b90b      	cbnz	r3, 801b122 <__swbuf_r+0x12>
 801b11e:	f001 f86b 	bl	801c1f8 <__sinit>
 801b122:	4b21      	ldr	r3, [pc, #132]	; (801b1a8 <__swbuf_r+0x98>)
 801b124:	429c      	cmp	r4, r3
 801b126:	d12b      	bne.n	801b180 <__swbuf_r+0x70>
 801b128:	686c      	ldr	r4, [r5, #4]
 801b12a:	69a3      	ldr	r3, [r4, #24]
 801b12c:	60a3      	str	r3, [r4, #8]
 801b12e:	89a3      	ldrh	r3, [r4, #12]
 801b130:	071a      	lsls	r2, r3, #28
 801b132:	d52f      	bpl.n	801b194 <__swbuf_r+0x84>
 801b134:	6923      	ldr	r3, [r4, #16]
 801b136:	b36b      	cbz	r3, 801b194 <__swbuf_r+0x84>
 801b138:	6923      	ldr	r3, [r4, #16]
 801b13a:	6820      	ldr	r0, [r4, #0]
 801b13c:	1ac0      	subs	r0, r0, r3
 801b13e:	6963      	ldr	r3, [r4, #20]
 801b140:	b2f6      	uxtb	r6, r6
 801b142:	4283      	cmp	r3, r0
 801b144:	4637      	mov	r7, r6
 801b146:	dc04      	bgt.n	801b152 <__swbuf_r+0x42>
 801b148:	4621      	mov	r1, r4
 801b14a:	4628      	mov	r0, r5
 801b14c:	f000 ffc0 	bl	801c0d0 <_fflush_r>
 801b150:	bb30      	cbnz	r0, 801b1a0 <__swbuf_r+0x90>
 801b152:	68a3      	ldr	r3, [r4, #8]
 801b154:	3b01      	subs	r3, #1
 801b156:	60a3      	str	r3, [r4, #8]
 801b158:	6823      	ldr	r3, [r4, #0]
 801b15a:	1c5a      	adds	r2, r3, #1
 801b15c:	6022      	str	r2, [r4, #0]
 801b15e:	701e      	strb	r6, [r3, #0]
 801b160:	6963      	ldr	r3, [r4, #20]
 801b162:	3001      	adds	r0, #1
 801b164:	4283      	cmp	r3, r0
 801b166:	d004      	beq.n	801b172 <__swbuf_r+0x62>
 801b168:	89a3      	ldrh	r3, [r4, #12]
 801b16a:	07db      	lsls	r3, r3, #31
 801b16c:	d506      	bpl.n	801b17c <__swbuf_r+0x6c>
 801b16e:	2e0a      	cmp	r6, #10
 801b170:	d104      	bne.n	801b17c <__swbuf_r+0x6c>
 801b172:	4621      	mov	r1, r4
 801b174:	4628      	mov	r0, r5
 801b176:	f000 ffab 	bl	801c0d0 <_fflush_r>
 801b17a:	b988      	cbnz	r0, 801b1a0 <__swbuf_r+0x90>
 801b17c:	4638      	mov	r0, r7
 801b17e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b180:	4b0a      	ldr	r3, [pc, #40]	; (801b1ac <__swbuf_r+0x9c>)
 801b182:	429c      	cmp	r4, r3
 801b184:	d101      	bne.n	801b18a <__swbuf_r+0x7a>
 801b186:	68ac      	ldr	r4, [r5, #8]
 801b188:	e7cf      	b.n	801b12a <__swbuf_r+0x1a>
 801b18a:	4b09      	ldr	r3, [pc, #36]	; (801b1b0 <__swbuf_r+0xa0>)
 801b18c:	429c      	cmp	r4, r3
 801b18e:	bf08      	it	eq
 801b190:	68ec      	ldreq	r4, [r5, #12]
 801b192:	e7ca      	b.n	801b12a <__swbuf_r+0x1a>
 801b194:	4621      	mov	r1, r4
 801b196:	4628      	mov	r0, r5
 801b198:	f000 f80c 	bl	801b1b4 <__swsetup_r>
 801b19c:	2800      	cmp	r0, #0
 801b19e:	d0cb      	beq.n	801b138 <__swbuf_r+0x28>
 801b1a0:	f04f 37ff 	mov.w	r7, #4294967295
 801b1a4:	e7ea      	b.n	801b17c <__swbuf_r+0x6c>
 801b1a6:	bf00      	nop
 801b1a8:	0806cb10 	.word	0x0806cb10
 801b1ac:	0806cb30 	.word	0x0806cb30
 801b1b0:	0806caf0 	.word	0x0806caf0

0801b1b4 <__swsetup_r>:
 801b1b4:	4b32      	ldr	r3, [pc, #200]	; (801b280 <__swsetup_r+0xcc>)
 801b1b6:	b570      	push	{r4, r5, r6, lr}
 801b1b8:	681d      	ldr	r5, [r3, #0]
 801b1ba:	4606      	mov	r6, r0
 801b1bc:	460c      	mov	r4, r1
 801b1be:	b125      	cbz	r5, 801b1ca <__swsetup_r+0x16>
 801b1c0:	69ab      	ldr	r3, [r5, #24]
 801b1c2:	b913      	cbnz	r3, 801b1ca <__swsetup_r+0x16>
 801b1c4:	4628      	mov	r0, r5
 801b1c6:	f001 f817 	bl	801c1f8 <__sinit>
 801b1ca:	4b2e      	ldr	r3, [pc, #184]	; (801b284 <__swsetup_r+0xd0>)
 801b1cc:	429c      	cmp	r4, r3
 801b1ce:	d10f      	bne.n	801b1f0 <__swsetup_r+0x3c>
 801b1d0:	686c      	ldr	r4, [r5, #4]
 801b1d2:	89a3      	ldrh	r3, [r4, #12]
 801b1d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801b1d8:	0719      	lsls	r1, r3, #28
 801b1da:	d42c      	bmi.n	801b236 <__swsetup_r+0x82>
 801b1dc:	06dd      	lsls	r5, r3, #27
 801b1de:	d411      	bmi.n	801b204 <__swsetup_r+0x50>
 801b1e0:	2309      	movs	r3, #9
 801b1e2:	6033      	str	r3, [r6, #0]
 801b1e4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801b1e8:	81a3      	strh	r3, [r4, #12]
 801b1ea:	f04f 30ff 	mov.w	r0, #4294967295
 801b1ee:	e03e      	b.n	801b26e <__swsetup_r+0xba>
 801b1f0:	4b25      	ldr	r3, [pc, #148]	; (801b288 <__swsetup_r+0xd4>)
 801b1f2:	429c      	cmp	r4, r3
 801b1f4:	d101      	bne.n	801b1fa <__swsetup_r+0x46>
 801b1f6:	68ac      	ldr	r4, [r5, #8]
 801b1f8:	e7eb      	b.n	801b1d2 <__swsetup_r+0x1e>
 801b1fa:	4b24      	ldr	r3, [pc, #144]	; (801b28c <__swsetup_r+0xd8>)
 801b1fc:	429c      	cmp	r4, r3
 801b1fe:	bf08      	it	eq
 801b200:	68ec      	ldreq	r4, [r5, #12]
 801b202:	e7e6      	b.n	801b1d2 <__swsetup_r+0x1e>
 801b204:	0758      	lsls	r0, r3, #29
 801b206:	d512      	bpl.n	801b22e <__swsetup_r+0x7a>
 801b208:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b20a:	b141      	cbz	r1, 801b21e <__swsetup_r+0x6a>
 801b20c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b210:	4299      	cmp	r1, r3
 801b212:	d002      	beq.n	801b21a <__swsetup_r+0x66>
 801b214:	4630      	mov	r0, r6
 801b216:	f7ff f891 	bl	801a33c <_free_r>
 801b21a:	2300      	movs	r3, #0
 801b21c:	6363      	str	r3, [r4, #52]	; 0x34
 801b21e:	89a3      	ldrh	r3, [r4, #12]
 801b220:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801b224:	81a3      	strh	r3, [r4, #12]
 801b226:	2300      	movs	r3, #0
 801b228:	6063      	str	r3, [r4, #4]
 801b22a:	6923      	ldr	r3, [r4, #16]
 801b22c:	6023      	str	r3, [r4, #0]
 801b22e:	89a3      	ldrh	r3, [r4, #12]
 801b230:	f043 0308 	orr.w	r3, r3, #8
 801b234:	81a3      	strh	r3, [r4, #12]
 801b236:	6923      	ldr	r3, [r4, #16]
 801b238:	b94b      	cbnz	r3, 801b24e <__swsetup_r+0x9a>
 801b23a:	89a3      	ldrh	r3, [r4, #12]
 801b23c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801b240:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801b244:	d003      	beq.n	801b24e <__swsetup_r+0x9a>
 801b246:	4621      	mov	r1, r4
 801b248:	4630      	mov	r0, r6
 801b24a:	f001 f8b1 	bl	801c3b0 <__smakebuf_r>
 801b24e:	89a0      	ldrh	r0, [r4, #12]
 801b250:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801b254:	f010 0301 	ands.w	r3, r0, #1
 801b258:	d00a      	beq.n	801b270 <__swsetup_r+0xbc>
 801b25a:	2300      	movs	r3, #0
 801b25c:	60a3      	str	r3, [r4, #8]
 801b25e:	6963      	ldr	r3, [r4, #20]
 801b260:	425b      	negs	r3, r3
 801b262:	61a3      	str	r3, [r4, #24]
 801b264:	6923      	ldr	r3, [r4, #16]
 801b266:	b943      	cbnz	r3, 801b27a <__swsetup_r+0xc6>
 801b268:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801b26c:	d1ba      	bne.n	801b1e4 <__swsetup_r+0x30>
 801b26e:	bd70      	pop	{r4, r5, r6, pc}
 801b270:	0781      	lsls	r1, r0, #30
 801b272:	bf58      	it	pl
 801b274:	6963      	ldrpl	r3, [r4, #20]
 801b276:	60a3      	str	r3, [r4, #8]
 801b278:	e7f4      	b.n	801b264 <__swsetup_r+0xb0>
 801b27a:	2000      	movs	r0, #0
 801b27c:	e7f7      	b.n	801b26e <__swsetup_r+0xba>
 801b27e:	bf00      	nop
 801b280:	200000c8 	.word	0x200000c8
 801b284:	0806cb10 	.word	0x0806cb10
 801b288:	0806cb30 	.word	0x0806cb30
 801b28c:	0806caf0 	.word	0x0806caf0

0801b290 <__assert_func>:
 801b290:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801b292:	4614      	mov	r4, r2
 801b294:	461a      	mov	r2, r3
 801b296:	4b09      	ldr	r3, [pc, #36]	; (801b2bc <__assert_func+0x2c>)
 801b298:	681b      	ldr	r3, [r3, #0]
 801b29a:	4605      	mov	r5, r0
 801b29c:	68d8      	ldr	r0, [r3, #12]
 801b29e:	b14c      	cbz	r4, 801b2b4 <__assert_func+0x24>
 801b2a0:	4b07      	ldr	r3, [pc, #28]	; (801b2c0 <__assert_func+0x30>)
 801b2a2:	9100      	str	r1, [sp, #0]
 801b2a4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801b2a8:	4906      	ldr	r1, [pc, #24]	; (801b2c4 <__assert_func+0x34>)
 801b2aa:	462b      	mov	r3, r5
 801b2ac:	f001 f822 	bl	801c2f4 <fiprintf>
 801b2b0:	f001 fdfe 	bl	801ceb0 <abort>
 801b2b4:	4b04      	ldr	r3, [pc, #16]	; (801b2c8 <__assert_func+0x38>)
 801b2b6:	461c      	mov	r4, r3
 801b2b8:	e7f3      	b.n	801b2a2 <__assert_func+0x12>
 801b2ba:	bf00      	nop
 801b2bc:	200000c8 	.word	0x200000c8
 801b2c0:	0806ca3a 	.word	0x0806ca3a
 801b2c4:	0806ca47 	.word	0x0806ca47
 801b2c8:	0806ca75 	.word	0x0806ca75

0801b2cc <quorem>:
 801b2cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b2d0:	6903      	ldr	r3, [r0, #16]
 801b2d2:	690c      	ldr	r4, [r1, #16]
 801b2d4:	42a3      	cmp	r3, r4
 801b2d6:	4607      	mov	r7, r0
 801b2d8:	f2c0 8081 	blt.w	801b3de <quorem+0x112>
 801b2dc:	3c01      	subs	r4, #1
 801b2de:	f101 0814 	add.w	r8, r1, #20
 801b2e2:	f100 0514 	add.w	r5, r0, #20
 801b2e6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801b2ea:	9301      	str	r3, [sp, #4]
 801b2ec:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801b2f0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801b2f4:	3301      	adds	r3, #1
 801b2f6:	429a      	cmp	r2, r3
 801b2f8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801b2fc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801b300:	fbb2 f6f3 	udiv	r6, r2, r3
 801b304:	d331      	bcc.n	801b36a <quorem+0x9e>
 801b306:	f04f 0e00 	mov.w	lr, #0
 801b30a:	4640      	mov	r0, r8
 801b30c:	46ac      	mov	ip, r5
 801b30e:	46f2      	mov	sl, lr
 801b310:	f850 2b04 	ldr.w	r2, [r0], #4
 801b314:	b293      	uxth	r3, r2
 801b316:	fb06 e303 	mla	r3, r6, r3, lr
 801b31a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801b31e:	b29b      	uxth	r3, r3
 801b320:	ebaa 0303 	sub.w	r3, sl, r3
 801b324:	f8dc a000 	ldr.w	sl, [ip]
 801b328:	0c12      	lsrs	r2, r2, #16
 801b32a:	fa13 f38a 	uxtah	r3, r3, sl
 801b32e:	fb06 e202 	mla	r2, r6, r2, lr
 801b332:	9300      	str	r3, [sp, #0]
 801b334:	9b00      	ldr	r3, [sp, #0]
 801b336:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801b33a:	b292      	uxth	r2, r2
 801b33c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801b340:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801b344:	f8bd 3000 	ldrh.w	r3, [sp]
 801b348:	4581      	cmp	r9, r0
 801b34a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801b34e:	f84c 3b04 	str.w	r3, [ip], #4
 801b352:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801b356:	d2db      	bcs.n	801b310 <quorem+0x44>
 801b358:	f855 300b 	ldr.w	r3, [r5, fp]
 801b35c:	b92b      	cbnz	r3, 801b36a <quorem+0x9e>
 801b35e:	9b01      	ldr	r3, [sp, #4]
 801b360:	3b04      	subs	r3, #4
 801b362:	429d      	cmp	r5, r3
 801b364:	461a      	mov	r2, r3
 801b366:	d32e      	bcc.n	801b3c6 <quorem+0xfa>
 801b368:	613c      	str	r4, [r7, #16]
 801b36a:	4638      	mov	r0, r7
 801b36c:	f001 faee 	bl	801c94c <__mcmp>
 801b370:	2800      	cmp	r0, #0
 801b372:	db24      	blt.n	801b3be <quorem+0xf2>
 801b374:	3601      	adds	r6, #1
 801b376:	4628      	mov	r0, r5
 801b378:	f04f 0c00 	mov.w	ip, #0
 801b37c:	f858 2b04 	ldr.w	r2, [r8], #4
 801b380:	f8d0 e000 	ldr.w	lr, [r0]
 801b384:	b293      	uxth	r3, r2
 801b386:	ebac 0303 	sub.w	r3, ip, r3
 801b38a:	0c12      	lsrs	r2, r2, #16
 801b38c:	fa13 f38e 	uxtah	r3, r3, lr
 801b390:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801b394:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801b398:	b29b      	uxth	r3, r3
 801b39a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801b39e:	45c1      	cmp	r9, r8
 801b3a0:	f840 3b04 	str.w	r3, [r0], #4
 801b3a4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801b3a8:	d2e8      	bcs.n	801b37c <quorem+0xb0>
 801b3aa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801b3ae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801b3b2:	b922      	cbnz	r2, 801b3be <quorem+0xf2>
 801b3b4:	3b04      	subs	r3, #4
 801b3b6:	429d      	cmp	r5, r3
 801b3b8:	461a      	mov	r2, r3
 801b3ba:	d30a      	bcc.n	801b3d2 <quorem+0x106>
 801b3bc:	613c      	str	r4, [r7, #16]
 801b3be:	4630      	mov	r0, r6
 801b3c0:	b003      	add	sp, #12
 801b3c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b3c6:	6812      	ldr	r2, [r2, #0]
 801b3c8:	3b04      	subs	r3, #4
 801b3ca:	2a00      	cmp	r2, #0
 801b3cc:	d1cc      	bne.n	801b368 <quorem+0x9c>
 801b3ce:	3c01      	subs	r4, #1
 801b3d0:	e7c7      	b.n	801b362 <quorem+0x96>
 801b3d2:	6812      	ldr	r2, [r2, #0]
 801b3d4:	3b04      	subs	r3, #4
 801b3d6:	2a00      	cmp	r2, #0
 801b3d8:	d1f0      	bne.n	801b3bc <quorem+0xf0>
 801b3da:	3c01      	subs	r4, #1
 801b3dc:	e7eb      	b.n	801b3b6 <quorem+0xea>
 801b3de:	2000      	movs	r0, #0
 801b3e0:	e7ee      	b.n	801b3c0 <quorem+0xf4>
 801b3e2:	0000      	movs	r0, r0
 801b3e4:	0000      	movs	r0, r0
	...

0801b3e8 <_dtoa_r>:
 801b3e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b3ec:	ed2d 8b04 	vpush	{d8-d9}
 801b3f0:	ec57 6b10 	vmov	r6, r7, d0
 801b3f4:	b093      	sub	sp, #76	; 0x4c
 801b3f6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801b3f8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801b3fc:	9106      	str	r1, [sp, #24]
 801b3fe:	ee10 aa10 	vmov	sl, s0
 801b402:	4604      	mov	r4, r0
 801b404:	9209      	str	r2, [sp, #36]	; 0x24
 801b406:	930c      	str	r3, [sp, #48]	; 0x30
 801b408:	46bb      	mov	fp, r7
 801b40a:	b975      	cbnz	r5, 801b42a <_dtoa_r+0x42>
 801b40c:	2010      	movs	r0, #16
 801b40e:	f7fe ff51 	bl	801a2b4 <malloc>
 801b412:	4602      	mov	r2, r0
 801b414:	6260      	str	r0, [r4, #36]	; 0x24
 801b416:	b920      	cbnz	r0, 801b422 <_dtoa_r+0x3a>
 801b418:	4ba7      	ldr	r3, [pc, #668]	; (801b6b8 <_dtoa_r+0x2d0>)
 801b41a:	21ea      	movs	r1, #234	; 0xea
 801b41c:	48a7      	ldr	r0, [pc, #668]	; (801b6bc <_dtoa_r+0x2d4>)
 801b41e:	f7ff ff37 	bl	801b290 <__assert_func>
 801b422:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801b426:	6005      	str	r5, [r0, #0]
 801b428:	60c5      	str	r5, [r0, #12]
 801b42a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b42c:	6819      	ldr	r1, [r3, #0]
 801b42e:	b151      	cbz	r1, 801b446 <_dtoa_r+0x5e>
 801b430:	685a      	ldr	r2, [r3, #4]
 801b432:	604a      	str	r2, [r1, #4]
 801b434:	2301      	movs	r3, #1
 801b436:	4093      	lsls	r3, r2
 801b438:	608b      	str	r3, [r1, #8]
 801b43a:	4620      	mov	r0, r4
 801b43c:	f001 f844 	bl	801c4c8 <_Bfree>
 801b440:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b442:	2200      	movs	r2, #0
 801b444:	601a      	str	r2, [r3, #0]
 801b446:	1e3b      	subs	r3, r7, #0
 801b448:	bfaa      	itet	ge
 801b44a:	2300      	movge	r3, #0
 801b44c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 801b450:	f8c8 3000 	strge.w	r3, [r8]
 801b454:	4b9a      	ldr	r3, [pc, #616]	; (801b6c0 <_dtoa_r+0x2d8>)
 801b456:	bfbc      	itt	lt
 801b458:	2201      	movlt	r2, #1
 801b45a:	f8c8 2000 	strlt.w	r2, [r8]
 801b45e:	ea33 030b 	bics.w	r3, r3, fp
 801b462:	d11b      	bne.n	801b49c <_dtoa_r+0xb4>
 801b464:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801b466:	f242 730f 	movw	r3, #9999	; 0x270f
 801b46a:	6013      	str	r3, [r2, #0]
 801b46c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801b470:	4333      	orrs	r3, r6
 801b472:	f000 8592 	beq.w	801bf9a <_dtoa_r+0xbb2>
 801b476:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801b478:	b963      	cbnz	r3, 801b494 <_dtoa_r+0xac>
 801b47a:	4b92      	ldr	r3, [pc, #584]	; (801b6c4 <_dtoa_r+0x2dc>)
 801b47c:	e022      	b.n	801b4c4 <_dtoa_r+0xdc>
 801b47e:	4b92      	ldr	r3, [pc, #584]	; (801b6c8 <_dtoa_r+0x2e0>)
 801b480:	9301      	str	r3, [sp, #4]
 801b482:	3308      	adds	r3, #8
 801b484:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801b486:	6013      	str	r3, [r2, #0]
 801b488:	9801      	ldr	r0, [sp, #4]
 801b48a:	b013      	add	sp, #76	; 0x4c
 801b48c:	ecbd 8b04 	vpop	{d8-d9}
 801b490:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b494:	4b8b      	ldr	r3, [pc, #556]	; (801b6c4 <_dtoa_r+0x2dc>)
 801b496:	9301      	str	r3, [sp, #4]
 801b498:	3303      	adds	r3, #3
 801b49a:	e7f3      	b.n	801b484 <_dtoa_r+0x9c>
 801b49c:	2200      	movs	r2, #0
 801b49e:	2300      	movs	r3, #0
 801b4a0:	4650      	mov	r0, sl
 801b4a2:	4659      	mov	r1, fp
 801b4a4:	f7e5 fb28 	bl	8000af8 <__aeabi_dcmpeq>
 801b4a8:	ec4b ab19 	vmov	d9, sl, fp
 801b4ac:	4680      	mov	r8, r0
 801b4ae:	b158      	cbz	r0, 801b4c8 <_dtoa_r+0xe0>
 801b4b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801b4b2:	2301      	movs	r3, #1
 801b4b4:	6013      	str	r3, [r2, #0]
 801b4b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801b4b8:	2b00      	cmp	r3, #0
 801b4ba:	f000 856b 	beq.w	801bf94 <_dtoa_r+0xbac>
 801b4be:	4883      	ldr	r0, [pc, #524]	; (801b6cc <_dtoa_r+0x2e4>)
 801b4c0:	6018      	str	r0, [r3, #0]
 801b4c2:	1e43      	subs	r3, r0, #1
 801b4c4:	9301      	str	r3, [sp, #4]
 801b4c6:	e7df      	b.n	801b488 <_dtoa_r+0xa0>
 801b4c8:	ec4b ab10 	vmov	d0, sl, fp
 801b4cc:	aa10      	add	r2, sp, #64	; 0x40
 801b4ce:	a911      	add	r1, sp, #68	; 0x44
 801b4d0:	4620      	mov	r0, r4
 801b4d2:	f001 fae1 	bl	801ca98 <__d2b>
 801b4d6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 801b4da:	ee08 0a10 	vmov	s16, r0
 801b4de:	2d00      	cmp	r5, #0
 801b4e0:	f000 8084 	beq.w	801b5ec <_dtoa_r+0x204>
 801b4e4:	ee19 3a90 	vmov	r3, s19
 801b4e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801b4ec:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 801b4f0:	4656      	mov	r6, sl
 801b4f2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801b4f6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801b4fa:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 801b4fe:	4b74      	ldr	r3, [pc, #464]	; (801b6d0 <_dtoa_r+0x2e8>)
 801b500:	2200      	movs	r2, #0
 801b502:	4630      	mov	r0, r6
 801b504:	4639      	mov	r1, r7
 801b506:	f7e4 fed7 	bl	80002b8 <__aeabi_dsub>
 801b50a:	a365      	add	r3, pc, #404	; (adr r3, 801b6a0 <_dtoa_r+0x2b8>)
 801b50c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b510:	f7e5 f88a 	bl	8000628 <__aeabi_dmul>
 801b514:	a364      	add	r3, pc, #400	; (adr r3, 801b6a8 <_dtoa_r+0x2c0>)
 801b516:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b51a:	f7e4 fecf 	bl	80002bc <__adddf3>
 801b51e:	4606      	mov	r6, r0
 801b520:	4628      	mov	r0, r5
 801b522:	460f      	mov	r7, r1
 801b524:	f7e5 f816 	bl	8000554 <__aeabi_i2d>
 801b528:	a361      	add	r3, pc, #388	; (adr r3, 801b6b0 <_dtoa_r+0x2c8>)
 801b52a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b52e:	f7e5 f87b 	bl	8000628 <__aeabi_dmul>
 801b532:	4602      	mov	r2, r0
 801b534:	460b      	mov	r3, r1
 801b536:	4630      	mov	r0, r6
 801b538:	4639      	mov	r1, r7
 801b53a:	f7e4 febf 	bl	80002bc <__adddf3>
 801b53e:	4606      	mov	r6, r0
 801b540:	460f      	mov	r7, r1
 801b542:	f7e5 fb21 	bl	8000b88 <__aeabi_d2iz>
 801b546:	2200      	movs	r2, #0
 801b548:	9000      	str	r0, [sp, #0]
 801b54a:	2300      	movs	r3, #0
 801b54c:	4630      	mov	r0, r6
 801b54e:	4639      	mov	r1, r7
 801b550:	f7e5 fadc 	bl	8000b0c <__aeabi_dcmplt>
 801b554:	b150      	cbz	r0, 801b56c <_dtoa_r+0x184>
 801b556:	9800      	ldr	r0, [sp, #0]
 801b558:	f7e4 fffc 	bl	8000554 <__aeabi_i2d>
 801b55c:	4632      	mov	r2, r6
 801b55e:	463b      	mov	r3, r7
 801b560:	f7e5 faca 	bl	8000af8 <__aeabi_dcmpeq>
 801b564:	b910      	cbnz	r0, 801b56c <_dtoa_r+0x184>
 801b566:	9b00      	ldr	r3, [sp, #0]
 801b568:	3b01      	subs	r3, #1
 801b56a:	9300      	str	r3, [sp, #0]
 801b56c:	9b00      	ldr	r3, [sp, #0]
 801b56e:	2b16      	cmp	r3, #22
 801b570:	d85a      	bhi.n	801b628 <_dtoa_r+0x240>
 801b572:	9a00      	ldr	r2, [sp, #0]
 801b574:	4b57      	ldr	r3, [pc, #348]	; (801b6d4 <_dtoa_r+0x2ec>)
 801b576:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801b57a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b57e:	ec51 0b19 	vmov	r0, r1, d9
 801b582:	f7e5 fac3 	bl	8000b0c <__aeabi_dcmplt>
 801b586:	2800      	cmp	r0, #0
 801b588:	d050      	beq.n	801b62c <_dtoa_r+0x244>
 801b58a:	9b00      	ldr	r3, [sp, #0]
 801b58c:	3b01      	subs	r3, #1
 801b58e:	9300      	str	r3, [sp, #0]
 801b590:	2300      	movs	r3, #0
 801b592:	930b      	str	r3, [sp, #44]	; 0x2c
 801b594:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b596:	1b5d      	subs	r5, r3, r5
 801b598:	1e6b      	subs	r3, r5, #1
 801b59a:	9305      	str	r3, [sp, #20]
 801b59c:	bf45      	ittet	mi
 801b59e:	f1c5 0301 	rsbmi	r3, r5, #1
 801b5a2:	9304      	strmi	r3, [sp, #16]
 801b5a4:	2300      	movpl	r3, #0
 801b5a6:	2300      	movmi	r3, #0
 801b5a8:	bf4c      	ite	mi
 801b5aa:	9305      	strmi	r3, [sp, #20]
 801b5ac:	9304      	strpl	r3, [sp, #16]
 801b5ae:	9b00      	ldr	r3, [sp, #0]
 801b5b0:	2b00      	cmp	r3, #0
 801b5b2:	db3d      	blt.n	801b630 <_dtoa_r+0x248>
 801b5b4:	9b05      	ldr	r3, [sp, #20]
 801b5b6:	9a00      	ldr	r2, [sp, #0]
 801b5b8:	920a      	str	r2, [sp, #40]	; 0x28
 801b5ba:	4413      	add	r3, r2
 801b5bc:	9305      	str	r3, [sp, #20]
 801b5be:	2300      	movs	r3, #0
 801b5c0:	9307      	str	r3, [sp, #28]
 801b5c2:	9b06      	ldr	r3, [sp, #24]
 801b5c4:	2b09      	cmp	r3, #9
 801b5c6:	f200 8089 	bhi.w	801b6dc <_dtoa_r+0x2f4>
 801b5ca:	2b05      	cmp	r3, #5
 801b5cc:	bfc4      	itt	gt
 801b5ce:	3b04      	subgt	r3, #4
 801b5d0:	9306      	strgt	r3, [sp, #24]
 801b5d2:	9b06      	ldr	r3, [sp, #24]
 801b5d4:	f1a3 0302 	sub.w	r3, r3, #2
 801b5d8:	bfcc      	ite	gt
 801b5da:	2500      	movgt	r5, #0
 801b5dc:	2501      	movle	r5, #1
 801b5de:	2b03      	cmp	r3, #3
 801b5e0:	f200 8087 	bhi.w	801b6f2 <_dtoa_r+0x30a>
 801b5e4:	e8df f003 	tbb	[pc, r3]
 801b5e8:	59383a2d 	.word	0x59383a2d
 801b5ec:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 801b5f0:	441d      	add	r5, r3
 801b5f2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801b5f6:	2b20      	cmp	r3, #32
 801b5f8:	bfc1      	itttt	gt
 801b5fa:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801b5fe:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801b602:	fa0b f303 	lslgt.w	r3, fp, r3
 801b606:	fa26 f000 	lsrgt.w	r0, r6, r0
 801b60a:	bfda      	itte	le
 801b60c:	f1c3 0320 	rsble	r3, r3, #32
 801b610:	fa06 f003 	lslle.w	r0, r6, r3
 801b614:	4318      	orrgt	r0, r3
 801b616:	f7e4 ff8d 	bl	8000534 <__aeabi_ui2d>
 801b61a:	2301      	movs	r3, #1
 801b61c:	4606      	mov	r6, r0
 801b61e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801b622:	3d01      	subs	r5, #1
 801b624:	930e      	str	r3, [sp, #56]	; 0x38
 801b626:	e76a      	b.n	801b4fe <_dtoa_r+0x116>
 801b628:	2301      	movs	r3, #1
 801b62a:	e7b2      	b.n	801b592 <_dtoa_r+0x1aa>
 801b62c:	900b      	str	r0, [sp, #44]	; 0x2c
 801b62e:	e7b1      	b.n	801b594 <_dtoa_r+0x1ac>
 801b630:	9b04      	ldr	r3, [sp, #16]
 801b632:	9a00      	ldr	r2, [sp, #0]
 801b634:	1a9b      	subs	r3, r3, r2
 801b636:	9304      	str	r3, [sp, #16]
 801b638:	4253      	negs	r3, r2
 801b63a:	9307      	str	r3, [sp, #28]
 801b63c:	2300      	movs	r3, #0
 801b63e:	930a      	str	r3, [sp, #40]	; 0x28
 801b640:	e7bf      	b.n	801b5c2 <_dtoa_r+0x1da>
 801b642:	2300      	movs	r3, #0
 801b644:	9308      	str	r3, [sp, #32]
 801b646:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b648:	2b00      	cmp	r3, #0
 801b64a:	dc55      	bgt.n	801b6f8 <_dtoa_r+0x310>
 801b64c:	2301      	movs	r3, #1
 801b64e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801b652:	461a      	mov	r2, r3
 801b654:	9209      	str	r2, [sp, #36]	; 0x24
 801b656:	e00c      	b.n	801b672 <_dtoa_r+0x28a>
 801b658:	2301      	movs	r3, #1
 801b65a:	e7f3      	b.n	801b644 <_dtoa_r+0x25c>
 801b65c:	2300      	movs	r3, #0
 801b65e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b660:	9308      	str	r3, [sp, #32]
 801b662:	9b00      	ldr	r3, [sp, #0]
 801b664:	4413      	add	r3, r2
 801b666:	9302      	str	r3, [sp, #8]
 801b668:	3301      	adds	r3, #1
 801b66a:	2b01      	cmp	r3, #1
 801b66c:	9303      	str	r3, [sp, #12]
 801b66e:	bfb8      	it	lt
 801b670:	2301      	movlt	r3, #1
 801b672:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801b674:	2200      	movs	r2, #0
 801b676:	6042      	str	r2, [r0, #4]
 801b678:	2204      	movs	r2, #4
 801b67a:	f102 0614 	add.w	r6, r2, #20
 801b67e:	429e      	cmp	r6, r3
 801b680:	6841      	ldr	r1, [r0, #4]
 801b682:	d93d      	bls.n	801b700 <_dtoa_r+0x318>
 801b684:	4620      	mov	r0, r4
 801b686:	f000 fedf 	bl	801c448 <_Balloc>
 801b68a:	9001      	str	r0, [sp, #4]
 801b68c:	2800      	cmp	r0, #0
 801b68e:	d13b      	bne.n	801b708 <_dtoa_r+0x320>
 801b690:	4b11      	ldr	r3, [pc, #68]	; (801b6d8 <_dtoa_r+0x2f0>)
 801b692:	4602      	mov	r2, r0
 801b694:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801b698:	e6c0      	b.n	801b41c <_dtoa_r+0x34>
 801b69a:	2301      	movs	r3, #1
 801b69c:	e7df      	b.n	801b65e <_dtoa_r+0x276>
 801b69e:	bf00      	nop
 801b6a0:	636f4361 	.word	0x636f4361
 801b6a4:	3fd287a7 	.word	0x3fd287a7
 801b6a8:	8b60c8b3 	.word	0x8b60c8b3
 801b6ac:	3fc68a28 	.word	0x3fc68a28
 801b6b0:	509f79fb 	.word	0x509f79fb
 801b6b4:	3fd34413 	.word	0x3fd34413
 801b6b8:	0806c9c8 	.word	0x0806c9c8
 801b6bc:	0806ca83 	.word	0x0806ca83
 801b6c0:	7ff00000 	.word	0x7ff00000
 801b6c4:	0806ca7f 	.word	0x0806ca7f
 801b6c8:	0806ca76 	.word	0x0806ca76
 801b6cc:	0806c9a5 	.word	0x0806c9a5
 801b6d0:	3ff80000 	.word	0x3ff80000
 801b6d4:	0806cbd8 	.word	0x0806cbd8
 801b6d8:	0806cade 	.word	0x0806cade
 801b6dc:	2501      	movs	r5, #1
 801b6de:	2300      	movs	r3, #0
 801b6e0:	9306      	str	r3, [sp, #24]
 801b6e2:	9508      	str	r5, [sp, #32]
 801b6e4:	f04f 33ff 	mov.w	r3, #4294967295
 801b6e8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801b6ec:	2200      	movs	r2, #0
 801b6ee:	2312      	movs	r3, #18
 801b6f0:	e7b0      	b.n	801b654 <_dtoa_r+0x26c>
 801b6f2:	2301      	movs	r3, #1
 801b6f4:	9308      	str	r3, [sp, #32]
 801b6f6:	e7f5      	b.n	801b6e4 <_dtoa_r+0x2fc>
 801b6f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b6fa:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801b6fe:	e7b8      	b.n	801b672 <_dtoa_r+0x28a>
 801b700:	3101      	adds	r1, #1
 801b702:	6041      	str	r1, [r0, #4]
 801b704:	0052      	lsls	r2, r2, #1
 801b706:	e7b8      	b.n	801b67a <_dtoa_r+0x292>
 801b708:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b70a:	9a01      	ldr	r2, [sp, #4]
 801b70c:	601a      	str	r2, [r3, #0]
 801b70e:	9b03      	ldr	r3, [sp, #12]
 801b710:	2b0e      	cmp	r3, #14
 801b712:	f200 809d 	bhi.w	801b850 <_dtoa_r+0x468>
 801b716:	2d00      	cmp	r5, #0
 801b718:	f000 809a 	beq.w	801b850 <_dtoa_r+0x468>
 801b71c:	9b00      	ldr	r3, [sp, #0]
 801b71e:	2b00      	cmp	r3, #0
 801b720:	dd32      	ble.n	801b788 <_dtoa_r+0x3a0>
 801b722:	4ab7      	ldr	r2, [pc, #732]	; (801ba00 <_dtoa_r+0x618>)
 801b724:	f003 030f 	and.w	r3, r3, #15
 801b728:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801b72c:	e9d3 8900 	ldrd	r8, r9, [r3]
 801b730:	9b00      	ldr	r3, [sp, #0]
 801b732:	05d8      	lsls	r0, r3, #23
 801b734:	ea4f 1723 	mov.w	r7, r3, asr #4
 801b738:	d516      	bpl.n	801b768 <_dtoa_r+0x380>
 801b73a:	4bb2      	ldr	r3, [pc, #712]	; (801ba04 <_dtoa_r+0x61c>)
 801b73c:	ec51 0b19 	vmov	r0, r1, d9
 801b740:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801b744:	f7e5 f89a 	bl	800087c <__aeabi_ddiv>
 801b748:	f007 070f 	and.w	r7, r7, #15
 801b74c:	4682      	mov	sl, r0
 801b74e:	468b      	mov	fp, r1
 801b750:	2503      	movs	r5, #3
 801b752:	4eac      	ldr	r6, [pc, #688]	; (801ba04 <_dtoa_r+0x61c>)
 801b754:	b957      	cbnz	r7, 801b76c <_dtoa_r+0x384>
 801b756:	4642      	mov	r2, r8
 801b758:	464b      	mov	r3, r9
 801b75a:	4650      	mov	r0, sl
 801b75c:	4659      	mov	r1, fp
 801b75e:	f7e5 f88d 	bl	800087c <__aeabi_ddiv>
 801b762:	4682      	mov	sl, r0
 801b764:	468b      	mov	fp, r1
 801b766:	e028      	b.n	801b7ba <_dtoa_r+0x3d2>
 801b768:	2502      	movs	r5, #2
 801b76a:	e7f2      	b.n	801b752 <_dtoa_r+0x36a>
 801b76c:	07f9      	lsls	r1, r7, #31
 801b76e:	d508      	bpl.n	801b782 <_dtoa_r+0x39a>
 801b770:	4640      	mov	r0, r8
 801b772:	4649      	mov	r1, r9
 801b774:	e9d6 2300 	ldrd	r2, r3, [r6]
 801b778:	f7e4 ff56 	bl	8000628 <__aeabi_dmul>
 801b77c:	3501      	adds	r5, #1
 801b77e:	4680      	mov	r8, r0
 801b780:	4689      	mov	r9, r1
 801b782:	107f      	asrs	r7, r7, #1
 801b784:	3608      	adds	r6, #8
 801b786:	e7e5      	b.n	801b754 <_dtoa_r+0x36c>
 801b788:	f000 809b 	beq.w	801b8c2 <_dtoa_r+0x4da>
 801b78c:	9b00      	ldr	r3, [sp, #0]
 801b78e:	4f9d      	ldr	r7, [pc, #628]	; (801ba04 <_dtoa_r+0x61c>)
 801b790:	425e      	negs	r6, r3
 801b792:	4b9b      	ldr	r3, [pc, #620]	; (801ba00 <_dtoa_r+0x618>)
 801b794:	f006 020f 	and.w	r2, r6, #15
 801b798:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801b79c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b7a0:	ec51 0b19 	vmov	r0, r1, d9
 801b7a4:	f7e4 ff40 	bl	8000628 <__aeabi_dmul>
 801b7a8:	1136      	asrs	r6, r6, #4
 801b7aa:	4682      	mov	sl, r0
 801b7ac:	468b      	mov	fp, r1
 801b7ae:	2300      	movs	r3, #0
 801b7b0:	2502      	movs	r5, #2
 801b7b2:	2e00      	cmp	r6, #0
 801b7b4:	d17a      	bne.n	801b8ac <_dtoa_r+0x4c4>
 801b7b6:	2b00      	cmp	r3, #0
 801b7b8:	d1d3      	bne.n	801b762 <_dtoa_r+0x37a>
 801b7ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b7bc:	2b00      	cmp	r3, #0
 801b7be:	f000 8082 	beq.w	801b8c6 <_dtoa_r+0x4de>
 801b7c2:	4b91      	ldr	r3, [pc, #580]	; (801ba08 <_dtoa_r+0x620>)
 801b7c4:	2200      	movs	r2, #0
 801b7c6:	4650      	mov	r0, sl
 801b7c8:	4659      	mov	r1, fp
 801b7ca:	f7e5 f99f 	bl	8000b0c <__aeabi_dcmplt>
 801b7ce:	2800      	cmp	r0, #0
 801b7d0:	d079      	beq.n	801b8c6 <_dtoa_r+0x4de>
 801b7d2:	9b03      	ldr	r3, [sp, #12]
 801b7d4:	2b00      	cmp	r3, #0
 801b7d6:	d076      	beq.n	801b8c6 <_dtoa_r+0x4de>
 801b7d8:	9b02      	ldr	r3, [sp, #8]
 801b7da:	2b00      	cmp	r3, #0
 801b7dc:	dd36      	ble.n	801b84c <_dtoa_r+0x464>
 801b7de:	9b00      	ldr	r3, [sp, #0]
 801b7e0:	4650      	mov	r0, sl
 801b7e2:	4659      	mov	r1, fp
 801b7e4:	1e5f      	subs	r7, r3, #1
 801b7e6:	2200      	movs	r2, #0
 801b7e8:	4b88      	ldr	r3, [pc, #544]	; (801ba0c <_dtoa_r+0x624>)
 801b7ea:	f7e4 ff1d 	bl	8000628 <__aeabi_dmul>
 801b7ee:	9e02      	ldr	r6, [sp, #8]
 801b7f0:	4682      	mov	sl, r0
 801b7f2:	468b      	mov	fp, r1
 801b7f4:	3501      	adds	r5, #1
 801b7f6:	4628      	mov	r0, r5
 801b7f8:	f7e4 feac 	bl	8000554 <__aeabi_i2d>
 801b7fc:	4652      	mov	r2, sl
 801b7fe:	465b      	mov	r3, fp
 801b800:	f7e4 ff12 	bl	8000628 <__aeabi_dmul>
 801b804:	4b82      	ldr	r3, [pc, #520]	; (801ba10 <_dtoa_r+0x628>)
 801b806:	2200      	movs	r2, #0
 801b808:	f7e4 fd58 	bl	80002bc <__adddf3>
 801b80c:	46d0      	mov	r8, sl
 801b80e:	46d9      	mov	r9, fp
 801b810:	4682      	mov	sl, r0
 801b812:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 801b816:	2e00      	cmp	r6, #0
 801b818:	d158      	bne.n	801b8cc <_dtoa_r+0x4e4>
 801b81a:	4b7e      	ldr	r3, [pc, #504]	; (801ba14 <_dtoa_r+0x62c>)
 801b81c:	2200      	movs	r2, #0
 801b81e:	4640      	mov	r0, r8
 801b820:	4649      	mov	r1, r9
 801b822:	f7e4 fd49 	bl	80002b8 <__aeabi_dsub>
 801b826:	4652      	mov	r2, sl
 801b828:	465b      	mov	r3, fp
 801b82a:	4680      	mov	r8, r0
 801b82c:	4689      	mov	r9, r1
 801b82e:	f7e5 f98b 	bl	8000b48 <__aeabi_dcmpgt>
 801b832:	2800      	cmp	r0, #0
 801b834:	f040 8295 	bne.w	801bd62 <_dtoa_r+0x97a>
 801b838:	4652      	mov	r2, sl
 801b83a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801b83e:	4640      	mov	r0, r8
 801b840:	4649      	mov	r1, r9
 801b842:	f7e5 f963 	bl	8000b0c <__aeabi_dcmplt>
 801b846:	2800      	cmp	r0, #0
 801b848:	f040 8289 	bne.w	801bd5e <_dtoa_r+0x976>
 801b84c:	ec5b ab19 	vmov	sl, fp, d9
 801b850:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801b852:	2b00      	cmp	r3, #0
 801b854:	f2c0 8148 	blt.w	801bae8 <_dtoa_r+0x700>
 801b858:	9a00      	ldr	r2, [sp, #0]
 801b85a:	2a0e      	cmp	r2, #14
 801b85c:	f300 8144 	bgt.w	801bae8 <_dtoa_r+0x700>
 801b860:	4b67      	ldr	r3, [pc, #412]	; (801ba00 <_dtoa_r+0x618>)
 801b862:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801b866:	e9d3 8900 	ldrd	r8, r9, [r3]
 801b86a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b86c:	2b00      	cmp	r3, #0
 801b86e:	f280 80d5 	bge.w	801ba1c <_dtoa_r+0x634>
 801b872:	9b03      	ldr	r3, [sp, #12]
 801b874:	2b00      	cmp	r3, #0
 801b876:	f300 80d1 	bgt.w	801ba1c <_dtoa_r+0x634>
 801b87a:	f040 826f 	bne.w	801bd5c <_dtoa_r+0x974>
 801b87e:	4b65      	ldr	r3, [pc, #404]	; (801ba14 <_dtoa_r+0x62c>)
 801b880:	2200      	movs	r2, #0
 801b882:	4640      	mov	r0, r8
 801b884:	4649      	mov	r1, r9
 801b886:	f7e4 fecf 	bl	8000628 <__aeabi_dmul>
 801b88a:	4652      	mov	r2, sl
 801b88c:	465b      	mov	r3, fp
 801b88e:	f7e5 f951 	bl	8000b34 <__aeabi_dcmpge>
 801b892:	9e03      	ldr	r6, [sp, #12]
 801b894:	4637      	mov	r7, r6
 801b896:	2800      	cmp	r0, #0
 801b898:	f040 8245 	bne.w	801bd26 <_dtoa_r+0x93e>
 801b89c:	9d01      	ldr	r5, [sp, #4]
 801b89e:	2331      	movs	r3, #49	; 0x31
 801b8a0:	f805 3b01 	strb.w	r3, [r5], #1
 801b8a4:	9b00      	ldr	r3, [sp, #0]
 801b8a6:	3301      	adds	r3, #1
 801b8a8:	9300      	str	r3, [sp, #0]
 801b8aa:	e240      	b.n	801bd2e <_dtoa_r+0x946>
 801b8ac:	07f2      	lsls	r2, r6, #31
 801b8ae:	d505      	bpl.n	801b8bc <_dtoa_r+0x4d4>
 801b8b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 801b8b4:	f7e4 feb8 	bl	8000628 <__aeabi_dmul>
 801b8b8:	3501      	adds	r5, #1
 801b8ba:	2301      	movs	r3, #1
 801b8bc:	1076      	asrs	r6, r6, #1
 801b8be:	3708      	adds	r7, #8
 801b8c0:	e777      	b.n	801b7b2 <_dtoa_r+0x3ca>
 801b8c2:	2502      	movs	r5, #2
 801b8c4:	e779      	b.n	801b7ba <_dtoa_r+0x3d2>
 801b8c6:	9f00      	ldr	r7, [sp, #0]
 801b8c8:	9e03      	ldr	r6, [sp, #12]
 801b8ca:	e794      	b.n	801b7f6 <_dtoa_r+0x40e>
 801b8cc:	9901      	ldr	r1, [sp, #4]
 801b8ce:	4b4c      	ldr	r3, [pc, #304]	; (801ba00 <_dtoa_r+0x618>)
 801b8d0:	4431      	add	r1, r6
 801b8d2:	910d      	str	r1, [sp, #52]	; 0x34
 801b8d4:	9908      	ldr	r1, [sp, #32]
 801b8d6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801b8da:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801b8de:	2900      	cmp	r1, #0
 801b8e0:	d043      	beq.n	801b96a <_dtoa_r+0x582>
 801b8e2:	494d      	ldr	r1, [pc, #308]	; (801ba18 <_dtoa_r+0x630>)
 801b8e4:	2000      	movs	r0, #0
 801b8e6:	f7e4 ffc9 	bl	800087c <__aeabi_ddiv>
 801b8ea:	4652      	mov	r2, sl
 801b8ec:	465b      	mov	r3, fp
 801b8ee:	f7e4 fce3 	bl	80002b8 <__aeabi_dsub>
 801b8f2:	9d01      	ldr	r5, [sp, #4]
 801b8f4:	4682      	mov	sl, r0
 801b8f6:	468b      	mov	fp, r1
 801b8f8:	4649      	mov	r1, r9
 801b8fa:	4640      	mov	r0, r8
 801b8fc:	f7e5 f944 	bl	8000b88 <__aeabi_d2iz>
 801b900:	4606      	mov	r6, r0
 801b902:	f7e4 fe27 	bl	8000554 <__aeabi_i2d>
 801b906:	4602      	mov	r2, r0
 801b908:	460b      	mov	r3, r1
 801b90a:	4640      	mov	r0, r8
 801b90c:	4649      	mov	r1, r9
 801b90e:	f7e4 fcd3 	bl	80002b8 <__aeabi_dsub>
 801b912:	3630      	adds	r6, #48	; 0x30
 801b914:	f805 6b01 	strb.w	r6, [r5], #1
 801b918:	4652      	mov	r2, sl
 801b91a:	465b      	mov	r3, fp
 801b91c:	4680      	mov	r8, r0
 801b91e:	4689      	mov	r9, r1
 801b920:	f7e5 f8f4 	bl	8000b0c <__aeabi_dcmplt>
 801b924:	2800      	cmp	r0, #0
 801b926:	d163      	bne.n	801b9f0 <_dtoa_r+0x608>
 801b928:	4642      	mov	r2, r8
 801b92a:	464b      	mov	r3, r9
 801b92c:	4936      	ldr	r1, [pc, #216]	; (801ba08 <_dtoa_r+0x620>)
 801b92e:	2000      	movs	r0, #0
 801b930:	f7e4 fcc2 	bl	80002b8 <__aeabi_dsub>
 801b934:	4652      	mov	r2, sl
 801b936:	465b      	mov	r3, fp
 801b938:	f7e5 f8e8 	bl	8000b0c <__aeabi_dcmplt>
 801b93c:	2800      	cmp	r0, #0
 801b93e:	f040 80b5 	bne.w	801baac <_dtoa_r+0x6c4>
 801b942:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b944:	429d      	cmp	r5, r3
 801b946:	d081      	beq.n	801b84c <_dtoa_r+0x464>
 801b948:	4b30      	ldr	r3, [pc, #192]	; (801ba0c <_dtoa_r+0x624>)
 801b94a:	2200      	movs	r2, #0
 801b94c:	4650      	mov	r0, sl
 801b94e:	4659      	mov	r1, fp
 801b950:	f7e4 fe6a 	bl	8000628 <__aeabi_dmul>
 801b954:	4b2d      	ldr	r3, [pc, #180]	; (801ba0c <_dtoa_r+0x624>)
 801b956:	4682      	mov	sl, r0
 801b958:	468b      	mov	fp, r1
 801b95a:	4640      	mov	r0, r8
 801b95c:	4649      	mov	r1, r9
 801b95e:	2200      	movs	r2, #0
 801b960:	f7e4 fe62 	bl	8000628 <__aeabi_dmul>
 801b964:	4680      	mov	r8, r0
 801b966:	4689      	mov	r9, r1
 801b968:	e7c6      	b.n	801b8f8 <_dtoa_r+0x510>
 801b96a:	4650      	mov	r0, sl
 801b96c:	4659      	mov	r1, fp
 801b96e:	f7e4 fe5b 	bl	8000628 <__aeabi_dmul>
 801b972:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b974:	9d01      	ldr	r5, [sp, #4]
 801b976:	930f      	str	r3, [sp, #60]	; 0x3c
 801b978:	4682      	mov	sl, r0
 801b97a:	468b      	mov	fp, r1
 801b97c:	4649      	mov	r1, r9
 801b97e:	4640      	mov	r0, r8
 801b980:	f7e5 f902 	bl	8000b88 <__aeabi_d2iz>
 801b984:	4606      	mov	r6, r0
 801b986:	f7e4 fde5 	bl	8000554 <__aeabi_i2d>
 801b98a:	3630      	adds	r6, #48	; 0x30
 801b98c:	4602      	mov	r2, r0
 801b98e:	460b      	mov	r3, r1
 801b990:	4640      	mov	r0, r8
 801b992:	4649      	mov	r1, r9
 801b994:	f7e4 fc90 	bl	80002b8 <__aeabi_dsub>
 801b998:	f805 6b01 	strb.w	r6, [r5], #1
 801b99c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b99e:	429d      	cmp	r5, r3
 801b9a0:	4680      	mov	r8, r0
 801b9a2:	4689      	mov	r9, r1
 801b9a4:	f04f 0200 	mov.w	r2, #0
 801b9a8:	d124      	bne.n	801b9f4 <_dtoa_r+0x60c>
 801b9aa:	4b1b      	ldr	r3, [pc, #108]	; (801ba18 <_dtoa_r+0x630>)
 801b9ac:	4650      	mov	r0, sl
 801b9ae:	4659      	mov	r1, fp
 801b9b0:	f7e4 fc84 	bl	80002bc <__adddf3>
 801b9b4:	4602      	mov	r2, r0
 801b9b6:	460b      	mov	r3, r1
 801b9b8:	4640      	mov	r0, r8
 801b9ba:	4649      	mov	r1, r9
 801b9bc:	f7e5 f8c4 	bl	8000b48 <__aeabi_dcmpgt>
 801b9c0:	2800      	cmp	r0, #0
 801b9c2:	d173      	bne.n	801baac <_dtoa_r+0x6c4>
 801b9c4:	4652      	mov	r2, sl
 801b9c6:	465b      	mov	r3, fp
 801b9c8:	4913      	ldr	r1, [pc, #76]	; (801ba18 <_dtoa_r+0x630>)
 801b9ca:	2000      	movs	r0, #0
 801b9cc:	f7e4 fc74 	bl	80002b8 <__aeabi_dsub>
 801b9d0:	4602      	mov	r2, r0
 801b9d2:	460b      	mov	r3, r1
 801b9d4:	4640      	mov	r0, r8
 801b9d6:	4649      	mov	r1, r9
 801b9d8:	f7e5 f898 	bl	8000b0c <__aeabi_dcmplt>
 801b9dc:	2800      	cmp	r0, #0
 801b9de:	f43f af35 	beq.w	801b84c <_dtoa_r+0x464>
 801b9e2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801b9e4:	1e6b      	subs	r3, r5, #1
 801b9e6:	930f      	str	r3, [sp, #60]	; 0x3c
 801b9e8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801b9ec:	2b30      	cmp	r3, #48	; 0x30
 801b9ee:	d0f8      	beq.n	801b9e2 <_dtoa_r+0x5fa>
 801b9f0:	9700      	str	r7, [sp, #0]
 801b9f2:	e049      	b.n	801ba88 <_dtoa_r+0x6a0>
 801b9f4:	4b05      	ldr	r3, [pc, #20]	; (801ba0c <_dtoa_r+0x624>)
 801b9f6:	f7e4 fe17 	bl	8000628 <__aeabi_dmul>
 801b9fa:	4680      	mov	r8, r0
 801b9fc:	4689      	mov	r9, r1
 801b9fe:	e7bd      	b.n	801b97c <_dtoa_r+0x594>
 801ba00:	0806cbd8 	.word	0x0806cbd8
 801ba04:	0806cbb0 	.word	0x0806cbb0
 801ba08:	3ff00000 	.word	0x3ff00000
 801ba0c:	40240000 	.word	0x40240000
 801ba10:	401c0000 	.word	0x401c0000
 801ba14:	40140000 	.word	0x40140000
 801ba18:	3fe00000 	.word	0x3fe00000
 801ba1c:	9d01      	ldr	r5, [sp, #4]
 801ba1e:	4656      	mov	r6, sl
 801ba20:	465f      	mov	r7, fp
 801ba22:	4642      	mov	r2, r8
 801ba24:	464b      	mov	r3, r9
 801ba26:	4630      	mov	r0, r6
 801ba28:	4639      	mov	r1, r7
 801ba2a:	f7e4 ff27 	bl	800087c <__aeabi_ddiv>
 801ba2e:	f7e5 f8ab 	bl	8000b88 <__aeabi_d2iz>
 801ba32:	4682      	mov	sl, r0
 801ba34:	f7e4 fd8e 	bl	8000554 <__aeabi_i2d>
 801ba38:	4642      	mov	r2, r8
 801ba3a:	464b      	mov	r3, r9
 801ba3c:	f7e4 fdf4 	bl	8000628 <__aeabi_dmul>
 801ba40:	4602      	mov	r2, r0
 801ba42:	460b      	mov	r3, r1
 801ba44:	4630      	mov	r0, r6
 801ba46:	4639      	mov	r1, r7
 801ba48:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 801ba4c:	f7e4 fc34 	bl	80002b8 <__aeabi_dsub>
 801ba50:	f805 6b01 	strb.w	r6, [r5], #1
 801ba54:	9e01      	ldr	r6, [sp, #4]
 801ba56:	9f03      	ldr	r7, [sp, #12]
 801ba58:	1bae      	subs	r6, r5, r6
 801ba5a:	42b7      	cmp	r7, r6
 801ba5c:	4602      	mov	r2, r0
 801ba5e:	460b      	mov	r3, r1
 801ba60:	d135      	bne.n	801bace <_dtoa_r+0x6e6>
 801ba62:	f7e4 fc2b 	bl	80002bc <__adddf3>
 801ba66:	4642      	mov	r2, r8
 801ba68:	464b      	mov	r3, r9
 801ba6a:	4606      	mov	r6, r0
 801ba6c:	460f      	mov	r7, r1
 801ba6e:	f7e5 f86b 	bl	8000b48 <__aeabi_dcmpgt>
 801ba72:	b9d0      	cbnz	r0, 801baaa <_dtoa_r+0x6c2>
 801ba74:	4642      	mov	r2, r8
 801ba76:	464b      	mov	r3, r9
 801ba78:	4630      	mov	r0, r6
 801ba7a:	4639      	mov	r1, r7
 801ba7c:	f7e5 f83c 	bl	8000af8 <__aeabi_dcmpeq>
 801ba80:	b110      	cbz	r0, 801ba88 <_dtoa_r+0x6a0>
 801ba82:	f01a 0f01 	tst.w	sl, #1
 801ba86:	d110      	bne.n	801baaa <_dtoa_r+0x6c2>
 801ba88:	4620      	mov	r0, r4
 801ba8a:	ee18 1a10 	vmov	r1, s16
 801ba8e:	f000 fd1b 	bl	801c4c8 <_Bfree>
 801ba92:	2300      	movs	r3, #0
 801ba94:	9800      	ldr	r0, [sp, #0]
 801ba96:	702b      	strb	r3, [r5, #0]
 801ba98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ba9a:	3001      	adds	r0, #1
 801ba9c:	6018      	str	r0, [r3, #0]
 801ba9e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801baa0:	2b00      	cmp	r3, #0
 801baa2:	f43f acf1 	beq.w	801b488 <_dtoa_r+0xa0>
 801baa6:	601d      	str	r5, [r3, #0]
 801baa8:	e4ee      	b.n	801b488 <_dtoa_r+0xa0>
 801baaa:	9f00      	ldr	r7, [sp, #0]
 801baac:	462b      	mov	r3, r5
 801baae:	461d      	mov	r5, r3
 801bab0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801bab4:	2a39      	cmp	r2, #57	; 0x39
 801bab6:	d106      	bne.n	801bac6 <_dtoa_r+0x6de>
 801bab8:	9a01      	ldr	r2, [sp, #4]
 801baba:	429a      	cmp	r2, r3
 801babc:	d1f7      	bne.n	801baae <_dtoa_r+0x6c6>
 801babe:	9901      	ldr	r1, [sp, #4]
 801bac0:	2230      	movs	r2, #48	; 0x30
 801bac2:	3701      	adds	r7, #1
 801bac4:	700a      	strb	r2, [r1, #0]
 801bac6:	781a      	ldrb	r2, [r3, #0]
 801bac8:	3201      	adds	r2, #1
 801baca:	701a      	strb	r2, [r3, #0]
 801bacc:	e790      	b.n	801b9f0 <_dtoa_r+0x608>
 801bace:	4ba6      	ldr	r3, [pc, #664]	; (801bd68 <_dtoa_r+0x980>)
 801bad0:	2200      	movs	r2, #0
 801bad2:	f7e4 fda9 	bl	8000628 <__aeabi_dmul>
 801bad6:	2200      	movs	r2, #0
 801bad8:	2300      	movs	r3, #0
 801bada:	4606      	mov	r6, r0
 801badc:	460f      	mov	r7, r1
 801bade:	f7e5 f80b 	bl	8000af8 <__aeabi_dcmpeq>
 801bae2:	2800      	cmp	r0, #0
 801bae4:	d09d      	beq.n	801ba22 <_dtoa_r+0x63a>
 801bae6:	e7cf      	b.n	801ba88 <_dtoa_r+0x6a0>
 801bae8:	9a08      	ldr	r2, [sp, #32]
 801baea:	2a00      	cmp	r2, #0
 801baec:	f000 80d7 	beq.w	801bc9e <_dtoa_r+0x8b6>
 801baf0:	9a06      	ldr	r2, [sp, #24]
 801baf2:	2a01      	cmp	r2, #1
 801baf4:	f300 80ba 	bgt.w	801bc6c <_dtoa_r+0x884>
 801baf8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801bafa:	2a00      	cmp	r2, #0
 801bafc:	f000 80b2 	beq.w	801bc64 <_dtoa_r+0x87c>
 801bb00:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801bb04:	9e07      	ldr	r6, [sp, #28]
 801bb06:	9d04      	ldr	r5, [sp, #16]
 801bb08:	9a04      	ldr	r2, [sp, #16]
 801bb0a:	441a      	add	r2, r3
 801bb0c:	9204      	str	r2, [sp, #16]
 801bb0e:	9a05      	ldr	r2, [sp, #20]
 801bb10:	2101      	movs	r1, #1
 801bb12:	441a      	add	r2, r3
 801bb14:	4620      	mov	r0, r4
 801bb16:	9205      	str	r2, [sp, #20]
 801bb18:	f000 fd8e 	bl	801c638 <__i2b>
 801bb1c:	4607      	mov	r7, r0
 801bb1e:	2d00      	cmp	r5, #0
 801bb20:	dd0c      	ble.n	801bb3c <_dtoa_r+0x754>
 801bb22:	9b05      	ldr	r3, [sp, #20]
 801bb24:	2b00      	cmp	r3, #0
 801bb26:	dd09      	ble.n	801bb3c <_dtoa_r+0x754>
 801bb28:	42ab      	cmp	r3, r5
 801bb2a:	9a04      	ldr	r2, [sp, #16]
 801bb2c:	bfa8      	it	ge
 801bb2e:	462b      	movge	r3, r5
 801bb30:	1ad2      	subs	r2, r2, r3
 801bb32:	9204      	str	r2, [sp, #16]
 801bb34:	9a05      	ldr	r2, [sp, #20]
 801bb36:	1aed      	subs	r5, r5, r3
 801bb38:	1ad3      	subs	r3, r2, r3
 801bb3a:	9305      	str	r3, [sp, #20]
 801bb3c:	9b07      	ldr	r3, [sp, #28]
 801bb3e:	b31b      	cbz	r3, 801bb88 <_dtoa_r+0x7a0>
 801bb40:	9b08      	ldr	r3, [sp, #32]
 801bb42:	2b00      	cmp	r3, #0
 801bb44:	f000 80af 	beq.w	801bca6 <_dtoa_r+0x8be>
 801bb48:	2e00      	cmp	r6, #0
 801bb4a:	dd13      	ble.n	801bb74 <_dtoa_r+0x78c>
 801bb4c:	4639      	mov	r1, r7
 801bb4e:	4632      	mov	r2, r6
 801bb50:	4620      	mov	r0, r4
 801bb52:	f000 fe31 	bl	801c7b8 <__pow5mult>
 801bb56:	ee18 2a10 	vmov	r2, s16
 801bb5a:	4601      	mov	r1, r0
 801bb5c:	4607      	mov	r7, r0
 801bb5e:	4620      	mov	r0, r4
 801bb60:	f000 fd80 	bl	801c664 <__multiply>
 801bb64:	ee18 1a10 	vmov	r1, s16
 801bb68:	4680      	mov	r8, r0
 801bb6a:	4620      	mov	r0, r4
 801bb6c:	f000 fcac 	bl	801c4c8 <_Bfree>
 801bb70:	ee08 8a10 	vmov	s16, r8
 801bb74:	9b07      	ldr	r3, [sp, #28]
 801bb76:	1b9a      	subs	r2, r3, r6
 801bb78:	d006      	beq.n	801bb88 <_dtoa_r+0x7a0>
 801bb7a:	ee18 1a10 	vmov	r1, s16
 801bb7e:	4620      	mov	r0, r4
 801bb80:	f000 fe1a 	bl	801c7b8 <__pow5mult>
 801bb84:	ee08 0a10 	vmov	s16, r0
 801bb88:	2101      	movs	r1, #1
 801bb8a:	4620      	mov	r0, r4
 801bb8c:	f000 fd54 	bl	801c638 <__i2b>
 801bb90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bb92:	2b00      	cmp	r3, #0
 801bb94:	4606      	mov	r6, r0
 801bb96:	f340 8088 	ble.w	801bcaa <_dtoa_r+0x8c2>
 801bb9a:	461a      	mov	r2, r3
 801bb9c:	4601      	mov	r1, r0
 801bb9e:	4620      	mov	r0, r4
 801bba0:	f000 fe0a 	bl	801c7b8 <__pow5mult>
 801bba4:	9b06      	ldr	r3, [sp, #24]
 801bba6:	2b01      	cmp	r3, #1
 801bba8:	4606      	mov	r6, r0
 801bbaa:	f340 8081 	ble.w	801bcb0 <_dtoa_r+0x8c8>
 801bbae:	f04f 0800 	mov.w	r8, #0
 801bbb2:	6933      	ldr	r3, [r6, #16]
 801bbb4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801bbb8:	6918      	ldr	r0, [r3, #16]
 801bbba:	f000 fced 	bl	801c598 <__hi0bits>
 801bbbe:	f1c0 0020 	rsb	r0, r0, #32
 801bbc2:	9b05      	ldr	r3, [sp, #20]
 801bbc4:	4418      	add	r0, r3
 801bbc6:	f010 001f 	ands.w	r0, r0, #31
 801bbca:	f000 8092 	beq.w	801bcf2 <_dtoa_r+0x90a>
 801bbce:	f1c0 0320 	rsb	r3, r0, #32
 801bbd2:	2b04      	cmp	r3, #4
 801bbd4:	f340 808a 	ble.w	801bcec <_dtoa_r+0x904>
 801bbd8:	f1c0 001c 	rsb	r0, r0, #28
 801bbdc:	9b04      	ldr	r3, [sp, #16]
 801bbde:	4403      	add	r3, r0
 801bbe0:	9304      	str	r3, [sp, #16]
 801bbe2:	9b05      	ldr	r3, [sp, #20]
 801bbe4:	4403      	add	r3, r0
 801bbe6:	4405      	add	r5, r0
 801bbe8:	9305      	str	r3, [sp, #20]
 801bbea:	9b04      	ldr	r3, [sp, #16]
 801bbec:	2b00      	cmp	r3, #0
 801bbee:	dd07      	ble.n	801bc00 <_dtoa_r+0x818>
 801bbf0:	ee18 1a10 	vmov	r1, s16
 801bbf4:	461a      	mov	r2, r3
 801bbf6:	4620      	mov	r0, r4
 801bbf8:	f000 fe38 	bl	801c86c <__lshift>
 801bbfc:	ee08 0a10 	vmov	s16, r0
 801bc00:	9b05      	ldr	r3, [sp, #20]
 801bc02:	2b00      	cmp	r3, #0
 801bc04:	dd05      	ble.n	801bc12 <_dtoa_r+0x82a>
 801bc06:	4631      	mov	r1, r6
 801bc08:	461a      	mov	r2, r3
 801bc0a:	4620      	mov	r0, r4
 801bc0c:	f000 fe2e 	bl	801c86c <__lshift>
 801bc10:	4606      	mov	r6, r0
 801bc12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801bc14:	2b00      	cmp	r3, #0
 801bc16:	d06e      	beq.n	801bcf6 <_dtoa_r+0x90e>
 801bc18:	ee18 0a10 	vmov	r0, s16
 801bc1c:	4631      	mov	r1, r6
 801bc1e:	f000 fe95 	bl	801c94c <__mcmp>
 801bc22:	2800      	cmp	r0, #0
 801bc24:	da67      	bge.n	801bcf6 <_dtoa_r+0x90e>
 801bc26:	9b00      	ldr	r3, [sp, #0]
 801bc28:	3b01      	subs	r3, #1
 801bc2a:	ee18 1a10 	vmov	r1, s16
 801bc2e:	9300      	str	r3, [sp, #0]
 801bc30:	220a      	movs	r2, #10
 801bc32:	2300      	movs	r3, #0
 801bc34:	4620      	mov	r0, r4
 801bc36:	f000 fc69 	bl	801c50c <__multadd>
 801bc3a:	9b08      	ldr	r3, [sp, #32]
 801bc3c:	ee08 0a10 	vmov	s16, r0
 801bc40:	2b00      	cmp	r3, #0
 801bc42:	f000 81b1 	beq.w	801bfa8 <_dtoa_r+0xbc0>
 801bc46:	2300      	movs	r3, #0
 801bc48:	4639      	mov	r1, r7
 801bc4a:	220a      	movs	r2, #10
 801bc4c:	4620      	mov	r0, r4
 801bc4e:	f000 fc5d 	bl	801c50c <__multadd>
 801bc52:	9b02      	ldr	r3, [sp, #8]
 801bc54:	2b00      	cmp	r3, #0
 801bc56:	4607      	mov	r7, r0
 801bc58:	f300 808e 	bgt.w	801bd78 <_dtoa_r+0x990>
 801bc5c:	9b06      	ldr	r3, [sp, #24]
 801bc5e:	2b02      	cmp	r3, #2
 801bc60:	dc51      	bgt.n	801bd06 <_dtoa_r+0x91e>
 801bc62:	e089      	b.n	801bd78 <_dtoa_r+0x990>
 801bc64:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801bc66:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801bc6a:	e74b      	b.n	801bb04 <_dtoa_r+0x71c>
 801bc6c:	9b03      	ldr	r3, [sp, #12]
 801bc6e:	1e5e      	subs	r6, r3, #1
 801bc70:	9b07      	ldr	r3, [sp, #28]
 801bc72:	42b3      	cmp	r3, r6
 801bc74:	bfbf      	itttt	lt
 801bc76:	9b07      	ldrlt	r3, [sp, #28]
 801bc78:	9607      	strlt	r6, [sp, #28]
 801bc7a:	1af2      	sublt	r2, r6, r3
 801bc7c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801bc7e:	bfb6      	itet	lt
 801bc80:	189b      	addlt	r3, r3, r2
 801bc82:	1b9e      	subge	r6, r3, r6
 801bc84:	930a      	strlt	r3, [sp, #40]	; 0x28
 801bc86:	9b03      	ldr	r3, [sp, #12]
 801bc88:	bfb8      	it	lt
 801bc8a:	2600      	movlt	r6, #0
 801bc8c:	2b00      	cmp	r3, #0
 801bc8e:	bfb7      	itett	lt
 801bc90:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 801bc94:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 801bc98:	1a9d      	sublt	r5, r3, r2
 801bc9a:	2300      	movlt	r3, #0
 801bc9c:	e734      	b.n	801bb08 <_dtoa_r+0x720>
 801bc9e:	9e07      	ldr	r6, [sp, #28]
 801bca0:	9d04      	ldr	r5, [sp, #16]
 801bca2:	9f08      	ldr	r7, [sp, #32]
 801bca4:	e73b      	b.n	801bb1e <_dtoa_r+0x736>
 801bca6:	9a07      	ldr	r2, [sp, #28]
 801bca8:	e767      	b.n	801bb7a <_dtoa_r+0x792>
 801bcaa:	9b06      	ldr	r3, [sp, #24]
 801bcac:	2b01      	cmp	r3, #1
 801bcae:	dc18      	bgt.n	801bce2 <_dtoa_r+0x8fa>
 801bcb0:	f1ba 0f00 	cmp.w	sl, #0
 801bcb4:	d115      	bne.n	801bce2 <_dtoa_r+0x8fa>
 801bcb6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801bcba:	b993      	cbnz	r3, 801bce2 <_dtoa_r+0x8fa>
 801bcbc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801bcc0:	0d1b      	lsrs	r3, r3, #20
 801bcc2:	051b      	lsls	r3, r3, #20
 801bcc4:	b183      	cbz	r3, 801bce8 <_dtoa_r+0x900>
 801bcc6:	9b04      	ldr	r3, [sp, #16]
 801bcc8:	3301      	adds	r3, #1
 801bcca:	9304      	str	r3, [sp, #16]
 801bccc:	9b05      	ldr	r3, [sp, #20]
 801bcce:	3301      	adds	r3, #1
 801bcd0:	9305      	str	r3, [sp, #20]
 801bcd2:	f04f 0801 	mov.w	r8, #1
 801bcd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bcd8:	2b00      	cmp	r3, #0
 801bcda:	f47f af6a 	bne.w	801bbb2 <_dtoa_r+0x7ca>
 801bcde:	2001      	movs	r0, #1
 801bce0:	e76f      	b.n	801bbc2 <_dtoa_r+0x7da>
 801bce2:	f04f 0800 	mov.w	r8, #0
 801bce6:	e7f6      	b.n	801bcd6 <_dtoa_r+0x8ee>
 801bce8:	4698      	mov	r8, r3
 801bcea:	e7f4      	b.n	801bcd6 <_dtoa_r+0x8ee>
 801bcec:	f43f af7d 	beq.w	801bbea <_dtoa_r+0x802>
 801bcf0:	4618      	mov	r0, r3
 801bcf2:	301c      	adds	r0, #28
 801bcf4:	e772      	b.n	801bbdc <_dtoa_r+0x7f4>
 801bcf6:	9b03      	ldr	r3, [sp, #12]
 801bcf8:	2b00      	cmp	r3, #0
 801bcfa:	dc37      	bgt.n	801bd6c <_dtoa_r+0x984>
 801bcfc:	9b06      	ldr	r3, [sp, #24]
 801bcfe:	2b02      	cmp	r3, #2
 801bd00:	dd34      	ble.n	801bd6c <_dtoa_r+0x984>
 801bd02:	9b03      	ldr	r3, [sp, #12]
 801bd04:	9302      	str	r3, [sp, #8]
 801bd06:	9b02      	ldr	r3, [sp, #8]
 801bd08:	b96b      	cbnz	r3, 801bd26 <_dtoa_r+0x93e>
 801bd0a:	4631      	mov	r1, r6
 801bd0c:	2205      	movs	r2, #5
 801bd0e:	4620      	mov	r0, r4
 801bd10:	f000 fbfc 	bl	801c50c <__multadd>
 801bd14:	4601      	mov	r1, r0
 801bd16:	4606      	mov	r6, r0
 801bd18:	ee18 0a10 	vmov	r0, s16
 801bd1c:	f000 fe16 	bl	801c94c <__mcmp>
 801bd20:	2800      	cmp	r0, #0
 801bd22:	f73f adbb 	bgt.w	801b89c <_dtoa_r+0x4b4>
 801bd26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bd28:	9d01      	ldr	r5, [sp, #4]
 801bd2a:	43db      	mvns	r3, r3
 801bd2c:	9300      	str	r3, [sp, #0]
 801bd2e:	f04f 0800 	mov.w	r8, #0
 801bd32:	4631      	mov	r1, r6
 801bd34:	4620      	mov	r0, r4
 801bd36:	f000 fbc7 	bl	801c4c8 <_Bfree>
 801bd3a:	2f00      	cmp	r7, #0
 801bd3c:	f43f aea4 	beq.w	801ba88 <_dtoa_r+0x6a0>
 801bd40:	f1b8 0f00 	cmp.w	r8, #0
 801bd44:	d005      	beq.n	801bd52 <_dtoa_r+0x96a>
 801bd46:	45b8      	cmp	r8, r7
 801bd48:	d003      	beq.n	801bd52 <_dtoa_r+0x96a>
 801bd4a:	4641      	mov	r1, r8
 801bd4c:	4620      	mov	r0, r4
 801bd4e:	f000 fbbb 	bl	801c4c8 <_Bfree>
 801bd52:	4639      	mov	r1, r7
 801bd54:	4620      	mov	r0, r4
 801bd56:	f000 fbb7 	bl	801c4c8 <_Bfree>
 801bd5a:	e695      	b.n	801ba88 <_dtoa_r+0x6a0>
 801bd5c:	2600      	movs	r6, #0
 801bd5e:	4637      	mov	r7, r6
 801bd60:	e7e1      	b.n	801bd26 <_dtoa_r+0x93e>
 801bd62:	9700      	str	r7, [sp, #0]
 801bd64:	4637      	mov	r7, r6
 801bd66:	e599      	b.n	801b89c <_dtoa_r+0x4b4>
 801bd68:	40240000 	.word	0x40240000
 801bd6c:	9b08      	ldr	r3, [sp, #32]
 801bd6e:	2b00      	cmp	r3, #0
 801bd70:	f000 80ca 	beq.w	801bf08 <_dtoa_r+0xb20>
 801bd74:	9b03      	ldr	r3, [sp, #12]
 801bd76:	9302      	str	r3, [sp, #8]
 801bd78:	2d00      	cmp	r5, #0
 801bd7a:	dd05      	ble.n	801bd88 <_dtoa_r+0x9a0>
 801bd7c:	4639      	mov	r1, r7
 801bd7e:	462a      	mov	r2, r5
 801bd80:	4620      	mov	r0, r4
 801bd82:	f000 fd73 	bl	801c86c <__lshift>
 801bd86:	4607      	mov	r7, r0
 801bd88:	f1b8 0f00 	cmp.w	r8, #0
 801bd8c:	d05b      	beq.n	801be46 <_dtoa_r+0xa5e>
 801bd8e:	6879      	ldr	r1, [r7, #4]
 801bd90:	4620      	mov	r0, r4
 801bd92:	f000 fb59 	bl	801c448 <_Balloc>
 801bd96:	4605      	mov	r5, r0
 801bd98:	b928      	cbnz	r0, 801bda6 <_dtoa_r+0x9be>
 801bd9a:	4b87      	ldr	r3, [pc, #540]	; (801bfb8 <_dtoa_r+0xbd0>)
 801bd9c:	4602      	mov	r2, r0
 801bd9e:	f240 21ea 	movw	r1, #746	; 0x2ea
 801bda2:	f7ff bb3b 	b.w	801b41c <_dtoa_r+0x34>
 801bda6:	693a      	ldr	r2, [r7, #16]
 801bda8:	3202      	adds	r2, #2
 801bdaa:	0092      	lsls	r2, r2, #2
 801bdac:	f107 010c 	add.w	r1, r7, #12
 801bdb0:	300c      	adds	r0, #12
 801bdb2:	f7fe fa97 	bl	801a2e4 <memcpy>
 801bdb6:	2201      	movs	r2, #1
 801bdb8:	4629      	mov	r1, r5
 801bdba:	4620      	mov	r0, r4
 801bdbc:	f000 fd56 	bl	801c86c <__lshift>
 801bdc0:	9b01      	ldr	r3, [sp, #4]
 801bdc2:	f103 0901 	add.w	r9, r3, #1
 801bdc6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801bdca:	4413      	add	r3, r2
 801bdcc:	9305      	str	r3, [sp, #20]
 801bdce:	f00a 0301 	and.w	r3, sl, #1
 801bdd2:	46b8      	mov	r8, r7
 801bdd4:	9304      	str	r3, [sp, #16]
 801bdd6:	4607      	mov	r7, r0
 801bdd8:	4631      	mov	r1, r6
 801bdda:	ee18 0a10 	vmov	r0, s16
 801bdde:	f7ff fa75 	bl	801b2cc <quorem>
 801bde2:	4641      	mov	r1, r8
 801bde4:	9002      	str	r0, [sp, #8]
 801bde6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801bdea:	ee18 0a10 	vmov	r0, s16
 801bdee:	f000 fdad 	bl	801c94c <__mcmp>
 801bdf2:	463a      	mov	r2, r7
 801bdf4:	9003      	str	r0, [sp, #12]
 801bdf6:	4631      	mov	r1, r6
 801bdf8:	4620      	mov	r0, r4
 801bdfa:	f000 fdc3 	bl	801c984 <__mdiff>
 801bdfe:	68c2      	ldr	r2, [r0, #12]
 801be00:	f109 3bff 	add.w	fp, r9, #4294967295
 801be04:	4605      	mov	r5, r0
 801be06:	bb02      	cbnz	r2, 801be4a <_dtoa_r+0xa62>
 801be08:	4601      	mov	r1, r0
 801be0a:	ee18 0a10 	vmov	r0, s16
 801be0e:	f000 fd9d 	bl	801c94c <__mcmp>
 801be12:	4602      	mov	r2, r0
 801be14:	4629      	mov	r1, r5
 801be16:	4620      	mov	r0, r4
 801be18:	9207      	str	r2, [sp, #28]
 801be1a:	f000 fb55 	bl	801c4c8 <_Bfree>
 801be1e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801be22:	ea43 0102 	orr.w	r1, r3, r2
 801be26:	9b04      	ldr	r3, [sp, #16]
 801be28:	430b      	orrs	r3, r1
 801be2a:	464d      	mov	r5, r9
 801be2c:	d10f      	bne.n	801be4e <_dtoa_r+0xa66>
 801be2e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801be32:	d02a      	beq.n	801be8a <_dtoa_r+0xaa2>
 801be34:	9b03      	ldr	r3, [sp, #12]
 801be36:	2b00      	cmp	r3, #0
 801be38:	dd02      	ble.n	801be40 <_dtoa_r+0xa58>
 801be3a:	9b02      	ldr	r3, [sp, #8]
 801be3c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 801be40:	f88b a000 	strb.w	sl, [fp]
 801be44:	e775      	b.n	801bd32 <_dtoa_r+0x94a>
 801be46:	4638      	mov	r0, r7
 801be48:	e7ba      	b.n	801bdc0 <_dtoa_r+0x9d8>
 801be4a:	2201      	movs	r2, #1
 801be4c:	e7e2      	b.n	801be14 <_dtoa_r+0xa2c>
 801be4e:	9b03      	ldr	r3, [sp, #12]
 801be50:	2b00      	cmp	r3, #0
 801be52:	db04      	blt.n	801be5e <_dtoa_r+0xa76>
 801be54:	9906      	ldr	r1, [sp, #24]
 801be56:	430b      	orrs	r3, r1
 801be58:	9904      	ldr	r1, [sp, #16]
 801be5a:	430b      	orrs	r3, r1
 801be5c:	d122      	bne.n	801bea4 <_dtoa_r+0xabc>
 801be5e:	2a00      	cmp	r2, #0
 801be60:	ddee      	ble.n	801be40 <_dtoa_r+0xa58>
 801be62:	ee18 1a10 	vmov	r1, s16
 801be66:	2201      	movs	r2, #1
 801be68:	4620      	mov	r0, r4
 801be6a:	f000 fcff 	bl	801c86c <__lshift>
 801be6e:	4631      	mov	r1, r6
 801be70:	ee08 0a10 	vmov	s16, r0
 801be74:	f000 fd6a 	bl	801c94c <__mcmp>
 801be78:	2800      	cmp	r0, #0
 801be7a:	dc03      	bgt.n	801be84 <_dtoa_r+0xa9c>
 801be7c:	d1e0      	bne.n	801be40 <_dtoa_r+0xa58>
 801be7e:	f01a 0f01 	tst.w	sl, #1
 801be82:	d0dd      	beq.n	801be40 <_dtoa_r+0xa58>
 801be84:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801be88:	d1d7      	bne.n	801be3a <_dtoa_r+0xa52>
 801be8a:	2339      	movs	r3, #57	; 0x39
 801be8c:	f88b 3000 	strb.w	r3, [fp]
 801be90:	462b      	mov	r3, r5
 801be92:	461d      	mov	r5, r3
 801be94:	3b01      	subs	r3, #1
 801be96:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801be9a:	2a39      	cmp	r2, #57	; 0x39
 801be9c:	d071      	beq.n	801bf82 <_dtoa_r+0xb9a>
 801be9e:	3201      	adds	r2, #1
 801bea0:	701a      	strb	r2, [r3, #0]
 801bea2:	e746      	b.n	801bd32 <_dtoa_r+0x94a>
 801bea4:	2a00      	cmp	r2, #0
 801bea6:	dd07      	ble.n	801beb8 <_dtoa_r+0xad0>
 801bea8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801beac:	d0ed      	beq.n	801be8a <_dtoa_r+0xaa2>
 801beae:	f10a 0301 	add.w	r3, sl, #1
 801beb2:	f88b 3000 	strb.w	r3, [fp]
 801beb6:	e73c      	b.n	801bd32 <_dtoa_r+0x94a>
 801beb8:	9b05      	ldr	r3, [sp, #20]
 801beba:	f809 ac01 	strb.w	sl, [r9, #-1]
 801bebe:	4599      	cmp	r9, r3
 801bec0:	d047      	beq.n	801bf52 <_dtoa_r+0xb6a>
 801bec2:	ee18 1a10 	vmov	r1, s16
 801bec6:	2300      	movs	r3, #0
 801bec8:	220a      	movs	r2, #10
 801beca:	4620      	mov	r0, r4
 801becc:	f000 fb1e 	bl	801c50c <__multadd>
 801bed0:	45b8      	cmp	r8, r7
 801bed2:	ee08 0a10 	vmov	s16, r0
 801bed6:	f04f 0300 	mov.w	r3, #0
 801beda:	f04f 020a 	mov.w	r2, #10
 801bede:	4641      	mov	r1, r8
 801bee0:	4620      	mov	r0, r4
 801bee2:	d106      	bne.n	801bef2 <_dtoa_r+0xb0a>
 801bee4:	f000 fb12 	bl	801c50c <__multadd>
 801bee8:	4680      	mov	r8, r0
 801beea:	4607      	mov	r7, r0
 801beec:	f109 0901 	add.w	r9, r9, #1
 801bef0:	e772      	b.n	801bdd8 <_dtoa_r+0x9f0>
 801bef2:	f000 fb0b 	bl	801c50c <__multadd>
 801bef6:	4639      	mov	r1, r7
 801bef8:	4680      	mov	r8, r0
 801befa:	2300      	movs	r3, #0
 801befc:	220a      	movs	r2, #10
 801befe:	4620      	mov	r0, r4
 801bf00:	f000 fb04 	bl	801c50c <__multadd>
 801bf04:	4607      	mov	r7, r0
 801bf06:	e7f1      	b.n	801beec <_dtoa_r+0xb04>
 801bf08:	9b03      	ldr	r3, [sp, #12]
 801bf0a:	9302      	str	r3, [sp, #8]
 801bf0c:	9d01      	ldr	r5, [sp, #4]
 801bf0e:	ee18 0a10 	vmov	r0, s16
 801bf12:	4631      	mov	r1, r6
 801bf14:	f7ff f9da 	bl	801b2cc <quorem>
 801bf18:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801bf1c:	9b01      	ldr	r3, [sp, #4]
 801bf1e:	f805 ab01 	strb.w	sl, [r5], #1
 801bf22:	1aea      	subs	r2, r5, r3
 801bf24:	9b02      	ldr	r3, [sp, #8]
 801bf26:	4293      	cmp	r3, r2
 801bf28:	dd09      	ble.n	801bf3e <_dtoa_r+0xb56>
 801bf2a:	ee18 1a10 	vmov	r1, s16
 801bf2e:	2300      	movs	r3, #0
 801bf30:	220a      	movs	r2, #10
 801bf32:	4620      	mov	r0, r4
 801bf34:	f000 faea 	bl	801c50c <__multadd>
 801bf38:	ee08 0a10 	vmov	s16, r0
 801bf3c:	e7e7      	b.n	801bf0e <_dtoa_r+0xb26>
 801bf3e:	9b02      	ldr	r3, [sp, #8]
 801bf40:	2b00      	cmp	r3, #0
 801bf42:	bfc8      	it	gt
 801bf44:	461d      	movgt	r5, r3
 801bf46:	9b01      	ldr	r3, [sp, #4]
 801bf48:	bfd8      	it	le
 801bf4a:	2501      	movle	r5, #1
 801bf4c:	441d      	add	r5, r3
 801bf4e:	f04f 0800 	mov.w	r8, #0
 801bf52:	ee18 1a10 	vmov	r1, s16
 801bf56:	2201      	movs	r2, #1
 801bf58:	4620      	mov	r0, r4
 801bf5a:	f000 fc87 	bl	801c86c <__lshift>
 801bf5e:	4631      	mov	r1, r6
 801bf60:	ee08 0a10 	vmov	s16, r0
 801bf64:	f000 fcf2 	bl	801c94c <__mcmp>
 801bf68:	2800      	cmp	r0, #0
 801bf6a:	dc91      	bgt.n	801be90 <_dtoa_r+0xaa8>
 801bf6c:	d102      	bne.n	801bf74 <_dtoa_r+0xb8c>
 801bf6e:	f01a 0f01 	tst.w	sl, #1
 801bf72:	d18d      	bne.n	801be90 <_dtoa_r+0xaa8>
 801bf74:	462b      	mov	r3, r5
 801bf76:	461d      	mov	r5, r3
 801bf78:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801bf7c:	2a30      	cmp	r2, #48	; 0x30
 801bf7e:	d0fa      	beq.n	801bf76 <_dtoa_r+0xb8e>
 801bf80:	e6d7      	b.n	801bd32 <_dtoa_r+0x94a>
 801bf82:	9a01      	ldr	r2, [sp, #4]
 801bf84:	429a      	cmp	r2, r3
 801bf86:	d184      	bne.n	801be92 <_dtoa_r+0xaaa>
 801bf88:	9b00      	ldr	r3, [sp, #0]
 801bf8a:	3301      	adds	r3, #1
 801bf8c:	9300      	str	r3, [sp, #0]
 801bf8e:	2331      	movs	r3, #49	; 0x31
 801bf90:	7013      	strb	r3, [r2, #0]
 801bf92:	e6ce      	b.n	801bd32 <_dtoa_r+0x94a>
 801bf94:	4b09      	ldr	r3, [pc, #36]	; (801bfbc <_dtoa_r+0xbd4>)
 801bf96:	f7ff ba95 	b.w	801b4c4 <_dtoa_r+0xdc>
 801bf9a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801bf9c:	2b00      	cmp	r3, #0
 801bf9e:	f47f aa6e 	bne.w	801b47e <_dtoa_r+0x96>
 801bfa2:	4b07      	ldr	r3, [pc, #28]	; (801bfc0 <_dtoa_r+0xbd8>)
 801bfa4:	f7ff ba8e 	b.w	801b4c4 <_dtoa_r+0xdc>
 801bfa8:	9b02      	ldr	r3, [sp, #8]
 801bfaa:	2b00      	cmp	r3, #0
 801bfac:	dcae      	bgt.n	801bf0c <_dtoa_r+0xb24>
 801bfae:	9b06      	ldr	r3, [sp, #24]
 801bfb0:	2b02      	cmp	r3, #2
 801bfb2:	f73f aea8 	bgt.w	801bd06 <_dtoa_r+0x91e>
 801bfb6:	e7a9      	b.n	801bf0c <_dtoa_r+0xb24>
 801bfb8:	0806cade 	.word	0x0806cade
 801bfbc:	0806c9a4 	.word	0x0806c9a4
 801bfc0:	0806ca76 	.word	0x0806ca76

0801bfc4 <__sflush_r>:
 801bfc4:	898a      	ldrh	r2, [r1, #12]
 801bfc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bfca:	4605      	mov	r5, r0
 801bfcc:	0710      	lsls	r0, r2, #28
 801bfce:	460c      	mov	r4, r1
 801bfd0:	d458      	bmi.n	801c084 <__sflush_r+0xc0>
 801bfd2:	684b      	ldr	r3, [r1, #4]
 801bfd4:	2b00      	cmp	r3, #0
 801bfd6:	dc05      	bgt.n	801bfe4 <__sflush_r+0x20>
 801bfd8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801bfda:	2b00      	cmp	r3, #0
 801bfdc:	dc02      	bgt.n	801bfe4 <__sflush_r+0x20>
 801bfde:	2000      	movs	r0, #0
 801bfe0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bfe4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801bfe6:	2e00      	cmp	r6, #0
 801bfe8:	d0f9      	beq.n	801bfde <__sflush_r+0x1a>
 801bfea:	2300      	movs	r3, #0
 801bfec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801bff0:	682f      	ldr	r7, [r5, #0]
 801bff2:	602b      	str	r3, [r5, #0]
 801bff4:	d032      	beq.n	801c05c <__sflush_r+0x98>
 801bff6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801bff8:	89a3      	ldrh	r3, [r4, #12]
 801bffa:	075a      	lsls	r2, r3, #29
 801bffc:	d505      	bpl.n	801c00a <__sflush_r+0x46>
 801bffe:	6863      	ldr	r3, [r4, #4]
 801c000:	1ac0      	subs	r0, r0, r3
 801c002:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801c004:	b10b      	cbz	r3, 801c00a <__sflush_r+0x46>
 801c006:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801c008:	1ac0      	subs	r0, r0, r3
 801c00a:	2300      	movs	r3, #0
 801c00c:	4602      	mov	r2, r0
 801c00e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801c010:	6a21      	ldr	r1, [r4, #32]
 801c012:	4628      	mov	r0, r5
 801c014:	47b0      	blx	r6
 801c016:	1c43      	adds	r3, r0, #1
 801c018:	89a3      	ldrh	r3, [r4, #12]
 801c01a:	d106      	bne.n	801c02a <__sflush_r+0x66>
 801c01c:	6829      	ldr	r1, [r5, #0]
 801c01e:	291d      	cmp	r1, #29
 801c020:	d82c      	bhi.n	801c07c <__sflush_r+0xb8>
 801c022:	4a2a      	ldr	r2, [pc, #168]	; (801c0cc <__sflush_r+0x108>)
 801c024:	40ca      	lsrs	r2, r1
 801c026:	07d6      	lsls	r6, r2, #31
 801c028:	d528      	bpl.n	801c07c <__sflush_r+0xb8>
 801c02a:	2200      	movs	r2, #0
 801c02c:	6062      	str	r2, [r4, #4]
 801c02e:	04d9      	lsls	r1, r3, #19
 801c030:	6922      	ldr	r2, [r4, #16]
 801c032:	6022      	str	r2, [r4, #0]
 801c034:	d504      	bpl.n	801c040 <__sflush_r+0x7c>
 801c036:	1c42      	adds	r2, r0, #1
 801c038:	d101      	bne.n	801c03e <__sflush_r+0x7a>
 801c03a:	682b      	ldr	r3, [r5, #0]
 801c03c:	b903      	cbnz	r3, 801c040 <__sflush_r+0x7c>
 801c03e:	6560      	str	r0, [r4, #84]	; 0x54
 801c040:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801c042:	602f      	str	r7, [r5, #0]
 801c044:	2900      	cmp	r1, #0
 801c046:	d0ca      	beq.n	801bfde <__sflush_r+0x1a>
 801c048:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801c04c:	4299      	cmp	r1, r3
 801c04e:	d002      	beq.n	801c056 <__sflush_r+0x92>
 801c050:	4628      	mov	r0, r5
 801c052:	f7fe f973 	bl	801a33c <_free_r>
 801c056:	2000      	movs	r0, #0
 801c058:	6360      	str	r0, [r4, #52]	; 0x34
 801c05a:	e7c1      	b.n	801bfe0 <__sflush_r+0x1c>
 801c05c:	6a21      	ldr	r1, [r4, #32]
 801c05e:	2301      	movs	r3, #1
 801c060:	4628      	mov	r0, r5
 801c062:	47b0      	blx	r6
 801c064:	1c41      	adds	r1, r0, #1
 801c066:	d1c7      	bne.n	801bff8 <__sflush_r+0x34>
 801c068:	682b      	ldr	r3, [r5, #0]
 801c06a:	2b00      	cmp	r3, #0
 801c06c:	d0c4      	beq.n	801bff8 <__sflush_r+0x34>
 801c06e:	2b1d      	cmp	r3, #29
 801c070:	d001      	beq.n	801c076 <__sflush_r+0xb2>
 801c072:	2b16      	cmp	r3, #22
 801c074:	d101      	bne.n	801c07a <__sflush_r+0xb6>
 801c076:	602f      	str	r7, [r5, #0]
 801c078:	e7b1      	b.n	801bfde <__sflush_r+0x1a>
 801c07a:	89a3      	ldrh	r3, [r4, #12]
 801c07c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c080:	81a3      	strh	r3, [r4, #12]
 801c082:	e7ad      	b.n	801bfe0 <__sflush_r+0x1c>
 801c084:	690f      	ldr	r7, [r1, #16]
 801c086:	2f00      	cmp	r7, #0
 801c088:	d0a9      	beq.n	801bfde <__sflush_r+0x1a>
 801c08a:	0793      	lsls	r3, r2, #30
 801c08c:	680e      	ldr	r6, [r1, #0]
 801c08e:	bf08      	it	eq
 801c090:	694b      	ldreq	r3, [r1, #20]
 801c092:	600f      	str	r7, [r1, #0]
 801c094:	bf18      	it	ne
 801c096:	2300      	movne	r3, #0
 801c098:	eba6 0807 	sub.w	r8, r6, r7
 801c09c:	608b      	str	r3, [r1, #8]
 801c09e:	f1b8 0f00 	cmp.w	r8, #0
 801c0a2:	dd9c      	ble.n	801bfde <__sflush_r+0x1a>
 801c0a4:	6a21      	ldr	r1, [r4, #32]
 801c0a6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801c0a8:	4643      	mov	r3, r8
 801c0aa:	463a      	mov	r2, r7
 801c0ac:	4628      	mov	r0, r5
 801c0ae:	47b0      	blx	r6
 801c0b0:	2800      	cmp	r0, #0
 801c0b2:	dc06      	bgt.n	801c0c2 <__sflush_r+0xfe>
 801c0b4:	89a3      	ldrh	r3, [r4, #12]
 801c0b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c0ba:	81a3      	strh	r3, [r4, #12]
 801c0bc:	f04f 30ff 	mov.w	r0, #4294967295
 801c0c0:	e78e      	b.n	801bfe0 <__sflush_r+0x1c>
 801c0c2:	4407      	add	r7, r0
 801c0c4:	eba8 0800 	sub.w	r8, r8, r0
 801c0c8:	e7e9      	b.n	801c09e <__sflush_r+0xda>
 801c0ca:	bf00      	nop
 801c0cc:	20400001 	.word	0x20400001

0801c0d0 <_fflush_r>:
 801c0d0:	b538      	push	{r3, r4, r5, lr}
 801c0d2:	690b      	ldr	r3, [r1, #16]
 801c0d4:	4605      	mov	r5, r0
 801c0d6:	460c      	mov	r4, r1
 801c0d8:	b913      	cbnz	r3, 801c0e0 <_fflush_r+0x10>
 801c0da:	2500      	movs	r5, #0
 801c0dc:	4628      	mov	r0, r5
 801c0de:	bd38      	pop	{r3, r4, r5, pc}
 801c0e0:	b118      	cbz	r0, 801c0ea <_fflush_r+0x1a>
 801c0e2:	6983      	ldr	r3, [r0, #24]
 801c0e4:	b90b      	cbnz	r3, 801c0ea <_fflush_r+0x1a>
 801c0e6:	f000 f887 	bl	801c1f8 <__sinit>
 801c0ea:	4b14      	ldr	r3, [pc, #80]	; (801c13c <_fflush_r+0x6c>)
 801c0ec:	429c      	cmp	r4, r3
 801c0ee:	d11b      	bne.n	801c128 <_fflush_r+0x58>
 801c0f0:	686c      	ldr	r4, [r5, #4]
 801c0f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c0f6:	2b00      	cmp	r3, #0
 801c0f8:	d0ef      	beq.n	801c0da <_fflush_r+0xa>
 801c0fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801c0fc:	07d0      	lsls	r0, r2, #31
 801c0fe:	d404      	bmi.n	801c10a <_fflush_r+0x3a>
 801c100:	0599      	lsls	r1, r3, #22
 801c102:	d402      	bmi.n	801c10a <_fflush_r+0x3a>
 801c104:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801c106:	f000 f92c 	bl	801c362 <__retarget_lock_acquire_recursive>
 801c10a:	4628      	mov	r0, r5
 801c10c:	4621      	mov	r1, r4
 801c10e:	f7ff ff59 	bl	801bfc4 <__sflush_r>
 801c112:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801c114:	07da      	lsls	r2, r3, #31
 801c116:	4605      	mov	r5, r0
 801c118:	d4e0      	bmi.n	801c0dc <_fflush_r+0xc>
 801c11a:	89a3      	ldrh	r3, [r4, #12]
 801c11c:	059b      	lsls	r3, r3, #22
 801c11e:	d4dd      	bmi.n	801c0dc <_fflush_r+0xc>
 801c120:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801c122:	f000 f91f 	bl	801c364 <__retarget_lock_release_recursive>
 801c126:	e7d9      	b.n	801c0dc <_fflush_r+0xc>
 801c128:	4b05      	ldr	r3, [pc, #20]	; (801c140 <_fflush_r+0x70>)
 801c12a:	429c      	cmp	r4, r3
 801c12c:	d101      	bne.n	801c132 <_fflush_r+0x62>
 801c12e:	68ac      	ldr	r4, [r5, #8]
 801c130:	e7df      	b.n	801c0f2 <_fflush_r+0x22>
 801c132:	4b04      	ldr	r3, [pc, #16]	; (801c144 <_fflush_r+0x74>)
 801c134:	429c      	cmp	r4, r3
 801c136:	bf08      	it	eq
 801c138:	68ec      	ldreq	r4, [r5, #12]
 801c13a:	e7da      	b.n	801c0f2 <_fflush_r+0x22>
 801c13c:	0806cb10 	.word	0x0806cb10
 801c140:	0806cb30 	.word	0x0806cb30
 801c144:	0806caf0 	.word	0x0806caf0

0801c148 <std>:
 801c148:	2300      	movs	r3, #0
 801c14a:	b510      	push	{r4, lr}
 801c14c:	4604      	mov	r4, r0
 801c14e:	e9c0 3300 	strd	r3, r3, [r0]
 801c152:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801c156:	6083      	str	r3, [r0, #8]
 801c158:	8181      	strh	r1, [r0, #12]
 801c15a:	6643      	str	r3, [r0, #100]	; 0x64
 801c15c:	81c2      	strh	r2, [r0, #14]
 801c15e:	6183      	str	r3, [r0, #24]
 801c160:	4619      	mov	r1, r3
 801c162:	2208      	movs	r2, #8
 801c164:	305c      	adds	r0, #92	; 0x5c
 801c166:	f7fe f8cb 	bl	801a300 <memset>
 801c16a:	4b05      	ldr	r3, [pc, #20]	; (801c180 <std+0x38>)
 801c16c:	6263      	str	r3, [r4, #36]	; 0x24
 801c16e:	4b05      	ldr	r3, [pc, #20]	; (801c184 <std+0x3c>)
 801c170:	62a3      	str	r3, [r4, #40]	; 0x28
 801c172:	4b05      	ldr	r3, [pc, #20]	; (801c188 <std+0x40>)
 801c174:	62e3      	str	r3, [r4, #44]	; 0x2c
 801c176:	4b05      	ldr	r3, [pc, #20]	; (801c18c <std+0x44>)
 801c178:	6224      	str	r4, [r4, #32]
 801c17a:	6323      	str	r3, [r4, #48]	; 0x30
 801c17c:	bd10      	pop	{r4, pc}
 801c17e:	bf00      	nop
 801c180:	0801ce05 	.word	0x0801ce05
 801c184:	0801ce27 	.word	0x0801ce27
 801c188:	0801ce5f 	.word	0x0801ce5f
 801c18c:	0801ce83 	.word	0x0801ce83

0801c190 <_cleanup_r>:
 801c190:	4901      	ldr	r1, [pc, #4]	; (801c198 <_cleanup_r+0x8>)
 801c192:	f000 b8c1 	b.w	801c318 <_fwalk_reent>
 801c196:	bf00      	nop
 801c198:	0801c0d1 	.word	0x0801c0d1

0801c19c <__sfmoreglue>:
 801c19c:	b570      	push	{r4, r5, r6, lr}
 801c19e:	2268      	movs	r2, #104	; 0x68
 801c1a0:	1e4d      	subs	r5, r1, #1
 801c1a2:	4355      	muls	r5, r2
 801c1a4:	460e      	mov	r6, r1
 801c1a6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801c1aa:	f7fe f933 	bl	801a414 <_malloc_r>
 801c1ae:	4604      	mov	r4, r0
 801c1b0:	b140      	cbz	r0, 801c1c4 <__sfmoreglue+0x28>
 801c1b2:	2100      	movs	r1, #0
 801c1b4:	e9c0 1600 	strd	r1, r6, [r0]
 801c1b8:	300c      	adds	r0, #12
 801c1ba:	60a0      	str	r0, [r4, #8]
 801c1bc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801c1c0:	f7fe f89e 	bl	801a300 <memset>
 801c1c4:	4620      	mov	r0, r4
 801c1c6:	bd70      	pop	{r4, r5, r6, pc}

0801c1c8 <__sfp_lock_acquire>:
 801c1c8:	4801      	ldr	r0, [pc, #4]	; (801c1d0 <__sfp_lock_acquire+0x8>)
 801c1ca:	f000 b8ca 	b.w	801c362 <__retarget_lock_acquire_recursive>
 801c1ce:	bf00      	nop
 801c1d0:	20013e79 	.word	0x20013e79

0801c1d4 <__sfp_lock_release>:
 801c1d4:	4801      	ldr	r0, [pc, #4]	; (801c1dc <__sfp_lock_release+0x8>)
 801c1d6:	f000 b8c5 	b.w	801c364 <__retarget_lock_release_recursive>
 801c1da:	bf00      	nop
 801c1dc:	20013e79 	.word	0x20013e79

0801c1e0 <__sinit_lock_acquire>:
 801c1e0:	4801      	ldr	r0, [pc, #4]	; (801c1e8 <__sinit_lock_acquire+0x8>)
 801c1e2:	f000 b8be 	b.w	801c362 <__retarget_lock_acquire_recursive>
 801c1e6:	bf00      	nop
 801c1e8:	20013e7a 	.word	0x20013e7a

0801c1ec <__sinit_lock_release>:
 801c1ec:	4801      	ldr	r0, [pc, #4]	; (801c1f4 <__sinit_lock_release+0x8>)
 801c1ee:	f000 b8b9 	b.w	801c364 <__retarget_lock_release_recursive>
 801c1f2:	bf00      	nop
 801c1f4:	20013e7a 	.word	0x20013e7a

0801c1f8 <__sinit>:
 801c1f8:	b510      	push	{r4, lr}
 801c1fa:	4604      	mov	r4, r0
 801c1fc:	f7ff fff0 	bl	801c1e0 <__sinit_lock_acquire>
 801c200:	69a3      	ldr	r3, [r4, #24]
 801c202:	b11b      	cbz	r3, 801c20c <__sinit+0x14>
 801c204:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c208:	f7ff bff0 	b.w	801c1ec <__sinit_lock_release>
 801c20c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801c210:	6523      	str	r3, [r4, #80]	; 0x50
 801c212:	4b13      	ldr	r3, [pc, #76]	; (801c260 <__sinit+0x68>)
 801c214:	4a13      	ldr	r2, [pc, #76]	; (801c264 <__sinit+0x6c>)
 801c216:	681b      	ldr	r3, [r3, #0]
 801c218:	62a2      	str	r2, [r4, #40]	; 0x28
 801c21a:	42a3      	cmp	r3, r4
 801c21c:	bf04      	itt	eq
 801c21e:	2301      	moveq	r3, #1
 801c220:	61a3      	streq	r3, [r4, #24]
 801c222:	4620      	mov	r0, r4
 801c224:	f000 f820 	bl	801c268 <__sfp>
 801c228:	6060      	str	r0, [r4, #4]
 801c22a:	4620      	mov	r0, r4
 801c22c:	f000 f81c 	bl	801c268 <__sfp>
 801c230:	60a0      	str	r0, [r4, #8]
 801c232:	4620      	mov	r0, r4
 801c234:	f000 f818 	bl	801c268 <__sfp>
 801c238:	2200      	movs	r2, #0
 801c23a:	60e0      	str	r0, [r4, #12]
 801c23c:	2104      	movs	r1, #4
 801c23e:	6860      	ldr	r0, [r4, #4]
 801c240:	f7ff ff82 	bl	801c148 <std>
 801c244:	68a0      	ldr	r0, [r4, #8]
 801c246:	2201      	movs	r2, #1
 801c248:	2109      	movs	r1, #9
 801c24a:	f7ff ff7d 	bl	801c148 <std>
 801c24e:	68e0      	ldr	r0, [r4, #12]
 801c250:	2202      	movs	r2, #2
 801c252:	2112      	movs	r1, #18
 801c254:	f7ff ff78 	bl	801c148 <std>
 801c258:	2301      	movs	r3, #1
 801c25a:	61a3      	str	r3, [r4, #24]
 801c25c:	e7d2      	b.n	801c204 <__sinit+0xc>
 801c25e:	bf00      	nop
 801c260:	0806c990 	.word	0x0806c990
 801c264:	0801c191 	.word	0x0801c191

0801c268 <__sfp>:
 801c268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c26a:	4607      	mov	r7, r0
 801c26c:	f7ff ffac 	bl	801c1c8 <__sfp_lock_acquire>
 801c270:	4b1e      	ldr	r3, [pc, #120]	; (801c2ec <__sfp+0x84>)
 801c272:	681e      	ldr	r6, [r3, #0]
 801c274:	69b3      	ldr	r3, [r6, #24]
 801c276:	b913      	cbnz	r3, 801c27e <__sfp+0x16>
 801c278:	4630      	mov	r0, r6
 801c27a:	f7ff ffbd 	bl	801c1f8 <__sinit>
 801c27e:	3648      	adds	r6, #72	; 0x48
 801c280:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801c284:	3b01      	subs	r3, #1
 801c286:	d503      	bpl.n	801c290 <__sfp+0x28>
 801c288:	6833      	ldr	r3, [r6, #0]
 801c28a:	b30b      	cbz	r3, 801c2d0 <__sfp+0x68>
 801c28c:	6836      	ldr	r6, [r6, #0]
 801c28e:	e7f7      	b.n	801c280 <__sfp+0x18>
 801c290:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801c294:	b9d5      	cbnz	r5, 801c2cc <__sfp+0x64>
 801c296:	4b16      	ldr	r3, [pc, #88]	; (801c2f0 <__sfp+0x88>)
 801c298:	60e3      	str	r3, [r4, #12]
 801c29a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801c29e:	6665      	str	r5, [r4, #100]	; 0x64
 801c2a0:	f000 f85e 	bl	801c360 <__retarget_lock_init_recursive>
 801c2a4:	f7ff ff96 	bl	801c1d4 <__sfp_lock_release>
 801c2a8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801c2ac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801c2b0:	6025      	str	r5, [r4, #0]
 801c2b2:	61a5      	str	r5, [r4, #24]
 801c2b4:	2208      	movs	r2, #8
 801c2b6:	4629      	mov	r1, r5
 801c2b8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801c2bc:	f7fe f820 	bl	801a300 <memset>
 801c2c0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801c2c4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801c2c8:	4620      	mov	r0, r4
 801c2ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c2cc:	3468      	adds	r4, #104	; 0x68
 801c2ce:	e7d9      	b.n	801c284 <__sfp+0x1c>
 801c2d0:	2104      	movs	r1, #4
 801c2d2:	4638      	mov	r0, r7
 801c2d4:	f7ff ff62 	bl	801c19c <__sfmoreglue>
 801c2d8:	4604      	mov	r4, r0
 801c2da:	6030      	str	r0, [r6, #0]
 801c2dc:	2800      	cmp	r0, #0
 801c2de:	d1d5      	bne.n	801c28c <__sfp+0x24>
 801c2e0:	f7ff ff78 	bl	801c1d4 <__sfp_lock_release>
 801c2e4:	230c      	movs	r3, #12
 801c2e6:	603b      	str	r3, [r7, #0]
 801c2e8:	e7ee      	b.n	801c2c8 <__sfp+0x60>
 801c2ea:	bf00      	nop
 801c2ec:	0806c990 	.word	0x0806c990
 801c2f0:	ffff0001 	.word	0xffff0001

0801c2f4 <fiprintf>:
 801c2f4:	b40e      	push	{r1, r2, r3}
 801c2f6:	b503      	push	{r0, r1, lr}
 801c2f8:	4601      	mov	r1, r0
 801c2fa:	ab03      	add	r3, sp, #12
 801c2fc:	4805      	ldr	r0, [pc, #20]	; (801c314 <fiprintf+0x20>)
 801c2fe:	f853 2b04 	ldr.w	r2, [r3], #4
 801c302:	6800      	ldr	r0, [r0, #0]
 801c304:	9301      	str	r3, [sp, #4]
 801c306:	f000 fc4d 	bl	801cba4 <_vfiprintf_r>
 801c30a:	b002      	add	sp, #8
 801c30c:	f85d eb04 	ldr.w	lr, [sp], #4
 801c310:	b003      	add	sp, #12
 801c312:	4770      	bx	lr
 801c314:	200000c8 	.word	0x200000c8

0801c318 <_fwalk_reent>:
 801c318:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c31c:	4606      	mov	r6, r0
 801c31e:	4688      	mov	r8, r1
 801c320:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801c324:	2700      	movs	r7, #0
 801c326:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801c32a:	f1b9 0901 	subs.w	r9, r9, #1
 801c32e:	d505      	bpl.n	801c33c <_fwalk_reent+0x24>
 801c330:	6824      	ldr	r4, [r4, #0]
 801c332:	2c00      	cmp	r4, #0
 801c334:	d1f7      	bne.n	801c326 <_fwalk_reent+0xe>
 801c336:	4638      	mov	r0, r7
 801c338:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c33c:	89ab      	ldrh	r3, [r5, #12]
 801c33e:	2b01      	cmp	r3, #1
 801c340:	d907      	bls.n	801c352 <_fwalk_reent+0x3a>
 801c342:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801c346:	3301      	adds	r3, #1
 801c348:	d003      	beq.n	801c352 <_fwalk_reent+0x3a>
 801c34a:	4629      	mov	r1, r5
 801c34c:	4630      	mov	r0, r6
 801c34e:	47c0      	blx	r8
 801c350:	4307      	orrs	r7, r0
 801c352:	3568      	adds	r5, #104	; 0x68
 801c354:	e7e9      	b.n	801c32a <_fwalk_reent+0x12>
	...

0801c358 <_localeconv_r>:
 801c358:	4800      	ldr	r0, [pc, #0]	; (801c35c <_localeconv_r+0x4>)
 801c35a:	4770      	bx	lr
 801c35c:	2000021c 	.word	0x2000021c

0801c360 <__retarget_lock_init_recursive>:
 801c360:	4770      	bx	lr

0801c362 <__retarget_lock_acquire_recursive>:
 801c362:	4770      	bx	lr

0801c364 <__retarget_lock_release_recursive>:
 801c364:	4770      	bx	lr

0801c366 <__swhatbuf_r>:
 801c366:	b570      	push	{r4, r5, r6, lr}
 801c368:	460e      	mov	r6, r1
 801c36a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c36e:	2900      	cmp	r1, #0
 801c370:	b096      	sub	sp, #88	; 0x58
 801c372:	4614      	mov	r4, r2
 801c374:	461d      	mov	r5, r3
 801c376:	da08      	bge.n	801c38a <__swhatbuf_r+0x24>
 801c378:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801c37c:	2200      	movs	r2, #0
 801c37e:	602a      	str	r2, [r5, #0]
 801c380:	061a      	lsls	r2, r3, #24
 801c382:	d410      	bmi.n	801c3a6 <__swhatbuf_r+0x40>
 801c384:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801c388:	e00e      	b.n	801c3a8 <__swhatbuf_r+0x42>
 801c38a:	466a      	mov	r2, sp
 801c38c:	f000 fda8 	bl	801cee0 <_fstat_r>
 801c390:	2800      	cmp	r0, #0
 801c392:	dbf1      	blt.n	801c378 <__swhatbuf_r+0x12>
 801c394:	9a01      	ldr	r2, [sp, #4]
 801c396:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801c39a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801c39e:	425a      	negs	r2, r3
 801c3a0:	415a      	adcs	r2, r3
 801c3a2:	602a      	str	r2, [r5, #0]
 801c3a4:	e7ee      	b.n	801c384 <__swhatbuf_r+0x1e>
 801c3a6:	2340      	movs	r3, #64	; 0x40
 801c3a8:	2000      	movs	r0, #0
 801c3aa:	6023      	str	r3, [r4, #0]
 801c3ac:	b016      	add	sp, #88	; 0x58
 801c3ae:	bd70      	pop	{r4, r5, r6, pc}

0801c3b0 <__smakebuf_r>:
 801c3b0:	898b      	ldrh	r3, [r1, #12]
 801c3b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801c3b4:	079d      	lsls	r5, r3, #30
 801c3b6:	4606      	mov	r6, r0
 801c3b8:	460c      	mov	r4, r1
 801c3ba:	d507      	bpl.n	801c3cc <__smakebuf_r+0x1c>
 801c3bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801c3c0:	6023      	str	r3, [r4, #0]
 801c3c2:	6123      	str	r3, [r4, #16]
 801c3c4:	2301      	movs	r3, #1
 801c3c6:	6163      	str	r3, [r4, #20]
 801c3c8:	b002      	add	sp, #8
 801c3ca:	bd70      	pop	{r4, r5, r6, pc}
 801c3cc:	ab01      	add	r3, sp, #4
 801c3ce:	466a      	mov	r2, sp
 801c3d0:	f7ff ffc9 	bl	801c366 <__swhatbuf_r>
 801c3d4:	9900      	ldr	r1, [sp, #0]
 801c3d6:	4605      	mov	r5, r0
 801c3d8:	4630      	mov	r0, r6
 801c3da:	f7fe f81b 	bl	801a414 <_malloc_r>
 801c3de:	b948      	cbnz	r0, 801c3f4 <__smakebuf_r+0x44>
 801c3e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c3e4:	059a      	lsls	r2, r3, #22
 801c3e6:	d4ef      	bmi.n	801c3c8 <__smakebuf_r+0x18>
 801c3e8:	f023 0303 	bic.w	r3, r3, #3
 801c3ec:	f043 0302 	orr.w	r3, r3, #2
 801c3f0:	81a3      	strh	r3, [r4, #12]
 801c3f2:	e7e3      	b.n	801c3bc <__smakebuf_r+0xc>
 801c3f4:	4b0d      	ldr	r3, [pc, #52]	; (801c42c <__smakebuf_r+0x7c>)
 801c3f6:	62b3      	str	r3, [r6, #40]	; 0x28
 801c3f8:	89a3      	ldrh	r3, [r4, #12]
 801c3fa:	6020      	str	r0, [r4, #0]
 801c3fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c400:	81a3      	strh	r3, [r4, #12]
 801c402:	9b00      	ldr	r3, [sp, #0]
 801c404:	6163      	str	r3, [r4, #20]
 801c406:	9b01      	ldr	r3, [sp, #4]
 801c408:	6120      	str	r0, [r4, #16]
 801c40a:	b15b      	cbz	r3, 801c424 <__smakebuf_r+0x74>
 801c40c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c410:	4630      	mov	r0, r6
 801c412:	f000 fd77 	bl	801cf04 <_isatty_r>
 801c416:	b128      	cbz	r0, 801c424 <__smakebuf_r+0x74>
 801c418:	89a3      	ldrh	r3, [r4, #12]
 801c41a:	f023 0303 	bic.w	r3, r3, #3
 801c41e:	f043 0301 	orr.w	r3, r3, #1
 801c422:	81a3      	strh	r3, [r4, #12]
 801c424:	89a0      	ldrh	r0, [r4, #12]
 801c426:	4305      	orrs	r5, r0
 801c428:	81a5      	strh	r5, [r4, #12]
 801c42a:	e7cd      	b.n	801c3c8 <__smakebuf_r+0x18>
 801c42c:	0801c191 	.word	0x0801c191

0801c430 <__malloc_lock>:
 801c430:	4801      	ldr	r0, [pc, #4]	; (801c438 <__malloc_lock+0x8>)
 801c432:	f7ff bf96 	b.w	801c362 <__retarget_lock_acquire_recursive>
 801c436:	bf00      	nop
 801c438:	20013e78 	.word	0x20013e78

0801c43c <__malloc_unlock>:
 801c43c:	4801      	ldr	r0, [pc, #4]	; (801c444 <__malloc_unlock+0x8>)
 801c43e:	f7ff bf91 	b.w	801c364 <__retarget_lock_release_recursive>
 801c442:	bf00      	nop
 801c444:	20013e78 	.word	0x20013e78

0801c448 <_Balloc>:
 801c448:	b570      	push	{r4, r5, r6, lr}
 801c44a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801c44c:	4604      	mov	r4, r0
 801c44e:	460d      	mov	r5, r1
 801c450:	b976      	cbnz	r6, 801c470 <_Balloc+0x28>
 801c452:	2010      	movs	r0, #16
 801c454:	f7fd ff2e 	bl	801a2b4 <malloc>
 801c458:	4602      	mov	r2, r0
 801c45a:	6260      	str	r0, [r4, #36]	; 0x24
 801c45c:	b920      	cbnz	r0, 801c468 <_Balloc+0x20>
 801c45e:	4b18      	ldr	r3, [pc, #96]	; (801c4c0 <_Balloc+0x78>)
 801c460:	4818      	ldr	r0, [pc, #96]	; (801c4c4 <_Balloc+0x7c>)
 801c462:	2166      	movs	r1, #102	; 0x66
 801c464:	f7fe ff14 	bl	801b290 <__assert_func>
 801c468:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801c46c:	6006      	str	r6, [r0, #0]
 801c46e:	60c6      	str	r6, [r0, #12]
 801c470:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801c472:	68f3      	ldr	r3, [r6, #12]
 801c474:	b183      	cbz	r3, 801c498 <_Balloc+0x50>
 801c476:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801c478:	68db      	ldr	r3, [r3, #12]
 801c47a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801c47e:	b9b8      	cbnz	r0, 801c4b0 <_Balloc+0x68>
 801c480:	2101      	movs	r1, #1
 801c482:	fa01 f605 	lsl.w	r6, r1, r5
 801c486:	1d72      	adds	r2, r6, #5
 801c488:	0092      	lsls	r2, r2, #2
 801c48a:	4620      	mov	r0, r4
 801c48c:	f7fd ff40 	bl	801a310 <_calloc_r>
 801c490:	b160      	cbz	r0, 801c4ac <_Balloc+0x64>
 801c492:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801c496:	e00e      	b.n	801c4b6 <_Balloc+0x6e>
 801c498:	2221      	movs	r2, #33	; 0x21
 801c49a:	2104      	movs	r1, #4
 801c49c:	4620      	mov	r0, r4
 801c49e:	f7fd ff37 	bl	801a310 <_calloc_r>
 801c4a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801c4a4:	60f0      	str	r0, [r6, #12]
 801c4a6:	68db      	ldr	r3, [r3, #12]
 801c4a8:	2b00      	cmp	r3, #0
 801c4aa:	d1e4      	bne.n	801c476 <_Balloc+0x2e>
 801c4ac:	2000      	movs	r0, #0
 801c4ae:	bd70      	pop	{r4, r5, r6, pc}
 801c4b0:	6802      	ldr	r2, [r0, #0]
 801c4b2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801c4b6:	2300      	movs	r3, #0
 801c4b8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801c4bc:	e7f7      	b.n	801c4ae <_Balloc+0x66>
 801c4be:	bf00      	nop
 801c4c0:	0806c9c8 	.word	0x0806c9c8
 801c4c4:	0806cb50 	.word	0x0806cb50

0801c4c8 <_Bfree>:
 801c4c8:	b570      	push	{r4, r5, r6, lr}
 801c4ca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801c4cc:	4605      	mov	r5, r0
 801c4ce:	460c      	mov	r4, r1
 801c4d0:	b976      	cbnz	r6, 801c4f0 <_Bfree+0x28>
 801c4d2:	2010      	movs	r0, #16
 801c4d4:	f7fd feee 	bl	801a2b4 <malloc>
 801c4d8:	4602      	mov	r2, r0
 801c4da:	6268      	str	r0, [r5, #36]	; 0x24
 801c4dc:	b920      	cbnz	r0, 801c4e8 <_Bfree+0x20>
 801c4de:	4b09      	ldr	r3, [pc, #36]	; (801c504 <_Bfree+0x3c>)
 801c4e0:	4809      	ldr	r0, [pc, #36]	; (801c508 <_Bfree+0x40>)
 801c4e2:	218a      	movs	r1, #138	; 0x8a
 801c4e4:	f7fe fed4 	bl	801b290 <__assert_func>
 801c4e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801c4ec:	6006      	str	r6, [r0, #0]
 801c4ee:	60c6      	str	r6, [r0, #12]
 801c4f0:	b13c      	cbz	r4, 801c502 <_Bfree+0x3a>
 801c4f2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801c4f4:	6862      	ldr	r2, [r4, #4]
 801c4f6:	68db      	ldr	r3, [r3, #12]
 801c4f8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801c4fc:	6021      	str	r1, [r4, #0]
 801c4fe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801c502:	bd70      	pop	{r4, r5, r6, pc}
 801c504:	0806c9c8 	.word	0x0806c9c8
 801c508:	0806cb50 	.word	0x0806cb50

0801c50c <__multadd>:
 801c50c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c510:	690d      	ldr	r5, [r1, #16]
 801c512:	4607      	mov	r7, r0
 801c514:	460c      	mov	r4, r1
 801c516:	461e      	mov	r6, r3
 801c518:	f101 0c14 	add.w	ip, r1, #20
 801c51c:	2000      	movs	r0, #0
 801c51e:	f8dc 3000 	ldr.w	r3, [ip]
 801c522:	b299      	uxth	r1, r3
 801c524:	fb02 6101 	mla	r1, r2, r1, r6
 801c528:	0c1e      	lsrs	r6, r3, #16
 801c52a:	0c0b      	lsrs	r3, r1, #16
 801c52c:	fb02 3306 	mla	r3, r2, r6, r3
 801c530:	b289      	uxth	r1, r1
 801c532:	3001      	adds	r0, #1
 801c534:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801c538:	4285      	cmp	r5, r0
 801c53a:	f84c 1b04 	str.w	r1, [ip], #4
 801c53e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801c542:	dcec      	bgt.n	801c51e <__multadd+0x12>
 801c544:	b30e      	cbz	r6, 801c58a <__multadd+0x7e>
 801c546:	68a3      	ldr	r3, [r4, #8]
 801c548:	42ab      	cmp	r3, r5
 801c54a:	dc19      	bgt.n	801c580 <__multadd+0x74>
 801c54c:	6861      	ldr	r1, [r4, #4]
 801c54e:	4638      	mov	r0, r7
 801c550:	3101      	adds	r1, #1
 801c552:	f7ff ff79 	bl	801c448 <_Balloc>
 801c556:	4680      	mov	r8, r0
 801c558:	b928      	cbnz	r0, 801c566 <__multadd+0x5a>
 801c55a:	4602      	mov	r2, r0
 801c55c:	4b0c      	ldr	r3, [pc, #48]	; (801c590 <__multadd+0x84>)
 801c55e:	480d      	ldr	r0, [pc, #52]	; (801c594 <__multadd+0x88>)
 801c560:	21b5      	movs	r1, #181	; 0xb5
 801c562:	f7fe fe95 	bl	801b290 <__assert_func>
 801c566:	6922      	ldr	r2, [r4, #16]
 801c568:	3202      	adds	r2, #2
 801c56a:	f104 010c 	add.w	r1, r4, #12
 801c56e:	0092      	lsls	r2, r2, #2
 801c570:	300c      	adds	r0, #12
 801c572:	f7fd feb7 	bl	801a2e4 <memcpy>
 801c576:	4621      	mov	r1, r4
 801c578:	4638      	mov	r0, r7
 801c57a:	f7ff ffa5 	bl	801c4c8 <_Bfree>
 801c57e:	4644      	mov	r4, r8
 801c580:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801c584:	3501      	adds	r5, #1
 801c586:	615e      	str	r6, [r3, #20]
 801c588:	6125      	str	r5, [r4, #16]
 801c58a:	4620      	mov	r0, r4
 801c58c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c590:	0806cade 	.word	0x0806cade
 801c594:	0806cb50 	.word	0x0806cb50

0801c598 <__hi0bits>:
 801c598:	0c03      	lsrs	r3, r0, #16
 801c59a:	041b      	lsls	r3, r3, #16
 801c59c:	b9d3      	cbnz	r3, 801c5d4 <__hi0bits+0x3c>
 801c59e:	0400      	lsls	r0, r0, #16
 801c5a0:	2310      	movs	r3, #16
 801c5a2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801c5a6:	bf04      	itt	eq
 801c5a8:	0200      	lsleq	r0, r0, #8
 801c5aa:	3308      	addeq	r3, #8
 801c5ac:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801c5b0:	bf04      	itt	eq
 801c5b2:	0100      	lsleq	r0, r0, #4
 801c5b4:	3304      	addeq	r3, #4
 801c5b6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801c5ba:	bf04      	itt	eq
 801c5bc:	0080      	lsleq	r0, r0, #2
 801c5be:	3302      	addeq	r3, #2
 801c5c0:	2800      	cmp	r0, #0
 801c5c2:	db05      	blt.n	801c5d0 <__hi0bits+0x38>
 801c5c4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801c5c8:	f103 0301 	add.w	r3, r3, #1
 801c5cc:	bf08      	it	eq
 801c5ce:	2320      	moveq	r3, #32
 801c5d0:	4618      	mov	r0, r3
 801c5d2:	4770      	bx	lr
 801c5d4:	2300      	movs	r3, #0
 801c5d6:	e7e4      	b.n	801c5a2 <__hi0bits+0xa>

0801c5d8 <__lo0bits>:
 801c5d8:	6803      	ldr	r3, [r0, #0]
 801c5da:	f013 0207 	ands.w	r2, r3, #7
 801c5de:	4601      	mov	r1, r0
 801c5e0:	d00b      	beq.n	801c5fa <__lo0bits+0x22>
 801c5e2:	07da      	lsls	r2, r3, #31
 801c5e4:	d423      	bmi.n	801c62e <__lo0bits+0x56>
 801c5e6:	0798      	lsls	r0, r3, #30
 801c5e8:	bf49      	itett	mi
 801c5ea:	085b      	lsrmi	r3, r3, #1
 801c5ec:	089b      	lsrpl	r3, r3, #2
 801c5ee:	2001      	movmi	r0, #1
 801c5f0:	600b      	strmi	r3, [r1, #0]
 801c5f2:	bf5c      	itt	pl
 801c5f4:	600b      	strpl	r3, [r1, #0]
 801c5f6:	2002      	movpl	r0, #2
 801c5f8:	4770      	bx	lr
 801c5fa:	b298      	uxth	r0, r3
 801c5fc:	b9a8      	cbnz	r0, 801c62a <__lo0bits+0x52>
 801c5fe:	0c1b      	lsrs	r3, r3, #16
 801c600:	2010      	movs	r0, #16
 801c602:	b2da      	uxtb	r2, r3
 801c604:	b90a      	cbnz	r2, 801c60a <__lo0bits+0x32>
 801c606:	3008      	adds	r0, #8
 801c608:	0a1b      	lsrs	r3, r3, #8
 801c60a:	071a      	lsls	r2, r3, #28
 801c60c:	bf04      	itt	eq
 801c60e:	091b      	lsreq	r3, r3, #4
 801c610:	3004      	addeq	r0, #4
 801c612:	079a      	lsls	r2, r3, #30
 801c614:	bf04      	itt	eq
 801c616:	089b      	lsreq	r3, r3, #2
 801c618:	3002      	addeq	r0, #2
 801c61a:	07da      	lsls	r2, r3, #31
 801c61c:	d403      	bmi.n	801c626 <__lo0bits+0x4e>
 801c61e:	085b      	lsrs	r3, r3, #1
 801c620:	f100 0001 	add.w	r0, r0, #1
 801c624:	d005      	beq.n	801c632 <__lo0bits+0x5a>
 801c626:	600b      	str	r3, [r1, #0]
 801c628:	4770      	bx	lr
 801c62a:	4610      	mov	r0, r2
 801c62c:	e7e9      	b.n	801c602 <__lo0bits+0x2a>
 801c62e:	2000      	movs	r0, #0
 801c630:	4770      	bx	lr
 801c632:	2020      	movs	r0, #32
 801c634:	4770      	bx	lr
	...

0801c638 <__i2b>:
 801c638:	b510      	push	{r4, lr}
 801c63a:	460c      	mov	r4, r1
 801c63c:	2101      	movs	r1, #1
 801c63e:	f7ff ff03 	bl	801c448 <_Balloc>
 801c642:	4602      	mov	r2, r0
 801c644:	b928      	cbnz	r0, 801c652 <__i2b+0x1a>
 801c646:	4b05      	ldr	r3, [pc, #20]	; (801c65c <__i2b+0x24>)
 801c648:	4805      	ldr	r0, [pc, #20]	; (801c660 <__i2b+0x28>)
 801c64a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801c64e:	f7fe fe1f 	bl	801b290 <__assert_func>
 801c652:	2301      	movs	r3, #1
 801c654:	6144      	str	r4, [r0, #20]
 801c656:	6103      	str	r3, [r0, #16]
 801c658:	bd10      	pop	{r4, pc}
 801c65a:	bf00      	nop
 801c65c:	0806cade 	.word	0x0806cade
 801c660:	0806cb50 	.word	0x0806cb50

0801c664 <__multiply>:
 801c664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c668:	4691      	mov	r9, r2
 801c66a:	690a      	ldr	r2, [r1, #16]
 801c66c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801c670:	429a      	cmp	r2, r3
 801c672:	bfb8      	it	lt
 801c674:	460b      	movlt	r3, r1
 801c676:	460c      	mov	r4, r1
 801c678:	bfbc      	itt	lt
 801c67a:	464c      	movlt	r4, r9
 801c67c:	4699      	movlt	r9, r3
 801c67e:	6927      	ldr	r7, [r4, #16]
 801c680:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801c684:	68a3      	ldr	r3, [r4, #8]
 801c686:	6861      	ldr	r1, [r4, #4]
 801c688:	eb07 060a 	add.w	r6, r7, sl
 801c68c:	42b3      	cmp	r3, r6
 801c68e:	b085      	sub	sp, #20
 801c690:	bfb8      	it	lt
 801c692:	3101      	addlt	r1, #1
 801c694:	f7ff fed8 	bl	801c448 <_Balloc>
 801c698:	b930      	cbnz	r0, 801c6a8 <__multiply+0x44>
 801c69a:	4602      	mov	r2, r0
 801c69c:	4b44      	ldr	r3, [pc, #272]	; (801c7b0 <__multiply+0x14c>)
 801c69e:	4845      	ldr	r0, [pc, #276]	; (801c7b4 <__multiply+0x150>)
 801c6a0:	f240 115d 	movw	r1, #349	; 0x15d
 801c6a4:	f7fe fdf4 	bl	801b290 <__assert_func>
 801c6a8:	f100 0514 	add.w	r5, r0, #20
 801c6ac:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801c6b0:	462b      	mov	r3, r5
 801c6b2:	2200      	movs	r2, #0
 801c6b4:	4543      	cmp	r3, r8
 801c6b6:	d321      	bcc.n	801c6fc <__multiply+0x98>
 801c6b8:	f104 0314 	add.w	r3, r4, #20
 801c6bc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801c6c0:	f109 0314 	add.w	r3, r9, #20
 801c6c4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801c6c8:	9202      	str	r2, [sp, #8]
 801c6ca:	1b3a      	subs	r2, r7, r4
 801c6cc:	3a15      	subs	r2, #21
 801c6ce:	f022 0203 	bic.w	r2, r2, #3
 801c6d2:	3204      	adds	r2, #4
 801c6d4:	f104 0115 	add.w	r1, r4, #21
 801c6d8:	428f      	cmp	r7, r1
 801c6da:	bf38      	it	cc
 801c6dc:	2204      	movcc	r2, #4
 801c6de:	9201      	str	r2, [sp, #4]
 801c6e0:	9a02      	ldr	r2, [sp, #8]
 801c6e2:	9303      	str	r3, [sp, #12]
 801c6e4:	429a      	cmp	r2, r3
 801c6e6:	d80c      	bhi.n	801c702 <__multiply+0x9e>
 801c6e8:	2e00      	cmp	r6, #0
 801c6ea:	dd03      	ble.n	801c6f4 <__multiply+0x90>
 801c6ec:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801c6f0:	2b00      	cmp	r3, #0
 801c6f2:	d05a      	beq.n	801c7aa <__multiply+0x146>
 801c6f4:	6106      	str	r6, [r0, #16]
 801c6f6:	b005      	add	sp, #20
 801c6f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c6fc:	f843 2b04 	str.w	r2, [r3], #4
 801c700:	e7d8      	b.n	801c6b4 <__multiply+0x50>
 801c702:	f8b3 a000 	ldrh.w	sl, [r3]
 801c706:	f1ba 0f00 	cmp.w	sl, #0
 801c70a:	d024      	beq.n	801c756 <__multiply+0xf2>
 801c70c:	f104 0e14 	add.w	lr, r4, #20
 801c710:	46a9      	mov	r9, r5
 801c712:	f04f 0c00 	mov.w	ip, #0
 801c716:	f85e 2b04 	ldr.w	r2, [lr], #4
 801c71a:	f8d9 1000 	ldr.w	r1, [r9]
 801c71e:	fa1f fb82 	uxth.w	fp, r2
 801c722:	b289      	uxth	r1, r1
 801c724:	fb0a 110b 	mla	r1, sl, fp, r1
 801c728:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801c72c:	f8d9 2000 	ldr.w	r2, [r9]
 801c730:	4461      	add	r1, ip
 801c732:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801c736:	fb0a c20b 	mla	r2, sl, fp, ip
 801c73a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801c73e:	b289      	uxth	r1, r1
 801c740:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801c744:	4577      	cmp	r7, lr
 801c746:	f849 1b04 	str.w	r1, [r9], #4
 801c74a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801c74e:	d8e2      	bhi.n	801c716 <__multiply+0xb2>
 801c750:	9a01      	ldr	r2, [sp, #4]
 801c752:	f845 c002 	str.w	ip, [r5, r2]
 801c756:	9a03      	ldr	r2, [sp, #12]
 801c758:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801c75c:	3304      	adds	r3, #4
 801c75e:	f1b9 0f00 	cmp.w	r9, #0
 801c762:	d020      	beq.n	801c7a6 <__multiply+0x142>
 801c764:	6829      	ldr	r1, [r5, #0]
 801c766:	f104 0c14 	add.w	ip, r4, #20
 801c76a:	46ae      	mov	lr, r5
 801c76c:	f04f 0a00 	mov.w	sl, #0
 801c770:	f8bc b000 	ldrh.w	fp, [ip]
 801c774:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801c778:	fb09 220b 	mla	r2, r9, fp, r2
 801c77c:	4492      	add	sl, r2
 801c77e:	b289      	uxth	r1, r1
 801c780:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 801c784:	f84e 1b04 	str.w	r1, [lr], #4
 801c788:	f85c 2b04 	ldr.w	r2, [ip], #4
 801c78c:	f8be 1000 	ldrh.w	r1, [lr]
 801c790:	0c12      	lsrs	r2, r2, #16
 801c792:	fb09 1102 	mla	r1, r9, r2, r1
 801c796:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801c79a:	4567      	cmp	r7, ip
 801c79c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801c7a0:	d8e6      	bhi.n	801c770 <__multiply+0x10c>
 801c7a2:	9a01      	ldr	r2, [sp, #4]
 801c7a4:	50a9      	str	r1, [r5, r2]
 801c7a6:	3504      	adds	r5, #4
 801c7a8:	e79a      	b.n	801c6e0 <__multiply+0x7c>
 801c7aa:	3e01      	subs	r6, #1
 801c7ac:	e79c      	b.n	801c6e8 <__multiply+0x84>
 801c7ae:	bf00      	nop
 801c7b0:	0806cade 	.word	0x0806cade
 801c7b4:	0806cb50 	.word	0x0806cb50

0801c7b8 <__pow5mult>:
 801c7b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c7bc:	4615      	mov	r5, r2
 801c7be:	f012 0203 	ands.w	r2, r2, #3
 801c7c2:	4606      	mov	r6, r0
 801c7c4:	460f      	mov	r7, r1
 801c7c6:	d007      	beq.n	801c7d8 <__pow5mult+0x20>
 801c7c8:	4c25      	ldr	r4, [pc, #148]	; (801c860 <__pow5mult+0xa8>)
 801c7ca:	3a01      	subs	r2, #1
 801c7cc:	2300      	movs	r3, #0
 801c7ce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801c7d2:	f7ff fe9b 	bl	801c50c <__multadd>
 801c7d6:	4607      	mov	r7, r0
 801c7d8:	10ad      	asrs	r5, r5, #2
 801c7da:	d03d      	beq.n	801c858 <__pow5mult+0xa0>
 801c7dc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801c7de:	b97c      	cbnz	r4, 801c800 <__pow5mult+0x48>
 801c7e0:	2010      	movs	r0, #16
 801c7e2:	f7fd fd67 	bl	801a2b4 <malloc>
 801c7e6:	4602      	mov	r2, r0
 801c7e8:	6270      	str	r0, [r6, #36]	; 0x24
 801c7ea:	b928      	cbnz	r0, 801c7f8 <__pow5mult+0x40>
 801c7ec:	4b1d      	ldr	r3, [pc, #116]	; (801c864 <__pow5mult+0xac>)
 801c7ee:	481e      	ldr	r0, [pc, #120]	; (801c868 <__pow5mult+0xb0>)
 801c7f0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801c7f4:	f7fe fd4c 	bl	801b290 <__assert_func>
 801c7f8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801c7fc:	6004      	str	r4, [r0, #0]
 801c7fe:	60c4      	str	r4, [r0, #12]
 801c800:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801c804:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801c808:	b94c      	cbnz	r4, 801c81e <__pow5mult+0x66>
 801c80a:	f240 2171 	movw	r1, #625	; 0x271
 801c80e:	4630      	mov	r0, r6
 801c810:	f7ff ff12 	bl	801c638 <__i2b>
 801c814:	2300      	movs	r3, #0
 801c816:	f8c8 0008 	str.w	r0, [r8, #8]
 801c81a:	4604      	mov	r4, r0
 801c81c:	6003      	str	r3, [r0, #0]
 801c81e:	f04f 0900 	mov.w	r9, #0
 801c822:	07eb      	lsls	r3, r5, #31
 801c824:	d50a      	bpl.n	801c83c <__pow5mult+0x84>
 801c826:	4639      	mov	r1, r7
 801c828:	4622      	mov	r2, r4
 801c82a:	4630      	mov	r0, r6
 801c82c:	f7ff ff1a 	bl	801c664 <__multiply>
 801c830:	4639      	mov	r1, r7
 801c832:	4680      	mov	r8, r0
 801c834:	4630      	mov	r0, r6
 801c836:	f7ff fe47 	bl	801c4c8 <_Bfree>
 801c83a:	4647      	mov	r7, r8
 801c83c:	106d      	asrs	r5, r5, #1
 801c83e:	d00b      	beq.n	801c858 <__pow5mult+0xa0>
 801c840:	6820      	ldr	r0, [r4, #0]
 801c842:	b938      	cbnz	r0, 801c854 <__pow5mult+0x9c>
 801c844:	4622      	mov	r2, r4
 801c846:	4621      	mov	r1, r4
 801c848:	4630      	mov	r0, r6
 801c84a:	f7ff ff0b 	bl	801c664 <__multiply>
 801c84e:	6020      	str	r0, [r4, #0]
 801c850:	f8c0 9000 	str.w	r9, [r0]
 801c854:	4604      	mov	r4, r0
 801c856:	e7e4      	b.n	801c822 <__pow5mult+0x6a>
 801c858:	4638      	mov	r0, r7
 801c85a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c85e:	bf00      	nop
 801c860:	0806cca0 	.word	0x0806cca0
 801c864:	0806c9c8 	.word	0x0806c9c8
 801c868:	0806cb50 	.word	0x0806cb50

0801c86c <__lshift>:
 801c86c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c870:	460c      	mov	r4, r1
 801c872:	6849      	ldr	r1, [r1, #4]
 801c874:	6923      	ldr	r3, [r4, #16]
 801c876:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801c87a:	68a3      	ldr	r3, [r4, #8]
 801c87c:	4607      	mov	r7, r0
 801c87e:	4691      	mov	r9, r2
 801c880:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801c884:	f108 0601 	add.w	r6, r8, #1
 801c888:	42b3      	cmp	r3, r6
 801c88a:	db0b      	blt.n	801c8a4 <__lshift+0x38>
 801c88c:	4638      	mov	r0, r7
 801c88e:	f7ff fddb 	bl	801c448 <_Balloc>
 801c892:	4605      	mov	r5, r0
 801c894:	b948      	cbnz	r0, 801c8aa <__lshift+0x3e>
 801c896:	4602      	mov	r2, r0
 801c898:	4b2a      	ldr	r3, [pc, #168]	; (801c944 <__lshift+0xd8>)
 801c89a:	482b      	ldr	r0, [pc, #172]	; (801c948 <__lshift+0xdc>)
 801c89c:	f240 11d9 	movw	r1, #473	; 0x1d9
 801c8a0:	f7fe fcf6 	bl	801b290 <__assert_func>
 801c8a4:	3101      	adds	r1, #1
 801c8a6:	005b      	lsls	r3, r3, #1
 801c8a8:	e7ee      	b.n	801c888 <__lshift+0x1c>
 801c8aa:	2300      	movs	r3, #0
 801c8ac:	f100 0114 	add.w	r1, r0, #20
 801c8b0:	f100 0210 	add.w	r2, r0, #16
 801c8b4:	4618      	mov	r0, r3
 801c8b6:	4553      	cmp	r3, sl
 801c8b8:	db37      	blt.n	801c92a <__lshift+0xbe>
 801c8ba:	6920      	ldr	r0, [r4, #16]
 801c8bc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801c8c0:	f104 0314 	add.w	r3, r4, #20
 801c8c4:	f019 091f 	ands.w	r9, r9, #31
 801c8c8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801c8cc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801c8d0:	d02f      	beq.n	801c932 <__lshift+0xc6>
 801c8d2:	f1c9 0e20 	rsb	lr, r9, #32
 801c8d6:	468a      	mov	sl, r1
 801c8d8:	f04f 0c00 	mov.w	ip, #0
 801c8dc:	681a      	ldr	r2, [r3, #0]
 801c8de:	fa02 f209 	lsl.w	r2, r2, r9
 801c8e2:	ea42 020c 	orr.w	r2, r2, ip
 801c8e6:	f84a 2b04 	str.w	r2, [sl], #4
 801c8ea:	f853 2b04 	ldr.w	r2, [r3], #4
 801c8ee:	4298      	cmp	r0, r3
 801c8f0:	fa22 fc0e 	lsr.w	ip, r2, lr
 801c8f4:	d8f2      	bhi.n	801c8dc <__lshift+0x70>
 801c8f6:	1b03      	subs	r3, r0, r4
 801c8f8:	3b15      	subs	r3, #21
 801c8fa:	f023 0303 	bic.w	r3, r3, #3
 801c8fe:	3304      	adds	r3, #4
 801c900:	f104 0215 	add.w	r2, r4, #21
 801c904:	4290      	cmp	r0, r2
 801c906:	bf38      	it	cc
 801c908:	2304      	movcc	r3, #4
 801c90a:	f841 c003 	str.w	ip, [r1, r3]
 801c90e:	f1bc 0f00 	cmp.w	ip, #0
 801c912:	d001      	beq.n	801c918 <__lshift+0xac>
 801c914:	f108 0602 	add.w	r6, r8, #2
 801c918:	3e01      	subs	r6, #1
 801c91a:	4638      	mov	r0, r7
 801c91c:	612e      	str	r6, [r5, #16]
 801c91e:	4621      	mov	r1, r4
 801c920:	f7ff fdd2 	bl	801c4c8 <_Bfree>
 801c924:	4628      	mov	r0, r5
 801c926:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c92a:	f842 0f04 	str.w	r0, [r2, #4]!
 801c92e:	3301      	adds	r3, #1
 801c930:	e7c1      	b.n	801c8b6 <__lshift+0x4a>
 801c932:	3904      	subs	r1, #4
 801c934:	f853 2b04 	ldr.w	r2, [r3], #4
 801c938:	f841 2f04 	str.w	r2, [r1, #4]!
 801c93c:	4298      	cmp	r0, r3
 801c93e:	d8f9      	bhi.n	801c934 <__lshift+0xc8>
 801c940:	e7ea      	b.n	801c918 <__lshift+0xac>
 801c942:	bf00      	nop
 801c944:	0806cade 	.word	0x0806cade
 801c948:	0806cb50 	.word	0x0806cb50

0801c94c <__mcmp>:
 801c94c:	b530      	push	{r4, r5, lr}
 801c94e:	6902      	ldr	r2, [r0, #16]
 801c950:	690c      	ldr	r4, [r1, #16]
 801c952:	1b12      	subs	r2, r2, r4
 801c954:	d10e      	bne.n	801c974 <__mcmp+0x28>
 801c956:	f100 0314 	add.w	r3, r0, #20
 801c95a:	3114      	adds	r1, #20
 801c95c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801c960:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801c964:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801c968:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801c96c:	42a5      	cmp	r5, r4
 801c96e:	d003      	beq.n	801c978 <__mcmp+0x2c>
 801c970:	d305      	bcc.n	801c97e <__mcmp+0x32>
 801c972:	2201      	movs	r2, #1
 801c974:	4610      	mov	r0, r2
 801c976:	bd30      	pop	{r4, r5, pc}
 801c978:	4283      	cmp	r3, r0
 801c97a:	d3f3      	bcc.n	801c964 <__mcmp+0x18>
 801c97c:	e7fa      	b.n	801c974 <__mcmp+0x28>
 801c97e:	f04f 32ff 	mov.w	r2, #4294967295
 801c982:	e7f7      	b.n	801c974 <__mcmp+0x28>

0801c984 <__mdiff>:
 801c984:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c988:	460c      	mov	r4, r1
 801c98a:	4606      	mov	r6, r0
 801c98c:	4611      	mov	r1, r2
 801c98e:	4620      	mov	r0, r4
 801c990:	4690      	mov	r8, r2
 801c992:	f7ff ffdb 	bl	801c94c <__mcmp>
 801c996:	1e05      	subs	r5, r0, #0
 801c998:	d110      	bne.n	801c9bc <__mdiff+0x38>
 801c99a:	4629      	mov	r1, r5
 801c99c:	4630      	mov	r0, r6
 801c99e:	f7ff fd53 	bl	801c448 <_Balloc>
 801c9a2:	b930      	cbnz	r0, 801c9b2 <__mdiff+0x2e>
 801c9a4:	4b3a      	ldr	r3, [pc, #232]	; (801ca90 <__mdiff+0x10c>)
 801c9a6:	4602      	mov	r2, r0
 801c9a8:	f240 2132 	movw	r1, #562	; 0x232
 801c9ac:	4839      	ldr	r0, [pc, #228]	; (801ca94 <__mdiff+0x110>)
 801c9ae:	f7fe fc6f 	bl	801b290 <__assert_func>
 801c9b2:	2301      	movs	r3, #1
 801c9b4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801c9b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c9bc:	bfa4      	itt	ge
 801c9be:	4643      	movge	r3, r8
 801c9c0:	46a0      	movge	r8, r4
 801c9c2:	4630      	mov	r0, r6
 801c9c4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801c9c8:	bfa6      	itte	ge
 801c9ca:	461c      	movge	r4, r3
 801c9cc:	2500      	movge	r5, #0
 801c9ce:	2501      	movlt	r5, #1
 801c9d0:	f7ff fd3a 	bl	801c448 <_Balloc>
 801c9d4:	b920      	cbnz	r0, 801c9e0 <__mdiff+0x5c>
 801c9d6:	4b2e      	ldr	r3, [pc, #184]	; (801ca90 <__mdiff+0x10c>)
 801c9d8:	4602      	mov	r2, r0
 801c9da:	f44f 7110 	mov.w	r1, #576	; 0x240
 801c9de:	e7e5      	b.n	801c9ac <__mdiff+0x28>
 801c9e0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801c9e4:	6926      	ldr	r6, [r4, #16]
 801c9e6:	60c5      	str	r5, [r0, #12]
 801c9e8:	f104 0914 	add.w	r9, r4, #20
 801c9ec:	f108 0514 	add.w	r5, r8, #20
 801c9f0:	f100 0e14 	add.w	lr, r0, #20
 801c9f4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801c9f8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801c9fc:	f108 0210 	add.w	r2, r8, #16
 801ca00:	46f2      	mov	sl, lr
 801ca02:	2100      	movs	r1, #0
 801ca04:	f859 3b04 	ldr.w	r3, [r9], #4
 801ca08:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801ca0c:	fa1f f883 	uxth.w	r8, r3
 801ca10:	fa11 f18b 	uxtah	r1, r1, fp
 801ca14:	0c1b      	lsrs	r3, r3, #16
 801ca16:	eba1 0808 	sub.w	r8, r1, r8
 801ca1a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801ca1e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801ca22:	fa1f f888 	uxth.w	r8, r8
 801ca26:	1419      	asrs	r1, r3, #16
 801ca28:	454e      	cmp	r6, r9
 801ca2a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801ca2e:	f84a 3b04 	str.w	r3, [sl], #4
 801ca32:	d8e7      	bhi.n	801ca04 <__mdiff+0x80>
 801ca34:	1b33      	subs	r3, r6, r4
 801ca36:	3b15      	subs	r3, #21
 801ca38:	f023 0303 	bic.w	r3, r3, #3
 801ca3c:	3304      	adds	r3, #4
 801ca3e:	3415      	adds	r4, #21
 801ca40:	42a6      	cmp	r6, r4
 801ca42:	bf38      	it	cc
 801ca44:	2304      	movcc	r3, #4
 801ca46:	441d      	add	r5, r3
 801ca48:	4473      	add	r3, lr
 801ca4a:	469e      	mov	lr, r3
 801ca4c:	462e      	mov	r6, r5
 801ca4e:	4566      	cmp	r6, ip
 801ca50:	d30e      	bcc.n	801ca70 <__mdiff+0xec>
 801ca52:	f10c 0203 	add.w	r2, ip, #3
 801ca56:	1b52      	subs	r2, r2, r5
 801ca58:	f022 0203 	bic.w	r2, r2, #3
 801ca5c:	3d03      	subs	r5, #3
 801ca5e:	45ac      	cmp	ip, r5
 801ca60:	bf38      	it	cc
 801ca62:	2200      	movcc	r2, #0
 801ca64:	441a      	add	r2, r3
 801ca66:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801ca6a:	b17b      	cbz	r3, 801ca8c <__mdiff+0x108>
 801ca6c:	6107      	str	r7, [r0, #16]
 801ca6e:	e7a3      	b.n	801c9b8 <__mdiff+0x34>
 801ca70:	f856 8b04 	ldr.w	r8, [r6], #4
 801ca74:	fa11 f288 	uxtah	r2, r1, r8
 801ca78:	1414      	asrs	r4, r2, #16
 801ca7a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801ca7e:	b292      	uxth	r2, r2
 801ca80:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801ca84:	f84e 2b04 	str.w	r2, [lr], #4
 801ca88:	1421      	asrs	r1, r4, #16
 801ca8a:	e7e0      	b.n	801ca4e <__mdiff+0xca>
 801ca8c:	3f01      	subs	r7, #1
 801ca8e:	e7ea      	b.n	801ca66 <__mdiff+0xe2>
 801ca90:	0806cade 	.word	0x0806cade
 801ca94:	0806cb50 	.word	0x0806cb50

0801ca98 <__d2b>:
 801ca98:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801ca9c:	4689      	mov	r9, r1
 801ca9e:	2101      	movs	r1, #1
 801caa0:	ec57 6b10 	vmov	r6, r7, d0
 801caa4:	4690      	mov	r8, r2
 801caa6:	f7ff fccf 	bl	801c448 <_Balloc>
 801caaa:	4604      	mov	r4, r0
 801caac:	b930      	cbnz	r0, 801cabc <__d2b+0x24>
 801caae:	4602      	mov	r2, r0
 801cab0:	4b25      	ldr	r3, [pc, #148]	; (801cb48 <__d2b+0xb0>)
 801cab2:	4826      	ldr	r0, [pc, #152]	; (801cb4c <__d2b+0xb4>)
 801cab4:	f240 310a 	movw	r1, #778	; 0x30a
 801cab8:	f7fe fbea 	bl	801b290 <__assert_func>
 801cabc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801cac0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801cac4:	bb35      	cbnz	r5, 801cb14 <__d2b+0x7c>
 801cac6:	2e00      	cmp	r6, #0
 801cac8:	9301      	str	r3, [sp, #4]
 801caca:	d028      	beq.n	801cb1e <__d2b+0x86>
 801cacc:	4668      	mov	r0, sp
 801cace:	9600      	str	r6, [sp, #0]
 801cad0:	f7ff fd82 	bl	801c5d8 <__lo0bits>
 801cad4:	9900      	ldr	r1, [sp, #0]
 801cad6:	b300      	cbz	r0, 801cb1a <__d2b+0x82>
 801cad8:	9a01      	ldr	r2, [sp, #4]
 801cada:	f1c0 0320 	rsb	r3, r0, #32
 801cade:	fa02 f303 	lsl.w	r3, r2, r3
 801cae2:	430b      	orrs	r3, r1
 801cae4:	40c2      	lsrs	r2, r0
 801cae6:	6163      	str	r3, [r4, #20]
 801cae8:	9201      	str	r2, [sp, #4]
 801caea:	9b01      	ldr	r3, [sp, #4]
 801caec:	61a3      	str	r3, [r4, #24]
 801caee:	2b00      	cmp	r3, #0
 801caf0:	bf14      	ite	ne
 801caf2:	2202      	movne	r2, #2
 801caf4:	2201      	moveq	r2, #1
 801caf6:	6122      	str	r2, [r4, #16]
 801caf8:	b1d5      	cbz	r5, 801cb30 <__d2b+0x98>
 801cafa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801cafe:	4405      	add	r5, r0
 801cb00:	f8c9 5000 	str.w	r5, [r9]
 801cb04:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801cb08:	f8c8 0000 	str.w	r0, [r8]
 801cb0c:	4620      	mov	r0, r4
 801cb0e:	b003      	add	sp, #12
 801cb10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801cb14:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801cb18:	e7d5      	b.n	801cac6 <__d2b+0x2e>
 801cb1a:	6161      	str	r1, [r4, #20]
 801cb1c:	e7e5      	b.n	801caea <__d2b+0x52>
 801cb1e:	a801      	add	r0, sp, #4
 801cb20:	f7ff fd5a 	bl	801c5d8 <__lo0bits>
 801cb24:	9b01      	ldr	r3, [sp, #4]
 801cb26:	6163      	str	r3, [r4, #20]
 801cb28:	2201      	movs	r2, #1
 801cb2a:	6122      	str	r2, [r4, #16]
 801cb2c:	3020      	adds	r0, #32
 801cb2e:	e7e3      	b.n	801caf8 <__d2b+0x60>
 801cb30:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801cb34:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801cb38:	f8c9 0000 	str.w	r0, [r9]
 801cb3c:	6918      	ldr	r0, [r3, #16]
 801cb3e:	f7ff fd2b 	bl	801c598 <__hi0bits>
 801cb42:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801cb46:	e7df      	b.n	801cb08 <__d2b+0x70>
 801cb48:	0806cade 	.word	0x0806cade
 801cb4c:	0806cb50 	.word	0x0806cb50

0801cb50 <__sfputc_r>:
 801cb50:	6893      	ldr	r3, [r2, #8]
 801cb52:	3b01      	subs	r3, #1
 801cb54:	2b00      	cmp	r3, #0
 801cb56:	b410      	push	{r4}
 801cb58:	6093      	str	r3, [r2, #8]
 801cb5a:	da08      	bge.n	801cb6e <__sfputc_r+0x1e>
 801cb5c:	6994      	ldr	r4, [r2, #24]
 801cb5e:	42a3      	cmp	r3, r4
 801cb60:	db01      	blt.n	801cb66 <__sfputc_r+0x16>
 801cb62:	290a      	cmp	r1, #10
 801cb64:	d103      	bne.n	801cb6e <__sfputc_r+0x1e>
 801cb66:	f85d 4b04 	ldr.w	r4, [sp], #4
 801cb6a:	f7fe bad1 	b.w	801b110 <__swbuf_r>
 801cb6e:	6813      	ldr	r3, [r2, #0]
 801cb70:	1c58      	adds	r0, r3, #1
 801cb72:	6010      	str	r0, [r2, #0]
 801cb74:	7019      	strb	r1, [r3, #0]
 801cb76:	4608      	mov	r0, r1
 801cb78:	f85d 4b04 	ldr.w	r4, [sp], #4
 801cb7c:	4770      	bx	lr

0801cb7e <__sfputs_r>:
 801cb7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cb80:	4606      	mov	r6, r0
 801cb82:	460f      	mov	r7, r1
 801cb84:	4614      	mov	r4, r2
 801cb86:	18d5      	adds	r5, r2, r3
 801cb88:	42ac      	cmp	r4, r5
 801cb8a:	d101      	bne.n	801cb90 <__sfputs_r+0x12>
 801cb8c:	2000      	movs	r0, #0
 801cb8e:	e007      	b.n	801cba0 <__sfputs_r+0x22>
 801cb90:	f814 1b01 	ldrb.w	r1, [r4], #1
 801cb94:	463a      	mov	r2, r7
 801cb96:	4630      	mov	r0, r6
 801cb98:	f7ff ffda 	bl	801cb50 <__sfputc_r>
 801cb9c:	1c43      	adds	r3, r0, #1
 801cb9e:	d1f3      	bne.n	801cb88 <__sfputs_r+0xa>
 801cba0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801cba4 <_vfiprintf_r>:
 801cba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cba8:	460d      	mov	r5, r1
 801cbaa:	b09d      	sub	sp, #116	; 0x74
 801cbac:	4614      	mov	r4, r2
 801cbae:	4698      	mov	r8, r3
 801cbb0:	4606      	mov	r6, r0
 801cbb2:	b118      	cbz	r0, 801cbbc <_vfiprintf_r+0x18>
 801cbb4:	6983      	ldr	r3, [r0, #24]
 801cbb6:	b90b      	cbnz	r3, 801cbbc <_vfiprintf_r+0x18>
 801cbb8:	f7ff fb1e 	bl	801c1f8 <__sinit>
 801cbbc:	4b89      	ldr	r3, [pc, #548]	; (801cde4 <_vfiprintf_r+0x240>)
 801cbbe:	429d      	cmp	r5, r3
 801cbc0:	d11b      	bne.n	801cbfa <_vfiprintf_r+0x56>
 801cbc2:	6875      	ldr	r5, [r6, #4]
 801cbc4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801cbc6:	07d9      	lsls	r1, r3, #31
 801cbc8:	d405      	bmi.n	801cbd6 <_vfiprintf_r+0x32>
 801cbca:	89ab      	ldrh	r3, [r5, #12]
 801cbcc:	059a      	lsls	r2, r3, #22
 801cbce:	d402      	bmi.n	801cbd6 <_vfiprintf_r+0x32>
 801cbd0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801cbd2:	f7ff fbc6 	bl	801c362 <__retarget_lock_acquire_recursive>
 801cbd6:	89ab      	ldrh	r3, [r5, #12]
 801cbd8:	071b      	lsls	r3, r3, #28
 801cbda:	d501      	bpl.n	801cbe0 <_vfiprintf_r+0x3c>
 801cbdc:	692b      	ldr	r3, [r5, #16]
 801cbde:	b9eb      	cbnz	r3, 801cc1c <_vfiprintf_r+0x78>
 801cbe0:	4629      	mov	r1, r5
 801cbe2:	4630      	mov	r0, r6
 801cbe4:	f7fe fae6 	bl	801b1b4 <__swsetup_r>
 801cbe8:	b1c0      	cbz	r0, 801cc1c <_vfiprintf_r+0x78>
 801cbea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801cbec:	07dc      	lsls	r4, r3, #31
 801cbee:	d50e      	bpl.n	801cc0e <_vfiprintf_r+0x6a>
 801cbf0:	f04f 30ff 	mov.w	r0, #4294967295
 801cbf4:	b01d      	add	sp, #116	; 0x74
 801cbf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cbfa:	4b7b      	ldr	r3, [pc, #492]	; (801cde8 <_vfiprintf_r+0x244>)
 801cbfc:	429d      	cmp	r5, r3
 801cbfe:	d101      	bne.n	801cc04 <_vfiprintf_r+0x60>
 801cc00:	68b5      	ldr	r5, [r6, #8]
 801cc02:	e7df      	b.n	801cbc4 <_vfiprintf_r+0x20>
 801cc04:	4b79      	ldr	r3, [pc, #484]	; (801cdec <_vfiprintf_r+0x248>)
 801cc06:	429d      	cmp	r5, r3
 801cc08:	bf08      	it	eq
 801cc0a:	68f5      	ldreq	r5, [r6, #12]
 801cc0c:	e7da      	b.n	801cbc4 <_vfiprintf_r+0x20>
 801cc0e:	89ab      	ldrh	r3, [r5, #12]
 801cc10:	0598      	lsls	r0, r3, #22
 801cc12:	d4ed      	bmi.n	801cbf0 <_vfiprintf_r+0x4c>
 801cc14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801cc16:	f7ff fba5 	bl	801c364 <__retarget_lock_release_recursive>
 801cc1a:	e7e9      	b.n	801cbf0 <_vfiprintf_r+0x4c>
 801cc1c:	2300      	movs	r3, #0
 801cc1e:	9309      	str	r3, [sp, #36]	; 0x24
 801cc20:	2320      	movs	r3, #32
 801cc22:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801cc26:	f8cd 800c 	str.w	r8, [sp, #12]
 801cc2a:	2330      	movs	r3, #48	; 0x30
 801cc2c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801cdf0 <_vfiprintf_r+0x24c>
 801cc30:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801cc34:	f04f 0901 	mov.w	r9, #1
 801cc38:	4623      	mov	r3, r4
 801cc3a:	469a      	mov	sl, r3
 801cc3c:	f813 2b01 	ldrb.w	r2, [r3], #1
 801cc40:	b10a      	cbz	r2, 801cc46 <_vfiprintf_r+0xa2>
 801cc42:	2a25      	cmp	r2, #37	; 0x25
 801cc44:	d1f9      	bne.n	801cc3a <_vfiprintf_r+0x96>
 801cc46:	ebba 0b04 	subs.w	fp, sl, r4
 801cc4a:	d00b      	beq.n	801cc64 <_vfiprintf_r+0xc0>
 801cc4c:	465b      	mov	r3, fp
 801cc4e:	4622      	mov	r2, r4
 801cc50:	4629      	mov	r1, r5
 801cc52:	4630      	mov	r0, r6
 801cc54:	f7ff ff93 	bl	801cb7e <__sfputs_r>
 801cc58:	3001      	adds	r0, #1
 801cc5a:	f000 80aa 	beq.w	801cdb2 <_vfiprintf_r+0x20e>
 801cc5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801cc60:	445a      	add	r2, fp
 801cc62:	9209      	str	r2, [sp, #36]	; 0x24
 801cc64:	f89a 3000 	ldrb.w	r3, [sl]
 801cc68:	2b00      	cmp	r3, #0
 801cc6a:	f000 80a2 	beq.w	801cdb2 <_vfiprintf_r+0x20e>
 801cc6e:	2300      	movs	r3, #0
 801cc70:	f04f 32ff 	mov.w	r2, #4294967295
 801cc74:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801cc78:	f10a 0a01 	add.w	sl, sl, #1
 801cc7c:	9304      	str	r3, [sp, #16]
 801cc7e:	9307      	str	r3, [sp, #28]
 801cc80:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801cc84:	931a      	str	r3, [sp, #104]	; 0x68
 801cc86:	4654      	mov	r4, sl
 801cc88:	2205      	movs	r2, #5
 801cc8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801cc8e:	4858      	ldr	r0, [pc, #352]	; (801cdf0 <_vfiprintf_r+0x24c>)
 801cc90:	f7e3 fabe 	bl	8000210 <memchr>
 801cc94:	9a04      	ldr	r2, [sp, #16]
 801cc96:	b9d8      	cbnz	r0, 801ccd0 <_vfiprintf_r+0x12c>
 801cc98:	06d1      	lsls	r1, r2, #27
 801cc9a:	bf44      	itt	mi
 801cc9c:	2320      	movmi	r3, #32
 801cc9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801cca2:	0713      	lsls	r3, r2, #28
 801cca4:	bf44      	itt	mi
 801cca6:	232b      	movmi	r3, #43	; 0x2b
 801cca8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801ccac:	f89a 3000 	ldrb.w	r3, [sl]
 801ccb0:	2b2a      	cmp	r3, #42	; 0x2a
 801ccb2:	d015      	beq.n	801cce0 <_vfiprintf_r+0x13c>
 801ccb4:	9a07      	ldr	r2, [sp, #28]
 801ccb6:	4654      	mov	r4, sl
 801ccb8:	2000      	movs	r0, #0
 801ccba:	f04f 0c0a 	mov.w	ip, #10
 801ccbe:	4621      	mov	r1, r4
 801ccc0:	f811 3b01 	ldrb.w	r3, [r1], #1
 801ccc4:	3b30      	subs	r3, #48	; 0x30
 801ccc6:	2b09      	cmp	r3, #9
 801ccc8:	d94e      	bls.n	801cd68 <_vfiprintf_r+0x1c4>
 801ccca:	b1b0      	cbz	r0, 801ccfa <_vfiprintf_r+0x156>
 801cccc:	9207      	str	r2, [sp, #28]
 801ccce:	e014      	b.n	801ccfa <_vfiprintf_r+0x156>
 801ccd0:	eba0 0308 	sub.w	r3, r0, r8
 801ccd4:	fa09 f303 	lsl.w	r3, r9, r3
 801ccd8:	4313      	orrs	r3, r2
 801ccda:	9304      	str	r3, [sp, #16]
 801ccdc:	46a2      	mov	sl, r4
 801ccde:	e7d2      	b.n	801cc86 <_vfiprintf_r+0xe2>
 801cce0:	9b03      	ldr	r3, [sp, #12]
 801cce2:	1d19      	adds	r1, r3, #4
 801cce4:	681b      	ldr	r3, [r3, #0]
 801cce6:	9103      	str	r1, [sp, #12]
 801cce8:	2b00      	cmp	r3, #0
 801ccea:	bfbb      	ittet	lt
 801ccec:	425b      	neglt	r3, r3
 801ccee:	f042 0202 	orrlt.w	r2, r2, #2
 801ccf2:	9307      	strge	r3, [sp, #28]
 801ccf4:	9307      	strlt	r3, [sp, #28]
 801ccf6:	bfb8      	it	lt
 801ccf8:	9204      	strlt	r2, [sp, #16]
 801ccfa:	7823      	ldrb	r3, [r4, #0]
 801ccfc:	2b2e      	cmp	r3, #46	; 0x2e
 801ccfe:	d10c      	bne.n	801cd1a <_vfiprintf_r+0x176>
 801cd00:	7863      	ldrb	r3, [r4, #1]
 801cd02:	2b2a      	cmp	r3, #42	; 0x2a
 801cd04:	d135      	bne.n	801cd72 <_vfiprintf_r+0x1ce>
 801cd06:	9b03      	ldr	r3, [sp, #12]
 801cd08:	1d1a      	adds	r2, r3, #4
 801cd0a:	681b      	ldr	r3, [r3, #0]
 801cd0c:	9203      	str	r2, [sp, #12]
 801cd0e:	2b00      	cmp	r3, #0
 801cd10:	bfb8      	it	lt
 801cd12:	f04f 33ff 	movlt.w	r3, #4294967295
 801cd16:	3402      	adds	r4, #2
 801cd18:	9305      	str	r3, [sp, #20]
 801cd1a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801ce00 <_vfiprintf_r+0x25c>
 801cd1e:	7821      	ldrb	r1, [r4, #0]
 801cd20:	2203      	movs	r2, #3
 801cd22:	4650      	mov	r0, sl
 801cd24:	f7e3 fa74 	bl	8000210 <memchr>
 801cd28:	b140      	cbz	r0, 801cd3c <_vfiprintf_r+0x198>
 801cd2a:	2340      	movs	r3, #64	; 0x40
 801cd2c:	eba0 000a 	sub.w	r0, r0, sl
 801cd30:	fa03 f000 	lsl.w	r0, r3, r0
 801cd34:	9b04      	ldr	r3, [sp, #16]
 801cd36:	4303      	orrs	r3, r0
 801cd38:	3401      	adds	r4, #1
 801cd3a:	9304      	str	r3, [sp, #16]
 801cd3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801cd40:	482c      	ldr	r0, [pc, #176]	; (801cdf4 <_vfiprintf_r+0x250>)
 801cd42:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801cd46:	2206      	movs	r2, #6
 801cd48:	f7e3 fa62 	bl	8000210 <memchr>
 801cd4c:	2800      	cmp	r0, #0
 801cd4e:	d03f      	beq.n	801cdd0 <_vfiprintf_r+0x22c>
 801cd50:	4b29      	ldr	r3, [pc, #164]	; (801cdf8 <_vfiprintf_r+0x254>)
 801cd52:	bb1b      	cbnz	r3, 801cd9c <_vfiprintf_r+0x1f8>
 801cd54:	9b03      	ldr	r3, [sp, #12]
 801cd56:	3307      	adds	r3, #7
 801cd58:	f023 0307 	bic.w	r3, r3, #7
 801cd5c:	3308      	adds	r3, #8
 801cd5e:	9303      	str	r3, [sp, #12]
 801cd60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cd62:	443b      	add	r3, r7
 801cd64:	9309      	str	r3, [sp, #36]	; 0x24
 801cd66:	e767      	b.n	801cc38 <_vfiprintf_r+0x94>
 801cd68:	fb0c 3202 	mla	r2, ip, r2, r3
 801cd6c:	460c      	mov	r4, r1
 801cd6e:	2001      	movs	r0, #1
 801cd70:	e7a5      	b.n	801ccbe <_vfiprintf_r+0x11a>
 801cd72:	2300      	movs	r3, #0
 801cd74:	3401      	adds	r4, #1
 801cd76:	9305      	str	r3, [sp, #20]
 801cd78:	4619      	mov	r1, r3
 801cd7a:	f04f 0c0a 	mov.w	ip, #10
 801cd7e:	4620      	mov	r0, r4
 801cd80:	f810 2b01 	ldrb.w	r2, [r0], #1
 801cd84:	3a30      	subs	r2, #48	; 0x30
 801cd86:	2a09      	cmp	r2, #9
 801cd88:	d903      	bls.n	801cd92 <_vfiprintf_r+0x1ee>
 801cd8a:	2b00      	cmp	r3, #0
 801cd8c:	d0c5      	beq.n	801cd1a <_vfiprintf_r+0x176>
 801cd8e:	9105      	str	r1, [sp, #20]
 801cd90:	e7c3      	b.n	801cd1a <_vfiprintf_r+0x176>
 801cd92:	fb0c 2101 	mla	r1, ip, r1, r2
 801cd96:	4604      	mov	r4, r0
 801cd98:	2301      	movs	r3, #1
 801cd9a:	e7f0      	b.n	801cd7e <_vfiprintf_r+0x1da>
 801cd9c:	ab03      	add	r3, sp, #12
 801cd9e:	9300      	str	r3, [sp, #0]
 801cda0:	462a      	mov	r2, r5
 801cda2:	4b16      	ldr	r3, [pc, #88]	; (801cdfc <_vfiprintf_r+0x258>)
 801cda4:	a904      	add	r1, sp, #16
 801cda6:	4630      	mov	r0, r6
 801cda8:	f7fd fc48 	bl	801a63c <_printf_float>
 801cdac:	4607      	mov	r7, r0
 801cdae:	1c78      	adds	r0, r7, #1
 801cdb0:	d1d6      	bne.n	801cd60 <_vfiprintf_r+0x1bc>
 801cdb2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801cdb4:	07d9      	lsls	r1, r3, #31
 801cdb6:	d405      	bmi.n	801cdc4 <_vfiprintf_r+0x220>
 801cdb8:	89ab      	ldrh	r3, [r5, #12]
 801cdba:	059a      	lsls	r2, r3, #22
 801cdbc:	d402      	bmi.n	801cdc4 <_vfiprintf_r+0x220>
 801cdbe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801cdc0:	f7ff fad0 	bl	801c364 <__retarget_lock_release_recursive>
 801cdc4:	89ab      	ldrh	r3, [r5, #12]
 801cdc6:	065b      	lsls	r3, r3, #25
 801cdc8:	f53f af12 	bmi.w	801cbf0 <_vfiprintf_r+0x4c>
 801cdcc:	9809      	ldr	r0, [sp, #36]	; 0x24
 801cdce:	e711      	b.n	801cbf4 <_vfiprintf_r+0x50>
 801cdd0:	ab03      	add	r3, sp, #12
 801cdd2:	9300      	str	r3, [sp, #0]
 801cdd4:	462a      	mov	r2, r5
 801cdd6:	4b09      	ldr	r3, [pc, #36]	; (801cdfc <_vfiprintf_r+0x258>)
 801cdd8:	a904      	add	r1, sp, #16
 801cdda:	4630      	mov	r0, r6
 801cddc:	f7fd fed2 	bl	801ab84 <_printf_i>
 801cde0:	e7e4      	b.n	801cdac <_vfiprintf_r+0x208>
 801cde2:	bf00      	nop
 801cde4:	0806cb10 	.word	0x0806cb10
 801cde8:	0806cb30 	.word	0x0806cb30
 801cdec:	0806caf0 	.word	0x0806caf0
 801cdf0:	0806ccac 	.word	0x0806ccac
 801cdf4:	0806ccb6 	.word	0x0806ccb6
 801cdf8:	0801a63d 	.word	0x0801a63d
 801cdfc:	0801cb7f 	.word	0x0801cb7f
 801ce00:	0806ccb2 	.word	0x0806ccb2

0801ce04 <__sread>:
 801ce04:	b510      	push	{r4, lr}
 801ce06:	460c      	mov	r4, r1
 801ce08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ce0c:	f000 f8ae 	bl	801cf6c <_read_r>
 801ce10:	2800      	cmp	r0, #0
 801ce12:	bfab      	itete	ge
 801ce14:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801ce16:	89a3      	ldrhlt	r3, [r4, #12]
 801ce18:	181b      	addge	r3, r3, r0
 801ce1a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801ce1e:	bfac      	ite	ge
 801ce20:	6563      	strge	r3, [r4, #84]	; 0x54
 801ce22:	81a3      	strhlt	r3, [r4, #12]
 801ce24:	bd10      	pop	{r4, pc}

0801ce26 <__swrite>:
 801ce26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ce2a:	461f      	mov	r7, r3
 801ce2c:	898b      	ldrh	r3, [r1, #12]
 801ce2e:	05db      	lsls	r3, r3, #23
 801ce30:	4605      	mov	r5, r0
 801ce32:	460c      	mov	r4, r1
 801ce34:	4616      	mov	r6, r2
 801ce36:	d505      	bpl.n	801ce44 <__swrite+0x1e>
 801ce38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ce3c:	2302      	movs	r3, #2
 801ce3e:	2200      	movs	r2, #0
 801ce40:	f000 f870 	bl	801cf24 <_lseek_r>
 801ce44:	89a3      	ldrh	r3, [r4, #12]
 801ce46:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ce4a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801ce4e:	81a3      	strh	r3, [r4, #12]
 801ce50:	4632      	mov	r2, r6
 801ce52:	463b      	mov	r3, r7
 801ce54:	4628      	mov	r0, r5
 801ce56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ce5a:	f000 b817 	b.w	801ce8c <_write_r>

0801ce5e <__sseek>:
 801ce5e:	b510      	push	{r4, lr}
 801ce60:	460c      	mov	r4, r1
 801ce62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ce66:	f000 f85d 	bl	801cf24 <_lseek_r>
 801ce6a:	1c43      	adds	r3, r0, #1
 801ce6c:	89a3      	ldrh	r3, [r4, #12]
 801ce6e:	bf15      	itete	ne
 801ce70:	6560      	strne	r0, [r4, #84]	; 0x54
 801ce72:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801ce76:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801ce7a:	81a3      	strheq	r3, [r4, #12]
 801ce7c:	bf18      	it	ne
 801ce7e:	81a3      	strhne	r3, [r4, #12]
 801ce80:	bd10      	pop	{r4, pc}

0801ce82 <__sclose>:
 801ce82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ce86:	f000 b81b 	b.w	801cec0 <_close_r>
	...

0801ce8c <_write_r>:
 801ce8c:	b538      	push	{r3, r4, r5, lr}
 801ce8e:	4d07      	ldr	r5, [pc, #28]	; (801ceac <_write_r+0x20>)
 801ce90:	4604      	mov	r4, r0
 801ce92:	4608      	mov	r0, r1
 801ce94:	4611      	mov	r1, r2
 801ce96:	2200      	movs	r2, #0
 801ce98:	602a      	str	r2, [r5, #0]
 801ce9a:	461a      	mov	r2, r3
 801ce9c:	f7e6 fe9f 	bl	8003bde <_write>
 801cea0:	1c43      	adds	r3, r0, #1
 801cea2:	d102      	bne.n	801ceaa <_write_r+0x1e>
 801cea4:	682b      	ldr	r3, [r5, #0]
 801cea6:	b103      	cbz	r3, 801ceaa <_write_r+0x1e>
 801cea8:	6023      	str	r3, [r4, #0]
 801ceaa:	bd38      	pop	{r3, r4, r5, pc}
 801ceac:	20013e7c 	.word	0x20013e7c

0801ceb0 <abort>:
 801ceb0:	b508      	push	{r3, lr}
 801ceb2:	2006      	movs	r0, #6
 801ceb4:	f000 f894 	bl	801cfe0 <raise>
 801ceb8:	2001      	movs	r0, #1
 801ceba:	f7e6 fe69 	bl	8003b90 <_exit>
	...

0801cec0 <_close_r>:
 801cec0:	b538      	push	{r3, r4, r5, lr}
 801cec2:	4d06      	ldr	r5, [pc, #24]	; (801cedc <_close_r+0x1c>)
 801cec4:	2300      	movs	r3, #0
 801cec6:	4604      	mov	r4, r0
 801cec8:	4608      	mov	r0, r1
 801ceca:	602b      	str	r3, [r5, #0]
 801cecc:	f7e6 fea3 	bl	8003c16 <_close>
 801ced0:	1c43      	adds	r3, r0, #1
 801ced2:	d102      	bne.n	801ceda <_close_r+0x1a>
 801ced4:	682b      	ldr	r3, [r5, #0]
 801ced6:	b103      	cbz	r3, 801ceda <_close_r+0x1a>
 801ced8:	6023      	str	r3, [r4, #0]
 801ceda:	bd38      	pop	{r3, r4, r5, pc}
 801cedc:	20013e7c 	.word	0x20013e7c

0801cee0 <_fstat_r>:
 801cee0:	b538      	push	{r3, r4, r5, lr}
 801cee2:	4d07      	ldr	r5, [pc, #28]	; (801cf00 <_fstat_r+0x20>)
 801cee4:	2300      	movs	r3, #0
 801cee6:	4604      	mov	r4, r0
 801cee8:	4608      	mov	r0, r1
 801ceea:	4611      	mov	r1, r2
 801ceec:	602b      	str	r3, [r5, #0]
 801ceee:	f7e6 fe9e 	bl	8003c2e <_fstat>
 801cef2:	1c43      	adds	r3, r0, #1
 801cef4:	d102      	bne.n	801cefc <_fstat_r+0x1c>
 801cef6:	682b      	ldr	r3, [r5, #0]
 801cef8:	b103      	cbz	r3, 801cefc <_fstat_r+0x1c>
 801cefa:	6023      	str	r3, [r4, #0]
 801cefc:	bd38      	pop	{r3, r4, r5, pc}
 801cefe:	bf00      	nop
 801cf00:	20013e7c 	.word	0x20013e7c

0801cf04 <_isatty_r>:
 801cf04:	b538      	push	{r3, r4, r5, lr}
 801cf06:	4d06      	ldr	r5, [pc, #24]	; (801cf20 <_isatty_r+0x1c>)
 801cf08:	2300      	movs	r3, #0
 801cf0a:	4604      	mov	r4, r0
 801cf0c:	4608      	mov	r0, r1
 801cf0e:	602b      	str	r3, [r5, #0]
 801cf10:	f7e6 fe9d 	bl	8003c4e <_isatty>
 801cf14:	1c43      	adds	r3, r0, #1
 801cf16:	d102      	bne.n	801cf1e <_isatty_r+0x1a>
 801cf18:	682b      	ldr	r3, [r5, #0]
 801cf1a:	b103      	cbz	r3, 801cf1e <_isatty_r+0x1a>
 801cf1c:	6023      	str	r3, [r4, #0]
 801cf1e:	bd38      	pop	{r3, r4, r5, pc}
 801cf20:	20013e7c 	.word	0x20013e7c

0801cf24 <_lseek_r>:
 801cf24:	b538      	push	{r3, r4, r5, lr}
 801cf26:	4d07      	ldr	r5, [pc, #28]	; (801cf44 <_lseek_r+0x20>)
 801cf28:	4604      	mov	r4, r0
 801cf2a:	4608      	mov	r0, r1
 801cf2c:	4611      	mov	r1, r2
 801cf2e:	2200      	movs	r2, #0
 801cf30:	602a      	str	r2, [r5, #0]
 801cf32:	461a      	mov	r2, r3
 801cf34:	f7e6 fe96 	bl	8003c64 <_lseek>
 801cf38:	1c43      	adds	r3, r0, #1
 801cf3a:	d102      	bne.n	801cf42 <_lseek_r+0x1e>
 801cf3c:	682b      	ldr	r3, [r5, #0]
 801cf3e:	b103      	cbz	r3, 801cf42 <_lseek_r+0x1e>
 801cf40:	6023      	str	r3, [r4, #0]
 801cf42:	bd38      	pop	{r3, r4, r5, pc}
 801cf44:	20013e7c 	.word	0x20013e7c

0801cf48 <__ascii_mbtowc>:
 801cf48:	b082      	sub	sp, #8
 801cf4a:	b901      	cbnz	r1, 801cf4e <__ascii_mbtowc+0x6>
 801cf4c:	a901      	add	r1, sp, #4
 801cf4e:	b142      	cbz	r2, 801cf62 <__ascii_mbtowc+0x1a>
 801cf50:	b14b      	cbz	r3, 801cf66 <__ascii_mbtowc+0x1e>
 801cf52:	7813      	ldrb	r3, [r2, #0]
 801cf54:	600b      	str	r3, [r1, #0]
 801cf56:	7812      	ldrb	r2, [r2, #0]
 801cf58:	1e10      	subs	r0, r2, #0
 801cf5a:	bf18      	it	ne
 801cf5c:	2001      	movne	r0, #1
 801cf5e:	b002      	add	sp, #8
 801cf60:	4770      	bx	lr
 801cf62:	4610      	mov	r0, r2
 801cf64:	e7fb      	b.n	801cf5e <__ascii_mbtowc+0x16>
 801cf66:	f06f 0001 	mvn.w	r0, #1
 801cf6a:	e7f8      	b.n	801cf5e <__ascii_mbtowc+0x16>

0801cf6c <_read_r>:
 801cf6c:	b538      	push	{r3, r4, r5, lr}
 801cf6e:	4d07      	ldr	r5, [pc, #28]	; (801cf8c <_read_r+0x20>)
 801cf70:	4604      	mov	r4, r0
 801cf72:	4608      	mov	r0, r1
 801cf74:	4611      	mov	r1, r2
 801cf76:	2200      	movs	r2, #0
 801cf78:	602a      	str	r2, [r5, #0]
 801cf7a:	461a      	mov	r2, r3
 801cf7c:	f7e6 fe12 	bl	8003ba4 <_read>
 801cf80:	1c43      	adds	r3, r0, #1
 801cf82:	d102      	bne.n	801cf8a <_read_r+0x1e>
 801cf84:	682b      	ldr	r3, [r5, #0]
 801cf86:	b103      	cbz	r3, 801cf8a <_read_r+0x1e>
 801cf88:	6023      	str	r3, [r4, #0]
 801cf8a:	bd38      	pop	{r3, r4, r5, pc}
 801cf8c:	20013e7c 	.word	0x20013e7c

0801cf90 <_raise_r>:
 801cf90:	291f      	cmp	r1, #31
 801cf92:	b538      	push	{r3, r4, r5, lr}
 801cf94:	4604      	mov	r4, r0
 801cf96:	460d      	mov	r5, r1
 801cf98:	d904      	bls.n	801cfa4 <_raise_r+0x14>
 801cf9a:	2316      	movs	r3, #22
 801cf9c:	6003      	str	r3, [r0, #0]
 801cf9e:	f04f 30ff 	mov.w	r0, #4294967295
 801cfa2:	bd38      	pop	{r3, r4, r5, pc}
 801cfa4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801cfa6:	b112      	cbz	r2, 801cfae <_raise_r+0x1e>
 801cfa8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801cfac:	b94b      	cbnz	r3, 801cfc2 <_raise_r+0x32>
 801cfae:	4620      	mov	r0, r4
 801cfb0:	f000 f830 	bl	801d014 <_getpid_r>
 801cfb4:	462a      	mov	r2, r5
 801cfb6:	4601      	mov	r1, r0
 801cfb8:	4620      	mov	r0, r4
 801cfba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801cfbe:	f000 b817 	b.w	801cff0 <_kill_r>
 801cfc2:	2b01      	cmp	r3, #1
 801cfc4:	d00a      	beq.n	801cfdc <_raise_r+0x4c>
 801cfc6:	1c59      	adds	r1, r3, #1
 801cfc8:	d103      	bne.n	801cfd2 <_raise_r+0x42>
 801cfca:	2316      	movs	r3, #22
 801cfcc:	6003      	str	r3, [r0, #0]
 801cfce:	2001      	movs	r0, #1
 801cfd0:	e7e7      	b.n	801cfa2 <_raise_r+0x12>
 801cfd2:	2400      	movs	r4, #0
 801cfd4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801cfd8:	4628      	mov	r0, r5
 801cfda:	4798      	blx	r3
 801cfdc:	2000      	movs	r0, #0
 801cfde:	e7e0      	b.n	801cfa2 <_raise_r+0x12>

0801cfe0 <raise>:
 801cfe0:	4b02      	ldr	r3, [pc, #8]	; (801cfec <raise+0xc>)
 801cfe2:	4601      	mov	r1, r0
 801cfe4:	6818      	ldr	r0, [r3, #0]
 801cfe6:	f7ff bfd3 	b.w	801cf90 <_raise_r>
 801cfea:	bf00      	nop
 801cfec:	200000c8 	.word	0x200000c8

0801cff0 <_kill_r>:
 801cff0:	b538      	push	{r3, r4, r5, lr}
 801cff2:	4d07      	ldr	r5, [pc, #28]	; (801d010 <_kill_r+0x20>)
 801cff4:	2300      	movs	r3, #0
 801cff6:	4604      	mov	r4, r0
 801cff8:	4608      	mov	r0, r1
 801cffa:	4611      	mov	r1, r2
 801cffc:	602b      	str	r3, [r5, #0]
 801cffe:	f7e6 fdb7 	bl	8003b70 <_kill>
 801d002:	1c43      	adds	r3, r0, #1
 801d004:	d102      	bne.n	801d00c <_kill_r+0x1c>
 801d006:	682b      	ldr	r3, [r5, #0]
 801d008:	b103      	cbz	r3, 801d00c <_kill_r+0x1c>
 801d00a:	6023      	str	r3, [r4, #0]
 801d00c:	bd38      	pop	{r3, r4, r5, pc}
 801d00e:	bf00      	nop
 801d010:	20013e7c 	.word	0x20013e7c

0801d014 <_getpid_r>:
 801d014:	f7e6 bda4 	b.w	8003b60 <_getpid>

0801d018 <__ascii_wctomb>:
 801d018:	b149      	cbz	r1, 801d02e <__ascii_wctomb+0x16>
 801d01a:	2aff      	cmp	r2, #255	; 0xff
 801d01c:	bf85      	ittet	hi
 801d01e:	238a      	movhi	r3, #138	; 0x8a
 801d020:	6003      	strhi	r3, [r0, #0]
 801d022:	700a      	strbls	r2, [r1, #0]
 801d024:	f04f 30ff 	movhi.w	r0, #4294967295
 801d028:	bf98      	it	ls
 801d02a:	2001      	movls	r0, #1
 801d02c:	4770      	bx	lr
 801d02e:	4608      	mov	r0, r1
 801d030:	4770      	bx	lr
	...

0801d034 <_init>:
 801d034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d036:	bf00      	nop
 801d038:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d03a:	bc08      	pop	{r3}
 801d03c:	469e      	mov	lr, r3
 801d03e:	4770      	bx	lr

0801d040 <_fini>:
 801d040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d042:	bf00      	nop
 801d044:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d046:	bc08      	pop	{r3}
 801d048:	469e      	mov	lr, r3
 801d04a:	4770      	bx	lr
