
NucleoF411RE_WFM200.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001aebc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0004f634  0801b05c  0801b05c  0002b05c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0806a690  0806a690  0008012c  2**0
                  CONTENTS
  4 .ARM          00000008  0806a690  0806a690  0007a690  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0806a698  0806a698  0008012c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0806a698  0806a698  0007a698  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0806a69c  0806a69c  0007a69c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000012c  20000000  0806a6a0  00080000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00013b40  2000012c  0806a7cc  0008012c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20013c6c  0806a7cc  00083c6c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0008012c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00032864  00000000  00000000  0008015c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000091d1  00000000  00000000  000b29c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000023c8  00000000  00000000  000bbb98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002230  00000000  00000000  000bdf60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000294ea  00000000  00000000  000c0190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003835b  00000000  00000000  000e967a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b61a8  00000000  00000000  001219d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001d7b7d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009958  00000000  00000000  001d7bd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000012c 	.word	0x2000012c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0801b044 	.word	0x0801b044

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000130 	.word	0x20000130
 80001dc:	0801b044 	.word	0x0801b044

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <start_app_task>:


osThreadId id;

void start_app_task(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0

  init_udp();
 80005b8:	f000 f922 	bl	8000800 <init_udp>


  spi_to_wifi_queue = xQueueCreate(SPI_EVENTS_NB_MAX, sizeof(spi_to_udp_t));
 80005bc:	2200      	movs	r2, #0
 80005be:	210c      	movs	r1, #12
 80005c0:	2014      	movs	r0, #20
 80005c2:	f009 fabf 	bl	8009b44 <xQueueGenericCreate>
 80005c6:	4603      	mov	r3, r0
 80005c8:	4a0a      	ldr	r2, [pc, #40]	; (80005f4 <start_app_task+0x40>)
 80005ca:	6013      	str	r3, [r2, #0]
  	if (spi_to_wifi_queue == NULL){
 80005cc:	4b09      	ldr	r3, [pc, #36]	; (80005f4 <start_app_task+0x40>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d102      	bne.n	80005da <start_app_task+0x26>
  		printf("booboo Queue \r\n");
 80005d4:	4808      	ldr	r0, [pc, #32]	; (80005f8 <start_app_task+0x44>)
 80005d6:	f019 fd19 	bl	801a00c <puts>
  	}



  udp_app_init((void*) spi_to_wifi_queue);
 80005da:	4b06      	ldr	r3, [pc, #24]	; (80005f4 <start_app_task+0x40>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	4618      	mov	r0, r3
 80005e0:	f000 f95c 	bl	800089c <udp_app_init>
  spi_receive_start ((void*) spi_to_wifi_queue);
 80005e4:	4b03      	ldr	r3, [pc, #12]	; (80005f4 <start_app_task+0x40>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	4618      	mov	r0, r3
 80005ea:	f000 f807 	bl	80005fc <spi_receive_start>

}
 80005ee:	bf00      	nop
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	20000148 	.word	0x20000148
 80005f8:	0801b05c 	.word	0x0801b05c

080005fc <spi_receive_start>:

void spi_receive_task_entry(void const *p_arg);

void DMA_Config (uint32_t srcAdd, uint32_t destAdd, uint16_t datasize);

void spi_receive_start (void *arg) {
 80005fc:	b5b0      	push	{r4, r5, r7, lr}
 80005fe:	b088      	sub	sp, #32
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]

	//CREATE xQueue

	osThreadDef(spi_slave_handle, spi_receive_task_entry, osPriorityAboveNormal, 0, configMINIMAL_STACK_SIZE*10);
 8000604:	4b0b      	ldr	r3, [pc, #44]	; (8000634 <spi_receive_start+0x38>)
 8000606:	f107 040c 	add.w	r4, r7, #12
 800060a:	461d      	mov	r5, r3
 800060c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800060e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000610:	682b      	ldr	r3, [r5, #0]
 8000612:	6023      	str	r3, [r4, #0]

	if (osThreadCreate(osThread(spi_slave_handle), (void *)arg) == NULL){
 8000614:	f107 030c 	add.w	r3, r7, #12
 8000618:	6879      	ldr	r1, [r7, #4]
 800061a:	4618      	mov	r0, r3
 800061c:	f008 fe1b 	bl	8009256 <osThreadCreate>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d102      	bne.n	800062c <spi_receive_start+0x30>
		printf("Booboo created SPI task \r\n");
 8000626:	4804      	ldr	r0, [pc, #16]	; (8000638 <spi_receive_start+0x3c>)
 8000628:	f019 fcf0 	bl	801a00c <puts>
	}


}
 800062c:	bf00      	nop
 800062e:	3720      	adds	r7, #32
 8000630:	46bd      	mov	sp, r7
 8000632:	bdb0      	pop	{r4, r5, r7, pc}
 8000634:	0801b09c 	.word	0x0801b09c
 8000638:	0801b080 	.word	0x0801b080

0800063c <spi_receive_task_entry>:


void spi_receive_task_entry(void const *arg){
 800063c:	b580      	push	{r7, lr}
 800063e:	f5ad 5da1 	sub.w	sp, sp, #5152	; 0x1420
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
 8000646:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800064a:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800064e:	6018      	str	r0, [r3, #0]

	uint16_t received_vector[SPI_DMA_BUFFER_SIZE];
	uint16_t transmit_vector[SPI_DMA_BUFFER_SIZE];
	spi_to_udp_t spi_message = {0};
 8000650:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8000654:	3b1c      	subs	r3, #28
 8000656:	2200      	movs	r2, #0
 8000658:	601a      	str	r2, [r3, #0]
 800065a:	605a      	str	r2, [r3, #4]
 800065c:	609a      	str	r2, [r3, #8]

	for (int i = 0; i<SPI_DMA_BUFFER_SIZE/4; i++){
 800065e:	2300      	movs	r3, #0
 8000660:	f507 52a1 	add.w	r2, r7, #5152	; 0x1420
 8000664:	f102 0204 	add.w	r2, r2, #4
 8000668:	6013      	str	r3, [r2, #0]
 800066a:	e031      	b.n	80006d0 <spi_receive_task_entry+0x94>
		for (int j = 0; j<4; j++){
 800066c:	2300      	movs	r3, #0
 800066e:	f507 52a1 	add.w	r2, r7, #5152	; 0x1420
 8000672:	6013      	str	r3, [r2, #0]
 8000674:	e01c      	b.n	80006b0 <spi_receive_task_entry+0x74>
			transmit_vector[(4*i) + j]= i;
 8000676:	f507 53a1 	add.w	r3, r7, #5152	; 0x1420
 800067a:	f103 0304 	add.w	r3, r3, #4
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	009a      	lsls	r2, r3, #2
 8000682:	f507 53a1 	add.w	r3, r7, #5152	; 0x1420
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4413      	add	r3, r2
 800068a:	f507 52a1 	add.w	r2, r7, #5152	; 0x1420
 800068e:	f102 0204 	add.w	r2, r2, #4
 8000692:	6812      	ldr	r2, [r2, #0]
 8000694:	b292      	uxth	r2, r2
 8000696:	f507 6185 	add.w	r1, r7, #1064	; 0x428
 800069a:	005b      	lsls	r3, r3, #1
 800069c:	440b      	add	r3, r1
 800069e:	f823 2c10 	strh.w	r2, [r3, #-16]
		for (int j = 0; j<4; j++){
 80006a2:	f507 53a1 	add.w	r3, r7, #5152	; 0x1420
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	3301      	adds	r3, #1
 80006aa:	f507 52a1 	add.w	r2, r7, #5152	; 0x1420
 80006ae:	6013      	str	r3, [r2, #0]
 80006b0:	f507 53a1 	add.w	r3, r7, #5152	; 0x1420
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	2b03      	cmp	r3, #3
 80006b8:	dddd      	ble.n	8000676 <spi_receive_task_entry+0x3a>
	for (int i = 0; i<SPI_DMA_BUFFER_SIZE/4; i++){
 80006ba:	f507 53a1 	add.w	r3, r7, #5152	; 0x1420
 80006be:	f103 0304 	add.w	r3, r3, #4
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	3301      	adds	r3, #1
 80006c6:	f507 52a1 	add.w	r2, r7, #5152	; 0x1420
 80006ca:	f102 0204 	add.w	r2, r2, #4
 80006ce:	6013      	str	r3, [r2, #0]
 80006d0:	f507 53a1 	add.w	r3, r7, #5152	; 0x1420
 80006d4:	f103 0304 	add.w	r3, r3, #4
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	2bff      	cmp	r3, #255	; 0xff
 80006dc:	ddc6      	ble.n	800066c <spi_receive_task_entry+0x30>
		}
	}
	memset(received_vector, 0x00, sizeof(received_vector));
 80006de:	f607 4318 	addw	r3, r7, #3096	; 0xc18
 80006e2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80006e6:	2100      	movs	r1, #0
 80006e8:	4618      	mov	r0, r3
 80006ea:	f019 fb21 	bl	8019d30 <memset>
	spi_message.spi_task_id = 1;
 80006ee:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80006f2:	2201      	movs	r2, #1
 80006f4:	f823 2c1c 	strh.w	r2, [r3, #-28]
	spi_message.message_lenght = sizeof(received_vector);
 80006f8:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80006fc:	461a      	mov	r2, r3
 80006fe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000702:	f842 3c14 	str.w	r3, [r2, #-20]
#endif
#endif

#ifdef udp_mode_only

	  uint8_t bufferTest[SPI_DMA_BUFFER_SIZE] = {};
 8000706:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800070a:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 800070e:	2200      	movs	r2, #0
 8000710:	601a      	str	r2, [r3, #0]
 8000712:	3304      	adds	r3, #4
 8000714:	f44f 727f 	mov.w	r2, #1020	; 0x3fc
 8000718:	2100      	movs	r1, #0
 800071a:	4618      	mov	r0, r3
 800071c:	f019 fb08 	bl	8019d30 <memset>

	for (int i = 0; i<SPI_DMA_BUFFER_SIZE/16; i++){
 8000720:	2300      	movs	r3, #0
 8000722:	f507 52a0 	add.w	r2, r7, #5120	; 0x1400
 8000726:	f102 021c 	add.w	r2, r2, #28
 800072a:	6013      	str	r3, [r2, #0]
 800072c:	e03a      	b.n	80007a4 <spi_receive_task_entry+0x168>
		  for(int j = 0; j< 16; j++){
 800072e:	2300      	movs	r3, #0
 8000730:	f507 52a0 	add.w	r2, r7, #5120	; 0x1400
 8000734:	f102 0218 	add.w	r2, r2, #24
 8000738:	6013      	str	r3, [r2, #0]
 800073a:	e021      	b.n	8000780 <spi_receive_task_entry+0x144>
			  bufferTest[(16*i)+j] = j;
 800073c:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 8000740:	f103 031c 	add.w	r3, r3, #28
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	011a      	lsls	r2, r3, #4
 8000748:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 800074c:	f103 0318 	add.w	r3, r3, #24
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	4413      	add	r3, r2
 8000754:	f507 52a0 	add.w	r2, r7, #5120	; 0x1400
 8000758:	f102 0218 	add.w	r2, r2, #24
 800075c:	6812      	ldr	r2, [r2, #0]
 800075e:	b2d1      	uxtb	r1, r2
 8000760:	f507 6285 	add.w	r2, r7, #1064	; 0x428
 8000764:	f2a2 421c 	subw	r2, r2, #1052	; 0x41c
 8000768:	54d1      	strb	r1, [r2, r3]
		  for(int j = 0; j< 16; j++){
 800076a:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 800076e:	f103 0318 	add.w	r3, r3, #24
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	3301      	adds	r3, #1
 8000776:	f507 52a0 	add.w	r2, r7, #5120	; 0x1400
 800077a:	f102 0218 	add.w	r2, r2, #24
 800077e:	6013      	str	r3, [r2, #0]
 8000780:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 8000784:	f103 0318 	add.w	r3, r3, #24
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	2b0f      	cmp	r3, #15
 800078c:	ddd6      	ble.n	800073c <spi_receive_task_entry+0x100>
	for (int i = 0; i<SPI_DMA_BUFFER_SIZE/16; i++){
 800078e:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 8000792:	f103 031c 	add.w	r3, r3, #28
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	3301      	adds	r3, #1
 800079a:	f507 52a0 	add.w	r2, r7, #5120	; 0x1400
 800079e:	f102 021c 	add.w	r2, r2, #28
 80007a2:	6013      	str	r3, [r2, #0]
 80007a4:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 80007a8:	f103 031c 	add.w	r3, r3, #28
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	2b3f      	cmp	r3, #63	; 0x3f
 80007b0:	ddbd      	ble.n	800072e <spi_receive_task_entry+0xf2>
		  }
	}
	while(1)
	{
		spi_message.buffer = (void*)bufferTest;
 80007b2:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80007b6:	461a      	mov	r2, r3
 80007b8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007bc:	3b1c      	subs	r3, #28
 80007be:	f842 3c18 	str.w	r3, [r2, #-24]
		if (arg != 0){
 80007c2:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80007c6:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d011      	beq.n	80007f4 <spi_receive_task_entry+0x1b8>
			if(xQueueSend((QueueHandle_t)arg,
 80007d0:	f507 6185 	add.w	r1, r7, #1064	; 0x428
 80007d4:	391c      	subs	r1, #28
 80007d6:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80007da:	f2a3 4024 	subw	r0, r3, #1060	; 0x424
 80007de:	2300      	movs	r3, #0
 80007e0:	220a      	movs	r2, #10
 80007e2:	6800      	ldr	r0, [r0, #0]
 80007e4:	f009 fa36 	bl	8009c54 <xQueueGenericSend>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b01      	cmp	r3, #1
 80007ec:	d002      	beq.n	80007f4 <spi_receive_task_entry+0x1b8>
						 (void *)&spi_message,
						 (TickType_t)10) != pdPASS)
			{
				printf("problem in queueSend \r\n");
 80007ee:	4803      	ldr	r0, [pc, #12]	; (80007fc <spi_receive_task_entry+0x1c0>)
 80007f0:	f019 fc0c 	bl	801a00c <puts>
			}
		}
		HAL_Delay(1);
 80007f4:	2001      	movs	r0, #1
 80007f6:	f002 ff1f 	bl	8003638 <HAL_Delay>
		spi_message.buffer = (void*)bufferTest;
 80007fa:	e7da      	b.n	80007b2 <spi_receive_task_entry+0x176>
 80007fc:	0801b0b0 	.word	0x0801b0b0

08000800 <init_udp>:

extern int start_spi_receiving_task;

void udp_app_start(void const *arg);

int init_udp(void){
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0

  res = ipaddr_aton(ip_str_server, &server_addr);
 8000804:	4b1d      	ldr	r3, [pc, #116]	; (800087c <init_udp+0x7c>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	491d      	ldr	r1, [pc, #116]	; (8000880 <init_udp+0x80>)
 800080a:	4618      	mov	r0, r3
 800080c:	f018 f8d4 	bl	80189b8 <ip4addr_aton>
 8000810:	4603      	mov	r3, r0
 8000812:	4a1c      	ldr	r2, [pc, #112]	; (8000884 <init_udp+0x84>)
 8000814:	6013      	str	r3, [r2, #0]

  if (res == 0){
 8000816:	4b1b      	ldr	r3, [pc, #108]	; (8000884 <init_udp+0x84>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	2b00      	cmp	r3, #0
 800081c:	d105      	bne.n	800082a <init_udp+0x2a>
      printf("Failed to convert string (%s) to IP \r\n", ip_str_server);
 800081e:	4b17      	ldr	r3, [pc, #92]	; (800087c <init_udp+0x7c>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	4619      	mov	r1, r3
 8000824:	4818      	ldr	r0, [pc, #96]	; (8000888 <init_udp+0x88>)
 8000826:	f019 fb6b 	bl	8019f00 <iprintf>
      //return SL_STATUS_FAIL;
  }
  upcb = udp_new();
 800082a:	f014 fceb 	bl	8015204 <udp_new>
 800082e:	4603      	mov	r3, r0
 8000830:	4a16      	ldr	r2, [pc, #88]	; (800088c <init_udp+0x8c>)
 8000832:	6013      	str	r3, [r2, #0]

  if (upcb == NULL){
 8000834:	4b15      	ldr	r3, [pc, #84]	; (800088c <init_udp+0x8c>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	2b00      	cmp	r3, #0
 800083a:	d102      	bne.n	8000842 <init_udp+0x42>
      printf("UDP PCB creation failed \r\n");
 800083c:	4814      	ldr	r0, [pc, #80]	; (8000890 <init_udp+0x90>)
 800083e:	f019 fbe5 	bl	801a00c <puts>
      //return SL_STATUS_FAIL;
  }

  err = udp_connect(upcb, &server_addr, UDP_SERVER_PORT_DEFAULT);
 8000842:	4b12      	ldr	r3, [pc, #72]	; (800088c <init_udp+0x8c>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	f242 7210 	movw	r2, #10000	; 0x2710
 800084a:	490d      	ldr	r1, [pc, #52]	; (8000880 <init_udp+0x80>)
 800084c:	4618      	mov	r0, r3
 800084e:	f014 fbe1 	bl	8015014 <udp_connect>
 8000852:	4603      	mov	r3, r0
 8000854:	461a      	mov	r2, r3
 8000856:	4b0f      	ldr	r3, [pc, #60]	; (8000894 <init_udp+0x94>)
 8000858:	701a      	strb	r2, [r3, #0]

  if (err == ERR_OK){
 800085a:	4b0e      	ldr	r3, [pc, #56]	; (8000894 <init_udp+0x94>)
 800085c:	f993 3000 	ldrsb.w	r3, [r3]
 8000860:	2b00      	cmp	r3, #0
 8000862:	d105      	bne.n	8000870 <init_udp+0x70>
        printf("Client UDP connected to %s \r\n", ip_str_server);
 8000864:	4b05      	ldr	r3, [pc, #20]	; (800087c <init_udp+0x7c>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4619      	mov	r1, r3
 800086a:	480b      	ldr	r0, [pc, #44]	; (8000898 <init_udp+0x98>)
 800086c:	f019 fb48 	bl	8019f00 <iprintf>
  }

  return err;
 8000870:	4b08      	ldr	r3, [pc, #32]	; (8000894 <init_udp+0x94>)
 8000872:	f993 3000 	ldrsb.w	r3, [r3]
}
 8000876:	4618      	mov	r0, r3
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	20000004 	.word	0x20000004
 8000880:	2000014c 	.word	0x2000014c
 8000884:	20000008 	.word	0x20000008
 8000888:	0801b0e8 	.word	0x0801b0e8
 800088c:	20000150 	.word	0x20000150
 8000890:	0801b110 	.word	0x0801b110
 8000894:	20000154 	.word	0x20000154
 8000898:	0801b12c 	.word	0x0801b12c

0800089c <udp_app_init>:



void udp_app_init(void *arg){
 800089c:	b5b0      	push	{r4, r5, r7, lr}
 800089e:	b088      	sub	sp, #32
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]

//	udp_ready = xSemaphoreCreateBinary();

	osThreadDef(udp_init_handle, udp_app_start, osPriorityRealtime, 0, configMINIMAL_STACK_SIZE*10);
 80008a4:	4b0b      	ldr	r3, [pc, #44]	; (80008d4 <udp_app_init+0x38>)
 80008a6:	f107 040c 	add.w	r4, r7, #12
 80008aa:	461d      	mov	r5, r3
 80008ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008b0:	682b      	ldr	r3, [r5, #0]
 80008b2:	6023      	str	r3, [r4, #0]

	if (osThreadCreate(osThread(udp_init_handle), (void *) arg) == NULL){
 80008b4:	f107 030c 	add.w	r3, r7, #12
 80008b8:	6879      	ldr	r1, [r7, #4]
 80008ba:	4618      	mov	r0, r3
 80008bc:	f008 fccb 	bl	8009256 <osThreadCreate>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d102      	bne.n	80008cc <udp_app_init+0x30>
		printf("Booboo creating UDP task \r\n");
 80008c6:	4804      	ldr	r0, [pc, #16]	; (80008d8 <udp_app_init+0x3c>)
 80008c8:	f019 fba0 	bl	801a00c <puts>
	}


}
 80008cc:	bf00      	nop
 80008ce:	3720      	adds	r7, #32
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bdb0      	pop	{r4, r5, r7, pc}
 80008d4:	0801b168 	.word	0x0801b168
 80008d8:	0801b14c 	.word	0x0801b14c

080008dc <udp_app_start>:





void udp_app_start(void const *arg){
 80008dc:	b580      	push	{r7, lr}
 80008de:	b088      	sub	sp, #32
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]

	  struct pbuf *p;
	  uint32_t counter = 0;
 80008e4:	2300      	movs	r3, #0
 80008e6:	61bb      	str	r3, [r7, #24]
	  spi_to_udp_t udp_message = {0};
 80008e8:	f107 030c 	add.w	r3, r7, #12
 80008ec:	2200      	movs	r2, #0
 80008ee:	601a      	str	r2, [r3, #0]
 80008f0:	605a      	str	r2, [r3, #4]
 80008f2:	609a      	str	r2, [r3, #8]

	  p = pbuf_alloc(PBUF_TRANSPORT, SPI_DMA_BUFFER_SIZE+8, PBUF_RAM);
 80008f4:	f44f 7220 	mov.w	r2, #640	; 0x280
 80008f8:	f44f 6181 	mov.w	r1, #1032	; 0x408
 80008fc:	2036      	movs	r0, #54	; 0x36
 80008fe:	f00d fcdb 	bl	800e2b8 <pbuf_alloc>
 8000902:	61f8      	str	r0, [r7, #28]


	  while(1){
		if(xQueueReceive((QueueHandle_t)arg, (void *)&udp_message , (TickType_t)1) == pdPASS){
 8000904:	f107 030c 	add.w	r3, r7, #12
 8000908:	2201      	movs	r2, #1
 800090a:	4619      	mov	r1, r3
 800090c:	6878      	ldr	r0, [r7, #4]
 800090e:	f009 fbc7 	bl	800a0a0 <xQueueReceive>
 8000912:	4603      	mov	r3, r0
 8000914:	2b01      	cmp	r3, #1
 8000916:	d12e      	bne.n	8000976 <udp_app_start+0x9a>

//			printf("%u \r\n", counter);
//			printf("%02x %02x %02x \r\n",udp_message.data0, udp_message.data1, udp_message.data2);


			if (p == NULL){
 8000918:	69fb      	ldr	r3, [r7, #28]
 800091a:	2b00      	cmp	r3, #0
 800091c:	d10a      	bne.n	8000934 <udp_app_start+0x58>
				p = pbuf_alloc(PBUF_TRANSPORT, SPI_DMA_BUFFER_SIZE, PBUF_RAM);
 800091e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8000922:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000926:	2036      	movs	r0, #54	; 0x36
 8000928:	f00d fcc6 	bl	800e2b8 <pbuf_alloc>
 800092c:	61f8      	str	r0, [r7, #28]
				printf("p is NULL \r\n");
 800092e:	4814      	ldr	r0, [pc, #80]	; (8000980 <udp_app_start+0xa4>)
 8000930:	f019 fb6c 	bl	801a00c <puts>
			}

			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8000934:	2201      	movs	r2, #1
 8000936:	f44f 7180 	mov.w	r1, #256	; 0x100
 800093a:	4812      	ldr	r0, [pc, #72]	; (8000984 <udp_app_start+0xa8>)
 800093c:	f003 ff96 	bl	800486c <HAL_GPIO_WritePin>

			counter ++;
 8000940:	69bb      	ldr	r3, [r7, #24]
 8000942:	3301      	adds	r3, #1
 8000944:	61bb      	str	r3, [r7, #24]
			//pbuf_take_at(p, counter, 2, SPI_DMA_BUFFER_SIZE);
			pbuf_take_at(p, (const void *)udp_message.buffer, SPI_DMA_BUFFER_SIZE, 0);
 8000946:	6939      	ldr	r1, [r7, #16]
 8000948:	2300      	movs	r3, #0
 800094a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800094e:	69f8      	ldr	r0, [r7, #28]
 8000950:	f00e fae0 	bl	800ef14 <pbuf_take_at>
			udp_send(upcb, p);
 8000954:	4b0c      	ldr	r3, [pc, #48]	; (8000988 <udp_app_start+0xac>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	69f9      	ldr	r1, [r7, #28]
 800095a:	4618      	mov	r0, r3
 800095c:	f014 f8ce 	bl	8014afc <udp_send>

			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8000960:	2200      	movs	r2, #0
 8000962:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000966:	4807      	ldr	r0, [pc, #28]	; (8000984 <udp_app_start+0xa8>)
 8000968:	f003 ff80 	bl	800486c <HAL_GPIO_WritePin>
			printf("%u \r\n", counter);
 800096c:	69b9      	ldr	r1, [r7, #24]
 800096e:	4807      	ldr	r0, [pc, #28]	; (800098c <udp_app_start+0xb0>)
 8000970:	f019 fac6 	bl	8019f00 <iprintf>
 8000974:	e7c6      	b.n	8000904 <udp_app_start+0x28>



		}else{
			vTaskDelay(1);
 8000976:	2001      	movs	r0, #1
 8000978:	f00a f98e 	bl	800ac98 <vTaskDelay>
		if(xQueueReceive((QueueHandle_t)arg, (void *)&udp_message , (TickType_t)1) == pdPASS){
 800097c:	e7c2      	b.n	8000904 <udp_app_start+0x28>
 800097e:	bf00      	nop
 8000980:	0801b17c 	.word	0x0801b17c
 8000984:	40020800 	.word	0x40020800
 8000988:	20000150 	.word	0x20000150
 800098c:	0801b188 	.word	0x0801b188

08000990 <from_hex>:
 *
 * @param ch Character to convert to integer.
 * @returns Returns integer result.
 ******************************************************************************/
char from_hex(char ch)
{
 8000990:	b480      	push	{r7}
 8000992:	b085      	sub	sp, #20
 8000994:	af00      	add	r7, sp, #0
 8000996:	4603      	mov	r3, r0
 8000998:	71fb      	strb	r3, [r7, #7]
  return isdigit(ch) ? ch - '0' : tolower(ch) - 'a' + 10;
 800099a:	79fb      	ldrb	r3, [r7, #7]
 800099c:	3301      	adds	r3, #1
 800099e:	4a11      	ldr	r2, [pc, #68]	; (80009e4 <from_hex+0x54>)
 80009a0:	4413      	add	r3, r2
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	f003 0304 	and.w	r3, r3, #4
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d003      	beq.n	80009b4 <from_hex+0x24>
 80009ac:	79fb      	ldrb	r3, [r7, #7]
 80009ae:	3b30      	subs	r3, #48	; 0x30
 80009b0:	b2db      	uxtb	r3, r3
 80009b2:	e011      	b.n	80009d8 <from_hex+0x48>
 80009b4:	79fb      	ldrb	r3, [r7, #7]
 80009b6:	73fb      	strb	r3, [r7, #15]
 80009b8:	7bfb      	ldrb	r3, [r7, #15]
 80009ba:	3301      	adds	r3, #1
 80009bc:	4a09      	ldr	r2, [pc, #36]	; (80009e4 <from_hex+0x54>)
 80009be:	4413      	add	r3, r2
 80009c0:	781b      	ldrb	r3, [r3, #0]
 80009c2:	f003 0303 	and.w	r3, r3, #3
 80009c6:	2b01      	cmp	r3, #1
 80009c8:	d102      	bne.n	80009d0 <from_hex+0x40>
 80009ca:	7bfb      	ldrb	r3, [r7, #15]
 80009cc:	3320      	adds	r3, #32
 80009ce:	e000      	b.n	80009d2 <from_hex+0x42>
 80009d0:	7bfb      	ldrb	r3, [r7, #15]
 80009d2:	b2db      	uxtb	r3, r3
 80009d4:	3b57      	subs	r3, #87	; 0x57
 80009d6:	b2db      	uxtb	r3, r3
}
 80009d8:	4618      	mov	r0, r3
 80009da:	3714      	adds	r7, #20
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	4770      	bx	lr
 80009e4:	0806a444 	.word	0x0806a444

080009e8 <url_decode>:
 *
 * @param str String to decode.
 * @returns Success or fail.
 ******************************************************************************/
sl_status_t url_decode(char *str)
{
 80009e8:	b590      	push	{r4, r7, lr}
 80009ea:	b095      	sub	sp, #84	; 0x54
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  char *pstr = str, rstr[64];
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  int i = 0;
 80009f4:	2300      	movs	r3, #0
 80009f6:	64bb      	str	r3, [r7, #72]	; 0x48

  if (strlen(str) > 64) {
 80009f8:	6878      	ldr	r0, [r7, #4]
 80009fa:	f7ff fbfb 	bl	80001f4 <strlen>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b40      	cmp	r3, #64	; 0x40
 8000a02:	d947      	bls.n	8000a94 <url_decode+0xac>
    return SL_STATUS_FAIL;
 8000a04:	2301      	movs	r3, #1
 8000a06:	e056      	b.n	8000ab6 <url_decode+0xce>
  }

  while (*pstr) {
    if (*pstr == '%') {
 8000a08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	2b25      	cmp	r3, #37	; 0x25
 8000a0e:	d128      	bne.n	8000a62 <url_decode+0x7a>
      if (pstr[1] && pstr[2]) {
 8000a10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000a12:	3301      	adds	r3, #1
 8000a14:	781b      	ldrb	r3, [r3, #0]
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d039      	beq.n	8000a8e <url_decode+0xa6>
 8000a1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000a1c:	3302      	adds	r3, #2
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d034      	beq.n	8000a8e <url_decode+0xa6>
        rstr[i++] = from_hex(pstr[1]) << 4 | from_hex(pstr[2]);
 8000a24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000a26:	3301      	adds	r3, #1
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f7ff ffb0 	bl	8000990 <from_hex>
 8000a30:	4603      	mov	r3, r0
 8000a32:	011b      	lsls	r3, r3, #4
 8000a34:	b25c      	sxtb	r4, r3
 8000a36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000a38:	3302      	adds	r3, #2
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f7ff ffa7 	bl	8000990 <from_hex>
 8000a42:	4603      	mov	r3, r0
 8000a44:	b25b      	sxtb	r3, r3
 8000a46:	4323      	orrs	r3, r4
 8000a48:	b259      	sxtb	r1, r3
 8000a4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000a4c:	1c5a      	adds	r2, r3, #1
 8000a4e:	64ba      	str	r2, [r7, #72]	; 0x48
 8000a50:	b2ca      	uxtb	r2, r1
 8000a52:	3350      	adds	r3, #80	; 0x50
 8000a54:	443b      	add	r3, r7
 8000a56:	f803 2c48 	strb.w	r2, [r3, #-72]
        pstr += 2;
 8000a5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000a5c:	3302      	adds	r3, #2
 8000a5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000a60:	e015      	b.n	8000a8e <url_decode+0xa6>
      }
    } else if (*pstr == '+') {
 8000a62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000a64:	781b      	ldrb	r3, [r3, #0]
 8000a66:	2b2b      	cmp	r3, #43	; 0x2b
 8000a68:	d108      	bne.n	8000a7c <url_decode+0x94>
      rstr[i++]  = ' ';
 8000a6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000a6c:	1c5a      	adds	r2, r3, #1
 8000a6e:	64ba      	str	r2, [r7, #72]	; 0x48
 8000a70:	3350      	adds	r3, #80	; 0x50
 8000a72:	443b      	add	r3, r7
 8000a74:	2220      	movs	r2, #32
 8000a76:	f803 2c48 	strb.w	r2, [r3, #-72]
 8000a7a:	e008      	b.n	8000a8e <url_decode+0xa6>
    } else {
      rstr[i++] = *pstr;
 8000a7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000a7e:	1c5a      	adds	r2, r3, #1
 8000a80:	64ba      	str	r2, [r7, #72]	; 0x48
 8000a82:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000a84:	7812      	ldrb	r2, [r2, #0]
 8000a86:	3350      	adds	r3, #80	; 0x50
 8000a88:	443b      	add	r3, r7
 8000a8a:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
    pstr++;
 8000a8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000a90:	3301      	adds	r3, #1
 8000a92:	64fb      	str	r3, [r7, #76]	; 0x4c
  while (*pstr) {
 8000a94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d1b5      	bne.n	8000a08 <url_decode+0x20>
  }
  rstr[i] = '\0';
 8000a9c:	f107 0208 	add.w	r2, r7, #8
 8000aa0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000aa2:	4413      	add	r3, r2
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	701a      	strb	r2, [r3, #0]
  strcpy(str, &rstr[0]);
 8000aa8:	f107 0308 	add.w	r3, r7, #8
 8000aac:	4619      	mov	r1, r3
 8000aae:	6878      	ldr	r0, [r7, #4]
 8000ab0:	f019 fb02 	bl	801a0b8 <strcpy>
  return SL_STATUS_OK;
 8000ab4:	2300      	movs	r3, #0
}
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	3754      	adds	r7, #84	; 0x54
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd90      	pop	{r4, r7, pc}
	...

08000ac0 <wifi_autoconnexion_init>:



void wifi_autoconnexion_init(void)
{
 8000ac0:	b5b0      	push	{r4, r5, r7, lr}
 8000ac2:	b086      	sub	sp, #24
 8000ac4:	af00      	add	r7, sp, #0

	osThreadDef(autoconnect_task, wifi_station_connect_task_entry, osPriorityBelowNormal, 0, 1024);
 8000ac6:	4b08      	ldr	r3, [pc, #32]	; (8000ae8 <wifi_autoconnexion_init+0x28>)
 8000ac8:	1d3c      	adds	r4, r7, #4
 8000aca:	461d      	mov	r5, r3
 8000acc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ace:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ad0:	682b      	ldr	r3, [r5, #0]
 8000ad2:	6023      	str	r3, [r4, #0]
	osThreadCreate(osThread(autoconnect_task), NULL);
 8000ad4:	1d3b      	adds	r3, r7, #4
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f008 fbbc 	bl	8009256 <osThreadCreate>

}
 8000ade:	bf00      	nop
 8000ae0:	3718      	adds	r7, #24
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bdb0      	pop	{r4, r5, r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	0801b1dc 	.word	0x0801b1dc

08000aec <wifi_station_connect_task_entry>:

/***************************************************************************//**
 * @brief Web server CGI handler to start the station interface.
 ******************************************************************************/
void wifi_station_connect_task_entry(const void *args)
{
 8000aec:	b590      	push	{r4, r7, lr}
 8000aee:	b097      	sub	sp, #92	; 0x5c
 8000af0:	af08      	add	r7, sp, #32
 8000af2:	6078      	str	r0, [r7, #4]
  sl_status_t status;
  int num_params = 3;
 8000af4:	2303      	movs	r3, #3
 8000af6:	62fb      	str	r3, [r7, #44]	; 0x2c
  char *pc_param[] ={"ssid", "pwd", "secu"," "};
 8000af8:	4b58      	ldr	r3, [pc, #352]	; (8000c5c <wifi_station_connect_task_entry+0x170>)
 8000afa:	f107 0418 	add.w	r4, r7, #24
 8000afe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b00:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  char *pc_value[] ={WLAN_SSID_DEFAULT, WLAN_PASSKEY_DEFAULT, "WPA2"," "};
 8000b04:	4b56      	ldr	r3, [pc, #344]	; (8000c60 <wifi_station_connect_task_entry+0x174>)
 8000b06:	f107 0408 	add.w	r4, r7, #8
 8000b0a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b0c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  int ssid_length = 0, passkey_length = 0;
 8000b10:	2300      	movs	r3, #0
 8000b12:	637b      	str	r3, [r7, #52]	; 0x34
 8000b14:	2300      	movs	r3, #0
 8000b16:	633b      	str	r3, [r7, #48]	; 0x30

  if (num_params == 3) {
 8000b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b1a:	2b03      	cmp	r3, #3
 8000b1c:	f040 8096 	bne.w	8000c4c <wifi_station_connect_task_entry+0x160>
    if (strcmp(pc_param[0], "ssid") == 0)
 8000b20:	69bb      	ldr	r3, [r7, #24]
 8000b22:	4950      	ldr	r1, [pc, #320]	; (8000c64 <wifi_station_connect_task_entry+0x178>)
 8000b24:	4618      	mov	r0, r3
 8000b26:	f7ff fb5b 	bl	80001e0 <strcmp>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d114      	bne.n	8000b5a <wifi_station_connect_task_entry+0x6e>
    {
      url_decode(pc_value[0]);
 8000b30:	68bb      	ldr	r3, [r7, #8]
 8000b32:	4618      	mov	r0, r3
 8000b34:	f7ff ff58 	bl	80009e8 <url_decode>
      ssid_length = strlen(pc_value[0]);
 8000b38:	68bb      	ldr	r3, [r7, #8]
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f7ff fb5a 	bl	80001f4 <strlen>
 8000b40:	4603      	mov	r3, r0
 8000b42:	637b      	str	r3, [r7, #52]	; 0x34
      memset(wlan_ssid, 0, 32);
 8000b44:	2220      	movs	r2, #32
 8000b46:	2100      	movs	r1, #0
 8000b48:	4847      	ldr	r0, [pc, #284]	; (8000c68 <wifi_station_connect_task_entry+0x17c>)
 8000b4a:	f019 f8f1 	bl	8019d30 <memset>
      strncpy(wlan_ssid, pc_value[0], ssid_length);
 8000b4e:	68bb      	ldr	r3, [r7, #8]
 8000b50:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000b52:	4619      	mov	r1, r3
 8000b54:	4844      	ldr	r0, [pc, #272]	; (8000c68 <wifi_station_connect_task_entry+0x17c>)
 8000b56:	f019 facb 	bl	801a0f0 <strncpy>
    }
    if (strcmp(pc_param[1], "pwd") == 0)
 8000b5a:	69fb      	ldr	r3, [r7, #28]
 8000b5c:	4943      	ldr	r1, [pc, #268]	; (8000c6c <wifi_station_connect_task_entry+0x180>)
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f7ff fb3e 	bl	80001e0 <strcmp>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d114      	bne.n	8000b94 <wifi_station_connect_task_entry+0xa8>
    {
      url_decode(pc_value[1]);
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f7ff ff3b 	bl	80009e8 <url_decode>
      passkey_length = strlen(pc_value[1]);
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	4618      	mov	r0, r3
 8000b76:	f7ff fb3d 	bl	80001f4 <strlen>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	633b      	str	r3, [r7, #48]	; 0x30
      memset(wlan_passkey, 0, 64);
 8000b7e:	2240      	movs	r2, #64	; 0x40
 8000b80:	2100      	movs	r1, #0
 8000b82:	483b      	ldr	r0, [pc, #236]	; (8000c70 <wifi_station_connect_task_entry+0x184>)
 8000b84:	f019 f8d4 	bl	8019d30 <memset>
      strncpy(wlan_passkey, pc_value[1], passkey_length);
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	4838      	ldr	r0, [pc, #224]	; (8000c70 <wifi_station_connect_task_entry+0x184>)
 8000b90:	f019 faae 	bl	801a0f0 <strncpy>
    }
    if (strcmp(pc_param[2], "secu") == 0)
 8000b94:	6a3b      	ldr	r3, [r7, #32]
 8000b96:	4937      	ldr	r1, [pc, #220]	; (8000c74 <wifi_station_connect_task_entry+0x188>)
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f7ff fb21 	bl	80001e0 <strcmp>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d12e      	bne.n	8000c02 <wifi_station_connect_task_entry+0x116>
    {
      url_decode(pc_value[2]);
 8000ba4:	693b      	ldr	r3, [r7, #16]
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f7ff ff1e 	bl	80009e8 <url_decode>
      if ((strcmp(pc_value[2], "WPA2") == 0) || (strcmp(pc_value[2], "WPA") == 0))
 8000bac:	693b      	ldr	r3, [r7, #16]
 8000bae:	4932      	ldr	r1, [pc, #200]	; (8000c78 <wifi_station_connect_task_entry+0x18c>)
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f7ff fb15 	bl	80001e0 <strcmp>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d007      	beq.n	8000bcc <wifi_station_connect_task_entry+0xe0>
 8000bbc:	693b      	ldr	r3, [r7, #16]
 8000bbe:	492f      	ldr	r1, [pc, #188]	; (8000c7c <wifi_station_connect_task_entry+0x190>)
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f7ff fb0d 	bl	80001e0 <strcmp>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d103      	bne.n	8000bd4 <wifi_station_connect_task_entry+0xe8>
      {
        wlan_security = WFM_SECURITY_MODE_WPA2_WPA1_PSK;
 8000bcc:	4b2c      	ldr	r3, [pc, #176]	; (8000c80 <wifi_station_connect_task_entry+0x194>)
 8000bce:	2202      	movs	r2, #2
 8000bd0:	701a      	strb	r2, [r3, #0]
 8000bd2:	e016      	b.n	8000c02 <wifi_station_connect_task_entry+0x116>
      }else if (strcmp(pc_value[2], "WEP") == 0)
 8000bd4:	693b      	ldr	r3, [r7, #16]
 8000bd6:	492b      	ldr	r1, [pc, #172]	; (8000c84 <wifi_station_connect_task_entry+0x198>)
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f7ff fb01 	bl	80001e0 <strcmp>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d103      	bne.n	8000bec <wifi_station_connect_task_entry+0x100>
      {
        wlan_security = WFM_SECURITY_MODE_WEP;
 8000be4:	4b26      	ldr	r3, [pc, #152]	; (8000c80 <wifi_station_connect_task_entry+0x194>)
 8000be6:	2201      	movs	r2, #1
 8000be8:	701a      	strb	r2, [r3, #0]
 8000bea:	e00a      	b.n	8000c02 <wifi_station_connect_task_entry+0x116>
      }else if (strcmp(pc_value[2], "OPEN") == 0)
 8000bec:	693b      	ldr	r3, [r7, #16]
 8000bee:	4926      	ldr	r1, [pc, #152]	; (8000c88 <wifi_station_connect_task_entry+0x19c>)
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f7ff faf5 	bl	80001e0 <strcmp>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d102      	bne.n	8000c02 <wifi_station_connect_task_entry+0x116>
      {
        wlan_security = WFM_SECURITY_MODE_OPEN;
 8000bfc:	4b20      	ldr	r3, [pc, #128]	; (8000c80 <wifi_station_connect_task_entry+0x194>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	701a      	strb	r2, [r3, #0]
      }
    }
    if (!(wifi.state & SL_WFX_STA_INTERFACE_CONNECTED))
 8000c02:	4b22      	ldr	r3, [pc, #136]	; (8000c8c <wifi_station_connect_task_entry+0x1a0>)
 8000c04:	f893 3222 	ldrb.w	r3, [r3, #546]	; 0x222
 8000c08:	f003 0302 	and.w	r3, r3, #2
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d120      	bne.n	8000c52 <wifi_station_connect_task_entry+0x166>
    {

      status = sl_wfx_send_join_command((uint8_t*) wlan_ssid, ssid_length,
 8000c10:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000c12:	4b1b      	ldr	r3, [pc, #108]	; (8000c80 <wifi_station_connect_task_entry+0x194>)
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000c18:	b292      	uxth	r2, r2
 8000c1a:	2000      	movs	r0, #0
 8000c1c:	9006      	str	r0, [sp, #24]
 8000c1e:	2000      	movs	r0, #0
 8000c20:	9005      	str	r0, [sp, #20]
 8000c22:	9204      	str	r2, [sp, #16]
 8000c24:	4a12      	ldr	r2, [pc, #72]	; (8000c70 <wifi_station_connect_task_entry+0x184>)
 8000c26:	9203      	str	r2, [sp, #12]
 8000c28:	2200      	movs	r2, #0
 8000c2a:	9202      	str	r2, [sp, #8]
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	9201      	str	r2, [sp, #4]
 8000c30:	9300      	str	r3, [sp, #0]
 8000c32:	2300      	movs	r3, #0
 8000c34:	2200      	movs	r2, #0
 8000c36:	480c      	ldr	r0, [pc, #48]	; (8000c68 <wifi_station_connect_task_entry+0x17c>)
 8000c38:	f006 fa4a 	bl	80070d0 <sl_wfx_send_join_command>
 8000c3c:	62b8      	str	r0, [r7, #40]	; 0x28
                                        NULL, 0, wlan_security, 0, 0,
                                        (uint8_t*) wlan_passkey, passkey_length,
                                        NULL, 0);


      if(status != SL_STATUS_OK)
 8000c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d006      	beq.n	8000c52 <wifi_station_connect_task_entry+0x166>
      {
        printf("Connection command error\r\n");
 8000c44:	4812      	ldr	r0, [pc, #72]	; (8000c90 <wifi_station_connect_task_entry+0x1a4>)
 8000c46:	f019 f9e1 	bl	801a00c <puts>
 8000c4a:	e002      	b.n	8000c52 <wifi_station_connect_task_entry+0x166>
//          }
//        }
//      }
    }
  }else{
    printf("Invalid Connection Request\r\n");
 8000c4c:	4811      	ldr	r0, [pc, #68]	; (8000c94 <wifi_station_connect_task_entry+0x1a8>)
 8000c4e:	f019 f9dd 	bl	801a00c <puts>
  }

  // Delete the init thread.
  while(1){
	  osThreadTerminate(NULL);
 8000c52:	2000      	movs	r0, #0
 8000c54:	f008 fb26 	bl	80092a4 <osThreadTerminate>
 8000c58:	e7fb      	b.n	8000c52 <wifi_station_connect_task_entry+0x166>
 8000c5a:	bf00      	nop
 8000c5c:	0801b238 	.word	0x0801b238
 8000c60:	0801b248 	.word	0x0801b248
 8000c64:	0801b1a4 	.word	0x0801b1a4
 8000c68:	2000000c 	.word	0x2000000c
 8000c6c:	0801b1ac 	.word	0x0801b1ac
 8000c70:	20000030 	.word	0x20000030
 8000c74:	0801b1b0 	.word	0x0801b1b0
 8000c78:	0801b1d4 	.word	0x0801b1d4
 8000c7c:	0801b1f0 	.word	0x0801b1f0
 8000c80:	20000071 	.word	0x20000071
 8000c84:	0801b1f4 	.word	0x0801b1f4
 8000c88:	0801b1f8 	.word	0x0801b1f8
 8000c8c:	20000158 	.word	0x20000158
 8000c90:	0801b200 	.word	0x0801b200
 8000c94:	0801b21c 	.word	0x0801b21c

08000c98 <dhcpclient_set_link_state>:
 * Notify DHCP client task about the wifi status
 *
 * @param link_up link status
 ******************************************************************************/
void dhcpclient_set_link_state(int link_up)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b083      	sub	sp, #12
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  if (link_up) {
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d003      	beq.n	8000cae <dhcpclient_set_link_state+0x16>
    dhcp_state = DHCP_START;
 8000ca6:	4b06      	ldr	r3, [pc, #24]	; (8000cc0 <dhcpclient_set_link_state+0x28>)
 8000ca8:	2201      	movs	r2, #1
 8000caa:	701a      	strb	r2, [r3, #0]
  } else {
    /* Update DHCP state machine */
    dhcp_state = DHCP_LINK_DOWN;
  }
}
 8000cac:	e002      	b.n	8000cb4 <dhcpclient_set_link_state+0x1c>
    dhcp_state = DHCP_LINK_DOWN;
 8000cae:	4b04      	ldr	r3, [pc, #16]	; (8000cc0 <dhcpclient_set_link_state+0x28>)
 8000cb0:	2205      	movs	r2, #5
 8000cb2:	701a      	strb	r2, [r3, #0]
}
 8000cb4:	bf00      	nop
 8000cb6:	370c      	adds	r7, #12
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr
 8000cc0:	2000037c 	.word	0x2000037c

08000cc4 <dhcpclient_start>:
 * DHCP client task.
 *
 * @param arg Network interface
 ******************************************************************************/
void dhcpclient_start(void const * argument)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b092      	sub	sp, #72	; 0x48
 8000cc8:	af02      	add	r7, sp, #8
 8000cca:	6078      	str	r0, [r7, #4]
  struct netif *netif = (struct netif *) argument;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	63fb      	str	r3, [r7, #60]	; 0x3c
  int status;

  for (;;)
  {

    switch (dhcp_state)
 8000cd0:	4b9a      	ldr	r3, [pc, #616]	; (8000f3c <dhcpclient_start+0x278>)
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	b2db      	uxtb	r3, r3
 8000cd6:	2b05      	cmp	r3, #5
 8000cd8:	f000 811f 	beq.w	8000f1a <dhcpclient_start+0x256>
 8000cdc:	2b05      	cmp	r3, #5
 8000cde:	f300 8125 	bgt.w	8000f2c <dhcpclient_start+0x268>
 8000ce2:	2b01      	cmp	r3, #1
 8000ce4:	d002      	beq.n	8000cec <dhcpclient_start+0x28>
 8000ce6:	2b02      	cmp	r3, #2
 8000ce8:	d012      	beq.n	8000d10 <dhcpclient_start+0x4c>
      /* Stop DHCP */
      netifapi_dhcp_stop(netif);
      dhcp_state = DHCP_OFF; 
    }
    break;
    default: break;
 8000cea:	e11f      	b.n	8000f2c <dhcpclient_start+0x268>
        ip_addr_set_zero_ip4(&netif->ip_addr);
 8000cec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000cee:	2200      	movs	r2, #0
 8000cf0:	605a      	str	r2, [r3, #4]
        ip_addr_set_zero_ip4(&netif->netmask);
 8000cf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	609a      	str	r2, [r3, #8]
        ip_addr_set_zero_ip4(&netif->gw);       
 8000cf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	60da      	str	r2, [r3, #12]
        netifapi_dhcp_start(netif);
 8000cfe:	4a90      	ldr	r2, [pc, #576]	; (8000f40 <dhcpclient_start+0x27c>)
 8000d00:	2100      	movs	r1, #0
 8000d02:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000d04:	f00b fe90 	bl	800ca28 <netifapi_netif_common>
        dhcp_state = DHCP_WAIT_ADDRESS;
 8000d08:	4b8c      	ldr	r3, [pc, #560]	; (8000f3c <dhcpclient_start+0x278>)
 8000d0a:	2202      	movs	r2, #2
 8000d0c:	701a      	strb	r2, [r3, #0]
      break;
 8000d0e:	e110      	b.n	8000f32 <dhcpclient_start+0x26e>
        if (dhcp_supplied_address(netif)) 
 8000d10:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000d12:	f016 f943 	bl	8016f9c <dhcp_supplied_address>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d018      	beq.n	8000d4e <dhcpclient_start+0x8a>
          dhcp_state = DHCP_ADDRESS_ASSIGNED;	
 8000d1c:	4b87      	ldr	r3, [pc, #540]	; (8000f3c <dhcpclient_start+0x278>)
 8000d1e:	2203      	movs	r2, #3
 8000d20:	701a      	strb	r2, [r3, #0]
                  sta_netif.ip_addr.addr & 0xff,
 8000d22:	4b88      	ldr	r3, [pc, #544]	; (8000f44 <dhcpclient_start+0x280>)
 8000d24:	685b      	ldr	r3, [r3, #4]
          printf("IP address : %d.%d.%d.%d\r\n",
 8000d26:	b2d9      	uxtb	r1, r3
                  (sta_netif.ip_addr.addr >> 8) & 0xff,
 8000d28:	4b86      	ldr	r3, [pc, #536]	; (8000f44 <dhcpclient_start+0x280>)
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	0a1b      	lsrs	r3, r3, #8
          printf("IP address : %d.%d.%d.%d\r\n",
 8000d2e:	b2da      	uxtb	r2, r3
                  (sta_netif.ip_addr.addr >> 16) & 0xff,
 8000d30:	4b84      	ldr	r3, [pc, #528]	; (8000f44 <dhcpclient_start+0x280>)
 8000d32:	685b      	ldr	r3, [r3, #4]
 8000d34:	0c1b      	lsrs	r3, r3, #16
          printf("IP address : %d.%d.%d.%d\r\n",
 8000d36:	b2d8      	uxtb	r0, r3
                  (sta_netif.ip_addr.addr >> 24) & 0xff);
 8000d38:	4b82      	ldr	r3, [pc, #520]	; (8000f44 <dhcpclient_start+0x280>)
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	0e1b      	lsrs	r3, r3, #24
          printf("IP address : %d.%d.%d.%d\r\n",
 8000d3e:	9300      	str	r3, [sp, #0]
 8000d40:	4603      	mov	r3, r0
 8000d42:	4881      	ldr	r0, [pc, #516]	; (8000f48 <dhcpclient_start+0x284>)
 8000d44:	f019 f8dc 	bl	8019f00 <iprintf>
          start_app_task();
 8000d48:	f7ff fc34 	bl	80005b4 <start_app_task>
      break;
 8000d4c:	e0f0      	b.n	8000f30 <dhcpclient_start+0x26c>
          dhcp = (struct dhcp *)netif_get_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP);
 8000d4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d52:	63bb      	str	r3, [r7, #56]	; 0x38
          if (dhcp->tries > MAX_DHCP_TRIES)
 8000d54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000d56:	799b      	ldrb	r3, [r3, #6]
 8000d58:	2b04      	cmp	r3, #4
 8000d5a:	f240 80e9 	bls.w	8000f30 <dhcpclient_start+0x26c>
            dhcp_state = DHCP_TIMEOUT;
 8000d5e:	4b77      	ldr	r3, [pc, #476]	; (8000f3c <dhcpclient_start+0x278>)
 8000d60:	2204      	movs	r2, #4
 8000d62:	701a      	strb	r2, [r3, #0]
            netifapi_dhcp_stop(netif);
 8000d64:	2200      	movs	r2, #0
 8000d66:	4979      	ldr	r1, [pc, #484]	; (8000f4c <dhcpclient_start+0x288>)
 8000d68:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000d6a:	f00b fe5d 	bl	800ca28 <netifapi_netif_common>
            IP_ADDR4(&ipaddr, sta_ip_addr0 , sta_ip_addr1 , sta_ip_addr2 , sta_ip_addr3 );
 8000d6e:	4b78      	ldr	r3, [pc, #480]	; (8000f50 <dhcpclient_start+0x28c>)
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	061a      	lsls	r2, r3, #24
 8000d74:	4b77      	ldr	r3, [pc, #476]	; (8000f54 <dhcpclient_start+0x290>)
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	041b      	lsls	r3, r3, #16
 8000d7a:	431a      	orrs	r2, r3
 8000d7c:	4b76      	ldr	r3, [pc, #472]	; (8000f58 <dhcpclient_start+0x294>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	021b      	lsls	r3, r3, #8
 8000d82:	4313      	orrs	r3, r2
 8000d84:	4a75      	ldr	r2, [pc, #468]	; (8000f5c <dhcpclient_start+0x298>)
 8000d86:	7812      	ldrb	r2, [r2, #0]
 8000d88:	4313      	orrs	r3, r2
 8000d8a:	061a      	lsls	r2, r3, #24
 8000d8c:	4b70      	ldr	r3, [pc, #448]	; (8000f50 <dhcpclient_start+0x28c>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	0619      	lsls	r1, r3, #24
 8000d92:	4b70      	ldr	r3, [pc, #448]	; (8000f54 <dhcpclient_start+0x290>)
 8000d94:	781b      	ldrb	r3, [r3, #0]
 8000d96:	041b      	lsls	r3, r3, #16
 8000d98:	4319      	orrs	r1, r3
 8000d9a:	4b6f      	ldr	r3, [pc, #444]	; (8000f58 <dhcpclient_start+0x294>)
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	021b      	lsls	r3, r3, #8
 8000da0:	430b      	orrs	r3, r1
 8000da2:	496e      	ldr	r1, [pc, #440]	; (8000f5c <dhcpclient_start+0x298>)
 8000da4:	7809      	ldrb	r1, [r1, #0]
 8000da6:	430b      	orrs	r3, r1
 8000da8:	021b      	lsls	r3, r3, #8
 8000daa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8000dae:	431a      	orrs	r2, r3
 8000db0:	4b67      	ldr	r3, [pc, #412]	; (8000f50 <dhcpclient_start+0x28c>)
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	0619      	lsls	r1, r3, #24
 8000db6:	4b67      	ldr	r3, [pc, #412]	; (8000f54 <dhcpclient_start+0x290>)
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	041b      	lsls	r3, r3, #16
 8000dbc:	4319      	orrs	r1, r3
 8000dbe:	4b66      	ldr	r3, [pc, #408]	; (8000f58 <dhcpclient_start+0x294>)
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	021b      	lsls	r3, r3, #8
 8000dc4:	430b      	orrs	r3, r1
 8000dc6:	4965      	ldr	r1, [pc, #404]	; (8000f5c <dhcpclient_start+0x298>)
 8000dc8:	7809      	ldrb	r1, [r1, #0]
 8000dca:	430b      	orrs	r3, r1
 8000dcc:	0a1b      	lsrs	r3, r3, #8
 8000dce:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8000dd2:	431a      	orrs	r2, r3
 8000dd4:	4b5e      	ldr	r3, [pc, #376]	; (8000f50 <dhcpclient_start+0x28c>)
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	0619      	lsls	r1, r3, #24
 8000dda:	4b5e      	ldr	r3, [pc, #376]	; (8000f54 <dhcpclient_start+0x290>)
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	041b      	lsls	r3, r3, #16
 8000de0:	4319      	orrs	r1, r3
 8000de2:	4b5d      	ldr	r3, [pc, #372]	; (8000f58 <dhcpclient_start+0x294>)
 8000de4:	781b      	ldrb	r3, [r3, #0]
 8000de6:	021b      	lsls	r3, r3, #8
 8000de8:	430b      	orrs	r3, r1
 8000dea:	495c      	ldr	r1, [pc, #368]	; (8000f5c <dhcpclient_start+0x298>)
 8000dec:	7809      	ldrb	r1, [r1, #0]
 8000dee:	430b      	orrs	r3, r1
 8000df0:	0e1b      	lsrs	r3, r3, #24
 8000df2:	4313      	orrs	r3, r2
 8000df4:	637b      	str	r3, [r7, #52]	; 0x34
            IP_ADDR4(&netmask, sta_netmask_addr0, sta_netmask_addr1, sta_netmask_addr2, sta_netmask_addr3);
 8000df6:	4b5a      	ldr	r3, [pc, #360]	; (8000f60 <dhcpclient_start+0x29c>)
 8000df8:	781b      	ldrb	r3, [r3, #0]
 8000dfa:	061a      	lsls	r2, r3, #24
 8000dfc:	4b59      	ldr	r3, [pc, #356]	; (8000f64 <dhcpclient_start+0x2a0>)
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	041b      	lsls	r3, r3, #16
 8000e02:	431a      	orrs	r2, r3
 8000e04:	4b58      	ldr	r3, [pc, #352]	; (8000f68 <dhcpclient_start+0x2a4>)
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	021b      	lsls	r3, r3, #8
 8000e0a:	4313      	orrs	r3, r2
 8000e0c:	4a57      	ldr	r2, [pc, #348]	; (8000f6c <dhcpclient_start+0x2a8>)
 8000e0e:	7812      	ldrb	r2, [r2, #0]
 8000e10:	4313      	orrs	r3, r2
 8000e12:	061a      	lsls	r2, r3, #24
 8000e14:	4b52      	ldr	r3, [pc, #328]	; (8000f60 <dhcpclient_start+0x29c>)
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	0619      	lsls	r1, r3, #24
 8000e1a:	4b52      	ldr	r3, [pc, #328]	; (8000f64 <dhcpclient_start+0x2a0>)
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	041b      	lsls	r3, r3, #16
 8000e20:	4319      	orrs	r1, r3
 8000e22:	4b51      	ldr	r3, [pc, #324]	; (8000f68 <dhcpclient_start+0x2a4>)
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	021b      	lsls	r3, r3, #8
 8000e28:	430b      	orrs	r3, r1
 8000e2a:	4950      	ldr	r1, [pc, #320]	; (8000f6c <dhcpclient_start+0x2a8>)
 8000e2c:	7809      	ldrb	r1, [r1, #0]
 8000e2e:	430b      	orrs	r3, r1
 8000e30:	021b      	lsls	r3, r3, #8
 8000e32:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8000e36:	431a      	orrs	r2, r3
 8000e38:	4b49      	ldr	r3, [pc, #292]	; (8000f60 <dhcpclient_start+0x29c>)
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	0619      	lsls	r1, r3, #24
 8000e3e:	4b49      	ldr	r3, [pc, #292]	; (8000f64 <dhcpclient_start+0x2a0>)
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	041b      	lsls	r3, r3, #16
 8000e44:	4319      	orrs	r1, r3
 8000e46:	4b48      	ldr	r3, [pc, #288]	; (8000f68 <dhcpclient_start+0x2a4>)
 8000e48:	781b      	ldrb	r3, [r3, #0]
 8000e4a:	021b      	lsls	r3, r3, #8
 8000e4c:	430b      	orrs	r3, r1
 8000e4e:	4947      	ldr	r1, [pc, #284]	; (8000f6c <dhcpclient_start+0x2a8>)
 8000e50:	7809      	ldrb	r1, [r1, #0]
 8000e52:	430b      	orrs	r3, r1
 8000e54:	0a1b      	lsrs	r3, r3, #8
 8000e56:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8000e5a:	431a      	orrs	r2, r3
 8000e5c:	4b40      	ldr	r3, [pc, #256]	; (8000f60 <dhcpclient_start+0x29c>)
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	0619      	lsls	r1, r3, #24
 8000e62:	4b40      	ldr	r3, [pc, #256]	; (8000f64 <dhcpclient_start+0x2a0>)
 8000e64:	781b      	ldrb	r3, [r3, #0]
 8000e66:	041b      	lsls	r3, r3, #16
 8000e68:	4319      	orrs	r1, r3
 8000e6a:	4b3f      	ldr	r3, [pc, #252]	; (8000f68 <dhcpclient_start+0x2a4>)
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	021b      	lsls	r3, r3, #8
 8000e70:	430b      	orrs	r3, r1
 8000e72:	493e      	ldr	r1, [pc, #248]	; (8000f6c <dhcpclient_start+0x2a8>)
 8000e74:	7809      	ldrb	r1, [r1, #0]
 8000e76:	430b      	orrs	r3, r1
 8000e78:	0e1b      	lsrs	r3, r3, #24
 8000e7a:	4313      	orrs	r3, r2
 8000e7c:	633b      	str	r3, [r7, #48]	; 0x30
            IP_ADDR4(&gw, sta_gw_addr0, sta_gw_addr1, sta_gw_addr2, sta_gw_addr3);
 8000e7e:	4b3c      	ldr	r3, [pc, #240]	; (8000f70 <dhcpclient_start+0x2ac>)
 8000e80:	781b      	ldrb	r3, [r3, #0]
 8000e82:	061a      	lsls	r2, r3, #24
 8000e84:	4b3b      	ldr	r3, [pc, #236]	; (8000f74 <dhcpclient_start+0x2b0>)
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	041b      	lsls	r3, r3, #16
 8000e8a:	431a      	orrs	r2, r3
 8000e8c:	4b3a      	ldr	r3, [pc, #232]	; (8000f78 <dhcpclient_start+0x2b4>)
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	021b      	lsls	r3, r3, #8
 8000e92:	4313      	orrs	r3, r2
 8000e94:	4a39      	ldr	r2, [pc, #228]	; (8000f7c <dhcpclient_start+0x2b8>)
 8000e96:	7812      	ldrb	r2, [r2, #0]
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	061a      	lsls	r2, r3, #24
 8000e9c:	4b34      	ldr	r3, [pc, #208]	; (8000f70 <dhcpclient_start+0x2ac>)
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	0619      	lsls	r1, r3, #24
 8000ea2:	4b34      	ldr	r3, [pc, #208]	; (8000f74 <dhcpclient_start+0x2b0>)
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	041b      	lsls	r3, r3, #16
 8000ea8:	4319      	orrs	r1, r3
 8000eaa:	4b33      	ldr	r3, [pc, #204]	; (8000f78 <dhcpclient_start+0x2b4>)
 8000eac:	781b      	ldrb	r3, [r3, #0]
 8000eae:	021b      	lsls	r3, r3, #8
 8000eb0:	430b      	orrs	r3, r1
 8000eb2:	4932      	ldr	r1, [pc, #200]	; (8000f7c <dhcpclient_start+0x2b8>)
 8000eb4:	7809      	ldrb	r1, [r1, #0]
 8000eb6:	430b      	orrs	r3, r1
 8000eb8:	021b      	lsls	r3, r3, #8
 8000eba:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8000ebe:	431a      	orrs	r2, r3
 8000ec0:	4b2b      	ldr	r3, [pc, #172]	; (8000f70 <dhcpclient_start+0x2ac>)
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	0619      	lsls	r1, r3, #24
 8000ec6:	4b2b      	ldr	r3, [pc, #172]	; (8000f74 <dhcpclient_start+0x2b0>)
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	041b      	lsls	r3, r3, #16
 8000ecc:	4319      	orrs	r1, r3
 8000ece:	4b2a      	ldr	r3, [pc, #168]	; (8000f78 <dhcpclient_start+0x2b4>)
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	021b      	lsls	r3, r3, #8
 8000ed4:	430b      	orrs	r3, r1
 8000ed6:	4929      	ldr	r1, [pc, #164]	; (8000f7c <dhcpclient_start+0x2b8>)
 8000ed8:	7809      	ldrb	r1, [r1, #0]
 8000eda:	430b      	orrs	r3, r1
 8000edc:	0a1b      	lsrs	r3, r3, #8
 8000ede:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8000ee2:	431a      	orrs	r2, r3
 8000ee4:	4b22      	ldr	r3, [pc, #136]	; (8000f70 <dhcpclient_start+0x2ac>)
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	0619      	lsls	r1, r3, #24
 8000eea:	4b22      	ldr	r3, [pc, #136]	; (8000f74 <dhcpclient_start+0x2b0>)
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	041b      	lsls	r3, r3, #16
 8000ef0:	4319      	orrs	r1, r3
 8000ef2:	4b21      	ldr	r3, [pc, #132]	; (8000f78 <dhcpclient_start+0x2b4>)
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	021b      	lsls	r3, r3, #8
 8000ef8:	430b      	orrs	r3, r1
 8000efa:	4920      	ldr	r1, [pc, #128]	; (8000f7c <dhcpclient_start+0x2b8>)
 8000efc:	7809      	ldrb	r1, [r1, #0]
 8000efe:	430b      	orrs	r3, r1
 8000f00:	0e1b      	lsrs	r3, r3, #24
 8000f02:	4313      	orrs	r3, r2
 8000f04:	62fb      	str	r3, [r7, #44]	; 0x2c
            netif_set_addr(netif, ip_2_ip4(&ipaddr), ip_2_ip4(&netmask), ip_2_ip4(&gw));
 8000f06:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f0a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8000f0e:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8000f12:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000f14:	f00c ffb8 	bl	800de88 <netif_set_addr>
      break;
 8000f18:	e00a      	b.n	8000f30 <dhcpclient_start+0x26c>
      netifapi_dhcp_stop(netif);
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	490b      	ldr	r1, [pc, #44]	; (8000f4c <dhcpclient_start+0x288>)
 8000f1e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000f20:	f00b fd82 	bl	800ca28 <netifapi_netif_common>
      dhcp_state = DHCP_OFF; 
 8000f24:	4b05      	ldr	r3, [pc, #20]	; (8000f3c <dhcpclient_start+0x278>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	701a      	strb	r2, [r3, #0]
    break;
 8000f2a:	e002      	b.n	8000f32 <dhcpclient_start+0x26e>
    default: break;
 8000f2c:	bf00      	nop
 8000f2e:	e000      	b.n	8000f32 <dhcpclient_start+0x26e>
      break;
 8000f30:	bf00      	nop
    }
    
    /* wait 250 ms */
    vTaskDelay(250);
 8000f32:	20fa      	movs	r0, #250	; 0xfa
 8000f34:	f009 feb0 	bl	800ac98 <vTaskDelay>
    switch (dhcp_state)
 8000f38:	e6ca      	b.n	8000cd0 <dhcpclient_start+0xc>
 8000f3a:	bf00      	nop
 8000f3c:	2000037c 	.word	0x2000037c
 8000f40:	0801598d 	.word	0x0801598d
 8000f44:	200005d8 	.word	0x200005d8
 8000f48:	0801b258 	.word	0x0801b258
 8000f4c:	0801644d 	.word	0x0801644d
 8000f50:	2000009c 	.word	0x2000009c
 8000f54:	2000009d 	.word	0x2000009d
 8000f58:	2000067a 	.word	0x2000067a
 8000f5c:	2000009e 	.word	0x2000009e
 8000f60:	2000009f 	.word	0x2000009f
 8000f64:	200000a0 	.word	0x200000a0
 8000f68:	200000a1 	.word	0x200000a1
 8000f6c:	2000067b 	.word	0x2000067b
 8000f70:	2000067c 	.word	0x2000067c
 8000f74:	2000067d 	.word	0x2000067d
 8000f78:	2000067e 	.word	0x2000067e
 8000f7c:	2000067f 	.word	0x2000067f

08000f80 <dhcpserver_remove_mac>:
 * Remove mac address from list of clients.
 *
 * @param mac MAC address to remove.
 ******************************************************************************/
void dhcpserver_remove_mac(struct eth_addr *mac)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b085      	sub	sp, #20
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  for (uint32_t i = 0; i < DHCPS_MAX_CLIENT; ++i) {
 8000f88:	2300      	movs	r3, #0
 8000f8a:	60fb      	str	r3, [r7, #12]
 8000f8c:	e08a      	b.n	80010a4 <dhcpserver_remove_mac+0x124>
    if (saved_mac[i].addr[0] == mac->addr[0] && saved_mac[i].addr[1] == mac->addr[1]
 8000f8e:	494b      	ldr	r1, [pc, #300]	; (80010bc <dhcpserver_remove_mac+0x13c>)
 8000f90:	68fa      	ldr	r2, [r7, #12]
 8000f92:	4613      	mov	r3, r2
 8000f94:	005b      	lsls	r3, r3, #1
 8000f96:	4413      	add	r3, r2
 8000f98:	005b      	lsls	r3, r3, #1
 8000f9a:	440b      	add	r3, r1
 8000f9c:	781a      	ldrb	r2, [r3, #0]
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	429a      	cmp	r2, r3
 8000fa4:	d17b      	bne.n	800109e <dhcpserver_remove_mac+0x11e>
 8000fa6:	4945      	ldr	r1, [pc, #276]	; (80010bc <dhcpserver_remove_mac+0x13c>)
 8000fa8:	68fa      	ldr	r2, [r7, #12]
 8000faa:	4613      	mov	r3, r2
 8000fac:	005b      	lsls	r3, r3, #1
 8000fae:	4413      	add	r3, r2
 8000fb0:	005b      	lsls	r3, r3, #1
 8000fb2:	440b      	add	r3, r1
 8000fb4:	3301      	adds	r3, #1
 8000fb6:	781a      	ldrb	r2, [r3, #0]
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	785b      	ldrb	r3, [r3, #1]
 8000fbc:	429a      	cmp	r2, r3
 8000fbe:	d16e      	bne.n	800109e <dhcpserver_remove_mac+0x11e>
        && saved_mac[i].addr[2] == mac->addr[2] && saved_mac[i].addr[3] == mac->addr[3]
 8000fc0:	493e      	ldr	r1, [pc, #248]	; (80010bc <dhcpserver_remove_mac+0x13c>)
 8000fc2:	68fa      	ldr	r2, [r7, #12]
 8000fc4:	4613      	mov	r3, r2
 8000fc6:	005b      	lsls	r3, r3, #1
 8000fc8:	4413      	add	r3, r2
 8000fca:	005b      	lsls	r3, r3, #1
 8000fcc:	440b      	add	r3, r1
 8000fce:	3302      	adds	r3, #2
 8000fd0:	781a      	ldrb	r2, [r3, #0]
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	789b      	ldrb	r3, [r3, #2]
 8000fd6:	429a      	cmp	r2, r3
 8000fd8:	d161      	bne.n	800109e <dhcpserver_remove_mac+0x11e>
 8000fda:	4938      	ldr	r1, [pc, #224]	; (80010bc <dhcpserver_remove_mac+0x13c>)
 8000fdc:	68fa      	ldr	r2, [r7, #12]
 8000fde:	4613      	mov	r3, r2
 8000fe0:	005b      	lsls	r3, r3, #1
 8000fe2:	4413      	add	r3, r2
 8000fe4:	005b      	lsls	r3, r3, #1
 8000fe6:	440b      	add	r3, r1
 8000fe8:	3303      	adds	r3, #3
 8000fea:	781a      	ldrb	r2, [r3, #0]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	78db      	ldrb	r3, [r3, #3]
 8000ff0:	429a      	cmp	r2, r3
 8000ff2:	d154      	bne.n	800109e <dhcpserver_remove_mac+0x11e>
        && saved_mac[i].addr[4] == mac->addr[4] && saved_mac[i].addr[5] == mac->addr[5]) {
 8000ff4:	4931      	ldr	r1, [pc, #196]	; (80010bc <dhcpserver_remove_mac+0x13c>)
 8000ff6:	68fa      	ldr	r2, [r7, #12]
 8000ff8:	4613      	mov	r3, r2
 8000ffa:	005b      	lsls	r3, r3, #1
 8000ffc:	4413      	add	r3, r2
 8000ffe:	005b      	lsls	r3, r3, #1
 8001000:	440b      	add	r3, r1
 8001002:	3304      	adds	r3, #4
 8001004:	781a      	ldrb	r2, [r3, #0]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	791b      	ldrb	r3, [r3, #4]
 800100a:	429a      	cmp	r2, r3
 800100c:	d147      	bne.n	800109e <dhcpserver_remove_mac+0x11e>
 800100e:	492b      	ldr	r1, [pc, #172]	; (80010bc <dhcpserver_remove_mac+0x13c>)
 8001010:	68fa      	ldr	r2, [r7, #12]
 8001012:	4613      	mov	r3, r2
 8001014:	005b      	lsls	r3, r3, #1
 8001016:	4413      	add	r3, r2
 8001018:	005b      	lsls	r3, r3, #1
 800101a:	440b      	add	r3, r1
 800101c:	3305      	adds	r3, #5
 800101e:	781a      	ldrb	r2, [r3, #0]
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	795b      	ldrb	r3, [r3, #5]
 8001024:	429a      	cmp	r2, r3
 8001026:	d13a      	bne.n	800109e <dhcpserver_remove_mac+0x11e>
      saved_mac[i].addr[0] = 0;
 8001028:	4924      	ldr	r1, [pc, #144]	; (80010bc <dhcpserver_remove_mac+0x13c>)
 800102a:	68fa      	ldr	r2, [r7, #12]
 800102c:	4613      	mov	r3, r2
 800102e:	005b      	lsls	r3, r3, #1
 8001030:	4413      	add	r3, r2
 8001032:	005b      	lsls	r3, r3, #1
 8001034:	440b      	add	r3, r1
 8001036:	2200      	movs	r2, #0
 8001038:	701a      	strb	r2, [r3, #0]
      saved_mac[i].addr[1] = 0;
 800103a:	4920      	ldr	r1, [pc, #128]	; (80010bc <dhcpserver_remove_mac+0x13c>)
 800103c:	68fa      	ldr	r2, [r7, #12]
 800103e:	4613      	mov	r3, r2
 8001040:	005b      	lsls	r3, r3, #1
 8001042:	4413      	add	r3, r2
 8001044:	005b      	lsls	r3, r3, #1
 8001046:	440b      	add	r3, r1
 8001048:	3301      	adds	r3, #1
 800104a:	2200      	movs	r2, #0
 800104c:	701a      	strb	r2, [r3, #0]
      saved_mac[i].addr[2] = 0;
 800104e:	491b      	ldr	r1, [pc, #108]	; (80010bc <dhcpserver_remove_mac+0x13c>)
 8001050:	68fa      	ldr	r2, [r7, #12]
 8001052:	4613      	mov	r3, r2
 8001054:	005b      	lsls	r3, r3, #1
 8001056:	4413      	add	r3, r2
 8001058:	005b      	lsls	r3, r3, #1
 800105a:	440b      	add	r3, r1
 800105c:	3302      	adds	r3, #2
 800105e:	2200      	movs	r2, #0
 8001060:	701a      	strb	r2, [r3, #0]
      saved_mac[i].addr[3] = 0;
 8001062:	4916      	ldr	r1, [pc, #88]	; (80010bc <dhcpserver_remove_mac+0x13c>)
 8001064:	68fa      	ldr	r2, [r7, #12]
 8001066:	4613      	mov	r3, r2
 8001068:	005b      	lsls	r3, r3, #1
 800106a:	4413      	add	r3, r2
 800106c:	005b      	lsls	r3, r3, #1
 800106e:	440b      	add	r3, r1
 8001070:	3303      	adds	r3, #3
 8001072:	2200      	movs	r2, #0
 8001074:	701a      	strb	r2, [r3, #0]
      saved_mac[i].addr[4] = 0;
 8001076:	4911      	ldr	r1, [pc, #68]	; (80010bc <dhcpserver_remove_mac+0x13c>)
 8001078:	68fa      	ldr	r2, [r7, #12]
 800107a:	4613      	mov	r3, r2
 800107c:	005b      	lsls	r3, r3, #1
 800107e:	4413      	add	r3, r2
 8001080:	005b      	lsls	r3, r3, #1
 8001082:	440b      	add	r3, r1
 8001084:	3304      	adds	r3, #4
 8001086:	2200      	movs	r2, #0
 8001088:	701a      	strb	r2, [r3, #0]
      saved_mac[i].addr[5] = 0;
 800108a:	490c      	ldr	r1, [pc, #48]	; (80010bc <dhcpserver_remove_mac+0x13c>)
 800108c:	68fa      	ldr	r2, [r7, #12]
 800108e:	4613      	mov	r3, r2
 8001090:	005b      	lsls	r3, r3, #1
 8001092:	4413      	add	r3, r2
 8001094:	005b      	lsls	r3, r3, #1
 8001096:	440b      	add	r3, r1
 8001098:	3305      	adds	r3, #5
 800109a:	2200      	movs	r2, #0
 800109c:	701a      	strb	r2, [r3, #0]
  for (uint32_t i = 0; i < DHCPS_MAX_CLIENT; ++i) {
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	3301      	adds	r3, #1
 80010a2:	60fb      	str	r3, [r7, #12]
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	2b07      	cmp	r3, #7
 80010a8:	f67f af71 	bls.w	8000f8e <dhcpserver_remove_mac+0xe>
    }
  }
}
 80010ac:	bf00      	nop
 80010ae:	bf00      	nop
 80010b0:	3714      	adds	r7, #20
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	20000384 	.word	0x20000384

080010c0 <dhcpserver_save_mac>:

/***************************************************************************//**
 * Save mac address in list of clients.
 ******************************************************************************/
static void dhcpserver_save_mac(struct eth_addr *mac)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  // Remove previous listing of MAC.
  dhcpserver_remove_mac(mac);
 80010c8:	6878      	ldr	r0, [r7, #4]
 80010ca:	f7ff ff59 	bl	8000f80 <dhcpserver_remove_mac>

  for (uint8_t i = 0; i < DHCPS_MAX_CLIENT; ++i) {
 80010ce:	2300      	movs	r3, #0
 80010d0:	73fb      	strb	r3, [r7, #15]
 80010d2:	e08b      	b.n	80011ec <dhcpserver_save_mac+0x12c>
    if (saved_mac[i].addr[0] == 0 && saved_mac[i].addr[1] == 0
 80010d4:	7bfa      	ldrb	r2, [r7, #15]
 80010d6:	494a      	ldr	r1, [pc, #296]	; (8001200 <dhcpserver_save_mac+0x140>)
 80010d8:	4613      	mov	r3, r2
 80010da:	005b      	lsls	r3, r3, #1
 80010dc:	4413      	add	r3, r2
 80010de:	005b      	lsls	r3, r3, #1
 80010e0:	440b      	add	r3, r1
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d17e      	bne.n	80011e6 <dhcpserver_save_mac+0x126>
 80010e8:	7bfa      	ldrb	r2, [r7, #15]
 80010ea:	4945      	ldr	r1, [pc, #276]	; (8001200 <dhcpserver_save_mac+0x140>)
 80010ec:	4613      	mov	r3, r2
 80010ee:	005b      	lsls	r3, r3, #1
 80010f0:	4413      	add	r3, r2
 80010f2:	005b      	lsls	r3, r3, #1
 80010f4:	440b      	add	r3, r1
 80010f6:	3301      	adds	r3, #1
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d173      	bne.n	80011e6 <dhcpserver_save_mac+0x126>
        && saved_mac[i].addr[2] == 0 && saved_mac[i].addr[3] == 0
 80010fe:	7bfa      	ldrb	r2, [r7, #15]
 8001100:	493f      	ldr	r1, [pc, #252]	; (8001200 <dhcpserver_save_mac+0x140>)
 8001102:	4613      	mov	r3, r2
 8001104:	005b      	lsls	r3, r3, #1
 8001106:	4413      	add	r3, r2
 8001108:	005b      	lsls	r3, r3, #1
 800110a:	440b      	add	r3, r1
 800110c:	3302      	adds	r3, #2
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d168      	bne.n	80011e6 <dhcpserver_save_mac+0x126>
 8001114:	7bfa      	ldrb	r2, [r7, #15]
 8001116:	493a      	ldr	r1, [pc, #232]	; (8001200 <dhcpserver_save_mac+0x140>)
 8001118:	4613      	mov	r3, r2
 800111a:	005b      	lsls	r3, r3, #1
 800111c:	4413      	add	r3, r2
 800111e:	005b      	lsls	r3, r3, #1
 8001120:	440b      	add	r3, r1
 8001122:	3303      	adds	r3, #3
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d15d      	bne.n	80011e6 <dhcpserver_save_mac+0x126>
        && saved_mac[i].addr[4] == 0 && saved_mac[i].addr[5] == 0) {
 800112a:	7bfa      	ldrb	r2, [r7, #15]
 800112c:	4934      	ldr	r1, [pc, #208]	; (8001200 <dhcpserver_save_mac+0x140>)
 800112e:	4613      	mov	r3, r2
 8001130:	005b      	lsls	r3, r3, #1
 8001132:	4413      	add	r3, r2
 8001134:	005b      	lsls	r3, r3, #1
 8001136:	440b      	add	r3, r1
 8001138:	3304      	adds	r3, #4
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d152      	bne.n	80011e6 <dhcpserver_save_mac+0x126>
 8001140:	7bfa      	ldrb	r2, [r7, #15]
 8001142:	492f      	ldr	r1, [pc, #188]	; (8001200 <dhcpserver_save_mac+0x140>)
 8001144:	4613      	mov	r3, r2
 8001146:	005b      	lsls	r3, r3, #1
 8001148:	4413      	add	r3, r2
 800114a:	005b      	lsls	r3, r3, #1
 800114c:	440b      	add	r3, r1
 800114e:	3305      	adds	r3, #5
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d147      	bne.n	80011e6 <dhcpserver_save_mac+0x126>
      saved_mac[i].addr[0] = mac->addr[0];
 8001156:	7bfa      	ldrb	r2, [r7, #15]
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	7818      	ldrb	r0, [r3, #0]
 800115c:	4928      	ldr	r1, [pc, #160]	; (8001200 <dhcpserver_save_mac+0x140>)
 800115e:	4613      	mov	r3, r2
 8001160:	005b      	lsls	r3, r3, #1
 8001162:	4413      	add	r3, r2
 8001164:	005b      	lsls	r3, r3, #1
 8001166:	440b      	add	r3, r1
 8001168:	4602      	mov	r2, r0
 800116a:	701a      	strb	r2, [r3, #0]
      saved_mac[i].addr[1] = mac->addr[1];
 800116c:	7bfa      	ldrb	r2, [r7, #15]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	7858      	ldrb	r0, [r3, #1]
 8001172:	4923      	ldr	r1, [pc, #140]	; (8001200 <dhcpserver_save_mac+0x140>)
 8001174:	4613      	mov	r3, r2
 8001176:	005b      	lsls	r3, r3, #1
 8001178:	4413      	add	r3, r2
 800117a:	005b      	lsls	r3, r3, #1
 800117c:	440b      	add	r3, r1
 800117e:	3301      	adds	r3, #1
 8001180:	4602      	mov	r2, r0
 8001182:	701a      	strb	r2, [r3, #0]
      saved_mac[i].addr[2] = mac->addr[2];
 8001184:	7bfa      	ldrb	r2, [r7, #15]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	7898      	ldrb	r0, [r3, #2]
 800118a:	491d      	ldr	r1, [pc, #116]	; (8001200 <dhcpserver_save_mac+0x140>)
 800118c:	4613      	mov	r3, r2
 800118e:	005b      	lsls	r3, r3, #1
 8001190:	4413      	add	r3, r2
 8001192:	005b      	lsls	r3, r3, #1
 8001194:	440b      	add	r3, r1
 8001196:	3302      	adds	r3, #2
 8001198:	4602      	mov	r2, r0
 800119a:	701a      	strb	r2, [r3, #0]
      saved_mac[i].addr[3] = mac->addr[3];
 800119c:	7bfa      	ldrb	r2, [r7, #15]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	78d8      	ldrb	r0, [r3, #3]
 80011a2:	4917      	ldr	r1, [pc, #92]	; (8001200 <dhcpserver_save_mac+0x140>)
 80011a4:	4613      	mov	r3, r2
 80011a6:	005b      	lsls	r3, r3, #1
 80011a8:	4413      	add	r3, r2
 80011aa:	005b      	lsls	r3, r3, #1
 80011ac:	440b      	add	r3, r1
 80011ae:	3303      	adds	r3, #3
 80011b0:	4602      	mov	r2, r0
 80011b2:	701a      	strb	r2, [r3, #0]
      saved_mac[i].addr[4] = mac->addr[4];
 80011b4:	7bfa      	ldrb	r2, [r7, #15]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	7918      	ldrb	r0, [r3, #4]
 80011ba:	4911      	ldr	r1, [pc, #68]	; (8001200 <dhcpserver_save_mac+0x140>)
 80011bc:	4613      	mov	r3, r2
 80011be:	005b      	lsls	r3, r3, #1
 80011c0:	4413      	add	r3, r2
 80011c2:	005b      	lsls	r3, r3, #1
 80011c4:	440b      	add	r3, r1
 80011c6:	3304      	adds	r3, #4
 80011c8:	4602      	mov	r2, r0
 80011ca:	701a      	strb	r2, [r3, #0]
      saved_mac[i].addr[5] = mac->addr[5];
 80011cc:	7bfa      	ldrb	r2, [r7, #15]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	7958      	ldrb	r0, [r3, #5]
 80011d2:	490b      	ldr	r1, [pc, #44]	; (8001200 <dhcpserver_save_mac+0x140>)
 80011d4:	4613      	mov	r3, r2
 80011d6:	005b      	lsls	r3, r3, #1
 80011d8:	4413      	add	r3, r2
 80011da:	005b      	lsls	r3, r3, #1
 80011dc:	440b      	add	r3, r1
 80011de:	3305      	adds	r3, #5
 80011e0:	4602      	mov	r2, r0
 80011e2:	701a      	strb	r2, [r3, #0]
      break;
 80011e4:	e007      	b.n	80011f6 <dhcpserver_save_mac+0x136>
  for (uint8_t i = 0; i < DHCPS_MAX_CLIENT; ++i) {
 80011e6:	7bfb      	ldrb	r3, [r7, #15]
 80011e8:	3301      	adds	r3, #1
 80011ea:	73fb      	strb	r3, [r7, #15]
 80011ec:	7bfb      	ldrb	r3, [r7, #15]
 80011ee:	2b07      	cmp	r3, #7
 80011f0:	f67f af70 	bls.w	80010d4 <dhcpserver_save_mac+0x14>
    }
  }
}
 80011f4:	bf00      	nop
 80011f6:	bf00      	nop
 80011f8:	3710      	adds	r7, #16
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	20000384 	.word	0x20000384

08001204 <dhcpserver_get_ip>:
 *
 * @param mac MAC address of client.
 * @returns IP address
 ******************************************************************************/
ip_addr_t dhcpserver_get_ip(struct eth_addr *mac)
{
 8001204:	b480      	push	{r7}
 8001206:	b085      	sub	sp, #20
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  ip_addr_t offer_ip = { 0 };
 800120c:	2300      	movs	r3, #0
 800120e:	60bb      	str	r3, [r7, #8]

  for (uint32_t i = 0; i < DHCPS_MAX_CLIENT; ++i) {
 8001210:	2300      	movs	r3, #0
 8001212:	60fb      	str	r3, [r7, #12]
 8001214:	e060      	b.n	80012d8 <dhcpserver_get_ip+0xd4>
    if (saved_mac[i].addr[0] == mac->addr[0] && saved_mac[i].addr[1] == mac->addr[1]
 8001216:	4935      	ldr	r1, [pc, #212]	; (80012ec <dhcpserver_get_ip+0xe8>)
 8001218:	68fa      	ldr	r2, [r7, #12]
 800121a:	4613      	mov	r3, r2
 800121c:	005b      	lsls	r3, r3, #1
 800121e:	4413      	add	r3, r2
 8001220:	005b      	lsls	r3, r3, #1
 8001222:	440b      	add	r3, r1
 8001224:	781a      	ldrb	r2, [r3, #0]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	429a      	cmp	r2, r3
 800122c:	d151      	bne.n	80012d2 <dhcpserver_get_ip+0xce>
 800122e:	492f      	ldr	r1, [pc, #188]	; (80012ec <dhcpserver_get_ip+0xe8>)
 8001230:	68fa      	ldr	r2, [r7, #12]
 8001232:	4613      	mov	r3, r2
 8001234:	005b      	lsls	r3, r3, #1
 8001236:	4413      	add	r3, r2
 8001238:	005b      	lsls	r3, r3, #1
 800123a:	440b      	add	r3, r1
 800123c:	3301      	adds	r3, #1
 800123e:	781a      	ldrb	r2, [r3, #0]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	785b      	ldrb	r3, [r3, #1]
 8001244:	429a      	cmp	r2, r3
 8001246:	d144      	bne.n	80012d2 <dhcpserver_get_ip+0xce>
        && saved_mac[i].addr[2] == mac->addr[2] && saved_mac[i].addr[3] == mac->addr[3]
 8001248:	4928      	ldr	r1, [pc, #160]	; (80012ec <dhcpserver_get_ip+0xe8>)
 800124a:	68fa      	ldr	r2, [r7, #12]
 800124c:	4613      	mov	r3, r2
 800124e:	005b      	lsls	r3, r3, #1
 8001250:	4413      	add	r3, r2
 8001252:	005b      	lsls	r3, r3, #1
 8001254:	440b      	add	r3, r1
 8001256:	3302      	adds	r3, #2
 8001258:	781a      	ldrb	r2, [r3, #0]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	789b      	ldrb	r3, [r3, #2]
 800125e:	429a      	cmp	r2, r3
 8001260:	d137      	bne.n	80012d2 <dhcpserver_get_ip+0xce>
 8001262:	4922      	ldr	r1, [pc, #136]	; (80012ec <dhcpserver_get_ip+0xe8>)
 8001264:	68fa      	ldr	r2, [r7, #12]
 8001266:	4613      	mov	r3, r2
 8001268:	005b      	lsls	r3, r3, #1
 800126a:	4413      	add	r3, r2
 800126c:	005b      	lsls	r3, r3, #1
 800126e:	440b      	add	r3, r1
 8001270:	3303      	adds	r3, #3
 8001272:	781a      	ldrb	r2, [r3, #0]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	78db      	ldrb	r3, [r3, #3]
 8001278:	429a      	cmp	r2, r3
 800127a:	d12a      	bne.n	80012d2 <dhcpserver_get_ip+0xce>
        && saved_mac[i].addr[4] == mac->addr[4] && saved_mac[i].addr[5] == mac->addr[5]) {
 800127c:	491b      	ldr	r1, [pc, #108]	; (80012ec <dhcpserver_get_ip+0xe8>)
 800127e:	68fa      	ldr	r2, [r7, #12]
 8001280:	4613      	mov	r3, r2
 8001282:	005b      	lsls	r3, r3, #1
 8001284:	4413      	add	r3, r2
 8001286:	005b      	lsls	r3, r3, #1
 8001288:	440b      	add	r3, r1
 800128a:	3304      	adds	r3, #4
 800128c:	781a      	ldrb	r2, [r3, #0]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	791b      	ldrb	r3, [r3, #4]
 8001292:	429a      	cmp	r2, r3
 8001294:	d11d      	bne.n	80012d2 <dhcpserver_get_ip+0xce>
 8001296:	4915      	ldr	r1, [pc, #84]	; (80012ec <dhcpserver_get_ip+0xe8>)
 8001298:	68fa      	ldr	r2, [r7, #12]
 800129a:	4613      	mov	r3, r2
 800129c:	005b      	lsls	r3, r3, #1
 800129e:	4413      	add	r3, r2
 80012a0:	005b      	lsls	r3, r3, #1
 80012a2:	440b      	add	r3, r1
 80012a4:	3305      	adds	r3, #5
 80012a6:	781a      	ldrb	r2, [r3, #0]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	795b      	ldrb	r3, [r3, #5]
 80012ac:	429a      	cmp	r2, r3
 80012ae:	d110      	bne.n	80012d2 <dhcpserver_get_ip+0xce>
      /* index is used to increment IP address. */
      offer_ip.addr = ((10 + i) << 24) + ap_ip_addr0 + (ap_ip_addr1 << 8) + (ap_ip_addr2 << 16);
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	330a      	adds	r3, #10
 80012b4:	061b      	lsls	r3, r3, #24
 80012b6:	4a0e      	ldr	r2, [pc, #56]	; (80012f0 <dhcpserver_get_ip+0xec>)
 80012b8:	7812      	ldrb	r2, [r2, #0]
 80012ba:	4413      	add	r3, r2
 80012bc:	4a0d      	ldr	r2, [pc, #52]	; (80012f4 <dhcpserver_get_ip+0xf0>)
 80012be:	7812      	ldrb	r2, [r2, #0]
 80012c0:	0212      	lsls	r2, r2, #8
 80012c2:	4413      	add	r3, r2
 80012c4:	4a0c      	ldr	r2, [pc, #48]	; (80012f8 <dhcpserver_get_ip+0xf4>)
 80012c6:	7812      	ldrb	r2, [r2, #0]
 80012c8:	0412      	lsls	r2, r2, #16
 80012ca:	4413      	add	r3, r2
 80012cc:	60bb      	str	r3, [r7, #8]
      return offer_ip;
 80012ce:	68bb      	ldr	r3, [r7, #8]
 80012d0:	e006      	b.n	80012e0 <dhcpserver_get_ip+0xdc>
  for (uint32_t i = 0; i < DHCPS_MAX_CLIENT; ++i) {
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	3301      	adds	r3, #1
 80012d6:	60fb      	str	r3, [r7, #12]
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	2b07      	cmp	r3, #7
 80012dc:	d99b      	bls.n	8001216 <dhcpserver_get_ip+0x12>
    }
  }

  return offer_ip;
 80012de:	68bb      	ldr	r3, [r7, #8]
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	3714      	adds	r7, #20
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr
 80012ec:	20000384 	.word	0x20000384
 80012f0:	200000a2 	.word	0x200000a2
 80012f4:	200000a3 	.word	0x200000a3
 80012f8:	20000680 	.word	0x20000680

080012fc <dhcpserver_clear_stored_mac>:

/***************************************************************************//**
 * Clear stored mac addresses in client list.
 ******************************************************************************/
void dhcpserver_clear_stored_mac(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
  //clear saved mac addresses
  for (uint32_t i = 0; i < DHCPS_MAX_CLIENT; ++i) {
 8001302:	2300      	movs	r3, #0
 8001304:	607b      	str	r3, [r7, #4]
 8001306:	e03d      	b.n	8001384 <dhcpserver_clear_stored_mac+0x88>
    saved_mac[i].addr[0] = 0;
 8001308:	4923      	ldr	r1, [pc, #140]	; (8001398 <dhcpserver_clear_stored_mac+0x9c>)
 800130a:	687a      	ldr	r2, [r7, #4]
 800130c:	4613      	mov	r3, r2
 800130e:	005b      	lsls	r3, r3, #1
 8001310:	4413      	add	r3, r2
 8001312:	005b      	lsls	r3, r3, #1
 8001314:	440b      	add	r3, r1
 8001316:	2200      	movs	r2, #0
 8001318:	701a      	strb	r2, [r3, #0]
    saved_mac[i].addr[1] = 0;
 800131a:	491f      	ldr	r1, [pc, #124]	; (8001398 <dhcpserver_clear_stored_mac+0x9c>)
 800131c:	687a      	ldr	r2, [r7, #4]
 800131e:	4613      	mov	r3, r2
 8001320:	005b      	lsls	r3, r3, #1
 8001322:	4413      	add	r3, r2
 8001324:	005b      	lsls	r3, r3, #1
 8001326:	440b      	add	r3, r1
 8001328:	3301      	adds	r3, #1
 800132a:	2200      	movs	r2, #0
 800132c:	701a      	strb	r2, [r3, #0]
    saved_mac[i].addr[2] = 0;
 800132e:	491a      	ldr	r1, [pc, #104]	; (8001398 <dhcpserver_clear_stored_mac+0x9c>)
 8001330:	687a      	ldr	r2, [r7, #4]
 8001332:	4613      	mov	r3, r2
 8001334:	005b      	lsls	r3, r3, #1
 8001336:	4413      	add	r3, r2
 8001338:	005b      	lsls	r3, r3, #1
 800133a:	440b      	add	r3, r1
 800133c:	3302      	adds	r3, #2
 800133e:	2200      	movs	r2, #0
 8001340:	701a      	strb	r2, [r3, #0]
    saved_mac[i].addr[3] = 0;
 8001342:	4915      	ldr	r1, [pc, #84]	; (8001398 <dhcpserver_clear_stored_mac+0x9c>)
 8001344:	687a      	ldr	r2, [r7, #4]
 8001346:	4613      	mov	r3, r2
 8001348:	005b      	lsls	r3, r3, #1
 800134a:	4413      	add	r3, r2
 800134c:	005b      	lsls	r3, r3, #1
 800134e:	440b      	add	r3, r1
 8001350:	3303      	adds	r3, #3
 8001352:	2200      	movs	r2, #0
 8001354:	701a      	strb	r2, [r3, #0]
    saved_mac[i].addr[4] = 0;
 8001356:	4910      	ldr	r1, [pc, #64]	; (8001398 <dhcpserver_clear_stored_mac+0x9c>)
 8001358:	687a      	ldr	r2, [r7, #4]
 800135a:	4613      	mov	r3, r2
 800135c:	005b      	lsls	r3, r3, #1
 800135e:	4413      	add	r3, r2
 8001360:	005b      	lsls	r3, r3, #1
 8001362:	440b      	add	r3, r1
 8001364:	3304      	adds	r3, #4
 8001366:	2200      	movs	r2, #0
 8001368:	701a      	strb	r2, [r3, #0]
    saved_mac[i].addr[5] = 0;
 800136a:	490b      	ldr	r1, [pc, #44]	; (8001398 <dhcpserver_clear_stored_mac+0x9c>)
 800136c:	687a      	ldr	r2, [r7, #4]
 800136e:	4613      	mov	r3, r2
 8001370:	005b      	lsls	r3, r3, #1
 8001372:	4413      	add	r3, r2
 8001374:	005b      	lsls	r3, r3, #1
 8001376:	440b      	add	r3, r1
 8001378:	3305      	adds	r3, #5
 800137a:	2200      	movs	r2, #0
 800137c:	701a      	strb	r2, [r3, #0]
  for (uint32_t i = 0; i < DHCPS_MAX_CLIENT; ++i) {
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	3301      	adds	r3, #1
 8001382:	607b      	str	r3, [r7, #4]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2b07      	cmp	r3, #7
 8001388:	d9be      	bls.n	8001308 <dhcpserver_clear_stored_mac+0xc>
  }
}
 800138a:	bf00      	nop
 800138c:	bf00      	nop
 800138e:	370c      	adds	r7, #12
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr
 8001398:	20000384 	.word	0x20000384

0800139c <dhcpserver_find_requested_ip>:
 * @param pbuf_in The pbuf containing the a DHCP packet.
 * @param ipaddr IP address result.
 * @returns 1 if found, 0 if not found.
 ******************************************************************************/
static uint16_t dhcpserver_find_requested_ip(struct pbuf * pbuf_in, uint8_t * ipaddr)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b086      	sub	sp, #24
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
 80013a4:	6039      	str	r1, [r7, #0]
  uint32_t index = UDP_DHCP_OPTIONS_OFS;
 80013a6:	23f0      	movs	r3, #240	; 0xf0
 80013a8:	617b      	str	r3, [r7, #20]
  uint8_t optionID = DHCP_OPTION_REQUESTED_IP;
 80013aa:	2332      	movs	r3, #50	; 0x32
 80013ac:	743b      	strb	r3, [r7, #16]
  uint16_t found = 0;
 80013ae:	2300      	movs	r3, #0
 80013b0:	827b      	strh	r3, [r7, #18]
  uint8_t val = 0;
 80013b2:	2300      	movs	r3, #0
 80013b4:	747b      	strb	r3, [r7, #17]
  uint8_t size;

  while ((val != 0xff) && (index < pbuf_in->tot_len)) {
 80013b6:	e036      	b.n	8001426 <dhcpserver_find_requested_ip+0x8a>
    val = pbuf_get_at(pbuf_in, index);
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	b29b      	uxth	r3, r3
 80013bc:	4619      	mov	r1, r3
 80013be:	6878      	ldr	r0, [r7, #4]
 80013c0:	f00d fe44 	bl	800f04c <pbuf_get_at>
 80013c4:	4603      	mov	r3, r0
 80013c6:	747b      	strb	r3, [r7, #17]
    if (val == optionID) {
 80013c8:	7c7a      	ldrb	r2, [r7, #17]
 80013ca:	7c3b      	ldrb	r3, [r7, #16]
 80013cc:	429a      	cmp	r2, r3
 80013ce:	d11b      	bne.n	8001408 <dhcpserver_find_requested_ip+0x6c>
      index++;
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	3301      	adds	r3, #1
 80013d4:	617b      	str	r3, [r7, #20]
      size = pbuf_get_at(pbuf_in, index);
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	b29b      	uxth	r3, r3
 80013da:	4619      	mov	r1, r3
 80013dc:	6878      	ldr	r0, [r7, #4]
 80013de:	f00d fe35 	bl	800f04c <pbuf_get_at>
 80013e2:	4603      	mov	r3, r0
 80013e4:	73fb      	strb	r3, [r7, #15]
      index++;
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	3301      	adds	r3, #1
 80013ea:	617b      	str	r3, [r7, #20]
      pbuf_copy_partial(pbuf_in, ipaddr, size, index);
 80013ec:	7bfb      	ldrb	r3, [r7, #15]
 80013ee:	b29a      	uxth	r2, r3
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	b29b      	uxth	r3, r3
 80013f4:	6839      	ldr	r1, [r7, #0]
 80013f6:	6878      	ldr	r0, [r7, #4]
 80013f8:	f00d fc4c 	bl	800ec94 <pbuf_copy_partial>
      index += size;
 80013fc:	7bfb      	ldrb	r3, [r7, #15]
 80013fe:	697a      	ldr	r2, [r7, #20]
 8001400:	4413      	add	r3, r2
 8001402:	617b      	str	r3, [r7, #20]
      found = 1;
 8001404:	2301      	movs	r3, #1
 8001406:	827b      	strh	r3, [r7, #18]
    }
    index++;
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	3301      	adds	r3, #1
 800140c:	617b      	str	r3, [r7, #20]
    index += ((pbuf_get_at(pbuf_in, index)) + 1);
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	b29b      	uxth	r3, r3
 8001412:	4619      	mov	r1, r3
 8001414:	6878      	ldr	r0, [r7, #4]
 8001416:	f00d fe19 	bl	800f04c <pbuf_get_at>
 800141a:	4603      	mov	r3, r0
 800141c:	3301      	adds	r3, #1
 800141e:	461a      	mov	r2, r3
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	4413      	add	r3, r2
 8001424:	617b      	str	r3, [r7, #20]
  while ((val != 0xff) && (index < pbuf_in->tot_len)) {
 8001426:	7c7b      	ldrb	r3, [r7, #17]
 8001428:	2bff      	cmp	r3, #255	; 0xff
 800142a:	d005      	beq.n	8001438 <dhcpserver_find_requested_ip+0x9c>
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	891b      	ldrh	r3, [r3, #8]
 8001430:	461a      	mov	r2, r3
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	4293      	cmp	r3, r2
 8001436:	d3bf      	bcc.n	80013b8 <dhcpserver_find_requested_ip+0x1c>
  }

  return found;
 8001438:	8a7b      	ldrh	r3, [r7, #18]
}
 800143a:	4618      	mov	r0, r3
 800143c:	3718      	adds	r7, #24
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
	...

08001444 <dhcpserver_fn>:
/***************************************************************************//**
 * DHCP server main function.
 ******************************************************************************/
static void dhcpserver_fn(void *arg, struct udp_pcb *dhcp_pcb_recv,
		struct pbuf *pbuf_in, const ip_addr_t *client_addr, uint16_t port)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b08c      	sub	sp, #48	; 0x30
 8001448:	af00      	add	r7, sp, #0
 800144a:	60f8      	str	r0, [r7, #12]
 800144c:	60b9      	str	r1, [r7, #8]
 800144e:	607a      	str	r2, [r7, #4]
 8001450:	603b      	str	r3, [r7, #0]
  struct pbuf * pbuf_out = 0;
 8001452:	2300      	movs	r3, #0
 8001454:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t i;
  uint8_t flags = 0;
 8001456:	2300      	movs	r3, #0
 8001458:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  struct eth_addr ethaddr;

  uint32_t options_offset = 0;
 800145c:	2300      	movs	r3, #0
 800145e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t client_requested_addr = 0;
 8001460:	2300      	movs	r3, #0
 8001462:	61bb      	str	r3, [r7, #24]
  uint8_t val = 0;
 8001464:	2300      	movs	r3, #0
 8001466:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  ip_addr_t client_ip_addr;
  ip_addr_t r;

  if ((NULL == pbuf_in) || ((pbuf_in->tot_len) <= UDP_DHCP_OPTIONS_OFS)) {
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2b00      	cmp	r3, #0
 800146e:	f000 85b8 	beq.w	8001fe2 <dhcpserver_fn+0xb9e>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	891b      	ldrh	r3, [r3, #8]
 8001476:	2bf0      	cmp	r3, #240	; 0xf0
 8001478:	f240 85b3 	bls.w	8001fe2 <dhcpserver_fn+0xb9e>
    goto end_of_fcn;
  }

  pbuf_out = pbuf_alloc(PBUF_TRANSPORT, DHCP_RESPONSE_DEFAULT_SIZE, PBUF_POOL);
 800147c:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8001480:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001484:	2036      	movs	r0, #54	; 0x36
 8001486:	f00c ff17 	bl	800e2b8 <pbuf_alloc>
 800148a:	62f8      	str	r0, [r7, #44]	; 0x2c

  if ((NULL == pbuf_out) || ((pbuf_out->tot_len) < UDP_DHCP_OPTIONS_OFS)) {
 800148c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800148e:	2b00      	cmp	r3, #0
 8001490:	f000 85a9 	beq.w	8001fe6 <dhcpserver_fn+0xba2>
 8001494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001496:	891b      	ldrh	r3, [r3, #8]
 8001498:	2bef      	cmp	r3, #239	; 0xef
 800149a:	f240 85a4 	bls.w	8001fe6 <dhcpserver_fn+0xba2>
    goto end_of_fcn;
  }
  pbuf_copy(pbuf_out, pbuf_in);
 800149e:	6879      	ldr	r1, [r7, #4]
 80014a0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80014a2:	f00d fb25 	bl	800eaf0 <pbuf_copy>

#if DHCPS_DBG
  printf("mac ");
#endif
  // Read MAC address.
  for (i = 0; i < 6; ++i) {
 80014a6:	2300      	movs	r3, #0
 80014a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80014aa:	e014      	b.n	80014d6 <dhcpserver_fn+0x92>
    val = pbuf_get_at(pbuf_in, DHCP_CHADDR_OFS + i);
 80014ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014ae:	b29b      	uxth	r3, r3
 80014b0:	331c      	adds	r3, #28
 80014b2:	b29b      	uxth	r3, r3
 80014b4:	4619      	mov	r1, r3
 80014b6:	6878      	ldr	r0, [r7, #4]
 80014b8:	f00d fdc8 	bl	800f04c <pbuf_get_at>
 80014bc:	4603      	mov	r3, r0
 80014be:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    ethaddr.addr[i] = val;
 80014c2:	f107 021c 	add.w	r2, r7, #28
 80014c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014c8:	4413      	add	r3, r2
 80014ca:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80014ce:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < 6; ++i) {
 80014d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014d2:	3301      	adds	r3, #1
 80014d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80014d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014d8:	2b05      	cmp	r3, #5
 80014da:	d9e7      	bls.n	80014ac <dhcpserver_fn+0x68>
  }
#if DHCPS_DBG
  printf("\r\n");
#endif
  // Register MAC address and get an IP address.
  dhcpserver_save_mac(&ethaddr);
 80014dc:	f107 031c 	add.w	r3, r7, #28
 80014e0:	4618      	mov	r0, r3
 80014e2:	f7ff fded 	bl	80010c0 <dhcpserver_save_mac>
  client_ip_addr = dhcpserver_get_ip(&ethaddr);
 80014e6:	f107 031c 	add.w	r3, r7, #28
 80014ea:	4618      	mov	r0, r3
 80014ec:	f7ff fe8a 	bl	8001204 <dhcpserver_get_ip>
 80014f0:	4603      	mov	r3, r0
 80014f2:	617b      	str	r3, [r7, #20]
  if (0 == client_ip_addr.addr) {
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	f000 8577 	beq.w	8001fea <dhcpserver_fn+0xba6>
    goto end_of_fcn;
  }
#if DHCPS_DBG
  printf("ip %d.%d.%d.%d\r\n", client_ip_addr.addr & 0xff, (client_ip_addr.addr >> 8) & 0xff, (client_ip_addr.addr >> 16) & 0xff, (client_ip_addr.addr >> 24) & 0xff);
#endif
  etharp_add_static_entry(&client_ip_addr, &ethaddr);   //add ARP table entry
 80014fc:	f107 021c 	add.w	r2, r7, #28
 8001500:	f107 0314 	add.w	r3, r7, #20
 8001504:	4611      	mov	r1, r2
 8001506:	4618      	mov	r0, r3
 8001508:	f016 f8ba 	bl	8017680 <etharp_add_static_entry>
  /* request type. */
  val = pbuf_get_at(pbuf_in, UDP_DHCP_OPTIONS_OFS + 2);
 800150c:	21f2      	movs	r1, #242	; 0xf2
 800150e:	6878      	ldr	r0, [r7, #4]
 8001510:	f00d fd9c 	bl	800f04c <pbuf_get_at>
 8001514:	4603      	mov	r3, r0
 8001516:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  switch (val) {
 800151a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800151e:	2b01      	cmp	r3, #1
 8001520:	d004      	beq.n	800152c <dhcpserver_fn+0xe8>
 8001522:	2b03      	cmp	r3, #3
 8001524:	f000 826a 	beq.w	80019fc <dhcpserver_fn+0x5b8>
      }

      break;
    // do nothing if not defined above
    default:
      break;
 8001528:	f000 bd62 	b.w	8001ff0 <dhcpserver_fn+0xbac>
      pbuf_put_at(pbuf_out, DHCP_OP_OFS, DHCP_BOOTREPLY);
 800152c:	2202      	movs	r2, #2
 800152e:	2100      	movs	r1, #0
 8001530:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001532:	f00d fdc4 	bl	800f0be <pbuf_put_at>
      pbuf_put_at(pbuf_out, DHCP_SECS_OFS, 0);
 8001536:	2200      	movs	r2, #0
 8001538:	2108      	movs	r1, #8
 800153a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800153c:	f00d fdbf 	bl	800f0be <pbuf_put_at>
      pbuf_put_at(pbuf_out, DHCP_FLAGS_OFS, 0x0);       //unicast
 8001540:	2200      	movs	r2, #0
 8001542:	210a      	movs	r1, #10
 8001544:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001546:	f00d fdba 	bl	800f0be <pbuf_put_at>
      pbuf_put_at(pbuf_out, DHCP_YIADDR_OFS, client_ip_addr.addr & 0xff);
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	b2db      	uxtb	r3, r3
 800154e:	461a      	mov	r2, r3
 8001550:	2110      	movs	r1, #16
 8001552:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001554:	f00d fdb3 	bl	800f0be <pbuf_put_at>
      pbuf_put_at(pbuf_out, DHCP_YIADDR_OFS + 1, (client_ip_addr.addr >> 8) & 0xff);
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	0a1b      	lsrs	r3, r3, #8
 800155c:	b2db      	uxtb	r3, r3
 800155e:	461a      	mov	r2, r3
 8001560:	2111      	movs	r1, #17
 8001562:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001564:	f00d fdab 	bl	800f0be <pbuf_put_at>
      pbuf_put_at(pbuf_out, DHCP_YIADDR_OFS + 2, (client_ip_addr.addr >> 16) & 0xff);
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	0c1b      	lsrs	r3, r3, #16
 800156c:	b2db      	uxtb	r3, r3
 800156e:	461a      	mov	r2, r3
 8001570:	2112      	movs	r1, #18
 8001572:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001574:	f00d fda3 	bl	800f0be <pbuf_put_at>
      pbuf_put_at(pbuf_out, DHCP_YIADDR_OFS + 3, (client_ip_addr.addr >> 24) & 0xff);
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	0e1b      	lsrs	r3, r3, #24
 800157c:	b2db      	uxtb	r3, r3
 800157e:	461a      	mov	r2, r3
 8001580:	2113      	movs	r1, #19
 8001582:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001584:	f00d fd9b 	bl	800f0be <pbuf_put_at>
      pbuf_put_at(pbuf_out, DHCP_SIADDR_OFS, 0);
 8001588:	2200      	movs	r2, #0
 800158a:	2114      	movs	r1, #20
 800158c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800158e:	f00d fd96 	bl	800f0be <pbuf_put_at>
      pbuf_put_at(pbuf_out, DHCP_SIADDR_OFS + 1, 0);
 8001592:	2200      	movs	r2, #0
 8001594:	2115      	movs	r1, #21
 8001596:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001598:	f00d fd91 	bl	800f0be <pbuf_put_at>
      pbuf_put_at(pbuf_out, DHCP_SIADDR_OFS + 2, 0);
 800159c:	2200      	movs	r2, #0
 800159e:	2116      	movs	r1, #22
 80015a0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80015a2:	f00d fd8c 	bl	800f0be <pbuf_put_at>
      pbuf_put_at(pbuf_out, DHCP_SIADDR_OFS + 3, 0);
 80015a6:	2200      	movs	r2, #0
 80015a8:	2117      	movs	r1, #23
 80015aa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80015ac:	f00d fd87 	bl	800f0be <pbuf_put_at>
      pbuf_put_at(pbuf_out, DHCP_COOKIE_OFS, (DHCP_MAGIC_COOKIE >> 24) & 0xff);
 80015b0:	2263      	movs	r2, #99	; 0x63
 80015b2:	21ec      	movs	r1, #236	; 0xec
 80015b4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80015b6:	f00d fd82 	bl	800f0be <pbuf_put_at>
      pbuf_put_at(pbuf_out, DHCP_COOKIE_OFS + 1, (DHCP_MAGIC_COOKIE >> 16) & 0xff);
 80015ba:	2282      	movs	r2, #130	; 0x82
 80015bc:	21ed      	movs	r1, #237	; 0xed
 80015be:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80015c0:	f00d fd7d 	bl	800f0be <pbuf_put_at>
      pbuf_put_at(pbuf_out, DHCP_COOKIE_OFS + 2, (DHCP_MAGIC_COOKIE >> 8) & 0xff);
 80015c4:	2253      	movs	r2, #83	; 0x53
 80015c6:	21ee      	movs	r1, #238	; 0xee
 80015c8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80015ca:	f00d fd78 	bl	800f0be <pbuf_put_at>
      pbuf_put_at(pbuf_out, DHCP_COOKIE_OFS + 3, (DHCP_MAGIC_COOKIE) & 0xff);
 80015ce:	2263      	movs	r2, #99	; 0x63
 80015d0:	21ef      	movs	r1, #239	; 0xef
 80015d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80015d4:	f00d fd73 	bl	800f0be <pbuf_put_at>
      options_offset = UDP_DHCP_OPTIONS_OFS;
 80015d8:	23f0      	movs	r3, #240	; 0xf0
 80015da:	627b      	str	r3, [r7, #36]	; 0x24
      pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_MESSAGE_TYPE);
 80015dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015de:	b29b      	uxth	r3, r3
 80015e0:	2235      	movs	r2, #53	; 0x35
 80015e2:	4619      	mov	r1, r3
 80015e4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80015e6:	f00d fd6a 	bl	800f0be <pbuf_put_at>
      options_offset++;
 80015ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ec:	3301      	adds	r3, #1
 80015ee:	627b      	str	r3, [r7, #36]	; 0x24
      pbuf_put_at(pbuf_out, options_offset, 1);
 80015f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f2:	b29b      	uxth	r3, r3
 80015f4:	2201      	movs	r2, #1
 80015f6:	4619      	mov	r1, r3
 80015f8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80015fa:	f00d fd60 	bl	800f0be <pbuf_put_at>
      options_offset++;
 80015fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001600:	3301      	adds	r3, #1
 8001602:	627b      	str	r3, [r7, #36]	; 0x24
      pbuf_put_at(pbuf_out, options_offset, DHCP_OFFER);
 8001604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001606:	b29b      	uxth	r3, r3
 8001608:	2202      	movs	r2, #2
 800160a:	4619      	mov	r1, r3
 800160c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800160e:	f00d fd56 	bl	800f0be <pbuf_put_at>
      options_offset++;
 8001612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001614:	3301      	adds	r3, #1
 8001616:	627b      	str	r3, [r7, #36]	; 0x24
      pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_SUBNET_MASK);
 8001618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800161a:	b29b      	uxth	r3, r3
 800161c:	2201      	movs	r2, #1
 800161e:	4619      	mov	r1, r3
 8001620:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001622:	f00d fd4c 	bl	800f0be <pbuf_put_at>
      options_offset++;
 8001626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001628:	3301      	adds	r3, #1
 800162a:	627b      	str	r3, [r7, #36]	; 0x24
      pbuf_put_at(pbuf_out, options_offset, 4);
 800162c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800162e:	b29b      	uxth	r3, r3
 8001630:	2204      	movs	r2, #4
 8001632:	4619      	mov	r1, r3
 8001634:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001636:	f00d fd42 	bl	800f0be <pbuf_put_at>
      options_offset++;
 800163a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800163c:	3301      	adds	r3, #1
 800163e:	627b      	str	r3, [r7, #36]	; 0x24
      IP4_ADDR(&r, ap_netmask_addr0, ap_netmask_addr1, ap_netmask_addr2, ap_netmask_addr3);
 8001640:	4ba8      	ldr	r3, [pc, #672]	; (80018e4 <dhcpserver_fn+0x4a0>)
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	061a      	lsls	r2, r3, #24
 8001646:	4ba8      	ldr	r3, [pc, #672]	; (80018e8 <dhcpserver_fn+0x4a4>)
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	041b      	lsls	r3, r3, #16
 800164c:	431a      	orrs	r2, r3
 800164e:	4ba7      	ldr	r3, [pc, #668]	; (80018ec <dhcpserver_fn+0x4a8>)
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	021b      	lsls	r3, r3, #8
 8001654:	4313      	orrs	r3, r2
 8001656:	4aa6      	ldr	r2, [pc, #664]	; (80018f0 <dhcpserver_fn+0x4ac>)
 8001658:	7812      	ldrb	r2, [r2, #0]
 800165a:	4313      	orrs	r3, r2
 800165c:	061a      	lsls	r2, r3, #24
 800165e:	4ba1      	ldr	r3, [pc, #644]	; (80018e4 <dhcpserver_fn+0x4a0>)
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	0619      	lsls	r1, r3, #24
 8001664:	4ba0      	ldr	r3, [pc, #640]	; (80018e8 <dhcpserver_fn+0x4a4>)
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	041b      	lsls	r3, r3, #16
 800166a:	4319      	orrs	r1, r3
 800166c:	4b9f      	ldr	r3, [pc, #636]	; (80018ec <dhcpserver_fn+0x4a8>)
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	021b      	lsls	r3, r3, #8
 8001672:	430b      	orrs	r3, r1
 8001674:	499e      	ldr	r1, [pc, #632]	; (80018f0 <dhcpserver_fn+0x4ac>)
 8001676:	7809      	ldrb	r1, [r1, #0]
 8001678:	430b      	orrs	r3, r1
 800167a:	021b      	lsls	r3, r3, #8
 800167c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001680:	431a      	orrs	r2, r3
 8001682:	4b98      	ldr	r3, [pc, #608]	; (80018e4 <dhcpserver_fn+0x4a0>)
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	0619      	lsls	r1, r3, #24
 8001688:	4b97      	ldr	r3, [pc, #604]	; (80018e8 <dhcpserver_fn+0x4a4>)
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	041b      	lsls	r3, r3, #16
 800168e:	4319      	orrs	r1, r3
 8001690:	4b96      	ldr	r3, [pc, #600]	; (80018ec <dhcpserver_fn+0x4a8>)
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	021b      	lsls	r3, r3, #8
 8001696:	430b      	orrs	r3, r1
 8001698:	4995      	ldr	r1, [pc, #596]	; (80018f0 <dhcpserver_fn+0x4ac>)
 800169a:	7809      	ldrb	r1, [r1, #0]
 800169c:	430b      	orrs	r3, r1
 800169e:	0a1b      	lsrs	r3, r3, #8
 80016a0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80016a4:	431a      	orrs	r2, r3
 80016a6:	4b8f      	ldr	r3, [pc, #572]	; (80018e4 <dhcpserver_fn+0x4a0>)
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	0619      	lsls	r1, r3, #24
 80016ac:	4b8e      	ldr	r3, [pc, #568]	; (80018e8 <dhcpserver_fn+0x4a4>)
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	041b      	lsls	r3, r3, #16
 80016b2:	4319      	orrs	r1, r3
 80016b4:	4b8d      	ldr	r3, [pc, #564]	; (80018ec <dhcpserver_fn+0x4a8>)
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	021b      	lsls	r3, r3, #8
 80016ba:	430b      	orrs	r3, r1
 80016bc:	498c      	ldr	r1, [pc, #560]	; (80018f0 <dhcpserver_fn+0x4ac>)
 80016be:	7809      	ldrb	r1, [r1, #0]
 80016c0:	430b      	orrs	r3, r1
 80016c2:	0e1b      	lsrs	r3, r3, #24
 80016c4:	4313      	orrs	r3, r2
 80016c6:	613b      	str	r3, [r7, #16]
      pbuf_put_at(pbuf_out, options_offset, r.addr & 0xff);
 80016c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ca:	b29b      	uxth	r3, r3
 80016cc:	693a      	ldr	r2, [r7, #16]
 80016ce:	b2d2      	uxtb	r2, r2
 80016d0:	4619      	mov	r1, r3
 80016d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80016d4:	f00d fcf3 	bl	800f0be <pbuf_put_at>
      pbuf_put_at(pbuf_out, options_offset + 1, (r.addr >> 8) & 0xff);
 80016d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016da:	b29b      	uxth	r3, r3
 80016dc:	3301      	adds	r3, #1
 80016de:	b299      	uxth	r1, r3
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	0a1b      	lsrs	r3, r3, #8
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	461a      	mov	r2, r3
 80016e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80016ea:	f00d fce8 	bl	800f0be <pbuf_put_at>
      pbuf_put_at(pbuf_out, options_offset + 2, (r.addr >> 16) & 0xff);
 80016ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f0:	b29b      	uxth	r3, r3
 80016f2:	3302      	adds	r3, #2
 80016f4:	b299      	uxth	r1, r3
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	0c1b      	lsrs	r3, r3, #16
 80016fa:	b2db      	uxtb	r3, r3
 80016fc:	461a      	mov	r2, r3
 80016fe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001700:	f00d fcdd 	bl	800f0be <pbuf_put_at>
      pbuf_put_at(pbuf_out, options_offset + 3, (r.addr >> 24) & 0xff);
 8001704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001706:	b29b      	uxth	r3, r3
 8001708:	3303      	adds	r3, #3
 800170a:	b299      	uxth	r1, r3
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	0e1b      	lsrs	r3, r3, #24
 8001710:	b2db      	uxtb	r3, r3
 8001712:	461a      	mov	r2, r3
 8001714:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001716:	f00d fcd2 	bl	800f0be <pbuf_put_at>
      options_offset += 4;
 800171a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800171c:	3304      	adds	r3, #4
 800171e:	627b      	str	r3, [r7, #36]	; 0x24
      pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_ROUTER);
 8001720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001722:	b29b      	uxth	r3, r3
 8001724:	2203      	movs	r2, #3
 8001726:	4619      	mov	r1, r3
 8001728:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800172a:	f00d fcc8 	bl	800f0be <pbuf_put_at>
      options_offset++;
 800172e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001730:	3301      	adds	r3, #1
 8001732:	627b      	str	r3, [r7, #36]	; 0x24
      pbuf_put_at(pbuf_out, options_offset, 4);
 8001734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001736:	b29b      	uxth	r3, r3
 8001738:	2204      	movs	r2, #4
 800173a:	4619      	mov	r1, r3
 800173c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800173e:	f00d fcbe 	bl	800f0be <pbuf_put_at>
      options_offset++;
 8001742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001744:	3301      	adds	r3, #1
 8001746:	627b      	str	r3, [r7, #36]	; 0x24
      IP4_ADDR(&r, ap_ip_addr0, ap_ip_addr1, ap_ip_addr2, ap_ip_addr3);
 8001748:	4b6a      	ldr	r3, [pc, #424]	; (80018f4 <dhcpserver_fn+0x4b0>)
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	061a      	lsls	r2, r3, #24
 800174e:	4b6a      	ldr	r3, [pc, #424]	; (80018f8 <dhcpserver_fn+0x4b4>)
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	041b      	lsls	r3, r3, #16
 8001754:	431a      	orrs	r2, r3
 8001756:	4b69      	ldr	r3, [pc, #420]	; (80018fc <dhcpserver_fn+0x4b8>)
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	021b      	lsls	r3, r3, #8
 800175c:	4313      	orrs	r3, r2
 800175e:	4a68      	ldr	r2, [pc, #416]	; (8001900 <dhcpserver_fn+0x4bc>)
 8001760:	7812      	ldrb	r2, [r2, #0]
 8001762:	4313      	orrs	r3, r2
 8001764:	061a      	lsls	r2, r3, #24
 8001766:	4b63      	ldr	r3, [pc, #396]	; (80018f4 <dhcpserver_fn+0x4b0>)
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	0619      	lsls	r1, r3, #24
 800176c:	4b62      	ldr	r3, [pc, #392]	; (80018f8 <dhcpserver_fn+0x4b4>)
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	041b      	lsls	r3, r3, #16
 8001772:	4319      	orrs	r1, r3
 8001774:	4b61      	ldr	r3, [pc, #388]	; (80018fc <dhcpserver_fn+0x4b8>)
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	021b      	lsls	r3, r3, #8
 800177a:	430b      	orrs	r3, r1
 800177c:	4960      	ldr	r1, [pc, #384]	; (8001900 <dhcpserver_fn+0x4bc>)
 800177e:	7809      	ldrb	r1, [r1, #0]
 8001780:	430b      	orrs	r3, r1
 8001782:	021b      	lsls	r3, r3, #8
 8001784:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001788:	431a      	orrs	r2, r3
 800178a:	4b5a      	ldr	r3, [pc, #360]	; (80018f4 <dhcpserver_fn+0x4b0>)
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	0619      	lsls	r1, r3, #24
 8001790:	4b59      	ldr	r3, [pc, #356]	; (80018f8 <dhcpserver_fn+0x4b4>)
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	041b      	lsls	r3, r3, #16
 8001796:	4319      	orrs	r1, r3
 8001798:	4b58      	ldr	r3, [pc, #352]	; (80018fc <dhcpserver_fn+0x4b8>)
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	021b      	lsls	r3, r3, #8
 800179e:	430b      	orrs	r3, r1
 80017a0:	4957      	ldr	r1, [pc, #348]	; (8001900 <dhcpserver_fn+0x4bc>)
 80017a2:	7809      	ldrb	r1, [r1, #0]
 80017a4:	430b      	orrs	r3, r1
 80017a6:	0a1b      	lsrs	r3, r3, #8
 80017a8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80017ac:	431a      	orrs	r2, r3
 80017ae:	4b51      	ldr	r3, [pc, #324]	; (80018f4 <dhcpserver_fn+0x4b0>)
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	0619      	lsls	r1, r3, #24
 80017b4:	4b50      	ldr	r3, [pc, #320]	; (80018f8 <dhcpserver_fn+0x4b4>)
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	041b      	lsls	r3, r3, #16
 80017ba:	4319      	orrs	r1, r3
 80017bc:	4b4f      	ldr	r3, [pc, #316]	; (80018fc <dhcpserver_fn+0x4b8>)
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	021b      	lsls	r3, r3, #8
 80017c2:	430b      	orrs	r3, r1
 80017c4:	494e      	ldr	r1, [pc, #312]	; (8001900 <dhcpserver_fn+0x4bc>)
 80017c6:	7809      	ldrb	r1, [r1, #0]
 80017c8:	430b      	orrs	r3, r1
 80017ca:	0e1b      	lsrs	r3, r3, #24
 80017cc:	4313      	orrs	r3, r2
 80017ce:	613b      	str	r3, [r7, #16]
      pbuf_put_at(pbuf_out, options_offset, r.addr & 0xff);
 80017d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d2:	b29b      	uxth	r3, r3
 80017d4:	693a      	ldr	r2, [r7, #16]
 80017d6:	b2d2      	uxtb	r2, r2
 80017d8:	4619      	mov	r1, r3
 80017da:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80017dc:	f00d fc6f 	bl	800f0be <pbuf_put_at>
      pbuf_put_at(pbuf_out, options_offset + 1, (r.addr >> 8) & 0xff);
 80017e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e2:	b29b      	uxth	r3, r3
 80017e4:	3301      	adds	r3, #1
 80017e6:	b299      	uxth	r1, r3
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	0a1b      	lsrs	r3, r3, #8
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	461a      	mov	r2, r3
 80017f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80017f2:	f00d fc64 	bl	800f0be <pbuf_put_at>
      pbuf_put_at(pbuf_out, options_offset + 2, (r.addr >> 16) & 0xff);
 80017f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f8:	b29b      	uxth	r3, r3
 80017fa:	3302      	adds	r3, #2
 80017fc:	b299      	uxth	r1, r3
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	0c1b      	lsrs	r3, r3, #16
 8001802:	b2db      	uxtb	r3, r3
 8001804:	461a      	mov	r2, r3
 8001806:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001808:	f00d fc59 	bl	800f0be <pbuf_put_at>
      pbuf_put_at(pbuf_out, options_offset + 3, (r.addr >> 24) & 0xff);
 800180c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800180e:	b29b      	uxth	r3, r3
 8001810:	3303      	adds	r3, #3
 8001812:	b299      	uxth	r1, r3
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	0e1b      	lsrs	r3, r3, #24
 8001818:	b2db      	uxtb	r3, r3
 800181a:	461a      	mov	r2, r3
 800181c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800181e:	f00d fc4e 	bl	800f0be <pbuf_put_at>
      options_offset += 4;
 8001822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001824:	3304      	adds	r3, #4
 8001826:	627b      	str	r3, [r7, #36]	; 0x24
      pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_LEASE_TIME);
 8001828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800182a:	b29b      	uxth	r3, r3
 800182c:	2233      	movs	r2, #51	; 0x33
 800182e:	4619      	mov	r1, r3
 8001830:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001832:	f00d fc44 	bl	800f0be <pbuf_put_at>
      options_offset++;
 8001836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001838:	3301      	adds	r3, #1
 800183a:	627b      	str	r3, [r7, #36]	; 0x24
      pbuf_put_at(pbuf_out, options_offset, 4);
 800183c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800183e:	b29b      	uxth	r3, r3
 8001840:	2204      	movs	r2, #4
 8001842:	4619      	mov	r1, r3
 8001844:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001846:	f00d fc3a 	bl	800f0be <pbuf_put_at>
      options_offset++;
 800184a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800184c:	3301      	adds	r3, #1
 800184e:	627b      	str	r3, [r7, #36]	; 0x24
      pbuf_put_at(pbuf_out, options_offset, (LEASE_TIME_1DAY >> 24) & 0xff);
 8001850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001852:	b29b      	uxth	r3, r3
 8001854:	2200      	movs	r2, #0
 8001856:	4619      	mov	r1, r3
 8001858:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800185a:	f00d fc30 	bl	800f0be <pbuf_put_at>
      pbuf_put_at(pbuf_out, options_offset + 1, (LEASE_TIME_1DAY >> 16) & 0xff);
 800185e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001860:	b29b      	uxth	r3, r3
 8001862:	3301      	adds	r3, #1
 8001864:	b29b      	uxth	r3, r3
 8001866:	2201      	movs	r2, #1
 8001868:	4619      	mov	r1, r3
 800186a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800186c:	f00d fc27 	bl	800f0be <pbuf_put_at>
      pbuf_put_at(pbuf_out, options_offset + 2, (LEASE_TIME_1DAY >> 8) & 0xff);
 8001870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001872:	b29b      	uxth	r3, r3
 8001874:	3302      	adds	r3, #2
 8001876:	b29b      	uxth	r3, r3
 8001878:	2251      	movs	r2, #81	; 0x51
 800187a:	4619      	mov	r1, r3
 800187c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800187e:	f00d fc1e 	bl	800f0be <pbuf_put_at>
      pbuf_put_at(pbuf_out, options_offset + 3, (LEASE_TIME_1DAY) & 0xff);
 8001882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001884:	b29b      	uxth	r3, r3
 8001886:	3303      	adds	r3, #3
 8001888:	b29b      	uxth	r3, r3
 800188a:	2280      	movs	r2, #128	; 0x80
 800188c:	4619      	mov	r1, r3
 800188e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001890:	f00d fc15 	bl	800f0be <pbuf_put_at>
      options_offset += 4;
 8001894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001896:	3304      	adds	r3, #4
 8001898:	627b      	str	r3, [r7, #36]	; 0x24
      pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_SERVER_ID);
 800189a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800189c:	b29b      	uxth	r3, r3
 800189e:	2236      	movs	r2, #54	; 0x36
 80018a0:	4619      	mov	r1, r3
 80018a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80018a4:	f00d fc0b 	bl	800f0be <pbuf_put_at>
      options_offset++;
 80018a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018aa:	3301      	adds	r3, #1
 80018ac:	627b      	str	r3, [r7, #36]	; 0x24
      pbuf_put_at(pbuf_out, options_offset, 4);
 80018ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b0:	b29b      	uxth	r3, r3
 80018b2:	2204      	movs	r2, #4
 80018b4:	4619      	mov	r1, r3
 80018b6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80018b8:	f00d fc01 	bl	800f0be <pbuf_put_at>
      options_offset++;
 80018bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018be:	3301      	adds	r3, #1
 80018c0:	627b      	str	r3, [r7, #36]	; 0x24
      IP4_ADDR(&r, ap_ip_addr0, ap_ip_addr1, ap_ip_addr2, ap_ip_addr3);
 80018c2:	4b0c      	ldr	r3, [pc, #48]	; (80018f4 <dhcpserver_fn+0x4b0>)
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	061a      	lsls	r2, r3, #24
 80018c8:	4b0b      	ldr	r3, [pc, #44]	; (80018f8 <dhcpserver_fn+0x4b4>)
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	041b      	lsls	r3, r3, #16
 80018ce:	431a      	orrs	r2, r3
 80018d0:	4b0a      	ldr	r3, [pc, #40]	; (80018fc <dhcpserver_fn+0x4b8>)
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	021b      	lsls	r3, r3, #8
 80018d6:	4313      	orrs	r3, r2
 80018d8:	4a09      	ldr	r2, [pc, #36]	; (8001900 <dhcpserver_fn+0x4bc>)
 80018da:	7812      	ldrb	r2, [r2, #0]
 80018dc:	4313      	orrs	r3, r2
 80018de:	061a      	lsls	r2, r3, #24
 80018e0:	e010      	b.n	8001904 <dhcpserver_fn+0x4c0>
 80018e2:	bf00      	nop
 80018e4:	200000a5 	.word	0x200000a5
 80018e8:	200000a6 	.word	0x200000a6
 80018ec:	200000a7 	.word	0x200000a7
 80018f0:	20000681 	.word	0x20000681
 80018f4:	200000a2 	.word	0x200000a2
 80018f8:	200000a3 	.word	0x200000a3
 80018fc:	20000680 	.word	0x20000680
 8001900:	200000a4 	.word	0x200000a4
 8001904:	4b54      	ldr	r3, [pc, #336]	; (8001a58 <dhcpserver_fn+0x614>)
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	0619      	lsls	r1, r3, #24
 800190a:	4b54      	ldr	r3, [pc, #336]	; (8001a5c <dhcpserver_fn+0x618>)
 800190c:	781b      	ldrb	r3, [r3, #0]
 800190e:	041b      	lsls	r3, r3, #16
 8001910:	4319      	orrs	r1, r3
 8001912:	4b53      	ldr	r3, [pc, #332]	; (8001a60 <dhcpserver_fn+0x61c>)
 8001914:	781b      	ldrb	r3, [r3, #0]
 8001916:	021b      	lsls	r3, r3, #8
 8001918:	430b      	orrs	r3, r1
 800191a:	4952      	ldr	r1, [pc, #328]	; (8001a64 <dhcpserver_fn+0x620>)
 800191c:	7809      	ldrb	r1, [r1, #0]
 800191e:	430b      	orrs	r3, r1
 8001920:	021b      	lsls	r3, r3, #8
 8001922:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001926:	431a      	orrs	r2, r3
 8001928:	4b4b      	ldr	r3, [pc, #300]	; (8001a58 <dhcpserver_fn+0x614>)
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	0619      	lsls	r1, r3, #24
 800192e:	4b4b      	ldr	r3, [pc, #300]	; (8001a5c <dhcpserver_fn+0x618>)
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	041b      	lsls	r3, r3, #16
 8001934:	4319      	orrs	r1, r3
 8001936:	4b4a      	ldr	r3, [pc, #296]	; (8001a60 <dhcpserver_fn+0x61c>)
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	021b      	lsls	r3, r3, #8
 800193c:	430b      	orrs	r3, r1
 800193e:	4949      	ldr	r1, [pc, #292]	; (8001a64 <dhcpserver_fn+0x620>)
 8001940:	7809      	ldrb	r1, [r1, #0]
 8001942:	430b      	orrs	r3, r1
 8001944:	0a1b      	lsrs	r3, r3, #8
 8001946:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800194a:	431a      	orrs	r2, r3
 800194c:	4b42      	ldr	r3, [pc, #264]	; (8001a58 <dhcpserver_fn+0x614>)
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	0619      	lsls	r1, r3, #24
 8001952:	4b42      	ldr	r3, [pc, #264]	; (8001a5c <dhcpserver_fn+0x618>)
 8001954:	781b      	ldrb	r3, [r3, #0]
 8001956:	041b      	lsls	r3, r3, #16
 8001958:	4319      	orrs	r1, r3
 800195a:	4b41      	ldr	r3, [pc, #260]	; (8001a60 <dhcpserver_fn+0x61c>)
 800195c:	781b      	ldrb	r3, [r3, #0]
 800195e:	021b      	lsls	r3, r3, #8
 8001960:	430b      	orrs	r3, r1
 8001962:	4940      	ldr	r1, [pc, #256]	; (8001a64 <dhcpserver_fn+0x620>)
 8001964:	7809      	ldrb	r1, [r1, #0]
 8001966:	430b      	orrs	r3, r1
 8001968:	0e1b      	lsrs	r3, r3, #24
 800196a:	4313      	orrs	r3, r2
 800196c:	613b      	str	r3, [r7, #16]
      pbuf_put_at(pbuf_out, options_offset, r.addr & 0xff);
 800196e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001970:	b29b      	uxth	r3, r3
 8001972:	693a      	ldr	r2, [r7, #16]
 8001974:	b2d2      	uxtb	r2, r2
 8001976:	4619      	mov	r1, r3
 8001978:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800197a:	f00d fba0 	bl	800f0be <pbuf_put_at>
      pbuf_put_at(pbuf_out, options_offset + 1, (r.addr >> 8) & 0xff);
 800197e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001980:	b29b      	uxth	r3, r3
 8001982:	3301      	adds	r3, #1
 8001984:	b299      	uxth	r1, r3
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	0a1b      	lsrs	r3, r3, #8
 800198a:	b2db      	uxtb	r3, r3
 800198c:	461a      	mov	r2, r3
 800198e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001990:	f00d fb95 	bl	800f0be <pbuf_put_at>
      pbuf_put_at(pbuf_out, options_offset + 2, (r.addr >> 16) & 0xff);
 8001994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001996:	b29b      	uxth	r3, r3
 8001998:	3302      	adds	r3, #2
 800199a:	b299      	uxth	r1, r3
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	0c1b      	lsrs	r3, r3, #16
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	461a      	mov	r2, r3
 80019a4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80019a6:	f00d fb8a 	bl	800f0be <pbuf_put_at>
      pbuf_put_at(pbuf_out, options_offset + 3, (r.addr >> 24) & 0xff);
 80019aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ac:	b29b      	uxth	r3, r3
 80019ae:	3303      	adds	r3, #3
 80019b0:	b299      	uxth	r1, r3
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	0e1b      	lsrs	r3, r3, #24
 80019b6:	b2db      	uxtb	r3, r3
 80019b8:	461a      	mov	r2, r3
 80019ba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80019bc:	f00d fb7f 	bl	800f0be <pbuf_put_at>
      options_offset += 4;
 80019c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c2:	3304      	adds	r3, #4
 80019c4:	627b      	str	r3, [r7, #36]	; 0x24
      pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_END);
 80019c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c8:	b29b      	uxth	r3, r3
 80019ca:	22ff      	movs	r2, #255	; 0xff
 80019cc:	4619      	mov	r1, r3
 80019ce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80019d0:	f00d fb75 	bl	800f0be <pbuf_put_at>
      options_offset++;
 80019d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d6:	3301      	adds	r3, #1
 80019d8:	627b      	str	r3, [r7, #36]	; 0x24
      pbuf_realloc(pbuf_out, options_offset);
 80019da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019dc:	b29b      	uxth	r3, r3
 80019de:	4619      	mov	r1, r3
 80019e0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80019e2:	f00c fdcb 	bl	800e57c <pbuf_realloc>
      if (ERR_OK != udp_sendto(dhcp_pcb, pbuf_out, &client_ip_addr, DHCP_CLIENT_PORT)) {
 80019e6:	4b20      	ldr	r3, [pc, #128]	; (8001a68 <dhcpserver_fn+0x624>)
 80019e8:	6818      	ldr	r0, [r3, #0]
 80019ea:	f107 0214 	add.w	r2, r7, #20
 80019ee:	2344      	movs	r3, #68	; 0x44
 80019f0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80019f2:	f013 f8b7 	bl	8014b64 <udp_sendto>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
      break;
 80019fa:	e2f9      	b.n	8001ff0 <dhcpserver_fn+0xbac>
      pbuf_put_at(pbuf_out, DHCP_OP_OFS, DHCP_BOOTREPLY);
 80019fc:	2202      	movs	r2, #2
 80019fe:	2100      	movs	r1, #0
 8001a00:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001a02:	f00d fb5c 	bl	800f0be <pbuf_put_at>
      pbuf_put_at(pbuf_out, DHCP_SECS_OFS, 0);
 8001a06:	2200      	movs	r2, #0
 8001a08:	2108      	movs	r1, #8
 8001a0a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001a0c:	f00d fb57 	bl	800f0be <pbuf_put_at>
      flags = 0;
 8001a10:	2300      	movs	r3, #0
 8001a12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      flags = pbuf_get_at(pbuf_in, DHCP_FLAGS_OFS);
 8001a16:	210a      	movs	r1, #10
 8001a18:	6878      	ldr	r0, [r7, #4]
 8001a1a:	f00d fb17 	bl	800f04c <pbuf_get_at>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      if (flags & 0x80) {
 8001a24:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	da1f      	bge.n	8001a6c <dhcpserver_fn+0x628>
        flags = pbuf_get_at(pbuf_out, DHCP_FLAGS_OFS);
 8001a2c:	210a      	movs	r1, #10
 8001a2e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001a30:	f00d fb0c 	bl	800f04c <pbuf_get_at>
 8001a34:	4603      	mov	r3, r0
 8001a36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        flags |= 0x80;
 8001a3a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001a3e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001a42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        pbuf_put_at(pbuf_out, DHCP_FLAGS_OFS, flags);
 8001a46:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	210a      	movs	r1, #10
 8001a4e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001a50:	f00d fb35 	bl	800f0be <pbuf_put_at>
 8001a54:	e01e      	b.n	8001a94 <dhcpserver_fn+0x650>
 8001a56:	bf00      	nop
 8001a58:	200000a2 	.word	0x200000a2
 8001a5c:	200000a3 	.word	0x200000a3
 8001a60:	20000680 	.word	0x20000680
 8001a64:	200000a4 	.word	0x200000a4
 8001a68:	20000380 	.word	0x20000380
        flags = pbuf_get_at(pbuf_out, DHCP_FLAGS_OFS);
 8001a6c:	210a      	movs	r1, #10
 8001a6e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001a70:	f00d faec 	bl	800f04c <pbuf_get_at>
 8001a74:	4603      	mov	r3, r0
 8001a76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        flags &= ~0x80;
 8001a7a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001a7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001a82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        pbuf_put_at(pbuf_out, DHCP_FLAGS_OFS, flags);
 8001a86:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	210a      	movs	r1, #10
 8001a8e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001a90:	f00d fb15 	bl	800f0be <pbuf_put_at>
      if (0 == dhcpserver_find_requested_ip(pbuf_in, (uint8_t *)&client_requested_addr)) {
 8001a94:	f107 0318 	add.w	r3, r7, #24
 8001a98:	4619      	mov	r1, r3
 8001a9a:	6878      	ldr	r0, [r7, #4]
 8001a9c:	f7ff fc7e 	bl	800139c <dhcpserver_find_requested_ip>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	f000 82a3 	beq.w	8001fee <dhcpserver_fn+0xbaa>
      if (client_requested_addr == client_ip_addr.addr) {
 8001aa8:	697a      	ldr	r2, [r7, #20]
 8001aaa:	69bb      	ldr	r3, [r7, #24]
 8001aac:	429a      	cmp	r2, r3
 8001aae:	f040 8249 	bne.w	8001f44 <dhcpserver_fn+0xb00>
        pbuf_put_at(pbuf_out, DHCP_YIADDR_OFS, client_ip_addr.addr & 0xff);
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	b2db      	uxtb	r3, r3
 8001ab6:	461a      	mov	r2, r3
 8001ab8:	2110      	movs	r1, #16
 8001aba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001abc:	f00d faff 	bl	800f0be <pbuf_put_at>
        pbuf_put_at(pbuf_out, DHCP_YIADDR_OFS + 1, (client_ip_addr.addr >> 8) & 0xff);
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	0a1b      	lsrs	r3, r3, #8
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	461a      	mov	r2, r3
 8001ac8:	2111      	movs	r1, #17
 8001aca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001acc:	f00d faf7 	bl	800f0be <pbuf_put_at>
        pbuf_put_at(pbuf_out, DHCP_YIADDR_OFS + 2, (client_ip_addr.addr >> 16) & 0xff);
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	0c1b      	lsrs	r3, r3, #16
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	2112      	movs	r1, #18
 8001ada:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001adc:	f00d faef 	bl	800f0be <pbuf_put_at>
        pbuf_put_at(pbuf_out, DHCP_YIADDR_OFS + 3, (client_ip_addr.addr >> 24) & 0xff);
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	0e1b      	lsrs	r3, r3, #24
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	461a      	mov	r2, r3
 8001ae8:	2113      	movs	r1, #19
 8001aea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001aec:	f00d fae7 	bl	800f0be <pbuf_put_at>
        pbuf_put_at(pbuf_out, DHCP_SIADDR_OFS, 0);
 8001af0:	2200      	movs	r2, #0
 8001af2:	2114      	movs	r1, #20
 8001af4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001af6:	f00d fae2 	bl	800f0be <pbuf_put_at>
        pbuf_put_at(pbuf_out, DHCP_SIADDR_OFS + 1, 0);
 8001afa:	2200      	movs	r2, #0
 8001afc:	2115      	movs	r1, #21
 8001afe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001b00:	f00d fadd 	bl	800f0be <pbuf_put_at>
        pbuf_put_at(pbuf_out, DHCP_SIADDR_OFS + 2, 0);
 8001b04:	2200      	movs	r2, #0
 8001b06:	2116      	movs	r1, #22
 8001b08:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001b0a:	f00d fad8 	bl	800f0be <pbuf_put_at>
        pbuf_put_at(pbuf_out, DHCP_SIADDR_OFS + 3, 0);
 8001b0e:	2200      	movs	r2, #0
 8001b10:	2117      	movs	r1, #23
 8001b12:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001b14:	f00d fad3 	bl	800f0be <pbuf_put_at>
        pbuf_put_at(pbuf_out, DHCP_COOKIE_OFS, (DHCP_MAGIC_COOKIE >> 24) & 0xff);
 8001b18:	2263      	movs	r2, #99	; 0x63
 8001b1a:	21ec      	movs	r1, #236	; 0xec
 8001b1c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001b1e:	f00d face 	bl	800f0be <pbuf_put_at>
        pbuf_put_at(pbuf_out, DHCP_COOKIE_OFS + 1, (DHCP_MAGIC_COOKIE >> 16) & 0xff);
 8001b22:	2282      	movs	r2, #130	; 0x82
 8001b24:	21ed      	movs	r1, #237	; 0xed
 8001b26:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001b28:	f00d fac9 	bl	800f0be <pbuf_put_at>
        pbuf_put_at(pbuf_out, DHCP_COOKIE_OFS + 2, (DHCP_MAGIC_COOKIE >> 8) & 0xff);
 8001b2c:	2253      	movs	r2, #83	; 0x53
 8001b2e:	21ee      	movs	r1, #238	; 0xee
 8001b30:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001b32:	f00d fac4 	bl	800f0be <pbuf_put_at>
        pbuf_put_at(pbuf_out, DHCP_COOKIE_OFS + 3, (DHCP_MAGIC_COOKIE) & 0xff);
 8001b36:	2263      	movs	r2, #99	; 0x63
 8001b38:	21ef      	movs	r1, #239	; 0xef
 8001b3a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001b3c:	f00d fabf 	bl	800f0be <pbuf_put_at>
        options_offset = UDP_DHCP_OPTIONS_OFS;
 8001b40:	23f0      	movs	r3, #240	; 0xf0
 8001b42:	627b      	str	r3, [r7, #36]	; 0x24
        pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_MESSAGE_TYPE);
 8001b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b46:	b29b      	uxth	r3, r3
 8001b48:	2235      	movs	r2, #53	; 0x35
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001b4e:	f00d fab6 	bl	800f0be <pbuf_put_at>
        options_offset++;
 8001b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b54:	3301      	adds	r3, #1
 8001b56:	627b      	str	r3, [r7, #36]	; 0x24
        pbuf_put_at(pbuf_out, options_offset, 1);
 8001b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b5a:	b29b      	uxth	r3, r3
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	4619      	mov	r1, r3
 8001b60:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001b62:	f00d faac 	bl	800f0be <pbuf_put_at>
        options_offset++;
 8001b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b68:	3301      	adds	r3, #1
 8001b6a:	627b      	str	r3, [r7, #36]	; 0x24
        pbuf_put_at(pbuf_out, options_offset, DHCP_ACK);
 8001b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b6e:	b29b      	uxth	r3, r3
 8001b70:	2205      	movs	r2, #5
 8001b72:	4619      	mov	r1, r3
 8001b74:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001b76:	f00d faa2 	bl	800f0be <pbuf_put_at>
        options_offset++;
 8001b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b7c:	3301      	adds	r3, #1
 8001b7e:	627b      	str	r3, [r7, #36]	; 0x24
        pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_SUBNET_MASK);
 8001b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b82:	b29b      	uxth	r3, r3
 8001b84:	2201      	movs	r2, #1
 8001b86:	4619      	mov	r1, r3
 8001b88:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001b8a:	f00d fa98 	bl	800f0be <pbuf_put_at>
        options_offset++;
 8001b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b90:	3301      	adds	r3, #1
 8001b92:	627b      	str	r3, [r7, #36]	; 0x24
        pbuf_put_at(pbuf_out, options_offset, 4);
 8001b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b96:	b29b      	uxth	r3, r3
 8001b98:	2204      	movs	r2, #4
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001b9e:	f00d fa8e 	bl	800f0be <pbuf_put_at>
        options_offset++;
 8001ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba4:	3301      	adds	r3, #1
 8001ba6:	627b      	str	r3, [r7, #36]	; 0x24
        IP4_ADDR(&r, ap_netmask_addr0, ap_netmask_addr1, ap_netmask_addr2, ap_netmask_addr3);
 8001ba8:	4ba8      	ldr	r3, [pc, #672]	; (8001e4c <dhcpserver_fn+0xa08>)
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	061a      	lsls	r2, r3, #24
 8001bae:	4ba8      	ldr	r3, [pc, #672]	; (8001e50 <dhcpserver_fn+0xa0c>)
 8001bb0:	781b      	ldrb	r3, [r3, #0]
 8001bb2:	041b      	lsls	r3, r3, #16
 8001bb4:	431a      	orrs	r2, r3
 8001bb6:	4ba7      	ldr	r3, [pc, #668]	; (8001e54 <dhcpserver_fn+0xa10>)
 8001bb8:	781b      	ldrb	r3, [r3, #0]
 8001bba:	021b      	lsls	r3, r3, #8
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	4aa6      	ldr	r2, [pc, #664]	; (8001e58 <dhcpserver_fn+0xa14>)
 8001bc0:	7812      	ldrb	r2, [r2, #0]
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	061a      	lsls	r2, r3, #24
 8001bc6:	4ba1      	ldr	r3, [pc, #644]	; (8001e4c <dhcpserver_fn+0xa08>)
 8001bc8:	781b      	ldrb	r3, [r3, #0]
 8001bca:	0619      	lsls	r1, r3, #24
 8001bcc:	4ba0      	ldr	r3, [pc, #640]	; (8001e50 <dhcpserver_fn+0xa0c>)
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	041b      	lsls	r3, r3, #16
 8001bd2:	4319      	orrs	r1, r3
 8001bd4:	4b9f      	ldr	r3, [pc, #636]	; (8001e54 <dhcpserver_fn+0xa10>)
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	021b      	lsls	r3, r3, #8
 8001bda:	430b      	orrs	r3, r1
 8001bdc:	499e      	ldr	r1, [pc, #632]	; (8001e58 <dhcpserver_fn+0xa14>)
 8001bde:	7809      	ldrb	r1, [r1, #0]
 8001be0:	430b      	orrs	r3, r1
 8001be2:	021b      	lsls	r3, r3, #8
 8001be4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001be8:	431a      	orrs	r2, r3
 8001bea:	4b98      	ldr	r3, [pc, #608]	; (8001e4c <dhcpserver_fn+0xa08>)
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	0619      	lsls	r1, r3, #24
 8001bf0:	4b97      	ldr	r3, [pc, #604]	; (8001e50 <dhcpserver_fn+0xa0c>)
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	041b      	lsls	r3, r3, #16
 8001bf6:	4319      	orrs	r1, r3
 8001bf8:	4b96      	ldr	r3, [pc, #600]	; (8001e54 <dhcpserver_fn+0xa10>)
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	021b      	lsls	r3, r3, #8
 8001bfe:	430b      	orrs	r3, r1
 8001c00:	4995      	ldr	r1, [pc, #596]	; (8001e58 <dhcpserver_fn+0xa14>)
 8001c02:	7809      	ldrb	r1, [r1, #0]
 8001c04:	430b      	orrs	r3, r1
 8001c06:	0a1b      	lsrs	r3, r3, #8
 8001c08:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8001c0c:	431a      	orrs	r2, r3
 8001c0e:	4b8f      	ldr	r3, [pc, #572]	; (8001e4c <dhcpserver_fn+0xa08>)
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	0619      	lsls	r1, r3, #24
 8001c14:	4b8e      	ldr	r3, [pc, #568]	; (8001e50 <dhcpserver_fn+0xa0c>)
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	041b      	lsls	r3, r3, #16
 8001c1a:	4319      	orrs	r1, r3
 8001c1c:	4b8d      	ldr	r3, [pc, #564]	; (8001e54 <dhcpserver_fn+0xa10>)
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	021b      	lsls	r3, r3, #8
 8001c22:	430b      	orrs	r3, r1
 8001c24:	498c      	ldr	r1, [pc, #560]	; (8001e58 <dhcpserver_fn+0xa14>)
 8001c26:	7809      	ldrb	r1, [r1, #0]
 8001c28:	430b      	orrs	r3, r1
 8001c2a:	0e1b      	lsrs	r3, r3, #24
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	613b      	str	r3, [r7, #16]
        pbuf_put_at(pbuf_out, options_offset, r.addr & 0xff);
 8001c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c32:	b29b      	uxth	r3, r3
 8001c34:	693a      	ldr	r2, [r7, #16]
 8001c36:	b2d2      	uxtb	r2, r2
 8001c38:	4619      	mov	r1, r3
 8001c3a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001c3c:	f00d fa3f 	bl	800f0be <pbuf_put_at>
        pbuf_put_at(pbuf_out, options_offset + 1, (r.addr >> 8) & 0xff);
 8001c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c42:	b29b      	uxth	r3, r3
 8001c44:	3301      	adds	r3, #1
 8001c46:	b299      	uxth	r1, r3
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	0a1b      	lsrs	r3, r3, #8
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	461a      	mov	r2, r3
 8001c50:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001c52:	f00d fa34 	bl	800f0be <pbuf_put_at>
        pbuf_put_at(pbuf_out, options_offset + 2, (r.addr >> 16) & 0xff);
 8001c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c58:	b29b      	uxth	r3, r3
 8001c5a:	3302      	adds	r3, #2
 8001c5c:	b299      	uxth	r1, r3
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	0c1b      	lsrs	r3, r3, #16
 8001c62:	b2db      	uxtb	r3, r3
 8001c64:	461a      	mov	r2, r3
 8001c66:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001c68:	f00d fa29 	bl	800f0be <pbuf_put_at>
        pbuf_put_at(pbuf_out, options_offset + 3, (r.addr >> 24) & 0xff);
 8001c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6e:	b29b      	uxth	r3, r3
 8001c70:	3303      	adds	r3, #3
 8001c72:	b299      	uxth	r1, r3
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	0e1b      	lsrs	r3, r3, #24
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	461a      	mov	r2, r3
 8001c7c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001c7e:	f00d fa1e 	bl	800f0be <pbuf_put_at>
        options_offset += 4;
 8001c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c84:	3304      	adds	r3, #4
 8001c86:	627b      	str	r3, [r7, #36]	; 0x24
        pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_ROUTER);
 8001c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c8a:	b29b      	uxth	r3, r3
 8001c8c:	2203      	movs	r2, #3
 8001c8e:	4619      	mov	r1, r3
 8001c90:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001c92:	f00d fa14 	bl	800f0be <pbuf_put_at>
        options_offset++;
 8001c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c98:	3301      	adds	r3, #1
 8001c9a:	627b      	str	r3, [r7, #36]	; 0x24
        pbuf_put_at(pbuf_out, options_offset, 4);
 8001c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c9e:	b29b      	uxth	r3, r3
 8001ca0:	2204      	movs	r2, #4
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001ca6:	f00d fa0a 	bl	800f0be <pbuf_put_at>
        options_offset++;
 8001caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cac:	3301      	adds	r3, #1
 8001cae:	627b      	str	r3, [r7, #36]	; 0x24
        IP4_ADDR(&r, ap_ip_addr0, ap_ip_addr1, ap_ip_addr2, ap_ip_addr3);
 8001cb0:	4b6a      	ldr	r3, [pc, #424]	; (8001e5c <dhcpserver_fn+0xa18>)
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	061a      	lsls	r2, r3, #24
 8001cb6:	4b6a      	ldr	r3, [pc, #424]	; (8001e60 <dhcpserver_fn+0xa1c>)
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	041b      	lsls	r3, r3, #16
 8001cbc:	431a      	orrs	r2, r3
 8001cbe:	4b69      	ldr	r3, [pc, #420]	; (8001e64 <dhcpserver_fn+0xa20>)
 8001cc0:	781b      	ldrb	r3, [r3, #0]
 8001cc2:	021b      	lsls	r3, r3, #8
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	4a68      	ldr	r2, [pc, #416]	; (8001e68 <dhcpserver_fn+0xa24>)
 8001cc8:	7812      	ldrb	r2, [r2, #0]
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	061a      	lsls	r2, r3, #24
 8001cce:	4b63      	ldr	r3, [pc, #396]	; (8001e5c <dhcpserver_fn+0xa18>)
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	0619      	lsls	r1, r3, #24
 8001cd4:	4b62      	ldr	r3, [pc, #392]	; (8001e60 <dhcpserver_fn+0xa1c>)
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	041b      	lsls	r3, r3, #16
 8001cda:	4319      	orrs	r1, r3
 8001cdc:	4b61      	ldr	r3, [pc, #388]	; (8001e64 <dhcpserver_fn+0xa20>)
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	021b      	lsls	r3, r3, #8
 8001ce2:	430b      	orrs	r3, r1
 8001ce4:	4960      	ldr	r1, [pc, #384]	; (8001e68 <dhcpserver_fn+0xa24>)
 8001ce6:	7809      	ldrb	r1, [r1, #0]
 8001ce8:	430b      	orrs	r3, r1
 8001cea:	021b      	lsls	r3, r3, #8
 8001cec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001cf0:	431a      	orrs	r2, r3
 8001cf2:	4b5a      	ldr	r3, [pc, #360]	; (8001e5c <dhcpserver_fn+0xa18>)
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	0619      	lsls	r1, r3, #24
 8001cf8:	4b59      	ldr	r3, [pc, #356]	; (8001e60 <dhcpserver_fn+0xa1c>)
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	041b      	lsls	r3, r3, #16
 8001cfe:	4319      	orrs	r1, r3
 8001d00:	4b58      	ldr	r3, [pc, #352]	; (8001e64 <dhcpserver_fn+0xa20>)
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	021b      	lsls	r3, r3, #8
 8001d06:	430b      	orrs	r3, r1
 8001d08:	4957      	ldr	r1, [pc, #348]	; (8001e68 <dhcpserver_fn+0xa24>)
 8001d0a:	7809      	ldrb	r1, [r1, #0]
 8001d0c:	430b      	orrs	r3, r1
 8001d0e:	0a1b      	lsrs	r3, r3, #8
 8001d10:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8001d14:	431a      	orrs	r2, r3
 8001d16:	4b51      	ldr	r3, [pc, #324]	; (8001e5c <dhcpserver_fn+0xa18>)
 8001d18:	781b      	ldrb	r3, [r3, #0]
 8001d1a:	0619      	lsls	r1, r3, #24
 8001d1c:	4b50      	ldr	r3, [pc, #320]	; (8001e60 <dhcpserver_fn+0xa1c>)
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	041b      	lsls	r3, r3, #16
 8001d22:	4319      	orrs	r1, r3
 8001d24:	4b4f      	ldr	r3, [pc, #316]	; (8001e64 <dhcpserver_fn+0xa20>)
 8001d26:	781b      	ldrb	r3, [r3, #0]
 8001d28:	021b      	lsls	r3, r3, #8
 8001d2a:	430b      	orrs	r3, r1
 8001d2c:	494e      	ldr	r1, [pc, #312]	; (8001e68 <dhcpserver_fn+0xa24>)
 8001d2e:	7809      	ldrb	r1, [r1, #0]
 8001d30:	430b      	orrs	r3, r1
 8001d32:	0e1b      	lsrs	r3, r3, #24
 8001d34:	4313      	orrs	r3, r2
 8001d36:	613b      	str	r3, [r7, #16]
        pbuf_put_at(pbuf_out, options_offset, r.addr & 0xff);
 8001d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3a:	b29b      	uxth	r3, r3
 8001d3c:	693a      	ldr	r2, [r7, #16]
 8001d3e:	b2d2      	uxtb	r2, r2
 8001d40:	4619      	mov	r1, r3
 8001d42:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001d44:	f00d f9bb 	bl	800f0be <pbuf_put_at>
        pbuf_put_at(pbuf_out, options_offset + 1, (r.addr >> 8) & 0xff);
 8001d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4a:	b29b      	uxth	r3, r3
 8001d4c:	3301      	adds	r3, #1
 8001d4e:	b299      	uxth	r1, r3
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	0a1b      	lsrs	r3, r3, #8
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	461a      	mov	r2, r3
 8001d58:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001d5a:	f00d f9b0 	bl	800f0be <pbuf_put_at>
        pbuf_put_at(pbuf_out, options_offset + 2, (r.addr >> 16) & 0xff);
 8001d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d60:	b29b      	uxth	r3, r3
 8001d62:	3302      	adds	r3, #2
 8001d64:	b299      	uxth	r1, r3
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	0c1b      	lsrs	r3, r3, #16
 8001d6a:	b2db      	uxtb	r3, r3
 8001d6c:	461a      	mov	r2, r3
 8001d6e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001d70:	f00d f9a5 	bl	800f0be <pbuf_put_at>
        pbuf_put_at(pbuf_out, options_offset + 3, (r.addr >> 24) & 0xff);
 8001d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d76:	b29b      	uxth	r3, r3
 8001d78:	3303      	adds	r3, #3
 8001d7a:	b299      	uxth	r1, r3
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	0e1b      	lsrs	r3, r3, #24
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	461a      	mov	r2, r3
 8001d84:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001d86:	f00d f99a 	bl	800f0be <pbuf_put_at>
        options_offset += 4;
 8001d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d8c:	3304      	adds	r3, #4
 8001d8e:	627b      	str	r3, [r7, #36]	; 0x24
        pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_LEASE_TIME);
 8001d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d92:	b29b      	uxth	r3, r3
 8001d94:	2233      	movs	r2, #51	; 0x33
 8001d96:	4619      	mov	r1, r3
 8001d98:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001d9a:	f00d f990 	bl	800f0be <pbuf_put_at>
        options_offset++;
 8001d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da0:	3301      	adds	r3, #1
 8001da2:	627b      	str	r3, [r7, #36]	; 0x24
        pbuf_put_at(pbuf_out, options_offset, 4);
 8001da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da6:	b29b      	uxth	r3, r3
 8001da8:	2204      	movs	r2, #4
 8001daa:	4619      	mov	r1, r3
 8001dac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001dae:	f00d f986 	bl	800f0be <pbuf_put_at>
        options_offset++;
 8001db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db4:	3301      	adds	r3, #1
 8001db6:	627b      	str	r3, [r7, #36]	; 0x24
        pbuf_put_at(pbuf_out, options_offset, (LEASE_TIME_1DAY >> 24) & 0xff);
 8001db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dba:	b29b      	uxth	r3, r3
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001dc2:	f00d f97c 	bl	800f0be <pbuf_put_at>
        pbuf_put_at(pbuf_out, options_offset + 1, (LEASE_TIME_1DAY >> 16) & 0xff);
 8001dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc8:	b29b      	uxth	r3, r3
 8001dca:	3301      	adds	r3, #1
 8001dcc:	b29b      	uxth	r3, r3
 8001dce:	2201      	movs	r2, #1
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001dd4:	f00d f973 	bl	800f0be <pbuf_put_at>
        pbuf_put_at(pbuf_out, options_offset + 2, (LEASE_TIME_1DAY >> 8) & 0xff);
 8001dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dda:	b29b      	uxth	r3, r3
 8001ddc:	3302      	adds	r3, #2
 8001dde:	b29b      	uxth	r3, r3
 8001de0:	2251      	movs	r2, #81	; 0x51
 8001de2:	4619      	mov	r1, r3
 8001de4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001de6:	f00d f96a 	bl	800f0be <pbuf_put_at>
        pbuf_put_at(pbuf_out, options_offset + 3, (LEASE_TIME_1DAY) & 0xff);
 8001dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dec:	b29b      	uxth	r3, r3
 8001dee:	3303      	adds	r3, #3
 8001df0:	b29b      	uxth	r3, r3
 8001df2:	2280      	movs	r2, #128	; 0x80
 8001df4:	4619      	mov	r1, r3
 8001df6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001df8:	f00d f961 	bl	800f0be <pbuf_put_at>
        options_offset += 4;
 8001dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dfe:	3304      	adds	r3, #4
 8001e00:	627b      	str	r3, [r7, #36]	; 0x24
        pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_SERVER_ID);
 8001e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e04:	b29b      	uxth	r3, r3
 8001e06:	2236      	movs	r2, #54	; 0x36
 8001e08:	4619      	mov	r1, r3
 8001e0a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001e0c:	f00d f957 	bl	800f0be <pbuf_put_at>
        options_offset++;
 8001e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e12:	3301      	adds	r3, #1
 8001e14:	627b      	str	r3, [r7, #36]	; 0x24
        pbuf_put_at(pbuf_out, options_offset, 4);
 8001e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e18:	b29b      	uxth	r3, r3
 8001e1a:	2204      	movs	r2, #4
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001e20:	f00d f94d 	bl	800f0be <pbuf_put_at>
        options_offset++;
 8001e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e26:	3301      	adds	r3, #1
 8001e28:	627b      	str	r3, [r7, #36]	; 0x24
        IP4_ADDR(&r, ap_ip_addr0, ap_ip_addr1, ap_ip_addr2, ap_ip_addr3);
 8001e2a:	4b0c      	ldr	r3, [pc, #48]	; (8001e5c <dhcpserver_fn+0xa18>)
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	061a      	lsls	r2, r3, #24
 8001e30:	4b0b      	ldr	r3, [pc, #44]	; (8001e60 <dhcpserver_fn+0xa1c>)
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	041b      	lsls	r3, r3, #16
 8001e36:	431a      	orrs	r2, r3
 8001e38:	4b0a      	ldr	r3, [pc, #40]	; (8001e64 <dhcpserver_fn+0xa20>)
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	021b      	lsls	r3, r3, #8
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	4a09      	ldr	r2, [pc, #36]	; (8001e68 <dhcpserver_fn+0xa24>)
 8001e42:	7812      	ldrb	r2, [r2, #0]
 8001e44:	4313      	orrs	r3, r2
 8001e46:	061a      	lsls	r2, r3, #24
 8001e48:	e010      	b.n	8001e6c <dhcpserver_fn+0xa28>
 8001e4a:	bf00      	nop
 8001e4c:	200000a5 	.word	0x200000a5
 8001e50:	200000a6 	.word	0x200000a6
 8001e54:	200000a7 	.word	0x200000a7
 8001e58:	20000681 	.word	0x20000681
 8001e5c:	200000a2 	.word	0x200000a2
 8001e60:	200000a3 	.word	0x200000a3
 8001e64:	20000680 	.word	0x20000680
 8001e68:	200000a4 	.word	0x200000a4
 8001e6c:	4b67      	ldr	r3, [pc, #412]	; (800200c <dhcpserver_fn+0xbc8>)
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	0619      	lsls	r1, r3, #24
 8001e72:	4b67      	ldr	r3, [pc, #412]	; (8002010 <dhcpserver_fn+0xbcc>)
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	041b      	lsls	r3, r3, #16
 8001e78:	4319      	orrs	r1, r3
 8001e7a:	4b66      	ldr	r3, [pc, #408]	; (8002014 <dhcpserver_fn+0xbd0>)
 8001e7c:	781b      	ldrb	r3, [r3, #0]
 8001e7e:	021b      	lsls	r3, r3, #8
 8001e80:	430b      	orrs	r3, r1
 8001e82:	4965      	ldr	r1, [pc, #404]	; (8002018 <dhcpserver_fn+0xbd4>)
 8001e84:	7809      	ldrb	r1, [r1, #0]
 8001e86:	430b      	orrs	r3, r1
 8001e88:	021b      	lsls	r3, r3, #8
 8001e8a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001e8e:	431a      	orrs	r2, r3
 8001e90:	4b5e      	ldr	r3, [pc, #376]	; (800200c <dhcpserver_fn+0xbc8>)
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	0619      	lsls	r1, r3, #24
 8001e96:	4b5e      	ldr	r3, [pc, #376]	; (8002010 <dhcpserver_fn+0xbcc>)
 8001e98:	781b      	ldrb	r3, [r3, #0]
 8001e9a:	041b      	lsls	r3, r3, #16
 8001e9c:	4319      	orrs	r1, r3
 8001e9e:	4b5d      	ldr	r3, [pc, #372]	; (8002014 <dhcpserver_fn+0xbd0>)
 8001ea0:	781b      	ldrb	r3, [r3, #0]
 8001ea2:	021b      	lsls	r3, r3, #8
 8001ea4:	430b      	orrs	r3, r1
 8001ea6:	495c      	ldr	r1, [pc, #368]	; (8002018 <dhcpserver_fn+0xbd4>)
 8001ea8:	7809      	ldrb	r1, [r1, #0]
 8001eaa:	430b      	orrs	r3, r1
 8001eac:	0a1b      	lsrs	r3, r3, #8
 8001eae:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8001eb2:	431a      	orrs	r2, r3
 8001eb4:	4b55      	ldr	r3, [pc, #340]	; (800200c <dhcpserver_fn+0xbc8>)
 8001eb6:	781b      	ldrb	r3, [r3, #0]
 8001eb8:	0619      	lsls	r1, r3, #24
 8001eba:	4b55      	ldr	r3, [pc, #340]	; (8002010 <dhcpserver_fn+0xbcc>)
 8001ebc:	781b      	ldrb	r3, [r3, #0]
 8001ebe:	041b      	lsls	r3, r3, #16
 8001ec0:	4319      	orrs	r1, r3
 8001ec2:	4b54      	ldr	r3, [pc, #336]	; (8002014 <dhcpserver_fn+0xbd0>)
 8001ec4:	781b      	ldrb	r3, [r3, #0]
 8001ec6:	021b      	lsls	r3, r3, #8
 8001ec8:	430b      	orrs	r3, r1
 8001eca:	4953      	ldr	r1, [pc, #332]	; (8002018 <dhcpserver_fn+0xbd4>)
 8001ecc:	7809      	ldrb	r1, [r1, #0]
 8001ece:	430b      	orrs	r3, r1
 8001ed0:	0e1b      	lsrs	r3, r3, #24
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	613b      	str	r3, [r7, #16]
        pbuf_put_at(pbuf_out, options_offset, r.addr & 0xff);
 8001ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed8:	b29b      	uxth	r3, r3
 8001eda:	693a      	ldr	r2, [r7, #16]
 8001edc:	b2d2      	uxtb	r2, r2
 8001ede:	4619      	mov	r1, r3
 8001ee0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001ee2:	f00d f8ec 	bl	800f0be <pbuf_put_at>
        pbuf_put_at(pbuf_out, options_offset + 1, (r.addr >> 8) & 0xff);
 8001ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee8:	b29b      	uxth	r3, r3
 8001eea:	3301      	adds	r3, #1
 8001eec:	b299      	uxth	r1, r3
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	0a1b      	lsrs	r3, r3, #8
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	461a      	mov	r2, r3
 8001ef6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001ef8:	f00d f8e1 	bl	800f0be <pbuf_put_at>
        pbuf_put_at(pbuf_out, options_offset + 2, (r.addr >> 16) & 0xff);
 8001efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efe:	b29b      	uxth	r3, r3
 8001f00:	3302      	adds	r3, #2
 8001f02:	b299      	uxth	r1, r3
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	0c1b      	lsrs	r3, r3, #16
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001f0e:	f00d f8d6 	bl	800f0be <pbuf_put_at>
        pbuf_put_at(pbuf_out, options_offset + 3, (r.addr >> 24) & 0xff);
 8001f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f14:	b29b      	uxth	r3, r3
 8001f16:	3303      	adds	r3, #3
 8001f18:	b299      	uxth	r1, r3
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	0e1b      	lsrs	r3, r3, #24
 8001f1e:	b2db      	uxtb	r3, r3
 8001f20:	461a      	mov	r2, r3
 8001f22:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001f24:	f00d f8cb 	bl	800f0be <pbuf_put_at>
        options_offset += 4;
 8001f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2a:	3304      	adds	r3, #4
 8001f2c:	627b      	str	r3, [r7, #36]	; 0x24
        pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_END);
 8001f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f30:	b29b      	uxth	r3, r3
 8001f32:	22ff      	movs	r2, #255	; 0xff
 8001f34:	4619      	mov	r1, r3
 8001f36:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001f38:	f00d f8c1 	bl	800f0be <pbuf_put_at>
        options_offset++;
 8001f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f3e:	3301      	adds	r3, #1
 8001f40:	627b      	str	r3, [r7, #36]	; 0x24
 8001f42:	e03d      	b.n	8001fc0 <dhcpserver_fn+0xb7c>
        pbuf_put_at(pbuf_out, DHCP_COOKIE_OFS, (DHCP_MAGIC_COOKIE >> 24) & 0xff);
 8001f44:	2263      	movs	r2, #99	; 0x63
 8001f46:	21ec      	movs	r1, #236	; 0xec
 8001f48:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001f4a:	f00d f8b8 	bl	800f0be <pbuf_put_at>
        pbuf_put_at(pbuf_out, DHCP_COOKIE_OFS + 1, (DHCP_MAGIC_COOKIE >> 16) & 0xff);
 8001f4e:	2282      	movs	r2, #130	; 0x82
 8001f50:	21ed      	movs	r1, #237	; 0xed
 8001f52:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001f54:	f00d f8b3 	bl	800f0be <pbuf_put_at>
        pbuf_put_at(pbuf_out, DHCP_COOKIE_OFS + 2, (DHCP_MAGIC_COOKIE >> 8) & 0xff);
 8001f58:	2253      	movs	r2, #83	; 0x53
 8001f5a:	21ee      	movs	r1, #238	; 0xee
 8001f5c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001f5e:	f00d f8ae 	bl	800f0be <pbuf_put_at>
        pbuf_put_at(pbuf_out, DHCP_COOKIE_OFS + 3, (DHCP_MAGIC_COOKIE) & 0xff);
 8001f62:	2263      	movs	r2, #99	; 0x63
 8001f64:	21ef      	movs	r1, #239	; 0xef
 8001f66:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001f68:	f00d f8a9 	bl	800f0be <pbuf_put_at>
        options_offset = UDP_DHCP_OPTIONS_OFS;
 8001f6c:	23f0      	movs	r3, #240	; 0xf0
 8001f6e:	627b      	str	r3, [r7, #36]	; 0x24
        pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_MESSAGE_TYPE);
 8001f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f72:	b29b      	uxth	r3, r3
 8001f74:	2235      	movs	r2, #53	; 0x35
 8001f76:	4619      	mov	r1, r3
 8001f78:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001f7a:	f00d f8a0 	bl	800f0be <pbuf_put_at>
        options_offset++;
 8001f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f80:	3301      	adds	r3, #1
 8001f82:	627b      	str	r3, [r7, #36]	; 0x24
        pbuf_put_at(pbuf_out, options_offset, 1);
 8001f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f86:	b29b      	uxth	r3, r3
 8001f88:	2201      	movs	r2, #1
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001f8e:	f00d f896 	bl	800f0be <pbuf_put_at>
        options_offset++;
 8001f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f94:	3301      	adds	r3, #1
 8001f96:	627b      	str	r3, [r7, #36]	; 0x24
        pbuf_put_at(pbuf_out, options_offset, DHCP_NAK);
 8001f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9a:	b29b      	uxth	r3, r3
 8001f9c:	2206      	movs	r2, #6
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001fa2:	f00d f88c 	bl	800f0be <pbuf_put_at>
        options_offset++;
 8001fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa8:	3301      	adds	r3, #1
 8001faa:	627b      	str	r3, [r7, #36]	; 0x24
        pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_END);
 8001fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fae:	b29b      	uxth	r3, r3
 8001fb0:	22ff      	movs	r2, #255	; 0xff
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001fb6:	f00d f882 	bl	800f0be <pbuf_put_at>
        options_offset++;
 8001fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fbc:	3301      	adds	r3, #1
 8001fbe:	627b      	str	r3, [r7, #36]	; 0x24
      pbuf_realloc(pbuf_out, options_offset);
 8001fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc2:	b29b      	uxth	r3, r3
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001fc8:	f00c fad8 	bl	800e57c <pbuf_realloc>
      if (ERR_OK != udp_sendto(dhcp_pcb, pbuf_out, &client_ip_addr, DHCP_CLIENT_PORT)) {
 8001fcc:	4b13      	ldr	r3, [pc, #76]	; (800201c <dhcpserver_fn+0xbd8>)
 8001fce:	6818      	ldr	r0, [r3, #0]
 8001fd0:	f107 0214 	add.w	r2, r7, #20
 8001fd4:	2344      	movs	r3, #68	; 0x44
 8001fd6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001fd8:	f012 fdc4 	bl	8014b64 <udp_sendto>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
      break;
 8001fe0:	e006      	b.n	8001ff0 <dhcpserver_fn+0xbac>
    goto end_of_fcn;
 8001fe2:	bf00      	nop
 8001fe4:	e004      	b.n	8001ff0 <dhcpserver_fn+0xbac>
    goto end_of_fcn;
 8001fe6:	bf00      	nop
 8001fe8:	e002      	b.n	8001ff0 <dhcpserver_fn+0xbac>
    goto end_of_fcn;
 8001fea:	bf00      	nop
 8001fec:	e000      	b.n	8001ff0 <dhcpserver_fn+0xbac>
        goto end_of_fcn;
 8001fee:	bf00      	nop
  }

  end_of_fcn:
  if (pbuf_out) {
 8001ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d002      	beq.n	8001ffc <dhcpserver_fn+0xbb8>
    pbuf_free(pbuf_out);
 8001ff6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001ff8:	f00c fc46 	bl	800e888 <pbuf_free>
  }
  pbuf_free(pbuf_in);
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	f00c fc43 	bl	800e888 <pbuf_free>
}
 8002002:	bf00      	nop
 8002004:	3730      	adds	r7, #48	; 0x30
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	200000a2 	.word	0x200000a2
 8002010:	200000a3 	.word	0x200000a3
 8002014:	20000680 	.word	0x20000680
 8002018:	200000a4 	.word	0x200000a4
 800201c:	20000380 	.word	0x20000380

08002020 <dhcpserver_start_prv>:

/***************************************************************************//**
 * Start DHCP server callback.
 ******************************************************************************/
static void dhcpserver_start_prv(void * arg)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b084      	sub	sp, #16
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  //clear saved mac addresses
  for (uint32_t i = 0; i < DHCPS_MAX_CLIENT; ++i) {
 8002028:	2300      	movs	r3, #0
 800202a:	60fb      	str	r3, [r7, #12]
 800202c:	e03d      	b.n	80020aa <dhcpserver_start_prv+0x8a>
    saved_mac[i].addr[0] = 0;
 800202e:	4933      	ldr	r1, [pc, #204]	; (80020fc <dhcpserver_start_prv+0xdc>)
 8002030:	68fa      	ldr	r2, [r7, #12]
 8002032:	4613      	mov	r3, r2
 8002034:	005b      	lsls	r3, r3, #1
 8002036:	4413      	add	r3, r2
 8002038:	005b      	lsls	r3, r3, #1
 800203a:	440b      	add	r3, r1
 800203c:	2200      	movs	r2, #0
 800203e:	701a      	strb	r2, [r3, #0]
    saved_mac[i].addr[1] = 0;
 8002040:	492e      	ldr	r1, [pc, #184]	; (80020fc <dhcpserver_start_prv+0xdc>)
 8002042:	68fa      	ldr	r2, [r7, #12]
 8002044:	4613      	mov	r3, r2
 8002046:	005b      	lsls	r3, r3, #1
 8002048:	4413      	add	r3, r2
 800204a:	005b      	lsls	r3, r3, #1
 800204c:	440b      	add	r3, r1
 800204e:	3301      	adds	r3, #1
 8002050:	2200      	movs	r2, #0
 8002052:	701a      	strb	r2, [r3, #0]
    saved_mac[i].addr[2] = 0;
 8002054:	4929      	ldr	r1, [pc, #164]	; (80020fc <dhcpserver_start_prv+0xdc>)
 8002056:	68fa      	ldr	r2, [r7, #12]
 8002058:	4613      	mov	r3, r2
 800205a:	005b      	lsls	r3, r3, #1
 800205c:	4413      	add	r3, r2
 800205e:	005b      	lsls	r3, r3, #1
 8002060:	440b      	add	r3, r1
 8002062:	3302      	adds	r3, #2
 8002064:	2200      	movs	r2, #0
 8002066:	701a      	strb	r2, [r3, #0]
    saved_mac[i].addr[3] = 0;
 8002068:	4924      	ldr	r1, [pc, #144]	; (80020fc <dhcpserver_start_prv+0xdc>)
 800206a:	68fa      	ldr	r2, [r7, #12]
 800206c:	4613      	mov	r3, r2
 800206e:	005b      	lsls	r3, r3, #1
 8002070:	4413      	add	r3, r2
 8002072:	005b      	lsls	r3, r3, #1
 8002074:	440b      	add	r3, r1
 8002076:	3303      	adds	r3, #3
 8002078:	2200      	movs	r2, #0
 800207a:	701a      	strb	r2, [r3, #0]
    saved_mac[i].addr[4] = 0;
 800207c:	491f      	ldr	r1, [pc, #124]	; (80020fc <dhcpserver_start_prv+0xdc>)
 800207e:	68fa      	ldr	r2, [r7, #12]
 8002080:	4613      	mov	r3, r2
 8002082:	005b      	lsls	r3, r3, #1
 8002084:	4413      	add	r3, r2
 8002086:	005b      	lsls	r3, r3, #1
 8002088:	440b      	add	r3, r1
 800208a:	3304      	adds	r3, #4
 800208c:	2200      	movs	r2, #0
 800208e:	701a      	strb	r2, [r3, #0]
    saved_mac[i].addr[5] = 0;
 8002090:	491a      	ldr	r1, [pc, #104]	; (80020fc <dhcpserver_start_prv+0xdc>)
 8002092:	68fa      	ldr	r2, [r7, #12]
 8002094:	4613      	mov	r3, r2
 8002096:	005b      	lsls	r3, r3, #1
 8002098:	4413      	add	r3, r2
 800209a:	005b      	lsls	r3, r3, #1
 800209c:	440b      	add	r3, r1
 800209e:	3305      	adds	r3, #5
 80020a0:	2200      	movs	r2, #0
 80020a2:	701a      	strb	r2, [r3, #0]
  for (uint32_t i = 0; i < DHCPS_MAX_CLIENT; ++i) {
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	3301      	adds	r3, #1
 80020a8:	60fb      	str	r3, [r7, #12]
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	2b07      	cmp	r3, #7
 80020ae:	d9be      	bls.n	800202e <dhcpserver_start_prv+0xe>
  }

  if (NULL == dhcp_pcb) {
 80020b0:	4b13      	ldr	r3, [pc, #76]	; (8002100 <dhcpserver_start_prv+0xe0>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d11e      	bne.n	80020f6 <dhcpserver_start_prv+0xd6>
    dhcp_pcb = udp_new();
 80020b8:	f013 f8a4 	bl	8015204 <udp_new>
 80020bc:	4603      	mov	r3, r0
 80020be:	4a10      	ldr	r2, [pc, #64]	; (8002100 <dhcpserver_start_prv+0xe0>)
 80020c0:	6013      	str	r3, [r2, #0]
    if (NULL == dhcp_pcb) {
 80020c2:	4b0f      	ldr	r3, [pc, #60]	; (8002100 <dhcpserver_start_prv+0xe0>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d014      	beq.n	80020f4 <dhcpserver_start_prv+0xd4>
      return;
    }

    udp_bind(dhcp_pcb, IP_ADDR_ANY, DHCP_SERVER_PORT);
 80020ca:	4b0d      	ldr	r3, [pc, #52]	; (8002100 <dhcpserver_start_prv+0xe0>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	2243      	movs	r2, #67	; 0x43
 80020d0:	490c      	ldr	r1, [pc, #48]	; (8002104 <dhcpserver_start_prv+0xe4>)
 80020d2:	4618      	mov	r0, r3
 80020d4:	f012 fefc 	bl	8014ed0 <udp_bind>
    udp_bind_netif(dhcp_pcb, &ap_netif);
 80020d8:	4b09      	ldr	r3, [pc, #36]	; (8002100 <dhcpserver_start_prv+0xe0>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	490a      	ldr	r1, [pc, #40]	; (8002108 <dhcpserver_start_prv+0xe8>)
 80020de:	4618      	mov	r0, r3
 80020e0:	f012 ff7e 	bl	8014fe0 <udp_bind_netif>
    udp_recv(dhcp_pcb, dhcpserver_fn, 0);
 80020e4:	4b06      	ldr	r3, [pc, #24]	; (8002100 <dhcpserver_start_prv+0xe0>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	2200      	movs	r2, #0
 80020ea:	4908      	ldr	r1, [pc, #32]	; (800210c <dhcpserver_start_prv+0xec>)
 80020ec:	4618      	mov	r0, r3
 80020ee:	f013 f827 	bl	8015140 <udp_recv>
 80020f2:	e000      	b.n	80020f6 <dhcpserver_start_prv+0xd6>
      return;
 80020f4:	bf00      	nop
  }
}
 80020f6:	3710      	adds	r7, #16
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	20000384 	.word	0x20000384
 8002100:	20000380 	.word	0x20000380
 8002104:	0806a428 	.word	0x0806a428
 8002108:	20000610 	.word	0x20000610
 800210c:	08001445 	.word	0x08001445

08002110 <dhcpserver_start>:

/***************************************************************************//**
 * Start DHCP server.
 ******************************************************************************/
void dhcpserver_start(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	af00      	add	r7, sp, #0
  tcpip_callback(dhcpserver_start_prv, 0);
 8002114:	2100      	movs	r1, #0
 8002116:	4802      	ldr	r0, [pc, #8]	; (8002120 <dhcpserver_start+0x10>)
 8002118:	f00a fdbc 	bl	800cc94 <tcpip_callback>
}
 800211c:	bf00      	nop
 800211e:	bd80      	pop	{r7, pc}
 8002120:	08002021 	.word	0x08002021

08002124 <dhcpserver_stop_prv>:

/***************************************************************************//**
 * Stop DHCP server callback.
 ******************************************************************************/
static void dhcpserver_stop_prv(void * arg)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b082      	sub	sp, #8
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  if (dhcp_pcb != NULL) {
 800212c:	4b0a      	ldr	r3, [pc, #40]	; (8002158 <dhcpserver_stop_prv+0x34>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d00c      	beq.n	800214e <dhcpserver_stop_prv+0x2a>
    udp_disconnect(dhcp_pcb);
 8002134:	4b08      	ldr	r3, [pc, #32]	; (8002158 <dhcpserver_stop_prv+0x34>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4618      	mov	r0, r3
 800213a:	f012 ffd9 	bl	80150f0 <udp_disconnect>
    udp_remove(dhcp_pcb);
 800213e:	4b06      	ldr	r3, [pc, #24]	; (8002158 <dhcpserver_stop_prv+0x34>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4618      	mov	r0, r3
 8002144:	f013 f81c 	bl	8015180 <udp_remove>
    dhcp_pcb = NULL;
 8002148:	4b03      	ldr	r3, [pc, #12]	; (8002158 <dhcpserver_stop_prv+0x34>)
 800214a:	2200      	movs	r2, #0
 800214c:	601a      	str	r2, [r3, #0]
  }
}
 800214e:	bf00      	nop
 8002150:	3708      	adds	r7, #8
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	20000380 	.word	0x20000380

0800215c <dhcpserver_stop>:

/***************************************************************************//**
 * Stop DHCP server.
 ******************************************************************************/
void dhcpserver_stop(void)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	af00      	add	r7, sp, #0
  tcpip_callback(dhcpserver_stop_prv, 0);
 8002160:	2100      	movs	r1, #0
 8002162:	4802      	ldr	r0, [pc, #8]	; (800216c <dhcpserver_stop+0x10>)
 8002164:	f00a fd96 	bl	800cc94 <tcpip_callback>
}
 8002168:	bf00      	nop
 800216a:	bd80      	pop	{r7, pc}
 800216c:	08002125 	.word	0x08002125

08002170 <low_level_init>:
 * @param[in] netif: the already initialized lwip network interface structure
 *
 * @return
 *    None
 ******************************************************************************/
static void low_level_init (struct netif *netif) {
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  /* set netif MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2206      	movs	r2, #6
 800217c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  
  /* Check which netif is initialized and set netif MAC hardware address */
  if (memcmp(netif->name, STATION_NETIF, 2) == 0) {
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	3332      	adds	r3, #50	; 0x32
 8002184:	2202      	movs	r2, #2
 8002186:	491b      	ldr	r1, [pc, #108]	; (80021f4 <low_level_init+0x84>)
 8002188:	4618      	mov	r0, r3
 800218a:	f017 fdb3 	bl	8019cf4 <memcmp>
 800218e:	4603      	mov	r3, r0
 8002190:	2b00      	cmp	r3, #0
 8002192:	d10a      	bne.n	80021aa <low_level_init+0x3a>
    memcpy(netif->hwaddr, wifi_context.mac_addr_0.octet, 6);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 800219a:	4b17      	ldr	r3, [pc, #92]	; (80021f8 <low_level_init+0x88>)
 800219c:	f203 2316 	addw	r3, r3, #534	; 0x216
 80021a0:	6819      	ldr	r1, [r3, #0]
 80021a2:	6011      	str	r1, [r2, #0]
 80021a4:	889b      	ldrh	r3, [r3, #4]
 80021a6:	8093      	strh	r3, [r2, #4]
 80021a8:	e009      	b.n	80021be <low_level_init+0x4e>
  } else {
    memcpy(netif->hwaddr, wifi_context.mac_addr_1.octet, 6);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 80021b0:	4b11      	ldr	r3, [pc, #68]	; (80021f8 <low_level_init+0x88>)
 80021b2:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 80021b6:	6818      	ldr	r0, [r3, #0]
 80021b8:	6010      	str	r0, [r2, #0]
 80021ba:	889b      	ldrh	r3, [r3, #4]
 80021bc:	8093      	strh	r3, [r2, #4]
  }

  /* Set netif maximum transfer unit */
  netif->mtu = 1500;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80021c4:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80021cc:	f043 030a 	orr.w	r3, r3, #10
 80021d0:	b2da      	uxtb	r2, r3
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  /* Set netif link flag */
  netif->flags |= NETIF_FLAG_LINK_UP;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80021de:	f043 0304 	orr.w	r3, r3, #4
 80021e2:	b2da      	uxtb	r2, r3
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
}
 80021ea:	bf00      	nop
 80021ec:	3708      	adds	r7, #8
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	0801b274 	.word	0x0801b274
 80021f8:	200003b4 	.word	0x200003b4

080021fc <low_level_output>:
 * @param[in] p: the packet to send
 *
 * @return
 *    ERR_OK if successful
 ******************************************************************************/
static err_t low_level_output (struct netif *netif, struct pbuf *p) {
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b086      	sub	sp, #24
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
 8002204:	6039      	str	r1, [r7, #0]
  uint8_t *buffer;
  sl_wfx_packet_queue_item_t *queue_item;
  sl_status_t result;
  
  /* Take TX queue mutex */
  xSemaphoreTake(sl_wfx_tx_queue_mutex, portMAX_DELAY);
 8002206:	4b37      	ldr	r3, [pc, #220]	; (80022e4 <low_level_output+0xe8>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f04f 31ff 	mov.w	r1, #4294967295
 800220e:	4618      	mov	r0, r3
 8002210:	f008 f826 	bl	800a260 <xQueueSemaphoreTake>

  /* Allocate a buffer for a queue item */
  result = sl_wfx_allocate_command_buffer((sl_wfx_generic_message_t**)(&queue_item),
                                          SL_WFX_SEND_FRAME_REQ_ID,
                                          SL_WFX_TX_FRAME_BUFFER,
                                          p->tot_len + sizeof(sl_wfx_packet_queue_item_t));
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	891b      	ldrh	r3, [r3, #8]
 8002218:	3318      	adds	r3, #24
  result = sl_wfx_allocate_command_buffer((sl_wfx_generic_message_t**)(&queue_item),
 800221a:	f107 0008 	add.w	r0, r7, #8
 800221e:	2200      	movs	r2, #0
 8002220:	214a      	movs	r1, #74	; 0x4a
 8002222:	f005 feb7 	bl	8007f94 <sl_wfx_allocate_command_buffer>
 8002226:	60f8      	str	r0, [r7, #12]
  
  if ((result != SL_STATUS_OK) || (queue_item == NULL)) {
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d102      	bne.n	8002234 <low_level_output+0x38>
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d109      	bne.n	8002248 <low_level_output+0x4c>
	  /* Release TX queue mutex */
	    xSemaphoreGive(sl_wfx_tx_queue_mutex);
 8002234:	4b2b      	ldr	r3, [pc, #172]	; (80022e4 <low_level_output+0xe8>)
 8002236:	6818      	ldr	r0, [r3, #0]
 8002238:	2300      	movs	r3, #0
 800223a:	2200      	movs	r2, #0
 800223c:	2100      	movs	r1, #0
 800223e:	f007 fd09 	bl	8009c54 <xQueueGenericSend>
    return ERR_MEM;
 8002242:	f04f 33ff 	mov.w	r3, #4294967295
 8002246:	e049      	b.n	80022dc <low_level_output+0xe0>
  }

  buffer = queue_item->buffer.body.packet_data;
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	3318      	adds	r3, #24
 800224c:	613b      	str	r3, [r7, #16]
  
  for (q = p; q != NULL; q = q->next) {
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	617b      	str	r3, [r7, #20]
 8002252:	e010      	b.n	8002276 <low_level_output+0x7a>
    /* Copy the bytes */
    memcpy(buffer, q->payload, q->len);
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	6859      	ldr	r1, [r3, #4]
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	895b      	ldrh	r3, [r3, #10]
 800225c:	461a      	mov	r2, r3
 800225e:	6938      	ldr	r0, [r7, #16]
 8002260:	f017 fd58 	bl	8019d14 <memcpy>
    buffer += q->len;
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	895b      	ldrh	r3, [r3, #10]
 8002268:	461a      	mov	r2, r3
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	4413      	add	r3, r2
 800226e:	613b      	str	r3, [r7, #16]
  for (q = p; q != NULL; q = q->next) {
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	617b      	str	r3, [r7, #20]
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d1eb      	bne.n	8002254 <low_level_output+0x58>
  }

  /* Provide the data length the interface information to the pbuf */
  queue_item->interface = (memcmp(netif->name, STATION_NETIF, 2) == 0)?  SL_WFX_STA_INTERFACE : SL_WFX_SOFTAP_INTERFACE;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	3332      	adds	r3, #50	; 0x32
 8002280:	2202      	movs	r2, #2
 8002282:	4919      	ldr	r1, [pc, #100]	; (80022e8 <low_level_output+0xec>)
 8002284:	4618      	mov	r0, r3
 8002286:	f017 fd35 	bl	8019cf4 <memcmp>
 800228a:	4603      	mov	r3, r0
 800228c:	2b00      	cmp	r3, #0
 800228e:	bf14      	ite	ne
 8002290:	2301      	movne	r3, #1
 8002292:	2300      	moveq	r3, #0
 8002294:	b2da      	uxtb	r2, r3
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	711a      	strb	r2, [r3, #4]
  queue_item->data_length = p->tot_len;
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	891a      	ldrh	r2, [r3, #8]
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	609a      	str	r2, [r3, #8]
  
  /* Determine if there is anything on the tx packet queue */
  if (sl_wfx_tx_queue_context.head_ptr != NULL) {
 80022a2:	4b12      	ldr	r3, [pc, #72]	; (80022ec <low_level_output+0xf0>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d004      	beq.n	80022b4 <low_level_output+0xb8>
    sl_wfx_tx_queue_context.tail_ptr->next = queue_item;
 80022aa:	4b10      	ldr	r3, [pc, #64]	; (80022ec <low_level_output+0xf0>)
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	68ba      	ldr	r2, [r7, #8]
 80022b0:	601a      	str	r2, [r3, #0]
 80022b2:	e002      	b.n	80022ba <low_level_output+0xbe>
  } else {
    /* If tx packet queue is empty, setup head & tail pointers */
    sl_wfx_tx_queue_context.head_ptr = queue_item;
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	4a0d      	ldr	r2, [pc, #52]	; (80022ec <low_level_output+0xf0>)
 80022b8:	6013      	str	r3, [r2, #0]
  }
  
  /* Update the tail pointer */
  sl_wfx_tx_queue_context.tail_ptr = queue_item;
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	4a0b      	ldr	r2, [pc, #44]	; (80022ec <low_level_output+0xf0>)
 80022be:	6053      	str	r3, [r2, #4]
  
  /* Notify that a TX frame is ready */
  xEventGroupSetBits(sl_wfx_event_group, SL_WFX_TX_PACKET_AVAILABLE);
 80022c0:	4b0b      	ldr	r3, [pc, #44]	; (80022f0 <low_level_output+0xf4>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	2101      	movs	r1, #1
 80022c6:	4618      	mov	r0, r3
 80022c8:	f007 fa66 	bl	8009798 <xEventGroupSetBits>
  
  /* Release TX queue mutex */
  xSemaphoreGive(sl_wfx_tx_queue_mutex);
 80022cc:	4b05      	ldr	r3, [pc, #20]	; (80022e4 <low_level_output+0xe8>)
 80022ce:	6818      	ldr	r0, [r3, #0]
 80022d0:	2300      	movs	r3, #0
 80022d2:	2200      	movs	r2, #0
 80022d4:	2100      	movs	r1, #0
 80022d6:	f007 fcbd 	bl	8009c54 <xQueueGenericSend>
  
  return ERR_OK;
 80022da:	2300      	movs	r3, #0
}
 80022dc:	4618      	mov	r0, r3
 80022de:	3718      	adds	r7, #24
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	20001264 	.word	0x20001264
 80022e8:	0801b274 	.word	0x0801b274
 80022ec:	20001268 	.word	0x20001268
 80022f0:	20001260 	.word	0x20001260

080022f4 <low_level_input>:
 * @param[in] rx_buffer: the ethernet frame received by the wf200
 *
 * @return
 *    LwIP pbuf filled with received packet, or NULL on error
 ******************************************************************************/
static struct pbuf *low_level_input (struct netif *netif, sl_wfx_received_ind_t* rx_buffer) {
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b086      	sub	sp, #24
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	6039      	str	r1, [r7, #0]
  struct pbuf *p, *q;
  uint8_t *buffer;
  
  /* Obtain the packet by removing the padding. */
  buffer = (uint8_t *)&(rx_buffer->body.frame[rx_buffer->body.frame_padding]);
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	795b      	ldrb	r3, [r3, #5]
 8002302:	461a      	mov	r2, r3
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	4413      	add	r3, r2
 8002308:	3308      	adds	r3, #8
 800230a:	60fb      	str	r3, [r7, #12]
 
  if (rx_buffer->body.frame_length > 0) {
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	88db      	ldrh	r3, [r3, #6]
 8002310:	b29b      	uxth	r3, r3
 8002312:	2b00      	cmp	r3, #0
 8002314:	d009      	beq.n	800232a <low_level_input+0x36>
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, rx_buffer->body.frame_length, PBUF_POOL);
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	88db      	ldrh	r3, [r3, #6]
 800231a:	b29b      	uxth	r3, r3
 800231c:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8002320:	4619      	mov	r1, r3
 8002322:	2000      	movs	r0, #0
 8002324:	f00b ffc8 	bl	800e2b8 <pbuf_alloc>
 8002328:	6178      	str	r0, [r7, #20]
  }
  
  if (p != NULL) {
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d016      	beq.n	800235e <low_level_input+0x6a>
    for (q = p; q != NULL; q = q->next) {
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	613b      	str	r3, [r7, #16]
 8002334:	e010      	b.n	8002358 <low_level_input+0x64>
      /* Copy remaining data in pbuf */
      memcpy(q->payload, buffer, q->len);
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	6858      	ldr	r0, [r3, #4]
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	895b      	ldrh	r3, [r3, #10]
 800233e:	461a      	mov	r2, r3
 8002340:	68f9      	ldr	r1, [r7, #12]
 8002342:	f017 fce7 	bl	8019d14 <memcpy>
      buffer += q->len;
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	895b      	ldrh	r3, [r3, #10]
 800234a:	461a      	mov	r2, r3
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	4413      	add	r3, r2
 8002350:	60fb      	str	r3, [r7, #12]
    for (q = p; q != NULL; q = q->next) {
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	613b      	str	r3, [r7, #16]
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d1eb      	bne.n	8002336 <low_level_input+0x42>
    }
  }  
   
  return p;
 800235e:	697b      	ldr	r3, [r7, #20]
}
 8002360:	4618      	mov	r0, r3
 8002362:	3718      	adds	r7, #24
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}

08002368 <sl_wfx_host_received_frame_callback>:
 * @param[in] rx_buffer: the ethernet frame received by the wf200
 *
 * @return
 *    None
******************************************************************************/
void sl_wfx_host_received_frame_callback (sl_wfx_received_ind_t* rx_buffer) {
 8002368:	b580      	push	{r7, lr}
 800236a:	b084      	sub	sp, #16
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif;
  
  /* Check packet interface to send to AP or STA interface */
  if ((rx_buffer->header.info & SL_WFX_MSG_INFO_INTERFACE_MASK) == 
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	78db      	ldrb	r3, [r3, #3]
 8002374:	f003 0306 	and.w	r3, r3, #6
 8002378:	2b00      	cmp	r3, #0
 800237a:	d102      	bne.n	8002382 <sl_wfx_host_received_frame_callback+0x1a>
     (SL_WFX_STA_INTERFACE << SL_WFX_MSG_INFO_INTERFACE_OFFSET)) {
    /* Send to station interface */
    netif = &sta_netif;
 800237c:	4b0f      	ldr	r3, [pc, #60]	; (80023bc <sl_wfx_host_received_frame_callback+0x54>)
 800237e:	60fb      	str	r3, [r7, #12]
 8002380:	e001      	b.n	8002386 <sl_wfx_host_received_frame_callback+0x1e>
  } else {
    /* Send to softAP interface */
    netif = &ap_netif;
 8002382:	4b0f      	ldr	r3, [pc, #60]	; (80023c0 <sl_wfx_host_received_frame_callback+0x58>)
 8002384:	60fb      	str	r3, [r7, #12]
  }

  if (netif != NULL) {
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d012      	beq.n	80023b2 <sl_wfx_host_received_frame_callback+0x4a>
    p = low_level_input(netif, rx_buffer);
 800238c:	6879      	ldr	r1, [r7, #4]
 800238e:	68f8      	ldr	r0, [r7, #12]
 8002390:	f7ff ffb0 	bl	80022f4 <low_level_input>
 8002394:	60b8      	str	r0, [r7, #8]
    if (p != NULL) {
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d00a      	beq.n	80023b2 <sl_wfx_host_received_frame_callback+0x4a>
      if (netif->input(p, netif) != ERR_OK) {
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	691b      	ldr	r3, [r3, #16]
 80023a0:	68f9      	ldr	r1, [r7, #12]
 80023a2:	68b8      	ldr	r0, [r7, #8]
 80023a4:	4798      	blx	r3
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d002      	beq.n	80023b2 <sl_wfx_host_received_frame_callback+0x4a>
        pbuf_free(p);
 80023ac:	68b8      	ldr	r0, [r7, #8]
 80023ae:	f00c fa6b 	bl	800e888 <pbuf_free>
      }
    }
  }
}
 80023b2:	bf00      	nop
 80023b4:	3710      	adds	r7, #16
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	200005d8 	.word	0x200005d8
 80023c0:	20000610 	.word	0x20000610

080023c4 <sta_ethernetif_init>:
 * @param[in] netif: the lwip network interface structure
 *
 * @return
 *    ERR_OK if successful
 ******************************************************************************/
err_t sta_ethernetif_init (struct netif *netif) {
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b082      	sub	sp, #8
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d105      	bne.n	80023de <sta_ethernetif_init+0x1a>
 80023d2:	4b0d      	ldr	r3, [pc, #52]	; (8002408 <sta_ethernetif_init+0x44>)
 80023d4:	22dc      	movs	r2, #220	; 0xdc
 80023d6:	490d      	ldr	r1, [pc, #52]	; (800240c <sta_ethernetif_init+0x48>)
 80023d8:	480d      	ldr	r0, [pc, #52]	; (8002410 <sta_ethernetif_init+0x4c>)
 80023da:	f017 fd91 	bl	8019f00 <iprintf>

  /* Set the netif name to identify the interface */
  memcpy(netif->name, STATION_NETIF, 2);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	3332      	adds	r3, #50	; 0x32
 80023e2:	2202      	movs	r2, #2
 80023e4:	490b      	ldr	r1, [pc, #44]	; (8002414 <sta_ethernetif_init+0x50>)
 80023e6:	4618      	mov	r0, r3
 80023e8:	f017 fc94 	bl	8019d14 <memcpy>

  netif->output = etharp_output;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	4a0a      	ldr	r2, [pc, #40]	; (8002418 <sta_ethernetif_init+0x54>)
 80023f0:	615a      	str	r2, [r3, #20]
  netif->linkoutput = low_level_output;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4a09      	ldr	r2, [pc, #36]	; (800241c <sta_ethernetif_init+0x58>)
 80023f6:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80023f8:	6878      	ldr	r0, [r7, #4]
 80023fa:	f7ff feb9 	bl	8002170 <low_level_init>
  
  return ERR_OK;
 80023fe:	2300      	movs	r3, #0
}
 8002400:	4618      	mov	r0, r3
 8002402:	3708      	adds	r7, #8
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}
 8002408:	0801b278 	.word	0x0801b278
 800240c:	0801b294 	.word	0x0801b294
 8002410:	0801b2a4 	.word	0x0801b2a4
 8002414:	0801b274 	.word	0x0801b274
 8002418:	08017965 	.word	0x08017965
 800241c:	080021fd 	.word	0x080021fd

08002420 <sys_now>:
  low_level_init(netif);
  
  return ERR_OK;
}

u32_t sys_now (void) {
 8002420:	b580      	push	{r7, lr}
 8002422:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8002424:	f001 f8fc 	bl	8003620 <HAL_GetTick>
 8002428:	4603      	mov	r3, r0
}
 800242a:	4618      	mov	r0, r3
 800242c:	bd80      	pop	{r7, pc}
	...

08002430 <lwip_start_task_entry>:
 *    not used
 *
 * @return
 *    none
 ******************************************************************************/
static void lwip_start_task_entry (void const * argument) {
 8002430:	b5b0      	push	{r4, r5, r7, lr}
 8002432:	b088      	sub	sp, #32
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  /* Create tcp_ip stack thread */
  tcpip_init(NULL, NULL);
 8002438:	2100      	movs	r1, #0
 800243a:	2000      	movs	r0, #0
 800243c:	f00a fcb8 	bl	800cdb0 <tcpip_init>

  /* Initialize the LwIP stack */
  netif_config();
 8002440:	f000 f886 	bl	8002550 <netif_config>
#endif
#ifdef LWIP_IPERF_SERVER
  lwiperf_start_tcp_server_default(lwip_iperf_results,0);
#endif

  if (use_dhcp_client) {
 8002444:	4b0b      	ldr	r3, [pc, #44]	; (8002474 <lwip_start_task_entry+0x44>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d00d      	beq.n	8002468 <lwip_start_task_entry+0x38>
    /* Start DHCP Client */
    osThreadDef(DHCP, dhcpclient_start, osPriorityLow, 0, configMINIMAL_STACK_SIZE * 2);
 800244c:	4b0a      	ldr	r3, [pc, #40]	; (8002478 <lwip_start_task_entry+0x48>)
 800244e:	f107 040c 	add.w	r4, r7, #12
 8002452:	461d      	mov	r5, r3
 8002454:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002456:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002458:	682b      	ldr	r3, [r5, #0]
 800245a:	6023      	str	r3, [r4, #0]
    osThreadCreate (osThread(DHCP), &sta_netif);
 800245c:	f107 030c 	add.w	r3, r7, #12
 8002460:	4906      	ldr	r1, [pc, #24]	; (800247c <lwip_start_task_entry+0x4c>)
 8002462:	4618      	mov	r0, r3
 8002464:	f006 fef7 	bl	8009256 <osThreadCreate>
  }

  wifi_autoconnexion_init();
 8002468:	f7fe fb2a 	bl	8000ac0 <wifi_autoconnexion_init>

	while(1) {
    /* Delete the Init Thread */
    osThreadTerminate(NULL);
 800246c:	2000      	movs	r0, #0
 800246e:	f006 ff19 	bl	80092a4 <osThreadTerminate>
 8002472:	e7fb      	b.n	800246c <lwip_start_task_entry+0x3c>
 8002474:	20000098 	.word	0x20000098
 8002478:	0801b2e4 	.word	0x0801b2e4
 800247c:	200005d8 	.word	0x200005d8

08002480 <lwip_set_sta_link_up>:
 *    none
 *
 * @return
 *    none
 ******************************************************************************/
void lwip_set_sta_link_up (void) {
 8002480:	b580      	push	{r7, lr}
 8002482:	af00      	add	r7, sp, #0
  netifapi_netif_set_up(&sta_netif);
 8002484:	2200      	movs	r2, #0
 8002486:	4909      	ldr	r1, [pc, #36]	; (80024ac <lwip_set_sta_link_up+0x2c>)
 8002488:	4809      	ldr	r0, [pc, #36]	; (80024b0 <lwip_set_sta_link_up+0x30>)
 800248a:	f00a facd 	bl	800ca28 <netifapi_netif_common>
  netifapi_netif_set_link_up(&sta_netif);
 800248e:	2200      	movs	r2, #0
 8002490:	4908      	ldr	r1, [pc, #32]	; (80024b4 <lwip_set_sta_link_up+0x34>)
 8002492:	4807      	ldr	r0, [pc, #28]	; (80024b0 <lwip_set_sta_link_up+0x30>)
 8002494:	f00a fac8 	bl	800ca28 <netifapi_netif_common>
  if (use_dhcp_client) {
 8002498:	4b07      	ldr	r3, [pc, #28]	; (80024b8 <lwip_set_sta_link_up+0x38>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d002      	beq.n	80024a6 <lwip_set_sta_link_up+0x26>
    dhcpclient_set_link_state(1);
 80024a0:	2001      	movs	r0, #1
 80024a2:	f7fe fbf9 	bl	8000c98 <dhcpclient_set_link_state>
  }
}
 80024a6:	bf00      	nop
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	0800df3d 	.word	0x0800df3d
 80024b0:	200005d8 	.word	0x200005d8
 80024b4:	0800e079 	.word	0x0800e079
 80024b8:	20000098 	.word	0x20000098

080024bc <lwip_set_sta_link_down>:
 *    none
 *
 * @return
 *    none
******************************************************************************/
void lwip_set_sta_link_down (void) {
 80024bc:	b580      	push	{r7, lr}
 80024be:	af00      	add	r7, sp, #0
  if (use_dhcp_client) {
 80024c0:	4b09      	ldr	r3, [pc, #36]	; (80024e8 <lwip_set_sta_link_down+0x2c>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d002      	beq.n	80024ce <lwip_set_sta_link_down+0x12>
    dhcpclient_set_link_state(0);
 80024c8:	2000      	movs	r0, #0
 80024ca:	f7fe fbe5 	bl	8000c98 <dhcpclient_set_link_state>
  }
  netifapi_netif_set_link_down(&sta_netif);
 80024ce:	2200      	movs	r2, #0
 80024d0:	4906      	ldr	r1, [pc, #24]	; (80024ec <lwip_set_sta_link_down+0x30>)
 80024d2:	4807      	ldr	r0, [pc, #28]	; (80024f0 <lwip_set_sta_link_down+0x34>)
 80024d4:	f00a faa8 	bl	800ca28 <netifapi_netif_common>
  netifapi_netif_set_down(&sta_netif);
 80024d8:	2200      	movs	r2, #0
 80024da:	4906      	ldr	r1, [pc, #24]	; (80024f4 <lwip_set_sta_link_down+0x38>)
 80024dc:	4804      	ldr	r0, [pc, #16]	; (80024f0 <lwip_set_sta_link_down+0x34>)
 80024de:	f00a faa3 	bl	800ca28 <netifapi_netif_common>
}
 80024e2:	bf00      	nop
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	20000098 	.word	0x20000098
 80024ec:	0800e0e9 	.word	0x0800e0e9
 80024f0:	200005d8 	.word	0x200005d8
 80024f4:	0800e015 	.word	0x0800e015

080024f8 <lwip_set_ap_link_up>:
 *    none
 *
 * @return
 *    none
 ******************************************************************************/
void lwip_set_ap_link_up (void) {
 80024f8:	b580      	push	{r7, lr}
 80024fa:	af00      	add	r7, sp, #0
  netifapi_netif_set_up(&ap_netif);
 80024fc:	2200      	movs	r2, #0
 80024fe:	4906      	ldr	r1, [pc, #24]	; (8002518 <lwip_set_ap_link_up+0x20>)
 8002500:	4806      	ldr	r0, [pc, #24]	; (800251c <lwip_set_ap_link_up+0x24>)
 8002502:	f00a fa91 	bl	800ca28 <netifapi_netif_common>
  netifapi_netif_set_link_up(&ap_netif);
 8002506:	2200      	movs	r2, #0
 8002508:	4905      	ldr	r1, [pc, #20]	; (8002520 <lwip_set_ap_link_up+0x28>)
 800250a:	4804      	ldr	r0, [pc, #16]	; (800251c <lwip_set_ap_link_up+0x24>)
 800250c:	f00a fa8c 	bl	800ca28 <netifapi_netif_common>
  dhcpserver_start();
 8002510:	f7ff fdfe 	bl	8002110 <dhcpserver_start>
}
 8002514:	bf00      	nop
 8002516:	bd80      	pop	{r7, pc}
 8002518:	0800df3d 	.word	0x0800df3d
 800251c:	20000610 	.word	0x20000610
 8002520:	0800e079 	.word	0x0800e079

08002524 <lwip_set_ap_link_down>:
 *    none
 *
 * @return
 *    none
 ******************************************************************************/
void lwip_set_ap_link_down (void) {
 8002524:	b580      	push	{r7, lr}
 8002526:	af00      	add	r7, sp, #0
  dhcpserver_stop();
 8002528:	f7ff fe18 	bl	800215c <dhcpserver_stop>
  netifapi_netif_set_link_down(&ap_netif);
 800252c:	2200      	movs	r2, #0
 800252e:	4905      	ldr	r1, [pc, #20]	; (8002544 <lwip_set_ap_link_down+0x20>)
 8002530:	4805      	ldr	r0, [pc, #20]	; (8002548 <lwip_set_ap_link_down+0x24>)
 8002532:	f00a fa79 	bl	800ca28 <netifapi_netif_common>
  netifapi_netif_set_down(&ap_netif);
 8002536:	2200      	movs	r2, #0
 8002538:	4904      	ldr	r1, [pc, #16]	; (800254c <lwip_set_ap_link_down+0x28>)
 800253a:	4803      	ldr	r0, [pc, #12]	; (8002548 <lwip_set_ap_link_down+0x24>)
 800253c:	f00a fa74 	bl	800ca28 <netifapi_netif_common>
}
 8002540:	bf00      	nop
 8002542:	bd80      	pop	{r7, pc}
 8002544:	0800e0e9 	.word	0x0800e0e9
 8002548:	20000610 	.word	0x20000610
 800254c:	0800e015 	.word	0x0800e015

08002550 <netif_config>:
 *    none
 *
 * @return
*    0: initialization success, -1: an error occurred
 ******************************************************************************/
static int netif_config(void) {
 8002550:	b580      	push	{r7, lr}
 8002552:	b08c      	sub	sp, #48	; 0x30
 8002554:	af04      	add	r7, sp, #16
  sl_status_t status;
  ip_addr_t sta_ipaddr, ap_ipaddr;
  ip_addr_t sta_netmask, ap_netmask;
  ip_addr_t sta_gw, ap_gw;
  int res = -1;
 8002556:	f04f 33ff 	mov.w	r3, #4294967295
 800255a:	61fb      	str	r3, [r7, #28]
  /* Initialize the Station information */
  if (use_dhcp_client) {
 800255c:	4b9e      	ldr	r3, [pc, #632]	; (80027d8 <netif_config+0x288>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d006      	beq.n	8002572 <netif_config+0x22>
    ip_addr_set_zero_ip4(&sta_ipaddr);
 8002564:	2300      	movs	r3, #0
 8002566:	617b      	str	r3, [r7, #20]
    ip_addr_set_zero_ip4(&sta_netmask);
 8002568:	2300      	movs	r3, #0
 800256a:	60fb      	str	r3, [r7, #12]
    ip_addr_set_zero_ip4(&sta_gw);
 800256c:	2300      	movs	r3, #0
 800256e:	607b      	str	r3, [r7, #4]
 8002570:	e0cb      	b.n	800270a <netif_config+0x1ba>
  } else {
    IP_ADDR4(&sta_ipaddr,sta_ip_addr0,sta_ip_addr1,sta_ip_addr2,sta_ip_addr3);
 8002572:	4b9a      	ldr	r3, [pc, #616]	; (80027dc <netif_config+0x28c>)
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	061a      	lsls	r2, r3, #24
 8002578:	4b99      	ldr	r3, [pc, #612]	; (80027e0 <netif_config+0x290>)
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	041b      	lsls	r3, r3, #16
 800257e:	431a      	orrs	r2, r3
 8002580:	4b98      	ldr	r3, [pc, #608]	; (80027e4 <netif_config+0x294>)
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	021b      	lsls	r3, r3, #8
 8002586:	4313      	orrs	r3, r2
 8002588:	4a97      	ldr	r2, [pc, #604]	; (80027e8 <netif_config+0x298>)
 800258a:	7812      	ldrb	r2, [r2, #0]
 800258c:	4313      	orrs	r3, r2
 800258e:	061a      	lsls	r2, r3, #24
 8002590:	4b92      	ldr	r3, [pc, #584]	; (80027dc <netif_config+0x28c>)
 8002592:	781b      	ldrb	r3, [r3, #0]
 8002594:	0619      	lsls	r1, r3, #24
 8002596:	4b92      	ldr	r3, [pc, #584]	; (80027e0 <netif_config+0x290>)
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	041b      	lsls	r3, r3, #16
 800259c:	4319      	orrs	r1, r3
 800259e:	4b91      	ldr	r3, [pc, #580]	; (80027e4 <netif_config+0x294>)
 80025a0:	781b      	ldrb	r3, [r3, #0]
 80025a2:	021b      	lsls	r3, r3, #8
 80025a4:	430b      	orrs	r3, r1
 80025a6:	4990      	ldr	r1, [pc, #576]	; (80027e8 <netif_config+0x298>)
 80025a8:	7809      	ldrb	r1, [r1, #0]
 80025aa:	430b      	orrs	r3, r1
 80025ac:	021b      	lsls	r3, r3, #8
 80025ae:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80025b2:	431a      	orrs	r2, r3
 80025b4:	4b89      	ldr	r3, [pc, #548]	; (80027dc <netif_config+0x28c>)
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	0619      	lsls	r1, r3, #24
 80025ba:	4b89      	ldr	r3, [pc, #548]	; (80027e0 <netif_config+0x290>)
 80025bc:	781b      	ldrb	r3, [r3, #0]
 80025be:	041b      	lsls	r3, r3, #16
 80025c0:	4319      	orrs	r1, r3
 80025c2:	4b88      	ldr	r3, [pc, #544]	; (80027e4 <netif_config+0x294>)
 80025c4:	781b      	ldrb	r3, [r3, #0]
 80025c6:	021b      	lsls	r3, r3, #8
 80025c8:	430b      	orrs	r3, r1
 80025ca:	4987      	ldr	r1, [pc, #540]	; (80027e8 <netif_config+0x298>)
 80025cc:	7809      	ldrb	r1, [r1, #0]
 80025ce:	430b      	orrs	r3, r1
 80025d0:	0a1b      	lsrs	r3, r3, #8
 80025d2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80025d6:	431a      	orrs	r2, r3
 80025d8:	4b80      	ldr	r3, [pc, #512]	; (80027dc <netif_config+0x28c>)
 80025da:	781b      	ldrb	r3, [r3, #0]
 80025dc:	0619      	lsls	r1, r3, #24
 80025de:	4b80      	ldr	r3, [pc, #512]	; (80027e0 <netif_config+0x290>)
 80025e0:	781b      	ldrb	r3, [r3, #0]
 80025e2:	041b      	lsls	r3, r3, #16
 80025e4:	4319      	orrs	r1, r3
 80025e6:	4b7f      	ldr	r3, [pc, #508]	; (80027e4 <netif_config+0x294>)
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	021b      	lsls	r3, r3, #8
 80025ec:	430b      	orrs	r3, r1
 80025ee:	497e      	ldr	r1, [pc, #504]	; (80027e8 <netif_config+0x298>)
 80025f0:	7809      	ldrb	r1, [r1, #0]
 80025f2:	430b      	orrs	r3, r1
 80025f4:	0e1b      	lsrs	r3, r3, #24
 80025f6:	4313      	orrs	r3, r2
 80025f8:	617b      	str	r3, [r7, #20]
    IP_ADDR4(&sta_netmask,sta_netmask_addr0,sta_netmask_addr1,sta_netmask_addr2,sta_netmask_addr3);
 80025fa:	4b7c      	ldr	r3, [pc, #496]	; (80027ec <netif_config+0x29c>)
 80025fc:	781b      	ldrb	r3, [r3, #0]
 80025fe:	061a      	lsls	r2, r3, #24
 8002600:	4b7b      	ldr	r3, [pc, #492]	; (80027f0 <netif_config+0x2a0>)
 8002602:	781b      	ldrb	r3, [r3, #0]
 8002604:	041b      	lsls	r3, r3, #16
 8002606:	431a      	orrs	r2, r3
 8002608:	4b7a      	ldr	r3, [pc, #488]	; (80027f4 <netif_config+0x2a4>)
 800260a:	781b      	ldrb	r3, [r3, #0]
 800260c:	021b      	lsls	r3, r3, #8
 800260e:	4313      	orrs	r3, r2
 8002610:	4a79      	ldr	r2, [pc, #484]	; (80027f8 <netif_config+0x2a8>)
 8002612:	7812      	ldrb	r2, [r2, #0]
 8002614:	4313      	orrs	r3, r2
 8002616:	061a      	lsls	r2, r3, #24
 8002618:	4b74      	ldr	r3, [pc, #464]	; (80027ec <netif_config+0x29c>)
 800261a:	781b      	ldrb	r3, [r3, #0]
 800261c:	0619      	lsls	r1, r3, #24
 800261e:	4b74      	ldr	r3, [pc, #464]	; (80027f0 <netif_config+0x2a0>)
 8002620:	781b      	ldrb	r3, [r3, #0]
 8002622:	041b      	lsls	r3, r3, #16
 8002624:	4319      	orrs	r1, r3
 8002626:	4b73      	ldr	r3, [pc, #460]	; (80027f4 <netif_config+0x2a4>)
 8002628:	781b      	ldrb	r3, [r3, #0]
 800262a:	021b      	lsls	r3, r3, #8
 800262c:	430b      	orrs	r3, r1
 800262e:	4972      	ldr	r1, [pc, #456]	; (80027f8 <netif_config+0x2a8>)
 8002630:	7809      	ldrb	r1, [r1, #0]
 8002632:	430b      	orrs	r3, r1
 8002634:	021b      	lsls	r3, r3, #8
 8002636:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800263a:	431a      	orrs	r2, r3
 800263c:	4b6b      	ldr	r3, [pc, #428]	; (80027ec <netif_config+0x29c>)
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	0619      	lsls	r1, r3, #24
 8002642:	4b6b      	ldr	r3, [pc, #428]	; (80027f0 <netif_config+0x2a0>)
 8002644:	781b      	ldrb	r3, [r3, #0]
 8002646:	041b      	lsls	r3, r3, #16
 8002648:	4319      	orrs	r1, r3
 800264a:	4b6a      	ldr	r3, [pc, #424]	; (80027f4 <netif_config+0x2a4>)
 800264c:	781b      	ldrb	r3, [r3, #0]
 800264e:	021b      	lsls	r3, r3, #8
 8002650:	430b      	orrs	r3, r1
 8002652:	4969      	ldr	r1, [pc, #420]	; (80027f8 <netif_config+0x2a8>)
 8002654:	7809      	ldrb	r1, [r1, #0]
 8002656:	430b      	orrs	r3, r1
 8002658:	0a1b      	lsrs	r3, r3, #8
 800265a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800265e:	431a      	orrs	r2, r3
 8002660:	4b62      	ldr	r3, [pc, #392]	; (80027ec <netif_config+0x29c>)
 8002662:	781b      	ldrb	r3, [r3, #0]
 8002664:	0619      	lsls	r1, r3, #24
 8002666:	4b62      	ldr	r3, [pc, #392]	; (80027f0 <netif_config+0x2a0>)
 8002668:	781b      	ldrb	r3, [r3, #0]
 800266a:	041b      	lsls	r3, r3, #16
 800266c:	4319      	orrs	r1, r3
 800266e:	4b61      	ldr	r3, [pc, #388]	; (80027f4 <netif_config+0x2a4>)
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	021b      	lsls	r3, r3, #8
 8002674:	430b      	orrs	r3, r1
 8002676:	4960      	ldr	r1, [pc, #384]	; (80027f8 <netif_config+0x2a8>)
 8002678:	7809      	ldrb	r1, [r1, #0]
 800267a:	430b      	orrs	r3, r1
 800267c:	0e1b      	lsrs	r3, r3, #24
 800267e:	4313      	orrs	r3, r2
 8002680:	60fb      	str	r3, [r7, #12]
    IP_ADDR4(&sta_gw,sta_gw_addr0,sta_gw_addr1,sta_gw_addr2,sta_gw_addr3);
 8002682:	4b5e      	ldr	r3, [pc, #376]	; (80027fc <netif_config+0x2ac>)
 8002684:	781b      	ldrb	r3, [r3, #0]
 8002686:	061a      	lsls	r2, r3, #24
 8002688:	4b5d      	ldr	r3, [pc, #372]	; (8002800 <netif_config+0x2b0>)
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	041b      	lsls	r3, r3, #16
 800268e:	431a      	orrs	r2, r3
 8002690:	4b5c      	ldr	r3, [pc, #368]	; (8002804 <netif_config+0x2b4>)
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	021b      	lsls	r3, r3, #8
 8002696:	4313      	orrs	r3, r2
 8002698:	4a5b      	ldr	r2, [pc, #364]	; (8002808 <netif_config+0x2b8>)
 800269a:	7812      	ldrb	r2, [r2, #0]
 800269c:	4313      	orrs	r3, r2
 800269e:	061a      	lsls	r2, r3, #24
 80026a0:	4b56      	ldr	r3, [pc, #344]	; (80027fc <netif_config+0x2ac>)
 80026a2:	781b      	ldrb	r3, [r3, #0]
 80026a4:	0619      	lsls	r1, r3, #24
 80026a6:	4b56      	ldr	r3, [pc, #344]	; (8002800 <netif_config+0x2b0>)
 80026a8:	781b      	ldrb	r3, [r3, #0]
 80026aa:	041b      	lsls	r3, r3, #16
 80026ac:	4319      	orrs	r1, r3
 80026ae:	4b55      	ldr	r3, [pc, #340]	; (8002804 <netif_config+0x2b4>)
 80026b0:	781b      	ldrb	r3, [r3, #0]
 80026b2:	021b      	lsls	r3, r3, #8
 80026b4:	430b      	orrs	r3, r1
 80026b6:	4954      	ldr	r1, [pc, #336]	; (8002808 <netif_config+0x2b8>)
 80026b8:	7809      	ldrb	r1, [r1, #0]
 80026ba:	430b      	orrs	r3, r1
 80026bc:	021b      	lsls	r3, r3, #8
 80026be:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80026c2:	431a      	orrs	r2, r3
 80026c4:	4b4d      	ldr	r3, [pc, #308]	; (80027fc <netif_config+0x2ac>)
 80026c6:	781b      	ldrb	r3, [r3, #0]
 80026c8:	0619      	lsls	r1, r3, #24
 80026ca:	4b4d      	ldr	r3, [pc, #308]	; (8002800 <netif_config+0x2b0>)
 80026cc:	781b      	ldrb	r3, [r3, #0]
 80026ce:	041b      	lsls	r3, r3, #16
 80026d0:	4319      	orrs	r1, r3
 80026d2:	4b4c      	ldr	r3, [pc, #304]	; (8002804 <netif_config+0x2b4>)
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	021b      	lsls	r3, r3, #8
 80026d8:	430b      	orrs	r3, r1
 80026da:	494b      	ldr	r1, [pc, #300]	; (8002808 <netif_config+0x2b8>)
 80026dc:	7809      	ldrb	r1, [r1, #0]
 80026de:	430b      	orrs	r3, r1
 80026e0:	0a1b      	lsrs	r3, r3, #8
 80026e2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80026e6:	431a      	orrs	r2, r3
 80026e8:	4b44      	ldr	r3, [pc, #272]	; (80027fc <netif_config+0x2ac>)
 80026ea:	781b      	ldrb	r3, [r3, #0]
 80026ec:	0619      	lsls	r1, r3, #24
 80026ee:	4b44      	ldr	r3, [pc, #272]	; (8002800 <netif_config+0x2b0>)
 80026f0:	781b      	ldrb	r3, [r3, #0]
 80026f2:	041b      	lsls	r3, r3, #16
 80026f4:	4319      	orrs	r1, r3
 80026f6:	4b43      	ldr	r3, [pc, #268]	; (8002804 <netif_config+0x2b4>)
 80026f8:	781b      	ldrb	r3, [r3, #0]
 80026fa:	021b      	lsls	r3, r3, #8
 80026fc:	430b      	orrs	r3, r1
 80026fe:	4942      	ldr	r1, [pc, #264]	; (8002808 <netif_config+0x2b8>)
 8002700:	7809      	ldrb	r1, [r1, #0]
 8002702:	430b      	orrs	r3, r1
 8002704:	0e1b      	lsrs	r3, r3, #24
 8002706:	4313      	orrs	r3, r2
 8002708:	607b      	str	r3, [r7, #4]




  /* Initialize the WF200 used by the two interfaces */
  status = sl_wfx_init(&wifi_context);
 800270a:	4840      	ldr	r0, [pc, #256]	; (800280c <netif_config+0x2bc>)
 800270c:	f004 fbfa 	bl	8006f04 <sl_wfx_init>
 8002710:	61b8      	str	r0, [r7, #24]
  switch (status) {
 8002712:	69bb      	ldr	r3, [r7, #24]
 8002714:	f640 3202 	movw	r2, #2818	; 0xb02
 8002718:	4293      	cmp	r3, r2
 800271a:	d034      	beq.n	8002786 <netif_config+0x236>
 800271c:	69bb      	ldr	r3, [r7, #24]
 800271e:	f640 3202 	movw	r2, #2818	; 0xb02
 8002722:	4293      	cmp	r3, r2
 8002724:	d83b      	bhi.n	800279e <netif_config+0x24e>
 8002726:	69bb      	ldr	r3, [r7, #24]
 8002728:	f640 3201 	movw	r2, #2817	; 0xb01
 800272c:	4293      	cmp	r3, r2
 800272e:	d026      	beq.n	800277e <netif_config+0x22e>
 8002730:	69bb      	ldr	r3, [r7, #24]
 8002732:	f640 3201 	movw	r2, #2817	; 0xb01
 8002736:	4293      	cmp	r3, r2
 8002738:	d831      	bhi.n	800279e <netif_config+0x24e>
 800273a:	69bb      	ldr	r3, [r7, #24]
 800273c:	2b07      	cmp	r3, #7
 800273e:	d026      	beq.n	800278e <netif_config+0x23e>
 8002740:	69bb      	ldr	r3, [r7, #24]
 8002742:	2b07      	cmp	r3, #7
 8002744:	d82b      	bhi.n	800279e <netif_config+0x24e>
 8002746:	69bb      	ldr	r3, [r7, #24]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d003      	beq.n	8002754 <netif_config+0x204>
 800274c:	69bb      	ldr	r3, [r7, #24]
 800274e:	2b01      	cmp	r3, #1
 8002750:	d021      	beq.n	8002796 <netif_config+0x246>
 8002752:	e024      	b.n	800279e <netif_config+0x24e>
  case SL_STATUS_OK:
    wifi_context.state = SL_WFX_STARTED;
 8002754:	4b2d      	ldr	r3, [pc, #180]	; (800280c <netif_config+0x2bc>)
 8002756:	2201      	movs	r2, #1
 8002758:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222
    printf("WF200 initialization successful V%d.%d.%d\r\n", wifi_context.firmware_major,
 800275c:	4b2b      	ldr	r3, [pc, #172]	; (800280c <netif_config+0x2bc>)
 800275e:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8002762:	4619      	mov	r1, r3
    		wifi_context.firmware_minor,
 8002764:	4b29      	ldr	r3, [pc, #164]	; (800280c <netif_config+0x2bc>)
 8002766:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
    printf("WF200 initialization successful V%d.%d.%d\r\n", wifi_context.firmware_major,
 800276a:	461a      	mov	r2, r3
			wifi_context.firmware_build);
 800276c:	4b27      	ldr	r3, [pc, #156]	; (800280c <netif_config+0x2bc>)
 800276e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
    printf("WF200 initialization successful V%d.%d.%d\r\n", wifi_context.firmware_major,
 8002772:	4827      	ldr	r0, [pc, #156]	; (8002810 <netif_config+0x2c0>)
 8002774:	f017 fbc4 	bl	8019f00 <iprintf>
    res = 0;
 8002778:	2300      	movs	r3, #0
 800277a:	61fb      	str	r3, [r7, #28]
    break;
 800277c:	e012      	b.n	80027a4 <netif_config+0x254>
  case SL_STATUS_WIFI_INVALID_KEY:
    printf("Failed to init WF200: Firmware keyset invalid\r\n");
 800277e:	4825      	ldr	r0, [pc, #148]	; (8002814 <netif_config+0x2c4>)
 8002780:	f017 fc44 	bl	801a00c <puts>
    break;
 8002784:	e00e      	b.n	80027a4 <netif_config+0x254>
  case SL_STATUS_WIFI_FIRMWARE_DOWNLOAD_TIMEOUT:
    printf("Failed to init WF200: Firmware download timeout\r\n");
 8002786:	4824      	ldr	r0, [pc, #144]	; (8002818 <netif_config+0x2c8>)
 8002788:	f017 fc40 	bl	801a00c <puts>
    break;
 800278c:	e00a      	b.n	80027a4 <netif_config+0x254>
  case SL_STATUS_TIMEOUT:
    printf("Failed to init WF200: Poll for value timeout\r\n");
 800278e:	4823      	ldr	r0, [pc, #140]	; (800281c <netif_config+0x2cc>)
 8002790:	f017 fc3c 	bl	801a00c <puts>
    break;
 8002794:	e006      	b.n	80027a4 <netif_config+0x254>
  case SL_STATUS_FAIL:
    printf("Failed to init WF200: Error\r\n");
 8002796:	4822      	ldr	r0, [pc, #136]	; (8002820 <netif_config+0x2d0>)
 8002798:	f017 fc38 	bl	801a00c <puts>
    break;
 800279c:	e002      	b.n	80027a4 <netif_config+0x254>
  default :
    printf("Failed to init WF200: Unknown error\r\n");
 800279e:	4821      	ldr	r0, [pc, #132]	; (8002824 <netif_config+0x2d4>)
 80027a0:	f017 fc34 	bl	801a00c <puts>
  }

  if (res == 0) {
 80027a4:	69fb      	ldr	r3, [r7, #28]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d110      	bne.n	80027cc <netif_config+0x27c>
    /* Add station and softAP interfaces */
    netif_add(&sta_netif, &sta_ipaddr, &sta_netmask, &sta_gw, NULL, &sta_ethernetif_init, &tcpip_input);
 80027aa:	1d3b      	adds	r3, r7, #4
 80027ac:	f107 020c 	add.w	r2, r7, #12
 80027b0:	f107 0114 	add.w	r1, r7, #20
 80027b4:	481c      	ldr	r0, [pc, #112]	; (8002828 <netif_config+0x2d8>)
 80027b6:	9002      	str	r0, [sp, #8]
 80027b8:	481c      	ldr	r0, [pc, #112]	; (800282c <netif_config+0x2dc>)
 80027ba:	9001      	str	r0, [sp, #4]
 80027bc:	2000      	movs	r0, #0
 80027be:	9000      	str	r0, [sp, #0]
 80027c0:	481b      	ldr	r0, [pc, #108]	; (8002830 <netif_config+0x2e0>)
 80027c2:	f00b f9f1 	bl	800dba8 <netif_add>
    //netif_add(&ap_netif, &ap_ipaddr, &ap_netmask, &ap_gw, NULL, &ap_ethernetif_init, &tcpip_input);

    /* Registers the default network interface */
    netif_set_default(&sta_netif);
 80027c6:	481a      	ldr	r0, [pc, #104]	; (8002830 <netif_config+0x2e0>)
 80027c8:	f00b fba8 	bl	800df1c <netif_set_default>
  wifi_cli_cfg_dialog();
#else
  //sl_wfx_start_ap_command(softap_channel, (uint8_t*) softap_ssid, strlen(softap_ssid), 0, 0, softap_security, 0, (uint8_t*) softap_passkey, strlen(softap_passkey), NULL, 0, NULL, 0);
#endif
  
  return res;
 80027cc:	69fb      	ldr	r3, [r7, #28]
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3720      	adds	r7, #32
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	20000098 	.word	0x20000098
 80027dc:	2000009c 	.word	0x2000009c
 80027e0:	2000009d 	.word	0x2000009d
 80027e4:	2000067a 	.word	0x2000067a
 80027e8:	2000009e 	.word	0x2000009e
 80027ec:	2000009f 	.word	0x2000009f
 80027f0:	200000a0 	.word	0x200000a0
 80027f4:	200000a1 	.word	0x200000a1
 80027f8:	2000067b 	.word	0x2000067b
 80027fc:	2000067c 	.word	0x2000067c
 8002800:	2000067d 	.word	0x2000067d
 8002804:	2000067e 	.word	0x2000067e
 8002808:	2000067f 	.word	0x2000067f
 800280c:	200003b4 	.word	0x200003b4
 8002810:	0801b2f8 	.word	0x0801b2f8
 8002814:	0801b324 	.word	0x0801b324
 8002818:	0801b354 	.word	0x0801b354
 800281c:	0801b388 	.word	0x0801b388
 8002820:	0801b3b8 	.word	0x0801b3b8
 8002824:	0801b3d8 	.word	0x0801b3d8
 8002828:	0800cc51 	.word	0x0800cc51
 800282c:	080023c5 	.word	0x080023c5
 8002830:	200005d8 	.word	0x200005d8

08002834 <lwip_start>:
 *    none
 *
 * @return
 *    none
 ******************************************************************************/
void lwip_start (void) {
 8002834:	b5b0      	push	{r4, r5, r7, lr}
 8002836:	b086      	sub	sp, #24
 8002838:	af00      	add	r7, sp, #0
  osThreadDef(lwip_start, lwip_start_task_entry, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*5);
 800283a:	4b08      	ldr	r3, [pc, #32]	; (800285c <lwip_start+0x28>)
 800283c:	1d3c      	adds	r4, r7, #4
 800283e:	461d      	mov	r5, r3
 8002840:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002842:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002844:	682b      	ldr	r3, [r5, #0]
 8002846:	6023      	str	r3, [r4, #0]
  osThreadCreate(osThread(lwip_start), NULL);
 8002848:	1d3b      	adds	r3, r7, #4
 800284a:	2100      	movs	r1, #0
 800284c:	4618      	mov	r0, r3
 800284e:	f006 fd02 	bl	8009256 <osThreadCreate>
}
 8002852:	bf00      	nop
 8002854:	3718      	adds	r7, #24
 8002856:	46bd      	mov	sp, r7
 8002858:	bdb0      	pop	{r4, r5, r7, pc}
 800285a:	bf00      	nop
 800285c:	0801b400 	.word	0x0801b400

08002860 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	af00      	add	r7, sp, #0

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002864:	f000 fe76 	bl	8003554 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8002868:	f000 f820 	bl	80028ac <SystemClock_Config>

    /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800286c:	f000 f926 	bl	8002abc <MX_GPIO_Init>
  MX_DMA_Init();
 8002870:	f000 f8fc 	bl	8002a6c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8002874:	f000 f8d0 	bl	8002a18 <MX_USART2_UART_Init>
  //MX_SPI1_Init(); THIS WILL BE HANDLE BY THE SL_WFX_DRIVER --> SL_WFX_INIT()
  MX_SPI4_Init();
 8002878:	f000 f896 	bl	80029a8 <MX_SPI4_Init>

  /* Clear the console and buffer */
  printf("\033\143");
 800287c:	4808      	ldr	r0, [pc, #32]	; (80028a0 <main+0x40>)
 800287e:	f017 fb3f 	bl	8019f00 <iprintf>
  printf("\033[3J");
 8002882:	4808      	ldr	r0, [pc, #32]	; (80028a4 <main+0x44>)
 8002884:	f017 fb3c 	bl	8019f00 <iprintf>
  printf("Hello, welcome to the WFM200 driver \r\n");
 8002888:	4807      	ldr	r0, [pc, #28]	; (80028a8 <main+0x48>)
 800288a:	f017 fbbf 	bl	801a00c <puts>


#ifndef spi_mode_only
  /* Task init */
//  vTraceEnable(TRC_START);
  sl_wfx_task_start();
 800288e:	f006 fbc9 	bl	8009024 <sl_wfx_task_start>
  wifi_events_start();
 8002892:	f006 fa59 	bl	8008d48 <wifi_events_start>
  //wifi_cli_start();					/*NOT GOING TO USE THE CLI SINCE THERE WILL NOT BE ANY USART CONNECTION*/
  lwip_start();
 8002896:	f7ff ffcd 	bl	8002834 <lwip_start>

#endif


  /* Start scheduler */
  osKernelStart();
 800289a:	f006 fcc5 	bl	8009228 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800289e:	e7fe      	b.n	800289e <main+0x3e>
 80028a0:	0801b414 	.word	0x0801b414
 80028a4:	0801b418 	.word	0x0801b418
 80028a8:	0801b420 	.word	0x0801b420

080028ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b094      	sub	sp, #80	; 0x50
 80028b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80028b2:	f107 0320 	add.w	r3, r7, #32
 80028b6:	2230      	movs	r2, #48	; 0x30
 80028b8:	2100      	movs	r1, #0
 80028ba:	4618      	mov	r0, r3
 80028bc:	f017 fa38 	bl	8019d30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80028c0:	f107 030c 	add.w	r3, r7, #12
 80028c4:	2200      	movs	r2, #0
 80028c6:	601a      	str	r2, [r3, #0]
 80028c8:	605a      	str	r2, [r3, #4]
 80028ca:	609a      	str	r2, [r3, #8]
 80028cc:	60da      	str	r2, [r3, #12]
 80028ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80028d0:	2300      	movs	r3, #0
 80028d2:	60bb      	str	r3, [r7, #8]
 80028d4:	4b31      	ldr	r3, [pc, #196]	; (800299c <SystemClock_Config+0xf0>)
 80028d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d8:	4a30      	ldr	r2, [pc, #192]	; (800299c <SystemClock_Config+0xf0>)
 80028da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028de:	6413      	str	r3, [r2, #64]	; 0x40
 80028e0:	4b2e      	ldr	r3, [pc, #184]	; (800299c <SystemClock_Config+0xf0>)
 80028e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028e8:	60bb      	str	r3, [r7, #8]
 80028ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80028ec:	2300      	movs	r3, #0
 80028ee:	607b      	str	r3, [r7, #4]
 80028f0:	4b2b      	ldr	r3, [pc, #172]	; (80029a0 <SystemClock_Config+0xf4>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a2a      	ldr	r2, [pc, #168]	; (80029a0 <SystemClock_Config+0xf4>)
 80028f6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80028fa:	6013      	str	r3, [r2, #0]
 80028fc:	4b28      	ldr	r3, [pc, #160]	; (80029a0 <SystemClock_Config+0xf4>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002904:	607b      	str	r3, [r7, #4]
 8002906:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002908:	2301      	movs	r3, #1
 800290a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800290c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002910:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002912:	2302      	movs	r3, #2
 8002914:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002916:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800291a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800291c:	2308      	movs	r3, #8
 800291e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 8002920:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8002924:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002926:	2304      	movs	r3, #4
 8002928:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800292a:	2304      	movs	r3, #4
 800292c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800292e:	f107 0320 	add.w	r3, r7, #32
 8002932:	4618      	mov	r0, r3
 8002934:	f001 ffd8 	bl	80048e8 <HAL_RCC_OscConfig>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d001      	beq.n	8002942 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800293e:	f000 f97b 	bl	8002c38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002942:	230f      	movs	r3, #15
 8002944:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002946:	2302      	movs	r3, #2
 8002948:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800294a:	2300      	movs	r3, #0
 800294c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800294e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002952:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002954:	2300      	movs	r3, #0
 8002956:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002958:	f107 030c 	add.w	r3, r7, #12
 800295c:	2103      	movs	r1, #3
 800295e:	4618      	mov	r0, r3
 8002960:	f002 fa3a 	bl	8004dd8 <HAL_RCC_ClockConfig>
 8002964:	4603      	mov	r3, r0
 8002966:	2b00      	cmp	r3, #0
 8002968:	d001      	beq.n	800296e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800296a:	f000 f965 	bl	8002c38 <Error_Handler>
  }

  /**Configure the Systick interrupt time*/
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800296e:	f002 fc1f 	bl	80051b0 <HAL_RCC_GetHCLKFreq>
 8002972:	4603      	mov	r3, r0
 8002974:	4a0b      	ldr	r2, [pc, #44]	; (80029a4 <SystemClock_Config+0xf8>)
 8002976:	fba2 2303 	umull	r2, r3, r2, r3
 800297a:	099b      	lsrs	r3, r3, #6
 800297c:	4618      	mov	r0, r3
 800297e:	f000 ffb6 	bl	80038ee <HAL_SYSTICK_Config>

	  /**Configure the Systick */
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002982:	2004      	movs	r0, #4
 8002984:	f000 ffc0 	bl	8003908 <HAL_SYSTICK_CLKSourceConfig>

	/* SysTick_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8002988:	2200      	movs	r2, #0
 800298a:	210f      	movs	r1, #15
 800298c:	f04f 30ff 	mov.w	r0, #4294967295
 8002990:	f000 ff75 	bl	800387e <HAL_NVIC_SetPriority>

}
 8002994:	bf00      	nop
 8002996:	3750      	adds	r7, #80	; 0x50
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}
 800299c:	40023800 	.word	0x40023800
 80029a0:	40007000 	.word	0x40007000
 80029a4:	10624dd3 	.word	0x10624dd3

080029a8 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	af00      	add	r7, sp, #0

  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 80029ac:	4b18      	ldr	r3, [pc, #96]	; (8002a10 <MX_SPI4_Init+0x68>)
 80029ae:	4a19      	ldr	r2, [pc, #100]	; (8002a14 <MX_SPI4_Init+0x6c>)
 80029b0:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80029b2:	4b17      	ldr	r3, [pc, #92]	; (8002a10 <MX_SPI4_Init+0x68>)
 80029b4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80029b8:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80029ba:	4b15      	ldr	r3, [pc, #84]	; (8002a10 <MX_SPI4_Init+0x68>)
 80029bc:	2200      	movs	r2, #0
 80029be:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_16BIT;
 80029c0:	4b13      	ldr	r3, [pc, #76]	; (8002a10 <MX_SPI4_Init+0x68>)
 80029c2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80029c6:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 80029c8:	4b11      	ldr	r3, [pc, #68]	; (8002a10 <MX_SPI4_Init+0x68>)
 80029ca:	2200      	movs	r2, #0
 80029cc:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 80029ce:	4b10      	ldr	r3, [pc, #64]	; (8002a10 <MX_SPI4_Init+0x68>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80029d4:	4b0e      	ldr	r3, [pc, #56]	; (8002a10 <MX_SPI4_Init+0x68>)
 80029d6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80029da:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80029dc:	4b0c      	ldr	r3, [pc, #48]	; (8002a10 <MX_SPI4_Init+0x68>)
 80029de:	2200      	movs	r2, #0
 80029e0:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80029e2:	4b0b      	ldr	r3, [pc, #44]	; (8002a10 <MX_SPI4_Init+0x68>)
 80029e4:	2200      	movs	r2, #0
 80029e6:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80029e8:	4b09      	ldr	r3, [pc, #36]	; (8002a10 <MX_SPI4_Init+0x68>)
 80029ea:	2200      	movs	r2, #0
 80029ec:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029ee:	4b08      	ldr	r3, [pc, #32]	; (8002a10 <MX_SPI4_Init+0x68>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 80029f4:	4b06      	ldr	r3, [pc, #24]	; (8002a10 <MX_SPI4_Init+0x68>)
 80029f6:	220a      	movs	r2, #10
 80029f8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80029fa:	4805      	ldr	r0, [pc, #20]	; (8002a10 <MX_SPI4_Init+0x68>)
 80029fc:	f002 fc0c 	bl	8005218 <HAL_SPI_Init>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d001      	beq.n	8002a0a <MX_SPI4_Init+0x62>
  {
	Error_Handler();
 8002a06:	f000 f917 	bl	8002c38 <Error_Handler>
  }
}
 8002a0a:	bf00      	nop
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	200006c8 	.word	0x200006c8
 8002a14:	40013400 	.word	0x40013400

08002a18 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8002a1c:	4b11      	ldr	r3, [pc, #68]	; (8002a64 <MX_USART2_UART_Init+0x4c>)
 8002a1e:	4a12      	ldr	r2, [pc, #72]	; (8002a68 <MX_USART2_UART_Init+0x50>)
 8002a20:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 921600;
 8002a22:	4b10      	ldr	r3, [pc, #64]	; (8002a64 <MX_USART2_UART_Init+0x4c>)
 8002a24:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8002a28:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002a2a:	4b0e      	ldr	r3, [pc, #56]	; (8002a64 <MX_USART2_UART_Init+0x4c>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002a30:	4b0c      	ldr	r3, [pc, #48]	; (8002a64 <MX_USART2_UART_Init+0x4c>)
 8002a32:	2200      	movs	r2, #0
 8002a34:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002a36:	4b0b      	ldr	r3, [pc, #44]	; (8002a64 <MX_USART2_UART_Init+0x4c>)
 8002a38:	2200      	movs	r2, #0
 8002a3a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002a3c:	4b09      	ldr	r3, [pc, #36]	; (8002a64 <MX_USART2_UART_Init+0x4c>)
 8002a3e:	220c      	movs	r2, #12
 8002a40:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a42:	4b08      	ldr	r3, [pc, #32]	; (8002a64 <MX_USART2_UART_Init+0x4c>)
 8002a44:	2200      	movs	r2, #0
 8002a46:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a48:	4b06      	ldr	r3, [pc, #24]	; (8002a64 <MX_USART2_UART_Init+0x4c>)
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002a4e:	4805      	ldr	r0, [pc, #20]	; (8002a64 <MX_USART2_UART_Init+0x4c>)
 8002a50:	f003 fbfa 	bl	8006248 <HAL_UART_Init>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d001      	beq.n	8002a5e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002a5a:	f000 f8ed 	bl	8002c38 <Error_Handler>
  }
}
 8002a5e:	bf00      	nop
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop
 8002a64:	20000684 	.word	0x20000684
 8002a68:	40004400 	.word	0x40004400

08002a6c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b082      	sub	sp, #8
 8002a70:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002a72:	2300      	movs	r3, #0
 8002a74:	607b      	str	r3, [r7, #4]
 8002a76:	4b10      	ldr	r3, [pc, #64]	; (8002ab8 <MX_DMA_Init+0x4c>)
 8002a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7a:	4a0f      	ldr	r2, [pc, #60]	; (8002ab8 <MX_DMA_Init+0x4c>)
 8002a7c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002a80:	6313      	str	r3, [r2, #48]	; 0x30
 8002a82:	4b0d      	ldr	r3, [pc, #52]	; (8002ab8 <MX_DMA_Init+0x4c>)
 8002a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a8a:	607b      	str	r3, [r7, #4]
 8002a8c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */

  /* SPI4 */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8002a8e:	2200      	movs	r2, #0
 8002a90:	2100      	movs	r1, #0
 8002a92:	2039      	movs	r0, #57	; 0x39
 8002a94:	f000 fef3 	bl	800387e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8002a98:	2039      	movs	r0, #57	; 0x39
 8002a9a:	f000 ff0c 	bl	80038b6 <HAL_NVIC_EnableIRQ>

  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	2100      	movs	r1, #0
 8002aa2:	203b      	movs	r0, #59	; 0x3b
 8002aa4:	f000 feeb 	bl	800387e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8002aa8:	203b      	movs	r0, #59	; 0x3b
 8002aaa:	f000 ff04 	bl	80038b6 <HAL_NVIC_EnableIRQ>


}
 8002aae:	bf00      	nop
 8002ab0:	3708      	adds	r7, #8
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	40023800 	.word	0x40023800

08002abc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b08a      	sub	sp, #40	; 0x28
 8002ac0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ac2:	f107 0314 	add.w	r3, r7, #20
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	601a      	str	r2, [r3, #0]
 8002aca:	605a      	str	r2, [r3, #4]
 8002acc:	609a      	str	r2, [r3, #8]
 8002ace:	60da      	str	r2, [r3, #12]
 8002ad0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	613b      	str	r3, [r7, #16]
 8002ad6:	4b4b      	ldr	r3, [pc, #300]	; (8002c04 <MX_GPIO_Init+0x148>)
 8002ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ada:	4a4a      	ldr	r2, [pc, #296]	; (8002c04 <MX_GPIO_Init+0x148>)
 8002adc:	f043 0304 	orr.w	r3, r3, #4
 8002ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ae2:	4b48      	ldr	r3, [pc, #288]	; (8002c04 <MX_GPIO_Init+0x148>)
 8002ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae6:	f003 0304 	and.w	r3, r3, #4
 8002aea:	613b      	str	r3, [r7, #16]
 8002aec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002aee:	2300      	movs	r3, #0
 8002af0:	60fb      	str	r3, [r7, #12]
 8002af2:	4b44      	ldr	r3, [pc, #272]	; (8002c04 <MX_GPIO_Init+0x148>)
 8002af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af6:	4a43      	ldr	r2, [pc, #268]	; (8002c04 <MX_GPIO_Init+0x148>)
 8002af8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002afc:	6313      	str	r3, [r2, #48]	; 0x30
 8002afe:	4b41      	ldr	r3, [pc, #260]	; (8002c04 <MX_GPIO_Init+0x148>)
 8002b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b06:	60fb      	str	r3, [r7, #12]
 8002b08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	60bb      	str	r3, [r7, #8]
 8002b0e:	4b3d      	ldr	r3, [pc, #244]	; (8002c04 <MX_GPIO_Init+0x148>)
 8002b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b12:	4a3c      	ldr	r2, [pc, #240]	; (8002c04 <MX_GPIO_Init+0x148>)
 8002b14:	f043 0301 	orr.w	r3, r3, #1
 8002b18:	6313      	str	r3, [r2, #48]	; 0x30
 8002b1a:	4b3a      	ldr	r3, [pc, #232]	; (8002c04 <MX_GPIO_Init+0x148>)
 8002b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b1e:	f003 0301 	and.w	r3, r3, #1
 8002b22:	60bb      	str	r3, [r7, #8]
 8002b24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b26:	2300      	movs	r3, #0
 8002b28:	607b      	str	r3, [r7, #4]
 8002b2a:	4b36      	ldr	r3, [pc, #216]	; (8002c04 <MX_GPIO_Init+0x148>)
 8002b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b2e:	4a35      	ldr	r2, [pc, #212]	; (8002c04 <MX_GPIO_Init+0x148>)
 8002b30:	f043 0302 	orr.w	r3, r3, #2
 8002b34:	6313      	str	r3, [r2, #48]	; 0x30
 8002b36:	4b33      	ldr	r3, [pc, #204]	; (8002c04 <MX_GPIO_Init+0x148>)
 8002b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3a:	f003 0302 	and.w	r3, r3, #2
 8002b3e:	607b      	str	r3, [r7, #4]
 8002b40:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WFM_NSS_GPIO_Port, WFM_NSS_Pin, GPIO_PIN_SET);
 8002b42:	2201      	movs	r2, #1
 8002b44:	2110      	movs	r1, #16
 8002b46:	4830      	ldr	r0, [pc, #192]	; (8002c08 <MX_GPIO_Init+0x14c>)
 8002b48:	f001 fe90 	bl	800486c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WFM_RESET_GPIO_Port, WFM_RESET_Pin, GPIO_PIN_RESET);
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	2101      	movs	r1, #1
 8002b50:	482e      	ldr	r0, [pc, #184]	; (8002c0c <MX_GPIO_Init+0x150>)
 8002b52:	f001 fe8b 	bl	800486c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WFM_GPIO_WIRQ_Port, WFM_GPIO_WIRQ_Pin, GPIO_PIN_RESET);
 8002b56:	2200      	movs	r2, #0
 8002b58:	2101      	movs	r1, #1
 8002b5a:	482d      	ldr	r0, [pc, #180]	; (8002c10 <MX_GPIO_Init+0x154>)
 8002b5c:	f001 fe86 	bl	800486c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8002b60:	2200      	movs	r2, #0
 8002b62:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002b66:	4829      	ldr	r0, [pc, #164]	; (8002c0c <MX_GPIO_Init+0x150>)
 8002b68:	f001 fe80 	bl	800486c <HAL_GPIO_WritePin>


  /*Configure GPIO pin : WFM_UDP_GPIO_TESTER */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002b6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b72:	2301      	movs	r3, #1
 8002b74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b76:	2300      	movs	r3, #0
 8002b78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b7e:	f107 0314 	add.w	r3, r7, #20
 8002b82:	4619      	mov	r1, r3
 8002b84:	4821      	ldr	r0, [pc, #132]	; (8002c0c <MX_GPIO_Init+0x150>)
 8002b86:	f001 fc09 	bl	800439c <HAL_GPIO_Init>

  /*Configure GPIO pin : WFM_NSS_Pin */
  GPIO_InitStruct.Pin = WFM_NSS_Pin;
 8002b8a:	2310      	movs	r3, #16
 8002b8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b92:	2300      	movs	r3, #0
 8002b94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b96:	2303      	movs	r3, #3
 8002b98:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(WFM_NSS_GPIO_Port, &GPIO_InitStruct);
 8002b9a:	f107 0314 	add.w	r3, r7, #20
 8002b9e:	4619      	mov	r1, r3
 8002ba0:	4819      	ldr	r0, [pc, #100]	; (8002c08 <MX_GPIO_Init+0x14c>)
 8002ba2:	f001 fbfb 	bl	800439c <HAL_GPIO_Init>

  /*Configure GPIO pin : WFM_RESET_Pin */
  GPIO_InitStruct.Pin = WFM_RESET_Pin;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002baa:	2301      	movs	r3, #1
 8002bac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bb2:	2303      	movs	r3, #3
 8002bb4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(WFM_RESET_GPIO_Port, &GPIO_InitStruct);
 8002bb6:	f107 0314 	add.w	r3, r7, #20
 8002bba:	4619      	mov	r1, r3
 8002bbc:	4813      	ldr	r0, [pc, #76]	; (8002c0c <MX_GPIO_Init+0x150>)
 8002bbe:	f001 fbed 	bl	800439c <HAL_GPIO_Init>

  /*Configure GPIO pin : WFM_RESET_Pin */
   GPIO_InitStruct.Pin = WFM_WUP_Pin;
 8002bc2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002bc6:	617b      	str	r3, [r7, #20]
   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	61bb      	str	r3, [r7, #24]
   GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	61fb      	str	r3, [r7, #28]
   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bd0:	2303      	movs	r3, #3
 8002bd2:	623b      	str	r3, [r7, #32]
   HAL_GPIO_Init(WFM_WUP_GPIO_Port, &GPIO_InitStruct);
 8002bd4:	f107 0314 	add.w	r3, r7, #20
 8002bd8:	4619      	mov	r1, r3
 8002bda:	480d      	ldr	r0, [pc, #52]	; (8002c10 <MX_GPIO_Init+0x154>)
 8002bdc:	f001 fbde 	bl	800439c <HAL_GPIO_Init>

  /*Configure GPIO pin : WFM_SPI_WIRQ_Pin */
  GPIO_InitStruct.Pin = WFM_SPI_WIRQ_Pin;
 8002be0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002be4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002be6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002bea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bec:	2300      	movs	r3, #0
 8002bee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(WFM_SPI_WIRQ_Port, &GPIO_InitStruct);
 8002bf0:	f107 0314 	add.w	r3, r7, #20
 8002bf4:	4619      	mov	r1, r3
 8002bf6:	4806      	ldr	r0, [pc, #24]	; (8002c10 <MX_GPIO_Init+0x154>)
 8002bf8:	f001 fbd0 	bl	800439c <HAL_GPIO_Init>

//  /* EXTI interrupt init*/
//  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 6, 0);
//  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);

}
 8002bfc:	bf00      	nop
 8002bfe:	3728      	adds	r7, #40	; 0x28
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	40023800 	.word	0x40023800
 8002c08:	40020000 	.word	0x40020000
 8002c0c:	40020800 	.word	0x40020800
 8002c10:	40020400 	.word	0x40020400

08002c14 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b082      	sub	sp, #8
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8002c1c:	1d39      	adds	r1, r7, #4
 8002c1e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c22:	2201      	movs	r2, #1
 8002c24:	4803      	ldr	r0, [pc, #12]	; (8002c34 <__io_putchar+0x20>)
 8002c26:	f003 fb5c 	bl	80062e2 <HAL_UART_Transmit>

  return ch;
 8002c2a:	687b      	ldr	r3, [r7, #4]
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	3708      	adds	r7, #8
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	20000684 	.word	0x20000684

08002c38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c3c:	b672      	cpsid	i
}
 8002c3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002c40:	e7fe      	b.n	8002c40 <Error_Handler+0x8>
	...

08002c44 <HAL_MspInit>:

extern DMA_HandleTypeDef hdma_spi4_tx;


void HAL_MspInit(void)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b082      	sub	sp, #8
 8002c48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

	  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	607b      	str	r3, [r7, #4]
 8002c4e:	4b25      	ldr	r3, [pc, #148]	; (8002ce4 <HAL_MspInit+0xa0>)
 8002c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c52:	4a24      	ldr	r2, [pc, #144]	; (8002ce4 <HAL_MspInit+0xa0>)
 8002c54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c58:	6453      	str	r3, [r2, #68]	; 0x44
 8002c5a:	4b22      	ldr	r3, [pc, #136]	; (8002ce4 <HAL_MspInit+0xa0>)
 8002c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c62:	607b      	str	r3, [r7, #4]
 8002c64:	687b      	ldr	r3, [r7, #4]
	  __HAL_RCC_PWR_CLK_ENABLE();
 8002c66:	2300      	movs	r3, #0
 8002c68:	603b      	str	r3, [r7, #0]
 8002c6a:	4b1e      	ldr	r3, [pc, #120]	; (8002ce4 <HAL_MspInit+0xa0>)
 8002c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6e:	4a1d      	ldr	r2, [pc, #116]	; (8002ce4 <HAL_MspInit+0xa0>)
 8002c70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c74:	6413      	str	r3, [r2, #64]	; 0x40
 8002c76:	4b1b      	ldr	r3, [pc, #108]	; (8002ce4 <HAL_MspInit+0xa0>)
 8002c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c7e:	603b      	str	r3, [r7, #0]
 8002c80:	683b      	ldr	r3, [r7, #0]

	  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c82:	2003      	movs	r0, #3
 8002c84:	f000 fdf0 	bl	8003868 <HAL_NVIC_SetPriorityGrouping>

	  /* System interrupt init*/
	  /* MemoryManagement_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8002c88:	2200      	movs	r2, #0
 8002c8a:	2100      	movs	r1, #0
 8002c8c:	f06f 000b 	mvn.w	r0, #11
 8002c90:	f000 fdf5 	bl	800387e <HAL_NVIC_SetPriority>
	  /* BusFault_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8002c94:	2200      	movs	r2, #0
 8002c96:	2100      	movs	r1, #0
 8002c98:	f06f 000a 	mvn.w	r0, #10
 8002c9c:	f000 fdef 	bl	800387e <HAL_NVIC_SetPriority>
	  /* UsageFault_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	2100      	movs	r1, #0
 8002ca4:	f06f 0009 	mvn.w	r0, #9
 8002ca8:	f000 fde9 	bl	800387e <HAL_NVIC_SetPriority>
	  /* SVCall_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8002cac:	2200      	movs	r2, #0
 8002cae:	2100      	movs	r1, #0
 8002cb0:	f06f 0004 	mvn.w	r0, #4
 8002cb4:	f000 fde3 	bl	800387e <HAL_NVIC_SetPriority>
	  /* DebugMonitor_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8002cb8:	2200      	movs	r2, #0
 8002cba:	2100      	movs	r1, #0
 8002cbc:	f06f 0003 	mvn.w	r0, #3
 8002cc0:	f000 fddd 	bl	800387e <HAL_NVIC_SetPriority>
	  /* PendSV_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	210f      	movs	r1, #15
 8002cc8:	f06f 0001 	mvn.w	r0, #1
 8002ccc:	f000 fdd7 	bl	800387e <HAL_NVIC_SetPriority>
	  /* SysTick_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	210f      	movs	r1, #15
 8002cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8002cd8:	f000 fdd1 	bl	800387e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002cdc:	bf00      	nop
 8002cde:	3708      	adds	r7, #8
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}
 8002ce4:	40023800 	.word	0x40023800

08002ce8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b08c      	sub	sp, #48	; 0x30
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cf0:	f107 031c 	add.w	r3, r7, #28
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	601a      	str	r2, [r3, #0]
 8002cf8:	605a      	str	r2, [r3, #4]
 8002cfa:	609a      	str	r2, [r3, #8]
 8002cfc:	60da      	str	r2, [r3, #12]
 8002cfe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a52      	ldr	r2, [pc, #328]	; (8002e50 <HAL_SPI_MspInit+0x168>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	f040 80b0 	bne.w	8002e6c <HAL_SPI_MspInit+0x184>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	61bb      	str	r3, [r7, #24]
 8002d10:	4b50      	ldr	r3, [pc, #320]	; (8002e54 <HAL_SPI_MspInit+0x16c>)
 8002d12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d14:	4a4f      	ldr	r2, [pc, #316]	; (8002e54 <HAL_SPI_MspInit+0x16c>)
 8002d16:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002d1a:	6453      	str	r3, [r2, #68]	; 0x44
 8002d1c:	4b4d      	ldr	r3, [pc, #308]	; (8002e54 <HAL_SPI_MspInit+0x16c>)
 8002d1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d24:	61bb      	str	r3, [r7, #24]
 8002d26:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d28:	2300      	movs	r3, #0
 8002d2a:	617b      	str	r3, [r7, #20]
 8002d2c:	4b49      	ldr	r3, [pc, #292]	; (8002e54 <HAL_SPI_MspInit+0x16c>)
 8002d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d30:	4a48      	ldr	r2, [pc, #288]	; (8002e54 <HAL_SPI_MspInit+0x16c>)
 8002d32:	f043 0301 	orr.w	r3, r3, #1
 8002d36:	6313      	str	r3, [r2, #48]	; 0x30
 8002d38:	4b46      	ldr	r3, [pc, #280]	; (8002e54 <HAL_SPI_MspInit+0x16c>)
 8002d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3c:	f003 0301 	and.w	r3, r3, #1
 8002d40:	617b      	str	r3, [r7, #20]
 8002d42:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = WFM_SCK_Pin|WFM_MISO_Pin|WFM_MOSI_Pin;
 8002d44:	23e0      	movs	r3, #224	; 0xe0
 8002d46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d48:	2302      	movs	r3, #2
 8002d4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d50:	2303      	movs	r3, #3
 8002d52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002d54:	2305      	movs	r3, #5
 8002d56:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d58:	f107 031c 	add.w	r3, r7, #28
 8002d5c:	4619      	mov	r1, r3
 8002d5e:	483e      	ldr	r0, [pc, #248]	; (8002e58 <HAL_SPI_MspInit+0x170>)
 8002d60:	f001 fb1c 	bl	800439c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8002d64:	4b3d      	ldr	r3, [pc, #244]	; (8002e5c <HAL_SPI_MspInit+0x174>)
 8002d66:	4a3e      	ldr	r2, [pc, #248]	; (8002e60 <HAL_SPI_MspInit+0x178>)
 8002d68:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8002d6a:	4b3c      	ldr	r3, [pc, #240]	; (8002e5c <HAL_SPI_MspInit+0x174>)
 8002d6c:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8002d70:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002d72:	4b3a      	ldr	r3, [pc, #232]	; (8002e5c <HAL_SPI_MspInit+0x174>)
 8002d74:	2200      	movs	r2, #0
 8002d76:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d78:	4b38      	ldr	r3, [pc, #224]	; (8002e5c <HAL_SPI_MspInit+0x174>)
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002d7e:	4b37      	ldr	r3, [pc, #220]	; (8002e5c <HAL_SPI_MspInit+0x174>)
 8002d80:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d84:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d86:	4b35      	ldr	r3, [pc, #212]	; (8002e5c <HAL_SPI_MspInit+0x174>)
 8002d88:	2200      	movs	r2, #0
 8002d8a:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d8c:	4b33      	ldr	r3, [pc, #204]	; (8002e5c <HAL_SPI_MspInit+0x174>)
 8002d8e:	2200      	movs	r2, #0
 8002d90:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8002d92:	4b32      	ldr	r3, [pc, #200]	; (8002e5c <HAL_SPI_MspInit+0x174>)
 8002d94:	2200      	movs	r2, #0
 8002d96:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002d98:	4b30      	ldr	r3, [pc, #192]	; (8002e5c <HAL_SPI_MspInit+0x174>)
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d9e:	4b2f      	ldr	r3, [pc, #188]	; (8002e5c <HAL_SPI_MspInit+0x174>)
 8002da0:	2200      	movs	r2, #0
 8002da2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8002da4:	482d      	ldr	r0, [pc, #180]	; (8002e5c <HAL_SPI_MspInit+0x174>)
 8002da6:	f000 fdcb 	bl	8003940 <HAL_DMA_Init>
 8002daa:	4603      	mov	r3, r0
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d001      	beq.n	8002db4 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 8002db0:	f7ff ff42 	bl	8002c38 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	4a29      	ldr	r2, [pc, #164]	; (8002e5c <HAL_SPI_MspInit+0x174>)
 8002db8:	64da      	str	r2, [r3, #76]	; 0x4c
 8002dba:	4a28      	ldr	r2, [pc, #160]	; (8002e5c <HAL_SPI_MspInit+0x174>)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream2;
 8002dc0:	4b28      	ldr	r3, [pc, #160]	; (8002e64 <HAL_SPI_MspInit+0x17c>)
 8002dc2:	4a29      	ldr	r2, [pc, #164]	; (8002e68 <HAL_SPI_MspInit+0x180>)
 8002dc4:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_2;
 8002dc6:	4b27      	ldr	r3, [pc, #156]	; (8002e64 <HAL_SPI_MspInit+0x17c>)
 8002dc8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002dcc:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002dce:	4b25      	ldr	r3, [pc, #148]	; (8002e64 <HAL_SPI_MspInit+0x17c>)
 8002dd0:	2240      	movs	r2, #64	; 0x40
 8002dd2:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002dd4:	4b23      	ldr	r3, [pc, #140]	; (8002e64 <HAL_SPI_MspInit+0x17c>)
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002dda:	4b22      	ldr	r3, [pc, #136]	; (8002e64 <HAL_SPI_MspInit+0x17c>)
 8002ddc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002de0:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002de2:	4b20      	ldr	r3, [pc, #128]	; (8002e64 <HAL_SPI_MspInit+0x17c>)
 8002de4:	2200      	movs	r2, #0
 8002de6:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002de8:	4b1e      	ldr	r3, [pc, #120]	; (8002e64 <HAL_SPI_MspInit+0x17c>)
 8002dea:	2200      	movs	r2, #0
 8002dec:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8002dee:	4b1d      	ldr	r3, [pc, #116]	; (8002e64 <HAL_SPI_MspInit+0x17c>)
 8002df0:	2200      	movs	r2, #0
 8002df2:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002df4:	4b1b      	ldr	r3, [pc, #108]	; (8002e64 <HAL_SPI_MspInit+0x17c>)
 8002df6:	2200      	movs	r2, #0
 8002df8:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002dfa:	4b1a      	ldr	r3, [pc, #104]	; (8002e64 <HAL_SPI_MspInit+0x17c>)
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002e00:	4818      	ldr	r0, [pc, #96]	; (8002e64 <HAL_SPI_MspInit+0x17c>)
 8002e02:	f000 fd9d 	bl	8003940 <HAL_DMA_Init>
 8002e06:	4603      	mov	r3, r0
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d001      	beq.n	8002e10 <HAL_SPI_MspInit+0x128>
    {
      Error_Handler();
 8002e0c:	f7ff ff14 	bl	8002c38 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	4a14      	ldr	r2, [pc, #80]	; (8002e64 <HAL_SPI_MspInit+0x17c>)
 8002e14:	649a      	str	r2, [r3, #72]	; 0x48
 8002e16:	4a13      	ldr	r2, [pc, #76]	; (8002e64 <HAL_SPI_MspInit+0x17c>)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6393      	str	r3, [r2, #56]	; 0x38

    /* DMA interrupt init */
    /* DMA2_Stream0_IRQn RX interrupt configuration */
    HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 10, 1);
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	210a      	movs	r1, #10
 8002e20:	2038      	movs	r0, #56	; 0x38
 8002e22:	f000 fd2c 	bl	800387e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002e26:	2038      	movs	r0, #56	; 0x38
 8002e28:	f000 fd45 	bl	80038b6 <HAL_NVIC_EnableIRQ>

    /* DMA2_Stream3_IRQn TX interrupt configuration */
    HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 10, 0);
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	210a      	movs	r1, #10
 8002e30:	203a      	movs	r0, #58	; 0x3a
 8002e32:	f000 fd24 	bl	800387e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8002e36:	203a      	movs	r0, #58	; 0x3a
 8002e38:	f000 fd3d 	bl	80038b6 <HAL_NVIC_EnableIRQ>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 10, 2);
 8002e3c:	2202      	movs	r2, #2
 8002e3e:	210a      	movs	r1, #10
 8002e40:	2023      	movs	r0, #35	; 0x23
 8002e42:	f000 fd1c 	bl	800387e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002e46:	2023      	movs	r0, #35	; 0x23
 8002e48:	f000 fd35 	bl	80038b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8002e4c:	e0d2      	b.n	8002ff4 <HAL_SPI_MspInit+0x30c>
 8002e4e:	bf00      	nop
 8002e50:	40013000 	.word	0x40013000
 8002e54:	40023800 	.word	0x40023800
 8002e58:	40020000 	.word	0x40020000
 8002e5c:	200011f8 	.word	0x200011f8
 8002e60:	40026410 	.word	0x40026410
 8002e64:	20001198 	.word	0x20001198
 8002e68:	40026440 	.word	0x40026440
  else if(hspi->Instance==SPI4)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a62      	ldr	r2, [pc, #392]	; (8002ffc <HAL_SPI_MspInit+0x314>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	f040 80be 	bne.w	8002ff4 <HAL_SPI_MspInit+0x30c>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8002e78:	2300      	movs	r3, #0
 8002e7a:	613b      	str	r3, [r7, #16]
 8002e7c:	4b60      	ldr	r3, [pc, #384]	; (8003000 <HAL_SPI_MspInit+0x318>)
 8002e7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e80:	4a5f      	ldr	r2, [pc, #380]	; (8003000 <HAL_SPI_MspInit+0x318>)
 8002e82:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002e86:	6453      	str	r3, [r2, #68]	; 0x44
 8002e88:	4b5d      	ldr	r3, [pc, #372]	; (8003000 <HAL_SPI_MspInit+0x318>)
 8002e8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e8c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e90:	613b      	str	r3, [r7, #16]
 8002e92:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e94:	2300      	movs	r3, #0
 8002e96:	60fb      	str	r3, [r7, #12]
 8002e98:	4b59      	ldr	r3, [pc, #356]	; (8003000 <HAL_SPI_MspInit+0x318>)
 8002e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e9c:	4a58      	ldr	r2, [pc, #352]	; (8003000 <HAL_SPI_MspInit+0x318>)
 8002e9e:	f043 0301 	orr.w	r3, r3, #1
 8002ea2:	6313      	str	r3, [r2, #48]	; 0x30
 8002ea4:	4b56      	ldr	r3, [pc, #344]	; (8003000 <HAL_SPI_MspInit+0x318>)
 8002ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea8:	f003 0301 	and.w	r3, r3, #1
 8002eac:	60fb      	str	r3, [r7, #12]
 8002eae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	60bb      	str	r3, [r7, #8]
 8002eb4:	4b52      	ldr	r3, [pc, #328]	; (8003000 <HAL_SPI_MspInit+0x318>)
 8002eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb8:	4a51      	ldr	r2, [pc, #324]	; (8003000 <HAL_SPI_MspInit+0x318>)
 8002eba:	f043 0302 	orr.w	r3, r3, #2
 8002ebe:	6313      	str	r3, [r2, #48]	; 0x30
 8002ec0:	4b4f      	ldr	r3, [pc, #316]	; (8003000 <HAL_SPI_MspInit+0x318>)
 8002ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec4:	f003 0302 	and.w	r3, r3, #2
 8002ec8:	60bb      	str	r3, [r7, #8]
 8002eca:	68bb      	ldr	r3, [r7, #8]
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8002ecc:	2201      	movs	r2, #1
 8002ece:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002ed2:	484c      	ldr	r0, [pc, #304]	; (8003004 <HAL_SPI_MspInit+0x31c>)
 8002ed4:	f001 fcca 	bl	800486c <HAL_GPIO_WritePin>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002ed8:	2302      	movs	r3, #2
 8002eda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002edc:	2302      	movs	r3, #2
 8002ede:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ee4:	2303      	movs	r3, #3
 8002ee6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8002ee8:	2305      	movs	r3, #5
 8002eea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002eec:	f107 031c 	add.w	r3, r7, #28
 8002ef0:	4619      	mov	r1, r3
 8002ef2:	4845      	ldr	r0, [pc, #276]	; (8003008 <HAL_SPI_MspInit+0x320>)
 8002ef4:	f001 fa52 	bl	800439c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002ef8:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002efc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002efe:	2302      	movs	r3, #2
 8002f00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f02:	2300      	movs	r3, #0
 8002f04:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f06:	2303      	movs	r3, #3
 8002f08:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI4;
 8002f0a:	2306      	movs	r3, #6
 8002f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f0e:	f107 031c 	add.w	r3, r7, #28
 8002f12:	4619      	mov	r1, r3
 8002f14:	483b      	ldr	r0, [pc, #236]	; (8003004 <HAL_SPI_MspInit+0x31c>)
 8002f16:	f001 fa41 	bl	800439c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002f1a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002f1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f20:	2302      	movs	r3, #2
 8002f22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f24:	2300      	movs	r3, #0
 8002f26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f28:	2303      	movs	r3, #3
 8002f2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI4;
 8002f2c:	2306      	movs	r3, #6
 8002f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f30:	f107 031c 	add.w	r3, r7, #28
 8002f34:	4619      	mov	r1, r3
 8002f36:	4834      	ldr	r0, [pc, #208]	; (8003008 <HAL_SPI_MspInit+0x320>)
 8002f38:	f001 fa30 	bl	800439c <HAL_GPIO_Init>
    hdma_spi4_rx.Instance = DMA2_Stream3;
 8002f3c:	4b33      	ldr	r3, [pc, #204]	; (800300c <HAL_SPI_MspInit+0x324>)
 8002f3e:	4a34      	ldr	r2, [pc, #208]	; (8003010 <HAL_SPI_MspInit+0x328>)
 8002f40:	601a      	str	r2, [r3, #0]
    hdma_spi4_rx.Init.Channel = DMA_CHANNEL_5;
 8002f42:	4b32      	ldr	r3, [pc, #200]	; (800300c <HAL_SPI_MspInit+0x324>)
 8002f44:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8002f48:	605a      	str	r2, [r3, #4]
    hdma_spi4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002f4a:	4b30      	ldr	r3, [pc, #192]	; (800300c <HAL_SPI_MspInit+0x324>)
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	609a      	str	r2, [r3, #8]
    hdma_spi4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f50:	4b2e      	ldr	r3, [pc, #184]	; (800300c <HAL_SPI_MspInit+0x324>)
 8002f52:	2200      	movs	r2, #0
 8002f54:	60da      	str	r2, [r3, #12]
    hdma_spi4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002f56:	4b2d      	ldr	r3, [pc, #180]	; (800300c <HAL_SPI_MspInit+0x324>)
 8002f58:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f5c:	611a      	str	r2, [r3, #16]
    hdma_spi4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002f5e:	4b2b      	ldr	r3, [pc, #172]	; (800300c <HAL_SPI_MspInit+0x324>)
 8002f60:	2200      	movs	r2, #0
 8002f62:	615a      	str	r2, [r3, #20]
    hdma_spi4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002f64:	4b29      	ldr	r3, [pc, #164]	; (800300c <HAL_SPI_MspInit+0x324>)
 8002f66:	2200      	movs	r2, #0
 8002f68:	619a      	str	r2, [r3, #24]
    hdma_spi4_rx.Init.Mode = DMA_NORMAL ;
 8002f6a:	4b28      	ldr	r3, [pc, #160]	; (800300c <HAL_SPI_MspInit+0x324>)
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	61da      	str	r2, [r3, #28]
    hdma_spi4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002f70:	4b26      	ldr	r3, [pc, #152]	; (800300c <HAL_SPI_MspInit+0x324>)
 8002f72:	2200      	movs	r2, #0
 8002f74:	621a      	str	r2, [r3, #32]
    hdma_spi4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f76:	4b25      	ldr	r3, [pc, #148]	; (800300c <HAL_SPI_MspInit+0x324>)
 8002f78:	2200      	movs	r2, #0
 8002f7a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi4_rx) != HAL_OK)
 8002f7c:	4823      	ldr	r0, [pc, #140]	; (800300c <HAL_SPI_MspInit+0x324>)
 8002f7e:	f000 fcdf 	bl	8003940 <HAL_DMA_Init>
 8002f82:	4603      	mov	r3, r0
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d001      	beq.n	8002f8c <HAL_SPI_MspInit+0x2a4>
      Error_Handler();
 8002f88:	f7ff fe56 	bl	8002c38 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi4_rx);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	4a1f      	ldr	r2, [pc, #124]	; (800300c <HAL_SPI_MspInit+0x324>)
 8002f90:	64da      	str	r2, [r3, #76]	; 0x4c
 8002f92:	4a1e      	ldr	r2, [pc, #120]	; (800300c <HAL_SPI_MspInit+0x324>)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_spi4_tx.Instance = DMA2_Stream1;
 8002f98:	4b1e      	ldr	r3, [pc, #120]	; (8003014 <HAL_SPI_MspInit+0x32c>)
 8002f9a:	4a1f      	ldr	r2, [pc, #124]	; (8003018 <HAL_SPI_MspInit+0x330>)
 8002f9c:	601a      	str	r2, [r3, #0]
    hdma_spi4_tx.Init.Channel = DMA_CHANNEL_4;
 8002f9e:	4b1d      	ldr	r3, [pc, #116]	; (8003014 <HAL_SPI_MspInit+0x32c>)
 8002fa0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002fa4:	605a      	str	r2, [r3, #4]
    hdma_spi4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002fa6:	4b1b      	ldr	r3, [pc, #108]	; (8003014 <HAL_SPI_MspInit+0x32c>)
 8002fa8:	2240      	movs	r2, #64	; 0x40
 8002faa:	609a      	str	r2, [r3, #8]
    hdma_spi4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002fac:	4b19      	ldr	r3, [pc, #100]	; (8003014 <HAL_SPI_MspInit+0x32c>)
 8002fae:	2200      	movs	r2, #0
 8002fb0:	60da      	str	r2, [r3, #12]
    hdma_spi4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002fb2:	4b18      	ldr	r3, [pc, #96]	; (8003014 <HAL_SPI_MspInit+0x32c>)
 8002fb4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002fb8:	611a      	str	r2, [r3, #16]
    hdma_spi4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002fba:	4b16      	ldr	r3, [pc, #88]	; (8003014 <HAL_SPI_MspInit+0x32c>)
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	615a      	str	r2, [r3, #20]
    hdma_spi4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002fc0:	4b14      	ldr	r3, [pc, #80]	; (8003014 <HAL_SPI_MspInit+0x32c>)
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	619a      	str	r2, [r3, #24]
    hdma_spi4_tx.Init.Mode = DMA_NORMAL;
 8002fc6:	4b13      	ldr	r3, [pc, #76]	; (8003014 <HAL_SPI_MspInit+0x32c>)
 8002fc8:	2200      	movs	r2, #0
 8002fca:	61da      	str	r2, [r3, #28]
    hdma_spi4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002fcc:	4b11      	ldr	r3, [pc, #68]	; (8003014 <HAL_SPI_MspInit+0x32c>)
 8002fce:	2200      	movs	r2, #0
 8002fd0:	621a      	str	r2, [r3, #32]
    hdma_spi4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002fd2:	4b10      	ldr	r3, [pc, #64]	; (8003014 <HAL_SPI_MspInit+0x32c>)
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi4_tx) != HAL_OK)
 8002fd8:	480e      	ldr	r0, [pc, #56]	; (8003014 <HAL_SPI_MspInit+0x32c>)
 8002fda:	f000 fcb1 	bl	8003940 <HAL_DMA_Init>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d001      	beq.n	8002fe8 <HAL_SPI_MspInit+0x300>
      Error_Handler();
 8002fe4:	f7ff fe28 	bl	8002c38 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi4_tx);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	4a0a      	ldr	r2, [pc, #40]	; (8003014 <HAL_SPI_MspInit+0x32c>)
 8002fec:	649a      	str	r2, [r3, #72]	; 0x48
 8002fee:	4a09      	ldr	r2, [pc, #36]	; (8003014 <HAL_SPI_MspInit+0x32c>)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002ff4:	bf00      	nop
 8002ff6:	3730      	adds	r7, #48	; 0x30
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}
 8002ffc:	40013400 	.word	0x40013400
 8003000:	40023800 	.word	0x40023800
 8003004:	40020400 	.word	0x40020400
 8003008:	40020000 	.word	0x40020000
 800300c:	20000720 	.word	0x20000720
 8003010:	40026458 	.word	0x40026458
 8003014:	20000780 	.word	0x20000780
 8003018:	40026428 	.word	0x40026428

0800301c <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b082      	sub	sp, #8
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI1)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a1d      	ldr	r2, [pc, #116]	; (80030a0 <HAL_SPI_MspDeInit+0x84>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d114      	bne.n	8003058 <HAL_SPI_MspDeInit+0x3c>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 800302e:	4b1d      	ldr	r3, [pc, #116]	; (80030a4 <HAL_SPI_MspDeInit+0x88>)
 8003030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003032:	4a1c      	ldr	r2, [pc, #112]	; (80030a4 <HAL_SPI_MspDeInit+0x88>)
 8003034:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003038:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, WFM_SCK_Pin|WFM_MISO_Pin|WFM_MOSI_Pin);
 800303a:	21e0      	movs	r1, #224	; 0xe0
 800303c:	481a      	ldr	r0, [pc, #104]	; (80030a8 <HAL_SPI_MspDeInit+0x8c>)
 800303e:	f001 fb31 	bl	80046a4 <HAL_GPIO_DeInit>

    /* SPI1 DMA DeInit */
    HAL_DMA_DeInit(hspi->hdmarx);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003046:	4618      	mov	r0, r3
 8003048:	f000 fd28 	bl	8003a9c <HAL_DMA_DeInit>
    HAL_DMA_DeInit(hspi->hdmatx);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003050:	4618      	mov	r0, r3
 8003052:	f000 fd23 	bl	8003a9c <HAL_DMA_DeInit>
  /* USER CODE BEGIN SPI4_MspDeInit 1 */

  /* USER CODE END SPI4_MspDeInit 1 */
  }

}
 8003056:	e01e      	b.n	8003096 <HAL_SPI_MspDeInit+0x7a>
  else if(hspi->Instance==SPI4)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a13      	ldr	r2, [pc, #76]	; (80030ac <HAL_SPI_MspDeInit+0x90>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d119      	bne.n	8003096 <HAL_SPI_MspDeInit+0x7a>
    __HAL_RCC_SPI4_CLK_DISABLE();
 8003062:	4b10      	ldr	r3, [pc, #64]	; (80030a4 <HAL_SPI_MspDeInit+0x88>)
 8003064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003066:	4a0f      	ldr	r2, [pc, #60]	; (80030a4 <HAL_SPI_MspDeInit+0x88>)
 8003068:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800306c:	6453      	str	r3, [r2, #68]	; 0x44
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_1|GPIO_PIN_11);
 800306e:	f640 0102 	movw	r1, #2050	; 0x802
 8003072:	480d      	ldr	r0, [pc, #52]	; (80030a8 <HAL_SPI_MspDeInit+0x8c>)
 8003074:	f001 fb16 	bl	80046a4 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_12|GPIO_PIN_13);
 8003078:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800307c:	480c      	ldr	r0, [pc, #48]	; (80030b0 <HAL_SPI_MspDeInit+0x94>)
 800307e:	f001 fb11 	bl	80046a4 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(hspi->hdmarx);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003086:	4618      	mov	r0, r3
 8003088:	f000 fd08 	bl	8003a9c <HAL_DMA_DeInit>
    HAL_DMA_DeInit(hspi->hdmatx);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003090:	4618      	mov	r0, r3
 8003092:	f000 fd03 	bl	8003a9c <HAL_DMA_DeInit>
}
 8003096:	bf00      	nop
 8003098:	3708      	adds	r7, #8
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}
 800309e:	bf00      	nop
 80030a0:	40013000 	.word	0x40013000
 80030a4:	40023800 	.word	0x40023800
 80030a8:	40020000 	.word	0x40020000
 80030ac:	40013400 	.word	0x40013400
 80030b0:	40020400 	.word	0x40020400

080030b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b08a      	sub	sp, #40	; 0x28
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030bc:	f107 0314 	add.w	r3, r7, #20
 80030c0:	2200      	movs	r2, #0
 80030c2:	601a      	str	r2, [r3, #0]
 80030c4:	605a      	str	r2, [r3, #4]
 80030c6:	609a      	str	r2, [r3, #8]
 80030c8:	60da      	str	r2, [r3, #12]
 80030ca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a19      	ldr	r2, [pc, #100]	; (8003138 <HAL_UART_MspInit+0x84>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d12b      	bne.n	800312e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80030d6:	2300      	movs	r3, #0
 80030d8:	613b      	str	r3, [r7, #16]
 80030da:	4b18      	ldr	r3, [pc, #96]	; (800313c <HAL_UART_MspInit+0x88>)
 80030dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030de:	4a17      	ldr	r2, [pc, #92]	; (800313c <HAL_UART_MspInit+0x88>)
 80030e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030e4:	6413      	str	r3, [r2, #64]	; 0x40
 80030e6:	4b15      	ldr	r3, [pc, #84]	; (800313c <HAL_UART_MspInit+0x88>)
 80030e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ee:	613b      	str	r3, [r7, #16]
 80030f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030f2:	2300      	movs	r3, #0
 80030f4:	60fb      	str	r3, [r7, #12]
 80030f6:	4b11      	ldr	r3, [pc, #68]	; (800313c <HAL_UART_MspInit+0x88>)
 80030f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030fa:	4a10      	ldr	r2, [pc, #64]	; (800313c <HAL_UART_MspInit+0x88>)
 80030fc:	f043 0301 	orr.w	r3, r3, #1
 8003100:	6313      	str	r3, [r2, #48]	; 0x30
 8003102:	4b0e      	ldr	r3, [pc, #56]	; (800313c <HAL_UART_MspInit+0x88>)
 8003104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003106:	f003 0301 	and.w	r3, r3, #1
 800310a:	60fb      	str	r3, [r7, #12]
 800310c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800310e:	230c      	movs	r3, #12
 8003110:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003112:	2302      	movs	r3, #2
 8003114:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003116:	2300      	movs	r3, #0
 8003118:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800311a:	2303      	movs	r3, #3
 800311c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800311e:	2307      	movs	r3, #7
 8003120:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003122:	f107 0314 	add.w	r3, r7, #20
 8003126:	4619      	mov	r1, r3
 8003128:	4805      	ldr	r0, [pc, #20]	; (8003140 <HAL_UART_MspInit+0x8c>)
 800312a:	f001 f937 	bl	800439c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800312e:	bf00      	nop
 8003130:	3728      	adds	r7, #40	; 0x28
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
 8003136:	bf00      	nop
 8003138:	40004400 	.word	0x40004400
 800313c:	40023800 	.word	0x40023800
 8003140:	40020000 	.word	0x40020000

08003144 <SPI1_IRQHandler>:

/* USER CODE BEGIN EV */
/**************************************************************************//**
 * Handle SPI1 global interrupt
 *****************************************************************************/
void SPI1_IRQHandler (void) {
 8003144:	b580      	push	{r7, lr}
 8003146:	af00      	add	r7, sp, #0
  HAL_SPI_IRQHandler(&hspi1);
 8003148:	4802      	ldr	r0, [pc, #8]	; (8003154 <SPI1_IRQHandler+0x10>)
 800314a:	f002 fccd 	bl	8005ae8 <HAL_SPI_IRQHandler>
}
 800314e:	bf00      	nop
 8003150:	bd80      	pop	{r7, pc}
 8003152:	bf00      	nop
 8003154:	20001140 	.word	0x20001140

08003158 <HAL_SPI_TxCpltCallback>:


/**************************************************************************//**
 * SPI transmit complete callback
 *****************************************************************************/
void HAL_SPI_TxCpltCallback (SPI_HandleTypeDef *hspi) {
 8003158:	b580      	push	{r7, lr}
 800315a:	b084      	sub	sp, #16
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8003160:	2300      	movs	r3, #0
 8003162:	60fb      	str	r3, [r7, #12]
  xSemaphoreGiveFromISR(spiDMASemaphore, &xHigherPriorityTaskWoken);
 8003164:	4b0b      	ldr	r3, [pc, #44]	; (8003194 <HAL_SPI_TxCpltCallback+0x3c>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f107 020c 	add.w	r2, r7, #12
 800316c:	4611      	mov	r1, r2
 800316e:	4618      	mov	r0, r3
 8003170:	f006 ff09 	bl	8009f86 <xQueueGiveFromISR>
  portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d007      	beq.n	800318a <HAL_SPI_TxCpltCallback+0x32>
 800317a:	4b07      	ldr	r3, [pc, #28]	; (8003198 <HAL_SPI_TxCpltCallback+0x40>)
 800317c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003180:	601a      	str	r2, [r3, #0]
 8003182:	f3bf 8f4f 	dsb	sy
 8003186:	f3bf 8f6f 	isb	sy
}
 800318a:	bf00      	nop
 800318c:	3710      	adds	r7, #16
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}
 8003192:	bf00      	nop
 8003194:	20001258 	.word	0x20001258
 8003198:	e000ed04 	.word	0xe000ed04

0800319c <HAL_SPI_RxCpltCallback>:

/**************************************************************************//**
 * SPI receive complete callback
 *****************************************************************************/
void HAL_SPI_RxCpltCallback (SPI_HandleTypeDef *hspi) {
 800319c:	b580      	push	{r7, lr}
 800319e:	b084      	sub	sp, #16
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]

	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80031a4:	2300      	movs	r3, #0
 80031a6:	60fb      	str	r3, [r7, #12]
	if(hspi->Instance==SPI1){
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a16      	ldr	r2, [pc, #88]	; (8003208 <HAL_SPI_RxCpltCallback+0x6c>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d113      	bne.n	80031da <HAL_SPI_RxCpltCallback+0x3e>
		  xSemaphoreGiveFromISR(spiDMASemaphore, &xHigherPriorityTaskWoken);
 80031b2:	4b16      	ldr	r3, [pc, #88]	; (800320c <HAL_SPI_RxCpltCallback+0x70>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f107 020c 	add.w	r2, r7, #12
 80031ba:	4611      	mov	r1, r2
 80031bc:	4618      	mov	r0, r3
 80031be:	f006 fee2 	bl	8009f86 <xQueueGiveFromISR>
		  portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d01b      	beq.n	8003200 <HAL_SPI_RxCpltCallback+0x64>
 80031c8:	4b11      	ldr	r3, [pc, #68]	; (8003210 <HAL_SPI_RxCpltCallback+0x74>)
 80031ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031ce:	601a      	str	r2, [r3, #0]
 80031d0:	f3bf 8f4f 	dsb	sy
 80031d4:	f3bf 8f6f 	isb	sy

	else if(hspi->Instance==SPI4){
		spi_flag =  true;
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
	}
}
 80031d8:	e012      	b.n	8003200 <HAL_SPI_RxCpltCallback+0x64>
	else if(hspi->Instance==SPI4){
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a0d      	ldr	r2, [pc, #52]	; (8003214 <HAL_SPI_RxCpltCallback+0x78>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d10d      	bne.n	8003200 <HAL_SPI_RxCpltCallback+0x64>
		spi_flag =  true;
 80031e4:	4b0c      	ldr	r3, [pc, #48]	; (8003218 <HAL_SPI_RxCpltCallback+0x7c>)
 80031e6:	2201      	movs	r2, #1
 80031e8:	701a      	strb	r2, [r3, #0]
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d007      	beq.n	8003200 <HAL_SPI_RxCpltCallback+0x64>
 80031f0:	4b07      	ldr	r3, [pc, #28]	; (8003210 <HAL_SPI_RxCpltCallback+0x74>)
 80031f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031f6:	601a      	str	r2, [r3, #0]
 80031f8:	f3bf 8f4f 	dsb	sy
 80031fc:	f3bf 8f6f 	isb	sy
}
 8003200:	bf00      	nop
 8003202:	3710      	adds	r7, #16
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}
 8003208:	40013000 	.word	0x40013000
 800320c:	20001258 	.word	0x20001258
 8003210:	e000ed04 	.word	0xe000ed04
 8003214:	40013400 	.word	0x40013400
 8003218:	20000000 	.word	0x20000000

0800321c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800321c:	b480      	push	{r7}
 800321e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003220:	e7fe      	b.n	8003220 <NMI_Handler+0x4>

08003222 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003222:	b480      	push	{r7}
 8003224:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003226:	e7fe      	b.n	8003226 <HardFault_Handler+0x4>

08003228 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003228:	b480      	push	{r7}
 800322a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800322c:	e7fe      	b.n	800322c <MemManage_Handler+0x4>

0800322e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800322e:	b480      	push	{r7}
 8003230:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003232:	e7fe      	b.n	8003232 <BusFault_Handler+0x4>

08003234 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003234:	b480      	push	{r7}
 8003236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003238:	e7fe      	b.n	8003238 <UsageFault_Handler+0x4>

0800323a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800323a:	b480      	push	{r7}
 800323c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800323e:	bf00      	nop
 8003240:	46bd      	mov	sp, r7
 8003242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003246:	4770      	bx	lr

08003248 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800324c:	f000 f9d4 	bl	80035f8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8003250:	f008 fa0e 	bl	800b670 <xTaskGetSchedulerState>
 8003254:	4603      	mov	r3, r0
 8003256:	2b01      	cmp	r3, #1
 8003258:	d001      	beq.n	800325e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800325a:	f009 f94d 	bl	800c4f8 <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */
  osSystickHandler();
 800325e:	f006 f9ab 	bl	80095b8 <osSystickHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 8003262:	bf00      	nop
 8003264:	bd80      	pop	{r7, pc}
	...

08003268 <EXTI15_10_IRQHandler>:
/* For the available peripheral interrupt handler names,                      */
/* please refer to the startup file (startup_stm32f4xx.s).                    */
/******************************************************************************/

void EXTI15_10_IRQHandler(void)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b082      	sub	sp, #8
 800326c:	af00      	add	r7, sp, #0

  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800326e:	2300      	movs	r3, #0
 8003270:	607b      	str	r3, [r7, #4]

  if (__HAL_GPIO_EXTI_GET_IT(WFM_SPI_WIRQ_Pin) != RESET) {
 8003272:	4b15      	ldr	r3, [pc, #84]	; (80032c8 <EXTI15_10_IRQHandler+0x60>)
 8003274:	695b      	ldr	r3, [r3, #20]
 8003276:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800327a:	2b00      	cmp	r3, #0
 800327c:	d011      	beq.n	80032a2 <EXTI15_10_IRQHandler+0x3a>
	  if(sl_wfx_wake_up_sem){
 800327e:	4b13      	ldr	r3, [pc, #76]	; (80032cc <EXTI15_10_IRQHandler+0x64>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d006      	beq.n	8003294 <EXTI15_10_IRQHandler+0x2c>
		  xSemaphoreGiveFromISR(sl_wfx_wake_up_sem, &xHigherPriorityTaskWoken);
 8003286:	4b11      	ldr	r3, [pc, #68]	; (80032cc <EXTI15_10_IRQHandler+0x64>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	1d3a      	adds	r2, r7, #4
 800328c:	4611      	mov	r1, r2
 800328e:	4618      	mov	r0, r3
 8003290:	f006 fe79 	bl	8009f86 <xQueueGiveFromISR>
	   }

	xEventGroupSetBitsFromISR(sl_wfx_event_group,
 8003294:	4b0e      	ldr	r3, [pc, #56]	; (80032d0 <EXTI15_10_IRQHandler+0x68>)
 8003296:	6819      	ldr	r1, [r3, #0]
 8003298:	1d3b      	adds	r3, r7, #4
 800329a:	2202      	movs	r2, #2
 800329c:	480d      	ldr	r0, [pc, #52]	; (80032d4 <EXTI15_10_IRQHandler+0x6c>)
 800329e:	f008 ff4f 	bl	800c140 <xTimerPendFunctionCallFromISR>
							  SL_WFX_RX_PACKET_AVAILABLE,
							  &xHigherPriorityTaskWoken);
  }

  HAL_GPIO_EXTI_IRQHandler(WFM_SPI_WIRQ_Pin);
 80032a2:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80032a6:	f001 fafb 	bl	80048a0 <HAL_GPIO_EXTI_IRQHandler>
  portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d007      	beq.n	80032c0 <EXTI15_10_IRQHandler+0x58>
 80032b0:	4b09      	ldr	r3, [pc, #36]	; (80032d8 <EXTI15_10_IRQHandler+0x70>)
 80032b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032b6:	601a      	str	r2, [r3, #0]
 80032b8:	f3bf 8f4f 	dsb	sy
 80032bc:	f3bf 8f6f 	isb	sy

}
 80032c0:	bf00      	nop
 80032c2:	3708      	adds	r7, #8
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}
 80032c8:	40013c00 	.word	0x40013c00
 80032cc:	20001124 	.word	0x20001124
 80032d0:	20001260 	.word	0x20001260
 80032d4:	080098af 	.word	0x080098af
 80032d8:	e000ed04 	.word	0xe000ed04

080032dc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80032e0:	4802      	ldr	r0, [pc, #8]	; (80032ec <DMA2_Stream0_IRQHandler+0x10>)
 80032e2:	f000 fcb3 	bl	8003c4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80032e6:	bf00      	nop
 80032e8:	bd80      	pop	{r7, pc}
 80032ea:	bf00      	nop
 80032ec:	200011f8 	.word	0x200011f8

080032f0 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_tx);
 80032f4:	4802      	ldr	r0, [pc, #8]	; (8003300 <DMA2_Stream1_IRQHandler+0x10>)
 80032f6:	f000 fca9 	bl	8003c4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80032fa:	bf00      	nop
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	bf00      	nop
 8003300:	20000780 	.word	0x20000780

08003304 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8003308:	4802      	ldr	r0, [pc, #8]	; (8003314 <DMA2_Stream2_IRQHandler+0x10>)
 800330a:	f000 fc9f 	bl	8003c4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800330e:	bf00      	nop
 8003310:	bd80      	pop	{r7, pc}
 8003312:	bf00      	nop
 8003314:	20001198 	.word	0x20001198

08003318 <DMA2_Stream3_IRQHandler>:
/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)

{
 8003318:	b580      	push	{r7, lr}
 800331a:	b082      	sub	sp, #8
 800331c:	af00      	add	r7, sp, #0
	 BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800331e:	2300      	movs	r3, #0
 8003320:	607b      	str	r3, [r7, #4]
	HAL_DMA_IRQHandler_SPI4(&hdma_spi4_rx);
 8003322:	4809      	ldr	r0, [pc, #36]	; (8003348 <DMA2_Stream3_IRQHandler+0x30>)
 8003324:	f000 fe1c 	bl	8003f60 <HAL_DMA_IRQHandler_SPI4>


	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d007      	beq.n	800333e <DMA2_Stream3_IRQHandler+0x26>
 800332e:	4b07      	ldr	r3, [pc, #28]	; (800334c <DMA2_Stream3_IRQHandler+0x34>)
 8003330:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003334:	601a      	str	r2, [r3, #0]
 8003336:	f3bf 8f4f 	dsb	sy
 800333a:	f3bf 8f6f 	isb	sy

}
 800333e:	bf00      	nop
 8003340:	3708      	adds	r7, #8
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
 8003346:	bf00      	nop
 8003348:	20000720 	.word	0x20000720
 800334c:	e000ed04 	.word	0xe000ed04

08003350 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003350:	b480      	push	{r7}
 8003352:	af00      	add	r7, sp, #0
	return 1;
 8003354:	2301      	movs	r3, #1
}
 8003356:	4618      	mov	r0, r3
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr

08003360 <_kill>:

int _kill(int pid, int sig)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b082      	sub	sp, #8
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
 8003368:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800336a:	f016 fc91 	bl	8019c90 <__errno>
 800336e:	4603      	mov	r3, r0
 8003370:	2216      	movs	r2, #22
 8003372:	601a      	str	r2, [r3, #0]
	return -1;
 8003374:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003378:	4618      	mov	r0, r3
 800337a:	3708      	adds	r7, #8
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}

08003380 <_exit>:

void _exit (int status)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b082      	sub	sp, #8
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003388:	f04f 31ff 	mov.w	r1, #4294967295
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	f7ff ffe7 	bl	8003360 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003392:	e7fe      	b.n	8003392 <_exit+0x12>

08003394 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b086      	sub	sp, #24
 8003398:	af00      	add	r7, sp, #0
 800339a:	60f8      	str	r0, [r7, #12]
 800339c:	60b9      	str	r1, [r7, #8]
 800339e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033a0:	2300      	movs	r3, #0
 80033a2:	617b      	str	r3, [r7, #20]
 80033a4:	e00a      	b.n	80033bc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80033a6:	f3af 8000 	nop.w
 80033aa:	4601      	mov	r1, r0
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	1c5a      	adds	r2, r3, #1
 80033b0:	60ba      	str	r2, [r7, #8]
 80033b2:	b2ca      	uxtb	r2, r1
 80033b4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	3301      	adds	r3, #1
 80033ba:	617b      	str	r3, [r7, #20]
 80033bc:	697a      	ldr	r2, [r7, #20]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	429a      	cmp	r2, r3
 80033c2:	dbf0      	blt.n	80033a6 <_read+0x12>
	}

return len;
 80033c4:	687b      	ldr	r3, [r7, #4]
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3718      	adds	r7, #24
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}

080033ce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80033ce:	b580      	push	{r7, lr}
 80033d0:	b086      	sub	sp, #24
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	60f8      	str	r0, [r7, #12]
 80033d6:	60b9      	str	r1, [r7, #8]
 80033d8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033da:	2300      	movs	r3, #0
 80033dc:	617b      	str	r3, [r7, #20]
 80033de:	e009      	b.n	80033f4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	1c5a      	adds	r2, r3, #1
 80033e4:	60ba      	str	r2, [r7, #8]
 80033e6:	781b      	ldrb	r3, [r3, #0]
 80033e8:	4618      	mov	r0, r3
 80033ea:	f7ff fc13 	bl	8002c14 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	3301      	adds	r3, #1
 80033f2:	617b      	str	r3, [r7, #20]
 80033f4:	697a      	ldr	r2, [r7, #20]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	429a      	cmp	r2, r3
 80033fa:	dbf1      	blt.n	80033e0 <_write+0x12>
	}
	return len;
 80033fc:	687b      	ldr	r3, [r7, #4]
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3718      	adds	r7, #24
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}

08003406 <_close>:

int _close(int file)
{
 8003406:	b480      	push	{r7}
 8003408:	b083      	sub	sp, #12
 800340a:	af00      	add	r7, sp, #0
 800340c:	6078      	str	r0, [r7, #4]
	return -1;
 800340e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003412:	4618      	mov	r0, r3
 8003414:	370c      	adds	r7, #12
 8003416:	46bd      	mov	sp, r7
 8003418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341c:	4770      	bx	lr

0800341e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800341e:	b480      	push	{r7}
 8003420:	b083      	sub	sp, #12
 8003422:	af00      	add	r7, sp, #0
 8003424:	6078      	str	r0, [r7, #4]
 8003426:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800342e:	605a      	str	r2, [r3, #4]
	return 0;
 8003430:	2300      	movs	r3, #0
}
 8003432:	4618      	mov	r0, r3
 8003434:	370c      	adds	r7, #12
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr

0800343e <_isatty>:

int _isatty(int file)
{
 800343e:	b480      	push	{r7}
 8003440:	b083      	sub	sp, #12
 8003442:	af00      	add	r7, sp, #0
 8003444:	6078      	str	r0, [r7, #4]
	return 1;
 8003446:	2301      	movs	r3, #1
}
 8003448:	4618      	mov	r0, r3
 800344a:	370c      	adds	r7, #12
 800344c:	46bd      	mov	sp, r7
 800344e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003452:	4770      	bx	lr

08003454 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003454:	b480      	push	{r7}
 8003456:	b085      	sub	sp, #20
 8003458:	af00      	add	r7, sp, #0
 800345a:	60f8      	str	r0, [r7, #12]
 800345c:	60b9      	str	r1, [r7, #8]
 800345e:	607a      	str	r2, [r7, #4]
	return 0;
 8003460:	2300      	movs	r3, #0
}
 8003462:	4618      	mov	r0, r3
 8003464:	3714      	adds	r7, #20
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr
	...

08003470 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b086      	sub	sp, #24
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003478:	4a14      	ldr	r2, [pc, #80]	; (80034cc <_sbrk+0x5c>)
 800347a:	4b15      	ldr	r3, [pc, #84]	; (80034d0 <_sbrk+0x60>)
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003484:	4b13      	ldr	r3, [pc, #76]	; (80034d4 <_sbrk+0x64>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d102      	bne.n	8003492 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800348c:	4b11      	ldr	r3, [pc, #68]	; (80034d4 <_sbrk+0x64>)
 800348e:	4a12      	ldr	r2, [pc, #72]	; (80034d8 <_sbrk+0x68>)
 8003490:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003492:	4b10      	ldr	r3, [pc, #64]	; (80034d4 <_sbrk+0x64>)
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	4413      	add	r3, r2
 800349a:	693a      	ldr	r2, [r7, #16]
 800349c:	429a      	cmp	r2, r3
 800349e:	d207      	bcs.n	80034b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80034a0:	f016 fbf6 	bl	8019c90 <__errno>
 80034a4:	4603      	mov	r3, r0
 80034a6:	220c      	movs	r2, #12
 80034a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80034aa:	f04f 33ff 	mov.w	r3, #4294967295
 80034ae:	e009      	b.n	80034c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80034b0:	4b08      	ldr	r3, [pc, #32]	; (80034d4 <_sbrk+0x64>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80034b6:	4b07      	ldr	r3, [pc, #28]	; (80034d4 <_sbrk+0x64>)
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	4413      	add	r3, r2
 80034be:	4a05      	ldr	r2, [pc, #20]	; (80034d4 <_sbrk+0x64>)
 80034c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80034c2:	68fb      	ldr	r3, [r7, #12]
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	3718      	adds	r7, #24
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}
 80034cc:	20020000 	.word	0x20020000
 80034d0:	00000400 	.word	0x00000400
 80034d4:	200007e0 	.word	0x200007e0
 80034d8:	20013c70 	.word	0x20013c70

080034dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80034dc:	b480      	push	{r7}
 80034de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80034e0:	4b06      	ldr	r3, [pc, #24]	; (80034fc <SystemInit+0x20>)
 80034e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034e6:	4a05      	ldr	r2, [pc, #20]	; (80034fc <SystemInit+0x20>)
 80034e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80034ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80034f0:	bf00      	nop
 80034f2:	46bd      	mov	sp, r7
 80034f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f8:	4770      	bx	lr
 80034fa:	bf00      	nop
 80034fc:	e000ed00 	.word	0xe000ed00

08003500 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003500:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003538 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003504:	480d      	ldr	r0, [pc, #52]	; (800353c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003506:	490e      	ldr	r1, [pc, #56]	; (8003540 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003508:	4a0e      	ldr	r2, [pc, #56]	; (8003544 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800350a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800350c:	e002      	b.n	8003514 <LoopCopyDataInit>

0800350e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800350e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003510:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003512:	3304      	adds	r3, #4

08003514 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003514:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003516:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003518:	d3f9      	bcc.n	800350e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800351a:	4a0b      	ldr	r2, [pc, #44]	; (8003548 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800351c:	4c0b      	ldr	r4, [pc, #44]	; (800354c <LoopFillZerobss+0x26>)
  movs r3, #0
 800351e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003520:	e001      	b.n	8003526 <LoopFillZerobss>

08003522 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003522:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003524:	3204      	adds	r2, #4

08003526 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003526:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003528:	d3fb      	bcc.n	8003522 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800352a:	f7ff ffd7 	bl	80034dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800352e:	f016 fbb5 	bl	8019c9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003532:	f7ff f995 	bl	8002860 <main>
  bx  lr    
 8003536:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003538:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800353c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003540:	2000012c 	.word	0x2000012c
  ldr r2, =_sidata
 8003544:	0806a6a0 	.word	0x0806a6a0
  ldr r2, =_sbss
 8003548:	2000012c 	.word	0x2000012c
  ldr r4, =_ebss
 800354c:	20013c6c 	.word	0x20013c6c

08003550 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003550:	e7fe      	b.n	8003550 <ADC_IRQHandler>
	...

08003554 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003558:	4b0e      	ldr	r3, [pc, #56]	; (8003594 <HAL_Init+0x40>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a0d      	ldr	r2, [pc, #52]	; (8003594 <HAL_Init+0x40>)
 800355e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003562:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003564:	4b0b      	ldr	r3, [pc, #44]	; (8003594 <HAL_Init+0x40>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a0a      	ldr	r2, [pc, #40]	; (8003594 <HAL_Init+0x40>)
 800356a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800356e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003570:	4b08      	ldr	r3, [pc, #32]	; (8003594 <HAL_Init+0x40>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a07      	ldr	r2, [pc, #28]	; (8003594 <HAL_Init+0x40>)
 8003576:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800357a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800357c:	2003      	movs	r0, #3
 800357e:	f000 f973 	bl	8003868 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003582:	200f      	movs	r0, #15
 8003584:	f000 f808 	bl	8003598 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003588:	f7ff fb5c 	bl	8002c44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800358c:	2300      	movs	r3, #0
}
 800358e:	4618      	mov	r0, r3
 8003590:	bd80      	pop	{r7, pc}
 8003592:	bf00      	nop
 8003594:	40023c00 	.word	0x40023c00

08003598 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b082      	sub	sp, #8
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80035a0:	4b12      	ldr	r3, [pc, #72]	; (80035ec <HAL_InitTick+0x54>)
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	4b12      	ldr	r3, [pc, #72]	; (80035f0 <HAL_InitTick+0x58>)
 80035a6:	781b      	ldrb	r3, [r3, #0]
 80035a8:	4619      	mov	r1, r3
 80035aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80035ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80035b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80035b6:	4618      	mov	r0, r3
 80035b8:	f000 f999 	bl	80038ee <HAL_SYSTICK_Config>
 80035bc:	4603      	mov	r3, r0
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d001      	beq.n	80035c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e00e      	b.n	80035e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2b0f      	cmp	r3, #15
 80035ca:	d80a      	bhi.n	80035e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80035cc:	2200      	movs	r2, #0
 80035ce:	6879      	ldr	r1, [r7, #4]
 80035d0:	f04f 30ff 	mov.w	r0, #4294967295
 80035d4:	f000 f953 	bl	800387e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80035d8:	4a06      	ldr	r2, [pc, #24]	; (80035f4 <HAL_InitTick+0x5c>)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80035de:	2300      	movs	r3, #0
 80035e0:	e000      	b.n	80035e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	3708      	adds	r7, #8
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}
 80035ec:	200000a8 	.word	0x200000a8
 80035f0:	200000b0 	.word	0x200000b0
 80035f4:	200000ac 	.word	0x200000ac

080035f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80035f8:	b480      	push	{r7}
 80035fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80035fc:	4b06      	ldr	r3, [pc, #24]	; (8003618 <HAL_IncTick+0x20>)
 80035fe:	781b      	ldrb	r3, [r3, #0]
 8003600:	461a      	mov	r2, r3
 8003602:	4b06      	ldr	r3, [pc, #24]	; (800361c <HAL_IncTick+0x24>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4413      	add	r3, r2
 8003608:	4a04      	ldr	r2, [pc, #16]	; (800361c <HAL_IncTick+0x24>)
 800360a:	6013      	str	r3, [r2, #0]
}
 800360c:	bf00      	nop
 800360e:	46bd      	mov	sp, r7
 8003610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003614:	4770      	bx	lr
 8003616:	bf00      	nop
 8003618:	200000b0 	.word	0x200000b0
 800361c:	200007e4 	.word	0x200007e4

08003620 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003620:	b480      	push	{r7}
 8003622:	af00      	add	r7, sp, #0
  return uwTick;
 8003624:	4b03      	ldr	r3, [pc, #12]	; (8003634 <HAL_GetTick+0x14>)
 8003626:	681b      	ldr	r3, [r3, #0]
}
 8003628:	4618      	mov	r0, r3
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr
 8003632:	bf00      	nop
 8003634:	200007e4 	.word	0x200007e4

08003638 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b084      	sub	sp, #16
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003640:	f7ff ffee 	bl	8003620 <HAL_GetTick>
 8003644:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003650:	d005      	beq.n	800365e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003652:	4b0a      	ldr	r3, [pc, #40]	; (800367c <HAL_Delay+0x44>)
 8003654:	781b      	ldrb	r3, [r3, #0]
 8003656:	461a      	mov	r2, r3
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	4413      	add	r3, r2
 800365c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800365e:	bf00      	nop
 8003660:	f7ff ffde 	bl	8003620 <HAL_GetTick>
 8003664:	4602      	mov	r2, r0
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	68fa      	ldr	r2, [r7, #12]
 800366c:	429a      	cmp	r2, r3
 800366e:	d8f7      	bhi.n	8003660 <HAL_Delay+0x28>
  {
  }
}
 8003670:	bf00      	nop
 8003672:	bf00      	nop
 8003674:	3710      	adds	r7, #16
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}
 800367a:	bf00      	nop
 800367c:	200000b0 	.word	0x200000b0

08003680 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003680:	b480      	push	{r7}
 8003682:	b085      	sub	sp, #20
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	f003 0307 	and.w	r3, r3, #7
 800368e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003690:	4b0c      	ldr	r3, [pc, #48]	; (80036c4 <__NVIC_SetPriorityGrouping+0x44>)
 8003692:	68db      	ldr	r3, [r3, #12]
 8003694:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003696:	68ba      	ldr	r2, [r7, #8]
 8003698:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800369c:	4013      	ands	r3, r2
 800369e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80036a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80036ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80036b2:	4a04      	ldr	r2, [pc, #16]	; (80036c4 <__NVIC_SetPriorityGrouping+0x44>)
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	60d3      	str	r3, [r2, #12]
}
 80036b8:	bf00      	nop
 80036ba:	3714      	adds	r7, #20
 80036bc:	46bd      	mov	sp, r7
 80036be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c2:	4770      	bx	lr
 80036c4:	e000ed00 	.word	0xe000ed00

080036c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80036c8:	b480      	push	{r7}
 80036ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80036cc:	4b04      	ldr	r3, [pc, #16]	; (80036e0 <__NVIC_GetPriorityGrouping+0x18>)
 80036ce:	68db      	ldr	r3, [r3, #12]
 80036d0:	0a1b      	lsrs	r3, r3, #8
 80036d2:	f003 0307 	and.w	r3, r3, #7
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	46bd      	mov	sp, r7
 80036da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036de:	4770      	bx	lr
 80036e0:	e000ed00 	.word	0xe000ed00

080036e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b083      	sub	sp, #12
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	4603      	mov	r3, r0
 80036ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	db0b      	blt.n	800370e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036f6:	79fb      	ldrb	r3, [r7, #7]
 80036f8:	f003 021f 	and.w	r2, r3, #31
 80036fc:	4907      	ldr	r1, [pc, #28]	; (800371c <__NVIC_EnableIRQ+0x38>)
 80036fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003702:	095b      	lsrs	r3, r3, #5
 8003704:	2001      	movs	r0, #1
 8003706:	fa00 f202 	lsl.w	r2, r0, r2
 800370a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800370e:	bf00      	nop
 8003710:	370c      	adds	r7, #12
 8003712:	46bd      	mov	sp, r7
 8003714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003718:	4770      	bx	lr
 800371a:	bf00      	nop
 800371c:	e000e100 	.word	0xe000e100

08003720 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003720:	b480      	push	{r7}
 8003722:	b083      	sub	sp, #12
 8003724:	af00      	add	r7, sp, #0
 8003726:	4603      	mov	r3, r0
 8003728:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800372a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800372e:	2b00      	cmp	r3, #0
 8003730:	db12      	blt.n	8003758 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003732:	79fb      	ldrb	r3, [r7, #7]
 8003734:	f003 021f 	and.w	r2, r3, #31
 8003738:	490a      	ldr	r1, [pc, #40]	; (8003764 <__NVIC_DisableIRQ+0x44>)
 800373a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800373e:	095b      	lsrs	r3, r3, #5
 8003740:	2001      	movs	r0, #1
 8003742:	fa00 f202 	lsl.w	r2, r0, r2
 8003746:	3320      	adds	r3, #32
 8003748:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800374c:	f3bf 8f4f 	dsb	sy
}
 8003750:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003752:	f3bf 8f6f 	isb	sy
}
 8003756:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003758:	bf00      	nop
 800375a:	370c      	adds	r7, #12
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr
 8003764:	e000e100 	.word	0xe000e100

08003768 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003768:	b480      	push	{r7}
 800376a:	b083      	sub	sp, #12
 800376c:	af00      	add	r7, sp, #0
 800376e:	4603      	mov	r3, r0
 8003770:	6039      	str	r1, [r7, #0]
 8003772:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003774:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003778:	2b00      	cmp	r3, #0
 800377a:	db0a      	blt.n	8003792 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	b2da      	uxtb	r2, r3
 8003780:	490c      	ldr	r1, [pc, #48]	; (80037b4 <__NVIC_SetPriority+0x4c>)
 8003782:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003786:	0112      	lsls	r2, r2, #4
 8003788:	b2d2      	uxtb	r2, r2
 800378a:	440b      	add	r3, r1
 800378c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003790:	e00a      	b.n	80037a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	b2da      	uxtb	r2, r3
 8003796:	4908      	ldr	r1, [pc, #32]	; (80037b8 <__NVIC_SetPriority+0x50>)
 8003798:	79fb      	ldrb	r3, [r7, #7]
 800379a:	f003 030f 	and.w	r3, r3, #15
 800379e:	3b04      	subs	r3, #4
 80037a0:	0112      	lsls	r2, r2, #4
 80037a2:	b2d2      	uxtb	r2, r2
 80037a4:	440b      	add	r3, r1
 80037a6:	761a      	strb	r2, [r3, #24]
}
 80037a8:	bf00      	nop
 80037aa:	370c      	adds	r7, #12
 80037ac:	46bd      	mov	sp, r7
 80037ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b2:	4770      	bx	lr
 80037b4:	e000e100 	.word	0xe000e100
 80037b8:	e000ed00 	.word	0xe000ed00

080037bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037bc:	b480      	push	{r7}
 80037be:	b089      	sub	sp, #36	; 0x24
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	60f8      	str	r0, [r7, #12]
 80037c4:	60b9      	str	r1, [r7, #8]
 80037c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	f003 0307 	and.w	r3, r3, #7
 80037ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80037d0:	69fb      	ldr	r3, [r7, #28]
 80037d2:	f1c3 0307 	rsb	r3, r3, #7
 80037d6:	2b04      	cmp	r3, #4
 80037d8:	bf28      	it	cs
 80037da:	2304      	movcs	r3, #4
 80037dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80037de:	69fb      	ldr	r3, [r7, #28]
 80037e0:	3304      	adds	r3, #4
 80037e2:	2b06      	cmp	r3, #6
 80037e4:	d902      	bls.n	80037ec <NVIC_EncodePriority+0x30>
 80037e6:	69fb      	ldr	r3, [r7, #28]
 80037e8:	3b03      	subs	r3, #3
 80037ea:	e000      	b.n	80037ee <NVIC_EncodePriority+0x32>
 80037ec:	2300      	movs	r3, #0
 80037ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037f0:	f04f 32ff 	mov.w	r2, #4294967295
 80037f4:	69bb      	ldr	r3, [r7, #24]
 80037f6:	fa02 f303 	lsl.w	r3, r2, r3
 80037fa:	43da      	mvns	r2, r3
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	401a      	ands	r2, r3
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003804:	f04f 31ff 	mov.w	r1, #4294967295
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	fa01 f303 	lsl.w	r3, r1, r3
 800380e:	43d9      	mvns	r1, r3
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003814:	4313      	orrs	r3, r2
         );
}
 8003816:	4618      	mov	r0, r3
 8003818:	3724      	adds	r7, #36	; 0x24
 800381a:	46bd      	mov	sp, r7
 800381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003820:	4770      	bx	lr
	...

08003824 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b082      	sub	sp, #8
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	3b01      	subs	r3, #1
 8003830:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003834:	d301      	bcc.n	800383a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003836:	2301      	movs	r3, #1
 8003838:	e00f      	b.n	800385a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800383a:	4a0a      	ldr	r2, [pc, #40]	; (8003864 <SysTick_Config+0x40>)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	3b01      	subs	r3, #1
 8003840:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003842:	210f      	movs	r1, #15
 8003844:	f04f 30ff 	mov.w	r0, #4294967295
 8003848:	f7ff ff8e 	bl	8003768 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800384c:	4b05      	ldr	r3, [pc, #20]	; (8003864 <SysTick_Config+0x40>)
 800384e:	2200      	movs	r2, #0
 8003850:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003852:	4b04      	ldr	r3, [pc, #16]	; (8003864 <SysTick_Config+0x40>)
 8003854:	2207      	movs	r2, #7
 8003856:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003858:	2300      	movs	r3, #0
}
 800385a:	4618      	mov	r0, r3
 800385c:	3708      	adds	r7, #8
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}
 8003862:	bf00      	nop
 8003864:	e000e010 	.word	0xe000e010

08003868 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b082      	sub	sp, #8
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003870:	6878      	ldr	r0, [r7, #4]
 8003872:	f7ff ff05 	bl	8003680 <__NVIC_SetPriorityGrouping>
}
 8003876:	bf00      	nop
 8003878:	3708      	adds	r7, #8
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}

0800387e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800387e:	b580      	push	{r7, lr}
 8003880:	b086      	sub	sp, #24
 8003882:	af00      	add	r7, sp, #0
 8003884:	4603      	mov	r3, r0
 8003886:	60b9      	str	r1, [r7, #8]
 8003888:	607a      	str	r2, [r7, #4]
 800388a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800388c:	2300      	movs	r3, #0
 800388e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003890:	f7ff ff1a 	bl	80036c8 <__NVIC_GetPriorityGrouping>
 8003894:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003896:	687a      	ldr	r2, [r7, #4]
 8003898:	68b9      	ldr	r1, [r7, #8]
 800389a:	6978      	ldr	r0, [r7, #20]
 800389c:	f7ff ff8e 	bl	80037bc <NVIC_EncodePriority>
 80038a0:	4602      	mov	r2, r0
 80038a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038a6:	4611      	mov	r1, r2
 80038a8:	4618      	mov	r0, r3
 80038aa:	f7ff ff5d 	bl	8003768 <__NVIC_SetPriority>
}
 80038ae:	bf00      	nop
 80038b0:	3718      	adds	r7, #24
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}

080038b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038b6:	b580      	push	{r7, lr}
 80038b8:	b082      	sub	sp, #8
 80038ba:	af00      	add	r7, sp, #0
 80038bc:	4603      	mov	r3, r0
 80038be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80038c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038c4:	4618      	mov	r0, r3
 80038c6:	f7ff ff0d 	bl	80036e4 <__NVIC_EnableIRQ>
}
 80038ca:	bf00      	nop
 80038cc:	3708      	adds	r7, #8
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}

080038d2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80038d2:	b580      	push	{r7, lr}
 80038d4:	b082      	sub	sp, #8
 80038d6:	af00      	add	r7, sp, #0
 80038d8:	4603      	mov	r3, r0
 80038da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80038dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038e0:	4618      	mov	r0, r3
 80038e2:	f7ff ff1d 	bl	8003720 <__NVIC_DisableIRQ>
}
 80038e6:	bf00      	nop
 80038e8:	3708      	adds	r7, #8
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}

080038ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80038ee:	b580      	push	{r7, lr}
 80038f0:	b082      	sub	sp, #8
 80038f2:	af00      	add	r7, sp, #0
 80038f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f7ff ff94 	bl	8003824 <SysTick_Config>
 80038fc:	4603      	mov	r3, r0
}
 80038fe:	4618      	mov	r0, r3
 8003900:	3708      	adds	r7, #8
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}
	...

08003908 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8003908:	b480      	push	{r7}
 800390a:	b083      	sub	sp, #12
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2b04      	cmp	r3, #4
 8003914:	d106      	bne.n	8003924 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8003916:	4b09      	ldr	r3, [pc, #36]	; (800393c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a08      	ldr	r2, [pc, #32]	; (800393c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800391c:	f043 0304 	orr.w	r3, r3, #4
 8003920:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8003922:	e005      	b.n	8003930 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8003924:	4b05      	ldr	r3, [pc, #20]	; (800393c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a04      	ldr	r2, [pc, #16]	; (800393c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800392a:	f023 0304 	bic.w	r3, r3, #4
 800392e:	6013      	str	r3, [r2, #0]
}
 8003930:	bf00      	nop
 8003932:	370c      	adds	r7, #12
 8003934:	46bd      	mov	sp, r7
 8003936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393a:	4770      	bx	lr
 800393c:	e000e010 	.word	0xe000e010

08003940 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b086      	sub	sp, #24
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003948:	2300      	movs	r3, #0
 800394a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800394c:	f7ff fe68 	bl	8003620 <HAL_GetTick>
 8003950:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d101      	bne.n	800395c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	e099      	b.n	8003a90 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2202      	movs	r2, #2
 8003960:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2200      	movs	r2, #0
 8003968:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f022 0201 	bic.w	r2, r2, #1
 800397a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800397c:	e00f      	b.n	800399e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800397e:	f7ff fe4f 	bl	8003620 <HAL_GetTick>
 8003982:	4602      	mov	r2, r0
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	1ad3      	subs	r3, r2, r3
 8003988:	2b05      	cmp	r3, #5
 800398a:	d908      	bls.n	800399e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2220      	movs	r2, #32
 8003990:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2203      	movs	r2, #3
 8003996:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800399a:	2303      	movs	r3, #3
 800399c:	e078      	b.n	8003a90 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f003 0301 	and.w	r3, r3, #1
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d1e8      	bne.n	800397e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80039b4:	697a      	ldr	r2, [r7, #20]
 80039b6:	4b38      	ldr	r3, [pc, #224]	; (8003a98 <HAL_DMA_Init+0x158>)
 80039b8:	4013      	ands	r3, r2
 80039ba:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	685a      	ldr	r2, [r3, #4]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80039ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	691b      	ldr	r3, [r3, #16]
 80039d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	699b      	ldr	r3, [r3, #24]
 80039dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6a1b      	ldr	r3, [r3, #32]
 80039e8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80039ea:	697a      	ldr	r2, [r7, #20]
 80039ec:	4313      	orrs	r3, r2
 80039ee:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f4:	2b04      	cmp	r3, #4
 80039f6:	d107      	bne.n	8003a08 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a00:	4313      	orrs	r3, r2
 8003a02:	697a      	ldr	r2, [r7, #20]
 8003a04:	4313      	orrs	r3, r2
 8003a06:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	697a      	ldr	r2, [r7, #20]
 8003a0e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	695b      	ldr	r3, [r3, #20]
 8003a16:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	f023 0307 	bic.w	r3, r3, #7
 8003a1e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a24:	697a      	ldr	r2, [r7, #20]
 8003a26:	4313      	orrs	r3, r2
 8003a28:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a2e:	2b04      	cmp	r3, #4
 8003a30:	d117      	bne.n	8003a62 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a36:	697a      	ldr	r2, [r7, #20]
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d00e      	beq.n	8003a62 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003a44:	6878      	ldr	r0, [r7, #4]
 8003a46:	f000 fc2d 	bl	80042a4 <DMA_CheckFifoParam>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d008      	beq.n	8003a62 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2240      	movs	r2, #64	; 0x40
 8003a54:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2201      	movs	r2, #1
 8003a5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e016      	b.n	8003a90 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	697a      	ldr	r2, [r7, #20]
 8003a68:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f000 fbe4 	bl	8004238 <DMA_CalcBaseAndBitshift>
 8003a70:	4603      	mov	r3, r0
 8003a72:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a78:	223f      	movs	r2, #63	; 0x3f
 8003a7a:	409a      	lsls	r2, r3
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2200      	movs	r2, #0
 8003a84:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2201      	movs	r2, #1
 8003a8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003a8e:	2300      	movs	r3, #0
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3718      	adds	r7, #24
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}
 8003a98:	f010803f 	.word	0xf010803f

08003a9c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b084      	sub	sp, #16
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d101      	bne.n	8003aae <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e050      	b.n	8003b50 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	2b02      	cmp	r3, #2
 8003ab8:	d101      	bne.n	8003abe <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8003aba:	2302      	movs	r3, #2
 8003abc:	e048      	b.n	8003b50 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	681a      	ldr	r2, [r3, #0]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f022 0201 	bic.w	r2, r2, #1
 8003acc:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	2200      	movs	r2, #0
 8003adc:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	2200      	movs	r2, #0
 8003aec:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	2200      	movs	r2, #0
 8003af4:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	2221      	movs	r2, #33	; 0x21
 8003afc:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f000 fb9a 	bl	8004238 <DMA_CalcBaseAndBitshift>
 8003b04:	4603      	mov	r3, r0
 8003b06:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2200      	movs	r2, #0
 8003b12:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2200      	movs	r2, #0
 8003b18:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2200      	movs	r2, #0
 8003b24:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b30:	223f      	movs	r2, #63	; 0x3f
 8003b32:	409a      	lsls	r2, r3
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2200      	movs	r2, #0
 8003b42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003b4e:	2300      	movs	r3, #0
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	3710      	adds	r7, #16
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}

08003b58 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b086      	sub	sp, #24
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	60f8      	str	r0, [r7, #12]
 8003b60:	60b9      	str	r1, [r7, #8]
 8003b62:	607a      	str	r2, [r7, #4]
 8003b64:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b66:	2300      	movs	r3, #0
 8003b68:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b6e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d101      	bne.n	8003b7e <HAL_DMA_Start_IT+0x26>
 8003b7a:	2302      	movs	r3, #2
 8003b7c:	e040      	b.n	8003c00 <HAL_DMA_Start_IT+0xa8>
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2201      	movs	r2, #1
 8003b82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d12f      	bne.n	8003bf2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2202      	movs	r2, #2
 8003b96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	687a      	ldr	r2, [r7, #4]
 8003ba4:	68b9      	ldr	r1, [r7, #8]
 8003ba6:	68f8      	ldr	r0, [r7, #12]
 8003ba8:	f000 fb18 	bl	80041dc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bb0:	223f      	movs	r2, #63	; 0x3f
 8003bb2:	409a      	lsls	r2, r3
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f042 0216 	orr.w	r2, r2, #22
 8003bc6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d007      	beq.n	8003be0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	681a      	ldr	r2, [r3, #0]
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f042 0208 	orr.w	r2, r2, #8
 8003bde:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f042 0201 	orr.w	r2, r2, #1
 8003bee:	601a      	str	r2, [r3, #0]
 8003bf0:	e005      	b.n	8003bfe <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003bfa:	2302      	movs	r3, #2
 8003bfc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003bfe:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	3718      	adds	r7, #24
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}

08003c08 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b083      	sub	sp, #12
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c16:	b2db      	uxtb	r3, r3
 8003c18:	2b02      	cmp	r3, #2
 8003c1a:	d004      	beq.n	8003c26 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2280      	movs	r2, #128	; 0x80
 8003c20:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	e00c      	b.n	8003c40 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2205      	movs	r2, #5
 8003c2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f022 0201 	bic.w	r2, r2, #1
 8003c3c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003c3e:	2300      	movs	r3, #0
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	370c      	adds	r7, #12
 8003c44:	46bd      	mov	sp, r7
 8003c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4a:	4770      	bx	lr

08003c4c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b086      	sub	sp, #24
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003c54:	2300      	movs	r3, #0
 8003c56:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003c58:	4b8e      	ldr	r3, [pc, #568]	; (8003e94 <HAL_DMA_IRQHandler+0x248>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a8e      	ldr	r2, [pc, #568]	; (8003e98 <HAL_DMA_IRQHandler+0x24c>)
 8003c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c62:	0a9b      	lsrs	r3, r3, #10
 8003c64:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c6a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c76:	2208      	movs	r2, #8
 8003c78:	409a      	lsls	r2, r3
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d01a      	beq.n	8003cb8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f003 0304 	and.w	r3, r3, #4
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d013      	beq.n	8003cb8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f022 0204 	bic.w	r2, r2, #4
 8003c9e:	601a      	str	r2, [r3, #0]

      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ca4:	2208      	movs	r2, #8
 8003ca6:	409a      	lsls	r2, r3
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cb0:	f043 0201 	orr.w	r2, r3, #1
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	409a      	lsls	r2, r3
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	4013      	ands	r3, r2
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d012      	beq.n	8003cee <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	695b      	ldr	r3, [r3, #20]
 8003cce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d00b      	beq.n	8003cee <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cda:	2201      	movs	r2, #1
 8003cdc:	409a      	lsls	r2, r3
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ce6:	f043 0202 	orr.w	r2, r3, #2
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cf2:	2204      	movs	r2, #4
 8003cf4:	409a      	lsls	r2, r3
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	4013      	ands	r3, r2
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d012      	beq.n	8003d24 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f003 0302 	and.w	r3, r3, #2
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d00b      	beq.n	8003d24 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d10:	2204      	movs	r2, #4
 8003d12:	409a      	lsls	r2, r3
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d1c:	f043 0204 	orr.w	r2, r3, #4
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d28:	2210      	movs	r2, #16
 8003d2a:	409a      	lsls	r2, r3
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	4013      	ands	r3, r2
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d043      	beq.n	8003dbc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 0308 	and.w	r3, r3, #8
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d03c      	beq.n	8003dbc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d46:	2210      	movs	r2, #16
 8003d48:	409a      	lsls	r2, r3
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	609a      	str	r2, [r3, #8]

      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d018      	beq.n	8003d8e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d108      	bne.n	8003d7c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d024      	beq.n	8003dbc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	4798      	blx	r3
 8003d7a:	e01f      	b.n	8003dbc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d01b      	beq.n	8003dbc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d88:	6878      	ldr	r0, [r7, #4]
 8003d8a:	4798      	blx	r3
 8003d8c:	e016      	b.n	8003dbc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d107      	bne.n	8003dac <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f022 0208 	bic.w	r2, r2, #8
 8003daa:	601a      	str	r2, [r3, #0]
        }

        if(hdma->XferHalfCpltCallback != NULL)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d003      	beq.n	8003dbc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db8:	6878      	ldr	r0, [r7, #4]
 8003dba:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dc0:	2220      	movs	r2, #32
 8003dc2:	409a      	lsls	r2, r3
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	4013      	ands	r3, r2
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	f000 808f 	beq.w	8003eec <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 0310 	and.w	r3, r3, #16
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	f000 8087 	beq.w	8003eec <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003de2:	2220      	movs	r2, #32
 8003de4:	409a      	lsls	r2, r3
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	2b05      	cmp	r3, #5
 8003df4:	d136      	bne.n	8003e64 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f022 0216 	bic.w	r2, r2, #22
 8003e04:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	695a      	ldr	r2, [r3, #20]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e14:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d103      	bne.n	8003e26 <HAL_DMA_IRQHandler+0x1da>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d007      	beq.n	8003e36 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f022 0208 	bic.w	r2, r2, #8
 8003e34:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e3a:	223f      	movs	r2, #63	; 0x3f
 8003e3c:	409a      	lsls	r2, r3
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2201      	movs	r2, #1
 8003e46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d07e      	beq.n	8003f58 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	4798      	blx	r3
        }
        return;
 8003e62:	e079      	b.n	8003f58 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d01d      	beq.n	8003eae <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d10d      	bne.n	8003e9c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d031      	beq.n	8003eec <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e8c:	6878      	ldr	r0, [r7, #4]
 8003e8e:	4798      	blx	r3
 8003e90:	e02c      	b.n	8003eec <HAL_DMA_IRQHandler+0x2a0>
 8003e92:	bf00      	nop
 8003e94:	200000a8 	.word	0x200000a8
 8003e98:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d023      	beq.n	8003eec <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ea8:	6878      	ldr	r0, [r7, #4]
 8003eaa:	4798      	blx	r3
 8003eac:	e01e      	b.n	8003eec <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d10f      	bne.n	8003edc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f022 0210 	bic.w	r2, r2, #16
 8003eca:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2201      	movs	r2, #1
 8003ed0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d003      	beq.n	8003eec <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ee8:	6878      	ldr	r0, [r7, #4]
 8003eea:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d032      	beq.n	8003f5a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ef8:	f003 0301 	and.w	r3, r3, #1
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d022      	beq.n	8003f46 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2205      	movs	r2, #5
 8003f04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f022 0201 	bic.w	r2, r2, #1
 8003f16:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	3301      	adds	r3, #1
 8003f1c:	60bb      	str	r3, [r7, #8]
 8003f1e:	697a      	ldr	r2, [r7, #20]
 8003f20:	429a      	cmp	r2, r3
 8003f22:	d307      	bcc.n	8003f34 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 0301 	and.w	r3, r3, #1
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d1f2      	bne.n	8003f18 <HAL_DMA_IRQHandler+0x2cc>
 8003f32:	e000      	b.n	8003f36 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003f34:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2201      	movs	r2, #1
 8003f3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2200      	movs	r2, #0
 8003f42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d005      	beq.n	8003f5a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	4798      	blx	r3
 8003f56:	e000      	b.n	8003f5a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003f58:	bf00      	nop
    }
  }
}
 8003f5a:	3718      	adds	r7, #24
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}

08003f60 <HAL_DMA_IRQHandler_SPI4>:



void HAL_DMA_IRQHandler_SPI4(DMA_HandleTypeDef *hdma)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b086      	sub	sp, #24
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003f68:	2300      	movs	r3, #0
 8003f6a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003f6c:	4b8e      	ldr	r3, [pc, #568]	; (80041a8 <HAL_DMA_IRQHandler_SPI4+0x248>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a8e      	ldr	r2, [pc, #568]	; (80041ac <HAL_DMA_IRQHandler_SPI4+0x24c>)
 8003f72:	fba2 2303 	umull	r2, r3, r2, r3
 8003f76:	0a9b      	lsrs	r3, r3, #10
 8003f78:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f7e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f8a:	2208      	movs	r2, #8
 8003f8c:	409a      	lsls	r2, r3
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	4013      	ands	r3, r2
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d01a      	beq.n	8003fcc <HAL_DMA_IRQHandler_SPI4+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f003 0304 	and.w	r3, r3, #4
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d013      	beq.n	8003fcc <HAL_DMA_IRQHandler_SPI4+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	681a      	ldr	r2, [r3, #0]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f022 0204 	bic.w	r2, r2, #4
 8003fb2:	601a      	str	r2, [r3, #0]

      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fb8:	2208      	movs	r2, #8
 8003fba:	409a      	lsls	r2, r3
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fc4:	f043 0201 	orr.w	r2, r3, #1
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	409a      	lsls	r2, r3
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	4013      	ands	r3, r2
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d012      	beq.n	8004002 <HAL_DMA_IRQHandler_SPI4+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	695b      	ldr	r3, [r3, #20]
 8003fe2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d00b      	beq.n	8004002 <HAL_DMA_IRQHandler_SPI4+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fee:	2201      	movs	r2, #1
 8003ff0:	409a      	lsls	r2, r3
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ffa:	f043 0202 	orr.w	r2, r3, #2
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004006:	2204      	movs	r2, #4
 8004008:	409a      	lsls	r2, r3
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	4013      	ands	r3, r2
 800400e:	2b00      	cmp	r3, #0
 8004010:	d012      	beq.n	8004038 <HAL_DMA_IRQHandler_SPI4+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f003 0302 	and.w	r3, r3, #2
 800401c:	2b00      	cmp	r3, #0
 800401e:	d00b      	beq.n	8004038 <HAL_DMA_IRQHandler_SPI4+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004024:	2204      	movs	r2, #4
 8004026:	409a      	lsls	r2, r3
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004030:	f043 0204 	orr.w	r2, r3, #4
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	655a      	str	r2, [r3, #84]	; 0x54
//        }
//      }
//    }
//  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800403c:	2220      	movs	r2, #32
 800403e:	409a      	lsls	r2, r3
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	4013      	ands	r3, r2
 8004044:	2b00      	cmp	r3, #0
 8004046:	f000 808a 	beq.w	800415e <HAL_DMA_IRQHandler_SPI4+0x1fe>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f003 0310 	and.w	r3, r3, #16
 8004054:	2b00      	cmp	r3, #0
 8004056:	f000 8082 	beq.w	800415e <HAL_DMA_IRQHandler_SPI4+0x1fe>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800405e:	2220      	movs	r2, #32
 8004060:	409a      	lsls	r2, r3
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	609a      	str	r2, [r3, #8]

      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800406c:	b2db      	uxtb	r3, r3
 800406e:	2b05      	cmp	r3, #5
 8004070:	d136      	bne.n	80040e0 <HAL_DMA_IRQHandler_SPI4+0x180>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f022 0216 	bic.w	r2, r2, #22
 8004080:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	695a      	ldr	r2, [r3, #20]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004090:	615a      	str	r2, [r3, #20]

        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004096:	2b00      	cmp	r3, #0
 8004098:	d103      	bne.n	80040a2 <HAL_DMA_IRQHandler_SPI4+0x142>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d007      	beq.n	80040b2 <HAL_DMA_IRQHandler_SPI4+0x152>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f022 0208 	bic.w	r2, r2, #8
 80040b0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040b6:	223f      	movs	r2, #63	; 0x3f
 80040b8:	409a      	lsls	r2, r3
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2201      	movs	r2, #1
 80040c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2200      	movs	r2, #0
 80040ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d07e      	beq.n	80041d4 <HAL_DMA_IRQHandler_SPI4+0x274>
        {
          hdma->XferAbortCallback(hdma);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	4798      	blx	r3
        }
        return;
 80040de:	e079      	b.n	80041d4 <HAL_DMA_IRQHandler_SPI4+0x274>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d018      	beq.n	8004120 <HAL_DMA_IRQHandler_SPI4+0x1c0>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d108      	bne.n	800410e <HAL_DMA_IRQHandler_SPI4+0x1ae>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004100:	2b00      	cmp	r3, #0
 8004102:	d02c      	beq.n	800415e <HAL_DMA_IRQHandler_SPI4+0x1fe>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004108:	6878      	ldr	r0, [r7, #4]
 800410a:	4798      	blx	r3
 800410c:	e027      	b.n	800415e <HAL_DMA_IRQHandler_SPI4+0x1fe>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004112:	2b00      	cmp	r3, #0
 8004114:	d023      	beq.n	800415e <HAL_DMA_IRQHandler_SPI4+0x1fe>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	4798      	blx	r3
 800411e:	e01e      	b.n	800415e <HAL_DMA_IRQHandler_SPI4+0x1fe>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800412a:	2b00      	cmp	r3, #0
 800412c:	d10f      	bne.n	800414e <HAL_DMA_IRQHandler_SPI4+0x1ee>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	681a      	ldr	r2, [r3, #0]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f022 0210 	bic.w	r2, r2, #16
 800413c:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2201      	movs	r2, #1
 8004142:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2200      	movs	r2, #0
 800414a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004152:	2b00      	cmp	r3, #0
 8004154:	d003      	beq.n	800415e <HAL_DMA_IRQHandler_SPI4+0x1fe>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	4798      	blx	r3
      }
    }
  }

  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004162:	2b00      	cmp	r3, #0
 8004164:	d037      	beq.n	80041d6 <HAL_DMA_IRQHandler_SPI4+0x276>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800416a:	f003 0301 	and.w	r3, r3, #1
 800416e:	2b00      	cmp	r3, #0
 8004170:	d027      	beq.n	80041c2 <HAL_DMA_IRQHandler_SPI4+0x262>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2205      	movs	r2, #5
 8004176:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f022 0201 	bic.w	r2, r2, #1
 8004188:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	3301      	adds	r3, #1
 800418e:	60bb      	str	r3, [r7, #8]
 8004190:	697a      	ldr	r2, [r7, #20]
 8004192:	429a      	cmp	r2, r3
 8004194:	d30c      	bcc.n	80041b0 <HAL_DMA_IRQHandler_SPI4+0x250>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f003 0301 	and.w	r3, r3, #1
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d1f2      	bne.n	800418a <HAL_DMA_IRQHandler_SPI4+0x22a>
 80041a4:	e005      	b.n	80041b2 <HAL_DMA_IRQHandler_SPI4+0x252>
 80041a6:	bf00      	nop
 80041a8:	200000a8 	.word	0x200000a8
 80041ac:	1b4e81b5 	.word	0x1b4e81b5
          break;
 80041b0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2201      	movs	r2, #1
 80041b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2200      	movs	r2, #0
 80041be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d005      	beq.n	80041d6 <HAL_DMA_IRQHandler_SPI4+0x276>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	4798      	blx	r3
 80041d2:	e000      	b.n	80041d6 <HAL_DMA_IRQHandler_SPI4+0x276>
        return;
 80041d4:	bf00      	nop
    }
  }
}
 80041d6:	3718      	adds	r7, #24
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}

080041dc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80041dc:	b480      	push	{r7}
 80041de:	b085      	sub	sp, #20
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	60f8      	str	r0, [r7, #12]
 80041e4:	60b9      	str	r1, [r7, #8]
 80041e6:	607a      	str	r2, [r7, #4]
 80041e8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80041f8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	683a      	ldr	r2, [r7, #0]
 8004200:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	2b40      	cmp	r3, #64	; 0x40
 8004208:	d108      	bne.n	800421c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	687a      	ldr	r2, [r7, #4]
 8004210:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	68ba      	ldr	r2, [r7, #8]
 8004218:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800421a:	e007      	b.n	800422c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	68ba      	ldr	r2, [r7, #8]
 8004222:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	687a      	ldr	r2, [r7, #4]
 800422a:	60da      	str	r2, [r3, #12]
}
 800422c:	bf00      	nop
 800422e:	3714      	adds	r7, #20
 8004230:	46bd      	mov	sp, r7
 8004232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004236:	4770      	bx	lr

08004238 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004238:	b480      	push	{r7}
 800423a:	b085      	sub	sp, #20
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	b2db      	uxtb	r3, r3
 8004246:	3b10      	subs	r3, #16
 8004248:	4a14      	ldr	r2, [pc, #80]	; (800429c <DMA_CalcBaseAndBitshift+0x64>)
 800424a:	fba2 2303 	umull	r2, r3, r2, r3
 800424e:	091b      	lsrs	r3, r3, #4
 8004250:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004252:	4a13      	ldr	r2, [pc, #76]	; (80042a0 <DMA_CalcBaseAndBitshift+0x68>)
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	4413      	add	r3, r2
 8004258:	781b      	ldrb	r3, [r3, #0]
 800425a:	461a      	mov	r2, r3
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	2b03      	cmp	r3, #3
 8004264:	d909      	bls.n	800427a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800426e:	f023 0303 	bic.w	r3, r3, #3
 8004272:	1d1a      	adds	r2, r3, #4
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	659a      	str	r2, [r3, #88]	; 0x58
 8004278:	e007      	b.n	800428a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004282:	f023 0303 	bic.w	r3, r3, #3
 8004286:	687a      	ldr	r2, [r7, #4]
 8004288:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800428e:	4618      	mov	r0, r3
 8004290:	3714      	adds	r7, #20
 8004292:	46bd      	mov	sp, r7
 8004294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004298:	4770      	bx	lr
 800429a:	bf00      	nop
 800429c:	aaaaaaab 	.word	0xaaaaaaab
 80042a0:	0801ea4c 	.word	0x0801ea4c

080042a4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b085      	sub	sp, #20
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042ac:	2300      	movs	r3, #0
 80042ae:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042b4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	699b      	ldr	r3, [r3, #24]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d11f      	bne.n	80042fe <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	2b03      	cmp	r3, #3
 80042c2:	d856      	bhi.n	8004372 <DMA_CheckFifoParam+0xce>
 80042c4:	a201      	add	r2, pc, #4	; (adr r2, 80042cc <DMA_CheckFifoParam+0x28>)
 80042c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042ca:	bf00      	nop
 80042cc:	080042dd 	.word	0x080042dd
 80042d0:	080042ef 	.word	0x080042ef
 80042d4:	080042dd 	.word	0x080042dd
 80042d8:	08004373 	.word	0x08004373
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d046      	beq.n	8004376 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80042e8:	2301      	movs	r3, #1
 80042ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042ec:	e043      	b.n	8004376 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042f2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80042f6:	d140      	bne.n	800437a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042fc:	e03d      	b.n	800437a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	699b      	ldr	r3, [r3, #24]
 8004302:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004306:	d121      	bne.n	800434c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	2b03      	cmp	r3, #3
 800430c:	d837      	bhi.n	800437e <DMA_CheckFifoParam+0xda>
 800430e:	a201      	add	r2, pc, #4	; (adr r2, 8004314 <DMA_CheckFifoParam+0x70>)
 8004310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004314:	08004325 	.word	0x08004325
 8004318:	0800432b 	.word	0x0800432b
 800431c:	08004325 	.word	0x08004325
 8004320:	0800433d 	.word	0x0800433d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004324:	2301      	movs	r3, #1
 8004326:	73fb      	strb	r3, [r7, #15]
      break;
 8004328:	e030      	b.n	800438c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800432e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004332:	2b00      	cmp	r3, #0
 8004334:	d025      	beq.n	8004382 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800433a:	e022      	b.n	8004382 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004340:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004344:	d11f      	bne.n	8004386 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800434a:	e01c      	b.n	8004386 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	2b02      	cmp	r3, #2
 8004350:	d903      	bls.n	800435a <DMA_CheckFifoParam+0xb6>
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	2b03      	cmp	r3, #3
 8004356:	d003      	beq.n	8004360 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004358:	e018      	b.n	800438c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	73fb      	strb	r3, [r7, #15]
      break;
 800435e:	e015      	b.n	800438c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004364:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004368:	2b00      	cmp	r3, #0
 800436a:	d00e      	beq.n	800438a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	73fb      	strb	r3, [r7, #15]
      break;
 8004370:	e00b      	b.n	800438a <DMA_CheckFifoParam+0xe6>
      break;
 8004372:	bf00      	nop
 8004374:	e00a      	b.n	800438c <DMA_CheckFifoParam+0xe8>
      break;
 8004376:	bf00      	nop
 8004378:	e008      	b.n	800438c <DMA_CheckFifoParam+0xe8>
      break;
 800437a:	bf00      	nop
 800437c:	e006      	b.n	800438c <DMA_CheckFifoParam+0xe8>
      break;
 800437e:	bf00      	nop
 8004380:	e004      	b.n	800438c <DMA_CheckFifoParam+0xe8>
      break;
 8004382:	bf00      	nop
 8004384:	e002      	b.n	800438c <DMA_CheckFifoParam+0xe8>
      break;   
 8004386:	bf00      	nop
 8004388:	e000      	b.n	800438c <DMA_CheckFifoParam+0xe8>
      break;
 800438a:	bf00      	nop
    }
  } 
  
  return status; 
 800438c:	7bfb      	ldrb	r3, [r7, #15]
}
 800438e:	4618      	mov	r0, r3
 8004390:	3714      	adds	r7, #20
 8004392:	46bd      	mov	sp, r7
 8004394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004398:	4770      	bx	lr
 800439a:	bf00      	nop

0800439c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800439c:	b480      	push	{r7}
 800439e:	b089      	sub	sp, #36	; 0x24
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
 80043a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80043a6:	2300      	movs	r3, #0
 80043a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80043aa:	2300      	movs	r3, #0
 80043ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80043ae:	2300      	movs	r3, #0
 80043b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80043b2:	2300      	movs	r3, #0
 80043b4:	61fb      	str	r3, [r7, #28]
 80043b6:	e159      	b.n	800466c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80043b8:	2201      	movs	r2, #1
 80043ba:	69fb      	ldr	r3, [r7, #28]
 80043bc:	fa02 f303 	lsl.w	r3, r2, r3
 80043c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	697a      	ldr	r2, [r7, #20]
 80043c8:	4013      	ands	r3, r2
 80043ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80043cc:	693a      	ldr	r2, [r7, #16]
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	429a      	cmp	r2, r3
 80043d2:	f040 8148 	bne.w	8004666 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	f003 0303 	and.w	r3, r3, #3
 80043de:	2b01      	cmp	r3, #1
 80043e0:	d005      	beq.n	80043ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80043ea:	2b02      	cmp	r3, #2
 80043ec:	d130      	bne.n	8004450 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80043f4:	69fb      	ldr	r3, [r7, #28]
 80043f6:	005b      	lsls	r3, r3, #1
 80043f8:	2203      	movs	r2, #3
 80043fa:	fa02 f303 	lsl.w	r3, r2, r3
 80043fe:	43db      	mvns	r3, r3
 8004400:	69ba      	ldr	r2, [r7, #24]
 8004402:	4013      	ands	r3, r2
 8004404:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	68da      	ldr	r2, [r3, #12]
 800440a:	69fb      	ldr	r3, [r7, #28]
 800440c:	005b      	lsls	r3, r3, #1
 800440e:	fa02 f303 	lsl.w	r3, r2, r3
 8004412:	69ba      	ldr	r2, [r7, #24]
 8004414:	4313      	orrs	r3, r2
 8004416:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	69ba      	ldr	r2, [r7, #24]
 800441c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004424:	2201      	movs	r2, #1
 8004426:	69fb      	ldr	r3, [r7, #28]
 8004428:	fa02 f303 	lsl.w	r3, r2, r3
 800442c:	43db      	mvns	r3, r3
 800442e:	69ba      	ldr	r2, [r7, #24]
 8004430:	4013      	ands	r3, r2
 8004432:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	091b      	lsrs	r3, r3, #4
 800443a:	f003 0201 	and.w	r2, r3, #1
 800443e:	69fb      	ldr	r3, [r7, #28]
 8004440:	fa02 f303 	lsl.w	r3, r2, r3
 8004444:	69ba      	ldr	r2, [r7, #24]
 8004446:	4313      	orrs	r3, r2
 8004448:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	69ba      	ldr	r2, [r7, #24]
 800444e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	f003 0303 	and.w	r3, r3, #3
 8004458:	2b03      	cmp	r3, #3
 800445a:	d017      	beq.n	800448c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	68db      	ldr	r3, [r3, #12]
 8004460:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004462:	69fb      	ldr	r3, [r7, #28]
 8004464:	005b      	lsls	r3, r3, #1
 8004466:	2203      	movs	r2, #3
 8004468:	fa02 f303 	lsl.w	r3, r2, r3
 800446c:	43db      	mvns	r3, r3
 800446e:	69ba      	ldr	r2, [r7, #24]
 8004470:	4013      	ands	r3, r2
 8004472:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	689a      	ldr	r2, [r3, #8]
 8004478:	69fb      	ldr	r3, [r7, #28]
 800447a:	005b      	lsls	r3, r3, #1
 800447c:	fa02 f303 	lsl.w	r3, r2, r3
 8004480:	69ba      	ldr	r2, [r7, #24]
 8004482:	4313      	orrs	r3, r2
 8004484:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	69ba      	ldr	r2, [r7, #24]
 800448a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	f003 0303 	and.w	r3, r3, #3
 8004494:	2b02      	cmp	r3, #2
 8004496:	d123      	bne.n	80044e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004498:	69fb      	ldr	r3, [r7, #28]
 800449a:	08da      	lsrs	r2, r3, #3
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	3208      	adds	r2, #8
 80044a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80044a6:	69fb      	ldr	r3, [r7, #28]
 80044a8:	f003 0307 	and.w	r3, r3, #7
 80044ac:	009b      	lsls	r3, r3, #2
 80044ae:	220f      	movs	r2, #15
 80044b0:	fa02 f303 	lsl.w	r3, r2, r3
 80044b4:	43db      	mvns	r3, r3
 80044b6:	69ba      	ldr	r2, [r7, #24]
 80044b8:	4013      	ands	r3, r2
 80044ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	691a      	ldr	r2, [r3, #16]
 80044c0:	69fb      	ldr	r3, [r7, #28]
 80044c2:	f003 0307 	and.w	r3, r3, #7
 80044c6:	009b      	lsls	r3, r3, #2
 80044c8:	fa02 f303 	lsl.w	r3, r2, r3
 80044cc:	69ba      	ldr	r2, [r7, #24]
 80044ce:	4313      	orrs	r3, r2
 80044d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80044d2:	69fb      	ldr	r3, [r7, #28]
 80044d4:	08da      	lsrs	r2, r3, #3
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	3208      	adds	r2, #8
 80044da:	69b9      	ldr	r1, [r7, #24]
 80044dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80044e6:	69fb      	ldr	r3, [r7, #28]
 80044e8:	005b      	lsls	r3, r3, #1
 80044ea:	2203      	movs	r2, #3
 80044ec:	fa02 f303 	lsl.w	r3, r2, r3
 80044f0:	43db      	mvns	r3, r3
 80044f2:	69ba      	ldr	r2, [r7, #24]
 80044f4:	4013      	ands	r3, r2
 80044f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	f003 0203 	and.w	r2, r3, #3
 8004500:	69fb      	ldr	r3, [r7, #28]
 8004502:	005b      	lsls	r3, r3, #1
 8004504:	fa02 f303 	lsl.w	r3, r2, r3
 8004508:	69ba      	ldr	r2, [r7, #24]
 800450a:	4313      	orrs	r3, r2
 800450c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	69ba      	ldr	r2, [r7, #24]
 8004512:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800451c:	2b00      	cmp	r3, #0
 800451e:	f000 80a2 	beq.w	8004666 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004522:	2300      	movs	r3, #0
 8004524:	60fb      	str	r3, [r7, #12]
 8004526:	4b57      	ldr	r3, [pc, #348]	; (8004684 <HAL_GPIO_Init+0x2e8>)
 8004528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800452a:	4a56      	ldr	r2, [pc, #344]	; (8004684 <HAL_GPIO_Init+0x2e8>)
 800452c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004530:	6453      	str	r3, [r2, #68]	; 0x44
 8004532:	4b54      	ldr	r3, [pc, #336]	; (8004684 <HAL_GPIO_Init+0x2e8>)
 8004534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004536:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800453a:	60fb      	str	r3, [r7, #12]
 800453c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800453e:	4a52      	ldr	r2, [pc, #328]	; (8004688 <HAL_GPIO_Init+0x2ec>)
 8004540:	69fb      	ldr	r3, [r7, #28]
 8004542:	089b      	lsrs	r3, r3, #2
 8004544:	3302      	adds	r3, #2
 8004546:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800454a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800454c:	69fb      	ldr	r3, [r7, #28]
 800454e:	f003 0303 	and.w	r3, r3, #3
 8004552:	009b      	lsls	r3, r3, #2
 8004554:	220f      	movs	r2, #15
 8004556:	fa02 f303 	lsl.w	r3, r2, r3
 800455a:	43db      	mvns	r3, r3
 800455c:	69ba      	ldr	r2, [r7, #24]
 800455e:	4013      	ands	r3, r2
 8004560:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	4a49      	ldr	r2, [pc, #292]	; (800468c <HAL_GPIO_Init+0x2f0>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d019      	beq.n	800459e <HAL_GPIO_Init+0x202>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	4a48      	ldr	r2, [pc, #288]	; (8004690 <HAL_GPIO_Init+0x2f4>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d013      	beq.n	800459a <HAL_GPIO_Init+0x1fe>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	4a47      	ldr	r2, [pc, #284]	; (8004694 <HAL_GPIO_Init+0x2f8>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d00d      	beq.n	8004596 <HAL_GPIO_Init+0x1fa>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	4a46      	ldr	r2, [pc, #280]	; (8004698 <HAL_GPIO_Init+0x2fc>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d007      	beq.n	8004592 <HAL_GPIO_Init+0x1f6>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	4a45      	ldr	r2, [pc, #276]	; (800469c <HAL_GPIO_Init+0x300>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d101      	bne.n	800458e <HAL_GPIO_Init+0x1f2>
 800458a:	2304      	movs	r3, #4
 800458c:	e008      	b.n	80045a0 <HAL_GPIO_Init+0x204>
 800458e:	2307      	movs	r3, #7
 8004590:	e006      	b.n	80045a0 <HAL_GPIO_Init+0x204>
 8004592:	2303      	movs	r3, #3
 8004594:	e004      	b.n	80045a0 <HAL_GPIO_Init+0x204>
 8004596:	2302      	movs	r3, #2
 8004598:	e002      	b.n	80045a0 <HAL_GPIO_Init+0x204>
 800459a:	2301      	movs	r3, #1
 800459c:	e000      	b.n	80045a0 <HAL_GPIO_Init+0x204>
 800459e:	2300      	movs	r3, #0
 80045a0:	69fa      	ldr	r2, [r7, #28]
 80045a2:	f002 0203 	and.w	r2, r2, #3
 80045a6:	0092      	lsls	r2, r2, #2
 80045a8:	4093      	lsls	r3, r2
 80045aa:	69ba      	ldr	r2, [r7, #24]
 80045ac:	4313      	orrs	r3, r2
 80045ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80045b0:	4935      	ldr	r1, [pc, #212]	; (8004688 <HAL_GPIO_Init+0x2ec>)
 80045b2:	69fb      	ldr	r3, [r7, #28]
 80045b4:	089b      	lsrs	r3, r3, #2
 80045b6:	3302      	adds	r3, #2
 80045b8:	69ba      	ldr	r2, [r7, #24]
 80045ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80045be:	4b38      	ldr	r3, [pc, #224]	; (80046a0 <HAL_GPIO_Init+0x304>)
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	43db      	mvns	r3, r3
 80045c8:	69ba      	ldr	r2, [r7, #24]
 80045ca:	4013      	ands	r3, r2
 80045cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d003      	beq.n	80045e2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80045da:	69ba      	ldr	r2, [r7, #24]
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	4313      	orrs	r3, r2
 80045e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80045e2:	4a2f      	ldr	r2, [pc, #188]	; (80046a0 <HAL_GPIO_Init+0x304>)
 80045e4:	69bb      	ldr	r3, [r7, #24]
 80045e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80045e8:	4b2d      	ldr	r3, [pc, #180]	; (80046a0 <HAL_GPIO_Init+0x304>)
 80045ea:	68db      	ldr	r3, [r3, #12]
 80045ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	43db      	mvns	r3, r3
 80045f2:	69ba      	ldr	r2, [r7, #24]
 80045f4:	4013      	ands	r3, r2
 80045f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004600:	2b00      	cmp	r3, #0
 8004602:	d003      	beq.n	800460c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004604:	69ba      	ldr	r2, [r7, #24]
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	4313      	orrs	r3, r2
 800460a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800460c:	4a24      	ldr	r2, [pc, #144]	; (80046a0 <HAL_GPIO_Init+0x304>)
 800460e:	69bb      	ldr	r3, [r7, #24]
 8004610:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004612:	4b23      	ldr	r3, [pc, #140]	; (80046a0 <HAL_GPIO_Init+0x304>)
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	43db      	mvns	r3, r3
 800461c:	69ba      	ldr	r2, [r7, #24]
 800461e:	4013      	ands	r3, r2
 8004620:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800462a:	2b00      	cmp	r3, #0
 800462c:	d003      	beq.n	8004636 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800462e:	69ba      	ldr	r2, [r7, #24]
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	4313      	orrs	r3, r2
 8004634:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004636:	4a1a      	ldr	r2, [pc, #104]	; (80046a0 <HAL_GPIO_Init+0x304>)
 8004638:	69bb      	ldr	r3, [r7, #24]
 800463a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800463c:	4b18      	ldr	r3, [pc, #96]	; (80046a0 <HAL_GPIO_Init+0x304>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	43db      	mvns	r3, r3
 8004646:	69ba      	ldr	r2, [r7, #24]
 8004648:	4013      	ands	r3, r2
 800464a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004654:	2b00      	cmp	r3, #0
 8004656:	d003      	beq.n	8004660 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004658:	69ba      	ldr	r2, [r7, #24]
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	4313      	orrs	r3, r2
 800465e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004660:	4a0f      	ldr	r2, [pc, #60]	; (80046a0 <HAL_GPIO_Init+0x304>)
 8004662:	69bb      	ldr	r3, [r7, #24]
 8004664:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004666:	69fb      	ldr	r3, [r7, #28]
 8004668:	3301      	adds	r3, #1
 800466a:	61fb      	str	r3, [r7, #28]
 800466c:	69fb      	ldr	r3, [r7, #28]
 800466e:	2b0f      	cmp	r3, #15
 8004670:	f67f aea2 	bls.w	80043b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004674:	bf00      	nop
 8004676:	bf00      	nop
 8004678:	3724      	adds	r7, #36	; 0x24
 800467a:	46bd      	mov	sp, r7
 800467c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004680:	4770      	bx	lr
 8004682:	bf00      	nop
 8004684:	40023800 	.word	0x40023800
 8004688:	40013800 	.word	0x40013800
 800468c:	40020000 	.word	0x40020000
 8004690:	40020400 	.word	0x40020400
 8004694:	40020800 	.word	0x40020800
 8004698:	40020c00 	.word	0x40020c00
 800469c:	40021000 	.word	0x40021000
 80046a0:	40013c00 	.word	0x40013c00

080046a4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b087      	sub	sp, #28
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
 80046ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80046ae:	2300      	movs	r3, #0
 80046b0:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80046b2:	2300      	movs	r3, #0
 80046b4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80046b6:	2300      	movs	r3, #0
 80046b8:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80046ba:	2300      	movs	r3, #0
 80046bc:	617b      	str	r3, [r7, #20]
 80046be:	e0bb      	b.n	8004838 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80046c0:	2201      	movs	r2, #1
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	fa02 f303 	lsl.w	r3, r2, r3
 80046c8:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80046ca:	683a      	ldr	r2, [r7, #0]
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	4013      	ands	r3, r2
 80046d0:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80046d2:	68fa      	ldr	r2, [r7, #12]
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	429a      	cmp	r2, r3
 80046d8:	f040 80ab 	bne.w	8004832 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80046dc:	4a5c      	ldr	r2, [pc, #368]	; (8004850 <HAL_GPIO_DeInit+0x1ac>)
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	089b      	lsrs	r3, r3, #2
 80046e2:	3302      	adds	r3, #2
 80046e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046e8:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	f003 0303 	and.w	r3, r3, #3
 80046f0:	009b      	lsls	r3, r3, #2
 80046f2:	220f      	movs	r2, #15
 80046f4:	fa02 f303 	lsl.w	r3, r2, r3
 80046f8:	68ba      	ldr	r2, [r7, #8]
 80046fa:	4013      	ands	r3, r2
 80046fc:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	4a54      	ldr	r2, [pc, #336]	; (8004854 <HAL_GPIO_DeInit+0x1b0>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d019      	beq.n	800473a <HAL_GPIO_DeInit+0x96>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	4a53      	ldr	r2, [pc, #332]	; (8004858 <HAL_GPIO_DeInit+0x1b4>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d013      	beq.n	8004736 <HAL_GPIO_DeInit+0x92>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	4a52      	ldr	r2, [pc, #328]	; (800485c <HAL_GPIO_DeInit+0x1b8>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d00d      	beq.n	8004732 <HAL_GPIO_DeInit+0x8e>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	4a51      	ldr	r2, [pc, #324]	; (8004860 <HAL_GPIO_DeInit+0x1bc>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d007      	beq.n	800472e <HAL_GPIO_DeInit+0x8a>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	4a50      	ldr	r2, [pc, #320]	; (8004864 <HAL_GPIO_DeInit+0x1c0>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d101      	bne.n	800472a <HAL_GPIO_DeInit+0x86>
 8004726:	2304      	movs	r3, #4
 8004728:	e008      	b.n	800473c <HAL_GPIO_DeInit+0x98>
 800472a:	2307      	movs	r3, #7
 800472c:	e006      	b.n	800473c <HAL_GPIO_DeInit+0x98>
 800472e:	2303      	movs	r3, #3
 8004730:	e004      	b.n	800473c <HAL_GPIO_DeInit+0x98>
 8004732:	2302      	movs	r3, #2
 8004734:	e002      	b.n	800473c <HAL_GPIO_DeInit+0x98>
 8004736:	2301      	movs	r3, #1
 8004738:	e000      	b.n	800473c <HAL_GPIO_DeInit+0x98>
 800473a:	2300      	movs	r3, #0
 800473c:	697a      	ldr	r2, [r7, #20]
 800473e:	f002 0203 	and.w	r2, r2, #3
 8004742:	0092      	lsls	r2, r2, #2
 8004744:	4093      	lsls	r3, r2
 8004746:	68ba      	ldr	r2, [r7, #8]
 8004748:	429a      	cmp	r2, r3
 800474a:	d132      	bne.n	80047b2 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800474c:	4b46      	ldr	r3, [pc, #280]	; (8004868 <HAL_GPIO_DeInit+0x1c4>)
 800474e:	681a      	ldr	r2, [r3, #0]
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	43db      	mvns	r3, r3
 8004754:	4944      	ldr	r1, [pc, #272]	; (8004868 <HAL_GPIO_DeInit+0x1c4>)
 8004756:	4013      	ands	r3, r2
 8004758:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800475a:	4b43      	ldr	r3, [pc, #268]	; (8004868 <HAL_GPIO_DeInit+0x1c4>)
 800475c:	685a      	ldr	r2, [r3, #4]
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	43db      	mvns	r3, r3
 8004762:	4941      	ldr	r1, [pc, #260]	; (8004868 <HAL_GPIO_DeInit+0x1c4>)
 8004764:	4013      	ands	r3, r2
 8004766:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004768:	4b3f      	ldr	r3, [pc, #252]	; (8004868 <HAL_GPIO_DeInit+0x1c4>)
 800476a:	68da      	ldr	r2, [r3, #12]
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	43db      	mvns	r3, r3
 8004770:	493d      	ldr	r1, [pc, #244]	; (8004868 <HAL_GPIO_DeInit+0x1c4>)
 8004772:	4013      	ands	r3, r2
 8004774:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8004776:	4b3c      	ldr	r3, [pc, #240]	; (8004868 <HAL_GPIO_DeInit+0x1c4>)
 8004778:	689a      	ldr	r2, [r3, #8]
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	43db      	mvns	r3, r3
 800477e:	493a      	ldr	r1, [pc, #232]	; (8004868 <HAL_GPIO_DeInit+0x1c4>)
 8004780:	4013      	ands	r3, r2
 8004782:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	f003 0303 	and.w	r3, r3, #3
 800478a:	009b      	lsls	r3, r3, #2
 800478c:	220f      	movs	r2, #15
 800478e:	fa02 f303 	lsl.w	r3, r2, r3
 8004792:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8004794:	4a2e      	ldr	r2, [pc, #184]	; (8004850 <HAL_GPIO_DeInit+0x1ac>)
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	089b      	lsrs	r3, r3, #2
 800479a:	3302      	adds	r3, #2
 800479c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	43da      	mvns	r2, r3
 80047a4:	482a      	ldr	r0, [pc, #168]	; (8004850 <HAL_GPIO_DeInit+0x1ac>)
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	089b      	lsrs	r3, r3, #2
 80047aa:	400a      	ands	r2, r1
 80047ac:	3302      	adds	r3, #2
 80047ae:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681a      	ldr	r2, [r3, #0]
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	005b      	lsls	r3, r3, #1
 80047ba:	2103      	movs	r1, #3
 80047bc:	fa01 f303 	lsl.w	r3, r1, r3
 80047c0:	43db      	mvns	r3, r3
 80047c2:	401a      	ands	r2, r3
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	08da      	lsrs	r2, r3, #3
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	3208      	adds	r2, #8
 80047d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	f003 0307 	and.w	r3, r3, #7
 80047da:	009b      	lsls	r3, r3, #2
 80047dc:	220f      	movs	r2, #15
 80047de:	fa02 f303 	lsl.w	r3, r2, r3
 80047e2:	43db      	mvns	r3, r3
 80047e4:	697a      	ldr	r2, [r7, #20]
 80047e6:	08d2      	lsrs	r2, r2, #3
 80047e8:	4019      	ands	r1, r3
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	3208      	adds	r2, #8
 80047ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	68da      	ldr	r2, [r3, #12]
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	005b      	lsls	r3, r3, #1
 80047fa:	2103      	movs	r1, #3
 80047fc:	fa01 f303 	lsl.w	r3, r1, r3
 8004800:	43db      	mvns	r3, r3
 8004802:	401a      	ands	r2, r3
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	685a      	ldr	r2, [r3, #4]
 800480c:	2101      	movs	r1, #1
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	fa01 f303 	lsl.w	r3, r1, r3
 8004814:	43db      	mvns	r3, r3
 8004816:	401a      	ands	r2, r3
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	689a      	ldr	r2, [r3, #8]
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	005b      	lsls	r3, r3, #1
 8004824:	2103      	movs	r1, #3
 8004826:	fa01 f303 	lsl.w	r3, r1, r3
 800482a:	43db      	mvns	r3, r3
 800482c:	401a      	ands	r2, r3
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	3301      	adds	r3, #1
 8004836:	617b      	str	r3, [r7, #20]
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	2b0f      	cmp	r3, #15
 800483c:	f67f af40 	bls.w	80046c0 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8004840:	bf00      	nop
 8004842:	bf00      	nop
 8004844:	371c      	adds	r7, #28
 8004846:	46bd      	mov	sp, r7
 8004848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484c:	4770      	bx	lr
 800484e:	bf00      	nop
 8004850:	40013800 	.word	0x40013800
 8004854:	40020000 	.word	0x40020000
 8004858:	40020400 	.word	0x40020400
 800485c:	40020800 	.word	0x40020800
 8004860:	40020c00 	.word	0x40020c00
 8004864:	40021000 	.word	0x40021000
 8004868:	40013c00 	.word	0x40013c00

0800486c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800486c:	b480      	push	{r7}
 800486e:	b083      	sub	sp, #12
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
 8004874:	460b      	mov	r3, r1
 8004876:	807b      	strh	r3, [r7, #2]
 8004878:	4613      	mov	r3, r2
 800487a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800487c:	787b      	ldrb	r3, [r7, #1]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d003      	beq.n	800488a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004882:	887a      	ldrh	r2, [r7, #2]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004888:	e003      	b.n	8004892 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800488a:	887b      	ldrh	r3, [r7, #2]
 800488c:	041a      	lsls	r2, r3, #16
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	619a      	str	r2, [r3, #24]
}
 8004892:	bf00      	nop
 8004894:	370c      	adds	r7, #12
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr
	...

080048a0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b082      	sub	sp, #8
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	4603      	mov	r3, r0
 80048a8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80048aa:	4b08      	ldr	r3, [pc, #32]	; (80048cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80048ac:	695a      	ldr	r2, [r3, #20]
 80048ae:	88fb      	ldrh	r3, [r7, #6]
 80048b0:	4013      	ands	r3, r2
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d006      	beq.n	80048c4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80048b6:	4a05      	ldr	r2, [pc, #20]	; (80048cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80048b8:	88fb      	ldrh	r3, [r7, #6]
 80048ba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80048bc:	88fb      	ldrh	r3, [r7, #6]
 80048be:	4618      	mov	r0, r3
 80048c0:	f000 f806 	bl	80048d0 <HAL_GPIO_EXTI_Callback>
  }
}
 80048c4:	bf00      	nop
 80048c6:	3708      	adds	r7, #8
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bd80      	pop	{r7, pc}
 80048cc:	40013c00 	.word	0x40013c00

080048d0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80048d0:	b480      	push	{r7}
 80048d2:	b083      	sub	sp, #12
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	4603      	mov	r3, r0
 80048d8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80048da:	bf00      	nop
 80048dc:	370c      	adds	r7, #12
 80048de:	46bd      	mov	sp, r7
 80048e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e4:	4770      	bx	lr
	...

080048e8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b086      	sub	sp, #24
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d101      	bne.n	80048fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	e267      	b.n	8004dca <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f003 0301 	and.w	r3, r3, #1
 8004902:	2b00      	cmp	r3, #0
 8004904:	d075      	beq.n	80049f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004906:	4b88      	ldr	r3, [pc, #544]	; (8004b28 <HAL_RCC_OscConfig+0x240>)
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	f003 030c 	and.w	r3, r3, #12
 800490e:	2b04      	cmp	r3, #4
 8004910:	d00c      	beq.n	800492c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004912:	4b85      	ldr	r3, [pc, #532]	; (8004b28 <HAL_RCC_OscConfig+0x240>)
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800491a:	2b08      	cmp	r3, #8
 800491c:	d112      	bne.n	8004944 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800491e:	4b82      	ldr	r3, [pc, #520]	; (8004b28 <HAL_RCC_OscConfig+0x240>)
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004926:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800492a:	d10b      	bne.n	8004944 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800492c:	4b7e      	ldr	r3, [pc, #504]	; (8004b28 <HAL_RCC_OscConfig+0x240>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004934:	2b00      	cmp	r3, #0
 8004936:	d05b      	beq.n	80049f0 <HAL_RCC_OscConfig+0x108>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d157      	bne.n	80049f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004940:	2301      	movs	r3, #1
 8004942:	e242      	b.n	8004dca <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800494c:	d106      	bne.n	800495c <HAL_RCC_OscConfig+0x74>
 800494e:	4b76      	ldr	r3, [pc, #472]	; (8004b28 <HAL_RCC_OscConfig+0x240>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a75      	ldr	r2, [pc, #468]	; (8004b28 <HAL_RCC_OscConfig+0x240>)
 8004954:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004958:	6013      	str	r3, [r2, #0]
 800495a:	e01d      	b.n	8004998 <HAL_RCC_OscConfig+0xb0>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004964:	d10c      	bne.n	8004980 <HAL_RCC_OscConfig+0x98>
 8004966:	4b70      	ldr	r3, [pc, #448]	; (8004b28 <HAL_RCC_OscConfig+0x240>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a6f      	ldr	r2, [pc, #444]	; (8004b28 <HAL_RCC_OscConfig+0x240>)
 800496c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004970:	6013      	str	r3, [r2, #0]
 8004972:	4b6d      	ldr	r3, [pc, #436]	; (8004b28 <HAL_RCC_OscConfig+0x240>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a6c      	ldr	r2, [pc, #432]	; (8004b28 <HAL_RCC_OscConfig+0x240>)
 8004978:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800497c:	6013      	str	r3, [r2, #0]
 800497e:	e00b      	b.n	8004998 <HAL_RCC_OscConfig+0xb0>
 8004980:	4b69      	ldr	r3, [pc, #420]	; (8004b28 <HAL_RCC_OscConfig+0x240>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a68      	ldr	r2, [pc, #416]	; (8004b28 <HAL_RCC_OscConfig+0x240>)
 8004986:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800498a:	6013      	str	r3, [r2, #0]
 800498c:	4b66      	ldr	r3, [pc, #408]	; (8004b28 <HAL_RCC_OscConfig+0x240>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a65      	ldr	r2, [pc, #404]	; (8004b28 <HAL_RCC_OscConfig+0x240>)
 8004992:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004996:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d013      	beq.n	80049c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049a0:	f7fe fe3e 	bl	8003620 <HAL_GetTick>
 80049a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049a6:	e008      	b.n	80049ba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80049a8:	f7fe fe3a 	bl	8003620 <HAL_GetTick>
 80049ac:	4602      	mov	r2, r0
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	1ad3      	subs	r3, r2, r3
 80049b2:	2b64      	cmp	r3, #100	; 0x64
 80049b4:	d901      	bls.n	80049ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80049b6:	2303      	movs	r3, #3
 80049b8:	e207      	b.n	8004dca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049ba:	4b5b      	ldr	r3, [pc, #364]	; (8004b28 <HAL_RCC_OscConfig+0x240>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d0f0      	beq.n	80049a8 <HAL_RCC_OscConfig+0xc0>
 80049c6:	e014      	b.n	80049f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049c8:	f7fe fe2a 	bl	8003620 <HAL_GetTick>
 80049cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049ce:	e008      	b.n	80049e2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80049d0:	f7fe fe26 	bl	8003620 <HAL_GetTick>
 80049d4:	4602      	mov	r2, r0
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	1ad3      	subs	r3, r2, r3
 80049da:	2b64      	cmp	r3, #100	; 0x64
 80049dc:	d901      	bls.n	80049e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80049de:	2303      	movs	r3, #3
 80049e0:	e1f3      	b.n	8004dca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049e2:	4b51      	ldr	r3, [pc, #324]	; (8004b28 <HAL_RCC_OscConfig+0x240>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d1f0      	bne.n	80049d0 <HAL_RCC_OscConfig+0xe8>
 80049ee:	e000      	b.n	80049f2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f003 0302 	and.w	r3, r3, #2
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d063      	beq.n	8004ac6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80049fe:	4b4a      	ldr	r3, [pc, #296]	; (8004b28 <HAL_RCC_OscConfig+0x240>)
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	f003 030c 	and.w	r3, r3, #12
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d00b      	beq.n	8004a22 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a0a:	4b47      	ldr	r3, [pc, #284]	; (8004b28 <HAL_RCC_OscConfig+0x240>)
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004a12:	2b08      	cmp	r3, #8
 8004a14:	d11c      	bne.n	8004a50 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a16:	4b44      	ldr	r3, [pc, #272]	; (8004b28 <HAL_RCC_OscConfig+0x240>)
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d116      	bne.n	8004a50 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a22:	4b41      	ldr	r3, [pc, #260]	; (8004b28 <HAL_RCC_OscConfig+0x240>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f003 0302 	and.w	r3, r3, #2
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d005      	beq.n	8004a3a <HAL_RCC_OscConfig+0x152>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	68db      	ldr	r3, [r3, #12]
 8004a32:	2b01      	cmp	r3, #1
 8004a34:	d001      	beq.n	8004a3a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	e1c7      	b.n	8004dca <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a3a:	4b3b      	ldr	r3, [pc, #236]	; (8004b28 <HAL_RCC_OscConfig+0x240>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	691b      	ldr	r3, [r3, #16]
 8004a46:	00db      	lsls	r3, r3, #3
 8004a48:	4937      	ldr	r1, [pc, #220]	; (8004b28 <HAL_RCC_OscConfig+0x240>)
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a4e:	e03a      	b.n	8004ac6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	68db      	ldr	r3, [r3, #12]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d020      	beq.n	8004a9a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a58:	4b34      	ldr	r3, [pc, #208]	; (8004b2c <HAL_RCC_OscConfig+0x244>)
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a5e:	f7fe fddf 	bl	8003620 <HAL_GetTick>
 8004a62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a64:	e008      	b.n	8004a78 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a66:	f7fe fddb 	bl	8003620 <HAL_GetTick>
 8004a6a:	4602      	mov	r2, r0
 8004a6c:	693b      	ldr	r3, [r7, #16]
 8004a6e:	1ad3      	subs	r3, r2, r3
 8004a70:	2b02      	cmp	r3, #2
 8004a72:	d901      	bls.n	8004a78 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004a74:	2303      	movs	r3, #3
 8004a76:	e1a8      	b.n	8004dca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a78:	4b2b      	ldr	r3, [pc, #172]	; (8004b28 <HAL_RCC_OscConfig+0x240>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f003 0302 	and.w	r3, r3, #2
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d0f0      	beq.n	8004a66 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a84:	4b28      	ldr	r3, [pc, #160]	; (8004b28 <HAL_RCC_OscConfig+0x240>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	691b      	ldr	r3, [r3, #16]
 8004a90:	00db      	lsls	r3, r3, #3
 8004a92:	4925      	ldr	r1, [pc, #148]	; (8004b28 <HAL_RCC_OscConfig+0x240>)
 8004a94:	4313      	orrs	r3, r2
 8004a96:	600b      	str	r3, [r1, #0]
 8004a98:	e015      	b.n	8004ac6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a9a:	4b24      	ldr	r3, [pc, #144]	; (8004b2c <HAL_RCC_OscConfig+0x244>)
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aa0:	f7fe fdbe 	bl	8003620 <HAL_GetTick>
 8004aa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004aa6:	e008      	b.n	8004aba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004aa8:	f7fe fdba 	bl	8003620 <HAL_GetTick>
 8004aac:	4602      	mov	r2, r0
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	1ad3      	subs	r3, r2, r3
 8004ab2:	2b02      	cmp	r3, #2
 8004ab4:	d901      	bls.n	8004aba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004ab6:	2303      	movs	r3, #3
 8004ab8:	e187      	b.n	8004dca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004aba:	4b1b      	ldr	r3, [pc, #108]	; (8004b28 <HAL_RCC_OscConfig+0x240>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f003 0302 	and.w	r3, r3, #2
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d1f0      	bne.n	8004aa8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f003 0308 	and.w	r3, r3, #8
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d036      	beq.n	8004b40 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	695b      	ldr	r3, [r3, #20]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d016      	beq.n	8004b08 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ada:	4b15      	ldr	r3, [pc, #84]	; (8004b30 <HAL_RCC_OscConfig+0x248>)
 8004adc:	2201      	movs	r2, #1
 8004ade:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ae0:	f7fe fd9e 	bl	8003620 <HAL_GetTick>
 8004ae4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ae6:	e008      	b.n	8004afa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ae8:	f7fe fd9a 	bl	8003620 <HAL_GetTick>
 8004aec:	4602      	mov	r2, r0
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	1ad3      	subs	r3, r2, r3
 8004af2:	2b02      	cmp	r3, #2
 8004af4:	d901      	bls.n	8004afa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004af6:	2303      	movs	r3, #3
 8004af8:	e167      	b.n	8004dca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004afa:	4b0b      	ldr	r3, [pc, #44]	; (8004b28 <HAL_RCC_OscConfig+0x240>)
 8004afc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004afe:	f003 0302 	and.w	r3, r3, #2
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d0f0      	beq.n	8004ae8 <HAL_RCC_OscConfig+0x200>
 8004b06:	e01b      	b.n	8004b40 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b08:	4b09      	ldr	r3, [pc, #36]	; (8004b30 <HAL_RCC_OscConfig+0x248>)
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b0e:	f7fe fd87 	bl	8003620 <HAL_GetTick>
 8004b12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b14:	e00e      	b.n	8004b34 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b16:	f7fe fd83 	bl	8003620 <HAL_GetTick>
 8004b1a:	4602      	mov	r2, r0
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	1ad3      	subs	r3, r2, r3
 8004b20:	2b02      	cmp	r3, #2
 8004b22:	d907      	bls.n	8004b34 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004b24:	2303      	movs	r3, #3
 8004b26:	e150      	b.n	8004dca <HAL_RCC_OscConfig+0x4e2>
 8004b28:	40023800 	.word	0x40023800
 8004b2c:	42470000 	.word	0x42470000
 8004b30:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b34:	4b88      	ldr	r3, [pc, #544]	; (8004d58 <HAL_RCC_OscConfig+0x470>)
 8004b36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b38:	f003 0302 	and.w	r3, r3, #2
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d1ea      	bne.n	8004b16 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f003 0304 	and.w	r3, r3, #4
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	f000 8097 	beq.w	8004c7c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b52:	4b81      	ldr	r3, [pc, #516]	; (8004d58 <HAL_RCC_OscConfig+0x470>)
 8004b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d10f      	bne.n	8004b7e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b5e:	2300      	movs	r3, #0
 8004b60:	60bb      	str	r3, [r7, #8]
 8004b62:	4b7d      	ldr	r3, [pc, #500]	; (8004d58 <HAL_RCC_OscConfig+0x470>)
 8004b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b66:	4a7c      	ldr	r2, [pc, #496]	; (8004d58 <HAL_RCC_OscConfig+0x470>)
 8004b68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b6c:	6413      	str	r3, [r2, #64]	; 0x40
 8004b6e:	4b7a      	ldr	r3, [pc, #488]	; (8004d58 <HAL_RCC_OscConfig+0x470>)
 8004b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b76:	60bb      	str	r3, [r7, #8]
 8004b78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b7e:	4b77      	ldr	r3, [pc, #476]	; (8004d5c <HAL_RCC_OscConfig+0x474>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d118      	bne.n	8004bbc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b8a:	4b74      	ldr	r3, [pc, #464]	; (8004d5c <HAL_RCC_OscConfig+0x474>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a73      	ldr	r2, [pc, #460]	; (8004d5c <HAL_RCC_OscConfig+0x474>)
 8004b90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b96:	f7fe fd43 	bl	8003620 <HAL_GetTick>
 8004b9a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b9c:	e008      	b.n	8004bb0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b9e:	f7fe fd3f 	bl	8003620 <HAL_GetTick>
 8004ba2:	4602      	mov	r2, r0
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	1ad3      	subs	r3, r2, r3
 8004ba8:	2b02      	cmp	r3, #2
 8004baa:	d901      	bls.n	8004bb0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004bac:	2303      	movs	r3, #3
 8004bae:	e10c      	b.n	8004dca <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bb0:	4b6a      	ldr	r3, [pc, #424]	; (8004d5c <HAL_RCC_OscConfig+0x474>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d0f0      	beq.n	8004b9e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	d106      	bne.n	8004bd2 <HAL_RCC_OscConfig+0x2ea>
 8004bc4:	4b64      	ldr	r3, [pc, #400]	; (8004d58 <HAL_RCC_OscConfig+0x470>)
 8004bc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bc8:	4a63      	ldr	r2, [pc, #396]	; (8004d58 <HAL_RCC_OscConfig+0x470>)
 8004bca:	f043 0301 	orr.w	r3, r3, #1
 8004bce:	6713      	str	r3, [r2, #112]	; 0x70
 8004bd0:	e01c      	b.n	8004c0c <HAL_RCC_OscConfig+0x324>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	689b      	ldr	r3, [r3, #8]
 8004bd6:	2b05      	cmp	r3, #5
 8004bd8:	d10c      	bne.n	8004bf4 <HAL_RCC_OscConfig+0x30c>
 8004bda:	4b5f      	ldr	r3, [pc, #380]	; (8004d58 <HAL_RCC_OscConfig+0x470>)
 8004bdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bde:	4a5e      	ldr	r2, [pc, #376]	; (8004d58 <HAL_RCC_OscConfig+0x470>)
 8004be0:	f043 0304 	orr.w	r3, r3, #4
 8004be4:	6713      	str	r3, [r2, #112]	; 0x70
 8004be6:	4b5c      	ldr	r3, [pc, #368]	; (8004d58 <HAL_RCC_OscConfig+0x470>)
 8004be8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bea:	4a5b      	ldr	r2, [pc, #364]	; (8004d58 <HAL_RCC_OscConfig+0x470>)
 8004bec:	f043 0301 	orr.w	r3, r3, #1
 8004bf0:	6713      	str	r3, [r2, #112]	; 0x70
 8004bf2:	e00b      	b.n	8004c0c <HAL_RCC_OscConfig+0x324>
 8004bf4:	4b58      	ldr	r3, [pc, #352]	; (8004d58 <HAL_RCC_OscConfig+0x470>)
 8004bf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bf8:	4a57      	ldr	r2, [pc, #348]	; (8004d58 <HAL_RCC_OscConfig+0x470>)
 8004bfa:	f023 0301 	bic.w	r3, r3, #1
 8004bfe:	6713      	str	r3, [r2, #112]	; 0x70
 8004c00:	4b55      	ldr	r3, [pc, #340]	; (8004d58 <HAL_RCC_OscConfig+0x470>)
 8004c02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c04:	4a54      	ldr	r2, [pc, #336]	; (8004d58 <HAL_RCC_OscConfig+0x470>)
 8004c06:	f023 0304 	bic.w	r3, r3, #4
 8004c0a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	689b      	ldr	r3, [r3, #8]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d015      	beq.n	8004c40 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c14:	f7fe fd04 	bl	8003620 <HAL_GetTick>
 8004c18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c1a:	e00a      	b.n	8004c32 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c1c:	f7fe fd00 	bl	8003620 <HAL_GetTick>
 8004c20:	4602      	mov	r2, r0
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	1ad3      	subs	r3, r2, r3
 8004c26:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d901      	bls.n	8004c32 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004c2e:	2303      	movs	r3, #3
 8004c30:	e0cb      	b.n	8004dca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c32:	4b49      	ldr	r3, [pc, #292]	; (8004d58 <HAL_RCC_OscConfig+0x470>)
 8004c34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c36:	f003 0302 	and.w	r3, r3, #2
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d0ee      	beq.n	8004c1c <HAL_RCC_OscConfig+0x334>
 8004c3e:	e014      	b.n	8004c6a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c40:	f7fe fcee 	bl	8003620 <HAL_GetTick>
 8004c44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c46:	e00a      	b.n	8004c5e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c48:	f7fe fcea 	bl	8003620 <HAL_GetTick>
 8004c4c:	4602      	mov	r2, r0
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	1ad3      	subs	r3, r2, r3
 8004c52:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d901      	bls.n	8004c5e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004c5a:	2303      	movs	r3, #3
 8004c5c:	e0b5      	b.n	8004dca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c5e:	4b3e      	ldr	r3, [pc, #248]	; (8004d58 <HAL_RCC_OscConfig+0x470>)
 8004c60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c62:	f003 0302 	and.w	r3, r3, #2
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d1ee      	bne.n	8004c48 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c6a:	7dfb      	ldrb	r3, [r7, #23]
 8004c6c:	2b01      	cmp	r3, #1
 8004c6e:	d105      	bne.n	8004c7c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c70:	4b39      	ldr	r3, [pc, #228]	; (8004d58 <HAL_RCC_OscConfig+0x470>)
 8004c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c74:	4a38      	ldr	r2, [pc, #224]	; (8004d58 <HAL_RCC_OscConfig+0x470>)
 8004c76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c7a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	699b      	ldr	r3, [r3, #24]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	f000 80a1 	beq.w	8004dc8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004c86:	4b34      	ldr	r3, [pc, #208]	; (8004d58 <HAL_RCC_OscConfig+0x470>)
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	f003 030c 	and.w	r3, r3, #12
 8004c8e:	2b08      	cmp	r3, #8
 8004c90:	d05c      	beq.n	8004d4c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	699b      	ldr	r3, [r3, #24]
 8004c96:	2b02      	cmp	r3, #2
 8004c98:	d141      	bne.n	8004d1e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c9a:	4b31      	ldr	r3, [pc, #196]	; (8004d60 <HAL_RCC_OscConfig+0x478>)
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ca0:	f7fe fcbe 	bl	8003620 <HAL_GetTick>
 8004ca4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ca6:	e008      	b.n	8004cba <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ca8:	f7fe fcba 	bl	8003620 <HAL_GetTick>
 8004cac:	4602      	mov	r2, r0
 8004cae:	693b      	ldr	r3, [r7, #16]
 8004cb0:	1ad3      	subs	r3, r2, r3
 8004cb2:	2b02      	cmp	r3, #2
 8004cb4:	d901      	bls.n	8004cba <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004cb6:	2303      	movs	r3, #3
 8004cb8:	e087      	b.n	8004dca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cba:	4b27      	ldr	r3, [pc, #156]	; (8004d58 <HAL_RCC_OscConfig+0x470>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d1f0      	bne.n	8004ca8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	69da      	ldr	r2, [r3, #28]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6a1b      	ldr	r3, [r3, #32]
 8004cce:	431a      	orrs	r2, r3
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd4:	019b      	lsls	r3, r3, #6
 8004cd6:	431a      	orrs	r2, r3
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cdc:	085b      	lsrs	r3, r3, #1
 8004cde:	3b01      	subs	r3, #1
 8004ce0:	041b      	lsls	r3, r3, #16
 8004ce2:	431a      	orrs	r2, r3
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ce8:	061b      	lsls	r3, r3, #24
 8004cea:	491b      	ldr	r1, [pc, #108]	; (8004d58 <HAL_RCC_OscConfig+0x470>)
 8004cec:	4313      	orrs	r3, r2
 8004cee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004cf0:	4b1b      	ldr	r3, [pc, #108]	; (8004d60 <HAL_RCC_OscConfig+0x478>)
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cf6:	f7fe fc93 	bl	8003620 <HAL_GetTick>
 8004cfa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cfc:	e008      	b.n	8004d10 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004cfe:	f7fe fc8f 	bl	8003620 <HAL_GetTick>
 8004d02:	4602      	mov	r2, r0
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	1ad3      	subs	r3, r2, r3
 8004d08:	2b02      	cmp	r3, #2
 8004d0a:	d901      	bls.n	8004d10 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004d0c:	2303      	movs	r3, #3
 8004d0e:	e05c      	b.n	8004dca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d10:	4b11      	ldr	r3, [pc, #68]	; (8004d58 <HAL_RCC_OscConfig+0x470>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d0f0      	beq.n	8004cfe <HAL_RCC_OscConfig+0x416>
 8004d1c:	e054      	b.n	8004dc8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d1e:	4b10      	ldr	r3, [pc, #64]	; (8004d60 <HAL_RCC_OscConfig+0x478>)
 8004d20:	2200      	movs	r2, #0
 8004d22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d24:	f7fe fc7c 	bl	8003620 <HAL_GetTick>
 8004d28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d2a:	e008      	b.n	8004d3e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d2c:	f7fe fc78 	bl	8003620 <HAL_GetTick>
 8004d30:	4602      	mov	r2, r0
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	1ad3      	subs	r3, r2, r3
 8004d36:	2b02      	cmp	r3, #2
 8004d38:	d901      	bls.n	8004d3e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004d3a:	2303      	movs	r3, #3
 8004d3c:	e045      	b.n	8004dca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d3e:	4b06      	ldr	r3, [pc, #24]	; (8004d58 <HAL_RCC_OscConfig+0x470>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d1f0      	bne.n	8004d2c <HAL_RCC_OscConfig+0x444>
 8004d4a:	e03d      	b.n	8004dc8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	699b      	ldr	r3, [r3, #24]
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	d107      	bne.n	8004d64 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004d54:	2301      	movs	r3, #1
 8004d56:	e038      	b.n	8004dca <HAL_RCC_OscConfig+0x4e2>
 8004d58:	40023800 	.word	0x40023800
 8004d5c:	40007000 	.word	0x40007000
 8004d60:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004d64:	4b1b      	ldr	r3, [pc, #108]	; (8004dd4 <HAL_RCC_OscConfig+0x4ec>)
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	699b      	ldr	r3, [r3, #24]
 8004d6e:	2b01      	cmp	r3, #1
 8004d70:	d028      	beq.n	8004dc4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	d121      	bne.n	8004dc4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d8a:	429a      	cmp	r2, r3
 8004d8c:	d11a      	bne.n	8004dc4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d8e:	68fa      	ldr	r2, [r7, #12]
 8004d90:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004d94:	4013      	ands	r3, r2
 8004d96:	687a      	ldr	r2, [r7, #4]
 8004d98:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004d9a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d111      	bne.n	8004dc4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004daa:	085b      	lsrs	r3, r3, #1
 8004dac:	3b01      	subs	r3, #1
 8004dae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004db0:	429a      	cmp	r2, r3
 8004db2:	d107      	bne.n	8004dc4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dbe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004dc0:	429a      	cmp	r2, r3
 8004dc2:	d001      	beq.n	8004dc8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	e000      	b.n	8004dca <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004dc8:	2300      	movs	r3, #0
}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	3718      	adds	r7, #24
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd80      	pop	{r7, pc}
 8004dd2:	bf00      	nop
 8004dd4:	40023800 	.word	0x40023800

08004dd8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b084      	sub	sp, #16
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
 8004de0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d101      	bne.n	8004dec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004de8:	2301      	movs	r3, #1
 8004dea:	e0cc      	b.n	8004f86 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004dec:	4b68      	ldr	r3, [pc, #416]	; (8004f90 <HAL_RCC_ClockConfig+0x1b8>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f003 0307 	and.w	r3, r3, #7
 8004df4:	683a      	ldr	r2, [r7, #0]
 8004df6:	429a      	cmp	r2, r3
 8004df8:	d90c      	bls.n	8004e14 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dfa:	4b65      	ldr	r3, [pc, #404]	; (8004f90 <HAL_RCC_ClockConfig+0x1b8>)
 8004dfc:	683a      	ldr	r2, [r7, #0]
 8004dfe:	b2d2      	uxtb	r2, r2
 8004e00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e02:	4b63      	ldr	r3, [pc, #396]	; (8004f90 <HAL_RCC_ClockConfig+0x1b8>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f003 0307 	and.w	r3, r3, #7
 8004e0a:	683a      	ldr	r2, [r7, #0]
 8004e0c:	429a      	cmp	r2, r3
 8004e0e:	d001      	beq.n	8004e14 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004e10:	2301      	movs	r3, #1
 8004e12:	e0b8      	b.n	8004f86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f003 0302 	and.w	r3, r3, #2
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d020      	beq.n	8004e62 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f003 0304 	and.w	r3, r3, #4
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d005      	beq.n	8004e38 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004e2c:	4b59      	ldr	r3, [pc, #356]	; (8004f94 <HAL_RCC_ClockConfig+0x1bc>)
 8004e2e:	689b      	ldr	r3, [r3, #8]
 8004e30:	4a58      	ldr	r2, [pc, #352]	; (8004f94 <HAL_RCC_ClockConfig+0x1bc>)
 8004e32:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004e36:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f003 0308 	and.w	r3, r3, #8
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d005      	beq.n	8004e50 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004e44:	4b53      	ldr	r3, [pc, #332]	; (8004f94 <HAL_RCC_ClockConfig+0x1bc>)
 8004e46:	689b      	ldr	r3, [r3, #8]
 8004e48:	4a52      	ldr	r2, [pc, #328]	; (8004f94 <HAL_RCC_ClockConfig+0x1bc>)
 8004e4a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004e4e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e50:	4b50      	ldr	r3, [pc, #320]	; (8004f94 <HAL_RCC_ClockConfig+0x1bc>)
 8004e52:	689b      	ldr	r3, [r3, #8]
 8004e54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	494d      	ldr	r1, [pc, #308]	; (8004f94 <HAL_RCC_ClockConfig+0x1bc>)
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f003 0301 	and.w	r3, r3, #1
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d044      	beq.n	8004ef8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	2b01      	cmp	r3, #1
 8004e74:	d107      	bne.n	8004e86 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e76:	4b47      	ldr	r3, [pc, #284]	; (8004f94 <HAL_RCC_ClockConfig+0x1bc>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d119      	bne.n	8004eb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e82:	2301      	movs	r3, #1
 8004e84:	e07f      	b.n	8004f86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	2b02      	cmp	r3, #2
 8004e8c:	d003      	beq.n	8004e96 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e92:	2b03      	cmp	r3, #3
 8004e94:	d107      	bne.n	8004ea6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e96:	4b3f      	ldr	r3, [pc, #252]	; (8004f94 <HAL_RCC_ClockConfig+0x1bc>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d109      	bne.n	8004eb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	e06f      	b.n	8004f86 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ea6:	4b3b      	ldr	r3, [pc, #236]	; (8004f94 <HAL_RCC_ClockConfig+0x1bc>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f003 0302 	and.w	r3, r3, #2
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d101      	bne.n	8004eb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	e067      	b.n	8004f86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004eb6:	4b37      	ldr	r3, [pc, #220]	; (8004f94 <HAL_RCC_ClockConfig+0x1bc>)
 8004eb8:	689b      	ldr	r3, [r3, #8]
 8004eba:	f023 0203 	bic.w	r2, r3, #3
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	4934      	ldr	r1, [pc, #208]	; (8004f94 <HAL_RCC_ClockConfig+0x1bc>)
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ec8:	f7fe fbaa 	bl	8003620 <HAL_GetTick>
 8004ecc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ece:	e00a      	b.n	8004ee6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ed0:	f7fe fba6 	bl	8003620 <HAL_GetTick>
 8004ed4:	4602      	mov	r2, r0
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	1ad3      	subs	r3, r2, r3
 8004eda:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d901      	bls.n	8004ee6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004ee2:	2303      	movs	r3, #3
 8004ee4:	e04f      	b.n	8004f86 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ee6:	4b2b      	ldr	r3, [pc, #172]	; (8004f94 <HAL_RCC_ClockConfig+0x1bc>)
 8004ee8:	689b      	ldr	r3, [r3, #8]
 8004eea:	f003 020c 	and.w	r2, r3, #12
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	009b      	lsls	r3, r3, #2
 8004ef4:	429a      	cmp	r2, r3
 8004ef6:	d1eb      	bne.n	8004ed0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ef8:	4b25      	ldr	r3, [pc, #148]	; (8004f90 <HAL_RCC_ClockConfig+0x1b8>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f003 0307 	and.w	r3, r3, #7
 8004f00:	683a      	ldr	r2, [r7, #0]
 8004f02:	429a      	cmp	r2, r3
 8004f04:	d20c      	bcs.n	8004f20 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f06:	4b22      	ldr	r3, [pc, #136]	; (8004f90 <HAL_RCC_ClockConfig+0x1b8>)
 8004f08:	683a      	ldr	r2, [r7, #0]
 8004f0a:	b2d2      	uxtb	r2, r2
 8004f0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f0e:	4b20      	ldr	r3, [pc, #128]	; (8004f90 <HAL_RCC_ClockConfig+0x1b8>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f003 0307 	and.w	r3, r3, #7
 8004f16:	683a      	ldr	r2, [r7, #0]
 8004f18:	429a      	cmp	r2, r3
 8004f1a:	d001      	beq.n	8004f20 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	e032      	b.n	8004f86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f003 0304 	and.w	r3, r3, #4
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d008      	beq.n	8004f3e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f2c:	4b19      	ldr	r3, [pc, #100]	; (8004f94 <HAL_RCC_ClockConfig+0x1bc>)
 8004f2e:	689b      	ldr	r3, [r3, #8]
 8004f30:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	68db      	ldr	r3, [r3, #12]
 8004f38:	4916      	ldr	r1, [pc, #88]	; (8004f94 <HAL_RCC_ClockConfig+0x1bc>)
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f003 0308 	and.w	r3, r3, #8
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d009      	beq.n	8004f5e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f4a:	4b12      	ldr	r3, [pc, #72]	; (8004f94 <HAL_RCC_ClockConfig+0x1bc>)
 8004f4c:	689b      	ldr	r3, [r3, #8]
 8004f4e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	691b      	ldr	r3, [r3, #16]
 8004f56:	00db      	lsls	r3, r3, #3
 8004f58:	490e      	ldr	r1, [pc, #56]	; (8004f94 <HAL_RCC_ClockConfig+0x1bc>)
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004f5e:	f000 f821 	bl	8004fa4 <HAL_RCC_GetSysClockFreq>
 8004f62:	4602      	mov	r2, r0
 8004f64:	4b0b      	ldr	r3, [pc, #44]	; (8004f94 <HAL_RCC_ClockConfig+0x1bc>)
 8004f66:	689b      	ldr	r3, [r3, #8]
 8004f68:	091b      	lsrs	r3, r3, #4
 8004f6a:	f003 030f 	and.w	r3, r3, #15
 8004f6e:	490a      	ldr	r1, [pc, #40]	; (8004f98 <HAL_RCC_ClockConfig+0x1c0>)
 8004f70:	5ccb      	ldrb	r3, [r1, r3]
 8004f72:	fa22 f303 	lsr.w	r3, r2, r3
 8004f76:	4a09      	ldr	r2, [pc, #36]	; (8004f9c <HAL_RCC_ClockConfig+0x1c4>)
 8004f78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004f7a:	4b09      	ldr	r3, [pc, #36]	; (8004fa0 <HAL_RCC_ClockConfig+0x1c8>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4618      	mov	r0, r3
 8004f80:	f7fe fb0a 	bl	8003598 <HAL_InitTick>

  return HAL_OK;
 8004f84:	2300      	movs	r3, #0
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	3710      	adds	r7, #16
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}
 8004f8e:	bf00      	nop
 8004f90:	40023c00 	.word	0x40023c00
 8004f94:	40023800 	.word	0x40023800
 8004f98:	0801ea34 	.word	0x0801ea34
 8004f9c:	200000a8 	.word	0x200000a8
 8004fa0:	200000ac 	.word	0x200000ac

08004fa4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004fa4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004fa8:	b094      	sub	sp, #80	; 0x50
 8004faa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004fac:	2300      	movs	r3, #0
 8004fae:	647b      	str	r3, [r7, #68]	; 0x44
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004fb8:	2300      	movs	r3, #0
 8004fba:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004fbc:	4b79      	ldr	r3, [pc, #484]	; (80051a4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	f003 030c 	and.w	r3, r3, #12
 8004fc4:	2b08      	cmp	r3, #8
 8004fc6:	d00d      	beq.n	8004fe4 <HAL_RCC_GetSysClockFreq+0x40>
 8004fc8:	2b08      	cmp	r3, #8
 8004fca:	f200 80e1 	bhi.w	8005190 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d002      	beq.n	8004fd8 <HAL_RCC_GetSysClockFreq+0x34>
 8004fd2:	2b04      	cmp	r3, #4
 8004fd4:	d003      	beq.n	8004fde <HAL_RCC_GetSysClockFreq+0x3a>
 8004fd6:	e0db      	b.n	8005190 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004fd8:	4b73      	ldr	r3, [pc, #460]	; (80051a8 <HAL_RCC_GetSysClockFreq+0x204>)
 8004fda:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004fdc:	e0db      	b.n	8005196 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004fde:	4b73      	ldr	r3, [pc, #460]	; (80051ac <HAL_RCC_GetSysClockFreq+0x208>)
 8004fe0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004fe2:	e0d8      	b.n	8005196 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004fe4:	4b6f      	ldr	r3, [pc, #444]	; (80051a4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004fec:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004fee:	4b6d      	ldr	r3, [pc, #436]	; (80051a4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d063      	beq.n	80050c2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ffa:	4b6a      	ldr	r3, [pc, #424]	; (80051a4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	099b      	lsrs	r3, r3, #6
 8005000:	2200      	movs	r2, #0
 8005002:	63bb      	str	r3, [r7, #56]	; 0x38
 8005004:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005008:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800500c:	633b      	str	r3, [r7, #48]	; 0x30
 800500e:	2300      	movs	r3, #0
 8005010:	637b      	str	r3, [r7, #52]	; 0x34
 8005012:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005016:	4622      	mov	r2, r4
 8005018:	462b      	mov	r3, r5
 800501a:	f04f 0000 	mov.w	r0, #0
 800501e:	f04f 0100 	mov.w	r1, #0
 8005022:	0159      	lsls	r1, r3, #5
 8005024:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005028:	0150      	lsls	r0, r2, #5
 800502a:	4602      	mov	r2, r0
 800502c:	460b      	mov	r3, r1
 800502e:	4621      	mov	r1, r4
 8005030:	1a51      	subs	r1, r2, r1
 8005032:	6139      	str	r1, [r7, #16]
 8005034:	4629      	mov	r1, r5
 8005036:	eb63 0301 	sbc.w	r3, r3, r1
 800503a:	617b      	str	r3, [r7, #20]
 800503c:	f04f 0200 	mov.w	r2, #0
 8005040:	f04f 0300 	mov.w	r3, #0
 8005044:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005048:	4659      	mov	r1, fp
 800504a:	018b      	lsls	r3, r1, #6
 800504c:	4651      	mov	r1, sl
 800504e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005052:	4651      	mov	r1, sl
 8005054:	018a      	lsls	r2, r1, #6
 8005056:	4651      	mov	r1, sl
 8005058:	ebb2 0801 	subs.w	r8, r2, r1
 800505c:	4659      	mov	r1, fp
 800505e:	eb63 0901 	sbc.w	r9, r3, r1
 8005062:	f04f 0200 	mov.w	r2, #0
 8005066:	f04f 0300 	mov.w	r3, #0
 800506a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800506e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005072:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005076:	4690      	mov	r8, r2
 8005078:	4699      	mov	r9, r3
 800507a:	4623      	mov	r3, r4
 800507c:	eb18 0303 	adds.w	r3, r8, r3
 8005080:	60bb      	str	r3, [r7, #8]
 8005082:	462b      	mov	r3, r5
 8005084:	eb49 0303 	adc.w	r3, r9, r3
 8005088:	60fb      	str	r3, [r7, #12]
 800508a:	f04f 0200 	mov.w	r2, #0
 800508e:	f04f 0300 	mov.w	r3, #0
 8005092:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005096:	4629      	mov	r1, r5
 8005098:	024b      	lsls	r3, r1, #9
 800509a:	4621      	mov	r1, r4
 800509c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80050a0:	4621      	mov	r1, r4
 80050a2:	024a      	lsls	r2, r1, #9
 80050a4:	4610      	mov	r0, r2
 80050a6:	4619      	mov	r1, r3
 80050a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050aa:	2200      	movs	r2, #0
 80050ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80050ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 80050b0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80050b4:	f7fb f8fc 	bl	80002b0 <__aeabi_uldivmod>
 80050b8:	4602      	mov	r2, r0
 80050ba:	460b      	mov	r3, r1
 80050bc:	4613      	mov	r3, r2
 80050be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050c0:	e058      	b.n	8005174 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80050c2:	4b38      	ldr	r3, [pc, #224]	; (80051a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	099b      	lsrs	r3, r3, #6
 80050c8:	2200      	movs	r2, #0
 80050ca:	4618      	mov	r0, r3
 80050cc:	4611      	mov	r1, r2
 80050ce:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80050d2:	623b      	str	r3, [r7, #32]
 80050d4:	2300      	movs	r3, #0
 80050d6:	627b      	str	r3, [r7, #36]	; 0x24
 80050d8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80050dc:	4642      	mov	r2, r8
 80050de:	464b      	mov	r3, r9
 80050e0:	f04f 0000 	mov.w	r0, #0
 80050e4:	f04f 0100 	mov.w	r1, #0
 80050e8:	0159      	lsls	r1, r3, #5
 80050ea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80050ee:	0150      	lsls	r0, r2, #5
 80050f0:	4602      	mov	r2, r0
 80050f2:	460b      	mov	r3, r1
 80050f4:	4641      	mov	r1, r8
 80050f6:	ebb2 0a01 	subs.w	sl, r2, r1
 80050fa:	4649      	mov	r1, r9
 80050fc:	eb63 0b01 	sbc.w	fp, r3, r1
 8005100:	f04f 0200 	mov.w	r2, #0
 8005104:	f04f 0300 	mov.w	r3, #0
 8005108:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800510c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005110:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005114:	ebb2 040a 	subs.w	r4, r2, sl
 8005118:	eb63 050b 	sbc.w	r5, r3, fp
 800511c:	f04f 0200 	mov.w	r2, #0
 8005120:	f04f 0300 	mov.w	r3, #0
 8005124:	00eb      	lsls	r3, r5, #3
 8005126:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800512a:	00e2      	lsls	r2, r4, #3
 800512c:	4614      	mov	r4, r2
 800512e:	461d      	mov	r5, r3
 8005130:	4643      	mov	r3, r8
 8005132:	18e3      	adds	r3, r4, r3
 8005134:	603b      	str	r3, [r7, #0]
 8005136:	464b      	mov	r3, r9
 8005138:	eb45 0303 	adc.w	r3, r5, r3
 800513c:	607b      	str	r3, [r7, #4]
 800513e:	f04f 0200 	mov.w	r2, #0
 8005142:	f04f 0300 	mov.w	r3, #0
 8005146:	e9d7 4500 	ldrd	r4, r5, [r7]
 800514a:	4629      	mov	r1, r5
 800514c:	028b      	lsls	r3, r1, #10
 800514e:	4621      	mov	r1, r4
 8005150:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005154:	4621      	mov	r1, r4
 8005156:	028a      	lsls	r2, r1, #10
 8005158:	4610      	mov	r0, r2
 800515a:	4619      	mov	r1, r3
 800515c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800515e:	2200      	movs	r2, #0
 8005160:	61bb      	str	r3, [r7, #24]
 8005162:	61fa      	str	r2, [r7, #28]
 8005164:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005168:	f7fb f8a2 	bl	80002b0 <__aeabi_uldivmod>
 800516c:	4602      	mov	r2, r0
 800516e:	460b      	mov	r3, r1
 8005170:	4613      	mov	r3, r2
 8005172:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005174:	4b0b      	ldr	r3, [pc, #44]	; (80051a4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	0c1b      	lsrs	r3, r3, #16
 800517a:	f003 0303 	and.w	r3, r3, #3
 800517e:	3301      	adds	r3, #1
 8005180:	005b      	lsls	r3, r3, #1
 8005182:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005184:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005186:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005188:	fbb2 f3f3 	udiv	r3, r2, r3
 800518c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800518e:	e002      	b.n	8005196 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005190:	4b05      	ldr	r3, [pc, #20]	; (80051a8 <HAL_RCC_GetSysClockFreq+0x204>)
 8005192:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005194:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005196:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005198:	4618      	mov	r0, r3
 800519a:	3750      	adds	r7, #80	; 0x50
 800519c:	46bd      	mov	sp, r7
 800519e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80051a2:	bf00      	nop
 80051a4:	40023800 	.word	0x40023800
 80051a8:	00f42400 	.word	0x00f42400
 80051ac:	007a1200 	.word	0x007a1200

080051b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80051b0:	b480      	push	{r7}
 80051b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80051b4:	4b03      	ldr	r3, [pc, #12]	; (80051c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80051b6:	681b      	ldr	r3, [r3, #0]
}
 80051b8:	4618      	mov	r0, r3
 80051ba:	46bd      	mov	sp, r7
 80051bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c0:	4770      	bx	lr
 80051c2:	bf00      	nop
 80051c4:	200000a8 	.word	0x200000a8

080051c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80051cc:	f7ff fff0 	bl	80051b0 <HAL_RCC_GetHCLKFreq>
 80051d0:	4602      	mov	r2, r0
 80051d2:	4b05      	ldr	r3, [pc, #20]	; (80051e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80051d4:	689b      	ldr	r3, [r3, #8]
 80051d6:	0a9b      	lsrs	r3, r3, #10
 80051d8:	f003 0307 	and.w	r3, r3, #7
 80051dc:	4903      	ldr	r1, [pc, #12]	; (80051ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80051de:	5ccb      	ldrb	r3, [r1, r3]
 80051e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	bd80      	pop	{r7, pc}
 80051e8:	40023800 	.word	0x40023800
 80051ec:	0801ea44 	.word	0x0801ea44

080051f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80051f4:	f7ff ffdc 	bl	80051b0 <HAL_RCC_GetHCLKFreq>
 80051f8:	4602      	mov	r2, r0
 80051fa:	4b05      	ldr	r3, [pc, #20]	; (8005210 <HAL_RCC_GetPCLK2Freq+0x20>)
 80051fc:	689b      	ldr	r3, [r3, #8]
 80051fe:	0b5b      	lsrs	r3, r3, #13
 8005200:	f003 0307 	and.w	r3, r3, #7
 8005204:	4903      	ldr	r1, [pc, #12]	; (8005214 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005206:	5ccb      	ldrb	r3, [r1, r3]
 8005208:	fa22 f303 	lsr.w	r3, r2, r3
}
 800520c:	4618      	mov	r0, r3
 800520e:	bd80      	pop	{r7, pc}
 8005210:	40023800 	.word	0x40023800
 8005214:	0801ea44 	.word	0x0801ea44

08005218 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b082      	sub	sp, #8
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d101      	bne.n	800522a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005226:	2301      	movs	r3, #1
 8005228:	e07b      	b.n	8005322 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800522e:	2b00      	cmp	r3, #0
 8005230:	d108      	bne.n	8005244 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800523a:	d009      	beq.n	8005250 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2200      	movs	r2, #0
 8005240:	61da      	str	r2, [r3, #28]
 8005242:	e005      	b.n	8005250 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2200      	movs	r2, #0
 8005248:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2200      	movs	r2, #0
 800524e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2200      	movs	r2, #0
 8005254:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800525c:	b2db      	uxtb	r3, r3
 800525e:	2b00      	cmp	r3, #0
 8005260:	d106      	bne.n	8005270 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2200      	movs	r2, #0
 8005266:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	f7fd fd3c 	bl	8002ce8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2202      	movs	r2, #2
 8005274:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	681a      	ldr	r2, [r3, #0]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005286:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	689b      	ldr	r3, [r3, #8]
 8005294:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005298:	431a      	orrs	r2, r3
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	68db      	ldr	r3, [r3, #12]
 800529e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052a2:	431a      	orrs	r2, r3
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	691b      	ldr	r3, [r3, #16]
 80052a8:	f003 0302 	and.w	r3, r3, #2
 80052ac:	431a      	orrs	r2, r3
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	695b      	ldr	r3, [r3, #20]
 80052b2:	f003 0301 	and.w	r3, r3, #1
 80052b6:	431a      	orrs	r2, r3
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	699b      	ldr	r3, [r3, #24]
 80052bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80052c0:	431a      	orrs	r2, r3
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	69db      	ldr	r3, [r3, #28]
 80052c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80052ca:	431a      	orrs	r2, r3
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6a1b      	ldr	r3, [r3, #32]
 80052d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052d4:	ea42 0103 	orr.w	r1, r2, r3
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052dc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	430a      	orrs	r2, r1
 80052e6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	699b      	ldr	r3, [r3, #24]
 80052ec:	0c1b      	lsrs	r3, r3, #16
 80052ee:	f003 0104 	and.w	r1, r3, #4
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f6:	f003 0210 	and.w	r2, r3, #16
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	430a      	orrs	r2, r1
 8005300:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	69da      	ldr	r2, [r3, #28]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005310:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2200      	movs	r2, #0
 8005316:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2201      	movs	r2, #1
 800531c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005320:	2300      	movs	r3, #0
}
 8005322:	4618      	mov	r0, r3
 8005324:	3708      	adds	r7, #8
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}

0800532a <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800532a:	b580      	push	{r7, lr}
 800532c:	b082      	sub	sp, #8
 800532e:	af00      	add	r7, sp, #0
 8005330:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d101      	bne.n	800533c <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8005338:	2301      	movs	r3, #1
 800533a:	e01a      	b.n	8005372 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2202      	movs	r2, #2
 8005340:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	681a      	ldr	r2, [r3, #0]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005352:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8005354:	6878      	ldr	r0, [r7, #4]
 8005356:	f7fd fe61 	bl	800301c <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2200      	movs	r2, #0
 800535e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2200      	movs	r2, #0
 8005364:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2200      	movs	r2, #0
 800536c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005370:	2300      	movs	r3, #0
}
 8005372:	4618      	mov	r0, r3
 8005374:	3708      	adds	r7, #8
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}

0800537a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800537a:	b580      	push	{r7, lr}
 800537c:	b088      	sub	sp, #32
 800537e:	af00      	add	r7, sp, #0
 8005380:	60f8      	str	r0, [r7, #12]
 8005382:	60b9      	str	r1, [r7, #8]
 8005384:	603b      	str	r3, [r7, #0]
 8005386:	4613      	mov	r3, r2
 8005388:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800538a:	2300      	movs	r3, #0
 800538c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005394:	2b01      	cmp	r3, #1
 8005396:	d101      	bne.n	800539c <HAL_SPI_Transmit+0x22>
 8005398:	2302      	movs	r3, #2
 800539a:	e126      	b.n	80055ea <HAL_SPI_Transmit+0x270>
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	2201      	movs	r2, #1
 80053a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80053a4:	f7fe f93c 	bl	8003620 <HAL_GetTick>
 80053a8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80053aa:	88fb      	ldrh	r3, [r7, #6]
 80053ac:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80053b4:	b2db      	uxtb	r3, r3
 80053b6:	2b01      	cmp	r3, #1
 80053b8:	d002      	beq.n	80053c0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80053ba:	2302      	movs	r3, #2
 80053bc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80053be:	e10b      	b.n	80055d8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d002      	beq.n	80053cc <HAL_SPI_Transmit+0x52>
 80053c6:	88fb      	ldrh	r3, [r7, #6]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d102      	bne.n	80053d2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80053cc:	2301      	movs	r3, #1
 80053ce:	77fb      	strb	r3, [r7, #31]
    goto error;
 80053d0:	e102      	b.n	80055d8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2203      	movs	r2, #3
 80053d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2200      	movs	r2, #0
 80053de:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	68ba      	ldr	r2, [r7, #8]
 80053e4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	88fa      	ldrh	r2, [r7, #6]
 80053ea:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	88fa      	ldrh	r2, [r7, #6]
 80053f0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2200      	movs	r2, #0
 80053f6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	2200      	movs	r2, #0
 80053fc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	2200      	movs	r2, #0
 8005402:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	2200      	movs	r2, #0
 8005408:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	2200      	movs	r2, #0
 800540e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	689b      	ldr	r3, [r3, #8]
 8005414:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005418:	d10f      	bne.n	800543a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	681a      	ldr	r2, [r3, #0]
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005428:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	681a      	ldr	r2, [r3, #0]
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005438:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005444:	2b40      	cmp	r3, #64	; 0x40
 8005446:	d007      	beq.n	8005458 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	681a      	ldr	r2, [r3, #0]
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005456:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	68db      	ldr	r3, [r3, #12]
 800545c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005460:	d14b      	bne.n	80054fa <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d002      	beq.n	8005470 <HAL_SPI_Transmit+0xf6>
 800546a:	8afb      	ldrh	r3, [r7, #22]
 800546c:	2b01      	cmp	r3, #1
 800546e:	d13e      	bne.n	80054ee <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005474:	881a      	ldrh	r2, [r3, #0]
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005480:	1c9a      	adds	r2, r3, #2
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800548a:	b29b      	uxth	r3, r3
 800548c:	3b01      	subs	r3, #1
 800548e:	b29a      	uxth	r2, r3
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005494:	e02b      	b.n	80054ee <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	689b      	ldr	r3, [r3, #8]
 800549c:	f003 0302 	and.w	r3, r3, #2
 80054a0:	2b02      	cmp	r3, #2
 80054a2:	d112      	bne.n	80054ca <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054a8:	881a      	ldrh	r2, [r3, #0]
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054b4:	1c9a      	adds	r2, r3, #2
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054be:	b29b      	uxth	r3, r3
 80054c0:	3b01      	subs	r3, #1
 80054c2:	b29a      	uxth	r2, r3
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	86da      	strh	r2, [r3, #54]	; 0x36
 80054c8:	e011      	b.n	80054ee <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80054ca:	f7fe f8a9 	bl	8003620 <HAL_GetTick>
 80054ce:	4602      	mov	r2, r0
 80054d0:	69bb      	ldr	r3, [r7, #24]
 80054d2:	1ad3      	subs	r3, r2, r3
 80054d4:	683a      	ldr	r2, [r7, #0]
 80054d6:	429a      	cmp	r2, r3
 80054d8:	d803      	bhi.n	80054e2 <HAL_SPI_Transmit+0x168>
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054e0:	d102      	bne.n	80054e8 <HAL_SPI_Transmit+0x16e>
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d102      	bne.n	80054ee <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80054e8:	2303      	movs	r3, #3
 80054ea:	77fb      	strb	r3, [r7, #31]
          goto error;
 80054ec:	e074      	b.n	80055d8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054f2:	b29b      	uxth	r3, r3
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d1ce      	bne.n	8005496 <HAL_SPI_Transmit+0x11c>
 80054f8:	e04c      	b.n	8005594 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d002      	beq.n	8005508 <HAL_SPI_Transmit+0x18e>
 8005502:	8afb      	ldrh	r3, [r7, #22]
 8005504:	2b01      	cmp	r3, #1
 8005506:	d140      	bne.n	800558a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	330c      	adds	r3, #12
 8005512:	7812      	ldrb	r2, [r2, #0]
 8005514:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800551a:	1c5a      	adds	r2, r3, #1
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005524:	b29b      	uxth	r3, r3
 8005526:	3b01      	subs	r3, #1
 8005528:	b29a      	uxth	r2, r3
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800552e:	e02c      	b.n	800558a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	689b      	ldr	r3, [r3, #8]
 8005536:	f003 0302 	and.w	r3, r3, #2
 800553a:	2b02      	cmp	r3, #2
 800553c:	d113      	bne.n	8005566 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	330c      	adds	r3, #12
 8005548:	7812      	ldrb	r2, [r2, #0]
 800554a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005550:	1c5a      	adds	r2, r3, #1
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800555a:	b29b      	uxth	r3, r3
 800555c:	3b01      	subs	r3, #1
 800555e:	b29a      	uxth	r2, r3
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	86da      	strh	r2, [r3, #54]	; 0x36
 8005564:	e011      	b.n	800558a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005566:	f7fe f85b 	bl	8003620 <HAL_GetTick>
 800556a:	4602      	mov	r2, r0
 800556c:	69bb      	ldr	r3, [r7, #24]
 800556e:	1ad3      	subs	r3, r2, r3
 8005570:	683a      	ldr	r2, [r7, #0]
 8005572:	429a      	cmp	r2, r3
 8005574:	d803      	bhi.n	800557e <HAL_SPI_Transmit+0x204>
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800557c:	d102      	bne.n	8005584 <HAL_SPI_Transmit+0x20a>
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d102      	bne.n	800558a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005584:	2303      	movs	r3, #3
 8005586:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005588:	e026      	b.n	80055d8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800558e:	b29b      	uxth	r3, r3
 8005590:	2b00      	cmp	r3, #0
 8005592:	d1cd      	bne.n	8005530 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005594:	69ba      	ldr	r2, [r7, #24]
 8005596:	6839      	ldr	r1, [r7, #0]
 8005598:	68f8      	ldr	r0, [r7, #12]
 800559a:	f000 fe13 	bl	80061c4 <SPI_EndRxTxTransaction>
 800559e:	4603      	mov	r3, r0
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d002      	beq.n	80055aa <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	2220      	movs	r2, #32
 80055a8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	689b      	ldr	r3, [r3, #8]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d10a      	bne.n	80055c8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80055b2:	2300      	movs	r3, #0
 80055b4:	613b      	str	r3, [r7, #16]
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	68db      	ldr	r3, [r3, #12]
 80055bc:	613b      	str	r3, [r7, #16]
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	689b      	ldr	r3, [r3, #8]
 80055c4:	613b      	str	r3, [r7, #16]
 80055c6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d002      	beq.n	80055d6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80055d0:	2301      	movs	r3, #1
 80055d2:	77fb      	strb	r3, [r7, #31]
 80055d4:	e000      	b.n	80055d8 <HAL_SPI_Transmit+0x25e>
  }

error:
 80055d6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	2201      	movs	r2, #1
 80055dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	2200      	movs	r2, #0
 80055e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80055e8:	7ffb      	ldrb	r3, [r7, #31]
}
 80055ea:	4618      	mov	r0, r3
 80055ec:	3720      	adds	r7, #32
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bd80      	pop	{r7, pc}
	...

080055f4 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b086      	sub	sp, #24
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	60f8      	str	r0, [r7, #12]
 80055fc:	60b9      	str	r1, [r7, #8]
 80055fe:	4613      	mov	r3, r2
 8005600:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005602:	2300      	movs	r3, #0
 8005604:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800560c:	2b01      	cmp	r3, #1
 800560e:	d101      	bne.n	8005614 <HAL_SPI_Transmit_DMA+0x20>
 8005610:	2302      	movs	r3, #2
 8005612:	e09b      	b.n	800574c <HAL_SPI_Transmit_DMA+0x158>
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2201      	movs	r2, #1
 8005618:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005622:	b2db      	uxtb	r3, r3
 8005624:	2b01      	cmp	r3, #1
 8005626:	d002      	beq.n	800562e <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8005628:	2302      	movs	r3, #2
 800562a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800562c:	e089      	b.n	8005742 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d002      	beq.n	800563a <HAL_SPI_Transmit_DMA+0x46>
 8005634:	88fb      	ldrh	r3, [r7, #6]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d102      	bne.n	8005640 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800563a:	2301      	movs	r3, #1
 800563c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800563e:	e080      	b.n	8005742 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	2203      	movs	r2, #3
 8005644:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	2200      	movs	r2, #0
 800564c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	68ba      	ldr	r2, [r7, #8]
 8005652:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	88fa      	ldrh	r2, [r7, #6]
 8005658:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	88fa      	ldrh	r2, [r7, #6]
 800565e:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	2200      	movs	r2, #0
 8005664:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2200      	movs	r2, #0
 800566a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	2200      	movs	r2, #0
 8005670:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	2200      	movs	r2, #0
 8005676:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	2200      	movs	r2, #0
 800567c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	689b      	ldr	r3, [r3, #8]
 8005682:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005686:	d10f      	bne.n	80056a8 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	681a      	ldr	r2, [r3, #0]
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005696:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	681a      	ldr	r2, [r3, #0]
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80056a6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056ac:	4a29      	ldr	r2, [pc, #164]	; (8005754 <HAL_SPI_Transmit_DMA+0x160>)
 80056ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056b4:	4a28      	ldr	r2, [pc, #160]	; (8005758 <HAL_SPI_Transmit_DMA+0x164>)
 80056b6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056bc:	4a27      	ldr	r2, [pc, #156]	; (800575c <HAL_SPI_Transmit_DMA+0x168>)
 80056be:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056c4:	2200      	movs	r2, #0
 80056c6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056d0:	4619      	mov	r1, r3
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	330c      	adds	r3, #12
 80056d8:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056de:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80056e0:	f7fe fa3a 	bl	8003b58 <HAL_DMA_Start_IT>
 80056e4:	4603      	mov	r3, r0
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d00c      	beq.n	8005704 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056ee:	f043 0210 	orr.w	r2, r3, #16
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80056f6:	2301      	movs	r3, #1
 80056f8:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	2201      	movs	r2, #1
 80056fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8005702:	e01e      	b.n	8005742 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800570e:	2b40      	cmp	r3, #64	; 0x40
 8005710:	d007      	beq.n	8005722 <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	681a      	ldr	r2, [r3, #0]
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005720:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	685a      	ldr	r2, [r3, #4]
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f042 0220 	orr.w	r2, r2, #32
 8005730:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	685a      	ldr	r2, [r3, #4]
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f042 0202 	orr.w	r2, r2, #2
 8005740:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2200      	movs	r2, #0
 8005746:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800574a:	7dfb      	ldrb	r3, [r7, #23]
}
 800574c:	4618      	mov	r0, r3
 800574e:	3718      	adds	r7, #24
 8005750:	46bd      	mov	sp, r7
 8005752:	bd80      	pop	{r7, pc}
 8005754:	08005f2d 	.word	0x08005f2d
 8005758:	08005d4d 	.word	0x08005d4d
 800575c:	08005f81 	.word	0x08005f81

08005760 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b086      	sub	sp, #24
 8005764:	af00      	add	r7, sp, #0
 8005766:	60f8      	str	r0, [r7, #12]
 8005768:	60b9      	str	r1, [r7, #8]
 800576a:	4613      	mov	r3, r2
 800576c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800576e:	2300      	movs	r3, #0
 8005770:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	689b      	ldr	r3, [r3, #8]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d110      	bne.n	800579c <HAL_SPI_Receive_DMA+0x3c>
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005782:	d10b      	bne.n	800579c <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	2204      	movs	r2, #4
 8005788:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 800578c:	88fb      	ldrh	r3, [r7, #6]
 800578e:	68ba      	ldr	r2, [r7, #8]
 8005790:	68b9      	ldr	r1, [r7, #8]
 8005792:	68f8      	ldr	r0, [r7, #12]
 8005794:	f000 f8a6 	bl	80058e4 <HAL_SPI_TransmitReceive_DMA>
 8005798:	4603      	mov	r3, r0
 800579a:	e09b      	b.n	80058d4 <HAL_SPI_Receive_DMA+0x174>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80057a2:	2b01      	cmp	r3, #1
 80057a4:	d101      	bne.n	80057aa <HAL_SPI_Receive_DMA+0x4a>
 80057a6:	2302      	movs	r3, #2
 80057a8:	e094      	b.n	80058d4 <HAL_SPI_Receive_DMA+0x174>
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	2201      	movs	r2, #1
 80057ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80057b8:	b2db      	uxtb	r3, r3
 80057ba:	2b01      	cmp	r3, #1
 80057bc:	d002      	beq.n	80057c4 <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 80057be:	2302      	movs	r3, #2
 80057c0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80057c2:	e082      	b.n	80058ca <HAL_SPI_Receive_DMA+0x16a>
  }

  if ((pData == NULL) || (Size == 0U))
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d002      	beq.n	80057d0 <HAL_SPI_Receive_DMA+0x70>
 80057ca:	88fb      	ldrh	r3, [r7, #6]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d102      	bne.n	80057d6 <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 80057d0:	2301      	movs	r3, #1
 80057d2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80057d4:	e079      	b.n	80058ca <HAL_SPI_Receive_DMA+0x16a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2204      	movs	r2, #4
 80057da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	2200      	movs	r2, #0
 80057e2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	68ba      	ldr	r2, [r7, #8]
 80057e8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	88fa      	ldrh	r2, [r7, #6]
 80057ee:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	88fa      	ldrh	r2, [r7, #6]
 80057f4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	2200      	movs	r2, #0
 80057fa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	2200      	movs	r2, #0
 8005800:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->TxXferSize  = 0U;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	2200      	movs	r2, #0
 8005806:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	2200      	movs	r2, #0
 800580c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	689b      	ldr	r3, [r3, #8]
 8005812:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005816:	d10f      	bne.n	8005838 <HAL_SPI_Receive_DMA+0xd8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	681a      	ldr	r2, [r3, #0]
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005826:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	681a      	ldr	r2, [r3, #0]
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005836:	601a      	str	r2, [r3, #0]

//  /* Set the SPI RxDMA Half transfer complete callback */
//  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800583c:	4a27      	ldr	r2, [pc, #156]	; (80058dc <HAL_SPI_Receive_DMA+0x17c>)
 800583e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005844:	4a26      	ldr	r2, [pc, #152]	; (80058e0 <HAL_SPI_Receive_DMA+0x180>)
 8005846:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800584c:	2200      	movs	r2, #0
 800584e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	330c      	adds	r3, #12
 800585a:	4619      	mov	r1, r3
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005860:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005866:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8005868:	f7fe f976 	bl	8003b58 <HAL_DMA_Start_IT>
 800586c:	4603      	mov	r3, r0
 800586e:	2b00      	cmp	r3, #0
 8005870:	d00c      	beq.n	800588c <HAL_SPI_Receive_DMA+0x12c>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005876:	f043 0210 	orr.w	r2, r3, #16
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800587e:	2301      	movs	r3, #1
 8005880:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	2201      	movs	r2, #1
 8005886:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800588a:	e01e      	b.n	80058ca <HAL_SPI_Receive_DMA+0x16a>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005896:	2b40      	cmp	r3, #64	; 0x40
 8005898:	d007      	beq.n	80058aa <HAL_SPI_Receive_DMA+0x14a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	681a      	ldr	r2, [r3, #0]
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80058a8:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	685a      	ldr	r2, [r3, #4]
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f042 0220 	orr.w	r2, r2, #32
 80058b8:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	685a      	ldr	r2, [r3, #4]
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f042 0201 	orr.w	r2, r2, #1
 80058c8:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2200      	movs	r2, #0
 80058ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80058d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80058d4:	4618      	mov	r0, r3
 80058d6:	3718      	adds	r7, #24
 80058d8:	46bd      	mov	sp, r7
 80058da:	bd80      	pop	{r7, pc}
 80058dc:	08005df5 	.word	0x08005df5
 80058e0:	08005f81 	.word	0x08005f81

080058e4 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b086      	sub	sp, #24
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	60f8      	str	r0, [r7, #12]
 80058ec:	60b9      	str	r1, [r7, #8]
 80058ee:	607a      	str	r2, [r7, #4]
 80058f0:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80058f2:	2300      	movs	r3, #0
 80058f4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80058fc:	2b01      	cmp	r3, #1
 80058fe:	d101      	bne.n	8005904 <HAL_SPI_TransmitReceive_DMA+0x20>
 8005900:	2302      	movs	r3, #2
 8005902:	e0e3      	b.n	8005acc <HAL_SPI_TransmitReceive_DMA+0x1e8>
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2201      	movs	r2, #1
 8005908:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005912:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800591a:	7dbb      	ldrb	r3, [r7, #22]
 800591c:	2b01      	cmp	r3, #1
 800591e:	d00d      	beq.n	800593c <HAL_SPI_TransmitReceive_DMA+0x58>
 8005920:	693b      	ldr	r3, [r7, #16]
 8005922:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005926:	d106      	bne.n	8005936 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	689b      	ldr	r3, [r3, #8]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d102      	bne.n	8005936 <HAL_SPI_TransmitReceive_DMA+0x52>
 8005930:	7dbb      	ldrb	r3, [r7, #22]
 8005932:	2b04      	cmp	r3, #4
 8005934:	d002      	beq.n	800593c <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8005936:	2302      	movs	r3, #2
 8005938:	75fb      	strb	r3, [r7, #23]
    goto error;
 800593a:	e0c2      	b.n	8005ac2 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d005      	beq.n	800594e <HAL_SPI_TransmitReceive_DMA+0x6a>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d002      	beq.n	800594e <HAL_SPI_TransmitReceive_DMA+0x6a>
 8005948:	887b      	ldrh	r3, [r7, #2]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d102      	bne.n	8005954 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 800594e:	2301      	movs	r3, #1
 8005950:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005952:	e0b6      	b.n	8005ac2 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800595a:	b2db      	uxtb	r3, r3
 800595c:	2b04      	cmp	r3, #4
 800595e:	d003      	beq.n	8005968 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	2205      	movs	r2, #5
 8005964:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	2200      	movs	r2, #0
 800596c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	68ba      	ldr	r2, [r7, #8]
 8005972:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	887a      	ldrh	r2, [r7, #2]
 8005978:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	887a      	ldrh	r2, [r7, #2]
 800597e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	687a      	ldr	r2, [r7, #4]
 8005984:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	887a      	ldrh	r2, [r7, #2]
 800598a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	887a      	ldrh	r2, [r7, #2]
 8005990:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	2200      	movs	r2, #0
 8005996:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	2200      	movs	r2, #0
 800599c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80059a4:	b2db      	uxtb	r3, r3
 80059a6:	2b04      	cmp	r3, #4
 80059a8:	d108      	bne.n	80059bc <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059ae:	4a49      	ldr	r2, [pc, #292]	; (8005ad4 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 80059b0:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059b6:	4a48      	ldr	r2, [pc, #288]	; (8005ad8 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 80059b8:	63da      	str	r2, [r3, #60]	; 0x3c
 80059ba:	e007      	b.n	80059cc <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059c0:	4a46      	ldr	r2, [pc, #280]	; (8005adc <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 80059c2:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059c8:	4a45      	ldr	r2, [pc, #276]	; (8005ae0 <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 80059ca:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059d0:	4a44      	ldr	r2, [pc, #272]	; (8005ae4 <HAL_SPI_TransmitReceive_DMA+0x200>)
 80059d2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059d8:	2200      	movs	r2, #0
 80059da:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	330c      	adds	r3, #12
 80059e6:	4619      	mov	r1, r3
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ec:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059f2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80059f4:	f7fe f8b0 	bl	8003b58 <HAL_DMA_Start_IT>
 80059f8:	4603      	mov	r3, r0
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d00c      	beq.n	8005a18 <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a02:	f043 0210 	orr.w	r2, r3, #16
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	2201      	movs	r2, #1
 8005a12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8005a16:	e054      	b.n	8005ac2 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	685a      	ldr	r2, [r3, #4]
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f042 0201 	orr.w	r2, r2, #1
 8005a26:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a34:	2200      	movs	r2, #0
 8005a36:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a44:	2200      	movs	r2, #0
 8005a46:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a50:	4619      	mov	r1, r3
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	330c      	adds	r3, #12
 8005a58:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a5e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005a60:	f7fe f87a 	bl	8003b58 <HAL_DMA_Start_IT>
 8005a64:	4603      	mov	r3, r0
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d00c      	beq.n	8005a84 <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a6e:	f043 0210 	orr.w	r2, r3, #16
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8005a76:	2301      	movs	r3, #1
 8005a78:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	2201      	movs	r2, #1
 8005a7e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8005a82:	e01e      	b.n	8005ac2 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a8e:	2b40      	cmp	r3, #64	; 0x40
 8005a90:	d007      	beq.n	8005aa2 <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	681a      	ldr	r2, [r3, #0]
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005aa0:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	685a      	ldr	r2, [r3, #4]
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f042 0220 	orr.w	r2, r2, #32
 8005ab0:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	685a      	ldr	r2, [r3, #4]
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f042 0202 	orr.w	r2, r2, #2
 8005ac0:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005aca:	7dfb      	ldrb	r3, [r7, #23]
}
 8005acc:	4618      	mov	r0, r3
 8005ace:	3718      	adds	r7, #24
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bd80      	pop	{r7, pc}
 8005ad4:	08005f49 	.word	0x08005f49
 8005ad8:	08005df5 	.word	0x08005df5
 8005adc:	08005f65 	.word	0x08005f65
 8005ae0:	08005e9d 	.word	0x08005e9d
 8005ae4:	08005f81 	.word	0x08005f81

08005ae8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b088      	sub	sp, #32
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	689b      	ldr	r3, [r3, #8]
 8005afe:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005b00:	69bb      	ldr	r3, [r7, #24]
 8005b02:	099b      	lsrs	r3, r3, #6
 8005b04:	f003 0301 	and.w	r3, r3, #1
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d10f      	bne.n	8005b2c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005b0c:	69bb      	ldr	r3, [r7, #24]
 8005b0e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d00a      	beq.n	8005b2c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005b16:	69fb      	ldr	r3, [r7, #28]
 8005b18:	099b      	lsrs	r3, r3, #6
 8005b1a:	f003 0301 	and.w	r3, r3, #1
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d004      	beq.n	8005b2c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	4798      	blx	r3
    return;
 8005b2a:	e0d7      	b.n	8005cdc <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005b2c:	69bb      	ldr	r3, [r7, #24]
 8005b2e:	085b      	lsrs	r3, r3, #1
 8005b30:	f003 0301 	and.w	r3, r3, #1
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d00a      	beq.n	8005b4e <HAL_SPI_IRQHandler+0x66>
 8005b38:	69fb      	ldr	r3, [r7, #28]
 8005b3a:	09db      	lsrs	r3, r3, #7
 8005b3c:	f003 0301 	and.w	r3, r3, #1
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d004      	beq.n	8005b4e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b48:	6878      	ldr	r0, [r7, #4]
 8005b4a:	4798      	blx	r3
    return;
 8005b4c:	e0c6      	b.n	8005cdc <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005b4e:	69bb      	ldr	r3, [r7, #24]
 8005b50:	095b      	lsrs	r3, r3, #5
 8005b52:	f003 0301 	and.w	r3, r3, #1
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d10c      	bne.n	8005b74 <HAL_SPI_IRQHandler+0x8c>
 8005b5a:	69bb      	ldr	r3, [r7, #24]
 8005b5c:	099b      	lsrs	r3, r3, #6
 8005b5e:	f003 0301 	and.w	r3, r3, #1
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d106      	bne.n	8005b74 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005b66:	69bb      	ldr	r3, [r7, #24]
 8005b68:	0a1b      	lsrs	r3, r3, #8
 8005b6a:	f003 0301 	and.w	r3, r3, #1
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	f000 80b4 	beq.w	8005cdc <HAL_SPI_IRQHandler+0x1f4>
 8005b74:	69fb      	ldr	r3, [r7, #28]
 8005b76:	095b      	lsrs	r3, r3, #5
 8005b78:	f003 0301 	and.w	r3, r3, #1
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	f000 80ad 	beq.w	8005cdc <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005b82:	69bb      	ldr	r3, [r7, #24]
 8005b84:	099b      	lsrs	r3, r3, #6
 8005b86:	f003 0301 	and.w	r3, r3, #1
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d023      	beq.n	8005bd6 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005b94:	b2db      	uxtb	r3, r3
 8005b96:	2b03      	cmp	r3, #3
 8005b98:	d011      	beq.n	8005bbe <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b9e:	f043 0204 	orr.w	r2, r3, #4
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	617b      	str	r3, [r7, #20]
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	68db      	ldr	r3, [r3, #12]
 8005bb0:	617b      	str	r3, [r7, #20]
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	689b      	ldr	r3, [r3, #8]
 8005bb8:	617b      	str	r3, [r7, #20]
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	e00b      	b.n	8005bd6 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	613b      	str	r3, [r7, #16]
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	68db      	ldr	r3, [r3, #12]
 8005bc8:	613b      	str	r3, [r7, #16]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	689b      	ldr	r3, [r3, #8]
 8005bd0:	613b      	str	r3, [r7, #16]
 8005bd2:	693b      	ldr	r3, [r7, #16]
        return;
 8005bd4:	e082      	b.n	8005cdc <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005bd6:	69bb      	ldr	r3, [r7, #24]
 8005bd8:	095b      	lsrs	r3, r3, #5
 8005bda:	f003 0301 	and.w	r3, r3, #1
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d014      	beq.n	8005c0c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005be6:	f043 0201 	orr.w	r2, r3, #1
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005bee:	2300      	movs	r3, #0
 8005bf0:	60fb      	str	r3, [r7, #12]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	60fb      	str	r3, [r7, #12]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	681a      	ldr	r2, [r3, #0]
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c08:	601a      	str	r2, [r3, #0]
 8005c0a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005c0c:	69bb      	ldr	r3, [r7, #24]
 8005c0e:	0a1b      	lsrs	r3, r3, #8
 8005c10:	f003 0301 	and.w	r3, r3, #1
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d00c      	beq.n	8005c32 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c1c:	f043 0208 	orr.w	r2, r3, #8
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005c24:	2300      	movs	r3, #0
 8005c26:	60bb      	str	r3, [r7, #8]
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	689b      	ldr	r3, [r3, #8]
 8005c2e:	60bb      	str	r3, [r7, #8]
 8005c30:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d04f      	beq.n	8005cda <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	685a      	ldr	r2, [r3, #4]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005c48:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2201      	movs	r2, #1
 8005c4e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005c52:	69fb      	ldr	r3, [r7, #28]
 8005c54:	f003 0302 	and.w	r3, r3, #2
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d104      	bne.n	8005c66 <HAL_SPI_IRQHandler+0x17e>
 8005c5c:	69fb      	ldr	r3, [r7, #28]
 8005c5e:	f003 0301 	and.w	r3, r3, #1
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d034      	beq.n	8005cd0 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	685a      	ldr	r2, [r3, #4]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f022 0203 	bic.w	r2, r2, #3
 8005c74:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d011      	beq.n	8005ca2 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c82:	4a18      	ldr	r2, [pc, #96]	; (8005ce4 <HAL_SPI_IRQHandler+0x1fc>)
 8005c84:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	f7fd ffbc 	bl	8003c08 <HAL_DMA_Abort_IT>
 8005c90:	4603      	mov	r3, r0
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d005      	beq.n	8005ca2 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c9a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d016      	beq.n	8005cd8 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005cae:	4a0d      	ldr	r2, [pc, #52]	; (8005ce4 <HAL_SPI_IRQHandler+0x1fc>)
 8005cb0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	f7fd ffa6 	bl	8003c08 <HAL_DMA_Abort_IT>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d00a      	beq.n	8005cd8 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cc6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8005cce:	e003      	b.n	8005cd8 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005cd0:	6878      	ldr	r0, [r7, #4]
 8005cd2:	f000 f831 	bl	8005d38 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005cd6:	e000      	b.n	8005cda <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8005cd8:	bf00      	nop
    return;
 8005cda:	bf00      	nop
  }
}
 8005cdc:	3720      	adds	r7, #32
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bd80      	pop	{r7, pc}
 8005ce2:	bf00      	nop
 8005ce4:	08005fc1 	.word	0x08005fc1

08005ce8 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b083      	sub	sp, #12
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8005cf0:	bf00      	nop
 8005cf2:	370c      	adds	r7, #12
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfa:	4770      	bx	lr

08005cfc <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	b083      	sub	sp, #12
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8005d04:	bf00      	nop
 8005d06:	370c      	adds	r7, #12
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0e:	4770      	bx	lr

08005d10 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005d10:	b480      	push	{r7}
 8005d12:	b083      	sub	sp, #12
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8005d18:	bf00      	nop
 8005d1a:	370c      	adds	r7, #12
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d22:	4770      	bx	lr

08005d24 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005d24:	b480      	push	{r7}
 8005d26:	b083      	sub	sp, #12
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8005d2c:	bf00      	nop
 8005d2e:	370c      	adds	r7, #12
 8005d30:	46bd      	mov	sp, r7
 8005d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d36:	4770      	bx	lr

08005d38 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b083      	sub	sp, #12
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005d40:	bf00      	nop
 8005d42:	370c      	adds	r7, #12
 8005d44:	46bd      	mov	sp, r7
 8005d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4a:	4770      	bx	lr

08005d4c <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b086      	sub	sp, #24
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d58:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005d5a:	f7fd fc61 	bl	8003620 <HAL_GetTick>
 8005d5e:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d6e:	d03b      	beq.n	8005de8 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005d70:	697b      	ldr	r3, [r7, #20]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	685a      	ldr	r2, [r3, #4]
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f022 0220 	bic.w	r2, r2, #32
 8005d7e:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005d80:	697b      	ldr	r3, [r7, #20]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	685a      	ldr	r2, [r3, #4]
 8005d86:	697b      	ldr	r3, [r7, #20]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f022 0202 	bic.w	r2, r2, #2
 8005d8e:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005d90:	693a      	ldr	r2, [r7, #16]
 8005d92:	2164      	movs	r1, #100	; 0x64
 8005d94:	6978      	ldr	r0, [r7, #20]
 8005d96:	f000 fa15 	bl	80061c4 <SPI_EndRxTxTransaction>
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d005      	beq.n	8005dac <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005da4:	f043 0220 	orr.w	r2, r3, #32
 8005da8:	697b      	ldr	r3, [r7, #20]
 8005daa:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005dac:	697b      	ldr	r3, [r7, #20]
 8005dae:	689b      	ldr	r3, [r3, #8]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d10a      	bne.n	8005dca <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005db4:	2300      	movs	r3, #0
 8005db6:	60fb      	str	r3, [r7, #12]
 8005db8:	697b      	ldr	r3, [r7, #20]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	68db      	ldr	r3, [r3, #12]
 8005dbe:	60fb      	str	r3, [r7, #12]
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	689b      	ldr	r3, [r3, #8]
 8005dc6:	60fb      	str	r3, [r7, #12]
 8005dc8:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	2201      	movs	r2, #1
 8005dd4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005dd8:	697b      	ldr	r3, [r7, #20]
 8005dda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d003      	beq.n	8005de8 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005de0:	6978      	ldr	r0, [r7, #20]
 8005de2:	f7ff ffa9 	bl	8005d38 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8005de6:	e002      	b.n	8005dee <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8005de8:	6978      	ldr	r0, [r7, #20]
 8005dea:	f7fd f9b5 	bl	8003158 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005dee:	3718      	adds	r7, #24
 8005df0:	46bd      	mov	sp, r7
 8005df2:	bd80      	pop	{r7, pc}

08005df4 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b084      	sub	sp, #16
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e00:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005e02:	f7fd fc0d 	bl	8003620 <HAL_GetTick>
 8005e06:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e16:	d03b      	beq.n	8005e90 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	685a      	ldr	r2, [r3, #4]
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f022 0220 	bic.w	r2, r2, #32
 8005e26:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	689b      	ldr	r3, [r3, #8]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d10d      	bne.n	8005e4c <SPI_DMAReceiveCplt+0x58>
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	685b      	ldr	r3, [r3, #4]
 8005e34:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e38:	d108      	bne.n	8005e4c <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	685a      	ldr	r2, [r3, #4]
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f022 0203 	bic.w	r2, r2, #3
 8005e48:	605a      	str	r2, [r3, #4]
 8005e4a:	e007      	b.n	8005e5c <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	685a      	ldr	r2, [r3, #4]
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f022 0201 	bic.w	r2, r2, #1
 8005e5a:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005e5c:	68ba      	ldr	r2, [r7, #8]
 8005e5e:	2164      	movs	r1, #100	; 0x64
 8005e60:	68f8      	ldr	r0, [r7, #12]
 8005e62:	f000 f949 	bl	80060f8 <SPI_EndRxTransaction>
 8005e66:	4603      	mov	r3, r0
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d002      	beq.n	8005e72 <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	2220      	movs	r2, #32
 8005e70:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	2200      	movs	r2, #0
 8005e76:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d003      	beq.n	8005e90 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005e88:	68f8      	ldr	r0, [r7, #12]
 8005e8a:	f7ff ff55 	bl	8005d38 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8005e8e:	e002      	b.n	8005e96 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8005e90:	68f8      	ldr	r0, [r7, #12]
 8005e92:	f7fd f983 	bl	800319c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005e96:	3710      	adds	r7, #16
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	bd80      	pop	{r7, pc}

08005e9c <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b084      	sub	sp, #16
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ea8:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005eaa:	f7fd fbb9 	bl	8003620 <HAL_GetTick>
 8005eae:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005eba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ebe:	d02f      	beq.n	8005f20 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	685a      	ldr	r2, [r3, #4]
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f022 0220 	bic.w	r2, r2, #32
 8005ece:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005ed0:	68ba      	ldr	r2, [r7, #8]
 8005ed2:	2164      	movs	r1, #100	; 0x64
 8005ed4:	68f8      	ldr	r0, [r7, #12]
 8005ed6:	f000 f975 	bl	80061c4 <SPI_EndRxTxTransaction>
 8005eda:	4603      	mov	r3, r0
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d005      	beq.n	8005eec <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ee4:	f043 0220 	orr.w	r2, r3, #32
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	685a      	ldr	r2, [r3, #4]
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f022 0203 	bic.w	r2, r2, #3
 8005efa:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	2200      	movs	r2, #0
 8005f00:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	2200      	movs	r2, #0
 8005f06:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	2201      	movs	r2, #1
 8005f0c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d003      	beq.n	8005f20 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005f18:	68f8      	ldr	r0, [r7, #12]
 8005f1a:	f7ff ff0d 	bl	8005d38 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8005f1e:	e002      	b.n	8005f26 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8005f20:	68f8      	ldr	r0, [r7, #12]
 8005f22:	f7ff fee1 	bl	8005ce8 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005f26:	3710      	adds	r7, #16
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	bd80      	pop	{r7, pc}

08005f2c <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b084      	sub	sp, #16
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f38:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8005f3a:	68f8      	ldr	r0, [r7, #12]
 8005f3c:	f7ff fede 	bl	8005cfc <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005f40:	bf00      	nop
 8005f42:	3710      	adds	r7, #16
 8005f44:	46bd      	mov	sp, r7
 8005f46:	bd80      	pop	{r7, pc}

08005f48 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b084      	sub	sp, #16
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f54:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8005f56:	68f8      	ldr	r0, [r7, #12]
 8005f58:	f7ff feda 	bl	8005d10 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005f5c:	bf00      	nop
 8005f5e:	3710      	adds	r7, #16
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bd80      	pop	{r7, pc}

08005f64 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b084      	sub	sp, #16
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f70:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8005f72:	68f8      	ldr	r0, [r7, #12]
 8005f74:	f7ff fed6 	bl	8005d24 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005f78:	bf00      	nop
 8005f7a:	3710      	adds	r7, #16
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bd80      	pop	{r7, pc}

08005f80 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b084      	sub	sp, #16
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f8c:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	685a      	ldr	r2, [r3, #4]
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f022 0203 	bic.w	r2, r2, #3
 8005f9c:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fa2:	f043 0210 	orr.w	r2, r3, #16
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	2201      	movs	r2, #1
 8005fae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005fb2:	68f8      	ldr	r0, [r7, #12]
 8005fb4:	f7ff fec0 	bl	8005d38 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005fb8:	bf00      	nop
 8005fba:	3710      	adds	r7, #16
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bd80      	pop	{r7, pc}

08005fc0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b084      	sub	sp, #16
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fcc:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005fda:	68f8      	ldr	r0, [r7, #12]
 8005fdc:	f7ff feac 	bl	8005d38 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005fe0:	bf00      	nop
 8005fe2:	3710      	adds	r7, #16
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bd80      	pop	{r7, pc}

08005fe8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b088      	sub	sp, #32
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	60f8      	str	r0, [r7, #12]
 8005ff0:	60b9      	str	r1, [r7, #8]
 8005ff2:	603b      	str	r3, [r7, #0]
 8005ff4:	4613      	mov	r3, r2
 8005ff6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005ff8:	f7fd fb12 	bl	8003620 <HAL_GetTick>
 8005ffc:	4602      	mov	r2, r0
 8005ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006000:	1a9b      	subs	r3, r3, r2
 8006002:	683a      	ldr	r2, [r7, #0]
 8006004:	4413      	add	r3, r2
 8006006:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006008:	f7fd fb0a 	bl	8003620 <HAL_GetTick>
 800600c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800600e:	4b39      	ldr	r3, [pc, #228]	; (80060f4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	015b      	lsls	r3, r3, #5
 8006014:	0d1b      	lsrs	r3, r3, #20
 8006016:	69fa      	ldr	r2, [r7, #28]
 8006018:	fb02 f303 	mul.w	r3, r2, r3
 800601c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800601e:	e054      	b.n	80060ca <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006026:	d050      	beq.n	80060ca <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006028:	f7fd fafa 	bl	8003620 <HAL_GetTick>
 800602c:	4602      	mov	r2, r0
 800602e:	69bb      	ldr	r3, [r7, #24]
 8006030:	1ad3      	subs	r3, r2, r3
 8006032:	69fa      	ldr	r2, [r7, #28]
 8006034:	429a      	cmp	r2, r3
 8006036:	d902      	bls.n	800603e <SPI_WaitFlagStateUntilTimeout+0x56>
 8006038:	69fb      	ldr	r3, [r7, #28]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d13d      	bne.n	80060ba <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	685a      	ldr	r2, [r3, #4]
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800604c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	685b      	ldr	r3, [r3, #4]
 8006052:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006056:	d111      	bne.n	800607c <SPI_WaitFlagStateUntilTimeout+0x94>
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	689b      	ldr	r3, [r3, #8]
 800605c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006060:	d004      	beq.n	800606c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	689b      	ldr	r3, [r3, #8]
 8006066:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800606a:	d107      	bne.n	800607c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	681a      	ldr	r2, [r3, #0]
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800607a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006080:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006084:	d10f      	bne.n	80060a6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	681a      	ldr	r2, [r3, #0]
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006094:	601a      	str	r2, [r3, #0]
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	681a      	ldr	r2, [r3, #0]
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80060a4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	2201      	movs	r2, #1
 80060aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	2200      	movs	r2, #0
 80060b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80060b6:	2303      	movs	r3, #3
 80060b8:	e017      	b.n	80060ea <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80060ba:	697b      	ldr	r3, [r7, #20]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d101      	bne.n	80060c4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80060c0:	2300      	movs	r3, #0
 80060c2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	3b01      	subs	r3, #1
 80060c8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	689a      	ldr	r2, [r3, #8]
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	4013      	ands	r3, r2
 80060d4:	68ba      	ldr	r2, [r7, #8]
 80060d6:	429a      	cmp	r2, r3
 80060d8:	bf0c      	ite	eq
 80060da:	2301      	moveq	r3, #1
 80060dc:	2300      	movne	r3, #0
 80060de:	b2db      	uxtb	r3, r3
 80060e0:	461a      	mov	r2, r3
 80060e2:	79fb      	ldrb	r3, [r7, #7]
 80060e4:	429a      	cmp	r2, r3
 80060e6:	d19b      	bne.n	8006020 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80060e8:	2300      	movs	r3, #0
}
 80060ea:	4618      	mov	r0, r3
 80060ec:	3720      	adds	r7, #32
 80060ee:	46bd      	mov	sp, r7
 80060f0:	bd80      	pop	{r7, pc}
 80060f2:	bf00      	nop
 80060f4:	200000a8 	.word	0x200000a8

080060f8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b086      	sub	sp, #24
 80060fc:	af02      	add	r7, sp, #8
 80060fe:	60f8      	str	r0, [r7, #12]
 8006100:	60b9      	str	r1, [r7, #8]
 8006102:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	685b      	ldr	r3, [r3, #4]
 8006108:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800610c:	d111      	bne.n	8006132 <SPI_EndRxTransaction+0x3a>
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	689b      	ldr	r3, [r3, #8]
 8006112:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006116:	d004      	beq.n	8006122 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	689b      	ldr	r3, [r3, #8]
 800611c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006120:	d107      	bne.n	8006132 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	681a      	ldr	r2, [r3, #0]
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006130:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	685b      	ldr	r3, [r3, #4]
 8006136:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800613a:	d12a      	bne.n	8006192 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	689b      	ldr	r3, [r3, #8]
 8006140:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006144:	d012      	beq.n	800616c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	9300      	str	r3, [sp, #0]
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	2200      	movs	r2, #0
 800614e:	2180      	movs	r1, #128	; 0x80
 8006150:	68f8      	ldr	r0, [r7, #12]
 8006152:	f7ff ff49 	bl	8005fe8 <SPI_WaitFlagStateUntilTimeout>
 8006156:	4603      	mov	r3, r0
 8006158:	2b00      	cmp	r3, #0
 800615a:	d02d      	beq.n	80061b8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006160:	f043 0220 	orr.w	r2, r3, #32
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006168:	2303      	movs	r3, #3
 800616a:	e026      	b.n	80061ba <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	9300      	str	r3, [sp, #0]
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	2200      	movs	r2, #0
 8006174:	2101      	movs	r1, #1
 8006176:	68f8      	ldr	r0, [r7, #12]
 8006178:	f7ff ff36 	bl	8005fe8 <SPI_WaitFlagStateUntilTimeout>
 800617c:	4603      	mov	r3, r0
 800617e:	2b00      	cmp	r3, #0
 8006180:	d01a      	beq.n	80061b8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006186:	f043 0220 	orr.w	r2, r3, #32
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800618e:	2303      	movs	r3, #3
 8006190:	e013      	b.n	80061ba <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	9300      	str	r3, [sp, #0]
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	2200      	movs	r2, #0
 800619a:	2101      	movs	r1, #1
 800619c:	68f8      	ldr	r0, [r7, #12]
 800619e:	f7ff ff23 	bl	8005fe8 <SPI_WaitFlagStateUntilTimeout>
 80061a2:	4603      	mov	r3, r0
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d007      	beq.n	80061b8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061ac:	f043 0220 	orr.w	r2, r3, #32
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80061b4:	2303      	movs	r3, #3
 80061b6:	e000      	b.n	80061ba <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80061b8:	2300      	movs	r3, #0
}
 80061ba:	4618      	mov	r0, r3
 80061bc:	3710      	adds	r7, #16
 80061be:	46bd      	mov	sp, r7
 80061c0:	bd80      	pop	{r7, pc}
	...

080061c4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b088      	sub	sp, #32
 80061c8:	af02      	add	r7, sp, #8
 80061ca:	60f8      	str	r0, [r7, #12]
 80061cc:	60b9      	str	r1, [r7, #8]
 80061ce:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80061d0:	4b1b      	ldr	r3, [pc, #108]	; (8006240 <SPI_EndRxTxTransaction+0x7c>)
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4a1b      	ldr	r2, [pc, #108]	; (8006244 <SPI_EndRxTxTransaction+0x80>)
 80061d6:	fba2 2303 	umull	r2, r3, r2, r3
 80061da:	0d5b      	lsrs	r3, r3, #21
 80061dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80061e0:	fb02 f303 	mul.w	r3, r2, r3
 80061e4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	685b      	ldr	r3, [r3, #4]
 80061ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80061ee:	d112      	bne.n	8006216 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	9300      	str	r3, [sp, #0]
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	2200      	movs	r2, #0
 80061f8:	2180      	movs	r1, #128	; 0x80
 80061fa:	68f8      	ldr	r0, [r7, #12]
 80061fc:	f7ff fef4 	bl	8005fe8 <SPI_WaitFlagStateUntilTimeout>
 8006200:	4603      	mov	r3, r0
 8006202:	2b00      	cmp	r3, #0
 8006204:	d016      	beq.n	8006234 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800620a:	f043 0220 	orr.w	r2, r3, #32
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006212:	2303      	movs	r3, #3
 8006214:	e00f      	b.n	8006236 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006216:	697b      	ldr	r3, [r7, #20]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d00a      	beq.n	8006232 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	3b01      	subs	r3, #1
 8006220:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	689b      	ldr	r3, [r3, #8]
 8006228:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800622c:	2b80      	cmp	r3, #128	; 0x80
 800622e:	d0f2      	beq.n	8006216 <SPI_EndRxTxTransaction+0x52>
 8006230:	e000      	b.n	8006234 <SPI_EndRxTxTransaction+0x70>
        break;
 8006232:	bf00      	nop
  }

  return HAL_OK;
 8006234:	2300      	movs	r3, #0
}
 8006236:	4618      	mov	r0, r3
 8006238:	3718      	adds	r7, #24
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}
 800623e:	bf00      	nop
 8006240:	200000a8 	.word	0x200000a8
 8006244:	165e9f81 	.word	0x165e9f81

08006248 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b082      	sub	sp, #8
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d101      	bne.n	800625a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006256:	2301      	movs	r3, #1
 8006258:	e03f      	b.n	80062da <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006260:	b2db      	uxtb	r3, r3
 8006262:	2b00      	cmp	r3, #0
 8006264:	d106      	bne.n	8006274 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2200      	movs	r2, #0
 800626a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f7fc ff20 	bl	80030b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2224      	movs	r2, #36	; 0x24
 8006278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	68da      	ldr	r2, [r3, #12]
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800628a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800628c:	6878      	ldr	r0, [r7, #4]
 800628e:	f000 f929 	bl	80064e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	691a      	ldr	r2, [r3, #16]
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80062a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	695a      	ldr	r2, [r3, #20]
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80062b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	68da      	ldr	r2, [r3, #12]
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80062c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2200      	movs	r2, #0
 80062c6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2220      	movs	r2, #32
 80062cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2220      	movs	r2, #32
 80062d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80062d8:	2300      	movs	r3, #0
}
 80062da:	4618      	mov	r0, r3
 80062dc:	3708      	adds	r7, #8
 80062de:	46bd      	mov	sp, r7
 80062e0:	bd80      	pop	{r7, pc}

080062e2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80062e2:	b580      	push	{r7, lr}
 80062e4:	b08a      	sub	sp, #40	; 0x28
 80062e6:	af02      	add	r7, sp, #8
 80062e8:	60f8      	str	r0, [r7, #12]
 80062ea:	60b9      	str	r1, [r7, #8]
 80062ec:	603b      	str	r3, [r7, #0]
 80062ee:	4613      	mov	r3, r2
 80062f0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80062f2:	2300      	movs	r3, #0
 80062f4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062fc:	b2db      	uxtb	r3, r3
 80062fe:	2b20      	cmp	r3, #32
 8006300:	d17c      	bne.n	80063fc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d002      	beq.n	800630e <HAL_UART_Transmit+0x2c>
 8006308:	88fb      	ldrh	r3, [r7, #6]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d101      	bne.n	8006312 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800630e:	2301      	movs	r3, #1
 8006310:	e075      	b.n	80063fe <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006318:	2b01      	cmp	r3, #1
 800631a:	d101      	bne.n	8006320 <HAL_UART_Transmit+0x3e>
 800631c:	2302      	movs	r3, #2
 800631e:	e06e      	b.n	80063fe <HAL_UART_Transmit+0x11c>
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	2201      	movs	r2, #1
 8006324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	2200      	movs	r2, #0
 800632c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	2221      	movs	r2, #33	; 0x21
 8006332:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006336:	f7fd f973 	bl	8003620 <HAL_GetTick>
 800633a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	88fa      	ldrh	r2, [r7, #6]
 8006340:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	88fa      	ldrh	r2, [r7, #6]
 8006346:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	689b      	ldr	r3, [r3, #8]
 800634c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006350:	d108      	bne.n	8006364 <HAL_UART_Transmit+0x82>
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	691b      	ldr	r3, [r3, #16]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d104      	bne.n	8006364 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800635a:	2300      	movs	r3, #0
 800635c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	61bb      	str	r3, [r7, #24]
 8006362:	e003      	b.n	800636c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006368:	2300      	movs	r3, #0
 800636a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	2200      	movs	r2, #0
 8006370:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006374:	e02a      	b.n	80063cc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	9300      	str	r3, [sp, #0]
 800637a:	697b      	ldr	r3, [r7, #20]
 800637c:	2200      	movs	r2, #0
 800637e:	2180      	movs	r1, #128	; 0x80
 8006380:	68f8      	ldr	r0, [r7, #12]
 8006382:	f000 f840 	bl	8006406 <UART_WaitOnFlagUntilTimeout>
 8006386:	4603      	mov	r3, r0
 8006388:	2b00      	cmp	r3, #0
 800638a:	d001      	beq.n	8006390 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800638c:	2303      	movs	r3, #3
 800638e:	e036      	b.n	80063fe <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006390:	69fb      	ldr	r3, [r7, #28]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d10b      	bne.n	80063ae <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006396:	69bb      	ldr	r3, [r7, #24]
 8006398:	881b      	ldrh	r3, [r3, #0]
 800639a:	461a      	mov	r2, r3
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80063a4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80063a6:	69bb      	ldr	r3, [r7, #24]
 80063a8:	3302      	adds	r3, #2
 80063aa:	61bb      	str	r3, [r7, #24]
 80063ac:	e007      	b.n	80063be <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80063ae:	69fb      	ldr	r3, [r7, #28]
 80063b0:	781a      	ldrb	r2, [r3, #0]
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80063b8:	69fb      	ldr	r3, [r7, #28]
 80063ba:	3301      	adds	r3, #1
 80063bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80063c2:	b29b      	uxth	r3, r3
 80063c4:	3b01      	subs	r3, #1
 80063c6:	b29a      	uxth	r2, r3
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80063d0:	b29b      	uxth	r3, r3
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d1cf      	bne.n	8006376 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	9300      	str	r3, [sp, #0]
 80063da:	697b      	ldr	r3, [r7, #20]
 80063dc:	2200      	movs	r2, #0
 80063de:	2140      	movs	r1, #64	; 0x40
 80063e0:	68f8      	ldr	r0, [r7, #12]
 80063e2:	f000 f810 	bl	8006406 <UART_WaitOnFlagUntilTimeout>
 80063e6:	4603      	mov	r3, r0
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d001      	beq.n	80063f0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80063ec:	2303      	movs	r3, #3
 80063ee:	e006      	b.n	80063fe <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	2220      	movs	r2, #32
 80063f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80063f8:	2300      	movs	r3, #0
 80063fa:	e000      	b.n	80063fe <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80063fc:	2302      	movs	r3, #2
  }
}
 80063fe:	4618      	mov	r0, r3
 8006400:	3720      	adds	r7, #32
 8006402:	46bd      	mov	sp, r7
 8006404:	bd80      	pop	{r7, pc}

08006406 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006406:	b580      	push	{r7, lr}
 8006408:	b090      	sub	sp, #64	; 0x40
 800640a:	af00      	add	r7, sp, #0
 800640c:	60f8      	str	r0, [r7, #12]
 800640e:	60b9      	str	r1, [r7, #8]
 8006410:	603b      	str	r3, [r7, #0]
 8006412:	4613      	mov	r3, r2
 8006414:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006416:	e050      	b.n	80064ba <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006418:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800641a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800641e:	d04c      	beq.n	80064ba <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006420:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006422:	2b00      	cmp	r3, #0
 8006424:	d007      	beq.n	8006436 <UART_WaitOnFlagUntilTimeout+0x30>
 8006426:	f7fd f8fb 	bl	8003620 <HAL_GetTick>
 800642a:	4602      	mov	r2, r0
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	1ad3      	subs	r3, r2, r3
 8006430:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006432:	429a      	cmp	r2, r3
 8006434:	d241      	bcs.n	80064ba <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	330c      	adds	r3, #12
 800643c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800643e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006440:	e853 3f00 	ldrex	r3, [r3]
 8006444:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006448:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800644c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	330c      	adds	r3, #12
 8006454:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006456:	637a      	str	r2, [r7, #52]	; 0x34
 8006458:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800645a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800645c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800645e:	e841 2300 	strex	r3, r2, [r1]
 8006462:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006466:	2b00      	cmp	r3, #0
 8006468:	d1e5      	bne.n	8006436 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	3314      	adds	r3, #20
 8006470:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	e853 3f00 	ldrex	r3, [r3]
 8006478:	613b      	str	r3, [r7, #16]
   return(result);
 800647a:	693b      	ldr	r3, [r7, #16]
 800647c:	f023 0301 	bic.w	r3, r3, #1
 8006480:	63bb      	str	r3, [r7, #56]	; 0x38
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	3314      	adds	r3, #20
 8006488:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800648a:	623a      	str	r2, [r7, #32]
 800648c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800648e:	69f9      	ldr	r1, [r7, #28]
 8006490:	6a3a      	ldr	r2, [r7, #32]
 8006492:	e841 2300 	strex	r3, r2, [r1]
 8006496:	61bb      	str	r3, [r7, #24]
   return(result);
 8006498:	69bb      	ldr	r3, [r7, #24]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d1e5      	bne.n	800646a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	2220      	movs	r2, #32
 80064a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	2220      	movs	r2, #32
 80064aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	2200      	movs	r2, #0
 80064b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80064b6:	2303      	movs	r3, #3
 80064b8:	e00f      	b.n	80064da <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	681a      	ldr	r2, [r3, #0]
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	4013      	ands	r3, r2
 80064c4:	68ba      	ldr	r2, [r7, #8]
 80064c6:	429a      	cmp	r2, r3
 80064c8:	bf0c      	ite	eq
 80064ca:	2301      	moveq	r3, #1
 80064cc:	2300      	movne	r3, #0
 80064ce:	b2db      	uxtb	r3, r3
 80064d0:	461a      	mov	r2, r3
 80064d2:	79fb      	ldrb	r3, [r7, #7]
 80064d4:	429a      	cmp	r2, r3
 80064d6:	d09f      	beq.n	8006418 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80064d8:	2300      	movs	r3, #0
}
 80064da:	4618      	mov	r0, r3
 80064dc:	3740      	adds	r7, #64	; 0x40
 80064de:	46bd      	mov	sp, r7
 80064e0:	bd80      	pop	{r7, pc}
	...

080064e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80064e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80064e8:	b0c0      	sub	sp, #256	; 0x100
 80064ea:	af00      	add	r7, sp, #0
 80064ec:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80064f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	691b      	ldr	r3, [r3, #16]
 80064f8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80064fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006500:	68d9      	ldr	r1, [r3, #12]
 8006502:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006506:	681a      	ldr	r2, [r3, #0]
 8006508:	ea40 0301 	orr.w	r3, r0, r1
 800650c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800650e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006512:	689a      	ldr	r2, [r3, #8]
 8006514:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006518:	691b      	ldr	r3, [r3, #16]
 800651a:	431a      	orrs	r2, r3
 800651c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006520:	695b      	ldr	r3, [r3, #20]
 8006522:	431a      	orrs	r2, r3
 8006524:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006528:	69db      	ldr	r3, [r3, #28]
 800652a:	4313      	orrs	r3, r2
 800652c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006530:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	68db      	ldr	r3, [r3, #12]
 8006538:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800653c:	f021 010c 	bic.w	r1, r1, #12
 8006540:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006544:	681a      	ldr	r2, [r3, #0]
 8006546:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800654a:	430b      	orrs	r3, r1
 800654c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800654e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	695b      	ldr	r3, [r3, #20]
 8006556:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800655a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800655e:	6999      	ldr	r1, [r3, #24]
 8006560:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006564:	681a      	ldr	r2, [r3, #0]
 8006566:	ea40 0301 	orr.w	r3, r0, r1
 800656a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800656c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006570:	681a      	ldr	r2, [r3, #0]
 8006572:	4b8f      	ldr	r3, [pc, #572]	; (80067b0 <UART_SetConfig+0x2cc>)
 8006574:	429a      	cmp	r2, r3
 8006576:	d005      	beq.n	8006584 <UART_SetConfig+0xa0>
 8006578:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800657c:	681a      	ldr	r2, [r3, #0]
 800657e:	4b8d      	ldr	r3, [pc, #564]	; (80067b4 <UART_SetConfig+0x2d0>)
 8006580:	429a      	cmp	r2, r3
 8006582:	d104      	bne.n	800658e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006584:	f7fe fe34 	bl	80051f0 <HAL_RCC_GetPCLK2Freq>
 8006588:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800658c:	e003      	b.n	8006596 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800658e:	f7fe fe1b 	bl	80051c8 <HAL_RCC_GetPCLK1Freq>
 8006592:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006596:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800659a:	69db      	ldr	r3, [r3, #28]
 800659c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065a0:	f040 810c 	bne.w	80067bc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80065a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80065a8:	2200      	movs	r2, #0
 80065aa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80065ae:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80065b2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80065b6:	4622      	mov	r2, r4
 80065b8:	462b      	mov	r3, r5
 80065ba:	1891      	adds	r1, r2, r2
 80065bc:	65b9      	str	r1, [r7, #88]	; 0x58
 80065be:	415b      	adcs	r3, r3
 80065c0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80065c2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80065c6:	4621      	mov	r1, r4
 80065c8:	eb12 0801 	adds.w	r8, r2, r1
 80065cc:	4629      	mov	r1, r5
 80065ce:	eb43 0901 	adc.w	r9, r3, r1
 80065d2:	f04f 0200 	mov.w	r2, #0
 80065d6:	f04f 0300 	mov.w	r3, #0
 80065da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80065de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80065e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80065e6:	4690      	mov	r8, r2
 80065e8:	4699      	mov	r9, r3
 80065ea:	4623      	mov	r3, r4
 80065ec:	eb18 0303 	adds.w	r3, r8, r3
 80065f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80065f4:	462b      	mov	r3, r5
 80065f6:	eb49 0303 	adc.w	r3, r9, r3
 80065fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80065fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006602:	685b      	ldr	r3, [r3, #4]
 8006604:	2200      	movs	r2, #0
 8006606:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800660a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800660e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006612:	460b      	mov	r3, r1
 8006614:	18db      	adds	r3, r3, r3
 8006616:	653b      	str	r3, [r7, #80]	; 0x50
 8006618:	4613      	mov	r3, r2
 800661a:	eb42 0303 	adc.w	r3, r2, r3
 800661e:	657b      	str	r3, [r7, #84]	; 0x54
 8006620:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006624:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006628:	f7f9 fe42 	bl	80002b0 <__aeabi_uldivmod>
 800662c:	4602      	mov	r2, r0
 800662e:	460b      	mov	r3, r1
 8006630:	4b61      	ldr	r3, [pc, #388]	; (80067b8 <UART_SetConfig+0x2d4>)
 8006632:	fba3 2302 	umull	r2, r3, r3, r2
 8006636:	095b      	lsrs	r3, r3, #5
 8006638:	011c      	lsls	r4, r3, #4
 800663a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800663e:	2200      	movs	r2, #0
 8006640:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006644:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006648:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800664c:	4642      	mov	r2, r8
 800664e:	464b      	mov	r3, r9
 8006650:	1891      	adds	r1, r2, r2
 8006652:	64b9      	str	r1, [r7, #72]	; 0x48
 8006654:	415b      	adcs	r3, r3
 8006656:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006658:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800665c:	4641      	mov	r1, r8
 800665e:	eb12 0a01 	adds.w	sl, r2, r1
 8006662:	4649      	mov	r1, r9
 8006664:	eb43 0b01 	adc.w	fp, r3, r1
 8006668:	f04f 0200 	mov.w	r2, #0
 800666c:	f04f 0300 	mov.w	r3, #0
 8006670:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006674:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006678:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800667c:	4692      	mov	sl, r2
 800667e:	469b      	mov	fp, r3
 8006680:	4643      	mov	r3, r8
 8006682:	eb1a 0303 	adds.w	r3, sl, r3
 8006686:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800668a:	464b      	mov	r3, r9
 800668c:	eb4b 0303 	adc.w	r3, fp, r3
 8006690:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006694:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006698:	685b      	ldr	r3, [r3, #4]
 800669a:	2200      	movs	r2, #0
 800669c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80066a0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80066a4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80066a8:	460b      	mov	r3, r1
 80066aa:	18db      	adds	r3, r3, r3
 80066ac:	643b      	str	r3, [r7, #64]	; 0x40
 80066ae:	4613      	mov	r3, r2
 80066b0:	eb42 0303 	adc.w	r3, r2, r3
 80066b4:	647b      	str	r3, [r7, #68]	; 0x44
 80066b6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80066ba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80066be:	f7f9 fdf7 	bl	80002b0 <__aeabi_uldivmod>
 80066c2:	4602      	mov	r2, r0
 80066c4:	460b      	mov	r3, r1
 80066c6:	4611      	mov	r1, r2
 80066c8:	4b3b      	ldr	r3, [pc, #236]	; (80067b8 <UART_SetConfig+0x2d4>)
 80066ca:	fba3 2301 	umull	r2, r3, r3, r1
 80066ce:	095b      	lsrs	r3, r3, #5
 80066d0:	2264      	movs	r2, #100	; 0x64
 80066d2:	fb02 f303 	mul.w	r3, r2, r3
 80066d6:	1acb      	subs	r3, r1, r3
 80066d8:	00db      	lsls	r3, r3, #3
 80066da:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80066de:	4b36      	ldr	r3, [pc, #216]	; (80067b8 <UART_SetConfig+0x2d4>)
 80066e0:	fba3 2302 	umull	r2, r3, r3, r2
 80066e4:	095b      	lsrs	r3, r3, #5
 80066e6:	005b      	lsls	r3, r3, #1
 80066e8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80066ec:	441c      	add	r4, r3
 80066ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80066f2:	2200      	movs	r2, #0
 80066f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80066f8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80066fc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006700:	4642      	mov	r2, r8
 8006702:	464b      	mov	r3, r9
 8006704:	1891      	adds	r1, r2, r2
 8006706:	63b9      	str	r1, [r7, #56]	; 0x38
 8006708:	415b      	adcs	r3, r3
 800670a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800670c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006710:	4641      	mov	r1, r8
 8006712:	1851      	adds	r1, r2, r1
 8006714:	6339      	str	r1, [r7, #48]	; 0x30
 8006716:	4649      	mov	r1, r9
 8006718:	414b      	adcs	r3, r1
 800671a:	637b      	str	r3, [r7, #52]	; 0x34
 800671c:	f04f 0200 	mov.w	r2, #0
 8006720:	f04f 0300 	mov.w	r3, #0
 8006724:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006728:	4659      	mov	r1, fp
 800672a:	00cb      	lsls	r3, r1, #3
 800672c:	4651      	mov	r1, sl
 800672e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006732:	4651      	mov	r1, sl
 8006734:	00ca      	lsls	r2, r1, #3
 8006736:	4610      	mov	r0, r2
 8006738:	4619      	mov	r1, r3
 800673a:	4603      	mov	r3, r0
 800673c:	4642      	mov	r2, r8
 800673e:	189b      	adds	r3, r3, r2
 8006740:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006744:	464b      	mov	r3, r9
 8006746:	460a      	mov	r2, r1
 8006748:	eb42 0303 	adc.w	r3, r2, r3
 800674c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006750:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006754:	685b      	ldr	r3, [r3, #4]
 8006756:	2200      	movs	r2, #0
 8006758:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800675c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006760:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006764:	460b      	mov	r3, r1
 8006766:	18db      	adds	r3, r3, r3
 8006768:	62bb      	str	r3, [r7, #40]	; 0x28
 800676a:	4613      	mov	r3, r2
 800676c:	eb42 0303 	adc.w	r3, r2, r3
 8006770:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006772:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006776:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800677a:	f7f9 fd99 	bl	80002b0 <__aeabi_uldivmod>
 800677e:	4602      	mov	r2, r0
 8006780:	460b      	mov	r3, r1
 8006782:	4b0d      	ldr	r3, [pc, #52]	; (80067b8 <UART_SetConfig+0x2d4>)
 8006784:	fba3 1302 	umull	r1, r3, r3, r2
 8006788:	095b      	lsrs	r3, r3, #5
 800678a:	2164      	movs	r1, #100	; 0x64
 800678c:	fb01 f303 	mul.w	r3, r1, r3
 8006790:	1ad3      	subs	r3, r2, r3
 8006792:	00db      	lsls	r3, r3, #3
 8006794:	3332      	adds	r3, #50	; 0x32
 8006796:	4a08      	ldr	r2, [pc, #32]	; (80067b8 <UART_SetConfig+0x2d4>)
 8006798:	fba2 2303 	umull	r2, r3, r2, r3
 800679c:	095b      	lsrs	r3, r3, #5
 800679e:	f003 0207 	and.w	r2, r3, #7
 80067a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	4422      	add	r2, r4
 80067aa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80067ac:	e105      	b.n	80069ba <UART_SetConfig+0x4d6>
 80067ae:	bf00      	nop
 80067b0:	40011000 	.word	0x40011000
 80067b4:	40011400 	.word	0x40011400
 80067b8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80067bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80067c0:	2200      	movs	r2, #0
 80067c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80067c6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80067ca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80067ce:	4642      	mov	r2, r8
 80067d0:	464b      	mov	r3, r9
 80067d2:	1891      	adds	r1, r2, r2
 80067d4:	6239      	str	r1, [r7, #32]
 80067d6:	415b      	adcs	r3, r3
 80067d8:	627b      	str	r3, [r7, #36]	; 0x24
 80067da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80067de:	4641      	mov	r1, r8
 80067e0:	1854      	adds	r4, r2, r1
 80067e2:	4649      	mov	r1, r9
 80067e4:	eb43 0501 	adc.w	r5, r3, r1
 80067e8:	f04f 0200 	mov.w	r2, #0
 80067ec:	f04f 0300 	mov.w	r3, #0
 80067f0:	00eb      	lsls	r3, r5, #3
 80067f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80067f6:	00e2      	lsls	r2, r4, #3
 80067f8:	4614      	mov	r4, r2
 80067fa:	461d      	mov	r5, r3
 80067fc:	4643      	mov	r3, r8
 80067fe:	18e3      	adds	r3, r4, r3
 8006800:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006804:	464b      	mov	r3, r9
 8006806:	eb45 0303 	adc.w	r3, r5, r3
 800680a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800680e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006812:	685b      	ldr	r3, [r3, #4]
 8006814:	2200      	movs	r2, #0
 8006816:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800681a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800681e:	f04f 0200 	mov.w	r2, #0
 8006822:	f04f 0300 	mov.w	r3, #0
 8006826:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800682a:	4629      	mov	r1, r5
 800682c:	008b      	lsls	r3, r1, #2
 800682e:	4621      	mov	r1, r4
 8006830:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006834:	4621      	mov	r1, r4
 8006836:	008a      	lsls	r2, r1, #2
 8006838:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800683c:	f7f9 fd38 	bl	80002b0 <__aeabi_uldivmod>
 8006840:	4602      	mov	r2, r0
 8006842:	460b      	mov	r3, r1
 8006844:	4b60      	ldr	r3, [pc, #384]	; (80069c8 <UART_SetConfig+0x4e4>)
 8006846:	fba3 2302 	umull	r2, r3, r3, r2
 800684a:	095b      	lsrs	r3, r3, #5
 800684c:	011c      	lsls	r4, r3, #4
 800684e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006852:	2200      	movs	r2, #0
 8006854:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006858:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800685c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006860:	4642      	mov	r2, r8
 8006862:	464b      	mov	r3, r9
 8006864:	1891      	adds	r1, r2, r2
 8006866:	61b9      	str	r1, [r7, #24]
 8006868:	415b      	adcs	r3, r3
 800686a:	61fb      	str	r3, [r7, #28]
 800686c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006870:	4641      	mov	r1, r8
 8006872:	1851      	adds	r1, r2, r1
 8006874:	6139      	str	r1, [r7, #16]
 8006876:	4649      	mov	r1, r9
 8006878:	414b      	adcs	r3, r1
 800687a:	617b      	str	r3, [r7, #20]
 800687c:	f04f 0200 	mov.w	r2, #0
 8006880:	f04f 0300 	mov.w	r3, #0
 8006884:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006888:	4659      	mov	r1, fp
 800688a:	00cb      	lsls	r3, r1, #3
 800688c:	4651      	mov	r1, sl
 800688e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006892:	4651      	mov	r1, sl
 8006894:	00ca      	lsls	r2, r1, #3
 8006896:	4610      	mov	r0, r2
 8006898:	4619      	mov	r1, r3
 800689a:	4603      	mov	r3, r0
 800689c:	4642      	mov	r2, r8
 800689e:	189b      	adds	r3, r3, r2
 80068a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80068a4:	464b      	mov	r3, r9
 80068a6:	460a      	mov	r2, r1
 80068a8:	eb42 0303 	adc.w	r3, r2, r3
 80068ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80068b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068b4:	685b      	ldr	r3, [r3, #4]
 80068b6:	2200      	movs	r2, #0
 80068b8:	67bb      	str	r3, [r7, #120]	; 0x78
 80068ba:	67fa      	str	r2, [r7, #124]	; 0x7c
 80068bc:	f04f 0200 	mov.w	r2, #0
 80068c0:	f04f 0300 	mov.w	r3, #0
 80068c4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80068c8:	4649      	mov	r1, r9
 80068ca:	008b      	lsls	r3, r1, #2
 80068cc:	4641      	mov	r1, r8
 80068ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80068d2:	4641      	mov	r1, r8
 80068d4:	008a      	lsls	r2, r1, #2
 80068d6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80068da:	f7f9 fce9 	bl	80002b0 <__aeabi_uldivmod>
 80068de:	4602      	mov	r2, r0
 80068e0:	460b      	mov	r3, r1
 80068e2:	4b39      	ldr	r3, [pc, #228]	; (80069c8 <UART_SetConfig+0x4e4>)
 80068e4:	fba3 1302 	umull	r1, r3, r3, r2
 80068e8:	095b      	lsrs	r3, r3, #5
 80068ea:	2164      	movs	r1, #100	; 0x64
 80068ec:	fb01 f303 	mul.w	r3, r1, r3
 80068f0:	1ad3      	subs	r3, r2, r3
 80068f2:	011b      	lsls	r3, r3, #4
 80068f4:	3332      	adds	r3, #50	; 0x32
 80068f6:	4a34      	ldr	r2, [pc, #208]	; (80069c8 <UART_SetConfig+0x4e4>)
 80068f8:	fba2 2303 	umull	r2, r3, r2, r3
 80068fc:	095b      	lsrs	r3, r3, #5
 80068fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006902:	441c      	add	r4, r3
 8006904:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006908:	2200      	movs	r2, #0
 800690a:	673b      	str	r3, [r7, #112]	; 0x70
 800690c:	677a      	str	r2, [r7, #116]	; 0x74
 800690e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006912:	4642      	mov	r2, r8
 8006914:	464b      	mov	r3, r9
 8006916:	1891      	adds	r1, r2, r2
 8006918:	60b9      	str	r1, [r7, #8]
 800691a:	415b      	adcs	r3, r3
 800691c:	60fb      	str	r3, [r7, #12]
 800691e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006922:	4641      	mov	r1, r8
 8006924:	1851      	adds	r1, r2, r1
 8006926:	6039      	str	r1, [r7, #0]
 8006928:	4649      	mov	r1, r9
 800692a:	414b      	adcs	r3, r1
 800692c:	607b      	str	r3, [r7, #4]
 800692e:	f04f 0200 	mov.w	r2, #0
 8006932:	f04f 0300 	mov.w	r3, #0
 8006936:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800693a:	4659      	mov	r1, fp
 800693c:	00cb      	lsls	r3, r1, #3
 800693e:	4651      	mov	r1, sl
 8006940:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006944:	4651      	mov	r1, sl
 8006946:	00ca      	lsls	r2, r1, #3
 8006948:	4610      	mov	r0, r2
 800694a:	4619      	mov	r1, r3
 800694c:	4603      	mov	r3, r0
 800694e:	4642      	mov	r2, r8
 8006950:	189b      	adds	r3, r3, r2
 8006952:	66bb      	str	r3, [r7, #104]	; 0x68
 8006954:	464b      	mov	r3, r9
 8006956:	460a      	mov	r2, r1
 8006958:	eb42 0303 	adc.w	r3, r2, r3
 800695c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800695e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006962:	685b      	ldr	r3, [r3, #4]
 8006964:	2200      	movs	r2, #0
 8006966:	663b      	str	r3, [r7, #96]	; 0x60
 8006968:	667a      	str	r2, [r7, #100]	; 0x64
 800696a:	f04f 0200 	mov.w	r2, #0
 800696e:	f04f 0300 	mov.w	r3, #0
 8006972:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006976:	4649      	mov	r1, r9
 8006978:	008b      	lsls	r3, r1, #2
 800697a:	4641      	mov	r1, r8
 800697c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006980:	4641      	mov	r1, r8
 8006982:	008a      	lsls	r2, r1, #2
 8006984:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006988:	f7f9 fc92 	bl	80002b0 <__aeabi_uldivmod>
 800698c:	4602      	mov	r2, r0
 800698e:	460b      	mov	r3, r1
 8006990:	4b0d      	ldr	r3, [pc, #52]	; (80069c8 <UART_SetConfig+0x4e4>)
 8006992:	fba3 1302 	umull	r1, r3, r3, r2
 8006996:	095b      	lsrs	r3, r3, #5
 8006998:	2164      	movs	r1, #100	; 0x64
 800699a:	fb01 f303 	mul.w	r3, r1, r3
 800699e:	1ad3      	subs	r3, r2, r3
 80069a0:	011b      	lsls	r3, r3, #4
 80069a2:	3332      	adds	r3, #50	; 0x32
 80069a4:	4a08      	ldr	r2, [pc, #32]	; (80069c8 <UART_SetConfig+0x4e4>)
 80069a6:	fba2 2303 	umull	r2, r3, r2, r3
 80069aa:	095b      	lsrs	r3, r3, #5
 80069ac:	f003 020f 	and.w	r2, r3, #15
 80069b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	4422      	add	r2, r4
 80069b8:	609a      	str	r2, [r3, #8]
}
 80069ba:	bf00      	nop
 80069bc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80069c0:	46bd      	mov	sp, r7
 80069c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80069c6:	bf00      	nop
 80069c8:	51eb851f 	.word	0x51eb851f

080069cc <uint32_identity>:
{
  return x;
}

static inline uint32_t uint32_identity(uint32_t x)
{
 80069cc:	b480      	push	{r7}
 80069ce:	b083      	sub	sp, #12
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
  return x;
 80069d4:	687b      	ldr	r3, [r7, #4]
}
 80069d6:	4618      	mov	r0, r3
 80069d8:	370c      	adds	r7, #12
 80069da:	46bd      	mov	sp, r7
 80069dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e0:	4770      	bx	lr

080069e2 <sl_wfx_reg_read_16>:
                                     sl_wfx_register_address_t address,
                                     void *buffer,
                                     uint32_t length);

sl_status_t sl_wfx_reg_read_16(sl_wfx_register_address_t address, uint16_t *value_out)
{
 80069e2:	b580      	push	{r7, lr}
 80069e4:	b084      	sub	sp, #16
 80069e6:	af00      	add	r7, sp, #0
 80069e8:	4603      	mov	r3, r0
 80069ea:	6039      	str	r1, [r7, #0]
 80069ec:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp[4];
  sl_status_t result = sl_wfx_bus_access(SL_WFX_BUS_READ, address, tmp, sizeof(tmp));
 80069ee:	f107 0208 	add.w	r2, r7, #8
 80069f2:	79f9      	ldrb	r1, [r7, #7]
 80069f4:	2304      	movs	r3, #4
 80069f6:	2002      	movs	r0, #2
 80069f8:	f000 f8f8 	bl	8006bec <sl_wfx_bus_access>
 80069fc:	60f8      	str	r0, [r7, #12]

  *value_out = sl_wfx_unpack_16bit_little_endian(tmp);
 80069fe:	7a3b      	ldrb	r3, [r7, #8]
 8006a00:	b29a      	uxth	r2, r3
 8006a02:	7a7b      	ldrb	r3, [r7, #9]
 8006a04:	b29b      	uxth	r3, r3
 8006a06:	021b      	lsls	r3, r3, #8
 8006a08:	b29b      	uxth	r3, r3
 8006a0a:	4313      	orrs	r3, r2
 8006a0c:	b29a      	uxth	r2, r3
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	801a      	strh	r2, [r3, #0]
                  address,
                  (*value_out >> 8) & 0xFF,
                  *value_out & 0xFF);
#endif

  return result;
 8006a12:	68fb      	ldr	r3, [r7, #12]
}
 8006a14:	4618      	mov	r0, r3
 8006a16:	3710      	adds	r7, #16
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bd80      	pop	{r7, pc}

08006a1c <sl_wfx_reg_write_16>:

sl_status_t sl_wfx_reg_write_16(sl_wfx_register_address_t address, uint16_t value_in)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b084      	sub	sp, #16
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	4603      	mov	r3, r0
 8006a24:	460a      	mov	r2, r1
 8006a26:	71fb      	strb	r3, [r7, #7]
 8006a28:	4613      	mov	r3, r2
 8006a2a:	80bb      	strh	r3, [r7, #4]
                  address,
                  (value_in >> 8) & 0xFF,
                  value_in & 0xFF);
#endif

  sl_wfx_pack_16bit_little_endian(tmp, value_in);
 8006a2c:	88bb      	ldrh	r3, [r7, #4]
 8006a2e:	b2db      	uxtb	r3, r3
 8006a30:	733b      	strb	r3, [r7, #12]
 8006a32:	88bb      	ldrh	r3, [r7, #4]
 8006a34:	0a1b      	lsrs	r3, r3, #8
 8006a36:	b29b      	uxth	r3, r3
 8006a38:	b2db      	uxtb	r3, r3
 8006a3a:	737b      	strb	r3, [r7, #13]
  tmp[2] = 0;
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	73bb      	strb	r3, [r7, #14]
  tmp[3] = 0;
 8006a40:	2300      	movs	r3, #0
 8006a42:	73fb      	strb	r3, [r7, #15]

  return sl_wfx_bus_access(SL_WFX_BUS_WRITE, address, tmp, sizeof(tmp));
 8006a44:	f107 020c 	add.w	r2, r7, #12
 8006a48:	79f9      	ldrb	r1, [r7, #7]
 8006a4a:	2304      	movs	r3, #4
 8006a4c:	2001      	movs	r0, #1
 8006a4e:	f000 f8cd 	bl	8006bec <sl_wfx_bus_access>
 8006a52:	4603      	mov	r3, r0
}
 8006a54:	4618      	mov	r0, r3
 8006a56:	3710      	adds	r7, #16
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	bd80      	pop	{r7, pc}

08006a5c <sl_wfx_reg_read_32>:

sl_status_t sl_wfx_reg_read_32(sl_wfx_register_address_t address, uint32_t *value_out)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b084      	sub	sp, #16
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	4603      	mov	r3, r0
 8006a64:	6039      	str	r1, [r7, #0]
 8006a66:	71fb      	strb	r3, [r7, #7]
  sl_status_t result = sl_wfx_bus_access(SL_WFX_BUS_READ, address, value_out, sizeof(*value_out));
 8006a68:	79f9      	ldrb	r1, [r7, #7]
 8006a6a:	2304      	movs	r3, #4
 8006a6c:	683a      	ldr	r2, [r7, #0]
 8006a6e:	2002      	movs	r0, #2
 8006a70:	f000 f8bc 	bl	8006bec <sl_wfx_bus_access>
 8006a74:	60f8      	str	r0, [r7, #12]

  *value_out = sl_wfx_htole32(*value_out);
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	f7ff ffa6 	bl	80069cc <uint32_identity>
 8006a80:	4602      	mov	r2, r0
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	601a      	str	r2, [r3, #0]
                  (*value_out >> 16) & 0xFF,
                  (*value_out >> 8) & 0xFF,
                  *value_out & 0xFF);
#endif

  return result;
 8006a86:	68fb      	ldr	r3, [r7, #12]
}
 8006a88:	4618      	mov	r0, r3
 8006a8a:	3710      	adds	r7, #16
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	bd80      	pop	{r7, pc}

08006a90 <sl_wfx_reg_write_32>:

sl_status_t sl_wfx_reg_write_32(sl_wfx_register_address_t address, uint32_t value_in)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b082      	sub	sp, #8
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	4603      	mov	r3, r0
 8006a98:	6039      	str	r1, [r7, #0]
 8006a9a:	71fb      	strb	r3, [r7, #7]
                  (value_in >> 16) & 0xFF,
                  (value_in >> 8) & 0xFF,
                  value_in & 0xFF);
#endif

  value_in = sl_wfx_htole32(value_in);
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	f7ff ff94 	bl	80069cc <uint32_identity>
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	603b      	str	r3, [r7, #0]

  return sl_wfx_bus_access(SL_WFX_BUS_WRITE, address, &value_in, sizeof(value_in));
 8006aa8:	463a      	mov	r2, r7
 8006aaa:	79f9      	ldrb	r1, [r7, #7]
 8006aac:	2304      	movs	r3, #4
 8006aae:	2001      	movs	r0, #1
 8006ab0:	f000 f89c 	bl	8006bec <sl_wfx_bus_access>
 8006ab4:	4603      	mov	r3, r0
}
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	3708      	adds	r7, #8
 8006aba:	46bd      	mov	sp, r7
 8006abc:	bd80      	pop	{r7, pc}

08006abe <sl_wfx_data_read>:

sl_status_t sl_wfx_data_read(void *buffer, uint32_t length)
{
 8006abe:	b580      	push	{r7, lr}
 8006ac0:	b084      	sub	sp, #16
 8006ac2:	af00      	add	r7, sp, #0
 8006ac4:	6078      	str	r0, [r7, #4]
 8006ac6:	6039      	str	r1, [r7, #0]
  sl_status_t result;

  result = sl_wfx_bus_access(SL_WFX_BUS_READ, SL_WFX_IN_OUT_QUEUE_REG_ID, buffer, length);
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	687a      	ldr	r2, [r7, #4]
 8006acc:	2102      	movs	r1, #2
 8006ace:	2002      	movs	r0, #2
 8006ad0:	f000 f88c 	bl	8006bec <sl_wfx_bus_access>
 8006ad4:	60f8      	str	r0, [r7, #12]
  }
#endif
  sl_wfx_host_log("\r\n");
#endif

  return result;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
}
 8006ad8:	4618      	mov	r0, r3
 8006ada:	3710      	adds	r7, #16
 8006adc:	46bd      	mov	sp, r7
 8006ade:	bd80      	pop	{r7, pc}

08006ae0 <sl_wfx_data_write>:

sl_status_t sl_wfx_data_write(const void *buffer, uint32_t length)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b084      	sub	sp, #16
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
 8006ae8:	6039      	str	r1, [r7, #0]
  }
#endif
  sl_wfx_host_log("\r\n");
#endif

  result = sl_wfx_bus_access(SL_WFX_BUS_WRITE, SL_WFX_IN_OUT_QUEUE_REG_ID, (void*) buffer, length);
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	687a      	ldr	r2, [r7, #4]
 8006aee:	2102      	movs	r1, #2
 8006af0:	2001      	movs	r0, #1
 8006af2:	f000 f87b 	bl	8006bec <sl_wfx_bus_access>
 8006af6:	60f8      	str	r0, [r7, #12]

  return result;
 8006af8:	68fb      	ldr	r3, [r7, #12]
}
 8006afa:	4618      	mov	r0, r3
 8006afc:	3710      	adds	r7, #16
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}

08006b02 <sl_wfx_apb_write>:

sl_status_t sl_wfx_apb_write(uint32_t address, const void *buffer, uint32_t length)
{
 8006b02:	b580      	push	{r7, lr}
 8006b04:	b086      	sub	sp, #24
 8006b06:	af00      	add	r7, sp, #0
 8006b08:	60f8      	str	r0, [r7, #12]
 8006b0a:	60b9      	str	r1, [r7, #8]
 8006b0c:	607a      	str	r2, [r7, #4]
  sl_status_t result;
  if (length / 2 >= 0x1000) {
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b14:	d301      	bcc.n	8006b1a <sl_wfx_apb_write+0x18>
    return SL_STATUS_INVALID_PARAMETER;
 8006b16:	2321      	movs	r3, #33	; 0x21
 8006b18:	e00f      	b.n	8006b3a <sl_wfx_apb_write+0x38>
  }

  result = sl_wfx_reg_write_32(SL_WFX_SRAM_BASE_ADDR_REG_ID, address);
 8006b1a:	68f9      	ldr	r1, [r7, #12]
 8006b1c:	2004      	movs	r0, #4
 8006b1e:	f7ff ffb7 	bl	8006a90 <sl_wfx_reg_write_32>
 8006b22:	6178      	str	r0, [r7, #20]

  if (result == SL_STATUS_OK) {
 8006b24:	697b      	ldr	r3, [r7, #20]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d106      	bne.n	8006b38 <sl_wfx_apb_write+0x36>
    result = sl_wfx_bus_access(SL_WFX_BUS_WRITE, SL_WFX_SRAM_DPORT_REG_ID, (void*) buffer, length);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	68ba      	ldr	r2, [r7, #8]
 8006b2e:	2105      	movs	r1, #5
 8006b30:	2001      	movs	r0, #1
 8006b32:	f000 f85b 	bl	8006bec <sl_wfx_bus_access>
 8006b36:	6178      	str	r0, [r7, #20]
  }

  return result;
 8006b38:	697b      	ldr	r3, [r7, #20]
}
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	3718      	adds	r7, #24
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	bd80      	pop	{r7, pc}

08006b42 <sl_wfx_apb_write_32>:

sl_status_t sl_wfx_apb_write_32(uint32_t address, uint32_t value_in)
{
 8006b42:	b580      	push	{r7, lr}
 8006b44:	b084      	sub	sp, #16
 8006b46:	af00      	add	r7, sp, #0
 8006b48:	6078      	str	r0, [r7, #4]
 8006b4a:	6039      	str	r1, [r7, #0]
  sl_status_t result;

  result = sl_wfx_reg_write_32(SL_WFX_SRAM_BASE_ADDR_REG_ID, address);
 8006b4c:	6879      	ldr	r1, [r7, #4]
 8006b4e:	2004      	movs	r0, #4
 8006b50:	f7ff ff9e 	bl	8006a90 <sl_wfx_reg_write_32>
 8006b54:	60f8      	str	r0, [r7, #12]

  if (result == SL_STATUS_OK) {
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d104      	bne.n	8006b66 <sl_wfx_apb_write_32+0x24>
    result = sl_wfx_reg_write_32(SL_WFX_SRAM_DPORT_REG_ID, value_in);
 8006b5c:	6839      	ldr	r1, [r7, #0]
 8006b5e:	2005      	movs	r0, #5
 8006b60:	f7ff ff96 	bl	8006a90 <sl_wfx_reg_write_32>
 8006b64:	60f8      	str	r0, [r7, #12]
  }

  return result;
 8006b66:	68fb      	ldr	r3, [r7, #12]
}
 8006b68:	4618      	mov	r0, r3
 8006b6a:	3710      	adds	r7, #16
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	bd80      	pop	{r7, pc}

08006b70 <sl_wfx_apb_read_32>:

sl_status_t sl_wfx_apb_read_32(uint32_t address, uint32_t *value_out)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b086      	sub	sp, #24
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
 8006b78:	6039      	str	r1, [r7, #0]
  uint32_t value32;
  sl_status_t result;

  // write address
  result = sl_wfx_reg_write_32(SL_WFX_SRAM_BASE_ADDR_REG_ID, address);
 8006b7a:	6879      	ldr	r1, [r7, #4]
 8006b7c:	2004      	movs	r0, #4
 8006b7e:	f7ff ff87 	bl	8006a90 <sl_wfx_reg_write_32>
 8006b82:	6138      	str	r0, [r7, #16]

  // set the "prefetch" bit
  result = sl_wfx_reg_read_32(SL_WFX_CONFIG_REG_ID, &value32);
 8006b84:	f107 030c 	add.w	r3, r7, #12
 8006b88:	4619      	mov	r1, r3
 8006b8a:	2000      	movs	r0, #0
 8006b8c:	f7ff ff66 	bl	8006a5c <sl_wfx_reg_read_32>
 8006b90:	6138      	str	r0, [r7, #16]
  result = sl_wfx_reg_write_32(SL_WFX_CONFIG_REG_ID, value32 | CONFIG_PREFETCH_BIT);
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006b98:	4619      	mov	r1, r3
 8006b9a:	2000      	movs	r0, #0
 8006b9c:	f7ff ff78 	bl	8006a90 <sl_wfx_reg_write_32>
 8006ba0:	6138      	str	r0, [r7, #16]

  // and wait for the prefetch bit to clear
  for (uint32_t i = 0; i < 20; i++) {
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	617b      	str	r3, [r7, #20]
 8006ba6:	e011      	b.n	8006bcc <sl_wfx_apb_read_32+0x5c>
    result = sl_wfx_reg_read_32(SL_WFX_CONFIG_REG_ID, &value32);
 8006ba8:	f107 030c 	add.w	r3, r7, #12
 8006bac:	4619      	mov	r1, r3
 8006bae:	2000      	movs	r0, #0
 8006bb0:	f7ff ff54 	bl	8006a5c <sl_wfx_reg_read_32>
 8006bb4:	6138      	str	r0, [r7, #16]
    if ((value32 & CONFIG_PREFETCH_BIT) == 0) {
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d009      	beq.n	8006bd4 <sl_wfx_apb_read_32+0x64>
      break;
    }

    sl_wfx_host_wait(1);
 8006bc0:	2001      	movs	r0, #1
 8006bc2:	f001 fb71 	bl	80082a8 <sl_wfx_host_wait>
  for (uint32_t i = 0; i < 20; i++) {
 8006bc6:	697b      	ldr	r3, [r7, #20]
 8006bc8:	3301      	adds	r3, #1
 8006bca:	617b      	str	r3, [r7, #20]
 8006bcc:	697b      	ldr	r3, [r7, #20]
 8006bce:	2b13      	cmp	r3, #19
 8006bd0:	d9ea      	bls.n	8006ba8 <sl_wfx_apb_read_32+0x38>
 8006bd2:	e000      	b.n	8006bd6 <sl_wfx_apb_read_32+0x66>
      break;
 8006bd4:	bf00      	nop
  }

  // and data is ready
  result = sl_wfx_reg_read_32(SL_WFX_SRAM_DPORT_REG_ID, value_out);
 8006bd6:	6839      	ldr	r1, [r7, #0]
 8006bd8:	2005      	movs	r0, #5
 8006bda:	f7ff ff3f 	bl	8006a5c <sl_wfx_reg_read_32>
 8006bde:	6138      	str	r0, [r7, #16]

  return result;
 8006be0:	693b      	ldr	r3, [r7, #16]
}
 8006be2:	4618      	mov	r0, r3
 8006be4:	3718      	adds	r7, #24
 8006be6:	46bd      	mov	sp, r7
 8006be8:	bd80      	pop	{r7, pc}
	...

08006bec <sl_wfx_bus_access>:

static sl_status_t sl_wfx_bus_access(sl_wfx_host_bus_transfer_type_t type,
                                     sl_wfx_register_address_t address,
                                     void *buffer,
                                     uint32_t length)
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b086      	sub	sp, #24
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	60ba      	str	r2, [r7, #8]
 8006bf4:	607b      	str	r3, [r7, #4]
 8006bf6:	4603      	mov	r3, r0
 8006bf8:	73fb      	strb	r3, [r7, #15]
 8006bfa:	460b      	mov	r3, r1
 8006bfc:	73bb      	strb	r3, [r7, #14]
  sl_status_t result;

  /* If the WFx is sleeping, wake it up */
  if (sl_wfx_context->state & SL_WFX_SLEEPING) {
 8006bfe:	4b46      	ldr	r3, [pc, #280]	; (8006d18 <sl_wfx_bus_access+0x12c>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f893 3222 	ldrb.w	r3, [r3, #546]	; 0x222
 8006c06:	f003 0308 	and.w	r3, r3, #8
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d01a      	beq.n	8006c44 <sl_wfx_bus_access+0x58>
    result = sl_wfx_host_set_wake_up_pin(1);
 8006c0e:	2001      	movs	r0, #1
 8006c10:	f001 fac4 	bl	800819c <sl_wfx_host_set_wake_up_pin>
 8006c14:	6178      	str	r0, [r7, #20]
    SL_WFX_ERROR_CHECK(result);
 8006c16:	697b      	ldr	r3, [r7, #20]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d171      	bne.n	8006d00 <sl_wfx_bus_access+0x114>
    /* If the command is of read type, consider the WFx awake */
    if (type == SL_WFX_BUS_WRITE) {
 8006c1c:	7bfb      	ldrb	r3, [r7, #15]
 8006c1e:	2b01      	cmp	r3, #1
 8006c20:	d105      	bne.n	8006c2e <sl_wfx_bus_access+0x42>
      result = sl_wfx_host_wait_for_wake_up();
 8006c22:	f001 fad7 	bl	80081d4 <sl_wfx_host_wait_for_wake_up>
 8006c26:	6178      	str	r0, [r7, #20]
      SL_WFX_ERROR_CHECK(result);
 8006c28:	697b      	ldr	r3, [r7, #20]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d16a      	bne.n	8006d04 <sl_wfx_bus_access+0x118>
    }
    sl_wfx_context->state &= ~SL_WFX_SLEEPING;
 8006c2e:	4b3a      	ldr	r3, [pc, #232]	; (8006d18 <sl_wfx_bus_access+0x12c>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f893 2222 	ldrb.w	r2, [r3, #546]	; 0x222
 8006c36:	4b38      	ldr	r3, [pc, #224]	; (8006d18 <sl_wfx_bus_access+0x12c>)
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f022 0208 	bic.w	r2, r2, #8
 8006c3e:	b2d2      	uxtb	r2, r2
 8006c40:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222
    sl_wfx_host_log("WFx awake\r\n");
#endif
  }

  /* Send the communication on the bus */
  if (type == SL_WFX_BUS_READ) {
 8006c44:	7bfb      	ldrb	r3, [r7, #15]
 8006c46:	2b02      	cmp	r3, #2
 8006c48:	d107      	bne.n	8006c5a <sl_wfx_bus_access+0x6e>
    result = sl_wfx_reg_read(address, buffer, length);
 8006c4a:	7bbb      	ldrb	r3, [r7, #14]
 8006c4c:	687a      	ldr	r2, [r7, #4]
 8006c4e:	68b9      	ldr	r1, [r7, #8]
 8006c50:	4618      	mov	r0, r3
 8006c52:	f000 f863 	bl	8006d1c <sl_wfx_reg_read>
 8006c56:	6178      	str	r0, [r7, #20]
 8006c58:	e00c      	b.n	8006c74 <sl_wfx_bus_access+0x88>
  } else if (type == SL_WFX_BUS_WRITE) {
 8006c5a:	7bfb      	ldrb	r3, [r7, #15]
 8006c5c:	2b01      	cmp	r3, #1
 8006c5e:	d107      	bne.n	8006c70 <sl_wfx_bus_access+0x84>
    result = sl_wfx_reg_write(address, buffer, length);
 8006c60:	7bbb      	ldrb	r3, [r7, #14]
 8006c62:	687a      	ldr	r2, [r7, #4]
 8006c64:	68b9      	ldr	r1, [r7, #8]
 8006c66:	4618      	mov	r0, r3
 8006c68:	f000 f8a4 	bl	8006db4 <sl_wfx_reg_write>
 8006c6c:	6178      	str	r0, [r7, #20]
 8006c6e:	e001      	b.n	8006c74 <sl_wfx_bus_access+0x88>
  } else {
    result = SL_STATUS_INVALID_PARAMETER;
 8006c70:	2321      	movs	r3, #33	; 0x21
 8006c72:	617b      	str	r3, [r7, #20]
  }
  SL_WFX_ERROR_CHECK(result);
 8006c74:	697b      	ldr	r3, [r7, #20]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d146      	bne.n	8006d08 <sl_wfx_bus_access+0x11c>

  /* If the power save is active and there is no confirmation pending, put
     the WFx back to sleep */
  if ((sl_wfx_context->state & SL_WFX_POWER_SAVE_ACTIVE)
 8006c7a:	4b27      	ldr	r3, [pc, #156]	; (8006d18 <sl_wfx_bus_access+0x12c>)
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f893 3222 	ldrb.w	r3, [r3, #546]	; 0x222
 8006c82:	f003 0310 	and.w	r3, r3, #16
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d040      	beq.n	8006d0c <sl_wfx_bus_access+0x120>
      && (type == SL_WFX_BUS_READ)
 8006c8a:	7bfb      	ldrb	r3, [r7, #15]
 8006c8c:	2b02      	cmp	r3, #2
 8006c8e:	d13d      	bne.n	8006d0c <sl_wfx_bus_access+0x120>
      && ((address != SL_WFX_CONTROL_REG_ID)
 8006c90:	7bbb      	ldrb	r3, [r7, #14]
 8006c92:	2b01      	cmp	r3, #1
 8006c94:	d108      	bne.n	8006ca8 <sl_wfx_bus_access+0xbc>
          || ((address == SL_WFX_CONTROL_REG_ID) && ((*(uint16_t *)buffer & SL_WFX_CONT_NEXT_LEN_MASK) == 0)))
 8006c96:	7bbb      	ldrb	r3, [r7, #14]
 8006c98:	2b01      	cmp	r3, #1
 8006c9a:	d137      	bne.n	8006d0c <sl_wfx_bus_access+0x120>
 8006c9c:	68bb      	ldr	r3, [r7, #8]
 8006c9e:	881b      	ldrh	r3, [r3, #0]
 8006ca0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d131      	bne.n	8006d0c <sl_wfx_bus_access+0x120>
      && (sl_wfx_context->used_buffers <= 1)
 8006ca8:	4b1b      	ldr	r3, [pc, #108]	; (8006d18 <sl_wfx_bus_access+0x12c>)
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
 8006cb0:	2b01      	cmp	r3, #1
 8006cb2:	d82b      	bhi.n	8006d0c <sl_wfx_bus_access+0x120>
      && ((*((uint16_t *)((uint8_t *)buffer + length - SL_WFX_CONT_REGISTER_SIZE)) & SL_WFX_CONT_NEXT_LEN_MASK) == 0)) {
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	3b02      	subs	r3, #2
 8006cb8:	68ba      	ldr	r2, [r7, #8]
 8006cba:	4413      	add	r3, r2
 8006cbc:	881b      	ldrh	r3, [r3, #0]
 8006cbe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d122      	bne.n	8006d0c <sl_wfx_bus_access+0x120>
    /* Ask the host opinion on whether the WFx should be put back to sleep or
       not*/
    if (sl_wfx_host_sleep_grant(type, address, length) == SL_STATUS_WIFI_SLEEP_GRANTED) {
 8006cc6:	7bb9      	ldrb	r1, [r7, #14]
 8006cc8:	7bfb      	ldrb	r3, [r7, #15]
 8006cca:	687a      	ldr	r2, [r7, #4]
 8006ccc:	4618      	mov	r0, r3
 8006cce:	f001 fa95 	bl	80081fc <sl_wfx_host_sleep_grant>
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	f640 3208 	movw	r2, #2824	; 0xb08
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d117      	bne.n	8006d0c <sl_wfx_bus_access+0x120>
      sl_wfx_context->state |= SL_WFX_SLEEPING;
 8006cdc:	4b0e      	ldr	r3, [pc, #56]	; (8006d18 <sl_wfx_bus_access+0x12c>)
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f893 2222 	ldrb.w	r2, [r3, #546]	; 0x222
 8006ce4:	4b0c      	ldr	r3, [pc, #48]	; (8006d18 <sl_wfx_bus_access+0x12c>)
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f042 0208 	orr.w	r2, r2, #8
 8006cec:	b2d2      	uxtb	r2, r2
 8006cee:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222
      result = sl_wfx_host_set_wake_up_pin(0);
 8006cf2:	2000      	movs	r0, #0
 8006cf4:	f001 fa52 	bl	800819c <sl_wfx_host_set_wake_up_pin>
 8006cf8:	6178      	str	r0, [r7, #20]
      SL_WFX_ERROR_CHECK(result);
 8006cfa:	697b      	ldr	r3, [r7, #20]
 8006cfc:	2b00      	cmp	r3, #0
      sl_wfx_host_log("WFx sleeping\r\n");
#endif
    }
  }

  error_handler:
 8006cfe:	e005      	b.n	8006d0c <sl_wfx_bus_access+0x120>
    SL_WFX_ERROR_CHECK(result);
 8006d00:	bf00      	nop
 8006d02:	e004      	b.n	8006d0e <sl_wfx_bus_access+0x122>
      SL_WFX_ERROR_CHECK(result);
 8006d04:	bf00      	nop
 8006d06:	e002      	b.n	8006d0e <sl_wfx_bus_access+0x122>
  SL_WFX_ERROR_CHECK(result);
 8006d08:	bf00      	nop
 8006d0a:	e000      	b.n	8006d0e <sl_wfx_bus_access+0x122>
  error_handler:
 8006d0c:	bf00      	nop
  return result;
 8006d0e:	697b      	ldr	r3, [r7, #20]
}
 8006d10:	4618      	mov	r0, r3
 8006d12:	3718      	adds	r7, #24
 8006d14:	46bd      	mov	sp, r7
 8006d16:	bd80      	pop	{r7, pc}
 8006d18:	200007e8 	.word	0x200007e8

08006d1c <sl_wfx_reg_read>:

#define SET_WRITE 0x7FFF /* usage: and operation */
#define SET_READ 0x8000  /* usage: or operation */

sl_status_t sl_wfx_reg_read(sl_wfx_register_address_t address, void *buffer, uint32_t length)
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b08a      	sub	sp, #40	; 0x28
 8006d20:	af02      	add	r7, sp, #8
 8006d22:	4603      	mov	r3, r0
 8006d24:	60b9      	str	r1, [r7, #8]
 8006d26:	607a      	str	r2, [r7, #4]
 8006d28:	73fb      	strb	r3, [r7, #15]
  uint16_t header = SET_READ | (address << 12) | (length / 2);
 8006d2a:	7bfb      	ldrb	r3, [r7, #15]
 8006d2c:	b29b      	uxth	r3, r3
 8006d2e:	031b      	lsls	r3, r3, #12
 8006d30:	b29a      	uxth	r2, r3
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	085b      	lsrs	r3, r3, #1
 8006d36:	b29b      	uxth	r3, r3
 8006d38:	4313      	orrs	r3, r2
 8006d3a:	b29b      	uxth	r3, r3
 8006d3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d44:	83fb      	strh	r3, [r7, #30]

  uint8_t header_as_bytes[2];
  sl_wfx_pack_16bit_big_endian(header_as_bytes, header);
 8006d46:	8bfb      	ldrh	r3, [r7, #30]
 8006d48:	0a1b      	lsrs	r3, r3, #8
 8006d4a:	b29b      	uxth	r3, r3
 8006d4c:	b2db      	uxtb	r3, r3
 8006d4e:	753b      	strb	r3, [r7, #20]
 8006d50:	8bfb      	ldrh	r3, [r7, #30]
 8006d52:	b2db      	uxtb	r3, r3
 8006d54:	757b      	strb	r3, [r7, #21]

  sl_wfx_host_spi_cs_assert();
 8006d56:	f002 f895 	bl	8008e84 <sl_wfx_host_spi_cs_assert>
  sl_wfx_host_spi_transfer_no_cs_assert(SL_WFX_BUS_READ, header_as_bytes, 2, (uint8_t *)buffer, length);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	b29b      	uxth	r3, r3
 8006d5e:	f107 0114 	add.w	r1, r7, #20
 8006d62:	9300      	str	r3, [sp, #0]
 8006d64:	68bb      	ldr	r3, [r7, #8]
 8006d66:	2202      	movs	r2, #2
 8006d68:	2002      	movs	r0, #2
 8006d6a:	f002 f8a3 	bl	8008eb4 <sl_wfx_host_spi_transfer_no_cs_assert>
  sl_wfx_host_spi_cs_deassert();
 8006d6e:	f002 f895 	bl	8008e9c <sl_wfx_host_spi_cs_deassert>

  if (address == SL_WFX_CONFIG_REG_ID) {
 8006d72:	7bfb      	ldrb	r3, [r7, #15]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d118      	bne.n	8006daa <sl_wfx_reg_read+0x8e>
    // Config always read/written in "word mode 0"
    // that is, its byte-order looks like that
    // B1 B0 B3 B2
    // here is this rearrangement
    uint8_t *tmp = (uint8_t *)buffer;
 8006d78:	68bb      	ldr	r3, [r7, #8]
 8006d7a:	61bb      	str	r3, [r7, #24]
    uint8_t byte_swap = tmp[0];
 8006d7c:	69bb      	ldr	r3, [r7, #24]
 8006d7e:	781b      	ldrb	r3, [r3, #0]
 8006d80:	75fb      	strb	r3, [r7, #23]
    tmp[0] = tmp[1];
 8006d82:	69bb      	ldr	r3, [r7, #24]
 8006d84:	785a      	ldrb	r2, [r3, #1]
 8006d86:	69bb      	ldr	r3, [r7, #24]
 8006d88:	701a      	strb	r2, [r3, #0]
    tmp[1] = byte_swap;
 8006d8a:	69bb      	ldr	r3, [r7, #24]
 8006d8c:	3301      	adds	r3, #1
 8006d8e:	7dfa      	ldrb	r2, [r7, #23]
 8006d90:	701a      	strb	r2, [r3, #0]

    byte_swap = tmp[2];
 8006d92:	69bb      	ldr	r3, [r7, #24]
 8006d94:	789b      	ldrb	r3, [r3, #2]
 8006d96:	75fb      	strb	r3, [r7, #23]
    tmp[2] = tmp[3];
 8006d98:	69bb      	ldr	r3, [r7, #24]
 8006d9a:	3302      	adds	r3, #2
 8006d9c:	69ba      	ldr	r2, [r7, #24]
 8006d9e:	78d2      	ldrb	r2, [r2, #3]
 8006da0:	701a      	strb	r2, [r3, #0]
    tmp[3] = byte_swap;
 8006da2:	69bb      	ldr	r3, [r7, #24]
 8006da4:	3303      	adds	r3, #3
 8006da6:	7dfa      	ldrb	r2, [r7, #23]
 8006da8:	701a      	strb	r2, [r3, #0]
  }

  return SL_STATUS_OK;
 8006daa:	2300      	movs	r3, #0
}
 8006dac:	4618      	mov	r0, r3
 8006dae:	3720      	adds	r7, #32
 8006db0:	46bd      	mov	sp, r7
 8006db2:	bd80      	pop	{r7, pc}

08006db4 <sl_wfx_reg_write>:

sl_status_t sl_wfx_reg_write(sl_wfx_register_address_t address, const void *buffer, uint32_t length)
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b08a      	sub	sp, #40	; 0x28
 8006db8:	af02      	add	r7, sp, #8
 8006dba:	4603      	mov	r3, r0
 8006dbc:	60b9      	str	r1, [r7, #8]
 8006dbe:	607a      	str	r2, [r7, #4]
 8006dc0:	73fb      	strb	r3, [r7, #15]
  if (address == SL_WFX_CONFIG_REG_ID) {
 8006dc2:	7bfb      	ldrb	r3, [r7, #15]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d118      	bne.n	8006dfa <sl_wfx_reg_write+0x46>
    // Config always read/written in "word mode 0"
    // that is, its byte-order looks like that
    // B1 B0 B3 B2
    // here is this rearrangement
    uint8_t *tmp = (uint8_t *)buffer;
 8006dc8:	68bb      	ldr	r3, [r7, #8]
 8006dca:	61fb      	str	r3, [r7, #28]
    uint8_t byte_swap = tmp[0];
 8006dcc:	69fb      	ldr	r3, [r7, #28]
 8006dce:	781b      	ldrb	r3, [r3, #0]
 8006dd0:	76fb      	strb	r3, [r7, #27]
    tmp[0] = tmp[1];
 8006dd2:	69fb      	ldr	r3, [r7, #28]
 8006dd4:	785a      	ldrb	r2, [r3, #1]
 8006dd6:	69fb      	ldr	r3, [r7, #28]
 8006dd8:	701a      	strb	r2, [r3, #0]
    tmp[1] = byte_swap;
 8006dda:	69fb      	ldr	r3, [r7, #28]
 8006ddc:	3301      	adds	r3, #1
 8006dde:	7efa      	ldrb	r2, [r7, #27]
 8006de0:	701a      	strb	r2, [r3, #0]

    byte_swap = tmp[2];
 8006de2:	69fb      	ldr	r3, [r7, #28]
 8006de4:	789b      	ldrb	r3, [r3, #2]
 8006de6:	76fb      	strb	r3, [r7, #27]
    tmp[2] = tmp[3];
 8006de8:	69fb      	ldr	r3, [r7, #28]
 8006dea:	3302      	adds	r3, #2
 8006dec:	69fa      	ldr	r2, [r7, #28]
 8006dee:	78d2      	ldrb	r2, [r2, #3]
 8006df0:	701a      	strb	r2, [r3, #0]
    tmp[3] = byte_swap;
 8006df2:	69fb      	ldr	r3, [r7, #28]
 8006df4:	3303      	adds	r3, #3
 8006df6:	7efa      	ldrb	r2, [r7, #27]
 8006df8:	701a      	strb	r2, [r3, #0]
  }

  uint16_t header = /* write flag = 0*/ (address << 12) | (length / 2);
 8006dfa:	7bfb      	ldrb	r3, [r7, #15]
 8006dfc:	b29b      	uxth	r3, r3
 8006dfe:	031b      	lsls	r3, r3, #12
 8006e00:	b29a      	uxth	r2, r3
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	085b      	lsrs	r3, r3, #1
 8006e06:	b29b      	uxth	r3, r3
 8006e08:	4313      	orrs	r3, r2
 8006e0a:	833b      	strh	r3, [r7, #24]

  uint8_t header_as_bytes[2];
  sl_wfx_pack_16bit_big_endian(header_as_bytes, header);
 8006e0c:	8b3b      	ldrh	r3, [r7, #24]
 8006e0e:	0a1b      	lsrs	r3, r3, #8
 8006e10:	b29b      	uxth	r3, r3
 8006e12:	b2db      	uxtb	r3, r3
 8006e14:	753b      	strb	r3, [r7, #20]
 8006e16:	8b3b      	ldrh	r3, [r7, #24]
 8006e18:	b2db      	uxtb	r3, r3
 8006e1a:	757b      	strb	r3, [r7, #21]

  sl_wfx_host_spi_cs_assert();
 8006e1c:	f002 f832 	bl	8008e84 <sl_wfx_host_spi_cs_assert>
  /* Note: sl_wfx_host_spi_transfer_no_cs_assert() does not modify the buffer when doing SL_WFX_BUS_WRITE */
  sl_wfx_host_spi_transfer_no_cs_assert(SL_WFX_BUS_WRITE, header_as_bytes, 2, (uint8_t *)buffer, length);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	b29b      	uxth	r3, r3
 8006e24:	f107 0114 	add.w	r1, r7, #20
 8006e28:	9300      	str	r3, [sp, #0]
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	2202      	movs	r2, #2
 8006e2e:	2001      	movs	r0, #1
 8006e30:	f002 f840 	bl	8008eb4 <sl_wfx_host_spi_transfer_no_cs_assert>
  sl_wfx_host_spi_cs_deassert();
 8006e34:	f002 f832 	bl	8008e9c <sl_wfx_host_spi_cs_deassert>

  return SL_STATUS_OK;
 8006e38:	2300      	movs	r3, #0
}
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	3720      	adds	r7, #32
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	bd80      	pop	{r7, pc}
	...

08006e44 <sl_wfx_init_bus>:

sl_status_t sl_wfx_init_bus(void)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b082      	sub	sp, #8
 8006e48:	af00      	add	r7, sp, #0
  sl_status_t status;
  uint32_t value32;

  status = sl_wfx_host_init_bus();
 8006e4a:	f001 fff5 	bl	8008e38 <sl_wfx_host_init_bus>
 8006e4e:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(status);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d12b      	bne.n	8006eae <sl_wfx_init_bus+0x6a>

  sl_wfx_host_reset_chip();
 8006e56:	f001 f989 	bl	800816c <sl_wfx_host_reset_chip>

  status = sl_wfx_reg_read_32(SL_WFX_CONFIG_REG_ID, &value32);
 8006e5a:	463b      	mov	r3, r7
 8006e5c:	4619      	mov	r1, r3
 8006e5e:	2000      	movs	r0, #0
 8006e60:	f7ff fdfc 	bl	8006a5c <sl_wfx_reg_read_32>
 8006e64:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(status);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d122      	bne.n	8006eb2 <sl_wfx_init_bus+0x6e>

  if (value32 == 0 || value32 == 0xFFFFFFFF) {
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d003      	beq.n	8006e7a <sl_wfx_init_bus+0x36>
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e78:	d104      	bne.n	8006e84 <sl_wfx_init_bus+0x40>
    status = SL_STATUS_FAIL;
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	607b      	str	r3, [r7, #4]
    SL_WFX_ERROR_CHECK(status);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d118      	bne.n	8006eb6 <sl_wfx_init_bus+0x72>
  }

  // setting up "word mode = b10", this means that data on SPI bus
  // is sent as B0, B1, B2, B3 , ....
  value32 &= ~SL_WFX_CONFIG_WORD_MODE_BITS;
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e8a:	603b      	str	r3, [r7, #0]
  value32 |= SL_WFX_CONFIG_WORD_MODE_2;
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006e92:	603b      	str	r3, [r7, #0]

  /* Write CONFIG Register to configure SPI clock edge to support high frequency*/
  value32 |= 0x04045400;
 8006e94:	683a      	ldr	r2, [r7, #0]
 8006e96:	4b0b      	ldr	r3, [pc, #44]	; (8006ec4 <sl_wfx_init_bus+0x80>)
 8006e98:	4313      	orrs	r3, r2
 8006e9a:	603b      	str	r3, [r7, #0]

  status = sl_wfx_reg_write_32(SL_WFX_CONFIG_REG_ID, value32);
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	4619      	mov	r1, r3
 8006ea0:	2000      	movs	r0, #0
 8006ea2:	f7ff fdf5 	bl	8006a90 <sl_wfx_reg_write_32>
 8006ea6:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(status);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2b00      	cmp	r3, #0

  error_handler:
 8006eac:	e004      	b.n	8006eb8 <sl_wfx_init_bus+0x74>
  SL_WFX_ERROR_CHECK(status);
 8006eae:	bf00      	nop
 8006eb0:	e002      	b.n	8006eb8 <sl_wfx_init_bus+0x74>
  SL_WFX_ERROR_CHECK(status);
 8006eb2:	bf00      	nop
 8006eb4:	e000      	b.n	8006eb8 <sl_wfx_init_bus+0x74>
    SL_WFX_ERROR_CHECK(status);
 8006eb6:	bf00      	nop
  return status;
 8006eb8:	687b      	ldr	r3, [r7, #4]
}
 8006eba:	4618      	mov	r0, r3
 8006ebc:	3708      	adds	r7, #8
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bd80      	pop	{r7, pc}
 8006ec2:	bf00      	nop
 8006ec4:	04045400 	.word	0x04045400

08006ec8 <sl_wfx_deinit_bus>:

sl_status_t sl_wfx_deinit_bus(void)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	af00      	add	r7, sp, #0
  return sl_wfx_host_deinit_bus();
 8006ecc:	f001 ffcc 	bl	8008e68 <sl_wfx_host_deinit_bus>
 8006ed0:	4603      	mov	r3, r0
}
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	bd80      	pop	{r7, pc}

08006ed6 <uint16_identity>:
{
 8006ed6:	b480      	push	{r7}
 8006ed8:	b083      	sub	sp, #12
 8006eda:	af00      	add	r7, sp, #0
 8006edc:	4603      	mov	r3, r0
 8006ede:	80fb      	strh	r3, [r7, #6]
  return x;
 8006ee0:	88fb      	ldrh	r3, [r7, #6]
}
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	370c      	adds	r7, #12
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eec:	4770      	bx	lr

08006eee <uint32_identity>:
{
 8006eee:	b480      	push	{r7}
 8006ef0:	b083      	sub	sp, #12
 8006ef2:	af00      	add	r7, sp, #0
 8006ef4:	6078      	str	r0, [r7, #4]
  return x;
 8006ef6:	687b      	ldr	r3, [r7, #4]
}
 8006ef8:	4618      	mov	r0, r3
 8006efa:	370c      	adds	r7, #12
 8006efc:	46bd      	mov	sp, r7
 8006efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f02:	4770      	bx	lr

08006f04 <sl_wfx_init>:
 * SL_STATUS_FAIL otherwise
 *
 * @note Actions performed by sl_wfx_init(): Reset -> load firmware -> send PDS
 *****************************************************************************/
sl_status_t sl_wfx_init(sl_wfx_context_t *context)
{
 8006f04:	b590      	push	{r4, r7, lr}
 8006f06:	b089      	sub	sp, #36	; 0x24
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
  const char           *pds_data;
#ifdef SL_WFX_USE_SECURE_LINK
  sl_wfx_secure_link_mode_t link_mode;
#endif

  memset(context, 0, sizeof(*context) );
 8006f0c:	f44f 7209 	mov.w	r2, #548	; 0x224
 8006f10:	2100      	movs	r1, #0
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	f012 ff0c 	bl	8019d30 <memset>

  sl_wfx_context = context;
 8006f18:	4a6b      	ldr	r2, [pc, #428]	; (80070c8 <sl_wfx_init+0x1c4>)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6013      	str	r3, [r2, #0]
  sl_wfx_context->used_buffers = 0;
 8006f1e:	4b6a      	ldr	r3, [pc, #424]	; (80070c8 <sl_wfx_init+0x1c4>)
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	2200      	movs	r2, #0
 8006f24:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206

  result = sl_wfx_init_bus(  );
 8006f28:	f7ff ff8c 	bl	8006e44 <sl_wfx_init_bus>
 8006f2c:	61f8      	str	r0, [r7, #28]
  SL_WFX_ERROR_CHECK(result);
 8006f2e:	69fb      	ldr	r3, [r7, #28]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	f040 80a5 	bne.w	8007080 <sl_wfx_init+0x17c>
#if (SL_WFX_DEBUG_MASK & SL_WFX_DEBUG_INIT)
  sl_wfx_host_log("--Bus initialized--\r\n");
#endif

  result = sl_wfx_init_chip( );
 8006f36:	f000 fc1f 	bl	8007778 <sl_wfx_init_chip>
 8006f3a:	61f8      	str	r0, [r7, #28]
  SL_WFX_ERROR_CHECK(result);
 8006f3c:	69fb      	ldr	r3, [r7, #28]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	f040 80a0 	bne.w	8007084 <sl_wfx_init+0x180>
#if (SL_WFX_DEBUG_MASK & SL_WFX_DEBUG_INIT)
  sl_wfx_host_log("--Chip initialized--\r\n");
#endif

  result = sl_wfx_download_run_bootloader();
 8006f44:	f000 fcc2 	bl	80078cc <sl_wfx_download_run_bootloader>
 8006f48:	61f8      	str	r0, [r7, #28]
  SL_WFX_ERROR_CHECK(result);
 8006f4a:	69fb      	ldr	r3, [r7, #28]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	f040 809b 	bne.w	8007088 <sl_wfx_init+0x184>
#if (SL_WFX_DEBUG_MASK & SL_WFX_DEBUG_INIT)
  sl_wfx_host_log("--Bootloader running--\r\n");
#endif

  result = sl_wfx_host_setup_waited_event(SL_WFX_STARTUP_IND_ID);
 8006f52:	20e1      	movs	r0, #225	; 0xe1
 8006f54:	f001 f962 	bl	800821c <sl_wfx_host_setup_waited_event>
 8006f58:	61f8      	str	r0, [r7, #28]
  SL_WFX_ERROR_CHECK(result);
 8006f5a:	69fb      	ldr	r3, [r7, #28]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	f040 8095 	bne.w	800708c <sl_wfx_init+0x188>

  /* Downloading Wi-Fi chip firmware */
  result = sl_wfx_download_run_firmware( );
 8006f62:	f000 fd05 	bl	8007970 <sl_wfx_download_run_firmware>
 8006f66:	61f8      	str	r0, [r7, #28]
  SL_WFX_ERROR_CHECK(result);
 8006f68:	69fb      	ldr	r3, [r7, #28]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	f040 8090 	bne.w	8007090 <sl_wfx_init+0x18c>
#if (SL_WFX_DEBUG_MASK & SL_WFX_DEBUG_INIT)
  sl_wfx_host_log("--Firmware downloaded--\r\n");
#endif

  result = sl_wfx_enable_irq(  );
 8006f70:	f000 fb96 	bl	80076a0 <sl_wfx_enable_irq>
 8006f74:	61f8      	str	r0, [r7, #28]
  SL_WFX_ERROR_CHECK(result);
 8006f76:	69fb      	ldr	r3, [r7, #28]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	f040 808b 	bne.w	8007094 <sl_wfx_init+0x190>

  result = sl_wfx_set_access_mode_message(  );
 8006f7e:	f000 fbdd 	bl	800773c <sl_wfx_set_access_mode_message>
 8006f82:	61f8      	str	r0, [r7, #28]
  SL_WFX_ERROR_CHECK(result);
 8006f84:	69fb      	ldr	r3, [r7, #28]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	f040 8086 	bne.w	8007098 <sl_wfx_init+0x194>
#if (SL_WFX_DEBUG_MASK & SL_WFX_DEBUG_INIT)
  sl_wfx_host_log("--Message mode set--\r\n");
#endif

  /* Waiting for the startup indication from Wi-Fi chip, SL_WFX_STARTUP_IND_ID */
  result = sl_wfx_host_wait_for_confirmation(SL_WFX_STARTUP_IND_ID,
 8006f8c:	f107 0314 	add.w	r3, r7, #20
 8006f90:	461a      	mov	r2, r3
 8006f92:	f241 3188 	movw	r1, #5000	; 0x1388
 8006f96:	20e1      	movs	r0, #225	; 0xe1
 8006f98:	f001 f952 	bl	8008240 <sl_wfx_host_wait_for_confirmation>
 8006f9c:	61f8      	str	r0, [r7, #28]
                                             SL_WFX_DEFAULT_REQUEST_TIMEOUT_MS,
                                             (void **)&startup_info);
  SL_WFX_ERROR_CHECK(result);
 8006f9e:	69fb      	ldr	r3, [r7, #28]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d17b      	bne.n	800709c <sl_wfx_init+0x198>

  /* Store the firware version in the context */
  context->firmware_build = startup_info->body.firmware_build;
 8006fa4:	697b      	ldr	r3, [r7, #20]
 8006fa6:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  context->firmware_minor = startup_info->body.firmware_minor;
 8006fb0:	697b      	ldr	r3, [r7, #20]
 8006fb2:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
  context->firmware_major = startup_info->body.firmware_major;
 8006fbc:	697b      	ldr	r3, [r7, #20]
 8006fbe:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	f883 2202 	strb.w	r2, [r3, #514]	; 0x202

  /* Storing mac addresses from Wi-Fi chip in the context  */
  memcpy(&(context->mac_addr_0.octet),
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	f203 2016 	addw	r0, r3, #534	; 0x216
         startup_info->body.mac_addr[0],
 8006fce:	697b      	ldr	r3, [r7, #20]
 8006fd0:	3326      	adds	r3, #38	; 0x26
  memcpy(&(context->mac_addr_0.octet),
 8006fd2:	2206      	movs	r2, #6
 8006fd4:	4619      	mov	r1, r3
 8006fd6:	f012 fe9d 	bl	8019d14 <memcpy>
         sizeof(sl_wfx_mac_address_t));
  memcpy(&(context->mac_addr_1.octet),
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	f503 7007 	add.w	r0, r3, #540	; 0x21c
         startup_info->body.mac_addr[1],
 8006fe0:	697b      	ldr	r3, [r7, #20]
 8006fe2:	332c      	adds	r3, #44	; 0x2c
  memcpy(&(context->mac_addr_1.octet),
 8006fe4:	2206      	movs	r2, #6
 8006fe6:	4619      	mov	r1, r3
 8006fe8:	f012 fe94 	bl	8019d14 <memcpy>
         sizeof(sl_wfx_mac_address_t));

  /* Storing input buffer limit from Wi-Fi chip */
  sl_wfx_input_buffer_number = sl_wfx_htole16(startup_info->body.num_inp_ch_bufs);
 8006fec:	697b      	ldr	r3, [r7, #20]
 8006fee:	8c1b      	ldrh	r3, [r3, #32]
 8006ff0:	b29b      	uxth	r3, r3
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	f7ff ff6f 	bl	8006ed6 <uint16_identity>
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	461a      	mov	r2, r3
 8006ffc:	4b33      	ldr	r3, [pc, #204]	; (80070cc <sl_wfx_init+0x1c8>)
 8006ffe:	801a      	strh	r2, [r3, #0]

  /* Store the OPN */
  memcpy(context->wfx_opn, startup_info->body.opn, SL_WFX_OPN_SIZE);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	f503 7002 	add.w	r0, r3, #520	; 0x208
 8007006:	697b      	ldr	r3, [r7, #20]
 8007008:	330a      	adds	r3, #10
 800700a:	220e      	movs	r2, #14
 800700c:	4619      	mov	r1, r3
 800700e:	f012 fe81 	bl	8019d14 <memcpy>

  /* Set the wake up pin of the host */
  sl_wfx_host_set_wake_up_pin(1);
 8007012:	2001      	movs	r0, #1
 8007014:	f001 f8c2 	bl	800819c <sl_wfx_host_set_wake_up_pin>
        goto error_handler;
    }
  }
#endif //SL_WFX_USE_SECURE_LINK

  result = sl_wfx_host_get_pds_size(&pds_size);
 8007018:	f107 0312 	add.w	r3, r7, #18
 800701c:	4618      	mov	r0, r3
 800701e:	f001 f87d 	bl	800811c <sl_wfx_host_get_pds_size>
 8007022:	61f8      	str	r0, [r7, #28]
  SL_WFX_ERROR_CHECK(result);
 8007024:	69fb      	ldr	r3, [r7, #28]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d13a      	bne.n	80070a0 <sl_wfx_init+0x19c>
  /* Sending to Wi-Fi chip PDS configuration (Platform data set) */
  for (uint8_t a = 0; a < pds_size; a++) {
 800702a:	2300      	movs	r3, #0
 800702c:	76fb      	strb	r3, [r7, #27]
 800702e:	e01c      	b.n	800706a <sl_wfx_init+0x166>
    result = sl_wfx_host_get_pds_data(&pds_data, a);
 8007030:	7efb      	ldrb	r3, [r7, #27]
 8007032:	b29a      	uxth	r2, r3
 8007034:	f107 030c 	add.w	r3, r7, #12
 8007038:	4611      	mov	r1, r2
 800703a:	4618      	mov	r0, r3
 800703c:	f001 f842 	bl	80080c4 <sl_wfx_host_get_pds_data>
 8007040:	61f8      	str	r0, [r7, #28]
    SL_WFX_ERROR_CHECK(result);
 8007042:	69fb      	ldr	r3, [r7, #28]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d12d      	bne.n	80070a4 <sl_wfx_init+0x1a0>
    result = sl_wfx_send_configuration(pds_data, strlen(pds_data));
 8007048:	68fc      	ldr	r4, [r7, #12]
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	4618      	mov	r0, r3
 800704e:	f7f9 f8d1 	bl	80001f4 <strlen>
 8007052:	4603      	mov	r3, r0
 8007054:	4619      	mov	r1, r3
 8007056:	4620      	mov	r0, r4
 8007058:	f000 f96c 	bl	8007334 <sl_wfx_send_configuration>
 800705c:	61f8      	str	r0, [r7, #28]
    SL_WFX_ERROR_CHECK(result);
 800705e:	69fb      	ldr	r3, [r7, #28]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d121      	bne.n	80070a8 <sl_wfx_init+0x1a4>
  for (uint8_t a = 0; a < pds_size; a++) {
 8007064:	7efb      	ldrb	r3, [r7, #27]
 8007066:	3301      	adds	r3, #1
 8007068:	76fb      	strb	r3, [r7, #27]
 800706a:	7efb      	ldrb	r3, [r7, #27]
 800706c:	b29a      	uxth	r2, r3
 800706e:	8a7b      	ldrh	r3, [r7, #18]
 8007070:	429a      	cmp	r2, r3
 8007072:	d3dd      	bcc.n	8007030 <sl_wfx_init+0x12c>

#if (SL_WFX_DEBUG_MASK & SL_WFX_DEBUG_INIT)
  sl_wfx_host_log("--PDS configured--\r\n");
#endif

  sl_wfx_context->state = SL_WFX_STARTED;
 8007074:	4b14      	ldr	r3, [pc, #80]	; (80070c8 <sl_wfx_init+0x1c4>)
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	2201      	movs	r2, #1
 800707a:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222
 800707e:	e014      	b.n	80070aa <sl_wfx_init+0x1a6>
  SL_WFX_ERROR_CHECK(result);
 8007080:	bf00      	nop
 8007082:	e012      	b.n	80070aa <sl_wfx_init+0x1a6>
  SL_WFX_ERROR_CHECK(result);
 8007084:	bf00      	nop
 8007086:	e010      	b.n	80070aa <sl_wfx_init+0x1a6>
  SL_WFX_ERROR_CHECK(result);
 8007088:	bf00      	nop
 800708a:	e00e      	b.n	80070aa <sl_wfx_init+0x1a6>
  SL_WFX_ERROR_CHECK(result);
 800708c:	bf00      	nop
 800708e:	e00c      	b.n	80070aa <sl_wfx_init+0x1a6>
  SL_WFX_ERROR_CHECK(result);
 8007090:	bf00      	nop
 8007092:	e00a      	b.n	80070aa <sl_wfx_init+0x1a6>
  SL_WFX_ERROR_CHECK(result);
 8007094:	bf00      	nop
 8007096:	e008      	b.n	80070aa <sl_wfx_init+0x1a6>
  SL_WFX_ERROR_CHECK(result);
 8007098:	bf00      	nop
 800709a:	e006      	b.n	80070aa <sl_wfx_init+0x1a6>
  SL_WFX_ERROR_CHECK(result);
 800709c:	bf00      	nop
 800709e:	e004      	b.n	80070aa <sl_wfx_init+0x1a6>
  SL_WFX_ERROR_CHECK(result);
 80070a0:	bf00      	nop
 80070a2:	e002      	b.n	80070aa <sl_wfx_init+0x1a6>
    SL_WFX_ERROR_CHECK(result);
 80070a4:	bf00      	nop
 80070a6:	e000      	b.n	80070aa <sl_wfx_init+0x1a6>
    SL_WFX_ERROR_CHECK(result);
 80070a8:	bf00      	nop

  error_handler:
  if (result != SL_STATUS_OK) {
 80070aa:	69fb      	ldr	r3, [r7, #28]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d005      	beq.n	80070bc <sl_wfx_init+0x1b8>
    sl_wfx_disable_irq( );
 80070b0:	f000 fb1d 	bl	80076ee <sl_wfx_disable_irq>
    sl_wfx_deinit_bus();
 80070b4:	f7ff ff08 	bl	8006ec8 <sl_wfx_deinit_bus>
    sl_wfx_host_deinit();
 80070b8:	f001 f850 	bl	800815c <sl_wfx_host_deinit>
  }

  return result;
 80070bc:	69fb      	ldr	r3, [r7, #28]
}
 80070be:	4618      	mov	r0, r3
 80070c0:	3724      	adds	r7, #36	; 0x24
 80070c2:	46bd      	mov	sp, r7
 80070c4:	bd90      	pop	{r4, r7, pc}
 80070c6:	bf00      	nop
 80070c8:	200007e8 	.word	0x200007e8
 80070cc:	200007ee 	.word	0x200007ee

080070d0 <sl_wfx_send_join_command>:
                                     uint16_t        management_frame_protection,
                                     const uint8_t  *passkey,
                                     uint16_t        passkey_length,
                                     const uint8_t  *ie_data,
                                     uint16_t        ie_data_length)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b08a      	sub	sp, #40	; 0x28
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	60f8      	str	r0, [r7, #12]
 80070d8:	60b9      	str	r1, [r7, #8]
 80070da:	607a      	str	r2, [r7, #4]
 80070dc:	807b      	strh	r3, [r7, #2]
  sl_status_t               result           = SL_STATUS_OK;
 80070de:	2300      	movs	r3, #0
 80070e0:	627b      	str	r3, [r7, #36]	; 0x24
  sl_wfx_generic_message_t  *frame           = NULL;
 80070e2:	2300      	movs	r3, #0
 80070e4:	61bb      	str	r3, [r7, #24]
  sl_wfx_connect_cnf_t      *reply           = NULL;
 80070e6:	2300      	movs	r3, #0
 80070e8:	617b      	str	r3, [r7, #20]
  sl_wfx_connect_req_body_t *connect_request = NULL;
 80070ea:	2300      	movs	r3, #0
 80070ec:	623b      	str	r3, [r7, #32]
  uint32_t request_length  = SL_WFX_ROUND_UP_EVEN(sizeof(sl_wfx_connect_req_t) + ie_data_length);
 80070ee:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80070f2:	3301      	adds	r3, #1
 80070f4:	f023 0301 	bic.w	r3, r3, #1
 80070f8:	3378      	adds	r3, #120	; 0x78
 80070fa:	61fb      	str	r3, [r7, #28]

  result = sl_wfx_allocate_command_buffer(&frame, SL_WFX_CONNECT_REQ_ID, SL_WFX_CONTROL_BUFFER, request_length);
 80070fc:	f107 0018 	add.w	r0, r7, #24
 8007100:	69fb      	ldr	r3, [r7, #28]
 8007102:	2202      	movs	r2, #2
 8007104:	2143      	movs	r1, #67	; 0x43
 8007106:	f000 ff45 	bl	8007f94 <sl_wfx_allocate_command_buffer>
 800710a:	6278      	str	r0, [r7, #36]	; 0x24
  SL_WFX_ERROR_CHECK(result);
 800710c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800710e:	2b00      	cmp	r3, #0
 8007110:	f040 8093 	bne.w	800723a <sl_wfx_send_join_command+0x16a>

  frame->header.info = SL_WFX_STA_INTERFACE << SL_WFX_MSG_INFO_INTERFACE_OFFSET;
 8007114:	69bb      	ldr	r3, [r7, #24]
 8007116:	2200      	movs	r2, #0
 8007118:	70da      	strb	r2, [r3, #3]

  connect_request                        = (sl_wfx_connect_req_body_t *)&frame->body;
 800711a:	69bb      	ldr	r3, [r7, #24]
 800711c:	3304      	adds	r3, #4
 800711e:	623b      	str	r3, [r7, #32]
  connect_request->ssid_def.ssid_length  = sl_wfx_htole32(ssid_length);
 8007120:	68b8      	ldr	r0, [r7, #8]
 8007122:	f7ff fee4 	bl	8006eee <uint32_identity>
 8007126:	4602      	mov	r2, r0
 8007128:	6a3b      	ldr	r3, [r7, #32]
 800712a:	601a      	str	r2, [r3, #0]
  connect_request->channel               = sl_wfx_htole16(channel);
 800712c:	887b      	ldrh	r3, [r7, #2]
 800712e:	4618      	mov	r0, r3
 8007130:	f7ff fed1 	bl	8006ed6 <uint16_identity>
 8007134:	4603      	mov	r3, r0
 8007136:	461a      	mov	r2, r3
 8007138:	6a3b      	ldr	r3, [r7, #32]
 800713a:	855a      	strh	r2, [r3, #42]	; 0x2a
  connect_request->security_mode         = security_mode;
 800713c:	6a3b      	ldr	r3, [r7, #32]
 800713e:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8007142:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  connect_request->prevent_roaming       = prevent_roaming;
 8007146:	6a3b      	ldr	r3, [r7, #32]
 8007148:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 800714c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  if (security_mode == WFM_SECURITY_MODE_WPA3_SAE) {
 8007150:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8007154:	2b06      	cmp	r3, #6
 8007156:	d109      	bne.n	800716c <sl_wfx_send_join_command+0x9c>
    connect_request->mgmt_frame_protection = WFM_MGMT_FRAME_PROTECTION_MANDATORY;
 8007158:	6a3b      	ldr	r3, [r7, #32]
 800715a:	2200      	movs	r2, #0
 800715c:	f042 0202 	orr.w	r2, r2, #2
 8007160:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 8007164:	2200      	movs	r2, #0
 8007166:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
 800716a:	e007      	b.n	800717c <sl_wfx_send_join_command+0xac>
  } else {
    connect_request->mgmt_frame_protection = sl_wfx_htole16(management_frame_protection);
 800716c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800716e:	4618      	mov	r0, r3
 8007170:	f7ff feb1 	bl	8006ed6 <uint16_identity>
 8007174:	4603      	mov	r3, r0
 8007176:	461a      	mov	r2, r3
 8007178:	6a3b      	ldr	r3, [r7, #32]
 800717a:	85da      	strh	r2, [r3, #46]	; 0x2e
  }
  connect_request->password_length       = sl_wfx_htole16(passkey_length);
 800717c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007180:	4618      	mov	r0, r3
 8007182:	f7ff fea8 	bl	8006ed6 <uint16_identity>
 8007186:	4603      	mov	r3, r0
 8007188:	461a      	mov	r2, r3
 800718a:	6a3b      	ldr	r3, [r7, #32]
 800718c:	861a      	strh	r2, [r3, #48]	; 0x30
  connect_request->ie_data_length        = sl_wfx_htole16(ie_data_length);
 800718e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8007192:	4618      	mov	r0, r3
 8007194:	f7ff fe9f 	bl	8006ed6 <uint16_identity>
 8007198:	4603      	mov	r3, r0
 800719a:	461a      	mov	r2, r3
 800719c:	6a3b      	ldr	r3, [r7, #32]
 800719e:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
  memcpy(connect_request->ssid_def.ssid, ssid, ssid_length);
 80071a2:	6a3b      	ldr	r3, [r7, #32]
 80071a4:	3304      	adds	r3, #4
 80071a6:	68ba      	ldr	r2, [r7, #8]
 80071a8:	68f9      	ldr	r1, [r7, #12]
 80071aa:	4618      	mov	r0, r3
 80071ac:	f012 fdb2 	bl	8019d14 <memcpy>
  memcpy(connect_request->password, passkey, passkey_length);
 80071b0:	6a3b      	ldr	r3, [r7, #32]
 80071b2:	3332      	adds	r3, #50	; 0x32
 80071b4:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80071b8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80071ba:	4618      	mov	r0, r3
 80071bc:	f012 fdaa 	bl	8019d14 <memcpy>
  memcpy(connect_request + 1, ie_data, ie_data_length);
 80071c0:	6a3b      	ldr	r3, [r7, #32]
 80071c2:	3374      	adds	r3, #116	; 0x74
 80071c4:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80071c8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80071ca:	4618      	mov	r0, r3
 80071cc:	f012 fda2 	bl	8019d14 <memcpy>
  if (bssid != NULL) {
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d007      	beq.n	80071e6 <sl_wfx_send_join_command+0x116>
    memcpy(connect_request->bssid, &bssid->octet, SL_WFX_BSSID_SIZE);
 80071d6:	6a3b      	ldr	r3, [r7, #32]
 80071d8:	3324      	adds	r3, #36	; 0x24
 80071da:	6879      	ldr	r1, [r7, #4]
 80071dc:	2206      	movs	r2, #6
 80071de:	4618      	mov	r0, r3
 80071e0:	f012 fd98 	bl	8019d14 <memcpy>
 80071e4:	e006      	b.n	80071f4 <sl_wfx_send_join_command+0x124>
  } else {
    memset(connect_request->bssid, 0xFF, SL_WFX_BSSID_SIZE);
 80071e6:	6a3b      	ldr	r3, [r7, #32]
 80071e8:	3324      	adds	r3, #36	; 0x24
 80071ea:	2206      	movs	r2, #6
 80071ec:	21ff      	movs	r1, #255	; 0xff
 80071ee:	4618      	mov	r0, r3
 80071f0:	f012 fd9e 	bl	8019d30 <memset>
  }

  result = sl_wfx_send_request(SL_WFX_CONNECT_REQ_ID, frame, request_length);
 80071f4:	69bb      	ldr	r3, [r7, #24]
 80071f6:	69fa      	ldr	r2, [r7, #28]
 80071f8:	b292      	uxth	r2, r2
 80071fa:	4619      	mov	r1, r3
 80071fc:	2043      	movs	r0, #67	; 0x43
 80071fe:	f000 f917 	bl	8007430 <sl_wfx_send_request>
 8007202:	6278      	str	r0, [r7, #36]	; 0x24
  SL_WFX_ERROR_CHECK(result);
 8007204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007206:	2b00      	cmp	r3, #0
 8007208:	d119      	bne.n	800723e <sl_wfx_send_join_command+0x16e>

  result = sl_wfx_host_wait_for_confirmation(SL_WFX_CONNECT_REQ_ID, SL_WFX_DEFAULT_REQUEST_TIMEOUT_MS, (void **)&reply);
 800720a:	f107 0314 	add.w	r3, r7, #20
 800720e:	461a      	mov	r2, r3
 8007210:	f241 3188 	movw	r1, #5000	; 0x1388
 8007214:	2043      	movs	r0, #67	; 0x43
 8007216:	f001 f813 	bl	8008240 <sl_wfx_host_wait_for_confirmation>
 800721a:	6278      	str	r0, [r7, #36]	; 0x24
  SL_WFX_ERROR_CHECK(result);
 800721c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800721e:	2b00      	cmp	r3, #0
 8007220:	d10f      	bne.n	8007242 <sl_wfx_send_join_command+0x172>

  result = sl_wfx_get_status_code(sl_wfx_htole32(reply->body.status), SL_WFX_CONNECT_REQ_ID);
 8007222:	697b      	ldr	r3, [r7, #20]
 8007224:	685b      	ldr	r3, [r3, #4]
 8007226:	4618      	mov	r0, r3
 8007228:	f7ff fe61 	bl	8006eee <uint32_identity>
 800722c:	4603      	mov	r3, r0
 800722e:	2143      	movs	r1, #67	; 0x43
 8007230:	4618      	mov	r0, r3
 8007232:	f000 fdcf 	bl	8007dd4 <sl_wfx_get_status_code>
 8007236:	6278      	str	r0, [r7, #36]	; 0x24
 8007238:	e004      	b.n	8007244 <sl_wfx_send_join_command+0x174>
  SL_WFX_ERROR_CHECK(result);
 800723a:	bf00      	nop
 800723c:	e002      	b.n	8007244 <sl_wfx_send_join_command+0x174>
  SL_WFX_ERROR_CHECK(result);
 800723e:	bf00      	nop
 8007240:	e000      	b.n	8007244 <sl_wfx_send_join_command+0x174>
  SL_WFX_ERROR_CHECK(result);
 8007242:	bf00      	nop

  error_handler:
  if (result == SL_STATUS_TIMEOUT) {
 8007244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007246:	2b07      	cmp	r3, #7
 8007248:	d10d      	bne.n	8007266 <sl_wfx_send_join_command+0x196>
    if (sl_wfx_context->used_buffers > 0) {
 800724a:	4b0e      	ldr	r3, [pc, #56]	; (8007284 <sl_wfx_send_join_command+0x1b4>)
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
 8007252:	2b00      	cmp	r3, #0
 8007254:	d007      	beq.n	8007266 <sl_wfx_send_join_command+0x196>
      sl_wfx_context->used_buffers--;
 8007256:	4b0b      	ldr	r3, [pc, #44]	; (8007284 <sl_wfx_send_join_command+0x1b4>)
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 800725e:	3a01      	subs	r2, #1
 8007260:	b292      	uxth	r2, r2
 8007262:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
    }
  }
  if (frame != NULL) {
 8007266:	69bb      	ldr	r3, [r7, #24]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d005      	beq.n	8007278 <sl_wfx_send_join_command+0x1a8>
    sl_wfx_free_command_buffer(frame, SL_WFX_CONNECT_REQ_ID, SL_WFX_CONTROL_BUFFER);
 800726c:	69bb      	ldr	r3, [r7, #24]
 800726e:	2202      	movs	r2, #2
 8007270:	2143      	movs	r1, #67	; 0x43
 8007272:	4618      	mov	r0, r3
 8007274:	f000 feae 	bl	8007fd4 <sl_wfx_free_command_buffer>
  }
  return result;
 8007278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800727a:	4618      	mov	r0, r3
 800727c:	3728      	adds	r7, #40	; 0x28
 800727e:	46bd      	mov	sp, r7
 8007280:	bd80      	pop	{r7, pc}
 8007282:	bf00      	nop
 8007284:	200007e8 	.word	0x200007e8

08007288 <sl_wfx_send_ethernet_frame>:
 *****************************************************************************/
sl_status_t sl_wfx_send_ethernet_frame(sl_wfx_send_frame_req_t *frame,
                                       uint32_t data_length,
                                       sl_wfx_interface_t interface,
                                       uint8_t priority)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b086      	sub	sp, #24
 800728c:	af00      	add	r7, sp, #0
 800728e:	60f8      	str	r0, [r7, #12]
 8007290:	60b9      	str	r1, [r7, #8]
 8007292:	4611      	mov	r1, r2
 8007294:	461a      	mov	r2, r3
 8007296:	460b      	mov	r3, r1
 8007298:	71fb      	strb	r3, [r7, #7]
 800729a:	4613      	mov	r3, r2
 800729c:	71bb      	strb	r3, [r7, #6]
  sl_status_t result;
  uint32_t request_length = SL_WFX_ROUND_UP_EVEN(sizeof(sl_wfx_send_frame_req_t) + data_length);
 800729e:	68bb      	ldr	r3, [r7, #8]
 80072a0:	3301      	adds	r3, #1
 80072a2:	f023 0301 	bic.w	r3, r3, #1
 80072a6:	330c      	adds	r3, #12
 80072a8:	617b      	str	r3, [r7, #20]

  sl_wfx_context->data_frame_id++;
 80072aa:	4b21      	ldr	r3, [pc, #132]	; (8007330 <sl_wfx_send_ethernet_frame+0xa8>)
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f8b3 2204 	ldrh.w	r2, [r3, #516]	; 0x204
 80072b2:	3201      	adds	r2, #1
 80072b4:	b292      	uxth	r2, r2
 80072b6:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204

  frame->header.length           = sl_wfx_htole16(data_length + sizeof(sl_wfx_send_frame_req_t));
 80072ba:	68bb      	ldr	r3, [r7, #8]
 80072bc:	b29b      	uxth	r3, r3
 80072be:	330c      	adds	r3, #12
 80072c0:	b29b      	uxth	r3, r3
 80072c2:	4618      	mov	r0, r3
 80072c4:	f7ff fe07 	bl	8006ed6 <uint16_identity>
 80072c8:	4603      	mov	r3, r0
 80072ca:	461a      	mov	r2, r3
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	801a      	strh	r2, [r3, #0]
  frame->header.id               = SL_WFX_SEND_FRAME_REQ_ID;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	224a      	movs	r2, #74	; 0x4a
 80072d4:	709a      	strb	r2, [r3, #2]
  frame->header.info             = (interface << SL_WFX_MSG_INFO_INTERFACE_OFFSET) & SL_WFX_MSG_INFO_INTERFACE_MASK;
 80072d6:	79fb      	ldrb	r3, [r7, #7]
 80072d8:	005b      	lsls	r3, r3, #1
 80072da:	b2db      	uxtb	r3, r3
 80072dc:	f003 0306 	and.w	r3, r3, #6
 80072e0:	b2da      	uxtb	r2, r3
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	70da      	strb	r2, [r3, #3]
  frame->body.frame_type         = WFM_FRAME_TYPE_DATA;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	2208      	movs	r2, #8
 80072ea:	711a      	strb	r2, [r3, #4]
  frame->body.priority           = priority;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	79ba      	ldrb	r2, [r7, #6]
 80072f0:	715a      	strb	r2, [r3, #5]
  frame->body.packet_id          = sl_wfx_htole16(sl_wfx_context->data_frame_id);
 80072f2:	4b0f      	ldr	r3, [pc, #60]	; (8007330 <sl_wfx_send_ethernet_frame+0xa8>)
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
 80072fa:	4618      	mov	r0, r3
 80072fc:	f7ff fdeb 	bl	8006ed6 <uint16_identity>
 8007300:	4603      	mov	r3, r0
 8007302:	461a      	mov	r2, r3
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	80da      	strh	r2, [r3, #6]
  frame->body.packet_data_length = sl_wfx_htole32(data_length);
 8007308:	68b8      	ldr	r0, [r7, #8]
 800730a:	f7ff fdf0 	bl	8006eee <uint32_identity>
 800730e:	4602      	mov	r2, r0
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	609a      	str	r2, [r3, #8]

  result = sl_wfx_send_request(SL_WFX_SEND_FRAME_REQ_ID, (sl_wfx_generic_message_t*) frame, request_length);
 8007314:	697b      	ldr	r3, [r7, #20]
 8007316:	b29b      	uxth	r3, r3
 8007318:	461a      	mov	r2, r3
 800731a:	68f9      	ldr	r1, [r7, #12]
 800731c:	204a      	movs	r0, #74	; 0x4a
 800731e:	f000 f887 	bl	8007430 <sl_wfx_send_request>
 8007322:	6138      	str	r0, [r7, #16]

  return result;
 8007324:	693b      	ldr	r3, [r7, #16]
}
 8007326:	4618      	mov	r0, r3
 8007328:	3718      	adds	r7, #24
 800732a:	46bd      	mov	sp, r7
 800732c:	bd80      	pop	{r7, pc}
 800732e:	bf00      	nop
 8007330:	200007e8 	.word	0x200007e8

08007334 <sl_wfx_send_configuration>:
 * SL_STATUS_FAIL otherwise
 *
 * @note The PDS (Platform Data Set) file contains the WF200 settings
 *****************************************************************************/
sl_status_t sl_wfx_send_configuration(const char *pds_data, uint32_t pds_data_length)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b088      	sub	sp, #32
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
 800733c:	6039      	str	r1, [r7, #0]
  sl_status_t                      result         = SL_STATUS_OK;
 800733e:	2300      	movs	r3, #0
 8007340:	61fb      	str	r3, [r7, #28]
  sl_wfx_generic_message_t        *frame          = NULL;
 8007342:	2300      	movs	r3, #0
 8007344:	613b      	str	r3, [r7, #16]
  sl_wfx_configuration_cnf_t      *reply          = NULL;
 8007346:	2300      	movs	r3, #0
 8007348:	60fb      	str	r3, [r7, #12]
  sl_wfx_configuration_req_body_t *config_request = NULL;
 800734a:	2300      	movs	r3, #0
 800734c:	61bb      	str	r3, [r7, #24]
  uint32_t request_length = SL_WFX_ROUND_UP_EVEN(sizeof(sl_wfx_configuration_req_t) + pds_data_length);
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	3301      	adds	r3, #1
 8007352:	f023 0301 	bic.w	r3, r3, #1
 8007356:	3306      	adds	r3, #6
 8007358:	617b      	str	r3, [r7, #20]

  result = sl_wfx_allocate_command_buffer(&frame, SL_WFX_CONFIGURATION_REQ_ID, SL_WFX_CONTROL_BUFFER, request_length);
 800735a:	f107 0010 	add.w	r0, r7, #16
 800735e:	697b      	ldr	r3, [r7, #20]
 8007360:	2202      	movs	r2, #2
 8007362:	2109      	movs	r1, #9
 8007364:	f000 fe16 	bl	8007f94 <sl_wfx_allocate_command_buffer>
 8007368:	61f8      	str	r0, [r7, #28]
  SL_WFX_ERROR_CHECK(result);
 800736a:	69fb      	ldr	r3, [r7, #28]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d138      	bne.n	80073e2 <sl_wfx_send_configuration+0xae>

  frame->header.info = SL_WFX_STA_INTERFACE << SL_WFX_MSG_INFO_INTERFACE_OFFSET;
 8007370:	693b      	ldr	r3, [r7, #16]
 8007372:	2200      	movs	r2, #0
 8007374:	70da      	strb	r2, [r3, #3]

  config_request = (sl_wfx_configuration_req_body_t *)&frame->body;
 8007376:	693b      	ldr	r3, [r7, #16]
 8007378:	3304      	adds	r3, #4
 800737a:	61bb      	str	r3, [r7, #24]
  config_request->length = sl_wfx_htole16(pds_data_length);
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	b29b      	uxth	r3, r3
 8007380:	4618      	mov	r0, r3
 8007382:	f7ff fda8 	bl	8006ed6 <uint16_identity>
 8007386:	4603      	mov	r3, r0
 8007388:	461a      	mov	r2, r3
 800738a:	69bb      	ldr	r3, [r7, #24]
 800738c:	801a      	strh	r2, [r3, #0]

  memcpy(config_request->pds_data, pds_data, pds_data_length);
 800738e:	69bb      	ldr	r3, [r7, #24]
 8007390:	3302      	adds	r3, #2
 8007392:	683a      	ldr	r2, [r7, #0]
 8007394:	6879      	ldr	r1, [r7, #4]
 8007396:	4618      	mov	r0, r3
 8007398:	f012 fcbc 	bl	8019d14 <memcpy>

  result = sl_wfx_send_request(SL_WFX_CONFIGURATION_REQ_ID, frame, request_length);
 800739c:	693b      	ldr	r3, [r7, #16]
 800739e:	697a      	ldr	r2, [r7, #20]
 80073a0:	b292      	uxth	r2, r2
 80073a2:	4619      	mov	r1, r3
 80073a4:	2009      	movs	r0, #9
 80073a6:	f000 f843 	bl	8007430 <sl_wfx_send_request>
 80073aa:	61f8      	str	r0, [r7, #28]
  SL_WFX_ERROR_CHECK(result);
 80073ac:	69fb      	ldr	r3, [r7, #28]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d119      	bne.n	80073e6 <sl_wfx_send_configuration+0xb2>

  result = sl_wfx_host_wait_for_confirmation(SL_WFX_CONFIGURATION_REQ_ID, SL_WFX_DEFAULT_REQUEST_TIMEOUT_MS, (void **)&reply);
 80073b2:	f107 030c 	add.w	r3, r7, #12
 80073b6:	461a      	mov	r2, r3
 80073b8:	f241 3188 	movw	r1, #5000	; 0x1388
 80073bc:	2009      	movs	r0, #9
 80073be:	f000 ff3f 	bl	8008240 <sl_wfx_host_wait_for_confirmation>
 80073c2:	61f8      	str	r0, [r7, #28]
  SL_WFX_ERROR_CHECK(result);
 80073c4:	69fb      	ldr	r3, [r7, #28]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d10f      	bne.n	80073ea <sl_wfx_send_configuration+0xb6>

  result = sl_wfx_get_status_code(sl_wfx_htole32(reply->body.status), SL_WFX_CONFIGURATION_REQ_ID);
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	685b      	ldr	r3, [r3, #4]
 80073ce:	4618      	mov	r0, r3
 80073d0:	f7ff fd8d 	bl	8006eee <uint32_identity>
 80073d4:	4603      	mov	r3, r0
 80073d6:	2109      	movs	r1, #9
 80073d8:	4618      	mov	r0, r3
 80073da:	f000 fcfb 	bl	8007dd4 <sl_wfx_get_status_code>
 80073de:	61f8      	str	r0, [r7, #28]
 80073e0:	e004      	b.n	80073ec <sl_wfx_send_configuration+0xb8>
  SL_WFX_ERROR_CHECK(result);
 80073e2:	bf00      	nop
 80073e4:	e002      	b.n	80073ec <sl_wfx_send_configuration+0xb8>
  SL_WFX_ERROR_CHECK(result);
 80073e6:	bf00      	nop
 80073e8:	e000      	b.n	80073ec <sl_wfx_send_configuration+0xb8>
  SL_WFX_ERROR_CHECK(result);
 80073ea:	bf00      	nop

  error_handler:
  if (result == SL_STATUS_TIMEOUT) {
 80073ec:	69fb      	ldr	r3, [r7, #28]
 80073ee:	2b07      	cmp	r3, #7
 80073f0:	d10d      	bne.n	800740e <sl_wfx_send_configuration+0xda>
    if (sl_wfx_context->used_buffers > 0) {
 80073f2:	4b0e      	ldr	r3, [pc, #56]	; (800742c <sl_wfx_send_configuration+0xf8>)
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d007      	beq.n	800740e <sl_wfx_send_configuration+0xda>
      sl_wfx_context->used_buffers--;
 80073fe:	4b0b      	ldr	r3, [pc, #44]	; (800742c <sl_wfx_send_configuration+0xf8>)
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 8007406:	3a01      	subs	r2, #1
 8007408:	b292      	uxth	r2, r2
 800740a:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
    }
  }
  if (frame != NULL) {
 800740e:	693b      	ldr	r3, [r7, #16]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d005      	beq.n	8007420 <sl_wfx_send_configuration+0xec>
    sl_wfx_free_command_buffer(frame, SL_WFX_CONFIGURATION_REQ_ID, SL_WFX_CONTROL_BUFFER);
 8007414:	693b      	ldr	r3, [r7, #16]
 8007416:	2202      	movs	r2, #2
 8007418:	2109      	movs	r1, #9
 800741a:	4618      	mov	r0, r3
 800741c:	f000 fdda 	bl	8007fd4 <sl_wfx_free_command_buffer>
  }
  return result;
 8007420:	69fb      	ldr	r3, [r7, #28]
}
 8007422:	4618      	mov	r0, r3
 8007424:	3720      	adds	r7, #32
 8007426:	46bd      	mov	sp, r7
 8007428:	bd80      	pop	{r7, pc}
 800742a:	bf00      	nop
 800742c:	200007e8 	.word	0x200007e8

08007430 <sl_wfx_send_request>:
 * @returns SL_STATUS_OK if the command is sent correctly,
 * SL_STATUS_WOULD_OVERFLOW if the HIF queue is full,
 * SL_STATUS_FAIL otherwise
 *****************************************************************************/
sl_status_t sl_wfx_send_request(uint8_t command_id, sl_wfx_generic_message_t *request, uint16_t request_length)
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b084      	sub	sp, #16
 8007434:	af00      	add	r7, sp, #0
 8007436:	4603      	mov	r3, r0
 8007438:	6039      	str	r1, [r7, #0]
 800743a:	71fb      	strb	r3, [r7, #7]
 800743c:	4613      	mov	r3, r2
 800743e:	80bb      	strh	r3, [r7, #4]
  sl_status_t result;
  sl_status_t unlock_result;

  result = sl_wfx_host_lock();
 8007440:	f001 f8ae 	bl	80085a0 <sl_wfx_host_lock>
 8007444:	60f8      	str	r0, [r7, #12]

  if (result != SL_STATUS_OK) {
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d005      	beq.n	8007458 <sl_wfx_send_request+0x28>
#if (SL_WFX_DEBUG_MASK & SL_WFX_DEBUG_ERROR)
    sl_wfx_host_log("Send request lock error %u\n", result);
 800744c:	68f9      	ldr	r1, [r7, #12]
 800744e:	482b      	ldr	r0, [pc, #172]	; (80074fc <sl_wfx_send_request+0xcc>)
 8007450:	f001 f894 	bl	800857c <sl_wfx_host_log>
#endif
    //if driver lock is not successful, return
    return result;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	e04c      	b.n	80074f2 <sl_wfx_send_request+0xc2>
  }

  if (sl_wfx_context->used_buffers >= sl_wfx_input_buffer_number) {
 8007458:	4b29      	ldr	r3, [pc, #164]	; (8007500 <sl_wfx_send_request+0xd0>)
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 8007460:	4b28      	ldr	r3, [pc, #160]	; (8007504 <sl_wfx_send_request+0xd4>)
 8007462:	881b      	ldrh	r3, [r3, #0]
 8007464:	429a      	cmp	r2, r3
 8007466:	d304      	bcc.n	8007472 <sl_wfx_send_request+0x42>
    result = SL_STATUS_WOULD_OVERFLOW;
 8007468:	231d      	movs	r3, #29
 800746a:	60fb      	str	r3, [r7, #12]
    SL_WFX_ERROR_CHECK(result);
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d12a      	bne.n	80074c8 <sl_wfx_send_request+0x98>
  }

  // Write the buffer header
  request->header.id     = command_id;
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	79fa      	ldrb	r2, [r7, #7]
 8007476:	709a      	strb	r2, [r3, #2]
  request->header.length = sl_wfx_htole16(request_length);
 8007478:	88bb      	ldrh	r3, [r7, #4]
 800747a:	4618      	mov	r0, r3
 800747c:	f7ff fd2b 	bl	8006ed6 <uint16_identity>
 8007480:	4603      	mov	r3, r0
 8007482:	461a      	mov	r2, r3
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	801a      	strh	r2, [r3, #0]
#ifdef SL_WFX_USE_SECURE_LINK
  result = sl_wfx_secure_link_send(command_id, &request, &request_length);
  SL_WFX_ERROR_CHECK(result);
#endif //SL_WFX_USE_SECURE_LINK

  if (command_id != SL_WFX_SEND_FRAME_REQ_ID
 8007488:	79fb      	ldrb	r3, [r7, #7]
 800748a:	2b4a      	cmp	r3, #74	; 0x4a
 800748c:	d00a      	beq.n	80074a4 <sl_wfx_send_request+0x74>
      && command_id != SL_WFX_SHUT_DOWN_REQ_ID) {
 800748e:	79fb      	ldrb	r3, [r7, #7]
 8007490:	2b32      	cmp	r3, #50	; 0x32
 8007492:	d007      	beq.n	80074a4 <sl_wfx_send_request+0x74>
    result = sl_wfx_host_setup_waited_event(command_id);
 8007494:	79fb      	ldrb	r3, [r7, #7]
 8007496:	4618      	mov	r0, r3
 8007498:	f000 fec0 	bl	800821c <sl_wfx_host_setup_waited_event>
 800749c:	60f8      	str	r0, [r7, #12]
    SL_WFX_ERROR_CHECK(result);
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d113      	bne.n	80074cc <sl_wfx_send_request+0x9c>
  }

  result = sl_wfx_host_transmit_frame(request, request_length);
 80074a4:	88bb      	ldrh	r3, [r7, #4]
 80074a6:	4619      	mov	r1, r3
 80074a8:	6838      	ldr	r0, [r7, #0]
 80074aa:	f001 f859 	bl	8008560 <sl_wfx_host_transmit_frame>
 80074ae:	60f8      	str	r0, [r7, #12]
  SL_WFX_ERROR_CHECK(result);
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d10c      	bne.n	80074d0 <sl_wfx_send_request+0xa0>

  sl_wfx_context->used_buffers++;
 80074b6:	4b12      	ldr	r3, [pc, #72]	; (8007500 <sl_wfx_send_request+0xd0>)
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 80074be:	3201      	adds	r2, #1
 80074c0:	b292      	uxth	r2, r2
 80074c2:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
 80074c6:	e004      	b.n	80074d2 <sl_wfx_send_request+0xa2>
    SL_WFX_ERROR_CHECK(result);
 80074c8:	bf00      	nop
 80074ca:	e002      	b.n	80074d2 <sl_wfx_send_request+0xa2>
    SL_WFX_ERROR_CHECK(result);
 80074cc:	bf00      	nop
 80074ce:	e000      	b.n	80074d2 <sl_wfx_send_request+0xa2>
  SL_WFX_ERROR_CHECK(result);
 80074d0:	bf00      	nop

  error_handler:
  unlock_result = sl_wfx_host_unlock();
 80074d2:	f001 f885 	bl	80085e0 <sl_wfx_host_unlock>
 80074d6:	60b8      	str	r0, [r7, #8]
  if (unlock_result != SL_STATUS_OK) {
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d001      	beq.n	80074e2 <sl_wfx_send_request+0xb2>
    result = unlock_result;
 80074de:	68bb      	ldr	r3, [r7, #8]
 80074e0:	60fb      	str	r3, [r7, #12]
  }

#if (SL_WFX_DEBUG_MASK & SL_WFX_DEBUG_ERROR)
  if (result != SL_STATUS_OK) {
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d003      	beq.n	80074f0 <sl_wfx_send_request+0xc0>
    sl_wfx_host_log("Send request error %u\r\n", result);
 80074e8:	68f9      	ldr	r1, [r7, #12]
 80074ea:	4807      	ldr	r0, [pc, #28]	; (8007508 <sl_wfx_send_request+0xd8>)
 80074ec:	f001 f846 	bl	800857c <sl_wfx_host_log>
  }
#endif
  return result;
 80074f0:	68fb      	ldr	r3, [r7, #12]
}
 80074f2:	4618      	mov	r0, r3
 80074f4:	3710      	adds	r7, #16
 80074f6:	46bd      	mov	sp, r7
 80074f8:	bd80      	pop	{r7, pc}
 80074fa:	bf00      	nop
 80074fc:	0801b448 	.word	0x0801b448
 8007500:	200007e8 	.word	0x200007e8
 8007504:	200007ee 	.word	0x200007ee
 8007508:	0801b464 	.word	0x0801b464

0800750c <sl_wfx_receive_frame>:
 * @returns SL_STATUS_OK if the frame has been received correctly,
 * SL_STATUS_WIFI_NO_PACKET_TO_RECEIVE if no frame are pending inside the Wi-Fi chip
 * SL_STATUS_FAIL otherwise
 *****************************************************************************/
sl_status_t sl_wfx_receive_frame(uint16_t *ctrl_reg)
{
 800750c:	b590      	push	{r4, r7, lr}
 800750e:	b08b      	sub	sp, #44	; 0x2c
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
  sl_status_t               result;
  sl_status_t               unlock_result;
  sl_wfx_generic_message_t *network_rx_buffer = NULL;
 8007514:	2300      	movs	r3, #0
 8007516:	60fb      	str	r3, [r7, #12]
  sl_wfx_received_message_type_t message_type;
  sl_wfx_buffer_type_t      buffer_type = SL_WFX_RX_FRAME_BUFFER;
 8007518:	2301      	movs	r3, #1
 800751a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t                  read_length, frame_size;

  result = sl_wfx_host_lock();
 800751e:	f001 f83f 	bl	80085a0 <sl_wfx_host_lock>
 8007522:	6278      	str	r0, [r7, #36]	; 0x24

  if (result != SL_STATUS_OK) {
 8007524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007526:	2b00      	cmp	r3, #0
 8007528:	d005      	beq.n	8007536 <sl_wfx_receive_frame+0x2a>
#if (SL_WFX_DEBUG_MASK & SL_WFX_DEBUG_ERROR)
    sl_wfx_host_log("Receive frame lock error %u\n", result);
 800752a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800752c:	4859      	ldr	r0, [pc, #356]	; (8007694 <sl_wfx_receive_frame+0x188>)
 800752e:	f001 f825 	bl	800857c <sl_wfx_host_log>
#endif
    //if driver lock is not successful, return immediatly
    return result;
 8007532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007534:	e0aa      	b.n	800768c <sl_wfx_receive_frame+0x180>
  }

  frame_size = (*ctrl_reg & SL_WFX_CONT_NEXT_LEN_MASK) * 2;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	881b      	ldrh	r3, [r3, #0]
 800753a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800753e:	005b      	lsls	r3, r3, #1
 8007540:	61fb      	str	r3, [r7, #28]
  /* if frame_size is equal to 0, read the control register to know the frame size */
  if (frame_size == 0) {
 8007542:	69fb      	ldr	r3, [r7, #28]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d116      	bne.n	8007576 <sl_wfx_receive_frame+0x6a>
    /* Read the control register */
    result = sl_wfx_reg_read_16(SL_WFX_CONTROL_REG_ID, ctrl_reg);
 8007548:	6879      	ldr	r1, [r7, #4]
 800754a:	2001      	movs	r0, #1
 800754c:	f7ff fa49 	bl	80069e2 <sl_wfx_reg_read_16>
 8007550:	6278      	str	r0, [r7, #36]	; 0x24
    SL_WFX_ERROR_CHECK(result);
 8007552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007554:	2b00      	cmp	r3, #0
 8007556:	d176      	bne.n	8007646 <sl_wfx_receive_frame+0x13a>
    frame_size = (*ctrl_reg & SL_WFX_CONT_NEXT_LEN_MASK) * 2;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	881b      	ldrh	r3, [r3, #0]
 800755c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007560:	005b      	lsls	r3, r3, #1
 8007562:	61fb      	str	r3, [r7, #28]
    /* At this point, if frame_size is equal to zero, nothing to be read by the host */
    if (frame_size == 0) {
 8007564:	69fb      	ldr	r3, [r7, #28]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d105      	bne.n	8007576 <sl_wfx_receive_frame+0x6a>
      result = SL_STATUS_WIFI_NO_PACKET_TO_RECEIVE;
 800756a:	f640 3305 	movw	r3, #2821	; 0xb05
 800756e:	627b      	str	r3, [r7, #36]	; 0x24
      SL_WFX_ERROR_CHECK(result);
 8007570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007572:	2b00      	cmp	r3, #0
 8007574:	d169      	bne.n	800764a <sl_wfx_receive_frame+0x13e>
    }
  }

  /* retrieve the message type from the control register*/
  message_type = (sl_wfx_received_message_type_t)((*ctrl_reg & SL_WFX_CONT_FRAME_TYPE_INFO) >> SL_WFX_CONT_FRAME_TYPE_OFFSET);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	881b      	ldrh	r3, [r3, #0]
 800757a:	0b9b      	lsrs	r3, r3, #14
 800757c:	b29b      	uxth	r3, r3
 800757e:	76fb      	strb	r3, [r7, #27]

  /* critical : '+SL_WFX_CONT_REGISTER_SIZE' is to read the piggy-back value at
     the end of the control register. */
  read_length = frame_size + SL_WFX_CONT_REGISTER_SIZE;
 8007580:	69fb      	ldr	r3, [r7, #28]
 8007582:	3302      	adds	r3, #2
 8007584:	617b      	str	r3, [r7, #20]

  /* Depending on the message type provided by the control register, allocate a
     control buffer or a ethernet RX frame */
  buffer_type = (message_type == SL_WFX_ETHERNET_DATA_MESSAGE) ? SL_WFX_RX_FRAME_BUFFER : SL_WFX_CONTROL_BUFFER;
 8007586:	7efb      	ldrb	r3, [r7, #27]
 8007588:	2b03      	cmp	r3, #3
 800758a:	d101      	bne.n	8007590 <sl_wfx_receive_frame+0x84>
 800758c:	2301      	movs	r3, #1
 800758e:	e000      	b.n	8007592 <sl_wfx_receive_frame+0x86>
 8007590:	2302      	movs	r3, #2
 8007592:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  result = sl_wfx_host_allocate_buffer((void **)&network_rx_buffer,
                                       buffer_type,
                                       SL_WFX_ROUND_UP(read_length, SL_WFX_ROUND_UP_VALUE));
 8007596:	697b      	ldr	r3, [r7, #20]
 8007598:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  result = sl_wfx_host_allocate_buffer((void **)&network_rx_buffer,
 800759c:	2b00      	cmp	r3, #0
 800759e:	d004      	beq.n	80075aa <sl_wfx_receive_frame+0x9e>
                                       SL_WFX_ROUND_UP(read_length, SL_WFX_ROUND_UP_VALUE));
 80075a0:	697b      	ldr	r3, [r7, #20]
 80075a2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
  result = sl_wfx_host_allocate_buffer((void **)&network_rx_buffer,
 80075a6:	3340      	adds	r3, #64	; 0x40
 80075a8:	e000      	b.n	80075ac <sl_wfx_receive_frame+0xa0>
 80075aa:	697b      	ldr	r3, [r7, #20]
 80075ac:	f897 1023 	ldrb.w	r1, [r7, #35]	; 0x23
 80075b0:	f107 000c 	add.w	r0, r7, #12
 80075b4:	461a      	mov	r2, r3
 80075b6:	f000 ffb3 	bl	8008520 <sl_wfx_host_allocate_buffer>
 80075ba:	6278      	str	r0, [r7, #36]	; 0x24
  SL_WFX_ERROR_CHECK(result);
 80075bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d145      	bne.n	800764e <sl_wfx_receive_frame+0x142>

  memset(network_rx_buffer, 0, read_length);
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	697a      	ldr	r2, [r7, #20]
 80075c6:	2100      	movs	r1, #0
 80075c8:	4618      	mov	r0, r3
 80075ca:	f012 fbb1 	bl	8019d30 <memset>

  /* Read the frame from WF200 */
  result = sl_wfx_data_read(network_rx_buffer, read_length);
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	6979      	ldr	r1, [r7, #20]
 80075d2:	4618      	mov	r0, r3
 80075d4:	f7ff fa73 	bl	8006abe <sl_wfx_data_read>
 80075d8:	6278      	str	r0, [r7, #36]	; 0x24
  SL_WFX_ERROR_CHECK(result);
 80075da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d138      	bne.n	8007652 <sl_wfx_receive_frame+0x146>

  /* if the frame is a confirmation, decrease used_buffers value */
  if ((sl_wfx_context->used_buffers > 0)
 80075e0:	4b2d      	ldr	r3, [pc, #180]	; (8007698 <sl_wfx_receive_frame+0x18c>)
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d00c      	beq.n	8007606 <sl_wfx_receive_frame+0xfa>
      && (!(network_rx_buffer->header.id & SL_WFX_IND_BASE))) {
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	789b      	ldrb	r3, [r3, #2]
 80075f0:	b25b      	sxtb	r3, r3
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	db07      	blt.n	8007606 <sl_wfx_receive_frame+0xfa>
    sl_wfx_context->used_buffers--;
 80075f6:	4b28      	ldr	r3, [pc, #160]	; (8007698 <sl_wfx_receive_frame+0x18c>)
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 80075fe:	3a01      	subs	r2, #1
 8007600:	b292      	uxth	r2, r2
 8007602:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
  }

  /* read the control register value in the piggy back and pass it to the host */
  *ctrl_reg = sl_wfx_unpack_16bit_little_endian(((uint8_t *)network_rx_buffer) + frame_size);
 8007606:	68fa      	ldr	r2, [r7, #12]
 8007608:	69fb      	ldr	r3, [r7, #28]
 800760a:	4413      	add	r3, r2
 800760c:	781b      	ldrb	r3, [r3, #0]
 800760e:	b29a      	uxth	r2, r3
 8007610:	68f9      	ldr	r1, [r7, #12]
 8007612:	69fb      	ldr	r3, [r7, #28]
 8007614:	3301      	adds	r3, #1
 8007616:	440b      	add	r3, r1
 8007618:	781b      	ldrb	r3, [r3, #0]
 800761a:	b29b      	uxth	r3, r3
 800761c:	021b      	lsls	r3, r3, #8
 800761e:	b29b      	uxth	r3, r3
 8007620:	4313      	orrs	r3, r2
 8007622:	b29a      	uxth	r2, r3
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	801a      	strh	r2, [r3, #0]
#ifdef SL_WFX_USE_SECURE_LINK
  result = sl_wfx_secure_link_receive(&network_rx_buffer, read_length);
  SL_WFX_ERROR_CHECK(result);
#endif //SL_WFX_USE_SECURE_LINK

  network_rx_buffer->header.length = sl_wfx_htole16(network_rx_buffer->header.length);
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	881b      	ldrh	r3, [r3, #0]
 800762c:	b29b      	uxth	r3, r3
 800762e:	68fc      	ldr	r4, [r7, #12]
 8007630:	4618      	mov	r0, r3
 8007632:	f7ff fc50 	bl	8006ed6 <uint16_identity>
 8007636:	4603      	mov	r3, r0
 8007638:	8023      	strh	r3, [r4, #0]

  /* send the information to the host */
  result = sl_wfx_host_post_event(network_rx_buffer);
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	4618      	mov	r0, r3
 800763e:	f000 fe3f 	bl	80082c0 <sl_wfx_host_post_event>
 8007642:	6278      	str	r0, [r7, #36]	; 0x24
 8007644:	e006      	b.n	8007654 <sl_wfx_receive_frame+0x148>
    SL_WFX_ERROR_CHECK(result);
 8007646:	bf00      	nop
 8007648:	e004      	b.n	8007654 <sl_wfx_receive_frame+0x148>
      SL_WFX_ERROR_CHECK(result);
 800764a:	bf00      	nop
 800764c:	e002      	b.n	8007654 <sl_wfx_receive_frame+0x148>
  SL_WFX_ERROR_CHECK(result);
 800764e:	bf00      	nop
 8007650:	e000      	b.n	8007654 <sl_wfx_receive_frame+0x148>
  SL_WFX_ERROR_CHECK(result);
 8007652:	bf00      	nop

  error_handler:
  if (network_rx_buffer != NULL) {
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d008      	beq.n	800766c <sl_wfx_receive_frame+0x160>
    sl_wfx_free_command_buffer(network_rx_buffer, network_rx_buffer->header.id, buffer_type);
 800765a:	68f8      	ldr	r0, [r7, #12]
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	789b      	ldrb	r3, [r3, #2]
 8007660:	4619      	mov	r1, r3
 8007662:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007666:	461a      	mov	r2, r3
 8007668:	f000 fcb4 	bl	8007fd4 <sl_wfx_free_command_buffer>
  }
#ifdef SL_WFX_USE_SECURE_LINK
  result = sl_wfx_secure_link_renegotiate();
#endif //SL_WFX_USE_SECURE_LINK

  unlock_result = sl_wfx_host_unlock();
 800766c:	f000 ffb8 	bl	80085e0 <sl_wfx_host_unlock>
 8007670:	6138      	str	r0, [r7, #16]
  if (unlock_result != SL_STATUS_OK) {
 8007672:	693b      	ldr	r3, [r7, #16]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d001      	beq.n	800767c <sl_wfx_receive_frame+0x170>
    result = unlock_result;
 8007678:	693b      	ldr	r3, [r7, #16]
 800767a:	627b      	str	r3, [r7, #36]	; 0x24
  }

#if (SL_WFX_DEBUG_MASK & SL_WFX_DEBUG_ERROR)
  if (result != SL_STATUS_OK) {
 800767c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800767e:	2b00      	cmp	r3, #0
 8007680:	d003      	beq.n	800768a <sl_wfx_receive_frame+0x17e>
    sl_wfx_host_log("Receive frame error %u\n", result);
 8007682:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007684:	4805      	ldr	r0, [pc, #20]	; (800769c <sl_wfx_receive_frame+0x190>)
 8007686:	f000 ff79 	bl	800857c <sl_wfx_host_log>
  }
#endif
  return result;
 800768a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800768c:	4618      	mov	r0, r3
 800768e:	372c      	adds	r7, #44	; 0x2c
 8007690:	46bd      	mov	sp, r7
 8007692:	bd90      	pop	{r4, r7, pc}
 8007694:	0801b47c 	.word	0x0801b47c
 8007698:	200007e8 	.word	0x200007e8
 800769c:	0801b49c 	.word	0x0801b49c

080076a0 <sl_wfx_enable_irq>:
 * @return SL_STATUS_OK if the irq is enabled correctly, SL_STATUS_FAIL otherwise
 *
 * @note Enable the host irq and set the Wi-Fi chip register accordingly
 *****************************************************************************/
sl_status_t sl_wfx_enable_irq(void)
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b082      	sub	sp, #8
 80076a4:	af00      	add	r7, sp, #0
  uint32_t    value32;
  sl_status_t result;

  result = sl_wfx_host_enable_platform_interrupt();
 80076a6:	f001 fc5d 	bl	8008f64 <sl_wfx_host_enable_platform_interrupt>
 80076aa:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(result);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d115      	bne.n	80076de <sl_wfx_enable_irq+0x3e>

  result = sl_wfx_reg_read_32(SL_WFX_CONFIG_REG_ID, &value32);
 80076b2:	463b      	mov	r3, r7
 80076b4:	4619      	mov	r1, r3
 80076b6:	2000      	movs	r0, #0
 80076b8:	f7ff f9d0 	bl	8006a5c <sl_wfx_reg_read_32>
 80076bc:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(result);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d10e      	bne.n	80076e2 <sl_wfx_enable_irq+0x42>

  value32 |= SL_WFX_CONFIG_DATA_IRQ_ENABLE;
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80076ca:	603b      	str	r3, [r7, #0]

  result = sl_wfx_reg_write_32(SL_WFX_CONFIG_REG_ID, value32);
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	4619      	mov	r1, r3
 80076d0:	2000      	movs	r0, #0
 80076d2:	f7ff f9dd 	bl	8006a90 <sl_wfx_reg_write_32>
 80076d6:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(result);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2b00      	cmp	r3, #0

  error_handler:
 80076dc:	e002      	b.n	80076e4 <sl_wfx_enable_irq+0x44>
  SL_WFX_ERROR_CHECK(result);
 80076de:	bf00      	nop
 80076e0:	e000      	b.n	80076e4 <sl_wfx_enable_irq+0x44>
  SL_WFX_ERROR_CHECK(result);
 80076e2:	bf00      	nop
  return result;
 80076e4:	687b      	ldr	r3, [r7, #4]
}
 80076e6:	4618      	mov	r0, r3
 80076e8:	3708      	adds	r7, #8
 80076ea:	46bd      	mov	sp, r7
 80076ec:	bd80      	pop	{r7, pc}

080076ee <sl_wfx_disable_irq>:
 * @return SL_STATUS_OK if the irq is disabled correctly, SL_STATUS_FAIL otherwise
 *
 * @note Disable the host irq and set the Wi-Fi chip register accordingly
 *****************************************************************************/
sl_status_t sl_wfx_disable_irq(void)
{
 80076ee:	b580      	push	{r7, lr}
 80076f0:	b082      	sub	sp, #8
 80076f2:	af00      	add	r7, sp, #0
  uint32_t    value32;
  sl_status_t result;

  result = sl_wfx_reg_read_32(SL_WFX_CONFIG_REG_ID, &value32);
 80076f4:	463b      	mov	r3, r7
 80076f6:	4619      	mov	r1, r3
 80076f8:	2000      	movs	r0, #0
 80076fa:	f7ff f9af 	bl	8006a5c <sl_wfx_reg_read_32>
 80076fe:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(result);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d112      	bne.n	800772c <sl_wfx_disable_irq+0x3e>

  value32 &= ~SL_WFX_CONFIG_DATA_IRQ_ENABLE;
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800770c:	603b      	str	r3, [r7, #0]

  result = sl_wfx_reg_write_32(SL_WFX_CONFIG_REG_ID, value32);
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	4619      	mov	r1, r3
 8007712:	2000      	movs	r0, #0
 8007714:	f7ff f9bc 	bl	8006a90 <sl_wfx_reg_write_32>
 8007718:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(result);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d107      	bne.n	8007730 <sl_wfx_disable_irq+0x42>

  result = sl_wfx_host_disable_platform_interrupt();
 8007720:	f001 fc2d 	bl	8008f7e <sl_wfx_host_disable_platform_interrupt>
 8007724:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(result);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2b00      	cmp	r3, #0

  error_handler:
 800772a:	e002      	b.n	8007732 <sl_wfx_disable_irq+0x44>
  SL_WFX_ERROR_CHECK(result);
 800772c:	bf00      	nop
 800772e:	e000      	b.n	8007732 <sl_wfx_disable_irq+0x44>
  SL_WFX_ERROR_CHECK(result);
 8007730:	bf00      	nop
  return result;
 8007732:	687b      	ldr	r3, [r7, #4]
}
 8007734:	4618      	mov	r0, r3
 8007736:	3708      	adds	r7, #8
 8007738:	46bd      	mov	sp, r7
 800773a:	bd80      	pop	{r7, pc}

0800773c <sl_wfx_set_access_mode_message>:
 *
 * @return SL_STATUS_OK if the message mode is enabled correctly,
 * SL_STATUS_FAIL otherwise
 *****************************************************************************/
sl_status_t sl_wfx_set_access_mode_message(void)
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b082      	sub	sp, #8
 8007740:	af00      	add	r7, sp, #0
  /* Configure device for MESSAGE MODE */
  sl_status_t result;
  uint32_t    val32;

  result = sl_wfx_reg_read_32(SL_WFX_CONFIG_REG_ID, &val32);
 8007742:	463b      	mov	r3, r7
 8007744:	4619      	mov	r1, r3
 8007746:	2000      	movs	r0, #0
 8007748:	f7ff f988 	bl	8006a5c <sl_wfx_reg_read_32>
 800774c:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(result);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d10a      	bne.n	800776a <sl_wfx_set_access_mode_message+0x2e>

  result = sl_wfx_reg_write_32(SL_WFX_CONFIG_REG_ID, val32 & ~SL_WFX_CONFIG_ACCESS_MODE_BIT);
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800775a:	4619      	mov	r1, r3
 800775c:	2000      	movs	r0, #0
 800775e:	f7ff f997 	bl	8006a90 <sl_wfx_reg_write_32>
 8007762:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(result);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2b00      	cmp	r3, #0

  error_handler:
 8007768:	e000      	b.n	800776c <sl_wfx_set_access_mode_message+0x30>
  SL_WFX_ERROR_CHECK(result);
 800776a:	bf00      	nop
  return result;
 800776c:	687b      	ldr	r3, [r7, #4]
}
 800776e:	4618      	mov	r0, r3
 8007770:	3708      	adds	r7, #8
 8007772:	46bd      	mov	sp, r7
 8007774:	bd80      	pop	{r7, pc}
	...

08007778 <sl_wfx_init_chip>:
 * @brief Init the Wi-Fi chip
 *
 * @return SL_STATUS_OK if the initialization is successful, SL_STATUS_FAIL otherwise
 *****************************************************************************/
static sl_status_t sl_wfx_init_chip(void)
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b084      	sub	sp, #16
 800777c:	af00      	add	r7, sp, #0
  sl_status_t result;
  uint32_t    value32;
  uint16_t    value16;

  result = sl_wfx_reg_read_32(SL_WFX_CONFIG_REG_ID, &value32);
 800777e:	1d3b      	adds	r3, r7, #4
 8007780:	4619      	mov	r1, r3
 8007782:	2000      	movs	r0, #0
 8007784:	f7ff f96a 	bl	8006a5c <sl_wfx_reg_read_32>
 8007788:	60f8      	str	r0, [r7, #12]
  SL_WFX_ERROR_CHECK(result);
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d177      	bne.n	8007880 <sl_wfx_init_chip+0x108>

  /* General purpose registers setting */
  result = sl_wfx_reg_write_32(SL_WFX_TSET_GEN_R_W_REG_ID, 0x07208775);
 8007790:	4949      	ldr	r1, [pc, #292]	; (80078b8 <sl_wfx_init_chip+0x140>)
 8007792:	2006      	movs	r0, #6
 8007794:	f7ff f97c 	bl	8006a90 <sl_wfx_reg_write_32>
 8007798:	60f8      	str	r0, [r7, #12]
  SL_WFX_ERROR_CHECK(result);
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d171      	bne.n	8007884 <sl_wfx_init_chip+0x10c>
  result = sl_wfx_reg_write_32(SL_WFX_TSET_GEN_R_W_REG_ID, 0x082ec020);
 80077a0:	4946      	ldr	r1, [pc, #280]	; (80078bc <sl_wfx_init_chip+0x144>)
 80077a2:	2006      	movs	r0, #6
 80077a4:	f7ff f974 	bl	8006a90 <sl_wfx_reg_write_32>
 80077a8:	60f8      	str	r0, [r7, #12]
  SL_WFX_ERROR_CHECK(result);
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d16b      	bne.n	8007888 <sl_wfx_init_chip+0x110>
  result = sl_wfx_reg_write_32(SL_WFX_TSET_GEN_R_W_REG_ID, 0x093c3c3c);
 80077b0:	4943      	ldr	r1, [pc, #268]	; (80078c0 <sl_wfx_init_chip+0x148>)
 80077b2:	2006      	movs	r0, #6
 80077b4:	f7ff f96c 	bl	8006a90 <sl_wfx_reg_write_32>
 80077b8:	60f8      	str	r0, [r7, #12]
  SL_WFX_ERROR_CHECK(result);
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d165      	bne.n	800788c <sl_wfx_init_chip+0x114>
  result = sl_wfx_reg_write_32(SL_WFX_TSET_GEN_R_W_REG_ID, 0x0b322c44);
 80077c0:	4940      	ldr	r1, [pc, #256]	; (80078c4 <sl_wfx_init_chip+0x14c>)
 80077c2:	2006      	movs	r0, #6
 80077c4:	f7ff f964 	bl	8006a90 <sl_wfx_reg_write_32>
 80077c8:	60f8      	str	r0, [r7, #12]
  SL_WFX_ERROR_CHECK(result);
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d15f      	bne.n	8007890 <sl_wfx_init_chip+0x118>
  result = sl_wfx_reg_write_32(SL_WFX_TSET_GEN_R_W_REG_ID, 0x0ca06497);
 80077d0:	493d      	ldr	r1, [pc, #244]	; (80078c8 <sl_wfx_init_chip+0x150>)
 80077d2:	2006      	movs	r0, #6
 80077d4:	f7ff f95c 	bl	8006a90 <sl_wfx_reg_write_32>
 80077d8:	60f8      	str	r0, [r7, #12]
  SL_WFX_ERROR_CHECK(result);
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d159      	bne.n	8007894 <sl_wfx_init_chip+0x11c>

  /* set wake-up bit */
  result = sl_wfx_reg_read_16(SL_WFX_CONTROL_REG_ID, &value16);
 80077e0:	1cbb      	adds	r3, r7, #2
 80077e2:	4619      	mov	r1, r3
 80077e4:	2001      	movs	r0, #1
 80077e6:	f7ff f8fc 	bl	80069e2 <sl_wfx_reg_read_16>
 80077ea:	60f8      	str	r0, [r7, #12]
  SL_WFX_ERROR_CHECK(result);
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d152      	bne.n	8007898 <sl_wfx_init_chip+0x120>
  value16 |= SL_WFX_CONT_WUP_BIT;
 80077f2:	887b      	ldrh	r3, [r7, #2]
 80077f4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80077f8:	b29b      	uxth	r3, r3
 80077fa:	807b      	strh	r3, [r7, #2]
  result = sl_wfx_reg_write_16(SL_WFX_CONTROL_REG_ID, value16);
 80077fc:	887b      	ldrh	r3, [r7, #2]
 80077fe:	4619      	mov	r1, r3
 8007800:	2001      	movs	r0, #1
 8007802:	f7ff f90b 	bl	8006a1c <sl_wfx_reg_write_16>
 8007806:	60f8      	str	r0, [r7, #12]
  SL_WFX_ERROR_CHECK(result);
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d146      	bne.n	800789c <sl_wfx_init_chip+0x124>

  /* .. and wait for wake-up */
  for (uint32_t i = 0; i < 200; ++i) {
 800780e:	2300      	movs	r3, #0
 8007810:	60bb      	str	r3, [r7, #8]
 8007812:	e013      	b.n	800783c <sl_wfx_init_chip+0xc4>
    result = sl_wfx_reg_read_16(SL_WFX_CONTROL_REG_ID, &value16);
 8007814:	1cbb      	adds	r3, r7, #2
 8007816:	4619      	mov	r1, r3
 8007818:	2001      	movs	r0, #1
 800781a:	f7ff f8e2 	bl	80069e2 <sl_wfx_reg_read_16>
 800781e:	60f8      	str	r0, [r7, #12]
    SL_WFX_ERROR_CHECK(result);
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d13c      	bne.n	80078a0 <sl_wfx_init_chip+0x128>

    if ((value16 & SL_WFX_CONT_RDY_BIT) == SL_WFX_CONT_RDY_BIT) {
 8007826:	887b      	ldrh	r3, [r7, #2]
 8007828:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800782c:	2b00      	cmp	r3, #0
 800782e:	d109      	bne.n	8007844 <sl_wfx_init_chip+0xcc>
      break;
    } else {
      sl_wfx_host_wait(1);
 8007830:	2001      	movs	r0, #1
 8007832:	f000 fd39 	bl	80082a8 <sl_wfx_host_wait>
  for (uint32_t i = 0; i < 200; ++i) {
 8007836:	68bb      	ldr	r3, [r7, #8]
 8007838:	3301      	adds	r3, #1
 800783a:	60bb      	str	r3, [r7, #8]
 800783c:	68bb      	ldr	r3, [r7, #8]
 800783e:	2bc7      	cmp	r3, #199	; 0xc7
 8007840:	d9e8      	bls.n	8007814 <sl_wfx_init_chip+0x9c>
 8007842:	e000      	b.n	8007846 <sl_wfx_init_chip+0xce>
      break;
 8007844:	bf00      	nop
    }
  }

  if ((value16 & SL_WFX_CONT_RDY_BIT) != SL_WFX_CONT_RDY_BIT) {
 8007846:	887b      	ldrh	r3, [r7, #2]
 8007848:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800784c:	2b00      	cmp	r3, #0
 800784e:	d104      	bne.n	800785a <sl_wfx_init_chip+0xe2>
    result = SL_STATUS_TIMEOUT;
 8007850:	2307      	movs	r3, #7
 8007852:	60fb      	str	r3, [r7, #12]
    SL_WFX_ERROR_CHECK(result);
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d124      	bne.n	80078a4 <sl_wfx_init_chip+0x12c>
  }

  /* check for access mode bit */
  result = sl_wfx_reg_read_32(SL_WFX_CONFIG_REG_ID, &value32);
 800785a:	1d3b      	adds	r3, r7, #4
 800785c:	4619      	mov	r1, r3
 800785e:	2000      	movs	r0, #0
 8007860:	f7ff f8fc 	bl	8006a5c <sl_wfx_reg_read_32>
 8007864:	60f8      	str	r0, [r7, #12]
  SL_WFX_ERROR_CHECK(result);
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d11d      	bne.n	80078a8 <sl_wfx_init_chip+0x130>
  if ((value32 & SL_WFX_CONFIG_ACCESS_MODE_BIT) == 0) {
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007872:	2b00      	cmp	r3, #0
 8007874:	d11a      	bne.n	80078ac <sl_wfx_init_chip+0x134>
    result = SL_STATUS_FAIL;
 8007876:	2301      	movs	r3, #1
 8007878:	60fb      	str	r3, [r7, #12]
    SL_WFX_ERROR_CHECK(result);
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	2b00      	cmp	r3, #0
  }

  error_handler:
 800787e:	e015      	b.n	80078ac <sl_wfx_init_chip+0x134>
  SL_WFX_ERROR_CHECK(result);
 8007880:	bf00      	nop
 8007882:	e014      	b.n	80078ae <sl_wfx_init_chip+0x136>
  SL_WFX_ERROR_CHECK(result);
 8007884:	bf00      	nop
 8007886:	e012      	b.n	80078ae <sl_wfx_init_chip+0x136>
  SL_WFX_ERROR_CHECK(result);
 8007888:	bf00      	nop
 800788a:	e010      	b.n	80078ae <sl_wfx_init_chip+0x136>
  SL_WFX_ERROR_CHECK(result);
 800788c:	bf00      	nop
 800788e:	e00e      	b.n	80078ae <sl_wfx_init_chip+0x136>
  SL_WFX_ERROR_CHECK(result);
 8007890:	bf00      	nop
 8007892:	e00c      	b.n	80078ae <sl_wfx_init_chip+0x136>
  SL_WFX_ERROR_CHECK(result);
 8007894:	bf00      	nop
 8007896:	e00a      	b.n	80078ae <sl_wfx_init_chip+0x136>
  SL_WFX_ERROR_CHECK(result);
 8007898:	bf00      	nop
 800789a:	e008      	b.n	80078ae <sl_wfx_init_chip+0x136>
  SL_WFX_ERROR_CHECK(result);
 800789c:	bf00      	nop
 800789e:	e006      	b.n	80078ae <sl_wfx_init_chip+0x136>
    SL_WFX_ERROR_CHECK(result);
 80078a0:	bf00      	nop
 80078a2:	e004      	b.n	80078ae <sl_wfx_init_chip+0x136>
    SL_WFX_ERROR_CHECK(result);
 80078a4:	bf00      	nop
 80078a6:	e002      	b.n	80078ae <sl_wfx_init_chip+0x136>
  SL_WFX_ERROR_CHECK(result);
 80078a8:	bf00      	nop
 80078aa:	e000      	b.n	80078ae <sl_wfx_init_chip+0x136>
  error_handler:
 80078ac:	bf00      	nop
  return result;
 80078ae:	68fb      	ldr	r3, [r7, #12]
}
 80078b0:	4618      	mov	r0, r3
 80078b2:	3710      	adds	r7, #16
 80078b4:	46bd      	mov	sp, r7
 80078b6:	bd80      	pop	{r7, pc}
 80078b8:	07208775 	.word	0x07208775
 80078bc:	082ec020 	.word	0x082ec020
 80078c0:	093c3c3c 	.word	0x093c3c3c
 80078c4:	0b322c44 	.word	0x0b322c44
 80078c8:	0ca06497 	.word	0x0ca06497

080078cc <sl_wfx_download_run_bootloader>:
 * @brief run the Wi-Fi chip bootloader
 *
 * @return SL_STATUS_OK if the bootloader runs correctly, SL_STATUS_FAIL otherwise
 *****************************************************************************/
static sl_status_t sl_wfx_download_run_bootloader(void)
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b082      	sub	sp, #8
 80078d0:	af00      	add	r7, sp, #0
  sl_status_t result;
  uint32_t    value32;

  result = sl_wfx_apb_read_32(ADDR_DWL_CTRL_AREA_NCP_STATUS, &value32);
 80078d2:	463b      	mov	r3, r7
 80078d4:	4619      	mov	r1, r3
 80078d6:	4823      	ldr	r0, [pc, #140]	; (8007964 <sl_wfx_download_run_bootloader+0x98>)
 80078d8:	f7ff f94a 	bl	8006b70 <sl_wfx_apb_read_32>
 80078dc:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(result);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d12f      	bne.n	8007944 <sl_wfx_download_run_bootloader+0x78>

  /* release CPU from reset and enable clock */
  result = sl_wfx_reg_read_32(SL_WFX_CONFIG_REG_ID, &value32);
 80078e4:	463b      	mov	r3, r7
 80078e6:	4619      	mov	r1, r3
 80078e8:	2000      	movs	r0, #0
 80078ea:	f7ff f8b7 	bl	8006a5c <sl_wfx_reg_read_32>
 80078ee:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(result);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d128      	bne.n	8007948 <sl_wfx_download_run_bootloader+0x7c>
  value32 &= ~(SL_WFX_CONFIG_CPU_RESET_BIT | SL_WFX_CONFIG_CPU_CLK_DIS_BIT);
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	f423 43a0 	bic.w	r3, r3, #20480	; 0x5000
 80078fc:	603b      	str	r3, [r7, #0]
  result = sl_wfx_reg_write_32(SL_WFX_CONFIG_REG_ID, value32);
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	4619      	mov	r1, r3
 8007902:	2000      	movs	r0, #0
 8007904:	f7ff f8c4 	bl	8006a90 <sl_wfx_reg_write_32>
 8007908:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(result);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d11d      	bne.n	800794c <sl_wfx_download_run_bootloader+0x80>

  /* Testing SRAM access */
  result = sl_wfx_apb_write_32(ADDR_DOWNLOAD_FIFO_BASE, 0x23abc88e);
 8007910:	4915      	ldr	r1, [pc, #84]	; (8007968 <sl_wfx_download_run_bootloader+0x9c>)
 8007912:	4816      	ldr	r0, [pc, #88]	; (800796c <sl_wfx_download_run_bootloader+0xa0>)
 8007914:	f7ff f915 	bl	8006b42 <sl_wfx_apb_write_32>
 8007918:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(result);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d117      	bne.n	8007950 <sl_wfx_download_run_bootloader+0x84>

  /* Check if the write command is successful */
  result = sl_wfx_apb_read_32(ADDR_DOWNLOAD_FIFO_BASE, &value32);
 8007920:	463b      	mov	r3, r7
 8007922:	4619      	mov	r1, r3
 8007924:	4811      	ldr	r0, [pc, #68]	; (800796c <sl_wfx_download_run_bootloader+0xa0>)
 8007926:	f7ff f923 	bl	8006b70 <sl_wfx_apb_read_32>
 800792a:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(result);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d110      	bne.n	8007954 <sl_wfx_download_run_bootloader+0x88>
  if (value32 != 0x23abc88e) {
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	4a0c      	ldr	r2, [pc, #48]	; (8007968 <sl_wfx_download_run_bootloader+0x9c>)
 8007936:	4293      	cmp	r3, r2
 8007938:	d00e      	beq.n	8007958 <sl_wfx_download_run_bootloader+0x8c>
    result = SL_STATUS_FAIL;
 800793a:	2301      	movs	r3, #1
 800793c:	607b      	str	r3, [r7, #4]
    SL_WFX_ERROR_CHECK(result);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	2b00      	cmp	r3, #0
  }

  error_handler:
 8007942:	e009      	b.n	8007958 <sl_wfx_download_run_bootloader+0x8c>
  SL_WFX_ERROR_CHECK(result);
 8007944:	bf00      	nop
 8007946:	e008      	b.n	800795a <sl_wfx_download_run_bootloader+0x8e>
  SL_WFX_ERROR_CHECK(result);
 8007948:	bf00      	nop
 800794a:	e006      	b.n	800795a <sl_wfx_download_run_bootloader+0x8e>
  SL_WFX_ERROR_CHECK(result);
 800794c:	bf00      	nop
 800794e:	e004      	b.n	800795a <sl_wfx_download_run_bootloader+0x8e>
  SL_WFX_ERROR_CHECK(result);
 8007950:	bf00      	nop
 8007952:	e002      	b.n	800795a <sl_wfx_download_run_bootloader+0x8e>
  SL_WFX_ERROR_CHECK(result);
 8007954:	bf00      	nop
 8007956:	e000      	b.n	800795a <sl_wfx_download_run_bootloader+0x8e>
  error_handler:
 8007958:	bf00      	nop
  return result;
 800795a:	687b      	ldr	r3, [r7, #4]
}
 800795c:	4618      	mov	r0, r3
 800795e:	3708      	adds	r7, #8
 8007960:	46bd      	mov	sp, r7
 8007962:	bd80      	pop	{r7, pc}
 8007964:	0900c010 	.word	0x0900c010
 8007968:	23abc88e 	.word	0x23abc88e
 800796c:	09004000 	.word	0x09004000

08007970 <sl_wfx_download_run_firmware>:
 * SL_STATUS_WIFI_INVALID_KEY if the firmware keyset does not match the chip one,
 * SL_STATUS_WIFI_FIRMWARE_DOWNLOAD_TIMEOUT or SL_STATUS_TIMEOUT if the process times out,
 * SL_STATUS_FAIL otherwise
 *****************************************************************************/
static sl_status_t sl_wfx_download_run_firmware(void)
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b08c      	sub	sp, #48	; 0x30
 8007974:	af00      	add	r7, sp, #0
  uint32_t       i;
  uint32_t       value32;
  uint32_t       image_length;
  uint32_t       block;
  uint32_t       num_blocks;
  uint32_t       put = 0;
 8007976:	2300      	movs	r3, #0
 8007978:	623b      	str	r3, [r7, #32]
  uint32_t       get = 0;
 800797a:	2300      	movs	r3, #0
 800797c:	60bb      	str	r3, [r7, #8]
  const uint8_t *buffer;

  result = sl_wfx_host_init();
 800797e:	f000 fb3b 	bl	8007ff8 <sl_wfx_host_init>
 8007982:	62f8      	str	r0, [r7, #44]	; 0x2c
  SL_WFX_ERROR_CHECK(result);
 8007984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007986:	2b00      	cmp	r3, #0
 8007988:	f040 8185 	bne.w	8007c96 <sl_wfx_download_run_firmware+0x326>

  result = sl_wfx_apb_write_32(ADDR_DWL_CTRL_AREA_HOST_STATUS, HOST_STATE_NOT_READY);
 800798c:	4984      	ldr	r1, [pc, #528]	; (8007ba0 <sl_wfx_download_run_firmware+0x230>)
 800798e:	4885      	ldr	r0, [pc, #532]	; (8007ba4 <sl_wfx_download_run_firmware+0x234>)
 8007990:	f7ff f8d7 	bl	8006b42 <sl_wfx_apb_write_32>
 8007994:	62f8      	str	r0, [r7, #44]	; 0x2c
  SL_WFX_ERROR_CHECK(result);
 8007996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007998:	2b00      	cmp	r3, #0
 800799a:	f040 817e 	bne.w	8007c9a <sl_wfx_download_run_firmware+0x32a>
  result = sl_wfx_apb_write_32(ADDR_DWL_CTRL_AREA_PUT, 0);
 800799e:	2100      	movs	r1, #0
 80079a0:	4881      	ldr	r0, [pc, #516]	; (8007ba8 <sl_wfx_download_run_firmware+0x238>)
 80079a2:	f7ff f8ce 	bl	8006b42 <sl_wfx_apb_write_32>
 80079a6:	62f8      	str	r0, [r7, #44]	; 0x2c
  SL_WFX_ERROR_CHECK(result);
 80079a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	f040 8177 	bne.w	8007c9e <sl_wfx_download_run_firmware+0x32e>
  result = sl_wfx_apb_write_32(ADDR_DWL_CTRL_AREA_GET, 0);
 80079b0:	2100      	movs	r1, #0
 80079b2:	487e      	ldr	r0, [pc, #504]	; (8007bac <sl_wfx_download_run_firmware+0x23c>)
 80079b4:	f7ff f8c5 	bl	8006b42 <sl_wfx_apb_write_32>
 80079b8:	62f8      	str	r0, [r7, #44]	; 0x2c
  SL_WFX_ERROR_CHECK(result);
 80079ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079bc:	2b00      	cmp	r3, #0
 80079be:	f040 8170 	bne.w	8007ca2 <sl_wfx_download_run_firmware+0x332>
  result = sl_wfx_apb_write_32(ADDR_DWL_CTRL_AREA_HOST_STATUS, HOST_STATE_READY);
 80079c2:	497b      	ldr	r1, [pc, #492]	; (8007bb0 <sl_wfx_download_run_firmware+0x240>)
 80079c4:	4877      	ldr	r0, [pc, #476]	; (8007ba4 <sl_wfx_download_run_firmware+0x234>)
 80079c6:	f7ff f8bc 	bl	8006b42 <sl_wfx_apb_write_32>
 80079ca:	62f8      	str	r0, [r7, #44]	; 0x2c
  SL_WFX_ERROR_CHECK(result);
 80079cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	f040 8169 	bne.w	8007ca6 <sl_wfx_download_run_firmware+0x336>

  // wait for INFO_READ state
  result = sl_wfx_poll_for_value(ADDR_DWL_CTRL_AREA_NCP_STATUS, NCP_STATE_INFO_READY, 100);
 80079d4:	2264      	movs	r2, #100	; 0x64
 80079d6:	4977      	ldr	r1, [pc, #476]	; (8007bb4 <sl_wfx_download_run_firmware+0x244>)
 80079d8:	4877      	ldr	r0, [pc, #476]	; (8007bb8 <sl_wfx_download_run_firmware+0x248>)
 80079da:	f000 f9a3 	bl	8007d24 <sl_wfx_poll_for_value>
 80079de:	62f8      	str	r0, [r7, #44]	; 0x2c
  SL_WFX_ERROR_CHECK(result);
 80079e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	f040 8161 	bne.w	8007caa <sl_wfx_download_run_firmware+0x33a>

  // read info
  result = sl_wfx_apb_read_32(0x0900C080, &value32);
 80079e8:	f107 0310 	add.w	r3, r7, #16
 80079ec:	4619      	mov	r1, r3
 80079ee:	4873      	ldr	r0, [pc, #460]	; (8007bbc <sl_wfx_download_run_firmware+0x24c>)
 80079f0:	f7ff f8be 	bl	8006b70 <sl_wfx_apb_read_32>
 80079f4:	62f8      	str	r0, [r7, #44]	; 0x2c
  SL_WFX_ERROR_CHECK(result);
 80079f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	f040 8158 	bne.w	8007cae <sl_wfx_download_run_firmware+0x33e>

  // retrieve WF200 keyset
  result = sl_wfx_apb_read_32(SL_WFX_PTE_INFO + 12, &value32);
 80079fe:	f107 0310 	add.w	r3, r7, #16
 8007a02:	4619      	mov	r1, r3
 8007a04:	486e      	ldr	r0, [pc, #440]	; (8007bc0 <sl_wfx_download_run_firmware+0x250>)
 8007a06:	f7ff f8b3 	bl	8006b70 <sl_wfx_apb_read_32>
 8007a0a:	62f8      	str	r0, [r7, #44]	; 0x2c
  SL_WFX_ERROR_CHECK(result);
 8007a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	f040 814f 	bne.w	8007cb2 <sl_wfx_download_run_firmware+0x342>
  encryption_keyset = (value32 >> 8);
 8007a14:	693b      	ldr	r3, [r7, #16]
 8007a16:	0a1b      	lsrs	r3, r3, #8
 8007a18:	b2da      	uxtb	r2, r3
 8007a1a:	4b6a      	ldr	r3, [pc, #424]	; (8007bc4 <sl_wfx_download_run_firmware+0x254>)
 8007a1c:	701a      	strb	r2, [r3, #0]

  // report that info is read
  result = sl_wfx_apb_write_32(ADDR_DWL_CTRL_AREA_HOST_STATUS, HOST_STATE_HOST_INFO_READ);
 8007a1e:	496a      	ldr	r1, [pc, #424]	; (8007bc8 <sl_wfx_download_run_firmware+0x258>)
 8007a20:	4860      	ldr	r0, [pc, #384]	; (8007ba4 <sl_wfx_download_run_firmware+0x234>)
 8007a22:	f7ff f88e 	bl	8006b42 <sl_wfx_apb_write_32>
 8007a26:	62f8      	str	r0, [r7, #44]	; 0x2c
  SL_WFX_ERROR_CHECK(result);
 8007a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	f040 8143 	bne.w	8007cb6 <sl_wfx_download_run_firmware+0x346>

  // wait for READY state
  result = sl_wfx_poll_for_value(ADDR_DWL_CTRL_AREA_NCP_STATUS, NCP_STATE_READY, 100);
 8007a30:	2264      	movs	r2, #100	; 0x64
 8007a32:	495f      	ldr	r1, [pc, #380]	; (8007bb0 <sl_wfx_download_run_firmware+0x240>)
 8007a34:	4860      	ldr	r0, [pc, #384]	; (8007bb8 <sl_wfx_download_run_firmware+0x248>)
 8007a36:	f000 f975 	bl	8007d24 <sl_wfx_poll_for_value>
 8007a3a:	62f8      	str	r0, [r7, #44]	; 0x2c
  SL_WFX_ERROR_CHECK(result);
 8007a3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	f040 813b 	bne.w	8007cba <sl_wfx_download_run_firmware+0x34a>

  // SB misc initialization. Work around for chips < A2.
  result = sl_wfx_apb_write_32(ADDR_DOWNLOAD_FIFO_BASE, 0xFFFFFFFF);
 8007a44:	f04f 31ff 	mov.w	r1, #4294967295
 8007a48:	4860      	ldr	r0, [pc, #384]	; (8007bcc <sl_wfx_download_run_firmware+0x25c>)
 8007a4a:	f7ff f87a 	bl	8006b42 <sl_wfx_apb_write_32>
 8007a4e:	62f8      	str	r0, [r7, #44]	; 0x2c
  SL_WFX_ERROR_CHECK(result);
 8007a50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	f040 8133 	bne.w	8007cbe <sl_wfx_download_run_firmware+0x34e>

  // write image length
  sl_wfx_host_get_firmware_size(&image_length);
 8007a58:	f107 030c 	add.w	r3, r7, #12
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	f000 fb21 	bl	80080a4 <sl_wfx_host_get_firmware_size>
  result = sl_wfx_apb_write_32(ADDR_DWL_CTRL_AREA_IMAGE_SIZE, image_length - FW_HASH_SIZE - FW_SIGNATURE_SIZE - FW_KEYSET_SIZE);
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	3b50      	subs	r3, #80	; 0x50
 8007a66:	4619      	mov	r1, r3
 8007a68:	4859      	ldr	r0, [pc, #356]	; (8007bd0 <sl_wfx_download_run_firmware+0x260>)
 8007a6a:	f7ff f86a 	bl	8006b42 <sl_wfx_apb_write_32>
 8007a6e:	62f8      	str	r0, [r7, #44]	; 0x2c
  SL_WFX_ERROR_CHECK(result);
 8007a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	f040 8125 	bne.w	8007cc2 <sl_wfx_download_run_firmware+0x352>

  // get firmware keyset, which is the first FW_KEYSET_SIZE of given image
  result = sl_wfx_host_get_firmware_data(&buffer, FW_KEYSET_SIZE);
 8007a78:	1d3b      	adds	r3, r7, #4
 8007a7a:	2108      	movs	r1, #8
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	f000 faf5 	bl	800806c <sl_wfx_host_get_firmware_data>
 8007a82:	62f8      	str	r0, [r7, #44]	; 0x2c
  SL_WFX_ERROR_CHECK(result);
 8007a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	f040 811d 	bne.w	8007cc6 <sl_wfx_download_run_firmware+0x356>

  // check if the firmware keyset corresponds to the chip keyset
  result = sl_wfx_compare_keysets(encryption_keyset, (char *)buffer);
 8007a8c:	4b4d      	ldr	r3, [pc, #308]	; (8007bc4 <sl_wfx_download_run_firmware+0x254>)
 8007a8e:	781b      	ldrb	r3, [r3, #0]
 8007a90:	687a      	ldr	r2, [r7, #4]
 8007a92:	4611      	mov	r1, r2
 8007a94:	4618      	mov	r0, r3
 8007a96:	f000 f976 	bl	8007d86 <sl_wfx_compare_keysets>
 8007a9a:	62f8      	str	r0, [r7, #44]	; 0x2c
  SL_WFX_ERROR_CHECK(result);
 8007a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	f040 8113 	bne.w	8007cca <sl_wfx_download_run_firmware+0x35a>

  // write image signature, which is the next FW_SIGNATURE_SIZE of given image
  result = sl_wfx_host_get_firmware_data(&buffer, FW_SIGNATURE_SIZE);
 8007aa4:	1d3b      	adds	r3, r7, #4
 8007aa6:	2140      	movs	r1, #64	; 0x40
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	f000 fadf 	bl	800806c <sl_wfx_host_get_firmware_data>
 8007aae:	62f8      	str	r0, [r7, #44]	; 0x2c
  SL_WFX_ERROR_CHECK(result);
 8007ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	f040 810b 	bne.w	8007cce <sl_wfx_download_run_firmware+0x35e>
  result = sl_wfx_apb_write(ADDR_DWL_CTRL_AREA_SIGNATURE, buffer, FW_SIGNATURE_SIZE);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2240      	movs	r2, #64	; 0x40
 8007abc:	4619      	mov	r1, r3
 8007abe:	4845      	ldr	r0, [pc, #276]	; (8007bd4 <sl_wfx_download_run_firmware+0x264>)
 8007ac0:	f7ff f81f 	bl	8006b02 <sl_wfx_apb_write>
 8007ac4:	62f8      	str	r0, [r7, #44]	; 0x2c
  SL_WFX_ERROR_CHECK(result);
 8007ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	f040 8102 	bne.w	8007cd2 <sl_wfx_download_run_firmware+0x362>

  // write image hash, which is the next  FW_HASH_SIZE of given image
  result = sl_wfx_host_get_firmware_data(&buffer, FW_HASH_SIZE);
 8007ace:	1d3b      	adds	r3, r7, #4
 8007ad0:	2108      	movs	r1, #8
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	f000 faca 	bl	800806c <sl_wfx_host_get_firmware_data>
 8007ad8:	62f8      	str	r0, [r7, #44]	; 0x2c
  SL_WFX_ERROR_CHECK(result);
 8007ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	f040 80fa 	bne.w	8007cd6 <sl_wfx_download_run_firmware+0x366>
  result = sl_wfx_apb_write(ADDR_DWL_CTRL_AREA_FW_HASH, buffer, FW_HASH_SIZE);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2208      	movs	r2, #8
 8007ae6:	4619      	mov	r1, r3
 8007ae8:	483b      	ldr	r0, [pc, #236]	; (8007bd8 <sl_wfx_download_run_firmware+0x268>)
 8007aea:	f7ff f80a 	bl	8006b02 <sl_wfx_apb_write>
 8007aee:	62f8      	str	r0, [r7, #44]	; 0x2c
  SL_WFX_ERROR_CHECK(result);
 8007af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	f040 80f1 	bne.w	8007cda <sl_wfx_download_run_firmware+0x36a>

  // write version, this is a pre-defined value (?)
  result = sl_wfx_apb_write_32(ADDR_DWL_CTRL_AREA_FW_VERSION, FW_VERSION_VALUE);
 8007af8:	2101      	movs	r1, #1
 8007afa:	4838      	ldr	r0, [pc, #224]	; (8007bdc <sl_wfx_download_run_firmware+0x26c>)
 8007afc:	f7ff f821 	bl	8006b42 <sl_wfx_apb_write_32>
 8007b00:	62f8      	str	r0, [r7, #44]	; 0x2c
  SL_WFX_ERROR_CHECK(result);
 8007b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	f040 80ea 	bne.w	8007cde <sl_wfx_download_run_firmware+0x36e>

  // notify NCP that upload is starting
  result = sl_wfx_apb_write_32(ADDR_DWL_CTRL_AREA_HOST_STATUS, HOST_STATE_UPLOAD_PENDING);
 8007b0a:	4935      	ldr	r1, [pc, #212]	; (8007be0 <sl_wfx_download_run_firmware+0x270>)
 8007b0c:	4825      	ldr	r0, [pc, #148]	; (8007ba4 <sl_wfx_download_run_firmware+0x234>)
 8007b0e:	f7ff f818 	bl	8006b42 <sl_wfx_apb_write_32>
 8007b12:	62f8      	str	r0, [r7, #44]	; 0x2c
  SL_WFX_ERROR_CHECK(result);
 8007b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	f040 80e3 	bne.w	8007ce2 <sl_wfx_download_run_firmware+0x372>

  // skip signature and hash from image length
  image_length -= (FW_HASH_SIZE + FW_SIGNATURE_SIZE + FW_KEYSET_SIZE);
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	3b50      	subs	r3, #80	; 0x50
 8007b20:	60fb      	str	r3, [r7, #12]

  /* Calculate number of download blocks */
  num_blocks = (image_length - 1) / DOWNLOAD_BLOCK_SIZE + 1;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	3b01      	subs	r3, #1
 8007b26:	0a9b      	lsrs	r3, r3, #10
 8007b28:	3301      	adds	r3, #1
 8007b2a:	61bb      	str	r3, [r7, #24]

  /* Firmware downloading loop */
  for ( block = 0; block < num_blocks; block++ ) {
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	627b      	str	r3, [r7, #36]	; 0x24
 8007b30:	e093      	b.n	8007c5a <sl_wfx_download_run_firmware+0x2ea>
    /* loop until put - get <= 24K */
    for ( i = 0; i < 100; i++ ) {
 8007b32:	2300      	movs	r3, #0
 8007b34:	62bb      	str	r3, [r7, #40]	; 0x28
 8007b36:	e015      	b.n	8007b64 <sl_wfx_download_run_firmware+0x1f4>
      if ((put - get) <= (DOWNLOAD_FIFO_SIZE - DOWNLOAD_BLOCK_SIZE)) {
 8007b38:	68bb      	ldr	r3, [r7, #8]
 8007b3a:	6a3a      	ldr	r2, [r7, #32]
 8007b3c:	1ad3      	subs	r3, r2, r3
 8007b3e:	f5b3 4ff8 	cmp.w	r3, #31744	; 0x7c00
 8007b42:	d913      	bls.n	8007b6c <sl_wfx_download_run_firmware+0x1fc>
        break;
      }

      get = 0;
 8007b44:	2300      	movs	r3, #0
 8007b46:	60bb      	str	r3, [r7, #8]
      result = sl_wfx_apb_read_32(ADDR_DWL_CTRL_AREA_GET, &get);
 8007b48:	f107 0308 	add.w	r3, r7, #8
 8007b4c:	4619      	mov	r1, r3
 8007b4e:	4817      	ldr	r0, [pc, #92]	; (8007bac <sl_wfx_download_run_firmware+0x23c>)
 8007b50:	f7ff f80e 	bl	8006b70 <sl_wfx_apb_read_32>
 8007b54:	62f8      	str	r0, [r7, #44]	; 0x2c
      SL_WFX_ERROR_CHECK(result);
 8007b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	f040 80c4 	bne.w	8007ce6 <sl_wfx_download_run_firmware+0x376>
    for ( i = 0; i < 100; i++ ) {
 8007b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b60:	3301      	adds	r3, #1
 8007b62:	62bb      	str	r3, [r7, #40]	; 0x28
 8007b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b66:	2b63      	cmp	r3, #99	; 0x63
 8007b68:	d9e6      	bls.n	8007b38 <sl_wfx_download_run_firmware+0x1c8>
 8007b6a:	e000      	b.n	8007b6e <sl_wfx_download_run_firmware+0x1fe>
        break;
 8007b6c:	bf00      	nop
    }

    if ((put - get) > (DOWNLOAD_FIFO_SIZE - DOWNLOAD_BLOCK_SIZE)) {
 8007b6e:	68bb      	ldr	r3, [r7, #8]
 8007b70:	6a3a      	ldr	r2, [r7, #32]
 8007b72:	1ad3      	subs	r3, r2, r3
 8007b74:	f5b3 4ff8 	cmp.w	r3, #31744	; 0x7c00
 8007b78:	d93a      	bls.n	8007bf0 <sl_wfx_download_run_firmware+0x280>
      /* check the download status in NCP */
      result = sl_wfx_apb_read_32(ADDR_DWL_CTRL_AREA_NCP_STATUS, &value32);
 8007b7a:	f107 0310 	add.w	r3, r7, #16
 8007b7e:	4619      	mov	r1, r3
 8007b80:	480d      	ldr	r0, [pc, #52]	; (8007bb8 <sl_wfx_download_run_firmware+0x248>)
 8007b82:	f7fe fff5 	bl	8006b70 <sl_wfx_apb_read_32>
 8007b86:	62f8      	str	r0, [r7, #44]	; 0x2c
      SL_WFX_ERROR_CHECK(result);
 8007b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	f040 80ad 	bne.w	8007cea <sl_wfx_download_run_firmware+0x37a>

      if (value32 != NCP_STATE_DOWNLOAD_PENDING) {
 8007b90:	693b      	ldr	r3, [r7, #16]
 8007b92:	4a13      	ldr	r2, [pc, #76]	; (8007be0 <sl_wfx_download_run_firmware+0x270>)
 8007b94:	4293      	cmp	r3, r2
 8007b96:	d025      	beq.n	8007be4 <sl_wfx_download_run_firmware+0x274>
        result = SL_STATUS_FAIL;
 8007b98:	2301      	movs	r3, #1
 8007b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007b9c:	e025      	b.n	8007bea <sl_wfx_download_run_firmware+0x27a>
 8007b9e:	bf00      	nop
 8007ba0:	12345678 	.word	0x12345678
 8007ba4:	0900c00c 	.word	0x0900c00c
 8007ba8:	0900c004 	.word	0x0900c004
 8007bac:	0900c008 	.word	0x0900c008
 8007bb0:	87654321 	.word	0x87654321
 8007bb4:	bd53ef99 	.word	0xbd53ef99
 8007bb8:	0900c010 	.word	0x0900c010
 8007bbc:	0900c080 	.word	0x0900c080
 8007bc0:	0900c0cc 	.word	0x0900c0cc
 8007bc4:	200007ec 	.word	0x200007ec
 8007bc8:	a753bd99 	.word	0xa753bd99
 8007bcc:	09004000 	.word	0x09004000
 8007bd0:	0900c000 	.word	0x0900c000
 8007bd4:	0900c014 	.word	0x0900c014
 8007bd8:	0900c054 	.word	0x0900c054
 8007bdc:	0900c05c 	.word	0x0900c05c
 8007be0:	abcddcba 	.word	0xabcddcba
      } else {
        result = SL_STATUS_WIFI_FIRMWARE_DOWNLOAD_TIMEOUT;
 8007be4:	f640 3302 	movw	r3, #2818	; 0xb02
 8007be8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      SL_WFX_ERROR_CHECK(result);
 8007bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d17e      	bne.n	8007cee <sl_wfx_download_run_firmware+0x37e>
    }

    /* calculate the block size */
    uint32_t block_size = image_length - put;
 8007bf0:	68fa      	ldr	r2, [r7, #12]
 8007bf2:	6a3b      	ldr	r3, [r7, #32]
 8007bf4:	1ad3      	subs	r3, r2, r3
 8007bf6:	61fb      	str	r3, [r7, #28]
    if (block_size > DOWNLOAD_BLOCK_SIZE) {
 8007bf8:	69fb      	ldr	r3, [r7, #28]
 8007bfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007bfe:	d902      	bls.n	8007c06 <sl_wfx_download_run_firmware+0x296>
      block_size = DOWNLOAD_BLOCK_SIZE;
 8007c00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007c04:	61fb      	str	r3, [r7, #28]
    }

    /* send the block to SRAM */
    result = sl_wfx_host_get_firmware_data(&buffer, block_size);
 8007c06:	1d3b      	adds	r3, r7, #4
 8007c08:	69f9      	ldr	r1, [r7, #28]
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	f000 fa2e 	bl	800806c <sl_wfx_host_get_firmware_data>
 8007c10:	62f8      	str	r0, [r7, #44]	; 0x2c
    SL_WFX_ERROR_CHECK(result);
 8007c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d16c      	bne.n	8007cf2 <sl_wfx_download_run_firmware+0x382>
    uint32_t block_address = ADDR_DOWNLOAD_FIFO_BASE + (put % DOWNLOAD_FIFO_SIZE);
 8007c18:	6a3b      	ldr	r3, [r7, #32]
 8007c1a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8007c1e:	f103 6310 	add.w	r3, r3, #150994944	; 0x9000000
 8007c22:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8007c26:	617b      	str	r3, [r7, #20]
    result = sl_wfx_apb_write(block_address, buffer, block_size);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	69fa      	ldr	r2, [r7, #28]
 8007c2c:	4619      	mov	r1, r3
 8007c2e:	6978      	ldr	r0, [r7, #20]
 8007c30:	f7fe ff67 	bl	8006b02 <sl_wfx_apb_write>
 8007c34:	62f8      	str	r0, [r7, #44]	; 0x2c
    SL_WFX_ERROR_CHECK(result);
 8007c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d15c      	bne.n	8007cf6 <sl_wfx_download_run_firmware+0x386>
#if (SL_WFX_DEBUG_MASK & SL_WFX_DEBUG_FW_LOAD)
    sl_wfx_host_log("FW> %d/%d \n\r", put, image_length);
#endif

    /* update the put register */
    put += block_size;
 8007c3c:	6a3a      	ldr	r2, [r7, #32]
 8007c3e:	69fb      	ldr	r3, [r7, #28]
 8007c40:	4413      	add	r3, r2
 8007c42:	623b      	str	r3, [r7, #32]

    result = sl_wfx_apb_write_32(ADDR_DWL_CTRL_AREA_PUT, put);
 8007c44:	6a39      	ldr	r1, [r7, #32]
 8007c46:	4832      	ldr	r0, [pc, #200]	; (8007d10 <sl_wfx_download_run_firmware+0x3a0>)
 8007c48:	f7fe ff7b 	bl	8006b42 <sl_wfx_apb_write_32>
 8007c4c:	62f8      	str	r0, [r7, #44]	; 0x2c
    SL_WFX_ERROR_CHECK(result);
 8007c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d152      	bne.n	8007cfa <sl_wfx_download_run_firmware+0x38a>
  for ( block = 0; block < num_blocks; block++ ) {
 8007c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c56:	3301      	adds	r3, #1
 8007c58:	627b      	str	r3, [r7, #36]	; 0x24
 8007c5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c5c:	69bb      	ldr	r3, [r7, #24]
 8007c5e:	429a      	cmp	r2, r3
 8007c60:	f4ff af67 	bcc.w	8007b32 <sl_wfx_download_run_firmware+0x1c2>
  }   /* End of firmware download loop */

  // notify NCP that upload ended
  result = sl_wfx_apb_write_32(ADDR_DWL_CTRL_AREA_HOST_STATUS, HOST_STATE_UPLOAD_COMPLETE);
 8007c64:	492b      	ldr	r1, [pc, #172]	; (8007d14 <sl_wfx_download_run_firmware+0x3a4>)
 8007c66:	482c      	ldr	r0, [pc, #176]	; (8007d18 <sl_wfx_download_run_firmware+0x3a8>)
 8007c68:	f7fe ff6b 	bl	8006b42 <sl_wfx_apb_write_32>
 8007c6c:	62f8      	str	r0, [r7, #44]	; 0x2c
  SL_WFX_ERROR_CHECK(result);
 8007c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d144      	bne.n	8007cfe <sl_wfx_download_run_firmware+0x38e>

  // wait for authentication result
  result = sl_wfx_poll_for_value(ADDR_DWL_CTRL_AREA_NCP_STATUS, NCP_STATE_AUTH_OK, 100);
 8007c74:	2264      	movs	r2, #100	; 0x64
 8007c76:	4927      	ldr	r1, [pc, #156]	; (8007d14 <sl_wfx_download_run_firmware+0x3a4>)
 8007c78:	4828      	ldr	r0, [pc, #160]	; (8007d1c <sl_wfx_download_run_firmware+0x3ac>)
 8007c7a:	f000 f853 	bl	8007d24 <sl_wfx_poll_for_value>
 8007c7e:	62f8      	str	r0, [r7, #44]	; 0x2c
  SL_WFX_ERROR_CHECK(result);
 8007c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d13d      	bne.n	8007d02 <sl_wfx_download_run_firmware+0x392>

  // notify NCP that we are happy to run firmware
  result = sl_wfx_apb_write_32(ADDR_DWL_CTRL_AREA_HOST_STATUS, HOST_STATE_OK_TO_JUMP);
 8007c86:	4926      	ldr	r1, [pc, #152]	; (8007d20 <sl_wfx_download_run_firmware+0x3b0>)
 8007c88:	4823      	ldr	r0, [pc, #140]	; (8007d18 <sl_wfx_download_run_firmware+0x3a8>)
 8007c8a:	f7fe ff5a 	bl	8006b42 <sl_wfx_apb_write_32>
 8007c8e:	62f8      	str	r0, [r7, #44]	; 0x2c
  SL_WFX_ERROR_CHECK(result);
 8007c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c92:	2b00      	cmp	r3, #0

  error_handler:
 8007c94:	e036      	b.n	8007d04 <sl_wfx_download_run_firmware+0x394>
  SL_WFX_ERROR_CHECK(result);
 8007c96:	bf00      	nop
 8007c98:	e034      	b.n	8007d04 <sl_wfx_download_run_firmware+0x394>
  SL_WFX_ERROR_CHECK(result);
 8007c9a:	bf00      	nop
 8007c9c:	e032      	b.n	8007d04 <sl_wfx_download_run_firmware+0x394>
  SL_WFX_ERROR_CHECK(result);
 8007c9e:	bf00      	nop
 8007ca0:	e030      	b.n	8007d04 <sl_wfx_download_run_firmware+0x394>
  SL_WFX_ERROR_CHECK(result);
 8007ca2:	bf00      	nop
 8007ca4:	e02e      	b.n	8007d04 <sl_wfx_download_run_firmware+0x394>
  SL_WFX_ERROR_CHECK(result);
 8007ca6:	bf00      	nop
 8007ca8:	e02c      	b.n	8007d04 <sl_wfx_download_run_firmware+0x394>
  SL_WFX_ERROR_CHECK(result);
 8007caa:	bf00      	nop
 8007cac:	e02a      	b.n	8007d04 <sl_wfx_download_run_firmware+0x394>
  SL_WFX_ERROR_CHECK(result);
 8007cae:	bf00      	nop
 8007cb0:	e028      	b.n	8007d04 <sl_wfx_download_run_firmware+0x394>
  SL_WFX_ERROR_CHECK(result);
 8007cb2:	bf00      	nop
 8007cb4:	e026      	b.n	8007d04 <sl_wfx_download_run_firmware+0x394>
  SL_WFX_ERROR_CHECK(result);
 8007cb6:	bf00      	nop
 8007cb8:	e024      	b.n	8007d04 <sl_wfx_download_run_firmware+0x394>
  SL_WFX_ERROR_CHECK(result);
 8007cba:	bf00      	nop
 8007cbc:	e022      	b.n	8007d04 <sl_wfx_download_run_firmware+0x394>
  SL_WFX_ERROR_CHECK(result);
 8007cbe:	bf00      	nop
 8007cc0:	e020      	b.n	8007d04 <sl_wfx_download_run_firmware+0x394>
  SL_WFX_ERROR_CHECK(result);
 8007cc2:	bf00      	nop
 8007cc4:	e01e      	b.n	8007d04 <sl_wfx_download_run_firmware+0x394>
  SL_WFX_ERROR_CHECK(result);
 8007cc6:	bf00      	nop
 8007cc8:	e01c      	b.n	8007d04 <sl_wfx_download_run_firmware+0x394>
  SL_WFX_ERROR_CHECK(result);
 8007cca:	bf00      	nop
 8007ccc:	e01a      	b.n	8007d04 <sl_wfx_download_run_firmware+0x394>
  SL_WFX_ERROR_CHECK(result);
 8007cce:	bf00      	nop
 8007cd0:	e018      	b.n	8007d04 <sl_wfx_download_run_firmware+0x394>
  SL_WFX_ERROR_CHECK(result);
 8007cd2:	bf00      	nop
 8007cd4:	e016      	b.n	8007d04 <sl_wfx_download_run_firmware+0x394>
  SL_WFX_ERROR_CHECK(result);
 8007cd6:	bf00      	nop
 8007cd8:	e014      	b.n	8007d04 <sl_wfx_download_run_firmware+0x394>
  SL_WFX_ERROR_CHECK(result);
 8007cda:	bf00      	nop
 8007cdc:	e012      	b.n	8007d04 <sl_wfx_download_run_firmware+0x394>
  SL_WFX_ERROR_CHECK(result);
 8007cde:	bf00      	nop
 8007ce0:	e010      	b.n	8007d04 <sl_wfx_download_run_firmware+0x394>
  SL_WFX_ERROR_CHECK(result);
 8007ce2:	bf00      	nop
 8007ce4:	e00e      	b.n	8007d04 <sl_wfx_download_run_firmware+0x394>
      SL_WFX_ERROR_CHECK(result);
 8007ce6:	bf00      	nop
 8007ce8:	e00c      	b.n	8007d04 <sl_wfx_download_run_firmware+0x394>
      SL_WFX_ERROR_CHECK(result);
 8007cea:	bf00      	nop
 8007cec:	e00a      	b.n	8007d04 <sl_wfx_download_run_firmware+0x394>
      SL_WFX_ERROR_CHECK(result);
 8007cee:	bf00      	nop
 8007cf0:	e008      	b.n	8007d04 <sl_wfx_download_run_firmware+0x394>
    SL_WFX_ERROR_CHECK(result);
 8007cf2:	bf00      	nop
 8007cf4:	e006      	b.n	8007d04 <sl_wfx_download_run_firmware+0x394>
    SL_WFX_ERROR_CHECK(result);
 8007cf6:	bf00      	nop
 8007cf8:	e004      	b.n	8007d04 <sl_wfx_download_run_firmware+0x394>
    SL_WFX_ERROR_CHECK(result);
 8007cfa:	bf00      	nop
 8007cfc:	e002      	b.n	8007d04 <sl_wfx_download_run_firmware+0x394>
  SL_WFX_ERROR_CHECK(result);
 8007cfe:	bf00      	nop
 8007d00:	e000      	b.n	8007d04 <sl_wfx_download_run_firmware+0x394>
  SL_WFX_ERROR_CHECK(result);
 8007d02:	bf00      	nop
  return result;
 8007d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8007d06:	4618      	mov	r0, r3
 8007d08:	3730      	adds	r7, #48	; 0x30
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	bd80      	pop	{r7, pc}
 8007d0e:	bf00      	nop
 8007d10:	0900c004 	.word	0x0900c004
 8007d14:	d4c64a99 	.word	0xd4c64a99
 8007d18:	0900c00c 	.word	0x0900c00c
 8007d1c:	0900c010 	.word	0x0900c010
 8007d20:	174fc882 	.word	0x174fc882

08007d24 <sl_wfx_poll_for_value>:
 * @return SL_STATUS_OK if the value is received correctly,
 * SL_STATUS_TIMEOUT if the value is not found in time,
 * SL_STATUS_FAIL if not able to poll the value from the Wi-Fi chip
 *****************************************************************************/
static sl_status_t sl_wfx_poll_for_value(uint32_t address, uint32_t polled_value, uint32_t max_retries)
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b086      	sub	sp, #24
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	60f8      	str	r0, [r7, #12]
 8007d2c:	60b9      	str	r1, [r7, #8]
 8007d2e:	607a      	str	r2, [r7, #4]
  uint32_t    value;
  sl_status_t result = SL_STATUS_OK;
 8007d30:	2300      	movs	r3, #0
 8007d32:	617b      	str	r3, [r7, #20]

  for (; max_retries > 0; max_retries--) {
 8007d34:	e013      	b.n	8007d5e <sl_wfx_poll_for_value+0x3a>
    result = sl_wfx_apb_read_32(address, &value);
 8007d36:	f107 0310 	add.w	r3, r7, #16
 8007d3a:	4619      	mov	r1, r3
 8007d3c:	68f8      	ldr	r0, [r7, #12]
 8007d3e:	f7fe ff17 	bl	8006b70 <sl_wfx_apb_read_32>
 8007d42:	6178      	str	r0, [r7, #20]
    SL_WFX_ERROR_CHECK(result);
 8007d44:	697b      	ldr	r3, [r7, #20]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d115      	bne.n	8007d76 <sl_wfx_poll_for_value+0x52>
    if (value == polled_value) {
 8007d4a:	693b      	ldr	r3, [r7, #16]
 8007d4c:	68ba      	ldr	r2, [r7, #8]
 8007d4e:	429a      	cmp	r2, r3
 8007d50:	d009      	beq.n	8007d66 <sl_wfx_poll_for_value+0x42>
      break;
    } else {
      sl_wfx_host_wait(1);
 8007d52:	2001      	movs	r0, #1
 8007d54:	f000 faa8 	bl	80082a8 <sl_wfx_host_wait>
  for (; max_retries > 0; max_retries--) {
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	3b01      	subs	r3, #1
 8007d5c:	607b      	str	r3, [r7, #4]
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d1e8      	bne.n	8007d36 <sl_wfx_poll_for_value+0x12>
 8007d64:	e000      	b.n	8007d68 <sl_wfx_poll_for_value+0x44>
      break;
 8007d66:	bf00      	nop
    }
  }
  if (value != polled_value) {
 8007d68:	693b      	ldr	r3, [r7, #16]
 8007d6a:	68ba      	ldr	r2, [r7, #8]
 8007d6c:	429a      	cmp	r2, r3
 8007d6e:	d004      	beq.n	8007d7a <sl_wfx_poll_for_value+0x56>
    result = SL_STATUS_TIMEOUT;
 8007d70:	2307      	movs	r3, #7
 8007d72:	617b      	str	r3, [r7, #20]
 8007d74:	e002      	b.n	8007d7c <sl_wfx_poll_for_value+0x58>
    SL_WFX_ERROR_CHECK(result);
 8007d76:	bf00      	nop
 8007d78:	e000      	b.n	8007d7c <sl_wfx_poll_for_value+0x58>
  }

  error_handler:
 8007d7a:	bf00      	nop
  return result;
 8007d7c:	697b      	ldr	r3, [r7, #20]
}
 8007d7e:	4618      	mov	r0, r3
 8007d80:	3718      	adds	r7, #24
 8007d82:	46bd      	mov	sp, r7
 8007d84:	bd80      	pop	{r7, pc}

08007d86 <sl_wfx_compare_keysets>:
 * @param firmware_keyset is the 8 first bytes of the firmware
 * @return SL_STATUS_OK if the firmware is compatible with the WF200,
 * SL_STATUS_WIFI_INVALID_KEY otherwise
 *****************************************************************************/
static sl_status_t sl_wfx_compare_keysets(uint8_t chip_keyset, char *firmware_keyset)
{
 8007d86:	b580      	push	{r7, lr}
 8007d88:	b084      	sub	sp, #16
 8007d8a:	af00      	add	r7, sp, #0
 8007d8c:	4603      	mov	r3, r0
 8007d8e:	6039      	str	r1, [r7, #0]
 8007d90:	71fb      	strb	r3, [r7, #7]
  sl_status_t result;
  char        keyset_string[3];
  uint8_t     keyset_value;

  keyset_string[0] = *(firmware_keyset + 6);
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	799b      	ldrb	r3, [r3, #6]
 8007d96:	723b      	strb	r3, [r7, #8]
  keyset_string[1] = *(firmware_keyset + 7);
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	79db      	ldrb	r3, [r3, #7]
 8007d9c:	727b      	strb	r3, [r7, #9]
  keyset_string[2] = '\0';
 8007d9e:	2300      	movs	r3, #0
 8007da0:	72bb      	strb	r3, [r7, #10]
  keyset_value     = (uint8_t)strtoul(keyset_string, NULL, 16);
 8007da2:	f107 0308 	add.w	r3, r7, #8
 8007da6:	2210      	movs	r2, #16
 8007da8:	2100      	movs	r1, #0
 8007daa:	4618      	mov	r0, r3
 8007dac:	f012 fa26 	bl	801a1fc <strtoul>
 8007db0:	4603      	mov	r3, r0
 8007db2:	72fb      	strb	r3, [r7, #11]

  if (keyset_value == chip_keyset) {
 8007db4:	7afa      	ldrb	r2, [r7, #11]
 8007db6:	79fb      	ldrb	r3, [r7, #7]
 8007db8:	429a      	cmp	r2, r3
 8007dba:	d102      	bne.n	8007dc2 <sl_wfx_compare_keysets+0x3c>
    result = SL_STATUS_OK;
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	60fb      	str	r3, [r7, #12]
 8007dc0:	e002      	b.n	8007dc8 <sl_wfx_compare_keysets+0x42>
  } else {
    result = SL_STATUS_WIFI_INVALID_KEY;
 8007dc2:	f640 3301 	movw	r3, #2817	; 0xb01
 8007dc6:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
}
 8007dca:	4618      	mov	r0, r3
 8007dcc:	3710      	adds	r7, #16
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	bd80      	pop	{r7, pc}
	...

08007dd4 <sl_wfx_get_status_code>:
 * @param wfx_status is the status returned by the WFx
 * @param command_id is the ID of the command
 * @return corresponding driver status code enumerated in sl_status_t
 *****************************************************************************/
sl_status_t sl_wfx_get_status_code(uint32_t wfx_status, uint8_t command_id)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b084      	sub	sp, #16
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
 8007ddc:	460b      	mov	r3, r1
 8007dde:	70fb      	strb	r3, [r7, #3]
  sl_status_t result;

  if (command_id & SL_WFX_MSG_ID_GENERAL_API_MASK) {
 8007de0:	78fb      	ldrb	r3, [r7, #3]
 8007de2:	f003 0320 	and.w	r3, r3, #32
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d05b      	beq.n	8007ea2 <sl_wfx_get_status_code+0xce>
    switch (wfx_status) {
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	f241 2256 	movw	r2, #4694	; 0x1256
 8007df0:	4293      	cmp	r3, r2
 8007df2:	d045      	beq.n	8007e80 <sl_wfx_get_status_code+0xac>
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	f241 2256 	movw	r2, #4694	; 0x1256
 8007dfa:	4293      	cmp	r3, r2
 8007dfc:	d84e      	bhi.n	8007e9c <sl_wfx_get_status_code+0xc8>
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	f241 2234 	movw	r2, #4660	; 0x1234
 8007e04:	4293      	cmp	r3, r2
 8007e06:	d038      	beq.n	8007e7a <sl_wfx_get_status_code+0xa6>
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	f241 2234 	movw	r2, #4660	; 0x1234
 8007e0e:	4293      	cmp	r3, r2
 8007e10:	d844      	bhi.n	8007e9c <sl_wfx_get_status_code+0xc8>
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2baf      	cmp	r3, #175	; 0xaf
 8007e16:	d033      	beq.n	8007e80 <sl_wfx_get_status_code+0xac>
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2baf      	cmp	r3, #175	; 0xaf
 8007e1c:	d83e      	bhi.n	8007e9c <sl_wfx_get_status_code+0xc8>
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2b9e      	cmp	r3, #158	; 0x9e
 8007e22:	d02a      	beq.n	8007e7a <sl_wfx_get_status_code+0xa6>
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2b9e      	cmp	r3, #158	; 0x9e
 8007e28:	d838      	bhi.n	8007e9c <sl_wfx_get_status_code+0xc8>
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2b8d      	cmp	r3, #141	; 0x8d
 8007e2e:	d027      	beq.n	8007e80 <sl_wfx_get_status_code+0xac>
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2b8d      	cmp	r3, #141	; 0x8d
 8007e34:	d832      	bhi.n	8007e9c <sl_wfx_get_status_code+0xc8>
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2b7c      	cmp	r3, #124	; 0x7c
 8007e3a:	d021      	beq.n	8007e80 <sl_wfx_get_status_code+0xac>
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2b7c      	cmp	r3, #124	; 0x7c
 8007e40:	d82c      	bhi.n	8007e9c <sl_wfx_get_status_code+0xc8>
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	2b6b      	cmp	r3, #107	; 0x6b
 8007e46:	d01b      	beq.n	8007e80 <sl_wfx_get_status_code+0xac>
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2b6b      	cmp	r3, #107	; 0x6b
 8007e4c:	d826      	bhi.n	8007e9c <sl_wfx_get_status_code+0xc8>
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2b04      	cmp	r3, #4
 8007e52:	d80f      	bhi.n	8007e74 <sl_wfx_get_status_code+0xa0>
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2b04      	cmp	r3, #4
 8007e58:	d820      	bhi.n	8007e9c <sl_wfx_get_status_code+0xc8>
 8007e5a:	a201      	add	r2, pc, #4	; (adr r2, 8007e60 <sl_wfx_get_status_code+0x8c>)
 8007e5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e60:	08007e7b 	.word	0x08007e7b
 8007e64:	08007e81 	.word	0x08007e81
 8007e68:	08007e87 	.word	0x08007e87
 8007e6c:	08007e8d 	.word	0x08007e8d
 8007e70:	08007e95 	.word	0x08007e95
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2b5a      	cmp	r3, #90	; 0x5a
 8007e78:	d110      	bne.n	8007e9c <sl_wfx_get_status_code+0xc8>
      case SL_WFX_STATUS_SUCCESS:
      case SL_WFX_MAC_KEY_STATUS_SUCCESS:
      case SL_WFX_PUB_KEY_EXCHANGE_STATUS_SUCCESS:
      case SL_WFX_PREVENT_ROLLBACK_CNF_SUCCESS:
        result = SL_STATUS_OK;
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	60fb      	str	r3, [r7, #12]
        break;
 8007e7e:	e075      	b.n	8007f6c <sl_wfx_get_status_code+0x198>
      case SL_WFX_MAC_KEY_STATUS_FAILED_KEY_ALREADY_BURNED:
      case SL_WFX_MAC_KEY_STATUS_FAILED_RAM_MODE_NOT_ALLOWED:
      case SL_WFX_MAC_KEY_STATUS_FAILED_UNKNOWN_MODE:
      case SL_WFX_PUB_KEY_EXCHANGE_STATUS_FAILED:
      case SL_WFX_PREVENT_ROLLBACK_CNF_WRONG_MAGIC_WORD:
        result = SL_STATUS_FAIL;
 8007e80:	2301      	movs	r3, #1
 8007e82:	60fb      	str	r3, [r7, #12]
        break;
 8007e84:	e072      	b.n	8007f6c <sl_wfx_get_status_code+0x198>
      case SL_WFX_INVALID_PARAMETER:
        result = SL_STATUS_INVALID_PARAMETER;
 8007e86:	2321      	movs	r3, #33	; 0x21
 8007e88:	60fb      	str	r3, [r7, #12]
        break;
 8007e8a:	e06f      	b.n	8007f6c <sl_wfx_get_status_code+0x198>
      case SL_WFX_STATUS_GPIO_WARNING:
        result = SL_STATUS_WIFI_WARNING;
 8007e8c:	f640 3304 	movw	r3, #2820	; 0xb04
 8007e90:	60fb      	str	r3, [r7, #12]
        break;
 8007e92:	e06b      	b.n	8007f6c <sl_wfx_get_status_code+0x198>
      case SL_WFX_ERROR_UNSUPPORTED_MSG_ID:
        result = SL_STATUS_WIFI_UNSUPPORTED_MESSAGE_ID;
 8007e94:	f640 3303 	movw	r3, #2819	; 0xb03
 8007e98:	60fb      	str	r3, [r7, #12]
        break;
 8007e9a:	e067      	b.n	8007f6c <sl_wfx_get_status_code+0x198>
      default:
        result = SL_STATUS_FAIL;
 8007e9c:	2301      	movs	r3, #1
 8007e9e:	60fb      	str	r3, [r7, #12]
        break;
 8007ea0:	e064      	b.n	8007f6c <sl_wfx_get_status_code+0x198>
    }
  } else {
    switch (wfx_status) {
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2b14      	cmp	r3, #20
 8007ea6:	d85e      	bhi.n	8007f66 <sl_wfx_get_status_code+0x192>
 8007ea8:	a201      	add	r2, pc, #4	; (adr r2, 8007eb0 <sl_wfx_get_status_code+0xdc>)
 8007eaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007eae:	bf00      	nop
 8007eb0:	08007f05 	.word	0x08007f05
 8007eb4:	08007f0b 	.word	0x08007f0b
 8007eb8:	08007f11 	.word	0x08007f11
 8007ebc:	08007f19 	.word	0x08007f19
 8007ec0:	08007f1f 	.word	0x08007f1f
 8007ec4:	08007f27 	.word	0x08007f27
 8007ec8:	08007f2f 	.word	0x08007f2f
 8007ecc:	08007f37 	.word	0x08007f37
 8007ed0:	08007f3f 	.word	0x08007f3f
 8007ed4:	08007f47 	.word	0x08007f47
 8007ed8:	08007f4f 	.word	0x08007f4f
 8007edc:	08007f67 	.word	0x08007f67
 8007ee0:	08007f67 	.word	0x08007f67
 8007ee4:	08007f67 	.word	0x08007f67
 8007ee8:	08007f67 	.word	0x08007f67
 8007eec:	08007f67 	.word	0x08007f67
 8007ef0:	08007f67 	.word	0x08007f67
 8007ef4:	08007f67 	.word	0x08007f67
 8007ef8:	08007f67 	.word	0x08007f67
 8007efc:	08007f57 	.word	0x08007f57
 8007f00:	08007f5f 	.word	0x08007f5f
      case WFM_STATUS_SUCCESS:
        result = SL_STATUS_OK;
 8007f04:	2300      	movs	r3, #0
 8007f06:	60fb      	str	r3, [r7, #12]
        break;
 8007f08:	e030      	b.n	8007f6c <sl_wfx_get_status_code+0x198>
      case WFM_STATUS_INVALID_PARAMETER:
        result = SL_STATUS_INVALID_PARAMETER;
 8007f0a:	2321      	movs	r3, #33	; 0x21
 8007f0c:	60fb      	str	r3, [r7, #12]
        break;
 8007f0e:	e02d      	b.n	8007f6c <sl_wfx_get_status_code+0x198>
      case WFM_STATUS_WRONG_STATE:
        result = SL_STATUS_WIFI_WRONG_STATE;
 8007f10:	f640 3318 	movw	r3, #2840	; 0xb18
 8007f14:	60fb      	str	r3, [r7, #12]
        break;
 8007f16:	e029      	b.n	8007f6c <sl_wfx_get_status_code+0x198>
      case WFM_STATUS_GENERAL_FAILURE:
        result = SL_STATUS_FAIL;
 8007f18:	2301      	movs	r3, #1
 8007f1a:	60fb      	str	r3, [r7, #12]
        break;
 8007f1c:	e026      	b.n	8007f6c <sl_wfx_get_status_code+0x198>
      case WFM_STATUS_CHANNEL_NOT_ALLOWED:
        result = SL_STATUS_WIFI_CHANNEL_NOT_ALLOWED;
 8007f1e:	f640 3319 	movw	r3, #2841	; 0xb19
 8007f22:	60fb      	str	r3, [r7, #12]
        break;
 8007f24:	e022      	b.n	8007f6c <sl_wfx_get_status_code+0x198>
      case WFM_STATUS_WARNING:
        result = SL_STATUS_WIFI_WARNING;
 8007f26:	f640 3304 	movw	r3, #2820	; 0xb04
 8007f2a:	60fb      	str	r3, [r7, #12]
        break;
 8007f2c:	e01e      	b.n	8007f6c <sl_wfx_get_status_code+0x198>
      case WFM_STATUS_NO_MATCHING_AP:
        result = SL_STATUS_WIFI_NO_MATCHING_AP;
 8007f2e:	f640 331a 	movw	r3, #2842	; 0xb1a
 8007f32:	60fb      	str	r3, [r7, #12]
        break;
 8007f34:	e01a      	b.n	8007f6c <sl_wfx_get_status_code+0x198>
      case WFM_STATUS_CONNECTION_ABORTED:
        result = SL_STATUS_WIFI_CONNECTION_ABORTED;
 8007f36:	f640 331b 	movw	r3, #2843	; 0xb1b
 8007f3a:	60fb      	str	r3, [r7, #12]
        break;
 8007f3c:	e016      	b.n	8007f6c <sl_wfx_get_status_code+0x198>
      case WFM_STATUS_CONNECTION_TIMEOUT:
        result = SL_STATUS_WIFI_CONNECTION_TIMEOUT;
 8007f3e:	f640 331c 	movw	r3, #2844	; 0xb1c
 8007f42:	60fb      	str	r3, [r7, #12]
        break;
 8007f44:	e012      	b.n	8007f6c <sl_wfx_get_status_code+0x198>
      case WFM_STATUS_CONNECTION_REJECTED_BY_AP:
        result = SL_STATUS_WIFI_CONNECTION_REJECTED_BY_AP;
 8007f46:	f640 331d 	movw	r3, #2845	; 0xb1d
 8007f4a:	60fb      	str	r3, [r7, #12]
        break;
 8007f4c:	e00e      	b.n	8007f6c <sl_wfx_get_status_code+0x198>
      case WFM_STATUS_CONNECTION_AUTH_FAILURE:
        result = SL_STATUS_WIFI_CONNECTION_AUTH_FAILURE;
 8007f4e:	f640 331e 	movw	r3, #2846	; 0xb1e
 8007f52:	60fb      	str	r3, [r7, #12]
        break;
 8007f54:	e00a      	b.n	8007f6c <sl_wfx_get_status_code+0x198>
      case WFM_STATUS_RETRY_EXCEEDED:
        result = SL_STATUS_WIFI_RETRY_EXCEEDED;
 8007f56:	f640 331f 	movw	r3, #2847	; 0xb1f
 8007f5a:	60fb      	str	r3, [r7, #12]
        break;
 8007f5c:	e006      	b.n	8007f6c <sl_wfx_get_status_code+0x198>
      case WFM_STATUS_TX_LIFETIME_EXCEEDED:
        result = SL_STATUS_WIFI_TX_LIFETIME_EXCEEDED;
 8007f5e:	f44f 6332 	mov.w	r3, #2848	; 0xb20
 8007f62:	60fb      	str	r3, [r7, #12]
        break;
 8007f64:	e002      	b.n	8007f6c <sl_wfx_get_status_code+0x198>
      default:
        result = SL_STATUS_FAIL;
 8007f66:	2301      	movs	r3, #1
 8007f68:	60fb      	str	r3, [r7, #12]
        break;
 8007f6a:	bf00      	nop
    }
  }

#if (SL_WFX_DEBUG_MASK & SL_WFX_DEBUG_ERROR)
  if (result != SL_STATUS_OK && result != SL_STATUS_WIFI_WARNING) {
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d008      	beq.n	8007f84 <sl_wfx_get_status_code+0x1b0>
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	f640 3204 	movw	r2, #2820	; 0xb04
 8007f78:	4293      	cmp	r3, r2
 8007f7a:	d003      	beq.n	8007f84 <sl_wfx_get_status_code+0x1b0>
    sl_wfx_host_log("Cnf status %u\n", result);
 8007f7c:	68f9      	ldr	r1, [r7, #12]
 8007f7e:	4804      	ldr	r0, [pc, #16]	; (8007f90 <sl_wfx_get_status_code+0x1bc>)
 8007f80:	f000 fafc 	bl	800857c <sl_wfx_host_log>
  }
#endif
  return result;
 8007f84:	68fb      	ldr	r3, [r7, #12]
}
 8007f86:	4618      	mov	r0, r3
 8007f88:	3710      	adds	r7, #16
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	bd80      	pop	{r7, pc}
 8007f8e:	bf00      	nop
 8007f90:	0801b4cc 	.word	0x0801b4cc

08007f94 <sl_wfx_allocate_command_buffer>:
 *****************************************************************************/
sl_status_t sl_wfx_allocate_command_buffer(sl_wfx_generic_message_t **buffer,
                                           uint32_t command_id,
                                           sl_wfx_buffer_type_t type,
                                           uint32_t buffer_size)
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b086      	sub	sp, #24
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	60f8      	str	r0, [r7, #12]
 8007f9c:	60b9      	str	r1, [r7, #8]
 8007f9e:	603b      	str	r3, [r7, #0]
 8007fa0:	4613      	mov	r3, r2
 8007fa2:	71fb      	strb	r3, [r7, #7]
    *buffer = (sl_wfx_generic_message_t *)(((uint8_t *)*buffer) + SL_WFX_SECURE_LINK_HEADER_SIZE);
  } else
#endif //SL_WFX_USE_SECURE_LINK
  {
    SL_WFX_UNUSED_PARAMETER(command_id);
    result = sl_wfx_host_allocate_buffer((void **)buffer,
 8007fa4:	79fb      	ldrb	r3, [r7, #7]
 8007fa6:	683a      	ldr	r2, [r7, #0]
 8007fa8:	4619      	mov	r1, r3
 8007faa:	68f8      	ldr	r0, [r7, #12]
 8007fac:	f000 fab8 	bl	8008520 <sl_wfx_host_allocate_buffer>
 8007fb0:	6178      	str	r0, [r7, #20]
                                         type,
                                         buffer_size);
    SL_WFX_ERROR_CHECK(result);
 8007fb2:	697b      	ldr	r3, [r7, #20]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d107      	bne.n	8007fc8 <sl_wfx_allocate_command_buffer+0x34>

    memset((*buffer), 0, buffer_size);
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	683a      	ldr	r2, [r7, #0]
 8007fbe:	2100      	movs	r1, #0
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	f011 feb5 	bl	8019d30 <memset>
 8007fc6:	e000      	b.n	8007fca <sl_wfx_allocate_command_buffer+0x36>
    SL_WFX_ERROR_CHECK(result);
 8007fc8:	bf00      	nop
  }

  error_handler:
  return result;
 8007fca:	697b      	ldr	r3, [r7, #20]
}
 8007fcc:	4618      	mov	r0, r3
 8007fce:	3718      	adds	r7, #24
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	bd80      	pop	{r7, pc}

08007fd4 <sl_wfx_free_command_buffer>:
 * @param command_id is the ID of the command to check if encryption is required
 * @param type of the buffer to allocate
 * @return SL_STATUS_OK if the values are retrieved correctly, SL_STATUS_FAIL otherwise
 *****************************************************************************/
sl_status_t sl_wfx_free_command_buffer(sl_wfx_generic_message_t *buffer, uint32_t command_id, sl_wfx_buffer_type_t type)
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b084      	sub	sp, #16
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	60f8      	str	r0, [r7, #12]
 8007fdc:	60b9      	str	r1, [r7, #8]
 8007fde:	4613      	mov	r3, r2
 8007fe0:	71fb      	strb	r3, [r7, #7]
    return sl_wfx_host_free_buffer((uint8_t *)buffer - SL_WFX_SECURE_LINK_HEADER_SIZE, type);
  } else
#endif //SL_WFX_USE_SECURE_LINK
  {
    SL_WFX_UNUSED_PARAMETER(command_id);
    return sl_wfx_host_free_buffer(buffer, type);
 8007fe2:	79fb      	ldrb	r3, [r7, #7]
 8007fe4:	4619      	mov	r1, r3
 8007fe6:	68f8      	ldr	r0, [r7, #12]
 8007fe8:	f000 faac 	bl	8008544 <sl_wfx_host_free_buffer>
 8007fec:	4603      	mov	r3, r0
  }
}
 8007fee:	4618      	mov	r0, r3
 8007ff0:	3710      	adds	r7, #16
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	bd80      	pop	{r7, pc}
	...

08007ff8 <sl_wfx_host_init>:
}host_context;

/**************************************************************************//**
 * Initialize the host resources
 *****************************************************************************/
sl_status_t sl_wfx_host_init (void) {
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	af00      	add	r7, sp, #0
  host_context.sl_wfx_firmware_download_progress = 0;
 8007ffc:	4b16      	ldr	r3, [pc, #88]	; (8008058 <sl_wfx_host_init+0x60>)
 8007ffe:	2200      	movs	r2, #0
 8008000:	601a      	str	r2, [r3, #0]
  wifi_scan_sem = xSemaphoreCreateBinary();
 8008002:	2203      	movs	r2, #3
 8008004:	2100      	movs	r1, #0
 8008006:	2001      	movs	r0, #1
 8008008:	f001 fd9c 	bl	8009b44 <xQueueGenericCreate>
 800800c:	4603      	mov	r3, r0
 800800e:	4a13      	ldr	r2, [pc, #76]	; (800805c <sl_wfx_host_init+0x64>)
 8008010:	6013      	str	r3, [r2, #0]
  sl_wfx_driver_mutex = xSemaphoreCreateBinary();
 8008012:	2203      	movs	r2, #3
 8008014:	2100      	movs	r1, #0
 8008016:	2001      	movs	r0, #1
 8008018:	f001 fd94 	bl	8009b44 <xQueueGenericCreate>
 800801c:	4603      	mov	r3, r0
 800801e:	4a10      	ldr	r2, [pc, #64]	; (8008060 <sl_wfx_host_init+0x68>)
 8008020:	6013      	str	r3, [r2, #0]
  xSemaphoreGive(sl_wfx_driver_mutex);
 8008022:	4b0f      	ldr	r3, [pc, #60]	; (8008060 <sl_wfx_host_init+0x68>)
 8008024:	6818      	ldr	r0, [r3, #0]
 8008026:	2300      	movs	r3, #0
 8008028:	2200      	movs	r2, #0
 800802a:	2100      	movs	r1, #0
 800802c:	f001 fe12 	bl	8009c54 <xQueueGenericSend>
//  sl_wfx_driver_mutex = true;
  sl_wfx_wake_up_sem = xSemaphoreCreateBinary();
 8008030:	2203      	movs	r2, #3
 8008032:	2100      	movs	r1, #0
 8008034:	2001      	movs	r0, #1
 8008036:	f001 fd85 	bl	8009b44 <xQueueGenericCreate>
 800803a:	4603      	mov	r3, r0
 800803c:	4a09      	ldr	r2, [pc, #36]	; (8008064 <sl_wfx_host_init+0x6c>)
 800803e:	6013      	str	r3, [r2, #0]
  sl_wfx_confirmation_queue = xQueueCreate(1, sizeof(uint8_t));
 8008040:	2200      	movs	r2, #0
 8008042:	2101      	movs	r1, #1
 8008044:	2001      	movs	r0, #1
 8008046:	f001 fd7d 	bl	8009b44 <xQueueGenericCreate>
 800804a:	4603      	mov	r3, r0
 800804c:	4a06      	ldr	r2, [pc, #24]	; (8008068 <sl_wfx_host_init+0x70>)
 800804e:	6013      	str	r3, [r2, #0]

  return SL_STATUS_OK;
 8008050:	2300      	movs	r3, #0
}
 8008052:	4618      	mov	r0, r3
 8008054:	bd80      	pop	{r7, pc}
 8008056:	bf00      	nop
 8008058:	20001130 	.word	0x20001130
 800805c:	2000112c 	.word	0x2000112c
 8008060:	20001128 	.word	0x20001128
 8008064:	20001124 	.word	0x20001124
 8008068:	20001120 	.word	0x20001120

0800806c <sl_wfx_host_get_firmware_data>:

/**************************************************************************//**
 * Get a firmware chunk
 *****************************************************************************/
sl_status_t sl_wfx_host_get_firmware_data (const uint8_t** data, uint32_t data_size) {
 800806c:	b480      	push	{r7}
 800806e:	b083      	sub	sp, #12
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
 8008074:	6039      	str	r1, [r7, #0]
  *data = &sl_wfx_firmware[host_context.sl_wfx_firmware_download_progress];
 8008076:	4b09      	ldr	r3, [pc, #36]	; (800809c <sl_wfx_host_get_firmware_data+0x30>)
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	4a09      	ldr	r2, [pc, #36]	; (80080a0 <sl_wfx_host_get_firmware_data+0x34>)
 800807c:	441a      	add	r2, r3
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	601a      	str	r2, [r3, #0]
  host_context.sl_wfx_firmware_download_progress += data_size;
 8008082:	4b06      	ldr	r3, [pc, #24]	; (800809c <sl_wfx_host_get_firmware_data+0x30>)
 8008084:	681a      	ldr	r2, [r3, #0]
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	4413      	add	r3, r2
 800808a:	4a04      	ldr	r2, [pc, #16]	; (800809c <sl_wfx_host_get_firmware_data+0x30>)
 800808c:	6013      	str	r3, [r2, #0]
  
  return SL_STATUS_OK;
 800808e:	2300      	movs	r3, #0
}
 8008090:	4618      	mov	r0, r3
 8008092:	370c      	adds	r7, #12
 8008094:	46bd      	mov	sp, r7
 8008096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809a:	4770      	bx	lr
 800809c:	20001130 	.word	0x20001130
 80080a0:	0801ea84 	.word	0x0801ea84

080080a4 <sl_wfx_host_get_firmware_size>:

/**************************************************************************//**
 * Get the firmware size
 *****************************************************************************/
sl_status_t sl_wfx_host_get_firmware_size (uint32_t* firmware_size) {
 80080a4:	b480      	push	{r7}
 80080a6:	b083      	sub	sp, #12
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
  *firmware_size = sizeof(sl_wfx_firmware);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	4a04      	ldr	r2, [pc, #16]	; (80080c0 <sl_wfx_host_get_firmware_size+0x1c>)
 80080b0:	601a      	str	r2, [r3, #0]
  
  return SL_STATUS_OK;
 80080b2:	2300      	movs	r3, #0
}
 80080b4:	4618      	mov	r0, r3
 80080b6:	370c      	adds	r7, #12
 80080b8:	46bd      	mov	sp, r7
 80080ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080be:	4770      	bx	lr
 80080c0:	0004b850 	.word	0x0004b850

080080c4 <sl_wfx_host_get_pds_data>:

/**************************************************************************//**
 * Get a PDS chunk
 *****************************************************************************/
sl_status_t sl_wfx_host_get_pds_data (const char **pds_data, uint16_t index) {
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b082      	sub	sp, #8
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
 80080cc:	460b      	mov	r3, r1
 80080ce:	807b      	strh	r3, [r7, #2]
  /* Manage dynamically the PDS in function of the chip connected */
  if (strncmp("WFM200", (char *)sl_wfx_context->wfx_opn, 6) == 0) {
 80080d0:	4b0e      	ldr	r3, [pc, #56]	; (800810c <sl_wfx_host_get_pds_data+0x48>)
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80080d8:	2206      	movs	r2, #6
 80080da:	4619      	mov	r1, r3
 80080dc:	480c      	ldr	r0, [pc, #48]	; (8008110 <sl_wfx_host_get_pds_data+0x4c>)
 80080de:	f011 fff3 	bl	801a0c8 <strncmp>
 80080e2:	4603      	mov	r3, r0
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d106      	bne.n	80080f6 <sl_wfx_host_get_pds_data+0x32>
    *pds_data = pds_table_brd8023a[index];
 80080e8:	887b      	ldrh	r3, [r7, #2]
 80080ea:	4a0a      	ldr	r2, [pc, #40]	; (8008114 <sl_wfx_host_get_pds_data+0x50>)
 80080ec:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	601a      	str	r2, [r3, #0]
 80080f4:	e005      	b.n	8008102 <sl_wfx_host_get_pds_data+0x3e>
  } else {
    *pds_data = pds_table_brd8022a[index];
 80080f6:	887b      	ldrh	r3, [r7, #2]
 80080f8:	4a07      	ldr	r2, [pc, #28]	; (8008118 <sl_wfx_host_get_pds_data+0x54>)
 80080fa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	601a      	str	r2, [r3, #0]
  }
  
  return SL_STATUS_OK;
 8008102:	2300      	movs	r3, #0
}
 8008104:	4618      	mov	r0, r3
 8008106:	3708      	adds	r7, #8
 8008108:	46bd      	mov	sp, r7
 800810a:	bd80      	pop	{r7, pc}
 800810c:	200007e8 	.word	0x200007e8
 8008110:	0801b768 	.word	0x0801b768
 8008114:	0801ea6c 	.word	0x0801ea6c
 8008118:	0801ea54 	.word	0x0801ea54

0800811c <sl_wfx_host_get_pds_size>:

/**************************************************************************//**
 * Get PDS size
 *****************************************************************************/
sl_status_t sl_wfx_host_get_pds_size(uint16_t *pds_size)
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b082      	sub	sp, #8
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
  /* Manage dynamically the PDS in function of the chip connected */
  if (strncmp("WFM200", (char *)sl_wfx_context->wfx_opn, 6) == 0) {
 8008124:	4b0b      	ldr	r3, [pc, #44]	; (8008154 <sl_wfx_host_get_pds_size+0x38>)
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800812c:	2206      	movs	r2, #6
 800812e:	4619      	mov	r1, r3
 8008130:	4809      	ldr	r0, [pc, #36]	; (8008158 <sl_wfx_host_get_pds_size+0x3c>)
 8008132:	f011 ffc9 	bl	801a0c8 <strncmp>
 8008136:	4603      	mov	r3, r0
 8008138:	2b00      	cmp	r3, #0
 800813a:	d103      	bne.n	8008144 <sl_wfx_host_get_pds_size+0x28>
    *pds_size = SL_WFX_ARRAY_COUNT(pds_table_brd8023a);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2206      	movs	r2, #6
 8008140:	801a      	strh	r2, [r3, #0]
 8008142:	e002      	b.n	800814a <sl_wfx_host_get_pds_size+0x2e>
  } else {
    *pds_size = SL_WFX_ARRAY_COUNT(pds_table_brd8022a);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2206      	movs	r2, #6
 8008148:	801a      	strh	r2, [r3, #0]
  }
  
  return SL_STATUS_OK;
 800814a:	2300      	movs	r3, #0
}
 800814c:	4618      	mov	r0, r3
 800814e:	3708      	adds	r7, #8
 8008150:	46bd      	mov	sp, r7
 8008152:	bd80      	pop	{r7, pc}
 8008154:	200007e8 	.word	0x200007e8
 8008158:	0801b768 	.word	0x0801b768

0800815c <sl_wfx_host_deinit>:

/**************************************************************************//**
 * Deinit the host resources
 *****************************************************************************/
sl_status_t sl_wfx_host_deinit (void) {
 800815c:	b480      	push	{r7}
 800815e:	af00      	add	r7, sp, #0
  //Commented for now, waiting for driver fix
  //vQueueDelete(wifi_event_queue);
  //vSemaphoreDelete(sl_wfx_driver_mutex);
  //vSemaphoreDelete(sl_wfx_wake_up_sem);

  return SL_STATUS_OK;
 8008160:	2300      	movs	r3, #0
}
 8008162:	4618      	mov	r0, r3
 8008164:	46bd      	mov	sp, r7
 8008166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816a:	4770      	bx	lr

0800816c <sl_wfx_host_reset_chip>:

/**************************************************************************//**
 * Reset the Wi-Fi device
 *****************************************************************************/
sl_status_t sl_wfx_host_reset_chip(void) {
 800816c:	b580      	push	{r7, lr}
 800816e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(WFM_RESET_GPIO_Port, WFM_RESET_Pin, GPIO_PIN_RESET);
 8008170:	2200      	movs	r2, #0
 8008172:	2101      	movs	r1, #1
 8008174:	4808      	ldr	r0, [pc, #32]	; (8008198 <sl_wfx_host_reset_chip+0x2c>)
 8008176:	f7fc fb79 	bl	800486c <HAL_GPIO_WritePin>
  HAL_Delay(10);
 800817a:	200a      	movs	r0, #10
 800817c:	f7fb fa5c 	bl	8003638 <HAL_Delay>
  HAL_GPIO_WritePin(WFM_RESET_GPIO_Port, WFM_RESET_Pin, GPIO_PIN_SET);
 8008180:	2201      	movs	r2, #1
 8008182:	2101      	movs	r1, #1
 8008184:	4804      	ldr	r0, [pc, #16]	; (8008198 <sl_wfx_host_reset_chip+0x2c>)
 8008186:	f7fc fb71 	bl	800486c <HAL_GPIO_WritePin>
  HAL_Delay(10);
 800818a:	200a      	movs	r0, #10
 800818c:	f7fb fa54 	bl	8003638 <HAL_Delay>

  return SL_STATUS_OK;
 8008190:	2300      	movs	r3, #0
}
 8008192:	4618      	mov	r0, r3
 8008194:	bd80      	pop	{r7, pc}
 8008196:	bf00      	nop
 8008198:	40020800 	.word	0x40020800

0800819c <sl_wfx_host_set_wake_up_pin>:
}

/**************************************************************************//**
 * Set or reset the wake-up pin 
 *****************************************************************************/
sl_status_t sl_wfx_host_set_wake_up_pin (uint8_t state) {
 800819c:	b580      	push	{r7, lr}
 800819e:	b082      	sub	sp, #8
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	4603      	mov	r3, r0
 80081a4:	71fb      	strb	r3, [r7, #7]
  if (state > 0) {
 80081a6:	79fb      	ldrb	r3, [r7, #7]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d006      	beq.n	80081ba <sl_wfx_host_set_wake_up_pin+0x1e>
    HAL_GPIO_WritePin(WFM_WUP_GPIO_Port, WFM_WUP_Pin, GPIO_PIN_SET);
 80081ac:	2201      	movs	r2, #1
 80081ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80081b2:	4807      	ldr	r0, [pc, #28]	; (80081d0 <sl_wfx_host_set_wake_up_pin+0x34>)
 80081b4:	f7fc fb5a 	bl	800486c <HAL_GPIO_WritePin>
 80081b8:	e005      	b.n	80081c6 <sl_wfx_host_set_wake_up_pin+0x2a>
  } else {
    HAL_GPIO_WritePin(WFM_WUP_GPIO_Port, WFM_WUP_Pin, GPIO_PIN_RESET);
 80081ba:	2200      	movs	r2, #0
 80081bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80081c0:	4803      	ldr	r0, [pc, #12]	; (80081d0 <sl_wfx_host_set_wake_up_pin+0x34>)
 80081c2:	f7fc fb53 	bl	800486c <HAL_GPIO_WritePin>
  }
  
  return SL_STATUS_OK;
 80081c6:	2300      	movs	r3, #0
}
 80081c8:	4618      	mov	r0, r3
 80081ca:	3708      	adds	r7, #8
 80081cc:	46bd      	mov	sp, r7
 80081ce:	bd80      	pop	{r7, pc}
 80081d0:	40020400 	.word	0x40020400

080081d4 <sl_wfx_host_wait_for_wake_up>:

/**************************************************************************//**
 * Wait for a wake-up
 *****************************************************************************/
sl_status_t sl_wfx_host_wait_for_wake_up (void) {
 80081d4:	b580      	push	{r7, lr}
 80081d6:	af00      	add	r7, sp, #0
  xSemaphoreTake(sl_wfx_wake_up_sem, 0);
 80081d8:	4b07      	ldr	r3, [pc, #28]	; (80081f8 <sl_wfx_host_wait_for_wake_up+0x24>)
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	2100      	movs	r1, #0
 80081de:	4618      	mov	r0, r3
 80081e0:	f002 f83e 	bl	800a260 <xQueueSemaphoreTake>
  xSemaphoreTake(sl_wfx_wake_up_sem, 3/portTICK_PERIOD_MS);
 80081e4:	4b04      	ldr	r3, [pc, #16]	; (80081f8 <sl_wfx_host_wait_for_wake_up+0x24>)
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	2103      	movs	r1, #3
 80081ea:	4618      	mov	r0, r3
 80081ec:	f002 f838 	bl	800a260 <xQueueSemaphoreTake>

  return SL_STATUS_OK;
 80081f0:	2300      	movs	r3, #0
}
 80081f2:	4618      	mov	r0, r3
 80081f4:	bd80      	pop	{r7, pc}
 80081f6:	bf00      	nop
 80081f8:	20001124 	.word	0x20001124

080081fc <sl_wfx_host_sleep_grant>:
/**************************************************************************//**
 * Grant the Wi-Fi device to go to sleep mode
 *****************************************************************************/
sl_status_t sl_wfx_host_sleep_grant (sl_wfx_host_bus_transfer_type_t type,
                                     sl_wfx_register_address_t address,
                                     uint32_t length) {
 80081fc:	b480      	push	{r7}
 80081fe:	b083      	sub	sp, #12
 8008200:	af00      	add	r7, sp, #0
 8008202:	4603      	mov	r3, r0
 8008204:	603a      	str	r2, [r7, #0]
 8008206:	71fb      	strb	r3, [r7, #7]
 8008208:	460b      	mov	r3, r1
 800820a:	71bb      	strb	r3, [r7, #6]
  /* To be implemented depending on the application */ 
  return SL_STATUS_WIFI_SLEEP_GRANTED;
 800820c:	f640 3308 	movw	r3, #2824	; 0xb08
}
 8008210:	4618      	mov	r0, r3
 8008212:	370c      	adds	r7, #12
 8008214:	46bd      	mov	sp, r7
 8008216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821a:	4770      	bx	lr

0800821c <sl_wfx_host_setup_waited_event>:

/**************************************************************************//**
 * Set up a waited event
 *****************************************************************************/
sl_status_t sl_wfx_host_setup_waited_event (uint8_t event_id) {
 800821c:	b480      	push	{r7}
 800821e:	b083      	sub	sp, #12
 8008220:	af00      	add	r7, sp, #0
 8008222:	4603      	mov	r3, r0
 8008224:	71fb      	strb	r3, [r7, #7]
  host_context.waited_event_id = event_id;
 8008226:	4a05      	ldr	r2, [pc, #20]	; (800823c <sl_wfx_host_setup_waited_event+0x20>)
 8008228:	79fb      	ldrb	r3, [r7, #7]
 800822a:	7113      	strb	r3, [r2, #4]
  
  return SL_STATUS_OK;
 800822c:	2300      	movs	r3, #0
}
 800822e:	4618      	mov	r0, r3
 8008230:	370c      	adds	r7, #12
 8008232:	46bd      	mov	sp, r7
 8008234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008238:	4770      	bx	lr
 800823a:	bf00      	nop
 800823c:	20001130 	.word	0x20001130

08008240 <sl_wfx_host_wait_for_confirmation>:
/**************************************************************************//**
 * Wait for a confirmation
 *****************************************************************************/
sl_status_t sl_wfx_host_wait_for_confirmation (uint8_t confirmation_id,
                                               uint32_t timeout_ms,
                                               void **event_payload_out) {
 8008240:	b580      	push	{r7, lr}
 8008242:	b086      	sub	sp, #24
 8008244:	af00      	add	r7, sp, #0
 8008246:	4603      	mov	r3, r0
 8008248:	60b9      	str	r1, [r7, #8]
 800824a:	607a      	str	r2, [r7, #4]
 800824c:	73fb      	strb	r3, [r7, #15]
  uint8_t posted_event_id;
  
  for (uint32_t i = 0; i < timeout_ms; i++) {
 800824e:	2300      	movs	r3, #0
 8008250:	617b      	str	r3, [r7, #20]
 8008252:	e01b      	b.n	800828c <sl_wfx_host_wait_for_confirmation+0x4c>
    /* Wait for an event posted by the function sl_wfx_host_post_event() */
    if (xQueueReceive(sl_wfx_confirmation_queue, &posted_event_id, 1) == pdTRUE) {
 8008254:	4b12      	ldr	r3, [pc, #72]	; (80082a0 <sl_wfx_host_wait_for_confirmation+0x60>)
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	f107 0113 	add.w	r1, r7, #19
 800825c:	2201      	movs	r2, #1
 800825e:	4618      	mov	r0, r3
 8008260:	f001 ff1e 	bl	800a0a0 <xQueueReceive>
 8008264:	4603      	mov	r3, r0
 8008266:	2b01      	cmp	r3, #1
 8008268:	d10d      	bne.n	8008286 <sl_wfx_host_wait_for_confirmation+0x46>
      /* Once a message is received, check if it is the expected ID */
      if (confirmation_id == posted_event_id) {
 800826a:	7cfb      	ldrb	r3, [r7, #19]
 800826c:	7bfa      	ldrb	r2, [r7, #15]
 800826e:	429a      	cmp	r2, r3
 8008270:	d109      	bne.n	8008286 <sl_wfx_host_wait_for_confirmation+0x46>
        /* Pass the confirmation reply and return*/
        if (event_payload_out != NULL) {
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d004      	beq.n	8008282 <sl_wfx_host_wait_for_confirmation+0x42>
          *event_payload_out = sl_wfx_context->event_payload_buffer;
 8008278:	4b0a      	ldr	r3, [pc, #40]	; (80082a4 <sl_wfx_host_wait_for_confirmation+0x64>)
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	461a      	mov	r2, r3
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	601a      	str	r2, [r3, #0]
        }
        return SL_STATUS_OK;
 8008282:	2300      	movs	r3, #0
 8008284:	e007      	b.n	8008296 <sl_wfx_host_wait_for_confirmation+0x56>
  for (uint32_t i = 0; i < timeout_ms; i++) {
 8008286:	697b      	ldr	r3, [r7, #20]
 8008288:	3301      	adds	r3, #1
 800828a:	617b      	str	r3, [r7, #20]
 800828c:	697a      	ldr	r2, [r7, #20]
 800828e:	68bb      	ldr	r3, [r7, #8]
 8008290:	429a      	cmp	r2, r3
 8008292:	d3df      	bcc.n	8008254 <sl_wfx_host_wait_for_confirmation+0x14>
      }
    }
  }
  
  /* The wait for the confirmation timed out, return */
  return SL_STATUS_TIMEOUT;
 8008294:	2307      	movs	r3, #7
}
 8008296:	4618      	mov	r0, r3
 8008298:	3718      	adds	r7, #24
 800829a:	46bd      	mov	sp, r7
 800829c:	bd80      	pop	{r7, pc}
 800829e:	bf00      	nop
 80082a0:	20001120 	.word	0x20001120
 80082a4:	200007e8 	.word	0x200007e8

080082a8 <sl_wfx_host_wait>:

/**************************************************************************//**
 * Wait function
 *****************************************************************************/
sl_status_t sl_wfx_host_wait (uint32_t wait_time) {
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b082      	sub	sp, #8
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
  osDelay(wait_time);
 80082b0:	6878      	ldr	r0, [r7, #4]
 80082b2:	f001 f803 	bl	80092bc <osDelay>
  
  return SL_STATUS_OK;
 80082b6:	2300      	movs	r3, #0
}
 80082b8:	4618      	mov	r0, r3
 80082ba:	3708      	adds	r7, #8
 80082bc:	46bd      	mov	sp, r7
 80082be:	bd80      	pop	{r7, pc}

080082c0 <sl_wfx_host_post_event>:

/**************************************************************************//**
 * Post an event comming from the Wi-Fi device
 *****************************************************************************/
sl_status_t sl_wfx_host_post_event (sl_wfx_generic_message_t *event_payload) {
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b08a      	sub	sp, #40	; 0x28
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
  
  switch (event_payload->header.id) {
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	789b      	ldrb	r3, [r3, #2]
 80082cc:	3bc3      	subs	r3, #195	; 0xc3
 80082ce:	2b21      	cmp	r3, #33	; 0x21
 80082d0:	f200 80f3 	bhi.w	80084ba <sl_wfx_host_post_event+0x1fa>
 80082d4:	a201      	add	r2, pc, #4	; (adr r2, 80082dc <sl_wfx_host_post_event+0x1c>)
 80082d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082da:	bf00      	nop
 80082dc:	08008365 	.word	0x08008365
 80082e0:	0800836d 	.word	0x0800836d
 80082e4:	08008375 	.word	0x08008375
 80082e8:	080084bb 	.word	0x080084bb
 80082ec:	0800837d 	.word	0x0800837d
 80082f0:	080084bb 	.word	0x080084bb
 80082f4:	080084bb 	.word	0x080084bb
 80082f8:	08008385 	.word	0x08008385
 80082fc:	0800839b 	.word	0x0800839b
 8008300:	080083a3 	.word	0x080083a3
 8008304:	080083ab 	.word	0x080083ab
 8008308:	080083b3 	.word	0x080083b3
 800830c:	080083bb 	.word	0x080083bb
 8008310:	080084bb 	.word	0x080084bb
 8008314:	080084bb 	.word	0x080084bb
 8008318:	080083c3 	.word	0x080083c3
 800831c:	080084bb 	.word	0x080084bb
 8008320:	080084bb 	.word	0x080084bb
 8008324:	080084bb 	.word	0x080084bb
 8008328:	080084bb 	.word	0x080084bb
 800832c:	080084bb 	.word	0x080084bb
 8008330:	080084bb 	.word	0x080084bb
 8008334:	080084bb 	.word	0x080084bb
 8008338:	080084bb 	.word	0x080084bb
 800833c:	080084bb 	.word	0x080084bb
 8008340:	080084bb 	.word	0x080084bb
 8008344:	080084bb 	.word	0x080084bb
 8008348:	080084bb 	.word	0x080084bb
 800834c:	080084bb 	.word	0x080084bb
 8008350:	080083cb 	.word	0x080083cb
 8008354:	080084bb 	.word	0x080084bb
 8008358:	080084bb 	.word	0x080084bb
 800835c:	080084bb 	.word	0x080084bb
 8008360:	08008447 	.word	0x08008447
    /******** INDICATION ********/
  case SL_WFX_CONNECT_IND_ID:
    {
      sl_wfx_connect_callback((sl_wfx_connect_ind_t*) event_payload);
 8008364:	6878      	ldr	r0, [r7, #4]
 8008366:	f000 fa41 	bl	80087ec <sl_wfx_connect_callback>
      break;
 800836a:	e0a6      	b.n	80084ba <sl_wfx_host_post_event+0x1fa>
    }
  case SL_WFX_DISCONNECT_IND_ID:
    {
      sl_wfx_disconnect_callback((sl_wfx_disconnect_ind_t*) event_payload);
 800836c:	6878      	ldr	r0, [r7, #4]
 800836e:	f000 fb45 	bl	80089fc <sl_wfx_disconnect_callback>
      break;
 8008372:	e0a2      	b.n	80084ba <sl_wfx_host_post_event+0x1fa>
    }
  case SL_WFX_START_AP_IND_ID:
    {
      sl_wfx_start_ap_callback((sl_wfx_start_ap_ind_t*) event_payload);
 8008374:	6878      	ldr	r0, [r7, #4]
 8008376:	f000 fb7f 	bl	8008a78 <sl_wfx_start_ap_callback>
      break;
 800837a:	e09e      	b.n	80084ba <sl_wfx_host_post_event+0x1fa>
    }
  case SL_WFX_STOP_AP_IND_ID:
    {
      sl_wfx_stop_ap_callback((sl_wfx_stop_ap_ind_t*) event_payload);
 800837c:	6878      	ldr	r0, [r7, #4]
 800837e:	f000 fbd5 	bl	8008b2c <sl_wfx_stop_ap_callback>
      break;
 8008382:	e09a      	b.n	80084ba <sl_wfx_host_post_event+0x1fa>
    }
  case SL_WFX_RECEIVED_IND_ID:
    {
      sl_wfx_received_ind_t* ethernet_frame = (sl_wfx_received_ind_t*) event_payload;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	60fb      	str	r3, [r7, #12]
      if ( ethernet_frame->body.frame_type == 0 )
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	791b      	ldrb	r3, [r3, #4]
 800838c:	2b00      	cmp	r3, #0
 800838e:	f040 8093 	bne.w	80084b8 <sl_wfx_host_post_event+0x1f8>
      {
        sl_wfx_host_received_frame_callback(ethernet_frame);
 8008392:	68f8      	ldr	r0, [r7, #12]
 8008394:	f7f9 ffe8 	bl	8002368 <sl_wfx_host_received_frame_callback>
      }
      break;
 8008398:	e08e      	b.n	80084b8 <sl_wfx_host_post_event+0x1f8>
    }
  case SL_WFX_SCAN_RESULT_IND_ID:
    {
      sl_wfx_scan_result_callback((sl_wfx_scan_result_ind_t*) event_payload);
 800839a:	6878      	ldr	r0, [r7, #4]
 800839c:	f000 f92e 	bl	80085fc <sl_wfx_scan_result_callback>
      break;
 80083a0:	e08b      	b.n	80084ba <sl_wfx_host_post_event+0x1fa>
    }
  case SL_WFX_SCAN_COMPLETE_IND_ID:
    {
      sl_wfx_scan_complete_callback((sl_wfx_scan_complete_ind_t*) event_payload);
 80083a2:	6878      	ldr	r0, [r7, #4]
 80083a4:	f000 f9ee 	bl	8008784 <sl_wfx_scan_complete_callback>
      break;
 80083a8:	e087      	b.n	80084ba <sl_wfx_host_post_event+0x1fa>
    }
  case SL_WFX_AP_CLIENT_CONNECTED_IND_ID:
    {
      sl_wfx_ap_client_connected_callback((sl_wfx_ap_client_connected_ind_t*) event_payload);
 80083aa:	6878      	ldr	r0, [r7, #4]
 80083ac:	f000 fbfa 	bl	8008ba4 <sl_wfx_ap_client_connected_callback>
      break;
 80083b0:	e083      	b.n	80084ba <sl_wfx_host_post_event+0x1fa>
    }
  case SL_WFX_AP_CLIENT_REJECTED_IND_ID:
    {
      sl_wfx_ap_client_rejected_callback((sl_wfx_ap_client_rejected_ind_t*) event_payload);
 80083b2:	6878      	ldr	r0, [r7, #4]
 80083b4:	f000 fc34 	bl	8008c20 <sl_wfx_ap_client_rejected_callback>
      break;
 80083b8:	e07f      	b.n	80084ba <sl_wfx_host_post_event+0x1fa>
    }
  case SL_WFX_AP_CLIENT_DISCONNECTED_IND_ID:
    {
      sl_wfx_ap_client_disconnected_callback((sl_wfx_ap_client_disconnected_ind_t*) event_payload);
 80083ba:	6878      	ldr	r0, [r7, #4]
 80083bc:	f000 fc66 	bl	8008c8c <sl_wfx_ap_client_disconnected_callback>
      break;
 80083c0:	e07b      	b.n	80084ba <sl_wfx_host_post_event+0x1fa>
    }
  case SL_WFX_EXT_AUTH_IND_ID:
    {
      sl_wfx_ext_auth_callback((sl_wfx_ext_auth_ind_t*) event_payload);
 80083c2:	6878      	ldr	r0, [r7, #4]
 80083c4:	f000 fc98 	bl	8008cf8 <sl_wfx_ext_auth_callback>
      break;
 80083c8:	e077      	b.n	80084ba <sl_wfx_host_post_event+0x1fa>
    {
      break;
    }
  case SL_WFX_EXCEPTION_IND_ID:
    {
      sl_wfx_exception_ind_t *firmware_exception = (sl_wfx_exception_ind_t*)event_payload;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	613b      	str	r3, [r7, #16]
      uint8_t *exception_tmp = (uint8_t *) firmware_exception;
 80083ce:	693b      	ldr	r3, [r7, #16]
 80083d0:	627b      	str	r3, [r7, #36]	; 0x24
      printf("firmware exception %lu\r\n", firmware_exception->body.reason);
 80083d2:	693b      	ldr	r3, [r7, #16]
 80083d4:	685b      	ldr	r3, [r3, #4]
 80083d6:	4619      	mov	r1, r3
 80083d8:	4849      	ldr	r0, [pc, #292]	; (8008500 <sl_wfx_host_post_event+0x240>)
 80083da:	f011 fd91 	bl	8019f00 <iprintf>
      for (uint16_t i = 0; i < firmware_exception->header.length; i += 16) {
 80083de:	2300      	movs	r3, #0
 80083e0:	847b      	strh	r3, [r7, #34]	; 0x22
 80083e2:	e029      	b.n	8008438 <sl_wfx_host_post_event+0x178>
        printf("hif: %.8x:", i);
 80083e4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80083e6:	4619      	mov	r1, r3
 80083e8:	4846      	ldr	r0, [pc, #280]	; (8008504 <sl_wfx_host_post_event+0x244>)
 80083ea:	f011 fd89 	bl	8019f00 <iprintf>
        for (uint8_t j = 0; (j < 16) && ((i + j) < firmware_exception->header.length); j ++) {
 80083ee:	2300      	movs	r3, #0
 80083f0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 80083f4:	e00d      	b.n	8008412 <sl_wfx_host_post_event+0x152>
            printf(" %.2x", *exception_tmp);
 80083f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083f8:	781b      	ldrb	r3, [r3, #0]
 80083fa:	4619      	mov	r1, r3
 80083fc:	4842      	ldr	r0, [pc, #264]	; (8008508 <sl_wfx_host_post_event+0x248>)
 80083fe:	f011 fd7f 	bl	8019f00 <iprintf>
            exception_tmp++;
 8008402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008404:	3301      	adds	r3, #1
 8008406:	627b      	str	r3, [r7, #36]	; 0x24
        for (uint8_t j = 0; (j < 16) && ((i + j) < firmware_exception->header.length); j ++) {
 8008408:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800840c:	3301      	adds	r3, #1
 800840e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8008412:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8008416:	2b0f      	cmp	r3, #15
 8008418:	d808      	bhi.n	800842c <sl_wfx_host_post_event+0x16c>
 800841a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800841c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8008420:	4413      	add	r3, r2
 8008422:	693a      	ldr	r2, [r7, #16]
 8008424:	8812      	ldrh	r2, [r2, #0]
 8008426:	b292      	uxth	r2, r2
 8008428:	4293      	cmp	r3, r2
 800842a:	dbe4      	blt.n	80083f6 <sl_wfx_host_post_event+0x136>
        }
        printf("\r\n");
 800842c:	4837      	ldr	r0, [pc, #220]	; (800850c <sl_wfx_host_post_event+0x24c>)
 800842e:	f011 fded 	bl	801a00c <puts>
      for (uint16_t i = 0; i < firmware_exception->header.length; i += 16) {
 8008432:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008434:	3310      	adds	r3, #16
 8008436:	847b      	strh	r3, [r7, #34]	; 0x22
 8008438:	693b      	ldr	r3, [r7, #16]
 800843a:	881b      	ldrh	r3, [r3, #0]
 800843c:	b29b      	uxth	r3, r3
 800843e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8008440:	429a      	cmp	r2, r3
 8008442:	d3cf      	bcc.n	80083e4 <sl_wfx_host_post_event+0x124>
      }
      break;
 8008444:	e039      	b.n	80084ba <sl_wfx_host_post_event+0x1fa>
    }
  case SL_WFX_ERROR_IND_ID:
    {
      sl_wfx_error_ind_t *firmware_error = (sl_wfx_error_ind_t*)event_payload;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	617b      	str	r3, [r7, #20]
      uint8_t *error_tmp = (uint8_t *) firmware_error;
 800844a:	697b      	ldr	r3, [r7, #20]
 800844c:	61fb      	str	r3, [r7, #28]
      printf("firmware error %lu\r\n", firmware_error->body.type);
 800844e:	697b      	ldr	r3, [r7, #20]
 8008450:	685b      	ldr	r3, [r3, #4]
 8008452:	4619      	mov	r1, r3
 8008454:	482e      	ldr	r0, [pc, #184]	; (8008510 <sl_wfx_host_post_event+0x250>)
 8008456:	f011 fd53 	bl	8019f00 <iprintf>
      for (uint16_t i = 0; i < firmware_error->header.length; i += 16) {
 800845a:	2300      	movs	r3, #0
 800845c:	837b      	strh	r3, [r7, #26]
 800845e:	e024      	b.n	80084aa <sl_wfx_host_post_event+0x1ea>
        printf("hif: %.8x:", i);
 8008460:	8b7b      	ldrh	r3, [r7, #26]
 8008462:	4619      	mov	r1, r3
 8008464:	4827      	ldr	r0, [pc, #156]	; (8008504 <sl_wfx_host_post_event+0x244>)
 8008466:	f011 fd4b 	bl	8019f00 <iprintf>
        for (uint8_t j = 0; (j < 16) && ((i + j) < firmware_error->header.length); j ++) {
 800846a:	2300      	movs	r3, #0
 800846c:	767b      	strb	r3, [r7, #25]
 800846e:	e00b      	b.n	8008488 <sl_wfx_host_post_event+0x1c8>
            printf(" %.2x", *error_tmp);
 8008470:	69fb      	ldr	r3, [r7, #28]
 8008472:	781b      	ldrb	r3, [r3, #0]
 8008474:	4619      	mov	r1, r3
 8008476:	4824      	ldr	r0, [pc, #144]	; (8008508 <sl_wfx_host_post_event+0x248>)
 8008478:	f011 fd42 	bl	8019f00 <iprintf>
            error_tmp++;
 800847c:	69fb      	ldr	r3, [r7, #28]
 800847e:	3301      	adds	r3, #1
 8008480:	61fb      	str	r3, [r7, #28]
        for (uint8_t j = 0; (j < 16) && ((i + j) < firmware_error->header.length); j ++) {
 8008482:	7e7b      	ldrb	r3, [r7, #25]
 8008484:	3301      	adds	r3, #1
 8008486:	767b      	strb	r3, [r7, #25]
 8008488:	7e7b      	ldrb	r3, [r7, #25]
 800848a:	2b0f      	cmp	r3, #15
 800848c:	d807      	bhi.n	800849e <sl_wfx_host_post_event+0x1de>
 800848e:	8b7a      	ldrh	r2, [r7, #26]
 8008490:	7e7b      	ldrb	r3, [r7, #25]
 8008492:	4413      	add	r3, r2
 8008494:	697a      	ldr	r2, [r7, #20]
 8008496:	8812      	ldrh	r2, [r2, #0]
 8008498:	b292      	uxth	r2, r2
 800849a:	4293      	cmp	r3, r2
 800849c:	dbe8      	blt.n	8008470 <sl_wfx_host_post_event+0x1b0>
        }
        printf("\r\n");
 800849e:	481b      	ldr	r0, [pc, #108]	; (800850c <sl_wfx_host_post_event+0x24c>)
 80084a0:	f011 fdb4 	bl	801a00c <puts>
      for (uint16_t i = 0; i < firmware_error->header.length; i += 16) {
 80084a4:	8b7b      	ldrh	r3, [r7, #26]
 80084a6:	3310      	adds	r3, #16
 80084a8:	837b      	strh	r3, [r7, #26]
 80084aa:	697b      	ldr	r3, [r7, #20]
 80084ac:	881b      	ldrh	r3, [r3, #0]
 80084ae:	b29b      	uxth	r3, r3
 80084b0:	8b7a      	ldrh	r2, [r7, #26]
 80084b2:	429a      	cmp	r2, r3
 80084b4:	d3d4      	bcc.n	8008460 <sl_wfx_host_post_event+0x1a0>
      }
      break;
 80084b6:	e000      	b.n	80084ba <sl_wfx_host_post_event+0x1fa>
      break;
 80084b8:	bf00      	nop
    }
  }

  if (host_context.waited_event_id == event_payload->header.id) {
 80084ba:	4b16      	ldr	r3, [pc, #88]	; (8008514 <sl_wfx_host_post_event+0x254>)
 80084bc:	791a      	ldrb	r2, [r3, #4]
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	789b      	ldrb	r3, [r3, #2]
 80084c2:	429a      	cmp	r2, r3
 80084c4:	d117      	bne.n	80084f6 <sl_wfx_host_post_event+0x236>
    if (event_payload->header.length < SL_WFX_EVENT_MAX_SIZE) {
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	881b      	ldrh	r3, [r3, #0]
 80084ca:	b29b      	uxth	r3, r3
 80084cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80084d0:	d211      	bcs.n	80084f6 <sl_wfx_host_post_event+0x236>
      /* Post the event in the queue */
      memcpy(sl_wfx_context->event_payload_buffer,
 80084d2:	4b11      	ldr	r3, [pc, #68]	; (8008518 <sl_wfx_host_post_event+0x258>)
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	4618      	mov	r0, r3
             (void*) event_payload,
             event_payload->header.length);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	881b      	ldrh	r3, [r3, #0]
 80084dc:	b29b      	uxth	r3, r3
      memcpy(sl_wfx_context->event_payload_buffer,
 80084de:	461a      	mov	r2, r3
 80084e0:	6879      	ldr	r1, [r7, #4]
 80084e2:	f011 fc17 	bl	8019d14 <memcpy>
      xQueueOverwrite(sl_wfx_confirmation_queue, (void *) &event_payload->header.id);
 80084e6:	4b0d      	ldr	r3, [pc, #52]	; (800851c <sl_wfx_host_post_event+0x25c>)
 80084e8:	6818      	ldr	r0, [r3, #0]
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	1c99      	adds	r1, r3, #2
 80084ee:	2302      	movs	r3, #2
 80084f0:	2200      	movs	r2, #0
 80084f2:	f001 fbaf 	bl	8009c54 <xQueueGenericSend>


    }
  }

  return SL_STATUS_OK;
 80084f6:	2300      	movs	r3, #0
}
 80084f8:	4618      	mov	r0, r3
 80084fa:	3728      	adds	r7, #40	; 0x28
 80084fc:	46bd      	mov	sp, r7
 80084fe:	bd80      	pop	{r7, pc}
 8008500:	0801b770 	.word	0x0801b770
 8008504:	0801b78c 	.word	0x0801b78c
 8008508:	0801b798 	.word	0x0801b798
 800850c:	0801b7a0 	.word	0x0801b7a0
 8008510:	0801b7a4 	.word	0x0801b7a4
 8008514:	20001130 	.word	0x20001130
 8008518:	200007e8 	.word	0x200007e8
 800851c:	20001120 	.word	0x20001120

08008520 <sl_wfx_host_allocate_buffer>:
/**************************************************************************//**
 * Allocate a buffer
 *****************************************************************************/
sl_status_t sl_wfx_host_allocate_buffer (void** buffer,
                                         sl_wfx_buffer_type_t type,
                                         uint32_t buffer_size) {
 8008520:	b580      	push	{r7, lr}
 8008522:	b084      	sub	sp, #16
 8008524:	af00      	add	r7, sp, #0
 8008526:	60f8      	str	r0, [r7, #12]
 8008528:	460b      	mov	r3, r1
 800852a:	607a      	str	r2, [r7, #4]
 800852c:	72fb      	strb	r3, [r7, #11]
  *buffer = pvPortMalloc( buffer_size);
 800852e:	6878      	ldr	r0, [r7, #4]
 8008530:	f004 f872 	bl	800c618 <pvPortMalloc>
 8008534:	4602      	mov	r2, r0
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	601a      	str	r2, [r3, #0]
  
  return SL_STATUS_OK;
 800853a:	2300      	movs	r3, #0
}
 800853c:	4618      	mov	r0, r3
 800853e:	3710      	adds	r7, #16
 8008540:	46bd      	mov	sp, r7
 8008542:	bd80      	pop	{r7, pc}

08008544 <sl_wfx_host_free_buffer>:

/**************************************************************************//**
 * Free a buffer
 *****************************************************************************/
sl_status_t sl_wfx_host_free_buffer (void* buffer, sl_wfx_buffer_type_t type) {
 8008544:	b580      	push	{r7, lr}
 8008546:	b082      	sub	sp, #8
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
 800854c:	460b      	mov	r3, r1
 800854e:	70fb      	strb	r3, [r7, #3]
  vPortFree(buffer);
 8008550:	6878      	ldr	r0, [r7, #4]
 8008552:	f004 f92d 	bl	800c7b0 <vPortFree>
  
  return SL_STATUS_OK;
 8008556:	2300      	movs	r3, #0
}
 8008558:	4618      	mov	r0, r3
 800855a:	3708      	adds	r7, #8
 800855c:	46bd      	mov	sp, r7
 800855e:	bd80      	pop	{r7, pc}

08008560 <sl_wfx_host_transmit_frame>:

/**************************************************************************//**
 * Host transmit frame
 *****************************************************************************/
sl_status_t sl_wfx_host_transmit_frame (void* frame, uint32_t frame_len) {
 8008560:	b580      	push	{r7, lr}
 8008562:	b082      	sub	sp, #8
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
 8008568:	6039      	str	r1, [r7, #0]
  return sl_wfx_data_write(frame, frame_len);
 800856a:	6839      	ldr	r1, [r7, #0]
 800856c:	6878      	ldr	r0, [r7, #4]
 800856e:	f7fe fab7 	bl	8006ae0 <sl_wfx_data_write>
 8008572:	4603      	mov	r3, r0
}
 8008574:	4618      	mov	r0, r3
 8008576:	3708      	adds	r7, #8
 8008578:	46bd      	mov	sp, r7
 800857a:	bd80      	pop	{r7, pc}

0800857c <sl_wfx_host_log>:

/**************************************************************************//**
 * Output driver logs
 *****************************************************************************/
#if SL_WFX_DEBUG_MASK
void sl_wfx_host_log (const char *string, ...) {
 800857c:	b40f      	push	{r0, r1, r2, r3}
 800857e:	b580      	push	{r7, lr}
 8008580:	b082      	sub	sp, #8
 8008582:	af00      	add	r7, sp, #0
  va_list valist;

  va_start(valist, string);
 8008584:	f107 0314 	add.w	r3, r7, #20
 8008588:	607b      	str	r3, [r7, #4]
  vprintf(string, valist);
 800858a:	6879      	ldr	r1, [r7, #4]
 800858c:	6938      	ldr	r0, [r7, #16]
 800858e:	f011 fe3f 	bl	801a210 <viprintf>
  va_end(valist);
}
 8008592:	bf00      	nop
 8008594:	3708      	adds	r7, #8
 8008596:	46bd      	mov	sp, r7
 8008598:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800859c:	b004      	add	sp, #16
 800859e:	4770      	bx	lr

080085a0 <sl_wfx_host_lock>:
#endif

/**************************************************************************//**
 * Lock the driver mutex
 *****************************************************************************/
sl_status_t sl_wfx_host_lock (void) {
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b082      	sub	sp, #8
 80085a4:	af00      	add	r7, sp, #0
  sl_status_t status = SL_STATUS_TIMEOUT;
 80085a6:	2307      	movs	r3, #7
 80085a8:	607b      	str	r3, [r7, #4]

if (xSemaphoreTake(sl_wfx_driver_mutex, 500) == pdTRUE) {
 80085aa:	4b0b      	ldr	r3, [pc, #44]	; (80085d8 <sl_wfx_host_lock+0x38>)
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80085b2:	4618      	mov	r0, r3
 80085b4:	f001 fe54 	bl	800a260 <xQueueSemaphoreTake>
 80085b8:	4603      	mov	r3, r0
 80085ba:	2b01      	cmp	r3, #1
 80085bc:	d102      	bne.n	80085c4 <sl_wfx_host_lock+0x24>
//	  if (sl_wfx_driver_mutex) {
//		  sl_wfx_driver_mutex = false;
	      status = SL_STATUS_OK;
 80085be:	2300      	movs	r3, #0
 80085c0:	607b      	str	r3, [r7, #4]
 80085c2:	e004      	b.n	80085ce <sl_wfx_host_lock+0x2e>
	    } else {
	      printf("Wi-Fi driver mutex timeout\r\n");
 80085c4:	4805      	ldr	r0, [pc, #20]	; (80085dc <sl_wfx_host_lock+0x3c>)
 80085c6:	f011 fd21 	bl	801a00c <puts>
	      status = SL_STATUS_TIMEOUT;
 80085ca:	2307      	movs	r3, #7
 80085cc:	607b      	str	r3, [r7, #4]
	    }

  return status;
 80085ce:	687b      	ldr	r3, [r7, #4]
}
 80085d0:	4618      	mov	r0, r3
 80085d2:	3708      	adds	r7, #8
 80085d4:	46bd      	mov	sp, r7
 80085d6:	bd80      	pop	{r7, pc}
 80085d8:	20001128 	.word	0x20001128
 80085dc:	0801b7bc 	.word	0x0801b7bc

080085e0 <sl_wfx_host_unlock>:

/**************************************************************************//**
 * Unlock the driver mutex
 *****************************************************************************/
sl_status_t sl_wfx_host_unlock (void) {
 80085e0:	b580      	push	{r7, lr}
 80085e2:	af00      	add	r7, sp, #0
	xSemaphoreGive(sl_wfx_driver_mutex);
 80085e4:	4b04      	ldr	r3, [pc, #16]	; (80085f8 <sl_wfx_host_unlock+0x18>)
 80085e6:	6818      	ldr	r0, [r3, #0]
 80085e8:	2300      	movs	r3, #0
 80085ea:	2200      	movs	r2, #0
 80085ec:	2100      	movs	r1, #0
 80085ee:	f001 fb31 	bl	8009c54 <xQueueGenericSend>
	//sl_wfx_driver_mutex = true;
  return SL_STATUS_OK;
 80085f2:	2300      	movs	r3, #0
}
 80085f4:	4618      	mov	r0, r3
 80085f6:	bd80      	pop	{r7, pc}
 80085f8:	20001128 	.word	0x20001128

080085fc <sl_wfx_scan_result_callback>:


/**************************************************************************//**
 * Callback for individual scan result
 *****************************************************************************/
void sl_wfx_scan_result_callback (sl_wfx_scan_result_ind_t *scan_result) {
 80085fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008600:	b08a      	sub	sp, #40	; 0x28
 8008602:	af08      	add	r7, sp, #32
 8008604:	6078      	str	r0, [r7, #4]
  scan_count++;
 8008606:	4b5b      	ldr	r3, [pc, #364]	; (8008774 <sl_wfx_scan_result_callback+0x178>)
 8008608:	781b      	ldrb	r3, [r3, #0]
 800860a:	3301      	adds	r3, #1
 800860c:	b2da      	uxtb	r2, r3
 800860e:	4b59      	ldr	r3, [pc, #356]	; (8008774 <sl_wfx_scan_result_callback+0x178>)
 8008610:	701a      	strb	r2, [r3, #0]

  if (scan_verbose) {
 8008612:	4b59      	ldr	r3, [pc, #356]	; (8008778 <sl_wfx_scan_result_callback+0x17c>)
 8008614:	781b      	ldrb	r3, [r3, #0]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d03e      	beq.n	8008698 <sl_wfx_scan_result_callback+0x9c>
    /*Report one AP information*/
    printf(
 800861a:	4b56      	ldr	r3, [pc, #344]	; (8008774 <sl_wfx_scan_result_callback+0x178>)
 800861c:	781b      	ldrb	r3, [r3, #0]
 800861e:	469c      	mov	ip, r3
        "# %2d %2d %02X %03d %02X:%02X:%02X:%02X:%02X:%02X  %s\r\n",
        scan_count,
        scan_result->body.channel,
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008624:	b29b      	uxth	r3, r3
    printf(
 8008626:	469e      	mov	lr, r3
        *(uint8_t *)&scan_result->body.security_mode,
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	3330      	adds	r3, #48	; 0x30
 800862c:	781b      	ldrb	r3, [r3, #0]
    printf(
 800862e:	4698      	mov	r8, r3
        ((int16_t)(scan_result->body.rcpi - 220) / 2),
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8008634:	b29b      	uxth	r3, r3
 8008636:	3bdc      	subs	r3, #220	; 0xdc
 8008638:	b29b      	uxth	r3, r3
 800863a:	b21b      	sxth	r3, r3
    printf(
 800863c:	0fda      	lsrs	r2, r3, #31
 800863e:	4413      	add	r3, r2
 8008640:	105b      	asrs	r3, r3, #1
 8008642:	b21b      	sxth	r3, r3
 8008644:	461a      	mov	r2, r3
        scan_result->body.mac[0], scan_result->body.mac[1],
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    printf(
 800864c:	4619      	mov	r1, r3
        scan_result->body.mac[0], scan_result->body.mac[1],
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
    printf(
 8008654:	4618      	mov	r0, r3
        scan_result->body.mac[2], scan_result->body.mac[3],
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
    printf(
 800865c:	461c      	mov	r4, r3
        scan_result->body.mac[2], scan_result->body.mac[3],
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
    printf(
 8008664:	461d      	mov	r5, r3
        scan_result->body.mac[4], scan_result->body.mac[5],
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    printf(
 800866c:	461e      	mov	r6, r3
        scan_result->body.mac[4], scan_result->body.mac[5],
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
    printf(
 8008674:	603b      	str	r3, [r7, #0]
        scan_result->body.ssid_def.ssid);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	3308      	adds	r3, #8
    printf(
 800867a:	9307      	str	r3, [sp, #28]
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	9306      	str	r3, [sp, #24]
 8008680:	9605      	str	r6, [sp, #20]
 8008682:	9504      	str	r5, [sp, #16]
 8008684:	9403      	str	r4, [sp, #12]
 8008686:	9002      	str	r0, [sp, #8]
 8008688:	9101      	str	r1, [sp, #4]
 800868a:	9200      	str	r2, [sp, #0]
 800868c:	4643      	mov	r3, r8
 800868e:	4672      	mov	r2, lr
 8008690:	4661      	mov	r1, ip
 8008692:	483a      	ldr	r0, [pc, #232]	; (800877c <sl_wfx_scan_result_callback+0x180>)
 8008694:	f011 fc34 	bl	8019f00 <iprintf>
  }

  if (scan_count <= SL_WFX_MAX_SCAN_RESULTS) {
 8008698:	4b36      	ldr	r3, [pc, #216]	; (8008774 <sl_wfx_scan_result_callback+0x178>)
 800869a:	781b      	ldrb	r3, [r3, #0]
 800869c:	2b32      	cmp	r3, #50	; 0x32
 800869e:	d863      	bhi.n	8008768 <sl_wfx_scan_result_callback+0x16c>
    scan_list[scan_count - 1].ssid_def = scan_result->body.ssid_def;
 80086a0:	4b34      	ldr	r3, [pc, #208]	; (8008774 <sl_wfx_scan_result_callback+0x178>)
 80086a2:	781b      	ldrb	r3, [r3, #0]
 80086a4:	1e5a      	subs	r2, r3, #1
 80086a6:	4936      	ldr	r1, [pc, #216]	; (8008780 <sl_wfx_scan_result_callback+0x184>)
 80086a8:	4613      	mov	r3, r2
 80086aa:	005b      	lsls	r3, r3, #1
 80086ac:	4413      	add	r3, r2
 80086ae:	011b      	lsls	r3, r3, #4
 80086b0:	1a9b      	subs	r3, r3, r2
 80086b2:	18ca      	adds	r2, r1, r3
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	3304      	adds	r3, #4
 80086b8:	4610      	mov	r0, r2
 80086ba:	f103 0420 	add.w	r4, r3, #32
 80086be:	4602      	mov	r2, r0
 80086c0:	4619      	mov	r1, r3
 80086c2:	f8d1 c000 	ldr.w	ip, [r1]
 80086c6:	684e      	ldr	r6, [r1, #4]
 80086c8:	688d      	ldr	r5, [r1, #8]
 80086ca:	68c9      	ldr	r1, [r1, #12]
 80086cc:	f8c2 c000 	str.w	ip, [r2]
 80086d0:	6056      	str	r6, [r2, #4]
 80086d2:	6095      	str	r5, [r2, #8]
 80086d4:	60d1      	str	r1, [r2, #12]
 80086d6:	3310      	adds	r3, #16
 80086d8:	3010      	adds	r0, #16
 80086da:	42a3      	cmp	r3, r4
 80086dc:	d1ef      	bne.n	80086be <sl_wfx_scan_result_callback+0xc2>
 80086de:	4602      	mov	r2, r0
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	6013      	str	r3, [r2, #0]
    scan_list[scan_count - 1].channel = scan_result->body.channel;
 80086e4:	4b23      	ldr	r3, [pc, #140]	; (8008774 <sl_wfx_scan_result_callback+0x178>)
 80086e6:	781b      	ldrb	r3, [r3, #0]
 80086e8:	1e5a      	subs	r2, r3, #1
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80086ee:	b298      	uxth	r0, r3
 80086f0:	4923      	ldr	r1, [pc, #140]	; (8008780 <sl_wfx_scan_result_callback+0x184>)
 80086f2:	4613      	mov	r3, r2
 80086f4:	005b      	lsls	r3, r3, #1
 80086f6:	4413      	add	r3, r2
 80086f8:	011b      	lsls	r3, r3, #4
 80086fa:	1a9b      	subs	r3, r3, r2
 80086fc:	440b      	add	r3, r1
 80086fe:	332a      	adds	r3, #42	; 0x2a
 8008700:	4602      	mov	r2, r0
 8008702:	801a      	strh	r2, [r3, #0]
    scan_list[scan_count - 1].security_mode = scan_result->body.security_mode;
 8008704:	4b1b      	ldr	r3, [pc, #108]	; (8008774 <sl_wfx_scan_result_callback+0x178>)
 8008706:	781b      	ldrb	r3, [r3, #0]
 8008708:	1e5a      	subs	r2, r3, #1
 800870a:	491d      	ldr	r1, [pc, #116]	; (8008780 <sl_wfx_scan_result_callback+0x184>)
 800870c:	4613      	mov	r3, r2
 800870e:	005b      	lsls	r3, r3, #1
 8008710:	4413      	add	r3, r2
 8008712:	011b      	lsls	r3, r3, #4
 8008714:	1a9b      	subs	r3, r3, r2
 8008716:	440b      	add	r3, r1
 8008718:	332c      	adds	r3, #44	; 0x2c
 800871a:	687a      	ldr	r2, [r7, #4]
 800871c:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 8008720:	701a      	strb	r2, [r3, #0]
    scan_list[scan_count - 1].rcpi = scan_result->body.rcpi;
 8008722:	4b14      	ldr	r3, [pc, #80]	; (8008774 <sl_wfx_scan_result_callback+0x178>)
 8008724:	781b      	ldrb	r3, [r3, #0]
 8008726:	1e5a      	subs	r2, r3, #1
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800872c:	b298      	uxth	r0, r3
 800872e:	4914      	ldr	r1, [pc, #80]	; (8008780 <sl_wfx_scan_result_callback+0x184>)
 8008730:	4613      	mov	r3, r2
 8008732:	005b      	lsls	r3, r3, #1
 8008734:	4413      	add	r3, r2
 8008736:	011b      	lsls	r3, r3, #4
 8008738:	1a9b      	subs	r3, r3, r2
 800873a:	440b      	add	r3, r1
 800873c:	3328      	adds	r3, #40	; 0x28
 800873e:	4602      	mov	r2, r0
 8008740:	f8a3 2005 	strh.w	r2, [r3, #5]
    memcpy(scan_list[scan_count - 1].mac, scan_result->body.mac, 6);
 8008744:	4b0b      	ldr	r3, [pc, #44]	; (8008774 <sl_wfx_scan_result_callback+0x178>)
 8008746:	781b      	ldrb	r3, [r3, #0]
 8008748:	1e5a      	subs	r2, r3, #1
 800874a:	4613      	mov	r3, r2
 800874c:	005b      	lsls	r3, r3, #1
 800874e:	4413      	add	r3, r2
 8008750:	011b      	lsls	r3, r3, #4
 8008752:	1a9b      	subs	r3, r3, r2
 8008754:	3320      	adds	r3, #32
 8008756:	4a0a      	ldr	r2, [pc, #40]	; (8008780 <sl_wfx_scan_result_callback+0x184>)
 8008758:	4413      	add	r3, r2
 800875a:	1d18      	adds	r0, r3, #4
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	3328      	adds	r3, #40	; 0x28
 8008760:	2206      	movs	r2, #6
 8008762:	4619      	mov	r1, r3
 8008764:	f011 fad6 	bl	8019d14 <memcpy>
  }
}
 8008768:	bf00      	nop
 800876a:	3708      	adds	r7, #8
 800876c:	46bd      	mov	sp, r7
 800876e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008772:	bf00      	nop
 8008774:	2000111e 	.word	0x2000111e
 8008778:	200000b1 	.word	0x200000b1
 800877c:	0801b7d8 	.word	0x0801b7d8
 8008780:	200007f0 	.word	0x200007f0

08008784 <sl_wfx_scan_complete_callback>:

/**************************************************************************//**
 * Callback for scan complete
 *****************************************************************************/
void sl_wfx_scan_complete_callback (sl_wfx_scan_complete_ind_t *scan_complete) {
 8008784:	b580      	push	{r7, lr}
 8008786:	b084      	sub	sp, #16
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
  void * buffer;
  sl_status_t status;

  scan_count_web = scan_count;
 800878c:	4b14      	ldr	r3, [pc, #80]	; (80087e0 <sl_wfx_scan_complete_callback+0x5c>)
 800878e:	781a      	ldrb	r2, [r3, #0]
 8008790:	4b14      	ldr	r3, [pc, #80]	; (80087e4 <sl_wfx_scan_complete_callback+0x60>)
 8008792:	701a      	strb	r2, [r3, #0]
  scan_count = 0;
 8008794:	4b12      	ldr	r3, [pc, #72]	; (80087e0 <sl_wfx_scan_complete_callback+0x5c>)
 8008796:	2200      	movs	r2, #0
 8008798:	701a      	strb	r2, [r3, #0]

  status = sl_wfx_host_allocate_buffer(&buffer,
                                       SL_WFX_RX_FRAME_BUFFER,
                                       scan_complete->header.length);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	881b      	ldrh	r3, [r3, #0]
 800879e:	b29b      	uxth	r3, r3
  status = sl_wfx_host_allocate_buffer(&buffer,
 80087a0:	461a      	mov	r2, r3
 80087a2:	f107 0308 	add.w	r3, r7, #8
 80087a6:	2101      	movs	r1, #1
 80087a8:	4618      	mov	r0, r3
 80087aa:	f7ff feb9 	bl	8008520 <sl_wfx_host_allocate_buffer>
 80087ae:	60f8      	str	r0, [r7, #12]
  if (status == SL_STATUS_OK) {
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d10f      	bne.n	80087d6 <sl_wfx_scan_complete_callback+0x52>
    memcpy(buffer, (void *)scan_complete, scan_complete->header.length);
 80087b6:	68b8      	ldr	r0, [r7, #8]
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	881b      	ldrh	r3, [r3, #0]
 80087bc:	b29b      	uxth	r3, r3
 80087be:	461a      	mov	r2, r3
 80087c0:	6879      	ldr	r1, [r7, #4]
 80087c2:	f011 faa7 	bl	8019d14 <memcpy>
    xQueueSend(wifi_event_queue, &buffer, 0);
 80087c6:	4b08      	ldr	r3, [pc, #32]	; (80087e8 <sl_wfx_scan_complete_callback+0x64>)
 80087c8:	6818      	ldr	r0, [r3, #0]
 80087ca:	f107 0108 	add.w	r1, r7, #8
 80087ce:	2300      	movs	r3, #0
 80087d0:	2200      	movs	r2, #0
 80087d2:	f001 fa3f 	bl	8009c54 <xQueueGenericSend>
  }
}
 80087d6:	bf00      	nop
 80087d8:	3710      	adds	r7, #16
 80087da:	46bd      	mov	sp, r7
 80087dc:	bd80      	pop	{r7, pc}
 80087de:	bf00      	nop
 80087e0:	2000111e 	.word	0x2000111e
 80087e4:	2000111f 	.word	0x2000111f
 80087e8:	20001138 	.word	0x20001138

080087ec <sl_wfx_connect_callback>:

/**************************************************************************//**
 * Callback when station connects
 *****************************************************************************/
void sl_wfx_connect_callback (sl_wfx_connect_ind_t *connect) {
 80087ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80087ee:	b085      	sub	sp, #20
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
  void *buffer;
  sl_status_t status;

  switch(connect->body.status){
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	685b      	ldr	r3, [r3, #4]
 80087f8:	2b0a      	cmp	r3, #10
 80087fa:	f200 80cd 	bhi.w	8008998 <sl_wfx_connect_callback+0x1ac>
 80087fe:	a201      	add	r2, pc, #4	; (adr r2, 8008804 <sl_wfx_connect_callback+0x18>)
 8008800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008804:	08008831 	.word	0x08008831
 8008808:	08008999 	.word	0x08008999
 800880c:	08008999 	.word	0x08008999
 8008810:	08008999 	.word	0x08008999
 8008814:	08008999 	.word	0x08008999
 8008818:	08008999 	.word	0x08008999
 800881c:	0800888f 	.word	0x0800888f
 8008820:	080088cf 	.word	0x080088cf
 8008824:	080088f9 	.word	0x080088f9
 8008828:	08008923 	.word	0x08008923
 800882c:	0800895f 	.word	0x0800895f
  case WFM_STATUS_SUCCESS:
    {
      printf("Connected to WiFi: %s \r\n", WLAN_SSID_DEFAULT);
 8008830:	4966      	ldr	r1, [pc, #408]	; (80089cc <sl_wfx_connect_callback+0x1e0>)
 8008832:	4867      	ldr	r0, [pc, #412]	; (80089d0 <sl_wfx_connect_callback+0x1e4>)
 8008834:	f011 fb64 	bl	8019f00 <iprintf>
      sl_wfx_context->state |= SL_WFX_STA_INTERFACE_CONNECTED;
 8008838:	4b66      	ldr	r3, [pc, #408]	; (80089d4 <sl_wfx_connect_callback+0x1e8>)
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	f893 2222 	ldrb.w	r2, [r3, #546]	; 0x222
 8008840:	4b64      	ldr	r3, [pc, #400]	; (80089d4 <sl_wfx_connect_callback+0x1e8>)
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	f042 0202 	orr.w	r2, r2, #2
 8008848:	b2d2      	uxtb	r2, r2
 800884a:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222

      status = sl_wfx_host_allocate_buffer(&buffer,
                                           SL_WFX_RX_FRAME_BUFFER,
                                           connect->header.length);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	881b      	ldrh	r3, [r3, #0]
 8008852:	b29b      	uxth	r3, r3
      status = sl_wfx_host_allocate_buffer(&buffer,
 8008854:	461a      	mov	r2, r3
 8008856:	f107 0308 	add.w	r3, r7, #8
 800885a:	2101      	movs	r1, #1
 800885c:	4618      	mov	r0, r3
 800885e:	f7ff fe5f 	bl	8008520 <sl_wfx_host_allocate_buffer>
 8008862:	60f8      	str	r0, [r7, #12]
      if (status == SL_STATUS_OK) {
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	2b00      	cmp	r3, #0
 8008868:	f040 80ab 	bne.w	80089c2 <sl_wfx_connect_callback+0x1d6>
        memcpy(buffer, (void *)connect, connect->header.length);
 800886c:	68b8      	ldr	r0, [r7, #8]
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	881b      	ldrh	r3, [r3, #0]
 8008872:	b29b      	uxth	r3, r3
 8008874:	461a      	mov	r2, r3
 8008876:	6879      	ldr	r1, [r7, #4]
 8008878:	f011 fa4c 	bl	8019d14 <memcpy>
        xQueueSend(wifi_event_queue, &buffer, 0);
 800887c:	4b56      	ldr	r3, [pc, #344]	; (80089d8 <sl_wfx_connect_callback+0x1ec>)
 800887e:	6818      	ldr	r0, [r3, #0]
 8008880:	f107 0108 	add.w	r1, r7, #8
 8008884:	2300      	movs	r3, #0
 8008886:	2200      	movs	r2, #0
 8008888:	f001 f9e4 	bl	8009c54 <xQueueGenericSend>
      }
      break;
 800888c:	e099      	b.n	80089c2 <sl_wfx_connect_callback+0x1d6>
    }
  case WFM_STATUS_NO_MATCHING_AP:
    {
      strcpy(event_log, "Connection failed, access point not found");
 800888e:	4b53      	ldr	r3, [pc, #332]	; (80089dc <sl_wfx_connect_callback+0x1f0>)
 8008890:	4a53      	ldr	r2, [pc, #332]	; (80089e0 <sl_wfx_connect_callback+0x1f4>)
 8008892:	4614      	mov	r4, r2
 8008894:	469c      	mov	ip, r3
 8008896:	f104 0e20 	add.w	lr, r4, #32
 800889a:	4665      	mov	r5, ip
 800889c:	4626      	mov	r6, r4
 800889e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80088a0:	6028      	str	r0, [r5, #0]
 80088a2:	6069      	str	r1, [r5, #4]
 80088a4:	60aa      	str	r2, [r5, #8]
 80088a6:	60eb      	str	r3, [r5, #12]
 80088a8:	3410      	adds	r4, #16
 80088aa:	f10c 0c10 	add.w	ip, ip, #16
 80088ae:	4574      	cmp	r4, lr
 80088b0:	d1f3      	bne.n	800889a <sl_wfx_connect_callback+0xae>
 80088b2:	4662      	mov	r2, ip
 80088b4:	4623      	mov	r3, r4
 80088b6:	cb03      	ldmia	r3!, {r0, r1}
 80088b8:	6010      	str	r0, [r2, #0]
 80088ba:	6051      	str	r1, [r2, #4]
 80088bc:	881b      	ldrh	r3, [r3, #0]
 80088be:	8113      	strh	r3, [r2, #8]
      printf(event_log);
 80088c0:	4846      	ldr	r0, [pc, #280]	; (80089dc <sl_wfx_connect_callback+0x1f0>)
 80088c2:	f011 fb1d 	bl	8019f00 <iprintf>
      printf("\r\n");
 80088c6:	4847      	ldr	r0, [pc, #284]	; (80089e4 <sl_wfx_connect_callback+0x1f8>)
 80088c8:	f011 fba0 	bl	801a00c <puts>
      break;
 80088cc:	e07a      	b.n	80089c4 <sl_wfx_connect_callback+0x1d8>
    }
  case WFM_STATUS_CONNECTION_ABORTED:
    {
      strcpy(event_log, "Connection aborted");
 80088ce:	4a43      	ldr	r2, [pc, #268]	; (80089dc <sl_wfx_connect_callback+0x1f0>)
 80088d0:	4b45      	ldr	r3, [pc, #276]	; (80089e8 <sl_wfx_connect_callback+0x1fc>)
 80088d2:	4615      	mov	r5, r2
 80088d4:	461c      	mov	r4, r3
 80088d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80088d8:	6028      	str	r0, [r5, #0]
 80088da:	6069      	str	r1, [r5, #4]
 80088dc:	60aa      	str	r2, [r5, #8]
 80088de:	60eb      	str	r3, [r5, #12]
 80088e0:	8823      	ldrh	r3, [r4, #0]
 80088e2:	78a2      	ldrb	r2, [r4, #2]
 80088e4:	822b      	strh	r3, [r5, #16]
 80088e6:	4613      	mov	r3, r2
 80088e8:	74ab      	strb	r3, [r5, #18]
      printf(event_log);
 80088ea:	483c      	ldr	r0, [pc, #240]	; (80089dc <sl_wfx_connect_callback+0x1f0>)
 80088ec:	f011 fb08 	bl	8019f00 <iprintf>
      printf("\r\n");
 80088f0:	483c      	ldr	r0, [pc, #240]	; (80089e4 <sl_wfx_connect_callback+0x1f8>)
 80088f2:	f011 fb8b 	bl	801a00c <puts>
      break;
 80088f6:	e065      	b.n	80089c4 <sl_wfx_connect_callback+0x1d8>
    }
  case WFM_STATUS_CONNECTION_TIMEOUT:
    {
      strcpy(event_log, "Connection timeout");
 80088f8:	4a38      	ldr	r2, [pc, #224]	; (80089dc <sl_wfx_connect_callback+0x1f0>)
 80088fa:	4b3c      	ldr	r3, [pc, #240]	; (80089ec <sl_wfx_connect_callback+0x200>)
 80088fc:	4615      	mov	r5, r2
 80088fe:	461c      	mov	r4, r3
 8008900:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008902:	6028      	str	r0, [r5, #0]
 8008904:	6069      	str	r1, [r5, #4]
 8008906:	60aa      	str	r2, [r5, #8]
 8008908:	60eb      	str	r3, [r5, #12]
 800890a:	8823      	ldrh	r3, [r4, #0]
 800890c:	78a2      	ldrb	r2, [r4, #2]
 800890e:	822b      	strh	r3, [r5, #16]
 8008910:	4613      	mov	r3, r2
 8008912:	74ab      	strb	r3, [r5, #18]
      printf(event_log);
 8008914:	4831      	ldr	r0, [pc, #196]	; (80089dc <sl_wfx_connect_callback+0x1f0>)
 8008916:	f011 faf3 	bl	8019f00 <iprintf>
      printf("\r\n");
 800891a:	4832      	ldr	r0, [pc, #200]	; (80089e4 <sl_wfx_connect_callback+0x1f8>)
 800891c:	f011 fb76 	bl	801a00c <puts>
      break;
 8008920:	e050      	b.n	80089c4 <sl_wfx_connect_callback+0x1d8>
    }
  case WFM_STATUS_CONNECTION_REJECTED_BY_AP:
    {
      strcpy(event_log, "Connection rejected by the access point");
 8008922:	4b2e      	ldr	r3, [pc, #184]	; (80089dc <sl_wfx_connect_callback+0x1f0>)
 8008924:	4a32      	ldr	r2, [pc, #200]	; (80089f0 <sl_wfx_connect_callback+0x204>)
 8008926:	4614      	mov	r4, r2
 8008928:	469c      	mov	ip, r3
 800892a:	f104 0e20 	add.w	lr, r4, #32
 800892e:	4665      	mov	r5, ip
 8008930:	4626      	mov	r6, r4
 8008932:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8008934:	6028      	str	r0, [r5, #0]
 8008936:	6069      	str	r1, [r5, #4]
 8008938:	60aa      	str	r2, [r5, #8]
 800893a:	60eb      	str	r3, [r5, #12]
 800893c:	3410      	adds	r4, #16
 800893e:	f10c 0c10 	add.w	ip, ip, #16
 8008942:	4574      	cmp	r4, lr
 8008944:	d1f3      	bne.n	800892e <sl_wfx_connect_callback+0x142>
 8008946:	4662      	mov	r2, ip
 8008948:	4623      	mov	r3, r4
 800894a:	cb03      	ldmia	r3!, {r0, r1}
 800894c:	6010      	str	r0, [r2, #0]
 800894e:	6051      	str	r1, [r2, #4]
      printf(event_log);
 8008950:	4822      	ldr	r0, [pc, #136]	; (80089dc <sl_wfx_connect_callback+0x1f0>)
 8008952:	f011 fad5 	bl	8019f00 <iprintf>
      printf("\r\n");
 8008956:	4823      	ldr	r0, [pc, #140]	; (80089e4 <sl_wfx_connect_callback+0x1f8>)
 8008958:	f011 fb58 	bl	801a00c <puts>
      break;
 800895c:	e032      	b.n	80089c4 <sl_wfx_connect_callback+0x1d8>
    }
  case WFM_STATUS_CONNECTION_AUTH_FAILURE:
    {
      strcpy(event_log, "Connection authentication failure");
 800895e:	4b1f      	ldr	r3, [pc, #124]	; (80089dc <sl_wfx_connect_callback+0x1f0>)
 8008960:	4a24      	ldr	r2, [pc, #144]	; (80089f4 <sl_wfx_connect_callback+0x208>)
 8008962:	4614      	mov	r4, r2
 8008964:	469c      	mov	ip, r3
 8008966:	f104 0e20 	add.w	lr, r4, #32
 800896a:	4665      	mov	r5, ip
 800896c:	4626      	mov	r6, r4
 800896e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8008970:	6028      	str	r0, [r5, #0]
 8008972:	6069      	str	r1, [r5, #4]
 8008974:	60aa      	str	r2, [r5, #8]
 8008976:	60eb      	str	r3, [r5, #12]
 8008978:	3410      	adds	r4, #16
 800897a:	f10c 0c10 	add.w	ip, ip, #16
 800897e:	4574      	cmp	r4, lr
 8008980:	d1f3      	bne.n	800896a <sl_wfx_connect_callback+0x17e>
 8008982:	4662      	mov	r2, ip
 8008984:	4623      	mov	r3, r4
 8008986:	881b      	ldrh	r3, [r3, #0]
 8008988:	8013      	strh	r3, [r2, #0]
      printf(event_log);
 800898a:	4814      	ldr	r0, [pc, #80]	; (80089dc <sl_wfx_connect_callback+0x1f0>)
 800898c:	f011 fab8 	bl	8019f00 <iprintf>
      printf("\r\n");
 8008990:	4814      	ldr	r0, [pc, #80]	; (80089e4 <sl_wfx_connect_callback+0x1f8>)
 8008992:	f011 fb3b 	bl	801a00c <puts>
      break;
 8008996:	e015      	b.n	80089c4 <sl_wfx_connect_callback+0x1d8>
    }
  default:
    {
      strcpy(event_log, "Connection attempt error");
 8008998:	4a10      	ldr	r2, [pc, #64]	; (80089dc <sl_wfx_connect_callback+0x1f0>)
 800899a:	4b17      	ldr	r3, [pc, #92]	; (80089f8 <sl_wfx_connect_callback+0x20c>)
 800899c:	4615      	mov	r5, r2
 800899e:	461c      	mov	r4, r3
 80089a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80089a2:	6028      	str	r0, [r5, #0]
 80089a4:	6069      	str	r1, [r5, #4]
 80089a6:	60aa      	str	r2, [r5, #8]
 80089a8:	60eb      	str	r3, [r5, #12]
 80089aa:	cc03      	ldmia	r4!, {r0, r1}
 80089ac:	6128      	str	r0, [r5, #16]
 80089ae:	6169      	str	r1, [r5, #20]
 80089b0:	7823      	ldrb	r3, [r4, #0]
 80089b2:	762b      	strb	r3, [r5, #24]
      printf(event_log);
 80089b4:	4809      	ldr	r0, [pc, #36]	; (80089dc <sl_wfx_connect_callback+0x1f0>)
 80089b6:	f011 faa3 	bl	8019f00 <iprintf>
      printf("\r\n");
 80089ba:	480a      	ldr	r0, [pc, #40]	; (80089e4 <sl_wfx_connect_callback+0x1f8>)
 80089bc:	f011 fb26 	bl	801a00c <puts>
    }
  }
}
 80089c0:	e000      	b.n	80089c4 <sl_wfx_connect_callback+0x1d8>
      break;
 80089c2:	bf00      	nop
}
 80089c4:	bf00      	nop
 80089c6:	3714      	adds	r7, #20
 80089c8:	46bd      	mov	sp, r7
 80089ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80089cc:	0801b810 	.word	0x0801b810
 80089d0:	0801b818 	.word	0x0801b818
 80089d4:	200007e8 	.word	0x200007e8
 80089d8:	20001138 	.word	0x20001138
 80089dc:	20000648 	.word	0x20000648
 80089e0:	0801b834 	.word	0x0801b834
 80089e4:	0801b7a0 	.word	0x0801b7a0
 80089e8:	0801b860 	.word	0x0801b860
 80089ec:	0801b874 	.word	0x0801b874
 80089f0:	0801b888 	.word	0x0801b888
 80089f4:	0801b8b0 	.word	0x0801b8b0
 80089f8:	0801b8d4 	.word	0x0801b8d4

080089fc <sl_wfx_disconnect_callback>:

/**************************************************************************//**
 * Callback for station disconnect
 *****************************************************************************/
void sl_wfx_disconnect_callback (sl_wfx_disconnect_ind_t *disconnect) {
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b084      	sub	sp, #16
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
  void *buffer;
  sl_status_t status;

  printf("Disconnected %d\r\n", disconnect->body.reason);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	895b      	ldrh	r3, [r3, #10]
 8008a08:	b29b      	uxth	r3, r3
 8008a0a:	4619      	mov	r1, r3
 8008a0c:	4817      	ldr	r0, [pc, #92]	; (8008a6c <sl_wfx_disconnect_callback+0x70>)
 8008a0e:	f011 fa77 	bl	8019f00 <iprintf>
  sl_wfx_context->state &= ~SL_WFX_STA_INTERFACE_CONNECTED;
 8008a12:	4b17      	ldr	r3, [pc, #92]	; (8008a70 <sl_wfx_disconnect_callback+0x74>)
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	f893 2222 	ldrb.w	r2, [r3, #546]	; 0x222
 8008a1a:	4b15      	ldr	r3, [pc, #84]	; (8008a70 <sl_wfx_disconnect_callback+0x74>)
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	f022 0202 	bic.w	r2, r2, #2
 8008a22:	b2d2      	uxtb	r2, r2
 8008a24:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222

  status = sl_wfx_host_allocate_buffer(&buffer,
                                       SL_WFX_RX_FRAME_BUFFER,
                                       disconnect->header.length);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	881b      	ldrh	r3, [r3, #0]
 8008a2c:	b29b      	uxth	r3, r3
  status = sl_wfx_host_allocate_buffer(&buffer,
 8008a2e:	461a      	mov	r2, r3
 8008a30:	f107 0308 	add.w	r3, r7, #8
 8008a34:	2101      	movs	r1, #1
 8008a36:	4618      	mov	r0, r3
 8008a38:	f7ff fd72 	bl	8008520 <sl_wfx_host_allocate_buffer>
 8008a3c:	60f8      	str	r0, [r7, #12]
  if (status == SL_STATUS_OK) {
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d10f      	bne.n	8008a64 <sl_wfx_disconnect_callback+0x68>
    memcpy(buffer, (void *)disconnect, disconnect->header.length);
 8008a44:	68b8      	ldr	r0, [r7, #8]
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	881b      	ldrh	r3, [r3, #0]
 8008a4a:	b29b      	uxth	r3, r3
 8008a4c:	461a      	mov	r2, r3
 8008a4e:	6879      	ldr	r1, [r7, #4]
 8008a50:	f011 f960 	bl	8019d14 <memcpy>
    xQueueSend(wifi_event_queue, &buffer, 0);
 8008a54:	4b07      	ldr	r3, [pc, #28]	; (8008a74 <sl_wfx_disconnect_callback+0x78>)
 8008a56:	6818      	ldr	r0, [r3, #0]
 8008a58:	f107 0108 	add.w	r1, r7, #8
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	2200      	movs	r2, #0
 8008a60:	f001 f8f8 	bl	8009c54 <xQueueGenericSend>
  }
}
 8008a64:	bf00      	nop
 8008a66:	3710      	adds	r7, #16
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	bd80      	pop	{r7, pc}
 8008a6c:	0801b8f0 	.word	0x0801b8f0
 8008a70:	200007e8 	.word	0x200007e8
 8008a74:	20001138 	.word	0x20001138

08008a78 <sl_wfx_start_ap_callback>:

/**************************************************************************//**
 * Callback for AP started
 *****************************************************************************/
void sl_wfx_start_ap_callback (sl_wfx_start_ap_ind_t *start_ap) {
 8008a78:	b5b0      	push	{r4, r5, r7, lr}
 8008a7a:	b084      	sub	sp, #16
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
  void *buffer;
  sl_status_t status;

  if (start_ap->body.status == 0) {
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	685b      	ldr	r3, [r3, #4]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d130      	bne.n	8008aea <sl_wfx_start_ap_callback+0x72>
    printf("AP started\r\n");
 8008a88:	4820      	ldr	r0, [pc, #128]	; (8008b0c <sl_wfx_start_ap_callback+0x94>)
 8008a8a:	f011 fabf 	bl	801a00c <puts>
    printf("Join the AP with SSID: %s\r\n", softap_ssid);
 8008a8e:	4920      	ldr	r1, [pc, #128]	; (8008b10 <sl_wfx_start_ap_callback+0x98>)
 8008a90:	4820      	ldr	r0, [pc, #128]	; (8008b14 <sl_wfx_start_ap_callback+0x9c>)
 8008a92:	f011 fa35 	bl	8019f00 <iprintf>
    sl_wfx_context->state |= SL_WFX_AP_INTERFACE_UP;
 8008a96:	4b20      	ldr	r3, [pc, #128]	; (8008b18 <sl_wfx_start_ap_callback+0xa0>)
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	f893 2222 	ldrb.w	r2, [r3, #546]	; 0x222
 8008a9e:	4b1e      	ldr	r3, [pc, #120]	; (8008b18 <sl_wfx_start_ap_callback+0xa0>)
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	f042 0204 	orr.w	r2, r2, #4
 8008aa6:	b2d2      	uxtb	r2, r2
 8008aa8:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222

    status = sl_wfx_host_allocate_buffer(&buffer,
                                         SL_WFX_RX_FRAME_BUFFER,
                                         start_ap->header.length);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	881b      	ldrh	r3, [r3, #0]
 8008ab0:	b29b      	uxth	r3, r3
    status = sl_wfx_host_allocate_buffer(&buffer,
 8008ab2:	461a      	mov	r2, r3
 8008ab4:	f107 0308 	add.w	r3, r7, #8
 8008ab8:	2101      	movs	r1, #1
 8008aba:	4618      	mov	r0, r3
 8008abc:	f7ff fd30 	bl	8008520 <sl_wfx_host_allocate_buffer>
 8008ac0:	60f8      	str	r0, [r7, #12]
    if (status == SL_STATUS_OK) {
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d11c      	bne.n	8008b02 <sl_wfx_start_ap_callback+0x8a>
      memcpy(buffer, (void *)start_ap, start_ap->header.length);
 8008ac8:	68b8      	ldr	r0, [r7, #8]
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	881b      	ldrh	r3, [r3, #0]
 8008ace:	b29b      	uxth	r3, r3
 8008ad0:	461a      	mov	r2, r3
 8008ad2:	6879      	ldr	r1, [r7, #4]
 8008ad4:	f011 f91e 	bl	8019d14 <memcpy>
      xQueueSend(wifi_event_queue, &buffer, 0);
 8008ad8:	4b10      	ldr	r3, [pc, #64]	; (8008b1c <sl_wfx_start_ap_callback+0xa4>)
 8008ada:	6818      	ldr	r0, [r3, #0]
 8008adc:	f107 0108 	add.w	r1, r7, #8
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	2200      	movs	r2, #0
 8008ae4:	f001 f8b6 	bl	8009c54 <xQueueGenericSend>
    }
  } else {
    printf("AP start failed\r\n");
    strcpy(event_log, "AP start failed");
  }
}
 8008ae8:	e00b      	b.n	8008b02 <sl_wfx_start_ap_callback+0x8a>
    printf("AP start failed\r\n");
 8008aea:	480d      	ldr	r0, [pc, #52]	; (8008b20 <sl_wfx_start_ap_callback+0xa8>)
 8008aec:	f011 fa8e 	bl	801a00c <puts>
    strcpy(event_log, "AP start failed");
 8008af0:	4a0c      	ldr	r2, [pc, #48]	; (8008b24 <sl_wfx_start_ap_callback+0xac>)
 8008af2:	4b0d      	ldr	r3, [pc, #52]	; (8008b28 <sl_wfx_start_ap_callback+0xb0>)
 8008af4:	4614      	mov	r4, r2
 8008af6:	461d      	mov	r5, r3
 8008af8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008afa:	6020      	str	r0, [r4, #0]
 8008afc:	6061      	str	r1, [r4, #4]
 8008afe:	60a2      	str	r2, [r4, #8]
 8008b00:	60e3      	str	r3, [r4, #12]
}
 8008b02:	bf00      	nop
 8008b04:	3710      	adds	r7, #16
 8008b06:	46bd      	mov	sp, r7
 8008b08:	bdb0      	pop	{r4, r5, r7, pc}
 8008b0a:	bf00      	nop
 8008b0c:	0801b904 	.word	0x0801b904
 8008b10:	20000074 	.word	0x20000074
 8008b14:	0801b910 	.word	0x0801b910
 8008b18:	200007e8 	.word	0x200007e8
 8008b1c:	20001138 	.word	0x20001138
 8008b20:	0801b92c 	.word	0x0801b92c
 8008b24:	20000648 	.word	0x20000648
 8008b28:	0801b940 	.word	0x0801b940

08008b2c <sl_wfx_stop_ap_callback>:


/**************************************************************************//**
 * Callback for AP stopped
 *****************************************************************************/
void sl_wfx_stop_ap_callback(sl_wfx_stop_ap_ind_t *stop_ap) {
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b084      	sub	sp, #16
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
  void *buffer;
  sl_status_t status;

  printf("SoftAP stopped\r\n");
 8008b34:	4818      	ldr	r0, [pc, #96]	; (8008b98 <sl_wfx_stop_ap_callback+0x6c>)
 8008b36:	f011 fa69 	bl	801a00c <puts>
  dhcpserver_clear_stored_mac();
 8008b3a:	f7f8 fbdf 	bl	80012fc <dhcpserver_clear_stored_mac>
  sl_wfx_context->state &= ~SL_WFX_AP_INTERFACE_UP;
 8008b3e:	4b17      	ldr	r3, [pc, #92]	; (8008b9c <sl_wfx_stop_ap_callback+0x70>)
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	f893 2222 	ldrb.w	r2, [r3, #546]	; 0x222
 8008b46:	4b15      	ldr	r3, [pc, #84]	; (8008b9c <sl_wfx_stop_ap_callback+0x70>)
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	f022 0204 	bic.w	r2, r2, #4
 8008b4e:	b2d2      	uxtb	r2, r2
 8008b50:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222

  status = sl_wfx_host_allocate_buffer(&buffer,
                                       SL_WFX_RX_FRAME_BUFFER,
                                       stop_ap->length);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	881b      	ldrh	r3, [r3, #0]
 8008b58:	b29b      	uxth	r3, r3
  status = sl_wfx_host_allocate_buffer(&buffer,
 8008b5a:	461a      	mov	r2, r3
 8008b5c:	f107 0308 	add.w	r3, r7, #8
 8008b60:	2101      	movs	r1, #1
 8008b62:	4618      	mov	r0, r3
 8008b64:	f7ff fcdc 	bl	8008520 <sl_wfx_host_allocate_buffer>
 8008b68:	60f8      	str	r0, [r7, #12]
  if (status == SL_STATUS_OK) {
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d10f      	bne.n	8008b90 <sl_wfx_stop_ap_callback+0x64>
    memcpy(buffer, (void *)stop_ap, stop_ap->length);
 8008b70:	68b8      	ldr	r0, [r7, #8]
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	881b      	ldrh	r3, [r3, #0]
 8008b76:	b29b      	uxth	r3, r3
 8008b78:	461a      	mov	r2, r3
 8008b7a:	6879      	ldr	r1, [r7, #4]
 8008b7c:	f011 f8ca 	bl	8019d14 <memcpy>
    xQueueSend(wifi_event_queue, &buffer, 0);
 8008b80:	4b07      	ldr	r3, [pc, #28]	; (8008ba0 <sl_wfx_stop_ap_callback+0x74>)
 8008b82:	6818      	ldr	r0, [r3, #0]
 8008b84:	f107 0108 	add.w	r1, r7, #8
 8008b88:	2300      	movs	r3, #0
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	f001 f862 	bl	8009c54 <xQueueGenericSend>
  }
}
 8008b90:	bf00      	nop
 8008b92:	3710      	adds	r7, #16
 8008b94:	46bd      	mov	sp, r7
 8008b96:	bd80      	pop	{r7, pc}
 8008b98:	0801b950 	.word	0x0801b950
 8008b9c:	200007e8 	.word	0x200007e8
 8008ba0:	20001138 	.word	0x20001138

08008ba4 <sl_wfx_ap_client_connected_callback>:

/**************************************************************************//**
 * Callback for client connect to AP
 *****************************************************************************/
void sl_wfx_ap_client_connected_callback (sl_wfx_ap_client_connected_ind_t *ap_client_connected) {
 8008ba4:	b5b0      	push	{r4, r5, r7, lr}
 8008ba6:	b086      	sub	sp, #24
 8008ba8:	af04      	add	r7, sp, #16
 8008baa:	6078      	str	r0, [r7, #4]
  printf("Client connected, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
         ap_client_connected->body.mac[0],
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	791b      	ldrb	r3, [r3, #4]
  printf("Client connected, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8008bb0:	4618      	mov	r0, r3
         ap_client_connected->body.mac[1],
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	795b      	ldrb	r3, [r3, #5]
  printf("Client connected, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8008bb6:	461c      	mov	r4, r3
         ap_client_connected->body.mac[2],
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	799b      	ldrb	r3, [r3, #6]
  printf("Client connected, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8008bbc:	461d      	mov	r5, r3
         ap_client_connected->body.mac[3],
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	79db      	ldrb	r3, [r3, #7]
  printf("Client connected, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8008bc2:	461a      	mov	r2, r3
         ap_client_connected->body.mac[4],
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	7a1b      	ldrb	r3, [r3, #8]
  printf("Client connected, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8008bc8:	4619      	mov	r1, r3
         ap_client_connected->body.mac[5]);
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	7a5b      	ldrb	r3, [r3, #9]
  printf("Client connected, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8008bce:	9302      	str	r3, [sp, #8]
 8008bd0:	9101      	str	r1, [sp, #4]
 8008bd2:	9200      	str	r2, [sp, #0]
 8008bd4:	462b      	mov	r3, r5
 8008bd6:	4622      	mov	r2, r4
 8008bd8:	4601      	mov	r1, r0
 8008bda:	480b      	ldr	r0, [pc, #44]	; (8008c08 <sl_wfx_ap_client_connected_callback+0x64>)
 8008bdc:	f011 f990 	bl	8019f00 <iprintf>
  printf("Open a web browser and go to http://%d.%d.%d.%d\r\n",
 8008be0:	4b0a      	ldr	r3, [pc, #40]	; (8008c0c <sl_wfx_ap_client_connected_callback+0x68>)
 8008be2:	781b      	ldrb	r3, [r3, #0]
 8008be4:	4619      	mov	r1, r3
 8008be6:	4b0a      	ldr	r3, [pc, #40]	; (8008c10 <sl_wfx_ap_client_connected_callback+0x6c>)
 8008be8:	781b      	ldrb	r3, [r3, #0]
 8008bea:	461a      	mov	r2, r3
 8008bec:	4b09      	ldr	r3, [pc, #36]	; (8008c14 <sl_wfx_ap_client_connected_callback+0x70>)
 8008bee:	781b      	ldrb	r3, [r3, #0]
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	4b09      	ldr	r3, [pc, #36]	; (8008c18 <sl_wfx_ap_client_connected_callback+0x74>)
 8008bf4:	781b      	ldrb	r3, [r3, #0]
 8008bf6:	9300      	str	r3, [sp, #0]
 8008bf8:	4603      	mov	r3, r0
 8008bfa:	4808      	ldr	r0, [pc, #32]	; (8008c1c <sl_wfx_ap_client_connected_callback+0x78>)
 8008bfc:	f011 f980 	bl	8019f00 <iprintf>
         ap_ip_addr0, ap_ip_addr1, ap_ip_addr2, ap_ip_addr3);
}
 8008c00:	bf00      	nop
 8008c02:	3708      	adds	r7, #8
 8008c04:	46bd      	mov	sp, r7
 8008c06:	bdb0      	pop	{r4, r5, r7, pc}
 8008c08:	0801b960 	.word	0x0801b960
 8008c0c:	200000a2 	.word	0x200000a2
 8008c10:	200000a3 	.word	0x200000a3
 8008c14:	20000680 	.word	0x20000680
 8008c18:	200000a4 	.word	0x200000a4
 8008c1c:	0801b998 	.word	0x0801b998

08008c20 <sl_wfx_ap_client_rejected_callback>:

/**************************************************************************//**
 * Callback for client rejected from AP
 *****************************************************************************/
void sl_wfx_ap_client_rejected_callback (sl_wfx_ap_client_rejected_ind_t *ap_client_rejected) {
 8008c20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c22:	b089      	sub	sp, #36	; 0x24
 8008c24:	af04      	add	r7, sp, #16
 8008c26:	6078      	str	r0, [r7, #4]
  struct eth_addr mac_addr;
  
  memcpy(&mac_addr, ap_client_rejected->body.mac, SL_WFX_BSSID_SIZE);
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	1d1a      	adds	r2, r3, #4
 8008c2c:	f107 0308 	add.w	r3, r7, #8
 8008c30:	6810      	ldr	r0, [r2, #0]
 8008c32:	6018      	str	r0, [r3, #0]
 8008c34:	8892      	ldrh	r2, [r2, #4]
 8008c36:	809a      	strh	r2, [r3, #4]
  dhcpserver_remove_mac(&mac_addr);
 8008c38:	f107 0308 	add.w	r3, r7, #8
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	f7f8 f99f 	bl	8000f80 <dhcpserver_remove_mac>
  printf("Client rejected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
         ap_client_rejected->body.reason,
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	895b      	ldrh	r3, [r3, #10]
 8008c46:	b29b      	uxth	r3, r3
  printf("Client rejected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8008c48:	461c      	mov	r4, r3
         ap_client_rejected->body.mac[0],
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	791b      	ldrb	r3, [r3, #4]
  printf("Client rejected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8008c4e:	461d      	mov	r5, r3
         ap_client_rejected->body.mac[1],
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	795b      	ldrb	r3, [r3, #5]
  printf("Client rejected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8008c54:	461e      	mov	r6, r3
         ap_client_rejected->body.mac[2],
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	799b      	ldrb	r3, [r3, #6]
  printf("Client rejected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8008c5a:	461a      	mov	r2, r3
         ap_client_rejected->body.mac[3],
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	79db      	ldrb	r3, [r3, #7]
  printf("Client rejected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8008c60:	4619      	mov	r1, r3
         ap_client_rejected->body.mac[4],
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	7a1b      	ldrb	r3, [r3, #8]
  printf("Client rejected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8008c66:	4618      	mov	r0, r3
         ap_client_rejected->body.mac[5]);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	7a5b      	ldrb	r3, [r3, #9]
  printf("Client rejected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8008c6c:	9303      	str	r3, [sp, #12]
 8008c6e:	9002      	str	r0, [sp, #8]
 8008c70:	9101      	str	r1, [sp, #4]
 8008c72:	9200      	str	r2, [sp, #0]
 8008c74:	4633      	mov	r3, r6
 8008c76:	462a      	mov	r2, r5
 8008c78:	4621      	mov	r1, r4
 8008c7a:	4803      	ldr	r0, [pc, #12]	; (8008c88 <sl_wfx_ap_client_rejected_callback+0x68>)
 8008c7c:	f011 f940 	bl	8019f00 <iprintf>
}
 8008c80:	bf00      	nop
 8008c82:	3714      	adds	r7, #20
 8008c84:	46bd      	mov	sp, r7
 8008c86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c88:	0801b9cc 	.word	0x0801b9cc

08008c8c <sl_wfx_ap_client_disconnected_callback>:

/**************************************************************************//**
 * Callback for AP client disconnect
 *****************************************************************************/
void sl_wfx_ap_client_disconnected_callback (sl_wfx_ap_client_disconnected_ind_t *ap_client_disconnected) {
 8008c8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c8e:	b089      	sub	sp, #36	; 0x24
 8008c90:	af04      	add	r7, sp, #16
 8008c92:	6078      	str	r0, [r7, #4]
  struct eth_addr mac_addr;
  
  memcpy(&mac_addr, ap_client_disconnected->body.mac, SL_WFX_BSSID_SIZE);
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	1d1a      	adds	r2, r3, #4
 8008c98:	f107 0308 	add.w	r3, r7, #8
 8008c9c:	6810      	ldr	r0, [r2, #0]
 8008c9e:	6018      	str	r0, [r3, #0]
 8008ca0:	8892      	ldrh	r2, [r2, #4]
 8008ca2:	809a      	strh	r2, [r3, #4]
  dhcpserver_remove_mac(&mac_addr);
 8008ca4:	f107 0308 	add.w	r3, r7, #8
 8008ca8:	4618      	mov	r0, r3
 8008caa:	f7f8 f969 	bl	8000f80 <dhcpserver_remove_mac>
  printf("Client disconnected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
         ap_client_disconnected->body.reason,
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	895b      	ldrh	r3, [r3, #10]
 8008cb2:	b29b      	uxth	r3, r3
  printf("Client disconnected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8008cb4:	461c      	mov	r4, r3
         ap_client_disconnected->body.mac[0],
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	791b      	ldrb	r3, [r3, #4]
  printf("Client disconnected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8008cba:	461d      	mov	r5, r3
         ap_client_disconnected->body.mac[1],
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	795b      	ldrb	r3, [r3, #5]
  printf("Client disconnected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8008cc0:	461e      	mov	r6, r3
         ap_client_disconnected->body.mac[2],
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	799b      	ldrb	r3, [r3, #6]
  printf("Client disconnected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8008cc6:	461a      	mov	r2, r3
         ap_client_disconnected->body.mac[3],
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	79db      	ldrb	r3, [r3, #7]
  printf("Client disconnected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8008ccc:	4619      	mov	r1, r3
         ap_client_disconnected->body.mac[4],
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	7a1b      	ldrb	r3, [r3, #8]
  printf("Client disconnected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8008cd2:	4618      	mov	r0, r3
         ap_client_disconnected->body.mac[5]);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	7a5b      	ldrb	r3, [r3, #9]
  printf("Client disconnected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8008cd8:	9303      	str	r3, [sp, #12]
 8008cda:	9002      	str	r0, [sp, #8]
 8008cdc:	9101      	str	r1, [sp, #4]
 8008cde:	9200      	str	r2, [sp, #0]
 8008ce0:	4633      	mov	r3, r6
 8008ce2:	462a      	mov	r2, r5
 8008ce4:	4621      	mov	r1, r4
 8008ce6:	4803      	ldr	r0, [pc, #12]	; (8008cf4 <sl_wfx_ap_client_disconnected_callback+0x68>)
 8008ce8:	f011 f90a 	bl	8019f00 <iprintf>
}
 8008cec:	bf00      	nop
 8008cee:	3714      	adds	r7, #20
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008cf4:	0801ba10 	.word	0x0801ba10

08008cf8 <sl_wfx_ext_auth_callback>:

/**************************************************************************//**
 * Callback for External Authentication
 *****************************************************************************/
void sl_wfx_ext_auth_callback (sl_wfx_ext_auth_ind_t *ext_auth_indication) {
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	b084      	sub	sp, #16
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
  void *buffer;
  sl_status_t status;

  status = sl_wfx_host_allocate_buffer(&buffer,
                                       SL_WFX_RX_FRAME_BUFFER,
                                       ext_auth_indication->header.length);
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	881b      	ldrh	r3, [r3, #0]
 8008d04:	b29b      	uxth	r3, r3
  status = sl_wfx_host_allocate_buffer(&buffer,
 8008d06:	461a      	mov	r2, r3
 8008d08:	f107 0308 	add.w	r3, r7, #8
 8008d0c:	2101      	movs	r1, #1
 8008d0e:	4618      	mov	r0, r3
 8008d10:	f7ff fc06 	bl	8008520 <sl_wfx_host_allocate_buffer>
 8008d14:	60f8      	str	r0, [r7, #12]
  if (status == SL_STATUS_OK) {
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d10f      	bne.n	8008d3c <sl_wfx_ext_auth_callback+0x44>
    memcpy(buffer,
 8008d1c:	68b8      	ldr	r0, [r7, #8]
           (void *)ext_auth_indication,
           ext_auth_indication->header.length);
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	881b      	ldrh	r3, [r3, #0]
 8008d22:	b29b      	uxth	r3, r3
    memcpy(buffer,
 8008d24:	461a      	mov	r2, r3
 8008d26:	6879      	ldr	r1, [r7, #4]
 8008d28:	f010 fff4 	bl	8019d14 <memcpy>
    xQueueSend(wifi_event_queue, &buffer, 0);
 8008d2c:	4b05      	ldr	r3, [pc, #20]	; (8008d44 <sl_wfx_ext_auth_callback+0x4c>)
 8008d2e:	6818      	ldr	r0, [r3, #0]
 8008d30:	f107 0108 	add.w	r1, r7, #8
 8008d34:	2300      	movs	r3, #0
 8008d36:	2200      	movs	r2, #0
 8008d38:	f000 ff8c 	bl	8009c54 <xQueueGenericSend>
  }
}
 8008d3c:	bf00      	nop
 8008d3e:	3710      	adds	r7, #16
 8008d40:	46bd      	mov	sp, r7
 8008d42:	bd80      	pop	{r7, pc}
 8008d44:	20001138 	.word	0x20001138

08008d48 <wifi_events_start>:
static void wifi_events_task_entry(void const * pvParameters);

/**************************************************************************//**
 * Start the Wi-Fi event handling task
 *****************************************************************************/
void wifi_events_start (void) {
 8008d48:	b5b0      	push	{r4, r5, r7, lr}
 8008d4a:	b086      	sub	sp, #24
 8008d4c:	af00      	add	r7, sp, #0
  sae_exch_sem = xSemaphoreCreateBinary();
 8008d4e:	2203      	movs	r2, #3
 8008d50:	2100      	movs	r1, #0
 8008d52:	2001      	movs	r0, #1
 8008d54:	f000 fef6 	bl	8009b44 <xQueueGenericCreate>
 8008d58:	4603      	mov	r3, r0
 8008d5a:	4a0d      	ldr	r2, [pc, #52]	; (8008d90 <wifi_events_start+0x48>)
 8008d5c:	6013      	str	r3, [r2, #0]
  osThreadDef(eventsTask, wifi_events_task_entry, osPriorityBelowNormal, 0, 1024);
 8008d5e:	4b0d      	ldr	r3, [pc, #52]	; (8008d94 <wifi_events_start+0x4c>)
 8008d60:	1d3c      	adds	r4, r7, #4
 8008d62:	461d      	mov	r5, r3
 8008d64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008d66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008d68:	682b      	ldr	r3, [r5, #0]
 8008d6a:	6023      	str	r3, [r4, #0]
  osThreadCreate(osThread(eventsTask), NULL);
 8008d6c:	1d3b      	adds	r3, r7, #4
 8008d6e:	2100      	movs	r1, #0
 8008d70:	4618      	mov	r0, r3
 8008d72:	f000 fa70 	bl	8009256 <osThreadCreate>
  wifi_event_queue = xQueueCreate(SL_WFX_EVENTS_NB_MAX, sizeof(void *));
 8008d76:	2200      	movs	r2, #0
 8008d78:	2104      	movs	r1, #4
 8008d7a:	200a      	movs	r0, #10
 8008d7c:	f000 fee2 	bl	8009b44 <xQueueGenericCreate>
 8008d80:	4603      	mov	r3, r0
 8008d82:	4a05      	ldr	r2, [pc, #20]	; (8008d98 <wifi_events_start+0x50>)
 8008d84:	6013      	str	r3, [r2, #0]
}
 8008d86:	bf00      	nop
 8008d88:	3718      	adds	r7, #24
 8008d8a:	46bd      	mov	sp, r7
 8008d8c:	bdb0      	pop	{r4, r5, r7, pc}
 8008d8e:	bf00      	nop
 8008d90:	2000113c 	.word	0x2000113c
 8008d94:	0801ba64 	.word	0x0801ba64
 8008d98:	20001138 	.word	0x20001138

08008d9c <wifi_events_task_entry>:

/**************************************************************************//**
 * Wi-Fi event handling task entry point
 *****************************************************************************/
static void wifi_events_task_entry (void const * pvParameters) {
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b084      	sub	sp, #16
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
  sl_wfx_generic_message_t *msg;
  BaseType_t ret;
  
	while(1) {

	ret = xQueueReceive(wifi_event_queue, (void *)&msg, portMAX_DELAY);
 8008da4:	4b22      	ldr	r3, [pc, #136]	; (8008e30 <wifi_events_task_entry+0x94>)
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	f107 0108 	add.w	r1, r7, #8
 8008dac:	f04f 32ff 	mov.w	r2, #4294967295
 8008db0:	4618      	mov	r0, r3
 8008db2:	f001 f975 	bl	800a0a0 <xQueueReceive>
 8008db6:	60f8      	str	r0, [r7, #12]
     
    if ((ret == pdTRUE) && (msg != NULL)) {
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	2b01      	cmp	r3, #1
 8008dbc:	d1f2      	bne.n	8008da4 <wifi_events_task_entry+0x8>
 8008dbe:	68bb      	ldr	r3, [r7, #8]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d0ef      	beq.n	8008da4 <wifi_events_task_entry+0x8>
      switch (msg->header.id) {
 8008dc4:	68bb      	ldr	r3, [r7, #8]
 8008dc6:	789b      	ldrb	r3, [r3, #2]
 8008dc8:	3bc3      	subs	r3, #195	; 0xc3
 8008dca:	2b09      	cmp	r3, #9
 8008dcc:	d82a      	bhi.n	8008e24 <wifi_events_task_entry+0x88>
 8008dce:	a201      	add	r2, pc, #4	; (adr r2, 8008dd4 <wifi_events_task_entry+0x38>)
 8008dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dd4:	08008dfd 	.word	0x08008dfd
 8008dd8:	08008e03 	.word	0x08008e03
 8008ddc:	08008e09 	.word	0x08008e09
 8008de0:	08008e25 	.word	0x08008e25
 8008de4:	08008e0f 	.word	0x08008e0f
 8008de8:	08008e25 	.word	0x08008e25
 8008dec:	08008e25 	.word	0x08008e25
 8008df0:	08008e25 	.word	0x08008e25
 8008df4:	08008e25 	.word	0x08008e25
 8008df8:	08008e15 	.word	0x08008e15
        case SL_WFX_CONNECT_IND_ID:
        {
          lwip_set_sta_link_up();
 8008dfc:	f7f9 fb40 	bl	8002480 <lwip_set_sta_link_up>
            /* Enable the power save */
            sl_wfx_set_power_mode(WFM_PM_MODE_PS, WFM_PM_POLL_FAST_PS,1);
            sl_wfx_enable_device_power_save();
          }
#endif
          break;
 8008e00:	e010      	b.n	8008e24 <wifi_events_task_entry+0x88>
        }
        case SL_WFX_DISCONNECT_IND_ID:
        {
          lwip_set_sta_link_down();
 8008e02:	f7f9 fb5b 	bl	80024bc <lwip_set_sta_link_down>
          break;
 8008e06:	e00d      	b.n	8008e24 <wifi_events_task_entry+0x88>
        }
        case SL_WFX_START_AP_IND_ID:
        {
          lwip_set_ap_link_up();
 8008e08:	f7f9 fb76 	bl	80024f8 <lwip_set_ap_link_up>
#ifdef SLEEP_ENABLED
          /* Power save always disabled when SoftAP mode enabled */
          sl_wfx_set_power_mode(WFM_PM_MODE_ACTIVE, WFM_PM_POLL_FAST_PS, 0);
          sl_wfx_disable_device_power_save();
#endif
          break;
 8008e0c:	e00a      	b.n	8008e24 <wifi_events_task_entry+0x88>
        }
        case SL_WFX_STOP_AP_IND_ID:
        {
          lwip_set_ap_link_down();
 8008e0e:	f7f9 fb89 	bl	8002524 <lwip_set_ap_link_down>
            /* Enable the power save */
            sl_wfx_set_power_mode(WFM_PM_MODE_PS, WFM_PM_POLL_FAST_PS,1);
            sl_wfx_enable_device_power_save();
          }
#endif
          break;
 8008e12:	e007      	b.n	8008e24 <wifi_events_task_entry+0x88>
        }
        case SL_WFX_SCAN_COMPLETE_IND_ID:
        {
          xSemaphoreGive(wifi_scan_sem);
 8008e14:	4b07      	ldr	r3, [pc, #28]	; (8008e34 <wifi_events_task_entry+0x98>)
 8008e16:	6818      	ldr	r0, [r3, #0]
 8008e18:	2300      	movs	r3, #0
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	2100      	movs	r1, #0
 8008e1e:	f000 ff19 	bl	8009c54 <xQueueGenericSend>
          break;
 8008e22:	bf00      	nop
        }
      }

      sl_wfx_host_free_buffer(msg, SL_WFX_RX_FRAME_BUFFER);
 8008e24:	68bb      	ldr	r3, [r7, #8]
 8008e26:	2101      	movs	r1, #1
 8008e28:	4618      	mov	r0, r3
 8008e2a:	f7ff fb8b 	bl	8008544 <sl_wfx_host_free_buffer>
	ret = xQueueReceive(wifi_event_queue, (void *)&msg, portMAX_DELAY);
 8008e2e:	e7b9      	b.n	8008da4 <wifi_events_task_entry+0x8>
 8008e30:	20001138 	.word	0x20001138
 8008e34:	2000112c 	.word	0x2000112c

08008e38 <sl_wfx_host_init_bus>:
SemaphoreHandle_t spiDMASemaphore;

/**************************************************************************//**
 * Bus init function
 *****************************************************************************/
sl_status_t sl_wfx_host_init_bus (void) {
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	af00      	add	r7, sp, #0
  /* Init SPI interface */
  MX_SPI1_Init();
 8008e3c:	f000 f8a8 	bl	8008f90 <MX_SPI1_Init>

  /*Create semaphore to handle SPI*/
  spiDMASemaphore = xSemaphoreCreateBinary();
 8008e40:	2203      	movs	r2, #3
 8008e42:	2100      	movs	r1, #0
 8008e44:	2001      	movs	r0, #1
 8008e46:	f000 fe7d 	bl	8009b44 <xQueueGenericCreate>
 8008e4a:	4603      	mov	r3, r0
 8008e4c:	4a05      	ldr	r2, [pc, #20]	; (8008e64 <sl_wfx_host_init_bus+0x2c>)
 8008e4e:	6013      	str	r3, [r2, #0]
  xSemaphoreGive(spiDMASemaphore);
 8008e50:	4b04      	ldr	r3, [pc, #16]	; (8008e64 <sl_wfx_host_init_bus+0x2c>)
 8008e52:	6818      	ldr	r0, [r3, #0]
 8008e54:	2300      	movs	r3, #0
 8008e56:	2200      	movs	r2, #0
 8008e58:	2100      	movs	r1, #0
 8008e5a:	f000 fefb 	bl	8009c54 <xQueueGenericSend>
  return SL_STATUS_OK;
 8008e5e:	2300      	movs	r3, #0
}
 8008e60:	4618      	mov	r0, r3
 8008e62:	bd80      	pop	{r7, pc}
 8008e64:	20001258 	.word	0x20001258

08008e68 <sl_wfx_host_deinit_bus>:

/**************************************************************************//**
 * Bus deinit function
 *****************************************************************************/
sl_status_t sl_wfx_host_deinit_bus (void) {
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	af00      	add	r7, sp, #0
  /* Delete the semaphore (No function implemented for semaphores, use mutex function) */
  osMutexDelete(spiDMASemaphore);
 8008e6c:	4b04      	ldr	r3, [pc, #16]	; (8008e80 <sl_wfx_host_deinit_bus+0x18>)
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	4618      	mov	r0, r3
 8008e72:	f000 fac7 	bl	8009404 <osMutexDelete>

  /* Deinit SPI interface */
  MX_SPI1_DeInit();
 8008e76:	f000 f8c1 	bl	8008ffc <MX_SPI1_DeInit>
  return SL_STATUS_OK;
 8008e7a:	2300      	movs	r3, #0
}
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	bd80      	pop	{r7, pc}
 8008e80:	20001258 	.word	0x20001258

08008e84 <sl_wfx_host_spi_cs_assert>:

/**************************************************************************//**
 * Assert SPI chip select
 *****************************************************************************/
sl_status_t sl_wfx_host_spi_cs_assert (void) {
 8008e84:	b580      	push	{r7, lr}
 8008e86:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(WFM_NSS_GPIO_Port, WFM_NSS_Pin, GPIO_PIN_RESET);
 8008e88:	2200      	movs	r2, #0
 8008e8a:	2110      	movs	r1, #16
 8008e8c:	4802      	ldr	r0, [pc, #8]	; (8008e98 <sl_wfx_host_spi_cs_assert+0x14>)
 8008e8e:	f7fb fced 	bl	800486c <HAL_GPIO_WritePin>
  return SL_STATUS_OK;
 8008e92:	2300      	movs	r3, #0
}
 8008e94:	4618      	mov	r0, r3
 8008e96:	bd80      	pop	{r7, pc}
 8008e98:	40020000 	.word	0x40020000

08008e9c <sl_wfx_host_spi_cs_deassert>:

/**************************************************************************//**
 * Deassert SPI chip select
 *****************************************************************************/
sl_status_t sl_wfx_host_spi_cs_deassert (void) {
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(WFM_NSS_GPIO_Port, WFM_NSS_Pin, GPIO_PIN_SET);
 8008ea0:	2201      	movs	r2, #1
 8008ea2:	2110      	movs	r1, #16
 8008ea4:	4802      	ldr	r0, [pc, #8]	; (8008eb0 <sl_wfx_host_spi_cs_deassert+0x14>)
 8008ea6:	f7fb fce1 	bl	800486c <HAL_GPIO_WritePin>
  return SL_STATUS_OK;
 8008eaa:	2300      	movs	r3, #0
}
 8008eac:	4618      	mov	r0, r3
 8008eae:	bd80      	pop	{r7, pc}
 8008eb0:	40020000 	.word	0x40020000

08008eb4 <sl_wfx_host_spi_transfer_no_cs_assert>:
 *****************************************************************************/
sl_status_t sl_wfx_host_spi_transfer_no_cs_assert (sl_wfx_host_bus_transfer_type_t type,
                                                   uint8_t *header,
                                                   uint16_t header_length,
                                                   uint8_t *buffer,
                                                   uint16_t buffer_length) {
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	b086      	sub	sp, #24
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	60b9      	str	r1, [r7, #8]
 8008ebc:	607b      	str	r3, [r7, #4]
 8008ebe:	4603      	mov	r3, r0
 8008ec0:	73fb      	strb	r3, [r7, #15]
 8008ec2:	4613      	mov	r3, r2
 8008ec4:	81bb      	strh	r3, [r7, #12]
  sl_status_t    result  = SL_STATUS_FAIL;
 8008ec6:	2301      	movs	r3, #1
 8008ec8:	617b      	str	r3, [r7, #20]
  const bool     is_read = ( type == SL_WFX_BUS_READ );
 8008eca:	7bfb      	ldrb	r3, [r7, #15]
 8008ecc:	2b02      	cmp	r3, #2
 8008ece:	bf0c      	ite	eq
 8008ed0:	2301      	moveq	r3, #1
 8008ed2:	2300      	movne	r3, #0
 8008ed4:	74fb      	strb	r3, [r7, #19]

  /* Wait for the DMA channels to be available */
  if (xSemaphoreTake(spiDMASemaphore, portMAX_DELAY) == pdTRUE ) {
 8008ed6:	4b21      	ldr	r3, [pc, #132]	; (8008f5c <sl_wfx_host_spi_transfer_no_cs_assert+0xa8>)
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	f04f 31ff 	mov.w	r1, #4294967295
 8008ede:	4618      	mov	r0, r3
 8008ee0:	f001 f9be 	bl	800a260 <xQueueSemaphoreTake>
 8008ee4:	4603      	mov	r3, r0
 8008ee6:	2b01      	cmp	r3, #1
 8008ee8:	d120      	bne.n	8008f2c <sl_wfx_host_spi_transfer_no_cs_assert+0x78>
	/* send the 2-byte header without DMA */

    HAL_SPI_Transmit(&hspi1, header, header_length, 1);
 8008eea:	89ba      	ldrh	r2, [r7, #12]
 8008eec:	2301      	movs	r3, #1
 8008eee:	68b9      	ldr	r1, [r7, #8]
 8008ef0:	481b      	ldr	r0, [pc, #108]	; (8008f60 <sl_wfx_host_spi_transfer_no_cs_assert+0xac>)
 8008ef2:	f7fc fa42 	bl	800537a <HAL_SPI_Transmit>
    if (is_read) {
 8008ef6:	7cfb      	ldrb	r3, [r7, #19]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d00b      	beq.n	8008f14 <sl_wfx_host_spi_transfer_no_cs_assert+0x60>
      if(HAL_SPI_Receive_DMA(&hspi1, buffer, buffer_length) == HAL_OK) result = SL_STATUS_OK;
 8008efc:	8c3b      	ldrh	r3, [r7, #32]
 8008efe:	461a      	mov	r2, r3
 8008f00:	6879      	ldr	r1, [r7, #4]
 8008f02:	4817      	ldr	r0, [pc, #92]	; (8008f60 <sl_wfx_host_spi_transfer_no_cs_assert+0xac>)
 8008f04:	f7fc fc2c 	bl	8005760 <HAL_SPI_Receive_DMA>
 8008f08:	4603      	mov	r3, r0
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d110      	bne.n	8008f30 <sl_wfx_host_spi_transfer_no_cs_assert+0x7c>
 8008f0e:	2300      	movs	r3, #0
 8008f10:	617b      	str	r3, [r7, #20]
 8008f12:	e00d      	b.n	8008f30 <sl_wfx_host_spi_transfer_no_cs_assert+0x7c>
    }
    else {
      if(HAL_SPI_Transmit_DMA(&hspi1, buffer, buffer_length) == HAL_OK) result = SL_STATUS_OK;
 8008f14:	8c3b      	ldrh	r3, [r7, #32]
 8008f16:	461a      	mov	r2, r3
 8008f18:	6879      	ldr	r1, [r7, #4]
 8008f1a:	4811      	ldr	r0, [pc, #68]	; (8008f60 <sl_wfx_host_spi_transfer_no_cs_assert+0xac>)
 8008f1c:	f7fc fb6a 	bl	80055f4 <HAL_SPI_Transmit_DMA>
 8008f20:	4603      	mov	r3, r0
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d104      	bne.n	8008f30 <sl_wfx_host_spi_transfer_no_cs_assert+0x7c>
 8008f26:	2300      	movs	r3, #0
 8008f28:	617b      	str	r3, [r7, #20]
 8008f2a:	e001      	b.n	8008f30 <sl_wfx_host_spi_transfer_no_cs_assert+0x7c>
    }
  } else {
    result = SL_STATUS_TIMEOUT;
 8008f2c:	2307      	movs	r3, #7
 8008f2e:	617b      	str	r3, [r7, #20]
  }

  /* Wait to receive the semaphore back from the DMA. In case of a read function, this means data is ready to be read*/
  if (xSemaphoreTake(spiDMASemaphore, portMAX_DELAY) == pdTRUE ) {
 8008f30:	4b0a      	ldr	r3, [pc, #40]	; (8008f5c <sl_wfx_host_spi_transfer_no_cs_assert+0xa8>)
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	f04f 31ff 	mov.w	r1, #4294967295
 8008f38:	4618      	mov	r0, r3
 8008f3a:	f001 f991 	bl	800a260 <xQueueSemaphoreTake>
 8008f3e:	4603      	mov	r3, r0
 8008f40:	2b01      	cmp	r3, #1
 8008f42:	d106      	bne.n	8008f52 <sl_wfx_host_spi_transfer_no_cs_assert+0x9e>
    xSemaphoreGive(spiDMASemaphore);
 8008f44:	4b05      	ldr	r3, [pc, #20]	; (8008f5c <sl_wfx_host_spi_transfer_no_cs_assert+0xa8>)
 8008f46:	6818      	ldr	r0, [r3, #0]
 8008f48:	2300      	movs	r3, #0
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	2100      	movs	r1, #0
 8008f4e:	f000 fe81 	bl	8009c54 <xQueueGenericSend>
  }

  return result;
 8008f52:	697b      	ldr	r3, [r7, #20]
}
 8008f54:	4618      	mov	r0, r3
 8008f56:	3718      	adds	r7, #24
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	bd80      	pop	{r7, pc}
 8008f5c:	20001258 	.word	0x20001258
 8008f60:	20001140 	.word	0x20001140

08008f64 <sl_wfx_host_enable_platform_interrupt>:

/**************************************************************************//**
 * Enable interrupt
 *****************************************************************************/
sl_status_t sl_wfx_host_enable_platform_interrupt (void) {
 8008f64:	b580      	push	{r7, lr}
 8008f66:	af00      	add	r7, sp, #0
  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 10, 0);
 8008f68:	2200      	movs	r2, #0
 8008f6a:	210a      	movs	r1, #10
 8008f6c:	2028      	movs	r0, #40	; 0x28
 8008f6e:	f7fa fc86 	bl	800387e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8008f72:	2028      	movs	r0, #40	; 0x28
 8008f74:	f7fa fc9f 	bl	80038b6 <HAL_NVIC_EnableIRQ>
  return SL_STATUS_OK;
 8008f78:	2300      	movs	r3, #0
}
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	bd80      	pop	{r7, pc}

08008f7e <sl_wfx_host_disable_platform_interrupt>:

/**************************************************************************//**
 * Disable interrupt
 *****************************************************************************/
sl_status_t sl_wfx_host_disable_platform_interrupt (void) {
 8008f7e:	b580      	push	{r7, lr}
 8008f80:	af00      	add	r7, sp, #0
  HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 8008f82:	2028      	movs	r0, #40	; 0x28
 8008f84:	f7fa fca5 	bl	80038d2 <HAL_NVIC_DisableIRQ>
  return SL_STATUS_OK;
 8008f88:	2300      	movs	r3, #0
}
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	bd80      	pop	{r7, pc}
	...

08008f90 <MX_SPI1_Init>:

/**************************************************************************//**
 * SPI1 init function
 *****************************************************************************/
static void MX_SPI1_Init (void) {
 8008f90:	b580      	push	{r7, lr}
 8008f92:	af00      	add	r7, sp, #0
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8008f94:	4b17      	ldr	r3, [pc, #92]	; (8008ff4 <MX_SPI1_Init+0x64>)
 8008f96:	4a18      	ldr	r2, [pc, #96]	; (8008ff8 <MX_SPI1_Init+0x68>)
 8008f98:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8008f9a:	4b16      	ldr	r3, [pc, #88]	; (8008ff4 <MX_SPI1_Init+0x64>)
 8008f9c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8008fa0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8008fa2:	4b14      	ldr	r3, [pc, #80]	; (8008ff4 <MX_SPI1_Init+0x64>)
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8008fa8:	4b12      	ldr	r3, [pc, #72]	; (8008ff4 <MX_SPI1_Init+0x64>)
 8008faa:	2200      	movs	r2, #0
 8008fac:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8008fae:	4b11      	ldr	r3, [pc, #68]	; (8008ff4 <MX_SPI1_Init+0x64>)
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8008fb4:	4b0f      	ldr	r3, [pc, #60]	; (8008ff4 <MX_SPI1_Init+0x64>)
 8008fb6:	2200      	movs	r2, #0
 8008fb8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8008fba:	4b0e      	ldr	r3, [pc, #56]	; (8008ff4 <MX_SPI1_Init+0x64>)
 8008fbc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008fc0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008fc2:	4b0c      	ldr	r3, [pc, #48]	; (8008ff4 <MX_SPI1_Init+0x64>)
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8008fc8:	4b0a      	ldr	r3, [pc, #40]	; (8008ff4 <MX_SPI1_Init+0x64>)
 8008fca:	2200      	movs	r2, #0
 8008fcc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8008fce:	4b09      	ldr	r3, [pc, #36]	; (8008ff4 <MX_SPI1_Init+0x64>)
 8008fd0:	2200      	movs	r2, #0
 8008fd2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008fd4:	4b07      	ldr	r3, [pc, #28]	; (8008ff4 <MX_SPI1_Init+0x64>)
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8008fda:	4b06      	ldr	r3, [pc, #24]	; (8008ff4 <MX_SPI1_Init+0x64>)
 8008fdc:	220a      	movs	r2, #10
 8008fde:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8008fe0:	4804      	ldr	r0, [pc, #16]	; (8008ff4 <MX_SPI1_Init+0x64>)
 8008fe2:	f7fc f919 	bl	8005218 <HAL_SPI_Init>
 8008fe6:	4603      	mov	r3, r0
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d001      	beq.n	8008ff0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8008fec:	f7f9 fe24 	bl	8002c38 <Error_Handler>
  }
}
 8008ff0:	bf00      	nop
 8008ff2:	bd80      	pop	{r7, pc}
 8008ff4:	20001140 	.word	0x20001140
 8008ff8:	40013000 	.word	0x40013000

08008ffc <MX_SPI1_DeInit>:

/**************************************************************************//**
 * SPI1 deinit function
 *****************************************************************************/
static void MX_SPI1_DeInit (void) {
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	af00      	add	r7, sp, #0
  /* SPI DMA DeInit */
  HAL_DMA_DeInit(&hdma_spi1_rx);
 8009000:	4805      	ldr	r0, [pc, #20]	; (8009018 <MX_SPI1_DeInit+0x1c>)
 8009002:	f7fa fd4b 	bl	8003a9c <HAL_DMA_DeInit>
  HAL_DMA_DeInit(&hdma_spi1_tx);
 8009006:	4805      	ldr	r0, [pc, #20]	; (800901c <MX_SPI1_DeInit+0x20>)
 8009008:	f7fa fd48 	bl	8003a9c <HAL_DMA_DeInit>

  HAL_SPI_DeInit(&hspi1);
 800900c:	4804      	ldr	r0, [pc, #16]	; (8009020 <MX_SPI1_DeInit+0x24>)
 800900e:	f7fc f98c 	bl	800532a <HAL_SPI_DeInit>
}
 8009012:	bf00      	nop
 8009014:	bd80      	pop	{r7, pc}
 8009016:	bf00      	nop
 8009018:	200011f8 	.word	0x200011f8
 800901c:	20001198 	.word	0x20001198
 8009020:	20001140 	.word	0x20001140

08009024 <sl_wfx_task_start>:
static sl_status_t sl_wfx_tx_process (void);

/**************************************************************************//**
 * Init wfx process thread
 *****************************************************************************/
void sl_wfx_task_start (void) {
 8009024:	b5b0      	push	{r4, r5, r7, lr}
 8009026:	b086      	sub	sp, #24
 8009028:	af00      	add	r7, sp, #0

  sl_wfx_event_group = xEventGroupCreate();
 800902a:	f000 fad0 	bl	80095ce <xEventGroupCreate>
 800902e:	4603      	mov	r3, r0
 8009030:	4a10      	ldr	r2, [pc, #64]	; (8009074 <sl_wfx_task_start+0x50>)
 8009032:	6013      	str	r3, [r2, #0]
  sl_wfx_tx_queue_mutex = xSemaphoreCreateMutex();
 8009034:	2001      	movs	r0, #1
 8009036:	f000 fdf4 	bl	8009c22 <xQueueCreateMutex>
 800903a:	4603      	mov	r3, r0
 800903c:	4a0e      	ldr	r2, [pc, #56]	; (8009078 <sl_wfx_task_start+0x54>)
 800903e:	6013      	str	r3, [r2, #0]
  sl_wfx_tx_queue_context.head_ptr = NULL;
 8009040:	4b0e      	ldr	r3, [pc, #56]	; (800907c <sl_wfx_task_start+0x58>)
 8009042:	2200      	movs	r2, #0
 8009044:	601a      	str	r2, [r3, #0]
  sl_wfx_tx_queue_context.tail_ptr = NULL;
 8009046:	4b0d      	ldr	r3, [pc, #52]	; (800907c <sl_wfx_task_start+0x58>)
 8009048:	2200      	movs	r2, #0
 800904a:	605a      	str	r2, [r3, #4]
  osThreadDef(sl_wfx_task, sl_wfx_task_entry, osPriorityNormal , 0, configMINIMAL_STACK_SIZE*4);//osPriorityHigh
 800904c:	4b0c      	ldr	r3, [pc, #48]	; (8009080 <sl_wfx_task_start+0x5c>)
 800904e:	1d3c      	adds	r4, r7, #4
 8009050:	461d      	mov	r5, r3
 8009052:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009054:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009056:	682b      	ldr	r3, [r5, #0]
 8009058:	6023      	str	r3, [r4, #0]
  sl_wfx_task_handle = osThreadCreate(osThread(sl_wfx_task), NULL);
 800905a:	1d3b      	adds	r3, r7, #4
 800905c:	2100      	movs	r1, #0
 800905e:	4618      	mov	r0, r3
 8009060:	f000 f8f9 	bl	8009256 <osThreadCreate>
 8009064:	4603      	mov	r3, r0
 8009066:	4a07      	ldr	r2, [pc, #28]	; (8009084 <sl_wfx_task_start+0x60>)
 8009068:	6013      	str	r3, [r2, #0]

}
 800906a:	bf00      	nop
 800906c:	3718      	adds	r7, #24
 800906e:	46bd      	mov	sp, r7
 8009070:	bdb0      	pop	{r4, r5, r7, pc}
 8009072:	bf00      	nop
 8009074:	20001260 	.word	0x20001260
 8009078:	20001264 	.word	0x20001264
 800907c:	20001268 	.word	0x20001268
 8009080:	0801ba84 	.word	0x0801ba84
 8009084:	2000125c 	.word	0x2000125c

08009088 <sl_wfx_task_entry>:

/**************************************************************************//**
 * Wfx process task entry
 *****************************************************************************/
static void sl_wfx_task_entry (void const * pvParameters) {
 8009088:	b580      	push	{r7, lr}
 800908a:	b086      	sub	sp, #24
 800908c:	af02      	add	r7, sp, #8
 800908e:	6078      	str	r0, [r7, #4]
  uint16_t control_register = 0;
 8009090:	2300      	movs	r3, #0
 8009092:	81fb      	strh	r3, [r7, #14]
  

  while(1) {

    /*Wait for an event*/
    wifi_event_bits = xEventGroupWaitBits(sl_wfx_event_group,
 8009094:	4b0d      	ldr	r3, [pc, #52]	; (80090cc <sl_wfx_task_entry+0x44>)
 8009096:	6818      	ldr	r0, [r3, #0]
 8009098:	f04f 33ff 	mov.w	r3, #4294967295
 800909c:	9300      	str	r3, [sp, #0]
 800909e:	2300      	movs	r3, #0
 80090a0:	2201      	movs	r2, #1
 80090a2:	2103      	movs	r1, #3
 80090a4:	f000 faaa 	bl	80095fc <xEventGroupWaitBits>
 80090a8:	60b8      	str	r0, [r7, #8]
                                          SL_WFX_TX_PACKET_AVAILABLE | SL_WFX_RX_PACKET_AVAILABLE,
                                          pdTRUE,
                                          pdFALSE,
                                          portMAX_DELAY);

    if (wifi_event_bits & SL_WFX_TX_PACKET_AVAILABLE) {
 80090aa:	68bb      	ldr	r3, [r7, #8]
 80090ac:	f003 0301 	and.w	r3, r3, #1
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d001      	beq.n	80090b8 <sl_wfx_task_entry+0x30>
      /* Process TX packets */
      sl_wfx_tx_process();
 80090b4:	f000 f834 	bl	8009120 <sl_wfx_tx_process>
    }
    if (wifi_event_bits & SL_WFX_RX_PACKET_AVAILABLE) {
 80090b8:	68bb      	ldr	r3, [r7, #8]
 80090ba:	f003 0302 	and.w	r3, r3, #2
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d0e8      	beq.n	8009094 <sl_wfx_task_entry+0xc>
      /* Process RX packets */
      sl_wfx_rx_process(control_register);
 80090c2:	89fb      	ldrh	r3, [r7, #14]
 80090c4:	4618      	mov	r0, r3
 80090c6:	f000 f803 	bl	80090d0 <sl_wfx_rx_process>
    wifi_event_bits = xEventGroupWaitBits(sl_wfx_event_group,
 80090ca:	e7e3      	b.n	8009094 <sl_wfx_task_entry+0xc>
 80090cc:	20001260 	.word	0x20001260

080090d0 <sl_wfx_rx_process>:
}

/**************************************************************************//**
 * Wfx process receive frame
 *****************************************************************************/
static sl_status_t sl_wfx_rx_process (uint16_t control_register) {
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b084      	sub	sp, #16
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	4603      	mov	r3, r0
 80090d8:	80fb      	strh	r3, [r7, #6]
  sl_status_t result;

  sl_wfx_host_disable_platform_interrupt();
 80090da:	f7ff ff50 	bl	8008f7e <sl_wfx_host_disable_platform_interrupt>

  /* Receive a frame */
  result = sl_wfx_receive_frame(&control_register);
 80090de:	1dbb      	adds	r3, r7, #6
 80090e0:	4618      	mov	r0, r3
 80090e2:	f7fe fa13 	bl	800750c <sl_wfx_receive_frame>
 80090e6:	60f8      	str	r0, [r7, #12]
  
  if (result) {
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d002      	beq.n	80090f4 <sl_wfx_rx_process+0x24>
    sl_wfx_host_enable_platform_interrupt();
 80090ee:	f7ff ff39 	bl	8008f64 <sl_wfx_host_enable_platform_interrupt>
 80090f2:	e00d      	b.n	8009110 <sl_wfx_rx_process+0x40>
  } else {
    if ((control_register & SL_WFX_CONT_NEXT_LEN_MASK) != 0) {
 80090f4:	88fb      	ldrh	r3, [r7, #6]
 80090f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d006      	beq.n	800910c <sl_wfx_rx_process+0x3c>
      
      /* if a packet is still available in the WF200, set an RX event */
      xEventGroupSetBits(sl_wfx_event_group, SL_WFX_RX_PACKET_AVAILABLE);
 80090fe:	4b07      	ldr	r3, [pc, #28]	; (800911c <sl_wfx_rx_process+0x4c>)
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	2102      	movs	r1, #2
 8009104:	4618      	mov	r0, r3
 8009106:	f000 fb47 	bl	8009798 <xEventGroupSetBits>
 800910a:	e001      	b.n	8009110 <sl_wfx_rx_process+0x40>
    } else {
      sl_wfx_host_enable_platform_interrupt();
 800910c:	f7ff ff2a 	bl	8008f64 <sl_wfx_host_enable_platform_interrupt>
    }
  }

  return result;
 8009110:	68fb      	ldr	r3, [r7, #12]
}
 8009112:	4618      	mov	r0, r3
 8009114:	3710      	adds	r7, #16
 8009116:	46bd      	mov	sp, r7
 8009118:	bd80      	pop	{r7, pc}
 800911a:	bf00      	nop
 800911c:	20001260 	.word	0x20001260

08009120 <sl_wfx_tx_process>:

/**************************************************************************//**
 * Wfx process tx queue
 *****************************************************************************/
static sl_status_t sl_wfx_tx_process (void) {
 8009120:	b580      	push	{r7, lr}
 8009122:	b082      	sub	sp, #8
 8009124:	af00      	add	r7, sp, #0
  sl_status_t result;
  sl_wfx_packet_queue_item_t *item_to_free;

  if (sl_wfx_tx_queue_context.head_ptr == NULL) {
 8009126:	4b28      	ldr	r3, [pc, #160]	; (80091c8 <sl_wfx_tx_process+0xa8>)
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d101      	bne.n	8009132 <sl_wfx_tx_process+0x12>
    return SL_STATUS_EMPTY;
 800912e:	231b      	movs	r3, #27
 8009130:	e045      	b.n	80091be <sl_wfx_tx_process+0x9e>
  }

  /* Take TX queue mutex */
  xSemaphoreTake(sl_wfx_tx_queue_mutex, portMAX_DELAY);
 8009132:	4b26      	ldr	r3, [pc, #152]	; (80091cc <sl_wfx_tx_process+0xac>)
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	f04f 31ff 	mov.w	r1, #4294967295
 800913a:	4618      	mov	r0, r3
 800913c:	f001 f890 	bl	800a260 <xQueueSemaphoreTake>

  /* Send the packet */
  result = sl_wfx_send_ethernet_frame(&sl_wfx_tx_queue_context.head_ptr->buffer,
 8009140:	4b21      	ldr	r3, [pc, #132]	; (80091c8 <sl_wfx_tx_process+0xa8>)
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	f103 000c 	add.w	r0, r3, #12
                                      sl_wfx_tx_queue_context.head_ptr->data_length,
 8009148:	4b1f      	ldr	r3, [pc, #124]	; (80091c8 <sl_wfx_tx_process+0xa8>)
 800914a:	681b      	ldr	r3, [r3, #0]
  result = sl_wfx_send_ethernet_frame(&sl_wfx_tx_queue_context.head_ptr->buffer,
 800914c:	6899      	ldr	r1, [r3, #8]
                                      sl_wfx_tx_queue_context.head_ptr->interface,
 800914e:	4b1e      	ldr	r3, [pc, #120]	; (80091c8 <sl_wfx_tx_process+0xa8>)
 8009150:	681b      	ldr	r3, [r3, #0]
  result = sl_wfx_send_ethernet_frame(&sl_wfx_tx_queue_context.head_ptr->buffer,
 8009152:	791a      	ldrb	r2, [r3, #4]
 8009154:	2300      	movs	r3, #0
 8009156:	f7fe f897 	bl	8007288 <sl_wfx_send_ethernet_frame>
 800915a:	6078      	str	r0, [r7, #4]
                                      WFM_PRIORITY_BE0);

  if (result != SL_STATUS_OK) {
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d00e      	beq.n	8009180 <sl_wfx_tx_process+0x60>
    /* If the packet is not successfully sent, set the associated event and return */
    xEventGroupSetBits(sl_wfx_event_group, SL_WFX_TX_PACKET_AVAILABLE);
 8009162:	4b1b      	ldr	r3, [pc, #108]	; (80091d0 <sl_wfx_tx_process+0xb0>)
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	2101      	movs	r1, #1
 8009168:	4618      	mov	r0, r3
 800916a:	f000 fb15 	bl	8009798 <xEventGroupSetBits>
    xSemaphoreGive(sl_wfx_tx_queue_mutex);
 800916e:	4b17      	ldr	r3, [pc, #92]	; (80091cc <sl_wfx_tx_process+0xac>)
 8009170:	6818      	ldr	r0, [r3, #0]
 8009172:	2300      	movs	r3, #0
 8009174:	2200      	movs	r2, #0
 8009176:	2100      	movs	r1, #0
 8009178:	f000 fd6c 	bl	8009c54 <xQueueGenericSend>
    return SL_STATUS_FULL;
 800917c:	231c      	movs	r3, #28
 800917e:	e01e      	b.n	80091be <sl_wfx_tx_process+0x9e>
  }
  
  /* The packet has been successfully sent, free it  */
  item_to_free = sl_wfx_tx_queue_context.head_ptr;
 8009180:	4b11      	ldr	r3, [pc, #68]	; (80091c8 <sl_wfx_tx_process+0xa8>)
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	603b      	str	r3, [r7, #0]
  
  /* Move the queue pointer to process the next packet */
  sl_wfx_tx_queue_context.head_ptr = sl_wfx_tx_queue_context.head_ptr->next;
 8009186:	4b10      	ldr	r3, [pc, #64]	; (80091c8 <sl_wfx_tx_process+0xa8>)
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	4a0e      	ldr	r2, [pc, #56]	; (80091c8 <sl_wfx_tx_process+0xa8>)
 800918e:	6013      	str	r3, [r2, #0]

  /* The packet has been sent, release the packet  */
  sl_wfx_free_command_buffer((sl_wfx_generic_message_t*) item_to_free,
 8009190:	2200      	movs	r2, #0
 8009192:	214a      	movs	r1, #74	; 0x4a
 8009194:	6838      	ldr	r0, [r7, #0]
 8009196:	f7fe ff1d 	bl	8007fd4 <sl_wfx_free_command_buffer>
                             SL_WFX_SEND_FRAME_REQ_ID,
                             SL_WFX_TX_FRAME_BUFFER);

  /* If a packet is available, set the associated event */
  if (sl_wfx_tx_queue_context.head_ptr != NULL) {
 800919a:	4b0b      	ldr	r3, [pc, #44]	; (80091c8 <sl_wfx_tx_process+0xa8>)
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d005      	beq.n	80091ae <sl_wfx_tx_process+0x8e>
    xEventGroupSetBits(sl_wfx_event_group, SL_WFX_TX_PACKET_AVAILABLE);
 80091a2:	4b0b      	ldr	r3, [pc, #44]	; (80091d0 <sl_wfx_tx_process+0xb0>)
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	2101      	movs	r1, #1
 80091a8:	4618      	mov	r0, r3
 80091aa:	f000 faf5 	bl	8009798 <xEventGroupSetBits>
  }
  
  /* Release TX queue mutex */
  xSemaphoreGive(sl_wfx_tx_queue_mutex);
 80091ae:	4b07      	ldr	r3, [pc, #28]	; (80091cc <sl_wfx_tx_process+0xac>)
 80091b0:	6818      	ldr	r0, [r3, #0]
 80091b2:	2300      	movs	r3, #0
 80091b4:	2200      	movs	r2, #0
 80091b6:	2100      	movs	r1, #0
 80091b8:	f000 fd4c 	bl	8009c54 <xQueueGenericSend>

  return result;
 80091bc:	687b      	ldr	r3, [r7, #4]
}
 80091be:	4618      	mov	r0, r3
 80091c0:	3708      	adds	r7, #8
 80091c2:	46bd      	mov	sp, r7
 80091c4:	bd80      	pop	{r7, pc}
 80091c6:	bf00      	nop
 80091c8:	20001268 	.word	0x20001268
 80091cc:	20001264 	.word	0x20001264
 80091d0:	20001260 	.word	0x20001260

080091d4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80091d4:	b480      	push	{r7}
 80091d6:	b085      	sub	sp, #20
 80091d8:	af00      	add	r7, sp, #0
 80091da:	4603      	mov	r3, r0
 80091dc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80091de:	2300      	movs	r3, #0
 80091e0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80091e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80091e6:	2b84      	cmp	r3, #132	; 0x84
 80091e8:	d005      	beq.n	80091f6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80091ea:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	4413      	add	r3, r2
 80091f2:	3303      	adds	r3, #3
 80091f4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80091f6:	68fb      	ldr	r3, [r7, #12]
}
 80091f8:	4618      	mov	r0, r3
 80091fa:	3714      	adds	r7, #20
 80091fc:	46bd      	mov	sp, r7
 80091fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009202:	4770      	bx	lr

08009204 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8009204:	b480      	push	{r7}
 8009206:	b083      	sub	sp, #12
 8009208:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800920a:	f3ef 8305 	mrs	r3, IPSR
 800920e:	607b      	str	r3, [r7, #4]
  return(result);
 8009210:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8009212:	2b00      	cmp	r3, #0
 8009214:	bf14      	ite	ne
 8009216:	2301      	movne	r3, #1
 8009218:	2300      	moveq	r3, #0
 800921a:	b2db      	uxtb	r3, r3
}
 800921c:	4618      	mov	r0, r3
 800921e:	370c      	adds	r7, #12
 8009220:	46bd      	mov	sp, r7
 8009222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009226:	4770      	bx	lr

08009228 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8009228:	b580      	push	{r7, lr}
 800922a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800922c:	f001 fd68 	bl	800ad00 <vTaskStartScheduler>
  
  return osOK;
 8009230:	2300      	movs	r3, #0
}
 8009232:	4618      	mov	r0, r3
 8009234:	bd80      	pop	{r7, pc}

08009236 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8009236:	b580      	push	{r7, lr}
 8009238:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800923a:	f7ff ffe3 	bl	8009204 <inHandlerMode>
 800923e:	4603      	mov	r3, r0
 8009240:	2b00      	cmp	r3, #0
 8009242:	d003      	beq.n	800924c <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8009244:	f001 fe64 	bl	800af10 <xTaskGetTickCountFromISR>
 8009248:	4603      	mov	r3, r0
 800924a:	e002      	b.n	8009252 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800924c:	f001 fe50 	bl	800aef0 <xTaskGetTickCount>
 8009250:	4603      	mov	r3, r0
  }
}
 8009252:	4618      	mov	r0, r3
 8009254:	bd80      	pop	{r7, pc}

08009256 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8009256:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009258:	b087      	sub	sp, #28
 800925a:	af02      	add	r7, sp, #8
 800925c:	6078      	str	r0, [r7, #4]
 800925e:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	685c      	ldr	r4, [r3, #4]
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800926c:	b29e      	uxth	r6, r3
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009274:	4618      	mov	r0, r3
 8009276:	f7ff ffad 	bl	80091d4 <makeFreeRtosPriority>
 800927a:	4602      	mov	r2, r0
 800927c:	f107 030c 	add.w	r3, r7, #12
 8009280:	9301      	str	r3, [sp, #4]
 8009282:	9200      	str	r2, [sp, #0]
 8009284:	683b      	ldr	r3, [r7, #0]
 8009286:	4632      	mov	r2, r6
 8009288:	4629      	mov	r1, r5
 800928a:	4620      	mov	r0, r4
 800928c:	f001 fb42 	bl	800a914 <xTaskCreate>
 8009290:	4603      	mov	r3, r0
 8009292:	2b01      	cmp	r3, #1
 8009294:	d001      	beq.n	800929a <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8009296:	2300      	movs	r3, #0
 8009298:	e000      	b.n	800929c <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 800929a:	68fb      	ldr	r3, [r7, #12]
}
 800929c:	4618      	mov	r0, r3
 800929e:	3714      	adds	r7, #20
 80092a0:	46bd      	mov	sp, r7
 80092a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080092a4 <osThreadTerminate>:
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadTerminate shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadTerminate (osThreadId thread_id)
{
 80092a4:	b580      	push	{r7, lr}
 80092a6:	b082      	sub	sp, #8
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskDelete == 1)
  vTaskDelete(thread_id);
 80092ac:	6878      	ldr	r0, [r7, #4]
 80092ae:	f001 fc63 	bl	800ab78 <vTaskDelete>
  return osOK;
 80092b2:	2300      	movs	r3, #0
#else
  return osErrorOS;
#endif
}
 80092b4:	4618      	mov	r0, r3
 80092b6:	3708      	adds	r7, #8
 80092b8:	46bd      	mov	sp, r7
 80092ba:	bd80      	pop	{r7, pc}

080092bc <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80092bc:	b580      	push	{r7, lr}
 80092be:	b084      	sub	sp, #16
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d001      	beq.n	80092d2 <osDelay+0x16>
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	e000      	b.n	80092d4 <osDelay+0x18>
 80092d2:	2301      	movs	r3, #1
 80092d4:	4618      	mov	r0, r3
 80092d6:	f001 fcdf 	bl	800ac98 <vTaskDelay>
  
  return osOK;
 80092da:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80092dc:	4618      	mov	r0, r3
 80092de:	3710      	adds	r7, #16
 80092e0:	46bd      	mov	sp, r7
 80092e2:	bd80      	pop	{r7, pc}

080092e4 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 80092e4:	b580      	push	{r7, lr}
 80092e6:	b082      	sub	sp, #8
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 80092ec:	2001      	movs	r0, #1
 80092ee:	f000 fc98 	bl	8009c22 <xQueueCreateMutex>
 80092f2:	4603      	mov	r3, r0
#endif
#else
  return NULL;
#endif
}
 80092f4:	4618      	mov	r0, r3
 80092f6:	3708      	adds	r7, #8
 80092f8:	46bd      	mov	sp, r7
 80092fa:	bd80      	pop	{r7, pc}

080092fc <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b084      	sub	sp, #16
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
 8009304:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8009306:	2300      	movs	r3, #0
 8009308:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d101      	bne.n	8009314 <osMutexWait+0x18>
    return osErrorParameter;
 8009310:	2380      	movs	r3, #128	; 0x80
 8009312:	e03a      	b.n	800938a <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8009314:	2300      	movs	r3, #0
 8009316:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8009318:	683b      	ldr	r3, [r7, #0]
 800931a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800931e:	d103      	bne.n	8009328 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8009320:	f04f 33ff 	mov.w	r3, #4294967295
 8009324:	60fb      	str	r3, [r7, #12]
 8009326:	e009      	b.n	800933c <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8009328:	683b      	ldr	r3, [r7, #0]
 800932a:	2b00      	cmp	r3, #0
 800932c:	d006      	beq.n	800933c <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800932e:	683b      	ldr	r3, [r7, #0]
 8009330:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	2b00      	cmp	r3, #0
 8009336:	d101      	bne.n	800933c <osMutexWait+0x40>
      ticks = 1;
 8009338:	2301      	movs	r3, #1
 800933a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800933c:	f7ff ff62 	bl	8009204 <inHandlerMode>
 8009340:	4603      	mov	r3, r0
 8009342:	2b00      	cmp	r3, #0
 8009344:	d017      	beq.n	8009376 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8009346:	f107 0308 	add.w	r3, r7, #8
 800934a:	461a      	mov	r2, r3
 800934c:	2100      	movs	r1, #0
 800934e:	6878      	ldr	r0, [r7, #4]
 8009350:	f001 f892 	bl	800a478 <xQueueReceiveFromISR>
 8009354:	4603      	mov	r3, r0
 8009356:	2b01      	cmp	r3, #1
 8009358:	d001      	beq.n	800935e <osMutexWait+0x62>
      return osErrorOS;
 800935a:	23ff      	movs	r3, #255	; 0xff
 800935c:	e015      	b.n	800938a <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800935e:	68bb      	ldr	r3, [r7, #8]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d011      	beq.n	8009388 <osMutexWait+0x8c>
 8009364:	4b0b      	ldr	r3, [pc, #44]	; (8009394 <osMutexWait+0x98>)
 8009366:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800936a:	601a      	str	r2, [r3, #0]
 800936c:	f3bf 8f4f 	dsb	sy
 8009370:	f3bf 8f6f 	isb	sy
 8009374:	e008      	b.n	8009388 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8009376:	68f9      	ldr	r1, [r7, #12]
 8009378:	6878      	ldr	r0, [r7, #4]
 800937a:	f000 ff71 	bl	800a260 <xQueueSemaphoreTake>
 800937e:	4603      	mov	r3, r0
 8009380:	2b01      	cmp	r3, #1
 8009382:	d001      	beq.n	8009388 <osMutexWait+0x8c>
    return osErrorOS;
 8009384:	23ff      	movs	r3, #255	; 0xff
 8009386:	e000      	b.n	800938a <osMutexWait+0x8e>
  }
  
  return osOK;
 8009388:	2300      	movs	r3, #0
}
 800938a:	4618      	mov	r0, r3
 800938c:	3710      	adds	r7, #16
 800938e:	46bd      	mov	sp, r7
 8009390:	bd80      	pop	{r7, pc}
 8009392:	bf00      	nop
 8009394:	e000ed04 	.word	0xe000ed04

08009398 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8009398:	b580      	push	{r7, lr}
 800939a:	b084      	sub	sp, #16
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80093a0:	2300      	movs	r3, #0
 80093a2:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80093a4:	2300      	movs	r3, #0
 80093a6:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 80093a8:	f7ff ff2c 	bl	8009204 <inHandlerMode>
 80093ac:	4603      	mov	r3, r0
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d016      	beq.n	80093e0 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80093b2:	f107 0308 	add.w	r3, r7, #8
 80093b6:	4619      	mov	r1, r3
 80093b8:	6878      	ldr	r0, [r7, #4]
 80093ba:	f000 fde4 	bl	8009f86 <xQueueGiveFromISR>
 80093be:	4603      	mov	r3, r0
 80093c0:	2b01      	cmp	r3, #1
 80093c2:	d001      	beq.n	80093c8 <osMutexRelease+0x30>
      return osErrorOS;
 80093c4:	23ff      	movs	r3, #255	; 0xff
 80093c6:	e017      	b.n	80093f8 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80093c8:	68bb      	ldr	r3, [r7, #8]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d013      	beq.n	80093f6 <osMutexRelease+0x5e>
 80093ce:	4b0c      	ldr	r3, [pc, #48]	; (8009400 <osMutexRelease+0x68>)
 80093d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80093d4:	601a      	str	r2, [r3, #0]
 80093d6:	f3bf 8f4f 	dsb	sy
 80093da:	f3bf 8f6f 	isb	sy
 80093de:	e00a      	b.n	80093f6 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 80093e0:	2300      	movs	r3, #0
 80093e2:	2200      	movs	r2, #0
 80093e4:	2100      	movs	r1, #0
 80093e6:	6878      	ldr	r0, [r7, #4]
 80093e8:	f000 fc34 	bl	8009c54 <xQueueGenericSend>
 80093ec:	4603      	mov	r3, r0
 80093ee:	2b01      	cmp	r3, #1
 80093f0:	d001      	beq.n	80093f6 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 80093f2:	23ff      	movs	r3, #255	; 0xff
 80093f4:	60fb      	str	r3, [r7, #12]
  }
  return result;
 80093f6:	68fb      	ldr	r3, [r7, #12]
}
 80093f8:	4618      	mov	r0, r3
 80093fa:	3710      	adds	r7, #16
 80093fc:	46bd      	mov	sp, r7
 80093fe:	bd80      	pop	{r7, pc}
 8009400:	e000ed04 	.word	0xe000ed04

08009404 <osMutexDelete>:
* @param mutex_id  mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexDelete (osMutexId mutex_id)
{
 8009404:	b580      	push	{r7, lr}
 8009406:	b082      	sub	sp, #8
 8009408:	af00      	add	r7, sp, #0
 800940a:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800940c:	f7ff fefa 	bl	8009204 <inHandlerMode>
 8009410:	4603      	mov	r3, r0
 8009412:	2b00      	cmp	r3, #0
 8009414:	d001      	beq.n	800941a <osMutexDelete+0x16>
    return osErrorISR;
 8009416:	2382      	movs	r3, #130	; 0x82
 8009418:	e003      	b.n	8009422 <osMutexDelete+0x1e>
  }

  vQueueDelete(mutex_id);
 800941a:	6878      	ldr	r0, [r7, #4]
 800941c:	f001 f8ac 	bl	800a578 <vQueueDelete>

  return osOK;
 8009420:	2300      	movs	r3, #0
}
 8009422:	4618      	mov	r0, r3
 8009424:	3708      	adds	r7, #8
 8009426:	46bd      	mov	sp, r7
 8009428:	bd80      	pop	{r7, pc}

0800942a <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800942a:	b580      	push	{r7, lr}
 800942c:	b082      	sub	sp, #8
 800942e:	af00      	add	r7, sp, #0
 8009430:	6078      	str	r0, [r7, #4]
 8009432:	6039      	str	r1, [r7, #0]
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	6818      	ldr	r0, [r3, #0]
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	685b      	ldr	r3, [r3, #4]
 800943c:	2200      	movs	r2, #0
 800943e:	4619      	mov	r1, r3
 8009440:	f000 fb80 	bl	8009b44 <xQueueGenericCreate>
 8009444:	4603      	mov	r3, r0
#endif
}
 8009446:	4618      	mov	r0, r3
 8009448:	3708      	adds	r7, #8
 800944a:	46bd      	mov	sp, r7
 800944c:	bd80      	pop	{r7, pc}
	...

08009450 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8009450:	b580      	push	{r7, lr}
 8009452:	b086      	sub	sp, #24
 8009454:	af00      	add	r7, sp, #0
 8009456:	60f8      	str	r0, [r7, #12]
 8009458:	60b9      	str	r1, [r7, #8]
 800945a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800945c:	2300      	movs	r3, #0
 800945e:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8009464:	697b      	ldr	r3, [r7, #20]
 8009466:	2b00      	cmp	r3, #0
 8009468:	d101      	bne.n	800946e <osMessagePut+0x1e>
    ticks = 1;
 800946a:	2301      	movs	r3, #1
 800946c:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800946e:	f7ff fec9 	bl	8009204 <inHandlerMode>
 8009472:	4603      	mov	r3, r0
 8009474:	2b00      	cmp	r3, #0
 8009476:	d018      	beq.n	80094aa <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8009478:	f107 0210 	add.w	r2, r7, #16
 800947c:	f107 0108 	add.w	r1, r7, #8
 8009480:	2300      	movs	r3, #0
 8009482:	68f8      	ldr	r0, [r7, #12]
 8009484:	f000 fce4 	bl	8009e50 <xQueueGenericSendFromISR>
 8009488:	4603      	mov	r3, r0
 800948a:	2b01      	cmp	r3, #1
 800948c:	d001      	beq.n	8009492 <osMessagePut+0x42>
      return osErrorOS;
 800948e:	23ff      	movs	r3, #255	; 0xff
 8009490:	e018      	b.n	80094c4 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009492:	693b      	ldr	r3, [r7, #16]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d014      	beq.n	80094c2 <osMessagePut+0x72>
 8009498:	4b0c      	ldr	r3, [pc, #48]	; (80094cc <osMessagePut+0x7c>)
 800949a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800949e:	601a      	str	r2, [r3, #0]
 80094a0:	f3bf 8f4f 	dsb	sy
 80094a4:	f3bf 8f6f 	isb	sy
 80094a8:	e00b      	b.n	80094c2 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80094aa:	f107 0108 	add.w	r1, r7, #8
 80094ae:	2300      	movs	r3, #0
 80094b0:	697a      	ldr	r2, [r7, #20]
 80094b2:	68f8      	ldr	r0, [r7, #12]
 80094b4:	f000 fbce 	bl	8009c54 <xQueueGenericSend>
 80094b8:	4603      	mov	r3, r0
 80094ba:	2b01      	cmp	r3, #1
 80094bc:	d001      	beq.n	80094c2 <osMessagePut+0x72>
      return osErrorOS;
 80094be:	23ff      	movs	r3, #255	; 0xff
 80094c0:	e000      	b.n	80094c4 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 80094c2:	2300      	movs	r3, #0
}
 80094c4:	4618      	mov	r0, r3
 80094c6:	3718      	adds	r7, #24
 80094c8:	46bd      	mov	sp, r7
 80094ca:	bd80      	pop	{r7, pc}
 80094cc:	e000ed04 	.word	0xe000ed04

080094d0 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80094d0:	b590      	push	{r4, r7, lr}
 80094d2:	b08b      	sub	sp, #44	; 0x2c
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	60f8      	str	r0, [r7, #12]
 80094d8:	60b9      	str	r1, [r7, #8]
 80094da:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80094dc:	68bb      	ldr	r3, [r7, #8]
 80094de:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 80094e0:	2300      	movs	r3, #0
 80094e2:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 80094e4:	68bb      	ldr	r3, [r7, #8]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d10a      	bne.n	8009500 <osMessageGet+0x30>
    event.status = osErrorParameter;
 80094ea:	2380      	movs	r3, #128	; 0x80
 80094ec:	617b      	str	r3, [r7, #20]
    return event;
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	461c      	mov	r4, r3
 80094f2:	f107 0314 	add.w	r3, r7, #20
 80094f6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80094fa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80094fe:	e054      	b.n	80095aa <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8009500:	2300      	movs	r3, #0
 8009502:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8009504:	2300      	movs	r3, #0
 8009506:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800950e:	d103      	bne.n	8009518 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8009510:	f04f 33ff 	mov.w	r3, #4294967295
 8009514:	627b      	str	r3, [r7, #36]	; 0x24
 8009516:	e009      	b.n	800952c <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d006      	beq.n	800952c <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8009522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009524:	2b00      	cmp	r3, #0
 8009526:	d101      	bne.n	800952c <osMessageGet+0x5c>
      ticks = 1;
 8009528:	2301      	movs	r3, #1
 800952a:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800952c:	f7ff fe6a 	bl	8009204 <inHandlerMode>
 8009530:	4603      	mov	r3, r0
 8009532:	2b00      	cmp	r3, #0
 8009534:	d01c      	beq.n	8009570 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8009536:	f107 0220 	add.w	r2, r7, #32
 800953a:	f107 0314 	add.w	r3, r7, #20
 800953e:	3304      	adds	r3, #4
 8009540:	4619      	mov	r1, r3
 8009542:	68b8      	ldr	r0, [r7, #8]
 8009544:	f000 ff98 	bl	800a478 <xQueueReceiveFromISR>
 8009548:	4603      	mov	r3, r0
 800954a:	2b01      	cmp	r3, #1
 800954c:	d102      	bne.n	8009554 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800954e:	2310      	movs	r3, #16
 8009550:	617b      	str	r3, [r7, #20]
 8009552:	e001      	b.n	8009558 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8009554:	2300      	movs	r3, #0
 8009556:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009558:	6a3b      	ldr	r3, [r7, #32]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d01d      	beq.n	800959a <osMessageGet+0xca>
 800955e:	4b15      	ldr	r3, [pc, #84]	; (80095b4 <osMessageGet+0xe4>)
 8009560:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009564:	601a      	str	r2, [r3, #0]
 8009566:	f3bf 8f4f 	dsb	sy
 800956a:	f3bf 8f6f 	isb	sy
 800956e:	e014      	b.n	800959a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8009570:	f107 0314 	add.w	r3, r7, #20
 8009574:	3304      	adds	r3, #4
 8009576:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009578:	4619      	mov	r1, r3
 800957a:	68b8      	ldr	r0, [r7, #8]
 800957c:	f000 fd90 	bl	800a0a0 <xQueueReceive>
 8009580:	4603      	mov	r3, r0
 8009582:	2b01      	cmp	r3, #1
 8009584:	d102      	bne.n	800958c <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8009586:	2310      	movs	r3, #16
 8009588:	617b      	str	r3, [r7, #20]
 800958a:	e006      	b.n	800959a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800958c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800958e:	2b00      	cmp	r3, #0
 8009590:	d101      	bne.n	8009596 <osMessageGet+0xc6>
 8009592:	2300      	movs	r3, #0
 8009594:	e000      	b.n	8009598 <osMessageGet+0xc8>
 8009596:	2340      	movs	r3, #64	; 0x40
 8009598:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	461c      	mov	r4, r3
 800959e:	f107 0314 	add.w	r3, r7, #20
 80095a2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80095a6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80095aa:	68f8      	ldr	r0, [r7, #12]
 80095ac:	372c      	adds	r7, #44	; 0x2c
 80095ae:	46bd      	mov	sp, r7
 80095b0:	bd90      	pop	{r4, r7, pc}
 80095b2:	bf00      	nop
 80095b4:	e000ed04 	.word	0xe000ed04

080095b8 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	af00      	add	r7, sp, #0

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80095bc:	f002 f858 	bl	800b670 <xTaskGetSchedulerState>
 80095c0:	4603      	mov	r3, r0
 80095c2:	2b01      	cmp	r3, #1
 80095c4:	d001      	beq.n	80095ca <osSystickHandler+0x12>
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 80095c6:	f002 ff97 	bl	800c4f8 <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 80095ca:	bf00      	nop
 80095cc:	bd80      	pop	{r7, pc}

080095ce <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 80095ce:	b580      	push	{r7, lr}
 80095d0:	b082      	sub	sp, #8
 80095d2:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 80095d4:	2018      	movs	r0, #24
 80095d6:	f003 f81f 	bl	800c618 <pvPortMalloc>
 80095da:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d007      	beq.n	80095f2 <xEventGroupCreate+0x24>
		{
			pxEventBits->uxEventBits = 0;
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	2200      	movs	r2, #0
 80095e6:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	3304      	adds	r3, #4
 80095ec:	4618      	mov	r0, r3
 80095ee:	f000 f98d 	bl	800990c <vListInitialise>
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 80095f2:	687b      	ldr	r3, [r7, #4]
	}
 80095f4:	4618      	mov	r0, r3
 80095f6:	3708      	adds	r7, #8
 80095f8:	46bd      	mov	sp, r7
 80095fa:	bd80      	pop	{r7, pc}

080095fc <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 80095fc:	b580      	push	{r7, lr}
 80095fe:	b090      	sub	sp, #64	; 0x40
 8009600:	af00      	add	r7, sp, #0
 8009602:	60f8      	str	r0, [r7, #12]
 8009604:	60b9      	str	r1, [r7, #8]
 8009606:	607a      	str	r2, [r7, #4]
 8009608:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 800960e:	2300      	movs	r3, #0
 8009610:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8009612:	2300      	movs	r3, #0
 8009614:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	2b00      	cmp	r3, #0
 800961a:	d10a      	bne.n	8009632 <xEventGroupWaitBits+0x36>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800961c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009620:	f383 8811 	msr	BASEPRI, r3
 8009624:	f3bf 8f6f 	isb	sy
 8009628:	f3bf 8f4f 	dsb	sy
 800962c:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800962e:	bf00      	nop
 8009630:	e7fe      	b.n	8009630 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8009632:	68bb      	ldr	r3, [r7, #8]
 8009634:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8009638:	2b00      	cmp	r3, #0
 800963a:	d00a      	beq.n	8009652 <xEventGroupWaitBits+0x56>
	__asm volatile
 800963c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009640:	f383 8811 	msr	BASEPRI, r3
 8009644:	f3bf 8f6f 	isb	sy
 8009648:	f3bf 8f4f 	dsb	sy
 800964c:	61fb      	str	r3, [r7, #28]
}
 800964e:	bf00      	nop
 8009650:	e7fe      	b.n	8009650 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8009652:	68bb      	ldr	r3, [r7, #8]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d10a      	bne.n	800966e <xEventGroupWaitBits+0x72>
	__asm volatile
 8009658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800965c:	f383 8811 	msr	BASEPRI, r3
 8009660:	f3bf 8f6f 	isb	sy
 8009664:	f3bf 8f4f 	dsb	sy
 8009668:	61bb      	str	r3, [r7, #24]
}
 800966a:	bf00      	nop
 800966c:	e7fe      	b.n	800966c <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800966e:	f001 ffff 	bl	800b670 <xTaskGetSchedulerState>
 8009672:	4603      	mov	r3, r0
 8009674:	2b00      	cmp	r3, #0
 8009676:	d102      	bne.n	800967e <xEventGroupWaitBits+0x82>
 8009678:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800967a:	2b00      	cmp	r3, #0
 800967c:	d101      	bne.n	8009682 <xEventGroupWaitBits+0x86>
 800967e:	2301      	movs	r3, #1
 8009680:	e000      	b.n	8009684 <xEventGroupWaitBits+0x88>
 8009682:	2300      	movs	r3, #0
 8009684:	2b00      	cmp	r3, #0
 8009686:	d10a      	bne.n	800969e <xEventGroupWaitBits+0xa2>
	__asm volatile
 8009688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800968c:	f383 8811 	msr	BASEPRI, r3
 8009690:	f3bf 8f6f 	isb	sy
 8009694:	f3bf 8f4f 	dsb	sy
 8009698:	617b      	str	r3, [r7, #20]
}
 800969a:	bf00      	nop
 800969c:	e7fe      	b.n	800969c <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 800969e:	f001 fb7d 	bl	800ad9c <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 80096a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 80096a8:	683a      	ldr	r2, [r7, #0]
 80096aa:	68b9      	ldr	r1, [r7, #8]
 80096ac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80096ae:	f000 f90b 	bl	80098c8 <prvTestWaitCondition>
 80096b2:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 80096b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d00e      	beq.n	80096d8 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 80096ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096bc:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 80096be:	2300      	movs	r3, #0
 80096c0:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d028      	beq.n	800971a <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80096c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096ca:	681a      	ldr	r2, [r3, #0]
 80096cc:	68bb      	ldr	r3, [r7, #8]
 80096ce:	43db      	mvns	r3, r3
 80096d0:	401a      	ands	r2, r3
 80096d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096d4:	601a      	str	r2, [r3, #0]
 80096d6:	e020      	b.n	800971a <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 80096d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d104      	bne.n	80096e8 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 80096de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096e0:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 80096e2:	2301      	movs	r3, #1
 80096e4:	633b      	str	r3, [r7, #48]	; 0x30
 80096e6:	e018      	b.n	800971a <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d003      	beq.n	80096f6 <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 80096ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096f0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80096f4:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 80096f6:	683b      	ldr	r3, [r7, #0]
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d003      	beq.n	8009704 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 80096fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096fe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009702:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8009704:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009706:	1d18      	adds	r0, r3, #4
 8009708:	68ba      	ldr	r2, [r7, #8]
 800970a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800970c:	4313      	orrs	r3, r2
 800970e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009710:	4619      	mov	r1, r3
 8009712:	f001 fd47 	bl	800b1a4 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8009716:	2300      	movs	r3, #0
 8009718:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 800971a:	f001 fb4d 	bl	800adb8 <xTaskResumeAll>
 800971e:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8009720:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009722:	2b00      	cmp	r3, #0
 8009724:	d031      	beq.n	800978a <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 8009726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009728:	2b00      	cmp	r3, #0
 800972a:	d107      	bne.n	800973c <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 800972c:	4b19      	ldr	r3, [pc, #100]	; (8009794 <xEventGroupWaitBits+0x198>)
 800972e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009732:	601a      	str	r2, [r3, #0]
 8009734:	f3bf 8f4f 	dsb	sy
 8009738:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 800973c:	f002 f940 	bl	800b9c0 <uxTaskResetEventItemValue>
 8009740:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8009742:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009744:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009748:	2b00      	cmp	r3, #0
 800974a:	d11a      	bne.n	8009782 <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 800974c:	f002 fe42 	bl	800c3d4 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8009750:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8009756:	683a      	ldr	r2, [r7, #0]
 8009758:	68b9      	ldr	r1, [r7, #8]
 800975a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800975c:	f000 f8b4 	bl	80098c8 <prvTestWaitCondition>
 8009760:	4603      	mov	r3, r0
 8009762:	2b00      	cmp	r3, #0
 8009764:	d009      	beq.n	800977a <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	2b00      	cmp	r3, #0
 800976a:	d006      	beq.n	800977a <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800976c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800976e:	681a      	ldr	r2, [r3, #0]
 8009770:	68bb      	ldr	r3, [r7, #8]
 8009772:	43db      	mvns	r3, r3
 8009774:	401a      	ands	r2, r3
 8009776:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009778:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 800977a:	2301      	movs	r3, #1
 800977c:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 800977e:	f002 fe59 	bl	800c434 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8009782:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009784:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009788:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 800978a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800978c:	4618      	mov	r0, r3
 800978e:	3740      	adds	r7, #64	; 0x40
 8009790:	46bd      	mov	sp, r7
 8009792:	bd80      	pop	{r7, pc}
 8009794:	e000ed04 	.word	0xe000ed04

08009798 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8009798:	b580      	push	{r7, lr}
 800979a:	b08e      	sub	sp, #56	; 0x38
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
 80097a0:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 80097a2:	2300      	movs	r3, #0
 80097a4:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 80097aa:	2300      	movs	r3, #0
 80097ac:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d10a      	bne.n	80097ca <xEventGroupSetBits+0x32>
	__asm volatile
 80097b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097b8:	f383 8811 	msr	BASEPRI, r3
 80097bc:	f3bf 8f6f 	isb	sy
 80097c0:	f3bf 8f4f 	dsb	sy
 80097c4:	613b      	str	r3, [r7, #16]
}
 80097c6:	bf00      	nop
 80097c8:	e7fe      	b.n	80097c8 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80097ca:	683b      	ldr	r3, [r7, #0]
 80097cc:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d00a      	beq.n	80097ea <xEventGroupSetBits+0x52>
	__asm volatile
 80097d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097d8:	f383 8811 	msr	BASEPRI, r3
 80097dc:	f3bf 8f6f 	isb	sy
 80097e0:	f3bf 8f4f 	dsb	sy
 80097e4:	60fb      	str	r3, [r7, #12]
}
 80097e6:	bf00      	nop
 80097e8:	e7fe      	b.n	80097e8 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 80097ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097ec:	3304      	adds	r3, #4
 80097ee:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80097f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097f2:	3308      	adds	r3, #8
 80097f4:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 80097f6:	f001 fad1 	bl	800ad9c <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 80097fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097fc:	68db      	ldr	r3, [r3, #12]
 80097fe:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8009800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009802:	681a      	ldr	r2, [r3, #0]
 8009804:	683b      	ldr	r3, [r7, #0]
 8009806:	431a      	orrs	r2, r3
 8009808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800980a:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 800980c:	e03c      	b.n	8009888 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 800980e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009810:	685b      	ldr	r3, [r3, #4]
 8009812:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8009814:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 800981a:	2300      	movs	r3, #0
 800981c:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800981e:	69bb      	ldr	r3, [r7, #24]
 8009820:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8009824:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8009826:	69bb      	ldr	r3, [r7, #24]
 8009828:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800982c:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800982e:	697b      	ldr	r3, [r7, #20]
 8009830:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009834:	2b00      	cmp	r3, #0
 8009836:	d108      	bne.n	800984a <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8009838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800983a:	681a      	ldr	r2, [r3, #0]
 800983c:	69bb      	ldr	r3, [r7, #24]
 800983e:	4013      	ands	r3, r2
 8009840:	2b00      	cmp	r3, #0
 8009842:	d00b      	beq.n	800985c <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8009844:	2301      	movs	r3, #1
 8009846:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009848:	e008      	b.n	800985c <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800984a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800984c:	681a      	ldr	r2, [r3, #0]
 800984e:	69bb      	ldr	r3, [r7, #24]
 8009850:	4013      	ands	r3, r2
 8009852:	69ba      	ldr	r2, [r7, #24]
 8009854:	429a      	cmp	r2, r3
 8009856:	d101      	bne.n	800985c <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8009858:	2301      	movs	r3, #1
 800985a:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 800985c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800985e:	2b00      	cmp	r3, #0
 8009860:	d010      	beq.n	8009884 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8009862:	697b      	ldr	r3, [r7, #20]
 8009864:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009868:	2b00      	cmp	r3, #0
 800986a:	d003      	beq.n	8009874 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 800986c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800986e:	69bb      	ldr	r3, [r7, #24]
 8009870:	4313      	orrs	r3, r2
 8009872:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8009874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800987c:	4619      	mov	r1, r3
 800987e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8009880:	f001 fd5a 	bl	800b338 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8009884:	69fb      	ldr	r3, [r7, #28]
 8009886:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8009888:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800988a:	6a3b      	ldr	r3, [r7, #32]
 800988c:	429a      	cmp	r2, r3
 800988e:	d1be      	bne.n	800980e <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8009890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009892:	681a      	ldr	r2, [r3, #0]
 8009894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009896:	43db      	mvns	r3, r3
 8009898:	401a      	ands	r2, r3
 800989a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800989c:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800989e:	f001 fa8b 	bl	800adb8 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 80098a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098a4:	681b      	ldr	r3, [r3, #0]
}
 80098a6:	4618      	mov	r0, r3
 80098a8:	3738      	adds	r7, #56	; 0x38
 80098aa:	46bd      	mov	sp, r7
 80098ac:	bd80      	pop	{r7, pc}

080098ae <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 80098ae:	b580      	push	{r7, lr}
 80098b0:	b082      	sub	sp, #8
 80098b2:	af00      	add	r7, sp, #0
 80098b4:	6078      	str	r0, [r7, #4]
 80098b6:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 80098b8:	6839      	ldr	r1, [r7, #0]
 80098ba:	6878      	ldr	r0, [r7, #4]
 80098bc:	f7ff ff6c 	bl	8009798 <xEventGroupSetBits>
}
 80098c0:	bf00      	nop
 80098c2:	3708      	adds	r7, #8
 80098c4:	46bd      	mov	sp, r7
 80098c6:	bd80      	pop	{r7, pc}

080098c8 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 80098c8:	b480      	push	{r7}
 80098ca:	b087      	sub	sp, #28
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	60f8      	str	r0, [r7, #12]
 80098d0:	60b9      	str	r1, [r7, #8]
 80098d2:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 80098d4:	2300      	movs	r3, #0
 80098d6:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d107      	bne.n	80098ee <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 80098de:	68fa      	ldr	r2, [r7, #12]
 80098e0:	68bb      	ldr	r3, [r7, #8]
 80098e2:	4013      	ands	r3, r2
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d00a      	beq.n	80098fe <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80098e8:	2301      	movs	r3, #1
 80098ea:	617b      	str	r3, [r7, #20]
 80098ec:	e007      	b.n	80098fe <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 80098ee:	68fa      	ldr	r2, [r7, #12]
 80098f0:	68bb      	ldr	r3, [r7, #8]
 80098f2:	4013      	ands	r3, r2
 80098f4:	68ba      	ldr	r2, [r7, #8]
 80098f6:	429a      	cmp	r2, r3
 80098f8:	d101      	bne.n	80098fe <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80098fa:	2301      	movs	r3, #1
 80098fc:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 80098fe:	697b      	ldr	r3, [r7, #20]
}
 8009900:	4618      	mov	r0, r3
 8009902:	371c      	adds	r7, #28
 8009904:	46bd      	mov	sp, r7
 8009906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990a:	4770      	bx	lr

0800990c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800990c:	b480      	push	{r7}
 800990e:	b083      	sub	sp, #12
 8009910:	af00      	add	r7, sp, #0
 8009912:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	f103 0208 	add.w	r2, r3, #8
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	f04f 32ff 	mov.w	r2, #4294967295
 8009924:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	f103 0208 	add.w	r2, r3, #8
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	f103 0208 	add.w	r2, r3, #8
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	2200      	movs	r2, #0
 800993e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009940:	bf00      	nop
 8009942:	370c      	adds	r7, #12
 8009944:	46bd      	mov	sp, r7
 8009946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800994a:	4770      	bx	lr

0800994c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800994c:	b480      	push	{r7}
 800994e:	b083      	sub	sp, #12
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	2200      	movs	r2, #0
 8009958:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800995a:	bf00      	nop
 800995c:	370c      	adds	r7, #12
 800995e:	46bd      	mov	sp, r7
 8009960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009964:	4770      	bx	lr

08009966 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009966:	b480      	push	{r7}
 8009968:	b085      	sub	sp, #20
 800996a:	af00      	add	r7, sp, #0
 800996c:	6078      	str	r0, [r7, #4]
 800996e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	685b      	ldr	r3, [r3, #4]
 8009974:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009976:	683b      	ldr	r3, [r7, #0]
 8009978:	68fa      	ldr	r2, [r7, #12]
 800997a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	689a      	ldr	r2, [r3, #8]
 8009980:	683b      	ldr	r3, [r7, #0]
 8009982:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	689b      	ldr	r3, [r3, #8]
 8009988:	683a      	ldr	r2, [r7, #0]
 800998a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	683a      	ldr	r2, [r7, #0]
 8009990:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009992:	683b      	ldr	r3, [r7, #0]
 8009994:	687a      	ldr	r2, [r7, #4]
 8009996:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	1c5a      	adds	r2, r3, #1
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	601a      	str	r2, [r3, #0]
}
 80099a2:	bf00      	nop
 80099a4:	3714      	adds	r7, #20
 80099a6:	46bd      	mov	sp, r7
 80099a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ac:	4770      	bx	lr

080099ae <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80099ae:	b480      	push	{r7}
 80099b0:	b085      	sub	sp, #20
 80099b2:	af00      	add	r7, sp, #0
 80099b4:	6078      	str	r0, [r7, #4]
 80099b6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80099b8:	683b      	ldr	r3, [r7, #0]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80099be:	68bb      	ldr	r3, [r7, #8]
 80099c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099c4:	d103      	bne.n	80099ce <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	691b      	ldr	r3, [r3, #16]
 80099ca:	60fb      	str	r3, [r7, #12]
 80099cc:	e00c      	b.n	80099e8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	3308      	adds	r3, #8
 80099d2:	60fb      	str	r3, [r7, #12]
 80099d4:	e002      	b.n	80099dc <vListInsert+0x2e>
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	685b      	ldr	r3, [r3, #4]
 80099da:	60fb      	str	r3, [r7, #12]
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	685b      	ldr	r3, [r3, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	68ba      	ldr	r2, [r7, #8]
 80099e4:	429a      	cmp	r2, r3
 80099e6:	d2f6      	bcs.n	80099d6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	685a      	ldr	r2, [r3, #4]
 80099ec:	683b      	ldr	r3, [r7, #0]
 80099ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80099f0:	683b      	ldr	r3, [r7, #0]
 80099f2:	685b      	ldr	r3, [r3, #4]
 80099f4:	683a      	ldr	r2, [r7, #0]
 80099f6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80099f8:	683b      	ldr	r3, [r7, #0]
 80099fa:	68fa      	ldr	r2, [r7, #12]
 80099fc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	683a      	ldr	r2, [r7, #0]
 8009a02:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009a04:	683b      	ldr	r3, [r7, #0]
 8009a06:	687a      	ldr	r2, [r7, #4]
 8009a08:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	1c5a      	adds	r2, r3, #1
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	601a      	str	r2, [r3, #0]
}
 8009a14:	bf00      	nop
 8009a16:	3714      	adds	r7, #20
 8009a18:	46bd      	mov	sp, r7
 8009a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a1e:	4770      	bx	lr

08009a20 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009a20:	b480      	push	{r7}
 8009a22:	b085      	sub	sp, #20
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	691b      	ldr	r3, [r3, #16]
 8009a2c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	685b      	ldr	r3, [r3, #4]
 8009a32:	687a      	ldr	r2, [r7, #4]
 8009a34:	6892      	ldr	r2, [r2, #8]
 8009a36:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	689b      	ldr	r3, [r3, #8]
 8009a3c:	687a      	ldr	r2, [r7, #4]
 8009a3e:	6852      	ldr	r2, [r2, #4]
 8009a40:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	685b      	ldr	r3, [r3, #4]
 8009a46:	687a      	ldr	r2, [r7, #4]
 8009a48:	429a      	cmp	r2, r3
 8009a4a:	d103      	bne.n	8009a54 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	689a      	ldr	r2, [r3, #8]
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	2200      	movs	r2, #0
 8009a58:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	1e5a      	subs	r2, r3, #1
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	681b      	ldr	r3, [r3, #0]
}
 8009a68:	4618      	mov	r0, r3
 8009a6a:	3714      	adds	r7, #20
 8009a6c:	46bd      	mov	sp, r7
 8009a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a72:	4770      	bx	lr

08009a74 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009a74:	b580      	push	{r7, lr}
 8009a76:	b084      	sub	sp, #16
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	6078      	str	r0, [r7, #4]
 8009a7c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d10a      	bne.n	8009a9e <xQueueGenericReset+0x2a>
	__asm volatile
 8009a88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a8c:	f383 8811 	msr	BASEPRI, r3
 8009a90:	f3bf 8f6f 	isb	sy
 8009a94:	f3bf 8f4f 	dsb	sy
 8009a98:	60bb      	str	r3, [r7, #8]
}
 8009a9a:	bf00      	nop
 8009a9c:	e7fe      	b.n	8009a9c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009a9e:	f002 fc99 	bl	800c3d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	681a      	ldr	r2, [r3, #0]
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009aaa:	68f9      	ldr	r1, [r7, #12]
 8009aac:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009aae:	fb01 f303 	mul.w	r3, r1, r3
 8009ab2:	441a      	add	r2, r3
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	2200      	movs	r2, #0
 8009abc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	681a      	ldr	r2, [r3, #0]
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	681a      	ldr	r2, [r3, #0]
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ace:	3b01      	subs	r3, #1
 8009ad0:	68f9      	ldr	r1, [r7, #12]
 8009ad2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009ad4:	fb01 f303 	mul.w	r3, r1, r3
 8009ad8:	441a      	add	r2, r3
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	22ff      	movs	r2, #255	; 0xff
 8009ae2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	22ff      	movs	r2, #255	; 0xff
 8009aea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009aee:	683b      	ldr	r3, [r7, #0]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d114      	bne.n	8009b1e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	691b      	ldr	r3, [r3, #16]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d01a      	beq.n	8009b32 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	3310      	adds	r3, #16
 8009b00:	4618      	mov	r0, r3
 8009b02:	f001 fbb7 	bl	800b274 <xTaskRemoveFromEventList>
 8009b06:	4603      	mov	r3, r0
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d012      	beq.n	8009b32 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009b0c:	4b0c      	ldr	r3, [pc, #48]	; (8009b40 <xQueueGenericReset+0xcc>)
 8009b0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b12:	601a      	str	r2, [r3, #0]
 8009b14:	f3bf 8f4f 	dsb	sy
 8009b18:	f3bf 8f6f 	isb	sy
 8009b1c:	e009      	b.n	8009b32 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	3310      	adds	r3, #16
 8009b22:	4618      	mov	r0, r3
 8009b24:	f7ff fef2 	bl	800990c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	3324      	adds	r3, #36	; 0x24
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	f7ff feed 	bl	800990c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009b32:	f002 fc7f 	bl	800c434 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009b36:	2301      	movs	r3, #1
}
 8009b38:	4618      	mov	r0, r3
 8009b3a:	3710      	adds	r7, #16
 8009b3c:	46bd      	mov	sp, r7
 8009b3e:	bd80      	pop	{r7, pc}
 8009b40:	e000ed04 	.word	0xe000ed04

08009b44 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009b44:	b580      	push	{r7, lr}
 8009b46:	b08a      	sub	sp, #40	; 0x28
 8009b48:	af02      	add	r7, sp, #8
 8009b4a:	60f8      	str	r0, [r7, #12]
 8009b4c:	60b9      	str	r1, [r7, #8]
 8009b4e:	4613      	mov	r3, r2
 8009b50:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d10a      	bne.n	8009b6e <xQueueGenericCreate+0x2a>
	__asm volatile
 8009b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b5c:	f383 8811 	msr	BASEPRI, r3
 8009b60:	f3bf 8f6f 	isb	sy
 8009b64:	f3bf 8f4f 	dsb	sy
 8009b68:	613b      	str	r3, [r7, #16]
}
 8009b6a:	bf00      	nop
 8009b6c:	e7fe      	b.n	8009b6c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	68ba      	ldr	r2, [r7, #8]
 8009b72:	fb02 f303 	mul.w	r3, r2, r3
 8009b76:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009b78:	69fb      	ldr	r3, [r7, #28]
 8009b7a:	3348      	adds	r3, #72	; 0x48
 8009b7c:	4618      	mov	r0, r3
 8009b7e:	f002 fd4b 	bl	800c618 <pvPortMalloc>
 8009b82:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009b84:	69bb      	ldr	r3, [r7, #24]
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d00d      	beq.n	8009ba6 <xQueueGenericCreate+0x62>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009b8a:	69bb      	ldr	r3, [r7, #24]
 8009b8c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009b8e:	697b      	ldr	r3, [r7, #20]
 8009b90:	3348      	adds	r3, #72	; 0x48
 8009b92:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009b94:	79fa      	ldrb	r2, [r7, #7]
 8009b96:	69bb      	ldr	r3, [r7, #24]
 8009b98:	9300      	str	r3, [sp, #0]
 8009b9a:	4613      	mov	r3, r2
 8009b9c:	697a      	ldr	r2, [r7, #20]
 8009b9e:	68b9      	ldr	r1, [r7, #8]
 8009ba0:	68f8      	ldr	r0, [r7, #12]
 8009ba2:	f000 f805 	bl	8009bb0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009ba6:	69bb      	ldr	r3, [r7, #24]
	}
 8009ba8:	4618      	mov	r0, r3
 8009baa:	3720      	adds	r7, #32
 8009bac:	46bd      	mov	sp, r7
 8009bae:	bd80      	pop	{r7, pc}

08009bb0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	b084      	sub	sp, #16
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	60f8      	str	r0, [r7, #12]
 8009bb8:	60b9      	str	r1, [r7, #8]
 8009bba:	607a      	str	r2, [r7, #4]
 8009bbc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009bbe:	68bb      	ldr	r3, [r7, #8]
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d103      	bne.n	8009bcc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009bc4:	69bb      	ldr	r3, [r7, #24]
 8009bc6:	69ba      	ldr	r2, [r7, #24]
 8009bc8:	601a      	str	r2, [r3, #0]
 8009bca:	e002      	b.n	8009bd2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009bcc:	69bb      	ldr	r3, [r7, #24]
 8009bce:	687a      	ldr	r2, [r7, #4]
 8009bd0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009bd2:	69bb      	ldr	r3, [r7, #24]
 8009bd4:	68fa      	ldr	r2, [r7, #12]
 8009bd6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009bd8:	69bb      	ldr	r3, [r7, #24]
 8009bda:	68ba      	ldr	r2, [r7, #8]
 8009bdc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009bde:	2101      	movs	r1, #1
 8009be0:	69b8      	ldr	r0, [r7, #24]
 8009be2:	f7ff ff47 	bl	8009a74 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009be6:	bf00      	nop
 8009be8:	3710      	adds	r7, #16
 8009bea:	46bd      	mov	sp, r7
 8009bec:	bd80      	pop	{r7, pc}

08009bee <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8009bee:	b580      	push	{r7, lr}
 8009bf0:	b082      	sub	sp, #8
 8009bf2:	af00      	add	r7, sp, #0
 8009bf4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d00e      	beq.n	8009c1a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	2200      	movs	r2, #0
 8009c00:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	2200      	movs	r2, #0
 8009c06:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8009c0e:	2300      	movs	r3, #0
 8009c10:	2200      	movs	r2, #0
 8009c12:	2100      	movs	r1, #0
 8009c14:	6878      	ldr	r0, [r7, #4]
 8009c16:	f000 f81d 	bl	8009c54 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8009c1a:	bf00      	nop
 8009c1c:	3708      	adds	r7, #8
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	bd80      	pop	{r7, pc}

08009c22 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8009c22:	b580      	push	{r7, lr}
 8009c24:	b086      	sub	sp, #24
 8009c26:	af00      	add	r7, sp, #0
 8009c28:	4603      	mov	r3, r0
 8009c2a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8009c2c:	2301      	movs	r3, #1
 8009c2e:	617b      	str	r3, [r7, #20]
 8009c30:	2300      	movs	r3, #0
 8009c32:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8009c34:	79fb      	ldrb	r3, [r7, #7]
 8009c36:	461a      	mov	r2, r3
 8009c38:	6939      	ldr	r1, [r7, #16]
 8009c3a:	6978      	ldr	r0, [r7, #20]
 8009c3c:	f7ff ff82 	bl	8009b44 <xQueueGenericCreate>
 8009c40:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8009c42:	68f8      	ldr	r0, [r7, #12]
 8009c44:	f7ff ffd3 	bl	8009bee <prvInitialiseMutex>

		return xNewQueue;
 8009c48:	68fb      	ldr	r3, [r7, #12]
	}
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	3718      	adds	r7, #24
 8009c4e:	46bd      	mov	sp, r7
 8009c50:	bd80      	pop	{r7, pc}
	...

08009c54 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009c54:	b580      	push	{r7, lr}
 8009c56:	b08e      	sub	sp, #56	; 0x38
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	60f8      	str	r0, [r7, #12]
 8009c5c:	60b9      	str	r1, [r7, #8]
 8009c5e:	607a      	str	r2, [r7, #4]
 8009c60:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009c62:	2300      	movs	r3, #0
 8009c64:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d10a      	bne.n	8009c86 <xQueueGenericSend+0x32>
	__asm volatile
 8009c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c74:	f383 8811 	msr	BASEPRI, r3
 8009c78:	f3bf 8f6f 	isb	sy
 8009c7c:	f3bf 8f4f 	dsb	sy
 8009c80:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009c82:	bf00      	nop
 8009c84:	e7fe      	b.n	8009c84 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009c86:	68bb      	ldr	r3, [r7, #8]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d103      	bne.n	8009c94 <xQueueGenericSend+0x40>
 8009c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d101      	bne.n	8009c98 <xQueueGenericSend+0x44>
 8009c94:	2301      	movs	r3, #1
 8009c96:	e000      	b.n	8009c9a <xQueueGenericSend+0x46>
 8009c98:	2300      	movs	r3, #0
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d10a      	bne.n	8009cb4 <xQueueGenericSend+0x60>
	__asm volatile
 8009c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ca2:	f383 8811 	msr	BASEPRI, r3
 8009ca6:	f3bf 8f6f 	isb	sy
 8009caa:	f3bf 8f4f 	dsb	sy
 8009cae:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009cb0:	bf00      	nop
 8009cb2:	e7fe      	b.n	8009cb2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009cb4:	683b      	ldr	r3, [r7, #0]
 8009cb6:	2b02      	cmp	r3, #2
 8009cb8:	d103      	bne.n	8009cc2 <xQueueGenericSend+0x6e>
 8009cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009cbe:	2b01      	cmp	r3, #1
 8009cc0:	d101      	bne.n	8009cc6 <xQueueGenericSend+0x72>
 8009cc2:	2301      	movs	r3, #1
 8009cc4:	e000      	b.n	8009cc8 <xQueueGenericSend+0x74>
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d10a      	bne.n	8009ce2 <xQueueGenericSend+0x8e>
	__asm volatile
 8009ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cd0:	f383 8811 	msr	BASEPRI, r3
 8009cd4:	f3bf 8f6f 	isb	sy
 8009cd8:	f3bf 8f4f 	dsb	sy
 8009cdc:	623b      	str	r3, [r7, #32]
}
 8009cde:	bf00      	nop
 8009ce0:	e7fe      	b.n	8009ce0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009ce2:	f001 fcc5 	bl	800b670 <xTaskGetSchedulerState>
 8009ce6:	4603      	mov	r3, r0
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d102      	bne.n	8009cf2 <xQueueGenericSend+0x9e>
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d101      	bne.n	8009cf6 <xQueueGenericSend+0xa2>
 8009cf2:	2301      	movs	r3, #1
 8009cf4:	e000      	b.n	8009cf8 <xQueueGenericSend+0xa4>
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d10a      	bne.n	8009d12 <xQueueGenericSend+0xbe>
	__asm volatile
 8009cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d00:	f383 8811 	msr	BASEPRI, r3
 8009d04:	f3bf 8f6f 	isb	sy
 8009d08:	f3bf 8f4f 	dsb	sy
 8009d0c:	61fb      	str	r3, [r7, #28]
}
 8009d0e:	bf00      	nop
 8009d10:	e7fe      	b.n	8009d10 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009d12:	f002 fb5f 	bl	800c3d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d1e:	429a      	cmp	r2, r3
 8009d20:	d302      	bcc.n	8009d28 <xQueueGenericSend+0xd4>
 8009d22:	683b      	ldr	r3, [r7, #0]
 8009d24:	2b02      	cmp	r3, #2
 8009d26:	d129      	bne.n	8009d7c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009d28:	683a      	ldr	r2, [r7, #0]
 8009d2a:	68b9      	ldr	r1, [r7, #8]
 8009d2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009d2e:	f000 fc59 	bl	800a5e4 <prvCopyDataToQueue>
 8009d32:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d010      	beq.n	8009d5e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d3e:	3324      	adds	r3, #36	; 0x24
 8009d40:	4618      	mov	r0, r3
 8009d42:	f001 fa97 	bl	800b274 <xTaskRemoveFromEventList>
 8009d46:	4603      	mov	r3, r0
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d013      	beq.n	8009d74 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009d4c:	4b3f      	ldr	r3, [pc, #252]	; (8009e4c <xQueueGenericSend+0x1f8>)
 8009d4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d52:	601a      	str	r2, [r3, #0]
 8009d54:	f3bf 8f4f 	dsb	sy
 8009d58:	f3bf 8f6f 	isb	sy
 8009d5c:	e00a      	b.n	8009d74 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d007      	beq.n	8009d74 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009d64:	4b39      	ldr	r3, [pc, #228]	; (8009e4c <xQueueGenericSend+0x1f8>)
 8009d66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d6a:	601a      	str	r2, [r3, #0]
 8009d6c:	f3bf 8f4f 	dsb	sy
 8009d70:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009d74:	f002 fb5e 	bl	800c434 <vPortExitCritical>
				return pdPASS;
 8009d78:	2301      	movs	r3, #1
 8009d7a:	e063      	b.n	8009e44 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d103      	bne.n	8009d8a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009d82:	f002 fb57 	bl	800c434 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009d86:	2300      	movs	r3, #0
 8009d88:	e05c      	b.n	8009e44 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009d8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d106      	bne.n	8009d9e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009d90:	f107 0314 	add.w	r3, r7, #20
 8009d94:	4618      	mov	r0, r3
 8009d96:	f001 fb31 	bl	800b3fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009d9a:	2301      	movs	r3, #1
 8009d9c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009d9e:	f002 fb49 	bl	800c434 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009da2:	f000 fffb 	bl	800ad9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009da6:	f002 fb15 	bl	800c3d4 <vPortEnterCritical>
 8009daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009db0:	b25b      	sxtb	r3, r3
 8009db2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009db6:	d103      	bne.n	8009dc0 <xQueueGenericSend+0x16c>
 8009db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dba:	2200      	movs	r2, #0
 8009dbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dc2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009dc6:	b25b      	sxtb	r3, r3
 8009dc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dcc:	d103      	bne.n	8009dd6 <xQueueGenericSend+0x182>
 8009dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dd0:	2200      	movs	r2, #0
 8009dd2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009dd6:	f002 fb2d 	bl	800c434 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009dda:	1d3a      	adds	r2, r7, #4
 8009ddc:	f107 0314 	add.w	r3, r7, #20
 8009de0:	4611      	mov	r1, r2
 8009de2:	4618      	mov	r0, r3
 8009de4:	f001 fb20 	bl	800b428 <xTaskCheckForTimeOut>
 8009de8:	4603      	mov	r3, r0
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d124      	bne.n	8009e38 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009dee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009df0:	f000 fcf0 	bl	800a7d4 <prvIsQueueFull>
 8009df4:	4603      	mov	r3, r0
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d018      	beq.n	8009e2c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dfc:	3310      	adds	r3, #16
 8009dfe:	687a      	ldr	r2, [r7, #4]
 8009e00:	4611      	mov	r1, r2
 8009e02:	4618      	mov	r0, r3
 8009e04:	f001 f9aa 	bl	800b15c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009e08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009e0a:	f000 fc7b 	bl	800a704 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009e0e:	f000 ffd3 	bl	800adb8 <xTaskResumeAll>
 8009e12:	4603      	mov	r3, r0
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	f47f af7c 	bne.w	8009d12 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8009e1a:	4b0c      	ldr	r3, [pc, #48]	; (8009e4c <xQueueGenericSend+0x1f8>)
 8009e1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e20:	601a      	str	r2, [r3, #0]
 8009e22:	f3bf 8f4f 	dsb	sy
 8009e26:	f3bf 8f6f 	isb	sy
 8009e2a:	e772      	b.n	8009d12 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009e2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009e2e:	f000 fc69 	bl	800a704 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009e32:	f000 ffc1 	bl	800adb8 <xTaskResumeAll>
 8009e36:	e76c      	b.n	8009d12 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009e38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009e3a:	f000 fc63 	bl	800a704 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009e3e:	f000 ffbb 	bl	800adb8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009e42:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009e44:	4618      	mov	r0, r3
 8009e46:	3738      	adds	r7, #56	; 0x38
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	bd80      	pop	{r7, pc}
 8009e4c:	e000ed04 	.word	0xe000ed04

08009e50 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009e50:	b580      	push	{r7, lr}
 8009e52:	b090      	sub	sp, #64	; 0x40
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	60f8      	str	r0, [r7, #12]
 8009e58:	60b9      	str	r1, [r7, #8]
 8009e5a:	607a      	str	r2, [r7, #4]
 8009e5c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8009e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d10a      	bne.n	8009e7e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8009e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e6c:	f383 8811 	msr	BASEPRI, r3
 8009e70:	f3bf 8f6f 	isb	sy
 8009e74:	f3bf 8f4f 	dsb	sy
 8009e78:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009e7a:	bf00      	nop
 8009e7c:	e7fe      	b.n	8009e7c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009e7e:	68bb      	ldr	r3, [r7, #8]
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d103      	bne.n	8009e8c <xQueueGenericSendFromISR+0x3c>
 8009e84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d101      	bne.n	8009e90 <xQueueGenericSendFromISR+0x40>
 8009e8c:	2301      	movs	r3, #1
 8009e8e:	e000      	b.n	8009e92 <xQueueGenericSendFromISR+0x42>
 8009e90:	2300      	movs	r3, #0
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d10a      	bne.n	8009eac <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8009e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e9a:	f383 8811 	msr	BASEPRI, r3
 8009e9e:	f3bf 8f6f 	isb	sy
 8009ea2:	f3bf 8f4f 	dsb	sy
 8009ea6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009ea8:	bf00      	nop
 8009eaa:	e7fe      	b.n	8009eaa <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009eac:	683b      	ldr	r3, [r7, #0]
 8009eae:	2b02      	cmp	r3, #2
 8009eb0:	d103      	bne.n	8009eba <xQueueGenericSendFromISR+0x6a>
 8009eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009eb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009eb6:	2b01      	cmp	r3, #1
 8009eb8:	d101      	bne.n	8009ebe <xQueueGenericSendFromISR+0x6e>
 8009eba:	2301      	movs	r3, #1
 8009ebc:	e000      	b.n	8009ec0 <xQueueGenericSendFromISR+0x70>
 8009ebe:	2300      	movs	r3, #0
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d10a      	bne.n	8009eda <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8009ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ec8:	f383 8811 	msr	BASEPRI, r3
 8009ecc:	f3bf 8f6f 	isb	sy
 8009ed0:	f3bf 8f4f 	dsb	sy
 8009ed4:	623b      	str	r3, [r7, #32]
}
 8009ed6:	bf00      	nop
 8009ed8:	e7fe      	b.n	8009ed8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009eda:	f002 fb5d 	bl	800c598 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009ede:	f3ef 8211 	mrs	r2, BASEPRI
 8009ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ee6:	f383 8811 	msr	BASEPRI, r3
 8009eea:	f3bf 8f6f 	isb	sy
 8009eee:	f3bf 8f4f 	dsb	sy
 8009ef2:	61fa      	str	r2, [r7, #28]
 8009ef4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009ef6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009ef8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009efc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f02:	429a      	cmp	r2, r3
 8009f04:	d302      	bcc.n	8009f0c <xQueueGenericSendFromISR+0xbc>
 8009f06:	683b      	ldr	r3, [r7, #0]
 8009f08:	2b02      	cmp	r3, #2
 8009f0a:	d12f      	bne.n	8009f6c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009f0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f0e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009f12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009f1c:	683a      	ldr	r2, [r7, #0]
 8009f1e:	68b9      	ldr	r1, [r7, #8]
 8009f20:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009f22:	f000 fb5f 	bl	800a5e4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009f26:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8009f2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f2e:	d112      	bne.n	8009f56 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d016      	beq.n	8009f66 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f3a:	3324      	adds	r3, #36	; 0x24
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	f001 f999 	bl	800b274 <xTaskRemoveFromEventList>
 8009f42:	4603      	mov	r3, r0
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d00e      	beq.n	8009f66 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d00b      	beq.n	8009f66 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	2201      	movs	r2, #1
 8009f52:	601a      	str	r2, [r3, #0]
 8009f54:	e007      	b.n	8009f66 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009f56:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009f5a:	3301      	adds	r3, #1
 8009f5c:	b2db      	uxtb	r3, r3
 8009f5e:	b25a      	sxtb	r2, r3
 8009f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009f66:	2301      	movs	r3, #1
 8009f68:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8009f6a:	e001      	b.n	8009f70 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009f6c:	2300      	movs	r3, #0
 8009f6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009f70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f72:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009f74:	697b      	ldr	r3, [r7, #20]
 8009f76:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009f7a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009f7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009f7e:	4618      	mov	r0, r3
 8009f80:	3740      	adds	r7, #64	; 0x40
 8009f82:	46bd      	mov	sp, r7
 8009f84:	bd80      	pop	{r7, pc}

08009f86 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009f86:	b580      	push	{r7, lr}
 8009f88:	b08e      	sub	sp, #56	; 0x38
 8009f8a:	af00      	add	r7, sp, #0
 8009f8c:	6078      	str	r0, [r7, #4]
 8009f8e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8009f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d10a      	bne.n	8009fb0 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8009f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f9e:	f383 8811 	msr	BASEPRI, r3
 8009fa2:	f3bf 8f6f 	isb	sy
 8009fa6:	f3bf 8f4f 	dsb	sy
 8009faa:	623b      	str	r3, [r7, #32]
}
 8009fac:	bf00      	nop
 8009fae:	e7fe      	b.n	8009fae <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d00a      	beq.n	8009fce <xQueueGiveFromISR+0x48>
	__asm volatile
 8009fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fbc:	f383 8811 	msr	BASEPRI, r3
 8009fc0:	f3bf 8f6f 	isb	sy
 8009fc4:	f3bf 8f4f 	dsb	sy
 8009fc8:	61fb      	str	r3, [r7, #28]
}
 8009fca:	bf00      	nop
 8009fcc:	e7fe      	b.n	8009fcc <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8009fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d103      	bne.n	8009fde <xQueueGiveFromISR+0x58>
 8009fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fd8:	689b      	ldr	r3, [r3, #8]
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d101      	bne.n	8009fe2 <xQueueGiveFromISR+0x5c>
 8009fde:	2301      	movs	r3, #1
 8009fe0:	e000      	b.n	8009fe4 <xQueueGiveFromISR+0x5e>
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d10a      	bne.n	8009ffe <xQueueGiveFromISR+0x78>
	__asm volatile
 8009fe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fec:	f383 8811 	msr	BASEPRI, r3
 8009ff0:	f3bf 8f6f 	isb	sy
 8009ff4:	f3bf 8f4f 	dsb	sy
 8009ff8:	61bb      	str	r3, [r7, #24]
}
 8009ffa:	bf00      	nop
 8009ffc:	e7fe      	b.n	8009ffc <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009ffe:	f002 facb 	bl	800c598 <vPortValidateInterruptPriority>
	__asm volatile
 800a002:	f3ef 8211 	mrs	r2, BASEPRI
 800a006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a00a:	f383 8811 	msr	BASEPRI, r3
 800a00e:	f3bf 8f6f 	isb	sy
 800a012:	f3bf 8f4f 	dsb	sy
 800a016:	617a      	str	r2, [r7, #20]
 800a018:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800a01a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a01c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a01e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a022:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800a024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a026:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a028:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a02a:	429a      	cmp	r2, r3
 800a02c:	d22b      	bcs.n	800a086 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a02e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a030:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a034:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a03a:	1c5a      	adds	r2, r3, #1
 800a03c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a03e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a040:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a044:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a048:	d112      	bne.n	800a070 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a04a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a04c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d016      	beq.n	800a080 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a054:	3324      	adds	r3, #36	; 0x24
 800a056:	4618      	mov	r0, r3
 800a058:	f001 f90c 	bl	800b274 <xTaskRemoveFromEventList>
 800a05c:	4603      	mov	r3, r0
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d00e      	beq.n	800a080 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a062:	683b      	ldr	r3, [r7, #0]
 800a064:	2b00      	cmp	r3, #0
 800a066:	d00b      	beq.n	800a080 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a068:	683b      	ldr	r3, [r7, #0]
 800a06a:	2201      	movs	r2, #1
 800a06c:	601a      	str	r2, [r3, #0]
 800a06e:	e007      	b.n	800a080 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a070:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a074:	3301      	adds	r3, #1
 800a076:	b2db      	uxtb	r3, r3
 800a078:	b25a      	sxtb	r2, r3
 800a07a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a07c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a080:	2301      	movs	r3, #1
 800a082:	637b      	str	r3, [r7, #52]	; 0x34
 800a084:	e001      	b.n	800a08a <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a086:	2300      	movs	r3, #0
 800a088:	637b      	str	r3, [r7, #52]	; 0x34
 800a08a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a08c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	f383 8811 	msr	BASEPRI, r3
}
 800a094:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a096:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a098:	4618      	mov	r0, r3
 800a09a:	3738      	adds	r7, #56	; 0x38
 800a09c:	46bd      	mov	sp, r7
 800a09e:	bd80      	pop	{r7, pc}

0800a0a0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a0a0:	b580      	push	{r7, lr}
 800a0a2:	b08c      	sub	sp, #48	; 0x30
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	60f8      	str	r0, [r7, #12]
 800a0a8:	60b9      	str	r1, [r7, #8]
 800a0aa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a0ac:	2300      	movs	r3, #0
 800a0ae:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a0b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d10a      	bne.n	800a0d0 <xQueueReceive+0x30>
	__asm volatile
 800a0ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0be:	f383 8811 	msr	BASEPRI, r3
 800a0c2:	f3bf 8f6f 	isb	sy
 800a0c6:	f3bf 8f4f 	dsb	sy
 800a0ca:	623b      	str	r3, [r7, #32]
}
 800a0cc:	bf00      	nop
 800a0ce:	e7fe      	b.n	800a0ce <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a0d0:	68bb      	ldr	r3, [r7, #8]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d103      	bne.n	800a0de <xQueueReceive+0x3e>
 800a0d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d101      	bne.n	800a0e2 <xQueueReceive+0x42>
 800a0de:	2301      	movs	r3, #1
 800a0e0:	e000      	b.n	800a0e4 <xQueueReceive+0x44>
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d10a      	bne.n	800a0fe <xQueueReceive+0x5e>
	__asm volatile
 800a0e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0ec:	f383 8811 	msr	BASEPRI, r3
 800a0f0:	f3bf 8f6f 	isb	sy
 800a0f4:	f3bf 8f4f 	dsb	sy
 800a0f8:	61fb      	str	r3, [r7, #28]
}
 800a0fa:	bf00      	nop
 800a0fc:	e7fe      	b.n	800a0fc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a0fe:	f001 fab7 	bl	800b670 <xTaskGetSchedulerState>
 800a102:	4603      	mov	r3, r0
 800a104:	2b00      	cmp	r3, #0
 800a106:	d102      	bne.n	800a10e <xQueueReceive+0x6e>
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d101      	bne.n	800a112 <xQueueReceive+0x72>
 800a10e:	2301      	movs	r3, #1
 800a110:	e000      	b.n	800a114 <xQueueReceive+0x74>
 800a112:	2300      	movs	r3, #0
 800a114:	2b00      	cmp	r3, #0
 800a116:	d10a      	bne.n	800a12e <xQueueReceive+0x8e>
	__asm volatile
 800a118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a11c:	f383 8811 	msr	BASEPRI, r3
 800a120:	f3bf 8f6f 	isb	sy
 800a124:	f3bf 8f4f 	dsb	sy
 800a128:	61bb      	str	r3, [r7, #24]
}
 800a12a:	bf00      	nop
 800a12c:	e7fe      	b.n	800a12c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a12e:	f002 f951 	bl	800c3d4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a136:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d01f      	beq.n	800a17e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a13e:	68b9      	ldr	r1, [r7, #8]
 800a140:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a142:	f000 fab9 	bl	800a6b8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a148:	1e5a      	subs	r2, r3, #1
 800a14a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a14c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a14e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a150:	691b      	ldr	r3, [r3, #16]
 800a152:	2b00      	cmp	r3, #0
 800a154:	d00f      	beq.n	800a176 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a158:	3310      	adds	r3, #16
 800a15a:	4618      	mov	r0, r3
 800a15c:	f001 f88a 	bl	800b274 <xTaskRemoveFromEventList>
 800a160:	4603      	mov	r3, r0
 800a162:	2b00      	cmp	r3, #0
 800a164:	d007      	beq.n	800a176 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a166:	4b3d      	ldr	r3, [pc, #244]	; (800a25c <xQueueReceive+0x1bc>)
 800a168:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a16c:	601a      	str	r2, [r3, #0]
 800a16e:	f3bf 8f4f 	dsb	sy
 800a172:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a176:	f002 f95d 	bl	800c434 <vPortExitCritical>
				return pdPASS;
 800a17a:	2301      	movs	r3, #1
 800a17c:	e069      	b.n	800a252 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	2b00      	cmp	r3, #0
 800a182:	d103      	bne.n	800a18c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a184:	f002 f956 	bl	800c434 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a188:	2300      	movs	r3, #0
 800a18a:	e062      	b.n	800a252 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a18c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d106      	bne.n	800a1a0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a192:	f107 0310 	add.w	r3, r7, #16
 800a196:	4618      	mov	r0, r3
 800a198:	f001 f930 	bl	800b3fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a19c:	2301      	movs	r3, #1
 800a19e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a1a0:	f002 f948 	bl	800c434 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a1a4:	f000 fdfa 	bl	800ad9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a1a8:	f002 f914 	bl	800c3d4 <vPortEnterCritical>
 800a1ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a1b2:	b25b      	sxtb	r3, r3
 800a1b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1b8:	d103      	bne.n	800a1c2 <xQueueReceive+0x122>
 800a1ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1bc:	2200      	movs	r2, #0
 800a1be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a1c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a1c8:	b25b      	sxtb	r3, r3
 800a1ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1ce:	d103      	bne.n	800a1d8 <xQueueReceive+0x138>
 800a1d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1d2:	2200      	movs	r2, #0
 800a1d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a1d8:	f002 f92c 	bl	800c434 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a1dc:	1d3a      	adds	r2, r7, #4
 800a1de:	f107 0310 	add.w	r3, r7, #16
 800a1e2:	4611      	mov	r1, r2
 800a1e4:	4618      	mov	r0, r3
 800a1e6:	f001 f91f 	bl	800b428 <xTaskCheckForTimeOut>
 800a1ea:	4603      	mov	r3, r0
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d123      	bne.n	800a238 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a1f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a1f2:	f000 fad9 	bl	800a7a8 <prvIsQueueEmpty>
 800a1f6:	4603      	mov	r3, r0
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d017      	beq.n	800a22c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a1fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1fe:	3324      	adds	r3, #36	; 0x24
 800a200:	687a      	ldr	r2, [r7, #4]
 800a202:	4611      	mov	r1, r2
 800a204:	4618      	mov	r0, r3
 800a206:	f000 ffa9 	bl	800b15c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a20a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a20c:	f000 fa7a 	bl	800a704 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a210:	f000 fdd2 	bl	800adb8 <xTaskResumeAll>
 800a214:	4603      	mov	r3, r0
 800a216:	2b00      	cmp	r3, #0
 800a218:	d189      	bne.n	800a12e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a21a:	4b10      	ldr	r3, [pc, #64]	; (800a25c <xQueueReceive+0x1bc>)
 800a21c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a220:	601a      	str	r2, [r3, #0]
 800a222:	f3bf 8f4f 	dsb	sy
 800a226:	f3bf 8f6f 	isb	sy
 800a22a:	e780      	b.n	800a12e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a22c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a22e:	f000 fa69 	bl	800a704 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a232:	f000 fdc1 	bl	800adb8 <xTaskResumeAll>
 800a236:	e77a      	b.n	800a12e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a238:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a23a:	f000 fa63 	bl	800a704 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a23e:	f000 fdbb 	bl	800adb8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a242:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a244:	f000 fab0 	bl	800a7a8 <prvIsQueueEmpty>
 800a248:	4603      	mov	r3, r0
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	f43f af6f 	beq.w	800a12e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a250:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a252:	4618      	mov	r0, r3
 800a254:	3730      	adds	r7, #48	; 0x30
 800a256:	46bd      	mov	sp, r7
 800a258:	bd80      	pop	{r7, pc}
 800a25a:	bf00      	nop
 800a25c:	e000ed04 	.word	0xe000ed04

0800a260 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800a260:	b580      	push	{r7, lr}
 800a262:	b08e      	sub	sp, #56	; 0x38
 800a264:	af00      	add	r7, sp, #0
 800a266:	6078      	str	r0, [r7, #4]
 800a268:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a26a:	2300      	movs	r3, #0
 800a26c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a272:	2300      	movs	r3, #0
 800a274:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d10a      	bne.n	800a292 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800a27c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a280:	f383 8811 	msr	BASEPRI, r3
 800a284:	f3bf 8f6f 	isb	sy
 800a288:	f3bf 8f4f 	dsb	sy
 800a28c:	623b      	str	r3, [r7, #32]
}
 800a28e:	bf00      	nop
 800a290:	e7fe      	b.n	800a290 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a296:	2b00      	cmp	r3, #0
 800a298:	d00a      	beq.n	800a2b0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800a29a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a29e:	f383 8811 	msr	BASEPRI, r3
 800a2a2:	f3bf 8f6f 	isb	sy
 800a2a6:	f3bf 8f4f 	dsb	sy
 800a2aa:	61fb      	str	r3, [r7, #28]
}
 800a2ac:	bf00      	nop
 800a2ae:	e7fe      	b.n	800a2ae <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a2b0:	f001 f9de 	bl	800b670 <xTaskGetSchedulerState>
 800a2b4:	4603      	mov	r3, r0
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d102      	bne.n	800a2c0 <xQueueSemaphoreTake+0x60>
 800a2ba:	683b      	ldr	r3, [r7, #0]
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d101      	bne.n	800a2c4 <xQueueSemaphoreTake+0x64>
 800a2c0:	2301      	movs	r3, #1
 800a2c2:	e000      	b.n	800a2c6 <xQueueSemaphoreTake+0x66>
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d10a      	bne.n	800a2e0 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800a2ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2ce:	f383 8811 	msr	BASEPRI, r3
 800a2d2:	f3bf 8f6f 	isb	sy
 800a2d6:	f3bf 8f4f 	dsb	sy
 800a2da:	61bb      	str	r3, [r7, #24]
}
 800a2dc:	bf00      	nop
 800a2de:	e7fe      	b.n	800a2de <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a2e0:	f002 f878 	bl	800c3d4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a2e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2e8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a2ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d024      	beq.n	800a33a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a2f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2f2:	1e5a      	subs	r2, r3, #1
 800a2f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2f6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a2f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d104      	bne.n	800a30a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800a300:	f001 fb76 	bl	800b9f0 <pvTaskIncrementMutexHeldCount>
 800a304:	4602      	mov	r2, r0
 800a306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a308:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a30a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a30c:	691b      	ldr	r3, [r3, #16]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d00f      	beq.n	800a332 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a314:	3310      	adds	r3, #16
 800a316:	4618      	mov	r0, r3
 800a318:	f000 ffac 	bl	800b274 <xTaskRemoveFromEventList>
 800a31c:	4603      	mov	r3, r0
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d007      	beq.n	800a332 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a322:	4b54      	ldr	r3, [pc, #336]	; (800a474 <xQueueSemaphoreTake+0x214>)
 800a324:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a328:	601a      	str	r2, [r3, #0]
 800a32a:	f3bf 8f4f 	dsb	sy
 800a32e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a332:	f002 f87f 	bl	800c434 <vPortExitCritical>
				return pdPASS;
 800a336:	2301      	movs	r3, #1
 800a338:	e097      	b.n	800a46a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a33a:	683b      	ldr	r3, [r7, #0]
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d111      	bne.n	800a364 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a342:	2b00      	cmp	r3, #0
 800a344:	d00a      	beq.n	800a35c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800a346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a34a:	f383 8811 	msr	BASEPRI, r3
 800a34e:	f3bf 8f6f 	isb	sy
 800a352:	f3bf 8f4f 	dsb	sy
 800a356:	617b      	str	r3, [r7, #20]
}
 800a358:	bf00      	nop
 800a35a:	e7fe      	b.n	800a35a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800a35c:	f002 f86a 	bl	800c434 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a360:	2300      	movs	r3, #0
 800a362:	e082      	b.n	800a46a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a364:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a366:	2b00      	cmp	r3, #0
 800a368:	d106      	bne.n	800a378 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a36a:	f107 030c 	add.w	r3, r7, #12
 800a36e:	4618      	mov	r0, r3
 800a370:	f001 f844 	bl	800b3fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a374:	2301      	movs	r3, #1
 800a376:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a378:	f002 f85c 	bl	800c434 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a37c:	f000 fd0e 	bl	800ad9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a380:	f002 f828 	bl	800c3d4 <vPortEnterCritical>
 800a384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a386:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a38a:	b25b      	sxtb	r3, r3
 800a38c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a390:	d103      	bne.n	800a39a <xQueueSemaphoreTake+0x13a>
 800a392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a394:	2200      	movs	r2, #0
 800a396:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a39a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a39c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a3a0:	b25b      	sxtb	r3, r3
 800a3a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3a6:	d103      	bne.n	800a3b0 <xQueueSemaphoreTake+0x150>
 800a3a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3aa:	2200      	movs	r2, #0
 800a3ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a3b0:	f002 f840 	bl	800c434 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a3b4:	463a      	mov	r2, r7
 800a3b6:	f107 030c 	add.w	r3, r7, #12
 800a3ba:	4611      	mov	r1, r2
 800a3bc:	4618      	mov	r0, r3
 800a3be:	f001 f833 	bl	800b428 <xTaskCheckForTimeOut>
 800a3c2:	4603      	mov	r3, r0
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d132      	bne.n	800a42e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a3c8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a3ca:	f000 f9ed 	bl	800a7a8 <prvIsQueueEmpty>
 800a3ce:	4603      	mov	r3, r0
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d026      	beq.n	800a422 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a3d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d109      	bne.n	800a3f0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800a3dc:	f001 fffa 	bl	800c3d4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a3e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3e2:	689b      	ldr	r3, [r3, #8]
 800a3e4:	4618      	mov	r0, r3
 800a3e6:	f001 f961 	bl	800b6ac <xTaskPriorityInherit>
 800a3ea:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800a3ec:	f002 f822 	bl	800c434 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a3f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3f2:	3324      	adds	r3, #36	; 0x24
 800a3f4:	683a      	ldr	r2, [r7, #0]
 800a3f6:	4611      	mov	r1, r2
 800a3f8:	4618      	mov	r0, r3
 800a3fa:	f000 feaf 	bl	800b15c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a3fe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a400:	f000 f980 	bl	800a704 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a404:	f000 fcd8 	bl	800adb8 <xTaskResumeAll>
 800a408:	4603      	mov	r3, r0
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	f47f af68 	bne.w	800a2e0 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800a410:	4b18      	ldr	r3, [pc, #96]	; (800a474 <xQueueSemaphoreTake+0x214>)
 800a412:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a416:	601a      	str	r2, [r3, #0]
 800a418:	f3bf 8f4f 	dsb	sy
 800a41c:	f3bf 8f6f 	isb	sy
 800a420:	e75e      	b.n	800a2e0 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800a422:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a424:	f000 f96e 	bl	800a704 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a428:	f000 fcc6 	bl	800adb8 <xTaskResumeAll>
 800a42c:	e758      	b.n	800a2e0 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800a42e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a430:	f000 f968 	bl	800a704 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a434:	f000 fcc0 	bl	800adb8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a438:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a43a:	f000 f9b5 	bl	800a7a8 <prvIsQueueEmpty>
 800a43e:	4603      	mov	r3, r0
 800a440:	2b00      	cmp	r3, #0
 800a442:	f43f af4d 	beq.w	800a2e0 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800a446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d00d      	beq.n	800a468 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800a44c:	f001 ffc2 	bl	800c3d4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800a450:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a452:	f000 f8af 	bl	800a5b4 <prvGetDisinheritPriorityAfterTimeout>
 800a456:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800a458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a45a:	689b      	ldr	r3, [r3, #8]
 800a45c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a45e:	4618      	mov	r0, r3
 800a460:	f001 fa20 	bl	800b8a4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800a464:	f001 ffe6 	bl	800c434 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a468:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a46a:	4618      	mov	r0, r3
 800a46c:	3738      	adds	r7, #56	; 0x38
 800a46e:	46bd      	mov	sp, r7
 800a470:	bd80      	pop	{r7, pc}
 800a472:	bf00      	nop
 800a474:	e000ed04 	.word	0xe000ed04

0800a478 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a478:	b580      	push	{r7, lr}
 800a47a:	b08e      	sub	sp, #56	; 0x38
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	60f8      	str	r0, [r7, #12]
 800a480:	60b9      	str	r1, [r7, #8]
 800a482:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d10a      	bne.n	800a4a4 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800a48e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a492:	f383 8811 	msr	BASEPRI, r3
 800a496:	f3bf 8f6f 	isb	sy
 800a49a:	f3bf 8f4f 	dsb	sy
 800a49e:	623b      	str	r3, [r7, #32]
}
 800a4a0:	bf00      	nop
 800a4a2:	e7fe      	b.n	800a4a2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a4a4:	68bb      	ldr	r3, [r7, #8]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d103      	bne.n	800a4b2 <xQueueReceiveFromISR+0x3a>
 800a4aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d101      	bne.n	800a4b6 <xQueueReceiveFromISR+0x3e>
 800a4b2:	2301      	movs	r3, #1
 800a4b4:	e000      	b.n	800a4b8 <xQueueReceiveFromISR+0x40>
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d10a      	bne.n	800a4d2 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800a4bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4c0:	f383 8811 	msr	BASEPRI, r3
 800a4c4:	f3bf 8f6f 	isb	sy
 800a4c8:	f3bf 8f4f 	dsb	sy
 800a4cc:	61fb      	str	r3, [r7, #28]
}
 800a4ce:	bf00      	nop
 800a4d0:	e7fe      	b.n	800a4d0 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a4d2:	f002 f861 	bl	800c598 <vPortValidateInterruptPriority>
	__asm volatile
 800a4d6:	f3ef 8211 	mrs	r2, BASEPRI
 800a4da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4de:	f383 8811 	msr	BASEPRI, r3
 800a4e2:	f3bf 8f6f 	isb	sy
 800a4e6:	f3bf 8f4f 	dsb	sy
 800a4ea:	61ba      	str	r2, [r7, #24]
 800a4ec:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800a4ee:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a4f0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a4f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4f6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a4f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d02f      	beq.n	800a55e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800a4fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a500:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a504:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a508:	68b9      	ldr	r1, [r7, #8]
 800a50a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a50c:	f000 f8d4 	bl	800a6b8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a512:	1e5a      	subs	r2, r3, #1
 800a514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a516:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800a518:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a51c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a520:	d112      	bne.n	800a548 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a524:	691b      	ldr	r3, [r3, #16]
 800a526:	2b00      	cmp	r3, #0
 800a528:	d016      	beq.n	800a558 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a52a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a52c:	3310      	adds	r3, #16
 800a52e:	4618      	mov	r0, r3
 800a530:	f000 fea0 	bl	800b274 <xTaskRemoveFromEventList>
 800a534:	4603      	mov	r3, r0
 800a536:	2b00      	cmp	r3, #0
 800a538:	d00e      	beq.n	800a558 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d00b      	beq.n	800a558 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	2201      	movs	r2, #1
 800a544:	601a      	str	r2, [r3, #0]
 800a546:	e007      	b.n	800a558 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800a548:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a54c:	3301      	adds	r3, #1
 800a54e:	b2db      	uxtb	r3, r3
 800a550:	b25a      	sxtb	r2, r3
 800a552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a554:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800a558:	2301      	movs	r3, #1
 800a55a:	637b      	str	r3, [r7, #52]	; 0x34
 800a55c:	e001      	b.n	800a562 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800a55e:	2300      	movs	r3, #0
 800a560:	637b      	str	r3, [r7, #52]	; 0x34
 800a562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a564:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a566:	693b      	ldr	r3, [r7, #16]
 800a568:	f383 8811 	msr	BASEPRI, r3
}
 800a56c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a56e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a570:	4618      	mov	r0, r3
 800a572:	3738      	adds	r7, #56	; 0x38
 800a574:	46bd      	mov	sp, r7
 800a576:	bd80      	pop	{r7, pc}

0800a578 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800a578:	b580      	push	{r7, lr}
 800a57a:	b084      	sub	sp, #16
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	2b00      	cmp	r3, #0
 800a588:	d10a      	bne.n	800a5a0 <vQueueDelete+0x28>
	__asm volatile
 800a58a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a58e:	f383 8811 	msr	BASEPRI, r3
 800a592:	f3bf 8f6f 	isb	sy
 800a596:	f3bf 8f4f 	dsb	sy
 800a59a:	60bb      	str	r3, [r7, #8]
}
 800a59c:	bf00      	nop
 800a59e:	e7fe      	b.n	800a59e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800a5a0:	68f8      	ldr	r0, [r7, #12]
 800a5a2:	f000 f959 	bl	800a858 <vQueueUnregisterQueue>

	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
	{
		/* The queue can only have been allocated dynamically - free it
		again. */
		vPortFree( pxQueue );
 800a5a6:	68f8      	ldr	r0, [r7, #12]
 800a5a8:	f002 f902 	bl	800c7b0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800a5ac:	bf00      	nop
 800a5ae:	3710      	adds	r7, #16
 800a5b0:	46bd      	mov	sp, r7
 800a5b2:	bd80      	pop	{r7, pc}

0800a5b4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800a5b4:	b480      	push	{r7}
 800a5b6:	b085      	sub	sp, #20
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d006      	beq.n	800a5d2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	f1c3 0307 	rsb	r3, r3, #7
 800a5ce:	60fb      	str	r3, [r7, #12]
 800a5d0:	e001      	b.n	800a5d6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800a5d6:	68fb      	ldr	r3, [r7, #12]
	}
 800a5d8:	4618      	mov	r0, r3
 800a5da:	3714      	adds	r7, #20
 800a5dc:	46bd      	mov	sp, r7
 800a5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e2:	4770      	bx	lr

0800a5e4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a5e4:	b580      	push	{r7, lr}
 800a5e6:	b086      	sub	sp, #24
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	60f8      	str	r0, [r7, #12]
 800a5ec:	60b9      	str	r1, [r7, #8]
 800a5ee:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5f8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d10d      	bne.n	800a61e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	2b00      	cmp	r3, #0
 800a608:	d14d      	bne.n	800a6a6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	689b      	ldr	r3, [r3, #8]
 800a60e:	4618      	mov	r0, r3
 800a610:	f001 f8c2 	bl	800b798 <xTaskPriorityDisinherit>
 800a614:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	2200      	movs	r2, #0
 800a61a:	609a      	str	r2, [r3, #8]
 800a61c:	e043      	b.n	800a6a6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	2b00      	cmp	r3, #0
 800a622:	d119      	bne.n	800a658 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	6858      	ldr	r0, [r3, #4]
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a62c:	461a      	mov	r2, r3
 800a62e:	68b9      	ldr	r1, [r7, #8]
 800a630:	f00f fb70 	bl	8019d14 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	685a      	ldr	r2, [r3, #4]
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a63c:	441a      	add	r2, r3
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	685a      	ldr	r2, [r3, #4]
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	689b      	ldr	r3, [r3, #8]
 800a64a:	429a      	cmp	r2, r3
 800a64c:	d32b      	bcc.n	800a6a6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	681a      	ldr	r2, [r3, #0]
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	605a      	str	r2, [r3, #4]
 800a656:	e026      	b.n	800a6a6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	68d8      	ldr	r0, [r3, #12]
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a660:	461a      	mov	r2, r3
 800a662:	68b9      	ldr	r1, [r7, #8]
 800a664:	f00f fb56 	bl	8019d14 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	68da      	ldr	r2, [r3, #12]
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a670:	425b      	negs	r3, r3
 800a672:	441a      	add	r2, r3
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	68da      	ldr	r2, [r3, #12]
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	429a      	cmp	r2, r3
 800a682:	d207      	bcs.n	800a694 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	689a      	ldr	r2, [r3, #8]
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a68c:	425b      	negs	r3, r3
 800a68e:	441a      	add	r2, r3
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	2b02      	cmp	r3, #2
 800a698:	d105      	bne.n	800a6a6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a69a:	693b      	ldr	r3, [r7, #16]
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d002      	beq.n	800a6a6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a6a0:	693b      	ldr	r3, [r7, #16]
 800a6a2:	3b01      	subs	r3, #1
 800a6a4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a6a6:	693b      	ldr	r3, [r7, #16]
 800a6a8:	1c5a      	adds	r2, r3, #1
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a6ae:	697b      	ldr	r3, [r7, #20]
}
 800a6b0:	4618      	mov	r0, r3
 800a6b2:	3718      	adds	r7, #24
 800a6b4:	46bd      	mov	sp, r7
 800a6b6:	bd80      	pop	{r7, pc}

0800a6b8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	b082      	sub	sp, #8
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	6078      	str	r0, [r7, #4]
 800a6c0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d018      	beq.n	800a6fc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	68da      	ldr	r2, [r3, #12]
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6d2:	441a      	add	r2, r3
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	68da      	ldr	r2, [r3, #12]
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	689b      	ldr	r3, [r3, #8]
 800a6e0:	429a      	cmp	r2, r3
 800a6e2:	d303      	bcc.n	800a6ec <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681a      	ldr	r2, [r3, #0]
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	68d9      	ldr	r1, [r3, #12]
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6f4:	461a      	mov	r2, r3
 800a6f6:	6838      	ldr	r0, [r7, #0]
 800a6f8:	f00f fb0c 	bl	8019d14 <memcpy>
	}
}
 800a6fc:	bf00      	nop
 800a6fe:	3708      	adds	r7, #8
 800a700:	46bd      	mov	sp, r7
 800a702:	bd80      	pop	{r7, pc}

0800a704 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a704:	b580      	push	{r7, lr}
 800a706:	b084      	sub	sp, #16
 800a708:	af00      	add	r7, sp, #0
 800a70a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a70c:	f001 fe62 	bl	800c3d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a716:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a718:	e011      	b.n	800a73e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d012      	beq.n	800a748 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	3324      	adds	r3, #36	; 0x24
 800a726:	4618      	mov	r0, r3
 800a728:	f000 fda4 	bl	800b274 <xTaskRemoveFromEventList>
 800a72c:	4603      	mov	r3, r0
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d001      	beq.n	800a736 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a732:	f000 fedb 	bl	800b4ec <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a736:	7bfb      	ldrb	r3, [r7, #15]
 800a738:	3b01      	subs	r3, #1
 800a73a:	b2db      	uxtb	r3, r3
 800a73c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a73e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a742:	2b00      	cmp	r3, #0
 800a744:	dce9      	bgt.n	800a71a <prvUnlockQueue+0x16>
 800a746:	e000      	b.n	800a74a <prvUnlockQueue+0x46>
					break;
 800a748:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	22ff      	movs	r2, #255	; 0xff
 800a74e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a752:	f001 fe6f 	bl	800c434 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a756:	f001 fe3d 	bl	800c3d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a760:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a762:	e011      	b.n	800a788 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	691b      	ldr	r3, [r3, #16]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d012      	beq.n	800a792 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	3310      	adds	r3, #16
 800a770:	4618      	mov	r0, r3
 800a772:	f000 fd7f 	bl	800b274 <xTaskRemoveFromEventList>
 800a776:	4603      	mov	r3, r0
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d001      	beq.n	800a780 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a77c:	f000 feb6 	bl	800b4ec <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a780:	7bbb      	ldrb	r3, [r7, #14]
 800a782:	3b01      	subs	r3, #1
 800a784:	b2db      	uxtb	r3, r3
 800a786:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a788:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	dce9      	bgt.n	800a764 <prvUnlockQueue+0x60>
 800a790:	e000      	b.n	800a794 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a792:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	22ff      	movs	r2, #255	; 0xff
 800a798:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a79c:	f001 fe4a 	bl	800c434 <vPortExitCritical>
}
 800a7a0:	bf00      	nop
 800a7a2:	3710      	adds	r7, #16
 800a7a4:	46bd      	mov	sp, r7
 800a7a6:	bd80      	pop	{r7, pc}

0800a7a8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a7a8:	b580      	push	{r7, lr}
 800a7aa:	b084      	sub	sp, #16
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a7b0:	f001 fe10 	bl	800c3d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d102      	bne.n	800a7c2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a7bc:	2301      	movs	r3, #1
 800a7be:	60fb      	str	r3, [r7, #12]
 800a7c0:	e001      	b.n	800a7c6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a7c6:	f001 fe35 	bl	800c434 <vPortExitCritical>

	return xReturn;
 800a7ca:	68fb      	ldr	r3, [r7, #12]
}
 800a7cc:	4618      	mov	r0, r3
 800a7ce:	3710      	adds	r7, #16
 800a7d0:	46bd      	mov	sp, r7
 800a7d2:	bd80      	pop	{r7, pc}

0800a7d4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b084      	sub	sp, #16
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a7dc:	f001 fdfa 	bl	800c3d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a7e8:	429a      	cmp	r2, r3
 800a7ea:	d102      	bne.n	800a7f2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a7ec:	2301      	movs	r3, #1
 800a7ee:	60fb      	str	r3, [r7, #12]
 800a7f0:	e001      	b.n	800a7f6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a7f6:	f001 fe1d 	bl	800c434 <vPortExitCritical>

	return xReturn;
 800a7fa:	68fb      	ldr	r3, [r7, #12]
}
 800a7fc:	4618      	mov	r0, r3
 800a7fe:	3710      	adds	r7, #16
 800a800:	46bd      	mov	sp, r7
 800a802:	bd80      	pop	{r7, pc}

0800a804 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a804:	b480      	push	{r7}
 800a806:	b085      	sub	sp, #20
 800a808:	af00      	add	r7, sp, #0
 800a80a:	6078      	str	r0, [r7, #4]
 800a80c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a80e:	2300      	movs	r3, #0
 800a810:	60fb      	str	r3, [r7, #12]
 800a812:	e014      	b.n	800a83e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a814:	4a0f      	ldr	r2, [pc, #60]	; (800a854 <vQueueAddToRegistry+0x50>)
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d10b      	bne.n	800a838 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a820:	490c      	ldr	r1, [pc, #48]	; (800a854 <vQueueAddToRegistry+0x50>)
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	683a      	ldr	r2, [r7, #0]
 800a826:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a82a:	4a0a      	ldr	r2, [pc, #40]	; (800a854 <vQueueAddToRegistry+0x50>)
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	00db      	lsls	r3, r3, #3
 800a830:	4413      	add	r3, r2
 800a832:	687a      	ldr	r2, [r7, #4]
 800a834:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a836:	e006      	b.n	800a846 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	3301      	adds	r3, #1
 800a83c:	60fb      	str	r3, [r7, #12]
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	2b07      	cmp	r3, #7
 800a842:	d9e7      	bls.n	800a814 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a844:	bf00      	nop
 800a846:	bf00      	nop
 800a848:	3714      	adds	r7, #20
 800a84a:	46bd      	mov	sp, r7
 800a84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a850:	4770      	bx	lr
 800a852:	bf00      	nop
 800a854:	20001270 	.word	0x20001270

0800a858 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800a858:	b480      	push	{r7}
 800a85a:	b085      	sub	sp, #20
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a860:	2300      	movs	r3, #0
 800a862:	60fb      	str	r3, [r7, #12]
 800a864:	e016      	b.n	800a894 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800a866:	4a10      	ldr	r2, [pc, #64]	; (800a8a8 <vQueueUnregisterQueue+0x50>)
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	00db      	lsls	r3, r3, #3
 800a86c:	4413      	add	r3, r2
 800a86e:	685b      	ldr	r3, [r3, #4]
 800a870:	687a      	ldr	r2, [r7, #4]
 800a872:	429a      	cmp	r2, r3
 800a874:	d10b      	bne.n	800a88e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800a876:	4a0c      	ldr	r2, [pc, #48]	; (800a8a8 <vQueueUnregisterQueue+0x50>)
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	2100      	movs	r1, #0
 800a87c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800a880:	4a09      	ldr	r2, [pc, #36]	; (800a8a8 <vQueueUnregisterQueue+0x50>)
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	00db      	lsls	r3, r3, #3
 800a886:	4413      	add	r3, r2
 800a888:	2200      	movs	r2, #0
 800a88a:	605a      	str	r2, [r3, #4]
				break;
 800a88c:	e006      	b.n	800a89c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	3301      	adds	r3, #1
 800a892:	60fb      	str	r3, [r7, #12]
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	2b07      	cmp	r3, #7
 800a898:	d9e5      	bls.n	800a866 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800a89a:	bf00      	nop
 800a89c:	bf00      	nop
 800a89e:	3714      	adds	r7, #20
 800a8a0:	46bd      	mov	sp, r7
 800a8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a6:	4770      	bx	lr
 800a8a8:	20001270 	.word	0x20001270

0800a8ac <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a8ac:	b580      	push	{r7, lr}
 800a8ae:	b086      	sub	sp, #24
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	60f8      	str	r0, [r7, #12]
 800a8b4:	60b9      	str	r1, [r7, #8]
 800a8b6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a8bc:	f001 fd8a 	bl	800c3d4 <vPortEnterCritical>
 800a8c0:	697b      	ldr	r3, [r7, #20]
 800a8c2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a8c6:	b25b      	sxtb	r3, r3
 800a8c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8cc:	d103      	bne.n	800a8d6 <vQueueWaitForMessageRestricted+0x2a>
 800a8ce:	697b      	ldr	r3, [r7, #20]
 800a8d0:	2200      	movs	r2, #0
 800a8d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a8d6:	697b      	ldr	r3, [r7, #20]
 800a8d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a8dc:	b25b      	sxtb	r3, r3
 800a8de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8e2:	d103      	bne.n	800a8ec <vQueueWaitForMessageRestricted+0x40>
 800a8e4:	697b      	ldr	r3, [r7, #20]
 800a8e6:	2200      	movs	r2, #0
 800a8e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a8ec:	f001 fda2 	bl	800c434 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a8f0:	697b      	ldr	r3, [r7, #20]
 800a8f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d106      	bne.n	800a906 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a8f8:	697b      	ldr	r3, [r7, #20]
 800a8fa:	3324      	adds	r3, #36	; 0x24
 800a8fc:	687a      	ldr	r2, [r7, #4]
 800a8fe:	68b9      	ldr	r1, [r7, #8]
 800a900:	4618      	mov	r0, r3
 800a902:	f000 fc8b 	bl	800b21c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a906:	6978      	ldr	r0, [r7, #20]
 800a908:	f7ff fefc 	bl	800a704 <prvUnlockQueue>
	}
 800a90c:	bf00      	nop
 800a90e:	3718      	adds	r7, #24
 800a910:	46bd      	mov	sp, r7
 800a912:	bd80      	pop	{r7, pc}

0800a914 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a914:	b580      	push	{r7, lr}
 800a916:	b08c      	sub	sp, #48	; 0x30
 800a918:	af04      	add	r7, sp, #16
 800a91a:	60f8      	str	r0, [r7, #12]
 800a91c:	60b9      	str	r1, [r7, #8]
 800a91e:	603b      	str	r3, [r7, #0]
 800a920:	4613      	mov	r3, r2
 800a922:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a924:	88fb      	ldrh	r3, [r7, #6]
 800a926:	009b      	lsls	r3, r3, #2
 800a928:	4618      	mov	r0, r3
 800a92a:	f001 fe75 	bl	800c618 <pvPortMalloc>
 800a92e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a930:	697b      	ldr	r3, [r7, #20]
 800a932:	2b00      	cmp	r3, #0
 800a934:	d00e      	beq.n	800a954 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a936:	2054      	movs	r0, #84	; 0x54
 800a938:	f001 fe6e 	bl	800c618 <pvPortMalloc>
 800a93c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a93e:	69fb      	ldr	r3, [r7, #28]
 800a940:	2b00      	cmp	r3, #0
 800a942:	d003      	beq.n	800a94c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a944:	69fb      	ldr	r3, [r7, #28]
 800a946:	697a      	ldr	r2, [r7, #20]
 800a948:	631a      	str	r2, [r3, #48]	; 0x30
 800a94a:	e005      	b.n	800a958 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a94c:	6978      	ldr	r0, [r7, #20]
 800a94e:	f001 ff2f 	bl	800c7b0 <vPortFree>
 800a952:	e001      	b.n	800a958 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a954:	2300      	movs	r3, #0
 800a956:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a958:	69fb      	ldr	r3, [r7, #28]
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d013      	beq.n	800a986 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a95e:	88fa      	ldrh	r2, [r7, #6]
 800a960:	2300      	movs	r3, #0
 800a962:	9303      	str	r3, [sp, #12]
 800a964:	69fb      	ldr	r3, [r7, #28]
 800a966:	9302      	str	r3, [sp, #8]
 800a968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a96a:	9301      	str	r3, [sp, #4]
 800a96c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a96e:	9300      	str	r3, [sp, #0]
 800a970:	683b      	ldr	r3, [r7, #0]
 800a972:	68b9      	ldr	r1, [r7, #8]
 800a974:	68f8      	ldr	r0, [r7, #12]
 800a976:	f000 f80e 	bl	800a996 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a97a:	69f8      	ldr	r0, [r7, #28]
 800a97c:	f000 f892 	bl	800aaa4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a980:	2301      	movs	r3, #1
 800a982:	61bb      	str	r3, [r7, #24]
 800a984:	e002      	b.n	800a98c <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a986:	f04f 33ff 	mov.w	r3, #4294967295
 800a98a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a98c:	69bb      	ldr	r3, [r7, #24]
	}
 800a98e:	4618      	mov	r0, r3
 800a990:	3720      	adds	r7, #32
 800a992:	46bd      	mov	sp, r7
 800a994:	bd80      	pop	{r7, pc}

0800a996 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a996:	b580      	push	{r7, lr}
 800a998:	b088      	sub	sp, #32
 800a99a:	af00      	add	r7, sp, #0
 800a99c:	60f8      	str	r0, [r7, #12]
 800a99e:	60b9      	str	r1, [r7, #8]
 800a9a0:	607a      	str	r2, [r7, #4]
 800a9a2:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a9a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a9ae:	3b01      	subs	r3, #1
 800a9b0:	009b      	lsls	r3, r3, #2
 800a9b2:	4413      	add	r3, r2
 800a9b4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a9b6:	69bb      	ldr	r3, [r7, #24]
 800a9b8:	f023 0307 	bic.w	r3, r3, #7
 800a9bc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a9be:	69bb      	ldr	r3, [r7, #24]
 800a9c0:	f003 0307 	and.w	r3, r3, #7
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d00a      	beq.n	800a9de <prvInitialiseNewTask+0x48>
	__asm volatile
 800a9c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9cc:	f383 8811 	msr	BASEPRI, r3
 800a9d0:	f3bf 8f6f 	isb	sy
 800a9d4:	f3bf 8f4f 	dsb	sy
 800a9d8:	617b      	str	r3, [r7, #20]
}
 800a9da:	bf00      	nop
 800a9dc:	e7fe      	b.n	800a9dc <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a9de:	68bb      	ldr	r3, [r7, #8]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d01f      	beq.n	800aa24 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a9e4:	2300      	movs	r3, #0
 800a9e6:	61fb      	str	r3, [r7, #28]
 800a9e8:	e012      	b.n	800aa10 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a9ea:	68ba      	ldr	r2, [r7, #8]
 800a9ec:	69fb      	ldr	r3, [r7, #28]
 800a9ee:	4413      	add	r3, r2
 800a9f0:	7819      	ldrb	r1, [r3, #0]
 800a9f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a9f4:	69fb      	ldr	r3, [r7, #28]
 800a9f6:	4413      	add	r3, r2
 800a9f8:	3334      	adds	r3, #52	; 0x34
 800a9fa:	460a      	mov	r2, r1
 800a9fc:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a9fe:	68ba      	ldr	r2, [r7, #8]
 800aa00:	69fb      	ldr	r3, [r7, #28]
 800aa02:	4413      	add	r3, r2
 800aa04:	781b      	ldrb	r3, [r3, #0]
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d006      	beq.n	800aa18 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800aa0a:	69fb      	ldr	r3, [r7, #28]
 800aa0c:	3301      	adds	r3, #1
 800aa0e:	61fb      	str	r3, [r7, #28]
 800aa10:	69fb      	ldr	r3, [r7, #28]
 800aa12:	2b0f      	cmp	r3, #15
 800aa14:	d9e9      	bls.n	800a9ea <prvInitialiseNewTask+0x54>
 800aa16:	e000      	b.n	800aa1a <prvInitialiseNewTask+0x84>
			{
				break;
 800aa18:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800aa1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa1c:	2200      	movs	r2, #0
 800aa1e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800aa22:	e003      	b.n	800aa2c <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800aa24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa26:	2200      	movs	r2, #0
 800aa28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800aa2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa2e:	2b06      	cmp	r3, #6
 800aa30:	d901      	bls.n	800aa36 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800aa32:	2306      	movs	r3, #6
 800aa34:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800aa36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aa3a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800aa3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aa40:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800aa42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa44:	2200      	movs	r2, #0
 800aa46:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800aa48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa4a:	3304      	adds	r3, #4
 800aa4c:	4618      	mov	r0, r3
 800aa4e:	f7fe ff7d 	bl	800994c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800aa52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa54:	3318      	adds	r3, #24
 800aa56:	4618      	mov	r0, r3
 800aa58:	f7fe ff78 	bl	800994c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800aa5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aa60:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aa62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa64:	f1c3 0207 	rsb	r2, r3, #7
 800aa68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa6a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800aa6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aa70:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800aa72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa74:	2200      	movs	r2, #0
 800aa76:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800aa78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa7a:	2200      	movs	r2, #0
 800aa7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800aa80:	683a      	ldr	r2, [r7, #0]
 800aa82:	68f9      	ldr	r1, [r7, #12]
 800aa84:	69b8      	ldr	r0, [r7, #24]
 800aa86:	f001 fb7b 	bl	800c180 <pxPortInitialiseStack>
 800aa8a:	4602      	mov	r2, r0
 800aa8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa8e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800aa90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d002      	beq.n	800aa9c <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800aa96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aa9a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800aa9c:	bf00      	nop
 800aa9e:	3720      	adds	r7, #32
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	bd80      	pop	{r7, pc}

0800aaa4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800aaa4:	b580      	push	{r7, lr}
 800aaa6:	b082      	sub	sp, #8
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800aaac:	f001 fc92 	bl	800c3d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800aab0:	4b2a      	ldr	r3, [pc, #168]	; (800ab5c <prvAddNewTaskToReadyList+0xb8>)
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	3301      	adds	r3, #1
 800aab6:	4a29      	ldr	r2, [pc, #164]	; (800ab5c <prvAddNewTaskToReadyList+0xb8>)
 800aab8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800aaba:	4b29      	ldr	r3, [pc, #164]	; (800ab60 <prvAddNewTaskToReadyList+0xbc>)
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d109      	bne.n	800aad6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800aac2:	4a27      	ldr	r2, [pc, #156]	; (800ab60 <prvAddNewTaskToReadyList+0xbc>)
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800aac8:	4b24      	ldr	r3, [pc, #144]	; (800ab5c <prvAddNewTaskToReadyList+0xb8>)
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	2b01      	cmp	r3, #1
 800aace:	d110      	bne.n	800aaf2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800aad0:	f000 fd30 	bl	800b534 <prvInitialiseTaskLists>
 800aad4:	e00d      	b.n	800aaf2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800aad6:	4b23      	ldr	r3, [pc, #140]	; (800ab64 <prvAddNewTaskToReadyList+0xc0>)
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d109      	bne.n	800aaf2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800aade:	4b20      	ldr	r3, [pc, #128]	; (800ab60 <prvAddNewTaskToReadyList+0xbc>)
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aae8:	429a      	cmp	r2, r3
 800aaea:	d802      	bhi.n	800aaf2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800aaec:	4a1c      	ldr	r2, [pc, #112]	; (800ab60 <prvAddNewTaskToReadyList+0xbc>)
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800aaf2:	4b1d      	ldr	r3, [pc, #116]	; (800ab68 <prvAddNewTaskToReadyList+0xc4>)
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	3301      	adds	r3, #1
 800aaf8:	4a1b      	ldr	r2, [pc, #108]	; (800ab68 <prvAddNewTaskToReadyList+0xc4>)
 800aafa:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab00:	2201      	movs	r2, #1
 800ab02:	409a      	lsls	r2, r3
 800ab04:	4b19      	ldr	r3, [pc, #100]	; (800ab6c <prvAddNewTaskToReadyList+0xc8>)
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	4313      	orrs	r3, r2
 800ab0a:	4a18      	ldr	r2, [pc, #96]	; (800ab6c <prvAddNewTaskToReadyList+0xc8>)
 800ab0c:	6013      	str	r3, [r2, #0]
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab12:	4613      	mov	r3, r2
 800ab14:	009b      	lsls	r3, r3, #2
 800ab16:	4413      	add	r3, r2
 800ab18:	009b      	lsls	r3, r3, #2
 800ab1a:	4a15      	ldr	r2, [pc, #84]	; (800ab70 <prvAddNewTaskToReadyList+0xcc>)
 800ab1c:	441a      	add	r2, r3
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	3304      	adds	r3, #4
 800ab22:	4619      	mov	r1, r3
 800ab24:	4610      	mov	r0, r2
 800ab26:	f7fe ff1e 	bl	8009966 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ab2a:	f001 fc83 	bl	800c434 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ab2e:	4b0d      	ldr	r3, [pc, #52]	; (800ab64 <prvAddNewTaskToReadyList+0xc0>)
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d00e      	beq.n	800ab54 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ab36:	4b0a      	ldr	r3, [pc, #40]	; (800ab60 <prvAddNewTaskToReadyList+0xbc>)
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab40:	429a      	cmp	r2, r3
 800ab42:	d207      	bcs.n	800ab54 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ab44:	4b0b      	ldr	r3, [pc, #44]	; (800ab74 <prvAddNewTaskToReadyList+0xd0>)
 800ab46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab4a:	601a      	str	r2, [r3, #0]
 800ab4c:	f3bf 8f4f 	dsb	sy
 800ab50:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ab54:	bf00      	nop
 800ab56:	3708      	adds	r7, #8
 800ab58:	46bd      	mov	sp, r7
 800ab5a:	bd80      	pop	{r7, pc}
 800ab5c:	200013b0 	.word	0x200013b0
 800ab60:	200012b0 	.word	0x200012b0
 800ab64:	200013bc 	.word	0x200013bc
 800ab68:	200013cc 	.word	0x200013cc
 800ab6c:	200013b8 	.word	0x200013b8
 800ab70:	200012b4 	.word	0x200012b4
 800ab74:	e000ed04 	.word	0xe000ed04

0800ab78 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800ab78:	b580      	push	{r7, lr}
 800ab7a:	b084      	sub	sp, #16
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800ab80:	f001 fc28 	bl	800c3d4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d102      	bne.n	800ab90 <vTaskDelete+0x18>
 800ab8a:	4b39      	ldr	r3, [pc, #228]	; (800ac70 <vTaskDelete+0xf8>)
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	e000      	b.n	800ab92 <vTaskDelete+0x1a>
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	3304      	adds	r3, #4
 800ab98:	4618      	mov	r0, r3
 800ab9a:	f7fe ff41 	bl	8009a20 <uxListRemove>
 800ab9e:	4603      	mov	r3, r0
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d115      	bne.n	800abd0 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aba8:	4932      	ldr	r1, [pc, #200]	; (800ac74 <vTaskDelete+0xfc>)
 800abaa:	4613      	mov	r3, r2
 800abac:	009b      	lsls	r3, r3, #2
 800abae:	4413      	add	r3, r2
 800abb0:	009b      	lsls	r3, r3, #2
 800abb2:	440b      	add	r3, r1
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d10a      	bne.n	800abd0 <vTaskDelete+0x58>
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abbe:	2201      	movs	r2, #1
 800abc0:	fa02 f303 	lsl.w	r3, r2, r3
 800abc4:	43da      	mvns	r2, r3
 800abc6:	4b2c      	ldr	r3, [pc, #176]	; (800ac78 <vTaskDelete+0x100>)
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	4013      	ands	r3, r2
 800abcc:	4a2a      	ldr	r2, [pc, #168]	; (800ac78 <vTaskDelete+0x100>)
 800abce:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d004      	beq.n	800abe2 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	3318      	adds	r3, #24
 800abdc:	4618      	mov	r0, r3
 800abde:	f7fe ff1f 	bl	8009a20 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800abe2:	4b26      	ldr	r3, [pc, #152]	; (800ac7c <vTaskDelete+0x104>)
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	3301      	adds	r3, #1
 800abe8:	4a24      	ldr	r2, [pc, #144]	; (800ac7c <vTaskDelete+0x104>)
 800abea:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800abec:	4b20      	ldr	r3, [pc, #128]	; (800ac70 <vTaskDelete+0xf8>)
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	68fa      	ldr	r2, [r7, #12]
 800abf2:	429a      	cmp	r2, r3
 800abf4:	d10b      	bne.n	800ac0e <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	3304      	adds	r3, #4
 800abfa:	4619      	mov	r1, r3
 800abfc:	4820      	ldr	r0, [pc, #128]	; (800ac80 <vTaskDelete+0x108>)
 800abfe:	f7fe feb2 	bl	8009966 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800ac02:	4b20      	ldr	r3, [pc, #128]	; (800ac84 <vTaskDelete+0x10c>)
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	3301      	adds	r3, #1
 800ac08:	4a1e      	ldr	r2, [pc, #120]	; (800ac84 <vTaskDelete+0x10c>)
 800ac0a:	6013      	str	r3, [r2, #0]
 800ac0c:	e009      	b.n	800ac22 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800ac0e:	4b1e      	ldr	r3, [pc, #120]	; (800ac88 <vTaskDelete+0x110>)
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	3b01      	subs	r3, #1
 800ac14:	4a1c      	ldr	r2, [pc, #112]	; (800ac88 <vTaskDelete+0x110>)
 800ac16:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 800ac18:	68f8      	ldr	r0, [r7, #12]
 800ac1a:	f000 fcf9 	bl	800b610 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800ac1e:	f000 fd07 	bl	800b630 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 800ac22:	f001 fc07 	bl	800c434 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800ac26:	4b19      	ldr	r3, [pc, #100]	; (800ac8c <vTaskDelete+0x114>)
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d01b      	beq.n	800ac66 <vTaskDelete+0xee>
		{
			if( pxTCB == pxCurrentTCB )
 800ac2e:	4b10      	ldr	r3, [pc, #64]	; (800ac70 <vTaskDelete+0xf8>)
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	68fa      	ldr	r2, [r7, #12]
 800ac34:	429a      	cmp	r2, r3
 800ac36:	d116      	bne.n	800ac66 <vTaskDelete+0xee>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800ac38:	4b15      	ldr	r3, [pc, #84]	; (800ac90 <vTaskDelete+0x118>)
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d00a      	beq.n	800ac56 <vTaskDelete+0xde>
	__asm volatile
 800ac40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac44:	f383 8811 	msr	BASEPRI, r3
 800ac48:	f3bf 8f6f 	isb	sy
 800ac4c:	f3bf 8f4f 	dsb	sy
 800ac50:	60bb      	str	r3, [r7, #8]
}
 800ac52:	bf00      	nop
 800ac54:	e7fe      	b.n	800ac54 <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 800ac56:	4b0f      	ldr	r3, [pc, #60]	; (800ac94 <vTaskDelete+0x11c>)
 800ac58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac5c:	601a      	str	r2, [r3, #0]
 800ac5e:	f3bf 8f4f 	dsb	sy
 800ac62:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ac66:	bf00      	nop
 800ac68:	3710      	adds	r7, #16
 800ac6a:	46bd      	mov	sp, r7
 800ac6c:	bd80      	pop	{r7, pc}
 800ac6e:	bf00      	nop
 800ac70:	200012b0 	.word	0x200012b0
 800ac74:	200012b4 	.word	0x200012b4
 800ac78:	200013b8 	.word	0x200013b8
 800ac7c:	200013cc 	.word	0x200013cc
 800ac80:	20001384 	.word	0x20001384
 800ac84:	20001398 	.word	0x20001398
 800ac88:	200013b0 	.word	0x200013b0
 800ac8c:	200013bc 	.word	0x200013bc
 800ac90:	200013d8 	.word	0x200013d8
 800ac94:	e000ed04 	.word	0xe000ed04

0800ac98 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ac98:	b580      	push	{r7, lr}
 800ac9a:	b084      	sub	sp, #16
 800ac9c:	af00      	add	r7, sp, #0
 800ac9e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800aca0:	2300      	movs	r3, #0
 800aca2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d017      	beq.n	800acda <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800acaa:	4b13      	ldr	r3, [pc, #76]	; (800acf8 <vTaskDelay+0x60>)
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d00a      	beq.n	800acc8 <vTaskDelay+0x30>
	__asm volatile
 800acb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acb6:	f383 8811 	msr	BASEPRI, r3
 800acba:	f3bf 8f6f 	isb	sy
 800acbe:	f3bf 8f4f 	dsb	sy
 800acc2:	60bb      	str	r3, [r7, #8]
}
 800acc4:	bf00      	nop
 800acc6:	e7fe      	b.n	800acc6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800acc8:	f000 f868 	bl	800ad9c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800accc:	2100      	movs	r1, #0
 800acce:	6878      	ldr	r0, [r7, #4]
 800acd0:	f000 fea2 	bl	800ba18 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800acd4:	f000 f870 	bl	800adb8 <xTaskResumeAll>
 800acd8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d107      	bne.n	800acf0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800ace0:	4b06      	ldr	r3, [pc, #24]	; (800acfc <vTaskDelay+0x64>)
 800ace2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ace6:	601a      	str	r2, [r3, #0]
 800ace8:	f3bf 8f4f 	dsb	sy
 800acec:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800acf0:	bf00      	nop
 800acf2:	3710      	adds	r7, #16
 800acf4:	46bd      	mov	sp, r7
 800acf6:	bd80      	pop	{r7, pc}
 800acf8:	200013d8 	.word	0x200013d8
 800acfc:	e000ed04 	.word	0xe000ed04

0800ad00 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ad00:	b580      	push	{r7, lr}
 800ad02:	b086      	sub	sp, #24
 800ad04:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800ad06:	4b1f      	ldr	r3, [pc, #124]	; (800ad84 <vTaskStartScheduler+0x84>)
 800ad08:	9301      	str	r3, [sp, #4]
 800ad0a:	2300      	movs	r3, #0
 800ad0c:	9300      	str	r3, [sp, #0]
 800ad0e:	2300      	movs	r3, #0
 800ad10:	2280      	movs	r2, #128	; 0x80
 800ad12:	491d      	ldr	r1, [pc, #116]	; (800ad88 <vTaskStartScheduler+0x88>)
 800ad14:	481d      	ldr	r0, [pc, #116]	; (800ad8c <vTaskStartScheduler+0x8c>)
 800ad16:	f7ff fdfd 	bl	800a914 <xTaskCreate>
 800ad1a:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	2b01      	cmp	r3, #1
 800ad20:	d102      	bne.n	800ad28 <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 800ad22:	f000 fedf 	bl	800bae4 <xTimerCreateTimerTask>
 800ad26:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	2b01      	cmp	r3, #1
 800ad2c:	d116      	bne.n	800ad5c <vTaskStartScheduler+0x5c>
	__asm volatile
 800ad2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad32:	f383 8811 	msr	BASEPRI, r3
 800ad36:	f3bf 8f6f 	isb	sy
 800ad3a:	f3bf 8f4f 	dsb	sy
 800ad3e:	60bb      	str	r3, [r7, #8]
}
 800ad40:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ad42:	4b13      	ldr	r3, [pc, #76]	; (800ad90 <vTaskStartScheduler+0x90>)
 800ad44:	f04f 32ff 	mov.w	r2, #4294967295
 800ad48:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ad4a:	4b12      	ldr	r3, [pc, #72]	; (800ad94 <vTaskStartScheduler+0x94>)
 800ad4c:	2201      	movs	r2, #1
 800ad4e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ad50:	4b11      	ldr	r3, [pc, #68]	; (800ad98 <vTaskStartScheduler+0x98>)
 800ad52:	2200      	movs	r2, #0
 800ad54:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ad56:	f001 fa9b 	bl	800c290 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ad5a:	e00e      	b.n	800ad7a <vTaskStartScheduler+0x7a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad62:	d10a      	bne.n	800ad7a <vTaskStartScheduler+0x7a>
	__asm volatile
 800ad64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad68:	f383 8811 	msr	BASEPRI, r3
 800ad6c:	f3bf 8f6f 	isb	sy
 800ad70:	f3bf 8f4f 	dsb	sy
 800ad74:	607b      	str	r3, [r7, #4]
}
 800ad76:	bf00      	nop
 800ad78:	e7fe      	b.n	800ad78 <vTaskStartScheduler+0x78>
}
 800ad7a:	bf00      	nop
 800ad7c:	3710      	adds	r7, #16
 800ad7e:	46bd      	mov	sp, r7
 800ad80:	bd80      	pop	{r7, pc}
 800ad82:	bf00      	nop
 800ad84:	200013d4 	.word	0x200013d4
 800ad88:	0801ba98 	.word	0x0801ba98
 800ad8c:	0800b505 	.word	0x0800b505
 800ad90:	200013d0 	.word	0x200013d0
 800ad94:	200013bc 	.word	0x200013bc
 800ad98:	200013b4 	.word	0x200013b4

0800ad9c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ad9c:	b480      	push	{r7}
 800ad9e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800ada0:	4b04      	ldr	r3, [pc, #16]	; (800adb4 <vTaskSuspendAll+0x18>)
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	3301      	adds	r3, #1
 800ada6:	4a03      	ldr	r2, [pc, #12]	; (800adb4 <vTaskSuspendAll+0x18>)
 800ada8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800adaa:	bf00      	nop
 800adac:	46bd      	mov	sp, r7
 800adae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb2:	4770      	bx	lr
 800adb4:	200013d8 	.word	0x200013d8

0800adb8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800adb8:	b580      	push	{r7, lr}
 800adba:	b084      	sub	sp, #16
 800adbc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800adbe:	2300      	movs	r3, #0
 800adc0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800adc2:	2300      	movs	r3, #0
 800adc4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800adc6:	4b41      	ldr	r3, [pc, #260]	; (800aecc <xTaskResumeAll+0x114>)
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d10a      	bne.n	800ade4 <xTaskResumeAll+0x2c>
	__asm volatile
 800adce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800add2:	f383 8811 	msr	BASEPRI, r3
 800add6:	f3bf 8f6f 	isb	sy
 800adda:	f3bf 8f4f 	dsb	sy
 800adde:	603b      	str	r3, [r7, #0]
}
 800ade0:	bf00      	nop
 800ade2:	e7fe      	b.n	800ade2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ade4:	f001 faf6 	bl	800c3d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ade8:	4b38      	ldr	r3, [pc, #224]	; (800aecc <xTaskResumeAll+0x114>)
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	3b01      	subs	r3, #1
 800adee:	4a37      	ldr	r2, [pc, #220]	; (800aecc <xTaskResumeAll+0x114>)
 800adf0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800adf2:	4b36      	ldr	r3, [pc, #216]	; (800aecc <xTaskResumeAll+0x114>)
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d161      	bne.n	800aebe <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800adfa:	4b35      	ldr	r3, [pc, #212]	; (800aed0 <xTaskResumeAll+0x118>)
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d05d      	beq.n	800aebe <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ae02:	e02e      	b.n	800ae62 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ae04:	4b33      	ldr	r3, [pc, #204]	; (800aed4 <xTaskResumeAll+0x11c>)
 800ae06:	68db      	ldr	r3, [r3, #12]
 800ae08:	68db      	ldr	r3, [r3, #12]
 800ae0a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	3318      	adds	r3, #24
 800ae10:	4618      	mov	r0, r3
 800ae12:	f7fe fe05 	bl	8009a20 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	3304      	adds	r3, #4
 800ae1a:	4618      	mov	r0, r3
 800ae1c:	f7fe fe00 	bl	8009a20 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae24:	2201      	movs	r2, #1
 800ae26:	409a      	lsls	r2, r3
 800ae28:	4b2b      	ldr	r3, [pc, #172]	; (800aed8 <xTaskResumeAll+0x120>)
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	4313      	orrs	r3, r2
 800ae2e:	4a2a      	ldr	r2, [pc, #168]	; (800aed8 <xTaskResumeAll+0x120>)
 800ae30:	6013      	str	r3, [r2, #0]
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae36:	4613      	mov	r3, r2
 800ae38:	009b      	lsls	r3, r3, #2
 800ae3a:	4413      	add	r3, r2
 800ae3c:	009b      	lsls	r3, r3, #2
 800ae3e:	4a27      	ldr	r2, [pc, #156]	; (800aedc <xTaskResumeAll+0x124>)
 800ae40:	441a      	add	r2, r3
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	3304      	adds	r3, #4
 800ae46:	4619      	mov	r1, r3
 800ae48:	4610      	mov	r0, r2
 800ae4a:	f7fe fd8c 	bl	8009966 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae52:	4b23      	ldr	r3, [pc, #140]	; (800aee0 <xTaskResumeAll+0x128>)
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae58:	429a      	cmp	r2, r3
 800ae5a:	d302      	bcc.n	800ae62 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800ae5c:	4b21      	ldr	r3, [pc, #132]	; (800aee4 <xTaskResumeAll+0x12c>)
 800ae5e:	2201      	movs	r2, #1
 800ae60:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ae62:	4b1c      	ldr	r3, [pc, #112]	; (800aed4 <xTaskResumeAll+0x11c>)
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d1cc      	bne.n	800ae04 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d001      	beq.n	800ae74 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ae70:	f000 fbde 	bl	800b630 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800ae74:	4b1c      	ldr	r3, [pc, #112]	; (800aee8 <xTaskResumeAll+0x130>)
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d010      	beq.n	800aea2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ae80:	f000 f858 	bl	800af34 <xTaskIncrementTick>
 800ae84:	4603      	mov	r3, r0
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d002      	beq.n	800ae90 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800ae8a:	4b16      	ldr	r3, [pc, #88]	; (800aee4 <xTaskResumeAll+0x12c>)
 800ae8c:	2201      	movs	r2, #1
 800ae8e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	3b01      	subs	r3, #1
 800ae94:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d1f1      	bne.n	800ae80 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800ae9c:	4b12      	ldr	r3, [pc, #72]	; (800aee8 <xTaskResumeAll+0x130>)
 800ae9e:	2200      	movs	r2, #0
 800aea0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800aea2:	4b10      	ldr	r3, [pc, #64]	; (800aee4 <xTaskResumeAll+0x12c>)
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d009      	beq.n	800aebe <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800aeaa:	2301      	movs	r3, #1
 800aeac:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800aeae:	4b0f      	ldr	r3, [pc, #60]	; (800aeec <xTaskResumeAll+0x134>)
 800aeb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aeb4:	601a      	str	r2, [r3, #0]
 800aeb6:	f3bf 8f4f 	dsb	sy
 800aeba:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800aebe:	f001 fab9 	bl	800c434 <vPortExitCritical>

	return xAlreadyYielded;
 800aec2:	68bb      	ldr	r3, [r7, #8]
}
 800aec4:	4618      	mov	r0, r3
 800aec6:	3710      	adds	r7, #16
 800aec8:	46bd      	mov	sp, r7
 800aeca:	bd80      	pop	{r7, pc}
 800aecc:	200013d8 	.word	0x200013d8
 800aed0:	200013b0 	.word	0x200013b0
 800aed4:	20001370 	.word	0x20001370
 800aed8:	200013b8 	.word	0x200013b8
 800aedc:	200012b4 	.word	0x200012b4
 800aee0:	200012b0 	.word	0x200012b0
 800aee4:	200013c4 	.word	0x200013c4
 800aee8:	200013c0 	.word	0x200013c0
 800aeec:	e000ed04 	.word	0xe000ed04

0800aef0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800aef0:	b480      	push	{r7}
 800aef2:	b083      	sub	sp, #12
 800aef4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800aef6:	4b05      	ldr	r3, [pc, #20]	; (800af0c <xTaskGetTickCount+0x1c>)
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800aefc:	687b      	ldr	r3, [r7, #4]
}
 800aefe:	4618      	mov	r0, r3
 800af00:	370c      	adds	r7, #12
 800af02:	46bd      	mov	sp, r7
 800af04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af08:	4770      	bx	lr
 800af0a:	bf00      	nop
 800af0c:	200013b4 	.word	0x200013b4

0800af10 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800af10:	b580      	push	{r7, lr}
 800af12:	b082      	sub	sp, #8
 800af14:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800af16:	f001 fb3f 	bl	800c598 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800af1a:	2300      	movs	r3, #0
 800af1c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800af1e:	4b04      	ldr	r3, [pc, #16]	; (800af30 <xTaskGetTickCountFromISR+0x20>)
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800af24:	683b      	ldr	r3, [r7, #0]
}
 800af26:	4618      	mov	r0, r3
 800af28:	3708      	adds	r7, #8
 800af2a:	46bd      	mov	sp, r7
 800af2c:	bd80      	pop	{r7, pc}
 800af2e:	bf00      	nop
 800af30:	200013b4 	.word	0x200013b4

0800af34 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800af34:	b580      	push	{r7, lr}
 800af36:	b086      	sub	sp, #24
 800af38:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800af3a:	2300      	movs	r3, #0
 800af3c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800af3e:	4b4e      	ldr	r3, [pc, #312]	; (800b078 <xTaskIncrementTick+0x144>)
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	2b00      	cmp	r3, #0
 800af44:	f040 808e 	bne.w	800b064 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800af48:	4b4c      	ldr	r3, [pc, #304]	; (800b07c <xTaskIncrementTick+0x148>)
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	3301      	adds	r3, #1
 800af4e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800af50:	4a4a      	ldr	r2, [pc, #296]	; (800b07c <xTaskIncrementTick+0x148>)
 800af52:	693b      	ldr	r3, [r7, #16]
 800af54:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800af56:	693b      	ldr	r3, [r7, #16]
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d120      	bne.n	800af9e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800af5c:	4b48      	ldr	r3, [pc, #288]	; (800b080 <xTaskIncrementTick+0x14c>)
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	2b00      	cmp	r3, #0
 800af64:	d00a      	beq.n	800af7c <xTaskIncrementTick+0x48>
	__asm volatile
 800af66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af6a:	f383 8811 	msr	BASEPRI, r3
 800af6e:	f3bf 8f6f 	isb	sy
 800af72:	f3bf 8f4f 	dsb	sy
 800af76:	603b      	str	r3, [r7, #0]
}
 800af78:	bf00      	nop
 800af7a:	e7fe      	b.n	800af7a <xTaskIncrementTick+0x46>
 800af7c:	4b40      	ldr	r3, [pc, #256]	; (800b080 <xTaskIncrementTick+0x14c>)
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	60fb      	str	r3, [r7, #12]
 800af82:	4b40      	ldr	r3, [pc, #256]	; (800b084 <xTaskIncrementTick+0x150>)
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	4a3e      	ldr	r2, [pc, #248]	; (800b080 <xTaskIncrementTick+0x14c>)
 800af88:	6013      	str	r3, [r2, #0]
 800af8a:	4a3e      	ldr	r2, [pc, #248]	; (800b084 <xTaskIncrementTick+0x150>)
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	6013      	str	r3, [r2, #0]
 800af90:	4b3d      	ldr	r3, [pc, #244]	; (800b088 <xTaskIncrementTick+0x154>)
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	3301      	adds	r3, #1
 800af96:	4a3c      	ldr	r2, [pc, #240]	; (800b088 <xTaskIncrementTick+0x154>)
 800af98:	6013      	str	r3, [r2, #0]
 800af9a:	f000 fb49 	bl	800b630 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800af9e:	4b3b      	ldr	r3, [pc, #236]	; (800b08c <xTaskIncrementTick+0x158>)
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	693a      	ldr	r2, [r7, #16]
 800afa4:	429a      	cmp	r2, r3
 800afa6:	d348      	bcc.n	800b03a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800afa8:	4b35      	ldr	r3, [pc, #212]	; (800b080 <xTaskIncrementTick+0x14c>)
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d104      	bne.n	800afbc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800afb2:	4b36      	ldr	r3, [pc, #216]	; (800b08c <xTaskIncrementTick+0x158>)
 800afb4:	f04f 32ff 	mov.w	r2, #4294967295
 800afb8:	601a      	str	r2, [r3, #0]
					break;
 800afba:	e03e      	b.n	800b03a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800afbc:	4b30      	ldr	r3, [pc, #192]	; (800b080 <xTaskIncrementTick+0x14c>)
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	68db      	ldr	r3, [r3, #12]
 800afc2:	68db      	ldr	r3, [r3, #12]
 800afc4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800afc6:	68bb      	ldr	r3, [r7, #8]
 800afc8:	685b      	ldr	r3, [r3, #4]
 800afca:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800afcc:	693a      	ldr	r2, [r7, #16]
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	429a      	cmp	r2, r3
 800afd2:	d203      	bcs.n	800afdc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800afd4:	4a2d      	ldr	r2, [pc, #180]	; (800b08c <xTaskIncrementTick+0x158>)
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800afda:	e02e      	b.n	800b03a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800afdc:	68bb      	ldr	r3, [r7, #8]
 800afde:	3304      	adds	r3, #4
 800afe0:	4618      	mov	r0, r3
 800afe2:	f7fe fd1d 	bl	8009a20 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800afe6:	68bb      	ldr	r3, [r7, #8]
 800afe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afea:	2b00      	cmp	r3, #0
 800afec:	d004      	beq.n	800aff8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800afee:	68bb      	ldr	r3, [r7, #8]
 800aff0:	3318      	adds	r3, #24
 800aff2:	4618      	mov	r0, r3
 800aff4:	f7fe fd14 	bl	8009a20 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800aff8:	68bb      	ldr	r3, [r7, #8]
 800affa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800affc:	2201      	movs	r2, #1
 800affe:	409a      	lsls	r2, r3
 800b000:	4b23      	ldr	r3, [pc, #140]	; (800b090 <xTaskIncrementTick+0x15c>)
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	4313      	orrs	r3, r2
 800b006:	4a22      	ldr	r2, [pc, #136]	; (800b090 <xTaskIncrementTick+0x15c>)
 800b008:	6013      	str	r3, [r2, #0]
 800b00a:	68bb      	ldr	r3, [r7, #8]
 800b00c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b00e:	4613      	mov	r3, r2
 800b010:	009b      	lsls	r3, r3, #2
 800b012:	4413      	add	r3, r2
 800b014:	009b      	lsls	r3, r3, #2
 800b016:	4a1f      	ldr	r2, [pc, #124]	; (800b094 <xTaskIncrementTick+0x160>)
 800b018:	441a      	add	r2, r3
 800b01a:	68bb      	ldr	r3, [r7, #8]
 800b01c:	3304      	adds	r3, #4
 800b01e:	4619      	mov	r1, r3
 800b020:	4610      	mov	r0, r2
 800b022:	f7fe fca0 	bl	8009966 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b026:	68bb      	ldr	r3, [r7, #8]
 800b028:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b02a:	4b1b      	ldr	r3, [pc, #108]	; (800b098 <xTaskIncrementTick+0x164>)
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b030:	429a      	cmp	r2, r3
 800b032:	d3b9      	bcc.n	800afa8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b034:	2301      	movs	r3, #1
 800b036:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b038:	e7b6      	b.n	800afa8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b03a:	4b17      	ldr	r3, [pc, #92]	; (800b098 <xTaskIncrementTick+0x164>)
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b040:	4914      	ldr	r1, [pc, #80]	; (800b094 <xTaskIncrementTick+0x160>)
 800b042:	4613      	mov	r3, r2
 800b044:	009b      	lsls	r3, r3, #2
 800b046:	4413      	add	r3, r2
 800b048:	009b      	lsls	r3, r3, #2
 800b04a:	440b      	add	r3, r1
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	2b01      	cmp	r3, #1
 800b050:	d901      	bls.n	800b056 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800b052:	2301      	movs	r3, #1
 800b054:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b056:	4b11      	ldr	r3, [pc, #68]	; (800b09c <xTaskIncrementTick+0x168>)
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d007      	beq.n	800b06e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800b05e:	2301      	movs	r3, #1
 800b060:	617b      	str	r3, [r7, #20]
 800b062:	e004      	b.n	800b06e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b064:	4b0e      	ldr	r3, [pc, #56]	; (800b0a0 <xTaskIncrementTick+0x16c>)
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	3301      	adds	r3, #1
 800b06a:	4a0d      	ldr	r2, [pc, #52]	; (800b0a0 <xTaskIncrementTick+0x16c>)
 800b06c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b06e:	697b      	ldr	r3, [r7, #20]
}
 800b070:	4618      	mov	r0, r3
 800b072:	3718      	adds	r7, #24
 800b074:	46bd      	mov	sp, r7
 800b076:	bd80      	pop	{r7, pc}
 800b078:	200013d8 	.word	0x200013d8
 800b07c:	200013b4 	.word	0x200013b4
 800b080:	20001368 	.word	0x20001368
 800b084:	2000136c 	.word	0x2000136c
 800b088:	200013c8 	.word	0x200013c8
 800b08c:	200013d0 	.word	0x200013d0
 800b090:	200013b8 	.word	0x200013b8
 800b094:	200012b4 	.word	0x200012b4
 800b098:	200012b0 	.word	0x200012b0
 800b09c:	200013c4 	.word	0x200013c4
 800b0a0:	200013c0 	.word	0x200013c0

0800b0a4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b0a4:	b480      	push	{r7}
 800b0a6:	b087      	sub	sp, #28
 800b0a8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b0aa:	4b27      	ldr	r3, [pc, #156]	; (800b148 <vTaskSwitchContext+0xa4>)
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d003      	beq.n	800b0ba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b0b2:	4b26      	ldr	r3, [pc, #152]	; (800b14c <vTaskSwitchContext+0xa8>)
 800b0b4:	2201      	movs	r2, #1
 800b0b6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b0b8:	e03f      	b.n	800b13a <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800b0ba:	4b24      	ldr	r3, [pc, #144]	; (800b14c <vTaskSwitchContext+0xa8>)
 800b0bc:	2200      	movs	r2, #0
 800b0be:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b0c0:	4b23      	ldr	r3, [pc, #140]	; (800b150 <vTaskSwitchContext+0xac>)
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	fab3 f383 	clz	r3, r3
 800b0cc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800b0ce:	7afb      	ldrb	r3, [r7, #11]
 800b0d0:	f1c3 031f 	rsb	r3, r3, #31
 800b0d4:	617b      	str	r3, [r7, #20]
 800b0d6:	491f      	ldr	r1, [pc, #124]	; (800b154 <vTaskSwitchContext+0xb0>)
 800b0d8:	697a      	ldr	r2, [r7, #20]
 800b0da:	4613      	mov	r3, r2
 800b0dc:	009b      	lsls	r3, r3, #2
 800b0de:	4413      	add	r3, r2
 800b0e0:	009b      	lsls	r3, r3, #2
 800b0e2:	440b      	add	r3, r1
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d10a      	bne.n	800b100 <vTaskSwitchContext+0x5c>
	__asm volatile
 800b0ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0ee:	f383 8811 	msr	BASEPRI, r3
 800b0f2:	f3bf 8f6f 	isb	sy
 800b0f6:	f3bf 8f4f 	dsb	sy
 800b0fa:	607b      	str	r3, [r7, #4]
}
 800b0fc:	bf00      	nop
 800b0fe:	e7fe      	b.n	800b0fe <vTaskSwitchContext+0x5a>
 800b100:	697a      	ldr	r2, [r7, #20]
 800b102:	4613      	mov	r3, r2
 800b104:	009b      	lsls	r3, r3, #2
 800b106:	4413      	add	r3, r2
 800b108:	009b      	lsls	r3, r3, #2
 800b10a:	4a12      	ldr	r2, [pc, #72]	; (800b154 <vTaskSwitchContext+0xb0>)
 800b10c:	4413      	add	r3, r2
 800b10e:	613b      	str	r3, [r7, #16]
 800b110:	693b      	ldr	r3, [r7, #16]
 800b112:	685b      	ldr	r3, [r3, #4]
 800b114:	685a      	ldr	r2, [r3, #4]
 800b116:	693b      	ldr	r3, [r7, #16]
 800b118:	605a      	str	r2, [r3, #4]
 800b11a:	693b      	ldr	r3, [r7, #16]
 800b11c:	685a      	ldr	r2, [r3, #4]
 800b11e:	693b      	ldr	r3, [r7, #16]
 800b120:	3308      	adds	r3, #8
 800b122:	429a      	cmp	r2, r3
 800b124:	d104      	bne.n	800b130 <vTaskSwitchContext+0x8c>
 800b126:	693b      	ldr	r3, [r7, #16]
 800b128:	685b      	ldr	r3, [r3, #4]
 800b12a:	685a      	ldr	r2, [r3, #4]
 800b12c:	693b      	ldr	r3, [r7, #16]
 800b12e:	605a      	str	r2, [r3, #4]
 800b130:	693b      	ldr	r3, [r7, #16]
 800b132:	685b      	ldr	r3, [r3, #4]
 800b134:	68db      	ldr	r3, [r3, #12]
 800b136:	4a08      	ldr	r2, [pc, #32]	; (800b158 <vTaskSwitchContext+0xb4>)
 800b138:	6013      	str	r3, [r2, #0]
}
 800b13a:	bf00      	nop
 800b13c:	371c      	adds	r7, #28
 800b13e:	46bd      	mov	sp, r7
 800b140:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b144:	4770      	bx	lr
 800b146:	bf00      	nop
 800b148:	200013d8 	.word	0x200013d8
 800b14c:	200013c4 	.word	0x200013c4
 800b150:	200013b8 	.word	0x200013b8
 800b154:	200012b4 	.word	0x200012b4
 800b158:	200012b0 	.word	0x200012b0

0800b15c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b15c:	b580      	push	{r7, lr}
 800b15e:	b084      	sub	sp, #16
 800b160:	af00      	add	r7, sp, #0
 800b162:	6078      	str	r0, [r7, #4]
 800b164:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d10a      	bne.n	800b182 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b16c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b170:	f383 8811 	msr	BASEPRI, r3
 800b174:	f3bf 8f6f 	isb	sy
 800b178:	f3bf 8f4f 	dsb	sy
 800b17c:	60fb      	str	r3, [r7, #12]
}
 800b17e:	bf00      	nop
 800b180:	e7fe      	b.n	800b180 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b182:	4b07      	ldr	r3, [pc, #28]	; (800b1a0 <vTaskPlaceOnEventList+0x44>)
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	3318      	adds	r3, #24
 800b188:	4619      	mov	r1, r3
 800b18a:	6878      	ldr	r0, [r7, #4]
 800b18c:	f7fe fc0f 	bl	80099ae <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b190:	2101      	movs	r1, #1
 800b192:	6838      	ldr	r0, [r7, #0]
 800b194:	f000 fc40 	bl	800ba18 <prvAddCurrentTaskToDelayedList>
}
 800b198:	bf00      	nop
 800b19a:	3710      	adds	r7, #16
 800b19c:	46bd      	mov	sp, r7
 800b19e:	bd80      	pop	{r7, pc}
 800b1a0:	200012b0 	.word	0x200012b0

0800b1a4 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 800b1a4:	b580      	push	{r7, lr}
 800b1a6:	b086      	sub	sp, #24
 800b1a8:	af00      	add	r7, sp, #0
 800b1aa:	60f8      	str	r0, [r7, #12]
 800b1ac:	60b9      	str	r1, [r7, #8]
 800b1ae:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d10a      	bne.n	800b1cc <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 800b1b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1ba:	f383 8811 	msr	BASEPRI, r3
 800b1be:	f3bf 8f6f 	isb	sy
 800b1c2:	f3bf 8f4f 	dsb	sy
 800b1c6:	617b      	str	r3, [r7, #20]
}
 800b1c8:	bf00      	nop
 800b1ca:	e7fe      	b.n	800b1ca <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 800b1cc:	4b11      	ldr	r3, [pc, #68]	; (800b214 <vTaskPlaceOnUnorderedEventList+0x70>)
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d10a      	bne.n	800b1ea <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 800b1d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1d8:	f383 8811 	msr	BASEPRI, r3
 800b1dc:	f3bf 8f6f 	isb	sy
 800b1e0:	f3bf 8f4f 	dsb	sy
 800b1e4:	613b      	str	r3, [r7, #16]
}
 800b1e6:	bf00      	nop
 800b1e8:	e7fe      	b.n	800b1e8 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800b1ea:	4b0b      	ldr	r3, [pc, #44]	; (800b218 <vTaskPlaceOnUnorderedEventList+0x74>)
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	68ba      	ldr	r2, [r7, #8]
 800b1f0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800b1f4:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b1f6:	4b08      	ldr	r3, [pc, #32]	; (800b218 <vTaskPlaceOnUnorderedEventList+0x74>)
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	3318      	adds	r3, #24
 800b1fc:	4619      	mov	r1, r3
 800b1fe:	68f8      	ldr	r0, [r7, #12]
 800b200:	f7fe fbb1 	bl	8009966 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b204:	2101      	movs	r1, #1
 800b206:	6878      	ldr	r0, [r7, #4]
 800b208:	f000 fc06 	bl	800ba18 <prvAddCurrentTaskToDelayedList>
}
 800b20c:	bf00      	nop
 800b20e:	3718      	adds	r7, #24
 800b210:	46bd      	mov	sp, r7
 800b212:	bd80      	pop	{r7, pc}
 800b214:	200013d8 	.word	0x200013d8
 800b218:	200012b0 	.word	0x200012b0

0800b21c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b21c:	b580      	push	{r7, lr}
 800b21e:	b086      	sub	sp, #24
 800b220:	af00      	add	r7, sp, #0
 800b222:	60f8      	str	r0, [r7, #12]
 800b224:	60b9      	str	r1, [r7, #8]
 800b226:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d10a      	bne.n	800b244 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800b22e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b232:	f383 8811 	msr	BASEPRI, r3
 800b236:	f3bf 8f6f 	isb	sy
 800b23a:	f3bf 8f4f 	dsb	sy
 800b23e:	617b      	str	r3, [r7, #20]
}
 800b240:	bf00      	nop
 800b242:	e7fe      	b.n	800b242 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b244:	4b0a      	ldr	r3, [pc, #40]	; (800b270 <vTaskPlaceOnEventListRestricted+0x54>)
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	3318      	adds	r3, #24
 800b24a:	4619      	mov	r1, r3
 800b24c:	68f8      	ldr	r0, [r7, #12]
 800b24e:	f7fe fb8a 	bl	8009966 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	2b00      	cmp	r3, #0
 800b256:	d002      	beq.n	800b25e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800b258:	f04f 33ff 	mov.w	r3, #4294967295
 800b25c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b25e:	6879      	ldr	r1, [r7, #4]
 800b260:	68b8      	ldr	r0, [r7, #8]
 800b262:	f000 fbd9 	bl	800ba18 <prvAddCurrentTaskToDelayedList>
	}
 800b266:	bf00      	nop
 800b268:	3718      	adds	r7, #24
 800b26a:	46bd      	mov	sp, r7
 800b26c:	bd80      	pop	{r7, pc}
 800b26e:	bf00      	nop
 800b270:	200012b0 	.word	0x200012b0

0800b274 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b274:	b580      	push	{r7, lr}
 800b276:	b086      	sub	sp, #24
 800b278:	af00      	add	r7, sp, #0
 800b27a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	68db      	ldr	r3, [r3, #12]
 800b280:	68db      	ldr	r3, [r3, #12]
 800b282:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b284:	693b      	ldr	r3, [r7, #16]
 800b286:	2b00      	cmp	r3, #0
 800b288:	d10a      	bne.n	800b2a0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b28a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b28e:	f383 8811 	msr	BASEPRI, r3
 800b292:	f3bf 8f6f 	isb	sy
 800b296:	f3bf 8f4f 	dsb	sy
 800b29a:	60fb      	str	r3, [r7, #12]
}
 800b29c:	bf00      	nop
 800b29e:	e7fe      	b.n	800b29e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b2a0:	693b      	ldr	r3, [r7, #16]
 800b2a2:	3318      	adds	r3, #24
 800b2a4:	4618      	mov	r0, r3
 800b2a6:	f7fe fbbb 	bl	8009a20 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b2aa:	4b1d      	ldr	r3, [pc, #116]	; (800b320 <xTaskRemoveFromEventList+0xac>)
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d11c      	bne.n	800b2ec <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b2b2:	693b      	ldr	r3, [r7, #16]
 800b2b4:	3304      	adds	r3, #4
 800b2b6:	4618      	mov	r0, r3
 800b2b8:	f7fe fbb2 	bl	8009a20 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b2bc:	693b      	ldr	r3, [r7, #16]
 800b2be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2c0:	2201      	movs	r2, #1
 800b2c2:	409a      	lsls	r2, r3
 800b2c4:	4b17      	ldr	r3, [pc, #92]	; (800b324 <xTaskRemoveFromEventList+0xb0>)
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	4313      	orrs	r3, r2
 800b2ca:	4a16      	ldr	r2, [pc, #88]	; (800b324 <xTaskRemoveFromEventList+0xb0>)
 800b2cc:	6013      	str	r3, [r2, #0]
 800b2ce:	693b      	ldr	r3, [r7, #16]
 800b2d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2d2:	4613      	mov	r3, r2
 800b2d4:	009b      	lsls	r3, r3, #2
 800b2d6:	4413      	add	r3, r2
 800b2d8:	009b      	lsls	r3, r3, #2
 800b2da:	4a13      	ldr	r2, [pc, #76]	; (800b328 <xTaskRemoveFromEventList+0xb4>)
 800b2dc:	441a      	add	r2, r3
 800b2de:	693b      	ldr	r3, [r7, #16]
 800b2e0:	3304      	adds	r3, #4
 800b2e2:	4619      	mov	r1, r3
 800b2e4:	4610      	mov	r0, r2
 800b2e6:	f7fe fb3e 	bl	8009966 <vListInsertEnd>
 800b2ea:	e005      	b.n	800b2f8 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b2ec:	693b      	ldr	r3, [r7, #16]
 800b2ee:	3318      	adds	r3, #24
 800b2f0:	4619      	mov	r1, r3
 800b2f2:	480e      	ldr	r0, [pc, #56]	; (800b32c <xTaskRemoveFromEventList+0xb8>)
 800b2f4:	f7fe fb37 	bl	8009966 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b2f8:	693b      	ldr	r3, [r7, #16]
 800b2fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2fc:	4b0c      	ldr	r3, [pc, #48]	; (800b330 <xTaskRemoveFromEventList+0xbc>)
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b302:	429a      	cmp	r2, r3
 800b304:	d905      	bls.n	800b312 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b306:	2301      	movs	r3, #1
 800b308:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b30a:	4b0a      	ldr	r3, [pc, #40]	; (800b334 <xTaskRemoveFromEventList+0xc0>)
 800b30c:	2201      	movs	r2, #1
 800b30e:	601a      	str	r2, [r3, #0]
 800b310:	e001      	b.n	800b316 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800b312:	2300      	movs	r3, #0
 800b314:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b316:	697b      	ldr	r3, [r7, #20]
}
 800b318:	4618      	mov	r0, r3
 800b31a:	3718      	adds	r7, #24
 800b31c:	46bd      	mov	sp, r7
 800b31e:	bd80      	pop	{r7, pc}
 800b320:	200013d8 	.word	0x200013d8
 800b324:	200013b8 	.word	0x200013b8
 800b328:	200012b4 	.word	0x200012b4
 800b32c:	20001370 	.word	0x20001370
 800b330:	200012b0 	.word	0x200012b0
 800b334:	200013c4 	.word	0x200013c4

0800b338 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 800b338:	b580      	push	{r7, lr}
 800b33a:	b086      	sub	sp, #24
 800b33c:	af00      	add	r7, sp, #0
 800b33e:	6078      	str	r0, [r7, #4]
 800b340:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800b342:	4b29      	ldr	r3, [pc, #164]	; (800b3e8 <vTaskRemoveFromUnorderedEventList+0xb0>)
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	2b00      	cmp	r3, #0
 800b348:	d10a      	bne.n	800b360 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 800b34a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b34e:	f383 8811 	msr	BASEPRI, r3
 800b352:	f3bf 8f6f 	isb	sy
 800b356:	f3bf 8f4f 	dsb	sy
 800b35a:	613b      	str	r3, [r7, #16]
}
 800b35c:	bf00      	nop
 800b35e:	e7fe      	b.n	800b35e <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800b360:	683b      	ldr	r3, [r7, #0]
 800b362:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	68db      	ldr	r3, [r3, #12]
 800b36e:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 800b370:	697b      	ldr	r3, [r7, #20]
 800b372:	2b00      	cmp	r3, #0
 800b374:	d10a      	bne.n	800b38c <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 800b376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b37a:	f383 8811 	msr	BASEPRI, r3
 800b37e:	f3bf 8f6f 	isb	sy
 800b382:	f3bf 8f4f 	dsb	sy
 800b386:	60fb      	str	r3, [r7, #12]
}
 800b388:	bf00      	nop
 800b38a:	e7fe      	b.n	800b38a <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 800b38c:	6878      	ldr	r0, [r7, #4]
 800b38e:	f7fe fb47 	bl	8009a20 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b392:	697b      	ldr	r3, [r7, #20]
 800b394:	3304      	adds	r3, #4
 800b396:	4618      	mov	r0, r3
 800b398:	f7fe fb42 	bl	8009a20 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800b39c:	697b      	ldr	r3, [r7, #20]
 800b39e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3a0:	2201      	movs	r2, #1
 800b3a2:	409a      	lsls	r2, r3
 800b3a4:	4b11      	ldr	r3, [pc, #68]	; (800b3ec <vTaskRemoveFromUnorderedEventList+0xb4>)
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	4313      	orrs	r3, r2
 800b3aa:	4a10      	ldr	r2, [pc, #64]	; (800b3ec <vTaskRemoveFromUnorderedEventList+0xb4>)
 800b3ac:	6013      	str	r3, [r2, #0]
 800b3ae:	697b      	ldr	r3, [r7, #20]
 800b3b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3b2:	4613      	mov	r3, r2
 800b3b4:	009b      	lsls	r3, r3, #2
 800b3b6:	4413      	add	r3, r2
 800b3b8:	009b      	lsls	r3, r3, #2
 800b3ba:	4a0d      	ldr	r2, [pc, #52]	; (800b3f0 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800b3bc:	441a      	add	r2, r3
 800b3be:	697b      	ldr	r3, [r7, #20]
 800b3c0:	3304      	adds	r3, #4
 800b3c2:	4619      	mov	r1, r3
 800b3c4:	4610      	mov	r0, r2
 800b3c6:	f7fe face 	bl	8009966 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b3ca:	697b      	ldr	r3, [r7, #20]
 800b3cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3ce:	4b09      	ldr	r3, [pc, #36]	; (800b3f4 <vTaskRemoveFromUnorderedEventList+0xbc>)
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3d4:	429a      	cmp	r2, r3
 800b3d6:	d902      	bls.n	800b3de <vTaskRemoveFromUnorderedEventList+0xa6>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 800b3d8:	4b07      	ldr	r3, [pc, #28]	; (800b3f8 <vTaskRemoveFromUnorderedEventList+0xc0>)
 800b3da:	2201      	movs	r2, #1
 800b3dc:	601a      	str	r2, [r3, #0]
	}
}
 800b3de:	bf00      	nop
 800b3e0:	3718      	adds	r7, #24
 800b3e2:	46bd      	mov	sp, r7
 800b3e4:	bd80      	pop	{r7, pc}
 800b3e6:	bf00      	nop
 800b3e8:	200013d8 	.word	0x200013d8
 800b3ec:	200013b8 	.word	0x200013b8
 800b3f0:	200012b4 	.word	0x200012b4
 800b3f4:	200012b0 	.word	0x200012b0
 800b3f8:	200013c4 	.word	0x200013c4

0800b3fc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b3fc:	b480      	push	{r7}
 800b3fe:	b083      	sub	sp, #12
 800b400:	af00      	add	r7, sp, #0
 800b402:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b404:	4b06      	ldr	r3, [pc, #24]	; (800b420 <vTaskInternalSetTimeOutState+0x24>)
 800b406:	681a      	ldr	r2, [r3, #0]
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b40c:	4b05      	ldr	r3, [pc, #20]	; (800b424 <vTaskInternalSetTimeOutState+0x28>)
 800b40e:	681a      	ldr	r2, [r3, #0]
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	605a      	str	r2, [r3, #4]
}
 800b414:	bf00      	nop
 800b416:	370c      	adds	r7, #12
 800b418:	46bd      	mov	sp, r7
 800b41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b41e:	4770      	bx	lr
 800b420:	200013c8 	.word	0x200013c8
 800b424:	200013b4 	.word	0x200013b4

0800b428 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b428:	b580      	push	{r7, lr}
 800b42a:	b088      	sub	sp, #32
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	6078      	str	r0, [r7, #4]
 800b430:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	2b00      	cmp	r3, #0
 800b436:	d10a      	bne.n	800b44e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b43c:	f383 8811 	msr	BASEPRI, r3
 800b440:	f3bf 8f6f 	isb	sy
 800b444:	f3bf 8f4f 	dsb	sy
 800b448:	613b      	str	r3, [r7, #16]
}
 800b44a:	bf00      	nop
 800b44c:	e7fe      	b.n	800b44c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b44e:	683b      	ldr	r3, [r7, #0]
 800b450:	2b00      	cmp	r3, #0
 800b452:	d10a      	bne.n	800b46a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b454:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b458:	f383 8811 	msr	BASEPRI, r3
 800b45c:	f3bf 8f6f 	isb	sy
 800b460:	f3bf 8f4f 	dsb	sy
 800b464:	60fb      	str	r3, [r7, #12]
}
 800b466:	bf00      	nop
 800b468:	e7fe      	b.n	800b468 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b46a:	f000 ffb3 	bl	800c3d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b46e:	4b1d      	ldr	r3, [pc, #116]	; (800b4e4 <xTaskCheckForTimeOut+0xbc>)
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	685b      	ldr	r3, [r3, #4]
 800b478:	69ba      	ldr	r2, [r7, #24]
 800b47a:	1ad3      	subs	r3, r2, r3
 800b47c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b47e:	683b      	ldr	r3, [r7, #0]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b486:	d102      	bne.n	800b48e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b488:	2300      	movs	r3, #0
 800b48a:	61fb      	str	r3, [r7, #28]
 800b48c:	e023      	b.n	800b4d6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	681a      	ldr	r2, [r3, #0]
 800b492:	4b15      	ldr	r3, [pc, #84]	; (800b4e8 <xTaskCheckForTimeOut+0xc0>)
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	429a      	cmp	r2, r3
 800b498:	d007      	beq.n	800b4aa <xTaskCheckForTimeOut+0x82>
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	685b      	ldr	r3, [r3, #4]
 800b49e:	69ba      	ldr	r2, [r7, #24]
 800b4a0:	429a      	cmp	r2, r3
 800b4a2:	d302      	bcc.n	800b4aa <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b4a4:	2301      	movs	r3, #1
 800b4a6:	61fb      	str	r3, [r7, #28]
 800b4a8:	e015      	b.n	800b4d6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b4aa:	683b      	ldr	r3, [r7, #0]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	697a      	ldr	r2, [r7, #20]
 800b4b0:	429a      	cmp	r2, r3
 800b4b2:	d20b      	bcs.n	800b4cc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b4b4:	683b      	ldr	r3, [r7, #0]
 800b4b6:	681a      	ldr	r2, [r3, #0]
 800b4b8:	697b      	ldr	r3, [r7, #20]
 800b4ba:	1ad2      	subs	r2, r2, r3
 800b4bc:	683b      	ldr	r3, [r7, #0]
 800b4be:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b4c0:	6878      	ldr	r0, [r7, #4]
 800b4c2:	f7ff ff9b 	bl	800b3fc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b4c6:	2300      	movs	r3, #0
 800b4c8:	61fb      	str	r3, [r7, #28]
 800b4ca:	e004      	b.n	800b4d6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b4cc:	683b      	ldr	r3, [r7, #0]
 800b4ce:	2200      	movs	r2, #0
 800b4d0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b4d2:	2301      	movs	r3, #1
 800b4d4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b4d6:	f000 ffad 	bl	800c434 <vPortExitCritical>

	return xReturn;
 800b4da:	69fb      	ldr	r3, [r7, #28]
}
 800b4dc:	4618      	mov	r0, r3
 800b4de:	3720      	adds	r7, #32
 800b4e0:	46bd      	mov	sp, r7
 800b4e2:	bd80      	pop	{r7, pc}
 800b4e4:	200013b4 	.word	0x200013b4
 800b4e8:	200013c8 	.word	0x200013c8

0800b4ec <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b4ec:	b480      	push	{r7}
 800b4ee:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b4f0:	4b03      	ldr	r3, [pc, #12]	; (800b500 <vTaskMissedYield+0x14>)
 800b4f2:	2201      	movs	r2, #1
 800b4f4:	601a      	str	r2, [r3, #0]
}
 800b4f6:	bf00      	nop
 800b4f8:	46bd      	mov	sp, r7
 800b4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4fe:	4770      	bx	lr
 800b500:	200013c4 	.word	0x200013c4

0800b504 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b504:	b580      	push	{r7, lr}
 800b506:	b082      	sub	sp, #8
 800b508:	af00      	add	r7, sp, #0
 800b50a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b50c:	f000 f852 	bl	800b5b4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b510:	4b06      	ldr	r3, [pc, #24]	; (800b52c <prvIdleTask+0x28>)
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	2b01      	cmp	r3, #1
 800b516:	d9f9      	bls.n	800b50c <prvIdleTask+0x8>
			{
				taskYIELD();
 800b518:	4b05      	ldr	r3, [pc, #20]	; (800b530 <prvIdleTask+0x2c>)
 800b51a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b51e:	601a      	str	r2, [r3, #0]
 800b520:	f3bf 8f4f 	dsb	sy
 800b524:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b528:	e7f0      	b.n	800b50c <prvIdleTask+0x8>
 800b52a:	bf00      	nop
 800b52c:	200012b4 	.word	0x200012b4
 800b530:	e000ed04 	.word	0xe000ed04

0800b534 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b534:	b580      	push	{r7, lr}
 800b536:	b082      	sub	sp, #8
 800b538:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b53a:	2300      	movs	r3, #0
 800b53c:	607b      	str	r3, [r7, #4]
 800b53e:	e00c      	b.n	800b55a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b540:	687a      	ldr	r2, [r7, #4]
 800b542:	4613      	mov	r3, r2
 800b544:	009b      	lsls	r3, r3, #2
 800b546:	4413      	add	r3, r2
 800b548:	009b      	lsls	r3, r3, #2
 800b54a:	4a12      	ldr	r2, [pc, #72]	; (800b594 <prvInitialiseTaskLists+0x60>)
 800b54c:	4413      	add	r3, r2
 800b54e:	4618      	mov	r0, r3
 800b550:	f7fe f9dc 	bl	800990c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	3301      	adds	r3, #1
 800b558:	607b      	str	r3, [r7, #4]
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	2b06      	cmp	r3, #6
 800b55e:	d9ef      	bls.n	800b540 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b560:	480d      	ldr	r0, [pc, #52]	; (800b598 <prvInitialiseTaskLists+0x64>)
 800b562:	f7fe f9d3 	bl	800990c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b566:	480d      	ldr	r0, [pc, #52]	; (800b59c <prvInitialiseTaskLists+0x68>)
 800b568:	f7fe f9d0 	bl	800990c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b56c:	480c      	ldr	r0, [pc, #48]	; (800b5a0 <prvInitialiseTaskLists+0x6c>)
 800b56e:	f7fe f9cd 	bl	800990c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b572:	480c      	ldr	r0, [pc, #48]	; (800b5a4 <prvInitialiseTaskLists+0x70>)
 800b574:	f7fe f9ca 	bl	800990c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b578:	480b      	ldr	r0, [pc, #44]	; (800b5a8 <prvInitialiseTaskLists+0x74>)
 800b57a:	f7fe f9c7 	bl	800990c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b57e:	4b0b      	ldr	r3, [pc, #44]	; (800b5ac <prvInitialiseTaskLists+0x78>)
 800b580:	4a05      	ldr	r2, [pc, #20]	; (800b598 <prvInitialiseTaskLists+0x64>)
 800b582:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b584:	4b0a      	ldr	r3, [pc, #40]	; (800b5b0 <prvInitialiseTaskLists+0x7c>)
 800b586:	4a05      	ldr	r2, [pc, #20]	; (800b59c <prvInitialiseTaskLists+0x68>)
 800b588:	601a      	str	r2, [r3, #0]
}
 800b58a:	bf00      	nop
 800b58c:	3708      	adds	r7, #8
 800b58e:	46bd      	mov	sp, r7
 800b590:	bd80      	pop	{r7, pc}
 800b592:	bf00      	nop
 800b594:	200012b4 	.word	0x200012b4
 800b598:	20001340 	.word	0x20001340
 800b59c:	20001354 	.word	0x20001354
 800b5a0:	20001370 	.word	0x20001370
 800b5a4:	20001384 	.word	0x20001384
 800b5a8:	2000139c 	.word	0x2000139c
 800b5ac:	20001368 	.word	0x20001368
 800b5b0:	2000136c 	.word	0x2000136c

0800b5b4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b5b4:	b580      	push	{r7, lr}
 800b5b6:	b082      	sub	sp, #8
 800b5b8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b5ba:	e019      	b.n	800b5f0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b5bc:	f000 ff0a 	bl	800c3d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b5c0:	4b10      	ldr	r3, [pc, #64]	; (800b604 <prvCheckTasksWaitingTermination+0x50>)
 800b5c2:	68db      	ldr	r3, [r3, #12]
 800b5c4:	68db      	ldr	r3, [r3, #12]
 800b5c6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	3304      	adds	r3, #4
 800b5cc:	4618      	mov	r0, r3
 800b5ce:	f7fe fa27 	bl	8009a20 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b5d2:	4b0d      	ldr	r3, [pc, #52]	; (800b608 <prvCheckTasksWaitingTermination+0x54>)
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	3b01      	subs	r3, #1
 800b5d8:	4a0b      	ldr	r2, [pc, #44]	; (800b608 <prvCheckTasksWaitingTermination+0x54>)
 800b5da:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b5dc:	4b0b      	ldr	r3, [pc, #44]	; (800b60c <prvCheckTasksWaitingTermination+0x58>)
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	3b01      	subs	r3, #1
 800b5e2:	4a0a      	ldr	r2, [pc, #40]	; (800b60c <prvCheckTasksWaitingTermination+0x58>)
 800b5e4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b5e6:	f000 ff25 	bl	800c434 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b5ea:	6878      	ldr	r0, [r7, #4]
 800b5ec:	f000 f810 	bl	800b610 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b5f0:	4b06      	ldr	r3, [pc, #24]	; (800b60c <prvCheckTasksWaitingTermination+0x58>)
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d1e1      	bne.n	800b5bc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b5f8:	bf00      	nop
 800b5fa:	bf00      	nop
 800b5fc:	3708      	adds	r7, #8
 800b5fe:	46bd      	mov	sp, r7
 800b600:	bd80      	pop	{r7, pc}
 800b602:	bf00      	nop
 800b604:	20001384 	.word	0x20001384
 800b608:	200013b0 	.word	0x200013b0
 800b60c:	20001398 	.word	0x20001398

0800b610 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b610:	b580      	push	{r7, lr}
 800b612:	b082      	sub	sp, #8
 800b614:	af00      	add	r7, sp, #0
 800b616:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b61c:	4618      	mov	r0, r3
 800b61e:	f001 f8c7 	bl	800c7b0 <vPortFree>
			vPortFree( pxTCB );
 800b622:	6878      	ldr	r0, [r7, #4]
 800b624:	f001 f8c4 	bl	800c7b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b628:	bf00      	nop
 800b62a:	3708      	adds	r7, #8
 800b62c:	46bd      	mov	sp, r7
 800b62e:	bd80      	pop	{r7, pc}

0800b630 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b630:	b480      	push	{r7}
 800b632:	b083      	sub	sp, #12
 800b634:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b636:	4b0c      	ldr	r3, [pc, #48]	; (800b668 <prvResetNextTaskUnblockTime+0x38>)
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d104      	bne.n	800b64a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b640:	4b0a      	ldr	r3, [pc, #40]	; (800b66c <prvResetNextTaskUnblockTime+0x3c>)
 800b642:	f04f 32ff 	mov.w	r2, #4294967295
 800b646:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b648:	e008      	b.n	800b65c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b64a:	4b07      	ldr	r3, [pc, #28]	; (800b668 <prvResetNextTaskUnblockTime+0x38>)
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	68db      	ldr	r3, [r3, #12]
 800b650:	68db      	ldr	r3, [r3, #12]
 800b652:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	685b      	ldr	r3, [r3, #4]
 800b658:	4a04      	ldr	r2, [pc, #16]	; (800b66c <prvResetNextTaskUnblockTime+0x3c>)
 800b65a:	6013      	str	r3, [r2, #0]
}
 800b65c:	bf00      	nop
 800b65e:	370c      	adds	r7, #12
 800b660:	46bd      	mov	sp, r7
 800b662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b666:	4770      	bx	lr
 800b668:	20001368 	.word	0x20001368
 800b66c:	200013d0 	.word	0x200013d0

0800b670 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b670:	b480      	push	{r7}
 800b672:	b083      	sub	sp, #12
 800b674:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b676:	4b0b      	ldr	r3, [pc, #44]	; (800b6a4 <xTaskGetSchedulerState+0x34>)
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d102      	bne.n	800b684 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b67e:	2301      	movs	r3, #1
 800b680:	607b      	str	r3, [r7, #4]
 800b682:	e008      	b.n	800b696 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b684:	4b08      	ldr	r3, [pc, #32]	; (800b6a8 <xTaskGetSchedulerState+0x38>)
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d102      	bne.n	800b692 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b68c:	2302      	movs	r3, #2
 800b68e:	607b      	str	r3, [r7, #4]
 800b690:	e001      	b.n	800b696 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b692:	2300      	movs	r3, #0
 800b694:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b696:	687b      	ldr	r3, [r7, #4]
	}
 800b698:	4618      	mov	r0, r3
 800b69a:	370c      	adds	r7, #12
 800b69c:	46bd      	mov	sp, r7
 800b69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a2:	4770      	bx	lr
 800b6a4:	200013bc 	.word	0x200013bc
 800b6a8:	200013d8 	.word	0x200013d8

0800b6ac <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800b6ac:	b580      	push	{r7, lr}
 800b6ae:	b084      	sub	sp, #16
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800b6b8:	2300      	movs	r3, #0
 800b6ba:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d05e      	beq.n	800b780 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800b6c2:	68bb      	ldr	r3, [r7, #8]
 800b6c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6c6:	4b31      	ldr	r3, [pc, #196]	; (800b78c <xTaskPriorityInherit+0xe0>)
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6cc:	429a      	cmp	r2, r3
 800b6ce:	d24e      	bcs.n	800b76e <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b6d0:	68bb      	ldr	r3, [r7, #8]
 800b6d2:	699b      	ldr	r3, [r3, #24]
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	db06      	blt.n	800b6e6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b6d8:	4b2c      	ldr	r3, [pc, #176]	; (800b78c <xTaskPriorityInherit+0xe0>)
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6de:	f1c3 0207 	rsb	r2, r3, #7
 800b6e2:	68bb      	ldr	r3, [r7, #8]
 800b6e4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800b6e6:	68bb      	ldr	r3, [r7, #8]
 800b6e8:	6959      	ldr	r1, [r3, #20]
 800b6ea:	68bb      	ldr	r3, [r7, #8]
 800b6ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6ee:	4613      	mov	r3, r2
 800b6f0:	009b      	lsls	r3, r3, #2
 800b6f2:	4413      	add	r3, r2
 800b6f4:	009b      	lsls	r3, r3, #2
 800b6f6:	4a26      	ldr	r2, [pc, #152]	; (800b790 <xTaskPriorityInherit+0xe4>)
 800b6f8:	4413      	add	r3, r2
 800b6fa:	4299      	cmp	r1, r3
 800b6fc:	d12f      	bne.n	800b75e <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b6fe:	68bb      	ldr	r3, [r7, #8]
 800b700:	3304      	adds	r3, #4
 800b702:	4618      	mov	r0, r3
 800b704:	f7fe f98c 	bl	8009a20 <uxListRemove>
 800b708:	4603      	mov	r3, r0
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d10a      	bne.n	800b724 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800b70e:	68bb      	ldr	r3, [r7, #8]
 800b710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b712:	2201      	movs	r2, #1
 800b714:	fa02 f303 	lsl.w	r3, r2, r3
 800b718:	43da      	mvns	r2, r3
 800b71a:	4b1e      	ldr	r3, [pc, #120]	; (800b794 <xTaskPriorityInherit+0xe8>)
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	4013      	ands	r3, r2
 800b720:	4a1c      	ldr	r2, [pc, #112]	; (800b794 <xTaskPriorityInherit+0xe8>)
 800b722:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b724:	4b19      	ldr	r3, [pc, #100]	; (800b78c <xTaskPriorityInherit+0xe0>)
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b72a:	68bb      	ldr	r3, [r7, #8]
 800b72c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800b72e:	68bb      	ldr	r3, [r7, #8]
 800b730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b732:	2201      	movs	r2, #1
 800b734:	409a      	lsls	r2, r3
 800b736:	4b17      	ldr	r3, [pc, #92]	; (800b794 <xTaskPriorityInherit+0xe8>)
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	4313      	orrs	r3, r2
 800b73c:	4a15      	ldr	r2, [pc, #84]	; (800b794 <xTaskPriorityInherit+0xe8>)
 800b73e:	6013      	str	r3, [r2, #0]
 800b740:	68bb      	ldr	r3, [r7, #8]
 800b742:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b744:	4613      	mov	r3, r2
 800b746:	009b      	lsls	r3, r3, #2
 800b748:	4413      	add	r3, r2
 800b74a:	009b      	lsls	r3, r3, #2
 800b74c:	4a10      	ldr	r2, [pc, #64]	; (800b790 <xTaskPriorityInherit+0xe4>)
 800b74e:	441a      	add	r2, r3
 800b750:	68bb      	ldr	r3, [r7, #8]
 800b752:	3304      	adds	r3, #4
 800b754:	4619      	mov	r1, r3
 800b756:	4610      	mov	r0, r2
 800b758:	f7fe f905 	bl	8009966 <vListInsertEnd>
 800b75c:	e004      	b.n	800b768 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b75e:	4b0b      	ldr	r3, [pc, #44]	; (800b78c <xTaskPriorityInherit+0xe0>)
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b764:	68bb      	ldr	r3, [r7, #8]
 800b766:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800b768:	2301      	movs	r3, #1
 800b76a:	60fb      	str	r3, [r7, #12]
 800b76c:	e008      	b.n	800b780 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800b76e:	68bb      	ldr	r3, [r7, #8]
 800b770:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b772:	4b06      	ldr	r3, [pc, #24]	; (800b78c <xTaskPriorityInherit+0xe0>)
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b778:	429a      	cmp	r2, r3
 800b77a:	d201      	bcs.n	800b780 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800b77c:	2301      	movs	r3, #1
 800b77e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b780:	68fb      	ldr	r3, [r7, #12]
	}
 800b782:	4618      	mov	r0, r3
 800b784:	3710      	adds	r7, #16
 800b786:	46bd      	mov	sp, r7
 800b788:	bd80      	pop	{r7, pc}
 800b78a:	bf00      	nop
 800b78c:	200012b0 	.word	0x200012b0
 800b790:	200012b4 	.word	0x200012b4
 800b794:	200013b8 	.word	0x200013b8

0800b798 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b798:	b580      	push	{r7, lr}
 800b79a:	b086      	sub	sp, #24
 800b79c:	af00      	add	r7, sp, #0
 800b79e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b7a4:	2300      	movs	r3, #0
 800b7a6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d06e      	beq.n	800b88c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b7ae:	4b3a      	ldr	r3, [pc, #232]	; (800b898 <xTaskPriorityDisinherit+0x100>)
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	693a      	ldr	r2, [r7, #16]
 800b7b4:	429a      	cmp	r2, r3
 800b7b6:	d00a      	beq.n	800b7ce <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b7b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7bc:	f383 8811 	msr	BASEPRI, r3
 800b7c0:	f3bf 8f6f 	isb	sy
 800b7c4:	f3bf 8f4f 	dsb	sy
 800b7c8:	60fb      	str	r3, [r7, #12]
}
 800b7ca:	bf00      	nop
 800b7cc:	e7fe      	b.n	800b7cc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b7ce:	693b      	ldr	r3, [r7, #16]
 800b7d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d10a      	bne.n	800b7ec <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b7d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7da:	f383 8811 	msr	BASEPRI, r3
 800b7de:	f3bf 8f6f 	isb	sy
 800b7e2:	f3bf 8f4f 	dsb	sy
 800b7e6:	60bb      	str	r3, [r7, #8]
}
 800b7e8:	bf00      	nop
 800b7ea:	e7fe      	b.n	800b7ea <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b7ec:	693b      	ldr	r3, [r7, #16]
 800b7ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b7f0:	1e5a      	subs	r2, r3, #1
 800b7f2:	693b      	ldr	r3, [r7, #16]
 800b7f4:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b7f6:	693b      	ldr	r3, [r7, #16]
 800b7f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7fa:	693b      	ldr	r3, [r7, #16]
 800b7fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b7fe:	429a      	cmp	r2, r3
 800b800:	d044      	beq.n	800b88c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b802:	693b      	ldr	r3, [r7, #16]
 800b804:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b806:	2b00      	cmp	r3, #0
 800b808:	d140      	bne.n	800b88c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b80a:	693b      	ldr	r3, [r7, #16]
 800b80c:	3304      	adds	r3, #4
 800b80e:	4618      	mov	r0, r3
 800b810:	f7fe f906 	bl	8009a20 <uxListRemove>
 800b814:	4603      	mov	r3, r0
 800b816:	2b00      	cmp	r3, #0
 800b818:	d115      	bne.n	800b846 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800b81a:	693b      	ldr	r3, [r7, #16]
 800b81c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b81e:	491f      	ldr	r1, [pc, #124]	; (800b89c <xTaskPriorityDisinherit+0x104>)
 800b820:	4613      	mov	r3, r2
 800b822:	009b      	lsls	r3, r3, #2
 800b824:	4413      	add	r3, r2
 800b826:	009b      	lsls	r3, r3, #2
 800b828:	440b      	add	r3, r1
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d10a      	bne.n	800b846 <xTaskPriorityDisinherit+0xae>
 800b830:	693b      	ldr	r3, [r7, #16]
 800b832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b834:	2201      	movs	r2, #1
 800b836:	fa02 f303 	lsl.w	r3, r2, r3
 800b83a:	43da      	mvns	r2, r3
 800b83c:	4b18      	ldr	r3, [pc, #96]	; (800b8a0 <xTaskPriorityDisinherit+0x108>)
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	4013      	ands	r3, r2
 800b842:	4a17      	ldr	r2, [pc, #92]	; (800b8a0 <xTaskPriorityDisinherit+0x108>)
 800b844:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b846:	693b      	ldr	r3, [r7, #16]
 800b848:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b84a:	693b      	ldr	r3, [r7, #16]
 800b84c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b84e:	693b      	ldr	r3, [r7, #16]
 800b850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b852:	f1c3 0207 	rsb	r2, r3, #7
 800b856:	693b      	ldr	r3, [r7, #16]
 800b858:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b85a:	693b      	ldr	r3, [r7, #16]
 800b85c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b85e:	2201      	movs	r2, #1
 800b860:	409a      	lsls	r2, r3
 800b862:	4b0f      	ldr	r3, [pc, #60]	; (800b8a0 <xTaskPriorityDisinherit+0x108>)
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	4313      	orrs	r3, r2
 800b868:	4a0d      	ldr	r2, [pc, #52]	; (800b8a0 <xTaskPriorityDisinherit+0x108>)
 800b86a:	6013      	str	r3, [r2, #0]
 800b86c:	693b      	ldr	r3, [r7, #16]
 800b86e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b870:	4613      	mov	r3, r2
 800b872:	009b      	lsls	r3, r3, #2
 800b874:	4413      	add	r3, r2
 800b876:	009b      	lsls	r3, r3, #2
 800b878:	4a08      	ldr	r2, [pc, #32]	; (800b89c <xTaskPriorityDisinherit+0x104>)
 800b87a:	441a      	add	r2, r3
 800b87c:	693b      	ldr	r3, [r7, #16]
 800b87e:	3304      	adds	r3, #4
 800b880:	4619      	mov	r1, r3
 800b882:	4610      	mov	r0, r2
 800b884:	f7fe f86f 	bl	8009966 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b888:	2301      	movs	r3, #1
 800b88a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b88c:	697b      	ldr	r3, [r7, #20]
	}
 800b88e:	4618      	mov	r0, r3
 800b890:	3718      	adds	r7, #24
 800b892:	46bd      	mov	sp, r7
 800b894:	bd80      	pop	{r7, pc}
 800b896:	bf00      	nop
 800b898:	200012b0 	.word	0x200012b0
 800b89c:	200012b4 	.word	0x200012b4
 800b8a0:	200013b8 	.word	0x200013b8

0800b8a4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800b8a4:	b580      	push	{r7, lr}
 800b8a6:	b088      	sub	sp, #32
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	6078      	str	r0, [r7, #4]
 800b8ac:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800b8b2:	2301      	movs	r3, #1
 800b8b4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d077      	beq.n	800b9ac <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800b8bc:	69bb      	ldr	r3, [r7, #24]
 800b8be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d10a      	bne.n	800b8da <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800b8c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8c8:	f383 8811 	msr	BASEPRI, r3
 800b8cc:	f3bf 8f6f 	isb	sy
 800b8d0:	f3bf 8f4f 	dsb	sy
 800b8d4:	60fb      	str	r3, [r7, #12]
}
 800b8d6:	bf00      	nop
 800b8d8:	e7fe      	b.n	800b8d8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800b8da:	69bb      	ldr	r3, [r7, #24]
 800b8dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b8de:	683a      	ldr	r2, [r7, #0]
 800b8e0:	429a      	cmp	r2, r3
 800b8e2:	d902      	bls.n	800b8ea <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800b8e4:	683b      	ldr	r3, [r7, #0]
 800b8e6:	61fb      	str	r3, [r7, #28]
 800b8e8:	e002      	b.n	800b8f0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800b8ea:	69bb      	ldr	r3, [r7, #24]
 800b8ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b8ee:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800b8f0:	69bb      	ldr	r3, [r7, #24]
 800b8f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8f4:	69fa      	ldr	r2, [r7, #28]
 800b8f6:	429a      	cmp	r2, r3
 800b8f8:	d058      	beq.n	800b9ac <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800b8fa:	69bb      	ldr	r3, [r7, #24]
 800b8fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b8fe:	697a      	ldr	r2, [r7, #20]
 800b900:	429a      	cmp	r2, r3
 800b902:	d153      	bne.n	800b9ac <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800b904:	4b2b      	ldr	r3, [pc, #172]	; (800b9b4 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	69ba      	ldr	r2, [r7, #24]
 800b90a:	429a      	cmp	r2, r3
 800b90c:	d10a      	bne.n	800b924 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800b90e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b912:	f383 8811 	msr	BASEPRI, r3
 800b916:	f3bf 8f6f 	isb	sy
 800b91a:	f3bf 8f4f 	dsb	sy
 800b91e:	60bb      	str	r3, [r7, #8]
}
 800b920:	bf00      	nop
 800b922:	e7fe      	b.n	800b922 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800b924:	69bb      	ldr	r3, [r7, #24]
 800b926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b928:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800b92a:	69bb      	ldr	r3, [r7, #24]
 800b92c:	69fa      	ldr	r2, [r7, #28]
 800b92e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b930:	69bb      	ldr	r3, [r7, #24]
 800b932:	699b      	ldr	r3, [r3, #24]
 800b934:	2b00      	cmp	r3, #0
 800b936:	db04      	blt.n	800b942 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b938:	69fb      	ldr	r3, [r7, #28]
 800b93a:	f1c3 0207 	rsb	r2, r3, #7
 800b93e:	69bb      	ldr	r3, [r7, #24]
 800b940:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b942:	69bb      	ldr	r3, [r7, #24]
 800b944:	6959      	ldr	r1, [r3, #20]
 800b946:	693a      	ldr	r2, [r7, #16]
 800b948:	4613      	mov	r3, r2
 800b94a:	009b      	lsls	r3, r3, #2
 800b94c:	4413      	add	r3, r2
 800b94e:	009b      	lsls	r3, r3, #2
 800b950:	4a19      	ldr	r2, [pc, #100]	; (800b9b8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800b952:	4413      	add	r3, r2
 800b954:	4299      	cmp	r1, r3
 800b956:	d129      	bne.n	800b9ac <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b958:	69bb      	ldr	r3, [r7, #24]
 800b95a:	3304      	adds	r3, #4
 800b95c:	4618      	mov	r0, r3
 800b95e:	f7fe f85f 	bl	8009a20 <uxListRemove>
 800b962:	4603      	mov	r3, r0
 800b964:	2b00      	cmp	r3, #0
 800b966:	d10a      	bne.n	800b97e <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800b968:	69bb      	ldr	r3, [r7, #24]
 800b96a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b96c:	2201      	movs	r2, #1
 800b96e:	fa02 f303 	lsl.w	r3, r2, r3
 800b972:	43da      	mvns	r2, r3
 800b974:	4b11      	ldr	r3, [pc, #68]	; (800b9bc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	4013      	ands	r3, r2
 800b97a:	4a10      	ldr	r2, [pc, #64]	; (800b9bc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800b97c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800b97e:	69bb      	ldr	r3, [r7, #24]
 800b980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b982:	2201      	movs	r2, #1
 800b984:	409a      	lsls	r2, r3
 800b986:	4b0d      	ldr	r3, [pc, #52]	; (800b9bc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	4313      	orrs	r3, r2
 800b98c:	4a0b      	ldr	r2, [pc, #44]	; (800b9bc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800b98e:	6013      	str	r3, [r2, #0]
 800b990:	69bb      	ldr	r3, [r7, #24]
 800b992:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b994:	4613      	mov	r3, r2
 800b996:	009b      	lsls	r3, r3, #2
 800b998:	4413      	add	r3, r2
 800b99a:	009b      	lsls	r3, r3, #2
 800b99c:	4a06      	ldr	r2, [pc, #24]	; (800b9b8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800b99e:	441a      	add	r2, r3
 800b9a0:	69bb      	ldr	r3, [r7, #24]
 800b9a2:	3304      	adds	r3, #4
 800b9a4:	4619      	mov	r1, r3
 800b9a6:	4610      	mov	r0, r2
 800b9a8:	f7fd ffdd 	bl	8009966 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b9ac:	bf00      	nop
 800b9ae:	3720      	adds	r7, #32
 800b9b0:	46bd      	mov	sp, r7
 800b9b2:	bd80      	pop	{r7, pc}
 800b9b4:	200012b0 	.word	0x200012b0
 800b9b8:	200012b4 	.word	0x200012b4
 800b9bc:	200013b8 	.word	0x200013b8

0800b9c0 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 800b9c0:	b480      	push	{r7}
 800b9c2:	b083      	sub	sp, #12
 800b9c4:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800b9c6:	4b09      	ldr	r3, [pc, #36]	; (800b9ec <uxTaskResetEventItemValue+0x2c>)
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	699b      	ldr	r3, [r3, #24]
 800b9cc:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b9ce:	4b07      	ldr	r3, [pc, #28]	; (800b9ec <uxTaskResetEventItemValue+0x2c>)
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9d4:	4b05      	ldr	r3, [pc, #20]	; (800b9ec <uxTaskResetEventItemValue+0x2c>)
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	f1c2 0207 	rsb	r2, r2, #7
 800b9dc:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800b9de:	687b      	ldr	r3, [r7, #4]
}
 800b9e0:	4618      	mov	r0, r3
 800b9e2:	370c      	adds	r7, #12
 800b9e4:	46bd      	mov	sp, r7
 800b9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ea:	4770      	bx	lr
 800b9ec:	200012b0 	.word	0x200012b0

0800b9f0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800b9f0:	b480      	push	{r7}
 800b9f2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800b9f4:	4b07      	ldr	r3, [pc, #28]	; (800ba14 <pvTaskIncrementMutexHeldCount+0x24>)
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d004      	beq.n	800ba06 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800b9fc:	4b05      	ldr	r3, [pc, #20]	; (800ba14 <pvTaskIncrementMutexHeldCount+0x24>)
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ba02:	3201      	adds	r2, #1
 800ba04:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800ba06:	4b03      	ldr	r3, [pc, #12]	; (800ba14 <pvTaskIncrementMutexHeldCount+0x24>)
 800ba08:	681b      	ldr	r3, [r3, #0]
	}
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	46bd      	mov	sp, r7
 800ba0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba12:	4770      	bx	lr
 800ba14:	200012b0 	.word	0x200012b0

0800ba18 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ba18:	b580      	push	{r7, lr}
 800ba1a:	b084      	sub	sp, #16
 800ba1c:	af00      	add	r7, sp, #0
 800ba1e:	6078      	str	r0, [r7, #4]
 800ba20:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ba22:	4b29      	ldr	r3, [pc, #164]	; (800bac8 <prvAddCurrentTaskToDelayedList+0xb0>)
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ba28:	4b28      	ldr	r3, [pc, #160]	; (800bacc <prvAddCurrentTaskToDelayedList+0xb4>)
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	3304      	adds	r3, #4
 800ba2e:	4618      	mov	r0, r3
 800ba30:	f7fd fff6 	bl	8009a20 <uxListRemove>
 800ba34:	4603      	mov	r3, r0
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d10b      	bne.n	800ba52 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800ba3a:	4b24      	ldr	r3, [pc, #144]	; (800bacc <prvAddCurrentTaskToDelayedList+0xb4>)
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba40:	2201      	movs	r2, #1
 800ba42:	fa02 f303 	lsl.w	r3, r2, r3
 800ba46:	43da      	mvns	r2, r3
 800ba48:	4b21      	ldr	r3, [pc, #132]	; (800bad0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	4013      	ands	r3, r2
 800ba4e:	4a20      	ldr	r2, [pc, #128]	; (800bad0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800ba50:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba58:	d10a      	bne.n	800ba70 <prvAddCurrentTaskToDelayedList+0x58>
 800ba5a:	683b      	ldr	r3, [r7, #0]
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d007      	beq.n	800ba70 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ba60:	4b1a      	ldr	r3, [pc, #104]	; (800bacc <prvAddCurrentTaskToDelayedList+0xb4>)
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	3304      	adds	r3, #4
 800ba66:	4619      	mov	r1, r3
 800ba68:	481a      	ldr	r0, [pc, #104]	; (800bad4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800ba6a:	f7fd ff7c 	bl	8009966 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ba6e:	e026      	b.n	800babe <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ba70:	68fa      	ldr	r2, [r7, #12]
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	4413      	add	r3, r2
 800ba76:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ba78:	4b14      	ldr	r3, [pc, #80]	; (800bacc <prvAddCurrentTaskToDelayedList+0xb4>)
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	68ba      	ldr	r2, [r7, #8]
 800ba7e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ba80:	68ba      	ldr	r2, [r7, #8]
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	429a      	cmp	r2, r3
 800ba86:	d209      	bcs.n	800ba9c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ba88:	4b13      	ldr	r3, [pc, #76]	; (800bad8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800ba8a:	681a      	ldr	r2, [r3, #0]
 800ba8c:	4b0f      	ldr	r3, [pc, #60]	; (800bacc <prvAddCurrentTaskToDelayedList+0xb4>)
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	3304      	adds	r3, #4
 800ba92:	4619      	mov	r1, r3
 800ba94:	4610      	mov	r0, r2
 800ba96:	f7fd ff8a 	bl	80099ae <vListInsert>
}
 800ba9a:	e010      	b.n	800babe <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ba9c:	4b0f      	ldr	r3, [pc, #60]	; (800badc <prvAddCurrentTaskToDelayedList+0xc4>)
 800ba9e:	681a      	ldr	r2, [r3, #0]
 800baa0:	4b0a      	ldr	r3, [pc, #40]	; (800bacc <prvAddCurrentTaskToDelayedList+0xb4>)
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	3304      	adds	r3, #4
 800baa6:	4619      	mov	r1, r3
 800baa8:	4610      	mov	r0, r2
 800baaa:	f7fd ff80 	bl	80099ae <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800baae:	4b0c      	ldr	r3, [pc, #48]	; (800bae0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	68ba      	ldr	r2, [r7, #8]
 800bab4:	429a      	cmp	r2, r3
 800bab6:	d202      	bcs.n	800babe <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800bab8:	4a09      	ldr	r2, [pc, #36]	; (800bae0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800baba:	68bb      	ldr	r3, [r7, #8]
 800babc:	6013      	str	r3, [r2, #0]
}
 800babe:	bf00      	nop
 800bac0:	3710      	adds	r7, #16
 800bac2:	46bd      	mov	sp, r7
 800bac4:	bd80      	pop	{r7, pc}
 800bac6:	bf00      	nop
 800bac8:	200013b4 	.word	0x200013b4
 800bacc:	200012b0 	.word	0x200012b0
 800bad0:	200013b8 	.word	0x200013b8
 800bad4:	2000139c 	.word	0x2000139c
 800bad8:	2000136c 	.word	0x2000136c
 800badc:	20001368 	.word	0x20001368
 800bae0:	200013d0 	.word	0x200013d0

0800bae4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800bae4:	b580      	push	{r7, lr}
 800bae6:	b084      	sub	sp, #16
 800bae8:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 800baea:	2300      	movs	r3, #0
 800baec:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800baee:	f000 faf1 	bl	800c0d4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800baf2:	4b11      	ldr	r3, [pc, #68]	; (800bb38 <xTimerCreateTimerTask+0x54>)
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d00a      	beq.n	800bb10 <xTimerCreateTimerTask+0x2c>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 800bafa:	4b10      	ldr	r3, [pc, #64]	; (800bb3c <xTimerCreateTimerTask+0x58>)
 800bafc:	9301      	str	r3, [sp, #4]
 800bafe:	2306      	movs	r3, #6
 800bb00:	9300      	str	r3, [sp, #0]
 800bb02:	2300      	movs	r3, #0
 800bb04:	2280      	movs	r2, #128	; 0x80
 800bb06:	490e      	ldr	r1, [pc, #56]	; (800bb40 <xTimerCreateTimerTask+0x5c>)
 800bb08:	480e      	ldr	r0, [pc, #56]	; (800bb44 <xTimerCreateTimerTask+0x60>)
 800bb0a:	f7fe ff03 	bl	800a914 <xTaskCreate>
 800bb0e:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d10a      	bne.n	800bb2c <xTimerCreateTimerTask+0x48>
	__asm volatile
 800bb16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb1a:	f383 8811 	msr	BASEPRI, r3
 800bb1e:	f3bf 8f6f 	isb	sy
 800bb22:	f3bf 8f4f 	dsb	sy
 800bb26:	603b      	str	r3, [r7, #0]
}
 800bb28:	bf00      	nop
 800bb2a:	e7fe      	b.n	800bb2a <xTimerCreateTimerTask+0x46>
	return xReturn;
 800bb2c:	687b      	ldr	r3, [r7, #4]
}
 800bb2e:	4618      	mov	r0, r3
 800bb30:	3708      	adds	r7, #8
 800bb32:	46bd      	mov	sp, r7
 800bb34:	bd80      	pop	{r7, pc}
 800bb36:	bf00      	nop
 800bb38:	2000140c 	.word	0x2000140c
 800bb3c:	20001410 	.word	0x20001410
 800bb40:	0801baa0 	.word	0x0801baa0
 800bb44:	0800bc7d 	.word	0x0800bc7d

0800bb48 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800bb48:	b580      	push	{r7, lr}
 800bb4a:	b08a      	sub	sp, #40	; 0x28
 800bb4c:	af00      	add	r7, sp, #0
 800bb4e:	60f8      	str	r0, [r7, #12]
 800bb50:	60b9      	str	r1, [r7, #8]
 800bb52:	607a      	str	r2, [r7, #4]
 800bb54:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800bb56:	2300      	movs	r3, #0
 800bb58:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d10a      	bne.n	800bb76 <xTimerGenericCommand+0x2e>
	__asm volatile
 800bb60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb64:	f383 8811 	msr	BASEPRI, r3
 800bb68:	f3bf 8f6f 	isb	sy
 800bb6c:	f3bf 8f4f 	dsb	sy
 800bb70:	623b      	str	r3, [r7, #32]
}
 800bb72:	bf00      	nop
 800bb74:	e7fe      	b.n	800bb74 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800bb76:	4b1a      	ldr	r3, [pc, #104]	; (800bbe0 <xTimerGenericCommand+0x98>)
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d02a      	beq.n	800bbd4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800bb7e:	68bb      	ldr	r3, [r7, #8]
 800bb80:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800bb8a:	68bb      	ldr	r3, [r7, #8]
 800bb8c:	2b05      	cmp	r3, #5
 800bb8e:	dc18      	bgt.n	800bbc2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800bb90:	f7ff fd6e 	bl	800b670 <xTaskGetSchedulerState>
 800bb94:	4603      	mov	r3, r0
 800bb96:	2b02      	cmp	r3, #2
 800bb98:	d109      	bne.n	800bbae <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800bb9a:	4b11      	ldr	r3, [pc, #68]	; (800bbe0 <xTimerGenericCommand+0x98>)
 800bb9c:	6818      	ldr	r0, [r3, #0]
 800bb9e:	f107 0110 	add.w	r1, r7, #16
 800bba2:	2300      	movs	r3, #0
 800bba4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bba6:	f7fe f855 	bl	8009c54 <xQueueGenericSend>
 800bbaa:	6278      	str	r0, [r7, #36]	; 0x24
 800bbac:	e012      	b.n	800bbd4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800bbae:	4b0c      	ldr	r3, [pc, #48]	; (800bbe0 <xTimerGenericCommand+0x98>)
 800bbb0:	6818      	ldr	r0, [r3, #0]
 800bbb2:	f107 0110 	add.w	r1, r7, #16
 800bbb6:	2300      	movs	r3, #0
 800bbb8:	2200      	movs	r2, #0
 800bbba:	f7fe f84b 	bl	8009c54 <xQueueGenericSend>
 800bbbe:	6278      	str	r0, [r7, #36]	; 0x24
 800bbc0:	e008      	b.n	800bbd4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800bbc2:	4b07      	ldr	r3, [pc, #28]	; (800bbe0 <xTimerGenericCommand+0x98>)
 800bbc4:	6818      	ldr	r0, [r3, #0]
 800bbc6:	f107 0110 	add.w	r1, r7, #16
 800bbca:	2300      	movs	r3, #0
 800bbcc:	683a      	ldr	r2, [r7, #0]
 800bbce:	f7fe f93f 	bl	8009e50 <xQueueGenericSendFromISR>
 800bbd2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800bbd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bbd6:	4618      	mov	r0, r3
 800bbd8:	3728      	adds	r7, #40	; 0x28
 800bbda:	46bd      	mov	sp, r7
 800bbdc:	bd80      	pop	{r7, pc}
 800bbde:	bf00      	nop
 800bbe0:	2000140c 	.word	0x2000140c

0800bbe4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800bbe4:	b580      	push	{r7, lr}
 800bbe6:	b088      	sub	sp, #32
 800bbe8:	af02      	add	r7, sp, #8
 800bbea:	6078      	str	r0, [r7, #4]
 800bbec:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bbee:	4b22      	ldr	r3, [pc, #136]	; (800bc78 <prvProcessExpiredTimer+0x94>)
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	68db      	ldr	r3, [r3, #12]
 800bbf4:	68db      	ldr	r3, [r3, #12]
 800bbf6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bbf8:	697b      	ldr	r3, [r7, #20]
 800bbfa:	3304      	adds	r3, #4
 800bbfc:	4618      	mov	r0, r3
 800bbfe:	f7fd ff0f 	bl	8009a20 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bc02:	697b      	ldr	r3, [r7, #20]
 800bc04:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800bc08:	f003 0304 	and.w	r3, r3, #4
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d022      	beq.n	800bc56 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800bc10:	697b      	ldr	r3, [r7, #20]
 800bc12:	699a      	ldr	r2, [r3, #24]
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	18d1      	adds	r1, r2, r3
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	683a      	ldr	r2, [r7, #0]
 800bc1c:	6978      	ldr	r0, [r7, #20]
 800bc1e:	f000 f8d1 	bl	800bdc4 <prvInsertTimerInActiveList>
 800bc22:	4603      	mov	r3, r0
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d01f      	beq.n	800bc68 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bc28:	2300      	movs	r3, #0
 800bc2a:	9300      	str	r3, [sp, #0]
 800bc2c:	2300      	movs	r3, #0
 800bc2e:	687a      	ldr	r2, [r7, #4]
 800bc30:	2100      	movs	r1, #0
 800bc32:	6978      	ldr	r0, [r7, #20]
 800bc34:	f7ff ff88 	bl	800bb48 <xTimerGenericCommand>
 800bc38:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800bc3a:	693b      	ldr	r3, [r7, #16]
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d113      	bne.n	800bc68 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800bc40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc44:	f383 8811 	msr	BASEPRI, r3
 800bc48:	f3bf 8f6f 	isb	sy
 800bc4c:	f3bf 8f4f 	dsb	sy
 800bc50:	60fb      	str	r3, [r7, #12]
}
 800bc52:	bf00      	nop
 800bc54:	e7fe      	b.n	800bc54 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bc56:	697b      	ldr	r3, [r7, #20]
 800bc58:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800bc5c:	f023 0301 	bic.w	r3, r3, #1
 800bc60:	b2da      	uxtb	r2, r3
 800bc62:	697b      	ldr	r3, [r7, #20]
 800bc64:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bc68:	697b      	ldr	r3, [r7, #20]
 800bc6a:	6a1b      	ldr	r3, [r3, #32]
 800bc6c:	6978      	ldr	r0, [r7, #20]
 800bc6e:	4798      	blx	r3
}
 800bc70:	bf00      	nop
 800bc72:	3718      	adds	r7, #24
 800bc74:	46bd      	mov	sp, r7
 800bc76:	bd80      	pop	{r7, pc}
 800bc78:	20001404 	.word	0x20001404

0800bc7c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800bc7c:	b580      	push	{r7, lr}
 800bc7e:	b084      	sub	sp, #16
 800bc80:	af00      	add	r7, sp, #0
 800bc82:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bc84:	f107 0308 	add.w	r3, r7, #8
 800bc88:	4618      	mov	r0, r3
 800bc8a:	f000 f857 	bl	800bd3c <prvGetNextExpireTime>
 800bc8e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800bc90:	68bb      	ldr	r3, [r7, #8]
 800bc92:	4619      	mov	r1, r3
 800bc94:	68f8      	ldr	r0, [r7, #12]
 800bc96:	f000 f803 	bl	800bca0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800bc9a:	f000 f8d5 	bl	800be48 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bc9e:	e7f1      	b.n	800bc84 <prvTimerTask+0x8>

0800bca0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800bca0:	b580      	push	{r7, lr}
 800bca2:	b084      	sub	sp, #16
 800bca4:	af00      	add	r7, sp, #0
 800bca6:	6078      	str	r0, [r7, #4]
 800bca8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800bcaa:	f7ff f877 	bl	800ad9c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bcae:	f107 0308 	add.w	r3, r7, #8
 800bcb2:	4618      	mov	r0, r3
 800bcb4:	f000 f866 	bl	800bd84 <prvSampleTimeNow>
 800bcb8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800bcba:	68bb      	ldr	r3, [r7, #8]
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d130      	bne.n	800bd22 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800bcc0:	683b      	ldr	r3, [r7, #0]
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d10a      	bne.n	800bcdc <prvProcessTimerOrBlockTask+0x3c>
 800bcc6:	687a      	ldr	r2, [r7, #4]
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	429a      	cmp	r2, r3
 800bccc:	d806      	bhi.n	800bcdc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800bcce:	f7ff f873 	bl	800adb8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800bcd2:	68f9      	ldr	r1, [r7, #12]
 800bcd4:	6878      	ldr	r0, [r7, #4]
 800bcd6:	f7ff ff85 	bl	800bbe4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800bcda:	e024      	b.n	800bd26 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800bcdc:	683b      	ldr	r3, [r7, #0]
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d008      	beq.n	800bcf4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800bce2:	4b13      	ldr	r3, [pc, #76]	; (800bd30 <prvProcessTimerOrBlockTask+0x90>)
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d101      	bne.n	800bcf0 <prvProcessTimerOrBlockTask+0x50>
 800bcec:	2301      	movs	r3, #1
 800bcee:	e000      	b.n	800bcf2 <prvProcessTimerOrBlockTask+0x52>
 800bcf0:	2300      	movs	r3, #0
 800bcf2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800bcf4:	4b0f      	ldr	r3, [pc, #60]	; (800bd34 <prvProcessTimerOrBlockTask+0x94>)
 800bcf6:	6818      	ldr	r0, [r3, #0]
 800bcf8:	687a      	ldr	r2, [r7, #4]
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	1ad3      	subs	r3, r2, r3
 800bcfe:	683a      	ldr	r2, [r7, #0]
 800bd00:	4619      	mov	r1, r3
 800bd02:	f7fe fdd3 	bl	800a8ac <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800bd06:	f7ff f857 	bl	800adb8 <xTaskResumeAll>
 800bd0a:	4603      	mov	r3, r0
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d10a      	bne.n	800bd26 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800bd10:	4b09      	ldr	r3, [pc, #36]	; (800bd38 <prvProcessTimerOrBlockTask+0x98>)
 800bd12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd16:	601a      	str	r2, [r3, #0]
 800bd18:	f3bf 8f4f 	dsb	sy
 800bd1c:	f3bf 8f6f 	isb	sy
}
 800bd20:	e001      	b.n	800bd26 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800bd22:	f7ff f849 	bl	800adb8 <xTaskResumeAll>
}
 800bd26:	bf00      	nop
 800bd28:	3710      	adds	r7, #16
 800bd2a:	46bd      	mov	sp, r7
 800bd2c:	bd80      	pop	{r7, pc}
 800bd2e:	bf00      	nop
 800bd30:	20001408 	.word	0x20001408
 800bd34:	2000140c 	.word	0x2000140c
 800bd38:	e000ed04 	.word	0xe000ed04

0800bd3c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800bd3c:	b480      	push	{r7}
 800bd3e:	b085      	sub	sp, #20
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800bd44:	4b0e      	ldr	r3, [pc, #56]	; (800bd80 <prvGetNextExpireTime+0x44>)
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d101      	bne.n	800bd52 <prvGetNextExpireTime+0x16>
 800bd4e:	2201      	movs	r2, #1
 800bd50:	e000      	b.n	800bd54 <prvGetNextExpireTime+0x18>
 800bd52:	2200      	movs	r2, #0
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d105      	bne.n	800bd6c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bd60:	4b07      	ldr	r3, [pc, #28]	; (800bd80 <prvGetNextExpireTime+0x44>)
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	68db      	ldr	r3, [r3, #12]
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	60fb      	str	r3, [r7, #12]
 800bd6a:	e001      	b.n	800bd70 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800bd6c:	2300      	movs	r3, #0
 800bd6e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800bd70:	68fb      	ldr	r3, [r7, #12]
}
 800bd72:	4618      	mov	r0, r3
 800bd74:	3714      	adds	r7, #20
 800bd76:	46bd      	mov	sp, r7
 800bd78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd7c:	4770      	bx	lr
 800bd7e:	bf00      	nop
 800bd80:	20001404 	.word	0x20001404

0800bd84 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800bd84:	b580      	push	{r7, lr}
 800bd86:	b084      	sub	sp, #16
 800bd88:	af00      	add	r7, sp, #0
 800bd8a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800bd8c:	f7ff f8b0 	bl	800aef0 <xTaskGetTickCount>
 800bd90:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800bd92:	4b0b      	ldr	r3, [pc, #44]	; (800bdc0 <prvSampleTimeNow+0x3c>)
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	68fa      	ldr	r2, [r7, #12]
 800bd98:	429a      	cmp	r2, r3
 800bd9a:	d205      	bcs.n	800bda8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800bd9c:	f000 f936 	bl	800c00c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	2201      	movs	r2, #1
 800bda4:	601a      	str	r2, [r3, #0]
 800bda6:	e002      	b.n	800bdae <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	2200      	movs	r2, #0
 800bdac:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800bdae:	4a04      	ldr	r2, [pc, #16]	; (800bdc0 <prvSampleTimeNow+0x3c>)
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800bdb4:	68fb      	ldr	r3, [r7, #12]
}
 800bdb6:	4618      	mov	r0, r3
 800bdb8:	3710      	adds	r7, #16
 800bdba:	46bd      	mov	sp, r7
 800bdbc:	bd80      	pop	{r7, pc}
 800bdbe:	bf00      	nop
 800bdc0:	20001414 	.word	0x20001414

0800bdc4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800bdc4:	b580      	push	{r7, lr}
 800bdc6:	b086      	sub	sp, #24
 800bdc8:	af00      	add	r7, sp, #0
 800bdca:	60f8      	str	r0, [r7, #12]
 800bdcc:	60b9      	str	r1, [r7, #8]
 800bdce:	607a      	str	r2, [r7, #4]
 800bdd0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800bdd2:	2300      	movs	r3, #0
 800bdd4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	68ba      	ldr	r2, [r7, #8]
 800bdda:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	68fa      	ldr	r2, [r7, #12]
 800bde0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800bde2:	68ba      	ldr	r2, [r7, #8]
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	429a      	cmp	r2, r3
 800bde8:	d812      	bhi.n	800be10 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bdea:	687a      	ldr	r2, [r7, #4]
 800bdec:	683b      	ldr	r3, [r7, #0]
 800bdee:	1ad2      	subs	r2, r2, r3
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	699b      	ldr	r3, [r3, #24]
 800bdf4:	429a      	cmp	r2, r3
 800bdf6:	d302      	bcc.n	800bdfe <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800bdf8:	2301      	movs	r3, #1
 800bdfa:	617b      	str	r3, [r7, #20]
 800bdfc:	e01b      	b.n	800be36 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800bdfe:	4b10      	ldr	r3, [pc, #64]	; (800be40 <prvInsertTimerInActiveList+0x7c>)
 800be00:	681a      	ldr	r2, [r3, #0]
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	3304      	adds	r3, #4
 800be06:	4619      	mov	r1, r3
 800be08:	4610      	mov	r0, r2
 800be0a:	f7fd fdd0 	bl	80099ae <vListInsert>
 800be0e:	e012      	b.n	800be36 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800be10:	687a      	ldr	r2, [r7, #4]
 800be12:	683b      	ldr	r3, [r7, #0]
 800be14:	429a      	cmp	r2, r3
 800be16:	d206      	bcs.n	800be26 <prvInsertTimerInActiveList+0x62>
 800be18:	68ba      	ldr	r2, [r7, #8]
 800be1a:	683b      	ldr	r3, [r7, #0]
 800be1c:	429a      	cmp	r2, r3
 800be1e:	d302      	bcc.n	800be26 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800be20:	2301      	movs	r3, #1
 800be22:	617b      	str	r3, [r7, #20]
 800be24:	e007      	b.n	800be36 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800be26:	4b07      	ldr	r3, [pc, #28]	; (800be44 <prvInsertTimerInActiveList+0x80>)
 800be28:	681a      	ldr	r2, [r3, #0]
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	3304      	adds	r3, #4
 800be2e:	4619      	mov	r1, r3
 800be30:	4610      	mov	r0, r2
 800be32:	f7fd fdbc 	bl	80099ae <vListInsert>
		}
	}

	return xProcessTimerNow;
 800be36:	697b      	ldr	r3, [r7, #20]
}
 800be38:	4618      	mov	r0, r3
 800be3a:	3718      	adds	r7, #24
 800be3c:	46bd      	mov	sp, r7
 800be3e:	bd80      	pop	{r7, pc}
 800be40:	20001408 	.word	0x20001408
 800be44:	20001404 	.word	0x20001404

0800be48 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800be48:	b580      	push	{r7, lr}
 800be4a:	b08e      	sub	sp, #56	; 0x38
 800be4c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800be4e:	e0ca      	b.n	800bfe6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	2b00      	cmp	r3, #0
 800be54:	da18      	bge.n	800be88 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800be56:	1d3b      	adds	r3, r7, #4
 800be58:	3304      	adds	r3, #4
 800be5a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800be5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d10a      	bne.n	800be78 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800be62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be66:	f383 8811 	msr	BASEPRI, r3
 800be6a:	f3bf 8f6f 	isb	sy
 800be6e:	f3bf 8f4f 	dsb	sy
 800be72:	61fb      	str	r3, [r7, #28]
}
 800be74:	bf00      	nop
 800be76:	e7fe      	b.n	800be76 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800be78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800be7e:	6850      	ldr	r0, [r2, #4]
 800be80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800be82:	6892      	ldr	r2, [r2, #8]
 800be84:	4611      	mov	r1, r2
 800be86:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	f2c0 80aa 	blt.w	800bfe4 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800be94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be96:	695b      	ldr	r3, [r3, #20]
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d004      	beq.n	800bea6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800be9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be9e:	3304      	adds	r3, #4
 800bea0:	4618      	mov	r0, r3
 800bea2:	f7fd fdbd 	bl	8009a20 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bea6:	463b      	mov	r3, r7
 800bea8:	4618      	mov	r0, r3
 800beaa:	f7ff ff6b 	bl	800bd84 <prvSampleTimeNow>
 800beae:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	2b09      	cmp	r3, #9
 800beb4:	f200 8097 	bhi.w	800bfe6 <prvProcessReceivedCommands+0x19e>
 800beb8:	a201      	add	r2, pc, #4	; (adr r2, 800bec0 <prvProcessReceivedCommands+0x78>)
 800beba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bebe:	bf00      	nop
 800bec0:	0800bee9 	.word	0x0800bee9
 800bec4:	0800bee9 	.word	0x0800bee9
 800bec8:	0800bee9 	.word	0x0800bee9
 800becc:	0800bf5d 	.word	0x0800bf5d
 800bed0:	0800bf71 	.word	0x0800bf71
 800bed4:	0800bfbb 	.word	0x0800bfbb
 800bed8:	0800bee9 	.word	0x0800bee9
 800bedc:	0800bee9 	.word	0x0800bee9
 800bee0:	0800bf5d 	.word	0x0800bf5d
 800bee4:	0800bf71 	.word	0x0800bf71
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800beea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800beee:	f043 0301 	orr.w	r3, r3, #1
 800bef2:	b2da      	uxtb	r2, r3
 800bef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bef6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800befa:	68ba      	ldr	r2, [r7, #8]
 800befc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800befe:	699b      	ldr	r3, [r3, #24]
 800bf00:	18d1      	adds	r1, r2, r3
 800bf02:	68bb      	ldr	r3, [r7, #8]
 800bf04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bf06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bf08:	f7ff ff5c 	bl	800bdc4 <prvInsertTimerInActiveList>
 800bf0c:	4603      	mov	r3, r0
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d069      	beq.n	800bfe6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bf12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf14:	6a1b      	ldr	r3, [r3, #32]
 800bf16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bf18:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bf1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf1c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800bf20:	f003 0304 	and.w	r3, r3, #4
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d05e      	beq.n	800bfe6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800bf28:	68ba      	ldr	r2, [r7, #8]
 800bf2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf2c:	699b      	ldr	r3, [r3, #24]
 800bf2e:	441a      	add	r2, r3
 800bf30:	2300      	movs	r3, #0
 800bf32:	9300      	str	r3, [sp, #0]
 800bf34:	2300      	movs	r3, #0
 800bf36:	2100      	movs	r1, #0
 800bf38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bf3a:	f7ff fe05 	bl	800bb48 <xTimerGenericCommand>
 800bf3e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800bf40:	6a3b      	ldr	r3, [r7, #32]
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d14f      	bne.n	800bfe6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800bf46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf4a:	f383 8811 	msr	BASEPRI, r3
 800bf4e:	f3bf 8f6f 	isb	sy
 800bf52:	f3bf 8f4f 	dsb	sy
 800bf56:	61bb      	str	r3, [r7, #24]
}
 800bf58:	bf00      	nop
 800bf5a:	e7fe      	b.n	800bf5a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bf5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf5e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800bf62:	f023 0301 	bic.w	r3, r3, #1
 800bf66:	b2da      	uxtb	r2, r3
 800bf68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf6a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 800bf6e:	e03a      	b.n	800bfe6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bf70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf72:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800bf76:	f043 0301 	orr.w	r3, r3, #1
 800bf7a:	b2da      	uxtb	r2, r3
 800bf7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800bf82:	68ba      	ldr	r2, [r7, #8]
 800bf84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf86:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800bf88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf8a:	699b      	ldr	r3, [r3, #24]
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d10a      	bne.n	800bfa6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800bf90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf94:	f383 8811 	msr	BASEPRI, r3
 800bf98:	f3bf 8f6f 	isb	sy
 800bf9c:	f3bf 8f4f 	dsb	sy
 800bfa0:	617b      	str	r3, [r7, #20]
}
 800bfa2:	bf00      	nop
 800bfa4:	e7fe      	b.n	800bfa4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800bfa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfa8:	699a      	ldr	r2, [r3, #24]
 800bfaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfac:	18d1      	adds	r1, r2, r3
 800bfae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bfb2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bfb4:	f7ff ff06 	bl	800bdc4 <prvInsertTimerInActiveList>
					break;
 800bfb8:	e015      	b.n	800bfe6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800bfba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfbc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800bfc0:	f003 0302 	and.w	r3, r3, #2
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d103      	bne.n	800bfd0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800bfc8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bfca:	f000 fbf1 	bl	800c7b0 <vPortFree>
 800bfce:	e00a      	b.n	800bfe6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bfd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfd2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800bfd6:	f023 0301 	bic.w	r3, r3, #1
 800bfda:	b2da      	uxtb	r2, r3
 800bfdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfde:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800bfe2:	e000      	b.n	800bfe6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800bfe4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bfe6:	4b08      	ldr	r3, [pc, #32]	; (800c008 <prvProcessReceivedCommands+0x1c0>)
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	1d39      	adds	r1, r7, #4
 800bfec:	2200      	movs	r2, #0
 800bfee:	4618      	mov	r0, r3
 800bff0:	f7fe f856 	bl	800a0a0 <xQueueReceive>
 800bff4:	4603      	mov	r3, r0
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	f47f af2a 	bne.w	800be50 <prvProcessReceivedCommands+0x8>
	}
}
 800bffc:	bf00      	nop
 800bffe:	bf00      	nop
 800c000:	3730      	adds	r7, #48	; 0x30
 800c002:	46bd      	mov	sp, r7
 800c004:	bd80      	pop	{r7, pc}
 800c006:	bf00      	nop
 800c008:	2000140c 	.word	0x2000140c

0800c00c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c00c:	b580      	push	{r7, lr}
 800c00e:	b088      	sub	sp, #32
 800c010:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c012:	e048      	b.n	800c0a6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c014:	4b2d      	ldr	r3, [pc, #180]	; (800c0cc <prvSwitchTimerLists+0xc0>)
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	68db      	ldr	r3, [r3, #12]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c01e:	4b2b      	ldr	r3, [pc, #172]	; (800c0cc <prvSwitchTimerLists+0xc0>)
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	68db      	ldr	r3, [r3, #12]
 800c024:	68db      	ldr	r3, [r3, #12]
 800c026:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	3304      	adds	r3, #4
 800c02c:	4618      	mov	r0, r3
 800c02e:	f7fd fcf7 	bl	8009a20 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	6a1b      	ldr	r3, [r3, #32]
 800c036:	68f8      	ldr	r0, [r7, #12]
 800c038:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c040:	f003 0304 	and.w	r3, r3, #4
 800c044:	2b00      	cmp	r3, #0
 800c046:	d02e      	beq.n	800c0a6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	699b      	ldr	r3, [r3, #24]
 800c04c:	693a      	ldr	r2, [r7, #16]
 800c04e:	4413      	add	r3, r2
 800c050:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c052:	68ba      	ldr	r2, [r7, #8]
 800c054:	693b      	ldr	r3, [r7, #16]
 800c056:	429a      	cmp	r2, r3
 800c058:	d90e      	bls.n	800c078 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	68ba      	ldr	r2, [r7, #8]
 800c05e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	68fa      	ldr	r2, [r7, #12]
 800c064:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c066:	4b19      	ldr	r3, [pc, #100]	; (800c0cc <prvSwitchTimerLists+0xc0>)
 800c068:	681a      	ldr	r2, [r3, #0]
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	3304      	adds	r3, #4
 800c06e:	4619      	mov	r1, r3
 800c070:	4610      	mov	r0, r2
 800c072:	f7fd fc9c 	bl	80099ae <vListInsert>
 800c076:	e016      	b.n	800c0a6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c078:	2300      	movs	r3, #0
 800c07a:	9300      	str	r3, [sp, #0]
 800c07c:	2300      	movs	r3, #0
 800c07e:	693a      	ldr	r2, [r7, #16]
 800c080:	2100      	movs	r1, #0
 800c082:	68f8      	ldr	r0, [r7, #12]
 800c084:	f7ff fd60 	bl	800bb48 <xTimerGenericCommand>
 800c088:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d10a      	bne.n	800c0a6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800c090:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c094:	f383 8811 	msr	BASEPRI, r3
 800c098:	f3bf 8f6f 	isb	sy
 800c09c:	f3bf 8f4f 	dsb	sy
 800c0a0:	603b      	str	r3, [r7, #0]
}
 800c0a2:	bf00      	nop
 800c0a4:	e7fe      	b.n	800c0a4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c0a6:	4b09      	ldr	r3, [pc, #36]	; (800c0cc <prvSwitchTimerLists+0xc0>)
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d1b1      	bne.n	800c014 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c0b0:	4b06      	ldr	r3, [pc, #24]	; (800c0cc <prvSwitchTimerLists+0xc0>)
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c0b6:	4b06      	ldr	r3, [pc, #24]	; (800c0d0 <prvSwitchTimerLists+0xc4>)
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	4a04      	ldr	r2, [pc, #16]	; (800c0cc <prvSwitchTimerLists+0xc0>)
 800c0bc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c0be:	4a04      	ldr	r2, [pc, #16]	; (800c0d0 <prvSwitchTimerLists+0xc4>)
 800c0c0:	697b      	ldr	r3, [r7, #20]
 800c0c2:	6013      	str	r3, [r2, #0]
}
 800c0c4:	bf00      	nop
 800c0c6:	3718      	adds	r7, #24
 800c0c8:	46bd      	mov	sp, r7
 800c0ca:	bd80      	pop	{r7, pc}
 800c0cc:	20001404 	.word	0x20001404
 800c0d0:	20001408 	.word	0x20001408

0800c0d4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c0d4:	b580      	push	{r7, lr}
 800c0d6:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c0d8:	f000 f97c 	bl	800c3d4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c0dc:	4b12      	ldr	r3, [pc, #72]	; (800c128 <prvCheckForValidListAndQueue+0x54>)
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d11d      	bne.n	800c120 <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 800c0e4:	4811      	ldr	r0, [pc, #68]	; (800c12c <prvCheckForValidListAndQueue+0x58>)
 800c0e6:	f7fd fc11 	bl	800990c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c0ea:	4811      	ldr	r0, [pc, #68]	; (800c130 <prvCheckForValidListAndQueue+0x5c>)
 800c0ec:	f7fd fc0e 	bl	800990c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c0f0:	4b10      	ldr	r3, [pc, #64]	; (800c134 <prvCheckForValidListAndQueue+0x60>)
 800c0f2:	4a0e      	ldr	r2, [pc, #56]	; (800c12c <prvCheckForValidListAndQueue+0x58>)
 800c0f4:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c0f6:	4b10      	ldr	r3, [pc, #64]	; (800c138 <prvCheckForValidListAndQueue+0x64>)
 800c0f8:	4a0d      	ldr	r2, [pc, #52]	; (800c130 <prvCheckForValidListAndQueue+0x5c>)
 800c0fa:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800c0fc:	2200      	movs	r2, #0
 800c0fe:	2110      	movs	r1, #16
 800c100:	2001      	movs	r0, #1
 800c102:	f7fd fd1f 	bl	8009b44 <xQueueGenericCreate>
 800c106:	4603      	mov	r3, r0
 800c108:	4a07      	ldr	r2, [pc, #28]	; (800c128 <prvCheckForValidListAndQueue+0x54>)
 800c10a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c10c:	4b06      	ldr	r3, [pc, #24]	; (800c128 <prvCheckForValidListAndQueue+0x54>)
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	2b00      	cmp	r3, #0
 800c112:	d005      	beq.n	800c120 <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c114:	4b04      	ldr	r3, [pc, #16]	; (800c128 <prvCheckForValidListAndQueue+0x54>)
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	4908      	ldr	r1, [pc, #32]	; (800c13c <prvCheckForValidListAndQueue+0x68>)
 800c11a:	4618      	mov	r0, r3
 800c11c:	f7fe fb72 	bl	800a804 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c120:	f000 f988 	bl	800c434 <vPortExitCritical>
}
 800c124:	bf00      	nop
 800c126:	bd80      	pop	{r7, pc}
 800c128:	2000140c 	.word	0x2000140c
 800c12c:	200013dc 	.word	0x200013dc
 800c130:	200013f0 	.word	0x200013f0
 800c134:	20001404 	.word	0x20001404
 800c138:	20001408 	.word	0x20001408
 800c13c:	0801baa8 	.word	0x0801baa8

0800c140 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800c140:	b580      	push	{r7, lr}
 800c142:	b08a      	sub	sp, #40	; 0x28
 800c144:	af00      	add	r7, sp, #0
 800c146:	60f8      	str	r0, [r7, #12]
 800c148:	60b9      	str	r1, [r7, #8]
 800c14a:	607a      	str	r2, [r7, #4]
 800c14c:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 800c14e:	f06f 0301 	mvn.w	r3, #1
 800c152:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 800c158:	68bb      	ldr	r3, [r7, #8]
 800c15a:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c160:	4b06      	ldr	r3, [pc, #24]	; (800c17c <xTimerPendFunctionCallFromISR+0x3c>)
 800c162:	6818      	ldr	r0, [r3, #0]
 800c164:	f107 0114 	add.w	r1, r7, #20
 800c168:	2300      	movs	r3, #0
 800c16a:	683a      	ldr	r2, [r7, #0]
 800c16c:	f7fd fe70 	bl	8009e50 <xQueueGenericSendFromISR>
 800c170:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 800c172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800c174:	4618      	mov	r0, r3
 800c176:	3728      	adds	r7, #40	; 0x28
 800c178:	46bd      	mov	sp, r7
 800c17a:	bd80      	pop	{r7, pc}
 800c17c:	2000140c 	.word	0x2000140c

0800c180 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c180:	b480      	push	{r7}
 800c182:	b085      	sub	sp, #20
 800c184:	af00      	add	r7, sp, #0
 800c186:	60f8      	str	r0, [r7, #12]
 800c188:	60b9      	str	r1, [r7, #8]
 800c18a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	3b04      	subs	r3, #4
 800c190:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c198:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	3b04      	subs	r3, #4
 800c19e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c1a0:	68bb      	ldr	r3, [r7, #8]
 800c1a2:	f023 0201 	bic.w	r2, r3, #1
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	3b04      	subs	r3, #4
 800c1ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c1b0:	4a0c      	ldr	r2, [pc, #48]	; (800c1e4 <pxPortInitialiseStack+0x64>)
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	3b14      	subs	r3, #20
 800c1ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c1bc:	687a      	ldr	r2, [r7, #4]
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	3b04      	subs	r3, #4
 800c1c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	f06f 0202 	mvn.w	r2, #2
 800c1ce:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	3b20      	subs	r3, #32
 800c1d4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c1d6:	68fb      	ldr	r3, [r7, #12]
}
 800c1d8:	4618      	mov	r0, r3
 800c1da:	3714      	adds	r7, #20
 800c1dc:	46bd      	mov	sp, r7
 800c1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e2:	4770      	bx	lr
 800c1e4:	0800c1e9 	.word	0x0800c1e9

0800c1e8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c1e8:	b480      	push	{r7}
 800c1ea:	b085      	sub	sp, #20
 800c1ec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c1ee:	2300      	movs	r3, #0
 800c1f0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c1f2:	4b12      	ldr	r3, [pc, #72]	; (800c23c <prvTaskExitError+0x54>)
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1fa:	d00a      	beq.n	800c212 <prvTaskExitError+0x2a>
	__asm volatile
 800c1fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c200:	f383 8811 	msr	BASEPRI, r3
 800c204:	f3bf 8f6f 	isb	sy
 800c208:	f3bf 8f4f 	dsb	sy
 800c20c:	60fb      	str	r3, [r7, #12]
}
 800c20e:	bf00      	nop
 800c210:	e7fe      	b.n	800c210 <prvTaskExitError+0x28>
	__asm volatile
 800c212:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c216:	f383 8811 	msr	BASEPRI, r3
 800c21a:	f3bf 8f6f 	isb	sy
 800c21e:	f3bf 8f4f 	dsb	sy
 800c222:	60bb      	str	r3, [r7, #8]
}
 800c224:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c226:	bf00      	nop
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d0fc      	beq.n	800c228 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c22e:	bf00      	nop
 800c230:	bf00      	nop
 800c232:	3714      	adds	r7, #20
 800c234:	46bd      	mov	sp, r7
 800c236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c23a:	4770      	bx	lr
 800c23c:	200000b4 	.word	0x200000b4

0800c240 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c240:	4b07      	ldr	r3, [pc, #28]	; (800c260 <pxCurrentTCBConst2>)
 800c242:	6819      	ldr	r1, [r3, #0]
 800c244:	6808      	ldr	r0, [r1, #0]
 800c246:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c24a:	f380 8809 	msr	PSP, r0
 800c24e:	f3bf 8f6f 	isb	sy
 800c252:	f04f 0000 	mov.w	r0, #0
 800c256:	f380 8811 	msr	BASEPRI, r0
 800c25a:	4770      	bx	lr
 800c25c:	f3af 8000 	nop.w

0800c260 <pxCurrentTCBConst2>:
 800c260:	200012b0 	.word	0x200012b0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c264:	bf00      	nop
 800c266:	bf00      	nop

0800c268 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c268:	4808      	ldr	r0, [pc, #32]	; (800c28c <prvPortStartFirstTask+0x24>)
 800c26a:	6800      	ldr	r0, [r0, #0]
 800c26c:	6800      	ldr	r0, [r0, #0]
 800c26e:	f380 8808 	msr	MSP, r0
 800c272:	f04f 0000 	mov.w	r0, #0
 800c276:	f380 8814 	msr	CONTROL, r0
 800c27a:	b662      	cpsie	i
 800c27c:	b661      	cpsie	f
 800c27e:	f3bf 8f4f 	dsb	sy
 800c282:	f3bf 8f6f 	isb	sy
 800c286:	df00      	svc	0
 800c288:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c28a:	bf00      	nop
 800c28c:	e000ed08 	.word	0xe000ed08

0800c290 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c290:	b580      	push	{r7, lr}
 800c292:	b086      	sub	sp, #24
 800c294:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c296:	4b46      	ldr	r3, [pc, #280]	; (800c3b0 <xPortStartScheduler+0x120>)
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	4a46      	ldr	r2, [pc, #280]	; (800c3b4 <xPortStartScheduler+0x124>)
 800c29c:	4293      	cmp	r3, r2
 800c29e:	d10a      	bne.n	800c2b6 <xPortStartScheduler+0x26>
	__asm volatile
 800c2a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2a4:	f383 8811 	msr	BASEPRI, r3
 800c2a8:	f3bf 8f6f 	isb	sy
 800c2ac:	f3bf 8f4f 	dsb	sy
 800c2b0:	613b      	str	r3, [r7, #16]
}
 800c2b2:	bf00      	nop
 800c2b4:	e7fe      	b.n	800c2b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c2b6:	4b3e      	ldr	r3, [pc, #248]	; (800c3b0 <xPortStartScheduler+0x120>)
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	4a3f      	ldr	r2, [pc, #252]	; (800c3b8 <xPortStartScheduler+0x128>)
 800c2bc:	4293      	cmp	r3, r2
 800c2be:	d10a      	bne.n	800c2d6 <xPortStartScheduler+0x46>
	__asm volatile
 800c2c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2c4:	f383 8811 	msr	BASEPRI, r3
 800c2c8:	f3bf 8f6f 	isb	sy
 800c2cc:	f3bf 8f4f 	dsb	sy
 800c2d0:	60fb      	str	r3, [r7, #12]
}
 800c2d2:	bf00      	nop
 800c2d4:	e7fe      	b.n	800c2d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c2d6:	4b39      	ldr	r3, [pc, #228]	; (800c3bc <xPortStartScheduler+0x12c>)
 800c2d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c2da:	697b      	ldr	r3, [r7, #20]
 800c2dc:	781b      	ldrb	r3, [r3, #0]
 800c2de:	b2db      	uxtb	r3, r3
 800c2e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c2e2:	697b      	ldr	r3, [r7, #20]
 800c2e4:	22ff      	movs	r2, #255	; 0xff
 800c2e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c2e8:	697b      	ldr	r3, [r7, #20]
 800c2ea:	781b      	ldrb	r3, [r3, #0]
 800c2ec:	b2db      	uxtb	r3, r3
 800c2ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c2f0:	78fb      	ldrb	r3, [r7, #3]
 800c2f2:	b2db      	uxtb	r3, r3
 800c2f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c2f8:	b2da      	uxtb	r2, r3
 800c2fa:	4b31      	ldr	r3, [pc, #196]	; (800c3c0 <xPortStartScheduler+0x130>)
 800c2fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c2fe:	4b31      	ldr	r3, [pc, #196]	; (800c3c4 <xPortStartScheduler+0x134>)
 800c300:	2207      	movs	r2, #7
 800c302:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c304:	e009      	b.n	800c31a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800c306:	4b2f      	ldr	r3, [pc, #188]	; (800c3c4 <xPortStartScheduler+0x134>)
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	3b01      	subs	r3, #1
 800c30c:	4a2d      	ldr	r2, [pc, #180]	; (800c3c4 <xPortStartScheduler+0x134>)
 800c30e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c310:	78fb      	ldrb	r3, [r7, #3]
 800c312:	b2db      	uxtb	r3, r3
 800c314:	005b      	lsls	r3, r3, #1
 800c316:	b2db      	uxtb	r3, r3
 800c318:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c31a:	78fb      	ldrb	r3, [r7, #3]
 800c31c:	b2db      	uxtb	r3, r3
 800c31e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c322:	2b80      	cmp	r3, #128	; 0x80
 800c324:	d0ef      	beq.n	800c306 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c326:	4b27      	ldr	r3, [pc, #156]	; (800c3c4 <xPortStartScheduler+0x134>)
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	f1c3 0307 	rsb	r3, r3, #7
 800c32e:	2b04      	cmp	r3, #4
 800c330:	d00a      	beq.n	800c348 <xPortStartScheduler+0xb8>
	__asm volatile
 800c332:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c336:	f383 8811 	msr	BASEPRI, r3
 800c33a:	f3bf 8f6f 	isb	sy
 800c33e:	f3bf 8f4f 	dsb	sy
 800c342:	60bb      	str	r3, [r7, #8]
}
 800c344:	bf00      	nop
 800c346:	e7fe      	b.n	800c346 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c348:	4b1e      	ldr	r3, [pc, #120]	; (800c3c4 <xPortStartScheduler+0x134>)
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	021b      	lsls	r3, r3, #8
 800c34e:	4a1d      	ldr	r2, [pc, #116]	; (800c3c4 <xPortStartScheduler+0x134>)
 800c350:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c352:	4b1c      	ldr	r3, [pc, #112]	; (800c3c4 <xPortStartScheduler+0x134>)
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c35a:	4a1a      	ldr	r2, [pc, #104]	; (800c3c4 <xPortStartScheduler+0x134>)
 800c35c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	b2da      	uxtb	r2, r3
 800c362:	697b      	ldr	r3, [r7, #20]
 800c364:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c366:	4b18      	ldr	r3, [pc, #96]	; (800c3c8 <xPortStartScheduler+0x138>)
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	4a17      	ldr	r2, [pc, #92]	; (800c3c8 <xPortStartScheduler+0x138>)
 800c36c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c370:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c372:	4b15      	ldr	r3, [pc, #84]	; (800c3c8 <xPortStartScheduler+0x138>)
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	4a14      	ldr	r2, [pc, #80]	; (800c3c8 <xPortStartScheduler+0x138>)
 800c378:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c37c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c37e:	f000 f8dd 	bl	800c53c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c382:	4b12      	ldr	r3, [pc, #72]	; (800c3cc <xPortStartScheduler+0x13c>)
 800c384:	2200      	movs	r2, #0
 800c386:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c388:	f000 f8fc 	bl	800c584 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c38c:	4b10      	ldr	r3, [pc, #64]	; (800c3d0 <xPortStartScheduler+0x140>)
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	4a0f      	ldr	r2, [pc, #60]	; (800c3d0 <xPortStartScheduler+0x140>)
 800c392:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c396:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c398:	f7ff ff66 	bl	800c268 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c39c:	f7fe fe82 	bl	800b0a4 <vTaskSwitchContext>
	prvTaskExitError();
 800c3a0:	f7ff ff22 	bl	800c1e8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c3a4:	2300      	movs	r3, #0
}
 800c3a6:	4618      	mov	r0, r3
 800c3a8:	3718      	adds	r7, #24
 800c3aa:	46bd      	mov	sp, r7
 800c3ac:	bd80      	pop	{r7, pc}
 800c3ae:	bf00      	nop
 800c3b0:	e000ed00 	.word	0xe000ed00
 800c3b4:	410fc271 	.word	0x410fc271
 800c3b8:	410fc270 	.word	0x410fc270
 800c3bc:	e000e400 	.word	0xe000e400
 800c3c0:	20001418 	.word	0x20001418
 800c3c4:	2000141c 	.word	0x2000141c
 800c3c8:	e000ed20 	.word	0xe000ed20
 800c3cc:	200000b4 	.word	0x200000b4
 800c3d0:	e000ef34 	.word	0xe000ef34

0800c3d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c3d4:	b480      	push	{r7}
 800c3d6:	b083      	sub	sp, #12
 800c3d8:	af00      	add	r7, sp, #0
	__asm volatile
 800c3da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3de:	f383 8811 	msr	BASEPRI, r3
 800c3e2:	f3bf 8f6f 	isb	sy
 800c3e6:	f3bf 8f4f 	dsb	sy
 800c3ea:	607b      	str	r3, [r7, #4]
}
 800c3ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c3ee:	4b0f      	ldr	r3, [pc, #60]	; (800c42c <vPortEnterCritical+0x58>)
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	3301      	adds	r3, #1
 800c3f4:	4a0d      	ldr	r2, [pc, #52]	; (800c42c <vPortEnterCritical+0x58>)
 800c3f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c3f8:	4b0c      	ldr	r3, [pc, #48]	; (800c42c <vPortEnterCritical+0x58>)
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	2b01      	cmp	r3, #1
 800c3fe:	d10f      	bne.n	800c420 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c400:	4b0b      	ldr	r3, [pc, #44]	; (800c430 <vPortEnterCritical+0x5c>)
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	b2db      	uxtb	r3, r3
 800c406:	2b00      	cmp	r3, #0
 800c408:	d00a      	beq.n	800c420 <vPortEnterCritical+0x4c>
	__asm volatile
 800c40a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c40e:	f383 8811 	msr	BASEPRI, r3
 800c412:	f3bf 8f6f 	isb	sy
 800c416:	f3bf 8f4f 	dsb	sy
 800c41a:	603b      	str	r3, [r7, #0]
}
 800c41c:	bf00      	nop
 800c41e:	e7fe      	b.n	800c41e <vPortEnterCritical+0x4a>
	}
}
 800c420:	bf00      	nop
 800c422:	370c      	adds	r7, #12
 800c424:	46bd      	mov	sp, r7
 800c426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c42a:	4770      	bx	lr
 800c42c:	200000b4 	.word	0x200000b4
 800c430:	e000ed04 	.word	0xe000ed04

0800c434 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c434:	b480      	push	{r7}
 800c436:	b083      	sub	sp, #12
 800c438:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c43a:	4b12      	ldr	r3, [pc, #72]	; (800c484 <vPortExitCritical+0x50>)
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d10a      	bne.n	800c458 <vPortExitCritical+0x24>
	__asm volatile
 800c442:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c446:	f383 8811 	msr	BASEPRI, r3
 800c44a:	f3bf 8f6f 	isb	sy
 800c44e:	f3bf 8f4f 	dsb	sy
 800c452:	607b      	str	r3, [r7, #4]
}
 800c454:	bf00      	nop
 800c456:	e7fe      	b.n	800c456 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c458:	4b0a      	ldr	r3, [pc, #40]	; (800c484 <vPortExitCritical+0x50>)
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	3b01      	subs	r3, #1
 800c45e:	4a09      	ldr	r2, [pc, #36]	; (800c484 <vPortExitCritical+0x50>)
 800c460:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c462:	4b08      	ldr	r3, [pc, #32]	; (800c484 <vPortExitCritical+0x50>)
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	2b00      	cmp	r3, #0
 800c468:	d105      	bne.n	800c476 <vPortExitCritical+0x42>
 800c46a:	2300      	movs	r3, #0
 800c46c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c46e:	683b      	ldr	r3, [r7, #0]
 800c470:	f383 8811 	msr	BASEPRI, r3
}
 800c474:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c476:	bf00      	nop
 800c478:	370c      	adds	r7, #12
 800c47a:	46bd      	mov	sp, r7
 800c47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c480:	4770      	bx	lr
 800c482:	bf00      	nop
 800c484:	200000b4 	.word	0x200000b4
	...

0800c490 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c490:	f3ef 8009 	mrs	r0, PSP
 800c494:	f3bf 8f6f 	isb	sy
 800c498:	4b15      	ldr	r3, [pc, #84]	; (800c4f0 <pxCurrentTCBConst>)
 800c49a:	681a      	ldr	r2, [r3, #0]
 800c49c:	f01e 0f10 	tst.w	lr, #16
 800c4a0:	bf08      	it	eq
 800c4a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c4a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4aa:	6010      	str	r0, [r2, #0]
 800c4ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c4b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c4b4:	f380 8811 	msr	BASEPRI, r0
 800c4b8:	f3bf 8f4f 	dsb	sy
 800c4bc:	f3bf 8f6f 	isb	sy
 800c4c0:	f7fe fdf0 	bl	800b0a4 <vTaskSwitchContext>
 800c4c4:	f04f 0000 	mov.w	r0, #0
 800c4c8:	f380 8811 	msr	BASEPRI, r0
 800c4cc:	bc09      	pop	{r0, r3}
 800c4ce:	6819      	ldr	r1, [r3, #0]
 800c4d0:	6808      	ldr	r0, [r1, #0]
 800c4d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4d6:	f01e 0f10 	tst.w	lr, #16
 800c4da:	bf08      	it	eq
 800c4dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c4e0:	f380 8809 	msr	PSP, r0
 800c4e4:	f3bf 8f6f 	isb	sy
 800c4e8:	4770      	bx	lr
 800c4ea:	bf00      	nop
 800c4ec:	f3af 8000 	nop.w

0800c4f0 <pxCurrentTCBConst>:
 800c4f0:	200012b0 	.word	0x200012b0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c4f4:	bf00      	nop
 800c4f6:	bf00      	nop

0800c4f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c4f8:	b580      	push	{r7, lr}
 800c4fa:	b082      	sub	sp, #8
 800c4fc:	af00      	add	r7, sp, #0
	__asm volatile
 800c4fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c502:	f383 8811 	msr	BASEPRI, r3
 800c506:	f3bf 8f6f 	isb	sy
 800c50a:	f3bf 8f4f 	dsb	sy
 800c50e:	607b      	str	r3, [r7, #4]
}
 800c510:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c512:	f7fe fd0f 	bl	800af34 <xTaskIncrementTick>
 800c516:	4603      	mov	r3, r0
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d003      	beq.n	800c524 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c51c:	4b06      	ldr	r3, [pc, #24]	; (800c538 <xPortSysTickHandler+0x40>)
 800c51e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c522:	601a      	str	r2, [r3, #0]
 800c524:	2300      	movs	r3, #0
 800c526:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c528:	683b      	ldr	r3, [r7, #0]
 800c52a:	f383 8811 	msr	BASEPRI, r3
}
 800c52e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c530:	bf00      	nop
 800c532:	3708      	adds	r7, #8
 800c534:	46bd      	mov	sp, r7
 800c536:	bd80      	pop	{r7, pc}
 800c538:	e000ed04 	.word	0xe000ed04

0800c53c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c53c:	b480      	push	{r7}
 800c53e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c540:	4b0b      	ldr	r3, [pc, #44]	; (800c570 <vPortSetupTimerInterrupt+0x34>)
 800c542:	2200      	movs	r2, #0
 800c544:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c546:	4b0b      	ldr	r3, [pc, #44]	; (800c574 <vPortSetupTimerInterrupt+0x38>)
 800c548:	2200      	movs	r2, #0
 800c54a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c54c:	4b0a      	ldr	r3, [pc, #40]	; (800c578 <vPortSetupTimerInterrupt+0x3c>)
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	4a0a      	ldr	r2, [pc, #40]	; (800c57c <vPortSetupTimerInterrupt+0x40>)
 800c552:	fba2 2303 	umull	r2, r3, r2, r3
 800c556:	099b      	lsrs	r3, r3, #6
 800c558:	4a09      	ldr	r2, [pc, #36]	; (800c580 <vPortSetupTimerInterrupt+0x44>)
 800c55a:	3b01      	subs	r3, #1
 800c55c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c55e:	4b04      	ldr	r3, [pc, #16]	; (800c570 <vPortSetupTimerInterrupt+0x34>)
 800c560:	2207      	movs	r2, #7
 800c562:	601a      	str	r2, [r3, #0]
}
 800c564:	bf00      	nop
 800c566:	46bd      	mov	sp, r7
 800c568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c56c:	4770      	bx	lr
 800c56e:	bf00      	nop
 800c570:	e000e010 	.word	0xe000e010
 800c574:	e000e018 	.word	0xe000e018
 800c578:	200000a8 	.word	0x200000a8
 800c57c:	10624dd3 	.word	0x10624dd3
 800c580:	e000e014 	.word	0xe000e014

0800c584 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c584:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c594 <vPortEnableVFP+0x10>
 800c588:	6801      	ldr	r1, [r0, #0]
 800c58a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c58e:	6001      	str	r1, [r0, #0]
 800c590:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c592:	bf00      	nop
 800c594:	e000ed88 	.word	0xe000ed88

0800c598 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c598:	b480      	push	{r7}
 800c59a:	b085      	sub	sp, #20
 800c59c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c59e:	f3ef 8305 	mrs	r3, IPSR
 800c5a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	2b0f      	cmp	r3, #15
 800c5a8:	d914      	bls.n	800c5d4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c5aa:	4a17      	ldr	r2, [pc, #92]	; (800c608 <vPortValidateInterruptPriority+0x70>)
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	4413      	add	r3, r2
 800c5b0:	781b      	ldrb	r3, [r3, #0]
 800c5b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c5b4:	4b15      	ldr	r3, [pc, #84]	; (800c60c <vPortValidateInterruptPriority+0x74>)
 800c5b6:	781b      	ldrb	r3, [r3, #0]
 800c5b8:	7afa      	ldrb	r2, [r7, #11]
 800c5ba:	429a      	cmp	r2, r3
 800c5bc:	d20a      	bcs.n	800c5d4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800c5be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5c2:	f383 8811 	msr	BASEPRI, r3
 800c5c6:	f3bf 8f6f 	isb	sy
 800c5ca:	f3bf 8f4f 	dsb	sy
 800c5ce:	607b      	str	r3, [r7, #4]
}
 800c5d0:	bf00      	nop
 800c5d2:	e7fe      	b.n	800c5d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c5d4:	4b0e      	ldr	r3, [pc, #56]	; (800c610 <vPortValidateInterruptPriority+0x78>)
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c5dc:	4b0d      	ldr	r3, [pc, #52]	; (800c614 <vPortValidateInterruptPriority+0x7c>)
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	429a      	cmp	r2, r3
 800c5e2:	d90a      	bls.n	800c5fa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800c5e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5e8:	f383 8811 	msr	BASEPRI, r3
 800c5ec:	f3bf 8f6f 	isb	sy
 800c5f0:	f3bf 8f4f 	dsb	sy
 800c5f4:	603b      	str	r3, [r7, #0]
}
 800c5f6:	bf00      	nop
 800c5f8:	e7fe      	b.n	800c5f8 <vPortValidateInterruptPriority+0x60>
	}
 800c5fa:	bf00      	nop
 800c5fc:	3714      	adds	r7, #20
 800c5fe:	46bd      	mov	sp, r7
 800c600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c604:	4770      	bx	lr
 800c606:	bf00      	nop
 800c608:	e000e3f0 	.word	0xe000e3f0
 800c60c:	20001418 	.word	0x20001418
 800c610:	e000ed0c 	.word	0xe000ed0c
 800c614:	2000141c 	.word	0x2000141c

0800c618 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c618:	b580      	push	{r7, lr}
 800c61a:	b08a      	sub	sp, #40	; 0x28
 800c61c:	af00      	add	r7, sp, #0
 800c61e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c620:	2300      	movs	r3, #0
 800c622:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c624:	f7fe fbba 	bl	800ad9c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c628:	4b5b      	ldr	r3, [pc, #364]	; (800c798 <pvPortMalloc+0x180>)
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d101      	bne.n	800c634 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c630:	f000 f920 	bl	800c874 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c634:	4b59      	ldr	r3, [pc, #356]	; (800c79c <pvPortMalloc+0x184>)
 800c636:	681a      	ldr	r2, [r3, #0]
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	4013      	ands	r3, r2
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	f040 8093 	bne.w	800c768 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	2b00      	cmp	r3, #0
 800c646:	d01d      	beq.n	800c684 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c648:	2208      	movs	r2, #8
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	4413      	add	r3, r2
 800c64e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	f003 0307 	and.w	r3, r3, #7
 800c656:	2b00      	cmp	r3, #0
 800c658:	d014      	beq.n	800c684 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	f023 0307 	bic.w	r3, r3, #7
 800c660:	3308      	adds	r3, #8
 800c662:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	f003 0307 	and.w	r3, r3, #7
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d00a      	beq.n	800c684 <pvPortMalloc+0x6c>
	__asm volatile
 800c66e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c672:	f383 8811 	msr	BASEPRI, r3
 800c676:	f3bf 8f6f 	isb	sy
 800c67a:	f3bf 8f4f 	dsb	sy
 800c67e:	617b      	str	r3, [r7, #20]
}
 800c680:	bf00      	nop
 800c682:	e7fe      	b.n	800c682 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	2b00      	cmp	r3, #0
 800c688:	d06e      	beq.n	800c768 <pvPortMalloc+0x150>
 800c68a:	4b45      	ldr	r3, [pc, #276]	; (800c7a0 <pvPortMalloc+0x188>)
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	687a      	ldr	r2, [r7, #4]
 800c690:	429a      	cmp	r2, r3
 800c692:	d869      	bhi.n	800c768 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c694:	4b43      	ldr	r3, [pc, #268]	; (800c7a4 <pvPortMalloc+0x18c>)
 800c696:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c698:	4b42      	ldr	r3, [pc, #264]	; (800c7a4 <pvPortMalloc+0x18c>)
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c69e:	e004      	b.n	800c6aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c6a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c6a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c6aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6ac:	685b      	ldr	r3, [r3, #4]
 800c6ae:	687a      	ldr	r2, [r7, #4]
 800c6b0:	429a      	cmp	r2, r3
 800c6b2:	d903      	bls.n	800c6bc <pvPortMalloc+0xa4>
 800c6b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d1f1      	bne.n	800c6a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c6bc:	4b36      	ldr	r3, [pc, #216]	; (800c798 <pvPortMalloc+0x180>)
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c6c2:	429a      	cmp	r2, r3
 800c6c4:	d050      	beq.n	800c768 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c6c6:	6a3b      	ldr	r3, [r7, #32]
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	2208      	movs	r2, #8
 800c6cc:	4413      	add	r3, r2
 800c6ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c6d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6d2:	681a      	ldr	r2, [r3, #0]
 800c6d4:	6a3b      	ldr	r3, [r7, #32]
 800c6d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c6d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6da:	685a      	ldr	r2, [r3, #4]
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	1ad2      	subs	r2, r2, r3
 800c6e0:	2308      	movs	r3, #8
 800c6e2:	005b      	lsls	r3, r3, #1
 800c6e4:	429a      	cmp	r2, r3
 800c6e6:	d91f      	bls.n	800c728 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c6e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	4413      	add	r3, r2
 800c6ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c6f0:	69bb      	ldr	r3, [r7, #24]
 800c6f2:	f003 0307 	and.w	r3, r3, #7
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d00a      	beq.n	800c710 <pvPortMalloc+0xf8>
	__asm volatile
 800c6fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6fe:	f383 8811 	msr	BASEPRI, r3
 800c702:	f3bf 8f6f 	isb	sy
 800c706:	f3bf 8f4f 	dsb	sy
 800c70a:	613b      	str	r3, [r7, #16]
}
 800c70c:	bf00      	nop
 800c70e:	e7fe      	b.n	800c70e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c712:	685a      	ldr	r2, [r3, #4]
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	1ad2      	subs	r2, r2, r3
 800c718:	69bb      	ldr	r3, [r7, #24]
 800c71a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c71c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c71e:	687a      	ldr	r2, [r7, #4]
 800c720:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c722:	69b8      	ldr	r0, [r7, #24]
 800c724:	f000 f908 	bl	800c938 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c728:	4b1d      	ldr	r3, [pc, #116]	; (800c7a0 <pvPortMalloc+0x188>)
 800c72a:	681a      	ldr	r2, [r3, #0]
 800c72c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c72e:	685b      	ldr	r3, [r3, #4]
 800c730:	1ad3      	subs	r3, r2, r3
 800c732:	4a1b      	ldr	r2, [pc, #108]	; (800c7a0 <pvPortMalloc+0x188>)
 800c734:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c736:	4b1a      	ldr	r3, [pc, #104]	; (800c7a0 <pvPortMalloc+0x188>)
 800c738:	681a      	ldr	r2, [r3, #0]
 800c73a:	4b1b      	ldr	r3, [pc, #108]	; (800c7a8 <pvPortMalloc+0x190>)
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	429a      	cmp	r2, r3
 800c740:	d203      	bcs.n	800c74a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c742:	4b17      	ldr	r3, [pc, #92]	; (800c7a0 <pvPortMalloc+0x188>)
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	4a18      	ldr	r2, [pc, #96]	; (800c7a8 <pvPortMalloc+0x190>)
 800c748:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c74a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c74c:	685a      	ldr	r2, [r3, #4]
 800c74e:	4b13      	ldr	r3, [pc, #76]	; (800c79c <pvPortMalloc+0x184>)
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	431a      	orrs	r2, r3
 800c754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c756:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c75a:	2200      	movs	r2, #0
 800c75c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c75e:	4b13      	ldr	r3, [pc, #76]	; (800c7ac <pvPortMalloc+0x194>)
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	3301      	adds	r3, #1
 800c764:	4a11      	ldr	r2, [pc, #68]	; (800c7ac <pvPortMalloc+0x194>)
 800c766:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c768:	f7fe fb26 	bl	800adb8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c76c:	69fb      	ldr	r3, [r7, #28]
 800c76e:	f003 0307 	and.w	r3, r3, #7
 800c772:	2b00      	cmp	r3, #0
 800c774:	d00a      	beq.n	800c78c <pvPortMalloc+0x174>
	__asm volatile
 800c776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c77a:	f383 8811 	msr	BASEPRI, r3
 800c77e:	f3bf 8f6f 	isb	sy
 800c782:	f3bf 8f4f 	dsb	sy
 800c786:	60fb      	str	r3, [r7, #12]
}
 800c788:	bf00      	nop
 800c78a:	e7fe      	b.n	800c78a <pvPortMalloc+0x172>
	return pvReturn;
 800c78c:	69fb      	ldr	r3, [r7, #28]
}
 800c78e:	4618      	mov	r0, r3
 800c790:	3728      	adds	r7, #40	; 0x28
 800c792:	46bd      	mov	sp, r7
 800c794:	bd80      	pop	{r7, pc}
 800c796:	bf00      	nop
 800c798:	2000a028 	.word	0x2000a028
 800c79c:	2000a03c 	.word	0x2000a03c
 800c7a0:	2000a02c 	.word	0x2000a02c
 800c7a4:	2000a020 	.word	0x2000a020
 800c7a8:	2000a030 	.word	0x2000a030
 800c7ac:	2000a034 	.word	0x2000a034

0800c7b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c7b0:	b580      	push	{r7, lr}
 800c7b2:	b086      	sub	sp, #24
 800c7b4:	af00      	add	r7, sp, #0
 800c7b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d04d      	beq.n	800c85e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c7c2:	2308      	movs	r3, #8
 800c7c4:	425b      	negs	r3, r3
 800c7c6:	697a      	ldr	r2, [r7, #20]
 800c7c8:	4413      	add	r3, r2
 800c7ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c7cc:	697b      	ldr	r3, [r7, #20]
 800c7ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c7d0:	693b      	ldr	r3, [r7, #16]
 800c7d2:	685a      	ldr	r2, [r3, #4]
 800c7d4:	4b24      	ldr	r3, [pc, #144]	; (800c868 <vPortFree+0xb8>)
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	4013      	ands	r3, r2
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d10a      	bne.n	800c7f4 <vPortFree+0x44>
	__asm volatile
 800c7de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7e2:	f383 8811 	msr	BASEPRI, r3
 800c7e6:	f3bf 8f6f 	isb	sy
 800c7ea:	f3bf 8f4f 	dsb	sy
 800c7ee:	60fb      	str	r3, [r7, #12]
}
 800c7f0:	bf00      	nop
 800c7f2:	e7fe      	b.n	800c7f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c7f4:	693b      	ldr	r3, [r7, #16]
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d00a      	beq.n	800c812 <vPortFree+0x62>
	__asm volatile
 800c7fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c800:	f383 8811 	msr	BASEPRI, r3
 800c804:	f3bf 8f6f 	isb	sy
 800c808:	f3bf 8f4f 	dsb	sy
 800c80c:	60bb      	str	r3, [r7, #8]
}
 800c80e:	bf00      	nop
 800c810:	e7fe      	b.n	800c810 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c812:	693b      	ldr	r3, [r7, #16]
 800c814:	685a      	ldr	r2, [r3, #4]
 800c816:	4b14      	ldr	r3, [pc, #80]	; (800c868 <vPortFree+0xb8>)
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	4013      	ands	r3, r2
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d01e      	beq.n	800c85e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c820:	693b      	ldr	r3, [r7, #16]
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	2b00      	cmp	r3, #0
 800c826:	d11a      	bne.n	800c85e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c828:	693b      	ldr	r3, [r7, #16]
 800c82a:	685a      	ldr	r2, [r3, #4]
 800c82c:	4b0e      	ldr	r3, [pc, #56]	; (800c868 <vPortFree+0xb8>)
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	43db      	mvns	r3, r3
 800c832:	401a      	ands	r2, r3
 800c834:	693b      	ldr	r3, [r7, #16]
 800c836:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c838:	f7fe fab0 	bl	800ad9c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c83c:	693b      	ldr	r3, [r7, #16]
 800c83e:	685a      	ldr	r2, [r3, #4]
 800c840:	4b0a      	ldr	r3, [pc, #40]	; (800c86c <vPortFree+0xbc>)
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	4413      	add	r3, r2
 800c846:	4a09      	ldr	r2, [pc, #36]	; (800c86c <vPortFree+0xbc>)
 800c848:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c84a:	6938      	ldr	r0, [r7, #16]
 800c84c:	f000 f874 	bl	800c938 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c850:	4b07      	ldr	r3, [pc, #28]	; (800c870 <vPortFree+0xc0>)
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	3301      	adds	r3, #1
 800c856:	4a06      	ldr	r2, [pc, #24]	; (800c870 <vPortFree+0xc0>)
 800c858:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c85a:	f7fe faad 	bl	800adb8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c85e:	bf00      	nop
 800c860:	3718      	adds	r7, #24
 800c862:	46bd      	mov	sp, r7
 800c864:	bd80      	pop	{r7, pc}
 800c866:	bf00      	nop
 800c868:	2000a03c 	.word	0x2000a03c
 800c86c:	2000a02c 	.word	0x2000a02c
 800c870:	2000a038 	.word	0x2000a038

0800c874 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c874:	b480      	push	{r7}
 800c876:	b085      	sub	sp, #20
 800c878:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c87a:	f44f 430c 	mov.w	r3, #35840	; 0x8c00
 800c87e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c880:	4b27      	ldr	r3, [pc, #156]	; (800c920 <prvHeapInit+0xac>)
 800c882:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	f003 0307 	and.w	r3, r3, #7
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d00c      	beq.n	800c8a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	3307      	adds	r3, #7
 800c892:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	f023 0307 	bic.w	r3, r3, #7
 800c89a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c89c:	68ba      	ldr	r2, [r7, #8]
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	1ad3      	subs	r3, r2, r3
 800c8a2:	4a1f      	ldr	r2, [pc, #124]	; (800c920 <prvHeapInit+0xac>)
 800c8a4:	4413      	add	r3, r2
 800c8a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c8ac:	4a1d      	ldr	r2, [pc, #116]	; (800c924 <prvHeapInit+0xb0>)
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c8b2:	4b1c      	ldr	r3, [pc, #112]	; (800c924 <prvHeapInit+0xb0>)
 800c8b4:	2200      	movs	r2, #0
 800c8b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	68ba      	ldr	r2, [r7, #8]
 800c8bc:	4413      	add	r3, r2
 800c8be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c8c0:	2208      	movs	r2, #8
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	1a9b      	subs	r3, r3, r2
 800c8c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	f023 0307 	bic.w	r3, r3, #7
 800c8ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	4a15      	ldr	r2, [pc, #84]	; (800c928 <prvHeapInit+0xb4>)
 800c8d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c8d6:	4b14      	ldr	r3, [pc, #80]	; (800c928 <prvHeapInit+0xb4>)
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	2200      	movs	r2, #0
 800c8dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c8de:	4b12      	ldr	r3, [pc, #72]	; (800c928 <prvHeapInit+0xb4>)
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	2200      	movs	r2, #0
 800c8e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c8ea:	683b      	ldr	r3, [r7, #0]
 800c8ec:	68fa      	ldr	r2, [r7, #12]
 800c8ee:	1ad2      	subs	r2, r2, r3
 800c8f0:	683b      	ldr	r3, [r7, #0]
 800c8f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c8f4:	4b0c      	ldr	r3, [pc, #48]	; (800c928 <prvHeapInit+0xb4>)
 800c8f6:	681a      	ldr	r2, [r3, #0]
 800c8f8:	683b      	ldr	r3, [r7, #0]
 800c8fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c8fc:	683b      	ldr	r3, [r7, #0]
 800c8fe:	685b      	ldr	r3, [r3, #4]
 800c900:	4a0a      	ldr	r2, [pc, #40]	; (800c92c <prvHeapInit+0xb8>)
 800c902:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c904:	683b      	ldr	r3, [r7, #0]
 800c906:	685b      	ldr	r3, [r3, #4]
 800c908:	4a09      	ldr	r2, [pc, #36]	; (800c930 <prvHeapInit+0xbc>)
 800c90a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c90c:	4b09      	ldr	r3, [pc, #36]	; (800c934 <prvHeapInit+0xc0>)
 800c90e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c912:	601a      	str	r2, [r3, #0]
}
 800c914:	bf00      	nop
 800c916:	3714      	adds	r7, #20
 800c918:	46bd      	mov	sp, r7
 800c91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c91e:	4770      	bx	lr
 800c920:	20001420 	.word	0x20001420
 800c924:	2000a020 	.word	0x2000a020
 800c928:	2000a028 	.word	0x2000a028
 800c92c:	2000a030 	.word	0x2000a030
 800c930:	2000a02c 	.word	0x2000a02c
 800c934:	2000a03c 	.word	0x2000a03c

0800c938 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c938:	b480      	push	{r7}
 800c93a:	b085      	sub	sp, #20
 800c93c:	af00      	add	r7, sp, #0
 800c93e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c940:	4b28      	ldr	r3, [pc, #160]	; (800c9e4 <prvInsertBlockIntoFreeList+0xac>)
 800c942:	60fb      	str	r3, [r7, #12]
 800c944:	e002      	b.n	800c94c <prvInsertBlockIntoFreeList+0x14>
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	60fb      	str	r3, [r7, #12]
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	687a      	ldr	r2, [r7, #4]
 800c952:	429a      	cmp	r2, r3
 800c954:	d8f7      	bhi.n	800c946 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	685b      	ldr	r3, [r3, #4]
 800c95e:	68ba      	ldr	r2, [r7, #8]
 800c960:	4413      	add	r3, r2
 800c962:	687a      	ldr	r2, [r7, #4]
 800c964:	429a      	cmp	r2, r3
 800c966:	d108      	bne.n	800c97a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	685a      	ldr	r2, [r3, #4]
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	685b      	ldr	r3, [r3, #4]
 800c970:	441a      	add	r2, r3
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	685b      	ldr	r3, [r3, #4]
 800c982:	68ba      	ldr	r2, [r7, #8]
 800c984:	441a      	add	r2, r3
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	429a      	cmp	r2, r3
 800c98c:	d118      	bne.n	800c9c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c98e:	68fb      	ldr	r3, [r7, #12]
 800c990:	681a      	ldr	r2, [r3, #0]
 800c992:	4b15      	ldr	r3, [pc, #84]	; (800c9e8 <prvInsertBlockIntoFreeList+0xb0>)
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	429a      	cmp	r2, r3
 800c998:	d00d      	beq.n	800c9b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	685a      	ldr	r2, [r3, #4]
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	685b      	ldr	r3, [r3, #4]
 800c9a4:	441a      	add	r2, r3
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	681a      	ldr	r2, [r3, #0]
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	601a      	str	r2, [r3, #0]
 800c9b4:	e008      	b.n	800c9c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c9b6:	4b0c      	ldr	r3, [pc, #48]	; (800c9e8 <prvInsertBlockIntoFreeList+0xb0>)
 800c9b8:	681a      	ldr	r2, [r3, #0]
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	601a      	str	r2, [r3, #0]
 800c9be:	e003      	b.n	800c9c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	681a      	ldr	r2, [r3, #0]
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c9c8:	68fa      	ldr	r2, [r7, #12]
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	429a      	cmp	r2, r3
 800c9ce:	d002      	beq.n	800c9d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	687a      	ldr	r2, [r7, #4]
 800c9d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c9d6:	bf00      	nop
 800c9d8:	3714      	adds	r7, #20
 800c9da:	46bd      	mov	sp, r7
 800c9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9e0:	4770      	bx	lr
 800c9e2:	bf00      	nop
 800c9e4:	2000a020 	.word	0x2000a020
 800c9e8:	2000a028 	.word	0x2000a028

0800c9ec <netifapi_do_netif_common>:
 * Call the "errtfunc" (or the "voidfunc" if "errtfunc" is NULL) inside the
 * tcpip_thread context.
 */
static err_t
netifapi_do_netif_common(struct tcpip_api_call_data *m)
{
 800c9ec:	b580      	push	{r7, lr}
 800c9ee:	b084      	sub	sp, #16
 800c9f0:	af00      	add	r7, sp, #0
 800c9f2:	6078      	str	r0, [r7, #4]
  /* cast through void* to silence alignment warnings.
   * We know it works because the structs have been instantiated as struct netifapi_msg */
  struct netifapi_msg *msg = (struct netifapi_msg *)(void *)m;
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	60fb      	str	r3, [r7, #12]

  if (msg->msg.common.errtfunc != NULL) {
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	68db      	ldr	r3, [r3, #12]
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d007      	beq.n	800ca10 <netifapi_do_netif_common+0x24>
    return msg->msg.common.errtfunc(msg->netif);
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	68db      	ldr	r3, [r3, #12]
 800ca04:	68fa      	ldr	r2, [r7, #12]
 800ca06:	6852      	ldr	r2, [r2, #4]
 800ca08:	4610      	mov	r0, r2
 800ca0a:	4798      	blx	r3
 800ca0c:	4603      	mov	r3, r0
 800ca0e:	e006      	b.n	800ca1e <netifapi_do_netif_common+0x32>
  } else {
    msg->msg.common.voidfunc(msg->netif);
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	689b      	ldr	r3, [r3, #8]
 800ca14:	68fa      	ldr	r2, [r7, #12]
 800ca16:	6852      	ldr	r2, [r2, #4]
 800ca18:	4610      	mov	r0, r2
 800ca1a:	4798      	blx	r3
    return ERR_OK;
 800ca1c:	2300      	movs	r3, #0
  }
}
 800ca1e:	4618      	mov	r0, r3
 800ca20:	3710      	adds	r7, #16
 800ca22:	46bd      	mov	sp, r7
 800ca24:	bd80      	pop	{r7, pc}
	...

0800ca28 <netifapi_netif_common>:
 * @note use only for functions where there is only "netif" parameter.
 */
err_t
netifapi_netif_common(struct netif *netif, netifapi_void_fn voidfunc,
                      netifapi_errt_fn errtfunc)
{
 800ca28:	b580      	push	{r7, lr}
 800ca2a:	b08e      	sub	sp, #56	; 0x38
 800ca2c:	af00      	add	r7, sp, #0
 800ca2e:	60f8      	str	r0, [r7, #12]
 800ca30:	60b9      	str	r1, [r7, #8]
 800ca32:	607a      	str	r2, [r7, #4]
  err_t err;
  NETIFAPI_VAR_DECLARE(msg);
  NETIFAPI_VAR_ALLOC(msg);

  NETIFAPI_VAR_REF(msg).netif = netif;
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	61bb      	str	r3, [r7, #24]
  NETIFAPI_VAR_REF(msg).msg.common.voidfunc = voidfunc;
 800ca38:	68bb      	ldr	r3, [r7, #8]
 800ca3a:	61fb      	str	r3, [r7, #28]
  NETIFAPI_VAR_REF(msg).msg.common.errtfunc = errtfunc;
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	623b      	str	r3, [r7, #32]
  err = tcpip_api_call(netifapi_do_netif_common, &API_VAR_REF(msg).call);
 800ca40:	f107 0314 	add.w	r3, r7, #20
 800ca44:	4619      	mov	r1, r3
 800ca46:	4806      	ldr	r0, [pc, #24]	; (800ca60 <netifapi_netif_common+0x38>)
 800ca48:	f000 f99a 	bl	800cd80 <tcpip_api_call>
 800ca4c:	4603      	mov	r3, r0
 800ca4e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  NETIFAPI_VAR_FREE(msg);
  return err;
 800ca52:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800ca56:	4618      	mov	r0, r3
 800ca58:	3738      	adds	r7, #56	; 0x38
 800ca5a:	46bd      	mov	sp, r7
 800ca5c:	bd80      	pop	{r7, pc}
 800ca5e:	bf00      	nop
 800ca60:	0800c9ed 	.word	0x0800c9ed

0800ca64 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800ca64:	b580      	push	{r7, lr}
 800ca66:	b084      	sub	sp, #16
 800ca68:	af00      	add	r7, sp, #0
 800ca6a:	6078      	str	r0, [r7, #4]
 800ca6c:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800ca6e:	f007 fe33 	bl	80146d8 <sys_timeouts_sleeptime>
 800ca72:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca7a:	d10b      	bne.n	800ca94 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800ca7c:	4813      	ldr	r0, [pc, #76]	; (800cacc <tcpip_timeouts_mbox_fetch+0x68>)
 800ca7e:	f00d f8be 	bl	8019bfe <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800ca82:	2200      	movs	r2, #0
 800ca84:	6839      	ldr	r1, [r7, #0]
 800ca86:	6878      	ldr	r0, [r7, #4]
 800ca88:	f00d f832 	bl	8019af0 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800ca8c:	480f      	ldr	r0, [pc, #60]	; (800cacc <tcpip_timeouts_mbox_fetch+0x68>)
 800ca8e:	f00d f8a7 	bl	8019be0 <sys_mutex_lock>
    return;
 800ca92:	e018      	b.n	800cac6 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d102      	bne.n	800caa0 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800ca9a:	f007 fde3 	bl	8014664 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800ca9e:	e7e6      	b.n	800ca6e <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800caa0:	480a      	ldr	r0, [pc, #40]	; (800cacc <tcpip_timeouts_mbox_fetch+0x68>)
 800caa2:	f00d f8ac 	bl	8019bfe <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800caa6:	68fa      	ldr	r2, [r7, #12]
 800caa8:	6839      	ldr	r1, [r7, #0]
 800caaa:	6878      	ldr	r0, [r7, #4]
 800caac:	f00d f820 	bl	8019af0 <sys_arch_mbox_fetch>
 800cab0:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800cab2:	4806      	ldr	r0, [pc, #24]	; (800cacc <tcpip_timeouts_mbox_fetch+0x68>)
 800cab4:	f00d f894 	bl	8019be0 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800cab8:	68bb      	ldr	r3, [r7, #8]
 800caba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cabe:	d102      	bne.n	800cac6 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800cac0:	f007 fdd0 	bl	8014664 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800cac4:	e7d3      	b.n	800ca6e <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800cac6:	3710      	adds	r7, #16
 800cac8:	46bd      	mov	sp, r7
 800caca:	bd80      	pop	{r7, pc}
 800cacc:	2000a04c 	.word	0x2000a04c

0800cad0 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800cad0:	b580      	push	{r7, lr}
 800cad2:	b084      	sub	sp, #16
 800cad4:	af00      	add	r7, sp, #0
 800cad6:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800cad8:	4810      	ldr	r0, [pc, #64]	; (800cb1c <tcpip_thread+0x4c>)
 800cada:	f00d f881 	bl	8019be0 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800cade:	4b10      	ldr	r3, [pc, #64]	; (800cb20 <tcpip_thread+0x50>)
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d005      	beq.n	800caf2 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800cae6:	4b0e      	ldr	r3, [pc, #56]	; (800cb20 <tcpip_thread+0x50>)
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	4a0e      	ldr	r2, [pc, #56]	; (800cb24 <tcpip_thread+0x54>)
 800caec:	6812      	ldr	r2, [r2, #0]
 800caee:	4610      	mov	r0, r2
 800caf0:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800caf2:	f107 030c 	add.w	r3, r7, #12
 800caf6:	4619      	mov	r1, r3
 800caf8:	480b      	ldr	r0, [pc, #44]	; (800cb28 <tcpip_thread+0x58>)
 800cafa:	f7ff ffb3 	bl	800ca64 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d106      	bne.n	800cb12 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800cb04:	4b09      	ldr	r3, [pc, #36]	; (800cb2c <tcpip_thread+0x5c>)
 800cb06:	2291      	movs	r2, #145	; 0x91
 800cb08:	4909      	ldr	r1, [pc, #36]	; (800cb30 <tcpip_thread+0x60>)
 800cb0a:	480a      	ldr	r0, [pc, #40]	; (800cb34 <tcpip_thread+0x64>)
 800cb0c:	f00d f9f8 	bl	8019f00 <iprintf>
      continue;
 800cb10:	e003      	b.n	800cb1a <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	4618      	mov	r0, r3
 800cb16:	f000 f80f 	bl	800cb38 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800cb1a:	e7ea      	b.n	800caf2 <tcpip_thread+0x22>
 800cb1c:	2000a04c 	.word	0x2000a04c
 800cb20:	2000a040 	.word	0x2000a040
 800cb24:	2000a044 	.word	0x2000a044
 800cb28:	2000a048 	.word	0x2000a048
 800cb2c:	0801bab0 	.word	0x0801bab0
 800cb30:	0801bae0 	.word	0x0801bae0
 800cb34:	0801bb00 	.word	0x0801bb00

0800cb38 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800cb38:	b580      	push	{r7, lr}
 800cb3a:	b082      	sub	sp, #8
 800cb3c:	af00      	add	r7, sp, #0
 800cb3e:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	781b      	ldrb	r3, [r3, #0]
 800cb44:	2b02      	cmp	r3, #2
 800cb46:	d026      	beq.n	800cb96 <tcpip_thread_handle_msg+0x5e>
 800cb48:	2b02      	cmp	r3, #2
 800cb4a:	dc2b      	bgt.n	800cba4 <tcpip_thread_handle_msg+0x6c>
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d002      	beq.n	800cb56 <tcpip_thread_handle_msg+0x1e>
 800cb50:	2b01      	cmp	r3, #1
 800cb52:	d015      	beq.n	800cb80 <tcpip_thread_handle_msg+0x48>
 800cb54:	e026      	b.n	800cba4 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	68db      	ldr	r3, [r3, #12]
 800cb5a:	687a      	ldr	r2, [r7, #4]
 800cb5c:	6850      	ldr	r0, [r2, #4]
 800cb5e:	687a      	ldr	r2, [r7, #4]
 800cb60:	6892      	ldr	r2, [r2, #8]
 800cb62:	4611      	mov	r1, r2
 800cb64:	4798      	blx	r3
 800cb66:	4603      	mov	r3, r0
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d004      	beq.n	800cb76 <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	685b      	ldr	r3, [r3, #4]
 800cb70:	4618      	mov	r0, r3
 800cb72:	f001 fe89 	bl	800e888 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800cb76:	6879      	ldr	r1, [r7, #4]
 800cb78:	2009      	movs	r0, #9
 800cb7a:	f000 ffe3 	bl	800db44 <memp_free>
      break;
 800cb7e:	e018      	b.n	800cbb2 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	685b      	ldr	r3, [r3, #4]
 800cb84:	687a      	ldr	r2, [r7, #4]
 800cb86:	6892      	ldr	r2, [r2, #8]
 800cb88:	4610      	mov	r0, r2
 800cb8a:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800cb8c:	6879      	ldr	r1, [r7, #4]
 800cb8e:	2008      	movs	r0, #8
 800cb90:	f000 ffd8 	bl	800db44 <memp_free>
      break;
 800cb94:	e00d      	b.n	800cbb2 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	685b      	ldr	r3, [r3, #4]
 800cb9a:	687a      	ldr	r2, [r7, #4]
 800cb9c:	6892      	ldr	r2, [r2, #8]
 800cb9e:	4610      	mov	r0, r2
 800cba0:	4798      	blx	r3
      break;
 800cba2:	e006      	b.n	800cbb2 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800cba4:	4b05      	ldr	r3, [pc, #20]	; (800cbbc <tcpip_thread_handle_msg+0x84>)
 800cba6:	22cf      	movs	r2, #207	; 0xcf
 800cba8:	4905      	ldr	r1, [pc, #20]	; (800cbc0 <tcpip_thread_handle_msg+0x88>)
 800cbaa:	4806      	ldr	r0, [pc, #24]	; (800cbc4 <tcpip_thread_handle_msg+0x8c>)
 800cbac:	f00d f9a8 	bl	8019f00 <iprintf>
      break;
 800cbb0:	bf00      	nop
  }
}
 800cbb2:	bf00      	nop
 800cbb4:	3708      	adds	r7, #8
 800cbb6:	46bd      	mov	sp, r7
 800cbb8:	bd80      	pop	{r7, pc}
 800cbba:	bf00      	nop
 800cbbc:	0801bab0 	.word	0x0801bab0
 800cbc0:	0801bae0 	.word	0x0801bae0
 800cbc4:	0801bb00 	.word	0x0801bb00

0800cbc8 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800cbc8:	b580      	push	{r7, lr}
 800cbca:	b086      	sub	sp, #24
 800cbcc:	af00      	add	r7, sp, #0
 800cbce:	60f8      	str	r0, [r7, #12]
 800cbd0:	60b9      	str	r1, [r7, #8]
 800cbd2:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800cbd4:	481a      	ldr	r0, [pc, #104]	; (800cc40 <tcpip_inpkt+0x78>)
 800cbd6:	f00c ffca 	bl	8019b6e <sys_mbox_valid>
 800cbda:	4603      	mov	r3, r0
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d105      	bne.n	800cbec <tcpip_inpkt+0x24>
 800cbe0:	4b18      	ldr	r3, [pc, #96]	; (800cc44 <tcpip_inpkt+0x7c>)
 800cbe2:	22fc      	movs	r2, #252	; 0xfc
 800cbe4:	4918      	ldr	r1, [pc, #96]	; (800cc48 <tcpip_inpkt+0x80>)
 800cbe6:	4819      	ldr	r0, [pc, #100]	; (800cc4c <tcpip_inpkt+0x84>)
 800cbe8:	f00d f98a 	bl	8019f00 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800cbec:	2009      	movs	r0, #9
 800cbee:	f000 ff57 	bl	800daa0 <memp_malloc>
 800cbf2:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800cbf4:	697b      	ldr	r3, [r7, #20]
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d102      	bne.n	800cc00 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800cbfa:	f04f 33ff 	mov.w	r3, #4294967295
 800cbfe:	e01a      	b.n	800cc36 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800cc00:	697b      	ldr	r3, [r7, #20]
 800cc02:	2200      	movs	r2, #0
 800cc04:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800cc06:	697b      	ldr	r3, [r7, #20]
 800cc08:	68fa      	ldr	r2, [r7, #12]
 800cc0a:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800cc0c:	697b      	ldr	r3, [r7, #20]
 800cc0e:	68ba      	ldr	r2, [r7, #8]
 800cc10:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800cc12:	697b      	ldr	r3, [r7, #20]
 800cc14:	687a      	ldr	r2, [r7, #4]
 800cc16:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800cc18:	6979      	ldr	r1, [r7, #20]
 800cc1a:	4809      	ldr	r0, [pc, #36]	; (800cc40 <tcpip_inpkt+0x78>)
 800cc1c:	f00c ff4e 	bl	8019abc <sys_mbox_trypost>
 800cc20:	4603      	mov	r3, r0
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d006      	beq.n	800cc34 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800cc26:	6979      	ldr	r1, [r7, #20]
 800cc28:	2009      	movs	r0, #9
 800cc2a:	f000 ff8b 	bl	800db44 <memp_free>
    return ERR_MEM;
 800cc2e:	f04f 33ff 	mov.w	r3, #4294967295
 800cc32:	e000      	b.n	800cc36 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800cc34:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800cc36:	4618      	mov	r0, r3
 800cc38:	3718      	adds	r7, #24
 800cc3a:	46bd      	mov	sp, r7
 800cc3c:	bd80      	pop	{r7, pc}
 800cc3e:	bf00      	nop
 800cc40:	2000a048 	.word	0x2000a048
 800cc44:	0801bab0 	.word	0x0801bab0
 800cc48:	0801bb28 	.word	0x0801bb28
 800cc4c:	0801bb00 	.word	0x0801bb00

0800cc50 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800cc50:	b580      	push	{r7, lr}
 800cc52:	b082      	sub	sp, #8
 800cc54:	af00      	add	r7, sp, #0
 800cc56:	6078      	str	r0, [r7, #4]
 800cc58:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800cc5a:	683b      	ldr	r3, [r7, #0]
 800cc5c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800cc60:	f003 0318 	and.w	r3, r3, #24
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d006      	beq.n	800cc76 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800cc68:	4a08      	ldr	r2, [pc, #32]	; (800cc8c <tcpip_input+0x3c>)
 800cc6a:	6839      	ldr	r1, [r7, #0]
 800cc6c:	6878      	ldr	r0, [r7, #4]
 800cc6e:	f7ff ffab 	bl	800cbc8 <tcpip_inpkt>
 800cc72:	4603      	mov	r3, r0
 800cc74:	e005      	b.n	800cc82 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800cc76:	4a06      	ldr	r2, [pc, #24]	; (800cc90 <tcpip_input+0x40>)
 800cc78:	6839      	ldr	r1, [r7, #0]
 800cc7a:	6878      	ldr	r0, [r7, #4]
 800cc7c:	f7ff ffa4 	bl	800cbc8 <tcpip_inpkt>
 800cc80:	4603      	mov	r3, r0
}
 800cc82:	4618      	mov	r0, r3
 800cc84:	3708      	adds	r7, #8
 800cc86:	46bd      	mov	sp, r7
 800cc88:	bd80      	pop	{r7, pc}
 800cc8a:	bf00      	nop
 800cc8c:	080198a9 	.word	0x080198a9
 800cc90:	0801841d 	.word	0x0801841d

0800cc94 <tcpip_callback>:
 *
 * @see tcpip_try_callback
 */
err_t
 tcpip_callback(tcpip_callback_fn function, void *ctx)
{
 800cc94:	b580      	push	{r7, lr}
 800cc96:	b084      	sub	sp, #16
 800cc98:	af00      	add	r7, sp, #0
 800cc9a:	6078      	str	r0, [r7, #4]
 800cc9c:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800cc9e:	4814      	ldr	r0, [pc, #80]	; (800ccf0 <tcpip_callback+0x5c>)
 800cca0:	f00c ff65 	bl	8019b6e <sys_mbox_valid>
 800cca4:	4603      	mov	r3, r0
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d106      	bne.n	800ccb8 <tcpip_callback+0x24>
 800ccaa:	4b12      	ldr	r3, [pc, #72]	; (800ccf4 <tcpip_callback+0x60>)
 800ccac:	f240 1239 	movw	r2, #313	; 0x139
 800ccb0:	4911      	ldr	r1, [pc, #68]	; (800ccf8 <tcpip_callback+0x64>)
 800ccb2:	4812      	ldr	r0, [pc, #72]	; (800ccfc <tcpip_callback+0x68>)
 800ccb4:	f00d f924 	bl	8019f00 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800ccb8:	2008      	movs	r0, #8
 800ccba:	f000 fef1 	bl	800daa0 <memp_malloc>
 800ccbe:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d102      	bne.n	800cccc <tcpip_callback+0x38>
    return ERR_MEM;
 800ccc6:	f04f 33ff 	mov.w	r3, #4294967295
 800ccca:	e00d      	b.n	800cce8 <tcpip_callback+0x54>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	2201      	movs	r2, #1
 800ccd0:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	687a      	ldr	r2, [r7, #4]
 800ccd6:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800ccd8:	68fb      	ldr	r3, [r7, #12]
 800ccda:	683a      	ldr	r2, [r7, #0]
 800ccdc:	609a      	str	r2, [r3, #8]

  sys_mbox_post(&tcpip_mbox, msg);
 800ccde:	68f9      	ldr	r1, [r7, #12]
 800cce0:	4803      	ldr	r0, [pc, #12]	; (800ccf0 <tcpip_callback+0x5c>)
 800cce2:	f00c fed5 	bl	8019a90 <sys_mbox_post>
  return ERR_OK;
 800cce6:	2300      	movs	r3, #0
}
 800cce8:	4618      	mov	r0, r3
 800ccea:	3710      	adds	r7, #16
 800ccec:	46bd      	mov	sp, r7
 800ccee:	bd80      	pop	{r7, pc}
 800ccf0:	2000a048 	.word	0x2000a048
 800ccf4:	0801bab0 	.word	0x0801bab0
 800ccf8:	0801bb28 	.word	0x0801bb28
 800ccfc:	0801bb00 	.word	0x0801bb00

0800cd00 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800cd00:	b580      	push	{r7, lr}
 800cd02:	b084      	sub	sp, #16
 800cd04:	af00      	add	r7, sp, #0
 800cd06:	6078      	str	r0, [r7, #4]
 800cd08:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800cd0a:	4819      	ldr	r0, [pc, #100]	; (800cd70 <tcpip_try_callback+0x70>)
 800cd0c:	f00c ff2f 	bl	8019b6e <sys_mbox_valid>
 800cd10:	4603      	mov	r3, r0
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d106      	bne.n	800cd24 <tcpip_try_callback+0x24>
 800cd16:	4b17      	ldr	r3, [pc, #92]	; (800cd74 <tcpip_try_callback+0x74>)
 800cd18:	f240 125d 	movw	r2, #349	; 0x15d
 800cd1c:	4916      	ldr	r1, [pc, #88]	; (800cd78 <tcpip_try_callback+0x78>)
 800cd1e:	4817      	ldr	r0, [pc, #92]	; (800cd7c <tcpip_try_callback+0x7c>)
 800cd20:	f00d f8ee 	bl	8019f00 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800cd24:	2008      	movs	r0, #8
 800cd26:	f000 febb 	bl	800daa0 <memp_malloc>
 800cd2a:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d102      	bne.n	800cd38 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800cd32:	f04f 33ff 	mov.w	r3, #4294967295
 800cd36:	e017      	b.n	800cd68 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	2201      	movs	r2, #1
 800cd3c:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	687a      	ldr	r2, [r7, #4]
 800cd42:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	683a      	ldr	r2, [r7, #0]
 800cd48:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800cd4a:	68f9      	ldr	r1, [r7, #12]
 800cd4c:	4808      	ldr	r0, [pc, #32]	; (800cd70 <tcpip_try_callback+0x70>)
 800cd4e:	f00c feb5 	bl	8019abc <sys_mbox_trypost>
 800cd52:	4603      	mov	r3, r0
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d006      	beq.n	800cd66 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800cd58:	68f9      	ldr	r1, [r7, #12]
 800cd5a:	2008      	movs	r0, #8
 800cd5c:	f000 fef2 	bl	800db44 <memp_free>
    return ERR_MEM;
 800cd60:	f04f 33ff 	mov.w	r3, #4294967295
 800cd64:	e000      	b.n	800cd68 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800cd66:	2300      	movs	r3, #0
}
 800cd68:	4618      	mov	r0, r3
 800cd6a:	3710      	adds	r7, #16
 800cd6c:	46bd      	mov	sp, r7
 800cd6e:	bd80      	pop	{r7, pc}
 800cd70:	2000a048 	.word	0x2000a048
 800cd74:	0801bab0 	.word	0x0801bab0
 800cd78:	0801bb28 	.word	0x0801bb28
 800cd7c:	0801bb00 	.word	0x0801bb00

0800cd80 <tcpip_api_call>:
 * @param call Call parameters
 * @return Return value from tcpip_api_call_fn
 */
err_t
tcpip_api_call(tcpip_api_call_fn fn, struct tcpip_api_call_data *call)
{
 800cd80:	b580      	push	{r7, lr}
 800cd82:	b084      	sub	sp, #16
 800cd84:	af00      	add	r7, sp, #0
 800cd86:	6078      	str	r0, [r7, #4]
 800cd88:	6039      	str	r1, [r7, #0]
#if LWIP_TCPIP_CORE_LOCKING
  err_t err;
  LOCK_TCPIP_CORE();
 800cd8a:	4808      	ldr	r0, [pc, #32]	; (800cdac <tcpip_api_call+0x2c>)
 800cd8c:	f00c ff28 	bl	8019be0 <sys_mutex_lock>
  err = fn(call);
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	6838      	ldr	r0, [r7, #0]
 800cd94:	4798      	blx	r3
 800cd96:	4603      	mov	r3, r0
 800cd98:	73fb      	strb	r3, [r7, #15]
  UNLOCK_TCPIP_CORE();
 800cd9a:	4804      	ldr	r0, [pc, #16]	; (800cdac <tcpip_api_call+0x2c>)
 800cd9c:	f00c ff2f 	bl	8019bfe <sys_mutex_unlock>
  return err;
 800cda0:	f997 300f 	ldrsb.w	r3, [r7, #15]
  sys_sem_free(&call->sem);
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  return call->err;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800cda4:	4618      	mov	r0, r3
 800cda6:	3710      	adds	r7, #16
 800cda8:	46bd      	mov	sp, r7
 800cdaa:	bd80      	pop	{r7, pc}
 800cdac:	2000a04c 	.word	0x2000a04c

0800cdb0 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800cdb0:	b580      	push	{r7, lr}
 800cdb2:	b084      	sub	sp, #16
 800cdb4:	af02      	add	r7, sp, #8
 800cdb6:	6078      	str	r0, [r7, #4]
 800cdb8:	6039      	str	r1, [r7, #0]
  lwip_init();
 800cdba:	f000 f9ea 	bl	800d192 <lwip_init>

  tcpip_init_done = initfunc;
 800cdbe:	4a17      	ldr	r2, [pc, #92]	; (800ce1c <tcpip_init+0x6c>)
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800cdc4:	4a16      	ldr	r2, [pc, #88]	; (800ce20 <tcpip_init+0x70>)
 800cdc6:	683b      	ldr	r3, [r7, #0]
 800cdc8:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800cdca:	210a      	movs	r1, #10
 800cdcc:	4815      	ldr	r0, [pc, #84]	; (800ce24 <tcpip_init+0x74>)
 800cdce:	f00c fe41 	bl	8019a54 <sys_mbox_new>
 800cdd2:	4603      	mov	r3, r0
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d006      	beq.n	800cde6 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800cdd8:	4b13      	ldr	r3, [pc, #76]	; (800ce28 <tcpip_init+0x78>)
 800cdda:	f240 2261 	movw	r2, #609	; 0x261
 800cdde:	4913      	ldr	r1, [pc, #76]	; (800ce2c <tcpip_init+0x7c>)
 800cde0:	4813      	ldr	r0, [pc, #76]	; (800ce30 <tcpip_init+0x80>)
 800cde2:	f00d f88d 	bl	8019f00 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800cde6:	4813      	ldr	r0, [pc, #76]	; (800ce34 <tcpip_init+0x84>)
 800cde8:	f00c fee0 	bl	8019bac <sys_mutex_new>
 800cdec:	4603      	mov	r3, r0
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d006      	beq.n	800ce00 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800cdf2:	4b0d      	ldr	r3, [pc, #52]	; (800ce28 <tcpip_init+0x78>)
 800cdf4:	f240 2265 	movw	r2, #613	; 0x265
 800cdf8:	490f      	ldr	r1, [pc, #60]	; (800ce38 <tcpip_init+0x88>)
 800cdfa:	480d      	ldr	r0, [pc, #52]	; (800ce30 <tcpip_init+0x80>)
 800cdfc:	f00d f880 	bl	8019f00 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800ce00:	f04f 33ff 	mov.w	r3, #4294967295
 800ce04:	9300      	str	r3, [sp, #0]
 800ce06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ce0a:	2200      	movs	r2, #0
 800ce0c:	490b      	ldr	r1, [pc, #44]	; (800ce3c <tcpip_init+0x8c>)
 800ce0e:	480c      	ldr	r0, [pc, #48]	; (800ce40 <tcpip_init+0x90>)
 800ce10:	f00c ff02 	bl	8019c18 <sys_thread_new>
}
 800ce14:	bf00      	nop
 800ce16:	3708      	adds	r7, #8
 800ce18:	46bd      	mov	sp, r7
 800ce1a:	bd80      	pop	{r7, pc}
 800ce1c:	2000a040 	.word	0x2000a040
 800ce20:	2000a044 	.word	0x2000a044
 800ce24:	2000a048 	.word	0x2000a048
 800ce28:	0801bab0 	.word	0x0801bab0
 800ce2c:	0801bb38 	.word	0x0801bb38
 800ce30:	0801bb00 	.word	0x0801bb00
 800ce34:	2000a04c 	.word	0x2000a04c
 800ce38:	0801bb5c 	.word	0x0801bb5c
 800ce3c:	0800cad1 	.word	0x0800cad1
 800ce40:	0801bb80 	.word	0x0801bb80

0800ce44 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800ce44:	b480      	push	{r7}
 800ce46:	b083      	sub	sp, #12
 800ce48:	af00      	add	r7, sp, #0
 800ce4a:	4603      	mov	r3, r0
 800ce4c:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800ce4e:	88fb      	ldrh	r3, [r7, #6]
 800ce50:	021b      	lsls	r3, r3, #8
 800ce52:	b21a      	sxth	r2, r3
 800ce54:	88fb      	ldrh	r3, [r7, #6]
 800ce56:	0a1b      	lsrs	r3, r3, #8
 800ce58:	b29b      	uxth	r3, r3
 800ce5a:	b21b      	sxth	r3, r3
 800ce5c:	4313      	orrs	r3, r2
 800ce5e:	b21b      	sxth	r3, r3
 800ce60:	b29b      	uxth	r3, r3
}
 800ce62:	4618      	mov	r0, r3
 800ce64:	370c      	adds	r7, #12
 800ce66:	46bd      	mov	sp, r7
 800ce68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce6c:	4770      	bx	lr

0800ce6e <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800ce6e:	b480      	push	{r7}
 800ce70:	b083      	sub	sp, #12
 800ce72:	af00      	add	r7, sp, #0
 800ce74:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	061a      	lsls	r2, r3, #24
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	021b      	lsls	r3, r3, #8
 800ce7e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ce82:	431a      	orrs	r2, r3
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	0a1b      	lsrs	r3, r3, #8
 800ce88:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800ce8c:	431a      	orrs	r2, r3
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	0e1b      	lsrs	r3, r3, #24
 800ce92:	4313      	orrs	r3, r2
}
 800ce94:	4618      	mov	r0, r3
 800ce96:	370c      	adds	r7, #12
 800ce98:	46bd      	mov	sp, r7
 800ce9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce9e:	4770      	bx	lr

0800cea0 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 800cea0:	b480      	push	{r7}
 800cea2:	b089      	sub	sp, #36	; 0x24
 800cea4:	af00      	add	r7, sp, #0
 800cea6:	6078      	str	r0, [r7, #4]
 800cea8:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 800ceae:	2300      	movs	r3, #0
 800ceb0:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 800ceb2:	2300      	movs	r3, #0
 800ceb4:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 800ceb6:	69fb      	ldr	r3, [r7, #28]
 800ceb8:	f003 0301 	and.w	r3, r3, #1
 800cebc:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 800cebe:	693b      	ldr	r3, [r7, #16]
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d00d      	beq.n	800cee0 <lwip_standard_chksum+0x40>
 800cec4:	683b      	ldr	r3, [r7, #0]
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	dd0a      	ble.n	800cee0 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 800ceca:	69fa      	ldr	r2, [r7, #28]
 800cecc:	1c53      	adds	r3, r2, #1
 800cece:	61fb      	str	r3, [r7, #28]
 800ced0:	f107 030e 	add.w	r3, r7, #14
 800ced4:	3301      	adds	r3, #1
 800ced6:	7812      	ldrb	r2, [r2, #0]
 800ced8:	701a      	strb	r2, [r3, #0]
    len--;
 800ceda:	683b      	ldr	r3, [r7, #0]
 800cedc:	3b01      	subs	r3, #1
 800cede:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 800cee0:	69fb      	ldr	r3, [r7, #28]
 800cee2:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 800cee4:	e00a      	b.n	800cefc <lwip_standard_chksum+0x5c>
    sum += *ps++;
 800cee6:	69bb      	ldr	r3, [r7, #24]
 800cee8:	1c9a      	adds	r2, r3, #2
 800ceea:	61ba      	str	r2, [r7, #24]
 800ceec:	881b      	ldrh	r3, [r3, #0]
 800ceee:	461a      	mov	r2, r3
 800cef0:	697b      	ldr	r3, [r7, #20]
 800cef2:	4413      	add	r3, r2
 800cef4:	617b      	str	r3, [r7, #20]
    len -= 2;
 800cef6:	683b      	ldr	r3, [r7, #0]
 800cef8:	3b02      	subs	r3, #2
 800cefa:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 800cefc:	683b      	ldr	r3, [r7, #0]
 800cefe:	2b01      	cmp	r3, #1
 800cf00:	dcf1      	bgt.n	800cee6 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 800cf02:	683b      	ldr	r3, [r7, #0]
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	dd04      	ble.n	800cf12 <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 800cf08:	f107 030e 	add.w	r3, r7, #14
 800cf0c:	69ba      	ldr	r2, [r7, #24]
 800cf0e:	7812      	ldrb	r2, [r2, #0]
 800cf10:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 800cf12:	89fb      	ldrh	r3, [r7, #14]
 800cf14:	461a      	mov	r2, r3
 800cf16:	697b      	ldr	r3, [r7, #20]
 800cf18:	4413      	add	r3, r2
 800cf1a:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 800cf1c:	697b      	ldr	r3, [r7, #20]
 800cf1e:	0c1a      	lsrs	r2, r3, #16
 800cf20:	697b      	ldr	r3, [r7, #20]
 800cf22:	b29b      	uxth	r3, r3
 800cf24:	4413      	add	r3, r2
 800cf26:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 800cf28:	697b      	ldr	r3, [r7, #20]
 800cf2a:	0c1a      	lsrs	r2, r3, #16
 800cf2c:	697b      	ldr	r3, [r7, #20]
 800cf2e:	b29b      	uxth	r3, r3
 800cf30:	4413      	add	r3, r2
 800cf32:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 800cf34:	693b      	ldr	r3, [r7, #16]
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d007      	beq.n	800cf4a <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 800cf3a:	697b      	ldr	r3, [r7, #20]
 800cf3c:	021b      	lsls	r3, r3, #8
 800cf3e:	b29a      	uxth	r2, r3
 800cf40:	697b      	ldr	r3, [r7, #20]
 800cf42:	0a1b      	lsrs	r3, r3, #8
 800cf44:	b2db      	uxtb	r3, r3
 800cf46:	4313      	orrs	r3, r2
 800cf48:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 800cf4a:	697b      	ldr	r3, [r7, #20]
 800cf4c:	b29b      	uxth	r3, r3
}
 800cf4e:	4618      	mov	r0, r3
 800cf50:	3724      	adds	r7, #36	; 0x24
 800cf52:	46bd      	mov	sp, r7
 800cf54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf58:	4770      	bx	lr

0800cf5a <inet_cksum_pseudo_base>:
#endif

/** Parts of the pseudo checksum which are common to IPv4 and IPv6 */
static u16_t
inet_cksum_pseudo_base(struct pbuf *p, u8_t proto, u16_t proto_len, u32_t acc)
{
 800cf5a:	b580      	push	{r7, lr}
 800cf5c:	b086      	sub	sp, #24
 800cf5e:	af00      	add	r7, sp, #0
 800cf60:	60f8      	str	r0, [r7, #12]
 800cf62:	607b      	str	r3, [r7, #4]
 800cf64:	460b      	mov	r3, r1
 800cf66:	72fb      	strb	r3, [r7, #11]
 800cf68:	4613      	mov	r3, r2
 800cf6a:	813b      	strh	r3, [r7, #8]
  struct pbuf *q;
  int swapped = 0;
 800cf6c:	2300      	movs	r3, #0
 800cf6e:	613b      	str	r3, [r7, #16]

  /* iterate through all pbuf in chain */
  for (q = p; q != NULL; q = q->next) {
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	617b      	str	r3, [r7, #20]
 800cf74:	e02b      	b.n	800cfce <inet_cksum_pseudo_base+0x74>
    LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): checksumming pbuf %p (has next %p) \n",
                             (void *)q, (void *)q->next));
    acc += LWIP_CHKSUM(q->payload, q->len);
 800cf76:	697b      	ldr	r3, [r7, #20]
 800cf78:	685a      	ldr	r2, [r3, #4]
 800cf7a:	697b      	ldr	r3, [r7, #20]
 800cf7c:	895b      	ldrh	r3, [r3, #10]
 800cf7e:	4619      	mov	r1, r3
 800cf80:	4610      	mov	r0, r2
 800cf82:	f7ff ff8d 	bl	800cea0 <lwip_standard_chksum>
 800cf86:	4603      	mov	r3, r0
 800cf88:	461a      	mov	r2, r3
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	4413      	add	r3, r2
 800cf8e:	607b      	str	r3, [r7, #4]
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): unwrapped lwip_chksum()=%"X32_F" \n", acc));*/
    /* just executing this next line is probably faster that the if statement needed
       to check whether we really need to execute it, and does no harm */
    acc = FOLD_U32T(acc);
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	0c1a      	lsrs	r2, r3, #16
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	b29b      	uxth	r3, r3
 800cf98:	4413      	add	r3, r2
 800cf9a:	607b      	str	r3, [r7, #4]
    if (q->len % 2 != 0) {
 800cf9c:	697b      	ldr	r3, [r7, #20]
 800cf9e:	895b      	ldrh	r3, [r3, #10]
 800cfa0:	f003 0301 	and.w	r3, r3, #1
 800cfa4:	b29b      	uxth	r3, r3
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d00e      	beq.n	800cfc8 <inet_cksum_pseudo_base+0x6e>
      swapped = !swapped;
 800cfaa:	693b      	ldr	r3, [r7, #16]
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	bf0c      	ite	eq
 800cfb0:	2301      	moveq	r3, #1
 800cfb2:	2300      	movne	r3, #0
 800cfb4:	b2db      	uxtb	r3, r3
 800cfb6:	613b      	str	r3, [r7, #16]
      acc = SWAP_BYTES_IN_WORD(acc);
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	021b      	lsls	r3, r3, #8
 800cfbc:	b29a      	uxth	r2, r3
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	0a1b      	lsrs	r3, r3, #8
 800cfc2:	b2db      	uxtb	r3, r3
 800cfc4:	4313      	orrs	r3, r2
 800cfc6:	607b      	str	r3, [r7, #4]
  for (q = p; q != NULL; q = q->next) {
 800cfc8:	697b      	ldr	r3, [r7, #20]
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	617b      	str	r3, [r7, #20]
 800cfce:	697b      	ldr	r3, [r7, #20]
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d1d0      	bne.n	800cf76 <inet_cksum_pseudo_base+0x1c>
    }
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): wrapped lwip_chksum()=%"X32_F" \n", acc));*/
  }

  if (swapped) {
 800cfd4:	693b      	ldr	r3, [r7, #16]
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d007      	beq.n	800cfea <inet_cksum_pseudo_base+0x90>
    acc = SWAP_BYTES_IN_WORD(acc);
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	021b      	lsls	r3, r3, #8
 800cfde:	b29a      	uxth	r2, r3
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	0a1b      	lsrs	r3, r3, #8
 800cfe4:	b2db      	uxtb	r3, r3
 800cfe6:	4313      	orrs	r3, r2
 800cfe8:	607b      	str	r3, [r7, #4]
  }

  acc += (u32_t)lwip_htons((u16_t)proto);
 800cfea:	7afb      	ldrb	r3, [r7, #11]
 800cfec:	b29b      	uxth	r3, r3
 800cfee:	4618      	mov	r0, r3
 800cff0:	f7ff ff28 	bl	800ce44 <lwip_htons>
 800cff4:	4603      	mov	r3, r0
 800cff6:	461a      	mov	r2, r3
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	4413      	add	r3, r2
 800cffc:	607b      	str	r3, [r7, #4]
  acc += (u32_t)lwip_htons(proto_len);
 800cffe:	893b      	ldrh	r3, [r7, #8]
 800d000:	4618      	mov	r0, r3
 800d002:	f7ff ff1f 	bl	800ce44 <lwip_htons>
 800d006:	4603      	mov	r3, r0
 800d008:	461a      	mov	r2, r3
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	4413      	add	r3, r2
 800d00e:	607b      	str	r3, [r7, #4]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  acc = FOLD_U32T(acc);
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	0c1a      	lsrs	r2, r3, #16
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	b29b      	uxth	r3, r3
 800d018:	4413      	add	r3, r2
 800d01a:	607b      	str	r3, [r7, #4]
  acc = FOLD_U32T(acc);
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	0c1a      	lsrs	r2, r3, #16
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	b29b      	uxth	r3, r3
 800d024:	4413      	add	r3, r2
 800d026:	607b      	str	r3, [r7, #4]
  LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): pbuf chain lwip_chksum()=%"X32_F"\n", acc));
  return (u16_t)~(acc & 0xffffUL);
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	b29b      	uxth	r3, r3
 800d02c:	43db      	mvns	r3, r3
 800d02e:	b29b      	uxth	r3, r3
}
 800d030:	4618      	mov	r0, r3
 800d032:	3718      	adds	r7, #24
 800d034:	46bd      	mov	sp, r7
 800d036:	bd80      	pop	{r7, pc}

0800d038 <inet_chksum_pseudo>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
                   const ip4_addr_t *src, const ip4_addr_t *dest)
{
 800d038:	b580      	push	{r7, lr}
 800d03a:	b086      	sub	sp, #24
 800d03c:	af00      	add	r7, sp, #0
 800d03e:	60f8      	str	r0, [r7, #12]
 800d040:	607b      	str	r3, [r7, #4]
 800d042:	460b      	mov	r3, r1
 800d044:	72fb      	strb	r3, [r7, #11]
 800d046:	4613      	mov	r3, r2
 800d048:	813b      	strh	r3, [r7, #8]
  u32_t acc;
  u32_t addr;

  addr = ip4_addr_get_u32(src);
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	617b      	str	r3, [r7, #20]
  acc = (addr & 0xffffUL);
 800d050:	697b      	ldr	r3, [r7, #20]
 800d052:	b29b      	uxth	r3, r3
 800d054:	613b      	str	r3, [r7, #16]
  acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
 800d056:	697b      	ldr	r3, [r7, #20]
 800d058:	0c1b      	lsrs	r3, r3, #16
 800d05a:	693a      	ldr	r2, [r7, #16]
 800d05c:	4413      	add	r3, r2
 800d05e:	613b      	str	r3, [r7, #16]
  addr = ip4_addr_get_u32(dest);
 800d060:	6a3b      	ldr	r3, [r7, #32]
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	617b      	str	r3, [r7, #20]
  acc = (u32_t)(acc + (addr & 0xffffUL));
 800d066:	697b      	ldr	r3, [r7, #20]
 800d068:	b29b      	uxth	r3, r3
 800d06a:	693a      	ldr	r2, [r7, #16]
 800d06c:	4413      	add	r3, r2
 800d06e:	613b      	str	r3, [r7, #16]
  acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
 800d070:	697b      	ldr	r3, [r7, #20]
 800d072:	0c1b      	lsrs	r3, r3, #16
 800d074:	693a      	ldr	r2, [r7, #16]
 800d076:	4413      	add	r3, r2
 800d078:	613b      	str	r3, [r7, #16]
  /* fold down to 16 bits */
  acc = FOLD_U32T(acc);
 800d07a:	693b      	ldr	r3, [r7, #16]
 800d07c:	0c1a      	lsrs	r2, r3, #16
 800d07e:	693b      	ldr	r3, [r7, #16]
 800d080:	b29b      	uxth	r3, r3
 800d082:	4413      	add	r3, r2
 800d084:	613b      	str	r3, [r7, #16]
  acc = FOLD_U32T(acc);
 800d086:	693b      	ldr	r3, [r7, #16]
 800d088:	0c1a      	lsrs	r2, r3, #16
 800d08a:	693b      	ldr	r3, [r7, #16]
 800d08c:	b29b      	uxth	r3, r3
 800d08e:	4413      	add	r3, r2
 800d090:	613b      	str	r3, [r7, #16]

  return inet_cksum_pseudo_base(p, proto, proto_len, acc);
 800d092:	893a      	ldrh	r2, [r7, #8]
 800d094:	7af9      	ldrb	r1, [r7, #11]
 800d096:	693b      	ldr	r3, [r7, #16]
 800d098:	68f8      	ldr	r0, [r7, #12]
 800d09a:	f7ff ff5e 	bl	800cf5a <inet_cksum_pseudo_base>
 800d09e:	4603      	mov	r3, r0
}
 800d0a0:	4618      	mov	r0, r3
 800d0a2:	3718      	adds	r7, #24
 800d0a4:	46bd      	mov	sp, r7
 800d0a6:	bd80      	pop	{r7, pc}

0800d0a8 <ip_chksum_pseudo>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
ip_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
                 const ip_addr_t *src, const ip_addr_t *dest)
{
 800d0a8:	b580      	push	{r7, lr}
 800d0aa:	b086      	sub	sp, #24
 800d0ac:	af02      	add	r7, sp, #8
 800d0ae:	60f8      	str	r0, [r7, #12]
 800d0b0:	607b      	str	r3, [r7, #4]
 800d0b2:	460b      	mov	r3, r1
 800d0b4:	72fb      	strb	r3, [r7, #11]
 800d0b6:	4613      	mov	r3, r2
 800d0b8:	813b      	strh	r3, [r7, #8]
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  {
    return inet_chksum_pseudo(p, proto, proto_len, ip_2_ip4(src), ip_2_ip4(dest));
 800d0ba:	893a      	ldrh	r2, [r7, #8]
 800d0bc:	7af9      	ldrb	r1, [r7, #11]
 800d0be:	69bb      	ldr	r3, [r7, #24]
 800d0c0:	9300      	str	r3, [sp, #0]
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	68f8      	ldr	r0, [r7, #12]
 800d0c6:	f7ff ffb7 	bl	800d038 <inet_chksum_pseudo>
 800d0ca:	4603      	mov	r3, r0
  }
#endif /* LWIP_IPV4 */
}
 800d0cc:	4618      	mov	r0, r3
 800d0ce:	3710      	adds	r7, #16
 800d0d0:	46bd      	mov	sp, r7
 800d0d2:	bd80      	pop	{r7, pc}

0800d0d4 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 800d0d4:	b580      	push	{r7, lr}
 800d0d6:	b082      	sub	sp, #8
 800d0d8:	af00      	add	r7, sp, #0
 800d0da:	6078      	str	r0, [r7, #4]
 800d0dc:	460b      	mov	r3, r1
 800d0de:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 800d0e0:	887b      	ldrh	r3, [r7, #2]
 800d0e2:	4619      	mov	r1, r3
 800d0e4:	6878      	ldr	r0, [r7, #4]
 800d0e6:	f7ff fedb 	bl	800cea0 <lwip_standard_chksum>
 800d0ea:	4603      	mov	r3, r0
 800d0ec:	43db      	mvns	r3, r3
 800d0ee:	b29b      	uxth	r3, r3
}
 800d0f0:	4618      	mov	r0, r3
 800d0f2:	3708      	adds	r7, #8
 800d0f4:	46bd      	mov	sp, r7
 800d0f6:	bd80      	pop	{r7, pc}

0800d0f8 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 800d0f8:	b580      	push	{r7, lr}
 800d0fa:	b086      	sub	sp, #24
 800d0fc:	af00      	add	r7, sp, #0
 800d0fe:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 800d100:	2300      	movs	r3, #0
 800d102:	60fb      	str	r3, [r7, #12]

  acc = 0;
 800d104:	2300      	movs	r3, #0
 800d106:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	613b      	str	r3, [r7, #16]
 800d10c:	e02b      	b.n	800d166 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 800d10e:	693b      	ldr	r3, [r7, #16]
 800d110:	685a      	ldr	r2, [r3, #4]
 800d112:	693b      	ldr	r3, [r7, #16]
 800d114:	895b      	ldrh	r3, [r3, #10]
 800d116:	4619      	mov	r1, r3
 800d118:	4610      	mov	r0, r2
 800d11a:	f7ff fec1 	bl	800cea0 <lwip_standard_chksum>
 800d11e:	4603      	mov	r3, r0
 800d120:	461a      	mov	r2, r3
 800d122:	697b      	ldr	r3, [r7, #20]
 800d124:	4413      	add	r3, r2
 800d126:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 800d128:	697b      	ldr	r3, [r7, #20]
 800d12a:	0c1a      	lsrs	r2, r3, #16
 800d12c:	697b      	ldr	r3, [r7, #20]
 800d12e:	b29b      	uxth	r3, r3
 800d130:	4413      	add	r3, r2
 800d132:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 800d134:	693b      	ldr	r3, [r7, #16]
 800d136:	895b      	ldrh	r3, [r3, #10]
 800d138:	f003 0301 	and.w	r3, r3, #1
 800d13c:	b29b      	uxth	r3, r3
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d00e      	beq.n	800d160 <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	2b00      	cmp	r3, #0
 800d146:	bf0c      	ite	eq
 800d148:	2301      	moveq	r3, #1
 800d14a:	2300      	movne	r3, #0
 800d14c:	b2db      	uxtb	r3, r3
 800d14e:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 800d150:	697b      	ldr	r3, [r7, #20]
 800d152:	021b      	lsls	r3, r3, #8
 800d154:	b29a      	uxth	r2, r3
 800d156:	697b      	ldr	r3, [r7, #20]
 800d158:	0a1b      	lsrs	r3, r3, #8
 800d15a:	b2db      	uxtb	r3, r3
 800d15c:	4313      	orrs	r3, r2
 800d15e:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800d160:	693b      	ldr	r3, [r7, #16]
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	613b      	str	r3, [r7, #16]
 800d166:	693b      	ldr	r3, [r7, #16]
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d1d0      	bne.n	800d10e <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d007      	beq.n	800d182 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 800d172:	697b      	ldr	r3, [r7, #20]
 800d174:	021b      	lsls	r3, r3, #8
 800d176:	b29a      	uxth	r2, r3
 800d178:	697b      	ldr	r3, [r7, #20]
 800d17a:	0a1b      	lsrs	r3, r3, #8
 800d17c:	b2db      	uxtb	r3, r3
 800d17e:	4313      	orrs	r3, r2
 800d180:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 800d182:	697b      	ldr	r3, [r7, #20]
 800d184:	b29b      	uxth	r3, r3
 800d186:	43db      	mvns	r3, r3
 800d188:	b29b      	uxth	r3, r3
}
 800d18a:	4618      	mov	r0, r3
 800d18c:	3718      	adds	r7, #24
 800d18e:	46bd      	mov	sp, r7
 800d190:	bd80      	pop	{r7, pc}

0800d192 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800d192:	b580      	push	{r7, lr}
 800d194:	b082      	sub	sp, #8
 800d196:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800d198:	2300      	movs	r3, #0
 800d19a:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800d19c:	f00c fcf8 	bl	8019b90 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800d1a0:	f000 f8d4 	bl	800d34c <mem_init>
  memp_init();
 800d1a4:	f000 fc30 	bl	800da08 <memp_init>
  pbuf_init();
  netif_init();
 800d1a8:	f000 fcf6 	bl	800db98 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800d1ac:	f007 facc 	bl	8014748 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800d1b0:	f001 ffa8 	bl	800f104 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800d1b4:	f007 fa0e 	bl	80145d4 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800d1b8:	bf00      	nop
 800d1ba:	3708      	adds	r7, #8
 800d1bc:	46bd      	mov	sp, r7
 800d1be:	bd80      	pop	{r7, pc}

0800d1c0 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800d1c0:	b480      	push	{r7}
 800d1c2:	b083      	sub	sp, #12
 800d1c4:	af00      	add	r7, sp, #0
 800d1c6:	4603      	mov	r3, r0
 800d1c8:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800d1ca:	4b05      	ldr	r3, [pc, #20]	; (800d1e0 <ptr_to_mem+0x20>)
 800d1cc:	681a      	ldr	r2, [r3, #0]
 800d1ce:	88fb      	ldrh	r3, [r7, #6]
 800d1d0:	4413      	add	r3, r2
}
 800d1d2:	4618      	mov	r0, r3
 800d1d4:	370c      	adds	r7, #12
 800d1d6:	46bd      	mov	sp, r7
 800d1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1dc:	4770      	bx	lr
 800d1de:	bf00      	nop
 800d1e0:	2000f07c 	.word	0x2000f07c

0800d1e4 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800d1e4:	b480      	push	{r7}
 800d1e6:	b083      	sub	sp, #12
 800d1e8:	af00      	add	r7, sp, #0
 800d1ea:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800d1ec:	4b05      	ldr	r3, [pc, #20]	; (800d204 <mem_to_ptr+0x20>)
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	687a      	ldr	r2, [r7, #4]
 800d1f2:	1ad3      	subs	r3, r2, r3
 800d1f4:	b29b      	uxth	r3, r3
}
 800d1f6:	4618      	mov	r0, r3
 800d1f8:	370c      	adds	r7, #12
 800d1fa:	46bd      	mov	sp, r7
 800d1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d200:	4770      	bx	lr
 800d202:	bf00      	nop
 800d204:	2000f07c 	.word	0x2000f07c

0800d208 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800d208:	b590      	push	{r4, r7, lr}
 800d20a:	b085      	sub	sp, #20
 800d20c:	af00      	add	r7, sp, #0
 800d20e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800d210:	4b45      	ldr	r3, [pc, #276]	; (800d328 <plug_holes+0x120>)
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	687a      	ldr	r2, [r7, #4]
 800d216:	429a      	cmp	r2, r3
 800d218:	d206      	bcs.n	800d228 <plug_holes+0x20>
 800d21a:	4b44      	ldr	r3, [pc, #272]	; (800d32c <plug_holes+0x124>)
 800d21c:	f240 12df 	movw	r2, #479	; 0x1df
 800d220:	4943      	ldr	r1, [pc, #268]	; (800d330 <plug_holes+0x128>)
 800d222:	4844      	ldr	r0, [pc, #272]	; (800d334 <plug_holes+0x12c>)
 800d224:	f00c fe6c 	bl	8019f00 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800d228:	4b43      	ldr	r3, [pc, #268]	; (800d338 <plug_holes+0x130>)
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	687a      	ldr	r2, [r7, #4]
 800d22e:	429a      	cmp	r2, r3
 800d230:	d306      	bcc.n	800d240 <plug_holes+0x38>
 800d232:	4b3e      	ldr	r3, [pc, #248]	; (800d32c <plug_holes+0x124>)
 800d234:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800d238:	4940      	ldr	r1, [pc, #256]	; (800d33c <plug_holes+0x134>)
 800d23a:	483e      	ldr	r0, [pc, #248]	; (800d334 <plug_holes+0x12c>)
 800d23c:	f00c fe60 	bl	8019f00 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	791b      	ldrb	r3, [r3, #4]
 800d244:	2b00      	cmp	r3, #0
 800d246:	d006      	beq.n	800d256 <plug_holes+0x4e>
 800d248:	4b38      	ldr	r3, [pc, #224]	; (800d32c <plug_holes+0x124>)
 800d24a:	f240 12e1 	movw	r2, #481	; 0x1e1
 800d24e:	493c      	ldr	r1, [pc, #240]	; (800d340 <plug_holes+0x138>)
 800d250:	4838      	ldr	r0, [pc, #224]	; (800d334 <plug_holes+0x12c>)
 800d252:	f00c fe55 	bl	8019f00 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	881b      	ldrh	r3, [r3, #0]
 800d25a:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800d25e:	d906      	bls.n	800d26e <plug_holes+0x66>
 800d260:	4b32      	ldr	r3, [pc, #200]	; (800d32c <plug_holes+0x124>)
 800d262:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800d266:	4937      	ldr	r1, [pc, #220]	; (800d344 <plug_holes+0x13c>)
 800d268:	4832      	ldr	r0, [pc, #200]	; (800d334 <plug_holes+0x12c>)
 800d26a:	f00c fe49 	bl	8019f00 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	881b      	ldrh	r3, [r3, #0]
 800d272:	4618      	mov	r0, r3
 800d274:	f7ff ffa4 	bl	800d1c0 <ptr_to_mem>
 800d278:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800d27a:	687a      	ldr	r2, [r7, #4]
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	429a      	cmp	r2, r3
 800d280:	d024      	beq.n	800d2cc <plug_holes+0xc4>
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	791b      	ldrb	r3, [r3, #4]
 800d286:	2b00      	cmp	r3, #0
 800d288:	d120      	bne.n	800d2cc <plug_holes+0xc4>
 800d28a:	4b2b      	ldr	r3, [pc, #172]	; (800d338 <plug_holes+0x130>)
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	68fa      	ldr	r2, [r7, #12]
 800d290:	429a      	cmp	r2, r3
 800d292:	d01b      	beq.n	800d2cc <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800d294:	4b2c      	ldr	r3, [pc, #176]	; (800d348 <plug_holes+0x140>)
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	68fa      	ldr	r2, [r7, #12]
 800d29a:	429a      	cmp	r2, r3
 800d29c:	d102      	bne.n	800d2a4 <plug_holes+0x9c>
      lfree = mem;
 800d29e:	4a2a      	ldr	r2, [pc, #168]	; (800d348 <plug_holes+0x140>)
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	881a      	ldrh	r2, [r3, #0]
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	881b      	ldrh	r3, [r3, #0]
 800d2b0:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800d2b4:	d00a      	beq.n	800d2cc <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	881b      	ldrh	r3, [r3, #0]
 800d2ba:	4618      	mov	r0, r3
 800d2bc:	f7ff ff80 	bl	800d1c0 <ptr_to_mem>
 800d2c0:	4604      	mov	r4, r0
 800d2c2:	6878      	ldr	r0, [r7, #4]
 800d2c4:	f7ff ff8e 	bl	800d1e4 <mem_to_ptr>
 800d2c8:	4603      	mov	r3, r0
 800d2ca:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	885b      	ldrh	r3, [r3, #2]
 800d2d0:	4618      	mov	r0, r3
 800d2d2:	f7ff ff75 	bl	800d1c0 <ptr_to_mem>
 800d2d6:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800d2d8:	68ba      	ldr	r2, [r7, #8]
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	429a      	cmp	r2, r3
 800d2de:	d01f      	beq.n	800d320 <plug_holes+0x118>
 800d2e0:	68bb      	ldr	r3, [r7, #8]
 800d2e2:	791b      	ldrb	r3, [r3, #4]
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d11b      	bne.n	800d320 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800d2e8:	4b17      	ldr	r3, [pc, #92]	; (800d348 <plug_holes+0x140>)
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	687a      	ldr	r2, [r7, #4]
 800d2ee:	429a      	cmp	r2, r3
 800d2f0:	d102      	bne.n	800d2f8 <plug_holes+0xf0>
      lfree = pmem;
 800d2f2:	4a15      	ldr	r2, [pc, #84]	; (800d348 <plug_holes+0x140>)
 800d2f4:	68bb      	ldr	r3, [r7, #8]
 800d2f6:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	881a      	ldrh	r2, [r3, #0]
 800d2fc:	68bb      	ldr	r3, [r7, #8]
 800d2fe:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	881b      	ldrh	r3, [r3, #0]
 800d304:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800d308:	d00a      	beq.n	800d320 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	881b      	ldrh	r3, [r3, #0]
 800d30e:	4618      	mov	r0, r3
 800d310:	f7ff ff56 	bl	800d1c0 <ptr_to_mem>
 800d314:	4604      	mov	r4, r0
 800d316:	68b8      	ldr	r0, [r7, #8]
 800d318:	f7ff ff64 	bl	800d1e4 <mem_to_ptr>
 800d31c:	4603      	mov	r3, r0
 800d31e:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800d320:	bf00      	nop
 800d322:	3714      	adds	r7, #20
 800d324:	46bd      	mov	sp, r7
 800d326:	bd90      	pop	{r4, r7, pc}
 800d328:	2000f07c 	.word	0x2000f07c
 800d32c:	0801bb88 	.word	0x0801bb88
 800d330:	0801bbb8 	.word	0x0801bbb8
 800d334:	0801bbd0 	.word	0x0801bbd0
 800d338:	2000f080 	.word	0x2000f080
 800d33c:	0801bbf8 	.word	0x0801bbf8
 800d340:	0801bc14 	.word	0x0801bc14
 800d344:	0801bc30 	.word	0x0801bc30
 800d348:	2000f088 	.word	0x2000f088

0800d34c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800d34c:	b580      	push	{r7, lr}
 800d34e:	b082      	sub	sp, #8
 800d350:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800d352:	4b1f      	ldr	r3, [pc, #124]	; (800d3d0 <mem_init+0x84>)
 800d354:	3303      	adds	r3, #3
 800d356:	f023 0303 	bic.w	r3, r3, #3
 800d35a:	461a      	mov	r2, r3
 800d35c:	4b1d      	ldr	r3, [pc, #116]	; (800d3d4 <mem_init+0x88>)
 800d35e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800d360:	4b1c      	ldr	r3, [pc, #112]	; (800d3d4 <mem_init+0x88>)
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
 800d36c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	2200      	movs	r2, #0
 800d372:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	2200      	movs	r2, #0
 800d378:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800d37a:	f44f 40a0 	mov.w	r0, #20480	; 0x5000
 800d37e:	f7ff ff1f 	bl	800d1c0 <ptr_to_mem>
 800d382:	4603      	mov	r3, r0
 800d384:	4a14      	ldr	r2, [pc, #80]	; (800d3d8 <mem_init+0x8c>)
 800d386:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800d388:	4b13      	ldr	r3, [pc, #76]	; (800d3d8 <mem_init+0x8c>)
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	2201      	movs	r2, #1
 800d38e:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800d390:	4b11      	ldr	r3, [pc, #68]	; (800d3d8 <mem_init+0x8c>)
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
 800d398:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800d39a:	4b0f      	ldr	r3, [pc, #60]	; (800d3d8 <mem_init+0x8c>)
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
 800d3a2:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800d3a4:	4b0b      	ldr	r3, [pc, #44]	; (800d3d4 <mem_init+0x88>)
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	4a0c      	ldr	r2, [pc, #48]	; (800d3dc <mem_init+0x90>)
 800d3aa:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800d3ac:	480c      	ldr	r0, [pc, #48]	; (800d3e0 <mem_init+0x94>)
 800d3ae:	f00c fbfd 	bl	8019bac <sys_mutex_new>
 800d3b2:	4603      	mov	r3, r0
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d006      	beq.n	800d3c6 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800d3b8:	4b0a      	ldr	r3, [pc, #40]	; (800d3e4 <mem_init+0x98>)
 800d3ba:	f240 221f 	movw	r2, #543	; 0x21f
 800d3be:	490a      	ldr	r1, [pc, #40]	; (800d3e8 <mem_init+0x9c>)
 800d3c0:	480a      	ldr	r0, [pc, #40]	; (800d3ec <mem_init+0xa0>)
 800d3c2:	f00c fd9d 	bl	8019f00 <iprintf>
  }
}
 800d3c6:	bf00      	nop
 800d3c8:	3708      	adds	r7, #8
 800d3ca:	46bd      	mov	sp, r7
 800d3cc:	bd80      	pop	{r7, pc}
 800d3ce:	bf00      	nop
 800d3d0:	2000a068 	.word	0x2000a068
 800d3d4:	2000f07c 	.word	0x2000f07c
 800d3d8:	2000f080 	.word	0x2000f080
 800d3dc:	2000f088 	.word	0x2000f088
 800d3e0:	2000f084 	.word	0x2000f084
 800d3e4:	0801bb88 	.word	0x0801bb88
 800d3e8:	0801bc5c 	.word	0x0801bc5c
 800d3ec:	0801bbd0 	.word	0x0801bbd0

0800d3f0 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800d3f0:	b580      	push	{r7, lr}
 800d3f2:	b086      	sub	sp, #24
 800d3f4:	af00      	add	r7, sp, #0
 800d3f6:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800d3f8:	6878      	ldr	r0, [r7, #4]
 800d3fa:	f7ff fef3 	bl	800d1e4 <mem_to_ptr>
 800d3fe:	4603      	mov	r3, r0
 800d400:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	881b      	ldrh	r3, [r3, #0]
 800d406:	4618      	mov	r0, r3
 800d408:	f7ff feda 	bl	800d1c0 <ptr_to_mem>
 800d40c:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	885b      	ldrh	r3, [r3, #2]
 800d412:	4618      	mov	r0, r3
 800d414:	f7ff fed4 	bl	800d1c0 <ptr_to_mem>
 800d418:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	881b      	ldrh	r3, [r3, #0]
 800d41e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800d422:	d818      	bhi.n	800d456 <mem_link_valid+0x66>
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	885b      	ldrh	r3, [r3, #2]
 800d428:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800d42c:	d813      	bhi.n	800d456 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800d432:	8afa      	ldrh	r2, [r7, #22]
 800d434:	429a      	cmp	r2, r3
 800d436:	d004      	beq.n	800d442 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	881b      	ldrh	r3, [r3, #0]
 800d43c:	8afa      	ldrh	r2, [r7, #22]
 800d43e:	429a      	cmp	r2, r3
 800d440:	d109      	bne.n	800d456 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800d442:	4b08      	ldr	r3, [pc, #32]	; (800d464 <mem_link_valid+0x74>)
 800d444:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800d446:	693a      	ldr	r2, [r7, #16]
 800d448:	429a      	cmp	r2, r3
 800d44a:	d006      	beq.n	800d45a <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800d44c:	693b      	ldr	r3, [r7, #16]
 800d44e:	885b      	ldrh	r3, [r3, #2]
 800d450:	8afa      	ldrh	r2, [r7, #22]
 800d452:	429a      	cmp	r2, r3
 800d454:	d001      	beq.n	800d45a <mem_link_valid+0x6a>
    return 0;
 800d456:	2300      	movs	r3, #0
 800d458:	e000      	b.n	800d45c <mem_link_valid+0x6c>
  }
  return 1;
 800d45a:	2301      	movs	r3, #1
}
 800d45c:	4618      	mov	r0, r3
 800d45e:	3718      	adds	r7, #24
 800d460:	46bd      	mov	sp, r7
 800d462:	bd80      	pop	{r7, pc}
 800d464:	2000f080 	.word	0x2000f080

0800d468 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800d468:	b580      	push	{r7, lr}
 800d46a:	b088      	sub	sp, #32
 800d46c:	af00      	add	r7, sp, #0
 800d46e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	2b00      	cmp	r3, #0
 800d474:	d070      	beq.n	800d558 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	f003 0303 	and.w	r3, r3, #3
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d00d      	beq.n	800d49c <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800d480:	4b37      	ldr	r3, [pc, #220]	; (800d560 <mem_free+0xf8>)
 800d482:	f240 2273 	movw	r2, #627	; 0x273
 800d486:	4937      	ldr	r1, [pc, #220]	; (800d564 <mem_free+0xfc>)
 800d488:	4837      	ldr	r0, [pc, #220]	; (800d568 <mem_free+0x100>)
 800d48a:	f00c fd39 	bl	8019f00 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d48e:	f00c fbe1 	bl	8019c54 <sys_arch_protect>
 800d492:	60f8      	str	r0, [r7, #12]
 800d494:	68f8      	ldr	r0, [r7, #12]
 800d496:	f00c fbeb 	bl	8019c70 <sys_arch_unprotect>
    return;
 800d49a:	e05e      	b.n	800d55a <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	3b08      	subs	r3, #8
 800d4a0:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800d4a2:	4b32      	ldr	r3, [pc, #200]	; (800d56c <mem_free+0x104>)
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	69fa      	ldr	r2, [r7, #28]
 800d4a8:	429a      	cmp	r2, r3
 800d4aa:	d306      	bcc.n	800d4ba <mem_free+0x52>
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	f103 020c 	add.w	r2, r3, #12
 800d4b2:	4b2f      	ldr	r3, [pc, #188]	; (800d570 <mem_free+0x108>)
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	429a      	cmp	r2, r3
 800d4b8:	d90d      	bls.n	800d4d6 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800d4ba:	4b29      	ldr	r3, [pc, #164]	; (800d560 <mem_free+0xf8>)
 800d4bc:	f240 227f 	movw	r2, #639	; 0x27f
 800d4c0:	492c      	ldr	r1, [pc, #176]	; (800d574 <mem_free+0x10c>)
 800d4c2:	4829      	ldr	r0, [pc, #164]	; (800d568 <mem_free+0x100>)
 800d4c4:	f00c fd1c 	bl	8019f00 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d4c8:	f00c fbc4 	bl	8019c54 <sys_arch_protect>
 800d4cc:	6138      	str	r0, [r7, #16]
 800d4ce:	6938      	ldr	r0, [r7, #16]
 800d4d0:	f00c fbce 	bl	8019c70 <sys_arch_unprotect>
    return;
 800d4d4:	e041      	b.n	800d55a <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800d4d6:	4828      	ldr	r0, [pc, #160]	; (800d578 <mem_free+0x110>)
 800d4d8:	f00c fb82 	bl	8019be0 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800d4dc:	69fb      	ldr	r3, [r7, #28]
 800d4de:	791b      	ldrb	r3, [r3, #4]
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d110      	bne.n	800d506 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800d4e4:	4b1e      	ldr	r3, [pc, #120]	; (800d560 <mem_free+0xf8>)
 800d4e6:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800d4ea:	4924      	ldr	r1, [pc, #144]	; (800d57c <mem_free+0x114>)
 800d4ec:	481e      	ldr	r0, [pc, #120]	; (800d568 <mem_free+0x100>)
 800d4ee:	f00c fd07 	bl	8019f00 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800d4f2:	4821      	ldr	r0, [pc, #132]	; (800d578 <mem_free+0x110>)
 800d4f4:	f00c fb83 	bl	8019bfe <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d4f8:	f00c fbac 	bl	8019c54 <sys_arch_protect>
 800d4fc:	6178      	str	r0, [r7, #20]
 800d4fe:	6978      	ldr	r0, [r7, #20]
 800d500:	f00c fbb6 	bl	8019c70 <sys_arch_unprotect>
    return;
 800d504:	e029      	b.n	800d55a <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800d506:	69f8      	ldr	r0, [r7, #28]
 800d508:	f7ff ff72 	bl	800d3f0 <mem_link_valid>
 800d50c:	4603      	mov	r3, r0
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d110      	bne.n	800d534 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800d512:	4b13      	ldr	r3, [pc, #76]	; (800d560 <mem_free+0xf8>)
 800d514:	f240 2295 	movw	r2, #661	; 0x295
 800d518:	4919      	ldr	r1, [pc, #100]	; (800d580 <mem_free+0x118>)
 800d51a:	4813      	ldr	r0, [pc, #76]	; (800d568 <mem_free+0x100>)
 800d51c:	f00c fcf0 	bl	8019f00 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800d520:	4815      	ldr	r0, [pc, #84]	; (800d578 <mem_free+0x110>)
 800d522:	f00c fb6c 	bl	8019bfe <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d526:	f00c fb95 	bl	8019c54 <sys_arch_protect>
 800d52a:	61b8      	str	r0, [r7, #24]
 800d52c:	69b8      	ldr	r0, [r7, #24]
 800d52e:	f00c fb9f 	bl	8019c70 <sys_arch_unprotect>
    return;
 800d532:	e012      	b.n	800d55a <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800d534:	69fb      	ldr	r3, [r7, #28]
 800d536:	2200      	movs	r2, #0
 800d538:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800d53a:	4b12      	ldr	r3, [pc, #72]	; (800d584 <mem_free+0x11c>)
 800d53c:	681b      	ldr	r3, [r3, #0]
 800d53e:	69fa      	ldr	r2, [r7, #28]
 800d540:	429a      	cmp	r2, r3
 800d542:	d202      	bcs.n	800d54a <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800d544:	4a0f      	ldr	r2, [pc, #60]	; (800d584 <mem_free+0x11c>)
 800d546:	69fb      	ldr	r3, [r7, #28]
 800d548:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800d54a:	69f8      	ldr	r0, [r7, #28]
 800d54c:	f7ff fe5c 	bl	800d208 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800d550:	4809      	ldr	r0, [pc, #36]	; (800d578 <mem_free+0x110>)
 800d552:	f00c fb54 	bl	8019bfe <sys_mutex_unlock>
 800d556:	e000      	b.n	800d55a <mem_free+0xf2>
    return;
 800d558:	bf00      	nop
}
 800d55a:	3720      	adds	r7, #32
 800d55c:	46bd      	mov	sp, r7
 800d55e:	bd80      	pop	{r7, pc}
 800d560:	0801bb88 	.word	0x0801bb88
 800d564:	0801bc78 	.word	0x0801bc78
 800d568:	0801bbd0 	.word	0x0801bbd0
 800d56c:	2000f07c 	.word	0x2000f07c
 800d570:	2000f080 	.word	0x2000f080
 800d574:	0801bc9c 	.word	0x0801bc9c
 800d578:	2000f084 	.word	0x2000f084
 800d57c:	0801bcb8 	.word	0x0801bcb8
 800d580:	0801bce0 	.word	0x0801bce0
 800d584:	2000f088 	.word	0x2000f088

0800d588 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800d588:	b580      	push	{r7, lr}
 800d58a:	b088      	sub	sp, #32
 800d58c:	af00      	add	r7, sp, #0
 800d58e:	6078      	str	r0, [r7, #4]
 800d590:	460b      	mov	r3, r1
 800d592:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800d594:	887b      	ldrh	r3, [r7, #2]
 800d596:	3303      	adds	r3, #3
 800d598:	b29b      	uxth	r3, r3
 800d59a:	f023 0303 	bic.w	r3, r3, #3
 800d59e:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800d5a0:	8bfb      	ldrh	r3, [r7, #30]
 800d5a2:	2b0b      	cmp	r3, #11
 800d5a4:	d801      	bhi.n	800d5aa <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800d5a6:	230c      	movs	r3, #12
 800d5a8:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800d5aa:	8bfb      	ldrh	r3, [r7, #30]
 800d5ac:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800d5b0:	d803      	bhi.n	800d5ba <mem_trim+0x32>
 800d5b2:	8bfa      	ldrh	r2, [r7, #30]
 800d5b4:	887b      	ldrh	r3, [r7, #2]
 800d5b6:	429a      	cmp	r2, r3
 800d5b8:	d201      	bcs.n	800d5be <mem_trim+0x36>
    return NULL;
 800d5ba:	2300      	movs	r3, #0
 800d5bc:	e0d8      	b.n	800d770 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800d5be:	4b6e      	ldr	r3, [pc, #440]	; (800d778 <mem_trim+0x1f0>)
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	687a      	ldr	r2, [r7, #4]
 800d5c4:	429a      	cmp	r2, r3
 800d5c6:	d304      	bcc.n	800d5d2 <mem_trim+0x4a>
 800d5c8:	4b6c      	ldr	r3, [pc, #432]	; (800d77c <mem_trim+0x1f4>)
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	687a      	ldr	r2, [r7, #4]
 800d5ce:	429a      	cmp	r2, r3
 800d5d0:	d306      	bcc.n	800d5e0 <mem_trim+0x58>
 800d5d2:	4b6b      	ldr	r3, [pc, #428]	; (800d780 <mem_trim+0x1f8>)
 800d5d4:	f240 22d1 	movw	r2, #721	; 0x2d1
 800d5d8:	496a      	ldr	r1, [pc, #424]	; (800d784 <mem_trim+0x1fc>)
 800d5da:	486b      	ldr	r0, [pc, #428]	; (800d788 <mem_trim+0x200>)
 800d5dc:	f00c fc90 	bl	8019f00 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800d5e0:	4b65      	ldr	r3, [pc, #404]	; (800d778 <mem_trim+0x1f0>)
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	687a      	ldr	r2, [r7, #4]
 800d5e6:	429a      	cmp	r2, r3
 800d5e8:	d304      	bcc.n	800d5f4 <mem_trim+0x6c>
 800d5ea:	4b64      	ldr	r3, [pc, #400]	; (800d77c <mem_trim+0x1f4>)
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	687a      	ldr	r2, [r7, #4]
 800d5f0:	429a      	cmp	r2, r3
 800d5f2:	d307      	bcc.n	800d604 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d5f4:	f00c fb2e 	bl	8019c54 <sys_arch_protect>
 800d5f8:	60b8      	str	r0, [r7, #8]
 800d5fa:	68b8      	ldr	r0, [r7, #8]
 800d5fc:	f00c fb38 	bl	8019c70 <sys_arch_unprotect>
    return rmem;
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	e0b5      	b.n	800d770 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	3b08      	subs	r3, #8
 800d608:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800d60a:	69b8      	ldr	r0, [r7, #24]
 800d60c:	f7ff fdea 	bl	800d1e4 <mem_to_ptr>
 800d610:	4603      	mov	r3, r0
 800d612:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800d614:	69bb      	ldr	r3, [r7, #24]
 800d616:	881a      	ldrh	r2, [r3, #0]
 800d618:	8afb      	ldrh	r3, [r7, #22]
 800d61a:	1ad3      	subs	r3, r2, r3
 800d61c:	b29b      	uxth	r3, r3
 800d61e:	3b08      	subs	r3, #8
 800d620:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800d622:	8bfa      	ldrh	r2, [r7, #30]
 800d624:	8abb      	ldrh	r3, [r7, #20]
 800d626:	429a      	cmp	r2, r3
 800d628:	d906      	bls.n	800d638 <mem_trim+0xb0>
 800d62a:	4b55      	ldr	r3, [pc, #340]	; (800d780 <mem_trim+0x1f8>)
 800d62c:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800d630:	4956      	ldr	r1, [pc, #344]	; (800d78c <mem_trim+0x204>)
 800d632:	4855      	ldr	r0, [pc, #340]	; (800d788 <mem_trim+0x200>)
 800d634:	f00c fc64 	bl	8019f00 <iprintf>
  if (newsize > size) {
 800d638:	8bfa      	ldrh	r2, [r7, #30]
 800d63a:	8abb      	ldrh	r3, [r7, #20]
 800d63c:	429a      	cmp	r2, r3
 800d63e:	d901      	bls.n	800d644 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800d640:	2300      	movs	r3, #0
 800d642:	e095      	b.n	800d770 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800d644:	8bfa      	ldrh	r2, [r7, #30]
 800d646:	8abb      	ldrh	r3, [r7, #20]
 800d648:	429a      	cmp	r2, r3
 800d64a:	d101      	bne.n	800d650 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	e08f      	b.n	800d770 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800d650:	484f      	ldr	r0, [pc, #316]	; (800d790 <mem_trim+0x208>)
 800d652:	f00c fac5 	bl	8019be0 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800d656:	69bb      	ldr	r3, [r7, #24]
 800d658:	881b      	ldrh	r3, [r3, #0]
 800d65a:	4618      	mov	r0, r3
 800d65c:	f7ff fdb0 	bl	800d1c0 <ptr_to_mem>
 800d660:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800d662:	693b      	ldr	r3, [r7, #16]
 800d664:	791b      	ldrb	r3, [r3, #4]
 800d666:	2b00      	cmp	r3, #0
 800d668:	d13f      	bne.n	800d6ea <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800d66a:	69bb      	ldr	r3, [r7, #24]
 800d66c:	881b      	ldrh	r3, [r3, #0]
 800d66e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800d672:	d106      	bne.n	800d682 <mem_trim+0xfa>
 800d674:	4b42      	ldr	r3, [pc, #264]	; (800d780 <mem_trim+0x1f8>)
 800d676:	f240 22f5 	movw	r2, #757	; 0x2f5
 800d67a:	4946      	ldr	r1, [pc, #280]	; (800d794 <mem_trim+0x20c>)
 800d67c:	4842      	ldr	r0, [pc, #264]	; (800d788 <mem_trim+0x200>)
 800d67e:	f00c fc3f 	bl	8019f00 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800d682:	693b      	ldr	r3, [r7, #16]
 800d684:	881b      	ldrh	r3, [r3, #0]
 800d686:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800d688:	8afa      	ldrh	r2, [r7, #22]
 800d68a:	8bfb      	ldrh	r3, [r7, #30]
 800d68c:	4413      	add	r3, r2
 800d68e:	b29b      	uxth	r3, r3
 800d690:	3308      	adds	r3, #8
 800d692:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800d694:	4b40      	ldr	r3, [pc, #256]	; (800d798 <mem_trim+0x210>)
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	693a      	ldr	r2, [r7, #16]
 800d69a:	429a      	cmp	r2, r3
 800d69c:	d106      	bne.n	800d6ac <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800d69e:	89fb      	ldrh	r3, [r7, #14]
 800d6a0:	4618      	mov	r0, r3
 800d6a2:	f7ff fd8d 	bl	800d1c0 <ptr_to_mem>
 800d6a6:	4603      	mov	r3, r0
 800d6a8:	4a3b      	ldr	r2, [pc, #236]	; (800d798 <mem_trim+0x210>)
 800d6aa:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800d6ac:	89fb      	ldrh	r3, [r7, #14]
 800d6ae:	4618      	mov	r0, r3
 800d6b0:	f7ff fd86 	bl	800d1c0 <ptr_to_mem>
 800d6b4:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800d6b6:	693b      	ldr	r3, [r7, #16]
 800d6b8:	2200      	movs	r2, #0
 800d6ba:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800d6bc:	693b      	ldr	r3, [r7, #16]
 800d6be:	89ba      	ldrh	r2, [r7, #12]
 800d6c0:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800d6c2:	693b      	ldr	r3, [r7, #16]
 800d6c4:	8afa      	ldrh	r2, [r7, #22]
 800d6c6:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800d6c8:	69bb      	ldr	r3, [r7, #24]
 800d6ca:	89fa      	ldrh	r2, [r7, #14]
 800d6cc:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800d6ce:	693b      	ldr	r3, [r7, #16]
 800d6d0:	881b      	ldrh	r3, [r3, #0]
 800d6d2:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800d6d6:	d047      	beq.n	800d768 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800d6d8:	693b      	ldr	r3, [r7, #16]
 800d6da:	881b      	ldrh	r3, [r3, #0]
 800d6dc:	4618      	mov	r0, r3
 800d6de:	f7ff fd6f 	bl	800d1c0 <ptr_to_mem>
 800d6e2:	4602      	mov	r2, r0
 800d6e4:	89fb      	ldrh	r3, [r7, #14]
 800d6e6:	8053      	strh	r3, [r2, #2]
 800d6e8:	e03e      	b.n	800d768 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800d6ea:	8bfb      	ldrh	r3, [r7, #30]
 800d6ec:	f103 0214 	add.w	r2, r3, #20
 800d6f0:	8abb      	ldrh	r3, [r7, #20]
 800d6f2:	429a      	cmp	r2, r3
 800d6f4:	d838      	bhi.n	800d768 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800d6f6:	8afa      	ldrh	r2, [r7, #22]
 800d6f8:	8bfb      	ldrh	r3, [r7, #30]
 800d6fa:	4413      	add	r3, r2
 800d6fc:	b29b      	uxth	r3, r3
 800d6fe:	3308      	adds	r3, #8
 800d700:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800d702:	69bb      	ldr	r3, [r7, #24]
 800d704:	881b      	ldrh	r3, [r3, #0]
 800d706:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800d70a:	d106      	bne.n	800d71a <mem_trim+0x192>
 800d70c:	4b1c      	ldr	r3, [pc, #112]	; (800d780 <mem_trim+0x1f8>)
 800d70e:	f240 3216 	movw	r2, #790	; 0x316
 800d712:	4920      	ldr	r1, [pc, #128]	; (800d794 <mem_trim+0x20c>)
 800d714:	481c      	ldr	r0, [pc, #112]	; (800d788 <mem_trim+0x200>)
 800d716:	f00c fbf3 	bl	8019f00 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800d71a:	89fb      	ldrh	r3, [r7, #14]
 800d71c:	4618      	mov	r0, r3
 800d71e:	f7ff fd4f 	bl	800d1c0 <ptr_to_mem>
 800d722:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800d724:	4b1c      	ldr	r3, [pc, #112]	; (800d798 <mem_trim+0x210>)
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	693a      	ldr	r2, [r7, #16]
 800d72a:	429a      	cmp	r2, r3
 800d72c:	d202      	bcs.n	800d734 <mem_trim+0x1ac>
      lfree = mem2;
 800d72e:	4a1a      	ldr	r2, [pc, #104]	; (800d798 <mem_trim+0x210>)
 800d730:	693b      	ldr	r3, [r7, #16]
 800d732:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800d734:	693b      	ldr	r3, [r7, #16]
 800d736:	2200      	movs	r2, #0
 800d738:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800d73a:	69bb      	ldr	r3, [r7, #24]
 800d73c:	881a      	ldrh	r2, [r3, #0]
 800d73e:	693b      	ldr	r3, [r7, #16]
 800d740:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800d742:	693b      	ldr	r3, [r7, #16]
 800d744:	8afa      	ldrh	r2, [r7, #22]
 800d746:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800d748:	69bb      	ldr	r3, [r7, #24]
 800d74a:	89fa      	ldrh	r2, [r7, #14]
 800d74c:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800d74e:	693b      	ldr	r3, [r7, #16]
 800d750:	881b      	ldrh	r3, [r3, #0]
 800d752:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800d756:	d007      	beq.n	800d768 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800d758:	693b      	ldr	r3, [r7, #16]
 800d75a:	881b      	ldrh	r3, [r3, #0]
 800d75c:	4618      	mov	r0, r3
 800d75e:	f7ff fd2f 	bl	800d1c0 <ptr_to_mem>
 800d762:	4602      	mov	r2, r0
 800d764:	89fb      	ldrh	r3, [r7, #14]
 800d766:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800d768:	4809      	ldr	r0, [pc, #36]	; (800d790 <mem_trim+0x208>)
 800d76a:	f00c fa48 	bl	8019bfe <sys_mutex_unlock>
  return rmem;
 800d76e:	687b      	ldr	r3, [r7, #4]
}
 800d770:	4618      	mov	r0, r3
 800d772:	3720      	adds	r7, #32
 800d774:	46bd      	mov	sp, r7
 800d776:	bd80      	pop	{r7, pc}
 800d778:	2000f07c 	.word	0x2000f07c
 800d77c:	2000f080 	.word	0x2000f080
 800d780:	0801bb88 	.word	0x0801bb88
 800d784:	0801bd14 	.word	0x0801bd14
 800d788:	0801bbd0 	.word	0x0801bbd0
 800d78c:	0801bd2c 	.word	0x0801bd2c
 800d790:	2000f084 	.word	0x2000f084
 800d794:	0801bd4c 	.word	0x0801bd4c
 800d798:	2000f088 	.word	0x2000f088

0800d79c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800d79c:	b580      	push	{r7, lr}
 800d79e:	b088      	sub	sp, #32
 800d7a0:	af00      	add	r7, sp, #0
 800d7a2:	4603      	mov	r3, r0
 800d7a4:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800d7a6:	88fb      	ldrh	r3, [r7, #6]
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d101      	bne.n	800d7b0 <mem_malloc+0x14>
    return NULL;
 800d7ac:	2300      	movs	r3, #0
 800d7ae:	e0e2      	b.n	800d976 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800d7b0:	88fb      	ldrh	r3, [r7, #6]
 800d7b2:	3303      	adds	r3, #3
 800d7b4:	b29b      	uxth	r3, r3
 800d7b6:	f023 0303 	bic.w	r3, r3, #3
 800d7ba:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800d7bc:	8bbb      	ldrh	r3, [r7, #28]
 800d7be:	2b0b      	cmp	r3, #11
 800d7c0:	d801      	bhi.n	800d7c6 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800d7c2:	230c      	movs	r3, #12
 800d7c4:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800d7c6:	8bbb      	ldrh	r3, [r7, #28]
 800d7c8:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800d7cc:	d803      	bhi.n	800d7d6 <mem_malloc+0x3a>
 800d7ce:	8bba      	ldrh	r2, [r7, #28]
 800d7d0:	88fb      	ldrh	r3, [r7, #6]
 800d7d2:	429a      	cmp	r2, r3
 800d7d4:	d201      	bcs.n	800d7da <mem_malloc+0x3e>
    return NULL;
 800d7d6:	2300      	movs	r3, #0
 800d7d8:	e0cd      	b.n	800d976 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800d7da:	4869      	ldr	r0, [pc, #420]	; (800d980 <mem_malloc+0x1e4>)
 800d7dc:	f00c fa00 	bl	8019be0 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800d7e0:	4b68      	ldr	r3, [pc, #416]	; (800d984 <mem_malloc+0x1e8>)
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	4618      	mov	r0, r3
 800d7e6:	f7ff fcfd 	bl	800d1e4 <mem_to_ptr>
 800d7ea:	4603      	mov	r3, r0
 800d7ec:	83fb      	strh	r3, [r7, #30]
 800d7ee:	e0b7      	b.n	800d960 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800d7f0:	8bfb      	ldrh	r3, [r7, #30]
 800d7f2:	4618      	mov	r0, r3
 800d7f4:	f7ff fce4 	bl	800d1c0 <ptr_to_mem>
 800d7f8:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800d7fa:	697b      	ldr	r3, [r7, #20]
 800d7fc:	791b      	ldrb	r3, [r3, #4]
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	f040 80a7 	bne.w	800d952 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800d804:	697b      	ldr	r3, [r7, #20]
 800d806:	881b      	ldrh	r3, [r3, #0]
 800d808:	461a      	mov	r2, r3
 800d80a:	8bfb      	ldrh	r3, [r7, #30]
 800d80c:	1ad3      	subs	r3, r2, r3
 800d80e:	f1a3 0208 	sub.w	r2, r3, #8
 800d812:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800d814:	429a      	cmp	r2, r3
 800d816:	f0c0 809c 	bcc.w	800d952 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800d81a:	697b      	ldr	r3, [r7, #20]
 800d81c:	881b      	ldrh	r3, [r3, #0]
 800d81e:	461a      	mov	r2, r3
 800d820:	8bfb      	ldrh	r3, [r7, #30]
 800d822:	1ad3      	subs	r3, r2, r3
 800d824:	f1a3 0208 	sub.w	r2, r3, #8
 800d828:	8bbb      	ldrh	r3, [r7, #28]
 800d82a:	3314      	adds	r3, #20
 800d82c:	429a      	cmp	r2, r3
 800d82e:	d333      	bcc.n	800d898 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800d830:	8bfa      	ldrh	r2, [r7, #30]
 800d832:	8bbb      	ldrh	r3, [r7, #28]
 800d834:	4413      	add	r3, r2
 800d836:	b29b      	uxth	r3, r3
 800d838:	3308      	adds	r3, #8
 800d83a:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800d83c:	8a7b      	ldrh	r3, [r7, #18]
 800d83e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800d842:	d106      	bne.n	800d852 <mem_malloc+0xb6>
 800d844:	4b50      	ldr	r3, [pc, #320]	; (800d988 <mem_malloc+0x1ec>)
 800d846:	f240 3287 	movw	r2, #903	; 0x387
 800d84a:	4950      	ldr	r1, [pc, #320]	; (800d98c <mem_malloc+0x1f0>)
 800d84c:	4850      	ldr	r0, [pc, #320]	; (800d990 <mem_malloc+0x1f4>)
 800d84e:	f00c fb57 	bl	8019f00 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800d852:	8a7b      	ldrh	r3, [r7, #18]
 800d854:	4618      	mov	r0, r3
 800d856:	f7ff fcb3 	bl	800d1c0 <ptr_to_mem>
 800d85a:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800d85c:	68fb      	ldr	r3, [r7, #12]
 800d85e:	2200      	movs	r2, #0
 800d860:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800d862:	697b      	ldr	r3, [r7, #20]
 800d864:	881a      	ldrh	r2, [r3, #0]
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	8bfa      	ldrh	r2, [r7, #30]
 800d86e:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800d870:	697b      	ldr	r3, [r7, #20]
 800d872:	8a7a      	ldrh	r2, [r7, #18]
 800d874:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800d876:	697b      	ldr	r3, [r7, #20]
 800d878:	2201      	movs	r2, #1
 800d87a:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800d87c:	68fb      	ldr	r3, [r7, #12]
 800d87e:	881b      	ldrh	r3, [r3, #0]
 800d880:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800d884:	d00b      	beq.n	800d89e <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	881b      	ldrh	r3, [r3, #0]
 800d88a:	4618      	mov	r0, r3
 800d88c:	f7ff fc98 	bl	800d1c0 <ptr_to_mem>
 800d890:	4602      	mov	r2, r0
 800d892:	8a7b      	ldrh	r3, [r7, #18]
 800d894:	8053      	strh	r3, [r2, #2]
 800d896:	e002      	b.n	800d89e <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800d898:	697b      	ldr	r3, [r7, #20]
 800d89a:	2201      	movs	r2, #1
 800d89c:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800d89e:	4b39      	ldr	r3, [pc, #228]	; (800d984 <mem_malloc+0x1e8>)
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	697a      	ldr	r2, [r7, #20]
 800d8a4:	429a      	cmp	r2, r3
 800d8a6:	d127      	bne.n	800d8f8 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800d8a8:	4b36      	ldr	r3, [pc, #216]	; (800d984 <mem_malloc+0x1e8>)
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800d8ae:	e005      	b.n	800d8bc <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800d8b0:	69bb      	ldr	r3, [r7, #24]
 800d8b2:	881b      	ldrh	r3, [r3, #0]
 800d8b4:	4618      	mov	r0, r3
 800d8b6:	f7ff fc83 	bl	800d1c0 <ptr_to_mem>
 800d8ba:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800d8bc:	69bb      	ldr	r3, [r7, #24]
 800d8be:	791b      	ldrb	r3, [r3, #4]
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d004      	beq.n	800d8ce <mem_malloc+0x132>
 800d8c4:	4b33      	ldr	r3, [pc, #204]	; (800d994 <mem_malloc+0x1f8>)
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	69ba      	ldr	r2, [r7, #24]
 800d8ca:	429a      	cmp	r2, r3
 800d8cc:	d1f0      	bne.n	800d8b0 <mem_malloc+0x114>
          }
          lfree = cur;
 800d8ce:	4a2d      	ldr	r2, [pc, #180]	; (800d984 <mem_malloc+0x1e8>)
 800d8d0:	69bb      	ldr	r3, [r7, #24]
 800d8d2:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800d8d4:	4b2b      	ldr	r3, [pc, #172]	; (800d984 <mem_malloc+0x1e8>)
 800d8d6:	681a      	ldr	r2, [r3, #0]
 800d8d8:	4b2e      	ldr	r3, [pc, #184]	; (800d994 <mem_malloc+0x1f8>)
 800d8da:	681b      	ldr	r3, [r3, #0]
 800d8dc:	429a      	cmp	r2, r3
 800d8de:	d00b      	beq.n	800d8f8 <mem_malloc+0x15c>
 800d8e0:	4b28      	ldr	r3, [pc, #160]	; (800d984 <mem_malloc+0x1e8>)
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	791b      	ldrb	r3, [r3, #4]
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d006      	beq.n	800d8f8 <mem_malloc+0x15c>
 800d8ea:	4b27      	ldr	r3, [pc, #156]	; (800d988 <mem_malloc+0x1ec>)
 800d8ec:	f240 32b5 	movw	r2, #949	; 0x3b5
 800d8f0:	4929      	ldr	r1, [pc, #164]	; (800d998 <mem_malloc+0x1fc>)
 800d8f2:	4827      	ldr	r0, [pc, #156]	; (800d990 <mem_malloc+0x1f4>)
 800d8f4:	f00c fb04 	bl	8019f00 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800d8f8:	4821      	ldr	r0, [pc, #132]	; (800d980 <mem_malloc+0x1e4>)
 800d8fa:	f00c f980 	bl	8019bfe <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800d8fe:	8bba      	ldrh	r2, [r7, #28]
 800d900:	697b      	ldr	r3, [r7, #20]
 800d902:	4413      	add	r3, r2
 800d904:	3308      	adds	r3, #8
 800d906:	4a23      	ldr	r2, [pc, #140]	; (800d994 <mem_malloc+0x1f8>)
 800d908:	6812      	ldr	r2, [r2, #0]
 800d90a:	4293      	cmp	r3, r2
 800d90c:	d906      	bls.n	800d91c <mem_malloc+0x180>
 800d90e:	4b1e      	ldr	r3, [pc, #120]	; (800d988 <mem_malloc+0x1ec>)
 800d910:	f240 32b9 	movw	r2, #953	; 0x3b9
 800d914:	4921      	ldr	r1, [pc, #132]	; (800d99c <mem_malloc+0x200>)
 800d916:	481e      	ldr	r0, [pc, #120]	; (800d990 <mem_malloc+0x1f4>)
 800d918:	f00c faf2 	bl	8019f00 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800d91c:	697b      	ldr	r3, [r7, #20]
 800d91e:	f003 0303 	and.w	r3, r3, #3
 800d922:	2b00      	cmp	r3, #0
 800d924:	d006      	beq.n	800d934 <mem_malloc+0x198>
 800d926:	4b18      	ldr	r3, [pc, #96]	; (800d988 <mem_malloc+0x1ec>)
 800d928:	f240 32bb 	movw	r2, #955	; 0x3bb
 800d92c:	491c      	ldr	r1, [pc, #112]	; (800d9a0 <mem_malloc+0x204>)
 800d92e:	4818      	ldr	r0, [pc, #96]	; (800d990 <mem_malloc+0x1f4>)
 800d930:	f00c fae6 	bl	8019f00 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800d934:	697b      	ldr	r3, [r7, #20]
 800d936:	f003 0303 	and.w	r3, r3, #3
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d006      	beq.n	800d94c <mem_malloc+0x1b0>
 800d93e:	4b12      	ldr	r3, [pc, #72]	; (800d988 <mem_malloc+0x1ec>)
 800d940:	f240 32bd 	movw	r2, #957	; 0x3bd
 800d944:	4917      	ldr	r1, [pc, #92]	; (800d9a4 <mem_malloc+0x208>)
 800d946:	4812      	ldr	r0, [pc, #72]	; (800d990 <mem_malloc+0x1f4>)
 800d948:	f00c fada 	bl	8019f00 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800d94c:	697b      	ldr	r3, [r7, #20]
 800d94e:	3308      	adds	r3, #8
 800d950:	e011      	b.n	800d976 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800d952:	8bfb      	ldrh	r3, [r7, #30]
 800d954:	4618      	mov	r0, r3
 800d956:	f7ff fc33 	bl	800d1c0 <ptr_to_mem>
 800d95a:	4603      	mov	r3, r0
 800d95c:	881b      	ldrh	r3, [r3, #0]
 800d95e:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800d960:	8bfa      	ldrh	r2, [r7, #30]
 800d962:	8bbb      	ldrh	r3, [r7, #28]
 800d964:	f5c3 43a0 	rsb	r3, r3, #20480	; 0x5000
 800d968:	429a      	cmp	r2, r3
 800d96a:	f4ff af41 	bcc.w	800d7f0 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800d96e:	4804      	ldr	r0, [pc, #16]	; (800d980 <mem_malloc+0x1e4>)
 800d970:	f00c f945 	bl	8019bfe <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800d974:	2300      	movs	r3, #0
}
 800d976:	4618      	mov	r0, r3
 800d978:	3720      	adds	r7, #32
 800d97a:	46bd      	mov	sp, r7
 800d97c:	bd80      	pop	{r7, pc}
 800d97e:	bf00      	nop
 800d980:	2000f084 	.word	0x2000f084
 800d984:	2000f088 	.word	0x2000f088
 800d988:	0801bb88 	.word	0x0801bb88
 800d98c:	0801bd4c 	.word	0x0801bd4c
 800d990:	0801bbd0 	.word	0x0801bbd0
 800d994:	2000f080 	.word	0x2000f080
 800d998:	0801bd60 	.word	0x0801bd60
 800d99c:	0801bd7c 	.word	0x0801bd7c
 800d9a0:	0801bdac 	.word	0x0801bdac
 800d9a4:	0801bddc 	.word	0x0801bddc

0800d9a8 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800d9a8:	b480      	push	{r7}
 800d9aa:	b085      	sub	sp, #20
 800d9ac:	af00      	add	r7, sp, #0
 800d9ae:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	68db      	ldr	r3, [r3, #12]
 800d9b4:	2200      	movs	r2, #0
 800d9b6:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	689b      	ldr	r3, [r3, #8]
 800d9bc:	3303      	adds	r3, #3
 800d9be:	f023 0303 	bic.w	r3, r3, #3
 800d9c2:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800d9c4:	2300      	movs	r3, #0
 800d9c6:	60fb      	str	r3, [r7, #12]
 800d9c8:	e011      	b.n	800d9ee <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	68db      	ldr	r3, [r3, #12]
 800d9ce:	681a      	ldr	r2, [r3, #0]
 800d9d0:	68bb      	ldr	r3, [r7, #8]
 800d9d2:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	68db      	ldr	r3, [r3, #12]
 800d9d8:	68ba      	ldr	r2, [r7, #8]
 800d9da:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	889b      	ldrh	r3, [r3, #4]
 800d9e0:	461a      	mov	r2, r3
 800d9e2:	68bb      	ldr	r3, [r7, #8]
 800d9e4:	4413      	add	r3, r2
 800d9e6:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800d9e8:	68fb      	ldr	r3, [r7, #12]
 800d9ea:	3301      	adds	r3, #1
 800d9ec:	60fb      	str	r3, [r7, #12]
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	88db      	ldrh	r3, [r3, #6]
 800d9f2:	461a      	mov	r2, r3
 800d9f4:	68fb      	ldr	r3, [r7, #12]
 800d9f6:	4293      	cmp	r3, r2
 800d9f8:	dbe7      	blt.n	800d9ca <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800d9fa:	bf00      	nop
 800d9fc:	bf00      	nop
 800d9fe:	3714      	adds	r7, #20
 800da00:	46bd      	mov	sp, r7
 800da02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da06:	4770      	bx	lr

0800da08 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800da08:	b580      	push	{r7, lr}
 800da0a:	b082      	sub	sp, #8
 800da0c:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800da0e:	2300      	movs	r3, #0
 800da10:	80fb      	strh	r3, [r7, #6]
 800da12:	e009      	b.n	800da28 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800da14:	88fb      	ldrh	r3, [r7, #6]
 800da16:	4a08      	ldr	r2, [pc, #32]	; (800da38 <memp_init+0x30>)
 800da18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800da1c:	4618      	mov	r0, r3
 800da1e:	f7ff ffc3 	bl	800d9a8 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800da22:	88fb      	ldrh	r3, [r7, #6]
 800da24:	3301      	adds	r3, #1
 800da26:	80fb      	strh	r3, [r7, #6]
 800da28:	88fb      	ldrh	r3, [r7, #6]
 800da2a:	2b0c      	cmp	r3, #12
 800da2c:	d9f2      	bls.n	800da14 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800da2e:	bf00      	nop
 800da30:	bf00      	nop
 800da32:	3708      	adds	r7, #8
 800da34:	46bd      	mov	sp, r7
 800da36:	bd80      	pop	{r7, pc}
 800da38:	0806a3a4 	.word	0x0806a3a4

0800da3c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800da3c:	b580      	push	{r7, lr}
 800da3e:	b084      	sub	sp, #16
 800da40:	af00      	add	r7, sp, #0
 800da42:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800da44:	f00c f906 	bl	8019c54 <sys_arch_protect>
 800da48:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	68db      	ldr	r3, [r3, #12]
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800da52:	68bb      	ldr	r3, [r7, #8]
 800da54:	2b00      	cmp	r3, #0
 800da56:	d015      	beq.n	800da84 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	68db      	ldr	r3, [r3, #12]
 800da5c:	68ba      	ldr	r2, [r7, #8]
 800da5e:	6812      	ldr	r2, [r2, #0]
 800da60:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800da62:	68bb      	ldr	r3, [r7, #8]
 800da64:	f003 0303 	and.w	r3, r3, #3
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d006      	beq.n	800da7a <do_memp_malloc_pool+0x3e>
 800da6c:	4b09      	ldr	r3, [pc, #36]	; (800da94 <do_memp_malloc_pool+0x58>)
 800da6e:	f44f 728c 	mov.w	r2, #280	; 0x118
 800da72:	4909      	ldr	r1, [pc, #36]	; (800da98 <do_memp_malloc_pool+0x5c>)
 800da74:	4809      	ldr	r0, [pc, #36]	; (800da9c <do_memp_malloc_pool+0x60>)
 800da76:	f00c fa43 	bl	8019f00 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800da7a:	68f8      	ldr	r0, [r7, #12]
 800da7c:	f00c f8f8 	bl	8019c70 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800da80:	68bb      	ldr	r3, [r7, #8]
 800da82:	e003      	b.n	800da8c <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800da84:	68f8      	ldr	r0, [r7, #12]
 800da86:	f00c f8f3 	bl	8019c70 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800da8a:	2300      	movs	r3, #0
}
 800da8c:	4618      	mov	r0, r3
 800da8e:	3710      	adds	r7, #16
 800da90:	46bd      	mov	sp, r7
 800da92:	bd80      	pop	{r7, pc}
 800da94:	0801be98 	.word	0x0801be98
 800da98:	0801bec8 	.word	0x0801bec8
 800da9c:	0801beec 	.word	0x0801beec

0800daa0 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800daa0:	b580      	push	{r7, lr}
 800daa2:	b084      	sub	sp, #16
 800daa4:	af00      	add	r7, sp, #0
 800daa6:	4603      	mov	r3, r0
 800daa8:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800daaa:	79fb      	ldrb	r3, [r7, #7]
 800daac:	2b0c      	cmp	r3, #12
 800daae:	d908      	bls.n	800dac2 <memp_malloc+0x22>
 800dab0:	4b0a      	ldr	r3, [pc, #40]	; (800dadc <memp_malloc+0x3c>)
 800dab2:	f240 1257 	movw	r2, #343	; 0x157
 800dab6:	490a      	ldr	r1, [pc, #40]	; (800dae0 <memp_malloc+0x40>)
 800dab8:	480a      	ldr	r0, [pc, #40]	; (800dae4 <memp_malloc+0x44>)
 800daba:	f00c fa21 	bl	8019f00 <iprintf>
 800dabe:	2300      	movs	r3, #0
 800dac0:	e008      	b.n	800dad4 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800dac2:	79fb      	ldrb	r3, [r7, #7]
 800dac4:	4a08      	ldr	r2, [pc, #32]	; (800dae8 <memp_malloc+0x48>)
 800dac6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800daca:	4618      	mov	r0, r3
 800dacc:	f7ff ffb6 	bl	800da3c <do_memp_malloc_pool>
 800dad0:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800dad2:	68fb      	ldr	r3, [r7, #12]
}
 800dad4:	4618      	mov	r0, r3
 800dad6:	3710      	adds	r7, #16
 800dad8:	46bd      	mov	sp, r7
 800dada:	bd80      	pop	{r7, pc}
 800dadc:	0801be98 	.word	0x0801be98
 800dae0:	0801bf28 	.word	0x0801bf28
 800dae4:	0801beec 	.word	0x0801beec
 800dae8:	0806a3a4 	.word	0x0806a3a4

0800daec <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800daec:	b580      	push	{r7, lr}
 800daee:	b084      	sub	sp, #16
 800daf0:	af00      	add	r7, sp, #0
 800daf2:	6078      	str	r0, [r7, #4]
 800daf4:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800daf6:	683b      	ldr	r3, [r7, #0]
 800daf8:	f003 0303 	and.w	r3, r3, #3
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d006      	beq.n	800db0e <do_memp_free_pool+0x22>
 800db00:	4b0d      	ldr	r3, [pc, #52]	; (800db38 <do_memp_free_pool+0x4c>)
 800db02:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800db06:	490d      	ldr	r1, [pc, #52]	; (800db3c <do_memp_free_pool+0x50>)
 800db08:	480d      	ldr	r0, [pc, #52]	; (800db40 <do_memp_free_pool+0x54>)
 800db0a:	f00c f9f9 	bl	8019f00 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800db0e:	683b      	ldr	r3, [r7, #0]
 800db10:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800db12:	f00c f89f 	bl	8019c54 <sys_arch_protect>
 800db16:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	68db      	ldr	r3, [r3, #12]
 800db1c:	681a      	ldr	r2, [r3, #0]
 800db1e:	68fb      	ldr	r3, [r7, #12]
 800db20:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	68db      	ldr	r3, [r3, #12]
 800db26:	68fa      	ldr	r2, [r7, #12]
 800db28:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800db2a:	68b8      	ldr	r0, [r7, #8]
 800db2c:	f00c f8a0 	bl	8019c70 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800db30:	bf00      	nop
 800db32:	3710      	adds	r7, #16
 800db34:	46bd      	mov	sp, r7
 800db36:	bd80      	pop	{r7, pc}
 800db38:	0801be98 	.word	0x0801be98
 800db3c:	0801bf48 	.word	0x0801bf48
 800db40:	0801beec 	.word	0x0801beec

0800db44 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800db44:	b580      	push	{r7, lr}
 800db46:	b082      	sub	sp, #8
 800db48:	af00      	add	r7, sp, #0
 800db4a:	4603      	mov	r3, r0
 800db4c:	6039      	str	r1, [r7, #0]
 800db4e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800db50:	79fb      	ldrb	r3, [r7, #7]
 800db52:	2b0c      	cmp	r3, #12
 800db54:	d907      	bls.n	800db66 <memp_free+0x22>
 800db56:	4b0c      	ldr	r3, [pc, #48]	; (800db88 <memp_free+0x44>)
 800db58:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800db5c:	490b      	ldr	r1, [pc, #44]	; (800db8c <memp_free+0x48>)
 800db5e:	480c      	ldr	r0, [pc, #48]	; (800db90 <memp_free+0x4c>)
 800db60:	f00c f9ce 	bl	8019f00 <iprintf>
 800db64:	e00c      	b.n	800db80 <memp_free+0x3c>

  if (mem == NULL) {
 800db66:	683b      	ldr	r3, [r7, #0]
 800db68:	2b00      	cmp	r3, #0
 800db6a:	d008      	beq.n	800db7e <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800db6c:	79fb      	ldrb	r3, [r7, #7]
 800db6e:	4a09      	ldr	r2, [pc, #36]	; (800db94 <memp_free+0x50>)
 800db70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800db74:	6839      	ldr	r1, [r7, #0]
 800db76:	4618      	mov	r0, r3
 800db78:	f7ff ffb8 	bl	800daec <do_memp_free_pool>
 800db7c:	e000      	b.n	800db80 <memp_free+0x3c>
    return;
 800db7e:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800db80:	3708      	adds	r7, #8
 800db82:	46bd      	mov	sp, r7
 800db84:	bd80      	pop	{r7, pc}
 800db86:	bf00      	nop
 800db88:	0801be98 	.word	0x0801be98
 800db8c:	0801bf68 	.word	0x0801bf68
 800db90:	0801beec 	.word	0x0801beec
 800db94:	0806a3a4 	.word	0x0806a3a4

0800db98 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800db98:	b480      	push	{r7}
 800db9a:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800db9c:	bf00      	nop
 800db9e:	46bd      	mov	sp, r7
 800dba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dba4:	4770      	bx	lr
	...

0800dba8 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800dba8:	b580      	push	{r7, lr}
 800dbaa:	b086      	sub	sp, #24
 800dbac:	af00      	add	r7, sp, #0
 800dbae:	60f8      	str	r0, [r7, #12]
 800dbb0:	60b9      	str	r1, [r7, #8]
 800dbb2:	607a      	str	r2, [r7, #4]
 800dbb4:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d108      	bne.n	800dbce <netif_add+0x26>
 800dbbc:	4b5b      	ldr	r3, [pc, #364]	; (800dd2c <netif_add+0x184>)
 800dbbe:	f240 1227 	movw	r2, #295	; 0x127
 800dbc2:	495b      	ldr	r1, [pc, #364]	; (800dd30 <netif_add+0x188>)
 800dbc4:	485b      	ldr	r0, [pc, #364]	; (800dd34 <netif_add+0x18c>)
 800dbc6:	f00c f99b 	bl	8019f00 <iprintf>
 800dbca:	2300      	movs	r3, #0
 800dbcc:	e0a9      	b.n	800dd22 <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800dbce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d108      	bne.n	800dbe6 <netif_add+0x3e>
 800dbd4:	4b55      	ldr	r3, [pc, #340]	; (800dd2c <netif_add+0x184>)
 800dbd6:	f44f 7294 	mov.w	r2, #296	; 0x128
 800dbda:	4957      	ldr	r1, [pc, #348]	; (800dd38 <netif_add+0x190>)
 800dbdc:	4855      	ldr	r0, [pc, #340]	; (800dd34 <netif_add+0x18c>)
 800dbde:	f00c f98f 	bl	8019f00 <iprintf>
 800dbe2:	2300      	movs	r3, #0
 800dbe4:	e09d      	b.n	800dd22 <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800dbe6:	68bb      	ldr	r3, [r7, #8]
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d101      	bne.n	800dbf0 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800dbec:	4b53      	ldr	r3, [pc, #332]	; (800dd3c <netif_add+0x194>)
 800dbee:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	d101      	bne.n	800dbfa <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800dbf6:	4b51      	ldr	r3, [pc, #324]	; (800dd3c <netif_add+0x194>)
 800dbf8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800dbfa:	683b      	ldr	r3, [r7, #0]
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d101      	bne.n	800dc04 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800dc00:	4b4e      	ldr	r3, [pc, #312]	; (800dd3c <netif_add+0x194>)
 800dc02:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800dc04:	68fb      	ldr	r3, [r7, #12]
 800dc06:	2200      	movs	r2, #0
 800dc08:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800dc0a:	68fb      	ldr	r3, [r7, #12]
 800dc0c:	2200      	movs	r2, #0
 800dc0e:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800dc10:	68fb      	ldr	r3, [r7, #12]
 800dc12:	2200      	movs	r2, #0
 800dc14:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800dc16:	68fb      	ldr	r3, [r7, #12]
 800dc18:	4a49      	ldr	r2, [pc, #292]	; (800dd40 <netif_add+0x198>)
 800dc1a:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800dc1c:	68fb      	ldr	r3, [r7, #12]
 800dc1e:	2200      	movs	r2, #0
 800dc20:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	2200      	movs	r2, #0
 800dc26:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800dc2a:	68fb      	ldr	r3, [r7, #12]
 800dc2c:	3324      	adds	r3, #36	; 0x24
 800dc2e:	2204      	movs	r2, #4
 800dc30:	2100      	movs	r1, #0
 800dc32:	4618      	mov	r0, r3
 800dc34:	f00c f87c 	bl	8019d30 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	2200      	movs	r2, #0
 800dc3c:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	6a3a      	ldr	r2, [r7, #32]
 800dc42:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800dc44:	4b3f      	ldr	r3, [pc, #252]	; (800dd44 <netif_add+0x19c>)
 800dc46:	781a      	ldrb	r2, [r3, #0]
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dc52:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800dc54:	683b      	ldr	r3, [r7, #0]
 800dc56:	687a      	ldr	r2, [r7, #4]
 800dc58:	68b9      	ldr	r1, [r7, #8]
 800dc5a:	68f8      	ldr	r0, [r7, #12]
 800dc5c:	f000 f914 	bl	800de88 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800dc60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc62:	68f8      	ldr	r0, [r7, #12]
 800dc64:	4798      	blx	r3
 800dc66:	4603      	mov	r3, r0
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d001      	beq.n	800dc70 <netif_add+0xc8>
    return NULL;
 800dc6c:	2300      	movs	r3, #0
 800dc6e:	e058      	b.n	800dd22 <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800dc76:	2bff      	cmp	r3, #255	; 0xff
 800dc78:	d103      	bne.n	800dc82 <netif_add+0xda>
        netif->num = 0;
 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	2200      	movs	r2, #0
 800dc7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 800dc82:	2300      	movs	r3, #0
 800dc84:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800dc86:	4b30      	ldr	r3, [pc, #192]	; (800dd48 <netif_add+0x1a0>)
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	617b      	str	r3, [r7, #20]
 800dc8c:	e02b      	b.n	800dce6 <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800dc8e:	697a      	ldr	r2, [r7, #20]
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	429a      	cmp	r2, r3
 800dc94:	d106      	bne.n	800dca4 <netif_add+0xfc>
 800dc96:	4b25      	ldr	r3, [pc, #148]	; (800dd2c <netif_add+0x184>)
 800dc98:	f240 128b 	movw	r2, #395	; 0x18b
 800dc9c:	492b      	ldr	r1, [pc, #172]	; (800dd4c <netif_add+0x1a4>)
 800dc9e:	4825      	ldr	r0, [pc, #148]	; (800dd34 <netif_add+0x18c>)
 800dca0:	f00c f92e 	bl	8019f00 <iprintf>
        num_netifs++;
 800dca4:	693b      	ldr	r3, [r7, #16]
 800dca6:	3301      	adds	r3, #1
 800dca8:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800dcaa:	693b      	ldr	r3, [r7, #16]
 800dcac:	2bff      	cmp	r3, #255	; 0xff
 800dcae:	dd06      	ble.n	800dcbe <netif_add+0x116>
 800dcb0:	4b1e      	ldr	r3, [pc, #120]	; (800dd2c <netif_add+0x184>)
 800dcb2:	f240 128d 	movw	r2, #397	; 0x18d
 800dcb6:	4926      	ldr	r1, [pc, #152]	; (800dd50 <netif_add+0x1a8>)
 800dcb8:	481e      	ldr	r0, [pc, #120]	; (800dd34 <netif_add+0x18c>)
 800dcba:	f00c f921 	bl	8019f00 <iprintf>
        if (netif2->num == netif->num) {
 800dcbe:	697b      	ldr	r3, [r7, #20]
 800dcc0:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800dcca:	429a      	cmp	r2, r3
 800dccc:	d108      	bne.n	800dce0 <netif_add+0x138>
          netif->num++;
 800dcce:	68fb      	ldr	r3, [r7, #12]
 800dcd0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800dcd4:	3301      	adds	r3, #1
 800dcd6:	b2da      	uxtb	r2, r3
 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 800dcde:	e005      	b.n	800dcec <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800dce0:	697b      	ldr	r3, [r7, #20]
 800dce2:	681b      	ldr	r3, [r3, #0]
 800dce4:	617b      	str	r3, [r7, #20]
 800dce6:	697b      	ldr	r3, [r7, #20]
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	d1d0      	bne.n	800dc8e <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 800dcec:	697b      	ldr	r3, [r7, #20]
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d1be      	bne.n	800dc70 <netif_add+0xc8>
  }
  if (netif->num == 254) {
 800dcf2:	68fb      	ldr	r3, [r7, #12]
 800dcf4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800dcf8:	2bfe      	cmp	r3, #254	; 0xfe
 800dcfa:	d103      	bne.n	800dd04 <netif_add+0x15c>
    netif_num = 0;
 800dcfc:	4b11      	ldr	r3, [pc, #68]	; (800dd44 <netif_add+0x19c>)
 800dcfe:	2200      	movs	r2, #0
 800dd00:	701a      	strb	r2, [r3, #0]
 800dd02:	e006      	b.n	800dd12 <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800dd04:	68fb      	ldr	r3, [r7, #12]
 800dd06:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800dd0a:	3301      	adds	r3, #1
 800dd0c:	b2da      	uxtb	r2, r3
 800dd0e:	4b0d      	ldr	r3, [pc, #52]	; (800dd44 <netif_add+0x19c>)
 800dd10:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800dd12:	4b0d      	ldr	r3, [pc, #52]	; (800dd48 <netif_add+0x1a0>)
 800dd14:	681a      	ldr	r2, [r3, #0]
 800dd16:	68fb      	ldr	r3, [r7, #12]
 800dd18:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800dd1a:	4a0b      	ldr	r2, [pc, #44]	; (800dd48 <netif_add+0x1a0>)
 800dd1c:	68fb      	ldr	r3, [r7, #12]
 800dd1e:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800dd20:	68fb      	ldr	r3, [r7, #12]
}
 800dd22:	4618      	mov	r0, r3
 800dd24:	3718      	adds	r7, #24
 800dd26:	46bd      	mov	sp, r7
 800dd28:	bd80      	pop	{r7, pc}
 800dd2a:	bf00      	nop
 800dd2c:	0801bf84 	.word	0x0801bf84
 800dd30:	0801c018 	.word	0x0801c018
 800dd34:	0801bfd4 	.word	0x0801bfd4
 800dd38:	0801c034 	.word	0x0801c034
 800dd3c:	0806a428 	.word	0x0806a428
 800dd40:	0800e149 	.word	0x0800e149
 800dd44:	20013ac0 	.word	0x20013ac0
 800dd48:	20013ab8 	.word	0x20013ab8
 800dd4c:	0801c058 	.word	0x0801c058
 800dd50:	0801c06c 	.word	0x0801c06c

0800dd54 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800dd54:	b580      	push	{r7, lr}
 800dd56:	b082      	sub	sp, #8
 800dd58:	af00      	add	r7, sp, #0
 800dd5a:	6078      	str	r0, [r7, #4]
 800dd5c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800dd5e:	6839      	ldr	r1, [r7, #0]
 800dd60:	6878      	ldr	r0, [r7, #4]
 800dd62:	f002 fd1b 	bl	801079c <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800dd66:	6839      	ldr	r1, [r7, #0]
 800dd68:	6878      	ldr	r0, [r7, #4]
 800dd6a:	f007 fa63 	bl	8015234 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800dd6e:	bf00      	nop
 800dd70:	3708      	adds	r7, #8
 800dd72:	46bd      	mov	sp, r7
 800dd74:	bd80      	pop	{r7, pc}
	...

0800dd78 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800dd78:	b580      	push	{r7, lr}
 800dd7a:	b086      	sub	sp, #24
 800dd7c:	af00      	add	r7, sp, #0
 800dd7e:	60f8      	str	r0, [r7, #12]
 800dd80:	60b9      	str	r1, [r7, #8]
 800dd82:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800dd84:	68bb      	ldr	r3, [r7, #8]
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	d106      	bne.n	800dd98 <netif_do_set_ipaddr+0x20>
 800dd8a:	4b1d      	ldr	r3, [pc, #116]	; (800de00 <netif_do_set_ipaddr+0x88>)
 800dd8c:	f240 12cb 	movw	r2, #459	; 0x1cb
 800dd90:	491c      	ldr	r1, [pc, #112]	; (800de04 <netif_do_set_ipaddr+0x8c>)
 800dd92:	481d      	ldr	r0, [pc, #116]	; (800de08 <netif_do_set_ipaddr+0x90>)
 800dd94:	f00c f8b4 	bl	8019f00 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d106      	bne.n	800ddac <netif_do_set_ipaddr+0x34>
 800dd9e:	4b18      	ldr	r3, [pc, #96]	; (800de00 <netif_do_set_ipaddr+0x88>)
 800dda0:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800dda4:	4917      	ldr	r1, [pc, #92]	; (800de04 <netif_do_set_ipaddr+0x8c>)
 800dda6:	4818      	ldr	r0, [pc, #96]	; (800de08 <netif_do_set_ipaddr+0x90>)
 800dda8:	f00c f8aa 	bl	8019f00 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800ddac:	68bb      	ldr	r3, [r7, #8]
 800ddae:	681a      	ldr	r2, [r3, #0]
 800ddb0:	68fb      	ldr	r3, [r7, #12]
 800ddb2:	3304      	adds	r3, #4
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	429a      	cmp	r2, r3
 800ddb8:	d01c      	beq.n	800ddf4 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800ddba:	68bb      	ldr	r3, [r7, #8]
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	3304      	adds	r3, #4
 800ddc4:	681a      	ldr	r2, [r3, #0]
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800ddca:	f107 0314 	add.w	r3, r7, #20
 800ddce:	4619      	mov	r1, r3
 800ddd0:	6878      	ldr	r0, [r7, #4]
 800ddd2:	f7ff ffbf 	bl	800dd54 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800ddd6:	68bb      	ldr	r3, [r7, #8]
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d002      	beq.n	800dde2 <netif_do_set_ipaddr+0x6a>
 800dddc:	68bb      	ldr	r3, [r7, #8]
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	e000      	b.n	800dde4 <netif_do_set_ipaddr+0x6c>
 800dde2:	2300      	movs	r3, #0
 800dde4:	68fa      	ldr	r2, [r7, #12]
 800dde6:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800dde8:	2101      	movs	r1, #1
 800ddea:	68f8      	ldr	r0, [r7, #12]
 800ddec:	f000 f8d2 	bl	800df94 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800ddf0:	2301      	movs	r3, #1
 800ddf2:	e000      	b.n	800ddf6 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800ddf4:	2300      	movs	r3, #0
}
 800ddf6:	4618      	mov	r0, r3
 800ddf8:	3718      	adds	r7, #24
 800ddfa:	46bd      	mov	sp, r7
 800ddfc:	bd80      	pop	{r7, pc}
 800ddfe:	bf00      	nop
 800de00:	0801bf84 	.word	0x0801bf84
 800de04:	0801c09c 	.word	0x0801c09c
 800de08:	0801bfd4 	.word	0x0801bfd4

0800de0c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800de0c:	b480      	push	{r7}
 800de0e:	b085      	sub	sp, #20
 800de10:	af00      	add	r7, sp, #0
 800de12:	60f8      	str	r0, [r7, #12]
 800de14:	60b9      	str	r1, [r7, #8]
 800de16:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800de18:	68bb      	ldr	r3, [r7, #8]
 800de1a:	681a      	ldr	r2, [r3, #0]
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	3308      	adds	r3, #8
 800de20:	681b      	ldr	r3, [r3, #0]
 800de22:	429a      	cmp	r2, r3
 800de24:	d00a      	beq.n	800de3c <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800de26:	68bb      	ldr	r3, [r7, #8]
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d002      	beq.n	800de32 <netif_do_set_netmask+0x26>
 800de2c:	68bb      	ldr	r3, [r7, #8]
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	e000      	b.n	800de34 <netif_do_set_netmask+0x28>
 800de32:	2300      	movs	r3, #0
 800de34:	68fa      	ldr	r2, [r7, #12]
 800de36:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800de38:	2301      	movs	r3, #1
 800de3a:	e000      	b.n	800de3e <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800de3c:	2300      	movs	r3, #0
}
 800de3e:	4618      	mov	r0, r3
 800de40:	3714      	adds	r7, #20
 800de42:	46bd      	mov	sp, r7
 800de44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de48:	4770      	bx	lr

0800de4a <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800de4a:	b480      	push	{r7}
 800de4c:	b085      	sub	sp, #20
 800de4e:	af00      	add	r7, sp, #0
 800de50:	60f8      	str	r0, [r7, #12]
 800de52:	60b9      	str	r1, [r7, #8]
 800de54:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800de56:	68bb      	ldr	r3, [r7, #8]
 800de58:	681a      	ldr	r2, [r3, #0]
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	330c      	adds	r3, #12
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	429a      	cmp	r2, r3
 800de62:	d00a      	beq.n	800de7a <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800de64:	68bb      	ldr	r3, [r7, #8]
 800de66:	2b00      	cmp	r3, #0
 800de68:	d002      	beq.n	800de70 <netif_do_set_gw+0x26>
 800de6a:	68bb      	ldr	r3, [r7, #8]
 800de6c:	681b      	ldr	r3, [r3, #0]
 800de6e:	e000      	b.n	800de72 <netif_do_set_gw+0x28>
 800de70:	2300      	movs	r3, #0
 800de72:	68fa      	ldr	r2, [r7, #12]
 800de74:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800de76:	2301      	movs	r3, #1
 800de78:	e000      	b.n	800de7c <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800de7a:	2300      	movs	r3, #0
}
 800de7c:	4618      	mov	r0, r3
 800de7e:	3714      	adds	r7, #20
 800de80:	46bd      	mov	sp, r7
 800de82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de86:	4770      	bx	lr

0800de88 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800de88:	b580      	push	{r7, lr}
 800de8a:	b088      	sub	sp, #32
 800de8c:	af00      	add	r7, sp, #0
 800de8e:	60f8      	str	r0, [r7, #12]
 800de90:	60b9      	str	r1, [r7, #8]
 800de92:	607a      	str	r2, [r7, #4]
 800de94:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800de96:	2300      	movs	r3, #0
 800de98:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800de9a:	2300      	movs	r3, #0
 800de9c:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800de9e:	68bb      	ldr	r3, [r7, #8]
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d101      	bne.n	800dea8 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800dea4:	4b1c      	ldr	r3, [pc, #112]	; (800df18 <netif_set_addr+0x90>)
 800dea6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	2b00      	cmp	r3, #0
 800deac:	d101      	bne.n	800deb2 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800deae:	4b1a      	ldr	r3, [pc, #104]	; (800df18 <netif_set_addr+0x90>)
 800deb0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800deb2:	683b      	ldr	r3, [r7, #0]
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	d101      	bne.n	800debc <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800deb8:	4b17      	ldr	r3, [pc, #92]	; (800df18 <netif_set_addr+0x90>)
 800deba:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800debc:	68bb      	ldr	r3, [r7, #8]
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d003      	beq.n	800deca <netif_set_addr+0x42>
 800dec2:	68bb      	ldr	r3, [r7, #8]
 800dec4:	681b      	ldr	r3, [r3, #0]
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	d101      	bne.n	800dece <netif_set_addr+0x46>
 800deca:	2301      	movs	r3, #1
 800decc:	e000      	b.n	800ded0 <netif_set_addr+0x48>
 800dece:	2300      	movs	r3, #0
 800ded0:	617b      	str	r3, [r7, #20]
  if (remove) {
 800ded2:	697b      	ldr	r3, [r7, #20]
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d006      	beq.n	800dee6 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800ded8:	f107 0310 	add.w	r3, r7, #16
 800dedc:	461a      	mov	r2, r3
 800dede:	68b9      	ldr	r1, [r7, #8]
 800dee0:	68f8      	ldr	r0, [r7, #12]
 800dee2:	f7ff ff49 	bl	800dd78 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800dee6:	69fa      	ldr	r2, [r7, #28]
 800dee8:	6879      	ldr	r1, [r7, #4]
 800deea:	68f8      	ldr	r0, [r7, #12]
 800deec:	f7ff ff8e 	bl	800de0c <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800def0:	69ba      	ldr	r2, [r7, #24]
 800def2:	6839      	ldr	r1, [r7, #0]
 800def4:	68f8      	ldr	r0, [r7, #12]
 800def6:	f7ff ffa8 	bl	800de4a <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800defa:	697b      	ldr	r3, [r7, #20]
 800defc:	2b00      	cmp	r3, #0
 800defe:	d106      	bne.n	800df0e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800df00:	f107 0310 	add.w	r3, r7, #16
 800df04:	461a      	mov	r2, r3
 800df06:	68b9      	ldr	r1, [r7, #8]
 800df08:	68f8      	ldr	r0, [r7, #12]
 800df0a:	f7ff ff35 	bl	800dd78 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800df0e:	bf00      	nop
 800df10:	3720      	adds	r7, #32
 800df12:	46bd      	mov	sp, r7
 800df14:	bd80      	pop	{r7, pc}
 800df16:	bf00      	nop
 800df18:	0806a428 	.word	0x0806a428

0800df1c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800df1c:	b480      	push	{r7}
 800df1e:	b083      	sub	sp, #12
 800df20:	af00      	add	r7, sp, #0
 800df22:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800df24:	4a04      	ldr	r2, [pc, #16]	; (800df38 <netif_set_default+0x1c>)
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800df2a:	bf00      	nop
 800df2c:	370c      	adds	r7, #12
 800df2e:	46bd      	mov	sp, r7
 800df30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df34:	4770      	bx	lr
 800df36:	bf00      	nop
 800df38:	20013abc 	.word	0x20013abc

0800df3c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800df3c:	b580      	push	{r7, lr}
 800df3e:	b082      	sub	sp, #8
 800df40:	af00      	add	r7, sp, #0
 800df42:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	2b00      	cmp	r3, #0
 800df48:	d107      	bne.n	800df5a <netif_set_up+0x1e>
 800df4a:	4b0f      	ldr	r3, [pc, #60]	; (800df88 <netif_set_up+0x4c>)
 800df4c:	f44f 7254 	mov.w	r2, #848	; 0x350
 800df50:	490e      	ldr	r1, [pc, #56]	; (800df8c <netif_set_up+0x50>)
 800df52:	480f      	ldr	r0, [pc, #60]	; (800df90 <netif_set_up+0x54>)
 800df54:	f00b ffd4 	bl	8019f00 <iprintf>
 800df58:	e013      	b.n	800df82 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800df60:	f003 0301 	and.w	r3, r3, #1
 800df64:	2b00      	cmp	r3, #0
 800df66:	d10c      	bne.n	800df82 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800df6e:	f043 0301 	orr.w	r3, r3, #1
 800df72:	b2da      	uxtb	r2, r3
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800df7a:	2103      	movs	r1, #3
 800df7c:	6878      	ldr	r0, [r7, #4]
 800df7e:	f000 f809 	bl	800df94 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800df82:	3708      	adds	r7, #8
 800df84:	46bd      	mov	sp, r7
 800df86:	bd80      	pop	{r7, pc}
 800df88:	0801bf84 	.word	0x0801bf84
 800df8c:	0801c10c 	.word	0x0801c10c
 800df90:	0801bfd4 	.word	0x0801bfd4

0800df94 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800df94:	b580      	push	{r7, lr}
 800df96:	b082      	sub	sp, #8
 800df98:	af00      	add	r7, sp, #0
 800df9a:	6078      	str	r0, [r7, #4]
 800df9c:	460b      	mov	r3, r1
 800df9e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d106      	bne.n	800dfb4 <netif_issue_reports+0x20>
 800dfa6:	4b18      	ldr	r3, [pc, #96]	; (800e008 <netif_issue_reports+0x74>)
 800dfa8:	f240 326d 	movw	r2, #877	; 0x36d
 800dfac:	4917      	ldr	r1, [pc, #92]	; (800e00c <netif_issue_reports+0x78>)
 800dfae:	4818      	ldr	r0, [pc, #96]	; (800e010 <netif_issue_reports+0x7c>)
 800dfb0:	f00b ffa6 	bl	8019f00 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800dfba:	f003 0304 	and.w	r3, r3, #4
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d01e      	beq.n	800e000 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800dfc8:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d017      	beq.n	800e000 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800dfd0:	78fb      	ldrb	r3, [r7, #3]
 800dfd2:	f003 0301 	and.w	r3, r3, #1
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d013      	beq.n	800e002 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	3304      	adds	r3, #4
 800dfde:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d00e      	beq.n	800e002 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800dfea:	f003 0308 	and.w	r3, r3, #8
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d007      	beq.n	800e002 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	3304      	adds	r3, #4
 800dff6:	4619      	mov	r1, r3
 800dff8:	6878      	ldr	r0, [r7, #4]
 800dffa:	f009 ffa1 	bl	8017f40 <etharp_request>
 800dffe:	e000      	b.n	800e002 <netif_issue_reports+0x6e>
    return;
 800e000:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800e002:	3708      	adds	r7, #8
 800e004:	46bd      	mov	sp, r7
 800e006:	bd80      	pop	{r7, pc}
 800e008:	0801bf84 	.word	0x0801bf84
 800e00c:	0801c128 	.word	0x0801c128
 800e010:	0801bfd4 	.word	0x0801bfd4

0800e014 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800e014:	b580      	push	{r7, lr}
 800e016:	b082      	sub	sp, #8
 800e018:	af00      	add	r7, sp, #0
 800e01a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d107      	bne.n	800e032 <netif_set_down+0x1e>
 800e022:	4b12      	ldr	r3, [pc, #72]	; (800e06c <netif_set_down+0x58>)
 800e024:	f240 329b 	movw	r2, #923	; 0x39b
 800e028:	4911      	ldr	r1, [pc, #68]	; (800e070 <netif_set_down+0x5c>)
 800e02a:	4812      	ldr	r0, [pc, #72]	; (800e074 <netif_set_down+0x60>)
 800e02c:	f00b ff68 	bl	8019f00 <iprintf>
 800e030:	e019      	b.n	800e066 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800e038:	f003 0301 	and.w	r3, r3, #1
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d012      	beq.n	800e066 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800e046:	f023 0301 	bic.w	r3, r3, #1
 800e04a:	b2da      	uxtb	r2, r3
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800e058:	f003 0308 	and.w	r3, r3, #8
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	d002      	beq.n	800e066 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800e060:	6878      	ldr	r0, [r7, #4]
 800e062:	f009 fb27 	bl	80176b4 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800e066:	3708      	adds	r7, #8
 800e068:	46bd      	mov	sp, r7
 800e06a:	bd80      	pop	{r7, pc}
 800e06c:	0801bf84 	.word	0x0801bf84
 800e070:	0801c14c 	.word	0x0801c14c
 800e074:	0801bfd4 	.word	0x0801bfd4

0800e078 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800e078:	b580      	push	{r7, lr}
 800e07a:	b082      	sub	sp, #8
 800e07c:	af00      	add	r7, sp, #0
 800e07e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	2b00      	cmp	r3, #0
 800e084:	d107      	bne.n	800e096 <netif_set_link_up+0x1e>
 800e086:	4b15      	ldr	r3, [pc, #84]	; (800e0dc <netif_set_link_up+0x64>)
 800e088:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800e08c:	4914      	ldr	r1, [pc, #80]	; (800e0e0 <netif_set_link_up+0x68>)
 800e08e:	4815      	ldr	r0, [pc, #84]	; (800e0e4 <netif_set_link_up+0x6c>)
 800e090:	f00b ff36 	bl	8019f00 <iprintf>
 800e094:	e01e      	b.n	800e0d4 <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800e09c:	f003 0304 	and.w	r3, r3, #4
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d117      	bne.n	800e0d4 <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800e0aa:	f043 0304 	orr.w	r3, r3, #4
 800e0ae:	b2da      	uxtb	r2, r3
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 800e0b6:	6878      	ldr	r0, [r7, #4]
 800e0b8:	f007 fce6 	bl	8015a88 <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800e0bc:	2103      	movs	r1, #3
 800e0be:	6878      	ldr	r0, [r7, #4]
 800e0c0:	f7ff ff68 	bl	800df94 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	69db      	ldr	r3, [r3, #28]
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d003      	beq.n	800e0d4 <netif_set_link_up+0x5c>
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	69db      	ldr	r3, [r3, #28]
 800e0d0:	6878      	ldr	r0, [r7, #4]
 800e0d2:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800e0d4:	3708      	adds	r7, #8
 800e0d6:	46bd      	mov	sp, r7
 800e0d8:	bd80      	pop	{r7, pc}
 800e0da:	bf00      	nop
 800e0dc:	0801bf84 	.word	0x0801bf84
 800e0e0:	0801c16c 	.word	0x0801c16c
 800e0e4:	0801bfd4 	.word	0x0801bfd4

0800e0e8 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800e0e8:	b580      	push	{r7, lr}
 800e0ea:	b082      	sub	sp, #8
 800e0ec:	af00      	add	r7, sp, #0
 800e0ee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	d107      	bne.n	800e106 <netif_set_link_down+0x1e>
 800e0f6:	4b11      	ldr	r3, [pc, #68]	; (800e13c <netif_set_link_down+0x54>)
 800e0f8:	f240 4206 	movw	r2, #1030	; 0x406
 800e0fc:	4910      	ldr	r1, [pc, #64]	; (800e140 <netif_set_link_down+0x58>)
 800e0fe:	4811      	ldr	r0, [pc, #68]	; (800e144 <netif_set_link_down+0x5c>)
 800e100:	f00b fefe 	bl	8019f00 <iprintf>
 800e104:	e017      	b.n	800e136 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800e10c:	f003 0304 	and.w	r3, r3, #4
 800e110:	2b00      	cmp	r3, #0
 800e112:	d010      	beq.n	800e136 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800e11a:	f023 0304 	bic.w	r3, r3, #4
 800e11e:	b2da      	uxtb	r2, r3
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	69db      	ldr	r3, [r3, #28]
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	d003      	beq.n	800e136 <netif_set_link_down+0x4e>
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	69db      	ldr	r3, [r3, #28]
 800e132:	6878      	ldr	r0, [r7, #4]
 800e134:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800e136:	3708      	adds	r7, #8
 800e138:	46bd      	mov	sp, r7
 800e13a:	bd80      	pop	{r7, pc}
 800e13c:	0801bf84 	.word	0x0801bf84
 800e140:	0801c190 	.word	0x0801c190
 800e144:	0801bfd4 	.word	0x0801bfd4

0800e148 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800e148:	b480      	push	{r7}
 800e14a:	b085      	sub	sp, #20
 800e14c:	af00      	add	r7, sp, #0
 800e14e:	60f8      	str	r0, [r7, #12]
 800e150:	60b9      	str	r1, [r7, #8]
 800e152:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800e154:	f06f 030b 	mvn.w	r3, #11
}
 800e158:	4618      	mov	r0, r3
 800e15a:	3714      	adds	r7, #20
 800e15c:	46bd      	mov	sp, r7
 800e15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e162:	4770      	bx	lr

0800e164 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800e164:	b480      	push	{r7}
 800e166:	b085      	sub	sp, #20
 800e168:	af00      	add	r7, sp, #0
 800e16a:	4603      	mov	r3, r0
 800e16c:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800e16e:	79fb      	ldrb	r3, [r7, #7]
 800e170:	2b00      	cmp	r3, #0
 800e172:	d013      	beq.n	800e19c <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800e174:	4b0d      	ldr	r3, [pc, #52]	; (800e1ac <netif_get_by_index+0x48>)
 800e176:	681b      	ldr	r3, [r3, #0]
 800e178:	60fb      	str	r3, [r7, #12]
 800e17a:	e00c      	b.n	800e196 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800e17c:	68fb      	ldr	r3, [r7, #12]
 800e17e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e182:	3301      	adds	r3, #1
 800e184:	b2db      	uxtb	r3, r3
 800e186:	79fa      	ldrb	r2, [r7, #7]
 800e188:	429a      	cmp	r2, r3
 800e18a:	d101      	bne.n	800e190 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800e18c:	68fb      	ldr	r3, [r7, #12]
 800e18e:	e006      	b.n	800e19e <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800e190:	68fb      	ldr	r3, [r7, #12]
 800e192:	681b      	ldr	r3, [r3, #0]
 800e194:	60fb      	str	r3, [r7, #12]
 800e196:	68fb      	ldr	r3, [r7, #12]
 800e198:	2b00      	cmp	r3, #0
 800e19a:	d1ef      	bne.n	800e17c <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800e19c:	2300      	movs	r3, #0
}
 800e19e:	4618      	mov	r0, r3
 800e1a0:	3714      	adds	r7, #20
 800e1a2:	46bd      	mov	sp, r7
 800e1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1a8:	4770      	bx	lr
 800e1aa:	bf00      	nop
 800e1ac:	20013ab8 	.word	0x20013ab8

0800e1b0 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800e1b0:	b580      	push	{r7, lr}
 800e1b2:	b082      	sub	sp, #8
 800e1b4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800e1b6:	f00b fd4d 	bl	8019c54 <sys_arch_protect>
 800e1ba:	6038      	str	r0, [r7, #0]
 800e1bc:	4b0d      	ldr	r3, [pc, #52]	; (800e1f4 <pbuf_free_ooseq+0x44>)
 800e1be:	2200      	movs	r2, #0
 800e1c0:	701a      	strb	r2, [r3, #0]
 800e1c2:	6838      	ldr	r0, [r7, #0]
 800e1c4:	f00b fd54 	bl	8019c70 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800e1c8:	4b0b      	ldr	r3, [pc, #44]	; (800e1f8 <pbuf_free_ooseq+0x48>)
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	607b      	str	r3, [r7, #4]
 800e1ce:	e00a      	b.n	800e1e6 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d003      	beq.n	800e1e0 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800e1d8:	6878      	ldr	r0, [r7, #4]
 800e1da:	f002 fb1d 	bl	8010818 <tcp_free_ooseq>
      return;
 800e1de:	e005      	b.n	800e1ec <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	68db      	ldr	r3, [r3, #12]
 800e1e4:	607b      	str	r3, [r7, #4]
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	d1f1      	bne.n	800e1d0 <pbuf_free_ooseq+0x20>
    }
  }
}
 800e1ec:	3708      	adds	r7, #8
 800e1ee:	46bd      	mov	sp, r7
 800e1f0:	bd80      	pop	{r7, pc}
 800e1f2:	bf00      	nop
 800e1f4:	20013ac1 	.word	0x20013ac1
 800e1f8:	20013ad0 	.word	0x20013ad0

0800e1fc <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800e1fc:	b580      	push	{r7, lr}
 800e1fe:	b082      	sub	sp, #8
 800e200:	af00      	add	r7, sp, #0
 800e202:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800e204:	f7ff ffd4 	bl	800e1b0 <pbuf_free_ooseq>
}
 800e208:	bf00      	nop
 800e20a:	3708      	adds	r7, #8
 800e20c:	46bd      	mov	sp, r7
 800e20e:	bd80      	pop	{r7, pc}

0800e210 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800e210:	b580      	push	{r7, lr}
 800e212:	b082      	sub	sp, #8
 800e214:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800e216:	f00b fd1d 	bl	8019c54 <sys_arch_protect>
 800e21a:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800e21c:	4b0f      	ldr	r3, [pc, #60]	; (800e25c <pbuf_pool_is_empty+0x4c>)
 800e21e:	781b      	ldrb	r3, [r3, #0]
 800e220:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800e222:	4b0e      	ldr	r3, [pc, #56]	; (800e25c <pbuf_pool_is_empty+0x4c>)
 800e224:	2201      	movs	r2, #1
 800e226:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800e228:	6878      	ldr	r0, [r7, #4]
 800e22a:	f00b fd21 	bl	8019c70 <sys_arch_unprotect>

  if (!queued) {
 800e22e:	78fb      	ldrb	r3, [r7, #3]
 800e230:	2b00      	cmp	r3, #0
 800e232:	d10f      	bne.n	800e254 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800e234:	2100      	movs	r1, #0
 800e236:	480a      	ldr	r0, [pc, #40]	; (800e260 <pbuf_pool_is_empty+0x50>)
 800e238:	f7fe fd62 	bl	800cd00 <tcpip_try_callback>
 800e23c:	4603      	mov	r3, r0
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d008      	beq.n	800e254 <pbuf_pool_is_empty+0x44>
 800e242:	f00b fd07 	bl	8019c54 <sys_arch_protect>
 800e246:	6078      	str	r0, [r7, #4]
 800e248:	4b04      	ldr	r3, [pc, #16]	; (800e25c <pbuf_pool_is_empty+0x4c>)
 800e24a:	2200      	movs	r2, #0
 800e24c:	701a      	strb	r2, [r3, #0]
 800e24e:	6878      	ldr	r0, [r7, #4]
 800e250:	f00b fd0e 	bl	8019c70 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800e254:	bf00      	nop
 800e256:	3708      	adds	r7, #8
 800e258:	46bd      	mov	sp, r7
 800e25a:	bd80      	pop	{r7, pc}
 800e25c:	20013ac1 	.word	0x20013ac1
 800e260:	0800e1fd 	.word	0x0800e1fd

0800e264 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800e264:	b480      	push	{r7}
 800e266:	b085      	sub	sp, #20
 800e268:	af00      	add	r7, sp, #0
 800e26a:	60f8      	str	r0, [r7, #12]
 800e26c:	60b9      	str	r1, [r7, #8]
 800e26e:	4611      	mov	r1, r2
 800e270:	461a      	mov	r2, r3
 800e272:	460b      	mov	r3, r1
 800e274:	80fb      	strh	r3, [r7, #6]
 800e276:	4613      	mov	r3, r2
 800e278:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800e27a:	68fb      	ldr	r3, [r7, #12]
 800e27c:	2200      	movs	r2, #0
 800e27e:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800e280:	68fb      	ldr	r3, [r7, #12]
 800e282:	68ba      	ldr	r2, [r7, #8]
 800e284:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800e286:	68fb      	ldr	r3, [r7, #12]
 800e288:	88fa      	ldrh	r2, [r7, #6]
 800e28a:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800e28c:	68fb      	ldr	r3, [r7, #12]
 800e28e:	88ba      	ldrh	r2, [r7, #4]
 800e290:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800e292:	8b3b      	ldrh	r3, [r7, #24]
 800e294:	b2da      	uxtb	r2, r3
 800e296:	68fb      	ldr	r3, [r7, #12]
 800e298:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800e29a:	68fb      	ldr	r3, [r7, #12]
 800e29c:	7f3a      	ldrb	r2, [r7, #28]
 800e29e:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800e2a0:	68fb      	ldr	r3, [r7, #12]
 800e2a2:	2201      	movs	r2, #1
 800e2a4:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800e2a6:	68fb      	ldr	r3, [r7, #12]
 800e2a8:	2200      	movs	r2, #0
 800e2aa:	73da      	strb	r2, [r3, #15]
}
 800e2ac:	bf00      	nop
 800e2ae:	3714      	adds	r7, #20
 800e2b0:	46bd      	mov	sp, r7
 800e2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2b6:	4770      	bx	lr

0800e2b8 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800e2b8:	b580      	push	{r7, lr}
 800e2ba:	b08c      	sub	sp, #48	; 0x30
 800e2bc:	af02      	add	r7, sp, #8
 800e2be:	4603      	mov	r3, r0
 800e2c0:	71fb      	strb	r3, [r7, #7]
 800e2c2:	460b      	mov	r3, r1
 800e2c4:	80bb      	strh	r3, [r7, #4]
 800e2c6:	4613      	mov	r3, r2
 800e2c8:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800e2ca:	79fb      	ldrb	r3, [r7, #7]
 800e2cc:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800e2ce:	887b      	ldrh	r3, [r7, #2]
 800e2d0:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800e2d4:	f000 8082 	beq.w	800e3dc <pbuf_alloc+0x124>
 800e2d8:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800e2dc:	f300 80ca 	bgt.w	800e474 <pbuf_alloc+0x1bc>
 800e2e0:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800e2e4:	d010      	beq.n	800e308 <pbuf_alloc+0x50>
 800e2e6:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800e2ea:	f300 80c3 	bgt.w	800e474 <pbuf_alloc+0x1bc>
 800e2ee:	2b01      	cmp	r3, #1
 800e2f0:	d002      	beq.n	800e2f8 <pbuf_alloc+0x40>
 800e2f2:	2b41      	cmp	r3, #65	; 0x41
 800e2f4:	f040 80be 	bne.w	800e474 <pbuf_alloc+0x1bc>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800e2f8:	887a      	ldrh	r2, [r7, #2]
 800e2fa:	88bb      	ldrh	r3, [r7, #4]
 800e2fc:	4619      	mov	r1, r3
 800e2fe:	2000      	movs	r0, #0
 800e300:	f000 f8d4 	bl	800e4ac <pbuf_alloc_reference>
 800e304:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800e306:	e0bf      	b.n	800e488 <pbuf_alloc+0x1d0>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800e308:	2300      	movs	r3, #0
 800e30a:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800e30c:	2300      	movs	r3, #0
 800e30e:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800e310:	88bb      	ldrh	r3, [r7, #4]
 800e312:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800e314:	200c      	movs	r0, #12
 800e316:	f7ff fbc3 	bl	800daa0 <memp_malloc>
 800e31a:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800e31c:	693b      	ldr	r3, [r7, #16]
 800e31e:	2b00      	cmp	r3, #0
 800e320:	d109      	bne.n	800e336 <pbuf_alloc+0x7e>
          PBUF_POOL_IS_EMPTY();
 800e322:	f7ff ff75 	bl	800e210 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800e326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d002      	beq.n	800e332 <pbuf_alloc+0x7a>
            pbuf_free(p);
 800e32c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e32e:	f000 faab 	bl	800e888 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800e332:	2300      	movs	r3, #0
 800e334:	e0a9      	b.n	800e48a <pbuf_alloc+0x1d2>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800e336:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e338:	3303      	adds	r3, #3
 800e33a:	b29b      	uxth	r3, r3
 800e33c:	f023 0303 	bic.w	r3, r3, #3
 800e340:	b29b      	uxth	r3, r3
 800e342:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 800e346:	3304      	adds	r3, #4
 800e348:	b29b      	uxth	r3, r3
 800e34a:	8b7a      	ldrh	r2, [r7, #26]
 800e34c:	4293      	cmp	r3, r2
 800e34e:	bf28      	it	cs
 800e350:	4613      	movcs	r3, r2
 800e352:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800e354:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e356:	3310      	adds	r3, #16
 800e358:	693a      	ldr	r2, [r7, #16]
 800e35a:	4413      	add	r3, r2
 800e35c:	3303      	adds	r3, #3
 800e35e:	f023 0303 	bic.w	r3, r3, #3
 800e362:	4618      	mov	r0, r3
 800e364:	89f9      	ldrh	r1, [r7, #14]
 800e366:	8b7a      	ldrh	r2, [r7, #26]
 800e368:	2300      	movs	r3, #0
 800e36a:	9301      	str	r3, [sp, #4]
 800e36c:	887b      	ldrh	r3, [r7, #2]
 800e36e:	9300      	str	r3, [sp, #0]
 800e370:	460b      	mov	r3, r1
 800e372:	4601      	mov	r1, r0
 800e374:	6938      	ldr	r0, [r7, #16]
 800e376:	f7ff ff75 	bl	800e264 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800e37a:	693b      	ldr	r3, [r7, #16]
 800e37c:	685b      	ldr	r3, [r3, #4]
 800e37e:	f003 0303 	and.w	r3, r3, #3
 800e382:	2b00      	cmp	r3, #0
 800e384:	d006      	beq.n	800e394 <pbuf_alloc+0xdc>
 800e386:	4b43      	ldr	r3, [pc, #268]	; (800e494 <pbuf_alloc+0x1dc>)
 800e388:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e38c:	4942      	ldr	r1, [pc, #264]	; (800e498 <pbuf_alloc+0x1e0>)
 800e38e:	4843      	ldr	r0, [pc, #268]	; (800e49c <pbuf_alloc+0x1e4>)
 800e390:	f00b fdb6 	bl	8019f00 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800e394:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e396:	3303      	adds	r3, #3
 800e398:	f023 0303 	bic.w	r3, r3, #3
 800e39c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800e3a0:	4293      	cmp	r3, r2
 800e3a2:	d106      	bne.n	800e3b2 <pbuf_alloc+0xfa>
 800e3a4:	4b3b      	ldr	r3, [pc, #236]	; (800e494 <pbuf_alloc+0x1dc>)
 800e3a6:	f44f 7281 	mov.w	r2, #258	; 0x102
 800e3aa:	493d      	ldr	r1, [pc, #244]	; (800e4a0 <pbuf_alloc+0x1e8>)
 800e3ac:	483b      	ldr	r0, [pc, #236]	; (800e49c <pbuf_alloc+0x1e4>)
 800e3ae:	f00b fda7 	bl	8019f00 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800e3b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d102      	bne.n	800e3be <pbuf_alloc+0x106>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800e3b8:	693b      	ldr	r3, [r7, #16]
 800e3ba:	627b      	str	r3, [r7, #36]	; 0x24
 800e3bc:	e002      	b.n	800e3c4 <pbuf_alloc+0x10c>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800e3be:	69fb      	ldr	r3, [r7, #28]
 800e3c0:	693a      	ldr	r2, [r7, #16]
 800e3c2:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800e3c4:	693b      	ldr	r3, [r7, #16]
 800e3c6:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800e3c8:	8b7a      	ldrh	r2, [r7, #26]
 800e3ca:	89fb      	ldrh	r3, [r7, #14]
 800e3cc:	1ad3      	subs	r3, r2, r3
 800e3ce:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800e3d0:	2300      	movs	r3, #0
 800e3d2:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800e3d4:	8b7b      	ldrh	r3, [r7, #26]
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	d19c      	bne.n	800e314 <pbuf_alloc+0x5c>
      break;
 800e3da:	e055      	b.n	800e488 <pbuf_alloc+0x1d0>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800e3dc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e3de:	3303      	adds	r3, #3
 800e3e0:	b29b      	uxth	r3, r3
 800e3e2:	f023 0303 	bic.w	r3, r3, #3
 800e3e6:	b29a      	uxth	r2, r3
 800e3e8:	88bb      	ldrh	r3, [r7, #4]
 800e3ea:	3303      	adds	r3, #3
 800e3ec:	b29b      	uxth	r3, r3
 800e3ee:	f023 0303 	bic.w	r3, r3, #3
 800e3f2:	b29b      	uxth	r3, r3
 800e3f4:	4413      	add	r3, r2
 800e3f6:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800e3f8:	8b3b      	ldrh	r3, [r7, #24]
 800e3fa:	3310      	adds	r3, #16
 800e3fc:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800e3fe:	8b3a      	ldrh	r2, [r7, #24]
 800e400:	88bb      	ldrh	r3, [r7, #4]
 800e402:	3303      	adds	r3, #3
 800e404:	f023 0303 	bic.w	r3, r3, #3
 800e408:	429a      	cmp	r2, r3
 800e40a:	d306      	bcc.n	800e41a <pbuf_alloc+0x162>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800e40c:	8afa      	ldrh	r2, [r7, #22]
 800e40e:	88bb      	ldrh	r3, [r7, #4]
 800e410:	3303      	adds	r3, #3
 800e412:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800e416:	429a      	cmp	r2, r3
 800e418:	d201      	bcs.n	800e41e <pbuf_alloc+0x166>
        return NULL;
 800e41a:	2300      	movs	r3, #0
 800e41c:	e035      	b.n	800e48a <pbuf_alloc+0x1d2>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800e41e:	8afb      	ldrh	r3, [r7, #22]
 800e420:	4618      	mov	r0, r3
 800e422:	f7ff f9bb 	bl	800d79c <mem_malloc>
 800e426:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800e428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e42a:	2b00      	cmp	r3, #0
 800e42c:	d101      	bne.n	800e432 <pbuf_alloc+0x17a>
        return NULL;
 800e42e:	2300      	movs	r3, #0
 800e430:	e02b      	b.n	800e48a <pbuf_alloc+0x1d2>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800e432:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e434:	3310      	adds	r3, #16
 800e436:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e438:	4413      	add	r3, r2
 800e43a:	3303      	adds	r3, #3
 800e43c:	f023 0303 	bic.w	r3, r3, #3
 800e440:	4618      	mov	r0, r3
 800e442:	88b9      	ldrh	r1, [r7, #4]
 800e444:	88ba      	ldrh	r2, [r7, #4]
 800e446:	2300      	movs	r3, #0
 800e448:	9301      	str	r3, [sp, #4]
 800e44a:	887b      	ldrh	r3, [r7, #2]
 800e44c:	9300      	str	r3, [sp, #0]
 800e44e:	460b      	mov	r3, r1
 800e450:	4601      	mov	r1, r0
 800e452:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e454:	f7ff ff06 	bl	800e264 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800e458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e45a:	685b      	ldr	r3, [r3, #4]
 800e45c:	f003 0303 	and.w	r3, r3, #3
 800e460:	2b00      	cmp	r3, #0
 800e462:	d010      	beq.n	800e486 <pbuf_alloc+0x1ce>
 800e464:	4b0b      	ldr	r3, [pc, #44]	; (800e494 <pbuf_alloc+0x1dc>)
 800e466:	f44f 7291 	mov.w	r2, #290	; 0x122
 800e46a:	490e      	ldr	r1, [pc, #56]	; (800e4a4 <pbuf_alloc+0x1ec>)
 800e46c:	480b      	ldr	r0, [pc, #44]	; (800e49c <pbuf_alloc+0x1e4>)
 800e46e:	f00b fd47 	bl	8019f00 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800e472:	e008      	b.n	800e486 <pbuf_alloc+0x1ce>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800e474:	4b07      	ldr	r3, [pc, #28]	; (800e494 <pbuf_alloc+0x1dc>)
 800e476:	f240 1227 	movw	r2, #295	; 0x127
 800e47a:	490b      	ldr	r1, [pc, #44]	; (800e4a8 <pbuf_alloc+0x1f0>)
 800e47c:	4807      	ldr	r0, [pc, #28]	; (800e49c <pbuf_alloc+0x1e4>)
 800e47e:	f00b fd3f 	bl	8019f00 <iprintf>
      return NULL;
 800e482:	2300      	movs	r3, #0
 800e484:	e001      	b.n	800e48a <pbuf_alloc+0x1d2>
      break;
 800e486:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800e488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e48a:	4618      	mov	r0, r3
 800e48c:	3728      	adds	r7, #40	; 0x28
 800e48e:	46bd      	mov	sp, r7
 800e490:	bd80      	pop	{r7, pc}
 800e492:	bf00      	nop
 800e494:	0801c1b4 	.word	0x0801c1b4
 800e498:	0801c1e4 	.word	0x0801c1e4
 800e49c:	0801c214 	.word	0x0801c214
 800e4a0:	0801c23c 	.word	0x0801c23c
 800e4a4:	0801c270 	.word	0x0801c270
 800e4a8:	0801c29c 	.word	0x0801c29c

0800e4ac <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800e4ac:	b580      	push	{r7, lr}
 800e4ae:	b086      	sub	sp, #24
 800e4b0:	af02      	add	r7, sp, #8
 800e4b2:	6078      	str	r0, [r7, #4]
 800e4b4:	460b      	mov	r3, r1
 800e4b6:	807b      	strh	r3, [r7, #2]
 800e4b8:	4613      	mov	r3, r2
 800e4ba:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800e4bc:	883b      	ldrh	r3, [r7, #0]
 800e4be:	2b41      	cmp	r3, #65	; 0x41
 800e4c0:	d009      	beq.n	800e4d6 <pbuf_alloc_reference+0x2a>
 800e4c2:	883b      	ldrh	r3, [r7, #0]
 800e4c4:	2b01      	cmp	r3, #1
 800e4c6:	d006      	beq.n	800e4d6 <pbuf_alloc_reference+0x2a>
 800e4c8:	4b0f      	ldr	r3, [pc, #60]	; (800e508 <pbuf_alloc_reference+0x5c>)
 800e4ca:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800e4ce:	490f      	ldr	r1, [pc, #60]	; (800e50c <pbuf_alloc_reference+0x60>)
 800e4d0:	480f      	ldr	r0, [pc, #60]	; (800e510 <pbuf_alloc_reference+0x64>)
 800e4d2:	f00b fd15 	bl	8019f00 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800e4d6:	200b      	movs	r0, #11
 800e4d8:	f7ff fae2 	bl	800daa0 <memp_malloc>
 800e4dc:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800e4de:	68fb      	ldr	r3, [r7, #12]
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	d101      	bne.n	800e4e8 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800e4e4:	2300      	movs	r3, #0
 800e4e6:	e00b      	b.n	800e500 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800e4e8:	8879      	ldrh	r1, [r7, #2]
 800e4ea:	887a      	ldrh	r2, [r7, #2]
 800e4ec:	2300      	movs	r3, #0
 800e4ee:	9301      	str	r3, [sp, #4]
 800e4f0:	883b      	ldrh	r3, [r7, #0]
 800e4f2:	9300      	str	r3, [sp, #0]
 800e4f4:	460b      	mov	r3, r1
 800e4f6:	6879      	ldr	r1, [r7, #4]
 800e4f8:	68f8      	ldr	r0, [r7, #12]
 800e4fa:	f7ff feb3 	bl	800e264 <pbuf_init_alloced_pbuf>
  return p;
 800e4fe:	68fb      	ldr	r3, [r7, #12]
}
 800e500:	4618      	mov	r0, r3
 800e502:	3710      	adds	r7, #16
 800e504:	46bd      	mov	sp, r7
 800e506:	bd80      	pop	{r7, pc}
 800e508:	0801c1b4 	.word	0x0801c1b4
 800e50c:	0801c2b8 	.word	0x0801c2b8
 800e510:	0801c214 	.word	0x0801c214

0800e514 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800e514:	b580      	push	{r7, lr}
 800e516:	b088      	sub	sp, #32
 800e518:	af02      	add	r7, sp, #8
 800e51a:	607b      	str	r3, [r7, #4]
 800e51c:	4603      	mov	r3, r0
 800e51e:	73fb      	strb	r3, [r7, #15]
 800e520:	460b      	mov	r3, r1
 800e522:	81bb      	strh	r3, [r7, #12]
 800e524:	4613      	mov	r3, r2
 800e526:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800e528:	7bfb      	ldrb	r3, [r7, #15]
 800e52a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800e52c:	8a7b      	ldrh	r3, [r7, #18]
 800e52e:	3303      	adds	r3, #3
 800e530:	f023 0203 	bic.w	r2, r3, #3
 800e534:	89bb      	ldrh	r3, [r7, #12]
 800e536:	441a      	add	r2, r3
 800e538:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e53a:	429a      	cmp	r2, r3
 800e53c:	d901      	bls.n	800e542 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800e53e:	2300      	movs	r3, #0
 800e540:	e018      	b.n	800e574 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800e542:	6a3b      	ldr	r3, [r7, #32]
 800e544:	2b00      	cmp	r3, #0
 800e546:	d007      	beq.n	800e558 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800e548:	8a7b      	ldrh	r3, [r7, #18]
 800e54a:	3303      	adds	r3, #3
 800e54c:	f023 0303 	bic.w	r3, r3, #3
 800e550:	6a3a      	ldr	r2, [r7, #32]
 800e552:	4413      	add	r3, r2
 800e554:	617b      	str	r3, [r7, #20]
 800e556:	e001      	b.n	800e55c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800e558:	2300      	movs	r3, #0
 800e55a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800e55c:	6878      	ldr	r0, [r7, #4]
 800e55e:	89b9      	ldrh	r1, [r7, #12]
 800e560:	89ba      	ldrh	r2, [r7, #12]
 800e562:	2302      	movs	r3, #2
 800e564:	9301      	str	r3, [sp, #4]
 800e566:	897b      	ldrh	r3, [r7, #10]
 800e568:	9300      	str	r3, [sp, #0]
 800e56a:	460b      	mov	r3, r1
 800e56c:	6979      	ldr	r1, [r7, #20]
 800e56e:	f7ff fe79 	bl	800e264 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800e572:	687b      	ldr	r3, [r7, #4]
}
 800e574:	4618      	mov	r0, r3
 800e576:	3718      	adds	r7, #24
 800e578:	46bd      	mov	sp, r7
 800e57a:	bd80      	pop	{r7, pc}

0800e57c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800e57c:	b580      	push	{r7, lr}
 800e57e:	b084      	sub	sp, #16
 800e580:	af00      	add	r7, sp, #0
 800e582:	6078      	str	r0, [r7, #4]
 800e584:	460b      	mov	r3, r1
 800e586:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	d106      	bne.n	800e59c <pbuf_realloc+0x20>
 800e58e:	4b3a      	ldr	r3, [pc, #232]	; (800e678 <pbuf_realloc+0xfc>)
 800e590:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800e594:	4939      	ldr	r1, [pc, #228]	; (800e67c <pbuf_realloc+0x100>)
 800e596:	483a      	ldr	r0, [pc, #232]	; (800e680 <pbuf_realloc+0x104>)
 800e598:	f00b fcb2 	bl	8019f00 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	891b      	ldrh	r3, [r3, #8]
 800e5a0:	887a      	ldrh	r2, [r7, #2]
 800e5a2:	429a      	cmp	r2, r3
 800e5a4:	d263      	bcs.n	800e66e <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	891a      	ldrh	r2, [r3, #8]
 800e5aa:	887b      	ldrh	r3, [r7, #2]
 800e5ac:	1ad3      	subs	r3, r2, r3
 800e5ae:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800e5b0:	887b      	ldrh	r3, [r7, #2]
 800e5b2:	817b      	strh	r3, [r7, #10]
  q = p;
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800e5b8:	e018      	b.n	800e5ec <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800e5ba:	68fb      	ldr	r3, [r7, #12]
 800e5bc:	895b      	ldrh	r3, [r3, #10]
 800e5be:	897a      	ldrh	r2, [r7, #10]
 800e5c0:	1ad3      	subs	r3, r2, r3
 800e5c2:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800e5c4:	68fb      	ldr	r3, [r7, #12]
 800e5c6:	891a      	ldrh	r2, [r3, #8]
 800e5c8:	893b      	ldrh	r3, [r7, #8]
 800e5ca:	1ad3      	subs	r3, r2, r3
 800e5cc:	b29a      	uxth	r2, r3
 800e5ce:	68fb      	ldr	r3, [r7, #12]
 800e5d0:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800e5d2:	68fb      	ldr	r3, [r7, #12]
 800e5d4:	681b      	ldr	r3, [r3, #0]
 800e5d6:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800e5d8:	68fb      	ldr	r3, [r7, #12]
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d106      	bne.n	800e5ec <pbuf_realloc+0x70>
 800e5de:	4b26      	ldr	r3, [pc, #152]	; (800e678 <pbuf_realloc+0xfc>)
 800e5e0:	f240 12af 	movw	r2, #431	; 0x1af
 800e5e4:	4927      	ldr	r1, [pc, #156]	; (800e684 <pbuf_realloc+0x108>)
 800e5e6:	4826      	ldr	r0, [pc, #152]	; (800e680 <pbuf_realloc+0x104>)
 800e5e8:	f00b fc8a 	bl	8019f00 <iprintf>
  while (rem_len > q->len) {
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	895b      	ldrh	r3, [r3, #10]
 800e5f0:	897a      	ldrh	r2, [r7, #10]
 800e5f2:	429a      	cmp	r2, r3
 800e5f4:	d8e1      	bhi.n	800e5ba <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800e5f6:	68fb      	ldr	r3, [r7, #12]
 800e5f8:	7b1b      	ldrb	r3, [r3, #12]
 800e5fa:	f003 030f 	and.w	r3, r3, #15
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	d121      	bne.n	800e646 <pbuf_realloc+0xca>
 800e602:	68fb      	ldr	r3, [r7, #12]
 800e604:	895b      	ldrh	r3, [r3, #10]
 800e606:	897a      	ldrh	r2, [r7, #10]
 800e608:	429a      	cmp	r2, r3
 800e60a:	d01c      	beq.n	800e646 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800e60c:	68fb      	ldr	r3, [r7, #12]
 800e60e:	7b5b      	ldrb	r3, [r3, #13]
 800e610:	f003 0302 	and.w	r3, r3, #2
 800e614:	2b00      	cmp	r3, #0
 800e616:	d116      	bne.n	800e646 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800e618:	68fb      	ldr	r3, [r7, #12]
 800e61a:	685a      	ldr	r2, [r3, #4]
 800e61c:	68fb      	ldr	r3, [r7, #12]
 800e61e:	1ad3      	subs	r3, r2, r3
 800e620:	b29a      	uxth	r2, r3
 800e622:	897b      	ldrh	r3, [r7, #10]
 800e624:	4413      	add	r3, r2
 800e626:	b29b      	uxth	r3, r3
 800e628:	4619      	mov	r1, r3
 800e62a:	68f8      	ldr	r0, [r7, #12]
 800e62c:	f7fe ffac 	bl	800d588 <mem_trim>
 800e630:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800e632:	68fb      	ldr	r3, [r7, #12]
 800e634:	2b00      	cmp	r3, #0
 800e636:	d106      	bne.n	800e646 <pbuf_realloc+0xca>
 800e638:	4b0f      	ldr	r3, [pc, #60]	; (800e678 <pbuf_realloc+0xfc>)
 800e63a:	f240 12bd 	movw	r2, #445	; 0x1bd
 800e63e:	4912      	ldr	r1, [pc, #72]	; (800e688 <pbuf_realloc+0x10c>)
 800e640:	480f      	ldr	r0, [pc, #60]	; (800e680 <pbuf_realloc+0x104>)
 800e642:	f00b fc5d 	bl	8019f00 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800e646:	68fb      	ldr	r3, [r7, #12]
 800e648:	897a      	ldrh	r2, [r7, #10]
 800e64a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	895a      	ldrh	r2, [r3, #10]
 800e650:	68fb      	ldr	r3, [r7, #12]
 800e652:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800e654:	68fb      	ldr	r3, [r7, #12]
 800e656:	681b      	ldr	r3, [r3, #0]
 800e658:	2b00      	cmp	r3, #0
 800e65a:	d004      	beq.n	800e666 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800e65c:	68fb      	ldr	r3, [r7, #12]
 800e65e:	681b      	ldr	r3, [r3, #0]
 800e660:	4618      	mov	r0, r3
 800e662:	f000 f911 	bl	800e888 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800e666:	68fb      	ldr	r3, [r7, #12]
 800e668:	2200      	movs	r2, #0
 800e66a:	601a      	str	r2, [r3, #0]
 800e66c:	e000      	b.n	800e670 <pbuf_realloc+0xf4>
    return;
 800e66e:	bf00      	nop

}
 800e670:	3710      	adds	r7, #16
 800e672:	46bd      	mov	sp, r7
 800e674:	bd80      	pop	{r7, pc}
 800e676:	bf00      	nop
 800e678:	0801c1b4 	.word	0x0801c1b4
 800e67c:	0801c2cc 	.word	0x0801c2cc
 800e680:	0801c214 	.word	0x0801c214
 800e684:	0801c2e4 	.word	0x0801c2e4
 800e688:	0801c2fc 	.word	0x0801c2fc

0800e68c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800e68c:	b580      	push	{r7, lr}
 800e68e:	b086      	sub	sp, #24
 800e690:	af00      	add	r7, sp, #0
 800e692:	60f8      	str	r0, [r7, #12]
 800e694:	60b9      	str	r1, [r7, #8]
 800e696:	4613      	mov	r3, r2
 800e698:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800e69a:	68fb      	ldr	r3, [r7, #12]
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d106      	bne.n	800e6ae <pbuf_add_header_impl+0x22>
 800e6a0:	4b2b      	ldr	r3, [pc, #172]	; (800e750 <pbuf_add_header_impl+0xc4>)
 800e6a2:	f240 12df 	movw	r2, #479	; 0x1df
 800e6a6:	492b      	ldr	r1, [pc, #172]	; (800e754 <pbuf_add_header_impl+0xc8>)
 800e6a8:	482b      	ldr	r0, [pc, #172]	; (800e758 <pbuf_add_header_impl+0xcc>)
 800e6aa:	f00b fc29 	bl	8019f00 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800e6ae:	68fb      	ldr	r3, [r7, #12]
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	d003      	beq.n	800e6bc <pbuf_add_header_impl+0x30>
 800e6b4:	68bb      	ldr	r3, [r7, #8]
 800e6b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e6ba:	d301      	bcc.n	800e6c0 <pbuf_add_header_impl+0x34>
    return 1;
 800e6bc:	2301      	movs	r3, #1
 800e6be:	e043      	b.n	800e748 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800e6c0:	68bb      	ldr	r3, [r7, #8]
 800e6c2:	2b00      	cmp	r3, #0
 800e6c4:	d101      	bne.n	800e6ca <pbuf_add_header_impl+0x3e>
    return 0;
 800e6c6:	2300      	movs	r3, #0
 800e6c8:	e03e      	b.n	800e748 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800e6ca:	68bb      	ldr	r3, [r7, #8]
 800e6cc:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	891a      	ldrh	r2, [r3, #8]
 800e6d2:	8a7b      	ldrh	r3, [r7, #18]
 800e6d4:	4413      	add	r3, r2
 800e6d6:	b29b      	uxth	r3, r3
 800e6d8:	8a7a      	ldrh	r2, [r7, #18]
 800e6da:	429a      	cmp	r2, r3
 800e6dc:	d901      	bls.n	800e6e2 <pbuf_add_header_impl+0x56>
    return 1;
 800e6de:	2301      	movs	r3, #1
 800e6e0:	e032      	b.n	800e748 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800e6e2:	68fb      	ldr	r3, [r7, #12]
 800e6e4:	7b1b      	ldrb	r3, [r3, #12]
 800e6e6:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800e6e8:	8a3b      	ldrh	r3, [r7, #16]
 800e6ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	d00c      	beq.n	800e70c <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800e6f2:	68fb      	ldr	r3, [r7, #12]
 800e6f4:	685a      	ldr	r2, [r3, #4]
 800e6f6:	68bb      	ldr	r3, [r7, #8]
 800e6f8:	425b      	negs	r3, r3
 800e6fa:	4413      	add	r3, r2
 800e6fc:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800e6fe:	68fb      	ldr	r3, [r7, #12]
 800e700:	3310      	adds	r3, #16
 800e702:	697a      	ldr	r2, [r7, #20]
 800e704:	429a      	cmp	r2, r3
 800e706:	d20d      	bcs.n	800e724 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800e708:	2301      	movs	r3, #1
 800e70a:	e01d      	b.n	800e748 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800e70c:	79fb      	ldrb	r3, [r7, #7]
 800e70e:	2b00      	cmp	r3, #0
 800e710:	d006      	beq.n	800e720 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800e712:	68fb      	ldr	r3, [r7, #12]
 800e714:	685a      	ldr	r2, [r3, #4]
 800e716:	68bb      	ldr	r3, [r7, #8]
 800e718:	425b      	negs	r3, r3
 800e71a:	4413      	add	r3, r2
 800e71c:	617b      	str	r3, [r7, #20]
 800e71e:	e001      	b.n	800e724 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800e720:	2301      	movs	r3, #1
 800e722:	e011      	b.n	800e748 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800e724:	68fb      	ldr	r3, [r7, #12]
 800e726:	697a      	ldr	r2, [r7, #20]
 800e728:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800e72a:	68fb      	ldr	r3, [r7, #12]
 800e72c:	895a      	ldrh	r2, [r3, #10]
 800e72e:	8a7b      	ldrh	r3, [r7, #18]
 800e730:	4413      	add	r3, r2
 800e732:	b29a      	uxth	r2, r3
 800e734:	68fb      	ldr	r3, [r7, #12]
 800e736:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800e738:	68fb      	ldr	r3, [r7, #12]
 800e73a:	891a      	ldrh	r2, [r3, #8]
 800e73c:	8a7b      	ldrh	r3, [r7, #18]
 800e73e:	4413      	add	r3, r2
 800e740:	b29a      	uxth	r2, r3
 800e742:	68fb      	ldr	r3, [r7, #12]
 800e744:	811a      	strh	r2, [r3, #8]


  return 0;
 800e746:	2300      	movs	r3, #0
}
 800e748:	4618      	mov	r0, r3
 800e74a:	3718      	adds	r7, #24
 800e74c:	46bd      	mov	sp, r7
 800e74e:	bd80      	pop	{r7, pc}
 800e750:	0801c1b4 	.word	0x0801c1b4
 800e754:	0801c318 	.word	0x0801c318
 800e758:	0801c214 	.word	0x0801c214

0800e75c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800e75c:	b580      	push	{r7, lr}
 800e75e:	b082      	sub	sp, #8
 800e760:	af00      	add	r7, sp, #0
 800e762:	6078      	str	r0, [r7, #4]
 800e764:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800e766:	2200      	movs	r2, #0
 800e768:	6839      	ldr	r1, [r7, #0]
 800e76a:	6878      	ldr	r0, [r7, #4]
 800e76c:	f7ff ff8e 	bl	800e68c <pbuf_add_header_impl>
 800e770:	4603      	mov	r3, r0
}
 800e772:	4618      	mov	r0, r3
 800e774:	3708      	adds	r7, #8
 800e776:	46bd      	mov	sp, r7
 800e778:	bd80      	pop	{r7, pc}
	...

0800e77c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800e77c:	b580      	push	{r7, lr}
 800e77e:	b084      	sub	sp, #16
 800e780:	af00      	add	r7, sp, #0
 800e782:	6078      	str	r0, [r7, #4]
 800e784:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	2b00      	cmp	r3, #0
 800e78a:	d106      	bne.n	800e79a <pbuf_remove_header+0x1e>
 800e78c:	4b20      	ldr	r3, [pc, #128]	; (800e810 <pbuf_remove_header+0x94>)
 800e78e:	f240 224b 	movw	r2, #587	; 0x24b
 800e792:	4920      	ldr	r1, [pc, #128]	; (800e814 <pbuf_remove_header+0x98>)
 800e794:	4820      	ldr	r0, [pc, #128]	; (800e818 <pbuf_remove_header+0x9c>)
 800e796:	f00b fbb3 	bl	8019f00 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	d003      	beq.n	800e7a8 <pbuf_remove_header+0x2c>
 800e7a0:	683b      	ldr	r3, [r7, #0]
 800e7a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e7a6:	d301      	bcc.n	800e7ac <pbuf_remove_header+0x30>
    return 1;
 800e7a8:	2301      	movs	r3, #1
 800e7aa:	e02c      	b.n	800e806 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800e7ac:	683b      	ldr	r3, [r7, #0]
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	d101      	bne.n	800e7b6 <pbuf_remove_header+0x3a>
    return 0;
 800e7b2:	2300      	movs	r3, #0
 800e7b4:	e027      	b.n	800e806 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800e7b6:	683b      	ldr	r3, [r7, #0]
 800e7b8:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	895b      	ldrh	r3, [r3, #10]
 800e7be:	89fa      	ldrh	r2, [r7, #14]
 800e7c0:	429a      	cmp	r2, r3
 800e7c2:	d908      	bls.n	800e7d6 <pbuf_remove_header+0x5a>
 800e7c4:	4b12      	ldr	r3, [pc, #72]	; (800e810 <pbuf_remove_header+0x94>)
 800e7c6:	f240 2255 	movw	r2, #597	; 0x255
 800e7ca:	4914      	ldr	r1, [pc, #80]	; (800e81c <pbuf_remove_header+0xa0>)
 800e7cc:	4812      	ldr	r0, [pc, #72]	; (800e818 <pbuf_remove_header+0x9c>)
 800e7ce:	f00b fb97 	bl	8019f00 <iprintf>
 800e7d2:	2301      	movs	r3, #1
 800e7d4:	e017      	b.n	800e806 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	685b      	ldr	r3, [r3, #4]
 800e7da:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	685a      	ldr	r2, [r3, #4]
 800e7e0:	683b      	ldr	r3, [r7, #0]
 800e7e2:	441a      	add	r2, r3
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	895a      	ldrh	r2, [r3, #10]
 800e7ec:	89fb      	ldrh	r3, [r7, #14]
 800e7ee:	1ad3      	subs	r3, r2, r3
 800e7f0:	b29a      	uxth	r2, r3
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	891a      	ldrh	r2, [r3, #8]
 800e7fa:	89fb      	ldrh	r3, [r7, #14]
 800e7fc:	1ad3      	subs	r3, r2, r3
 800e7fe:	b29a      	uxth	r2, r3
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800e804:	2300      	movs	r3, #0
}
 800e806:	4618      	mov	r0, r3
 800e808:	3710      	adds	r7, #16
 800e80a:	46bd      	mov	sp, r7
 800e80c:	bd80      	pop	{r7, pc}
 800e80e:	bf00      	nop
 800e810:	0801c1b4 	.word	0x0801c1b4
 800e814:	0801c318 	.word	0x0801c318
 800e818:	0801c214 	.word	0x0801c214
 800e81c:	0801c324 	.word	0x0801c324

0800e820 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800e820:	b580      	push	{r7, lr}
 800e822:	b082      	sub	sp, #8
 800e824:	af00      	add	r7, sp, #0
 800e826:	6078      	str	r0, [r7, #4]
 800e828:	460b      	mov	r3, r1
 800e82a:	807b      	strh	r3, [r7, #2]
 800e82c:	4613      	mov	r3, r2
 800e82e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800e830:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e834:	2b00      	cmp	r3, #0
 800e836:	da08      	bge.n	800e84a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800e838:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e83c:	425b      	negs	r3, r3
 800e83e:	4619      	mov	r1, r3
 800e840:	6878      	ldr	r0, [r7, #4]
 800e842:	f7ff ff9b 	bl	800e77c <pbuf_remove_header>
 800e846:	4603      	mov	r3, r0
 800e848:	e007      	b.n	800e85a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800e84a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e84e:	787a      	ldrb	r2, [r7, #1]
 800e850:	4619      	mov	r1, r3
 800e852:	6878      	ldr	r0, [r7, #4]
 800e854:	f7ff ff1a 	bl	800e68c <pbuf_add_header_impl>
 800e858:	4603      	mov	r3, r0
  }
}
 800e85a:	4618      	mov	r0, r3
 800e85c:	3708      	adds	r7, #8
 800e85e:	46bd      	mov	sp, r7
 800e860:	bd80      	pop	{r7, pc}

0800e862 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800e862:	b580      	push	{r7, lr}
 800e864:	b082      	sub	sp, #8
 800e866:	af00      	add	r7, sp, #0
 800e868:	6078      	str	r0, [r7, #4]
 800e86a:	460b      	mov	r3, r1
 800e86c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800e86e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e872:	2201      	movs	r2, #1
 800e874:	4619      	mov	r1, r3
 800e876:	6878      	ldr	r0, [r7, #4]
 800e878:	f7ff ffd2 	bl	800e820 <pbuf_header_impl>
 800e87c:	4603      	mov	r3, r0
}
 800e87e:	4618      	mov	r0, r3
 800e880:	3708      	adds	r7, #8
 800e882:	46bd      	mov	sp, r7
 800e884:	bd80      	pop	{r7, pc}
	...

0800e888 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800e888:	b580      	push	{r7, lr}
 800e88a:	b088      	sub	sp, #32
 800e88c:	af00      	add	r7, sp, #0
 800e88e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	2b00      	cmp	r3, #0
 800e894:	d10b      	bne.n	800e8ae <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	2b00      	cmp	r3, #0
 800e89a:	d106      	bne.n	800e8aa <pbuf_free+0x22>
 800e89c:	4b3b      	ldr	r3, [pc, #236]	; (800e98c <pbuf_free+0x104>)
 800e89e:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800e8a2:	493b      	ldr	r1, [pc, #236]	; (800e990 <pbuf_free+0x108>)
 800e8a4:	483b      	ldr	r0, [pc, #236]	; (800e994 <pbuf_free+0x10c>)
 800e8a6:	f00b fb2b 	bl	8019f00 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800e8aa:	2300      	movs	r3, #0
 800e8ac:	e069      	b.n	800e982 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800e8ae:	2300      	movs	r3, #0
 800e8b0:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800e8b2:	e062      	b.n	800e97a <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800e8b4:	f00b f9ce 	bl	8019c54 <sys_arch_protect>
 800e8b8:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	7b9b      	ldrb	r3, [r3, #14]
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	d106      	bne.n	800e8d0 <pbuf_free+0x48>
 800e8c2:	4b32      	ldr	r3, [pc, #200]	; (800e98c <pbuf_free+0x104>)
 800e8c4:	f240 22f1 	movw	r2, #753	; 0x2f1
 800e8c8:	4933      	ldr	r1, [pc, #204]	; (800e998 <pbuf_free+0x110>)
 800e8ca:	4832      	ldr	r0, [pc, #200]	; (800e994 <pbuf_free+0x10c>)
 800e8cc:	f00b fb18 	bl	8019f00 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	7b9b      	ldrb	r3, [r3, #14]
 800e8d4:	3b01      	subs	r3, #1
 800e8d6:	b2da      	uxtb	r2, r3
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	739a      	strb	r2, [r3, #14]
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	7b9b      	ldrb	r3, [r3, #14]
 800e8e0:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800e8e2:	69b8      	ldr	r0, [r7, #24]
 800e8e4:	f00b f9c4 	bl	8019c70 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800e8e8:	7dfb      	ldrb	r3, [r7, #23]
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d143      	bne.n	800e976 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	681b      	ldr	r3, [r3, #0]
 800e8f2:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	7b1b      	ldrb	r3, [r3, #12]
 800e8f8:	f003 030f 	and.w	r3, r3, #15
 800e8fc:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	7b5b      	ldrb	r3, [r3, #13]
 800e902:	f003 0302 	and.w	r3, r3, #2
 800e906:	2b00      	cmp	r3, #0
 800e908:	d011      	beq.n	800e92e <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800e90e:	68bb      	ldr	r3, [r7, #8]
 800e910:	691b      	ldr	r3, [r3, #16]
 800e912:	2b00      	cmp	r3, #0
 800e914:	d106      	bne.n	800e924 <pbuf_free+0x9c>
 800e916:	4b1d      	ldr	r3, [pc, #116]	; (800e98c <pbuf_free+0x104>)
 800e918:	f240 22ff 	movw	r2, #767	; 0x2ff
 800e91c:	491f      	ldr	r1, [pc, #124]	; (800e99c <pbuf_free+0x114>)
 800e91e:	481d      	ldr	r0, [pc, #116]	; (800e994 <pbuf_free+0x10c>)
 800e920:	f00b faee 	bl	8019f00 <iprintf>
        pc->custom_free_function(p);
 800e924:	68bb      	ldr	r3, [r7, #8]
 800e926:	691b      	ldr	r3, [r3, #16]
 800e928:	6878      	ldr	r0, [r7, #4]
 800e92a:	4798      	blx	r3
 800e92c:	e01d      	b.n	800e96a <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800e92e:	7bfb      	ldrb	r3, [r7, #15]
 800e930:	2b02      	cmp	r3, #2
 800e932:	d104      	bne.n	800e93e <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800e934:	6879      	ldr	r1, [r7, #4]
 800e936:	200c      	movs	r0, #12
 800e938:	f7ff f904 	bl	800db44 <memp_free>
 800e93c:	e015      	b.n	800e96a <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800e93e:	7bfb      	ldrb	r3, [r7, #15]
 800e940:	2b01      	cmp	r3, #1
 800e942:	d104      	bne.n	800e94e <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800e944:	6879      	ldr	r1, [r7, #4]
 800e946:	200b      	movs	r0, #11
 800e948:	f7ff f8fc 	bl	800db44 <memp_free>
 800e94c:	e00d      	b.n	800e96a <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800e94e:	7bfb      	ldrb	r3, [r7, #15]
 800e950:	2b00      	cmp	r3, #0
 800e952:	d103      	bne.n	800e95c <pbuf_free+0xd4>
          mem_free(p);
 800e954:	6878      	ldr	r0, [r7, #4]
 800e956:	f7fe fd87 	bl	800d468 <mem_free>
 800e95a:	e006      	b.n	800e96a <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800e95c:	4b0b      	ldr	r3, [pc, #44]	; (800e98c <pbuf_free+0x104>)
 800e95e:	f240 320f 	movw	r2, #783	; 0x30f
 800e962:	490f      	ldr	r1, [pc, #60]	; (800e9a0 <pbuf_free+0x118>)
 800e964:	480b      	ldr	r0, [pc, #44]	; (800e994 <pbuf_free+0x10c>)
 800e966:	f00b facb 	bl	8019f00 <iprintf>
        }
      }
      count++;
 800e96a:	7ffb      	ldrb	r3, [r7, #31]
 800e96c:	3301      	adds	r3, #1
 800e96e:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800e970:	693b      	ldr	r3, [r7, #16]
 800e972:	607b      	str	r3, [r7, #4]
 800e974:	e001      	b.n	800e97a <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800e976:	2300      	movs	r3, #0
 800e978:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	d199      	bne.n	800e8b4 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800e980:	7ffb      	ldrb	r3, [r7, #31]
}
 800e982:	4618      	mov	r0, r3
 800e984:	3720      	adds	r7, #32
 800e986:	46bd      	mov	sp, r7
 800e988:	bd80      	pop	{r7, pc}
 800e98a:	bf00      	nop
 800e98c:	0801c1b4 	.word	0x0801c1b4
 800e990:	0801c318 	.word	0x0801c318
 800e994:	0801c214 	.word	0x0801c214
 800e998:	0801c344 	.word	0x0801c344
 800e99c:	0801c35c 	.word	0x0801c35c
 800e9a0:	0801c380 	.word	0x0801c380

0800e9a4 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800e9a4:	b480      	push	{r7}
 800e9a6:	b085      	sub	sp, #20
 800e9a8:	af00      	add	r7, sp, #0
 800e9aa:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800e9ac:	2300      	movs	r3, #0
 800e9ae:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800e9b0:	e005      	b.n	800e9be <pbuf_clen+0x1a>
    ++len;
 800e9b2:	89fb      	ldrh	r3, [r7, #14]
 800e9b4:	3301      	adds	r3, #1
 800e9b6:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	681b      	ldr	r3, [r3, #0]
 800e9bc:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	d1f6      	bne.n	800e9b2 <pbuf_clen+0xe>
  }
  return len;
 800e9c4:	89fb      	ldrh	r3, [r7, #14]
}
 800e9c6:	4618      	mov	r0, r3
 800e9c8:	3714      	adds	r7, #20
 800e9ca:	46bd      	mov	sp, r7
 800e9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9d0:	4770      	bx	lr
	...

0800e9d4 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800e9d4:	b580      	push	{r7, lr}
 800e9d6:	b084      	sub	sp, #16
 800e9d8:	af00      	add	r7, sp, #0
 800e9da:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d016      	beq.n	800ea10 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800e9e2:	f00b f937 	bl	8019c54 <sys_arch_protect>
 800e9e6:	60f8      	str	r0, [r7, #12]
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	7b9b      	ldrb	r3, [r3, #14]
 800e9ec:	3301      	adds	r3, #1
 800e9ee:	b2da      	uxtb	r2, r3
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	739a      	strb	r2, [r3, #14]
 800e9f4:	68f8      	ldr	r0, [r7, #12]
 800e9f6:	f00b f93b 	bl	8019c70 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	7b9b      	ldrb	r3, [r3, #14]
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	d106      	bne.n	800ea10 <pbuf_ref+0x3c>
 800ea02:	4b05      	ldr	r3, [pc, #20]	; (800ea18 <pbuf_ref+0x44>)
 800ea04:	f240 3242 	movw	r2, #834	; 0x342
 800ea08:	4904      	ldr	r1, [pc, #16]	; (800ea1c <pbuf_ref+0x48>)
 800ea0a:	4805      	ldr	r0, [pc, #20]	; (800ea20 <pbuf_ref+0x4c>)
 800ea0c:	f00b fa78 	bl	8019f00 <iprintf>
  }
}
 800ea10:	bf00      	nop
 800ea12:	3710      	adds	r7, #16
 800ea14:	46bd      	mov	sp, r7
 800ea16:	bd80      	pop	{r7, pc}
 800ea18:	0801c1b4 	.word	0x0801c1b4
 800ea1c:	0801c394 	.word	0x0801c394
 800ea20:	0801c214 	.word	0x0801c214

0800ea24 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800ea24:	b580      	push	{r7, lr}
 800ea26:	b084      	sub	sp, #16
 800ea28:	af00      	add	r7, sp, #0
 800ea2a:	6078      	str	r0, [r7, #4]
 800ea2c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	d002      	beq.n	800ea3a <pbuf_cat+0x16>
 800ea34:	683b      	ldr	r3, [r7, #0]
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	d107      	bne.n	800ea4a <pbuf_cat+0x26>
 800ea3a:	4b20      	ldr	r3, [pc, #128]	; (800eabc <pbuf_cat+0x98>)
 800ea3c:	f240 3259 	movw	r2, #857	; 0x359
 800ea40:	491f      	ldr	r1, [pc, #124]	; (800eac0 <pbuf_cat+0x9c>)
 800ea42:	4820      	ldr	r0, [pc, #128]	; (800eac4 <pbuf_cat+0xa0>)
 800ea44:	f00b fa5c 	bl	8019f00 <iprintf>
 800ea48:	e034      	b.n	800eab4 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	60fb      	str	r3, [r7, #12]
 800ea4e:	e00a      	b.n	800ea66 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800ea50:	68fb      	ldr	r3, [r7, #12]
 800ea52:	891a      	ldrh	r2, [r3, #8]
 800ea54:	683b      	ldr	r3, [r7, #0]
 800ea56:	891b      	ldrh	r3, [r3, #8]
 800ea58:	4413      	add	r3, r2
 800ea5a:	b29a      	uxth	r2, r3
 800ea5c:	68fb      	ldr	r3, [r7, #12]
 800ea5e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800ea60:	68fb      	ldr	r3, [r7, #12]
 800ea62:	681b      	ldr	r3, [r3, #0]
 800ea64:	60fb      	str	r3, [r7, #12]
 800ea66:	68fb      	ldr	r3, [r7, #12]
 800ea68:	681b      	ldr	r3, [r3, #0]
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	d1f0      	bne.n	800ea50 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800ea6e:	68fb      	ldr	r3, [r7, #12]
 800ea70:	891a      	ldrh	r2, [r3, #8]
 800ea72:	68fb      	ldr	r3, [r7, #12]
 800ea74:	895b      	ldrh	r3, [r3, #10]
 800ea76:	429a      	cmp	r2, r3
 800ea78:	d006      	beq.n	800ea88 <pbuf_cat+0x64>
 800ea7a:	4b10      	ldr	r3, [pc, #64]	; (800eabc <pbuf_cat+0x98>)
 800ea7c:	f240 3262 	movw	r2, #866	; 0x362
 800ea80:	4911      	ldr	r1, [pc, #68]	; (800eac8 <pbuf_cat+0xa4>)
 800ea82:	4810      	ldr	r0, [pc, #64]	; (800eac4 <pbuf_cat+0xa0>)
 800ea84:	f00b fa3c 	bl	8019f00 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800ea88:	68fb      	ldr	r3, [r7, #12]
 800ea8a:	681b      	ldr	r3, [r3, #0]
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d006      	beq.n	800ea9e <pbuf_cat+0x7a>
 800ea90:	4b0a      	ldr	r3, [pc, #40]	; (800eabc <pbuf_cat+0x98>)
 800ea92:	f240 3263 	movw	r2, #867	; 0x363
 800ea96:	490d      	ldr	r1, [pc, #52]	; (800eacc <pbuf_cat+0xa8>)
 800ea98:	480a      	ldr	r0, [pc, #40]	; (800eac4 <pbuf_cat+0xa0>)
 800ea9a:	f00b fa31 	bl	8019f00 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800ea9e:	68fb      	ldr	r3, [r7, #12]
 800eaa0:	891a      	ldrh	r2, [r3, #8]
 800eaa2:	683b      	ldr	r3, [r7, #0]
 800eaa4:	891b      	ldrh	r3, [r3, #8]
 800eaa6:	4413      	add	r3, r2
 800eaa8:	b29a      	uxth	r2, r3
 800eaaa:	68fb      	ldr	r3, [r7, #12]
 800eaac:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800eaae:	68fb      	ldr	r3, [r7, #12]
 800eab0:	683a      	ldr	r2, [r7, #0]
 800eab2:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800eab4:	3710      	adds	r7, #16
 800eab6:	46bd      	mov	sp, r7
 800eab8:	bd80      	pop	{r7, pc}
 800eaba:	bf00      	nop
 800eabc:	0801c1b4 	.word	0x0801c1b4
 800eac0:	0801c3a8 	.word	0x0801c3a8
 800eac4:	0801c214 	.word	0x0801c214
 800eac8:	0801c3e0 	.word	0x0801c3e0
 800eacc:	0801c410 	.word	0x0801c410

0800ead0 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800ead0:	b580      	push	{r7, lr}
 800ead2:	b082      	sub	sp, #8
 800ead4:	af00      	add	r7, sp, #0
 800ead6:	6078      	str	r0, [r7, #4]
 800ead8:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800eada:	6839      	ldr	r1, [r7, #0]
 800eadc:	6878      	ldr	r0, [r7, #4]
 800eade:	f7ff ffa1 	bl	800ea24 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800eae2:	6838      	ldr	r0, [r7, #0]
 800eae4:	f7ff ff76 	bl	800e9d4 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800eae8:	bf00      	nop
 800eaea:	3708      	adds	r7, #8
 800eaec:	46bd      	mov	sp, r7
 800eaee:	bd80      	pop	{r7, pc}

0800eaf0 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800eaf0:	b580      	push	{r7, lr}
 800eaf2:	b086      	sub	sp, #24
 800eaf4:	af00      	add	r7, sp, #0
 800eaf6:	6078      	str	r0, [r7, #4]
 800eaf8:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800eafa:	2300      	movs	r3, #0
 800eafc:	617b      	str	r3, [r7, #20]
 800eafe:	2300      	movs	r3, #0
 800eb00:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	2b00      	cmp	r3, #0
 800eb06:	d008      	beq.n	800eb1a <pbuf_copy+0x2a>
 800eb08:	683b      	ldr	r3, [r7, #0]
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d005      	beq.n	800eb1a <pbuf_copy+0x2a>
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	891a      	ldrh	r2, [r3, #8]
 800eb12:	683b      	ldr	r3, [r7, #0]
 800eb14:	891b      	ldrh	r3, [r3, #8]
 800eb16:	429a      	cmp	r2, r3
 800eb18:	d209      	bcs.n	800eb2e <pbuf_copy+0x3e>
 800eb1a:	4b57      	ldr	r3, [pc, #348]	; (800ec78 <pbuf_copy+0x188>)
 800eb1c:	f240 32c9 	movw	r2, #969	; 0x3c9
 800eb20:	4956      	ldr	r1, [pc, #344]	; (800ec7c <pbuf_copy+0x18c>)
 800eb22:	4857      	ldr	r0, [pc, #348]	; (800ec80 <pbuf_copy+0x190>)
 800eb24:	f00b f9ec 	bl	8019f00 <iprintf>
 800eb28:	f06f 030f 	mvn.w	r3, #15
 800eb2c:	e09f      	b.n	800ec6e <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	895b      	ldrh	r3, [r3, #10]
 800eb32:	461a      	mov	r2, r3
 800eb34:	697b      	ldr	r3, [r7, #20]
 800eb36:	1ad2      	subs	r2, r2, r3
 800eb38:	683b      	ldr	r3, [r7, #0]
 800eb3a:	895b      	ldrh	r3, [r3, #10]
 800eb3c:	4619      	mov	r1, r3
 800eb3e:	693b      	ldr	r3, [r7, #16]
 800eb40:	1acb      	subs	r3, r1, r3
 800eb42:	429a      	cmp	r2, r3
 800eb44:	d306      	bcc.n	800eb54 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800eb46:	683b      	ldr	r3, [r7, #0]
 800eb48:	895b      	ldrh	r3, [r3, #10]
 800eb4a:	461a      	mov	r2, r3
 800eb4c:	693b      	ldr	r3, [r7, #16]
 800eb4e:	1ad3      	subs	r3, r2, r3
 800eb50:	60fb      	str	r3, [r7, #12]
 800eb52:	e005      	b.n	800eb60 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	895b      	ldrh	r3, [r3, #10]
 800eb58:	461a      	mov	r2, r3
 800eb5a:	697b      	ldr	r3, [r7, #20]
 800eb5c:	1ad3      	subs	r3, r2, r3
 800eb5e:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	685a      	ldr	r2, [r3, #4]
 800eb64:	697b      	ldr	r3, [r7, #20]
 800eb66:	18d0      	adds	r0, r2, r3
 800eb68:	683b      	ldr	r3, [r7, #0]
 800eb6a:	685a      	ldr	r2, [r3, #4]
 800eb6c:	693b      	ldr	r3, [r7, #16]
 800eb6e:	4413      	add	r3, r2
 800eb70:	68fa      	ldr	r2, [r7, #12]
 800eb72:	4619      	mov	r1, r3
 800eb74:	f00b f8ce 	bl	8019d14 <memcpy>
    offset_to += len;
 800eb78:	697a      	ldr	r2, [r7, #20]
 800eb7a:	68fb      	ldr	r3, [r7, #12]
 800eb7c:	4413      	add	r3, r2
 800eb7e:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800eb80:	693a      	ldr	r2, [r7, #16]
 800eb82:	68fb      	ldr	r3, [r7, #12]
 800eb84:	4413      	add	r3, r2
 800eb86:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	895b      	ldrh	r3, [r3, #10]
 800eb8c:	461a      	mov	r2, r3
 800eb8e:	697b      	ldr	r3, [r7, #20]
 800eb90:	4293      	cmp	r3, r2
 800eb92:	d906      	bls.n	800eba2 <pbuf_copy+0xb2>
 800eb94:	4b38      	ldr	r3, [pc, #224]	; (800ec78 <pbuf_copy+0x188>)
 800eb96:	f240 32d9 	movw	r2, #985	; 0x3d9
 800eb9a:	493a      	ldr	r1, [pc, #232]	; (800ec84 <pbuf_copy+0x194>)
 800eb9c:	4838      	ldr	r0, [pc, #224]	; (800ec80 <pbuf_copy+0x190>)
 800eb9e:	f00b f9af 	bl	8019f00 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800eba2:	683b      	ldr	r3, [r7, #0]
 800eba4:	895b      	ldrh	r3, [r3, #10]
 800eba6:	461a      	mov	r2, r3
 800eba8:	693b      	ldr	r3, [r7, #16]
 800ebaa:	4293      	cmp	r3, r2
 800ebac:	d906      	bls.n	800ebbc <pbuf_copy+0xcc>
 800ebae:	4b32      	ldr	r3, [pc, #200]	; (800ec78 <pbuf_copy+0x188>)
 800ebb0:	f240 32da 	movw	r2, #986	; 0x3da
 800ebb4:	4934      	ldr	r1, [pc, #208]	; (800ec88 <pbuf_copy+0x198>)
 800ebb6:	4832      	ldr	r0, [pc, #200]	; (800ec80 <pbuf_copy+0x190>)
 800ebb8:	f00b f9a2 	bl	8019f00 <iprintf>
    if (offset_from >= p_from->len) {
 800ebbc:	683b      	ldr	r3, [r7, #0]
 800ebbe:	895b      	ldrh	r3, [r3, #10]
 800ebc0:	461a      	mov	r2, r3
 800ebc2:	693b      	ldr	r3, [r7, #16]
 800ebc4:	4293      	cmp	r3, r2
 800ebc6:	d304      	bcc.n	800ebd2 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800ebc8:	2300      	movs	r3, #0
 800ebca:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800ebcc:	683b      	ldr	r3, [r7, #0]
 800ebce:	681b      	ldr	r3, [r3, #0]
 800ebd0:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	895b      	ldrh	r3, [r3, #10]
 800ebd6:	461a      	mov	r2, r3
 800ebd8:	697b      	ldr	r3, [r7, #20]
 800ebda:	4293      	cmp	r3, r2
 800ebdc:	d114      	bne.n	800ec08 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800ebde:	2300      	movs	r3, #0
 800ebe0:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	681b      	ldr	r3, [r3, #0]
 800ebe6:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	d10c      	bne.n	800ec08 <pbuf_copy+0x118>
 800ebee:	683b      	ldr	r3, [r7, #0]
 800ebf0:	2b00      	cmp	r3, #0
 800ebf2:	d009      	beq.n	800ec08 <pbuf_copy+0x118>
 800ebf4:	4b20      	ldr	r3, [pc, #128]	; (800ec78 <pbuf_copy+0x188>)
 800ebf6:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800ebfa:	4924      	ldr	r1, [pc, #144]	; (800ec8c <pbuf_copy+0x19c>)
 800ebfc:	4820      	ldr	r0, [pc, #128]	; (800ec80 <pbuf_copy+0x190>)
 800ebfe:	f00b f97f 	bl	8019f00 <iprintf>
 800ec02:	f06f 030f 	mvn.w	r3, #15
 800ec06:	e032      	b.n	800ec6e <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800ec08:	683b      	ldr	r3, [r7, #0]
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	d013      	beq.n	800ec36 <pbuf_copy+0x146>
 800ec0e:	683b      	ldr	r3, [r7, #0]
 800ec10:	895a      	ldrh	r2, [r3, #10]
 800ec12:	683b      	ldr	r3, [r7, #0]
 800ec14:	891b      	ldrh	r3, [r3, #8]
 800ec16:	429a      	cmp	r2, r3
 800ec18:	d10d      	bne.n	800ec36 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800ec1a:	683b      	ldr	r3, [r7, #0]
 800ec1c:	681b      	ldr	r3, [r3, #0]
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d009      	beq.n	800ec36 <pbuf_copy+0x146>
 800ec22:	4b15      	ldr	r3, [pc, #84]	; (800ec78 <pbuf_copy+0x188>)
 800ec24:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800ec28:	4919      	ldr	r1, [pc, #100]	; (800ec90 <pbuf_copy+0x1a0>)
 800ec2a:	4815      	ldr	r0, [pc, #84]	; (800ec80 <pbuf_copy+0x190>)
 800ec2c:	f00b f968 	bl	8019f00 <iprintf>
 800ec30:	f06f 0305 	mvn.w	r3, #5
 800ec34:	e01b      	b.n	800ec6e <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	d013      	beq.n	800ec64 <pbuf_copy+0x174>
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	895a      	ldrh	r2, [r3, #10]
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	891b      	ldrh	r3, [r3, #8]
 800ec44:	429a      	cmp	r2, r3
 800ec46:	d10d      	bne.n	800ec64 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	681b      	ldr	r3, [r3, #0]
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d009      	beq.n	800ec64 <pbuf_copy+0x174>
 800ec50:	4b09      	ldr	r3, [pc, #36]	; (800ec78 <pbuf_copy+0x188>)
 800ec52:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800ec56:	490e      	ldr	r1, [pc, #56]	; (800ec90 <pbuf_copy+0x1a0>)
 800ec58:	4809      	ldr	r0, [pc, #36]	; (800ec80 <pbuf_copy+0x190>)
 800ec5a:	f00b f951 	bl	8019f00 <iprintf>
 800ec5e:	f06f 0305 	mvn.w	r3, #5
 800ec62:	e004      	b.n	800ec6e <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800ec64:	683b      	ldr	r3, [r7, #0]
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	f47f af61 	bne.w	800eb2e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800ec6c:	2300      	movs	r3, #0
}
 800ec6e:	4618      	mov	r0, r3
 800ec70:	3718      	adds	r7, #24
 800ec72:	46bd      	mov	sp, r7
 800ec74:	bd80      	pop	{r7, pc}
 800ec76:	bf00      	nop
 800ec78:	0801c1b4 	.word	0x0801c1b4
 800ec7c:	0801c45c 	.word	0x0801c45c
 800ec80:	0801c214 	.word	0x0801c214
 800ec84:	0801c48c 	.word	0x0801c48c
 800ec88:	0801c4a4 	.word	0x0801c4a4
 800ec8c:	0801c4c0 	.word	0x0801c4c0
 800ec90:	0801c4d0 	.word	0x0801c4d0

0800ec94 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800ec94:	b580      	push	{r7, lr}
 800ec96:	b088      	sub	sp, #32
 800ec98:	af00      	add	r7, sp, #0
 800ec9a:	60f8      	str	r0, [r7, #12]
 800ec9c:	60b9      	str	r1, [r7, #8]
 800ec9e:	4611      	mov	r1, r2
 800eca0:	461a      	mov	r2, r3
 800eca2:	460b      	mov	r3, r1
 800eca4:	80fb      	strh	r3, [r7, #6]
 800eca6:	4613      	mov	r3, r2
 800eca8:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800ecaa:	2300      	movs	r3, #0
 800ecac:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800ecae:	2300      	movs	r3, #0
 800ecb0:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800ecb2:	68fb      	ldr	r3, [r7, #12]
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d108      	bne.n	800ecca <pbuf_copy_partial+0x36>
 800ecb8:	4b2b      	ldr	r3, [pc, #172]	; (800ed68 <pbuf_copy_partial+0xd4>)
 800ecba:	f240 420a 	movw	r2, #1034	; 0x40a
 800ecbe:	492b      	ldr	r1, [pc, #172]	; (800ed6c <pbuf_copy_partial+0xd8>)
 800ecc0:	482b      	ldr	r0, [pc, #172]	; (800ed70 <pbuf_copy_partial+0xdc>)
 800ecc2:	f00b f91d 	bl	8019f00 <iprintf>
 800ecc6:	2300      	movs	r3, #0
 800ecc8:	e04a      	b.n	800ed60 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800ecca:	68bb      	ldr	r3, [r7, #8]
 800eccc:	2b00      	cmp	r3, #0
 800ecce:	d108      	bne.n	800ece2 <pbuf_copy_partial+0x4e>
 800ecd0:	4b25      	ldr	r3, [pc, #148]	; (800ed68 <pbuf_copy_partial+0xd4>)
 800ecd2:	f240 420b 	movw	r2, #1035	; 0x40b
 800ecd6:	4927      	ldr	r1, [pc, #156]	; (800ed74 <pbuf_copy_partial+0xe0>)
 800ecd8:	4825      	ldr	r0, [pc, #148]	; (800ed70 <pbuf_copy_partial+0xdc>)
 800ecda:	f00b f911 	bl	8019f00 <iprintf>
 800ecde:	2300      	movs	r3, #0
 800ece0:	e03e      	b.n	800ed60 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800ece2:	68fb      	ldr	r3, [r7, #12]
 800ece4:	61fb      	str	r3, [r7, #28]
 800ece6:	e034      	b.n	800ed52 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800ece8:	88bb      	ldrh	r3, [r7, #4]
 800ecea:	2b00      	cmp	r3, #0
 800ecec:	d00a      	beq.n	800ed04 <pbuf_copy_partial+0x70>
 800ecee:	69fb      	ldr	r3, [r7, #28]
 800ecf0:	895b      	ldrh	r3, [r3, #10]
 800ecf2:	88ba      	ldrh	r2, [r7, #4]
 800ecf4:	429a      	cmp	r2, r3
 800ecf6:	d305      	bcc.n	800ed04 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800ecf8:	69fb      	ldr	r3, [r7, #28]
 800ecfa:	895b      	ldrh	r3, [r3, #10]
 800ecfc:	88ba      	ldrh	r2, [r7, #4]
 800ecfe:	1ad3      	subs	r3, r2, r3
 800ed00:	80bb      	strh	r3, [r7, #4]
 800ed02:	e023      	b.n	800ed4c <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800ed04:	69fb      	ldr	r3, [r7, #28]
 800ed06:	895a      	ldrh	r2, [r3, #10]
 800ed08:	88bb      	ldrh	r3, [r7, #4]
 800ed0a:	1ad3      	subs	r3, r2, r3
 800ed0c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800ed0e:	8b3a      	ldrh	r2, [r7, #24]
 800ed10:	88fb      	ldrh	r3, [r7, #6]
 800ed12:	429a      	cmp	r2, r3
 800ed14:	d901      	bls.n	800ed1a <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800ed16:	88fb      	ldrh	r3, [r7, #6]
 800ed18:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800ed1a:	8b7b      	ldrh	r3, [r7, #26]
 800ed1c:	68ba      	ldr	r2, [r7, #8]
 800ed1e:	18d0      	adds	r0, r2, r3
 800ed20:	69fb      	ldr	r3, [r7, #28]
 800ed22:	685a      	ldr	r2, [r3, #4]
 800ed24:	88bb      	ldrh	r3, [r7, #4]
 800ed26:	4413      	add	r3, r2
 800ed28:	8b3a      	ldrh	r2, [r7, #24]
 800ed2a:	4619      	mov	r1, r3
 800ed2c:	f00a fff2 	bl	8019d14 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800ed30:	8afa      	ldrh	r2, [r7, #22]
 800ed32:	8b3b      	ldrh	r3, [r7, #24]
 800ed34:	4413      	add	r3, r2
 800ed36:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800ed38:	8b7a      	ldrh	r2, [r7, #26]
 800ed3a:	8b3b      	ldrh	r3, [r7, #24]
 800ed3c:	4413      	add	r3, r2
 800ed3e:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800ed40:	88fa      	ldrh	r2, [r7, #6]
 800ed42:	8b3b      	ldrh	r3, [r7, #24]
 800ed44:	1ad3      	subs	r3, r2, r3
 800ed46:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800ed48:	2300      	movs	r3, #0
 800ed4a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800ed4c:	69fb      	ldr	r3, [r7, #28]
 800ed4e:	681b      	ldr	r3, [r3, #0]
 800ed50:	61fb      	str	r3, [r7, #28]
 800ed52:	88fb      	ldrh	r3, [r7, #6]
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	d002      	beq.n	800ed5e <pbuf_copy_partial+0xca>
 800ed58:	69fb      	ldr	r3, [r7, #28]
 800ed5a:	2b00      	cmp	r3, #0
 800ed5c:	d1c4      	bne.n	800ece8 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800ed5e:	8afb      	ldrh	r3, [r7, #22]
}
 800ed60:	4618      	mov	r0, r3
 800ed62:	3720      	adds	r7, #32
 800ed64:	46bd      	mov	sp, r7
 800ed66:	bd80      	pop	{r7, pc}
 800ed68:	0801c1b4 	.word	0x0801c1b4
 800ed6c:	0801c4fc 	.word	0x0801c4fc
 800ed70:	0801c214 	.word	0x0801c214
 800ed74:	0801c51c 	.word	0x0801c51c

0800ed78 <pbuf_skip_const>:
#endif /* LWIP_TCP && TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

/* Actual implementation of pbuf_skip() but returning const pointer... */
static const struct pbuf *
pbuf_skip_const(const struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 800ed78:	b480      	push	{r7}
 800ed7a:	b087      	sub	sp, #28
 800ed7c:	af00      	add	r7, sp, #0
 800ed7e:	60f8      	str	r0, [r7, #12]
 800ed80:	460b      	mov	r3, r1
 800ed82:	607a      	str	r2, [r7, #4]
 800ed84:	817b      	strh	r3, [r7, #10]
  u16_t offset_left = in_offset;
 800ed86:	897b      	ldrh	r3, [r7, #10]
 800ed88:	82fb      	strh	r3, [r7, #22]
  const struct pbuf *q = in;
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	613b      	str	r3, [r7, #16]

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
 800ed8e:	e007      	b.n	800eda0 <pbuf_skip_const+0x28>
    offset_left = (u16_t)(offset_left - q->len);
 800ed90:	693b      	ldr	r3, [r7, #16]
 800ed92:	895b      	ldrh	r3, [r3, #10]
 800ed94:	8afa      	ldrh	r2, [r7, #22]
 800ed96:	1ad3      	subs	r3, r2, r3
 800ed98:	82fb      	strh	r3, [r7, #22]
    q = q->next;
 800ed9a:	693b      	ldr	r3, [r7, #16]
 800ed9c:	681b      	ldr	r3, [r3, #0]
 800ed9e:	613b      	str	r3, [r7, #16]
  while ((q != NULL) && (q->len <= offset_left)) {
 800eda0:	693b      	ldr	r3, [r7, #16]
 800eda2:	2b00      	cmp	r3, #0
 800eda4:	d004      	beq.n	800edb0 <pbuf_skip_const+0x38>
 800eda6:	693b      	ldr	r3, [r7, #16]
 800eda8:	895b      	ldrh	r3, [r3, #10]
 800edaa:	8afa      	ldrh	r2, [r7, #22]
 800edac:	429a      	cmp	r2, r3
 800edae:	d2ef      	bcs.n	800ed90 <pbuf_skip_const+0x18>
  }
  if (out_offset != NULL) {
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	2b00      	cmp	r3, #0
 800edb4:	d002      	beq.n	800edbc <pbuf_skip_const+0x44>
    *out_offset = offset_left;
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	8afa      	ldrh	r2, [r7, #22]
 800edba:	801a      	strh	r2, [r3, #0]
  }
  return q;
 800edbc:	693b      	ldr	r3, [r7, #16]
}
 800edbe:	4618      	mov	r0, r3
 800edc0:	371c      	adds	r7, #28
 800edc2:	46bd      	mov	sp, r7
 800edc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edc8:	4770      	bx	lr

0800edca <pbuf_skip>:
 * @param out_offset resulting offset in the returned pbuf
 * @return the pbuf in the queue where the offset is
 */
struct pbuf *
pbuf_skip(struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 800edca:	b580      	push	{r7, lr}
 800edcc:	b086      	sub	sp, #24
 800edce:	af00      	add	r7, sp, #0
 800edd0:	60f8      	str	r0, [r7, #12]
 800edd2:	460b      	mov	r3, r1
 800edd4:	607a      	str	r2, [r7, #4]
 800edd6:	817b      	strh	r3, [r7, #10]
  const struct pbuf *out = pbuf_skip_const(in, in_offset, out_offset);
 800edd8:	897b      	ldrh	r3, [r7, #10]
 800edda:	687a      	ldr	r2, [r7, #4]
 800eddc:	4619      	mov	r1, r3
 800edde:	68f8      	ldr	r0, [r7, #12]
 800ede0:	f7ff ffca 	bl	800ed78 <pbuf_skip_const>
 800ede4:	6178      	str	r0, [r7, #20]
  return LWIP_CONST_CAST(struct pbuf *, out);
 800ede6:	697b      	ldr	r3, [r7, #20]
}
 800ede8:	4618      	mov	r0, r3
 800edea:	3718      	adds	r7, #24
 800edec:	46bd      	mov	sp, r7
 800edee:	bd80      	pop	{r7, pc}

0800edf0 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 800edf0:	b580      	push	{r7, lr}
 800edf2:	b088      	sub	sp, #32
 800edf4:	af00      	add	r7, sp, #0
 800edf6:	60f8      	str	r0, [r7, #12]
 800edf8:	60b9      	str	r1, [r7, #8]
 800edfa:	4613      	mov	r3, r2
 800edfc:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 800edfe:	88fb      	ldrh	r3, [r7, #6]
 800ee00:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 800ee02:	2300      	movs	r3, #0
 800ee04:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 800ee06:	68fb      	ldr	r3, [r7, #12]
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	d109      	bne.n	800ee20 <pbuf_take+0x30>
 800ee0c:	4b3a      	ldr	r3, [pc, #232]	; (800eef8 <pbuf_take+0x108>)
 800ee0e:	f240 42b3 	movw	r2, #1203	; 0x4b3
 800ee12:	493a      	ldr	r1, [pc, #232]	; (800eefc <pbuf_take+0x10c>)
 800ee14:	483a      	ldr	r0, [pc, #232]	; (800ef00 <pbuf_take+0x110>)
 800ee16:	f00b f873 	bl	8019f00 <iprintf>
 800ee1a:	f06f 030f 	mvn.w	r3, #15
 800ee1e:	e067      	b.n	800eef0 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800ee20:	68bb      	ldr	r3, [r7, #8]
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	d109      	bne.n	800ee3a <pbuf_take+0x4a>
 800ee26:	4b34      	ldr	r3, [pc, #208]	; (800eef8 <pbuf_take+0x108>)
 800ee28:	f240 42b4 	movw	r2, #1204	; 0x4b4
 800ee2c:	4935      	ldr	r1, [pc, #212]	; (800ef04 <pbuf_take+0x114>)
 800ee2e:	4834      	ldr	r0, [pc, #208]	; (800ef00 <pbuf_take+0x110>)
 800ee30:	f00b f866 	bl	8019f00 <iprintf>
 800ee34:	f06f 030f 	mvn.w	r3, #15
 800ee38:	e05a      	b.n	800eef0 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 800ee3a:	68fb      	ldr	r3, [r7, #12]
 800ee3c:	891b      	ldrh	r3, [r3, #8]
 800ee3e:	88fa      	ldrh	r2, [r7, #6]
 800ee40:	429a      	cmp	r2, r3
 800ee42:	d909      	bls.n	800ee58 <pbuf_take+0x68>
 800ee44:	4b2c      	ldr	r3, [pc, #176]	; (800eef8 <pbuf_take+0x108>)
 800ee46:	f240 42b5 	movw	r2, #1205	; 0x4b5
 800ee4a:	492f      	ldr	r1, [pc, #188]	; (800ef08 <pbuf_take+0x118>)
 800ee4c:	482c      	ldr	r0, [pc, #176]	; (800ef00 <pbuf_take+0x110>)
 800ee4e:	f00b f857 	bl	8019f00 <iprintf>
 800ee52:	f04f 33ff 	mov.w	r3, #4294967295
 800ee56:	e04b      	b.n	800eef0 <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 800ee58:	68fb      	ldr	r3, [r7, #12]
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	d007      	beq.n	800ee6e <pbuf_take+0x7e>
 800ee5e:	68bb      	ldr	r3, [r7, #8]
 800ee60:	2b00      	cmp	r3, #0
 800ee62:	d004      	beq.n	800ee6e <pbuf_take+0x7e>
 800ee64:	68fb      	ldr	r3, [r7, #12]
 800ee66:	891b      	ldrh	r3, [r3, #8]
 800ee68:	88fa      	ldrh	r2, [r7, #6]
 800ee6a:	429a      	cmp	r2, r3
 800ee6c:	d902      	bls.n	800ee74 <pbuf_take+0x84>
    return ERR_ARG;
 800ee6e:	f06f 030f 	mvn.w	r3, #15
 800ee72:	e03d      	b.n	800eef0 <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 800ee74:	68fb      	ldr	r3, [r7, #12]
 800ee76:	61fb      	str	r3, [r7, #28]
 800ee78:	e028      	b.n	800eecc <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 800ee7a:	69fb      	ldr	r3, [r7, #28]
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	d106      	bne.n	800ee8e <pbuf_take+0x9e>
 800ee80:	4b1d      	ldr	r3, [pc, #116]	; (800eef8 <pbuf_take+0x108>)
 800ee82:	f240 42bd 	movw	r2, #1213	; 0x4bd
 800ee86:	4921      	ldr	r1, [pc, #132]	; (800ef0c <pbuf_take+0x11c>)
 800ee88:	481d      	ldr	r0, [pc, #116]	; (800ef00 <pbuf_take+0x110>)
 800ee8a:	f00b f839 	bl	8019f00 <iprintf>
    buf_copy_len = total_copy_len;
 800ee8e:	697b      	ldr	r3, [r7, #20]
 800ee90:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 800ee92:	69fb      	ldr	r3, [r7, #28]
 800ee94:	895b      	ldrh	r3, [r3, #10]
 800ee96:	461a      	mov	r2, r3
 800ee98:	69bb      	ldr	r3, [r7, #24]
 800ee9a:	4293      	cmp	r3, r2
 800ee9c:	d902      	bls.n	800eea4 <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 800ee9e:	69fb      	ldr	r3, [r7, #28]
 800eea0:	895b      	ldrh	r3, [r3, #10]
 800eea2:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 800eea4:	69fb      	ldr	r3, [r7, #28]
 800eea6:	6858      	ldr	r0, [r3, #4]
 800eea8:	68ba      	ldr	r2, [r7, #8]
 800eeaa:	693b      	ldr	r3, [r7, #16]
 800eeac:	4413      	add	r3, r2
 800eeae:	69ba      	ldr	r2, [r7, #24]
 800eeb0:	4619      	mov	r1, r3
 800eeb2:	f00a ff2f 	bl	8019d14 <memcpy>
    total_copy_len -= buf_copy_len;
 800eeb6:	697a      	ldr	r2, [r7, #20]
 800eeb8:	69bb      	ldr	r3, [r7, #24]
 800eeba:	1ad3      	subs	r3, r2, r3
 800eebc:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 800eebe:	693a      	ldr	r2, [r7, #16]
 800eec0:	69bb      	ldr	r3, [r7, #24]
 800eec2:	4413      	add	r3, r2
 800eec4:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 800eec6:	69fb      	ldr	r3, [r7, #28]
 800eec8:	681b      	ldr	r3, [r3, #0]
 800eeca:	61fb      	str	r3, [r7, #28]
 800eecc:	697b      	ldr	r3, [r7, #20]
 800eece:	2b00      	cmp	r3, #0
 800eed0:	d1d3      	bne.n	800ee7a <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 800eed2:	697b      	ldr	r3, [r7, #20]
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	d103      	bne.n	800eee0 <pbuf_take+0xf0>
 800eed8:	88fb      	ldrh	r3, [r7, #6]
 800eeda:	693a      	ldr	r2, [r7, #16]
 800eedc:	429a      	cmp	r2, r3
 800eede:	d006      	beq.n	800eeee <pbuf_take+0xfe>
 800eee0:	4b05      	ldr	r3, [pc, #20]	; (800eef8 <pbuf_take+0x108>)
 800eee2:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 800eee6:	490a      	ldr	r1, [pc, #40]	; (800ef10 <pbuf_take+0x120>)
 800eee8:	4805      	ldr	r0, [pc, #20]	; (800ef00 <pbuf_take+0x110>)
 800eeea:	f00b f809 	bl	8019f00 <iprintf>
  return ERR_OK;
 800eeee:	2300      	movs	r3, #0
}
 800eef0:	4618      	mov	r0, r3
 800eef2:	3720      	adds	r7, #32
 800eef4:	46bd      	mov	sp, r7
 800eef6:	bd80      	pop	{r7, pc}
 800eef8:	0801c1b4 	.word	0x0801c1b4
 800eefc:	0801c58c 	.word	0x0801c58c
 800ef00:	0801c214 	.word	0x0801c214
 800ef04:	0801c5a4 	.word	0x0801c5a4
 800ef08:	0801c5c0 	.word	0x0801c5c0
 800ef0c:	0801c5e0 	.word	0x0801c5e0
 800ef10:	0801c5f8 	.word	0x0801c5f8

0800ef14 <pbuf_take_at>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take_at(struct pbuf *buf, const void *dataptr, u16_t len, u16_t offset)
{
 800ef14:	b580      	push	{r7, lr}
 800ef16:	b088      	sub	sp, #32
 800ef18:	af00      	add	r7, sp, #0
 800ef1a:	60f8      	str	r0, [r7, #12]
 800ef1c:	60b9      	str	r1, [r7, #8]
 800ef1e:	4611      	mov	r1, r2
 800ef20:	461a      	mov	r2, r3
 800ef22:	460b      	mov	r3, r1
 800ef24:	80fb      	strh	r3, [r7, #6]
 800ef26:	4613      	mov	r3, r2
 800ef28:	80bb      	strh	r3, [r7, #4]
  u16_t target_offset;
  struct pbuf *q = pbuf_skip(buf, offset, &target_offset);
 800ef2a:	f107 0210 	add.w	r2, r7, #16
 800ef2e:	88bb      	ldrh	r3, [r7, #4]
 800ef30:	4619      	mov	r1, r3
 800ef32:	68f8      	ldr	r0, [r7, #12]
 800ef34:	f7ff ff49 	bl	800edca <pbuf_skip>
 800ef38:	61f8      	str	r0, [r7, #28]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->tot_len >= target_offset + len)) {
 800ef3a:	69fb      	ldr	r3, [r7, #28]
 800ef3c:	2b00      	cmp	r3, #0
 800ef3e:	d047      	beq.n	800efd0 <pbuf_take_at+0xbc>
 800ef40:	69fb      	ldr	r3, [r7, #28]
 800ef42:	891b      	ldrh	r3, [r3, #8]
 800ef44:	461a      	mov	r2, r3
 800ef46:	8a3b      	ldrh	r3, [r7, #16]
 800ef48:	4619      	mov	r1, r3
 800ef4a:	88fb      	ldrh	r3, [r7, #6]
 800ef4c:	440b      	add	r3, r1
 800ef4e:	429a      	cmp	r2, r3
 800ef50:	db3e      	blt.n	800efd0 <pbuf_take_at+0xbc>
    u16_t remaining_len = len;
 800ef52:	88fb      	ldrh	r3, [r7, #6]
 800ef54:	837b      	strh	r3, [r7, #26]
    const u8_t *src_ptr = (const u8_t *)dataptr;
 800ef56:	68bb      	ldr	r3, [r7, #8]
 800ef58:	617b      	str	r3, [r7, #20]
    /* copy the part that goes into the first pbuf */
    u16_t first_copy_len;
    LWIP_ASSERT("check pbuf_skip result", target_offset < q->len);
 800ef5a:	69fb      	ldr	r3, [r7, #28]
 800ef5c:	895a      	ldrh	r2, [r3, #10]
 800ef5e:	8a3b      	ldrh	r3, [r7, #16]
 800ef60:	429a      	cmp	r2, r3
 800ef62:	d806      	bhi.n	800ef72 <pbuf_take_at+0x5e>
 800ef64:	4b1d      	ldr	r3, [pc, #116]	; (800efdc <pbuf_take_at+0xc8>)
 800ef66:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800ef6a:	491d      	ldr	r1, [pc, #116]	; (800efe0 <pbuf_take_at+0xcc>)
 800ef6c:	481d      	ldr	r0, [pc, #116]	; (800efe4 <pbuf_take_at+0xd0>)
 800ef6e:	f00a ffc7 	bl	8019f00 <iprintf>
    first_copy_len = (u16_t)LWIP_MIN(q->len - target_offset, len);
 800ef72:	69fb      	ldr	r3, [r7, #28]
 800ef74:	895b      	ldrh	r3, [r3, #10]
 800ef76:	461a      	mov	r2, r3
 800ef78:	8a3b      	ldrh	r3, [r7, #16]
 800ef7a:	1ad2      	subs	r2, r2, r3
 800ef7c:	88fb      	ldrh	r3, [r7, #6]
 800ef7e:	429a      	cmp	r2, r3
 800ef80:	da05      	bge.n	800ef8e <pbuf_take_at+0x7a>
 800ef82:	69fb      	ldr	r3, [r7, #28]
 800ef84:	895a      	ldrh	r2, [r3, #10]
 800ef86:	8a3b      	ldrh	r3, [r7, #16]
 800ef88:	1ad3      	subs	r3, r2, r3
 800ef8a:	b29b      	uxth	r3, r3
 800ef8c:	e000      	b.n	800ef90 <pbuf_take_at+0x7c>
 800ef8e:	88fb      	ldrh	r3, [r7, #6]
 800ef90:	827b      	strh	r3, [r7, #18]
    MEMCPY(((u8_t *)q->payload) + target_offset, dataptr, first_copy_len);
 800ef92:	69fb      	ldr	r3, [r7, #28]
 800ef94:	685b      	ldr	r3, [r3, #4]
 800ef96:	8a3a      	ldrh	r2, [r7, #16]
 800ef98:	4413      	add	r3, r2
 800ef9a:	8a7a      	ldrh	r2, [r7, #18]
 800ef9c:	68b9      	ldr	r1, [r7, #8]
 800ef9e:	4618      	mov	r0, r3
 800efa0:	f00a feb8 	bl	8019d14 <memcpy>
    remaining_len = (u16_t)(remaining_len - first_copy_len);
 800efa4:	8b7a      	ldrh	r2, [r7, #26]
 800efa6:	8a7b      	ldrh	r3, [r7, #18]
 800efa8:	1ad3      	subs	r3, r2, r3
 800efaa:	837b      	strh	r3, [r7, #26]
    src_ptr += first_copy_len;
 800efac:	8a7b      	ldrh	r3, [r7, #18]
 800efae:	697a      	ldr	r2, [r7, #20]
 800efb0:	4413      	add	r3, r2
 800efb2:	617b      	str	r3, [r7, #20]
    if (remaining_len > 0) {
 800efb4:	8b7b      	ldrh	r3, [r7, #26]
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	d008      	beq.n	800efcc <pbuf_take_at+0xb8>
      return pbuf_take(q->next, src_ptr, remaining_len);
 800efba:	69fb      	ldr	r3, [r7, #28]
 800efbc:	681b      	ldr	r3, [r3, #0]
 800efbe:	8b7a      	ldrh	r2, [r7, #26]
 800efc0:	6979      	ldr	r1, [r7, #20]
 800efc2:	4618      	mov	r0, r3
 800efc4:	f7ff ff14 	bl	800edf0 <pbuf_take>
 800efc8:	4603      	mov	r3, r0
 800efca:	e003      	b.n	800efd4 <pbuf_take_at+0xc0>
    }
    return ERR_OK;
 800efcc:	2300      	movs	r3, #0
 800efce:	e001      	b.n	800efd4 <pbuf_take_at+0xc0>
  }
  return ERR_MEM;
 800efd0:	f04f 33ff 	mov.w	r3, #4294967295
}
 800efd4:	4618      	mov	r0, r3
 800efd6:	3720      	adds	r7, #32
 800efd8:	46bd      	mov	sp, r7
 800efda:	bd80      	pop	{r7, pc}
 800efdc:	0801c1b4 	.word	0x0801c1b4
 800efe0:	0801c610 	.word	0x0801c610
 800efe4:	0801c214 	.word	0x0801c214

0800efe8 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800efe8:	b580      	push	{r7, lr}
 800efea:	b084      	sub	sp, #16
 800efec:	af00      	add	r7, sp, #0
 800efee:	4603      	mov	r3, r0
 800eff0:	603a      	str	r2, [r7, #0]
 800eff2:	71fb      	strb	r3, [r7, #7]
 800eff4:	460b      	mov	r3, r1
 800eff6:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800eff8:	683b      	ldr	r3, [r7, #0]
 800effa:	8919      	ldrh	r1, [r3, #8]
 800effc:	88ba      	ldrh	r2, [r7, #4]
 800effe:	79fb      	ldrb	r3, [r7, #7]
 800f000:	4618      	mov	r0, r3
 800f002:	f7ff f959 	bl	800e2b8 <pbuf_alloc>
 800f006:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800f008:	68fb      	ldr	r3, [r7, #12]
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	d101      	bne.n	800f012 <pbuf_clone+0x2a>
    return NULL;
 800f00e:	2300      	movs	r3, #0
 800f010:	e011      	b.n	800f036 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800f012:	6839      	ldr	r1, [r7, #0]
 800f014:	68f8      	ldr	r0, [r7, #12]
 800f016:	f7ff fd6b 	bl	800eaf0 <pbuf_copy>
 800f01a:	4603      	mov	r3, r0
 800f01c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800f01e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800f022:	2b00      	cmp	r3, #0
 800f024:	d006      	beq.n	800f034 <pbuf_clone+0x4c>
 800f026:	4b06      	ldr	r3, [pc, #24]	; (800f040 <pbuf_clone+0x58>)
 800f028:	f240 5224 	movw	r2, #1316	; 0x524
 800f02c:	4905      	ldr	r1, [pc, #20]	; (800f044 <pbuf_clone+0x5c>)
 800f02e:	4806      	ldr	r0, [pc, #24]	; (800f048 <pbuf_clone+0x60>)
 800f030:	f00a ff66 	bl	8019f00 <iprintf>
  return q;
 800f034:	68fb      	ldr	r3, [r7, #12]
}
 800f036:	4618      	mov	r0, r3
 800f038:	3710      	adds	r7, #16
 800f03a:	46bd      	mov	sp, r7
 800f03c:	bd80      	pop	{r7, pc}
 800f03e:	bf00      	nop
 800f040:	0801c1b4 	.word	0x0801c1b4
 800f044:	0801c628 	.word	0x0801c628
 800f048:	0801c214 	.word	0x0801c214

0800f04c <pbuf_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p OR ZERO IF 'offset' >= p->tot_len
 */
u8_t
pbuf_get_at(const struct pbuf *p, u16_t offset)
{
 800f04c:	b580      	push	{r7, lr}
 800f04e:	b084      	sub	sp, #16
 800f050:	af00      	add	r7, sp, #0
 800f052:	6078      	str	r0, [r7, #4]
 800f054:	460b      	mov	r3, r1
 800f056:	807b      	strh	r3, [r7, #2]
  int ret = pbuf_try_get_at(p, offset);
 800f058:	887b      	ldrh	r3, [r7, #2]
 800f05a:	4619      	mov	r1, r3
 800f05c:	6878      	ldr	r0, [r7, #4]
 800f05e:	f000 f80c 	bl	800f07a <pbuf_try_get_at>
 800f062:	60f8      	str	r0, [r7, #12]
  if (ret >= 0) {
 800f064:	68fb      	ldr	r3, [r7, #12]
 800f066:	2b00      	cmp	r3, #0
 800f068:	db02      	blt.n	800f070 <pbuf_get_at+0x24>
    return (u8_t)ret;
 800f06a:	68fb      	ldr	r3, [r7, #12]
 800f06c:	b2db      	uxtb	r3, r3
 800f06e:	e000      	b.n	800f072 <pbuf_get_at+0x26>
  }
  return 0;
 800f070:	2300      	movs	r3, #0
}
 800f072:	4618      	mov	r0, r3
 800f074:	3710      	adds	r7, #16
 800f076:	46bd      	mov	sp, r7
 800f078:	bd80      	pop	{r7, pc}

0800f07a <pbuf_try_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p [0..0xFF] OR negative if 'offset' >= p->tot_len
 */
int
pbuf_try_get_at(const struct pbuf *p, u16_t offset)
{
 800f07a:	b580      	push	{r7, lr}
 800f07c:	b084      	sub	sp, #16
 800f07e:	af00      	add	r7, sp, #0
 800f080:	6078      	str	r0, [r7, #4]
 800f082:	460b      	mov	r3, r1
 800f084:	807b      	strh	r3, [r7, #2]
  u16_t q_idx;
  const struct pbuf *q = pbuf_skip_const(p, offset, &q_idx);
 800f086:	f107 020a 	add.w	r2, r7, #10
 800f08a:	887b      	ldrh	r3, [r7, #2]
 800f08c:	4619      	mov	r1, r3
 800f08e:	6878      	ldr	r0, [r7, #4]
 800f090:	f7ff fe72 	bl	800ed78 <pbuf_skip_const>
 800f094:	60f8      	str	r0, [r7, #12]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 800f096:	68fb      	ldr	r3, [r7, #12]
 800f098:	2b00      	cmp	r3, #0
 800f09a:	d00a      	beq.n	800f0b2 <pbuf_try_get_at+0x38>
 800f09c:	68fb      	ldr	r3, [r7, #12]
 800f09e:	895a      	ldrh	r2, [r3, #10]
 800f0a0:	897b      	ldrh	r3, [r7, #10]
 800f0a2:	429a      	cmp	r2, r3
 800f0a4:	d905      	bls.n	800f0b2 <pbuf_try_get_at+0x38>
    return ((u8_t *)q->payload)[q_idx];
 800f0a6:	68fb      	ldr	r3, [r7, #12]
 800f0a8:	685b      	ldr	r3, [r3, #4]
 800f0aa:	897a      	ldrh	r2, [r7, #10]
 800f0ac:	4413      	add	r3, r2
 800f0ae:	781b      	ldrb	r3, [r3, #0]
 800f0b0:	e001      	b.n	800f0b6 <pbuf_try_get_at+0x3c>
  }
  return -1;
 800f0b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 800f0b6:	4618      	mov	r0, r3
 800f0b8:	3710      	adds	r7, #16
 800f0ba:	46bd      	mov	sp, r7
 800f0bc:	bd80      	pop	{r7, pc}

0800f0be <pbuf_put_at>:
 * @param offset offset into p of the byte to write
 * @param data byte to write at an offset into p
 */
void
pbuf_put_at(struct pbuf *p, u16_t offset, u8_t data)
{
 800f0be:	b580      	push	{r7, lr}
 800f0c0:	b084      	sub	sp, #16
 800f0c2:	af00      	add	r7, sp, #0
 800f0c4:	6078      	str	r0, [r7, #4]
 800f0c6:	460b      	mov	r3, r1
 800f0c8:	807b      	strh	r3, [r7, #2]
 800f0ca:	4613      	mov	r3, r2
 800f0cc:	707b      	strb	r3, [r7, #1]
  u16_t q_idx;
  struct pbuf *q = pbuf_skip(p, offset, &q_idx);
 800f0ce:	f107 020a 	add.w	r2, r7, #10
 800f0d2:	887b      	ldrh	r3, [r7, #2]
 800f0d4:	4619      	mov	r1, r3
 800f0d6:	6878      	ldr	r0, [r7, #4]
 800f0d8:	f7ff fe77 	bl	800edca <pbuf_skip>
 800f0dc:	60f8      	str	r0, [r7, #12]

  /* write requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 800f0de:	68fb      	ldr	r3, [r7, #12]
 800f0e0:	2b00      	cmp	r3, #0
 800f0e2:	d00a      	beq.n	800f0fa <pbuf_put_at+0x3c>
 800f0e4:	68fb      	ldr	r3, [r7, #12]
 800f0e6:	895a      	ldrh	r2, [r3, #10]
 800f0e8:	897b      	ldrh	r3, [r7, #10]
 800f0ea:	429a      	cmp	r2, r3
 800f0ec:	d905      	bls.n	800f0fa <pbuf_put_at+0x3c>
    ((u8_t *)q->payload)[q_idx] = data;
 800f0ee:	68fb      	ldr	r3, [r7, #12]
 800f0f0:	685b      	ldr	r3, [r3, #4]
 800f0f2:	897a      	ldrh	r2, [r7, #10]
 800f0f4:	4413      	add	r3, r2
 800f0f6:	787a      	ldrb	r2, [r7, #1]
 800f0f8:	701a      	strb	r2, [r3, #0]
  }
}
 800f0fa:	bf00      	nop
 800f0fc:	3710      	adds	r7, #16
 800f0fe:	46bd      	mov	sp, r7
 800f100:	bd80      	pop	{r7, pc}
	...

0800f104 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800f104:	b580      	push	{r7, lr}
 800f106:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800f108:	f00a ff88 	bl	801a01c <rand>
 800f10c:	4603      	mov	r3, r0
 800f10e:	b29b      	uxth	r3, r3
 800f110:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800f114:	b29b      	uxth	r3, r3
 800f116:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800f11a:	b29a      	uxth	r2, r3
 800f11c:	4b01      	ldr	r3, [pc, #4]	; (800f124 <tcp_init+0x20>)
 800f11e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800f120:	bf00      	nop
 800f122:	bd80      	pop	{r7, pc}
 800f124:	200000b8 	.word	0x200000b8

0800f128 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800f128:	b580      	push	{r7, lr}
 800f12a:	b082      	sub	sp, #8
 800f12c:	af00      	add	r7, sp, #0
 800f12e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	7d1b      	ldrb	r3, [r3, #20]
 800f134:	2b01      	cmp	r3, #1
 800f136:	d105      	bne.n	800f144 <tcp_free+0x1c>
 800f138:	4b06      	ldr	r3, [pc, #24]	; (800f154 <tcp_free+0x2c>)
 800f13a:	22d4      	movs	r2, #212	; 0xd4
 800f13c:	4906      	ldr	r1, [pc, #24]	; (800f158 <tcp_free+0x30>)
 800f13e:	4807      	ldr	r0, [pc, #28]	; (800f15c <tcp_free+0x34>)
 800f140:	f00a fede 	bl	8019f00 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800f144:	6879      	ldr	r1, [r7, #4]
 800f146:	2001      	movs	r0, #1
 800f148:	f7fe fcfc 	bl	800db44 <memp_free>
}
 800f14c:	bf00      	nop
 800f14e:	3708      	adds	r7, #8
 800f150:	46bd      	mov	sp, r7
 800f152:	bd80      	pop	{r7, pc}
 800f154:	0801c6b4 	.word	0x0801c6b4
 800f158:	0801c6e4 	.word	0x0801c6e4
 800f15c:	0801c6f8 	.word	0x0801c6f8

0800f160 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800f160:	b580      	push	{r7, lr}
 800f162:	b082      	sub	sp, #8
 800f164:	af00      	add	r7, sp, #0
 800f166:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	7d1b      	ldrb	r3, [r3, #20]
 800f16c:	2b01      	cmp	r3, #1
 800f16e:	d105      	bne.n	800f17c <tcp_free_listen+0x1c>
 800f170:	4b06      	ldr	r3, [pc, #24]	; (800f18c <tcp_free_listen+0x2c>)
 800f172:	22df      	movs	r2, #223	; 0xdf
 800f174:	4906      	ldr	r1, [pc, #24]	; (800f190 <tcp_free_listen+0x30>)
 800f176:	4807      	ldr	r0, [pc, #28]	; (800f194 <tcp_free_listen+0x34>)
 800f178:	f00a fec2 	bl	8019f00 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800f17c:	6879      	ldr	r1, [r7, #4]
 800f17e:	2002      	movs	r0, #2
 800f180:	f7fe fce0 	bl	800db44 <memp_free>
}
 800f184:	bf00      	nop
 800f186:	3708      	adds	r7, #8
 800f188:	46bd      	mov	sp, r7
 800f18a:	bd80      	pop	{r7, pc}
 800f18c:	0801c6b4 	.word	0x0801c6b4
 800f190:	0801c720 	.word	0x0801c720
 800f194:	0801c6f8 	.word	0x0801c6f8

0800f198 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800f198:	b580      	push	{r7, lr}
 800f19a:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800f19c:	f000 fea4 	bl	800fee8 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800f1a0:	4b07      	ldr	r3, [pc, #28]	; (800f1c0 <tcp_tmr+0x28>)
 800f1a2:	781b      	ldrb	r3, [r3, #0]
 800f1a4:	3301      	adds	r3, #1
 800f1a6:	b2da      	uxtb	r2, r3
 800f1a8:	4b05      	ldr	r3, [pc, #20]	; (800f1c0 <tcp_tmr+0x28>)
 800f1aa:	701a      	strb	r2, [r3, #0]
 800f1ac:	4b04      	ldr	r3, [pc, #16]	; (800f1c0 <tcp_tmr+0x28>)
 800f1ae:	781b      	ldrb	r3, [r3, #0]
 800f1b0:	f003 0301 	and.w	r3, r3, #1
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	d001      	beq.n	800f1bc <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800f1b8:	f000 fb56 	bl	800f868 <tcp_slowtmr>
  }
}
 800f1bc:	bf00      	nop
 800f1be:	bd80      	pop	{r7, pc}
 800f1c0:	20013ad9 	.word	0x20013ad9

0800f1c4 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800f1c4:	b580      	push	{r7, lr}
 800f1c6:	b084      	sub	sp, #16
 800f1c8:	af00      	add	r7, sp, #0
 800f1ca:	6078      	str	r0, [r7, #4]
 800f1cc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800f1ce:	683b      	ldr	r3, [r7, #0]
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	d105      	bne.n	800f1e0 <tcp_remove_listener+0x1c>
 800f1d4:	4b0d      	ldr	r3, [pc, #52]	; (800f20c <tcp_remove_listener+0x48>)
 800f1d6:	22ff      	movs	r2, #255	; 0xff
 800f1d8:	490d      	ldr	r1, [pc, #52]	; (800f210 <tcp_remove_listener+0x4c>)
 800f1da:	480e      	ldr	r0, [pc, #56]	; (800f214 <tcp_remove_listener+0x50>)
 800f1dc:	f00a fe90 	bl	8019f00 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	60fb      	str	r3, [r7, #12]
 800f1e4:	e00a      	b.n	800f1fc <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800f1e6:	68fb      	ldr	r3, [r7, #12]
 800f1e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f1ea:	683a      	ldr	r2, [r7, #0]
 800f1ec:	429a      	cmp	r2, r3
 800f1ee:	d102      	bne.n	800f1f6 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800f1f0:	68fb      	ldr	r3, [r7, #12]
 800f1f2:	2200      	movs	r2, #0
 800f1f4:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800f1f6:	68fb      	ldr	r3, [r7, #12]
 800f1f8:	68db      	ldr	r3, [r3, #12]
 800f1fa:	60fb      	str	r3, [r7, #12]
 800f1fc:	68fb      	ldr	r3, [r7, #12]
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	d1f1      	bne.n	800f1e6 <tcp_remove_listener+0x22>
    }
  }
}
 800f202:	bf00      	nop
 800f204:	bf00      	nop
 800f206:	3710      	adds	r7, #16
 800f208:	46bd      	mov	sp, r7
 800f20a:	bd80      	pop	{r7, pc}
 800f20c:	0801c6b4 	.word	0x0801c6b4
 800f210:	0801c73c 	.word	0x0801c73c
 800f214:	0801c6f8 	.word	0x0801c6f8

0800f218 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800f218:	b580      	push	{r7, lr}
 800f21a:	b084      	sub	sp, #16
 800f21c:	af00      	add	r7, sp, #0
 800f21e:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	2b00      	cmp	r3, #0
 800f224:	d106      	bne.n	800f234 <tcp_listen_closed+0x1c>
 800f226:	4b14      	ldr	r3, [pc, #80]	; (800f278 <tcp_listen_closed+0x60>)
 800f228:	f240 1211 	movw	r2, #273	; 0x111
 800f22c:	4913      	ldr	r1, [pc, #76]	; (800f27c <tcp_listen_closed+0x64>)
 800f22e:	4814      	ldr	r0, [pc, #80]	; (800f280 <tcp_listen_closed+0x68>)
 800f230:	f00a fe66 	bl	8019f00 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	7d1b      	ldrb	r3, [r3, #20]
 800f238:	2b01      	cmp	r3, #1
 800f23a:	d006      	beq.n	800f24a <tcp_listen_closed+0x32>
 800f23c:	4b0e      	ldr	r3, [pc, #56]	; (800f278 <tcp_listen_closed+0x60>)
 800f23e:	f44f 7289 	mov.w	r2, #274	; 0x112
 800f242:	4910      	ldr	r1, [pc, #64]	; (800f284 <tcp_listen_closed+0x6c>)
 800f244:	480e      	ldr	r0, [pc, #56]	; (800f280 <tcp_listen_closed+0x68>)
 800f246:	f00a fe5b 	bl	8019f00 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800f24a:	2301      	movs	r3, #1
 800f24c:	60fb      	str	r3, [r7, #12]
 800f24e:	e00b      	b.n	800f268 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800f250:	4a0d      	ldr	r2, [pc, #52]	; (800f288 <tcp_listen_closed+0x70>)
 800f252:	68fb      	ldr	r3, [r7, #12]
 800f254:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f258:	681b      	ldr	r3, [r3, #0]
 800f25a:	6879      	ldr	r1, [r7, #4]
 800f25c:	4618      	mov	r0, r3
 800f25e:	f7ff ffb1 	bl	800f1c4 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800f262:	68fb      	ldr	r3, [r7, #12]
 800f264:	3301      	adds	r3, #1
 800f266:	60fb      	str	r3, [r7, #12]
 800f268:	68fb      	ldr	r3, [r7, #12]
 800f26a:	2b03      	cmp	r3, #3
 800f26c:	d9f0      	bls.n	800f250 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800f26e:	bf00      	nop
 800f270:	bf00      	nop
 800f272:	3710      	adds	r7, #16
 800f274:	46bd      	mov	sp, r7
 800f276:	bd80      	pop	{r7, pc}
 800f278:	0801c6b4 	.word	0x0801c6b4
 800f27c:	0801c764 	.word	0x0801c764
 800f280:	0801c6f8 	.word	0x0801c6f8
 800f284:	0801c770 	.word	0x0801c770
 800f288:	0806a3f0 	.word	0x0806a3f0

0800f28c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800f28c:	b5b0      	push	{r4, r5, r7, lr}
 800f28e:	b088      	sub	sp, #32
 800f290:	af04      	add	r7, sp, #16
 800f292:	6078      	str	r0, [r7, #4]
 800f294:	460b      	mov	r3, r1
 800f296:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	d106      	bne.n	800f2ac <tcp_close_shutdown+0x20>
 800f29e:	4b63      	ldr	r3, [pc, #396]	; (800f42c <tcp_close_shutdown+0x1a0>)
 800f2a0:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800f2a4:	4962      	ldr	r1, [pc, #392]	; (800f430 <tcp_close_shutdown+0x1a4>)
 800f2a6:	4863      	ldr	r0, [pc, #396]	; (800f434 <tcp_close_shutdown+0x1a8>)
 800f2a8:	f00a fe2a 	bl	8019f00 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800f2ac:	78fb      	ldrb	r3, [r7, #3]
 800f2ae:	2b00      	cmp	r3, #0
 800f2b0:	d067      	beq.n	800f382 <tcp_close_shutdown+0xf6>
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	7d1b      	ldrb	r3, [r3, #20]
 800f2b6:	2b04      	cmp	r3, #4
 800f2b8:	d003      	beq.n	800f2c2 <tcp_close_shutdown+0x36>
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	7d1b      	ldrb	r3, [r3, #20]
 800f2be:	2b07      	cmp	r3, #7
 800f2c0:	d15f      	bne.n	800f382 <tcp_close_shutdown+0xf6>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d105      	bne.n	800f2d6 <tcp_close_shutdown+0x4a>
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f2ce:	f642 52a0 	movw	r2, #11680	; 0x2da0
 800f2d2:	4293      	cmp	r3, r2
 800f2d4:	d055      	beq.n	800f382 <tcp_close_shutdown+0xf6>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	8b5b      	ldrh	r3, [r3, #26]
 800f2da:	f003 0310 	and.w	r3, r3, #16
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	d106      	bne.n	800f2f0 <tcp_close_shutdown+0x64>
 800f2e2:	4b52      	ldr	r3, [pc, #328]	; (800f42c <tcp_close_shutdown+0x1a0>)
 800f2e4:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800f2e8:	4953      	ldr	r1, [pc, #332]	; (800f438 <tcp_close_shutdown+0x1ac>)
 800f2ea:	4852      	ldr	r0, [pc, #328]	; (800f434 <tcp_close_shutdown+0x1a8>)
 800f2ec:	f00a fe08 	bl	8019f00 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800f2f8:	687d      	ldr	r5, [r7, #4]
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	3304      	adds	r3, #4
 800f2fe:	687a      	ldr	r2, [r7, #4]
 800f300:	8ad2      	ldrh	r2, [r2, #22]
 800f302:	6879      	ldr	r1, [r7, #4]
 800f304:	8b09      	ldrh	r1, [r1, #24]
 800f306:	9102      	str	r1, [sp, #8]
 800f308:	9201      	str	r2, [sp, #4]
 800f30a:	9300      	str	r3, [sp, #0]
 800f30c:	462b      	mov	r3, r5
 800f30e:	4622      	mov	r2, r4
 800f310:	4601      	mov	r1, r0
 800f312:	6878      	ldr	r0, [r7, #4]
 800f314:	f004 fedc 	bl	80140d0 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800f318:	6878      	ldr	r0, [r7, #4]
 800f31a:	f001 f8c9 	bl	80104b0 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800f31e:	4b47      	ldr	r3, [pc, #284]	; (800f43c <tcp_close_shutdown+0x1b0>)
 800f320:	681b      	ldr	r3, [r3, #0]
 800f322:	687a      	ldr	r2, [r7, #4]
 800f324:	429a      	cmp	r2, r3
 800f326:	d105      	bne.n	800f334 <tcp_close_shutdown+0xa8>
 800f328:	4b44      	ldr	r3, [pc, #272]	; (800f43c <tcp_close_shutdown+0x1b0>)
 800f32a:	681b      	ldr	r3, [r3, #0]
 800f32c:	68db      	ldr	r3, [r3, #12]
 800f32e:	4a43      	ldr	r2, [pc, #268]	; (800f43c <tcp_close_shutdown+0x1b0>)
 800f330:	6013      	str	r3, [r2, #0]
 800f332:	e013      	b.n	800f35c <tcp_close_shutdown+0xd0>
 800f334:	4b41      	ldr	r3, [pc, #260]	; (800f43c <tcp_close_shutdown+0x1b0>)
 800f336:	681b      	ldr	r3, [r3, #0]
 800f338:	60fb      	str	r3, [r7, #12]
 800f33a:	e00c      	b.n	800f356 <tcp_close_shutdown+0xca>
 800f33c:	68fb      	ldr	r3, [r7, #12]
 800f33e:	68db      	ldr	r3, [r3, #12]
 800f340:	687a      	ldr	r2, [r7, #4]
 800f342:	429a      	cmp	r2, r3
 800f344:	d104      	bne.n	800f350 <tcp_close_shutdown+0xc4>
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	68da      	ldr	r2, [r3, #12]
 800f34a:	68fb      	ldr	r3, [r7, #12]
 800f34c:	60da      	str	r2, [r3, #12]
 800f34e:	e005      	b.n	800f35c <tcp_close_shutdown+0xd0>
 800f350:	68fb      	ldr	r3, [r7, #12]
 800f352:	68db      	ldr	r3, [r3, #12]
 800f354:	60fb      	str	r3, [r7, #12]
 800f356:	68fb      	ldr	r3, [r7, #12]
 800f358:	2b00      	cmp	r3, #0
 800f35a:	d1ef      	bne.n	800f33c <tcp_close_shutdown+0xb0>
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	2200      	movs	r2, #0
 800f360:	60da      	str	r2, [r3, #12]
 800f362:	4b37      	ldr	r3, [pc, #220]	; (800f440 <tcp_close_shutdown+0x1b4>)
 800f364:	2201      	movs	r2, #1
 800f366:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800f368:	4b36      	ldr	r3, [pc, #216]	; (800f444 <tcp_close_shutdown+0x1b8>)
 800f36a:	681b      	ldr	r3, [r3, #0]
 800f36c:	687a      	ldr	r2, [r7, #4]
 800f36e:	429a      	cmp	r2, r3
 800f370:	d102      	bne.n	800f378 <tcp_close_shutdown+0xec>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800f372:	f003 fd75 	bl	8012e60 <tcp_trigger_input_pcb_close>
 800f376:	e002      	b.n	800f37e <tcp_close_shutdown+0xf2>
      } else {
        tcp_free(pcb);
 800f378:	6878      	ldr	r0, [r7, #4]
 800f37a:	f7ff fed5 	bl	800f128 <tcp_free>
      }
      return ERR_OK;
 800f37e:	2300      	movs	r3, #0
 800f380:	e050      	b.n	800f424 <tcp_close_shutdown+0x198>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	7d1b      	ldrb	r3, [r3, #20]
 800f386:	2b02      	cmp	r3, #2
 800f388:	d03b      	beq.n	800f402 <tcp_close_shutdown+0x176>
 800f38a:	2b02      	cmp	r3, #2
 800f38c:	dc44      	bgt.n	800f418 <tcp_close_shutdown+0x18c>
 800f38e:	2b00      	cmp	r3, #0
 800f390:	d002      	beq.n	800f398 <tcp_close_shutdown+0x10c>
 800f392:	2b01      	cmp	r3, #1
 800f394:	d02a      	beq.n	800f3ec <tcp_close_shutdown+0x160>
 800f396:	e03f      	b.n	800f418 <tcp_close_shutdown+0x18c>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	8adb      	ldrh	r3, [r3, #22]
 800f39c:	2b00      	cmp	r3, #0
 800f39e:	d021      	beq.n	800f3e4 <tcp_close_shutdown+0x158>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800f3a0:	4b29      	ldr	r3, [pc, #164]	; (800f448 <tcp_close_shutdown+0x1bc>)
 800f3a2:	681b      	ldr	r3, [r3, #0]
 800f3a4:	687a      	ldr	r2, [r7, #4]
 800f3a6:	429a      	cmp	r2, r3
 800f3a8:	d105      	bne.n	800f3b6 <tcp_close_shutdown+0x12a>
 800f3aa:	4b27      	ldr	r3, [pc, #156]	; (800f448 <tcp_close_shutdown+0x1bc>)
 800f3ac:	681b      	ldr	r3, [r3, #0]
 800f3ae:	68db      	ldr	r3, [r3, #12]
 800f3b0:	4a25      	ldr	r2, [pc, #148]	; (800f448 <tcp_close_shutdown+0x1bc>)
 800f3b2:	6013      	str	r3, [r2, #0]
 800f3b4:	e013      	b.n	800f3de <tcp_close_shutdown+0x152>
 800f3b6:	4b24      	ldr	r3, [pc, #144]	; (800f448 <tcp_close_shutdown+0x1bc>)
 800f3b8:	681b      	ldr	r3, [r3, #0]
 800f3ba:	60bb      	str	r3, [r7, #8]
 800f3bc:	e00c      	b.n	800f3d8 <tcp_close_shutdown+0x14c>
 800f3be:	68bb      	ldr	r3, [r7, #8]
 800f3c0:	68db      	ldr	r3, [r3, #12]
 800f3c2:	687a      	ldr	r2, [r7, #4]
 800f3c4:	429a      	cmp	r2, r3
 800f3c6:	d104      	bne.n	800f3d2 <tcp_close_shutdown+0x146>
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	68da      	ldr	r2, [r3, #12]
 800f3cc:	68bb      	ldr	r3, [r7, #8]
 800f3ce:	60da      	str	r2, [r3, #12]
 800f3d0:	e005      	b.n	800f3de <tcp_close_shutdown+0x152>
 800f3d2:	68bb      	ldr	r3, [r7, #8]
 800f3d4:	68db      	ldr	r3, [r3, #12]
 800f3d6:	60bb      	str	r3, [r7, #8]
 800f3d8:	68bb      	ldr	r3, [r7, #8]
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	d1ef      	bne.n	800f3be <tcp_close_shutdown+0x132>
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	2200      	movs	r2, #0
 800f3e2:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800f3e4:	6878      	ldr	r0, [r7, #4]
 800f3e6:	f7ff fe9f 	bl	800f128 <tcp_free>
      break;
 800f3ea:	e01a      	b.n	800f422 <tcp_close_shutdown+0x196>
    case LISTEN:
      tcp_listen_closed(pcb);
 800f3ec:	6878      	ldr	r0, [r7, #4]
 800f3ee:	f7ff ff13 	bl	800f218 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800f3f2:	6879      	ldr	r1, [r7, #4]
 800f3f4:	4815      	ldr	r0, [pc, #84]	; (800f44c <tcp_close_shutdown+0x1c0>)
 800f3f6:	f001 f8ab 	bl	8010550 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800f3fa:	6878      	ldr	r0, [r7, #4]
 800f3fc:	f7ff feb0 	bl	800f160 <tcp_free_listen>
      break;
 800f400:	e00f      	b.n	800f422 <tcp_close_shutdown+0x196>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800f402:	6879      	ldr	r1, [r7, #4]
 800f404:	480d      	ldr	r0, [pc, #52]	; (800f43c <tcp_close_shutdown+0x1b0>)
 800f406:	f001 f8a3 	bl	8010550 <tcp_pcb_remove>
 800f40a:	4b0d      	ldr	r3, [pc, #52]	; (800f440 <tcp_close_shutdown+0x1b4>)
 800f40c:	2201      	movs	r2, #1
 800f40e:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800f410:	6878      	ldr	r0, [r7, #4]
 800f412:	f7ff fe89 	bl	800f128 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800f416:	e004      	b.n	800f422 <tcp_close_shutdown+0x196>
    default:
      return tcp_close_shutdown_fin(pcb);
 800f418:	6878      	ldr	r0, [r7, #4]
 800f41a:	f000 f819 	bl	800f450 <tcp_close_shutdown_fin>
 800f41e:	4603      	mov	r3, r0
 800f420:	e000      	b.n	800f424 <tcp_close_shutdown+0x198>
  }
  return ERR_OK;
 800f422:	2300      	movs	r3, #0
}
 800f424:	4618      	mov	r0, r3
 800f426:	3710      	adds	r7, #16
 800f428:	46bd      	mov	sp, r7
 800f42a:	bdb0      	pop	{r4, r5, r7, pc}
 800f42c:	0801c6b4 	.word	0x0801c6b4
 800f430:	0801c788 	.word	0x0801c788
 800f434:	0801c6f8 	.word	0x0801c6f8
 800f438:	0801c7a8 	.word	0x0801c7a8
 800f43c:	20013ad0 	.word	0x20013ad0
 800f440:	20013ad8 	.word	0x20013ad8
 800f444:	20013b14 	.word	0x20013b14
 800f448:	20013ac8 	.word	0x20013ac8
 800f44c:	20013acc 	.word	0x20013acc

0800f450 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800f450:	b580      	push	{r7, lr}
 800f452:	b084      	sub	sp, #16
 800f454:	af00      	add	r7, sp, #0
 800f456:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	2b00      	cmp	r3, #0
 800f45c:	d106      	bne.n	800f46c <tcp_close_shutdown_fin+0x1c>
 800f45e:	4b2e      	ldr	r3, [pc, #184]	; (800f518 <tcp_close_shutdown_fin+0xc8>)
 800f460:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800f464:	492d      	ldr	r1, [pc, #180]	; (800f51c <tcp_close_shutdown_fin+0xcc>)
 800f466:	482e      	ldr	r0, [pc, #184]	; (800f520 <tcp_close_shutdown_fin+0xd0>)
 800f468:	f00a fd4a 	bl	8019f00 <iprintf>

  switch (pcb->state) {
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	7d1b      	ldrb	r3, [r3, #20]
 800f470:	2b07      	cmp	r3, #7
 800f472:	d020      	beq.n	800f4b6 <tcp_close_shutdown_fin+0x66>
 800f474:	2b07      	cmp	r3, #7
 800f476:	dc2b      	bgt.n	800f4d0 <tcp_close_shutdown_fin+0x80>
 800f478:	2b03      	cmp	r3, #3
 800f47a:	d002      	beq.n	800f482 <tcp_close_shutdown_fin+0x32>
 800f47c:	2b04      	cmp	r3, #4
 800f47e:	d00d      	beq.n	800f49c <tcp_close_shutdown_fin+0x4c>
 800f480:	e026      	b.n	800f4d0 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800f482:	6878      	ldr	r0, [r7, #4]
 800f484:	f003 ff04 	bl	8013290 <tcp_send_fin>
 800f488:	4603      	mov	r3, r0
 800f48a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800f48c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f490:	2b00      	cmp	r3, #0
 800f492:	d11f      	bne.n	800f4d4 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	2205      	movs	r2, #5
 800f498:	751a      	strb	r2, [r3, #20]
      }
      break;
 800f49a:	e01b      	b.n	800f4d4 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800f49c:	6878      	ldr	r0, [r7, #4]
 800f49e:	f003 fef7 	bl	8013290 <tcp_send_fin>
 800f4a2:	4603      	mov	r3, r0
 800f4a4:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800f4a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f4aa:	2b00      	cmp	r3, #0
 800f4ac:	d114      	bne.n	800f4d8 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	2205      	movs	r2, #5
 800f4b2:	751a      	strb	r2, [r3, #20]
      }
      break;
 800f4b4:	e010      	b.n	800f4d8 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800f4b6:	6878      	ldr	r0, [r7, #4]
 800f4b8:	f003 feea 	bl	8013290 <tcp_send_fin>
 800f4bc:	4603      	mov	r3, r0
 800f4be:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800f4c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f4c4:	2b00      	cmp	r3, #0
 800f4c6:	d109      	bne.n	800f4dc <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	2209      	movs	r2, #9
 800f4cc:	751a      	strb	r2, [r3, #20]
      }
      break;
 800f4ce:	e005      	b.n	800f4dc <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800f4d0:	2300      	movs	r3, #0
 800f4d2:	e01c      	b.n	800f50e <tcp_close_shutdown_fin+0xbe>
      break;
 800f4d4:	bf00      	nop
 800f4d6:	e002      	b.n	800f4de <tcp_close_shutdown_fin+0x8e>
      break;
 800f4d8:	bf00      	nop
 800f4da:	e000      	b.n	800f4de <tcp_close_shutdown_fin+0x8e>
      break;
 800f4dc:	bf00      	nop
  }

  if (err == ERR_OK) {
 800f4de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f4e2:	2b00      	cmp	r3, #0
 800f4e4:	d103      	bne.n	800f4ee <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800f4e6:	6878      	ldr	r0, [r7, #4]
 800f4e8:	f004 f810 	bl	801350c <tcp_output>
 800f4ec:	e00d      	b.n	800f50a <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800f4ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f4f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f4f6:	d108      	bne.n	800f50a <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	8b5b      	ldrh	r3, [r3, #26]
 800f4fc:	f043 0308 	orr.w	r3, r3, #8
 800f500:	b29a      	uxth	r2, r3
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800f506:	2300      	movs	r3, #0
 800f508:	e001      	b.n	800f50e <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800f50a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f50e:	4618      	mov	r0, r3
 800f510:	3710      	adds	r7, #16
 800f512:	46bd      	mov	sp, r7
 800f514:	bd80      	pop	{r7, pc}
 800f516:	bf00      	nop
 800f518:	0801c6b4 	.word	0x0801c6b4
 800f51c:	0801c764 	.word	0x0801c764
 800f520:	0801c6f8 	.word	0x0801c6f8

0800f524 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800f524:	b580      	push	{r7, lr}
 800f526:	b082      	sub	sp, #8
 800f528:	af00      	add	r7, sp, #0
 800f52a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	2b00      	cmp	r3, #0
 800f530:	d109      	bne.n	800f546 <tcp_close+0x22>
 800f532:	4b0f      	ldr	r3, [pc, #60]	; (800f570 <tcp_close+0x4c>)
 800f534:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800f538:	490e      	ldr	r1, [pc, #56]	; (800f574 <tcp_close+0x50>)
 800f53a:	480f      	ldr	r0, [pc, #60]	; (800f578 <tcp_close+0x54>)
 800f53c:	f00a fce0 	bl	8019f00 <iprintf>
 800f540:	f06f 030f 	mvn.w	r3, #15
 800f544:	e00f      	b.n	800f566 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	7d1b      	ldrb	r3, [r3, #20]
 800f54a:	2b01      	cmp	r3, #1
 800f54c:	d006      	beq.n	800f55c <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	8b5b      	ldrh	r3, [r3, #26]
 800f552:	f043 0310 	orr.w	r3, r3, #16
 800f556:	b29a      	uxth	r2, r3
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800f55c:	2101      	movs	r1, #1
 800f55e:	6878      	ldr	r0, [r7, #4]
 800f560:	f7ff fe94 	bl	800f28c <tcp_close_shutdown>
 800f564:	4603      	mov	r3, r0
}
 800f566:	4618      	mov	r0, r3
 800f568:	3708      	adds	r7, #8
 800f56a:	46bd      	mov	sp, r7
 800f56c:	bd80      	pop	{r7, pc}
 800f56e:	bf00      	nop
 800f570:	0801c6b4 	.word	0x0801c6b4
 800f574:	0801c7c4 	.word	0x0801c7c4
 800f578:	0801c6f8 	.word	0x0801c6f8

0800f57c <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800f57c:	b580      	push	{r7, lr}
 800f57e:	b08e      	sub	sp, #56	; 0x38
 800f580:	af04      	add	r7, sp, #16
 800f582:	6078      	str	r0, [r7, #4]
 800f584:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	2b00      	cmp	r3, #0
 800f58a:	d107      	bne.n	800f59c <tcp_abandon+0x20>
 800f58c:	4b52      	ldr	r3, [pc, #328]	; (800f6d8 <tcp_abandon+0x15c>)
 800f58e:	f240 223d 	movw	r2, #573	; 0x23d
 800f592:	4952      	ldr	r1, [pc, #328]	; (800f6dc <tcp_abandon+0x160>)
 800f594:	4852      	ldr	r0, [pc, #328]	; (800f6e0 <tcp_abandon+0x164>)
 800f596:	f00a fcb3 	bl	8019f00 <iprintf>
 800f59a:	e099      	b.n	800f6d0 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	7d1b      	ldrb	r3, [r3, #20]
 800f5a0:	2b01      	cmp	r3, #1
 800f5a2:	d106      	bne.n	800f5b2 <tcp_abandon+0x36>
 800f5a4:	4b4c      	ldr	r3, [pc, #304]	; (800f6d8 <tcp_abandon+0x15c>)
 800f5a6:	f44f 7210 	mov.w	r2, #576	; 0x240
 800f5aa:	494e      	ldr	r1, [pc, #312]	; (800f6e4 <tcp_abandon+0x168>)
 800f5ac:	484c      	ldr	r0, [pc, #304]	; (800f6e0 <tcp_abandon+0x164>)
 800f5ae:	f00a fca7 	bl	8019f00 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	7d1b      	ldrb	r3, [r3, #20]
 800f5b6:	2b0a      	cmp	r3, #10
 800f5b8:	d107      	bne.n	800f5ca <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800f5ba:	6879      	ldr	r1, [r7, #4]
 800f5bc:	484a      	ldr	r0, [pc, #296]	; (800f6e8 <tcp_abandon+0x16c>)
 800f5be:	f000 ffc7 	bl	8010550 <tcp_pcb_remove>
    tcp_free(pcb);
 800f5c2:	6878      	ldr	r0, [r7, #4]
 800f5c4:	f7ff fdb0 	bl	800f128 <tcp_free>
 800f5c8:	e082      	b.n	800f6d0 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800f5ca:	2300      	movs	r3, #0
 800f5cc:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800f5ce:	2300      	movs	r3, #0
 800f5d0:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f5d6:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5dc:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f5e4:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	691b      	ldr	r3, [r3, #16]
 800f5ea:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	7d1b      	ldrb	r3, [r3, #20]
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	d126      	bne.n	800f642 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	8adb      	ldrh	r3, [r3, #22]
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	d02e      	beq.n	800f65a <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800f5fc:	4b3b      	ldr	r3, [pc, #236]	; (800f6ec <tcp_abandon+0x170>)
 800f5fe:	681b      	ldr	r3, [r3, #0]
 800f600:	687a      	ldr	r2, [r7, #4]
 800f602:	429a      	cmp	r2, r3
 800f604:	d105      	bne.n	800f612 <tcp_abandon+0x96>
 800f606:	4b39      	ldr	r3, [pc, #228]	; (800f6ec <tcp_abandon+0x170>)
 800f608:	681b      	ldr	r3, [r3, #0]
 800f60a:	68db      	ldr	r3, [r3, #12]
 800f60c:	4a37      	ldr	r2, [pc, #220]	; (800f6ec <tcp_abandon+0x170>)
 800f60e:	6013      	str	r3, [r2, #0]
 800f610:	e013      	b.n	800f63a <tcp_abandon+0xbe>
 800f612:	4b36      	ldr	r3, [pc, #216]	; (800f6ec <tcp_abandon+0x170>)
 800f614:	681b      	ldr	r3, [r3, #0]
 800f616:	61fb      	str	r3, [r7, #28]
 800f618:	e00c      	b.n	800f634 <tcp_abandon+0xb8>
 800f61a:	69fb      	ldr	r3, [r7, #28]
 800f61c:	68db      	ldr	r3, [r3, #12]
 800f61e:	687a      	ldr	r2, [r7, #4]
 800f620:	429a      	cmp	r2, r3
 800f622:	d104      	bne.n	800f62e <tcp_abandon+0xb2>
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	68da      	ldr	r2, [r3, #12]
 800f628:	69fb      	ldr	r3, [r7, #28]
 800f62a:	60da      	str	r2, [r3, #12]
 800f62c:	e005      	b.n	800f63a <tcp_abandon+0xbe>
 800f62e:	69fb      	ldr	r3, [r7, #28]
 800f630:	68db      	ldr	r3, [r3, #12]
 800f632:	61fb      	str	r3, [r7, #28]
 800f634:	69fb      	ldr	r3, [r7, #28]
 800f636:	2b00      	cmp	r3, #0
 800f638:	d1ef      	bne.n	800f61a <tcp_abandon+0x9e>
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	2200      	movs	r2, #0
 800f63e:	60da      	str	r2, [r3, #12]
 800f640:	e00b      	b.n	800f65a <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800f642:	683b      	ldr	r3, [r7, #0]
 800f644:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	8adb      	ldrh	r3, [r3, #22]
 800f64a:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800f64c:	6879      	ldr	r1, [r7, #4]
 800f64e:	4828      	ldr	r0, [pc, #160]	; (800f6f0 <tcp_abandon+0x174>)
 800f650:	f000 ff7e 	bl	8010550 <tcp_pcb_remove>
 800f654:	4b27      	ldr	r3, [pc, #156]	; (800f6f4 <tcp_abandon+0x178>)
 800f656:	2201      	movs	r2, #1
 800f658:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f65e:	2b00      	cmp	r3, #0
 800f660:	d004      	beq.n	800f66c <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f666:	4618      	mov	r0, r3
 800f668:	f000 fd20 	bl	80100ac <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f670:	2b00      	cmp	r3, #0
 800f672:	d004      	beq.n	800f67e <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f678:	4618      	mov	r0, r3
 800f67a:	f000 fd17 	bl	80100ac <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f682:	2b00      	cmp	r3, #0
 800f684:	d004      	beq.n	800f690 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f68a:	4618      	mov	r0, r3
 800f68c:	f000 fd0e 	bl	80100ac <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800f690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f692:	2b00      	cmp	r3, #0
 800f694:	d00e      	beq.n	800f6b4 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800f696:	6879      	ldr	r1, [r7, #4]
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	3304      	adds	r3, #4
 800f69c:	687a      	ldr	r2, [r7, #4]
 800f69e:	8b12      	ldrh	r2, [r2, #24]
 800f6a0:	9202      	str	r2, [sp, #8]
 800f6a2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800f6a4:	9201      	str	r2, [sp, #4]
 800f6a6:	9300      	str	r3, [sp, #0]
 800f6a8:	460b      	mov	r3, r1
 800f6aa:	697a      	ldr	r2, [r7, #20]
 800f6ac:	69b9      	ldr	r1, [r7, #24]
 800f6ae:	6878      	ldr	r0, [r7, #4]
 800f6b0:	f004 fd0e 	bl	80140d0 <tcp_rst>
    }
    last_state = pcb->state;
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	7d1b      	ldrb	r3, [r3, #20]
 800f6b8:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800f6ba:	6878      	ldr	r0, [r7, #4]
 800f6bc:	f7ff fd34 	bl	800f128 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800f6c0:	693b      	ldr	r3, [r7, #16]
 800f6c2:	2b00      	cmp	r3, #0
 800f6c4:	d004      	beq.n	800f6d0 <tcp_abandon+0x154>
 800f6c6:	693b      	ldr	r3, [r7, #16]
 800f6c8:	f06f 010c 	mvn.w	r1, #12
 800f6cc:	68f8      	ldr	r0, [r7, #12]
 800f6ce:	4798      	blx	r3
  }
}
 800f6d0:	3728      	adds	r7, #40	; 0x28
 800f6d2:	46bd      	mov	sp, r7
 800f6d4:	bd80      	pop	{r7, pc}
 800f6d6:	bf00      	nop
 800f6d8:	0801c6b4 	.word	0x0801c6b4
 800f6dc:	0801c7f8 	.word	0x0801c7f8
 800f6e0:	0801c6f8 	.word	0x0801c6f8
 800f6e4:	0801c814 	.word	0x0801c814
 800f6e8:	20013ad4 	.word	0x20013ad4
 800f6ec:	20013ac8 	.word	0x20013ac8
 800f6f0:	20013ad0 	.word	0x20013ad0
 800f6f4:	20013ad8 	.word	0x20013ad8

0800f6f8 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800f6f8:	b580      	push	{r7, lr}
 800f6fa:	b082      	sub	sp, #8
 800f6fc:	af00      	add	r7, sp, #0
 800f6fe:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800f700:	2101      	movs	r1, #1
 800f702:	6878      	ldr	r0, [r7, #4]
 800f704:	f7ff ff3a 	bl	800f57c <tcp_abandon>
}
 800f708:	bf00      	nop
 800f70a:	3708      	adds	r7, #8
 800f70c:	46bd      	mov	sp, r7
 800f70e:	bd80      	pop	{r7, pc}

0800f710 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800f710:	b580      	push	{r7, lr}
 800f712:	b084      	sub	sp, #16
 800f714:	af00      	add	r7, sp, #0
 800f716:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	2b00      	cmp	r3, #0
 800f71c:	d106      	bne.n	800f72c <tcp_update_rcv_ann_wnd+0x1c>
 800f71e:	4b25      	ldr	r3, [pc, #148]	; (800f7b4 <tcp_update_rcv_ann_wnd+0xa4>)
 800f720:	f240 32a6 	movw	r2, #934	; 0x3a6
 800f724:	4924      	ldr	r1, [pc, #144]	; (800f7b8 <tcp_update_rcv_ann_wnd+0xa8>)
 800f726:	4825      	ldr	r0, [pc, #148]	; (800f7bc <tcp_update_rcv_ann_wnd+0xac>)
 800f728:	f00a fbea 	bl	8019f00 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f730:	687a      	ldr	r2, [r7, #4]
 800f732:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800f734:	4413      	add	r3, r2
 800f736:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f73c:	687a      	ldr	r2, [r7, #4]
 800f73e:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800f740:	f241 61d0 	movw	r1, #5840	; 0x16d0
 800f744:	428a      	cmp	r2, r1
 800f746:	bf28      	it	cs
 800f748:	460a      	movcs	r2, r1
 800f74a:	b292      	uxth	r2, r2
 800f74c:	4413      	add	r3, r2
 800f74e:	68fa      	ldr	r2, [r7, #12]
 800f750:	1ad3      	subs	r3, r2, r3
 800f752:	2b00      	cmp	r3, #0
 800f754:	db08      	blt.n	800f768 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f762:	68fa      	ldr	r2, [r7, #12]
 800f764:	1ad3      	subs	r3, r2, r3
 800f766:	e020      	b.n	800f7aa <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f770:	1ad3      	subs	r3, r2, r3
 800f772:	2b00      	cmp	r3, #0
 800f774:	dd03      	ble.n	800f77e <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	2200      	movs	r2, #0
 800f77a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800f77c:	e014      	b.n	800f7a8 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f786:	1ad3      	subs	r3, r2, r3
 800f788:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800f78a:	68bb      	ldr	r3, [r7, #8]
 800f78c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f790:	d306      	bcc.n	800f7a0 <tcp_update_rcv_ann_wnd+0x90>
 800f792:	4b08      	ldr	r3, [pc, #32]	; (800f7b4 <tcp_update_rcv_ann_wnd+0xa4>)
 800f794:	f240 32b6 	movw	r2, #950	; 0x3b6
 800f798:	4909      	ldr	r1, [pc, #36]	; (800f7c0 <tcp_update_rcv_ann_wnd+0xb0>)
 800f79a:	4808      	ldr	r0, [pc, #32]	; (800f7bc <tcp_update_rcv_ann_wnd+0xac>)
 800f79c:	f00a fbb0 	bl	8019f00 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800f7a0:	68bb      	ldr	r3, [r7, #8]
 800f7a2:	b29a      	uxth	r2, r3
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800f7a8:	2300      	movs	r3, #0
  }
}
 800f7aa:	4618      	mov	r0, r3
 800f7ac:	3710      	adds	r7, #16
 800f7ae:	46bd      	mov	sp, r7
 800f7b0:	bd80      	pop	{r7, pc}
 800f7b2:	bf00      	nop
 800f7b4:	0801c6b4 	.word	0x0801c6b4
 800f7b8:	0801c910 	.word	0x0801c910
 800f7bc:	0801c6f8 	.word	0x0801c6f8
 800f7c0:	0801c934 	.word	0x0801c934

0800f7c4 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800f7c4:	b580      	push	{r7, lr}
 800f7c6:	b084      	sub	sp, #16
 800f7c8:	af00      	add	r7, sp, #0
 800f7ca:	6078      	str	r0, [r7, #4]
 800f7cc:	460b      	mov	r3, r1
 800f7ce:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	2b00      	cmp	r3, #0
 800f7d4:	d107      	bne.n	800f7e6 <tcp_recved+0x22>
 800f7d6:	4b20      	ldr	r3, [pc, #128]	; (800f858 <tcp_recved+0x94>)
 800f7d8:	f240 32cf 	movw	r2, #975	; 0x3cf
 800f7dc:	491f      	ldr	r1, [pc, #124]	; (800f85c <tcp_recved+0x98>)
 800f7de:	4820      	ldr	r0, [pc, #128]	; (800f860 <tcp_recved+0x9c>)
 800f7e0:	f00a fb8e 	bl	8019f00 <iprintf>
 800f7e4:	e034      	b.n	800f850 <tcp_recved+0x8c>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	7d1b      	ldrb	r3, [r3, #20]
 800f7ea:	2b01      	cmp	r3, #1
 800f7ec:	d106      	bne.n	800f7fc <tcp_recved+0x38>
 800f7ee:	4b1a      	ldr	r3, [pc, #104]	; (800f858 <tcp_recved+0x94>)
 800f7f0:	f240 32d2 	movw	r2, #978	; 0x3d2
 800f7f4:	491b      	ldr	r1, [pc, #108]	; (800f864 <tcp_recved+0xa0>)
 800f7f6:	481a      	ldr	r0, [pc, #104]	; (800f860 <tcp_recved+0x9c>)
 800f7f8:	f00a fb82 	bl	8019f00 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f800:	887b      	ldrh	r3, [r7, #2]
 800f802:	4413      	add	r3, r2
 800f804:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800f806:	89fb      	ldrh	r3, [r7, #14]
 800f808:	f642 52a0 	movw	r2, #11680	; 0x2da0
 800f80c:	4293      	cmp	r3, r2
 800f80e:	d804      	bhi.n	800f81a <tcp_recved+0x56>
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f814:	89fa      	ldrh	r2, [r7, #14]
 800f816:	429a      	cmp	r2, r3
 800f818:	d204      	bcs.n	800f824 <tcp_recved+0x60>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	f642 52a0 	movw	r2, #11680	; 0x2da0
 800f820:	851a      	strh	r2, [r3, #40]	; 0x28
 800f822:	e002      	b.n	800f82a <tcp_recved+0x66>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	89fa      	ldrh	r2, [r7, #14]
 800f828:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800f82a:	6878      	ldr	r0, [r7, #4]
 800f82c:	f7ff ff70 	bl	800f710 <tcp_update_rcv_ann_wnd>
 800f830:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800f832:	68bb      	ldr	r3, [r7, #8]
 800f834:	f640 3267 	movw	r2, #2919	; 0xb67
 800f838:	4293      	cmp	r3, r2
 800f83a:	d909      	bls.n	800f850 <tcp_recved+0x8c>
    tcp_ack_now(pcb);
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	8b5b      	ldrh	r3, [r3, #26]
 800f840:	f043 0302 	orr.w	r3, r3, #2
 800f844:	b29a      	uxth	r2, r3
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800f84a:	6878      	ldr	r0, [r7, #4]
 800f84c:	f003 fe5e 	bl	801350c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800f850:	3710      	adds	r7, #16
 800f852:	46bd      	mov	sp, r7
 800f854:	bd80      	pop	{r7, pc}
 800f856:	bf00      	nop
 800f858:	0801c6b4 	.word	0x0801c6b4
 800f85c:	0801c950 	.word	0x0801c950
 800f860:	0801c6f8 	.word	0x0801c6f8
 800f864:	0801c968 	.word	0x0801c968

0800f868 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800f868:	b5b0      	push	{r4, r5, r7, lr}
 800f86a:	b090      	sub	sp, #64	; 0x40
 800f86c:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800f86e:	2300      	movs	r3, #0
 800f870:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800f874:	4b94      	ldr	r3, [pc, #592]	; (800fac8 <tcp_slowtmr+0x260>)
 800f876:	681b      	ldr	r3, [r3, #0]
 800f878:	3301      	adds	r3, #1
 800f87a:	4a93      	ldr	r2, [pc, #588]	; (800fac8 <tcp_slowtmr+0x260>)
 800f87c:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800f87e:	4b93      	ldr	r3, [pc, #588]	; (800facc <tcp_slowtmr+0x264>)
 800f880:	781b      	ldrb	r3, [r3, #0]
 800f882:	3301      	adds	r3, #1
 800f884:	b2da      	uxtb	r2, r3
 800f886:	4b91      	ldr	r3, [pc, #580]	; (800facc <tcp_slowtmr+0x264>)
 800f888:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800f88a:	2300      	movs	r3, #0
 800f88c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800f88e:	4b90      	ldr	r3, [pc, #576]	; (800fad0 <tcp_slowtmr+0x268>)
 800f890:	681b      	ldr	r3, [r3, #0]
 800f892:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800f894:	e29f      	b.n	800fdd6 <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800f896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f898:	7d1b      	ldrb	r3, [r3, #20]
 800f89a:	2b00      	cmp	r3, #0
 800f89c:	d106      	bne.n	800f8ac <tcp_slowtmr+0x44>
 800f89e:	4b8d      	ldr	r3, [pc, #564]	; (800fad4 <tcp_slowtmr+0x26c>)
 800f8a0:	f240 42be 	movw	r2, #1214	; 0x4be
 800f8a4:	498c      	ldr	r1, [pc, #560]	; (800fad8 <tcp_slowtmr+0x270>)
 800f8a6:	488d      	ldr	r0, [pc, #564]	; (800fadc <tcp_slowtmr+0x274>)
 800f8a8:	f00a fb2a 	bl	8019f00 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800f8ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8ae:	7d1b      	ldrb	r3, [r3, #20]
 800f8b0:	2b01      	cmp	r3, #1
 800f8b2:	d106      	bne.n	800f8c2 <tcp_slowtmr+0x5a>
 800f8b4:	4b87      	ldr	r3, [pc, #540]	; (800fad4 <tcp_slowtmr+0x26c>)
 800f8b6:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800f8ba:	4989      	ldr	r1, [pc, #548]	; (800fae0 <tcp_slowtmr+0x278>)
 800f8bc:	4887      	ldr	r0, [pc, #540]	; (800fadc <tcp_slowtmr+0x274>)
 800f8be:	f00a fb1f 	bl	8019f00 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800f8c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8c4:	7d1b      	ldrb	r3, [r3, #20]
 800f8c6:	2b0a      	cmp	r3, #10
 800f8c8:	d106      	bne.n	800f8d8 <tcp_slowtmr+0x70>
 800f8ca:	4b82      	ldr	r3, [pc, #520]	; (800fad4 <tcp_slowtmr+0x26c>)
 800f8cc:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800f8d0:	4984      	ldr	r1, [pc, #528]	; (800fae4 <tcp_slowtmr+0x27c>)
 800f8d2:	4882      	ldr	r0, [pc, #520]	; (800fadc <tcp_slowtmr+0x274>)
 800f8d4:	f00a fb14 	bl	8019f00 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800f8d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8da:	7f9a      	ldrb	r2, [r3, #30]
 800f8dc:	4b7b      	ldr	r3, [pc, #492]	; (800facc <tcp_slowtmr+0x264>)
 800f8de:	781b      	ldrb	r3, [r3, #0]
 800f8e0:	429a      	cmp	r2, r3
 800f8e2:	d105      	bne.n	800f8f0 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800f8e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8e6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800f8e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8ea:	68db      	ldr	r3, [r3, #12]
 800f8ec:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800f8ee:	e272      	b.n	800fdd6 <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 800f8f0:	4b76      	ldr	r3, [pc, #472]	; (800facc <tcp_slowtmr+0x264>)
 800f8f2:	781a      	ldrb	r2, [r3, #0]
 800f8f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8f6:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800f8f8:	2300      	movs	r3, #0
 800f8fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800f8fe:	2300      	movs	r3, #0
 800f900:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800f904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f906:	7d1b      	ldrb	r3, [r3, #20]
 800f908:	2b02      	cmp	r3, #2
 800f90a:	d10a      	bne.n	800f922 <tcp_slowtmr+0xba>
 800f90c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f90e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f912:	2b05      	cmp	r3, #5
 800f914:	d905      	bls.n	800f922 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800f916:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f91a:	3301      	adds	r3, #1
 800f91c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
 800f920:	e11e      	b.n	800fb60 <tcp_slowtmr+0x2f8>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800f922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f924:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f928:	2b0b      	cmp	r3, #11
 800f92a:	d905      	bls.n	800f938 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800f92c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f930:	3301      	adds	r3, #1
 800f932:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f936:	e113      	b.n	800fb60 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800f938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f93a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800f93e:	2b00      	cmp	r3, #0
 800f940:	d075      	beq.n	800fa2e <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800f942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f946:	2b00      	cmp	r3, #0
 800f948:	d006      	beq.n	800f958 <tcp_slowtmr+0xf0>
 800f94a:	4b62      	ldr	r3, [pc, #392]	; (800fad4 <tcp_slowtmr+0x26c>)
 800f94c:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800f950:	4965      	ldr	r1, [pc, #404]	; (800fae8 <tcp_slowtmr+0x280>)
 800f952:	4862      	ldr	r0, [pc, #392]	; (800fadc <tcp_slowtmr+0x274>)
 800f954:	f00a fad4 	bl	8019f00 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800f958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f95a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f95c:	2b00      	cmp	r3, #0
 800f95e:	d106      	bne.n	800f96e <tcp_slowtmr+0x106>
 800f960:	4b5c      	ldr	r3, [pc, #368]	; (800fad4 <tcp_slowtmr+0x26c>)
 800f962:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800f966:	4961      	ldr	r1, [pc, #388]	; (800faec <tcp_slowtmr+0x284>)
 800f968:	485c      	ldr	r0, [pc, #368]	; (800fadc <tcp_slowtmr+0x274>)
 800f96a:	f00a fac9 	bl	8019f00 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800f96e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f970:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800f974:	2b0b      	cmp	r3, #11
 800f976:	d905      	bls.n	800f984 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800f978:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f97c:	3301      	adds	r3, #1
 800f97e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f982:	e0ed      	b.n	800fb60 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800f984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f986:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800f98a:	3b01      	subs	r3, #1
 800f98c:	4a58      	ldr	r2, [pc, #352]	; (800faf0 <tcp_slowtmr+0x288>)
 800f98e:	5cd3      	ldrb	r3, [r2, r3]
 800f990:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800f992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f994:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800f998:	7c7a      	ldrb	r2, [r7, #17]
 800f99a:	429a      	cmp	r2, r3
 800f99c:	d907      	bls.n	800f9ae <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800f99e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9a0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800f9a4:	3301      	adds	r3, #1
 800f9a6:	b2da      	uxtb	r2, r3
 800f9a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9aa:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800f9ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9b0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800f9b4:	7c7a      	ldrb	r2, [r7, #17]
 800f9b6:	429a      	cmp	r2, r3
 800f9b8:	f200 80d2 	bhi.w	800fb60 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800f9bc:	2301      	movs	r3, #1
 800f9be:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800f9c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9c2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f9c6:	2b00      	cmp	r3, #0
 800f9c8:	d108      	bne.n	800f9dc <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800f9ca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f9cc:	f004 fc74 	bl	80142b8 <tcp_zero_window_probe>
 800f9d0:	4603      	mov	r3, r0
 800f9d2:	2b00      	cmp	r3, #0
 800f9d4:	d014      	beq.n	800fa00 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800f9d6:	2300      	movs	r3, #0
 800f9d8:	623b      	str	r3, [r7, #32]
 800f9da:	e011      	b.n	800fa00 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800f9dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9de:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f9e2:	4619      	mov	r1, r3
 800f9e4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f9e6:	f003 fb07 	bl	8012ff8 <tcp_split_unsent_seg>
 800f9ea:	4603      	mov	r3, r0
 800f9ec:	2b00      	cmp	r3, #0
 800f9ee:	d107      	bne.n	800fa00 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800f9f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f9f2:	f003 fd8b 	bl	801350c <tcp_output>
 800f9f6:	4603      	mov	r3, r0
 800f9f8:	2b00      	cmp	r3, #0
 800f9fa:	d101      	bne.n	800fa00 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800f9fc:	2300      	movs	r3, #0
 800f9fe:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800fa00:	6a3b      	ldr	r3, [r7, #32]
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	f000 80ac 	beq.w	800fb60 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800fa08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa0a:	2200      	movs	r2, #0
 800fa0c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800fa10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa12:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800fa16:	2b06      	cmp	r3, #6
 800fa18:	f200 80a2 	bhi.w	800fb60 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800fa1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa1e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800fa22:	3301      	adds	r3, #1
 800fa24:	b2da      	uxtb	r2, r3
 800fa26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa28:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800fa2c:	e098      	b.n	800fb60 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800fa2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa30:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800fa34:	2b00      	cmp	r3, #0
 800fa36:	db0f      	blt.n	800fa58 <tcp_slowtmr+0x1f0>
 800fa38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa3a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800fa3e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800fa42:	4293      	cmp	r3, r2
 800fa44:	d008      	beq.n	800fa58 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800fa46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa48:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800fa4c:	b29b      	uxth	r3, r3
 800fa4e:	3301      	adds	r3, #1
 800fa50:	b29b      	uxth	r3, r3
 800fa52:	b21a      	sxth	r2, r3
 800fa54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa56:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800fa58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa5a:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800fa5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa60:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800fa64:	429a      	cmp	r2, r3
 800fa66:	db7b      	blt.n	800fb60 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800fa68:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fa6a:	f004 f855 	bl	8013b18 <tcp_rexmit_rto_prepare>
 800fa6e:	4603      	mov	r3, r0
 800fa70:	2b00      	cmp	r3, #0
 800fa72:	d007      	beq.n	800fa84 <tcp_slowtmr+0x21c>
 800fa74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fa78:	2b00      	cmp	r3, #0
 800fa7a:	d171      	bne.n	800fb60 <tcp_slowtmr+0x2f8>
 800fa7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fa80:	2b00      	cmp	r3, #0
 800fa82:	d06d      	beq.n	800fb60 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800fa84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa86:	7d1b      	ldrb	r3, [r3, #20]
 800fa88:	2b02      	cmp	r3, #2
 800fa8a:	d03a      	beq.n	800fb02 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800fa8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa8e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800fa92:	2b0c      	cmp	r3, #12
 800fa94:	bf28      	it	cs
 800fa96:	230c      	movcs	r3, #12
 800fa98:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800fa9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa9c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800faa0:	10db      	asrs	r3, r3, #3
 800faa2:	b21b      	sxth	r3, r3
 800faa4:	461a      	mov	r2, r3
 800faa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800faa8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800faac:	4413      	add	r3, r2
 800faae:	7efa      	ldrb	r2, [r7, #27]
 800fab0:	4910      	ldr	r1, [pc, #64]	; (800faf4 <tcp_slowtmr+0x28c>)
 800fab2:	5c8a      	ldrb	r2, [r1, r2]
 800fab4:	4093      	lsls	r3, r2
 800fab6:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800fab8:	697b      	ldr	r3, [r7, #20]
 800faba:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800fabe:	4293      	cmp	r3, r2
 800fac0:	dc1a      	bgt.n	800faf8 <tcp_slowtmr+0x290>
 800fac2:	697b      	ldr	r3, [r7, #20]
 800fac4:	b21a      	sxth	r2, r3
 800fac6:	e019      	b.n	800fafc <tcp_slowtmr+0x294>
 800fac8:	20013ac4 	.word	0x20013ac4
 800facc:	20013ada 	.word	0x20013ada
 800fad0:	20013ad0 	.word	0x20013ad0
 800fad4:	0801c6b4 	.word	0x0801c6b4
 800fad8:	0801c9f8 	.word	0x0801c9f8
 800fadc:	0801c6f8 	.word	0x0801c6f8
 800fae0:	0801ca24 	.word	0x0801ca24
 800fae4:	0801ca50 	.word	0x0801ca50
 800fae8:	0801ca80 	.word	0x0801ca80
 800faec:	0801cab4 	.word	0x0801cab4
 800faf0:	0806a3e8 	.word	0x0806a3e8
 800faf4:	0806a3d8 	.word	0x0806a3d8
 800faf8:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800fafc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fafe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800fb02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb04:	2200      	movs	r2, #0
 800fb06:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800fb08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb0a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800fb0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb10:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800fb14:	4293      	cmp	r3, r2
 800fb16:	bf28      	it	cs
 800fb18:	4613      	movcs	r3, r2
 800fb1a:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800fb1c:	8a7b      	ldrh	r3, [r7, #18]
 800fb1e:	085b      	lsrs	r3, r3, #1
 800fb20:	b29a      	uxth	r2, r3
 800fb22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb24:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800fb28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb2a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800fb2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb30:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fb32:	005b      	lsls	r3, r3, #1
 800fb34:	b29b      	uxth	r3, r3
 800fb36:	429a      	cmp	r2, r3
 800fb38:	d206      	bcs.n	800fb48 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800fb3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb3c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fb3e:	005b      	lsls	r3, r3, #1
 800fb40:	b29a      	uxth	r2, r3
 800fb42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb44:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800fb48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb4a:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800fb4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb4e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800fb52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb54:	2200      	movs	r2, #0
 800fb56:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800fb5a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fb5c:	f004 f856 	bl	8013c0c <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800fb60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb62:	7d1b      	ldrb	r3, [r3, #20]
 800fb64:	2b06      	cmp	r3, #6
 800fb66:	d111      	bne.n	800fb8c <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800fb68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb6a:	8b5b      	ldrh	r3, [r3, #26]
 800fb6c:	f003 0310 	and.w	r3, r3, #16
 800fb70:	2b00      	cmp	r3, #0
 800fb72:	d00b      	beq.n	800fb8c <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800fb74:	4b9d      	ldr	r3, [pc, #628]	; (800fdec <tcp_slowtmr+0x584>)
 800fb76:	681a      	ldr	r2, [r3, #0]
 800fb78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb7a:	6a1b      	ldr	r3, [r3, #32]
 800fb7c:	1ad3      	subs	r3, r2, r3
 800fb7e:	2b28      	cmp	r3, #40	; 0x28
 800fb80:	d904      	bls.n	800fb8c <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800fb82:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fb86:	3301      	adds	r3, #1
 800fb88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800fb8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb8e:	7a5b      	ldrb	r3, [r3, #9]
 800fb90:	f003 0308 	and.w	r3, r3, #8
 800fb94:	2b00      	cmp	r3, #0
 800fb96:	d04c      	beq.n	800fc32 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800fb98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb9a:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800fb9c:	2b04      	cmp	r3, #4
 800fb9e:	d003      	beq.n	800fba8 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800fba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fba2:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800fba4:	2b07      	cmp	r3, #7
 800fba6:	d144      	bne.n	800fc32 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800fba8:	4b90      	ldr	r3, [pc, #576]	; (800fdec <tcp_slowtmr+0x584>)
 800fbaa:	681a      	ldr	r2, [r3, #0]
 800fbac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbae:	6a1b      	ldr	r3, [r3, #32]
 800fbb0:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800fbb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800fbb8:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800fbbc:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800fbc0:	498b      	ldr	r1, [pc, #556]	; (800fdf0 <tcp_slowtmr+0x588>)
 800fbc2:	fba1 1303 	umull	r1, r3, r1, r3
 800fbc6:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800fbc8:	429a      	cmp	r2, r3
 800fbca:	d90a      	bls.n	800fbe2 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800fbcc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fbd0:	3301      	adds	r3, #1
 800fbd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800fbd6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fbda:	3301      	adds	r3, #1
 800fbdc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800fbe0:	e027      	b.n	800fc32 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800fbe2:	4b82      	ldr	r3, [pc, #520]	; (800fdec <tcp_slowtmr+0x584>)
 800fbe4:	681a      	ldr	r2, [r3, #0]
 800fbe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbe8:	6a1b      	ldr	r3, [r3, #32]
 800fbea:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800fbec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbee:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800fbf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbf4:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800fbf8:	4618      	mov	r0, r3
 800fbfa:	4b7e      	ldr	r3, [pc, #504]	; (800fdf4 <tcp_slowtmr+0x58c>)
 800fbfc:	fb00 f303 	mul.w	r3, r0, r3
 800fc00:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800fc02:	497b      	ldr	r1, [pc, #492]	; (800fdf0 <tcp_slowtmr+0x588>)
 800fc04:	fba1 1303 	umull	r1, r3, r1, r3
 800fc08:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800fc0a:	429a      	cmp	r2, r3
 800fc0c:	d911      	bls.n	800fc32 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800fc0e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fc10:	f004 fb12 	bl	8014238 <tcp_keepalive>
 800fc14:	4603      	mov	r3, r0
 800fc16:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800fc1a:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800fc1e:	2b00      	cmp	r3, #0
 800fc20:	d107      	bne.n	800fc32 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800fc22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc24:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800fc28:	3301      	adds	r3, #1
 800fc2a:	b2da      	uxtb	r2, r3
 800fc2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc2e:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800fc32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fc36:	2b00      	cmp	r3, #0
 800fc38:	d011      	beq.n	800fc5e <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800fc3a:	4b6c      	ldr	r3, [pc, #432]	; (800fdec <tcp_slowtmr+0x584>)
 800fc3c:	681a      	ldr	r2, [r3, #0]
 800fc3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc40:	6a1b      	ldr	r3, [r3, #32]
 800fc42:	1ad2      	subs	r2, r2, r3
 800fc44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc46:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800fc4a:	4619      	mov	r1, r3
 800fc4c:	460b      	mov	r3, r1
 800fc4e:	005b      	lsls	r3, r3, #1
 800fc50:	440b      	add	r3, r1
 800fc52:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800fc54:	429a      	cmp	r2, r3
 800fc56:	d302      	bcc.n	800fc5e <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800fc58:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fc5a:	f000 fddd 	bl	8010818 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800fc5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc60:	7d1b      	ldrb	r3, [r3, #20]
 800fc62:	2b03      	cmp	r3, #3
 800fc64:	d10b      	bne.n	800fc7e <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800fc66:	4b61      	ldr	r3, [pc, #388]	; (800fdec <tcp_slowtmr+0x584>)
 800fc68:	681a      	ldr	r2, [r3, #0]
 800fc6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc6c:	6a1b      	ldr	r3, [r3, #32]
 800fc6e:	1ad3      	subs	r3, r2, r3
 800fc70:	2b28      	cmp	r3, #40	; 0x28
 800fc72:	d904      	bls.n	800fc7e <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800fc74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fc78:	3301      	adds	r3, #1
 800fc7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800fc7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc80:	7d1b      	ldrb	r3, [r3, #20]
 800fc82:	2b09      	cmp	r3, #9
 800fc84:	d10b      	bne.n	800fc9e <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800fc86:	4b59      	ldr	r3, [pc, #356]	; (800fdec <tcp_slowtmr+0x584>)
 800fc88:	681a      	ldr	r2, [r3, #0]
 800fc8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc8c:	6a1b      	ldr	r3, [r3, #32]
 800fc8e:	1ad3      	subs	r3, r2, r3
 800fc90:	2bf0      	cmp	r3, #240	; 0xf0
 800fc92:	d904      	bls.n	800fc9e <tcp_slowtmr+0x436>
        ++pcb_remove;
 800fc94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fc98:	3301      	adds	r3, #1
 800fc9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800fc9e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fca2:	2b00      	cmp	r3, #0
 800fca4:	d060      	beq.n	800fd68 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800fca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fca8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fcac:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800fcae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fcb0:	f000 fbfe 	bl	80104b0 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800fcb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcb6:	2b00      	cmp	r3, #0
 800fcb8:	d010      	beq.n	800fcdc <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800fcba:	4b4f      	ldr	r3, [pc, #316]	; (800fdf8 <tcp_slowtmr+0x590>)
 800fcbc:	681b      	ldr	r3, [r3, #0]
 800fcbe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fcc0:	429a      	cmp	r2, r3
 800fcc2:	d106      	bne.n	800fcd2 <tcp_slowtmr+0x46a>
 800fcc4:	4b4d      	ldr	r3, [pc, #308]	; (800fdfc <tcp_slowtmr+0x594>)
 800fcc6:	f240 526d 	movw	r2, #1389	; 0x56d
 800fcca:	494d      	ldr	r1, [pc, #308]	; (800fe00 <tcp_slowtmr+0x598>)
 800fccc:	484d      	ldr	r0, [pc, #308]	; (800fe04 <tcp_slowtmr+0x59c>)
 800fcce:	f00a f917 	bl	8019f00 <iprintf>
        prev->next = pcb->next;
 800fcd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcd4:	68da      	ldr	r2, [r3, #12]
 800fcd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcd8:	60da      	str	r2, [r3, #12]
 800fcda:	e00f      	b.n	800fcfc <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800fcdc:	4b46      	ldr	r3, [pc, #280]	; (800fdf8 <tcp_slowtmr+0x590>)
 800fcde:	681b      	ldr	r3, [r3, #0]
 800fce0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fce2:	429a      	cmp	r2, r3
 800fce4:	d006      	beq.n	800fcf4 <tcp_slowtmr+0x48c>
 800fce6:	4b45      	ldr	r3, [pc, #276]	; (800fdfc <tcp_slowtmr+0x594>)
 800fce8:	f240 5271 	movw	r2, #1393	; 0x571
 800fcec:	4946      	ldr	r1, [pc, #280]	; (800fe08 <tcp_slowtmr+0x5a0>)
 800fcee:	4845      	ldr	r0, [pc, #276]	; (800fe04 <tcp_slowtmr+0x59c>)
 800fcf0:	f00a f906 	bl	8019f00 <iprintf>
        tcp_active_pcbs = pcb->next;
 800fcf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcf6:	68db      	ldr	r3, [r3, #12]
 800fcf8:	4a3f      	ldr	r2, [pc, #252]	; (800fdf8 <tcp_slowtmr+0x590>)
 800fcfa:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800fcfc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fd00:	2b00      	cmp	r3, #0
 800fd02:	d013      	beq.n	800fd2c <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800fd04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd06:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800fd08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd0a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800fd0c:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800fd0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd10:	3304      	adds	r3, #4
 800fd12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fd14:	8ad2      	ldrh	r2, [r2, #22]
 800fd16:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fd18:	8b09      	ldrh	r1, [r1, #24]
 800fd1a:	9102      	str	r1, [sp, #8]
 800fd1c:	9201      	str	r2, [sp, #4]
 800fd1e:	9300      	str	r3, [sp, #0]
 800fd20:	462b      	mov	r3, r5
 800fd22:	4622      	mov	r2, r4
 800fd24:	4601      	mov	r1, r0
 800fd26:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fd28:	f004 f9d2 	bl	80140d0 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800fd2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd2e:	691b      	ldr	r3, [r3, #16]
 800fd30:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800fd32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd34:	7d1b      	ldrb	r3, [r3, #20]
 800fd36:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800fd38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd3a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800fd3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd3e:	68db      	ldr	r3, [r3, #12]
 800fd40:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800fd42:	6838      	ldr	r0, [r7, #0]
 800fd44:	f7ff f9f0 	bl	800f128 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800fd48:	4b30      	ldr	r3, [pc, #192]	; (800fe0c <tcp_slowtmr+0x5a4>)
 800fd4a:	2200      	movs	r2, #0
 800fd4c:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800fd4e:	68fb      	ldr	r3, [r7, #12]
 800fd50:	2b00      	cmp	r3, #0
 800fd52:	d004      	beq.n	800fd5e <tcp_slowtmr+0x4f6>
 800fd54:	68fb      	ldr	r3, [r7, #12]
 800fd56:	f06f 010c 	mvn.w	r1, #12
 800fd5a:	68b8      	ldr	r0, [r7, #8]
 800fd5c:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800fd5e:	4b2b      	ldr	r3, [pc, #172]	; (800fe0c <tcp_slowtmr+0x5a4>)
 800fd60:	781b      	ldrb	r3, [r3, #0]
 800fd62:	2b00      	cmp	r3, #0
 800fd64:	d037      	beq.n	800fdd6 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800fd66:	e590      	b.n	800f88a <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800fd68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd6a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800fd6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd6e:	68db      	ldr	r3, [r3, #12]
 800fd70:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800fd72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd74:	7f1b      	ldrb	r3, [r3, #28]
 800fd76:	3301      	adds	r3, #1
 800fd78:	b2da      	uxtb	r2, r3
 800fd7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd7c:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800fd7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd80:	7f1a      	ldrb	r2, [r3, #28]
 800fd82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd84:	7f5b      	ldrb	r3, [r3, #29]
 800fd86:	429a      	cmp	r2, r3
 800fd88:	d325      	bcc.n	800fdd6 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800fd8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd8c:	2200      	movs	r2, #0
 800fd8e:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800fd90:	4b1e      	ldr	r3, [pc, #120]	; (800fe0c <tcp_slowtmr+0x5a4>)
 800fd92:	2200      	movs	r2, #0
 800fd94:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800fd96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fd9c:	2b00      	cmp	r3, #0
 800fd9e:	d00b      	beq.n	800fdb8 <tcp_slowtmr+0x550>
 800fda0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fda2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fda6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fda8:	6912      	ldr	r2, [r2, #16]
 800fdaa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fdac:	4610      	mov	r0, r2
 800fdae:	4798      	blx	r3
 800fdb0:	4603      	mov	r3, r0
 800fdb2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800fdb6:	e002      	b.n	800fdbe <tcp_slowtmr+0x556>
 800fdb8:	2300      	movs	r3, #0
 800fdba:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800fdbe:	4b13      	ldr	r3, [pc, #76]	; (800fe0c <tcp_slowtmr+0x5a4>)
 800fdc0:	781b      	ldrb	r3, [r3, #0]
 800fdc2:	2b00      	cmp	r3, #0
 800fdc4:	d000      	beq.n	800fdc8 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800fdc6:	e560      	b.n	800f88a <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800fdc8:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800fdcc:	2b00      	cmp	r3, #0
 800fdce:	d102      	bne.n	800fdd6 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800fdd0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fdd2:	f003 fb9b 	bl	801350c <tcp_output>
  while (pcb != NULL) {
 800fdd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdd8:	2b00      	cmp	r3, #0
 800fdda:	f47f ad5c 	bne.w	800f896 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800fdde:	2300      	movs	r3, #0
 800fde0:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800fde2:	4b0b      	ldr	r3, [pc, #44]	; (800fe10 <tcp_slowtmr+0x5a8>)
 800fde4:	681b      	ldr	r3, [r3, #0]
 800fde6:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800fde8:	e067      	b.n	800feba <tcp_slowtmr+0x652>
 800fdea:	bf00      	nop
 800fdec:	20013ac4 	.word	0x20013ac4
 800fdf0:	10624dd3 	.word	0x10624dd3
 800fdf4:	000124f8 	.word	0x000124f8
 800fdf8:	20013ad0 	.word	0x20013ad0
 800fdfc:	0801c6b4 	.word	0x0801c6b4
 800fe00:	0801caec 	.word	0x0801caec
 800fe04:	0801c6f8 	.word	0x0801c6f8
 800fe08:	0801cb18 	.word	0x0801cb18
 800fe0c:	20013ad8 	.word	0x20013ad8
 800fe10:	20013ad4 	.word	0x20013ad4
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800fe14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe16:	7d1b      	ldrb	r3, [r3, #20]
 800fe18:	2b0a      	cmp	r3, #10
 800fe1a:	d006      	beq.n	800fe2a <tcp_slowtmr+0x5c2>
 800fe1c:	4b2b      	ldr	r3, [pc, #172]	; (800fecc <tcp_slowtmr+0x664>)
 800fe1e:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800fe22:	492b      	ldr	r1, [pc, #172]	; (800fed0 <tcp_slowtmr+0x668>)
 800fe24:	482b      	ldr	r0, [pc, #172]	; (800fed4 <tcp_slowtmr+0x66c>)
 800fe26:	f00a f86b 	bl	8019f00 <iprintf>
    pcb_remove = 0;
 800fe2a:	2300      	movs	r3, #0
 800fe2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800fe30:	4b29      	ldr	r3, [pc, #164]	; (800fed8 <tcp_slowtmr+0x670>)
 800fe32:	681a      	ldr	r2, [r3, #0]
 800fe34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe36:	6a1b      	ldr	r3, [r3, #32]
 800fe38:	1ad3      	subs	r3, r2, r3
 800fe3a:	2bf0      	cmp	r3, #240	; 0xf0
 800fe3c:	d904      	bls.n	800fe48 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800fe3e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fe42:	3301      	adds	r3, #1
 800fe44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800fe48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fe4c:	2b00      	cmp	r3, #0
 800fe4e:	d02f      	beq.n	800feb0 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800fe50:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fe52:	f000 fb2d 	bl	80104b0 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800fe56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe58:	2b00      	cmp	r3, #0
 800fe5a:	d010      	beq.n	800fe7e <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800fe5c:	4b1f      	ldr	r3, [pc, #124]	; (800fedc <tcp_slowtmr+0x674>)
 800fe5e:	681b      	ldr	r3, [r3, #0]
 800fe60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fe62:	429a      	cmp	r2, r3
 800fe64:	d106      	bne.n	800fe74 <tcp_slowtmr+0x60c>
 800fe66:	4b19      	ldr	r3, [pc, #100]	; (800fecc <tcp_slowtmr+0x664>)
 800fe68:	f240 52af 	movw	r2, #1455	; 0x5af
 800fe6c:	491c      	ldr	r1, [pc, #112]	; (800fee0 <tcp_slowtmr+0x678>)
 800fe6e:	4819      	ldr	r0, [pc, #100]	; (800fed4 <tcp_slowtmr+0x66c>)
 800fe70:	f00a f846 	bl	8019f00 <iprintf>
        prev->next = pcb->next;
 800fe74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe76:	68da      	ldr	r2, [r3, #12]
 800fe78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe7a:	60da      	str	r2, [r3, #12]
 800fe7c:	e00f      	b.n	800fe9e <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800fe7e:	4b17      	ldr	r3, [pc, #92]	; (800fedc <tcp_slowtmr+0x674>)
 800fe80:	681b      	ldr	r3, [r3, #0]
 800fe82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fe84:	429a      	cmp	r2, r3
 800fe86:	d006      	beq.n	800fe96 <tcp_slowtmr+0x62e>
 800fe88:	4b10      	ldr	r3, [pc, #64]	; (800fecc <tcp_slowtmr+0x664>)
 800fe8a:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800fe8e:	4915      	ldr	r1, [pc, #84]	; (800fee4 <tcp_slowtmr+0x67c>)
 800fe90:	4810      	ldr	r0, [pc, #64]	; (800fed4 <tcp_slowtmr+0x66c>)
 800fe92:	f00a f835 	bl	8019f00 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800fe96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe98:	68db      	ldr	r3, [r3, #12]
 800fe9a:	4a10      	ldr	r2, [pc, #64]	; (800fedc <tcp_slowtmr+0x674>)
 800fe9c:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800fe9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fea0:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800fea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fea4:	68db      	ldr	r3, [r3, #12]
 800fea6:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800fea8:	69f8      	ldr	r0, [r7, #28]
 800feaa:	f7ff f93d 	bl	800f128 <tcp_free>
 800feae:	e004      	b.n	800feba <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800feb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800feb2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800feb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800feb6:	68db      	ldr	r3, [r3, #12]
 800feb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800feba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800febc:	2b00      	cmp	r3, #0
 800febe:	d1a9      	bne.n	800fe14 <tcp_slowtmr+0x5ac>
    }
  }
}
 800fec0:	bf00      	nop
 800fec2:	bf00      	nop
 800fec4:	3730      	adds	r7, #48	; 0x30
 800fec6:	46bd      	mov	sp, r7
 800fec8:	bdb0      	pop	{r4, r5, r7, pc}
 800feca:	bf00      	nop
 800fecc:	0801c6b4 	.word	0x0801c6b4
 800fed0:	0801cb44 	.word	0x0801cb44
 800fed4:	0801c6f8 	.word	0x0801c6f8
 800fed8:	20013ac4 	.word	0x20013ac4
 800fedc:	20013ad4 	.word	0x20013ad4
 800fee0:	0801cb74 	.word	0x0801cb74
 800fee4:	0801cb9c 	.word	0x0801cb9c

0800fee8 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800fee8:	b580      	push	{r7, lr}
 800feea:	b082      	sub	sp, #8
 800feec:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800feee:	4b2d      	ldr	r3, [pc, #180]	; (800ffa4 <tcp_fasttmr+0xbc>)
 800fef0:	781b      	ldrb	r3, [r3, #0]
 800fef2:	3301      	adds	r3, #1
 800fef4:	b2da      	uxtb	r2, r3
 800fef6:	4b2b      	ldr	r3, [pc, #172]	; (800ffa4 <tcp_fasttmr+0xbc>)
 800fef8:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800fefa:	4b2b      	ldr	r3, [pc, #172]	; (800ffa8 <tcp_fasttmr+0xc0>)
 800fefc:	681b      	ldr	r3, [r3, #0]
 800fefe:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800ff00:	e048      	b.n	800ff94 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	7f9a      	ldrb	r2, [r3, #30]
 800ff06:	4b27      	ldr	r3, [pc, #156]	; (800ffa4 <tcp_fasttmr+0xbc>)
 800ff08:	781b      	ldrb	r3, [r3, #0]
 800ff0a:	429a      	cmp	r2, r3
 800ff0c:	d03f      	beq.n	800ff8e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800ff0e:	4b25      	ldr	r3, [pc, #148]	; (800ffa4 <tcp_fasttmr+0xbc>)
 800ff10:	781a      	ldrb	r2, [r3, #0]
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	8b5b      	ldrh	r3, [r3, #26]
 800ff1a:	f003 0301 	and.w	r3, r3, #1
 800ff1e:	2b00      	cmp	r3, #0
 800ff20:	d010      	beq.n	800ff44 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	8b5b      	ldrh	r3, [r3, #26]
 800ff26:	f043 0302 	orr.w	r3, r3, #2
 800ff2a:	b29a      	uxth	r2, r3
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800ff30:	6878      	ldr	r0, [r7, #4]
 800ff32:	f003 faeb 	bl	801350c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	8b5b      	ldrh	r3, [r3, #26]
 800ff3a:	f023 0303 	bic.w	r3, r3, #3
 800ff3e:	b29a      	uxth	r2, r3
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	8b5b      	ldrh	r3, [r3, #26]
 800ff48:	f003 0308 	and.w	r3, r3, #8
 800ff4c:	2b00      	cmp	r3, #0
 800ff4e:	d009      	beq.n	800ff64 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	8b5b      	ldrh	r3, [r3, #26]
 800ff54:	f023 0308 	bic.w	r3, r3, #8
 800ff58:	b29a      	uxth	r2, r3
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800ff5e:	6878      	ldr	r0, [r7, #4]
 800ff60:	f7ff fa76 	bl	800f450 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	68db      	ldr	r3, [r3, #12]
 800ff68:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ff6e:	2b00      	cmp	r3, #0
 800ff70:	d00a      	beq.n	800ff88 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800ff72:	4b0e      	ldr	r3, [pc, #56]	; (800ffac <tcp_fasttmr+0xc4>)
 800ff74:	2200      	movs	r2, #0
 800ff76:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800ff78:	6878      	ldr	r0, [r7, #4]
 800ff7a:	f000 f819 	bl	800ffb0 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800ff7e:	4b0b      	ldr	r3, [pc, #44]	; (800ffac <tcp_fasttmr+0xc4>)
 800ff80:	781b      	ldrb	r3, [r3, #0]
 800ff82:	2b00      	cmp	r3, #0
 800ff84:	d000      	beq.n	800ff88 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800ff86:	e7b8      	b.n	800fefa <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800ff88:	683b      	ldr	r3, [r7, #0]
 800ff8a:	607b      	str	r3, [r7, #4]
 800ff8c:	e002      	b.n	800ff94 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	68db      	ldr	r3, [r3, #12]
 800ff92:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	2b00      	cmp	r3, #0
 800ff98:	d1b3      	bne.n	800ff02 <tcp_fasttmr+0x1a>
    }
  }
}
 800ff9a:	bf00      	nop
 800ff9c:	bf00      	nop
 800ff9e:	3708      	adds	r7, #8
 800ffa0:	46bd      	mov	sp, r7
 800ffa2:	bd80      	pop	{r7, pc}
 800ffa4:	20013ada 	.word	0x20013ada
 800ffa8:	20013ad0 	.word	0x20013ad0
 800ffac:	20013ad8 	.word	0x20013ad8

0800ffb0 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800ffb0:	b590      	push	{r4, r7, lr}
 800ffb2:	b085      	sub	sp, #20
 800ffb4:	af00      	add	r7, sp, #0
 800ffb6:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	2b00      	cmp	r3, #0
 800ffbc:	d109      	bne.n	800ffd2 <tcp_process_refused_data+0x22>
 800ffbe:	4b38      	ldr	r3, [pc, #224]	; (80100a0 <tcp_process_refused_data+0xf0>)
 800ffc0:	f240 6209 	movw	r2, #1545	; 0x609
 800ffc4:	4937      	ldr	r1, [pc, #220]	; (80100a4 <tcp_process_refused_data+0xf4>)
 800ffc6:	4838      	ldr	r0, [pc, #224]	; (80100a8 <tcp_process_refused_data+0xf8>)
 800ffc8:	f009 ff9a 	bl	8019f00 <iprintf>
 800ffcc:	f06f 030f 	mvn.w	r3, #15
 800ffd0:	e061      	b.n	8010096 <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ffd6:	7b5b      	ldrb	r3, [r3, #13]
 800ffd8:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ffde:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	2200      	movs	r2, #0
 800ffe4:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ffec:	2b00      	cmp	r3, #0
 800ffee:	d00b      	beq.n	8010008 <tcp_process_refused_data+0x58>
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	6918      	ldr	r0, [r3, #16]
 800fffa:	2300      	movs	r3, #0
 800fffc:	68ba      	ldr	r2, [r7, #8]
 800fffe:	6879      	ldr	r1, [r7, #4]
 8010000:	47a0      	blx	r4
 8010002:	4603      	mov	r3, r0
 8010004:	73fb      	strb	r3, [r7, #15]
 8010006:	e007      	b.n	8010018 <tcp_process_refused_data+0x68>
 8010008:	2300      	movs	r3, #0
 801000a:	68ba      	ldr	r2, [r7, #8]
 801000c:	6879      	ldr	r1, [r7, #4]
 801000e:	2000      	movs	r0, #0
 8010010:	f000 f8a6 	bl	8010160 <tcp_recv_null>
 8010014:	4603      	mov	r3, r0
 8010016:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8010018:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801001c:	2b00      	cmp	r3, #0
 801001e:	d12b      	bne.n	8010078 <tcp_process_refused_data+0xc8>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8010020:	7bbb      	ldrb	r3, [r7, #14]
 8010022:	f003 0320 	and.w	r3, r3, #32
 8010026:	2b00      	cmp	r3, #0
 8010028:	d034      	beq.n	8010094 <tcp_process_refused_data+0xe4>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801002e:	f642 52a0 	movw	r2, #11680	; 0x2da0
 8010032:	4293      	cmp	r3, r2
 8010034:	d005      	beq.n	8010042 <tcp_process_refused_data+0x92>
          pcb->rcv_wnd++;
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801003a:	3301      	adds	r3, #1
 801003c:	b29a      	uxth	r2, r3
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010048:	2b00      	cmp	r3, #0
 801004a:	d00b      	beq.n	8010064 <tcp_process_refused_data+0xb4>
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	6918      	ldr	r0, [r3, #16]
 8010056:	2300      	movs	r3, #0
 8010058:	2200      	movs	r2, #0
 801005a:	6879      	ldr	r1, [r7, #4]
 801005c:	47a0      	blx	r4
 801005e:	4603      	mov	r3, r0
 8010060:	73fb      	strb	r3, [r7, #15]
 8010062:	e001      	b.n	8010068 <tcp_process_refused_data+0xb8>
 8010064:	2300      	movs	r3, #0
 8010066:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8010068:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801006c:	f113 0f0d 	cmn.w	r3, #13
 8010070:	d110      	bne.n	8010094 <tcp_process_refused_data+0xe4>
          return ERR_ABRT;
 8010072:	f06f 030c 	mvn.w	r3, #12
 8010076:	e00e      	b.n	8010096 <tcp_process_refused_data+0xe6>
        }
      }
    } else if (err == ERR_ABRT) {
 8010078:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801007c:	f113 0f0d 	cmn.w	r3, #13
 8010080:	d102      	bne.n	8010088 <tcp_process_refused_data+0xd8>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8010082:	f06f 030c 	mvn.w	r3, #12
 8010086:	e006      	b.n	8010096 <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	68ba      	ldr	r2, [r7, #8]
 801008c:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 801008e:	f06f 0304 	mvn.w	r3, #4
 8010092:	e000      	b.n	8010096 <tcp_process_refused_data+0xe6>
    }
  }
  return ERR_OK;
 8010094:	2300      	movs	r3, #0
}
 8010096:	4618      	mov	r0, r3
 8010098:	3714      	adds	r7, #20
 801009a:	46bd      	mov	sp, r7
 801009c:	bd90      	pop	{r4, r7, pc}
 801009e:	bf00      	nop
 80100a0:	0801c6b4 	.word	0x0801c6b4
 80100a4:	0801cbc4 	.word	0x0801cbc4
 80100a8:	0801c6f8 	.word	0x0801c6f8

080100ac <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 80100ac:	b580      	push	{r7, lr}
 80100ae:	b084      	sub	sp, #16
 80100b0:	af00      	add	r7, sp, #0
 80100b2:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 80100b4:	e007      	b.n	80100c6 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	681b      	ldr	r3, [r3, #0]
 80100ba:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 80100bc:	6878      	ldr	r0, [r7, #4]
 80100be:	f000 f80a 	bl	80100d6 <tcp_seg_free>
    seg = next;
 80100c2:	68fb      	ldr	r3, [r7, #12]
 80100c4:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	2b00      	cmp	r3, #0
 80100ca:	d1f4      	bne.n	80100b6 <tcp_segs_free+0xa>
  }
}
 80100cc:	bf00      	nop
 80100ce:	bf00      	nop
 80100d0:	3710      	adds	r7, #16
 80100d2:	46bd      	mov	sp, r7
 80100d4:	bd80      	pop	{r7, pc}

080100d6 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 80100d6:	b580      	push	{r7, lr}
 80100d8:	b082      	sub	sp, #8
 80100da:	af00      	add	r7, sp, #0
 80100dc:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	2b00      	cmp	r3, #0
 80100e2:	d00c      	beq.n	80100fe <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	685b      	ldr	r3, [r3, #4]
 80100e8:	2b00      	cmp	r3, #0
 80100ea:	d004      	beq.n	80100f6 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	685b      	ldr	r3, [r3, #4]
 80100f0:	4618      	mov	r0, r3
 80100f2:	f7fe fbc9 	bl	800e888 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 80100f6:	6879      	ldr	r1, [r7, #4]
 80100f8:	2003      	movs	r0, #3
 80100fa:	f7fd fd23 	bl	800db44 <memp_free>
  }
}
 80100fe:	bf00      	nop
 8010100:	3708      	adds	r7, #8
 8010102:	46bd      	mov	sp, r7
 8010104:	bd80      	pop	{r7, pc}
	...

08010108 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8010108:	b580      	push	{r7, lr}
 801010a:	b084      	sub	sp, #16
 801010c:	af00      	add	r7, sp, #0
 801010e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	2b00      	cmp	r3, #0
 8010114:	d106      	bne.n	8010124 <tcp_seg_copy+0x1c>
 8010116:	4b0f      	ldr	r3, [pc, #60]	; (8010154 <tcp_seg_copy+0x4c>)
 8010118:	f240 6282 	movw	r2, #1666	; 0x682
 801011c:	490e      	ldr	r1, [pc, #56]	; (8010158 <tcp_seg_copy+0x50>)
 801011e:	480f      	ldr	r0, [pc, #60]	; (801015c <tcp_seg_copy+0x54>)
 8010120:	f009 feee 	bl	8019f00 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8010124:	2003      	movs	r0, #3
 8010126:	f7fd fcbb 	bl	800daa0 <memp_malloc>
 801012a:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 801012c:	68fb      	ldr	r3, [r7, #12]
 801012e:	2b00      	cmp	r3, #0
 8010130:	d101      	bne.n	8010136 <tcp_seg_copy+0x2e>
    return NULL;
 8010132:	2300      	movs	r3, #0
 8010134:	e00a      	b.n	801014c <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8010136:	2214      	movs	r2, #20
 8010138:	6879      	ldr	r1, [r7, #4]
 801013a:	68f8      	ldr	r0, [r7, #12]
 801013c:	f009 fdea 	bl	8019d14 <memcpy>
  pbuf_ref(cseg->p);
 8010140:	68fb      	ldr	r3, [r7, #12]
 8010142:	685b      	ldr	r3, [r3, #4]
 8010144:	4618      	mov	r0, r3
 8010146:	f7fe fc45 	bl	800e9d4 <pbuf_ref>
  return cseg;
 801014a:	68fb      	ldr	r3, [r7, #12]
}
 801014c:	4618      	mov	r0, r3
 801014e:	3710      	adds	r7, #16
 8010150:	46bd      	mov	sp, r7
 8010152:	bd80      	pop	{r7, pc}
 8010154:	0801c6b4 	.word	0x0801c6b4
 8010158:	0801cc08 	.word	0x0801cc08
 801015c:	0801c6f8 	.word	0x0801c6f8

08010160 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8010160:	b580      	push	{r7, lr}
 8010162:	b084      	sub	sp, #16
 8010164:	af00      	add	r7, sp, #0
 8010166:	60f8      	str	r0, [r7, #12]
 8010168:	60b9      	str	r1, [r7, #8]
 801016a:	607a      	str	r2, [r7, #4]
 801016c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 801016e:	68bb      	ldr	r3, [r7, #8]
 8010170:	2b00      	cmp	r3, #0
 8010172:	d109      	bne.n	8010188 <tcp_recv_null+0x28>
 8010174:	4b12      	ldr	r3, [pc, #72]	; (80101c0 <tcp_recv_null+0x60>)
 8010176:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801017a:	4912      	ldr	r1, [pc, #72]	; (80101c4 <tcp_recv_null+0x64>)
 801017c:	4812      	ldr	r0, [pc, #72]	; (80101c8 <tcp_recv_null+0x68>)
 801017e:	f009 febf 	bl	8019f00 <iprintf>
 8010182:	f06f 030f 	mvn.w	r3, #15
 8010186:	e016      	b.n	80101b6 <tcp_recv_null+0x56>

  if (p != NULL) {
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	2b00      	cmp	r3, #0
 801018c:	d009      	beq.n	80101a2 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	891b      	ldrh	r3, [r3, #8]
 8010192:	4619      	mov	r1, r3
 8010194:	68b8      	ldr	r0, [r7, #8]
 8010196:	f7ff fb15 	bl	800f7c4 <tcp_recved>
    pbuf_free(p);
 801019a:	6878      	ldr	r0, [r7, #4]
 801019c:	f7fe fb74 	bl	800e888 <pbuf_free>
 80101a0:	e008      	b.n	80101b4 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 80101a2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80101a6:	2b00      	cmp	r3, #0
 80101a8:	d104      	bne.n	80101b4 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 80101aa:	68b8      	ldr	r0, [r7, #8]
 80101ac:	f7ff f9ba 	bl	800f524 <tcp_close>
 80101b0:	4603      	mov	r3, r0
 80101b2:	e000      	b.n	80101b6 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 80101b4:	2300      	movs	r3, #0
}
 80101b6:	4618      	mov	r0, r3
 80101b8:	3710      	adds	r7, #16
 80101ba:	46bd      	mov	sp, r7
 80101bc:	bd80      	pop	{r7, pc}
 80101be:	bf00      	nop
 80101c0:	0801c6b4 	.word	0x0801c6b4
 80101c4:	0801cc24 	.word	0x0801cc24
 80101c8:	0801c6f8 	.word	0x0801c6f8

080101cc <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 80101cc:	b580      	push	{r7, lr}
 80101ce:	b086      	sub	sp, #24
 80101d0:	af00      	add	r7, sp, #0
 80101d2:	4603      	mov	r3, r0
 80101d4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 80101d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80101da:	2b00      	cmp	r3, #0
 80101dc:	db01      	blt.n	80101e2 <tcp_kill_prio+0x16>
 80101de:	79fb      	ldrb	r3, [r7, #7]
 80101e0:	e000      	b.n	80101e4 <tcp_kill_prio+0x18>
 80101e2:	237f      	movs	r3, #127	; 0x7f
 80101e4:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 80101e6:	7afb      	ldrb	r3, [r7, #11]
 80101e8:	2b00      	cmp	r3, #0
 80101ea:	d034      	beq.n	8010256 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 80101ec:	7afb      	ldrb	r3, [r7, #11]
 80101ee:	3b01      	subs	r3, #1
 80101f0:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 80101f2:	2300      	movs	r3, #0
 80101f4:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80101f6:	2300      	movs	r3, #0
 80101f8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80101fa:	4b19      	ldr	r3, [pc, #100]	; (8010260 <tcp_kill_prio+0x94>)
 80101fc:	681b      	ldr	r3, [r3, #0]
 80101fe:	617b      	str	r3, [r7, #20]
 8010200:	e01f      	b.n	8010242 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8010202:	697b      	ldr	r3, [r7, #20]
 8010204:	7d5b      	ldrb	r3, [r3, #21]
 8010206:	7afa      	ldrb	r2, [r7, #11]
 8010208:	429a      	cmp	r2, r3
 801020a:	d80c      	bhi.n	8010226 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801020c:	697b      	ldr	r3, [r7, #20]
 801020e:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8010210:	7afa      	ldrb	r2, [r7, #11]
 8010212:	429a      	cmp	r2, r3
 8010214:	d112      	bne.n	801023c <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8010216:	4b13      	ldr	r3, [pc, #76]	; (8010264 <tcp_kill_prio+0x98>)
 8010218:	681a      	ldr	r2, [r3, #0]
 801021a:	697b      	ldr	r3, [r7, #20]
 801021c:	6a1b      	ldr	r3, [r3, #32]
 801021e:	1ad3      	subs	r3, r2, r3
 8010220:	68fa      	ldr	r2, [r7, #12]
 8010222:	429a      	cmp	r2, r3
 8010224:	d80a      	bhi.n	801023c <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8010226:	4b0f      	ldr	r3, [pc, #60]	; (8010264 <tcp_kill_prio+0x98>)
 8010228:	681a      	ldr	r2, [r3, #0]
 801022a:	697b      	ldr	r3, [r7, #20]
 801022c:	6a1b      	ldr	r3, [r3, #32]
 801022e:	1ad3      	subs	r3, r2, r3
 8010230:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8010232:	697b      	ldr	r3, [r7, #20]
 8010234:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8010236:	697b      	ldr	r3, [r7, #20]
 8010238:	7d5b      	ldrb	r3, [r3, #21]
 801023a:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801023c:	697b      	ldr	r3, [r7, #20]
 801023e:	68db      	ldr	r3, [r3, #12]
 8010240:	617b      	str	r3, [r7, #20]
 8010242:	697b      	ldr	r3, [r7, #20]
 8010244:	2b00      	cmp	r3, #0
 8010246:	d1dc      	bne.n	8010202 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8010248:	693b      	ldr	r3, [r7, #16]
 801024a:	2b00      	cmp	r3, #0
 801024c:	d004      	beq.n	8010258 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 801024e:	6938      	ldr	r0, [r7, #16]
 8010250:	f7ff fa52 	bl	800f6f8 <tcp_abort>
 8010254:	e000      	b.n	8010258 <tcp_kill_prio+0x8c>
    return;
 8010256:	bf00      	nop
  }
}
 8010258:	3718      	adds	r7, #24
 801025a:	46bd      	mov	sp, r7
 801025c:	bd80      	pop	{r7, pc}
 801025e:	bf00      	nop
 8010260:	20013ad0 	.word	0x20013ad0
 8010264:	20013ac4 	.word	0x20013ac4

08010268 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8010268:	b580      	push	{r7, lr}
 801026a:	b086      	sub	sp, #24
 801026c:	af00      	add	r7, sp, #0
 801026e:	4603      	mov	r3, r0
 8010270:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8010272:	79fb      	ldrb	r3, [r7, #7]
 8010274:	2b08      	cmp	r3, #8
 8010276:	d009      	beq.n	801028c <tcp_kill_state+0x24>
 8010278:	79fb      	ldrb	r3, [r7, #7]
 801027a:	2b09      	cmp	r3, #9
 801027c:	d006      	beq.n	801028c <tcp_kill_state+0x24>
 801027e:	4b1a      	ldr	r3, [pc, #104]	; (80102e8 <tcp_kill_state+0x80>)
 8010280:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8010284:	4919      	ldr	r1, [pc, #100]	; (80102ec <tcp_kill_state+0x84>)
 8010286:	481a      	ldr	r0, [pc, #104]	; (80102f0 <tcp_kill_state+0x88>)
 8010288:	f009 fe3a 	bl	8019f00 <iprintf>

  inactivity = 0;
 801028c:	2300      	movs	r3, #0
 801028e:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8010290:	2300      	movs	r3, #0
 8010292:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010294:	4b17      	ldr	r3, [pc, #92]	; (80102f4 <tcp_kill_state+0x8c>)
 8010296:	681b      	ldr	r3, [r3, #0]
 8010298:	617b      	str	r3, [r7, #20]
 801029a:	e017      	b.n	80102cc <tcp_kill_state+0x64>
    if (pcb->state == state) {
 801029c:	697b      	ldr	r3, [r7, #20]
 801029e:	7d1b      	ldrb	r3, [r3, #20]
 80102a0:	79fa      	ldrb	r2, [r7, #7]
 80102a2:	429a      	cmp	r2, r3
 80102a4:	d10f      	bne.n	80102c6 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80102a6:	4b14      	ldr	r3, [pc, #80]	; (80102f8 <tcp_kill_state+0x90>)
 80102a8:	681a      	ldr	r2, [r3, #0]
 80102aa:	697b      	ldr	r3, [r7, #20]
 80102ac:	6a1b      	ldr	r3, [r3, #32]
 80102ae:	1ad3      	subs	r3, r2, r3
 80102b0:	68fa      	ldr	r2, [r7, #12]
 80102b2:	429a      	cmp	r2, r3
 80102b4:	d807      	bhi.n	80102c6 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 80102b6:	4b10      	ldr	r3, [pc, #64]	; (80102f8 <tcp_kill_state+0x90>)
 80102b8:	681a      	ldr	r2, [r3, #0]
 80102ba:	697b      	ldr	r3, [r7, #20]
 80102bc:	6a1b      	ldr	r3, [r3, #32]
 80102be:	1ad3      	subs	r3, r2, r3
 80102c0:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 80102c2:	697b      	ldr	r3, [r7, #20]
 80102c4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80102c6:	697b      	ldr	r3, [r7, #20]
 80102c8:	68db      	ldr	r3, [r3, #12]
 80102ca:	617b      	str	r3, [r7, #20]
 80102cc:	697b      	ldr	r3, [r7, #20]
 80102ce:	2b00      	cmp	r3, #0
 80102d0:	d1e4      	bne.n	801029c <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 80102d2:	693b      	ldr	r3, [r7, #16]
 80102d4:	2b00      	cmp	r3, #0
 80102d6:	d003      	beq.n	80102e0 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 80102d8:	2100      	movs	r1, #0
 80102da:	6938      	ldr	r0, [r7, #16]
 80102dc:	f7ff f94e 	bl	800f57c <tcp_abandon>
  }
}
 80102e0:	bf00      	nop
 80102e2:	3718      	adds	r7, #24
 80102e4:	46bd      	mov	sp, r7
 80102e6:	bd80      	pop	{r7, pc}
 80102e8:	0801c6b4 	.word	0x0801c6b4
 80102ec:	0801cc40 	.word	0x0801cc40
 80102f0:	0801c6f8 	.word	0x0801c6f8
 80102f4:	20013ad0 	.word	0x20013ad0
 80102f8:	20013ac4 	.word	0x20013ac4

080102fc <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 80102fc:	b580      	push	{r7, lr}
 80102fe:	b084      	sub	sp, #16
 8010300:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8010302:	2300      	movs	r3, #0
 8010304:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8010306:	2300      	movs	r3, #0
 8010308:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801030a:	4b12      	ldr	r3, [pc, #72]	; (8010354 <tcp_kill_timewait+0x58>)
 801030c:	681b      	ldr	r3, [r3, #0]
 801030e:	60fb      	str	r3, [r7, #12]
 8010310:	e012      	b.n	8010338 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8010312:	4b11      	ldr	r3, [pc, #68]	; (8010358 <tcp_kill_timewait+0x5c>)
 8010314:	681a      	ldr	r2, [r3, #0]
 8010316:	68fb      	ldr	r3, [r7, #12]
 8010318:	6a1b      	ldr	r3, [r3, #32]
 801031a:	1ad3      	subs	r3, r2, r3
 801031c:	687a      	ldr	r2, [r7, #4]
 801031e:	429a      	cmp	r2, r3
 8010320:	d807      	bhi.n	8010332 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8010322:	4b0d      	ldr	r3, [pc, #52]	; (8010358 <tcp_kill_timewait+0x5c>)
 8010324:	681a      	ldr	r2, [r3, #0]
 8010326:	68fb      	ldr	r3, [r7, #12]
 8010328:	6a1b      	ldr	r3, [r3, #32]
 801032a:	1ad3      	subs	r3, r2, r3
 801032c:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 801032e:	68fb      	ldr	r3, [r7, #12]
 8010330:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010332:	68fb      	ldr	r3, [r7, #12]
 8010334:	68db      	ldr	r3, [r3, #12]
 8010336:	60fb      	str	r3, [r7, #12]
 8010338:	68fb      	ldr	r3, [r7, #12]
 801033a:	2b00      	cmp	r3, #0
 801033c:	d1e9      	bne.n	8010312 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 801033e:	68bb      	ldr	r3, [r7, #8]
 8010340:	2b00      	cmp	r3, #0
 8010342:	d002      	beq.n	801034a <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8010344:	68b8      	ldr	r0, [r7, #8]
 8010346:	f7ff f9d7 	bl	800f6f8 <tcp_abort>
  }
}
 801034a:	bf00      	nop
 801034c:	3710      	adds	r7, #16
 801034e:	46bd      	mov	sp, r7
 8010350:	bd80      	pop	{r7, pc}
 8010352:	bf00      	nop
 8010354:	20013ad4 	.word	0x20013ad4
 8010358:	20013ac4 	.word	0x20013ac4

0801035c <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 801035c:	b580      	push	{r7, lr}
 801035e:	b082      	sub	sp, #8
 8010360:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8010362:	4b10      	ldr	r3, [pc, #64]	; (80103a4 <tcp_handle_closepend+0x48>)
 8010364:	681b      	ldr	r3, [r3, #0]
 8010366:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8010368:	e014      	b.n	8010394 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	68db      	ldr	r3, [r3, #12]
 801036e:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	8b5b      	ldrh	r3, [r3, #26]
 8010374:	f003 0308 	and.w	r3, r3, #8
 8010378:	2b00      	cmp	r3, #0
 801037a:	d009      	beq.n	8010390 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	8b5b      	ldrh	r3, [r3, #26]
 8010380:	f023 0308 	bic.w	r3, r3, #8
 8010384:	b29a      	uxth	r2, r3
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 801038a:	6878      	ldr	r0, [r7, #4]
 801038c:	f7ff f860 	bl	800f450 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8010390:	683b      	ldr	r3, [r7, #0]
 8010392:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	2b00      	cmp	r3, #0
 8010398:	d1e7      	bne.n	801036a <tcp_handle_closepend+0xe>
  }
}
 801039a:	bf00      	nop
 801039c:	bf00      	nop
 801039e:	3708      	adds	r7, #8
 80103a0:	46bd      	mov	sp, r7
 80103a2:	bd80      	pop	{r7, pc}
 80103a4:	20013ad0 	.word	0x20013ad0

080103a8 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 80103a8:	b580      	push	{r7, lr}
 80103aa:	b084      	sub	sp, #16
 80103ac:	af00      	add	r7, sp, #0
 80103ae:	4603      	mov	r3, r0
 80103b0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80103b2:	2001      	movs	r0, #1
 80103b4:	f7fd fb74 	bl	800daa0 <memp_malloc>
 80103b8:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 80103ba:	68fb      	ldr	r3, [r7, #12]
 80103bc:	2b00      	cmp	r3, #0
 80103be:	d126      	bne.n	801040e <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 80103c0:	f7ff ffcc 	bl	801035c <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 80103c4:	f7ff ff9a 	bl	80102fc <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80103c8:	2001      	movs	r0, #1
 80103ca:	f7fd fb69 	bl	800daa0 <memp_malloc>
 80103ce:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 80103d0:	68fb      	ldr	r3, [r7, #12]
 80103d2:	2b00      	cmp	r3, #0
 80103d4:	d11b      	bne.n	801040e <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 80103d6:	2009      	movs	r0, #9
 80103d8:	f7ff ff46 	bl	8010268 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80103dc:	2001      	movs	r0, #1
 80103de:	f7fd fb5f 	bl	800daa0 <memp_malloc>
 80103e2:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 80103e4:	68fb      	ldr	r3, [r7, #12]
 80103e6:	2b00      	cmp	r3, #0
 80103e8:	d111      	bne.n	801040e <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 80103ea:	2008      	movs	r0, #8
 80103ec:	f7ff ff3c 	bl	8010268 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80103f0:	2001      	movs	r0, #1
 80103f2:	f7fd fb55 	bl	800daa0 <memp_malloc>
 80103f6:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 80103f8:	68fb      	ldr	r3, [r7, #12]
 80103fa:	2b00      	cmp	r3, #0
 80103fc:	d107      	bne.n	801040e <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 80103fe:	79fb      	ldrb	r3, [r7, #7]
 8010400:	4618      	mov	r0, r3
 8010402:	f7ff fee3 	bl	80101cc <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010406:	2001      	movs	r0, #1
 8010408:	f7fd fb4a 	bl	800daa0 <memp_malloc>
 801040c:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 801040e:	68fb      	ldr	r3, [r7, #12]
 8010410:	2b00      	cmp	r3, #0
 8010412:	d03f      	beq.n	8010494 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8010414:	229c      	movs	r2, #156	; 0x9c
 8010416:	2100      	movs	r1, #0
 8010418:	68f8      	ldr	r0, [r7, #12]
 801041a:	f009 fc89 	bl	8019d30 <memset>
    pcb->prio = prio;
 801041e:	68fb      	ldr	r3, [r7, #12]
 8010420:	79fa      	ldrb	r2, [r7, #7]
 8010422:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8010424:	68fb      	ldr	r3, [r7, #12]
 8010426:	f642 52a0 	movw	r2, #11680	; 0x2da0
 801042a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801042e:	68fb      	ldr	r3, [r7, #12]
 8010430:	f642 52a0 	movw	r2, #11680	; 0x2da0
 8010434:	855a      	strh	r2, [r3, #42]	; 0x2a
 8010436:	68fb      	ldr	r3, [r7, #12]
 8010438:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801043a:	68fb      	ldr	r3, [r7, #12]
 801043c:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 801043e:	68fb      	ldr	r3, [r7, #12]
 8010440:	22ff      	movs	r2, #255	; 0xff
 8010442:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8010444:	68fb      	ldr	r3, [r7, #12]
 8010446:	f44f 7206 	mov.w	r2, #536	; 0x218
 801044a:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 801044c:	68fb      	ldr	r3, [r7, #12]
 801044e:	2206      	movs	r2, #6
 8010450:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8010454:	68fb      	ldr	r3, [r7, #12]
 8010456:	2206      	movs	r2, #6
 8010458:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 801045a:	68fb      	ldr	r3, [r7, #12]
 801045c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010460:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8010462:	68fb      	ldr	r3, [r7, #12]
 8010464:	2201      	movs	r2, #1
 8010466:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 801046a:	4b0d      	ldr	r3, [pc, #52]	; (80104a0 <tcp_alloc+0xf8>)
 801046c:	681a      	ldr	r2, [r3, #0]
 801046e:	68fb      	ldr	r3, [r7, #12]
 8010470:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8010472:	4b0c      	ldr	r3, [pc, #48]	; (80104a4 <tcp_alloc+0xfc>)
 8010474:	781a      	ldrb	r2, [r3, #0]
 8010476:	68fb      	ldr	r3, [r7, #12]
 8010478:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 801047a:	68fb      	ldr	r3, [r7, #12]
 801047c:	f642 52a0 	movw	r2, #11680	; 0x2da0
 8010480:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8010484:	68fb      	ldr	r3, [r7, #12]
 8010486:	4a08      	ldr	r2, [pc, #32]	; (80104a8 <tcp_alloc+0x100>)
 8010488:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 801048c:	68fb      	ldr	r3, [r7, #12]
 801048e:	4a07      	ldr	r2, [pc, #28]	; (80104ac <tcp_alloc+0x104>)
 8010490:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8010494:	68fb      	ldr	r3, [r7, #12]
}
 8010496:	4618      	mov	r0, r3
 8010498:	3710      	adds	r7, #16
 801049a:	46bd      	mov	sp, r7
 801049c:	bd80      	pop	{r7, pc}
 801049e:	bf00      	nop
 80104a0:	20013ac4 	.word	0x20013ac4
 80104a4:	20013ada 	.word	0x20013ada
 80104a8:	08010161 	.word	0x08010161
 80104ac:	006ddd00 	.word	0x006ddd00

080104b0 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 80104b0:	b580      	push	{r7, lr}
 80104b2:	b082      	sub	sp, #8
 80104b4:	af00      	add	r7, sp, #0
 80104b6:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	2b00      	cmp	r3, #0
 80104bc:	d107      	bne.n	80104ce <tcp_pcb_purge+0x1e>
 80104be:	4b21      	ldr	r3, [pc, #132]	; (8010544 <tcp_pcb_purge+0x94>)
 80104c0:	f640 0251 	movw	r2, #2129	; 0x851
 80104c4:	4920      	ldr	r1, [pc, #128]	; (8010548 <tcp_pcb_purge+0x98>)
 80104c6:	4821      	ldr	r0, [pc, #132]	; (801054c <tcp_pcb_purge+0x9c>)
 80104c8:	f009 fd1a 	bl	8019f00 <iprintf>
 80104cc:	e037      	b.n	801053e <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	7d1b      	ldrb	r3, [r3, #20]
 80104d2:	2b00      	cmp	r3, #0
 80104d4:	d033      	beq.n	801053e <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 80104da:	2b0a      	cmp	r3, #10
 80104dc:	d02f      	beq.n	801053e <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 80104e2:	2b01      	cmp	r3, #1
 80104e4:	d02b      	beq.n	801053e <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80104ea:	2b00      	cmp	r3, #0
 80104ec:	d007      	beq.n	80104fe <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80104f2:	4618      	mov	r0, r3
 80104f4:	f7fe f9c8 	bl	800e888 <pbuf_free>
      pcb->refused_data = NULL;
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	2200      	movs	r2, #0
 80104fc:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010502:	2b00      	cmp	r3, #0
 8010504:	d002      	beq.n	801050c <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8010506:	6878      	ldr	r0, [r7, #4]
 8010508:	f000 f986 	bl	8010818 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010512:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010518:	4618      	mov	r0, r3
 801051a:	f7ff fdc7 	bl	80100ac <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010522:	4618      	mov	r0, r3
 8010524:	f7ff fdc2 	bl	80100ac <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	2200      	movs	r2, #0
 801052c:	66da      	str	r2, [r3, #108]	; 0x6c
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	2200      	movs	r2, #0
 801053a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 801053e:	3708      	adds	r7, #8
 8010540:	46bd      	mov	sp, r7
 8010542:	bd80      	pop	{r7, pc}
 8010544:	0801c6b4 	.word	0x0801c6b4
 8010548:	0801cd00 	.word	0x0801cd00
 801054c:	0801c6f8 	.word	0x0801c6f8

08010550 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8010550:	b580      	push	{r7, lr}
 8010552:	b084      	sub	sp, #16
 8010554:	af00      	add	r7, sp, #0
 8010556:	6078      	str	r0, [r7, #4]
 8010558:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 801055a:	683b      	ldr	r3, [r7, #0]
 801055c:	2b00      	cmp	r3, #0
 801055e:	d106      	bne.n	801056e <tcp_pcb_remove+0x1e>
 8010560:	4b3e      	ldr	r3, [pc, #248]	; (801065c <tcp_pcb_remove+0x10c>)
 8010562:	f640 0283 	movw	r2, #2179	; 0x883
 8010566:	493e      	ldr	r1, [pc, #248]	; (8010660 <tcp_pcb_remove+0x110>)
 8010568:	483e      	ldr	r0, [pc, #248]	; (8010664 <tcp_pcb_remove+0x114>)
 801056a:	f009 fcc9 	bl	8019f00 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	2b00      	cmp	r3, #0
 8010572:	d106      	bne.n	8010582 <tcp_pcb_remove+0x32>
 8010574:	4b39      	ldr	r3, [pc, #228]	; (801065c <tcp_pcb_remove+0x10c>)
 8010576:	f640 0284 	movw	r2, #2180	; 0x884
 801057a:	493b      	ldr	r1, [pc, #236]	; (8010668 <tcp_pcb_remove+0x118>)
 801057c:	4839      	ldr	r0, [pc, #228]	; (8010664 <tcp_pcb_remove+0x114>)
 801057e:	f009 fcbf 	bl	8019f00 <iprintf>

  TCP_RMV(pcblist, pcb);
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	681b      	ldr	r3, [r3, #0]
 8010586:	683a      	ldr	r2, [r7, #0]
 8010588:	429a      	cmp	r2, r3
 801058a:	d105      	bne.n	8010598 <tcp_pcb_remove+0x48>
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	681b      	ldr	r3, [r3, #0]
 8010590:	68da      	ldr	r2, [r3, #12]
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	601a      	str	r2, [r3, #0]
 8010596:	e013      	b.n	80105c0 <tcp_pcb_remove+0x70>
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	681b      	ldr	r3, [r3, #0]
 801059c:	60fb      	str	r3, [r7, #12]
 801059e:	e00c      	b.n	80105ba <tcp_pcb_remove+0x6a>
 80105a0:	68fb      	ldr	r3, [r7, #12]
 80105a2:	68db      	ldr	r3, [r3, #12]
 80105a4:	683a      	ldr	r2, [r7, #0]
 80105a6:	429a      	cmp	r2, r3
 80105a8:	d104      	bne.n	80105b4 <tcp_pcb_remove+0x64>
 80105aa:	683b      	ldr	r3, [r7, #0]
 80105ac:	68da      	ldr	r2, [r3, #12]
 80105ae:	68fb      	ldr	r3, [r7, #12]
 80105b0:	60da      	str	r2, [r3, #12]
 80105b2:	e005      	b.n	80105c0 <tcp_pcb_remove+0x70>
 80105b4:	68fb      	ldr	r3, [r7, #12]
 80105b6:	68db      	ldr	r3, [r3, #12]
 80105b8:	60fb      	str	r3, [r7, #12]
 80105ba:	68fb      	ldr	r3, [r7, #12]
 80105bc:	2b00      	cmp	r3, #0
 80105be:	d1ef      	bne.n	80105a0 <tcp_pcb_remove+0x50>
 80105c0:	683b      	ldr	r3, [r7, #0]
 80105c2:	2200      	movs	r2, #0
 80105c4:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 80105c6:	6838      	ldr	r0, [r7, #0]
 80105c8:	f7ff ff72 	bl	80104b0 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 80105cc:	683b      	ldr	r3, [r7, #0]
 80105ce:	7d1b      	ldrb	r3, [r3, #20]
 80105d0:	2b0a      	cmp	r3, #10
 80105d2:	d013      	beq.n	80105fc <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 80105d4:	683b      	ldr	r3, [r7, #0]
 80105d6:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 80105d8:	2b01      	cmp	r3, #1
 80105da:	d00f      	beq.n	80105fc <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 80105dc:	683b      	ldr	r3, [r7, #0]
 80105de:	8b5b      	ldrh	r3, [r3, #26]
 80105e0:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 80105e4:	2b00      	cmp	r3, #0
 80105e6:	d009      	beq.n	80105fc <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 80105e8:	683b      	ldr	r3, [r7, #0]
 80105ea:	8b5b      	ldrh	r3, [r3, #26]
 80105ec:	f043 0302 	orr.w	r3, r3, #2
 80105f0:	b29a      	uxth	r2, r3
 80105f2:	683b      	ldr	r3, [r7, #0]
 80105f4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80105f6:	6838      	ldr	r0, [r7, #0]
 80105f8:	f002 ff88 	bl	801350c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 80105fc:	683b      	ldr	r3, [r7, #0]
 80105fe:	7d1b      	ldrb	r3, [r3, #20]
 8010600:	2b01      	cmp	r3, #1
 8010602:	d020      	beq.n	8010646 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8010604:	683b      	ldr	r3, [r7, #0]
 8010606:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010608:	2b00      	cmp	r3, #0
 801060a:	d006      	beq.n	801061a <tcp_pcb_remove+0xca>
 801060c:	4b13      	ldr	r3, [pc, #76]	; (801065c <tcp_pcb_remove+0x10c>)
 801060e:	f640 0293 	movw	r2, #2195	; 0x893
 8010612:	4916      	ldr	r1, [pc, #88]	; (801066c <tcp_pcb_remove+0x11c>)
 8010614:	4813      	ldr	r0, [pc, #76]	; (8010664 <tcp_pcb_remove+0x114>)
 8010616:	f009 fc73 	bl	8019f00 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 801061a:	683b      	ldr	r3, [r7, #0]
 801061c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801061e:	2b00      	cmp	r3, #0
 8010620:	d006      	beq.n	8010630 <tcp_pcb_remove+0xe0>
 8010622:	4b0e      	ldr	r3, [pc, #56]	; (801065c <tcp_pcb_remove+0x10c>)
 8010624:	f640 0294 	movw	r2, #2196	; 0x894
 8010628:	4911      	ldr	r1, [pc, #68]	; (8010670 <tcp_pcb_remove+0x120>)
 801062a:	480e      	ldr	r0, [pc, #56]	; (8010664 <tcp_pcb_remove+0x114>)
 801062c:	f009 fc68 	bl	8019f00 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8010630:	683b      	ldr	r3, [r7, #0]
 8010632:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010634:	2b00      	cmp	r3, #0
 8010636:	d006      	beq.n	8010646 <tcp_pcb_remove+0xf6>
 8010638:	4b08      	ldr	r3, [pc, #32]	; (801065c <tcp_pcb_remove+0x10c>)
 801063a:	f640 0296 	movw	r2, #2198	; 0x896
 801063e:	490d      	ldr	r1, [pc, #52]	; (8010674 <tcp_pcb_remove+0x124>)
 8010640:	4808      	ldr	r0, [pc, #32]	; (8010664 <tcp_pcb_remove+0x114>)
 8010642:	f009 fc5d 	bl	8019f00 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8010646:	683b      	ldr	r3, [r7, #0]
 8010648:	2200      	movs	r2, #0
 801064a:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 801064c:	683b      	ldr	r3, [r7, #0]
 801064e:	2200      	movs	r2, #0
 8010650:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8010652:	bf00      	nop
 8010654:	3710      	adds	r7, #16
 8010656:	46bd      	mov	sp, r7
 8010658:	bd80      	pop	{r7, pc}
 801065a:	bf00      	nop
 801065c:	0801c6b4 	.word	0x0801c6b4
 8010660:	0801cd1c 	.word	0x0801cd1c
 8010664:	0801c6f8 	.word	0x0801c6f8
 8010668:	0801cd38 	.word	0x0801cd38
 801066c:	0801cd58 	.word	0x0801cd58
 8010670:	0801cd70 	.word	0x0801cd70
 8010674:	0801cd8c 	.word	0x0801cd8c

08010678 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8010678:	b580      	push	{r7, lr}
 801067a:	b082      	sub	sp, #8
 801067c:	af00      	add	r7, sp, #0
 801067e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	2b00      	cmp	r3, #0
 8010684:	d106      	bne.n	8010694 <tcp_next_iss+0x1c>
 8010686:	4b0a      	ldr	r3, [pc, #40]	; (80106b0 <tcp_next_iss+0x38>)
 8010688:	f640 02af 	movw	r2, #2223	; 0x8af
 801068c:	4909      	ldr	r1, [pc, #36]	; (80106b4 <tcp_next_iss+0x3c>)
 801068e:	480a      	ldr	r0, [pc, #40]	; (80106b8 <tcp_next_iss+0x40>)
 8010690:	f009 fc36 	bl	8019f00 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8010694:	4b09      	ldr	r3, [pc, #36]	; (80106bc <tcp_next_iss+0x44>)
 8010696:	681a      	ldr	r2, [r3, #0]
 8010698:	4b09      	ldr	r3, [pc, #36]	; (80106c0 <tcp_next_iss+0x48>)
 801069a:	681b      	ldr	r3, [r3, #0]
 801069c:	4413      	add	r3, r2
 801069e:	4a07      	ldr	r2, [pc, #28]	; (80106bc <tcp_next_iss+0x44>)
 80106a0:	6013      	str	r3, [r2, #0]
  return iss;
 80106a2:	4b06      	ldr	r3, [pc, #24]	; (80106bc <tcp_next_iss+0x44>)
 80106a4:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 80106a6:	4618      	mov	r0, r3
 80106a8:	3708      	adds	r7, #8
 80106aa:	46bd      	mov	sp, r7
 80106ac:	bd80      	pop	{r7, pc}
 80106ae:	bf00      	nop
 80106b0:	0801c6b4 	.word	0x0801c6b4
 80106b4:	0801cda4 	.word	0x0801cda4
 80106b8:	0801c6f8 	.word	0x0801c6f8
 80106bc:	200000bc 	.word	0x200000bc
 80106c0:	20013ac4 	.word	0x20013ac4

080106c4 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 80106c4:	b580      	push	{r7, lr}
 80106c6:	b086      	sub	sp, #24
 80106c8:	af00      	add	r7, sp, #0
 80106ca:	4603      	mov	r3, r0
 80106cc:	60b9      	str	r1, [r7, #8]
 80106ce:	607a      	str	r2, [r7, #4]
 80106d0:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	2b00      	cmp	r3, #0
 80106d6:	d106      	bne.n	80106e6 <tcp_eff_send_mss_netif+0x22>
 80106d8:	4b14      	ldr	r3, [pc, #80]	; (801072c <tcp_eff_send_mss_netif+0x68>)
 80106da:	f640 02c5 	movw	r2, #2245	; 0x8c5
 80106de:	4914      	ldr	r1, [pc, #80]	; (8010730 <tcp_eff_send_mss_netif+0x6c>)
 80106e0:	4814      	ldr	r0, [pc, #80]	; (8010734 <tcp_eff_send_mss_netif+0x70>)
 80106e2:	f009 fc0d 	bl	8019f00 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 80106e6:	68bb      	ldr	r3, [r7, #8]
 80106e8:	2b00      	cmp	r3, #0
 80106ea:	d101      	bne.n	80106f0 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 80106ec:	89fb      	ldrh	r3, [r7, #14]
 80106ee:	e019      	b.n	8010724 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 80106f0:	68bb      	ldr	r3, [r7, #8]
 80106f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80106f4:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 80106f6:	8afb      	ldrh	r3, [r7, #22]
 80106f8:	2b00      	cmp	r3, #0
 80106fa:	d012      	beq.n	8010722 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 80106fc:	2328      	movs	r3, #40	; 0x28
 80106fe:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8010700:	8afa      	ldrh	r2, [r7, #22]
 8010702:	8abb      	ldrh	r3, [r7, #20]
 8010704:	429a      	cmp	r2, r3
 8010706:	d904      	bls.n	8010712 <tcp_eff_send_mss_netif+0x4e>
 8010708:	8afa      	ldrh	r2, [r7, #22]
 801070a:	8abb      	ldrh	r3, [r7, #20]
 801070c:	1ad3      	subs	r3, r2, r3
 801070e:	b29b      	uxth	r3, r3
 8010710:	e000      	b.n	8010714 <tcp_eff_send_mss_netif+0x50>
 8010712:	2300      	movs	r3, #0
 8010714:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8010716:	8a7a      	ldrh	r2, [r7, #18]
 8010718:	89fb      	ldrh	r3, [r7, #14]
 801071a:	4293      	cmp	r3, r2
 801071c:	bf28      	it	cs
 801071e:	4613      	movcs	r3, r2
 8010720:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8010722:	89fb      	ldrh	r3, [r7, #14]
}
 8010724:	4618      	mov	r0, r3
 8010726:	3718      	adds	r7, #24
 8010728:	46bd      	mov	sp, r7
 801072a:	bd80      	pop	{r7, pc}
 801072c:	0801c6b4 	.word	0x0801c6b4
 8010730:	0801cdc0 	.word	0x0801cdc0
 8010734:	0801c6f8 	.word	0x0801c6f8

08010738 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8010738:	b580      	push	{r7, lr}
 801073a:	b084      	sub	sp, #16
 801073c:	af00      	add	r7, sp, #0
 801073e:	6078      	str	r0, [r7, #4]
 8010740:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8010742:	683b      	ldr	r3, [r7, #0]
 8010744:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	2b00      	cmp	r3, #0
 801074a:	d119      	bne.n	8010780 <tcp_netif_ip_addr_changed_pcblist+0x48>
 801074c:	4b10      	ldr	r3, [pc, #64]	; (8010790 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 801074e:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8010752:	4910      	ldr	r1, [pc, #64]	; (8010794 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8010754:	4810      	ldr	r0, [pc, #64]	; (8010798 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8010756:	f009 fbd3 	bl	8019f00 <iprintf>

  while (pcb != NULL) {
 801075a:	e011      	b.n	8010780 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 801075c:	68fb      	ldr	r3, [r7, #12]
 801075e:	681a      	ldr	r2, [r3, #0]
 8010760:	687b      	ldr	r3, [r7, #4]
 8010762:	681b      	ldr	r3, [r3, #0]
 8010764:	429a      	cmp	r2, r3
 8010766:	d108      	bne.n	801077a <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8010768:	68fb      	ldr	r3, [r7, #12]
 801076a:	68db      	ldr	r3, [r3, #12]
 801076c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 801076e:	68f8      	ldr	r0, [r7, #12]
 8010770:	f7fe ffc2 	bl	800f6f8 <tcp_abort>
      pcb = next;
 8010774:	68bb      	ldr	r3, [r7, #8]
 8010776:	60fb      	str	r3, [r7, #12]
 8010778:	e002      	b.n	8010780 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 801077a:	68fb      	ldr	r3, [r7, #12]
 801077c:	68db      	ldr	r3, [r3, #12]
 801077e:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8010780:	68fb      	ldr	r3, [r7, #12]
 8010782:	2b00      	cmp	r3, #0
 8010784:	d1ea      	bne.n	801075c <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8010786:	bf00      	nop
 8010788:	bf00      	nop
 801078a:	3710      	adds	r7, #16
 801078c:	46bd      	mov	sp, r7
 801078e:	bd80      	pop	{r7, pc}
 8010790:	0801c6b4 	.word	0x0801c6b4
 8010794:	0801cde8 	.word	0x0801cde8
 8010798:	0801c6f8 	.word	0x0801c6f8

0801079c <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801079c:	b580      	push	{r7, lr}
 801079e:	b084      	sub	sp, #16
 80107a0:	af00      	add	r7, sp, #0
 80107a2:	6078      	str	r0, [r7, #4]
 80107a4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	2b00      	cmp	r3, #0
 80107aa:	d02a      	beq.n	8010802 <tcp_netif_ip_addr_changed+0x66>
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	681b      	ldr	r3, [r3, #0]
 80107b0:	2b00      	cmp	r3, #0
 80107b2:	d026      	beq.n	8010802 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80107b4:	4b15      	ldr	r3, [pc, #84]	; (801080c <tcp_netif_ip_addr_changed+0x70>)
 80107b6:	681b      	ldr	r3, [r3, #0]
 80107b8:	4619      	mov	r1, r3
 80107ba:	6878      	ldr	r0, [r7, #4]
 80107bc:	f7ff ffbc 	bl	8010738 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80107c0:	4b13      	ldr	r3, [pc, #76]	; (8010810 <tcp_netif_ip_addr_changed+0x74>)
 80107c2:	681b      	ldr	r3, [r3, #0]
 80107c4:	4619      	mov	r1, r3
 80107c6:	6878      	ldr	r0, [r7, #4]
 80107c8:	f7ff ffb6 	bl	8010738 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 80107cc:	683b      	ldr	r3, [r7, #0]
 80107ce:	2b00      	cmp	r3, #0
 80107d0:	d017      	beq.n	8010802 <tcp_netif_ip_addr_changed+0x66>
 80107d2:	683b      	ldr	r3, [r7, #0]
 80107d4:	681b      	ldr	r3, [r3, #0]
 80107d6:	2b00      	cmp	r3, #0
 80107d8:	d013      	beq.n	8010802 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80107da:	4b0e      	ldr	r3, [pc, #56]	; (8010814 <tcp_netif_ip_addr_changed+0x78>)
 80107dc:	681b      	ldr	r3, [r3, #0]
 80107de:	60fb      	str	r3, [r7, #12]
 80107e0:	e00c      	b.n	80107fc <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80107e2:	68fb      	ldr	r3, [r7, #12]
 80107e4:	681a      	ldr	r2, [r3, #0]
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	681b      	ldr	r3, [r3, #0]
 80107ea:	429a      	cmp	r2, r3
 80107ec:	d103      	bne.n	80107f6 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80107ee:	683b      	ldr	r3, [r7, #0]
 80107f0:	681a      	ldr	r2, [r3, #0]
 80107f2:	68fb      	ldr	r3, [r7, #12]
 80107f4:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80107f6:	68fb      	ldr	r3, [r7, #12]
 80107f8:	68db      	ldr	r3, [r3, #12]
 80107fa:	60fb      	str	r3, [r7, #12]
 80107fc:	68fb      	ldr	r3, [r7, #12]
 80107fe:	2b00      	cmp	r3, #0
 8010800:	d1ef      	bne.n	80107e2 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8010802:	bf00      	nop
 8010804:	3710      	adds	r7, #16
 8010806:	46bd      	mov	sp, r7
 8010808:	bd80      	pop	{r7, pc}
 801080a:	bf00      	nop
 801080c:	20013ad0 	.word	0x20013ad0
 8010810:	20013ac8 	.word	0x20013ac8
 8010814:	20013acc 	.word	0x20013acc

08010818 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8010818:	b580      	push	{r7, lr}
 801081a:	b082      	sub	sp, #8
 801081c:	af00      	add	r7, sp, #0
 801081e:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010824:	2b00      	cmp	r3, #0
 8010826:	d007      	beq.n	8010838 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801082c:	4618      	mov	r0, r3
 801082e:	f7ff fc3d 	bl	80100ac <tcp_segs_free>
    pcb->ooseq = NULL;
 8010832:	687b      	ldr	r3, [r7, #4]
 8010834:	2200      	movs	r2, #0
 8010836:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8010838:	bf00      	nop
 801083a:	3708      	adds	r7, #8
 801083c:	46bd      	mov	sp, r7
 801083e:	bd80      	pop	{r7, pc}

08010840 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8010840:	b590      	push	{r4, r7, lr}
 8010842:	b08d      	sub	sp, #52	; 0x34
 8010844:	af04      	add	r7, sp, #16
 8010846:	6078      	str	r0, [r7, #4]
 8010848:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	2b00      	cmp	r3, #0
 801084e:	d105      	bne.n	801085c <tcp_input+0x1c>
 8010850:	4b8b      	ldr	r3, [pc, #556]	; (8010a80 <tcp_input+0x240>)
 8010852:	2283      	movs	r2, #131	; 0x83
 8010854:	498b      	ldr	r1, [pc, #556]	; (8010a84 <tcp_input+0x244>)
 8010856:	488c      	ldr	r0, [pc, #560]	; (8010a88 <tcp_input+0x248>)
 8010858:	f009 fb52 	bl	8019f00 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	685b      	ldr	r3, [r3, #4]
 8010860:	4a8a      	ldr	r2, [pc, #552]	; (8010a8c <tcp_input+0x24c>)
 8010862:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	895b      	ldrh	r3, [r3, #10]
 8010868:	2b13      	cmp	r3, #19
 801086a:	f240 83e3 	bls.w	8011034 <tcp_input+0x7f4>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801086e:	4b88      	ldr	r3, [pc, #544]	; (8010a90 <tcp_input+0x250>)
 8010870:	695b      	ldr	r3, [r3, #20]
 8010872:	4a87      	ldr	r2, [pc, #540]	; (8010a90 <tcp_input+0x250>)
 8010874:	6812      	ldr	r2, [r2, #0]
 8010876:	4611      	mov	r1, r2
 8010878:	4618      	mov	r0, r3
 801087a:	f008 f85b 	bl	8018934 <ip4_addr_isbroadcast_u32>
 801087e:	4603      	mov	r3, r0
 8010880:	2b00      	cmp	r3, #0
 8010882:	f040 83d9 	bne.w	8011038 <tcp_input+0x7f8>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8010886:	4b82      	ldr	r3, [pc, #520]	; (8010a90 <tcp_input+0x250>)
 8010888:	695b      	ldr	r3, [r3, #20]
 801088a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801088e:	2be0      	cmp	r3, #224	; 0xe0
 8010890:	f000 83d2 	beq.w	8011038 <tcp_input+0x7f8>
  }

#if CHECKSUM_CHECK_TCP
  IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_TCP) {
    /* Verify TCP checksum. */
    u16_t chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	891a      	ldrh	r2, [r3, #8]
 8010898:	4b7e      	ldr	r3, [pc, #504]	; (8010a94 <tcp_input+0x254>)
 801089a:	9300      	str	r3, [sp, #0]
 801089c:	4b7e      	ldr	r3, [pc, #504]	; (8010a98 <tcp_input+0x258>)
 801089e:	2106      	movs	r1, #6
 80108a0:	6878      	ldr	r0, [r7, #4]
 80108a2:	f7fc fc01 	bl	800d0a8 <ip_chksum_pseudo>
 80108a6:	4603      	mov	r3, r0
 80108a8:	823b      	strh	r3, [r7, #16]
                                    ip_current_src_addr(), ip_current_dest_addr());
    if (chksum != 0) {
 80108aa:	8a3b      	ldrh	r3, [r7, #16]
 80108ac:	2b00      	cmp	r3, #0
 80108ae:	f040 83c5 	bne.w	801103c <tcp_input+0x7fc>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 80108b2:	4b76      	ldr	r3, [pc, #472]	; (8010a8c <tcp_input+0x24c>)
 80108b4:	681b      	ldr	r3, [r3, #0]
 80108b6:	899b      	ldrh	r3, [r3, #12]
 80108b8:	b29b      	uxth	r3, r3
 80108ba:	4618      	mov	r0, r3
 80108bc:	f7fc fac2 	bl	800ce44 <lwip_htons>
 80108c0:	4603      	mov	r3, r0
 80108c2:	0b1b      	lsrs	r3, r3, #12
 80108c4:	b29b      	uxth	r3, r3
 80108c6:	b2db      	uxtb	r3, r3
 80108c8:	009b      	lsls	r3, r3, #2
 80108ca:	73fb      	strb	r3, [r7, #15]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80108cc:	7bfb      	ldrb	r3, [r7, #15]
 80108ce:	2b13      	cmp	r3, #19
 80108d0:	f240 83b6 	bls.w	8011040 <tcp_input+0x800>
 80108d4:	7bfb      	ldrb	r3, [r7, #15]
 80108d6:	b29a      	uxth	r2, r3
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	891b      	ldrh	r3, [r3, #8]
 80108dc:	429a      	cmp	r2, r3
 80108de:	f200 83af 	bhi.w	8011040 <tcp_input+0x800>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 80108e2:	7bfb      	ldrb	r3, [r7, #15]
 80108e4:	b29b      	uxth	r3, r3
 80108e6:	3b14      	subs	r3, #20
 80108e8:	b29a      	uxth	r2, r3
 80108ea:	4b6c      	ldr	r3, [pc, #432]	; (8010a9c <tcp_input+0x25c>)
 80108ec:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 80108ee:	4b6c      	ldr	r3, [pc, #432]	; (8010aa0 <tcp_input+0x260>)
 80108f0:	2200      	movs	r2, #0
 80108f2:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	895a      	ldrh	r2, [r3, #10]
 80108f8:	7bfb      	ldrb	r3, [r7, #15]
 80108fa:	b29b      	uxth	r3, r3
 80108fc:	429a      	cmp	r2, r3
 80108fe:	d309      	bcc.n	8010914 <tcp_input+0xd4>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8010900:	4b66      	ldr	r3, [pc, #408]	; (8010a9c <tcp_input+0x25c>)
 8010902:	881a      	ldrh	r2, [r3, #0]
 8010904:	4b67      	ldr	r3, [pc, #412]	; (8010aa4 <tcp_input+0x264>)
 8010906:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8010908:	7bfb      	ldrb	r3, [r7, #15]
 801090a:	4619      	mov	r1, r3
 801090c:	6878      	ldr	r0, [r7, #4]
 801090e:	f7fd ff35 	bl	800e77c <pbuf_remove_header>
 8010912:	e04e      	b.n	80109b2 <tcp_input+0x172>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	681b      	ldr	r3, [r3, #0]
 8010918:	2b00      	cmp	r3, #0
 801091a:	d105      	bne.n	8010928 <tcp_input+0xe8>
 801091c:	4b58      	ldr	r3, [pc, #352]	; (8010a80 <tcp_input+0x240>)
 801091e:	22c2      	movs	r2, #194	; 0xc2
 8010920:	4961      	ldr	r1, [pc, #388]	; (8010aa8 <tcp_input+0x268>)
 8010922:	4859      	ldr	r0, [pc, #356]	; (8010a88 <tcp_input+0x248>)
 8010924:	f009 faec 	bl	8019f00 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8010928:	2114      	movs	r1, #20
 801092a:	6878      	ldr	r0, [r7, #4]
 801092c:	f7fd ff26 	bl	800e77c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	895a      	ldrh	r2, [r3, #10]
 8010934:	4b5b      	ldr	r3, [pc, #364]	; (8010aa4 <tcp_input+0x264>)
 8010936:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8010938:	4b58      	ldr	r3, [pc, #352]	; (8010a9c <tcp_input+0x25c>)
 801093a:	881a      	ldrh	r2, [r3, #0]
 801093c:	4b59      	ldr	r3, [pc, #356]	; (8010aa4 <tcp_input+0x264>)
 801093e:	881b      	ldrh	r3, [r3, #0]
 8010940:	1ad3      	subs	r3, r2, r3
 8010942:	81bb      	strh	r3, [r7, #12]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8010944:	4b57      	ldr	r3, [pc, #348]	; (8010aa4 <tcp_input+0x264>)
 8010946:	881b      	ldrh	r3, [r3, #0]
 8010948:	4619      	mov	r1, r3
 801094a:	6878      	ldr	r0, [r7, #4]
 801094c:	f7fd ff16 	bl	800e77c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	681b      	ldr	r3, [r3, #0]
 8010954:	895b      	ldrh	r3, [r3, #10]
 8010956:	89ba      	ldrh	r2, [r7, #12]
 8010958:	429a      	cmp	r2, r3
 801095a:	f200 8373 	bhi.w	8011044 <tcp_input+0x804>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	681b      	ldr	r3, [r3, #0]
 8010962:	685b      	ldr	r3, [r3, #4]
 8010964:	4a4e      	ldr	r2, [pc, #312]	; (8010aa0 <tcp_input+0x260>)
 8010966:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	681b      	ldr	r3, [r3, #0]
 801096c:	89ba      	ldrh	r2, [r7, #12]
 801096e:	4611      	mov	r1, r2
 8010970:	4618      	mov	r0, r3
 8010972:	f7fd ff03 	bl	800e77c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	891a      	ldrh	r2, [r3, #8]
 801097a:	89bb      	ldrh	r3, [r7, #12]
 801097c:	1ad3      	subs	r3, r2, r3
 801097e:	b29a      	uxth	r2, r3
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	895b      	ldrh	r3, [r3, #10]
 8010988:	2b00      	cmp	r3, #0
 801098a:	d005      	beq.n	8010998 <tcp_input+0x158>
 801098c:	4b3c      	ldr	r3, [pc, #240]	; (8010a80 <tcp_input+0x240>)
 801098e:	22df      	movs	r2, #223	; 0xdf
 8010990:	4946      	ldr	r1, [pc, #280]	; (8010aac <tcp_input+0x26c>)
 8010992:	483d      	ldr	r0, [pc, #244]	; (8010a88 <tcp_input+0x248>)
 8010994:	f009 fab4 	bl	8019f00 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	891a      	ldrh	r2, [r3, #8]
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	681b      	ldr	r3, [r3, #0]
 80109a0:	891b      	ldrh	r3, [r3, #8]
 80109a2:	429a      	cmp	r2, r3
 80109a4:	d005      	beq.n	80109b2 <tcp_input+0x172>
 80109a6:	4b36      	ldr	r3, [pc, #216]	; (8010a80 <tcp_input+0x240>)
 80109a8:	22e0      	movs	r2, #224	; 0xe0
 80109aa:	4941      	ldr	r1, [pc, #260]	; (8010ab0 <tcp_input+0x270>)
 80109ac:	4836      	ldr	r0, [pc, #216]	; (8010a88 <tcp_input+0x248>)
 80109ae:	f009 faa7 	bl	8019f00 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80109b2:	4b36      	ldr	r3, [pc, #216]	; (8010a8c <tcp_input+0x24c>)
 80109b4:	681b      	ldr	r3, [r3, #0]
 80109b6:	881b      	ldrh	r3, [r3, #0]
 80109b8:	b29b      	uxth	r3, r3
 80109ba:	4a34      	ldr	r2, [pc, #208]	; (8010a8c <tcp_input+0x24c>)
 80109bc:	6814      	ldr	r4, [r2, #0]
 80109be:	4618      	mov	r0, r3
 80109c0:	f7fc fa40 	bl	800ce44 <lwip_htons>
 80109c4:	4603      	mov	r3, r0
 80109c6:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80109c8:	4b30      	ldr	r3, [pc, #192]	; (8010a8c <tcp_input+0x24c>)
 80109ca:	681b      	ldr	r3, [r3, #0]
 80109cc:	885b      	ldrh	r3, [r3, #2]
 80109ce:	b29b      	uxth	r3, r3
 80109d0:	4a2e      	ldr	r2, [pc, #184]	; (8010a8c <tcp_input+0x24c>)
 80109d2:	6814      	ldr	r4, [r2, #0]
 80109d4:	4618      	mov	r0, r3
 80109d6:	f7fc fa35 	bl	800ce44 <lwip_htons>
 80109da:	4603      	mov	r3, r0
 80109dc:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80109de:	4b2b      	ldr	r3, [pc, #172]	; (8010a8c <tcp_input+0x24c>)
 80109e0:	681b      	ldr	r3, [r3, #0]
 80109e2:	685b      	ldr	r3, [r3, #4]
 80109e4:	4a29      	ldr	r2, [pc, #164]	; (8010a8c <tcp_input+0x24c>)
 80109e6:	6814      	ldr	r4, [r2, #0]
 80109e8:	4618      	mov	r0, r3
 80109ea:	f7fc fa40 	bl	800ce6e <lwip_htonl>
 80109ee:	4603      	mov	r3, r0
 80109f0:	6063      	str	r3, [r4, #4]
 80109f2:	6863      	ldr	r3, [r4, #4]
 80109f4:	4a2f      	ldr	r2, [pc, #188]	; (8010ab4 <tcp_input+0x274>)
 80109f6:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80109f8:	4b24      	ldr	r3, [pc, #144]	; (8010a8c <tcp_input+0x24c>)
 80109fa:	681b      	ldr	r3, [r3, #0]
 80109fc:	689b      	ldr	r3, [r3, #8]
 80109fe:	4a23      	ldr	r2, [pc, #140]	; (8010a8c <tcp_input+0x24c>)
 8010a00:	6814      	ldr	r4, [r2, #0]
 8010a02:	4618      	mov	r0, r3
 8010a04:	f7fc fa33 	bl	800ce6e <lwip_htonl>
 8010a08:	4603      	mov	r3, r0
 8010a0a:	60a3      	str	r3, [r4, #8]
 8010a0c:	68a3      	ldr	r3, [r4, #8]
 8010a0e:	4a2a      	ldr	r2, [pc, #168]	; (8010ab8 <tcp_input+0x278>)
 8010a10:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8010a12:	4b1e      	ldr	r3, [pc, #120]	; (8010a8c <tcp_input+0x24c>)
 8010a14:	681b      	ldr	r3, [r3, #0]
 8010a16:	89db      	ldrh	r3, [r3, #14]
 8010a18:	b29b      	uxth	r3, r3
 8010a1a:	4a1c      	ldr	r2, [pc, #112]	; (8010a8c <tcp_input+0x24c>)
 8010a1c:	6814      	ldr	r4, [r2, #0]
 8010a1e:	4618      	mov	r0, r3
 8010a20:	f7fc fa10 	bl	800ce44 <lwip_htons>
 8010a24:	4603      	mov	r3, r0
 8010a26:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8010a28:	4b18      	ldr	r3, [pc, #96]	; (8010a8c <tcp_input+0x24c>)
 8010a2a:	681b      	ldr	r3, [r3, #0]
 8010a2c:	899b      	ldrh	r3, [r3, #12]
 8010a2e:	b29b      	uxth	r3, r3
 8010a30:	4618      	mov	r0, r3
 8010a32:	f7fc fa07 	bl	800ce44 <lwip_htons>
 8010a36:	4603      	mov	r3, r0
 8010a38:	b2db      	uxtb	r3, r3
 8010a3a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010a3e:	b2da      	uxtb	r2, r3
 8010a40:	4b1e      	ldr	r3, [pc, #120]	; (8010abc <tcp_input+0x27c>)
 8010a42:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	891a      	ldrh	r2, [r3, #8]
 8010a48:	4b1d      	ldr	r3, [pc, #116]	; (8010ac0 <tcp_input+0x280>)
 8010a4a:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8010a4c:	4b1b      	ldr	r3, [pc, #108]	; (8010abc <tcp_input+0x27c>)
 8010a4e:	781b      	ldrb	r3, [r3, #0]
 8010a50:	f003 0303 	and.w	r3, r3, #3
 8010a54:	2b00      	cmp	r3, #0
 8010a56:	d00c      	beq.n	8010a72 <tcp_input+0x232>
    tcplen++;
 8010a58:	4b19      	ldr	r3, [pc, #100]	; (8010ac0 <tcp_input+0x280>)
 8010a5a:	881b      	ldrh	r3, [r3, #0]
 8010a5c:	3301      	adds	r3, #1
 8010a5e:	b29a      	uxth	r2, r3
 8010a60:	4b17      	ldr	r3, [pc, #92]	; (8010ac0 <tcp_input+0x280>)
 8010a62:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	891a      	ldrh	r2, [r3, #8]
 8010a68:	4b15      	ldr	r3, [pc, #84]	; (8010ac0 <tcp_input+0x280>)
 8010a6a:	881b      	ldrh	r3, [r3, #0]
 8010a6c:	429a      	cmp	r2, r3
 8010a6e:	f200 82eb 	bhi.w	8011048 <tcp_input+0x808>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8010a72:	2300      	movs	r3, #0
 8010a74:	61fb      	str	r3, [r7, #28]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010a76:	4b13      	ldr	r3, [pc, #76]	; (8010ac4 <tcp_input+0x284>)
 8010a78:	681b      	ldr	r3, [r3, #0]
 8010a7a:	61bb      	str	r3, [r7, #24]
 8010a7c:	e09b      	b.n	8010bb6 <tcp_input+0x376>
 8010a7e:	bf00      	nop
 8010a80:	0801ce1c 	.word	0x0801ce1c
 8010a84:	0801ce50 	.word	0x0801ce50
 8010a88:	0801ce68 	.word	0x0801ce68
 8010a8c:	20013af0 	.word	0x20013af0
 8010a90:	2000a050 	.word	0x2000a050
 8010a94:	2000a064 	.word	0x2000a064
 8010a98:	2000a060 	.word	0x2000a060
 8010a9c:	20013af4 	.word	0x20013af4
 8010aa0:	20013af8 	.word	0x20013af8
 8010aa4:	20013af6 	.word	0x20013af6
 8010aa8:	0801ce90 	.word	0x0801ce90
 8010aac:	0801cea0 	.word	0x0801cea0
 8010ab0:	0801ceac 	.word	0x0801ceac
 8010ab4:	20013b00 	.word	0x20013b00
 8010ab8:	20013b04 	.word	0x20013b04
 8010abc:	20013b0c 	.word	0x20013b0c
 8010ac0:	20013b0a 	.word	0x20013b0a
 8010ac4:	20013ad0 	.word	0x20013ad0
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8010ac8:	69bb      	ldr	r3, [r7, #24]
 8010aca:	7d1b      	ldrb	r3, [r3, #20]
 8010acc:	2b00      	cmp	r3, #0
 8010ace:	d105      	bne.n	8010adc <tcp_input+0x29c>
 8010ad0:	4b88      	ldr	r3, [pc, #544]	; (8010cf4 <tcp_input+0x4b4>)
 8010ad2:	22fb      	movs	r2, #251	; 0xfb
 8010ad4:	4988      	ldr	r1, [pc, #544]	; (8010cf8 <tcp_input+0x4b8>)
 8010ad6:	4889      	ldr	r0, [pc, #548]	; (8010cfc <tcp_input+0x4bc>)
 8010ad8:	f009 fa12 	bl	8019f00 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8010adc:	69bb      	ldr	r3, [r7, #24]
 8010ade:	7d1b      	ldrb	r3, [r3, #20]
 8010ae0:	2b0a      	cmp	r3, #10
 8010ae2:	d105      	bne.n	8010af0 <tcp_input+0x2b0>
 8010ae4:	4b83      	ldr	r3, [pc, #524]	; (8010cf4 <tcp_input+0x4b4>)
 8010ae6:	22fc      	movs	r2, #252	; 0xfc
 8010ae8:	4985      	ldr	r1, [pc, #532]	; (8010d00 <tcp_input+0x4c0>)
 8010aea:	4884      	ldr	r0, [pc, #528]	; (8010cfc <tcp_input+0x4bc>)
 8010aec:	f009 fa08 	bl	8019f00 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8010af0:	69bb      	ldr	r3, [r7, #24]
 8010af2:	7d1b      	ldrb	r3, [r3, #20]
 8010af4:	2b01      	cmp	r3, #1
 8010af6:	d105      	bne.n	8010b04 <tcp_input+0x2c4>
 8010af8:	4b7e      	ldr	r3, [pc, #504]	; (8010cf4 <tcp_input+0x4b4>)
 8010afa:	22fd      	movs	r2, #253	; 0xfd
 8010afc:	4981      	ldr	r1, [pc, #516]	; (8010d04 <tcp_input+0x4c4>)
 8010afe:	487f      	ldr	r0, [pc, #508]	; (8010cfc <tcp_input+0x4bc>)
 8010b00:	f009 f9fe 	bl	8019f00 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010b04:	69bb      	ldr	r3, [r7, #24]
 8010b06:	7a1b      	ldrb	r3, [r3, #8]
 8010b08:	2b00      	cmp	r3, #0
 8010b0a:	d00c      	beq.n	8010b26 <tcp_input+0x2e6>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010b0c:	69bb      	ldr	r3, [r7, #24]
 8010b0e:	7a1a      	ldrb	r2, [r3, #8]
 8010b10:	4b7d      	ldr	r3, [pc, #500]	; (8010d08 <tcp_input+0x4c8>)
 8010b12:	685b      	ldr	r3, [r3, #4]
 8010b14:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8010b18:	3301      	adds	r3, #1
 8010b1a:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010b1c:	429a      	cmp	r2, r3
 8010b1e:	d002      	beq.n	8010b26 <tcp_input+0x2e6>
      prev = pcb;
 8010b20:	69bb      	ldr	r3, [r7, #24]
 8010b22:	61fb      	str	r3, [r7, #28]
      continue;
 8010b24:	e044      	b.n	8010bb0 <tcp_input+0x370>
    }

    if (pcb->remote_port == tcphdr->src &&
 8010b26:	69bb      	ldr	r3, [r7, #24]
 8010b28:	8b1a      	ldrh	r2, [r3, #24]
 8010b2a:	4b78      	ldr	r3, [pc, #480]	; (8010d0c <tcp_input+0x4cc>)
 8010b2c:	681b      	ldr	r3, [r3, #0]
 8010b2e:	881b      	ldrh	r3, [r3, #0]
 8010b30:	b29b      	uxth	r3, r3
 8010b32:	429a      	cmp	r2, r3
 8010b34:	d13a      	bne.n	8010bac <tcp_input+0x36c>
        pcb->local_port == tcphdr->dest &&
 8010b36:	69bb      	ldr	r3, [r7, #24]
 8010b38:	8ada      	ldrh	r2, [r3, #22]
 8010b3a:	4b74      	ldr	r3, [pc, #464]	; (8010d0c <tcp_input+0x4cc>)
 8010b3c:	681b      	ldr	r3, [r3, #0]
 8010b3e:	885b      	ldrh	r3, [r3, #2]
 8010b40:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8010b42:	429a      	cmp	r2, r3
 8010b44:	d132      	bne.n	8010bac <tcp_input+0x36c>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010b46:	69bb      	ldr	r3, [r7, #24]
 8010b48:	685a      	ldr	r2, [r3, #4]
 8010b4a:	4b6f      	ldr	r3, [pc, #444]	; (8010d08 <tcp_input+0x4c8>)
 8010b4c:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8010b4e:	429a      	cmp	r2, r3
 8010b50:	d12c      	bne.n	8010bac <tcp_input+0x36c>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8010b52:	69bb      	ldr	r3, [r7, #24]
 8010b54:	681a      	ldr	r2, [r3, #0]
 8010b56:	4b6c      	ldr	r3, [pc, #432]	; (8010d08 <tcp_input+0x4c8>)
 8010b58:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010b5a:	429a      	cmp	r2, r3
 8010b5c:	d126      	bne.n	8010bac <tcp_input+0x36c>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8010b5e:	69bb      	ldr	r3, [r7, #24]
 8010b60:	68db      	ldr	r3, [r3, #12]
 8010b62:	69ba      	ldr	r2, [r7, #24]
 8010b64:	429a      	cmp	r2, r3
 8010b66:	d106      	bne.n	8010b76 <tcp_input+0x336>
 8010b68:	4b62      	ldr	r3, [pc, #392]	; (8010cf4 <tcp_input+0x4b4>)
 8010b6a:	f240 120d 	movw	r2, #269	; 0x10d
 8010b6e:	4968      	ldr	r1, [pc, #416]	; (8010d10 <tcp_input+0x4d0>)
 8010b70:	4862      	ldr	r0, [pc, #392]	; (8010cfc <tcp_input+0x4bc>)
 8010b72:	f009 f9c5 	bl	8019f00 <iprintf>
      if (prev != NULL) {
 8010b76:	69fb      	ldr	r3, [r7, #28]
 8010b78:	2b00      	cmp	r3, #0
 8010b7a:	d00a      	beq.n	8010b92 <tcp_input+0x352>
        prev->next = pcb->next;
 8010b7c:	69bb      	ldr	r3, [r7, #24]
 8010b7e:	68da      	ldr	r2, [r3, #12]
 8010b80:	69fb      	ldr	r3, [r7, #28]
 8010b82:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8010b84:	4b63      	ldr	r3, [pc, #396]	; (8010d14 <tcp_input+0x4d4>)
 8010b86:	681a      	ldr	r2, [r3, #0]
 8010b88:	69bb      	ldr	r3, [r7, #24]
 8010b8a:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8010b8c:	4a61      	ldr	r2, [pc, #388]	; (8010d14 <tcp_input+0x4d4>)
 8010b8e:	69bb      	ldr	r3, [r7, #24]
 8010b90:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8010b92:	69bb      	ldr	r3, [r7, #24]
 8010b94:	68db      	ldr	r3, [r3, #12]
 8010b96:	69ba      	ldr	r2, [r7, #24]
 8010b98:	429a      	cmp	r2, r3
 8010b9a:	d110      	bne.n	8010bbe <tcp_input+0x37e>
 8010b9c:	4b55      	ldr	r3, [pc, #340]	; (8010cf4 <tcp_input+0x4b4>)
 8010b9e:	f240 1215 	movw	r2, #277	; 0x115
 8010ba2:	495d      	ldr	r1, [pc, #372]	; (8010d18 <tcp_input+0x4d8>)
 8010ba4:	4855      	ldr	r0, [pc, #340]	; (8010cfc <tcp_input+0x4bc>)
 8010ba6:	f009 f9ab 	bl	8019f00 <iprintf>
      break;
 8010baa:	e008      	b.n	8010bbe <tcp_input+0x37e>
    }
    prev = pcb;
 8010bac:	69bb      	ldr	r3, [r7, #24]
 8010bae:	61fb      	str	r3, [r7, #28]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010bb0:	69bb      	ldr	r3, [r7, #24]
 8010bb2:	68db      	ldr	r3, [r3, #12]
 8010bb4:	61bb      	str	r3, [r7, #24]
 8010bb6:	69bb      	ldr	r3, [r7, #24]
 8010bb8:	2b00      	cmp	r3, #0
 8010bba:	d185      	bne.n	8010ac8 <tcp_input+0x288>
 8010bbc:	e000      	b.n	8010bc0 <tcp_input+0x380>
      break;
 8010bbe:	bf00      	nop
  }

  if (pcb == NULL) {
 8010bc0:	69bb      	ldr	r3, [r7, #24]
 8010bc2:	2b00      	cmp	r3, #0
 8010bc4:	f040 80b0 	bne.w	8010d28 <tcp_input+0x4e8>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010bc8:	4b54      	ldr	r3, [pc, #336]	; (8010d1c <tcp_input+0x4dc>)
 8010bca:	681b      	ldr	r3, [r3, #0]
 8010bcc:	61bb      	str	r3, [r7, #24]
 8010bce:	e03f      	b.n	8010c50 <tcp_input+0x410>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8010bd0:	69bb      	ldr	r3, [r7, #24]
 8010bd2:	7d1b      	ldrb	r3, [r3, #20]
 8010bd4:	2b0a      	cmp	r3, #10
 8010bd6:	d006      	beq.n	8010be6 <tcp_input+0x3a6>
 8010bd8:	4b46      	ldr	r3, [pc, #280]	; (8010cf4 <tcp_input+0x4b4>)
 8010bda:	f240 121f 	movw	r2, #287	; 0x11f
 8010bde:	4950      	ldr	r1, [pc, #320]	; (8010d20 <tcp_input+0x4e0>)
 8010be0:	4846      	ldr	r0, [pc, #280]	; (8010cfc <tcp_input+0x4bc>)
 8010be2:	f009 f98d 	bl	8019f00 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010be6:	69bb      	ldr	r3, [r7, #24]
 8010be8:	7a1b      	ldrb	r3, [r3, #8]
 8010bea:	2b00      	cmp	r3, #0
 8010bec:	d009      	beq.n	8010c02 <tcp_input+0x3c2>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010bee:	69bb      	ldr	r3, [r7, #24]
 8010bf0:	7a1a      	ldrb	r2, [r3, #8]
 8010bf2:	4b45      	ldr	r3, [pc, #276]	; (8010d08 <tcp_input+0x4c8>)
 8010bf4:	685b      	ldr	r3, [r3, #4]
 8010bf6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8010bfa:	3301      	adds	r3, #1
 8010bfc:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010bfe:	429a      	cmp	r2, r3
 8010c00:	d122      	bne.n	8010c48 <tcp_input+0x408>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8010c02:	69bb      	ldr	r3, [r7, #24]
 8010c04:	8b1a      	ldrh	r2, [r3, #24]
 8010c06:	4b41      	ldr	r3, [pc, #260]	; (8010d0c <tcp_input+0x4cc>)
 8010c08:	681b      	ldr	r3, [r3, #0]
 8010c0a:	881b      	ldrh	r3, [r3, #0]
 8010c0c:	b29b      	uxth	r3, r3
 8010c0e:	429a      	cmp	r2, r3
 8010c10:	d11b      	bne.n	8010c4a <tcp_input+0x40a>
          pcb->local_port == tcphdr->dest &&
 8010c12:	69bb      	ldr	r3, [r7, #24]
 8010c14:	8ada      	ldrh	r2, [r3, #22]
 8010c16:	4b3d      	ldr	r3, [pc, #244]	; (8010d0c <tcp_input+0x4cc>)
 8010c18:	681b      	ldr	r3, [r3, #0]
 8010c1a:	885b      	ldrh	r3, [r3, #2]
 8010c1c:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8010c1e:	429a      	cmp	r2, r3
 8010c20:	d113      	bne.n	8010c4a <tcp_input+0x40a>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010c22:	69bb      	ldr	r3, [r7, #24]
 8010c24:	685a      	ldr	r2, [r3, #4]
 8010c26:	4b38      	ldr	r3, [pc, #224]	; (8010d08 <tcp_input+0x4c8>)
 8010c28:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8010c2a:	429a      	cmp	r2, r3
 8010c2c:	d10d      	bne.n	8010c4a <tcp_input+0x40a>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8010c2e:	69bb      	ldr	r3, [r7, #24]
 8010c30:	681a      	ldr	r2, [r3, #0]
 8010c32:	4b35      	ldr	r3, [pc, #212]	; (8010d08 <tcp_input+0x4c8>)
 8010c34:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010c36:	429a      	cmp	r2, r3
 8010c38:	d107      	bne.n	8010c4a <tcp_input+0x40a>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8010c3a:	69b8      	ldr	r0, [r7, #24]
 8010c3c:	f000 fb5e 	bl	80112fc <tcp_timewait_input>
        }
        pbuf_free(p);
 8010c40:	6878      	ldr	r0, [r7, #4]
 8010c42:	f7fd fe21 	bl	800e888 <pbuf_free>
        return;
 8010c46:	e205      	b.n	8011054 <tcp_input+0x814>
        continue;
 8010c48:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010c4a:	69bb      	ldr	r3, [r7, #24]
 8010c4c:	68db      	ldr	r3, [r3, #12]
 8010c4e:	61bb      	str	r3, [r7, #24]
 8010c50:	69bb      	ldr	r3, [r7, #24]
 8010c52:	2b00      	cmp	r3, #0
 8010c54:	d1bc      	bne.n	8010bd0 <tcp_input+0x390>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8010c56:	2300      	movs	r3, #0
 8010c58:	61fb      	str	r3, [r7, #28]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010c5a:	4b32      	ldr	r3, [pc, #200]	; (8010d24 <tcp_input+0x4e4>)
 8010c5c:	681b      	ldr	r3, [r3, #0]
 8010c5e:	617b      	str	r3, [r7, #20]
 8010c60:	e02a      	b.n	8010cb8 <tcp_input+0x478>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8010c62:	697b      	ldr	r3, [r7, #20]
 8010c64:	7a1b      	ldrb	r3, [r3, #8]
 8010c66:	2b00      	cmp	r3, #0
 8010c68:	d00c      	beq.n	8010c84 <tcp_input+0x444>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010c6a:	697b      	ldr	r3, [r7, #20]
 8010c6c:	7a1a      	ldrb	r2, [r3, #8]
 8010c6e:	4b26      	ldr	r3, [pc, #152]	; (8010d08 <tcp_input+0x4c8>)
 8010c70:	685b      	ldr	r3, [r3, #4]
 8010c72:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8010c76:	3301      	adds	r3, #1
 8010c78:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8010c7a:	429a      	cmp	r2, r3
 8010c7c:	d002      	beq.n	8010c84 <tcp_input+0x444>
        prev = (struct tcp_pcb *)lpcb;
 8010c7e:	697b      	ldr	r3, [r7, #20]
 8010c80:	61fb      	str	r3, [r7, #28]
        continue;
 8010c82:	e016      	b.n	8010cb2 <tcp_input+0x472>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8010c84:	697b      	ldr	r3, [r7, #20]
 8010c86:	8ada      	ldrh	r2, [r3, #22]
 8010c88:	4b20      	ldr	r3, [pc, #128]	; (8010d0c <tcp_input+0x4cc>)
 8010c8a:	681b      	ldr	r3, [r3, #0]
 8010c8c:	885b      	ldrh	r3, [r3, #2]
 8010c8e:	b29b      	uxth	r3, r3
 8010c90:	429a      	cmp	r2, r3
 8010c92:	d10c      	bne.n	8010cae <tcp_input+0x46e>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8010c94:	697b      	ldr	r3, [r7, #20]
 8010c96:	681a      	ldr	r2, [r3, #0]
 8010c98:	4b1b      	ldr	r3, [pc, #108]	; (8010d08 <tcp_input+0x4c8>)
 8010c9a:	695b      	ldr	r3, [r3, #20]
 8010c9c:	429a      	cmp	r2, r3
 8010c9e:	d00f      	beq.n	8010cc0 <tcp_input+0x480>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8010ca0:	697b      	ldr	r3, [r7, #20]
 8010ca2:	2b00      	cmp	r3, #0
 8010ca4:	d00d      	beq.n	8010cc2 <tcp_input+0x482>
 8010ca6:	697b      	ldr	r3, [r7, #20]
 8010ca8:	681b      	ldr	r3, [r3, #0]
 8010caa:	2b00      	cmp	r3, #0
 8010cac:	d009      	beq.n	8010cc2 <tcp_input+0x482>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8010cae:	697b      	ldr	r3, [r7, #20]
 8010cb0:	61fb      	str	r3, [r7, #28]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010cb2:	697b      	ldr	r3, [r7, #20]
 8010cb4:	68db      	ldr	r3, [r3, #12]
 8010cb6:	617b      	str	r3, [r7, #20]
 8010cb8:	697b      	ldr	r3, [r7, #20]
 8010cba:	2b00      	cmp	r3, #0
 8010cbc:	d1d1      	bne.n	8010c62 <tcp_input+0x422>
 8010cbe:	e000      	b.n	8010cc2 <tcp_input+0x482>
            break;
 8010cc0:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8010cc2:	697b      	ldr	r3, [r7, #20]
 8010cc4:	2b00      	cmp	r3, #0
 8010cc6:	d02f      	beq.n	8010d28 <tcp_input+0x4e8>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8010cc8:	69fb      	ldr	r3, [r7, #28]
 8010cca:	2b00      	cmp	r3, #0
 8010ccc:	d00a      	beq.n	8010ce4 <tcp_input+0x4a4>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8010cce:	697b      	ldr	r3, [r7, #20]
 8010cd0:	68da      	ldr	r2, [r3, #12]
 8010cd2:	69fb      	ldr	r3, [r7, #28]
 8010cd4:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8010cd6:	4b13      	ldr	r3, [pc, #76]	; (8010d24 <tcp_input+0x4e4>)
 8010cd8:	681a      	ldr	r2, [r3, #0]
 8010cda:	697b      	ldr	r3, [r7, #20]
 8010cdc:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8010cde:	4a11      	ldr	r2, [pc, #68]	; (8010d24 <tcp_input+0x4e4>)
 8010ce0:	697b      	ldr	r3, [r7, #20]
 8010ce2:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8010ce4:	6978      	ldr	r0, [r7, #20]
 8010ce6:	f000 fa0b 	bl	8011100 <tcp_listen_input>
      }
      pbuf_free(p);
 8010cea:	6878      	ldr	r0, [r7, #4]
 8010cec:	f7fd fdcc 	bl	800e888 <pbuf_free>
      return;
 8010cf0:	e1b0      	b.n	8011054 <tcp_input+0x814>
 8010cf2:	bf00      	nop
 8010cf4:	0801ce1c 	.word	0x0801ce1c
 8010cf8:	0801cecc 	.word	0x0801cecc
 8010cfc:	0801ce68 	.word	0x0801ce68
 8010d00:	0801cef4 	.word	0x0801cef4
 8010d04:	0801cf20 	.word	0x0801cf20
 8010d08:	2000a050 	.word	0x2000a050
 8010d0c:	20013af0 	.word	0x20013af0
 8010d10:	0801cf48 	.word	0x0801cf48
 8010d14:	20013ad0 	.word	0x20013ad0
 8010d18:	0801cf74 	.word	0x0801cf74
 8010d1c:	20013ad4 	.word	0x20013ad4
 8010d20:	0801cfa0 	.word	0x0801cfa0
 8010d24:	20013acc 	.word	0x20013acc
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8010d28:	69bb      	ldr	r3, [r7, #24]
 8010d2a:	2b00      	cmp	r3, #0
 8010d2c:	f000 8158 	beq.w	8010fe0 <tcp_input+0x7a0>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8010d30:	4b95      	ldr	r3, [pc, #596]	; (8010f88 <tcp_input+0x748>)
 8010d32:	2200      	movs	r2, #0
 8010d34:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	891a      	ldrh	r2, [r3, #8]
 8010d3a:	4b93      	ldr	r3, [pc, #588]	; (8010f88 <tcp_input+0x748>)
 8010d3c:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8010d3e:	4a92      	ldr	r2, [pc, #584]	; (8010f88 <tcp_input+0x748>)
 8010d40:	687b      	ldr	r3, [r7, #4]
 8010d42:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8010d44:	4b91      	ldr	r3, [pc, #580]	; (8010f8c <tcp_input+0x74c>)
 8010d46:	681b      	ldr	r3, [r3, #0]
 8010d48:	4a8f      	ldr	r2, [pc, #572]	; (8010f88 <tcp_input+0x748>)
 8010d4a:	6113      	str	r3, [r2, #16]

    recv_data = NULL;
 8010d4c:	4b90      	ldr	r3, [pc, #576]	; (8010f90 <tcp_input+0x750>)
 8010d4e:	2200      	movs	r2, #0
 8010d50:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8010d52:	4b90      	ldr	r3, [pc, #576]	; (8010f94 <tcp_input+0x754>)
 8010d54:	2200      	movs	r2, #0
 8010d56:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8010d58:	4b8f      	ldr	r3, [pc, #572]	; (8010f98 <tcp_input+0x758>)
 8010d5a:	2200      	movs	r2, #0
 8010d5c:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8010d5e:	4b8f      	ldr	r3, [pc, #572]	; (8010f9c <tcp_input+0x75c>)
 8010d60:	781b      	ldrb	r3, [r3, #0]
 8010d62:	f003 0308 	and.w	r3, r3, #8
 8010d66:	2b00      	cmp	r3, #0
 8010d68:	d006      	beq.n	8010d78 <tcp_input+0x538>
      p->flags |= PBUF_FLAG_PUSH;
 8010d6a:	687b      	ldr	r3, [r7, #4]
 8010d6c:	7b5b      	ldrb	r3, [r3, #13]
 8010d6e:	f043 0301 	orr.w	r3, r3, #1
 8010d72:	b2da      	uxtb	r2, r3
 8010d74:	687b      	ldr	r3, [r7, #4]
 8010d76:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8010d78:	69bb      	ldr	r3, [r7, #24]
 8010d7a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010d7c:	2b00      	cmp	r3, #0
 8010d7e:	d017      	beq.n	8010db0 <tcp_input+0x570>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8010d80:	69b8      	ldr	r0, [r7, #24]
 8010d82:	f7ff f915 	bl	800ffb0 <tcp_process_refused_data>
 8010d86:	4603      	mov	r3, r0
 8010d88:	f113 0f0d 	cmn.w	r3, #13
 8010d8c:	d007      	beq.n	8010d9e <tcp_input+0x55e>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8010d8e:	69bb      	ldr	r3, [r7, #24]
 8010d90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8010d92:	2b00      	cmp	r3, #0
 8010d94:	d00c      	beq.n	8010db0 <tcp_input+0x570>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8010d96:	4b82      	ldr	r3, [pc, #520]	; (8010fa0 <tcp_input+0x760>)
 8010d98:	881b      	ldrh	r3, [r3, #0]
 8010d9a:	2b00      	cmp	r3, #0
 8010d9c:	d008      	beq.n	8010db0 <tcp_input+0x570>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8010d9e:	69bb      	ldr	r3, [r7, #24]
 8010da0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010da2:	2b00      	cmp	r3, #0
 8010da4:	f040 80e4 	bne.w	8010f70 <tcp_input+0x730>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8010da8:	69b8      	ldr	r0, [r7, #24]
 8010daa:	f003 f9e3 	bl	8014174 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8010dae:	e0df      	b.n	8010f70 <tcp_input+0x730>
      }
    }
    tcp_input_pcb = pcb;
 8010db0:	4a7c      	ldr	r2, [pc, #496]	; (8010fa4 <tcp_input+0x764>)
 8010db2:	69bb      	ldr	r3, [r7, #24]
 8010db4:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8010db6:	69b8      	ldr	r0, [r7, #24]
 8010db8:	f000 fb1a 	bl	80113f0 <tcp_process>
 8010dbc:	4603      	mov	r3, r0
 8010dbe:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8010dc0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010dc4:	f113 0f0d 	cmn.w	r3, #13
 8010dc8:	f000 80d4 	beq.w	8010f74 <tcp_input+0x734>
      if (recv_flags & TF_RESET) {
 8010dcc:	4b71      	ldr	r3, [pc, #452]	; (8010f94 <tcp_input+0x754>)
 8010dce:	781b      	ldrb	r3, [r3, #0]
 8010dd0:	f003 0308 	and.w	r3, r3, #8
 8010dd4:	2b00      	cmp	r3, #0
 8010dd6:	d015      	beq.n	8010e04 <tcp_input+0x5c4>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8010dd8:	69bb      	ldr	r3, [r7, #24]
 8010dda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010dde:	2b00      	cmp	r3, #0
 8010de0:	d008      	beq.n	8010df4 <tcp_input+0x5b4>
 8010de2:	69bb      	ldr	r3, [r7, #24]
 8010de4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010de8:	69ba      	ldr	r2, [r7, #24]
 8010dea:	6912      	ldr	r2, [r2, #16]
 8010dec:	f06f 010d 	mvn.w	r1, #13
 8010df0:	4610      	mov	r0, r2
 8010df2:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8010df4:	69b9      	ldr	r1, [r7, #24]
 8010df6:	486c      	ldr	r0, [pc, #432]	; (8010fa8 <tcp_input+0x768>)
 8010df8:	f7ff fbaa 	bl	8010550 <tcp_pcb_remove>
        tcp_free(pcb);
 8010dfc:	69b8      	ldr	r0, [r7, #24]
 8010dfe:	f7fe f993 	bl	800f128 <tcp_free>
 8010e02:	e0da      	b.n	8010fba <tcp_input+0x77a>
      } else {
        err = ERR_OK;
 8010e04:	2300      	movs	r3, #0
 8010e06:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8010e08:	4b63      	ldr	r3, [pc, #396]	; (8010f98 <tcp_input+0x758>)
 8010e0a:	881b      	ldrh	r3, [r3, #0]
 8010e0c:	2b00      	cmp	r3, #0
 8010e0e:	d01d      	beq.n	8010e4c <tcp_input+0x60c>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8010e10:	4b61      	ldr	r3, [pc, #388]	; (8010f98 <tcp_input+0x758>)
 8010e12:	881b      	ldrh	r3, [r3, #0]
 8010e14:	817b      	strh	r3, [r7, #10]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8010e16:	69bb      	ldr	r3, [r7, #24]
 8010e18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	d00a      	beq.n	8010e36 <tcp_input+0x5f6>
 8010e20:	69bb      	ldr	r3, [r7, #24]
 8010e22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010e26:	69ba      	ldr	r2, [r7, #24]
 8010e28:	6910      	ldr	r0, [r2, #16]
 8010e2a:	897a      	ldrh	r2, [r7, #10]
 8010e2c:	69b9      	ldr	r1, [r7, #24]
 8010e2e:	4798      	blx	r3
 8010e30:	4603      	mov	r3, r0
 8010e32:	74fb      	strb	r3, [r7, #19]
 8010e34:	e001      	b.n	8010e3a <tcp_input+0x5fa>
 8010e36:	2300      	movs	r3, #0
 8010e38:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8010e3a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010e3e:	f113 0f0d 	cmn.w	r3, #13
 8010e42:	f000 8099 	beq.w	8010f78 <tcp_input+0x738>
              goto aborted;
            }
          }
          recv_acked = 0;
 8010e46:	4b54      	ldr	r3, [pc, #336]	; (8010f98 <tcp_input+0x758>)
 8010e48:	2200      	movs	r2, #0
 8010e4a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8010e4c:	69b8      	ldr	r0, [r7, #24]
 8010e4e:	f000 f917 	bl	8011080 <tcp_input_delayed_close>
 8010e52:	4603      	mov	r3, r0
 8010e54:	2b00      	cmp	r3, #0
 8010e56:	f040 8091 	bne.w	8010f7c <tcp_input+0x73c>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8010e5a:	4b4d      	ldr	r3, [pc, #308]	; (8010f90 <tcp_input+0x750>)
 8010e5c:	681b      	ldr	r3, [r3, #0]
 8010e5e:	2b00      	cmp	r3, #0
 8010e60:	d041      	beq.n	8010ee6 <tcp_input+0x6a6>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8010e62:	69bb      	ldr	r3, [r7, #24]
 8010e64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010e66:	2b00      	cmp	r3, #0
 8010e68:	d006      	beq.n	8010e78 <tcp_input+0x638>
 8010e6a:	4b50      	ldr	r3, [pc, #320]	; (8010fac <tcp_input+0x76c>)
 8010e6c:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8010e70:	494f      	ldr	r1, [pc, #316]	; (8010fb0 <tcp_input+0x770>)
 8010e72:	4850      	ldr	r0, [pc, #320]	; (8010fb4 <tcp_input+0x774>)
 8010e74:	f009 f844 	bl	8019f00 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8010e78:	69bb      	ldr	r3, [r7, #24]
 8010e7a:	8b5b      	ldrh	r3, [r3, #26]
 8010e7c:	f003 0310 	and.w	r3, r3, #16
 8010e80:	2b00      	cmp	r3, #0
 8010e82:	d008      	beq.n	8010e96 <tcp_input+0x656>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8010e84:	4b42      	ldr	r3, [pc, #264]	; (8010f90 <tcp_input+0x750>)
 8010e86:	681b      	ldr	r3, [r3, #0]
 8010e88:	4618      	mov	r0, r3
 8010e8a:	f7fd fcfd 	bl	800e888 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8010e8e:	69b8      	ldr	r0, [r7, #24]
 8010e90:	f7fe fc32 	bl	800f6f8 <tcp_abort>
            goto aborted;
 8010e94:	e091      	b.n	8010fba <tcp_input+0x77a>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8010e96:	69bb      	ldr	r3, [r7, #24]
 8010e98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010e9c:	2b00      	cmp	r3, #0
 8010e9e:	d00c      	beq.n	8010eba <tcp_input+0x67a>
 8010ea0:	69bb      	ldr	r3, [r7, #24]
 8010ea2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8010ea6:	69bb      	ldr	r3, [r7, #24]
 8010ea8:	6918      	ldr	r0, [r3, #16]
 8010eaa:	4b39      	ldr	r3, [pc, #228]	; (8010f90 <tcp_input+0x750>)
 8010eac:	681a      	ldr	r2, [r3, #0]
 8010eae:	2300      	movs	r3, #0
 8010eb0:	69b9      	ldr	r1, [r7, #24]
 8010eb2:	47a0      	blx	r4
 8010eb4:	4603      	mov	r3, r0
 8010eb6:	74fb      	strb	r3, [r7, #19]
 8010eb8:	e008      	b.n	8010ecc <tcp_input+0x68c>
 8010eba:	4b35      	ldr	r3, [pc, #212]	; (8010f90 <tcp_input+0x750>)
 8010ebc:	681a      	ldr	r2, [r3, #0]
 8010ebe:	2300      	movs	r3, #0
 8010ec0:	69b9      	ldr	r1, [r7, #24]
 8010ec2:	2000      	movs	r0, #0
 8010ec4:	f7ff f94c 	bl	8010160 <tcp_recv_null>
 8010ec8:	4603      	mov	r3, r0
 8010eca:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8010ecc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010ed0:	f113 0f0d 	cmn.w	r3, #13
 8010ed4:	d054      	beq.n	8010f80 <tcp_input+0x740>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8010ed6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010eda:	2b00      	cmp	r3, #0
 8010edc:	d003      	beq.n	8010ee6 <tcp_input+0x6a6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8010ede:	4b2c      	ldr	r3, [pc, #176]	; (8010f90 <tcp_input+0x750>)
 8010ee0:	681a      	ldr	r2, [r3, #0]
 8010ee2:	69bb      	ldr	r3, [r7, #24]
 8010ee4:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8010ee6:	4b2b      	ldr	r3, [pc, #172]	; (8010f94 <tcp_input+0x754>)
 8010ee8:	781b      	ldrb	r3, [r3, #0]
 8010eea:	f003 0320 	and.w	r3, r3, #32
 8010eee:	2b00      	cmp	r3, #0
 8010ef0:	d031      	beq.n	8010f56 <tcp_input+0x716>
          if (pcb->refused_data != NULL) {
 8010ef2:	69bb      	ldr	r3, [r7, #24]
 8010ef4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010ef6:	2b00      	cmp	r3, #0
 8010ef8:	d009      	beq.n	8010f0e <tcp_input+0x6ce>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8010efa:	69bb      	ldr	r3, [r7, #24]
 8010efc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010efe:	7b5a      	ldrb	r2, [r3, #13]
 8010f00:	69bb      	ldr	r3, [r7, #24]
 8010f02:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010f04:	f042 0220 	orr.w	r2, r2, #32
 8010f08:	b2d2      	uxtb	r2, r2
 8010f0a:	735a      	strb	r2, [r3, #13]
 8010f0c:	e023      	b.n	8010f56 <tcp_input+0x716>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8010f0e:	69bb      	ldr	r3, [r7, #24]
 8010f10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010f12:	f642 52a0 	movw	r2, #11680	; 0x2da0
 8010f16:	4293      	cmp	r3, r2
 8010f18:	d005      	beq.n	8010f26 <tcp_input+0x6e6>
              pcb->rcv_wnd++;
 8010f1a:	69bb      	ldr	r3, [r7, #24]
 8010f1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010f1e:	3301      	adds	r3, #1
 8010f20:	b29a      	uxth	r2, r3
 8010f22:	69bb      	ldr	r3, [r7, #24]
 8010f24:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8010f26:	69bb      	ldr	r3, [r7, #24]
 8010f28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010f2c:	2b00      	cmp	r3, #0
 8010f2e:	d00b      	beq.n	8010f48 <tcp_input+0x708>
 8010f30:	69bb      	ldr	r3, [r7, #24]
 8010f32:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8010f36:	69bb      	ldr	r3, [r7, #24]
 8010f38:	6918      	ldr	r0, [r3, #16]
 8010f3a:	2300      	movs	r3, #0
 8010f3c:	2200      	movs	r2, #0
 8010f3e:	69b9      	ldr	r1, [r7, #24]
 8010f40:	47a0      	blx	r4
 8010f42:	4603      	mov	r3, r0
 8010f44:	74fb      	strb	r3, [r7, #19]
 8010f46:	e001      	b.n	8010f4c <tcp_input+0x70c>
 8010f48:	2300      	movs	r3, #0
 8010f4a:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8010f4c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010f50:	f113 0f0d 	cmn.w	r3, #13
 8010f54:	d016      	beq.n	8010f84 <tcp_input+0x744>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8010f56:	4b13      	ldr	r3, [pc, #76]	; (8010fa4 <tcp_input+0x764>)
 8010f58:	2200      	movs	r2, #0
 8010f5a:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8010f5c:	69b8      	ldr	r0, [r7, #24]
 8010f5e:	f000 f88f 	bl	8011080 <tcp_input_delayed_close>
 8010f62:	4603      	mov	r3, r0
 8010f64:	2b00      	cmp	r3, #0
 8010f66:	d127      	bne.n	8010fb8 <tcp_input+0x778>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8010f68:	69b8      	ldr	r0, [r7, #24]
 8010f6a:	f002 facf 	bl	801350c <tcp_output>
 8010f6e:	e024      	b.n	8010fba <tcp_input+0x77a>
        goto aborted;
 8010f70:	bf00      	nop
 8010f72:	e022      	b.n	8010fba <tcp_input+0x77a>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8010f74:	bf00      	nop
 8010f76:	e020      	b.n	8010fba <tcp_input+0x77a>
              goto aborted;
 8010f78:	bf00      	nop
 8010f7a:	e01e      	b.n	8010fba <tcp_input+0x77a>
          goto aborted;
 8010f7c:	bf00      	nop
 8010f7e:	e01c      	b.n	8010fba <tcp_input+0x77a>
            goto aborted;
 8010f80:	bf00      	nop
 8010f82:	e01a      	b.n	8010fba <tcp_input+0x77a>
              goto aborted;
 8010f84:	bf00      	nop
 8010f86:	e018      	b.n	8010fba <tcp_input+0x77a>
 8010f88:	20013adc 	.word	0x20013adc
 8010f8c:	20013af0 	.word	0x20013af0
 8010f90:	20013b10 	.word	0x20013b10
 8010f94:	20013b0d 	.word	0x20013b0d
 8010f98:	20013b08 	.word	0x20013b08
 8010f9c:	20013b0c 	.word	0x20013b0c
 8010fa0:	20013b0a 	.word	0x20013b0a
 8010fa4:	20013b14 	.word	0x20013b14
 8010fa8:	20013ad0 	.word	0x20013ad0
 8010fac:	0801ce1c 	.word	0x0801ce1c
 8010fb0:	0801cfd0 	.word	0x0801cfd0
 8010fb4:	0801ce68 	.word	0x0801ce68
          goto aborted;
 8010fb8:	bf00      	nop
    tcp_input_pcb = NULL;
 8010fba:	4b28      	ldr	r3, [pc, #160]	; (801105c <tcp_input+0x81c>)
 8010fbc:	2200      	movs	r2, #0
 8010fbe:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8010fc0:	4b27      	ldr	r3, [pc, #156]	; (8011060 <tcp_input+0x820>)
 8010fc2:	2200      	movs	r2, #0
 8010fc4:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8010fc6:	4b27      	ldr	r3, [pc, #156]	; (8011064 <tcp_input+0x824>)
 8010fc8:	685b      	ldr	r3, [r3, #4]
 8010fca:	2b00      	cmp	r3, #0
 8010fcc:	d041      	beq.n	8011052 <tcp_input+0x812>
      pbuf_free(inseg.p);
 8010fce:	4b25      	ldr	r3, [pc, #148]	; (8011064 <tcp_input+0x824>)
 8010fd0:	685b      	ldr	r3, [r3, #4]
 8010fd2:	4618      	mov	r0, r3
 8010fd4:	f7fd fc58 	bl	800e888 <pbuf_free>
      inseg.p = NULL;
 8010fd8:	4b22      	ldr	r3, [pc, #136]	; (8011064 <tcp_input+0x824>)
 8010fda:	2200      	movs	r2, #0
 8010fdc:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8010fde:	e038      	b.n	8011052 <tcp_input+0x812>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8010fe0:	4b21      	ldr	r3, [pc, #132]	; (8011068 <tcp_input+0x828>)
 8010fe2:	681b      	ldr	r3, [r3, #0]
 8010fe4:	899b      	ldrh	r3, [r3, #12]
 8010fe6:	b29b      	uxth	r3, r3
 8010fe8:	4618      	mov	r0, r3
 8010fea:	f7fb ff2b 	bl	800ce44 <lwip_htons>
 8010fee:	4603      	mov	r3, r0
 8010ff0:	b2db      	uxtb	r3, r3
 8010ff2:	f003 0304 	and.w	r3, r3, #4
 8010ff6:	2b00      	cmp	r3, #0
 8010ff8:	d118      	bne.n	801102c <tcp_input+0x7ec>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010ffa:	4b1c      	ldr	r3, [pc, #112]	; (801106c <tcp_input+0x82c>)
 8010ffc:	6819      	ldr	r1, [r3, #0]
 8010ffe:	4b1c      	ldr	r3, [pc, #112]	; (8011070 <tcp_input+0x830>)
 8011000:	881b      	ldrh	r3, [r3, #0]
 8011002:	461a      	mov	r2, r3
 8011004:	4b1b      	ldr	r3, [pc, #108]	; (8011074 <tcp_input+0x834>)
 8011006:	681b      	ldr	r3, [r3, #0]
 8011008:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801100a:	4b17      	ldr	r3, [pc, #92]	; (8011068 <tcp_input+0x828>)
 801100c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801100e:	885b      	ldrh	r3, [r3, #2]
 8011010:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011012:	4a15      	ldr	r2, [pc, #84]	; (8011068 <tcp_input+0x828>)
 8011014:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011016:	8812      	ldrh	r2, [r2, #0]
 8011018:	b292      	uxth	r2, r2
 801101a:	9202      	str	r2, [sp, #8]
 801101c:	9301      	str	r3, [sp, #4]
 801101e:	4b16      	ldr	r3, [pc, #88]	; (8011078 <tcp_input+0x838>)
 8011020:	9300      	str	r3, [sp, #0]
 8011022:	4b16      	ldr	r3, [pc, #88]	; (801107c <tcp_input+0x83c>)
 8011024:	4602      	mov	r2, r0
 8011026:	2000      	movs	r0, #0
 8011028:	f003 f852 	bl	80140d0 <tcp_rst>
    pbuf_free(p);
 801102c:	6878      	ldr	r0, [r7, #4]
 801102e:	f7fd fc2b 	bl	800e888 <pbuf_free>
  return;
 8011032:	e00e      	b.n	8011052 <tcp_input+0x812>
    goto dropped;
 8011034:	bf00      	nop
 8011036:	e008      	b.n	801104a <tcp_input+0x80a>
    goto dropped;
 8011038:	bf00      	nop
 801103a:	e006      	b.n	801104a <tcp_input+0x80a>
      goto dropped;
 801103c:	bf00      	nop
 801103e:	e004      	b.n	801104a <tcp_input+0x80a>
    goto dropped;
 8011040:	bf00      	nop
 8011042:	e002      	b.n	801104a <tcp_input+0x80a>
      goto dropped;
 8011044:	bf00      	nop
 8011046:	e000      	b.n	801104a <tcp_input+0x80a>
      goto dropped;
 8011048:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 801104a:	6878      	ldr	r0, [r7, #4]
 801104c:	f7fd fc1c 	bl	800e888 <pbuf_free>
 8011050:	e000      	b.n	8011054 <tcp_input+0x814>
  return;
 8011052:	bf00      	nop
}
 8011054:	3724      	adds	r7, #36	; 0x24
 8011056:	46bd      	mov	sp, r7
 8011058:	bd90      	pop	{r4, r7, pc}
 801105a:	bf00      	nop
 801105c:	20013b14 	.word	0x20013b14
 8011060:	20013b10 	.word	0x20013b10
 8011064:	20013adc 	.word	0x20013adc
 8011068:	20013af0 	.word	0x20013af0
 801106c:	20013b04 	.word	0x20013b04
 8011070:	20013b0a 	.word	0x20013b0a
 8011074:	20013b00 	.word	0x20013b00
 8011078:	2000a060 	.word	0x2000a060
 801107c:	2000a064 	.word	0x2000a064

08011080 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8011080:	b580      	push	{r7, lr}
 8011082:	b082      	sub	sp, #8
 8011084:	af00      	add	r7, sp, #0
 8011086:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8011088:	687b      	ldr	r3, [r7, #4]
 801108a:	2b00      	cmp	r3, #0
 801108c:	d106      	bne.n	801109c <tcp_input_delayed_close+0x1c>
 801108e:	4b17      	ldr	r3, [pc, #92]	; (80110ec <tcp_input_delayed_close+0x6c>)
 8011090:	f240 225a 	movw	r2, #602	; 0x25a
 8011094:	4916      	ldr	r1, [pc, #88]	; (80110f0 <tcp_input_delayed_close+0x70>)
 8011096:	4817      	ldr	r0, [pc, #92]	; (80110f4 <tcp_input_delayed_close+0x74>)
 8011098:	f008 ff32 	bl	8019f00 <iprintf>

  if (recv_flags & TF_CLOSED) {
 801109c:	4b16      	ldr	r3, [pc, #88]	; (80110f8 <tcp_input_delayed_close+0x78>)
 801109e:	781b      	ldrb	r3, [r3, #0]
 80110a0:	f003 0310 	and.w	r3, r3, #16
 80110a4:	2b00      	cmp	r3, #0
 80110a6:	d01c      	beq.n	80110e2 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	8b5b      	ldrh	r3, [r3, #26]
 80110ac:	f003 0310 	and.w	r3, r3, #16
 80110b0:	2b00      	cmp	r3, #0
 80110b2:	d10d      	bne.n	80110d0 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80110b4:	687b      	ldr	r3, [r7, #4]
 80110b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80110ba:	2b00      	cmp	r3, #0
 80110bc:	d008      	beq.n	80110d0 <tcp_input_delayed_close+0x50>
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80110c4:	687a      	ldr	r2, [r7, #4]
 80110c6:	6912      	ldr	r2, [r2, #16]
 80110c8:	f06f 010e 	mvn.w	r1, #14
 80110cc:	4610      	mov	r0, r2
 80110ce:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80110d0:	6879      	ldr	r1, [r7, #4]
 80110d2:	480a      	ldr	r0, [pc, #40]	; (80110fc <tcp_input_delayed_close+0x7c>)
 80110d4:	f7ff fa3c 	bl	8010550 <tcp_pcb_remove>
    tcp_free(pcb);
 80110d8:	6878      	ldr	r0, [r7, #4]
 80110da:	f7fe f825 	bl	800f128 <tcp_free>
    return 1;
 80110de:	2301      	movs	r3, #1
 80110e0:	e000      	b.n	80110e4 <tcp_input_delayed_close+0x64>
  }
  return 0;
 80110e2:	2300      	movs	r3, #0
}
 80110e4:	4618      	mov	r0, r3
 80110e6:	3708      	adds	r7, #8
 80110e8:	46bd      	mov	sp, r7
 80110ea:	bd80      	pop	{r7, pc}
 80110ec:	0801ce1c 	.word	0x0801ce1c
 80110f0:	0801cfec 	.word	0x0801cfec
 80110f4:	0801ce68 	.word	0x0801ce68
 80110f8:	20013b0d 	.word	0x20013b0d
 80110fc:	20013ad0 	.word	0x20013ad0

08011100 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8011100:	b590      	push	{r4, r7, lr}
 8011102:	b08b      	sub	sp, #44	; 0x2c
 8011104:	af04      	add	r7, sp, #16
 8011106:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8011108:	4b6f      	ldr	r3, [pc, #444]	; (80112c8 <tcp_listen_input+0x1c8>)
 801110a:	781b      	ldrb	r3, [r3, #0]
 801110c:	f003 0304 	and.w	r3, r3, #4
 8011110:	2b00      	cmp	r3, #0
 8011112:	f040 80d2 	bne.w	80112ba <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	2b00      	cmp	r3, #0
 801111a:	d106      	bne.n	801112a <tcp_listen_input+0x2a>
 801111c:	4b6b      	ldr	r3, [pc, #428]	; (80112cc <tcp_listen_input+0x1cc>)
 801111e:	f240 2281 	movw	r2, #641	; 0x281
 8011122:	496b      	ldr	r1, [pc, #428]	; (80112d0 <tcp_listen_input+0x1d0>)
 8011124:	486b      	ldr	r0, [pc, #428]	; (80112d4 <tcp_listen_input+0x1d4>)
 8011126:	f008 feeb 	bl	8019f00 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 801112a:	4b67      	ldr	r3, [pc, #412]	; (80112c8 <tcp_listen_input+0x1c8>)
 801112c:	781b      	ldrb	r3, [r3, #0]
 801112e:	f003 0310 	and.w	r3, r3, #16
 8011132:	2b00      	cmp	r3, #0
 8011134:	d019      	beq.n	801116a <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011136:	4b68      	ldr	r3, [pc, #416]	; (80112d8 <tcp_listen_input+0x1d8>)
 8011138:	6819      	ldr	r1, [r3, #0]
 801113a:	4b68      	ldr	r3, [pc, #416]	; (80112dc <tcp_listen_input+0x1dc>)
 801113c:	881b      	ldrh	r3, [r3, #0]
 801113e:	461a      	mov	r2, r3
 8011140:	4b67      	ldr	r3, [pc, #412]	; (80112e0 <tcp_listen_input+0x1e0>)
 8011142:	681b      	ldr	r3, [r3, #0]
 8011144:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011146:	4b67      	ldr	r3, [pc, #412]	; (80112e4 <tcp_listen_input+0x1e4>)
 8011148:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801114a:	885b      	ldrh	r3, [r3, #2]
 801114c:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801114e:	4a65      	ldr	r2, [pc, #404]	; (80112e4 <tcp_listen_input+0x1e4>)
 8011150:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011152:	8812      	ldrh	r2, [r2, #0]
 8011154:	b292      	uxth	r2, r2
 8011156:	9202      	str	r2, [sp, #8]
 8011158:	9301      	str	r3, [sp, #4]
 801115a:	4b63      	ldr	r3, [pc, #396]	; (80112e8 <tcp_listen_input+0x1e8>)
 801115c:	9300      	str	r3, [sp, #0]
 801115e:	4b63      	ldr	r3, [pc, #396]	; (80112ec <tcp_listen_input+0x1ec>)
 8011160:	4602      	mov	r2, r0
 8011162:	6878      	ldr	r0, [r7, #4]
 8011164:	f002 ffb4 	bl	80140d0 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8011168:	e0a9      	b.n	80112be <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 801116a:	4b57      	ldr	r3, [pc, #348]	; (80112c8 <tcp_listen_input+0x1c8>)
 801116c:	781b      	ldrb	r3, [r3, #0]
 801116e:	f003 0302 	and.w	r3, r3, #2
 8011172:	2b00      	cmp	r3, #0
 8011174:	f000 80a3 	beq.w	80112be <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	7d5b      	ldrb	r3, [r3, #21]
 801117c:	4618      	mov	r0, r3
 801117e:	f7ff f913 	bl	80103a8 <tcp_alloc>
 8011182:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8011184:	697b      	ldr	r3, [r7, #20]
 8011186:	2b00      	cmp	r3, #0
 8011188:	d111      	bne.n	80111ae <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	699b      	ldr	r3, [r3, #24]
 801118e:	2b00      	cmp	r3, #0
 8011190:	d00a      	beq.n	80111a8 <tcp_listen_input+0xa8>
 8011192:	687b      	ldr	r3, [r7, #4]
 8011194:	699b      	ldr	r3, [r3, #24]
 8011196:	687a      	ldr	r2, [r7, #4]
 8011198:	6910      	ldr	r0, [r2, #16]
 801119a:	f04f 32ff 	mov.w	r2, #4294967295
 801119e:	2100      	movs	r1, #0
 80111a0:	4798      	blx	r3
 80111a2:	4603      	mov	r3, r0
 80111a4:	73bb      	strb	r3, [r7, #14]
      return;
 80111a6:	e08b      	b.n	80112c0 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80111a8:	23f0      	movs	r3, #240	; 0xf0
 80111aa:	73bb      	strb	r3, [r7, #14]
      return;
 80111ac:	e088      	b.n	80112c0 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80111ae:	4b50      	ldr	r3, [pc, #320]	; (80112f0 <tcp_listen_input+0x1f0>)
 80111b0:	695a      	ldr	r2, [r3, #20]
 80111b2:	697b      	ldr	r3, [r7, #20]
 80111b4:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80111b6:	4b4e      	ldr	r3, [pc, #312]	; (80112f0 <tcp_listen_input+0x1f0>)
 80111b8:	691a      	ldr	r2, [r3, #16]
 80111ba:	697b      	ldr	r3, [r7, #20]
 80111bc:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	8ada      	ldrh	r2, [r3, #22]
 80111c2:	697b      	ldr	r3, [r7, #20]
 80111c4:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 80111c6:	4b47      	ldr	r3, [pc, #284]	; (80112e4 <tcp_listen_input+0x1e4>)
 80111c8:	681b      	ldr	r3, [r3, #0]
 80111ca:	881b      	ldrh	r3, [r3, #0]
 80111cc:	b29a      	uxth	r2, r3
 80111ce:	697b      	ldr	r3, [r7, #20]
 80111d0:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 80111d2:	697b      	ldr	r3, [r7, #20]
 80111d4:	2203      	movs	r2, #3
 80111d6:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 80111d8:	4b41      	ldr	r3, [pc, #260]	; (80112e0 <tcp_listen_input+0x1e0>)
 80111da:	681b      	ldr	r3, [r3, #0]
 80111dc:	1c5a      	adds	r2, r3, #1
 80111de:	697b      	ldr	r3, [r7, #20]
 80111e0:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80111e2:	697b      	ldr	r3, [r7, #20]
 80111e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80111e6:	697b      	ldr	r3, [r7, #20]
 80111e8:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 80111ea:	6978      	ldr	r0, [r7, #20]
 80111ec:	f7ff fa44 	bl	8010678 <tcp_next_iss>
 80111f0:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 80111f2:	697b      	ldr	r3, [r7, #20]
 80111f4:	693a      	ldr	r2, [r7, #16]
 80111f6:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 80111f8:	697b      	ldr	r3, [r7, #20]
 80111fa:	693a      	ldr	r2, [r7, #16]
 80111fc:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 80111fe:	697b      	ldr	r3, [r7, #20]
 8011200:	693a      	ldr	r2, [r7, #16]
 8011202:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8011204:	697b      	ldr	r3, [r7, #20]
 8011206:	693a      	ldr	r2, [r7, #16]
 8011208:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801120a:	4b35      	ldr	r3, [pc, #212]	; (80112e0 <tcp_listen_input+0x1e0>)
 801120c:	681b      	ldr	r3, [r3, #0]
 801120e:	1e5a      	subs	r2, r3, #1
 8011210:	697b      	ldr	r3, [r7, #20]
 8011212:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	691a      	ldr	r2, [r3, #16]
 8011218:	697b      	ldr	r3, [r7, #20]
 801121a:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 801121c:	697b      	ldr	r3, [r7, #20]
 801121e:	687a      	ldr	r2, [r7, #4]
 8011220:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	7a5b      	ldrb	r3, [r3, #9]
 8011226:	f003 030c 	and.w	r3, r3, #12
 801122a:	b2da      	uxtb	r2, r3
 801122c:	697b      	ldr	r3, [r7, #20]
 801122e:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	7a1a      	ldrb	r2, [r3, #8]
 8011234:	697b      	ldr	r3, [r7, #20]
 8011236:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8011238:	4b2e      	ldr	r3, [pc, #184]	; (80112f4 <tcp_listen_input+0x1f4>)
 801123a:	681a      	ldr	r2, [r3, #0]
 801123c:	697b      	ldr	r3, [r7, #20]
 801123e:	60da      	str	r2, [r3, #12]
 8011240:	4a2c      	ldr	r2, [pc, #176]	; (80112f4 <tcp_listen_input+0x1f4>)
 8011242:	697b      	ldr	r3, [r7, #20]
 8011244:	6013      	str	r3, [r2, #0]
 8011246:	f003 f905 	bl	8014454 <tcp_timer_needed>
 801124a:	4b2b      	ldr	r3, [pc, #172]	; (80112f8 <tcp_listen_input+0x1f8>)
 801124c:	2201      	movs	r2, #1
 801124e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8011250:	6978      	ldr	r0, [r7, #20]
 8011252:	f001 fd8f 	bl	8012d74 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8011256:	4b23      	ldr	r3, [pc, #140]	; (80112e4 <tcp_listen_input+0x1e4>)
 8011258:	681b      	ldr	r3, [r3, #0]
 801125a:	89db      	ldrh	r3, [r3, #14]
 801125c:	b29a      	uxth	r2, r3
 801125e:	697b      	ldr	r3, [r7, #20]
 8011260:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8011264:	697b      	ldr	r3, [r7, #20]
 8011266:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801126a:	697b      	ldr	r3, [r7, #20]
 801126c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8011270:	697b      	ldr	r3, [r7, #20]
 8011272:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8011274:	697b      	ldr	r3, [r7, #20]
 8011276:	3304      	adds	r3, #4
 8011278:	4618      	mov	r0, r3
 801127a:	f007 f835 	bl	80182e8 <ip4_route>
 801127e:	4601      	mov	r1, r0
 8011280:	697b      	ldr	r3, [r7, #20]
 8011282:	3304      	adds	r3, #4
 8011284:	461a      	mov	r2, r3
 8011286:	4620      	mov	r0, r4
 8011288:	f7ff fa1c 	bl	80106c4 <tcp_eff_send_mss_netif>
 801128c:	4603      	mov	r3, r0
 801128e:	461a      	mov	r2, r3
 8011290:	697b      	ldr	r3, [r7, #20]
 8011292:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8011294:	2112      	movs	r1, #18
 8011296:	6978      	ldr	r0, [r7, #20]
 8011298:	f002 f84a 	bl	8013330 <tcp_enqueue_flags>
 801129c:	4603      	mov	r3, r0
 801129e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 80112a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80112a4:	2b00      	cmp	r3, #0
 80112a6:	d004      	beq.n	80112b2 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 80112a8:	2100      	movs	r1, #0
 80112aa:	6978      	ldr	r0, [r7, #20]
 80112ac:	f7fe f966 	bl	800f57c <tcp_abandon>
      return;
 80112b0:	e006      	b.n	80112c0 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 80112b2:	6978      	ldr	r0, [r7, #20]
 80112b4:	f002 f92a 	bl	801350c <tcp_output>
  return;
 80112b8:	e001      	b.n	80112be <tcp_listen_input+0x1be>
    return;
 80112ba:	bf00      	nop
 80112bc:	e000      	b.n	80112c0 <tcp_listen_input+0x1c0>
  return;
 80112be:	bf00      	nop
}
 80112c0:	371c      	adds	r7, #28
 80112c2:	46bd      	mov	sp, r7
 80112c4:	bd90      	pop	{r4, r7, pc}
 80112c6:	bf00      	nop
 80112c8:	20013b0c 	.word	0x20013b0c
 80112cc:	0801ce1c 	.word	0x0801ce1c
 80112d0:	0801d014 	.word	0x0801d014
 80112d4:	0801ce68 	.word	0x0801ce68
 80112d8:	20013b04 	.word	0x20013b04
 80112dc:	20013b0a 	.word	0x20013b0a
 80112e0:	20013b00 	.word	0x20013b00
 80112e4:	20013af0 	.word	0x20013af0
 80112e8:	2000a060 	.word	0x2000a060
 80112ec:	2000a064 	.word	0x2000a064
 80112f0:	2000a050 	.word	0x2000a050
 80112f4:	20013ad0 	.word	0x20013ad0
 80112f8:	20013ad8 	.word	0x20013ad8

080112fc <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 80112fc:	b580      	push	{r7, lr}
 80112fe:	b086      	sub	sp, #24
 8011300:	af04      	add	r7, sp, #16
 8011302:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8011304:	4b2f      	ldr	r3, [pc, #188]	; (80113c4 <tcp_timewait_input+0xc8>)
 8011306:	781b      	ldrb	r3, [r3, #0]
 8011308:	f003 0304 	and.w	r3, r3, #4
 801130c:	2b00      	cmp	r3, #0
 801130e:	d153      	bne.n	80113b8 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	2b00      	cmp	r3, #0
 8011314:	d106      	bne.n	8011324 <tcp_timewait_input+0x28>
 8011316:	4b2c      	ldr	r3, [pc, #176]	; (80113c8 <tcp_timewait_input+0xcc>)
 8011318:	f240 22ee 	movw	r2, #750	; 0x2ee
 801131c:	492b      	ldr	r1, [pc, #172]	; (80113cc <tcp_timewait_input+0xd0>)
 801131e:	482c      	ldr	r0, [pc, #176]	; (80113d0 <tcp_timewait_input+0xd4>)
 8011320:	f008 fdee 	bl	8019f00 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8011324:	4b27      	ldr	r3, [pc, #156]	; (80113c4 <tcp_timewait_input+0xc8>)
 8011326:	781b      	ldrb	r3, [r3, #0]
 8011328:	f003 0302 	and.w	r3, r3, #2
 801132c:	2b00      	cmp	r3, #0
 801132e:	d02a      	beq.n	8011386 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8011330:	4b28      	ldr	r3, [pc, #160]	; (80113d4 <tcp_timewait_input+0xd8>)
 8011332:	681a      	ldr	r2, [r3, #0]
 8011334:	687b      	ldr	r3, [r7, #4]
 8011336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011338:	1ad3      	subs	r3, r2, r3
 801133a:	2b00      	cmp	r3, #0
 801133c:	db2d      	blt.n	801139a <tcp_timewait_input+0x9e>
 801133e:	4b25      	ldr	r3, [pc, #148]	; (80113d4 <tcp_timewait_input+0xd8>)
 8011340:	681a      	ldr	r2, [r3, #0]
 8011342:	687b      	ldr	r3, [r7, #4]
 8011344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011346:	6879      	ldr	r1, [r7, #4]
 8011348:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801134a:	440b      	add	r3, r1
 801134c:	1ad3      	subs	r3, r2, r3
 801134e:	2b00      	cmp	r3, #0
 8011350:	dc23      	bgt.n	801139a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011352:	4b21      	ldr	r3, [pc, #132]	; (80113d8 <tcp_timewait_input+0xdc>)
 8011354:	6819      	ldr	r1, [r3, #0]
 8011356:	4b21      	ldr	r3, [pc, #132]	; (80113dc <tcp_timewait_input+0xe0>)
 8011358:	881b      	ldrh	r3, [r3, #0]
 801135a:	461a      	mov	r2, r3
 801135c:	4b1d      	ldr	r3, [pc, #116]	; (80113d4 <tcp_timewait_input+0xd8>)
 801135e:	681b      	ldr	r3, [r3, #0]
 8011360:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011362:	4b1f      	ldr	r3, [pc, #124]	; (80113e0 <tcp_timewait_input+0xe4>)
 8011364:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011366:	885b      	ldrh	r3, [r3, #2]
 8011368:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801136a:	4a1d      	ldr	r2, [pc, #116]	; (80113e0 <tcp_timewait_input+0xe4>)
 801136c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801136e:	8812      	ldrh	r2, [r2, #0]
 8011370:	b292      	uxth	r2, r2
 8011372:	9202      	str	r2, [sp, #8]
 8011374:	9301      	str	r3, [sp, #4]
 8011376:	4b1b      	ldr	r3, [pc, #108]	; (80113e4 <tcp_timewait_input+0xe8>)
 8011378:	9300      	str	r3, [sp, #0]
 801137a:	4b1b      	ldr	r3, [pc, #108]	; (80113e8 <tcp_timewait_input+0xec>)
 801137c:	4602      	mov	r2, r0
 801137e:	6878      	ldr	r0, [r7, #4]
 8011380:	f002 fea6 	bl	80140d0 <tcp_rst>
      return;
 8011384:	e01b      	b.n	80113be <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8011386:	4b0f      	ldr	r3, [pc, #60]	; (80113c4 <tcp_timewait_input+0xc8>)
 8011388:	781b      	ldrb	r3, [r3, #0]
 801138a:	f003 0301 	and.w	r3, r3, #1
 801138e:	2b00      	cmp	r3, #0
 8011390:	d003      	beq.n	801139a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8011392:	4b16      	ldr	r3, [pc, #88]	; (80113ec <tcp_timewait_input+0xf0>)
 8011394:	681a      	ldr	r2, [r3, #0]
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 801139a:	4b10      	ldr	r3, [pc, #64]	; (80113dc <tcp_timewait_input+0xe0>)
 801139c:	881b      	ldrh	r3, [r3, #0]
 801139e:	2b00      	cmp	r3, #0
 80113a0:	d00c      	beq.n	80113bc <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 80113a2:	687b      	ldr	r3, [r7, #4]
 80113a4:	8b5b      	ldrh	r3, [r3, #26]
 80113a6:	f043 0302 	orr.w	r3, r3, #2
 80113aa:	b29a      	uxth	r2, r3
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80113b0:	6878      	ldr	r0, [r7, #4]
 80113b2:	f002 f8ab 	bl	801350c <tcp_output>
  }
  return;
 80113b6:	e001      	b.n	80113bc <tcp_timewait_input+0xc0>
    return;
 80113b8:	bf00      	nop
 80113ba:	e000      	b.n	80113be <tcp_timewait_input+0xc2>
  return;
 80113bc:	bf00      	nop
}
 80113be:	3708      	adds	r7, #8
 80113c0:	46bd      	mov	sp, r7
 80113c2:	bd80      	pop	{r7, pc}
 80113c4:	20013b0c 	.word	0x20013b0c
 80113c8:	0801ce1c 	.word	0x0801ce1c
 80113cc:	0801d034 	.word	0x0801d034
 80113d0:	0801ce68 	.word	0x0801ce68
 80113d4:	20013b00 	.word	0x20013b00
 80113d8:	20013b04 	.word	0x20013b04
 80113dc:	20013b0a 	.word	0x20013b0a
 80113e0:	20013af0 	.word	0x20013af0
 80113e4:	2000a060 	.word	0x2000a060
 80113e8:	2000a064 	.word	0x2000a064
 80113ec:	20013ac4 	.word	0x20013ac4

080113f0 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 80113f0:	b590      	push	{r4, r7, lr}
 80113f2:	b08d      	sub	sp, #52	; 0x34
 80113f4:	af04      	add	r7, sp, #16
 80113f6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 80113f8:	2300      	movs	r3, #0
 80113fa:	77fb      	strb	r3, [r7, #31]
  err_t err;

  err = ERR_OK;
 80113fc:	2300      	movs	r3, #0
 80113fe:	77bb      	strb	r3, [r7, #30]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8011400:	687b      	ldr	r3, [r7, #4]
 8011402:	2b00      	cmp	r3, #0
 8011404:	d106      	bne.n	8011414 <tcp_process+0x24>
 8011406:	4b9d      	ldr	r3, [pc, #628]	; (801167c <tcp_process+0x28c>)
 8011408:	f44f 7247 	mov.w	r2, #796	; 0x31c
 801140c:	499c      	ldr	r1, [pc, #624]	; (8011680 <tcp_process+0x290>)
 801140e:	489d      	ldr	r0, [pc, #628]	; (8011684 <tcp_process+0x294>)
 8011410:	f008 fd76 	bl	8019f00 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8011414:	4b9c      	ldr	r3, [pc, #624]	; (8011688 <tcp_process+0x298>)
 8011416:	781b      	ldrb	r3, [r3, #0]
 8011418:	f003 0304 	and.w	r3, r3, #4
 801141c:	2b00      	cmp	r3, #0
 801141e:	d04e      	beq.n	80114be <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8011420:	687b      	ldr	r3, [r7, #4]
 8011422:	7d1b      	ldrb	r3, [r3, #20]
 8011424:	2b02      	cmp	r3, #2
 8011426:	d108      	bne.n	801143a <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801142c:	4b97      	ldr	r3, [pc, #604]	; (801168c <tcp_process+0x29c>)
 801142e:	681b      	ldr	r3, [r3, #0]
 8011430:	429a      	cmp	r2, r3
 8011432:	d123      	bne.n	801147c <tcp_process+0x8c>
        acceptable = 1;
 8011434:	2301      	movs	r3, #1
 8011436:	77fb      	strb	r3, [r7, #31]
 8011438:	e020      	b.n	801147c <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 801143a:	687b      	ldr	r3, [r7, #4]
 801143c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801143e:	4b94      	ldr	r3, [pc, #592]	; (8011690 <tcp_process+0x2a0>)
 8011440:	681b      	ldr	r3, [r3, #0]
 8011442:	429a      	cmp	r2, r3
 8011444:	d102      	bne.n	801144c <tcp_process+0x5c>
        acceptable = 1;
 8011446:	2301      	movs	r3, #1
 8011448:	77fb      	strb	r3, [r7, #31]
 801144a:	e017      	b.n	801147c <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801144c:	4b90      	ldr	r3, [pc, #576]	; (8011690 <tcp_process+0x2a0>)
 801144e:	681a      	ldr	r2, [r3, #0]
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011454:	1ad3      	subs	r3, r2, r3
 8011456:	2b00      	cmp	r3, #0
 8011458:	db10      	blt.n	801147c <tcp_process+0x8c>
 801145a:	4b8d      	ldr	r3, [pc, #564]	; (8011690 <tcp_process+0x2a0>)
 801145c:	681a      	ldr	r2, [r3, #0]
 801145e:	687b      	ldr	r3, [r7, #4]
 8011460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011462:	6879      	ldr	r1, [r7, #4]
 8011464:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011466:	440b      	add	r3, r1
 8011468:	1ad3      	subs	r3, r2, r3
 801146a:	2b00      	cmp	r3, #0
 801146c:	dc06      	bgt.n	801147c <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 801146e:	687b      	ldr	r3, [r7, #4]
 8011470:	8b5b      	ldrh	r3, [r3, #26]
 8011472:	f043 0302 	orr.w	r3, r3, #2
 8011476:	b29a      	uxth	r2, r3
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 801147c:	7ffb      	ldrb	r3, [r7, #31]
 801147e:	2b00      	cmp	r3, #0
 8011480:	d01b      	beq.n	80114ba <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8011482:	687b      	ldr	r3, [r7, #4]
 8011484:	7d1b      	ldrb	r3, [r3, #20]
 8011486:	2b00      	cmp	r3, #0
 8011488:	d106      	bne.n	8011498 <tcp_process+0xa8>
 801148a:	4b7c      	ldr	r3, [pc, #496]	; (801167c <tcp_process+0x28c>)
 801148c:	f44f 724e 	mov.w	r2, #824	; 0x338
 8011490:	4980      	ldr	r1, [pc, #512]	; (8011694 <tcp_process+0x2a4>)
 8011492:	487c      	ldr	r0, [pc, #496]	; (8011684 <tcp_process+0x294>)
 8011494:	f008 fd34 	bl	8019f00 <iprintf>
      recv_flags |= TF_RESET;
 8011498:	4b7f      	ldr	r3, [pc, #508]	; (8011698 <tcp_process+0x2a8>)
 801149a:	781b      	ldrb	r3, [r3, #0]
 801149c:	f043 0308 	orr.w	r3, r3, #8
 80114a0:	b2da      	uxtb	r2, r3
 80114a2:	4b7d      	ldr	r3, [pc, #500]	; (8011698 <tcp_process+0x2a8>)
 80114a4:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 80114a6:	687b      	ldr	r3, [r7, #4]
 80114a8:	8b5b      	ldrh	r3, [r3, #26]
 80114aa:	f023 0301 	bic.w	r3, r3, #1
 80114ae:	b29a      	uxth	r2, r3
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 80114b4:	f06f 030d 	mvn.w	r3, #13
 80114b8:	e37a      	b.n	8011bb0 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 80114ba:	2300      	movs	r3, #0
 80114bc:	e378      	b.n	8011bb0 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 80114be:	4b72      	ldr	r3, [pc, #456]	; (8011688 <tcp_process+0x298>)
 80114c0:	781b      	ldrb	r3, [r3, #0]
 80114c2:	f003 0302 	and.w	r3, r3, #2
 80114c6:	2b00      	cmp	r3, #0
 80114c8:	d010      	beq.n	80114ec <tcp_process+0xfc>
 80114ca:	687b      	ldr	r3, [r7, #4]
 80114cc:	7d1b      	ldrb	r3, [r3, #20]
 80114ce:	2b02      	cmp	r3, #2
 80114d0:	d00c      	beq.n	80114ec <tcp_process+0xfc>
 80114d2:	687b      	ldr	r3, [r7, #4]
 80114d4:	7d1b      	ldrb	r3, [r3, #20]
 80114d6:	2b03      	cmp	r3, #3
 80114d8:	d008      	beq.n	80114ec <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	8b5b      	ldrh	r3, [r3, #26]
 80114de:	f043 0302 	orr.w	r3, r3, #2
 80114e2:	b29a      	uxth	r2, r3
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 80114e8:	2300      	movs	r3, #0
 80114ea:	e361      	b.n	8011bb0 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80114ec:	687b      	ldr	r3, [r7, #4]
 80114ee:	8b5b      	ldrh	r3, [r3, #26]
 80114f0:	f003 0310 	and.w	r3, r3, #16
 80114f4:	2b00      	cmp	r3, #0
 80114f6:	d103      	bne.n	8011500 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 80114f8:	4b68      	ldr	r3, [pc, #416]	; (801169c <tcp_process+0x2ac>)
 80114fa:	681a      	ldr	r2, [r3, #0]
 80114fc:	687b      	ldr	r3, [r7, #4]
 80114fe:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8011500:	687b      	ldr	r3, [r7, #4]
 8011502:	2200      	movs	r2, #0
 8011504:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8011508:	687b      	ldr	r3, [r7, #4]
 801150a:	2200      	movs	r2, #0
 801150c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8011510:	6878      	ldr	r0, [r7, #4]
 8011512:	f001 fc2f 	bl	8012d74 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8011516:	687b      	ldr	r3, [r7, #4]
 8011518:	7d1b      	ldrb	r3, [r3, #20]
 801151a:	3b02      	subs	r3, #2
 801151c:	2b07      	cmp	r3, #7
 801151e:	f200 8337 	bhi.w	8011b90 <tcp_process+0x7a0>
 8011522:	a201      	add	r2, pc, #4	; (adr r2, 8011528 <tcp_process+0x138>)
 8011524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011528:	08011549 	.word	0x08011549
 801152c:	08011779 	.word	0x08011779
 8011530:	080118f1 	.word	0x080118f1
 8011534:	0801191b 	.word	0x0801191b
 8011538:	08011a3f 	.word	0x08011a3f
 801153c:	080118f1 	.word	0x080118f1
 8011540:	08011acb 	.word	0x08011acb
 8011544:	08011b5b 	.word	0x08011b5b
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8011548:	4b4f      	ldr	r3, [pc, #316]	; (8011688 <tcp_process+0x298>)
 801154a:	781b      	ldrb	r3, [r3, #0]
 801154c:	f003 0310 	and.w	r3, r3, #16
 8011550:	2b00      	cmp	r3, #0
 8011552:	f000 80e4 	beq.w	801171e <tcp_process+0x32e>
 8011556:	4b4c      	ldr	r3, [pc, #304]	; (8011688 <tcp_process+0x298>)
 8011558:	781b      	ldrb	r3, [r3, #0]
 801155a:	f003 0302 	and.w	r3, r3, #2
 801155e:	2b00      	cmp	r3, #0
 8011560:	f000 80dd 	beq.w	801171e <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011568:	1c5a      	adds	r2, r3, #1
 801156a:	4b48      	ldr	r3, [pc, #288]	; (801168c <tcp_process+0x29c>)
 801156c:	681b      	ldr	r3, [r3, #0]
 801156e:	429a      	cmp	r2, r3
 8011570:	f040 80d5 	bne.w	801171e <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8011574:	4b46      	ldr	r3, [pc, #280]	; (8011690 <tcp_process+0x2a0>)
 8011576:	681b      	ldr	r3, [r3, #0]
 8011578:	1c5a      	adds	r2, r3, #1
 801157a:	687b      	ldr	r3, [r7, #4]
 801157c:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011582:	687b      	ldr	r3, [r7, #4]
 8011584:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8011586:	4b41      	ldr	r3, [pc, #260]	; (801168c <tcp_process+0x29c>)
 8011588:	681a      	ldr	r2, [r3, #0]
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 801158e:	4b44      	ldr	r3, [pc, #272]	; (80116a0 <tcp_process+0x2b0>)
 8011590:	681b      	ldr	r3, [r3, #0]
 8011592:	89db      	ldrh	r3, [r3, #14]
 8011594:	b29a      	uxth	r2, r3
 8011596:	687b      	ldr	r3, [r7, #4]
 8011598:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 801159c:	687b      	ldr	r3, [r7, #4]
 801159e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80115a2:	687b      	ldr	r3, [r7, #4]
 80115a4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80115a8:	4b39      	ldr	r3, [pc, #228]	; (8011690 <tcp_process+0x2a0>)
 80115aa:	681b      	ldr	r3, [r3, #0]
 80115ac:	1e5a      	subs	r2, r3, #1
 80115ae:	687b      	ldr	r3, [r7, #4]
 80115b0:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	2204      	movs	r2, #4
 80115b6:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80115bc:	687b      	ldr	r3, [r7, #4]
 80115be:	3304      	adds	r3, #4
 80115c0:	4618      	mov	r0, r3
 80115c2:	f006 fe91 	bl	80182e8 <ip4_route>
 80115c6:	4601      	mov	r1, r0
 80115c8:	687b      	ldr	r3, [r7, #4]
 80115ca:	3304      	adds	r3, #4
 80115cc:	461a      	mov	r2, r3
 80115ce:	4620      	mov	r0, r4
 80115d0:	f7ff f878 	bl	80106c4 <tcp_eff_send_mss_netif>
 80115d4:	4603      	mov	r3, r0
 80115d6:	461a      	mov	r2, r3
 80115d8:	687b      	ldr	r3, [r7, #4]
 80115da:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80115dc:	687b      	ldr	r3, [r7, #4]
 80115de:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80115e0:	009a      	lsls	r2, r3, #2
 80115e2:	687b      	ldr	r3, [r7, #4]
 80115e4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80115e6:	005b      	lsls	r3, r3, #1
 80115e8:	f241 111c 	movw	r1, #4380	; 0x111c
 80115ec:	428b      	cmp	r3, r1
 80115ee:	bf38      	it	cc
 80115f0:	460b      	movcc	r3, r1
 80115f2:	429a      	cmp	r2, r3
 80115f4:	d204      	bcs.n	8011600 <tcp_process+0x210>
 80115f6:	687b      	ldr	r3, [r7, #4]
 80115f8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80115fa:	009b      	lsls	r3, r3, #2
 80115fc:	b29b      	uxth	r3, r3
 80115fe:	e00d      	b.n	801161c <tcp_process+0x22c>
 8011600:	687b      	ldr	r3, [r7, #4]
 8011602:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011604:	005b      	lsls	r3, r3, #1
 8011606:	f241 121c 	movw	r2, #4380	; 0x111c
 801160a:	4293      	cmp	r3, r2
 801160c:	d904      	bls.n	8011618 <tcp_process+0x228>
 801160e:	687b      	ldr	r3, [r7, #4]
 8011610:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011612:	005b      	lsls	r3, r3, #1
 8011614:	b29b      	uxth	r3, r3
 8011616:	e001      	b.n	801161c <tcp_process+0x22c>
 8011618:	f241 131c 	movw	r3, #4380	; 0x111c
 801161c:	687a      	ldr	r2, [r7, #4]
 801161e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8011622:	687b      	ldr	r3, [r7, #4]
 8011624:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011628:	2b00      	cmp	r3, #0
 801162a:	d106      	bne.n	801163a <tcp_process+0x24a>
 801162c:	4b13      	ldr	r3, [pc, #76]	; (801167c <tcp_process+0x28c>)
 801162e:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8011632:	491c      	ldr	r1, [pc, #112]	; (80116a4 <tcp_process+0x2b4>)
 8011634:	4813      	ldr	r0, [pc, #76]	; (8011684 <tcp_process+0x294>)
 8011636:	f008 fc63 	bl	8019f00 <iprintf>
        --pcb->snd_queuelen;
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011640:	3b01      	subs	r3, #1
 8011642:	b29a      	uxth	r2, r3
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801164e:	617b      	str	r3, [r7, #20]
        if (rseg == NULL) {
 8011650:	697b      	ldr	r3, [r7, #20]
 8011652:	2b00      	cmp	r3, #0
 8011654:	d12a      	bne.n	80116ac <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8011656:	687b      	ldr	r3, [r7, #4]
 8011658:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801165a:	617b      	str	r3, [r7, #20]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 801165c:	697b      	ldr	r3, [r7, #20]
 801165e:	2b00      	cmp	r3, #0
 8011660:	d106      	bne.n	8011670 <tcp_process+0x280>
 8011662:	4b06      	ldr	r3, [pc, #24]	; (801167c <tcp_process+0x28c>)
 8011664:	f44f 725d 	mov.w	r2, #884	; 0x374
 8011668:	490f      	ldr	r1, [pc, #60]	; (80116a8 <tcp_process+0x2b8>)
 801166a:	4806      	ldr	r0, [pc, #24]	; (8011684 <tcp_process+0x294>)
 801166c:	f008 fc48 	bl	8019f00 <iprintf>
          pcb->unsent = rseg->next;
 8011670:	697b      	ldr	r3, [r7, #20]
 8011672:	681a      	ldr	r2, [r3, #0]
 8011674:	687b      	ldr	r3, [r7, #4]
 8011676:	66da      	str	r2, [r3, #108]	; 0x6c
 8011678:	e01c      	b.n	80116b4 <tcp_process+0x2c4>
 801167a:	bf00      	nop
 801167c:	0801ce1c 	.word	0x0801ce1c
 8011680:	0801d054 	.word	0x0801d054
 8011684:	0801ce68 	.word	0x0801ce68
 8011688:	20013b0c 	.word	0x20013b0c
 801168c:	20013b04 	.word	0x20013b04
 8011690:	20013b00 	.word	0x20013b00
 8011694:	0801d070 	.word	0x0801d070
 8011698:	20013b0d 	.word	0x20013b0d
 801169c:	20013ac4 	.word	0x20013ac4
 80116a0:	20013af0 	.word	0x20013af0
 80116a4:	0801d090 	.word	0x0801d090
 80116a8:	0801d0a8 	.word	0x0801d0a8
        } else {
          pcb->unacked = rseg->next;
 80116ac:	697b      	ldr	r3, [r7, #20]
 80116ae:	681a      	ldr	r2, [r3, #0]
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 80116b4:	6978      	ldr	r0, [r7, #20]
 80116b6:	f7fe fd0e 	bl	80100d6 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 80116ba:	687b      	ldr	r3, [r7, #4]
 80116bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80116be:	2b00      	cmp	r3, #0
 80116c0:	d104      	bne.n	80116cc <tcp_process+0x2dc>
          pcb->rtime = -1;
 80116c2:	687b      	ldr	r3, [r7, #4]
 80116c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80116c8:	861a      	strh	r2, [r3, #48]	; 0x30
 80116ca:	e006      	b.n	80116da <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 80116cc:	687b      	ldr	r3, [r7, #4]
 80116ce:	2200      	movs	r2, #0
 80116d0:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 80116d2:	687b      	ldr	r3, [r7, #4]
 80116d4:	2200      	movs	r2, #0
 80116d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 80116da:	687b      	ldr	r3, [r7, #4]
 80116dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80116e0:	2b00      	cmp	r3, #0
 80116e2:	d00a      	beq.n	80116fa <tcp_process+0x30a>
 80116e4:	687b      	ldr	r3, [r7, #4]
 80116e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80116ea:	687a      	ldr	r2, [r7, #4]
 80116ec:	6910      	ldr	r0, [r2, #16]
 80116ee:	2200      	movs	r2, #0
 80116f0:	6879      	ldr	r1, [r7, #4]
 80116f2:	4798      	blx	r3
 80116f4:	4603      	mov	r3, r0
 80116f6:	77bb      	strb	r3, [r7, #30]
 80116f8:	e001      	b.n	80116fe <tcp_process+0x30e>
 80116fa:	2300      	movs	r3, #0
 80116fc:	77bb      	strb	r3, [r7, #30]
        if (err == ERR_ABRT) {
 80116fe:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8011702:	f113 0f0d 	cmn.w	r3, #13
 8011706:	d102      	bne.n	801170e <tcp_process+0x31e>
          return ERR_ABRT;
 8011708:	f06f 030c 	mvn.w	r3, #12
 801170c:	e250      	b.n	8011bb0 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 801170e:	687b      	ldr	r3, [r7, #4]
 8011710:	8b5b      	ldrh	r3, [r3, #26]
 8011712:	f043 0302 	orr.w	r3, r3, #2
 8011716:	b29a      	uxth	r2, r3
 8011718:	687b      	ldr	r3, [r7, #4]
 801171a:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 801171c:	e23a      	b.n	8011b94 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 801171e:	4b98      	ldr	r3, [pc, #608]	; (8011980 <tcp_process+0x590>)
 8011720:	781b      	ldrb	r3, [r3, #0]
 8011722:	f003 0310 	and.w	r3, r3, #16
 8011726:	2b00      	cmp	r3, #0
 8011728:	f000 8234 	beq.w	8011b94 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801172c:	4b95      	ldr	r3, [pc, #596]	; (8011984 <tcp_process+0x594>)
 801172e:	6819      	ldr	r1, [r3, #0]
 8011730:	4b95      	ldr	r3, [pc, #596]	; (8011988 <tcp_process+0x598>)
 8011732:	881b      	ldrh	r3, [r3, #0]
 8011734:	461a      	mov	r2, r3
 8011736:	4b95      	ldr	r3, [pc, #596]	; (801198c <tcp_process+0x59c>)
 8011738:	681b      	ldr	r3, [r3, #0]
 801173a:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801173c:	4b94      	ldr	r3, [pc, #592]	; (8011990 <tcp_process+0x5a0>)
 801173e:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011740:	885b      	ldrh	r3, [r3, #2]
 8011742:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011744:	4a92      	ldr	r2, [pc, #584]	; (8011990 <tcp_process+0x5a0>)
 8011746:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011748:	8812      	ldrh	r2, [r2, #0]
 801174a:	b292      	uxth	r2, r2
 801174c:	9202      	str	r2, [sp, #8]
 801174e:	9301      	str	r3, [sp, #4]
 8011750:	4b90      	ldr	r3, [pc, #576]	; (8011994 <tcp_process+0x5a4>)
 8011752:	9300      	str	r3, [sp, #0]
 8011754:	4b90      	ldr	r3, [pc, #576]	; (8011998 <tcp_process+0x5a8>)
 8011756:	4602      	mov	r2, r0
 8011758:	6878      	ldr	r0, [r7, #4]
 801175a:	f002 fcb9 	bl	80140d0 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011764:	2b05      	cmp	r3, #5
 8011766:	f200 8215 	bhi.w	8011b94 <tcp_process+0x7a4>
          pcb->rtime = 0;
 801176a:	687b      	ldr	r3, [r7, #4]
 801176c:	2200      	movs	r2, #0
 801176e:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8011770:	6878      	ldr	r0, [r7, #4]
 8011772:	f002 fa73 	bl	8013c5c <tcp_rexmit_rto>
      break;
 8011776:	e20d      	b.n	8011b94 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8011778:	4b81      	ldr	r3, [pc, #516]	; (8011980 <tcp_process+0x590>)
 801177a:	781b      	ldrb	r3, [r3, #0]
 801177c:	f003 0310 	and.w	r3, r3, #16
 8011780:	2b00      	cmp	r3, #0
 8011782:	f000 80a1 	beq.w	80118c8 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011786:	4b7f      	ldr	r3, [pc, #508]	; (8011984 <tcp_process+0x594>)
 8011788:	681a      	ldr	r2, [r3, #0]
 801178a:	687b      	ldr	r3, [r7, #4]
 801178c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801178e:	1ad3      	subs	r3, r2, r3
 8011790:	3b01      	subs	r3, #1
 8011792:	2b00      	cmp	r3, #0
 8011794:	db7e      	blt.n	8011894 <tcp_process+0x4a4>
 8011796:	4b7b      	ldr	r3, [pc, #492]	; (8011984 <tcp_process+0x594>)
 8011798:	681a      	ldr	r2, [r3, #0]
 801179a:	687b      	ldr	r3, [r7, #4]
 801179c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801179e:	1ad3      	subs	r3, r2, r3
 80117a0:	2b00      	cmp	r3, #0
 80117a2:	dc77      	bgt.n	8011894 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 80117a4:	687b      	ldr	r3, [r7, #4]
 80117a6:	2204      	movs	r2, #4
 80117a8:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 80117aa:	687b      	ldr	r3, [r7, #4]
 80117ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80117ae:	2b00      	cmp	r3, #0
 80117b0:	d102      	bne.n	80117b8 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 80117b2:	23fa      	movs	r3, #250	; 0xfa
 80117b4:	77bb      	strb	r3, [r7, #30]
 80117b6:	e01d      	b.n	80117f4 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 80117b8:	687b      	ldr	r3, [r7, #4]
 80117ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80117bc:	699b      	ldr	r3, [r3, #24]
 80117be:	2b00      	cmp	r3, #0
 80117c0:	d106      	bne.n	80117d0 <tcp_process+0x3e0>
 80117c2:	4b76      	ldr	r3, [pc, #472]	; (801199c <tcp_process+0x5ac>)
 80117c4:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 80117c8:	4975      	ldr	r1, [pc, #468]	; (80119a0 <tcp_process+0x5b0>)
 80117ca:	4876      	ldr	r0, [pc, #472]	; (80119a4 <tcp_process+0x5b4>)
 80117cc:	f008 fb98 	bl	8019f00 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80117d0:	687b      	ldr	r3, [r7, #4]
 80117d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80117d4:	699b      	ldr	r3, [r3, #24]
 80117d6:	2b00      	cmp	r3, #0
 80117d8:	d00a      	beq.n	80117f0 <tcp_process+0x400>
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80117de:	699b      	ldr	r3, [r3, #24]
 80117e0:	687a      	ldr	r2, [r7, #4]
 80117e2:	6910      	ldr	r0, [r2, #16]
 80117e4:	2200      	movs	r2, #0
 80117e6:	6879      	ldr	r1, [r7, #4]
 80117e8:	4798      	blx	r3
 80117ea:	4603      	mov	r3, r0
 80117ec:	77bb      	strb	r3, [r7, #30]
 80117ee:	e001      	b.n	80117f4 <tcp_process+0x404>
 80117f0:	23f0      	movs	r3, #240	; 0xf0
 80117f2:	77bb      	strb	r3, [r7, #30]
          }
          if (err != ERR_OK) {
 80117f4:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80117f8:	2b00      	cmp	r3, #0
 80117fa:	d00a      	beq.n	8011812 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 80117fc:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8011800:	f113 0f0d 	cmn.w	r3, #13
 8011804:	d002      	beq.n	801180c <tcp_process+0x41c>
              tcp_abort(pcb);
 8011806:	6878      	ldr	r0, [r7, #4]
 8011808:	f7fd ff76 	bl	800f6f8 <tcp_abort>
            }
            return ERR_ABRT;
 801180c:	f06f 030c 	mvn.w	r3, #12
 8011810:	e1ce      	b.n	8011bb0 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8011812:	6878      	ldr	r0, [r7, #4]
 8011814:	f000 fae0 	bl	8011dd8 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8011818:	4b63      	ldr	r3, [pc, #396]	; (80119a8 <tcp_process+0x5b8>)
 801181a:	881b      	ldrh	r3, [r3, #0]
 801181c:	2b00      	cmp	r3, #0
 801181e:	d005      	beq.n	801182c <tcp_process+0x43c>
            recv_acked--;
 8011820:	4b61      	ldr	r3, [pc, #388]	; (80119a8 <tcp_process+0x5b8>)
 8011822:	881b      	ldrh	r3, [r3, #0]
 8011824:	3b01      	subs	r3, #1
 8011826:	b29a      	uxth	r2, r3
 8011828:	4b5f      	ldr	r3, [pc, #380]	; (80119a8 <tcp_process+0x5b8>)
 801182a:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801182c:	687b      	ldr	r3, [r7, #4]
 801182e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011830:	009a      	lsls	r2, r3, #2
 8011832:	687b      	ldr	r3, [r7, #4]
 8011834:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011836:	005b      	lsls	r3, r3, #1
 8011838:	f241 111c 	movw	r1, #4380	; 0x111c
 801183c:	428b      	cmp	r3, r1
 801183e:	bf38      	it	cc
 8011840:	460b      	movcc	r3, r1
 8011842:	429a      	cmp	r2, r3
 8011844:	d204      	bcs.n	8011850 <tcp_process+0x460>
 8011846:	687b      	ldr	r3, [r7, #4]
 8011848:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801184a:	009b      	lsls	r3, r3, #2
 801184c:	b29b      	uxth	r3, r3
 801184e:	e00d      	b.n	801186c <tcp_process+0x47c>
 8011850:	687b      	ldr	r3, [r7, #4]
 8011852:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011854:	005b      	lsls	r3, r3, #1
 8011856:	f241 121c 	movw	r2, #4380	; 0x111c
 801185a:	4293      	cmp	r3, r2
 801185c:	d904      	bls.n	8011868 <tcp_process+0x478>
 801185e:	687b      	ldr	r3, [r7, #4]
 8011860:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011862:	005b      	lsls	r3, r3, #1
 8011864:	b29b      	uxth	r3, r3
 8011866:	e001      	b.n	801186c <tcp_process+0x47c>
 8011868:	f241 131c 	movw	r3, #4380	; 0x111c
 801186c:	687a      	ldr	r2, [r7, #4]
 801186e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8011872:	4b4e      	ldr	r3, [pc, #312]	; (80119ac <tcp_process+0x5bc>)
 8011874:	781b      	ldrb	r3, [r3, #0]
 8011876:	f003 0320 	and.w	r3, r3, #32
 801187a:	2b00      	cmp	r3, #0
 801187c:	d037      	beq.n	80118ee <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 801187e:	687b      	ldr	r3, [r7, #4]
 8011880:	8b5b      	ldrh	r3, [r3, #26]
 8011882:	f043 0302 	orr.w	r3, r3, #2
 8011886:	b29a      	uxth	r2, r3
 8011888:	687b      	ldr	r3, [r7, #4]
 801188a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	2207      	movs	r2, #7
 8011890:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8011892:	e02c      	b.n	80118ee <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011894:	4b3b      	ldr	r3, [pc, #236]	; (8011984 <tcp_process+0x594>)
 8011896:	6819      	ldr	r1, [r3, #0]
 8011898:	4b3b      	ldr	r3, [pc, #236]	; (8011988 <tcp_process+0x598>)
 801189a:	881b      	ldrh	r3, [r3, #0]
 801189c:	461a      	mov	r2, r3
 801189e:	4b3b      	ldr	r3, [pc, #236]	; (801198c <tcp_process+0x59c>)
 80118a0:	681b      	ldr	r3, [r3, #0]
 80118a2:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80118a4:	4b3a      	ldr	r3, [pc, #232]	; (8011990 <tcp_process+0x5a0>)
 80118a6:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80118a8:	885b      	ldrh	r3, [r3, #2]
 80118aa:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80118ac:	4a38      	ldr	r2, [pc, #224]	; (8011990 <tcp_process+0x5a0>)
 80118ae:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80118b0:	8812      	ldrh	r2, [r2, #0]
 80118b2:	b292      	uxth	r2, r2
 80118b4:	9202      	str	r2, [sp, #8]
 80118b6:	9301      	str	r3, [sp, #4]
 80118b8:	4b36      	ldr	r3, [pc, #216]	; (8011994 <tcp_process+0x5a4>)
 80118ba:	9300      	str	r3, [sp, #0]
 80118bc:	4b36      	ldr	r3, [pc, #216]	; (8011998 <tcp_process+0x5a8>)
 80118be:	4602      	mov	r2, r0
 80118c0:	6878      	ldr	r0, [r7, #4]
 80118c2:	f002 fc05 	bl	80140d0 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 80118c6:	e167      	b.n	8011b98 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 80118c8:	4b2d      	ldr	r3, [pc, #180]	; (8011980 <tcp_process+0x590>)
 80118ca:	781b      	ldrb	r3, [r3, #0]
 80118cc:	f003 0302 	and.w	r3, r3, #2
 80118d0:	2b00      	cmp	r3, #0
 80118d2:	f000 8161 	beq.w	8011b98 <tcp_process+0x7a8>
 80118d6:	687b      	ldr	r3, [r7, #4]
 80118d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80118da:	1e5a      	subs	r2, r3, #1
 80118dc:	4b2b      	ldr	r3, [pc, #172]	; (801198c <tcp_process+0x59c>)
 80118de:	681b      	ldr	r3, [r3, #0]
 80118e0:	429a      	cmp	r2, r3
 80118e2:	f040 8159 	bne.w	8011b98 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 80118e6:	6878      	ldr	r0, [r7, #4]
 80118e8:	f002 f9da 	bl	8013ca0 <tcp_rexmit>
      break;
 80118ec:	e154      	b.n	8011b98 <tcp_process+0x7a8>
 80118ee:	e153      	b.n	8011b98 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 80118f0:	6878      	ldr	r0, [r7, #4]
 80118f2:	f000 fa71 	bl	8011dd8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 80118f6:	4b2d      	ldr	r3, [pc, #180]	; (80119ac <tcp_process+0x5bc>)
 80118f8:	781b      	ldrb	r3, [r3, #0]
 80118fa:	f003 0320 	and.w	r3, r3, #32
 80118fe:	2b00      	cmp	r3, #0
 8011900:	f000 814c 	beq.w	8011b9c <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8011904:	687b      	ldr	r3, [r7, #4]
 8011906:	8b5b      	ldrh	r3, [r3, #26]
 8011908:	f043 0302 	orr.w	r3, r3, #2
 801190c:	b29a      	uxth	r2, r3
 801190e:	687b      	ldr	r3, [r7, #4]
 8011910:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8011912:	687b      	ldr	r3, [r7, #4]
 8011914:	2207      	movs	r2, #7
 8011916:	751a      	strb	r2, [r3, #20]
      }
      break;
 8011918:	e140      	b.n	8011b9c <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 801191a:	6878      	ldr	r0, [r7, #4]
 801191c:	f000 fa5c 	bl	8011dd8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8011920:	4b22      	ldr	r3, [pc, #136]	; (80119ac <tcp_process+0x5bc>)
 8011922:	781b      	ldrb	r3, [r3, #0]
 8011924:	f003 0320 	and.w	r3, r3, #32
 8011928:	2b00      	cmp	r3, #0
 801192a:	d071      	beq.n	8011a10 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801192c:	4b14      	ldr	r3, [pc, #80]	; (8011980 <tcp_process+0x590>)
 801192e:	781b      	ldrb	r3, [r3, #0]
 8011930:	f003 0310 	and.w	r3, r3, #16
 8011934:	2b00      	cmp	r3, #0
 8011936:	d060      	beq.n	80119fa <tcp_process+0x60a>
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801193c:	4b11      	ldr	r3, [pc, #68]	; (8011984 <tcp_process+0x594>)
 801193e:	681b      	ldr	r3, [r3, #0]
 8011940:	429a      	cmp	r2, r3
 8011942:	d15a      	bne.n	80119fa <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8011944:	687b      	ldr	r3, [r7, #4]
 8011946:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011948:	2b00      	cmp	r3, #0
 801194a:	d156      	bne.n	80119fa <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	8b5b      	ldrh	r3, [r3, #26]
 8011950:	f043 0302 	orr.w	r3, r3, #2
 8011954:	b29a      	uxth	r2, r3
 8011956:	687b      	ldr	r3, [r7, #4]
 8011958:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 801195a:	6878      	ldr	r0, [r7, #4]
 801195c:	f7fe fda8 	bl	80104b0 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8011960:	4b13      	ldr	r3, [pc, #76]	; (80119b0 <tcp_process+0x5c0>)
 8011962:	681b      	ldr	r3, [r3, #0]
 8011964:	687a      	ldr	r2, [r7, #4]
 8011966:	429a      	cmp	r2, r3
 8011968:	d105      	bne.n	8011976 <tcp_process+0x586>
 801196a:	4b11      	ldr	r3, [pc, #68]	; (80119b0 <tcp_process+0x5c0>)
 801196c:	681b      	ldr	r3, [r3, #0]
 801196e:	68db      	ldr	r3, [r3, #12]
 8011970:	4a0f      	ldr	r2, [pc, #60]	; (80119b0 <tcp_process+0x5c0>)
 8011972:	6013      	str	r3, [r2, #0]
 8011974:	e02e      	b.n	80119d4 <tcp_process+0x5e4>
 8011976:	4b0e      	ldr	r3, [pc, #56]	; (80119b0 <tcp_process+0x5c0>)
 8011978:	681b      	ldr	r3, [r3, #0]
 801197a:	613b      	str	r3, [r7, #16]
 801197c:	e027      	b.n	80119ce <tcp_process+0x5de>
 801197e:	bf00      	nop
 8011980:	20013b0c 	.word	0x20013b0c
 8011984:	20013b04 	.word	0x20013b04
 8011988:	20013b0a 	.word	0x20013b0a
 801198c:	20013b00 	.word	0x20013b00
 8011990:	20013af0 	.word	0x20013af0
 8011994:	2000a060 	.word	0x2000a060
 8011998:	2000a064 	.word	0x2000a064
 801199c:	0801ce1c 	.word	0x0801ce1c
 80119a0:	0801d0bc 	.word	0x0801d0bc
 80119a4:	0801ce68 	.word	0x0801ce68
 80119a8:	20013b08 	.word	0x20013b08
 80119ac:	20013b0d 	.word	0x20013b0d
 80119b0:	20013ad0 	.word	0x20013ad0
 80119b4:	693b      	ldr	r3, [r7, #16]
 80119b6:	68db      	ldr	r3, [r3, #12]
 80119b8:	687a      	ldr	r2, [r7, #4]
 80119ba:	429a      	cmp	r2, r3
 80119bc:	d104      	bne.n	80119c8 <tcp_process+0x5d8>
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	68da      	ldr	r2, [r3, #12]
 80119c2:	693b      	ldr	r3, [r7, #16]
 80119c4:	60da      	str	r2, [r3, #12]
 80119c6:	e005      	b.n	80119d4 <tcp_process+0x5e4>
 80119c8:	693b      	ldr	r3, [r7, #16]
 80119ca:	68db      	ldr	r3, [r3, #12]
 80119cc:	613b      	str	r3, [r7, #16]
 80119ce:	693b      	ldr	r3, [r7, #16]
 80119d0:	2b00      	cmp	r3, #0
 80119d2:	d1ef      	bne.n	80119b4 <tcp_process+0x5c4>
 80119d4:	687b      	ldr	r3, [r7, #4]
 80119d6:	2200      	movs	r2, #0
 80119d8:	60da      	str	r2, [r3, #12]
 80119da:	4b77      	ldr	r3, [pc, #476]	; (8011bb8 <tcp_process+0x7c8>)
 80119dc:	2201      	movs	r2, #1
 80119de:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 80119e0:	687b      	ldr	r3, [r7, #4]
 80119e2:	220a      	movs	r2, #10
 80119e4:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 80119e6:	4b75      	ldr	r3, [pc, #468]	; (8011bbc <tcp_process+0x7cc>)
 80119e8:	681a      	ldr	r2, [r3, #0]
 80119ea:	687b      	ldr	r3, [r7, #4]
 80119ec:	60da      	str	r2, [r3, #12]
 80119ee:	4a73      	ldr	r2, [pc, #460]	; (8011bbc <tcp_process+0x7cc>)
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	6013      	str	r3, [r2, #0]
 80119f4:	f002 fd2e 	bl	8014454 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 80119f8:	e0d2      	b.n	8011ba0 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 80119fa:	687b      	ldr	r3, [r7, #4]
 80119fc:	8b5b      	ldrh	r3, [r3, #26]
 80119fe:	f043 0302 	orr.w	r3, r3, #2
 8011a02:	b29a      	uxth	r2, r3
 8011a04:	687b      	ldr	r3, [r7, #4]
 8011a06:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8011a08:	687b      	ldr	r3, [r7, #4]
 8011a0a:	2208      	movs	r2, #8
 8011a0c:	751a      	strb	r2, [r3, #20]
      break;
 8011a0e:	e0c7      	b.n	8011ba0 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011a10:	4b6b      	ldr	r3, [pc, #428]	; (8011bc0 <tcp_process+0x7d0>)
 8011a12:	781b      	ldrb	r3, [r3, #0]
 8011a14:	f003 0310 	and.w	r3, r3, #16
 8011a18:	2b00      	cmp	r3, #0
 8011a1a:	f000 80c1 	beq.w	8011ba0 <tcp_process+0x7b0>
 8011a1e:	687b      	ldr	r3, [r7, #4]
 8011a20:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011a22:	4b68      	ldr	r3, [pc, #416]	; (8011bc4 <tcp_process+0x7d4>)
 8011a24:	681b      	ldr	r3, [r3, #0]
 8011a26:	429a      	cmp	r2, r3
 8011a28:	f040 80ba 	bne.w	8011ba0 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8011a2c:	687b      	ldr	r3, [r7, #4]
 8011a2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011a30:	2b00      	cmp	r3, #0
 8011a32:	f040 80b5 	bne.w	8011ba0 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8011a36:	687b      	ldr	r3, [r7, #4]
 8011a38:	2206      	movs	r2, #6
 8011a3a:	751a      	strb	r2, [r3, #20]
      break;
 8011a3c:	e0b0      	b.n	8011ba0 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8011a3e:	6878      	ldr	r0, [r7, #4]
 8011a40:	f000 f9ca 	bl	8011dd8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8011a44:	4b60      	ldr	r3, [pc, #384]	; (8011bc8 <tcp_process+0x7d8>)
 8011a46:	781b      	ldrb	r3, [r3, #0]
 8011a48:	f003 0320 	and.w	r3, r3, #32
 8011a4c:	2b00      	cmp	r3, #0
 8011a4e:	f000 80a9 	beq.w	8011ba4 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	8b5b      	ldrh	r3, [r3, #26]
 8011a56:	f043 0302 	orr.w	r3, r3, #2
 8011a5a:	b29a      	uxth	r2, r3
 8011a5c:	687b      	ldr	r3, [r7, #4]
 8011a5e:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8011a60:	6878      	ldr	r0, [r7, #4]
 8011a62:	f7fe fd25 	bl	80104b0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8011a66:	4b59      	ldr	r3, [pc, #356]	; (8011bcc <tcp_process+0x7dc>)
 8011a68:	681b      	ldr	r3, [r3, #0]
 8011a6a:	687a      	ldr	r2, [r7, #4]
 8011a6c:	429a      	cmp	r2, r3
 8011a6e:	d105      	bne.n	8011a7c <tcp_process+0x68c>
 8011a70:	4b56      	ldr	r3, [pc, #344]	; (8011bcc <tcp_process+0x7dc>)
 8011a72:	681b      	ldr	r3, [r3, #0]
 8011a74:	68db      	ldr	r3, [r3, #12]
 8011a76:	4a55      	ldr	r2, [pc, #340]	; (8011bcc <tcp_process+0x7dc>)
 8011a78:	6013      	str	r3, [r2, #0]
 8011a7a:	e013      	b.n	8011aa4 <tcp_process+0x6b4>
 8011a7c:	4b53      	ldr	r3, [pc, #332]	; (8011bcc <tcp_process+0x7dc>)
 8011a7e:	681b      	ldr	r3, [r3, #0]
 8011a80:	60fb      	str	r3, [r7, #12]
 8011a82:	e00c      	b.n	8011a9e <tcp_process+0x6ae>
 8011a84:	68fb      	ldr	r3, [r7, #12]
 8011a86:	68db      	ldr	r3, [r3, #12]
 8011a88:	687a      	ldr	r2, [r7, #4]
 8011a8a:	429a      	cmp	r2, r3
 8011a8c:	d104      	bne.n	8011a98 <tcp_process+0x6a8>
 8011a8e:	687b      	ldr	r3, [r7, #4]
 8011a90:	68da      	ldr	r2, [r3, #12]
 8011a92:	68fb      	ldr	r3, [r7, #12]
 8011a94:	60da      	str	r2, [r3, #12]
 8011a96:	e005      	b.n	8011aa4 <tcp_process+0x6b4>
 8011a98:	68fb      	ldr	r3, [r7, #12]
 8011a9a:	68db      	ldr	r3, [r3, #12]
 8011a9c:	60fb      	str	r3, [r7, #12]
 8011a9e:	68fb      	ldr	r3, [r7, #12]
 8011aa0:	2b00      	cmp	r3, #0
 8011aa2:	d1ef      	bne.n	8011a84 <tcp_process+0x694>
 8011aa4:	687b      	ldr	r3, [r7, #4]
 8011aa6:	2200      	movs	r2, #0
 8011aa8:	60da      	str	r2, [r3, #12]
 8011aaa:	4b43      	ldr	r3, [pc, #268]	; (8011bb8 <tcp_process+0x7c8>)
 8011aac:	2201      	movs	r2, #1
 8011aae:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8011ab0:	687b      	ldr	r3, [r7, #4]
 8011ab2:	220a      	movs	r2, #10
 8011ab4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8011ab6:	4b41      	ldr	r3, [pc, #260]	; (8011bbc <tcp_process+0x7cc>)
 8011ab8:	681a      	ldr	r2, [r3, #0]
 8011aba:	687b      	ldr	r3, [r7, #4]
 8011abc:	60da      	str	r2, [r3, #12]
 8011abe:	4a3f      	ldr	r2, [pc, #252]	; (8011bbc <tcp_process+0x7cc>)
 8011ac0:	687b      	ldr	r3, [r7, #4]
 8011ac2:	6013      	str	r3, [r2, #0]
 8011ac4:	f002 fcc6 	bl	8014454 <tcp_timer_needed>
      }
      break;
 8011ac8:	e06c      	b.n	8011ba4 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8011aca:	6878      	ldr	r0, [r7, #4]
 8011acc:	f000 f984 	bl	8011dd8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8011ad0:	4b3b      	ldr	r3, [pc, #236]	; (8011bc0 <tcp_process+0x7d0>)
 8011ad2:	781b      	ldrb	r3, [r3, #0]
 8011ad4:	f003 0310 	and.w	r3, r3, #16
 8011ad8:	2b00      	cmp	r3, #0
 8011ada:	d065      	beq.n	8011ba8 <tcp_process+0x7b8>
 8011adc:	687b      	ldr	r3, [r7, #4]
 8011ade:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011ae0:	4b38      	ldr	r3, [pc, #224]	; (8011bc4 <tcp_process+0x7d4>)
 8011ae2:	681b      	ldr	r3, [r3, #0]
 8011ae4:	429a      	cmp	r2, r3
 8011ae6:	d15f      	bne.n	8011ba8 <tcp_process+0x7b8>
 8011ae8:	687b      	ldr	r3, [r7, #4]
 8011aea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011aec:	2b00      	cmp	r3, #0
 8011aee:	d15b      	bne.n	8011ba8 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8011af0:	6878      	ldr	r0, [r7, #4]
 8011af2:	f7fe fcdd 	bl	80104b0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8011af6:	4b35      	ldr	r3, [pc, #212]	; (8011bcc <tcp_process+0x7dc>)
 8011af8:	681b      	ldr	r3, [r3, #0]
 8011afa:	687a      	ldr	r2, [r7, #4]
 8011afc:	429a      	cmp	r2, r3
 8011afe:	d105      	bne.n	8011b0c <tcp_process+0x71c>
 8011b00:	4b32      	ldr	r3, [pc, #200]	; (8011bcc <tcp_process+0x7dc>)
 8011b02:	681b      	ldr	r3, [r3, #0]
 8011b04:	68db      	ldr	r3, [r3, #12]
 8011b06:	4a31      	ldr	r2, [pc, #196]	; (8011bcc <tcp_process+0x7dc>)
 8011b08:	6013      	str	r3, [r2, #0]
 8011b0a:	e013      	b.n	8011b34 <tcp_process+0x744>
 8011b0c:	4b2f      	ldr	r3, [pc, #188]	; (8011bcc <tcp_process+0x7dc>)
 8011b0e:	681b      	ldr	r3, [r3, #0]
 8011b10:	61bb      	str	r3, [r7, #24]
 8011b12:	e00c      	b.n	8011b2e <tcp_process+0x73e>
 8011b14:	69bb      	ldr	r3, [r7, #24]
 8011b16:	68db      	ldr	r3, [r3, #12]
 8011b18:	687a      	ldr	r2, [r7, #4]
 8011b1a:	429a      	cmp	r2, r3
 8011b1c:	d104      	bne.n	8011b28 <tcp_process+0x738>
 8011b1e:	687b      	ldr	r3, [r7, #4]
 8011b20:	68da      	ldr	r2, [r3, #12]
 8011b22:	69bb      	ldr	r3, [r7, #24]
 8011b24:	60da      	str	r2, [r3, #12]
 8011b26:	e005      	b.n	8011b34 <tcp_process+0x744>
 8011b28:	69bb      	ldr	r3, [r7, #24]
 8011b2a:	68db      	ldr	r3, [r3, #12]
 8011b2c:	61bb      	str	r3, [r7, #24]
 8011b2e:	69bb      	ldr	r3, [r7, #24]
 8011b30:	2b00      	cmp	r3, #0
 8011b32:	d1ef      	bne.n	8011b14 <tcp_process+0x724>
 8011b34:	687b      	ldr	r3, [r7, #4]
 8011b36:	2200      	movs	r2, #0
 8011b38:	60da      	str	r2, [r3, #12]
 8011b3a:	4b1f      	ldr	r3, [pc, #124]	; (8011bb8 <tcp_process+0x7c8>)
 8011b3c:	2201      	movs	r2, #1
 8011b3e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8011b40:	687b      	ldr	r3, [r7, #4]
 8011b42:	220a      	movs	r2, #10
 8011b44:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8011b46:	4b1d      	ldr	r3, [pc, #116]	; (8011bbc <tcp_process+0x7cc>)
 8011b48:	681a      	ldr	r2, [r3, #0]
 8011b4a:	687b      	ldr	r3, [r7, #4]
 8011b4c:	60da      	str	r2, [r3, #12]
 8011b4e:	4a1b      	ldr	r2, [pc, #108]	; (8011bbc <tcp_process+0x7cc>)
 8011b50:	687b      	ldr	r3, [r7, #4]
 8011b52:	6013      	str	r3, [r2, #0]
 8011b54:	f002 fc7e 	bl	8014454 <tcp_timer_needed>
      }
      break;
 8011b58:	e026      	b.n	8011ba8 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8011b5a:	6878      	ldr	r0, [r7, #4]
 8011b5c:	f000 f93c 	bl	8011dd8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8011b60:	4b17      	ldr	r3, [pc, #92]	; (8011bc0 <tcp_process+0x7d0>)
 8011b62:	781b      	ldrb	r3, [r3, #0]
 8011b64:	f003 0310 	and.w	r3, r3, #16
 8011b68:	2b00      	cmp	r3, #0
 8011b6a:	d01f      	beq.n	8011bac <tcp_process+0x7bc>
 8011b6c:	687b      	ldr	r3, [r7, #4]
 8011b6e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011b70:	4b14      	ldr	r3, [pc, #80]	; (8011bc4 <tcp_process+0x7d4>)
 8011b72:	681b      	ldr	r3, [r3, #0]
 8011b74:	429a      	cmp	r2, r3
 8011b76:	d119      	bne.n	8011bac <tcp_process+0x7bc>
 8011b78:	687b      	ldr	r3, [r7, #4]
 8011b7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011b7c:	2b00      	cmp	r3, #0
 8011b7e:	d115      	bne.n	8011bac <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8011b80:	4b11      	ldr	r3, [pc, #68]	; (8011bc8 <tcp_process+0x7d8>)
 8011b82:	781b      	ldrb	r3, [r3, #0]
 8011b84:	f043 0310 	orr.w	r3, r3, #16
 8011b88:	b2da      	uxtb	r2, r3
 8011b8a:	4b0f      	ldr	r3, [pc, #60]	; (8011bc8 <tcp_process+0x7d8>)
 8011b8c:	701a      	strb	r2, [r3, #0]
      }
      break;
 8011b8e:	e00d      	b.n	8011bac <tcp_process+0x7bc>
    default:
      break;
 8011b90:	bf00      	nop
 8011b92:	e00c      	b.n	8011bae <tcp_process+0x7be>
      break;
 8011b94:	bf00      	nop
 8011b96:	e00a      	b.n	8011bae <tcp_process+0x7be>
      break;
 8011b98:	bf00      	nop
 8011b9a:	e008      	b.n	8011bae <tcp_process+0x7be>
      break;
 8011b9c:	bf00      	nop
 8011b9e:	e006      	b.n	8011bae <tcp_process+0x7be>
      break;
 8011ba0:	bf00      	nop
 8011ba2:	e004      	b.n	8011bae <tcp_process+0x7be>
      break;
 8011ba4:	bf00      	nop
 8011ba6:	e002      	b.n	8011bae <tcp_process+0x7be>
      break;
 8011ba8:	bf00      	nop
 8011baa:	e000      	b.n	8011bae <tcp_process+0x7be>
      break;
 8011bac:	bf00      	nop
  }
  return ERR_OK;
 8011bae:	2300      	movs	r3, #0
}
 8011bb0:	4618      	mov	r0, r3
 8011bb2:	3724      	adds	r7, #36	; 0x24
 8011bb4:	46bd      	mov	sp, r7
 8011bb6:	bd90      	pop	{r4, r7, pc}
 8011bb8:	20013ad8 	.word	0x20013ad8
 8011bbc:	20013ad4 	.word	0x20013ad4
 8011bc0:	20013b0c 	.word	0x20013b0c
 8011bc4:	20013b04 	.word	0x20013b04
 8011bc8:	20013b0d 	.word	0x20013b0d
 8011bcc:	20013ad0 	.word	0x20013ad0

08011bd0 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8011bd0:	b590      	push	{r4, r7, lr}
 8011bd2:	b085      	sub	sp, #20
 8011bd4:	af00      	add	r7, sp, #0
 8011bd6:	6078      	str	r0, [r7, #4]
 8011bd8:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8011bda:	687b      	ldr	r3, [r7, #4]
 8011bdc:	2b00      	cmp	r3, #0
 8011bde:	d106      	bne.n	8011bee <tcp_oos_insert_segment+0x1e>
 8011be0:	4b3b      	ldr	r3, [pc, #236]	; (8011cd0 <tcp_oos_insert_segment+0x100>)
 8011be2:	f240 421f 	movw	r2, #1055	; 0x41f
 8011be6:	493b      	ldr	r1, [pc, #236]	; (8011cd4 <tcp_oos_insert_segment+0x104>)
 8011be8:	483b      	ldr	r0, [pc, #236]	; (8011cd8 <tcp_oos_insert_segment+0x108>)
 8011bea:	f008 f989 	bl	8019f00 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8011bee:	687b      	ldr	r3, [r7, #4]
 8011bf0:	691b      	ldr	r3, [r3, #16]
 8011bf2:	899b      	ldrh	r3, [r3, #12]
 8011bf4:	b29b      	uxth	r3, r3
 8011bf6:	4618      	mov	r0, r3
 8011bf8:	f7fb f924 	bl	800ce44 <lwip_htons>
 8011bfc:	4603      	mov	r3, r0
 8011bfe:	b2db      	uxtb	r3, r3
 8011c00:	f003 0301 	and.w	r3, r3, #1
 8011c04:	2b00      	cmp	r3, #0
 8011c06:	d028      	beq.n	8011c5a <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8011c08:	6838      	ldr	r0, [r7, #0]
 8011c0a:	f7fe fa4f 	bl	80100ac <tcp_segs_free>
    next = NULL;
 8011c0e:	2300      	movs	r3, #0
 8011c10:	603b      	str	r3, [r7, #0]
 8011c12:	e056      	b.n	8011cc2 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8011c14:	683b      	ldr	r3, [r7, #0]
 8011c16:	691b      	ldr	r3, [r3, #16]
 8011c18:	899b      	ldrh	r3, [r3, #12]
 8011c1a:	b29b      	uxth	r3, r3
 8011c1c:	4618      	mov	r0, r3
 8011c1e:	f7fb f911 	bl	800ce44 <lwip_htons>
 8011c22:	4603      	mov	r3, r0
 8011c24:	b2db      	uxtb	r3, r3
 8011c26:	f003 0301 	and.w	r3, r3, #1
 8011c2a:	2b00      	cmp	r3, #0
 8011c2c:	d00d      	beq.n	8011c4a <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8011c2e:	687b      	ldr	r3, [r7, #4]
 8011c30:	691b      	ldr	r3, [r3, #16]
 8011c32:	899b      	ldrh	r3, [r3, #12]
 8011c34:	b29c      	uxth	r4, r3
 8011c36:	2001      	movs	r0, #1
 8011c38:	f7fb f904 	bl	800ce44 <lwip_htons>
 8011c3c:	4603      	mov	r3, r0
 8011c3e:	461a      	mov	r2, r3
 8011c40:	687b      	ldr	r3, [r7, #4]
 8011c42:	691b      	ldr	r3, [r3, #16]
 8011c44:	4322      	orrs	r2, r4
 8011c46:	b292      	uxth	r2, r2
 8011c48:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8011c4a:	683b      	ldr	r3, [r7, #0]
 8011c4c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8011c4e:	683b      	ldr	r3, [r7, #0]
 8011c50:	681b      	ldr	r3, [r3, #0]
 8011c52:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8011c54:	68f8      	ldr	r0, [r7, #12]
 8011c56:	f7fe fa3e 	bl	80100d6 <tcp_seg_free>
    while (next &&
 8011c5a:	683b      	ldr	r3, [r7, #0]
 8011c5c:	2b00      	cmp	r3, #0
 8011c5e:	d00e      	beq.n	8011c7e <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8011c60:	687b      	ldr	r3, [r7, #4]
 8011c62:	891b      	ldrh	r3, [r3, #8]
 8011c64:	461a      	mov	r2, r3
 8011c66:	4b1d      	ldr	r3, [pc, #116]	; (8011cdc <tcp_oos_insert_segment+0x10c>)
 8011c68:	681b      	ldr	r3, [r3, #0]
 8011c6a:	441a      	add	r2, r3
 8011c6c:	683b      	ldr	r3, [r7, #0]
 8011c6e:	691b      	ldr	r3, [r3, #16]
 8011c70:	685b      	ldr	r3, [r3, #4]
 8011c72:	6839      	ldr	r1, [r7, #0]
 8011c74:	8909      	ldrh	r1, [r1, #8]
 8011c76:	440b      	add	r3, r1
 8011c78:	1ad3      	subs	r3, r2, r3
    while (next &&
 8011c7a:	2b00      	cmp	r3, #0
 8011c7c:	daca      	bge.n	8011c14 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8011c7e:	683b      	ldr	r3, [r7, #0]
 8011c80:	2b00      	cmp	r3, #0
 8011c82:	d01e      	beq.n	8011cc2 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8011c84:	687b      	ldr	r3, [r7, #4]
 8011c86:	891b      	ldrh	r3, [r3, #8]
 8011c88:	461a      	mov	r2, r3
 8011c8a:	4b14      	ldr	r3, [pc, #80]	; (8011cdc <tcp_oos_insert_segment+0x10c>)
 8011c8c:	681b      	ldr	r3, [r3, #0]
 8011c8e:	441a      	add	r2, r3
 8011c90:	683b      	ldr	r3, [r7, #0]
 8011c92:	691b      	ldr	r3, [r3, #16]
 8011c94:	685b      	ldr	r3, [r3, #4]
 8011c96:	1ad3      	subs	r3, r2, r3
    if (next &&
 8011c98:	2b00      	cmp	r3, #0
 8011c9a:	dd12      	ble.n	8011cc2 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8011c9c:	683b      	ldr	r3, [r7, #0]
 8011c9e:	691b      	ldr	r3, [r3, #16]
 8011ca0:	685b      	ldr	r3, [r3, #4]
 8011ca2:	b29a      	uxth	r2, r3
 8011ca4:	4b0d      	ldr	r3, [pc, #52]	; (8011cdc <tcp_oos_insert_segment+0x10c>)
 8011ca6:	681b      	ldr	r3, [r3, #0]
 8011ca8:	b29b      	uxth	r3, r3
 8011caa:	1ad3      	subs	r3, r2, r3
 8011cac:	b29a      	uxth	r2, r3
 8011cae:	687b      	ldr	r3, [r7, #4]
 8011cb0:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8011cb2:	687b      	ldr	r3, [r7, #4]
 8011cb4:	685a      	ldr	r2, [r3, #4]
 8011cb6:	687b      	ldr	r3, [r7, #4]
 8011cb8:	891b      	ldrh	r3, [r3, #8]
 8011cba:	4619      	mov	r1, r3
 8011cbc:	4610      	mov	r0, r2
 8011cbe:	f7fc fc5d 	bl	800e57c <pbuf_realloc>
    }
  }
  cseg->next = next;
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	683a      	ldr	r2, [r7, #0]
 8011cc6:	601a      	str	r2, [r3, #0]
}
 8011cc8:	bf00      	nop
 8011cca:	3714      	adds	r7, #20
 8011ccc:	46bd      	mov	sp, r7
 8011cce:	bd90      	pop	{r4, r7, pc}
 8011cd0:	0801ce1c 	.word	0x0801ce1c
 8011cd4:	0801d0dc 	.word	0x0801d0dc
 8011cd8:	0801ce68 	.word	0x0801ce68
 8011cdc:	20013b00 	.word	0x20013b00

08011ce0 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8011ce0:	b5b0      	push	{r4, r5, r7, lr}
 8011ce2:	b086      	sub	sp, #24
 8011ce4:	af00      	add	r7, sp, #0
 8011ce6:	60f8      	str	r0, [r7, #12]
 8011ce8:	60b9      	str	r1, [r7, #8]
 8011cea:	607a      	str	r2, [r7, #4]
 8011cec:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8011cee:	e03e      	b.n	8011d6e <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8011cf0:	68bb      	ldr	r3, [r7, #8]
 8011cf2:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8011cf4:	68bb      	ldr	r3, [r7, #8]
 8011cf6:	681b      	ldr	r3, [r3, #0]
 8011cf8:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8011cfa:	697b      	ldr	r3, [r7, #20]
 8011cfc:	685b      	ldr	r3, [r3, #4]
 8011cfe:	4618      	mov	r0, r3
 8011d00:	f7fc fe50 	bl	800e9a4 <pbuf_clen>
 8011d04:	4603      	mov	r3, r0
 8011d06:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8011d08:	68fb      	ldr	r3, [r7, #12]
 8011d0a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011d0e:	8a7a      	ldrh	r2, [r7, #18]
 8011d10:	429a      	cmp	r2, r3
 8011d12:	d906      	bls.n	8011d22 <tcp_free_acked_segments+0x42>
 8011d14:	4b2a      	ldr	r3, [pc, #168]	; (8011dc0 <tcp_free_acked_segments+0xe0>)
 8011d16:	f240 4257 	movw	r2, #1111	; 0x457
 8011d1a:	492a      	ldr	r1, [pc, #168]	; (8011dc4 <tcp_free_acked_segments+0xe4>)
 8011d1c:	482a      	ldr	r0, [pc, #168]	; (8011dc8 <tcp_free_acked_segments+0xe8>)
 8011d1e:	f008 f8ef 	bl	8019f00 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8011d22:	68fb      	ldr	r3, [r7, #12]
 8011d24:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8011d28:	8a7b      	ldrh	r3, [r7, #18]
 8011d2a:	1ad3      	subs	r3, r2, r3
 8011d2c:	b29a      	uxth	r2, r3
 8011d2e:	68fb      	ldr	r3, [r7, #12]
 8011d30:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8011d34:	697b      	ldr	r3, [r7, #20]
 8011d36:	891a      	ldrh	r2, [r3, #8]
 8011d38:	4b24      	ldr	r3, [pc, #144]	; (8011dcc <tcp_free_acked_segments+0xec>)
 8011d3a:	881b      	ldrh	r3, [r3, #0]
 8011d3c:	4413      	add	r3, r2
 8011d3e:	b29a      	uxth	r2, r3
 8011d40:	4b22      	ldr	r3, [pc, #136]	; (8011dcc <tcp_free_acked_segments+0xec>)
 8011d42:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8011d44:	6978      	ldr	r0, [r7, #20]
 8011d46:	f7fe f9c6 	bl	80100d6 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8011d4a:	68fb      	ldr	r3, [r7, #12]
 8011d4c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011d50:	2b00      	cmp	r3, #0
 8011d52:	d00c      	beq.n	8011d6e <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8011d54:	68bb      	ldr	r3, [r7, #8]
 8011d56:	2b00      	cmp	r3, #0
 8011d58:	d109      	bne.n	8011d6e <tcp_free_acked_segments+0x8e>
 8011d5a:	683b      	ldr	r3, [r7, #0]
 8011d5c:	2b00      	cmp	r3, #0
 8011d5e:	d106      	bne.n	8011d6e <tcp_free_acked_segments+0x8e>
 8011d60:	4b17      	ldr	r3, [pc, #92]	; (8011dc0 <tcp_free_acked_segments+0xe0>)
 8011d62:	f240 4261 	movw	r2, #1121	; 0x461
 8011d66:	491a      	ldr	r1, [pc, #104]	; (8011dd0 <tcp_free_acked_segments+0xf0>)
 8011d68:	4817      	ldr	r0, [pc, #92]	; (8011dc8 <tcp_free_acked_segments+0xe8>)
 8011d6a:	f008 f8c9 	bl	8019f00 <iprintf>
  while (seg_list != NULL &&
 8011d6e:	68bb      	ldr	r3, [r7, #8]
 8011d70:	2b00      	cmp	r3, #0
 8011d72:	d020      	beq.n	8011db6 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8011d74:	68bb      	ldr	r3, [r7, #8]
 8011d76:	691b      	ldr	r3, [r3, #16]
 8011d78:	685b      	ldr	r3, [r3, #4]
 8011d7a:	4618      	mov	r0, r3
 8011d7c:	f7fb f877 	bl	800ce6e <lwip_htonl>
 8011d80:	4604      	mov	r4, r0
 8011d82:	68bb      	ldr	r3, [r7, #8]
 8011d84:	891b      	ldrh	r3, [r3, #8]
 8011d86:	461d      	mov	r5, r3
 8011d88:	68bb      	ldr	r3, [r7, #8]
 8011d8a:	691b      	ldr	r3, [r3, #16]
 8011d8c:	899b      	ldrh	r3, [r3, #12]
 8011d8e:	b29b      	uxth	r3, r3
 8011d90:	4618      	mov	r0, r3
 8011d92:	f7fb f857 	bl	800ce44 <lwip_htons>
 8011d96:	4603      	mov	r3, r0
 8011d98:	b2db      	uxtb	r3, r3
 8011d9a:	f003 0303 	and.w	r3, r3, #3
 8011d9e:	2b00      	cmp	r3, #0
 8011da0:	d001      	beq.n	8011da6 <tcp_free_acked_segments+0xc6>
 8011da2:	2301      	movs	r3, #1
 8011da4:	e000      	b.n	8011da8 <tcp_free_acked_segments+0xc8>
 8011da6:	2300      	movs	r3, #0
 8011da8:	442b      	add	r3, r5
 8011daa:	18e2      	adds	r2, r4, r3
 8011dac:	4b09      	ldr	r3, [pc, #36]	; (8011dd4 <tcp_free_acked_segments+0xf4>)
 8011dae:	681b      	ldr	r3, [r3, #0]
 8011db0:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8011db2:	2b00      	cmp	r3, #0
 8011db4:	dd9c      	ble.n	8011cf0 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8011db6:	68bb      	ldr	r3, [r7, #8]
}
 8011db8:	4618      	mov	r0, r3
 8011dba:	3718      	adds	r7, #24
 8011dbc:	46bd      	mov	sp, r7
 8011dbe:	bdb0      	pop	{r4, r5, r7, pc}
 8011dc0:	0801ce1c 	.word	0x0801ce1c
 8011dc4:	0801d104 	.word	0x0801d104
 8011dc8:	0801ce68 	.word	0x0801ce68
 8011dcc:	20013b08 	.word	0x20013b08
 8011dd0:	0801d12c 	.word	0x0801d12c
 8011dd4:	20013b04 	.word	0x20013b04

08011dd8 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8011dd8:	b5b0      	push	{r4, r5, r7, lr}
 8011dda:	b094      	sub	sp, #80	; 0x50
 8011ddc:	af00      	add	r7, sp, #0
 8011dde:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8011de0:	2300      	movs	r3, #0
 8011de2:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	2b00      	cmp	r3, #0
 8011de8:	d106      	bne.n	8011df8 <tcp_receive+0x20>
 8011dea:	4b91      	ldr	r3, [pc, #580]	; (8012030 <tcp_receive+0x258>)
 8011dec:	f240 427b 	movw	r2, #1147	; 0x47b
 8011df0:	4990      	ldr	r1, [pc, #576]	; (8012034 <tcp_receive+0x25c>)
 8011df2:	4891      	ldr	r0, [pc, #580]	; (8012038 <tcp_receive+0x260>)
 8011df4:	f008 f884 	bl	8019f00 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8011df8:	687b      	ldr	r3, [r7, #4]
 8011dfa:	7d1b      	ldrb	r3, [r3, #20]
 8011dfc:	2b03      	cmp	r3, #3
 8011dfe:	d806      	bhi.n	8011e0e <tcp_receive+0x36>
 8011e00:	4b8b      	ldr	r3, [pc, #556]	; (8012030 <tcp_receive+0x258>)
 8011e02:	f240 427c 	movw	r2, #1148	; 0x47c
 8011e06:	498d      	ldr	r1, [pc, #564]	; (801203c <tcp_receive+0x264>)
 8011e08:	488b      	ldr	r0, [pc, #556]	; (8012038 <tcp_receive+0x260>)
 8011e0a:	f008 f879 	bl	8019f00 <iprintf>

  if (flags & TCP_ACK) {
 8011e0e:	4b8c      	ldr	r3, [pc, #560]	; (8012040 <tcp_receive+0x268>)
 8011e10:	781b      	ldrb	r3, [r3, #0]
 8011e12:	f003 0310 	and.w	r3, r3, #16
 8011e16:	2b00      	cmp	r3, #0
 8011e18:	f000 8264 	beq.w	80122e4 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8011e1c:	687b      	ldr	r3, [r7, #4]
 8011e1e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011e22:	461a      	mov	r2, r3
 8011e24:	687b      	ldr	r3, [r7, #4]
 8011e26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011e28:	4413      	add	r3, r2
 8011e2a:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8011e2c:	687b      	ldr	r3, [r7, #4]
 8011e2e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011e30:	4b84      	ldr	r3, [pc, #528]	; (8012044 <tcp_receive+0x26c>)
 8011e32:	681b      	ldr	r3, [r3, #0]
 8011e34:	1ad3      	subs	r3, r2, r3
 8011e36:	2b00      	cmp	r3, #0
 8011e38:	db1b      	blt.n	8011e72 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8011e3a:	687b      	ldr	r3, [r7, #4]
 8011e3c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011e3e:	4b81      	ldr	r3, [pc, #516]	; (8012044 <tcp_receive+0x26c>)
 8011e40:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8011e42:	429a      	cmp	r2, r3
 8011e44:	d106      	bne.n	8011e54 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8011e46:	687b      	ldr	r3, [r7, #4]
 8011e48:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8011e4a:	4b7f      	ldr	r3, [pc, #508]	; (8012048 <tcp_receive+0x270>)
 8011e4c:	681b      	ldr	r3, [r3, #0]
 8011e4e:	1ad3      	subs	r3, r2, r3
 8011e50:	2b00      	cmp	r3, #0
 8011e52:	db0e      	blt.n	8011e72 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8011e54:	687b      	ldr	r3, [r7, #4]
 8011e56:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8011e58:	4b7b      	ldr	r3, [pc, #492]	; (8012048 <tcp_receive+0x270>)
 8011e5a:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8011e5c:	429a      	cmp	r2, r3
 8011e5e:	d125      	bne.n	8011eac <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8011e60:	4b7a      	ldr	r3, [pc, #488]	; (801204c <tcp_receive+0x274>)
 8011e62:	681b      	ldr	r3, [r3, #0]
 8011e64:	89db      	ldrh	r3, [r3, #14]
 8011e66:	b29a      	uxth	r2, r3
 8011e68:	687b      	ldr	r3, [r7, #4]
 8011e6a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011e6e:	429a      	cmp	r2, r3
 8011e70:	d91c      	bls.n	8011eac <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8011e72:	4b76      	ldr	r3, [pc, #472]	; (801204c <tcp_receive+0x274>)
 8011e74:	681b      	ldr	r3, [r3, #0]
 8011e76:	89db      	ldrh	r3, [r3, #14]
 8011e78:	b29a      	uxth	r2, r3
 8011e7a:	687b      	ldr	r3, [r7, #4]
 8011e7c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8011e80:	687b      	ldr	r3, [r7, #4]
 8011e82:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8011e86:	687b      	ldr	r3, [r7, #4]
 8011e88:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011e8c:	429a      	cmp	r2, r3
 8011e8e:	d205      	bcs.n	8011e9c <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8011e90:	687b      	ldr	r3, [r7, #4]
 8011e92:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8011e96:	687b      	ldr	r3, [r7, #4]
 8011e98:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8011e9c:	4b69      	ldr	r3, [pc, #420]	; (8012044 <tcp_receive+0x26c>)
 8011e9e:	681a      	ldr	r2, [r3, #0]
 8011ea0:	687b      	ldr	r3, [r7, #4]
 8011ea2:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8011ea4:	4b68      	ldr	r3, [pc, #416]	; (8012048 <tcp_receive+0x270>)
 8011ea6:	681a      	ldr	r2, [r3, #0]
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8011eac:	4b66      	ldr	r3, [pc, #408]	; (8012048 <tcp_receive+0x270>)
 8011eae:	681a      	ldr	r2, [r3, #0]
 8011eb0:	687b      	ldr	r3, [r7, #4]
 8011eb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011eb4:	1ad3      	subs	r3, r2, r3
 8011eb6:	2b00      	cmp	r3, #0
 8011eb8:	dc58      	bgt.n	8011f6c <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8011eba:	4b65      	ldr	r3, [pc, #404]	; (8012050 <tcp_receive+0x278>)
 8011ebc:	881b      	ldrh	r3, [r3, #0]
 8011ebe:	2b00      	cmp	r3, #0
 8011ec0:	d14b      	bne.n	8011f5a <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8011ec2:	687b      	ldr	r3, [r7, #4]
 8011ec4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011ec6:	687a      	ldr	r2, [r7, #4]
 8011ec8:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8011ecc:	4413      	add	r3, r2
 8011ece:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011ed0:	429a      	cmp	r2, r3
 8011ed2:	d142      	bne.n	8011f5a <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8011ed4:	687b      	ldr	r3, [r7, #4]
 8011ed6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8011eda:	2b00      	cmp	r3, #0
 8011edc:	db3d      	blt.n	8011f5a <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8011ede:	687b      	ldr	r3, [r7, #4]
 8011ee0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011ee2:	4b59      	ldr	r3, [pc, #356]	; (8012048 <tcp_receive+0x270>)
 8011ee4:	681b      	ldr	r3, [r3, #0]
 8011ee6:	429a      	cmp	r2, r3
 8011ee8:	d137      	bne.n	8011f5a <tcp_receive+0x182>
              found_dupack = 1;
 8011eea:	2301      	movs	r3, #1
 8011eec:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8011eee:	687b      	ldr	r3, [r7, #4]
 8011ef0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8011ef4:	2bff      	cmp	r3, #255	; 0xff
 8011ef6:	d007      	beq.n	8011f08 <tcp_receive+0x130>
                ++pcb->dupacks;
 8011ef8:	687b      	ldr	r3, [r7, #4]
 8011efa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8011efe:	3301      	adds	r3, #1
 8011f00:	b2da      	uxtb	r2, r3
 8011f02:	687b      	ldr	r3, [r7, #4]
 8011f04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8011f08:	687b      	ldr	r3, [r7, #4]
 8011f0a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8011f0e:	2b03      	cmp	r3, #3
 8011f10:	d91b      	bls.n	8011f4a <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8011f12:	687b      	ldr	r3, [r7, #4]
 8011f14:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011f18:	687b      	ldr	r3, [r7, #4]
 8011f1a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011f1c:	4413      	add	r3, r2
 8011f1e:	b29a      	uxth	r2, r3
 8011f20:	687b      	ldr	r3, [r7, #4]
 8011f22:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011f26:	429a      	cmp	r2, r3
 8011f28:	d30a      	bcc.n	8011f40 <tcp_receive+0x168>
 8011f2a:	687b      	ldr	r3, [r7, #4]
 8011f2c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011f30:	687b      	ldr	r3, [r7, #4]
 8011f32:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011f34:	4413      	add	r3, r2
 8011f36:	b29a      	uxth	r2, r3
 8011f38:	687b      	ldr	r3, [r7, #4]
 8011f3a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8011f3e:	e004      	b.n	8011f4a <tcp_receive+0x172>
 8011f40:	687b      	ldr	r3, [r7, #4]
 8011f42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011f46:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8011f4a:	687b      	ldr	r3, [r7, #4]
 8011f4c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8011f50:	2b02      	cmp	r3, #2
 8011f52:	d902      	bls.n	8011f5a <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8011f54:	6878      	ldr	r0, [r7, #4]
 8011f56:	f001 ff0f 	bl	8013d78 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8011f5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011f5c:	2b00      	cmp	r3, #0
 8011f5e:	f040 8161 	bne.w	8012224 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8011f62:	687b      	ldr	r3, [r7, #4]
 8011f64:	2200      	movs	r2, #0
 8011f66:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8011f6a:	e15b      	b.n	8012224 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011f6c:	4b36      	ldr	r3, [pc, #216]	; (8012048 <tcp_receive+0x270>)
 8011f6e:	681a      	ldr	r2, [r3, #0]
 8011f70:	687b      	ldr	r3, [r7, #4]
 8011f72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011f74:	1ad3      	subs	r3, r2, r3
 8011f76:	3b01      	subs	r3, #1
 8011f78:	2b00      	cmp	r3, #0
 8011f7a:	f2c0 814e 	blt.w	801221a <tcp_receive+0x442>
 8011f7e:	4b32      	ldr	r3, [pc, #200]	; (8012048 <tcp_receive+0x270>)
 8011f80:	681a      	ldr	r2, [r3, #0]
 8011f82:	687b      	ldr	r3, [r7, #4]
 8011f84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011f86:	1ad3      	subs	r3, r2, r3
 8011f88:	2b00      	cmp	r3, #0
 8011f8a:	f300 8146 	bgt.w	801221a <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8011f8e:	687b      	ldr	r3, [r7, #4]
 8011f90:	8b5b      	ldrh	r3, [r3, #26]
 8011f92:	f003 0304 	and.w	r3, r3, #4
 8011f96:	2b00      	cmp	r3, #0
 8011f98:	d010      	beq.n	8011fbc <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8011f9a:	687b      	ldr	r3, [r7, #4]
 8011f9c:	8b5b      	ldrh	r3, [r3, #26]
 8011f9e:	f023 0304 	bic.w	r3, r3, #4
 8011fa2:	b29a      	uxth	r2, r3
 8011fa4:	687b      	ldr	r3, [r7, #4]
 8011fa6:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8011fa8:	687b      	ldr	r3, [r7, #4]
 8011faa:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8011fae:	687b      	ldr	r3, [r7, #4]
 8011fb0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8011fb4:	687b      	ldr	r3, [r7, #4]
 8011fb6:	2200      	movs	r2, #0
 8011fb8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8011fbc:	687b      	ldr	r3, [r7, #4]
 8011fbe:	2200      	movs	r2, #0
 8011fc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8011fc4:	687b      	ldr	r3, [r7, #4]
 8011fc6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011fca:	10db      	asrs	r3, r3, #3
 8011fcc:	b21b      	sxth	r3, r3
 8011fce:	b29a      	uxth	r2, r3
 8011fd0:	687b      	ldr	r3, [r7, #4]
 8011fd2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011fd6:	b29b      	uxth	r3, r3
 8011fd8:	4413      	add	r3, r2
 8011fda:	b29b      	uxth	r3, r3
 8011fdc:	b21a      	sxth	r2, r3
 8011fde:	687b      	ldr	r3, [r7, #4]
 8011fe0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8011fe4:	4b18      	ldr	r3, [pc, #96]	; (8012048 <tcp_receive+0x270>)
 8011fe6:	681b      	ldr	r3, [r3, #0]
 8011fe8:	b29a      	uxth	r2, r3
 8011fea:	687b      	ldr	r3, [r7, #4]
 8011fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011fee:	b29b      	uxth	r3, r3
 8011ff0:	1ad3      	subs	r3, r2, r3
 8011ff2:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8011ff4:	687b      	ldr	r3, [r7, #4]
 8011ff6:	2200      	movs	r2, #0
 8011ff8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8011ffc:	4b12      	ldr	r3, [pc, #72]	; (8012048 <tcp_receive+0x270>)
 8011ffe:	681a      	ldr	r2, [r3, #0]
 8012000:	687b      	ldr	r3, [r7, #4]
 8012002:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8012004:	687b      	ldr	r3, [r7, #4]
 8012006:	7d1b      	ldrb	r3, [r3, #20]
 8012008:	2b03      	cmp	r3, #3
 801200a:	f240 8097 	bls.w	801213c <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 801200e:	687b      	ldr	r3, [r7, #4]
 8012010:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012014:	687b      	ldr	r3, [r7, #4]
 8012016:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801201a:	429a      	cmp	r2, r3
 801201c:	d245      	bcs.n	80120aa <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801201e:	687b      	ldr	r3, [r7, #4]
 8012020:	8b5b      	ldrh	r3, [r3, #26]
 8012022:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012026:	2b00      	cmp	r3, #0
 8012028:	d014      	beq.n	8012054 <tcp_receive+0x27c>
 801202a:	2301      	movs	r3, #1
 801202c:	e013      	b.n	8012056 <tcp_receive+0x27e>
 801202e:	bf00      	nop
 8012030:	0801ce1c 	.word	0x0801ce1c
 8012034:	0801d14c 	.word	0x0801d14c
 8012038:	0801ce68 	.word	0x0801ce68
 801203c:	0801d168 	.word	0x0801d168
 8012040:	20013b0c 	.word	0x20013b0c
 8012044:	20013b00 	.word	0x20013b00
 8012048:	20013b04 	.word	0x20013b04
 801204c:	20013af0 	.word	0x20013af0
 8012050:	20013b0a 	.word	0x20013b0a
 8012054:	2302      	movs	r3, #2
 8012056:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 801205a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801205e:	b29a      	uxth	r2, r3
 8012060:	687b      	ldr	r3, [r7, #4]
 8012062:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012064:	fb12 f303 	smulbb	r3, r2, r3
 8012068:	b29b      	uxth	r3, r3
 801206a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801206c:	4293      	cmp	r3, r2
 801206e:	bf28      	it	cs
 8012070:	4613      	movcs	r3, r2
 8012072:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8012074:	687b      	ldr	r3, [r7, #4]
 8012076:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801207a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801207c:	4413      	add	r3, r2
 801207e:	b29a      	uxth	r2, r3
 8012080:	687b      	ldr	r3, [r7, #4]
 8012082:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012086:	429a      	cmp	r2, r3
 8012088:	d309      	bcc.n	801209e <tcp_receive+0x2c6>
 801208a:	687b      	ldr	r3, [r7, #4]
 801208c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012090:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8012092:	4413      	add	r3, r2
 8012094:	b29a      	uxth	r2, r3
 8012096:	687b      	ldr	r3, [r7, #4]
 8012098:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801209c:	e04e      	b.n	801213c <tcp_receive+0x364>
 801209e:	687b      	ldr	r3, [r7, #4]
 80120a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80120a4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80120a8:	e048      	b.n	801213c <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 80120aa:	687b      	ldr	r3, [r7, #4]
 80120ac:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80120b0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80120b2:	4413      	add	r3, r2
 80120b4:	b29a      	uxth	r2, r3
 80120b6:	687b      	ldr	r3, [r7, #4]
 80120b8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80120bc:	429a      	cmp	r2, r3
 80120be:	d309      	bcc.n	80120d4 <tcp_receive+0x2fc>
 80120c0:	687b      	ldr	r3, [r7, #4]
 80120c2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80120c6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80120c8:	4413      	add	r3, r2
 80120ca:	b29a      	uxth	r2, r3
 80120cc:	687b      	ldr	r3, [r7, #4]
 80120ce:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80120d2:	e004      	b.n	80120de <tcp_receive+0x306>
 80120d4:	687b      	ldr	r3, [r7, #4]
 80120d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80120da:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 80120de:	687b      	ldr	r3, [r7, #4]
 80120e0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80120e4:	687b      	ldr	r3, [r7, #4]
 80120e6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80120ea:	429a      	cmp	r2, r3
 80120ec:	d326      	bcc.n	801213c <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 80120ee:	687b      	ldr	r3, [r7, #4]
 80120f0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80120f4:	687b      	ldr	r3, [r7, #4]
 80120f6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80120fa:	1ad3      	subs	r3, r2, r3
 80120fc:	b29a      	uxth	r2, r3
 80120fe:	687b      	ldr	r3, [r7, #4]
 8012100:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8012104:	687b      	ldr	r3, [r7, #4]
 8012106:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801210a:	687b      	ldr	r3, [r7, #4]
 801210c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801210e:	4413      	add	r3, r2
 8012110:	b29a      	uxth	r2, r3
 8012112:	687b      	ldr	r3, [r7, #4]
 8012114:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012118:	429a      	cmp	r2, r3
 801211a:	d30a      	bcc.n	8012132 <tcp_receive+0x35a>
 801211c:	687b      	ldr	r3, [r7, #4]
 801211e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012122:	687b      	ldr	r3, [r7, #4]
 8012124:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012126:	4413      	add	r3, r2
 8012128:	b29a      	uxth	r2, r3
 801212a:	687b      	ldr	r3, [r7, #4]
 801212c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8012130:	e004      	b.n	801213c <tcp_receive+0x364>
 8012132:	687b      	ldr	r3, [r7, #4]
 8012134:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012138:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 801213c:	687b      	ldr	r3, [r7, #4]
 801213e:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8012140:	687b      	ldr	r3, [r7, #4]
 8012142:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012144:	4a98      	ldr	r2, [pc, #608]	; (80123a8 <tcp_receive+0x5d0>)
 8012146:	6878      	ldr	r0, [r7, #4]
 8012148:	f7ff fdca 	bl	8011ce0 <tcp_free_acked_segments>
 801214c:	4602      	mov	r2, r0
 801214e:	687b      	ldr	r3, [r7, #4]
 8012150:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8012152:	687b      	ldr	r3, [r7, #4]
 8012154:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8012156:	687b      	ldr	r3, [r7, #4]
 8012158:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801215a:	4a94      	ldr	r2, [pc, #592]	; (80123ac <tcp_receive+0x5d4>)
 801215c:	6878      	ldr	r0, [r7, #4]
 801215e:	f7ff fdbf 	bl	8011ce0 <tcp_free_acked_segments>
 8012162:	4602      	mov	r2, r0
 8012164:	687b      	ldr	r3, [r7, #4]
 8012166:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8012168:	687b      	ldr	r3, [r7, #4]
 801216a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801216c:	2b00      	cmp	r3, #0
 801216e:	d104      	bne.n	801217a <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8012170:	687b      	ldr	r3, [r7, #4]
 8012172:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012176:	861a      	strh	r2, [r3, #48]	; 0x30
 8012178:	e002      	b.n	8012180 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 801217a:	687b      	ldr	r3, [r7, #4]
 801217c:	2200      	movs	r2, #0
 801217e:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8012180:	687b      	ldr	r3, [r7, #4]
 8012182:	2200      	movs	r2, #0
 8012184:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8012186:	687b      	ldr	r3, [r7, #4]
 8012188:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801218a:	2b00      	cmp	r3, #0
 801218c:	d103      	bne.n	8012196 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 801218e:	687b      	ldr	r3, [r7, #4]
 8012190:	2200      	movs	r2, #0
 8012192:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8012196:	687b      	ldr	r3, [r7, #4]
 8012198:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 801219c:	4b84      	ldr	r3, [pc, #528]	; (80123b0 <tcp_receive+0x5d8>)
 801219e:	881b      	ldrh	r3, [r3, #0]
 80121a0:	4413      	add	r3, r2
 80121a2:	b29a      	uxth	r2, r3
 80121a4:	687b      	ldr	r3, [r7, #4]
 80121a6:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 80121aa:	687b      	ldr	r3, [r7, #4]
 80121ac:	8b5b      	ldrh	r3, [r3, #26]
 80121ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80121b2:	2b00      	cmp	r3, #0
 80121b4:	d035      	beq.n	8012222 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 80121b6:	687b      	ldr	r3, [r7, #4]
 80121b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80121ba:	2b00      	cmp	r3, #0
 80121bc:	d118      	bne.n	80121f0 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 80121be:	687b      	ldr	r3, [r7, #4]
 80121c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80121c2:	2b00      	cmp	r3, #0
 80121c4:	d00c      	beq.n	80121e0 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 80121c6:	687b      	ldr	r3, [r7, #4]
 80121c8:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80121ca:	687b      	ldr	r3, [r7, #4]
 80121cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80121ce:	691b      	ldr	r3, [r3, #16]
 80121d0:	685b      	ldr	r3, [r3, #4]
 80121d2:	4618      	mov	r0, r3
 80121d4:	f7fa fe4b 	bl	800ce6e <lwip_htonl>
 80121d8:	4603      	mov	r3, r0
 80121da:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 80121dc:	2b00      	cmp	r3, #0
 80121de:	dc20      	bgt.n	8012222 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 80121e0:	687b      	ldr	r3, [r7, #4]
 80121e2:	8b5b      	ldrh	r3, [r3, #26]
 80121e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80121e8:	b29a      	uxth	r2, r3
 80121ea:	687b      	ldr	r3, [r7, #4]
 80121ec:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80121ee:	e018      	b.n	8012222 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 80121f0:	687b      	ldr	r3, [r7, #4]
 80121f2:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80121f4:	687b      	ldr	r3, [r7, #4]
 80121f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80121f8:	691b      	ldr	r3, [r3, #16]
 80121fa:	685b      	ldr	r3, [r3, #4]
 80121fc:	4618      	mov	r0, r3
 80121fe:	f7fa fe36 	bl	800ce6e <lwip_htonl>
 8012202:	4603      	mov	r3, r0
 8012204:	1ae3      	subs	r3, r4, r3
 8012206:	2b00      	cmp	r3, #0
 8012208:	dc0b      	bgt.n	8012222 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 801220a:	687b      	ldr	r3, [r7, #4]
 801220c:	8b5b      	ldrh	r3, [r3, #26]
 801220e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8012212:	b29a      	uxth	r2, r3
 8012214:	687b      	ldr	r3, [r7, #4]
 8012216:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8012218:	e003      	b.n	8012222 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 801221a:	6878      	ldr	r0, [r7, #4]
 801221c:	f001 ffaa 	bl	8014174 <tcp_send_empty_ack>
 8012220:	e000      	b.n	8012224 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8012222:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8012224:	687b      	ldr	r3, [r7, #4]
 8012226:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012228:	2b00      	cmp	r3, #0
 801222a:	d05b      	beq.n	80122e4 <tcp_receive+0x50c>
 801222c:	687b      	ldr	r3, [r7, #4]
 801222e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012230:	4b60      	ldr	r3, [pc, #384]	; (80123b4 <tcp_receive+0x5dc>)
 8012232:	681b      	ldr	r3, [r3, #0]
 8012234:	1ad3      	subs	r3, r2, r3
 8012236:	2b00      	cmp	r3, #0
 8012238:	da54      	bge.n	80122e4 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 801223a:	4b5f      	ldr	r3, [pc, #380]	; (80123b8 <tcp_receive+0x5e0>)
 801223c:	681b      	ldr	r3, [r3, #0]
 801223e:	b29a      	uxth	r2, r3
 8012240:	687b      	ldr	r3, [r7, #4]
 8012242:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012244:	b29b      	uxth	r3, r3
 8012246:	1ad3      	subs	r3, r2, r3
 8012248:	b29b      	uxth	r3, r3
 801224a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 801224e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8012252:	687b      	ldr	r3, [r7, #4]
 8012254:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8012258:	10db      	asrs	r3, r3, #3
 801225a:	b21b      	sxth	r3, r3
 801225c:	b29b      	uxth	r3, r3
 801225e:	1ad3      	subs	r3, r2, r3
 8012260:	b29b      	uxth	r3, r3
 8012262:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8012266:	687b      	ldr	r3, [r7, #4]
 8012268:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801226c:	b29a      	uxth	r2, r3
 801226e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8012272:	4413      	add	r3, r2
 8012274:	b29b      	uxth	r3, r3
 8012276:	b21a      	sxth	r2, r3
 8012278:	687b      	ldr	r3, [r7, #4]
 801227a:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 801227c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8012280:	2b00      	cmp	r3, #0
 8012282:	da05      	bge.n	8012290 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8012284:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8012288:	425b      	negs	r3, r3
 801228a:	b29b      	uxth	r3, r3
 801228c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8012290:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8012294:	687b      	ldr	r3, [r7, #4]
 8012296:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801229a:	109b      	asrs	r3, r3, #2
 801229c:	b21b      	sxth	r3, r3
 801229e:	b29b      	uxth	r3, r3
 80122a0:	1ad3      	subs	r3, r2, r3
 80122a2:	b29b      	uxth	r3, r3
 80122a4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 80122a8:	687b      	ldr	r3, [r7, #4]
 80122aa:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80122ae:	b29a      	uxth	r2, r3
 80122b0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80122b4:	4413      	add	r3, r2
 80122b6:	b29b      	uxth	r3, r3
 80122b8:	b21a      	sxth	r2, r3
 80122ba:	687b      	ldr	r3, [r7, #4]
 80122bc:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80122be:	687b      	ldr	r3, [r7, #4]
 80122c0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80122c4:	10db      	asrs	r3, r3, #3
 80122c6:	b21b      	sxth	r3, r3
 80122c8:	b29a      	uxth	r2, r3
 80122ca:	687b      	ldr	r3, [r7, #4]
 80122cc:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80122d0:	b29b      	uxth	r3, r3
 80122d2:	4413      	add	r3, r2
 80122d4:	b29b      	uxth	r3, r3
 80122d6:	b21a      	sxth	r2, r3
 80122d8:	687b      	ldr	r3, [r7, #4]
 80122da:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 80122de:	687b      	ldr	r3, [r7, #4]
 80122e0:	2200      	movs	r2, #0
 80122e2:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80122e4:	4b35      	ldr	r3, [pc, #212]	; (80123bc <tcp_receive+0x5e4>)
 80122e6:	881b      	ldrh	r3, [r3, #0]
 80122e8:	2b00      	cmp	r3, #0
 80122ea:	f000 84e2 	beq.w	8012cb2 <tcp_receive+0xeda>
 80122ee:	687b      	ldr	r3, [r7, #4]
 80122f0:	7d1b      	ldrb	r3, [r3, #20]
 80122f2:	2b06      	cmp	r3, #6
 80122f4:	f200 84dd 	bhi.w	8012cb2 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80122f8:	687b      	ldr	r3, [r7, #4]
 80122fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80122fc:	4b30      	ldr	r3, [pc, #192]	; (80123c0 <tcp_receive+0x5e8>)
 80122fe:	681b      	ldr	r3, [r3, #0]
 8012300:	1ad3      	subs	r3, r2, r3
 8012302:	3b01      	subs	r3, #1
 8012304:	2b00      	cmp	r3, #0
 8012306:	f2c0 808f 	blt.w	8012428 <tcp_receive+0x650>
 801230a:	687b      	ldr	r3, [r7, #4]
 801230c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801230e:	4b2b      	ldr	r3, [pc, #172]	; (80123bc <tcp_receive+0x5e4>)
 8012310:	881b      	ldrh	r3, [r3, #0]
 8012312:	4619      	mov	r1, r3
 8012314:	4b2a      	ldr	r3, [pc, #168]	; (80123c0 <tcp_receive+0x5e8>)
 8012316:	681b      	ldr	r3, [r3, #0]
 8012318:	440b      	add	r3, r1
 801231a:	1ad3      	subs	r3, r2, r3
 801231c:	3301      	adds	r3, #1
 801231e:	2b00      	cmp	r3, #0
 8012320:	f300 8082 	bgt.w	8012428 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8012324:	4b27      	ldr	r3, [pc, #156]	; (80123c4 <tcp_receive+0x5ec>)
 8012326:	685b      	ldr	r3, [r3, #4]
 8012328:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 801232a:	687b      	ldr	r3, [r7, #4]
 801232c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801232e:	4b24      	ldr	r3, [pc, #144]	; (80123c0 <tcp_receive+0x5e8>)
 8012330:	681b      	ldr	r3, [r3, #0]
 8012332:	1ad3      	subs	r3, r2, r3
 8012334:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8012336:	4b23      	ldr	r3, [pc, #140]	; (80123c4 <tcp_receive+0x5ec>)
 8012338:	685b      	ldr	r3, [r3, #4]
 801233a:	2b00      	cmp	r3, #0
 801233c:	d106      	bne.n	801234c <tcp_receive+0x574>
 801233e:	4b22      	ldr	r3, [pc, #136]	; (80123c8 <tcp_receive+0x5f0>)
 8012340:	f240 5294 	movw	r2, #1428	; 0x594
 8012344:	4921      	ldr	r1, [pc, #132]	; (80123cc <tcp_receive+0x5f4>)
 8012346:	4822      	ldr	r0, [pc, #136]	; (80123d0 <tcp_receive+0x5f8>)
 8012348:	f007 fdda 	bl	8019f00 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 801234c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801234e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8012352:	4293      	cmp	r3, r2
 8012354:	d906      	bls.n	8012364 <tcp_receive+0x58c>
 8012356:	4b1c      	ldr	r3, [pc, #112]	; (80123c8 <tcp_receive+0x5f0>)
 8012358:	f240 5295 	movw	r2, #1429	; 0x595
 801235c:	491d      	ldr	r1, [pc, #116]	; (80123d4 <tcp_receive+0x5fc>)
 801235e:	481c      	ldr	r0, [pc, #112]	; (80123d0 <tcp_receive+0x5f8>)
 8012360:	f007 fdce 	bl	8019f00 <iprintf>
      off = (u16_t)off32;
 8012364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012366:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801236a:	4b16      	ldr	r3, [pc, #88]	; (80123c4 <tcp_receive+0x5ec>)
 801236c:	685b      	ldr	r3, [r3, #4]
 801236e:	891b      	ldrh	r3, [r3, #8]
 8012370:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012374:	429a      	cmp	r2, r3
 8012376:	d906      	bls.n	8012386 <tcp_receive+0x5ae>
 8012378:	4b13      	ldr	r3, [pc, #76]	; (80123c8 <tcp_receive+0x5f0>)
 801237a:	f240 5297 	movw	r2, #1431	; 0x597
 801237e:	4916      	ldr	r1, [pc, #88]	; (80123d8 <tcp_receive+0x600>)
 8012380:	4813      	ldr	r0, [pc, #76]	; (80123d0 <tcp_receive+0x5f8>)
 8012382:	f007 fdbd 	bl	8019f00 <iprintf>
      inseg.len -= off;
 8012386:	4b0f      	ldr	r3, [pc, #60]	; (80123c4 <tcp_receive+0x5ec>)
 8012388:	891a      	ldrh	r2, [r3, #8]
 801238a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801238e:	1ad3      	subs	r3, r2, r3
 8012390:	b29a      	uxth	r2, r3
 8012392:	4b0c      	ldr	r3, [pc, #48]	; (80123c4 <tcp_receive+0x5ec>)
 8012394:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8012396:	4b0b      	ldr	r3, [pc, #44]	; (80123c4 <tcp_receive+0x5ec>)
 8012398:	685b      	ldr	r3, [r3, #4]
 801239a:	891a      	ldrh	r2, [r3, #8]
 801239c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80123a0:	1ad3      	subs	r3, r2, r3
 80123a2:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 80123a4:	e02a      	b.n	80123fc <tcp_receive+0x624>
 80123a6:	bf00      	nop
 80123a8:	0801d184 	.word	0x0801d184
 80123ac:	0801d18c 	.word	0x0801d18c
 80123b0:	20013b08 	.word	0x20013b08
 80123b4:	20013b04 	.word	0x20013b04
 80123b8:	20013ac4 	.word	0x20013ac4
 80123bc:	20013b0a 	.word	0x20013b0a
 80123c0:	20013b00 	.word	0x20013b00
 80123c4:	20013adc 	.word	0x20013adc
 80123c8:	0801ce1c 	.word	0x0801ce1c
 80123cc:	0801d194 	.word	0x0801d194
 80123d0:	0801ce68 	.word	0x0801ce68
 80123d4:	0801d1a4 	.word	0x0801d1a4
 80123d8:	0801d1b4 	.word	0x0801d1b4
        off -= p->len;
 80123dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80123de:	895b      	ldrh	r3, [r3, #10]
 80123e0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80123e4:	1ad3      	subs	r3, r2, r3
 80123e6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 80123ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80123ec:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80123ee:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 80123f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80123f2:	2200      	movs	r2, #0
 80123f4:	815a      	strh	r2, [r3, #10]
        p = p->next;
 80123f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80123f8:	681b      	ldr	r3, [r3, #0]
 80123fa:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 80123fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80123fe:	895b      	ldrh	r3, [r3, #10]
 8012400:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012404:	429a      	cmp	r2, r3
 8012406:	d8e9      	bhi.n	80123dc <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8012408:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801240c:	4619      	mov	r1, r3
 801240e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8012410:	f7fc f9b4 	bl	800e77c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8012414:	687b      	ldr	r3, [r7, #4]
 8012416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012418:	4a91      	ldr	r2, [pc, #580]	; (8012660 <tcp_receive+0x888>)
 801241a:	6013      	str	r3, [r2, #0]
 801241c:	4b91      	ldr	r3, [pc, #580]	; (8012664 <tcp_receive+0x88c>)
 801241e:	691b      	ldr	r3, [r3, #16]
 8012420:	4a8f      	ldr	r2, [pc, #572]	; (8012660 <tcp_receive+0x888>)
 8012422:	6812      	ldr	r2, [r2, #0]
 8012424:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8012426:	e00d      	b.n	8012444 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8012428:	4b8d      	ldr	r3, [pc, #564]	; (8012660 <tcp_receive+0x888>)
 801242a:	681a      	ldr	r2, [r3, #0]
 801242c:	687b      	ldr	r3, [r7, #4]
 801242e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012430:	1ad3      	subs	r3, r2, r3
 8012432:	2b00      	cmp	r3, #0
 8012434:	da06      	bge.n	8012444 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8012436:	687b      	ldr	r3, [r7, #4]
 8012438:	8b5b      	ldrh	r3, [r3, #26]
 801243a:	f043 0302 	orr.w	r3, r3, #2
 801243e:	b29a      	uxth	r2, r3
 8012440:	687b      	ldr	r3, [r7, #4]
 8012442:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8012444:	4b86      	ldr	r3, [pc, #536]	; (8012660 <tcp_receive+0x888>)
 8012446:	681a      	ldr	r2, [r3, #0]
 8012448:	687b      	ldr	r3, [r7, #4]
 801244a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801244c:	1ad3      	subs	r3, r2, r3
 801244e:	2b00      	cmp	r3, #0
 8012450:	f2c0 842a 	blt.w	8012ca8 <tcp_receive+0xed0>
 8012454:	4b82      	ldr	r3, [pc, #520]	; (8012660 <tcp_receive+0x888>)
 8012456:	681a      	ldr	r2, [r3, #0]
 8012458:	687b      	ldr	r3, [r7, #4]
 801245a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801245c:	6879      	ldr	r1, [r7, #4]
 801245e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012460:	440b      	add	r3, r1
 8012462:	1ad3      	subs	r3, r2, r3
 8012464:	3301      	adds	r3, #1
 8012466:	2b00      	cmp	r3, #0
 8012468:	f300 841e 	bgt.w	8012ca8 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 801246c:	687b      	ldr	r3, [r7, #4]
 801246e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012470:	4b7b      	ldr	r3, [pc, #492]	; (8012660 <tcp_receive+0x888>)
 8012472:	681b      	ldr	r3, [r3, #0]
 8012474:	429a      	cmp	r2, r3
 8012476:	f040 829a 	bne.w	80129ae <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 801247a:	4b7a      	ldr	r3, [pc, #488]	; (8012664 <tcp_receive+0x88c>)
 801247c:	891c      	ldrh	r4, [r3, #8]
 801247e:	4b79      	ldr	r3, [pc, #484]	; (8012664 <tcp_receive+0x88c>)
 8012480:	691b      	ldr	r3, [r3, #16]
 8012482:	899b      	ldrh	r3, [r3, #12]
 8012484:	b29b      	uxth	r3, r3
 8012486:	4618      	mov	r0, r3
 8012488:	f7fa fcdc 	bl	800ce44 <lwip_htons>
 801248c:	4603      	mov	r3, r0
 801248e:	b2db      	uxtb	r3, r3
 8012490:	f003 0303 	and.w	r3, r3, #3
 8012494:	2b00      	cmp	r3, #0
 8012496:	d001      	beq.n	801249c <tcp_receive+0x6c4>
 8012498:	2301      	movs	r3, #1
 801249a:	e000      	b.n	801249e <tcp_receive+0x6c6>
 801249c:	2300      	movs	r3, #0
 801249e:	4423      	add	r3, r4
 80124a0:	b29a      	uxth	r2, r3
 80124a2:	4b71      	ldr	r3, [pc, #452]	; (8012668 <tcp_receive+0x890>)
 80124a4:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 80124a6:	687b      	ldr	r3, [r7, #4]
 80124a8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80124aa:	4b6f      	ldr	r3, [pc, #444]	; (8012668 <tcp_receive+0x890>)
 80124ac:	881b      	ldrh	r3, [r3, #0]
 80124ae:	429a      	cmp	r2, r3
 80124b0:	d275      	bcs.n	801259e <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80124b2:	4b6c      	ldr	r3, [pc, #432]	; (8012664 <tcp_receive+0x88c>)
 80124b4:	691b      	ldr	r3, [r3, #16]
 80124b6:	899b      	ldrh	r3, [r3, #12]
 80124b8:	b29b      	uxth	r3, r3
 80124ba:	4618      	mov	r0, r3
 80124bc:	f7fa fcc2 	bl	800ce44 <lwip_htons>
 80124c0:	4603      	mov	r3, r0
 80124c2:	b2db      	uxtb	r3, r3
 80124c4:	f003 0301 	and.w	r3, r3, #1
 80124c8:	2b00      	cmp	r3, #0
 80124ca:	d01f      	beq.n	801250c <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80124cc:	4b65      	ldr	r3, [pc, #404]	; (8012664 <tcp_receive+0x88c>)
 80124ce:	691b      	ldr	r3, [r3, #16]
 80124d0:	899b      	ldrh	r3, [r3, #12]
 80124d2:	b29b      	uxth	r3, r3
 80124d4:	b21b      	sxth	r3, r3
 80124d6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80124da:	b21c      	sxth	r4, r3
 80124dc:	4b61      	ldr	r3, [pc, #388]	; (8012664 <tcp_receive+0x88c>)
 80124de:	691b      	ldr	r3, [r3, #16]
 80124e0:	899b      	ldrh	r3, [r3, #12]
 80124e2:	b29b      	uxth	r3, r3
 80124e4:	4618      	mov	r0, r3
 80124e6:	f7fa fcad 	bl	800ce44 <lwip_htons>
 80124ea:	4603      	mov	r3, r0
 80124ec:	b2db      	uxtb	r3, r3
 80124ee:	b29b      	uxth	r3, r3
 80124f0:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80124f4:	b29b      	uxth	r3, r3
 80124f6:	4618      	mov	r0, r3
 80124f8:	f7fa fca4 	bl	800ce44 <lwip_htons>
 80124fc:	4603      	mov	r3, r0
 80124fe:	b21b      	sxth	r3, r3
 8012500:	4323      	orrs	r3, r4
 8012502:	b21a      	sxth	r2, r3
 8012504:	4b57      	ldr	r3, [pc, #348]	; (8012664 <tcp_receive+0x88c>)
 8012506:	691b      	ldr	r3, [r3, #16]
 8012508:	b292      	uxth	r2, r2
 801250a:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 801250c:	687b      	ldr	r3, [r7, #4]
 801250e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012510:	4b54      	ldr	r3, [pc, #336]	; (8012664 <tcp_receive+0x88c>)
 8012512:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8012514:	4b53      	ldr	r3, [pc, #332]	; (8012664 <tcp_receive+0x88c>)
 8012516:	691b      	ldr	r3, [r3, #16]
 8012518:	899b      	ldrh	r3, [r3, #12]
 801251a:	b29b      	uxth	r3, r3
 801251c:	4618      	mov	r0, r3
 801251e:	f7fa fc91 	bl	800ce44 <lwip_htons>
 8012522:	4603      	mov	r3, r0
 8012524:	b2db      	uxtb	r3, r3
 8012526:	f003 0302 	and.w	r3, r3, #2
 801252a:	2b00      	cmp	r3, #0
 801252c:	d005      	beq.n	801253a <tcp_receive+0x762>
            inseg.len -= 1;
 801252e:	4b4d      	ldr	r3, [pc, #308]	; (8012664 <tcp_receive+0x88c>)
 8012530:	891b      	ldrh	r3, [r3, #8]
 8012532:	3b01      	subs	r3, #1
 8012534:	b29a      	uxth	r2, r3
 8012536:	4b4b      	ldr	r3, [pc, #300]	; (8012664 <tcp_receive+0x88c>)
 8012538:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 801253a:	4b4a      	ldr	r3, [pc, #296]	; (8012664 <tcp_receive+0x88c>)
 801253c:	685b      	ldr	r3, [r3, #4]
 801253e:	4a49      	ldr	r2, [pc, #292]	; (8012664 <tcp_receive+0x88c>)
 8012540:	8912      	ldrh	r2, [r2, #8]
 8012542:	4611      	mov	r1, r2
 8012544:	4618      	mov	r0, r3
 8012546:	f7fc f819 	bl	800e57c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 801254a:	4b46      	ldr	r3, [pc, #280]	; (8012664 <tcp_receive+0x88c>)
 801254c:	891c      	ldrh	r4, [r3, #8]
 801254e:	4b45      	ldr	r3, [pc, #276]	; (8012664 <tcp_receive+0x88c>)
 8012550:	691b      	ldr	r3, [r3, #16]
 8012552:	899b      	ldrh	r3, [r3, #12]
 8012554:	b29b      	uxth	r3, r3
 8012556:	4618      	mov	r0, r3
 8012558:	f7fa fc74 	bl	800ce44 <lwip_htons>
 801255c:	4603      	mov	r3, r0
 801255e:	b2db      	uxtb	r3, r3
 8012560:	f003 0303 	and.w	r3, r3, #3
 8012564:	2b00      	cmp	r3, #0
 8012566:	d001      	beq.n	801256c <tcp_receive+0x794>
 8012568:	2301      	movs	r3, #1
 801256a:	e000      	b.n	801256e <tcp_receive+0x796>
 801256c:	2300      	movs	r3, #0
 801256e:	4423      	add	r3, r4
 8012570:	b29a      	uxth	r2, r3
 8012572:	4b3d      	ldr	r3, [pc, #244]	; (8012668 <tcp_receive+0x890>)
 8012574:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8012576:	4b3c      	ldr	r3, [pc, #240]	; (8012668 <tcp_receive+0x890>)
 8012578:	881b      	ldrh	r3, [r3, #0]
 801257a:	461a      	mov	r2, r3
 801257c:	4b38      	ldr	r3, [pc, #224]	; (8012660 <tcp_receive+0x888>)
 801257e:	681b      	ldr	r3, [r3, #0]
 8012580:	441a      	add	r2, r3
 8012582:	687b      	ldr	r3, [r7, #4]
 8012584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012586:	6879      	ldr	r1, [r7, #4]
 8012588:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801258a:	440b      	add	r3, r1
 801258c:	429a      	cmp	r2, r3
 801258e:	d006      	beq.n	801259e <tcp_receive+0x7c6>
 8012590:	4b36      	ldr	r3, [pc, #216]	; (801266c <tcp_receive+0x894>)
 8012592:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8012596:	4936      	ldr	r1, [pc, #216]	; (8012670 <tcp_receive+0x898>)
 8012598:	4836      	ldr	r0, [pc, #216]	; (8012674 <tcp_receive+0x89c>)
 801259a:	f007 fcb1 	bl	8019f00 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 801259e:	687b      	ldr	r3, [r7, #4]
 80125a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80125a2:	2b00      	cmp	r3, #0
 80125a4:	f000 80e7 	beq.w	8012776 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80125a8:	4b2e      	ldr	r3, [pc, #184]	; (8012664 <tcp_receive+0x88c>)
 80125aa:	691b      	ldr	r3, [r3, #16]
 80125ac:	899b      	ldrh	r3, [r3, #12]
 80125ae:	b29b      	uxth	r3, r3
 80125b0:	4618      	mov	r0, r3
 80125b2:	f7fa fc47 	bl	800ce44 <lwip_htons>
 80125b6:	4603      	mov	r3, r0
 80125b8:	b2db      	uxtb	r3, r3
 80125ba:	f003 0301 	and.w	r3, r3, #1
 80125be:	2b00      	cmp	r3, #0
 80125c0:	d010      	beq.n	80125e4 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 80125c2:	e00a      	b.n	80125da <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 80125c4:	687b      	ldr	r3, [r7, #4]
 80125c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80125c8:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 80125ca:	687b      	ldr	r3, [r7, #4]
 80125cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80125ce:	681a      	ldr	r2, [r3, #0]
 80125d0:	687b      	ldr	r3, [r7, #4]
 80125d2:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 80125d4:	68f8      	ldr	r0, [r7, #12]
 80125d6:	f7fd fd7e 	bl	80100d6 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80125de:	2b00      	cmp	r3, #0
 80125e0:	d1f0      	bne.n	80125c4 <tcp_receive+0x7ec>
 80125e2:	e0c8      	b.n	8012776 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 80125e4:	687b      	ldr	r3, [r7, #4]
 80125e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80125e8:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 80125ea:	e052      	b.n	8012692 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80125ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80125ee:	691b      	ldr	r3, [r3, #16]
 80125f0:	899b      	ldrh	r3, [r3, #12]
 80125f2:	b29b      	uxth	r3, r3
 80125f4:	4618      	mov	r0, r3
 80125f6:	f7fa fc25 	bl	800ce44 <lwip_htons>
 80125fa:	4603      	mov	r3, r0
 80125fc:	b2db      	uxtb	r3, r3
 80125fe:	f003 0301 	and.w	r3, r3, #1
 8012602:	2b00      	cmp	r3, #0
 8012604:	d03d      	beq.n	8012682 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8012606:	4b17      	ldr	r3, [pc, #92]	; (8012664 <tcp_receive+0x88c>)
 8012608:	691b      	ldr	r3, [r3, #16]
 801260a:	899b      	ldrh	r3, [r3, #12]
 801260c:	b29b      	uxth	r3, r3
 801260e:	4618      	mov	r0, r3
 8012610:	f7fa fc18 	bl	800ce44 <lwip_htons>
 8012614:	4603      	mov	r3, r0
 8012616:	b2db      	uxtb	r3, r3
 8012618:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801261c:	2b00      	cmp	r3, #0
 801261e:	d130      	bne.n	8012682 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8012620:	4b10      	ldr	r3, [pc, #64]	; (8012664 <tcp_receive+0x88c>)
 8012622:	691b      	ldr	r3, [r3, #16]
 8012624:	899b      	ldrh	r3, [r3, #12]
 8012626:	b29c      	uxth	r4, r3
 8012628:	2001      	movs	r0, #1
 801262a:	f7fa fc0b 	bl	800ce44 <lwip_htons>
 801262e:	4603      	mov	r3, r0
 8012630:	461a      	mov	r2, r3
 8012632:	4b0c      	ldr	r3, [pc, #48]	; (8012664 <tcp_receive+0x88c>)
 8012634:	691b      	ldr	r3, [r3, #16]
 8012636:	4322      	orrs	r2, r4
 8012638:	b292      	uxth	r2, r2
 801263a:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 801263c:	4b09      	ldr	r3, [pc, #36]	; (8012664 <tcp_receive+0x88c>)
 801263e:	891c      	ldrh	r4, [r3, #8]
 8012640:	4b08      	ldr	r3, [pc, #32]	; (8012664 <tcp_receive+0x88c>)
 8012642:	691b      	ldr	r3, [r3, #16]
 8012644:	899b      	ldrh	r3, [r3, #12]
 8012646:	b29b      	uxth	r3, r3
 8012648:	4618      	mov	r0, r3
 801264a:	f7fa fbfb 	bl	800ce44 <lwip_htons>
 801264e:	4603      	mov	r3, r0
 8012650:	b2db      	uxtb	r3, r3
 8012652:	f003 0303 	and.w	r3, r3, #3
 8012656:	2b00      	cmp	r3, #0
 8012658:	d00e      	beq.n	8012678 <tcp_receive+0x8a0>
 801265a:	2301      	movs	r3, #1
 801265c:	e00d      	b.n	801267a <tcp_receive+0x8a2>
 801265e:	bf00      	nop
 8012660:	20013b00 	.word	0x20013b00
 8012664:	20013adc 	.word	0x20013adc
 8012668:	20013b0a 	.word	0x20013b0a
 801266c:	0801ce1c 	.word	0x0801ce1c
 8012670:	0801d1c4 	.word	0x0801d1c4
 8012674:	0801ce68 	.word	0x0801ce68
 8012678:	2300      	movs	r3, #0
 801267a:	4423      	add	r3, r4
 801267c:	b29a      	uxth	r2, r3
 801267e:	4b98      	ldr	r3, [pc, #608]	; (80128e0 <tcp_receive+0xb08>)
 8012680:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8012682:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012684:	613b      	str	r3, [r7, #16]
              next = next->next;
 8012686:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012688:	681b      	ldr	r3, [r3, #0]
 801268a:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 801268c:	6938      	ldr	r0, [r7, #16]
 801268e:	f7fd fd22 	bl	80100d6 <tcp_seg_free>
            while (next &&
 8012692:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012694:	2b00      	cmp	r3, #0
 8012696:	d00e      	beq.n	80126b6 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8012698:	4b91      	ldr	r3, [pc, #580]	; (80128e0 <tcp_receive+0xb08>)
 801269a:	881b      	ldrh	r3, [r3, #0]
 801269c:	461a      	mov	r2, r3
 801269e:	4b91      	ldr	r3, [pc, #580]	; (80128e4 <tcp_receive+0xb0c>)
 80126a0:	681b      	ldr	r3, [r3, #0]
 80126a2:	441a      	add	r2, r3
 80126a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80126a6:	691b      	ldr	r3, [r3, #16]
 80126a8:	685b      	ldr	r3, [r3, #4]
 80126aa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80126ac:	8909      	ldrh	r1, [r1, #8]
 80126ae:	440b      	add	r3, r1
 80126b0:	1ad3      	subs	r3, r2, r3
            while (next &&
 80126b2:	2b00      	cmp	r3, #0
 80126b4:	da9a      	bge.n	80125ec <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 80126b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80126b8:	2b00      	cmp	r3, #0
 80126ba:	d059      	beq.n	8012770 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 80126bc:	4b88      	ldr	r3, [pc, #544]	; (80128e0 <tcp_receive+0xb08>)
 80126be:	881b      	ldrh	r3, [r3, #0]
 80126c0:	461a      	mov	r2, r3
 80126c2:	4b88      	ldr	r3, [pc, #544]	; (80128e4 <tcp_receive+0xb0c>)
 80126c4:	681b      	ldr	r3, [r3, #0]
 80126c6:	441a      	add	r2, r3
 80126c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80126ca:	691b      	ldr	r3, [r3, #16]
 80126cc:	685b      	ldr	r3, [r3, #4]
 80126ce:	1ad3      	subs	r3, r2, r3
            if (next &&
 80126d0:	2b00      	cmp	r3, #0
 80126d2:	dd4d      	ble.n	8012770 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 80126d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80126d6:	691b      	ldr	r3, [r3, #16]
 80126d8:	685b      	ldr	r3, [r3, #4]
 80126da:	b29a      	uxth	r2, r3
 80126dc:	4b81      	ldr	r3, [pc, #516]	; (80128e4 <tcp_receive+0xb0c>)
 80126de:	681b      	ldr	r3, [r3, #0]
 80126e0:	b29b      	uxth	r3, r3
 80126e2:	1ad3      	subs	r3, r2, r3
 80126e4:	b29a      	uxth	r2, r3
 80126e6:	4b80      	ldr	r3, [pc, #512]	; (80128e8 <tcp_receive+0xb10>)
 80126e8:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80126ea:	4b7f      	ldr	r3, [pc, #508]	; (80128e8 <tcp_receive+0xb10>)
 80126ec:	691b      	ldr	r3, [r3, #16]
 80126ee:	899b      	ldrh	r3, [r3, #12]
 80126f0:	b29b      	uxth	r3, r3
 80126f2:	4618      	mov	r0, r3
 80126f4:	f7fa fba6 	bl	800ce44 <lwip_htons>
 80126f8:	4603      	mov	r3, r0
 80126fa:	b2db      	uxtb	r3, r3
 80126fc:	f003 0302 	and.w	r3, r3, #2
 8012700:	2b00      	cmp	r3, #0
 8012702:	d005      	beq.n	8012710 <tcp_receive+0x938>
                inseg.len -= 1;
 8012704:	4b78      	ldr	r3, [pc, #480]	; (80128e8 <tcp_receive+0xb10>)
 8012706:	891b      	ldrh	r3, [r3, #8]
 8012708:	3b01      	subs	r3, #1
 801270a:	b29a      	uxth	r2, r3
 801270c:	4b76      	ldr	r3, [pc, #472]	; (80128e8 <tcp_receive+0xb10>)
 801270e:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8012710:	4b75      	ldr	r3, [pc, #468]	; (80128e8 <tcp_receive+0xb10>)
 8012712:	685b      	ldr	r3, [r3, #4]
 8012714:	4a74      	ldr	r2, [pc, #464]	; (80128e8 <tcp_receive+0xb10>)
 8012716:	8912      	ldrh	r2, [r2, #8]
 8012718:	4611      	mov	r1, r2
 801271a:	4618      	mov	r0, r3
 801271c:	f7fb ff2e 	bl	800e57c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8012720:	4b71      	ldr	r3, [pc, #452]	; (80128e8 <tcp_receive+0xb10>)
 8012722:	891c      	ldrh	r4, [r3, #8]
 8012724:	4b70      	ldr	r3, [pc, #448]	; (80128e8 <tcp_receive+0xb10>)
 8012726:	691b      	ldr	r3, [r3, #16]
 8012728:	899b      	ldrh	r3, [r3, #12]
 801272a:	b29b      	uxth	r3, r3
 801272c:	4618      	mov	r0, r3
 801272e:	f7fa fb89 	bl	800ce44 <lwip_htons>
 8012732:	4603      	mov	r3, r0
 8012734:	b2db      	uxtb	r3, r3
 8012736:	f003 0303 	and.w	r3, r3, #3
 801273a:	2b00      	cmp	r3, #0
 801273c:	d001      	beq.n	8012742 <tcp_receive+0x96a>
 801273e:	2301      	movs	r3, #1
 8012740:	e000      	b.n	8012744 <tcp_receive+0x96c>
 8012742:	2300      	movs	r3, #0
 8012744:	4423      	add	r3, r4
 8012746:	b29a      	uxth	r2, r3
 8012748:	4b65      	ldr	r3, [pc, #404]	; (80128e0 <tcp_receive+0xb08>)
 801274a:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 801274c:	4b64      	ldr	r3, [pc, #400]	; (80128e0 <tcp_receive+0xb08>)
 801274e:	881b      	ldrh	r3, [r3, #0]
 8012750:	461a      	mov	r2, r3
 8012752:	4b64      	ldr	r3, [pc, #400]	; (80128e4 <tcp_receive+0xb0c>)
 8012754:	681b      	ldr	r3, [r3, #0]
 8012756:	441a      	add	r2, r3
 8012758:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801275a:	691b      	ldr	r3, [r3, #16]
 801275c:	685b      	ldr	r3, [r3, #4]
 801275e:	429a      	cmp	r2, r3
 8012760:	d006      	beq.n	8012770 <tcp_receive+0x998>
 8012762:	4b62      	ldr	r3, [pc, #392]	; (80128ec <tcp_receive+0xb14>)
 8012764:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8012768:	4961      	ldr	r1, [pc, #388]	; (80128f0 <tcp_receive+0xb18>)
 801276a:	4862      	ldr	r0, [pc, #392]	; (80128f4 <tcp_receive+0xb1c>)
 801276c:	f007 fbc8 	bl	8019f00 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8012770:	687b      	ldr	r3, [r7, #4]
 8012772:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012774:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8012776:	4b5a      	ldr	r3, [pc, #360]	; (80128e0 <tcp_receive+0xb08>)
 8012778:	881b      	ldrh	r3, [r3, #0]
 801277a:	461a      	mov	r2, r3
 801277c:	4b59      	ldr	r3, [pc, #356]	; (80128e4 <tcp_receive+0xb0c>)
 801277e:	681b      	ldr	r3, [r3, #0]
 8012780:	441a      	add	r2, r3
 8012782:	687b      	ldr	r3, [r7, #4]
 8012784:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8012786:	687b      	ldr	r3, [r7, #4]
 8012788:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801278a:	4b55      	ldr	r3, [pc, #340]	; (80128e0 <tcp_receive+0xb08>)
 801278c:	881b      	ldrh	r3, [r3, #0]
 801278e:	429a      	cmp	r2, r3
 8012790:	d206      	bcs.n	80127a0 <tcp_receive+0x9c8>
 8012792:	4b56      	ldr	r3, [pc, #344]	; (80128ec <tcp_receive+0xb14>)
 8012794:	f240 6207 	movw	r2, #1543	; 0x607
 8012798:	4957      	ldr	r1, [pc, #348]	; (80128f8 <tcp_receive+0xb20>)
 801279a:	4856      	ldr	r0, [pc, #344]	; (80128f4 <tcp_receive+0xb1c>)
 801279c:	f007 fbb0 	bl	8019f00 <iprintf>
        pcb->rcv_wnd -= tcplen;
 80127a0:	687b      	ldr	r3, [r7, #4]
 80127a2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80127a4:	4b4e      	ldr	r3, [pc, #312]	; (80128e0 <tcp_receive+0xb08>)
 80127a6:	881b      	ldrh	r3, [r3, #0]
 80127a8:	1ad3      	subs	r3, r2, r3
 80127aa:	b29a      	uxth	r2, r3
 80127ac:	687b      	ldr	r3, [r7, #4]
 80127ae:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80127b0:	6878      	ldr	r0, [r7, #4]
 80127b2:	f7fc ffad 	bl	800f710 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 80127b6:	4b4c      	ldr	r3, [pc, #304]	; (80128e8 <tcp_receive+0xb10>)
 80127b8:	685b      	ldr	r3, [r3, #4]
 80127ba:	891b      	ldrh	r3, [r3, #8]
 80127bc:	2b00      	cmp	r3, #0
 80127be:	d006      	beq.n	80127ce <tcp_receive+0x9f6>
          recv_data = inseg.p;
 80127c0:	4b49      	ldr	r3, [pc, #292]	; (80128e8 <tcp_receive+0xb10>)
 80127c2:	685b      	ldr	r3, [r3, #4]
 80127c4:	4a4d      	ldr	r2, [pc, #308]	; (80128fc <tcp_receive+0xb24>)
 80127c6:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 80127c8:	4b47      	ldr	r3, [pc, #284]	; (80128e8 <tcp_receive+0xb10>)
 80127ca:	2200      	movs	r2, #0
 80127cc:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80127ce:	4b46      	ldr	r3, [pc, #280]	; (80128e8 <tcp_receive+0xb10>)
 80127d0:	691b      	ldr	r3, [r3, #16]
 80127d2:	899b      	ldrh	r3, [r3, #12]
 80127d4:	b29b      	uxth	r3, r3
 80127d6:	4618      	mov	r0, r3
 80127d8:	f7fa fb34 	bl	800ce44 <lwip_htons>
 80127dc:	4603      	mov	r3, r0
 80127de:	b2db      	uxtb	r3, r3
 80127e0:	f003 0301 	and.w	r3, r3, #1
 80127e4:	2b00      	cmp	r3, #0
 80127e6:	f000 80b8 	beq.w	801295a <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 80127ea:	4b45      	ldr	r3, [pc, #276]	; (8012900 <tcp_receive+0xb28>)
 80127ec:	781b      	ldrb	r3, [r3, #0]
 80127ee:	f043 0320 	orr.w	r3, r3, #32
 80127f2:	b2da      	uxtb	r2, r3
 80127f4:	4b42      	ldr	r3, [pc, #264]	; (8012900 <tcp_receive+0xb28>)
 80127f6:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 80127f8:	e0af      	b.n	801295a <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 80127fa:	687b      	ldr	r3, [r7, #4]
 80127fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80127fe:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8012800:	687b      	ldr	r3, [r7, #4]
 8012802:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012804:	691b      	ldr	r3, [r3, #16]
 8012806:	685b      	ldr	r3, [r3, #4]
 8012808:	4a36      	ldr	r2, [pc, #216]	; (80128e4 <tcp_receive+0xb0c>)
 801280a:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801280c:	68bb      	ldr	r3, [r7, #8]
 801280e:	891b      	ldrh	r3, [r3, #8]
 8012810:	461c      	mov	r4, r3
 8012812:	68bb      	ldr	r3, [r7, #8]
 8012814:	691b      	ldr	r3, [r3, #16]
 8012816:	899b      	ldrh	r3, [r3, #12]
 8012818:	b29b      	uxth	r3, r3
 801281a:	4618      	mov	r0, r3
 801281c:	f7fa fb12 	bl	800ce44 <lwip_htons>
 8012820:	4603      	mov	r3, r0
 8012822:	b2db      	uxtb	r3, r3
 8012824:	f003 0303 	and.w	r3, r3, #3
 8012828:	2b00      	cmp	r3, #0
 801282a:	d001      	beq.n	8012830 <tcp_receive+0xa58>
 801282c:	2301      	movs	r3, #1
 801282e:	e000      	b.n	8012832 <tcp_receive+0xa5a>
 8012830:	2300      	movs	r3, #0
 8012832:	191a      	adds	r2, r3, r4
 8012834:	687b      	ldr	r3, [r7, #4]
 8012836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012838:	441a      	add	r2, r3
 801283a:	687b      	ldr	r3, [r7, #4]
 801283c:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801283e:	687b      	ldr	r3, [r7, #4]
 8012840:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012842:	461c      	mov	r4, r3
 8012844:	68bb      	ldr	r3, [r7, #8]
 8012846:	891b      	ldrh	r3, [r3, #8]
 8012848:	461d      	mov	r5, r3
 801284a:	68bb      	ldr	r3, [r7, #8]
 801284c:	691b      	ldr	r3, [r3, #16]
 801284e:	899b      	ldrh	r3, [r3, #12]
 8012850:	b29b      	uxth	r3, r3
 8012852:	4618      	mov	r0, r3
 8012854:	f7fa faf6 	bl	800ce44 <lwip_htons>
 8012858:	4603      	mov	r3, r0
 801285a:	b2db      	uxtb	r3, r3
 801285c:	f003 0303 	and.w	r3, r3, #3
 8012860:	2b00      	cmp	r3, #0
 8012862:	d001      	beq.n	8012868 <tcp_receive+0xa90>
 8012864:	2301      	movs	r3, #1
 8012866:	e000      	b.n	801286a <tcp_receive+0xa92>
 8012868:	2300      	movs	r3, #0
 801286a:	442b      	add	r3, r5
 801286c:	429c      	cmp	r4, r3
 801286e:	d206      	bcs.n	801287e <tcp_receive+0xaa6>
 8012870:	4b1e      	ldr	r3, [pc, #120]	; (80128ec <tcp_receive+0xb14>)
 8012872:	f240 622b 	movw	r2, #1579	; 0x62b
 8012876:	4923      	ldr	r1, [pc, #140]	; (8012904 <tcp_receive+0xb2c>)
 8012878:	481e      	ldr	r0, [pc, #120]	; (80128f4 <tcp_receive+0xb1c>)
 801287a:	f007 fb41 	bl	8019f00 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801287e:	68bb      	ldr	r3, [r7, #8]
 8012880:	891b      	ldrh	r3, [r3, #8]
 8012882:	461c      	mov	r4, r3
 8012884:	68bb      	ldr	r3, [r7, #8]
 8012886:	691b      	ldr	r3, [r3, #16]
 8012888:	899b      	ldrh	r3, [r3, #12]
 801288a:	b29b      	uxth	r3, r3
 801288c:	4618      	mov	r0, r3
 801288e:	f7fa fad9 	bl	800ce44 <lwip_htons>
 8012892:	4603      	mov	r3, r0
 8012894:	b2db      	uxtb	r3, r3
 8012896:	f003 0303 	and.w	r3, r3, #3
 801289a:	2b00      	cmp	r3, #0
 801289c:	d001      	beq.n	80128a2 <tcp_receive+0xaca>
 801289e:	2301      	movs	r3, #1
 80128a0:	e000      	b.n	80128a4 <tcp_receive+0xacc>
 80128a2:	2300      	movs	r3, #0
 80128a4:	1919      	adds	r1, r3, r4
 80128a6:	687b      	ldr	r3, [r7, #4]
 80128a8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80128aa:	b28b      	uxth	r3, r1
 80128ac:	1ad3      	subs	r3, r2, r3
 80128ae:	b29a      	uxth	r2, r3
 80128b0:	687b      	ldr	r3, [r7, #4]
 80128b2:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 80128b4:	6878      	ldr	r0, [r7, #4]
 80128b6:	f7fc ff2b 	bl	800f710 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 80128ba:	68bb      	ldr	r3, [r7, #8]
 80128bc:	685b      	ldr	r3, [r3, #4]
 80128be:	891b      	ldrh	r3, [r3, #8]
 80128c0:	2b00      	cmp	r3, #0
 80128c2:	d028      	beq.n	8012916 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 80128c4:	4b0d      	ldr	r3, [pc, #52]	; (80128fc <tcp_receive+0xb24>)
 80128c6:	681b      	ldr	r3, [r3, #0]
 80128c8:	2b00      	cmp	r3, #0
 80128ca:	d01d      	beq.n	8012908 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 80128cc:	4b0b      	ldr	r3, [pc, #44]	; (80128fc <tcp_receive+0xb24>)
 80128ce:	681a      	ldr	r2, [r3, #0]
 80128d0:	68bb      	ldr	r3, [r7, #8]
 80128d2:	685b      	ldr	r3, [r3, #4]
 80128d4:	4619      	mov	r1, r3
 80128d6:	4610      	mov	r0, r2
 80128d8:	f7fc f8a4 	bl	800ea24 <pbuf_cat>
 80128dc:	e018      	b.n	8012910 <tcp_receive+0xb38>
 80128de:	bf00      	nop
 80128e0:	20013b0a 	.word	0x20013b0a
 80128e4:	20013b00 	.word	0x20013b00
 80128e8:	20013adc 	.word	0x20013adc
 80128ec:	0801ce1c 	.word	0x0801ce1c
 80128f0:	0801d1fc 	.word	0x0801d1fc
 80128f4:	0801ce68 	.word	0x0801ce68
 80128f8:	0801d238 	.word	0x0801d238
 80128fc:	20013b10 	.word	0x20013b10
 8012900:	20013b0d 	.word	0x20013b0d
 8012904:	0801d258 	.word	0x0801d258
            } else {
              recv_data = cseg->p;
 8012908:	68bb      	ldr	r3, [r7, #8]
 801290a:	685b      	ldr	r3, [r3, #4]
 801290c:	4a70      	ldr	r2, [pc, #448]	; (8012ad0 <tcp_receive+0xcf8>)
 801290e:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8012910:	68bb      	ldr	r3, [r7, #8]
 8012912:	2200      	movs	r2, #0
 8012914:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8012916:	68bb      	ldr	r3, [r7, #8]
 8012918:	691b      	ldr	r3, [r3, #16]
 801291a:	899b      	ldrh	r3, [r3, #12]
 801291c:	b29b      	uxth	r3, r3
 801291e:	4618      	mov	r0, r3
 8012920:	f7fa fa90 	bl	800ce44 <lwip_htons>
 8012924:	4603      	mov	r3, r0
 8012926:	b2db      	uxtb	r3, r3
 8012928:	f003 0301 	and.w	r3, r3, #1
 801292c:	2b00      	cmp	r3, #0
 801292e:	d00d      	beq.n	801294c <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8012930:	4b68      	ldr	r3, [pc, #416]	; (8012ad4 <tcp_receive+0xcfc>)
 8012932:	781b      	ldrb	r3, [r3, #0]
 8012934:	f043 0320 	orr.w	r3, r3, #32
 8012938:	b2da      	uxtb	r2, r3
 801293a:	4b66      	ldr	r3, [pc, #408]	; (8012ad4 <tcp_receive+0xcfc>)
 801293c:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801293e:	687b      	ldr	r3, [r7, #4]
 8012940:	7d1b      	ldrb	r3, [r3, #20]
 8012942:	2b04      	cmp	r3, #4
 8012944:	d102      	bne.n	801294c <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 8012946:	687b      	ldr	r3, [r7, #4]
 8012948:	2207      	movs	r2, #7
 801294a:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 801294c:	68bb      	ldr	r3, [r7, #8]
 801294e:	681a      	ldr	r2, [r3, #0]
 8012950:	687b      	ldr	r3, [r7, #4]
 8012952:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8012954:	68b8      	ldr	r0, [r7, #8]
 8012956:	f7fd fbbe 	bl	80100d6 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801295a:	687b      	ldr	r3, [r7, #4]
 801295c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801295e:	2b00      	cmp	r3, #0
 8012960:	d008      	beq.n	8012974 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8012962:	687b      	ldr	r3, [r7, #4]
 8012964:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012966:	691b      	ldr	r3, [r3, #16]
 8012968:	685a      	ldr	r2, [r3, #4]
 801296a:	687b      	ldr	r3, [r7, #4]
 801296c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 801296e:	429a      	cmp	r2, r3
 8012970:	f43f af43 	beq.w	80127fa <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8012974:	687b      	ldr	r3, [r7, #4]
 8012976:	8b5b      	ldrh	r3, [r3, #26]
 8012978:	f003 0301 	and.w	r3, r3, #1
 801297c:	2b00      	cmp	r3, #0
 801297e:	d00e      	beq.n	801299e <tcp_receive+0xbc6>
 8012980:	687b      	ldr	r3, [r7, #4]
 8012982:	8b5b      	ldrh	r3, [r3, #26]
 8012984:	f023 0301 	bic.w	r3, r3, #1
 8012988:	b29a      	uxth	r2, r3
 801298a:	687b      	ldr	r3, [r7, #4]
 801298c:	835a      	strh	r2, [r3, #26]
 801298e:	687b      	ldr	r3, [r7, #4]
 8012990:	8b5b      	ldrh	r3, [r3, #26]
 8012992:	f043 0302 	orr.w	r3, r3, #2
 8012996:	b29a      	uxth	r2, r3
 8012998:	687b      	ldr	r3, [r7, #4]
 801299a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801299c:	e188      	b.n	8012cb0 <tcp_receive+0xed8>
        tcp_ack(pcb);
 801299e:	687b      	ldr	r3, [r7, #4]
 80129a0:	8b5b      	ldrh	r3, [r3, #26]
 80129a2:	f043 0301 	orr.w	r3, r3, #1
 80129a6:	b29a      	uxth	r2, r3
 80129a8:	687b      	ldr	r3, [r7, #4]
 80129aa:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80129ac:	e180      	b.n	8012cb0 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 80129ae:	687b      	ldr	r3, [r7, #4]
 80129b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80129b2:	2b00      	cmp	r3, #0
 80129b4:	d106      	bne.n	80129c4 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 80129b6:	4848      	ldr	r0, [pc, #288]	; (8012ad8 <tcp_receive+0xd00>)
 80129b8:	f7fd fba6 	bl	8010108 <tcp_seg_copy>
 80129bc:	4602      	mov	r2, r0
 80129be:	687b      	ldr	r3, [r7, #4]
 80129c0:	675a      	str	r2, [r3, #116]	; 0x74
 80129c2:	e16d      	b.n	8012ca0 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 80129c4:	2300      	movs	r3, #0
 80129c6:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80129c8:	687b      	ldr	r3, [r7, #4]
 80129ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80129cc:	63bb      	str	r3, [r7, #56]	; 0x38
 80129ce:	e157      	b.n	8012c80 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 80129d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129d2:	691b      	ldr	r3, [r3, #16]
 80129d4:	685a      	ldr	r2, [r3, #4]
 80129d6:	4b41      	ldr	r3, [pc, #260]	; (8012adc <tcp_receive+0xd04>)
 80129d8:	681b      	ldr	r3, [r3, #0]
 80129da:	429a      	cmp	r2, r3
 80129dc:	d11d      	bne.n	8012a1a <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 80129de:	4b3e      	ldr	r3, [pc, #248]	; (8012ad8 <tcp_receive+0xd00>)
 80129e0:	891a      	ldrh	r2, [r3, #8]
 80129e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129e4:	891b      	ldrh	r3, [r3, #8]
 80129e6:	429a      	cmp	r2, r3
 80129e8:	f240 814f 	bls.w	8012c8a <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80129ec:	483a      	ldr	r0, [pc, #232]	; (8012ad8 <tcp_receive+0xd00>)
 80129ee:	f7fd fb8b 	bl	8010108 <tcp_seg_copy>
 80129f2:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 80129f4:	697b      	ldr	r3, [r7, #20]
 80129f6:	2b00      	cmp	r3, #0
 80129f8:	f000 8149 	beq.w	8012c8e <tcp_receive+0xeb6>
                  if (prev != NULL) {
 80129fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80129fe:	2b00      	cmp	r3, #0
 8012a00:	d003      	beq.n	8012a0a <tcp_receive+0xc32>
                    prev->next = cseg;
 8012a02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012a04:	697a      	ldr	r2, [r7, #20]
 8012a06:	601a      	str	r2, [r3, #0]
 8012a08:	e002      	b.n	8012a10 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 8012a0a:	687b      	ldr	r3, [r7, #4]
 8012a0c:	697a      	ldr	r2, [r7, #20]
 8012a0e:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8012a10:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012a12:	6978      	ldr	r0, [r7, #20]
 8012a14:	f7ff f8dc 	bl	8011bd0 <tcp_oos_insert_segment>
                }
                break;
 8012a18:	e139      	b.n	8012c8e <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8012a1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012a1c:	2b00      	cmp	r3, #0
 8012a1e:	d117      	bne.n	8012a50 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8012a20:	4b2e      	ldr	r3, [pc, #184]	; (8012adc <tcp_receive+0xd04>)
 8012a22:	681a      	ldr	r2, [r3, #0]
 8012a24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a26:	691b      	ldr	r3, [r3, #16]
 8012a28:	685b      	ldr	r3, [r3, #4]
 8012a2a:	1ad3      	subs	r3, r2, r3
 8012a2c:	2b00      	cmp	r3, #0
 8012a2e:	da57      	bge.n	8012ae0 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8012a30:	4829      	ldr	r0, [pc, #164]	; (8012ad8 <tcp_receive+0xd00>)
 8012a32:	f7fd fb69 	bl	8010108 <tcp_seg_copy>
 8012a36:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8012a38:	69bb      	ldr	r3, [r7, #24]
 8012a3a:	2b00      	cmp	r3, #0
 8012a3c:	f000 8129 	beq.w	8012c92 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 8012a40:	687b      	ldr	r3, [r7, #4]
 8012a42:	69ba      	ldr	r2, [r7, #24]
 8012a44:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8012a46:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012a48:	69b8      	ldr	r0, [r7, #24]
 8012a4a:	f7ff f8c1 	bl	8011bd0 <tcp_oos_insert_segment>
                  }
                  break;
 8012a4e:	e120      	b.n	8012c92 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8012a50:	4b22      	ldr	r3, [pc, #136]	; (8012adc <tcp_receive+0xd04>)
 8012a52:	681a      	ldr	r2, [r3, #0]
 8012a54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012a56:	691b      	ldr	r3, [r3, #16]
 8012a58:	685b      	ldr	r3, [r3, #4]
 8012a5a:	1ad3      	subs	r3, r2, r3
 8012a5c:	3b01      	subs	r3, #1
 8012a5e:	2b00      	cmp	r3, #0
 8012a60:	db3e      	blt.n	8012ae0 <tcp_receive+0xd08>
 8012a62:	4b1e      	ldr	r3, [pc, #120]	; (8012adc <tcp_receive+0xd04>)
 8012a64:	681a      	ldr	r2, [r3, #0]
 8012a66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a68:	691b      	ldr	r3, [r3, #16]
 8012a6a:	685b      	ldr	r3, [r3, #4]
 8012a6c:	1ad3      	subs	r3, r2, r3
 8012a6e:	3301      	adds	r3, #1
 8012a70:	2b00      	cmp	r3, #0
 8012a72:	dc35      	bgt.n	8012ae0 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8012a74:	4818      	ldr	r0, [pc, #96]	; (8012ad8 <tcp_receive+0xd00>)
 8012a76:	f7fd fb47 	bl	8010108 <tcp_seg_copy>
 8012a7a:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8012a7c:	69fb      	ldr	r3, [r7, #28]
 8012a7e:	2b00      	cmp	r3, #0
 8012a80:	f000 8109 	beq.w	8012c96 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8012a84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012a86:	691b      	ldr	r3, [r3, #16]
 8012a88:	685b      	ldr	r3, [r3, #4]
 8012a8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012a8c:	8912      	ldrh	r2, [r2, #8]
 8012a8e:	441a      	add	r2, r3
 8012a90:	4b12      	ldr	r3, [pc, #72]	; (8012adc <tcp_receive+0xd04>)
 8012a92:	681b      	ldr	r3, [r3, #0]
 8012a94:	1ad3      	subs	r3, r2, r3
 8012a96:	2b00      	cmp	r3, #0
 8012a98:	dd12      	ble.n	8012ac0 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8012a9a:	4b10      	ldr	r3, [pc, #64]	; (8012adc <tcp_receive+0xd04>)
 8012a9c:	681b      	ldr	r3, [r3, #0]
 8012a9e:	b29a      	uxth	r2, r3
 8012aa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012aa2:	691b      	ldr	r3, [r3, #16]
 8012aa4:	685b      	ldr	r3, [r3, #4]
 8012aa6:	b29b      	uxth	r3, r3
 8012aa8:	1ad3      	subs	r3, r2, r3
 8012aaa:	b29a      	uxth	r2, r3
 8012aac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012aae:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8012ab0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012ab2:	685a      	ldr	r2, [r3, #4]
 8012ab4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012ab6:	891b      	ldrh	r3, [r3, #8]
 8012ab8:	4619      	mov	r1, r3
 8012aba:	4610      	mov	r0, r2
 8012abc:	f7fb fd5e 	bl	800e57c <pbuf_realloc>
                    }
                    prev->next = cseg;
 8012ac0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012ac2:	69fa      	ldr	r2, [r7, #28]
 8012ac4:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8012ac6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012ac8:	69f8      	ldr	r0, [r7, #28]
 8012aca:	f7ff f881 	bl	8011bd0 <tcp_oos_insert_segment>
                  }
                  break;
 8012ace:	e0e2      	b.n	8012c96 <tcp_receive+0xebe>
 8012ad0:	20013b10 	.word	0x20013b10
 8012ad4:	20013b0d 	.word	0x20013b0d
 8012ad8:	20013adc 	.word	0x20013adc
 8012adc:	20013b00 	.word	0x20013b00
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8012ae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ae2:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8012ae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ae6:	681b      	ldr	r3, [r3, #0]
 8012ae8:	2b00      	cmp	r3, #0
 8012aea:	f040 80c6 	bne.w	8012c7a <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8012aee:	4b80      	ldr	r3, [pc, #512]	; (8012cf0 <tcp_receive+0xf18>)
 8012af0:	681a      	ldr	r2, [r3, #0]
 8012af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012af4:	691b      	ldr	r3, [r3, #16]
 8012af6:	685b      	ldr	r3, [r3, #4]
 8012af8:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8012afa:	2b00      	cmp	r3, #0
 8012afc:	f340 80bd 	ble.w	8012c7a <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8012b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b02:	691b      	ldr	r3, [r3, #16]
 8012b04:	899b      	ldrh	r3, [r3, #12]
 8012b06:	b29b      	uxth	r3, r3
 8012b08:	4618      	mov	r0, r3
 8012b0a:	f7fa f99b 	bl	800ce44 <lwip_htons>
 8012b0e:	4603      	mov	r3, r0
 8012b10:	b2db      	uxtb	r3, r3
 8012b12:	f003 0301 	and.w	r3, r3, #1
 8012b16:	2b00      	cmp	r3, #0
 8012b18:	f040 80bf 	bne.w	8012c9a <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8012b1c:	4875      	ldr	r0, [pc, #468]	; (8012cf4 <tcp_receive+0xf1c>)
 8012b1e:	f7fd faf3 	bl	8010108 <tcp_seg_copy>
 8012b22:	4602      	mov	r2, r0
 8012b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b26:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8012b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b2a:	681b      	ldr	r3, [r3, #0]
 8012b2c:	2b00      	cmp	r3, #0
 8012b2e:	f000 80b6 	beq.w	8012c9e <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8012b32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b34:	691b      	ldr	r3, [r3, #16]
 8012b36:	685b      	ldr	r3, [r3, #4]
 8012b38:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012b3a:	8912      	ldrh	r2, [r2, #8]
 8012b3c:	441a      	add	r2, r3
 8012b3e:	4b6c      	ldr	r3, [pc, #432]	; (8012cf0 <tcp_receive+0xf18>)
 8012b40:	681b      	ldr	r3, [r3, #0]
 8012b42:	1ad3      	subs	r3, r2, r3
 8012b44:	2b00      	cmp	r3, #0
 8012b46:	dd12      	ble.n	8012b6e <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8012b48:	4b69      	ldr	r3, [pc, #420]	; (8012cf0 <tcp_receive+0xf18>)
 8012b4a:	681b      	ldr	r3, [r3, #0]
 8012b4c:	b29a      	uxth	r2, r3
 8012b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b50:	691b      	ldr	r3, [r3, #16]
 8012b52:	685b      	ldr	r3, [r3, #4]
 8012b54:	b29b      	uxth	r3, r3
 8012b56:	1ad3      	subs	r3, r2, r3
 8012b58:	b29a      	uxth	r2, r3
 8012b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b5c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8012b5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b60:	685a      	ldr	r2, [r3, #4]
 8012b62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b64:	891b      	ldrh	r3, [r3, #8]
 8012b66:	4619      	mov	r1, r3
 8012b68:	4610      	mov	r0, r2
 8012b6a:	f7fb fd07 	bl	800e57c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8012b6e:	4b62      	ldr	r3, [pc, #392]	; (8012cf8 <tcp_receive+0xf20>)
 8012b70:	881b      	ldrh	r3, [r3, #0]
 8012b72:	461a      	mov	r2, r3
 8012b74:	4b5e      	ldr	r3, [pc, #376]	; (8012cf0 <tcp_receive+0xf18>)
 8012b76:	681b      	ldr	r3, [r3, #0]
 8012b78:	441a      	add	r2, r3
 8012b7a:	687b      	ldr	r3, [r7, #4]
 8012b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012b7e:	6879      	ldr	r1, [r7, #4]
 8012b80:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012b82:	440b      	add	r3, r1
 8012b84:	1ad3      	subs	r3, r2, r3
 8012b86:	2b00      	cmp	r3, #0
 8012b88:	f340 8089 	ble.w	8012c9e <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8012b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b8e:	681b      	ldr	r3, [r3, #0]
 8012b90:	691b      	ldr	r3, [r3, #16]
 8012b92:	899b      	ldrh	r3, [r3, #12]
 8012b94:	b29b      	uxth	r3, r3
 8012b96:	4618      	mov	r0, r3
 8012b98:	f7fa f954 	bl	800ce44 <lwip_htons>
 8012b9c:	4603      	mov	r3, r0
 8012b9e:	b2db      	uxtb	r3, r3
 8012ba0:	f003 0301 	and.w	r3, r3, #1
 8012ba4:	2b00      	cmp	r3, #0
 8012ba6:	d022      	beq.n	8012bee <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8012ba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012baa:	681b      	ldr	r3, [r3, #0]
 8012bac:	691b      	ldr	r3, [r3, #16]
 8012bae:	899b      	ldrh	r3, [r3, #12]
 8012bb0:	b29b      	uxth	r3, r3
 8012bb2:	b21b      	sxth	r3, r3
 8012bb4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8012bb8:	b21c      	sxth	r4, r3
 8012bba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012bbc:	681b      	ldr	r3, [r3, #0]
 8012bbe:	691b      	ldr	r3, [r3, #16]
 8012bc0:	899b      	ldrh	r3, [r3, #12]
 8012bc2:	b29b      	uxth	r3, r3
 8012bc4:	4618      	mov	r0, r3
 8012bc6:	f7fa f93d 	bl	800ce44 <lwip_htons>
 8012bca:	4603      	mov	r3, r0
 8012bcc:	b2db      	uxtb	r3, r3
 8012bce:	b29b      	uxth	r3, r3
 8012bd0:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8012bd4:	b29b      	uxth	r3, r3
 8012bd6:	4618      	mov	r0, r3
 8012bd8:	f7fa f934 	bl	800ce44 <lwip_htons>
 8012bdc:	4603      	mov	r3, r0
 8012bde:	b21b      	sxth	r3, r3
 8012be0:	4323      	orrs	r3, r4
 8012be2:	b21a      	sxth	r2, r3
 8012be4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012be6:	681b      	ldr	r3, [r3, #0]
 8012be8:	691b      	ldr	r3, [r3, #16]
 8012bea:	b292      	uxth	r2, r2
 8012bec:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8012bee:	687b      	ldr	r3, [r7, #4]
 8012bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012bf2:	b29a      	uxth	r2, r3
 8012bf4:	687b      	ldr	r3, [r7, #4]
 8012bf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012bf8:	4413      	add	r3, r2
 8012bfa:	b299      	uxth	r1, r3
 8012bfc:	4b3c      	ldr	r3, [pc, #240]	; (8012cf0 <tcp_receive+0xf18>)
 8012bfe:	681b      	ldr	r3, [r3, #0]
 8012c00:	b29a      	uxth	r2, r3
 8012c02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c04:	681b      	ldr	r3, [r3, #0]
 8012c06:	1a8a      	subs	r2, r1, r2
 8012c08:	b292      	uxth	r2, r2
 8012c0a:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8012c0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c0e:	681b      	ldr	r3, [r3, #0]
 8012c10:	685a      	ldr	r2, [r3, #4]
 8012c12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c14:	681b      	ldr	r3, [r3, #0]
 8012c16:	891b      	ldrh	r3, [r3, #8]
 8012c18:	4619      	mov	r1, r3
 8012c1a:	4610      	mov	r0, r2
 8012c1c:	f7fb fcae 	bl	800e57c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8012c20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c22:	681b      	ldr	r3, [r3, #0]
 8012c24:	891c      	ldrh	r4, [r3, #8]
 8012c26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c28:	681b      	ldr	r3, [r3, #0]
 8012c2a:	691b      	ldr	r3, [r3, #16]
 8012c2c:	899b      	ldrh	r3, [r3, #12]
 8012c2e:	b29b      	uxth	r3, r3
 8012c30:	4618      	mov	r0, r3
 8012c32:	f7fa f907 	bl	800ce44 <lwip_htons>
 8012c36:	4603      	mov	r3, r0
 8012c38:	b2db      	uxtb	r3, r3
 8012c3a:	f003 0303 	and.w	r3, r3, #3
 8012c3e:	2b00      	cmp	r3, #0
 8012c40:	d001      	beq.n	8012c46 <tcp_receive+0xe6e>
 8012c42:	2301      	movs	r3, #1
 8012c44:	e000      	b.n	8012c48 <tcp_receive+0xe70>
 8012c46:	2300      	movs	r3, #0
 8012c48:	4423      	add	r3, r4
 8012c4a:	b29a      	uxth	r2, r3
 8012c4c:	4b2a      	ldr	r3, [pc, #168]	; (8012cf8 <tcp_receive+0xf20>)
 8012c4e:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8012c50:	4b29      	ldr	r3, [pc, #164]	; (8012cf8 <tcp_receive+0xf20>)
 8012c52:	881b      	ldrh	r3, [r3, #0]
 8012c54:	461a      	mov	r2, r3
 8012c56:	4b26      	ldr	r3, [pc, #152]	; (8012cf0 <tcp_receive+0xf18>)
 8012c58:	681b      	ldr	r3, [r3, #0]
 8012c5a:	441a      	add	r2, r3
 8012c5c:	687b      	ldr	r3, [r7, #4]
 8012c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c60:	6879      	ldr	r1, [r7, #4]
 8012c62:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012c64:	440b      	add	r3, r1
 8012c66:	429a      	cmp	r2, r3
 8012c68:	d019      	beq.n	8012c9e <tcp_receive+0xec6>
 8012c6a:	4b24      	ldr	r3, [pc, #144]	; (8012cfc <tcp_receive+0xf24>)
 8012c6c:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8012c70:	4923      	ldr	r1, [pc, #140]	; (8012d00 <tcp_receive+0xf28>)
 8012c72:	4824      	ldr	r0, [pc, #144]	; (8012d04 <tcp_receive+0xf2c>)
 8012c74:	f007 f944 	bl	8019f00 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8012c78:	e011      	b.n	8012c9e <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8012c7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c7c:	681b      	ldr	r3, [r3, #0]
 8012c7e:	63bb      	str	r3, [r7, #56]	; 0x38
 8012c80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c82:	2b00      	cmp	r3, #0
 8012c84:	f47f aea4 	bne.w	80129d0 <tcp_receive+0xbf8>
 8012c88:	e00a      	b.n	8012ca0 <tcp_receive+0xec8>
                break;
 8012c8a:	bf00      	nop
 8012c8c:	e008      	b.n	8012ca0 <tcp_receive+0xec8>
                break;
 8012c8e:	bf00      	nop
 8012c90:	e006      	b.n	8012ca0 <tcp_receive+0xec8>
                  break;
 8012c92:	bf00      	nop
 8012c94:	e004      	b.n	8012ca0 <tcp_receive+0xec8>
                  break;
 8012c96:	bf00      	nop
 8012c98:	e002      	b.n	8012ca0 <tcp_receive+0xec8>
                  break;
 8012c9a:	bf00      	nop
 8012c9c:	e000      	b.n	8012ca0 <tcp_receive+0xec8>
                break;
 8012c9e:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8012ca0:	6878      	ldr	r0, [r7, #4]
 8012ca2:	f001 fa67 	bl	8014174 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8012ca6:	e003      	b.n	8012cb0 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8012ca8:	6878      	ldr	r0, [r7, #4]
 8012caa:	f001 fa63 	bl	8014174 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8012cae:	e01a      	b.n	8012ce6 <tcp_receive+0xf0e>
 8012cb0:	e019      	b.n	8012ce6 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8012cb2:	4b0f      	ldr	r3, [pc, #60]	; (8012cf0 <tcp_receive+0xf18>)
 8012cb4:	681a      	ldr	r2, [r3, #0]
 8012cb6:	687b      	ldr	r3, [r7, #4]
 8012cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012cba:	1ad3      	subs	r3, r2, r3
 8012cbc:	2b00      	cmp	r3, #0
 8012cbe:	db0a      	blt.n	8012cd6 <tcp_receive+0xefe>
 8012cc0:	4b0b      	ldr	r3, [pc, #44]	; (8012cf0 <tcp_receive+0xf18>)
 8012cc2:	681a      	ldr	r2, [r3, #0]
 8012cc4:	687b      	ldr	r3, [r7, #4]
 8012cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012cc8:	6879      	ldr	r1, [r7, #4]
 8012cca:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012ccc:	440b      	add	r3, r1
 8012cce:	1ad3      	subs	r3, r2, r3
 8012cd0:	3301      	adds	r3, #1
 8012cd2:	2b00      	cmp	r3, #0
 8012cd4:	dd07      	ble.n	8012ce6 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 8012cd6:	687b      	ldr	r3, [r7, #4]
 8012cd8:	8b5b      	ldrh	r3, [r3, #26]
 8012cda:	f043 0302 	orr.w	r3, r3, #2
 8012cde:	b29a      	uxth	r2, r3
 8012ce0:	687b      	ldr	r3, [r7, #4]
 8012ce2:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8012ce4:	e7ff      	b.n	8012ce6 <tcp_receive+0xf0e>
 8012ce6:	bf00      	nop
 8012ce8:	3750      	adds	r7, #80	; 0x50
 8012cea:	46bd      	mov	sp, r7
 8012cec:	bdb0      	pop	{r4, r5, r7, pc}
 8012cee:	bf00      	nop
 8012cf0:	20013b00 	.word	0x20013b00
 8012cf4:	20013adc 	.word	0x20013adc
 8012cf8:	20013b0a 	.word	0x20013b0a
 8012cfc:	0801ce1c 	.word	0x0801ce1c
 8012d00:	0801d1c4 	.word	0x0801d1c4
 8012d04:	0801ce68 	.word	0x0801ce68

08012d08 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8012d08:	b480      	push	{r7}
 8012d0a:	b083      	sub	sp, #12
 8012d0c:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8012d0e:	4b15      	ldr	r3, [pc, #84]	; (8012d64 <tcp_get_next_optbyte+0x5c>)
 8012d10:	881b      	ldrh	r3, [r3, #0]
 8012d12:	1c5a      	adds	r2, r3, #1
 8012d14:	b291      	uxth	r1, r2
 8012d16:	4a13      	ldr	r2, [pc, #76]	; (8012d64 <tcp_get_next_optbyte+0x5c>)
 8012d18:	8011      	strh	r1, [r2, #0]
 8012d1a:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8012d1c:	4b12      	ldr	r3, [pc, #72]	; (8012d68 <tcp_get_next_optbyte+0x60>)
 8012d1e:	681b      	ldr	r3, [r3, #0]
 8012d20:	2b00      	cmp	r3, #0
 8012d22:	d004      	beq.n	8012d2e <tcp_get_next_optbyte+0x26>
 8012d24:	4b11      	ldr	r3, [pc, #68]	; (8012d6c <tcp_get_next_optbyte+0x64>)
 8012d26:	881b      	ldrh	r3, [r3, #0]
 8012d28:	88fa      	ldrh	r2, [r7, #6]
 8012d2a:	429a      	cmp	r2, r3
 8012d2c:	d208      	bcs.n	8012d40 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8012d2e:	4b10      	ldr	r3, [pc, #64]	; (8012d70 <tcp_get_next_optbyte+0x68>)
 8012d30:	681b      	ldr	r3, [r3, #0]
 8012d32:	3314      	adds	r3, #20
 8012d34:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8012d36:	88fb      	ldrh	r3, [r7, #6]
 8012d38:	683a      	ldr	r2, [r7, #0]
 8012d3a:	4413      	add	r3, r2
 8012d3c:	781b      	ldrb	r3, [r3, #0]
 8012d3e:	e00b      	b.n	8012d58 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8012d40:	88fb      	ldrh	r3, [r7, #6]
 8012d42:	b2da      	uxtb	r2, r3
 8012d44:	4b09      	ldr	r3, [pc, #36]	; (8012d6c <tcp_get_next_optbyte+0x64>)
 8012d46:	881b      	ldrh	r3, [r3, #0]
 8012d48:	b2db      	uxtb	r3, r3
 8012d4a:	1ad3      	subs	r3, r2, r3
 8012d4c:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8012d4e:	4b06      	ldr	r3, [pc, #24]	; (8012d68 <tcp_get_next_optbyte+0x60>)
 8012d50:	681a      	ldr	r2, [r3, #0]
 8012d52:	797b      	ldrb	r3, [r7, #5]
 8012d54:	4413      	add	r3, r2
 8012d56:	781b      	ldrb	r3, [r3, #0]
  }
}
 8012d58:	4618      	mov	r0, r3
 8012d5a:	370c      	adds	r7, #12
 8012d5c:	46bd      	mov	sp, r7
 8012d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d62:	4770      	bx	lr
 8012d64:	20013afc 	.word	0x20013afc
 8012d68:	20013af8 	.word	0x20013af8
 8012d6c:	20013af6 	.word	0x20013af6
 8012d70:	20013af0 	.word	0x20013af0

08012d74 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8012d74:	b580      	push	{r7, lr}
 8012d76:	b084      	sub	sp, #16
 8012d78:	af00      	add	r7, sp, #0
 8012d7a:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8012d7c:	687b      	ldr	r3, [r7, #4]
 8012d7e:	2b00      	cmp	r3, #0
 8012d80:	d106      	bne.n	8012d90 <tcp_parseopt+0x1c>
 8012d82:	4b32      	ldr	r3, [pc, #200]	; (8012e4c <tcp_parseopt+0xd8>)
 8012d84:	f240 727d 	movw	r2, #1917	; 0x77d
 8012d88:	4931      	ldr	r1, [pc, #196]	; (8012e50 <tcp_parseopt+0xdc>)
 8012d8a:	4832      	ldr	r0, [pc, #200]	; (8012e54 <tcp_parseopt+0xe0>)
 8012d8c:	f007 f8b8 	bl	8019f00 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8012d90:	4b31      	ldr	r3, [pc, #196]	; (8012e58 <tcp_parseopt+0xe4>)
 8012d92:	881b      	ldrh	r3, [r3, #0]
 8012d94:	2b00      	cmp	r3, #0
 8012d96:	d056      	beq.n	8012e46 <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8012d98:	4b30      	ldr	r3, [pc, #192]	; (8012e5c <tcp_parseopt+0xe8>)
 8012d9a:	2200      	movs	r2, #0
 8012d9c:	801a      	strh	r2, [r3, #0]
 8012d9e:	e046      	b.n	8012e2e <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 8012da0:	f7ff ffb2 	bl	8012d08 <tcp_get_next_optbyte>
 8012da4:	4603      	mov	r3, r0
 8012da6:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8012da8:	7bfb      	ldrb	r3, [r7, #15]
 8012daa:	2b02      	cmp	r3, #2
 8012dac:	d006      	beq.n	8012dbc <tcp_parseopt+0x48>
 8012dae:	2b02      	cmp	r3, #2
 8012db0:	dc2c      	bgt.n	8012e0c <tcp_parseopt+0x98>
 8012db2:	2b00      	cmp	r3, #0
 8012db4:	d042      	beq.n	8012e3c <tcp_parseopt+0xc8>
 8012db6:	2b01      	cmp	r3, #1
 8012db8:	d128      	bne.n	8012e0c <tcp_parseopt+0x98>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8012dba:	e038      	b.n	8012e2e <tcp_parseopt+0xba>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8012dbc:	f7ff ffa4 	bl	8012d08 <tcp_get_next_optbyte>
 8012dc0:	4603      	mov	r3, r0
 8012dc2:	2b04      	cmp	r3, #4
 8012dc4:	d13c      	bne.n	8012e40 <tcp_parseopt+0xcc>
 8012dc6:	4b25      	ldr	r3, [pc, #148]	; (8012e5c <tcp_parseopt+0xe8>)
 8012dc8:	881b      	ldrh	r3, [r3, #0]
 8012dca:	3301      	adds	r3, #1
 8012dcc:	4a22      	ldr	r2, [pc, #136]	; (8012e58 <tcp_parseopt+0xe4>)
 8012dce:	8812      	ldrh	r2, [r2, #0]
 8012dd0:	4293      	cmp	r3, r2
 8012dd2:	da35      	bge.n	8012e40 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8012dd4:	f7ff ff98 	bl	8012d08 <tcp_get_next_optbyte>
 8012dd8:	4603      	mov	r3, r0
 8012dda:	b29b      	uxth	r3, r3
 8012ddc:	021b      	lsls	r3, r3, #8
 8012dde:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8012de0:	f7ff ff92 	bl	8012d08 <tcp_get_next_optbyte>
 8012de4:	4603      	mov	r3, r0
 8012de6:	b29a      	uxth	r2, r3
 8012de8:	89bb      	ldrh	r3, [r7, #12]
 8012dea:	4313      	orrs	r3, r2
 8012dec:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8012dee:	89bb      	ldrh	r3, [r7, #12]
 8012df0:	f240 52b4 	movw	r2, #1460	; 0x5b4
 8012df4:	4293      	cmp	r3, r2
 8012df6:	d804      	bhi.n	8012e02 <tcp_parseopt+0x8e>
 8012df8:	89bb      	ldrh	r3, [r7, #12]
 8012dfa:	2b00      	cmp	r3, #0
 8012dfc:	d001      	beq.n	8012e02 <tcp_parseopt+0x8e>
 8012dfe:	89ba      	ldrh	r2, [r7, #12]
 8012e00:	e001      	b.n	8012e06 <tcp_parseopt+0x92>
 8012e02:	f240 52b4 	movw	r2, #1460	; 0x5b4
 8012e06:	687b      	ldr	r3, [r7, #4]
 8012e08:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8012e0a:	e010      	b.n	8012e2e <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8012e0c:	f7ff ff7c 	bl	8012d08 <tcp_get_next_optbyte>
 8012e10:	4603      	mov	r3, r0
 8012e12:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8012e14:	7afb      	ldrb	r3, [r7, #11]
 8012e16:	2b01      	cmp	r3, #1
 8012e18:	d914      	bls.n	8012e44 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8012e1a:	7afb      	ldrb	r3, [r7, #11]
 8012e1c:	b29a      	uxth	r2, r3
 8012e1e:	4b0f      	ldr	r3, [pc, #60]	; (8012e5c <tcp_parseopt+0xe8>)
 8012e20:	881b      	ldrh	r3, [r3, #0]
 8012e22:	4413      	add	r3, r2
 8012e24:	b29b      	uxth	r3, r3
 8012e26:	3b02      	subs	r3, #2
 8012e28:	b29a      	uxth	r2, r3
 8012e2a:	4b0c      	ldr	r3, [pc, #48]	; (8012e5c <tcp_parseopt+0xe8>)
 8012e2c:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8012e2e:	4b0b      	ldr	r3, [pc, #44]	; (8012e5c <tcp_parseopt+0xe8>)
 8012e30:	881a      	ldrh	r2, [r3, #0]
 8012e32:	4b09      	ldr	r3, [pc, #36]	; (8012e58 <tcp_parseopt+0xe4>)
 8012e34:	881b      	ldrh	r3, [r3, #0]
 8012e36:	429a      	cmp	r2, r3
 8012e38:	d3b2      	bcc.n	8012da0 <tcp_parseopt+0x2c>
 8012e3a:	e004      	b.n	8012e46 <tcp_parseopt+0xd2>
          return;
 8012e3c:	bf00      	nop
 8012e3e:	e002      	b.n	8012e46 <tcp_parseopt+0xd2>
            return;
 8012e40:	bf00      	nop
 8012e42:	e000      	b.n	8012e46 <tcp_parseopt+0xd2>
            return;
 8012e44:	bf00      	nop
      }
    }
  }
}
 8012e46:	3710      	adds	r7, #16
 8012e48:	46bd      	mov	sp, r7
 8012e4a:	bd80      	pop	{r7, pc}
 8012e4c:	0801ce1c 	.word	0x0801ce1c
 8012e50:	0801d280 	.word	0x0801d280
 8012e54:	0801ce68 	.word	0x0801ce68
 8012e58:	20013af4 	.word	0x20013af4
 8012e5c:	20013afc 	.word	0x20013afc

08012e60 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8012e60:	b480      	push	{r7}
 8012e62:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8012e64:	4b05      	ldr	r3, [pc, #20]	; (8012e7c <tcp_trigger_input_pcb_close+0x1c>)
 8012e66:	781b      	ldrb	r3, [r3, #0]
 8012e68:	f043 0310 	orr.w	r3, r3, #16
 8012e6c:	b2da      	uxtb	r2, r3
 8012e6e:	4b03      	ldr	r3, [pc, #12]	; (8012e7c <tcp_trigger_input_pcb_close+0x1c>)
 8012e70:	701a      	strb	r2, [r3, #0]
}
 8012e72:	bf00      	nop
 8012e74:	46bd      	mov	sp, r7
 8012e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e7a:	4770      	bx	lr
 8012e7c:	20013b0d 	.word	0x20013b0d

08012e80 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8012e80:	b580      	push	{r7, lr}
 8012e82:	b084      	sub	sp, #16
 8012e84:	af00      	add	r7, sp, #0
 8012e86:	60f8      	str	r0, [r7, #12]
 8012e88:	60b9      	str	r1, [r7, #8]
 8012e8a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8012e8c:	68fb      	ldr	r3, [r7, #12]
 8012e8e:	2b00      	cmp	r3, #0
 8012e90:	d00a      	beq.n	8012ea8 <tcp_route+0x28>
 8012e92:	68fb      	ldr	r3, [r7, #12]
 8012e94:	7a1b      	ldrb	r3, [r3, #8]
 8012e96:	2b00      	cmp	r3, #0
 8012e98:	d006      	beq.n	8012ea8 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8012e9a:	68fb      	ldr	r3, [r7, #12]
 8012e9c:	7a1b      	ldrb	r3, [r3, #8]
 8012e9e:	4618      	mov	r0, r3
 8012ea0:	f7fb f960 	bl	800e164 <netif_get_by_index>
 8012ea4:	4603      	mov	r3, r0
 8012ea6:	e003      	b.n	8012eb0 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8012ea8:	6878      	ldr	r0, [r7, #4]
 8012eaa:	f005 fa1d 	bl	80182e8 <ip4_route>
 8012eae:	4603      	mov	r3, r0
  }
}
 8012eb0:	4618      	mov	r0, r3
 8012eb2:	3710      	adds	r7, #16
 8012eb4:	46bd      	mov	sp, r7
 8012eb6:	bd80      	pop	{r7, pc}

08012eb8 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8012eb8:	b590      	push	{r4, r7, lr}
 8012eba:	b087      	sub	sp, #28
 8012ebc:	af00      	add	r7, sp, #0
 8012ebe:	60f8      	str	r0, [r7, #12]
 8012ec0:	60b9      	str	r1, [r7, #8]
 8012ec2:	603b      	str	r3, [r7, #0]
 8012ec4:	4613      	mov	r3, r2
 8012ec6:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8012ec8:	68fb      	ldr	r3, [r7, #12]
 8012eca:	2b00      	cmp	r3, #0
 8012ecc:	d105      	bne.n	8012eda <tcp_create_segment+0x22>
 8012ece:	4b45      	ldr	r3, [pc, #276]	; (8012fe4 <tcp_create_segment+0x12c>)
 8012ed0:	22a3      	movs	r2, #163	; 0xa3
 8012ed2:	4945      	ldr	r1, [pc, #276]	; (8012fe8 <tcp_create_segment+0x130>)
 8012ed4:	4845      	ldr	r0, [pc, #276]	; (8012fec <tcp_create_segment+0x134>)
 8012ed6:	f007 f813 	bl	8019f00 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8012eda:	68bb      	ldr	r3, [r7, #8]
 8012edc:	2b00      	cmp	r3, #0
 8012ede:	d105      	bne.n	8012eec <tcp_create_segment+0x34>
 8012ee0:	4b40      	ldr	r3, [pc, #256]	; (8012fe4 <tcp_create_segment+0x12c>)
 8012ee2:	22a4      	movs	r2, #164	; 0xa4
 8012ee4:	4942      	ldr	r1, [pc, #264]	; (8012ff0 <tcp_create_segment+0x138>)
 8012ee6:	4841      	ldr	r0, [pc, #260]	; (8012fec <tcp_create_segment+0x134>)
 8012ee8:	f007 f80a 	bl	8019f00 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8012eec:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8012ef0:	009b      	lsls	r3, r3, #2
 8012ef2:	b2db      	uxtb	r3, r3
 8012ef4:	f003 0304 	and.w	r3, r3, #4
 8012ef8:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8012efa:	2003      	movs	r0, #3
 8012efc:	f7fa fdd0 	bl	800daa0 <memp_malloc>
 8012f00:	6138      	str	r0, [r7, #16]
 8012f02:	693b      	ldr	r3, [r7, #16]
 8012f04:	2b00      	cmp	r3, #0
 8012f06:	d104      	bne.n	8012f12 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8012f08:	68b8      	ldr	r0, [r7, #8]
 8012f0a:	f7fb fcbd 	bl	800e888 <pbuf_free>
    return NULL;
 8012f0e:	2300      	movs	r3, #0
 8012f10:	e064      	b.n	8012fdc <tcp_create_segment+0x124>
  }
  seg->flags = optflags;
 8012f12:	693b      	ldr	r3, [r7, #16]
 8012f14:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8012f18:	731a      	strb	r2, [r3, #12]
  seg->next = NULL;
 8012f1a:	693b      	ldr	r3, [r7, #16]
 8012f1c:	2200      	movs	r2, #0
 8012f1e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8012f20:	693b      	ldr	r3, [r7, #16]
 8012f22:	68ba      	ldr	r2, [r7, #8]
 8012f24:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8012f26:	68bb      	ldr	r3, [r7, #8]
 8012f28:	891a      	ldrh	r2, [r3, #8]
 8012f2a:	7dfb      	ldrb	r3, [r7, #23]
 8012f2c:	b29b      	uxth	r3, r3
 8012f2e:	429a      	cmp	r2, r3
 8012f30:	d205      	bcs.n	8012f3e <tcp_create_segment+0x86>
 8012f32:	4b2c      	ldr	r3, [pc, #176]	; (8012fe4 <tcp_create_segment+0x12c>)
 8012f34:	22b0      	movs	r2, #176	; 0xb0
 8012f36:	492f      	ldr	r1, [pc, #188]	; (8012ff4 <tcp_create_segment+0x13c>)
 8012f38:	482c      	ldr	r0, [pc, #176]	; (8012fec <tcp_create_segment+0x134>)
 8012f3a:	f006 ffe1 	bl	8019f00 <iprintf>
  seg->len = p->tot_len - optlen;
 8012f3e:	68bb      	ldr	r3, [r7, #8]
 8012f40:	891a      	ldrh	r2, [r3, #8]
 8012f42:	7dfb      	ldrb	r3, [r7, #23]
 8012f44:	b29b      	uxth	r3, r3
 8012f46:	1ad3      	subs	r3, r2, r3
 8012f48:	b29a      	uxth	r2, r3
 8012f4a:	693b      	ldr	r3, [r7, #16]
 8012f4c:	811a      	strh	r2, [r3, #8]
#if TCP_OVERSIZE_DBGCHECK
  seg->oversize_left = 0;
 8012f4e:	693b      	ldr	r3, [r7, #16]
 8012f50:	2200      	movs	r2, #0
 8012f52:	815a      	strh	r2, [r3, #10]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8012f54:	2114      	movs	r1, #20
 8012f56:	68b8      	ldr	r0, [r7, #8]
 8012f58:	f7fb fc00 	bl	800e75c <pbuf_add_header>
 8012f5c:	4603      	mov	r3, r0
 8012f5e:	2b00      	cmp	r3, #0
 8012f60:	d004      	beq.n	8012f6c <tcp_create_segment+0xb4>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8012f62:	6938      	ldr	r0, [r7, #16]
 8012f64:	f7fd f8b7 	bl	80100d6 <tcp_seg_free>
    return NULL;
 8012f68:	2300      	movs	r3, #0
 8012f6a:	e037      	b.n	8012fdc <tcp_create_segment+0x124>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8012f6c:	693b      	ldr	r3, [r7, #16]
 8012f6e:	685b      	ldr	r3, [r3, #4]
 8012f70:	685a      	ldr	r2, [r3, #4]
 8012f72:	693b      	ldr	r3, [r7, #16]
 8012f74:	611a      	str	r2, [r3, #16]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8012f76:	68fb      	ldr	r3, [r7, #12]
 8012f78:	8ada      	ldrh	r2, [r3, #22]
 8012f7a:	693b      	ldr	r3, [r7, #16]
 8012f7c:	691c      	ldr	r4, [r3, #16]
 8012f7e:	4610      	mov	r0, r2
 8012f80:	f7f9 ff60 	bl	800ce44 <lwip_htons>
 8012f84:	4603      	mov	r3, r0
 8012f86:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8012f88:	68fb      	ldr	r3, [r7, #12]
 8012f8a:	8b1a      	ldrh	r2, [r3, #24]
 8012f8c:	693b      	ldr	r3, [r7, #16]
 8012f8e:	691c      	ldr	r4, [r3, #16]
 8012f90:	4610      	mov	r0, r2
 8012f92:	f7f9 ff57 	bl	800ce44 <lwip_htons>
 8012f96:	4603      	mov	r3, r0
 8012f98:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8012f9a:	693b      	ldr	r3, [r7, #16]
 8012f9c:	691c      	ldr	r4, [r3, #16]
 8012f9e:	6838      	ldr	r0, [r7, #0]
 8012fa0:	f7f9 ff65 	bl	800ce6e <lwip_htonl>
 8012fa4:	4603      	mov	r3, r0
 8012fa6:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8012fa8:	7dfb      	ldrb	r3, [r7, #23]
 8012faa:	089b      	lsrs	r3, r3, #2
 8012fac:	b2db      	uxtb	r3, r3
 8012fae:	b29b      	uxth	r3, r3
 8012fb0:	3305      	adds	r3, #5
 8012fb2:	b29b      	uxth	r3, r3
 8012fb4:	031b      	lsls	r3, r3, #12
 8012fb6:	b29a      	uxth	r2, r3
 8012fb8:	79fb      	ldrb	r3, [r7, #7]
 8012fba:	b29b      	uxth	r3, r3
 8012fbc:	4313      	orrs	r3, r2
 8012fbe:	b29a      	uxth	r2, r3
 8012fc0:	693b      	ldr	r3, [r7, #16]
 8012fc2:	691c      	ldr	r4, [r3, #16]
 8012fc4:	4610      	mov	r0, r2
 8012fc6:	f7f9 ff3d 	bl	800ce44 <lwip_htons>
 8012fca:	4603      	mov	r3, r0
 8012fcc:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8012fce:	693b      	ldr	r3, [r7, #16]
 8012fd0:	691b      	ldr	r3, [r3, #16]
 8012fd2:	2200      	movs	r2, #0
 8012fd4:	749a      	strb	r2, [r3, #18]
 8012fd6:	2200      	movs	r2, #0
 8012fd8:	74da      	strb	r2, [r3, #19]
  return seg;
 8012fda:	693b      	ldr	r3, [r7, #16]
}
 8012fdc:	4618      	mov	r0, r3
 8012fde:	371c      	adds	r7, #28
 8012fe0:	46bd      	mov	sp, r7
 8012fe2:	bd90      	pop	{r4, r7, pc}
 8012fe4:	0801d29c 	.word	0x0801d29c
 8012fe8:	0801d2d0 	.word	0x0801d2d0
 8012fec:	0801d2f0 	.word	0x0801d2f0
 8012ff0:	0801d318 	.word	0x0801d318
 8012ff4:	0801d33c 	.word	0x0801d33c

08012ff8 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8012ff8:	b590      	push	{r4, r7, lr}
 8012ffa:	b08b      	sub	sp, #44	; 0x2c
 8012ffc:	af02      	add	r7, sp, #8
 8012ffe:	6078      	str	r0, [r7, #4]
 8013000:	460b      	mov	r3, r1
 8013002:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8013004:	2300      	movs	r3, #0
 8013006:	61bb      	str	r3, [r7, #24]
 8013008:	2300      	movs	r3, #0
 801300a:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 801300c:	2300      	movs	r3, #0
 801300e:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8013010:	687b      	ldr	r3, [r7, #4]
 8013012:	2b00      	cmp	r3, #0
 8013014:	d106      	bne.n	8013024 <tcp_split_unsent_seg+0x2c>
 8013016:	4b97      	ldr	r3, [pc, #604]	; (8013274 <tcp_split_unsent_seg+0x27c>)
 8013018:	f240 324b 	movw	r2, #843	; 0x34b
 801301c:	4996      	ldr	r1, [pc, #600]	; (8013278 <tcp_split_unsent_seg+0x280>)
 801301e:	4897      	ldr	r0, [pc, #604]	; (801327c <tcp_split_unsent_seg+0x284>)
 8013020:	f006 ff6e 	bl	8019f00 <iprintf>

  useg = pcb->unsent;
 8013024:	687b      	ldr	r3, [r7, #4]
 8013026:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013028:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801302a:	697b      	ldr	r3, [r7, #20]
 801302c:	2b00      	cmp	r3, #0
 801302e:	d102      	bne.n	8013036 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8013030:	f04f 33ff 	mov.w	r3, #4294967295
 8013034:	e119      	b.n	801326a <tcp_split_unsent_seg+0x272>
  }

  if (split == 0) {
 8013036:	887b      	ldrh	r3, [r7, #2]
 8013038:	2b00      	cmp	r3, #0
 801303a:	d109      	bne.n	8013050 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 801303c:	4b8d      	ldr	r3, [pc, #564]	; (8013274 <tcp_split_unsent_seg+0x27c>)
 801303e:	f240 3253 	movw	r2, #851	; 0x353
 8013042:	498f      	ldr	r1, [pc, #572]	; (8013280 <tcp_split_unsent_seg+0x288>)
 8013044:	488d      	ldr	r0, [pc, #564]	; (801327c <tcp_split_unsent_seg+0x284>)
 8013046:	f006 ff5b 	bl	8019f00 <iprintf>
    return ERR_VAL;
 801304a:	f06f 0305 	mvn.w	r3, #5
 801304e:	e10c      	b.n	801326a <tcp_split_unsent_seg+0x272>
  }

  if (useg->len <= split) {
 8013050:	697b      	ldr	r3, [r7, #20]
 8013052:	891b      	ldrh	r3, [r3, #8]
 8013054:	887a      	ldrh	r2, [r7, #2]
 8013056:	429a      	cmp	r2, r3
 8013058:	d301      	bcc.n	801305e <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801305a:	2300      	movs	r3, #0
 801305c:	e105      	b.n	801326a <tcp_split_unsent_seg+0x272>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801305e:	687b      	ldr	r3, [r7, #4]
 8013060:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013062:	887a      	ldrh	r2, [r7, #2]
 8013064:	429a      	cmp	r2, r3
 8013066:	d906      	bls.n	8013076 <tcp_split_unsent_seg+0x7e>
 8013068:	4b82      	ldr	r3, [pc, #520]	; (8013274 <tcp_split_unsent_seg+0x27c>)
 801306a:	f240 325b 	movw	r2, #859	; 0x35b
 801306e:	4985      	ldr	r1, [pc, #532]	; (8013284 <tcp_split_unsent_seg+0x28c>)
 8013070:	4882      	ldr	r0, [pc, #520]	; (801327c <tcp_split_unsent_seg+0x284>)
 8013072:	f006 ff45 	bl	8019f00 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8013076:	697b      	ldr	r3, [r7, #20]
 8013078:	891b      	ldrh	r3, [r3, #8]
 801307a:	2b00      	cmp	r3, #0
 801307c:	d106      	bne.n	801308c <tcp_split_unsent_seg+0x94>
 801307e:	4b7d      	ldr	r3, [pc, #500]	; (8013274 <tcp_split_unsent_seg+0x27c>)
 8013080:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8013084:	4980      	ldr	r1, [pc, #512]	; (8013288 <tcp_split_unsent_seg+0x290>)
 8013086:	487d      	ldr	r0, [pc, #500]	; (801327c <tcp_split_unsent_seg+0x284>)
 8013088:	f006 ff3a 	bl	8019f00 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 801308c:	697b      	ldr	r3, [r7, #20]
 801308e:	7b1b      	ldrb	r3, [r3, #12]
 8013090:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8013092:	7bfb      	ldrb	r3, [r7, #15]
 8013094:	009b      	lsls	r3, r3, #2
 8013096:	b2db      	uxtb	r3, r3
 8013098:	f003 0304 	and.w	r3, r3, #4
 801309c:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801309e:	697b      	ldr	r3, [r7, #20]
 80130a0:	891a      	ldrh	r2, [r3, #8]
 80130a2:	887b      	ldrh	r3, [r7, #2]
 80130a4:	1ad3      	subs	r3, r2, r3
 80130a6:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 80130a8:	7bbb      	ldrb	r3, [r7, #14]
 80130aa:	b29a      	uxth	r2, r3
 80130ac:	89bb      	ldrh	r3, [r7, #12]
 80130ae:	4413      	add	r3, r2
 80130b0:	b29b      	uxth	r3, r3
 80130b2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80130b6:	4619      	mov	r1, r3
 80130b8:	2036      	movs	r0, #54	; 0x36
 80130ba:	f7fb f8fd 	bl	800e2b8 <pbuf_alloc>
 80130be:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80130c0:	693b      	ldr	r3, [r7, #16]
 80130c2:	2b00      	cmp	r3, #0
 80130c4:	f000 80ba 	beq.w	801323c <tcp_split_unsent_seg+0x244>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 80130c8:	697b      	ldr	r3, [r7, #20]
 80130ca:	685b      	ldr	r3, [r3, #4]
 80130cc:	891a      	ldrh	r2, [r3, #8]
 80130ce:	697b      	ldr	r3, [r7, #20]
 80130d0:	891b      	ldrh	r3, [r3, #8]
 80130d2:	1ad3      	subs	r3, r2, r3
 80130d4:	b29a      	uxth	r2, r3
 80130d6:	887b      	ldrh	r3, [r7, #2]
 80130d8:	4413      	add	r3, r2
 80130da:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 80130dc:	697b      	ldr	r3, [r7, #20]
 80130de:	6858      	ldr	r0, [r3, #4]
 80130e0:	693b      	ldr	r3, [r7, #16]
 80130e2:	685a      	ldr	r2, [r3, #4]
 80130e4:	7bbb      	ldrb	r3, [r7, #14]
 80130e6:	18d1      	adds	r1, r2, r3
 80130e8:	897b      	ldrh	r3, [r7, #10]
 80130ea:	89ba      	ldrh	r2, [r7, #12]
 80130ec:	f7fb fdd2 	bl	800ec94 <pbuf_copy_partial>
 80130f0:	4603      	mov	r3, r0
 80130f2:	461a      	mov	r2, r3
 80130f4:	89bb      	ldrh	r3, [r7, #12]
 80130f6:	4293      	cmp	r3, r2
 80130f8:	f040 80a2 	bne.w	8013240 <tcp_split_unsent_seg+0x248>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 80130fc:	697b      	ldr	r3, [r7, #20]
 80130fe:	691b      	ldr	r3, [r3, #16]
 8013100:	899b      	ldrh	r3, [r3, #12]
 8013102:	b29b      	uxth	r3, r3
 8013104:	4618      	mov	r0, r3
 8013106:	f7f9 fe9d 	bl	800ce44 <lwip_htons>
 801310a:	4603      	mov	r3, r0
 801310c:	b2db      	uxtb	r3, r3
 801310e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013112:	77fb      	strb	r3, [r7, #31]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8013114:	2300      	movs	r3, #0
 8013116:	77bb      	strb	r3, [r7, #30]

  if (split_flags & TCP_PSH) {
 8013118:	7ffb      	ldrb	r3, [r7, #31]
 801311a:	f003 0308 	and.w	r3, r3, #8
 801311e:	2b00      	cmp	r3, #0
 8013120:	d007      	beq.n	8013132 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8013122:	7ffb      	ldrb	r3, [r7, #31]
 8013124:	f023 0308 	bic.w	r3, r3, #8
 8013128:	77fb      	strb	r3, [r7, #31]
    remainder_flags |= TCP_PSH;
 801312a:	7fbb      	ldrb	r3, [r7, #30]
 801312c:	f043 0308 	orr.w	r3, r3, #8
 8013130:	77bb      	strb	r3, [r7, #30]
  }
  if (split_flags & TCP_FIN) {
 8013132:	7ffb      	ldrb	r3, [r7, #31]
 8013134:	f003 0301 	and.w	r3, r3, #1
 8013138:	2b00      	cmp	r3, #0
 801313a:	d007      	beq.n	801314c <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 801313c:	7ffb      	ldrb	r3, [r7, #31]
 801313e:	f023 0301 	bic.w	r3, r3, #1
 8013142:	77fb      	strb	r3, [r7, #31]
    remainder_flags |= TCP_FIN;
 8013144:	7fbb      	ldrb	r3, [r7, #30]
 8013146:	f043 0301 	orr.w	r3, r3, #1
 801314a:	77bb      	strb	r3, [r7, #30]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 801314c:	697b      	ldr	r3, [r7, #20]
 801314e:	691b      	ldr	r3, [r3, #16]
 8013150:	685b      	ldr	r3, [r3, #4]
 8013152:	4618      	mov	r0, r3
 8013154:	f7f9 fe8b 	bl	800ce6e <lwip_htonl>
 8013158:	4602      	mov	r2, r0
 801315a:	887b      	ldrh	r3, [r7, #2]
 801315c:	18d1      	adds	r1, r2, r3
 801315e:	7fba      	ldrb	r2, [r7, #30]
 8013160:	7bfb      	ldrb	r3, [r7, #15]
 8013162:	9300      	str	r3, [sp, #0]
 8013164:	460b      	mov	r3, r1
 8013166:	6939      	ldr	r1, [r7, #16]
 8013168:	6878      	ldr	r0, [r7, #4]
 801316a:	f7ff fea5 	bl	8012eb8 <tcp_create_segment>
 801316e:	61b8      	str	r0, [r7, #24]
  if (seg == NULL) {
 8013170:	69bb      	ldr	r3, [r7, #24]
 8013172:	2b00      	cmp	r3, #0
 8013174:	d066      	beq.n	8013244 <tcp_split_unsent_seg+0x24c>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8013176:	697b      	ldr	r3, [r7, #20]
 8013178:	685b      	ldr	r3, [r3, #4]
 801317a:	4618      	mov	r0, r3
 801317c:	f7fb fc12 	bl	800e9a4 <pbuf_clen>
 8013180:	4603      	mov	r3, r0
 8013182:	461a      	mov	r2, r3
 8013184:	687b      	ldr	r3, [r7, #4]
 8013186:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801318a:	1a9b      	subs	r3, r3, r2
 801318c:	b29a      	uxth	r2, r3
 801318e:	687b      	ldr	r3, [r7, #4]
 8013190:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8013194:	697b      	ldr	r3, [r7, #20]
 8013196:	6858      	ldr	r0, [r3, #4]
 8013198:	697b      	ldr	r3, [r7, #20]
 801319a:	685b      	ldr	r3, [r3, #4]
 801319c:	891a      	ldrh	r2, [r3, #8]
 801319e:	89bb      	ldrh	r3, [r7, #12]
 80131a0:	1ad3      	subs	r3, r2, r3
 80131a2:	b29b      	uxth	r3, r3
 80131a4:	4619      	mov	r1, r3
 80131a6:	f7fb f9e9 	bl	800e57c <pbuf_realloc>
  useg->len -= remainder;
 80131aa:	697b      	ldr	r3, [r7, #20]
 80131ac:	891a      	ldrh	r2, [r3, #8]
 80131ae:	89bb      	ldrh	r3, [r7, #12]
 80131b0:	1ad3      	subs	r3, r2, r3
 80131b2:	b29a      	uxth	r2, r3
 80131b4:	697b      	ldr	r3, [r7, #20]
 80131b6:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 80131b8:	697b      	ldr	r3, [r7, #20]
 80131ba:	691b      	ldr	r3, [r3, #16]
 80131bc:	899b      	ldrh	r3, [r3, #12]
 80131be:	b29c      	uxth	r4, r3
 80131c0:	7ffb      	ldrb	r3, [r7, #31]
 80131c2:	b29b      	uxth	r3, r3
 80131c4:	4618      	mov	r0, r3
 80131c6:	f7f9 fe3d 	bl	800ce44 <lwip_htons>
 80131ca:	4603      	mov	r3, r0
 80131cc:	461a      	mov	r2, r3
 80131ce:	697b      	ldr	r3, [r7, #20]
 80131d0:	691b      	ldr	r3, [r3, #16]
 80131d2:	4322      	orrs	r2, r4
 80131d4:	b292      	uxth	r2, r2
 80131d6:	819a      	strh	r2, [r3, #12]
#if TCP_OVERSIZE_DBGCHECK
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
 80131d8:	697b      	ldr	r3, [r7, #20]
 80131da:	2200      	movs	r2, #0
 80131dc:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 80131de:	697b      	ldr	r3, [r7, #20]
 80131e0:	685b      	ldr	r3, [r3, #4]
 80131e2:	4618      	mov	r0, r3
 80131e4:	f7fb fbde 	bl	800e9a4 <pbuf_clen>
 80131e8:	4603      	mov	r3, r0
 80131ea:	461a      	mov	r2, r3
 80131ec:	687b      	ldr	r3, [r7, #4]
 80131ee:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80131f2:	4413      	add	r3, r2
 80131f4:	b29a      	uxth	r2, r3
 80131f6:	687b      	ldr	r3, [r7, #4]
 80131f8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80131fc:	69bb      	ldr	r3, [r7, #24]
 80131fe:	685b      	ldr	r3, [r3, #4]
 8013200:	4618      	mov	r0, r3
 8013202:	f7fb fbcf 	bl	800e9a4 <pbuf_clen>
 8013206:	4603      	mov	r3, r0
 8013208:	461a      	mov	r2, r3
 801320a:	687b      	ldr	r3, [r7, #4]
 801320c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013210:	4413      	add	r3, r2
 8013212:	b29a      	uxth	r2, r3
 8013214:	687b      	ldr	r3, [r7, #4]
 8013216:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 801321a:	697b      	ldr	r3, [r7, #20]
 801321c:	681a      	ldr	r2, [r3, #0]
 801321e:	69bb      	ldr	r3, [r7, #24]
 8013220:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8013222:	697b      	ldr	r3, [r7, #20]
 8013224:	69ba      	ldr	r2, [r7, #24]
 8013226:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8013228:	69bb      	ldr	r3, [r7, #24]
 801322a:	681b      	ldr	r3, [r3, #0]
 801322c:	2b00      	cmp	r3, #0
 801322e:	d103      	bne.n	8013238 <tcp_split_unsent_seg+0x240>
    pcb->unsent_oversize = 0;
 8013230:	687b      	ldr	r3, [r7, #4]
 8013232:	2200      	movs	r2, #0
 8013234:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8013238:	2300      	movs	r3, #0
 801323a:	e016      	b.n	801326a <tcp_split_unsent_seg+0x272>
    goto memerr;
 801323c:	bf00      	nop
 801323e:	e002      	b.n	8013246 <tcp_split_unsent_seg+0x24e>
    goto memerr;
 8013240:	bf00      	nop
 8013242:	e000      	b.n	8013246 <tcp_split_unsent_seg+0x24e>
    goto memerr;
 8013244:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8013246:	69bb      	ldr	r3, [r7, #24]
 8013248:	2b00      	cmp	r3, #0
 801324a:	d006      	beq.n	801325a <tcp_split_unsent_seg+0x262>
 801324c:	4b09      	ldr	r3, [pc, #36]	; (8013274 <tcp_split_unsent_seg+0x27c>)
 801324e:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8013252:	490e      	ldr	r1, [pc, #56]	; (801328c <tcp_split_unsent_seg+0x294>)
 8013254:	4809      	ldr	r0, [pc, #36]	; (801327c <tcp_split_unsent_seg+0x284>)
 8013256:	f006 fe53 	bl	8019f00 <iprintf>
  if (p != NULL) {
 801325a:	693b      	ldr	r3, [r7, #16]
 801325c:	2b00      	cmp	r3, #0
 801325e:	d002      	beq.n	8013266 <tcp_split_unsent_seg+0x26e>
    pbuf_free(p);
 8013260:	6938      	ldr	r0, [r7, #16]
 8013262:	f7fb fb11 	bl	800e888 <pbuf_free>
  }

  return ERR_MEM;
 8013266:	f04f 33ff 	mov.w	r3, #4294967295
}
 801326a:	4618      	mov	r0, r3
 801326c:	3724      	adds	r7, #36	; 0x24
 801326e:	46bd      	mov	sp, r7
 8013270:	bd90      	pop	{r4, r7, pc}
 8013272:	bf00      	nop
 8013274:	0801d29c 	.word	0x0801d29c
 8013278:	0801d68c 	.word	0x0801d68c
 801327c:	0801d2f0 	.word	0x0801d2f0
 8013280:	0801d6b0 	.word	0x0801d6b0
 8013284:	0801d6d4 	.word	0x0801d6d4
 8013288:	0801d6e4 	.word	0x0801d6e4
 801328c:	0801d6f4 	.word	0x0801d6f4

08013290 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8013290:	b590      	push	{r4, r7, lr}
 8013292:	b085      	sub	sp, #20
 8013294:	af00      	add	r7, sp, #0
 8013296:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8013298:	687b      	ldr	r3, [r7, #4]
 801329a:	2b00      	cmp	r3, #0
 801329c:	d106      	bne.n	80132ac <tcp_send_fin+0x1c>
 801329e:	4b21      	ldr	r3, [pc, #132]	; (8013324 <tcp_send_fin+0x94>)
 80132a0:	f240 32eb 	movw	r2, #1003	; 0x3eb
 80132a4:	4920      	ldr	r1, [pc, #128]	; (8013328 <tcp_send_fin+0x98>)
 80132a6:	4821      	ldr	r0, [pc, #132]	; (801332c <tcp_send_fin+0x9c>)
 80132a8:	f006 fe2a 	bl	8019f00 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 80132ac:	687b      	ldr	r3, [r7, #4]
 80132ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80132b0:	2b00      	cmp	r3, #0
 80132b2:	d02e      	beq.n	8013312 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80132b4:	687b      	ldr	r3, [r7, #4]
 80132b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80132b8:	60fb      	str	r3, [r7, #12]
 80132ba:	e002      	b.n	80132c2 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 80132bc:	68fb      	ldr	r3, [r7, #12]
 80132be:	681b      	ldr	r3, [r3, #0]
 80132c0:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80132c2:	68fb      	ldr	r3, [r7, #12]
 80132c4:	681b      	ldr	r3, [r3, #0]
 80132c6:	2b00      	cmp	r3, #0
 80132c8:	d1f8      	bne.n	80132bc <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80132ca:	68fb      	ldr	r3, [r7, #12]
 80132cc:	691b      	ldr	r3, [r3, #16]
 80132ce:	899b      	ldrh	r3, [r3, #12]
 80132d0:	b29b      	uxth	r3, r3
 80132d2:	4618      	mov	r0, r3
 80132d4:	f7f9 fdb6 	bl	800ce44 <lwip_htons>
 80132d8:	4603      	mov	r3, r0
 80132da:	b2db      	uxtb	r3, r3
 80132dc:	f003 0307 	and.w	r3, r3, #7
 80132e0:	2b00      	cmp	r3, #0
 80132e2:	d116      	bne.n	8013312 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 80132e4:	68fb      	ldr	r3, [r7, #12]
 80132e6:	691b      	ldr	r3, [r3, #16]
 80132e8:	899b      	ldrh	r3, [r3, #12]
 80132ea:	b29c      	uxth	r4, r3
 80132ec:	2001      	movs	r0, #1
 80132ee:	f7f9 fda9 	bl	800ce44 <lwip_htons>
 80132f2:	4603      	mov	r3, r0
 80132f4:	461a      	mov	r2, r3
 80132f6:	68fb      	ldr	r3, [r7, #12]
 80132f8:	691b      	ldr	r3, [r3, #16]
 80132fa:	4322      	orrs	r2, r4
 80132fc:	b292      	uxth	r2, r2
 80132fe:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8013300:	687b      	ldr	r3, [r7, #4]
 8013302:	8b5b      	ldrh	r3, [r3, #26]
 8013304:	f043 0320 	orr.w	r3, r3, #32
 8013308:	b29a      	uxth	r2, r3
 801330a:	687b      	ldr	r3, [r7, #4]
 801330c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801330e:	2300      	movs	r3, #0
 8013310:	e004      	b.n	801331c <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8013312:	2101      	movs	r1, #1
 8013314:	6878      	ldr	r0, [r7, #4]
 8013316:	f000 f80b 	bl	8013330 <tcp_enqueue_flags>
 801331a:	4603      	mov	r3, r0
}
 801331c:	4618      	mov	r0, r3
 801331e:	3714      	adds	r7, #20
 8013320:	46bd      	mov	sp, r7
 8013322:	bd90      	pop	{r4, r7, pc}
 8013324:	0801d29c 	.word	0x0801d29c
 8013328:	0801d700 	.word	0x0801d700
 801332c:	0801d2f0 	.word	0x0801d2f0

08013330 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8013330:	b580      	push	{r7, lr}
 8013332:	b088      	sub	sp, #32
 8013334:	af02      	add	r7, sp, #8
 8013336:	6078      	str	r0, [r7, #4]
 8013338:	460b      	mov	r3, r1
 801333a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 801333c:	2300      	movs	r3, #0
 801333e:	75fb      	strb	r3, [r7, #23]
  u8_t optlen = 0;
 8013340:	2300      	movs	r3, #0
 8013342:	75bb      	strb	r3, [r7, #22]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8013344:	78fb      	ldrb	r3, [r7, #3]
 8013346:	f003 0303 	and.w	r3, r3, #3
 801334a:	2b00      	cmp	r3, #0
 801334c:	d106      	bne.n	801335c <tcp_enqueue_flags+0x2c>
 801334e:	4b67      	ldr	r3, [pc, #412]	; (80134ec <tcp_enqueue_flags+0x1bc>)
 8013350:	f240 4211 	movw	r2, #1041	; 0x411
 8013354:	4966      	ldr	r1, [pc, #408]	; (80134f0 <tcp_enqueue_flags+0x1c0>)
 8013356:	4867      	ldr	r0, [pc, #412]	; (80134f4 <tcp_enqueue_flags+0x1c4>)
 8013358:	f006 fdd2 	bl	8019f00 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801335c:	687b      	ldr	r3, [r7, #4]
 801335e:	2b00      	cmp	r3, #0
 8013360:	d106      	bne.n	8013370 <tcp_enqueue_flags+0x40>
 8013362:	4b62      	ldr	r3, [pc, #392]	; (80134ec <tcp_enqueue_flags+0x1bc>)
 8013364:	f240 4213 	movw	r2, #1043	; 0x413
 8013368:	4963      	ldr	r1, [pc, #396]	; (80134f8 <tcp_enqueue_flags+0x1c8>)
 801336a:	4862      	ldr	r0, [pc, #392]	; (80134f4 <tcp_enqueue_flags+0x1c4>)
 801336c:	f006 fdc8 	bl	8019f00 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8013370:	78fb      	ldrb	r3, [r7, #3]
 8013372:	f003 0302 	and.w	r3, r3, #2
 8013376:	2b00      	cmp	r3, #0
 8013378:	d001      	beq.n	801337e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801337a:	2301      	movs	r3, #1
 801337c:	75fb      	strb	r3, [r7, #23]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801337e:	7dfb      	ldrb	r3, [r7, #23]
 8013380:	009b      	lsls	r3, r3, #2
 8013382:	b2db      	uxtb	r3, r3
 8013384:	f003 0304 	and.w	r3, r3, #4
 8013388:	75bb      	strb	r3, [r7, #22]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801338a:	7dbb      	ldrb	r3, [r7, #22]
 801338c:	b29b      	uxth	r3, r3
 801338e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013392:	4619      	mov	r1, r3
 8013394:	2036      	movs	r0, #54	; 0x36
 8013396:	f7fa ff8f 	bl	800e2b8 <pbuf_alloc>
 801339a:	60f8      	str	r0, [r7, #12]
 801339c:	68fb      	ldr	r3, [r7, #12]
 801339e:	2b00      	cmp	r3, #0
 80133a0:	d109      	bne.n	80133b6 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80133a2:	687b      	ldr	r3, [r7, #4]
 80133a4:	8b5b      	ldrh	r3, [r3, #26]
 80133a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80133aa:	b29a      	uxth	r2, r3
 80133ac:	687b      	ldr	r3, [r7, #4]
 80133ae:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80133b0:	f04f 33ff 	mov.w	r3, #4294967295
 80133b4:	e095      	b.n	80134e2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 80133b6:	68fb      	ldr	r3, [r7, #12]
 80133b8:	895a      	ldrh	r2, [r3, #10]
 80133ba:	7dbb      	ldrb	r3, [r7, #22]
 80133bc:	b29b      	uxth	r3, r3
 80133be:	429a      	cmp	r2, r3
 80133c0:	d206      	bcs.n	80133d0 <tcp_enqueue_flags+0xa0>
 80133c2:	4b4a      	ldr	r3, [pc, #296]	; (80134ec <tcp_enqueue_flags+0x1bc>)
 80133c4:	f240 4239 	movw	r2, #1081	; 0x439
 80133c8:	494c      	ldr	r1, [pc, #304]	; (80134fc <tcp_enqueue_flags+0x1cc>)
 80133ca:	484a      	ldr	r0, [pc, #296]	; (80134f4 <tcp_enqueue_flags+0x1c4>)
 80133cc:	f006 fd98 	bl	8019f00 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80133d0:	687b      	ldr	r3, [r7, #4]
 80133d2:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80133d4:	78fa      	ldrb	r2, [r7, #3]
 80133d6:	7dfb      	ldrb	r3, [r7, #23]
 80133d8:	9300      	str	r3, [sp, #0]
 80133da:	460b      	mov	r3, r1
 80133dc:	68f9      	ldr	r1, [r7, #12]
 80133de:	6878      	ldr	r0, [r7, #4]
 80133e0:	f7ff fd6a 	bl	8012eb8 <tcp_create_segment>
 80133e4:	60b8      	str	r0, [r7, #8]
 80133e6:	68bb      	ldr	r3, [r7, #8]
 80133e8:	2b00      	cmp	r3, #0
 80133ea:	d109      	bne.n	8013400 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80133ec:	687b      	ldr	r3, [r7, #4]
 80133ee:	8b5b      	ldrh	r3, [r3, #26]
 80133f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80133f4:	b29a      	uxth	r2, r3
 80133f6:	687b      	ldr	r3, [r7, #4]
 80133f8:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80133fa:	f04f 33ff 	mov.w	r3, #4294967295
 80133fe:	e070      	b.n	80134e2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8013400:	68bb      	ldr	r3, [r7, #8]
 8013402:	691b      	ldr	r3, [r3, #16]
 8013404:	f003 0303 	and.w	r3, r3, #3
 8013408:	2b00      	cmp	r3, #0
 801340a:	d006      	beq.n	801341a <tcp_enqueue_flags+0xea>
 801340c:	4b37      	ldr	r3, [pc, #220]	; (80134ec <tcp_enqueue_flags+0x1bc>)
 801340e:	f240 4242 	movw	r2, #1090	; 0x442
 8013412:	493b      	ldr	r1, [pc, #236]	; (8013500 <tcp_enqueue_flags+0x1d0>)
 8013414:	4837      	ldr	r0, [pc, #220]	; (80134f4 <tcp_enqueue_flags+0x1c4>)
 8013416:	f006 fd73 	bl	8019f00 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801341a:	68bb      	ldr	r3, [r7, #8]
 801341c:	891b      	ldrh	r3, [r3, #8]
 801341e:	2b00      	cmp	r3, #0
 8013420:	d006      	beq.n	8013430 <tcp_enqueue_flags+0x100>
 8013422:	4b32      	ldr	r3, [pc, #200]	; (80134ec <tcp_enqueue_flags+0x1bc>)
 8013424:	f240 4243 	movw	r2, #1091	; 0x443
 8013428:	4936      	ldr	r1, [pc, #216]	; (8013504 <tcp_enqueue_flags+0x1d4>)
 801342a:	4832      	ldr	r0, [pc, #200]	; (80134f4 <tcp_enqueue_flags+0x1c4>)
 801342c:	f006 fd68 	bl	8019f00 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8013430:	687b      	ldr	r3, [r7, #4]
 8013432:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013434:	2b00      	cmp	r3, #0
 8013436:	d103      	bne.n	8013440 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8013438:	687b      	ldr	r3, [r7, #4]
 801343a:	68ba      	ldr	r2, [r7, #8]
 801343c:	66da      	str	r2, [r3, #108]	; 0x6c
 801343e:	e00d      	b.n	801345c <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8013440:	687b      	ldr	r3, [r7, #4]
 8013442:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013444:	613b      	str	r3, [r7, #16]
 8013446:	e002      	b.n	801344e <tcp_enqueue_flags+0x11e>
 8013448:	693b      	ldr	r3, [r7, #16]
 801344a:	681b      	ldr	r3, [r3, #0]
 801344c:	613b      	str	r3, [r7, #16]
 801344e:	693b      	ldr	r3, [r7, #16]
 8013450:	681b      	ldr	r3, [r3, #0]
 8013452:	2b00      	cmp	r3, #0
 8013454:	d1f8      	bne.n	8013448 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8013456:	693b      	ldr	r3, [r7, #16]
 8013458:	68ba      	ldr	r2, [r7, #8]
 801345a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 801345c:	687b      	ldr	r3, [r7, #4]
 801345e:	2200      	movs	r2, #0
 8013460:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8013464:	78fb      	ldrb	r3, [r7, #3]
 8013466:	f003 0302 	and.w	r3, r3, #2
 801346a:	2b00      	cmp	r3, #0
 801346c:	d104      	bne.n	8013478 <tcp_enqueue_flags+0x148>
 801346e:	78fb      	ldrb	r3, [r7, #3]
 8013470:	f003 0301 	and.w	r3, r3, #1
 8013474:	2b00      	cmp	r3, #0
 8013476:	d004      	beq.n	8013482 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8013478:	687b      	ldr	r3, [r7, #4]
 801347a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801347c:	1c5a      	adds	r2, r3, #1
 801347e:	687b      	ldr	r3, [r7, #4]
 8013480:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8013482:	78fb      	ldrb	r3, [r7, #3]
 8013484:	f003 0301 	and.w	r3, r3, #1
 8013488:	2b00      	cmp	r3, #0
 801348a:	d006      	beq.n	801349a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 801348c:	687b      	ldr	r3, [r7, #4]
 801348e:	8b5b      	ldrh	r3, [r3, #26]
 8013490:	f043 0320 	orr.w	r3, r3, #32
 8013494:	b29a      	uxth	r2, r3
 8013496:	687b      	ldr	r3, [r7, #4]
 8013498:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801349a:	68bb      	ldr	r3, [r7, #8]
 801349c:	685b      	ldr	r3, [r3, #4]
 801349e:	4618      	mov	r0, r3
 80134a0:	f7fb fa80 	bl	800e9a4 <pbuf_clen>
 80134a4:	4603      	mov	r3, r0
 80134a6:	461a      	mov	r2, r3
 80134a8:	687b      	ldr	r3, [r7, #4]
 80134aa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80134ae:	4413      	add	r3, r2
 80134b0:	b29a      	uxth	r2, r3
 80134b2:	687b      	ldr	r3, [r7, #4]
 80134b4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80134b8:	687b      	ldr	r3, [r7, #4]
 80134ba:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80134be:	2b00      	cmp	r3, #0
 80134c0:	d00e      	beq.n	80134e0 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 80134c2:	687b      	ldr	r3, [r7, #4]
 80134c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80134c6:	2b00      	cmp	r3, #0
 80134c8:	d10a      	bne.n	80134e0 <tcp_enqueue_flags+0x1b0>
 80134ca:	687b      	ldr	r3, [r7, #4]
 80134cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80134ce:	2b00      	cmp	r3, #0
 80134d0:	d106      	bne.n	80134e0 <tcp_enqueue_flags+0x1b0>
 80134d2:	4b06      	ldr	r3, [pc, #24]	; (80134ec <tcp_enqueue_flags+0x1bc>)
 80134d4:	f240 4265 	movw	r2, #1125	; 0x465
 80134d8:	490b      	ldr	r1, [pc, #44]	; (8013508 <tcp_enqueue_flags+0x1d8>)
 80134da:	4806      	ldr	r0, [pc, #24]	; (80134f4 <tcp_enqueue_flags+0x1c4>)
 80134dc:	f006 fd10 	bl	8019f00 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 80134e0:	2300      	movs	r3, #0
}
 80134e2:	4618      	mov	r0, r3
 80134e4:	3718      	adds	r7, #24
 80134e6:	46bd      	mov	sp, r7
 80134e8:	bd80      	pop	{r7, pc}
 80134ea:	bf00      	nop
 80134ec:	0801d29c 	.word	0x0801d29c
 80134f0:	0801d71c 	.word	0x0801d71c
 80134f4:	0801d2f0 	.word	0x0801d2f0
 80134f8:	0801d774 	.word	0x0801d774
 80134fc:	0801d794 	.word	0x0801d794
 8013500:	0801d7d0 	.word	0x0801d7d0
 8013504:	0801d7e8 	.word	0x0801d7e8
 8013508:	0801d814 	.word	0x0801d814

0801350c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 801350c:	b5b0      	push	{r4, r5, r7, lr}
 801350e:	b08a      	sub	sp, #40	; 0x28
 8013510:	af00      	add	r7, sp, #0
 8013512:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8013514:	687b      	ldr	r3, [r7, #4]
 8013516:	2b00      	cmp	r3, #0
 8013518:	d106      	bne.n	8013528 <tcp_output+0x1c>
 801351a:	4b8a      	ldr	r3, [pc, #552]	; (8013744 <tcp_output+0x238>)
 801351c:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8013520:	4989      	ldr	r1, [pc, #548]	; (8013748 <tcp_output+0x23c>)
 8013522:	488a      	ldr	r0, [pc, #552]	; (801374c <tcp_output+0x240>)
 8013524:	f006 fcec 	bl	8019f00 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8013528:	687b      	ldr	r3, [r7, #4]
 801352a:	7d1b      	ldrb	r3, [r3, #20]
 801352c:	2b01      	cmp	r3, #1
 801352e:	d106      	bne.n	801353e <tcp_output+0x32>
 8013530:	4b84      	ldr	r3, [pc, #528]	; (8013744 <tcp_output+0x238>)
 8013532:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8013536:	4986      	ldr	r1, [pc, #536]	; (8013750 <tcp_output+0x244>)
 8013538:	4884      	ldr	r0, [pc, #528]	; (801374c <tcp_output+0x240>)
 801353a:	f006 fce1 	bl	8019f00 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801353e:	4b85      	ldr	r3, [pc, #532]	; (8013754 <tcp_output+0x248>)
 8013540:	681b      	ldr	r3, [r3, #0]
 8013542:	687a      	ldr	r2, [r7, #4]
 8013544:	429a      	cmp	r2, r3
 8013546:	d101      	bne.n	801354c <tcp_output+0x40>
    return ERR_OK;
 8013548:	2300      	movs	r3, #0
 801354a:	e1d1      	b.n	80138f0 <tcp_output+0x3e4>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801354c:	687b      	ldr	r3, [r7, #4]
 801354e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013552:	687b      	ldr	r3, [r7, #4]
 8013554:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013558:	4293      	cmp	r3, r2
 801355a:	bf28      	it	cs
 801355c:	4613      	movcs	r3, r2
 801355e:	b29b      	uxth	r3, r3
 8013560:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8013562:	687b      	ldr	r3, [r7, #4]
 8013564:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013566:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8013568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801356a:	2b00      	cmp	r3, #0
 801356c:	d10b      	bne.n	8013586 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801356e:	687b      	ldr	r3, [r7, #4]
 8013570:	8b5b      	ldrh	r3, [r3, #26]
 8013572:	f003 0302 	and.w	r3, r3, #2
 8013576:	2b00      	cmp	r3, #0
 8013578:	f000 81ad 	beq.w	80138d6 <tcp_output+0x3ca>
      return tcp_send_empty_ack(pcb);
 801357c:	6878      	ldr	r0, [r7, #4]
 801357e:	f000 fdf9 	bl	8014174 <tcp_send_empty_ack>
 8013582:	4603      	mov	r3, r0
 8013584:	e1b4      	b.n	80138f0 <tcp_output+0x3e4>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8013586:	6879      	ldr	r1, [r7, #4]
 8013588:	687b      	ldr	r3, [r7, #4]
 801358a:	3304      	adds	r3, #4
 801358c:	461a      	mov	r2, r3
 801358e:	6878      	ldr	r0, [r7, #4]
 8013590:	f7ff fc76 	bl	8012e80 <tcp_route>
 8013594:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8013596:	697b      	ldr	r3, [r7, #20]
 8013598:	2b00      	cmp	r3, #0
 801359a:	d102      	bne.n	80135a2 <tcp_output+0x96>
    return ERR_RTE;
 801359c:	f06f 0303 	mvn.w	r3, #3
 80135a0:	e1a6      	b.n	80138f0 <tcp_output+0x3e4>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 80135a2:	687b      	ldr	r3, [r7, #4]
 80135a4:	2b00      	cmp	r3, #0
 80135a6:	d003      	beq.n	80135b0 <tcp_output+0xa4>
 80135a8:	687b      	ldr	r3, [r7, #4]
 80135aa:	681b      	ldr	r3, [r3, #0]
 80135ac:	2b00      	cmp	r3, #0
 80135ae:	d111      	bne.n	80135d4 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 80135b0:	697b      	ldr	r3, [r7, #20]
 80135b2:	2b00      	cmp	r3, #0
 80135b4:	d002      	beq.n	80135bc <tcp_output+0xb0>
 80135b6:	697b      	ldr	r3, [r7, #20]
 80135b8:	3304      	adds	r3, #4
 80135ba:	e000      	b.n	80135be <tcp_output+0xb2>
 80135bc:	2300      	movs	r3, #0
 80135be:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 80135c0:	693b      	ldr	r3, [r7, #16]
 80135c2:	2b00      	cmp	r3, #0
 80135c4:	d102      	bne.n	80135cc <tcp_output+0xc0>
      return ERR_RTE;
 80135c6:	f06f 0303 	mvn.w	r3, #3
 80135ca:	e191      	b.n	80138f0 <tcp_output+0x3e4>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 80135cc:	693b      	ldr	r3, [r7, #16]
 80135ce:	681a      	ldr	r2, [r3, #0]
 80135d0:	687b      	ldr	r3, [r7, #4]
 80135d2:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 80135d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80135d6:	691b      	ldr	r3, [r3, #16]
 80135d8:	685b      	ldr	r3, [r3, #4]
 80135da:	4618      	mov	r0, r3
 80135dc:	f7f9 fc47 	bl	800ce6e <lwip_htonl>
 80135e0:	4602      	mov	r2, r0
 80135e2:	687b      	ldr	r3, [r7, #4]
 80135e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80135e6:	1ad3      	subs	r3, r2, r3
 80135e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80135ea:	8912      	ldrh	r2, [r2, #8]
 80135ec:	4413      	add	r3, r2
 80135ee:	69ba      	ldr	r2, [r7, #24]
 80135f0:	429a      	cmp	r2, r3
 80135f2:	d227      	bcs.n	8013644 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 80135f4:	687b      	ldr	r3, [r7, #4]
 80135f6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80135fa:	461a      	mov	r2, r3
 80135fc:	69bb      	ldr	r3, [r7, #24]
 80135fe:	4293      	cmp	r3, r2
 8013600:	d114      	bne.n	801362c <tcp_output+0x120>
 8013602:	687b      	ldr	r3, [r7, #4]
 8013604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013606:	2b00      	cmp	r3, #0
 8013608:	d110      	bne.n	801362c <tcp_output+0x120>
 801360a:	687b      	ldr	r3, [r7, #4]
 801360c:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8013610:	2b00      	cmp	r3, #0
 8013612:	d10b      	bne.n	801362c <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8013614:	687b      	ldr	r3, [r7, #4]
 8013616:	2200      	movs	r2, #0
 8013618:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 801361c:	687b      	ldr	r3, [r7, #4]
 801361e:	2201      	movs	r2, #1
 8013620:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8013624:	687b      	ldr	r3, [r7, #4]
 8013626:	2200      	movs	r2, #0
 8013628:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 801362c:	687b      	ldr	r3, [r7, #4]
 801362e:	8b5b      	ldrh	r3, [r3, #26]
 8013630:	f003 0302 	and.w	r3, r3, #2
 8013634:	2b00      	cmp	r3, #0
 8013636:	f000 8150 	beq.w	80138da <tcp_output+0x3ce>
      return tcp_send_empty_ack(pcb);
 801363a:	6878      	ldr	r0, [r7, #4]
 801363c:	f000 fd9a 	bl	8014174 <tcp_send_empty_ack>
 8013640:	4603      	mov	r3, r0
 8013642:	e155      	b.n	80138f0 <tcp_output+0x3e4>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8013644:	687b      	ldr	r3, [r7, #4]
 8013646:	2200      	movs	r2, #0
 8013648:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801364c:	687b      	ldr	r3, [r7, #4]
 801364e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013650:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8013652:	6a3b      	ldr	r3, [r7, #32]
 8013654:	2b00      	cmp	r3, #0
 8013656:	f000 811f 	beq.w	8013898 <tcp_output+0x38c>
    for (; useg->next != NULL; useg = useg->next);
 801365a:	e002      	b.n	8013662 <tcp_output+0x156>
 801365c:	6a3b      	ldr	r3, [r7, #32]
 801365e:	681b      	ldr	r3, [r3, #0]
 8013660:	623b      	str	r3, [r7, #32]
 8013662:	6a3b      	ldr	r3, [r7, #32]
 8013664:	681b      	ldr	r3, [r3, #0]
 8013666:	2b00      	cmp	r3, #0
 8013668:	d1f8      	bne.n	801365c <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801366a:	e115      	b.n	8013898 <tcp_output+0x38c>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801366c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801366e:	691b      	ldr	r3, [r3, #16]
 8013670:	899b      	ldrh	r3, [r3, #12]
 8013672:	b29b      	uxth	r3, r3
 8013674:	4618      	mov	r0, r3
 8013676:	f7f9 fbe5 	bl	800ce44 <lwip_htons>
 801367a:	4603      	mov	r3, r0
 801367c:	b2db      	uxtb	r3, r3
 801367e:	f003 0304 	and.w	r3, r3, #4
 8013682:	2b00      	cmp	r3, #0
 8013684:	d006      	beq.n	8013694 <tcp_output+0x188>
 8013686:	4b2f      	ldr	r3, [pc, #188]	; (8013744 <tcp_output+0x238>)
 8013688:	f240 5236 	movw	r2, #1334	; 0x536
 801368c:	4932      	ldr	r1, [pc, #200]	; (8013758 <tcp_output+0x24c>)
 801368e:	482f      	ldr	r0, [pc, #188]	; (801374c <tcp_output+0x240>)
 8013690:	f006 fc36 	bl	8019f00 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8013694:	687b      	ldr	r3, [r7, #4]
 8013696:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013698:	2b00      	cmp	r3, #0
 801369a:	d01f      	beq.n	80136dc <tcp_output+0x1d0>
 801369c:	687b      	ldr	r3, [r7, #4]
 801369e:	8b5b      	ldrh	r3, [r3, #26]
 80136a0:	f003 0344 	and.w	r3, r3, #68	; 0x44
 80136a4:	2b00      	cmp	r3, #0
 80136a6:	d119      	bne.n	80136dc <tcp_output+0x1d0>
 80136a8:	687b      	ldr	r3, [r7, #4]
 80136aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80136ac:	2b00      	cmp	r3, #0
 80136ae:	d00b      	beq.n	80136c8 <tcp_output+0x1bc>
 80136b0:	687b      	ldr	r3, [r7, #4]
 80136b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80136b4:	681b      	ldr	r3, [r3, #0]
 80136b6:	2b00      	cmp	r3, #0
 80136b8:	d110      	bne.n	80136dc <tcp_output+0x1d0>
 80136ba:	687b      	ldr	r3, [r7, #4]
 80136bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80136be:	891a      	ldrh	r2, [r3, #8]
 80136c0:	687b      	ldr	r3, [r7, #4]
 80136c2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80136c4:	429a      	cmp	r2, r3
 80136c6:	d209      	bcs.n	80136dc <tcp_output+0x1d0>
 80136c8:	687b      	ldr	r3, [r7, #4]
 80136ca:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80136ce:	2b00      	cmp	r3, #0
 80136d0:	d004      	beq.n	80136dc <tcp_output+0x1d0>
 80136d2:	687b      	ldr	r3, [r7, #4]
 80136d4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80136d8:	2b0f      	cmp	r3, #15
 80136da:	d901      	bls.n	80136e0 <tcp_output+0x1d4>
 80136dc:	2301      	movs	r3, #1
 80136de:	e000      	b.n	80136e2 <tcp_output+0x1d6>
 80136e0:	2300      	movs	r3, #0
 80136e2:	2b00      	cmp	r3, #0
 80136e4:	d106      	bne.n	80136f4 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 80136e6:	687b      	ldr	r3, [r7, #4]
 80136e8:	8b5b      	ldrh	r3, [r3, #26]
 80136ea:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80136ee:	2b00      	cmp	r3, #0
 80136f0:	f000 80e7 	beq.w	80138c2 <tcp_output+0x3b6>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 80136f4:	687b      	ldr	r3, [r7, #4]
 80136f6:	7d1b      	ldrb	r3, [r3, #20]
 80136f8:	2b02      	cmp	r3, #2
 80136fa:	d00d      	beq.n	8013718 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80136fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136fe:	691b      	ldr	r3, [r3, #16]
 8013700:	899b      	ldrh	r3, [r3, #12]
 8013702:	b29c      	uxth	r4, r3
 8013704:	2010      	movs	r0, #16
 8013706:	f7f9 fb9d 	bl	800ce44 <lwip_htons>
 801370a:	4603      	mov	r3, r0
 801370c:	461a      	mov	r2, r3
 801370e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013710:	691b      	ldr	r3, [r3, #16]
 8013712:	4322      	orrs	r2, r4
 8013714:	b292      	uxth	r2, r2
 8013716:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8013718:	697a      	ldr	r2, [r7, #20]
 801371a:	6879      	ldr	r1, [r7, #4]
 801371c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801371e:	f000 f90b 	bl	8013938 <tcp_output_segment>
 8013722:	4603      	mov	r3, r0
 8013724:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8013726:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801372a:	2b00      	cmp	r3, #0
 801372c:	d016      	beq.n	801375c <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801372e:	687b      	ldr	r3, [r7, #4]
 8013730:	8b5b      	ldrh	r3, [r3, #26]
 8013732:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013736:	b29a      	uxth	r2, r3
 8013738:	687b      	ldr	r3, [r7, #4]
 801373a:	835a      	strh	r2, [r3, #26]
      return err;
 801373c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013740:	e0d6      	b.n	80138f0 <tcp_output+0x3e4>
 8013742:	bf00      	nop
 8013744:	0801d29c 	.word	0x0801d29c
 8013748:	0801d83c 	.word	0x0801d83c
 801374c:	0801d2f0 	.word	0x0801d2f0
 8013750:	0801d854 	.word	0x0801d854
 8013754:	20013b14 	.word	0x20013b14
 8013758:	0801d87c 	.word	0x0801d87c
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
 801375c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801375e:	2200      	movs	r2, #0
 8013760:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8013762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013764:	681a      	ldr	r2, [r3, #0]
 8013766:	687b      	ldr	r3, [r7, #4]
 8013768:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 801376a:	687b      	ldr	r3, [r7, #4]
 801376c:	7d1b      	ldrb	r3, [r3, #20]
 801376e:	2b02      	cmp	r3, #2
 8013770:	d006      	beq.n	8013780 <tcp_output+0x274>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013772:	687b      	ldr	r3, [r7, #4]
 8013774:	8b5b      	ldrh	r3, [r3, #26]
 8013776:	f023 0303 	bic.w	r3, r3, #3
 801377a:	b29a      	uxth	r2, r3
 801377c:	687b      	ldr	r3, [r7, #4]
 801377e:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8013780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013782:	691b      	ldr	r3, [r3, #16]
 8013784:	685b      	ldr	r3, [r3, #4]
 8013786:	4618      	mov	r0, r3
 8013788:	f7f9 fb71 	bl	800ce6e <lwip_htonl>
 801378c:	4604      	mov	r4, r0
 801378e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013790:	891b      	ldrh	r3, [r3, #8]
 8013792:	461d      	mov	r5, r3
 8013794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013796:	691b      	ldr	r3, [r3, #16]
 8013798:	899b      	ldrh	r3, [r3, #12]
 801379a:	b29b      	uxth	r3, r3
 801379c:	4618      	mov	r0, r3
 801379e:	f7f9 fb51 	bl	800ce44 <lwip_htons>
 80137a2:	4603      	mov	r3, r0
 80137a4:	b2db      	uxtb	r3, r3
 80137a6:	f003 0303 	and.w	r3, r3, #3
 80137aa:	2b00      	cmp	r3, #0
 80137ac:	d001      	beq.n	80137b2 <tcp_output+0x2a6>
 80137ae:	2301      	movs	r3, #1
 80137b0:	e000      	b.n	80137b4 <tcp_output+0x2a8>
 80137b2:	2300      	movs	r3, #0
 80137b4:	442b      	add	r3, r5
 80137b6:	4423      	add	r3, r4
 80137b8:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80137ba:	687b      	ldr	r3, [r7, #4]
 80137bc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80137be:	68bb      	ldr	r3, [r7, #8]
 80137c0:	1ad3      	subs	r3, r2, r3
 80137c2:	2b00      	cmp	r3, #0
 80137c4:	da02      	bge.n	80137cc <tcp_output+0x2c0>
      pcb->snd_nxt = snd_nxt;
 80137c6:	687b      	ldr	r3, [r7, #4]
 80137c8:	68ba      	ldr	r2, [r7, #8]
 80137ca:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 80137cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137ce:	891b      	ldrh	r3, [r3, #8]
 80137d0:	461c      	mov	r4, r3
 80137d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137d4:	691b      	ldr	r3, [r3, #16]
 80137d6:	899b      	ldrh	r3, [r3, #12]
 80137d8:	b29b      	uxth	r3, r3
 80137da:	4618      	mov	r0, r3
 80137dc:	f7f9 fb32 	bl	800ce44 <lwip_htons>
 80137e0:	4603      	mov	r3, r0
 80137e2:	b2db      	uxtb	r3, r3
 80137e4:	f003 0303 	and.w	r3, r3, #3
 80137e8:	2b00      	cmp	r3, #0
 80137ea:	d001      	beq.n	80137f0 <tcp_output+0x2e4>
 80137ec:	2301      	movs	r3, #1
 80137ee:	e000      	b.n	80137f2 <tcp_output+0x2e6>
 80137f0:	2300      	movs	r3, #0
 80137f2:	4423      	add	r3, r4
 80137f4:	2b00      	cmp	r3, #0
 80137f6:	d049      	beq.n	801388c <tcp_output+0x380>
      seg->next = NULL;
 80137f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137fa:	2200      	movs	r2, #0
 80137fc:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 80137fe:	687b      	ldr	r3, [r7, #4]
 8013800:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013802:	2b00      	cmp	r3, #0
 8013804:	d105      	bne.n	8013812 <tcp_output+0x306>
        pcb->unacked = seg;
 8013806:	687b      	ldr	r3, [r7, #4]
 8013808:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801380a:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 801380c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801380e:	623b      	str	r3, [r7, #32]
 8013810:	e03f      	b.n	8013892 <tcp_output+0x386>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8013812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013814:	691b      	ldr	r3, [r3, #16]
 8013816:	685b      	ldr	r3, [r3, #4]
 8013818:	4618      	mov	r0, r3
 801381a:	f7f9 fb28 	bl	800ce6e <lwip_htonl>
 801381e:	4604      	mov	r4, r0
 8013820:	6a3b      	ldr	r3, [r7, #32]
 8013822:	691b      	ldr	r3, [r3, #16]
 8013824:	685b      	ldr	r3, [r3, #4]
 8013826:	4618      	mov	r0, r3
 8013828:	f7f9 fb21 	bl	800ce6e <lwip_htonl>
 801382c:	4603      	mov	r3, r0
 801382e:	1ae3      	subs	r3, r4, r3
 8013830:	2b00      	cmp	r3, #0
 8013832:	da24      	bge.n	801387e <tcp_output+0x372>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8013834:	687b      	ldr	r3, [r7, #4]
 8013836:	3370      	adds	r3, #112	; 0x70
 8013838:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801383a:	e002      	b.n	8013842 <tcp_output+0x336>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801383c:	69fb      	ldr	r3, [r7, #28]
 801383e:	681b      	ldr	r3, [r3, #0]
 8013840:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8013842:	69fb      	ldr	r3, [r7, #28]
 8013844:	681b      	ldr	r3, [r3, #0]
 8013846:	2b00      	cmp	r3, #0
 8013848:	d011      	beq.n	801386e <tcp_output+0x362>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801384a:	69fb      	ldr	r3, [r7, #28]
 801384c:	681b      	ldr	r3, [r3, #0]
 801384e:	691b      	ldr	r3, [r3, #16]
 8013850:	685b      	ldr	r3, [r3, #4]
 8013852:	4618      	mov	r0, r3
 8013854:	f7f9 fb0b 	bl	800ce6e <lwip_htonl>
 8013858:	4604      	mov	r4, r0
 801385a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801385c:	691b      	ldr	r3, [r3, #16]
 801385e:	685b      	ldr	r3, [r3, #4]
 8013860:	4618      	mov	r0, r3
 8013862:	f7f9 fb04 	bl	800ce6e <lwip_htonl>
 8013866:	4603      	mov	r3, r0
 8013868:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 801386a:	2b00      	cmp	r3, #0
 801386c:	dbe6      	blt.n	801383c <tcp_output+0x330>
          }
          seg->next = (*cur_seg);
 801386e:	69fb      	ldr	r3, [r7, #28]
 8013870:	681a      	ldr	r2, [r3, #0]
 8013872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013874:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8013876:	69fb      	ldr	r3, [r7, #28]
 8013878:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801387a:	601a      	str	r2, [r3, #0]
 801387c:	e009      	b.n	8013892 <tcp_output+0x386>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 801387e:	6a3b      	ldr	r3, [r7, #32]
 8013880:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013882:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8013884:	6a3b      	ldr	r3, [r7, #32]
 8013886:	681b      	ldr	r3, [r3, #0]
 8013888:	623b      	str	r3, [r7, #32]
 801388a:	e002      	b.n	8013892 <tcp_output+0x386>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801388c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801388e:	f7fc fc22 	bl	80100d6 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8013892:	687b      	ldr	r3, [r7, #4]
 8013894:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013896:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8013898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801389a:	2b00      	cmp	r3, #0
 801389c:	d012      	beq.n	80138c4 <tcp_output+0x3b8>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 801389e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138a0:	691b      	ldr	r3, [r3, #16]
 80138a2:	685b      	ldr	r3, [r3, #4]
 80138a4:	4618      	mov	r0, r3
 80138a6:	f7f9 fae2 	bl	800ce6e <lwip_htonl>
 80138aa:	4602      	mov	r2, r0
 80138ac:	687b      	ldr	r3, [r7, #4]
 80138ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80138b0:	1ad3      	subs	r3, r2, r3
 80138b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80138b4:	8912      	ldrh	r2, [r2, #8]
 80138b6:	4413      	add	r3, r2
  while (seg != NULL &&
 80138b8:	69ba      	ldr	r2, [r7, #24]
 80138ba:	429a      	cmp	r2, r3
 80138bc:	f4bf aed6 	bcs.w	801366c <tcp_output+0x160>
 80138c0:	e000      	b.n	80138c4 <tcp_output+0x3b8>
      break;
 80138c2:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 80138c4:	687b      	ldr	r3, [r7, #4]
 80138c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80138c8:	2b00      	cmp	r3, #0
 80138ca:	d108      	bne.n	80138de <tcp_output+0x3d2>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80138cc:	687b      	ldr	r3, [r7, #4]
 80138ce:	2200      	movs	r2, #0
 80138d0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 80138d4:	e004      	b.n	80138e0 <tcp_output+0x3d4>
    goto output_done;
 80138d6:	bf00      	nop
 80138d8:	e002      	b.n	80138e0 <tcp_output+0x3d4>
    goto output_done;
 80138da:	bf00      	nop
 80138dc:	e000      	b.n	80138e0 <tcp_output+0x3d4>
  }
#endif /* TCP_OVERSIZE */

output_done:
 80138de:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 80138e0:	687b      	ldr	r3, [r7, #4]
 80138e2:	8b5b      	ldrh	r3, [r3, #26]
 80138e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80138e8:	b29a      	uxth	r2, r3
 80138ea:	687b      	ldr	r3, [r7, #4]
 80138ec:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 80138ee:	2300      	movs	r3, #0
}
 80138f0:	4618      	mov	r0, r3
 80138f2:	3728      	adds	r7, #40	; 0x28
 80138f4:	46bd      	mov	sp, r7
 80138f6:	bdb0      	pop	{r4, r5, r7, pc}

080138f8 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 80138f8:	b580      	push	{r7, lr}
 80138fa:	b082      	sub	sp, #8
 80138fc:	af00      	add	r7, sp, #0
 80138fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8013900:	687b      	ldr	r3, [r7, #4]
 8013902:	2b00      	cmp	r3, #0
 8013904:	d106      	bne.n	8013914 <tcp_output_segment_busy+0x1c>
 8013906:	4b09      	ldr	r3, [pc, #36]	; (801392c <tcp_output_segment_busy+0x34>)
 8013908:	f240 529a 	movw	r2, #1434	; 0x59a
 801390c:	4908      	ldr	r1, [pc, #32]	; (8013930 <tcp_output_segment_busy+0x38>)
 801390e:	4809      	ldr	r0, [pc, #36]	; (8013934 <tcp_output_segment_busy+0x3c>)
 8013910:	f006 faf6 	bl	8019f00 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8013914:	687b      	ldr	r3, [r7, #4]
 8013916:	685b      	ldr	r3, [r3, #4]
 8013918:	7b9b      	ldrb	r3, [r3, #14]
 801391a:	2b01      	cmp	r3, #1
 801391c:	d001      	beq.n	8013922 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801391e:	2301      	movs	r3, #1
 8013920:	e000      	b.n	8013924 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8013922:	2300      	movs	r3, #0
}
 8013924:	4618      	mov	r0, r3
 8013926:	3708      	adds	r7, #8
 8013928:	46bd      	mov	sp, r7
 801392a:	bd80      	pop	{r7, pc}
 801392c:	0801d29c 	.word	0x0801d29c
 8013930:	0801d894 	.word	0x0801d894
 8013934:	0801d2f0 	.word	0x0801d2f0

08013938 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8013938:	b5b0      	push	{r4, r5, r7, lr}
 801393a:	b08c      	sub	sp, #48	; 0x30
 801393c:	af04      	add	r7, sp, #16
 801393e:	60f8      	str	r0, [r7, #12]
 8013940:	60b9      	str	r1, [r7, #8]
 8013942:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8013944:	68fb      	ldr	r3, [r7, #12]
 8013946:	2b00      	cmp	r3, #0
 8013948:	d106      	bne.n	8013958 <tcp_output_segment+0x20>
 801394a:	4b6c      	ldr	r3, [pc, #432]	; (8013afc <tcp_output_segment+0x1c4>)
 801394c:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8013950:	496b      	ldr	r1, [pc, #428]	; (8013b00 <tcp_output_segment+0x1c8>)
 8013952:	486c      	ldr	r0, [pc, #432]	; (8013b04 <tcp_output_segment+0x1cc>)
 8013954:	f006 fad4 	bl	8019f00 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8013958:	68bb      	ldr	r3, [r7, #8]
 801395a:	2b00      	cmp	r3, #0
 801395c:	d106      	bne.n	801396c <tcp_output_segment+0x34>
 801395e:	4b67      	ldr	r3, [pc, #412]	; (8013afc <tcp_output_segment+0x1c4>)
 8013960:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8013964:	4968      	ldr	r1, [pc, #416]	; (8013b08 <tcp_output_segment+0x1d0>)
 8013966:	4867      	ldr	r0, [pc, #412]	; (8013b04 <tcp_output_segment+0x1cc>)
 8013968:	f006 faca 	bl	8019f00 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 801396c:	687b      	ldr	r3, [r7, #4]
 801396e:	2b00      	cmp	r3, #0
 8013970:	d106      	bne.n	8013980 <tcp_output_segment+0x48>
 8013972:	4b62      	ldr	r3, [pc, #392]	; (8013afc <tcp_output_segment+0x1c4>)
 8013974:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8013978:	4964      	ldr	r1, [pc, #400]	; (8013b0c <tcp_output_segment+0x1d4>)
 801397a:	4862      	ldr	r0, [pc, #392]	; (8013b04 <tcp_output_segment+0x1cc>)
 801397c:	f006 fac0 	bl	8019f00 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8013980:	68f8      	ldr	r0, [r7, #12]
 8013982:	f7ff ffb9 	bl	80138f8 <tcp_output_segment_busy>
 8013986:	4603      	mov	r3, r0
 8013988:	2b00      	cmp	r3, #0
 801398a:	d001      	beq.n	8013990 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 801398c:	2300      	movs	r3, #0
 801398e:	e0b1      	b.n	8013af4 <tcp_output_segment+0x1bc>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8013990:	68bb      	ldr	r3, [r7, #8]
 8013992:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013994:	68fb      	ldr	r3, [r7, #12]
 8013996:	691c      	ldr	r4, [r3, #16]
 8013998:	4610      	mov	r0, r2
 801399a:	f7f9 fa68 	bl	800ce6e <lwip_htonl>
 801399e:	4603      	mov	r3, r0
 80139a0:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80139a2:	68bb      	ldr	r3, [r7, #8]
 80139a4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80139a6:	68fb      	ldr	r3, [r7, #12]
 80139a8:	691c      	ldr	r4, [r3, #16]
 80139aa:	4610      	mov	r0, r2
 80139ac:	f7f9 fa4a 	bl	800ce44 <lwip_htons>
 80139b0:	4603      	mov	r3, r0
 80139b2:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80139b4:	68bb      	ldr	r3, [r7, #8]
 80139b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80139b8:	68ba      	ldr	r2, [r7, #8]
 80139ba:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80139bc:	441a      	add	r2, r3
 80139be:	68bb      	ldr	r3, [r7, #8]
 80139c0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 80139c2:	68fb      	ldr	r3, [r7, #12]
 80139c4:	691b      	ldr	r3, [r3, #16]
 80139c6:	3314      	adds	r3, #20
 80139c8:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 80139ca:	68fb      	ldr	r3, [r7, #12]
 80139cc:	7b1b      	ldrb	r3, [r3, #12]
 80139ce:	f003 0301 	and.w	r3, r3, #1
 80139d2:	2b00      	cmp	r3, #0
 80139d4:	d015      	beq.n	8013a02 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 80139d6:	68bb      	ldr	r3, [r7, #8]
 80139d8:	3304      	adds	r3, #4
 80139da:	461a      	mov	r2, r3
 80139dc:	6879      	ldr	r1, [r7, #4]
 80139de:	f240 50b4 	movw	r0, #1460	; 0x5b4
 80139e2:	f7fc fe6f 	bl	80106c4 <tcp_eff_send_mss_netif>
 80139e6:	4603      	mov	r3, r0
 80139e8:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 80139ea:	8b7b      	ldrh	r3, [r7, #26]
 80139ec:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 80139f0:	4618      	mov	r0, r3
 80139f2:	f7f9 fa3c 	bl	800ce6e <lwip_htonl>
 80139f6:	4602      	mov	r2, r0
 80139f8:	69fb      	ldr	r3, [r7, #28]
 80139fa:	601a      	str	r2, [r3, #0]
    opts += 1;
 80139fc:	69fb      	ldr	r3, [r7, #28]
 80139fe:	3304      	adds	r3, #4
 8013a00:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8013a02:	68bb      	ldr	r3, [r7, #8]
 8013a04:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8013a08:	2b00      	cmp	r3, #0
 8013a0a:	da02      	bge.n	8013a12 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8013a0c:	68bb      	ldr	r3, [r7, #8]
 8013a0e:	2200      	movs	r2, #0
 8013a10:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8013a12:	68bb      	ldr	r3, [r7, #8]
 8013a14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013a16:	2b00      	cmp	r3, #0
 8013a18:	d10c      	bne.n	8013a34 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8013a1a:	4b3d      	ldr	r3, [pc, #244]	; (8013b10 <tcp_output_segment+0x1d8>)
 8013a1c:	681a      	ldr	r2, [r3, #0]
 8013a1e:	68bb      	ldr	r3, [r7, #8]
 8013a20:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8013a22:	68fb      	ldr	r3, [r7, #12]
 8013a24:	691b      	ldr	r3, [r3, #16]
 8013a26:	685b      	ldr	r3, [r3, #4]
 8013a28:	4618      	mov	r0, r3
 8013a2a:	f7f9 fa20 	bl	800ce6e <lwip_htonl>
 8013a2e:	4602      	mov	r2, r0
 8013a30:	68bb      	ldr	r3, [r7, #8]
 8013a32:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8013a34:	68fb      	ldr	r3, [r7, #12]
 8013a36:	691a      	ldr	r2, [r3, #16]
 8013a38:	68fb      	ldr	r3, [r7, #12]
 8013a3a:	685b      	ldr	r3, [r3, #4]
 8013a3c:	685b      	ldr	r3, [r3, #4]
 8013a3e:	1ad3      	subs	r3, r2, r3
 8013a40:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8013a42:	68fb      	ldr	r3, [r7, #12]
 8013a44:	685b      	ldr	r3, [r3, #4]
 8013a46:	8959      	ldrh	r1, [r3, #10]
 8013a48:	68fb      	ldr	r3, [r7, #12]
 8013a4a:	685b      	ldr	r3, [r3, #4]
 8013a4c:	8b3a      	ldrh	r2, [r7, #24]
 8013a4e:	1a8a      	subs	r2, r1, r2
 8013a50:	b292      	uxth	r2, r2
 8013a52:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8013a54:	68fb      	ldr	r3, [r7, #12]
 8013a56:	685b      	ldr	r3, [r3, #4]
 8013a58:	8919      	ldrh	r1, [r3, #8]
 8013a5a:	68fb      	ldr	r3, [r7, #12]
 8013a5c:	685b      	ldr	r3, [r3, #4]
 8013a5e:	8b3a      	ldrh	r2, [r7, #24]
 8013a60:	1a8a      	subs	r2, r1, r2
 8013a62:	b292      	uxth	r2, r2
 8013a64:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8013a66:	68fb      	ldr	r3, [r7, #12]
 8013a68:	685b      	ldr	r3, [r3, #4]
 8013a6a:	68fa      	ldr	r2, [r7, #12]
 8013a6c:	6912      	ldr	r2, [r2, #16]
 8013a6e:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8013a70:	68fb      	ldr	r3, [r7, #12]
 8013a72:	691b      	ldr	r3, [r3, #16]
 8013a74:	2200      	movs	r2, #0
 8013a76:	741a      	strb	r2, [r3, #16]
 8013a78:	2200      	movs	r2, #0
 8013a7a:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8013a7c:	68fb      	ldr	r3, [r7, #12]
 8013a7e:	691b      	ldr	r3, [r3, #16]
 8013a80:	f103 0214 	add.w	r2, r3, #20
 8013a84:	68fb      	ldr	r3, [r7, #12]
 8013a86:	7b1b      	ldrb	r3, [r3, #12]
 8013a88:	009b      	lsls	r3, r3, #2
 8013a8a:	f003 0304 	and.w	r3, r3, #4
 8013a8e:	4413      	add	r3, r2
 8013a90:	69fa      	ldr	r2, [r7, #28]
 8013a92:	429a      	cmp	r2, r3
 8013a94:	d006      	beq.n	8013aa4 <tcp_output_segment+0x16c>
 8013a96:	4b19      	ldr	r3, [pc, #100]	; (8013afc <tcp_output_segment+0x1c4>)
 8013a98:	f240 621c 	movw	r2, #1564	; 0x61c
 8013a9c:	491d      	ldr	r1, [pc, #116]	; (8013b14 <tcp_output_segment+0x1dc>)
 8013a9e:	4819      	ldr	r0, [pc, #100]	; (8013b04 <tcp_output_segment+0x1cc>)
 8013aa0:	f006 fa2e 	bl	8019f00 <iprintf>
         seg->tcphdr->chksum, chksum_slow));
      seg->tcphdr->chksum = chksum_slow;
    }
#endif /* TCP_CHECKSUM_ON_COPY_SANITY_CHECK */
#else /* TCP_CHECKSUM_ON_COPY */
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 8013aa4:	68fb      	ldr	r3, [r7, #12]
 8013aa6:	6858      	ldr	r0, [r3, #4]
                                           seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
 8013aa8:	68fb      	ldr	r3, [r7, #12]
 8013aaa:	685b      	ldr	r3, [r3, #4]
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 8013aac:	8919      	ldrh	r1, [r3, #8]
                                           seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
 8013aae:	68bd      	ldr	r5, [r7, #8]
 8013ab0:	68bb      	ldr	r3, [r7, #8]
 8013ab2:	3304      	adds	r3, #4
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 8013ab4:	68fa      	ldr	r2, [r7, #12]
 8013ab6:	6914      	ldr	r4, [r2, #16]
 8013ab8:	9300      	str	r3, [sp, #0]
 8013aba:	462b      	mov	r3, r5
 8013abc:	460a      	mov	r2, r1
 8013abe:	2106      	movs	r1, #6
 8013ac0:	f7f9 faf2 	bl	800d0a8 <ip_chksum_pseudo>
 8013ac4:	4603      	mov	r3, r0
 8013ac6:	8223      	strh	r3, [r4, #16]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8013ac8:	68fb      	ldr	r3, [r7, #12]
 8013aca:	6858      	ldr	r0, [r3, #4]
 8013acc:	68b9      	ldr	r1, [r7, #8]
 8013ace:	68bb      	ldr	r3, [r7, #8]
 8013ad0:	1d1c      	adds	r4, r3, #4
 8013ad2:	68bb      	ldr	r3, [r7, #8]
 8013ad4:	7add      	ldrb	r5, [r3, #11]
 8013ad6:	68bb      	ldr	r3, [r7, #8]
 8013ad8:	7a9b      	ldrb	r3, [r3, #10]
 8013ada:	687a      	ldr	r2, [r7, #4]
 8013adc:	9202      	str	r2, [sp, #8]
 8013ade:	2206      	movs	r2, #6
 8013ae0:	9201      	str	r2, [sp, #4]
 8013ae2:	9300      	str	r3, [sp, #0]
 8013ae4:	462b      	mov	r3, r5
 8013ae6:	4622      	mov	r2, r4
 8013ae8:	f004 fde6 	bl	80186b8 <ip4_output_if>
 8013aec:	4603      	mov	r3, r0
 8013aee:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8013af0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013af4:	4618      	mov	r0, r3
 8013af6:	3720      	adds	r7, #32
 8013af8:	46bd      	mov	sp, r7
 8013afa:	bdb0      	pop	{r4, r5, r7, pc}
 8013afc:	0801d29c 	.word	0x0801d29c
 8013b00:	0801d8bc 	.word	0x0801d8bc
 8013b04:	0801d2f0 	.word	0x0801d2f0
 8013b08:	0801d8dc 	.word	0x0801d8dc
 8013b0c:	0801d8fc 	.word	0x0801d8fc
 8013b10:	20013ac4 	.word	0x20013ac4
 8013b14:	0801d920 	.word	0x0801d920

08013b18 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8013b18:	b5b0      	push	{r4, r5, r7, lr}
 8013b1a:	b084      	sub	sp, #16
 8013b1c:	af00      	add	r7, sp, #0
 8013b1e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8013b20:	687b      	ldr	r3, [r7, #4]
 8013b22:	2b00      	cmp	r3, #0
 8013b24:	d106      	bne.n	8013b34 <tcp_rexmit_rto_prepare+0x1c>
 8013b26:	4b36      	ldr	r3, [pc, #216]	; (8013c00 <tcp_rexmit_rto_prepare+0xe8>)
 8013b28:	f240 6263 	movw	r2, #1635	; 0x663
 8013b2c:	4935      	ldr	r1, [pc, #212]	; (8013c04 <tcp_rexmit_rto_prepare+0xec>)
 8013b2e:	4836      	ldr	r0, [pc, #216]	; (8013c08 <tcp_rexmit_rto_prepare+0xf0>)
 8013b30:	f006 f9e6 	bl	8019f00 <iprintf>

  if (pcb->unacked == NULL) {
 8013b34:	687b      	ldr	r3, [r7, #4]
 8013b36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013b38:	2b00      	cmp	r3, #0
 8013b3a:	d102      	bne.n	8013b42 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8013b3c:	f06f 0305 	mvn.w	r3, #5
 8013b40:	e059      	b.n	8013bf6 <tcp_rexmit_rto_prepare+0xde>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8013b42:	687b      	ldr	r3, [r7, #4]
 8013b44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013b46:	60fb      	str	r3, [r7, #12]
 8013b48:	e00b      	b.n	8013b62 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8013b4a:	68f8      	ldr	r0, [r7, #12]
 8013b4c:	f7ff fed4 	bl	80138f8 <tcp_output_segment_busy>
 8013b50:	4603      	mov	r3, r0
 8013b52:	2b00      	cmp	r3, #0
 8013b54:	d002      	beq.n	8013b5c <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8013b56:	f06f 0305 	mvn.w	r3, #5
 8013b5a:	e04c      	b.n	8013bf6 <tcp_rexmit_rto_prepare+0xde>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8013b5c:	68fb      	ldr	r3, [r7, #12]
 8013b5e:	681b      	ldr	r3, [r3, #0]
 8013b60:	60fb      	str	r3, [r7, #12]
 8013b62:	68fb      	ldr	r3, [r7, #12]
 8013b64:	681b      	ldr	r3, [r3, #0]
 8013b66:	2b00      	cmp	r3, #0
 8013b68:	d1ef      	bne.n	8013b4a <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8013b6a:	68f8      	ldr	r0, [r7, #12]
 8013b6c:	f7ff fec4 	bl	80138f8 <tcp_output_segment_busy>
 8013b70:	4603      	mov	r3, r0
 8013b72:	2b00      	cmp	r3, #0
 8013b74:	d002      	beq.n	8013b7c <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8013b76:	f06f 0305 	mvn.w	r3, #5
 8013b7a:	e03c      	b.n	8013bf6 <tcp_rexmit_rto_prepare+0xde>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8013b7c:	687b      	ldr	r3, [r7, #4]
 8013b7e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8013b80:	68fb      	ldr	r3, [r7, #12]
 8013b82:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE_DBGCHECK
  /* if last unsent changed, we need to update unsent_oversize */
  if (pcb->unsent == NULL) {
 8013b84:	687b      	ldr	r3, [r7, #4]
 8013b86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013b88:	2b00      	cmp	r3, #0
 8013b8a:	d104      	bne.n	8013b96 <tcp_rexmit_rto_prepare+0x7e>
    pcb->unsent_oversize = seg->oversize_left;
 8013b8c:	68fb      	ldr	r3, [r7, #12]
 8013b8e:	895a      	ldrh	r2, [r3, #10]
 8013b90:	687b      	ldr	r3, [r7, #4]
 8013b92:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8013b96:	687b      	ldr	r3, [r7, #4]
 8013b98:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8013b9a:	687b      	ldr	r3, [r7, #4]
 8013b9c:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8013b9e:	687b      	ldr	r3, [r7, #4]
 8013ba0:	2200      	movs	r2, #0
 8013ba2:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8013ba4:	687b      	ldr	r3, [r7, #4]
 8013ba6:	8b5b      	ldrh	r3, [r3, #26]
 8013ba8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8013bac:	b29a      	uxth	r2, r3
 8013bae:	687b      	ldr	r3, [r7, #4]
 8013bb0:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8013bb2:	68fb      	ldr	r3, [r7, #12]
 8013bb4:	691b      	ldr	r3, [r3, #16]
 8013bb6:	685b      	ldr	r3, [r3, #4]
 8013bb8:	4618      	mov	r0, r3
 8013bba:	f7f9 f958 	bl	800ce6e <lwip_htonl>
 8013bbe:	4604      	mov	r4, r0
 8013bc0:	68fb      	ldr	r3, [r7, #12]
 8013bc2:	891b      	ldrh	r3, [r3, #8]
 8013bc4:	461d      	mov	r5, r3
 8013bc6:	68fb      	ldr	r3, [r7, #12]
 8013bc8:	691b      	ldr	r3, [r3, #16]
 8013bca:	899b      	ldrh	r3, [r3, #12]
 8013bcc:	b29b      	uxth	r3, r3
 8013bce:	4618      	mov	r0, r3
 8013bd0:	f7f9 f938 	bl	800ce44 <lwip_htons>
 8013bd4:	4603      	mov	r3, r0
 8013bd6:	b2db      	uxtb	r3, r3
 8013bd8:	f003 0303 	and.w	r3, r3, #3
 8013bdc:	2b00      	cmp	r3, #0
 8013bde:	d001      	beq.n	8013be4 <tcp_rexmit_rto_prepare+0xcc>
 8013be0:	2301      	movs	r3, #1
 8013be2:	e000      	b.n	8013be6 <tcp_rexmit_rto_prepare+0xce>
 8013be4:	2300      	movs	r3, #0
 8013be6:	442b      	add	r3, r5
 8013be8:	18e2      	adds	r2, r4, r3
 8013bea:	687b      	ldr	r3, [r7, #4]
 8013bec:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8013bee:	687b      	ldr	r3, [r7, #4]
 8013bf0:	2200      	movs	r2, #0
 8013bf2:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8013bf4:	2300      	movs	r3, #0
}
 8013bf6:	4618      	mov	r0, r3
 8013bf8:	3710      	adds	r7, #16
 8013bfa:	46bd      	mov	sp, r7
 8013bfc:	bdb0      	pop	{r4, r5, r7, pc}
 8013bfe:	bf00      	nop
 8013c00:	0801d29c 	.word	0x0801d29c
 8013c04:	0801d934 	.word	0x0801d934
 8013c08:	0801d2f0 	.word	0x0801d2f0

08013c0c <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8013c0c:	b580      	push	{r7, lr}
 8013c0e:	b082      	sub	sp, #8
 8013c10:	af00      	add	r7, sp, #0
 8013c12:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8013c14:	687b      	ldr	r3, [r7, #4]
 8013c16:	2b00      	cmp	r3, #0
 8013c18:	d106      	bne.n	8013c28 <tcp_rexmit_rto_commit+0x1c>
 8013c1a:	4b0d      	ldr	r3, [pc, #52]	; (8013c50 <tcp_rexmit_rto_commit+0x44>)
 8013c1c:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8013c20:	490c      	ldr	r1, [pc, #48]	; (8013c54 <tcp_rexmit_rto_commit+0x48>)
 8013c22:	480d      	ldr	r0, [pc, #52]	; (8013c58 <tcp_rexmit_rto_commit+0x4c>)
 8013c24:	f006 f96c 	bl	8019f00 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8013c28:	687b      	ldr	r3, [r7, #4]
 8013c2a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013c2e:	2bff      	cmp	r3, #255	; 0xff
 8013c30:	d007      	beq.n	8013c42 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8013c32:	687b      	ldr	r3, [r7, #4]
 8013c34:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013c38:	3301      	adds	r3, #1
 8013c3a:	b2da      	uxtb	r2, r3
 8013c3c:	687b      	ldr	r3, [r7, #4]
 8013c3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8013c42:	6878      	ldr	r0, [r7, #4]
 8013c44:	f7ff fc62 	bl	801350c <tcp_output>
}
 8013c48:	bf00      	nop
 8013c4a:	3708      	adds	r7, #8
 8013c4c:	46bd      	mov	sp, r7
 8013c4e:	bd80      	pop	{r7, pc}
 8013c50:	0801d29c 	.word	0x0801d29c
 8013c54:	0801d958 	.word	0x0801d958
 8013c58:	0801d2f0 	.word	0x0801d2f0

08013c5c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8013c5c:	b580      	push	{r7, lr}
 8013c5e:	b082      	sub	sp, #8
 8013c60:	af00      	add	r7, sp, #0
 8013c62:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8013c64:	687b      	ldr	r3, [r7, #4]
 8013c66:	2b00      	cmp	r3, #0
 8013c68:	d106      	bne.n	8013c78 <tcp_rexmit_rto+0x1c>
 8013c6a:	4b0a      	ldr	r3, [pc, #40]	; (8013c94 <tcp_rexmit_rto+0x38>)
 8013c6c:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8013c70:	4909      	ldr	r1, [pc, #36]	; (8013c98 <tcp_rexmit_rto+0x3c>)
 8013c72:	480a      	ldr	r0, [pc, #40]	; (8013c9c <tcp_rexmit_rto+0x40>)
 8013c74:	f006 f944 	bl	8019f00 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8013c78:	6878      	ldr	r0, [r7, #4]
 8013c7a:	f7ff ff4d 	bl	8013b18 <tcp_rexmit_rto_prepare>
 8013c7e:	4603      	mov	r3, r0
 8013c80:	2b00      	cmp	r3, #0
 8013c82:	d102      	bne.n	8013c8a <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8013c84:	6878      	ldr	r0, [r7, #4]
 8013c86:	f7ff ffc1 	bl	8013c0c <tcp_rexmit_rto_commit>
  }
}
 8013c8a:	bf00      	nop
 8013c8c:	3708      	adds	r7, #8
 8013c8e:	46bd      	mov	sp, r7
 8013c90:	bd80      	pop	{r7, pc}
 8013c92:	bf00      	nop
 8013c94:	0801d29c 	.word	0x0801d29c
 8013c98:	0801d97c 	.word	0x0801d97c
 8013c9c:	0801d2f0 	.word	0x0801d2f0

08013ca0 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8013ca0:	b590      	push	{r4, r7, lr}
 8013ca2:	b085      	sub	sp, #20
 8013ca4:	af00      	add	r7, sp, #0
 8013ca6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8013ca8:	687b      	ldr	r3, [r7, #4]
 8013caa:	2b00      	cmp	r3, #0
 8013cac:	d106      	bne.n	8013cbc <tcp_rexmit+0x1c>
 8013cae:	4b2f      	ldr	r3, [pc, #188]	; (8013d6c <tcp_rexmit+0xcc>)
 8013cb0:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8013cb4:	492e      	ldr	r1, [pc, #184]	; (8013d70 <tcp_rexmit+0xd0>)
 8013cb6:	482f      	ldr	r0, [pc, #188]	; (8013d74 <tcp_rexmit+0xd4>)
 8013cb8:	f006 f922 	bl	8019f00 <iprintf>

  if (pcb->unacked == NULL) {
 8013cbc:	687b      	ldr	r3, [r7, #4]
 8013cbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013cc0:	2b00      	cmp	r3, #0
 8013cc2:	d102      	bne.n	8013cca <tcp_rexmit+0x2a>
    return ERR_VAL;
 8013cc4:	f06f 0305 	mvn.w	r3, #5
 8013cc8:	e04c      	b.n	8013d64 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8013cca:	687b      	ldr	r3, [r7, #4]
 8013ccc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013cce:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8013cd0:	68b8      	ldr	r0, [r7, #8]
 8013cd2:	f7ff fe11 	bl	80138f8 <tcp_output_segment_busy>
 8013cd6:	4603      	mov	r3, r0
 8013cd8:	2b00      	cmp	r3, #0
 8013cda:	d002      	beq.n	8013ce2 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8013cdc:	f06f 0305 	mvn.w	r3, #5
 8013ce0:	e040      	b.n	8013d64 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8013ce2:	68bb      	ldr	r3, [r7, #8]
 8013ce4:	681a      	ldr	r2, [r3, #0]
 8013ce6:	687b      	ldr	r3, [r7, #4]
 8013ce8:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8013cea:	687b      	ldr	r3, [r7, #4]
 8013cec:	336c      	adds	r3, #108	; 0x6c
 8013cee:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8013cf0:	e002      	b.n	8013cf8 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8013cf2:	68fb      	ldr	r3, [r7, #12]
 8013cf4:	681b      	ldr	r3, [r3, #0]
 8013cf6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8013cf8:	68fb      	ldr	r3, [r7, #12]
 8013cfa:	681b      	ldr	r3, [r3, #0]
 8013cfc:	2b00      	cmp	r3, #0
 8013cfe:	d011      	beq.n	8013d24 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8013d00:	68fb      	ldr	r3, [r7, #12]
 8013d02:	681b      	ldr	r3, [r3, #0]
 8013d04:	691b      	ldr	r3, [r3, #16]
 8013d06:	685b      	ldr	r3, [r3, #4]
 8013d08:	4618      	mov	r0, r3
 8013d0a:	f7f9 f8b0 	bl	800ce6e <lwip_htonl>
 8013d0e:	4604      	mov	r4, r0
 8013d10:	68bb      	ldr	r3, [r7, #8]
 8013d12:	691b      	ldr	r3, [r3, #16]
 8013d14:	685b      	ldr	r3, [r3, #4]
 8013d16:	4618      	mov	r0, r3
 8013d18:	f7f9 f8a9 	bl	800ce6e <lwip_htonl>
 8013d1c:	4603      	mov	r3, r0
 8013d1e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8013d20:	2b00      	cmp	r3, #0
 8013d22:	dbe6      	blt.n	8013cf2 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8013d24:	68fb      	ldr	r3, [r7, #12]
 8013d26:	681a      	ldr	r2, [r3, #0]
 8013d28:	68bb      	ldr	r3, [r7, #8]
 8013d2a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8013d2c:	68fb      	ldr	r3, [r7, #12]
 8013d2e:	68ba      	ldr	r2, [r7, #8]
 8013d30:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8013d32:	68bb      	ldr	r3, [r7, #8]
 8013d34:	681b      	ldr	r3, [r3, #0]
 8013d36:	2b00      	cmp	r3, #0
 8013d38:	d103      	bne.n	8013d42 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8013d3a:	687b      	ldr	r3, [r7, #4]
 8013d3c:	2200      	movs	r2, #0
 8013d3e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8013d42:	687b      	ldr	r3, [r7, #4]
 8013d44:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013d48:	2bff      	cmp	r3, #255	; 0xff
 8013d4a:	d007      	beq.n	8013d5c <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8013d4c:	687b      	ldr	r3, [r7, #4]
 8013d4e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013d52:	3301      	adds	r3, #1
 8013d54:	b2da      	uxtb	r2, r3
 8013d56:	687b      	ldr	r3, [r7, #4]
 8013d58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8013d5c:	687b      	ldr	r3, [r7, #4]
 8013d5e:	2200      	movs	r2, #0
 8013d60:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8013d62:	2300      	movs	r3, #0
}
 8013d64:	4618      	mov	r0, r3
 8013d66:	3714      	adds	r7, #20
 8013d68:	46bd      	mov	sp, r7
 8013d6a:	bd90      	pop	{r4, r7, pc}
 8013d6c:	0801d29c 	.word	0x0801d29c
 8013d70:	0801d998 	.word	0x0801d998
 8013d74:	0801d2f0 	.word	0x0801d2f0

08013d78 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8013d78:	b580      	push	{r7, lr}
 8013d7a:	b082      	sub	sp, #8
 8013d7c:	af00      	add	r7, sp, #0
 8013d7e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8013d80:	687b      	ldr	r3, [r7, #4]
 8013d82:	2b00      	cmp	r3, #0
 8013d84:	d106      	bne.n	8013d94 <tcp_rexmit_fast+0x1c>
 8013d86:	4b2a      	ldr	r3, [pc, #168]	; (8013e30 <tcp_rexmit_fast+0xb8>)
 8013d88:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8013d8c:	4929      	ldr	r1, [pc, #164]	; (8013e34 <tcp_rexmit_fast+0xbc>)
 8013d8e:	482a      	ldr	r0, [pc, #168]	; (8013e38 <tcp_rexmit_fast+0xc0>)
 8013d90:	f006 f8b6 	bl	8019f00 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8013d94:	687b      	ldr	r3, [r7, #4]
 8013d96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013d98:	2b00      	cmp	r3, #0
 8013d9a:	d044      	beq.n	8013e26 <tcp_rexmit_fast+0xae>
 8013d9c:	687b      	ldr	r3, [r7, #4]
 8013d9e:	8b5b      	ldrh	r3, [r3, #26]
 8013da0:	f003 0304 	and.w	r3, r3, #4
 8013da4:	2b00      	cmp	r3, #0
 8013da6:	d13e      	bne.n	8013e26 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8013da8:	6878      	ldr	r0, [r7, #4]
 8013daa:	f7ff ff79 	bl	8013ca0 <tcp_rexmit>
 8013dae:	4603      	mov	r3, r0
 8013db0:	2b00      	cmp	r3, #0
 8013db2:	d138      	bne.n	8013e26 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8013db4:	687b      	ldr	r3, [r7, #4]
 8013db6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8013dba:	687b      	ldr	r3, [r7, #4]
 8013dbc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013dc0:	4293      	cmp	r3, r2
 8013dc2:	bf28      	it	cs
 8013dc4:	4613      	movcs	r3, r2
 8013dc6:	b29b      	uxth	r3, r3
 8013dc8:	0fda      	lsrs	r2, r3, #31
 8013dca:	4413      	add	r3, r2
 8013dcc:	105b      	asrs	r3, r3, #1
 8013dce:	b29a      	uxth	r2, r3
 8013dd0:	687b      	ldr	r3, [r7, #4]
 8013dd2:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8013dd6:	687b      	ldr	r3, [r7, #4]
 8013dd8:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8013ddc:	461a      	mov	r2, r3
 8013dde:	687b      	ldr	r3, [r7, #4]
 8013de0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013de2:	005b      	lsls	r3, r3, #1
 8013de4:	429a      	cmp	r2, r3
 8013de6:	d206      	bcs.n	8013df6 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8013de8:	687b      	ldr	r3, [r7, #4]
 8013dea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013dec:	005b      	lsls	r3, r3, #1
 8013dee:	b29a      	uxth	r2, r3
 8013df0:	687b      	ldr	r3, [r7, #4]
 8013df2:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8013df6:	687b      	ldr	r3, [r7, #4]
 8013df8:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8013dfc:	687b      	ldr	r3, [r7, #4]
 8013dfe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013e00:	4619      	mov	r1, r3
 8013e02:	0049      	lsls	r1, r1, #1
 8013e04:	440b      	add	r3, r1
 8013e06:	b29b      	uxth	r3, r3
 8013e08:	4413      	add	r3, r2
 8013e0a:	b29a      	uxth	r2, r3
 8013e0c:	687b      	ldr	r3, [r7, #4]
 8013e0e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8013e12:	687b      	ldr	r3, [r7, #4]
 8013e14:	8b5b      	ldrh	r3, [r3, #26]
 8013e16:	f043 0304 	orr.w	r3, r3, #4
 8013e1a:	b29a      	uxth	r2, r3
 8013e1c:	687b      	ldr	r3, [r7, #4]
 8013e1e:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8013e20:	687b      	ldr	r3, [r7, #4]
 8013e22:	2200      	movs	r2, #0
 8013e24:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8013e26:	bf00      	nop
 8013e28:	3708      	adds	r7, #8
 8013e2a:	46bd      	mov	sp, r7
 8013e2c:	bd80      	pop	{r7, pc}
 8013e2e:	bf00      	nop
 8013e30:	0801d29c 	.word	0x0801d29c
 8013e34:	0801d9b0 	.word	0x0801d9b0
 8013e38:	0801d2f0 	.word	0x0801d2f0

08013e3c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8013e3c:	b580      	push	{r7, lr}
 8013e3e:	b086      	sub	sp, #24
 8013e40:	af00      	add	r7, sp, #0
 8013e42:	60f8      	str	r0, [r7, #12]
 8013e44:	607b      	str	r3, [r7, #4]
 8013e46:	460b      	mov	r3, r1
 8013e48:	817b      	strh	r3, [r7, #10]
 8013e4a:	4613      	mov	r3, r2
 8013e4c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8013e4e:	897a      	ldrh	r2, [r7, #10]
 8013e50:	893b      	ldrh	r3, [r7, #8]
 8013e52:	4413      	add	r3, r2
 8013e54:	b29b      	uxth	r3, r3
 8013e56:	3314      	adds	r3, #20
 8013e58:	b29b      	uxth	r3, r3
 8013e5a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013e5e:	4619      	mov	r1, r3
 8013e60:	2022      	movs	r0, #34	; 0x22
 8013e62:	f7fa fa29 	bl	800e2b8 <pbuf_alloc>
 8013e66:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8013e68:	697b      	ldr	r3, [r7, #20]
 8013e6a:	2b00      	cmp	r3, #0
 8013e6c:	d04d      	beq.n	8013f0a <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8013e6e:	897b      	ldrh	r3, [r7, #10]
 8013e70:	3313      	adds	r3, #19
 8013e72:	697a      	ldr	r2, [r7, #20]
 8013e74:	8952      	ldrh	r2, [r2, #10]
 8013e76:	4293      	cmp	r3, r2
 8013e78:	db06      	blt.n	8013e88 <tcp_output_alloc_header_common+0x4c>
 8013e7a:	4b26      	ldr	r3, [pc, #152]	; (8013f14 <tcp_output_alloc_header_common+0xd8>)
 8013e7c:	f240 7223 	movw	r2, #1827	; 0x723
 8013e80:	4925      	ldr	r1, [pc, #148]	; (8013f18 <tcp_output_alloc_header_common+0xdc>)
 8013e82:	4826      	ldr	r0, [pc, #152]	; (8013f1c <tcp_output_alloc_header_common+0xe0>)
 8013e84:	f006 f83c 	bl	8019f00 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8013e88:	697b      	ldr	r3, [r7, #20]
 8013e8a:	685b      	ldr	r3, [r3, #4]
 8013e8c:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8013e8e:	8c3b      	ldrh	r3, [r7, #32]
 8013e90:	4618      	mov	r0, r3
 8013e92:	f7f8 ffd7 	bl	800ce44 <lwip_htons>
 8013e96:	4603      	mov	r3, r0
 8013e98:	461a      	mov	r2, r3
 8013e9a:	693b      	ldr	r3, [r7, #16]
 8013e9c:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8013e9e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013ea0:	4618      	mov	r0, r3
 8013ea2:	f7f8 ffcf 	bl	800ce44 <lwip_htons>
 8013ea6:	4603      	mov	r3, r0
 8013ea8:	461a      	mov	r2, r3
 8013eaa:	693b      	ldr	r3, [r7, #16]
 8013eac:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8013eae:	693b      	ldr	r3, [r7, #16]
 8013eb0:	687a      	ldr	r2, [r7, #4]
 8013eb2:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8013eb4:	68f8      	ldr	r0, [r7, #12]
 8013eb6:	f7f8 ffda 	bl	800ce6e <lwip_htonl>
 8013eba:	4602      	mov	r2, r0
 8013ebc:	693b      	ldr	r3, [r7, #16]
 8013ebe:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8013ec0:	897b      	ldrh	r3, [r7, #10]
 8013ec2:	089b      	lsrs	r3, r3, #2
 8013ec4:	b29b      	uxth	r3, r3
 8013ec6:	3305      	adds	r3, #5
 8013ec8:	b29b      	uxth	r3, r3
 8013eca:	031b      	lsls	r3, r3, #12
 8013ecc:	b29a      	uxth	r2, r3
 8013ece:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8013ed2:	b29b      	uxth	r3, r3
 8013ed4:	4313      	orrs	r3, r2
 8013ed6:	b29b      	uxth	r3, r3
 8013ed8:	4618      	mov	r0, r3
 8013eda:	f7f8 ffb3 	bl	800ce44 <lwip_htons>
 8013ede:	4603      	mov	r3, r0
 8013ee0:	461a      	mov	r2, r3
 8013ee2:	693b      	ldr	r3, [r7, #16]
 8013ee4:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8013ee6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8013ee8:	4618      	mov	r0, r3
 8013eea:	f7f8 ffab 	bl	800ce44 <lwip_htons>
 8013eee:	4603      	mov	r3, r0
 8013ef0:	461a      	mov	r2, r3
 8013ef2:	693b      	ldr	r3, [r7, #16]
 8013ef4:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8013ef6:	693b      	ldr	r3, [r7, #16]
 8013ef8:	2200      	movs	r2, #0
 8013efa:	741a      	strb	r2, [r3, #16]
 8013efc:	2200      	movs	r2, #0
 8013efe:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8013f00:	693b      	ldr	r3, [r7, #16]
 8013f02:	2200      	movs	r2, #0
 8013f04:	749a      	strb	r2, [r3, #18]
 8013f06:	2200      	movs	r2, #0
 8013f08:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8013f0a:	697b      	ldr	r3, [r7, #20]
}
 8013f0c:	4618      	mov	r0, r3
 8013f0e:	3718      	adds	r7, #24
 8013f10:	46bd      	mov	sp, r7
 8013f12:	bd80      	pop	{r7, pc}
 8013f14:	0801d29c 	.word	0x0801d29c
 8013f18:	0801d9d0 	.word	0x0801d9d0
 8013f1c:	0801d2f0 	.word	0x0801d2f0

08013f20 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8013f20:	b5b0      	push	{r4, r5, r7, lr}
 8013f22:	b08a      	sub	sp, #40	; 0x28
 8013f24:	af04      	add	r7, sp, #16
 8013f26:	60f8      	str	r0, [r7, #12]
 8013f28:	607b      	str	r3, [r7, #4]
 8013f2a:	460b      	mov	r3, r1
 8013f2c:	817b      	strh	r3, [r7, #10]
 8013f2e:	4613      	mov	r3, r2
 8013f30:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8013f32:	68fb      	ldr	r3, [r7, #12]
 8013f34:	2b00      	cmp	r3, #0
 8013f36:	d106      	bne.n	8013f46 <tcp_output_alloc_header+0x26>
 8013f38:	4b15      	ldr	r3, [pc, #84]	; (8013f90 <tcp_output_alloc_header+0x70>)
 8013f3a:	f240 7242 	movw	r2, #1858	; 0x742
 8013f3e:	4915      	ldr	r1, [pc, #84]	; (8013f94 <tcp_output_alloc_header+0x74>)
 8013f40:	4815      	ldr	r0, [pc, #84]	; (8013f98 <tcp_output_alloc_header+0x78>)
 8013f42:	f005 ffdd 	bl	8019f00 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8013f46:	68fb      	ldr	r3, [r7, #12]
 8013f48:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8013f4a:	68fb      	ldr	r3, [r7, #12]
 8013f4c:	8adb      	ldrh	r3, [r3, #22]
 8013f4e:	68fa      	ldr	r2, [r7, #12]
 8013f50:	8b12      	ldrh	r2, [r2, #24]
 8013f52:	68f9      	ldr	r1, [r7, #12]
 8013f54:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8013f56:	893d      	ldrh	r5, [r7, #8]
 8013f58:	897c      	ldrh	r4, [r7, #10]
 8013f5a:	9103      	str	r1, [sp, #12]
 8013f5c:	2110      	movs	r1, #16
 8013f5e:	9102      	str	r1, [sp, #8]
 8013f60:	9201      	str	r2, [sp, #4]
 8013f62:	9300      	str	r3, [sp, #0]
 8013f64:	687b      	ldr	r3, [r7, #4]
 8013f66:	462a      	mov	r2, r5
 8013f68:	4621      	mov	r1, r4
 8013f6a:	f7ff ff67 	bl	8013e3c <tcp_output_alloc_header_common>
 8013f6e:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8013f70:	697b      	ldr	r3, [r7, #20]
 8013f72:	2b00      	cmp	r3, #0
 8013f74:	d006      	beq.n	8013f84 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8013f76:	68fb      	ldr	r3, [r7, #12]
 8013f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013f7a:	68fa      	ldr	r2, [r7, #12]
 8013f7c:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8013f7e:	441a      	add	r2, r3
 8013f80:	68fb      	ldr	r3, [r7, #12]
 8013f82:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8013f84:	697b      	ldr	r3, [r7, #20]
}
 8013f86:	4618      	mov	r0, r3
 8013f88:	3718      	adds	r7, #24
 8013f8a:	46bd      	mov	sp, r7
 8013f8c:	bdb0      	pop	{r4, r5, r7, pc}
 8013f8e:	bf00      	nop
 8013f90:	0801d29c 	.word	0x0801d29c
 8013f94:	0801da00 	.word	0x0801da00
 8013f98:	0801d2f0 	.word	0x0801d2f0

08013f9c <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8013f9c:	b580      	push	{r7, lr}
 8013f9e:	b088      	sub	sp, #32
 8013fa0:	af00      	add	r7, sp, #0
 8013fa2:	60f8      	str	r0, [r7, #12]
 8013fa4:	60b9      	str	r1, [r7, #8]
 8013fa6:	4611      	mov	r1, r2
 8013fa8:	461a      	mov	r2, r3
 8013faa:	460b      	mov	r3, r1
 8013fac:	71fb      	strb	r3, [r7, #7]
 8013fae:	4613      	mov	r3, r2
 8013fb0:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8013fb2:	2300      	movs	r3, #0
 8013fb4:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8013fb6:	68bb      	ldr	r3, [r7, #8]
 8013fb8:	2b00      	cmp	r3, #0
 8013fba:	d106      	bne.n	8013fca <tcp_output_fill_options+0x2e>
 8013fbc:	4b13      	ldr	r3, [pc, #76]	; (801400c <tcp_output_fill_options+0x70>)
 8013fbe:	f240 7256 	movw	r2, #1878	; 0x756
 8013fc2:	4913      	ldr	r1, [pc, #76]	; (8014010 <tcp_output_fill_options+0x74>)
 8013fc4:	4813      	ldr	r0, [pc, #76]	; (8014014 <tcp_output_fill_options+0x78>)
 8013fc6:	f005 ff9b 	bl	8019f00 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8013fca:	68bb      	ldr	r3, [r7, #8]
 8013fcc:	685b      	ldr	r3, [r3, #4]
 8013fce:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8013fd0:	69bb      	ldr	r3, [r7, #24]
 8013fd2:	3314      	adds	r3, #20
 8013fd4:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8013fd6:	69bb      	ldr	r3, [r7, #24]
 8013fd8:	f103 0214 	add.w	r2, r3, #20
 8013fdc:	8bfb      	ldrh	r3, [r7, #30]
 8013fde:	009b      	lsls	r3, r3, #2
 8013fe0:	4619      	mov	r1, r3
 8013fe2:	79fb      	ldrb	r3, [r7, #7]
 8013fe4:	009b      	lsls	r3, r3, #2
 8013fe6:	f003 0304 	and.w	r3, r3, #4
 8013fea:	440b      	add	r3, r1
 8013fec:	4413      	add	r3, r2
 8013fee:	697a      	ldr	r2, [r7, #20]
 8013ff0:	429a      	cmp	r2, r3
 8013ff2:	d006      	beq.n	8014002 <tcp_output_fill_options+0x66>
 8013ff4:	4b05      	ldr	r3, [pc, #20]	; (801400c <tcp_output_fill_options+0x70>)
 8013ff6:	f240 7275 	movw	r2, #1909	; 0x775
 8013ffa:	4907      	ldr	r1, [pc, #28]	; (8014018 <tcp_output_fill_options+0x7c>)
 8013ffc:	4805      	ldr	r0, [pc, #20]	; (8014014 <tcp_output_fill_options+0x78>)
 8013ffe:	f005 ff7f 	bl	8019f00 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8014002:	bf00      	nop
 8014004:	3720      	adds	r7, #32
 8014006:	46bd      	mov	sp, r7
 8014008:	bd80      	pop	{r7, pc}
 801400a:	bf00      	nop
 801400c:	0801d29c 	.word	0x0801d29c
 8014010:	0801da28 	.word	0x0801da28
 8014014:	0801d2f0 	.word	0x0801d2f0
 8014018:	0801d920 	.word	0x0801d920

0801401c <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 801401c:	b580      	push	{r7, lr}
 801401e:	b08c      	sub	sp, #48	; 0x30
 8014020:	af04      	add	r7, sp, #16
 8014022:	60f8      	str	r0, [r7, #12]
 8014024:	60b9      	str	r1, [r7, #8]
 8014026:	607a      	str	r2, [r7, #4]
 8014028:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801402a:	68bb      	ldr	r3, [r7, #8]
 801402c:	2b00      	cmp	r3, #0
 801402e:	d106      	bne.n	801403e <tcp_output_control_segment+0x22>
 8014030:	4b24      	ldr	r3, [pc, #144]	; (80140c4 <tcp_output_control_segment+0xa8>)
 8014032:	f240 7287 	movw	r2, #1927	; 0x787
 8014036:	4924      	ldr	r1, [pc, #144]	; (80140c8 <tcp_output_control_segment+0xac>)
 8014038:	4824      	ldr	r0, [pc, #144]	; (80140cc <tcp_output_control_segment+0xb0>)
 801403a:	f005 ff61 	bl	8019f00 <iprintf>

  netif = tcp_route(pcb, src, dst);
 801403e:	683a      	ldr	r2, [r7, #0]
 8014040:	6879      	ldr	r1, [r7, #4]
 8014042:	68f8      	ldr	r0, [r7, #12]
 8014044:	f7fe ff1c 	bl	8012e80 <tcp_route>
 8014048:	61b8      	str	r0, [r7, #24]
  if (netif == NULL) {
 801404a:	69bb      	ldr	r3, [r7, #24]
 801404c:	2b00      	cmp	r3, #0
 801404e:	d102      	bne.n	8014056 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8014050:	23fc      	movs	r3, #252	; 0xfc
 8014052:	77fb      	strb	r3, [r7, #31]
 8014054:	e02c      	b.n	80140b0 <tcp_output_control_segment+0x94>
  } else {
    u8_t ttl, tos;
#if CHECKSUM_GEN_TCP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_TCP) {
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
 8014056:	68bb      	ldr	r3, [r7, #8]
 8014058:	685b      	ldr	r3, [r3, #4]
 801405a:	617b      	str	r3, [r7, #20]
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 801405c:	68bb      	ldr	r3, [r7, #8]
 801405e:	891a      	ldrh	r2, [r3, #8]
 8014060:	683b      	ldr	r3, [r7, #0]
 8014062:	9300      	str	r3, [sp, #0]
 8014064:	687b      	ldr	r3, [r7, #4]
 8014066:	2106      	movs	r1, #6
 8014068:	68b8      	ldr	r0, [r7, #8]
 801406a:	f7f9 f81d 	bl	800d0a8 <ip_chksum_pseudo>
 801406e:	4603      	mov	r3, r0
 8014070:	461a      	mov	r2, r3
 8014072:	697b      	ldr	r3, [r7, #20]
 8014074:	821a      	strh	r2, [r3, #16]
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8014076:	68fb      	ldr	r3, [r7, #12]
 8014078:	2b00      	cmp	r3, #0
 801407a:	d006      	beq.n	801408a <tcp_output_control_segment+0x6e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 801407c:	68fb      	ldr	r3, [r7, #12]
 801407e:	7adb      	ldrb	r3, [r3, #11]
 8014080:	77bb      	strb	r3, [r7, #30]
      tos = pcb->tos;
 8014082:	68fb      	ldr	r3, [r7, #12]
 8014084:	7a9b      	ldrb	r3, [r3, #10]
 8014086:	777b      	strb	r3, [r7, #29]
 8014088:	e003      	b.n	8014092 <tcp_output_control_segment+0x76>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801408a:	23ff      	movs	r3, #255	; 0xff
 801408c:	77bb      	strb	r3, [r7, #30]
      tos = 0;
 801408e:	2300      	movs	r3, #0
 8014090:	777b      	strb	r3, [r7, #29]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8014092:	7fba      	ldrb	r2, [r7, #30]
 8014094:	69bb      	ldr	r3, [r7, #24]
 8014096:	9302      	str	r3, [sp, #8]
 8014098:	2306      	movs	r3, #6
 801409a:	9301      	str	r3, [sp, #4]
 801409c:	7f7b      	ldrb	r3, [r7, #29]
 801409e:	9300      	str	r3, [sp, #0]
 80140a0:	4613      	mov	r3, r2
 80140a2:	683a      	ldr	r2, [r7, #0]
 80140a4:	6879      	ldr	r1, [r7, #4]
 80140a6:	68b8      	ldr	r0, [r7, #8]
 80140a8:	f004 fb06 	bl	80186b8 <ip4_output_if>
 80140ac:	4603      	mov	r3, r0
 80140ae:	77fb      	strb	r3, [r7, #31]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 80140b0:	68b8      	ldr	r0, [r7, #8]
 80140b2:	f7fa fbe9 	bl	800e888 <pbuf_free>
  return err;
 80140b6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80140ba:	4618      	mov	r0, r3
 80140bc:	3720      	adds	r7, #32
 80140be:	46bd      	mov	sp, r7
 80140c0:	bd80      	pop	{r7, pc}
 80140c2:	bf00      	nop
 80140c4:	0801d29c 	.word	0x0801d29c
 80140c8:	0801da50 	.word	0x0801da50
 80140cc:	0801d2f0 	.word	0x0801d2f0

080140d0 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 80140d0:	b590      	push	{r4, r7, lr}
 80140d2:	b08b      	sub	sp, #44	; 0x2c
 80140d4:	af04      	add	r7, sp, #16
 80140d6:	60f8      	str	r0, [r7, #12]
 80140d8:	60b9      	str	r1, [r7, #8]
 80140da:	607a      	str	r2, [r7, #4]
 80140dc:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 80140de:	683b      	ldr	r3, [r7, #0]
 80140e0:	2b00      	cmp	r3, #0
 80140e2:	d106      	bne.n	80140f2 <tcp_rst+0x22>
 80140e4:	4b1f      	ldr	r3, [pc, #124]	; (8014164 <tcp_rst+0x94>)
 80140e6:	f240 72c4 	movw	r2, #1988	; 0x7c4
 80140ea:	491f      	ldr	r1, [pc, #124]	; (8014168 <tcp_rst+0x98>)
 80140ec:	481f      	ldr	r0, [pc, #124]	; (801416c <tcp_rst+0x9c>)
 80140ee:	f005 ff07 	bl	8019f00 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 80140f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80140f4:	2b00      	cmp	r3, #0
 80140f6:	d106      	bne.n	8014106 <tcp_rst+0x36>
 80140f8:	4b1a      	ldr	r3, [pc, #104]	; (8014164 <tcp_rst+0x94>)
 80140fa:	f240 72c5 	movw	r2, #1989	; 0x7c5
 80140fe:	491c      	ldr	r1, [pc, #112]	; (8014170 <tcp_rst+0xa0>)
 8014100:	481a      	ldr	r0, [pc, #104]	; (801416c <tcp_rst+0x9c>)
 8014102:	f005 fefd 	bl	8019f00 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8014106:	2300      	movs	r3, #0
 8014108:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801410a:	f24a 032d 	movw	r3, #41005	; 0xa02d
 801410e:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8014110:	7dfb      	ldrb	r3, [r7, #23]
 8014112:	b29c      	uxth	r4, r3
 8014114:	68b8      	ldr	r0, [r7, #8]
 8014116:	f7f8 feaa 	bl	800ce6e <lwip_htonl>
 801411a:	4602      	mov	r2, r0
 801411c:	8abb      	ldrh	r3, [r7, #20]
 801411e:	9303      	str	r3, [sp, #12]
 8014120:	2314      	movs	r3, #20
 8014122:	9302      	str	r3, [sp, #8]
 8014124:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8014126:	9301      	str	r3, [sp, #4]
 8014128:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801412a:	9300      	str	r3, [sp, #0]
 801412c:	4613      	mov	r3, r2
 801412e:	2200      	movs	r2, #0
 8014130:	4621      	mov	r1, r4
 8014132:	6878      	ldr	r0, [r7, #4]
 8014134:	f7ff fe82 	bl	8013e3c <tcp_output_alloc_header_common>
 8014138:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801413a:	693b      	ldr	r3, [r7, #16]
 801413c:	2b00      	cmp	r3, #0
 801413e:	d00c      	beq.n	801415a <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8014140:	7dfb      	ldrb	r3, [r7, #23]
 8014142:	2200      	movs	r2, #0
 8014144:	6939      	ldr	r1, [r7, #16]
 8014146:	68f8      	ldr	r0, [r7, #12]
 8014148:	f7ff ff28 	bl	8013f9c <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801414c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801414e:	683a      	ldr	r2, [r7, #0]
 8014150:	6939      	ldr	r1, [r7, #16]
 8014152:	68f8      	ldr	r0, [r7, #12]
 8014154:	f7ff ff62 	bl	801401c <tcp_output_control_segment>
 8014158:	e000      	b.n	801415c <tcp_rst+0x8c>
    return;
 801415a:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801415c:	371c      	adds	r7, #28
 801415e:	46bd      	mov	sp, r7
 8014160:	bd90      	pop	{r4, r7, pc}
 8014162:	bf00      	nop
 8014164:	0801d29c 	.word	0x0801d29c
 8014168:	0801da7c 	.word	0x0801da7c
 801416c:	0801d2f0 	.word	0x0801d2f0
 8014170:	0801da98 	.word	0x0801da98

08014174 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8014174:	b590      	push	{r4, r7, lr}
 8014176:	b087      	sub	sp, #28
 8014178:	af00      	add	r7, sp, #0
 801417a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 801417c:	2300      	movs	r3, #0
 801417e:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8014180:	2300      	movs	r3, #0
 8014182:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8014184:	687b      	ldr	r3, [r7, #4]
 8014186:	2b00      	cmp	r3, #0
 8014188:	d106      	bne.n	8014198 <tcp_send_empty_ack+0x24>
 801418a:	4b28      	ldr	r3, [pc, #160]	; (801422c <tcp_send_empty_ack+0xb8>)
 801418c:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8014190:	4927      	ldr	r1, [pc, #156]	; (8014230 <tcp_send_empty_ack+0xbc>)
 8014192:	4828      	ldr	r0, [pc, #160]	; (8014234 <tcp_send_empty_ack+0xc0>)
 8014194:	f005 feb4 	bl	8019f00 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8014198:	7dfb      	ldrb	r3, [r7, #23]
 801419a:	009b      	lsls	r3, r3, #2
 801419c:	b2db      	uxtb	r3, r3
 801419e:	f003 0304 	and.w	r3, r3, #4
 80141a2:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 80141a4:	7d7b      	ldrb	r3, [r7, #21]
 80141a6:	b29c      	uxth	r4, r3
 80141a8:	687b      	ldr	r3, [r7, #4]
 80141aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80141ac:	4618      	mov	r0, r3
 80141ae:	f7f8 fe5e 	bl	800ce6e <lwip_htonl>
 80141b2:	4603      	mov	r3, r0
 80141b4:	2200      	movs	r2, #0
 80141b6:	4621      	mov	r1, r4
 80141b8:	6878      	ldr	r0, [r7, #4]
 80141ba:	f7ff feb1 	bl	8013f20 <tcp_output_alloc_header>
 80141be:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80141c0:	693b      	ldr	r3, [r7, #16]
 80141c2:	2b00      	cmp	r3, #0
 80141c4:	d109      	bne.n	80141da <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80141c6:	687b      	ldr	r3, [r7, #4]
 80141c8:	8b5b      	ldrh	r3, [r3, #26]
 80141ca:	f043 0303 	orr.w	r3, r3, #3
 80141ce:	b29a      	uxth	r2, r3
 80141d0:	687b      	ldr	r3, [r7, #4]
 80141d2:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80141d4:	f06f 0301 	mvn.w	r3, #1
 80141d8:	e023      	b.n	8014222 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 80141da:	7dbb      	ldrb	r3, [r7, #22]
 80141dc:	7dfa      	ldrb	r2, [r7, #23]
 80141de:	6939      	ldr	r1, [r7, #16]
 80141e0:	6878      	ldr	r0, [r7, #4]
 80141e2:	f7ff fedb 	bl	8013f9c <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80141e6:	687a      	ldr	r2, [r7, #4]
 80141e8:	687b      	ldr	r3, [r7, #4]
 80141ea:	3304      	adds	r3, #4
 80141ec:	6939      	ldr	r1, [r7, #16]
 80141ee:	6878      	ldr	r0, [r7, #4]
 80141f0:	f7ff ff14 	bl	801401c <tcp_output_control_segment>
 80141f4:	4603      	mov	r3, r0
 80141f6:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 80141f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80141fc:	2b00      	cmp	r3, #0
 80141fe:	d007      	beq.n	8014210 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014200:	687b      	ldr	r3, [r7, #4]
 8014202:	8b5b      	ldrh	r3, [r3, #26]
 8014204:	f043 0303 	orr.w	r3, r3, #3
 8014208:	b29a      	uxth	r2, r3
 801420a:	687b      	ldr	r3, [r7, #4]
 801420c:	835a      	strh	r2, [r3, #26]
 801420e:	e006      	b.n	801421e <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014210:	687b      	ldr	r3, [r7, #4]
 8014212:	8b5b      	ldrh	r3, [r3, #26]
 8014214:	f023 0303 	bic.w	r3, r3, #3
 8014218:	b29a      	uxth	r2, r3
 801421a:	687b      	ldr	r3, [r7, #4]
 801421c:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801421e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014222:	4618      	mov	r0, r3
 8014224:	371c      	adds	r7, #28
 8014226:	46bd      	mov	sp, r7
 8014228:	bd90      	pop	{r4, r7, pc}
 801422a:	bf00      	nop
 801422c:	0801d29c 	.word	0x0801d29c
 8014230:	0801dab4 	.word	0x0801dab4
 8014234:	0801d2f0 	.word	0x0801d2f0

08014238 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8014238:	b590      	push	{r4, r7, lr}
 801423a:	b085      	sub	sp, #20
 801423c:	af00      	add	r7, sp, #0
 801423e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8014240:	2300      	movs	r3, #0
 8014242:	72bb      	strb	r3, [r7, #10]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8014244:	687b      	ldr	r3, [r7, #4]
 8014246:	2b00      	cmp	r3, #0
 8014248:	d106      	bne.n	8014258 <tcp_keepalive+0x20>
 801424a:	4b18      	ldr	r3, [pc, #96]	; (80142ac <tcp_keepalive+0x74>)
 801424c:	f640 0224 	movw	r2, #2084	; 0x824
 8014250:	4917      	ldr	r1, [pc, #92]	; (80142b0 <tcp_keepalive+0x78>)
 8014252:	4818      	ldr	r0, [pc, #96]	; (80142b4 <tcp_keepalive+0x7c>)
 8014254:	f005 fe54 	bl	8019f00 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8014258:	7abb      	ldrb	r3, [r7, #10]
 801425a:	b29c      	uxth	r4, r3
 801425c:	687b      	ldr	r3, [r7, #4]
 801425e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014260:	3b01      	subs	r3, #1
 8014262:	4618      	mov	r0, r3
 8014264:	f7f8 fe03 	bl	800ce6e <lwip_htonl>
 8014268:	4603      	mov	r3, r0
 801426a:	2200      	movs	r2, #0
 801426c:	4621      	mov	r1, r4
 801426e:	6878      	ldr	r0, [r7, #4]
 8014270:	f7ff fe56 	bl	8013f20 <tcp_output_alloc_header>
 8014274:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8014276:	68fb      	ldr	r3, [r7, #12]
 8014278:	2b00      	cmp	r3, #0
 801427a:	d102      	bne.n	8014282 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 801427c:	f04f 33ff 	mov.w	r3, #4294967295
 8014280:	e010      	b.n	80142a4 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8014282:	7abb      	ldrb	r3, [r7, #10]
 8014284:	2200      	movs	r2, #0
 8014286:	68f9      	ldr	r1, [r7, #12]
 8014288:	6878      	ldr	r0, [r7, #4]
 801428a:	f7ff fe87 	bl	8013f9c <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801428e:	687a      	ldr	r2, [r7, #4]
 8014290:	687b      	ldr	r3, [r7, #4]
 8014292:	3304      	adds	r3, #4
 8014294:	68f9      	ldr	r1, [r7, #12]
 8014296:	6878      	ldr	r0, [r7, #4]
 8014298:	f7ff fec0 	bl	801401c <tcp_output_control_segment>
 801429c:	4603      	mov	r3, r0
 801429e:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80142a0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80142a4:	4618      	mov	r0, r3
 80142a6:	3714      	adds	r7, #20
 80142a8:	46bd      	mov	sp, r7
 80142aa:	bd90      	pop	{r4, r7, pc}
 80142ac:	0801d29c 	.word	0x0801d29c
 80142b0:	0801dad4 	.word	0x0801dad4
 80142b4:	0801d2f0 	.word	0x0801d2f0

080142b8 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80142b8:	b590      	push	{r4, r7, lr}
 80142ba:	b08b      	sub	sp, #44	; 0x2c
 80142bc:	af00      	add	r7, sp, #0
 80142be:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80142c0:	2300      	movs	r3, #0
 80142c2:	74fb      	strb	r3, [r7, #19]

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 80142c4:	687b      	ldr	r3, [r7, #4]
 80142c6:	2b00      	cmp	r3, #0
 80142c8:	d106      	bne.n	80142d8 <tcp_zero_window_probe+0x20>
 80142ca:	4b4d      	ldr	r3, [pc, #308]	; (8014400 <tcp_zero_window_probe+0x148>)
 80142cc:	f640 024f 	movw	r2, #2127	; 0x84f
 80142d0:	494c      	ldr	r1, [pc, #304]	; (8014404 <tcp_zero_window_probe+0x14c>)
 80142d2:	484d      	ldr	r0, [pc, #308]	; (8014408 <tcp_zero_window_probe+0x150>)
 80142d4:	f005 fe14 	bl	8019f00 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 80142d8:	687b      	ldr	r3, [r7, #4]
 80142da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80142dc:	627b      	str	r3, [r7, #36]	; 0x24
  if (seg == NULL) {
 80142de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142e0:	2b00      	cmp	r3, #0
 80142e2:	d101      	bne.n	80142e8 <tcp_zero_window_probe+0x30>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 80142e4:	2300      	movs	r3, #0
 80142e6:	e087      	b.n	80143f8 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 80142e8:	687b      	ldr	r3, [r7, #4]
 80142ea:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80142ee:	2bff      	cmp	r3, #255	; 0xff
 80142f0:	d007      	beq.n	8014302 <tcp_zero_window_probe+0x4a>
    ++pcb->persist_probe;
 80142f2:	687b      	ldr	r3, [r7, #4]
 80142f4:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80142f8:	3301      	adds	r3, #1
 80142fa:	b2da      	uxtb	r2, r3
 80142fc:	687b      	ldr	r3, [r7, #4]
 80142fe:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8014302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014304:	691b      	ldr	r3, [r3, #16]
 8014306:	899b      	ldrh	r3, [r3, #12]
 8014308:	b29b      	uxth	r3, r3
 801430a:	4618      	mov	r0, r3
 801430c:	f7f8 fd9a 	bl	800ce44 <lwip_htons>
 8014310:	4603      	mov	r3, r0
 8014312:	b2db      	uxtb	r3, r3
 8014314:	f003 0301 	and.w	r3, r3, #1
 8014318:	2b00      	cmp	r3, #0
 801431a:	d005      	beq.n	8014328 <tcp_zero_window_probe+0x70>
 801431c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801431e:	891b      	ldrh	r3, [r3, #8]
 8014320:	2b00      	cmp	r3, #0
 8014322:	d101      	bne.n	8014328 <tcp_zero_window_probe+0x70>
 8014324:	2301      	movs	r3, #1
 8014326:	e000      	b.n	801432a <tcp_zero_window_probe+0x72>
 8014328:	2300      	movs	r3, #0
 801432a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801432e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8014332:	2b00      	cmp	r3, #0
 8014334:	bf0c      	ite	eq
 8014336:	2301      	moveq	r3, #1
 8014338:	2300      	movne	r3, #0
 801433a:	b2db      	uxtb	r3, r3
 801433c:	843b      	strh	r3, [r7, #32]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801433e:	7cfb      	ldrb	r3, [r7, #19]
 8014340:	b299      	uxth	r1, r3
 8014342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014344:	691b      	ldr	r3, [r3, #16]
 8014346:	685b      	ldr	r3, [r3, #4]
 8014348:	8c3a      	ldrh	r2, [r7, #32]
 801434a:	6878      	ldr	r0, [r7, #4]
 801434c:	f7ff fde8 	bl	8013f20 <tcp_output_alloc_header>
 8014350:	61f8      	str	r0, [r7, #28]
  if (p == NULL) {
 8014352:	69fb      	ldr	r3, [r7, #28]
 8014354:	2b00      	cmp	r3, #0
 8014356:	d102      	bne.n	801435e <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8014358:	f04f 33ff 	mov.w	r3, #4294967295
 801435c:	e04c      	b.n	80143f8 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801435e:	69fb      	ldr	r3, [r7, #28]
 8014360:	685b      	ldr	r3, [r3, #4]
 8014362:	61bb      	str	r3, [r7, #24]

  if (is_fin) {
 8014364:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8014368:	2b00      	cmp	r3, #0
 801436a:	d011      	beq.n	8014390 <tcp_zero_window_probe+0xd8>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801436c:	69bb      	ldr	r3, [r7, #24]
 801436e:	899b      	ldrh	r3, [r3, #12]
 8014370:	b29b      	uxth	r3, r3
 8014372:	b21b      	sxth	r3, r3
 8014374:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8014378:	b21c      	sxth	r4, r3
 801437a:	2011      	movs	r0, #17
 801437c:	f7f8 fd62 	bl	800ce44 <lwip_htons>
 8014380:	4603      	mov	r3, r0
 8014382:	b21b      	sxth	r3, r3
 8014384:	4323      	orrs	r3, r4
 8014386:	b21b      	sxth	r3, r3
 8014388:	b29a      	uxth	r2, r3
 801438a:	69bb      	ldr	r3, [r7, #24]
 801438c:	819a      	strh	r2, [r3, #12]
 801438e:	e010      	b.n	80143b2 <tcp_zero_window_probe+0xfa>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8014390:	69fb      	ldr	r3, [r7, #28]
 8014392:	685b      	ldr	r3, [r3, #4]
 8014394:	3314      	adds	r3, #20
 8014396:	617b      	str	r3, [r7, #20]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8014398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801439a:	6858      	ldr	r0, [r3, #4]
 801439c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801439e:	685b      	ldr	r3, [r3, #4]
 80143a0:	891a      	ldrh	r2, [r3, #8]
 80143a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143a4:	891b      	ldrh	r3, [r3, #8]
 80143a6:	1ad3      	subs	r3, r2, r3
 80143a8:	b29b      	uxth	r3, r3
 80143aa:	2201      	movs	r2, #1
 80143ac:	6979      	ldr	r1, [r7, #20]
 80143ae:	f7fa fc71 	bl	800ec94 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80143b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143b4:	691b      	ldr	r3, [r3, #16]
 80143b6:	685b      	ldr	r3, [r3, #4]
 80143b8:	4618      	mov	r0, r3
 80143ba:	f7f8 fd58 	bl	800ce6e <lwip_htonl>
 80143be:	4603      	mov	r3, r0
 80143c0:	3301      	adds	r3, #1
 80143c2:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80143c4:	687b      	ldr	r3, [r7, #4]
 80143c6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80143c8:	68fb      	ldr	r3, [r7, #12]
 80143ca:	1ad3      	subs	r3, r2, r3
 80143cc:	2b00      	cmp	r3, #0
 80143ce:	da02      	bge.n	80143d6 <tcp_zero_window_probe+0x11e>
    pcb->snd_nxt = snd_nxt;
 80143d0:	687b      	ldr	r3, [r7, #4]
 80143d2:	68fa      	ldr	r2, [r7, #12]
 80143d4:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80143d6:	7cfb      	ldrb	r3, [r7, #19]
 80143d8:	2200      	movs	r2, #0
 80143da:	69f9      	ldr	r1, [r7, #28]
 80143dc:	6878      	ldr	r0, [r7, #4]
 80143de:	f7ff fddd 	bl	8013f9c <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80143e2:	687a      	ldr	r2, [r7, #4]
 80143e4:	687b      	ldr	r3, [r7, #4]
 80143e6:	3304      	adds	r3, #4
 80143e8:	69f9      	ldr	r1, [r7, #28]
 80143ea:	6878      	ldr	r0, [r7, #4]
 80143ec:	f7ff fe16 	bl	801401c <tcp_output_control_segment>
 80143f0:	4603      	mov	r3, r0
 80143f2:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80143f4:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80143f8:	4618      	mov	r0, r3
 80143fa:	372c      	adds	r7, #44	; 0x2c
 80143fc:	46bd      	mov	sp, r7
 80143fe:	bd90      	pop	{r4, r7, pc}
 8014400:	0801d29c 	.word	0x0801d29c
 8014404:	0801daf0 	.word	0x0801daf0
 8014408:	0801d2f0 	.word	0x0801d2f0

0801440c <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 801440c:	b580      	push	{r7, lr}
 801440e:	b082      	sub	sp, #8
 8014410:	af00      	add	r7, sp, #0
 8014412:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8014414:	f7fa fec0 	bl	800f198 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8014418:	4b0a      	ldr	r3, [pc, #40]	; (8014444 <tcpip_tcp_timer+0x38>)
 801441a:	681b      	ldr	r3, [r3, #0]
 801441c:	2b00      	cmp	r3, #0
 801441e:	d103      	bne.n	8014428 <tcpip_tcp_timer+0x1c>
 8014420:	4b09      	ldr	r3, [pc, #36]	; (8014448 <tcpip_tcp_timer+0x3c>)
 8014422:	681b      	ldr	r3, [r3, #0]
 8014424:	2b00      	cmp	r3, #0
 8014426:	d005      	beq.n	8014434 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8014428:	2200      	movs	r2, #0
 801442a:	4908      	ldr	r1, [pc, #32]	; (801444c <tcpip_tcp_timer+0x40>)
 801442c:	20fa      	movs	r0, #250	; 0xfa
 801442e:	f000 f8f3 	bl	8014618 <sys_timeout>
 8014432:	e003      	b.n	801443c <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8014434:	4b06      	ldr	r3, [pc, #24]	; (8014450 <tcpip_tcp_timer+0x44>)
 8014436:	2200      	movs	r2, #0
 8014438:	601a      	str	r2, [r3, #0]
  }
}
 801443a:	bf00      	nop
 801443c:	bf00      	nop
 801443e:	3708      	adds	r7, #8
 8014440:	46bd      	mov	sp, r7
 8014442:	bd80      	pop	{r7, pc}
 8014444:	20013ad0 	.word	0x20013ad0
 8014448:	20013ad4 	.word	0x20013ad4
 801444c:	0801440d 	.word	0x0801440d
 8014450:	20013b20 	.word	0x20013b20

08014454 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8014454:	b580      	push	{r7, lr}
 8014456:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8014458:	4b0a      	ldr	r3, [pc, #40]	; (8014484 <tcp_timer_needed+0x30>)
 801445a:	681b      	ldr	r3, [r3, #0]
 801445c:	2b00      	cmp	r3, #0
 801445e:	d10f      	bne.n	8014480 <tcp_timer_needed+0x2c>
 8014460:	4b09      	ldr	r3, [pc, #36]	; (8014488 <tcp_timer_needed+0x34>)
 8014462:	681b      	ldr	r3, [r3, #0]
 8014464:	2b00      	cmp	r3, #0
 8014466:	d103      	bne.n	8014470 <tcp_timer_needed+0x1c>
 8014468:	4b08      	ldr	r3, [pc, #32]	; (801448c <tcp_timer_needed+0x38>)
 801446a:	681b      	ldr	r3, [r3, #0]
 801446c:	2b00      	cmp	r3, #0
 801446e:	d007      	beq.n	8014480 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8014470:	4b04      	ldr	r3, [pc, #16]	; (8014484 <tcp_timer_needed+0x30>)
 8014472:	2201      	movs	r2, #1
 8014474:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8014476:	2200      	movs	r2, #0
 8014478:	4905      	ldr	r1, [pc, #20]	; (8014490 <tcp_timer_needed+0x3c>)
 801447a:	20fa      	movs	r0, #250	; 0xfa
 801447c:	f000 f8cc 	bl	8014618 <sys_timeout>
  }
}
 8014480:	bf00      	nop
 8014482:	bd80      	pop	{r7, pc}
 8014484:	20013b20 	.word	0x20013b20
 8014488:	20013ad0 	.word	0x20013ad0
 801448c:	20013ad4 	.word	0x20013ad4
 8014490:	0801440d 	.word	0x0801440d

08014494 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8014494:	b580      	push	{r7, lr}
 8014496:	b086      	sub	sp, #24
 8014498:	af00      	add	r7, sp, #0
 801449a:	60f8      	str	r0, [r7, #12]
 801449c:	60b9      	str	r1, [r7, #8]
 801449e:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 80144a0:	200a      	movs	r0, #10
 80144a2:	f7f9 fafd 	bl	800daa0 <memp_malloc>
 80144a6:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 80144a8:	693b      	ldr	r3, [r7, #16]
 80144aa:	2b00      	cmp	r3, #0
 80144ac:	d109      	bne.n	80144c2 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 80144ae:	693b      	ldr	r3, [r7, #16]
 80144b0:	2b00      	cmp	r3, #0
 80144b2:	d151      	bne.n	8014558 <sys_timeout_abs+0xc4>
 80144b4:	4b2a      	ldr	r3, [pc, #168]	; (8014560 <sys_timeout_abs+0xcc>)
 80144b6:	22be      	movs	r2, #190	; 0xbe
 80144b8:	492a      	ldr	r1, [pc, #168]	; (8014564 <sys_timeout_abs+0xd0>)
 80144ba:	482b      	ldr	r0, [pc, #172]	; (8014568 <sys_timeout_abs+0xd4>)
 80144bc:	f005 fd20 	bl	8019f00 <iprintf>
    return;
 80144c0:	e04a      	b.n	8014558 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 80144c2:	693b      	ldr	r3, [r7, #16]
 80144c4:	2200      	movs	r2, #0
 80144c6:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 80144c8:	693b      	ldr	r3, [r7, #16]
 80144ca:	68ba      	ldr	r2, [r7, #8]
 80144cc:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 80144ce:	693b      	ldr	r3, [r7, #16]
 80144d0:	687a      	ldr	r2, [r7, #4]
 80144d2:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 80144d4:	693b      	ldr	r3, [r7, #16]
 80144d6:	68fa      	ldr	r2, [r7, #12]
 80144d8:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 80144da:	4b24      	ldr	r3, [pc, #144]	; (801456c <sys_timeout_abs+0xd8>)
 80144dc:	681b      	ldr	r3, [r3, #0]
 80144de:	2b00      	cmp	r3, #0
 80144e0:	d103      	bne.n	80144ea <sys_timeout_abs+0x56>
    next_timeout = timeout;
 80144e2:	4a22      	ldr	r2, [pc, #136]	; (801456c <sys_timeout_abs+0xd8>)
 80144e4:	693b      	ldr	r3, [r7, #16]
 80144e6:	6013      	str	r3, [r2, #0]
    return;
 80144e8:	e037      	b.n	801455a <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 80144ea:	693b      	ldr	r3, [r7, #16]
 80144ec:	685a      	ldr	r2, [r3, #4]
 80144ee:	4b1f      	ldr	r3, [pc, #124]	; (801456c <sys_timeout_abs+0xd8>)
 80144f0:	681b      	ldr	r3, [r3, #0]
 80144f2:	685b      	ldr	r3, [r3, #4]
 80144f4:	1ad3      	subs	r3, r2, r3
 80144f6:	0fdb      	lsrs	r3, r3, #31
 80144f8:	f003 0301 	and.w	r3, r3, #1
 80144fc:	b2db      	uxtb	r3, r3
 80144fe:	2b00      	cmp	r3, #0
 8014500:	d007      	beq.n	8014512 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8014502:	4b1a      	ldr	r3, [pc, #104]	; (801456c <sys_timeout_abs+0xd8>)
 8014504:	681a      	ldr	r2, [r3, #0]
 8014506:	693b      	ldr	r3, [r7, #16]
 8014508:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801450a:	4a18      	ldr	r2, [pc, #96]	; (801456c <sys_timeout_abs+0xd8>)
 801450c:	693b      	ldr	r3, [r7, #16]
 801450e:	6013      	str	r3, [r2, #0]
 8014510:	e023      	b.n	801455a <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8014512:	4b16      	ldr	r3, [pc, #88]	; (801456c <sys_timeout_abs+0xd8>)
 8014514:	681b      	ldr	r3, [r3, #0]
 8014516:	617b      	str	r3, [r7, #20]
 8014518:	e01a      	b.n	8014550 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801451a:	697b      	ldr	r3, [r7, #20]
 801451c:	681b      	ldr	r3, [r3, #0]
 801451e:	2b00      	cmp	r3, #0
 8014520:	d00b      	beq.n	801453a <sys_timeout_abs+0xa6>
 8014522:	693b      	ldr	r3, [r7, #16]
 8014524:	685a      	ldr	r2, [r3, #4]
 8014526:	697b      	ldr	r3, [r7, #20]
 8014528:	681b      	ldr	r3, [r3, #0]
 801452a:	685b      	ldr	r3, [r3, #4]
 801452c:	1ad3      	subs	r3, r2, r3
 801452e:	0fdb      	lsrs	r3, r3, #31
 8014530:	f003 0301 	and.w	r3, r3, #1
 8014534:	b2db      	uxtb	r3, r3
 8014536:	2b00      	cmp	r3, #0
 8014538:	d007      	beq.n	801454a <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801453a:	697b      	ldr	r3, [r7, #20]
 801453c:	681a      	ldr	r2, [r3, #0]
 801453e:	693b      	ldr	r3, [r7, #16]
 8014540:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8014542:	697b      	ldr	r3, [r7, #20]
 8014544:	693a      	ldr	r2, [r7, #16]
 8014546:	601a      	str	r2, [r3, #0]
        break;
 8014548:	e007      	b.n	801455a <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801454a:	697b      	ldr	r3, [r7, #20]
 801454c:	681b      	ldr	r3, [r3, #0]
 801454e:	617b      	str	r3, [r7, #20]
 8014550:	697b      	ldr	r3, [r7, #20]
 8014552:	2b00      	cmp	r3, #0
 8014554:	d1e1      	bne.n	801451a <sys_timeout_abs+0x86>
 8014556:	e000      	b.n	801455a <sys_timeout_abs+0xc6>
    return;
 8014558:	bf00      	nop
      }
    }
  }
}
 801455a:	3718      	adds	r7, #24
 801455c:	46bd      	mov	sp, r7
 801455e:	bd80      	pop	{r7, pc}
 8014560:	0801db14 	.word	0x0801db14
 8014564:	0801db48 	.word	0x0801db48
 8014568:	0801db88 	.word	0x0801db88
 801456c:	20013b18 	.word	0x20013b18

08014570 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8014570:	b580      	push	{r7, lr}
 8014572:	b086      	sub	sp, #24
 8014574:	af00      	add	r7, sp, #0
 8014576:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8014578:	687b      	ldr	r3, [r7, #4]
 801457a:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801457c:	697b      	ldr	r3, [r7, #20]
 801457e:	685b      	ldr	r3, [r3, #4]
 8014580:	4798      	blx	r3

  now = sys_now();
 8014582:	f7ed ff4d 	bl	8002420 <sys_now>
 8014586:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8014588:	697b      	ldr	r3, [r7, #20]
 801458a:	681a      	ldr	r2, [r3, #0]
 801458c:	4b0f      	ldr	r3, [pc, #60]	; (80145cc <lwip_cyclic_timer+0x5c>)
 801458e:	681b      	ldr	r3, [r3, #0]
 8014590:	4413      	add	r3, r2
 8014592:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8014594:	68fa      	ldr	r2, [r7, #12]
 8014596:	693b      	ldr	r3, [r7, #16]
 8014598:	1ad3      	subs	r3, r2, r3
 801459a:	0fdb      	lsrs	r3, r3, #31
 801459c:	f003 0301 	and.w	r3, r3, #1
 80145a0:	b2db      	uxtb	r3, r3
 80145a2:	2b00      	cmp	r3, #0
 80145a4:	d009      	beq.n	80145ba <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 80145a6:	697b      	ldr	r3, [r7, #20]
 80145a8:	681a      	ldr	r2, [r3, #0]
 80145aa:	693b      	ldr	r3, [r7, #16]
 80145ac:	4413      	add	r3, r2
 80145ae:	687a      	ldr	r2, [r7, #4]
 80145b0:	4907      	ldr	r1, [pc, #28]	; (80145d0 <lwip_cyclic_timer+0x60>)
 80145b2:	4618      	mov	r0, r3
 80145b4:	f7ff ff6e 	bl	8014494 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 80145b8:	e004      	b.n	80145c4 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 80145ba:	687a      	ldr	r2, [r7, #4]
 80145bc:	4904      	ldr	r1, [pc, #16]	; (80145d0 <lwip_cyclic_timer+0x60>)
 80145be:	68f8      	ldr	r0, [r7, #12]
 80145c0:	f7ff ff68 	bl	8014494 <sys_timeout_abs>
}
 80145c4:	bf00      	nop
 80145c6:	3718      	adds	r7, #24
 80145c8:	46bd      	mov	sp, r7
 80145ca:	bd80      	pop	{r7, pc}
 80145cc:	20013b1c 	.word	0x20013b1c
 80145d0:	08014571 	.word	0x08014571

080145d4 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 80145d4:	b580      	push	{r7, lr}
 80145d6:	b082      	sub	sp, #8
 80145d8:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80145da:	2301      	movs	r3, #1
 80145dc:	607b      	str	r3, [r7, #4]
 80145de:	e00e      	b.n	80145fe <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 80145e0:	4a0b      	ldr	r2, [pc, #44]	; (8014610 <sys_timeouts_init+0x3c>)
 80145e2:	687b      	ldr	r3, [r7, #4]
 80145e4:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80145e8:	687b      	ldr	r3, [r7, #4]
 80145ea:	00db      	lsls	r3, r3, #3
 80145ec:	4a08      	ldr	r2, [pc, #32]	; (8014610 <sys_timeouts_init+0x3c>)
 80145ee:	4413      	add	r3, r2
 80145f0:	461a      	mov	r2, r3
 80145f2:	4908      	ldr	r1, [pc, #32]	; (8014614 <sys_timeouts_init+0x40>)
 80145f4:	f000 f810 	bl	8014618 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80145f8:	687b      	ldr	r3, [r7, #4]
 80145fa:	3301      	adds	r3, #1
 80145fc:	607b      	str	r3, [r7, #4]
 80145fe:	687b      	ldr	r3, [r7, #4]
 8014600:	2b04      	cmp	r3, #4
 8014602:	d9ed      	bls.n	80145e0 <sys_timeouts_init+0xc>
  }
}
 8014604:	bf00      	nop
 8014606:	bf00      	nop
 8014608:	3708      	adds	r7, #8
 801460a:	46bd      	mov	sp, r7
 801460c:	bd80      	pop	{r7, pc}
 801460e:	bf00      	nop
 8014610:	0806a400 	.word	0x0806a400
 8014614:	08014571 	.word	0x08014571

08014618 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8014618:	b580      	push	{r7, lr}
 801461a:	b086      	sub	sp, #24
 801461c:	af00      	add	r7, sp, #0
 801461e:	60f8      	str	r0, [r7, #12]
 8014620:	60b9      	str	r1, [r7, #8]
 8014622:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8014624:	68fb      	ldr	r3, [r7, #12]
 8014626:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801462a:	d306      	bcc.n	801463a <sys_timeout+0x22>
 801462c:	4b0a      	ldr	r3, [pc, #40]	; (8014658 <sys_timeout+0x40>)
 801462e:	f240 1229 	movw	r2, #297	; 0x129
 8014632:	490a      	ldr	r1, [pc, #40]	; (801465c <sys_timeout+0x44>)
 8014634:	480a      	ldr	r0, [pc, #40]	; (8014660 <sys_timeout+0x48>)
 8014636:	f005 fc63 	bl	8019f00 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801463a:	f7ed fef1 	bl	8002420 <sys_now>
 801463e:	4602      	mov	r2, r0
 8014640:	68fb      	ldr	r3, [r7, #12]
 8014642:	4413      	add	r3, r2
 8014644:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8014646:	687a      	ldr	r2, [r7, #4]
 8014648:	68b9      	ldr	r1, [r7, #8]
 801464a:	6978      	ldr	r0, [r7, #20]
 801464c:	f7ff ff22 	bl	8014494 <sys_timeout_abs>
#endif
}
 8014650:	bf00      	nop
 8014652:	3718      	adds	r7, #24
 8014654:	46bd      	mov	sp, r7
 8014656:	bd80      	pop	{r7, pc}
 8014658:	0801db14 	.word	0x0801db14
 801465c:	0801dbb0 	.word	0x0801dbb0
 8014660:	0801db88 	.word	0x0801db88

08014664 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8014664:	b580      	push	{r7, lr}
 8014666:	b084      	sub	sp, #16
 8014668:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801466a:	f7ed fed9 	bl	8002420 <sys_now>
 801466e:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8014670:	4b17      	ldr	r3, [pc, #92]	; (80146d0 <sys_check_timeouts+0x6c>)
 8014672:	681b      	ldr	r3, [r3, #0]
 8014674:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8014676:	68bb      	ldr	r3, [r7, #8]
 8014678:	2b00      	cmp	r3, #0
 801467a:	d022      	beq.n	80146c2 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801467c:	68bb      	ldr	r3, [r7, #8]
 801467e:	685b      	ldr	r3, [r3, #4]
 8014680:	68fa      	ldr	r2, [r7, #12]
 8014682:	1ad3      	subs	r3, r2, r3
 8014684:	0fdb      	lsrs	r3, r3, #31
 8014686:	f003 0301 	and.w	r3, r3, #1
 801468a:	b2db      	uxtb	r3, r3
 801468c:	2b00      	cmp	r3, #0
 801468e:	d11a      	bne.n	80146c6 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8014690:	68bb      	ldr	r3, [r7, #8]
 8014692:	681b      	ldr	r3, [r3, #0]
 8014694:	4a0e      	ldr	r2, [pc, #56]	; (80146d0 <sys_check_timeouts+0x6c>)
 8014696:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8014698:	68bb      	ldr	r3, [r7, #8]
 801469a:	689b      	ldr	r3, [r3, #8]
 801469c:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801469e:	68bb      	ldr	r3, [r7, #8]
 80146a0:	68db      	ldr	r3, [r3, #12]
 80146a2:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 80146a4:	68bb      	ldr	r3, [r7, #8]
 80146a6:	685b      	ldr	r3, [r3, #4]
 80146a8:	4a0a      	ldr	r2, [pc, #40]	; (80146d4 <sys_check_timeouts+0x70>)
 80146aa:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 80146ac:	68b9      	ldr	r1, [r7, #8]
 80146ae:	200a      	movs	r0, #10
 80146b0:	f7f9 fa48 	bl	800db44 <memp_free>
    if (handler != NULL) {
 80146b4:	687b      	ldr	r3, [r7, #4]
 80146b6:	2b00      	cmp	r3, #0
 80146b8:	d0da      	beq.n	8014670 <sys_check_timeouts+0xc>
      handler(arg);
 80146ba:	687b      	ldr	r3, [r7, #4]
 80146bc:	6838      	ldr	r0, [r7, #0]
 80146be:	4798      	blx	r3
  do {
 80146c0:	e7d6      	b.n	8014670 <sys_check_timeouts+0xc>
      return;
 80146c2:	bf00      	nop
 80146c4:	e000      	b.n	80146c8 <sys_check_timeouts+0x64>
      return;
 80146c6:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 80146c8:	3710      	adds	r7, #16
 80146ca:	46bd      	mov	sp, r7
 80146cc:	bd80      	pop	{r7, pc}
 80146ce:	bf00      	nop
 80146d0:	20013b18 	.word	0x20013b18
 80146d4:	20013b1c 	.word	0x20013b1c

080146d8 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 80146d8:	b580      	push	{r7, lr}
 80146da:	b082      	sub	sp, #8
 80146dc:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 80146de:	4b16      	ldr	r3, [pc, #88]	; (8014738 <sys_timeouts_sleeptime+0x60>)
 80146e0:	681b      	ldr	r3, [r3, #0]
 80146e2:	2b00      	cmp	r3, #0
 80146e4:	d102      	bne.n	80146ec <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 80146e6:	f04f 33ff 	mov.w	r3, #4294967295
 80146ea:	e020      	b.n	801472e <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 80146ec:	f7ed fe98 	bl	8002420 <sys_now>
 80146f0:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 80146f2:	4b11      	ldr	r3, [pc, #68]	; (8014738 <sys_timeouts_sleeptime+0x60>)
 80146f4:	681b      	ldr	r3, [r3, #0]
 80146f6:	685a      	ldr	r2, [r3, #4]
 80146f8:	687b      	ldr	r3, [r7, #4]
 80146fa:	1ad3      	subs	r3, r2, r3
 80146fc:	0fdb      	lsrs	r3, r3, #31
 80146fe:	f003 0301 	and.w	r3, r3, #1
 8014702:	b2db      	uxtb	r3, r3
 8014704:	2b00      	cmp	r3, #0
 8014706:	d001      	beq.n	801470c <sys_timeouts_sleeptime+0x34>
    return 0;
 8014708:	2300      	movs	r3, #0
 801470a:	e010      	b.n	801472e <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 801470c:	4b0a      	ldr	r3, [pc, #40]	; (8014738 <sys_timeouts_sleeptime+0x60>)
 801470e:	681b      	ldr	r3, [r3, #0]
 8014710:	685a      	ldr	r2, [r3, #4]
 8014712:	687b      	ldr	r3, [r7, #4]
 8014714:	1ad3      	subs	r3, r2, r3
 8014716:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8014718:	683b      	ldr	r3, [r7, #0]
 801471a:	2b00      	cmp	r3, #0
 801471c:	da06      	bge.n	801472c <sys_timeouts_sleeptime+0x54>
 801471e:	4b07      	ldr	r3, [pc, #28]	; (801473c <sys_timeouts_sleeptime+0x64>)
 8014720:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8014724:	4906      	ldr	r1, [pc, #24]	; (8014740 <sys_timeouts_sleeptime+0x68>)
 8014726:	4807      	ldr	r0, [pc, #28]	; (8014744 <sys_timeouts_sleeptime+0x6c>)
 8014728:	f005 fbea 	bl	8019f00 <iprintf>
    return ret;
 801472c:	683b      	ldr	r3, [r7, #0]
  }
}
 801472e:	4618      	mov	r0, r3
 8014730:	3708      	adds	r7, #8
 8014732:	46bd      	mov	sp, r7
 8014734:	bd80      	pop	{r7, pc}
 8014736:	bf00      	nop
 8014738:	20013b18 	.word	0x20013b18
 801473c:	0801db14 	.word	0x0801db14
 8014740:	0801dbe8 	.word	0x0801dbe8
 8014744:	0801db88 	.word	0x0801db88

08014748 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8014748:	b580      	push	{r7, lr}
 801474a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801474c:	f005 fc66 	bl	801a01c <rand>
 8014750:	4603      	mov	r3, r0
 8014752:	b29b      	uxth	r3, r3
 8014754:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8014758:	b29b      	uxth	r3, r3
 801475a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801475e:	b29a      	uxth	r2, r3
 8014760:	4b01      	ldr	r3, [pc, #4]	; (8014768 <udp_init+0x20>)
 8014762:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8014764:	bf00      	nop
 8014766:	bd80      	pop	{r7, pc}
 8014768:	200000c0 	.word	0x200000c0

0801476c <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 801476c:	b480      	push	{r7}
 801476e:	b083      	sub	sp, #12
 8014770:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8014772:	2300      	movs	r3, #0
 8014774:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8014776:	4b17      	ldr	r3, [pc, #92]	; (80147d4 <udp_new_port+0x68>)
 8014778:	881b      	ldrh	r3, [r3, #0]
 801477a:	1c5a      	adds	r2, r3, #1
 801477c:	b291      	uxth	r1, r2
 801477e:	4a15      	ldr	r2, [pc, #84]	; (80147d4 <udp_new_port+0x68>)
 8014780:	8011      	strh	r1, [r2, #0]
 8014782:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014786:	4293      	cmp	r3, r2
 8014788:	d103      	bne.n	8014792 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801478a:	4b12      	ldr	r3, [pc, #72]	; (80147d4 <udp_new_port+0x68>)
 801478c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8014790:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8014792:	4b11      	ldr	r3, [pc, #68]	; (80147d8 <udp_new_port+0x6c>)
 8014794:	681b      	ldr	r3, [r3, #0]
 8014796:	603b      	str	r3, [r7, #0]
 8014798:	e011      	b.n	80147be <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801479a:	683b      	ldr	r3, [r7, #0]
 801479c:	8a5a      	ldrh	r2, [r3, #18]
 801479e:	4b0d      	ldr	r3, [pc, #52]	; (80147d4 <udp_new_port+0x68>)
 80147a0:	881b      	ldrh	r3, [r3, #0]
 80147a2:	429a      	cmp	r2, r3
 80147a4:	d108      	bne.n	80147b8 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 80147a6:	88fb      	ldrh	r3, [r7, #6]
 80147a8:	3301      	adds	r3, #1
 80147aa:	80fb      	strh	r3, [r7, #6]
 80147ac:	88fb      	ldrh	r3, [r7, #6]
 80147ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80147b2:	d3e0      	bcc.n	8014776 <udp_new_port+0xa>
        return 0;
 80147b4:	2300      	movs	r3, #0
 80147b6:	e007      	b.n	80147c8 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80147b8:	683b      	ldr	r3, [r7, #0]
 80147ba:	68db      	ldr	r3, [r3, #12]
 80147bc:	603b      	str	r3, [r7, #0]
 80147be:	683b      	ldr	r3, [r7, #0]
 80147c0:	2b00      	cmp	r3, #0
 80147c2:	d1ea      	bne.n	801479a <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 80147c4:	4b03      	ldr	r3, [pc, #12]	; (80147d4 <udp_new_port+0x68>)
 80147c6:	881b      	ldrh	r3, [r3, #0]
}
 80147c8:	4618      	mov	r0, r3
 80147ca:	370c      	adds	r7, #12
 80147cc:	46bd      	mov	sp, r7
 80147ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147d2:	4770      	bx	lr
 80147d4:	200000c0 	.word	0x200000c0
 80147d8:	20013b24 	.word	0x20013b24

080147dc <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 80147dc:	b580      	push	{r7, lr}
 80147de:	b084      	sub	sp, #16
 80147e0:	af00      	add	r7, sp, #0
 80147e2:	60f8      	str	r0, [r7, #12]
 80147e4:	60b9      	str	r1, [r7, #8]
 80147e6:	4613      	mov	r3, r2
 80147e8:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 80147ea:	68fb      	ldr	r3, [r7, #12]
 80147ec:	2b00      	cmp	r3, #0
 80147ee:	d105      	bne.n	80147fc <udp_input_local_match+0x20>
 80147f0:	4b27      	ldr	r3, [pc, #156]	; (8014890 <udp_input_local_match+0xb4>)
 80147f2:	2287      	movs	r2, #135	; 0x87
 80147f4:	4927      	ldr	r1, [pc, #156]	; (8014894 <udp_input_local_match+0xb8>)
 80147f6:	4828      	ldr	r0, [pc, #160]	; (8014898 <udp_input_local_match+0xbc>)
 80147f8:	f005 fb82 	bl	8019f00 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 80147fc:	68bb      	ldr	r3, [r7, #8]
 80147fe:	2b00      	cmp	r3, #0
 8014800:	d105      	bne.n	801480e <udp_input_local_match+0x32>
 8014802:	4b23      	ldr	r3, [pc, #140]	; (8014890 <udp_input_local_match+0xb4>)
 8014804:	2288      	movs	r2, #136	; 0x88
 8014806:	4925      	ldr	r1, [pc, #148]	; (801489c <udp_input_local_match+0xc0>)
 8014808:	4823      	ldr	r0, [pc, #140]	; (8014898 <udp_input_local_match+0xbc>)
 801480a:	f005 fb79 	bl	8019f00 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801480e:	68fb      	ldr	r3, [r7, #12]
 8014810:	7a1b      	ldrb	r3, [r3, #8]
 8014812:	2b00      	cmp	r3, #0
 8014814:	d00b      	beq.n	801482e <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8014816:	68fb      	ldr	r3, [r7, #12]
 8014818:	7a1a      	ldrb	r2, [r3, #8]
 801481a:	4b21      	ldr	r3, [pc, #132]	; (80148a0 <udp_input_local_match+0xc4>)
 801481c:	685b      	ldr	r3, [r3, #4]
 801481e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8014822:	3301      	adds	r3, #1
 8014824:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8014826:	429a      	cmp	r2, r3
 8014828:	d001      	beq.n	801482e <udp_input_local_match+0x52>
    return 0;
 801482a:	2300      	movs	r3, #0
 801482c:	e02b      	b.n	8014886 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801482e:	79fb      	ldrb	r3, [r7, #7]
 8014830:	2b00      	cmp	r3, #0
 8014832:	d018      	beq.n	8014866 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8014834:	68fb      	ldr	r3, [r7, #12]
 8014836:	2b00      	cmp	r3, #0
 8014838:	d013      	beq.n	8014862 <udp_input_local_match+0x86>
 801483a:	68fb      	ldr	r3, [r7, #12]
 801483c:	681b      	ldr	r3, [r3, #0]
 801483e:	2b00      	cmp	r3, #0
 8014840:	d00f      	beq.n	8014862 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8014842:	4b17      	ldr	r3, [pc, #92]	; (80148a0 <udp_input_local_match+0xc4>)
 8014844:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8014846:	f1b3 3fff 	cmp.w	r3, #4294967295
 801484a:	d00a      	beq.n	8014862 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801484c:	68fb      	ldr	r3, [r7, #12]
 801484e:	681a      	ldr	r2, [r3, #0]
 8014850:	4b13      	ldr	r3, [pc, #76]	; (80148a0 <udp_input_local_match+0xc4>)
 8014852:	695b      	ldr	r3, [r3, #20]
 8014854:	405a      	eors	r2, r3
 8014856:	68bb      	ldr	r3, [r7, #8]
 8014858:	3308      	adds	r3, #8
 801485a:	681b      	ldr	r3, [r3, #0]
 801485c:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801485e:	2b00      	cmp	r3, #0
 8014860:	d110      	bne.n	8014884 <udp_input_local_match+0xa8>
          return 1;
 8014862:	2301      	movs	r3, #1
 8014864:	e00f      	b.n	8014886 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8014866:	68fb      	ldr	r3, [r7, #12]
 8014868:	2b00      	cmp	r3, #0
 801486a:	d009      	beq.n	8014880 <udp_input_local_match+0xa4>
 801486c:	68fb      	ldr	r3, [r7, #12]
 801486e:	681b      	ldr	r3, [r3, #0]
 8014870:	2b00      	cmp	r3, #0
 8014872:	d005      	beq.n	8014880 <udp_input_local_match+0xa4>
 8014874:	68fb      	ldr	r3, [r7, #12]
 8014876:	681a      	ldr	r2, [r3, #0]
 8014878:	4b09      	ldr	r3, [pc, #36]	; (80148a0 <udp_input_local_match+0xc4>)
 801487a:	695b      	ldr	r3, [r3, #20]
 801487c:	429a      	cmp	r2, r3
 801487e:	d101      	bne.n	8014884 <udp_input_local_match+0xa8>
        return 1;
 8014880:	2301      	movs	r3, #1
 8014882:	e000      	b.n	8014886 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8014884:	2300      	movs	r3, #0
}
 8014886:	4618      	mov	r0, r3
 8014888:	3710      	adds	r7, #16
 801488a:	46bd      	mov	sp, r7
 801488c:	bd80      	pop	{r7, pc}
 801488e:	bf00      	nop
 8014890:	0801dbfc 	.word	0x0801dbfc
 8014894:	0801dc2c 	.word	0x0801dc2c
 8014898:	0801dc50 	.word	0x0801dc50
 801489c:	0801dc78 	.word	0x0801dc78
 80148a0:	2000a050 	.word	0x2000a050

080148a4 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 80148a4:	b590      	push	{r4, r7, lr}
 80148a6:	b08d      	sub	sp, #52	; 0x34
 80148a8:	af02      	add	r7, sp, #8
 80148aa:	6078      	str	r0, [r7, #4]
 80148ac:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 80148ae:	2300      	movs	r3, #0
 80148b0:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 80148b2:	687b      	ldr	r3, [r7, #4]
 80148b4:	2b00      	cmp	r3, #0
 80148b6:	d105      	bne.n	80148c4 <udp_input+0x20>
 80148b8:	4b87      	ldr	r3, [pc, #540]	; (8014ad8 <udp_input+0x234>)
 80148ba:	22cf      	movs	r2, #207	; 0xcf
 80148bc:	4987      	ldr	r1, [pc, #540]	; (8014adc <udp_input+0x238>)
 80148be:	4888      	ldr	r0, [pc, #544]	; (8014ae0 <udp_input+0x23c>)
 80148c0:	f005 fb1e 	bl	8019f00 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 80148c4:	683b      	ldr	r3, [r7, #0]
 80148c6:	2b00      	cmp	r3, #0
 80148c8:	d105      	bne.n	80148d6 <udp_input+0x32>
 80148ca:	4b83      	ldr	r3, [pc, #524]	; (8014ad8 <udp_input+0x234>)
 80148cc:	22d0      	movs	r2, #208	; 0xd0
 80148ce:	4985      	ldr	r1, [pc, #532]	; (8014ae4 <udp_input+0x240>)
 80148d0:	4883      	ldr	r0, [pc, #524]	; (8014ae0 <udp_input+0x23c>)
 80148d2:	f005 fb15 	bl	8019f00 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 80148d6:	687b      	ldr	r3, [r7, #4]
 80148d8:	895b      	ldrh	r3, [r3, #10]
 80148da:	2b07      	cmp	r3, #7
 80148dc:	d803      	bhi.n	80148e6 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 80148de:	6878      	ldr	r0, [r7, #4]
 80148e0:	f7f9 ffd2 	bl	800e888 <pbuf_free>
    goto end;
 80148e4:	e0f0      	b.n	8014ac8 <udp_input+0x224>
  }

  udphdr = (struct udp_hdr *)p->payload;
 80148e6:	687b      	ldr	r3, [r7, #4]
 80148e8:	685b      	ldr	r3, [r3, #4]
 80148ea:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80148ec:	4b7e      	ldr	r3, [pc, #504]	; (8014ae8 <udp_input+0x244>)
 80148ee:	695b      	ldr	r3, [r3, #20]
 80148f0:	4a7d      	ldr	r2, [pc, #500]	; (8014ae8 <udp_input+0x244>)
 80148f2:	6812      	ldr	r2, [r2, #0]
 80148f4:	4611      	mov	r1, r2
 80148f6:	4618      	mov	r0, r3
 80148f8:	f004 f81c 	bl	8018934 <ip4_addr_isbroadcast_u32>
 80148fc:	4603      	mov	r3, r0
 80148fe:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8014900:	697b      	ldr	r3, [r7, #20]
 8014902:	881b      	ldrh	r3, [r3, #0]
 8014904:	b29b      	uxth	r3, r3
 8014906:	4618      	mov	r0, r3
 8014908:	f7f8 fa9c 	bl	800ce44 <lwip_htons>
 801490c:	4603      	mov	r3, r0
 801490e:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8014910:	697b      	ldr	r3, [r7, #20]
 8014912:	885b      	ldrh	r3, [r3, #2]
 8014914:	b29b      	uxth	r3, r3
 8014916:	4618      	mov	r0, r3
 8014918:	f7f8 fa94 	bl	800ce44 <lwip_htons>
 801491c:	4603      	mov	r3, r0
 801491e:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8014920:	2300      	movs	r3, #0
 8014922:	61fb      	str	r3, [r7, #28]
  prev = NULL;
 8014924:	2300      	movs	r3, #0
 8014926:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8014928:	2300      	movs	r3, #0
 801492a:	627b      	str	r3, [r7, #36]	; 0x24
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801492c:	4b6f      	ldr	r3, [pc, #444]	; (8014aec <udp_input+0x248>)
 801492e:	681b      	ldr	r3, [r3, #0]
 8014930:	61fb      	str	r3, [r7, #28]
 8014932:	e054      	b.n	80149de <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8014934:	69fb      	ldr	r3, [r7, #28]
 8014936:	8a5b      	ldrh	r3, [r3, #18]
 8014938:	89fa      	ldrh	r2, [r7, #14]
 801493a:	429a      	cmp	r2, r3
 801493c:	d14a      	bne.n	80149d4 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801493e:	7cfb      	ldrb	r3, [r7, #19]
 8014940:	461a      	mov	r2, r3
 8014942:	6839      	ldr	r1, [r7, #0]
 8014944:	69f8      	ldr	r0, [r7, #28]
 8014946:	f7ff ff49 	bl	80147dc <udp_input_local_match>
 801494a:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801494c:	2b00      	cmp	r3, #0
 801494e:	d041      	beq.n	80149d4 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8014950:	69fb      	ldr	r3, [r7, #28]
 8014952:	7c1b      	ldrb	r3, [r3, #16]
 8014954:	f003 0304 	and.w	r3, r3, #4
 8014958:	2b00      	cmp	r3, #0
 801495a:	d11d      	bne.n	8014998 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 801495c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801495e:	2b00      	cmp	r3, #0
 8014960:	d102      	bne.n	8014968 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8014962:	69fb      	ldr	r3, [r7, #28]
 8014964:	627b      	str	r3, [r7, #36]	; 0x24
 8014966:	e017      	b.n	8014998 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8014968:	7cfb      	ldrb	r3, [r7, #19]
 801496a:	2b00      	cmp	r3, #0
 801496c:	d014      	beq.n	8014998 <udp_input+0xf4>
 801496e:	4b5e      	ldr	r3, [pc, #376]	; (8014ae8 <udp_input+0x244>)
 8014970:	695b      	ldr	r3, [r3, #20]
 8014972:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014976:	d10f      	bne.n	8014998 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8014978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801497a:	681a      	ldr	r2, [r3, #0]
 801497c:	683b      	ldr	r3, [r7, #0]
 801497e:	3304      	adds	r3, #4
 8014980:	681b      	ldr	r3, [r3, #0]
 8014982:	429a      	cmp	r2, r3
 8014984:	d008      	beq.n	8014998 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8014986:	69fb      	ldr	r3, [r7, #28]
 8014988:	681a      	ldr	r2, [r3, #0]
 801498a:	683b      	ldr	r3, [r7, #0]
 801498c:	3304      	adds	r3, #4
 801498e:	681b      	ldr	r3, [r3, #0]
 8014990:	429a      	cmp	r2, r3
 8014992:	d101      	bne.n	8014998 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8014994:	69fb      	ldr	r3, [r7, #28]
 8014996:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8014998:	69fb      	ldr	r3, [r7, #28]
 801499a:	8a9b      	ldrh	r3, [r3, #20]
 801499c:	8a3a      	ldrh	r2, [r7, #16]
 801499e:	429a      	cmp	r2, r3
 80149a0:	d118      	bne.n	80149d4 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80149a2:	69fb      	ldr	r3, [r7, #28]
 80149a4:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 80149a6:	2b00      	cmp	r3, #0
 80149a8:	d005      	beq.n	80149b6 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 80149aa:	69fb      	ldr	r3, [r7, #28]
 80149ac:	685a      	ldr	r2, [r3, #4]
 80149ae:	4b4e      	ldr	r3, [pc, #312]	; (8014ae8 <udp_input+0x244>)
 80149b0:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 80149b2:	429a      	cmp	r2, r3
 80149b4:	d10e      	bne.n	80149d4 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 80149b6:	6a3b      	ldr	r3, [r7, #32]
 80149b8:	2b00      	cmp	r3, #0
 80149ba:	d014      	beq.n	80149e6 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 80149bc:	69fb      	ldr	r3, [r7, #28]
 80149be:	68da      	ldr	r2, [r3, #12]
 80149c0:	6a3b      	ldr	r3, [r7, #32]
 80149c2:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 80149c4:	4b49      	ldr	r3, [pc, #292]	; (8014aec <udp_input+0x248>)
 80149c6:	681a      	ldr	r2, [r3, #0]
 80149c8:	69fb      	ldr	r3, [r7, #28]
 80149ca:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 80149cc:	4a47      	ldr	r2, [pc, #284]	; (8014aec <udp_input+0x248>)
 80149ce:	69fb      	ldr	r3, [r7, #28]
 80149d0:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 80149d2:	e008      	b.n	80149e6 <udp_input+0x142>
      }
    }

    prev = pcb;
 80149d4:	69fb      	ldr	r3, [r7, #28]
 80149d6:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80149d8:	69fb      	ldr	r3, [r7, #28]
 80149da:	68db      	ldr	r3, [r3, #12]
 80149dc:	61fb      	str	r3, [r7, #28]
 80149de:	69fb      	ldr	r3, [r7, #28]
 80149e0:	2b00      	cmp	r3, #0
 80149e2:	d1a7      	bne.n	8014934 <udp_input+0x90>
 80149e4:	e000      	b.n	80149e8 <udp_input+0x144>
        break;
 80149e6:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 80149e8:	69fb      	ldr	r3, [r7, #28]
 80149ea:	2b00      	cmp	r3, #0
 80149ec:	d101      	bne.n	80149f2 <udp_input+0x14e>
    pcb = uncon_pcb;
 80149ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149f0:	61fb      	str	r3, [r7, #28]
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 80149f2:	69fb      	ldr	r3, [r7, #28]
 80149f4:	2b00      	cmp	r3, #0
 80149f6:	d002      	beq.n	80149fe <udp_input+0x15a>
    for_us = 1;
 80149f8:	2301      	movs	r3, #1
 80149fa:	76fb      	strb	r3, [r7, #27]
 80149fc:	e00a      	b.n	8014a14 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 80149fe:	683b      	ldr	r3, [r7, #0]
 8014a00:	3304      	adds	r3, #4
 8014a02:	681a      	ldr	r2, [r3, #0]
 8014a04:	4b38      	ldr	r3, [pc, #224]	; (8014ae8 <udp_input+0x244>)
 8014a06:	695b      	ldr	r3, [r3, #20]
 8014a08:	429a      	cmp	r2, r3
 8014a0a:	bf0c      	ite	eq
 8014a0c:	2301      	moveq	r3, #1
 8014a0e:	2300      	movne	r3, #0
 8014a10:	b2db      	uxtb	r3, r3
 8014a12:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8014a14:	7efb      	ldrb	r3, [r7, #27]
 8014a16:	2b00      	cmp	r3, #0
 8014a18:	d052      	beq.n	8014ac0 <udp_input+0x21c>
          goto chkerr;
        }
      } else
#endif /* LWIP_UDPLITE */
      {
        if (udphdr->chksum != 0) {
 8014a1a:	697b      	ldr	r3, [r7, #20]
 8014a1c:	88db      	ldrh	r3, [r3, #6]
 8014a1e:	b29b      	uxth	r3, r3
 8014a20:	2b00      	cmp	r3, #0
 8014a22:	d00b      	beq.n	8014a3c <udp_input+0x198>
          if (ip_chksum_pseudo(p, IP_PROTO_UDP, p->tot_len,
 8014a24:	687b      	ldr	r3, [r7, #4]
 8014a26:	891a      	ldrh	r2, [r3, #8]
 8014a28:	4b31      	ldr	r3, [pc, #196]	; (8014af0 <udp_input+0x24c>)
 8014a2a:	9300      	str	r3, [sp, #0]
 8014a2c:	4b31      	ldr	r3, [pc, #196]	; (8014af4 <udp_input+0x250>)
 8014a2e:	2111      	movs	r1, #17
 8014a30:	6878      	ldr	r0, [r7, #4]
 8014a32:	f7f8 fb39 	bl	800d0a8 <ip_chksum_pseudo>
 8014a36:	4603      	mov	r3, r0
 8014a38:	2b00      	cmp	r3, #0
 8014a3a:	d146      	bne.n	8014aca <udp_input+0x226>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8014a3c:	2108      	movs	r1, #8
 8014a3e:	6878      	ldr	r0, [r7, #4]
 8014a40:	f7f9 fe9c 	bl	800e77c <pbuf_remove_header>
 8014a44:	4603      	mov	r3, r0
 8014a46:	2b00      	cmp	r3, #0
 8014a48:	d00a      	beq.n	8014a60 <udp_input+0x1bc>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8014a4a:	4b23      	ldr	r3, [pc, #140]	; (8014ad8 <udp_input+0x234>)
 8014a4c:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8014a50:	4929      	ldr	r1, [pc, #164]	; (8014af8 <udp_input+0x254>)
 8014a52:	4823      	ldr	r0, [pc, #140]	; (8014ae0 <udp_input+0x23c>)
 8014a54:	f005 fa54 	bl	8019f00 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8014a58:	6878      	ldr	r0, [r7, #4]
 8014a5a:	f7f9 ff15 	bl	800e888 <pbuf_free>
      goto end;
 8014a5e:	e033      	b.n	8014ac8 <udp_input+0x224>
    }

    if (pcb != NULL) {
 8014a60:	69fb      	ldr	r3, [r7, #28]
 8014a62:	2b00      	cmp	r3, #0
 8014a64:	d012      	beq.n	8014a8c <udp_input+0x1e8>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8014a66:	69fb      	ldr	r3, [r7, #28]
 8014a68:	699b      	ldr	r3, [r3, #24]
 8014a6a:	2b00      	cmp	r3, #0
 8014a6c:	d00a      	beq.n	8014a84 <udp_input+0x1e0>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8014a6e:	69fb      	ldr	r3, [r7, #28]
 8014a70:	699c      	ldr	r4, [r3, #24]
 8014a72:	69fb      	ldr	r3, [r7, #28]
 8014a74:	69d8      	ldr	r0, [r3, #28]
 8014a76:	8a3b      	ldrh	r3, [r7, #16]
 8014a78:	9300      	str	r3, [sp, #0]
 8014a7a:	4b1e      	ldr	r3, [pc, #120]	; (8014af4 <udp_input+0x250>)
 8014a7c:	687a      	ldr	r2, [r7, #4]
 8014a7e:	69f9      	ldr	r1, [r7, #28]
 8014a80:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8014a82:	e026      	b.n	8014ad2 <udp_input+0x22e>
        pbuf_free(p);
 8014a84:	6878      	ldr	r0, [r7, #4]
 8014a86:	f7f9 feff 	bl	800e888 <pbuf_free>
        goto end;
 8014a8a:	e01d      	b.n	8014ac8 <udp_input+0x224>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8014a8c:	7cfb      	ldrb	r3, [r7, #19]
 8014a8e:	2b00      	cmp	r3, #0
 8014a90:	d112      	bne.n	8014ab8 <udp_input+0x214>
 8014a92:	4b15      	ldr	r3, [pc, #84]	; (8014ae8 <udp_input+0x244>)
 8014a94:	695b      	ldr	r3, [r3, #20]
 8014a96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014a9a:	2be0      	cmp	r3, #224	; 0xe0
 8014a9c:	d00c      	beq.n	8014ab8 <udp_input+0x214>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8014a9e:	4b12      	ldr	r3, [pc, #72]	; (8014ae8 <udp_input+0x244>)
 8014aa0:	899b      	ldrh	r3, [r3, #12]
 8014aa2:	3308      	adds	r3, #8
 8014aa4:	b29b      	uxth	r3, r3
 8014aa6:	b21b      	sxth	r3, r3
 8014aa8:	4619      	mov	r1, r3
 8014aaa:	6878      	ldr	r0, [r7, #4]
 8014aac:	f7f9 fed9 	bl	800e862 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8014ab0:	2103      	movs	r1, #3
 8014ab2:	6878      	ldr	r0, [r7, #4]
 8014ab4:	f003 fb84 	bl	80181c0 <icmp_dest_unreach>
      pbuf_free(p);
 8014ab8:	6878      	ldr	r0, [r7, #4]
 8014aba:	f7f9 fee5 	bl	800e888 <pbuf_free>
  return;
 8014abe:	e008      	b.n	8014ad2 <udp_input+0x22e>
    pbuf_free(p);
 8014ac0:	6878      	ldr	r0, [r7, #4]
 8014ac2:	f7f9 fee1 	bl	800e888 <pbuf_free>
  return;
 8014ac6:	e004      	b.n	8014ad2 <udp_input+0x22e>
 8014ac8:	e003      	b.n	8014ad2 <udp_input+0x22e>
            goto chkerr;
 8014aca:	bf00      	nop
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
              ("udp_input: UDP (or UDP Lite) datagram discarded due to failing checksum\n"));
  UDP_STATS_INC(udp.chkerr);
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
 8014acc:	6878      	ldr	r0, [r7, #4]
 8014ace:	f7f9 fedb 	bl	800e888 <pbuf_free>
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8014ad2:	372c      	adds	r7, #44	; 0x2c
 8014ad4:	46bd      	mov	sp, r7
 8014ad6:	bd90      	pop	{r4, r7, pc}
 8014ad8:	0801dbfc 	.word	0x0801dbfc
 8014adc:	0801dca0 	.word	0x0801dca0
 8014ae0:	0801dc50 	.word	0x0801dc50
 8014ae4:	0801dcb8 	.word	0x0801dcb8
 8014ae8:	2000a050 	.word	0x2000a050
 8014aec:	20013b24 	.word	0x20013b24
 8014af0:	2000a064 	.word	0x2000a064
 8014af4:	2000a060 	.word	0x2000a060
 8014af8:	0801dcd4 	.word	0x0801dcd4

08014afc <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 8014afc:	b580      	push	{r7, lr}
 8014afe:	b082      	sub	sp, #8
 8014b00:	af00      	add	r7, sp, #0
 8014b02:	6078      	str	r0, [r7, #4]
 8014b04:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 8014b06:	687b      	ldr	r3, [r7, #4]
 8014b08:	2b00      	cmp	r3, #0
 8014b0a:	d109      	bne.n	8014b20 <udp_send+0x24>
 8014b0c:	4b11      	ldr	r3, [pc, #68]	; (8014b54 <udp_send+0x58>)
 8014b0e:	f240 12d5 	movw	r2, #469	; 0x1d5
 8014b12:	4911      	ldr	r1, [pc, #68]	; (8014b58 <udp_send+0x5c>)
 8014b14:	4811      	ldr	r0, [pc, #68]	; (8014b5c <udp_send+0x60>)
 8014b16:	f005 f9f3 	bl	8019f00 <iprintf>
 8014b1a:	f06f 030f 	mvn.w	r3, #15
 8014b1e:	e015      	b.n	8014b4c <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 8014b20:	683b      	ldr	r3, [r7, #0]
 8014b22:	2b00      	cmp	r3, #0
 8014b24:	d109      	bne.n	8014b3a <udp_send+0x3e>
 8014b26:	4b0b      	ldr	r3, [pc, #44]	; (8014b54 <udp_send+0x58>)
 8014b28:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8014b2c:	490c      	ldr	r1, [pc, #48]	; (8014b60 <udp_send+0x64>)
 8014b2e:	480b      	ldr	r0, [pc, #44]	; (8014b5c <udp_send+0x60>)
 8014b30:	f005 f9e6 	bl	8019f00 <iprintf>
 8014b34:	f06f 030f 	mvn.w	r3, #15
 8014b38:	e008      	b.n	8014b4c <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 8014b3a:	687b      	ldr	r3, [r7, #4]
 8014b3c:	1d1a      	adds	r2, r3, #4
 8014b3e:	687b      	ldr	r3, [r7, #4]
 8014b40:	8a9b      	ldrh	r3, [r3, #20]
 8014b42:	6839      	ldr	r1, [r7, #0]
 8014b44:	6878      	ldr	r0, [r7, #4]
 8014b46:	f000 f80d 	bl	8014b64 <udp_sendto>
 8014b4a:	4603      	mov	r3, r0
}
 8014b4c:	4618      	mov	r0, r3
 8014b4e:	3708      	adds	r7, #8
 8014b50:	46bd      	mov	sp, r7
 8014b52:	bd80      	pop	{r7, pc}
 8014b54:	0801dbfc 	.word	0x0801dbfc
 8014b58:	0801dcf0 	.word	0x0801dcf0
 8014b5c:	0801dc50 	.word	0x0801dc50
 8014b60:	0801dd08 	.word	0x0801dd08

08014b64 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 8014b64:	b580      	push	{r7, lr}
 8014b66:	b088      	sub	sp, #32
 8014b68:	af02      	add	r7, sp, #8
 8014b6a:	60f8      	str	r0, [r7, #12]
 8014b6c:	60b9      	str	r1, [r7, #8]
 8014b6e:	607a      	str	r2, [r7, #4]
 8014b70:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 8014b72:	68fb      	ldr	r3, [r7, #12]
 8014b74:	2b00      	cmp	r3, #0
 8014b76:	d109      	bne.n	8014b8c <udp_sendto+0x28>
 8014b78:	4b23      	ldr	r3, [pc, #140]	; (8014c08 <udp_sendto+0xa4>)
 8014b7a:	f44f 7206 	mov.w	r2, #536	; 0x218
 8014b7e:	4923      	ldr	r1, [pc, #140]	; (8014c0c <udp_sendto+0xa8>)
 8014b80:	4823      	ldr	r0, [pc, #140]	; (8014c10 <udp_sendto+0xac>)
 8014b82:	f005 f9bd 	bl	8019f00 <iprintf>
 8014b86:	f06f 030f 	mvn.w	r3, #15
 8014b8a:	e038      	b.n	8014bfe <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8014b8c:	68bb      	ldr	r3, [r7, #8]
 8014b8e:	2b00      	cmp	r3, #0
 8014b90:	d109      	bne.n	8014ba6 <udp_sendto+0x42>
 8014b92:	4b1d      	ldr	r3, [pc, #116]	; (8014c08 <udp_sendto+0xa4>)
 8014b94:	f240 2219 	movw	r2, #537	; 0x219
 8014b98:	491e      	ldr	r1, [pc, #120]	; (8014c14 <udp_sendto+0xb0>)
 8014b9a:	481d      	ldr	r0, [pc, #116]	; (8014c10 <udp_sendto+0xac>)
 8014b9c:	f005 f9b0 	bl	8019f00 <iprintf>
 8014ba0:	f06f 030f 	mvn.w	r3, #15
 8014ba4:	e02b      	b.n	8014bfe <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8014ba6:	687b      	ldr	r3, [r7, #4]
 8014ba8:	2b00      	cmp	r3, #0
 8014baa:	d109      	bne.n	8014bc0 <udp_sendto+0x5c>
 8014bac:	4b16      	ldr	r3, [pc, #88]	; (8014c08 <udp_sendto+0xa4>)
 8014bae:	f240 221a 	movw	r2, #538	; 0x21a
 8014bb2:	4919      	ldr	r1, [pc, #100]	; (8014c18 <udp_sendto+0xb4>)
 8014bb4:	4816      	ldr	r0, [pc, #88]	; (8014c10 <udp_sendto+0xac>)
 8014bb6:	f005 f9a3 	bl	8019f00 <iprintf>
 8014bba:	f06f 030f 	mvn.w	r3, #15
 8014bbe:	e01e      	b.n	8014bfe <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8014bc0:	68fb      	ldr	r3, [r7, #12]
 8014bc2:	7a1b      	ldrb	r3, [r3, #8]
 8014bc4:	2b00      	cmp	r3, #0
 8014bc6:	d006      	beq.n	8014bd6 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 8014bc8:	68fb      	ldr	r3, [r7, #12]
 8014bca:	7a1b      	ldrb	r3, [r3, #8]
 8014bcc:	4618      	mov	r0, r3
 8014bce:	f7f9 fac9 	bl	800e164 <netif_get_by_index>
 8014bd2:	6178      	str	r0, [r7, #20]
 8014bd4:	e003      	b.n	8014bde <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 8014bd6:	6878      	ldr	r0, [r7, #4]
 8014bd8:	f003 fb86 	bl	80182e8 <ip4_route>
 8014bdc:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 8014bde:	697b      	ldr	r3, [r7, #20]
 8014be0:	2b00      	cmp	r3, #0
 8014be2:	d102      	bne.n	8014bea <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8014be4:	f06f 0303 	mvn.w	r3, #3
 8014be8:	e009      	b.n	8014bfe <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 8014bea:	887a      	ldrh	r2, [r7, #2]
 8014bec:	697b      	ldr	r3, [r7, #20]
 8014bee:	9300      	str	r3, [sp, #0]
 8014bf0:	4613      	mov	r3, r2
 8014bf2:	687a      	ldr	r2, [r7, #4]
 8014bf4:	68b9      	ldr	r1, [r7, #8]
 8014bf6:	68f8      	ldr	r0, [r7, #12]
 8014bf8:	f000 f810 	bl	8014c1c <udp_sendto_if>
 8014bfc:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8014bfe:	4618      	mov	r0, r3
 8014c00:	3718      	adds	r7, #24
 8014c02:	46bd      	mov	sp, r7
 8014c04:	bd80      	pop	{r7, pc}
 8014c06:	bf00      	nop
 8014c08:	0801dbfc 	.word	0x0801dbfc
 8014c0c:	0801dd20 	.word	0x0801dd20
 8014c10:	0801dc50 	.word	0x0801dc50
 8014c14:	0801dd38 	.word	0x0801dd38
 8014c18:	0801dd54 	.word	0x0801dd54

08014c1c <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8014c1c:	b580      	push	{r7, lr}
 8014c1e:	b088      	sub	sp, #32
 8014c20:	af02      	add	r7, sp, #8
 8014c22:	60f8      	str	r0, [r7, #12]
 8014c24:	60b9      	str	r1, [r7, #8]
 8014c26:	607a      	str	r2, [r7, #4]
 8014c28:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8014c2a:	68fb      	ldr	r3, [r7, #12]
 8014c2c:	2b00      	cmp	r3, #0
 8014c2e:	d109      	bne.n	8014c44 <udp_sendto_if+0x28>
 8014c30:	4b2e      	ldr	r3, [pc, #184]	; (8014cec <udp_sendto_if+0xd0>)
 8014c32:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014c36:	492e      	ldr	r1, [pc, #184]	; (8014cf0 <udp_sendto_if+0xd4>)
 8014c38:	482e      	ldr	r0, [pc, #184]	; (8014cf4 <udp_sendto_if+0xd8>)
 8014c3a:	f005 f961 	bl	8019f00 <iprintf>
 8014c3e:	f06f 030f 	mvn.w	r3, #15
 8014c42:	e04f      	b.n	8014ce4 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8014c44:	68bb      	ldr	r3, [r7, #8]
 8014c46:	2b00      	cmp	r3, #0
 8014c48:	d109      	bne.n	8014c5e <udp_sendto_if+0x42>
 8014c4a:	4b28      	ldr	r3, [pc, #160]	; (8014cec <udp_sendto_if+0xd0>)
 8014c4c:	f240 2281 	movw	r2, #641	; 0x281
 8014c50:	4929      	ldr	r1, [pc, #164]	; (8014cf8 <udp_sendto_if+0xdc>)
 8014c52:	4828      	ldr	r0, [pc, #160]	; (8014cf4 <udp_sendto_if+0xd8>)
 8014c54:	f005 f954 	bl	8019f00 <iprintf>
 8014c58:	f06f 030f 	mvn.w	r3, #15
 8014c5c:	e042      	b.n	8014ce4 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8014c5e:	687b      	ldr	r3, [r7, #4]
 8014c60:	2b00      	cmp	r3, #0
 8014c62:	d109      	bne.n	8014c78 <udp_sendto_if+0x5c>
 8014c64:	4b21      	ldr	r3, [pc, #132]	; (8014cec <udp_sendto_if+0xd0>)
 8014c66:	f240 2282 	movw	r2, #642	; 0x282
 8014c6a:	4924      	ldr	r1, [pc, #144]	; (8014cfc <udp_sendto_if+0xe0>)
 8014c6c:	4821      	ldr	r0, [pc, #132]	; (8014cf4 <udp_sendto_if+0xd8>)
 8014c6e:	f005 f947 	bl	8019f00 <iprintf>
 8014c72:	f06f 030f 	mvn.w	r3, #15
 8014c76:	e035      	b.n	8014ce4 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8014c78:	6a3b      	ldr	r3, [r7, #32]
 8014c7a:	2b00      	cmp	r3, #0
 8014c7c:	d109      	bne.n	8014c92 <udp_sendto_if+0x76>
 8014c7e:	4b1b      	ldr	r3, [pc, #108]	; (8014cec <udp_sendto_if+0xd0>)
 8014c80:	f240 2283 	movw	r2, #643	; 0x283
 8014c84:	491e      	ldr	r1, [pc, #120]	; (8014d00 <udp_sendto_if+0xe4>)
 8014c86:	481b      	ldr	r0, [pc, #108]	; (8014cf4 <udp_sendto_if+0xd8>)
 8014c88:	f005 f93a 	bl	8019f00 <iprintf>
 8014c8c:	f06f 030f 	mvn.w	r3, #15
 8014c90:	e028      	b.n	8014ce4 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8014c92:	68fb      	ldr	r3, [r7, #12]
 8014c94:	2b00      	cmp	r3, #0
 8014c96:	d009      	beq.n	8014cac <udp_sendto_if+0x90>
 8014c98:	68fb      	ldr	r3, [r7, #12]
 8014c9a:	681b      	ldr	r3, [r3, #0]
 8014c9c:	2b00      	cmp	r3, #0
 8014c9e:	d005      	beq.n	8014cac <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8014ca0:	68fb      	ldr	r3, [r7, #12]
 8014ca2:	681b      	ldr	r3, [r3, #0]
 8014ca4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8014ca8:	2be0      	cmp	r3, #224	; 0xe0
 8014caa:	d103      	bne.n	8014cb4 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8014cac:	6a3b      	ldr	r3, [r7, #32]
 8014cae:	3304      	adds	r3, #4
 8014cb0:	617b      	str	r3, [r7, #20]
 8014cb2:	e00b      	b.n	8014ccc <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8014cb4:	68fb      	ldr	r3, [r7, #12]
 8014cb6:	681a      	ldr	r2, [r3, #0]
 8014cb8:	6a3b      	ldr	r3, [r7, #32]
 8014cba:	3304      	adds	r3, #4
 8014cbc:	681b      	ldr	r3, [r3, #0]
 8014cbe:	429a      	cmp	r2, r3
 8014cc0:	d002      	beq.n	8014cc8 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8014cc2:	f06f 0303 	mvn.w	r3, #3
 8014cc6:	e00d      	b.n	8014ce4 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8014cc8:	68fb      	ldr	r3, [r7, #12]
 8014cca:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8014ccc:	887a      	ldrh	r2, [r7, #2]
 8014cce:	697b      	ldr	r3, [r7, #20]
 8014cd0:	9301      	str	r3, [sp, #4]
 8014cd2:	6a3b      	ldr	r3, [r7, #32]
 8014cd4:	9300      	str	r3, [sp, #0]
 8014cd6:	4613      	mov	r3, r2
 8014cd8:	687a      	ldr	r2, [r7, #4]
 8014cda:	68b9      	ldr	r1, [r7, #8]
 8014cdc:	68f8      	ldr	r0, [r7, #12]
 8014cde:	f000 f811 	bl	8014d04 <udp_sendto_if_src>
 8014ce2:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8014ce4:	4618      	mov	r0, r3
 8014ce6:	3718      	adds	r7, #24
 8014ce8:	46bd      	mov	sp, r7
 8014cea:	bd80      	pop	{r7, pc}
 8014cec:	0801dbfc 	.word	0x0801dbfc
 8014cf0:	0801dd70 	.word	0x0801dd70
 8014cf4:	0801dc50 	.word	0x0801dc50
 8014cf8:	0801dd8c 	.word	0x0801dd8c
 8014cfc:	0801dda8 	.word	0x0801dda8
 8014d00:	0801ddc8 	.word	0x0801ddc8

08014d04 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8014d04:	b580      	push	{r7, lr}
 8014d06:	b08c      	sub	sp, #48	; 0x30
 8014d08:	af04      	add	r7, sp, #16
 8014d0a:	60f8      	str	r0, [r7, #12]
 8014d0c:	60b9      	str	r1, [r7, #8]
 8014d0e:	607a      	str	r2, [r7, #4]
 8014d10:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8014d12:	68fb      	ldr	r3, [r7, #12]
 8014d14:	2b00      	cmp	r3, #0
 8014d16:	d109      	bne.n	8014d2c <udp_sendto_if_src+0x28>
 8014d18:	4b65      	ldr	r3, [pc, #404]	; (8014eb0 <udp_sendto_if_src+0x1ac>)
 8014d1a:	f240 22d1 	movw	r2, #721	; 0x2d1
 8014d1e:	4965      	ldr	r1, [pc, #404]	; (8014eb4 <udp_sendto_if_src+0x1b0>)
 8014d20:	4865      	ldr	r0, [pc, #404]	; (8014eb8 <udp_sendto_if_src+0x1b4>)
 8014d22:	f005 f8ed 	bl	8019f00 <iprintf>
 8014d26:	f06f 030f 	mvn.w	r3, #15
 8014d2a:	e0bc      	b.n	8014ea6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8014d2c:	68bb      	ldr	r3, [r7, #8]
 8014d2e:	2b00      	cmp	r3, #0
 8014d30:	d109      	bne.n	8014d46 <udp_sendto_if_src+0x42>
 8014d32:	4b5f      	ldr	r3, [pc, #380]	; (8014eb0 <udp_sendto_if_src+0x1ac>)
 8014d34:	f240 22d2 	movw	r2, #722	; 0x2d2
 8014d38:	4960      	ldr	r1, [pc, #384]	; (8014ebc <udp_sendto_if_src+0x1b8>)
 8014d3a:	485f      	ldr	r0, [pc, #380]	; (8014eb8 <udp_sendto_if_src+0x1b4>)
 8014d3c:	f005 f8e0 	bl	8019f00 <iprintf>
 8014d40:	f06f 030f 	mvn.w	r3, #15
 8014d44:	e0af      	b.n	8014ea6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8014d46:	687b      	ldr	r3, [r7, #4]
 8014d48:	2b00      	cmp	r3, #0
 8014d4a:	d109      	bne.n	8014d60 <udp_sendto_if_src+0x5c>
 8014d4c:	4b58      	ldr	r3, [pc, #352]	; (8014eb0 <udp_sendto_if_src+0x1ac>)
 8014d4e:	f240 22d3 	movw	r2, #723	; 0x2d3
 8014d52:	495b      	ldr	r1, [pc, #364]	; (8014ec0 <udp_sendto_if_src+0x1bc>)
 8014d54:	4858      	ldr	r0, [pc, #352]	; (8014eb8 <udp_sendto_if_src+0x1b4>)
 8014d56:	f005 f8d3 	bl	8019f00 <iprintf>
 8014d5a:	f06f 030f 	mvn.w	r3, #15
 8014d5e:	e0a2      	b.n	8014ea6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8014d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014d62:	2b00      	cmp	r3, #0
 8014d64:	d109      	bne.n	8014d7a <udp_sendto_if_src+0x76>
 8014d66:	4b52      	ldr	r3, [pc, #328]	; (8014eb0 <udp_sendto_if_src+0x1ac>)
 8014d68:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8014d6c:	4955      	ldr	r1, [pc, #340]	; (8014ec4 <udp_sendto_if_src+0x1c0>)
 8014d6e:	4852      	ldr	r0, [pc, #328]	; (8014eb8 <udp_sendto_if_src+0x1b4>)
 8014d70:	f005 f8c6 	bl	8019f00 <iprintf>
 8014d74:	f06f 030f 	mvn.w	r3, #15
 8014d78:	e095      	b.n	8014ea6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8014d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d7c:	2b00      	cmp	r3, #0
 8014d7e:	d109      	bne.n	8014d94 <udp_sendto_if_src+0x90>
 8014d80:	4b4b      	ldr	r3, [pc, #300]	; (8014eb0 <udp_sendto_if_src+0x1ac>)
 8014d82:	f240 22d5 	movw	r2, #725	; 0x2d5
 8014d86:	4950      	ldr	r1, [pc, #320]	; (8014ec8 <udp_sendto_if_src+0x1c4>)
 8014d88:	484b      	ldr	r0, [pc, #300]	; (8014eb8 <udp_sendto_if_src+0x1b4>)
 8014d8a:	f005 f8b9 	bl	8019f00 <iprintf>
 8014d8e:	f06f 030f 	mvn.w	r3, #15
 8014d92:	e088      	b.n	8014ea6 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8014d94:	68fb      	ldr	r3, [r7, #12]
 8014d96:	8a5b      	ldrh	r3, [r3, #18]
 8014d98:	2b00      	cmp	r3, #0
 8014d9a:	d10f      	bne.n	8014dbc <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8014d9c:	68f9      	ldr	r1, [r7, #12]
 8014d9e:	68fb      	ldr	r3, [r7, #12]
 8014da0:	8a5b      	ldrh	r3, [r3, #18]
 8014da2:	461a      	mov	r2, r3
 8014da4:	68f8      	ldr	r0, [r7, #12]
 8014da6:	f000 f893 	bl	8014ed0 <udp_bind>
 8014daa:	4603      	mov	r3, r0
 8014dac:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8014dae:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8014db2:	2b00      	cmp	r3, #0
 8014db4:	d002      	beq.n	8014dbc <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8014db6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8014dba:	e074      	b.n	8014ea6 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8014dbc:	68bb      	ldr	r3, [r7, #8]
 8014dbe:	891b      	ldrh	r3, [r3, #8]
 8014dc0:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8014dc4:	4293      	cmp	r3, r2
 8014dc6:	d902      	bls.n	8014dce <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8014dc8:	f04f 33ff 	mov.w	r3, #4294967295
 8014dcc:	e06b      	b.n	8014ea6 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8014dce:	2108      	movs	r1, #8
 8014dd0:	68b8      	ldr	r0, [r7, #8]
 8014dd2:	f7f9 fcc3 	bl	800e75c <pbuf_add_header>
 8014dd6:	4603      	mov	r3, r0
 8014dd8:	2b00      	cmp	r3, #0
 8014dda:	d015      	beq.n	8014e08 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8014ddc:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014de0:	2108      	movs	r1, #8
 8014de2:	2022      	movs	r0, #34	; 0x22
 8014de4:	f7f9 fa68 	bl	800e2b8 <pbuf_alloc>
 8014de8:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8014dea:	69fb      	ldr	r3, [r7, #28]
 8014dec:	2b00      	cmp	r3, #0
 8014dee:	d102      	bne.n	8014df6 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8014df0:	f04f 33ff 	mov.w	r3, #4294967295
 8014df4:	e057      	b.n	8014ea6 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 8014df6:	68bb      	ldr	r3, [r7, #8]
 8014df8:	891b      	ldrh	r3, [r3, #8]
 8014dfa:	2b00      	cmp	r3, #0
 8014dfc:	d006      	beq.n	8014e0c <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8014dfe:	68b9      	ldr	r1, [r7, #8]
 8014e00:	69f8      	ldr	r0, [r7, #28]
 8014e02:	f7f9 fe65 	bl	800ead0 <pbuf_chain>
 8014e06:	e001      	b.n	8014e0c <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8014e08:	68bb      	ldr	r3, [r7, #8]
 8014e0a:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8014e0c:	69fb      	ldr	r3, [r7, #28]
 8014e0e:	895b      	ldrh	r3, [r3, #10]
 8014e10:	2b07      	cmp	r3, #7
 8014e12:	d806      	bhi.n	8014e22 <udp_sendto_if_src+0x11e>
 8014e14:	4b26      	ldr	r3, [pc, #152]	; (8014eb0 <udp_sendto_if_src+0x1ac>)
 8014e16:	f240 320d 	movw	r2, #781	; 0x30d
 8014e1a:	492c      	ldr	r1, [pc, #176]	; (8014ecc <udp_sendto_if_src+0x1c8>)
 8014e1c:	4826      	ldr	r0, [pc, #152]	; (8014eb8 <udp_sendto_if_src+0x1b4>)
 8014e1e:	f005 f86f 	bl	8019f00 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8014e22:	69fb      	ldr	r3, [r7, #28]
 8014e24:	685b      	ldr	r3, [r3, #4]
 8014e26:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8014e28:	68fb      	ldr	r3, [r7, #12]
 8014e2a:	8a5b      	ldrh	r3, [r3, #18]
 8014e2c:	4618      	mov	r0, r3
 8014e2e:	f7f8 f809 	bl	800ce44 <lwip_htons>
 8014e32:	4603      	mov	r3, r0
 8014e34:	461a      	mov	r2, r3
 8014e36:	697b      	ldr	r3, [r7, #20]
 8014e38:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8014e3a:	887b      	ldrh	r3, [r7, #2]
 8014e3c:	4618      	mov	r0, r3
 8014e3e:	f7f8 f801 	bl	800ce44 <lwip_htons>
 8014e42:	4603      	mov	r3, r0
 8014e44:	461a      	mov	r2, r3
 8014e46:	697b      	ldr	r3, [r7, #20]
 8014e48:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8014e4a:	697b      	ldr	r3, [r7, #20]
 8014e4c:	2200      	movs	r2, #0
 8014e4e:	719a      	strb	r2, [r3, #6]
 8014e50:	2200      	movs	r2, #0
 8014e52:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8014e54:	69fb      	ldr	r3, [r7, #28]
 8014e56:	891b      	ldrh	r3, [r3, #8]
 8014e58:	4618      	mov	r0, r3
 8014e5a:	f7f7 fff3 	bl	800ce44 <lwip_htons>
 8014e5e:	4603      	mov	r3, r0
 8014e60:	461a      	mov	r2, r3
 8014e62:	697b      	ldr	r3, [r7, #20]
 8014e64:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8014e66:	2311      	movs	r3, #17
 8014e68:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8014e6a:	68fb      	ldr	r3, [r7, #12]
 8014e6c:	7adb      	ldrb	r3, [r3, #11]
 8014e6e:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8014e70:	68fb      	ldr	r3, [r7, #12]
 8014e72:	7a9b      	ldrb	r3, [r3, #10]
 8014e74:	7cb9      	ldrb	r1, [r7, #18]
 8014e76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014e78:	9202      	str	r2, [sp, #8]
 8014e7a:	7cfa      	ldrb	r2, [r7, #19]
 8014e7c:	9201      	str	r2, [sp, #4]
 8014e7e:	9300      	str	r3, [sp, #0]
 8014e80:	460b      	mov	r3, r1
 8014e82:	687a      	ldr	r2, [r7, #4]
 8014e84:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014e86:	69f8      	ldr	r0, [r7, #28]
 8014e88:	f003 fc40 	bl	801870c <ip4_output_if_src>
 8014e8c:	4603      	mov	r3, r0
 8014e8e:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8014e90:	69fa      	ldr	r2, [r7, #28]
 8014e92:	68bb      	ldr	r3, [r7, #8]
 8014e94:	429a      	cmp	r2, r3
 8014e96:	d004      	beq.n	8014ea2 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8014e98:	69f8      	ldr	r0, [r7, #28]
 8014e9a:	f7f9 fcf5 	bl	800e888 <pbuf_free>
    q = NULL;
 8014e9e:	2300      	movs	r3, #0
 8014ea0:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8014ea2:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8014ea6:	4618      	mov	r0, r3
 8014ea8:	3720      	adds	r7, #32
 8014eaa:	46bd      	mov	sp, r7
 8014eac:	bd80      	pop	{r7, pc}
 8014eae:	bf00      	nop
 8014eb0:	0801dbfc 	.word	0x0801dbfc
 8014eb4:	0801dde8 	.word	0x0801dde8
 8014eb8:	0801dc50 	.word	0x0801dc50
 8014ebc:	0801de08 	.word	0x0801de08
 8014ec0:	0801de28 	.word	0x0801de28
 8014ec4:	0801de4c 	.word	0x0801de4c
 8014ec8:	0801de70 	.word	0x0801de70
 8014ecc:	0801de94 	.word	0x0801de94

08014ed0 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8014ed0:	b580      	push	{r7, lr}
 8014ed2:	b086      	sub	sp, #24
 8014ed4:	af00      	add	r7, sp, #0
 8014ed6:	60f8      	str	r0, [r7, #12]
 8014ed8:	60b9      	str	r1, [r7, #8]
 8014eda:	4613      	mov	r3, r2
 8014edc:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8014ede:	68bb      	ldr	r3, [r7, #8]
 8014ee0:	2b00      	cmp	r3, #0
 8014ee2:	d101      	bne.n	8014ee8 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8014ee4:	4b39      	ldr	r3, [pc, #228]	; (8014fcc <udp_bind+0xfc>)
 8014ee6:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8014ee8:	68fb      	ldr	r3, [r7, #12]
 8014eea:	2b00      	cmp	r3, #0
 8014eec:	d109      	bne.n	8014f02 <udp_bind+0x32>
 8014eee:	4b38      	ldr	r3, [pc, #224]	; (8014fd0 <udp_bind+0x100>)
 8014ef0:	f240 32b7 	movw	r2, #951	; 0x3b7
 8014ef4:	4937      	ldr	r1, [pc, #220]	; (8014fd4 <udp_bind+0x104>)
 8014ef6:	4838      	ldr	r0, [pc, #224]	; (8014fd8 <udp_bind+0x108>)
 8014ef8:	f005 f802 	bl	8019f00 <iprintf>
 8014efc:	f06f 030f 	mvn.w	r3, #15
 8014f00:	e060      	b.n	8014fc4 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8014f02:	2300      	movs	r3, #0
 8014f04:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014f06:	4b35      	ldr	r3, [pc, #212]	; (8014fdc <udp_bind+0x10c>)
 8014f08:	681b      	ldr	r3, [r3, #0]
 8014f0a:	617b      	str	r3, [r7, #20]
 8014f0c:	e009      	b.n	8014f22 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8014f0e:	68fa      	ldr	r2, [r7, #12]
 8014f10:	697b      	ldr	r3, [r7, #20]
 8014f12:	429a      	cmp	r2, r3
 8014f14:	d102      	bne.n	8014f1c <udp_bind+0x4c>
      rebind = 1;
 8014f16:	2301      	movs	r3, #1
 8014f18:	74fb      	strb	r3, [r7, #19]
      break;
 8014f1a:	e005      	b.n	8014f28 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014f1c:	697b      	ldr	r3, [r7, #20]
 8014f1e:	68db      	ldr	r3, [r3, #12]
 8014f20:	617b      	str	r3, [r7, #20]
 8014f22:	697b      	ldr	r3, [r7, #20]
 8014f24:	2b00      	cmp	r3, #0
 8014f26:	d1f2      	bne.n	8014f0e <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8014f28:	88fb      	ldrh	r3, [r7, #6]
 8014f2a:	2b00      	cmp	r3, #0
 8014f2c:	d109      	bne.n	8014f42 <udp_bind+0x72>
    port = udp_new_port();
 8014f2e:	f7ff fc1d 	bl	801476c <udp_new_port>
 8014f32:	4603      	mov	r3, r0
 8014f34:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8014f36:	88fb      	ldrh	r3, [r7, #6]
 8014f38:	2b00      	cmp	r3, #0
 8014f3a:	d12c      	bne.n	8014f96 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8014f3c:	f06f 0307 	mvn.w	r3, #7
 8014f40:	e040      	b.n	8014fc4 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014f42:	4b26      	ldr	r3, [pc, #152]	; (8014fdc <udp_bind+0x10c>)
 8014f44:	681b      	ldr	r3, [r3, #0]
 8014f46:	617b      	str	r3, [r7, #20]
 8014f48:	e022      	b.n	8014f90 <udp_bind+0xc0>
      if (pcb != ipcb) {
 8014f4a:	68fa      	ldr	r2, [r7, #12]
 8014f4c:	697b      	ldr	r3, [r7, #20]
 8014f4e:	429a      	cmp	r2, r3
 8014f50:	d01b      	beq.n	8014f8a <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8014f52:	697b      	ldr	r3, [r7, #20]
 8014f54:	8a5b      	ldrh	r3, [r3, #18]
 8014f56:	88fa      	ldrh	r2, [r7, #6]
 8014f58:	429a      	cmp	r2, r3
 8014f5a:	d116      	bne.n	8014f8a <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8014f5c:	697b      	ldr	r3, [r7, #20]
 8014f5e:	681a      	ldr	r2, [r3, #0]
 8014f60:	68bb      	ldr	r3, [r7, #8]
 8014f62:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8014f64:	429a      	cmp	r2, r3
 8014f66:	d00d      	beq.n	8014f84 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8014f68:	68bb      	ldr	r3, [r7, #8]
 8014f6a:	2b00      	cmp	r3, #0
 8014f6c:	d00a      	beq.n	8014f84 <udp_bind+0xb4>
 8014f6e:	68bb      	ldr	r3, [r7, #8]
 8014f70:	681b      	ldr	r3, [r3, #0]
 8014f72:	2b00      	cmp	r3, #0
 8014f74:	d006      	beq.n	8014f84 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8014f76:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8014f78:	2b00      	cmp	r3, #0
 8014f7a:	d003      	beq.n	8014f84 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8014f7c:	697b      	ldr	r3, [r7, #20]
 8014f7e:	681b      	ldr	r3, [r3, #0]
 8014f80:	2b00      	cmp	r3, #0
 8014f82:	d102      	bne.n	8014f8a <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8014f84:	f06f 0307 	mvn.w	r3, #7
 8014f88:	e01c      	b.n	8014fc4 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014f8a:	697b      	ldr	r3, [r7, #20]
 8014f8c:	68db      	ldr	r3, [r3, #12]
 8014f8e:	617b      	str	r3, [r7, #20]
 8014f90:	697b      	ldr	r3, [r7, #20]
 8014f92:	2b00      	cmp	r3, #0
 8014f94:	d1d9      	bne.n	8014f4a <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8014f96:	68bb      	ldr	r3, [r7, #8]
 8014f98:	2b00      	cmp	r3, #0
 8014f9a:	d002      	beq.n	8014fa2 <udp_bind+0xd2>
 8014f9c:	68bb      	ldr	r3, [r7, #8]
 8014f9e:	681b      	ldr	r3, [r3, #0]
 8014fa0:	e000      	b.n	8014fa4 <udp_bind+0xd4>
 8014fa2:	2300      	movs	r3, #0
 8014fa4:	68fa      	ldr	r2, [r7, #12]
 8014fa6:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8014fa8:	68fb      	ldr	r3, [r7, #12]
 8014faa:	88fa      	ldrh	r2, [r7, #6]
 8014fac:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8014fae:	7cfb      	ldrb	r3, [r7, #19]
 8014fb0:	2b00      	cmp	r3, #0
 8014fb2:	d106      	bne.n	8014fc2 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8014fb4:	4b09      	ldr	r3, [pc, #36]	; (8014fdc <udp_bind+0x10c>)
 8014fb6:	681a      	ldr	r2, [r3, #0]
 8014fb8:	68fb      	ldr	r3, [r7, #12]
 8014fba:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8014fbc:	4a07      	ldr	r2, [pc, #28]	; (8014fdc <udp_bind+0x10c>)
 8014fbe:	68fb      	ldr	r3, [r7, #12]
 8014fc0:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8014fc2:	2300      	movs	r3, #0
}
 8014fc4:	4618      	mov	r0, r3
 8014fc6:	3718      	adds	r7, #24
 8014fc8:	46bd      	mov	sp, r7
 8014fca:	bd80      	pop	{r7, pc}
 8014fcc:	0806a428 	.word	0x0806a428
 8014fd0:	0801dbfc 	.word	0x0801dbfc
 8014fd4:	0801dec4 	.word	0x0801dec4
 8014fd8:	0801dc50 	.word	0x0801dc50
 8014fdc:	20013b24 	.word	0x20013b24

08014fe0 <udp_bind_netif>:
 *
 * @see udp_disconnect()
 */
void
udp_bind_netif(struct udp_pcb *pcb, const struct netif *netif)
{
 8014fe0:	b480      	push	{r7}
 8014fe2:	b083      	sub	sp, #12
 8014fe4:	af00      	add	r7, sp, #0
 8014fe6:	6078      	str	r0, [r7, #4]
 8014fe8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif != NULL) {
 8014fea:	683b      	ldr	r3, [r7, #0]
 8014fec:	2b00      	cmp	r3, #0
 8014fee:	d007      	beq.n	8015000 <udp_bind_netif+0x20>
    pcb->netif_idx = netif_get_index(netif);
 8014ff0:	683b      	ldr	r3, [r7, #0]
 8014ff2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8014ff6:	3301      	adds	r3, #1
 8014ff8:	b2da      	uxtb	r2, r3
 8014ffa:	687b      	ldr	r3, [r7, #4]
 8014ffc:	721a      	strb	r2, [r3, #8]
  } else {
    pcb->netif_idx = NETIF_NO_INDEX;
  }
}
 8014ffe:	e002      	b.n	8015006 <udp_bind_netif+0x26>
    pcb->netif_idx = NETIF_NO_INDEX;
 8015000:	687b      	ldr	r3, [r7, #4]
 8015002:	2200      	movs	r2, #0
 8015004:	721a      	strb	r2, [r3, #8]
}
 8015006:	bf00      	nop
 8015008:	370c      	adds	r7, #12
 801500a:	46bd      	mov	sp, r7
 801500c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015010:	4770      	bx	lr
	...

08015014 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8015014:	b580      	push	{r7, lr}
 8015016:	b086      	sub	sp, #24
 8015018:	af00      	add	r7, sp, #0
 801501a:	60f8      	str	r0, [r7, #12]
 801501c:	60b9      	str	r1, [r7, #8]
 801501e:	4613      	mov	r3, r2
 8015020:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8015022:	68fb      	ldr	r3, [r7, #12]
 8015024:	2b00      	cmp	r3, #0
 8015026:	d109      	bne.n	801503c <udp_connect+0x28>
 8015028:	4b2c      	ldr	r3, [pc, #176]	; (80150dc <udp_connect+0xc8>)
 801502a:	f240 4235 	movw	r2, #1077	; 0x435
 801502e:	492c      	ldr	r1, [pc, #176]	; (80150e0 <udp_connect+0xcc>)
 8015030:	482c      	ldr	r0, [pc, #176]	; (80150e4 <udp_connect+0xd0>)
 8015032:	f004 ff65 	bl	8019f00 <iprintf>
 8015036:	f06f 030f 	mvn.w	r3, #15
 801503a:	e04b      	b.n	80150d4 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 801503c:	68bb      	ldr	r3, [r7, #8]
 801503e:	2b00      	cmp	r3, #0
 8015040:	d109      	bne.n	8015056 <udp_connect+0x42>
 8015042:	4b26      	ldr	r3, [pc, #152]	; (80150dc <udp_connect+0xc8>)
 8015044:	f240 4236 	movw	r2, #1078	; 0x436
 8015048:	4927      	ldr	r1, [pc, #156]	; (80150e8 <udp_connect+0xd4>)
 801504a:	4826      	ldr	r0, [pc, #152]	; (80150e4 <udp_connect+0xd0>)
 801504c:	f004 ff58 	bl	8019f00 <iprintf>
 8015050:	f06f 030f 	mvn.w	r3, #15
 8015054:	e03e      	b.n	80150d4 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8015056:	68fb      	ldr	r3, [r7, #12]
 8015058:	8a5b      	ldrh	r3, [r3, #18]
 801505a:	2b00      	cmp	r3, #0
 801505c:	d10f      	bne.n	801507e <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801505e:	68f9      	ldr	r1, [r7, #12]
 8015060:	68fb      	ldr	r3, [r7, #12]
 8015062:	8a5b      	ldrh	r3, [r3, #18]
 8015064:	461a      	mov	r2, r3
 8015066:	68f8      	ldr	r0, [r7, #12]
 8015068:	f7ff ff32 	bl	8014ed0 <udp_bind>
 801506c:	4603      	mov	r3, r0
 801506e:	75fb      	strb	r3, [r7, #23]
    if (err != ERR_OK) {
 8015070:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8015074:	2b00      	cmp	r3, #0
 8015076:	d002      	beq.n	801507e <udp_connect+0x6a>
      return err;
 8015078:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801507c:	e02a      	b.n	80150d4 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 801507e:	68bb      	ldr	r3, [r7, #8]
 8015080:	2b00      	cmp	r3, #0
 8015082:	d002      	beq.n	801508a <udp_connect+0x76>
 8015084:	68bb      	ldr	r3, [r7, #8]
 8015086:	681b      	ldr	r3, [r3, #0]
 8015088:	e000      	b.n	801508c <udp_connect+0x78>
 801508a:	2300      	movs	r3, #0
 801508c:	68fa      	ldr	r2, [r7, #12]
 801508e:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8015090:	68fb      	ldr	r3, [r7, #12]
 8015092:	88fa      	ldrh	r2, [r7, #6]
 8015094:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8015096:	68fb      	ldr	r3, [r7, #12]
 8015098:	7c1b      	ldrb	r3, [r3, #16]
 801509a:	f043 0304 	orr.w	r3, r3, #4
 801509e:	b2da      	uxtb	r2, r3
 80150a0:	68fb      	ldr	r3, [r7, #12]
 80150a2:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80150a4:	4b11      	ldr	r3, [pc, #68]	; (80150ec <udp_connect+0xd8>)
 80150a6:	681b      	ldr	r3, [r3, #0]
 80150a8:	613b      	str	r3, [r7, #16]
 80150aa:	e008      	b.n	80150be <udp_connect+0xaa>
    if (pcb == ipcb) {
 80150ac:	68fa      	ldr	r2, [r7, #12]
 80150ae:	693b      	ldr	r3, [r7, #16]
 80150b0:	429a      	cmp	r2, r3
 80150b2:	d101      	bne.n	80150b8 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 80150b4:	2300      	movs	r3, #0
 80150b6:	e00d      	b.n	80150d4 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80150b8:	693b      	ldr	r3, [r7, #16]
 80150ba:	68db      	ldr	r3, [r3, #12]
 80150bc:	613b      	str	r3, [r7, #16]
 80150be:	693b      	ldr	r3, [r7, #16]
 80150c0:	2b00      	cmp	r3, #0
 80150c2:	d1f3      	bne.n	80150ac <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 80150c4:	4b09      	ldr	r3, [pc, #36]	; (80150ec <udp_connect+0xd8>)
 80150c6:	681a      	ldr	r2, [r3, #0]
 80150c8:	68fb      	ldr	r3, [r7, #12]
 80150ca:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 80150cc:	4a07      	ldr	r2, [pc, #28]	; (80150ec <udp_connect+0xd8>)
 80150ce:	68fb      	ldr	r3, [r7, #12]
 80150d0:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 80150d2:	2300      	movs	r3, #0
}
 80150d4:	4618      	mov	r0, r3
 80150d6:	3718      	adds	r7, #24
 80150d8:	46bd      	mov	sp, r7
 80150da:	bd80      	pop	{r7, pc}
 80150dc:	0801dbfc 	.word	0x0801dbfc
 80150e0:	0801dedc 	.word	0x0801dedc
 80150e4:	0801dc50 	.word	0x0801dc50
 80150e8:	0801def8 	.word	0x0801def8
 80150ec:	20013b24 	.word	0x20013b24

080150f0 <udp_disconnect>:
 *
 * @param pcb the udp pcb to disconnect.
 */
void
udp_disconnect(struct udp_pcb *pcb)
{
 80150f0:	b580      	push	{r7, lr}
 80150f2:	b082      	sub	sp, #8
 80150f4:	af00      	add	r7, sp, #0
 80150f6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_disconnect: invalid pcb", pcb != NULL, return);
 80150f8:	687b      	ldr	r3, [r7, #4]
 80150fa:	2b00      	cmp	r3, #0
 80150fc:	d107      	bne.n	801510e <udp_disconnect+0x1e>
 80150fe:	4b0d      	ldr	r3, [pc, #52]	; (8015134 <udp_disconnect+0x44>)
 8015100:	f240 426a 	movw	r2, #1130	; 0x46a
 8015104:	490c      	ldr	r1, [pc, #48]	; (8015138 <udp_disconnect+0x48>)
 8015106:	480d      	ldr	r0, [pc, #52]	; (801513c <udp_disconnect+0x4c>)
 8015108:	f004 fefa 	bl	8019f00 <iprintf>
 801510c:	e00f      	b.n	801512e <udp_disconnect+0x3e>
#if LWIP_IPV4 && LWIP_IPV6
  if (IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    ip_addr_copy(pcb->remote_ip, *IP_ANY_TYPE);
  } else {
#endif
    ip_addr_set_any(IP_IS_V6_VAL(pcb->remote_ip), &pcb->remote_ip);
 801510e:	687b      	ldr	r3, [r7, #4]
 8015110:	2200      	movs	r2, #0
 8015112:	605a      	str	r2, [r3, #4]
#if LWIP_IPV4 && LWIP_IPV6
  }
#endif
  pcb->remote_port = 0;
 8015114:	687b      	ldr	r3, [r7, #4]
 8015116:	2200      	movs	r2, #0
 8015118:	829a      	strh	r2, [r3, #20]
  pcb->netif_idx = NETIF_NO_INDEX;
 801511a:	687b      	ldr	r3, [r7, #4]
 801511c:	2200      	movs	r2, #0
 801511e:	721a      	strb	r2, [r3, #8]
  /* mark PCB as unconnected */
  udp_clear_flags(pcb, UDP_FLAGS_CONNECTED);
 8015120:	687b      	ldr	r3, [r7, #4]
 8015122:	7c1b      	ldrb	r3, [r3, #16]
 8015124:	f023 0304 	bic.w	r3, r3, #4
 8015128:	b2da      	uxtb	r2, r3
 801512a:	687b      	ldr	r3, [r7, #4]
 801512c:	741a      	strb	r2, [r3, #16]
}
 801512e:	3708      	adds	r7, #8
 8015130:	46bd      	mov	sp, r7
 8015132:	bd80      	pop	{r7, pc}
 8015134:	0801dbfc 	.word	0x0801dbfc
 8015138:	0801df14 	.word	0x0801df14
 801513c:	0801dc50 	.word	0x0801dc50

08015140 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8015140:	b580      	push	{r7, lr}
 8015142:	b084      	sub	sp, #16
 8015144:	af00      	add	r7, sp, #0
 8015146:	60f8      	str	r0, [r7, #12]
 8015148:	60b9      	str	r1, [r7, #8]
 801514a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 801514c:	68fb      	ldr	r3, [r7, #12]
 801514e:	2b00      	cmp	r3, #0
 8015150:	d107      	bne.n	8015162 <udp_recv+0x22>
 8015152:	4b08      	ldr	r3, [pc, #32]	; (8015174 <udp_recv+0x34>)
 8015154:	f240 428a 	movw	r2, #1162	; 0x48a
 8015158:	4907      	ldr	r1, [pc, #28]	; (8015178 <udp_recv+0x38>)
 801515a:	4808      	ldr	r0, [pc, #32]	; (801517c <udp_recv+0x3c>)
 801515c:	f004 fed0 	bl	8019f00 <iprintf>
 8015160:	e005      	b.n	801516e <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8015162:	68fb      	ldr	r3, [r7, #12]
 8015164:	68ba      	ldr	r2, [r7, #8]
 8015166:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8015168:	68fb      	ldr	r3, [r7, #12]
 801516a:	687a      	ldr	r2, [r7, #4]
 801516c:	61da      	str	r2, [r3, #28]
}
 801516e:	3710      	adds	r7, #16
 8015170:	46bd      	mov	sp, r7
 8015172:	bd80      	pop	{r7, pc}
 8015174:	0801dbfc 	.word	0x0801dbfc
 8015178:	0801df30 	.word	0x0801df30
 801517c:	0801dc50 	.word	0x0801dc50

08015180 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8015180:	b580      	push	{r7, lr}
 8015182:	b084      	sub	sp, #16
 8015184:	af00      	add	r7, sp, #0
 8015186:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8015188:	687b      	ldr	r3, [r7, #4]
 801518a:	2b00      	cmp	r3, #0
 801518c:	d107      	bne.n	801519e <udp_remove+0x1e>
 801518e:	4b19      	ldr	r3, [pc, #100]	; (80151f4 <udp_remove+0x74>)
 8015190:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8015194:	4918      	ldr	r1, [pc, #96]	; (80151f8 <udp_remove+0x78>)
 8015196:	4819      	ldr	r0, [pc, #100]	; (80151fc <udp_remove+0x7c>)
 8015198:	f004 feb2 	bl	8019f00 <iprintf>
 801519c:	e026      	b.n	80151ec <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801519e:	4b18      	ldr	r3, [pc, #96]	; (8015200 <udp_remove+0x80>)
 80151a0:	681b      	ldr	r3, [r3, #0]
 80151a2:	687a      	ldr	r2, [r7, #4]
 80151a4:	429a      	cmp	r2, r3
 80151a6:	d105      	bne.n	80151b4 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 80151a8:	4b15      	ldr	r3, [pc, #84]	; (8015200 <udp_remove+0x80>)
 80151aa:	681b      	ldr	r3, [r3, #0]
 80151ac:	68db      	ldr	r3, [r3, #12]
 80151ae:	4a14      	ldr	r2, [pc, #80]	; (8015200 <udp_remove+0x80>)
 80151b0:	6013      	str	r3, [r2, #0]
 80151b2:	e017      	b.n	80151e4 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80151b4:	4b12      	ldr	r3, [pc, #72]	; (8015200 <udp_remove+0x80>)
 80151b6:	681b      	ldr	r3, [r3, #0]
 80151b8:	60fb      	str	r3, [r7, #12]
 80151ba:	e010      	b.n	80151de <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 80151bc:	68fb      	ldr	r3, [r7, #12]
 80151be:	68db      	ldr	r3, [r3, #12]
 80151c0:	2b00      	cmp	r3, #0
 80151c2:	d009      	beq.n	80151d8 <udp_remove+0x58>
 80151c4:	68fb      	ldr	r3, [r7, #12]
 80151c6:	68db      	ldr	r3, [r3, #12]
 80151c8:	687a      	ldr	r2, [r7, #4]
 80151ca:	429a      	cmp	r2, r3
 80151cc:	d104      	bne.n	80151d8 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 80151ce:	687b      	ldr	r3, [r7, #4]
 80151d0:	68da      	ldr	r2, [r3, #12]
 80151d2:	68fb      	ldr	r3, [r7, #12]
 80151d4:	60da      	str	r2, [r3, #12]
        break;
 80151d6:	e005      	b.n	80151e4 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80151d8:	68fb      	ldr	r3, [r7, #12]
 80151da:	68db      	ldr	r3, [r3, #12]
 80151dc:	60fb      	str	r3, [r7, #12]
 80151de:	68fb      	ldr	r3, [r7, #12]
 80151e0:	2b00      	cmp	r3, #0
 80151e2:	d1eb      	bne.n	80151bc <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 80151e4:	6879      	ldr	r1, [r7, #4]
 80151e6:	2000      	movs	r0, #0
 80151e8:	f7f8 fcac 	bl	800db44 <memp_free>
}
 80151ec:	3710      	adds	r7, #16
 80151ee:	46bd      	mov	sp, r7
 80151f0:	bd80      	pop	{r7, pc}
 80151f2:	bf00      	nop
 80151f4:	0801dbfc 	.word	0x0801dbfc
 80151f8:	0801df48 	.word	0x0801df48
 80151fc:	0801dc50 	.word	0x0801dc50
 8015200:	20013b24 	.word	0x20013b24

08015204 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8015204:	b580      	push	{r7, lr}
 8015206:	b082      	sub	sp, #8
 8015208:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801520a:	2000      	movs	r0, #0
 801520c:	f7f8 fc48 	bl	800daa0 <memp_malloc>
 8015210:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8015212:	687b      	ldr	r3, [r7, #4]
 8015214:	2b00      	cmp	r3, #0
 8015216:	d007      	beq.n	8015228 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8015218:	2220      	movs	r2, #32
 801521a:	2100      	movs	r1, #0
 801521c:	6878      	ldr	r0, [r7, #4]
 801521e:	f004 fd87 	bl	8019d30 <memset>
    pcb->ttl = UDP_TTL;
 8015222:	687b      	ldr	r3, [r7, #4]
 8015224:	22ff      	movs	r2, #255	; 0xff
 8015226:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8015228:	687b      	ldr	r3, [r7, #4]
}
 801522a:	4618      	mov	r0, r3
 801522c:	3708      	adds	r7, #8
 801522e:	46bd      	mov	sp, r7
 8015230:	bd80      	pop	{r7, pc}
	...

08015234 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8015234:	b480      	push	{r7}
 8015236:	b085      	sub	sp, #20
 8015238:	af00      	add	r7, sp, #0
 801523a:	6078      	str	r0, [r7, #4]
 801523c:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801523e:	687b      	ldr	r3, [r7, #4]
 8015240:	2b00      	cmp	r3, #0
 8015242:	d01e      	beq.n	8015282 <udp_netif_ip_addr_changed+0x4e>
 8015244:	687b      	ldr	r3, [r7, #4]
 8015246:	681b      	ldr	r3, [r3, #0]
 8015248:	2b00      	cmp	r3, #0
 801524a:	d01a      	beq.n	8015282 <udp_netif_ip_addr_changed+0x4e>
 801524c:	683b      	ldr	r3, [r7, #0]
 801524e:	2b00      	cmp	r3, #0
 8015250:	d017      	beq.n	8015282 <udp_netif_ip_addr_changed+0x4e>
 8015252:	683b      	ldr	r3, [r7, #0]
 8015254:	681b      	ldr	r3, [r3, #0]
 8015256:	2b00      	cmp	r3, #0
 8015258:	d013      	beq.n	8015282 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801525a:	4b0d      	ldr	r3, [pc, #52]	; (8015290 <udp_netif_ip_addr_changed+0x5c>)
 801525c:	681b      	ldr	r3, [r3, #0]
 801525e:	60fb      	str	r3, [r7, #12]
 8015260:	e00c      	b.n	801527c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8015262:	68fb      	ldr	r3, [r7, #12]
 8015264:	681a      	ldr	r2, [r3, #0]
 8015266:	687b      	ldr	r3, [r7, #4]
 8015268:	681b      	ldr	r3, [r3, #0]
 801526a:	429a      	cmp	r2, r3
 801526c:	d103      	bne.n	8015276 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801526e:	683b      	ldr	r3, [r7, #0]
 8015270:	681a      	ldr	r2, [r3, #0]
 8015272:	68fb      	ldr	r3, [r7, #12]
 8015274:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8015276:	68fb      	ldr	r3, [r7, #12]
 8015278:	68db      	ldr	r3, [r3, #12]
 801527a:	60fb      	str	r3, [r7, #12]
 801527c:	68fb      	ldr	r3, [r7, #12]
 801527e:	2b00      	cmp	r3, #0
 8015280:	d1ef      	bne.n	8015262 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8015282:	bf00      	nop
 8015284:	3714      	adds	r7, #20
 8015286:	46bd      	mov	sp, r7
 8015288:	f85d 7b04 	ldr.w	r7, [sp], #4
 801528c:	4770      	bx	lr
 801528e:	bf00      	nop
 8015290:	20013b24 	.word	0x20013b24

08015294 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 8015294:	b580      	push	{r7, lr}
 8015296:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 8015298:	4b20      	ldr	r3, [pc, #128]	; (801531c <dhcp_inc_pcb_refcount+0x88>)
 801529a:	781b      	ldrb	r3, [r3, #0]
 801529c:	2b00      	cmp	r3, #0
 801529e:	d133      	bne.n	8015308 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 80152a0:	4b1f      	ldr	r3, [pc, #124]	; (8015320 <dhcp_inc_pcb_refcount+0x8c>)
 80152a2:	681b      	ldr	r3, [r3, #0]
 80152a4:	2b00      	cmp	r3, #0
 80152a6:	d005      	beq.n	80152b4 <dhcp_inc_pcb_refcount+0x20>
 80152a8:	4b1e      	ldr	r3, [pc, #120]	; (8015324 <dhcp_inc_pcb_refcount+0x90>)
 80152aa:	22e5      	movs	r2, #229	; 0xe5
 80152ac:	491e      	ldr	r1, [pc, #120]	; (8015328 <dhcp_inc_pcb_refcount+0x94>)
 80152ae:	481f      	ldr	r0, [pc, #124]	; (801532c <dhcp_inc_pcb_refcount+0x98>)
 80152b0:	f004 fe26 	bl	8019f00 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 80152b4:	f7ff ffa6 	bl	8015204 <udp_new>
 80152b8:	4603      	mov	r3, r0
 80152ba:	4a19      	ldr	r2, [pc, #100]	; (8015320 <dhcp_inc_pcb_refcount+0x8c>)
 80152bc:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 80152be:	4b18      	ldr	r3, [pc, #96]	; (8015320 <dhcp_inc_pcb_refcount+0x8c>)
 80152c0:	681b      	ldr	r3, [r3, #0]
 80152c2:	2b00      	cmp	r3, #0
 80152c4:	d102      	bne.n	80152cc <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 80152c6:	f04f 33ff 	mov.w	r3, #4294967295
 80152ca:	e024      	b.n	8015316 <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 80152cc:	4b14      	ldr	r3, [pc, #80]	; (8015320 <dhcp_inc_pcb_refcount+0x8c>)
 80152ce:	681b      	ldr	r3, [r3, #0]
 80152d0:	7a5a      	ldrb	r2, [r3, #9]
 80152d2:	4b13      	ldr	r3, [pc, #76]	; (8015320 <dhcp_inc_pcb_refcount+0x8c>)
 80152d4:	681b      	ldr	r3, [r3, #0]
 80152d6:	f042 0220 	orr.w	r2, r2, #32
 80152da:	b2d2      	uxtb	r2, r2
 80152dc:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 80152de:	4b10      	ldr	r3, [pc, #64]	; (8015320 <dhcp_inc_pcb_refcount+0x8c>)
 80152e0:	681b      	ldr	r3, [r3, #0]
 80152e2:	2244      	movs	r2, #68	; 0x44
 80152e4:	4912      	ldr	r1, [pc, #72]	; (8015330 <dhcp_inc_pcb_refcount+0x9c>)
 80152e6:	4618      	mov	r0, r3
 80152e8:	f7ff fdf2 	bl	8014ed0 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 80152ec:	4b0c      	ldr	r3, [pc, #48]	; (8015320 <dhcp_inc_pcb_refcount+0x8c>)
 80152ee:	681b      	ldr	r3, [r3, #0]
 80152f0:	2243      	movs	r2, #67	; 0x43
 80152f2:	490f      	ldr	r1, [pc, #60]	; (8015330 <dhcp_inc_pcb_refcount+0x9c>)
 80152f4:	4618      	mov	r0, r3
 80152f6:	f7ff fe8d 	bl	8015014 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 80152fa:	4b09      	ldr	r3, [pc, #36]	; (8015320 <dhcp_inc_pcb_refcount+0x8c>)
 80152fc:	681b      	ldr	r3, [r3, #0]
 80152fe:	2200      	movs	r2, #0
 8015300:	490c      	ldr	r1, [pc, #48]	; (8015334 <dhcp_inc_pcb_refcount+0xa0>)
 8015302:	4618      	mov	r0, r3
 8015304:	f7ff ff1c 	bl	8015140 <udp_recv>
  }

  dhcp_pcb_refcount++;
 8015308:	4b04      	ldr	r3, [pc, #16]	; (801531c <dhcp_inc_pcb_refcount+0x88>)
 801530a:	781b      	ldrb	r3, [r3, #0]
 801530c:	3301      	adds	r3, #1
 801530e:	b2da      	uxtb	r2, r3
 8015310:	4b02      	ldr	r3, [pc, #8]	; (801531c <dhcp_inc_pcb_refcount+0x88>)
 8015312:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 8015314:	2300      	movs	r3, #0
}
 8015316:	4618      	mov	r0, r3
 8015318:	bd80      	pop	{r7, pc}
 801531a:	bf00      	nop
 801531c:	20013b54 	.word	0x20013b54
 8015320:	20013b50 	.word	0x20013b50
 8015324:	0801df60 	.word	0x0801df60
 8015328:	0801df98 	.word	0x0801df98
 801532c:	0801dfc0 	.word	0x0801dfc0
 8015330:	0806a428 	.word	0x0806a428
 8015334:	08016c01 	.word	0x08016c01

08015338 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 8015338:	b580      	push	{r7, lr}
 801533a:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 801533c:	4b0e      	ldr	r3, [pc, #56]	; (8015378 <dhcp_dec_pcb_refcount+0x40>)
 801533e:	781b      	ldrb	r3, [r3, #0]
 8015340:	2b00      	cmp	r3, #0
 8015342:	d105      	bne.n	8015350 <dhcp_dec_pcb_refcount+0x18>
 8015344:	4b0d      	ldr	r3, [pc, #52]	; (801537c <dhcp_dec_pcb_refcount+0x44>)
 8015346:	22ff      	movs	r2, #255	; 0xff
 8015348:	490d      	ldr	r1, [pc, #52]	; (8015380 <dhcp_dec_pcb_refcount+0x48>)
 801534a:	480e      	ldr	r0, [pc, #56]	; (8015384 <dhcp_dec_pcb_refcount+0x4c>)
 801534c:	f004 fdd8 	bl	8019f00 <iprintf>
  dhcp_pcb_refcount--;
 8015350:	4b09      	ldr	r3, [pc, #36]	; (8015378 <dhcp_dec_pcb_refcount+0x40>)
 8015352:	781b      	ldrb	r3, [r3, #0]
 8015354:	3b01      	subs	r3, #1
 8015356:	b2da      	uxtb	r2, r3
 8015358:	4b07      	ldr	r3, [pc, #28]	; (8015378 <dhcp_dec_pcb_refcount+0x40>)
 801535a:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 801535c:	4b06      	ldr	r3, [pc, #24]	; (8015378 <dhcp_dec_pcb_refcount+0x40>)
 801535e:	781b      	ldrb	r3, [r3, #0]
 8015360:	2b00      	cmp	r3, #0
 8015362:	d107      	bne.n	8015374 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 8015364:	4b08      	ldr	r3, [pc, #32]	; (8015388 <dhcp_dec_pcb_refcount+0x50>)
 8015366:	681b      	ldr	r3, [r3, #0]
 8015368:	4618      	mov	r0, r3
 801536a:	f7ff ff09 	bl	8015180 <udp_remove>
    dhcp_pcb = NULL;
 801536e:	4b06      	ldr	r3, [pc, #24]	; (8015388 <dhcp_dec_pcb_refcount+0x50>)
 8015370:	2200      	movs	r2, #0
 8015372:	601a      	str	r2, [r3, #0]
  }
}
 8015374:	bf00      	nop
 8015376:	bd80      	pop	{r7, pc}
 8015378:	20013b54 	.word	0x20013b54
 801537c:	0801df60 	.word	0x0801df60
 8015380:	0801dfe8 	.word	0x0801dfe8
 8015384:	0801dfc0 	.word	0x0801dfc0
 8015388:	20013b50 	.word	0x20013b50

0801538c <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 801538c:	b580      	push	{r7, lr}
 801538e:	b084      	sub	sp, #16
 8015390:	af00      	add	r7, sp, #0
 8015392:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015394:	687b      	ldr	r3, [r7, #4]
 8015396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015398:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 801539a:	210c      	movs	r1, #12
 801539c:	68f8      	ldr	r0, [r7, #12]
 801539e:	f001 f860 	bl	8016462 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 80153a2:	4b06      	ldr	r3, [pc, #24]	; (80153bc <dhcp_handle_nak+0x30>)
 80153a4:	4a05      	ldr	r2, [pc, #20]	; (80153bc <dhcp_handle_nak+0x30>)
 80153a6:	4905      	ldr	r1, [pc, #20]	; (80153bc <dhcp_handle_nak+0x30>)
 80153a8:	6878      	ldr	r0, [r7, #4]
 80153aa:	f7f8 fd6d 	bl	800de88 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 80153ae:	6878      	ldr	r0, [r7, #4]
 80153b0:	f000 fc48 	bl	8015c44 <dhcp_discover>
}
 80153b4:	bf00      	nop
 80153b6:	3710      	adds	r7, #16
 80153b8:	46bd      	mov	sp, r7
 80153ba:	bd80      	pop	{r7, pc}
 80153bc:	0806a428 	.word	0x0806a428

080153c0 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 80153c0:	b580      	push	{r7, lr}
 80153c2:	b084      	sub	sp, #16
 80153c4:	af00      	add	r7, sp, #0
 80153c6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80153c8:	687b      	ldr	r3, [r7, #4]
 80153ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80153cc:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 80153ce:	2108      	movs	r1, #8
 80153d0:	68f8      	ldr	r0, [r7, #12]
 80153d2:	f001 f846 	bl	8016462 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 80153d6:	68fb      	ldr	r3, [r7, #12]
 80153d8:	331c      	adds	r3, #28
 80153da:	2200      	movs	r2, #0
 80153dc:	4619      	mov	r1, r3
 80153de:	6878      	ldr	r0, [r7, #4]
 80153e0:	f002 fbc2 	bl	8017b68 <etharp_query>
 80153e4:	4603      	mov	r3, r0
 80153e6:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 80153e8:	68fb      	ldr	r3, [r7, #12]
 80153ea:	799b      	ldrb	r3, [r3, #6]
 80153ec:	2bff      	cmp	r3, #255	; 0xff
 80153ee:	d005      	beq.n	80153fc <dhcp_check+0x3c>
    dhcp->tries++;
 80153f0:	68fb      	ldr	r3, [r7, #12]
 80153f2:	799b      	ldrb	r3, [r3, #6]
 80153f4:	3301      	adds	r3, #1
 80153f6:	b2da      	uxtb	r2, r3
 80153f8:	68fb      	ldr	r3, [r7, #12]
 80153fa:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 80153fc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8015400:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8015402:	893b      	ldrh	r3, [r7, #8]
 8015404:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8015408:	4a06      	ldr	r2, [pc, #24]	; (8015424 <dhcp_check+0x64>)
 801540a:	fb82 1203 	smull	r1, r2, r2, r3
 801540e:	1152      	asrs	r2, r2, #5
 8015410:	17db      	asrs	r3, r3, #31
 8015412:	1ad3      	subs	r3, r2, r3
 8015414:	b29a      	uxth	r2, r3
 8015416:	68fb      	ldr	r3, [r7, #12]
 8015418:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 801541a:	bf00      	nop
 801541c:	3710      	adds	r7, #16
 801541e:	46bd      	mov	sp, r7
 8015420:	bd80      	pop	{r7, pc}
 8015422:	bf00      	nop
 8015424:	10624dd3 	.word	0x10624dd3

08015428 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 8015428:	b580      	push	{r7, lr}
 801542a:	b084      	sub	sp, #16
 801542c:	af00      	add	r7, sp, #0
 801542e:	6078      	str	r0, [r7, #4]
 8015430:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015432:	687b      	ldr	r3, [r7, #4]
 8015434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015436:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 8015438:	4b0c      	ldr	r3, [pc, #48]	; (801546c <dhcp_handle_offer+0x44>)
 801543a:	789b      	ldrb	r3, [r3, #2]
 801543c:	2b00      	cmp	r3, #0
 801543e:	d011      	beq.n	8015464 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 8015440:	68fb      	ldr	r3, [r7, #12]
 8015442:	2200      	movs	r2, #0
 8015444:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8015446:	4b0a      	ldr	r3, [pc, #40]	; (8015470 <dhcp_handle_offer+0x48>)
 8015448:	689b      	ldr	r3, [r3, #8]
 801544a:	4618      	mov	r0, r3
 801544c:	f7f7 fd0f 	bl	800ce6e <lwip_htonl>
 8015450:	4602      	mov	r2, r0
 8015452:	68fb      	ldr	r3, [r7, #12]
 8015454:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8015456:	683b      	ldr	r3, [r7, #0]
 8015458:	691a      	ldr	r2, [r3, #16]
 801545a:	68fb      	ldr	r3, [r7, #12]
 801545c:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 801545e:	6878      	ldr	r0, [r7, #4]
 8015460:	f000 f808 	bl	8015474 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 8015464:	bf00      	nop
 8015466:	3710      	adds	r7, #16
 8015468:	46bd      	mov	sp, r7
 801546a:	bd80      	pop	{r7, pc}
 801546c:	20013b48 	.word	0x20013b48
 8015470:	20013b28 	.word	0x20013b28

08015474 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 8015474:	b5b0      	push	{r4, r5, r7, lr}
 8015476:	b08a      	sub	sp, #40	; 0x28
 8015478:	af02      	add	r7, sp, #8
 801547a:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 801547c:	687b      	ldr	r3, [r7, #4]
 801547e:	2b00      	cmp	r3, #0
 8015480:	d109      	bne.n	8015496 <dhcp_select+0x22>
 8015482:	4b71      	ldr	r3, [pc, #452]	; (8015648 <dhcp_select+0x1d4>)
 8015484:	f240 1277 	movw	r2, #375	; 0x177
 8015488:	4970      	ldr	r1, [pc, #448]	; (801564c <dhcp_select+0x1d8>)
 801548a:	4871      	ldr	r0, [pc, #452]	; (8015650 <dhcp_select+0x1dc>)
 801548c:	f004 fd38 	bl	8019f00 <iprintf>
 8015490:	f06f 030f 	mvn.w	r3, #15
 8015494:	e0d3      	b.n	801563e <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 8015496:	687b      	ldr	r3, [r7, #4]
 8015498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801549a:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 801549c:	69bb      	ldr	r3, [r7, #24]
 801549e:	2b00      	cmp	r3, #0
 80154a0:	d109      	bne.n	80154b6 <dhcp_select+0x42>
 80154a2:	4b69      	ldr	r3, [pc, #420]	; (8015648 <dhcp_select+0x1d4>)
 80154a4:	f240 1279 	movw	r2, #377	; 0x179
 80154a8:	496a      	ldr	r1, [pc, #424]	; (8015654 <dhcp_select+0x1e0>)
 80154aa:	4869      	ldr	r0, [pc, #420]	; (8015650 <dhcp_select+0x1dc>)
 80154ac:	f004 fd28 	bl	8019f00 <iprintf>
 80154b0:	f06f 0305 	mvn.w	r3, #5
 80154b4:	e0c3      	b.n	801563e <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 80154b6:	2101      	movs	r1, #1
 80154b8:	69b8      	ldr	r0, [r7, #24]
 80154ba:	f000 ffd2 	bl	8016462 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80154be:	f107 030c 	add.w	r3, r7, #12
 80154c2:	2203      	movs	r2, #3
 80154c4:	69b9      	ldr	r1, [r7, #24]
 80154c6:	6878      	ldr	r0, [r7, #4]
 80154c8:	f001 fc64 	bl	8016d94 <dhcp_create_msg>
 80154cc:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80154ce:	697b      	ldr	r3, [r7, #20]
 80154d0:	2b00      	cmp	r3, #0
 80154d2:	f000 8085 	beq.w	80155e0 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80154d6:	697b      	ldr	r3, [r7, #20]
 80154d8:	685b      	ldr	r3, [r3, #4]
 80154da:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80154dc:	89b8      	ldrh	r0, [r7, #12]
 80154de:	693b      	ldr	r3, [r7, #16]
 80154e0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80154e4:	2302      	movs	r3, #2
 80154e6:	2239      	movs	r2, #57	; 0x39
 80154e8:	f000 ffd6 	bl	8016498 <dhcp_option>
 80154ec:	4603      	mov	r3, r0
 80154ee:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80154f0:	89b8      	ldrh	r0, [r7, #12]
 80154f2:	693b      	ldr	r3, [r7, #16]
 80154f4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80154f8:	687b      	ldr	r3, [r7, #4]
 80154fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80154fc:	461a      	mov	r2, r3
 80154fe:	f001 f825 	bl	801654c <dhcp_option_short>
 8015502:	4603      	mov	r3, r0
 8015504:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8015506:	89b8      	ldrh	r0, [r7, #12]
 8015508:	693b      	ldr	r3, [r7, #16]
 801550a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801550e:	2304      	movs	r3, #4
 8015510:	2232      	movs	r2, #50	; 0x32
 8015512:	f000 ffc1 	bl	8016498 <dhcp_option>
 8015516:	4603      	mov	r3, r0
 8015518:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801551a:	89bc      	ldrh	r4, [r7, #12]
 801551c:	693b      	ldr	r3, [r7, #16]
 801551e:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8015522:	69bb      	ldr	r3, [r7, #24]
 8015524:	69db      	ldr	r3, [r3, #28]
 8015526:	4618      	mov	r0, r3
 8015528:	f7f7 fca1 	bl	800ce6e <lwip_htonl>
 801552c:	4603      	mov	r3, r0
 801552e:	461a      	mov	r2, r3
 8015530:	4629      	mov	r1, r5
 8015532:	4620      	mov	r0, r4
 8015534:	f001 f83c 	bl	80165b0 <dhcp_option_long>
 8015538:	4603      	mov	r3, r0
 801553a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 801553c:	89b8      	ldrh	r0, [r7, #12]
 801553e:	693b      	ldr	r3, [r7, #16]
 8015540:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015544:	2304      	movs	r3, #4
 8015546:	2236      	movs	r2, #54	; 0x36
 8015548:	f000 ffa6 	bl	8016498 <dhcp_option>
 801554c:	4603      	mov	r3, r0
 801554e:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8015550:	89bc      	ldrh	r4, [r7, #12]
 8015552:	693b      	ldr	r3, [r7, #16]
 8015554:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8015558:	69bb      	ldr	r3, [r7, #24]
 801555a:	699b      	ldr	r3, [r3, #24]
 801555c:	4618      	mov	r0, r3
 801555e:	f7f7 fc86 	bl	800ce6e <lwip_htonl>
 8015562:	4603      	mov	r3, r0
 8015564:	461a      	mov	r2, r3
 8015566:	4629      	mov	r1, r5
 8015568:	4620      	mov	r0, r4
 801556a:	f001 f821 	bl	80165b0 <dhcp_option_long>
 801556e:	4603      	mov	r3, r0
 8015570:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8015572:	89b8      	ldrh	r0, [r7, #12]
 8015574:	693b      	ldr	r3, [r7, #16]
 8015576:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801557a:	2303      	movs	r3, #3
 801557c:	2237      	movs	r2, #55	; 0x37
 801557e:	f000 ff8b 	bl	8016498 <dhcp_option>
 8015582:	4603      	mov	r3, r0
 8015584:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015586:	2300      	movs	r3, #0
 8015588:	77fb      	strb	r3, [r7, #31]
 801558a:	e00e      	b.n	80155aa <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801558c:	89b8      	ldrh	r0, [r7, #12]
 801558e:	693b      	ldr	r3, [r7, #16]
 8015590:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015594:	7ffb      	ldrb	r3, [r7, #31]
 8015596:	4a30      	ldr	r2, [pc, #192]	; (8015658 <dhcp_select+0x1e4>)
 8015598:	5cd3      	ldrb	r3, [r2, r3]
 801559a:	461a      	mov	r2, r3
 801559c:	f000 ffb0 	bl	8016500 <dhcp_option_byte>
 80155a0:	4603      	mov	r3, r0
 80155a2:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80155a4:	7ffb      	ldrb	r3, [r7, #31]
 80155a6:	3301      	adds	r3, #1
 80155a8:	77fb      	strb	r3, [r7, #31]
 80155aa:	7ffb      	ldrb	r3, [r7, #31]
 80155ac:	2b02      	cmp	r3, #2
 80155ae:	d9ed      	bls.n	801558c <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80155b0:	89b8      	ldrh	r0, [r7, #12]
 80155b2:	693b      	ldr	r3, [r7, #16]
 80155b4:	33f0      	adds	r3, #240	; 0xf0
 80155b6:	697a      	ldr	r2, [r7, #20]
 80155b8:	4619      	mov	r1, r3
 80155ba:	f001 fcc1 	bl	8016f40 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80155be:	4b27      	ldr	r3, [pc, #156]	; (801565c <dhcp_select+0x1e8>)
 80155c0:	6818      	ldr	r0, [r3, #0]
 80155c2:	4b27      	ldr	r3, [pc, #156]	; (8015660 <dhcp_select+0x1ec>)
 80155c4:	9301      	str	r3, [sp, #4]
 80155c6:	687b      	ldr	r3, [r7, #4]
 80155c8:	9300      	str	r3, [sp, #0]
 80155ca:	2343      	movs	r3, #67	; 0x43
 80155cc:	4a25      	ldr	r2, [pc, #148]	; (8015664 <dhcp_select+0x1f0>)
 80155ce:	6979      	ldr	r1, [r7, #20]
 80155d0:	f7ff fb98 	bl	8014d04 <udp_sendto_if_src>
 80155d4:	4603      	mov	r3, r0
 80155d6:	77bb      	strb	r3, [r7, #30]
    pbuf_free(p_out);
 80155d8:	6978      	ldr	r0, [r7, #20]
 80155da:	f7f9 f955 	bl	800e888 <pbuf_free>
 80155de:	e001      	b.n	80155e4 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80155e0:	23ff      	movs	r3, #255	; 0xff
 80155e2:	77bb      	strb	r3, [r7, #30]
  }
  if (dhcp->tries < 255) {
 80155e4:	69bb      	ldr	r3, [r7, #24]
 80155e6:	799b      	ldrb	r3, [r3, #6]
 80155e8:	2bff      	cmp	r3, #255	; 0xff
 80155ea:	d005      	beq.n	80155f8 <dhcp_select+0x184>
    dhcp->tries++;
 80155ec:	69bb      	ldr	r3, [r7, #24]
 80155ee:	799b      	ldrb	r3, [r3, #6]
 80155f0:	3301      	adds	r3, #1
 80155f2:	b2da      	uxtb	r2, r3
 80155f4:	69bb      	ldr	r3, [r7, #24]
 80155f6:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 80155f8:	69bb      	ldr	r3, [r7, #24]
 80155fa:	799b      	ldrb	r3, [r3, #6]
 80155fc:	2b05      	cmp	r3, #5
 80155fe:	d80d      	bhi.n	801561c <dhcp_select+0x1a8>
 8015600:	69bb      	ldr	r3, [r7, #24]
 8015602:	799b      	ldrb	r3, [r3, #6]
 8015604:	461a      	mov	r2, r3
 8015606:	2301      	movs	r3, #1
 8015608:	4093      	lsls	r3, r2
 801560a:	b29b      	uxth	r3, r3
 801560c:	461a      	mov	r2, r3
 801560e:	0152      	lsls	r2, r2, #5
 8015610:	1ad2      	subs	r2, r2, r3
 8015612:	0092      	lsls	r2, r2, #2
 8015614:	4413      	add	r3, r2
 8015616:	00db      	lsls	r3, r3, #3
 8015618:	b29b      	uxth	r3, r3
 801561a:	e001      	b.n	8015620 <dhcp_select+0x1ac>
 801561c:	f64e 2360 	movw	r3, #60000	; 0xea60
 8015620:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8015622:	89fb      	ldrh	r3, [r7, #14]
 8015624:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8015628:	4a0f      	ldr	r2, [pc, #60]	; (8015668 <dhcp_select+0x1f4>)
 801562a:	fb82 1203 	smull	r1, r2, r2, r3
 801562e:	1152      	asrs	r2, r2, #5
 8015630:	17db      	asrs	r3, r3, #31
 8015632:	1ad3      	subs	r3, r2, r3
 8015634:	b29a      	uxth	r2, r3
 8015636:	69bb      	ldr	r3, [r7, #24]
 8015638:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801563a:	f997 301e 	ldrsb.w	r3, [r7, #30]
}
 801563e:	4618      	mov	r0, r3
 8015640:	3720      	adds	r7, #32
 8015642:	46bd      	mov	sp, r7
 8015644:	bdb0      	pop	{r4, r5, r7, pc}
 8015646:	bf00      	nop
 8015648:	0801df60 	.word	0x0801df60
 801564c:	0801e00c 	.word	0x0801e00c
 8015650:	0801dfc0 	.word	0x0801dfc0
 8015654:	0801e028 	.word	0x0801e028
 8015658:	200000c4 	.word	0x200000c4
 801565c:	20013b50 	.word	0x20013b50
 8015660:	0806a428 	.word	0x0806a428
 8015664:	0806a42c 	.word	0x0806a42c
 8015668:	10624dd3 	.word	0x10624dd3

0801566c <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 801566c:	b580      	push	{r7, lr}
 801566e:	b082      	sub	sp, #8
 8015670:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 8015672:	4b27      	ldr	r3, [pc, #156]	; (8015710 <dhcp_coarse_tmr+0xa4>)
 8015674:	681b      	ldr	r3, [r3, #0]
 8015676:	607b      	str	r3, [r7, #4]
 8015678:	e042      	b.n	8015700 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801567a:	687b      	ldr	r3, [r7, #4]
 801567c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801567e:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 8015680:	683b      	ldr	r3, [r7, #0]
 8015682:	2b00      	cmp	r3, #0
 8015684:	d039      	beq.n	80156fa <dhcp_coarse_tmr+0x8e>
 8015686:	683b      	ldr	r3, [r7, #0]
 8015688:	795b      	ldrb	r3, [r3, #5]
 801568a:	2b00      	cmp	r3, #0
 801568c:	d035      	beq.n	80156fa <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 801568e:	683b      	ldr	r3, [r7, #0]
 8015690:	8a9b      	ldrh	r3, [r3, #20]
 8015692:	2b00      	cmp	r3, #0
 8015694:	d012      	beq.n	80156bc <dhcp_coarse_tmr+0x50>
 8015696:	683b      	ldr	r3, [r7, #0]
 8015698:	8a5b      	ldrh	r3, [r3, #18]
 801569a:	3301      	adds	r3, #1
 801569c:	b29a      	uxth	r2, r3
 801569e:	683b      	ldr	r3, [r7, #0]
 80156a0:	825a      	strh	r2, [r3, #18]
 80156a2:	683b      	ldr	r3, [r7, #0]
 80156a4:	8a5a      	ldrh	r2, [r3, #18]
 80156a6:	683b      	ldr	r3, [r7, #0]
 80156a8:	8a9b      	ldrh	r3, [r3, #20]
 80156aa:	429a      	cmp	r2, r3
 80156ac:	d106      	bne.n	80156bc <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 80156ae:	6878      	ldr	r0, [r7, #4]
 80156b0:	f000 fe32 	bl	8016318 <dhcp_release_and_stop>
        dhcp_start(netif);
 80156b4:	6878      	ldr	r0, [r7, #4]
 80156b6:	f000 f969 	bl	801598c <dhcp_start>
 80156ba:	e01e      	b.n	80156fa <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 80156bc:	683b      	ldr	r3, [r7, #0]
 80156be:	8a1b      	ldrh	r3, [r3, #16]
 80156c0:	2b00      	cmp	r3, #0
 80156c2:	d00b      	beq.n	80156dc <dhcp_coarse_tmr+0x70>
 80156c4:	683b      	ldr	r3, [r7, #0]
 80156c6:	8a1b      	ldrh	r3, [r3, #16]
 80156c8:	1e5a      	subs	r2, r3, #1
 80156ca:	b291      	uxth	r1, r2
 80156cc:	683a      	ldr	r2, [r7, #0]
 80156ce:	8211      	strh	r1, [r2, #16]
 80156d0:	2b01      	cmp	r3, #1
 80156d2:	d103      	bne.n	80156dc <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 80156d4:	6878      	ldr	r0, [r7, #4]
 80156d6:	f000 f8c6 	bl	8015866 <dhcp_t2_timeout>
 80156da:	e00e      	b.n	80156fa <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 80156dc:	683b      	ldr	r3, [r7, #0]
 80156de:	89db      	ldrh	r3, [r3, #14]
 80156e0:	2b00      	cmp	r3, #0
 80156e2:	d00a      	beq.n	80156fa <dhcp_coarse_tmr+0x8e>
 80156e4:	683b      	ldr	r3, [r7, #0]
 80156e6:	89db      	ldrh	r3, [r3, #14]
 80156e8:	1e5a      	subs	r2, r3, #1
 80156ea:	b291      	uxth	r1, r2
 80156ec:	683a      	ldr	r2, [r7, #0]
 80156ee:	81d1      	strh	r1, [r2, #14]
 80156f0:	2b01      	cmp	r3, #1
 80156f2:	d102      	bne.n	80156fa <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 80156f4:	6878      	ldr	r0, [r7, #4]
 80156f6:	f000 f888 	bl	801580a <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 80156fa:	687b      	ldr	r3, [r7, #4]
 80156fc:	681b      	ldr	r3, [r3, #0]
 80156fe:	607b      	str	r3, [r7, #4]
 8015700:	687b      	ldr	r3, [r7, #4]
 8015702:	2b00      	cmp	r3, #0
 8015704:	d1b9      	bne.n	801567a <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 8015706:	bf00      	nop
 8015708:	bf00      	nop
 801570a:	3708      	adds	r7, #8
 801570c:	46bd      	mov	sp, r7
 801570e:	bd80      	pop	{r7, pc}
 8015710:	20013ab8 	.word	0x20013ab8

08015714 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 8015714:	b580      	push	{r7, lr}
 8015716:	b082      	sub	sp, #8
 8015718:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 801571a:	4b16      	ldr	r3, [pc, #88]	; (8015774 <dhcp_fine_tmr+0x60>)
 801571c:	681b      	ldr	r3, [r3, #0]
 801571e:	607b      	str	r3, [r7, #4]
 8015720:	e020      	b.n	8015764 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8015722:	687b      	ldr	r3, [r7, #4]
 8015724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015726:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 8015728:	683b      	ldr	r3, [r7, #0]
 801572a:	2b00      	cmp	r3, #0
 801572c:	d017      	beq.n	801575e <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 801572e:	683b      	ldr	r3, [r7, #0]
 8015730:	891b      	ldrh	r3, [r3, #8]
 8015732:	2b01      	cmp	r3, #1
 8015734:	d906      	bls.n	8015744 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 8015736:	683b      	ldr	r3, [r7, #0]
 8015738:	891b      	ldrh	r3, [r3, #8]
 801573a:	3b01      	subs	r3, #1
 801573c:	b29a      	uxth	r2, r3
 801573e:	683b      	ldr	r3, [r7, #0]
 8015740:	811a      	strh	r2, [r3, #8]
 8015742:	e00c      	b.n	801575e <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 8015744:	683b      	ldr	r3, [r7, #0]
 8015746:	891b      	ldrh	r3, [r3, #8]
 8015748:	2b01      	cmp	r3, #1
 801574a:	d108      	bne.n	801575e <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 801574c:	683b      	ldr	r3, [r7, #0]
 801574e:	891b      	ldrh	r3, [r3, #8]
 8015750:	3b01      	subs	r3, #1
 8015752:	b29a      	uxth	r2, r3
 8015754:	683b      	ldr	r3, [r7, #0]
 8015756:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 8015758:	6878      	ldr	r0, [r7, #4]
 801575a:	f000 f80d 	bl	8015778 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 801575e:	687b      	ldr	r3, [r7, #4]
 8015760:	681b      	ldr	r3, [r3, #0]
 8015762:	607b      	str	r3, [r7, #4]
 8015764:	687b      	ldr	r3, [r7, #4]
 8015766:	2b00      	cmp	r3, #0
 8015768:	d1db      	bne.n	8015722 <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 801576a:	bf00      	nop
 801576c:	bf00      	nop
 801576e:	3708      	adds	r7, #8
 8015770:	46bd      	mov	sp, r7
 8015772:	bd80      	pop	{r7, pc}
 8015774:	20013ab8 	.word	0x20013ab8

08015778 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 8015778:	b580      	push	{r7, lr}
 801577a:	b084      	sub	sp, #16
 801577c:	af00      	add	r7, sp, #0
 801577e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015780:	687b      	ldr	r3, [r7, #4]
 8015782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015784:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8015786:	68fb      	ldr	r3, [r7, #12]
 8015788:	795b      	ldrb	r3, [r3, #5]
 801578a:	2b0c      	cmp	r3, #12
 801578c:	d003      	beq.n	8015796 <dhcp_timeout+0x1e>
 801578e:	68fb      	ldr	r3, [r7, #12]
 8015790:	795b      	ldrb	r3, [r3, #5]
 8015792:	2b06      	cmp	r3, #6
 8015794:	d103      	bne.n	801579e <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 8015796:	6878      	ldr	r0, [r7, #4]
 8015798:	f000 fa54 	bl	8015c44 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 801579c:	e031      	b.n	8015802 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 801579e:	68fb      	ldr	r3, [r7, #12]
 80157a0:	795b      	ldrb	r3, [r3, #5]
 80157a2:	2b01      	cmp	r3, #1
 80157a4:	d10e      	bne.n	80157c4 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 80157a6:	68fb      	ldr	r3, [r7, #12]
 80157a8:	799b      	ldrb	r3, [r3, #6]
 80157aa:	2b05      	cmp	r3, #5
 80157ac:	d803      	bhi.n	80157b6 <dhcp_timeout+0x3e>
      dhcp_select(netif);
 80157ae:	6878      	ldr	r0, [r7, #4]
 80157b0:	f7ff fe60 	bl	8015474 <dhcp_select>
}
 80157b4:	e025      	b.n	8015802 <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 80157b6:	6878      	ldr	r0, [r7, #4]
 80157b8:	f000 fdae 	bl	8016318 <dhcp_release_and_stop>
      dhcp_start(netif);
 80157bc:	6878      	ldr	r0, [r7, #4]
 80157be:	f000 f8e5 	bl	801598c <dhcp_start>
}
 80157c2:	e01e      	b.n	8015802 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 80157c4:	68fb      	ldr	r3, [r7, #12]
 80157c6:	795b      	ldrb	r3, [r3, #5]
 80157c8:	2b08      	cmp	r3, #8
 80157ca:	d10b      	bne.n	80157e4 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 80157cc:	68fb      	ldr	r3, [r7, #12]
 80157ce:	799b      	ldrb	r3, [r3, #6]
 80157d0:	2b01      	cmp	r3, #1
 80157d2:	d803      	bhi.n	80157dc <dhcp_timeout+0x64>
      dhcp_check(netif);
 80157d4:	6878      	ldr	r0, [r7, #4]
 80157d6:	f7ff fdf3 	bl	80153c0 <dhcp_check>
}
 80157da:	e012      	b.n	8015802 <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 80157dc:	6878      	ldr	r0, [r7, #4]
 80157de:	f000 fad3 	bl	8015d88 <dhcp_bind>
}
 80157e2:	e00e      	b.n	8015802 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 80157e4:	68fb      	ldr	r3, [r7, #12]
 80157e6:	795b      	ldrb	r3, [r3, #5]
 80157e8:	2b03      	cmp	r3, #3
 80157ea:	d10a      	bne.n	8015802 <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 80157ec:	68fb      	ldr	r3, [r7, #12]
 80157ee:	799b      	ldrb	r3, [r3, #6]
 80157f0:	2b01      	cmp	r3, #1
 80157f2:	d803      	bhi.n	80157fc <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 80157f4:	6878      	ldr	r0, [r7, #4]
 80157f6:	f000 fcd9 	bl	80161ac <dhcp_reboot>
}
 80157fa:	e002      	b.n	8015802 <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 80157fc:	6878      	ldr	r0, [r7, #4]
 80157fe:	f000 fa21 	bl	8015c44 <dhcp_discover>
}
 8015802:	bf00      	nop
 8015804:	3710      	adds	r7, #16
 8015806:	46bd      	mov	sp, r7
 8015808:	bd80      	pop	{r7, pc}

0801580a <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 801580a:	b580      	push	{r7, lr}
 801580c:	b084      	sub	sp, #16
 801580e:	af00      	add	r7, sp, #0
 8015810:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015812:	687b      	ldr	r3, [r7, #4]
 8015814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015816:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8015818:	68fb      	ldr	r3, [r7, #12]
 801581a:	795b      	ldrb	r3, [r3, #5]
 801581c:	2b01      	cmp	r3, #1
 801581e:	d007      	beq.n	8015830 <dhcp_t1_timeout+0x26>
 8015820:	68fb      	ldr	r3, [r7, #12]
 8015822:	795b      	ldrb	r3, [r3, #5]
 8015824:	2b0a      	cmp	r3, #10
 8015826:	d003      	beq.n	8015830 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 8015828:	68fb      	ldr	r3, [r7, #12]
 801582a:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801582c:	2b05      	cmp	r3, #5
 801582e:	d116      	bne.n	801585e <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 8015830:	6878      	ldr	r0, [r7, #4]
 8015832:	f000 fb83 	bl	8015f3c <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8015836:	68fb      	ldr	r3, [r7, #12]
 8015838:	899b      	ldrh	r3, [r3, #12]
 801583a:	461a      	mov	r2, r3
 801583c:	68fb      	ldr	r3, [r7, #12]
 801583e:	8a5b      	ldrh	r3, [r3, #18]
 8015840:	1ad3      	subs	r3, r2, r3
 8015842:	2b01      	cmp	r3, #1
 8015844:	dd0b      	ble.n	801585e <dhcp_t1_timeout+0x54>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 8015846:	68fb      	ldr	r3, [r7, #12]
 8015848:	899b      	ldrh	r3, [r3, #12]
 801584a:	461a      	mov	r2, r3
 801584c:	68fb      	ldr	r3, [r7, #12]
 801584e:	8a5b      	ldrh	r3, [r3, #18]
 8015850:	1ad3      	subs	r3, r2, r3
 8015852:	0fda      	lsrs	r2, r3, #31
 8015854:	4413      	add	r3, r2
 8015856:	105b      	asrs	r3, r3, #1
 8015858:	b29a      	uxth	r2, r3
 801585a:	68fb      	ldr	r3, [r7, #12]
 801585c:	81da      	strh	r2, [r3, #14]
    }
  }
}
 801585e:	bf00      	nop
 8015860:	3710      	adds	r7, #16
 8015862:	46bd      	mov	sp, r7
 8015864:	bd80      	pop	{r7, pc}

08015866 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 8015866:	b580      	push	{r7, lr}
 8015868:	b084      	sub	sp, #16
 801586a:	af00      	add	r7, sp, #0
 801586c:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801586e:	687b      	ldr	r3, [r7, #4]
 8015870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015872:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8015874:	68fb      	ldr	r3, [r7, #12]
 8015876:	795b      	ldrb	r3, [r3, #5]
 8015878:	2b01      	cmp	r3, #1
 801587a:	d00b      	beq.n	8015894 <dhcp_t2_timeout+0x2e>
 801587c:	68fb      	ldr	r3, [r7, #12]
 801587e:	795b      	ldrb	r3, [r3, #5]
 8015880:	2b0a      	cmp	r3, #10
 8015882:	d007      	beq.n	8015894 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8015884:	68fb      	ldr	r3, [r7, #12]
 8015886:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8015888:	2b05      	cmp	r3, #5
 801588a:	d003      	beq.n	8015894 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 801588c:	68fb      	ldr	r3, [r7, #12]
 801588e:	795b      	ldrb	r3, [r3, #5]
 8015890:	2b04      	cmp	r3, #4
 8015892:	d116      	bne.n	80158c2 <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 8015894:	6878      	ldr	r0, [r7, #4]
 8015896:	f000 fbed 	bl	8016074 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 801589a:	68fb      	ldr	r3, [r7, #12]
 801589c:	8a9b      	ldrh	r3, [r3, #20]
 801589e:	461a      	mov	r2, r3
 80158a0:	68fb      	ldr	r3, [r7, #12]
 80158a2:	8a5b      	ldrh	r3, [r3, #18]
 80158a4:	1ad3      	subs	r3, r2, r3
 80158a6:	2b01      	cmp	r3, #1
 80158a8:	dd0b      	ble.n	80158c2 <dhcp_t2_timeout+0x5c>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 80158aa:	68fb      	ldr	r3, [r7, #12]
 80158ac:	8a9b      	ldrh	r3, [r3, #20]
 80158ae:	461a      	mov	r2, r3
 80158b0:	68fb      	ldr	r3, [r7, #12]
 80158b2:	8a5b      	ldrh	r3, [r3, #18]
 80158b4:	1ad3      	subs	r3, r2, r3
 80158b6:	0fda      	lsrs	r2, r3, #31
 80158b8:	4413      	add	r3, r2
 80158ba:	105b      	asrs	r3, r3, #1
 80158bc:	b29a      	uxth	r2, r3
 80158be:	68fb      	ldr	r3, [r7, #12]
 80158c0:	821a      	strh	r2, [r3, #16]
    }
  }
}
 80158c2:	bf00      	nop
 80158c4:	3710      	adds	r7, #16
 80158c6:	46bd      	mov	sp, r7
 80158c8:	bd80      	pop	{r7, pc}
	...

080158cc <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 80158cc:	b580      	push	{r7, lr}
 80158ce:	b084      	sub	sp, #16
 80158d0:	af00      	add	r7, sp, #0
 80158d2:	6078      	str	r0, [r7, #4]
 80158d4:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80158d6:	687b      	ldr	r3, [r7, #4]
 80158d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80158da:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 80158dc:	68fb      	ldr	r3, [r7, #12]
 80158de:	2200      	movs	r2, #0
 80158e0:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 80158e2:	68fb      	ldr	r3, [r7, #12]
 80158e4:	2200      	movs	r2, #0
 80158e6:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 80158e8:	4b26      	ldr	r3, [pc, #152]	; (8015984 <dhcp_handle_ack+0xb8>)
 80158ea:	78db      	ldrb	r3, [r3, #3]
 80158ec:	2b00      	cmp	r3, #0
 80158ee:	d003      	beq.n	80158f8 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 80158f0:	4b25      	ldr	r3, [pc, #148]	; (8015988 <dhcp_handle_ack+0xbc>)
 80158f2:	68da      	ldr	r2, [r3, #12]
 80158f4:	68fb      	ldr	r3, [r7, #12]
 80158f6:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 80158f8:	4b22      	ldr	r3, [pc, #136]	; (8015984 <dhcp_handle_ack+0xb8>)
 80158fa:	791b      	ldrb	r3, [r3, #4]
 80158fc:	2b00      	cmp	r3, #0
 80158fe:	d004      	beq.n	801590a <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8015900:	4b21      	ldr	r3, [pc, #132]	; (8015988 <dhcp_handle_ack+0xbc>)
 8015902:	691a      	ldr	r2, [r3, #16]
 8015904:	68fb      	ldr	r3, [r7, #12]
 8015906:	62da      	str	r2, [r3, #44]	; 0x2c
 8015908:	e004      	b.n	8015914 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 801590a:	68fb      	ldr	r3, [r7, #12]
 801590c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801590e:	085a      	lsrs	r2, r3, #1
 8015910:	68fb      	ldr	r3, [r7, #12]
 8015912:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 8015914:	4b1b      	ldr	r3, [pc, #108]	; (8015984 <dhcp_handle_ack+0xb8>)
 8015916:	795b      	ldrb	r3, [r3, #5]
 8015918:	2b00      	cmp	r3, #0
 801591a:	d004      	beq.n	8015926 <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 801591c:	4b1a      	ldr	r3, [pc, #104]	; (8015988 <dhcp_handle_ack+0xbc>)
 801591e:	695a      	ldr	r2, [r3, #20]
 8015920:	68fb      	ldr	r3, [r7, #12]
 8015922:	631a      	str	r2, [r3, #48]	; 0x30
 8015924:	e007      	b.n	8015936 <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 8015926:	68fb      	ldr	r3, [r7, #12]
 8015928:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801592a:	4613      	mov	r3, r2
 801592c:	00db      	lsls	r3, r3, #3
 801592e:	1a9b      	subs	r3, r3, r2
 8015930:	08da      	lsrs	r2, r3, #3
 8015932:	68fb      	ldr	r3, [r7, #12]
 8015934:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8015936:	683b      	ldr	r3, [r7, #0]
 8015938:	691a      	ldr	r2, [r3, #16]
 801593a:	68fb      	ldr	r3, [r7, #12]
 801593c:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 801593e:	4b11      	ldr	r3, [pc, #68]	; (8015984 <dhcp_handle_ack+0xb8>)
 8015940:	799b      	ldrb	r3, [r3, #6]
 8015942:	2b00      	cmp	r3, #0
 8015944:	d00b      	beq.n	801595e <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8015946:	4b10      	ldr	r3, [pc, #64]	; (8015988 <dhcp_handle_ack+0xbc>)
 8015948:	699b      	ldr	r3, [r3, #24]
 801594a:	4618      	mov	r0, r3
 801594c:	f7f7 fa8f 	bl	800ce6e <lwip_htonl>
 8015950:	4602      	mov	r2, r0
 8015952:	68fb      	ldr	r3, [r7, #12]
 8015954:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 8015956:	68fb      	ldr	r3, [r7, #12]
 8015958:	2201      	movs	r2, #1
 801595a:	71da      	strb	r2, [r3, #7]
 801595c:	e002      	b.n	8015964 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 801595e:	68fb      	ldr	r3, [r7, #12]
 8015960:	2200      	movs	r2, #0
 8015962:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8015964:	4b07      	ldr	r3, [pc, #28]	; (8015984 <dhcp_handle_ack+0xb8>)
 8015966:	79db      	ldrb	r3, [r3, #7]
 8015968:	2b00      	cmp	r3, #0
 801596a:	d007      	beq.n	801597c <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 801596c:	4b06      	ldr	r3, [pc, #24]	; (8015988 <dhcp_handle_ack+0xbc>)
 801596e:	69db      	ldr	r3, [r3, #28]
 8015970:	4618      	mov	r0, r3
 8015972:	f7f7 fa7c 	bl	800ce6e <lwip_htonl>
 8015976:	4602      	mov	r2, r0
 8015978:	68fb      	ldr	r3, [r7, #12]
 801597a:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 801597c:	bf00      	nop
 801597e:	3710      	adds	r7, #16
 8015980:	46bd      	mov	sp, r7
 8015982:	bd80      	pop	{r7, pc}
 8015984:	20013b48 	.word	0x20013b48
 8015988:	20013b28 	.word	0x20013b28

0801598c <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 801598c:	b580      	push	{r7, lr}
 801598e:	b084      	sub	sp, #16
 8015990:	af00      	add	r7, sp, #0
 8015992:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8015994:	687b      	ldr	r3, [r7, #4]
 8015996:	2b00      	cmp	r3, #0
 8015998:	d109      	bne.n	80159ae <dhcp_start+0x22>
 801599a:	4b37      	ldr	r3, [pc, #220]	; (8015a78 <dhcp_start+0xec>)
 801599c:	f240 22e7 	movw	r2, #743	; 0x2e7
 80159a0:	4936      	ldr	r1, [pc, #216]	; (8015a7c <dhcp_start+0xf0>)
 80159a2:	4837      	ldr	r0, [pc, #220]	; (8015a80 <dhcp_start+0xf4>)
 80159a4:	f004 faac 	bl	8019f00 <iprintf>
 80159a8:	f06f 030f 	mvn.w	r3, #15
 80159ac:	e060      	b.n	8015a70 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 80159ae:	687b      	ldr	r3, [r7, #4]
 80159b0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80159b4:	f003 0301 	and.w	r3, r3, #1
 80159b8:	2b00      	cmp	r3, #0
 80159ba:	d109      	bne.n	80159d0 <dhcp_start+0x44>
 80159bc:	4b2e      	ldr	r3, [pc, #184]	; (8015a78 <dhcp_start+0xec>)
 80159be:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 80159c2:	4930      	ldr	r1, [pc, #192]	; (8015a84 <dhcp_start+0xf8>)
 80159c4:	482e      	ldr	r0, [pc, #184]	; (8015a80 <dhcp_start+0xf4>)
 80159c6:	f004 fa9b 	bl	8019f00 <iprintf>
 80159ca:	f06f 030f 	mvn.w	r3, #15
 80159ce:	e04f      	b.n	8015a70 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 80159d0:	687b      	ldr	r3, [r7, #4]
 80159d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80159d4:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 80159d6:	687b      	ldr	r3, [r7, #4]
 80159d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80159da:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 80159de:	d202      	bcs.n	80159e6 <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 80159e0:	f04f 33ff 	mov.w	r3, #4294967295
 80159e4:	e044      	b.n	8015a70 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 80159e6:	68fb      	ldr	r3, [r7, #12]
 80159e8:	2b00      	cmp	r3, #0
 80159ea:	d10d      	bne.n	8015a08 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 80159ec:	2034      	movs	r0, #52	; 0x34
 80159ee:	f7f7 fed5 	bl	800d79c <mem_malloc>
 80159f2:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 80159f4:	68fb      	ldr	r3, [r7, #12]
 80159f6:	2b00      	cmp	r3, #0
 80159f8:	d102      	bne.n	8015a00 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 80159fa:	f04f 33ff 	mov.w	r3, #4294967295
 80159fe:	e037      	b.n	8015a70 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8015a00:	687b      	ldr	r3, [r7, #4]
 8015a02:	68fa      	ldr	r2, [r7, #12]
 8015a04:	625a      	str	r2, [r3, #36]	; 0x24
 8015a06:	e005      	b.n	8015a14 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 8015a08:	68fb      	ldr	r3, [r7, #12]
 8015a0a:	791b      	ldrb	r3, [r3, #4]
 8015a0c:	2b00      	cmp	r3, #0
 8015a0e:	d001      	beq.n	8015a14 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8015a10:	f7ff fc92 	bl	8015338 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 8015a14:	2234      	movs	r2, #52	; 0x34
 8015a16:	2100      	movs	r1, #0
 8015a18:	68f8      	ldr	r0, [r7, #12]
 8015a1a:	f004 f989 	bl	8019d30 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 8015a1e:	f7ff fc39 	bl	8015294 <dhcp_inc_pcb_refcount>
 8015a22:	4603      	mov	r3, r0
 8015a24:	2b00      	cmp	r3, #0
 8015a26:	d002      	beq.n	8015a2e <dhcp_start+0xa2>
    return ERR_MEM;
 8015a28:	f04f 33ff 	mov.w	r3, #4294967295
 8015a2c:	e020      	b.n	8015a70 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 8015a2e:	68fb      	ldr	r3, [r7, #12]
 8015a30:	2201      	movs	r2, #1
 8015a32:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 8015a34:	687b      	ldr	r3, [r7, #4]
 8015a36:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015a3a:	f003 0304 	and.w	r3, r3, #4
 8015a3e:	2b00      	cmp	r3, #0
 8015a40:	d105      	bne.n	8015a4e <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 8015a42:	2102      	movs	r1, #2
 8015a44:	68f8      	ldr	r0, [r7, #12]
 8015a46:	f000 fd0c 	bl	8016462 <dhcp_set_state>
    return ERR_OK;
 8015a4a:	2300      	movs	r3, #0
 8015a4c:	e010      	b.n	8015a70 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 8015a4e:	6878      	ldr	r0, [r7, #4]
 8015a50:	f000 f8f8 	bl	8015c44 <dhcp_discover>
 8015a54:	4603      	mov	r3, r0
 8015a56:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 8015a58:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8015a5c:	2b00      	cmp	r3, #0
 8015a5e:	d005      	beq.n	8015a6c <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 8015a60:	6878      	ldr	r0, [r7, #4]
 8015a62:	f000 fc59 	bl	8016318 <dhcp_release_and_stop>
    return ERR_MEM;
 8015a66:	f04f 33ff 	mov.w	r3, #4294967295
 8015a6a:	e001      	b.n	8015a70 <dhcp_start+0xe4>
  }
  return result;
 8015a6c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8015a70:	4618      	mov	r0, r3
 8015a72:	3710      	adds	r7, #16
 8015a74:	46bd      	mov	sp, r7
 8015a76:	bd80      	pop	{r7, pc}
 8015a78:	0801df60 	.word	0x0801df60
 8015a7c:	0801e044 	.word	0x0801e044
 8015a80:	0801dfc0 	.word	0x0801dfc0
 8015a84:	0801e088 	.word	0x0801e088

08015a88 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 8015a88:	b580      	push	{r7, lr}
 8015a8a:	b084      	sub	sp, #16
 8015a8c:	af00      	add	r7, sp, #0
 8015a8e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015a90:	687b      	ldr	r3, [r7, #4]
 8015a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015a94:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 8015a96:	68fb      	ldr	r3, [r7, #12]
 8015a98:	2b00      	cmp	r3, #0
 8015a9a:	d025      	beq.n	8015ae8 <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 8015a9c:	68fb      	ldr	r3, [r7, #12]
 8015a9e:	795b      	ldrb	r3, [r3, #5]
 8015aa0:	2b0a      	cmp	r3, #10
 8015aa2:	d008      	beq.n	8015ab6 <dhcp_network_changed+0x2e>
 8015aa4:	2b0a      	cmp	r3, #10
 8015aa6:	dc0d      	bgt.n	8015ac4 <dhcp_network_changed+0x3c>
 8015aa8:	2b00      	cmp	r3, #0
 8015aaa:	d01f      	beq.n	8015aec <dhcp_network_changed+0x64>
 8015aac:	2b00      	cmp	r3, #0
 8015aae:	db09      	blt.n	8015ac4 <dhcp_network_changed+0x3c>
 8015ab0:	3b03      	subs	r3, #3
 8015ab2:	2b02      	cmp	r3, #2
 8015ab4:	d806      	bhi.n	8015ac4 <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 8015ab6:	68fb      	ldr	r3, [r7, #12]
 8015ab8:	2200      	movs	r2, #0
 8015aba:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 8015abc:	6878      	ldr	r0, [r7, #4]
 8015abe:	f000 fb75 	bl	80161ac <dhcp_reboot>
      break;
 8015ac2:	e014      	b.n	8015aee <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 8015ac4:	68fb      	ldr	r3, [r7, #12]
 8015ac6:	795b      	ldrb	r3, [r3, #5]
 8015ac8:	2b0c      	cmp	r3, #12
 8015aca:	d906      	bls.n	8015ada <dhcp_network_changed+0x52>
 8015acc:	4b09      	ldr	r3, [pc, #36]	; (8015af4 <dhcp_network_changed+0x6c>)
 8015ace:	f240 326d 	movw	r2, #877	; 0x36d
 8015ad2:	4909      	ldr	r1, [pc, #36]	; (8015af8 <dhcp_network_changed+0x70>)
 8015ad4:	4809      	ldr	r0, [pc, #36]	; (8015afc <dhcp_network_changed+0x74>)
 8015ad6:	f004 fa13 	bl	8019f00 <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 8015ada:	68fb      	ldr	r3, [r7, #12]
 8015adc:	2200      	movs	r2, #0
 8015ade:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 8015ae0:	6878      	ldr	r0, [r7, #4]
 8015ae2:	f000 f8af 	bl	8015c44 <dhcp_discover>
      break;
 8015ae6:	e002      	b.n	8015aee <dhcp_network_changed+0x66>
    return;
 8015ae8:	bf00      	nop
 8015aea:	e000      	b.n	8015aee <dhcp_network_changed+0x66>
      break;
 8015aec:	bf00      	nop
  }
}
 8015aee:	3710      	adds	r7, #16
 8015af0:	46bd      	mov	sp, r7
 8015af2:	bd80      	pop	{r7, pc}
 8015af4:	0801df60 	.word	0x0801df60
 8015af8:	0801e0ac 	.word	0x0801e0ac
 8015afc:	0801dfc0 	.word	0x0801dfc0

08015b00 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 8015b00:	b580      	push	{r7, lr}
 8015b02:	b084      	sub	sp, #16
 8015b04:	af00      	add	r7, sp, #0
 8015b06:	6078      	str	r0, [r7, #4]
 8015b08:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8015b0a:	687b      	ldr	r3, [r7, #4]
 8015b0c:	2b00      	cmp	r3, #0
 8015b0e:	d107      	bne.n	8015b20 <dhcp_arp_reply+0x20>
 8015b10:	4b0e      	ldr	r3, [pc, #56]	; (8015b4c <dhcp_arp_reply+0x4c>)
 8015b12:	f240 328b 	movw	r2, #907	; 0x38b
 8015b16:	490e      	ldr	r1, [pc, #56]	; (8015b50 <dhcp_arp_reply+0x50>)
 8015b18:	480e      	ldr	r0, [pc, #56]	; (8015b54 <dhcp_arp_reply+0x54>)
 8015b1a:	f004 f9f1 	bl	8019f00 <iprintf>
 8015b1e:	e012      	b.n	8015b46 <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 8015b20:	687b      	ldr	r3, [r7, #4]
 8015b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015b24:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 8015b26:	68fb      	ldr	r3, [r7, #12]
 8015b28:	2b00      	cmp	r3, #0
 8015b2a:	d00c      	beq.n	8015b46 <dhcp_arp_reply+0x46>
 8015b2c:	68fb      	ldr	r3, [r7, #12]
 8015b2e:	795b      	ldrb	r3, [r3, #5]
 8015b30:	2b08      	cmp	r3, #8
 8015b32:	d108      	bne.n	8015b46 <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8015b34:	683b      	ldr	r3, [r7, #0]
 8015b36:	681a      	ldr	r2, [r3, #0]
 8015b38:	68fb      	ldr	r3, [r7, #12]
 8015b3a:	69db      	ldr	r3, [r3, #28]
 8015b3c:	429a      	cmp	r2, r3
 8015b3e:	d102      	bne.n	8015b46 <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 8015b40:	6878      	ldr	r0, [r7, #4]
 8015b42:	f000 f809 	bl	8015b58 <dhcp_decline>
    }
  }
}
 8015b46:	3710      	adds	r7, #16
 8015b48:	46bd      	mov	sp, r7
 8015b4a:	bd80      	pop	{r7, pc}
 8015b4c:	0801df60 	.word	0x0801df60
 8015b50:	0801e044 	.word	0x0801e044
 8015b54:	0801dfc0 	.word	0x0801dfc0

08015b58 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 8015b58:	b5b0      	push	{r4, r5, r7, lr}
 8015b5a:	b08a      	sub	sp, #40	; 0x28
 8015b5c:	af02      	add	r7, sp, #8
 8015b5e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015b60:	687b      	ldr	r3, [r7, #4]
 8015b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015b64:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8015b66:	210c      	movs	r1, #12
 8015b68:	69b8      	ldr	r0, [r7, #24]
 8015b6a:	f000 fc7a 	bl	8016462 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 8015b6e:	f107 030c 	add.w	r3, r7, #12
 8015b72:	2204      	movs	r2, #4
 8015b74:	69b9      	ldr	r1, [r7, #24]
 8015b76:	6878      	ldr	r0, [r7, #4]
 8015b78:	f001 f90c 	bl	8016d94 <dhcp_create_msg>
 8015b7c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8015b7e:	697b      	ldr	r3, [r7, #20]
 8015b80:	2b00      	cmp	r3, #0
 8015b82:	d035      	beq.n	8015bf0 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8015b84:	697b      	ldr	r3, [r7, #20]
 8015b86:	685b      	ldr	r3, [r3, #4]
 8015b88:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8015b8a:	89b8      	ldrh	r0, [r7, #12]
 8015b8c:	693b      	ldr	r3, [r7, #16]
 8015b8e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015b92:	2304      	movs	r3, #4
 8015b94:	2232      	movs	r2, #50	; 0x32
 8015b96:	f000 fc7f 	bl	8016498 <dhcp_option>
 8015b9a:	4603      	mov	r3, r0
 8015b9c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8015b9e:	89bc      	ldrh	r4, [r7, #12]
 8015ba0:	693b      	ldr	r3, [r7, #16]
 8015ba2:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8015ba6:	69bb      	ldr	r3, [r7, #24]
 8015ba8:	69db      	ldr	r3, [r3, #28]
 8015baa:	4618      	mov	r0, r3
 8015bac:	f7f7 f95f 	bl	800ce6e <lwip_htonl>
 8015bb0:	4603      	mov	r3, r0
 8015bb2:	461a      	mov	r2, r3
 8015bb4:	4629      	mov	r1, r5
 8015bb6:	4620      	mov	r0, r4
 8015bb8:	f000 fcfa 	bl	80165b0 <dhcp_option_long>
 8015bbc:	4603      	mov	r3, r0
 8015bbe:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8015bc0:	89b8      	ldrh	r0, [r7, #12]
 8015bc2:	693b      	ldr	r3, [r7, #16]
 8015bc4:	33f0      	adds	r3, #240	; 0xf0
 8015bc6:	697a      	ldr	r2, [r7, #20]
 8015bc8:	4619      	mov	r1, r3
 8015bca:	f001 f9b9 	bl	8016f40 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8015bce:	4b19      	ldr	r3, [pc, #100]	; (8015c34 <dhcp_decline+0xdc>)
 8015bd0:	6818      	ldr	r0, [r3, #0]
 8015bd2:	4b19      	ldr	r3, [pc, #100]	; (8015c38 <dhcp_decline+0xe0>)
 8015bd4:	9301      	str	r3, [sp, #4]
 8015bd6:	687b      	ldr	r3, [r7, #4]
 8015bd8:	9300      	str	r3, [sp, #0]
 8015bda:	2343      	movs	r3, #67	; 0x43
 8015bdc:	4a17      	ldr	r2, [pc, #92]	; (8015c3c <dhcp_decline+0xe4>)
 8015bde:	6979      	ldr	r1, [r7, #20]
 8015be0:	f7ff f890 	bl	8014d04 <udp_sendto_if_src>
 8015be4:	4603      	mov	r3, r0
 8015be6:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8015be8:	6978      	ldr	r0, [r7, #20]
 8015bea:	f7f8 fe4d 	bl	800e888 <pbuf_free>
 8015bee:	e001      	b.n	8015bf4 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8015bf0:	23ff      	movs	r3, #255	; 0xff
 8015bf2:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8015bf4:	69bb      	ldr	r3, [r7, #24]
 8015bf6:	799b      	ldrb	r3, [r3, #6]
 8015bf8:	2bff      	cmp	r3, #255	; 0xff
 8015bfa:	d005      	beq.n	8015c08 <dhcp_decline+0xb0>
    dhcp->tries++;
 8015bfc:	69bb      	ldr	r3, [r7, #24]
 8015bfe:	799b      	ldrb	r3, [r3, #6]
 8015c00:	3301      	adds	r3, #1
 8015c02:	b2da      	uxtb	r2, r3
 8015c04:	69bb      	ldr	r3, [r7, #24]
 8015c06:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 8015c08:	f242 7310 	movw	r3, #10000	; 0x2710
 8015c0c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8015c0e:	89fb      	ldrh	r3, [r7, #14]
 8015c10:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8015c14:	4a0a      	ldr	r2, [pc, #40]	; (8015c40 <dhcp_decline+0xe8>)
 8015c16:	fb82 1203 	smull	r1, r2, r2, r3
 8015c1a:	1152      	asrs	r2, r2, #5
 8015c1c:	17db      	asrs	r3, r3, #31
 8015c1e:	1ad3      	subs	r3, r2, r3
 8015c20:	b29a      	uxth	r2, r3
 8015c22:	69bb      	ldr	r3, [r7, #24]
 8015c24:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8015c26:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8015c2a:	4618      	mov	r0, r3
 8015c2c:	3720      	adds	r7, #32
 8015c2e:	46bd      	mov	sp, r7
 8015c30:	bdb0      	pop	{r4, r5, r7, pc}
 8015c32:	bf00      	nop
 8015c34:	20013b50 	.word	0x20013b50
 8015c38:	0806a428 	.word	0x0806a428
 8015c3c:	0806a42c 	.word	0x0806a42c
 8015c40:	10624dd3 	.word	0x10624dd3

08015c44 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 8015c44:	b580      	push	{r7, lr}
 8015c46:	b08a      	sub	sp, #40	; 0x28
 8015c48:	af02      	add	r7, sp, #8
 8015c4a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015c4c:	687b      	ldr	r3, [r7, #4]
 8015c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015c50:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 8015c52:	2300      	movs	r3, #0
 8015c54:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8015c56:	69bb      	ldr	r3, [r7, #24]
 8015c58:	2200      	movs	r2, #0
 8015c5a:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8015c5c:	2106      	movs	r1, #6
 8015c5e:	69b8      	ldr	r0, [r7, #24]
 8015c60:	f000 fbff 	bl	8016462 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 8015c64:	f107 0308 	add.w	r3, r7, #8
 8015c68:	2201      	movs	r2, #1
 8015c6a:	69b9      	ldr	r1, [r7, #24]
 8015c6c:	6878      	ldr	r0, [r7, #4]
 8015c6e:	f001 f891 	bl	8016d94 <dhcp_create_msg>
 8015c72:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 8015c74:	693b      	ldr	r3, [r7, #16]
 8015c76:	2b00      	cmp	r3, #0
 8015c78:	d04b      	beq.n	8015d12 <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8015c7a:	693b      	ldr	r3, [r7, #16]
 8015c7c:	685b      	ldr	r3, [r3, #4]
 8015c7e:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8015c80:	8938      	ldrh	r0, [r7, #8]
 8015c82:	68fb      	ldr	r3, [r7, #12]
 8015c84:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015c88:	2302      	movs	r3, #2
 8015c8a:	2239      	movs	r2, #57	; 0x39
 8015c8c:	f000 fc04 	bl	8016498 <dhcp_option>
 8015c90:	4603      	mov	r3, r0
 8015c92:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8015c94:	8938      	ldrh	r0, [r7, #8]
 8015c96:	68fb      	ldr	r3, [r7, #12]
 8015c98:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015c9c:	687b      	ldr	r3, [r7, #4]
 8015c9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015ca0:	461a      	mov	r2, r3
 8015ca2:	f000 fc53 	bl	801654c <dhcp_option_short>
 8015ca6:	4603      	mov	r3, r0
 8015ca8:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8015caa:	8938      	ldrh	r0, [r7, #8]
 8015cac:	68fb      	ldr	r3, [r7, #12]
 8015cae:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015cb2:	2303      	movs	r3, #3
 8015cb4:	2237      	movs	r2, #55	; 0x37
 8015cb6:	f000 fbef 	bl	8016498 <dhcp_option>
 8015cba:	4603      	mov	r3, r0
 8015cbc:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015cbe:	2300      	movs	r3, #0
 8015cc0:	77fb      	strb	r3, [r7, #31]
 8015cc2:	e00e      	b.n	8015ce2 <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8015cc4:	8938      	ldrh	r0, [r7, #8]
 8015cc6:	68fb      	ldr	r3, [r7, #12]
 8015cc8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015ccc:	7ffb      	ldrb	r3, [r7, #31]
 8015cce:	4a29      	ldr	r2, [pc, #164]	; (8015d74 <dhcp_discover+0x130>)
 8015cd0:	5cd3      	ldrb	r3, [r2, r3]
 8015cd2:	461a      	mov	r2, r3
 8015cd4:	f000 fc14 	bl	8016500 <dhcp_option_byte>
 8015cd8:	4603      	mov	r3, r0
 8015cda:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015cdc:	7ffb      	ldrb	r3, [r7, #31]
 8015cde:	3301      	adds	r3, #1
 8015ce0:	77fb      	strb	r3, [r7, #31]
 8015ce2:	7ffb      	ldrb	r3, [r7, #31]
 8015ce4:	2b02      	cmp	r3, #2
 8015ce6:	d9ed      	bls.n	8015cc4 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8015ce8:	8938      	ldrh	r0, [r7, #8]
 8015cea:	68fb      	ldr	r3, [r7, #12]
 8015cec:	33f0      	adds	r3, #240	; 0xf0
 8015cee:	693a      	ldr	r2, [r7, #16]
 8015cf0:	4619      	mov	r1, r3
 8015cf2:	f001 f925 	bl	8016f40 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8015cf6:	4b20      	ldr	r3, [pc, #128]	; (8015d78 <dhcp_discover+0x134>)
 8015cf8:	6818      	ldr	r0, [r3, #0]
 8015cfa:	4b20      	ldr	r3, [pc, #128]	; (8015d7c <dhcp_discover+0x138>)
 8015cfc:	9301      	str	r3, [sp, #4]
 8015cfe:	687b      	ldr	r3, [r7, #4]
 8015d00:	9300      	str	r3, [sp, #0]
 8015d02:	2343      	movs	r3, #67	; 0x43
 8015d04:	4a1e      	ldr	r2, [pc, #120]	; (8015d80 <dhcp_discover+0x13c>)
 8015d06:	6939      	ldr	r1, [r7, #16]
 8015d08:	f7fe fffc 	bl	8014d04 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 8015d0c:	6938      	ldr	r0, [r7, #16]
 8015d0e:	f7f8 fdbb 	bl	800e888 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8015d12:	69bb      	ldr	r3, [r7, #24]
 8015d14:	799b      	ldrb	r3, [r3, #6]
 8015d16:	2bff      	cmp	r3, #255	; 0xff
 8015d18:	d005      	beq.n	8015d26 <dhcp_discover+0xe2>
    dhcp->tries++;
 8015d1a:	69bb      	ldr	r3, [r7, #24]
 8015d1c:	799b      	ldrb	r3, [r3, #6]
 8015d1e:	3301      	adds	r3, #1
 8015d20:	b2da      	uxtb	r2, r3
 8015d22:	69bb      	ldr	r3, [r7, #24]
 8015d24:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8015d26:	69bb      	ldr	r3, [r7, #24]
 8015d28:	799b      	ldrb	r3, [r3, #6]
 8015d2a:	2b05      	cmp	r3, #5
 8015d2c:	d80d      	bhi.n	8015d4a <dhcp_discover+0x106>
 8015d2e:	69bb      	ldr	r3, [r7, #24]
 8015d30:	799b      	ldrb	r3, [r3, #6]
 8015d32:	461a      	mov	r2, r3
 8015d34:	2301      	movs	r3, #1
 8015d36:	4093      	lsls	r3, r2
 8015d38:	b29b      	uxth	r3, r3
 8015d3a:	461a      	mov	r2, r3
 8015d3c:	0152      	lsls	r2, r2, #5
 8015d3e:	1ad2      	subs	r2, r2, r3
 8015d40:	0092      	lsls	r2, r2, #2
 8015d42:	4413      	add	r3, r2
 8015d44:	00db      	lsls	r3, r3, #3
 8015d46:	b29b      	uxth	r3, r3
 8015d48:	e001      	b.n	8015d4e <dhcp_discover+0x10a>
 8015d4a:	f64e 2360 	movw	r3, #60000	; 0xea60
 8015d4e:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8015d50:	897b      	ldrh	r3, [r7, #10]
 8015d52:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8015d56:	4a0b      	ldr	r2, [pc, #44]	; (8015d84 <dhcp_discover+0x140>)
 8015d58:	fb82 1203 	smull	r1, r2, r2, r3
 8015d5c:	1152      	asrs	r2, r2, #5
 8015d5e:	17db      	asrs	r3, r3, #31
 8015d60:	1ad3      	subs	r3, r2, r3
 8015d62:	b29a      	uxth	r2, r3
 8015d64:	69bb      	ldr	r3, [r7, #24]
 8015d66:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8015d68:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015d6c:	4618      	mov	r0, r3
 8015d6e:	3720      	adds	r7, #32
 8015d70:	46bd      	mov	sp, r7
 8015d72:	bd80      	pop	{r7, pc}
 8015d74:	200000c4 	.word	0x200000c4
 8015d78:	20013b50 	.word	0x20013b50
 8015d7c:	0806a428 	.word	0x0806a428
 8015d80:	0806a42c 	.word	0x0806a42c
 8015d84:	10624dd3 	.word	0x10624dd3

08015d88 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 8015d88:	b580      	push	{r7, lr}
 8015d8a:	b088      	sub	sp, #32
 8015d8c:	af00      	add	r7, sp, #0
 8015d8e:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 8015d90:	687b      	ldr	r3, [r7, #4]
 8015d92:	2b00      	cmp	r3, #0
 8015d94:	d107      	bne.n	8015da6 <dhcp_bind+0x1e>
 8015d96:	4b64      	ldr	r3, [pc, #400]	; (8015f28 <dhcp_bind+0x1a0>)
 8015d98:	f240 4215 	movw	r2, #1045	; 0x415
 8015d9c:	4963      	ldr	r1, [pc, #396]	; (8015f2c <dhcp_bind+0x1a4>)
 8015d9e:	4864      	ldr	r0, [pc, #400]	; (8015f30 <dhcp_bind+0x1a8>)
 8015da0:	f004 f8ae 	bl	8019f00 <iprintf>
 8015da4:	e0bc      	b.n	8015f20 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 8015da6:	687b      	ldr	r3, [r7, #4]
 8015da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015daa:	61fb      	str	r3, [r7, #28]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8015dac:	69fb      	ldr	r3, [r7, #28]
 8015dae:	2b00      	cmp	r3, #0
 8015db0:	d107      	bne.n	8015dc2 <dhcp_bind+0x3a>
 8015db2:	4b5d      	ldr	r3, [pc, #372]	; (8015f28 <dhcp_bind+0x1a0>)
 8015db4:	f240 4217 	movw	r2, #1047	; 0x417
 8015db8:	495e      	ldr	r1, [pc, #376]	; (8015f34 <dhcp_bind+0x1ac>)
 8015dba:	485d      	ldr	r0, [pc, #372]	; (8015f30 <dhcp_bind+0x1a8>)
 8015dbc:	f004 f8a0 	bl	8019f00 <iprintf>
 8015dc0:	e0ae      	b.n	8015f20 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 8015dc2:	69fb      	ldr	r3, [r7, #28]
 8015dc4:	2200      	movs	r2, #0
 8015dc6:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 8015dc8:	69fb      	ldr	r3, [r7, #28]
 8015dca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015dcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015dd0:	d019      	beq.n	8015e06 <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8015dd2:	69fb      	ldr	r3, [r7, #28]
 8015dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015dd6:	331e      	adds	r3, #30
 8015dd8:	4a57      	ldr	r2, [pc, #348]	; (8015f38 <dhcp_bind+0x1b0>)
 8015dda:	fba2 2303 	umull	r2, r3, r2, r3
 8015dde:	095b      	lsrs	r3, r3, #5
 8015de0:	61bb      	str	r3, [r7, #24]
    if (timeout > 0xffff) {
 8015de2:	69bb      	ldr	r3, [r7, #24]
 8015de4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015de8:	d302      	bcc.n	8015df0 <dhcp_bind+0x68>
      timeout = 0xffff;
 8015dea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015dee:	61bb      	str	r3, [r7, #24]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 8015df0:	69bb      	ldr	r3, [r7, #24]
 8015df2:	b29a      	uxth	r2, r3
 8015df4:	69fb      	ldr	r3, [r7, #28]
 8015df6:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 8015df8:	69fb      	ldr	r3, [r7, #28]
 8015dfa:	8a9b      	ldrh	r3, [r3, #20]
 8015dfc:	2b00      	cmp	r3, #0
 8015dfe:	d102      	bne.n	8015e06 <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 8015e00:	69fb      	ldr	r3, [r7, #28]
 8015e02:	2201      	movs	r2, #1
 8015e04:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 8015e06:	69fb      	ldr	r3, [r7, #28]
 8015e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015e0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015e0e:	d01d      	beq.n	8015e4c <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8015e10:	69fb      	ldr	r3, [r7, #28]
 8015e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015e14:	331e      	adds	r3, #30
 8015e16:	4a48      	ldr	r2, [pc, #288]	; (8015f38 <dhcp_bind+0x1b0>)
 8015e18:	fba2 2303 	umull	r2, r3, r2, r3
 8015e1c:	095b      	lsrs	r3, r3, #5
 8015e1e:	61bb      	str	r3, [r7, #24]
    if (timeout > 0xffff) {
 8015e20:	69bb      	ldr	r3, [r7, #24]
 8015e22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015e26:	d302      	bcc.n	8015e2e <dhcp_bind+0xa6>
      timeout = 0xffff;
 8015e28:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015e2c:	61bb      	str	r3, [r7, #24]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 8015e2e:	69bb      	ldr	r3, [r7, #24]
 8015e30:	b29a      	uxth	r2, r3
 8015e32:	69fb      	ldr	r3, [r7, #28]
 8015e34:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 8015e36:	69fb      	ldr	r3, [r7, #28]
 8015e38:	895b      	ldrh	r3, [r3, #10]
 8015e3a:	2b00      	cmp	r3, #0
 8015e3c:	d102      	bne.n	8015e44 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 8015e3e:	69fb      	ldr	r3, [r7, #28]
 8015e40:	2201      	movs	r2, #1
 8015e42:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8015e44:	69fb      	ldr	r3, [r7, #28]
 8015e46:	895a      	ldrh	r2, [r3, #10]
 8015e48:	69fb      	ldr	r3, [r7, #28]
 8015e4a:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8015e4c:	69fb      	ldr	r3, [r7, #28]
 8015e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015e54:	d01d      	beq.n	8015e92 <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8015e56:	69fb      	ldr	r3, [r7, #28]
 8015e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015e5a:	331e      	adds	r3, #30
 8015e5c:	4a36      	ldr	r2, [pc, #216]	; (8015f38 <dhcp_bind+0x1b0>)
 8015e5e:	fba2 2303 	umull	r2, r3, r2, r3
 8015e62:	095b      	lsrs	r3, r3, #5
 8015e64:	61bb      	str	r3, [r7, #24]
    if (timeout > 0xffff) {
 8015e66:	69bb      	ldr	r3, [r7, #24]
 8015e68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015e6c:	d302      	bcc.n	8015e74 <dhcp_bind+0xec>
      timeout = 0xffff;
 8015e6e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015e72:	61bb      	str	r3, [r7, #24]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 8015e74:	69bb      	ldr	r3, [r7, #24]
 8015e76:	b29a      	uxth	r2, r3
 8015e78:	69fb      	ldr	r3, [r7, #28]
 8015e7a:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 8015e7c:	69fb      	ldr	r3, [r7, #28]
 8015e7e:	899b      	ldrh	r3, [r3, #12]
 8015e80:	2b00      	cmp	r3, #0
 8015e82:	d102      	bne.n	8015e8a <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 8015e84:	69fb      	ldr	r3, [r7, #28]
 8015e86:	2201      	movs	r2, #1
 8015e88:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 8015e8a:	69fb      	ldr	r3, [r7, #28]
 8015e8c:	899a      	ldrh	r2, [r3, #12]
 8015e8e:	69fb      	ldr	r3, [r7, #28]
 8015e90:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 8015e92:	69fb      	ldr	r3, [r7, #28]
 8015e94:	895a      	ldrh	r2, [r3, #10]
 8015e96:	69fb      	ldr	r3, [r7, #28]
 8015e98:	899b      	ldrh	r3, [r3, #12]
 8015e9a:	429a      	cmp	r2, r3
 8015e9c:	d306      	bcc.n	8015eac <dhcp_bind+0x124>
 8015e9e:	69fb      	ldr	r3, [r7, #28]
 8015ea0:	899b      	ldrh	r3, [r3, #12]
 8015ea2:	2b00      	cmp	r3, #0
 8015ea4:	d002      	beq.n	8015eac <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 8015ea6:	69fb      	ldr	r3, [r7, #28]
 8015ea8:	2200      	movs	r2, #0
 8015eaa:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 8015eac:	69fb      	ldr	r3, [r7, #28]
 8015eae:	79db      	ldrb	r3, [r3, #7]
 8015eb0:	2b00      	cmp	r3, #0
 8015eb2:	d003      	beq.n	8015ebc <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 8015eb4:	69fb      	ldr	r3, [r7, #28]
 8015eb6:	6a1b      	ldr	r3, [r3, #32]
 8015eb8:	613b      	str	r3, [r7, #16]
 8015eba:	e014      	b.n	8015ee6 <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 8015ebc:	69fb      	ldr	r3, [r7, #28]
 8015ebe:	331c      	adds	r3, #28
 8015ec0:	781b      	ldrb	r3, [r3, #0]
 8015ec2:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 8015ec4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8015ec8:	2b00      	cmp	r3, #0
 8015eca:	db02      	blt.n	8015ed2 <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 8015ecc:	23ff      	movs	r3, #255	; 0xff
 8015ece:	613b      	str	r3, [r7, #16]
 8015ed0:	e009      	b.n	8015ee6 <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 8015ed2:	7dfb      	ldrb	r3, [r7, #23]
 8015ed4:	2bbf      	cmp	r3, #191	; 0xbf
 8015ed6:	d903      	bls.n	8015ee0 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 8015ed8:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8015edc:	613b      	str	r3, [r7, #16]
 8015ede:	e002      	b.n	8015ee6 <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 8015ee0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015ee4:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 8015ee6:	69fb      	ldr	r3, [r7, #28]
 8015ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015eea:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 8015eec:	68fb      	ldr	r3, [r7, #12]
 8015eee:	2b00      	cmp	r3, #0
 8015ef0:	d108      	bne.n	8015f04 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 8015ef2:	69fb      	ldr	r3, [r7, #28]
 8015ef4:	69da      	ldr	r2, [r3, #28]
 8015ef6:	693b      	ldr	r3, [r7, #16]
 8015ef8:	4013      	ands	r3, r2
 8015efa:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 8015efc:	68fb      	ldr	r3, [r7, #12]
 8015efe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8015f02:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 8015f04:	210a      	movs	r1, #10
 8015f06:	69f8      	ldr	r0, [r7, #28]
 8015f08:	f000 faab 	bl	8016462 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 8015f0c:	69fb      	ldr	r3, [r7, #28]
 8015f0e:	f103 011c 	add.w	r1, r3, #28
 8015f12:	f107 030c 	add.w	r3, r7, #12
 8015f16:	f107 0210 	add.w	r2, r7, #16
 8015f1a:	6878      	ldr	r0, [r7, #4]
 8015f1c:	f7f7 ffb4 	bl	800de88 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 8015f20:	3720      	adds	r7, #32
 8015f22:	46bd      	mov	sp, r7
 8015f24:	bd80      	pop	{r7, pc}
 8015f26:	bf00      	nop
 8015f28:	0801df60 	.word	0x0801df60
 8015f2c:	0801e0c0 	.word	0x0801e0c0
 8015f30:	0801dfc0 	.word	0x0801dfc0
 8015f34:	0801e0dc 	.word	0x0801e0dc
 8015f38:	88888889 	.word	0x88888889

08015f3c <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 8015f3c:	b580      	push	{r7, lr}
 8015f3e:	b08a      	sub	sp, #40	; 0x28
 8015f40:	af02      	add	r7, sp, #8
 8015f42:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015f44:	687b      	ldr	r3, [r7, #4]
 8015f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015f48:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 8015f4a:	2105      	movs	r1, #5
 8015f4c:	69b8      	ldr	r0, [r7, #24]
 8015f4e:	f000 fa88 	bl	8016462 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8015f52:	f107 030c 	add.w	r3, r7, #12
 8015f56:	2203      	movs	r2, #3
 8015f58:	69b9      	ldr	r1, [r7, #24]
 8015f5a:	6878      	ldr	r0, [r7, #4]
 8015f5c:	f000 ff1a 	bl	8016d94 <dhcp_create_msg>
 8015f60:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8015f62:	697b      	ldr	r3, [r7, #20]
 8015f64:	2b00      	cmp	r3, #0
 8015f66:	d04e      	beq.n	8016006 <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8015f68:	697b      	ldr	r3, [r7, #20]
 8015f6a:	685b      	ldr	r3, [r3, #4]
 8015f6c:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8015f6e:	89b8      	ldrh	r0, [r7, #12]
 8015f70:	693b      	ldr	r3, [r7, #16]
 8015f72:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015f76:	2302      	movs	r3, #2
 8015f78:	2239      	movs	r2, #57	; 0x39
 8015f7a:	f000 fa8d 	bl	8016498 <dhcp_option>
 8015f7e:	4603      	mov	r3, r0
 8015f80:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8015f82:	89b8      	ldrh	r0, [r7, #12]
 8015f84:	693b      	ldr	r3, [r7, #16]
 8015f86:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015f8a:	687b      	ldr	r3, [r7, #4]
 8015f8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015f8e:	461a      	mov	r2, r3
 8015f90:	f000 fadc 	bl	801654c <dhcp_option_short>
 8015f94:	4603      	mov	r3, r0
 8015f96:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8015f98:	89b8      	ldrh	r0, [r7, #12]
 8015f9a:	693b      	ldr	r3, [r7, #16]
 8015f9c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015fa0:	2303      	movs	r3, #3
 8015fa2:	2237      	movs	r2, #55	; 0x37
 8015fa4:	f000 fa78 	bl	8016498 <dhcp_option>
 8015fa8:	4603      	mov	r3, r0
 8015faa:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015fac:	2300      	movs	r3, #0
 8015fae:	77bb      	strb	r3, [r7, #30]
 8015fb0:	e00e      	b.n	8015fd0 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8015fb2:	89b8      	ldrh	r0, [r7, #12]
 8015fb4:	693b      	ldr	r3, [r7, #16]
 8015fb6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015fba:	7fbb      	ldrb	r3, [r7, #30]
 8015fbc:	4a2a      	ldr	r2, [pc, #168]	; (8016068 <dhcp_renew+0x12c>)
 8015fbe:	5cd3      	ldrb	r3, [r2, r3]
 8015fc0:	461a      	mov	r2, r3
 8015fc2:	f000 fa9d 	bl	8016500 <dhcp_option_byte>
 8015fc6:	4603      	mov	r3, r0
 8015fc8:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015fca:	7fbb      	ldrb	r3, [r7, #30]
 8015fcc:	3301      	adds	r3, #1
 8015fce:	77bb      	strb	r3, [r7, #30]
 8015fd0:	7fbb      	ldrb	r3, [r7, #30]
 8015fd2:	2b02      	cmp	r3, #2
 8015fd4:	d9ed      	bls.n	8015fb2 <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8015fd6:	89b8      	ldrh	r0, [r7, #12]
 8015fd8:	693b      	ldr	r3, [r7, #16]
 8015fda:	33f0      	adds	r3, #240	; 0xf0
 8015fdc:	697a      	ldr	r2, [r7, #20]
 8015fde:	4619      	mov	r1, r3
 8015fe0:	f000 ffae 	bl	8016f40 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8015fe4:	4b21      	ldr	r3, [pc, #132]	; (801606c <dhcp_renew+0x130>)
 8015fe6:	6818      	ldr	r0, [r3, #0]
 8015fe8:	69bb      	ldr	r3, [r7, #24]
 8015fea:	f103 0218 	add.w	r2, r3, #24
 8015fee:	687b      	ldr	r3, [r7, #4]
 8015ff0:	9300      	str	r3, [sp, #0]
 8015ff2:	2343      	movs	r3, #67	; 0x43
 8015ff4:	6979      	ldr	r1, [r7, #20]
 8015ff6:	f7fe fe11 	bl	8014c1c <udp_sendto_if>
 8015ffa:	4603      	mov	r3, r0
 8015ffc:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8015ffe:	6978      	ldr	r0, [r7, #20]
 8016000:	f7f8 fc42 	bl	800e888 <pbuf_free>
 8016004:	e001      	b.n	801600a <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8016006:	23ff      	movs	r3, #255	; 0xff
 8016008:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801600a:	69bb      	ldr	r3, [r7, #24]
 801600c:	799b      	ldrb	r3, [r3, #6]
 801600e:	2bff      	cmp	r3, #255	; 0xff
 8016010:	d005      	beq.n	801601e <dhcp_renew+0xe2>
    dhcp->tries++;
 8016012:	69bb      	ldr	r3, [r7, #24]
 8016014:	799b      	ldrb	r3, [r3, #6]
 8016016:	3301      	adds	r3, #1
 8016018:	b2da      	uxtb	r2, r3
 801601a:	69bb      	ldr	r3, [r7, #24]
 801601c:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 801601e:	69bb      	ldr	r3, [r7, #24]
 8016020:	799b      	ldrb	r3, [r3, #6]
 8016022:	2b09      	cmp	r3, #9
 8016024:	d80a      	bhi.n	801603c <dhcp_renew+0x100>
 8016026:	69bb      	ldr	r3, [r7, #24]
 8016028:	799b      	ldrb	r3, [r3, #6]
 801602a:	b29b      	uxth	r3, r3
 801602c:	461a      	mov	r2, r3
 801602e:	0152      	lsls	r2, r2, #5
 8016030:	1ad2      	subs	r2, r2, r3
 8016032:	0092      	lsls	r2, r2, #2
 8016034:	4413      	add	r3, r2
 8016036:	011b      	lsls	r3, r3, #4
 8016038:	b29b      	uxth	r3, r3
 801603a:	e001      	b.n	8016040 <dhcp_renew+0x104>
 801603c:	f644 6320 	movw	r3, #20000	; 0x4e20
 8016040:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8016042:	89fb      	ldrh	r3, [r7, #14]
 8016044:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8016048:	4a09      	ldr	r2, [pc, #36]	; (8016070 <dhcp_renew+0x134>)
 801604a:	fb82 1203 	smull	r1, r2, r2, r3
 801604e:	1152      	asrs	r2, r2, #5
 8016050:	17db      	asrs	r3, r3, #31
 8016052:	1ad3      	subs	r3, r2, r3
 8016054:	b29a      	uxth	r2, r3
 8016056:	69bb      	ldr	r3, [r7, #24]
 8016058:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801605a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801605e:	4618      	mov	r0, r3
 8016060:	3720      	adds	r7, #32
 8016062:	46bd      	mov	sp, r7
 8016064:	bd80      	pop	{r7, pc}
 8016066:	bf00      	nop
 8016068:	200000c4 	.word	0x200000c4
 801606c:	20013b50 	.word	0x20013b50
 8016070:	10624dd3 	.word	0x10624dd3

08016074 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 8016074:	b580      	push	{r7, lr}
 8016076:	b08a      	sub	sp, #40	; 0x28
 8016078:	af02      	add	r7, sp, #8
 801607a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801607c:	687b      	ldr	r3, [r7, #4]
 801607e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016080:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 8016082:	2104      	movs	r1, #4
 8016084:	69b8      	ldr	r0, [r7, #24]
 8016086:	f000 f9ec 	bl	8016462 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801608a:	f107 030c 	add.w	r3, r7, #12
 801608e:	2203      	movs	r2, #3
 8016090:	69b9      	ldr	r1, [r7, #24]
 8016092:	6878      	ldr	r0, [r7, #4]
 8016094:	f000 fe7e 	bl	8016d94 <dhcp_create_msg>
 8016098:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801609a:	697b      	ldr	r3, [r7, #20]
 801609c:	2b00      	cmp	r3, #0
 801609e:	d04c      	beq.n	801613a <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80160a0:	697b      	ldr	r3, [r7, #20]
 80160a2:	685b      	ldr	r3, [r3, #4]
 80160a4:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80160a6:	89b8      	ldrh	r0, [r7, #12]
 80160a8:	693b      	ldr	r3, [r7, #16]
 80160aa:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80160ae:	2302      	movs	r3, #2
 80160b0:	2239      	movs	r2, #57	; 0x39
 80160b2:	f000 f9f1 	bl	8016498 <dhcp_option>
 80160b6:	4603      	mov	r3, r0
 80160b8:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80160ba:	89b8      	ldrh	r0, [r7, #12]
 80160bc:	693b      	ldr	r3, [r7, #16]
 80160be:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80160c2:	687b      	ldr	r3, [r7, #4]
 80160c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80160c6:	461a      	mov	r2, r3
 80160c8:	f000 fa40 	bl	801654c <dhcp_option_short>
 80160cc:	4603      	mov	r3, r0
 80160ce:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80160d0:	89b8      	ldrh	r0, [r7, #12]
 80160d2:	693b      	ldr	r3, [r7, #16]
 80160d4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80160d8:	2303      	movs	r3, #3
 80160da:	2237      	movs	r2, #55	; 0x37
 80160dc:	f000 f9dc 	bl	8016498 <dhcp_option>
 80160e0:	4603      	mov	r3, r0
 80160e2:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80160e4:	2300      	movs	r3, #0
 80160e6:	77bb      	strb	r3, [r7, #30]
 80160e8:	e00e      	b.n	8016108 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80160ea:	89b8      	ldrh	r0, [r7, #12]
 80160ec:	693b      	ldr	r3, [r7, #16]
 80160ee:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80160f2:	7fbb      	ldrb	r3, [r7, #30]
 80160f4:	4a29      	ldr	r2, [pc, #164]	; (801619c <dhcp_rebind+0x128>)
 80160f6:	5cd3      	ldrb	r3, [r2, r3]
 80160f8:	461a      	mov	r2, r3
 80160fa:	f000 fa01 	bl	8016500 <dhcp_option_byte>
 80160fe:	4603      	mov	r3, r0
 8016100:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8016102:	7fbb      	ldrb	r3, [r7, #30]
 8016104:	3301      	adds	r3, #1
 8016106:	77bb      	strb	r3, [r7, #30]
 8016108:	7fbb      	ldrb	r3, [r7, #30]
 801610a:	2b02      	cmp	r3, #2
 801610c:	d9ed      	bls.n	80160ea <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801610e:	89b8      	ldrh	r0, [r7, #12]
 8016110:	693b      	ldr	r3, [r7, #16]
 8016112:	33f0      	adds	r3, #240	; 0xf0
 8016114:	697a      	ldr	r2, [r7, #20]
 8016116:	4619      	mov	r1, r3
 8016118:	f000 ff12 	bl	8016f40 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801611c:	4b20      	ldr	r3, [pc, #128]	; (80161a0 <dhcp_rebind+0x12c>)
 801611e:	6818      	ldr	r0, [r3, #0]
 8016120:	687b      	ldr	r3, [r7, #4]
 8016122:	9300      	str	r3, [sp, #0]
 8016124:	2343      	movs	r3, #67	; 0x43
 8016126:	4a1f      	ldr	r2, [pc, #124]	; (80161a4 <dhcp_rebind+0x130>)
 8016128:	6979      	ldr	r1, [r7, #20]
 801612a:	f7fe fd77 	bl	8014c1c <udp_sendto_if>
 801612e:	4603      	mov	r3, r0
 8016130:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8016132:	6978      	ldr	r0, [r7, #20]
 8016134:	f7f8 fba8 	bl	800e888 <pbuf_free>
 8016138:	e001      	b.n	801613e <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801613a:	23ff      	movs	r3, #255	; 0xff
 801613c:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801613e:	69bb      	ldr	r3, [r7, #24]
 8016140:	799b      	ldrb	r3, [r3, #6]
 8016142:	2bff      	cmp	r3, #255	; 0xff
 8016144:	d005      	beq.n	8016152 <dhcp_rebind+0xde>
    dhcp->tries++;
 8016146:	69bb      	ldr	r3, [r7, #24]
 8016148:	799b      	ldrb	r3, [r3, #6]
 801614a:	3301      	adds	r3, #1
 801614c:	b2da      	uxtb	r2, r3
 801614e:	69bb      	ldr	r3, [r7, #24]
 8016150:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8016152:	69bb      	ldr	r3, [r7, #24]
 8016154:	799b      	ldrb	r3, [r3, #6]
 8016156:	2b09      	cmp	r3, #9
 8016158:	d80a      	bhi.n	8016170 <dhcp_rebind+0xfc>
 801615a:	69bb      	ldr	r3, [r7, #24]
 801615c:	799b      	ldrb	r3, [r3, #6]
 801615e:	b29b      	uxth	r3, r3
 8016160:	461a      	mov	r2, r3
 8016162:	0152      	lsls	r2, r2, #5
 8016164:	1ad2      	subs	r2, r2, r3
 8016166:	0092      	lsls	r2, r2, #2
 8016168:	4413      	add	r3, r2
 801616a:	00db      	lsls	r3, r3, #3
 801616c:	b29b      	uxth	r3, r3
 801616e:	e001      	b.n	8016174 <dhcp_rebind+0x100>
 8016170:	f242 7310 	movw	r3, #10000	; 0x2710
 8016174:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8016176:	89fb      	ldrh	r3, [r7, #14]
 8016178:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801617c:	4a0a      	ldr	r2, [pc, #40]	; (80161a8 <dhcp_rebind+0x134>)
 801617e:	fb82 1203 	smull	r1, r2, r2, r3
 8016182:	1152      	asrs	r2, r2, #5
 8016184:	17db      	asrs	r3, r3, #31
 8016186:	1ad3      	subs	r3, r2, r3
 8016188:	b29a      	uxth	r2, r3
 801618a:	69bb      	ldr	r3, [r7, #24]
 801618c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801618e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8016192:	4618      	mov	r0, r3
 8016194:	3720      	adds	r7, #32
 8016196:	46bd      	mov	sp, r7
 8016198:	bd80      	pop	{r7, pc}
 801619a:	bf00      	nop
 801619c:	200000c4 	.word	0x200000c4
 80161a0:	20013b50 	.word	0x20013b50
 80161a4:	0806a42c 	.word	0x0806a42c
 80161a8:	10624dd3 	.word	0x10624dd3

080161ac <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 80161ac:	b5b0      	push	{r4, r5, r7, lr}
 80161ae:	b08a      	sub	sp, #40	; 0x28
 80161b0:	af02      	add	r7, sp, #8
 80161b2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80161b4:	687b      	ldr	r3, [r7, #4]
 80161b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80161b8:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 80161ba:	2103      	movs	r1, #3
 80161bc:	69b8      	ldr	r0, [r7, #24]
 80161be:	f000 f950 	bl	8016462 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80161c2:	f107 030c 	add.w	r3, r7, #12
 80161c6:	2203      	movs	r2, #3
 80161c8:	69b9      	ldr	r1, [r7, #24]
 80161ca:	6878      	ldr	r0, [r7, #4]
 80161cc:	f000 fde2 	bl	8016d94 <dhcp_create_msg>
 80161d0:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80161d2:	697b      	ldr	r3, [r7, #20]
 80161d4:	2b00      	cmp	r3, #0
 80161d6:	d066      	beq.n	80162a6 <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80161d8:	697b      	ldr	r3, [r7, #20]
 80161da:	685b      	ldr	r3, [r3, #4]
 80161dc:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80161de:	89b8      	ldrh	r0, [r7, #12]
 80161e0:	693b      	ldr	r3, [r7, #16]
 80161e2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80161e6:	2302      	movs	r3, #2
 80161e8:	2239      	movs	r2, #57	; 0x39
 80161ea:	f000 f955 	bl	8016498 <dhcp_option>
 80161ee:	4603      	mov	r3, r0
 80161f0:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 80161f2:	89b8      	ldrh	r0, [r7, #12]
 80161f4:	693b      	ldr	r3, [r7, #16]
 80161f6:	33f0      	adds	r3, #240	; 0xf0
 80161f8:	f44f 7210 	mov.w	r2, #576	; 0x240
 80161fc:	4619      	mov	r1, r3
 80161fe:	f000 f9a5 	bl	801654c <dhcp_option_short>
 8016202:	4603      	mov	r3, r0
 8016204:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8016206:	89b8      	ldrh	r0, [r7, #12]
 8016208:	693b      	ldr	r3, [r7, #16]
 801620a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801620e:	2304      	movs	r3, #4
 8016210:	2232      	movs	r2, #50	; 0x32
 8016212:	f000 f941 	bl	8016498 <dhcp_option>
 8016216:	4603      	mov	r3, r0
 8016218:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801621a:	89bc      	ldrh	r4, [r7, #12]
 801621c:	693b      	ldr	r3, [r7, #16]
 801621e:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8016222:	69bb      	ldr	r3, [r7, #24]
 8016224:	69db      	ldr	r3, [r3, #28]
 8016226:	4618      	mov	r0, r3
 8016228:	f7f6 fe21 	bl	800ce6e <lwip_htonl>
 801622c:	4603      	mov	r3, r0
 801622e:	461a      	mov	r2, r3
 8016230:	4629      	mov	r1, r5
 8016232:	4620      	mov	r0, r4
 8016234:	f000 f9bc 	bl	80165b0 <dhcp_option_long>
 8016238:	4603      	mov	r3, r0
 801623a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801623c:	89b8      	ldrh	r0, [r7, #12]
 801623e:	693b      	ldr	r3, [r7, #16]
 8016240:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016244:	2303      	movs	r3, #3
 8016246:	2237      	movs	r2, #55	; 0x37
 8016248:	f000 f926 	bl	8016498 <dhcp_option>
 801624c:	4603      	mov	r3, r0
 801624e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8016250:	2300      	movs	r3, #0
 8016252:	77bb      	strb	r3, [r7, #30]
 8016254:	e00e      	b.n	8016274 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8016256:	89b8      	ldrh	r0, [r7, #12]
 8016258:	693b      	ldr	r3, [r7, #16]
 801625a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801625e:	7fbb      	ldrb	r3, [r7, #30]
 8016260:	4a29      	ldr	r2, [pc, #164]	; (8016308 <dhcp_reboot+0x15c>)
 8016262:	5cd3      	ldrb	r3, [r2, r3]
 8016264:	461a      	mov	r2, r3
 8016266:	f000 f94b 	bl	8016500 <dhcp_option_byte>
 801626a:	4603      	mov	r3, r0
 801626c:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801626e:	7fbb      	ldrb	r3, [r7, #30]
 8016270:	3301      	adds	r3, #1
 8016272:	77bb      	strb	r3, [r7, #30]
 8016274:	7fbb      	ldrb	r3, [r7, #30]
 8016276:	2b02      	cmp	r3, #2
 8016278:	d9ed      	bls.n	8016256 <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801627a:	89b8      	ldrh	r0, [r7, #12]
 801627c:	693b      	ldr	r3, [r7, #16]
 801627e:	33f0      	adds	r3, #240	; 0xf0
 8016280:	697a      	ldr	r2, [r7, #20]
 8016282:	4619      	mov	r1, r3
 8016284:	f000 fe5c 	bl	8016f40 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8016288:	4b20      	ldr	r3, [pc, #128]	; (801630c <dhcp_reboot+0x160>)
 801628a:	6818      	ldr	r0, [r3, #0]
 801628c:	687b      	ldr	r3, [r7, #4]
 801628e:	9300      	str	r3, [sp, #0]
 8016290:	2343      	movs	r3, #67	; 0x43
 8016292:	4a1f      	ldr	r2, [pc, #124]	; (8016310 <dhcp_reboot+0x164>)
 8016294:	6979      	ldr	r1, [r7, #20]
 8016296:	f7fe fcc1 	bl	8014c1c <udp_sendto_if>
 801629a:	4603      	mov	r3, r0
 801629c:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801629e:	6978      	ldr	r0, [r7, #20]
 80162a0:	f7f8 faf2 	bl	800e888 <pbuf_free>
 80162a4:	e001      	b.n	80162aa <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80162a6:	23ff      	movs	r3, #255	; 0xff
 80162a8:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80162aa:	69bb      	ldr	r3, [r7, #24]
 80162ac:	799b      	ldrb	r3, [r3, #6]
 80162ae:	2bff      	cmp	r3, #255	; 0xff
 80162b0:	d005      	beq.n	80162be <dhcp_reboot+0x112>
    dhcp->tries++;
 80162b2:	69bb      	ldr	r3, [r7, #24]
 80162b4:	799b      	ldrb	r3, [r3, #6]
 80162b6:	3301      	adds	r3, #1
 80162b8:	b2da      	uxtb	r2, r3
 80162ba:	69bb      	ldr	r3, [r7, #24]
 80162bc:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 80162be:	69bb      	ldr	r3, [r7, #24]
 80162c0:	799b      	ldrb	r3, [r3, #6]
 80162c2:	2b09      	cmp	r3, #9
 80162c4:	d80a      	bhi.n	80162dc <dhcp_reboot+0x130>
 80162c6:	69bb      	ldr	r3, [r7, #24]
 80162c8:	799b      	ldrb	r3, [r3, #6]
 80162ca:	b29b      	uxth	r3, r3
 80162cc:	461a      	mov	r2, r3
 80162ce:	0152      	lsls	r2, r2, #5
 80162d0:	1ad2      	subs	r2, r2, r3
 80162d2:	0092      	lsls	r2, r2, #2
 80162d4:	4413      	add	r3, r2
 80162d6:	00db      	lsls	r3, r3, #3
 80162d8:	b29b      	uxth	r3, r3
 80162da:	e001      	b.n	80162e0 <dhcp_reboot+0x134>
 80162dc:	f242 7310 	movw	r3, #10000	; 0x2710
 80162e0:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80162e2:	89fb      	ldrh	r3, [r7, #14]
 80162e4:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80162e8:	4a0a      	ldr	r2, [pc, #40]	; (8016314 <dhcp_reboot+0x168>)
 80162ea:	fb82 1203 	smull	r1, r2, r2, r3
 80162ee:	1152      	asrs	r2, r2, #5
 80162f0:	17db      	asrs	r3, r3, #31
 80162f2:	1ad3      	subs	r3, r2, r3
 80162f4:	b29a      	uxth	r2, r3
 80162f6:	69bb      	ldr	r3, [r7, #24]
 80162f8:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80162fa:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80162fe:	4618      	mov	r0, r3
 8016300:	3720      	adds	r7, #32
 8016302:	46bd      	mov	sp, r7
 8016304:	bdb0      	pop	{r4, r5, r7, pc}
 8016306:	bf00      	nop
 8016308:	200000c4 	.word	0x200000c4
 801630c:	20013b50 	.word	0x20013b50
 8016310:	0806a42c 	.word	0x0806a42c
 8016314:	10624dd3 	.word	0x10624dd3

08016318 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 8016318:	b5b0      	push	{r4, r5, r7, lr}
 801631a:	b08a      	sub	sp, #40	; 0x28
 801631c:	af02      	add	r7, sp, #8
 801631e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016320:	687b      	ldr	r3, [r7, #4]
 8016322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016324:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 8016326:	69fb      	ldr	r3, [r7, #28]
 8016328:	2b00      	cmp	r3, #0
 801632a:	f000 8084 	beq.w	8016436 <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 801632e:	69fb      	ldr	r3, [r7, #28]
 8016330:	795b      	ldrb	r3, [r3, #5]
 8016332:	2b00      	cmp	r3, #0
 8016334:	f000 8081 	beq.w	801643a <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8016338:	69fb      	ldr	r3, [r7, #28]
 801633a:	699b      	ldr	r3, [r3, #24]
 801633c:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 801633e:	69fb      	ldr	r3, [r7, #28]
 8016340:	2200      	movs	r2, #0
 8016342:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8016344:	69fb      	ldr	r3, [r7, #28]
 8016346:	2200      	movs	r2, #0
 8016348:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 801634a:	69fb      	ldr	r3, [r7, #28]
 801634c:	2200      	movs	r2, #0
 801634e:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8016350:	69fb      	ldr	r3, [r7, #28]
 8016352:	2200      	movs	r2, #0
 8016354:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 8016356:	69fb      	ldr	r3, [r7, #28]
 8016358:	2200      	movs	r2, #0
 801635a:	631a      	str	r2, [r3, #48]	; 0x30
 801635c:	69fb      	ldr	r3, [r7, #28]
 801635e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8016360:	69fb      	ldr	r3, [r7, #28]
 8016362:	62da      	str	r2, [r3, #44]	; 0x2c
 8016364:	69fb      	ldr	r3, [r7, #28]
 8016366:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016368:	69fb      	ldr	r3, [r7, #28]
 801636a:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 801636c:	69fb      	ldr	r3, [r7, #28]
 801636e:	2200      	movs	r2, #0
 8016370:	829a      	strh	r2, [r3, #20]
 8016372:	69fb      	ldr	r3, [r7, #28]
 8016374:	8a9a      	ldrh	r2, [r3, #20]
 8016376:	69fb      	ldr	r3, [r7, #28]
 8016378:	825a      	strh	r2, [r3, #18]
 801637a:	69fb      	ldr	r3, [r7, #28]
 801637c:	8a5a      	ldrh	r2, [r3, #18]
 801637e:	69fb      	ldr	r3, [r7, #28]
 8016380:	821a      	strh	r2, [r3, #16]
 8016382:	69fb      	ldr	r3, [r7, #28]
 8016384:	8a1a      	ldrh	r2, [r3, #16]
 8016386:	69fb      	ldr	r3, [r7, #28]
 8016388:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 801638a:	6878      	ldr	r0, [r7, #4]
 801638c:	f000 fe06 	bl	8016f9c <dhcp_supplied_address>
 8016390:	4603      	mov	r3, r0
 8016392:	2b00      	cmp	r3, #0
 8016394:	d03b      	beq.n	801640e <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 8016396:	f107 030e 	add.w	r3, r7, #14
 801639a:	2207      	movs	r2, #7
 801639c:	69f9      	ldr	r1, [r7, #28]
 801639e:	6878      	ldr	r0, [r7, #4]
 80163a0:	f000 fcf8 	bl	8016d94 <dhcp_create_msg>
 80163a4:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 80163a6:	69bb      	ldr	r3, [r7, #24]
 80163a8:	2b00      	cmp	r3, #0
 80163aa:	d030      	beq.n	801640e <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80163ac:	69bb      	ldr	r3, [r7, #24]
 80163ae:	685b      	ldr	r3, [r3, #4]
 80163b0:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 80163b2:	89f8      	ldrh	r0, [r7, #14]
 80163b4:	697b      	ldr	r3, [r7, #20]
 80163b6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80163ba:	2304      	movs	r3, #4
 80163bc:	2236      	movs	r2, #54	; 0x36
 80163be:	f000 f86b 	bl	8016498 <dhcp_option>
 80163c2:	4603      	mov	r3, r0
 80163c4:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 80163c6:	89fc      	ldrh	r4, [r7, #14]
 80163c8:	697b      	ldr	r3, [r7, #20]
 80163ca:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 80163ce:	693b      	ldr	r3, [r7, #16]
 80163d0:	4618      	mov	r0, r3
 80163d2:	f7f6 fd4c 	bl	800ce6e <lwip_htonl>
 80163d6:	4603      	mov	r3, r0
 80163d8:	461a      	mov	r2, r3
 80163da:	4629      	mov	r1, r5
 80163dc:	4620      	mov	r0, r4
 80163de:	f000 f8e7 	bl	80165b0 <dhcp_option_long>
 80163e2:	4603      	mov	r3, r0
 80163e4:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80163e6:	89f8      	ldrh	r0, [r7, #14]
 80163e8:	697b      	ldr	r3, [r7, #20]
 80163ea:	33f0      	adds	r3, #240	; 0xf0
 80163ec:	69ba      	ldr	r2, [r7, #24]
 80163ee:	4619      	mov	r1, r3
 80163f0:	f000 fda6 	bl	8016f40 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80163f4:	4b13      	ldr	r3, [pc, #76]	; (8016444 <dhcp_release_and_stop+0x12c>)
 80163f6:	6818      	ldr	r0, [r3, #0]
 80163f8:	f107 0210 	add.w	r2, r7, #16
 80163fc:	687b      	ldr	r3, [r7, #4]
 80163fe:	9300      	str	r3, [sp, #0]
 8016400:	2343      	movs	r3, #67	; 0x43
 8016402:	69b9      	ldr	r1, [r7, #24]
 8016404:	f7fe fc0a 	bl	8014c1c <udp_sendto_if>
      pbuf_free(p_out);
 8016408:	69b8      	ldr	r0, [r7, #24]
 801640a:	f7f8 fa3d 	bl	800e888 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 801640e:	4b0e      	ldr	r3, [pc, #56]	; (8016448 <dhcp_release_and_stop+0x130>)
 8016410:	4a0d      	ldr	r2, [pc, #52]	; (8016448 <dhcp_release_and_stop+0x130>)
 8016412:	490d      	ldr	r1, [pc, #52]	; (8016448 <dhcp_release_and_stop+0x130>)
 8016414:	6878      	ldr	r0, [r7, #4]
 8016416:	f7f7 fd37 	bl	800de88 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 801641a:	2100      	movs	r1, #0
 801641c:	69f8      	ldr	r0, [r7, #28]
 801641e:	f000 f820 	bl	8016462 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 8016422:	69fb      	ldr	r3, [r7, #28]
 8016424:	791b      	ldrb	r3, [r3, #4]
 8016426:	2b00      	cmp	r3, #0
 8016428:	d008      	beq.n	801643c <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 801642a:	f7fe ff85 	bl	8015338 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 801642e:	69fb      	ldr	r3, [r7, #28]
 8016430:	2200      	movs	r2, #0
 8016432:	711a      	strb	r2, [r3, #4]
 8016434:	e002      	b.n	801643c <dhcp_release_and_stop+0x124>
    return;
 8016436:	bf00      	nop
 8016438:	e000      	b.n	801643c <dhcp_release_and_stop+0x124>
    return;
 801643a:	bf00      	nop
  }
}
 801643c:	3720      	adds	r7, #32
 801643e:	46bd      	mov	sp, r7
 8016440:	bdb0      	pop	{r4, r5, r7, pc}
 8016442:	bf00      	nop
 8016444:	20013b50 	.word	0x20013b50
 8016448:	0806a428 	.word	0x0806a428

0801644c <dhcp_stop>:
 * This function calls dhcp_release_and_stop() internally.
 * @deprecated Use dhcp_release_and_stop() instead.
 */
void
dhcp_stop(struct netif *netif)
{
 801644c:	b580      	push	{r7, lr}
 801644e:	b082      	sub	sp, #8
 8016450:	af00      	add	r7, sp, #0
 8016452:	6078      	str	r0, [r7, #4]
  dhcp_release_and_stop(netif);
 8016454:	6878      	ldr	r0, [r7, #4]
 8016456:	f7ff ff5f 	bl	8016318 <dhcp_release_and_stop>
}
 801645a:	bf00      	nop
 801645c:	3708      	adds	r7, #8
 801645e:	46bd      	mov	sp, r7
 8016460:	bd80      	pop	{r7, pc}

08016462 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 8016462:	b480      	push	{r7}
 8016464:	b083      	sub	sp, #12
 8016466:	af00      	add	r7, sp, #0
 8016468:	6078      	str	r0, [r7, #4]
 801646a:	460b      	mov	r3, r1
 801646c:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 801646e:	687b      	ldr	r3, [r7, #4]
 8016470:	795b      	ldrb	r3, [r3, #5]
 8016472:	78fa      	ldrb	r2, [r7, #3]
 8016474:	429a      	cmp	r2, r3
 8016476:	d008      	beq.n	801648a <dhcp_set_state+0x28>
    dhcp->state = new_state;
 8016478:	687b      	ldr	r3, [r7, #4]
 801647a:	78fa      	ldrb	r2, [r7, #3]
 801647c:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 801647e:	687b      	ldr	r3, [r7, #4]
 8016480:	2200      	movs	r2, #0
 8016482:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 8016484:	687b      	ldr	r3, [r7, #4]
 8016486:	2200      	movs	r2, #0
 8016488:	811a      	strh	r2, [r3, #8]
  }
}
 801648a:	bf00      	nop
 801648c:	370c      	adds	r7, #12
 801648e:	46bd      	mov	sp, r7
 8016490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016494:	4770      	bx	lr
	...

08016498 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 8016498:	b580      	push	{r7, lr}
 801649a:	b082      	sub	sp, #8
 801649c:	af00      	add	r7, sp, #0
 801649e:	6039      	str	r1, [r7, #0]
 80164a0:	4611      	mov	r1, r2
 80164a2:	461a      	mov	r2, r3
 80164a4:	4603      	mov	r3, r0
 80164a6:	80fb      	strh	r3, [r7, #6]
 80164a8:	460b      	mov	r3, r1
 80164aa:	717b      	strb	r3, [r7, #5]
 80164ac:	4613      	mov	r3, r2
 80164ae:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80164b0:	88fa      	ldrh	r2, [r7, #6]
 80164b2:	793b      	ldrb	r3, [r7, #4]
 80164b4:	4413      	add	r3, r2
 80164b6:	3302      	adds	r3, #2
 80164b8:	2b44      	cmp	r3, #68	; 0x44
 80164ba:	d906      	bls.n	80164ca <dhcp_option+0x32>
 80164bc:	4b0d      	ldr	r3, [pc, #52]	; (80164f4 <dhcp_option+0x5c>)
 80164be:	f240 529a 	movw	r2, #1434	; 0x59a
 80164c2:	490d      	ldr	r1, [pc, #52]	; (80164f8 <dhcp_option+0x60>)
 80164c4:	480d      	ldr	r0, [pc, #52]	; (80164fc <dhcp_option+0x64>)
 80164c6:	f003 fd1b 	bl	8019f00 <iprintf>
  options[options_out_len++] = option_type;
 80164ca:	88fb      	ldrh	r3, [r7, #6]
 80164cc:	1c5a      	adds	r2, r3, #1
 80164ce:	80fa      	strh	r2, [r7, #6]
 80164d0:	461a      	mov	r2, r3
 80164d2:	683b      	ldr	r3, [r7, #0]
 80164d4:	4413      	add	r3, r2
 80164d6:	797a      	ldrb	r2, [r7, #5]
 80164d8:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 80164da:	88fb      	ldrh	r3, [r7, #6]
 80164dc:	1c5a      	adds	r2, r3, #1
 80164de:	80fa      	strh	r2, [r7, #6]
 80164e0:	461a      	mov	r2, r3
 80164e2:	683b      	ldr	r3, [r7, #0]
 80164e4:	4413      	add	r3, r2
 80164e6:	793a      	ldrb	r2, [r7, #4]
 80164e8:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80164ea:	88fb      	ldrh	r3, [r7, #6]
}
 80164ec:	4618      	mov	r0, r3
 80164ee:	3708      	adds	r7, #8
 80164f0:	46bd      	mov	sp, r7
 80164f2:	bd80      	pop	{r7, pc}
 80164f4:	0801df60 	.word	0x0801df60
 80164f8:	0801e0f4 	.word	0x0801e0f4
 80164fc:	0801dfc0 	.word	0x0801dfc0

08016500 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 8016500:	b580      	push	{r7, lr}
 8016502:	b082      	sub	sp, #8
 8016504:	af00      	add	r7, sp, #0
 8016506:	4603      	mov	r3, r0
 8016508:	6039      	str	r1, [r7, #0]
 801650a:	80fb      	strh	r3, [r7, #6]
 801650c:	4613      	mov	r3, r2
 801650e:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8016510:	88fb      	ldrh	r3, [r7, #6]
 8016512:	2b43      	cmp	r3, #67	; 0x43
 8016514:	d906      	bls.n	8016524 <dhcp_option_byte+0x24>
 8016516:	4b0a      	ldr	r3, [pc, #40]	; (8016540 <dhcp_option_byte+0x40>)
 8016518:	f240 52a6 	movw	r2, #1446	; 0x5a6
 801651c:	4909      	ldr	r1, [pc, #36]	; (8016544 <dhcp_option_byte+0x44>)
 801651e:	480a      	ldr	r0, [pc, #40]	; (8016548 <dhcp_option_byte+0x48>)
 8016520:	f003 fcee 	bl	8019f00 <iprintf>
  options[options_out_len++] = value;
 8016524:	88fb      	ldrh	r3, [r7, #6]
 8016526:	1c5a      	adds	r2, r3, #1
 8016528:	80fa      	strh	r2, [r7, #6]
 801652a:	461a      	mov	r2, r3
 801652c:	683b      	ldr	r3, [r7, #0]
 801652e:	4413      	add	r3, r2
 8016530:	797a      	ldrb	r2, [r7, #5]
 8016532:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8016534:	88fb      	ldrh	r3, [r7, #6]
}
 8016536:	4618      	mov	r0, r3
 8016538:	3708      	adds	r7, #8
 801653a:	46bd      	mov	sp, r7
 801653c:	bd80      	pop	{r7, pc}
 801653e:	bf00      	nop
 8016540:	0801df60 	.word	0x0801df60
 8016544:	0801e138 	.word	0x0801e138
 8016548:	0801dfc0 	.word	0x0801dfc0

0801654c <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 801654c:	b580      	push	{r7, lr}
 801654e:	b082      	sub	sp, #8
 8016550:	af00      	add	r7, sp, #0
 8016552:	4603      	mov	r3, r0
 8016554:	6039      	str	r1, [r7, #0]
 8016556:	80fb      	strh	r3, [r7, #6]
 8016558:	4613      	mov	r3, r2
 801655a:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 801655c:	88fb      	ldrh	r3, [r7, #6]
 801655e:	3302      	adds	r3, #2
 8016560:	2b44      	cmp	r3, #68	; 0x44
 8016562:	d906      	bls.n	8016572 <dhcp_option_short+0x26>
 8016564:	4b0f      	ldr	r3, [pc, #60]	; (80165a4 <dhcp_option_short+0x58>)
 8016566:	f240 52ae 	movw	r2, #1454	; 0x5ae
 801656a:	490f      	ldr	r1, [pc, #60]	; (80165a8 <dhcp_option_short+0x5c>)
 801656c:	480f      	ldr	r0, [pc, #60]	; (80165ac <dhcp_option_short+0x60>)
 801656e:	f003 fcc7 	bl	8019f00 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8016572:	88bb      	ldrh	r3, [r7, #4]
 8016574:	0a1b      	lsrs	r3, r3, #8
 8016576:	b29a      	uxth	r2, r3
 8016578:	88fb      	ldrh	r3, [r7, #6]
 801657a:	1c59      	adds	r1, r3, #1
 801657c:	80f9      	strh	r1, [r7, #6]
 801657e:	4619      	mov	r1, r3
 8016580:	683b      	ldr	r3, [r7, #0]
 8016582:	440b      	add	r3, r1
 8016584:	b2d2      	uxtb	r2, r2
 8016586:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8016588:	88fb      	ldrh	r3, [r7, #6]
 801658a:	1c5a      	adds	r2, r3, #1
 801658c:	80fa      	strh	r2, [r7, #6]
 801658e:	461a      	mov	r2, r3
 8016590:	683b      	ldr	r3, [r7, #0]
 8016592:	4413      	add	r3, r2
 8016594:	88ba      	ldrh	r2, [r7, #4]
 8016596:	b2d2      	uxtb	r2, r2
 8016598:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801659a:	88fb      	ldrh	r3, [r7, #6]
}
 801659c:	4618      	mov	r0, r3
 801659e:	3708      	adds	r7, #8
 80165a0:	46bd      	mov	sp, r7
 80165a2:	bd80      	pop	{r7, pc}
 80165a4:	0801df60 	.word	0x0801df60
 80165a8:	0801e170 	.word	0x0801e170
 80165ac:	0801dfc0 	.word	0x0801dfc0

080165b0 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 80165b0:	b580      	push	{r7, lr}
 80165b2:	b084      	sub	sp, #16
 80165b4:	af00      	add	r7, sp, #0
 80165b6:	4603      	mov	r3, r0
 80165b8:	60b9      	str	r1, [r7, #8]
 80165ba:	607a      	str	r2, [r7, #4]
 80165bc:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 80165be:	89fb      	ldrh	r3, [r7, #14]
 80165c0:	3304      	adds	r3, #4
 80165c2:	2b44      	cmp	r3, #68	; 0x44
 80165c4:	d906      	bls.n	80165d4 <dhcp_option_long+0x24>
 80165c6:	4b19      	ldr	r3, [pc, #100]	; (801662c <dhcp_option_long+0x7c>)
 80165c8:	f240 52b7 	movw	r2, #1463	; 0x5b7
 80165cc:	4918      	ldr	r1, [pc, #96]	; (8016630 <dhcp_option_long+0x80>)
 80165ce:	4819      	ldr	r0, [pc, #100]	; (8016634 <dhcp_option_long+0x84>)
 80165d0:	f003 fc96 	bl	8019f00 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 80165d4:	687b      	ldr	r3, [r7, #4]
 80165d6:	0e1a      	lsrs	r2, r3, #24
 80165d8:	89fb      	ldrh	r3, [r7, #14]
 80165da:	1c59      	adds	r1, r3, #1
 80165dc:	81f9      	strh	r1, [r7, #14]
 80165de:	4619      	mov	r1, r3
 80165e0:	68bb      	ldr	r3, [r7, #8]
 80165e2:	440b      	add	r3, r1
 80165e4:	b2d2      	uxtb	r2, r2
 80165e6:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 80165e8:	687b      	ldr	r3, [r7, #4]
 80165ea:	0c1a      	lsrs	r2, r3, #16
 80165ec:	89fb      	ldrh	r3, [r7, #14]
 80165ee:	1c59      	adds	r1, r3, #1
 80165f0:	81f9      	strh	r1, [r7, #14]
 80165f2:	4619      	mov	r1, r3
 80165f4:	68bb      	ldr	r3, [r7, #8]
 80165f6:	440b      	add	r3, r1
 80165f8:	b2d2      	uxtb	r2, r2
 80165fa:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 80165fc:	687b      	ldr	r3, [r7, #4]
 80165fe:	0a1a      	lsrs	r2, r3, #8
 8016600:	89fb      	ldrh	r3, [r7, #14]
 8016602:	1c59      	adds	r1, r3, #1
 8016604:	81f9      	strh	r1, [r7, #14]
 8016606:	4619      	mov	r1, r3
 8016608:	68bb      	ldr	r3, [r7, #8]
 801660a:	440b      	add	r3, r1
 801660c:	b2d2      	uxtb	r2, r2
 801660e:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8016610:	89fb      	ldrh	r3, [r7, #14]
 8016612:	1c5a      	adds	r2, r3, #1
 8016614:	81fa      	strh	r2, [r7, #14]
 8016616:	461a      	mov	r2, r3
 8016618:	68bb      	ldr	r3, [r7, #8]
 801661a:	4413      	add	r3, r2
 801661c:	687a      	ldr	r2, [r7, #4]
 801661e:	b2d2      	uxtb	r2, r2
 8016620:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8016622:	89fb      	ldrh	r3, [r7, #14]
}
 8016624:	4618      	mov	r0, r3
 8016626:	3710      	adds	r7, #16
 8016628:	46bd      	mov	sp, r7
 801662a:	bd80      	pop	{r7, pc}
 801662c:	0801df60 	.word	0x0801df60
 8016630:	0801e1ac 	.word	0x0801e1ac
 8016634:	0801dfc0 	.word	0x0801dfc0

08016638 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 8016638:	b580      	push	{r7, lr}
 801663a:	b092      	sub	sp, #72	; 0x48
 801663c:	af00      	add	r7, sp, #0
 801663e:	6078      	str	r0, [r7, #4]
 8016640:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 8016642:	2300      	movs	r3, #0
 8016644:	633b      	str	r3, [r7, #48]	; 0x30
  int parse_sname_as_options = 0;
 8016646:	2300      	movs	r3, #0
 8016648:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 801664a:	2208      	movs	r2, #8
 801664c:	2100      	movs	r1, #0
 801664e:	48b8      	ldr	r0, [pc, #736]	; (8016930 <dhcp_parse_reply+0x2f8>)
 8016650:	f003 fb6e 	bl	8019d30 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 8016654:	687b      	ldr	r3, [r7, #4]
 8016656:	895b      	ldrh	r3, [r3, #10]
 8016658:	2b2b      	cmp	r3, #43	; 0x2b
 801665a:	d802      	bhi.n	8016662 <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 801665c:	f06f 0301 	mvn.w	r3, #1
 8016660:	e2b8      	b.n	8016bd4 <dhcp_parse_reply+0x59c>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 8016662:	687b      	ldr	r3, [r7, #4]
 8016664:	685b      	ldr	r3, [r3, #4]
 8016666:	61fb      	str	r3, [r7, #28]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 8016668:	23f0      	movs	r3, #240	; 0xf0
 801666a:	87bb      	strh	r3, [r7, #60]	; 0x3c
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 801666c:	687b      	ldr	r3, [r7, #4]
 801666e:	891b      	ldrh	r3, [r3, #8]
 8016670:	877b      	strh	r3, [r7, #58]	; 0x3a
again:
  q = p;
 8016672:	687b      	ldr	r3, [r7, #4]
 8016674:	637b      	str	r3, [r7, #52]	; 0x34
  while ((q != NULL) && (options_idx >= q->len)) {
 8016676:	e00c      	b.n	8016692 <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 8016678:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801667a:	895b      	ldrh	r3, [r3, #10]
 801667c:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 801667e:	1ad3      	subs	r3, r2, r3
 8016680:	87bb      	strh	r3, [r7, #60]	; 0x3c
    options_idx_max = (u16_t)(options_idx_max - q->len);
 8016682:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016684:	895b      	ldrh	r3, [r3, #10]
 8016686:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8016688:	1ad3      	subs	r3, r2, r3
 801668a:	877b      	strh	r3, [r7, #58]	; 0x3a
    q = q->next;
 801668c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801668e:	681b      	ldr	r3, [r3, #0]
 8016690:	637b      	str	r3, [r7, #52]	; 0x34
  while ((q != NULL) && (options_idx >= q->len)) {
 8016692:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016694:	2b00      	cmp	r3, #0
 8016696:	d004      	beq.n	80166a2 <dhcp_parse_reply+0x6a>
 8016698:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801669a:	895b      	ldrh	r3, [r3, #10]
 801669c:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 801669e:	429a      	cmp	r2, r3
 80166a0:	d2ea      	bcs.n	8016678 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 80166a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80166a4:	2b00      	cmp	r3, #0
 80166a6:	d102      	bne.n	80166ae <dhcp_parse_reply+0x76>
    return ERR_BUF;
 80166a8:	f06f 0301 	mvn.w	r3, #1
 80166ac:	e292      	b.n	8016bd4 <dhcp_parse_reply+0x59c>
  }
  offset = options_idx;
 80166ae:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80166b0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  offset_max = options_idx_max;
 80166b4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80166b6:	87fb      	strh	r3, [r7, #62]	; 0x3e
  options = (u8_t *)q->payload;
 80166b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80166ba:	685b      	ldr	r3, [r3, #4]
 80166bc:	643b      	str	r3, [r7, #64]	; 0x40
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 80166be:	e247      	b.n	8016b50 <dhcp_parse_reply+0x518>
    u8_t op = options[offset];
 80166c0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80166c4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80166c6:	4413      	add	r3, r2
 80166c8:	781b      	ldrb	r3, [r3, #0]
 80166ca:	76fb      	strb	r3, [r7, #27]
    u8_t len;
    u8_t decode_len = 0;
 80166cc:	2300      	movs	r3, #0
 80166ce:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    int decode_idx = -1;
 80166d2:	f04f 33ff 	mov.w	r3, #4294967295
 80166d6:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t val_offset = (u16_t)(offset + 2);
 80166d8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80166dc:	3302      	adds	r3, #2
 80166de:	847b      	strh	r3, [r7, #34]	; 0x22
    if (val_offset < offset) {
 80166e0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80166e2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80166e6:	429a      	cmp	r2, r3
 80166e8:	d202      	bcs.n	80166f0 <dhcp_parse_reply+0xb8>
      /* overflow */
      return ERR_BUF;
 80166ea:	f06f 0301 	mvn.w	r3, #1
 80166ee:	e271      	b.n	8016bd4 <dhcp_parse_reply+0x59c>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 80166f0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80166f4:	3301      	adds	r3, #1
 80166f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80166f8:	8952      	ldrh	r2, [r2, #10]
 80166fa:	4293      	cmp	r3, r2
 80166fc:	da08      	bge.n	8016710 <dhcp_parse_reply+0xd8>
      len = options[offset + 1];
 80166fe:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8016702:	3301      	adds	r3, #1
 8016704:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8016706:	4413      	add	r3, r2
 8016708:	781b      	ldrb	r3, [r3, #0]
 801670a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801670e:	e00b      	b.n	8016728 <dhcp_parse_reply+0xf0>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8016710:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016712:	681b      	ldr	r3, [r3, #0]
 8016714:	2b00      	cmp	r3, #0
 8016716:	d004      	beq.n	8016722 <dhcp_parse_reply+0xea>
 8016718:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801671a:	681b      	ldr	r3, [r3, #0]
 801671c:	685b      	ldr	r3, [r3, #4]
 801671e:	781b      	ldrb	r3, [r3, #0]
 8016720:	e000      	b.n	8016724 <dhcp_parse_reply+0xec>
 8016722:	2300      	movs	r3, #0
 8016724:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 8016728:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801672c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    switch (op) {
 8016730:	7efb      	ldrb	r3, [r7, #27]
 8016732:	2b3b      	cmp	r3, #59	; 0x3b
 8016734:	f200 812c 	bhi.w	8016990 <dhcp_parse_reply+0x358>
 8016738:	a201      	add	r2, pc, #4	; (adr r2, 8016740 <dhcp_parse_reply+0x108>)
 801673a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801673e:	bf00      	nop
 8016740:	08016831 	.word	0x08016831
 8016744:	08016841 	.word	0x08016841
 8016748:	08016991 	.word	0x08016991
 801674c:	08016863 	.word	0x08016863
 8016750:	08016991 	.word	0x08016991
 8016754:	08016991 	.word	0x08016991
 8016758:	08016991 	.word	0x08016991
 801675c:	08016991 	.word	0x08016991
 8016760:	08016991 	.word	0x08016991
 8016764:	08016991 	.word	0x08016991
 8016768:	08016991 	.word	0x08016991
 801676c:	08016991 	.word	0x08016991
 8016770:	08016991 	.word	0x08016991
 8016774:	08016991 	.word	0x08016991
 8016778:	08016991 	.word	0x08016991
 801677c:	08016991 	.word	0x08016991
 8016780:	08016991 	.word	0x08016991
 8016784:	08016991 	.word	0x08016991
 8016788:	08016991 	.word	0x08016991
 801678c:	08016991 	.word	0x08016991
 8016790:	08016991 	.word	0x08016991
 8016794:	08016991 	.word	0x08016991
 8016798:	08016991 	.word	0x08016991
 801679c:	08016991 	.word	0x08016991
 80167a0:	08016991 	.word	0x08016991
 80167a4:	08016991 	.word	0x08016991
 80167a8:	08016991 	.word	0x08016991
 80167ac:	08016991 	.word	0x08016991
 80167b0:	08016991 	.word	0x08016991
 80167b4:	08016991 	.word	0x08016991
 80167b8:	08016991 	.word	0x08016991
 80167bc:	08016991 	.word	0x08016991
 80167c0:	08016991 	.word	0x08016991
 80167c4:	08016991 	.word	0x08016991
 80167c8:	08016991 	.word	0x08016991
 80167cc:	08016991 	.word	0x08016991
 80167d0:	08016991 	.word	0x08016991
 80167d4:	08016991 	.word	0x08016991
 80167d8:	08016991 	.word	0x08016991
 80167dc:	08016991 	.word	0x08016991
 80167e0:	08016991 	.word	0x08016991
 80167e4:	08016991 	.word	0x08016991
 80167e8:	08016991 	.word	0x08016991
 80167ec:	08016991 	.word	0x08016991
 80167f0:	08016991 	.word	0x08016991
 80167f4:	08016991 	.word	0x08016991
 80167f8:	08016991 	.word	0x08016991
 80167fc:	08016991 	.word	0x08016991
 8016800:	08016991 	.word	0x08016991
 8016804:	08016991 	.word	0x08016991
 8016808:	08016991 	.word	0x08016991
 801680c:	0801688f 	.word	0x0801688f
 8016810:	080168b1 	.word	0x080168b1
 8016814:	080168ed 	.word	0x080168ed
 8016818:	0801690f 	.word	0x0801690f
 801681c:	08016991 	.word	0x08016991
 8016820:	08016991 	.word	0x08016991
 8016824:	08016991 	.word	0x08016991
 8016828:	0801694d 	.word	0x0801694d
 801682c:	0801696f 	.word	0x0801696f
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 8016830:	2300      	movs	r3, #0
 8016832:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8016836:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801683a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        /* will be increased below */
        break;
 801683e:	e0ab      	b.n	8016998 <dhcp_parse_reply+0x360>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8016840:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8016844:	2b04      	cmp	r3, #4
 8016846:	d009      	beq.n	801685c <dhcp_parse_reply+0x224>
 8016848:	4b3a      	ldr	r3, [pc, #232]	; (8016934 <dhcp_parse_reply+0x2fc>)
 801684a:	f240 622e 	movw	r2, #1582	; 0x62e
 801684e:	493a      	ldr	r1, [pc, #232]	; (8016938 <dhcp_parse_reply+0x300>)
 8016850:	483a      	ldr	r0, [pc, #232]	; (801693c <dhcp_parse_reply+0x304>)
 8016852:	f003 fb55 	bl	8019f00 <iprintf>
 8016856:	f06f 0305 	mvn.w	r3, #5
 801685a:	e1bb      	b.n	8016bd4 <dhcp_parse_reply+0x59c>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 801685c:	2306      	movs	r3, #6
 801685e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8016860:	e09a      	b.n	8016998 <dhcp_parse_reply+0x360>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 8016862:	2304      	movs	r3, #4
 8016864:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8016868:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 801686c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8016870:	429a      	cmp	r2, r3
 8016872:	d209      	bcs.n	8016888 <dhcp_parse_reply+0x250>
 8016874:	4b2f      	ldr	r3, [pc, #188]	; (8016934 <dhcp_parse_reply+0x2fc>)
 8016876:	f240 6233 	movw	r2, #1587	; 0x633
 801687a:	4931      	ldr	r1, [pc, #196]	; (8016940 <dhcp_parse_reply+0x308>)
 801687c:	482f      	ldr	r0, [pc, #188]	; (801693c <dhcp_parse_reply+0x304>)
 801687e:	f003 fb3f 	bl	8019f00 <iprintf>
 8016882:	f06f 0305 	mvn.w	r3, #5
 8016886:	e1a5      	b.n	8016bd4 <dhcp_parse_reply+0x59c>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8016888:	2307      	movs	r3, #7
 801688a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801688c:	e084      	b.n	8016998 <dhcp_parse_reply+0x360>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801688e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8016892:	2b04      	cmp	r3, #4
 8016894:	d009      	beq.n	80168aa <dhcp_parse_reply+0x272>
 8016896:	4b27      	ldr	r3, [pc, #156]	; (8016934 <dhcp_parse_reply+0x2fc>)
 8016898:	f240 6241 	movw	r2, #1601	; 0x641
 801689c:	4926      	ldr	r1, [pc, #152]	; (8016938 <dhcp_parse_reply+0x300>)
 801689e:	4827      	ldr	r0, [pc, #156]	; (801693c <dhcp_parse_reply+0x304>)
 80168a0:	f003 fb2e 	bl	8019f00 <iprintf>
 80168a4:	f06f 0305 	mvn.w	r3, #5
 80168a8:	e194      	b.n	8016bd4 <dhcp_parse_reply+0x59c>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 80168aa:	2303      	movs	r3, #3
 80168ac:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80168ae:	e073      	b.n	8016998 <dhcp_parse_reply+0x360>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 80168b0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80168b4:	2b01      	cmp	r3, #1
 80168b6:	d009      	beq.n	80168cc <dhcp_parse_reply+0x294>
 80168b8:	4b1e      	ldr	r3, [pc, #120]	; (8016934 <dhcp_parse_reply+0x2fc>)
 80168ba:	f240 624f 	movw	r2, #1615	; 0x64f
 80168be:	4921      	ldr	r1, [pc, #132]	; (8016944 <dhcp_parse_reply+0x30c>)
 80168c0:	481e      	ldr	r0, [pc, #120]	; (801693c <dhcp_parse_reply+0x304>)
 80168c2:	f003 fb1d 	bl	8019f00 <iprintf>
 80168c6:	f06f 0305 	mvn.w	r3, #5
 80168ca:	e183      	b.n	8016bd4 <dhcp_parse_reply+0x59c>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 80168cc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80168ce:	2bf0      	cmp	r3, #240	; 0xf0
 80168d0:	d009      	beq.n	80168e6 <dhcp_parse_reply+0x2ae>
 80168d2:	4b18      	ldr	r3, [pc, #96]	; (8016934 <dhcp_parse_reply+0x2fc>)
 80168d4:	f240 6251 	movw	r2, #1617	; 0x651
 80168d8:	491b      	ldr	r1, [pc, #108]	; (8016948 <dhcp_parse_reply+0x310>)
 80168da:	4818      	ldr	r0, [pc, #96]	; (801693c <dhcp_parse_reply+0x304>)
 80168dc:	f003 fb10 	bl	8019f00 <iprintf>
 80168e0:	f06f 0305 	mvn.w	r3, #5
 80168e4:	e176      	b.n	8016bd4 <dhcp_parse_reply+0x59c>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 80168e6:	2300      	movs	r3, #0
 80168e8:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80168ea:	e055      	b.n	8016998 <dhcp_parse_reply+0x360>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 80168ec:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80168f0:	2b01      	cmp	r3, #1
 80168f2:	d009      	beq.n	8016908 <dhcp_parse_reply+0x2d0>
 80168f4:	4b0f      	ldr	r3, [pc, #60]	; (8016934 <dhcp_parse_reply+0x2fc>)
 80168f6:	f240 6255 	movw	r2, #1621	; 0x655
 80168fa:	4912      	ldr	r1, [pc, #72]	; (8016944 <dhcp_parse_reply+0x30c>)
 80168fc:	480f      	ldr	r0, [pc, #60]	; (801693c <dhcp_parse_reply+0x304>)
 80168fe:	f003 faff 	bl	8019f00 <iprintf>
 8016902:	f06f 0305 	mvn.w	r3, #5
 8016906:	e165      	b.n	8016bd4 <dhcp_parse_reply+0x59c>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 8016908:	2301      	movs	r3, #1
 801690a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801690c:	e044      	b.n	8016998 <dhcp_parse_reply+0x360>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801690e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8016912:	2b04      	cmp	r3, #4
 8016914:	d009      	beq.n	801692a <dhcp_parse_reply+0x2f2>
 8016916:	4b07      	ldr	r3, [pc, #28]	; (8016934 <dhcp_parse_reply+0x2fc>)
 8016918:	f240 6259 	movw	r2, #1625	; 0x659
 801691c:	4906      	ldr	r1, [pc, #24]	; (8016938 <dhcp_parse_reply+0x300>)
 801691e:	4807      	ldr	r0, [pc, #28]	; (801693c <dhcp_parse_reply+0x304>)
 8016920:	f003 faee 	bl	8019f00 <iprintf>
 8016924:	f06f 0305 	mvn.w	r3, #5
 8016928:	e154      	b.n	8016bd4 <dhcp_parse_reply+0x59c>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 801692a:	2302      	movs	r3, #2
 801692c:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801692e:	e033      	b.n	8016998 <dhcp_parse_reply+0x360>
 8016930:	20013b48 	.word	0x20013b48
 8016934:	0801df60 	.word	0x0801df60
 8016938:	0801e1e8 	.word	0x0801e1e8
 801693c:	0801dfc0 	.word	0x0801dfc0
 8016940:	0801e1f4 	.word	0x0801e1f4
 8016944:	0801e208 	.word	0x0801e208
 8016948:	0801e214 	.word	0x0801e214
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801694c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8016950:	2b04      	cmp	r3, #4
 8016952:	d009      	beq.n	8016968 <dhcp_parse_reply+0x330>
 8016954:	4ba1      	ldr	r3, [pc, #644]	; (8016bdc <dhcp_parse_reply+0x5a4>)
 8016956:	f240 625d 	movw	r2, #1629	; 0x65d
 801695a:	49a1      	ldr	r1, [pc, #644]	; (8016be0 <dhcp_parse_reply+0x5a8>)
 801695c:	48a1      	ldr	r0, [pc, #644]	; (8016be4 <dhcp_parse_reply+0x5ac>)
 801695e:	f003 facf 	bl	8019f00 <iprintf>
 8016962:	f06f 0305 	mvn.w	r3, #5
 8016966:	e135      	b.n	8016bd4 <dhcp_parse_reply+0x59c>
        decode_idx = DHCP_OPTION_IDX_T1;
 8016968:	2304      	movs	r3, #4
 801696a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801696c:	e014      	b.n	8016998 <dhcp_parse_reply+0x360>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801696e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8016972:	2b04      	cmp	r3, #4
 8016974:	d009      	beq.n	801698a <dhcp_parse_reply+0x352>
 8016976:	4b99      	ldr	r3, [pc, #612]	; (8016bdc <dhcp_parse_reply+0x5a4>)
 8016978:	f240 6261 	movw	r2, #1633	; 0x661
 801697c:	4998      	ldr	r1, [pc, #608]	; (8016be0 <dhcp_parse_reply+0x5a8>)
 801697e:	4899      	ldr	r0, [pc, #612]	; (8016be4 <dhcp_parse_reply+0x5ac>)
 8016980:	f003 fabe 	bl	8019f00 <iprintf>
 8016984:	f06f 0305 	mvn.w	r3, #5
 8016988:	e124      	b.n	8016bd4 <dhcp_parse_reply+0x59c>
        decode_idx = DHCP_OPTION_IDX_T2;
 801698a:	2305      	movs	r3, #5
 801698c:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801698e:	e003      	b.n	8016998 <dhcp_parse_reply+0x360>
      default:
        decode_len = 0;
 8016990:	2300      	movs	r3, #0
 8016992:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 8016996:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 8016998:	7efb      	ldrb	r3, [r7, #27]
 801699a:	2b00      	cmp	r3, #0
 801699c:	d105      	bne.n	80169aa <dhcp_parse_reply+0x372>
      offset++;
 801699e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80169a2:	3301      	adds	r3, #1
 80169a4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80169a8:	e0a4      	b.n	8016af4 <dhcp_parse_reply+0x4bc>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 80169aa:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80169ae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80169b2:	4413      	add	r3, r2
 80169b4:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 80169b8:	4293      	cmp	r3, r2
 80169ba:	dd02      	ble.n	80169c2 <dhcp_parse_reply+0x38a>
        /* overflow */
        return ERR_BUF;
 80169bc:	f06f 0301 	mvn.w	r3, #1
 80169c0:	e108      	b.n	8016bd4 <dhcp_parse_reply+0x59c>
      }
      offset = (u16_t)(offset + len + 2);
 80169c2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80169c6:	b29a      	uxth	r2, r3
 80169c8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80169cc:	4413      	add	r3, r2
 80169ce:	b29b      	uxth	r3, r3
 80169d0:	3302      	adds	r3, #2
 80169d2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      if (decode_len > 0) {
 80169d6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80169da:	2b00      	cmp	r3, #0
 80169dc:	f000 808a 	beq.w	8016af4 <dhcp_parse_reply+0x4bc>
        u32_t value = 0;
 80169e0:	2300      	movs	r3, #0
 80169e2:	60fb      	str	r3, [r7, #12]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 80169e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169e6:	2b00      	cmp	r3, #0
 80169e8:	db02      	blt.n	80169f0 <dhcp_parse_reply+0x3b8>
 80169ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169ec:	2b07      	cmp	r3, #7
 80169ee:	dd06      	ble.n	80169fe <dhcp_parse_reply+0x3c6>
 80169f0:	4b7a      	ldr	r3, [pc, #488]	; (8016bdc <dhcp_parse_reply+0x5a4>)
 80169f2:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 80169f6:	497c      	ldr	r1, [pc, #496]	; (8016be8 <dhcp_parse_reply+0x5b0>)
 80169f8:	487a      	ldr	r0, [pc, #488]	; (8016be4 <dhcp_parse_reply+0x5ac>)
 80169fa:	f003 fa81 	bl	8019f00 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 80169fe:	4a7b      	ldr	r2, [pc, #492]	; (8016bec <dhcp_parse_reply+0x5b4>)
 8016a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a02:	4413      	add	r3, r2
 8016a04:	781b      	ldrb	r3, [r3, #0]
 8016a06:	2b00      	cmp	r3, #0
 8016a08:	d174      	bne.n	8016af4 <dhcp_parse_reply+0x4bc>
          copy_len = LWIP_MIN(decode_len, 4);
 8016a0a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8016a0e:	2b04      	cmp	r3, #4
 8016a10:	bf28      	it	cs
 8016a12:	2304      	movcs	r3, #4
 8016a14:	b2db      	uxtb	r3, r3
 8016a16:	833b      	strh	r3, [r7, #24]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8016a18:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016a1a:	8b3a      	ldrh	r2, [r7, #24]
 8016a1c:	f107 010c 	add.w	r1, r7, #12
 8016a20:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8016a22:	f7f8 f937 	bl	800ec94 <pbuf_copy_partial>
 8016a26:	4603      	mov	r3, r0
 8016a28:	461a      	mov	r2, r3
 8016a2a:	8b3b      	ldrh	r3, [r7, #24]
 8016a2c:	4293      	cmp	r3, r2
 8016a2e:	d002      	beq.n	8016a36 <dhcp_parse_reply+0x3fe>
            return ERR_BUF;
 8016a30:	f06f 0301 	mvn.w	r3, #1
 8016a34:	e0ce      	b.n	8016bd4 <dhcp_parse_reply+0x59c>
          }
          if (decode_len > 4) {
 8016a36:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8016a3a:	2b04      	cmp	r3, #4
 8016a3c:	d933      	bls.n	8016aa6 <dhcp_parse_reply+0x46e>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 8016a3e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8016a42:	f003 0303 	and.w	r3, r3, #3
 8016a46:	b2db      	uxtb	r3, r3
 8016a48:	2b00      	cmp	r3, #0
 8016a4a:	d009      	beq.n	8016a60 <dhcp_parse_reply+0x428>
 8016a4c:	4b63      	ldr	r3, [pc, #396]	; (8016bdc <dhcp_parse_reply+0x5a4>)
 8016a4e:	f240 6281 	movw	r2, #1665	; 0x681
 8016a52:	4967      	ldr	r1, [pc, #412]	; (8016bf0 <dhcp_parse_reply+0x5b8>)
 8016a54:	4863      	ldr	r0, [pc, #396]	; (8016be4 <dhcp_parse_reply+0x5ac>)
 8016a56:	f003 fa53 	bl	8019f00 <iprintf>
 8016a5a:	f06f 0305 	mvn.w	r3, #5
 8016a5e:	e0b9      	b.n	8016bd4 <dhcp_parse_reply+0x59c>
            dhcp_got_option(dhcp, decode_idx);
 8016a60:	4a62      	ldr	r2, [pc, #392]	; (8016bec <dhcp_parse_reply+0x5b4>)
 8016a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a64:	4413      	add	r3, r2
 8016a66:	2201      	movs	r2, #1
 8016a68:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 8016a6a:	68fb      	ldr	r3, [r7, #12]
 8016a6c:	4618      	mov	r0, r3
 8016a6e:	f7f6 f9fe 	bl	800ce6e <lwip_htonl>
 8016a72:	4602      	mov	r2, r0
 8016a74:	495f      	ldr	r1, [pc, #380]	; (8016bf4 <dhcp_parse_reply+0x5bc>)
 8016a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 8016a7c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8016a80:	3b04      	subs	r3, #4
 8016a82:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
            next_val_offset = (u16_t)(val_offset + 4);
 8016a86:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016a88:	3304      	adds	r3, #4
 8016a8a:	82fb      	strh	r3, [r7, #22]
            if (next_val_offset < val_offset) {
 8016a8c:	8afa      	ldrh	r2, [r7, #22]
 8016a8e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016a90:	429a      	cmp	r2, r3
 8016a92:	d202      	bcs.n	8016a9a <dhcp_parse_reply+0x462>
              /* overflow */
              return ERR_BUF;
 8016a94:	f06f 0301 	mvn.w	r3, #1
 8016a98:	e09c      	b.n	8016bd4 <dhcp_parse_reply+0x59c>
            }
            val_offset = next_val_offset;
 8016a9a:	8afb      	ldrh	r3, [r7, #22]
 8016a9c:	847b      	strh	r3, [r7, #34]	; 0x22
            decode_idx++;
 8016a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016aa0:	3301      	adds	r3, #1
 8016aa2:	627b      	str	r3, [r7, #36]	; 0x24
            goto decode_next;
 8016aa4:	e79e      	b.n	80169e4 <dhcp_parse_reply+0x3ac>
          } else if (decode_len == 4) {
 8016aa6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8016aaa:	2b04      	cmp	r3, #4
 8016aac:	d106      	bne.n	8016abc <dhcp_parse_reply+0x484>
            value = lwip_ntohl(value);
 8016aae:	68fb      	ldr	r3, [r7, #12]
 8016ab0:	4618      	mov	r0, r3
 8016ab2:	f7f6 f9dc 	bl	800ce6e <lwip_htonl>
 8016ab6:	4603      	mov	r3, r0
 8016ab8:	60fb      	str	r3, [r7, #12]
 8016aba:	e011      	b.n	8016ae0 <dhcp_parse_reply+0x4a8>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 8016abc:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8016ac0:	2b01      	cmp	r3, #1
 8016ac2:	d009      	beq.n	8016ad8 <dhcp_parse_reply+0x4a0>
 8016ac4:	4b45      	ldr	r3, [pc, #276]	; (8016bdc <dhcp_parse_reply+0x5a4>)
 8016ac6:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 8016aca:	494b      	ldr	r1, [pc, #300]	; (8016bf8 <dhcp_parse_reply+0x5c0>)
 8016acc:	4845      	ldr	r0, [pc, #276]	; (8016be4 <dhcp_parse_reply+0x5ac>)
 8016ace:	f003 fa17 	bl	8019f00 <iprintf>
 8016ad2:	f06f 0305 	mvn.w	r3, #5
 8016ad6:	e07d      	b.n	8016bd4 <dhcp_parse_reply+0x59c>
            value = ((u8_t *)&value)[0];
 8016ad8:	f107 030c 	add.w	r3, r7, #12
 8016adc:	781b      	ldrb	r3, [r3, #0]
 8016ade:	60fb      	str	r3, [r7, #12]
          }
          dhcp_got_option(dhcp, decode_idx);
 8016ae0:	4a42      	ldr	r2, [pc, #264]	; (8016bec <dhcp_parse_reply+0x5b4>)
 8016ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ae4:	4413      	add	r3, r2
 8016ae6:	2201      	movs	r2, #1
 8016ae8:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 8016aea:	68fa      	ldr	r2, [r7, #12]
 8016aec:	4941      	ldr	r1, [pc, #260]	; (8016bf4 <dhcp_parse_reply+0x5bc>)
 8016aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016af0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 8016af4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016af6:	895b      	ldrh	r3, [r3, #10]
 8016af8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8016afc:	429a      	cmp	r2, r3
 8016afe:	d327      	bcc.n	8016b50 <dhcp_parse_reply+0x518>
      offset = (u16_t)(offset - q->len);
 8016b00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016b02:	895b      	ldrh	r3, [r3, #10]
 8016b04:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8016b08:	1ad3      	subs	r3, r2, r3
 8016b0a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      offset_max = (u16_t)(offset_max - q->len);
 8016b0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016b10:	895b      	ldrh	r3, [r3, #10]
 8016b12:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8016b14:	1ad3      	subs	r3, r2, r3
 8016b16:	87fb      	strh	r3, [r7, #62]	; 0x3e
      if (offset < offset_max) {
 8016b18:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8016b1c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8016b1e:	429a      	cmp	r2, r3
 8016b20:	d213      	bcs.n	8016b4a <dhcp_parse_reply+0x512>
        q = q->next;
 8016b22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016b24:	681b      	ldr	r3, [r3, #0]
 8016b26:	637b      	str	r3, [r7, #52]	; 0x34
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8016b28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016b2a:	2b00      	cmp	r3, #0
 8016b2c:	d109      	bne.n	8016b42 <dhcp_parse_reply+0x50a>
 8016b2e:	4b2b      	ldr	r3, [pc, #172]	; (8016bdc <dhcp_parse_reply+0x5a4>)
 8016b30:	f240 629d 	movw	r2, #1693	; 0x69d
 8016b34:	4931      	ldr	r1, [pc, #196]	; (8016bfc <dhcp_parse_reply+0x5c4>)
 8016b36:	482b      	ldr	r0, [pc, #172]	; (8016be4 <dhcp_parse_reply+0x5ac>)
 8016b38:	f003 f9e2 	bl	8019f00 <iprintf>
 8016b3c:	f06f 0305 	mvn.w	r3, #5
 8016b40:	e048      	b.n	8016bd4 <dhcp_parse_reply+0x59c>
        options = (u8_t *)q->payload;
 8016b42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016b44:	685b      	ldr	r3, [r3, #4]
 8016b46:	643b      	str	r3, [r7, #64]	; 0x40
 8016b48:	e002      	b.n	8016b50 <dhcp_parse_reply+0x518>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 8016b4a:	f06f 0301 	mvn.w	r3, #1
 8016b4e:	e041      	b.n	8016bd4 <dhcp_parse_reply+0x59c>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8016b50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016b52:	2b00      	cmp	r3, #0
 8016b54:	d00c      	beq.n	8016b70 <dhcp_parse_reply+0x538>
 8016b56:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8016b5a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8016b5c:	429a      	cmp	r2, r3
 8016b5e:	d207      	bcs.n	8016b70 <dhcp_parse_reply+0x538>
 8016b60:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8016b64:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8016b66:	4413      	add	r3, r2
 8016b68:	781b      	ldrb	r3, [r3, #0]
 8016b6a:	2bff      	cmp	r3, #255	; 0xff
 8016b6c:	f47f ada8 	bne.w	80166c0 <dhcp_parse_reply+0x88>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8016b70:	4b1e      	ldr	r3, [pc, #120]	; (8016bec <dhcp_parse_reply+0x5b4>)
 8016b72:	781b      	ldrb	r3, [r3, #0]
 8016b74:	2b00      	cmp	r3, #0
 8016b76:	d018      	beq.n	8016baa <dhcp_parse_reply+0x572>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8016b78:	4b1e      	ldr	r3, [pc, #120]	; (8016bf4 <dhcp_parse_reply+0x5bc>)
 8016b7a:	681b      	ldr	r3, [r3, #0]
 8016b7c:	613b      	str	r3, [r7, #16]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8016b7e:	4b1b      	ldr	r3, [pc, #108]	; (8016bec <dhcp_parse_reply+0x5b4>)
 8016b80:	2200      	movs	r2, #0
 8016b82:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8016b84:	693b      	ldr	r3, [r7, #16]
 8016b86:	2b01      	cmp	r3, #1
 8016b88:	d102      	bne.n	8016b90 <dhcp_parse_reply+0x558>
      parse_file_as_options = 1;
 8016b8a:	2301      	movs	r3, #1
 8016b8c:	633b      	str	r3, [r7, #48]	; 0x30
 8016b8e:	e00c      	b.n	8016baa <dhcp_parse_reply+0x572>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 8016b90:	693b      	ldr	r3, [r7, #16]
 8016b92:	2b02      	cmp	r3, #2
 8016b94:	d102      	bne.n	8016b9c <dhcp_parse_reply+0x564>
      parse_sname_as_options = 1;
 8016b96:	2301      	movs	r3, #1
 8016b98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016b9a:	e006      	b.n	8016baa <dhcp_parse_reply+0x572>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 8016b9c:	693b      	ldr	r3, [r7, #16]
 8016b9e:	2b03      	cmp	r3, #3
 8016ba0:	d103      	bne.n	8016baa <dhcp_parse_reply+0x572>
      parse_sname_as_options = 1;
 8016ba2:	2301      	movs	r3, #1
 8016ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
      parse_file_as_options = 1;
 8016ba6:	2301      	movs	r3, #1
 8016ba8:	633b      	str	r3, [r7, #48]	; 0x30
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 8016baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016bac:	2b00      	cmp	r3, #0
 8016bae:	d006      	beq.n	8016bbe <dhcp_parse_reply+0x586>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 8016bb0:	2300      	movs	r3, #0
 8016bb2:	633b      	str	r3, [r7, #48]	; 0x30
    options_idx = DHCP_FILE_OFS;
 8016bb4:	236c      	movs	r3, #108	; 0x6c
 8016bb6:	87bb      	strh	r3, [r7, #60]	; 0x3c
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 8016bb8:	23ec      	movs	r3, #236	; 0xec
 8016bba:	877b      	strh	r3, [r7, #58]	; 0x3a
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 8016bbc:	e559      	b.n	8016672 <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 8016bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016bc0:	2b00      	cmp	r3, #0
 8016bc2:	d006      	beq.n	8016bd2 <dhcp_parse_reply+0x59a>
    parse_sname_as_options = 0;
 8016bc4:	2300      	movs	r3, #0
 8016bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_SNAME_OFS;
 8016bc8:	232c      	movs	r3, #44	; 0x2c
 8016bca:	87bb      	strh	r3, [r7, #60]	; 0x3c
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 8016bcc:	236c      	movs	r3, #108	; 0x6c
 8016bce:	877b      	strh	r3, [r7, #58]	; 0x3a
    goto again;
 8016bd0:	e54f      	b.n	8016672 <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 8016bd2:	2300      	movs	r3, #0
}
 8016bd4:	4618      	mov	r0, r3
 8016bd6:	3748      	adds	r7, #72	; 0x48
 8016bd8:	46bd      	mov	sp, r7
 8016bda:	bd80      	pop	{r7, pc}
 8016bdc:	0801df60 	.word	0x0801df60
 8016be0:	0801e1e8 	.word	0x0801e1e8
 8016be4:	0801dfc0 	.word	0x0801dfc0
 8016be8:	0801e22c 	.word	0x0801e22c
 8016bec:	20013b48 	.word	0x20013b48
 8016bf0:	0801e240 	.word	0x0801e240
 8016bf4:	20013b28 	.word	0x20013b28
 8016bf8:	0801e258 	.word	0x0801e258
 8016bfc:	0801e26c 	.word	0x0801e26c

08016c00 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8016c00:	b580      	push	{r7, lr}
 8016c02:	b08a      	sub	sp, #40	; 0x28
 8016c04:	af00      	add	r7, sp, #0
 8016c06:	60f8      	str	r0, [r7, #12]
 8016c08:	60b9      	str	r1, [r7, #8]
 8016c0a:	607a      	str	r2, [r7, #4]
 8016c0c:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 8016c0e:	4b5e      	ldr	r3, [pc, #376]	; (8016d88 <dhcp_recv+0x188>)
 8016c10:	685b      	ldr	r3, [r3, #4]
 8016c12:	61fb      	str	r3, [r7, #28]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016c14:	69fb      	ldr	r3, [r7, #28]
 8016c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016c18:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 8016c1a:	687b      	ldr	r3, [r7, #4]
 8016c1c:	685b      	ldr	r3, [r3, #4]
 8016c1e:	617b      	str	r3, [r7, #20]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 8016c20:	69bb      	ldr	r3, [r7, #24]
 8016c22:	2b00      	cmp	r3, #0
 8016c24:	f000 809a 	beq.w	8016d5c <dhcp_recv+0x15c>
 8016c28:	69bb      	ldr	r3, [r7, #24]
 8016c2a:	791b      	ldrb	r3, [r3, #4]
 8016c2c:	2b00      	cmp	r3, #0
 8016c2e:	f000 8095 	beq.w	8016d5c <dhcp_recv+0x15c>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 8016c32:	687b      	ldr	r3, [r7, #4]
 8016c34:	895b      	ldrh	r3, [r3, #10]
 8016c36:	2b2b      	cmp	r3, #43	; 0x2b
 8016c38:	f240 8092 	bls.w	8016d60 <dhcp_recv+0x160>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 8016c3c:	697b      	ldr	r3, [r7, #20]
 8016c3e:	781b      	ldrb	r3, [r3, #0]
 8016c40:	2b02      	cmp	r3, #2
 8016c42:	f040 808f 	bne.w	8016d64 <dhcp_recv+0x164>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8016c46:	2300      	movs	r3, #0
 8016c48:	74fb      	strb	r3, [r7, #19]
 8016c4a:	e00e      	b.n	8016c6a <dhcp_recv+0x6a>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8016c4c:	7cfb      	ldrb	r3, [r7, #19]
 8016c4e:	69fa      	ldr	r2, [r7, #28]
 8016c50:	4413      	add	r3, r2
 8016c52:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8016c56:	7cfb      	ldrb	r3, [r7, #19]
 8016c58:	6979      	ldr	r1, [r7, #20]
 8016c5a:	440b      	add	r3, r1
 8016c5c:	7f1b      	ldrb	r3, [r3, #28]
 8016c5e:	429a      	cmp	r2, r3
 8016c60:	f040 8082 	bne.w	8016d68 <dhcp_recv+0x168>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8016c64:	7cfb      	ldrb	r3, [r7, #19]
 8016c66:	3301      	adds	r3, #1
 8016c68:	74fb      	strb	r3, [r7, #19]
 8016c6a:	69fb      	ldr	r3, [r7, #28]
 8016c6c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016c70:	7cfa      	ldrb	r2, [r7, #19]
 8016c72:	429a      	cmp	r2, r3
 8016c74:	d202      	bcs.n	8016c7c <dhcp_recv+0x7c>
 8016c76:	7cfb      	ldrb	r3, [r7, #19]
 8016c78:	2b05      	cmp	r3, #5
 8016c7a:	d9e7      	bls.n	8016c4c <dhcp_recv+0x4c>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 8016c7c:	697b      	ldr	r3, [r7, #20]
 8016c7e:	685b      	ldr	r3, [r3, #4]
 8016c80:	4618      	mov	r0, r3
 8016c82:	f7f6 f8f4 	bl	800ce6e <lwip_htonl>
 8016c86:	4602      	mov	r2, r0
 8016c88:	69bb      	ldr	r3, [r7, #24]
 8016c8a:	681b      	ldr	r3, [r3, #0]
 8016c8c:	429a      	cmp	r2, r3
 8016c8e:	d16d      	bne.n	8016d6c <dhcp_recv+0x16c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 8016c90:	69b9      	ldr	r1, [r7, #24]
 8016c92:	6878      	ldr	r0, [r7, #4]
 8016c94:	f7ff fcd0 	bl	8016638 <dhcp_parse_reply>
 8016c98:	4603      	mov	r3, r0
 8016c9a:	2b00      	cmp	r3, #0
 8016c9c:	d168      	bne.n	8016d70 <dhcp_recv+0x170>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 8016c9e:	4b3b      	ldr	r3, [pc, #236]	; (8016d8c <dhcp_recv+0x18c>)
 8016ca0:	785b      	ldrb	r3, [r3, #1]
 8016ca2:	2b00      	cmp	r3, #0
 8016ca4:	d066      	beq.n	8016d74 <dhcp_recv+0x174>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 8016ca6:	687b      	ldr	r3, [r7, #4]
 8016ca8:	685b      	ldr	r3, [r3, #4]
 8016caa:	627b      	str	r3, [r7, #36]	; 0x24
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 8016cac:	4b38      	ldr	r3, [pc, #224]	; (8016d90 <dhcp_recv+0x190>)
 8016cae:	685b      	ldr	r3, [r3, #4]
 8016cb0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 8016cb4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8016cb8:	2b05      	cmp	r3, #5
 8016cba:	d12a      	bne.n	8016d12 <dhcp_recv+0x112>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 8016cbc:	69bb      	ldr	r3, [r7, #24]
 8016cbe:	795b      	ldrb	r3, [r3, #5]
 8016cc0:	2b01      	cmp	r3, #1
 8016cc2:	d112      	bne.n	8016cea <dhcp_recv+0xea>
      dhcp_handle_ack(netif, msg_in);
 8016cc4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016cc6:	69f8      	ldr	r0, [r7, #28]
 8016cc8:	f7fe fe00 	bl	80158cc <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 8016ccc:	69fb      	ldr	r3, [r7, #28]
 8016cce:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016cd2:	f003 0308 	and.w	r3, r3, #8
 8016cd6:	2b00      	cmp	r3, #0
 8016cd8:	d003      	beq.n	8016ce2 <dhcp_recv+0xe2>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 8016cda:	69f8      	ldr	r0, [r7, #28]
 8016cdc:	f7fe fb70 	bl	80153c0 <dhcp_check>
 8016ce0:	e04b      	b.n	8016d7a <dhcp_recv+0x17a>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 8016ce2:	69f8      	ldr	r0, [r7, #28]
 8016ce4:	f7ff f850 	bl	8015d88 <dhcp_bind>
 8016ce8:	e047      	b.n	8016d7a <dhcp_recv+0x17a>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8016cea:	69bb      	ldr	r3, [r7, #24]
 8016cec:	795b      	ldrb	r3, [r3, #5]
 8016cee:	2b03      	cmp	r3, #3
 8016cf0:	d007      	beq.n	8016d02 <dhcp_recv+0x102>
 8016cf2:	69bb      	ldr	r3, [r7, #24]
 8016cf4:	795b      	ldrb	r3, [r3, #5]
 8016cf6:	2b04      	cmp	r3, #4
 8016cf8:	d003      	beq.n	8016d02 <dhcp_recv+0x102>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 8016cfa:	69bb      	ldr	r3, [r7, #24]
 8016cfc:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8016cfe:	2b05      	cmp	r3, #5
 8016d00:	d13b      	bne.n	8016d7a <dhcp_recv+0x17a>
      dhcp_handle_ack(netif, msg_in);
 8016d02:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016d04:	69f8      	ldr	r0, [r7, #28]
 8016d06:	f7fe fde1 	bl	80158cc <dhcp_handle_ack>
      dhcp_bind(netif);
 8016d0a:	69f8      	ldr	r0, [r7, #28]
 8016d0c:	f7ff f83c 	bl	8015d88 <dhcp_bind>
 8016d10:	e033      	b.n	8016d7a <dhcp_recv+0x17a>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 8016d12:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8016d16:	2b06      	cmp	r3, #6
 8016d18:	d113      	bne.n	8016d42 <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8016d1a:	69bb      	ldr	r3, [r7, #24]
 8016d1c:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 8016d1e:	2b03      	cmp	r3, #3
 8016d20:	d00b      	beq.n	8016d3a <dhcp_recv+0x13a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8016d22:	69bb      	ldr	r3, [r7, #24]
 8016d24:	795b      	ldrb	r3, [r3, #5]
 8016d26:	2b01      	cmp	r3, #1
 8016d28:	d007      	beq.n	8016d3a <dhcp_recv+0x13a>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8016d2a:	69bb      	ldr	r3, [r7, #24]
 8016d2c:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8016d2e:	2b04      	cmp	r3, #4
 8016d30:	d003      	beq.n	8016d3a <dhcp_recv+0x13a>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8016d32:	69bb      	ldr	r3, [r7, #24]
 8016d34:	795b      	ldrb	r3, [r3, #5]
 8016d36:	2b05      	cmp	r3, #5
 8016d38:	d103      	bne.n	8016d42 <dhcp_recv+0x142>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 8016d3a:	69f8      	ldr	r0, [r7, #28]
 8016d3c:	f7fe fb26 	bl	801538c <dhcp_handle_nak>
 8016d40:	e01b      	b.n	8016d7a <dhcp_recv+0x17a>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 8016d42:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8016d46:	2b02      	cmp	r3, #2
 8016d48:	d116      	bne.n	8016d78 <dhcp_recv+0x178>
 8016d4a:	69bb      	ldr	r3, [r7, #24]
 8016d4c:	795b      	ldrb	r3, [r3, #5]
 8016d4e:	2b06      	cmp	r3, #6
 8016d50:	d112      	bne.n	8016d78 <dhcp_recv+0x178>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 8016d52:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016d54:	69f8      	ldr	r0, [r7, #28]
 8016d56:	f7fe fb67 	bl	8015428 <dhcp_handle_offer>
 8016d5a:	e00e      	b.n	8016d7a <dhcp_recv+0x17a>
    goto free_pbuf_and_return;
 8016d5c:	bf00      	nop
 8016d5e:	e00c      	b.n	8016d7a <dhcp_recv+0x17a>
    goto free_pbuf_and_return;
 8016d60:	bf00      	nop
 8016d62:	e00a      	b.n	8016d7a <dhcp_recv+0x17a>
    goto free_pbuf_and_return;
 8016d64:	bf00      	nop
 8016d66:	e008      	b.n	8016d7a <dhcp_recv+0x17a>
      goto free_pbuf_and_return;
 8016d68:	bf00      	nop
 8016d6a:	e006      	b.n	8016d7a <dhcp_recv+0x17a>
    goto free_pbuf_and_return;
 8016d6c:	bf00      	nop
 8016d6e:	e004      	b.n	8016d7a <dhcp_recv+0x17a>
    goto free_pbuf_and_return;
 8016d70:	bf00      	nop
 8016d72:	e002      	b.n	8016d7a <dhcp_recv+0x17a>
    goto free_pbuf_and_return;
 8016d74:	bf00      	nop
 8016d76:	e000      	b.n	8016d7a <dhcp_recv+0x17a>
  }

free_pbuf_and_return:
 8016d78:	bf00      	nop
  pbuf_free(p);
 8016d7a:	6878      	ldr	r0, [r7, #4]
 8016d7c:	f7f7 fd84 	bl	800e888 <pbuf_free>
}
 8016d80:	bf00      	nop
 8016d82:	3728      	adds	r7, #40	; 0x28
 8016d84:	46bd      	mov	sp, r7
 8016d86:	bd80      	pop	{r7, pc}
 8016d88:	2000a050 	.word	0x2000a050
 8016d8c:	20013b48 	.word	0x20013b48
 8016d90:	20013b28 	.word	0x20013b28

08016d94 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 8016d94:	b580      	push	{r7, lr}
 8016d96:	b088      	sub	sp, #32
 8016d98:	af00      	add	r7, sp, #0
 8016d9a:	60f8      	str	r0, [r7, #12]
 8016d9c:	60b9      	str	r1, [r7, #8]
 8016d9e:	603b      	str	r3, [r7, #0]
 8016da0:	4613      	mov	r3, r2
 8016da2:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 8016da4:	68fb      	ldr	r3, [r7, #12]
 8016da6:	2b00      	cmp	r3, #0
 8016da8:	d108      	bne.n	8016dbc <dhcp_create_msg+0x28>
 8016daa:	4b5f      	ldr	r3, [pc, #380]	; (8016f28 <dhcp_create_msg+0x194>)
 8016dac:	f240 7269 	movw	r2, #1897	; 0x769
 8016db0:	495e      	ldr	r1, [pc, #376]	; (8016f2c <dhcp_create_msg+0x198>)
 8016db2:	485f      	ldr	r0, [pc, #380]	; (8016f30 <dhcp_create_msg+0x19c>)
 8016db4:	f003 f8a4 	bl	8019f00 <iprintf>
 8016db8:	2300      	movs	r3, #0
 8016dba:	e0b1      	b.n	8016f20 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 8016dbc:	68bb      	ldr	r3, [r7, #8]
 8016dbe:	2b00      	cmp	r3, #0
 8016dc0:	d108      	bne.n	8016dd4 <dhcp_create_msg+0x40>
 8016dc2:	4b59      	ldr	r3, [pc, #356]	; (8016f28 <dhcp_create_msg+0x194>)
 8016dc4:	f240 726a 	movw	r2, #1898	; 0x76a
 8016dc8:	495a      	ldr	r1, [pc, #360]	; (8016f34 <dhcp_create_msg+0x1a0>)
 8016dca:	4859      	ldr	r0, [pc, #356]	; (8016f30 <dhcp_create_msg+0x19c>)
 8016dcc:	f003 f898 	bl	8019f00 <iprintf>
 8016dd0:	2300      	movs	r3, #0
 8016dd2:	e0a5      	b.n	8016f20 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8016dd4:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016dd8:	f44f 719a 	mov.w	r1, #308	; 0x134
 8016ddc:	2036      	movs	r0, #54	; 0x36
 8016dde:	f7f7 fa6b 	bl	800e2b8 <pbuf_alloc>
 8016de2:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 8016de4:	69bb      	ldr	r3, [r7, #24]
 8016de6:	2b00      	cmp	r3, #0
 8016de8:	d101      	bne.n	8016dee <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 8016dea:	2300      	movs	r3, #0
 8016dec:	e098      	b.n	8016f20 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 8016dee:	69bb      	ldr	r3, [r7, #24]
 8016df0:	895b      	ldrh	r3, [r3, #10]
 8016df2:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 8016df6:	d206      	bcs.n	8016e06 <dhcp_create_msg+0x72>
 8016df8:	4b4b      	ldr	r3, [pc, #300]	; (8016f28 <dhcp_create_msg+0x194>)
 8016dfa:	f240 7271 	movw	r2, #1905	; 0x771
 8016dfe:	494e      	ldr	r1, [pc, #312]	; (8016f38 <dhcp_create_msg+0x1a4>)
 8016e00:	484b      	ldr	r0, [pc, #300]	; (8016f30 <dhcp_create_msg+0x19c>)
 8016e02:	f003 f87d 	bl	8019f00 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 8016e06:	79fb      	ldrb	r3, [r7, #7]
 8016e08:	2b03      	cmp	r3, #3
 8016e0a:	d103      	bne.n	8016e14 <dhcp_create_msg+0x80>
 8016e0c:	68bb      	ldr	r3, [r7, #8]
 8016e0e:	795b      	ldrb	r3, [r3, #5]
 8016e10:	2b03      	cmp	r3, #3
 8016e12:	d10d      	bne.n	8016e30 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 8016e14:	68bb      	ldr	r3, [r7, #8]
 8016e16:	799b      	ldrb	r3, [r3, #6]
 8016e18:	2b00      	cmp	r3, #0
 8016e1a:	d105      	bne.n	8016e28 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 8016e1c:	f003 f8fe 	bl	801a01c <rand>
 8016e20:	4603      	mov	r3, r0
 8016e22:	461a      	mov	r2, r3
 8016e24:	4b45      	ldr	r3, [pc, #276]	; (8016f3c <dhcp_create_msg+0x1a8>)
 8016e26:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 8016e28:	4b44      	ldr	r3, [pc, #272]	; (8016f3c <dhcp_create_msg+0x1a8>)
 8016e2a:	681a      	ldr	r2, [r3, #0]
 8016e2c:	68bb      	ldr	r3, [r7, #8]
 8016e2e:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 8016e30:	69bb      	ldr	r3, [r7, #24]
 8016e32:	685b      	ldr	r3, [r3, #4]
 8016e34:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 8016e36:	f44f 729a 	mov.w	r2, #308	; 0x134
 8016e3a:	2100      	movs	r1, #0
 8016e3c:	6978      	ldr	r0, [r7, #20]
 8016e3e:	f002 ff77 	bl	8019d30 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 8016e42:	697b      	ldr	r3, [r7, #20]
 8016e44:	2201      	movs	r2, #1
 8016e46:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 8016e48:	697b      	ldr	r3, [r7, #20]
 8016e4a:	2201      	movs	r2, #1
 8016e4c:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 8016e4e:	68fb      	ldr	r3, [r7, #12]
 8016e50:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8016e54:	697b      	ldr	r3, [r7, #20]
 8016e56:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 8016e58:	68bb      	ldr	r3, [r7, #8]
 8016e5a:	681b      	ldr	r3, [r3, #0]
 8016e5c:	4618      	mov	r0, r3
 8016e5e:	f7f6 f806 	bl	800ce6e <lwip_htonl>
 8016e62:	4602      	mov	r2, r0
 8016e64:	697b      	ldr	r3, [r7, #20]
 8016e66:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8016e68:	79fb      	ldrb	r3, [r7, #7]
 8016e6a:	2b08      	cmp	r3, #8
 8016e6c:	d010      	beq.n	8016e90 <dhcp_create_msg+0xfc>
 8016e6e:	79fb      	ldrb	r3, [r7, #7]
 8016e70:	2b04      	cmp	r3, #4
 8016e72:	d00d      	beq.n	8016e90 <dhcp_create_msg+0xfc>
 8016e74:	79fb      	ldrb	r3, [r7, #7]
 8016e76:	2b07      	cmp	r3, #7
 8016e78:	d00a      	beq.n	8016e90 <dhcp_create_msg+0xfc>
 8016e7a:	79fb      	ldrb	r3, [r7, #7]
 8016e7c:	2b03      	cmp	r3, #3
 8016e7e:	d10c      	bne.n	8016e9a <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8016e80:	68bb      	ldr	r3, [r7, #8]
 8016e82:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8016e84:	2b05      	cmp	r3, #5
 8016e86:	d003      	beq.n	8016e90 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8016e88:	68bb      	ldr	r3, [r7, #8]
 8016e8a:	795b      	ldrb	r3, [r3, #5]
 8016e8c:	2b04      	cmp	r3, #4
 8016e8e:	d104      	bne.n	8016e9a <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 8016e90:	68fb      	ldr	r3, [r7, #12]
 8016e92:	3304      	adds	r3, #4
 8016e94:	681a      	ldr	r2, [r3, #0]
 8016e96:	697b      	ldr	r3, [r7, #20]
 8016e98:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8016e9a:	2300      	movs	r3, #0
 8016e9c:	83fb      	strh	r3, [r7, #30]
 8016e9e:	e00c      	b.n	8016eba <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 8016ea0:	8bfa      	ldrh	r2, [r7, #30]
 8016ea2:	8bfb      	ldrh	r3, [r7, #30]
 8016ea4:	68f9      	ldr	r1, [r7, #12]
 8016ea6:	440a      	add	r2, r1
 8016ea8:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 8016eac:	697a      	ldr	r2, [r7, #20]
 8016eae:	4413      	add	r3, r2
 8016eb0:	460a      	mov	r2, r1
 8016eb2:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8016eb4:	8bfb      	ldrh	r3, [r7, #30]
 8016eb6:	3301      	adds	r3, #1
 8016eb8:	83fb      	strh	r3, [r7, #30]
 8016eba:	8bfb      	ldrh	r3, [r7, #30]
 8016ebc:	2b05      	cmp	r3, #5
 8016ebe:	d9ef      	bls.n	8016ea0 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8016ec0:	697b      	ldr	r3, [r7, #20]
 8016ec2:	2200      	movs	r2, #0
 8016ec4:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8016ec8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 8016ecc:	2200      	movs	r2, #0
 8016ece:	f062 027d 	orn	r2, r2, #125	; 0x7d
 8016ed2:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 8016ed6:	2200      	movs	r2, #0
 8016ed8:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 8016edc:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 8016ee0:	2200      	movs	r2, #0
 8016ee2:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8016ee6:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 8016eea:	697b      	ldr	r3, [r7, #20]
 8016eec:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016ef0:	2301      	movs	r3, #1
 8016ef2:	2235      	movs	r2, #53	; 0x35
 8016ef4:	2000      	movs	r0, #0
 8016ef6:	f7ff facf 	bl	8016498 <dhcp_option>
 8016efa:	4603      	mov	r3, r0
 8016efc:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 8016efe:	697b      	ldr	r3, [r7, #20]
 8016f00:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016f04:	79fa      	ldrb	r2, [r7, #7]
 8016f06:	8a7b      	ldrh	r3, [r7, #18]
 8016f08:	4618      	mov	r0, r3
 8016f0a:	f7ff faf9 	bl	8016500 <dhcp_option_byte>
 8016f0e:	4603      	mov	r3, r0
 8016f10:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 8016f12:	683b      	ldr	r3, [r7, #0]
 8016f14:	2b00      	cmp	r3, #0
 8016f16:	d002      	beq.n	8016f1e <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 8016f18:	683b      	ldr	r3, [r7, #0]
 8016f1a:	8a7a      	ldrh	r2, [r7, #18]
 8016f1c:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 8016f1e:	69bb      	ldr	r3, [r7, #24]
}
 8016f20:	4618      	mov	r0, r3
 8016f22:	3720      	adds	r7, #32
 8016f24:	46bd      	mov	sp, r7
 8016f26:	bd80      	pop	{r7, pc}
 8016f28:	0801df60 	.word	0x0801df60
 8016f2c:	0801e280 	.word	0x0801e280
 8016f30:	0801dfc0 	.word	0x0801dfc0
 8016f34:	0801e2a0 	.word	0x0801e2a0
 8016f38:	0801e2c0 	.word	0x0801e2c0
 8016f3c:	20013b58 	.word	0x20013b58

08016f40 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 8016f40:	b580      	push	{r7, lr}
 8016f42:	b084      	sub	sp, #16
 8016f44:	af00      	add	r7, sp, #0
 8016f46:	4603      	mov	r3, r0
 8016f48:	60b9      	str	r1, [r7, #8]
 8016f4a:	607a      	str	r2, [r7, #4]
 8016f4c:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 8016f4e:	89fb      	ldrh	r3, [r7, #14]
 8016f50:	1c5a      	adds	r2, r3, #1
 8016f52:	81fa      	strh	r2, [r7, #14]
 8016f54:	461a      	mov	r2, r3
 8016f56:	68bb      	ldr	r3, [r7, #8]
 8016f58:	4413      	add	r3, r2
 8016f5a:	22ff      	movs	r2, #255	; 0xff
 8016f5c:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8016f5e:	e007      	b.n	8016f70 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 8016f60:	89fb      	ldrh	r3, [r7, #14]
 8016f62:	1c5a      	adds	r2, r3, #1
 8016f64:	81fa      	strh	r2, [r7, #14]
 8016f66:	461a      	mov	r2, r3
 8016f68:	68bb      	ldr	r3, [r7, #8]
 8016f6a:	4413      	add	r3, r2
 8016f6c:	2200      	movs	r2, #0
 8016f6e:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8016f70:	89fb      	ldrh	r3, [r7, #14]
 8016f72:	2b43      	cmp	r3, #67	; 0x43
 8016f74:	d904      	bls.n	8016f80 <dhcp_option_trailer+0x40>
 8016f76:	89fb      	ldrh	r3, [r7, #14]
 8016f78:	f003 0303 	and.w	r3, r3, #3
 8016f7c:	2b00      	cmp	r3, #0
 8016f7e:	d002      	beq.n	8016f86 <dhcp_option_trailer+0x46>
 8016f80:	89fb      	ldrh	r3, [r7, #14]
 8016f82:	2b43      	cmp	r3, #67	; 0x43
 8016f84:	d9ec      	bls.n	8016f60 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8016f86:	89fb      	ldrh	r3, [r7, #14]
 8016f88:	33f0      	adds	r3, #240	; 0xf0
 8016f8a:	b29b      	uxth	r3, r3
 8016f8c:	4619      	mov	r1, r3
 8016f8e:	6878      	ldr	r0, [r7, #4]
 8016f90:	f7f7 faf4 	bl	800e57c <pbuf_realloc>
}
 8016f94:	bf00      	nop
 8016f96:	3710      	adds	r7, #16
 8016f98:	46bd      	mov	sp, r7
 8016f9a:	bd80      	pop	{r7, pc}

08016f9c <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 8016f9c:	b480      	push	{r7}
 8016f9e:	b085      	sub	sp, #20
 8016fa0:	af00      	add	r7, sp, #0
 8016fa2:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 8016fa4:	687b      	ldr	r3, [r7, #4]
 8016fa6:	2b00      	cmp	r3, #0
 8016fa8:	d017      	beq.n	8016fda <dhcp_supplied_address+0x3e>
 8016faa:	687b      	ldr	r3, [r7, #4]
 8016fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016fae:	2b00      	cmp	r3, #0
 8016fb0:	d013      	beq.n	8016fda <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8016fb2:	687b      	ldr	r3, [r7, #4]
 8016fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016fb6:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8016fb8:	68fb      	ldr	r3, [r7, #12]
 8016fba:	795b      	ldrb	r3, [r3, #5]
 8016fbc:	2b0a      	cmp	r3, #10
 8016fbe:	d007      	beq.n	8016fd0 <dhcp_supplied_address+0x34>
 8016fc0:	68fb      	ldr	r3, [r7, #12]
 8016fc2:	795b      	ldrb	r3, [r3, #5]
 8016fc4:	2b05      	cmp	r3, #5
 8016fc6:	d003      	beq.n	8016fd0 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 8016fc8:	68fb      	ldr	r3, [r7, #12]
 8016fca:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8016fcc:	2b04      	cmp	r3, #4
 8016fce:	d101      	bne.n	8016fd4 <dhcp_supplied_address+0x38>
 8016fd0:	2301      	movs	r3, #1
 8016fd2:	e000      	b.n	8016fd6 <dhcp_supplied_address+0x3a>
 8016fd4:	2300      	movs	r3, #0
 8016fd6:	b2db      	uxtb	r3, r3
 8016fd8:	e000      	b.n	8016fdc <dhcp_supplied_address+0x40>
  }
  return 0;
 8016fda:	2300      	movs	r3, #0
}
 8016fdc:	4618      	mov	r0, r3
 8016fde:	3714      	adds	r7, #20
 8016fe0:	46bd      	mov	sp, r7
 8016fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fe6:	4770      	bx	lr

08016fe8 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8016fe8:	b580      	push	{r7, lr}
 8016fea:	b082      	sub	sp, #8
 8016fec:	af00      	add	r7, sp, #0
 8016fee:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8016ff0:	492b      	ldr	r1, [pc, #172]	; (80170a0 <etharp_free_entry+0xb8>)
 8016ff2:	687a      	ldr	r2, [r7, #4]
 8016ff4:	4613      	mov	r3, r2
 8016ff6:	005b      	lsls	r3, r3, #1
 8016ff8:	4413      	add	r3, r2
 8016ffa:	00db      	lsls	r3, r3, #3
 8016ffc:	440b      	add	r3, r1
 8016ffe:	681b      	ldr	r3, [r3, #0]
 8017000:	2b00      	cmp	r3, #0
 8017002:	d013      	beq.n	801702c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8017004:	4926      	ldr	r1, [pc, #152]	; (80170a0 <etharp_free_entry+0xb8>)
 8017006:	687a      	ldr	r2, [r7, #4]
 8017008:	4613      	mov	r3, r2
 801700a:	005b      	lsls	r3, r3, #1
 801700c:	4413      	add	r3, r2
 801700e:	00db      	lsls	r3, r3, #3
 8017010:	440b      	add	r3, r1
 8017012:	681b      	ldr	r3, [r3, #0]
 8017014:	4618      	mov	r0, r3
 8017016:	f7f7 fc37 	bl	800e888 <pbuf_free>
    arp_table[i].q = NULL;
 801701a:	4921      	ldr	r1, [pc, #132]	; (80170a0 <etharp_free_entry+0xb8>)
 801701c:	687a      	ldr	r2, [r7, #4]
 801701e:	4613      	mov	r3, r2
 8017020:	005b      	lsls	r3, r3, #1
 8017022:	4413      	add	r3, r2
 8017024:	00db      	lsls	r3, r3, #3
 8017026:	440b      	add	r3, r1
 8017028:	2200      	movs	r2, #0
 801702a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801702c:	491c      	ldr	r1, [pc, #112]	; (80170a0 <etharp_free_entry+0xb8>)
 801702e:	687a      	ldr	r2, [r7, #4]
 8017030:	4613      	mov	r3, r2
 8017032:	005b      	lsls	r3, r3, #1
 8017034:	4413      	add	r3, r2
 8017036:	00db      	lsls	r3, r3, #3
 8017038:	440b      	add	r3, r1
 801703a:	3314      	adds	r3, #20
 801703c:	2200      	movs	r2, #0
 801703e:	701a      	strb	r2, [r3, #0]
#ifdef LWIP_DEBUG
  /* for debugging, clean out the complete entry */
  arp_table[i].ctime = 0;
 8017040:	4917      	ldr	r1, [pc, #92]	; (80170a0 <etharp_free_entry+0xb8>)
 8017042:	687a      	ldr	r2, [r7, #4]
 8017044:	4613      	mov	r3, r2
 8017046:	005b      	lsls	r3, r3, #1
 8017048:	4413      	add	r3, r2
 801704a:	00db      	lsls	r3, r3, #3
 801704c:	440b      	add	r3, r1
 801704e:	3312      	adds	r3, #18
 8017050:	2200      	movs	r2, #0
 8017052:	801a      	strh	r2, [r3, #0]
  arp_table[i].netif = NULL;
 8017054:	4912      	ldr	r1, [pc, #72]	; (80170a0 <etharp_free_entry+0xb8>)
 8017056:	687a      	ldr	r2, [r7, #4]
 8017058:	4613      	mov	r3, r2
 801705a:	005b      	lsls	r3, r3, #1
 801705c:	4413      	add	r3, r2
 801705e:	00db      	lsls	r3, r3, #3
 8017060:	440b      	add	r3, r1
 8017062:	3308      	adds	r3, #8
 8017064:	2200      	movs	r2, #0
 8017066:	601a      	str	r2, [r3, #0]
  ip4_addr_set_zero(&arp_table[i].ipaddr);
 8017068:	490d      	ldr	r1, [pc, #52]	; (80170a0 <etharp_free_entry+0xb8>)
 801706a:	687a      	ldr	r2, [r7, #4]
 801706c:	4613      	mov	r3, r2
 801706e:	005b      	lsls	r3, r3, #1
 8017070:	4413      	add	r3, r2
 8017072:	00db      	lsls	r3, r3, #3
 8017074:	440b      	add	r3, r1
 8017076:	3304      	adds	r3, #4
 8017078:	2200      	movs	r2, #0
 801707a:	601a      	str	r2, [r3, #0]
  arp_table[i].ethaddr = ethzero;
 801707c:	4908      	ldr	r1, [pc, #32]	; (80170a0 <etharp_free_entry+0xb8>)
 801707e:	687a      	ldr	r2, [r7, #4]
 8017080:	4613      	mov	r3, r2
 8017082:	005b      	lsls	r3, r3, #1
 8017084:	4413      	add	r3, r2
 8017086:	00db      	lsls	r3, r3, #3
 8017088:	440b      	add	r3, r1
 801708a:	3308      	adds	r3, #8
 801708c:	4a05      	ldr	r2, [pc, #20]	; (80170a4 <etharp_free_entry+0xbc>)
 801708e:	3304      	adds	r3, #4
 8017090:	6810      	ldr	r0, [r2, #0]
 8017092:	6018      	str	r0, [r3, #0]
 8017094:	8892      	ldrh	r2, [r2, #4]
 8017096:	809a      	strh	r2, [r3, #4]
#endif /* LWIP_DEBUG */
}
 8017098:	bf00      	nop
 801709a:	3708      	adds	r7, #8
 801709c:	46bd      	mov	sp, r7
 801709e:	bd80      	pop	{r7, pc}
 80170a0:	20013b5c 	.word	0x20013b5c
 80170a4:	0806a438 	.word	0x0806a438

080170a8 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80170a8:	b580      	push	{r7, lr}
 80170aa:	b082      	sub	sp, #8
 80170ac:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80170ae:	2300      	movs	r3, #0
 80170b0:	607b      	str	r3, [r7, #4]
 80170b2:	e09a      	b.n	80171ea <etharp_tmr+0x142>
    u8_t state = arp_table[i].state;
 80170b4:	4951      	ldr	r1, [pc, #324]	; (80171fc <etharp_tmr+0x154>)
 80170b6:	687a      	ldr	r2, [r7, #4]
 80170b8:	4613      	mov	r3, r2
 80170ba:	005b      	lsls	r3, r3, #1
 80170bc:	4413      	add	r3, r2
 80170be:	00db      	lsls	r3, r3, #3
 80170c0:	440b      	add	r3, r1
 80170c2:	3314      	adds	r3, #20
 80170c4:	781b      	ldrb	r3, [r3, #0]
 80170c6:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 80170c8:	78fb      	ldrb	r3, [r7, #3]
 80170ca:	2b00      	cmp	r3, #0
 80170cc:	f000 808a 	beq.w	80171e4 <etharp_tmr+0x13c>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
 80170d0:	78fb      	ldrb	r3, [r7, #3]
 80170d2:	2b05      	cmp	r3, #5
 80170d4:	f000 8086 	beq.w	80171e4 <etharp_tmr+0x13c>
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 80170d8:	4948      	ldr	r1, [pc, #288]	; (80171fc <etharp_tmr+0x154>)
 80170da:	687a      	ldr	r2, [r7, #4]
 80170dc:	4613      	mov	r3, r2
 80170de:	005b      	lsls	r3, r3, #1
 80170e0:	4413      	add	r3, r2
 80170e2:	00db      	lsls	r3, r3, #3
 80170e4:	440b      	add	r3, r1
 80170e6:	3312      	adds	r3, #18
 80170e8:	881b      	ldrh	r3, [r3, #0]
 80170ea:	3301      	adds	r3, #1
 80170ec:	b298      	uxth	r0, r3
 80170ee:	4943      	ldr	r1, [pc, #268]	; (80171fc <etharp_tmr+0x154>)
 80170f0:	687a      	ldr	r2, [r7, #4]
 80170f2:	4613      	mov	r3, r2
 80170f4:	005b      	lsls	r3, r3, #1
 80170f6:	4413      	add	r3, r2
 80170f8:	00db      	lsls	r3, r3, #3
 80170fa:	440b      	add	r3, r1
 80170fc:	3312      	adds	r3, #18
 80170fe:	4602      	mov	r2, r0
 8017100:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8017102:	493e      	ldr	r1, [pc, #248]	; (80171fc <etharp_tmr+0x154>)
 8017104:	687a      	ldr	r2, [r7, #4]
 8017106:	4613      	mov	r3, r2
 8017108:	005b      	lsls	r3, r3, #1
 801710a:	4413      	add	r3, r2
 801710c:	00db      	lsls	r3, r3, #3
 801710e:	440b      	add	r3, r1
 8017110:	3312      	adds	r3, #18
 8017112:	881b      	ldrh	r3, [r3, #0]
 8017114:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8017118:	d215      	bcs.n	8017146 <etharp_tmr+0x9e>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801711a:	4938      	ldr	r1, [pc, #224]	; (80171fc <etharp_tmr+0x154>)
 801711c:	687a      	ldr	r2, [r7, #4]
 801711e:	4613      	mov	r3, r2
 8017120:	005b      	lsls	r3, r3, #1
 8017122:	4413      	add	r3, r2
 8017124:	00db      	lsls	r3, r3, #3
 8017126:	440b      	add	r3, r1
 8017128:	3314      	adds	r3, #20
 801712a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801712c:	2b01      	cmp	r3, #1
 801712e:	d10e      	bne.n	801714e <etharp_tmr+0xa6>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8017130:	4932      	ldr	r1, [pc, #200]	; (80171fc <etharp_tmr+0x154>)
 8017132:	687a      	ldr	r2, [r7, #4]
 8017134:	4613      	mov	r3, r2
 8017136:	005b      	lsls	r3, r3, #1
 8017138:	4413      	add	r3, r2
 801713a:	00db      	lsls	r3, r3, #3
 801713c:	440b      	add	r3, r1
 801713e:	3312      	adds	r3, #18
 8017140:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8017142:	2b04      	cmp	r3, #4
 8017144:	d903      	bls.n	801714e <etharp_tmr+0xa6>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8017146:	6878      	ldr	r0, [r7, #4]
 8017148:	f7ff ff4e 	bl	8016fe8 <etharp_free_entry>
 801714c:	e04a      	b.n	80171e4 <etharp_tmr+0x13c>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801714e:	492b      	ldr	r1, [pc, #172]	; (80171fc <etharp_tmr+0x154>)
 8017150:	687a      	ldr	r2, [r7, #4]
 8017152:	4613      	mov	r3, r2
 8017154:	005b      	lsls	r3, r3, #1
 8017156:	4413      	add	r3, r2
 8017158:	00db      	lsls	r3, r3, #3
 801715a:	440b      	add	r3, r1
 801715c:	3314      	adds	r3, #20
 801715e:	781b      	ldrb	r3, [r3, #0]
 8017160:	2b03      	cmp	r3, #3
 8017162:	d10a      	bne.n	801717a <etharp_tmr+0xd2>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8017164:	4925      	ldr	r1, [pc, #148]	; (80171fc <etharp_tmr+0x154>)
 8017166:	687a      	ldr	r2, [r7, #4]
 8017168:	4613      	mov	r3, r2
 801716a:	005b      	lsls	r3, r3, #1
 801716c:	4413      	add	r3, r2
 801716e:	00db      	lsls	r3, r3, #3
 8017170:	440b      	add	r3, r1
 8017172:	3314      	adds	r3, #20
 8017174:	2204      	movs	r2, #4
 8017176:	701a      	strb	r2, [r3, #0]
 8017178:	e034      	b.n	80171e4 <etharp_tmr+0x13c>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801717a:	4920      	ldr	r1, [pc, #128]	; (80171fc <etharp_tmr+0x154>)
 801717c:	687a      	ldr	r2, [r7, #4]
 801717e:	4613      	mov	r3, r2
 8017180:	005b      	lsls	r3, r3, #1
 8017182:	4413      	add	r3, r2
 8017184:	00db      	lsls	r3, r3, #3
 8017186:	440b      	add	r3, r1
 8017188:	3314      	adds	r3, #20
 801718a:	781b      	ldrb	r3, [r3, #0]
 801718c:	2b04      	cmp	r3, #4
 801718e:	d10a      	bne.n	80171a6 <etharp_tmr+0xfe>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8017190:	491a      	ldr	r1, [pc, #104]	; (80171fc <etharp_tmr+0x154>)
 8017192:	687a      	ldr	r2, [r7, #4]
 8017194:	4613      	mov	r3, r2
 8017196:	005b      	lsls	r3, r3, #1
 8017198:	4413      	add	r3, r2
 801719a:	00db      	lsls	r3, r3, #3
 801719c:	440b      	add	r3, r1
 801719e:	3314      	adds	r3, #20
 80171a0:	2202      	movs	r2, #2
 80171a2:	701a      	strb	r2, [r3, #0]
 80171a4:	e01e      	b.n	80171e4 <etharp_tmr+0x13c>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80171a6:	4915      	ldr	r1, [pc, #84]	; (80171fc <etharp_tmr+0x154>)
 80171a8:	687a      	ldr	r2, [r7, #4]
 80171aa:	4613      	mov	r3, r2
 80171ac:	005b      	lsls	r3, r3, #1
 80171ae:	4413      	add	r3, r2
 80171b0:	00db      	lsls	r3, r3, #3
 80171b2:	440b      	add	r3, r1
 80171b4:	3314      	adds	r3, #20
 80171b6:	781b      	ldrb	r3, [r3, #0]
 80171b8:	2b01      	cmp	r3, #1
 80171ba:	d113      	bne.n	80171e4 <etharp_tmr+0x13c>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80171bc:	490f      	ldr	r1, [pc, #60]	; (80171fc <etharp_tmr+0x154>)
 80171be:	687a      	ldr	r2, [r7, #4]
 80171c0:	4613      	mov	r3, r2
 80171c2:	005b      	lsls	r3, r3, #1
 80171c4:	4413      	add	r3, r2
 80171c6:	00db      	lsls	r3, r3, #3
 80171c8:	440b      	add	r3, r1
 80171ca:	3308      	adds	r3, #8
 80171cc:	6818      	ldr	r0, [r3, #0]
 80171ce:	687a      	ldr	r2, [r7, #4]
 80171d0:	4613      	mov	r3, r2
 80171d2:	005b      	lsls	r3, r3, #1
 80171d4:	4413      	add	r3, r2
 80171d6:	00db      	lsls	r3, r3, #3
 80171d8:	4a08      	ldr	r2, [pc, #32]	; (80171fc <etharp_tmr+0x154>)
 80171da:	4413      	add	r3, r2
 80171dc:	3304      	adds	r3, #4
 80171de:	4619      	mov	r1, r3
 80171e0:	f000 feae 	bl	8017f40 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80171e4:	687b      	ldr	r3, [r7, #4]
 80171e6:	3301      	adds	r3, #1
 80171e8:	607b      	str	r3, [r7, #4]
 80171ea:	687b      	ldr	r3, [r7, #4]
 80171ec:	2b09      	cmp	r3, #9
 80171ee:	f77f af61 	ble.w	80170b4 <etharp_tmr+0xc>
      }
    }
  }
}
 80171f2:	bf00      	nop
 80171f4:	bf00      	nop
 80171f6:	3708      	adds	r7, #8
 80171f8:	46bd      	mov	sp, r7
 80171fa:	bd80      	pop	{r7, pc}
 80171fc:	20013b5c 	.word	0x20013b5c

08017200 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8017200:	b580      	push	{r7, lr}
 8017202:	b08a      	sub	sp, #40	; 0x28
 8017204:	af00      	add	r7, sp, #0
 8017206:	60f8      	str	r0, [r7, #12]
 8017208:	460b      	mov	r3, r1
 801720a:	607a      	str	r2, [r7, #4]
 801720c:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801720e:	230a      	movs	r3, #10
 8017210:	843b      	strh	r3, [r7, #32]
 8017212:	230a      	movs	r3, #10
 8017214:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t empty = ARP_TABLE_SIZE;
 8017216:	230a      	movs	r3, #10
 8017218:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t i = 0;
 801721a:	2300      	movs	r3, #0
 801721c:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801721e:	230a      	movs	r3, #10
 8017220:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8017222:	2300      	movs	r3, #0
 8017224:	83bb      	strh	r3, [r7, #28]
 8017226:	2300      	movs	r3, #0
 8017228:	837b      	strh	r3, [r7, #26]
 801722a:	2300      	movs	r3, #0
 801722c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801722e:	2300      	movs	r3, #0
 8017230:	84fb      	strh	r3, [r7, #38]	; 0x26
 8017232:	e0b1      	b.n	8017398 <etharp_find_entry+0x198>
    u8_t state = arp_table[i].state;
 8017234:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8017238:	49a7      	ldr	r1, [pc, #668]	; (80174d8 <etharp_find_entry+0x2d8>)
 801723a:	4613      	mov	r3, r2
 801723c:	005b      	lsls	r3, r3, #1
 801723e:	4413      	add	r3, r2
 8017240:	00db      	lsls	r3, r3, #3
 8017242:	440b      	add	r3, r1
 8017244:	3314      	adds	r3, #20
 8017246:	781b      	ldrb	r3, [r3, #0]
 8017248:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801724a:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 801724e:	2b0a      	cmp	r3, #10
 8017250:	d105      	bne.n	801725e <etharp_find_entry+0x5e>
 8017252:	7dfb      	ldrb	r3, [r7, #23]
 8017254:	2b00      	cmp	r3, #0
 8017256:	d102      	bne.n	801725e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8017258:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801725a:	84bb      	strh	r3, [r7, #36]	; 0x24
 801725c:	e098      	b.n	8017390 <etharp_find_entry+0x190>
    } else if (state != ETHARP_STATE_EMPTY) {
 801725e:	7dfb      	ldrb	r3, [r7, #23]
 8017260:	2b00      	cmp	r3, #0
 8017262:	f000 8095 	beq.w	8017390 <etharp_find_entry+0x190>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8017266:	7dfb      	ldrb	r3, [r7, #23]
 8017268:	2b01      	cmp	r3, #1
 801726a:	d009      	beq.n	8017280 <etharp_find_entry+0x80>
 801726c:	7dfb      	ldrb	r3, [r7, #23]
 801726e:	2b01      	cmp	r3, #1
 8017270:	d806      	bhi.n	8017280 <etharp_find_entry+0x80>
 8017272:	4b9a      	ldr	r3, [pc, #616]	; (80174dc <etharp_find_entry+0x2dc>)
 8017274:	f240 1223 	movw	r2, #291	; 0x123
 8017278:	4999      	ldr	r1, [pc, #612]	; (80174e0 <etharp_find_entry+0x2e0>)
 801727a:	489a      	ldr	r0, [pc, #616]	; (80174e4 <etharp_find_entry+0x2e4>)
 801727c:	f002 fe40 	bl	8019f00 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8017280:	68fb      	ldr	r3, [r7, #12]
 8017282:	2b00      	cmp	r3, #0
 8017284:	d020      	beq.n	80172c8 <etharp_find_entry+0xc8>
 8017286:	68fb      	ldr	r3, [r7, #12]
 8017288:	6819      	ldr	r1, [r3, #0]
 801728a:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 801728e:	4892      	ldr	r0, [pc, #584]	; (80174d8 <etharp_find_entry+0x2d8>)
 8017290:	4613      	mov	r3, r2
 8017292:	005b      	lsls	r3, r3, #1
 8017294:	4413      	add	r3, r2
 8017296:	00db      	lsls	r3, r3, #3
 8017298:	4403      	add	r3, r0
 801729a:	3304      	adds	r3, #4
 801729c:	681b      	ldr	r3, [r3, #0]
 801729e:	4299      	cmp	r1, r3
 80172a0:	d112      	bne.n	80172c8 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80172a2:	687b      	ldr	r3, [r7, #4]
 80172a4:	2b00      	cmp	r3, #0
 80172a6:	d00c      	beq.n	80172c2 <etharp_find_entry+0xc2>
 80172a8:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 80172ac:	498a      	ldr	r1, [pc, #552]	; (80174d8 <etharp_find_entry+0x2d8>)
 80172ae:	4613      	mov	r3, r2
 80172b0:	005b      	lsls	r3, r3, #1
 80172b2:	4413      	add	r3, r2
 80172b4:	00db      	lsls	r3, r3, #3
 80172b6:	440b      	add	r3, r1
 80172b8:	3308      	adds	r3, #8
 80172ba:	681b      	ldr	r3, [r3, #0]
 80172bc:	687a      	ldr	r2, [r7, #4]
 80172be:	429a      	cmp	r2, r3
 80172c0:	d102      	bne.n	80172c8 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 80172c2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80172c6:	e103      	b.n	80174d0 <etharp_find_entry+0x2d0>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80172c8:	7dfb      	ldrb	r3, [r7, #23]
 80172ca:	2b01      	cmp	r3, #1
 80172cc:	d140      	bne.n	8017350 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80172ce:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 80172d2:	4981      	ldr	r1, [pc, #516]	; (80174d8 <etharp_find_entry+0x2d8>)
 80172d4:	4613      	mov	r3, r2
 80172d6:	005b      	lsls	r3, r3, #1
 80172d8:	4413      	add	r3, r2
 80172da:	00db      	lsls	r3, r3, #3
 80172dc:	440b      	add	r3, r1
 80172de:	681b      	ldr	r3, [r3, #0]
 80172e0:	2b00      	cmp	r3, #0
 80172e2:	d01a      	beq.n	801731a <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 80172e4:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 80172e8:	497b      	ldr	r1, [pc, #492]	; (80174d8 <etharp_find_entry+0x2d8>)
 80172ea:	4613      	mov	r3, r2
 80172ec:	005b      	lsls	r3, r3, #1
 80172ee:	4413      	add	r3, r2
 80172f0:	00db      	lsls	r3, r3, #3
 80172f2:	440b      	add	r3, r1
 80172f4:	3312      	adds	r3, #18
 80172f6:	881b      	ldrh	r3, [r3, #0]
 80172f8:	8bba      	ldrh	r2, [r7, #28]
 80172fa:	429a      	cmp	r2, r3
 80172fc:	d848      	bhi.n	8017390 <etharp_find_entry+0x190>
            old_queue = i;
 80172fe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8017300:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8017302:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8017306:	4974      	ldr	r1, [pc, #464]	; (80174d8 <etharp_find_entry+0x2d8>)
 8017308:	4613      	mov	r3, r2
 801730a:	005b      	lsls	r3, r3, #1
 801730c:	4413      	add	r3, r2
 801730e:	00db      	lsls	r3, r3, #3
 8017310:	440b      	add	r3, r1
 8017312:	3312      	adds	r3, #18
 8017314:	881b      	ldrh	r3, [r3, #0]
 8017316:	83bb      	strh	r3, [r7, #28]
 8017318:	e03a      	b.n	8017390 <etharp_find_entry+0x190>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801731a:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 801731e:	496e      	ldr	r1, [pc, #440]	; (80174d8 <etharp_find_entry+0x2d8>)
 8017320:	4613      	mov	r3, r2
 8017322:	005b      	lsls	r3, r3, #1
 8017324:	4413      	add	r3, r2
 8017326:	00db      	lsls	r3, r3, #3
 8017328:	440b      	add	r3, r1
 801732a:	3312      	adds	r3, #18
 801732c:	881b      	ldrh	r3, [r3, #0]
 801732e:	8b7a      	ldrh	r2, [r7, #26]
 8017330:	429a      	cmp	r2, r3
 8017332:	d82d      	bhi.n	8017390 <etharp_find_entry+0x190>
            old_pending = i;
 8017334:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8017336:	843b      	strh	r3, [r7, #32]
            age_pending = arp_table[i].ctime;
 8017338:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 801733c:	4966      	ldr	r1, [pc, #408]	; (80174d8 <etharp_find_entry+0x2d8>)
 801733e:	4613      	mov	r3, r2
 8017340:	005b      	lsls	r3, r3, #1
 8017342:	4413      	add	r3, r2
 8017344:	00db      	lsls	r3, r3, #3
 8017346:	440b      	add	r3, r1
 8017348:	3312      	adds	r3, #18
 801734a:	881b      	ldrh	r3, [r3, #0]
 801734c:	837b      	strh	r3, [r7, #26]
 801734e:	e01f      	b.n	8017390 <etharp_find_entry+0x190>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8017350:	7dfb      	ldrb	r3, [r7, #23]
 8017352:	2b01      	cmp	r3, #1
 8017354:	d91c      	bls.n	8017390 <etharp_find_entry+0x190>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
 8017356:	7dfb      	ldrb	r3, [r7, #23]
 8017358:	2b04      	cmp	r3, #4
 801735a:	d819      	bhi.n	8017390 <etharp_find_entry+0x190>
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801735c:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8017360:	495d      	ldr	r1, [pc, #372]	; (80174d8 <etharp_find_entry+0x2d8>)
 8017362:	4613      	mov	r3, r2
 8017364:	005b      	lsls	r3, r3, #1
 8017366:	4413      	add	r3, r2
 8017368:	00db      	lsls	r3, r3, #3
 801736a:	440b      	add	r3, r1
 801736c:	3312      	adds	r3, #18
 801736e:	881b      	ldrh	r3, [r3, #0]
 8017370:	8b3a      	ldrh	r2, [r7, #24]
 8017372:	429a      	cmp	r2, r3
 8017374:	d80c      	bhi.n	8017390 <etharp_find_entry+0x190>
            old_stable = i;
 8017376:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8017378:	847b      	strh	r3, [r7, #34]	; 0x22
            age_stable = arp_table[i].ctime;
 801737a:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 801737e:	4956      	ldr	r1, [pc, #344]	; (80174d8 <etharp_find_entry+0x2d8>)
 8017380:	4613      	mov	r3, r2
 8017382:	005b      	lsls	r3, r3, #1
 8017384:	4413      	add	r3, r2
 8017386:	00db      	lsls	r3, r3, #3
 8017388:	440b      	add	r3, r1
 801738a:	3312      	adds	r3, #18
 801738c:	881b      	ldrh	r3, [r3, #0]
 801738e:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8017390:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8017392:	3301      	adds	r3, #1
 8017394:	b29b      	uxth	r3, r3
 8017396:	84fb      	strh	r3, [r7, #38]	; 0x26
 8017398:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801739c:	2b09      	cmp	r3, #9
 801739e:	f77f af49 	ble.w	8017234 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80173a2:	7afb      	ldrb	r3, [r7, #11]
 80173a4:	f003 0302 	and.w	r3, r3, #2
 80173a8:	2b00      	cmp	r3, #0
 80173aa:	d108      	bne.n	80173be <etharp_find_entry+0x1be>
 80173ac:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80173b0:	2b0a      	cmp	r3, #10
 80173b2:	d107      	bne.n	80173c4 <etharp_find_entry+0x1c4>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80173b4:	7afb      	ldrb	r3, [r7, #11]
 80173b6:	f003 0301 	and.w	r3, r3, #1
 80173ba:	2b00      	cmp	r3, #0
 80173bc:	d102      	bne.n	80173c4 <etharp_find_entry+0x1c4>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 80173be:	f04f 33ff 	mov.w	r3, #4294967295
 80173c2:	e085      	b.n	80174d0 <etharp_find_entry+0x2d0>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80173c4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80173c8:	2b09      	cmp	r3, #9
 80173ca:	dc02      	bgt.n	80173d2 <etharp_find_entry+0x1d2>
    i = empty;
 80173cc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80173ce:	84fb      	strh	r3, [r7, #38]	; 0x26
 80173d0:	e039      	b.n	8017446 <etharp_find_entry+0x246>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80173d2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80173d6:	2b09      	cmp	r3, #9
 80173d8:	dc14      	bgt.n	8017404 <etharp_find_entry+0x204>
      /* recycle oldest stable*/
      i = old_stable;
 80173da:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80173dc:	84fb      	strh	r3, [r7, #38]	; 0x26
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80173de:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 80173e2:	493d      	ldr	r1, [pc, #244]	; (80174d8 <etharp_find_entry+0x2d8>)
 80173e4:	4613      	mov	r3, r2
 80173e6:	005b      	lsls	r3, r3, #1
 80173e8:	4413      	add	r3, r2
 80173ea:	00db      	lsls	r3, r3, #3
 80173ec:	440b      	add	r3, r1
 80173ee:	681b      	ldr	r3, [r3, #0]
 80173f0:	2b00      	cmp	r3, #0
 80173f2:	d018      	beq.n	8017426 <etharp_find_entry+0x226>
 80173f4:	4b39      	ldr	r3, [pc, #228]	; (80174dc <etharp_find_entry+0x2dc>)
 80173f6:	f240 126d 	movw	r2, #365	; 0x16d
 80173fa:	493b      	ldr	r1, [pc, #236]	; (80174e8 <etharp_find_entry+0x2e8>)
 80173fc:	4839      	ldr	r0, [pc, #228]	; (80174e4 <etharp_find_entry+0x2e4>)
 80173fe:	f002 fd7f 	bl	8019f00 <iprintf>
 8017402:	e010      	b.n	8017426 <etharp_find_entry+0x226>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8017404:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8017408:	2b09      	cmp	r3, #9
 801740a:	dc02      	bgt.n	8017412 <etharp_find_entry+0x212>
      /* recycle oldest pending */
      i = old_pending;
 801740c:	8c3b      	ldrh	r3, [r7, #32]
 801740e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8017410:	e009      	b.n	8017426 <etharp_find_entry+0x226>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8017412:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8017416:	2b09      	cmp	r3, #9
 8017418:	dc02      	bgt.n	8017420 <etharp_find_entry+0x220>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801741a:	8bfb      	ldrh	r3, [r7, #30]
 801741c:	84fb      	strh	r3, [r7, #38]	; 0x26
 801741e:	e002      	b.n	8017426 <etharp_find_entry+0x226>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8017420:	f04f 33ff 	mov.w	r3, #4294967295
 8017424:	e054      	b.n	80174d0 <etharp_find_entry+0x2d0>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8017426:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801742a:	2b09      	cmp	r3, #9
 801742c:	dd06      	ble.n	801743c <etharp_find_entry+0x23c>
 801742e:	4b2b      	ldr	r3, [pc, #172]	; (80174dc <etharp_find_entry+0x2dc>)
 8017430:	f240 127f 	movw	r2, #383	; 0x17f
 8017434:	492d      	ldr	r1, [pc, #180]	; (80174ec <etharp_find_entry+0x2ec>)
 8017436:	482b      	ldr	r0, [pc, #172]	; (80174e4 <etharp_find_entry+0x2e4>)
 8017438:	f002 fd62 	bl	8019f00 <iprintf>
    etharp_free_entry(i);
 801743c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8017440:	4618      	mov	r0, r3
 8017442:	f7ff fdd1 	bl	8016fe8 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8017446:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801744a:	2b09      	cmp	r3, #9
 801744c:	dd06      	ble.n	801745c <etharp_find_entry+0x25c>
 801744e:	4b23      	ldr	r3, [pc, #140]	; (80174dc <etharp_find_entry+0x2dc>)
 8017450:	f240 1283 	movw	r2, #387	; 0x183
 8017454:	4925      	ldr	r1, [pc, #148]	; (80174ec <etharp_find_entry+0x2ec>)
 8017456:	4823      	ldr	r0, [pc, #140]	; (80174e4 <etharp_find_entry+0x2e4>)
 8017458:	f002 fd52 	bl	8019f00 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801745c:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8017460:	491d      	ldr	r1, [pc, #116]	; (80174d8 <etharp_find_entry+0x2d8>)
 8017462:	4613      	mov	r3, r2
 8017464:	005b      	lsls	r3, r3, #1
 8017466:	4413      	add	r3, r2
 8017468:	00db      	lsls	r3, r3, #3
 801746a:	440b      	add	r3, r1
 801746c:	3314      	adds	r3, #20
 801746e:	781b      	ldrb	r3, [r3, #0]
 8017470:	2b00      	cmp	r3, #0
 8017472:	d006      	beq.n	8017482 <etharp_find_entry+0x282>
 8017474:	4b19      	ldr	r3, [pc, #100]	; (80174dc <etharp_find_entry+0x2dc>)
 8017476:	f44f 72c2 	mov.w	r2, #388	; 0x184
 801747a:	491d      	ldr	r1, [pc, #116]	; (80174f0 <etharp_find_entry+0x2f0>)
 801747c:	4819      	ldr	r0, [pc, #100]	; (80174e4 <etharp_find_entry+0x2e4>)
 801747e:	f002 fd3f 	bl	8019f00 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8017482:	68fb      	ldr	r3, [r7, #12]
 8017484:	2b00      	cmp	r3, #0
 8017486:	d00b      	beq.n	80174a0 <etharp_find_entry+0x2a0>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8017488:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 801748c:	68fb      	ldr	r3, [r7, #12]
 801748e:	6819      	ldr	r1, [r3, #0]
 8017490:	4811      	ldr	r0, [pc, #68]	; (80174d8 <etharp_find_entry+0x2d8>)
 8017492:	4613      	mov	r3, r2
 8017494:	005b      	lsls	r3, r3, #1
 8017496:	4413      	add	r3, r2
 8017498:	00db      	lsls	r3, r3, #3
 801749a:	4403      	add	r3, r0
 801749c:	3304      	adds	r3, #4
 801749e:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80174a0:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 80174a4:	490c      	ldr	r1, [pc, #48]	; (80174d8 <etharp_find_entry+0x2d8>)
 80174a6:	4613      	mov	r3, r2
 80174a8:	005b      	lsls	r3, r3, #1
 80174aa:	4413      	add	r3, r2
 80174ac:	00db      	lsls	r3, r3, #3
 80174ae:	440b      	add	r3, r1
 80174b0:	3312      	adds	r3, #18
 80174b2:	2200      	movs	r2, #0
 80174b4:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80174b6:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 80174ba:	4907      	ldr	r1, [pc, #28]	; (80174d8 <etharp_find_entry+0x2d8>)
 80174bc:	4613      	mov	r3, r2
 80174be:	005b      	lsls	r3, r3, #1
 80174c0:	4413      	add	r3, r2
 80174c2:	00db      	lsls	r3, r3, #3
 80174c4:	440b      	add	r3, r1
 80174c6:	3308      	adds	r3, #8
 80174c8:	687a      	ldr	r2, [r7, #4]
 80174ca:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 80174cc:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
}
 80174d0:	4618      	mov	r0, r3
 80174d2:	3728      	adds	r7, #40	; 0x28
 80174d4:	46bd      	mov	sp, r7
 80174d6:	bd80      	pop	{r7, pc}
 80174d8:	20013b5c 	.word	0x20013b5c
 80174dc:	0801e300 	.word	0x0801e300
 80174e0:	0801e338 	.word	0x0801e338
 80174e4:	0801e378 	.word	0x0801e378
 80174e8:	0801e3a0 	.word	0x0801e3a0
 80174ec:	0801e3b8 	.word	0x0801e3b8
 80174f0:	0801e3cc 	.word	0x0801e3cc

080174f4 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80174f4:	b580      	push	{r7, lr}
 80174f6:	b088      	sub	sp, #32
 80174f8:	af02      	add	r7, sp, #8
 80174fa:	60f8      	str	r0, [r7, #12]
 80174fc:	60b9      	str	r1, [r7, #8]
 80174fe:	607a      	str	r2, [r7, #4]
 8017500:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8017502:	68fb      	ldr	r3, [r7, #12]
 8017504:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017508:	2b06      	cmp	r3, #6
 801750a:	d006      	beq.n	801751a <etharp_update_arp_entry+0x26>
 801750c:	4b58      	ldr	r3, [pc, #352]	; (8017670 <etharp_update_arp_entry+0x17c>)
 801750e:	f240 12a9 	movw	r2, #425	; 0x1a9
 8017512:	4958      	ldr	r1, [pc, #352]	; (8017674 <etharp_update_arp_entry+0x180>)
 8017514:	4858      	ldr	r0, [pc, #352]	; (8017678 <etharp_update_arp_entry+0x184>)
 8017516:	f002 fcf3 	bl	8019f00 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801751a:	68bb      	ldr	r3, [r7, #8]
 801751c:	2b00      	cmp	r3, #0
 801751e:	d012      	beq.n	8017546 <etharp_update_arp_entry+0x52>
 8017520:	68bb      	ldr	r3, [r7, #8]
 8017522:	681b      	ldr	r3, [r3, #0]
 8017524:	2b00      	cmp	r3, #0
 8017526:	d00e      	beq.n	8017546 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8017528:	68bb      	ldr	r3, [r7, #8]
 801752a:	681b      	ldr	r3, [r3, #0]
 801752c:	68f9      	ldr	r1, [r7, #12]
 801752e:	4618      	mov	r0, r3
 8017530:	f001 fa00 	bl	8018934 <ip4_addr_isbroadcast_u32>
 8017534:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8017536:	2b00      	cmp	r3, #0
 8017538:	d105      	bne.n	8017546 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801753a:	68bb      	ldr	r3, [r7, #8]
 801753c:	681b      	ldr	r3, [r3, #0]
 801753e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8017542:	2be0      	cmp	r3, #224	; 0xe0
 8017544:	d102      	bne.n	801754c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8017546:	f06f 030f 	mvn.w	r3, #15
 801754a:	e08c      	b.n	8017666 <etharp_update_arp_entry+0x172>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801754c:	78fb      	ldrb	r3, [r7, #3]
 801754e:	68fa      	ldr	r2, [r7, #12]
 8017550:	4619      	mov	r1, r3
 8017552:	68b8      	ldr	r0, [r7, #8]
 8017554:	f7ff fe54 	bl	8017200 <etharp_find_entry>
 8017558:	4603      	mov	r3, r0
 801755a:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 801755c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8017560:	2b00      	cmp	r3, #0
 8017562:	da02      	bge.n	801756a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8017564:	8afb      	ldrh	r3, [r7, #22]
 8017566:	b25b      	sxtb	r3, r3
 8017568:	e07d      	b.n	8017666 <etharp_update_arp_entry+0x172>
  }

#if ETHARP_SUPPORT_STATIC_ENTRIES
  if (flags & ETHARP_FLAG_STATIC_ENTRY) {
 801756a:	78fb      	ldrb	r3, [r7, #3]
 801756c:	f003 0304 	and.w	r3, r3, #4
 8017570:	2b00      	cmp	r3, #0
 8017572:	d00b      	beq.n	801758c <etharp_update_arp_entry+0x98>
    /* record static type */
    arp_table[i].state = ETHARP_STATE_STATIC;
 8017574:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017578:	4940      	ldr	r1, [pc, #256]	; (801767c <etharp_update_arp_entry+0x188>)
 801757a:	4613      	mov	r3, r2
 801757c:	005b      	lsls	r3, r3, #1
 801757e:	4413      	add	r3, r2
 8017580:	00db      	lsls	r3, r3, #3
 8017582:	440b      	add	r3, r1
 8017584:	3314      	adds	r3, #20
 8017586:	2205      	movs	r2, #5
 8017588:	701a      	strb	r2, [r3, #0]
 801758a:	e019      	b.n	80175c0 <etharp_update_arp_entry+0xcc>
  } else if (arp_table[i].state == ETHARP_STATE_STATIC) {
 801758c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017590:	493a      	ldr	r1, [pc, #232]	; (801767c <etharp_update_arp_entry+0x188>)
 8017592:	4613      	mov	r3, r2
 8017594:	005b      	lsls	r3, r3, #1
 8017596:	4413      	add	r3, r2
 8017598:	00db      	lsls	r3, r3, #3
 801759a:	440b      	add	r3, r1
 801759c:	3314      	adds	r3, #20
 801759e:	781b      	ldrb	r3, [r3, #0]
 80175a0:	2b05      	cmp	r3, #5
 80175a2:	d102      	bne.n	80175aa <etharp_update_arp_entry+0xb6>
    /* found entry is a static type, don't overwrite it */
    return ERR_VAL;
 80175a4:	f06f 0305 	mvn.w	r3, #5
 80175a8:	e05d      	b.n	8017666 <etharp_update_arp_entry+0x172>
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 80175aa:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80175ae:	4933      	ldr	r1, [pc, #204]	; (801767c <etharp_update_arp_entry+0x188>)
 80175b0:	4613      	mov	r3, r2
 80175b2:	005b      	lsls	r3, r3, #1
 80175b4:	4413      	add	r3, r2
 80175b6:	00db      	lsls	r3, r3, #3
 80175b8:	440b      	add	r3, r1
 80175ba:	3314      	adds	r3, #20
 80175bc:	2202      	movs	r2, #2
 80175be:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80175c0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80175c4:	492d      	ldr	r1, [pc, #180]	; (801767c <etharp_update_arp_entry+0x188>)
 80175c6:	4613      	mov	r3, r2
 80175c8:	005b      	lsls	r3, r3, #1
 80175ca:	4413      	add	r3, r2
 80175cc:	00db      	lsls	r3, r3, #3
 80175ce:	440b      	add	r3, r1
 80175d0:	3308      	adds	r3, #8
 80175d2:	68fa      	ldr	r2, [r7, #12]
 80175d4:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80175d6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80175da:	4613      	mov	r3, r2
 80175dc:	005b      	lsls	r3, r3, #1
 80175de:	4413      	add	r3, r2
 80175e0:	00db      	lsls	r3, r3, #3
 80175e2:	3308      	adds	r3, #8
 80175e4:	4a25      	ldr	r2, [pc, #148]	; (801767c <etharp_update_arp_entry+0x188>)
 80175e6:	4413      	add	r3, r2
 80175e8:	3304      	adds	r3, #4
 80175ea:	2206      	movs	r2, #6
 80175ec:	6879      	ldr	r1, [r7, #4]
 80175ee:	4618      	mov	r0, r3
 80175f0:	f002 fb90 	bl	8019d14 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80175f4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80175f8:	4920      	ldr	r1, [pc, #128]	; (801767c <etharp_update_arp_entry+0x188>)
 80175fa:	4613      	mov	r3, r2
 80175fc:	005b      	lsls	r3, r3, #1
 80175fe:	4413      	add	r3, r2
 8017600:	00db      	lsls	r3, r3, #3
 8017602:	440b      	add	r3, r1
 8017604:	3312      	adds	r3, #18
 8017606:	2200      	movs	r2, #0
 8017608:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801760a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801760e:	491b      	ldr	r1, [pc, #108]	; (801767c <etharp_update_arp_entry+0x188>)
 8017610:	4613      	mov	r3, r2
 8017612:	005b      	lsls	r3, r3, #1
 8017614:	4413      	add	r3, r2
 8017616:	00db      	lsls	r3, r3, #3
 8017618:	440b      	add	r3, r1
 801761a:	681b      	ldr	r3, [r3, #0]
 801761c:	2b00      	cmp	r3, #0
 801761e:	d021      	beq.n	8017664 <etharp_update_arp_entry+0x170>
    struct pbuf *p = arp_table[i].q;
 8017620:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017624:	4915      	ldr	r1, [pc, #84]	; (801767c <etharp_update_arp_entry+0x188>)
 8017626:	4613      	mov	r3, r2
 8017628:	005b      	lsls	r3, r3, #1
 801762a:	4413      	add	r3, r2
 801762c:	00db      	lsls	r3, r3, #3
 801762e:	440b      	add	r3, r1
 8017630:	681b      	ldr	r3, [r3, #0]
 8017632:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8017634:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017638:	4910      	ldr	r1, [pc, #64]	; (801767c <etharp_update_arp_entry+0x188>)
 801763a:	4613      	mov	r3, r2
 801763c:	005b      	lsls	r3, r3, #1
 801763e:	4413      	add	r3, r2
 8017640:	00db      	lsls	r3, r3, #3
 8017642:	440b      	add	r3, r1
 8017644:	2200      	movs	r2, #0
 8017646:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8017648:	68fb      	ldr	r3, [r7, #12]
 801764a:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 801764e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8017652:	9300      	str	r3, [sp, #0]
 8017654:	687b      	ldr	r3, [r7, #4]
 8017656:	6939      	ldr	r1, [r7, #16]
 8017658:	68f8      	ldr	r0, [r7, #12]
 801765a:	f002 f9b3 	bl	80199c4 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801765e:	6938      	ldr	r0, [r7, #16]
 8017660:	f7f7 f912 	bl	800e888 <pbuf_free>
  }
  return ERR_OK;
 8017664:	2300      	movs	r3, #0
}
 8017666:	4618      	mov	r0, r3
 8017668:	3718      	adds	r7, #24
 801766a:	46bd      	mov	sp, r7
 801766c:	bd80      	pop	{r7, pc}
 801766e:	bf00      	nop
 8017670:	0801e300 	.word	0x0801e300
 8017674:	0801e3f8 	.word	0x0801e3f8
 8017678:	0801e378 	.word	0x0801e378
 801767c:	20013b5c 	.word	0x20013b5c

08017680 <etharp_add_static_entry>:
 * @param ethaddr ethernet address for the new static entry
 * @return See return values of etharp_add_static_entry
 */
err_t
etharp_add_static_entry(const ip4_addr_t *ipaddr, struct eth_addr *ethaddr)
{
 8017680:	b580      	push	{r7, lr}
 8017682:	b084      	sub	sp, #16
 8017684:	af00      	add	r7, sp, #0
 8017686:	6078      	str	r0, [r7, #4]
 8017688:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_add_static_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));

  netif = ip4_route(ipaddr);
 801768a:	6878      	ldr	r0, [r7, #4]
 801768c:	f000 fe2c 	bl	80182e8 <ip4_route>
 8017690:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 8017692:	68fb      	ldr	r3, [r7, #12]
 8017694:	2b00      	cmp	r3, #0
 8017696:	d102      	bne.n	801769e <etharp_add_static_entry+0x1e>
    return ERR_RTE;
 8017698:	f06f 0303 	mvn.w	r3, #3
 801769c:	e006      	b.n	80176ac <etharp_add_static_entry+0x2c>
  }

  return etharp_update_arp_entry(netif, ipaddr, ethaddr, ETHARP_FLAG_TRY_HARD | ETHARP_FLAG_STATIC_ENTRY);
 801769e:	2305      	movs	r3, #5
 80176a0:	683a      	ldr	r2, [r7, #0]
 80176a2:	6879      	ldr	r1, [r7, #4]
 80176a4:	68f8      	ldr	r0, [r7, #12]
 80176a6:	f7ff ff25 	bl	80174f4 <etharp_update_arp_entry>
 80176aa:	4603      	mov	r3, r0
}
 80176ac:	4618      	mov	r0, r3
 80176ae:	3710      	adds	r7, #16
 80176b0:	46bd      	mov	sp, r7
 80176b2:	bd80      	pop	{r7, pc}

080176b4 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 80176b4:	b580      	push	{r7, lr}
 80176b6:	b084      	sub	sp, #16
 80176b8:	af00      	add	r7, sp, #0
 80176ba:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80176bc:	2300      	movs	r3, #0
 80176be:	60fb      	str	r3, [r7, #12]
 80176c0:	e01e      	b.n	8017700 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 80176c2:	4913      	ldr	r1, [pc, #76]	; (8017710 <etharp_cleanup_netif+0x5c>)
 80176c4:	68fa      	ldr	r2, [r7, #12]
 80176c6:	4613      	mov	r3, r2
 80176c8:	005b      	lsls	r3, r3, #1
 80176ca:	4413      	add	r3, r2
 80176cc:	00db      	lsls	r3, r3, #3
 80176ce:	440b      	add	r3, r1
 80176d0:	3314      	adds	r3, #20
 80176d2:	781b      	ldrb	r3, [r3, #0]
 80176d4:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80176d6:	7afb      	ldrb	r3, [r7, #11]
 80176d8:	2b00      	cmp	r3, #0
 80176da:	d00e      	beq.n	80176fa <etharp_cleanup_netif+0x46>
 80176dc:	490c      	ldr	r1, [pc, #48]	; (8017710 <etharp_cleanup_netif+0x5c>)
 80176de:	68fa      	ldr	r2, [r7, #12]
 80176e0:	4613      	mov	r3, r2
 80176e2:	005b      	lsls	r3, r3, #1
 80176e4:	4413      	add	r3, r2
 80176e6:	00db      	lsls	r3, r3, #3
 80176e8:	440b      	add	r3, r1
 80176ea:	3308      	adds	r3, #8
 80176ec:	681b      	ldr	r3, [r3, #0]
 80176ee:	687a      	ldr	r2, [r7, #4]
 80176f0:	429a      	cmp	r2, r3
 80176f2:	d102      	bne.n	80176fa <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 80176f4:	68f8      	ldr	r0, [r7, #12]
 80176f6:	f7ff fc77 	bl	8016fe8 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80176fa:	68fb      	ldr	r3, [r7, #12]
 80176fc:	3301      	adds	r3, #1
 80176fe:	60fb      	str	r3, [r7, #12]
 8017700:	68fb      	ldr	r3, [r7, #12]
 8017702:	2b09      	cmp	r3, #9
 8017704:	dddd      	ble.n	80176c2 <etharp_cleanup_netif+0xe>
    }
  }
}
 8017706:	bf00      	nop
 8017708:	bf00      	nop
 801770a:	3710      	adds	r7, #16
 801770c:	46bd      	mov	sp, r7
 801770e:	bd80      	pop	{r7, pc}
 8017710:	20013b5c 	.word	0x20013b5c

08017714 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8017714:	b5b0      	push	{r4, r5, r7, lr}
 8017716:	b08a      	sub	sp, #40	; 0x28
 8017718:	af04      	add	r7, sp, #16
 801771a:	6078      	str	r0, [r7, #4]
 801771c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801771e:	683b      	ldr	r3, [r7, #0]
 8017720:	2b00      	cmp	r3, #0
 8017722:	d107      	bne.n	8017734 <etharp_input+0x20>
 8017724:	4b3f      	ldr	r3, [pc, #252]	; (8017824 <etharp_input+0x110>)
 8017726:	f240 228a 	movw	r2, #650	; 0x28a
 801772a:	493f      	ldr	r1, [pc, #252]	; (8017828 <etharp_input+0x114>)
 801772c:	483f      	ldr	r0, [pc, #252]	; (801782c <etharp_input+0x118>)
 801772e:	f002 fbe7 	bl	8019f00 <iprintf>
 8017732:	e074      	b.n	801781e <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 8017734:	687b      	ldr	r3, [r7, #4]
 8017736:	685b      	ldr	r3, [r3, #4]
 8017738:	617b      	str	r3, [r7, #20]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801773a:	697b      	ldr	r3, [r7, #20]
 801773c:	881b      	ldrh	r3, [r3, #0]
 801773e:	b29b      	uxth	r3, r3
 8017740:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8017744:	d10c      	bne.n	8017760 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8017746:	697b      	ldr	r3, [r7, #20]
 8017748:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801774a:	2b06      	cmp	r3, #6
 801774c:	d108      	bne.n	8017760 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801774e:	697b      	ldr	r3, [r7, #20]
 8017750:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8017752:	2b04      	cmp	r3, #4
 8017754:	d104      	bne.n	8017760 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8017756:	697b      	ldr	r3, [r7, #20]
 8017758:	885b      	ldrh	r3, [r3, #2]
 801775a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801775c:	2b08      	cmp	r3, #8
 801775e:	d003      	beq.n	8017768 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8017760:	6878      	ldr	r0, [r7, #4]
 8017762:	f7f7 f891 	bl	800e888 <pbuf_free>
    return;
 8017766:	e05a      	b.n	801781e <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8017768:	697b      	ldr	r3, [r7, #20]
 801776a:	330e      	adds	r3, #14
 801776c:	681b      	ldr	r3, [r3, #0]
 801776e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8017770:	697b      	ldr	r3, [r7, #20]
 8017772:	3318      	adds	r3, #24
 8017774:	681b      	ldr	r3, [r3, #0]
 8017776:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8017778:	683b      	ldr	r3, [r7, #0]
 801777a:	3304      	adds	r3, #4
 801777c:	681b      	ldr	r3, [r3, #0]
 801777e:	2b00      	cmp	r3, #0
 8017780:	d102      	bne.n	8017788 <etharp_input+0x74>
    for_us = 0;
 8017782:	2300      	movs	r3, #0
 8017784:	74fb      	strb	r3, [r7, #19]
 8017786:	e009      	b.n	801779c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8017788:	68ba      	ldr	r2, [r7, #8]
 801778a:	683b      	ldr	r3, [r7, #0]
 801778c:	3304      	adds	r3, #4
 801778e:	681b      	ldr	r3, [r3, #0]
 8017790:	429a      	cmp	r2, r3
 8017792:	bf0c      	ite	eq
 8017794:	2301      	moveq	r3, #1
 8017796:	2300      	movne	r3, #0
 8017798:	b2db      	uxtb	r3, r3
 801779a:	74fb      	strb	r3, [r7, #19]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801779c:	697b      	ldr	r3, [r7, #20]
 801779e:	f103 0208 	add.w	r2, r3, #8
 80177a2:	7cfb      	ldrb	r3, [r7, #19]
 80177a4:	2b00      	cmp	r3, #0
 80177a6:	d001      	beq.n	80177ac <etharp_input+0x98>
 80177a8:	2301      	movs	r3, #1
 80177aa:	e000      	b.n	80177ae <etharp_input+0x9a>
 80177ac:	2302      	movs	r3, #2
 80177ae:	f107 010c 	add.w	r1, r7, #12
 80177b2:	6838      	ldr	r0, [r7, #0]
 80177b4:	f7ff fe9e 	bl	80174f4 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 80177b8:	697b      	ldr	r3, [r7, #20]
 80177ba:	88db      	ldrh	r3, [r3, #6]
 80177bc:	b29b      	uxth	r3, r3
 80177be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80177c2:	d003      	beq.n	80177cc <etharp_input+0xb8>
 80177c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80177c8:	d01e      	beq.n	8017808 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 80177ca:	e025      	b.n	8017818 <etharp_input+0x104>
      if (for_us) {
 80177cc:	7cfb      	ldrb	r3, [r7, #19]
 80177ce:	2b00      	cmp	r3, #0
 80177d0:	d021      	beq.n	8017816 <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 80177d2:	683b      	ldr	r3, [r7, #0]
 80177d4:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 80177d8:	697b      	ldr	r3, [r7, #20]
 80177da:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 80177de:	683b      	ldr	r3, [r7, #0]
 80177e0:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 80177e4:	683b      	ldr	r3, [r7, #0]
 80177e6:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 80177e8:	697a      	ldr	r2, [r7, #20]
 80177ea:	3208      	adds	r2, #8
        etharp_raw(netif,
 80177ec:	2102      	movs	r1, #2
 80177ee:	9103      	str	r1, [sp, #12]
 80177f0:	f107 010c 	add.w	r1, r7, #12
 80177f4:	9102      	str	r1, [sp, #8]
 80177f6:	9201      	str	r2, [sp, #4]
 80177f8:	9300      	str	r3, [sp, #0]
 80177fa:	462b      	mov	r3, r5
 80177fc:	4622      	mov	r2, r4
 80177fe:	4601      	mov	r1, r0
 8017800:	6838      	ldr	r0, [r7, #0]
 8017802:	f000 faef 	bl	8017de4 <etharp_raw>
      break;
 8017806:	e006      	b.n	8017816 <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 8017808:	f107 030c 	add.w	r3, r7, #12
 801780c:	4619      	mov	r1, r3
 801780e:	6838      	ldr	r0, [r7, #0]
 8017810:	f7fe f976 	bl	8015b00 <dhcp_arp_reply>
      break;
 8017814:	e000      	b.n	8017818 <etharp_input+0x104>
      break;
 8017816:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8017818:	6878      	ldr	r0, [r7, #4]
 801781a:	f7f7 f835 	bl	800e888 <pbuf_free>
}
 801781e:	3718      	adds	r7, #24
 8017820:	46bd      	mov	sp, r7
 8017822:	bdb0      	pop	{r4, r5, r7, pc}
 8017824:	0801e300 	.word	0x0801e300
 8017828:	0801e450 	.word	0x0801e450
 801782c:	0801e378 	.word	0x0801e378

08017830 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8017830:	b580      	push	{r7, lr}
 8017832:	b086      	sub	sp, #24
 8017834:	af02      	add	r7, sp, #8
 8017836:	60f8      	str	r0, [r7, #12]
 8017838:	60b9      	str	r1, [r7, #8]
 801783a:	4613      	mov	r3, r2
 801783c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801783e:	79fa      	ldrb	r2, [r7, #7]
 8017840:	4944      	ldr	r1, [pc, #272]	; (8017954 <etharp_output_to_arp_index+0x124>)
 8017842:	4613      	mov	r3, r2
 8017844:	005b      	lsls	r3, r3, #1
 8017846:	4413      	add	r3, r2
 8017848:	00db      	lsls	r3, r3, #3
 801784a:	440b      	add	r3, r1
 801784c:	3314      	adds	r3, #20
 801784e:	781b      	ldrb	r3, [r3, #0]
 8017850:	2b01      	cmp	r3, #1
 8017852:	d806      	bhi.n	8017862 <etharp_output_to_arp_index+0x32>
 8017854:	4b40      	ldr	r3, [pc, #256]	; (8017958 <etharp_output_to_arp_index+0x128>)
 8017856:	f240 22ee 	movw	r2, #750	; 0x2ee
 801785a:	4940      	ldr	r1, [pc, #256]	; (801795c <etharp_output_to_arp_index+0x12c>)
 801785c:	4840      	ldr	r0, [pc, #256]	; (8017960 <etharp_output_to_arp_index+0x130>)
 801785e:	f002 fb4f 	bl	8019f00 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8017862:	79fa      	ldrb	r2, [r7, #7]
 8017864:	493b      	ldr	r1, [pc, #236]	; (8017954 <etharp_output_to_arp_index+0x124>)
 8017866:	4613      	mov	r3, r2
 8017868:	005b      	lsls	r3, r3, #1
 801786a:	4413      	add	r3, r2
 801786c:	00db      	lsls	r3, r3, #3
 801786e:	440b      	add	r3, r1
 8017870:	3314      	adds	r3, #20
 8017872:	781b      	ldrb	r3, [r3, #0]
 8017874:	2b02      	cmp	r3, #2
 8017876:	d153      	bne.n	8017920 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8017878:	79fa      	ldrb	r2, [r7, #7]
 801787a:	4936      	ldr	r1, [pc, #216]	; (8017954 <etharp_output_to_arp_index+0x124>)
 801787c:	4613      	mov	r3, r2
 801787e:	005b      	lsls	r3, r3, #1
 8017880:	4413      	add	r3, r2
 8017882:	00db      	lsls	r3, r3, #3
 8017884:	440b      	add	r3, r1
 8017886:	3312      	adds	r3, #18
 8017888:	881b      	ldrh	r3, [r3, #0]
 801788a:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801788e:	d919      	bls.n	80178c4 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8017890:	79fa      	ldrb	r2, [r7, #7]
 8017892:	4613      	mov	r3, r2
 8017894:	005b      	lsls	r3, r3, #1
 8017896:	4413      	add	r3, r2
 8017898:	00db      	lsls	r3, r3, #3
 801789a:	4a2e      	ldr	r2, [pc, #184]	; (8017954 <etharp_output_to_arp_index+0x124>)
 801789c:	4413      	add	r3, r2
 801789e:	3304      	adds	r3, #4
 80178a0:	4619      	mov	r1, r3
 80178a2:	68f8      	ldr	r0, [r7, #12]
 80178a4:	f000 fb4c 	bl	8017f40 <etharp_request>
 80178a8:	4603      	mov	r3, r0
 80178aa:	2b00      	cmp	r3, #0
 80178ac:	d138      	bne.n	8017920 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80178ae:	79fa      	ldrb	r2, [r7, #7]
 80178b0:	4928      	ldr	r1, [pc, #160]	; (8017954 <etharp_output_to_arp_index+0x124>)
 80178b2:	4613      	mov	r3, r2
 80178b4:	005b      	lsls	r3, r3, #1
 80178b6:	4413      	add	r3, r2
 80178b8:	00db      	lsls	r3, r3, #3
 80178ba:	440b      	add	r3, r1
 80178bc:	3314      	adds	r3, #20
 80178be:	2203      	movs	r2, #3
 80178c0:	701a      	strb	r2, [r3, #0]
 80178c2:	e02d      	b.n	8017920 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80178c4:	79fa      	ldrb	r2, [r7, #7]
 80178c6:	4923      	ldr	r1, [pc, #140]	; (8017954 <etharp_output_to_arp_index+0x124>)
 80178c8:	4613      	mov	r3, r2
 80178ca:	005b      	lsls	r3, r3, #1
 80178cc:	4413      	add	r3, r2
 80178ce:	00db      	lsls	r3, r3, #3
 80178d0:	440b      	add	r3, r1
 80178d2:	3312      	adds	r3, #18
 80178d4:	881b      	ldrh	r3, [r3, #0]
 80178d6:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80178da:	d321      	bcc.n	8017920 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80178dc:	79fa      	ldrb	r2, [r7, #7]
 80178de:	4613      	mov	r3, r2
 80178e0:	005b      	lsls	r3, r3, #1
 80178e2:	4413      	add	r3, r2
 80178e4:	00db      	lsls	r3, r3, #3
 80178e6:	4a1b      	ldr	r2, [pc, #108]	; (8017954 <etharp_output_to_arp_index+0x124>)
 80178e8:	4413      	add	r3, r2
 80178ea:	1d19      	adds	r1, r3, #4
 80178ec:	79fa      	ldrb	r2, [r7, #7]
 80178ee:	4613      	mov	r3, r2
 80178f0:	005b      	lsls	r3, r3, #1
 80178f2:	4413      	add	r3, r2
 80178f4:	00db      	lsls	r3, r3, #3
 80178f6:	3308      	adds	r3, #8
 80178f8:	4a16      	ldr	r2, [pc, #88]	; (8017954 <etharp_output_to_arp_index+0x124>)
 80178fa:	4413      	add	r3, r2
 80178fc:	3304      	adds	r3, #4
 80178fe:	461a      	mov	r2, r3
 8017900:	68f8      	ldr	r0, [r7, #12]
 8017902:	f000 fafb 	bl	8017efc <etharp_request_dst>
 8017906:	4603      	mov	r3, r0
 8017908:	2b00      	cmp	r3, #0
 801790a:	d109      	bne.n	8017920 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801790c:	79fa      	ldrb	r2, [r7, #7]
 801790e:	4911      	ldr	r1, [pc, #68]	; (8017954 <etharp_output_to_arp_index+0x124>)
 8017910:	4613      	mov	r3, r2
 8017912:	005b      	lsls	r3, r3, #1
 8017914:	4413      	add	r3, r2
 8017916:	00db      	lsls	r3, r3, #3
 8017918:	440b      	add	r3, r1
 801791a:	3314      	adds	r3, #20
 801791c:	2203      	movs	r2, #3
 801791e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8017920:	68fb      	ldr	r3, [r7, #12]
 8017922:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 8017926:	79fa      	ldrb	r2, [r7, #7]
 8017928:	4613      	mov	r3, r2
 801792a:	005b      	lsls	r3, r3, #1
 801792c:	4413      	add	r3, r2
 801792e:	00db      	lsls	r3, r3, #3
 8017930:	3308      	adds	r3, #8
 8017932:	4a08      	ldr	r2, [pc, #32]	; (8017954 <etharp_output_to_arp_index+0x124>)
 8017934:	4413      	add	r3, r2
 8017936:	3304      	adds	r3, #4
 8017938:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801793c:	9200      	str	r2, [sp, #0]
 801793e:	460a      	mov	r2, r1
 8017940:	68b9      	ldr	r1, [r7, #8]
 8017942:	68f8      	ldr	r0, [r7, #12]
 8017944:	f002 f83e 	bl	80199c4 <ethernet_output>
 8017948:	4603      	mov	r3, r0
}
 801794a:	4618      	mov	r0, r3
 801794c:	3710      	adds	r7, #16
 801794e:	46bd      	mov	sp, r7
 8017950:	bd80      	pop	{r7, pc}
 8017952:	bf00      	nop
 8017954:	20013b5c 	.word	0x20013b5c
 8017958:	0801e300 	.word	0x0801e300
 801795c:	0801e470 	.word	0x0801e470
 8017960:	0801e378 	.word	0x0801e378

08017964 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8017964:	b580      	push	{r7, lr}
 8017966:	b08a      	sub	sp, #40	; 0x28
 8017968:	af02      	add	r7, sp, #8
 801796a:	60f8      	str	r0, [r7, #12]
 801796c:	60b9      	str	r1, [r7, #8]
 801796e:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8017970:	687b      	ldr	r3, [r7, #4]
 8017972:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8017974:	68fb      	ldr	r3, [r7, #12]
 8017976:	2b00      	cmp	r3, #0
 8017978:	d106      	bne.n	8017988 <etharp_output+0x24>
 801797a:	4b73      	ldr	r3, [pc, #460]	; (8017b48 <etharp_output+0x1e4>)
 801797c:	f240 321e 	movw	r2, #798	; 0x31e
 8017980:	4972      	ldr	r1, [pc, #456]	; (8017b4c <etharp_output+0x1e8>)
 8017982:	4873      	ldr	r0, [pc, #460]	; (8017b50 <etharp_output+0x1ec>)
 8017984:	f002 fabc 	bl	8019f00 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8017988:	68bb      	ldr	r3, [r7, #8]
 801798a:	2b00      	cmp	r3, #0
 801798c:	d106      	bne.n	801799c <etharp_output+0x38>
 801798e:	4b6e      	ldr	r3, [pc, #440]	; (8017b48 <etharp_output+0x1e4>)
 8017990:	f240 321f 	movw	r2, #799	; 0x31f
 8017994:	496f      	ldr	r1, [pc, #444]	; (8017b54 <etharp_output+0x1f0>)
 8017996:	486e      	ldr	r0, [pc, #440]	; (8017b50 <etharp_output+0x1ec>)
 8017998:	f002 fab2 	bl	8019f00 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801799c:	687b      	ldr	r3, [r7, #4]
 801799e:	2b00      	cmp	r3, #0
 80179a0:	d106      	bne.n	80179b0 <etharp_output+0x4c>
 80179a2:	4b69      	ldr	r3, [pc, #420]	; (8017b48 <etharp_output+0x1e4>)
 80179a4:	f44f 7248 	mov.w	r2, #800	; 0x320
 80179a8:	496b      	ldr	r1, [pc, #428]	; (8017b58 <etharp_output+0x1f4>)
 80179aa:	4869      	ldr	r0, [pc, #420]	; (8017b50 <etharp_output+0x1ec>)
 80179ac:	f002 faa8 	bl	8019f00 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80179b0:	687b      	ldr	r3, [r7, #4]
 80179b2:	681b      	ldr	r3, [r3, #0]
 80179b4:	68f9      	ldr	r1, [r7, #12]
 80179b6:	4618      	mov	r0, r3
 80179b8:	f000 ffbc 	bl	8018934 <ip4_addr_isbroadcast_u32>
 80179bc:	4603      	mov	r3, r0
 80179be:	2b00      	cmp	r3, #0
 80179c0:	d002      	beq.n	80179c8 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 80179c2:	4b66      	ldr	r3, [pc, #408]	; (8017b5c <etharp_output+0x1f8>)
 80179c4:	61fb      	str	r3, [r7, #28]
 80179c6:	e0af      	b.n	8017b28 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80179c8:	687b      	ldr	r3, [r7, #4]
 80179ca:	681b      	ldr	r3, [r3, #0]
 80179cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80179d0:	2be0      	cmp	r3, #224	; 0xe0
 80179d2:	d118      	bne.n	8017a06 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80179d4:	2301      	movs	r3, #1
 80179d6:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80179d8:	2300      	movs	r3, #0
 80179da:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80179dc:	235e      	movs	r3, #94	; 0x5e
 80179de:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80179e0:	687b      	ldr	r3, [r7, #4]
 80179e2:	3301      	adds	r3, #1
 80179e4:	781b      	ldrb	r3, [r3, #0]
 80179e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80179ea:	b2db      	uxtb	r3, r3
 80179ec:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80179ee:	687b      	ldr	r3, [r7, #4]
 80179f0:	3302      	adds	r3, #2
 80179f2:	781b      	ldrb	r3, [r3, #0]
 80179f4:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80179f6:	687b      	ldr	r3, [r7, #4]
 80179f8:	3303      	adds	r3, #3
 80179fa:	781b      	ldrb	r3, [r3, #0]
 80179fc:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80179fe:	f107 0310 	add.w	r3, r7, #16
 8017a02:	61fb      	str	r3, [r7, #28]
 8017a04:	e090      	b.n	8017b28 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8017a06:	687b      	ldr	r3, [r7, #4]
 8017a08:	681a      	ldr	r2, [r3, #0]
 8017a0a:	68fb      	ldr	r3, [r7, #12]
 8017a0c:	3304      	adds	r3, #4
 8017a0e:	681b      	ldr	r3, [r3, #0]
 8017a10:	405a      	eors	r2, r3
 8017a12:	68fb      	ldr	r3, [r7, #12]
 8017a14:	3308      	adds	r3, #8
 8017a16:	681b      	ldr	r3, [r3, #0]
 8017a18:	4013      	ands	r3, r2
 8017a1a:	2b00      	cmp	r3, #0
 8017a1c:	d012      	beq.n	8017a44 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8017a1e:	687b      	ldr	r3, [r7, #4]
 8017a20:	681b      	ldr	r3, [r3, #0]
 8017a22:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8017a24:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8017a28:	4293      	cmp	r3, r2
 8017a2a:	d00b      	beq.n	8017a44 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8017a2c:	68fb      	ldr	r3, [r7, #12]
 8017a2e:	330c      	adds	r3, #12
 8017a30:	681b      	ldr	r3, [r3, #0]
 8017a32:	2b00      	cmp	r3, #0
 8017a34:	d003      	beq.n	8017a3e <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8017a36:	68fb      	ldr	r3, [r7, #12]
 8017a38:	330c      	adds	r3, #12
 8017a3a:	61bb      	str	r3, [r7, #24]
 8017a3c:	e002      	b.n	8017a44 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8017a3e:	f06f 0303 	mvn.w	r3, #3
 8017a42:	e07d      	b.n	8017b40 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8017a44:	4b46      	ldr	r3, [pc, #280]	; (8017b60 <etharp_output+0x1fc>)
 8017a46:	781b      	ldrb	r3, [r3, #0]
 8017a48:	4619      	mov	r1, r3
 8017a4a:	4a46      	ldr	r2, [pc, #280]	; (8017b64 <etharp_output+0x200>)
 8017a4c:	460b      	mov	r3, r1
 8017a4e:	005b      	lsls	r3, r3, #1
 8017a50:	440b      	add	r3, r1
 8017a52:	00db      	lsls	r3, r3, #3
 8017a54:	4413      	add	r3, r2
 8017a56:	3314      	adds	r3, #20
 8017a58:	781b      	ldrb	r3, [r3, #0]
 8017a5a:	2b01      	cmp	r3, #1
 8017a5c:	d925      	bls.n	8017aaa <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8017a5e:	4b40      	ldr	r3, [pc, #256]	; (8017b60 <etharp_output+0x1fc>)
 8017a60:	781b      	ldrb	r3, [r3, #0]
 8017a62:	4619      	mov	r1, r3
 8017a64:	4a3f      	ldr	r2, [pc, #252]	; (8017b64 <etharp_output+0x200>)
 8017a66:	460b      	mov	r3, r1
 8017a68:	005b      	lsls	r3, r3, #1
 8017a6a:	440b      	add	r3, r1
 8017a6c:	00db      	lsls	r3, r3, #3
 8017a6e:	4413      	add	r3, r2
 8017a70:	3308      	adds	r3, #8
 8017a72:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8017a74:	68fa      	ldr	r2, [r7, #12]
 8017a76:	429a      	cmp	r2, r3
 8017a78:	d117      	bne.n	8017aaa <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8017a7a:	69bb      	ldr	r3, [r7, #24]
 8017a7c:	681a      	ldr	r2, [r3, #0]
 8017a7e:	4b38      	ldr	r3, [pc, #224]	; (8017b60 <etharp_output+0x1fc>)
 8017a80:	781b      	ldrb	r3, [r3, #0]
 8017a82:	4618      	mov	r0, r3
 8017a84:	4937      	ldr	r1, [pc, #220]	; (8017b64 <etharp_output+0x200>)
 8017a86:	4603      	mov	r3, r0
 8017a88:	005b      	lsls	r3, r3, #1
 8017a8a:	4403      	add	r3, r0
 8017a8c:	00db      	lsls	r3, r3, #3
 8017a8e:	440b      	add	r3, r1
 8017a90:	3304      	adds	r3, #4
 8017a92:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8017a94:	429a      	cmp	r2, r3
 8017a96:	d108      	bne.n	8017aaa <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8017a98:	4b31      	ldr	r3, [pc, #196]	; (8017b60 <etharp_output+0x1fc>)
 8017a9a:	781b      	ldrb	r3, [r3, #0]
 8017a9c:	461a      	mov	r2, r3
 8017a9e:	68b9      	ldr	r1, [r7, #8]
 8017aa0:	68f8      	ldr	r0, [r7, #12]
 8017aa2:	f7ff fec5 	bl	8017830 <etharp_output_to_arp_index>
 8017aa6:	4603      	mov	r3, r0
 8017aa8:	e04a      	b.n	8017b40 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8017aaa:	2300      	movs	r3, #0
 8017aac:	75fb      	strb	r3, [r7, #23]
 8017aae:	e031      	b.n	8017b14 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8017ab0:	7dfa      	ldrb	r2, [r7, #23]
 8017ab2:	492c      	ldr	r1, [pc, #176]	; (8017b64 <etharp_output+0x200>)
 8017ab4:	4613      	mov	r3, r2
 8017ab6:	005b      	lsls	r3, r3, #1
 8017ab8:	4413      	add	r3, r2
 8017aba:	00db      	lsls	r3, r3, #3
 8017abc:	440b      	add	r3, r1
 8017abe:	3314      	adds	r3, #20
 8017ac0:	781b      	ldrb	r3, [r3, #0]
 8017ac2:	2b01      	cmp	r3, #1
 8017ac4:	d923      	bls.n	8017b0e <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8017ac6:	7dfa      	ldrb	r2, [r7, #23]
 8017ac8:	4926      	ldr	r1, [pc, #152]	; (8017b64 <etharp_output+0x200>)
 8017aca:	4613      	mov	r3, r2
 8017acc:	005b      	lsls	r3, r3, #1
 8017ace:	4413      	add	r3, r2
 8017ad0:	00db      	lsls	r3, r3, #3
 8017ad2:	440b      	add	r3, r1
 8017ad4:	3308      	adds	r3, #8
 8017ad6:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8017ad8:	68fa      	ldr	r2, [r7, #12]
 8017ada:	429a      	cmp	r2, r3
 8017adc:	d117      	bne.n	8017b0e <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8017ade:	69bb      	ldr	r3, [r7, #24]
 8017ae0:	6819      	ldr	r1, [r3, #0]
 8017ae2:	7dfa      	ldrb	r2, [r7, #23]
 8017ae4:	481f      	ldr	r0, [pc, #124]	; (8017b64 <etharp_output+0x200>)
 8017ae6:	4613      	mov	r3, r2
 8017ae8:	005b      	lsls	r3, r3, #1
 8017aea:	4413      	add	r3, r2
 8017aec:	00db      	lsls	r3, r3, #3
 8017aee:	4403      	add	r3, r0
 8017af0:	3304      	adds	r3, #4
 8017af2:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8017af4:	4299      	cmp	r1, r3
 8017af6:	d10a      	bne.n	8017b0e <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8017af8:	4a19      	ldr	r2, [pc, #100]	; (8017b60 <etharp_output+0x1fc>)
 8017afa:	7dfb      	ldrb	r3, [r7, #23]
 8017afc:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8017afe:	7dfb      	ldrb	r3, [r7, #23]
 8017b00:	461a      	mov	r2, r3
 8017b02:	68b9      	ldr	r1, [r7, #8]
 8017b04:	68f8      	ldr	r0, [r7, #12]
 8017b06:	f7ff fe93 	bl	8017830 <etharp_output_to_arp_index>
 8017b0a:	4603      	mov	r3, r0
 8017b0c:	e018      	b.n	8017b40 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8017b0e:	7dfb      	ldrb	r3, [r7, #23]
 8017b10:	3301      	adds	r3, #1
 8017b12:	75fb      	strb	r3, [r7, #23]
 8017b14:	7dfb      	ldrb	r3, [r7, #23]
 8017b16:	2b09      	cmp	r3, #9
 8017b18:	d9ca      	bls.n	8017ab0 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8017b1a:	68ba      	ldr	r2, [r7, #8]
 8017b1c:	69b9      	ldr	r1, [r7, #24]
 8017b1e:	68f8      	ldr	r0, [r7, #12]
 8017b20:	f000 f822 	bl	8017b68 <etharp_query>
 8017b24:	4603      	mov	r3, r0
 8017b26:	e00b      	b.n	8017b40 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8017b28:	68fb      	ldr	r3, [r7, #12]
 8017b2a:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8017b2e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8017b32:	9300      	str	r3, [sp, #0]
 8017b34:	69fb      	ldr	r3, [r7, #28]
 8017b36:	68b9      	ldr	r1, [r7, #8]
 8017b38:	68f8      	ldr	r0, [r7, #12]
 8017b3a:	f001 ff43 	bl	80199c4 <ethernet_output>
 8017b3e:	4603      	mov	r3, r0
}
 8017b40:	4618      	mov	r0, r3
 8017b42:	3720      	adds	r7, #32
 8017b44:	46bd      	mov	sp, r7
 8017b46:	bd80      	pop	{r7, pc}
 8017b48:	0801e300 	.word	0x0801e300
 8017b4c:	0801e450 	.word	0x0801e450
 8017b50:	0801e378 	.word	0x0801e378
 8017b54:	0801e4a0 	.word	0x0801e4a0
 8017b58:	0801e440 	.word	0x0801e440
 8017b5c:	0806a430 	.word	0x0806a430
 8017b60:	20013c4c 	.word	0x20013c4c
 8017b64:	20013b5c 	.word	0x20013b5c

08017b68 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8017b68:	b580      	push	{r7, lr}
 8017b6a:	b08c      	sub	sp, #48	; 0x30
 8017b6c:	af02      	add	r7, sp, #8
 8017b6e:	60f8      	str	r0, [r7, #12]
 8017b70:	60b9      	str	r1, [r7, #8]
 8017b72:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8017b74:	68fb      	ldr	r3, [r7, #12]
 8017b76:	332a      	adds	r3, #42	; 0x2a
 8017b78:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8017b7a:	23ff      	movs	r3, #255	; 0xff
 8017b7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8017b80:	2300      	movs	r3, #0
 8017b82:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8017b84:	68bb      	ldr	r3, [r7, #8]
 8017b86:	681b      	ldr	r3, [r3, #0]
 8017b88:	68f9      	ldr	r1, [r7, #12]
 8017b8a:	4618      	mov	r0, r3
 8017b8c:	f000 fed2 	bl	8018934 <ip4_addr_isbroadcast_u32>
 8017b90:	4603      	mov	r3, r0
 8017b92:	2b00      	cmp	r3, #0
 8017b94:	d10c      	bne.n	8017bb0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8017b96:	68bb      	ldr	r3, [r7, #8]
 8017b98:	681b      	ldr	r3, [r3, #0]
 8017b9a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8017b9e:	2be0      	cmp	r3, #224	; 0xe0
 8017ba0:	d006      	beq.n	8017bb0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8017ba2:	68bb      	ldr	r3, [r7, #8]
 8017ba4:	2b00      	cmp	r3, #0
 8017ba6:	d003      	beq.n	8017bb0 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8017ba8:	68bb      	ldr	r3, [r7, #8]
 8017baa:	681b      	ldr	r3, [r3, #0]
 8017bac:	2b00      	cmp	r3, #0
 8017bae:	d102      	bne.n	8017bb6 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8017bb0:	f06f 030f 	mvn.w	r3, #15
 8017bb4:	e101      	b.n	8017dba <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8017bb6:	68fa      	ldr	r2, [r7, #12]
 8017bb8:	2101      	movs	r1, #1
 8017bba:	68b8      	ldr	r0, [r7, #8]
 8017bbc:	f7ff fb20 	bl	8017200 <etharp_find_entry>
 8017bc0:	4603      	mov	r3, r0
 8017bc2:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8017bc4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8017bc8:	2b00      	cmp	r3, #0
 8017bca:	da02      	bge.n	8017bd2 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8017bcc:	8a7b      	ldrh	r3, [r7, #18]
 8017bce:	b25b      	sxtb	r3, r3
 8017bd0:	e0f3      	b.n	8017dba <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8017bd2:	8a7b      	ldrh	r3, [r7, #18]
 8017bd4:	2b7e      	cmp	r3, #126	; 0x7e
 8017bd6:	d906      	bls.n	8017be6 <etharp_query+0x7e>
 8017bd8:	4b7a      	ldr	r3, [pc, #488]	; (8017dc4 <etharp_query+0x25c>)
 8017bda:	f240 32c1 	movw	r2, #961	; 0x3c1
 8017bde:	497a      	ldr	r1, [pc, #488]	; (8017dc8 <etharp_query+0x260>)
 8017be0:	487a      	ldr	r0, [pc, #488]	; (8017dcc <etharp_query+0x264>)
 8017be2:	f002 f98d 	bl	8019f00 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8017be6:	8a7b      	ldrh	r3, [r7, #18]
 8017be8:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8017bea:	7c7a      	ldrb	r2, [r7, #17]
 8017bec:	4978      	ldr	r1, [pc, #480]	; (8017dd0 <etharp_query+0x268>)
 8017bee:	4613      	mov	r3, r2
 8017bf0:	005b      	lsls	r3, r3, #1
 8017bf2:	4413      	add	r3, r2
 8017bf4:	00db      	lsls	r3, r3, #3
 8017bf6:	440b      	add	r3, r1
 8017bf8:	3314      	adds	r3, #20
 8017bfa:	781b      	ldrb	r3, [r3, #0]
 8017bfc:	2b00      	cmp	r3, #0
 8017bfe:	d115      	bne.n	8017c2c <etharp_query+0xc4>
    is_new_entry = 1;
 8017c00:	2301      	movs	r3, #1
 8017c02:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8017c04:	7c7a      	ldrb	r2, [r7, #17]
 8017c06:	4972      	ldr	r1, [pc, #456]	; (8017dd0 <etharp_query+0x268>)
 8017c08:	4613      	mov	r3, r2
 8017c0a:	005b      	lsls	r3, r3, #1
 8017c0c:	4413      	add	r3, r2
 8017c0e:	00db      	lsls	r3, r3, #3
 8017c10:	440b      	add	r3, r1
 8017c12:	3314      	adds	r3, #20
 8017c14:	2201      	movs	r2, #1
 8017c16:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8017c18:	7c7a      	ldrb	r2, [r7, #17]
 8017c1a:	496d      	ldr	r1, [pc, #436]	; (8017dd0 <etharp_query+0x268>)
 8017c1c:	4613      	mov	r3, r2
 8017c1e:	005b      	lsls	r3, r3, #1
 8017c20:	4413      	add	r3, r2
 8017c22:	00db      	lsls	r3, r3, #3
 8017c24:	440b      	add	r3, r1
 8017c26:	3308      	adds	r3, #8
 8017c28:	68fa      	ldr	r2, [r7, #12]
 8017c2a:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8017c2c:	7c7a      	ldrb	r2, [r7, #17]
 8017c2e:	4968      	ldr	r1, [pc, #416]	; (8017dd0 <etharp_query+0x268>)
 8017c30:	4613      	mov	r3, r2
 8017c32:	005b      	lsls	r3, r3, #1
 8017c34:	4413      	add	r3, r2
 8017c36:	00db      	lsls	r3, r3, #3
 8017c38:	440b      	add	r3, r1
 8017c3a:	3314      	adds	r3, #20
 8017c3c:	781b      	ldrb	r3, [r3, #0]
 8017c3e:	2b01      	cmp	r3, #1
 8017c40:	d011      	beq.n	8017c66 <etharp_query+0xfe>
 8017c42:	7c7a      	ldrb	r2, [r7, #17]
 8017c44:	4962      	ldr	r1, [pc, #392]	; (8017dd0 <etharp_query+0x268>)
 8017c46:	4613      	mov	r3, r2
 8017c48:	005b      	lsls	r3, r3, #1
 8017c4a:	4413      	add	r3, r2
 8017c4c:	00db      	lsls	r3, r3, #3
 8017c4e:	440b      	add	r3, r1
 8017c50:	3314      	adds	r3, #20
 8017c52:	781b      	ldrb	r3, [r3, #0]
 8017c54:	2b01      	cmp	r3, #1
 8017c56:	d806      	bhi.n	8017c66 <etharp_query+0xfe>
 8017c58:	4b5a      	ldr	r3, [pc, #360]	; (8017dc4 <etharp_query+0x25c>)
 8017c5a:	f240 32cd 	movw	r2, #973	; 0x3cd
 8017c5e:	495d      	ldr	r1, [pc, #372]	; (8017dd4 <etharp_query+0x26c>)
 8017c60:	485a      	ldr	r0, [pc, #360]	; (8017dcc <etharp_query+0x264>)
 8017c62:	f002 f94d 	bl	8019f00 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8017c66:	6a3b      	ldr	r3, [r7, #32]
 8017c68:	2b00      	cmp	r3, #0
 8017c6a:	d102      	bne.n	8017c72 <etharp_query+0x10a>
 8017c6c:	687b      	ldr	r3, [r7, #4]
 8017c6e:	2b00      	cmp	r3, #0
 8017c70:	d10c      	bne.n	8017c8c <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8017c72:	68b9      	ldr	r1, [r7, #8]
 8017c74:	68f8      	ldr	r0, [r7, #12]
 8017c76:	f000 f963 	bl	8017f40 <etharp_request>
 8017c7a:	4603      	mov	r3, r0
 8017c7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8017c80:	687b      	ldr	r3, [r7, #4]
 8017c82:	2b00      	cmp	r3, #0
 8017c84:	d102      	bne.n	8017c8c <etharp_query+0x124>
      return result;
 8017c86:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8017c8a:	e096      	b.n	8017dba <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8017c8c:	687b      	ldr	r3, [r7, #4]
 8017c8e:	2b00      	cmp	r3, #0
 8017c90:	d106      	bne.n	8017ca0 <etharp_query+0x138>
 8017c92:	4b4c      	ldr	r3, [pc, #304]	; (8017dc4 <etharp_query+0x25c>)
 8017c94:	f240 32e1 	movw	r2, #993	; 0x3e1
 8017c98:	494f      	ldr	r1, [pc, #316]	; (8017dd8 <etharp_query+0x270>)
 8017c9a:	484c      	ldr	r0, [pc, #304]	; (8017dcc <etharp_query+0x264>)
 8017c9c:	f002 f930 	bl	8019f00 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8017ca0:	7c7a      	ldrb	r2, [r7, #17]
 8017ca2:	494b      	ldr	r1, [pc, #300]	; (8017dd0 <etharp_query+0x268>)
 8017ca4:	4613      	mov	r3, r2
 8017ca6:	005b      	lsls	r3, r3, #1
 8017ca8:	4413      	add	r3, r2
 8017caa:	00db      	lsls	r3, r3, #3
 8017cac:	440b      	add	r3, r1
 8017cae:	3314      	adds	r3, #20
 8017cb0:	781b      	ldrb	r3, [r3, #0]
 8017cb2:	2b01      	cmp	r3, #1
 8017cb4:	d917      	bls.n	8017ce6 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8017cb6:	4a49      	ldr	r2, [pc, #292]	; (8017ddc <etharp_query+0x274>)
 8017cb8:	7c7b      	ldrb	r3, [r7, #17]
 8017cba:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8017cbc:	7c7a      	ldrb	r2, [r7, #17]
 8017cbe:	4613      	mov	r3, r2
 8017cc0:	005b      	lsls	r3, r3, #1
 8017cc2:	4413      	add	r3, r2
 8017cc4:	00db      	lsls	r3, r3, #3
 8017cc6:	3308      	adds	r3, #8
 8017cc8:	4a41      	ldr	r2, [pc, #260]	; (8017dd0 <etharp_query+0x268>)
 8017cca:	4413      	add	r3, r2
 8017ccc:	3304      	adds	r3, #4
 8017cce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8017cd2:	9200      	str	r2, [sp, #0]
 8017cd4:	697a      	ldr	r2, [r7, #20]
 8017cd6:	6879      	ldr	r1, [r7, #4]
 8017cd8:	68f8      	ldr	r0, [r7, #12]
 8017cda:	f001 fe73 	bl	80199c4 <ethernet_output>
 8017cde:	4603      	mov	r3, r0
 8017ce0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017ce4:	e067      	b.n	8017db6 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8017ce6:	7c7a      	ldrb	r2, [r7, #17]
 8017ce8:	4939      	ldr	r1, [pc, #228]	; (8017dd0 <etharp_query+0x268>)
 8017cea:	4613      	mov	r3, r2
 8017cec:	005b      	lsls	r3, r3, #1
 8017cee:	4413      	add	r3, r2
 8017cf0:	00db      	lsls	r3, r3, #3
 8017cf2:	440b      	add	r3, r1
 8017cf4:	3314      	adds	r3, #20
 8017cf6:	781b      	ldrb	r3, [r3, #0]
 8017cf8:	2b01      	cmp	r3, #1
 8017cfa:	d15c      	bne.n	8017db6 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8017cfc:	2300      	movs	r3, #0
 8017cfe:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8017d00:	687b      	ldr	r3, [r7, #4]
 8017d02:	61fb      	str	r3, [r7, #28]
    while (p) {
 8017d04:	e01c      	b.n	8017d40 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8017d06:	69fb      	ldr	r3, [r7, #28]
 8017d08:	895a      	ldrh	r2, [r3, #10]
 8017d0a:	69fb      	ldr	r3, [r7, #28]
 8017d0c:	891b      	ldrh	r3, [r3, #8]
 8017d0e:	429a      	cmp	r2, r3
 8017d10:	d10a      	bne.n	8017d28 <etharp_query+0x1c0>
 8017d12:	69fb      	ldr	r3, [r7, #28]
 8017d14:	681b      	ldr	r3, [r3, #0]
 8017d16:	2b00      	cmp	r3, #0
 8017d18:	d006      	beq.n	8017d28 <etharp_query+0x1c0>
 8017d1a:	4b2a      	ldr	r3, [pc, #168]	; (8017dc4 <etharp_query+0x25c>)
 8017d1c:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8017d20:	492f      	ldr	r1, [pc, #188]	; (8017de0 <etharp_query+0x278>)
 8017d22:	482a      	ldr	r0, [pc, #168]	; (8017dcc <etharp_query+0x264>)
 8017d24:	f002 f8ec 	bl	8019f00 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8017d28:	69fb      	ldr	r3, [r7, #28]
 8017d2a:	7b1b      	ldrb	r3, [r3, #12]
 8017d2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017d30:	2b00      	cmp	r3, #0
 8017d32:	d002      	beq.n	8017d3a <etharp_query+0x1d2>
        copy_needed = 1;
 8017d34:	2301      	movs	r3, #1
 8017d36:	61bb      	str	r3, [r7, #24]
        break;
 8017d38:	e005      	b.n	8017d46 <etharp_query+0x1de>
      }
      p = p->next;
 8017d3a:	69fb      	ldr	r3, [r7, #28]
 8017d3c:	681b      	ldr	r3, [r3, #0]
 8017d3e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8017d40:	69fb      	ldr	r3, [r7, #28]
 8017d42:	2b00      	cmp	r3, #0
 8017d44:	d1df      	bne.n	8017d06 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8017d46:	69bb      	ldr	r3, [r7, #24]
 8017d48:	2b00      	cmp	r3, #0
 8017d4a:	d007      	beq.n	8017d5c <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8017d4c:	687a      	ldr	r2, [r7, #4]
 8017d4e:	f44f 7120 	mov.w	r1, #640	; 0x280
 8017d52:	200e      	movs	r0, #14
 8017d54:	f7f7 f948 	bl	800efe8 <pbuf_clone>
 8017d58:	61f8      	str	r0, [r7, #28]
 8017d5a:	e004      	b.n	8017d66 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8017d5c:	687b      	ldr	r3, [r7, #4]
 8017d5e:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8017d60:	69f8      	ldr	r0, [r7, #28]
 8017d62:	f7f6 fe37 	bl	800e9d4 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8017d66:	69fb      	ldr	r3, [r7, #28]
 8017d68:	2b00      	cmp	r3, #0
 8017d6a:	d021      	beq.n	8017db0 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8017d6c:	7c7a      	ldrb	r2, [r7, #17]
 8017d6e:	4918      	ldr	r1, [pc, #96]	; (8017dd0 <etharp_query+0x268>)
 8017d70:	4613      	mov	r3, r2
 8017d72:	005b      	lsls	r3, r3, #1
 8017d74:	4413      	add	r3, r2
 8017d76:	00db      	lsls	r3, r3, #3
 8017d78:	440b      	add	r3, r1
 8017d7a:	681b      	ldr	r3, [r3, #0]
 8017d7c:	2b00      	cmp	r3, #0
 8017d7e:	d00a      	beq.n	8017d96 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8017d80:	7c7a      	ldrb	r2, [r7, #17]
 8017d82:	4913      	ldr	r1, [pc, #76]	; (8017dd0 <etharp_query+0x268>)
 8017d84:	4613      	mov	r3, r2
 8017d86:	005b      	lsls	r3, r3, #1
 8017d88:	4413      	add	r3, r2
 8017d8a:	00db      	lsls	r3, r3, #3
 8017d8c:	440b      	add	r3, r1
 8017d8e:	681b      	ldr	r3, [r3, #0]
 8017d90:	4618      	mov	r0, r3
 8017d92:	f7f6 fd79 	bl	800e888 <pbuf_free>
      }
      arp_table[i].q = p;
 8017d96:	7c7a      	ldrb	r2, [r7, #17]
 8017d98:	490d      	ldr	r1, [pc, #52]	; (8017dd0 <etharp_query+0x268>)
 8017d9a:	4613      	mov	r3, r2
 8017d9c:	005b      	lsls	r3, r3, #1
 8017d9e:	4413      	add	r3, r2
 8017da0:	00db      	lsls	r3, r3, #3
 8017da2:	440b      	add	r3, r1
 8017da4:	69fa      	ldr	r2, [r7, #28]
 8017da6:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8017da8:	2300      	movs	r3, #0
 8017daa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017dae:	e002      	b.n	8017db6 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8017db0:	23ff      	movs	r3, #255	; 0xff
 8017db2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8017db6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8017dba:	4618      	mov	r0, r3
 8017dbc:	3728      	adds	r7, #40	; 0x28
 8017dbe:	46bd      	mov	sp, r7
 8017dc0:	bd80      	pop	{r7, pc}
 8017dc2:	bf00      	nop
 8017dc4:	0801e300 	.word	0x0801e300
 8017dc8:	0801e4ac 	.word	0x0801e4ac
 8017dcc:	0801e378 	.word	0x0801e378
 8017dd0:	20013b5c 	.word	0x20013b5c
 8017dd4:	0801e4bc 	.word	0x0801e4bc
 8017dd8:	0801e4a0 	.word	0x0801e4a0
 8017ddc:	20013c4c 	.word	0x20013c4c
 8017de0:	0801e4e4 	.word	0x0801e4e4

08017de4 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8017de4:	b580      	push	{r7, lr}
 8017de6:	b08a      	sub	sp, #40	; 0x28
 8017de8:	af02      	add	r7, sp, #8
 8017dea:	60f8      	str	r0, [r7, #12]
 8017dec:	60b9      	str	r1, [r7, #8]
 8017dee:	607a      	str	r2, [r7, #4]
 8017df0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8017df2:	2300      	movs	r3, #0
 8017df4:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8017df6:	68fb      	ldr	r3, [r7, #12]
 8017df8:	2b00      	cmp	r3, #0
 8017dfa:	d106      	bne.n	8017e0a <etharp_raw+0x26>
 8017dfc:	4b3a      	ldr	r3, [pc, #232]	; (8017ee8 <etharp_raw+0x104>)
 8017dfe:	f240 4257 	movw	r2, #1111	; 0x457
 8017e02:	493a      	ldr	r1, [pc, #232]	; (8017eec <etharp_raw+0x108>)
 8017e04:	483a      	ldr	r0, [pc, #232]	; (8017ef0 <etharp_raw+0x10c>)
 8017e06:	f002 f87b 	bl	8019f00 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8017e0a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017e0e:	211c      	movs	r1, #28
 8017e10:	200e      	movs	r0, #14
 8017e12:	f7f6 fa51 	bl	800e2b8 <pbuf_alloc>
 8017e16:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8017e18:	69bb      	ldr	r3, [r7, #24]
 8017e1a:	2b00      	cmp	r3, #0
 8017e1c:	d102      	bne.n	8017e24 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8017e1e:	f04f 33ff 	mov.w	r3, #4294967295
 8017e22:	e05d      	b.n	8017ee0 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8017e24:	69bb      	ldr	r3, [r7, #24]
 8017e26:	895b      	ldrh	r3, [r3, #10]
 8017e28:	2b1b      	cmp	r3, #27
 8017e2a:	d806      	bhi.n	8017e3a <etharp_raw+0x56>
 8017e2c:	4b2e      	ldr	r3, [pc, #184]	; (8017ee8 <etharp_raw+0x104>)
 8017e2e:	f240 4262 	movw	r2, #1122	; 0x462
 8017e32:	4930      	ldr	r1, [pc, #192]	; (8017ef4 <etharp_raw+0x110>)
 8017e34:	482e      	ldr	r0, [pc, #184]	; (8017ef0 <etharp_raw+0x10c>)
 8017e36:	f002 f863 	bl	8019f00 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8017e3a:	69bb      	ldr	r3, [r7, #24]
 8017e3c:	685b      	ldr	r3, [r3, #4]
 8017e3e:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8017e40:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8017e42:	4618      	mov	r0, r3
 8017e44:	f7f4 fffe 	bl	800ce44 <lwip_htons>
 8017e48:	4603      	mov	r3, r0
 8017e4a:	461a      	mov	r2, r3
 8017e4c:	697b      	ldr	r3, [r7, #20]
 8017e4e:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8017e50:	68fb      	ldr	r3, [r7, #12]
 8017e52:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017e56:	2b06      	cmp	r3, #6
 8017e58:	d006      	beq.n	8017e68 <etharp_raw+0x84>
 8017e5a:	4b23      	ldr	r3, [pc, #140]	; (8017ee8 <etharp_raw+0x104>)
 8017e5c:	f240 4269 	movw	r2, #1129	; 0x469
 8017e60:	4925      	ldr	r1, [pc, #148]	; (8017ef8 <etharp_raw+0x114>)
 8017e62:	4823      	ldr	r0, [pc, #140]	; (8017ef0 <etharp_raw+0x10c>)
 8017e64:	f002 f84c 	bl	8019f00 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8017e68:	697b      	ldr	r3, [r7, #20]
 8017e6a:	3308      	adds	r3, #8
 8017e6c:	2206      	movs	r2, #6
 8017e6e:	6839      	ldr	r1, [r7, #0]
 8017e70:	4618      	mov	r0, r3
 8017e72:	f001 ff4f 	bl	8019d14 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8017e76:	697b      	ldr	r3, [r7, #20]
 8017e78:	3312      	adds	r3, #18
 8017e7a:	2206      	movs	r2, #6
 8017e7c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8017e7e:	4618      	mov	r0, r3
 8017e80:	f001 ff48 	bl	8019d14 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8017e84:	697b      	ldr	r3, [r7, #20]
 8017e86:	330e      	adds	r3, #14
 8017e88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017e8a:	6812      	ldr	r2, [r2, #0]
 8017e8c:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8017e8e:	697b      	ldr	r3, [r7, #20]
 8017e90:	3318      	adds	r3, #24
 8017e92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017e94:	6812      	ldr	r2, [r2, #0]
 8017e96:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8017e98:	697b      	ldr	r3, [r7, #20]
 8017e9a:	2200      	movs	r2, #0
 8017e9c:	701a      	strb	r2, [r3, #0]
 8017e9e:	2200      	movs	r2, #0
 8017ea0:	f042 0201 	orr.w	r2, r2, #1
 8017ea4:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8017ea6:	697b      	ldr	r3, [r7, #20]
 8017ea8:	2200      	movs	r2, #0
 8017eaa:	f042 0208 	orr.w	r2, r2, #8
 8017eae:	709a      	strb	r2, [r3, #2]
 8017eb0:	2200      	movs	r2, #0
 8017eb2:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8017eb4:	697b      	ldr	r3, [r7, #20]
 8017eb6:	2206      	movs	r2, #6
 8017eb8:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8017eba:	697b      	ldr	r3, [r7, #20]
 8017ebc:	2204      	movs	r2, #4
 8017ebe:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8017ec0:	f640 0306 	movw	r3, #2054	; 0x806
 8017ec4:	9300      	str	r3, [sp, #0]
 8017ec6:	687b      	ldr	r3, [r7, #4]
 8017ec8:	68ba      	ldr	r2, [r7, #8]
 8017eca:	69b9      	ldr	r1, [r7, #24]
 8017ecc:	68f8      	ldr	r0, [r7, #12]
 8017ece:	f001 fd79 	bl	80199c4 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8017ed2:	69b8      	ldr	r0, [r7, #24]
 8017ed4:	f7f6 fcd8 	bl	800e888 <pbuf_free>
  p = NULL;
 8017ed8:	2300      	movs	r3, #0
 8017eda:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8017edc:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8017ee0:	4618      	mov	r0, r3
 8017ee2:	3720      	adds	r7, #32
 8017ee4:	46bd      	mov	sp, r7
 8017ee6:	bd80      	pop	{r7, pc}
 8017ee8:	0801e300 	.word	0x0801e300
 8017eec:	0801e450 	.word	0x0801e450
 8017ef0:	0801e378 	.word	0x0801e378
 8017ef4:	0801e500 	.word	0x0801e500
 8017ef8:	0801e534 	.word	0x0801e534

08017efc <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8017efc:	b580      	push	{r7, lr}
 8017efe:	b088      	sub	sp, #32
 8017f00:	af04      	add	r7, sp, #16
 8017f02:	60f8      	str	r0, [r7, #12]
 8017f04:	60b9      	str	r1, [r7, #8]
 8017f06:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8017f08:	68fb      	ldr	r3, [r7, #12]
 8017f0a:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8017f0e:	68fb      	ldr	r3, [r7, #12]
 8017f10:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8017f14:	68fb      	ldr	r3, [r7, #12]
 8017f16:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8017f18:	2201      	movs	r2, #1
 8017f1a:	9203      	str	r2, [sp, #12]
 8017f1c:	68ba      	ldr	r2, [r7, #8]
 8017f1e:	9202      	str	r2, [sp, #8]
 8017f20:	4a06      	ldr	r2, [pc, #24]	; (8017f3c <etharp_request_dst+0x40>)
 8017f22:	9201      	str	r2, [sp, #4]
 8017f24:	9300      	str	r3, [sp, #0]
 8017f26:	4603      	mov	r3, r0
 8017f28:	687a      	ldr	r2, [r7, #4]
 8017f2a:	68f8      	ldr	r0, [r7, #12]
 8017f2c:	f7ff ff5a 	bl	8017de4 <etharp_raw>
 8017f30:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8017f32:	4618      	mov	r0, r3
 8017f34:	3710      	adds	r7, #16
 8017f36:	46bd      	mov	sp, r7
 8017f38:	bd80      	pop	{r7, pc}
 8017f3a:	bf00      	nop
 8017f3c:	0806a438 	.word	0x0806a438

08017f40 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8017f40:	b580      	push	{r7, lr}
 8017f42:	b082      	sub	sp, #8
 8017f44:	af00      	add	r7, sp, #0
 8017f46:	6078      	str	r0, [r7, #4]
 8017f48:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8017f4a:	4a05      	ldr	r2, [pc, #20]	; (8017f60 <etharp_request+0x20>)
 8017f4c:	6839      	ldr	r1, [r7, #0]
 8017f4e:	6878      	ldr	r0, [r7, #4]
 8017f50:	f7ff ffd4 	bl	8017efc <etharp_request_dst>
 8017f54:	4603      	mov	r3, r0
}
 8017f56:	4618      	mov	r0, r3
 8017f58:	3708      	adds	r7, #8
 8017f5a:	46bd      	mov	sp, r7
 8017f5c:	bd80      	pop	{r7, pc}
 8017f5e:	bf00      	nop
 8017f60:	0806a430 	.word	0x0806a430

08017f64 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8017f64:	b580      	push	{r7, lr}
 8017f66:	b08e      	sub	sp, #56	; 0x38
 8017f68:	af04      	add	r7, sp, #16
 8017f6a:	6078      	str	r0, [r7, #4]
 8017f6c:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8017f6e:	4b8e      	ldr	r3, [pc, #568]	; (80181a8 <icmp_input+0x244>)
 8017f70:	689b      	ldr	r3, [r3, #8]
 8017f72:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8017f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f76:	781b      	ldrb	r3, [r3, #0]
 8017f78:	f003 030f 	and.w	r3, r3, #15
 8017f7c:	b2db      	uxtb	r3, r3
 8017f7e:	009b      	lsls	r3, r3, #2
 8017f80:	b2db      	uxtb	r3, r3
 8017f82:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8017f84:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017f86:	2b13      	cmp	r3, #19
 8017f88:	f240 80f6 	bls.w	8018178 <icmp_input+0x214>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8017f8c:	687b      	ldr	r3, [r7, #4]
 8017f8e:	895b      	ldrh	r3, [r3, #10]
 8017f90:	2b03      	cmp	r3, #3
 8017f92:	f240 80f3 	bls.w	801817c <icmp_input+0x218>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8017f96:	687b      	ldr	r3, [r7, #4]
 8017f98:	685b      	ldr	r3, [r3, #4]
 8017f9a:	781b      	ldrb	r3, [r3, #0]
 8017f9c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
 8017fa0:	687b      	ldr	r3, [r7, #4]
 8017fa2:	685b      	ldr	r3, [r3, #4]
 8017fa4:	785b      	ldrb	r3, [r3, #1]
 8017fa6:	f887 3020 	strb.w	r3, [r7, #32]
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8017faa:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8017fae:	2b00      	cmp	r3, #0
 8017fb0:	f000 80db 	beq.w	801816a <icmp_input+0x206>
 8017fb4:	2b08      	cmp	r3, #8
 8017fb6:	f040 80db 	bne.w	8018170 <icmp_input+0x20c>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8017fba:	4b7c      	ldr	r3, [pc, #496]	; (80181ac <icmp_input+0x248>)
 8017fbc:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8017fbe:	4b7a      	ldr	r3, [pc, #488]	; (80181a8 <icmp_input+0x244>)
 8017fc0:	695b      	ldr	r3, [r3, #20]
 8017fc2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017fc6:	2be0      	cmp	r3, #224	; 0xe0
 8017fc8:	f000 80df 	beq.w	801818a <icmp_input+0x226>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8017fcc:	4b76      	ldr	r3, [pc, #472]	; (80181a8 <icmp_input+0x244>)
 8017fce:	695b      	ldr	r3, [r3, #20]
 8017fd0:	4a75      	ldr	r2, [pc, #468]	; (80181a8 <icmp_input+0x244>)
 8017fd2:	6812      	ldr	r2, [r2, #0]
 8017fd4:	4611      	mov	r1, r2
 8017fd6:	4618      	mov	r0, r3
 8017fd8:	f000 fcac 	bl	8018934 <ip4_addr_isbroadcast_u32>
 8017fdc:	4603      	mov	r3, r0
 8017fde:	2b00      	cmp	r3, #0
 8017fe0:	f040 80d5 	bne.w	801818e <icmp_input+0x22a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8017fe4:	687b      	ldr	r3, [r7, #4]
 8017fe6:	891b      	ldrh	r3, [r3, #8]
 8017fe8:	2b07      	cmp	r3, #7
 8017fea:	f240 80c9 	bls.w	8018180 <icmp_input+0x21c>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 8017fee:	6878      	ldr	r0, [r7, #4]
 8017ff0:	f7f5 f882 	bl	800d0f8 <inet_chksum_pbuf>
 8017ff4:	4603      	mov	r3, r0
 8017ff6:	2b00      	cmp	r3, #0
 8017ff8:	d003      	beq.n	8018002 <icmp_input+0x9e>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 8017ffa:	6878      	ldr	r0, [r7, #4]
 8017ffc:	f7f6 fc44 	bl	800e888 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 8018000:	e0ce      	b.n	80181a0 <icmp_input+0x23c>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8018002:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018004:	330e      	adds	r3, #14
 8018006:	4619      	mov	r1, r3
 8018008:	6878      	ldr	r0, [r7, #4]
 801800a:	f7f6 fba7 	bl	800e75c <pbuf_add_header>
 801800e:	4603      	mov	r3, r0
 8018010:	2b00      	cmp	r3, #0
 8018012:	d04b      	beq.n	80180ac <icmp_input+0x148>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8018014:	687b      	ldr	r3, [r7, #4]
 8018016:	891a      	ldrh	r2, [r3, #8]
 8018018:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801801a:	4413      	add	r3, r2
 801801c:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801801e:	687b      	ldr	r3, [r7, #4]
 8018020:	891b      	ldrh	r3, [r3, #8]
 8018022:	8b7a      	ldrh	r2, [r7, #26]
 8018024:	429a      	cmp	r2, r3
 8018026:	f0c0 80b4 	bcc.w	8018192 <icmp_input+0x22e>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801802a:	8b7b      	ldrh	r3, [r7, #26]
 801802c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8018030:	4619      	mov	r1, r3
 8018032:	200e      	movs	r0, #14
 8018034:	f7f6 f940 	bl	800e2b8 <pbuf_alloc>
 8018038:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801803a:	697b      	ldr	r3, [r7, #20]
 801803c:	2b00      	cmp	r3, #0
 801803e:	f000 80aa 	beq.w	8018196 <icmp_input+0x232>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8018042:	697b      	ldr	r3, [r7, #20]
 8018044:	895b      	ldrh	r3, [r3, #10]
 8018046:	461a      	mov	r2, r3
 8018048:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801804a:	3308      	adds	r3, #8
 801804c:	429a      	cmp	r2, r3
 801804e:	d203      	bcs.n	8018058 <icmp_input+0xf4>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8018050:	6978      	ldr	r0, [r7, #20]
 8018052:	f7f6 fc19 	bl	800e888 <pbuf_free>
          goto icmperr;
 8018056:	e09f      	b.n	8018198 <icmp_input+0x234>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8018058:	697b      	ldr	r3, [r7, #20]
 801805a:	685b      	ldr	r3, [r3, #4]
 801805c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801805e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8018060:	4618      	mov	r0, r3
 8018062:	f001 fe57 	bl	8019d14 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8018066:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018068:	4619      	mov	r1, r3
 801806a:	6978      	ldr	r0, [r7, #20]
 801806c:	f7f6 fb86 	bl	800e77c <pbuf_remove_header>
 8018070:	4603      	mov	r3, r0
 8018072:	2b00      	cmp	r3, #0
 8018074:	d009      	beq.n	801808a <icmp_input+0x126>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8018076:	4b4e      	ldr	r3, [pc, #312]	; (80181b0 <icmp_input+0x24c>)
 8018078:	22b6      	movs	r2, #182	; 0xb6
 801807a:	494e      	ldr	r1, [pc, #312]	; (80181b4 <icmp_input+0x250>)
 801807c:	484e      	ldr	r0, [pc, #312]	; (80181b8 <icmp_input+0x254>)
 801807e:	f001 ff3f 	bl	8019f00 <iprintf>
          pbuf_free(r);
 8018082:	6978      	ldr	r0, [r7, #20]
 8018084:	f7f6 fc00 	bl	800e888 <pbuf_free>
          goto icmperr;
 8018088:	e086      	b.n	8018198 <icmp_input+0x234>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801808a:	6879      	ldr	r1, [r7, #4]
 801808c:	6978      	ldr	r0, [r7, #20]
 801808e:	f7f6 fd2f 	bl	800eaf0 <pbuf_copy>
 8018092:	4603      	mov	r3, r0
 8018094:	2b00      	cmp	r3, #0
 8018096:	d003      	beq.n	80180a0 <icmp_input+0x13c>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8018098:	6978      	ldr	r0, [r7, #20]
 801809a:	f7f6 fbf5 	bl	800e888 <pbuf_free>
          goto icmperr;
 801809e:	e07b      	b.n	8018198 <icmp_input+0x234>
        }
        /* free the original p */
        pbuf_free(p);
 80180a0:	6878      	ldr	r0, [r7, #4]
 80180a2:	f7f6 fbf1 	bl	800e888 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 80180a6:	697b      	ldr	r3, [r7, #20]
 80180a8:	607b      	str	r3, [r7, #4]
 80180aa:	e00f      	b.n	80180cc <icmp_input+0x168>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80180ac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80180ae:	330e      	adds	r3, #14
 80180b0:	4619      	mov	r1, r3
 80180b2:	6878      	ldr	r0, [r7, #4]
 80180b4:	f7f6 fb62 	bl	800e77c <pbuf_remove_header>
 80180b8:	4603      	mov	r3, r0
 80180ba:	2b00      	cmp	r3, #0
 80180bc:	d006      	beq.n	80180cc <icmp_input+0x168>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80180be:	4b3c      	ldr	r3, [pc, #240]	; (80181b0 <icmp_input+0x24c>)
 80180c0:	22c7      	movs	r2, #199	; 0xc7
 80180c2:	493e      	ldr	r1, [pc, #248]	; (80181bc <icmp_input+0x258>)
 80180c4:	483c      	ldr	r0, [pc, #240]	; (80181b8 <icmp_input+0x254>)
 80180c6:	f001 ff1b 	bl	8019f00 <iprintf>
          goto icmperr;
 80180ca:	e065      	b.n	8018198 <icmp_input+0x234>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 80180cc:	687b      	ldr	r3, [r7, #4]
 80180ce:	685b      	ldr	r3, [r3, #4]
 80180d0:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 80180d2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80180d4:	4619      	mov	r1, r3
 80180d6:	6878      	ldr	r0, [r7, #4]
 80180d8:	f7f6 fb40 	bl	800e75c <pbuf_add_header>
 80180dc:	4603      	mov	r3, r0
 80180de:	2b00      	cmp	r3, #0
 80180e0:	d145      	bne.n	801816e <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 80180e2:	687b      	ldr	r3, [r7, #4]
 80180e4:	685b      	ldr	r3, [r3, #4]
 80180e6:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 80180e8:	69fb      	ldr	r3, [r7, #28]
 80180ea:	681a      	ldr	r2, [r3, #0]
 80180ec:	68fb      	ldr	r3, [r7, #12]
 80180ee:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80180f0:	4b2d      	ldr	r3, [pc, #180]	; (80181a8 <icmp_input+0x244>)
 80180f2:	691a      	ldr	r2, [r3, #16]
 80180f4:	68fb      	ldr	r3, [r7, #12]
 80180f6:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 80180f8:	693b      	ldr	r3, [r7, #16]
 80180fa:	2200      	movs	r2, #0
 80180fc:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 80180fe:	693b      	ldr	r3, [r7, #16]
 8018100:	885b      	ldrh	r3, [r3, #2]
 8018102:	b29b      	uxth	r3, r3
 8018104:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8018108:	4293      	cmp	r3, r2
 801810a:	d907      	bls.n	801811c <icmp_input+0x1b8>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 801810c:	693b      	ldr	r3, [r7, #16]
 801810e:	885b      	ldrh	r3, [r3, #2]
 8018110:	b29b      	uxth	r3, r3
 8018112:	3309      	adds	r3, #9
 8018114:	b29a      	uxth	r2, r3
 8018116:	693b      	ldr	r3, [r7, #16]
 8018118:	805a      	strh	r2, [r3, #2]
 801811a:	e006      	b.n	801812a <icmp_input+0x1c6>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 801811c:	693b      	ldr	r3, [r7, #16]
 801811e:	885b      	ldrh	r3, [r3, #2]
 8018120:	b29b      	uxth	r3, r3
 8018122:	3308      	adds	r3, #8
 8018124:	b29a      	uxth	r2, r3
 8018126:	693b      	ldr	r3, [r7, #16]
 8018128:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801812a:	68fb      	ldr	r3, [r7, #12]
 801812c:	22ff      	movs	r2, #255	; 0xff
 801812e:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8018130:	68fb      	ldr	r3, [r7, #12]
 8018132:	2200      	movs	r2, #0
 8018134:	729a      	strb	r2, [r3, #10]
 8018136:	2200      	movs	r2, #0
 8018138:	72da      	strb	r2, [r3, #11]
#if CHECKSUM_GEN_IP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_IP) {
          IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, hlen));
 801813a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801813c:	4619      	mov	r1, r3
 801813e:	68f8      	ldr	r0, [r7, #12]
 8018140:	f7f4 ffc8 	bl	800d0d4 <inet_chksum>
 8018144:	4603      	mov	r3, r0
 8018146:	461a      	mov	r2, r3
 8018148:	68fb      	ldr	r3, [r7, #12]
 801814a:	815a      	strh	r2, [r3, #10]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801814c:	683b      	ldr	r3, [r7, #0]
 801814e:	9302      	str	r3, [sp, #8]
 8018150:	2301      	movs	r3, #1
 8018152:	9301      	str	r3, [sp, #4]
 8018154:	2300      	movs	r3, #0
 8018156:	9300      	str	r3, [sp, #0]
 8018158:	23ff      	movs	r3, #255	; 0xff
 801815a:	2200      	movs	r2, #0
 801815c:	69f9      	ldr	r1, [r7, #28]
 801815e:	6878      	ldr	r0, [r7, #4]
 8018160:	f000 faaa 	bl	80186b8 <ip4_output_if>
 8018164:	4603      	mov	r3, r0
 8018166:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8018168:	e001      	b.n	801816e <icmp_input+0x20a>
      break;
 801816a:	bf00      	nop
 801816c:	e000      	b.n	8018170 <icmp_input+0x20c>
      break;
 801816e:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8018170:	6878      	ldr	r0, [r7, #4]
 8018172:	f7f6 fb89 	bl	800e888 <pbuf_free>
  return;
 8018176:	e013      	b.n	80181a0 <icmp_input+0x23c>
    goto lenerr;
 8018178:	bf00      	nop
 801817a:	e002      	b.n	8018182 <icmp_input+0x21e>
    goto lenerr;
 801817c:	bf00      	nop
 801817e:	e000      	b.n	8018182 <icmp_input+0x21e>
        goto lenerr;
 8018180:	bf00      	nop
lenerr:
  pbuf_free(p);
 8018182:	6878      	ldr	r0, [r7, #4]
 8018184:	f7f6 fb80 	bl	800e888 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8018188:	e00a      	b.n	80181a0 <icmp_input+0x23c>
        goto icmperr;
 801818a:	bf00      	nop
 801818c:	e004      	b.n	8018198 <icmp_input+0x234>
        goto icmperr;
 801818e:	bf00      	nop
 8018190:	e002      	b.n	8018198 <icmp_input+0x234>
          goto icmperr;
 8018192:	bf00      	nop
 8018194:	e000      	b.n	8018198 <icmp_input+0x234>
          goto icmperr;
 8018196:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8018198:	6878      	ldr	r0, [r7, #4]
 801819a:	f7f6 fb75 	bl	800e888 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801819e:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80181a0:	3728      	adds	r7, #40	; 0x28
 80181a2:	46bd      	mov	sp, r7
 80181a4:	bd80      	pop	{r7, pc}
 80181a6:	bf00      	nop
 80181a8:	2000a050 	.word	0x2000a050
 80181ac:	2000a064 	.word	0x2000a064
 80181b0:	0801e578 	.word	0x0801e578
 80181b4:	0801e5b0 	.word	0x0801e5b0
 80181b8:	0801e5e8 	.word	0x0801e5e8
 80181bc:	0801e610 	.word	0x0801e610

080181c0 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80181c0:	b580      	push	{r7, lr}
 80181c2:	b082      	sub	sp, #8
 80181c4:	af00      	add	r7, sp, #0
 80181c6:	6078      	str	r0, [r7, #4]
 80181c8:	460b      	mov	r3, r1
 80181ca:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80181cc:	78fb      	ldrb	r3, [r7, #3]
 80181ce:	461a      	mov	r2, r3
 80181d0:	2103      	movs	r1, #3
 80181d2:	6878      	ldr	r0, [r7, #4]
 80181d4:	f000 f814 	bl	8018200 <icmp_send_response>
}
 80181d8:	bf00      	nop
 80181da:	3708      	adds	r7, #8
 80181dc:	46bd      	mov	sp, r7
 80181de:	bd80      	pop	{r7, pc}

080181e0 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 80181e0:	b580      	push	{r7, lr}
 80181e2:	b082      	sub	sp, #8
 80181e4:	af00      	add	r7, sp, #0
 80181e6:	6078      	str	r0, [r7, #4]
 80181e8:	460b      	mov	r3, r1
 80181ea:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80181ec:	78fb      	ldrb	r3, [r7, #3]
 80181ee:	461a      	mov	r2, r3
 80181f0:	210b      	movs	r1, #11
 80181f2:	6878      	ldr	r0, [r7, #4]
 80181f4:	f000 f804 	bl	8018200 <icmp_send_response>
}
 80181f8:	bf00      	nop
 80181fa:	3708      	adds	r7, #8
 80181fc:	46bd      	mov	sp, r7
 80181fe:	bd80      	pop	{r7, pc}

08018200 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8018200:	b580      	push	{r7, lr}
 8018202:	b08c      	sub	sp, #48	; 0x30
 8018204:	af04      	add	r7, sp, #16
 8018206:	6078      	str	r0, [r7, #4]
 8018208:	460b      	mov	r3, r1
 801820a:	70fb      	strb	r3, [r7, #3]
 801820c:	4613      	mov	r3, r2
 801820e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8018210:	f44f 7220 	mov.w	r2, #640	; 0x280
 8018214:	2124      	movs	r1, #36	; 0x24
 8018216:	2022      	movs	r0, #34	; 0x22
 8018218:	f7f6 f84e 	bl	800e2b8 <pbuf_alloc>
 801821c:	61b8      	str	r0, [r7, #24]
                 PBUF_RAM);
  if (q == NULL) {
 801821e:	69bb      	ldr	r3, [r7, #24]
 8018220:	2b00      	cmp	r3, #0
 8018222:	d056      	beq.n	80182d2 <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8018224:	69bb      	ldr	r3, [r7, #24]
 8018226:	895b      	ldrh	r3, [r3, #10]
 8018228:	2b23      	cmp	r3, #35	; 0x23
 801822a:	d806      	bhi.n	801823a <icmp_send_response+0x3a>
 801822c:	4b2b      	ldr	r3, [pc, #172]	; (80182dc <icmp_send_response+0xdc>)
 801822e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8018232:	492b      	ldr	r1, [pc, #172]	; (80182e0 <icmp_send_response+0xe0>)
 8018234:	482b      	ldr	r0, [pc, #172]	; (80182e4 <icmp_send_response+0xe4>)
 8018236:	f001 fe63 	bl	8019f00 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801823a:	687b      	ldr	r3, [r7, #4]
 801823c:	685b      	ldr	r3, [r3, #4]
 801823e:	617b      	str	r3, [r7, #20]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8018240:	69bb      	ldr	r3, [r7, #24]
 8018242:	685b      	ldr	r3, [r3, #4]
 8018244:	613b      	str	r3, [r7, #16]
  icmphdr->type = type;
 8018246:	693b      	ldr	r3, [r7, #16]
 8018248:	78fa      	ldrb	r2, [r7, #3]
 801824a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801824c:	693b      	ldr	r3, [r7, #16]
 801824e:	78ba      	ldrb	r2, [r7, #2]
 8018250:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8018252:	693b      	ldr	r3, [r7, #16]
 8018254:	2200      	movs	r2, #0
 8018256:	711a      	strb	r2, [r3, #4]
 8018258:	2200      	movs	r2, #0
 801825a:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801825c:	693b      	ldr	r3, [r7, #16]
 801825e:	2200      	movs	r2, #0
 8018260:	719a      	strb	r2, [r3, #6]
 8018262:	2200      	movs	r2, #0
 8018264:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8018266:	69bb      	ldr	r3, [r7, #24]
 8018268:	685b      	ldr	r3, [r3, #4]
 801826a:	f103 0008 	add.w	r0, r3, #8
 801826e:	687b      	ldr	r3, [r7, #4]
 8018270:	685b      	ldr	r3, [r3, #4]
 8018272:	221c      	movs	r2, #28
 8018274:	4619      	mov	r1, r3
 8018276:	f001 fd4d 	bl	8019d14 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801827a:	697b      	ldr	r3, [r7, #20]
 801827c:	68db      	ldr	r3, [r3, #12]
 801827e:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8018280:	f107 030c 	add.w	r3, r7, #12
 8018284:	4618      	mov	r0, r3
 8018286:	f000 f82f 	bl	80182e8 <ip4_route>
 801828a:	61f8      	str	r0, [r7, #28]
#endif
  if (netif != NULL) {
 801828c:	69fb      	ldr	r3, [r7, #28]
 801828e:	2b00      	cmp	r3, #0
 8018290:	d01b      	beq.n	80182ca <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8018292:	693b      	ldr	r3, [r7, #16]
 8018294:	2200      	movs	r2, #0
 8018296:	709a      	strb	r2, [r3, #2]
 8018298:	2200      	movs	r2, #0
 801829a:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 801829c:	69bb      	ldr	r3, [r7, #24]
 801829e:	895b      	ldrh	r3, [r3, #10]
 80182a0:	4619      	mov	r1, r3
 80182a2:	6938      	ldr	r0, [r7, #16]
 80182a4:	f7f4 ff16 	bl	800d0d4 <inet_chksum>
 80182a8:	4603      	mov	r3, r0
 80182aa:	461a      	mov	r2, r3
 80182ac:	693b      	ldr	r3, [r7, #16]
 80182ae:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80182b0:	f107 020c 	add.w	r2, r7, #12
 80182b4:	69fb      	ldr	r3, [r7, #28]
 80182b6:	9302      	str	r3, [sp, #8]
 80182b8:	2301      	movs	r3, #1
 80182ba:	9301      	str	r3, [sp, #4]
 80182bc:	2300      	movs	r3, #0
 80182be:	9300      	str	r3, [sp, #0]
 80182c0:	23ff      	movs	r3, #255	; 0xff
 80182c2:	2100      	movs	r1, #0
 80182c4:	69b8      	ldr	r0, [r7, #24]
 80182c6:	f000 f9f7 	bl	80186b8 <ip4_output_if>
  }
  pbuf_free(q);
 80182ca:	69b8      	ldr	r0, [r7, #24]
 80182cc:	f7f6 fadc 	bl	800e888 <pbuf_free>
 80182d0:	e000      	b.n	80182d4 <icmp_send_response+0xd4>
    return;
 80182d2:	bf00      	nop
}
 80182d4:	3720      	adds	r7, #32
 80182d6:	46bd      	mov	sp, r7
 80182d8:	bd80      	pop	{r7, pc}
 80182da:	bf00      	nop
 80182dc:	0801e578 	.word	0x0801e578
 80182e0:	0801e644 	.word	0x0801e644
 80182e4:	0801e5e8 	.word	0x0801e5e8

080182e8 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80182e8:	b480      	push	{r7}
 80182ea:	b085      	sub	sp, #20
 80182ec:	af00      	add	r7, sp, #0
 80182ee:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 80182f0:	4b33      	ldr	r3, [pc, #204]	; (80183c0 <ip4_route+0xd8>)
 80182f2:	681b      	ldr	r3, [r3, #0]
 80182f4:	60fb      	str	r3, [r7, #12]
 80182f6:	e036      	b.n	8018366 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80182f8:	68fb      	ldr	r3, [r7, #12]
 80182fa:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80182fe:	f003 0301 	and.w	r3, r3, #1
 8018302:	b2db      	uxtb	r3, r3
 8018304:	2b00      	cmp	r3, #0
 8018306:	d02b      	beq.n	8018360 <ip4_route+0x78>
 8018308:	68fb      	ldr	r3, [r7, #12]
 801830a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801830e:	089b      	lsrs	r3, r3, #2
 8018310:	f003 0301 	and.w	r3, r3, #1
 8018314:	b2db      	uxtb	r3, r3
 8018316:	2b00      	cmp	r3, #0
 8018318:	d022      	beq.n	8018360 <ip4_route+0x78>
 801831a:	68fb      	ldr	r3, [r7, #12]
 801831c:	3304      	adds	r3, #4
 801831e:	681b      	ldr	r3, [r3, #0]
 8018320:	2b00      	cmp	r3, #0
 8018322:	d01d      	beq.n	8018360 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8018324:	687b      	ldr	r3, [r7, #4]
 8018326:	681a      	ldr	r2, [r3, #0]
 8018328:	68fb      	ldr	r3, [r7, #12]
 801832a:	3304      	adds	r3, #4
 801832c:	681b      	ldr	r3, [r3, #0]
 801832e:	405a      	eors	r2, r3
 8018330:	68fb      	ldr	r3, [r7, #12]
 8018332:	3308      	adds	r3, #8
 8018334:	681b      	ldr	r3, [r3, #0]
 8018336:	4013      	ands	r3, r2
 8018338:	2b00      	cmp	r3, #0
 801833a:	d101      	bne.n	8018340 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801833c:	68fb      	ldr	r3, [r7, #12]
 801833e:	e038      	b.n	80183b2 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8018340:	68fb      	ldr	r3, [r7, #12]
 8018342:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8018346:	f003 0302 	and.w	r3, r3, #2
 801834a:	2b00      	cmp	r3, #0
 801834c:	d108      	bne.n	8018360 <ip4_route+0x78>
 801834e:	687b      	ldr	r3, [r7, #4]
 8018350:	681a      	ldr	r2, [r3, #0]
 8018352:	68fb      	ldr	r3, [r7, #12]
 8018354:	330c      	adds	r3, #12
 8018356:	681b      	ldr	r3, [r3, #0]
 8018358:	429a      	cmp	r2, r3
 801835a:	d101      	bne.n	8018360 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801835c:	68fb      	ldr	r3, [r7, #12]
 801835e:	e028      	b.n	80183b2 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8018360:	68fb      	ldr	r3, [r7, #12]
 8018362:	681b      	ldr	r3, [r3, #0]
 8018364:	60fb      	str	r3, [r7, #12]
 8018366:	68fb      	ldr	r3, [r7, #12]
 8018368:	2b00      	cmp	r3, #0
 801836a:	d1c5      	bne.n	80182f8 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801836c:	4b15      	ldr	r3, [pc, #84]	; (80183c4 <ip4_route+0xdc>)
 801836e:	681b      	ldr	r3, [r3, #0]
 8018370:	2b00      	cmp	r3, #0
 8018372:	d01a      	beq.n	80183aa <ip4_route+0xc2>
 8018374:	4b13      	ldr	r3, [pc, #76]	; (80183c4 <ip4_route+0xdc>)
 8018376:	681b      	ldr	r3, [r3, #0]
 8018378:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801837c:	f003 0301 	and.w	r3, r3, #1
 8018380:	2b00      	cmp	r3, #0
 8018382:	d012      	beq.n	80183aa <ip4_route+0xc2>
 8018384:	4b0f      	ldr	r3, [pc, #60]	; (80183c4 <ip4_route+0xdc>)
 8018386:	681b      	ldr	r3, [r3, #0]
 8018388:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801838c:	f003 0304 	and.w	r3, r3, #4
 8018390:	2b00      	cmp	r3, #0
 8018392:	d00a      	beq.n	80183aa <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8018394:	4b0b      	ldr	r3, [pc, #44]	; (80183c4 <ip4_route+0xdc>)
 8018396:	681b      	ldr	r3, [r3, #0]
 8018398:	3304      	adds	r3, #4
 801839a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801839c:	2b00      	cmp	r3, #0
 801839e:	d004      	beq.n	80183aa <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80183a0:	687b      	ldr	r3, [r7, #4]
 80183a2:	681b      	ldr	r3, [r3, #0]
 80183a4:	b2db      	uxtb	r3, r3
 80183a6:	2b7f      	cmp	r3, #127	; 0x7f
 80183a8:	d101      	bne.n	80183ae <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80183aa:	2300      	movs	r3, #0
 80183ac:	e001      	b.n	80183b2 <ip4_route+0xca>
  }

  return netif_default;
 80183ae:	4b05      	ldr	r3, [pc, #20]	; (80183c4 <ip4_route+0xdc>)
 80183b0:	681b      	ldr	r3, [r3, #0]
}
 80183b2:	4618      	mov	r0, r3
 80183b4:	3714      	adds	r7, #20
 80183b6:	46bd      	mov	sp, r7
 80183b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183bc:	4770      	bx	lr
 80183be:	bf00      	nop
 80183c0:	20013ab8 	.word	0x20013ab8
 80183c4:	20013abc 	.word	0x20013abc

080183c8 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80183c8:	b580      	push	{r7, lr}
 80183ca:	b082      	sub	sp, #8
 80183cc:	af00      	add	r7, sp, #0
 80183ce:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80183d0:	687b      	ldr	r3, [r7, #4]
 80183d2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80183d6:	f003 0301 	and.w	r3, r3, #1
 80183da:	b2db      	uxtb	r3, r3
 80183dc:	2b00      	cmp	r3, #0
 80183de:	d016      	beq.n	801840e <ip4_input_accept+0x46>
 80183e0:	687b      	ldr	r3, [r7, #4]
 80183e2:	3304      	adds	r3, #4
 80183e4:	681b      	ldr	r3, [r3, #0]
 80183e6:	2b00      	cmp	r3, #0
 80183e8:	d011      	beq.n	801840e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80183ea:	4b0b      	ldr	r3, [pc, #44]	; (8018418 <ip4_input_accept+0x50>)
 80183ec:	695a      	ldr	r2, [r3, #20]
 80183ee:	687b      	ldr	r3, [r7, #4]
 80183f0:	3304      	adds	r3, #4
 80183f2:	681b      	ldr	r3, [r3, #0]
 80183f4:	429a      	cmp	r2, r3
 80183f6:	d008      	beq.n	801840a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80183f8:	4b07      	ldr	r3, [pc, #28]	; (8018418 <ip4_input_accept+0x50>)
 80183fa:	695b      	ldr	r3, [r3, #20]
 80183fc:	6879      	ldr	r1, [r7, #4]
 80183fe:	4618      	mov	r0, r3
 8018400:	f000 fa98 	bl	8018934 <ip4_addr_isbroadcast_u32>
 8018404:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8018406:	2b00      	cmp	r3, #0
 8018408:	d001      	beq.n	801840e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801840a:	2301      	movs	r3, #1
 801840c:	e000      	b.n	8018410 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801840e:	2300      	movs	r3, #0
}
 8018410:	4618      	mov	r0, r3
 8018412:	3708      	adds	r7, #8
 8018414:	46bd      	mov	sp, r7
 8018416:	bd80      	pop	{r7, pc}
 8018418:	2000a050 	.word	0x2000a050

0801841c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801841c:	b580      	push	{r7, lr}
 801841e:	b088      	sub	sp, #32
 8018420:	af00      	add	r7, sp, #0
 8018422:	6078      	str	r0, [r7, #4]
 8018424:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 8018426:	2301      	movs	r3, #1
 8018428:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801842a:	687b      	ldr	r3, [r7, #4]
 801842c:	685b      	ldr	r3, [r3, #4]
 801842e:	613b      	str	r3, [r7, #16]
  if (IPH_V(iphdr) != 4) {
 8018430:	693b      	ldr	r3, [r7, #16]
 8018432:	781b      	ldrb	r3, [r3, #0]
 8018434:	091b      	lsrs	r3, r3, #4
 8018436:	b2db      	uxtb	r3, r3
 8018438:	2b04      	cmp	r3, #4
 801843a:	d004      	beq.n	8018446 <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801843c:	6878      	ldr	r0, [r7, #4]
 801843e:	f7f6 fa23 	bl	800e888 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8018442:	2300      	movs	r3, #0
 8018444:	e130      	b.n	80186a8 <ip4_input+0x28c>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8018446:	693b      	ldr	r3, [r7, #16]
 8018448:	781b      	ldrb	r3, [r3, #0]
 801844a:	f003 030f 	and.w	r3, r3, #15
 801844e:	b2db      	uxtb	r3, r3
 8018450:	009b      	lsls	r3, r3, #2
 8018452:	b2db      	uxtb	r3, r3
 8018454:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8018456:	693b      	ldr	r3, [r7, #16]
 8018458:	885b      	ldrh	r3, [r3, #2]
 801845a:	b29b      	uxth	r3, r3
 801845c:	4618      	mov	r0, r3
 801845e:	f7f4 fcf1 	bl	800ce44 <lwip_htons>
 8018462:	4603      	mov	r3, r0
 8018464:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8018466:	687b      	ldr	r3, [r7, #4]
 8018468:	891b      	ldrh	r3, [r3, #8]
 801846a:	89ba      	ldrh	r2, [r7, #12]
 801846c:	429a      	cmp	r2, r3
 801846e:	d204      	bcs.n	801847a <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 8018470:	89bb      	ldrh	r3, [r7, #12]
 8018472:	4619      	mov	r1, r3
 8018474:	6878      	ldr	r0, [r7, #4]
 8018476:	f7f6 f881 	bl	800e57c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801847a:	687b      	ldr	r3, [r7, #4]
 801847c:	895b      	ldrh	r3, [r3, #10]
 801847e:	89fa      	ldrh	r2, [r7, #14]
 8018480:	429a      	cmp	r2, r3
 8018482:	d807      	bhi.n	8018494 <ip4_input+0x78>
 8018484:	687b      	ldr	r3, [r7, #4]
 8018486:	891b      	ldrh	r3, [r3, #8]
 8018488:	89ba      	ldrh	r2, [r7, #12]
 801848a:	429a      	cmp	r2, r3
 801848c:	d802      	bhi.n	8018494 <ip4_input+0x78>
 801848e:	89fb      	ldrh	r3, [r7, #14]
 8018490:	2b13      	cmp	r3, #19
 8018492:	d804      	bhi.n	801849e <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8018494:	6878      	ldr	r0, [r7, #4]
 8018496:	f7f6 f9f7 	bl	800e888 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801849a:	2300      	movs	r3, #0
 801849c:	e104      	b.n	80186a8 <ip4_input+0x28c>
  }

  /* verify checksum */
#if CHECKSUM_CHECK_IP
  IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_IP) {
    if (inet_chksum(iphdr, iphdr_hlen) != 0) {
 801849e:	89fb      	ldrh	r3, [r7, #14]
 80184a0:	4619      	mov	r1, r3
 80184a2:	6938      	ldr	r0, [r7, #16]
 80184a4:	f7f4 fe16 	bl	800d0d4 <inet_chksum>
 80184a8:	4603      	mov	r3, r0
 80184aa:	2b00      	cmp	r3, #0
 80184ac:	d004      	beq.n	80184b8 <ip4_input+0x9c>

      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("Checksum (0x%"X16_F") failed, IP packet dropped.\n", inet_chksum(iphdr, iphdr_hlen)));
      ip4_debug_print(p);
      pbuf_free(p);
 80184ae:	6878      	ldr	r0, [r7, #4]
 80184b0:	f7f6 f9ea 	bl	800e888 <pbuf_free>
      IP_STATS_INC(ip.chkerr);
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinhdrerrors);
      return ERR_OK;
 80184b4:	2300      	movs	r3, #0
 80184b6:	e0f7      	b.n	80186a8 <ip4_input+0x28c>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80184b8:	693b      	ldr	r3, [r7, #16]
 80184ba:	691b      	ldr	r3, [r3, #16]
 80184bc:	4a7c      	ldr	r2, [pc, #496]	; (80186b0 <ip4_input+0x294>)
 80184be:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80184c0:	693b      	ldr	r3, [r7, #16]
 80184c2:	68db      	ldr	r3, [r3, #12]
 80184c4:	4a7a      	ldr	r2, [pc, #488]	; (80186b0 <ip4_input+0x294>)
 80184c6:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80184c8:	4b79      	ldr	r3, [pc, #484]	; (80186b0 <ip4_input+0x294>)
 80184ca:	695b      	ldr	r3, [r3, #20]
 80184cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80184d0:	2be0      	cmp	r3, #224	; 0xe0
 80184d2:	d112      	bne.n	80184fa <ip4_input+0xde>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80184d4:	683b      	ldr	r3, [r7, #0]
 80184d6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80184da:	f003 0301 	and.w	r3, r3, #1
 80184de:	b2db      	uxtb	r3, r3
 80184e0:	2b00      	cmp	r3, #0
 80184e2:	d007      	beq.n	80184f4 <ip4_input+0xd8>
 80184e4:	683b      	ldr	r3, [r7, #0]
 80184e6:	3304      	adds	r3, #4
 80184e8:	681b      	ldr	r3, [r3, #0]
 80184ea:	2b00      	cmp	r3, #0
 80184ec:	d002      	beq.n	80184f4 <ip4_input+0xd8>
      netif = inp;
 80184ee:	683b      	ldr	r3, [r7, #0]
 80184f0:	61fb      	str	r3, [r7, #28]
 80184f2:	e02a      	b.n	801854a <ip4_input+0x12e>
    } else {
      netif = NULL;
 80184f4:	2300      	movs	r3, #0
 80184f6:	61fb      	str	r3, [r7, #28]
 80184f8:	e027      	b.n	801854a <ip4_input+0x12e>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 80184fa:	6838      	ldr	r0, [r7, #0]
 80184fc:	f7ff ff64 	bl	80183c8 <ip4_input_accept>
 8018500:	4603      	mov	r3, r0
 8018502:	2b00      	cmp	r3, #0
 8018504:	d002      	beq.n	801850c <ip4_input+0xf0>
      netif = inp;
 8018506:	683b      	ldr	r3, [r7, #0]
 8018508:	61fb      	str	r3, [r7, #28]
 801850a:	e01e      	b.n	801854a <ip4_input+0x12e>
    } else {
      netif = NULL;
 801850c:	2300      	movs	r3, #0
 801850e:	61fb      	str	r3, [r7, #28]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8018510:	4b67      	ldr	r3, [pc, #412]	; (80186b0 <ip4_input+0x294>)
 8018512:	695b      	ldr	r3, [r3, #20]
 8018514:	b2db      	uxtb	r3, r3
 8018516:	2b7f      	cmp	r3, #127	; 0x7f
 8018518:	d017      	beq.n	801854a <ip4_input+0x12e>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801851a:	4b66      	ldr	r3, [pc, #408]	; (80186b4 <ip4_input+0x298>)
 801851c:	681b      	ldr	r3, [r3, #0]
 801851e:	61fb      	str	r3, [r7, #28]
 8018520:	e00e      	b.n	8018540 <ip4_input+0x124>
          if (netif == inp) {
 8018522:	69fa      	ldr	r2, [r7, #28]
 8018524:	683b      	ldr	r3, [r7, #0]
 8018526:	429a      	cmp	r2, r3
 8018528:	d006      	beq.n	8018538 <ip4_input+0x11c>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801852a:	69f8      	ldr	r0, [r7, #28]
 801852c:	f7ff ff4c 	bl	80183c8 <ip4_input_accept>
 8018530:	4603      	mov	r3, r0
 8018532:	2b00      	cmp	r3, #0
 8018534:	d108      	bne.n	8018548 <ip4_input+0x12c>
 8018536:	e000      	b.n	801853a <ip4_input+0x11e>
            continue;
 8018538:	bf00      	nop
        NETIF_FOREACH(netif) {
 801853a:	69fb      	ldr	r3, [r7, #28]
 801853c:	681b      	ldr	r3, [r3, #0]
 801853e:	61fb      	str	r3, [r7, #28]
 8018540:	69fb      	ldr	r3, [r7, #28]
 8018542:	2b00      	cmp	r3, #0
 8018544:	d1ed      	bne.n	8018522 <ip4_input+0x106>
 8018546:	e000      	b.n	801854a <ip4_input+0x12e>
            break;
 8018548:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 801854a:	69fb      	ldr	r3, [r7, #28]
 801854c:	2b00      	cmp	r3, #0
 801854e:	d111      	bne.n	8018574 <ip4_input+0x158>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8018550:	693b      	ldr	r3, [r7, #16]
 8018552:	7a5b      	ldrb	r3, [r3, #9]
 8018554:	2b11      	cmp	r3, #17
 8018556:	d10d      	bne.n	8018574 <ip4_input+0x158>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 8018558:	89fb      	ldrh	r3, [r7, #14]
 801855a:	693a      	ldr	r2, [r7, #16]
 801855c:	4413      	add	r3, r2
 801855e:	61bb      	str	r3, [r7, #24]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8018560:	69bb      	ldr	r3, [r7, #24]
 8018562:	885b      	ldrh	r3, [r3, #2]
 8018564:	b29b      	uxth	r3, r3
 8018566:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 801856a:	d103      	bne.n	8018574 <ip4_input+0x158>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 801856c:	683b      	ldr	r3, [r7, #0]
 801856e:	61fb      	str	r3, [r7, #28]
        check_ip_src = 0;
 8018570:	2300      	movs	r3, #0
 8018572:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 8018574:	697b      	ldr	r3, [r7, #20]
 8018576:	2b00      	cmp	r3, #0
 8018578:	d017      	beq.n	80185aa <ip4_input+0x18e>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 801857a:	4b4d      	ldr	r3, [pc, #308]	; (80186b0 <ip4_input+0x294>)
 801857c:	691b      	ldr	r3, [r3, #16]
 801857e:	2b00      	cmp	r3, #0
 8018580:	d013      	beq.n	80185aa <ip4_input+0x18e>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8018582:	4b4b      	ldr	r3, [pc, #300]	; (80186b0 <ip4_input+0x294>)
 8018584:	691b      	ldr	r3, [r3, #16]
 8018586:	6839      	ldr	r1, [r7, #0]
 8018588:	4618      	mov	r0, r3
 801858a:	f000 f9d3 	bl	8018934 <ip4_addr_isbroadcast_u32>
 801858e:	4603      	mov	r3, r0
 8018590:	2b00      	cmp	r3, #0
 8018592:	d105      	bne.n	80185a0 <ip4_input+0x184>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8018594:	4b46      	ldr	r3, [pc, #280]	; (80186b0 <ip4_input+0x294>)
 8018596:	691b      	ldr	r3, [r3, #16]
 8018598:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801859c:	2be0      	cmp	r3, #224	; 0xe0
 801859e:	d104      	bne.n	80185aa <ip4_input+0x18e>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 80185a0:	6878      	ldr	r0, [r7, #4]
 80185a2:	f7f6 f971 	bl	800e888 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 80185a6:	2300      	movs	r3, #0
 80185a8:	e07e      	b.n	80186a8 <ip4_input+0x28c>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80185aa:	69fb      	ldr	r3, [r7, #28]
 80185ac:	2b00      	cmp	r3, #0
 80185ae:	d104      	bne.n	80185ba <ip4_input+0x19e>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80185b0:	6878      	ldr	r0, [r7, #4]
 80185b2:	f7f6 f969 	bl	800e888 <pbuf_free>
    return ERR_OK;
 80185b6:	2300      	movs	r3, #0
 80185b8:	e076      	b.n	80186a8 <ip4_input+0x28c>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80185ba:	693b      	ldr	r3, [r7, #16]
 80185bc:	88db      	ldrh	r3, [r3, #6]
 80185be:	b29b      	uxth	r3, r3
 80185c0:	461a      	mov	r2, r3
 80185c2:	f64f 733f 	movw	r3, #65343	; 0xff3f
 80185c6:	4013      	ands	r3, r2
 80185c8:	2b00      	cmp	r3, #0
 80185ca:	d00b      	beq.n	80185e4 <ip4_input+0x1c8>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80185cc:	6878      	ldr	r0, [r7, #4]
 80185ce:	f000 fe21 	bl	8019214 <ip4_reass>
 80185d2:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80185d4:	687b      	ldr	r3, [r7, #4]
 80185d6:	2b00      	cmp	r3, #0
 80185d8:	d101      	bne.n	80185de <ip4_input+0x1c2>
      return ERR_OK;
 80185da:	2300      	movs	r3, #0
 80185dc:	e064      	b.n	80186a8 <ip4_input+0x28c>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80185de:	687b      	ldr	r3, [r7, #4]
 80185e0:	685b      	ldr	r3, [r3, #4]
 80185e2:	613b      	str	r3, [r7, #16]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80185e4:	4a32      	ldr	r2, [pc, #200]	; (80186b0 <ip4_input+0x294>)
 80185e6:	69fb      	ldr	r3, [r7, #28]
 80185e8:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80185ea:	4a31      	ldr	r2, [pc, #196]	; (80186b0 <ip4_input+0x294>)
 80185ec:	683b      	ldr	r3, [r7, #0]
 80185ee:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80185f0:	4a2f      	ldr	r2, [pc, #188]	; (80186b0 <ip4_input+0x294>)
 80185f2:	693b      	ldr	r3, [r7, #16]
 80185f4:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80185f6:	693b      	ldr	r3, [r7, #16]
 80185f8:	781b      	ldrb	r3, [r3, #0]
 80185fa:	f003 030f 	and.w	r3, r3, #15
 80185fe:	b2db      	uxtb	r3, r3
 8018600:	009b      	lsls	r3, r3, #2
 8018602:	b2db      	uxtb	r3, r3
 8018604:	b29a      	uxth	r2, r3
 8018606:	4b2a      	ldr	r3, [pc, #168]	; (80186b0 <ip4_input+0x294>)
 8018608:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801860a:	89fb      	ldrh	r3, [r7, #14]
 801860c:	4619      	mov	r1, r3
 801860e:	6878      	ldr	r0, [r7, #4]
 8018610:	f7f6 f8b4 	bl	800e77c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8018614:	693b      	ldr	r3, [r7, #16]
 8018616:	7a5b      	ldrb	r3, [r3, #9]
 8018618:	2b11      	cmp	r3, #17
 801861a:	d006      	beq.n	801862a <ip4_input+0x20e>
 801861c:	2b11      	cmp	r3, #17
 801861e:	dc13      	bgt.n	8018648 <ip4_input+0x22c>
 8018620:	2b01      	cmp	r3, #1
 8018622:	d00c      	beq.n	801863e <ip4_input+0x222>
 8018624:	2b06      	cmp	r3, #6
 8018626:	d005      	beq.n	8018634 <ip4_input+0x218>
 8018628:	e00e      	b.n	8018648 <ip4_input+0x22c>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801862a:	6839      	ldr	r1, [r7, #0]
 801862c:	6878      	ldr	r0, [r7, #4]
 801862e:	f7fc f939 	bl	80148a4 <udp_input>
        break;
 8018632:	e026      	b.n	8018682 <ip4_input+0x266>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8018634:	6839      	ldr	r1, [r7, #0]
 8018636:	6878      	ldr	r0, [r7, #4]
 8018638:	f7f8 f902 	bl	8010840 <tcp_input>
        break;
 801863c:	e021      	b.n	8018682 <ip4_input+0x266>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801863e:	6839      	ldr	r1, [r7, #0]
 8018640:	6878      	ldr	r0, [r7, #4]
 8018642:	f7ff fc8f 	bl	8017f64 <icmp_input>
        break;
 8018646:	e01c      	b.n	8018682 <ip4_input+0x266>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8018648:	4b19      	ldr	r3, [pc, #100]	; (80186b0 <ip4_input+0x294>)
 801864a:	695b      	ldr	r3, [r3, #20]
 801864c:	69f9      	ldr	r1, [r7, #28]
 801864e:	4618      	mov	r0, r3
 8018650:	f000 f970 	bl	8018934 <ip4_addr_isbroadcast_u32>
 8018654:	4603      	mov	r3, r0
 8018656:	2b00      	cmp	r3, #0
 8018658:	d10f      	bne.n	801867a <ip4_input+0x25e>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801865a:	4b15      	ldr	r3, [pc, #84]	; (80186b0 <ip4_input+0x294>)
 801865c:	695b      	ldr	r3, [r3, #20]
 801865e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8018662:	2be0      	cmp	r3, #224	; 0xe0
 8018664:	d009      	beq.n	801867a <ip4_input+0x25e>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8018666:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801866a:	4619      	mov	r1, r3
 801866c:	6878      	ldr	r0, [r7, #4]
 801866e:	f7f6 f8f8 	bl	800e862 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8018672:	2102      	movs	r1, #2
 8018674:	6878      	ldr	r0, [r7, #4]
 8018676:	f7ff fda3 	bl	80181c0 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801867a:	6878      	ldr	r0, [r7, #4]
 801867c:	f7f6 f904 	bl	800e888 <pbuf_free>
        break;
 8018680:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8018682:	4b0b      	ldr	r3, [pc, #44]	; (80186b0 <ip4_input+0x294>)
 8018684:	2200      	movs	r2, #0
 8018686:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8018688:	4b09      	ldr	r3, [pc, #36]	; (80186b0 <ip4_input+0x294>)
 801868a:	2200      	movs	r2, #0
 801868c:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801868e:	4b08      	ldr	r3, [pc, #32]	; (80186b0 <ip4_input+0x294>)
 8018690:	2200      	movs	r2, #0
 8018692:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8018694:	4b06      	ldr	r3, [pc, #24]	; (80186b0 <ip4_input+0x294>)
 8018696:	2200      	movs	r2, #0
 8018698:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801869a:	4b05      	ldr	r3, [pc, #20]	; (80186b0 <ip4_input+0x294>)
 801869c:	2200      	movs	r2, #0
 801869e:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80186a0:	4b03      	ldr	r3, [pc, #12]	; (80186b0 <ip4_input+0x294>)
 80186a2:	2200      	movs	r2, #0
 80186a4:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80186a6:	2300      	movs	r3, #0
}
 80186a8:	4618      	mov	r0, r3
 80186aa:	3720      	adds	r7, #32
 80186ac:	46bd      	mov	sp, r7
 80186ae:	bd80      	pop	{r7, pc}
 80186b0:	2000a050 	.word	0x2000a050
 80186b4:	20013ab8 	.word	0x20013ab8

080186b8 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 80186b8:	b580      	push	{r7, lr}
 80186ba:	b08a      	sub	sp, #40	; 0x28
 80186bc:	af04      	add	r7, sp, #16
 80186be:	60f8      	str	r0, [r7, #12]
 80186c0:	60b9      	str	r1, [r7, #8]
 80186c2:	607a      	str	r2, [r7, #4]
 80186c4:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80186c6:	68bb      	ldr	r3, [r7, #8]
 80186c8:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80186ca:	687b      	ldr	r3, [r7, #4]
 80186cc:	2b00      	cmp	r3, #0
 80186ce:	d009      	beq.n	80186e4 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80186d0:	68bb      	ldr	r3, [r7, #8]
 80186d2:	2b00      	cmp	r3, #0
 80186d4:	d003      	beq.n	80186de <ip4_output_if+0x26>
 80186d6:	68bb      	ldr	r3, [r7, #8]
 80186d8:	681b      	ldr	r3, [r3, #0]
 80186da:	2b00      	cmp	r3, #0
 80186dc:	d102      	bne.n	80186e4 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80186de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80186e0:	3304      	adds	r3, #4
 80186e2:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80186e4:	78fa      	ldrb	r2, [r7, #3]
 80186e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80186e8:	9302      	str	r3, [sp, #8]
 80186ea:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80186ee:	9301      	str	r3, [sp, #4]
 80186f0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80186f4:	9300      	str	r3, [sp, #0]
 80186f6:	4613      	mov	r3, r2
 80186f8:	687a      	ldr	r2, [r7, #4]
 80186fa:	6979      	ldr	r1, [r7, #20]
 80186fc:	68f8      	ldr	r0, [r7, #12]
 80186fe:	f000 f805 	bl	801870c <ip4_output_if_src>
 8018702:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8018704:	4618      	mov	r0, r3
 8018706:	3718      	adds	r7, #24
 8018708:	46bd      	mov	sp, r7
 801870a:	bd80      	pop	{r7, pc}

0801870c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801870c:	b580      	push	{r7, lr}
 801870e:	b088      	sub	sp, #32
 8018710:	af00      	add	r7, sp, #0
 8018712:	60f8      	str	r0, [r7, #12]
 8018714:	60b9      	str	r1, [r7, #8]
 8018716:	607a      	str	r2, [r7, #4]
 8018718:	70fb      	strb	r3, [r7, #3]
{
#endif /* IP_OPTIONS_SEND */
  struct ip_hdr *iphdr;
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
 801871a:	2300      	movs	r3, #0
 801871c:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801871e:	68fb      	ldr	r3, [r7, #12]
 8018720:	7b9b      	ldrb	r3, [r3, #14]
 8018722:	2b01      	cmp	r3, #1
 8018724:	d006      	beq.n	8018734 <ip4_output_if_src+0x28>
 8018726:	4b7d      	ldr	r3, [pc, #500]	; (801891c <ip4_output_if_src+0x210>)
 8018728:	f44f 7255 	mov.w	r2, #852	; 0x354
 801872c:	497c      	ldr	r1, [pc, #496]	; (8018920 <ip4_output_if_src+0x214>)
 801872e:	487d      	ldr	r0, [pc, #500]	; (8018924 <ip4_output_if_src+0x218>)
 8018730:	f001 fbe6 	bl	8019f00 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8018734:	687b      	ldr	r3, [r7, #4]
 8018736:	2b00      	cmp	r3, #0
 8018738:	f000 80c4 	beq.w	80188c4 <ip4_output_if_src+0x1b8>
    u16_t ip_hlen = IP_HLEN;
 801873c:	2314      	movs	r3, #20
 801873e:	82fb      	strh	r3, [r7, #22]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8018740:	2114      	movs	r1, #20
 8018742:	68f8      	ldr	r0, [r7, #12]
 8018744:	f7f6 f80a 	bl	800e75c <pbuf_add_header>
 8018748:	4603      	mov	r3, r0
 801874a:	2b00      	cmp	r3, #0
 801874c:	d002      	beq.n	8018754 <ip4_output_if_src+0x48>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801874e:	f06f 0301 	mvn.w	r3, #1
 8018752:	e0df      	b.n	8018914 <ip4_output_if_src+0x208>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8018754:	68fb      	ldr	r3, [r7, #12]
 8018756:	685b      	ldr	r3, [r3, #4]
 8018758:	61bb      	str	r3, [r7, #24]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801875a:	68fb      	ldr	r3, [r7, #12]
 801875c:	895b      	ldrh	r3, [r3, #10]
 801875e:	2b13      	cmp	r3, #19
 8018760:	d806      	bhi.n	8018770 <ip4_output_if_src+0x64>
 8018762:	4b6e      	ldr	r3, [pc, #440]	; (801891c <ip4_output_if_src+0x210>)
 8018764:	f44f 7262 	mov.w	r2, #904	; 0x388
 8018768:	496f      	ldr	r1, [pc, #444]	; (8018928 <ip4_output_if_src+0x21c>)
 801876a:	486e      	ldr	r0, [pc, #440]	; (8018924 <ip4_output_if_src+0x218>)
 801876c:	f001 fbc8 	bl	8019f00 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8018770:	69bb      	ldr	r3, [r7, #24]
 8018772:	78fa      	ldrb	r2, [r7, #3]
 8018774:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8018776:	69bb      	ldr	r3, [r7, #24]
 8018778:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801877c:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
 801877e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8018782:	78fb      	ldrb	r3, [r7, #3]
 8018784:	021b      	lsls	r3, r3, #8
 8018786:	4313      	orrs	r3, r2
 8018788:	021b      	lsls	r3, r3, #8
 801878a:	b21a      	sxth	r2, r3
 801878c:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 8018790:	78fb      	ldrb	r3, [r7, #3]
 8018792:	021b      	lsls	r3, r3, #8
 8018794:	430b      	orrs	r3, r1
 8018796:	121b      	asrs	r3, r3, #8
 8018798:	b21b      	sxth	r3, r3
 801879a:	b2db      	uxtb	r3, r3
 801879c:	b21b      	sxth	r3, r3
 801879e:	4313      	orrs	r3, r2
 80187a0:	b21b      	sxth	r3, r3
 80187a2:	b29b      	uxth	r3, r3
 80187a4:	461a      	mov	r2, r3
 80187a6:	69fb      	ldr	r3, [r7, #28]
 80187a8:	4413      	add	r3, r2
 80187aa:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 80187ac:	687b      	ldr	r3, [r7, #4]
 80187ae:	681a      	ldr	r2, [r3, #0]
 80187b0:	69bb      	ldr	r3, [r7, #24]
 80187b2:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
 80187b4:	69bb      	ldr	r3, [r7, #24]
 80187b6:	691b      	ldr	r3, [r3, #16]
 80187b8:	b29b      	uxth	r3, r3
 80187ba:	69fa      	ldr	r2, [r7, #28]
 80187bc:	4413      	add	r3, r2
 80187be:	61fb      	str	r3, [r7, #28]
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
 80187c0:	69bb      	ldr	r3, [r7, #24]
 80187c2:	691b      	ldr	r3, [r3, #16]
 80187c4:	0c1b      	lsrs	r3, r3, #16
 80187c6:	69fa      	ldr	r2, [r7, #28]
 80187c8:	4413      	add	r3, r2
 80187ca:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80187cc:	8afb      	ldrh	r3, [r7, #22]
 80187ce:	089b      	lsrs	r3, r3, #2
 80187d0:	b29b      	uxth	r3, r3
 80187d2:	b2db      	uxtb	r3, r3
 80187d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80187d8:	b2da      	uxtb	r2, r3
 80187da:	69bb      	ldr	r3, [r7, #24]
 80187dc:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 80187de:	69bb      	ldr	r3, [r7, #24]
 80187e0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80187e4:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
 80187e6:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80187ea:	69bb      	ldr	r3, [r7, #24]
 80187ec:	781b      	ldrb	r3, [r3, #0]
 80187ee:	021b      	lsls	r3, r3, #8
 80187f0:	4313      	orrs	r3, r2
 80187f2:	021b      	lsls	r3, r3, #8
 80187f4:	b21a      	sxth	r2, r3
 80187f6:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 80187fa:	69bb      	ldr	r3, [r7, #24]
 80187fc:	781b      	ldrb	r3, [r3, #0]
 80187fe:	021b      	lsls	r3, r3, #8
 8018800:	430b      	orrs	r3, r1
 8018802:	121b      	asrs	r3, r3, #8
 8018804:	b21b      	sxth	r3, r3
 8018806:	b2db      	uxtb	r3, r3
 8018808:	b21b      	sxth	r3, r3
 801880a:	4313      	orrs	r3, r2
 801880c:	b21b      	sxth	r3, r3
 801880e:	b29b      	uxth	r3, r3
 8018810:	461a      	mov	r2, r3
 8018812:	69fb      	ldr	r3, [r7, #28]
 8018814:	4413      	add	r3, r2
 8018816:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8018818:	68fb      	ldr	r3, [r7, #12]
 801881a:	891b      	ldrh	r3, [r3, #8]
 801881c:	4618      	mov	r0, r3
 801881e:	f7f4 fb11 	bl	800ce44 <lwip_htons>
 8018822:	4603      	mov	r3, r0
 8018824:	461a      	mov	r2, r3
 8018826:	69bb      	ldr	r3, [r7, #24]
 8018828:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
 801882a:	69bb      	ldr	r3, [r7, #24]
 801882c:	885b      	ldrh	r3, [r3, #2]
 801882e:	b29b      	uxth	r3, r3
 8018830:	461a      	mov	r2, r3
 8018832:	69fb      	ldr	r3, [r7, #28]
 8018834:	4413      	add	r3, r2
 8018836:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8018838:	69bb      	ldr	r3, [r7, #24]
 801883a:	2200      	movs	r2, #0
 801883c:	719a      	strb	r2, [r3, #6]
 801883e:	2200      	movs	r2, #0
 8018840:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8018842:	4b3a      	ldr	r3, [pc, #232]	; (801892c <ip4_output_if_src+0x220>)
 8018844:	881b      	ldrh	r3, [r3, #0]
 8018846:	4618      	mov	r0, r3
 8018848:	f7f4 fafc 	bl	800ce44 <lwip_htons>
 801884c:	4603      	mov	r3, r0
 801884e:	461a      	mov	r2, r3
 8018850:	69bb      	ldr	r3, [r7, #24]
 8018852:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
 8018854:	69bb      	ldr	r3, [r7, #24]
 8018856:	889b      	ldrh	r3, [r3, #4]
 8018858:	b29b      	uxth	r3, r3
 801885a:	461a      	mov	r2, r3
 801885c:	69fb      	ldr	r3, [r7, #28]
 801885e:	4413      	add	r3, r2
 8018860:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8018862:	4b32      	ldr	r3, [pc, #200]	; (801892c <ip4_output_if_src+0x220>)
 8018864:	881b      	ldrh	r3, [r3, #0]
 8018866:	3301      	adds	r3, #1
 8018868:	b29a      	uxth	r2, r3
 801886a:	4b30      	ldr	r3, [pc, #192]	; (801892c <ip4_output_if_src+0x220>)
 801886c:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801886e:	68bb      	ldr	r3, [r7, #8]
 8018870:	2b00      	cmp	r3, #0
 8018872:	d104      	bne.n	801887e <ip4_output_if_src+0x172>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8018874:	4b2e      	ldr	r3, [pc, #184]	; (8018930 <ip4_output_if_src+0x224>)
 8018876:	681a      	ldr	r2, [r3, #0]
 8018878:	69bb      	ldr	r3, [r7, #24]
 801887a:	60da      	str	r2, [r3, #12]
 801887c:	e003      	b.n	8018886 <ip4_output_if_src+0x17a>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801887e:	68bb      	ldr	r3, [r7, #8]
 8018880:	681a      	ldr	r2, [r3, #0]
 8018882:	69bb      	ldr	r3, [r7, #24]
 8018884:	60da      	str	r2, [r3, #12]
    }

#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->src) & 0xFFFF;
 8018886:	69bb      	ldr	r3, [r7, #24]
 8018888:	68db      	ldr	r3, [r3, #12]
 801888a:	b29b      	uxth	r3, r3
 801888c:	69fa      	ldr	r2, [r7, #28]
 801888e:	4413      	add	r3, r2
 8018890:	61fb      	str	r3, [r7, #28]
    chk_sum += ip4_addr_get_u32(&iphdr->src) >> 16;
 8018892:	69bb      	ldr	r3, [r7, #24]
 8018894:	68db      	ldr	r3, [r3, #12]
 8018896:	0c1b      	lsrs	r3, r3, #16
 8018898:	69fa      	ldr	r2, [r7, #28]
 801889a:	4413      	add	r3, r2
 801889c:	61fb      	str	r3, [r7, #28]
    chk_sum = (chk_sum >> 16) + (chk_sum & 0xFFFF);
 801889e:	69fb      	ldr	r3, [r7, #28]
 80188a0:	0c1a      	lsrs	r2, r3, #16
 80188a2:	69fb      	ldr	r3, [r7, #28]
 80188a4:	b29b      	uxth	r3, r3
 80188a6:	4413      	add	r3, r2
 80188a8:	61fb      	str	r3, [r7, #28]
    chk_sum = (chk_sum >> 16) + chk_sum;
 80188aa:	69fb      	ldr	r3, [r7, #28]
 80188ac:	0c1b      	lsrs	r3, r3, #16
 80188ae:	69fa      	ldr	r2, [r7, #28]
 80188b0:	4413      	add	r3, r2
 80188b2:	61fb      	str	r3, [r7, #28]
    chk_sum = ~chk_sum;
 80188b4:	69fb      	ldr	r3, [r7, #28]
 80188b6:	43db      	mvns	r3, r3
 80188b8:	61fb      	str	r3, [r7, #28]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_IP) {
      iphdr->_chksum = (u16_t)chk_sum; /* network order */
 80188ba:	69fb      	ldr	r3, [r7, #28]
 80188bc:	b29a      	uxth	r2, r3
 80188be:	69bb      	ldr	r3, [r7, #24]
 80188c0:	815a      	strh	r2, [r3, #10]
 80188c2:	e00f      	b.n	80188e4 <ip4_output_if_src+0x1d8>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 80188c4:	68fb      	ldr	r3, [r7, #12]
 80188c6:	895b      	ldrh	r3, [r3, #10]
 80188c8:	2b13      	cmp	r3, #19
 80188ca:	d802      	bhi.n	80188d2 <ip4_output_if_src+0x1c6>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80188cc:	f06f 0301 	mvn.w	r3, #1
 80188d0:	e020      	b.n	8018914 <ip4_output_if_src+0x208>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80188d2:	68fb      	ldr	r3, [r7, #12]
 80188d4:	685b      	ldr	r3, [r3, #4]
 80188d6:	61bb      	str	r3, [r7, #24]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80188d8:	69bb      	ldr	r3, [r7, #24]
 80188da:	691b      	ldr	r3, [r3, #16]
 80188dc:	613b      	str	r3, [r7, #16]
    dest = &dest_addr;
 80188de:	f107 0310 	add.w	r3, r7, #16
 80188e2:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80188e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80188e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80188e8:	2b00      	cmp	r3, #0
 80188ea:	d00c      	beq.n	8018906 <ip4_output_if_src+0x1fa>
 80188ec:	68fb      	ldr	r3, [r7, #12]
 80188ee:	891a      	ldrh	r2, [r3, #8]
 80188f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80188f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80188f4:	429a      	cmp	r2, r3
 80188f6:	d906      	bls.n	8018906 <ip4_output_if_src+0x1fa>
    return ip4_frag(p, netif, dest);
 80188f8:	687a      	ldr	r2, [r7, #4]
 80188fa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80188fc:	68f8      	ldr	r0, [r7, #12]
 80188fe:	f000 fe85 	bl	801960c <ip4_frag>
 8018902:	4603      	mov	r3, r0
 8018904:	e006      	b.n	8018914 <ip4_output_if_src+0x208>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8018906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018908:	695b      	ldr	r3, [r3, #20]
 801890a:	687a      	ldr	r2, [r7, #4]
 801890c:	68f9      	ldr	r1, [r7, #12]
 801890e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018910:	4798      	blx	r3
 8018912:	4603      	mov	r3, r0
}
 8018914:	4618      	mov	r0, r3
 8018916:	3720      	adds	r7, #32
 8018918:	46bd      	mov	sp, r7
 801891a:	bd80      	pop	{r7, pc}
 801891c:	0801e670 	.word	0x0801e670
 8018920:	0801e6a4 	.word	0x0801e6a4
 8018924:	0801e6b0 	.word	0x0801e6b0
 8018928:	0801e6d8 	.word	0x0801e6d8
 801892c:	20013c4e 	.word	0x20013c4e
 8018930:	0806a428 	.word	0x0806a428

08018934 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8018934:	b480      	push	{r7}
 8018936:	b085      	sub	sp, #20
 8018938:	af00      	add	r7, sp, #0
 801893a:	6078      	str	r0, [r7, #4]
 801893c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801893e:	687b      	ldr	r3, [r7, #4]
 8018940:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8018942:	687b      	ldr	r3, [r7, #4]
 8018944:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018948:	d002      	beq.n	8018950 <ip4_addr_isbroadcast_u32+0x1c>
 801894a:	687b      	ldr	r3, [r7, #4]
 801894c:	2b00      	cmp	r3, #0
 801894e:	d101      	bne.n	8018954 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8018950:	2301      	movs	r3, #1
 8018952:	e02a      	b.n	80189aa <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8018954:	683b      	ldr	r3, [r7, #0]
 8018956:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801895a:	f003 0302 	and.w	r3, r3, #2
 801895e:	2b00      	cmp	r3, #0
 8018960:	d101      	bne.n	8018966 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8018962:	2300      	movs	r3, #0
 8018964:	e021      	b.n	80189aa <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8018966:	683b      	ldr	r3, [r7, #0]
 8018968:	3304      	adds	r3, #4
 801896a:	681b      	ldr	r3, [r3, #0]
 801896c:	687a      	ldr	r2, [r7, #4]
 801896e:	429a      	cmp	r2, r3
 8018970:	d101      	bne.n	8018976 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8018972:	2300      	movs	r3, #0
 8018974:	e019      	b.n	80189aa <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8018976:	68fa      	ldr	r2, [r7, #12]
 8018978:	683b      	ldr	r3, [r7, #0]
 801897a:	3304      	adds	r3, #4
 801897c:	681b      	ldr	r3, [r3, #0]
 801897e:	405a      	eors	r2, r3
 8018980:	683b      	ldr	r3, [r7, #0]
 8018982:	3308      	adds	r3, #8
 8018984:	681b      	ldr	r3, [r3, #0]
 8018986:	4013      	ands	r3, r2
 8018988:	2b00      	cmp	r3, #0
 801898a:	d10d      	bne.n	80189a8 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801898c:	683b      	ldr	r3, [r7, #0]
 801898e:	3308      	adds	r3, #8
 8018990:	681b      	ldr	r3, [r3, #0]
 8018992:	43da      	mvns	r2, r3
 8018994:	687b      	ldr	r3, [r7, #4]
 8018996:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8018998:	683b      	ldr	r3, [r7, #0]
 801899a:	3308      	adds	r3, #8
 801899c:	681b      	ldr	r3, [r3, #0]
 801899e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80189a0:	429a      	cmp	r2, r3
 80189a2:	d101      	bne.n	80189a8 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80189a4:	2301      	movs	r3, #1
 80189a6:	e000      	b.n	80189aa <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80189a8:	2300      	movs	r3, #0
  }
}
 80189aa:	4618      	mov	r0, r3
 80189ac:	3714      	adds	r7, #20
 80189ae:	46bd      	mov	sp, r7
 80189b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189b4:	4770      	bx	lr
	...

080189b8 <ip4addr_aton>:
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int
ip4addr_aton(const char *cp, ip4_addr_t *addr)
{
 80189b8:	b580      	push	{r7, lr}
 80189ba:	b08a      	sub	sp, #40	; 0x28
 80189bc:	af00      	add	r7, sp, #0
 80189be:	6078      	str	r0, [r7, #4]
 80189c0:	6039      	str	r1, [r7, #0]
  u32_t val;
  u8_t base;
  char c;
  u32_t parts[4];
  u32_t *pp = parts;
 80189c2:	f107 030c 	add.w	r3, r7, #12
 80189c6:	61fb      	str	r3, [r7, #28]

  c = *cp;
 80189c8:	687b      	ldr	r3, [r7, #4]
 80189ca:	781b      	ldrb	r3, [r3, #0]
 80189cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    /*
     * Collect number up to ``.''.
     * Values are specified as for C:
     * 0x=hex, 0=octal, 1-9=decimal.
     */
    if (!lwip_isdigit(c)) {
 80189d0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80189d4:	3301      	adds	r3, #1
 80189d6:	4a89      	ldr	r2, [pc, #548]	; (8018bfc <ip4addr_aton+0x244>)
 80189d8:	4413      	add	r3, r2
 80189da:	781b      	ldrb	r3, [r3, #0]
 80189dc:	f003 0304 	and.w	r3, r3, #4
 80189e0:	2b00      	cmp	r3, #0
 80189e2:	d101      	bne.n	80189e8 <ip4addr_aton+0x30>
      return 0;
 80189e4:	2300      	movs	r3, #0
 80189e6:	e105      	b.n	8018bf4 <ip4addr_aton+0x23c>
    }
    val = 0;
 80189e8:	2300      	movs	r3, #0
 80189ea:	627b      	str	r3, [r7, #36]	; 0x24
    base = 10;
 80189ec:	230a      	movs	r3, #10
 80189ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (c == '0') {
 80189f2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80189f6:	2b30      	cmp	r3, #48	; 0x30
 80189f8:	d11c      	bne.n	8018a34 <ip4addr_aton+0x7c>
      c = *++cp;
 80189fa:	687b      	ldr	r3, [r7, #4]
 80189fc:	3301      	adds	r3, #1
 80189fe:	607b      	str	r3, [r7, #4]
 8018a00:	687b      	ldr	r3, [r7, #4]
 8018a02:	781b      	ldrb	r3, [r3, #0]
 8018a04:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      if (c == 'x' || c == 'X') {
 8018a08:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8018a0c:	2b78      	cmp	r3, #120	; 0x78
 8018a0e:	d003      	beq.n	8018a18 <ip4addr_aton+0x60>
 8018a10:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8018a14:	2b58      	cmp	r3, #88	; 0x58
 8018a16:	d10a      	bne.n	8018a2e <ip4addr_aton+0x76>
        base = 16;
 8018a18:	2310      	movs	r3, #16
 8018a1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        c = *++cp;
 8018a1e:	687b      	ldr	r3, [r7, #4]
 8018a20:	3301      	adds	r3, #1
 8018a22:	607b      	str	r3, [r7, #4]
 8018a24:	687b      	ldr	r3, [r7, #4]
 8018a26:	781b      	ldrb	r3, [r3, #0]
 8018a28:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8018a2c:	e002      	b.n	8018a34 <ip4addr_aton+0x7c>
      } else {
        base = 8;
 8018a2e:	2308      	movs	r3, #8
 8018a30:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      }
    }
    for (;;) {
      if (lwip_isdigit(c)) {
 8018a34:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8018a38:	3301      	adds	r3, #1
 8018a3a:	4a70      	ldr	r2, [pc, #448]	; (8018bfc <ip4addr_aton+0x244>)
 8018a3c:	4413      	add	r3, r2
 8018a3e:	781b      	ldrb	r3, [r3, #0]
 8018a40:	f003 0304 	and.w	r3, r3, #4
 8018a44:	2b00      	cmp	r3, #0
 8018a46:	d011      	beq.n	8018a6c <ip4addr_aton+0xb4>
        val = (val * base) + (u32_t)(c - '0');
 8018a48:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8018a4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018a4e:	fb03 f202 	mul.w	r2, r3, r2
 8018a52:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8018a56:	4413      	add	r3, r2
 8018a58:	3b30      	subs	r3, #48	; 0x30
 8018a5a:	627b      	str	r3, [r7, #36]	; 0x24
        c = *++cp;
 8018a5c:	687b      	ldr	r3, [r7, #4]
 8018a5e:	3301      	adds	r3, #1
 8018a60:	607b      	str	r3, [r7, #4]
 8018a62:	687b      	ldr	r3, [r7, #4]
 8018a64:	781b      	ldrb	r3, [r3, #0]
 8018a66:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8018a6a:	e7e3      	b.n	8018a34 <ip4addr_aton+0x7c>
      } else if (base == 16 && lwip_isxdigit(c)) {
 8018a6c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8018a70:	2b10      	cmp	r3, #16
 8018a72:	d127      	bne.n	8018ac4 <ip4addr_aton+0x10c>
 8018a74:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8018a78:	3301      	adds	r3, #1
 8018a7a:	4a60      	ldr	r2, [pc, #384]	; (8018bfc <ip4addr_aton+0x244>)
 8018a7c:	4413      	add	r3, r2
 8018a7e:	781b      	ldrb	r3, [r3, #0]
 8018a80:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8018a84:	2b00      	cmp	r3, #0
 8018a86:	d01d      	beq.n	8018ac4 <ip4addr_aton+0x10c>
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 8018a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a8a:	011b      	lsls	r3, r3, #4
 8018a8c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8018a90:	f102 010a 	add.w	r1, r2, #10
 8018a94:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8018a98:	3201      	adds	r2, #1
 8018a9a:	4858      	ldr	r0, [pc, #352]	; (8018bfc <ip4addr_aton+0x244>)
 8018a9c:	4402      	add	r2, r0
 8018a9e:	7812      	ldrb	r2, [r2, #0]
 8018aa0:	f002 0203 	and.w	r2, r2, #3
 8018aa4:	2a02      	cmp	r2, #2
 8018aa6:	d101      	bne.n	8018aac <ip4addr_aton+0xf4>
 8018aa8:	2261      	movs	r2, #97	; 0x61
 8018aaa:	e000      	b.n	8018aae <ip4addr_aton+0xf6>
 8018aac:	2241      	movs	r2, #65	; 0x41
 8018aae:	1a8a      	subs	r2, r1, r2
 8018ab0:	4313      	orrs	r3, r2
 8018ab2:	627b      	str	r3, [r7, #36]	; 0x24
        c = *++cp;
 8018ab4:	687b      	ldr	r3, [r7, #4]
 8018ab6:	3301      	adds	r3, #1
 8018ab8:	607b      	str	r3, [r7, #4]
 8018aba:	687b      	ldr	r3, [r7, #4]
 8018abc:	781b      	ldrb	r3, [r3, #0]
 8018abe:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      if (lwip_isdigit(c)) {
 8018ac2:	e7b7      	b.n	8018a34 <ip4addr_aton+0x7c>
      } else {
        break;
      }
    }
    if (c == '.') {
 8018ac4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8018ac8:	2b2e      	cmp	r3, #46	; 0x2e
 8018aca:	d114      	bne.n	8018af6 <ip4addr_aton+0x13e>
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
 8018acc:	f107 030c 	add.w	r3, r7, #12
 8018ad0:	330c      	adds	r3, #12
 8018ad2:	69fa      	ldr	r2, [r7, #28]
 8018ad4:	429a      	cmp	r2, r3
 8018ad6:	d301      	bcc.n	8018adc <ip4addr_aton+0x124>
        return 0;
 8018ad8:	2300      	movs	r3, #0
 8018ada:	e08b      	b.n	8018bf4 <ip4addr_aton+0x23c>
      }
      *pp++ = val;
 8018adc:	69fb      	ldr	r3, [r7, #28]
 8018ade:	1d1a      	adds	r2, r3, #4
 8018ae0:	61fa      	str	r2, [r7, #28]
 8018ae2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018ae4:	601a      	str	r2, [r3, #0]
      c = *++cp;
 8018ae6:	687b      	ldr	r3, [r7, #4]
 8018ae8:	3301      	adds	r3, #1
 8018aea:	607b      	str	r3, [r7, #4]
 8018aec:	687b      	ldr	r3, [r7, #4]
 8018aee:	781b      	ldrb	r3, [r3, #0]
 8018af0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    if (!lwip_isdigit(c)) {
 8018af4:	e76c      	b.n	80189d0 <ip4addr_aton+0x18>
    } else {
      break;
 8018af6:	bf00      	nop
    }
  }
  /*
   * Check for trailing characters.
   */
  if (c != '\0' && !lwip_isspace(c)) {
 8018af8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8018afc:	2b00      	cmp	r3, #0
 8018afe:	d00b      	beq.n	8018b18 <ip4addr_aton+0x160>
 8018b00:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8018b04:	3301      	adds	r3, #1
 8018b06:	4a3d      	ldr	r2, [pc, #244]	; (8018bfc <ip4addr_aton+0x244>)
 8018b08:	4413      	add	r3, r2
 8018b0a:	781b      	ldrb	r3, [r3, #0]
 8018b0c:	f003 0308 	and.w	r3, r3, #8
 8018b10:	2b00      	cmp	r3, #0
 8018b12:	d101      	bne.n	8018b18 <ip4addr_aton+0x160>
    return 0;
 8018b14:	2300      	movs	r3, #0
 8018b16:	e06d      	b.n	8018bf4 <ip4addr_aton+0x23c>
  }
  /*
   * Concoct the address according to
   * the number of parts specified.
   */
  switch (pp - parts + 1) {
 8018b18:	f107 030c 	add.w	r3, r7, #12
 8018b1c:	69fa      	ldr	r2, [r7, #28]
 8018b1e:	1ad3      	subs	r3, r2, r3
 8018b20:	109b      	asrs	r3, r3, #2
 8018b22:	3301      	adds	r3, #1
 8018b24:	2b04      	cmp	r3, #4
 8018b26:	d853      	bhi.n	8018bd0 <ip4addr_aton+0x218>
 8018b28:	a201      	add	r2, pc, #4	; (adr r2, 8018b30 <ip4addr_aton+0x178>)
 8018b2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018b2e:	bf00      	nop
 8018b30:	08018b45 	.word	0x08018b45
 8018b34:	08018bdf 	.word	0x08018bdf
 8018b38:	08018b49 	.word	0x08018b49
 8018b3c:	08018b6b 	.word	0x08018b6b
 8018b40:	08018b99 	.word	0x08018b99

    case 0:
      return 0;       /* initial nondigit */
 8018b44:	2300      	movs	r3, #0
 8018b46:	e055      	b.n	8018bf4 <ip4addr_aton+0x23c>

    case 1:             /* a -- 32 bits */
      break;

    case 2:             /* a.b -- 8.24 bits */
      if (val > 0xffffffUL) {
 8018b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018b4a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8018b4e:	d301      	bcc.n	8018b54 <ip4addr_aton+0x19c>
        return 0;
 8018b50:	2300      	movs	r3, #0
 8018b52:	e04f      	b.n	8018bf4 <ip4addr_aton+0x23c>
      }
      if (parts[0] > 0xff) {
 8018b54:	68fb      	ldr	r3, [r7, #12]
 8018b56:	2bff      	cmp	r3, #255	; 0xff
 8018b58:	d901      	bls.n	8018b5e <ip4addr_aton+0x1a6>
        return 0;
 8018b5a:	2300      	movs	r3, #0
 8018b5c:	e04a      	b.n	8018bf4 <ip4addr_aton+0x23c>
      }
      val |= parts[0] << 24;
 8018b5e:	68fb      	ldr	r3, [r7, #12]
 8018b60:	061b      	lsls	r3, r3, #24
 8018b62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018b64:	4313      	orrs	r3, r2
 8018b66:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8018b68:	e03a      	b.n	8018be0 <ip4addr_aton+0x228>

    case 3:             /* a.b.c -- 8.8.16 bits */
      if (val > 0xffff) {
 8018b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018b6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8018b70:	d301      	bcc.n	8018b76 <ip4addr_aton+0x1be>
        return 0;
 8018b72:	2300      	movs	r3, #0
 8018b74:	e03e      	b.n	8018bf4 <ip4addr_aton+0x23c>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff)) {
 8018b76:	68fb      	ldr	r3, [r7, #12]
 8018b78:	2bff      	cmp	r3, #255	; 0xff
 8018b7a:	d802      	bhi.n	8018b82 <ip4addr_aton+0x1ca>
 8018b7c:	693b      	ldr	r3, [r7, #16]
 8018b7e:	2bff      	cmp	r3, #255	; 0xff
 8018b80:	d901      	bls.n	8018b86 <ip4addr_aton+0x1ce>
        return 0;
 8018b82:	2300      	movs	r3, #0
 8018b84:	e036      	b.n	8018bf4 <ip4addr_aton+0x23c>
      }
      val |= (parts[0] << 24) | (parts[1] << 16);
 8018b86:	68fb      	ldr	r3, [r7, #12]
 8018b88:	061a      	lsls	r2, r3, #24
 8018b8a:	693b      	ldr	r3, [r7, #16]
 8018b8c:	041b      	lsls	r3, r3, #16
 8018b8e:	4313      	orrs	r3, r2
 8018b90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018b92:	4313      	orrs	r3, r2
 8018b94:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8018b96:	e023      	b.n	8018be0 <ip4addr_aton+0x228>

    case 4:             /* a.b.c.d -- 8.8.8.8 bits */
      if (val > 0xff) {
 8018b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018b9a:	2bff      	cmp	r3, #255	; 0xff
 8018b9c:	d901      	bls.n	8018ba2 <ip4addr_aton+0x1ea>
        return 0;
 8018b9e:	2300      	movs	r3, #0
 8018ba0:	e028      	b.n	8018bf4 <ip4addr_aton+0x23c>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff)) {
 8018ba2:	68fb      	ldr	r3, [r7, #12]
 8018ba4:	2bff      	cmp	r3, #255	; 0xff
 8018ba6:	d805      	bhi.n	8018bb4 <ip4addr_aton+0x1fc>
 8018ba8:	693b      	ldr	r3, [r7, #16]
 8018baa:	2bff      	cmp	r3, #255	; 0xff
 8018bac:	d802      	bhi.n	8018bb4 <ip4addr_aton+0x1fc>
 8018bae:	697b      	ldr	r3, [r7, #20]
 8018bb0:	2bff      	cmp	r3, #255	; 0xff
 8018bb2:	d901      	bls.n	8018bb8 <ip4addr_aton+0x200>
        return 0;
 8018bb4:	2300      	movs	r3, #0
 8018bb6:	e01d      	b.n	8018bf4 <ip4addr_aton+0x23c>
      }
      val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 8018bb8:	68fb      	ldr	r3, [r7, #12]
 8018bba:	061a      	lsls	r2, r3, #24
 8018bbc:	693b      	ldr	r3, [r7, #16]
 8018bbe:	041b      	lsls	r3, r3, #16
 8018bc0:	431a      	orrs	r2, r3
 8018bc2:	697b      	ldr	r3, [r7, #20]
 8018bc4:	021b      	lsls	r3, r3, #8
 8018bc6:	4313      	orrs	r3, r2
 8018bc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018bca:	4313      	orrs	r3, r2
 8018bcc:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8018bce:	e007      	b.n	8018be0 <ip4addr_aton+0x228>
    default:
      LWIP_ASSERT("unhandled", 0);
 8018bd0:	4b0b      	ldr	r3, [pc, #44]	; (8018c00 <ip4addr_aton+0x248>)
 8018bd2:	22f9      	movs	r2, #249	; 0xf9
 8018bd4:	490b      	ldr	r1, [pc, #44]	; (8018c04 <ip4addr_aton+0x24c>)
 8018bd6:	480c      	ldr	r0, [pc, #48]	; (8018c08 <ip4addr_aton+0x250>)
 8018bd8:	f001 f992 	bl	8019f00 <iprintf>
      break;
 8018bdc:	e000      	b.n	8018be0 <ip4addr_aton+0x228>
      break;
 8018bde:	bf00      	nop
  }
  if (addr) {
 8018be0:	683b      	ldr	r3, [r7, #0]
 8018be2:	2b00      	cmp	r3, #0
 8018be4:	d005      	beq.n	8018bf2 <ip4addr_aton+0x23a>
    ip4_addr_set_u32(addr, lwip_htonl(val));
 8018be6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018be8:	f7f4 f941 	bl	800ce6e <lwip_htonl>
 8018bec:	4602      	mov	r2, r0
 8018bee:	683b      	ldr	r3, [r7, #0]
 8018bf0:	601a      	str	r2, [r3, #0]
  }
  return 1;
 8018bf2:	2301      	movs	r3, #1
}
 8018bf4:	4618      	mov	r0, r3
 8018bf6:	3728      	adds	r7, #40	; 0x28
 8018bf8:	46bd      	mov	sp, r7
 8018bfa:	bd80      	pop	{r7, pc}
 8018bfc:	0806a444 	.word	0x0806a444
 8018c00:	0801e708 	.word	0x0801e708
 8018c04:	0801e744 	.word	0x0801e744
 8018c08:	0801e750 	.word	0x0801e750

08018c0c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8018c0c:	b580      	push	{r7, lr}
 8018c0e:	b084      	sub	sp, #16
 8018c10:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8018c12:	2300      	movs	r3, #0
 8018c14:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8018c16:	4b12      	ldr	r3, [pc, #72]	; (8018c60 <ip_reass_tmr+0x54>)
 8018c18:	681b      	ldr	r3, [r3, #0]
 8018c1a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8018c1c:	e018      	b.n	8018c50 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8018c1e:	68fb      	ldr	r3, [r7, #12]
 8018c20:	7fdb      	ldrb	r3, [r3, #31]
 8018c22:	2b00      	cmp	r3, #0
 8018c24:	d00b      	beq.n	8018c3e <ip_reass_tmr+0x32>
      r->timer--;
 8018c26:	68fb      	ldr	r3, [r7, #12]
 8018c28:	7fdb      	ldrb	r3, [r3, #31]
 8018c2a:	3b01      	subs	r3, #1
 8018c2c:	b2da      	uxtb	r2, r3
 8018c2e:	68fb      	ldr	r3, [r7, #12]
 8018c30:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8018c32:	68fb      	ldr	r3, [r7, #12]
 8018c34:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8018c36:	68fb      	ldr	r3, [r7, #12]
 8018c38:	681b      	ldr	r3, [r3, #0]
 8018c3a:	60fb      	str	r3, [r7, #12]
 8018c3c:	e008      	b.n	8018c50 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8018c3e:	68fb      	ldr	r3, [r7, #12]
 8018c40:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8018c42:	68fb      	ldr	r3, [r7, #12]
 8018c44:	681b      	ldr	r3, [r3, #0]
 8018c46:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8018c48:	68b9      	ldr	r1, [r7, #8]
 8018c4a:	6878      	ldr	r0, [r7, #4]
 8018c4c:	f000 f80a 	bl	8018c64 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8018c50:	68fb      	ldr	r3, [r7, #12]
 8018c52:	2b00      	cmp	r3, #0
 8018c54:	d1e3      	bne.n	8018c1e <ip_reass_tmr+0x12>
    }
  }
}
 8018c56:	bf00      	nop
 8018c58:	bf00      	nop
 8018c5a:	3710      	adds	r7, #16
 8018c5c:	46bd      	mov	sp, r7
 8018c5e:	bd80      	pop	{r7, pc}
 8018c60:	20013c50 	.word	0x20013c50

08018c64 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8018c64:	b580      	push	{r7, lr}
 8018c66:	b088      	sub	sp, #32
 8018c68:	af00      	add	r7, sp, #0
 8018c6a:	6078      	str	r0, [r7, #4]
 8018c6c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8018c6e:	2300      	movs	r3, #0
 8018c70:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8018c72:	683a      	ldr	r2, [r7, #0]
 8018c74:	687b      	ldr	r3, [r7, #4]
 8018c76:	429a      	cmp	r2, r3
 8018c78:	d105      	bne.n	8018c86 <ip_reass_free_complete_datagram+0x22>
 8018c7a:	4b45      	ldr	r3, [pc, #276]	; (8018d90 <ip_reass_free_complete_datagram+0x12c>)
 8018c7c:	22ab      	movs	r2, #171	; 0xab
 8018c7e:	4945      	ldr	r1, [pc, #276]	; (8018d94 <ip_reass_free_complete_datagram+0x130>)
 8018c80:	4845      	ldr	r0, [pc, #276]	; (8018d98 <ip_reass_free_complete_datagram+0x134>)
 8018c82:	f001 f93d 	bl	8019f00 <iprintf>
  if (prev != NULL) {
 8018c86:	683b      	ldr	r3, [r7, #0]
 8018c88:	2b00      	cmp	r3, #0
 8018c8a:	d00a      	beq.n	8018ca2 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8018c8c:	683b      	ldr	r3, [r7, #0]
 8018c8e:	681b      	ldr	r3, [r3, #0]
 8018c90:	687a      	ldr	r2, [r7, #4]
 8018c92:	429a      	cmp	r2, r3
 8018c94:	d005      	beq.n	8018ca2 <ip_reass_free_complete_datagram+0x3e>
 8018c96:	4b3e      	ldr	r3, [pc, #248]	; (8018d90 <ip_reass_free_complete_datagram+0x12c>)
 8018c98:	22ad      	movs	r2, #173	; 0xad
 8018c9a:	4940      	ldr	r1, [pc, #256]	; (8018d9c <ip_reass_free_complete_datagram+0x138>)
 8018c9c:	483e      	ldr	r0, [pc, #248]	; (8018d98 <ip_reass_free_complete_datagram+0x134>)
 8018c9e:	f001 f92f 	bl	8019f00 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8018ca2:	687b      	ldr	r3, [r7, #4]
 8018ca4:	685b      	ldr	r3, [r3, #4]
 8018ca6:	685b      	ldr	r3, [r3, #4]
 8018ca8:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8018caa:	697b      	ldr	r3, [r7, #20]
 8018cac:	889b      	ldrh	r3, [r3, #4]
 8018cae:	b29b      	uxth	r3, r3
 8018cb0:	2b00      	cmp	r3, #0
 8018cb2:	d12a      	bne.n	8018d0a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8018cb4:	687b      	ldr	r3, [r7, #4]
 8018cb6:	685b      	ldr	r3, [r3, #4]
 8018cb8:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8018cba:	697b      	ldr	r3, [r7, #20]
 8018cbc:	681a      	ldr	r2, [r3, #0]
 8018cbe:	687b      	ldr	r3, [r7, #4]
 8018cc0:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8018cc2:	69bb      	ldr	r3, [r7, #24]
 8018cc4:	6858      	ldr	r0, [r3, #4]
 8018cc6:	687b      	ldr	r3, [r7, #4]
 8018cc8:	3308      	adds	r3, #8
 8018cca:	2214      	movs	r2, #20
 8018ccc:	4619      	mov	r1, r3
 8018cce:	f001 f821 	bl	8019d14 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8018cd2:	2101      	movs	r1, #1
 8018cd4:	69b8      	ldr	r0, [r7, #24]
 8018cd6:	f7ff fa83 	bl	80181e0 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8018cda:	69b8      	ldr	r0, [r7, #24]
 8018cdc:	f7f5 fe62 	bl	800e9a4 <pbuf_clen>
 8018ce0:	4603      	mov	r3, r0
 8018ce2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8018ce4:	8bfa      	ldrh	r2, [r7, #30]
 8018ce6:	8a7b      	ldrh	r3, [r7, #18]
 8018ce8:	4413      	add	r3, r2
 8018cea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8018cee:	db05      	blt.n	8018cfc <ip_reass_free_complete_datagram+0x98>
 8018cf0:	4b27      	ldr	r3, [pc, #156]	; (8018d90 <ip_reass_free_complete_datagram+0x12c>)
 8018cf2:	22bc      	movs	r2, #188	; 0xbc
 8018cf4:	492a      	ldr	r1, [pc, #168]	; (8018da0 <ip_reass_free_complete_datagram+0x13c>)
 8018cf6:	4828      	ldr	r0, [pc, #160]	; (8018d98 <ip_reass_free_complete_datagram+0x134>)
 8018cf8:	f001 f902 	bl	8019f00 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8018cfc:	8bfa      	ldrh	r2, [r7, #30]
 8018cfe:	8a7b      	ldrh	r3, [r7, #18]
 8018d00:	4413      	add	r3, r2
 8018d02:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8018d04:	69b8      	ldr	r0, [r7, #24]
 8018d06:	f7f5 fdbf 	bl	800e888 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8018d0a:	687b      	ldr	r3, [r7, #4]
 8018d0c:	685b      	ldr	r3, [r3, #4]
 8018d0e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8018d10:	e01f      	b.n	8018d52 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8018d12:	69bb      	ldr	r3, [r7, #24]
 8018d14:	685b      	ldr	r3, [r3, #4]
 8018d16:	617b      	str	r3, [r7, #20]
    pcur = p;
 8018d18:	69bb      	ldr	r3, [r7, #24]
 8018d1a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8018d1c:	697b      	ldr	r3, [r7, #20]
 8018d1e:	681b      	ldr	r3, [r3, #0]
 8018d20:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8018d22:	68f8      	ldr	r0, [r7, #12]
 8018d24:	f7f5 fe3e 	bl	800e9a4 <pbuf_clen>
 8018d28:	4603      	mov	r3, r0
 8018d2a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8018d2c:	8bfa      	ldrh	r2, [r7, #30]
 8018d2e:	8a7b      	ldrh	r3, [r7, #18]
 8018d30:	4413      	add	r3, r2
 8018d32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8018d36:	db05      	blt.n	8018d44 <ip_reass_free_complete_datagram+0xe0>
 8018d38:	4b15      	ldr	r3, [pc, #84]	; (8018d90 <ip_reass_free_complete_datagram+0x12c>)
 8018d3a:	22cc      	movs	r2, #204	; 0xcc
 8018d3c:	4918      	ldr	r1, [pc, #96]	; (8018da0 <ip_reass_free_complete_datagram+0x13c>)
 8018d3e:	4816      	ldr	r0, [pc, #88]	; (8018d98 <ip_reass_free_complete_datagram+0x134>)
 8018d40:	f001 f8de 	bl	8019f00 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8018d44:	8bfa      	ldrh	r2, [r7, #30]
 8018d46:	8a7b      	ldrh	r3, [r7, #18]
 8018d48:	4413      	add	r3, r2
 8018d4a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8018d4c:	68f8      	ldr	r0, [r7, #12]
 8018d4e:	f7f5 fd9b 	bl	800e888 <pbuf_free>
  while (p != NULL) {
 8018d52:	69bb      	ldr	r3, [r7, #24]
 8018d54:	2b00      	cmp	r3, #0
 8018d56:	d1dc      	bne.n	8018d12 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8018d58:	6839      	ldr	r1, [r7, #0]
 8018d5a:	6878      	ldr	r0, [r7, #4]
 8018d5c:	f000 f8c2 	bl	8018ee4 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8018d60:	4b10      	ldr	r3, [pc, #64]	; (8018da4 <ip_reass_free_complete_datagram+0x140>)
 8018d62:	881b      	ldrh	r3, [r3, #0]
 8018d64:	8bfa      	ldrh	r2, [r7, #30]
 8018d66:	429a      	cmp	r2, r3
 8018d68:	d905      	bls.n	8018d76 <ip_reass_free_complete_datagram+0x112>
 8018d6a:	4b09      	ldr	r3, [pc, #36]	; (8018d90 <ip_reass_free_complete_datagram+0x12c>)
 8018d6c:	22d2      	movs	r2, #210	; 0xd2
 8018d6e:	490e      	ldr	r1, [pc, #56]	; (8018da8 <ip_reass_free_complete_datagram+0x144>)
 8018d70:	4809      	ldr	r0, [pc, #36]	; (8018d98 <ip_reass_free_complete_datagram+0x134>)
 8018d72:	f001 f8c5 	bl	8019f00 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8018d76:	4b0b      	ldr	r3, [pc, #44]	; (8018da4 <ip_reass_free_complete_datagram+0x140>)
 8018d78:	881a      	ldrh	r2, [r3, #0]
 8018d7a:	8bfb      	ldrh	r3, [r7, #30]
 8018d7c:	1ad3      	subs	r3, r2, r3
 8018d7e:	b29a      	uxth	r2, r3
 8018d80:	4b08      	ldr	r3, [pc, #32]	; (8018da4 <ip_reass_free_complete_datagram+0x140>)
 8018d82:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8018d84:	8bfb      	ldrh	r3, [r7, #30]
}
 8018d86:	4618      	mov	r0, r3
 8018d88:	3720      	adds	r7, #32
 8018d8a:	46bd      	mov	sp, r7
 8018d8c:	bd80      	pop	{r7, pc}
 8018d8e:	bf00      	nop
 8018d90:	0801e778 	.word	0x0801e778
 8018d94:	0801e7b4 	.word	0x0801e7b4
 8018d98:	0801e7c0 	.word	0x0801e7c0
 8018d9c:	0801e7e8 	.word	0x0801e7e8
 8018da0:	0801e7fc 	.word	0x0801e7fc
 8018da4:	20013c54 	.word	0x20013c54
 8018da8:	0801e81c 	.word	0x0801e81c

08018dac <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8018dac:	b580      	push	{r7, lr}
 8018dae:	b08a      	sub	sp, #40	; 0x28
 8018db0:	af00      	add	r7, sp, #0
 8018db2:	6078      	str	r0, [r7, #4]
 8018db4:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8018db6:	2300      	movs	r3, #0
 8018db8:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8018dba:	2300      	movs	r3, #0
 8018dbc:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8018dbe:	2300      	movs	r3, #0
 8018dc0:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8018dc2:	2300      	movs	r3, #0
 8018dc4:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8018dc6:	2300      	movs	r3, #0
 8018dc8:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8018dca:	4b28      	ldr	r3, [pc, #160]	; (8018e6c <ip_reass_remove_oldest_datagram+0xc0>)
 8018dcc:	681b      	ldr	r3, [r3, #0]
 8018dce:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8018dd0:	e030      	b.n	8018e34 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8018dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018dd4:	695a      	ldr	r2, [r3, #20]
 8018dd6:	687b      	ldr	r3, [r7, #4]
 8018dd8:	68db      	ldr	r3, [r3, #12]
 8018dda:	429a      	cmp	r2, r3
 8018ddc:	d10c      	bne.n	8018df8 <ip_reass_remove_oldest_datagram+0x4c>
 8018dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018de0:	699a      	ldr	r2, [r3, #24]
 8018de2:	687b      	ldr	r3, [r7, #4]
 8018de4:	691b      	ldr	r3, [r3, #16]
 8018de6:	429a      	cmp	r2, r3
 8018de8:	d106      	bne.n	8018df8 <ip_reass_remove_oldest_datagram+0x4c>
 8018dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018dec:	899a      	ldrh	r2, [r3, #12]
 8018dee:	687b      	ldr	r3, [r7, #4]
 8018df0:	889b      	ldrh	r3, [r3, #4]
 8018df2:	b29b      	uxth	r3, r3
 8018df4:	429a      	cmp	r2, r3
 8018df6:	d014      	beq.n	8018e22 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8018df8:	693b      	ldr	r3, [r7, #16]
 8018dfa:	3301      	adds	r3, #1
 8018dfc:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8018dfe:	6a3b      	ldr	r3, [r7, #32]
 8018e00:	2b00      	cmp	r3, #0
 8018e02:	d104      	bne.n	8018e0e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8018e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018e06:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8018e08:	69fb      	ldr	r3, [r7, #28]
 8018e0a:	61bb      	str	r3, [r7, #24]
 8018e0c:	e009      	b.n	8018e22 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8018e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018e10:	7fda      	ldrb	r2, [r3, #31]
 8018e12:	6a3b      	ldr	r3, [r7, #32]
 8018e14:	7fdb      	ldrb	r3, [r3, #31]
 8018e16:	429a      	cmp	r2, r3
 8018e18:	d803      	bhi.n	8018e22 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8018e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018e1c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8018e1e:	69fb      	ldr	r3, [r7, #28]
 8018e20:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8018e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018e24:	681b      	ldr	r3, [r3, #0]
 8018e26:	2b00      	cmp	r3, #0
 8018e28:	d001      	beq.n	8018e2e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8018e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018e2c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8018e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018e30:	681b      	ldr	r3, [r3, #0]
 8018e32:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8018e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018e36:	2b00      	cmp	r3, #0
 8018e38:	d1cb      	bne.n	8018dd2 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8018e3a:	6a3b      	ldr	r3, [r7, #32]
 8018e3c:	2b00      	cmp	r3, #0
 8018e3e:	d008      	beq.n	8018e52 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8018e40:	69b9      	ldr	r1, [r7, #24]
 8018e42:	6a38      	ldr	r0, [r7, #32]
 8018e44:	f7ff ff0e 	bl	8018c64 <ip_reass_free_complete_datagram>
 8018e48:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8018e4a:	697a      	ldr	r2, [r7, #20]
 8018e4c:	68fb      	ldr	r3, [r7, #12]
 8018e4e:	4413      	add	r3, r2
 8018e50:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8018e52:	697a      	ldr	r2, [r7, #20]
 8018e54:	683b      	ldr	r3, [r7, #0]
 8018e56:	429a      	cmp	r2, r3
 8018e58:	da02      	bge.n	8018e60 <ip_reass_remove_oldest_datagram+0xb4>
 8018e5a:	693b      	ldr	r3, [r7, #16]
 8018e5c:	2b01      	cmp	r3, #1
 8018e5e:	dcac      	bgt.n	8018dba <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8018e60:	697b      	ldr	r3, [r7, #20]
}
 8018e62:	4618      	mov	r0, r3
 8018e64:	3728      	adds	r7, #40	; 0x28
 8018e66:	46bd      	mov	sp, r7
 8018e68:	bd80      	pop	{r7, pc}
 8018e6a:	bf00      	nop
 8018e6c:	20013c50 	.word	0x20013c50

08018e70 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8018e70:	b580      	push	{r7, lr}
 8018e72:	b084      	sub	sp, #16
 8018e74:	af00      	add	r7, sp, #0
 8018e76:	6078      	str	r0, [r7, #4]
 8018e78:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8018e7a:	2004      	movs	r0, #4
 8018e7c:	f7f4 fe10 	bl	800daa0 <memp_malloc>
 8018e80:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8018e82:	68fb      	ldr	r3, [r7, #12]
 8018e84:	2b00      	cmp	r3, #0
 8018e86:	d110      	bne.n	8018eaa <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8018e88:	6839      	ldr	r1, [r7, #0]
 8018e8a:	6878      	ldr	r0, [r7, #4]
 8018e8c:	f7ff ff8e 	bl	8018dac <ip_reass_remove_oldest_datagram>
 8018e90:	4602      	mov	r2, r0
 8018e92:	683b      	ldr	r3, [r7, #0]
 8018e94:	4293      	cmp	r3, r2
 8018e96:	dc03      	bgt.n	8018ea0 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8018e98:	2004      	movs	r0, #4
 8018e9a:	f7f4 fe01 	bl	800daa0 <memp_malloc>
 8018e9e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8018ea0:	68fb      	ldr	r3, [r7, #12]
 8018ea2:	2b00      	cmp	r3, #0
 8018ea4:	d101      	bne.n	8018eaa <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8018ea6:	2300      	movs	r3, #0
 8018ea8:	e016      	b.n	8018ed8 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8018eaa:	2220      	movs	r2, #32
 8018eac:	2100      	movs	r1, #0
 8018eae:	68f8      	ldr	r0, [r7, #12]
 8018eb0:	f000 ff3e 	bl	8019d30 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8018eb4:	68fb      	ldr	r3, [r7, #12]
 8018eb6:	220f      	movs	r2, #15
 8018eb8:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8018eba:	4b09      	ldr	r3, [pc, #36]	; (8018ee0 <ip_reass_enqueue_new_datagram+0x70>)
 8018ebc:	681a      	ldr	r2, [r3, #0]
 8018ebe:	68fb      	ldr	r3, [r7, #12]
 8018ec0:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8018ec2:	4a07      	ldr	r2, [pc, #28]	; (8018ee0 <ip_reass_enqueue_new_datagram+0x70>)
 8018ec4:	68fb      	ldr	r3, [r7, #12]
 8018ec6:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8018ec8:	68fb      	ldr	r3, [r7, #12]
 8018eca:	3308      	adds	r3, #8
 8018ecc:	2214      	movs	r2, #20
 8018ece:	6879      	ldr	r1, [r7, #4]
 8018ed0:	4618      	mov	r0, r3
 8018ed2:	f000 ff1f 	bl	8019d14 <memcpy>
  return ipr;
 8018ed6:	68fb      	ldr	r3, [r7, #12]
}
 8018ed8:	4618      	mov	r0, r3
 8018eda:	3710      	adds	r7, #16
 8018edc:	46bd      	mov	sp, r7
 8018ede:	bd80      	pop	{r7, pc}
 8018ee0:	20013c50 	.word	0x20013c50

08018ee4 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8018ee4:	b580      	push	{r7, lr}
 8018ee6:	b082      	sub	sp, #8
 8018ee8:	af00      	add	r7, sp, #0
 8018eea:	6078      	str	r0, [r7, #4]
 8018eec:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8018eee:	4b10      	ldr	r3, [pc, #64]	; (8018f30 <ip_reass_dequeue_datagram+0x4c>)
 8018ef0:	681b      	ldr	r3, [r3, #0]
 8018ef2:	687a      	ldr	r2, [r7, #4]
 8018ef4:	429a      	cmp	r2, r3
 8018ef6:	d104      	bne.n	8018f02 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8018ef8:	687b      	ldr	r3, [r7, #4]
 8018efa:	681b      	ldr	r3, [r3, #0]
 8018efc:	4a0c      	ldr	r2, [pc, #48]	; (8018f30 <ip_reass_dequeue_datagram+0x4c>)
 8018efe:	6013      	str	r3, [r2, #0]
 8018f00:	e00d      	b.n	8018f1e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8018f02:	683b      	ldr	r3, [r7, #0]
 8018f04:	2b00      	cmp	r3, #0
 8018f06:	d106      	bne.n	8018f16 <ip_reass_dequeue_datagram+0x32>
 8018f08:	4b0a      	ldr	r3, [pc, #40]	; (8018f34 <ip_reass_dequeue_datagram+0x50>)
 8018f0a:	f240 1245 	movw	r2, #325	; 0x145
 8018f0e:	490a      	ldr	r1, [pc, #40]	; (8018f38 <ip_reass_dequeue_datagram+0x54>)
 8018f10:	480a      	ldr	r0, [pc, #40]	; (8018f3c <ip_reass_dequeue_datagram+0x58>)
 8018f12:	f000 fff5 	bl	8019f00 <iprintf>
    prev->next = ipr->next;
 8018f16:	687b      	ldr	r3, [r7, #4]
 8018f18:	681a      	ldr	r2, [r3, #0]
 8018f1a:	683b      	ldr	r3, [r7, #0]
 8018f1c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8018f1e:	6879      	ldr	r1, [r7, #4]
 8018f20:	2004      	movs	r0, #4
 8018f22:	f7f4 fe0f 	bl	800db44 <memp_free>
}
 8018f26:	bf00      	nop
 8018f28:	3708      	adds	r7, #8
 8018f2a:	46bd      	mov	sp, r7
 8018f2c:	bd80      	pop	{r7, pc}
 8018f2e:	bf00      	nop
 8018f30:	20013c50 	.word	0x20013c50
 8018f34:	0801e778 	.word	0x0801e778
 8018f38:	0801e840 	.word	0x0801e840
 8018f3c:	0801e7c0 	.word	0x0801e7c0

08018f40 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8018f40:	b580      	push	{r7, lr}
 8018f42:	b08c      	sub	sp, #48	; 0x30
 8018f44:	af00      	add	r7, sp, #0
 8018f46:	60f8      	str	r0, [r7, #12]
 8018f48:	60b9      	str	r1, [r7, #8]
 8018f4a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8018f4c:	2300      	movs	r3, #0
 8018f4e:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8018f50:	2301      	movs	r3, #1
 8018f52:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8018f54:	68bb      	ldr	r3, [r7, #8]
 8018f56:	685b      	ldr	r3, [r3, #4]
 8018f58:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8018f5a:	69fb      	ldr	r3, [r7, #28]
 8018f5c:	885b      	ldrh	r3, [r3, #2]
 8018f5e:	b29b      	uxth	r3, r3
 8018f60:	4618      	mov	r0, r3
 8018f62:	f7f3 ff6f 	bl	800ce44 <lwip_htons>
 8018f66:	4603      	mov	r3, r0
 8018f68:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8018f6a:	69fb      	ldr	r3, [r7, #28]
 8018f6c:	781b      	ldrb	r3, [r3, #0]
 8018f6e:	f003 030f 	and.w	r3, r3, #15
 8018f72:	b2db      	uxtb	r3, r3
 8018f74:	009b      	lsls	r3, r3, #2
 8018f76:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8018f78:	7e7b      	ldrb	r3, [r7, #25]
 8018f7a:	b29b      	uxth	r3, r3
 8018f7c:	8b7a      	ldrh	r2, [r7, #26]
 8018f7e:	429a      	cmp	r2, r3
 8018f80:	d202      	bcs.n	8018f88 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018f82:	f04f 33ff 	mov.w	r3, #4294967295
 8018f86:	e135      	b.n	80191f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8018f88:	7e7b      	ldrb	r3, [r7, #25]
 8018f8a:	b29b      	uxth	r3, r3
 8018f8c:	8b7a      	ldrh	r2, [r7, #26]
 8018f8e:	1ad3      	subs	r3, r2, r3
 8018f90:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8018f92:	69fb      	ldr	r3, [r7, #28]
 8018f94:	88db      	ldrh	r3, [r3, #6]
 8018f96:	b29b      	uxth	r3, r3
 8018f98:	4618      	mov	r0, r3
 8018f9a:	f7f3 ff53 	bl	800ce44 <lwip_htons>
 8018f9e:	4603      	mov	r3, r0
 8018fa0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018fa4:	b29b      	uxth	r3, r3
 8018fa6:	00db      	lsls	r3, r3, #3
 8018fa8:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8018faa:	68bb      	ldr	r3, [r7, #8]
 8018fac:	685b      	ldr	r3, [r3, #4]
 8018fae:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8018fb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018fb2:	2200      	movs	r2, #0
 8018fb4:	701a      	strb	r2, [r3, #0]
 8018fb6:	2200      	movs	r2, #0
 8018fb8:	705a      	strb	r2, [r3, #1]
 8018fba:	2200      	movs	r2, #0
 8018fbc:	709a      	strb	r2, [r3, #2]
 8018fbe:	2200      	movs	r2, #0
 8018fc0:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8018fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018fc4:	8afa      	ldrh	r2, [r7, #22]
 8018fc6:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8018fc8:	8afa      	ldrh	r2, [r7, #22]
 8018fca:	8b7b      	ldrh	r3, [r7, #26]
 8018fcc:	4413      	add	r3, r2
 8018fce:	b29a      	uxth	r2, r3
 8018fd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018fd2:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8018fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018fd6:	88db      	ldrh	r3, [r3, #6]
 8018fd8:	b29b      	uxth	r3, r3
 8018fda:	8afa      	ldrh	r2, [r7, #22]
 8018fdc:	429a      	cmp	r2, r3
 8018fde:	d902      	bls.n	8018fe6 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018fe0:	f04f 33ff 	mov.w	r3, #4294967295
 8018fe4:	e106      	b.n	80191f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8018fe6:	68fb      	ldr	r3, [r7, #12]
 8018fe8:	685b      	ldr	r3, [r3, #4]
 8018fea:	627b      	str	r3, [r7, #36]	; 0x24
 8018fec:	e068      	b.n	80190c0 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8018fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018ff0:	685b      	ldr	r3, [r3, #4]
 8018ff2:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8018ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018ff6:	889b      	ldrh	r3, [r3, #4]
 8018ff8:	b29a      	uxth	r2, r3
 8018ffa:	693b      	ldr	r3, [r7, #16]
 8018ffc:	889b      	ldrh	r3, [r3, #4]
 8018ffe:	b29b      	uxth	r3, r3
 8019000:	429a      	cmp	r2, r3
 8019002:	d235      	bcs.n	8019070 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8019004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019006:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019008:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801900a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801900c:	2b00      	cmp	r3, #0
 801900e:	d020      	beq.n	8019052 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8019010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019012:	889b      	ldrh	r3, [r3, #4]
 8019014:	b29a      	uxth	r2, r3
 8019016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019018:	88db      	ldrh	r3, [r3, #6]
 801901a:	b29b      	uxth	r3, r3
 801901c:	429a      	cmp	r2, r3
 801901e:	d307      	bcc.n	8019030 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8019020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019022:	88db      	ldrh	r3, [r3, #6]
 8019024:	b29a      	uxth	r2, r3
 8019026:	693b      	ldr	r3, [r7, #16]
 8019028:	889b      	ldrh	r3, [r3, #4]
 801902a:	b29b      	uxth	r3, r3
 801902c:	429a      	cmp	r2, r3
 801902e:	d902      	bls.n	8019036 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019030:	f04f 33ff 	mov.w	r3, #4294967295
 8019034:	e0de      	b.n	80191f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8019036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019038:	68ba      	ldr	r2, [r7, #8]
 801903a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801903c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801903e:	88db      	ldrh	r3, [r3, #6]
 8019040:	b29a      	uxth	r2, r3
 8019042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019044:	889b      	ldrh	r3, [r3, #4]
 8019046:	b29b      	uxth	r3, r3
 8019048:	429a      	cmp	r2, r3
 801904a:	d03d      	beq.n	80190c8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801904c:	2300      	movs	r3, #0
 801904e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8019050:	e03a      	b.n	80190c8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8019052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019054:	88db      	ldrh	r3, [r3, #6]
 8019056:	b29a      	uxth	r2, r3
 8019058:	693b      	ldr	r3, [r7, #16]
 801905a:	889b      	ldrh	r3, [r3, #4]
 801905c:	b29b      	uxth	r3, r3
 801905e:	429a      	cmp	r2, r3
 8019060:	d902      	bls.n	8019068 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019062:	f04f 33ff 	mov.w	r3, #4294967295
 8019066:	e0c5      	b.n	80191f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8019068:	68fb      	ldr	r3, [r7, #12]
 801906a:	68ba      	ldr	r2, [r7, #8]
 801906c:	605a      	str	r2, [r3, #4]
      break;
 801906e:	e02b      	b.n	80190c8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8019070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019072:	889b      	ldrh	r3, [r3, #4]
 8019074:	b29a      	uxth	r2, r3
 8019076:	693b      	ldr	r3, [r7, #16]
 8019078:	889b      	ldrh	r3, [r3, #4]
 801907a:	b29b      	uxth	r3, r3
 801907c:	429a      	cmp	r2, r3
 801907e:	d102      	bne.n	8019086 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019080:	f04f 33ff 	mov.w	r3, #4294967295
 8019084:	e0b6      	b.n	80191f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8019086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019088:	889b      	ldrh	r3, [r3, #4]
 801908a:	b29a      	uxth	r2, r3
 801908c:	693b      	ldr	r3, [r7, #16]
 801908e:	88db      	ldrh	r3, [r3, #6]
 8019090:	b29b      	uxth	r3, r3
 8019092:	429a      	cmp	r2, r3
 8019094:	d202      	bcs.n	801909c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019096:	f04f 33ff 	mov.w	r3, #4294967295
 801909a:	e0ab      	b.n	80191f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801909c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801909e:	2b00      	cmp	r3, #0
 80190a0:	d009      	beq.n	80190b6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 80190a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80190a4:	88db      	ldrh	r3, [r3, #6]
 80190a6:	b29a      	uxth	r2, r3
 80190a8:	693b      	ldr	r3, [r7, #16]
 80190aa:	889b      	ldrh	r3, [r3, #4]
 80190ac:	b29b      	uxth	r3, r3
 80190ae:	429a      	cmp	r2, r3
 80190b0:	d001      	beq.n	80190b6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80190b2:	2300      	movs	r3, #0
 80190b4:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 80190b6:	693b      	ldr	r3, [r7, #16]
 80190b8:	681b      	ldr	r3, [r3, #0]
 80190ba:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 80190bc:	693b      	ldr	r3, [r7, #16]
 80190be:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 80190c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80190c2:	2b00      	cmp	r3, #0
 80190c4:	d193      	bne.n	8018fee <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 80190c6:	e000      	b.n	80190ca <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 80190c8:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 80190ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80190cc:	2b00      	cmp	r3, #0
 80190ce:	d12d      	bne.n	801912c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 80190d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80190d2:	2b00      	cmp	r3, #0
 80190d4:	d01c      	beq.n	8019110 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80190d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80190d8:	88db      	ldrh	r3, [r3, #6]
 80190da:	b29a      	uxth	r2, r3
 80190dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80190de:	889b      	ldrh	r3, [r3, #4]
 80190e0:	b29b      	uxth	r3, r3
 80190e2:	429a      	cmp	r2, r3
 80190e4:	d906      	bls.n	80190f4 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 80190e6:	4b45      	ldr	r3, [pc, #276]	; (80191fc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80190e8:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 80190ec:	4944      	ldr	r1, [pc, #272]	; (8019200 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80190ee:	4845      	ldr	r0, [pc, #276]	; (8019204 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80190f0:	f000 ff06 	bl	8019f00 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80190f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80190f6:	68ba      	ldr	r2, [r7, #8]
 80190f8:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80190fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80190fc:	88db      	ldrh	r3, [r3, #6]
 80190fe:	b29a      	uxth	r2, r3
 8019100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019102:	889b      	ldrh	r3, [r3, #4]
 8019104:	b29b      	uxth	r3, r3
 8019106:	429a      	cmp	r2, r3
 8019108:	d010      	beq.n	801912c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801910a:	2300      	movs	r3, #0
 801910c:	623b      	str	r3, [r7, #32]
 801910e:	e00d      	b.n	801912c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8019110:	68fb      	ldr	r3, [r7, #12]
 8019112:	685b      	ldr	r3, [r3, #4]
 8019114:	2b00      	cmp	r3, #0
 8019116:	d006      	beq.n	8019126 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8019118:	4b38      	ldr	r3, [pc, #224]	; (80191fc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801911a:	f44f 72df 	mov.w	r2, #446	; 0x1be
 801911e:	493a      	ldr	r1, [pc, #232]	; (8019208 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8019120:	4838      	ldr	r0, [pc, #224]	; (8019204 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8019122:	f000 feed 	bl	8019f00 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8019126:	68fb      	ldr	r3, [r7, #12]
 8019128:	68ba      	ldr	r2, [r7, #8]
 801912a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801912c:	687b      	ldr	r3, [r7, #4]
 801912e:	2b00      	cmp	r3, #0
 8019130:	d105      	bne.n	801913e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8019132:	68fb      	ldr	r3, [r7, #12]
 8019134:	7f9b      	ldrb	r3, [r3, #30]
 8019136:	f003 0301 	and.w	r3, r3, #1
 801913a:	2b00      	cmp	r3, #0
 801913c:	d059      	beq.n	80191f2 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801913e:	6a3b      	ldr	r3, [r7, #32]
 8019140:	2b00      	cmp	r3, #0
 8019142:	d04f      	beq.n	80191e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8019144:	68fb      	ldr	r3, [r7, #12]
 8019146:	685b      	ldr	r3, [r3, #4]
 8019148:	2b00      	cmp	r3, #0
 801914a:	d006      	beq.n	801915a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801914c:	68fb      	ldr	r3, [r7, #12]
 801914e:	685b      	ldr	r3, [r3, #4]
 8019150:	685b      	ldr	r3, [r3, #4]
 8019152:	889b      	ldrh	r3, [r3, #4]
 8019154:	b29b      	uxth	r3, r3
 8019156:	2b00      	cmp	r3, #0
 8019158:	d002      	beq.n	8019160 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801915a:	2300      	movs	r3, #0
 801915c:	623b      	str	r3, [r7, #32]
 801915e:	e041      	b.n	80191e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8019160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019162:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8019164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019166:	681b      	ldr	r3, [r3, #0]
 8019168:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801916a:	e012      	b.n	8019192 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801916c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801916e:	685b      	ldr	r3, [r3, #4]
 8019170:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8019172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019174:	88db      	ldrh	r3, [r3, #6]
 8019176:	b29a      	uxth	r2, r3
 8019178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801917a:	889b      	ldrh	r3, [r3, #4]
 801917c:	b29b      	uxth	r3, r3
 801917e:	429a      	cmp	r2, r3
 8019180:	d002      	beq.n	8019188 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8019182:	2300      	movs	r3, #0
 8019184:	623b      	str	r3, [r7, #32]
            break;
 8019186:	e007      	b.n	8019198 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8019188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801918a:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 801918c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801918e:	681b      	ldr	r3, [r3, #0]
 8019190:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8019192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019194:	2b00      	cmp	r3, #0
 8019196:	d1e9      	bne.n	801916c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8019198:	6a3b      	ldr	r3, [r7, #32]
 801919a:	2b00      	cmp	r3, #0
 801919c:	d022      	beq.n	80191e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801919e:	68fb      	ldr	r3, [r7, #12]
 80191a0:	685b      	ldr	r3, [r3, #4]
 80191a2:	2b00      	cmp	r3, #0
 80191a4:	d106      	bne.n	80191b4 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 80191a6:	4b15      	ldr	r3, [pc, #84]	; (80191fc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80191a8:	f240 12df 	movw	r2, #479	; 0x1df
 80191ac:	4917      	ldr	r1, [pc, #92]	; (801920c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80191ae:	4815      	ldr	r0, [pc, #84]	; (8019204 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80191b0:	f000 fea6 	bl	8019f00 <iprintf>
          LWIP_ASSERT("sanity check",
 80191b4:	68fb      	ldr	r3, [r7, #12]
 80191b6:	685b      	ldr	r3, [r3, #4]
 80191b8:	685b      	ldr	r3, [r3, #4]
 80191ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80191bc:	429a      	cmp	r2, r3
 80191be:	d106      	bne.n	80191ce <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 80191c0:	4b0e      	ldr	r3, [pc, #56]	; (80191fc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80191c2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80191c6:	4911      	ldr	r1, [pc, #68]	; (801920c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80191c8:	480e      	ldr	r0, [pc, #56]	; (8019204 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80191ca:	f000 fe99 	bl	8019f00 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80191ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80191d0:	681b      	ldr	r3, [r3, #0]
 80191d2:	2b00      	cmp	r3, #0
 80191d4:	d006      	beq.n	80191e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 80191d6:	4b09      	ldr	r3, [pc, #36]	; (80191fc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80191d8:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 80191dc:	490c      	ldr	r1, [pc, #48]	; (8019210 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80191de:	4809      	ldr	r0, [pc, #36]	; (8019204 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80191e0:	f000 fe8e 	bl	8019f00 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80191e4:	6a3b      	ldr	r3, [r7, #32]
 80191e6:	2b00      	cmp	r3, #0
 80191e8:	bf14      	ite	ne
 80191ea:	2301      	movne	r3, #1
 80191ec:	2300      	moveq	r3, #0
 80191ee:	b2db      	uxtb	r3, r3
 80191f0:	e000      	b.n	80191f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80191f2:	2300      	movs	r3, #0
}
 80191f4:	4618      	mov	r0, r3
 80191f6:	3730      	adds	r7, #48	; 0x30
 80191f8:	46bd      	mov	sp, r7
 80191fa:	bd80      	pop	{r7, pc}
 80191fc:	0801e778 	.word	0x0801e778
 8019200:	0801e85c 	.word	0x0801e85c
 8019204:	0801e7c0 	.word	0x0801e7c0
 8019208:	0801e87c 	.word	0x0801e87c
 801920c:	0801e8b4 	.word	0x0801e8b4
 8019210:	0801e8c4 	.word	0x0801e8c4

08019214 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8019214:	b580      	push	{r7, lr}
 8019216:	b08e      	sub	sp, #56	; 0x38
 8019218:	af00      	add	r7, sp, #0
 801921a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801921c:	687b      	ldr	r3, [r7, #4]
 801921e:	685b      	ldr	r3, [r3, #4]
 8019220:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8019222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019224:	781b      	ldrb	r3, [r3, #0]
 8019226:	f003 030f 	and.w	r3, r3, #15
 801922a:	b2db      	uxtb	r3, r3
 801922c:	009b      	lsls	r3, r3, #2
 801922e:	b2db      	uxtb	r3, r3
 8019230:	2b14      	cmp	r3, #20
 8019232:	f040 8179 	bne.w	8019528 <ip4_reass+0x314>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8019236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019238:	88db      	ldrh	r3, [r3, #6]
 801923a:	b29b      	uxth	r3, r3
 801923c:	4618      	mov	r0, r3
 801923e:	f7f3 fe01 	bl	800ce44 <lwip_htons>
 8019242:	4603      	mov	r3, r0
 8019244:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8019248:	b29b      	uxth	r3, r3
 801924a:	00db      	lsls	r3, r3, #3
 801924c:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801924e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019250:	885b      	ldrh	r3, [r3, #2]
 8019252:	b29b      	uxth	r3, r3
 8019254:	4618      	mov	r0, r3
 8019256:	f7f3 fdf5 	bl	800ce44 <lwip_htons>
 801925a:	4603      	mov	r3, r0
 801925c:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801925e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019260:	781b      	ldrb	r3, [r3, #0]
 8019262:	f003 030f 	and.w	r3, r3, #15
 8019266:	b2db      	uxtb	r3, r3
 8019268:	009b      	lsls	r3, r3, #2
 801926a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801926e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8019272:	b29b      	uxth	r3, r3
 8019274:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8019276:	429a      	cmp	r2, r3
 8019278:	f0c0 8158 	bcc.w	801952c <ip4_reass+0x318>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801927c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8019280:	b29b      	uxth	r3, r3
 8019282:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8019284:	1ad3      	subs	r3, r2, r3
 8019286:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8019288:	6878      	ldr	r0, [r7, #4]
 801928a:	f7f5 fb8b 	bl	800e9a4 <pbuf_clen>
 801928e:	4603      	mov	r3, r0
 8019290:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8019292:	4b90      	ldr	r3, [pc, #576]	; (80194d4 <ip4_reass+0x2c0>)
 8019294:	881b      	ldrh	r3, [r3, #0]
 8019296:	461a      	mov	r2, r3
 8019298:	8c3b      	ldrh	r3, [r7, #32]
 801929a:	4413      	add	r3, r2
 801929c:	2b0a      	cmp	r3, #10
 801929e:	dd10      	ble.n	80192c2 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80192a0:	8c3b      	ldrh	r3, [r7, #32]
 80192a2:	4619      	mov	r1, r3
 80192a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80192a6:	f7ff fd81 	bl	8018dac <ip_reass_remove_oldest_datagram>
 80192aa:	4603      	mov	r3, r0
 80192ac:	2b00      	cmp	r3, #0
 80192ae:	f000 813f 	beq.w	8019530 <ip4_reass+0x31c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80192b2:	4b88      	ldr	r3, [pc, #544]	; (80194d4 <ip4_reass+0x2c0>)
 80192b4:	881b      	ldrh	r3, [r3, #0]
 80192b6:	461a      	mov	r2, r3
 80192b8:	8c3b      	ldrh	r3, [r7, #32]
 80192ba:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80192bc:	2b0a      	cmp	r3, #10
 80192be:	f300 8137 	bgt.w	8019530 <ip4_reass+0x31c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80192c2:	4b85      	ldr	r3, [pc, #532]	; (80194d8 <ip4_reass+0x2c4>)
 80192c4:	681b      	ldr	r3, [r3, #0]
 80192c6:	633b      	str	r3, [r7, #48]	; 0x30
 80192c8:	e015      	b.n	80192f6 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80192ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80192cc:	695a      	ldr	r2, [r3, #20]
 80192ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80192d0:	68db      	ldr	r3, [r3, #12]
 80192d2:	429a      	cmp	r2, r3
 80192d4:	d10c      	bne.n	80192f0 <ip4_reass+0xdc>
 80192d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80192d8:	699a      	ldr	r2, [r3, #24]
 80192da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80192dc:	691b      	ldr	r3, [r3, #16]
 80192de:	429a      	cmp	r2, r3
 80192e0:	d106      	bne.n	80192f0 <ip4_reass+0xdc>
 80192e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80192e4:	899a      	ldrh	r2, [r3, #12]
 80192e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80192e8:	889b      	ldrh	r3, [r3, #4]
 80192ea:	b29b      	uxth	r3, r3
 80192ec:	429a      	cmp	r2, r3
 80192ee:	d006      	beq.n	80192fe <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80192f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80192f2:	681b      	ldr	r3, [r3, #0]
 80192f4:	633b      	str	r3, [r7, #48]	; 0x30
 80192f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80192f8:	2b00      	cmp	r3, #0
 80192fa:	d1e6      	bne.n	80192ca <ip4_reass+0xb6>
 80192fc:	e000      	b.n	8019300 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80192fe:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8019300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019302:	2b00      	cmp	r3, #0
 8019304:	d109      	bne.n	801931a <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8019306:	8c3b      	ldrh	r3, [r7, #32]
 8019308:	4619      	mov	r1, r3
 801930a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801930c:	f7ff fdb0 	bl	8018e70 <ip_reass_enqueue_new_datagram>
 8019310:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8019312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019314:	2b00      	cmp	r3, #0
 8019316:	d11c      	bne.n	8019352 <ip4_reass+0x13e>
      goto nullreturn;
 8019318:	e10d      	b.n	8019536 <ip4_reass+0x322>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801931a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801931c:	88db      	ldrh	r3, [r3, #6]
 801931e:	b29b      	uxth	r3, r3
 8019320:	4618      	mov	r0, r3
 8019322:	f7f3 fd8f 	bl	800ce44 <lwip_htons>
 8019326:	4603      	mov	r3, r0
 8019328:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801932c:	2b00      	cmp	r3, #0
 801932e:	d110      	bne.n	8019352 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8019330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019332:	89db      	ldrh	r3, [r3, #14]
 8019334:	4618      	mov	r0, r3
 8019336:	f7f3 fd85 	bl	800ce44 <lwip_htons>
 801933a:	4603      	mov	r3, r0
 801933c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8019340:	2b00      	cmp	r3, #0
 8019342:	d006      	beq.n	8019352 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8019344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019346:	3308      	adds	r3, #8
 8019348:	2214      	movs	r2, #20
 801934a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801934c:	4618      	mov	r0, r3
 801934e:	f000 fce1 	bl	8019d14 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8019352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019354:	88db      	ldrh	r3, [r3, #6]
 8019356:	b29b      	uxth	r3, r3
 8019358:	f003 0320 	and.w	r3, r3, #32
 801935c:	2b00      	cmp	r3, #0
 801935e:	bf0c      	ite	eq
 8019360:	2301      	moveq	r3, #1
 8019362:	2300      	movne	r3, #0
 8019364:	b2db      	uxtb	r3, r3
 8019366:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8019368:	69fb      	ldr	r3, [r7, #28]
 801936a:	2b00      	cmp	r3, #0
 801936c:	d00e      	beq.n	801938c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801936e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8019370:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8019372:	4413      	add	r3, r2
 8019374:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8019376:	8b7a      	ldrh	r2, [r7, #26]
 8019378:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801937a:	429a      	cmp	r2, r3
 801937c:	f0c0 80a8 	bcc.w	80194d0 <ip4_reass+0x2bc>
 8019380:	8b7b      	ldrh	r3, [r7, #26]
 8019382:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8019386:	4293      	cmp	r3, r2
 8019388:	f200 80a2 	bhi.w	80194d0 <ip4_reass+0x2bc>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801938c:	69fa      	ldr	r2, [r7, #28]
 801938e:	6879      	ldr	r1, [r7, #4]
 8019390:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019392:	f7ff fdd5 	bl	8018f40 <ip_reass_chain_frag_into_datagram_and_validate>
 8019396:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8019398:	697b      	ldr	r3, [r7, #20]
 801939a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801939e:	f000 80a3 	beq.w	80194e8 <ip4_reass+0x2d4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80193a2:	4b4c      	ldr	r3, [pc, #304]	; (80194d4 <ip4_reass+0x2c0>)
 80193a4:	881a      	ldrh	r2, [r3, #0]
 80193a6:	8c3b      	ldrh	r3, [r7, #32]
 80193a8:	4413      	add	r3, r2
 80193aa:	b29a      	uxth	r2, r3
 80193ac:	4b49      	ldr	r3, [pc, #292]	; (80194d4 <ip4_reass+0x2c0>)
 80193ae:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80193b0:	69fb      	ldr	r3, [r7, #28]
 80193b2:	2b00      	cmp	r3, #0
 80193b4:	d00d      	beq.n	80193d2 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 80193b6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80193b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80193ba:	4413      	add	r3, r2
 80193bc:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80193be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80193c0:	8a7a      	ldrh	r2, [r7, #18]
 80193c2:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80193c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80193c6:	7f9b      	ldrb	r3, [r3, #30]
 80193c8:	f043 0301 	orr.w	r3, r3, #1
 80193cc:	b2da      	uxtb	r2, r3
 80193ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80193d0:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80193d2:	697b      	ldr	r3, [r7, #20]
 80193d4:	2b01      	cmp	r3, #1
 80193d6:	d179      	bne.n	80194cc <ip4_reass+0x2b8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80193d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80193da:	8b9b      	ldrh	r3, [r3, #28]
 80193dc:	3314      	adds	r3, #20
 80193de:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80193e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80193e2:	685b      	ldr	r3, [r3, #4]
 80193e4:	685b      	ldr	r3, [r3, #4]
 80193e6:	681b      	ldr	r3, [r3, #0]
 80193e8:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 80193ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80193ec:	685b      	ldr	r3, [r3, #4]
 80193ee:	685b      	ldr	r3, [r3, #4]
 80193f0:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80193f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80193f4:	3308      	adds	r3, #8
 80193f6:	2214      	movs	r2, #20
 80193f8:	4619      	mov	r1, r3
 80193fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80193fc:	f000 fc8a 	bl	8019d14 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8019400:	8a3b      	ldrh	r3, [r7, #16]
 8019402:	4618      	mov	r0, r3
 8019404:	f7f3 fd1e 	bl	800ce44 <lwip_htons>
 8019408:	4603      	mov	r3, r0
 801940a:	461a      	mov	r2, r3
 801940c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801940e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8019410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019412:	2200      	movs	r2, #0
 8019414:	719a      	strb	r2, [r3, #6]
 8019416:	2200      	movs	r2, #0
 8019418:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801941a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801941c:	2200      	movs	r2, #0
 801941e:	729a      	strb	r2, [r3, #10]
 8019420:	2200      	movs	r2, #0
 8019422:	72da      	strb	r2, [r3, #11]
    /* @todo: do we need to set/calculate the correct checksum? */
#if CHECKSUM_GEN_IP
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
 8019424:	2114      	movs	r1, #20
 8019426:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019428:	f7f3 fe54 	bl	800d0d4 <inet_chksum>
 801942c:	4603      	mov	r3, r0
 801942e:	461a      	mov	r2, r3
 8019430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019432:	815a      	strh	r2, [r3, #10]
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8019434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019436:	685b      	ldr	r3, [r3, #4]
 8019438:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801943a:	e00d      	b.n	8019458 <ip4_reass+0x244>
      iprh = (struct ip_reass_helper *)r->payload;
 801943c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801943e:	685b      	ldr	r3, [r3, #4]
 8019440:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8019442:	2114      	movs	r1, #20
 8019444:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8019446:	f7f5 f999 	bl	800e77c <pbuf_remove_header>
      pbuf_cat(p, r);
 801944a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801944c:	6878      	ldr	r0, [r7, #4]
 801944e:	f7f5 fae9 	bl	800ea24 <pbuf_cat>
      r = iprh->next_pbuf;
 8019452:	68fb      	ldr	r3, [r7, #12]
 8019454:	681b      	ldr	r3, [r3, #0]
 8019456:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (r != NULL) {
 8019458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801945a:	2b00      	cmp	r3, #0
 801945c:	d1ee      	bne.n	801943c <ip4_reass+0x228>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801945e:	4b1e      	ldr	r3, [pc, #120]	; (80194d8 <ip4_reass+0x2c4>)
 8019460:	681b      	ldr	r3, [r3, #0]
 8019462:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019464:	429a      	cmp	r2, r3
 8019466:	d102      	bne.n	801946e <ip4_reass+0x25a>
      ipr_prev = NULL;
 8019468:	2300      	movs	r3, #0
 801946a:	637b      	str	r3, [r7, #52]	; 0x34
 801946c:	e010      	b.n	8019490 <ip4_reass+0x27c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801946e:	4b1a      	ldr	r3, [pc, #104]	; (80194d8 <ip4_reass+0x2c4>)
 8019470:	681b      	ldr	r3, [r3, #0]
 8019472:	637b      	str	r3, [r7, #52]	; 0x34
 8019474:	e007      	b.n	8019486 <ip4_reass+0x272>
        if (ipr_prev->next == ipr) {
 8019476:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019478:	681b      	ldr	r3, [r3, #0]
 801947a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801947c:	429a      	cmp	r2, r3
 801947e:	d006      	beq.n	801948e <ip4_reass+0x27a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8019480:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019482:	681b      	ldr	r3, [r3, #0]
 8019484:	637b      	str	r3, [r7, #52]	; 0x34
 8019486:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019488:	2b00      	cmp	r3, #0
 801948a:	d1f4      	bne.n	8019476 <ip4_reass+0x262>
 801948c:	e000      	b.n	8019490 <ip4_reass+0x27c>
          break;
 801948e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8019490:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8019492:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019494:	f7ff fd26 	bl	8018ee4 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8019498:	6878      	ldr	r0, [r7, #4]
 801949a:	f7f5 fa83 	bl	800e9a4 <pbuf_clen>
 801949e:	4603      	mov	r3, r0
 80194a0:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80194a2:	4b0c      	ldr	r3, [pc, #48]	; (80194d4 <ip4_reass+0x2c0>)
 80194a4:	881b      	ldrh	r3, [r3, #0]
 80194a6:	8c3a      	ldrh	r2, [r7, #32]
 80194a8:	429a      	cmp	r2, r3
 80194aa:	d906      	bls.n	80194ba <ip4_reass+0x2a6>
 80194ac:	4b0b      	ldr	r3, [pc, #44]	; (80194dc <ip4_reass+0x2c8>)
 80194ae:	f240 229b 	movw	r2, #667	; 0x29b
 80194b2:	490b      	ldr	r1, [pc, #44]	; (80194e0 <ip4_reass+0x2cc>)
 80194b4:	480b      	ldr	r0, [pc, #44]	; (80194e4 <ip4_reass+0x2d0>)
 80194b6:	f000 fd23 	bl	8019f00 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80194ba:	4b06      	ldr	r3, [pc, #24]	; (80194d4 <ip4_reass+0x2c0>)
 80194bc:	881a      	ldrh	r2, [r3, #0]
 80194be:	8c3b      	ldrh	r3, [r7, #32]
 80194c0:	1ad3      	subs	r3, r2, r3
 80194c2:	b29a      	uxth	r2, r3
 80194c4:	4b03      	ldr	r3, [pc, #12]	; (80194d4 <ip4_reass+0x2c0>)
 80194c6:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80194c8:	687b      	ldr	r3, [r7, #4]
 80194ca:	e038      	b.n	801953e <ip4_reass+0x32a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80194cc:	2300      	movs	r3, #0
 80194ce:	e036      	b.n	801953e <ip4_reass+0x32a>
      goto nullreturn_ipr;
 80194d0:	bf00      	nop
 80194d2:	e00a      	b.n	80194ea <ip4_reass+0x2d6>
 80194d4:	20013c54 	.word	0x20013c54
 80194d8:	20013c50 	.word	0x20013c50
 80194dc:	0801e778 	.word	0x0801e778
 80194e0:	0801e8e8 	.word	0x0801e8e8
 80194e4:	0801e7c0 	.word	0x0801e7c0
    goto nullreturn_ipr;
 80194e8:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 80194ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80194ec:	2b00      	cmp	r3, #0
 80194ee:	d106      	bne.n	80194fe <ip4_reass+0x2ea>
 80194f0:	4b15      	ldr	r3, [pc, #84]	; (8019548 <ip4_reass+0x334>)
 80194f2:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 80194f6:	4915      	ldr	r1, [pc, #84]	; (801954c <ip4_reass+0x338>)
 80194f8:	4815      	ldr	r0, [pc, #84]	; (8019550 <ip4_reass+0x33c>)
 80194fa:	f000 fd01 	bl	8019f00 <iprintf>
  if (ipr->p == NULL) {
 80194fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019500:	685b      	ldr	r3, [r3, #4]
 8019502:	2b00      	cmp	r3, #0
 8019504:	d116      	bne.n	8019534 <ip4_reass+0x320>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8019506:	4b13      	ldr	r3, [pc, #76]	; (8019554 <ip4_reass+0x340>)
 8019508:	681b      	ldr	r3, [r3, #0]
 801950a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801950c:	429a      	cmp	r2, r3
 801950e:	d006      	beq.n	801951e <ip4_reass+0x30a>
 8019510:	4b0d      	ldr	r3, [pc, #52]	; (8019548 <ip4_reass+0x334>)
 8019512:	f240 22ab 	movw	r2, #683	; 0x2ab
 8019516:	4910      	ldr	r1, [pc, #64]	; (8019558 <ip4_reass+0x344>)
 8019518:	480d      	ldr	r0, [pc, #52]	; (8019550 <ip4_reass+0x33c>)
 801951a:	f000 fcf1 	bl	8019f00 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801951e:	2100      	movs	r1, #0
 8019520:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019522:	f7ff fcdf 	bl	8018ee4 <ip_reass_dequeue_datagram>
 8019526:	e006      	b.n	8019536 <ip4_reass+0x322>
    goto nullreturn;
 8019528:	bf00      	nop
 801952a:	e004      	b.n	8019536 <ip4_reass+0x322>
    goto nullreturn;
 801952c:	bf00      	nop
 801952e:	e002      	b.n	8019536 <ip4_reass+0x322>
      goto nullreturn;
 8019530:	bf00      	nop
 8019532:	e000      	b.n	8019536 <ip4_reass+0x322>
  }

nullreturn:
 8019534:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8019536:	6878      	ldr	r0, [r7, #4]
 8019538:	f7f5 f9a6 	bl	800e888 <pbuf_free>
  return NULL;
 801953c:	2300      	movs	r3, #0
}
 801953e:	4618      	mov	r0, r3
 8019540:	3738      	adds	r7, #56	; 0x38
 8019542:	46bd      	mov	sp, r7
 8019544:	bd80      	pop	{r7, pc}
 8019546:	bf00      	nop
 8019548:	0801e778 	.word	0x0801e778
 801954c:	0801e904 	.word	0x0801e904
 8019550:	0801e7c0 	.word	0x0801e7c0
 8019554:	20013c50 	.word	0x20013c50
 8019558:	0801e910 	.word	0x0801e910

0801955c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801955c:	b580      	push	{r7, lr}
 801955e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8019560:	2005      	movs	r0, #5
 8019562:	f7f4 fa9d 	bl	800daa0 <memp_malloc>
 8019566:	4603      	mov	r3, r0
}
 8019568:	4618      	mov	r0, r3
 801956a:	bd80      	pop	{r7, pc}

0801956c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801956c:	b580      	push	{r7, lr}
 801956e:	b082      	sub	sp, #8
 8019570:	af00      	add	r7, sp, #0
 8019572:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8019574:	687b      	ldr	r3, [r7, #4]
 8019576:	2b00      	cmp	r3, #0
 8019578:	d106      	bne.n	8019588 <ip_frag_free_pbuf_custom_ref+0x1c>
 801957a:	4b07      	ldr	r3, [pc, #28]	; (8019598 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801957c:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8019580:	4906      	ldr	r1, [pc, #24]	; (801959c <ip_frag_free_pbuf_custom_ref+0x30>)
 8019582:	4807      	ldr	r0, [pc, #28]	; (80195a0 <ip_frag_free_pbuf_custom_ref+0x34>)
 8019584:	f000 fcbc 	bl	8019f00 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8019588:	6879      	ldr	r1, [r7, #4]
 801958a:	2005      	movs	r0, #5
 801958c:	f7f4 fada 	bl	800db44 <memp_free>
}
 8019590:	bf00      	nop
 8019592:	3708      	adds	r7, #8
 8019594:	46bd      	mov	sp, r7
 8019596:	bd80      	pop	{r7, pc}
 8019598:	0801e778 	.word	0x0801e778
 801959c:	0801e930 	.word	0x0801e930
 80195a0:	0801e7c0 	.word	0x0801e7c0

080195a4 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80195a4:	b580      	push	{r7, lr}
 80195a6:	b084      	sub	sp, #16
 80195a8:	af00      	add	r7, sp, #0
 80195aa:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 80195ac:	687b      	ldr	r3, [r7, #4]
 80195ae:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80195b0:	68fb      	ldr	r3, [r7, #12]
 80195b2:	2b00      	cmp	r3, #0
 80195b4:	d106      	bne.n	80195c4 <ipfrag_free_pbuf_custom+0x20>
 80195b6:	4b11      	ldr	r3, [pc, #68]	; (80195fc <ipfrag_free_pbuf_custom+0x58>)
 80195b8:	f240 22ce 	movw	r2, #718	; 0x2ce
 80195bc:	4910      	ldr	r1, [pc, #64]	; (8019600 <ipfrag_free_pbuf_custom+0x5c>)
 80195be:	4811      	ldr	r0, [pc, #68]	; (8019604 <ipfrag_free_pbuf_custom+0x60>)
 80195c0:	f000 fc9e 	bl	8019f00 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 80195c4:	68fa      	ldr	r2, [r7, #12]
 80195c6:	687b      	ldr	r3, [r7, #4]
 80195c8:	429a      	cmp	r2, r3
 80195ca:	d006      	beq.n	80195da <ipfrag_free_pbuf_custom+0x36>
 80195cc:	4b0b      	ldr	r3, [pc, #44]	; (80195fc <ipfrag_free_pbuf_custom+0x58>)
 80195ce:	f240 22cf 	movw	r2, #719	; 0x2cf
 80195d2:	490d      	ldr	r1, [pc, #52]	; (8019608 <ipfrag_free_pbuf_custom+0x64>)
 80195d4:	480b      	ldr	r0, [pc, #44]	; (8019604 <ipfrag_free_pbuf_custom+0x60>)
 80195d6:	f000 fc93 	bl	8019f00 <iprintf>
  if (pcr->original != NULL) {
 80195da:	68fb      	ldr	r3, [r7, #12]
 80195dc:	695b      	ldr	r3, [r3, #20]
 80195de:	2b00      	cmp	r3, #0
 80195e0:	d004      	beq.n	80195ec <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80195e2:	68fb      	ldr	r3, [r7, #12]
 80195e4:	695b      	ldr	r3, [r3, #20]
 80195e6:	4618      	mov	r0, r3
 80195e8:	f7f5 f94e 	bl	800e888 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80195ec:	68f8      	ldr	r0, [r7, #12]
 80195ee:	f7ff ffbd 	bl	801956c <ip_frag_free_pbuf_custom_ref>
}
 80195f2:	bf00      	nop
 80195f4:	3710      	adds	r7, #16
 80195f6:	46bd      	mov	sp, r7
 80195f8:	bd80      	pop	{r7, pc}
 80195fa:	bf00      	nop
 80195fc:	0801e778 	.word	0x0801e778
 8019600:	0801e93c 	.word	0x0801e93c
 8019604:	0801e7c0 	.word	0x0801e7c0
 8019608:	0801e948 	.word	0x0801e948

0801960c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801960c:	b580      	push	{r7, lr}
 801960e:	b094      	sub	sp, #80	; 0x50
 8019610:	af02      	add	r7, sp, #8
 8019612:	60f8      	str	r0, [r7, #12]
 8019614:	60b9      	str	r1, [r7, #8]
 8019616:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8019618:	2300      	movs	r3, #0
 801961a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801961e:	68bb      	ldr	r3, [r7, #8]
 8019620:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8019622:	3b14      	subs	r3, #20
 8019624:	2b00      	cmp	r3, #0
 8019626:	da00      	bge.n	801962a <ip4_frag+0x1e>
 8019628:	3307      	adds	r3, #7
 801962a:	10db      	asrs	r3, r3, #3
 801962c:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801962e:	2314      	movs	r3, #20
 8019630:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8019632:	68fb      	ldr	r3, [r7, #12]
 8019634:	685b      	ldr	r3, [r3, #4]
 8019636:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8019638:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801963a:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801963c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801963e:	781b      	ldrb	r3, [r3, #0]
 8019640:	f003 030f 	and.w	r3, r3, #15
 8019644:	b2db      	uxtb	r3, r3
 8019646:	009b      	lsls	r3, r3, #2
 8019648:	b2db      	uxtb	r3, r3
 801964a:	2b14      	cmp	r3, #20
 801964c:	d002      	beq.n	8019654 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801964e:	f06f 0305 	mvn.w	r3, #5
 8019652:	e118      	b.n	8019886 <ip4_frag+0x27a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8019654:	68fb      	ldr	r3, [r7, #12]
 8019656:	895b      	ldrh	r3, [r3, #10]
 8019658:	2b13      	cmp	r3, #19
 801965a:	d809      	bhi.n	8019670 <ip4_frag+0x64>
 801965c:	4b8c      	ldr	r3, [pc, #560]	; (8019890 <ip4_frag+0x284>)
 801965e:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8019662:	498c      	ldr	r1, [pc, #560]	; (8019894 <ip4_frag+0x288>)
 8019664:	488c      	ldr	r0, [pc, #560]	; (8019898 <ip4_frag+0x28c>)
 8019666:	f000 fc4b 	bl	8019f00 <iprintf>
 801966a:	f06f 0305 	mvn.w	r3, #5
 801966e:	e10a      	b.n	8019886 <ip4_frag+0x27a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8019670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019672:	88db      	ldrh	r3, [r3, #6]
 8019674:	b29b      	uxth	r3, r3
 8019676:	4618      	mov	r0, r3
 8019678:	f7f3 fbe4 	bl	800ce44 <lwip_htons>
 801967c:	4603      	mov	r3, r0
 801967e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8019680:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8019682:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8019686:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801968a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801968c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8019690:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8019692:	68fb      	ldr	r3, [r7, #12]
 8019694:	891b      	ldrh	r3, [r3, #8]
 8019696:	3b14      	subs	r3, #20
 8019698:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 801969c:	e0e9      	b.n	8019872 <ip4_frag+0x266>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801969e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80196a0:	00db      	lsls	r3, r3, #3
 80196a2:	b29b      	uxth	r3, r3
 80196a4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80196a8:	4293      	cmp	r3, r2
 80196aa:	bf28      	it	cs
 80196ac:	4613      	movcs	r3, r2
 80196ae:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80196b0:	f44f 7220 	mov.w	r2, #640	; 0x280
 80196b4:	2114      	movs	r1, #20
 80196b6:	200e      	movs	r0, #14
 80196b8:	f7f4 fdfe 	bl	800e2b8 <pbuf_alloc>
 80196bc:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 80196be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80196c0:	2b00      	cmp	r3, #0
 80196c2:	f000 80dd 	beq.w	8019880 <ip4_frag+0x274>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80196c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80196c8:	895b      	ldrh	r3, [r3, #10]
 80196ca:	2b13      	cmp	r3, #19
 80196cc:	d806      	bhi.n	80196dc <ip4_frag+0xd0>
 80196ce:	4b70      	ldr	r3, [pc, #448]	; (8019890 <ip4_frag+0x284>)
 80196d0:	f44f 7249 	mov.w	r2, #804	; 0x324
 80196d4:	4971      	ldr	r1, [pc, #452]	; (801989c <ip4_frag+0x290>)
 80196d6:	4870      	ldr	r0, [pc, #448]	; (8019898 <ip4_frag+0x28c>)
 80196d8:	f000 fc12 	bl	8019f00 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80196dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80196de:	685b      	ldr	r3, [r3, #4]
 80196e0:	2214      	movs	r2, #20
 80196e2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80196e4:	4618      	mov	r0, r3
 80196e6:	f000 fb15 	bl	8019d14 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80196ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80196ec:	685b      	ldr	r3, [r3, #4]
 80196ee:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 80196f0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80196f2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 80196f6:	e064      	b.n	80197c2 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 80196f8:	68fb      	ldr	r3, [r7, #12]
 80196fa:	895a      	ldrh	r2, [r3, #10]
 80196fc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80196fe:	1ad3      	subs	r3, r2, r3
 8019700:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8019702:	68fb      	ldr	r3, [r7, #12]
 8019704:	895b      	ldrh	r3, [r3, #10]
 8019706:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8019708:	429a      	cmp	r2, r3
 801970a:	d906      	bls.n	801971a <ip4_frag+0x10e>
 801970c:	4b60      	ldr	r3, [pc, #384]	; (8019890 <ip4_frag+0x284>)
 801970e:	f240 322d 	movw	r2, #813	; 0x32d
 8019712:	4963      	ldr	r1, [pc, #396]	; (80198a0 <ip4_frag+0x294>)
 8019714:	4860      	ldr	r0, [pc, #384]	; (8019898 <ip4_frag+0x28c>)
 8019716:	f000 fbf3 	bl	8019f00 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801971a:	8bfa      	ldrh	r2, [r7, #30]
 801971c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8019720:	4293      	cmp	r3, r2
 8019722:	bf28      	it	cs
 8019724:	4613      	movcs	r3, r2
 8019726:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801972a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801972e:	2b00      	cmp	r3, #0
 8019730:	d105      	bne.n	801973e <ip4_frag+0x132>
        poff = 0;
 8019732:	2300      	movs	r3, #0
 8019734:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8019736:	68fb      	ldr	r3, [r7, #12]
 8019738:	681b      	ldr	r3, [r3, #0]
 801973a:	60fb      	str	r3, [r7, #12]
        continue;
 801973c:	e041      	b.n	80197c2 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801973e:	f7ff ff0d 	bl	801955c <ip_frag_alloc_pbuf_custom_ref>
 8019742:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8019744:	69bb      	ldr	r3, [r7, #24]
 8019746:	2b00      	cmp	r3, #0
 8019748:	d103      	bne.n	8019752 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801974a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801974c:	f7f5 f89c 	bl	800e888 <pbuf_free>
        goto memerr;
 8019750:	e097      	b.n	8019882 <ip4_frag+0x276>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8019752:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8019754:	68fb      	ldr	r3, [r7, #12]
 8019756:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8019758:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801975a:	4413      	add	r3, r2
 801975c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8019760:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8019764:	9201      	str	r2, [sp, #4]
 8019766:	9300      	str	r3, [sp, #0]
 8019768:	4603      	mov	r3, r0
 801976a:	2241      	movs	r2, #65	; 0x41
 801976c:	2000      	movs	r0, #0
 801976e:	f7f4 fed1 	bl	800e514 <pbuf_alloced_custom>
 8019772:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8019774:	697b      	ldr	r3, [r7, #20]
 8019776:	2b00      	cmp	r3, #0
 8019778:	d106      	bne.n	8019788 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801977a:	69b8      	ldr	r0, [r7, #24]
 801977c:	f7ff fef6 	bl	801956c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8019780:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019782:	f7f5 f881 	bl	800e888 <pbuf_free>
        goto memerr;
 8019786:	e07c      	b.n	8019882 <ip4_frag+0x276>
      }
      pbuf_ref(p);
 8019788:	68f8      	ldr	r0, [r7, #12]
 801978a:	f7f5 f923 	bl	800e9d4 <pbuf_ref>
      pcr->original = p;
 801978e:	69bb      	ldr	r3, [r7, #24]
 8019790:	68fa      	ldr	r2, [r7, #12]
 8019792:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8019794:	69bb      	ldr	r3, [r7, #24]
 8019796:	4a43      	ldr	r2, [pc, #268]	; (80198a4 <ip4_frag+0x298>)
 8019798:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801979a:	6979      	ldr	r1, [r7, #20]
 801979c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801979e:	f7f5 f941 	bl	800ea24 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 80197a2:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 80197a6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80197aa:	1ad3      	subs	r3, r2, r3
 80197ac:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 80197b0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80197b4:	2b00      	cmp	r3, #0
 80197b6:	d004      	beq.n	80197c2 <ip4_frag+0x1b6>
        poff = 0;
 80197b8:	2300      	movs	r3, #0
 80197ba:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80197bc:	68fb      	ldr	r3, [r7, #12]
 80197be:	681b      	ldr	r3, [r3, #0]
 80197c0:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 80197c2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80197c6:	2b00      	cmp	r3, #0
 80197c8:	d196      	bne.n	80196f8 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 80197ca:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80197cc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80197d0:	4413      	add	r3, r2
 80197d2:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80197d4:	68bb      	ldr	r3, [r7, #8]
 80197d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80197d8:	f1a3 0213 	sub.w	r2, r3, #19
 80197dc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80197e0:	429a      	cmp	r2, r3
 80197e2:	bfcc      	ite	gt
 80197e4:	2301      	movgt	r3, #1
 80197e6:	2300      	movle	r3, #0
 80197e8:	b2db      	uxtb	r3, r3
 80197ea:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80197ec:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80197f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80197f4:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 80197f6:	6a3b      	ldr	r3, [r7, #32]
 80197f8:	2b00      	cmp	r3, #0
 80197fa:	d002      	beq.n	8019802 <ip4_frag+0x1f6>
 80197fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80197fe:	2b00      	cmp	r3, #0
 8019800:	d003      	beq.n	801980a <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8019802:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8019804:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8019808:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801980a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801980c:	4618      	mov	r0, r3
 801980e:	f7f3 fb19 	bl	800ce44 <lwip_htons>
 8019812:	4603      	mov	r3, r0
 8019814:	461a      	mov	r2, r3
 8019816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019818:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801981a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801981c:	3314      	adds	r3, #20
 801981e:	b29b      	uxth	r3, r3
 8019820:	4618      	mov	r0, r3
 8019822:	f7f3 fb0f 	bl	800ce44 <lwip_htons>
 8019826:	4603      	mov	r3, r0
 8019828:	461a      	mov	r2, r3
 801982a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801982c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801982e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019830:	2200      	movs	r2, #0
 8019832:	729a      	strb	r2, [r3, #10]
 8019834:	2200      	movs	r2, #0
 8019836:	72da      	strb	r2, [r3, #11]
#if CHECKSUM_GEN_IP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
 8019838:	2114      	movs	r1, #20
 801983a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801983c:	f7f3 fc4a 	bl	800d0d4 <inet_chksum>
 8019840:	4603      	mov	r3, r0
 8019842:	461a      	mov	r2, r3
 8019844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019846:	815a      	strh	r2, [r3, #10]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8019848:	68bb      	ldr	r3, [r7, #8]
 801984a:	695b      	ldr	r3, [r3, #20]
 801984c:	687a      	ldr	r2, [r7, #4]
 801984e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8019850:	68b8      	ldr	r0, [r7, #8]
 8019852:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8019854:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019856:	f7f5 f817 	bl	800e888 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801985a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801985e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8019860:	1ad3      	subs	r3, r2, r3
 8019862:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8019866:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801986a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801986c:	4413      	add	r3, r2
 801986e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8019872:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8019876:	2b00      	cmp	r3, #0
 8019878:	f47f af11 	bne.w	801969e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801987c:	2300      	movs	r3, #0
 801987e:	e002      	b.n	8019886 <ip4_frag+0x27a>
      goto memerr;
 8019880:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8019882:	f04f 33ff 	mov.w	r3, #4294967295
}
 8019886:	4618      	mov	r0, r3
 8019888:	3748      	adds	r7, #72	; 0x48
 801988a:	46bd      	mov	sp, r7
 801988c:	bd80      	pop	{r7, pc}
 801988e:	bf00      	nop
 8019890:	0801e778 	.word	0x0801e778
 8019894:	0801e954 	.word	0x0801e954
 8019898:	0801e7c0 	.word	0x0801e7c0
 801989c:	0801e970 	.word	0x0801e970
 80198a0:	0801e990 	.word	0x0801e990
 80198a4:	080195a5 	.word	0x080195a5

080198a8 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 80198a8:	b580      	push	{r7, lr}
 80198aa:	b086      	sub	sp, #24
 80198ac:	af00      	add	r7, sp, #0
 80198ae:	6078      	str	r0, [r7, #4]
 80198b0:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 80198b2:	230e      	movs	r3, #14
 80198b4:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 80198b6:	687b      	ldr	r3, [r7, #4]
 80198b8:	895b      	ldrh	r3, [r3, #10]
 80198ba:	2b0e      	cmp	r3, #14
 80198bc:	d96e      	bls.n	801999c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 80198be:	687b      	ldr	r3, [r7, #4]
 80198c0:	7bdb      	ldrb	r3, [r3, #15]
 80198c2:	2b00      	cmp	r3, #0
 80198c4:	d106      	bne.n	80198d4 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 80198c6:	683b      	ldr	r3, [r7, #0]
 80198c8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80198cc:	3301      	adds	r3, #1
 80198ce:	b2da      	uxtb	r2, r3
 80198d0:	687b      	ldr	r3, [r7, #4]
 80198d2:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80198d4:	687b      	ldr	r3, [r7, #4]
 80198d6:	685b      	ldr	r3, [r3, #4]
 80198d8:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 80198da:	693b      	ldr	r3, [r7, #16]
 80198dc:	7b1a      	ldrb	r2, [r3, #12]
 80198de:	7b5b      	ldrb	r3, [r3, #13]
 80198e0:	021b      	lsls	r3, r3, #8
 80198e2:	4313      	orrs	r3, r2
 80198e4:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80198e6:	693b      	ldr	r3, [r7, #16]
 80198e8:	781b      	ldrb	r3, [r3, #0]
 80198ea:	f003 0301 	and.w	r3, r3, #1
 80198ee:	2b00      	cmp	r3, #0
 80198f0:	d023      	beq.n	801993a <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80198f2:	693b      	ldr	r3, [r7, #16]
 80198f4:	781b      	ldrb	r3, [r3, #0]
 80198f6:	2b01      	cmp	r3, #1
 80198f8:	d10f      	bne.n	801991a <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80198fa:	693b      	ldr	r3, [r7, #16]
 80198fc:	785b      	ldrb	r3, [r3, #1]
 80198fe:	2b00      	cmp	r3, #0
 8019900:	d11b      	bne.n	801993a <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8019902:	693b      	ldr	r3, [r7, #16]
 8019904:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8019906:	2b5e      	cmp	r3, #94	; 0x5e
 8019908:	d117      	bne.n	801993a <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801990a:	687b      	ldr	r3, [r7, #4]
 801990c:	7b5b      	ldrb	r3, [r3, #13]
 801990e:	f043 0310 	orr.w	r3, r3, #16
 8019912:	b2da      	uxtb	r2, r3
 8019914:	687b      	ldr	r3, [r7, #4]
 8019916:	735a      	strb	r2, [r3, #13]
 8019918:	e00f      	b.n	801993a <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801991a:	693b      	ldr	r3, [r7, #16]
 801991c:	2206      	movs	r2, #6
 801991e:	4928      	ldr	r1, [pc, #160]	; (80199c0 <ethernet_input+0x118>)
 8019920:	4618      	mov	r0, r3
 8019922:	f000 f9e7 	bl	8019cf4 <memcmp>
 8019926:	4603      	mov	r3, r0
 8019928:	2b00      	cmp	r3, #0
 801992a:	d106      	bne.n	801993a <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801992c:	687b      	ldr	r3, [r7, #4]
 801992e:	7b5b      	ldrb	r3, [r3, #13]
 8019930:	f043 0308 	orr.w	r3, r3, #8
 8019934:	b2da      	uxtb	r2, r3
 8019936:	687b      	ldr	r3, [r7, #4]
 8019938:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801993a:	89fb      	ldrh	r3, [r7, #14]
 801993c:	2b08      	cmp	r3, #8
 801993e:	d003      	beq.n	8019948 <ethernet_input+0xa0>
 8019940:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8019944:	d014      	beq.n	8019970 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8019946:	e032      	b.n	80199ae <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8019948:	683b      	ldr	r3, [r7, #0]
 801994a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801994e:	f003 0308 	and.w	r3, r3, #8
 8019952:	2b00      	cmp	r3, #0
 8019954:	d024      	beq.n	80199a0 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8019956:	8afb      	ldrh	r3, [r7, #22]
 8019958:	4619      	mov	r1, r3
 801995a:	6878      	ldr	r0, [r7, #4]
 801995c:	f7f4 ff0e 	bl	800e77c <pbuf_remove_header>
 8019960:	4603      	mov	r3, r0
 8019962:	2b00      	cmp	r3, #0
 8019964:	d11e      	bne.n	80199a4 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8019966:	6839      	ldr	r1, [r7, #0]
 8019968:	6878      	ldr	r0, [r7, #4]
 801996a:	f7fe fd57 	bl	801841c <ip4_input>
      break;
 801996e:	e013      	b.n	8019998 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8019970:	683b      	ldr	r3, [r7, #0]
 8019972:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8019976:	f003 0308 	and.w	r3, r3, #8
 801997a:	2b00      	cmp	r3, #0
 801997c:	d014      	beq.n	80199a8 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801997e:	8afb      	ldrh	r3, [r7, #22]
 8019980:	4619      	mov	r1, r3
 8019982:	6878      	ldr	r0, [r7, #4]
 8019984:	f7f4 fefa 	bl	800e77c <pbuf_remove_header>
 8019988:	4603      	mov	r3, r0
 801998a:	2b00      	cmp	r3, #0
 801998c:	d10e      	bne.n	80199ac <ethernet_input+0x104>
        etharp_input(p, netif);
 801998e:	6839      	ldr	r1, [r7, #0]
 8019990:	6878      	ldr	r0, [r7, #4]
 8019992:	f7fd febf 	bl	8017714 <etharp_input>
      break;
 8019996:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8019998:	2300      	movs	r3, #0
 801999a:	e00c      	b.n	80199b6 <ethernet_input+0x10e>
    goto free_and_return;
 801999c:	bf00      	nop
 801999e:	e006      	b.n	80199ae <ethernet_input+0x106>
        goto free_and_return;
 80199a0:	bf00      	nop
 80199a2:	e004      	b.n	80199ae <ethernet_input+0x106>
        goto free_and_return;
 80199a4:	bf00      	nop
 80199a6:	e002      	b.n	80199ae <ethernet_input+0x106>
        goto free_and_return;
 80199a8:	bf00      	nop
 80199aa:	e000      	b.n	80199ae <ethernet_input+0x106>
        goto free_and_return;
 80199ac:	bf00      	nop

free_and_return:
  pbuf_free(p);
 80199ae:	6878      	ldr	r0, [r7, #4]
 80199b0:	f7f4 ff6a 	bl	800e888 <pbuf_free>
  return ERR_OK;
 80199b4:	2300      	movs	r3, #0
}
 80199b6:	4618      	mov	r0, r3
 80199b8:	3718      	adds	r7, #24
 80199ba:	46bd      	mov	sp, r7
 80199bc:	bd80      	pop	{r7, pc}
 80199be:	bf00      	nop
 80199c0:	0806a430 	.word	0x0806a430

080199c4 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 80199c4:	b580      	push	{r7, lr}
 80199c6:	b086      	sub	sp, #24
 80199c8:	af00      	add	r7, sp, #0
 80199ca:	60f8      	str	r0, [r7, #12]
 80199cc:	60b9      	str	r1, [r7, #8]
 80199ce:	607a      	str	r2, [r7, #4]
 80199d0:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80199d2:	8c3b      	ldrh	r3, [r7, #32]
 80199d4:	4618      	mov	r0, r3
 80199d6:	f7f3 fa35 	bl	800ce44 <lwip_htons>
 80199da:	4603      	mov	r3, r0
 80199dc:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 80199de:	210e      	movs	r1, #14
 80199e0:	68b8      	ldr	r0, [r7, #8]
 80199e2:	f7f4 febb 	bl	800e75c <pbuf_add_header>
 80199e6:	4603      	mov	r3, r0
 80199e8:	2b00      	cmp	r3, #0
 80199ea:	d125      	bne.n	8019a38 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 80199ec:	68bb      	ldr	r3, [r7, #8]
 80199ee:	685b      	ldr	r3, [r3, #4]
 80199f0:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 80199f2:	693b      	ldr	r3, [r7, #16]
 80199f4:	8afa      	ldrh	r2, [r7, #22]
 80199f6:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 80199f8:	693b      	ldr	r3, [r7, #16]
 80199fa:	2206      	movs	r2, #6
 80199fc:	6839      	ldr	r1, [r7, #0]
 80199fe:	4618      	mov	r0, r3
 8019a00:	f000 f988 	bl	8019d14 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8019a04:	693b      	ldr	r3, [r7, #16]
 8019a06:	3306      	adds	r3, #6
 8019a08:	2206      	movs	r2, #6
 8019a0a:	6879      	ldr	r1, [r7, #4]
 8019a0c:	4618      	mov	r0, r3
 8019a0e:	f000 f981 	bl	8019d14 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8019a12:	68fb      	ldr	r3, [r7, #12]
 8019a14:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8019a18:	2b06      	cmp	r3, #6
 8019a1a:	d006      	beq.n	8019a2a <ethernet_output+0x66>
 8019a1c:	4b0a      	ldr	r3, [pc, #40]	; (8019a48 <ethernet_output+0x84>)
 8019a1e:	f44f 7299 	mov.w	r2, #306	; 0x132
 8019a22:	490a      	ldr	r1, [pc, #40]	; (8019a4c <ethernet_output+0x88>)
 8019a24:	480a      	ldr	r0, [pc, #40]	; (8019a50 <ethernet_output+0x8c>)
 8019a26:	f000 fa6b 	bl	8019f00 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8019a2a:	68fb      	ldr	r3, [r7, #12]
 8019a2c:	699b      	ldr	r3, [r3, #24]
 8019a2e:	68b9      	ldr	r1, [r7, #8]
 8019a30:	68f8      	ldr	r0, [r7, #12]
 8019a32:	4798      	blx	r3
 8019a34:	4603      	mov	r3, r0
 8019a36:	e002      	b.n	8019a3e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8019a38:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8019a3a:	f06f 0301 	mvn.w	r3, #1
}
 8019a3e:	4618      	mov	r0, r3
 8019a40:	3718      	adds	r7, #24
 8019a42:	46bd      	mov	sp, r7
 8019a44:	bd80      	pop	{r7, pc}
 8019a46:	bf00      	nop
 8019a48:	0801e9a0 	.word	0x0801e9a0
 8019a4c:	0801e9d8 	.word	0x0801e9d8
 8019a50:	0801ea0c 	.word	0x0801ea0c

08019a54 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8019a54:	b580      	push	{r7, lr}
 8019a56:	b084      	sub	sp, #16
 8019a58:	af00      	add	r7, sp, #0
 8019a5a:	6078      	str	r0, [r7, #4]
 8019a5c:	6039      	str	r1, [r7, #0]
  osMessageQDef(QUEUE, size, void *);
 8019a5e:	683b      	ldr	r3, [r7, #0]
 8019a60:	60bb      	str	r3, [r7, #8]
 8019a62:	2304      	movs	r3, #4
 8019a64:	60fb      	str	r3, [r7, #12]
  
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8019a66:	f107 0308 	add.w	r3, r7, #8
 8019a6a:	2100      	movs	r1, #0
 8019a6c:	4618      	mov	r0, r3
 8019a6e:	f7ef fcdc 	bl	800942a <osMessageCreate>
 8019a72:	4602      	mov	r2, r0
 8019a74:	687b      	ldr	r3, [r7, #4]
 8019a76:	601a      	str	r2, [r3, #0]
      ++lwip_stats.sys.mbox.used;
      if (lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used) {
         lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
	  }
#endif /* SYS_STATS */
 if (*mbox == NULL)
 8019a78:	687b      	ldr	r3, [r7, #4]
 8019a7a:	681b      	ldr	r3, [r3, #0]
 8019a7c:	2b00      	cmp	r3, #0
 8019a7e:	d102      	bne.n	8019a86 <sys_mbox_new+0x32>
  return ERR_MEM;
 8019a80:	f04f 33ff 	mov.w	r3, #4294967295
 8019a84:	e000      	b.n	8019a88 <sys_mbox_new+0x34>
 
 return ERR_OK;
 8019a86:	2300      	movs	r3, #0
}
 8019a88:	4618      	mov	r0, r3
 8019a8a:	3710      	adds	r7, #16
 8019a8c:	46bd      	mov	sp, r7
 8019a8e:	bd80      	pop	{r7, pc}

08019a90 <sys_mbox_post>:
}

/*-----------------------------------------------------------------------------------*/
//   Posts the "msg" to the mailbox.
void sys_mbox_post(sys_mbox_t *mbox, void *data)
{
 8019a90:	b580      	push	{r7, lr}
 8019a92:	b082      	sub	sp, #8
 8019a94:	af00      	add	r7, sp, #0
 8019a96:	6078      	str	r0, [r7, #4]
 8019a98:	6039      	str	r1, [r7, #0]
  while(osMessagePut(*mbox, (uint32_t)data, osWaitForever) != osOK);
 8019a9a:	bf00      	nop
 8019a9c:	687b      	ldr	r3, [r7, #4]
 8019a9e:	681b      	ldr	r3, [r3, #0]
 8019aa0:	6839      	ldr	r1, [r7, #0]
 8019aa2:	f04f 32ff 	mov.w	r2, #4294967295
 8019aa6:	4618      	mov	r0, r3
 8019aa8:	f7ef fcd2 	bl	8009450 <osMessagePut>
 8019aac:	4603      	mov	r3, r0
 8019aae:	2b00      	cmp	r3, #0
 8019ab0:	d1f4      	bne.n	8019a9c <sys_mbox_post+0xc>
}
 8019ab2:	bf00      	nop
 8019ab4:	bf00      	nop
 8019ab6:	3708      	adds	r7, #8
 8019ab8:	46bd      	mov	sp, r7
 8019aba:	bd80      	pop	{r7, pc}

08019abc <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8019abc:	b580      	push	{r7, lr}
 8019abe:	b084      	sub	sp, #16
 8019ac0:	af00      	add	r7, sp, #0
 8019ac2:	6078      	str	r0, [r7, #4]
 8019ac4:	6039      	str	r1, [r7, #0]
err_t result;

   if ( osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8019ac6:	687b      	ldr	r3, [r7, #4]
 8019ac8:	681b      	ldr	r3, [r3, #0]
 8019aca:	6839      	ldr	r1, [r7, #0]
 8019acc:	2200      	movs	r2, #0
 8019ace:	4618      	mov	r0, r3
 8019ad0:	f7ef fcbe 	bl	8009450 <osMessagePut>
 8019ad4:	4603      	mov	r3, r0
 8019ad6:	2b00      	cmp	r3, #0
 8019ad8:	d102      	bne.n	8019ae0 <sys_mbox_trypost+0x24>
   {
      result = ERR_OK;
 8019ada:	2300      	movs	r3, #0
 8019adc:	73fb      	strb	r3, [r7, #15]
 8019ade:	e001      	b.n	8019ae4 <sys_mbox_trypost+0x28>
   }
   else {
      // could not post, queue must be full
      result = ERR_MEM;
 8019ae0:	23ff      	movs	r3, #255	; 0xff
 8019ae2:	73fb      	strb	r3, [r7, #15]
      lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
			
   }

   return result;
 8019ae4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8019ae8:	4618      	mov	r0, r3
 8019aea:	3710      	adds	r7, #16
 8019aec:	46bd      	mov	sp, r7
 8019aee:	bd80      	pop	{r7, pc}

08019af0 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8019af0:	b580      	push	{r7, lr}
 8019af2:	b08c      	sub	sp, #48	; 0x30
 8019af4:	af00      	add	r7, sp, #0
 8019af6:	61f8      	str	r0, [r7, #28]
 8019af8:	61b9      	str	r1, [r7, #24]
 8019afa:	617a      	str	r2, [r7, #20]
  osEvent event;
  uint32_t starttime = osKernelSysTick();;
 8019afc:	f7ef fb9b 	bl	8009236 <osKernelSysTick>
 8019b00:	62f8      	str	r0, [r7, #44]	; 0x2c
  
  if(timeout != 0)
 8019b02:	697b      	ldr	r3, [r7, #20]
 8019b04:	2b00      	cmp	r3, #0
 8019b06:	d017      	beq.n	8019b38 <sys_arch_mbox_fetch+0x48>
  { 
    event = osMessageGet (*mbox, timeout);
 8019b08:	69fb      	ldr	r3, [r7, #28]
 8019b0a:	6819      	ldr	r1, [r3, #0]
 8019b0c:	f107 0320 	add.w	r3, r7, #32
 8019b10:	697a      	ldr	r2, [r7, #20]
 8019b12:	4618      	mov	r0, r3
 8019b14:	f7ef fcdc 	bl	80094d0 <osMessageGet>
    
    if(event.status == osEventMessage)
 8019b18:	6a3b      	ldr	r3, [r7, #32]
 8019b1a:	2b10      	cmp	r3, #16
 8019b1c:	d109      	bne.n	8019b32 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8019b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019b20:	461a      	mov	r2, r3
 8019b22:	69bb      	ldr	r3, [r7, #24]
 8019b24:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8019b26:	f7ef fb86 	bl	8009236 <osKernelSysTick>
 8019b2a:	4602      	mov	r2, r0
 8019b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019b2e:	1ad3      	subs	r3, r2, r3
 8019b30:	e019      	b.n	8019b66 <sys_arch_mbox_fetch+0x76>
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 8019b32:	f04f 33ff 	mov.w	r3, #4294967295
 8019b36:	e016      	b.n	8019b66 <sys_arch_mbox_fetch+0x76>
    } 
  }
  else
  {
    event = osMessageGet (*mbox, osWaitForever);
 8019b38:	69fb      	ldr	r3, [r7, #28]
 8019b3a:	6819      	ldr	r1, [r3, #0]
 8019b3c:	463b      	mov	r3, r7
 8019b3e:	f04f 32ff 	mov.w	r2, #4294967295
 8019b42:	4618      	mov	r0, r3
 8019b44:	f7ef fcc4 	bl	80094d0 <osMessageGet>
 8019b48:	f107 0320 	add.w	r3, r7, #32
 8019b4c:	463a      	mov	r2, r7
 8019b4e:	ca07      	ldmia	r2, {r0, r1, r2}
 8019b50:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8019b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019b56:	461a      	mov	r2, r3
 8019b58:	69bb      	ldr	r3, [r7, #24]
 8019b5a:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8019b5c:	f7ef fb6b 	bl	8009236 <osKernelSysTick>
 8019b60:	4602      	mov	r2, r0
 8019b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019b64:	1ad3      	subs	r3, r2, r3
  }
}
 8019b66:	4618      	mov	r0, r3
 8019b68:	3730      	adds	r7, #48	; 0x30
 8019b6a:	46bd      	mov	sp, r7
 8019b6c:	bd80      	pop	{r7, pc}

08019b6e <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)          
{      
 8019b6e:	b480      	push	{r7}
 8019b70:	b083      	sub	sp, #12
 8019b72:	af00      	add	r7, sp, #0
 8019b74:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL) 
 8019b76:	687b      	ldr	r3, [r7, #4]
 8019b78:	681b      	ldr	r3, [r3, #0]
 8019b7a:	2b00      	cmp	r3, #0
 8019b7c:	d101      	bne.n	8019b82 <sys_mbox_valid+0x14>
    return 0;
 8019b7e:	2300      	movs	r3, #0
 8019b80:	e000      	b.n	8019b84 <sys_mbox_valid+0x16>
  else
    return 1;
 8019b82:	2301      	movs	r3, #1
}                                             
 8019b84:	4618      	mov	r0, r3
 8019b86:	370c      	adds	r7, #12
 8019b88:	46bd      	mov	sp, r7
 8019b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b8e:	4770      	bx	lr

08019b90 <sys_init>:
/*-----------------------------------------------------------------------------------*/ 
osMutexId lwip_sys_mutex;
osMutexDef(lwip_sys_mutex);
// Initialize sys arch
void sys_init(void)
{
 8019b90:	b580      	push	{r7, lr}
 8019b92:	af00      	add	r7, sp, #0
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8019b94:	4803      	ldr	r0, [pc, #12]	; (8019ba4 <sys_init+0x14>)
 8019b96:	f7ef fba5 	bl	80092e4 <osMutexCreate>
 8019b9a:	4603      	mov	r3, r0
 8019b9c:	4a02      	ldr	r2, [pc, #8]	; (8019ba8 <sys_init+0x18>)
 8019b9e:	6013      	str	r3, [r2, #0]
}
 8019ba0:	bf00      	nop
 8019ba2:	bd80      	pop	{r7, pc}
 8019ba4:	0806a440 	.word	0x0806a440
 8019ba8:	20013c58 	.word	0x20013c58

08019bac <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8019bac:	b580      	push	{r7, lr}
 8019bae:	b084      	sub	sp, #16
 8019bb0:	af00      	add	r7, sp, #0
 8019bb2:	6078      	str	r0, [r7, #4]
  
  osMutexDef(MUTEX);
 8019bb4:	2300      	movs	r3, #0
 8019bb6:	60fb      	str	r3, [r7, #12]
  
  *mutex = osMutexCreate(osMutex(MUTEX));
 8019bb8:	f107 030c 	add.w	r3, r7, #12
 8019bbc:	4618      	mov	r0, r3
 8019bbe:	f7ef fb91 	bl	80092e4 <osMutexCreate>
 8019bc2:	4602      	mov	r2, r0
 8019bc4:	687b      	ldr	r3, [r7, #4]
 8019bc6:	601a      	str	r2, [r3, #0]
  
  
  //*mutex = xSemaphoreCreateMutex();
  if(*mutex == NULL)
 8019bc8:	687b      	ldr	r3, [r7, #4]
 8019bca:	681b      	ldr	r3, [r3, #0]
 8019bcc:	2b00      	cmp	r3, #0
 8019bce:	d102      	bne.n	8019bd6 <sys_mutex_new+0x2a>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */	
    return ERR_MEM;
 8019bd0:	f04f 33ff 	mov.w	r3, #4294967295
 8019bd4:	e000      	b.n	8019bd8 <sys_mutex_new+0x2c>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8019bd6:	2300      	movs	r3, #0
}
 8019bd8:	4618      	mov	r0, r3
 8019bda:	3710      	adds	r7, #16
 8019bdc:	46bd      	mov	sp, r7
 8019bde:	bd80      	pop	{r7, pc}

08019be0 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8019be0:	b580      	push	{r7, lr}
 8019be2:	b082      	sub	sp, #8
 8019be4:	af00      	add	r7, sp, #0
 8019be6:	6078      	str	r0, [r7, #4]
  osMutexWait (*mutex, osWaitForever);
 8019be8:	687b      	ldr	r3, [r7, #4]
 8019bea:	681b      	ldr	r3, [r3, #0]
 8019bec:	f04f 31ff 	mov.w	r1, #4294967295
 8019bf0:	4618      	mov	r0, r3
 8019bf2:	f7ef fb83 	bl	80092fc <osMutexWait>
}
 8019bf6:	bf00      	nop
 8019bf8:	3708      	adds	r7, #8
 8019bfa:	46bd      	mov	sp, r7
 8019bfc:	bd80      	pop	{r7, pc}

08019bfe <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8019bfe:	b580      	push	{r7, lr}
 8019c00:	b082      	sub	sp, #8
 8019c02:	af00      	add	r7, sp, #0
 8019c04:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8019c06:	687b      	ldr	r3, [r7, #4]
 8019c08:	681b      	ldr	r3, [r3, #0]
 8019c0a:	4618      	mov	r0, r3
 8019c0c:	f7ef fbc4 	bl	8009398 <osMutexRelease>
}
 8019c10:	bf00      	nop
 8019c12:	3708      	adds	r7, #8
 8019c14:	46bd      	mov	sp, r7
 8019c16:	bd80      	pop	{r7, pc}

08019c18 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8019c18:	b580      	push	{r7, lr}
 8019c1a:	b08a      	sub	sp, #40	; 0x28
 8019c1c:	af00      	add	r7, sp, #0
 8019c1e:	60f8      	str	r0, [r7, #12]
 8019c20:	60b9      	str	r1, [r7, #8]
 8019c22:	607a      	str	r2, [r7, #4]
 8019c24:	603b      	str	r3, [r7, #0]
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8019c26:	68fb      	ldr	r3, [r7, #12]
 8019c28:	617b      	str	r3, [r7, #20]
 8019c2a:	68bb      	ldr	r3, [r7, #8]
 8019c2c:	61bb      	str	r3, [r7, #24]
 8019c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019c30:	b21b      	sxth	r3, r3
 8019c32:	83bb      	strh	r3, [r7, #28]
 8019c34:	2300      	movs	r3, #0
 8019c36:	623b      	str	r3, [r7, #32]
 8019c38:	683b      	ldr	r3, [r7, #0]
 8019c3a:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 8019c3c:	f107 0314 	add.w	r3, r7, #20
 8019c40:	6879      	ldr	r1, [r7, #4]
 8019c42:	4618      	mov	r0, r3
 8019c44:	f7ef fb07 	bl	8009256 <osThreadCreate>
 8019c48:	4603      	mov	r3, r0
}
 8019c4a:	4618      	mov	r0, r3
 8019c4c:	3728      	adds	r7, #40	; 0x28
 8019c4e:	46bd      	mov	sp, r7
 8019c50:	bd80      	pop	{r7, pc}
	...

08019c54 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8019c54:	b580      	push	{r7, lr}
 8019c56:	af00      	add	r7, sp, #0
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8019c58:	4b04      	ldr	r3, [pc, #16]	; (8019c6c <sys_arch_protect+0x18>)
 8019c5a:	681b      	ldr	r3, [r3, #0]
 8019c5c:	f04f 31ff 	mov.w	r1, #4294967295
 8019c60:	4618      	mov	r0, r3
 8019c62:	f7ef fb4b 	bl	80092fc <osMutexWait>
  return (sys_prot_t)1;
 8019c66:	2301      	movs	r3, #1
}
 8019c68:	4618      	mov	r0, r3
 8019c6a:	bd80      	pop	{r7, pc}
 8019c6c:	20013c58 	.word	0x20013c58

08019c70 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8019c70:	b580      	push	{r7, lr}
 8019c72:	b082      	sub	sp, #8
 8019c74:	af00      	add	r7, sp, #0
 8019c76:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8019c78:	4b04      	ldr	r3, [pc, #16]	; (8019c8c <sys_arch_unprotect+0x1c>)
 8019c7a:	681b      	ldr	r3, [r3, #0]
 8019c7c:	4618      	mov	r0, r3
 8019c7e:	f7ef fb8b 	bl	8009398 <osMutexRelease>
}
 8019c82:	bf00      	nop
 8019c84:	3708      	adds	r7, #8
 8019c86:	46bd      	mov	sp, r7
 8019c88:	bd80      	pop	{r7, pc}
 8019c8a:	bf00      	nop
 8019c8c:	20013c58 	.word	0x20013c58

08019c90 <__errno>:
 8019c90:	4b01      	ldr	r3, [pc, #4]	; (8019c98 <__errno+0x8>)
 8019c92:	6818      	ldr	r0, [r3, #0]
 8019c94:	4770      	bx	lr
 8019c96:	bf00      	nop
 8019c98:	200000c8 	.word	0x200000c8

08019c9c <__libc_init_array>:
 8019c9c:	b570      	push	{r4, r5, r6, lr}
 8019c9e:	4d0d      	ldr	r5, [pc, #52]	; (8019cd4 <__libc_init_array+0x38>)
 8019ca0:	4c0d      	ldr	r4, [pc, #52]	; (8019cd8 <__libc_init_array+0x3c>)
 8019ca2:	1b64      	subs	r4, r4, r5
 8019ca4:	10a4      	asrs	r4, r4, #2
 8019ca6:	2600      	movs	r6, #0
 8019ca8:	42a6      	cmp	r6, r4
 8019caa:	d109      	bne.n	8019cc0 <__libc_init_array+0x24>
 8019cac:	4d0b      	ldr	r5, [pc, #44]	; (8019cdc <__libc_init_array+0x40>)
 8019cae:	4c0c      	ldr	r4, [pc, #48]	; (8019ce0 <__libc_init_array+0x44>)
 8019cb0:	f001 f9c8 	bl	801b044 <_init>
 8019cb4:	1b64      	subs	r4, r4, r5
 8019cb6:	10a4      	asrs	r4, r4, #2
 8019cb8:	2600      	movs	r6, #0
 8019cba:	42a6      	cmp	r6, r4
 8019cbc:	d105      	bne.n	8019cca <__libc_init_array+0x2e>
 8019cbe:	bd70      	pop	{r4, r5, r6, pc}
 8019cc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8019cc4:	4798      	blx	r3
 8019cc6:	3601      	adds	r6, #1
 8019cc8:	e7ee      	b.n	8019ca8 <__libc_init_array+0xc>
 8019cca:	f855 3b04 	ldr.w	r3, [r5], #4
 8019cce:	4798      	blx	r3
 8019cd0:	3601      	adds	r6, #1
 8019cd2:	e7f2      	b.n	8019cba <__libc_init_array+0x1e>
 8019cd4:	0806a698 	.word	0x0806a698
 8019cd8:	0806a698 	.word	0x0806a698
 8019cdc:	0806a698 	.word	0x0806a698
 8019ce0:	0806a69c 	.word	0x0806a69c

08019ce4 <malloc>:
 8019ce4:	4b02      	ldr	r3, [pc, #8]	; (8019cf0 <malloc+0xc>)
 8019ce6:	4601      	mov	r1, r0
 8019ce8:	6818      	ldr	r0, [r3, #0]
 8019cea:	f000 b895 	b.w	8019e18 <_malloc_r>
 8019cee:	bf00      	nop
 8019cf0:	200000c8 	.word	0x200000c8

08019cf4 <memcmp>:
 8019cf4:	b510      	push	{r4, lr}
 8019cf6:	3901      	subs	r1, #1
 8019cf8:	4402      	add	r2, r0
 8019cfa:	4290      	cmp	r0, r2
 8019cfc:	d101      	bne.n	8019d02 <memcmp+0xe>
 8019cfe:	2000      	movs	r0, #0
 8019d00:	e005      	b.n	8019d0e <memcmp+0x1a>
 8019d02:	7803      	ldrb	r3, [r0, #0]
 8019d04:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8019d08:	42a3      	cmp	r3, r4
 8019d0a:	d001      	beq.n	8019d10 <memcmp+0x1c>
 8019d0c:	1b18      	subs	r0, r3, r4
 8019d0e:	bd10      	pop	{r4, pc}
 8019d10:	3001      	adds	r0, #1
 8019d12:	e7f2      	b.n	8019cfa <memcmp+0x6>

08019d14 <memcpy>:
 8019d14:	440a      	add	r2, r1
 8019d16:	4291      	cmp	r1, r2
 8019d18:	f100 33ff 	add.w	r3, r0, #4294967295
 8019d1c:	d100      	bne.n	8019d20 <memcpy+0xc>
 8019d1e:	4770      	bx	lr
 8019d20:	b510      	push	{r4, lr}
 8019d22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019d26:	f803 4f01 	strb.w	r4, [r3, #1]!
 8019d2a:	4291      	cmp	r1, r2
 8019d2c:	d1f9      	bne.n	8019d22 <memcpy+0xe>
 8019d2e:	bd10      	pop	{r4, pc}

08019d30 <memset>:
 8019d30:	4402      	add	r2, r0
 8019d32:	4603      	mov	r3, r0
 8019d34:	4293      	cmp	r3, r2
 8019d36:	d100      	bne.n	8019d3a <memset+0xa>
 8019d38:	4770      	bx	lr
 8019d3a:	f803 1b01 	strb.w	r1, [r3], #1
 8019d3e:	e7f9      	b.n	8019d34 <memset+0x4>

08019d40 <_free_r>:
 8019d40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019d42:	2900      	cmp	r1, #0
 8019d44:	d044      	beq.n	8019dd0 <_free_r+0x90>
 8019d46:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019d4a:	9001      	str	r0, [sp, #4]
 8019d4c:	2b00      	cmp	r3, #0
 8019d4e:	f1a1 0404 	sub.w	r4, r1, #4
 8019d52:	bfb8      	it	lt
 8019d54:	18e4      	addlt	r4, r4, r3
 8019d56:	f000 fd83 	bl	801a860 <__malloc_lock>
 8019d5a:	4a1e      	ldr	r2, [pc, #120]	; (8019dd4 <_free_r+0x94>)
 8019d5c:	9801      	ldr	r0, [sp, #4]
 8019d5e:	6813      	ldr	r3, [r2, #0]
 8019d60:	b933      	cbnz	r3, 8019d70 <_free_r+0x30>
 8019d62:	6063      	str	r3, [r4, #4]
 8019d64:	6014      	str	r4, [r2, #0]
 8019d66:	b003      	add	sp, #12
 8019d68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019d6c:	f000 bd7e 	b.w	801a86c <__malloc_unlock>
 8019d70:	42a3      	cmp	r3, r4
 8019d72:	d908      	bls.n	8019d86 <_free_r+0x46>
 8019d74:	6825      	ldr	r5, [r4, #0]
 8019d76:	1961      	adds	r1, r4, r5
 8019d78:	428b      	cmp	r3, r1
 8019d7a:	bf01      	itttt	eq
 8019d7c:	6819      	ldreq	r1, [r3, #0]
 8019d7e:	685b      	ldreq	r3, [r3, #4]
 8019d80:	1949      	addeq	r1, r1, r5
 8019d82:	6021      	streq	r1, [r4, #0]
 8019d84:	e7ed      	b.n	8019d62 <_free_r+0x22>
 8019d86:	461a      	mov	r2, r3
 8019d88:	685b      	ldr	r3, [r3, #4]
 8019d8a:	b10b      	cbz	r3, 8019d90 <_free_r+0x50>
 8019d8c:	42a3      	cmp	r3, r4
 8019d8e:	d9fa      	bls.n	8019d86 <_free_r+0x46>
 8019d90:	6811      	ldr	r1, [r2, #0]
 8019d92:	1855      	adds	r5, r2, r1
 8019d94:	42a5      	cmp	r5, r4
 8019d96:	d10b      	bne.n	8019db0 <_free_r+0x70>
 8019d98:	6824      	ldr	r4, [r4, #0]
 8019d9a:	4421      	add	r1, r4
 8019d9c:	1854      	adds	r4, r2, r1
 8019d9e:	42a3      	cmp	r3, r4
 8019da0:	6011      	str	r1, [r2, #0]
 8019da2:	d1e0      	bne.n	8019d66 <_free_r+0x26>
 8019da4:	681c      	ldr	r4, [r3, #0]
 8019da6:	685b      	ldr	r3, [r3, #4]
 8019da8:	6053      	str	r3, [r2, #4]
 8019daa:	4421      	add	r1, r4
 8019dac:	6011      	str	r1, [r2, #0]
 8019dae:	e7da      	b.n	8019d66 <_free_r+0x26>
 8019db0:	d902      	bls.n	8019db8 <_free_r+0x78>
 8019db2:	230c      	movs	r3, #12
 8019db4:	6003      	str	r3, [r0, #0]
 8019db6:	e7d6      	b.n	8019d66 <_free_r+0x26>
 8019db8:	6825      	ldr	r5, [r4, #0]
 8019dba:	1961      	adds	r1, r4, r5
 8019dbc:	428b      	cmp	r3, r1
 8019dbe:	bf04      	itt	eq
 8019dc0:	6819      	ldreq	r1, [r3, #0]
 8019dc2:	685b      	ldreq	r3, [r3, #4]
 8019dc4:	6063      	str	r3, [r4, #4]
 8019dc6:	bf04      	itt	eq
 8019dc8:	1949      	addeq	r1, r1, r5
 8019dca:	6021      	streq	r1, [r4, #0]
 8019dcc:	6054      	str	r4, [r2, #4]
 8019dce:	e7ca      	b.n	8019d66 <_free_r+0x26>
 8019dd0:	b003      	add	sp, #12
 8019dd2:	bd30      	pop	{r4, r5, pc}
 8019dd4:	20013c5c 	.word	0x20013c5c

08019dd8 <sbrk_aligned>:
 8019dd8:	b570      	push	{r4, r5, r6, lr}
 8019dda:	4e0e      	ldr	r6, [pc, #56]	; (8019e14 <sbrk_aligned+0x3c>)
 8019ddc:	460c      	mov	r4, r1
 8019dde:	6831      	ldr	r1, [r6, #0]
 8019de0:	4605      	mov	r5, r0
 8019de2:	b911      	cbnz	r1, 8019dea <sbrk_aligned+0x12>
 8019de4:	f000 f958 	bl	801a098 <_sbrk_r>
 8019de8:	6030      	str	r0, [r6, #0]
 8019dea:	4621      	mov	r1, r4
 8019dec:	4628      	mov	r0, r5
 8019dee:	f000 f953 	bl	801a098 <_sbrk_r>
 8019df2:	1c43      	adds	r3, r0, #1
 8019df4:	d00a      	beq.n	8019e0c <sbrk_aligned+0x34>
 8019df6:	1cc4      	adds	r4, r0, #3
 8019df8:	f024 0403 	bic.w	r4, r4, #3
 8019dfc:	42a0      	cmp	r0, r4
 8019dfe:	d007      	beq.n	8019e10 <sbrk_aligned+0x38>
 8019e00:	1a21      	subs	r1, r4, r0
 8019e02:	4628      	mov	r0, r5
 8019e04:	f000 f948 	bl	801a098 <_sbrk_r>
 8019e08:	3001      	adds	r0, #1
 8019e0a:	d101      	bne.n	8019e10 <sbrk_aligned+0x38>
 8019e0c:	f04f 34ff 	mov.w	r4, #4294967295
 8019e10:	4620      	mov	r0, r4
 8019e12:	bd70      	pop	{r4, r5, r6, pc}
 8019e14:	20013c60 	.word	0x20013c60

08019e18 <_malloc_r>:
 8019e18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019e1c:	1ccd      	adds	r5, r1, #3
 8019e1e:	f025 0503 	bic.w	r5, r5, #3
 8019e22:	3508      	adds	r5, #8
 8019e24:	2d0c      	cmp	r5, #12
 8019e26:	bf38      	it	cc
 8019e28:	250c      	movcc	r5, #12
 8019e2a:	2d00      	cmp	r5, #0
 8019e2c:	4607      	mov	r7, r0
 8019e2e:	db01      	blt.n	8019e34 <_malloc_r+0x1c>
 8019e30:	42a9      	cmp	r1, r5
 8019e32:	d905      	bls.n	8019e40 <_malloc_r+0x28>
 8019e34:	230c      	movs	r3, #12
 8019e36:	603b      	str	r3, [r7, #0]
 8019e38:	2600      	movs	r6, #0
 8019e3a:	4630      	mov	r0, r6
 8019e3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019e40:	4e2e      	ldr	r6, [pc, #184]	; (8019efc <_malloc_r+0xe4>)
 8019e42:	f000 fd0d 	bl	801a860 <__malloc_lock>
 8019e46:	6833      	ldr	r3, [r6, #0]
 8019e48:	461c      	mov	r4, r3
 8019e4a:	bb34      	cbnz	r4, 8019e9a <_malloc_r+0x82>
 8019e4c:	4629      	mov	r1, r5
 8019e4e:	4638      	mov	r0, r7
 8019e50:	f7ff ffc2 	bl	8019dd8 <sbrk_aligned>
 8019e54:	1c43      	adds	r3, r0, #1
 8019e56:	4604      	mov	r4, r0
 8019e58:	d14d      	bne.n	8019ef6 <_malloc_r+0xde>
 8019e5a:	6834      	ldr	r4, [r6, #0]
 8019e5c:	4626      	mov	r6, r4
 8019e5e:	2e00      	cmp	r6, #0
 8019e60:	d140      	bne.n	8019ee4 <_malloc_r+0xcc>
 8019e62:	6823      	ldr	r3, [r4, #0]
 8019e64:	4631      	mov	r1, r6
 8019e66:	4638      	mov	r0, r7
 8019e68:	eb04 0803 	add.w	r8, r4, r3
 8019e6c:	f000 f914 	bl	801a098 <_sbrk_r>
 8019e70:	4580      	cmp	r8, r0
 8019e72:	d13a      	bne.n	8019eea <_malloc_r+0xd2>
 8019e74:	6821      	ldr	r1, [r4, #0]
 8019e76:	3503      	adds	r5, #3
 8019e78:	1a6d      	subs	r5, r5, r1
 8019e7a:	f025 0503 	bic.w	r5, r5, #3
 8019e7e:	3508      	adds	r5, #8
 8019e80:	2d0c      	cmp	r5, #12
 8019e82:	bf38      	it	cc
 8019e84:	250c      	movcc	r5, #12
 8019e86:	4629      	mov	r1, r5
 8019e88:	4638      	mov	r0, r7
 8019e8a:	f7ff ffa5 	bl	8019dd8 <sbrk_aligned>
 8019e8e:	3001      	adds	r0, #1
 8019e90:	d02b      	beq.n	8019eea <_malloc_r+0xd2>
 8019e92:	6823      	ldr	r3, [r4, #0]
 8019e94:	442b      	add	r3, r5
 8019e96:	6023      	str	r3, [r4, #0]
 8019e98:	e00e      	b.n	8019eb8 <_malloc_r+0xa0>
 8019e9a:	6822      	ldr	r2, [r4, #0]
 8019e9c:	1b52      	subs	r2, r2, r5
 8019e9e:	d41e      	bmi.n	8019ede <_malloc_r+0xc6>
 8019ea0:	2a0b      	cmp	r2, #11
 8019ea2:	d916      	bls.n	8019ed2 <_malloc_r+0xba>
 8019ea4:	1961      	adds	r1, r4, r5
 8019ea6:	42a3      	cmp	r3, r4
 8019ea8:	6025      	str	r5, [r4, #0]
 8019eaa:	bf18      	it	ne
 8019eac:	6059      	strne	r1, [r3, #4]
 8019eae:	6863      	ldr	r3, [r4, #4]
 8019eb0:	bf08      	it	eq
 8019eb2:	6031      	streq	r1, [r6, #0]
 8019eb4:	5162      	str	r2, [r4, r5]
 8019eb6:	604b      	str	r3, [r1, #4]
 8019eb8:	4638      	mov	r0, r7
 8019eba:	f104 060b 	add.w	r6, r4, #11
 8019ebe:	f000 fcd5 	bl	801a86c <__malloc_unlock>
 8019ec2:	f026 0607 	bic.w	r6, r6, #7
 8019ec6:	1d23      	adds	r3, r4, #4
 8019ec8:	1af2      	subs	r2, r6, r3
 8019eca:	d0b6      	beq.n	8019e3a <_malloc_r+0x22>
 8019ecc:	1b9b      	subs	r3, r3, r6
 8019ece:	50a3      	str	r3, [r4, r2]
 8019ed0:	e7b3      	b.n	8019e3a <_malloc_r+0x22>
 8019ed2:	6862      	ldr	r2, [r4, #4]
 8019ed4:	42a3      	cmp	r3, r4
 8019ed6:	bf0c      	ite	eq
 8019ed8:	6032      	streq	r2, [r6, #0]
 8019eda:	605a      	strne	r2, [r3, #4]
 8019edc:	e7ec      	b.n	8019eb8 <_malloc_r+0xa0>
 8019ede:	4623      	mov	r3, r4
 8019ee0:	6864      	ldr	r4, [r4, #4]
 8019ee2:	e7b2      	b.n	8019e4a <_malloc_r+0x32>
 8019ee4:	4634      	mov	r4, r6
 8019ee6:	6876      	ldr	r6, [r6, #4]
 8019ee8:	e7b9      	b.n	8019e5e <_malloc_r+0x46>
 8019eea:	230c      	movs	r3, #12
 8019eec:	603b      	str	r3, [r7, #0]
 8019eee:	4638      	mov	r0, r7
 8019ef0:	f000 fcbc 	bl	801a86c <__malloc_unlock>
 8019ef4:	e7a1      	b.n	8019e3a <_malloc_r+0x22>
 8019ef6:	6025      	str	r5, [r4, #0]
 8019ef8:	e7de      	b.n	8019eb8 <_malloc_r+0xa0>
 8019efa:	bf00      	nop
 8019efc:	20013c5c 	.word	0x20013c5c

08019f00 <iprintf>:
 8019f00:	b40f      	push	{r0, r1, r2, r3}
 8019f02:	4b0a      	ldr	r3, [pc, #40]	; (8019f2c <iprintf+0x2c>)
 8019f04:	b513      	push	{r0, r1, r4, lr}
 8019f06:	681c      	ldr	r4, [r3, #0]
 8019f08:	b124      	cbz	r4, 8019f14 <iprintf+0x14>
 8019f0a:	69a3      	ldr	r3, [r4, #24]
 8019f0c:	b913      	cbnz	r3, 8019f14 <iprintf+0x14>
 8019f0e:	4620      	mov	r0, r4
 8019f10:	f000 fb8e 	bl	801a630 <__sinit>
 8019f14:	ab05      	add	r3, sp, #20
 8019f16:	9a04      	ldr	r2, [sp, #16]
 8019f18:	68a1      	ldr	r1, [r4, #8]
 8019f1a:	9301      	str	r3, [sp, #4]
 8019f1c:	4620      	mov	r0, r4
 8019f1e:	f000 fcd5 	bl	801a8cc <_vfiprintf_r>
 8019f22:	b002      	add	sp, #8
 8019f24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019f28:	b004      	add	sp, #16
 8019f2a:	4770      	bx	lr
 8019f2c:	200000c8 	.word	0x200000c8

08019f30 <_puts_r>:
 8019f30:	b570      	push	{r4, r5, r6, lr}
 8019f32:	460e      	mov	r6, r1
 8019f34:	4605      	mov	r5, r0
 8019f36:	b118      	cbz	r0, 8019f40 <_puts_r+0x10>
 8019f38:	6983      	ldr	r3, [r0, #24]
 8019f3a:	b90b      	cbnz	r3, 8019f40 <_puts_r+0x10>
 8019f3c:	f000 fb78 	bl	801a630 <__sinit>
 8019f40:	69ab      	ldr	r3, [r5, #24]
 8019f42:	68ac      	ldr	r4, [r5, #8]
 8019f44:	b913      	cbnz	r3, 8019f4c <_puts_r+0x1c>
 8019f46:	4628      	mov	r0, r5
 8019f48:	f000 fb72 	bl	801a630 <__sinit>
 8019f4c:	4b2c      	ldr	r3, [pc, #176]	; (801a000 <_puts_r+0xd0>)
 8019f4e:	429c      	cmp	r4, r3
 8019f50:	d120      	bne.n	8019f94 <_puts_r+0x64>
 8019f52:	686c      	ldr	r4, [r5, #4]
 8019f54:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019f56:	07db      	lsls	r3, r3, #31
 8019f58:	d405      	bmi.n	8019f66 <_puts_r+0x36>
 8019f5a:	89a3      	ldrh	r3, [r4, #12]
 8019f5c:	0598      	lsls	r0, r3, #22
 8019f5e:	d402      	bmi.n	8019f66 <_puts_r+0x36>
 8019f60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019f62:	f000 fc15 	bl	801a790 <__retarget_lock_acquire_recursive>
 8019f66:	89a3      	ldrh	r3, [r4, #12]
 8019f68:	0719      	lsls	r1, r3, #28
 8019f6a:	d51d      	bpl.n	8019fa8 <_puts_r+0x78>
 8019f6c:	6923      	ldr	r3, [r4, #16]
 8019f6e:	b1db      	cbz	r3, 8019fa8 <_puts_r+0x78>
 8019f70:	3e01      	subs	r6, #1
 8019f72:	68a3      	ldr	r3, [r4, #8]
 8019f74:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8019f78:	3b01      	subs	r3, #1
 8019f7a:	60a3      	str	r3, [r4, #8]
 8019f7c:	bb39      	cbnz	r1, 8019fce <_puts_r+0x9e>
 8019f7e:	2b00      	cmp	r3, #0
 8019f80:	da38      	bge.n	8019ff4 <_puts_r+0xc4>
 8019f82:	4622      	mov	r2, r4
 8019f84:	210a      	movs	r1, #10
 8019f86:	4628      	mov	r0, r5
 8019f88:	f000 f95a 	bl	801a240 <__swbuf_r>
 8019f8c:	3001      	adds	r0, #1
 8019f8e:	d011      	beq.n	8019fb4 <_puts_r+0x84>
 8019f90:	250a      	movs	r5, #10
 8019f92:	e011      	b.n	8019fb8 <_puts_r+0x88>
 8019f94:	4b1b      	ldr	r3, [pc, #108]	; (801a004 <_puts_r+0xd4>)
 8019f96:	429c      	cmp	r4, r3
 8019f98:	d101      	bne.n	8019f9e <_puts_r+0x6e>
 8019f9a:	68ac      	ldr	r4, [r5, #8]
 8019f9c:	e7da      	b.n	8019f54 <_puts_r+0x24>
 8019f9e:	4b1a      	ldr	r3, [pc, #104]	; (801a008 <_puts_r+0xd8>)
 8019fa0:	429c      	cmp	r4, r3
 8019fa2:	bf08      	it	eq
 8019fa4:	68ec      	ldreq	r4, [r5, #12]
 8019fa6:	e7d5      	b.n	8019f54 <_puts_r+0x24>
 8019fa8:	4621      	mov	r1, r4
 8019faa:	4628      	mov	r0, r5
 8019fac:	f000 f99a 	bl	801a2e4 <__swsetup_r>
 8019fb0:	2800      	cmp	r0, #0
 8019fb2:	d0dd      	beq.n	8019f70 <_puts_r+0x40>
 8019fb4:	f04f 35ff 	mov.w	r5, #4294967295
 8019fb8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019fba:	07da      	lsls	r2, r3, #31
 8019fbc:	d405      	bmi.n	8019fca <_puts_r+0x9a>
 8019fbe:	89a3      	ldrh	r3, [r4, #12]
 8019fc0:	059b      	lsls	r3, r3, #22
 8019fc2:	d402      	bmi.n	8019fca <_puts_r+0x9a>
 8019fc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019fc6:	f000 fbe4 	bl	801a792 <__retarget_lock_release_recursive>
 8019fca:	4628      	mov	r0, r5
 8019fcc:	bd70      	pop	{r4, r5, r6, pc}
 8019fce:	2b00      	cmp	r3, #0
 8019fd0:	da04      	bge.n	8019fdc <_puts_r+0xac>
 8019fd2:	69a2      	ldr	r2, [r4, #24]
 8019fd4:	429a      	cmp	r2, r3
 8019fd6:	dc06      	bgt.n	8019fe6 <_puts_r+0xb6>
 8019fd8:	290a      	cmp	r1, #10
 8019fda:	d004      	beq.n	8019fe6 <_puts_r+0xb6>
 8019fdc:	6823      	ldr	r3, [r4, #0]
 8019fde:	1c5a      	adds	r2, r3, #1
 8019fe0:	6022      	str	r2, [r4, #0]
 8019fe2:	7019      	strb	r1, [r3, #0]
 8019fe4:	e7c5      	b.n	8019f72 <_puts_r+0x42>
 8019fe6:	4622      	mov	r2, r4
 8019fe8:	4628      	mov	r0, r5
 8019fea:	f000 f929 	bl	801a240 <__swbuf_r>
 8019fee:	3001      	adds	r0, #1
 8019ff0:	d1bf      	bne.n	8019f72 <_puts_r+0x42>
 8019ff2:	e7df      	b.n	8019fb4 <_puts_r+0x84>
 8019ff4:	6823      	ldr	r3, [r4, #0]
 8019ff6:	250a      	movs	r5, #10
 8019ff8:	1c5a      	adds	r2, r3, #1
 8019ffa:	6022      	str	r2, [r4, #0]
 8019ffc:	701d      	strb	r5, [r3, #0]
 8019ffe:	e7db      	b.n	8019fb8 <_puts_r+0x88>
 801a000:	0806a61c 	.word	0x0806a61c
 801a004:	0806a63c 	.word	0x0806a63c
 801a008:	0806a5fc 	.word	0x0806a5fc

0801a00c <puts>:
 801a00c:	4b02      	ldr	r3, [pc, #8]	; (801a018 <puts+0xc>)
 801a00e:	4601      	mov	r1, r0
 801a010:	6818      	ldr	r0, [r3, #0]
 801a012:	f7ff bf8d 	b.w	8019f30 <_puts_r>
 801a016:	bf00      	nop
 801a018:	200000c8 	.word	0x200000c8

0801a01c <rand>:
 801a01c:	4b16      	ldr	r3, [pc, #88]	; (801a078 <rand+0x5c>)
 801a01e:	b510      	push	{r4, lr}
 801a020:	681c      	ldr	r4, [r3, #0]
 801a022:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801a024:	b9b3      	cbnz	r3, 801a054 <rand+0x38>
 801a026:	2018      	movs	r0, #24
 801a028:	f7ff fe5c 	bl	8019ce4 <malloc>
 801a02c:	63a0      	str	r0, [r4, #56]	; 0x38
 801a02e:	b928      	cbnz	r0, 801a03c <rand+0x20>
 801a030:	4602      	mov	r2, r0
 801a032:	4b12      	ldr	r3, [pc, #72]	; (801a07c <rand+0x60>)
 801a034:	4812      	ldr	r0, [pc, #72]	; (801a080 <rand+0x64>)
 801a036:	214e      	movs	r1, #78	; 0x4e
 801a038:	f000 f9c2 	bl	801a3c0 <__assert_func>
 801a03c:	4a11      	ldr	r2, [pc, #68]	; (801a084 <rand+0x68>)
 801a03e:	4b12      	ldr	r3, [pc, #72]	; (801a088 <rand+0x6c>)
 801a040:	e9c0 2300 	strd	r2, r3, [r0]
 801a044:	4b11      	ldr	r3, [pc, #68]	; (801a08c <rand+0x70>)
 801a046:	6083      	str	r3, [r0, #8]
 801a048:	230b      	movs	r3, #11
 801a04a:	8183      	strh	r3, [r0, #12]
 801a04c:	2201      	movs	r2, #1
 801a04e:	2300      	movs	r3, #0
 801a050:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801a054:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 801a056:	4a0e      	ldr	r2, [pc, #56]	; (801a090 <rand+0x74>)
 801a058:	6920      	ldr	r0, [r4, #16]
 801a05a:	6963      	ldr	r3, [r4, #20]
 801a05c:	490d      	ldr	r1, [pc, #52]	; (801a094 <rand+0x78>)
 801a05e:	4342      	muls	r2, r0
 801a060:	fb01 2203 	mla	r2, r1, r3, r2
 801a064:	fba0 0101 	umull	r0, r1, r0, r1
 801a068:	1c43      	adds	r3, r0, #1
 801a06a:	eb42 0001 	adc.w	r0, r2, r1
 801a06e:	e9c4 3004 	strd	r3, r0, [r4, #16]
 801a072:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801a076:	bd10      	pop	{r4, pc}
 801a078:	200000c8 	.word	0x200000c8
 801a07c:	0806a54c 	.word	0x0806a54c
 801a080:	0806a563 	.word	0x0806a563
 801a084:	abcd330e 	.word	0xabcd330e
 801a088:	e66d1234 	.word	0xe66d1234
 801a08c:	0005deec 	.word	0x0005deec
 801a090:	5851f42d 	.word	0x5851f42d
 801a094:	4c957f2d 	.word	0x4c957f2d

0801a098 <_sbrk_r>:
 801a098:	b538      	push	{r3, r4, r5, lr}
 801a09a:	4d06      	ldr	r5, [pc, #24]	; (801a0b4 <_sbrk_r+0x1c>)
 801a09c:	2300      	movs	r3, #0
 801a09e:	4604      	mov	r4, r0
 801a0a0:	4608      	mov	r0, r1
 801a0a2:	602b      	str	r3, [r5, #0]
 801a0a4:	f7e9 f9e4 	bl	8003470 <_sbrk>
 801a0a8:	1c43      	adds	r3, r0, #1
 801a0aa:	d102      	bne.n	801a0b2 <_sbrk_r+0x1a>
 801a0ac:	682b      	ldr	r3, [r5, #0]
 801a0ae:	b103      	cbz	r3, 801a0b2 <_sbrk_r+0x1a>
 801a0b0:	6023      	str	r3, [r4, #0]
 801a0b2:	bd38      	pop	{r3, r4, r5, pc}
 801a0b4:	20013c68 	.word	0x20013c68

0801a0b8 <strcpy>:
 801a0b8:	4603      	mov	r3, r0
 801a0ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 801a0be:	f803 2b01 	strb.w	r2, [r3], #1
 801a0c2:	2a00      	cmp	r2, #0
 801a0c4:	d1f9      	bne.n	801a0ba <strcpy+0x2>
 801a0c6:	4770      	bx	lr

0801a0c8 <strncmp>:
 801a0c8:	b510      	push	{r4, lr}
 801a0ca:	b17a      	cbz	r2, 801a0ec <strncmp+0x24>
 801a0cc:	4603      	mov	r3, r0
 801a0ce:	3901      	subs	r1, #1
 801a0d0:	1884      	adds	r4, r0, r2
 801a0d2:	f813 0b01 	ldrb.w	r0, [r3], #1
 801a0d6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801a0da:	4290      	cmp	r0, r2
 801a0dc:	d101      	bne.n	801a0e2 <strncmp+0x1a>
 801a0de:	42a3      	cmp	r3, r4
 801a0e0:	d101      	bne.n	801a0e6 <strncmp+0x1e>
 801a0e2:	1a80      	subs	r0, r0, r2
 801a0e4:	bd10      	pop	{r4, pc}
 801a0e6:	2800      	cmp	r0, #0
 801a0e8:	d1f3      	bne.n	801a0d2 <strncmp+0xa>
 801a0ea:	e7fa      	b.n	801a0e2 <strncmp+0x1a>
 801a0ec:	4610      	mov	r0, r2
 801a0ee:	e7f9      	b.n	801a0e4 <strncmp+0x1c>

0801a0f0 <strncpy>:
 801a0f0:	b510      	push	{r4, lr}
 801a0f2:	3901      	subs	r1, #1
 801a0f4:	4603      	mov	r3, r0
 801a0f6:	b132      	cbz	r2, 801a106 <strncpy+0x16>
 801a0f8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801a0fc:	f803 4b01 	strb.w	r4, [r3], #1
 801a100:	3a01      	subs	r2, #1
 801a102:	2c00      	cmp	r4, #0
 801a104:	d1f7      	bne.n	801a0f6 <strncpy+0x6>
 801a106:	441a      	add	r2, r3
 801a108:	2100      	movs	r1, #0
 801a10a:	4293      	cmp	r3, r2
 801a10c:	d100      	bne.n	801a110 <strncpy+0x20>
 801a10e:	bd10      	pop	{r4, pc}
 801a110:	f803 1b01 	strb.w	r1, [r3], #1
 801a114:	e7f9      	b.n	801a10a <strncpy+0x1a>
	...

0801a118 <_strtoul_l.constprop.0>:
 801a118:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a11c:	4f36      	ldr	r7, [pc, #216]	; (801a1f8 <_strtoul_l.constprop.0+0xe0>)
 801a11e:	4686      	mov	lr, r0
 801a120:	460d      	mov	r5, r1
 801a122:	4628      	mov	r0, r5
 801a124:	f815 4b01 	ldrb.w	r4, [r5], #1
 801a128:	5de6      	ldrb	r6, [r4, r7]
 801a12a:	f016 0608 	ands.w	r6, r6, #8
 801a12e:	d1f8      	bne.n	801a122 <_strtoul_l.constprop.0+0xa>
 801a130:	2c2d      	cmp	r4, #45	; 0x2d
 801a132:	d12f      	bne.n	801a194 <_strtoul_l.constprop.0+0x7c>
 801a134:	782c      	ldrb	r4, [r5, #0]
 801a136:	2601      	movs	r6, #1
 801a138:	1c85      	adds	r5, r0, #2
 801a13a:	2b00      	cmp	r3, #0
 801a13c:	d057      	beq.n	801a1ee <_strtoul_l.constprop.0+0xd6>
 801a13e:	2b10      	cmp	r3, #16
 801a140:	d109      	bne.n	801a156 <_strtoul_l.constprop.0+0x3e>
 801a142:	2c30      	cmp	r4, #48	; 0x30
 801a144:	d107      	bne.n	801a156 <_strtoul_l.constprop.0+0x3e>
 801a146:	7828      	ldrb	r0, [r5, #0]
 801a148:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 801a14c:	2858      	cmp	r0, #88	; 0x58
 801a14e:	d149      	bne.n	801a1e4 <_strtoul_l.constprop.0+0xcc>
 801a150:	786c      	ldrb	r4, [r5, #1]
 801a152:	2310      	movs	r3, #16
 801a154:	3502      	adds	r5, #2
 801a156:	f04f 38ff 	mov.w	r8, #4294967295
 801a15a:	2700      	movs	r7, #0
 801a15c:	fbb8 f8f3 	udiv	r8, r8, r3
 801a160:	fb03 f908 	mul.w	r9, r3, r8
 801a164:	ea6f 0909 	mvn.w	r9, r9
 801a168:	4638      	mov	r0, r7
 801a16a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801a16e:	f1bc 0f09 	cmp.w	ip, #9
 801a172:	d814      	bhi.n	801a19e <_strtoul_l.constprop.0+0x86>
 801a174:	4664      	mov	r4, ip
 801a176:	42a3      	cmp	r3, r4
 801a178:	dd22      	ble.n	801a1c0 <_strtoul_l.constprop.0+0xa8>
 801a17a:	2f00      	cmp	r7, #0
 801a17c:	db1d      	blt.n	801a1ba <_strtoul_l.constprop.0+0xa2>
 801a17e:	4580      	cmp	r8, r0
 801a180:	d31b      	bcc.n	801a1ba <_strtoul_l.constprop.0+0xa2>
 801a182:	d101      	bne.n	801a188 <_strtoul_l.constprop.0+0x70>
 801a184:	45a1      	cmp	r9, r4
 801a186:	db18      	blt.n	801a1ba <_strtoul_l.constprop.0+0xa2>
 801a188:	fb00 4003 	mla	r0, r0, r3, r4
 801a18c:	2701      	movs	r7, #1
 801a18e:	f815 4b01 	ldrb.w	r4, [r5], #1
 801a192:	e7ea      	b.n	801a16a <_strtoul_l.constprop.0+0x52>
 801a194:	2c2b      	cmp	r4, #43	; 0x2b
 801a196:	bf04      	itt	eq
 801a198:	782c      	ldrbeq	r4, [r5, #0]
 801a19a:	1c85      	addeq	r5, r0, #2
 801a19c:	e7cd      	b.n	801a13a <_strtoul_l.constprop.0+0x22>
 801a19e:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801a1a2:	f1bc 0f19 	cmp.w	ip, #25
 801a1a6:	d801      	bhi.n	801a1ac <_strtoul_l.constprop.0+0x94>
 801a1a8:	3c37      	subs	r4, #55	; 0x37
 801a1aa:	e7e4      	b.n	801a176 <_strtoul_l.constprop.0+0x5e>
 801a1ac:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801a1b0:	f1bc 0f19 	cmp.w	ip, #25
 801a1b4:	d804      	bhi.n	801a1c0 <_strtoul_l.constprop.0+0xa8>
 801a1b6:	3c57      	subs	r4, #87	; 0x57
 801a1b8:	e7dd      	b.n	801a176 <_strtoul_l.constprop.0+0x5e>
 801a1ba:	f04f 37ff 	mov.w	r7, #4294967295
 801a1be:	e7e6      	b.n	801a18e <_strtoul_l.constprop.0+0x76>
 801a1c0:	2f00      	cmp	r7, #0
 801a1c2:	da07      	bge.n	801a1d4 <_strtoul_l.constprop.0+0xbc>
 801a1c4:	2322      	movs	r3, #34	; 0x22
 801a1c6:	f8ce 3000 	str.w	r3, [lr]
 801a1ca:	f04f 30ff 	mov.w	r0, #4294967295
 801a1ce:	b932      	cbnz	r2, 801a1de <_strtoul_l.constprop.0+0xc6>
 801a1d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a1d4:	b106      	cbz	r6, 801a1d8 <_strtoul_l.constprop.0+0xc0>
 801a1d6:	4240      	negs	r0, r0
 801a1d8:	2a00      	cmp	r2, #0
 801a1da:	d0f9      	beq.n	801a1d0 <_strtoul_l.constprop.0+0xb8>
 801a1dc:	b107      	cbz	r7, 801a1e0 <_strtoul_l.constprop.0+0xc8>
 801a1de:	1e69      	subs	r1, r5, #1
 801a1e0:	6011      	str	r1, [r2, #0]
 801a1e2:	e7f5      	b.n	801a1d0 <_strtoul_l.constprop.0+0xb8>
 801a1e4:	2430      	movs	r4, #48	; 0x30
 801a1e6:	2b00      	cmp	r3, #0
 801a1e8:	d1b5      	bne.n	801a156 <_strtoul_l.constprop.0+0x3e>
 801a1ea:	2308      	movs	r3, #8
 801a1ec:	e7b3      	b.n	801a156 <_strtoul_l.constprop.0+0x3e>
 801a1ee:	2c30      	cmp	r4, #48	; 0x30
 801a1f0:	d0a9      	beq.n	801a146 <_strtoul_l.constprop.0+0x2e>
 801a1f2:	230a      	movs	r3, #10
 801a1f4:	e7af      	b.n	801a156 <_strtoul_l.constprop.0+0x3e>
 801a1f6:	bf00      	nop
 801a1f8:	0806a445 	.word	0x0806a445

0801a1fc <strtoul>:
 801a1fc:	4613      	mov	r3, r2
 801a1fe:	460a      	mov	r2, r1
 801a200:	4601      	mov	r1, r0
 801a202:	4802      	ldr	r0, [pc, #8]	; (801a20c <strtoul+0x10>)
 801a204:	6800      	ldr	r0, [r0, #0]
 801a206:	f7ff bf87 	b.w	801a118 <_strtoul_l.constprop.0>
 801a20a:	bf00      	nop
 801a20c:	200000c8 	.word	0x200000c8

0801a210 <viprintf>:
 801a210:	b513      	push	{r0, r1, r4, lr}
 801a212:	460b      	mov	r3, r1
 801a214:	4909      	ldr	r1, [pc, #36]	; (801a23c <viprintf+0x2c>)
 801a216:	680c      	ldr	r4, [r1, #0]
 801a218:	4602      	mov	r2, r0
 801a21a:	b144      	cbz	r4, 801a22e <viprintf+0x1e>
 801a21c:	69a1      	ldr	r1, [r4, #24]
 801a21e:	b931      	cbnz	r1, 801a22e <viprintf+0x1e>
 801a220:	e9cd 0300 	strd	r0, r3, [sp]
 801a224:	4620      	mov	r0, r4
 801a226:	f000 fa03 	bl	801a630 <__sinit>
 801a22a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801a22e:	68a1      	ldr	r1, [r4, #8]
 801a230:	4620      	mov	r0, r4
 801a232:	b002      	add	sp, #8
 801a234:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a238:	f000 bb48 	b.w	801a8cc <_vfiprintf_r>
 801a23c:	200000c8 	.word	0x200000c8

0801a240 <__swbuf_r>:
 801a240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a242:	460e      	mov	r6, r1
 801a244:	4614      	mov	r4, r2
 801a246:	4605      	mov	r5, r0
 801a248:	b118      	cbz	r0, 801a252 <__swbuf_r+0x12>
 801a24a:	6983      	ldr	r3, [r0, #24]
 801a24c:	b90b      	cbnz	r3, 801a252 <__swbuf_r+0x12>
 801a24e:	f000 f9ef 	bl	801a630 <__sinit>
 801a252:	4b21      	ldr	r3, [pc, #132]	; (801a2d8 <__swbuf_r+0x98>)
 801a254:	429c      	cmp	r4, r3
 801a256:	d12b      	bne.n	801a2b0 <__swbuf_r+0x70>
 801a258:	686c      	ldr	r4, [r5, #4]
 801a25a:	69a3      	ldr	r3, [r4, #24]
 801a25c:	60a3      	str	r3, [r4, #8]
 801a25e:	89a3      	ldrh	r3, [r4, #12]
 801a260:	071a      	lsls	r2, r3, #28
 801a262:	d52f      	bpl.n	801a2c4 <__swbuf_r+0x84>
 801a264:	6923      	ldr	r3, [r4, #16]
 801a266:	b36b      	cbz	r3, 801a2c4 <__swbuf_r+0x84>
 801a268:	6923      	ldr	r3, [r4, #16]
 801a26a:	6820      	ldr	r0, [r4, #0]
 801a26c:	1ac0      	subs	r0, r0, r3
 801a26e:	6963      	ldr	r3, [r4, #20]
 801a270:	b2f6      	uxtb	r6, r6
 801a272:	4283      	cmp	r3, r0
 801a274:	4637      	mov	r7, r6
 801a276:	dc04      	bgt.n	801a282 <__swbuf_r+0x42>
 801a278:	4621      	mov	r1, r4
 801a27a:	4628      	mov	r0, r5
 801a27c:	f000 f944 	bl	801a508 <_fflush_r>
 801a280:	bb30      	cbnz	r0, 801a2d0 <__swbuf_r+0x90>
 801a282:	68a3      	ldr	r3, [r4, #8]
 801a284:	3b01      	subs	r3, #1
 801a286:	60a3      	str	r3, [r4, #8]
 801a288:	6823      	ldr	r3, [r4, #0]
 801a28a:	1c5a      	adds	r2, r3, #1
 801a28c:	6022      	str	r2, [r4, #0]
 801a28e:	701e      	strb	r6, [r3, #0]
 801a290:	6963      	ldr	r3, [r4, #20]
 801a292:	3001      	adds	r0, #1
 801a294:	4283      	cmp	r3, r0
 801a296:	d004      	beq.n	801a2a2 <__swbuf_r+0x62>
 801a298:	89a3      	ldrh	r3, [r4, #12]
 801a29a:	07db      	lsls	r3, r3, #31
 801a29c:	d506      	bpl.n	801a2ac <__swbuf_r+0x6c>
 801a29e:	2e0a      	cmp	r6, #10
 801a2a0:	d104      	bne.n	801a2ac <__swbuf_r+0x6c>
 801a2a2:	4621      	mov	r1, r4
 801a2a4:	4628      	mov	r0, r5
 801a2a6:	f000 f92f 	bl	801a508 <_fflush_r>
 801a2aa:	b988      	cbnz	r0, 801a2d0 <__swbuf_r+0x90>
 801a2ac:	4638      	mov	r0, r7
 801a2ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a2b0:	4b0a      	ldr	r3, [pc, #40]	; (801a2dc <__swbuf_r+0x9c>)
 801a2b2:	429c      	cmp	r4, r3
 801a2b4:	d101      	bne.n	801a2ba <__swbuf_r+0x7a>
 801a2b6:	68ac      	ldr	r4, [r5, #8]
 801a2b8:	e7cf      	b.n	801a25a <__swbuf_r+0x1a>
 801a2ba:	4b09      	ldr	r3, [pc, #36]	; (801a2e0 <__swbuf_r+0xa0>)
 801a2bc:	429c      	cmp	r4, r3
 801a2be:	bf08      	it	eq
 801a2c0:	68ec      	ldreq	r4, [r5, #12]
 801a2c2:	e7ca      	b.n	801a25a <__swbuf_r+0x1a>
 801a2c4:	4621      	mov	r1, r4
 801a2c6:	4628      	mov	r0, r5
 801a2c8:	f000 f80c 	bl	801a2e4 <__swsetup_r>
 801a2cc:	2800      	cmp	r0, #0
 801a2ce:	d0cb      	beq.n	801a268 <__swbuf_r+0x28>
 801a2d0:	f04f 37ff 	mov.w	r7, #4294967295
 801a2d4:	e7ea      	b.n	801a2ac <__swbuf_r+0x6c>
 801a2d6:	bf00      	nop
 801a2d8:	0806a61c 	.word	0x0806a61c
 801a2dc:	0806a63c 	.word	0x0806a63c
 801a2e0:	0806a5fc 	.word	0x0806a5fc

0801a2e4 <__swsetup_r>:
 801a2e4:	4b32      	ldr	r3, [pc, #200]	; (801a3b0 <__swsetup_r+0xcc>)
 801a2e6:	b570      	push	{r4, r5, r6, lr}
 801a2e8:	681d      	ldr	r5, [r3, #0]
 801a2ea:	4606      	mov	r6, r0
 801a2ec:	460c      	mov	r4, r1
 801a2ee:	b125      	cbz	r5, 801a2fa <__swsetup_r+0x16>
 801a2f0:	69ab      	ldr	r3, [r5, #24]
 801a2f2:	b913      	cbnz	r3, 801a2fa <__swsetup_r+0x16>
 801a2f4:	4628      	mov	r0, r5
 801a2f6:	f000 f99b 	bl	801a630 <__sinit>
 801a2fa:	4b2e      	ldr	r3, [pc, #184]	; (801a3b4 <__swsetup_r+0xd0>)
 801a2fc:	429c      	cmp	r4, r3
 801a2fe:	d10f      	bne.n	801a320 <__swsetup_r+0x3c>
 801a300:	686c      	ldr	r4, [r5, #4]
 801a302:	89a3      	ldrh	r3, [r4, #12]
 801a304:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a308:	0719      	lsls	r1, r3, #28
 801a30a:	d42c      	bmi.n	801a366 <__swsetup_r+0x82>
 801a30c:	06dd      	lsls	r5, r3, #27
 801a30e:	d411      	bmi.n	801a334 <__swsetup_r+0x50>
 801a310:	2309      	movs	r3, #9
 801a312:	6033      	str	r3, [r6, #0]
 801a314:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801a318:	81a3      	strh	r3, [r4, #12]
 801a31a:	f04f 30ff 	mov.w	r0, #4294967295
 801a31e:	e03e      	b.n	801a39e <__swsetup_r+0xba>
 801a320:	4b25      	ldr	r3, [pc, #148]	; (801a3b8 <__swsetup_r+0xd4>)
 801a322:	429c      	cmp	r4, r3
 801a324:	d101      	bne.n	801a32a <__swsetup_r+0x46>
 801a326:	68ac      	ldr	r4, [r5, #8]
 801a328:	e7eb      	b.n	801a302 <__swsetup_r+0x1e>
 801a32a:	4b24      	ldr	r3, [pc, #144]	; (801a3bc <__swsetup_r+0xd8>)
 801a32c:	429c      	cmp	r4, r3
 801a32e:	bf08      	it	eq
 801a330:	68ec      	ldreq	r4, [r5, #12]
 801a332:	e7e6      	b.n	801a302 <__swsetup_r+0x1e>
 801a334:	0758      	lsls	r0, r3, #29
 801a336:	d512      	bpl.n	801a35e <__swsetup_r+0x7a>
 801a338:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a33a:	b141      	cbz	r1, 801a34e <__swsetup_r+0x6a>
 801a33c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a340:	4299      	cmp	r1, r3
 801a342:	d002      	beq.n	801a34a <__swsetup_r+0x66>
 801a344:	4630      	mov	r0, r6
 801a346:	f7ff fcfb 	bl	8019d40 <_free_r>
 801a34a:	2300      	movs	r3, #0
 801a34c:	6363      	str	r3, [r4, #52]	; 0x34
 801a34e:	89a3      	ldrh	r3, [r4, #12]
 801a350:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801a354:	81a3      	strh	r3, [r4, #12]
 801a356:	2300      	movs	r3, #0
 801a358:	6063      	str	r3, [r4, #4]
 801a35a:	6923      	ldr	r3, [r4, #16]
 801a35c:	6023      	str	r3, [r4, #0]
 801a35e:	89a3      	ldrh	r3, [r4, #12]
 801a360:	f043 0308 	orr.w	r3, r3, #8
 801a364:	81a3      	strh	r3, [r4, #12]
 801a366:	6923      	ldr	r3, [r4, #16]
 801a368:	b94b      	cbnz	r3, 801a37e <__swsetup_r+0x9a>
 801a36a:	89a3      	ldrh	r3, [r4, #12]
 801a36c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801a370:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a374:	d003      	beq.n	801a37e <__swsetup_r+0x9a>
 801a376:	4621      	mov	r1, r4
 801a378:	4630      	mov	r0, r6
 801a37a:	f000 fa31 	bl	801a7e0 <__smakebuf_r>
 801a37e:	89a0      	ldrh	r0, [r4, #12]
 801a380:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a384:	f010 0301 	ands.w	r3, r0, #1
 801a388:	d00a      	beq.n	801a3a0 <__swsetup_r+0xbc>
 801a38a:	2300      	movs	r3, #0
 801a38c:	60a3      	str	r3, [r4, #8]
 801a38e:	6963      	ldr	r3, [r4, #20]
 801a390:	425b      	negs	r3, r3
 801a392:	61a3      	str	r3, [r4, #24]
 801a394:	6923      	ldr	r3, [r4, #16]
 801a396:	b943      	cbnz	r3, 801a3aa <__swsetup_r+0xc6>
 801a398:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801a39c:	d1ba      	bne.n	801a314 <__swsetup_r+0x30>
 801a39e:	bd70      	pop	{r4, r5, r6, pc}
 801a3a0:	0781      	lsls	r1, r0, #30
 801a3a2:	bf58      	it	pl
 801a3a4:	6963      	ldrpl	r3, [r4, #20]
 801a3a6:	60a3      	str	r3, [r4, #8]
 801a3a8:	e7f4      	b.n	801a394 <__swsetup_r+0xb0>
 801a3aa:	2000      	movs	r0, #0
 801a3ac:	e7f7      	b.n	801a39e <__swsetup_r+0xba>
 801a3ae:	bf00      	nop
 801a3b0:	200000c8 	.word	0x200000c8
 801a3b4:	0806a61c 	.word	0x0806a61c
 801a3b8:	0806a63c 	.word	0x0806a63c
 801a3bc:	0806a5fc 	.word	0x0806a5fc

0801a3c0 <__assert_func>:
 801a3c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801a3c2:	4614      	mov	r4, r2
 801a3c4:	461a      	mov	r2, r3
 801a3c6:	4b09      	ldr	r3, [pc, #36]	; (801a3ec <__assert_func+0x2c>)
 801a3c8:	681b      	ldr	r3, [r3, #0]
 801a3ca:	4605      	mov	r5, r0
 801a3cc:	68d8      	ldr	r0, [r3, #12]
 801a3ce:	b14c      	cbz	r4, 801a3e4 <__assert_func+0x24>
 801a3d0:	4b07      	ldr	r3, [pc, #28]	; (801a3f0 <__assert_func+0x30>)
 801a3d2:	9100      	str	r1, [sp, #0]
 801a3d4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801a3d8:	4906      	ldr	r1, [pc, #24]	; (801a3f4 <__assert_func+0x34>)
 801a3da:	462b      	mov	r3, r5
 801a3dc:	f000 f9a6 	bl	801a72c <fiprintf>
 801a3e0:	f000 fd8e 	bl	801af00 <abort>
 801a3e4:	4b04      	ldr	r3, [pc, #16]	; (801a3f8 <__assert_func+0x38>)
 801a3e6:	461c      	mov	r4, r3
 801a3e8:	e7f3      	b.n	801a3d2 <__assert_func+0x12>
 801a3ea:	bf00      	nop
 801a3ec:	200000c8 	.word	0x200000c8
 801a3f0:	0806a5be 	.word	0x0806a5be
 801a3f4:	0806a5cb 	.word	0x0806a5cb
 801a3f8:	0806a5f9 	.word	0x0806a5f9

0801a3fc <__sflush_r>:
 801a3fc:	898a      	ldrh	r2, [r1, #12]
 801a3fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a402:	4605      	mov	r5, r0
 801a404:	0710      	lsls	r0, r2, #28
 801a406:	460c      	mov	r4, r1
 801a408:	d458      	bmi.n	801a4bc <__sflush_r+0xc0>
 801a40a:	684b      	ldr	r3, [r1, #4]
 801a40c:	2b00      	cmp	r3, #0
 801a40e:	dc05      	bgt.n	801a41c <__sflush_r+0x20>
 801a410:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801a412:	2b00      	cmp	r3, #0
 801a414:	dc02      	bgt.n	801a41c <__sflush_r+0x20>
 801a416:	2000      	movs	r0, #0
 801a418:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a41c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a41e:	2e00      	cmp	r6, #0
 801a420:	d0f9      	beq.n	801a416 <__sflush_r+0x1a>
 801a422:	2300      	movs	r3, #0
 801a424:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801a428:	682f      	ldr	r7, [r5, #0]
 801a42a:	602b      	str	r3, [r5, #0]
 801a42c:	d032      	beq.n	801a494 <__sflush_r+0x98>
 801a42e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801a430:	89a3      	ldrh	r3, [r4, #12]
 801a432:	075a      	lsls	r2, r3, #29
 801a434:	d505      	bpl.n	801a442 <__sflush_r+0x46>
 801a436:	6863      	ldr	r3, [r4, #4]
 801a438:	1ac0      	subs	r0, r0, r3
 801a43a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801a43c:	b10b      	cbz	r3, 801a442 <__sflush_r+0x46>
 801a43e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801a440:	1ac0      	subs	r0, r0, r3
 801a442:	2300      	movs	r3, #0
 801a444:	4602      	mov	r2, r0
 801a446:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a448:	6a21      	ldr	r1, [r4, #32]
 801a44a:	4628      	mov	r0, r5
 801a44c:	47b0      	blx	r6
 801a44e:	1c43      	adds	r3, r0, #1
 801a450:	89a3      	ldrh	r3, [r4, #12]
 801a452:	d106      	bne.n	801a462 <__sflush_r+0x66>
 801a454:	6829      	ldr	r1, [r5, #0]
 801a456:	291d      	cmp	r1, #29
 801a458:	d82c      	bhi.n	801a4b4 <__sflush_r+0xb8>
 801a45a:	4a2a      	ldr	r2, [pc, #168]	; (801a504 <__sflush_r+0x108>)
 801a45c:	40ca      	lsrs	r2, r1
 801a45e:	07d6      	lsls	r6, r2, #31
 801a460:	d528      	bpl.n	801a4b4 <__sflush_r+0xb8>
 801a462:	2200      	movs	r2, #0
 801a464:	6062      	str	r2, [r4, #4]
 801a466:	04d9      	lsls	r1, r3, #19
 801a468:	6922      	ldr	r2, [r4, #16]
 801a46a:	6022      	str	r2, [r4, #0]
 801a46c:	d504      	bpl.n	801a478 <__sflush_r+0x7c>
 801a46e:	1c42      	adds	r2, r0, #1
 801a470:	d101      	bne.n	801a476 <__sflush_r+0x7a>
 801a472:	682b      	ldr	r3, [r5, #0]
 801a474:	b903      	cbnz	r3, 801a478 <__sflush_r+0x7c>
 801a476:	6560      	str	r0, [r4, #84]	; 0x54
 801a478:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a47a:	602f      	str	r7, [r5, #0]
 801a47c:	2900      	cmp	r1, #0
 801a47e:	d0ca      	beq.n	801a416 <__sflush_r+0x1a>
 801a480:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a484:	4299      	cmp	r1, r3
 801a486:	d002      	beq.n	801a48e <__sflush_r+0x92>
 801a488:	4628      	mov	r0, r5
 801a48a:	f7ff fc59 	bl	8019d40 <_free_r>
 801a48e:	2000      	movs	r0, #0
 801a490:	6360      	str	r0, [r4, #52]	; 0x34
 801a492:	e7c1      	b.n	801a418 <__sflush_r+0x1c>
 801a494:	6a21      	ldr	r1, [r4, #32]
 801a496:	2301      	movs	r3, #1
 801a498:	4628      	mov	r0, r5
 801a49a:	47b0      	blx	r6
 801a49c:	1c41      	adds	r1, r0, #1
 801a49e:	d1c7      	bne.n	801a430 <__sflush_r+0x34>
 801a4a0:	682b      	ldr	r3, [r5, #0]
 801a4a2:	2b00      	cmp	r3, #0
 801a4a4:	d0c4      	beq.n	801a430 <__sflush_r+0x34>
 801a4a6:	2b1d      	cmp	r3, #29
 801a4a8:	d001      	beq.n	801a4ae <__sflush_r+0xb2>
 801a4aa:	2b16      	cmp	r3, #22
 801a4ac:	d101      	bne.n	801a4b2 <__sflush_r+0xb6>
 801a4ae:	602f      	str	r7, [r5, #0]
 801a4b0:	e7b1      	b.n	801a416 <__sflush_r+0x1a>
 801a4b2:	89a3      	ldrh	r3, [r4, #12]
 801a4b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a4b8:	81a3      	strh	r3, [r4, #12]
 801a4ba:	e7ad      	b.n	801a418 <__sflush_r+0x1c>
 801a4bc:	690f      	ldr	r7, [r1, #16]
 801a4be:	2f00      	cmp	r7, #0
 801a4c0:	d0a9      	beq.n	801a416 <__sflush_r+0x1a>
 801a4c2:	0793      	lsls	r3, r2, #30
 801a4c4:	680e      	ldr	r6, [r1, #0]
 801a4c6:	bf08      	it	eq
 801a4c8:	694b      	ldreq	r3, [r1, #20]
 801a4ca:	600f      	str	r7, [r1, #0]
 801a4cc:	bf18      	it	ne
 801a4ce:	2300      	movne	r3, #0
 801a4d0:	eba6 0807 	sub.w	r8, r6, r7
 801a4d4:	608b      	str	r3, [r1, #8]
 801a4d6:	f1b8 0f00 	cmp.w	r8, #0
 801a4da:	dd9c      	ble.n	801a416 <__sflush_r+0x1a>
 801a4dc:	6a21      	ldr	r1, [r4, #32]
 801a4de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801a4e0:	4643      	mov	r3, r8
 801a4e2:	463a      	mov	r2, r7
 801a4e4:	4628      	mov	r0, r5
 801a4e6:	47b0      	blx	r6
 801a4e8:	2800      	cmp	r0, #0
 801a4ea:	dc06      	bgt.n	801a4fa <__sflush_r+0xfe>
 801a4ec:	89a3      	ldrh	r3, [r4, #12]
 801a4ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a4f2:	81a3      	strh	r3, [r4, #12]
 801a4f4:	f04f 30ff 	mov.w	r0, #4294967295
 801a4f8:	e78e      	b.n	801a418 <__sflush_r+0x1c>
 801a4fa:	4407      	add	r7, r0
 801a4fc:	eba8 0800 	sub.w	r8, r8, r0
 801a500:	e7e9      	b.n	801a4d6 <__sflush_r+0xda>
 801a502:	bf00      	nop
 801a504:	20400001 	.word	0x20400001

0801a508 <_fflush_r>:
 801a508:	b538      	push	{r3, r4, r5, lr}
 801a50a:	690b      	ldr	r3, [r1, #16]
 801a50c:	4605      	mov	r5, r0
 801a50e:	460c      	mov	r4, r1
 801a510:	b913      	cbnz	r3, 801a518 <_fflush_r+0x10>
 801a512:	2500      	movs	r5, #0
 801a514:	4628      	mov	r0, r5
 801a516:	bd38      	pop	{r3, r4, r5, pc}
 801a518:	b118      	cbz	r0, 801a522 <_fflush_r+0x1a>
 801a51a:	6983      	ldr	r3, [r0, #24]
 801a51c:	b90b      	cbnz	r3, 801a522 <_fflush_r+0x1a>
 801a51e:	f000 f887 	bl	801a630 <__sinit>
 801a522:	4b14      	ldr	r3, [pc, #80]	; (801a574 <_fflush_r+0x6c>)
 801a524:	429c      	cmp	r4, r3
 801a526:	d11b      	bne.n	801a560 <_fflush_r+0x58>
 801a528:	686c      	ldr	r4, [r5, #4]
 801a52a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a52e:	2b00      	cmp	r3, #0
 801a530:	d0ef      	beq.n	801a512 <_fflush_r+0xa>
 801a532:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801a534:	07d0      	lsls	r0, r2, #31
 801a536:	d404      	bmi.n	801a542 <_fflush_r+0x3a>
 801a538:	0599      	lsls	r1, r3, #22
 801a53a:	d402      	bmi.n	801a542 <_fflush_r+0x3a>
 801a53c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a53e:	f000 f927 	bl	801a790 <__retarget_lock_acquire_recursive>
 801a542:	4628      	mov	r0, r5
 801a544:	4621      	mov	r1, r4
 801a546:	f7ff ff59 	bl	801a3fc <__sflush_r>
 801a54a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a54c:	07da      	lsls	r2, r3, #31
 801a54e:	4605      	mov	r5, r0
 801a550:	d4e0      	bmi.n	801a514 <_fflush_r+0xc>
 801a552:	89a3      	ldrh	r3, [r4, #12]
 801a554:	059b      	lsls	r3, r3, #22
 801a556:	d4dd      	bmi.n	801a514 <_fflush_r+0xc>
 801a558:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a55a:	f000 f91a 	bl	801a792 <__retarget_lock_release_recursive>
 801a55e:	e7d9      	b.n	801a514 <_fflush_r+0xc>
 801a560:	4b05      	ldr	r3, [pc, #20]	; (801a578 <_fflush_r+0x70>)
 801a562:	429c      	cmp	r4, r3
 801a564:	d101      	bne.n	801a56a <_fflush_r+0x62>
 801a566:	68ac      	ldr	r4, [r5, #8]
 801a568:	e7df      	b.n	801a52a <_fflush_r+0x22>
 801a56a:	4b04      	ldr	r3, [pc, #16]	; (801a57c <_fflush_r+0x74>)
 801a56c:	429c      	cmp	r4, r3
 801a56e:	bf08      	it	eq
 801a570:	68ec      	ldreq	r4, [r5, #12]
 801a572:	e7da      	b.n	801a52a <_fflush_r+0x22>
 801a574:	0806a61c 	.word	0x0806a61c
 801a578:	0806a63c 	.word	0x0806a63c
 801a57c:	0806a5fc 	.word	0x0806a5fc

0801a580 <std>:
 801a580:	2300      	movs	r3, #0
 801a582:	b510      	push	{r4, lr}
 801a584:	4604      	mov	r4, r0
 801a586:	e9c0 3300 	strd	r3, r3, [r0]
 801a58a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801a58e:	6083      	str	r3, [r0, #8]
 801a590:	8181      	strh	r1, [r0, #12]
 801a592:	6643      	str	r3, [r0, #100]	; 0x64
 801a594:	81c2      	strh	r2, [r0, #14]
 801a596:	6183      	str	r3, [r0, #24]
 801a598:	4619      	mov	r1, r3
 801a59a:	2208      	movs	r2, #8
 801a59c:	305c      	adds	r0, #92	; 0x5c
 801a59e:	f7ff fbc7 	bl	8019d30 <memset>
 801a5a2:	4b05      	ldr	r3, [pc, #20]	; (801a5b8 <std+0x38>)
 801a5a4:	6263      	str	r3, [r4, #36]	; 0x24
 801a5a6:	4b05      	ldr	r3, [pc, #20]	; (801a5bc <std+0x3c>)
 801a5a8:	62a3      	str	r3, [r4, #40]	; 0x28
 801a5aa:	4b05      	ldr	r3, [pc, #20]	; (801a5c0 <std+0x40>)
 801a5ac:	62e3      	str	r3, [r4, #44]	; 0x2c
 801a5ae:	4b05      	ldr	r3, [pc, #20]	; (801a5c4 <std+0x44>)
 801a5b0:	6224      	str	r4, [r4, #32]
 801a5b2:	6323      	str	r3, [r4, #48]	; 0x30
 801a5b4:	bd10      	pop	{r4, pc}
 801a5b6:	bf00      	nop
 801a5b8:	0801ae55 	.word	0x0801ae55
 801a5bc:	0801ae77 	.word	0x0801ae77
 801a5c0:	0801aeaf 	.word	0x0801aeaf
 801a5c4:	0801aed3 	.word	0x0801aed3

0801a5c8 <_cleanup_r>:
 801a5c8:	4901      	ldr	r1, [pc, #4]	; (801a5d0 <_cleanup_r+0x8>)
 801a5ca:	f000 b8c1 	b.w	801a750 <_fwalk_reent>
 801a5ce:	bf00      	nop
 801a5d0:	0801a509 	.word	0x0801a509

0801a5d4 <__sfmoreglue>:
 801a5d4:	b570      	push	{r4, r5, r6, lr}
 801a5d6:	2268      	movs	r2, #104	; 0x68
 801a5d8:	1e4d      	subs	r5, r1, #1
 801a5da:	4355      	muls	r5, r2
 801a5dc:	460e      	mov	r6, r1
 801a5de:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801a5e2:	f7ff fc19 	bl	8019e18 <_malloc_r>
 801a5e6:	4604      	mov	r4, r0
 801a5e8:	b140      	cbz	r0, 801a5fc <__sfmoreglue+0x28>
 801a5ea:	2100      	movs	r1, #0
 801a5ec:	e9c0 1600 	strd	r1, r6, [r0]
 801a5f0:	300c      	adds	r0, #12
 801a5f2:	60a0      	str	r0, [r4, #8]
 801a5f4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801a5f8:	f7ff fb9a 	bl	8019d30 <memset>
 801a5fc:	4620      	mov	r0, r4
 801a5fe:	bd70      	pop	{r4, r5, r6, pc}

0801a600 <__sfp_lock_acquire>:
 801a600:	4801      	ldr	r0, [pc, #4]	; (801a608 <__sfp_lock_acquire+0x8>)
 801a602:	f000 b8c5 	b.w	801a790 <__retarget_lock_acquire_recursive>
 801a606:	bf00      	nop
 801a608:	20013c65 	.word	0x20013c65

0801a60c <__sfp_lock_release>:
 801a60c:	4801      	ldr	r0, [pc, #4]	; (801a614 <__sfp_lock_release+0x8>)
 801a60e:	f000 b8c0 	b.w	801a792 <__retarget_lock_release_recursive>
 801a612:	bf00      	nop
 801a614:	20013c65 	.word	0x20013c65

0801a618 <__sinit_lock_acquire>:
 801a618:	4801      	ldr	r0, [pc, #4]	; (801a620 <__sinit_lock_acquire+0x8>)
 801a61a:	f000 b8b9 	b.w	801a790 <__retarget_lock_acquire_recursive>
 801a61e:	bf00      	nop
 801a620:	20013c66 	.word	0x20013c66

0801a624 <__sinit_lock_release>:
 801a624:	4801      	ldr	r0, [pc, #4]	; (801a62c <__sinit_lock_release+0x8>)
 801a626:	f000 b8b4 	b.w	801a792 <__retarget_lock_release_recursive>
 801a62a:	bf00      	nop
 801a62c:	20013c66 	.word	0x20013c66

0801a630 <__sinit>:
 801a630:	b510      	push	{r4, lr}
 801a632:	4604      	mov	r4, r0
 801a634:	f7ff fff0 	bl	801a618 <__sinit_lock_acquire>
 801a638:	69a3      	ldr	r3, [r4, #24]
 801a63a:	b11b      	cbz	r3, 801a644 <__sinit+0x14>
 801a63c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a640:	f7ff bff0 	b.w	801a624 <__sinit_lock_release>
 801a644:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801a648:	6523      	str	r3, [r4, #80]	; 0x50
 801a64a:	4b13      	ldr	r3, [pc, #76]	; (801a698 <__sinit+0x68>)
 801a64c:	4a13      	ldr	r2, [pc, #76]	; (801a69c <__sinit+0x6c>)
 801a64e:	681b      	ldr	r3, [r3, #0]
 801a650:	62a2      	str	r2, [r4, #40]	; 0x28
 801a652:	42a3      	cmp	r3, r4
 801a654:	bf04      	itt	eq
 801a656:	2301      	moveq	r3, #1
 801a658:	61a3      	streq	r3, [r4, #24]
 801a65a:	4620      	mov	r0, r4
 801a65c:	f000 f820 	bl	801a6a0 <__sfp>
 801a660:	6060      	str	r0, [r4, #4]
 801a662:	4620      	mov	r0, r4
 801a664:	f000 f81c 	bl	801a6a0 <__sfp>
 801a668:	60a0      	str	r0, [r4, #8]
 801a66a:	4620      	mov	r0, r4
 801a66c:	f000 f818 	bl	801a6a0 <__sfp>
 801a670:	2200      	movs	r2, #0
 801a672:	60e0      	str	r0, [r4, #12]
 801a674:	2104      	movs	r1, #4
 801a676:	6860      	ldr	r0, [r4, #4]
 801a678:	f7ff ff82 	bl	801a580 <std>
 801a67c:	68a0      	ldr	r0, [r4, #8]
 801a67e:	2201      	movs	r2, #1
 801a680:	2109      	movs	r1, #9
 801a682:	f7ff ff7d 	bl	801a580 <std>
 801a686:	68e0      	ldr	r0, [r4, #12]
 801a688:	2202      	movs	r2, #2
 801a68a:	2112      	movs	r1, #18
 801a68c:	f7ff ff78 	bl	801a580 <std>
 801a690:	2301      	movs	r3, #1
 801a692:	61a3      	str	r3, [r4, #24]
 801a694:	e7d2      	b.n	801a63c <__sinit+0xc>
 801a696:	bf00      	nop
 801a698:	0806a548 	.word	0x0806a548
 801a69c:	0801a5c9 	.word	0x0801a5c9

0801a6a0 <__sfp>:
 801a6a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a6a2:	4607      	mov	r7, r0
 801a6a4:	f7ff ffac 	bl	801a600 <__sfp_lock_acquire>
 801a6a8:	4b1e      	ldr	r3, [pc, #120]	; (801a724 <__sfp+0x84>)
 801a6aa:	681e      	ldr	r6, [r3, #0]
 801a6ac:	69b3      	ldr	r3, [r6, #24]
 801a6ae:	b913      	cbnz	r3, 801a6b6 <__sfp+0x16>
 801a6b0:	4630      	mov	r0, r6
 801a6b2:	f7ff ffbd 	bl	801a630 <__sinit>
 801a6b6:	3648      	adds	r6, #72	; 0x48
 801a6b8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801a6bc:	3b01      	subs	r3, #1
 801a6be:	d503      	bpl.n	801a6c8 <__sfp+0x28>
 801a6c0:	6833      	ldr	r3, [r6, #0]
 801a6c2:	b30b      	cbz	r3, 801a708 <__sfp+0x68>
 801a6c4:	6836      	ldr	r6, [r6, #0]
 801a6c6:	e7f7      	b.n	801a6b8 <__sfp+0x18>
 801a6c8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801a6cc:	b9d5      	cbnz	r5, 801a704 <__sfp+0x64>
 801a6ce:	4b16      	ldr	r3, [pc, #88]	; (801a728 <__sfp+0x88>)
 801a6d0:	60e3      	str	r3, [r4, #12]
 801a6d2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801a6d6:	6665      	str	r5, [r4, #100]	; 0x64
 801a6d8:	f000 f859 	bl	801a78e <__retarget_lock_init_recursive>
 801a6dc:	f7ff ff96 	bl	801a60c <__sfp_lock_release>
 801a6e0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801a6e4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801a6e8:	6025      	str	r5, [r4, #0]
 801a6ea:	61a5      	str	r5, [r4, #24]
 801a6ec:	2208      	movs	r2, #8
 801a6ee:	4629      	mov	r1, r5
 801a6f0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801a6f4:	f7ff fb1c 	bl	8019d30 <memset>
 801a6f8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801a6fc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801a700:	4620      	mov	r0, r4
 801a702:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a704:	3468      	adds	r4, #104	; 0x68
 801a706:	e7d9      	b.n	801a6bc <__sfp+0x1c>
 801a708:	2104      	movs	r1, #4
 801a70a:	4638      	mov	r0, r7
 801a70c:	f7ff ff62 	bl	801a5d4 <__sfmoreglue>
 801a710:	4604      	mov	r4, r0
 801a712:	6030      	str	r0, [r6, #0]
 801a714:	2800      	cmp	r0, #0
 801a716:	d1d5      	bne.n	801a6c4 <__sfp+0x24>
 801a718:	f7ff ff78 	bl	801a60c <__sfp_lock_release>
 801a71c:	230c      	movs	r3, #12
 801a71e:	603b      	str	r3, [r7, #0]
 801a720:	e7ee      	b.n	801a700 <__sfp+0x60>
 801a722:	bf00      	nop
 801a724:	0806a548 	.word	0x0806a548
 801a728:	ffff0001 	.word	0xffff0001

0801a72c <fiprintf>:
 801a72c:	b40e      	push	{r1, r2, r3}
 801a72e:	b503      	push	{r0, r1, lr}
 801a730:	4601      	mov	r1, r0
 801a732:	ab03      	add	r3, sp, #12
 801a734:	4805      	ldr	r0, [pc, #20]	; (801a74c <fiprintf+0x20>)
 801a736:	f853 2b04 	ldr.w	r2, [r3], #4
 801a73a:	6800      	ldr	r0, [r0, #0]
 801a73c:	9301      	str	r3, [sp, #4]
 801a73e:	f000 f8c5 	bl	801a8cc <_vfiprintf_r>
 801a742:	b002      	add	sp, #8
 801a744:	f85d eb04 	ldr.w	lr, [sp], #4
 801a748:	b003      	add	sp, #12
 801a74a:	4770      	bx	lr
 801a74c:	200000c8 	.word	0x200000c8

0801a750 <_fwalk_reent>:
 801a750:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a754:	4606      	mov	r6, r0
 801a756:	4688      	mov	r8, r1
 801a758:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801a75c:	2700      	movs	r7, #0
 801a75e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801a762:	f1b9 0901 	subs.w	r9, r9, #1
 801a766:	d505      	bpl.n	801a774 <_fwalk_reent+0x24>
 801a768:	6824      	ldr	r4, [r4, #0]
 801a76a:	2c00      	cmp	r4, #0
 801a76c:	d1f7      	bne.n	801a75e <_fwalk_reent+0xe>
 801a76e:	4638      	mov	r0, r7
 801a770:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a774:	89ab      	ldrh	r3, [r5, #12]
 801a776:	2b01      	cmp	r3, #1
 801a778:	d907      	bls.n	801a78a <_fwalk_reent+0x3a>
 801a77a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801a77e:	3301      	adds	r3, #1
 801a780:	d003      	beq.n	801a78a <_fwalk_reent+0x3a>
 801a782:	4629      	mov	r1, r5
 801a784:	4630      	mov	r0, r6
 801a786:	47c0      	blx	r8
 801a788:	4307      	orrs	r7, r0
 801a78a:	3568      	adds	r5, #104	; 0x68
 801a78c:	e7e9      	b.n	801a762 <_fwalk_reent+0x12>

0801a78e <__retarget_lock_init_recursive>:
 801a78e:	4770      	bx	lr

0801a790 <__retarget_lock_acquire_recursive>:
 801a790:	4770      	bx	lr

0801a792 <__retarget_lock_release_recursive>:
 801a792:	4770      	bx	lr

0801a794 <__swhatbuf_r>:
 801a794:	b570      	push	{r4, r5, r6, lr}
 801a796:	460e      	mov	r6, r1
 801a798:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a79c:	2900      	cmp	r1, #0
 801a79e:	b096      	sub	sp, #88	; 0x58
 801a7a0:	4614      	mov	r4, r2
 801a7a2:	461d      	mov	r5, r3
 801a7a4:	da08      	bge.n	801a7b8 <__swhatbuf_r+0x24>
 801a7a6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801a7aa:	2200      	movs	r2, #0
 801a7ac:	602a      	str	r2, [r5, #0]
 801a7ae:	061a      	lsls	r2, r3, #24
 801a7b0:	d410      	bmi.n	801a7d4 <__swhatbuf_r+0x40>
 801a7b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801a7b6:	e00e      	b.n	801a7d6 <__swhatbuf_r+0x42>
 801a7b8:	466a      	mov	r2, sp
 801a7ba:	f000 fbb9 	bl	801af30 <_fstat_r>
 801a7be:	2800      	cmp	r0, #0
 801a7c0:	dbf1      	blt.n	801a7a6 <__swhatbuf_r+0x12>
 801a7c2:	9a01      	ldr	r2, [sp, #4]
 801a7c4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801a7c8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801a7cc:	425a      	negs	r2, r3
 801a7ce:	415a      	adcs	r2, r3
 801a7d0:	602a      	str	r2, [r5, #0]
 801a7d2:	e7ee      	b.n	801a7b2 <__swhatbuf_r+0x1e>
 801a7d4:	2340      	movs	r3, #64	; 0x40
 801a7d6:	2000      	movs	r0, #0
 801a7d8:	6023      	str	r3, [r4, #0]
 801a7da:	b016      	add	sp, #88	; 0x58
 801a7dc:	bd70      	pop	{r4, r5, r6, pc}
	...

0801a7e0 <__smakebuf_r>:
 801a7e0:	898b      	ldrh	r3, [r1, #12]
 801a7e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801a7e4:	079d      	lsls	r5, r3, #30
 801a7e6:	4606      	mov	r6, r0
 801a7e8:	460c      	mov	r4, r1
 801a7ea:	d507      	bpl.n	801a7fc <__smakebuf_r+0x1c>
 801a7ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801a7f0:	6023      	str	r3, [r4, #0]
 801a7f2:	6123      	str	r3, [r4, #16]
 801a7f4:	2301      	movs	r3, #1
 801a7f6:	6163      	str	r3, [r4, #20]
 801a7f8:	b002      	add	sp, #8
 801a7fa:	bd70      	pop	{r4, r5, r6, pc}
 801a7fc:	ab01      	add	r3, sp, #4
 801a7fe:	466a      	mov	r2, sp
 801a800:	f7ff ffc8 	bl	801a794 <__swhatbuf_r>
 801a804:	9900      	ldr	r1, [sp, #0]
 801a806:	4605      	mov	r5, r0
 801a808:	4630      	mov	r0, r6
 801a80a:	f7ff fb05 	bl	8019e18 <_malloc_r>
 801a80e:	b948      	cbnz	r0, 801a824 <__smakebuf_r+0x44>
 801a810:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a814:	059a      	lsls	r2, r3, #22
 801a816:	d4ef      	bmi.n	801a7f8 <__smakebuf_r+0x18>
 801a818:	f023 0303 	bic.w	r3, r3, #3
 801a81c:	f043 0302 	orr.w	r3, r3, #2
 801a820:	81a3      	strh	r3, [r4, #12]
 801a822:	e7e3      	b.n	801a7ec <__smakebuf_r+0xc>
 801a824:	4b0d      	ldr	r3, [pc, #52]	; (801a85c <__smakebuf_r+0x7c>)
 801a826:	62b3      	str	r3, [r6, #40]	; 0x28
 801a828:	89a3      	ldrh	r3, [r4, #12]
 801a82a:	6020      	str	r0, [r4, #0]
 801a82c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a830:	81a3      	strh	r3, [r4, #12]
 801a832:	9b00      	ldr	r3, [sp, #0]
 801a834:	6163      	str	r3, [r4, #20]
 801a836:	9b01      	ldr	r3, [sp, #4]
 801a838:	6120      	str	r0, [r4, #16]
 801a83a:	b15b      	cbz	r3, 801a854 <__smakebuf_r+0x74>
 801a83c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a840:	4630      	mov	r0, r6
 801a842:	f000 fb87 	bl	801af54 <_isatty_r>
 801a846:	b128      	cbz	r0, 801a854 <__smakebuf_r+0x74>
 801a848:	89a3      	ldrh	r3, [r4, #12]
 801a84a:	f023 0303 	bic.w	r3, r3, #3
 801a84e:	f043 0301 	orr.w	r3, r3, #1
 801a852:	81a3      	strh	r3, [r4, #12]
 801a854:	89a0      	ldrh	r0, [r4, #12]
 801a856:	4305      	orrs	r5, r0
 801a858:	81a5      	strh	r5, [r4, #12]
 801a85a:	e7cd      	b.n	801a7f8 <__smakebuf_r+0x18>
 801a85c:	0801a5c9 	.word	0x0801a5c9

0801a860 <__malloc_lock>:
 801a860:	4801      	ldr	r0, [pc, #4]	; (801a868 <__malloc_lock+0x8>)
 801a862:	f7ff bf95 	b.w	801a790 <__retarget_lock_acquire_recursive>
 801a866:	bf00      	nop
 801a868:	20013c64 	.word	0x20013c64

0801a86c <__malloc_unlock>:
 801a86c:	4801      	ldr	r0, [pc, #4]	; (801a874 <__malloc_unlock+0x8>)
 801a86e:	f7ff bf90 	b.w	801a792 <__retarget_lock_release_recursive>
 801a872:	bf00      	nop
 801a874:	20013c64 	.word	0x20013c64

0801a878 <__sfputc_r>:
 801a878:	6893      	ldr	r3, [r2, #8]
 801a87a:	3b01      	subs	r3, #1
 801a87c:	2b00      	cmp	r3, #0
 801a87e:	b410      	push	{r4}
 801a880:	6093      	str	r3, [r2, #8]
 801a882:	da08      	bge.n	801a896 <__sfputc_r+0x1e>
 801a884:	6994      	ldr	r4, [r2, #24]
 801a886:	42a3      	cmp	r3, r4
 801a888:	db01      	blt.n	801a88e <__sfputc_r+0x16>
 801a88a:	290a      	cmp	r1, #10
 801a88c:	d103      	bne.n	801a896 <__sfputc_r+0x1e>
 801a88e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a892:	f7ff bcd5 	b.w	801a240 <__swbuf_r>
 801a896:	6813      	ldr	r3, [r2, #0]
 801a898:	1c58      	adds	r0, r3, #1
 801a89a:	6010      	str	r0, [r2, #0]
 801a89c:	7019      	strb	r1, [r3, #0]
 801a89e:	4608      	mov	r0, r1
 801a8a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a8a4:	4770      	bx	lr

0801a8a6 <__sfputs_r>:
 801a8a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a8a8:	4606      	mov	r6, r0
 801a8aa:	460f      	mov	r7, r1
 801a8ac:	4614      	mov	r4, r2
 801a8ae:	18d5      	adds	r5, r2, r3
 801a8b0:	42ac      	cmp	r4, r5
 801a8b2:	d101      	bne.n	801a8b8 <__sfputs_r+0x12>
 801a8b4:	2000      	movs	r0, #0
 801a8b6:	e007      	b.n	801a8c8 <__sfputs_r+0x22>
 801a8b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a8bc:	463a      	mov	r2, r7
 801a8be:	4630      	mov	r0, r6
 801a8c0:	f7ff ffda 	bl	801a878 <__sfputc_r>
 801a8c4:	1c43      	adds	r3, r0, #1
 801a8c6:	d1f3      	bne.n	801a8b0 <__sfputs_r+0xa>
 801a8c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801a8cc <_vfiprintf_r>:
 801a8cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a8d0:	460d      	mov	r5, r1
 801a8d2:	b09d      	sub	sp, #116	; 0x74
 801a8d4:	4614      	mov	r4, r2
 801a8d6:	4698      	mov	r8, r3
 801a8d8:	4606      	mov	r6, r0
 801a8da:	b118      	cbz	r0, 801a8e4 <_vfiprintf_r+0x18>
 801a8dc:	6983      	ldr	r3, [r0, #24]
 801a8de:	b90b      	cbnz	r3, 801a8e4 <_vfiprintf_r+0x18>
 801a8e0:	f7ff fea6 	bl	801a630 <__sinit>
 801a8e4:	4b89      	ldr	r3, [pc, #548]	; (801ab0c <_vfiprintf_r+0x240>)
 801a8e6:	429d      	cmp	r5, r3
 801a8e8:	d11b      	bne.n	801a922 <_vfiprintf_r+0x56>
 801a8ea:	6875      	ldr	r5, [r6, #4]
 801a8ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a8ee:	07d9      	lsls	r1, r3, #31
 801a8f0:	d405      	bmi.n	801a8fe <_vfiprintf_r+0x32>
 801a8f2:	89ab      	ldrh	r3, [r5, #12]
 801a8f4:	059a      	lsls	r2, r3, #22
 801a8f6:	d402      	bmi.n	801a8fe <_vfiprintf_r+0x32>
 801a8f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a8fa:	f7ff ff49 	bl	801a790 <__retarget_lock_acquire_recursive>
 801a8fe:	89ab      	ldrh	r3, [r5, #12]
 801a900:	071b      	lsls	r3, r3, #28
 801a902:	d501      	bpl.n	801a908 <_vfiprintf_r+0x3c>
 801a904:	692b      	ldr	r3, [r5, #16]
 801a906:	b9eb      	cbnz	r3, 801a944 <_vfiprintf_r+0x78>
 801a908:	4629      	mov	r1, r5
 801a90a:	4630      	mov	r0, r6
 801a90c:	f7ff fcea 	bl	801a2e4 <__swsetup_r>
 801a910:	b1c0      	cbz	r0, 801a944 <_vfiprintf_r+0x78>
 801a912:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a914:	07dc      	lsls	r4, r3, #31
 801a916:	d50e      	bpl.n	801a936 <_vfiprintf_r+0x6a>
 801a918:	f04f 30ff 	mov.w	r0, #4294967295
 801a91c:	b01d      	add	sp, #116	; 0x74
 801a91e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a922:	4b7b      	ldr	r3, [pc, #492]	; (801ab10 <_vfiprintf_r+0x244>)
 801a924:	429d      	cmp	r5, r3
 801a926:	d101      	bne.n	801a92c <_vfiprintf_r+0x60>
 801a928:	68b5      	ldr	r5, [r6, #8]
 801a92a:	e7df      	b.n	801a8ec <_vfiprintf_r+0x20>
 801a92c:	4b79      	ldr	r3, [pc, #484]	; (801ab14 <_vfiprintf_r+0x248>)
 801a92e:	429d      	cmp	r5, r3
 801a930:	bf08      	it	eq
 801a932:	68f5      	ldreq	r5, [r6, #12]
 801a934:	e7da      	b.n	801a8ec <_vfiprintf_r+0x20>
 801a936:	89ab      	ldrh	r3, [r5, #12]
 801a938:	0598      	lsls	r0, r3, #22
 801a93a:	d4ed      	bmi.n	801a918 <_vfiprintf_r+0x4c>
 801a93c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a93e:	f7ff ff28 	bl	801a792 <__retarget_lock_release_recursive>
 801a942:	e7e9      	b.n	801a918 <_vfiprintf_r+0x4c>
 801a944:	2300      	movs	r3, #0
 801a946:	9309      	str	r3, [sp, #36]	; 0x24
 801a948:	2320      	movs	r3, #32
 801a94a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a94e:	f8cd 800c 	str.w	r8, [sp, #12]
 801a952:	2330      	movs	r3, #48	; 0x30
 801a954:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801ab18 <_vfiprintf_r+0x24c>
 801a958:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a95c:	f04f 0901 	mov.w	r9, #1
 801a960:	4623      	mov	r3, r4
 801a962:	469a      	mov	sl, r3
 801a964:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a968:	b10a      	cbz	r2, 801a96e <_vfiprintf_r+0xa2>
 801a96a:	2a25      	cmp	r2, #37	; 0x25
 801a96c:	d1f9      	bne.n	801a962 <_vfiprintf_r+0x96>
 801a96e:	ebba 0b04 	subs.w	fp, sl, r4
 801a972:	d00b      	beq.n	801a98c <_vfiprintf_r+0xc0>
 801a974:	465b      	mov	r3, fp
 801a976:	4622      	mov	r2, r4
 801a978:	4629      	mov	r1, r5
 801a97a:	4630      	mov	r0, r6
 801a97c:	f7ff ff93 	bl	801a8a6 <__sfputs_r>
 801a980:	3001      	adds	r0, #1
 801a982:	f000 80aa 	beq.w	801aada <_vfiprintf_r+0x20e>
 801a986:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a988:	445a      	add	r2, fp
 801a98a:	9209      	str	r2, [sp, #36]	; 0x24
 801a98c:	f89a 3000 	ldrb.w	r3, [sl]
 801a990:	2b00      	cmp	r3, #0
 801a992:	f000 80a2 	beq.w	801aada <_vfiprintf_r+0x20e>
 801a996:	2300      	movs	r3, #0
 801a998:	f04f 32ff 	mov.w	r2, #4294967295
 801a99c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a9a0:	f10a 0a01 	add.w	sl, sl, #1
 801a9a4:	9304      	str	r3, [sp, #16]
 801a9a6:	9307      	str	r3, [sp, #28]
 801a9a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801a9ac:	931a      	str	r3, [sp, #104]	; 0x68
 801a9ae:	4654      	mov	r4, sl
 801a9b0:	2205      	movs	r2, #5
 801a9b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a9b6:	4858      	ldr	r0, [pc, #352]	; (801ab18 <_vfiprintf_r+0x24c>)
 801a9b8:	f7e5 fc2a 	bl	8000210 <memchr>
 801a9bc:	9a04      	ldr	r2, [sp, #16]
 801a9be:	b9d8      	cbnz	r0, 801a9f8 <_vfiprintf_r+0x12c>
 801a9c0:	06d1      	lsls	r1, r2, #27
 801a9c2:	bf44      	itt	mi
 801a9c4:	2320      	movmi	r3, #32
 801a9c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a9ca:	0713      	lsls	r3, r2, #28
 801a9cc:	bf44      	itt	mi
 801a9ce:	232b      	movmi	r3, #43	; 0x2b
 801a9d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a9d4:	f89a 3000 	ldrb.w	r3, [sl]
 801a9d8:	2b2a      	cmp	r3, #42	; 0x2a
 801a9da:	d015      	beq.n	801aa08 <_vfiprintf_r+0x13c>
 801a9dc:	9a07      	ldr	r2, [sp, #28]
 801a9de:	4654      	mov	r4, sl
 801a9e0:	2000      	movs	r0, #0
 801a9e2:	f04f 0c0a 	mov.w	ip, #10
 801a9e6:	4621      	mov	r1, r4
 801a9e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a9ec:	3b30      	subs	r3, #48	; 0x30
 801a9ee:	2b09      	cmp	r3, #9
 801a9f0:	d94e      	bls.n	801aa90 <_vfiprintf_r+0x1c4>
 801a9f2:	b1b0      	cbz	r0, 801aa22 <_vfiprintf_r+0x156>
 801a9f4:	9207      	str	r2, [sp, #28]
 801a9f6:	e014      	b.n	801aa22 <_vfiprintf_r+0x156>
 801a9f8:	eba0 0308 	sub.w	r3, r0, r8
 801a9fc:	fa09 f303 	lsl.w	r3, r9, r3
 801aa00:	4313      	orrs	r3, r2
 801aa02:	9304      	str	r3, [sp, #16]
 801aa04:	46a2      	mov	sl, r4
 801aa06:	e7d2      	b.n	801a9ae <_vfiprintf_r+0xe2>
 801aa08:	9b03      	ldr	r3, [sp, #12]
 801aa0a:	1d19      	adds	r1, r3, #4
 801aa0c:	681b      	ldr	r3, [r3, #0]
 801aa0e:	9103      	str	r1, [sp, #12]
 801aa10:	2b00      	cmp	r3, #0
 801aa12:	bfbb      	ittet	lt
 801aa14:	425b      	neglt	r3, r3
 801aa16:	f042 0202 	orrlt.w	r2, r2, #2
 801aa1a:	9307      	strge	r3, [sp, #28]
 801aa1c:	9307      	strlt	r3, [sp, #28]
 801aa1e:	bfb8      	it	lt
 801aa20:	9204      	strlt	r2, [sp, #16]
 801aa22:	7823      	ldrb	r3, [r4, #0]
 801aa24:	2b2e      	cmp	r3, #46	; 0x2e
 801aa26:	d10c      	bne.n	801aa42 <_vfiprintf_r+0x176>
 801aa28:	7863      	ldrb	r3, [r4, #1]
 801aa2a:	2b2a      	cmp	r3, #42	; 0x2a
 801aa2c:	d135      	bne.n	801aa9a <_vfiprintf_r+0x1ce>
 801aa2e:	9b03      	ldr	r3, [sp, #12]
 801aa30:	1d1a      	adds	r2, r3, #4
 801aa32:	681b      	ldr	r3, [r3, #0]
 801aa34:	9203      	str	r2, [sp, #12]
 801aa36:	2b00      	cmp	r3, #0
 801aa38:	bfb8      	it	lt
 801aa3a:	f04f 33ff 	movlt.w	r3, #4294967295
 801aa3e:	3402      	adds	r4, #2
 801aa40:	9305      	str	r3, [sp, #20]
 801aa42:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801ab28 <_vfiprintf_r+0x25c>
 801aa46:	7821      	ldrb	r1, [r4, #0]
 801aa48:	2203      	movs	r2, #3
 801aa4a:	4650      	mov	r0, sl
 801aa4c:	f7e5 fbe0 	bl	8000210 <memchr>
 801aa50:	b140      	cbz	r0, 801aa64 <_vfiprintf_r+0x198>
 801aa52:	2340      	movs	r3, #64	; 0x40
 801aa54:	eba0 000a 	sub.w	r0, r0, sl
 801aa58:	fa03 f000 	lsl.w	r0, r3, r0
 801aa5c:	9b04      	ldr	r3, [sp, #16]
 801aa5e:	4303      	orrs	r3, r0
 801aa60:	3401      	adds	r4, #1
 801aa62:	9304      	str	r3, [sp, #16]
 801aa64:	f814 1b01 	ldrb.w	r1, [r4], #1
 801aa68:	482c      	ldr	r0, [pc, #176]	; (801ab1c <_vfiprintf_r+0x250>)
 801aa6a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801aa6e:	2206      	movs	r2, #6
 801aa70:	f7e5 fbce 	bl	8000210 <memchr>
 801aa74:	2800      	cmp	r0, #0
 801aa76:	d03f      	beq.n	801aaf8 <_vfiprintf_r+0x22c>
 801aa78:	4b29      	ldr	r3, [pc, #164]	; (801ab20 <_vfiprintf_r+0x254>)
 801aa7a:	bb1b      	cbnz	r3, 801aac4 <_vfiprintf_r+0x1f8>
 801aa7c:	9b03      	ldr	r3, [sp, #12]
 801aa7e:	3307      	adds	r3, #7
 801aa80:	f023 0307 	bic.w	r3, r3, #7
 801aa84:	3308      	adds	r3, #8
 801aa86:	9303      	str	r3, [sp, #12]
 801aa88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801aa8a:	443b      	add	r3, r7
 801aa8c:	9309      	str	r3, [sp, #36]	; 0x24
 801aa8e:	e767      	b.n	801a960 <_vfiprintf_r+0x94>
 801aa90:	fb0c 3202 	mla	r2, ip, r2, r3
 801aa94:	460c      	mov	r4, r1
 801aa96:	2001      	movs	r0, #1
 801aa98:	e7a5      	b.n	801a9e6 <_vfiprintf_r+0x11a>
 801aa9a:	2300      	movs	r3, #0
 801aa9c:	3401      	adds	r4, #1
 801aa9e:	9305      	str	r3, [sp, #20]
 801aaa0:	4619      	mov	r1, r3
 801aaa2:	f04f 0c0a 	mov.w	ip, #10
 801aaa6:	4620      	mov	r0, r4
 801aaa8:	f810 2b01 	ldrb.w	r2, [r0], #1
 801aaac:	3a30      	subs	r2, #48	; 0x30
 801aaae:	2a09      	cmp	r2, #9
 801aab0:	d903      	bls.n	801aaba <_vfiprintf_r+0x1ee>
 801aab2:	2b00      	cmp	r3, #0
 801aab4:	d0c5      	beq.n	801aa42 <_vfiprintf_r+0x176>
 801aab6:	9105      	str	r1, [sp, #20]
 801aab8:	e7c3      	b.n	801aa42 <_vfiprintf_r+0x176>
 801aaba:	fb0c 2101 	mla	r1, ip, r1, r2
 801aabe:	4604      	mov	r4, r0
 801aac0:	2301      	movs	r3, #1
 801aac2:	e7f0      	b.n	801aaa6 <_vfiprintf_r+0x1da>
 801aac4:	ab03      	add	r3, sp, #12
 801aac6:	9300      	str	r3, [sp, #0]
 801aac8:	462a      	mov	r2, r5
 801aaca:	4b16      	ldr	r3, [pc, #88]	; (801ab24 <_vfiprintf_r+0x258>)
 801aacc:	a904      	add	r1, sp, #16
 801aace:	4630      	mov	r0, r6
 801aad0:	f3af 8000 	nop.w
 801aad4:	4607      	mov	r7, r0
 801aad6:	1c78      	adds	r0, r7, #1
 801aad8:	d1d6      	bne.n	801aa88 <_vfiprintf_r+0x1bc>
 801aada:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801aadc:	07d9      	lsls	r1, r3, #31
 801aade:	d405      	bmi.n	801aaec <_vfiprintf_r+0x220>
 801aae0:	89ab      	ldrh	r3, [r5, #12]
 801aae2:	059a      	lsls	r2, r3, #22
 801aae4:	d402      	bmi.n	801aaec <_vfiprintf_r+0x220>
 801aae6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801aae8:	f7ff fe53 	bl	801a792 <__retarget_lock_release_recursive>
 801aaec:	89ab      	ldrh	r3, [r5, #12]
 801aaee:	065b      	lsls	r3, r3, #25
 801aaf0:	f53f af12 	bmi.w	801a918 <_vfiprintf_r+0x4c>
 801aaf4:	9809      	ldr	r0, [sp, #36]	; 0x24
 801aaf6:	e711      	b.n	801a91c <_vfiprintf_r+0x50>
 801aaf8:	ab03      	add	r3, sp, #12
 801aafa:	9300      	str	r3, [sp, #0]
 801aafc:	462a      	mov	r2, r5
 801aafe:	4b09      	ldr	r3, [pc, #36]	; (801ab24 <_vfiprintf_r+0x258>)
 801ab00:	a904      	add	r1, sp, #16
 801ab02:	4630      	mov	r0, r6
 801ab04:	f000 f880 	bl	801ac08 <_printf_i>
 801ab08:	e7e4      	b.n	801aad4 <_vfiprintf_r+0x208>
 801ab0a:	bf00      	nop
 801ab0c:	0806a61c 	.word	0x0806a61c
 801ab10:	0806a63c 	.word	0x0806a63c
 801ab14:	0806a5fc 	.word	0x0806a5fc
 801ab18:	0806a65c 	.word	0x0806a65c
 801ab1c:	0806a666 	.word	0x0806a666
 801ab20:	00000000 	.word	0x00000000
 801ab24:	0801a8a7 	.word	0x0801a8a7
 801ab28:	0806a662 	.word	0x0806a662

0801ab2c <_printf_common>:
 801ab2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ab30:	4616      	mov	r6, r2
 801ab32:	4699      	mov	r9, r3
 801ab34:	688a      	ldr	r2, [r1, #8]
 801ab36:	690b      	ldr	r3, [r1, #16]
 801ab38:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801ab3c:	4293      	cmp	r3, r2
 801ab3e:	bfb8      	it	lt
 801ab40:	4613      	movlt	r3, r2
 801ab42:	6033      	str	r3, [r6, #0]
 801ab44:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801ab48:	4607      	mov	r7, r0
 801ab4a:	460c      	mov	r4, r1
 801ab4c:	b10a      	cbz	r2, 801ab52 <_printf_common+0x26>
 801ab4e:	3301      	adds	r3, #1
 801ab50:	6033      	str	r3, [r6, #0]
 801ab52:	6823      	ldr	r3, [r4, #0]
 801ab54:	0699      	lsls	r1, r3, #26
 801ab56:	bf42      	ittt	mi
 801ab58:	6833      	ldrmi	r3, [r6, #0]
 801ab5a:	3302      	addmi	r3, #2
 801ab5c:	6033      	strmi	r3, [r6, #0]
 801ab5e:	6825      	ldr	r5, [r4, #0]
 801ab60:	f015 0506 	ands.w	r5, r5, #6
 801ab64:	d106      	bne.n	801ab74 <_printf_common+0x48>
 801ab66:	f104 0a19 	add.w	sl, r4, #25
 801ab6a:	68e3      	ldr	r3, [r4, #12]
 801ab6c:	6832      	ldr	r2, [r6, #0]
 801ab6e:	1a9b      	subs	r3, r3, r2
 801ab70:	42ab      	cmp	r3, r5
 801ab72:	dc26      	bgt.n	801abc2 <_printf_common+0x96>
 801ab74:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801ab78:	1e13      	subs	r3, r2, #0
 801ab7a:	6822      	ldr	r2, [r4, #0]
 801ab7c:	bf18      	it	ne
 801ab7e:	2301      	movne	r3, #1
 801ab80:	0692      	lsls	r2, r2, #26
 801ab82:	d42b      	bmi.n	801abdc <_printf_common+0xb0>
 801ab84:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801ab88:	4649      	mov	r1, r9
 801ab8a:	4638      	mov	r0, r7
 801ab8c:	47c0      	blx	r8
 801ab8e:	3001      	adds	r0, #1
 801ab90:	d01e      	beq.n	801abd0 <_printf_common+0xa4>
 801ab92:	6823      	ldr	r3, [r4, #0]
 801ab94:	68e5      	ldr	r5, [r4, #12]
 801ab96:	6832      	ldr	r2, [r6, #0]
 801ab98:	f003 0306 	and.w	r3, r3, #6
 801ab9c:	2b04      	cmp	r3, #4
 801ab9e:	bf08      	it	eq
 801aba0:	1aad      	subeq	r5, r5, r2
 801aba2:	68a3      	ldr	r3, [r4, #8]
 801aba4:	6922      	ldr	r2, [r4, #16]
 801aba6:	bf0c      	ite	eq
 801aba8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801abac:	2500      	movne	r5, #0
 801abae:	4293      	cmp	r3, r2
 801abb0:	bfc4      	itt	gt
 801abb2:	1a9b      	subgt	r3, r3, r2
 801abb4:	18ed      	addgt	r5, r5, r3
 801abb6:	2600      	movs	r6, #0
 801abb8:	341a      	adds	r4, #26
 801abba:	42b5      	cmp	r5, r6
 801abbc:	d11a      	bne.n	801abf4 <_printf_common+0xc8>
 801abbe:	2000      	movs	r0, #0
 801abc0:	e008      	b.n	801abd4 <_printf_common+0xa8>
 801abc2:	2301      	movs	r3, #1
 801abc4:	4652      	mov	r2, sl
 801abc6:	4649      	mov	r1, r9
 801abc8:	4638      	mov	r0, r7
 801abca:	47c0      	blx	r8
 801abcc:	3001      	adds	r0, #1
 801abce:	d103      	bne.n	801abd8 <_printf_common+0xac>
 801abd0:	f04f 30ff 	mov.w	r0, #4294967295
 801abd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801abd8:	3501      	adds	r5, #1
 801abda:	e7c6      	b.n	801ab6a <_printf_common+0x3e>
 801abdc:	18e1      	adds	r1, r4, r3
 801abde:	1c5a      	adds	r2, r3, #1
 801abe0:	2030      	movs	r0, #48	; 0x30
 801abe2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801abe6:	4422      	add	r2, r4
 801abe8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801abec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801abf0:	3302      	adds	r3, #2
 801abf2:	e7c7      	b.n	801ab84 <_printf_common+0x58>
 801abf4:	2301      	movs	r3, #1
 801abf6:	4622      	mov	r2, r4
 801abf8:	4649      	mov	r1, r9
 801abfa:	4638      	mov	r0, r7
 801abfc:	47c0      	blx	r8
 801abfe:	3001      	adds	r0, #1
 801ac00:	d0e6      	beq.n	801abd0 <_printf_common+0xa4>
 801ac02:	3601      	adds	r6, #1
 801ac04:	e7d9      	b.n	801abba <_printf_common+0x8e>
	...

0801ac08 <_printf_i>:
 801ac08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801ac0c:	7e0f      	ldrb	r7, [r1, #24]
 801ac0e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801ac10:	2f78      	cmp	r7, #120	; 0x78
 801ac12:	4691      	mov	r9, r2
 801ac14:	4680      	mov	r8, r0
 801ac16:	460c      	mov	r4, r1
 801ac18:	469a      	mov	sl, r3
 801ac1a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801ac1e:	d807      	bhi.n	801ac30 <_printf_i+0x28>
 801ac20:	2f62      	cmp	r7, #98	; 0x62
 801ac22:	d80a      	bhi.n	801ac3a <_printf_i+0x32>
 801ac24:	2f00      	cmp	r7, #0
 801ac26:	f000 80d8 	beq.w	801adda <_printf_i+0x1d2>
 801ac2a:	2f58      	cmp	r7, #88	; 0x58
 801ac2c:	f000 80a3 	beq.w	801ad76 <_printf_i+0x16e>
 801ac30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801ac34:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801ac38:	e03a      	b.n	801acb0 <_printf_i+0xa8>
 801ac3a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801ac3e:	2b15      	cmp	r3, #21
 801ac40:	d8f6      	bhi.n	801ac30 <_printf_i+0x28>
 801ac42:	a101      	add	r1, pc, #4	; (adr r1, 801ac48 <_printf_i+0x40>)
 801ac44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801ac48:	0801aca1 	.word	0x0801aca1
 801ac4c:	0801acb5 	.word	0x0801acb5
 801ac50:	0801ac31 	.word	0x0801ac31
 801ac54:	0801ac31 	.word	0x0801ac31
 801ac58:	0801ac31 	.word	0x0801ac31
 801ac5c:	0801ac31 	.word	0x0801ac31
 801ac60:	0801acb5 	.word	0x0801acb5
 801ac64:	0801ac31 	.word	0x0801ac31
 801ac68:	0801ac31 	.word	0x0801ac31
 801ac6c:	0801ac31 	.word	0x0801ac31
 801ac70:	0801ac31 	.word	0x0801ac31
 801ac74:	0801adc1 	.word	0x0801adc1
 801ac78:	0801ace5 	.word	0x0801ace5
 801ac7c:	0801ada3 	.word	0x0801ada3
 801ac80:	0801ac31 	.word	0x0801ac31
 801ac84:	0801ac31 	.word	0x0801ac31
 801ac88:	0801ade3 	.word	0x0801ade3
 801ac8c:	0801ac31 	.word	0x0801ac31
 801ac90:	0801ace5 	.word	0x0801ace5
 801ac94:	0801ac31 	.word	0x0801ac31
 801ac98:	0801ac31 	.word	0x0801ac31
 801ac9c:	0801adab 	.word	0x0801adab
 801aca0:	682b      	ldr	r3, [r5, #0]
 801aca2:	1d1a      	adds	r2, r3, #4
 801aca4:	681b      	ldr	r3, [r3, #0]
 801aca6:	602a      	str	r2, [r5, #0]
 801aca8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801acac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801acb0:	2301      	movs	r3, #1
 801acb2:	e0a3      	b.n	801adfc <_printf_i+0x1f4>
 801acb4:	6820      	ldr	r0, [r4, #0]
 801acb6:	6829      	ldr	r1, [r5, #0]
 801acb8:	0606      	lsls	r6, r0, #24
 801acba:	f101 0304 	add.w	r3, r1, #4
 801acbe:	d50a      	bpl.n	801acd6 <_printf_i+0xce>
 801acc0:	680e      	ldr	r6, [r1, #0]
 801acc2:	602b      	str	r3, [r5, #0]
 801acc4:	2e00      	cmp	r6, #0
 801acc6:	da03      	bge.n	801acd0 <_printf_i+0xc8>
 801acc8:	232d      	movs	r3, #45	; 0x2d
 801acca:	4276      	negs	r6, r6
 801accc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801acd0:	485e      	ldr	r0, [pc, #376]	; (801ae4c <_printf_i+0x244>)
 801acd2:	230a      	movs	r3, #10
 801acd4:	e019      	b.n	801ad0a <_printf_i+0x102>
 801acd6:	680e      	ldr	r6, [r1, #0]
 801acd8:	602b      	str	r3, [r5, #0]
 801acda:	f010 0f40 	tst.w	r0, #64	; 0x40
 801acde:	bf18      	it	ne
 801ace0:	b236      	sxthne	r6, r6
 801ace2:	e7ef      	b.n	801acc4 <_printf_i+0xbc>
 801ace4:	682b      	ldr	r3, [r5, #0]
 801ace6:	6820      	ldr	r0, [r4, #0]
 801ace8:	1d19      	adds	r1, r3, #4
 801acea:	6029      	str	r1, [r5, #0]
 801acec:	0601      	lsls	r1, r0, #24
 801acee:	d501      	bpl.n	801acf4 <_printf_i+0xec>
 801acf0:	681e      	ldr	r6, [r3, #0]
 801acf2:	e002      	b.n	801acfa <_printf_i+0xf2>
 801acf4:	0646      	lsls	r6, r0, #25
 801acf6:	d5fb      	bpl.n	801acf0 <_printf_i+0xe8>
 801acf8:	881e      	ldrh	r6, [r3, #0]
 801acfa:	4854      	ldr	r0, [pc, #336]	; (801ae4c <_printf_i+0x244>)
 801acfc:	2f6f      	cmp	r7, #111	; 0x6f
 801acfe:	bf0c      	ite	eq
 801ad00:	2308      	moveq	r3, #8
 801ad02:	230a      	movne	r3, #10
 801ad04:	2100      	movs	r1, #0
 801ad06:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801ad0a:	6865      	ldr	r5, [r4, #4]
 801ad0c:	60a5      	str	r5, [r4, #8]
 801ad0e:	2d00      	cmp	r5, #0
 801ad10:	bfa2      	ittt	ge
 801ad12:	6821      	ldrge	r1, [r4, #0]
 801ad14:	f021 0104 	bicge.w	r1, r1, #4
 801ad18:	6021      	strge	r1, [r4, #0]
 801ad1a:	b90e      	cbnz	r6, 801ad20 <_printf_i+0x118>
 801ad1c:	2d00      	cmp	r5, #0
 801ad1e:	d04d      	beq.n	801adbc <_printf_i+0x1b4>
 801ad20:	4615      	mov	r5, r2
 801ad22:	fbb6 f1f3 	udiv	r1, r6, r3
 801ad26:	fb03 6711 	mls	r7, r3, r1, r6
 801ad2a:	5dc7      	ldrb	r7, [r0, r7]
 801ad2c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801ad30:	4637      	mov	r7, r6
 801ad32:	42bb      	cmp	r3, r7
 801ad34:	460e      	mov	r6, r1
 801ad36:	d9f4      	bls.n	801ad22 <_printf_i+0x11a>
 801ad38:	2b08      	cmp	r3, #8
 801ad3a:	d10b      	bne.n	801ad54 <_printf_i+0x14c>
 801ad3c:	6823      	ldr	r3, [r4, #0]
 801ad3e:	07de      	lsls	r6, r3, #31
 801ad40:	d508      	bpl.n	801ad54 <_printf_i+0x14c>
 801ad42:	6923      	ldr	r3, [r4, #16]
 801ad44:	6861      	ldr	r1, [r4, #4]
 801ad46:	4299      	cmp	r1, r3
 801ad48:	bfde      	ittt	le
 801ad4a:	2330      	movle	r3, #48	; 0x30
 801ad4c:	f805 3c01 	strble.w	r3, [r5, #-1]
 801ad50:	f105 35ff 	addle.w	r5, r5, #4294967295
 801ad54:	1b52      	subs	r2, r2, r5
 801ad56:	6122      	str	r2, [r4, #16]
 801ad58:	f8cd a000 	str.w	sl, [sp]
 801ad5c:	464b      	mov	r3, r9
 801ad5e:	aa03      	add	r2, sp, #12
 801ad60:	4621      	mov	r1, r4
 801ad62:	4640      	mov	r0, r8
 801ad64:	f7ff fee2 	bl	801ab2c <_printf_common>
 801ad68:	3001      	adds	r0, #1
 801ad6a:	d14c      	bne.n	801ae06 <_printf_i+0x1fe>
 801ad6c:	f04f 30ff 	mov.w	r0, #4294967295
 801ad70:	b004      	add	sp, #16
 801ad72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ad76:	4835      	ldr	r0, [pc, #212]	; (801ae4c <_printf_i+0x244>)
 801ad78:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801ad7c:	6829      	ldr	r1, [r5, #0]
 801ad7e:	6823      	ldr	r3, [r4, #0]
 801ad80:	f851 6b04 	ldr.w	r6, [r1], #4
 801ad84:	6029      	str	r1, [r5, #0]
 801ad86:	061d      	lsls	r5, r3, #24
 801ad88:	d514      	bpl.n	801adb4 <_printf_i+0x1ac>
 801ad8a:	07df      	lsls	r7, r3, #31
 801ad8c:	bf44      	itt	mi
 801ad8e:	f043 0320 	orrmi.w	r3, r3, #32
 801ad92:	6023      	strmi	r3, [r4, #0]
 801ad94:	b91e      	cbnz	r6, 801ad9e <_printf_i+0x196>
 801ad96:	6823      	ldr	r3, [r4, #0]
 801ad98:	f023 0320 	bic.w	r3, r3, #32
 801ad9c:	6023      	str	r3, [r4, #0]
 801ad9e:	2310      	movs	r3, #16
 801ada0:	e7b0      	b.n	801ad04 <_printf_i+0xfc>
 801ada2:	6823      	ldr	r3, [r4, #0]
 801ada4:	f043 0320 	orr.w	r3, r3, #32
 801ada8:	6023      	str	r3, [r4, #0]
 801adaa:	2378      	movs	r3, #120	; 0x78
 801adac:	4828      	ldr	r0, [pc, #160]	; (801ae50 <_printf_i+0x248>)
 801adae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801adb2:	e7e3      	b.n	801ad7c <_printf_i+0x174>
 801adb4:	0659      	lsls	r1, r3, #25
 801adb6:	bf48      	it	mi
 801adb8:	b2b6      	uxthmi	r6, r6
 801adba:	e7e6      	b.n	801ad8a <_printf_i+0x182>
 801adbc:	4615      	mov	r5, r2
 801adbe:	e7bb      	b.n	801ad38 <_printf_i+0x130>
 801adc0:	682b      	ldr	r3, [r5, #0]
 801adc2:	6826      	ldr	r6, [r4, #0]
 801adc4:	6961      	ldr	r1, [r4, #20]
 801adc6:	1d18      	adds	r0, r3, #4
 801adc8:	6028      	str	r0, [r5, #0]
 801adca:	0635      	lsls	r5, r6, #24
 801adcc:	681b      	ldr	r3, [r3, #0]
 801adce:	d501      	bpl.n	801add4 <_printf_i+0x1cc>
 801add0:	6019      	str	r1, [r3, #0]
 801add2:	e002      	b.n	801adda <_printf_i+0x1d2>
 801add4:	0670      	lsls	r0, r6, #25
 801add6:	d5fb      	bpl.n	801add0 <_printf_i+0x1c8>
 801add8:	8019      	strh	r1, [r3, #0]
 801adda:	2300      	movs	r3, #0
 801addc:	6123      	str	r3, [r4, #16]
 801adde:	4615      	mov	r5, r2
 801ade0:	e7ba      	b.n	801ad58 <_printf_i+0x150>
 801ade2:	682b      	ldr	r3, [r5, #0]
 801ade4:	1d1a      	adds	r2, r3, #4
 801ade6:	602a      	str	r2, [r5, #0]
 801ade8:	681d      	ldr	r5, [r3, #0]
 801adea:	6862      	ldr	r2, [r4, #4]
 801adec:	2100      	movs	r1, #0
 801adee:	4628      	mov	r0, r5
 801adf0:	f7e5 fa0e 	bl	8000210 <memchr>
 801adf4:	b108      	cbz	r0, 801adfa <_printf_i+0x1f2>
 801adf6:	1b40      	subs	r0, r0, r5
 801adf8:	6060      	str	r0, [r4, #4]
 801adfa:	6863      	ldr	r3, [r4, #4]
 801adfc:	6123      	str	r3, [r4, #16]
 801adfe:	2300      	movs	r3, #0
 801ae00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801ae04:	e7a8      	b.n	801ad58 <_printf_i+0x150>
 801ae06:	6923      	ldr	r3, [r4, #16]
 801ae08:	462a      	mov	r2, r5
 801ae0a:	4649      	mov	r1, r9
 801ae0c:	4640      	mov	r0, r8
 801ae0e:	47d0      	blx	sl
 801ae10:	3001      	adds	r0, #1
 801ae12:	d0ab      	beq.n	801ad6c <_printf_i+0x164>
 801ae14:	6823      	ldr	r3, [r4, #0]
 801ae16:	079b      	lsls	r3, r3, #30
 801ae18:	d413      	bmi.n	801ae42 <_printf_i+0x23a>
 801ae1a:	68e0      	ldr	r0, [r4, #12]
 801ae1c:	9b03      	ldr	r3, [sp, #12]
 801ae1e:	4298      	cmp	r0, r3
 801ae20:	bfb8      	it	lt
 801ae22:	4618      	movlt	r0, r3
 801ae24:	e7a4      	b.n	801ad70 <_printf_i+0x168>
 801ae26:	2301      	movs	r3, #1
 801ae28:	4632      	mov	r2, r6
 801ae2a:	4649      	mov	r1, r9
 801ae2c:	4640      	mov	r0, r8
 801ae2e:	47d0      	blx	sl
 801ae30:	3001      	adds	r0, #1
 801ae32:	d09b      	beq.n	801ad6c <_printf_i+0x164>
 801ae34:	3501      	adds	r5, #1
 801ae36:	68e3      	ldr	r3, [r4, #12]
 801ae38:	9903      	ldr	r1, [sp, #12]
 801ae3a:	1a5b      	subs	r3, r3, r1
 801ae3c:	42ab      	cmp	r3, r5
 801ae3e:	dcf2      	bgt.n	801ae26 <_printf_i+0x21e>
 801ae40:	e7eb      	b.n	801ae1a <_printf_i+0x212>
 801ae42:	2500      	movs	r5, #0
 801ae44:	f104 0619 	add.w	r6, r4, #25
 801ae48:	e7f5      	b.n	801ae36 <_printf_i+0x22e>
 801ae4a:	bf00      	nop
 801ae4c:	0806a66d 	.word	0x0806a66d
 801ae50:	0806a67e 	.word	0x0806a67e

0801ae54 <__sread>:
 801ae54:	b510      	push	{r4, lr}
 801ae56:	460c      	mov	r4, r1
 801ae58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ae5c:	f000 f89c 	bl	801af98 <_read_r>
 801ae60:	2800      	cmp	r0, #0
 801ae62:	bfab      	itete	ge
 801ae64:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801ae66:	89a3      	ldrhlt	r3, [r4, #12]
 801ae68:	181b      	addge	r3, r3, r0
 801ae6a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801ae6e:	bfac      	ite	ge
 801ae70:	6563      	strge	r3, [r4, #84]	; 0x54
 801ae72:	81a3      	strhlt	r3, [r4, #12]
 801ae74:	bd10      	pop	{r4, pc}

0801ae76 <__swrite>:
 801ae76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ae7a:	461f      	mov	r7, r3
 801ae7c:	898b      	ldrh	r3, [r1, #12]
 801ae7e:	05db      	lsls	r3, r3, #23
 801ae80:	4605      	mov	r5, r0
 801ae82:	460c      	mov	r4, r1
 801ae84:	4616      	mov	r6, r2
 801ae86:	d505      	bpl.n	801ae94 <__swrite+0x1e>
 801ae88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ae8c:	2302      	movs	r3, #2
 801ae8e:	2200      	movs	r2, #0
 801ae90:	f000 f870 	bl	801af74 <_lseek_r>
 801ae94:	89a3      	ldrh	r3, [r4, #12]
 801ae96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ae9a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801ae9e:	81a3      	strh	r3, [r4, #12]
 801aea0:	4632      	mov	r2, r6
 801aea2:	463b      	mov	r3, r7
 801aea4:	4628      	mov	r0, r5
 801aea6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801aeaa:	f000 b817 	b.w	801aedc <_write_r>

0801aeae <__sseek>:
 801aeae:	b510      	push	{r4, lr}
 801aeb0:	460c      	mov	r4, r1
 801aeb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801aeb6:	f000 f85d 	bl	801af74 <_lseek_r>
 801aeba:	1c43      	adds	r3, r0, #1
 801aebc:	89a3      	ldrh	r3, [r4, #12]
 801aebe:	bf15      	itete	ne
 801aec0:	6560      	strne	r0, [r4, #84]	; 0x54
 801aec2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801aec6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801aeca:	81a3      	strheq	r3, [r4, #12]
 801aecc:	bf18      	it	ne
 801aece:	81a3      	strhne	r3, [r4, #12]
 801aed0:	bd10      	pop	{r4, pc}

0801aed2 <__sclose>:
 801aed2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801aed6:	f000 b81b 	b.w	801af10 <_close_r>
	...

0801aedc <_write_r>:
 801aedc:	b538      	push	{r3, r4, r5, lr}
 801aede:	4d07      	ldr	r5, [pc, #28]	; (801aefc <_write_r+0x20>)
 801aee0:	4604      	mov	r4, r0
 801aee2:	4608      	mov	r0, r1
 801aee4:	4611      	mov	r1, r2
 801aee6:	2200      	movs	r2, #0
 801aee8:	602a      	str	r2, [r5, #0]
 801aeea:	461a      	mov	r2, r3
 801aeec:	f7e8 fa6f 	bl	80033ce <_write>
 801aef0:	1c43      	adds	r3, r0, #1
 801aef2:	d102      	bne.n	801aefa <_write_r+0x1e>
 801aef4:	682b      	ldr	r3, [r5, #0]
 801aef6:	b103      	cbz	r3, 801aefa <_write_r+0x1e>
 801aef8:	6023      	str	r3, [r4, #0]
 801aefa:	bd38      	pop	{r3, r4, r5, pc}
 801aefc:	20013c68 	.word	0x20013c68

0801af00 <abort>:
 801af00:	b508      	push	{r3, lr}
 801af02:	2006      	movs	r0, #6
 801af04:	f000 f882 	bl	801b00c <raise>
 801af08:	2001      	movs	r0, #1
 801af0a:	f7e8 fa39 	bl	8003380 <_exit>
	...

0801af10 <_close_r>:
 801af10:	b538      	push	{r3, r4, r5, lr}
 801af12:	4d06      	ldr	r5, [pc, #24]	; (801af2c <_close_r+0x1c>)
 801af14:	2300      	movs	r3, #0
 801af16:	4604      	mov	r4, r0
 801af18:	4608      	mov	r0, r1
 801af1a:	602b      	str	r3, [r5, #0]
 801af1c:	f7e8 fa73 	bl	8003406 <_close>
 801af20:	1c43      	adds	r3, r0, #1
 801af22:	d102      	bne.n	801af2a <_close_r+0x1a>
 801af24:	682b      	ldr	r3, [r5, #0]
 801af26:	b103      	cbz	r3, 801af2a <_close_r+0x1a>
 801af28:	6023      	str	r3, [r4, #0]
 801af2a:	bd38      	pop	{r3, r4, r5, pc}
 801af2c:	20013c68 	.word	0x20013c68

0801af30 <_fstat_r>:
 801af30:	b538      	push	{r3, r4, r5, lr}
 801af32:	4d07      	ldr	r5, [pc, #28]	; (801af50 <_fstat_r+0x20>)
 801af34:	2300      	movs	r3, #0
 801af36:	4604      	mov	r4, r0
 801af38:	4608      	mov	r0, r1
 801af3a:	4611      	mov	r1, r2
 801af3c:	602b      	str	r3, [r5, #0]
 801af3e:	f7e8 fa6e 	bl	800341e <_fstat>
 801af42:	1c43      	adds	r3, r0, #1
 801af44:	d102      	bne.n	801af4c <_fstat_r+0x1c>
 801af46:	682b      	ldr	r3, [r5, #0]
 801af48:	b103      	cbz	r3, 801af4c <_fstat_r+0x1c>
 801af4a:	6023      	str	r3, [r4, #0]
 801af4c:	bd38      	pop	{r3, r4, r5, pc}
 801af4e:	bf00      	nop
 801af50:	20013c68 	.word	0x20013c68

0801af54 <_isatty_r>:
 801af54:	b538      	push	{r3, r4, r5, lr}
 801af56:	4d06      	ldr	r5, [pc, #24]	; (801af70 <_isatty_r+0x1c>)
 801af58:	2300      	movs	r3, #0
 801af5a:	4604      	mov	r4, r0
 801af5c:	4608      	mov	r0, r1
 801af5e:	602b      	str	r3, [r5, #0]
 801af60:	f7e8 fa6d 	bl	800343e <_isatty>
 801af64:	1c43      	adds	r3, r0, #1
 801af66:	d102      	bne.n	801af6e <_isatty_r+0x1a>
 801af68:	682b      	ldr	r3, [r5, #0]
 801af6a:	b103      	cbz	r3, 801af6e <_isatty_r+0x1a>
 801af6c:	6023      	str	r3, [r4, #0]
 801af6e:	bd38      	pop	{r3, r4, r5, pc}
 801af70:	20013c68 	.word	0x20013c68

0801af74 <_lseek_r>:
 801af74:	b538      	push	{r3, r4, r5, lr}
 801af76:	4d07      	ldr	r5, [pc, #28]	; (801af94 <_lseek_r+0x20>)
 801af78:	4604      	mov	r4, r0
 801af7a:	4608      	mov	r0, r1
 801af7c:	4611      	mov	r1, r2
 801af7e:	2200      	movs	r2, #0
 801af80:	602a      	str	r2, [r5, #0]
 801af82:	461a      	mov	r2, r3
 801af84:	f7e8 fa66 	bl	8003454 <_lseek>
 801af88:	1c43      	adds	r3, r0, #1
 801af8a:	d102      	bne.n	801af92 <_lseek_r+0x1e>
 801af8c:	682b      	ldr	r3, [r5, #0]
 801af8e:	b103      	cbz	r3, 801af92 <_lseek_r+0x1e>
 801af90:	6023      	str	r3, [r4, #0]
 801af92:	bd38      	pop	{r3, r4, r5, pc}
 801af94:	20013c68 	.word	0x20013c68

0801af98 <_read_r>:
 801af98:	b538      	push	{r3, r4, r5, lr}
 801af9a:	4d07      	ldr	r5, [pc, #28]	; (801afb8 <_read_r+0x20>)
 801af9c:	4604      	mov	r4, r0
 801af9e:	4608      	mov	r0, r1
 801afa0:	4611      	mov	r1, r2
 801afa2:	2200      	movs	r2, #0
 801afa4:	602a      	str	r2, [r5, #0]
 801afa6:	461a      	mov	r2, r3
 801afa8:	f7e8 f9f4 	bl	8003394 <_read>
 801afac:	1c43      	adds	r3, r0, #1
 801afae:	d102      	bne.n	801afb6 <_read_r+0x1e>
 801afb0:	682b      	ldr	r3, [r5, #0]
 801afb2:	b103      	cbz	r3, 801afb6 <_read_r+0x1e>
 801afb4:	6023      	str	r3, [r4, #0]
 801afb6:	bd38      	pop	{r3, r4, r5, pc}
 801afb8:	20013c68 	.word	0x20013c68

0801afbc <_raise_r>:
 801afbc:	291f      	cmp	r1, #31
 801afbe:	b538      	push	{r3, r4, r5, lr}
 801afc0:	4604      	mov	r4, r0
 801afc2:	460d      	mov	r5, r1
 801afc4:	d904      	bls.n	801afd0 <_raise_r+0x14>
 801afc6:	2316      	movs	r3, #22
 801afc8:	6003      	str	r3, [r0, #0]
 801afca:	f04f 30ff 	mov.w	r0, #4294967295
 801afce:	bd38      	pop	{r3, r4, r5, pc}
 801afd0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801afd2:	b112      	cbz	r2, 801afda <_raise_r+0x1e>
 801afd4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801afd8:	b94b      	cbnz	r3, 801afee <_raise_r+0x32>
 801afda:	4620      	mov	r0, r4
 801afdc:	f000 f830 	bl	801b040 <_getpid_r>
 801afe0:	462a      	mov	r2, r5
 801afe2:	4601      	mov	r1, r0
 801afe4:	4620      	mov	r0, r4
 801afe6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801afea:	f000 b817 	b.w	801b01c <_kill_r>
 801afee:	2b01      	cmp	r3, #1
 801aff0:	d00a      	beq.n	801b008 <_raise_r+0x4c>
 801aff2:	1c59      	adds	r1, r3, #1
 801aff4:	d103      	bne.n	801affe <_raise_r+0x42>
 801aff6:	2316      	movs	r3, #22
 801aff8:	6003      	str	r3, [r0, #0]
 801affa:	2001      	movs	r0, #1
 801affc:	e7e7      	b.n	801afce <_raise_r+0x12>
 801affe:	2400      	movs	r4, #0
 801b000:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801b004:	4628      	mov	r0, r5
 801b006:	4798      	blx	r3
 801b008:	2000      	movs	r0, #0
 801b00a:	e7e0      	b.n	801afce <_raise_r+0x12>

0801b00c <raise>:
 801b00c:	4b02      	ldr	r3, [pc, #8]	; (801b018 <raise+0xc>)
 801b00e:	4601      	mov	r1, r0
 801b010:	6818      	ldr	r0, [r3, #0]
 801b012:	f7ff bfd3 	b.w	801afbc <_raise_r>
 801b016:	bf00      	nop
 801b018:	200000c8 	.word	0x200000c8

0801b01c <_kill_r>:
 801b01c:	b538      	push	{r3, r4, r5, lr}
 801b01e:	4d07      	ldr	r5, [pc, #28]	; (801b03c <_kill_r+0x20>)
 801b020:	2300      	movs	r3, #0
 801b022:	4604      	mov	r4, r0
 801b024:	4608      	mov	r0, r1
 801b026:	4611      	mov	r1, r2
 801b028:	602b      	str	r3, [r5, #0]
 801b02a:	f7e8 f999 	bl	8003360 <_kill>
 801b02e:	1c43      	adds	r3, r0, #1
 801b030:	d102      	bne.n	801b038 <_kill_r+0x1c>
 801b032:	682b      	ldr	r3, [r5, #0]
 801b034:	b103      	cbz	r3, 801b038 <_kill_r+0x1c>
 801b036:	6023      	str	r3, [r4, #0]
 801b038:	bd38      	pop	{r3, r4, r5, pc}
 801b03a:	bf00      	nop
 801b03c:	20013c68 	.word	0x20013c68

0801b040 <_getpid_r>:
 801b040:	f7e8 b986 	b.w	8003350 <_getpid>

0801b044 <_init>:
 801b044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b046:	bf00      	nop
 801b048:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b04a:	bc08      	pop	{r3}
 801b04c:	469e      	mov	lr, r3
 801b04e:	4770      	bx	lr

0801b050 <_fini>:
 801b050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b052:	bf00      	nop
 801b054:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b056:	bc08      	pop	{r3}
 801b058:	469e      	mov	lr, r3
 801b05a:	4770      	bx	lr
